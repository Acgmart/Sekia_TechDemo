//////////////////////////////////////////
//
// NOTE: This is *not* a valid shader file
//
///////////////////////////////////////////
Shader "miHoYo/CG/CG_HaiDengJie_Deer02" {
Properties {
_Scale ("Scale Compared to _MAYA", Float) = 0.01
[Header(Utility Display)] [Enum(None, 0, vertex.r, 1, vertex.g, 2, vertex.b, 3, vertex.a, 4, diffuse, 5)] _UtilityDisplay1 ("Utility Display 1", Float) = 0
[Enum(None, 0, shadow strength, 1, shadow ramp uv, 2, normal, 3, point light, 4)] _UtilityDisplay2 ("Utility Display 2", Float) = 0
[Header(Color)] _Color ("Tint Color", Color) = (1,1,1,1)
[Header(Element View)] _ElementViewEleID ("Element ID", Float) = 0
[Header(Texture)] _MainTex ("Main Tex", 2D) = "white" { }
[Enum(None, 0, AlphaTest, 1, Emission, 2, FaceBlush, 3)] _MainTexAlphaUse ("Main Tex Alpha Use", Float) = 0
_MainTexAlphaCutoff ("Main Tex Alpha Cutoff", Range(0, 1)) = 0.5
[Header(Coloring)] [Toggle(MAIN_TEX_COLORING_ON)] _MainTexColoring ("Use Main Tex Coloring", Float) = 0
_MainTexTintColor ("Main Tex Tint Color", Color) = (1,1,1,1)
[Header(Shadow)] [Toggle(TOON_LIGHTMAP_ON)] _UseToonLightMap ("Use Toon Light Map", Float) = 1
[MHYToggle] _UseLightMapColorAO ("Use Light Map Color.g For AO", Float) = 1
[MHYToggle] _UseVertexColorAO ("Use Vertex Color.r For AO", Float) = 1
[MHYToggle] _UseCoolShadowColorOrTex ("Use Cool Shadow Color Or Tex", Float) = 0
_LightMapTex ("Light Map Tex (RGB)", 2D) = "gray" { }
_LightArea ("Light Area Threshold", Range(0, 1)) = 0.5
_FirstShadowMultColor ("Warm Shadow Color", Color) = (0.9,0.7,0.75,1)
_CoolShadowMultColor ("Cool Shadow Color", Color) = (0.9,0.7,0.75,1)
[Header(Shadow Ramp)] [Toggle(SHADOW_RAMP_ON)] _UseShadowRamp ("Use Shadow Ramp", Float) = 0
[MHYPackedGradient(_ShadowRampTex1 _ShadowRampTex2 _ShadowRampTex3 _ShadowRampTex4 _ShadowRampTex5 _CoolShadowRampTex1 _CoolShadowRampTex2 _CoolShadowRampTex3 _CoolShadowRampTex4 _CoolShadowRampTex5)] _PackedShadowRampTex ("Packed Shadow Ramp Tex", 2D) = "grey" { }
_ShadowRampWidth ("Shadow Ramp Width", Range(0.01, 10)) = 1
[MHYToggle] _UseVertexRampWidth ("Use Vertex Shadow Ramp Width", Float) = 0
[Header(Shadow Transition)] [MHYToggle(SHADOW_TRANSITION_ON)] _UseShadowTransition ("Use Shadow Transition (only work when shadow ramp is off)", Float) = 0
_ShadowTransitionRange ("Shadow Transition Range", Range(0.001, 0.2)) = 0.01
_ShadowTransitionSoftness ("Shadow Transition Softness", Range(0, 2)) = 0.5
[Header(Specular)] [Toggle(TOON_SPECULAR_ON)] _UseToonSpecular ("Use Toon Specular", Float) = 1
_SpecularColor ("Specular Color", Color) = (1,1,1,1)
_Shininess ("Specular Shininess", Range(0.1, 100)) = 10
_SpecMulti ("Specular Multiply Factor", Range(0, 1)) = 0.1
[Header(Face Blush)] _FaceBlushStrength ("Face Blush Strength", Range(0, 1)) = 0
_FaceBlushColor ("Face Blush Color", Color) = (1,0.8,0.7,1)
[Header(Face Map New)] [Toggle(FACE_MAP_NEW_ON)] _UseFaceMapNew ("Use Face Map", Float) = 0
_FaceMapTex ("Face Map Tex (A Linear)", 2D) = "gray" { }
_FaceMapRotateOffset ("Face Map Rotate Offset", Range(-1, 1)) = 0
_FaceMapSoftness ("Face Map Softness", Range(1E-06, 1)) = 1E-06
[Header(Emission(need use main tex alpha as mask))] _EmissionScaler ("Emission Scaler", Range(0, 100)) = 1
_EmissionColor_MHY ("Emission Color", Color) = (1,1,1,1)
[Header(Outline)] [Enum(None, 0, Normal, 1, Tangent, 2)] _OutlineType ("Outline Type", Float) = 2
_OutlineWidth ("Outline Width", Range(0, 100)) = 0.04
_OutlineColor ("Outline Color", Color) = (0,0,0,1)
_MaxOutlineZOffset ("Max Outline Z Offset", Range(0, 100)) = 1
_OutlineWidthAdjustZs ("Outline Width Adjust Dist Start (near, middle, far)", Vector) = (0.01,2,6,0)
_OutlineWidthAdjustScales ("Outline Width Adjust Scale (near, middle, far)", Vector) = (0.105,0.245,0.6,0)
[Header(Ambient Point Light)] [MHYToggle] _UseAmbientPoint ("Use Ambient Point light", Float) = 0
[Enum(Result, 0, Strength, 1, Color, 2)] _AmbientPointUtility ("Ambient Point light Utility", Float) = 0
_AmbientPointStrength ("Ambient Point light Strength", Range(0, 1)) = 0.1
_AmbientPointRange ("Ambient Point light Range", Range(0, 2)) = 0.85
_AmbientPointSoftness ("Ambient Point light Softness", Range(0, 1)) = 0.3
_AmbientPointFlatness ("Ambient Point light Flatness", Range(1, 10)) = 1
_AmbientPointYOffset ("Ambient Point light Y Offset", Range(0, 2)) = 0.37
_AmbientPointColorDensity ("Ambient Point light Color Density", Range(0, 1)) = 0.5
[Header(Material 2)] [MHYToggle] _UseMaterial2 ("Use Material 2", Float) = 0
_Color2 ("Tint Color 2", Color) = (1,1,1,1)
_FirstShadowMultColor2 ("Warm Shadow Color 2", Color) = (0.9,0.7,0.75,1)
_CoolShadowMultColor2 ("Cool Shadow Color 2", Color) = (0.9,0.7,0.75,1)
_Shininess2 ("Specular Shininess 2", Range(0.1, 100)) = 10
_SpecMulti2 ("Specular Multiply Factor 2", Range(0, 1)) = 0.1
_OutlineColor2 ("Outline Color 2", Color) = (0,0,0,1)
[Header(Shadow Transition 2)] _ShadowTransitionRange2 ("Shadow Transition Range 2", Range(0.001, 0.2)) = 0.01
_ShadowTransitionSoftness2 ("Shadow Transition Softness 2", Range(0, 2)) = 0.5
[Header(Material 3)] [MHYToggle] _UseMaterial3 ("Use Material 3", Float) = 0
_Color3 ("Tint Color 3", Color) = (1,1,1,1)
_FirstShadowMultColor3 ("Warm Shadow Multiply Color 3", Color) = (0.9,0.7,0.75,1)
_CoolShadowMultColor3 ("Cool Shadow Multiply Color 3", Color) = (0.9,0.7,0.75,1)
_Shininess3 ("Specular Shininess 3", Range(0.1, 100)) = 10
_SpecMulti3 ("Specular Multiply Factor 3", Range(0, 1)) = 0.1
_OutlineColor3 ("Outline Color 3", Color) = (0,0,0,1)
[Header(Shadow Transition 3)] _ShadowTransitionRange3 ("Shadow Transition Range 3", Range(0.001, 0.2)) = 0.01
_ShadowTransitionSoftness3 ("Shadow Transition Softness 3", Range(0, 2)) = 0.5
[Header(Material 4)] [MHYToggle] _UseMaterial4 ("Use Material 4", Float) = 0
_Color4 ("Tint Color 4", Color) = (1,1,1,1)
_FirstShadowMultColor4 ("Warm Shadow Multiply Color 4", Color) = (0.9,0.7,0.75,1)
_CoolShadowMultColor4 ("Cool Shadow Multiply Color 4", Color) = (0.9,0.7,0.75,1)
_Shininess4 ("Specular Shininess 4", Range(0.1, 100)) = 10
_SpecMulti4 ("Specular Multiply Factor 4", Range(0, 1)) = 0.1
_OutlineColor4 ("Outline Color 4", Color) = (0,0,0,1)
[Header(Shadow Transition 4)] _ShadowTransitionRange4 ("Shadow Transition Range 4", Range(0.001, 0.2)) = 0.01
_ShadowTransitionSoftness4 ("Shadow Transition Softness 4", Range(0, 2)) = 0.5
[Header(Material 5)] [MHYToggle] _UseMaterial5 ("Use Material 5", Float) = 0
_Color5 ("Tint Color 5", Color) = (1,1,1,1)
_FirstShadowMultColor5 ("Warm Shadow Multiply Color 5", Color) = (0.9,0.7,0.75,1)
_CoolShadowMultColor5 ("Cool Shadow Multiply Color 5", Color) = (0.9,0.7,0.75,1)
_Shininess5 ("Specular Shininess 5", Range(0.1, 100)) = 10
_SpecMulti5 ("Specular Multiply Factor 5", Range(0, 1)) = 0.1
_OutlineColor5 ("Outline Color 5", Color) = (0,0,0,1)
[Header(Shadow Transition 5)] _ShadowTransitionRange5 ("Shadow Transition Range 5", Range(0.001, 0.2)) = 0.01
_ShadowTransitionSoftness5 ("Shadow Transition Softness 5", Range(0, 2)) = 0.5
[Header(Back Face)] [Toggle(BACK_FACE_ON)] _DrawBackFace ("Draw Back Face", Float) = 0
[MHYToggle] _UseBackFaceUV2 ("Use Back Face UV 2", Float) = 1
[Header(Dithering)] [MHYToggle] _UsingDitherAlpha ("UsingDitherAlpha", Float) = 0
_DitherAlpha ("Dither Alpha Value", Range(0, 1)) = 1
_TextureBiasWhenDithering ("Texture Bias When Dithering", Float) = -1
[Header(Plane Clipping)] [MHYToggle] _UseClipPlane ("Use Clip Plane", Float) = 0
[MHYToggle] _ClipPlaneWorld ("Clip Plane In World Space", Float) = 1
_ClipPlane ("Clip Plane", Vector) = (0,0,0,0)
[Header(Metal)] [Toggle(METAL_MAT)] _MetalMaterial ("Metal Material", Float) = 0
_MTMap ("Metal Map", 2D) = "white" { }
_MTMapBrightness ("Metal Map Brightness", Float) = 1
_MTMapTileScale ("Metal Map Tile Scale", Float) = 1
_MTMapLightColor ("Metal Map Light Color", Color) = (1,1,1,1)
_MTMapDarkColor ("Metal Map Dark Color", Color) = (0,0,0,0)
_MTShadowMultiColor ("Metal Shadow Multiply Color", Color) = (0.8,0.8,0.8,0.8)
_MTShininess ("Metal Shininess", Float) = 11
_MTSpecularScale ("Metal Specular Scale", Float) = 60
_MTSpecularAttenInShadow ("Metal Specular Attenuation in Shadow", Range(0, 1)) = 0.2
_MTSpecularColor ("Metal Specular Color", Color) = (1,1,1,1)
[Instanced GPU Skinning] _AnimTexture ("Animation Texture", 2D) = "white" { }
_AnimBoneOffset ("Anim BoneOffset", Float) = 0
_InstanceData ("", Float) = 0
[Header(State)] [Enum(UnityEngine.Rendering.CullMode)] _CullMode ("Cull Mode", Float) = 2
_PolygonOffsetFactor ("Polygon Offset Factor", Float) = 0
_PolygonOffsetUnit ("Polygon Offset Unit", Float) = 0
_OutlinePolygonOffsetFactor ("Outline Polygon Offset Factor", Float) = 0
_OutlinePolygonOffsetUnit ("Outline Polygon Offset Unit", Float) = 0
_CharacterAmbientSensorShadowOn ("", Float) = 0
_CharacterAmbientSensorColorOn ("", Float) = 0
[Header(ASE Properties)] _FlowMap01 ("FlowMap01", 2D) = "white" { }
_FlowMapColor01 ("FlowMapColor01", Color) = (1,1,1,0)
_FlowScale01 ("FlowScale01", Float) = 1
_FlowMap01_Uspeed ("FlowMap01_Uspeed", Float) = 0
_FlowMap01_Vspeed ("FlowMap01_Vspeed", Float) = 0
_Mask01 ("Mask01", 2D) = "white" { }
_Mask01_Power ("Mask01_Power", Range(0, 20)) = 1
_MaskOffset01 ("MaskOffset01", Range(0, 1)) = 0
_FlowMap02 ("FlowMap02", 2D) = "white" { }
_FlowMapColor02 ("FlowMapColor02", Color) = (1,1,1,0)
_FlowScale02 ("FlowScale02", Float) = 1
_FlowMap02_Uspeed ("FlowMap02_Uspeed", Float) = 0
_FlowMap02_Vspeed ("FlowMap02_Vspeed", Float) = 0
_Mask02 ("Mask02", 2D) = "white" { }
_Mask02_Power ("Mask02_Power", Range(0, 20)) = 1
_MaskOffset02 ("MaskOffset02", Range(0, 1)) = 0
_Noise ("Noise", 2D) = "white" { }
_NoiseIntensity ("NoiseIntensity", Range(0, 1)) = 0
_NoiseFlowIntensity ("NoiseFlowIntensity", Range(0, 1)) = 0
_Noise_Uspeed ("Noise_Uspeed", Float) = 0
_Noise_Vspeed ("Noise_Vspeed", Float) = 0
_DissovleNoise ("DissovleNoise", 2D) = "white" { }
_DissovleNoiseScale ("DissovleNoiseScale", Range(0, 1)) = 0
_Dissovle ("Dissovle", Range(0, 1)) = 0
_DissolveNoise_Uspeed ("DissolveNoise_Uspeed", Float) = 0
_DissolveNoise_Vspeed ("DissolveNoise_Vspeed", Float) = 0
_ASEHeader ("", Float) = 0
}
SubShader {
 Tags { "Distortion" = "None" "EntityUseType" = "Character" "IGNOREPROJECTOR" = "true" "OutlineType" = "Complex" "QUEUE" = "Geometry" "Reflected" = "Reflected" "RenderType" = "Opaque" }
 Pass {
  Name "BODY"
  Tags { "DebugView" = "On" "Distortion" = "None" "EntityUseType" = "Character" "IGNOREPROJECTOR" = "true" "LIGHTMODE" = "HYBRIDDEFERRED" "OutlineType" = "Complex" "QUEUE" = "Geometry" "Reflected" = "Reflected" "RenderType" = "Opaque" "tex2DOverride" = "CharacterTex2D" }
  Cull Off
  GpuProgramID 18727
Program "vp" {
SubProgram "gles3 " {
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	vec4 _MainTex_ST;
uniform 	float _CharacterAmbientSensorShadowOn;
uniform 	vec4 _AmbientSensorUVs;
uniform 	float _UseClipPlane;
uniform 	float _ClipPlaneWorld;
uniform 	vec4 _ClipPlane;
uniform 	vec4 mhy_AvatarLightDir;
uniform 	vec4 mhy_CharacterOverrideLightDir;
uniform lowp sampler2D _CharacterAmbientSensorTex;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp float vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD6;
vec4 u_xlat0;
bvec2 u_xlatb0;
vec4 u_xlat1;
bool u_xlatb1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump float u_xlat16_4;
float u_xlat5;
float u_xlat6;
float u_xlat7;
float u_xlat10;
bool u_xlatb10;
float u_xlat15;
bool u_xlatb15;
float u_xlat16;
bool u_xlatb16;
void main()
{
    u_xlatb0.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseClipPlane, _ClipPlaneWorld, _UseClipPlane, _UseClipPlane)).xy;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(abs(_ClipPlane.w)<0.00100000005);
#else
    u_xlatb10 = abs(_ClipPlane.w)<0.00100000005;
#endif
    u_xlat1.xyz = _ClipPlane.www * _ClipPlane.xyz;
    u_xlat1.xyz = (bool(u_xlatb10)) ? vec3(0.0, 0.0, 0.0) : u_xlat1.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_WorldToObject[1];
    u_xlat2 = hlslcc_mtx4x4unity_WorldToObject[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_WorldToObject[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_WorldToObject[3];
    u_xlat1.xyz = u_xlat1.xyz / u_xlat1.www;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * _ClipPlane.yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _ClipPlane.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _ClipPlane.zzz + u_xlat2.xyz;
    u_xlat10 = dot(u_xlat1.xyz, u_xlat2.xyz);
    u_xlat15 = dot(in_POSITION0.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(u_xlat15<u_xlat10);
#else
    u_xlatb1 = u_xlat15<u_xlat10;
#endif
    u_xlat10 = (-u_xlat10) + u_xlat15;
    u_xlat2.xyz = (-vec3(u_xlat10)) * u_xlat2.xyz + in_POSITION0.xyz;
    u_xlat2.w = 0.0;
    u_xlat3.xyz = in_POSITION0.xyz;
    u_xlat3.w = in_COLOR0.w;
    u_xlat1 = (bool(u_xlatb1)) ? u_xlat2 : u_xlat3;
    u_xlat10 = dot(in_POSITION0.xyz, _ClipPlane.xyz);
    u_xlat15 = _ClipPlane.w + -0.00999999978;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(u_xlat10<u_xlat15);
#else
    u_xlatb15 = u_xlat10<u_xlat15;
#endif
    u_xlat10 = u_xlat10 + (-_ClipPlane.w);
    u_xlat2.xyz = (-vec3(u_xlat10)) * _ClipPlane.xyz + in_POSITION0.xyz;
    u_xlat2.w = 0.0;
    u_xlat2 = (bool(u_xlatb15)) ? u_xlat2 : u_xlat3;
    u_xlat1.xyz = (u_xlatb0.y) ? u_xlat1.xyz : u_xlat2.xyz;
    u_xlat16_4 = (u_xlatb0.y) ? u_xlat1.w : u_xlat2.w;
    u_xlat1.xyz = (u_xlatb0.x) ? u_xlat1.xyz : in_POSITION0.xyz;
    vs_COLOR0.w = (u_xlatb0.x) ? u_xlat16_4 : in_COLOR0.w;
    u_xlat0.xyw = (-_WorldSpaceCameraPos.xyz) + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat2.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;
    u_xlat2.y = hlslcc_mtx4x4unity_ObjectToWorld[1].x;
    u_xlat2.z = hlslcc_mtx4x4unity_ObjectToWorld[2].x;
    u_xlat2.w = u_xlat0.x;
    u_xlat1.w = 1.0;
    u_xlat2.x = dot(u_xlat2, u_xlat1);
    u_xlat3.x = hlslcc_mtx4x4unity_ObjectToWorld[0].y;
    u_xlat3.y = hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat3.z = hlslcc_mtx4x4unity_ObjectToWorld[2].y;
    u_xlat3.w = u_xlat0.y;
    u_xlat7 = dot(u_xlat3, u_xlat1);
    u_xlat0.x = hlslcc_mtx4x4unity_ObjectToWorld[0].z;
    u_xlat0.y = hlslcc_mtx4x4unity_ObjectToWorld[1].z;
    u_xlat0.z = hlslcc_mtx4x4unity_ObjectToWorld[2].z;
    u_xlat0.x = dot(u_xlat0, u_xlat1);
    u_xlat3.x = hlslcc_mtx4x4unity_ObjectToWorld[0].w;
    u_xlat3.y = hlslcc_mtx4x4unity_ObjectToWorld[1].w;
    u_xlat3.z = hlslcc_mtx4x4unity_ObjectToWorld[2].w;
    u_xlat3.w = hlslcc_mtx4x4unity_ObjectToWorld[3].w;
    u_xlat5 = dot(u_xlat3, u_xlat1);
    u_xlat3 = vec4(u_xlat7) * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[3] * vec4(u_xlat5) + u_xlat2;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat1;
    vs_TEXCOORD3.xyz = u_xlat1.xyz / u_xlat1.www;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.xz = u_xlat0.xw * vec2(0.5, 0.5);
    u_xlat6 = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.w = u_xlat6 * 0.5;
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat1.xyz = in_NORMAL0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_NORMAL0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_NORMAL0.zzz + u_xlat1.xyz;
    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat16 = inversesqrt(u_xlat16);
    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(0.5<mhy_CharacterOverrideLightDir.w);
#else
    u_xlatb16 = 0.5<mhy_CharacterOverrideLightDir.w;
#endif
    u_xlat2.x = mhy_CharacterOverrideLightDir.x;
    u_xlat2.yz = (-mhy_CharacterOverrideLightDir.yz);
    u_xlat2.xyz = (bool(u_xlatb16)) ? u_xlat2.xyz : mhy_AvatarLightDir.xyz;
    u_xlat16_4 = dot(u_xlat1.xyz, u_xlat2.xyz);
    vs_TEXCOORD1.w = u_xlat16_4 * 0.497500002 + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_CharacterAmbientSensorShadowOn));
#else
    u_xlatb16 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_CharacterAmbientSensorShadowOn);
#endif
    if(u_xlatb16){
        u_xlat16 = textureLod(_CharacterAmbientSensorTex, _AmbientSensorUVs.xy, 0.0).x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb16 = !!(0.5<u_xlat16);
#else
        u_xlatb16 = 0.5<u_xlat16;
#endif
        vs_TEXCOORD4 = u_xlatb16 ? 1.0 : float(0.0);
    } else {
        vs_TEXCOORD4 = 0.0;
    //ENDIF
    }
    gl_Position = u_xlat0;
    vs_COLOR0.xyz = in_COLOR0.xyz;
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    vs_TEXCOORD2.zw = u_xlat0.zw;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	mediump vec4 _Color;
uniform 	float _MainTexAlphaUse;
uniform 	mediump float _MainTexAlphaCutoff;
uniform 	float _UseVertexColorAO;
uniform 	mediump float _LightArea;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	float _UseCoolShadowColorOrTex;
uniform 	mediump vec3 _CoolShadowMultColor;
uniform 	float _UseShadowTransition;
uniform 	float _ShadowTransitionRange;
uniform 	float _ShadowTransitionSoftness;
uniform 	mediump vec3 _SpecularColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	float _FaceBlushStrength;
uniform 	mediump vec3 _FaceBlushColor;
uniform 	mediump float _EmissionScaler;
uniform 	mediump vec3 _EmissionColor_MHY;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _TextureBiasWhenDithering;
uniform 	float _UseClipPlane;
uniform 	float _ES_CharacterAmbientLightOn;
uniform 	float _ES_CharacterAmbientBrightness;
uniform 	vec3 _ES_CharacterMainLightColor;
uniform 	vec3 _ES_CharacterAmbientLightColor;
uniform 	float _ES_CharacterMainLightRatio;
uniform 	float _ES_CharacterAmbientLightRatio;
uniform 	float _ES_CharacterColorTone;
uniform 	float _ES_CharacterPointLightWholeIntensity;
uniform 	vec4 mhy_AvatarLightDir;
uniform 	vec4 mhy_CharacterPointLightColor;
uniform 	vec4 mhy_CharacterOverrideLightDir;
uniform 	mediump vec4 _FlowMapColor01;
uniform 	mediump float _FlowScale01;
uniform 	mediump float _FlowMap01_Uspeed;
uniform 	vec4 _FlowMap01_ST;
uniform 	mediump float _FlowMap01_Vspeed;
uniform 	mediump float _Noise_Uspeed;
uniform 	vec4 _Noise_ST;
uniform 	mediump float _Noise_Vspeed;
uniform 	mediump float _NoiseFlowIntensity;
uniform 	mediump float _MaskOffset01;
uniform 	mediump float _NoiseIntensity;
uniform 	mediump float _Mask01_Power;
uniform 	mediump vec4 _FlowMapColor02;
uniform 	mediump float _FlowScale02;
uniform 	mediump float _FlowMap02_Uspeed;
uniform 	vec4 _FlowMap02_ST;
uniform 	mediump float _FlowMap02_Vspeed;
uniform 	mediump float _MaskOffset02;
uniform 	mediump float _Mask02_Power;
uniform 	mediump float _DissolveNoise_Uspeed;
uniform 	vec4 _DissovleNoise_ST;
uniform 	mediump float _DissolveNoise_Vspeed;
uniform 	mediump float _DissovleNoiseScale;
uniform 	mediump float _Dissovle;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _Noise;
uniform lowp sampler2D _FlowMap01;
uniform lowp sampler2D _Mask01;
uniform lowp sampler2D _FlowMap02;
uniform lowp sampler2D _Mask02;
uniform lowp sampler2D _DissovleNoise;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp float vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
lowp float u_xlat10_2;
int u_xlati2;
bvec3 u_xlatb2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
lowp float u_xlat10_3;
int u_xlati3;
bool u_xlatb3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec2 u_xlat16_7;
mediump vec3 u_xlat16_8;
vec3 u_xlat9;
bool u_xlatb10;
vec3 u_xlat12;
mediump vec3 u_xlat16_12;
lowp float u_xlat10_12;
int u_xlati12;
bool u_xlatb12;
vec3 u_xlat13;
mediump vec3 u_xlat16_13;
mediump float u_xlat16_14;
mediump vec2 u_xlat16_15;
mediump vec2 u_xlat16_16;
bvec2 u_xlatb20;
float u_xlat22;
bool u_xlatb22;
mediump vec2 u_xlat16_25;
float u_xlat30;
bool u_xlatb30;
float u_xlat32;
mediump float u_xlat16_32;
lowp float u_xlat10_32;
int u_xlati32;
bool u_xlatb32;
float u_xlat33;
mediump float u_xlat16_34;
mediump float u_xlat16_35;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseClipPlane));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseClipPlane);
#endif
    u_xlat16_1.x = vs_COLOR0.w + -0.00999999978;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(u_xlat16_1.x<0.0);
#else
    u_xlatb10 = u_xlat16_1.x<0.0;
#endif
    u_xlatb0 = u_xlatb0 && u_xlatb10;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(_DitherAlpha<0.949999988);
#else
        u_xlatb0 = _DitherAlpha<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb20.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb20.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb20.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = _DitherAlpha * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + -0.00999999978;
#ifdef UNITY_ADRENO_ES3
            u_xlatb0 = !!(u_xlat0.x<0.0);
#else
            u_xlatb0 = u_xlat0.x<0.0;
#endif
            if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(0.5<mhy_CharacterOverrideLightDir.w);
#else
    u_xlatb2.x = 0.5<mhy_CharacterOverrideLightDir.w;
#endif
    u_xlat3.x = mhy_CharacterOverrideLightDir.x;
    u_xlat3.yz = (-mhy_CharacterOverrideLightDir.yz);
    u_xlat2.xyz = (u_xlatb2.x) ? u_xlat3.xyz : mhy_AvatarLightDir.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat30) + u_xlat2.xyz;
    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
    u_xlat30 = _TextureBiasWhenDithering + -1.0;
    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy, u_xlat30);
    u_xlatb2.xyz = equal(vec4(_MainTexAlphaUse), vec4(3.0, 1.0, 2.0, 0.0)).xyz;
    u_xlat30 = u_xlat1.w * _FaceBlushStrength;
    u_xlat3.xyz = (-u_xlat1.xyz) + _FaceBlushColor.xyz;
    u_xlat3.xyz = vec3(u_xlat30) * u_xlat3.xyz + u_xlat1.xyz;
    u_xlat16_4.xyz = (u_xlatb2.x) ? u_xlat3.xyz : u_xlat1.xyz;
    u_xlat16_34 = u_xlat1.w + (-_MainTexAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(u_xlat16_34<0.0);
#else
    u_xlatb30 = u_xlat16_34<0.0;
#endif
    u_xlatb30 = u_xlatb2.y && u_xlatb30;
    if((int(u_xlatb30) * int(0xffffffffu))!=0){discard;}
    u_xlat16_4.xyz = u_xlat16_4.xyz * _Color.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(0.00999999978<u_xlat1.w);
#else
    u_xlatb30 = 0.00999999978<u_xlat1.w;
#endif
    u_xlatb30 = u_xlatb30 && u_xlatb2.z;
    u_xlat16_34 = (u_xlatb30) ? u_xlat1.w : 0.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorAO));
#else
    u_xlatb2.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorAO);
#endif
    u_xlat16_5.x = vs_COLOR0.x * 0.5;
    u_xlat16_5.x = (u_xlatb2.x) ? u_xlat16_5.x : 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat16_5.x<0.0500000007);
#else
    u_xlatb12 = u_xlat16_5.x<0.0500000007;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(0.949999988<u_xlat16_5.x);
#else
    u_xlatb22 = 0.949999988<u_xlat16_5.x;
#endif
    u_xlat32 = u_xlat16_5.x + vs_TEXCOORD1.w;
    u_xlat32 = u_xlat32 * 0.5;
    u_xlat16_5.x = (u_xlatb22) ? 1.0 : u_xlat32;
    u_xlat16_5.x = (u_xlatb12) ? 0.0 : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb2.x) ? u_xlat16_5.x : vs_TEXCOORD1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(u_xlat16_5.x<_LightArea);
#else
    u_xlatb2.x = u_xlat16_5.x<_LightArea;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition));
#else
    u_xlatb12 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition);
#endif
    u_xlat16_5.x = (-u_xlat16_5.x) + _LightArea;
    u_xlat16_5.x = u_xlat16_5.x / _ShadowTransitionRange;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(u_xlat16_5.x>=1.0);
#else
    u_xlatb22 = u_xlat16_5.x>=1.0;
#endif
    u_xlat16_32 = u_xlat16_5.x + 0.00999999978;
    u_xlat16_32 = log2(u_xlat16_32);
    u_xlat32 = u_xlat16_32 * _ShadowTransitionSoftness;
    u_xlat32 = exp2(u_xlat32);
    u_xlat32 = min(u_xlat32, 1.0);
    u_xlat22 = (u_xlatb22) ? 1.0 : u_xlat32;
    u_xlat22 = (u_xlatb12) ? u_xlat22 : 1.0;
    u_xlat22 = u_xlatb2.x ? u_xlat22 : float(0.0);
#ifdef UNITY_ADRENO_ES3
    { bool cond = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(vs_TEXCOORD4); u_xlati32 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati32 = int((vec4(0.0, 0.0, 0.0, 0.0)!=vec4(vs_TEXCOORD4)) ? 0xFFFFFFFFu : uint(0u));
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex));
#else
    u_xlatb3 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex);
#endif
    u_xlat16_13.xyz = vec3(_FirstShadowMultColor.xxyz.y + (-_CoolShadowMultColor.x), _FirstShadowMultColor.xxyz.z + (-_CoolShadowMultColor.y), float(_FirstShadowMultColor.z) + (-_CoolShadowMultColor.z));
    u_xlat13.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_13.xyz + _CoolShadowMultColor.xyz;
    u_xlat16_5.xyz = (bool(u_xlatb3)) ? u_xlat13.xyz : vec3(_FirstShadowMultColor.x, _FirstShadowMultColor.y, _FirstShadowMultColor.z);
    u_xlati3 = ~u_xlati32;
    u_xlati12 = u_xlatb12 ? u_xlati3 : int(0);
    u_xlat16_3.xyz = u_xlat16_5.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat3.xyz = vec3(u_xlat22) * u_xlat16_3.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_5.xyz = (int(u_xlati12) != 0) ? u_xlat3.xyz : u_xlat16_5.xyz;
    u_xlat16_35 = dot(vs_TEXCOORD1.xyz, u_xlat0.xyz);
    u_xlat16_35 = max(u_xlat16_35, 0.00100000005);
    u_xlat16_35 = log2(u_xlat16_35);
    u_xlat16_35 = u_xlat16_35 * _Shininess;
    u_xlat16_35 = exp2(u_xlat16_35);
    u_xlat16_6.xyz = vec3(u_xlat16_35) * _SpecularColor.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(_SpecMulti);
    u_xlat16_4.xyz = vec3(u_xlat16_4.x * _EmissionColor_MHY.xxyz.y, u_xlat16_4.y * _EmissionColor_MHY.xxyz.z, u_xlat16_4.z * float(_EmissionColor_MHY.z));
    u_xlat0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlati2 = int(uint(u_xlatb2.x) * 0xffffffffu | uint(u_xlati32));
    u_xlat12.xyz = u_xlat0.xyz * u_xlat16_5.xyz;
    u_xlat0.xyz = (int(u_xlati2) != 0) ? u_xlat12.xyz : u_xlat0.xyz;
    u_xlat0.xyz = u_xlat16_6.xyz * vec3(0.5, 0.5, 0.5) + u_xlat0.xyz;
    u_xlat2.xy = vs_TEXCOORD0.zw * _FlowMap01_ST.xy + _FlowMap01_ST.zw;
    u_xlat16_5.x = _Time.y * _FlowMap01_Uspeed + u_xlat2.x;
    u_xlat16_5.y = _Time.y * _FlowMap01_Vspeed + u_xlat2.y;
    u_xlat2.xy = vs_TEXCOORD0.zw * _Noise_ST.xy + _Noise_ST.zw;
    u_xlat16_6.x = _Time.y * _Noise_Uspeed + u_xlat2.x;
    u_xlat16_6.y = _Time.y * _Noise_Vspeed + u_xlat2.y;
    u_xlat10_2 = texture(_Noise, u_xlat16_6.xy).x;
    u_xlat16_25.x = _MaskOffset01 * 1.39999998 + -0.699999988;
    u_xlat16_16.x = u_xlat10_2 * _NoiseIntensity;
    u_xlat12.xy = vs_TEXCOORD0.zw * _FlowMap02_ST.xy + _FlowMap02_ST.zw;
    u_xlat16_7.x = _Time.y * _FlowMap02_Uspeed + u_xlat12.x;
    u_xlat16_7.y = _Time.y * _FlowMap02_Vspeed + u_xlat12.y;
    u_xlat16_25.y = _MaskOffset02 * 1.39999998 + -0.699999988;
    u_xlat16_8.xyz = _FlowMapColor01.xyz * vec3(_FlowScale01);
    u_xlat16_5.xy = vec2(u_xlat10_2) * vec2(vec2(_NoiseFlowIntensity, _NoiseFlowIntensity)) + u_xlat16_5.xy;
    u_xlat10_12 = texture(_FlowMap01, u_xlat16_5.xy).x;
    u_xlat16_12.xyz = vec3(u_xlat10_12) * u_xlat16_8.xyz;
    u_xlat16_5.x = (-vs_TEXCOORD0.z) + 1.0;
    u_xlat16_1.xz = u_xlat16_25.xy + u_xlat16_5.xx;
    u_xlat16_1.yw = vec2(u_xlat10_2) * vec2(vec2(_NoiseIntensity, _NoiseIntensity)) + (-vs_TEXCOORD0.ww);
    u_xlat16_16.y = 1.0;
    u_xlat16_15.xy = u_xlat16_1.xy + u_xlat16_16.xy;
    u_xlat10_3 = texture(_Mask01, u_xlat16_15.xy).x;
    u_xlat16_3.x = max(u_xlat10_3, 9.99999975e-05);
    u_xlat16_3.x = log2(u_xlat16_3.x);
    u_xlat16_3.x = u_xlat16_3.x * _Mask01_Power;
    u_xlat16_3.x = exp2(u_xlat16_3.x);
    u_xlat16_8.xyz = _FlowMapColor02.xyz * vec3(_FlowScale02);
    u_xlat16_15.xy = vec2(u_xlat10_2) * vec2(vec2(_NoiseFlowIntensity, _NoiseFlowIntensity)) + u_xlat16_7.xy;
    u_xlat10_2 = texture(_FlowMap02, u_xlat16_15.xy).x;
    u_xlat16_13.xyz = vec3(u_xlat10_2) * u_xlat16_8.xyz;
    u_xlat16_5.xy = vec2(u_xlat16_1.z + u_xlat16_16.x, u_xlat16_1.w + u_xlat16_16.y);
    u_xlat10_2 = texture(_Mask02, u_xlat16_5.xy).x;
    u_xlat16_2.x = max(u_xlat10_2, 9.99999975e-05);
    u_xlat16_2.x = log2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * _Mask02_Power;
    u_xlat16_2.x = exp2(u_xlat16_2.x);
    u_xlat16_13.xyz = u_xlat16_2.xxx * u_xlat16_13.xyz;
    u_xlat16_2.xyz = u_xlat16_12.xyz * u_xlat16_3.xxx + u_xlat16_13.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(_EmissionScaler) + u_xlat16_2.xyz;
    u_xlat3.xyz = (-u_xlat0.xyz) + u_xlat16_4.xyz;
    u_xlat3.xyz = vec3(u_xlat16_34) * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat9.xy = vs_TEXCOORD0.zw * _DissovleNoise_ST.xy + _DissovleNoise_ST.zw;
    u_xlat16_4.x = _Time.y * _DissolveNoise_Uspeed + u_xlat9.x;
    u_xlat16_4.y = _Time.y * _DissolveNoise_Vspeed + u_xlat9.y;
    u_xlat10_32 = texture(_DissovleNoise, u_xlat16_4.xy).x;
    u_xlat32 = u_xlat10_32 * _DissovleNoiseScale + vs_TEXCOORD0.z;
#ifdef UNITY_ADRENO_ES3
    u_xlatb32 = !!(_Dissovle>=u_xlat32);
#else
    u_xlatb32 = _Dissovle>=u_xlat32;
#endif
    u_xlat0.xyz = (bool(u_xlatb30)) ? u_xlat3.xyz : u_xlat0.xyz;
    u_xlat0.xyz = u_xlat16_2.xyz + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(0.00999999978<u_xlat16_34);
#else
    u_xlatb30 = 0.00999999978<u_xlat16_34;
#endif
    if((int(u_xlatb32) * int(0xffffffffu))==0){discard;}
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn));
#else
    u_xlatb2.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn);
#endif
    u_xlat12.xyz = u_xlat0.xyz * vec3(vec3(_ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness));
    u_xlat3.xyz = vec3(vec3(_ES_CharacterPointLightWholeIntensity, _ES_CharacterPointLightWholeIntensity, _ES_CharacterPointLightWholeIntensity)) * mhy_CharacterPointLightColor.xyz;
    u_xlat9.xyz = _ES_CharacterMainLightColor.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat9.xyz = min(max(u_xlat9.xyz, 0.0), 1.0);
#else
    u_xlat9.xyz = clamp(u_xlat9.xyz, 0.0, 1.0);
#endif
    u_xlat33 = (-mhy_CharacterPointLightColor.w) + 1.0;
    u_xlat3.xyz = u_xlat9.xyz * vec3(u_xlat33) + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat3.xyz = vec3(vec3(_ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio)) * u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat12.xyz = u_xlat12.xyz * u_xlat3.xyz;
    u_xlat3.xyz = _ES_CharacterAmbientLightColor.xyz * vec3(_ES_CharacterAmbientLightRatio);
    u_xlat16_4.xyz = u_xlat12.xyz * vec3(10.0, 10.0, 10.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.xyz = min(max(u_xlat16_4.xyz, 0.0), 1.0);
#else
    u_xlat16_4.xyz = clamp(u_xlat16_4.xyz, 0.0, 1.0);
#endif
    u_xlat12.xyz = u_xlat3.xyz * u_xlat16_4.xyz + u_xlat12.xyz;
    u_xlat16_4.xyz = (u_xlatb2.x) ? u_xlat12.xyz : u_xlat0.xyz;
    u_xlat16_5.xyz = u_xlat0.xyz + (-u_xlat16_4.xyz);
    u_xlat16_5.xyz = vec3(u_xlat16_34) * u_xlat16_5.xyz + u_xlat16_4.xyz;
    u_xlat16_0.xyz = (bool(u_xlatb30)) ? u_xlat16_5.xyz : u_xlat16_4.xyz;
    u_xlat16_4.x = max(u_xlat16_0.z, u_xlat16_0.y);
    u_xlat16_1.w = max(u_xlat16_0.x, u_xlat16_4.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(1.0<u_xlat16_1.w);
#else
    u_xlatb2.x = 1.0<u_xlat16_1.w;
#endif
    u_xlat16_1.xyz = u_xlat16_0.xyz / u_xlat16_1.www;
    u_xlat16_0.w = 1.0;
    u_xlat16_0 = (u_xlatb2.x) ? u_xlat16_1 : u_xlat16_0;
    u_xlat16_4.x = min(u_xlat16_0.w, 1.10000002);
    u_xlat16_14 = u_xlat16_0.w + (-u_xlat16_4.x);
    u_xlat16_4.x = u_xlat16_34 * u_xlat16_14 + u_xlat16_4.x;
    u_xlat16_2.x = u_xlat16_4.x * 0.0500000007;
    SV_Target0.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb12 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_4.x = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb12) ? u_xlat16_4.x : 0.0;
    SV_Target0.w = 0.0156862754;
    SV_Target1.xyz = u_xlat16_0.xyz;
    SV_Target1.w = u_xlat16_2.x;
    SV_Target2.xy = vec2(0.0, 0.0);
    SV_Target2.w = vs_TEXCOORD4;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "TOON_SPECULAR_ON" "TOON_LIGHTMAP_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	vec4 _MainTex_ST;
uniform 	float _CharacterAmbientSensorShadowOn;
uniform 	vec4 _AmbientSensorUVs;
uniform 	float _UseClipPlane;
uniform 	float _ClipPlaneWorld;
uniform 	vec4 _ClipPlane;
uniform 	vec4 mhy_AvatarLightDir;
uniform 	vec4 mhy_CharacterOverrideLightDir;
uniform lowp sampler2D _CharacterAmbientSensorTex;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp float vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD6;
vec4 u_xlat0;
bvec2 u_xlatb0;
vec4 u_xlat1;
bool u_xlatb1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump float u_xlat16_4;
float u_xlat5;
float u_xlat6;
float u_xlat7;
float u_xlat10;
bool u_xlatb10;
float u_xlat15;
bool u_xlatb15;
float u_xlat16;
bool u_xlatb16;
void main()
{
    u_xlatb0.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseClipPlane, _ClipPlaneWorld, _UseClipPlane, _UseClipPlane)).xy;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(abs(_ClipPlane.w)<0.00100000005);
#else
    u_xlatb10 = abs(_ClipPlane.w)<0.00100000005;
#endif
    u_xlat1.xyz = _ClipPlane.www * _ClipPlane.xyz;
    u_xlat1.xyz = (bool(u_xlatb10)) ? vec3(0.0, 0.0, 0.0) : u_xlat1.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_WorldToObject[1];
    u_xlat2 = hlslcc_mtx4x4unity_WorldToObject[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_WorldToObject[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_WorldToObject[3];
    u_xlat1.xyz = u_xlat1.xyz / u_xlat1.www;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * _ClipPlane.yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _ClipPlane.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _ClipPlane.zzz + u_xlat2.xyz;
    u_xlat10 = dot(u_xlat1.xyz, u_xlat2.xyz);
    u_xlat15 = dot(in_POSITION0.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(u_xlat15<u_xlat10);
#else
    u_xlatb1 = u_xlat15<u_xlat10;
#endif
    u_xlat10 = (-u_xlat10) + u_xlat15;
    u_xlat2.xyz = (-vec3(u_xlat10)) * u_xlat2.xyz + in_POSITION0.xyz;
    u_xlat2.w = 0.0;
    u_xlat3.xyz = in_POSITION0.xyz;
    u_xlat3.w = in_COLOR0.w;
    u_xlat1 = (bool(u_xlatb1)) ? u_xlat2 : u_xlat3;
    u_xlat10 = dot(in_POSITION0.xyz, _ClipPlane.xyz);
    u_xlat15 = _ClipPlane.w + -0.00999999978;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(u_xlat10<u_xlat15);
#else
    u_xlatb15 = u_xlat10<u_xlat15;
#endif
    u_xlat10 = u_xlat10 + (-_ClipPlane.w);
    u_xlat2.xyz = (-vec3(u_xlat10)) * _ClipPlane.xyz + in_POSITION0.xyz;
    u_xlat2.w = 0.0;
    u_xlat2 = (bool(u_xlatb15)) ? u_xlat2 : u_xlat3;
    u_xlat1.xyz = (u_xlatb0.y) ? u_xlat1.xyz : u_xlat2.xyz;
    u_xlat16_4 = (u_xlatb0.y) ? u_xlat1.w : u_xlat2.w;
    u_xlat1.xyz = (u_xlatb0.x) ? u_xlat1.xyz : in_POSITION0.xyz;
    vs_COLOR0.w = (u_xlatb0.x) ? u_xlat16_4 : in_COLOR0.w;
    u_xlat0.xyw = (-_WorldSpaceCameraPos.xyz) + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat2.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;
    u_xlat2.y = hlslcc_mtx4x4unity_ObjectToWorld[1].x;
    u_xlat2.z = hlslcc_mtx4x4unity_ObjectToWorld[2].x;
    u_xlat2.w = u_xlat0.x;
    u_xlat1.w = 1.0;
    u_xlat2.x = dot(u_xlat2, u_xlat1);
    u_xlat3.x = hlslcc_mtx4x4unity_ObjectToWorld[0].y;
    u_xlat3.y = hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat3.z = hlslcc_mtx4x4unity_ObjectToWorld[2].y;
    u_xlat3.w = u_xlat0.y;
    u_xlat7 = dot(u_xlat3, u_xlat1);
    u_xlat0.x = hlslcc_mtx4x4unity_ObjectToWorld[0].z;
    u_xlat0.y = hlslcc_mtx4x4unity_ObjectToWorld[1].z;
    u_xlat0.z = hlslcc_mtx4x4unity_ObjectToWorld[2].z;
    u_xlat0.x = dot(u_xlat0, u_xlat1);
    u_xlat3.x = hlslcc_mtx4x4unity_ObjectToWorld[0].w;
    u_xlat3.y = hlslcc_mtx4x4unity_ObjectToWorld[1].w;
    u_xlat3.z = hlslcc_mtx4x4unity_ObjectToWorld[2].w;
    u_xlat3.w = hlslcc_mtx4x4unity_ObjectToWorld[3].w;
    u_xlat5 = dot(u_xlat3, u_xlat1);
    u_xlat3 = vec4(u_xlat7) * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[3] * vec4(u_xlat5) + u_xlat2;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat1;
    vs_TEXCOORD3.xyz = u_xlat1.xyz / u_xlat1.www;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.xz = u_xlat0.xw * vec2(0.5, 0.5);
    u_xlat6 = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.w = u_xlat6 * 0.5;
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat1.xyz = in_NORMAL0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_NORMAL0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_NORMAL0.zzz + u_xlat1.xyz;
    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat16 = inversesqrt(u_xlat16);
    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(0.5<mhy_CharacterOverrideLightDir.w);
#else
    u_xlatb16 = 0.5<mhy_CharacterOverrideLightDir.w;
#endif
    u_xlat2.x = mhy_CharacterOverrideLightDir.x;
    u_xlat2.yz = (-mhy_CharacterOverrideLightDir.yz);
    u_xlat2.xyz = (bool(u_xlatb16)) ? u_xlat2.xyz : mhy_AvatarLightDir.xyz;
    u_xlat16_4 = dot(u_xlat1.xyz, u_xlat2.xyz);
    vs_TEXCOORD1.w = u_xlat16_4 * 0.497500002 + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_CharacterAmbientSensorShadowOn));
#else
    u_xlatb16 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_CharacterAmbientSensorShadowOn);
#endif
    if(u_xlatb16){
        u_xlat16 = textureLod(_CharacterAmbientSensorTex, _AmbientSensorUVs.xy, 0.0).x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb16 = !!(0.5<u_xlat16);
#else
        u_xlatb16 = 0.5<u_xlat16;
#endif
        vs_TEXCOORD4 = u_xlatb16 ? 1.0 : float(0.0);
    } else {
        vs_TEXCOORD4 = 0.0;
    //ENDIF
    }
    gl_Position = u_xlat0;
    vs_COLOR0.xyz = in_COLOR0.xyz;
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    vs_TEXCOORD2.zw = u_xlat0.zw;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	mediump vec4 _Color;
uniform 	float _MainTexAlphaUse;
uniform 	mediump float _MainTexAlphaCutoff;
uniform 	float _UseLightMapColorAO;
uniform 	float _UseVertexColorAO;
uniform 	mediump float _LightArea;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	float _UseCoolShadowColorOrTex;
uniform 	mediump vec3 _CoolShadowMultColor;
uniform 	float _UseShadowTransition;
uniform 	float _ShadowTransitionRange;
uniform 	float _ShadowTransitionSoftness;
uniform 	mediump vec3 _SpecularColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	float _FaceBlushStrength;
uniform 	mediump vec3 _FaceBlushColor;
uniform 	mediump float _EmissionScaler;
uniform 	mediump vec3 _EmissionColor_MHY;
uniform 	float _UseMaterial2;
uniform 	mediump vec3 _Color2;
uniform 	mediump vec3 _FirstShadowMultColor2;
uniform 	mediump vec3 _CoolShadowMultColor2;
uniform 	mediump float _Shininess2;
uniform 	mediump float _SpecMulti2;
uniform 	float _ShadowTransitionRange2;
uniform 	float _ShadowTransitionSoftness2;
uniform 	float _UseMaterial3;
uniform 	mediump vec3 _Color3;
uniform 	mediump vec3 _FirstShadowMultColor3;
uniform 	mediump vec3 _CoolShadowMultColor3;
uniform 	mediump float _Shininess3;
uniform 	mediump float _SpecMulti3;
uniform 	float _ShadowTransitionRange3;
uniform 	float _ShadowTransitionSoftness3;
uniform 	float _UseMaterial4;
uniform 	mediump vec3 _Color4;
uniform 	mediump vec3 _FirstShadowMultColor4;
uniform 	mediump vec3 _CoolShadowMultColor4;
uniform 	mediump float _Shininess4;
uniform 	mediump float _SpecMulti4;
uniform 	float _ShadowTransitionRange4;
uniform 	float _ShadowTransitionSoftness4;
uniform 	float _UseMaterial5;
uniform 	mediump vec3 _Color5;
uniform 	mediump vec3 _FirstShadowMultColor5;
uniform 	mediump vec3 _CoolShadowMultColor5;
uniform 	mediump float _Shininess5;
uniform 	mediump float _SpecMulti5;
uniform 	float _ShadowTransitionRange5;
uniform 	float _ShadowTransitionSoftness5;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _TextureBiasWhenDithering;
uniform 	float _UseClipPlane;
uniform 	float _ES_CharacterAmbientLightOn;
uniform 	float _ES_CharacterAmbientBrightness;
uniform 	vec3 _ES_CharacterMainLightColor;
uniform 	vec3 _ES_CharacterAmbientLightColor;
uniform 	float _ES_CharacterMainLightRatio;
uniform 	float _ES_CharacterAmbientLightRatio;
uniform 	float _ES_CharacterColorTone;
uniform 	float _ES_CharacterPointLightWholeIntensity;
uniform 	vec4 mhy_AvatarLightDir;
uniform 	vec4 mhy_CharacterPointLightColor;
uniform 	vec4 mhy_CharacterOverrideLightDir;
uniform 	mediump vec4 _FlowMapColor01;
uniform 	mediump float _FlowScale01;
uniform 	mediump float _FlowMap01_Uspeed;
uniform 	vec4 _FlowMap01_ST;
uniform 	mediump float _FlowMap01_Vspeed;
uniform 	mediump float _Noise_Uspeed;
uniform 	vec4 _Noise_ST;
uniform 	mediump float _Noise_Vspeed;
uniform 	mediump float _NoiseFlowIntensity;
uniform 	mediump float _MaskOffset01;
uniform 	mediump float _NoiseIntensity;
uniform 	mediump float _Mask01_Power;
uniform 	mediump vec4 _FlowMapColor02;
uniform 	mediump float _FlowScale02;
uniform 	mediump float _FlowMap02_Uspeed;
uniform 	vec4 _FlowMap02_ST;
uniform 	mediump float _FlowMap02_Vspeed;
uniform 	mediump float _MaskOffset02;
uniform 	mediump float _Mask02_Power;
uniform 	mediump float _DissolveNoise_Uspeed;
uniform 	vec4 _DissovleNoise_ST;
uniform 	mediump float _DissolveNoise_Vspeed;
uniform 	mediump float _DissovleNoiseScale;
uniform 	mediump float _Dissovle;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _Noise;
uniform lowp sampler2D _FlowMap01;
uniform lowp sampler2D _Mask01;
uniform lowp sampler2D _FlowMap02;
uniform lowp sampler2D _Mask02;
uniform lowp sampler2D _DissovleNoise;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp float vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
vec3 u_xlat2;
mediump float u_xlat16_2;
bvec3 u_xlatb2;
vec3 u_xlat3;
mediump float u_xlat16_3;
lowp vec4 u_xlat10_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
bvec4 u_xlatb5;
vec3 u_xlat6;
mediump vec3 u_xlat16_6;
bvec3 u_xlatb6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
bool u_xlatb11;
vec3 u_xlat13;
mediump vec3 u_xlat16_13;
lowp float u_xlat10_13;
bool u_xlatb13;
mediump vec3 u_xlat16_14;
int u_xlati14;
bool u_xlatb14;
mediump float u_xlat16_15;
mediump vec3 u_xlat16_18;
mediump vec3 u_xlat16_19;
bvec2 u_xlatb22;
float u_xlat24;
bool u_xlatb24;
float u_xlat33;
mediump float u_xlat16_33;
lowp float u_xlat10_33;
int u_xlati33;
bool u_xlatb33;
float u_xlat35;
mediump float u_xlat16_35;
int u_xlati35;
float u_xlat36;
int u_xlati36;
mediump float u_xlat16_37;
mediump float u_xlat16_40;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseClipPlane));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseClipPlane);
#endif
    u_xlat16_1.x = vs_COLOR0.w + -0.00999999978;
#ifdef UNITY_ADRENO_ES3
    u_xlatb11 = !!(u_xlat16_1.x<0.0);
#else
    u_xlatb11 = u_xlat16_1.x<0.0;
#endif
    u_xlatb0 = u_xlatb0 && u_xlatb11;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(_DitherAlpha<0.949999988);
#else
        u_xlatb0 = _DitherAlpha<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb22.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb22.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb22.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = _DitherAlpha * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + -0.00999999978;
#ifdef UNITY_ADRENO_ES3
            u_xlatb0 = !!(u_xlat0.x<0.0);
#else
            u_xlatb0 = u_xlat0.x<0.0;
#endif
            if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(0.5<mhy_CharacterOverrideLightDir.w);
#else
    u_xlatb2.x = 0.5<mhy_CharacterOverrideLightDir.w;
#endif
    u_xlat3.x = mhy_CharacterOverrideLightDir.x;
    u_xlat3.yz = (-mhy_CharacterOverrideLightDir.yz);
    u_xlat2.xyz = (u_xlatb2.x) ? u_xlat3.xyz : mhy_AvatarLightDir.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat33) + u_xlat2.xyz;
    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat0.xyz = vec3(u_xlat33) * u_xlat0.xyz;
    u_xlat33 = _TextureBiasWhenDithering + -1.0;
    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy, u_xlat33);
    u_xlatb2.xyz = equal(vec4(_MainTexAlphaUse), vec4(3.0, 1.0, 2.0, 0.0)).xyz;
    u_xlat35 = u_xlat1.w * _FaceBlushStrength;
    u_xlat3.xyz = (-u_xlat1.xyz) + _FaceBlushColor.xyz;
    u_xlat3.xyz = vec3(u_xlat35) * u_xlat3.xyz + u_xlat1.xyz;
    u_xlat16_4.xyz = (u_xlatb2.x) ? u_xlat3.xyz : u_xlat1.xyz;
    u_xlat16_37 = u_xlat1.w + (-_MainTexAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(u_xlat16_37<0.0);
#else
    u_xlatb2.x = u_xlat16_37<0.0;
#endif
    u_xlatb2.x = u_xlatb2.y && u_xlatb2.x;
    if((int(u_xlatb2.x) * int(0xffffffffu))!=0){discard;}
    u_xlat10_3 = texture(_LightMapTex, vs_TEXCOORD0.xy, u_xlat33);
    u_xlatb2.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseLightMapColorAO, _UseVertexColorAO, _UseLightMapColorAO, _UseLightMapColorAO)).xy;
    u_xlat16_37 = (u_xlatb2.x) ? u_xlat10_3.y : 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseMaterial2));
#else
    u_xlatb33 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseMaterial2);
#endif
    u_xlatb5 = greaterThanEqual(u_xlat10_3.wwww, vec4(0.800000012, 0.400000006, 0.200000003, 0.600000024));
    u_xlatb33 = u_xlatb33 && u_xlatb5.x;
    u_xlat33 = (u_xlatb33) ? 2.0 : 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseMaterial3));
#else
    u_xlatb2.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseMaterial3);
#endif
    u_xlatb2.x = u_xlatb5.y && u_xlatb2.x;
    u_xlatb6.xyz = lessThan(u_xlat10_3.wwww, vec4(0.600000024, 0.400000006, 0.800000012, 0.0)).xyz;
    u_xlatb2.x = u_xlatb2.x && u_xlatb6.x;
    u_xlat33 = (u_xlatb2.x) ? 3.0 : u_xlat33;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseMaterial4));
#else
    u_xlatb2.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseMaterial4);
#endif
    u_xlatb2.x = u_xlatb5.z && u_xlatb2.x;
    u_xlatb2.x = u_xlatb6.y && u_xlatb2.x;
    u_xlat33 = (u_xlatb2.x) ? 4.0 : u_xlat33;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseMaterial5));
#else
    u_xlatb2.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseMaterial5);
#endif
    u_xlatb2.x = u_xlatb5.w && u_xlatb2.x;
    u_xlatb2.x = u_xlatb6.z && u_xlatb2.x;
    u_xlat33 = (u_xlatb2.x) ? 5.0 : u_xlat33;
    u_xlatb5 = equal(vec4(u_xlat33), vec4(2.0, 3.0, 4.0, 5.0));
    u_xlat16_7.xyz = (u_xlatb5.x) ? _Color2.xyz : _Color.xyz;
    u_xlat16_7.xyz = (u_xlatb5.y) ? _Color3.xyz : u_xlat16_7.xyz;
    u_xlat16_7.xyz = (u_xlatb5.z) ? _Color4.xyz : u_xlat16_7.xyz;
    u_xlat16_7.xyz = (u_xlatb5.w) ? _Color5.xyz : u_xlat16_7.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_7.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(0.00999999978<u_xlat1.w);
#else
    u_xlatb2.x = 0.00999999978<u_xlat1.w;
#endif
    u_xlatb2.x = u_xlatb2.x && u_xlatb2.z;
    u_xlat16_7.x = (u_xlatb2.x) ? u_xlat1.w : 0.0;
    u_xlat16_18.x = u_xlat16_37 * vs_COLOR0.x;
    u_xlat16_37 = (u_xlatb2.y) ? u_xlat16_18.x : u_xlat16_37;
#ifdef UNITY_ADRENO_ES3
    u_xlatb13 = !!(u_xlat16_37<0.0500000007);
#else
    u_xlatb13 = u_xlat16_37<0.0500000007;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(0.949999988<u_xlat16_37);
#else
    u_xlatb24 = 0.949999988<u_xlat16_37;
#endif
    u_xlat35 = u_xlat16_37 + vs_TEXCOORD1.w;
    u_xlat35 = u_xlat35 * 0.5;
    u_xlat16_37 = (u_xlatb24) ? 1.0 : u_xlat35;
    u_xlat16_37 = (u_xlatb13) ? 0.0 : u_xlat16_37;
#ifdef UNITY_ADRENO_ES3
    u_xlatb13 = !!(u_xlat16_37<_LightArea);
#else
    u_xlatb13 = u_xlat16_37<_LightArea;
#endif
    if(u_xlatb13){
#ifdef UNITY_ADRENO_ES3
        u_xlatb13 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition));
#else
        u_xlatb13 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition);
#endif
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(u_xlat33==1.0);
#else
        u_xlatb24 = u_xlat33==1.0;
#endif
        u_xlat16_8.x = (u_xlatb24) ? _ShadowTransitionRange : 0.0;
        u_xlat16_8.y = (u_xlatb24) ? _ShadowTransitionSoftness : 0.0;
        u_xlat16_18.xy = (u_xlatb5.x) ? vec2(_ShadowTransitionRange2, _ShadowTransitionSoftness2) : u_xlat16_8.xy;
        u_xlat16_18.xy = (u_xlatb5.y) ? vec2(_ShadowTransitionRange3, _ShadowTransitionSoftness3) : u_xlat16_18.xy;
        u_xlat16_18.xy = (u_xlatb5.z) ? vec2(_ShadowTransitionRange4, _ShadowTransitionSoftness4) : u_xlat16_18.xy;
        u_xlat16_18.xy = (u_xlatb5.w) ? vec2(_ShadowTransitionRange5, _ShadowTransitionSoftness5) : u_xlat16_18.xy;
        u_xlat16_37 = (-u_xlat16_37) + _LightArea;
        u_xlat16_37 = u_xlat16_37 / u_xlat16_18.x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(u_xlat16_37>=1.0);
#else
        u_xlatb24 = u_xlat16_37>=1.0;
#endif
        u_xlat16_35 = u_xlat16_37 + 0.00999999978;
        u_xlat16_35 = log2(u_xlat16_35);
        u_xlat16_35 = u_xlat16_35 * u_xlat16_18.y;
        u_xlat16_35 = exp2(u_xlat16_35);
        u_xlat35 = min(u_xlat16_35, 1.0);
        u_xlat24 = (u_xlatb24) ? 1.0 : u_xlat35;
        u_xlat13.x = (u_xlatb13) ? u_xlat24 : 1.0;
        u_xlat16_37 = 0.0;
    } else {
        u_xlat13.x = 0.0;
        u_xlat16_37 = 1.0;
    //ENDIF
    }
    u_xlat24 = (-u_xlat16_37) + 1.0;
#ifdef UNITY_ADRENO_ES3
    { bool cond = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(vs_TEXCOORD4); u_xlati35 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati35 = int((vec4(0.0, 0.0, 0.0, 0.0)!=vec4(vs_TEXCOORD4)) ? 0xFFFFFFFFu : uint(0u));
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(u_xlat33==1.0);
#else
    u_xlatb33 = u_xlat33==1.0;
#endif
    if(u_xlatb33){
#ifdef UNITY_ADRENO_ES3
        u_xlatb14 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex));
#else
        u_xlatb14 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex);
#endif
        u_xlat16_6.xyz = vec3(_FirstShadowMultColor.xxyz.y + (-_CoolShadowMultColor.x), _FirstShadowMultColor.xxyz.z + (-_CoolShadowMultColor.y), float(_FirstShadowMultColor.z) + (-_CoolShadowMultColor.z));
        u_xlat6.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_6.xyz + _CoolShadowMultColor.xyz;
        u_xlat16_18.xyz = (bool(u_xlatb14)) ? u_xlat6.xyz : vec3(_FirstShadowMultColor.x, _FirstShadowMultColor.y, _FirstShadowMultColor.z);
    } else {
        if(u_xlatb5.x){
#ifdef UNITY_ADRENO_ES3
            u_xlatb14 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex));
#else
            u_xlatb14 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex);
#endif
            u_xlat16_6.xyz = _FirstShadowMultColor2.xyz + (-_CoolShadowMultColor2.xyz);
            u_xlat6.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_6.xyz + _CoolShadowMultColor2.xyz;
            u_xlat16_18.xyz = (bool(u_xlatb14)) ? u_xlat6.xyz : _FirstShadowMultColor2.xyz;
        } else {
#ifdef UNITY_ADRENO_ES3
            u_xlatb14 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex));
#else
            u_xlatb14 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex);
#endif
            u_xlat16_6.xyz = _FirstShadowMultColor3.xyz + (-_CoolShadowMultColor3.xyz);
            u_xlat6.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_6.xyz + _CoolShadowMultColor3.xyz;
            u_xlat16_8.xyz = (bool(u_xlatb14)) ? u_xlat6.xyz : _FirstShadowMultColor3.xyz;
            u_xlat16_6.xyz = _FirstShadowMultColor4.xyz + (-_CoolShadowMultColor4.xyz);
            u_xlat6.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_6.xyz + _CoolShadowMultColor4.xyz;
            u_xlat16_9.xyz = (bool(u_xlatb14)) ? u_xlat6.xyz : _FirstShadowMultColor4.xyz;
            u_xlat16_6.xyz = _FirstShadowMultColor5.xyz + (-_CoolShadowMultColor5.xyz);
            u_xlat6.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_6.xyz + _CoolShadowMultColor5.xyz;
            u_xlat16_10.xyz = (bool(u_xlatb14)) ? u_xlat6.xyz : _FirstShadowMultColor5.xyz;
            u_xlat16_9.xyz = (u_xlatb5.z) ? u_xlat16_9.xyz : u_xlat16_10.xyz;
            u_xlat16_18.xyz = (u_xlatb5.y) ? u_xlat16_8.xyz : u_xlat16_9.xyz;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition));
#else
    u_xlatb14 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition);
#endif
    u_xlati36 = ~u_xlati35;
    u_xlati14 = u_xlatb14 ? u_xlati36 : int(0);
    u_xlat16_6.xyz = u_xlat16_18.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat6.xyz = u_xlat13.xxx * u_xlat16_6.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_18.xyz = (int(u_xlati14) != 0) ? u_xlat6.xyz : u_xlat16_18.xyz;
    u_xlat16_37 = (u_xlatb5.z) ? _Shininess4 : _Shininess5;
    u_xlat16_8.x = (u_xlatb5.z) ? _SpecMulti4 : _SpecMulti5;
    u_xlat16_37 = (u_xlatb5.y) ? _Shininess3 : u_xlat16_37;
    u_xlat16_8.x = (u_xlatb5.y) ? _SpecMulti3 : u_xlat16_8.x;
    u_xlat16_37 = (u_xlatb5.x) ? _Shininess2 : u_xlat16_37;
    u_xlat16_8.x = (u_xlatb5.x) ? _SpecMulti2 : u_xlat16_8.x;
    u_xlat16_37 = (u_xlatb33) ? _Shininess : u_xlat16_37;
    u_xlat16_8.x = (u_xlatb33) ? _SpecMulti : u_xlat16_8.x;
    u_xlat16_19.x = dot(vs_TEXCOORD1.xyz, u_xlat0.xyz);
    u_xlat16_19.x = max(u_xlat16_19.x, 0.00100000005);
    u_xlat16_19.x = log2(u_xlat16_19.x);
    u_xlat16_37 = u_xlat16_37 * u_xlat16_19.x;
    u_xlat16_37 = exp2(u_xlat16_37);
    u_xlat0.x = (-u_xlat10_3.z) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat0.x<u_xlat16_37);
#else
    u_xlatb0 = u_xlat0.x<u_xlat16_37;
#endif
    u_xlat16_8.xyz = u_xlat16_8.xxx * _SpecularColor.xyz;
    u_xlat16_8.xyz = u_xlat10_3.xxx * u_xlat16_8.xyz;
    u_xlat16_8.xyz = (bool(u_xlatb0)) ? u_xlat16_8.xyz : vec3(0.0, 0.0, 0.0);
    u_xlat16_4.xyz = vec3(u_xlat16_4.x * _EmissionColor_MHY.xxyz.y, u_xlat16_4.y * _EmissionColor_MHY.xxyz.z, u_xlat16_4.z * float(_EmissionColor_MHY.z));
    u_xlat0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(u_xlat24==1.0);
#else
    u_xlatb33 = u_xlat24==1.0;
#endif
    u_xlati33 = int(uint(u_xlatb33) * 0xffffffffu | uint(u_xlati35));
    u_xlat13.xyz = u_xlat0.xyz * u_xlat16_18.xyz;
    u_xlat0.xyz = (int(u_xlati33) != 0) ? u_xlat13.xyz : u_xlat0.xyz;
    u_xlat0.xyz = u_xlat16_8.xyz + u_xlat0.xyz;
    u_xlat13.xy = vs_TEXCOORD0.zw * _FlowMap01_ST.xy + _FlowMap01_ST.zw;
    u_xlat16_8.x = _Time.y * _FlowMap01_Uspeed + u_xlat13.x;
    u_xlat16_8.y = _Time.y * _FlowMap01_Vspeed + u_xlat13.y;
    u_xlat13.xy = vs_TEXCOORD0.zw * _Noise_ST.xy + _Noise_ST.zw;
    u_xlat16_9.x = _Time.y * _Noise_Uspeed + u_xlat13.x;
    u_xlat16_9.y = _Time.y * _Noise_Vspeed + u_xlat13.y;
    u_xlat10_33 = texture(_Noise, u_xlat16_9.xy).x;
    u_xlat16_37 = _MaskOffset01 * 1.39999998 + -0.699999988;
    u_xlat16_18.x = u_xlat10_33 * _NoiseIntensity;
    u_xlat13.xy = vs_TEXCOORD0.zw * _FlowMap02_ST.xy + _FlowMap02_ST.zw;
    u_xlat16_9.x = _Time.y * _FlowMap02_Uspeed + u_xlat13.x;
    u_xlat16_9.y = _Time.y * _FlowMap02_Vspeed + u_xlat13.y;
    u_xlat16_40 = _MaskOffset02 * 1.39999998 + -0.699999988;
    u_xlat16_10.xyz = _FlowMapColor01.xyz * vec3(_FlowScale01);
    u_xlat16_8.xy = vec2(u_xlat10_33) * vec2(vec2(_NoiseFlowIntensity, _NoiseFlowIntensity)) + u_xlat16_8.xy;
    u_xlat10_13 = texture(_FlowMap01, u_xlat16_8.xy).x;
    u_xlat16_13.xyz = vec3(u_xlat10_13) * u_xlat16_10.xyz;
    u_xlat16_8.x = (-vs_TEXCOORD0.z) + 1.0;
    u_xlat16_1.x = u_xlat16_37 + u_xlat16_8.x;
    u_xlat16_1.yw = vec2(u_xlat10_33) * vec2(vec2(_NoiseIntensity, _NoiseIntensity)) + (-vs_TEXCOORD0.ww);
    u_xlat16_18.y = 1.0;
    u_xlat16_19.xy = u_xlat16_1.xy + u_xlat16_18.xy;
    u_xlat10_3.x = texture(_Mask01, u_xlat16_19.xy).x;
    u_xlat16_3 = max(u_xlat10_3.x, 9.99999975e-05);
    u_xlat16_3 = log2(u_xlat16_3);
    u_xlat16_3 = u_xlat16_3 * _Mask01_Power;
    u_xlat16_3 = exp2(u_xlat16_3);
    u_xlat16_19.xyz = _FlowMapColor02.xyz * vec3(_FlowScale02);
    u_xlat16_9.xy = vec2(u_xlat10_33) * vec2(vec2(_NoiseFlowIntensity, _NoiseFlowIntensity)) + u_xlat16_9.xy;
    u_xlat10_33 = texture(_FlowMap02, u_xlat16_9.xy).x;
    u_xlat16_14.xyz = vec3(u_xlat10_33) * u_xlat16_19.xyz;
    u_xlat16_1.z = u_xlat16_40 + u_xlat16_8.x;
    u_xlat16_18.xy = vec2(u_xlat16_1.z + u_xlat16_18.x, u_xlat16_1.w + u_xlat16_18.y);
    u_xlat10_33 = texture(_Mask02, u_xlat16_18.xy).x;
    u_xlat16_33 = max(u_xlat10_33, 9.99999975e-05);
    u_xlat16_33 = log2(u_xlat16_33);
    u_xlat16_33 = u_xlat16_33 * _Mask02_Power;
    u_xlat16_33 = exp2(u_xlat16_33);
    u_xlat16_14.xyz = vec3(u_xlat16_33) * u_xlat16_14.xyz;
    u_xlat16_13.xyz = u_xlat16_13.xyz * vec3(u_xlat16_3) + u_xlat16_14.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(_EmissionScaler) + u_xlat16_13.xyz;
    u_xlat3.xyz = (-u_xlat0.xyz) + u_xlat16_4.xyz;
    u_xlat3.xyz = u_xlat16_7.xxx * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat5.xy = vs_TEXCOORD0.zw * _DissovleNoise_ST.xy + _DissovleNoise_ST.zw;
    u_xlat16_4.x = _Time.y * _DissolveNoise_Uspeed + u_xlat5.x;
    u_xlat16_4.y = _Time.y * _DissolveNoise_Vspeed + u_xlat5.y;
    u_xlat10_33 = texture(_DissovleNoise, u_xlat16_4.xy).x;
    u_xlat33 = u_xlat10_33 * _DissovleNoiseScale + vs_TEXCOORD0.z;
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(_Dissovle>=u_xlat33);
#else
    u_xlatb33 = _Dissovle>=u_xlat33;
#endif
    u_xlat0.xyz = (u_xlatb2.x) ? u_xlat3.xyz : u_xlat0.xyz;
    u_xlat0.xyz = u_xlat16_13.xyz + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(0.00999999978<u_xlat16_7.x);
#else
    u_xlatb2.x = 0.00999999978<u_xlat16_7.x;
#endif
    if((int(u_xlatb33) * int(0xffffffffu))==0){discard;}
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn));
#else
    u_xlatb33 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn);
#endif
    u_xlat13.xyz = u_xlat0.xyz * vec3(vec3(_ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness));
    u_xlat3.xyz = vec3(vec3(_ES_CharacterPointLightWholeIntensity, _ES_CharacterPointLightWholeIntensity, _ES_CharacterPointLightWholeIntensity)) * mhy_CharacterPointLightColor.xyz;
    u_xlat5.xyz = _ES_CharacterMainLightColor.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.xyz = min(max(u_xlat5.xyz, 0.0), 1.0);
#else
    u_xlat5.xyz = clamp(u_xlat5.xyz, 0.0, 1.0);
#endif
    u_xlat36 = (-mhy_CharacterPointLightColor.w) + 1.0;
    u_xlat3.xyz = u_xlat5.xyz * vec3(u_xlat36) + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat3.xyz = vec3(vec3(_ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio)) * u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat13.xyz = u_xlat13.xyz * u_xlat3.xyz;
    u_xlat3.xyz = _ES_CharacterAmbientLightColor.xyz * vec3(_ES_CharacterAmbientLightRatio);
    u_xlat16_4.xyz = u_xlat13.xyz * vec3(10.0, 10.0, 10.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.xyz = min(max(u_xlat16_4.xyz, 0.0), 1.0);
#else
    u_xlat16_4.xyz = clamp(u_xlat16_4.xyz, 0.0, 1.0);
#endif
    u_xlat13.xyz = u_xlat3.xyz * u_xlat16_4.xyz + u_xlat13.xyz;
    u_xlat16_4.xyz = (bool(u_xlatb33)) ? u_xlat13.xyz : u_xlat0.xyz;
    u_xlat16_18.xyz = u_xlat0.xyz + (-u_xlat16_4.xyz);
    u_xlat16_18.xyz = u_xlat16_7.xxx * u_xlat16_18.xyz + u_xlat16_4.xyz;
    u_xlat16_0.xyz = (u_xlatb2.x) ? u_xlat16_18.xyz : u_xlat16_4.xyz;
    u_xlat16_4.x = max(u_xlat16_0.z, u_xlat16_0.y);
    u_xlat16_1.w = max(u_xlat16_0.x, u_xlat16_4.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(1.0<u_xlat16_1.w);
#else
    u_xlatb2.x = 1.0<u_xlat16_1.w;
#endif
    u_xlat16_1.xyz = u_xlat16_0.xyz / u_xlat16_1.www;
    u_xlat16_0.w = 1.0;
    u_xlat16_0 = (u_xlatb2.x) ? u_xlat16_1 : u_xlat16_0;
    u_xlat16_4.x = min(u_xlat16_0.w, 1.10000002);
    u_xlat16_15 = u_xlat16_0.w + (-u_xlat16_4.x);
    u_xlat16_4.x = u_xlat16_7.x * u_xlat16_15 + u_xlat16_4.x;
    u_xlat16_2 = u_xlat16_4.x * 0.0500000007;
    SV_Target0.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb13 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb13 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_4.x = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb13) ? u_xlat16_4.x : 0.0;
    SV_Target0.w = 0.0156862754;
    SV_Target1.xyz = u_xlat16_0.xyz;
    SV_Target1.w = u_xlat16_2;
    SV_Target2.xy = vec2(0.0, 0.0);
    SV_Target2.w = vs_TEXCOORD4;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _MainTex_ST;
uniform 	float _CharacterAmbientSensorShadowOn;
uniform 	vec4 _AmbientSensorUVs;
uniform 	float _UseClipPlane;
uniform 	float _ClipPlaneWorld;
uniform 	vec4 _ClipPlane;
uniform 	vec4 mhy_AvatarLightDir;
uniform 	vec4 mhy_CharacterOverrideLightDir;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
struct unity_Builtins1Array_Type {
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw1 {
	unity_Builtins1Array_Type unity_Builtins1Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform lowp sampler2D _CharacterAmbientSensorTex;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp float vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD6;
flat out highp uint vs_SV_InstanceID0;
vec3 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump float u_xlat16_4;
vec3 u_xlat5;
int u_xlati5;
bool u_xlatb5;
float u_xlat6;
mediump float u_xlat16_9;
float u_xlat10;
bool u_xlatb10;
bool u_xlatb11;
float u_xlat15;
bool u_xlatb15;
float u_xlat16;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
#ifdef UNITY_ADRENO_ES3
    u_xlatb5 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseClipPlane));
#else
    u_xlatb5 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseClipPlane);
#endif
    if(u_xlatb5){
#ifdef UNITY_ADRENO_ES3
        u_xlatb5 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ClipPlaneWorld));
#else
        u_xlatb5 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ClipPlaneWorld);
#endif
        if(u_xlatb5){
            u_xlati5 = u_xlati0 << 2;
#ifdef UNITY_ADRENO_ES3
            u_xlatb10 = !!(abs(_ClipPlane.w)<0.00100000005);
#else
            u_xlatb10 = abs(_ClipPlane.w)<0.00100000005;
#endif
            u_xlat1.xyz = _ClipPlane.www * _ClipPlane.xyz;
            u_xlat1.xyz = (bool(u_xlatb10)) ? vec3(0.0, 0.0, 0.0) : u_xlat1.xyz;
            u_xlat2 = u_xlat1.yyyy * unity_Builtins1Array[u_xlati5 / 4].hlslcc_mtx4x4unity_WorldToObjectArray[1];
            u_xlat2 = unity_Builtins1Array[u_xlati5 / 4].hlslcc_mtx4x4unity_WorldToObjectArray[0] * u_xlat1.xxxx + u_xlat2;
            u_xlat1 = unity_Builtins1Array[u_xlati5 / 4].hlslcc_mtx4x4unity_WorldToObjectArray[2] * u_xlat1.zzzz + u_xlat2;
            u_xlat1 = u_xlat1 + unity_Builtins1Array[u_xlati5 / 4].hlslcc_mtx4x4unity_WorldToObjectArray[3];
            u_xlat1.xyz = u_xlat1.xyz / u_xlat1.www;
            u_xlat2.xyz = _ClipPlane.yyy * unity_Builtins1Array[u_xlati5 / 4].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz;
            u_xlat2.xyz = unity_Builtins1Array[u_xlati5 / 4].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz * _ClipPlane.xxx + u_xlat2.xyz;
            u_xlat5.xyz = unity_Builtins1Array[u_xlati5 / 4].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz * _ClipPlane.zzz + u_xlat2.xyz;
            u_xlat1.x = dot(u_xlat1.xyz, u_xlat5.xyz);
            u_xlat6 = dot(in_POSITION0.xyz, u_xlat5.xyz);
#ifdef UNITY_ADRENO_ES3
            u_xlatb11 = !!(u_xlat6<u_xlat1.x);
#else
            u_xlatb11 = u_xlat6<u_xlat1.x;
#endif
            u_xlat1.x = (-u_xlat1.x) + u_xlat6;
            u_xlat2.xyz = (-u_xlat1.xxx) * u_xlat5.xyz + in_POSITION0.xyz;
            u_xlat2.w = 0.0;
            u_xlat3.xyz = in_POSITION0.xyz;
            u_xlat3.w = in_COLOR0.w;
            u_xlat1 = (bool(u_xlatb11)) ? u_xlat2 : u_xlat3;
            u_xlat16_4 = u_xlat1.w;
        } else {
            u_xlat5.x = dot(in_POSITION0.xyz, _ClipPlane.xyz);
            u_xlat10 = _ClipPlane.w + -0.00999999978;
#ifdef UNITY_ADRENO_ES3
            u_xlatb10 = !!(u_xlat5.x<u_xlat10);
#else
            u_xlatb10 = u_xlat5.x<u_xlat10;
#endif
            u_xlat5.x = u_xlat5.x + (-_ClipPlane.w);
            u_xlat2.xyz = (-u_xlat5.xxx) * _ClipPlane.xyz + in_POSITION0.xyz;
            u_xlat2.w = 0.0;
            u_xlat3.xyz = in_POSITION0.xyz;
            u_xlat3.w = in_COLOR0.w;
            u_xlat1 = (bool(u_xlatb10)) ? u_xlat2 : u_xlat3;
            u_xlat16_4 = u_xlat1.w;
        //ENDIF
        }
    } else {
        u_xlat1.xyz = in_POSITION0.xyz;
        u_xlat16_4 = in_COLOR0.w;
    //ENDIF
    }
    u_xlati0 = u_xlati0 << 2;
    u_xlat2.xyw = (-_WorldSpaceCameraPos.xyz) + unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat3.x = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].x;
    u_xlat3.y = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].x;
    u_xlat3.z = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].x;
    u_xlat3.w = u_xlat2.x;
    u_xlat1.w = 1.0;
    u_xlat5.x = dot(u_xlat3, u_xlat1);
    u_xlat3.x = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].y;
    u_xlat3.y = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].y;
    u_xlat3.z = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].y;
    u_xlat3.w = u_xlat2.y;
    u_xlat10 = dot(u_xlat3, u_xlat1);
    u_xlat2.x = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].z;
    u_xlat2.y = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].z;
    u_xlat2.z = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].z;
    u_xlat15 = dot(u_xlat2, u_xlat1);
    u_xlat2.x = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].w;
    u_xlat2.y = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].w;
    u_xlat2.z = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].w;
    u_xlat2.w = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3].w;
    u_xlat16 = dot(u_xlat2, u_xlat1);
    u_xlat2 = vec4(u_xlat10) * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat5.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVPZero[2] * vec4(u_xlat15) + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVPZero[3] * vec4(u_xlat16) + u_xlat2;
    u_xlat3 = u_xlat1.yyyy * unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat3 = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * u_xlat1.xxxx + u_xlat3;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * u_xlat1.zzzz + u_xlat3;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3] * in_POSITION0.wwww + u_xlat1;
    vs_TEXCOORD3.xyz = u_xlat1.xyz / u_xlat1.www;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.xz = u_xlat2.xw * vec2(0.5, 0.5);
    u_xlat5.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat1.w = u_xlat5.x * 0.5;
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat5.xyz = in_NORMAL0.yyy * unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat5.xyz = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_NORMAL0.xxx + u_xlat5.xyz;
    u_xlat0.xyz = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_NORMAL0.zzz + u_xlat5.xyz;
    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(0.5<mhy_CharacterOverrideLightDir.w);
#else
    u_xlatb15 = 0.5<mhy_CharacterOverrideLightDir.w;
#endif
    u_xlat1.x = mhy_CharacterOverrideLightDir.x;
    u_xlat1.yz = (-mhy_CharacterOverrideLightDir.yz);
    u_xlat1.xyz = (bool(u_xlatb15)) ? u_xlat1.xyz : mhy_AvatarLightDir.xyz;
    u_xlat16_9 = dot(u_xlat0.xyz, u_xlat1.xyz);
    vs_TEXCOORD1.w = u_xlat16_9 * 0.497500002 + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_CharacterAmbientSensorShadowOn));
#else
    u_xlatb15 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_CharacterAmbientSensorShadowOn);
#endif
    if(u_xlatb15){
        u_xlat15 = textureLod(_CharacterAmbientSensorTex, _AmbientSensorUVs.xy, 0.0).x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb15 = !!(0.5<u_xlat15);
#else
        u_xlatb15 = 0.5<u_xlat15;
#endif
        vs_TEXCOORD4 = u_xlatb15 ? 1.0 : float(0.0);
    } else {
        vs_TEXCOORD4 = 0.0;
    //ENDIF
    }
    gl_Position = u_xlat2;
    vs_COLOR0.xyz = in_COLOR0.xyz;
    vs_COLOR0.w = u_xlat16_4;
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    vs_TEXCOORD2.zw = u_xlat2.zw;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	mediump vec4 _Color;
uniform 	float _MainTexAlphaUse;
uniform 	mediump float _MainTexAlphaCutoff;
uniform 	float _UseVertexColorAO;
uniform 	mediump float _LightArea;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	float _UseCoolShadowColorOrTex;
uniform 	mediump vec3 _CoolShadowMultColor;
uniform 	float _UseShadowTransition;
uniform 	float _ShadowTransitionRange;
uniform 	float _ShadowTransitionSoftness;
uniform 	mediump vec3 _SpecularColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	float _FaceBlushStrength;
uniform 	mediump vec3 _FaceBlushColor;
uniform 	mediump float _EmissionScaler;
uniform 	mediump vec3 _EmissionColor_MHY;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _TextureBiasWhenDithering;
uniform 	float _UseClipPlane;
uniform 	float _ES_CharacterAmbientLightOn;
uniform 	float _ES_CharacterAmbientBrightness;
uniform 	vec3 _ES_CharacterMainLightColor;
uniform 	vec3 _ES_CharacterAmbientLightColor;
uniform 	float _ES_CharacterMainLightRatio;
uniform 	float _ES_CharacterAmbientLightRatio;
uniform 	float _ES_CharacterColorTone;
uniform 	float _ES_CharacterPointLightWholeIntensity;
uniform 	vec4 mhy_AvatarLightDir;
uniform 	vec4 mhy_CharacterPointLightColor;
uniform 	vec4 mhy_CharacterOverrideLightDir;
uniform 	mediump vec4 _FlowMapColor01;
uniform 	mediump float _FlowScale01;
uniform 	mediump float _FlowMap01_Uspeed;
uniform 	vec4 _FlowMap01_ST;
uniform 	mediump float _FlowMap01_Vspeed;
uniform 	mediump float _Noise_Uspeed;
uniform 	vec4 _Noise_ST;
uniform 	mediump float _Noise_Vspeed;
uniform 	mediump float _NoiseFlowIntensity;
uniform 	mediump float _MaskOffset01;
uniform 	mediump float _NoiseIntensity;
uniform 	mediump float _Mask01_Power;
uniform 	mediump vec4 _FlowMapColor02;
uniform 	mediump float _FlowScale02;
uniform 	mediump float _FlowMap02_Uspeed;
uniform 	vec4 _FlowMap02_ST;
uniform 	mediump float _FlowMap02_Vspeed;
uniform 	mediump float _MaskOffset02;
uniform 	mediump float _Mask02_Power;
uniform 	mediump float _DissolveNoise_Uspeed;
uniform 	vec4 _DissovleNoise_ST;
uniform 	mediump float _DissolveNoise_Vspeed;
uniform 	mediump float _DissovleNoiseScale;
uniform 	mediump float _Dissovle;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _Noise;
uniform lowp sampler2D _FlowMap01;
uniform lowp sampler2D _Mask01;
uniform lowp sampler2D _FlowMap02;
uniform lowp sampler2D _Mask02;
uniform lowp sampler2D _DissovleNoise;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp float vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
lowp float u_xlat10_2;
int u_xlati2;
bvec3 u_xlatb2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
lowp float u_xlat10_3;
int u_xlati3;
bool u_xlatb3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec2 u_xlat16_7;
mediump vec3 u_xlat16_8;
vec3 u_xlat9;
bool u_xlatb10;
vec3 u_xlat12;
mediump vec3 u_xlat16_12;
lowp float u_xlat10_12;
int u_xlati12;
bool u_xlatb12;
vec3 u_xlat13;
mediump vec3 u_xlat16_13;
mediump float u_xlat16_14;
mediump vec2 u_xlat16_15;
mediump vec2 u_xlat16_16;
bvec2 u_xlatb20;
float u_xlat22;
bool u_xlatb22;
mediump vec2 u_xlat16_25;
float u_xlat30;
bool u_xlatb30;
float u_xlat32;
mediump float u_xlat16_32;
lowp float u_xlat10_32;
int u_xlati32;
bool u_xlatb32;
float u_xlat33;
mediump float u_xlat16_34;
mediump float u_xlat16_35;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseClipPlane));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseClipPlane);
#endif
    u_xlat16_1.x = vs_COLOR0.w + -0.00999999978;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(u_xlat16_1.x<0.0);
#else
    u_xlatb10 = u_xlat16_1.x<0.0;
#endif
    u_xlatb0 = u_xlatb0 && u_xlatb10;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(_DitherAlpha<0.949999988);
#else
        u_xlatb0 = _DitherAlpha<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb20.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb20.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb20.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = _DitherAlpha * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + -0.00999999978;
#ifdef UNITY_ADRENO_ES3
            u_xlatb0 = !!(u_xlat0.x<0.0);
#else
            u_xlatb0 = u_xlat0.x<0.0;
#endif
            if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(0.5<mhy_CharacterOverrideLightDir.w);
#else
    u_xlatb2.x = 0.5<mhy_CharacterOverrideLightDir.w;
#endif
    u_xlat3.x = mhy_CharacterOverrideLightDir.x;
    u_xlat3.yz = (-mhy_CharacterOverrideLightDir.yz);
    u_xlat2.xyz = (u_xlatb2.x) ? u_xlat3.xyz : mhy_AvatarLightDir.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat30) + u_xlat2.xyz;
    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
    u_xlat30 = _TextureBiasWhenDithering + -1.0;
    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy, u_xlat30);
    u_xlatb2.xyz = equal(vec4(_MainTexAlphaUse), vec4(3.0, 1.0, 2.0, 0.0)).xyz;
    u_xlat30 = u_xlat1.w * _FaceBlushStrength;
    u_xlat3.xyz = (-u_xlat1.xyz) + _FaceBlushColor.xyz;
    u_xlat3.xyz = vec3(u_xlat30) * u_xlat3.xyz + u_xlat1.xyz;
    u_xlat16_4.xyz = (u_xlatb2.x) ? u_xlat3.xyz : u_xlat1.xyz;
    u_xlat16_34 = u_xlat1.w + (-_MainTexAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(u_xlat16_34<0.0);
#else
    u_xlatb30 = u_xlat16_34<0.0;
#endif
    u_xlatb30 = u_xlatb2.y && u_xlatb30;
    if((int(u_xlatb30) * int(0xffffffffu))!=0){discard;}
    u_xlat16_4.xyz = u_xlat16_4.xyz * _Color.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(0.00999999978<u_xlat1.w);
#else
    u_xlatb30 = 0.00999999978<u_xlat1.w;
#endif
    u_xlatb30 = u_xlatb30 && u_xlatb2.z;
    u_xlat16_34 = (u_xlatb30) ? u_xlat1.w : 0.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorAO));
#else
    u_xlatb2.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorAO);
#endif
    u_xlat16_5.x = vs_COLOR0.x * 0.5;
    u_xlat16_5.x = (u_xlatb2.x) ? u_xlat16_5.x : 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat16_5.x<0.0500000007);
#else
    u_xlatb12 = u_xlat16_5.x<0.0500000007;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(0.949999988<u_xlat16_5.x);
#else
    u_xlatb22 = 0.949999988<u_xlat16_5.x;
#endif
    u_xlat32 = u_xlat16_5.x + vs_TEXCOORD1.w;
    u_xlat32 = u_xlat32 * 0.5;
    u_xlat16_5.x = (u_xlatb22) ? 1.0 : u_xlat32;
    u_xlat16_5.x = (u_xlatb12) ? 0.0 : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb2.x) ? u_xlat16_5.x : vs_TEXCOORD1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(u_xlat16_5.x<_LightArea);
#else
    u_xlatb2.x = u_xlat16_5.x<_LightArea;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition));
#else
    u_xlatb12 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition);
#endif
    u_xlat16_5.x = (-u_xlat16_5.x) + _LightArea;
    u_xlat16_5.x = u_xlat16_5.x / _ShadowTransitionRange;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(u_xlat16_5.x>=1.0);
#else
    u_xlatb22 = u_xlat16_5.x>=1.0;
#endif
    u_xlat16_32 = u_xlat16_5.x + 0.00999999978;
    u_xlat16_32 = log2(u_xlat16_32);
    u_xlat32 = u_xlat16_32 * _ShadowTransitionSoftness;
    u_xlat32 = exp2(u_xlat32);
    u_xlat32 = min(u_xlat32, 1.0);
    u_xlat22 = (u_xlatb22) ? 1.0 : u_xlat32;
    u_xlat22 = (u_xlatb12) ? u_xlat22 : 1.0;
    u_xlat22 = u_xlatb2.x ? u_xlat22 : float(0.0);
#ifdef UNITY_ADRENO_ES3
    { bool cond = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(vs_TEXCOORD4); u_xlati32 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati32 = int((vec4(0.0, 0.0, 0.0, 0.0)!=vec4(vs_TEXCOORD4)) ? 0xFFFFFFFFu : uint(0u));
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex));
#else
    u_xlatb3 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex);
#endif
    u_xlat16_13.xyz = vec3(_FirstShadowMultColor.xxyz.y + (-_CoolShadowMultColor.x), _FirstShadowMultColor.xxyz.z + (-_CoolShadowMultColor.y), float(_FirstShadowMultColor.z) + (-_CoolShadowMultColor.z));
    u_xlat13.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_13.xyz + _CoolShadowMultColor.xyz;
    u_xlat16_5.xyz = (bool(u_xlatb3)) ? u_xlat13.xyz : vec3(_FirstShadowMultColor.x, _FirstShadowMultColor.y, _FirstShadowMultColor.z);
    u_xlati3 = ~u_xlati32;
    u_xlati12 = u_xlatb12 ? u_xlati3 : int(0);
    u_xlat16_3.xyz = u_xlat16_5.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat3.xyz = vec3(u_xlat22) * u_xlat16_3.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_5.xyz = (int(u_xlati12) != 0) ? u_xlat3.xyz : u_xlat16_5.xyz;
    u_xlat16_35 = dot(vs_TEXCOORD1.xyz, u_xlat0.xyz);
    u_xlat16_35 = max(u_xlat16_35, 0.00100000005);
    u_xlat16_35 = log2(u_xlat16_35);
    u_xlat16_35 = u_xlat16_35 * _Shininess;
    u_xlat16_35 = exp2(u_xlat16_35);
    u_xlat16_6.xyz = vec3(u_xlat16_35) * _SpecularColor.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(_SpecMulti);
    u_xlat16_4.xyz = vec3(u_xlat16_4.x * _EmissionColor_MHY.xxyz.y, u_xlat16_4.y * _EmissionColor_MHY.xxyz.z, u_xlat16_4.z * float(_EmissionColor_MHY.z));
    u_xlat0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlati2 = int(uint(u_xlatb2.x) * 0xffffffffu | uint(u_xlati32));
    u_xlat12.xyz = u_xlat0.xyz * u_xlat16_5.xyz;
    u_xlat0.xyz = (int(u_xlati2) != 0) ? u_xlat12.xyz : u_xlat0.xyz;
    u_xlat0.xyz = u_xlat16_6.xyz * vec3(0.5, 0.5, 0.5) + u_xlat0.xyz;
    u_xlat2.xy = vs_TEXCOORD0.zw * _FlowMap01_ST.xy + _FlowMap01_ST.zw;
    u_xlat16_5.x = _Time.y * _FlowMap01_Uspeed + u_xlat2.x;
    u_xlat16_5.y = _Time.y * _FlowMap01_Vspeed + u_xlat2.y;
    u_xlat2.xy = vs_TEXCOORD0.zw * _Noise_ST.xy + _Noise_ST.zw;
    u_xlat16_6.x = _Time.y * _Noise_Uspeed + u_xlat2.x;
    u_xlat16_6.y = _Time.y * _Noise_Vspeed + u_xlat2.y;
    u_xlat10_2 = texture(_Noise, u_xlat16_6.xy).x;
    u_xlat16_25.x = _MaskOffset01 * 1.39999998 + -0.699999988;
    u_xlat16_16.x = u_xlat10_2 * _NoiseIntensity;
    u_xlat12.xy = vs_TEXCOORD0.zw * _FlowMap02_ST.xy + _FlowMap02_ST.zw;
    u_xlat16_7.x = _Time.y * _FlowMap02_Uspeed + u_xlat12.x;
    u_xlat16_7.y = _Time.y * _FlowMap02_Vspeed + u_xlat12.y;
    u_xlat16_25.y = _MaskOffset02 * 1.39999998 + -0.699999988;
    u_xlat16_8.xyz = _FlowMapColor01.xyz * vec3(_FlowScale01);
    u_xlat16_5.xy = vec2(u_xlat10_2) * vec2(vec2(_NoiseFlowIntensity, _NoiseFlowIntensity)) + u_xlat16_5.xy;
    u_xlat10_12 = texture(_FlowMap01, u_xlat16_5.xy).x;
    u_xlat16_12.xyz = vec3(u_xlat10_12) * u_xlat16_8.xyz;
    u_xlat16_5.x = (-vs_TEXCOORD0.z) + 1.0;
    u_xlat16_1.xz = u_xlat16_25.xy + u_xlat16_5.xx;
    u_xlat16_1.yw = vec2(u_xlat10_2) * vec2(vec2(_NoiseIntensity, _NoiseIntensity)) + (-vs_TEXCOORD0.ww);
    u_xlat16_16.y = 1.0;
    u_xlat16_15.xy = u_xlat16_1.xy + u_xlat16_16.xy;
    u_xlat10_3 = texture(_Mask01, u_xlat16_15.xy).x;
    u_xlat16_3.x = max(u_xlat10_3, 9.99999975e-05);
    u_xlat16_3.x = log2(u_xlat16_3.x);
    u_xlat16_3.x = u_xlat16_3.x * _Mask01_Power;
    u_xlat16_3.x = exp2(u_xlat16_3.x);
    u_xlat16_8.xyz = _FlowMapColor02.xyz * vec3(_FlowScale02);
    u_xlat16_15.xy = vec2(u_xlat10_2) * vec2(vec2(_NoiseFlowIntensity, _NoiseFlowIntensity)) + u_xlat16_7.xy;
    u_xlat10_2 = texture(_FlowMap02, u_xlat16_15.xy).x;
    u_xlat16_13.xyz = vec3(u_xlat10_2) * u_xlat16_8.xyz;
    u_xlat16_5.xy = vec2(u_xlat16_1.z + u_xlat16_16.x, u_xlat16_1.w + u_xlat16_16.y);
    u_xlat10_2 = texture(_Mask02, u_xlat16_5.xy).x;
    u_xlat16_2.x = max(u_xlat10_2, 9.99999975e-05);
    u_xlat16_2.x = log2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * _Mask02_Power;
    u_xlat16_2.x = exp2(u_xlat16_2.x);
    u_xlat16_13.xyz = u_xlat16_2.xxx * u_xlat16_13.xyz;
    u_xlat16_2.xyz = u_xlat16_12.xyz * u_xlat16_3.xxx + u_xlat16_13.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(_EmissionScaler) + u_xlat16_2.xyz;
    u_xlat3.xyz = (-u_xlat0.xyz) + u_xlat16_4.xyz;
    u_xlat3.xyz = vec3(u_xlat16_34) * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat9.xy = vs_TEXCOORD0.zw * _DissovleNoise_ST.xy + _DissovleNoise_ST.zw;
    u_xlat16_4.x = _Time.y * _DissolveNoise_Uspeed + u_xlat9.x;
    u_xlat16_4.y = _Time.y * _DissolveNoise_Vspeed + u_xlat9.y;
    u_xlat10_32 = texture(_DissovleNoise, u_xlat16_4.xy).x;
    u_xlat32 = u_xlat10_32 * _DissovleNoiseScale + vs_TEXCOORD0.z;
#ifdef UNITY_ADRENO_ES3
    u_xlatb32 = !!(_Dissovle>=u_xlat32);
#else
    u_xlatb32 = _Dissovle>=u_xlat32;
#endif
    u_xlat0.xyz = (bool(u_xlatb30)) ? u_xlat3.xyz : u_xlat0.xyz;
    u_xlat0.xyz = u_xlat16_2.xyz + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(0.00999999978<u_xlat16_34);
#else
    u_xlatb30 = 0.00999999978<u_xlat16_34;
#endif
    if((int(u_xlatb32) * int(0xffffffffu))==0){discard;}
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn));
#else
    u_xlatb2.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn);
#endif
    u_xlat12.xyz = u_xlat0.xyz * vec3(vec3(_ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness));
    u_xlat3.xyz = vec3(vec3(_ES_CharacterPointLightWholeIntensity, _ES_CharacterPointLightWholeIntensity, _ES_CharacterPointLightWholeIntensity)) * mhy_CharacterPointLightColor.xyz;
    u_xlat9.xyz = _ES_CharacterMainLightColor.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat9.xyz = min(max(u_xlat9.xyz, 0.0), 1.0);
#else
    u_xlat9.xyz = clamp(u_xlat9.xyz, 0.0, 1.0);
#endif
    u_xlat33 = (-mhy_CharacterPointLightColor.w) + 1.0;
    u_xlat3.xyz = u_xlat9.xyz * vec3(u_xlat33) + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat3.xyz = vec3(vec3(_ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio)) * u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat12.xyz = u_xlat12.xyz * u_xlat3.xyz;
    u_xlat3.xyz = _ES_CharacterAmbientLightColor.xyz * vec3(_ES_CharacterAmbientLightRatio);
    u_xlat16_4.xyz = u_xlat12.xyz * vec3(10.0, 10.0, 10.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.xyz = min(max(u_xlat16_4.xyz, 0.0), 1.0);
#else
    u_xlat16_4.xyz = clamp(u_xlat16_4.xyz, 0.0, 1.0);
#endif
    u_xlat12.xyz = u_xlat3.xyz * u_xlat16_4.xyz + u_xlat12.xyz;
    u_xlat16_4.xyz = (u_xlatb2.x) ? u_xlat12.xyz : u_xlat0.xyz;
    u_xlat16_5.xyz = u_xlat0.xyz + (-u_xlat16_4.xyz);
    u_xlat16_5.xyz = vec3(u_xlat16_34) * u_xlat16_5.xyz + u_xlat16_4.xyz;
    u_xlat16_0.xyz = (bool(u_xlatb30)) ? u_xlat16_5.xyz : u_xlat16_4.xyz;
    u_xlat16_4.x = max(u_xlat16_0.z, u_xlat16_0.y);
    u_xlat16_1.w = max(u_xlat16_0.x, u_xlat16_4.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(1.0<u_xlat16_1.w);
#else
    u_xlatb2.x = 1.0<u_xlat16_1.w;
#endif
    u_xlat16_1.xyz = u_xlat16_0.xyz / u_xlat16_1.www;
    u_xlat16_0.w = 1.0;
    u_xlat16_0 = (u_xlatb2.x) ? u_xlat16_1 : u_xlat16_0;
    u_xlat16_4.x = min(u_xlat16_0.w, 1.10000002);
    u_xlat16_14 = u_xlat16_0.w + (-u_xlat16_4.x);
    u_xlat16_4.x = u_xlat16_34 * u_xlat16_14 + u_xlat16_4.x;
    u_xlat16_2.x = u_xlat16_4.x * 0.0500000007;
    SV_Target0.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb12 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_4.x = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb12) ? u_xlat16_4.x : 0.0;
    SV_Target0.w = 0.0156862754;
    SV_Target1.xyz = u_xlat16_0.xyz;
    SV_Target1.w = u_xlat16_2.x;
    SV_Target2.xy = vec2(0.0, 0.0);
    SV_Target2.w = vs_TEXCOORD4;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "TOON_SPECULAR_ON" "TOON_LIGHTMAP_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _MainTex_ST;
uniform 	float _CharacterAmbientSensorShadowOn;
uniform 	vec4 _AmbientSensorUVs;
uniform 	float _UseClipPlane;
uniform 	float _ClipPlaneWorld;
uniform 	vec4 _ClipPlane;
uniform 	vec4 mhy_AvatarLightDir;
uniform 	vec4 mhy_CharacterOverrideLightDir;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
struct unity_Builtins1Array_Type {
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw1 {
	unity_Builtins1Array_Type unity_Builtins1Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform lowp sampler2D _CharacterAmbientSensorTex;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp float vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD6;
flat out highp uint vs_SV_InstanceID0;
vec3 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump float u_xlat16_4;
vec3 u_xlat5;
int u_xlati5;
bool u_xlatb5;
float u_xlat6;
mediump float u_xlat16_9;
float u_xlat10;
bool u_xlatb10;
bool u_xlatb11;
float u_xlat15;
bool u_xlatb15;
float u_xlat16;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
#ifdef UNITY_ADRENO_ES3
    u_xlatb5 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseClipPlane));
#else
    u_xlatb5 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseClipPlane);
#endif
    if(u_xlatb5){
#ifdef UNITY_ADRENO_ES3
        u_xlatb5 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ClipPlaneWorld));
#else
        u_xlatb5 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ClipPlaneWorld);
#endif
        if(u_xlatb5){
            u_xlati5 = u_xlati0 << 2;
#ifdef UNITY_ADRENO_ES3
            u_xlatb10 = !!(abs(_ClipPlane.w)<0.00100000005);
#else
            u_xlatb10 = abs(_ClipPlane.w)<0.00100000005;
#endif
            u_xlat1.xyz = _ClipPlane.www * _ClipPlane.xyz;
            u_xlat1.xyz = (bool(u_xlatb10)) ? vec3(0.0, 0.0, 0.0) : u_xlat1.xyz;
            u_xlat2 = u_xlat1.yyyy * unity_Builtins1Array[u_xlati5 / 4].hlslcc_mtx4x4unity_WorldToObjectArray[1];
            u_xlat2 = unity_Builtins1Array[u_xlati5 / 4].hlslcc_mtx4x4unity_WorldToObjectArray[0] * u_xlat1.xxxx + u_xlat2;
            u_xlat1 = unity_Builtins1Array[u_xlati5 / 4].hlslcc_mtx4x4unity_WorldToObjectArray[2] * u_xlat1.zzzz + u_xlat2;
            u_xlat1 = u_xlat1 + unity_Builtins1Array[u_xlati5 / 4].hlslcc_mtx4x4unity_WorldToObjectArray[3];
            u_xlat1.xyz = u_xlat1.xyz / u_xlat1.www;
            u_xlat2.xyz = _ClipPlane.yyy * unity_Builtins1Array[u_xlati5 / 4].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz;
            u_xlat2.xyz = unity_Builtins1Array[u_xlati5 / 4].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz * _ClipPlane.xxx + u_xlat2.xyz;
            u_xlat5.xyz = unity_Builtins1Array[u_xlati5 / 4].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz * _ClipPlane.zzz + u_xlat2.xyz;
            u_xlat1.x = dot(u_xlat1.xyz, u_xlat5.xyz);
            u_xlat6 = dot(in_POSITION0.xyz, u_xlat5.xyz);
#ifdef UNITY_ADRENO_ES3
            u_xlatb11 = !!(u_xlat6<u_xlat1.x);
#else
            u_xlatb11 = u_xlat6<u_xlat1.x;
#endif
            u_xlat1.x = (-u_xlat1.x) + u_xlat6;
            u_xlat2.xyz = (-u_xlat1.xxx) * u_xlat5.xyz + in_POSITION0.xyz;
            u_xlat2.w = 0.0;
            u_xlat3.xyz = in_POSITION0.xyz;
            u_xlat3.w = in_COLOR0.w;
            u_xlat1 = (bool(u_xlatb11)) ? u_xlat2 : u_xlat3;
            u_xlat16_4 = u_xlat1.w;
        } else {
            u_xlat5.x = dot(in_POSITION0.xyz, _ClipPlane.xyz);
            u_xlat10 = _ClipPlane.w + -0.00999999978;
#ifdef UNITY_ADRENO_ES3
            u_xlatb10 = !!(u_xlat5.x<u_xlat10);
#else
            u_xlatb10 = u_xlat5.x<u_xlat10;
#endif
            u_xlat5.x = u_xlat5.x + (-_ClipPlane.w);
            u_xlat2.xyz = (-u_xlat5.xxx) * _ClipPlane.xyz + in_POSITION0.xyz;
            u_xlat2.w = 0.0;
            u_xlat3.xyz = in_POSITION0.xyz;
            u_xlat3.w = in_COLOR0.w;
            u_xlat1 = (bool(u_xlatb10)) ? u_xlat2 : u_xlat3;
            u_xlat16_4 = u_xlat1.w;
        //ENDIF
        }
    } else {
        u_xlat1.xyz = in_POSITION0.xyz;
        u_xlat16_4 = in_COLOR0.w;
    //ENDIF
    }
    u_xlati0 = u_xlati0 << 2;
    u_xlat2.xyw = (-_WorldSpaceCameraPos.xyz) + unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat3.x = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].x;
    u_xlat3.y = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].x;
    u_xlat3.z = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].x;
    u_xlat3.w = u_xlat2.x;
    u_xlat1.w = 1.0;
    u_xlat5.x = dot(u_xlat3, u_xlat1);
    u_xlat3.x = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].y;
    u_xlat3.y = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].y;
    u_xlat3.z = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].y;
    u_xlat3.w = u_xlat2.y;
    u_xlat10 = dot(u_xlat3, u_xlat1);
    u_xlat2.x = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].z;
    u_xlat2.y = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].z;
    u_xlat2.z = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].z;
    u_xlat15 = dot(u_xlat2, u_xlat1);
    u_xlat2.x = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].w;
    u_xlat2.y = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].w;
    u_xlat2.z = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].w;
    u_xlat2.w = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3].w;
    u_xlat16 = dot(u_xlat2, u_xlat1);
    u_xlat2 = vec4(u_xlat10) * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat5.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVPZero[2] * vec4(u_xlat15) + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVPZero[3] * vec4(u_xlat16) + u_xlat2;
    u_xlat3 = u_xlat1.yyyy * unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat3 = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * u_xlat1.xxxx + u_xlat3;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * u_xlat1.zzzz + u_xlat3;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3] * in_POSITION0.wwww + u_xlat1;
    vs_TEXCOORD3.xyz = u_xlat1.xyz / u_xlat1.www;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.xz = u_xlat2.xw * vec2(0.5, 0.5);
    u_xlat5.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat1.w = u_xlat5.x * 0.5;
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat5.xyz = in_NORMAL0.yyy * unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat5.xyz = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_NORMAL0.xxx + u_xlat5.xyz;
    u_xlat0.xyz = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_NORMAL0.zzz + u_xlat5.xyz;
    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(0.5<mhy_CharacterOverrideLightDir.w);
#else
    u_xlatb15 = 0.5<mhy_CharacterOverrideLightDir.w;
#endif
    u_xlat1.x = mhy_CharacterOverrideLightDir.x;
    u_xlat1.yz = (-mhy_CharacterOverrideLightDir.yz);
    u_xlat1.xyz = (bool(u_xlatb15)) ? u_xlat1.xyz : mhy_AvatarLightDir.xyz;
    u_xlat16_9 = dot(u_xlat0.xyz, u_xlat1.xyz);
    vs_TEXCOORD1.w = u_xlat16_9 * 0.497500002 + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_CharacterAmbientSensorShadowOn));
#else
    u_xlatb15 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_CharacterAmbientSensorShadowOn);
#endif
    if(u_xlatb15){
        u_xlat15 = textureLod(_CharacterAmbientSensorTex, _AmbientSensorUVs.xy, 0.0).x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb15 = !!(0.5<u_xlat15);
#else
        u_xlatb15 = 0.5<u_xlat15;
#endif
        vs_TEXCOORD4 = u_xlatb15 ? 1.0 : float(0.0);
    } else {
        vs_TEXCOORD4 = 0.0;
    //ENDIF
    }
    gl_Position = u_xlat2;
    vs_COLOR0.xyz = in_COLOR0.xyz;
    vs_COLOR0.w = u_xlat16_4;
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    vs_TEXCOORD2.zw = u_xlat2.zw;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	mediump vec4 _Color;
uniform 	float _MainTexAlphaUse;
uniform 	mediump float _MainTexAlphaCutoff;
uniform 	float _UseLightMapColorAO;
uniform 	float _UseVertexColorAO;
uniform 	mediump float _LightArea;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	float _UseCoolShadowColorOrTex;
uniform 	mediump vec3 _CoolShadowMultColor;
uniform 	float _UseShadowTransition;
uniform 	float _ShadowTransitionRange;
uniform 	float _ShadowTransitionSoftness;
uniform 	mediump vec3 _SpecularColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	float _FaceBlushStrength;
uniform 	mediump vec3 _FaceBlushColor;
uniform 	mediump float _EmissionScaler;
uniform 	mediump vec3 _EmissionColor_MHY;
uniform 	float _UseMaterial2;
uniform 	mediump vec3 _Color2;
uniform 	mediump vec3 _FirstShadowMultColor2;
uniform 	mediump vec3 _CoolShadowMultColor2;
uniform 	mediump float _Shininess2;
uniform 	mediump float _SpecMulti2;
uniform 	float _ShadowTransitionRange2;
uniform 	float _ShadowTransitionSoftness2;
uniform 	float _UseMaterial3;
uniform 	mediump vec3 _Color3;
uniform 	mediump vec3 _FirstShadowMultColor3;
uniform 	mediump vec3 _CoolShadowMultColor3;
uniform 	mediump float _Shininess3;
uniform 	mediump float _SpecMulti3;
uniform 	float _ShadowTransitionRange3;
uniform 	float _ShadowTransitionSoftness3;
uniform 	float _UseMaterial4;
uniform 	mediump vec3 _Color4;
uniform 	mediump vec3 _FirstShadowMultColor4;
uniform 	mediump vec3 _CoolShadowMultColor4;
uniform 	mediump float _Shininess4;
uniform 	mediump float _SpecMulti4;
uniform 	float _ShadowTransitionRange4;
uniform 	float _ShadowTransitionSoftness4;
uniform 	float _UseMaterial5;
uniform 	mediump vec3 _Color5;
uniform 	mediump vec3 _FirstShadowMultColor5;
uniform 	mediump vec3 _CoolShadowMultColor5;
uniform 	mediump float _Shininess5;
uniform 	mediump float _SpecMulti5;
uniform 	float _ShadowTransitionRange5;
uniform 	float _ShadowTransitionSoftness5;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _TextureBiasWhenDithering;
uniform 	float _UseClipPlane;
uniform 	float _ES_CharacterAmbientLightOn;
uniform 	float _ES_CharacterAmbientBrightness;
uniform 	vec3 _ES_CharacterMainLightColor;
uniform 	vec3 _ES_CharacterAmbientLightColor;
uniform 	float _ES_CharacterMainLightRatio;
uniform 	float _ES_CharacterAmbientLightRatio;
uniform 	float _ES_CharacterColorTone;
uniform 	float _ES_CharacterPointLightWholeIntensity;
uniform 	vec4 mhy_AvatarLightDir;
uniform 	vec4 mhy_CharacterPointLightColor;
uniform 	vec4 mhy_CharacterOverrideLightDir;
uniform 	mediump vec4 _FlowMapColor01;
uniform 	mediump float _FlowScale01;
uniform 	mediump float _FlowMap01_Uspeed;
uniform 	vec4 _FlowMap01_ST;
uniform 	mediump float _FlowMap01_Vspeed;
uniform 	mediump float _Noise_Uspeed;
uniform 	vec4 _Noise_ST;
uniform 	mediump float _Noise_Vspeed;
uniform 	mediump float _NoiseFlowIntensity;
uniform 	mediump float _MaskOffset01;
uniform 	mediump float _NoiseIntensity;
uniform 	mediump float _Mask01_Power;
uniform 	mediump vec4 _FlowMapColor02;
uniform 	mediump float _FlowScale02;
uniform 	mediump float _FlowMap02_Uspeed;
uniform 	vec4 _FlowMap02_ST;
uniform 	mediump float _FlowMap02_Vspeed;
uniform 	mediump float _MaskOffset02;
uniform 	mediump float _Mask02_Power;
uniform 	mediump float _DissolveNoise_Uspeed;
uniform 	vec4 _DissovleNoise_ST;
uniform 	mediump float _DissolveNoise_Vspeed;
uniform 	mediump float _DissovleNoiseScale;
uniform 	mediump float _Dissovle;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _Noise;
uniform lowp sampler2D _FlowMap01;
uniform lowp sampler2D _Mask01;
uniform lowp sampler2D _FlowMap02;
uniform lowp sampler2D _Mask02;
uniform lowp sampler2D _DissovleNoise;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp float vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
vec3 u_xlat2;
mediump float u_xlat16_2;
bvec3 u_xlatb2;
vec3 u_xlat3;
mediump float u_xlat16_3;
lowp vec4 u_xlat10_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
bvec4 u_xlatb5;
vec3 u_xlat6;
mediump vec3 u_xlat16_6;
bvec3 u_xlatb6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
bool u_xlatb11;
vec3 u_xlat13;
mediump vec3 u_xlat16_13;
lowp float u_xlat10_13;
bool u_xlatb13;
mediump vec3 u_xlat16_14;
int u_xlati14;
bool u_xlatb14;
mediump float u_xlat16_15;
mediump vec3 u_xlat16_18;
mediump vec3 u_xlat16_19;
bvec2 u_xlatb22;
float u_xlat24;
bool u_xlatb24;
float u_xlat33;
mediump float u_xlat16_33;
lowp float u_xlat10_33;
int u_xlati33;
bool u_xlatb33;
float u_xlat35;
mediump float u_xlat16_35;
int u_xlati35;
float u_xlat36;
int u_xlati36;
mediump float u_xlat16_37;
mediump float u_xlat16_40;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseClipPlane));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseClipPlane);
#endif
    u_xlat16_1.x = vs_COLOR0.w + -0.00999999978;
#ifdef UNITY_ADRENO_ES3
    u_xlatb11 = !!(u_xlat16_1.x<0.0);
#else
    u_xlatb11 = u_xlat16_1.x<0.0;
#endif
    u_xlatb0 = u_xlatb0 && u_xlatb11;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(_DitherAlpha<0.949999988);
#else
        u_xlatb0 = _DitherAlpha<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb22.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb22.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb22.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = _DitherAlpha * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + -0.00999999978;
#ifdef UNITY_ADRENO_ES3
            u_xlatb0 = !!(u_xlat0.x<0.0);
#else
            u_xlatb0 = u_xlat0.x<0.0;
#endif
            if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(0.5<mhy_CharacterOverrideLightDir.w);
#else
    u_xlatb2.x = 0.5<mhy_CharacterOverrideLightDir.w;
#endif
    u_xlat3.x = mhy_CharacterOverrideLightDir.x;
    u_xlat3.yz = (-mhy_CharacterOverrideLightDir.yz);
    u_xlat2.xyz = (u_xlatb2.x) ? u_xlat3.xyz : mhy_AvatarLightDir.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat33) + u_xlat2.xyz;
    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat0.xyz = vec3(u_xlat33) * u_xlat0.xyz;
    u_xlat33 = _TextureBiasWhenDithering + -1.0;
    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy, u_xlat33);
    u_xlatb2.xyz = equal(vec4(_MainTexAlphaUse), vec4(3.0, 1.0, 2.0, 0.0)).xyz;
    u_xlat35 = u_xlat1.w * _FaceBlushStrength;
    u_xlat3.xyz = (-u_xlat1.xyz) + _FaceBlushColor.xyz;
    u_xlat3.xyz = vec3(u_xlat35) * u_xlat3.xyz + u_xlat1.xyz;
    u_xlat16_4.xyz = (u_xlatb2.x) ? u_xlat3.xyz : u_xlat1.xyz;
    u_xlat16_37 = u_xlat1.w + (-_MainTexAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(u_xlat16_37<0.0);
#else
    u_xlatb2.x = u_xlat16_37<0.0;
#endif
    u_xlatb2.x = u_xlatb2.y && u_xlatb2.x;
    if((int(u_xlatb2.x) * int(0xffffffffu))!=0){discard;}
    u_xlat10_3 = texture(_LightMapTex, vs_TEXCOORD0.xy, u_xlat33);
    u_xlatb2.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseLightMapColorAO, _UseVertexColorAO, _UseLightMapColorAO, _UseLightMapColorAO)).xy;
    u_xlat16_37 = (u_xlatb2.x) ? u_xlat10_3.y : 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseMaterial2));
#else
    u_xlatb33 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseMaterial2);
#endif
    u_xlatb5 = greaterThanEqual(u_xlat10_3.wwww, vec4(0.800000012, 0.400000006, 0.200000003, 0.600000024));
    u_xlatb33 = u_xlatb33 && u_xlatb5.x;
    u_xlat33 = (u_xlatb33) ? 2.0 : 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseMaterial3));
#else
    u_xlatb2.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseMaterial3);
#endif
    u_xlatb2.x = u_xlatb5.y && u_xlatb2.x;
    u_xlatb6.xyz = lessThan(u_xlat10_3.wwww, vec4(0.600000024, 0.400000006, 0.800000012, 0.0)).xyz;
    u_xlatb2.x = u_xlatb2.x && u_xlatb6.x;
    u_xlat33 = (u_xlatb2.x) ? 3.0 : u_xlat33;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseMaterial4));
#else
    u_xlatb2.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseMaterial4);
#endif
    u_xlatb2.x = u_xlatb5.z && u_xlatb2.x;
    u_xlatb2.x = u_xlatb6.y && u_xlatb2.x;
    u_xlat33 = (u_xlatb2.x) ? 4.0 : u_xlat33;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseMaterial5));
#else
    u_xlatb2.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseMaterial5);
#endif
    u_xlatb2.x = u_xlatb5.w && u_xlatb2.x;
    u_xlatb2.x = u_xlatb6.z && u_xlatb2.x;
    u_xlat33 = (u_xlatb2.x) ? 5.0 : u_xlat33;
    u_xlatb5 = equal(vec4(u_xlat33), vec4(2.0, 3.0, 4.0, 5.0));
    u_xlat16_7.xyz = (u_xlatb5.x) ? _Color2.xyz : _Color.xyz;
    u_xlat16_7.xyz = (u_xlatb5.y) ? _Color3.xyz : u_xlat16_7.xyz;
    u_xlat16_7.xyz = (u_xlatb5.z) ? _Color4.xyz : u_xlat16_7.xyz;
    u_xlat16_7.xyz = (u_xlatb5.w) ? _Color5.xyz : u_xlat16_7.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_7.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(0.00999999978<u_xlat1.w);
#else
    u_xlatb2.x = 0.00999999978<u_xlat1.w;
#endif
    u_xlatb2.x = u_xlatb2.x && u_xlatb2.z;
    u_xlat16_7.x = (u_xlatb2.x) ? u_xlat1.w : 0.0;
    u_xlat16_18.x = u_xlat16_37 * vs_COLOR0.x;
    u_xlat16_37 = (u_xlatb2.y) ? u_xlat16_18.x : u_xlat16_37;
#ifdef UNITY_ADRENO_ES3
    u_xlatb13 = !!(u_xlat16_37<0.0500000007);
#else
    u_xlatb13 = u_xlat16_37<0.0500000007;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(0.949999988<u_xlat16_37);
#else
    u_xlatb24 = 0.949999988<u_xlat16_37;
#endif
    u_xlat35 = u_xlat16_37 + vs_TEXCOORD1.w;
    u_xlat35 = u_xlat35 * 0.5;
    u_xlat16_37 = (u_xlatb24) ? 1.0 : u_xlat35;
    u_xlat16_37 = (u_xlatb13) ? 0.0 : u_xlat16_37;
#ifdef UNITY_ADRENO_ES3
    u_xlatb13 = !!(u_xlat16_37<_LightArea);
#else
    u_xlatb13 = u_xlat16_37<_LightArea;
#endif
    if(u_xlatb13){
#ifdef UNITY_ADRENO_ES3
        u_xlatb13 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition));
#else
        u_xlatb13 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition);
#endif
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(u_xlat33==1.0);
#else
        u_xlatb24 = u_xlat33==1.0;
#endif
        u_xlat16_8.x = (u_xlatb24) ? _ShadowTransitionRange : 0.0;
        u_xlat16_8.y = (u_xlatb24) ? _ShadowTransitionSoftness : 0.0;
        u_xlat16_18.xy = (u_xlatb5.x) ? vec2(_ShadowTransitionRange2, _ShadowTransitionSoftness2) : u_xlat16_8.xy;
        u_xlat16_18.xy = (u_xlatb5.y) ? vec2(_ShadowTransitionRange3, _ShadowTransitionSoftness3) : u_xlat16_18.xy;
        u_xlat16_18.xy = (u_xlatb5.z) ? vec2(_ShadowTransitionRange4, _ShadowTransitionSoftness4) : u_xlat16_18.xy;
        u_xlat16_18.xy = (u_xlatb5.w) ? vec2(_ShadowTransitionRange5, _ShadowTransitionSoftness5) : u_xlat16_18.xy;
        u_xlat16_37 = (-u_xlat16_37) + _LightArea;
        u_xlat16_37 = u_xlat16_37 / u_xlat16_18.x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(u_xlat16_37>=1.0);
#else
        u_xlatb24 = u_xlat16_37>=1.0;
#endif
        u_xlat16_35 = u_xlat16_37 + 0.00999999978;
        u_xlat16_35 = log2(u_xlat16_35);
        u_xlat16_35 = u_xlat16_35 * u_xlat16_18.y;
        u_xlat16_35 = exp2(u_xlat16_35);
        u_xlat35 = min(u_xlat16_35, 1.0);
        u_xlat24 = (u_xlatb24) ? 1.0 : u_xlat35;
        u_xlat13.x = (u_xlatb13) ? u_xlat24 : 1.0;
        u_xlat16_37 = 0.0;
    } else {
        u_xlat13.x = 0.0;
        u_xlat16_37 = 1.0;
    //ENDIF
    }
    u_xlat24 = (-u_xlat16_37) + 1.0;
#ifdef UNITY_ADRENO_ES3
    { bool cond = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(vs_TEXCOORD4); u_xlati35 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati35 = int((vec4(0.0, 0.0, 0.0, 0.0)!=vec4(vs_TEXCOORD4)) ? 0xFFFFFFFFu : uint(0u));
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(u_xlat33==1.0);
#else
    u_xlatb33 = u_xlat33==1.0;
#endif
    if(u_xlatb33){
#ifdef UNITY_ADRENO_ES3
        u_xlatb14 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex));
#else
        u_xlatb14 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex);
#endif
        u_xlat16_6.xyz = vec3(_FirstShadowMultColor.xxyz.y + (-_CoolShadowMultColor.x), _FirstShadowMultColor.xxyz.z + (-_CoolShadowMultColor.y), float(_FirstShadowMultColor.z) + (-_CoolShadowMultColor.z));
        u_xlat6.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_6.xyz + _CoolShadowMultColor.xyz;
        u_xlat16_18.xyz = (bool(u_xlatb14)) ? u_xlat6.xyz : vec3(_FirstShadowMultColor.x, _FirstShadowMultColor.y, _FirstShadowMultColor.z);
    } else {
        if(u_xlatb5.x){
#ifdef UNITY_ADRENO_ES3
            u_xlatb14 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex));
#else
            u_xlatb14 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex);
#endif
            u_xlat16_6.xyz = _FirstShadowMultColor2.xyz + (-_CoolShadowMultColor2.xyz);
            u_xlat6.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_6.xyz + _CoolShadowMultColor2.xyz;
            u_xlat16_18.xyz = (bool(u_xlatb14)) ? u_xlat6.xyz : _FirstShadowMultColor2.xyz;
        } else {
#ifdef UNITY_ADRENO_ES3
            u_xlatb14 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex));
#else
            u_xlatb14 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex);
#endif
            u_xlat16_6.xyz = _FirstShadowMultColor3.xyz + (-_CoolShadowMultColor3.xyz);
            u_xlat6.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_6.xyz + _CoolShadowMultColor3.xyz;
            u_xlat16_8.xyz = (bool(u_xlatb14)) ? u_xlat6.xyz : _FirstShadowMultColor3.xyz;
            u_xlat16_6.xyz = _FirstShadowMultColor4.xyz + (-_CoolShadowMultColor4.xyz);
            u_xlat6.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_6.xyz + _CoolShadowMultColor4.xyz;
            u_xlat16_9.xyz = (bool(u_xlatb14)) ? u_xlat6.xyz : _FirstShadowMultColor4.xyz;
            u_xlat16_6.xyz = _FirstShadowMultColor5.xyz + (-_CoolShadowMultColor5.xyz);
            u_xlat6.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_6.xyz + _CoolShadowMultColor5.xyz;
            u_xlat16_10.xyz = (bool(u_xlatb14)) ? u_xlat6.xyz : _FirstShadowMultColor5.xyz;
            u_xlat16_9.xyz = (u_xlatb5.z) ? u_xlat16_9.xyz : u_xlat16_10.xyz;
            u_xlat16_18.xyz = (u_xlatb5.y) ? u_xlat16_8.xyz : u_xlat16_9.xyz;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition));
#else
    u_xlatb14 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition);
#endif
    u_xlati36 = ~u_xlati35;
    u_xlati14 = u_xlatb14 ? u_xlati36 : int(0);
    u_xlat16_6.xyz = u_xlat16_18.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat6.xyz = u_xlat13.xxx * u_xlat16_6.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_18.xyz = (int(u_xlati14) != 0) ? u_xlat6.xyz : u_xlat16_18.xyz;
    u_xlat16_37 = (u_xlatb5.z) ? _Shininess4 : _Shininess5;
    u_xlat16_8.x = (u_xlatb5.z) ? _SpecMulti4 : _SpecMulti5;
    u_xlat16_37 = (u_xlatb5.y) ? _Shininess3 : u_xlat16_37;
    u_xlat16_8.x = (u_xlatb5.y) ? _SpecMulti3 : u_xlat16_8.x;
    u_xlat16_37 = (u_xlatb5.x) ? _Shininess2 : u_xlat16_37;
    u_xlat16_8.x = (u_xlatb5.x) ? _SpecMulti2 : u_xlat16_8.x;
    u_xlat16_37 = (u_xlatb33) ? _Shininess : u_xlat16_37;
    u_xlat16_8.x = (u_xlatb33) ? _SpecMulti : u_xlat16_8.x;
    u_xlat16_19.x = dot(vs_TEXCOORD1.xyz, u_xlat0.xyz);
    u_xlat16_19.x = max(u_xlat16_19.x, 0.00100000005);
    u_xlat16_19.x = log2(u_xlat16_19.x);
    u_xlat16_37 = u_xlat16_37 * u_xlat16_19.x;
    u_xlat16_37 = exp2(u_xlat16_37);
    u_xlat0.x = (-u_xlat10_3.z) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat0.x<u_xlat16_37);
#else
    u_xlatb0 = u_xlat0.x<u_xlat16_37;
#endif
    u_xlat16_8.xyz = u_xlat16_8.xxx * _SpecularColor.xyz;
    u_xlat16_8.xyz = u_xlat10_3.xxx * u_xlat16_8.xyz;
    u_xlat16_8.xyz = (bool(u_xlatb0)) ? u_xlat16_8.xyz : vec3(0.0, 0.0, 0.0);
    u_xlat16_4.xyz = vec3(u_xlat16_4.x * _EmissionColor_MHY.xxyz.y, u_xlat16_4.y * _EmissionColor_MHY.xxyz.z, u_xlat16_4.z * float(_EmissionColor_MHY.z));
    u_xlat0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(u_xlat24==1.0);
#else
    u_xlatb33 = u_xlat24==1.0;
#endif
    u_xlati33 = int(uint(u_xlatb33) * 0xffffffffu | uint(u_xlati35));
    u_xlat13.xyz = u_xlat0.xyz * u_xlat16_18.xyz;
    u_xlat0.xyz = (int(u_xlati33) != 0) ? u_xlat13.xyz : u_xlat0.xyz;
    u_xlat0.xyz = u_xlat16_8.xyz + u_xlat0.xyz;
    u_xlat13.xy = vs_TEXCOORD0.zw * _FlowMap01_ST.xy + _FlowMap01_ST.zw;
    u_xlat16_8.x = _Time.y * _FlowMap01_Uspeed + u_xlat13.x;
    u_xlat16_8.y = _Time.y * _FlowMap01_Vspeed + u_xlat13.y;
    u_xlat13.xy = vs_TEXCOORD0.zw * _Noise_ST.xy + _Noise_ST.zw;
    u_xlat16_9.x = _Time.y * _Noise_Uspeed + u_xlat13.x;
    u_xlat16_9.y = _Time.y * _Noise_Vspeed + u_xlat13.y;
    u_xlat10_33 = texture(_Noise, u_xlat16_9.xy).x;
    u_xlat16_37 = _MaskOffset01 * 1.39999998 + -0.699999988;
    u_xlat16_18.x = u_xlat10_33 * _NoiseIntensity;
    u_xlat13.xy = vs_TEXCOORD0.zw * _FlowMap02_ST.xy + _FlowMap02_ST.zw;
    u_xlat16_9.x = _Time.y * _FlowMap02_Uspeed + u_xlat13.x;
    u_xlat16_9.y = _Time.y * _FlowMap02_Vspeed + u_xlat13.y;
    u_xlat16_40 = _MaskOffset02 * 1.39999998 + -0.699999988;
    u_xlat16_10.xyz = _FlowMapColor01.xyz * vec3(_FlowScale01);
    u_xlat16_8.xy = vec2(u_xlat10_33) * vec2(vec2(_NoiseFlowIntensity, _NoiseFlowIntensity)) + u_xlat16_8.xy;
    u_xlat10_13 = texture(_FlowMap01, u_xlat16_8.xy).x;
    u_xlat16_13.xyz = vec3(u_xlat10_13) * u_xlat16_10.xyz;
    u_xlat16_8.x = (-vs_TEXCOORD0.z) + 1.0;
    u_xlat16_1.x = u_xlat16_37 + u_xlat16_8.x;
    u_xlat16_1.yw = vec2(u_xlat10_33) * vec2(vec2(_NoiseIntensity, _NoiseIntensity)) + (-vs_TEXCOORD0.ww);
    u_xlat16_18.y = 1.0;
    u_xlat16_19.xy = u_xlat16_1.xy + u_xlat16_18.xy;
    u_xlat10_3.x = texture(_Mask01, u_xlat16_19.xy).x;
    u_xlat16_3 = max(u_xlat10_3.x, 9.99999975e-05);
    u_xlat16_3 = log2(u_xlat16_3);
    u_xlat16_3 = u_xlat16_3 * _Mask01_Power;
    u_xlat16_3 = exp2(u_xlat16_3);
    u_xlat16_19.xyz = _FlowMapColor02.xyz * vec3(_FlowScale02);
    u_xlat16_9.xy = vec2(u_xlat10_33) * vec2(vec2(_NoiseFlowIntensity, _NoiseFlowIntensity)) + u_xlat16_9.xy;
    u_xlat10_33 = texture(_FlowMap02, u_xlat16_9.xy).x;
    u_xlat16_14.xyz = vec3(u_xlat10_33) * u_xlat16_19.xyz;
    u_xlat16_1.z = u_xlat16_40 + u_xlat16_8.x;
    u_xlat16_18.xy = vec2(u_xlat16_1.z + u_xlat16_18.x, u_xlat16_1.w + u_xlat16_18.y);
    u_xlat10_33 = texture(_Mask02, u_xlat16_18.xy).x;
    u_xlat16_33 = max(u_xlat10_33, 9.99999975e-05);
    u_xlat16_33 = log2(u_xlat16_33);
    u_xlat16_33 = u_xlat16_33 * _Mask02_Power;
    u_xlat16_33 = exp2(u_xlat16_33);
    u_xlat16_14.xyz = vec3(u_xlat16_33) * u_xlat16_14.xyz;
    u_xlat16_13.xyz = u_xlat16_13.xyz * vec3(u_xlat16_3) + u_xlat16_14.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(_EmissionScaler) + u_xlat16_13.xyz;
    u_xlat3.xyz = (-u_xlat0.xyz) + u_xlat16_4.xyz;
    u_xlat3.xyz = u_xlat16_7.xxx * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat5.xy = vs_TEXCOORD0.zw * _DissovleNoise_ST.xy + _DissovleNoise_ST.zw;
    u_xlat16_4.x = _Time.y * _DissolveNoise_Uspeed + u_xlat5.x;
    u_xlat16_4.y = _Time.y * _DissolveNoise_Vspeed + u_xlat5.y;
    u_xlat10_33 = texture(_DissovleNoise, u_xlat16_4.xy).x;
    u_xlat33 = u_xlat10_33 * _DissovleNoiseScale + vs_TEXCOORD0.z;
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(_Dissovle>=u_xlat33);
#else
    u_xlatb33 = _Dissovle>=u_xlat33;
#endif
    u_xlat0.xyz = (u_xlatb2.x) ? u_xlat3.xyz : u_xlat0.xyz;
    u_xlat0.xyz = u_xlat16_13.xyz + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(0.00999999978<u_xlat16_7.x);
#else
    u_xlatb2.x = 0.00999999978<u_xlat16_7.x;
#endif
    if((int(u_xlatb33) * int(0xffffffffu))==0){discard;}
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn));
#else
    u_xlatb33 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn);
#endif
    u_xlat13.xyz = u_xlat0.xyz * vec3(vec3(_ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness));
    u_xlat3.xyz = vec3(vec3(_ES_CharacterPointLightWholeIntensity, _ES_CharacterPointLightWholeIntensity, _ES_CharacterPointLightWholeIntensity)) * mhy_CharacterPointLightColor.xyz;
    u_xlat5.xyz = _ES_CharacterMainLightColor.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.xyz = min(max(u_xlat5.xyz, 0.0), 1.0);
#else
    u_xlat5.xyz = clamp(u_xlat5.xyz, 0.0, 1.0);
#endif
    u_xlat36 = (-mhy_CharacterPointLightColor.w) + 1.0;
    u_xlat3.xyz = u_xlat5.xyz * vec3(u_xlat36) + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat3.xyz = vec3(vec3(_ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio)) * u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat13.xyz = u_xlat13.xyz * u_xlat3.xyz;
    u_xlat3.xyz = _ES_CharacterAmbientLightColor.xyz * vec3(_ES_CharacterAmbientLightRatio);
    u_xlat16_4.xyz = u_xlat13.xyz * vec3(10.0, 10.0, 10.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.xyz = min(max(u_xlat16_4.xyz, 0.0), 1.0);
#else
    u_xlat16_4.xyz = clamp(u_xlat16_4.xyz, 0.0, 1.0);
#endif
    u_xlat13.xyz = u_xlat3.xyz * u_xlat16_4.xyz + u_xlat13.xyz;
    u_xlat16_4.xyz = (bool(u_xlatb33)) ? u_xlat13.xyz : u_xlat0.xyz;
    u_xlat16_18.xyz = u_xlat0.xyz + (-u_xlat16_4.xyz);
    u_xlat16_18.xyz = u_xlat16_7.xxx * u_xlat16_18.xyz + u_xlat16_4.xyz;
    u_xlat16_0.xyz = (u_xlatb2.x) ? u_xlat16_18.xyz : u_xlat16_4.xyz;
    u_xlat16_4.x = max(u_xlat16_0.z, u_xlat16_0.y);
    u_xlat16_1.w = max(u_xlat16_0.x, u_xlat16_4.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(1.0<u_xlat16_1.w);
#else
    u_xlatb2.x = 1.0<u_xlat16_1.w;
#endif
    u_xlat16_1.xyz = u_xlat16_0.xyz / u_xlat16_1.www;
    u_xlat16_0.w = 1.0;
    u_xlat16_0 = (u_xlatb2.x) ? u_xlat16_1 : u_xlat16_0;
    u_xlat16_4.x = min(u_xlat16_0.w, 1.10000002);
    u_xlat16_15 = u_xlat16_0.w + (-u_xlat16_4.x);
    u_xlat16_4.x = u_xlat16_7.x * u_xlat16_15 + u_xlat16_4.x;
    u_xlat16_2 = u_xlat16_4.x * 0.0500000007;
    SV_Target0.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb13 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb13 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_4.x = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb13) ? u_xlat16_4.x : 0.0;
    SV_Target0.w = 0.0156862754;
    SV_Target1.xyz = u_xlat16_0.xyz;
    SV_Target1.w = u_xlat16_2;
    SV_Target2.xy = vec2(0.0, 0.0);
    SV_Target2.w = vs_TEXCOORD4;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "MSAA_INTERPOLATION" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	vec4 _MainTex_ST;
uniform 	float _CharacterAmbientSensorShadowOn;
uniform 	vec4 _AmbientSensorUVs;
uniform 	float _UseClipPlane;
uniform 	float _ClipPlaneWorld;
uniform 	vec4 _ClipPlane;
uniform 	vec4 mhy_AvatarLightDir;
uniform 	vec4 mhy_CharacterOverrideLightDir;
uniform lowp sampler2D _CharacterAmbientSensorTex;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp float vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD6;
vec4 u_xlat0;
bvec2 u_xlatb0;
vec4 u_xlat1;
bool u_xlatb1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump float u_xlat16_4;
float u_xlat5;
float u_xlat6;
float u_xlat7;
float u_xlat10;
bool u_xlatb10;
float u_xlat15;
bool u_xlatb15;
float u_xlat16;
bool u_xlatb16;
void main()
{
    u_xlatb0.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseClipPlane, _ClipPlaneWorld, _UseClipPlane, _UseClipPlane)).xy;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(abs(_ClipPlane.w)<0.00100000005);
#else
    u_xlatb10 = abs(_ClipPlane.w)<0.00100000005;
#endif
    u_xlat1.xyz = _ClipPlane.www * _ClipPlane.xyz;
    u_xlat1.xyz = (bool(u_xlatb10)) ? vec3(0.0, 0.0, 0.0) : u_xlat1.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_WorldToObject[1];
    u_xlat2 = hlslcc_mtx4x4unity_WorldToObject[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_WorldToObject[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_WorldToObject[3];
    u_xlat1.xyz = u_xlat1.xyz / u_xlat1.www;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * _ClipPlane.yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _ClipPlane.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _ClipPlane.zzz + u_xlat2.xyz;
    u_xlat10 = dot(u_xlat1.xyz, u_xlat2.xyz);
    u_xlat15 = dot(in_POSITION0.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(u_xlat15<u_xlat10);
#else
    u_xlatb1 = u_xlat15<u_xlat10;
#endif
    u_xlat10 = (-u_xlat10) + u_xlat15;
    u_xlat2.xyz = (-vec3(u_xlat10)) * u_xlat2.xyz + in_POSITION0.xyz;
    u_xlat2.w = 0.0;
    u_xlat3.xyz = in_POSITION0.xyz;
    u_xlat3.w = in_COLOR0.w;
    u_xlat1 = (bool(u_xlatb1)) ? u_xlat2 : u_xlat3;
    u_xlat10 = dot(in_POSITION0.xyz, _ClipPlane.xyz);
    u_xlat15 = _ClipPlane.w + -0.00999999978;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(u_xlat10<u_xlat15);
#else
    u_xlatb15 = u_xlat10<u_xlat15;
#endif
    u_xlat10 = u_xlat10 + (-_ClipPlane.w);
    u_xlat2.xyz = (-vec3(u_xlat10)) * _ClipPlane.xyz + in_POSITION0.xyz;
    u_xlat2.w = 0.0;
    u_xlat2 = (bool(u_xlatb15)) ? u_xlat2 : u_xlat3;
    u_xlat1.xyz = (u_xlatb0.y) ? u_xlat1.xyz : u_xlat2.xyz;
    u_xlat16_4 = (u_xlatb0.y) ? u_xlat1.w : u_xlat2.w;
    u_xlat1.xyz = (u_xlatb0.x) ? u_xlat1.xyz : in_POSITION0.xyz;
    vs_COLOR0.w = (u_xlatb0.x) ? u_xlat16_4 : in_COLOR0.w;
    u_xlat0.xyw = (-_WorldSpaceCameraPos.xyz) + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat2.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;
    u_xlat2.y = hlslcc_mtx4x4unity_ObjectToWorld[1].x;
    u_xlat2.z = hlslcc_mtx4x4unity_ObjectToWorld[2].x;
    u_xlat2.w = u_xlat0.x;
    u_xlat1.w = 1.0;
    u_xlat2.x = dot(u_xlat2, u_xlat1);
    u_xlat3.x = hlslcc_mtx4x4unity_ObjectToWorld[0].y;
    u_xlat3.y = hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat3.z = hlslcc_mtx4x4unity_ObjectToWorld[2].y;
    u_xlat3.w = u_xlat0.y;
    u_xlat7 = dot(u_xlat3, u_xlat1);
    u_xlat0.x = hlslcc_mtx4x4unity_ObjectToWorld[0].z;
    u_xlat0.y = hlslcc_mtx4x4unity_ObjectToWorld[1].z;
    u_xlat0.z = hlslcc_mtx4x4unity_ObjectToWorld[2].z;
    u_xlat0.x = dot(u_xlat0, u_xlat1);
    u_xlat3.x = hlslcc_mtx4x4unity_ObjectToWorld[0].w;
    u_xlat3.y = hlslcc_mtx4x4unity_ObjectToWorld[1].w;
    u_xlat3.z = hlslcc_mtx4x4unity_ObjectToWorld[2].w;
    u_xlat3.w = hlslcc_mtx4x4unity_ObjectToWorld[3].w;
    u_xlat5 = dot(u_xlat3, u_xlat1);
    u_xlat3 = vec4(u_xlat7) * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[3] * vec4(u_xlat5) + u_xlat2;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat1;
    vs_TEXCOORD3.xyz = u_xlat1.xyz / u_xlat1.www;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.xz = u_xlat0.xw * vec2(0.5, 0.5);
    u_xlat6 = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.w = u_xlat6 * 0.5;
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat1.xyz = in_NORMAL0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_NORMAL0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_NORMAL0.zzz + u_xlat1.xyz;
    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat16 = inversesqrt(u_xlat16);
    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(0.5<mhy_CharacterOverrideLightDir.w);
#else
    u_xlatb16 = 0.5<mhy_CharacterOverrideLightDir.w;
#endif
    u_xlat2.x = mhy_CharacterOverrideLightDir.x;
    u_xlat2.yz = (-mhy_CharacterOverrideLightDir.yz);
    u_xlat2.xyz = (bool(u_xlatb16)) ? u_xlat2.xyz : mhy_AvatarLightDir.xyz;
    u_xlat16_4 = dot(u_xlat1.xyz, u_xlat2.xyz);
    vs_TEXCOORD1.w = u_xlat16_4 * 0.497500002 + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_CharacterAmbientSensorShadowOn));
#else
    u_xlatb16 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_CharacterAmbientSensorShadowOn);
#endif
    if(u_xlatb16){
        u_xlat16 = textureLod(_CharacterAmbientSensorTex, _AmbientSensorUVs.xy, 0.0).x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb16 = !!(0.5<u_xlat16);
#else
        u_xlatb16 = 0.5<u_xlat16;
#endif
        vs_TEXCOORD4 = u_xlatb16 ? 1.0 : float(0.0);
    } else {
        vs_TEXCOORD4 = 0.0;
    //ENDIF
    }
    gl_Position = u_xlat0;
    vs_COLOR0.xyz = in_COLOR0.xyz;
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    vs_TEXCOORD2.zw = u_xlat0.zw;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	mediump vec4 _Color;
uniform 	float _MainTexAlphaUse;
uniform 	mediump float _MainTexAlphaCutoff;
uniform 	float _UseVertexColorAO;
uniform 	mediump float _LightArea;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	float _UseCoolShadowColorOrTex;
uniform 	mediump vec3 _CoolShadowMultColor;
uniform 	float _UseShadowTransition;
uniform 	float _ShadowTransitionRange;
uniform 	float _ShadowTransitionSoftness;
uniform 	mediump vec3 _SpecularColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	float _FaceBlushStrength;
uniform 	mediump vec3 _FaceBlushColor;
uniform 	mediump float _EmissionScaler;
uniform 	mediump vec3 _EmissionColor_MHY;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _UseClipPlane;
uniform 	float _ES_CharacterAmbientLightOn;
uniform 	float _ES_CharacterAmbientBrightness;
uniform 	vec3 _ES_CharacterMainLightColor;
uniform 	vec3 _ES_CharacterAmbientLightColor;
uniform 	float _ES_CharacterMainLightRatio;
uniform 	float _ES_CharacterAmbientLightRatio;
uniform 	float _ES_CharacterColorTone;
uniform 	float _ES_CharacterPointLightWholeIntensity;
uniform 	vec4 mhy_AvatarLightDir;
uniform 	vec4 mhy_CharacterPointLightColor;
uniform 	vec4 mhy_CharacterOverrideLightDir;
uniform 	mediump vec4 _FlowMapColor01;
uniform 	mediump float _FlowScale01;
uniform 	mediump float _FlowMap01_Uspeed;
uniform 	vec4 _FlowMap01_ST;
uniform 	mediump float _FlowMap01_Vspeed;
uniform 	mediump float _Noise_Uspeed;
uniform 	vec4 _Noise_ST;
uniform 	mediump float _Noise_Vspeed;
uniform 	mediump float _NoiseFlowIntensity;
uniform 	mediump float _MaskOffset01;
uniform 	mediump float _NoiseIntensity;
uniform 	mediump float _Mask01_Power;
uniform 	mediump vec4 _FlowMapColor02;
uniform 	mediump float _FlowScale02;
uniform 	mediump float _FlowMap02_Uspeed;
uniform 	vec4 _FlowMap02_ST;
uniform 	mediump float _FlowMap02_Vspeed;
uniform 	mediump float _MaskOffset02;
uniform 	mediump float _Mask02_Power;
uniform 	mediump float _DissolveNoise_Uspeed;
uniform 	vec4 _DissovleNoise_ST;
uniform 	mediump float _DissolveNoise_Vspeed;
uniform 	mediump float _DissovleNoiseScale;
uniform 	mediump float _Dissovle;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _Noise;
uniform lowp sampler2D _FlowMap01;
uniform lowp sampler2D _Mask01;
uniform lowp sampler2D _FlowMap02;
uniform lowp sampler2D _Mask02;
uniform lowp sampler2D _DissovleNoise;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp float vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
lowp float u_xlat10_2;
bvec3 u_xlatb2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
lowp float u_xlat10_3;
int u_xlati3;
bool u_xlatb3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec2 u_xlat16_7;
mediump vec3 u_xlat16_8;
vec3 u_xlat9;
bool u_xlatb10;
vec3 u_xlat12;
mediump vec3 u_xlat16_12;
lowp float u_xlat10_12;
int u_xlati12;
bool u_xlatb12;
vec3 u_xlat13;
mediump vec3 u_xlat16_13;
mediump float u_xlat16_14;
mediump vec2 u_xlat16_15;
mediump vec2 u_xlat16_16;
bvec2 u_xlatb20;
vec2 u_xlat22;
bool u_xlatb22;
mediump vec2 u_xlat16_25;
float u_xlat30;
bool u_xlatb30;
float u_xlat32;
mediump float u_xlat16_32;
lowp float u_xlat10_32;
int u_xlati32;
bool u_xlatb32;
float u_xlat33;
mediump float u_xlat16_34;
mediump float u_xlat16_35;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseClipPlane));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseClipPlane);
#endif
    u_xlat16_1.x = vs_COLOR0.w + -0.00999999978;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(u_xlat16_1.x<0.0);
#else
    u_xlatb10 = u_xlat16_1.x<0.0;
#endif
    u_xlatb0 = u_xlatb0 && u_xlatb10;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(_DitherAlpha<0.949999988);
#else
        u_xlatb0 = _DitherAlpha<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb20.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb20.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb20.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = _DitherAlpha * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + -0.00999999978;
#ifdef UNITY_ADRENO_ES3
            u_xlatb0 = !!(u_xlat0.x<0.0);
#else
            u_xlatb0 = u_xlat0.x<0.0;
#endif
            if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(0.5<mhy_CharacterOverrideLightDir.w);
#else
    u_xlatb2.x = 0.5<mhy_CharacterOverrideLightDir.w;
#endif
    u_xlat3.x = mhy_CharacterOverrideLightDir.x;
    u_xlat3.yz = (-mhy_CharacterOverrideLightDir.yz);
    u_xlat2.xyz = (u_xlatb2.x) ? u_xlat3.xyz : mhy_AvatarLightDir.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat30) + u_xlat2.xyz;
    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
    u_xlat2.xy = dFdx(vs_TEXCOORD0.xy);
    u_xlat22.xy = dFdy(vs_TEXCOORD0.xy);
    u_xlat2.xy = u_xlat22.xy + u_xlat2.xy;
    u_xlat22.xy = (-u_xlat2.xy) * vec2(0.25, 0.25) + vs_TEXCOORD0.xy;
    u_xlat2.xy = u_xlat2.xy * vec2(0.25, 0.25) + vs_TEXCOORD0.xy;
    u_xlat2.xy = (int(gl_SampleID) != 0) ? u_xlat22.xy : u_xlat2.xy;
    u_xlat1 = textureLod(_MainTex, u_xlat2.xy, 0.0);
    u_xlatb2.xyz = equal(vec4(_MainTexAlphaUse), vec4(3.0, 1.0, 2.0, 0.0)).xyz;
    u_xlat30 = u_xlat1.w * _FaceBlushStrength;
    u_xlat3.xyz = (-u_xlat1.xyz) + _FaceBlushColor.xyz;
    u_xlat3.xyz = vec3(u_xlat30) * u_xlat3.xyz + u_xlat1.xyz;
    u_xlat16_4.xyz = (u_xlatb2.x) ? u_xlat3.xyz : u_xlat1.xyz;
    u_xlat16_34 = u_xlat1.w + (-_MainTexAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(u_xlat16_34<0.0);
#else
    u_xlatb30 = u_xlat16_34<0.0;
#endif
    u_xlatb30 = u_xlatb2.y && u_xlatb30;
    if((int(u_xlatb30) * int(0xffffffffu))!=0){discard;}
    u_xlat16_4.xyz = u_xlat16_4.xyz * _Color.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(0.00999999978<u_xlat1.w);
#else
    u_xlatb30 = 0.00999999978<u_xlat1.w;
#endif
    u_xlatb30 = u_xlatb30 && u_xlatb2.z;
    u_xlat16_34 = (u_xlatb30) ? u_xlat1.w : 0.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorAO));
#else
    u_xlatb2.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorAO);
#endif
    u_xlat16_5.x = vs_COLOR0.x * 0.5;
    u_xlat16_5.x = (u_xlatb2.x) ? u_xlat16_5.x : 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat16_5.x<0.0500000007);
#else
    u_xlatb12 = u_xlat16_5.x<0.0500000007;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(0.949999988<u_xlat16_5.x);
#else
    u_xlatb22 = 0.949999988<u_xlat16_5.x;
#endif
    u_xlat32 = u_xlat16_5.x + vs_TEXCOORD1.w;
    u_xlat32 = u_xlat32 * 0.5;
    u_xlat16_5.x = (u_xlatb22) ? 1.0 : u_xlat32;
    u_xlat16_5.x = (u_xlatb12) ? 0.0 : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb2.x) ? u_xlat16_5.x : vs_TEXCOORD1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(u_xlat16_5.x<_LightArea);
#else
    u_xlatb2.x = u_xlat16_5.x<_LightArea;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition));
#else
    u_xlatb12 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition);
#endif
    u_xlat16_5.x = (-u_xlat16_5.x) + _LightArea;
    u_xlat16_5.x = u_xlat16_5.x / _ShadowTransitionRange;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(u_xlat16_5.x>=1.0);
#else
    u_xlatb22 = u_xlat16_5.x>=1.0;
#endif
    u_xlat16_32 = u_xlat16_5.x + 0.00999999978;
    u_xlat16_32 = log2(u_xlat16_32);
    u_xlat32 = u_xlat16_32 * _ShadowTransitionSoftness;
    u_xlat32 = exp2(u_xlat32);
    u_xlat32 = min(u_xlat32, 1.0);
    u_xlat22.x = (u_xlatb22) ? 1.0 : u_xlat32;
    u_xlat22.x = (u_xlatb12) ? u_xlat22.x : 1.0;
    u_xlat22.x = u_xlatb2.x ? u_xlat22.x : float(0.0);
#ifdef UNITY_ADRENO_ES3
    { bool cond = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(vs_TEXCOORD4); u_xlati32 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati32 = int((vec4(0.0, 0.0, 0.0, 0.0)!=vec4(vs_TEXCOORD4)) ? 0xFFFFFFFFu : uint(0u));
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex));
#else
    u_xlatb3 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex);
#endif
    u_xlat16_13.xyz = vec3(_FirstShadowMultColor.xxyz.y + (-_CoolShadowMultColor.x), _FirstShadowMultColor.xxyz.z + (-_CoolShadowMultColor.y), float(_FirstShadowMultColor.z) + (-_CoolShadowMultColor.z));
    u_xlat13.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_13.xyz + _CoolShadowMultColor.xyz;
    u_xlat16_5.xyz = (bool(u_xlatb3)) ? u_xlat13.xyz : vec3(_FirstShadowMultColor.x, _FirstShadowMultColor.y, _FirstShadowMultColor.z);
    u_xlati3 = ~u_xlati32;
    u_xlati12 = u_xlatb12 ? u_xlati3 : int(0);
    u_xlat16_3.xyz = u_xlat16_5.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat3.xyz = u_xlat22.xxx * u_xlat16_3.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_5.xyz = (int(u_xlati12) != 0) ? u_xlat3.xyz : u_xlat16_5.xyz;
    u_xlat16_35 = dot(vs_TEXCOORD1.xyz, u_xlat0.xyz);
    u_xlat16_35 = max(u_xlat16_35, 0.00100000005);
    u_xlat16_35 = log2(u_xlat16_35);
    u_xlat16_35 = u_xlat16_35 * _Shininess;
    u_xlat16_35 = exp2(u_xlat16_35);
    u_xlat16_6.xyz = vec3(u_xlat16_35) * _SpecularColor.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(_SpecMulti);
    u_xlat16_4.xyz = vec3(u_xlat16_4.x * _EmissionColor_MHY.xxyz.y, u_xlat16_4.y * _EmissionColor_MHY.xxyz.z, u_xlat16_4.z * float(_EmissionColor_MHY.z));
    u_xlati0 = int(uint(u_xlatb2.x) * 0xffffffffu | uint(u_xlati32));
    u_xlat2.xyz = u_xlat1.xyz * u_xlat16_5.xyz;
    u_xlat0.xyz = (int(u_xlati0) != 0) ? u_xlat2.xyz : u_xlat1.xyz;
    u_xlat0.xyz = u_xlat16_6.xyz * vec3(0.5, 0.5, 0.5) + u_xlat0.xyz;
    u_xlat2.xy = vs_TEXCOORD0.zw * _FlowMap01_ST.xy + _FlowMap01_ST.zw;
    u_xlat16_5.x = _Time.y * _FlowMap01_Uspeed + u_xlat2.x;
    u_xlat16_5.y = _Time.y * _FlowMap01_Vspeed + u_xlat2.y;
    u_xlat2.xy = vs_TEXCOORD0.zw * _Noise_ST.xy + _Noise_ST.zw;
    u_xlat16_6.x = _Time.y * _Noise_Uspeed + u_xlat2.x;
    u_xlat16_6.y = _Time.y * _Noise_Vspeed + u_xlat2.y;
    u_xlat10_2 = textureLod(_Noise, u_xlat16_6.xy, 0.0).x;
    u_xlat16_25.x = _MaskOffset01 * 1.39999998 + -0.699999988;
    u_xlat16_16.x = u_xlat10_2 * _NoiseIntensity;
    u_xlat12.xy = vs_TEXCOORD0.zw * _FlowMap02_ST.xy + _FlowMap02_ST.zw;
    u_xlat16_7.x = _Time.y * _FlowMap02_Uspeed + u_xlat12.x;
    u_xlat16_7.y = _Time.y * _FlowMap02_Vspeed + u_xlat12.y;
    u_xlat16_25.y = _MaskOffset02 * 1.39999998 + -0.699999988;
    u_xlat16_8.xyz = _FlowMapColor01.xyz * vec3(_FlowScale01);
    u_xlat16_5.xy = vec2(u_xlat10_2) * vec2(vec2(_NoiseFlowIntensity, _NoiseFlowIntensity)) + u_xlat16_5.xy;
    u_xlat10_12 = textureLod(_FlowMap01, u_xlat16_5.xy, 0.0).x;
    u_xlat16_12.xyz = vec3(u_xlat10_12) * u_xlat16_8.xyz;
    u_xlat16_5.x = (-vs_TEXCOORD0.z) + 1.0;
    u_xlat16_1.xz = u_xlat16_25.xy + u_xlat16_5.xx;
    u_xlat16_1.yw = vec2(u_xlat10_2) * vec2(vec2(_NoiseIntensity, _NoiseIntensity)) + (-vs_TEXCOORD0.ww);
    u_xlat16_16.y = 1.0;
    u_xlat16_15.xy = u_xlat16_1.xy + u_xlat16_16.xy;
    u_xlat10_3 = textureLod(_Mask01, u_xlat16_15.xy, 0.0).x;
    u_xlat16_3.x = max(u_xlat10_3, 9.99999975e-05);
    u_xlat16_3.x = log2(u_xlat16_3.x);
    u_xlat16_3.x = u_xlat16_3.x * _Mask01_Power;
    u_xlat16_3.x = exp2(u_xlat16_3.x);
    u_xlat16_8.xyz = _FlowMapColor02.xyz * vec3(_FlowScale02);
    u_xlat16_15.xy = vec2(u_xlat10_2) * vec2(vec2(_NoiseFlowIntensity, _NoiseFlowIntensity)) + u_xlat16_7.xy;
    u_xlat10_2 = textureLod(_FlowMap02, u_xlat16_15.xy, 0.0).x;
    u_xlat16_13.xyz = vec3(u_xlat10_2) * u_xlat16_8.xyz;
    u_xlat16_5.xy = vec2(u_xlat16_1.z + u_xlat16_16.x, u_xlat16_1.w + u_xlat16_16.y);
    u_xlat10_2 = textureLod(_Mask02, u_xlat16_5.xy, 0.0).x;
    u_xlat16_2.x = max(u_xlat10_2, 9.99999975e-05);
    u_xlat16_2.x = log2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * _Mask02_Power;
    u_xlat16_2.x = exp2(u_xlat16_2.x);
    u_xlat16_13.xyz = u_xlat16_2.xxx * u_xlat16_13.xyz;
    u_xlat16_2.xyz = u_xlat16_12.xyz * u_xlat16_3.xxx + u_xlat16_13.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(_EmissionScaler) + u_xlat16_2.xyz;
    u_xlat3.xyz = (-u_xlat0.xyz) + u_xlat16_4.xyz;
    u_xlat3.xyz = vec3(u_xlat16_34) * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat9.xy = vs_TEXCOORD0.zw * _DissovleNoise_ST.xy + _DissovleNoise_ST.zw;
    u_xlat16_4.x = _Time.y * _DissolveNoise_Uspeed + u_xlat9.x;
    u_xlat16_4.y = _Time.y * _DissolveNoise_Vspeed + u_xlat9.y;
    u_xlat10_32 = textureLod(_DissovleNoise, u_xlat16_4.xy, 0.0).x;
    u_xlat32 = u_xlat10_32 * _DissovleNoiseScale + vs_TEXCOORD0.z;
#ifdef UNITY_ADRENO_ES3
    u_xlatb32 = !!(_Dissovle>=u_xlat32);
#else
    u_xlatb32 = _Dissovle>=u_xlat32;
#endif
    u_xlat0.xyz = (bool(u_xlatb30)) ? u_xlat3.xyz : u_xlat0.xyz;
    u_xlat0.xyz = u_xlat16_2.xyz + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(0.00999999978<u_xlat16_34);
#else
    u_xlatb30 = 0.00999999978<u_xlat16_34;
#endif
    if((int(u_xlatb32) * int(0xffffffffu))==0){discard;}
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn));
#else
    u_xlatb2.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn);
#endif
    u_xlat12.xyz = u_xlat0.xyz * vec3(vec3(_ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness));
    u_xlat3.xyz = vec3(vec3(_ES_CharacterPointLightWholeIntensity, _ES_CharacterPointLightWholeIntensity, _ES_CharacterPointLightWholeIntensity)) * mhy_CharacterPointLightColor.xyz;
    u_xlat9.xyz = _ES_CharacterMainLightColor.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat9.xyz = min(max(u_xlat9.xyz, 0.0), 1.0);
#else
    u_xlat9.xyz = clamp(u_xlat9.xyz, 0.0, 1.0);
#endif
    u_xlat33 = (-mhy_CharacterPointLightColor.w) + 1.0;
    u_xlat3.xyz = u_xlat9.xyz * vec3(u_xlat33) + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat3.xyz = vec3(vec3(_ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio)) * u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat12.xyz = u_xlat12.xyz * u_xlat3.xyz;
    u_xlat3.xyz = _ES_CharacterAmbientLightColor.xyz * vec3(_ES_CharacterAmbientLightRatio);
    u_xlat16_4.xyz = u_xlat12.xyz * vec3(10.0, 10.0, 10.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.xyz = min(max(u_xlat16_4.xyz, 0.0), 1.0);
#else
    u_xlat16_4.xyz = clamp(u_xlat16_4.xyz, 0.0, 1.0);
#endif
    u_xlat12.xyz = u_xlat3.xyz * u_xlat16_4.xyz + u_xlat12.xyz;
    u_xlat16_4.xyz = (u_xlatb2.x) ? u_xlat12.xyz : u_xlat0.xyz;
    u_xlat16_5.xyz = u_xlat0.xyz + (-u_xlat16_4.xyz);
    u_xlat16_5.xyz = vec3(u_xlat16_34) * u_xlat16_5.xyz + u_xlat16_4.xyz;
    u_xlat16_0.xyz = (bool(u_xlatb30)) ? u_xlat16_5.xyz : u_xlat16_4.xyz;
    u_xlat16_4.x = max(u_xlat16_0.z, u_xlat16_0.y);
    u_xlat16_1.w = max(u_xlat16_0.x, u_xlat16_4.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(1.0<u_xlat16_1.w);
#else
    u_xlatb2.x = 1.0<u_xlat16_1.w;
#endif
    u_xlat16_1.xyz = u_xlat16_0.xyz / u_xlat16_1.www;
    u_xlat16_0.w = 1.0;
    u_xlat16_0 = (u_xlatb2.x) ? u_xlat16_1 : u_xlat16_0;
    u_xlat16_4.x = min(u_xlat16_0.w, 1.10000002);
    u_xlat16_14 = u_xlat16_0.w + (-u_xlat16_4.x);
    u_xlat16_4.x = u_xlat16_34 * u_xlat16_14 + u_xlat16_4.x;
    u_xlat16_2.x = u_xlat16_4.x * 0.0500000007;
    SV_Target0.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb12 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_4.x = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb12) ? u_xlat16_4.x : 0.0;
    SV_Target0.w = 0.0156862754;
    SV_Target1.xyz = u_xlat16_0.xyz;
    SV_Target1.w = u_xlat16_2.x;
    SV_Target2.xy = vec2(0.0, 0.0);
    SV_Target2.w = vs_TEXCOORD4;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "MSAA_INTERPOLATION" "TOON_SPECULAR_ON" "TOON_LIGHTMAP_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	vec4 _MainTex_ST;
uniform 	float _CharacterAmbientSensorShadowOn;
uniform 	vec4 _AmbientSensorUVs;
uniform 	float _UseClipPlane;
uniform 	float _ClipPlaneWorld;
uniform 	vec4 _ClipPlane;
uniform 	vec4 mhy_AvatarLightDir;
uniform 	vec4 mhy_CharacterOverrideLightDir;
uniform lowp sampler2D _CharacterAmbientSensorTex;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp float vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD6;
vec4 u_xlat0;
bvec2 u_xlatb0;
vec4 u_xlat1;
bool u_xlatb1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump float u_xlat16_4;
float u_xlat5;
float u_xlat6;
float u_xlat7;
float u_xlat10;
bool u_xlatb10;
float u_xlat15;
bool u_xlatb15;
float u_xlat16;
bool u_xlatb16;
void main()
{
    u_xlatb0.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseClipPlane, _ClipPlaneWorld, _UseClipPlane, _UseClipPlane)).xy;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(abs(_ClipPlane.w)<0.00100000005);
#else
    u_xlatb10 = abs(_ClipPlane.w)<0.00100000005;
#endif
    u_xlat1.xyz = _ClipPlane.www * _ClipPlane.xyz;
    u_xlat1.xyz = (bool(u_xlatb10)) ? vec3(0.0, 0.0, 0.0) : u_xlat1.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_WorldToObject[1];
    u_xlat2 = hlslcc_mtx4x4unity_WorldToObject[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_WorldToObject[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_WorldToObject[3];
    u_xlat1.xyz = u_xlat1.xyz / u_xlat1.www;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * _ClipPlane.yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _ClipPlane.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _ClipPlane.zzz + u_xlat2.xyz;
    u_xlat10 = dot(u_xlat1.xyz, u_xlat2.xyz);
    u_xlat15 = dot(in_POSITION0.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(u_xlat15<u_xlat10);
#else
    u_xlatb1 = u_xlat15<u_xlat10;
#endif
    u_xlat10 = (-u_xlat10) + u_xlat15;
    u_xlat2.xyz = (-vec3(u_xlat10)) * u_xlat2.xyz + in_POSITION0.xyz;
    u_xlat2.w = 0.0;
    u_xlat3.xyz = in_POSITION0.xyz;
    u_xlat3.w = in_COLOR0.w;
    u_xlat1 = (bool(u_xlatb1)) ? u_xlat2 : u_xlat3;
    u_xlat10 = dot(in_POSITION0.xyz, _ClipPlane.xyz);
    u_xlat15 = _ClipPlane.w + -0.00999999978;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(u_xlat10<u_xlat15);
#else
    u_xlatb15 = u_xlat10<u_xlat15;
#endif
    u_xlat10 = u_xlat10 + (-_ClipPlane.w);
    u_xlat2.xyz = (-vec3(u_xlat10)) * _ClipPlane.xyz + in_POSITION0.xyz;
    u_xlat2.w = 0.0;
    u_xlat2 = (bool(u_xlatb15)) ? u_xlat2 : u_xlat3;
    u_xlat1.xyz = (u_xlatb0.y) ? u_xlat1.xyz : u_xlat2.xyz;
    u_xlat16_4 = (u_xlatb0.y) ? u_xlat1.w : u_xlat2.w;
    u_xlat1.xyz = (u_xlatb0.x) ? u_xlat1.xyz : in_POSITION0.xyz;
    vs_COLOR0.w = (u_xlatb0.x) ? u_xlat16_4 : in_COLOR0.w;
    u_xlat0.xyw = (-_WorldSpaceCameraPos.xyz) + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat2.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;
    u_xlat2.y = hlslcc_mtx4x4unity_ObjectToWorld[1].x;
    u_xlat2.z = hlslcc_mtx4x4unity_ObjectToWorld[2].x;
    u_xlat2.w = u_xlat0.x;
    u_xlat1.w = 1.0;
    u_xlat2.x = dot(u_xlat2, u_xlat1);
    u_xlat3.x = hlslcc_mtx4x4unity_ObjectToWorld[0].y;
    u_xlat3.y = hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat3.z = hlslcc_mtx4x4unity_ObjectToWorld[2].y;
    u_xlat3.w = u_xlat0.y;
    u_xlat7 = dot(u_xlat3, u_xlat1);
    u_xlat0.x = hlslcc_mtx4x4unity_ObjectToWorld[0].z;
    u_xlat0.y = hlslcc_mtx4x4unity_ObjectToWorld[1].z;
    u_xlat0.z = hlslcc_mtx4x4unity_ObjectToWorld[2].z;
    u_xlat0.x = dot(u_xlat0, u_xlat1);
    u_xlat3.x = hlslcc_mtx4x4unity_ObjectToWorld[0].w;
    u_xlat3.y = hlslcc_mtx4x4unity_ObjectToWorld[1].w;
    u_xlat3.z = hlslcc_mtx4x4unity_ObjectToWorld[2].w;
    u_xlat3.w = hlslcc_mtx4x4unity_ObjectToWorld[3].w;
    u_xlat5 = dot(u_xlat3, u_xlat1);
    u_xlat3 = vec4(u_xlat7) * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[3] * vec4(u_xlat5) + u_xlat2;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat1;
    vs_TEXCOORD3.xyz = u_xlat1.xyz / u_xlat1.www;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.xz = u_xlat0.xw * vec2(0.5, 0.5);
    u_xlat6 = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.w = u_xlat6 * 0.5;
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat1.xyz = in_NORMAL0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_NORMAL0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_NORMAL0.zzz + u_xlat1.xyz;
    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat16 = inversesqrt(u_xlat16);
    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(0.5<mhy_CharacterOverrideLightDir.w);
#else
    u_xlatb16 = 0.5<mhy_CharacterOverrideLightDir.w;
#endif
    u_xlat2.x = mhy_CharacterOverrideLightDir.x;
    u_xlat2.yz = (-mhy_CharacterOverrideLightDir.yz);
    u_xlat2.xyz = (bool(u_xlatb16)) ? u_xlat2.xyz : mhy_AvatarLightDir.xyz;
    u_xlat16_4 = dot(u_xlat1.xyz, u_xlat2.xyz);
    vs_TEXCOORD1.w = u_xlat16_4 * 0.497500002 + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_CharacterAmbientSensorShadowOn));
#else
    u_xlatb16 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_CharacterAmbientSensorShadowOn);
#endif
    if(u_xlatb16){
        u_xlat16 = textureLod(_CharacterAmbientSensorTex, _AmbientSensorUVs.xy, 0.0).x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb16 = !!(0.5<u_xlat16);
#else
        u_xlatb16 = 0.5<u_xlat16;
#endif
        vs_TEXCOORD4 = u_xlatb16 ? 1.0 : float(0.0);
    } else {
        vs_TEXCOORD4 = 0.0;
    //ENDIF
    }
    gl_Position = u_xlat0;
    vs_COLOR0.xyz = in_COLOR0.xyz;
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    vs_TEXCOORD2.zw = u_xlat0.zw;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	mediump vec4 _Color;
uniform 	float _MainTexAlphaUse;
uniform 	mediump float _MainTexAlphaCutoff;
uniform 	float _UseLightMapColorAO;
uniform 	float _UseVertexColorAO;
uniform 	mediump float _LightArea;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	float _UseCoolShadowColorOrTex;
uniform 	mediump vec3 _CoolShadowMultColor;
uniform 	float _UseShadowTransition;
uniform 	float _ShadowTransitionRange;
uniform 	float _ShadowTransitionSoftness;
uniform 	mediump vec3 _SpecularColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	float _FaceBlushStrength;
uniform 	mediump vec3 _FaceBlushColor;
uniform 	mediump float _EmissionScaler;
uniform 	mediump vec3 _EmissionColor_MHY;
uniform 	float _UseMaterial2;
uniform 	mediump vec3 _Color2;
uniform 	mediump vec3 _FirstShadowMultColor2;
uniform 	mediump vec3 _CoolShadowMultColor2;
uniform 	mediump float _Shininess2;
uniform 	mediump float _SpecMulti2;
uniform 	float _ShadowTransitionRange2;
uniform 	float _ShadowTransitionSoftness2;
uniform 	float _UseMaterial3;
uniform 	mediump vec3 _Color3;
uniform 	mediump vec3 _FirstShadowMultColor3;
uniform 	mediump vec3 _CoolShadowMultColor3;
uniform 	mediump float _Shininess3;
uniform 	mediump float _SpecMulti3;
uniform 	float _ShadowTransitionRange3;
uniform 	float _ShadowTransitionSoftness3;
uniform 	float _UseMaterial4;
uniform 	mediump vec3 _Color4;
uniform 	mediump vec3 _FirstShadowMultColor4;
uniform 	mediump vec3 _CoolShadowMultColor4;
uniform 	mediump float _Shininess4;
uniform 	mediump float _SpecMulti4;
uniform 	float _ShadowTransitionRange4;
uniform 	float _ShadowTransitionSoftness4;
uniform 	float _UseMaterial5;
uniform 	mediump vec3 _Color5;
uniform 	mediump vec3 _FirstShadowMultColor5;
uniform 	mediump vec3 _CoolShadowMultColor5;
uniform 	mediump float _Shininess5;
uniform 	mediump float _SpecMulti5;
uniform 	float _ShadowTransitionRange5;
uniform 	float _ShadowTransitionSoftness5;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _UseClipPlane;
uniform 	float _ES_CharacterAmbientLightOn;
uniform 	float _ES_CharacterAmbientBrightness;
uniform 	vec3 _ES_CharacterMainLightColor;
uniform 	vec3 _ES_CharacterAmbientLightColor;
uniform 	float _ES_CharacterMainLightRatio;
uniform 	float _ES_CharacterAmbientLightRatio;
uniform 	float _ES_CharacterColorTone;
uniform 	float _ES_CharacterPointLightWholeIntensity;
uniform 	vec4 mhy_AvatarLightDir;
uniform 	vec4 mhy_CharacterPointLightColor;
uniform 	vec4 mhy_CharacterOverrideLightDir;
uniform 	mediump vec4 _FlowMapColor01;
uniform 	mediump float _FlowScale01;
uniform 	mediump float _FlowMap01_Uspeed;
uniform 	vec4 _FlowMap01_ST;
uniform 	mediump float _FlowMap01_Vspeed;
uniform 	mediump float _Noise_Uspeed;
uniform 	vec4 _Noise_ST;
uniform 	mediump float _Noise_Vspeed;
uniform 	mediump float _NoiseFlowIntensity;
uniform 	mediump float _MaskOffset01;
uniform 	mediump float _NoiseIntensity;
uniform 	mediump float _Mask01_Power;
uniform 	mediump vec4 _FlowMapColor02;
uniform 	mediump float _FlowScale02;
uniform 	mediump float _FlowMap02_Uspeed;
uniform 	vec4 _FlowMap02_ST;
uniform 	mediump float _FlowMap02_Vspeed;
uniform 	mediump float _MaskOffset02;
uniform 	mediump float _Mask02_Power;
uniform 	mediump float _DissolveNoise_Uspeed;
uniform 	vec4 _DissovleNoise_ST;
uniform 	mediump float _DissolveNoise_Vspeed;
uniform 	mediump float _DissovleNoiseScale;
uniform 	mediump float _Dissovle;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _Noise;
uniform lowp sampler2D _FlowMap01;
uniform lowp sampler2D _Mask01;
uniform lowp sampler2D _FlowMap02;
uniform lowp sampler2D _Mask02;
uniform lowp sampler2D _DissovleNoise;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp float vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
vec3 u_xlat2;
mediump vec4 u_xlat16_2;
lowp vec4 u_xlat10_2;
bool u_xlatb2;
vec3 u_xlat3;
mediump float u_xlat16_3;
lowp float u_xlat10_3;
bvec3 u_xlatb3;
vec3 u_xlat4;
bvec4 u_xlatb4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
mediump vec3 u_xlat16_6;
bvec3 u_xlatb6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
vec3 u_xlat11;
bool u_xlatb11;
vec3 u_xlat13;
bool u_xlatb13;
float u_xlat14;
mediump vec3 u_xlat16_14;
int u_xlati14;
mediump float u_xlat16_16;
mediump vec3 u_xlat16_18;
mediump vec3 u_xlat16_19;
bvec2 u_xlatb22;
vec2 u_xlat24;
int u_xlati25;
bool u_xlatb25;
float u_xlat33;
mediump float u_xlat16_33;
lowp float u_xlat10_33;
bool u_xlatb33;
float u_xlat35;
bool u_xlatb35;
float u_xlat36;
int u_xlati36;
mediump float u_xlat16_38;
mediump float u_xlat16_40;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseClipPlane));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseClipPlane);
#endif
    u_xlat16_1.x = vs_COLOR0.w + -0.00999999978;
#ifdef UNITY_ADRENO_ES3
    u_xlatb11 = !!(u_xlat16_1.x<0.0);
#else
    u_xlatb11 = u_xlat16_1.x<0.0;
#endif
    u_xlatb0 = u_xlatb0 && u_xlatb11;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(_DitherAlpha<0.949999988);
#else
        u_xlatb0 = _DitherAlpha<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb22.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb22.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb22.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = _DitherAlpha * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + -0.00999999978;
#ifdef UNITY_ADRENO_ES3
            u_xlatb0 = !!(u_xlat0.x<0.0);
#else
            u_xlatb0 = u_xlat0.x<0.0;
#endif
            if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(0.5<mhy_CharacterOverrideLightDir.w);
#else
    u_xlatb2 = 0.5<mhy_CharacterOverrideLightDir.w;
#endif
    u_xlat3.x = mhy_CharacterOverrideLightDir.x;
    u_xlat3.yz = (-mhy_CharacterOverrideLightDir.yz);
    u_xlat2.xyz = (bool(u_xlatb2)) ? u_xlat3.xyz : mhy_AvatarLightDir.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat33) + u_xlat2.xyz;
    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat0.xyz = vec3(u_xlat33) * u_xlat0.xyz;
    u_xlat2.xy = dFdx(vs_TEXCOORD0.xy);
    u_xlat24.xy = dFdy(vs_TEXCOORD0.xy);
    u_xlat2.xy = u_xlat24.xy + u_xlat2.xy;
    u_xlat24.xy = (-u_xlat2.xy) * vec2(0.25, 0.25) + vs_TEXCOORD0.xy;
    u_xlat2.xy = u_xlat2.xy * vec2(0.25, 0.25) + vs_TEXCOORD0.xy;
    u_xlat2.xy = (int(gl_SampleID) != 0) ? u_xlat24.xy : u_xlat2.xy;
    u_xlat1 = textureLod(_MainTex, u_xlat2.xy, 0.0);
    u_xlatb3.xyz = equal(vec4(_MainTexAlphaUse), vec4(3.0, 1.0, 2.0, 0.0)).xyz;
    u_xlat33 = u_xlat1.w * _FaceBlushStrength;
    u_xlat4.xyz = (-u_xlat1.xyz) + _FaceBlushColor.xyz;
    u_xlat4.xyz = vec3(u_xlat33) * u_xlat4.xyz + u_xlat1.xyz;
    u_xlat16_5.xyz = (u_xlatb3.x) ? u_xlat4.xyz : u_xlat1.xyz;
    u_xlat16_38 = u_xlat1.w + (-_MainTexAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(u_xlat16_38<0.0);
#else
    u_xlatb33 = u_xlat16_38<0.0;
#endif
    u_xlatb33 = u_xlatb3.y && u_xlatb33;
    if((int(u_xlatb33) * int(0xffffffffu))!=0){discard;}
    u_xlat10_2 = textureLod(_LightMapTex, u_xlat2.xy, 0.0);
    u_xlatb3.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseLightMapColorAO, _UseVertexColorAO, _UseLightMapColorAO, _UseLightMapColorAO)).xy;
    u_xlat16_38 = (u_xlatb3.x) ? u_xlat10_2.y : 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseMaterial2));
#else
    u_xlatb33 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseMaterial2);
#endif
    u_xlatb4 = greaterThanEqual(u_xlat10_2.wwww, vec4(0.800000012, 0.400000006, 0.200000003, 0.600000024));
    u_xlatb33 = u_xlatb33 && u_xlatb4.x;
    u_xlat33 = (u_xlatb33) ? 2.0 : 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb13 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseMaterial3));
#else
    u_xlatb13 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseMaterial3);
#endif
    u_xlatb13 = u_xlatb4.y && u_xlatb13;
    u_xlatb6.xyz = lessThan(u_xlat10_2.wwww, vec4(0.600000024, 0.400000006, 0.800000012, 0.0)).xyz;
    u_xlatb13 = u_xlatb13 && u_xlatb6.x;
    u_xlat33 = (u_xlatb13) ? 3.0 : u_xlat33;
#ifdef UNITY_ADRENO_ES3
    u_xlatb13 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseMaterial4));
#else
    u_xlatb13 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseMaterial4);
#endif
    u_xlatb13 = u_xlatb4.z && u_xlatb13;
    u_xlatb13 = u_xlatb6.y && u_xlatb13;
    u_xlat33 = (u_xlatb13) ? 4.0 : u_xlat33;
#ifdef UNITY_ADRENO_ES3
    u_xlatb13 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseMaterial5));
#else
    u_xlatb13 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseMaterial5);
#endif
    u_xlatb13 = u_xlatb4.w && u_xlatb13;
    u_xlatb13 = u_xlatb6.z && u_xlatb13;
    u_xlat33 = (u_xlatb13) ? 5.0 : u_xlat33;
    u_xlatb4 = equal(vec4(u_xlat33), vec4(2.0, 3.0, 4.0, 5.0));
    u_xlat16_7.xyz = (u_xlatb4.x) ? _Color2.xyz : _Color.xyz;
    u_xlat16_7.xyz = (u_xlatb4.y) ? _Color3.xyz : u_xlat16_7.xyz;
    u_xlat16_7.xyz = (u_xlatb4.z) ? _Color4.xyz : u_xlat16_7.xyz;
    u_xlat16_7.xyz = (u_xlatb4.w) ? _Color5.xyz : u_xlat16_7.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_7.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb13 = !!(0.00999999978<u_xlat1.w);
#else
    u_xlatb13 = 0.00999999978<u_xlat1.w;
#endif
    u_xlatb13 = u_xlatb13 && u_xlatb3.z;
    u_xlat16_7.x = (u_xlatb13) ? u_xlat1.w : 0.0;
    u_xlat16_18.x = u_xlat16_38 * vs_COLOR0.x;
    u_xlat16_38 = (u_xlatb3.y) ? u_xlat16_18.x : u_xlat16_38;
#ifdef UNITY_ADRENO_ES3
    u_xlatb35 = !!(u_xlat16_38<0.0500000007);
#else
    u_xlatb35 = u_xlat16_38<0.0500000007;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb3.x = !!(0.949999988<u_xlat16_38);
#else
    u_xlatb3.x = 0.949999988<u_xlat16_38;
#endif
    u_xlat14 = u_xlat16_38 + vs_TEXCOORD1.w;
    u_xlat14 = u_xlat14 * 0.5;
    u_xlat16_38 = (u_xlatb3.x) ? 1.0 : u_xlat14;
    u_xlat16_38 = (u_xlatb35) ? 0.0 : u_xlat16_38;
#ifdef UNITY_ADRENO_ES3
    u_xlatb35 = !!(u_xlat16_38<_LightArea);
#else
    u_xlatb35 = u_xlat16_38<_LightArea;
#endif
    if(u_xlatb35){
#ifdef UNITY_ADRENO_ES3
        u_xlatb35 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition));
#else
        u_xlatb35 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition);
#endif
#ifdef UNITY_ADRENO_ES3
        u_xlatb3.x = !!(u_xlat33==1.0);
#else
        u_xlatb3.x = u_xlat33==1.0;
#endif
        u_xlat16_8.x = (u_xlatb3.x) ? _ShadowTransitionRange : 0.0;
        u_xlat16_8.y = (u_xlatb3.x) ? _ShadowTransitionSoftness : 0.0;
        u_xlat16_18.xy = (u_xlatb4.x) ? vec2(_ShadowTransitionRange2, _ShadowTransitionSoftness2) : u_xlat16_8.xy;
        u_xlat16_18.xy = (u_xlatb4.y) ? vec2(_ShadowTransitionRange3, _ShadowTransitionSoftness3) : u_xlat16_18.xy;
        u_xlat16_18.xy = (u_xlatb4.z) ? vec2(_ShadowTransitionRange4, _ShadowTransitionSoftness4) : u_xlat16_18.xy;
        u_xlat16_18.xy = (u_xlatb4.w) ? vec2(_ShadowTransitionRange5, _ShadowTransitionSoftness5) : u_xlat16_18.xy;
        u_xlat16_38 = (-u_xlat16_38) + _LightArea;
        u_xlat16_38 = u_xlat16_38 / u_xlat16_18.x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb3.x = !!(u_xlat16_38>=1.0);
#else
        u_xlatb3.x = u_xlat16_38>=1.0;
#endif
        u_xlat16_14.x = u_xlat16_38 + 0.00999999978;
        u_xlat16_14.x = log2(u_xlat16_14.x);
        u_xlat16_14.x = u_xlat16_14.x * u_xlat16_18.y;
        u_xlat16_14.x = exp2(u_xlat16_14.x);
        u_xlat14 = min(u_xlat16_14.x, 1.0);
        u_xlat3.x = (u_xlatb3.x) ? 1.0 : u_xlat14;
        u_xlat35 = (u_xlatb35) ? u_xlat3.x : 1.0;
        u_xlat16_38 = 0.0;
    } else {
        u_xlat35 = 0.0;
        u_xlat16_38 = 1.0;
    //ENDIF
    }
    u_xlat3.x = (-u_xlat16_38) + 1.0;
#ifdef UNITY_ADRENO_ES3
    { bool cond = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(vs_TEXCOORD4); u_xlati14 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati14 = int((vec4(0.0, 0.0, 0.0, 0.0)!=vec4(vs_TEXCOORD4)) ? 0xFFFFFFFFu : uint(0u));
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(u_xlat33==1.0);
#else
    u_xlatb33 = u_xlat33==1.0;
#endif
    if(u_xlatb33){
#ifdef UNITY_ADRENO_ES3
        u_xlatb25 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex));
#else
        u_xlatb25 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex);
#endif
        u_xlat16_6.xyz = vec3(_FirstShadowMultColor.xxyz.y + (-_CoolShadowMultColor.x), _FirstShadowMultColor.xxyz.z + (-_CoolShadowMultColor.y), float(_FirstShadowMultColor.z) + (-_CoolShadowMultColor.z));
        u_xlat6.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_6.xyz + _CoolShadowMultColor.xyz;
        u_xlat16_18.xyz = (bool(u_xlatb25)) ? u_xlat6.xyz : vec3(_FirstShadowMultColor.x, _FirstShadowMultColor.y, _FirstShadowMultColor.z);
    } else {
        if(u_xlatb4.x){
#ifdef UNITY_ADRENO_ES3
            u_xlatb25 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex));
#else
            u_xlatb25 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex);
#endif
            u_xlat16_6.xyz = _FirstShadowMultColor2.xyz + (-_CoolShadowMultColor2.xyz);
            u_xlat6.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_6.xyz + _CoolShadowMultColor2.xyz;
            u_xlat16_18.xyz = (bool(u_xlatb25)) ? u_xlat6.xyz : _FirstShadowMultColor2.xyz;
        } else {
#ifdef UNITY_ADRENO_ES3
            u_xlatb25 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex));
#else
            u_xlatb25 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex);
#endif
            u_xlat16_6.xyz = _FirstShadowMultColor3.xyz + (-_CoolShadowMultColor3.xyz);
            u_xlat6.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_6.xyz + _CoolShadowMultColor3.xyz;
            u_xlat16_8.xyz = (bool(u_xlatb25)) ? u_xlat6.xyz : _FirstShadowMultColor3.xyz;
            u_xlat16_6.xyz = _FirstShadowMultColor4.xyz + (-_CoolShadowMultColor4.xyz);
            u_xlat6.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_6.xyz + _CoolShadowMultColor4.xyz;
            u_xlat16_9.xyz = (bool(u_xlatb25)) ? u_xlat6.xyz : _FirstShadowMultColor4.xyz;
            u_xlat16_6.xyz = _FirstShadowMultColor5.xyz + (-_CoolShadowMultColor5.xyz);
            u_xlat6.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_6.xyz + _CoolShadowMultColor5.xyz;
            u_xlat16_10.xyz = (bool(u_xlatb25)) ? u_xlat6.xyz : _FirstShadowMultColor5.xyz;
            u_xlat16_9.xyz = (u_xlatb4.z) ? u_xlat16_9.xyz : u_xlat16_10.xyz;
            u_xlat16_18.xyz = (u_xlatb4.y) ? u_xlat16_8.xyz : u_xlat16_9.xyz;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb25 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition));
#else
    u_xlatb25 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition);
#endif
    u_xlati36 = ~u_xlati14;
    u_xlati25 = u_xlatb25 ? u_xlati36 : int(0);
    u_xlat16_6.xyz = u_xlat16_18.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat6.xyz = vec3(u_xlat35) * u_xlat16_6.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_18.xyz = (int(u_xlati25) != 0) ? u_xlat6.xyz : u_xlat16_18.xyz;
    u_xlat16_38 = (u_xlatb4.z) ? _Shininess4 : _Shininess5;
    u_xlat16_8.x = (u_xlatb4.z) ? _SpecMulti4 : _SpecMulti5;
    u_xlat16_38 = (u_xlatb4.y) ? _Shininess3 : u_xlat16_38;
    u_xlat16_8.x = (u_xlatb4.y) ? _SpecMulti3 : u_xlat16_8.x;
    u_xlat16_38 = (u_xlatb4.x) ? _Shininess2 : u_xlat16_38;
    u_xlat16_8.x = (u_xlatb4.x) ? _SpecMulti2 : u_xlat16_8.x;
    u_xlat16_38 = (u_xlatb33) ? _Shininess : u_xlat16_38;
    u_xlat16_8.x = (u_xlatb33) ? _SpecMulti : u_xlat16_8.x;
    u_xlat16_19.x = dot(vs_TEXCOORD1.xyz, u_xlat0.xyz);
    u_xlat16_19.x = max(u_xlat16_19.x, 0.00100000005);
    u_xlat16_19.x = log2(u_xlat16_19.x);
    u_xlat16_38 = u_xlat16_38 * u_xlat16_19.x;
    u_xlat16_38 = exp2(u_xlat16_38);
    u_xlat0.x = (-u_xlat10_2.z) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat0.x<u_xlat16_38);
#else
    u_xlatb0 = u_xlat0.x<u_xlat16_38;
#endif
    u_xlat16_8.xyz = u_xlat16_8.xxx * _SpecularColor.xyz;
    u_xlat16_8.xyz = u_xlat10_2.xxx * u_xlat16_8.xyz;
    u_xlat16_8.xyz = (bool(u_xlatb0)) ? u_xlat16_8.xyz : vec3(0.0, 0.0, 0.0);
    u_xlat16_5.xyz = vec3(u_xlat16_5.x * _EmissionColor_MHY.xxyz.y, u_xlat16_5.y * _EmissionColor_MHY.xxyz.z, u_xlat16_5.z * float(_EmissionColor_MHY.z));
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat3.x==1.0);
#else
    u_xlatb0 = u_xlat3.x==1.0;
#endif
    u_xlati0 = int(uint(u_xlatb0) * 0xffffffffu | uint(u_xlati14));
    u_xlat11.xyz = u_xlat1.xyz * u_xlat16_18.xyz;
    u_xlat0.xyz = (int(u_xlati0) != 0) ? u_xlat11.xyz : u_xlat1.xyz;
    u_xlat0.xyz = u_xlat16_8.xyz + u_xlat0.xyz;
    u_xlat2.xz = vs_TEXCOORD0.zw * _FlowMap01_ST.xy + _FlowMap01_ST.zw;
    u_xlat16_8.x = _Time.y * _FlowMap01_Uspeed + u_xlat2.x;
    u_xlat16_8.y = _Time.y * _FlowMap01_Vspeed + u_xlat2.z;
    u_xlat2.xz = vs_TEXCOORD0.zw * _Noise_ST.xy + _Noise_ST.zw;
    u_xlat16_9.x = _Time.y * _Noise_Uspeed + u_xlat2.x;
    u_xlat16_9.y = _Time.y * _Noise_Vspeed + u_xlat2.z;
    u_xlat10_33 = textureLod(_Noise, u_xlat16_9.xy, 0.0).x;
    u_xlat16_38 = _MaskOffset01 * 1.39999998 + -0.699999988;
    u_xlat16_18.x = u_xlat10_33 * _NoiseIntensity;
    u_xlat2.xz = vs_TEXCOORD0.zw * _FlowMap02_ST.xy + _FlowMap02_ST.zw;
    u_xlat16_9.x = _Time.y * _FlowMap02_Uspeed + u_xlat2.x;
    u_xlat16_9.y = _Time.y * _FlowMap02_Vspeed + u_xlat2.z;
    u_xlat16_40 = _MaskOffset02 * 1.39999998 + -0.699999988;
    u_xlat16_10.xyz = _FlowMapColor01.xyz * vec3(_FlowScale01);
    u_xlat16_8.xy = vec2(u_xlat10_33) * vec2(vec2(_NoiseFlowIntensity, _NoiseFlowIntensity)) + u_xlat16_8.xy;
    u_xlat10_2.x = textureLod(_FlowMap01, u_xlat16_8.xy, 0.0).x;
    u_xlat16_2.xzw = u_xlat10_2.xxx * u_xlat16_10.xyz;
    u_xlat16_8.x = (-vs_TEXCOORD0.z) + 1.0;
    u_xlat16_1.x = u_xlat16_38 + u_xlat16_8.x;
    u_xlat16_1.yw = vec2(u_xlat10_33) * vec2(vec2(_NoiseIntensity, _NoiseIntensity)) + (-vs_TEXCOORD0.ww);
    u_xlat16_18.y = 1.0;
    u_xlat16_19.xy = u_xlat16_1.xy + u_xlat16_18.xy;
    u_xlat10_3 = textureLod(_Mask01, u_xlat16_19.xy, 0.0).x;
    u_xlat16_3 = max(u_xlat10_3, 9.99999975e-05);
    u_xlat16_3 = log2(u_xlat16_3);
    u_xlat16_3 = u_xlat16_3 * _Mask01_Power;
    u_xlat16_3 = exp2(u_xlat16_3);
    u_xlat16_19.xyz = _FlowMapColor02.xyz * vec3(_FlowScale02);
    u_xlat16_9.xy = vec2(u_xlat10_33) * vec2(vec2(_NoiseFlowIntensity, _NoiseFlowIntensity)) + u_xlat16_9.xy;
    u_xlat10_33 = textureLod(_FlowMap02, u_xlat16_9.xy, 0.0).x;
    u_xlat16_14.xyz = vec3(u_xlat10_33) * u_xlat16_19.xyz;
    u_xlat16_1.z = u_xlat16_40 + u_xlat16_8.x;
    u_xlat16_18.xy = vec2(u_xlat16_1.z + u_xlat16_18.x, u_xlat16_1.w + u_xlat16_18.y);
    u_xlat10_33 = textureLod(_Mask02, u_xlat16_18.xy, 0.0).x;
    u_xlat16_33 = max(u_xlat10_33, 9.99999975e-05);
    u_xlat16_33 = log2(u_xlat16_33);
    u_xlat16_33 = u_xlat16_33 * _Mask02_Power;
    u_xlat16_33 = exp2(u_xlat16_33);
    u_xlat16_14.xyz = vec3(u_xlat16_33) * u_xlat16_14.xyz;
    u_xlat16_2.xzw = u_xlat16_2.xzw * vec3(u_xlat16_3) + u_xlat16_14.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(_EmissionScaler) + u_xlat16_2.xzw;
    u_xlat3.xyz = (-u_xlat0.xyz) + u_xlat16_5.xyz;
    u_xlat3.xyz = u_xlat16_7.xxx * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat4.xy = vs_TEXCOORD0.zw * _DissovleNoise_ST.xy + _DissovleNoise_ST.zw;
    u_xlat16_5.x = _Time.y * _DissolveNoise_Uspeed + u_xlat4.x;
    u_xlat16_5.y = _Time.y * _DissolveNoise_Vspeed + u_xlat4.y;
    u_xlat10_33 = textureLod(_DissovleNoise, u_xlat16_5.xy, 0.0).x;
    u_xlat33 = u_xlat10_33 * _DissovleNoiseScale + vs_TEXCOORD0.z;
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(_Dissovle>=u_xlat33);
#else
    u_xlatb33 = _Dissovle>=u_xlat33;
#endif
    u_xlat0.xyz = (bool(u_xlatb13)) ? u_xlat3.xyz : u_xlat0.xyz;
    u_xlat0.xyz = u_xlat16_2.xzw + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(0.00999999978<u_xlat16_7.x);
#else
    u_xlatb2 = 0.00999999978<u_xlat16_7.x;
#endif
    if((int(u_xlatb33) * int(0xffffffffu))==0){discard;}
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn));
#else
    u_xlatb33 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn);
#endif
    u_xlat13.xyz = u_xlat0.xyz * vec3(vec3(_ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness));
    u_xlat3.xyz = vec3(vec3(_ES_CharacterPointLightWholeIntensity, _ES_CharacterPointLightWholeIntensity, _ES_CharacterPointLightWholeIntensity)) * mhy_CharacterPointLightColor.xyz;
    u_xlat4.xyz = _ES_CharacterMainLightColor.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.xyz = min(max(u_xlat4.xyz, 0.0), 1.0);
#else
    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
#endif
    u_xlat36 = (-mhy_CharacterPointLightColor.w) + 1.0;
    u_xlat3.xyz = u_xlat4.xyz * vec3(u_xlat36) + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat3.xyz = vec3(vec3(_ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio)) * u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat13.xyz = u_xlat13.xyz * u_xlat3.xyz;
    u_xlat3.xyz = _ES_CharacterAmbientLightColor.xyz * vec3(_ES_CharacterAmbientLightRatio);
    u_xlat16_5.xyz = u_xlat13.xyz * vec3(10.0, 10.0, 10.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.xyz = min(max(u_xlat16_5.xyz, 0.0), 1.0);
#else
    u_xlat16_5.xyz = clamp(u_xlat16_5.xyz, 0.0, 1.0);
#endif
    u_xlat13.xyz = u_xlat3.xyz * u_xlat16_5.xyz + u_xlat13.xyz;
    u_xlat16_5.xyz = (bool(u_xlatb33)) ? u_xlat13.xyz : u_xlat0.xyz;
    u_xlat16_18.xyz = u_xlat0.xyz + (-u_xlat16_5.xyz);
    u_xlat16_18.xyz = u_xlat16_7.xxx * u_xlat16_18.xyz + u_xlat16_5.xyz;
    u_xlat16_0.xyz = (bool(u_xlatb2)) ? u_xlat16_18.xyz : u_xlat16_5.xyz;
    u_xlat16_5.x = max(u_xlat16_0.z, u_xlat16_0.y);
    u_xlat16_1.w = max(u_xlat16_0.x, u_xlat16_5.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(1.0<u_xlat16_1.w);
#else
    u_xlatb2 = 1.0<u_xlat16_1.w;
#endif
    u_xlat16_1.xyz = u_xlat16_0.xyz / u_xlat16_1.www;
    u_xlat16_0.w = 1.0;
    u_xlat16_0 = (bool(u_xlatb2)) ? u_xlat16_1 : u_xlat16_0;
    u_xlat16_5.x = min(u_xlat16_0.w, 1.10000002);
    u_xlat16_16 = u_xlat16_0.w + (-u_xlat16_5.x);
    u_xlat16_5.x = u_xlat16_7.x * u_xlat16_16 + u_xlat16_5.x;
    u_xlat16_2.x = u_xlat16_5.x * 0.0500000007;
    SV_Target0.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb13 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb13 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_5.x = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb13) ? u_xlat16_5.x : 0.0;
    SV_Target0.w = 0.0156862754;
    SV_Target1.xyz = u_xlat16_0.xyz;
    SV_Target1.w = u_xlat16_2.x;
    SV_Target2.xy = vec2(0.0, 0.0);
    SV_Target2.w = vs_TEXCOORD4;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MSAA_INTERPOLATION" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _MainTex_ST;
uniform 	float _CharacterAmbientSensorShadowOn;
uniform 	vec4 _AmbientSensorUVs;
uniform 	float _UseClipPlane;
uniform 	float _ClipPlaneWorld;
uniform 	vec4 _ClipPlane;
uniform 	vec4 mhy_AvatarLightDir;
uniform 	vec4 mhy_CharacterOverrideLightDir;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
struct unity_Builtins1Array_Type {
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw1 {
	unity_Builtins1Array_Type unity_Builtins1Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform lowp sampler2D _CharacterAmbientSensorTex;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp float vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD6;
flat out highp uint vs_SV_InstanceID0;
vec3 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump float u_xlat16_4;
vec3 u_xlat5;
int u_xlati5;
bool u_xlatb5;
float u_xlat6;
mediump float u_xlat16_9;
float u_xlat10;
bool u_xlatb10;
bool u_xlatb11;
float u_xlat15;
bool u_xlatb15;
float u_xlat16;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
#ifdef UNITY_ADRENO_ES3
    u_xlatb5 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseClipPlane));
#else
    u_xlatb5 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseClipPlane);
#endif
    if(u_xlatb5){
#ifdef UNITY_ADRENO_ES3
        u_xlatb5 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ClipPlaneWorld));
#else
        u_xlatb5 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ClipPlaneWorld);
#endif
        if(u_xlatb5){
            u_xlati5 = u_xlati0 << 2;
#ifdef UNITY_ADRENO_ES3
            u_xlatb10 = !!(abs(_ClipPlane.w)<0.00100000005);
#else
            u_xlatb10 = abs(_ClipPlane.w)<0.00100000005;
#endif
            u_xlat1.xyz = _ClipPlane.www * _ClipPlane.xyz;
            u_xlat1.xyz = (bool(u_xlatb10)) ? vec3(0.0, 0.0, 0.0) : u_xlat1.xyz;
            u_xlat2 = u_xlat1.yyyy * unity_Builtins1Array[u_xlati5 / 4].hlslcc_mtx4x4unity_WorldToObjectArray[1];
            u_xlat2 = unity_Builtins1Array[u_xlati5 / 4].hlslcc_mtx4x4unity_WorldToObjectArray[0] * u_xlat1.xxxx + u_xlat2;
            u_xlat1 = unity_Builtins1Array[u_xlati5 / 4].hlslcc_mtx4x4unity_WorldToObjectArray[2] * u_xlat1.zzzz + u_xlat2;
            u_xlat1 = u_xlat1 + unity_Builtins1Array[u_xlati5 / 4].hlslcc_mtx4x4unity_WorldToObjectArray[3];
            u_xlat1.xyz = u_xlat1.xyz / u_xlat1.www;
            u_xlat2.xyz = _ClipPlane.yyy * unity_Builtins1Array[u_xlati5 / 4].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz;
            u_xlat2.xyz = unity_Builtins1Array[u_xlati5 / 4].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz * _ClipPlane.xxx + u_xlat2.xyz;
            u_xlat5.xyz = unity_Builtins1Array[u_xlati5 / 4].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz * _ClipPlane.zzz + u_xlat2.xyz;
            u_xlat1.x = dot(u_xlat1.xyz, u_xlat5.xyz);
            u_xlat6 = dot(in_POSITION0.xyz, u_xlat5.xyz);
#ifdef UNITY_ADRENO_ES3
            u_xlatb11 = !!(u_xlat6<u_xlat1.x);
#else
            u_xlatb11 = u_xlat6<u_xlat1.x;
#endif
            u_xlat1.x = (-u_xlat1.x) + u_xlat6;
            u_xlat2.xyz = (-u_xlat1.xxx) * u_xlat5.xyz + in_POSITION0.xyz;
            u_xlat2.w = 0.0;
            u_xlat3.xyz = in_POSITION0.xyz;
            u_xlat3.w = in_COLOR0.w;
            u_xlat1 = (bool(u_xlatb11)) ? u_xlat2 : u_xlat3;
            u_xlat16_4 = u_xlat1.w;
        } else {
            u_xlat5.x = dot(in_POSITION0.xyz, _ClipPlane.xyz);
            u_xlat10 = _ClipPlane.w + -0.00999999978;
#ifdef UNITY_ADRENO_ES3
            u_xlatb10 = !!(u_xlat5.x<u_xlat10);
#else
            u_xlatb10 = u_xlat5.x<u_xlat10;
#endif
            u_xlat5.x = u_xlat5.x + (-_ClipPlane.w);
            u_xlat2.xyz = (-u_xlat5.xxx) * _ClipPlane.xyz + in_POSITION0.xyz;
            u_xlat2.w = 0.0;
            u_xlat3.xyz = in_POSITION0.xyz;
            u_xlat3.w = in_COLOR0.w;
            u_xlat1 = (bool(u_xlatb10)) ? u_xlat2 : u_xlat3;
            u_xlat16_4 = u_xlat1.w;
        //ENDIF
        }
    } else {
        u_xlat1.xyz = in_POSITION0.xyz;
        u_xlat16_4 = in_COLOR0.w;
    //ENDIF
    }
    u_xlati0 = u_xlati0 << 2;
    u_xlat2.xyw = (-_WorldSpaceCameraPos.xyz) + unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat3.x = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].x;
    u_xlat3.y = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].x;
    u_xlat3.z = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].x;
    u_xlat3.w = u_xlat2.x;
    u_xlat1.w = 1.0;
    u_xlat5.x = dot(u_xlat3, u_xlat1);
    u_xlat3.x = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].y;
    u_xlat3.y = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].y;
    u_xlat3.z = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].y;
    u_xlat3.w = u_xlat2.y;
    u_xlat10 = dot(u_xlat3, u_xlat1);
    u_xlat2.x = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].z;
    u_xlat2.y = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].z;
    u_xlat2.z = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].z;
    u_xlat15 = dot(u_xlat2, u_xlat1);
    u_xlat2.x = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].w;
    u_xlat2.y = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].w;
    u_xlat2.z = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].w;
    u_xlat2.w = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3].w;
    u_xlat16 = dot(u_xlat2, u_xlat1);
    u_xlat2 = vec4(u_xlat10) * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat5.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVPZero[2] * vec4(u_xlat15) + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVPZero[3] * vec4(u_xlat16) + u_xlat2;
    u_xlat3 = u_xlat1.yyyy * unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat3 = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * u_xlat1.xxxx + u_xlat3;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * u_xlat1.zzzz + u_xlat3;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3] * in_POSITION0.wwww + u_xlat1;
    vs_TEXCOORD3.xyz = u_xlat1.xyz / u_xlat1.www;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.xz = u_xlat2.xw * vec2(0.5, 0.5);
    u_xlat5.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat1.w = u_xlat5.x * 0.5;
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat5.xyz = in_NORMAL0.yyy * unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat5.xyz = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_NORMAL0.xxx + u_xlat5.xyz;
    u_xlat0.xyz = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_NORMAL0.zzz + u_xlat5.xyz;
    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(0.5<mhy_CharacterOverrideLightDir.w);
#else
    u_xlatb15 = 0.5<mhy_CharacterOverrideLightDir.w;
#endif
    u_xlat1.x = mhy_CharacterOverrideLightDir.x;
    u_xlat1.yz = (-mhy_CharacterOverrideLightDir.yz);
    u_xlat1.xyz = (bool(u_xlatb15)) ? u_xlat1.xyz : mhy_AvatarLightDir.xyz;
    u_xlat16_9 = dot(u_xlat0.xyz, u_xlat1.xyz);
    vs_TEXCOORD1.w = u_xlat16_9 * 0.497500002 + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_CharacterAmbientSensorShadowOn));
#else
    u_xlatb15 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_CharacterAmbientSensorShadowOn);
#endif
    if(u_xlatb15){
        u_xlat15 = textureLod(_CharacterAmbientSensorTex, _AmbientSensorUVs.xy, 0.0).x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb15 = !!(0.5<u_xlat15);
#else
        u_xlatb15 = 0.5<u_xlat15;
#endif
        vs_TEXCOORD4 = u_xlatb15 ? 1.0 : float(0.0);
    } else {
        vs_TEXCOORD4 = 0.0;
    //ENDIF
    }
    gl_Position = u_xlat2;
    vs_COLOR0.xyz = in_COLOR0.xyz;
    vs_COLOR0.w = u_xlat16_4;
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    vs_TEXCOORD2.zw = u_xlat2.zw;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	mediump vec4 _Color;
uniform 	float _MainTexAlphaUse;
uniform 	mediump float _MainTexAlphaCutoff;
uniform 	float _UseVertexColorAO;
uniform 	mediump float _LightArea;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	float _UseCoolShadowColorOrTex;
uniform 	mediump vec3 _CoolShadowMultColor;
uniform 	float _UseShadowTransition;
uniform 	float _ShadowTransitionRange;
uniform 	float _ShadowTransitionSoftness;
uniform 	mediump vec3 _SpecularColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	float _FaceBlushStrength;
uniform 	mediump vec3 _FaceBlushColor;
uniform 	mediump float _EmissionScaler;
uniform 	mediump vec3 _EmissionColor_MHY;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _UseClipPlane;
uniform 	float _ES_CharacterAmbientLightOn;
uniform 	float _ES_CharacterAmbientBrightness;
uniform 	vec3 _ES_CharacterMainLightColor;
uniform 	vec3 _ES_CharacterAmbientLightColor;
uniform 	float _ES_CharacterMainLightRatio;
uniform 	float _ES_CharacterAmbientLightRatio;
uniform 	float _ES_CharacterColorTone;
uniform 	float _ES_CharacterPointLightWholeIntensity;
uniform 	vec4 mhy_AvatarLightDir;
uniform 	vec4 mhy_CharacterPointLightColor;
uniform 	vec4 mhy_CharacterOverrideLightDir;
uniform 	mediump vec4 _FlowMapColor01;
uniform 	mediump float _FlowScale01;
uniform 	mediump float _FlowMap01_Uspeed;
uniform 	vec4 _FlowMap01_ST;
uniform 	mediump float _FlowMap01_Vspeed;
uniform 	mediump float _Noise_Uspeed;
uniform 	vec4 _Noise_ST;
uniform 	mediump float _Noise_Vspeed;
uniform 	mediump float _NoiseFlowIntensity;
uniform 	mediump float _MaskOffset01;
uniform 	mediump float _NoiseIntensity;
uniform 	mediump float _Mask01_Power;
uniform 	mediump vec4 _FlowMapColor02;
uniform 	mediump float _FlowScale02;
uniform 	mediump float _FlowMap02_Uspeed;
uniform 	vec4 _FlowMap02_ST;
uniform 	mediump float _FlowMap02_Vspeed;
uniform 	mediump float _MaskOffset02;
uniform 	mediump float _Mask02_Power;
uniform 	mediump float _DissolveNoise_Uspeed;
uniform 	vec4 _DissovleNoise_ST;
uniform 	mediump float _DissolveNoise_Vspeed;
uniform 	mediump float _DissovleNoiseScale;
uniform 	mediump float _Dissovle;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _Noise;
uniform lowp sampler2D _FlowMap01;
uniform lowp sampler2D _Mask01;
uniform lowp sampler2D _FlowMap02;
uniform lowp sampler2D _Mask02;
uniform lowp sampler2D _DissovleNoise;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp float vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
lowp float u_xlat10_2;
bvec3 u_xlatb2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
lowp float u_xlat10_3;
int u_xlati3;
bool u_xlatb3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec2 u_xlat16_7;
mediump vec3 u_xlat16_8;
vec3 u_xlat9;
bool u_xlatb10;
vec3 u_xlat12;
mediump vec3 u_xlat16_12;
lowp float u_xlat10_12;
int u_xlati12;
bool u_xlatb12;
vec3 u_xlat13;
mediump vec3 u_xlat16_13;
mediump float u_xlat16_14;
mediump vec2 u_xlat16_15;
mediump vec2 u_xlat16_16;
bvec2 u_xlatb20;
vec2 u_xlat22;
bool u_xlatb22;
mediump vec2 u_xlat16_25;
float u_xlat30;
bool u_xlatb30;
float u_xlat32;
mediump float u_xlat16_32;
lowp float u_xlat10_32;
int u_xlati32;
bool u_xlatb32;
float u_xlat33;
mediump float u_xlat16_34;
mediump float u_xlat16_35;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseClipPlane));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseClipPlane);
#endif
    u_xlat16_1.x = vs_COLOR0.w + -0.00999999978;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(u_xlat16_1.x<0.0);
#else
    u_xlatb10 = u_xlat16_1.x<0.0;
#endif
    u_xlatb0 = u_xlatb0 && u_xlatb10;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(_DitherAlpha<0.949999988);
#else
        u_xlatb0 = _DitherAlpha<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb20.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb20.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb20.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = _DitherAlpha * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + -0.00999999978;
#ifdef UNITY_ADRENO_ES3
            u_xlatb0 = !!(u_xlat0.x<0.0);
#else
            u_xlatb0 = u_xlat0.x<0.0;
#endif
            if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(0.5<mhy_CharacterOverrideLightDir.w);
#else
    u_xlatb2.x = 0.5<mhy_CharacterOverrideLightDir.w;
#endif
    u_xlat3.x = mhy_CharacterOverrideLightDir.x;
    u_xlat3.yz = (-mhy_CharacterOverrideLightDir.yz);
    u_xlat2.xyz = (u_xlatb2.x) ? u_xlat3.xyz : mhy_AvatarLightDir.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat30) + u_xlat2.xyz;
    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
    u_xlat2.xy = dFdx(vs_TEXCOORD0.xy);
    u_xlat22.xy = dFdy(vs_TEXCOORD0.xy);
    u_xlat2.xy = u_xlat22.xy + u_xlat2.xy;
    u_xlat22.xy = (-u_xlat2.xy) * vec2(0.25, 0.25) + vs_TEXCOORD0.xy;
    u_xlat2.xy = u_xlat2.xy * vec2(0.25, 0.25) + vs_TEXCOORD0.xy;
    u_xlat2.xy = (int(gl_SampleID) != 0) ? u_xlat22.xy : u_xlat2.xy;
    u_xlat1 = textureLod(_MainTex, u_xlat2.xy, 0.0);
    u_xlatb2.xyz = equal(vec4(_MainTexAlphaUse), vec4(3.0, 1.0, 2.0, 0.0)).xyz;
    u_xlat30 = u_xlat1.w * _FaceBlushStrength;
    u_xlat3.xyz = (-u_xlat1.xyz) + _FaceBlushColor.xyz;
    u_xlat3.xyz = vec3(u_xlat30) * u_xlat3.xyz + u_xlat1.xyz;
    u_xlat16_4.xyz = (u_xlatb2.x) ? u_xlat3.xyz : u_xlat1.xyz;
    u_xlat16_34 = u_xlat1.w + (-_MainTexAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(u_xlat16_34<0.0);
#else
    u_xlatb30 = u_xlat16_34<0.0;
#endif
    u_xlatb30 = u_xlatb2.y && u_xlatb30;
    if((int(u_xlatb30) * int(0xffffffffu))!=0){discard;}
    u_xlat16_4.xyz = u_xlat16_4.xyz * _Color.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(0.00999999978<u_xlat1.w);
#else
    u_xlatb30 = 0.00999999978<u_xlat1.w;
#endif
    u_xlatb30 = u_xlatb30 && u_xlatb2.z;
    u_xlat16_34 = (u_xlatb30) ? u_xlat1.w : 0.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorAO));
#else
    u_xlatb2.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorAO);
#endif
    u_xlat16_5.x = vs_COLOR0.x * 0.5;
    u_xlat16_5.x = (u_xlatb2.x) ? u_xlat16_5.x : 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat16_5.x<0.0500000007);
#else
    u_xlatb12 = u_xlat16_5.x<0.0500000007;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(0.949999988<u_xlat16_5.x);
#else
    u_xlatb22 = 0.949999988<u_xlat16_5.x;
#endif
    u_xlat32 = u_xlat16_5.x + vs_TEXCOORD1.w;
    u_xlat32 = u_xlat32 * 0.5;
    u_xlat16_5.x = (u_xlatb22) ? 1.0 : u_xlat32;
    u_xlat16_5.x = (u_xlatb12) ? 0.0 : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb2.x) ? u_xlat16_5.x : vs_TEXCOORD1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(u_xlat16_5.x<_LightArea);
#else
    u_xlatb2.x = u_xlat16_5.x<_LightArea;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition));
#else
    u_xlatb12 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition);
#endif
    u_xlat16_5.x = (-u_xlat16_5.x) + _LightArea;
    u_xlat16_5.x = u_xlat16_5.x / _ShadowTransitionRange;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(u_xlat16_5.x>=1.0);
#else
    u_xlatb22 = u_xlat16_5.x>=1.0;
#endif
    u_xlat16_32 = u_xlat16_5.x + 0.00999999978;
    u_xlat16_32 = log2(u_xlat16_32);
    u_xlat32 = u_xlat16_32 * _ShadowTransitionSoftness;
    u_xlat32 = exp2(u_xlat32);
    u_xlat32 = min(u_xlat32, 1.0);
    u_xlat22.x = (u_xlatb22) ? 1.0 : u_xlat32;
    u_xlat22.x = (u_xlatb12) ? u_xlat22.x : 1.0;
    u_xlat22.x = u_xlatb2.x ? u_xlat22.x : float(0.0);
#ifdef UNITY_ADRENO_ES3
    { bool cond = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(vs_TEXCOORD4); u_xlati32 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati32 = int((vec4(0.0, 0.0, 0.0, 0.0)!=vec4(vs_TEXCOORD4)) ? 0xFFFFFFFFu : uint(0u));
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex));
#else
    u_xlatb3 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex);
#endif
    u_xlat16_13.xyz = vec3(_FirstShadowMultColor.xxyz.y + (-_CoolShadowMultColor.x), _FirstShadowMultColor.xxyz.z + (-_CoolShadowMultColor.y), float(_FirstShadowMultColor.z) + (-_CoolShadowMultColor.z));
    u_xlat13.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_13.xyz + _CoolShadowMultColor.xyz;
    u_xlat16_5.xyz = (bool(u_xlatb3)) ? u_xlat13.xyz : vec3(_FirstShadowMultColor.x, _FirstShadowMultColor.y, _FirstShadowMultColor.z);
    u_xlati3 = ~u_xlati32;
    u_xlati12 = u_xlatb12 ? u_xlati3 : int(0);
    u_xlat16_3.xyz = u_xlat16_5.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat3.xyz = u_xlat22.xxx * u_xlat16_3.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_5.xyz = (int(u_xlati12) != 0) ? u_xlat3.xyz : u_xlat16_5.xyz;
    u_xlat16_35 = dot(vs_TEXCOORD1.xyz, u_xlat0.xyz);
    u_xlat16_35 = max(u_xlat16_35, 0.00100000005);
    u_xlat16_35 = log2(u_xlat16_35);
    u_xlat16_35 = u_xlat16_35 * _Shininess;
    u_xlat16_35 = exp2(u_xlat16_35);
    u_xlat16_6.xyz = vec3(u_xlat16_35) * _SpecularColor.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(_SpecMulti);
    u_xlat16_4.xyz = vec3(u_xlat16_4.x * _EmissionColor_MHY.xxyz.y, u_xlat16_4.y * _EmissionColor_MHY.xxyz.z, u_xlat16_4.z * float(_EmissionColor_MHY.z));
    u_xlati0 = int(uint(u_xlatb2.x) * 0xffffffffu | uint(u_xlati32));
    u_xlat2.xyz = u_xlat1.xyz * u_xlat16_5.xyz;
    u_xlat0.xyz = (int(u_xlati0) != 0) ? u_xlat2.xyz : u_xlat1.xyz;
    u_xlat0.xyz = u_xlat16_6.xyz * vec3(0.5, 0.5, 0.5) + u_xlat0.xyz;
    u_xlat2.xy = vs_TEXCOORD0.zw * _FlowMap01_ST.xy + _FlowMap01_ST.zw;
    u_xlat16_5.x = _Time.y * _FlowMap01_Uspeed + u_xlat2.x;
    u_xlat16_5.y = _Time.y * _FlowMap01_Vspeed + u_xlat2.y;
    u_xlat2.xy = vs_TEXCOORD0.zw * _Noise_ST.xy + _Noise_ST.zw;
    u_xlat16_6.x = _Time.y * _Noise_Uspeed + u_xlat2.x;
    u_xlat16_6.y = _Time.y * _Noise_Vspeed + u_xlat2.y;
    u_xlat10_2 = textureLod(_Noise, u_xlat16_6.xy, 0.0).x;
    u_xlat16_25.x = _MaskOffset01 * 1.39999998 + -0.699999988;
    u_xlat16_16.x = u_xlat10_2 * _NoiseIntensity;
    u_xlat12.xy = vs_TEXCOORD0.zw * _FlowMap02_ST.xy + _FlowMap02_ST.zw;
    u_xlat16_7.x = _Time.y * _FlowMap02_Uspeed + u_xlat12.x;
    u_xlat16_7.y = _Time.y * _FlowMap02_Vspeed + u_xlat12.y;
    u_xlat16_25.y = _MaskOffset02 * 1.39999998 + -0.699999988;
    u_xlat16_8.xyz = _FlowMapColor01.xyz * vec3(_FlowScale01);
    u_xlat16_5.xy = vec2(u_xlat10_2) * vec2(vec2(_NoiseFlowIntensity, _NoiseFlowIntensity)) + u_xlat16_5.xy;
    u_xlat10_12 = textureLod(_FlowMap01, u_xlat16_5.xy, 0.0).x;
    u_xlat16_12.xyz = vec3(u_xlat10_12) * u_xlat16_8.xyz;
    u_xlat16_5.x = (-vs_TEXCOORD0.z) + 1.0;
    u_xlat16_1.xz = u_xlat16_25.xy + u_xlat16_5.xx;
    u_xlat16_1.yw = vec2(u_xlat10_2) * vec2(vec2(_NoiseIntensity, _NoiseIntensity)) + (-vs_TEXCOORD0.ww);
    u_xlat16_16.y = 1.0;
    u_xlat16_15.xy = u_xlat16_1.xy + u_xlat16_16.xy;
    u_xlat10_3 = textureLod(_Mask01, u_xlat16_15.xy, 0.0).x;
    u_xlat16_3.x = max(u_xlat10_3, 9.99999975e-05);
    u_xlat16_3.x = log2(u_xlat16_3.x);
    u_xlat16_3.x = u_xlat16_3.x * _Mask01_Power;
    u_xlat16_3.x = exp2(u_xlat16_3.x);
    u_xlat16_8.xyz = _FlowMapColor02.xyz * vec3(_FlowScale02);
    u_xlat16_15.xy = vec2(u_xlat10_2) * vec2(vec2(_NoiseFlowIntensity, _NoiseFlowIntensity)) + u_xlat16_7.xy;
    u_xlat10_2 = textureLod(_FlowMap02, u_xlat16_15.xy, 0.0).x;
    u_xlat16_13.xyz = vec3(u_xlat10_2) * u_xlat16_8.xyz;
    u_xlat16_5.xy = vec2(u_xlat16_1.z + u_xlat16_16.x, u_xlat16_1.w + u_xlat16_16.y);
    u_xlat10_2 = textureLod(_Mask02, u_xlat16_5.xy, 0.0).x;
    u_xlat16_2.x = max(u_xlat10_2, 9.99999975e-05);
    u_xlat16_2.x = log2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * _Mask02_Power;
    u_xlat16_2.x = exp2(u_xlat16_2.x);
    u_xlat16_13.xyz = u_xlat16_2.xxx * u_xlat16_13.xyz;
    u_xlat16_2.xyz = u_xlat16_12.xyz * u_xlat16_3.xxx + u_xlat16_13.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(_EmissionScaler) + u_xlat16_2.xyz;
    u_xlat3.xyz = (-u_xlat0.xyz) + u_xlat16_4.xyz;
    u_xlat3.xyz = vec3(u_xlat16_34) * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat9.xy = vs_TEXCOORD0.zw * _DissovleNoise_ST.xy + _DissovleNoise_ST.zw;
    u_xlat16_4.x = _Time.y * _DissolveNoise_Uspeed + u_xlat9.x;
    u_xlat16_4.y = _Time.y * _DissolveNoise_Vspeed + u_xlat9.y;
    u_xlat10_32 = textureLod(_DissovleNoise, u_xlat16_4.xy, 0.0).x;
    u_xlat32 = u_xlat10_32 * _DissovleNoiseScale + vs_TEXCOORD0.z;
#ifdef UNITY_ADRENO_ES3
    u_xlatb32 = !!(_Dissovle>=u_xlat32);
#else
    u_xlatb32 = _Dissovle>=u_xlat32;
#endif
    u_xlat0.xyz = (bool(u_xlatb30)) ? u_xlat3.xyz : u_xlat0.xyz;
    u_xlat0.xyz = u_xlat16_2.xyz + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(0.00999999978<u_xlat16_34);
#else
    u_xlatb30 = 0.00999999978<u_xlat16_34;
#endif
    if((int(u_xlatb32) * int(0xffffffffu))==0){discard;}
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn));
#else
    u_xlatb2.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn);
#endif
    u_xlat12.xyz = u_xlat0.xyz * vec3(vec3(_ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness));
    u_xlat3.xyz = vec3(vec3(_ES_CharacterPointLightWholeIntensity, _ES_CharacterPointLightWholeIntensity, _ES_CharacterPointLightWholeIntensity)) * mhy_CharacterPointLightColor.xyz;
    u_xlat9.xyz = _ES_CharacterMainLightColor.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat9.xyz = min(max(u_xlat9.xyz, 0.0), 1.0);
#else
    u_xlat9.xyz = clamp(u_xlat9.xyz, 0.0, 1.0);
#endif
    u_xlat33 = (-mhy_CharacterPointLightColor.w) + 1.0;
    u_xlat3.xyz = u_xlat9.xyz * vec3(u_xlat33) + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat3.xyz = vec3(vec3(_ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio)) * u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat12.xyz = u_xlat12.xyz * u_xlat3.xyz;
    u_xlat3.xyz = _ES_CharacterAmbientLightColor.xyz * vec3(_ES_CharacterAmbientLightRatio);
    u_xlat16_4.xyz = u_xlat12.xyz * vec3(10.0, 10.0, 10.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.xyz = min(max(u_xlat16_4.xyz, 0.0), 1.0);
#else
    u_xlat16_4.xyz = clamp(u_xlat16_4.xyz, 0.0, 1.0);
#endif
    u_xlat12.xyz = u_xlat3.xyz * u_xlat16_4.xyz + u_xlat12.xyz;
    u_xlat16_4.xyz = (u_xlatb2.x) ? u_xlat12.xyz : u_xlat0.xyz;
    u_xlat16_5.xyz = u_xlat0.xyz + (-u_xlat16_4.xyz);
    u_xlat16_5.xyz = vec3(u_xlat16_34) * u_xlat16_5.xyz + u_xlat16_4.xyz;
    u_xlat16_0.xyz = (bool(u_xlatb30)) ? u_xlat16_5.xyz : u_xlat16_4.xyz;
    u_xlat16_4.x = max(u_xlat16_0.z, u_xlat16_0.y);
    u_xlat16_1.w = max(u_xlat16_0.x, u_xlat16_4.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(1.0<u_xlat16_1.w);
#else
    u_xlatb2.x = 1.0<u_xlat16_1.w;
#endif
    u_xlat16_1.xyz = u_xlat16_0.xyz / u_xlat16_1.www;
    u_xlat16_0.w = 1.0;
    u_xlat16_0 = (u_xlatb2.x) ? u_xlat16_1 : u_xlat16_0;
    u_xlat16_4.x = min(u_xlat16_0.w, 1.10000002);
    u_xlat16_14 = u_xlat16_0.w + (-u_xlat16_4.x);
    u_xlat16_4.x = u_xlat16_34 * u_xlat16_14 + u_xlat16_4.x;
    u_xlat16_2.x = u_xlat16_4.x * 0.0500000007;
    SV_Target0.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb12 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_4.x = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb12) ? u_xlat16_4.x : 0.0;
    SV_Target0.w = 0.0156862754;
    SV_Target1.xyz = u_xlat16_0.xyz;
    SV_Target1.w = u_xlat16_2.x;
    SV_Target2.xy = vec2(0.0, 0.0);
    SV_Target2.w = vs_TEXCOORD4;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MSAA_INTERPOLATION" "TOON_SPECULAR_ON" "TOON_LIGHTMAP_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _MainTex_ST;
uniform 	float _CharacterAmbientSensorShadowOn;
uniform 	vec4 _AmbientSensorUVs;
uniform 	float _UseClipPlane;
uniform 	float _ClipPlaneWorld;
uniform 	vec4 _ClipPlane;
uniform 	vec4 mhy_AvatarLightDir;
uniform 	vec4 mhy_CharacterOverrideLightDir;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
struct unity_Builtins1Array_Type {
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw1 {
	unity_Builtins1Array_Type unity_Builtins1Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform lowp sampler2D _CharacterAmbientSensorTex;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp float vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD6;
flat out highp uint vs_SV_InstanceID0;
vec3 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump float u_xlat16_4;
vec3 u_xlat5;
int u_xlati5;
bool u_xlatb5;
float u_xlat6;
mediump float u_xlat16_9;
float u_xlat10;
bool u_xlatb10;
bool u_xlatb11;
float u_xlat15;
bool u_xlatb15;
float u_xlat16;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
#ifdef UNITY_ADRENO_ES3
    u_xlatb5 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseClipPlane));
#else
    u_xlatb5 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseClipPlane);
#endif
    if(u_xlatb5){
#ifdef UNITY_ADRENO_ES3
        u_xlatb5 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ClipPlaneWorld));
#else
        u_xlatb5 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ClipPlaneWorld);
#endif
        if(u_xlatb5){
            u_xlati5 = u_xlati0 << 2;
#ifdef UNITY_ADRENO_ES3
            u_xlatb10 = !!(abs(_ClipPlane.w)<0.00100000005);
#else
            u_xlatb10 = abs(_ClipPlane.w)<0.00100000005;
#endif
            u_xlat1.xyz = _ClipPlane.www * _ClipPlane.xyz;
            u_xlat1.xyz = (bool(u_xlatb10)) ? vec3(0.0, 0.0, 0.0) : u_xlat1.xyz;
            u_xlat2 = u_xlat1.yyyy * unity_Builtins1Array[u_xlati5 / 4].hlslcc_mtx4x4unity_WorldToObjectArray[1];
            u_xlat2 = unity_Builtins1Array[u_xlati5 / 4].hlslcc_mtx4x4unity_WorldToObjectArray[0] * u_xlat1.xxxx + u_xlat2;
            u_xlat1 = unity_Builtins1Array[u_xlati5 / 4].hlslcc_mtx4x4unity_WorldToObjectArray[2] * u_xlat1.zzzz + u_xlat2;
            u_xlat1 = u_xlat1 + unity_Builtins1Array[u_xlati5 / 4].hlslcc_mtx4x4unity_WorldToObjectArray[3];
            u_xlat1.xyz = u_xlat1.xyz / u_xlat1.www;
            u_xlat2.xyz = _ClipPlane.yyy * unity_Builtins1Array[u_xlati5 / 4].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz;
            u_xlat2.xyz = unity_Builtins1Array[u_xlati5 / 4].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz * _ClipPlane.xxx + u_xlat2.xyz;
            u_xlat5.xyz = unity_Builtins1Array[u_xlati5 / 4].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz * _ClipPlane.zzz + u_xlat2.xyz;
            u_xlat1.x = dot(u_xlat1.xyz, u_xlat5.xyz);
            u_xlat6 = dot(in_POSITION0.xyz, u_xlat5.xyz);
#ifdef UNITY_ADRENO_ES3
            u_xlatb11 = !!(u_xlat6<u_xlat1.x);
#else
            u_xlatb11 = u_xlat6<u_xlat1.x;
#endif
            u_xlat1.x = (-u_xlat1.x) + u_xlat6;
            u_xlat2.xyz = (-u_xlat1.xxx) * u_xlat5.xyz + in_POSITION0.xyz;
            u_xlat2.w = 0.0;
            u_xlat3.xyz = in_POSITION0.xyz;
            u_xlat3.w = in_COLOR0.w;
            u_xlat1 = (bool(u_xlatb11)) ? u_xlat2 : u_xlat3;
            u_xlat16_4 = u_xlat1.w;
        } else {
            u_xlat5.x = dot(in_POSITION0.xyz, _ClipPlane.xyz);
            u_xlat10 = _ClipPlane.w + -0.00999999978;
#ifdef UNITY_ADRENO_ES3
            u_xlatb10 = !!(u_xlat5.x<u_xlat10);
#else
            u_xlatb10 = u_xlat5.x<u_xlat10;
#endif
            u_xlat5.x = u_xlat5.x + (-_ClipPlane.w);
            u_xlat2.xyz = (-u_xlat5.xxx) * _ClipPlane.xyz + in_POSITION0.xyz;
            u_xlat2.w = 0.0;
            u_xlat3.xyz = in_POSITION0.xyz;
            u_xlat3.w = in_COLOR0.w;
            u_xlat1 = (bool(u_xlatb10)) ? u_xlat2 : u_xlat3;
            u_xlat16_4 = u_xlat1.w;
        //ENDIF
        }
    } else {
        u_xlat1.xyz = in_POSITION0.xyz;
        u_xlat16_4 = in_COLOR0.w;
    //ENDIF
    }
    u_xlati0 = u_xlati0 << 2;
    u_xlat2.xyw = (-_WorldSpaceCameraPos.xyz) + unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat3.x = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].x;
    u_xlat3.y = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].x;
    u_xlat3.z = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].x;
    u_xlat3.w = u_xlat2.x;
    u_xlat1.w = 1.0;
    u_xlat5.x = dot(u_xlat3, u_xlat1);
    u_xlat3.x = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].y;
    u_xlat3.y = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].y;
    u_xlat3.z = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].y;
    u_xlat3.w = u_xlat2.y;
    u_xlat10 = dot(u_xlat3, u_xlat1);
    u_xlat2.x = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].z;
    u_xlat2.y = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].z;
    u_xlat2.z = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].z;
    u_xlat15 = dot(u_xlat2, u_xlat1);
    u_xlat2.x = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].w;
    u_xlat2.y = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].w;
    u_xlat2.z = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].w;
    u_xlat2.w = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3].w;
    u_xlat16 = dot(u_xlat2, u_xlat1);
    u_xlat2 = vec4(u_xlat10) * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat5.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVPZero[2] * vec4(u_xlat15) + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVPZero[3] * vec4(u_xlat16) + u_xlat2;
    u_xlat3 = u_xlat1.yyyy * unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat3 = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * u_xlat1.xxxx + u_xlat3;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * u_xlat1.zzzz + u_xlat3;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3] * in_POSITION0.wwww + u_xlat1;
    vs_TEXCOORD3.xyz = u_xlat1.xyz / u_xlat1.www;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.xz = u_xlat2.xw * vec2(0.5, 0.5);
    u_xlat5.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat1.w = u_xlat5.x * 0.5;
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat5.xyz = in_NORMAL0.yyy * unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat5.xyz = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_NORMAL0.xxx + u_xlat5.xyz;
    u_xlat0.xyz = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_NORMAL0.zzz + u_xlat5.xyz;
    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(0.5<mhy_CharacterOverrideLightDir.w);
#else
    u_xlatb15 = 0.5<mhy_CharacterOverrideLightDir.w;
#endif
    u_xlat1.x = mhy_CharacterOverrideLightDir.x;
    u_xlat1.yz = (-mhy_CharacterOverrideLightDir.yz);
    u_xlat1.xyz = (bool(u_xlatb15)) ? u_xlat1.xyz : mhy_AvatarLightDir.xyz;
    u_xlat16_9 = dot(u_xlat0.xyz, u_xlat1.xyz);
    vs_TEXCOORD1.w = u_xlat16_9 * 0.497500002 + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_CharacterAmbientSensorShadowOn));
#else
    u_xlatb15 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_CharacterAmbientSensorShadowOn);
#endif
    if(u_xlatb15){
        u_xlat15 = textureLod(_CharacterAmbientSensorTex, _AmbientSensorUVs.xy, 0.0).x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb15 = !!(0.5<u_xlat15);
#else
        u_xlatb15 = 0.5<u_xlat15;
#endif
        vs_TEXCOORD4 = u_xlatb15 ? 1.0 : float(0.0);
    } else {
        vs_TEXCOORD4 = 0.0;
    //ENDIF
    }
    gl_Position = u_xlat2;
    vs_COLOR0.xyz = in_COLOR0.xyz;
    vs_COLOR0.w = u_xlat16_4;
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    vs_TEXCOORD2.zw = u_xlat2.zw;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	mediump vec4 _Color;
uniform 	float _MainTexAlphaUse;
uniform 	mediump float _MainTexAlphaCutoff;
uniform 	float _UseLightMapColorAO;
uniform 	float _UseVertexColorAO;
uniform 	mediump float _LightArea;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	float _UseCoolShadowColorOrTex;
uniform 	mediump vec3 _CoolShadowMultColor;
uniform 	float _UseShadowTransition;
uniform 	float _ShadowTransitionRange;
uniform 	float _ShadowTransitionSoftness;
uniform 	mediump vec3 _SpecularColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	float _FaceBlushStrength;
uniform 	mediump vec3 _FaceBlushColor;
uniform 	mediump float _EmissionScaler;
uniform 	mediump vec3 _EmissionColor_MHY;
uniform 	float _UseMaterial2;
uniform 	mediump vec3 _Color2;
uniform 	mediump vec3 _FirstShadowMultColor2;
uniform 	mediump vec3 _CoolShadowMultColor2;
uniform 	mediump float _Shininess2;
uniform 	mediump float _SpecMulti2;
uniform 	float _ShadowTransitionRange2;
uniform 	float _ShadowTransitionSoftness2;
uniform 	float _UseMaterial3;
uniform 	mediump vec3 _Color3;
uniform 	mediump vec3 _FirstShadowMultColor3;
uniform 	mediump vec3 _CoolShadowMultColor3;
uniform 	mediump float _Shininess3;
uniform 	mediump float _SpecMulti3;
uniform 	float _ShadowTransitionRange3;
uniform 	float _ShadowTransitionSoftness3;
uniform 	float _UseMaterial4;
uniform 	mediump vec3 _Color4;
uniform 	mediump vec3 _FirstShadowMultColor4;
uniform 	mediump vec3 _CoolShadowMultColor4;
uniform 	mediump float _Shininess4;
uniform 	mediump float _SpecMulti4;
uniform 	float _ShadowTransitionRange4;
uniform 	float _ShadowTransitionSoftness4;
uniform 	float _UseMaterial5;
uniform 	mediump vec3 _Color5;
uniform 	mediump vec3 _FirstShadowMultColor5;
uniform 	mediump vec3 _CoolShadowMultColor5;
uniform 	mediump float _Shininess5;
uniform 	mediump float _SpecMulti5;
uniform 	float _ShadowTransitionRange5;
uniform 	float _ShadowTransitionSoftness5;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _UseClipPlane;
uniform 	float _ES_CharacterAmbientLightOn;
uniform 	float _ES_CharacterAmbientBrightness;
uniform 	vec3 _ES_CharacterMainLightColor;
uniform 	vec3 _ES_CharacterAmbientLightColor;
uniform 	float _ES_CharacterMainLightRatio;
uniform 	float _ES_CharacterAmbientLightRatio;
uniform 	float _ES_CharacterColorTone;
uniform 	float _ES_CharacterPointLightWholeIntensity;
uniform 	vec4 mhy_AvatarLightDir;
uniform 	vec4 mhy_CharacterPointLightColor;
uniform 	vec4 mhy_CharacterOverrideLightDir;
uniform 	mediump vec4 _FlowMapColor01;
uniform 	mediump float _FlowScale01;
uniform 	mediump float _FlowMap01_Uspeed;
uniform 	vec4 _FlowMap01_ST;
uniform 	mediump float _FlowMap01_Vspeed;
uniform 	mediump float _Noise_Uspeed;
uniform 	vec4 _Noise_ST;
uniform 	mediump float _Noise_Vspeed;
uniform 	mediump float _NoiseFlowIntensity;
uniform 	mediump float _MaskOffset01;
uniform 	mediump float _NoiseIntensity;
uniform 	mediump float _Mask01_Power;
uniform 	mediump vec4 _FlowMapColor02;
uniform 	mediump float _FlowScale02;
uniform 	mediump float _FlowMap02_Uspeed;
uniform 	vec4 _FlowMap02_ST;
uniform 	mediump float _FlowMap02_Vspeed;
uniform 	mediump float _MaskOffset02;
uniform 	mediump float _Mask02_Power;
uniform 	mediump float _DissolveNoise_Uspeed;
uniform 	vec4 _DissovleNoise_ST;
uniform 	mediump float _DissolveNoise_Vspeed;
uniform 	mediump float _DissovleNoiseScale;
uniform 	mediump float _Dissovle;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _Noise;
uniform lowp sampler2D _FlowMap01;
uniform lowp sampler2D _Mask01;
uniform lowp sampler2D _FlowMap02;
uniform lowp sampler2D _Mask02;
uniform lowp sampler2D _DissovleNoise;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp float vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
vec3 u_xlat2;
mediump vec4 u_xlat16_2;
lowp vec4 u_xlat10_2;
bool u_xlatb2;
vec3 u_xlat3;
mediump float u_xlat16_3;
lowp float u_xlat10_3;
bvec3 u_xlatb3;
vec3 u_xlat4;
bvec4 u_xlatb4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
mediump vec3 u_xlat16_6;
bvec3 u_xlatb6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
vec3 u_xlat11;
bool u_xlatb11;
vec3 u_xlat13;
bool u_xlatb13;
float u_xlat14;
mediump vec3 u_xlat16_14;
int u_xlati14;
mediump float u_xlat16_16;
mediump vec3 u_xlat16_18;
mediump vec3 u_xlat16_19;
bvec2 u_xlatb22;
vec2 u_xlat24;
int u_xlati25;
bool u_xlatb25;
float u_xlat33;
mediump float u_xlat16_33;
lowp float u_xlat10_33;
bool u_xlatb33;
float u_xlat35;
bool u_xlatb35;
float u_xlat36;
int u_xlati36;
mediump float u_xlat16_38;
mediump float u_xlat16_40;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseClipPlane));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseClipPlane);
#endif
    u_xlat16_1.x = vs_COLOR0.w + -0.00999999978;
#ifdef UNITY_ADRENO_ES3
    u_xlatb11 = !!(u_xlat16_1.x<0.0);
#else
    u_xlatb11 = u_xlat16_1.x<0.0;
#endif
    u_xlatb0 = u_xlatb0 && u_xlatb11;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(_DitherAlpha<0.949999988);
#else
        u_xlatb0 = _DitherAlpha<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb22.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb22.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb22.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = _DitherAlpha * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + -0.00999999978;
#ifdef UNITY_ADRENO_ES3
            u_xlatb0 = !!(u_xlat0.x<0.0);
#else
            u_xlatb0 = u_xlat0.x<0.0;
#endif
            if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(0.5<mhy_CharacterOverrideLightDir.w);
#else
    u_xlatb2 = 0.5<mhy_CharacterOverrideLightDir.w;
#endif
    u_xlat3.x = mhy_CharacterOverrideLightDir.x;
    u_xlat3.yz = (-mhy_CharacterOverrideLightDir.yz);
    u_xlat2.xyz = (bool(u_xlatb2)) ? u_xlat3.xyz : mhy_AvatarLightDir.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat33) + u_xlat2.xyz;
    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat0.xyz = vec3(u_xlat33) * u_xlat0.xyz;
    u_xlat2.xy = dFdx(vs_TEXCOORD0.xy);
    u_xlat24.xy = dFdy(vs_TEXCOORD0.xy);
    u_xlat2.xy = u_xlat24.xy + u_xlat2.xy;
    u_xlat24.xy = (-u_xlat2.xy) * vec2(0.25, 0.25) + vs_TEXCOORD0.xy;
    u_xlat2.xy = u_xlat2.xy * vec2(0.25, 0.25) + vs_TEXCOORD0.xy;
    u_xlat2.xy = (int(gl_SampleID) != 0) ? u_xlat24.xy : u_xlat2.xy;
    u_xlat1 = textureLod(_MainTex, u_xlat2.xy, 0.0);
    u_xlatb3.xyz = equal(vec4(_MainTexAlphaUse), vec4(3.0, 1.0, 2.0, 0.0)).xyz;
    u_xlat33 = u_xlat1.w * _FaceBlushStrength;
    u_xlat4.xyz = (-u_xlat1.xyz) + _FaceBlushColor.xyz;
    u_xlat4.xyz = vec3(u_xlat33) * u_xlat4.xyz + u_xlat1.xyz;
    u_xlat16_5.xyz = (u_xlatb3.x) ? u_xlat4.xyz : u_xlat1.xyz;
    u_xlat16_38 = u_xlat1.w + (-_MainTexAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(u_xlat16_38<0.0);
#else
    u_xlatb33 = u_xlat16_38<0.0;
#endif
    u_xlatb33 = u_xlatb3.y && u_xlatb33;
    if((int(u_xlatb33) * int(0xffffffffu))!=0){discard;}
    u_xlat10_2 = textureLod(_LightMapTex, u_xlat2.xy, 0.0);
    u_xlatb3.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseLightMapColorAO, _UseVertexColorAO, _UseLightMapColorAO, _UseLightMapColorAO)).xy;
    u_xlat16_38 = (u_xlatb3.x) ? u_xlat10_2.y : 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseMaterial2));
#else
    u_xlatb33 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseMaterial2);
#endif
    u_xlatb4 = greaterThanEqual(u_xlat10_2.wwww, vec4(0.800000012, 0.400000006, 0.200000003, 0.600000024));
    u_xlatb33 = u_xlatb33 && u_xlatb4.x;
    u_xlat33 = (u_xlatb33) ? 2.0 : 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb13 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseMaterial3));
#else
    u_xlatb13 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseMaterial3);
#endif
    u_xlatb13 = u_xlatb4.y && u_xlatb13;
    u_xlatb6.xyz = lessThan(u_xlat10_2.wwww, vec4(0.600000024, 0.400000006, 0.800000012, 0.0)).xyz;
    u_xlatb13 = u_xlatb13 && u_xlatb6.x;
    u_xlat33 = (u_xlatb13) ? 3.0 : u_xlat33;
#ifdef UNITY_ADRENO_ES3
    u_xlatb13 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseMaterial4));
#else
    u_xlatb13 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseMaterial4);
#endif
    u_xlatb13 = u_xlatb4.z && u_xlatb13;
    u_xlatb13 = u_xlatb6.y && u_xlatb13;
    u_xlat33 = (u_xlatb13) ? 4.0 : u_xlat33;
#ifdef UNITY_ADRENO_ES3
    u_xlatb13 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseMaterial5));
#else
    u_xlatb13 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseMaterial5);
#endif
    u_xlatb13 = u_xlatb4.w && u_xlatb13;
    u_xlatb13 = u_xlatb6.z && u_xlatb13;
    u_xlat33 = (u_xlatb13) ? 5.0 : u_xlat33;
    u_xlatb4 = equal(vec4(u_xlat33), vec4(2.0, 3.0, 4.0, 5.0));
    u_xlat16_7.xyz = (u_xlatb4.x) ? _Color2.xyz : _Color.xyz;
    u_xlat16_7.xyz = (u_xlatb4.y) ? _Color3.xyz : u_xlat16_7.xyz;
    u_xlat16_7.xyz = (u_xlatb4.z) ? _Color4.xyz : u_xlat16_7.xyz;
    u_xlat16_7.xyz = (u_xlatb4.w) ? _Color5.xyz : u_xlat16_7.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_7.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb13 = !!(0.00999999978<u_xlat1.w);
#else
    u_xlatb13 = 0.00999999978<u_xlat1.w;
#endif
    u_xlatb13 = u_xlatb13 && u_xlatb3.z;
    u_xlat16_7.x = (u_xlatb13) ? u_xlat1.w : 0.0;
    u_xlat16_18.x = u_xlat16_38 * vs_COLOR0.x;
    u_xlat16_38 = (u_xlatb3.y) ? u_xlat16_18.x : u_xlat16_38;
#ifdef UNITY_ADRENO_ES3
    u_xlatb35 = !!(u_xlat16_38<0.0500000007);
#else
    u_xlatb35 = u_xlat16_38<0.0500000007;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb3.x = !!(0.949999988<u_xlat16_38);
#else
    u_xlatb3.x = 0.949999988<u_xlat16_38;
#endif
    u_xlat14 = u_xlat16_38 + vs_TEXCOORD1.w;
    u_xlat14 = u_xlat14 * 0.5;
    u_xlat16_38 = (u_xlatb3.x) ? 1.0 : u_xlat14;
    u_xlat16_38 = (u_xlatb35) ? 0.0 : u_xlat16_38;
#ifdef UNITY_ADRENO_ES3
    u_xlatb35 = !!(u_xlat16_38<_LightArea);
#else
    u_xlatb35 = u_xlat16_38<_LightArea;
#endif
    if(u_xlatb35){
#ifdef UNITY_ADRENO_ES3
        u_xlatb35 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition));
#else
        u_xlatb35 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition);
#endif
#ifdef UNITY_ADRENO_ES3
        u_xlatb3.x = !!(u_xlat33==1.0);
#else
        u_xlatb3.x = u_xlat33==1.0;
#endif
        u_xlat16_8.x = (u_xlatb3.x) ? _ShadowTransitionRange : 0.0;
        u_xlat16_8.y = (u_xlatb3.x) ? _ShadowTransitionSoftness : 0.0;
        u_xlat16_18.xy = (u_xlatb4.x) ? vec2(_ShadowTransitionRange2, _ShadowTransitionSoftness2) : u_xlat16_8.xy;
        u_xlat16_18.xy = (u_xlatb4.y) ? vec2(_ShadowTransitionRange3, _ShadowTransitionSoftness3) : u_xlat16_18.xy;
        u_xlat16_18.xy = (u_xlatb4.z) ? vec2(_ShadowTransitionRange4, _ShadowTransitionSoftness4) : u_xlat16_18.xy;
        u_xlat16_18.xy = (u_xlatb4.w) ? vec2(_ShadowTransitionRange5, _ShadowTransitionSoftness5) : u_xlat16_18.xy;
        u_xlat16_38 = (-u_xlat16_38) + _LightArea;
        u_xlat16_38 = u_xlat16_38 / u_xlat16_18.x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb3.x = !!(u_xlat16_38>=1.0);
#else
        u_xlatb3.x = u_xlat16_38>=1.0;
#endif
        u_xlat16_14.x = u_xlat16_38 + 0.00999999978;
        u_xlat16_14.x = log2(u_xlat16_14.x);
        u_xlat16_14.x = u_xlat16_14.x * u_xlat16_18.y;
        u_xlat16_14.x = exp2(u_xlat16_14.x);
        u_xlat14 = min(u_xlat16_14.x, 1.0);
        u_xlat3.x = (u_xlatb3.x) ? 1.0 : u_xlat14;
        u_xlat35 = (u_xlatb35) ? u_xlat3.x : 1.0;
        u_xlat16_38 = 0.0;
    } else {
        u_xlat35 = 0.0;
        u_xlat16_38 = 1.0;
    //ENDIF
    }
    u_xlat3.x = (-u_xlat16_38) + 1.0;
#ifdef UNITY_ADRENO_ES3
    { bool cond = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(vs_TEXCOORD4); u_xlati14 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati14 = int((vec4(0.0, 0.0, 0.0, 0.0)!=vec4(vs_TEXCOORD4)) ? 0xFFFFFFFFu : uint(0u));
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(u_xlat33==1.0);
#else
    u_xlatb33 = u_xlat33==1.0;
#endif
    if(u_xlatb33){
#ifdef UNITY_ADRENO_ES3
        u_xlatb25 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex));
#else
        u_xlatb25 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex);
#endif
        u_xlat16_6.xyz = vec3(_FirstShadowMultColor.xxyz.y + (-_CoolShadowMultColor.x), _FirstShadowMultColor.xxyz.z + (-_CoolShadowMultColor.y), float(_FirstShadowMultColor.z) + (-_CoolShadowMultColor.z));
        u_xlat6.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_6.xyz + _CoolShadowMultColor.xyz;
        u_xlat16_18.xyz = (bool(u_xlatb25)) ? u_xlat6.xyz : vec3(_FirstShadowMultColor.x, _FirstShadowMultColor.y, _FirstShadowMultColor.z);
    } else {
        if(u_xlatb4.x){
#ifdef UNITY_ADRENO_ES3
            u_xlatb25 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex));
#else
            u_xlatb25 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex);
#endif
            u_xlat16_6.xyz = _FirstShadowMultColor2.xyz + (-_CoolShadowMultColor2.xyz);
            u_xlat6.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_6.xyz + _CoolShadowMultColor2.xyz;
            u_xlat16_18.xyz = (bool(u_xlatb25)) ? u_xlat6.xyz : _FirstShadowMultColor2.xyz;
        } else {
#ifdef UNITY_ADRENO_ES3
            u_xlatb25 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex));
#else
            u_xlatb25 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex);
#endif
            u_xlat16_6.xyz = _FirstShadowMultColor3.xyz + (-_CoolShadowMultColor3.xyz);
            u_xlat6.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_6.xyz + _CoolShadowMultColor3.xyz;
            u_xlat16_8.xyz = (bool(u_xlatb25)) ? u_xlat6.xyz : _FirstShadowMultColor3.xyz;
            u_xlat16_6.xyz = _FirstShadowMultColor4.xyz + (-_CoolShadowMultColor4.xyz);
            u_xlat6.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_6.xyz + _CoolShadowMultColor4.xyz;
            u_xlat16_9.xyz = (bool(u_xlatb25)) ? u_xlat6.xyz : _FirstShadowMultColor4.xyz;
            u_xlat16_6.xyz = _FirstShadowMultColor5.xyz + (-_CoolShadowMultColor5.xyz);
            u_xlat6.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_6.xyz + _CoolShadowMultColor5.xyz;
            u_xlat16_10.xyz = (bool(u_xlatb25)) ? u_xlat6.xyz : _FirstShadowMultColor5.xyz;
            u_xlat16_9.xyz = (u_xlatb4.z) ? u_xlat16_9.xyz : u_xlat16_10.xyz;
            u_xlat16_18.xyz = (u_xlatb4.y) ? u_xlat16_8.xyz : u_xlat16_9.xyz;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb25 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition));
#else
    u_xlatb25 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition);
#endif
    u_xlati36 = ~u_xlati14;
    u_xlati25 = u_xlatb25 ? u_xlati36 : int(0);
    u_xlat16_6.xyz = u_xlat16_18.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat6.xyz = vec3(u_xlat35) * u_xlat16_6.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_18.xyz = (int(u_xlati25) != 0) ? u_xlat6.xyz : u_xlat16_18.xyz;
    u_xlat16_38 = (u_xlatb4.z) ? _Shininess4 : _Shininess5;
    u_xlat16_8.x = (u_xlatb4.z) ? _SpecMulti4 : _SpecMulti5;
    u_xlat16_38 = (u_xlatb4.y) ? _Shininess3 : u_xlat16_38;
    u_xlat16_8.x = (u_xlatb4.y) ? _SpecMulti3 : u_xlat16_8.x;
    u_xlat16_38 = (u_xlatb4.x) ? _Shininess2 : u_xlat16_38;
    u_xlat16_8.x = (u_xlatb4.x) ? _SpecMulti2 : u_xlat16_8.x;
    u_xlat16_38 = (u_xlatb33) ? _Shininess : u_xlat16_38;
    u_xlat16_8.x = (u_xlatb33) ? _SpecMulti : u_xlat16_8.x;
    u_xlat16_19.x = dot(vs_TEXCOORD1.xyz, u_xlat0.xyz);
    u_xlat16_19.x = max(u_xlat16_19.x, 0.00100000005);
    u_xlat16_19.x = log2(u_xlat16_19.x);
    u_xlat16_38 = u_xlat16_38 * u_xlat16_19.x;
    u_xlat16_38 = exp2(u_xlat16_38);
    u_xlat0.x = (-u_xlat10_2.z) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat0.x<u_xlat16_38);
#else
    u_xlatb0 = u_xlat0.x<u_xlat16_38;
#endif
    u_xlat16_8.xyz = u_xlat16_8.xxx * _SpecularColor.xyz;
    u_xlat16_8.xyz = u_xlat10_2.xxx * u_xlat16_8.xyz;
    u_xlat16_8.xyz = (bool(u_xlatb0)) ? u_xlat16_8.xyz : vec3(0.0, 0.0, 0.0);
    u_xlat16_5.xyz = vec3(u_xlat16_5.x * _EmissionColor_MHY.xxyz.y, u_xlat16_5.y * _EmissionColor_MHY.xxyz.z, u_xlat16_5.z * float(_EmissionColor_MHY.z));
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat3.x==1.0);
#else
    u_xlatb0 = u_xlat3.x==1.0;
#endif
    u_xlati0 = int(uint(u_xlatb0) * 0xffffffffu | uint(u_xlati14));
    u_xlat11.xyz = u_xlat1.xyz * u_xlat16_18.xyz;
    u_xlat0.xyz = (int(u_xlati0) != 0) ? u_xlat11.xyz : u_xlat1.xyz;
    u_xlat0.xyz = u_xlat16_8.xyz + u_xlat0.xyz;
    u_xlat2.xz = vs_TEXCOORD0.zw * _FlowMap01_ST.xy + _FlowMap01_ST.zw;
    u_xlat16_8.x = _Time.y * _FlowMap01_Uspeed + u_xlat2.x;
    u_xlat16_8.y = _Time.y * _FlowMap01_Vspeed + u_xlat2.z;
    u_xlat2.xz = vs_TEXCOORD0.zw * _Noise_ST.xy + _Noise_ST.zw;
    u_xlat16_9.x = _Time.y * _Noise_Uspeed + u_xlat2.x;
    u_xlat16_9.y = _Time.y * _Noise_Vspeed + u_xlat2.z;
    u_xlat10_33 = textureLod(_Noise, u_xlat16_9.xy, 0.0).x;
    u_xlat16_38 = _MaskOffset01 * 1.39999998 + -0.699999988;
    u_xlat16_18.x = u_xlat10_33 * _NoiseIntensity;
    u_xlat2.xz = vs_TEXCOORD0.zw * _FlowMap02_ST.xy + _FlowMap02_ST.zw;
    u_xlat16_9.x = _Time.y * _FlowMap02_Uspeed + u_xlat2.x;
    u_xlat16_9.y = _Time.y * _FlowMap02_Vspeed + u_xlat2.z;
    u_xlat16_40 = _MaskOffset02 * 1.39999998 + -0.699999988;
    u_xlat16_10.xyz = _FlowMapColor01.xyz * vec3(_FlowScale01);
    u_xlat16_8.xy = vec2(u_xlat10_33) * vec2(vec2(_NoiseFlowIntensity, _NoiseFlowIntensity)) + u_xlat16_8.xy;
    u_xlat10_2.x = textureLod(_FlowMap01, u_xlat16_8.xy, 0.0).x;
    u_xlat16_2.xzw = u_xlat10_2.xxx * u_xlat16_10.xyz;
    u_xlat16_8.x = (-vs_TEXCOORD0.z) + 1.0;
    u_xlat16_1.x = u_xlat16_38 + u_xlat16_8.x;
    u_xlat16_1.yw = vec2(u_xlat10_33) * vec2(vec2(_NoiseIntensity, _NoiseIntensity)) + (-vs_TEXCOORD0.ww);
    u_xlat16_18.y = 1.0;
    u_xlat16_19.xy = u_xlat16_1.xy + u_xlat16_18.xy;
    u_xlat10_3 = textureLod(_Mask01, u_xlat16_19.xy, 0.0).x;
    u_xlat16_3 = max(u_xlat10_3, 9.99999975e-05);
    u_xlat16_3 = log2(u_xlat16_3);
    u_xlat16_3 = u_xlat16_3 * _Mask01_Power;
    u_xlat16_3 = exp2(u_xlat16_3);
    u_xlat16_19.xyz = _FlowMapColor02.xyz * vec3(_FlowScale02);
    u_xlat16_9.xy = vec2(u_xlat10_33) * vec2(vec2(_NoiseFlowIntensity, _NoiseFlowIntensity)) + u_xlat16_9.xy;
    u_xlat10_33 = textureLod(_FlowMap02, u_xlat16_9.xy, 0.0).x;
    u_xlat16_14.xyz = vec3(u_xlat10_33) * u_xlat16_19.xyz;
    u_xlat16_1.z = u_xlat16_40 + u_xlat16_8.x;
    u_xlat16_18.xy = vec2(u_xlat16_1.z + u_xlat16_18.x, u_xlat16_1.w + u_xlat16_18.y);
    u_xlat10_33 = textureLod(_Mask02, u_xlat16_18.xy, 0.0).x;
    u_xlat16_33 = max(u_xlat10_33, 9.99999975e-05);
    u_xlat16_33 = log2(u_xlat16_33);
    u_xlat16_33 = u_xlat16_33 * _Mask02_Power;
    u_xlat16_33 = exp2(u_xlat16_33);
    u_xlat16_14.xyz = vec3(u_xlat16_33) * u_xlat16_14.xyz;
    u_xlat16_2.xzw = u_xlat16_2.xzw * vec3(u_xlat16_3) + u_xlat16_14.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(_EmissionScaler) + u_xlat16_2.xzw;
    u_xlat3.xyz = (-u_xlat0.xyz) + u_xlat16_5.xyz;
    u_xlat3.xyz = u_xlat16_7.xxx * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat4.xy = vs_TEXCOORD0.zw * _DissovleNoise_ST.xy + _DissovleNoise_ST.zw;
    u_xlat16_5.x = _Time.y * _DissolveNoise_Uspeed + u_xlat4.x;
    u_xlat16_5.y = _Time.y * _DissolveNoise_Vspeed + u_xlat4.y;
    u_xlat10_33 = textureLod(_DissovleNoise, u_xlat16_5.xy, 0.0).x;
    u_xlat33 = u_xlat10_33 * _DissovleNoiseScale + vs_TEXCOORD0.z;
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(_Dissovle>=u_xlat33);
#else
    u_xlatb33 = _Dissovle>=u_xlat33;
#endif
    u_xlat0.xyz = (bool(u_xlatb13)) ? u_xlat3.xyz : u_xlat0.xyz;
    u_xlat0.xyz = u_xlat16_2.xzw + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(0.00999999978<u_xlat16_7.x);
#else
    u_xlatb2 = 0.00999999978<u_xlat16_7.x;
#endif
    if((int(u_xlatb33) * int(0xffffffffu))==0){discard;}
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn));
#else
    u_xlatb33 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn);
#endif
    u_xlat13.xyz = u_xlat0.xyz * vec3(vec3(_ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness));
    u_xlat3.xyz = vec3(vec3(_ES_CharacterPointLightWholeIntensity, _ES_CharacterPointLightWholeIntensity, _ES_CharacterPointLightWholeIntensity)) * mhy_CharacterPointLightColor.xyz;
    u_xlat4.xyz = _ES_CharacterMainLightColor.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.xyz = min(max(u_xlat4.xyz, 0.0), 1.0);
#else
    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
#endif
    u_xlat36 = (-mhy_CharacterPointLightColor.w) + 1.0;
    u_xlat3.xyz = u_xlat4.xyz * vec3(u_xlat36) + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat3.xyz = vec3(vec3(_ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio)) * u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat13.xyz = u_xlat13.xyz * u_xlat3.xyz;
    u_xlat3.xyz = _ES_CharacterAmbientLightColor.xyz * vec3(_ES_CharacterAmbientLightRatio);
    u_xlat16_5.xyz = u_xlat13.xyz * vec3(10.0, 10.0, 10.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.xyz = min(max(u_xlat16_5.xyz, 0.0), 1.0);
#else
    u_xlat16_5.xyz = clamp(u_xlat16_5.xyz, 0.0, 1.0);
#endif
    u_xlat13.xyz = u_xlat3.xyz * u_xlat16_5.xyz + u_xlat13.xyz;
    u_xlat16_5.xyz = (bool(u_xlatb33)) ? u_xlat13.xyz : u_xlat0.xyz;
    u_xlat16_18.xyz = u_xlat0.xyz + (-u_xlat16_5.xyz);
    u_xlat16_18.xyz = u_xlat16_7.xxx * u_xlat16_18.xyz + u_xlat16_5.xyz;
    u_xlat16_0.xyz = (bool(u_xlatb2)) ? u_xlat16_18.xyz : u_xlat16_5.xyz;
    u_xlat16_5.x = max(u_xlat16_0.z, u_xlat16_0.y);
    u_xlat16_1.w = max(u_xlat16_0.x, u_xlat16_5.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(1.0<u_xlat16_1.w);
#else
    u_xlatb2 = 1.0<u_xlat16_1.w;
#endif
    u_xlat16_1.xyz = u_xlat16_0.xyz / u_xlat16_1.www;
    u_xlat16_0.w = 1.0;
    u_xlat16_0 = (bool(u_xlatb2)) ? u_xlat16_1 : u_xlat16_0;
    u_xlat16_5.x = min(u_xlat16_0.w, 1.10000002);
    u_xlat16_16 = u_xlat16_0.w + (-u_xlat16_5.x);
    u_xlat16_5.x = u_xlat16_7.x * u_xlat16_16 + u_xlat16_5.x;
    u_xlat16_2.x = u_xlat16_5.x * 0.0500000007;
    SV_Target0.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb13 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb13 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_5.x = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb13) ? u_xlat16_5.x : 0.0;
    SV_Target0.w = 0.0156862754;
    SV_Target1.xyz = u_xlat16_0.xyz;
    SV_Target1.w = u_xlat16_2.x;
    SV_Target2.xy = vec2(0.0, 0.0);
    SV_Target2.w = vs_TEXCOORD4;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "LINE_INTERPOLATION" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	vec4 _MainTex_ST;
uniform 	float _CharacterAmbientSensorShadowOn;
uniform 	vec4 _AmbientSensorUVs;
uniform 	float _UseClipPlane;
uniform 	float _ClipPlaneWorld;
uniform 	vec4 _ClipPlane;
uniform 	vec4 mhy_AvatarLightDir;
uniform 	vec4 mhy_CharacterOverrideLightDir;
uniform lowp sampler2D _CharacterAmbientSensorTex;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp float vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD6;
vec4 u_xlat0;
bvec2 u_xlatb0;
vec4 u_xlat1;
bool u_xlatb1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump float u_xlat16_4;
float u_xlat5;
float u_xlat6;
float u_xlat7;
float u_xlat10;
bool u_xlatb10;
float u_xlat15;
bool u_xlatb15;
float u_xlat16;
bool u_xlatb16;
void main()
{
    u_xlatb0.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseClipPlane, _ClipPlaneWorld, _UseClipPlane, _UseClipPlane)).xy;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(abs(_ClipPlane.w)<0.00100000005);
#else
    u_xlatb10 = abs(_ClipPlane.w)<0.00100000005;
#endif
    u_xlat1.xyz = _ClipPlane.www * _ClipPlane.xyz;
    u_xlat1.xyz = (bool(u_xlatb10)) ? vec3(0.0, 0.0, 0.0) : u_xlat1.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_WorldToObject[1];
    u_xlat2 = hlslcc_mtx4x4unity_WorldToObject[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_WorldToObject[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_WorldToObject[3];
    u_xlat1.xyz = u_xlat1.xyz / u_xlat1.www;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * _ClipPlane.yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _ClipPlane.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _ClipPlane.zzz + u_xlat2.xyz;
    u_xlat10 = dot(u_xlat1.xyz, u_xlat2.xyz);
    u_xlat15 = dot(in_POSITION0.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(u_xlat15<u_xlat10);
#else
    u_xlatb1 = u_xlat15<u_xlat10;
#endif
    u_xlat10 = (-u_xlat10) + u_xlat15;
    u_xlat2.xyz = (-vec3(u_xlat10)) * u_xlat2.xyz + in_POSITION0.xyz;
    u_xlat2.w = 0.0;
    u_xlat3.xyz = in_POSITION0.xyz;
    u_xlat3.w = in_COLOR0.w;
    u_xlat1 = (bool(u_xlatb1)) ? u_xlat2 : u_xlat3;
    u_xlat10 = dot(in_POSITION0.xyz, _ClipPlane.xyz);
    u_xlat15 = _ClipPlane.w + -0.00999999978;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(u_xlat10<u_xlat15);
#else
    u_xlatb15 = u_xlat10<u_xlat15;
#endif
    u_xlat10 = u_xlat10 + (-_ClipPlane.w);
    u_xlat2.xyz = (-vec3(u_xlat10)) * _ClipPlane.xyz + in_POSITION0.xyz;
    u_xlat2.w = 0.0;
    u_xlat2 = (bool(u_xlatb15)) ? u_xlat2 : u_xlat3;
    u_xlat1.xyz = (u_xlatb0.y) ? u_xlat1.xyz : u_xlat2.xyz;
    u_xlat16_4 = (u_xlatb0.y) ? u_xlat1.w : u_xlat2.w;
    u_xlat1.xyz = (u_xlatb0.x) ? u_xlat1.xyz : in_POSITION0.xyz;
    vs_COLOR0.w = (u_xlatb0.x) ? u_xlat16_4 : in_COLOR0.w;
    u_xlat0.xyw = (-_WorldSpaceCameraPos.xyz) + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat2.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;
    u_xlat2.y = hlslcc_mtx4x4unity_ObjectToWorld[1].x;
    u_xlat2.z = hlslcc_mtx4x4unity_ObjectToWorld[2].x;
    u_xlat2.w = u_xlat0.x;
    u_xlat1.w = 1.0;
    u_xlat2.x = dot(u_xlat2, u_xlat1);
    u_xlat3.x = hlslcc_mtx4x4unity_ObjectToWorld[0].y;
    u_xlat3.y = hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat3.z = hlslcc_mtx4x4unity_ObjectToWorld[2].y;
    u_xlat3.w = u_xlat0.y;
    u_xlat7 = dot(u_xlat3, u_xlat1);
    u_xlat0.x = hlslcc_mtx4x4unity_ObjectToWorld[0].z;
    u_xlat0.y = hlslcc_mtx4x4unity_ObjectToWorld[1].z;
    u_xlat0.z = hlslcc_mtx4x4unity_ObjectToWorld[2].z;
    u_xlat0.x = dot(u_xlat0, u_xlat1);
    u_xlat3.x = hlslcc_mtx4x4unity_ObjectToWorld[0].w;
    u_xlat3.y = hlslcc_mtx4x4unity_ObjectToWorld[1].w;
    u_xlat3.z = hlslcc_mtx4x4unity_ObjectToWorld[2].w;
    u_xlat3.w = hlslcc_mtx4x4unity_ObjectToWorld[3].w;
    u_xlat5 = dot(u_xlat3, u_xlat1);
    u_xlat3 = vec4(u_xlat7) * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[3] * vec4(u_xlat5) + u_xlat2;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat1;
    vs_TEXCOORD3.xyz = u_xlat1.xyz / u_xlat1.www;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.xz = u_xlat0.xw * vec2(0.5, 0.5);
    u_xlat6 = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.w = u_xlat6 * 0.5;
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat1.xyz = in_NORMAL0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_NORMAL0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_NORMAL0.zzz + u_xlat1.xyz;
    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat16 = inversesqrt(u_xlat16);
    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(0.5<mhy_CharacterOverrideLightDir.w);
#else
    u_xlatb16 = 0.5<mhy_CharacterOverrideLightDir.w;
#endif
    u_xlat2.x = mhy_CharacterOverrideLightDir.x;
    u_xlat2.yz = (-mhy_CharacterOverrideLightDir.yz);
    u_xlat2.xyz = (bool(u_xlatb16)) ? u_xlat2.xyz : mhy_AvatarLightDir.xyz;
    u_xlat16_4 = dot(u_xlat1.xyz, u_xlat2.xyz);
    vs_TEXCOORD1.w = u_xlat16_4 * 0.497500002 + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_CharacterAmbientSensorShadowOn));
#else
    u_xlatb16 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_CharacterAmbientSensorShadowOn);
#endif
    if(u_xlatb16){
        u_xlat16 = textureLod(_CharacterAmbientSensorTex, _AmbientSensorUVs.xy, 0.0).x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb16 = !!(0.5<u_xlat16);
#else
        u_xlatb16 = 0.5<u_xlat16;
#endif
        vs_TEXCOORD4 = u_xlatb16 ? 1.0 : float(0.0);
    } else {
        vs_TEXCOORD4 = 0.0;
    //ENDIF
    }
    gl_Position = u_xlat0;
    vs_COLOR0.xyz = in_COLOR0.xyz;
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    vs_TEXCOORD2.zw = u_xlat0.zw;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	mediump vec4 _Color;
uniform 	float _MainTexAlphaUse;
uniform 	mediump float _MainTexAlphaCutoff;
uniform 	float _UseVertexColorAO;
uniform 	mediump float _LightArea;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	float _UseCoolShadowColorOrTex;
uniform 	mediump vec3 _CoolShadowMultColor;
uniform 	float _UseShadowTransition;
uniform 	float _ShadowTransitionRange;
uniform 	float _ShadowTransitionSoftness;
uniform 	mediump vec3 _SpecularColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	float _FaceBlushStrength;
uniform 	mediump vec3 _FaceBlushColor;
uniform 	mediump float _EmissionScaler;
uniform 	mediump vec3 _EmissionColor_MHY;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _TextureBiasWhenDithering;
uniform 	float _UseClipPlane;
uniform 	float _ES_CharacterAmbientLightOn;
uniform 	float _ES_CharacterAmbientBrightness;
uniform 	vec3 _ES_CharacterMainLightColor;
uniform 	vec3 _ES_CharacterAmbientLightColor;
uniform 	float _ES_CharacterMainLightRatio;
uniform 	float _ES_CharacterAmbientLightRatio;
uniform 	float _ES_CharacterColorTone;
uniform 	float _ES_CharacterPointLightWholeIntensity;
uniform 	vec4 mhy_AvatarLightDir;
uniform 	vec4 mhy_CharacterPointLightColor;
uniform 	vec4 mhy_CharacterOverrideLightDir;
uniform 	mediump vec4 _FlowMapColor01;
uniform 	mediump float _FlowScale01;
uniform 	mediump float _FlowMap01_Uspeed;
uniform 	vec4 _FlowMap01_ST;
uniform 	mediump float _FlowMap01_Vspeed;
uniform 	mediump float _Noise_Uspeed;
uniform 	vec4 _Noise_ST;
uniform 	mediump float _Noise_Vspeed;
uniform 	mediump float _NoiseFlowIntensity;
uniform 	mediump float _MaskOffset01;
uniform 	mediump float _NoiseIntensity;
uniform 	mediump float _Mask01_Power;
uniform 	mediump vec4 _FlowMapColor02;
uniform 	mediump float _FlowScale02;
uniform 	mediump float _FlowMap02_Uspeed;
uniform 	vec4 _FlowMap02_ST;
uniform 	mediump float _FlowMap02_Vspeed;
uniform 	mediump float _MaskOffset02;
uniform 	mediump float _Mask02_Power;
uniform 	mediump float _DissolveNoise_Uspeed;
uniform 	vec4 _DissovleNoise_ST;
uniform 	mediump float _DissolveNoise_Vspeed;
uniform 	mediump float _DissovleNoiseScale;
uniform 	mediump float _Dissovle;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _Noise;
uniform lowp sampler2D _FlowMap01;
uniform lowp sampler2D _Mask01;
uniform lowp sampler2D _FlowMap02;
uniform lowp sampler2D _Mask02;
uniform lowp sampler2D _DissovleNoise;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp float vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
lowp float u_xlat10_2;
int u_xlati2;
bvec3 u_xlatb2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
lowp float u_xlat10_3;
int u_xlati3;
bool u_xlatb3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec2 u_xlat16_7;
mediump vec3 u_xlat16_8;
vec3 u_xlat9;
bool u_xlatb10;
vec3 u_xlat12;
mediump vec3 u_xlat16_12;
lowp float u_xlat10_12;
int u_xlati12;
bool u_xlatb12;
vec3 u_xlat13;
mediump vec3 u_xlat16_13;
mediump float u_xlat16_14;
mediump vec2 u_xlat16_15;
mediump vec2 u_xlat16_16;
bvec2 u_xlatb20;
float u_xlat22;
bool u_xlatb22;
mediump vec2 u_xlat16_25;
float u_xlat30;
bool u_xlatb30;
float u_xlat32;
mediump float u_xlat16_32;
lowp float u_xlat10_32;
int u_xlati32;
bool u_xlatb32;
float u_xlat33;
mediump float u_xlat16_34;
mediump float u_xlat16_35;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseClipPlane));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseClipPlane);
#endif
    u_xlat16_1.x = vs_COLOR0.w + -0.00999999978;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(u_xlat16_1.x<0.0);
#else
    u_xlatb10 = u_xlat16_1.x<0.0;
#endif
    u_xlatb0 = u_xlatb0 && u_xlatb10;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(_DitherAlpha<0.949999988);
#else
        u_xlatb0 = _DitherAlpha<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb20.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb20.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb20.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = _DitherAlpha * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + -0.00999999978;
#ifdef UNITY_ADRENO_ES3
            u_xlatb0 = !!(u_xlat0.x<0.0);
#else
            u_xlatb0 = u_xlat0.x<0.0;
#endif
            if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(0.5<mhy_CharacterOverrideLightDir.w);
#else
    u_xlatb2.x = 0.5<mhy_CharacterOverrideLightDir.w;
#endif
    u_xlat3.x = mhy_CharacterOverrideLightDir.x;
    u_xlat3.yz = (-mhy_CharacterOverrideLightDir.yz);
    u_xlat2.xyz = (u_xlatb2.x) ? u_xlat3.xyz : mhy_AvatarLightDir.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat30) + u_xlat2.xyz;
    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
    u_xlat30 = _TextureBiasWhenDithering + -1.0;
    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy, u_xlat30);
    u_xlatb2.xyz = equal(vec4(_MainTexAlphaUse), vec4(3.0, 1.0, 2.0, 0.0)).xyz;
    u_xlat30 = u_xlat1.w * _FaceBlushStrength;
    u_xlat3.xyz = (-u_xlat1.xyz) + _FaceBlushColor.xyz;
    u_xlat3.xyz = vec3(u_xlat30) * u_xlat3.xyz + u_xlat1.xyz;
    u_xlat16_4.xyz = (u_xlatb2.x) ? u_xlat3.xyz : u_xlat1.xyz;
    u_xlat16_34 = u_xlat1.w + (-_MainTexAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(u_xlat16_34<0.0);
#else
    u_xlatb30 = u_xlat16_34<0.0;
#endif
    u_xlatb30 = u_xlatb2.y && u_xlatb30;
    if((int(u_xlatb30) * int(0xffffffffu))!=0){discard;}
    u_xlat16_4.xyz = u_xlat16_4.xyz * _Color.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(0.00999999978<u_xlat1.w);
#else
    u_xlatb30 = 0.00999999978<u_xlat1.w;
#endif
    u_xlatb30 = u_xlatb30 && u_xlatb2.z;
    u_xlat16_34 = (u_xlatb30) ? u_xlat1.w : 0.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorAO));
#else
    u_xlatb2.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorAO);
#endif
    u_xlat16_5.x = vs_COLOR0.x * 0.5;
    u_xlat16_5.x = (u_xlatb2.x) ? u_xlat16_5.x : 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat16_5.x<0.0500000007);
#else
    u_xlatb12 = u_xlat16_5.x<0.0500000007;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(0.949999988<u_xlat16_5.x);
#else
    u_xlatb22 = 0.949999988<u_xlat16_5.x;
#endif
    u_xlat32 = u_xlat16_5.x + vs_TEXCOORD1.w;
    u_xlat32 = u_xlat32 * 0.5;
    u_xlat16_5.x = (u_xlatb22) ? 1.0 : u_xlat32;
    u_xlat16_5.x = (u_xlatb12) ? 0.0 : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb2.x) ? u_xlat16_5.x : vs_TEXCOORD1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(u_xlat16_5.x<_LightArea);
#else
    u_xlatb2.x = u_xlat16_5.x<_LightArea;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition));
#else
    u_xlatb12 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition);
#endif
    u_xlat16_5.x = (-u_xlat16_5.x) + _LightArea;
    u_xlat16_5.x = u_xlat16_5.x / _ShadowTransitionRange;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(u_xlat16_5.x>=1.0);
#else
    u_xlatb22 = u_xlat16_5.x>=1.0;
#endif
    u_xlat16_32 = u_xlat16_5.x + 0.00999999978;
    u_xlat16_32 = log2(u_xlat16_32);
    u_xlat32 = u_xlat16_32 * _ShadowTransitionSoftness;
    u_xlat32 = exp2(u_xlat32);
    u_xlat32 = min(u_xlat32, 1.0);
    u_xlat22 = (u_xlatb22) ? 1.0 : u_xlat32;
    u_xlat22 = (u_xlatb12) ? u_xlat22 : 1.0;
    u_xlat22 = u_xlatb2.x ? u_xlat22 : float(0.0);
#ifdef UNITY_ADRENO_ES3
    { bool cond = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(vs_TEXCOORD4); u_xlati32 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati32 = int((vec4(0.0, 0.0, 0.0, 0.0)!=vec4(vs_TEXCOORD4)) ? 0xFFFFFFFFu : uint(0u));
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex));
#else
    u_xlatb3 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex);
#endif
    u_xlat16_13.xyz = vec3(_FirstShadowMultColor.xxyz.y + (-_CoolShadowMultColor.x), _FirstShadowMultColor.xxyz.z + (-_CoolShadowMultColor.y), float(_FirstShadowMultColor.z) + (-_CoolShadowMultColor.z));
    u_xlat13.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_13.xyz + _CoolShadowMultColor.xyz;
    u_xlat16_5.xyz = (bool(u_xlatb3)) ? u_xlat13.xyz : vec3(_FirstShadowMultColor.x, _FirstShadowMultColor.y, _FirstShadowMultColor.z);
    u_xlati3 = ~u_xlati32;
    u_xlati12 = u_xlatb12 ? u_xlati3 : int(0);
    u_xlat16_3.xyz = u_xlat16_5.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat3.xyz = vec3(u_xlat22) * u_xlat16_3.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_5.xyz = (int(u_xlati12) != 0) ? u_xlat3.xyz : u_xlat16_5.xyz;
    u_xlat16_35 = dot(vs_TEXCOORD1.xyz, u_xlat0.xyz);
    u_xlat16_35 = max(u_xlat16_35, 0.00100000005);
    u_xlat16_35 = log2(u_xlat16_35);
    u_xlat16_35 = u_xlat16_35 * _Shininess;
    u_xlat16_35 = exp2(u_xlat16_35);
    u_xlat16_6.xyz = vec3(u_xlat16_35) * _SpecularColor.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(_SpecMulti);
    u_xlat16_4.xyz = vec3(u_xlat16_4.x * _EmissionColor_MHY.xxyz.y, u_xlat16_4.y * _EmissionColor_MHY.xxyz.z, u_xlat16_4.z * float(_EmissionColor_MHY.z));
    u_xlat0.xyz = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0).xyz;
    u_xlati2 = int(uint(u_xlatb2.x) * 0xffffffffu | uint(u_xlati32));
    u_xlat12.xyz = u_xlat0.xyz * u_xlat16_5.xyz;
    u_xlat0.xyz = (int(u_xlati2) != 0) ? u_xlat12.xyz : u_xlat0.xyz;
    u_xlat0.xyz = u_xlat16_6.xyz * vec3(0.5, 0.5, 0.5) + u_xlat0.xyz;
    u_xlat2.xy = vs_TEXCOORD0.zw * _FlowMap01_ST.xy + _FlowMap01_ST.zw;
    u_xlat16_5.x = _Time.y * _FlowMap01_Uspeed + u_xlat2.x;
    u_xlat16_5.y = _Time.y * _FlowMap01_Vspeed + u_xlat2.y;
    u_xlat2.xy = vs_TEXCOORD0.zw * _Noise_ST.xy + _Noise_ST.zw;
    u_xlat16_6.x = _Time.y * _Noise_Uspeed + u_xlat2.x;
    u_xlat16_6.y = _Time.y * _Noise_Vspeed + u_xlat2.y;
    u_xlat10_2 = textureLod(_Noise, u_xlat16_6.xy, 0.0).x;
    u_xlat16_25.x = _MaskOffset01 * 1.39999998 + -0.699999988;
    u_xlat16_16.x = u_xlat10_2 * _NoiseIntensity;
    u_xlat12.xy = vs_TEXCOORD0.zw * _FlowMap02_ST.xy + _FlowMap02_ST.zw;
    u_xlat16_7.x = _Time.y * _FlowMap02_Uspeed + u_xlat12.x;
    u_xlat16_7.y = _Time.y * _FlowMap02_Vspeed + u_xlat12.y;
    u_xlat16_25.y = _MaskOffset02 * 1.39999998 + -0.699999988;
    u_xlat16_8.xyz = _FlowMapColor01.xyz * vec3(_FlowScale01);
    u_xlat16_5.xy = vec2(u_xlat10_2) * vec2(vec2(_NoiseFlowIntensity, _NoiseFlowIntensity)) + u_xlat16_5.xy;
    u_xlat10_12 = textureLod(_FlowMap01, u_xlat16_5.xy, 0.0).x;
    u_xlat16_12.xyz = vec3(u_xlat10_12) * u_xlat16_8.xyz;
    u_xlat16_5.x = (-vs_TEXCOORD0.z) + 1.0;
    u_xlat16_1.xz = u_xlat16_25.xy + u_xlat16_5.xx;
    u_xlat16_1.yw = vec2(u_xlat10_2) * vec2(vec2(_NoiseIntensity, _NoiseIntensity)) + (-vs_TEXCOORD0.ww);
    u_xlat16_16.y = 1.0;
    u_xlat16_15.xy = u_xlat16_1.xy + u_xlat16_16.xy;
    u_xlat10_3 = textureLod(_Mask01, u_xlat16_15.xy, 0.0).x;
    u_xlat16_3.x = max(u_xlat10_3, 9.99999975e-05);
    u_xlat16_3.x = log2(u_xlat16_3.x);
    u_xlat16_3.x = u_xlat16_3.x * _Mask01_Power;
    u_xlat16_3.x = exp2(u_xlat16_3.x);
    u_xlat16_8.xyz = _FlowMapColor02.xyz * vec3(_FlowScale02);
    u_xlat16_15.xy = vec2(u_xlat10_2) * vec2(vec2(_NoiseFlowIntensity, _NoiseFlowIntensity)) + u_xlat16_7.xy;
    u_xlat10_2 = textureLod(_FlowMap02, u_xlat16_15.xy, 0.0).x;
    u_xlat16_13.xyz = vec3(u_xlat10_2) * u_xlat16_8.xyz;
    u_xlat16_5.xy = vec2(u_xlat16_1.z + u_xlat16_16.x, u_xlat16_1.w + u_xlat16_16.y);
    u_xlat10_2 = textureLod(_Mask02, u_xlat16_5.xy, 0.0).x;
    u_xlat16_2.x = max(u_xlat10_2, 9.99999975e-05);
    u_xlat16_2.x = log2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * _Mask02_Power;
    u_xlat16_2.x = exp2(u_xlat16_2.x);
    u_xlat16_13.xyz = u_xlat16_2.xxx * u_xlat16_13.xyz;
    u_xlat16_2.xyz = u_xlat16_12.xyz * u_xlat16_3.xxx + u_xlat16_13.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(_EmissionScaler) + u_xlat16_2.xyz;
    u_xlat3.xyz = (-u_xlat0.xyz) + u_xlat16_4.xyz;
    u_xlat3.xyz = vec3(u_xlat16_34) * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat9.xy = vs_TEXCOORD0.zw * _DissovleNoise_ST.xy + _DissovleNoise_ST.zw;
    u_xlat16_4.x = _Time.y * _DissolveNoise_Uspeed + u_xlat9.x;
    u_xlat16_4.y = _Time.y * _DissolveNoise_Vspeed + u_xlat9.y;
    u_xlat10_32 = textureLod(_DissovleNoise, u_xlat16_4.xy, 0.0).x;
    u_xlat32 = u_xlat10_32 * _DissovleNoiseScale + vs_TEXCOORD0.z;
#ifdef UNITY_ADRENO_ES3
    u_xlatb32 = !!(_Dissovle>=u_xlat32);
#else
    u_xlatb32 = _Dissovle>=u_xlat32;
#endif
    u_xlat0.xyz = (bool(u_xlatb30)) ? u_xlat3.xyz : u_xlat0.xyz;
    u_xlat0.xyz = u_xlat16_2.xyz + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(0.00999999978<u_xlat16_34);
#else
    u_xlatb30 = 0.00999999978<u_xlat16_34;
#endif
    if((int(u_xlatb32) * int(0xffffffffu))==0){discard;}
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn));
#else
    u_xlatb2.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn);
#endif
    u_xlat12.xyz = u_xlat0.xyz * vec3(vec3(_ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness));
    u_xlat3.xyz = vec3(vec3(_ES_CharacterPointLightWholeIntensity, _ES_CharacterPointLightWholeIntensity, _ES_CharacterPointLightWholeIntensity)) * mhy_CharacterPointLightColor.xyz;
    u_xlat9.xyz = _ES_CharacterMainLightColor.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat9.xyz = min(max(u_xlat9.xyz, 0.0), 1.0);
#else
    u_xlat9.xyz = clamp(u_xlat9.xyz, 0.0, 1.0);
#endif
    u_xlat33 = (-mhy_CharacterPointLightColor.w) + 1.0;
    u_xlat3.xyz = u_xlat9.xyz * vec3(u_xlat33) + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat3.xyz = vec3(vec3(_ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio)) * u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat12.xyz = u_xlat12.xyz * u_xlat3.xyz;
    u_xlat3.xyz = _ES_CharacterAmbientLightColor.xyz * vec3(_ES_CharacterAmbientLightRatio);
    u_xlat16_4.xyz = u_xlat12.xyz * vec3(10.0, 10.0, 10.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.xyz = min(max(u_xlat16_4.xyz, 0.0), 1.0);
#else
    u_xlat16_4.xyz = clamp(u_xlat16_4.xyz, 0.0, 1.0);
#endif
    u_xlat12.xyz = u_xlat3.xyz * u_xlat16_4.xyz + u_xlat12.xyz;
    u_xlat16_4.xyz = (u_xlatb2.x) ? u_xlat12.xyz : u_xlat0.xyz;
    u_xlat16_5.xyz = u_xlat0.xyz + (-u_xlat16_4.xyz);
    u_xlat16_5.xyz = vec3(u_xlat16_34) * u_xlat16_5.xyz + u_xlat16_4.xyz;
    u_xlat16_0.xyz = (bool(u_xlatb30)) ? u_xlat16_5.xyz : u_xlat16_4.xyz;
    u_xlat16_4.x = max(u_xlat16_0.z, u_xlat16_0.y);
    u_xlat16_1.w = max(u_xlat16_0.x, u_xlat16_4.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(1.0<u_xlat16_1.w);
#else
    u_xlatb2.x = 1.0<u_xlat16_1.w;
#endif
    u_xlat16_1.xyz = u_xlat16_0.xyz / u_xlat16_1.www;
    u_xlat16_0.w = 1.0;
    u_xlat16_0 = (u_xlatb2.x) ? u_xlat16_1 : u_xlat16_0;
    u_xlat16_4.x = min(u_xlat16_0.w, 1.10000002);
    u_xlat16_14 = u_xlat16_0.w + (-u_xlat16_4.x);
    u_xlat16_4.x = u_xlat16_34 * u_xlat16_14 + u_xlat16_4.x;
    u_xlat16_2.x = u_xlat16_4.x * 0.0500000007;
    SV_Target0.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb12 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_4.x = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb12) ? u_xlat16_4.x : 0.0;
    SV_Target0.w = 0.0156862754;
    SV_Target1.xyz = u_xlat16_0.xyz;
    SV_Target1.w = u_xlat16_2.x;
    SV_Target2.xy = vec2(0.0, 0.0);
    SV_Target2.w = vs_TEXCOORD4;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "LINE_INTERPOLATION" "TOON_SPECULAR_ON" "TOON_LIGHTMAP_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	vec4 _MainTex_ST;
uniform 	float _CharacterAmbientSensorShadowOn;
uniform 	vec4 _AmbientSensorUVs;
uniform 	float _UseClipPlane;
uniform 	float _ClipPlaneWorld;
uniform 	vec4 _ClipPlane;
uniform 	vec4 mhy_AvatarLightDir;
uniform 	vec4 mhy_CharacterOverrideLightDir;
uniform lowp sampler2D _CharacterAmbientSensorTex;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp float vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD6;
vec4 u_xlat0;
bvec2 u_xlatb0;
vec4 u_xlat1;
bool u_xlatb1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump float u_xlat16_4;
float u_xlat5;
float u_xlat6;
float u_xlat7;
float u_xlat10;
bool u_xlatb10;
float u_xlat15;
bool u_xlatb15;
float u_xlat16;
bool u_xlatb16;
void main()
{
    u_xlatb0.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseClipPlane, _ClipPlaneWorld, _UseClipPlane, _UseClipPlane)).xy;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(abs(_ClipPlane.w)<0.00100000005);
#else
    u_xlatb10 = abs(_ClipPlane.w)<0.00100000005;
#endif
    u_xlat1.xyz = _ClipPlane.www * _ClipPlane.xyz;
    u_xlat1.xyz = (bool(u_xlatb10)) ? vec3(0.0, 0.0, 0.0) : u_xlat1.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_WorldToObject[1];
    u_xlat2 = hlslcc_mtx4x4unity_WorldToObject[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_WorldToObject[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_WorldToObject[3];
    u_xlat1.xyz = u_xlat1.xyz / u_xlat1.www;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * _ClipPlane.yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _ClipPlane.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _ClipPlane.zzz + u_xlat2.xyz;
    u_xlat10 = dot(u_xlat1.xyz, u_xlat2.xyz);
    u_xlat15 = dot(in_POSITION0.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(u_xlat15<u_xlat10);
#else
    u_xlatb1 = u_xlat15<u_xlat10;
#endif
    u_xlat10 = (-u_xlat10) + u_xlat15;
    u_xlat2.xyz = (-vec3(u_xlat10)) * u_xlat2.xyz + in_POSITION0.xyz;
    u_xlat2.w = 0.0;
    u_xlat3.xyz = in_POSITION0.xyz;
    u_xlat3.w = in_COLOR0.w;
    u_xlat1 = (bool(u_xlatb1)) ? u_xlat2 : u_xlat3;
    u_xlat10 = dot(in_POSITION0.xyz, _ClipPlane.xyz);
    u_xlat15 = _ClipPlane.w + -0.00999999978;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(u_xlat10<u_xlat15);
#else
    u_xlatb15 = u_xlat10<u_xlat15;
#endif
    u_xlat10 = u_xlat10 + (-_ClipPlane.w);
    u_xlat2.xyz = (-vec3(u_xlat10)) * _ClipPlane.xyz + in_POSITION0.xyz;
    u_xlat2.w = 0.0;
    u_xlat2 = (bool(u_xlatb15)) ? u_xlat2 : u_xlat3;
    u_xlat1.xyz = (u_xlatb0.y) ? u_xlat1.xyz : u_xlat2.xyz;
    u_xlat16_4 = (u_xlatb0.y) ? u_xlat1.w : u_xlat2.w;
    u_xlat1.xyz = (u_xlatb0.x) ? u_xlat1.xyz : in_POSITION0.xyz;
    vs_COLOR0.w = (u_xlatb0.x) ? u_xlat16_4 : in_COLOR0.w;
    u_xlat0.xyw = (-_WorldSpaceCameraPos.xyz) + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat2.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;
    u_xlat2.y = hlslcc_mtx4x4unity_ObjectToWorld[1].x;
    u_xlat2.z = hlslcc_mtx4x4unity_ObjectToWorld[2].x;
    u_xlat2.w = u_xlat0.x;
    u_xlat1.w = 1.0;
    u_xlat2.x = dot(u_xlat2, u_xlat1);
    u_xlat3.x = hlslcc_mtx4x4unity_ObjectToWorld[0].y;
    u_xlat3.y = hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat3.z = hlslcc_mtx4x4unity_ObjectToWorld[2].y;
    u_xlat3.w = u_xlat0.y;
    u_xlat7 = dot(u_xlat3, u_xlat1);
    u_xlat0.x = hlslcc_mtx4x4unity_ObjectToWorld[0].z;
    u_xlat0.y = hlslcc_mtx4x4unity_ObjectToWorld[1].z;
    u_xlat0.z = hlslcc_mtx4x4unity_ObjectToWorld[2].z;
    u_xlat0.x = dot(u_xlat0, u_xlat1);
    u_xlat3.x = hlslcc_mtx4x4unity_ObjectToWorld[0].w;
    u_xlat3.y = hlslcc_mtx4x4unity_ObjectToWorld[1].w;
    u_xlat3.z = hlslcc_mtx4x4unity_ObjectToWorld[2].w;
    u_xlat3.w = hlslcc_mtx4x4unity_ObjectToWorld[3].w;
    u_xlat5 = dot(u_xlat3, u_xlat1);
    u_xlat3 = vec4(u_xlat7) * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[3] * vec4(u_xlat5) + u_xlat2;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat1;
    vs_TEXCOORD3.xyz = u_xlat1.xyz / u_xlat1.www;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.xz = u_xlat0.xw * vec2(0.5, 0.5);
    u_xlat6 = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.w = u_xlat6 * 0.5;
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat1.xyz = in_NORMAL0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_NORMAL0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_NORMAL0.zzz + u_xlat1.xyz;
    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat16 = inversesqrt(u_xlat16);
    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(0.5<mhy_CharacterOverrideLightDir.w);
#else
    u_xlatb16 = 0.5<mhy_CharacterOverrideLightDir.w;
#endif
    u_xlat2.x = mhy_CharacterOverrideLightDir.x;
    u_xlat2.yz = (-mhy_CharacterOverrideLightDir.yz);
    u_xlat2.xyz = (bool(u_xlatb16)) ? u_xlat2.xyz : mhy_AvatarLightDir.xyz;
    u_xlat16_4 = dot(u_xlat1.xyz, u_xlat2.xyz);
    vs_TEXCOORD1.w = u_xlat16_4 * 0.497500002 + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_CharacterAmbientSensorShadowOn));
#else
    u_xlatb16 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_CharacterAmbientSensorShadowOn);
#endif
    if(u_xlatb16){
        u_xlat16 = textureLod(_CharacterAmbientSensorTex, _AmbientSensorUVs.xy, 0.0).x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb16 = !!(0.5<u_xlat16);
#else
        u_xlatb16 = 0.5<u_xlat16;
#endif
        vs_TEXCOORD4 = u_xlatb16 ? 1.0 : float(0.0);
    } else {
        vs_TEXCOORD4 = 0.0;
    //ENDIF
    }
    gl_Position = u_xlat0;
    vs_COLOR0.xyz = in_COLOR0.xyz;
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    vs_TEXCOORD2.zw = u_xlat0.zw;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	mediump vec4 _Color;
uniform 	float _MainTexAlphaUse;
uniform 	mediump float _MainTexAlphaCutoff;
uniform 	float _UseLightMapColorAO;
uniform 	float _UseVertexColorAO;
uniform 	mediump float _LightArea;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	float _UseCoolShadowColorOrTex;
uniform 	mediump vec3 _CoolShadowMultColor;
uniform 	float _UseShadowTransition;
uniform 	float _ShadowTransitionRange;
uniform 	float _ShadowTransitionSoftness;
uniform 	mediump vec3 _SpecularColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	float _FaceBlushStrength;
uniform 	mediump vec3 _FaceBlushColor;
uniform 	mediump float _EmissionScaler;
uniform 	mediump vec3 _EmissionColor_MHY;
uniform 	float _UseMaterial2;
uniform 	mediump vec3 _Color2;
uniform 	mediump vec3 _FirstShadowMultColor2;
uniform 	mediump vec3 _CoolShadowMultColor2;
uniform 	mediump float _Shininess2;
uniform 	mediump float _SpecMulti2;
uniform 	float _ShadowTransitionRange2;
uniform 	float _ShadowTransitionSoftness2;
uniform 	float _UseMaterial3;
uniform 	mediump vec3 _Color3;
uniform 	mediump vec3 _FirstShadowMultColor3;
uniform 	mediump vec3 _CoolShadowMultColor3;
uniform 	mediump float _Shininess3;
uniform 	mediump float _SpecMulti3;
uniform 	float _ShadowTransitionRange3;
uniform 	float _ShadowTransitionSoftness3;
uniform 	float _UseMaterial4;
uniform 	mediump vec3 _Color4;
uniform 	mediump vec3 _FirstShadowMultColor4;
uniform 	mediump vec3 _CoolShadowMultColor4;
uniform 	mediump float _Shininess4;
uniform 	mediump float _SpecMulti4;
uniform 	float _ShadowTransitionRange4;
uniform 	float _ShadowTransitionSoftness4;
uniform 	float _UseMaterial5;
uniform 	mediump vec3 _Color5;
uniform 	mediump vec3 _FirstShadowMultColor5;
uniform 	mediump vec3 _CoolShadowMultColor5;
uniform 	mediump float _Shininess5;
uniform 	mediump float _SpecMulti5;
uniform 	float _ShadowTransitionRange5;
uniform 	float _ShadowTransitionSoftness5;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _TextureBiasWhenDithering;
uniform 	float _UseClipPlane;
uniform 	float _ES_CharacterAmbientLightOn;
uniform 	float _ES_CharacterAmbientBrightness;
uniform 	vec3 _ES_CharacterMainLightColor;
uniform 	vec3 _ES_CharacterAmbientLightColor;
uniform 	float _ES_CharacterMainLightRatio;
uniform 	float _ES_CharacterAmbientLightRatio;
uniform 	float _ES_CharacterColorTone;
uniform 	float _ES_CharacterPointLightWholeIntensity;
uniform 	vec4 mhy_AvatarLightDir;
uniform 	vec4 mhy_CharacterPointLightColor;
uniform 	vec4 mhy_CharacterOverrideLightDir;
uniform 	mediump vec4 _FlowMapColor01;
uniform 	mediump float _FlowScale01;
uniform 	mediump float _FlowMap01_Uspeed;
uniform 	vec4 _FlowMap01_ST;
uniform 	mediump float _FlowMap01_Vspeed;
uniform 	mediump float _Noise_Uspeed;
uniform 	vec4 _Noise_ST;
uniform 	mediump float _Noise_Vspeed;
uniform 	mediump float _NoiseFlowIntensity;
uniform 	mediump float _MaskOffset01;
uniform 	mediump float _NoiseIntensity;
uniform 	mediump float _Mask01_Power;
uniform 	mediump vec4 _FlowMapColor02;
uniform 	mediump float _FlowScale02;
uniform 	mediump float _FlowMap02_Uspeed;
uniform 	vec4 _FlowMap02_ST;
uniform 	mediump float _FlowMap02_Vspeed;
uniform 	mediump float _MaskOffset02;
uniform 	mediump float _Mask02_Power;
uniform 	mediump float _DissolveNoise_Uspeed;
uniform 	vec4 _DissovleNoise_ST;
uniform 	mediump float _DissolveNoise_Vspeed;
uniform 	mediump float _DissovleNoiseScale;
uniform 	mediump float _Dissovle;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _Noise;
uniform lowp sampler2D _FlowMap01;
uniform lowp sampler2D _Mask01;
uniform lowp sampler2D _FlowMap02;
uniform lowp sampler2D _Mask02;
uniform lowp sampler2D _DissovleNoise;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp float vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
vec3 u_xlat2;
mediump float u_xlat16_2;
bvec3 u_xlatb2;
vec3 u_xlat3;
mediump float u_xlat16_3;
lowp vec4 u_xlat10_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
bvec4 u_xlatb5;
vec3 u_xlat6;
mediump vec3 u_xlat16_6;
bvec3 u_xlatb6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
bool u_xlatb11;
vec3 u_xlat13;
mediump vec3 u_xlat16_13;
lowp float u_xlat10_13;
bool u_xlatb13;
mediump vec3 u_xlat16_14;
int u_xlati14;
bool u_xlatb14;
mediump float u_xlat16_15;
mediump vec3 u_xlat16_18;
mediump vec3 u_xlat16_19;
bvec2 u_xlatb22;
float u_xlat24;
bool u_xlatb24;
float u_xlat33;
mediump float u_xlat16_33;
lowp float u_xlat10_33;
int u_xlati33;
bool u_xlatb33;
float u_xlat35;
mediump float u_xlat16_35;
int u_xlati35;
float u_xlat36;
int u_xlati36;
mediump float u_xlat16_37;
mediump float u_xlat16_40;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseClipPlane));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseClipPlane);
#endif
    u_xlat16_1.x = vs_COLOR0.w + -0.00999999978;
#ifdef UNITY_ADRENO_ES3
    u_xlatb11 = !!(u_xlat16_1.x<0.0);
#else
    u_xlatb11 = u_xlat16_1.x<0.0;
#endif
    u_xlatb0 = u_xlatb0 && u_xlatb11;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(_DitherAlpha<0.949999988);
#else
        u_xlatb0 = _DitherAlpha<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb22.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb22.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb22.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = _DitherAlpha * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + -0.00999999978;
#ifdef UNITY_ADRENO_ES3
            u_xlatb0 = !!(u_xlat0.x<0.0);
#else
            u_xlatb0 = u_xlat0.x<0.0;
#endif
            if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(0.5<mhy_CharacterOverrideLightDir.w);
#else
    u_xlatb2.x = 0.5<mhy_CharacterOverrideLightDir.w;
#endif
    u_xlat3.x = mhy_CharacterOverrideLightDir.x;
    u_xlat3.yz = (-mhy_CharacterOverrideLightDir.yz);
    u_xlat2.xyz = (u_xlatb2.x) ? u_xlat3.xyz : mhy_AvatarLightDir.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat33) + u_xlat2.xyz;
    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat0.xyz = vec3(u_xlat33) * u_xlat0.xyz;
    u_xlat33 = _TextureBiasWhenDithering + -1.0;
    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy, u_xlat33);
    u_xlatb2.xyz = equal(vec4(_MainTexAlphaUse), vec4(3.0, 1.0, 2.0, 0.0)).xyz;
    u_xlat35 = u_xlat1.w * _FaceBlushStrength;
    u_xlat3.xyz = (-u_xlat1.xyz) + _FaceBlushColor.xyz;
    u_xlat3.xyz = vec3(u_xlat35) * u_xlat3.xyz + u_xlat1.xyz;
    u_xlat16_4.xyz = (u_xlatb2.x) ? u_xlat3.xyz : u_xlat1.xyz;
    u_xlat16_37 = u_xlat1.w + (-_MainTexAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(u_xlat16_37<0.0);
#else
    u_xlatb2.x = u_xlat16_37<0.0;
#endif
    u_xlatb2.x = u_xlatb2.y && u_xlatb2.x;
    if((int(u_xlatb2.x) * int(0xffffffffu))!=0){discard;}
    u_xlat10_3 = texture(_LightMapTex, vs_TEXCOORD0.xy, u_xlat33);
    u_xlatb2.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseLightMapColorAO, _UseVertexColorAO, _UseLightMapColorAO, _UseLightMapColorAO)).xy;
    u_xlat16_37 = (u_xlatb2.x) ? u_xlat10_3.y : 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseMaterial2));
#else
    u_xlatb33 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseMaterial2);
#endif
    u_xlatb5 = greaterThanEqual(u_xlat10_3.wwww, vec4(0.800000012, 0.400000006, 0.200000003, 0.600000024));
    u_xlatb33 = u_xlatb33 && u_xlatb5.x;
    u_xlat33 = (u_xlatb33) ? 2.0 : 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseMaterial3));
#else
    u_xlatb2.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseMaterial3);
#endif
    u_xlatb2.x = u_xlatb5.y && u_xlatb2.x;
    u_xlatb6.xyz = lessThan(u_xlat10_3.wwww, vec4(0.600000024, 0.400000006, 0.800000012, 0.0)).xyz;
    u_xlatb2.x = u_xlatb2.x && u_xlatb6.x;
    u_xlat33 = (u_xlatb2.x) ? 3.0 : u_xlat33;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseMaterial4));
#else
    u_xlatb2.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseMaterial4);
#endif
    u_xlatb2.x = u_xlatb5.z && u_xlatb2.x;
    u_xlatb2.x = u_xlatb6.y && u_xlatb2.x;
    u_xlat33 = (u_xlatb2.x) ? 4.0 : u_xlat33;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseMaterial5));
#else
    u_xlatb2.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseMaterial5);
#endif
    u_xlatb2.x = u_xlatb5.w && u_xlatb2.x;
    u_xlatb2.x = u_xlatb6.z && u_xlatb2.x;
    u_xlat33 = (u_xlatb2.x) ? 5.0 : u_xlat33;
    u_xlatb5 = equal(vec4(u_xlat33), vec4(2.0, 3.0, 4.0, 5.0));
    u_xlat16_7.xyz = (u_xlatb5.x) ? _Color2.xyz : _Color.xyz;
    u_xlat16_7.xyz = (u_xlatb5.y) ? _Color3.xyz : u_xlat16_7.xyz;
    u_xlat16_7.xyz = (u_xlatb5.z) ? _Color4.xyz : u_xlat16_7.xyz;
    u_xlat16_7.xyz = (u_xlatb5.w) ? _Color5.xyz : u_xlat16_7.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_7.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(0.00999999978<u_xlat1.w);
#else
    u_xlatb2.x = 0.00999999978<u_xlat1.w;
#endif
    u_xlatb2.x = u_xlatb2.x && u_xlatb2.z;
    u_xlat16_7.x = (u_xlatb2.x) ? u_xlat1.w : 0.0;
    u_xlat16_18.x = u_xlat16_37 * vs_COLOR0.x;
    u_xlat16_37 = (u_xlatb2.y) ? u_xlat16_18.x : u_xlat16_37;
#ifdef UNITY_ADRENO_ES3
    u_xlatb13 = !!(u_xlat16_37<0.0500000007);
#else
    u_xlatb13 = u_xlat16_37<0.0500000007;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(0.949999988<u_xlat16_37);
#else
    u_xlatb24 = 0.949999988<u_xlat16_37;
#endif
    u_xlat35 = u_xlat16_37 + vs_TEXCOORD1.w;
    u_xlat35 = u_xlat35 * 0.5;
    u_xlat16_37 = (u_xlatb24) ? 1.0 : u_xlat35;
    u_xlat16_37 = (u_xlatb13) ? 0.0 : u_xlat16_37;
#ifdef UNITY_ADRENO_ES3
    u_xlatb13 = !!(u_xlat16_37<_LightArea);
#else
    u_xlatb13 = u_xlat16_37<_LightArea;
#endif
    if(u_xlatb13){
#ifdef UNITY_ADRENO_ES3
        u_xlatb13 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition));
#else
        u_xlatb13 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition);
#endif
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(u_xlat33==1.0);
#else
        u_xlatb24 = u_xlat33==1.0;
#endif
        u_xlat16_8.x = (u_xlatb24) ? _ShadowTransitionRange : 0.0;
        u_xlat16_8.y = (u_xlatb24) ? _ShadowTransitionSoftness : 0.0;
        u_xlat16_18.xy = (u_xlatb5.x) ? vec2(_ShadowTransitionRange2, _ShadowTransitionSoftness2) : u_xlat16_8.xy;
        u_xlat16_18.xy = (u_xlatb5.y) ? vec2(_ShadowTransitionRange3, _ShadowTransitionSoftness3) : u_xlat16_18.xy;
        u_xlat16_18.xy = (u_xlatb5.z) ? vec2(_ShadowTransitionRange4, _ShadowTransitionSoftness4) : u_xlat16_18.xy;
        u_xlat16_18.xy = (u_xlatb5.w) ? vec2(_ShadowTransitionRange5, _ShadowTransitionSoftness5) : u_xlat16_18.xy;
        u_xlat16_37 = (-u_xlat16_37) + _LightArea;
        u_xlat16_37 = u_xlat16_37 / u_xlat16_18.x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(u_xlat16_37>=1.0);
#else
        u_xlatb24 = u_xlat16_37>=1.0;
#endif
        u_xlat16_35 = u_xlat16_37 + 0.00999999978;
        u_xlat16_35 = log2(u_xlat16_35);
        u_xlat16_35 = u_xlat16_35 * u_xlat16_18.y;
        u_xlat16_35 = exp2(u_xlat16_35);
        u_xlat35 = min(u_xlat16_35, 1.0);
        u_xlat24 = (u_xlatb24) ? 1.0 : u_xlat35;
        u_xlat13.x = (u_xlatb13) ? u_xlat24 : 1.0;
        u_xlat16_37 = 0.0;
    } else {
        u_xlat13.x = 0.0;
        u_xlat16_37 = 1.0;
    //ENDIF
    }
    u_xlat24 = (-u_xlat16_37) + 1.0;
#ifdef UNITY_ADRENO_ES3
    { bool cond = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(vs_TEXCOORD4); u_xlati35 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati35 = int((vec4(0.0, 0.0, 0.0, 0.0)!=vec4(vs_TEXCOORD4)) ? 0xFFFFFFFFu : uint(0u));
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(u_xlat33==1.0);
#else
    u_xlatb33 = u_xlat33==1.0;
#endif
    if(u_xlatb33){
#ifdef UNITY_ADRENO_ES3
        u_xlatb14 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex));
#else
        u_xlatb14 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex);
#endif
        u_xlat16_6.xyz = vec3(_FirstShadowMultColor.xxyz.y + (-_CoolShadowMultColor.x), _FirstShadowMultColor.xxyz.z + (-_CoolShadowMultColor.y), float(_FirstShadowMultColor.z) + (-_CoolShadowMultColor.z));
        u_xlat6.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_6.xyz + _CoolShadowMultColor.xyz;
        u_xlat16_18.xyz = (bool(u_xlatb14)) ? u_xlat6.xyz : vec3(_FirstShadowMultColor.x, _FirstShadowMultColor.y, _FirstShadowMultColor.z);
    } else {
        if(u_xlatb5.x){
#ifdef UNITY_ADRENO_ES3
            u_xlatb14 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex));
#else
            u_xlatb14 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex);
#endif
            u_xlat16_6.xyz = _FirstShadowMultColor2.xyz + (-_CoolShadowMultColor2.xyz);
            u_xlat6.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_6.xyz + _CoolShadowMultColor2.xyz;
            u_xlat16_18.xyz = (bool(u_xlatb14)) ? u_xlat6.xyz : _FirstShadowMultColor2.xyz;
        } else {
#ifdef UNITY_ADRENO_ES3
            u_xlatb14 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex));
#else
            u_xlatb14 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex);
#endif
            u_xlat16_6.xyz = _FirstShadowMultColor3.xyz + (-_CoolShadowMultColor3.xyz);
            u_xlat6.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_6.xyz + _CoolShadowMultColor3.xyz;
            u_xlat16_8.xyz = (bool(u_xlatb14)) ? u_xlat6.xyz : _FirstShadowMultColor3.xyz;
            u_xlat16_6.xyz = _FirstShadowMultColor4.xyz + (-_CoolShadowMultColor4.xyz);
            u_xlat6.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_6.xyz + _CoolShadowMultColor4.xyz;
            u_xlat16_9.xyz = (bool(u_xlatb14)) ? u_xlat6.xyz : _FirstShadowMultColor4.xyz;
            u_xlat16_6.xyz = _FirstShadowMultColor5.xyz + (-_CoolShadowMultColor5.xyz);
            u_xlat6.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_6.xyz + _CoolShadowMultColor5.xyz;
            u_xlat16_10.xyz = (bool(u_xlatb14)) ? u_xlat6.xyz : _FirstShadowMultColor5.xyz;
            u_xlat16_9.xyz = (u_xlatb5.z) ? u_xlat16_9.xyz : u_xlat16_10.xyz;
            u_xlat16_18.xyz = (u_xlatb5.y) ? u_xlat16_8.xyz : u_xlat16_9.xyz;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition));
#else
    u_xlatb14 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition);
#endif
    u_xlati36 = ~u_xlati35;
    u_xlati14 = u_xlatb14 ? u_xlati36 : int(0);
    u_xlat16_6.xyz = u_xlat16_18.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat6.xyz = u_xlat13.xxx * u_xlat16_6.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_18.xyz = (int(u_xlati14) != 0) ? u_xlat6.xyz : u_xlat16_18.xyz;
    u_xlat16_37 = (u_xlatb5.z) ? _Shininess4 : _Shininess5;
    u_xlat16_8.x = (u_xlatb5.z) ? _SpecMulti4 : _SpecMulti5;
    u_xlat16_37 = (u_xlatb5.y) ? _Shininess3 : u_xlat16_37;
    u_xlat16_8.x = (u_xlatb5.y) ? _SpecMulti3 : u_xlat16_8.x;
    u_xlat16_37 = (u_xlatb5.x) ? _Shininess2 : u_xlat16_37;
    u_xlat16_8.x = (u_xlatb5.x) ? _SpecMulti2 : u_xlat16_8.x;
    u_xlat16_37 = (u_xlatb33) ? _Shininess : u_xlat16_37;
    u_xlat16_8.x = (u_xlatb33) ? _SpecMulti : u_xlat16_8.x;
    u_xlat16_19.x = dot(vs_TEXCOORD1.xyz, u_xlat0.xyz);
    u_xlat16_19.x = max(u_xlat16_19.x, 0.00100000005);
    u_xlat16_19.x = log2(u_xlat16_19.x);
    u_xlat16_37 = u_xlat16_37 * u_xlat16_19.x;
    u_xlat16_37 = exp2(u_xlat16_37);
    u_xlat0.x = (-u_xlat10_3.z) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat0.x<u_xlat16_37);
#else
    u_xlatb0 = u_xlat0.x<u_xlat16_37;
#endif
    u_xlat16_8.xyz = u_xlat16_8.xxx * _SpecularColor.xyz;
    u_xlat16_8.xyz = u_xlat10_3.xxx * u_xlat16_8.xyz;
    u_xlat16_8.xyz = (bool(u_xlatb0)) ? u_xlat16_8.xyz : vec3(0.0, 0.0, 0.0);
    u_xlat16_4.xyz = vec3(u_xlat16_4.x * _EmissionColor_MHY.xxyz.y, u_xlat16_4.y * _EmissionColor_MHY.xxyz.z, u_xlat16_4.z * float(_EmissionColor_MHY.z));
    u_xlat0.xyz = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(u_xlat24==1.0);
#else
    u_xlatb33 = u_xlat24==1.0;
#endif
    u_xlati33 = int(uint(u_xlatb33) * 0xffffffffu | uint(u_xlati35));
    u_xlat13.xyz = u_xlat0.xyz * u_xlat16_18.xyz;
    u_xlat0.xyz = (int(u_xlati33) != 0) ? u_xlat13.xyz : u_xlat0.xyz;
    u_xlat0.xyz = u_xlat16_8.xyz + u_xlat0.xyz;
    u_xlat13.xy = vs_TEXCOORD0.zw * _FlowMap01_ST.xy + _FlowMap01_ST.zw;
    u_xlat16_8.x = _Time.y * _FlowMap01_Uspeed + u_xlat13.x;
    u_xlat16_8.y = _Time.y * _FlowMap01_Vspeed + u_xlat13.y;
    u_xlat13.xy = vs_TEXCOORD0.zw * _Noise_ST.xy + _Noise_ST.zw;
    u_xlat16_9.x = _Time.y * _Noise_Uspeed + u_xlat13.x;
    u_xlat16_9.y = _Time.y * _Noise_Vspeed + u_xlat13.y;
    u_xlat10_33 = textureLod(_Noise, u_xlat16_9.xy, 0.0).x;
    u_xlat16_37 = _MaskOffset01 * 1.39999998 + -0.699999988;
    u_xlat16_18.x = u_xlat10_33 * _NoiseIntensity;
    u_xlat13.xy = vs_TEXCOORD0.zw * _FlowMap02_ST.xy + _FlowMap02_ST.zw;
    u_xlat16_9.x = _Time.y * _FlowMap02_Uspeed + u_xlat13.x;
    u_xlat16_9.y = _Time.y * _FlowMap02_Vspeed + u_xlat13.y;
    u_xlat16_40 = _MaskOffset02 * 1.39999998 + -0.699999988;
    u_xlat16_10.xyz = _FlowMapColor01.xyz * vec3(_FlowScale01);
    u_xlat16_8.xy = vec2(u_xlat10_33) * vec2(vec2(_NoiseFlowIntensity, _NoiseFlowIntensity)) + u_xlat16_8.xy;
    u_xlat10_13 = textureLod(_FlowMap01, u_xlat16_8.xy, 0.0).x;
    u_xlat16_13.xyz = vec3(u_xlat10_13) * u_xlat16_10.xyz;
    u_xlat16_8.x = (-vs_TEXCOORD0.z) + 1.0;
    u_xlat16_1.x = u_xlat16_37 + u_xlat16_8.x;
    u_xlat16_1.yw = vec2(u_xlat10_33) * vec2(vec2(_NoiseIntensity, _NoiseIntensity)) + (-vs_TEXCOORD0.ww);
    u_xlat16_18.y = 1.0;
    u_xlat16_19.xy = u_xlat16_1.xy + u_xlat16_18.xy;
    u_xlat10_3.x = textureLod(_Mask01, u_xlat16_19.xy, 0.0).x;
    u_xlat16_3 = max(u_xlat10_3.x, 9.99999975e-05);
    u_xlat16_3 = log2(u_xlat16_3);
    u_xlat16_3 = u_xlat16_3 * _Mask01_Power;
    u_xlat16_3 = exp2(u_xlat16_3);
    u_xlat16_19.xyz = _FlowMapColor02.xyz * vec3(_FlowScale02);
    u_xlat16_9.xy = vec2(u_xlat10_33) * vec2(vec2(_NoiseFlowIntensity, _NoiseFlowIntensity)) + u_xlat16_9.xy;
    u_xlat10_33 = textureLod(_FlowMap02, u_xlat16_9.xy, 0.0).x;
    u_xlat16_14.xyz = vec3(u_xlat10_33) * u_xlat16_19.xyz;
    u_xlat16_1.z = u_xlat16_40 + u_xlat16_8.x;
    u_xlat16_18.xy = vec2(u_xlat16_1.z + u_xlat16_18.x, u_xlat16_1.w + u_xlat16_18.y);
    u_xlat10_33 = textureLod(_Mask02, u_xlat16_18.xy, 0.0).x;
    u_xlat16_33 = max(u_xlat10_33, 9.99999975e-05);
    u_xlat16_33 = log2(u_xlat16_33);
    u_xlat16_33 = u_xlat16_33 * _Mask02_Power;
    u_xlat16_33 = exp2(u_xlat16_33);
    u_xlat16_14.xyz = vec3(u_xlat16_33) * u_xlat16_14.xyz;
    u_xlat16_13.xyz = u_xlat16_13.xyz * vec3(u_xlat16_3) + u_xlat16_14.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(_EmissionScaler) + u_xlat16_13.xyz;
    u_xlat3.xyz = (-u_xlat0.xyz) + u_xlat16_4.xyz;
    u_xlat3.xyz = u_xlat16_7.xxx * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat5.xy = vs_TEXCOORD0.zw * _DissovleNoise_ST.xy + _DissovleNoise_ST.zw;
    u_xlat16_4.x = _Time.y * _DissolveNoise_Uspeed + u_xlat5.x;
    u_xlat16_4.y = _Time.y * _DissolveNoise_Vspeed + u_xlat5.y;
    u_xlat10_33 = textureLod(_DissovleNoise, u_xlat16_4.xy, 0.0).x;
    u_xlat33 = u_xlat10_33 * _DissovleNoiseScale + vs_TEXCOORD0.z;
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(_Dissovle>=u_xlat33);
#else
    u_xlatb33 = _Dissovle>=u_xlat33;
#endif
    u_xlat0.xyz = (u_xlatb2.x) ? u_xlat3.xyz : u_xlat0.xyz;
    u_xlat0.xyz = u_xlat16_13.xyz + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(0.00999999978<u_xlat16_7.x);
#else
    u_xlatb2.x = 0.00999999978<u_xlat16_7.x;
#endif
    if((int(u_xlatb33) * int(0xffffffffu))==0){discard;}
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn));
#else
    u_xlatb33 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn);
#endif
    u_xlat13.xyz = u_xlat0.xyz * vec3(vec3(_ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness));
    u_xlat3.xyz = vec3(vec3(_ES_CharacterPointLightWholeIntensity, _ES_CharacterPointLightWholeIntensity, _ES_CharacterPointLightWholeIntensity)) * mhy_CharacterPointLightColor.xyz;
    u_xlat5.xyz = _ES_CharacterMainLightColor.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.xyz = min(max(u_xlat5.xyz, 0.0), 1.0);
#else
    u_xlat5.xyz = clamp(u_xlat5.xyz, 0.0, 1.0);
#endif
    u_xlat36 = (-mhy_CharacterPointLightColor.w) + 1.0;
    u_xlat3.xyz = u_xlat5.xyz * vec3(u_xlat36) + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat3.xyz = vec3(vec3(_ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio)) * u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat13.xyz = u_xlat13.xyz * u_xlat3.xyz;
    u_xlat3.xyz = _ES_CharacterAmbientLightColor.xyz * vec3(_ES_CharacterAmbientLightRatio);
    u_xlat16_4.xyz = u_xlat13.xyz * vec3(10.0, 10.0, 10.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.xyz = min(max(u_xlat16_4.xyz, 0.0), 1.0);
#else
    u_xlat16_4.xyz = clamp(u_xlat16_4.xyz, 0.0, 1.0);
#endif
    u_xlat13.xyz = u_xlat3.xyz * u_xlat16_4.xyz + u_xlat13.xyz;
    u_xlat16_4.xyz = (bool(u_xlatb33)) ? u_xlat13.xyz : u_xlat0.xyz;
    u_xlat16_18.xyz = u_xlat0.xyz + (-u_xlat16_4.xyz);
    u_xlat16_18.xyz = u_xlat16_7.xxx * u_xlat16_18.xyz + u_xlat16_4.xyz;
    u_xlat16_0.xyz = (u_xlatb2.x) ? u_xlat16_18.xyz : u_xlat16_4.xyz;
    u_xlat16_4.x = max(u_xlat16_0.z, u_xlat16_0.y);
    u_xlat16_1.w = max(u_xlat16_0.x, u_xlat16_4.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(1.0<u_xlat16_1.w);
#else
    u_xlatb2.x = 1.0<u_xlat16_1.w;
#endif
    u_xlat16_1.xyz = u_xlat16_0.xyz / u_xlat16_1.www;
    u_xlat16_0.w = 1.0;
    u_xlat16_0 = (u_xlatb2.x) ? u_xlat16_1 : u_xlat16_0;
    u_xlat16_4.x = min(u_xlat16_0.w, 1.10000002);
    u_xlat16_15 = u_xlat16_0.w + (-u_xlat16_4.x);
    u_xlat16_4.x = u_xlat16_7.x * u_xlat16_15 + u_xlat16_4.x;
    u_xlat16_2 = u_xlat16_4.x * 0.0500000007;
    SV_Target0.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb13 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb13 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_4.x = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb13) ? u_xlat16_4.x : 0.0;
    SV_Target0.w = 0.0156862754;
    SV_Target1.xyz = u_xlat16_0.xyz;
    SV_Target1.w = u_xlat16_2;
    SV_Target2.xy = vec2(0.0, 0.0);
    SV_Target2.w = vs_TEXCOORD4;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "LINE_INTERPOLATION" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _MainTex_ST;
uniform 	float _CharacterAmbientSensorShadowOn;
uniform 	vec4 _AmbientSensorUVs;
uniform 	float _UseClipPlane;
uniform 	float _ClipPlaneWorld;
uniform 	vec4 _ClipPlane;
uniform 	vec4 mhy_AvatarLightDir;
uniform 	vec4 mhy_CharacterOverrideLightDir;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
struct unity_Builtins1Array_Type {
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw1 {
	unity_Builtins1Array_Type unity_Builtins1Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform lowp sampler2D _CharacterAmbientSensorTex;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp float vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD6;
flat out highp uint vs_SV_InstanceID0;
vec3 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump float u_xlat16_4;
vec3 u_xlat5;
int u_xlati5;
bool u_xlatb5;
float u_xlat6;
mediump float u_xlat16_9;
float u_xlat10;
bool u_xlatb10;
bool u_xlatb11;
float u_xlat15;
bool u_xlatb15;
float u_xlat16;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
#ifdef UNITY_ADRENO_ES3
    u_xlatb5 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseClipPlane));
#else
    u_xlatb5 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseClipPlane);
#endif
    if(u_xlatb5){
#ifdef UNITY_ADRENO_ES3
        u_xlatb5 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ClipPlaneWorld));
#else
        u_xlatb5 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ClipPlaneWorld);
#endif
        if(u_xlatb5){
            u_xlati5 = u_xlati0 << 2;
#ifdef UNITY_ADRENO_ES3
            u_xlatb10 = !!(abs(_ClipPlane.w)<0.00100000005);
#else
            u_xlatb10 = abs(_ClipPlane.w)<0.00100000005;
#endif
            u_xlat1.xyz = _ClipPlane.www * _ClipPlane.xyz;
            u_xlat1.xyz = (bool(u_xlatb10)) ? vec3(0.0, 0.0, 0.0) : u_xlat1.xyz;
            u_xlat2 = u_xlat1.yyyy * unity_Builtins1Array[u_xlati5 / 4].hlslcc_mtx4x4unity_WorldToObjectArray[1];
            u_xlat2 = unity_Builtins1Array[u_xlati5 / 4].hlslcc_mtx4x4unity_WorldToObjectArray[0] * u_xlat1.xxxx + u_xlat2;
            u_xlat1 = unity_Builtins1Array[u_xlati5 / 4].hlslcc_mtx4x4unity_WorldToObjectArray[2] * u_xlat1.zzzz + u_xlat2;
            u_xlat1 = u_xlat1 + unity_Builtins1Array[u_xlati5 / 4].hlslcc_mtx4x4unity_WorldToObjectArray[3];
            u_xlat1.xyz = u_xlat1.xyz / u_xlat1.www;
            u_xlat2.xyz = _ClipPlane.yyy * unity_Builtins1Array[u_xlati5 / 4].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz;
            u_xlat2.xyz = unity_Builtins1Array[u_xlati5 / 4].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz * _ClipPlane.xxx + u_xlat2.xyz;
            u_xlat5.xyz = unity_Builtins1Array[u_xlati5 / 4].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz * _ClipPlane.zzz + u_xlat2.xyz;
            u_xlat1.x = dot(u_xlat1.xyz, u_xlat5.xyz);
            u_xlat6 = dot(in_POSITION0.xyz, u_xlat5.xyz);
#ifdef UNITY_ADRENO_ES3
            u_xlatb11 = !!(u_xlat6<u_xlat1.x);
#else
            u_xlatb11 = u_xlat6<u_xlat1.x;
#endif
            u_xlat1.x = (-u_xlat1.x) + u_xlat6;
            u_xlat2.xyz = (-u_xlat1.xxx) * u_xlat5.xyz + in_POSITION0.xyz;
            u_xlat2.w = 0.0;
            u_xlat3.xyz = in_POSITION0.xyz;
            u_xlat3.w = in_COLOR0.w;
            u_xlat1 = (bool(u_xlatb11)) ? u_xlat2 : u_xlat3;
            u_xlat16_4 = u_xlat1.w;
        } else {
            u_xlat5.x = dot(in_POSITION0.xyz, _ClipPlane.xyz);
            u_xlat10 = _ClipPlane.w + -0.00999999978;
#ifdef UNITY_ADRENO_ES3
            u_xlatb10 = !!(u_xlat5.x<u_xlat10);
#else
            u_xlatb10 = u_xlat5.x<u_xlat10;
#endif
            u_xlat5.x = u_xlat5.x + (-_ClipPlane.w);
            u_xlat2.xyz = (-u_xlat5.xxx) * _ClipPlane.xyz + in_POSITION0.xyz;
            u_xlat2.w = 0.0;
            u_xlat3.xyz = in_POSITION0.xyz;
            u_xlat3.w = in_COLOR0.w;
            u_xlat1 = (bool(u_xlatb10)) ? u_xlat2 : u_xlat3;
            u_xlat16_4 = u_xlat1.w;
        //ENDIF
        }
    } else {
        u_xlat1.xyz = in_POSITION0.xyz;
        u_xlat16_4 = in_COLOR0.w;
    //ENDIF
    }
    u_xlati0 = u_xlati0 << 2;
    u_xlat2.xyw = (-_WorldSpaceCameraPos.xyz) + unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat3.x = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].x;
    u_xlat3.y = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].x;
    u_xlat3.z = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].x;
    u_xlat3.w = u_xlat2.x;
    u_xlat1.w = 1.0;
    u_xlat5.x = dot(u_xlat3, u_xlat1);
    u_xlat3.x = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].y;
    u_xlat3.y = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].y;
    u_xlat3.z = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].y;
    u_xlat3.w = u_xlat2.y;
    u_xlat10 = dot(u_xlat3, u_xlat1);
    u_xlat2.x = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].z;
    u_xlat2.y = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].z;
    u_xlat2.z = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].z;
    u_xlat15 = dot(u_xlat2, u_xlat1);
    u_xlat2.x = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].w;
    u_xlat2.y = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].w;
    u_xlat2.z = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].w;
    u_xlat2.w = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3].w;
    u_xlat16 = dot(u_xlat2, u_xlat1);
    u_xlat2 = vec4(u_xlat10) * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat5.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVPZero[2] * vec4(u_xlat15) + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVPZero[3] * vec4(u_xlat16) + u_xlat2;
    u_xlat3 = u_xlat1.yyyy * unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat3 = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * u_xlat1.xxxx + u_xlat3;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * u_xlat1.zzzz + u_xlat3;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3] * in_POSITION0.wwww + u_xlat1;
    vs_TEXCOORD3.xyz = u_xlat1.xyz / u_xlat1.www;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.xz = u_xlat2.xw * vec2(0.5, 0.5);
    u_xlat5.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat1.w = u_xlat5.x * 0.5;
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat5.xyz = in_NORMAL0.yyy * unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat5.xyz = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_NORMAL0.xxx + u_xlat5.xyz;
    u_xlat0.xyz = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_NORMAL0.zzz + u_xlat5.xyz;
    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(0.5<mhy_CharacterOverrideLightDir.w);
#else
    u_xlatb15 = 0.5<mhy_CharacterOverrideLightDir.w;
#endif
    u_xlat1.x = mhy_CharacterOverrideLightDir.x;
    u_xlat1.yz = (-mhy_CharacterOverrideLightDir.yz);
    u_xlat1.xyz = (bool(u_xlatb15)) ? u_xlat1.xyz : mhy_AvatarLightDir.xyz;
    u_xlat16_9 = dot(u_xlat0.xyz, u_xlat1.xyz);
    vs_TEXCOORD1.w = u_xlat16_9 * 0.497500002 + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_CharacterAmbientSensorShadowOn));
#else
    u_xlatb15 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_CharacterAmbientSensorShadowOn);
#endif
    if(u_xlatb15){
        u_xlat15 = textureLod(_CharacterAmbientSensorTex, _AmbientSensorUVs.xy, 0.0).x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb15 = !!(0.5<u_xlat15);
#else
        u_xlatb15 = 0.5<u_xlat15;
#endif
        vs_TEXCOORD4 = u_xlatb15 ? 1.0 : float(0.0);
    } else {
        vs_TEXCOORD4 = 0.0;
    //ENDIF
    }
    gl_Position = u_xlat2;
    vs_COLOR0.xyz = in_COLOR0.xyz;
    vs_COLOR0.w = u_xlat16_4;
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    vs_TEXCOORD2.zw = u_xlat2.zw;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	mediump vec4 _Color;
uniform 	float _MainTexAlphaUse;
uniform 	mediump float _MainTexAlphaCutoff;
uniform 	float _UseVertexColorAO;
uniform 	mediump float _LightArea;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	float _UseCoolShadowColorOrTex;
uniform 	mediump vec3 _CoolShadowMultColor;
uniform 	float _UseShadowTransition;
uniform 	float _ShadowTransitionRange;
uniform 	float _ShadowTransitionSoftness;
uniform 	mediump vec3 _SpecularColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	float _FaceBlushStrength;
uniform 	mediump vec3 _FaceBlushColor;
uniform 	mediump float _EmissionScaler;
uniform 	mediump vec3 _EmissionColor_MHY;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _TextureBiasWhenDithering;
uniform 	float _UseClipPlane;
uniform 	float _ES_CharacterAmbientLightOn;
uniform 	float _ES_CharacterAmbientBrightness;
uniform 	vec3 _ES_CharacterMainLightColor;
uniform 	vec3 _ES_CharacterAmbientLightColor;
uniform 	float _ES_CharacterMainLightRatio;
uniform 	float _ES_CharacterAmbientLightRatio;
uniform 	float _ES_CharacterColorTone;
uniform 	float _ES_CharacterPointLightWholeIntensity;
uniform 	vec4 mhy_AvatarLightDir;
uniform 	vec4 mhy_CharacterPointLightColor;
uniform 	vec4 mhy_CharacterOverrideLightDir;
uniform 	mediump vec4 _FlowMapColor01;
uniform 	mediump float _FlowScale01;
uniform 	mediump float _FlowMap01_Uspeed;
uniform 	vec4 _FlowMap01_ST;
uniform 	mediump float _FlowMap01_Vspeed;
uniform 	mediump float _Noise_Uspeed;
uniform 	vec4 _Noise_ST;
uniform 	mediump float _Noise_Vspeed;
uniform 	mediump float _NoiseFlowIntensity;
uniform 	mediump float _MaskOffset01;
uniform 	mediump float _NoiseIntensity;
uniform 	mediump float _Mask01_Power;
uniform 	mediump vec4 _FlowMapColor02;
uniform 	mediump float _FlowScale02;
uniform 	mediump float _FlowMap02_Uspeed;
uniform 	vec4 _FlowMap02_ST;
uniform 	mediump float _FlowMap02_Vspeed;
uniform 	mediump float _MaskOffset02;
uniform 	mediump float _Mask02_Power;
uniform 	mediump float _DissolveNoise_Uspeed;
uniform 	vec4 _DissovleNoise_ST;
uniform 	mediump float _DissolveNoise_Vspeed;
uniform 	mediump float _DissovleNoiseScale;
uniform 	mediump float _Dissovle;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _Noise;
uniform lowp sampler2D _FlowMap01;
uniform lowp sampler2D _Mask01;
uniform lowp sampler2D _FlowMap02;
uniform lowp sampler2D _Mask02;
uniform lowp sampler2D _DissovleNoise;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp float vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
lowp float u_xlat10_2;
int u_xlati2;
bvec3 u_xlatb2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
lowp float u_xlat10_3;
int u_xlati3;
bool u_xlatb3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec2 u_xlat16_7;
mediump vec3 u_xlat16_8;
vec3 u_xlat9;
bool u_xlatb10;
vec3 u_xlat12;
mediump vec3 u_xlat16_12;
lowp float u_xlat10_12;
int u_xlati12;
bool u_xlatb12;
vec3 u_xlat13;
mediump vec3 u_xlat16_13;
mediump float u_xlat16_14;
mediump vec2 u_xlat16_15;
mediump vec2 u_xlat16_16;
bvec2 u_xlatb20;
float u_xlat22;
bool u_xlatb22;
mediump vec2 u_xlat16_25;
float u_xlat30;
bool u_xlatb30;
float u_xlat32;
mediump float u_xlat16_32;
lowp float u_xlat10_32;
int u_xlati32;
bool u_xlatb32;
float u_xlat33;
mediump float u_xlat16_34;
mediump float u_xlat16_35;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseClipPlane));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseClipPlane);
#endif
    u_xlat16_1.x = vs_COLOR0.w + -0.00999999978;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(u_xlat16_1.x<0.0);
#else
    u_xlatb10 = u_xlat16_1.x<0.0;
#endif
    u_xlatb0 = u_xlatb0 && u_xlatb10;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(_DitherAlpha<0.949999988);
#else
        u_xlatb0 = _DitherAlpha<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb20.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb20.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb20.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = _DitherAlpha * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + -0.00999999978;
#ifdef UNITY_ADRENO_ES3
            u_xlatb0 = !!(u_xlat0.x<0.0);
#else
            u_xlatb0 = u_xlat0.x<0.0;
#endif
            if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(0.5<mhy_CharacterOverrideLightDir.w);
#else
    u_xlatb2.x = 0.5<mhy_CharacterOverrideLightDir.w;
#endif
    u_xlat3.x = mhy_CharacterOverrideLightDir.x;
    u_xlat3.yz = (-mhy_CharacterOverrideLightDir.yz);
    u_xlat2.xyz = (u_xlatb2.x) ? u_xlat3.xyz : mhy_AvatarLightDir.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat30) + u_xlat2.xyz;
    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
    u_xlat30 = _TextureBiasWhenDithering + -1.0;
    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy, u_xlat30);
    u_xlatb2.xyz = equal(vec4(_MainTexAlphaUse), vec4(3.0, 1.0, 2.0, 0.0)).xyz;
    u_xlat30 = u_xlat1.w * _FaceBlushStrength;
    u_xlat3.xyz = (-u_xlat1.xyz) + _FaceBlushColor.xyz;
    u_xlat3.xyz = vec3(u_xlat30) * u_xlat3.xyz + u_xlat1.xyz;
    u_xlat16_4.xyz = (u_xlatb2.x) ? u_xlat3.xyz : u_xlat1.xyz;
    u_xlat16_34 = u_xlat1.w + (-_MainTexAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(u_xlat16_34<0.0);
#else
    u_xlatb30 = u_xlat16_34<0.0;
#endif
    u_xlatb30 = u_xlatb2.y && u_xlatb30;
    if((int(u_xlatb30) * int(0xffffffffu))!=0){discard;}
    u_xlat16_4.xyz = u_xlat16_4.xyz * _Color.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(0.00999999978<u_xlat1.w);
#else
    u_xlatb30 = 0.00999999978<u_xlat1.w;
#endif
    u_xlatb30 = u_xlatb30 && u_xlatb2.z;
    u_xlat16_34 = (u_xlatb30) ? u_xlat1.w : 0.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorAO));
#else
    u_xlatb2.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorAO);
#endif
    u_xlat16_5.x = vs_COLOR0.x * 0.5;
    u_xlat16_5.x = (u_xlatb2.x) ? u_xlat16_5.x : 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat16_5.x<0.0500000007);
#else
    u_xlatb12 = u_xlat16_5.x<0.0500000007;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(0.949999988<u_xlat16_5.x);
#else
    u_xlatb22 = 0.949999988<u_xlat16_5.x;
#endif
    u_xlat32 = u_xlat16_5.x + vs_TEXCOORD1.w;
    u_xlat32 = u_xlat32 * 0.5;
    u_xlat16_5.x = (u_xlatb22) ? 1.0 : u_xlat32;
    u_xlat16_5.x = (u_xlatb12) ? 0.0 : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb2.x) ? u_xlat16_5.x : vs_TEXCOORD1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(u_xlat16_5.x<_LightArea);
#else
    u_xlatb2.x = u_xlat16_5.x<_LightArea;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition));
#else
    u_xlatb12 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition);
#endif
    u_xlat16_5.x = (-u_xlat16_5.x) + _LightArea;
    u_xlat16_5.x = u_xlat16_5.x / _ShadowTransitionRange;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(u_xlat16_5.x>=1.0);
#else
    u_xlatb22 = u_xlat16_5.x>=1.0;
#endif
    u_xlat16_32 = u_xlat16_5.x + 0.00999999978;
    u_xlat16_32 = log2(u_xlat16_32);
    u_xlat32 = u_xlat16_32 * _ShadowTransitionSoftness;
    u_xlat32 = exp2(u_xlat32);
    u_xlat32 = min(u_xlat32, 1.0);
    u_xlat22 = (u_xlatb22) ? 1.0 : u_xlat32;
    u_xlat22 = (u_xlatb12) ? u_xlat22 : 1.0;
    u_xlat22 = u_xlatb2.x ? u_xlat22 : float(0.0);
#ifdef UNITY_ADRENO_ES3
    { bool cond = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(vs_TEXCOORD4); u_xlati32 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati32 = int((vec4(0.0, 0.0, 0.0, 0.0)!=vec4(vs_TEXCOORD4)) ? 0xFFFFFFFFu : uint(0u));
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex));
#else
    u_xlatb3 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex);
#endif
    u_xlat16_13.xyz = vec3(_FirstShadowMultColor.xxyz.y + (-_CoolShadowMultColor.x), _FirstShadowMultColor.xxyz.z + (-_CoolShadowMultColor.y), float(_FirstShadowMultColor.z) + (-_CoolShadowMultColor.z));
    u_xlat13.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_13.xyz + _CoolShadowMultColor.xyz;
    u_xlat16_5.xyz = (bool(u_xlatb3)) ? u_xlat13.xyz : vec3(_FirstShadowMultColor.x, _FirstShadowMultColor.y, _FirstShadowMultColor.z);
    u_xlati3 = ~u_xlati32;
    u_xlati12 = u_xlatb12 ? u_xlati3 : int(0);
    u_xlat16_3.xyz = u_xlat16_5.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat3.xyz = vec3(u_xlat22) * u_xlat16_3.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_5.xyz = (int(u_xlati12) != 0) ? u_xlat3.xyz : u_xlat16_5.xyz;
    u_xlat16_35 = dot(vs_TEXCOORD1.xyz, u_xlat0.xyz);
    u_xlat16_35 = max(u_xlat16_35, 0.00100000005);
    u_xlat16_35 = log2(u_xlat16_35);
    u_xlat16_35 = u_xlat16_35 * _Shininess;
    u_xlat16_35 = exp2(u_xlat16_35);
    u_xlat16_6.xyz = vec3(u_xlat16_35) * _SpecularColor.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(_SpecMulti);
    u_xlat16_4.xyz = vec3(u_xlat16_4.x * _EmissionColor_MHY.xxyz.y, u_xlat16_4.y * _EmissionColor_MHY.xxyz.z, u_xlat16_4.z * float(_EmissionColor_MHY.z));
    u_xlat0.xyz = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0).xyz;
    u_xlati2 = int(uint(u_xlatb2.x) * 0xffffffffu | uint(u_xlati32));
    u_xlat12.xyz = u_xlat0.xyz * u_xlat16_5.xyz;
    u_xlat0.xyz = (int(u_xlati2) != 0) ? u_xlat12.xyz : u_xlat0.xyz;
    u_xlat0.xyz = u_xlat16_6.xyz * vec3(0.5, 0.5, 0.5) + u_xlat0.xyz;
    u_xlat2.xy = vs_TEXCOORD0.zw * _FlowMap01_ST.xy + _FlowMap01_ST.zw;
    u_xlat16_5.x = _Time.y * _FlowMap01_Uspeed + u_xlat2.x;
    u_xlat16_5.y = _Time.y * _FlowMap01_Vspeed + u_xlat2.y;
    u_xlat2.xy = vs_TEXCOORD0.zw * _Noise_ST.xy + _Noise_ST.zw;
    u_xlat16_6.x = _Time.y * _Noise_Uspeed + u_xlat2.x;
    u_xlat16_6.y = _Time.y * _Noise_Vspeed + u_xlat2.y;
    u_xlat10_2 = textureLod(_Noise, u_xlat16_6.xy, 0.0).x;
    u_xlat16_25.x = _MaskOffset01 * 1.39999998 + -0.699999988;
    u_xlat16_16.x = u_xlat10_2 * _NoiseIntensity;
    u_xlat12.xy = vs_TEXCOORD0.zw * _FlowMap02_ST.xy + _FlowMap02_ST.zw;
    u_xlat16_7.x = _Time.y * _FlowMap02_Uspeed + u_xlat12.x;
    u_xlat16_7.y = _Time.y * _FlowMap02_Vspeed + u_xlat12.y;
    u_xlat16_25.y = _MaskOffset02 * 1.39999998 + -0.699999988;
    u_xlat16_8.xyz = _FlowMapColor01.xyz * vec3(_FlowScale01);
    u_xlat16_5.xy = vec2(u_xlat10_2) * vec2(vec2(_NoiseFlowIntensity, _NoiseFlowIntensity)) + u_xlat16_5.xy;
    u_xlat10_12 = textureLod(_FlowMap01, u_xlat16_5.xy, 0.0).x;
    u_xlat16_12.xyz = vec3(u_xlat10_12) * u_xlat16_8.xyz;
    u_xlat16_5.x = (-vs_TEXCOORD0.z) + 1.0;
    u_xlat16_1.xz = u_xlat16_25.xy + u_xlat16_5.xx;
    u_xlat16_1.yw = vec2(u_xlat10_2) * vec2(vec2(_NoiseIntensity, _NoiseIntensity)) + (-vs_TEXCOORD0.ww);
    u_xlat16_16.y = 1.0;
    u_xlat16_15.xy = u_xlat16_1.xy + u_xlat16_16.xy;
    u_xlat10_3 = textureLod(_Mask01, u_xlat16_15.xy, 0.0).x;
    u_xlat16_3.x = max(u_xlat10_3, 9.99999975e-05);
    u_xlat16_3.x = log2(u_xlat16_3.x);
    u_xlat16_3.x = u_xlat16_3.x * _Mask01_Power;
    u_xlat16_3.x = exp2(u_xlat16_3.x);
    u_xlat16_8.xyz = _FlowMapColor02.xyz * vec3(_FlowScale02);
    u_xlat16_15.xy = vec2(u_xlat10_2) * vec2(vec2(_NoiseFlowIntensity, _NoiseFlowIntensity)) + u_xlat16_7.xy;
    u_xlat10_2 = textureLod(_FlowMap02, u_xlat16_15.xy, 0.0).x;
    u_xlat16_13.xyz = vec3(u_xlat10_2) * u_xlat16_8.xyz;
    u_xlat16_5.xy = vec2(u_xlat16_1.z + u_xlat16_16.x, u_xlat16_1.w + u_xlat16_16.y);
    u_xlat10_2 = textureLod(_Mask02, u_xlat16_5.xy, 0.0).x;
    u_xlat16_2.x = max(u_xlat10_2, 9.99999975e-05);
    u_xlat16_2.x = log2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * _Mask02_Power;
    u_xlat16_2.x = exp2(u_xlat16_2.x);
    u_xlat16_13.xyz = u_xlat16_2.xxx * u_xlat16_13.xyz;
    u_xlat16_2.xyz = u_xlat16_12.xyz * u_xlat16_3.xxx + u_xlat16_13.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(_EmissionScaler) + u_xlat16_2.xyz;
    u_xlat3.xyz = (-u_xlat0.xyz) + u_xlat16_4.xyz;
    u_xlat3.xyz = vec3(u_xlat16_34) * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat9.xy = vs_TEXCOORD0.zw * _DissovleNoise_ST.xy + _DissovleNoise_ST.zw;
    u_xlat16_4.x = _Time.y * _DissolveNoise_Uspeed + u_xlat9.x;
    u_xlat16_4.y = _Time.y * _DissolveNoise_Vspeed + u_xlat9.y;
    u_xlat10_32 = textureLod(_DissovleNoise, u_xlat16_4.xy, 0.0).x;
    u_xlat32 = u_xlat10_32 * _DissovleNoiseScale + vs_TEXCOORD0.z;
#ifdef UNITY_ADRENO_ES3
    u_xlatb32 = !!(_Dissovle>=u_xlat32);
#else
    u_xlatb32 = _Dissovle>=u_xlat32;
#endif
    u_xlat0.xyz = (bool(u_xlatb30)) ? u_xlat3.xyz : u_xlat0.xyz;
    u_xlat0.xyz = u_xlat16_2.xyz + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(0.00999999978<u_xlat16_34);
#else
    u_xlatb30 = 0.00999999978<u_xlat16_34;
#endif
    if((int(u_xlatb32) * int(0xffffffffu))==0){discard;}
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn));
#else
    u_xlatb2.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn);
#endif
    u_xlat12.xyz = u_xlat0.xyz * vec3(vec3(_ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness));
    u_xlat3.xyz = vec3(vec3(_ES_CharacterPointLightWholeIntensity, _ES_CharacterPointLightWholeIntensity, _ES_CharacterPointLightWholeIntensity)) * mhy_CharacterPointLightColor.xyz;
    u_xlat9.xyz = _ES_CharacterMainLightColor.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat9.xyz = min(max(u_xlat9.xyz, 0.0), 1.0);
#else
    u_xlat9.xyz = clamp(u_xlat9.xyz, 0.0, 1.0);
#endif
    u_xlat33 = (-mhy_CharacterPointLightColor.w) + 1.0;
    u_xlat3.xyz = u_xlat9.xyz * vec3(u_xlat33) + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat3.xyz = vec3(vec3(_ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio)) * u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat12.xyz = u_xlat12.xyz * u_xlat3.xyz;
    u_xlat3.xyz = _ES_CharacterAmbientLightColor.xyz * vec3(_ES_CharacterAmbientLightRatio);
    u_xlat16_4.xyz = u_xlat12.xyz * vec3(10.0, 10.0, 10.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.xyz = min(max(u_xlat16_4.xyz, 0.0), 1.0);
#else
    u_xlat16_4.xyz = clamp(u_xlat16_4.xyz, 0.0, 1.0);
#endif
    u_xlat12.xyz = u_xlat3.xyz * u_xlat16_4.xyz + u_xlat12.xyz;
    u_xlat16_4.xyz = (u_xlatb2.x) ? u_xlat12.xyz : u_xlat0.xyz;
    u_xlat16_5.xyz = u_xlat0.xyz + (-u_xlat16_4.xyz);
    u_xlat16_5.xyz = vec3(u_xlat16_34) * u_xlat16_5.xyz + u_xlat16_4.xyz;
    u_xlat16_0.xyz = (bool(u_xlatb30)) ? u_xlat16_5.xyz : u_xlat16_4.xyz;
    u_xlat16_4.x = max(u_xlat16_0.z, u_xlat16_0.y);
    u_xlat16_1.w = max(u_xlat16_0.x, u_xlat16_4.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(1.0<u_xlat16_1.w);
#else
    u_xlatb2.x = 1.0<u_xlat16_1.w;
#endif
    u_xlat16_1.xyz = u_xlat16_0.xyz / u_xlat16_1.www;
    u_xlat16_0.w = 1.0;
    u_xlat16_0 = (u_xlatb2.x) ? u_xlat16_1 : u_xlat16_0;
    u_xlat16_4.x = min(u_xlat16_0.w, 1.10000002);
    u_xlat16_14 = u_xlat16_0.w + (-u_xlat16_4.x);
    u_xlat16_4.x = u_xlat16_34 * u_xlat16_14 + u_xlat16_4.x;
    u_xlat16_2.x = u_xlat16_4.x * 0.0500000007;
    SV_Target0.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb12 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_4.x = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb12) ? u_xlat16_4.x : 0.0;
    SV_Target0.w = 0.0156862754;
    SV_Target1.xyz = u_xlat16_0.xyz;
    SV_Target1.w = u_xlat16_2.x;
    SV_Target2.xy = vec2(0.0, 0.0);
    SV_Target2.w = vs_TEXCOORD4;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "LINE_INTERPOLATION" "TOON_SPECULAR_ON" "TOON_LIGHTMAP_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _MainTex_ST;
uniform 	float _CharacterAmbientSensorShadowOn;
uniform 	vec4 _AmbientSensorUVs;
uniform 	float _UseClipPlane;
uniform 	float _ClipPlaneWorld;
uniform 	vec4 _ClipPlane;
uniform 	vec4 mhy_AvatarLightDir;
uniform 	vec4 mhy_CharacterOverrideLightDir;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
struct unity_Builtins1Array_Type {
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw1 {
	unity_Builtins1Array_Type unity_Builtins1Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform lowp sampler2D _CharacterAmbientSensorTex;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp float vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD6;
flat out highp uint vs_SV_InstanceID0;
vec3 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump float u_xlat16_4;
vec3 u_xlat5;
int u_xlati5;
bool u_xlatb5;
float u_xlat6;
mediump float u_xlat16_9;
float u_xlat10;
bool u_xlatb10;
bool u_xlatb11;
float u_xlat15;
bool u_xlatb15;
float u_xlat16;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
#ifdef UNITY_ADRENO_ES3
    u_xlatb5 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseClipPlane));
#else
    u_xlatb5 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseClipPlane);
#endif
    if(u_xlatb5){
#ifdef UNITY_ADRENO_ES3
        u_xlatb5 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ClipPlaneWorld));
#else
        u_xlatb5 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ClipPlaneWorld);
#endif
        if(u_xlatb5){
            u_xlati5 = u_xlati0 << 2;
#ifdef UNITY_ADRENO_ES3
            u_xlatb10 = !!(abs(_ClipPlane.w)<0.00100000005);
#else
            u_xlatb10 = abs(_ClipPlane.w)<0.00100000005;
#endif
            u_xlat1.xyz = _ClipPlane.www * _ClipPlane.xyz;
            u_xlat1.xyz = (bool(u_xlatb10)) ? vec3(0.0, 0.0, 0.0) : u_xlat1.xyz;
            u_xlat2 = u_xlat1.yyyy * unity_Builtins1Array[u_xlati5 / 4].hlslcc_mtx4x4unity_WorldToObjectArray[1];
            u_xlat2 = unity_Builtins1Array[u_xlati5 / 4].hlslcc_mtx4x4unity_WorldToObjectArray[0] * u_xlat1.xxxx + u_xlat2;
            u_xlat1 = unity_Builtins1Array[u_xlati5 / 4].hlslcc_mtx4x4unity_WorldToObjectArray[2] * u_xlat1.zzzz + u_xlat2;
            u_xlat1 = u_xlat1 + unity_Builtins1Array[u_xlati5 / 4].hlslcc_mtx4x4unity_WorldToObjectArray[3];
            u_xlat1.xyz = u_xlat1.xyz / u_xlat1.www;
            u_xlat2.xyz = _ClipPlane.yyy * unity_Builtins1Array[u_xlati5 / 4].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz;
            u_xlat2.xyz = unity_Builtins1Array[u_xlati5 / 4].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz * _ClipPlane.xxx + u_xlat2.xyz;
            u_xlat5.xyz = unity_Builtins1Array[u_xlati5 / 4].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz * _ClipPlane.zzz + u_xlat2.xyz;
            u_xlat1.x = dot(u_xlat1.xyz, u_xlat5.xyz);
            u_xlat6 = dot(in_POSITION0.xyz, u_xlat5.xyz);
#ifdef UNITY_ADRENO_ES3
            u_xlatb11 = !!(u_xlat6<u_xlat1.x);
#else
            u_xlatb11 = u_xlat6<u_xlat1.x;
#endif
            u_xlat1.x = (-u_xlat1.x) + u_xlat6;
            u_xlat2.xyz = (-u_xlat1.xxx) * u_xlat5.xyz + in_POSITION0.xyz;
            u_xlat2.w = 0.0;
            u_xlat3.xyz = in_POSITION0.xyz;
            u_xlat3.w = in_COLOR0.w;
            u_xlat1 = (bool(u_xlatb11)) ? u_xlat2 : u_xlat3;
            u_xlat16_4 = u_xlat1.w;
        } else {
            u_xlat5.x = dot(in_POSITION0.xyz, _ClipPlane.xyz);
            u_xlat10 = _ClipPlane.w + -0.00999999978;
#ifdef UNITY_ADRENO_ES3
            u_xlatb10 = !!(u_xlat5.x<u_xlat10);
#else
            u_xlatb10 = u_xlat5.x<u_xlat10;
#endif
            u_xlat5.x = u_xlat5.x + (-_ClipPlane.w);
            u_xlat2.xyz = (-u_xlat5.xxx) * _ClipPlane.xyz + in_POSITION0.xyz;
            u_xlat2.w = 0.0;
            u_xlat3.xyz = in_POSITION0.xyz;
            u_xlat3.w = in_COLOR0.w;
            u_xlat1 = (bool(u_xlatb10)) ? u_xlat2 : u_xlat3;
            u_xlat16_4 = u_xlat1.w;
        //ENDIF
        }
    } else {
        u_xlat1.xyz = in_POSITION0.xyz;
        u_xlat16_4 = in_COLOR0.w;
    //ENDIF
    }
    u_xlati0 = u_xlati0 << 2;
    u_xlat2.xyw = (-_WorldSpaceCameraPos.xyz) + unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat3.x = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].x;
    u_xlat3.y = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].x;
    u_xlat3.z = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].x;
    u_xlat3.w = u_xlat2.x;
    u_xlat1.w = 1.0;
    u_xlat5.x = dot(u_xlat3, u_xlat1);
    u_xlat3.x = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].y;
    u_xlat3.y = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].y;
    u_xlat3.z = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].y;
    u_xlat3.w = u_xlat2.y;
    u_xlat10 = dot(u_xlat3, u_xlat1);
    u_xlat2.x = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].z;
    u_xlat2.y = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].z;
    u_xlat2.z = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].z;
    u_xlat15 = dot(u_xlat2, u_xlat1);
    u_xlat2.x = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].w;
    u_xlat2.y = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].w;
    u_xlat2.z = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].w;
    u_xlat2.w = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3].w;
    u_xlat16 = dot(u_xlat2, u_xlat1);
    u_xlat2 = vec4(u_xlat10) * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat5.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVPZero[2] * vec4(u_xlat15) + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVPZero[3] * vec4(u_xlat16) + u_xlat2;
    u_xlat3 = u_xlat1.yyyy * unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat3 = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * u_xlat1.xxxx + u_xlat3;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * u_xlat1.zzzz + u_xlat3;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3] * in_POSITION0.wwww + u_xlat1;
    vs_TEXCOORD3.xyz = u_xlat1.xyz / u_xlat1.www;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.xz = u_xlat2.xw * vec2(0.5, 0.5);
    u_xlat5.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat1.w = u_xlat5.x * 0.5;
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat5.xyz = in_NORMAL0.yyy * unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat5.xyz = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_NORMAL0.xxx + u_xlat5.xyz;
    u_xlat0.xyz = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_NORMAL0.zzz + u_xlat5.xyz;
    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(0.5<mhy_CharacterOverrideLightDir.w);
#else
    u_xlatb15 = 0.5<mhy_CharacterOverrideLightDir.w;
#endif
    u_xlat1.x = mhy_CharacterOverrideLightDir.x;
    u_xlat1.yz = (-mhy_CharacterOverrideLightDir.yz);
    u_xlat1.xyz = (bool(u_xlatb15)) ? u_xlat1.xyz : mhy_AvatarLightDir.xyz;
    u_xlat16_9 = dot(u_xlat0.xyz, u_xlat1.xyz);
    vs_TEXCOORD1.w = u_xlat16_9 * 0.497500002 + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_CharacterAmbientSensorShadowOn));
#else
    u_xlatb15 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_CharacterAmbientSensorShadowOn);
#endif
    if(u_xlatb15){
        u_xlat15 = textureLod(_CharacterAmbientSensorTex, _AmbientSensorUVs.xy, 0.0).x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb15 = !!(0.5<u_xlat15);
#else
        u_xlatb15 = 0.5<u_xlat15;
#endif
        vs_TEXCOORD4 = u_xlatb15 ? 1.0 : float(0.0);
    } else {
        vs_TEXCOORD4 = 0.0;
    //ENDIF
    }
    gl_Position = u_xlat2;
    vs_COLOR0.xyz = in_COLOR0.xyz;
    vs_COLOR0.w = u_xlat16_4;
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    vs_TEXCOORD2.zw = u_xlat2.zw;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	mediump vec4 _Color;
uniform 	float _MainTexAlphaUse;
uniform 	mediump float _MainTexAlphaCutoff;
uniform 	float _UseLightMapColorAO;
uniform 	float _UseVertexColorAO;
uniform 	mediump float _LightArea;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	float _UseCoolShadowColorOrTex;
uniform 	mediump vec3 _CoolShadowMultColor;
uniform 	float _UseShadowTransition;
uniform 	float _ShadowTransitionRange;
uniform 	float _ShadowTransitionSoftness;
uniform 	mediump vec3 _SpecularColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	float _FaceBlushStrength;
uniform 	mediump vec3 _FaceBlushColor;
uniform 	mediump float _EmissionScaler;
uniform 	mediump vec3 _EmissionColor_MHY;
uniform 	float _UseMaterial2;
uniform 	mediump vec3 _Color2;
uniform 	mediump vec3 _FirstShadowMultColor2;
uniform 	mediump vec3 _CoolShadowMultColor2;
uniform 	mediump float _Shininess2;
uniform 	mediump float _SpecMulti2;
uniform 	float _ShadowTransitionRange2;
uniform 	float _ShadowTransitionSoftness2;
uniform 	float _UseMaterial3;
uniform 	mediump vec3 _Color3;
uniform 	mediump vec3 _FirstShadowMultColor3;
uniform 	mediump vec3 _CoolShadowMultColor3;
uniform 	mediump float _Shininess3;
uniform 	mediump float _SpecMulti3;
uniform 	float _ShadowTransitionRange3;
uniform 	float _ShadowTransitionSoftness3;
uniform 	float _UseMaterial4;
uniform 	mediump vec3 _Color4;
uniform 	mediump vec3 _FirstShadowMultColor4;
uniform 	mediump vec3 _CoolShadowMultColor4;
uniform 	mediump float _Shininess4;
uniform 	mediump float _SpecMulti4;
uniform 	float _ShadowTransitionRange4;
uniform 	float _ShadowTransitionSoftness4;
uniform 	float _UseMaterial5;
uniform 	mediump vec3 _Color5;
uniform 	mediump vec3 _FirstShadowMultColor5;
uniform 	mediump vec3 _CoolShadowMultColor5;
uniform 	mediump float _Shininess5;
uniform 	mediump float _SpecMulti5;
uniform 	float _ShadowTransitionRange5;
uniform 	float _ShadowTransitionSoftness5;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _TextureBiasWhenDithering;
uniform 	float _UseClipPlane;
uniform 	float _ES_CharacterAmbientLightOn;
uniform 	float _ES_CharacterAmbientBrightness;
uniform 	vec3 _ES_CharacterMainLightColor;
uniform 	vec3 _ES_CharacterAmbientLightColor;
uniform 	float _ES_CharacterMainLightRatio;
uniform 	float _ES_CharacterAmbientLightRatio;
uniform 	float _ES_CharacterColorTone;
uniform 	float _ES_CharacterPointLightWholeIntensity;
uniform 	vec4 mhy_AvatarLightDir;
uniform 	vec4 mhy_CharacterPointLightColor;
uniform 	vec4 mhy_CharacterOverrideLightDir;
uniform 	mediump vec4 _FlowMapColor01;
uniform 	mediump float _FlowScale01;
uniform 	mediump float _FlowMap01_Uspeed;
uniform 	vec4 _FlowMap01_ST;
uniform 	mediump float _FlowMap01_Vspeed;
uniform 	mediump float _Noise_Uspeed;
uniform 	vec4 _Noise_ST;
uniform 	mediump float _Noise_Vspeed;
uniform 	mediump float _NoiseFlowIntensity;
uniform 	mediump float _MaskOffset01;
uniform 	mediump float _NoiseIntensity;
uniform 	mediump float _Mask01_Power;
uniform 	mediump vec4 _FlowMapColor02;
uniform 	mediump float _FlowScale02;
uniform 	mediump float _FlowMap02_Uspeed;
uniform 	vec4 _FlowMap02_ST;
uniform 	mediump float _FlowMap02_Vspeed;
uniform 	mediump float _MaskOffset02;
uniform 	mediump float _Mask02_Power;
uniform 	mediump float _DissolveNoise_Uspeed;
uniform 	vec4 _DissovleNoise_ST;
uniform 	mediump float _DissolveNoise_Vspeed;
uniform 	mediump float _DissovleNoiseScale;
uniform 	mediump float _Dissovle;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _Noise;
uniform lowp sampler2D _FlowMap01;
uniform lowp sampler2D _Mask01;
uniform lowp sampler2D _FlowMap02;
uniform lowp sampler2D _Mask02;
uniform lowp sampler2D _DissovleNoise;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp float vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
vec3 u_xlat2;
mediump float u_xlat16_2;
bvec3 u_xlatb2;
vec3 u_xlat3;
mediump float u_xlat16_3;
lowp vec4 u_xlat10_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
bvec4 u_xlatb5;
vec3 u_xlat6;
mediump vec3 u_xlat16_6;
bvec3 u_xlatb6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
bool u_xlatb11;
vec3 u_xlat13;
mediump vec3 u_xlat16_13;
lowp float u_xlat10_13;
bool u_xlatb13;
mediump vec3 u_xlat16_14;
int u_xlati14;
bool u_xlatb14;
mediump float u_xlat16_15;
mediump vec3 u_xlat16_18;
mediump vec3 u_xlat16_19;
bvec2 u_xlatb22;
float u_xlat24;
bool u_xlatb24;
float u_xlat33;
mediump float u_xlat16_33;
lowp float u_xlat10_33;
int u_xlati33;
bool u_xlatb33;
float u_xlat35;
mediump float u_xlat16_35;
int u_xlati35;
float u_xlat36;
int u_xlati36;
mediump float u_xlat16_37;
mediump float u_xlat16_40;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseClipPlane));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseClipPlane);
#endif
    u_xlat16_1.x = vs_COLOR0.w + -0.00999999978;
#ifdef UNITY_ADRENO_ES3
    u_xlatb11 = !!(u_xlat16_1.x<0.0);
#else
    u_xlatb11 = u_xlat16_1.x<0.0;
#endif
    u_xlatb0 = u_xlatb0 && u_xlatb11;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(_DitherAlpha<0.949999988);
#else
        u_xlatb0 = _DitherAlpha<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb22.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb22.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb22.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = _DitherAlpha * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + -0.00999999978;
#ifdef UNITY_ADRENO_ES3
            u_xlatb0 = !!(u_xlat0.x<0.0);
#else
            u_xlatb0 = u_xlat0.x<0.0;
#endif
            if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(0.5<mhy_CharacterOverrideLightDir.w);
#else
    u_xlatb2.x = 0.5<mhy_CharacterOverrideLightDir.w;
#endif
    u_xlat3.x = mhy_CharacterOverrideLightDir.x;
    u_xlat3.yz = (-mhy_CharacterOverrideLightDir.yz);
    u_xlat2.xyz = (u_xlatb2.x) ? u_xlat3.xyz : mhy_AvatarLightDir.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat33) + u_xlat2.xyz;
    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat0.xyz = vec3(u_xlat33) * u_xlat0.xyz;
    u_xlat33 = _TextureBiasWhenDithering + -1.0;
    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy, u_xlat33);
    u_xlatb2.xyz = equal(vec4(_MainTexAlphaUse), vec4(3.0, 1.0, 2.0, 0.0)).xyz;
    u_xlat35 = u_xlat1.w * _FaceBlushStrength;
    u_xlat3.xyz = (-u_xlat1.xyz) + _FaceBlushColor.xyz;
    u_xlat3.xyz = vec3(u_xlat35) * u_xlat3.xyz + u_xlat1.xyz;
    u_xlat16_4.xyz = (u_xlatb2.x) ? u_xlat3.xyz : u_xlat1.xyz;
    u_xlat16_37 = u_xlat1.w + (-_MainTexAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(u_xlat16_37<0.0);
#else
    u_xlatb2.x = u_xlat16_37<0.0;
#endif
    u_xlatb2.x = u_xlatb2.y && u_xlatb2.x;
    if((int(u_xlatb2.x) * int(0xffffffffu))!=0){discard;}
    u_xlat10_3 = texture(_LightMapTex, vs_TEXCOORD0.xy, u_xlat33);
    u_xlatb2.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseLightMapColorAO, _UseVertexColorAO, _UseLightMapColorAO, _UseLightMapColorAO)).xy;
    u_xlat16_37 = (u_xlatb2.x) ? u_xlat10_3.y : 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseMaterial2));
#else
    u_xlatb33 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseMaterial2);
#endif
    u_xlatb5 = greaterThanEqual(u_xlat10_3.wwww, vec4(0.800000012, 0.400000006, 0.200000003, 0.600000024));
    u_xlatb33 = u_xlatb33 && u_xlatb5.x;
    u_xlat33 = (u_xlatb33) ? 2.0 : 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseMaterial3));
#else
    u_xlatb2.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseMaterial3);
#endif
    u_xlatb2.x = u_xlatb5.y && u_xlatb2.x;
    u_xlatb6.xyz = lessThan(u_xlat10_3.wwww, vec4(0.600000024, 0.400000006, 0.800000012, 0.0)).xyz;
    u_xlatb2.x = u_xlatb2.x && u_xlatb6.x;
    u_xlat33 = (u_xlatb2.x) ? 3.0 : u_xlat33;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseMaterial4));
#else
    u_xlatb2.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseMaterial4);
#endif
    u_xlatb2.x = u_xlatb5.z && u_xlatb2.x;
    u_xlatb2.x = u_xlatb6.y && u_xlatb2.x;
    u_xlat33 = (u_xlatb2.x) ? 4.0 : u_xlat33;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseMaterial5));
#else
    u_xlatb2.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseMaterial5);
#endif
    u_xlatb2.x = u_xlatb5.w && u_xlatb2.x;
    u_xlatb2.x = u_xlatb6.z && u_xlatb2.x;
    u_xlat33 = (u_xlatb2.x) ? 5.0 : u_xlat33;
    u_xlatb5 = equal(vec4(u_xlat33), vec4(2.0, 3.0, 4.0, 5.0));
    u_xlat16_7.xyz = (u_xlatb5.x) ? _Color2.xyz : _Color.xyz;
    u_xlat16_7.xyz = (u_xlatb5.y) ? _Color3.xyz : u_xlat16_7.xyz;
    u_xlat16_7.xyz = (u_xlatb5.z) ? _Color4.xyz : u_xlat16_7.xyz;
    u_xlat16_7.xyz = (u_xlatb5.w) ? _Color5.xyz : u_xlat16_7.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_7.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(0.00999999978<u_xlat1.w);
#else
    u_xlatb2.x = 0.00999999978<u_xlat1.w;
#endif
    u_xlatb2.x = u_xlatb2.x && u_xlatb2.z;
    u_xlat16_7.x = (u_xlatb2.x) ? u_xlat1.w : 0.0;
    u_xlat16_18.x = u_xlat16_37 * vs_COLOR0.x;
    u_xlat16_37 = (u_xlatb2.y) ? u_xlat16_18.x : u_xlat16_37;
#ifdef UNITY_ADRENO_ES3
    u_xlatb13 = !!(u_xlat16_37<0.0500000007);
#else
    u_xlatb13 = u_xlat16_37<0.0500000007;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(0.949999988<u_xlat16_37);
#else
    u_xlatb24 = 0.949999988<u_xlat16_37;
#endif
    u_xlat35 = u_xlat16_37 + vs_TEXCOORD1.w;
    u_xlat35 = u_xlat35 * 0.5;
    u_xlat16_37 = (u_xlatb24) ? 1.0 : u_xlat35;
    u_xlat16_37 = (u_xlatb13) ? 0.0 : u_xlat16_37;
#ifdef UNITY_ADRENO_ES3
    u_xlatb13 = !!(u_xlat16_37<_LightArea);
#else
    u_xlatb13 = u_xlat16_37<_LightArea;
#endif
    if(u_xlatb13){
#ifdef UNITY_ADRENO_ES3
        u_xlatb13 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition));
#else
        u_xlatb13 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition);
#endif
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(u_xlat33==1.0);
#else
        u_xlatb24 = u_xlat33==1.0;
#endif
        u_xlat16_8.x = (u_xlatb24) ? _ShadowTransitionRange : 0.0;
        u_xlat16_8.y = (u_xlatb24) ? _ShadowTransitionSoftness : 0.0;
        u_xlat16_18.xy = (u_xlatb5.x) ? vec2(_ShadowTransitionRange2, _ShadowTransitionSoftness2) : u_xlat16_8.xy;
        u_xlat16_18.xy = (u_xlatb5.y) ? vec2(_ShadowTransitionRange3, _ShadowTransitionSoftness3) : u_xlat16_18.xy;
        u_xlat16_18.xy = (u_xlatb5.z) ? vec2(_ShadowTransitionRange4, _ShadowTransitionSoftness4) : u_xlat16_18.xy;
        u_xlat16_18.xy = (u_xlatb5.w) ? vec2(_ShadowTransitionRange5, _ShadowTransitionSoftness5) : u_xlat16_18.xy;
        u_xlat16_37 = (-u_xlat16_37) + _LightArea;
        u_xlat16_37 = u_xlat16_37 / u_xlat16_18.x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(u_xlat16_37>=1.0);
#else
        u_xlatb24 = u_xlat16_37>=1.0;
#endif
        u_xlat16_35 = u_xlat16_37 + 0.00999999978;
        u_xlat16_35 = log2(u_xlat16_35);
        u_xlat16_35 = u_xlat16_35 * u_xlat16_18.y;
        u_xlat16_35 = exp2(u_xlat16_35);
        u_xlat35 = min(u_xlat16_35, 1.0);
        u_xlat24 = (u_xlatb24) ? 1.0 : u_xlat35;
        u_xlat13.x = (u_xlatb13) ? u_xlat24 : 1.0;
        u_xlat16_37 = 0.0;
    } else {
        u_xlat13.x = 0.0;
        u_xlat16_37 = 1.0;
    //ENDIF
    }
    u_xlat24 = (-u_xlat16_37) + 1.0;
#ifdef UNITY_ADRENO_ES3
    { bool cond = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(vs_TEXCOORD4); u_xlati35 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati35 = int((vec4(0.0, 0.0, 0.0, 0.0)!=vec4(vs_TEXCOORD4)) ? 0xFFFFFFFFu : uint(0u));
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(u_xlat33==1.0);
#else
    u_xlatb33 = u_xlat33==1.0;
#endif
    if(u_xlatb33){
#ifdef UNITY_ADRENO_ES3
        u_xlatb14 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex));
#else
        u_xlatb14 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex);
#endif
        u_xlat16_6.xyz = vec3(_FirstShadowMultColor.xxyz.y + (-_CoolShadowMultColor.x), _FirstShadowMultColor.xxyz.z + (-_CoolShadowMultColor.y), float(_FirstShadowMultColor.z) + (-_CoolShadowMultColor.z));
        u_xlat6.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_6.xyz + _CoolShadowMultColor.xyz;
        u_xlat16_18.xyz = (bool(u_xlatb14)) ? u_xlat6.xyz : vec3(_FirstShadowMultColor.x, _FirstShadowMultColor.y, _FirstShadowMultColor.z);
    } else {
        if(u_xlatb5.x){
#ifdef UNITY_ADRENO_ES3
            u_xlatb14 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex));
#else
            u_xlatb14 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex);
#endif
            u_xlat16_6.xyz = _FirstShadowMultColor2.xyz + (-_CoolShadowMultColor2.xyz);
            u_xlat6.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_6.xyz + _CoolShadowMultColor2.xyz;
            u_xlat16_18.xyz = (bool(u_xlatb14)) ? u_xlat6.xyz : _FirstShadowMultColor2.xyz;
        } else {
#ifdef UNITY_ADRENO_ES3
            u_xlatb14 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex));
#else
            u_xlatb14 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex);
#endif
            u_xlat16_6.xyz = _FirstShadowMultColor3.xyz + (-_CoolShadowMultColor3.xyz);
            u_xlat6.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_6.xyz + _CoolShadowMultColor3.xyz;
            u_xlat16_8.xyz = (bool(u_xlatb14)) ? u_xlat6.xyz : _FirstShadowMultColor3.xyz;
            u_xlat16_6.xyz = _FirstShadowMultColor4.xyz + (-_CoolShadowMultColor4.xyz);
            u_xlat6.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_6.xyz + _CoolShadowMultColor4.xyz;
            u_xlat16_9.xyz = (bool(u_xlatb14)) ? u_xlat6.xyz : _FirstShadowMultColor4.xyz;
            u_xlat16_6.xyz = _FirstShadowMultColor5.xyz + (-_CoolShadowMultColor5.xyz);
            u_xlat6.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_6.xyz + _CoolShadowMultColor5.xyz;
            u_xlat16_10.xyz = (bool(u_xlatb14)) ? u_xlat6.xyz : _FirstShadowMultColor5.xyz;
            u_xlat16_9.xyz = (u_xlatb5.z) ? u_xlat16_9.xyz : u_xlat16_10.xyz;
            u_xlat16_18.xyz = (u_xlatb5.y) ? u_xlat16_8.xyz : u_xlat16_9.xyz;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition));
#else
    u_xlatb14 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition);
#endif
    u_xlati36 = ~u_xlati35;
    u_xlati14 = u_xlatb14 ? u_xlati36 : int(0);
    u_xlat16_6.xyz = u_xlat16_18.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat6.xyz = u_xlat13.xxx * u_xlat16_6.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_18.xyz = (int(u_xlati14) != 0) ? u_xlat6.xyz : u_xlat16_18.xyz;
    u_xlat16_37 = (u_xlatb5.z) ? _Shininess4 : _Shininess5;
    u_xlat16_8.x = (u_xlatb5.z) ? _SpecMulti4 : _SpecMulti5;
    u_xlat16_37 = (u_xlatb5.y) ? _Shininess3 : u_xlat16_37;
    u_xlat16_8.x = (u_xlatb5.y) ? _SpecMulti3 : u_xlat16_8.x;
    u_xlat16_37 = (u_xlatb5.x) ? _Shininess2 : u_xlat16_37;
    u_xlat16_8.x = (u_xlatb5.x) ? _SpecMulti2 : u_xlat16_8.x;
    u_xlat16_37 = (u_xlatb33) ? _Shininess : u_xlat16_37;
    u_xlat16_8.x = (u_xlatb33) ? _SpecMulti : u_xlat16_8.x;
    u_xlat16_19.x = dot(vs_TEXCOORD1.xyz, u_xlat0.xyz);
    u_xlat16_19.x = max(u_xlat16_19.x, 0.00100000005);
    u_xlat16_19.x = log2(u_xlat16_19.x);
    u_xlat16_37 = u_xlat16_37 * u_xlat16_19.x;
    u_xlat16_37 = exp2(u_xlat16_37);
    u_xlat0.x = (-u_xlat10_3.z) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat0.x<u_xlat16_37);
#else
    u_xlatb0 = u_xlat0.x<u_xlat16_37;
#endif
    u_xlat16_8.xyz = u_xlat16_8.xxx * _SpecularColor.xyz;
    u_xlat16_8.xyz = u_xlat10_3.xxx * u_xlat16_8.xyz;
    u_xlat16_8.xyz = (bool(u_xlatb0)) ? u_xlat16_8.xyz : vec3(0.0, 0.0, 0.0);
    u_xlat16_4.xyz = vec3(u_xlat16_4.x * _EmissionColor_MHY.xxyz.y, u_xlat16_4.y * _EmissionColor_MHY.xxyz.z, u_xlat16_4.z * float(_EmissionColor_MHY.z));
    u_xlat0.xyz = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(u_xlat24==1.0);
#else
    u_xlatb33 = u_xlat24==1.0;
#endif
    u_xlati33 = int(uint(u_xlatb33) * 0xffffffffu | uint(u_xlati35));
    u_xlat13.xyz = u_xlat0.xyz * u_xlat16_18.xyz;
    u_xlat0.xyz = (int(u_xlati33) != 0) ? u_xlat13.xyz : u_xlat0.xyz;
    u_xlat0.xyz = u_xlat16_8.xyz + u_xlat0.xyz;
    u_xlat13.xy = vs_TEXCOORD0.zw * _FlowMap01_ST.xy + _FlowMap01_ST.zw;
    u_xlat16_8.x = _Time.y * _FlowMap01_Uspeed + u_xlat13.x;
    u_xlat16_8.y = _Time.y * _FlowMap01_Vspeed + u_xlat13.y;
    u_xlat13.xy = vs_TEXCOORD0.zw * _Noise_ST.xy + _Noise_ST.zw;
    u_xlat16_9.x = _Time.y * _Noise_Uspeed + u_xlat13.x;
    u_xlat16_9.y = _Time.y * _Noise_Vspeed + u_xlat13.y;
    u_xlat10_33 = textureLod(_Noise, u_xlat16_9.xy, 0.0).x;
    u_xlat16_37 = _MaskOffset01 * 1.39999998 + -0.699999988;
    u_xlat16_18.x = u_xlat10_33 * _NoiseIntensity;
    u_xlat13.xy = vs_TEXCOORD0.zw * _FlowMap02_ST.xy + _FlowMap02_ST.zw;
    u_xlat16_9.x = _Time.y * _FlowMap02_Uspeed + u_xlat13.x;
    u_xlat16_9.y = _Time.y * _FlowMap02_Vspeed + u_xlat13.y;
    u_xlat16_40 = _MaskOffset02 * 1.39999998 + -0.699999988;
    u_xlat16_10.xyz = _FlowMapColor01.xyz * vec3(_FlowScale01);
    u_xlat16_8.xy = vec2(u_xlat10_33) * vec2(vec2(_NoiseFlowIntensity, _NoiseFlowIntensity)) + u_xlat16_8.xy;
    u_xlat10_13 = textureLod(_FlowMap01, u_xlat16_8.xy, 0.0).x;
    u_xlat16_13.xyz = vec3(u_xlat10_13) * u_xlat16_10.xyz;
    u_xlat16_8.x = (-vs_TEXCOORD0.z) + 1.0;
    u_xlat16_1.x = u_xlat16_37 + u_xlat16_8.x;
    u_xlat16_1.yw = vec2(u_xlat10_33) * vec2(vec2(_NoiseIntensity, _NoiseIntensity)) + (-vs_TEXCOORD0.ww);
    u_xlat16_18.y = 1.0;
    u_xlat16_19.xy = u_xlat16_1.xy + u_xlat16_18.xy;
    u_xlat10_3.x = textureLod(_Mask01, u_xlat16_19.xy, 0.0).x;
    u_xlat16_3 = max(u_xlat10_3.x, 9.99999975e-05);
    u_xlat16_3 = log2(u_xlat16_3);
    u_xlat16_3 = u_xlat16_3 * _Mask01_Power;
    u_xlat16_3 = exp2(u_xlat16_3);
    u_xlat16_19.xyz = _FlowMapColor02.xyz * vec3(_FlowScale02);
    u_xlat16_9.xy = vec2(u_xlat10_33) * vec2(vec2(_NoiseFlowIntensity, _NoiseFlowIntensity)) + u_xlat16_9.xy;
    u_xlat10_33 = textureLod(_FlowMap02, u_xlat16_9.xy, 0.0).x;
    u_xlat16_14.xyz = vec3(u_xlat10_33) * u_xlat16_19.xyz;
    u_xlat16_1.z = u_xlat16_40 + u_xlat16_8.x;
    u_xlat16_18.xy = vec2(u_xlat16_1.z + u_xlat16_18.x, u_xlat16_1.w + u_xlat16_18.y);
    u_xlat10_33 = textureLod(_Mask02, u_xlat16_18.xy, 0.0).x;
    u_xlat16_33 = max(u_xlat10_33, 9.99999975e-05);
    u_xlat16_33 = log2(u_xlat16_33);
    u_xlat16_33 = u_xlat16_33 * _Mask02_Power;
    u_xlat16_33 = exp2(u_xlat16_33);
    u_xlat16_14.xyz = vec3(u_xlat16_33) * u_xlat16_14.xyz;
    u_xlat16_13.xyz = u_xlat16_13.xyz * vec3(u_xlat16_3) + u_xlat16_14.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(_EmissionScaler) + u_xlat16_13.xyz;
    u_xlat3.xyz = (-u_xlat0.xyz) + u_xlat16_4.xyz;
    u_xlat3.xyz = u_xlat16_7.xxx * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat5.xy = vs_TEXCOORD0.zw * _DissovleNoise_ST.xy + _DissovleNoise_ST.zw;
    u_xlat16_4.x = _Time.y * _DissolveNoise_Uspeed + u_xlat5.x;
    u_xlat16_4.y = _Time.y * _DissolveNoise_Vspeed + u_xlat5.y;
    u_xlat10_33 = textureLod(_DissovleNoise, u_xlat16_4.xy, 0.0).x;
    u_xlat33 = u_xlat10_33 * _DissovleNoiseScale + vs_TEXCOORD0.z;
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(_Dissovle>=u_xlat33);
#else
    u_xlatb33 = _Dissovle>=u_xlat33;
#endif
    u_xlat0.xyz = (u_xlatb2.x) ? u_xlat3.xyz : u_xlat0.xyz;
    u_xlat0.xyz = u_xlat16_13.xyz + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(0.00999999978<u_xlat16_7.x);
#else
    u_xlatb2.x = 0.00999999978<u_xlat16_7.x;
#endif
    if((int(u_xlatb33) * int(0xffffffffu))==0){discard;}
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn));
#else
    u_xlatb33 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn);
#endif
    u_xlat13.xyz = u_xlat0.xyz * vec3(vec3(_ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness));
    u_xlat3.xyz = vec3(vec3(_ES_CharacterPointLightWholeIntensity, _ES_CharacterPointLightWholeIntensity, _ES_CharacterPointLightWholeIntensity)) * mhy_CharacterPointLightColor.xyz;
    u_xlat5.xyz = _ES_CharacterMainLightColor.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.xyz = min(max(u_xlat5.xyz, 0.0), 1.0);
#else
    u_xlat5.xyz = clamp(u_xlat5.xyz, 0.0, 1.0);
#endif
    u_xlat36 = (-mhy_CharacterPointLightColor.w) + 1.0;
    u_xlat3.xyz = u_xlat5.xyz * vec3(u_xlat36) + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat3.xyz = vec3(vec3(_ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio)) * u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat13.xyz = u_xlat13.xyz * u_xlat3.xyz;
    u_xlat3.xyz = _ES_CharacterAmbientLightColor.xyz * vec3(_ES_CharacterAmbientLightRatio);
    u_xlat16_4.xyz = u_xlat13.xyz * vec3(10.0, 10.0, 10.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.xyz = min(max(u_xlat16_4.xyz, 0.0), 1.0);
#else
    u_xlat16_4.xyz = clamp(u_xlat16_4.xyz, 0.0, 1.0);
#endif
    u_xlat13.xyz = u_xlat3.xyz * u_xlat16_4.xyz + u_xlat13.xyz;
    u_xlat16_4.xyz = (bool(u_xlatb33)) ? u_xlat13.xyz : u_xlat0.xyz;
    u_xlat16_18.xyz = u_xlat0.xyz + (-u_xlat16_4.xyz);
    u_xlat16_18.xyz = u_xlat16_7.xxx * u_xlat16_18.xyz + u_xlat16_4.xyz;
    u_xlat16_0.xyz = (u_xlatb2.x) ? u_xlat16_18.xyz : u_xlat16_4.xyz;
    u_xlat16_4.x = max(u_xlat16_0.z, u_xlat16_0.y);
    u_xlat16_1.w = max(u_xlat16_0.x, u_xlat16_4.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(1.0<u_xlat16_1.w);
#else
    u_xlatb2.x = 1.0<u_xlat16_1.w;
#endif
    u_xlat16_1.xyz = u_xlat16_0.xyz / u_xlat16_1.www;
    u_xlat16_0.w = 1.0;
    u_xlat16_0 = (u_xlatb2.x) ? u_xlat16_1 : u_xlat16_0;
    u_xlat16_4.x = min(u_xlat16_0.w, 1.10000002);
    u_xlat16_15 = u_xlat16_0.w + (-u_xlat16_4.x);
    u_xlat16_4.x = u_xlat16_7.x * u_xlat16_15 + u_xlat16_4.x;
    u_xlat16_2 = u_xlat16_4.x * 0.0500000007;
    SV_Target0.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb13 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb13 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_4.x = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb13) ? u_xlat16_4.x : 0.0;
    SV_Target0.w = 0.0156862754;
    SV_Target1.xyz = u_xlat16_0.xyz;
    SV_Target1.w = u_xlat16_2;
    SV_Target2.xy = vec2(0.0, 0.0);
    SV_Target2.w = vs_TEXCOORD4;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "MAIN_TEX_COLORING_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	vec4 _MainTex_ST;
uniform 	float _CharacterAmbientSensorShadowOn;
uniform 	vec4 _AmbientSensorUVs;
uniform 	float _UseClipPlane;
uniform 	float _ClipPlaneWorld;
uniform 	vec4 _ClipPlane;
uniform 	vec4 mhy_AvatarLightDir;
uniform 	vec4 mhy_CharacterOverrideLightDir;
uniform lowp sampler2D _CharacterAmbientSensorTex;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp float vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD6;
vec4 u_xlat0;
bvec2 u_xlatb0;
vec4 u_xlat1;
bool u_xlatb1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump float u_xlat16_4;
float u_xlat5;
float u_xlat6;
float u_xlat7;
float u_xlat10;
bool u_xlatb10;
float u_xlat15;
bool u_xlatb15;
float u_xlat16;
bool u_xlatb16;
void main()
{
    u_xlatb0.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseClipPlane, _ClipPlaneWorld, _UseClipPlane, _UseClipPlane)).xy;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(abs(_ClipPlane.w)<0.00100000005);
#else
    u_xlatb10 = abs(_ClipPlane.w)<0.00100000005;
#endif
    u_xlat1.xyz = _ClipPlane.www * _ClipPlane.xyz;
    u_xlat1.xyz = (bool(u_xlatb10)) ? vec3(0.0, 0.0, 0.0) : u_xlat1.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_WorldToObject[1];
    u_xlat2 = hlslcc_mtx4x4unity_WorldToObject[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_WorldToObject[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_WorldToObject[3];
    u_xlat1.xyz = u_xlat1.xyz / u_xlat1.www;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * _ClipPlane.yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _ClipPlane.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _ClipPlane.zzz + u_xlat2.xyz;
    u_xlat10 = dot(u_xlat1.xyz, u_xlat2.xyz);
    u_xlat15 = dot(in_POSITION0.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(u_xlat15<u_xlat10);
#else
    u_xlatb1 = u_xlat15<u_xlat10;
#endif
    u_xlat10 = (-u_xlat10) + u_xlat15;
    u_xlat2.xyz = (-vec3(u_xlat10)) * u_xlat2.xyz + in_POSITION0.xyz;
    u_xlat2.w = 0.0;
    u_xlat3.xyz = in_POSITION0.xyz;
    u_xlat3.w = in_COLOR0.w;
    u_xlat1 = (bool(u_xlatb1)) ? u_xlat2 : u_xlat3;
    u_xlat10 = dot(in_POSITION0.xyz, _ClipPlane.xyz);
    u_xlat15 = _ClipPlane.w + -0.00999999978;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(u_xlat10<u_xlat15);
#else
    u_xlatb15 = u_xlat10<u_xlat15;
#endif
    u_xlat10 = u_xlat10 + (-_ClipPlane.w);
    u_xlat2.xyz = (-vec3(u_xlat10)) * _ClipPlane.xyz + in_POSITION0.xyz;
    u_xlat2.w = 0.0;
    u_xlat2 = (bool(u_xlatb15)) ? u_xlat2 : u_xlat3;
    u_xlat1.xyz = (u_xlatb0.y) ? u_xlat1.xyz : u_xlat2.xyz;
    u_xlat16_4 = (u_xlatb0.y) ? u_xlat1.w : u_xlat2.w;
    u_xlat1.xyz = (u_xlatb0.x) ? u_xlat1.xyz : in_POSITION0.xyz;
    vs_COLOR0.w = (u_xlatb0.x) ? u_xlat16_4 : in_COLOR0.w;
    u_xlat0.xyw = (-_WorldSpaceCameraPos.xyz) + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat2.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;
    u_xlat2.y = hlslcc_mtx4x4unity_ObjectToWorld[1].x;
    u_xlat2.z = hlslcc_mtx4x4unity_ObjectToWorld[2].x;
    u_xlat2.w = u_xlat0.x;
    u_xlat1.w = 1.0;
    u_xlat2.x = dot(u_xlat2, u_xlat1);
    u_xlat3.x = hlslcc_mtx4x4unity_ObjectToWorld[0].y;
    u_xlat3.y = hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat3.z = hlslcc_mtx4x4unity_ObjectToWorld[2].y;
    u_xlat3.w = u_xlat0.y;
    u_xlat7 = dot(u_xlat3, u_xlat1);
    u_xlat0.x = hlslcc_mtx4x4unity_ObjectToWorld[0].z;
    u_xlat0.y = hlslcc_mtx4x4unity_ObjectToWorld[1].z;
    u_xlat0.z = hlslcc_mtx4x4unity_ObjectToWorld[2].z;
    u_xlat0.x = dot(u_xlat0, u_xlat1);
    u_xlat3.x = hlslcc_mtx4x4unity_ObjectToWorld[0].w;
    u_xlat3.y = hlslcc_mtx4x4unity_ObjectToWorld[1].w;
    u_xlat3.z = hlslcc_mtx4x4unity_ObjectToWorld[2].w;
    u_xlat3.w = hlslcc_mtx4x4unity_ObjectToWorld[3].w;
    u_xlat5 = dot(u_xlat3, u_xlat1);
    u_xlat3 = vec4(u_xlat7) * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[3] * vec4(u_xlat5) + u_xlat2;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat1;
    vs_TEXCOORD3.xyz = u_xlat1.xyz / u_xlat1.www;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.xz = u_xlat0.xw * vec2(0.5, 0.5);
    u_xlat6 = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.w = u_xlat6 * 0.5;
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat1.xyz = in_NORMAL0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_NORMAL0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_NORMAL0.zzz + u_xlat1.xyz;
    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat16 = inversesqrt(u_xlat16);
    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(0.5<mhy_CharacterOverrideLightDir.w);
#else
    u_xlatb16 = 0.5<mhy_CharacterOverrideLightDir.w;
#endif
    u_xlat2.x = mhy_CharacterOverrideLightDir.x;
    u_xlat2.yz = (-mhy_CharacterOverrideLightDir.yz);
    u_xlat2.xyz = (bool(u_xlatb16)) ? u_xlat2.xyz : mhy_AvatarLightDir.xyz;
    u_xlat16_4 = dot(u_xlat1.xyz, u_xlat2.xyz);
    vs_TEXCOORD1.w = u_xlat16_4 * 0.497500002 + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_CharacterAmbientSensorShadowOn));
#else
    u_xlatb16 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_CharacterAmbientSensorShadowOn);
#endif
    if(u_xlatb16){
        u_xlat16 = textureLod(_CharacterAmbientSensorTex, _AmbientSensorUVs.xy, 0.0).x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb16 = !!(0.5<u_xlat16);
#else
        u_xlatb16 = 0.5<u_xlat16;
#endif
        vs_TEXCOORD4 = u_xlatb16 ? 1.0 : float(0.0);
    } else {
        vs_TEXCOORD4 = 0.0;
    //ENDIF
    }
    gl_Position = u_xlat0;
    vs_COLOR0.xyz = in_COLOR0.xyz;
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    vs_TEXCOORD2.zw = u_xlat0.zw;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	mediump vec4 _Color;
uniform 	float _MainTexAlphaUse;
uniform 	mediump float _MainTexAlphaCutoff;
uniform 	mediump vec4 _MainTexTintColor;
uniform 	float _UseVertexColorAO;
uniform 	mediump float _LightArea;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	float _UseCoolShadowColorOrTex;
uniform 	mediump vec3 _CoolShadowMultColor;
uniform 	float _UseShadowTransition;
uniform 	float _ShadowTransitionRange;
uniform 	float _ShadowTransitionSoftness;
uniform 	mediump vec3 _SpecularColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	float _FaceBlushStrength;
uniform 	mediump vec3 _FaceBlushColor;
uniform 	mediump float _EmissionScaler;
uniform 	mediump vec3 _EmissionColor_MHY;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _TextureBiasWhenDithering;
uniform 	float _UseClipPlane;
uniform 	float _ES_CharacterAmbientLightOn;
uniform 	float _ES_CharacterAmbientBrightness;
uniform 	vec3 _ES_CharacterMainLightColor;
uniform 	vec3 _ES_CharacterAmbientLightColor;
uniform 	float _ES_CharacterMainLightRatio;
uniform 	float _ES_CharacterAmbientLightRatio;
uniform 	float _ES_CharacterColorTone;
uniform 	float _ES_CharacterPointLightWholeIntensity;
uniform 	vec4 mhy_AvatarLightDir;
uniform 	vec4 mhy_CharacterPointLightColor;
uniform 	vec4 mhy_CharacterOverrideLightDir;
uniform 	mediump vec4 _FlowMapColor01;
uniform 	mediump float _FlowScale01;
uniform 	mediump float _FlowMap01_Uspeed;
uniform 	vec4 _FlowMap01_ST;
uniform 	mediump float _FlowMap01_Vspeed;
uniform 	mediump float _Noise_Uspeed;
uniform 	vec4 _Noise_ST;
uniform 	mediump float _Noise_Vspeed;
uniform 	mediump float _NoiseFlowIntensity;
uniform 	mediump float _MaskOffset01;
uniform 	mediump float _NoiseIntensity;
uniform 	mediump float _Mask01_Power;
uniform 	mediump vec4 _FlowMapColor02;
uniform 	mediump float _FlowScale02;
uniform 	mediump float _FlowMap02_Uspeed;
uniform 	vec4 _FlowMap02_ST;
uniform 	mediump float _FlowMap02_Vspeed;
uniform 	mediump float _MaskOffset02;
uniform 	mediump float _Mask02_Power;
uniform 	mediump float _DissolveNoise_Uspeed;
uniform 	vec4 _DissovleNoise_ST;
uniform 	mediump float _DissolveNoise_Vspeed;
uniform 	mediump float _DissovleNoiseScale;
uniform 	mediump float _Dissovle;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _Noise;
uniform lowp sampler2D _FlowMap01;
uniform lowp sampler2D _Mask01;
uniform lowp sampler2D _FlowMap02;
uniform lowp sampler2D _Mask02;
uniform lowp sampler2D _DissovleNoise;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp float vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
lowp float u_xlat10_2;
int u_xlati2;
bvec4 u_xlatb2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
lowp float u_xlat10_3;
int u_xlati3;
bool u_xlatb3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec2 u_xlat16_7;
mediump vec3 u_xlat16_8;
vec3 u_xlat9;
bool u_xlatb10;
vec3 u_xlat12;
mediump vec3 u_xlat16_12;
lowp float u_xlat10_12;
int u_xlati12;
bool u_xlatb12;
vec3 u_xlat13;
mediump vec3 u_xlat16_13;
mediump float u_xlat16_14;
mediump vec2 u_xlat16_15;
mediump vec2 u_xlat16_16;
bvec2 u_xlatb20;
float u_xlat22;
bool u_xlatb22;
mediump vec2 u_xlat16_25;
float u_xlat30;
bool u_xlatb30;
float u_xlat32;
mediump float u_xlat16_32;
lowp float u_xlat10_32;
int u_xlati32;
bool u_xlatb32;
float u_xlat33;
mediump float u_xlat16_34;
mediump float u_xlat16_35;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseClipPlane));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseClipPlane);
#endif
    u_xlat16_1.x = vs_COLOR0.w + -0.00999999978;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(u_xlat16_1.x<0.0);
#else
    u_xlatb10 = u_xlat16_1.x<0.0;
#endif
    u_xlatb0 = u_xlatb0 && u_xlatb10;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(_DitherAlpha<0.949999988);
#else
        u_xlatb0 = _DitherAlpha<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb20.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb20.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb20.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = _DitherAlpha * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + -0.00999999978;
#ifdef UNITY_ADRENO_ES3
            u_xlatb0 = !!(u_xlat0.x<0.0);
#else
            u_xlatb0 = u_xlat0.x<0.0;
#endif
            if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(0.5<mhy_CharacterOverrideLightDir.w);
#else
    u_xlatb2.x = 0.5<mhy_CharacterOverrideLightDir.w;
#endif
    u_xlat3.x = mhy_CharacterOverrideLightDir.x;
    u_xlat3.yz = (-mhy_CharacterOverrideLightDir.yz);
    u_xlat2.xyz = (u_xlatb2.x) ? u_xlat3.xyz : mhy_AvatarLightDir.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat30) + u_xlat2.xyz;
    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
    u_xlat30 = _TextureBiasWhenDithering + -1.0;
    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy, u_xlat30);
    u_xlat16_4.xyz = u_xlat1.xyz * _MainTexTintColor.xyz;
    u_xlat16_5.xyz = u_xlat16_4.xyz + u_xlat16_4.xyz;
    u_xlat16_6.xyz = u_xlat1.xyz + _MainTexTintColor.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_6.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(-4.0, -4.0, -4.0) + u_xlat16_6.xyz;
    u_xlatb2 = lessThan(vec4(0.5, 0.5, 0.5, 0.00999999978), u_xlat1);
    u_xlat16_6.x = (u_xlatb2.x) ? float(1.0) : float(0.0);
    u_xlat16_6.y = (u_xlatb2.y) ? float(1.0) : float(0.0);
    u_xlat16_6.z = (u_xlatb2.z) ? float(1.0) : float(0.0);
    u_xlat16_4.xyz = u_xlat16_4.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat16_4.xyz = u_xlat16_6.xyz * u_xlat16_4.xyz + u_xlat16_5.xyz;
    u_xlatb2.xyz = equal(vec4(_MainTexAlphaUse), vec4(3.0, 1.0, 2.0, 0.0)).xyz;
    u_xlat30 = u_xlat1.w * _FaceBlushStrength;
    u_xlat16_3.xyz = (-u_xlat16_4.xyz) + _FaceBlushColor.xyz;
    u_xlat3.xyz = vec3(u_xlat30) * u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat16_4.xyz = (u_xlatb2.x) ? u_xlat3.xyz : u_xlat16_4.xyz;
    u_xlat16_34 = u_xlat1.w + (-_MainTexAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(u_xlat16_34<0.0);
#else
    u_xlatb30 = u_xlat16_34<0.0;
#endif
    u_xlatb30 = u_xlatb2.y && u_xlatb30;
    if((int(u_xlatb30) * int(0xffffffffu))!=0){discard;}
    u_xlat16_4.xyz = u_xlat16_4.xyz * _Color.xyz;
    u_xlatb30 = u_xlatb2.w && u_xlatb2.z;
    u_xlat16_34 = (u_xlatb30) ? u_xlat1.w : 0.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorAO));
#else
    u_xlatb2.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorAO);
#endif
    u_xlat16_5.x = vs_COLOR0.x * 0.5;
    u_xlat16_5.x = (u_xlatb2.x) ? u_xlat16_5.x : 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat16_5.x<0.0500000007);
#else
    u_xlatb12 = u_xlat16_5.x<0.0500000007;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(0.949999988<u_xlat16_5.x);
#else
    u_xlatb22 = 0.949999988<u_xlat16_5.x;
#endif
    u_xlat32 = u_xlat16_5.x + vs_TEXCOORD1.w;
    u_xlat32 = u_xlat32 * 0.5;
    u_xlat16_5.x = (u_xlatb22) ? 1.0 : u_xlat32;
    u_xlat16_5.x = (u_xlatb12) ? 0.0 : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb2.x) ? u_xlat16_5.x : vs_TEXCOORD1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(u_xlat16_5.x<_LightArea);
#else
    u_xlatb2.x = u_xlat16_5.x<_LightArea;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition));
#else
    u_xlatb12 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition);
#endif
    u_xlat16_5.x = (-u_xlat16_5.x) + _LightArea;
    u_xlat16_5.x = u_xlat16_5.x / _ShadowTransitionRange;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(u_xlat16_5.x>=1.0);
#else
    u_xlatb22 = u_xlat16_5.x>=1.0;
#endif
    u_xlat16_32 = u_xlat16_5.x + 0.00999999978;
    u_xlat16_32 = log2(u_xlat16_32);
    u_xlat32 = u_xlat16_32 * _ShadowTransitionSoftness;
    u_xlat32 = exp2(u_xlat32);
    u_xlat32 = min(u_xlat32, 1.0);
    u_xlat22 = (u_xlatb22) ? 1.0 : u_xlat32;
    u_xlat22 = (u_xlatb12) ? u_xlat22 : 1.0;
    u_xlat22 = u_xlatb2.x ? u_xlat22 : float(0.0);
#ifdef UNITY_ADRENO_ES3
    { bool cond = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(vs_TEXCOORD4); u_xlati32 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati32 = int((vec4(0.0, 0.0, 0.0, 0.0)!=vec4(vs_TEXCOORD4)) ? 0xFFFFFFFFu : uint(0u));
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex));
#else
    u_xlatb3 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex);
#endif
    u_xlat16_13.xyz = vec3(_FirstShadowMultColor.xxyz.y + (-_CoolShadowMultColor.x), _FirstShadowMultColor.xxyz.z + (-_CoolShadowMultColor.y), float(_FirstShadowMultColor.z) + (-_CoolShadowMultColor.z));
    u_xlat13.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_13.xyz + _CoolShadowMultColor.xyz;
    u_xlat16_5.xyz = (bool(u_xlatb3)) ? u_xlat13.xyz : vec3(_FirstShadowMultColor.x, _FirstShadowMultColor.y, _FirstShadowMultColor.z);
    u_xlati3 = ~u_xlati32;
    u_xlati12 = u_xlatb12 ? u_xlati3 : int(0);
    u_xlat16_3.xyz = u_xlat16_5.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat3.xyz = vec3(u_xlat22) * u_xlat16_3.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_5.xyz = (int(u_xlati12) != 0) ? u_xlat3.xyz : u_xlat16_5.xyz;
    u_xlat16_35 = dot(vs_TEXCOORD1.xyz, u_xlat0.xyz);
    u_xlat16_35 = max(u_xlat16_35, 0.00100000005);
    u_xlat16_35 = log2(u_xlat16_35);
    u_xlat16_35 = u_xlat16_35 * _Shininess;
    u_xlat16_35 = exp2(u_xlat16_35);
    u_xlat16_6.xyz = vec3(u_xlat16_35) * _SpecularColor.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(_SpecMulti);
    u_xlat16_4.xyz = vec3(u_xlat16_4.x * _EmissionColor_MHY.xxyz.y, u_xlat16_4.y * _EmissionColor_MHY.xxyz.z, u_xlat16_4.z * float(_EmissionColor_MHY.z));
    u_xlat0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlati2 = int(uint(u_xlatb2.x) * 0xffffffffu | uint(u_xlati32));
    u_xlat12.xyz = u_xlat0.xyz * u_xlat16_5.xyz;
    u_xlat0.xyz = (int(u_xlati2) != 0) ? u_xlat12.xyz : u_xlat0.xyz;
    u_xlat0.xyz = u_xlat16_6.xyz * vec3(0.5, 0.5, 0.5) + u_xlat0.xyz;
    u_xlat2.xy = vs_TEXCOORD0.zw * _FlowMap01_ST.xy + _FlowMap01_ST.zw;
    u_xlat16_5.x = _Time.y * _FlowMap01_Uspeed + u_xlat2.x;
    u_xlat16_5.y = _Time.y * _FlowMap01_Vspeed + u_xlat2.y;
    u_xlat2.xy = vs_TEXCOORD0.zw * _Noise_ST.xy + _Noise_ST.zw;
    u_xlat16_6.x = _Time.y * _Noise_Uspeed + u_xlat2.x;
    u_xlat16_6.y = _Time.y * _Noise_Vspeed + u_xlat2.y;
    u_xlat10_2 = texture(_Noise, u_xlat16_6.xy).x;
    u_xlat16_25.x = _MaskOffset01 * 1.39999998 + -0.699999988;
    u_xlat16_16.x = u_xlat10_2 * _NoiseIntensity;
    u_xlat12.xy = vs_TEXCOORD0.zw * _FlowMap02_ST.xy + _FlowMap02_ST.zw;
    u_xlat16_7.x = _Time.y * _FlowMap02_Uspeed + u_xlat12.x;
    u_xlat16_7.y = _Time.y * _FlowMap02_Vspeed + u_xlat12.y;
    u_xlat16_25.y = _MaskOffset02 * 1.39999998 + -0.699999988;
    u_xlat16_8.xyz = _FlowMapColor01.xyz * vec3(_FlowScale01);
    u_xlat16_5.xy = vec2(u_xlat10_2) * vec2(vec2(_NoiseFlowIntensity, _NoiseFlowIntensity)) + u_xlat16_5.xy;
    u_xlat10_12 = texture(_FlowMap01, u_xlat16_5.xy).x;
    u_xlat16_12.xyz = vec3(u_xlat10_12) * u_xlat16_8.xyz;
    u_xlat16_5.x = (-vs_TEXCOORD0.z) + 1.0;
    u_xlat16_1.xz = u_xlat16_25.xy + u_xlat16_5.xx;
    u_xlat16_1.yw = vec2(u_xlat10_2) * vec2(vec2(_NoiseIntensity, _NoiseIntensity)) + (-vs_TEXCOORD0.ww);
    u_xlat16_16.y = 1.0;
    u_xlat16_15.xy = u_xlat16_1.xy + u_xlat16_16.xy;
    u_xlat10_3 = texture(_Mask01, u_xlat16_15.xy).x;
    u_xlat16_3.x = max(u_xlat10_3, 9.99999975e-05);
    u_xlat16_3.x = log2(u_xlat16_3.x);
    u_xlat16_3.x = u_xlat16_3.x * _Mask01_Power;
    u_xlat16_3.x = exp2(u_xlat16_3.x);
    u_xlat16_8.xyz = _FlowMapColor02.xyz * vec3(_FlowScale02);
    u_xlat16_15.xy = vec2(u_xlat10_2) * vec2(vec2(_NoiseFlowIntensity, _NoiseFlowIntensity)) + u_xlat16_7.xy;
    u_xlat10_2 = texture(_FlowMap02, u_xlat16_15.xy).x;
    u_xlat16_13.xyz = vec3(u_xlat10_2) * u_xlat16_8.xyz;
    u_xlat16_5.xy = vec2(u_xlat16_1.z + u_xlat16_16.x, u_xlat16_1.w + u_xlat16_16.y);
    u_xlat10_2 = texture(_Mask02, u_xlat16_5.xy).x;
    u_xlat16_2.x = max(u_xlat10_2, 9.99999975e-05);
    u_xlat16_2.x = log2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * _Mask02_Power;
    u_xlat16_2.x = exp2(u_xlat16_2.x);
    u_xlat16_13.xyz = u_xlat16_2.xxx * u_xlat16_13.xyz;
    u_xlat16_2.xyz = u_xlat16_12.xyz * u_xlat16_3.xxx + u_xlat16_13.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(_EmissionScaler) + u_xlat16_2.xyz;
    u_xlat3.xyz = (-u_xlat0.xyz) + u_xlat16_4.xyz;
    u_xlat3.xyz = vec3(u_xlat16_34) * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat9.xy = vs_TEXCOORD0.zw * _DissovleNoise_ST.xy + _DissovleNoise_ST.zw;
    u_xlat16_4.x = _Time.y * _DissolveNoise_Uspeed + u_xlat9.x;
    u_xlat16_4.y = _Time.y * _DissolveNoise_Vspeed + u_xlat9.y;
    u_xlat10_32 = texture(_DissovleNoise, u_xlat16_4.xy).x;
    u_xlat32 = u_xlat10_32 * _DissovleNoiseScale + vs_TEXCOORD0.z;
#ifdef UNITY_ADRENO_ES3
    u_xlatb32 = !!(_Dissovle>=u_xlat32);
#else
    u_xlatb32 = _Dissovle>=u_xlat32;
#endif
    u_xlat0.xyz = (bool(u_xlatb30)) ? u_xlat3.xyz : u_xlat0.xyz;
    u_xlat0.xyz = u_xlat16_2.xyz + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(0.00999999978<u_xlat16_34);
#else
    u_xlatb30 = 0.00999999978<u_xlat16_34;
#endif
    if((int(u_xlatb32) * int(0xffffffffu))==0){discard;}
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn));
#else
    u_xlatb2.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn);
#endif
    u_xlat12.xyz = u_xlat0.xyz * vec3(vec3(_ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness));
    u_xlat3.xyz = vec3(vec3(_ES_CharacterPointLightWholeIntensity, _ES_CharacterPointLightWholeIntensity, _ES_CharacterPointLightWholeIntensity)) * mhy_CharacterPointLightColor.xyz;
    u_xlat9.xyz = _ES_CharacterMainLightColor.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat9.xyz = min(max(u_xlat9.xyz, 0.0), 1.0);
#else
    u_xlat9.xyz = clamp(u_xlat9.xyz, 0.0, 1.0);
#endif
    u_xlat33 = (-mhy_CharacterPointLightColor.w) + 1.0;
    u_xlat3.xyz = u_xlat9.xyz * vec3(u_xlat33) + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat3.xyz = vec3(vec3(_ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio)) * u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat12.xyz = u_xlat12.xyz * u_xlat3.xyz;
    u_xlat3.xyz = _ES_CharacterAmbientLightColor.xyz * vec3(_ES_CharacterAmbientLightRatio);
    u_xlat16_4.xyz = u_xlat12.xyz * vec3(10.0, 10.0, 10.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.xyz = min(max(u_xlat16_4.xyz, 0.0), 1.0);
#else
    u_xlat16_4.xyz = clamp(u_xlat16_4.xyz, 0.0, 1.0);
#endif
    u_xlat12.xyz = u_xlat3.xyz * u_xlat16_4.xyz + u_xlat12.xyz;
    u_xlat16_4.xyz = (u_xlatb2.x) ? u_xlat12.xyz : u_xlat0.xyz;
    u_xlat16_5.xyz = u_xlat0.xyz + (-u_xlat16_4.xyz);
    u_xlat16_5.xyz = vec3(u_xlat16_34) * u_xlat16_5.xyz + u_xlat16_4.xyz;
    u_xlat16_0.xyz = (bool(u_xlatb30)) ? u_xlat16_5.xyz : u_xlat16_4.xyz;
    u_xlat16_4.x = max(u_xlat16_0.z, u_xlat16_0.y);
    u_xlat16_1.w = max(u_xlat16_0.x, u_xlat16_4.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(1.0<u_xlat16_1.w);
#else
    u_xlatb2.x = 1.0<u_xlat16_1.w;
#endif
    u_xlat16_1.xyz = u_xlat16_0.xyz / u_xlat16_1.www;
    u_xlat16_0.w = 1.0;
    u_xlat16_0 = (u_xlatb2.x) ? u_xlat16_1 : u_xlat16_0;
    u_xlat16_4.x = min(u_xlat16_0.w, 1.10000002);
    u_xlat16_14 = u_xlat16_0.w + (-u_xlat16_4.x);
    u_xlat16_4.x = u_xlat16_34 * u_xlat16_14 + u_xlat16_4.x;
    u_xlat16_2.x = u_xlat16_4.x * 0.0500000007;
    SV_Target0.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb12 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_4.x = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb12) ? u_xlat16_4.x : 0.0;
    SV_Target0.w = 0.0156862754;
    SV_Target1.xyz = u_xlat16_0.xyz;
    SV_Target1.w = u_xlat16_2.x;
    SV_Target2.xy = vec2(0.0, 0.0);
    SV_Target2.w = vs_TEXCOORD4;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "TOON_SPECULAR_ON" "TOON_LIGHTMAP_ON" "MAIN_TEX_COLORING_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	vec4 _MainTex_ST;
uniform 	float _CharacterAmbientSensorShadowOn;
uniform 	vec4 _AmbientSensorUVs;
uniform 	float _UseClipPlane;
uniform 	float _ClipPlaneWorld;
uniform 	vec4 _ClipPlane;
uniform 	vec4 mhy_AvatarLightDir;
uniform 	vec4 mhy_CharacterOverrideLightDir;
uniform lowp sampler2D _CharacterAmbientSensorTex;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp float vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD6;
vec4 u_xlat0;
bvec2 u_xlatb0;
vec4 u_xlat1;
bool u_xlatb1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump float u_xlat16_4;
float u_xlat5;
float u_xlat6;
float u_xlat7;
float u_xlat10;
bool u_xlatb10;
float u_xlat15;
bool u_xlatb15;
float u_xlat16;
bool u_xlatb16;
void main()
{
    u_xlatb0.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseClipPlane, _ClipPlaneWorld, _UseClipPlane, _UseClipPlane)).xy;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(abs(_ClipPlane.w)<0.00100000005);
#else
    u_xlatb10 = abs(_ClipPlane.w)<0.00100000005;
#endif
    u_xlat1.xyz = _ClipPlane.www * _ClipPlane.xyz;
    u_xlat1.xyz = (bool(u_xlatb10)) ? vec3(0.0, 0.0, 0.0) : u_xlat1.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_WorldToObject[1];
    u_xlat2 = hlslcc_mtx4x4unity_WorldToObject[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_WorldToObject[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_WorldToObject[3];
    u_xlat1.xyz = u_xlat1.xyz / u_xlat1.www;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * _ClipPlane.yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _ClipPlane.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _ClipPlane.zzz + u_xlat2.xyz;
    u_xlat10 = dot(u_xlat1.xyz, u_xlat2.xyz);
    u_xlat15 = dot(in_POSITION0.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(u_xlat15<u_xlat10);
#else
    u_xlatb1 = u_xlat15<u_xlat10;
#endif
    u_xlat10 = (-u_xlat10) + u_xlat15;
    u_xlat2.xyz = (-vec3(u_xlat10)) * u_xlat2.xyz + in_POSITION0.xyz;
    u_xlat2.w = 0.0;
    u_xlat3.xyz = in_POSITION0.xyz;
    u_xlat3.w = in_COLOR0.w;
    u_xlat1 = (bool(u_xlatb1)) ? u_xlat2 : u_xlat3;
    u_xlat10 = dot(in_POSITION0.xyz, _ClipPlane.xyz);
    u_xlat15 = _ClipPlane.w + -0.00999999978;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(u_xlat10<u_xlat15);
#else
    u_xlatb15 = u_xlat10<u_xlat15;
#endif
    u_xlat10 = u_xlat10 + (-_ClipPlane.w);
    u_xlat2.xyz = (-vec3(u_xlat10)) * _ClipPlane.xyz + in_POSITION0.xyz;
    u_xlat2.w = 0.0;
    u_xlat2 = (bool(u_xlatb15)) ? u_xlat2 : u_xlat3;
    u_xlat1.xyz = (u_xlatb0.y) ? u_xlat1.xyz : u_xlat2.xyz;
    u_xlat16_4 = (u_xlatb0.y) ? u_xlat1.w : u_xlat2.w;
    u_xlat1.xyz = (u_xlatb0.x) ? u_xlat1.xyz : in_POSITION0.xyz;
    vs_COLOR0.w = (u_xlatb0.x) ? u_xlat16_4 : in_COLOR0.w;
    u_xlat0.xyw = (-_WorldSpaceCameraPos.xyz) + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat2.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;
    u_xlat2.y = hlslcc_mtx4x4unity_ObjectToWorld[1].x;
    u_xlat2.z = hlslcc_mtx4x4unity_ObjectToWorld[2].x;
    u_xlat2.w = u_xlat0.x;
    u_xlat1.w = 1.0;
    u_xlat2.x = dot(u_xlat2, u_xlat1);
    u_xlat3.x = hlslcc_mtx4x4unity_ObjectToWorld[0].y;
    u_xlat3.y = hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat3.z = hlslcc_mtx4x4unity_ObjectToWorld[2].y;
    u_xlat3.w = u_xlat0.y;
    u_xlat7 = dot(u_xlat3, u_xlat1);
    u_xlat0.x = hlslcc_mtx4x4unity_ObjectToWorld[0].z;
    u_xlat0.y = hlslcc_mtx4x4unity_ObjectToWorld[1].z;
    u_xlat0.z = hlslcc_mtx4x4unity_ObjectToWorld[2].z;
    u_xlat0.x = dot(u_xlat0, u_xlat1);
    u_xlat3.x = hlslcc_mtx4x4unity_ObjectToWorld[0].w;
    u_xlat3.y = hlslcc_mtx4x4unity_ObjectToWorld[1].w;
    u_xlat3.z = hlslcc_mtx4x4unity_ObjectToWorld[2].w;
    u_xlat3.w = hlslcc_mtx4x4unity_ObjectToWorld[3].w;
    u_xlat5 = dot(u_xlat3, u_xlat1);
    u_xlat3 = vec4(u_xlat7) * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[3] * vec4(u_xlat5) + u_xlat2;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat1;
    vs_TEXCOORD3.xyz = u_xlat1.xyz / u_xlat1.www;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.xz = u_xlat0.xw * vec2(0.5, 0.5);
    u_xlat6 = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.w = u_xlat6 * 0.5;
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat1.xyz = in_NORMAL0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_NORMAL0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_NORMAL0.zzz + u_xlat1.xyz;
    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat16 = inversesqrt(u_xlat16);
    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(0.5<mhy_CharacterOverrideLightDir.w);
#else
    u_xlatb16 = 0.5<mhy_CharacterOverrideLightDir.w;
#endif
    u_xlat2.x = mhy_CharacterOverrideLightDir.x;
    u_xlat2.yz = (-mhy_CharacterOverrideLightDir.yz);
    u_xlat2.xyz = (bool(u_xlatb16)) ? u_xlat2.xyz : mhy_AvatarLightDir.xyz;
    u_xlat16_4 = dot(u_xlat1.xyz, u_xlat2.xyz);
    vs_TEXCOORD1.w = u_xlat16_4 * 0.497500002 + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_CharacterAmbientSensorShadowOn));
#else
    u_xlatb16 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_CharacterAmbientSensorShadowOn);
#endif
    if(u_xlatb16){
        u_xlat16 = textureLod(_CharacterAmbientSensorTex, _AmbientSensorUVs.xy, 0.0).x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb16 = !!(0.5<u_xlat16);
#else
        u_xlatb16 = 0.5<u_xlat16;
#endif
        vs_TEXCOORD4 = u_xlatb16 ? 1.0 : float(0.0);
    } else {
        vs_TEXCOORD4 = 0.0;
    //ENDIF
    }
    gl_Position = u_xlat0;
    vs_COLOR0.xyz = in_COLOR0.xyz;
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    vs_TEXCOORD2.zw = u_xlat0.zw;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	mediump vec4 _Color;
uniform 	float _MainTexAlphaUse;
uniform 	mediump float _MainTexAlphaCutoff;
uniform 	mediump vec4 _MainTexTintColor;
uniform 	float _UseLightMapColorAO;
uniform 	float _UseVertexColorAO;
uniform 	mediump float _LightArea;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	float _UseCoolShadowColorOrTex;
uniform 	mediump vec3 _CoolShadowMultColor;
uniform 	float _UseShadowTransition;
uniform 	float _ShadowTransitionRange;
uniform 	float _ShadowTransitionSoftness;
uniform 	mediump vec3 _SpecularColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	float _FaceBlushStrength;
uniform 	mediump vec3 _FaceBlushColor;
uniform 	mediump float _EmissionScaler;
uniform 	mediump vec3 _EmissionColor_MHY;
uniform 	float _UseMaterial2;
uniform 	mediump vec3 _Color2;
uniform 	mediump vec3 _FirstShadowMultColor2;
uniform 	mediump vec3 _CoolShadowMultColor2;
uniform 	mediump float _Shininess2;
uniform 	mediump float _SpecMulti2;
uniform 	float _ShadowTransitionRange2;
uniform 	float _ShadowTransitionSoftness2;
uniform 	float _UseMaterial3;
uniform 	mediump vec3 _Color3;
uniform 	mediump vec3 _FirstShadowMultColor3;
uniform 	mediump vec3 _CoolShadowMultColor3;
uniform 	mediump float _Shininess3;
uniform 	mediump float _SpecMulti3;
uniform 	float _ShadowTransitionRange3;
uniform 	float _ShadowTransitionSoftness3;
uniform 	float _UseMaterial4;
uniform 	mediump vec3 _Color4;
uniform 	mediump vec3 _FirstShadowMultColor4;
uniform 	mediump vec3 _CoolShadowMultColor4;
uniform 	mediump float _Shininess4;
uniform 	mediump float _SpecMulti4;
uniform 	float _ShadowTransitionRange4;
uniform 	float _ShadowTransitionSoftness4;
uniform 	float _UseMaterial5;
uniform 	mediump vec3 _Color5;
uniform 	mediump vec3 _FirstShadowMultColor5;
uniform 	mediump vec3 _CoolShadowMultColor5;
uniform 	mediump float _Shininess5;
uniform 	mediump float _SpecMulti5;
uniform 	float _ShadowTransitionRange5;
uniform 	float _ShadowTransitionSoftness5;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _TextureBiasWhenDithering;
uniform 	float _UseClipPlane;
uniform 	float _ES_CharacterAmbientLightOn;
uniform 	float _ES_CharacterAmbientBrightness;
uniform 	vec3 _ES_CharacterMainLightColor;
uniform 	vec3 _ES_CharacterAmbientLightColor;
uniform 	float _ES_CharacterMainLightRatio;
uniform 	float _ES_CharacterAmbientLightRatio;
uniform 	float _ES_CharacterColorTone;
uniform 	float _ES_CharacterPointLightWholeIntensity;
uniform 	vec4 mhy_AvatarLightDir;
uniform 	vec4 mhy_CharacterPointLightColor;
uniform 	vec4 mhy_CharacterOverrideLightDir;
uniform 	mediump vec4 _FlowMapColor01;
uniform 	mediump float _FlowScale01;
uniform 	mediump float _FlowMap01_Uspeed;
uniform 	vec4 _FlowMap01_ST;
uniform 	mediump float _FlowMap01_Vspeed;
uniform 	mediump float _Noise_Uspeed;
uniform 	vec4 _Noise_ST;
uniform 	mediump float _Noise_Vspeed;
uniform 	mediump float _NoiseFlowIntensity;
uniform 	mediump float _MaskOffset01;
uniform 	mediump float _NoiseIntensity;
uniform 	mediump float _Mask01_Power;
uniform 	mediump vec4 _FlowMapColor02;
uniform 	mediump float _FlowScale02;
uniform 	mediump float _FlowMap02_Uspeed;
uniform 	vec4 _FlowMap02_ST;
uniform 	mediump float _FlowMap02_Vspeed;
uniform 	mediump float _MaskOffset02;
uniform 	mediump float _Mask02_Power;
uniform 	mediump float _DissolveNoise_Uspeed;
uniform 	vec4 _DissovleNoise_ST;
uniform 	mediump float _DissolveNoise_Vspeed;
uniform 	mediump float _DissovleNoiseScale;
uniform 	mediump float _Dissovle;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _Noise;
uniform lowp sampler2D _FlowMap01;
uniform lowp sampler2D _Mask01;
uniform lowp sampler2D _FlowMap02;
uniform lowp sampler2D _Mask02;
uniform lowp sampler2D _DissovleNoise;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp float vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
vec3 u_xlat2;
mediump float u_xlat16_2;
bvec4 u_xlatb2;
vec3 u_xlat3;
mediump float u_xlat16_3;
lowp vec4 u_xlat10_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
bvec4 u_xlatb5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
mediump vec3 u_xlat16_7;
bvec3 u_xlatb7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
bool u_xlatb11;
vec3 u_xlat13;
mediump vec3 u_xlat16_13;
lowp float u_xlat10_13;
bool u_xlatb13;
mediump vec3 u_xlat16_14;
int u_xlati14;
bool u_xlatb14;
mediump float u_xlat16_15;
mediump vec3 u_xlat16_17;
mediump vec3 u_xlat16_19;
bvec2 u_xlatb22;
float u_xlat24;
bool u_xlatb24;
float u_xlat33;
mediump float u_xlat16_33;
lowp float u_xlat10_33;
int u_xlati33;
bool u_xlatb33;
float u_xlat35;
mediump float u_xlat16_35;
int u_xlati35;
float u_xlat36;
int u_xlati36;
mediump float u_xlat16_37;
mediump float u_xlat16_39;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseClipPlane));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseClipPlane);
#endif
    u_xlat16_1.x = vs_COLOR0.w + -0.00999999978;
#ifdef UNITY_ADRENO_ES3
    u_xlatb11 = !!(u_xlat16_1.x<0.0);
#else
    u_xlatb11 = u_xlat16_1.x<0.0;
#endif
    u_xlatb0 = u_xlatb0 && u_xlatb11;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(_DitherAlpha<0.949999988);
#else
        u_xlatb0 = _DitherAlpha<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb22.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb22.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb22.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = _DitherAlpha * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + -0.00999999978;
#ifdef UNITY_ADRENO_ES3
            u_xlatb0 = !!(u_xlat0.x<0.0);
#else
            u_xlatb0 = u_xlat0.x<0.0;
#endif
            if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(0.5<mhy_CharacterOverrideLightDir.w);
#else
    u_xlatb2.x = 0.5<mhy_CharacterOverrideLightDir.w;
#endif
    u_xlat3.x = mhy_CharacterOverrideLightDir.x;
    u_xlat3.yz = (-mhy_CharacterOverrideLightDir.yz);
    u_xlat2.xyz = (u_xlatb2.x) ? u_xlat3.xyz : mhy_AvatarLightDir.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat33) + u_xlat2.xyz;
    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat0.xyz = vec3(u_xlat33) * u_xlat0.xyz;
    u_xlat33 = _TextureBiasWhenDithering + -1.0;
    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy, u_xlat33);
    u_xlat16_4.xyz = u_xlat1.xyz * _MainTexTintColor.xyz;
    u_xlat16_5.xyz = u_xlat16_4.xyz + u_xlat16_4.xyz;
    u_xlat16_6.xyz = u_xlat1.xyz + _MainTexTintColor.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_6.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(-4.0, -4.0, -4.0) + u_xlat16_6.xyz;
    u_xlatb2 = lessThan(vec4(0.5, 0.5, 0.5, 0.00999999978), u_xlat1);
    u_xlat16_6.x = (u_xlatb2.x) ? float(1.0) : float(0.0);
    u_xlat16_6.y = (u_xlatb2.y) ? float(1.0) : float(0.0);
    u_xlat16_6.z = (u_xlatb2.z) ? float(1.0) : float(0.0);
    u_xlat16_4.xyz = u_xlat16_4.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat16_4.xyz = u_xlat16_6.xyz * u_xlat16_4.xyz + u_xlat16_5.xyz;
    u_xlatb2.xyz = equal(vec4(_MainTexAlphaUse), vec4(3.0, 1.0, 2.0, 0.0)).xyz;
    u_xlat3.x = u_xlat1.w * _FaceBlushStrength;
    u_xlat16_14.xyz = (-u_xlat16_4.xyz) + _FaceBlushColor.xyz;
    u_xlat3.xyz = u_xlat3.xxx * u_xlat16_14.xyz + u_xlat16_4.xyz;
    u_xlat16_4.xyz = (u_xlatb2.x) ? u_xlat3.xyz : u_xlat16_4.xyz;
    u_xlat16_37 = u_xlat1.w + (-_MainTexAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(u_xlat16_37<0.0);
#else
    u_xlatb2.x = u_xlat16_37<0.0;
#endif
    u_xlatb2.x = u_xlatb2.y && u_xlatb2.x;
    if((int(u_xlatb2.x) * int(0xffffffffu))!=0){discard;}
    u_xlat10_3 = texture(_LightMapTex, vs_TEXCOORD0.xy, u_xlat33);
    u_xlatb2.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseLightMapColorAO, _UseVertexColorAO, _UseLightMapColorAO, _UseLightMapColorAO)).xy;
    u_xlat16_37 = (u_xlatb2.x) ? u_xlat10_3.y : 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseMaterial2));
#else
    u_xlatb33 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseMaterial2);
#endif
    u_xlatb5 = greaterThanEqual(u_xlat10_3.wwww, vec4(0.800000012, 0.400000006, 0.200000003, 0.600000024));
    u_xlatb33 = u_xlatb33 && u_xlatb5.x;
    u_xlat33 = (u_xlatb33) ? 2.0 : 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseMaterial3));
#else
    u_xlatb2.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseMaterial3);
#endif
    u_xlatb2.x = u_xlatb5.y && u_xlatb2.x;
    u_xlatb7.xyz = lessThan(u_xlat10_3.wwww, vec4(0.600000024, 0.400000006, 0.800000012, 0.0)).xyz;
    u_xlatb2.x = u_xlatb2.x && u_xlatb7.x;
    u_xlat33 = (u_xlatb2.x) ? 3.0 : u_xlat33;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseMaterial4));
#else
    u_xlatb2.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseMaterial4);
#endif
    u_xlatb2.x = u_xlatb5.z && u_xlatb2.x;
    u_xlatb2.x = u_xlatb7.y && u_xlatb2.x;
    u_xlat33 = (u_xlatb2.x) ? 4.0 : u_xlat33;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseMaterial5));
#else
    u_xlatb2.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseMaterial5);
#endif
    u_xlatb2.x = u_xlatb5.w && u_xlatb2.x;
    u_xlatb2.x = u_xlatb7.z && u_xlatb2.x;
    u_xlat33 = (u_xlatb2.x) ? 5.0 : u_xlat33;
    u_xlatb5 = equal(vec4(u_xlat33), vec4(2.0, 3.0, 4.0, 5.0));
    u_xlat16_6.xyz = (u_xlatb5.x) ? _Color2.xyz : _Color.xyz;
    u_xlat16_6.xyz = (u_xlatb5.y) ? _Color3.xyz : u_xlat16_6.xyz;
    u_xlat16_6.xyz = (u_xlatb5.z) ? _Color4.xyz : u_xlat16_6.xyz;
    u_xlat16_6.xyz = (u_xlatb5.w) ? _Color5.xyz : u_xlat16_6.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_6.xyz;
    u_xlatb2.x = u_xlatb2.w && u_xlatb2.z;
    u_xlat16_6.x = (u_xlatb2.x) ? u_xlat1.w : 0.0;
    u_xlat16_17.x = u_xlat16_37 * vs_COLOR0.x;
    u_xlat16_37 = (u_xlatb2.y) ? u_xlat16_17.x : u_xlat16_37;
#ifdef UNITY_ADRENO_ES3
    u_xlatb13 = !!(u_xlat16_37<0.0500000007);
#else
    u_xlatb13 = u_xlat16_37<0.0500000007;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(0.949999988<u_xlat16_37);
#else
    u_xlatb24 = 0.949999988<u_xlat16_37;
#endif
    u_xlat35 = u_xlat16_37 + vs_TEXCOORD1.w;
    u_xlat35 = u_xlat35 * 0.5;
    u_xlat16_37 = (u_xlatb24) ? 1.0 : u_xlat35;
    u_xlat16_37 = (u_xlatb13) ? 0.0 : u_xlat16_37;
#ifdef UNITY_ADRENO_ES3
    u_xlatb13 = !!(u_xlat16_37<_LightArea);
#else
    u_xlatb13 = u_xlat16_37<_LightArea;
#endif
    if(u_xlatb13){
#ifdef UNITY_ADRENO_ES3
        u_xlatb13 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition));
#else
        u_xlatb13 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition);
#endif
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(u_xlat33==1.0);
#else
        u_xlatb24 = u_xlat33==1.0;
#endif
        u_xlat16_8.x = (u_xlatb24) ? _ShadowTransitionRange : 0.0;
        u_xlat16_8.y = (u_xlatb24) ? _ShadowTransitionSoftness : 0.0;
        u_xlat16_17.xy = (u_xlatb5.x) ? vec2(_ShadowTransitionRange2, _ShadowTransitionSoftness2) : u_xlat16_8.xy;
        u_xlat16_17.xy = (u_xlatb5.y) ? vec2(_ShadowTransitionRange3, _ShadowTransitionSoftness3) : u_xlat16_17.xy;
        u_xlat16_17.xy = (u_xlatb5.z) ? vec2(_ShadowTransitionRange4, _ShadowTransitionSoftness4) : u_xlat16_17.xy;
        u_xlat16_17.xy = (u_xlatb5.w) ? vec2(_ShadowTransitionRange5, _ShadowTransitionSoftness5) : u_xlat16_17.xy;
        u_xlat16_37 = (-u_xlat16_37) + _LightArea;
        u_xlat16_37 = u_xlat16_37 / u_xlat16_17.x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(u_xlat16_37>=1.0);
#else
        u_xlatb24 = u_xlat16_37>=1.0;
#endif
        u_xlat16_35 = u_xlat16_37 + 0.00999999978;
        u_xlat16_35 = log2(u_xlat16_35);
        u_xlat16_35 = u_xlat16_35 * u_xlat16_17.y;
        u_xlat16_35 = exp2(u_xlat16_35);
        u_xlat35 = min(u_xlat16_35, 1.0);
        u_xlat24 = (u_xlatb24) ? 1.0 : u_xlat35;
        u_xlat13.x = (u_xlatb13) ? u_xlat24 : 1.0;
        u_xlat16_37 = 0.0;
    } else {
        u_xlat13.x = 0.0;
        u_xlat16_37 = 1.0;
    //ENDIF
    }
    u_xlat24 = (-u_xlat16_37) + 1.0;
#ifdef UNITY_ADRENO_ES3
    { bool cond = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(vs_TEXCOORD4); u_xlati35 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati35 = int((vec4(0.0, 0.0, 0.0, 0.0)!=vec4(vs_TEXCOORD4)) ? 0xFFFFFFFFu : uint(0u));
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(u_xlat33==1.0);
#else
    u_xlatb33 = u_xlat33==1.0;
#endif
    if(u_xlatb33){
#ifdef UNITY_ADRENO_ES3
        u_xlatb14 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex));
#else
        u_xlatb14 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex);
#endif
        u_xlat16_7.xyz = vec3(_FirstShadowMultColor.xxyz.y + (-_CoolShadowMultColor.x), _FirstShadowMultColor.xxyz.z + (-_CoolShadowMultColor.y), float(_FirstShadowMultColor.z) + (-_CoolShadowMultColor.z));
        u_xlat7.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_7.xyz + _CoolShadowMultColor.xyz;
        u_xlat16_17.xyz = (bool(u_xlatb14)) ? u_xlat7.xyz : vec3(_FirstShadowMultColor.x, _FirstShadowMultColor.y, _FirstShadowMultColor.z);
    } else {
        if(u_xlatb5.x){
#ifdef UNITY_ADRENO_ES3
            u_xlatb14 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex));
#else
            u_xlatb14 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex);
#endif
            u_xlat16_7.xyz = _FirstShadowMultColor2.xyz + (-_CoolShadowMultColor2.xyz);
            u_xlat7.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_7.xyz + _CoolShadowMultColor2.xyz;
            u_xlat16_17.xyz = (bool(u_xlatb14)) ? u_xlat7.xyz : _FirstShadowMultColor2.xyz;
        } else {
#ifdef UNITY_ADRENO_ES3
            u_xlatb14 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex));
#else
            u_xlatb14 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex);
#endif
            u_xlat16_7.xyz = _FirstShadowMultColor3.xyz + (-_CoolShadowMultColor3.xyz);
            u_xlat7.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_7.xyz + _CoolShadowMultColor3.xyz;
            u_xlat16_8.xyz = (bool(u_xlatb14)) ? u_xlat7.xyz : _FirstShadowMultColor3.xyz;
            u_xlat16_7.xyz = _FirstShadowMultColor4.xyz + (-_CoolShadowMultColor4.xyz);
            u_xlat7.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_7.xyz + _CoolShadowMultColor4.xyz;
            u_xlat16_9.xyz = (bool(u_xlatb14)) ? u_xlat7.xyz : _FirstShadowMultColor4.xyz;
            u_xlat16_7.xyz = _FirstShadowMultColor5.xyz + (-_CoolShadowMultColor5.xyz);
            u_xlat7.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_7.xyz + _CoolShadowMultColor5.xyz;
            u_xlat16_10.xyz = (bool(u_xlatb14)) ? u_xlat7.xyz : _FirstShadowMultColor5.xyz;
            u_xlat16_9.xyz = (u_xlatb5.z) ? u_xlat16_9.xyz : u_xlat16_10.xyz;
            u_xlat16_17.xyz = (u_xlatb5.y) ? u_xlat16_8.xyz : u_xlat16_9.xyz;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition));
#else
    u_xlatb14 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition);
#endif
    u_xlati36 = ~u_xlati35;
    u_xlati14 = u_xlatb14 ? u_xlati36 : int(0);
    u_xlat16_7.xyz = u_xlat16_17.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat7.xyz = u_xlat13.xxx * u_xlat16_7.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_17.xyz = (int(u_xlati14) != 0) ? u_xlat7.xyz : u_xlat16_17.xyz;
    u_xlat16_37 = (u_xlatb5.z) ? _Shininess4 : _Shininess5;
    u_xlat16_8.x = (u_xlatb5.z) ? _SpecMulti4 : _SpecMulti5;
    u_xlat16_37 = (u_xlatb5.y) ? _Shininess3 : u_xlat16_37;
    u_xlat16_8.x = (u_xlatb5.y) ? _SpecMulti3 : u_xlat16_8.x;
    u_xlat16_37 = (u_xlatb5.x) ? _Shininess2 : u_xlat16_37;
    u_xlat16_8.x = (u_xlatb5.x) ? _SpecMulti2 : u_xlat16_8.x;
    u_xlat16_37 = (u_xlatb33) ? _Shininess : u_xlat16_37;
    u_xlat16_8.x = (u_xlatb33) ? _SpecMulti : u_xlat16_8.x;
    u_xlat16_19.x = dot(vs_TEXCOORD1.xyz, u_xlat0.xyz);
    u_xlat16_19.x = max(u_xlat16_19.x, 0.00100000005);
    u_xlat16_19.x = log2(u_xlat16_19.x);
    u_xlat16_37 = u_xlat16_37 * u_xlat16_19.x;
    u_xlat16_37 = exp2(u_xlat16_37);
    u_xlat0.x = (-u_xlat10_3.z) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat0.x<u_xlat16_37);
#else
    u_xlatb0 = u_xlat0.x<u_xlat16_37;
#endif
    u_xlat16_8.xyz = u_xlat16_8.xxx * _SpecularColor.xyz;
    u_xlat16_8.xyz = u_xlat10_3.xxx * u_xlat16_8.xyz;
    u_xlat16_8.xyz = (bool(u_xlatb0)) ? u_xlat16_8.xyz : vec3(0.0, 0.0, 0.0);
    u_xlat16_4.xyz = vec3(u_xlat16_4.x * _EmissionColor_MHY.xxyz.y, u_xlat16_4.y * _EmissionColor_MHY.xxyz.z, u_xlat16_4.z * float(_EmissionColor_MHY.z));
    u_xlat0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(u_xlat24==1.0);
#else
    u_xlatb33 = u_xlat24==1.0;
#endif
    u_xlati33 = int(uint(u_xlatb33) * 0xffffffffu | uint(u_xlati35));
    u_xlat13.xyz = u_xlat0.xyz * u_xlat16_17.xyz;
    u_xlat0.xyz = (int(u_xlati33) != 0) ? u_xlat13.xyz : u_xlat0.xyz;
    u_xlat0.xyz = u_xlat16_8.xyz + u_xlat0.xyz;
    u_xlat13.xy = vs_TEXCOORD0.zw * _FlowMap01_ST.xy + _FlowMap01_ST.zw;
    u_xlat16_8.x = _Time.y * _FlowMap01_Uspeed + u_xlat13.x;
    u_xlat16_8.y = _Time.y * _FlowMap01_Vspeed + u_xlat13.y;
    u_xlat13.xy = vs_TEXCOORD0.zw * _Noise_ST.xy + _Noise_ST.zw;
    u_xlat16_9.x = _Time.y * _Noise_Uspeed + u_xlat13.x;
    u_xlat16_9.y = _Time.y * _Noise_Vspeed + u_xlat13.y;
    u_xlat10_33 = texture(_Noise, u_xlat16_9.xy).x;
    u_xlat16_37 = _MaskOffset01 * 1.39999998 + -0.699999988;
    u_xlat16_17.x = u_xlat10_33 * _NoiseIntensity;
    u_xlat13.xy = vs_TEXCOORD0.zw * _FlowMap02_ST.xy + _FlowMap02_ST.zw;
    u_xlat16_9.x = _Time.y * _FlowMap02_Uspeed + u_xlat13.x;
    u_xlat16_9.y = _Time.y * _FlowMap02_Vspeed + u_xlat13.y;
    u_xlat16_39 = _MaskOffset02 * 1.39999998 + -0.699999988;
    u_xlat16_10.xyz = _FlowMapColor01.xyz * vec3(_FlowScale01);
    u_xlat16_8.xy = vec2(u_xlat10_33) * vec2(vec2(_NoiseFlowIntensity, _NoiseFlowIntensity)) + u_xlat16_8.xy;
    u_xlat10_13 = texture(_FlowMap01, u_xlat16_8.xy).x;
    u_xlat16_13.xyz = vec3(u_xlat10_13) * u_xlat16_10.xyz;
    u_xlat16_8.x = (-vs_TEXCOORD0.z) + 1.0;
    u_xlat16_1.x = u_xlat16_37 + u_xlat16_8.x;
    u_xlat16_1.yw = vec2(u_xlat10_33) * vec2(vec2(_NoiseIntensity, _NoiseIntensity)) + (-vs_TEXCOORD0.ww);
    u_xlat16_17.y = 1.0;
    u_xlat16_19.xy = u_xlat16_1.xy + u_xlat16_17.xy;
    u_xlat10_3.x = texture(_Mask01, u_xlat16_19.xy).x;
    u_xlat16_3 = max(u_xlat10_3.x, 9.99999975e-05);
    u_xlat16_3 = log2(u_xlat16_3);
    u_xlat16_3 = u_xlat16_3 * _Mask01_Power;
    u_xlat16_3 = exp2(u_xlat16_3);
    u_xlat16_19.xyz = _FlowMapColor02.xyz * vec3(_FlowScale02);
    u_xlat16_9.xy = vec2(u_xlat10_33) * vec2(vec2(_NoiseFlowIntensity, _NoiseFlowIntensity)) + u_xlat16_9.xy;
    u_xlat10_33 = texture(_FlowMap02, u_xlat16_9.xy).x;
    u_xlat16_14.xyz = vec3(u_xlat10_33) * u_xlat16_19.xyz;
    u_xlat16_1.z = u_xlat16_39 + u_xlat16_8.x;
    u_xlat16_17.xy = vec2(u_xlat16_1.z + u_xlat16_17.x, u_xlat16_1.w + u_xlat16_17.y);
    u_xlat10_33 = texture(_Mask02, u_xlat16_17.xy).x;
    u_xlat16_33 = max(u_xlat10_33, 9.99999975e-05);
    u_xlat16_33 = log2(u_xlat16_33);
    u_xlat16_33 = u_xlat16_33 * _Mask02_Power;
    u_xlat16_33 = exp2(u_xlat16_33);
    u_xlat16_14.xyz = vec3(u_xlat16_33) * u_xlat16_14.xyz;
    u_xlat16_13.xyz = u_xlat16_13.xyz * vec3(u_xlat16_3) + u_xlat16_14.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(_EmissionScaler) + u_xlat16_13.xyz;
    u_xlat3.xyz = (-u_xlat0.xyz) + u_xlat16_4.xyz;
    u_xlat3.xyz = u_xlat16_6.xxx * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat7.xy = vs_TEXCOORD0.zw * _DissovleNoise_ST.xy + _DissovleNoise_ST.zw;
    u_xlat16_4.x = _Time.y * _DissolveNoise_Uspeed + u_xlat7.x;
    u_xlat16_4.y = _Time.y * _DissolveNoise_Vspeed + u_xlat7.y;
    u_xlat10_33 = texture(_DissovleNoise, u_xlat16_4.xy).x;
    u_xlat33 = u_xlat10_33 * _DissovleNoiseScale + vs_TEXCOORD0.z;
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(_Dissovle>=u_xlat33);
#else
    u_xlatb33 = _Dissovle>=u_xlat33;
#endif
    u_xlat0.xyz = (u_xlatb2.x) ? u_xlat3.xyz : u_xlat0.xyz;
    u_xlat0.xyz = u_xlat16_13.xyz + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(0.00999999978<u_xlat16_6.x);
#else
    u_xlatb2.x = 0.00999999978<u_xlat16_6.x;
#endif
    if((int(u_xlatb33) * int(0xffffffffu))==0){discard;}
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn));
#else
    u_xlatb33 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn);
#endif
    u_xlat13.xyz = u_xlat0.xyz * vec3(vec3(_ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness));
    u_xlat3.xyz = vec3(vec3(_ES_CharacterPointLightWholeIntensity, _ES_CharacterPointLightWholeIntensity, _ES_CharacterPointLightWholeIntensity)) * mhy_CharacterPointLightColor.xyz;
    u_xlat7.xyz = _ES_CharacterMainLightColor.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.xyz = min(max(u_xlat7.xyz, 0.0), 1.0);
#else
    u_xlat7.xyz = clamp(u_xlat7.xyz, 0.0, 1.0);
#endif
    u_xlat36 = (-mhy_CharacterPointLightColor.w) + 1.0;
    u_xlat3.xyz = u_xlat7.xyz * vec3(u_xlat36) + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat3.xyz = vec3(vec3(_ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio)) * u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat13.xyz = u_xlat13.xyz * u_xlat3.xyz;
    u_xlat3.xyz = _ES_CharacterAmbientLightColor.xyz * vec3(_ES_CharacterAmbientLightRatio);
    u_xlat16_4.xyz = u_xlat13.xyz * vec3(10.0, 10.0, 10.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.xyz = min(max(u_xlat16_4.xyz, 0.0), 1.0);
#else
    u_xlat16_4.xyz = clamp(u_xlat16_4.xyz, 0.0, 1.0);
#endif
    u_xlat13.xyz = u_xlat3.xyz * u_xlat16_4.xyz + u_xlat13.xyz;
    u_xlat16_4.xyz = (bool(u_xlatb33)) ? u_xlat13.xyz : u_xlat0.xyz;
    u_xlat16_17.xyz = u_xlat0.xyz + (-u_xlat16_4.xyz);
    u_xlat16_17.xyz = u_xlat16_6.xxx * u_xlat16_17.xyz + u_xlat16_4.xyz;
    u_xlat16_0.xyz = (u_xlatb2.x) ? u_xlat16_17.xyz : u_xlat16_4.xyz;
    u_xlat16_4.x = max(u_xlat16_0.z, u_xlat16_0.y);
    u_xlat16_1.w = max(u_xlat16_0.x, u_xlat16_4.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(1.0<u_xlat16_1.w);
#else
    u_xlatb2.x = 1.0<u_xlat16_1.w;
#endif
    u_xlat16_1.xyz = u_xlat16_0.xyz / u_xlat16_1.www;
    u_xlat16_0.w = 1.0;
    u_xlat16_0 = (u_xlatb2.x) ? u_xlat16_1 : u_xlat16_0;
    u_xlat16_4.x = min(u_xlat16_0.w, 1.10000002);
    u_xlat16_15 = u_xlat16_0.w + (-u_xlat16_4.x);
    u_xlat16_4.x = u_xlat16_6.x * u_xlat16_15 + u_xlat16_4.x;
    u_xlat16_2 = u_xlat16_4.x * 0.0500000007;
    SV_Target0.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb13 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb13 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_4.x = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb13) ? u_xlat16_4.x : 0.0;
    SV_Target0.w = 0.0156862754;
    SV_Target1.xyz = u_xlat16_0.xyz;
    SV_Target1.w = u_xlat16_2;
    SV_Target2.xy = vec2(0.0, 0.0);
    SV_Target2.w = vs_TEXCOORD4;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MAIN_TEX_COLORING_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _MainTex_ST;
uniform 	float _CharacterAmbientSensorShadowOn;
uniform 	vec4 _AmbientSensorUVs;
uniform 	float _UseClipPlane;
uniform 	float _ClipPlaneWorld;
uniform 	vec4 _ClipPlane;
uniform 	vec4 mhy_AvatarLightDir;
uniform 	vec4 mhy_CharacterOverrideLightDir;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
struct unity_Builtins1Array_Type {
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw1 {
	unity_Builtins1Array_Type unity_Builtins1Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform lowp sampler2D _CharacterAmbientSensorTex;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp float vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD6;
flat out highp uint vs_SV_InstanceID0;
vec3 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump float u_xlat16_4;
vec3 u_xlat5;
int u_xlati5;
bool u_xlatb5;
float u_xlat6;
mediump float u_xlat16_9;
float u_xlat10;
bool u_xlatb10;
bool u_xlatb11;
float u_xlat15;
bool u_xlatb15;
float u_xlat16;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
#ifdef UNITY_ADRENO_ES3
    u_xlatb5 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseClipPlane));
#else
    u_xlatb5 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseClipPlane);
#endif
    if(u_xlatb5){
#ifdef UNITY_ADRENO_ES3
        u_xlatb5 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ClipPlaneWorld));
#else
        u_xlatb5 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ClipPlaneWorld);
#endif
        if(u_xlatb5){
            u_xlati5 = u_xlati0 << 2;
#ifdef UNITY_ADRENO_ES3
            u_xlatb10 = !!(abs(_ClipPlane.w)<0.00100000005);
#else
            u_xlatb10 = abs(_ClipPlane.w)<0.00100000005;
#endif
            u_xlat1.xyz = _ClipPlane.www * _ClipPlane.xyz;
            u_xlat1.xyz = (bool(u_xlatb10)) ? vec3(0.0, 0.0, 0.0) : u_xlat1.xyz;
            u_xlat2 = u_xlat1.yyyy * unity_Builtins1Array[u_xlati5 / 4].hlslcc_mtx4x4unity_WorldToObjectArray[1];
            u_xlat2 = unity_Builtins1Array[u_xlati5 / 4].hlslcc_mtx4x4unity_WorldToObjectArray[0] * u_xlat1.xxxx + u_xlat2;
            u_xlat1 = unity_Builtins1Array[u_xlati5 / 4].hlslcc_mtx4x4unity_WorldToObjectArray[2] * u_xlat1.zzzz + u_xlat2;
            u_xlat1 = u_xlat1 + unity_Builtins1Array[u_xlati5 / 4].hlslcc_mtx4x4unity_WorldToObjectArray[3];
            u_xlat1.xyz = u_xlat1.xyz / u_xlat1.www;
            u_xlat2.xyz = _ClipPlane.yyy * unity_Builtins1Array[u_xlati5 / 4].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz;
            u_xlat2.xyz = unity_Builtins1Array[u_xlati5 / 4].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz * _ClipPlane.xxx + u_xlat2.xyz;
            u_xlat5.xyz = unity_Builtins1Array[u_xlati5 / 4].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz * _ClipPlane.zzz + u_xlat2.xyz;
            u_xlat1.x = dot(u_xlat1.xyz, u_xlat5.xyz);
            u_xlat6 = dot(in_POSITION0.xyz, u_xlat5.xyz);
#ifdef UNITY_ADRENO_ES3
            u_xlatb11 = !!(u_xlat6<u_xlat1.x);
#else
            u_xlatb11 = u_xlat6<u_xlat1.x;
#endif
            u_xlat1.x = (-u_xlat1.x) + u_xlat6;
            u_xlat2.xyz = (-u_xlat1.xxx) * u_xlat5.xyz + in_POSITION0.xyz;
            u_xlat2.w = 0.0;
            u_xlat3.xyz = in_POSITION0.xyz;
            u_xlat3.w = in_COLOR0.w;
            u_xlat1 = (bool(u_xlatb11)) ? u_xlat2 : u_xlat3;
            u_xlat16_4 = u_xlat1.w;
        } else {
            u_xlat5.x = dot(in_POSITION0.xyz, _ClipPlane.xyz);
            u_xlat10 = _ClipPlane.w + -0.00999999978;
#ifdef UNITY_ADRENO_ES3
            u_xlatb10 = !!(u_xlat5.x<u_xlat10);
#else
            u_xlatb10 = u_xlat5.x<u_xlat10;
#endif
            u_xlat5.x = u_xlat5.x + (-_ClipPlane.w);
            u_xlat2.xyz = (-u_xlat5.xxx) * _ClipPlane.xyz + in_POSITION0.xyz;
            u_xlat2.w = 0.0;
            u_xlat3.xyz = in_POSITION0.xyz;
            u_xlat3.w = in_COLOR0.w;
            u_xlat1 = (bool(u_xlatb10)) ? u_xlat2 : u_xlat3;
            u_xlat16_4 = u_xlat1.w;
        //ENDIF
        }
    } else {
        u_xlat1.xyz = in_POSITION0.xyz;
        u_xlat16_4 = in_COLOR0.w;
    //ENDIF
    }
    u_xlati0 = u_xlati0 << 2;
    u_xlat2.xyw = (-_WorldSpaceCameraPos.xyz) + unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat3.x = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].x;
    u_xlat3.y = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].x;
    u_xlat3.z = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].x;
    u_xlat3.w = u_xlat2.x;
    u_xlat1.w = 1.0;
    u_xlat5.x = dot(u_xlat3, u_xlat1);
    u_xlat3.x = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].y;
    u_xlat3.y = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].y;
    u_xlat3.z = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].y;
    u_xlat3.w = u_xlat2.y;
    u_xlat10 = dot(u_xlat3, u_xlat1);
    u_xlat2.x = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].z;
    u_xlat2.y = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].z;
    u_xlat2.z = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].z;
    u_xlat15 = dot(u_xlat2, u_xlat1);
    u_xlat2.x = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].w;
    u_xlat2.y = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].w;
    u_xlat2.z = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].w;
    u_xlat2.w = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3].w;
    u_xlat16 = dot(u_xlat2, u_xlat1);
    u_xlat2 = vec4(u_xlat10) * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat5.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVPZero[2] * vec4(u_xlat15) + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVPZero[3] * vec4(u_xlat16) + u_xlat2;
    u_xlat3 = u_xlat1.yyyy * unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat3 = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * u_xlat1.xxxx + u_xlat3;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * u_xlat1.zzzz + u_xlat3;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3] * in_POSITION0.wwww + u_xlat1;
    vs_TEXCOORD3.xyz = u_xlat1.xyz / u_xlat1.www;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.xz = u_xlat2.xw * vec2(0.5, 0.5);
    u_xlat5.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat1.w = u_xlat5.x * 0.5;
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat5.xyz = in_NORMAL0.yyy * unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat5.xyz = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_NORMAL0.xxx + u_xlat5.xyz;
    u_xlat0.xyz = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_NORMAL0.zzz + u_xlat5.xyz;
    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(0.5<mhy_CharacterOverrideLightDir.w);
#else
    u_xlatb15 = 0.5<mhy_CharacterOverrideLightDir.w;
#endif
    u_xlat1.x = mhy_CharacterOverrideLightDir.x;
    u_xlat1.yz = (-mhy_CharacterOverrideLightDir.yz);
    u_xlat1.xyz = (bool(u_xlatb15)) ? u_xlat1.xyz : mhy_AvatarLightDir.xyz;
    u_xlat16_9 = dot(u_xlat0.xyz, u_xlat1.xyz);
    vs_TEXCOORD1.w = u_xlat16_9 * 0.497500002 + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_CharacterAmbientSensorShadowOn));
#else
    u_xlatb15 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_CharacterAmbientSensorShadowOn);
#endif
    if(u_xlatb15){
        u_xlat15 = textureLod(_CharacterAmbientSensorTex, _AmbientSensorUVs.xy, 0.0).x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb15 = !!(0.5<u_xlat15);
#else
        u_xlatb15 = 0.5<u_xlat15;
#endif
        vs_TEXCOORD4 = u_xlatb15 ? 1.0 : float(0.0);
    } else {
        vs_TEXCOORD4 = 0.0;
    //ENDIF
    }
    gl_Position = u_xlat2;
    vs_COLOR0.xyz = in_COLOR0.xyz;
    vs_COLOR0.w = u_xlat16_4;
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    vs_TEXCOORD2.zw = u_xlat2.zw;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	mediump vec4 _Color;
uniform 	float _MainTexAlphaUse;
uniform 	mediump float _MainTexAlphaCutoff;
uniform 	mediump vec4 _MainTexTintColor;
uniform 	float _UseVertexColorAO;
uniform 	mediump float _LightArea;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	float _UseCoolShadowColorOrTex;
uniform 	mediump vec3 _CoolShadowMultColor;
uniform 	float _UseShadowTransition;
uniform 	float _ShadowTransitionRange;
uniform 	float _ShadowTransitionSoftness;
uniform 	mediump vec3 _SpecularColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	float _FaceBlushStrength;
uniform 	mediump vec3 _FaceBlushColor;
uniform 	mediump float _EmissionScaler;
uniform 	mediump vec3 _EmissionColor_MHY;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _TextureBiasWhenDithering;
uniform 	float _UseClipPlane;
uniform 	float _ES_CharacterAmbientLightOn;
uniform 	float _ES_CharacterAmbientBrightness;
uniform 	vec3 _ES_CharacterMainLightColor;
uniform 	vec3 _ES_CharacterAmbientLightColor;
uniform 	float _ES_CharacterMainLightRatio;
uniform 	float _ES_CharacterAmbientLightRatio;
uniform 	float _ES_CharacterColorTone;
uniform 	float _ES_CharacterPointLightWholeIntensity;
uniform 	vec4 mhy_AvatarLightDir;
uniform 	vec4 mhy_CharacterPointLightColor;
uniform 	vec4 mhy_CharacterOverrideLightDir;
uniform 	mediump vec4 _FlowMapColor01;
uniform 	mediump float _FlowScale01;
uniform 	mediump float _FlowMap01_Uspeed;
uniform 	vec4 _FlowMap01_ST;
uniform 	mediump float _FlowMap01_Vspeed;
uniform 	mediump float _Noise_Uspeed;
uniform 	vec4 _Noise_ST;
uniform 	mediump float _Noise_Vspeed;
uniform 	mediump float _NoiseFlowIntensity;
uniform 	mediump float _MaskOffset01;
uniform 	mediump float _NoiseIntensity;
uniform 	mediump float _Mask01_Power;
uniform 	mediump vec4 _FlowMapColor02;
uniform 	mediump float _FlowScale02;
uniform 	mediump float _FlowMap02_Uspeed;
uniform 	vec4 _FlowMap02_ST;
uniform 	mediump float _FlowMap02_Vspeed;
uniform 	mediump float _MaskOffset02;
uniform 	mediump float _Mask02_Power;
uniform 	mediump float _DissolveNoise_Uspeed;
uniform 	vec4 _DissovleNoise_ST;
uniform 	mediump float _DissolveNoise_Vspeed;
uniform 	mediump float _DissovleNoiseScale;
uniform 	mediump float _Dissovle;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _Noise;
uniform lowp sampler2D _FlowMap01;
uniform lowp sampler2D _Mask01;
uniform lowp sampler2D _FlowMap02;
uniform lowp sampler2D _Mask02;
uniform lowp sampler2D _DissovleNoise;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp float vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
lowp float u_xlat10_2;
int u_xlati2;
bvec4 u_xlatb2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
lowp float u_xlat10_3;
int u_xlati3;
bool u_xlatb3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec2 u_xlat16_7;
mediump vec3 u_xlat16_8;
vec3 u_xlat9;
bool u_xlatb10;
vec3 u_xlat12;
mediump vec3 u_xlat16_12;
lowp float u_xlat10_12;
int u_xlati12;
bool u_xlatb12;
vec3 u_xlat13;
mediump vec3 u_xlat16_13;
mediump float u_xlat16_14;
mediump vec2 u_xlat16_15;
mediump vec2 u_xlat16_16;
bvec2 u_xlatb20;
float u_xlat22;
bool u_xlatb22;
mediump vec2 u_xlat16_25;
float u_xlat30;
bool u_xlatb30;
float u_xlat32;
mediump float u_xlat16_32;
lowp float u_xlat10_32;
int u_xlati32;
bool u_xlatb32;
float u_xlat33;
mediump float u_xlat16_34;
mediump float u_xlat16_35;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseClipPlane));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseClipPlane);
#endif
    u_xlat16_1.x = vs_COLOR0.w + -0.00999999978;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(u_xlat16_1.x<0.0);
#else
    u_xlatb10 = u_xlat16_1.x<0.0;
#endif
    u_xlatb0 = u_xlatb0 && u_xlatb10;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(_DitherAlpha<0.949999988);
#else
        u_xlatb0 = _DitherAlpha<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb20.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb20.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb20.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = _DitherAlpha * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + -0.00999999978;
#ifdef UNITY_ADRENO_ES3
            u_xlatb0 = !!(u_xlat0.x<0.0);
#else
            u_xlatb0 = u_xlat0.x<0.0;
#endif
            if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(0.5<mhy_CharacterOverrideLightDir.w);
#else
    u_xlatb2.x = 0.5<mhy_CharacterOverrideLightDir.w;
#endif
    u_xlat3.x = mhy_CharacterOverrideLightDir.x;
    u_xlat3.yz = (-mhy_CharacterOverrideLightDir.yz);
    u_xlat2.xyz = (u_xlatb2.x) ? u_xlat3.xyz : mhy_AvatarLightDir.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat30) + u_xlat2.xyz;
    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
    u_xlat30 = _TextureBiasWhenDithering + -1.0;
    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy, u_xlat30);
    u_xlat16_4.xyz = u_xlat1.xyz * _MainTexTintColor.xyz;
    u_xlat16_5.xyz = u_xlat16_4.xyz + u_xlat16_4.xyz;
    u_xlat16_6.xyz = u_xlat1.xyz + _MainTexTintColor.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_6.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(-4.0, -4.0, -4.0) + u_xlat16_6.xyz;
    u_xlatb2 = lessThan(vec4(0.5, 0.5, 0.5, 0.00999999978), u_xlat1);
    u_xlat16_6.x = (u_xlatb2.x) ? float(1.0) : float(0.0);
    u_xlat16_6.y = (u_xlatb2.y) ? float(1.0) : float(0.0);
    u_xlat16_6.z = (u_xlatb2.z) ? float(1.0) : float(0.0);
    u_xlat16_4.xyz = u_xlat16_4.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat16_4.xyz = u_xlat16_6.xyz * u_xlat16_4.xyz + u_xlat16_5.xyz;
    u_xlatb2.xyz = equal(vec4(_MainTexAlphaUse), vec4(3.0, 1.0, 2.0, 0.0)).xyz;
    u_xlat30 = u_xlat1.w * _FaceBlushStrength;
    u_xlat16_3.xyz = (-u_xlat16_4.xyz) + _FaceBlushColor.xyz;
    u_xlat3.xyz = vec3(u_xlat30) * u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat16_4.xyz = (u_xlatb2.x) ? u_xlat3.xyz : u_xlat16_4.xyz;
    u_xlat16_34 = u_xlat1.w + (-_MainTexAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(u_xlat16_34<0.0);
#else
    u_xlatb30 = u_xlat16_34<0.0;
#endif
    u_xlatb30 = u_xlatb2.y && u_xlatb30;
    if((int(u_xlatb30) * int(0xffffffffu))!=0){discard;}
    u_xlat16_4.xyz = u_xlat16_4.xyz * _Color.xyz;
    u_xlatb30 = u_xlatb2.w && u_xlatb2.z;
    u_xlat16_34 = (u_xlatb30) ? u_xlat1.w : 0.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorAO));
#else
    u_xlatb2.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorAO);
#endif
    u_xlat16_5.x = vs_COLOR0.x * 0.5;
    u_xlat16_5.x = (u_xlatb2.x) ? u_xlat16_5.x : 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat16_5.x<0.0500000007);
#else
    u_xlatb12 = u_xlat16_5.x<0.0500000007;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(0.949999988<u_xlat16_5.x);
#else
    u_xlatb22 = 0.949999988<u_xlat16_5.x;
#endif
    u_xlat32 = u_xlat16_5.x + vs_TEXCOORD1.w;
    u_xlat32 = u_xlat32 * 0.5;
    u_xlat16_5.x = (u_xlatb22) ? 1.0 : u_xlat32;
    u_xlat16_5.x = (u_xlatb12) ? 0.0 : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb2.x) ? u_xlat16_5.x : vs_TEXCOORD1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(u_xlat16_5.x<_LightArea);
#else
    u_xlatb2.x = u_xlat16_5.x<_LightArea;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition));
#else
    u_xlatb12 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition);
#endif
    u_xlat16_5.x = (-u_xlat16_5.x) + _LightArea;
    u_xlat16_5.x = u_xlat16_5.x / _ShadowTransitionRange;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(u_xlat16_5.x>=1.0);
#else
    u_xlatb22 = u_xlat16_5.x>=1.0;
#endif
    u_xlat16_32 = u_xlat16_5.x + 0.00999999978;
    u_xlat16_32 = log2(u_xlat16_32);
    u_xlat32 = u_xlat16_32 * _ShadowTransitionSoftness;
    u_xlat32 = exp2(u_xlat32);
    u_xlat32 = min(u_xlat32, 1.0);
    u_xlat22 = (u_xlatb22) ? 1.0 : u_xlat32;
    u_xlat22 = (u_xlatb12) ? u_xlat22 : 1.0;
    u_xlat22 = u_xlatb2.x ? u_xlat22 : float(0.0);
#ifdef UNITY_ADRENO_ES3
    { bool cond = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(vs_TEXCOORD4); u_xlati32 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati32 = int((vec4(0.0, 0.0, 0.0, 0.0)!=vec4(vs_TEXCOORD4)) ? 0xFFFFFFFFu : uint(0u));
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex));
#else
    u_xlatb3 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex);
#endif
    u_xlat16_13.xyz = vec3(_FirstShadowMultColor.xxyz.y + (-_CoolShadowMultColor.x), _FirstShadowMultColor.xxyz.z + (-_CoolShadowMultColor.y), float(_FirstShadowMultColor.z) + (-_CoolShadowMultColor.z));
    u_xlat13.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_13.xyz + _CoolShadowMultColor.xyz;
    u_xlat16_5.xyz = (bool(u_xlatb3)) ? u_xlat13.xyz : vec3(_FirstShadowMultColor.x, _FirstShadowMultColor.y, _FirstShadowMultColor.z);
    u_xlati3 = ~u_xlati32;
    u_xlati12 = u_xlatb12 ? u_xlati3 : int(0);
    u_xlat16_3.xyz = u_xlat16_5.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat3.xyz = vec3(u_xlat22) * u_xlat16_3.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_5.xyz = (int(u_xlati12) != 0) ? u_xlat3.xyz : u_xlat16_5.xyz;
    u_xlat16_35 = dot(vs_TEXCOORD1.xyz, u_xlat0.xyz);
    u_xlat16_35 = max(u_xlat16_35, 0.00100000005);
    u_xlat16_35 = log2(u_xlat16_35);
    u_xlat16_35 = u_xlat16_35 * _Shininess;
    u_xlat16_35 = exp2(u_xlat16_35);
    u_xlat16_6.xyz = vec3(u_xlat16_35) * _SpecularColor.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(_SpecMulti);
    u_xlat16_4.xyz = vec3(u_xlat16_4.x * _EmissionColor_MHY.xxyz.y, u_xlat16_4.y * _EmissionColor_MHY.xxyz.z, u_xlat16_4.z * float(_EmissionColor_MHY.z));
    u_xlat0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlati2 = int(uint(u_xlatb2.x) * 0xffffffffu | uint(u_xlati32));
    u_xlat12.xyz = u_xlat0.xyz * u_xlat16_5.xyz;
    u_xlat0.xyz = (int(u_xlati2) != 0) ? u_xlat12.xyz : u_xlat0.xyz;
    u_xlat0.xyz = u_xlat16_6.xyz * vec3(0.5, 0.5, 0.5) + u_xlat0.xyz;
    u_xlat2.xy = vs_TEXCOORD0.zw * _FlowMap01_ST.xy + _FlowMap01_ST.zw;
    u_xlat16_5.x = _Time.y * _FlowMap01_Uspeed + u_xlat2.x;
    u_xlat16_5.y = _Time.y * _FlowMap01_Vspeed + u_xlat2.y;
    u_xlat2.xy = vs_TEXCOORD0.zw * _Noise_ST.xy + _Noise_ST.zw;
    u_xlat16_6.x = _Time.y * _Noise_Uspeed + u_xlat2.x;
    u_xlat16_6.y = _Time.y * _Noise_Vspeed + u_xlat2.y;
    u_xlat10_2 = texture(_Noise, u_xlat16_6.xy).x;
    u_xlat16_25.x = _MaskOffset01 * 1.39999998 + -0.699999988;
    u_xlat16_16.x = u_xlat10_2 * _NoiseIntensity;
    u_xlat12.xy = vs_TEXCOORD0.zw * _FlowMap02_ST.xy + _FlowMap02_ST.zw;
    u_xlat16_7.x = _Time.y * _FlowMap02_Uspeed + u_xlat12.x;
    u_xlat16_7.y = _Time.y * _FlowMap02_Vspeed + u_xlat12.y;
    u_xlat16_25.y = _MaskOffset02 * 1.39999998 + -0.699999988;
    u_xlat16_8.xyz = _FlowMapColor01.xyz * vec3(_FlowScale01);
    u_xlat16_5.xy = vec2(u_xlat10_2) * vec2(vec2(_NoiseFlowIntensity, _NoiseFlowIntensity)) + u_xlat16_5.xy;
    u_xlat10_12 = texture(_FlowMap01, u_xlat16_5.xy).x;
    u_xlat16_12.xyz = vec3(u_xlat10_12) * u_xlat16_8.xyz;
    u_xlat16_5.x = (-vs_TEXCOORD0.z) + 1.0;
    u_xlat16_1.xz = u_xlat16_25.xy + u_xlat16_5.xx;
    u_xlat16_1.yw = vec2(u_xlat10_2) * vec2(vec2(_NoiseIntensity, _NoiseIntensity)) + (-vs_TEXCOORD0.ww);
    u_xlat16_16.y = 1.0;
    u_xlat16_15.xy = u_xlat16_1.xy + u_xlat16_16.xy;
    u_xlat10_3 = texture(_Mask01, u_xlat16_15.xy).x;
    u_xlat16_3.x = max(u_xlat10_3, 9.99999975e-05);
    u_xlat16_3.x = log2(u_xlat16_3.x);
    u_xlat16_3.x = u_xlat16_3.x * _Mask01_Power;
    u_xlat16_3.x = exp2(u_xlat16_3.x);
    u_xlat16_8.xyz = _FlowMapColor02.xyz * vec3(_FlowScale02);
    u_xlat16_15.xy = vec2(u_xlat10_2) * vec2(vec2(_NoiseFlowIntensity, _NoiseFlowIntensity)) + u_xlat16_7.xy;
    u_xlat10_2 = texture(_FlowMap02, u_xlat16_15.xy).x;
    u_xlat16_13.xyz = vec3(u_xlat10_2) * u_xlat16_8.xyz;
    u_xlat16_5.xy = vec2(u_xlat16_1.z + u_xlat16_16.x, u_xlat16_1.w + u_xlat16_16.y);
    u_xlat10_2 = texture(_Mask02, u_xlat16_5.xy).x;
    u_xlat16_2.x = max(u_xlat10_2, 9.99999975e-05);
    u_xlat16_2.x = log2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * _Mask02_Power;
    u_xlat16_2.x = exp2(u_xlat16_2.x);
    u_xlat16_13.xyz = u_xlat16_2.xxx * u_xlat16_13.xyz;
    u_xlat16_2.xyz = u_xlat16_12.xyz * u_xlat16_3.xxx + u_xlat16_13.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(_EmissionScaler) + u_xlat16_2.xyz;
    u_xlat3.xyz = (-u_xlat0.xyz) + u_xlat16_4.xyz;
    u_xlat3.xyz = vec3(u_xlat16_34) * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat9.xy = vs_TEXCOORD0.zw * _DissovleNoise_ST.xy + _DissovleNoise_ST.zw;
    u_xlat16_4.x = _Time.y * _DissolveNoise_Uspeed + u_xlat9.x;
    u_xlat16_4.y = _Time.y * _DissolveNoise_Vspeed + u_xlat9.y;
    u_xlat10_32 = texture(_DissovleNoise, u_xlat16_4.xy).x;
    u_xlat32 = u_xlat10_32 * _DissovleNoiseScale + vs_TEXCOORD0.z;
#ifdef UNITY_ADRENO_ES3
    u_xlatb32 = !!(_Dissovle>=u_xlat32);
#else
    u_xlatb32 = _Dissovle>=u_xlat32;
#endif
    u_xlat0.xyz = (bool(u_xlatb30)) ? u_xlat3.xyz : u_xlat0.xyz;
    u_xlat0.xyz = u_xlat16_2.xyz + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(0.00999999978<u_xlat16_34);
#else
    u_xlatb30 = 0.00999999978<u_xlat16_34;
#endif
    if((int(u_xlatb32) * int(0xffffffffu))==0){discard;}
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn));
#else
    u_xlatb2.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn);
#endif
    u_xlat12.xyz = u_xlat0.xyz * vec3(vec3(_ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness));
    u_xlat3.xyz = vec3(vec3(_ES_CharacterPointLightWholeIntensity, _ES_CharacterPointLightWholeIntensity, _ES_CharacterPointLightWholeIntensity)) * mhy_CharacterPointLightColor.xyz;
    u_xlat9.xyz = _ES_CharacterMainLightColor.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat9.xyz = min(max(u_xlat9.xyz, 0.0), 1.0);
#else
    u_xlat9.xyz = clamp(u_xlat9.xyz, 0.0, 1.0);
#endif
    u_xlat33 = (-mhy_CharacterPointLightColor.w) + 1.0;
    u_xlat3.xyz = u_xlat9.xyz * vec3(u_xlat33) + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat3.xyz = vec3(vec3(_ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio)) * u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat12.xyz = u_xlat12.xyz * u_xlat3.xyz;
    u_xlat3.xyz = _ES_CharacterAmbientLightColor.xyz * vec3(_ES_CharacterAmbientLightRatio);
    u_xlat16_4.xyz = u_xlat12.xyz * vec3(10.0, 10.0, 10.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.xyz = min(max(u_xlat16_4.xyz, 0.0), 1.0);
#else
    u_xlat16_4.xyz = clamp(u_xlat16_4.xyz, 0.0, 1.0);
#endif
    u_xlat12.xyz = u_xlat3.xyz * u_xlat16_4.xyz + u_xlat12.xyz;
    u_xlat16_4.xyz = (u_xlatb2.x) ? u_xlat12.xyz : u_xlat0.xyz;
    u_xlat16_5.xyz = u_xlat0.xyz + (-u_xlat16_4.xyz);
    u_xlat16_5.xyz = vec3(u_xlat16_34) * u_xlat16_5.xyz + u_xlat16_4.xyz;
    u_xlat16_0.xyz = (bool(u_xlatb30)) ? u_xlat16_5.xyz : u_xlat16_4.xyz;
    u_xlat16_4.x = max(u_xlat16_0.z, u_xlat16_0.y);
    u_xlat16_1.w = max(u_xlat16_0.x, u_xlat16_4.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(1.0<u_xlat16_1.w);
#else
    u_xlatb2.x = 1.0<u_xlat16_1.w;
#endif
    u_xlat16_1.xyz = u_xlat16_0.xyz / u_xlat16_1.www;
    u_xlat16_0.w = 1.0;
    u_xlat16_0 = (u_xlatb2.x) ? u_xlat16_1 : u_xlat16_0;
    u_xlat16_4.x = min(u_xlat16_0.w, 1.10000002);
    u_xlat16_14 = u_xlat16_0.w + (-u_xlat16_4.x);
    u_xlat16_4.x = u_xlat16_34 * u_xlat16_14 + u_xlat16_4.x;
    u_xlat16_2.x = u_xlat16_4.x * 0.0500000007;
    SV_Target0.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb12 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_4.x = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb12) ? u_xlat16_4.x : 0.0;
    SV_Target0.w = 0.0156862754;
    SV_Target1.xyz = u_xlat16_0.xyz;
    SV_Target1.w = u_xlat16_2.x;
    SV_Target2.xy = vec2(0.0, 0.0);
    SV_Target2.w = vs_TEXCOORD4;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "TOON_SPECULAR_ON" "TOON_LIGHTMAP_ON" "MAIN_TEX_COLORING_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _MainTex_ST;
uniform 	float _CharacterAmbientSensorShadowOn;
uniform 	vec4 _AmbientSensorUVs;
uniform 	float _UseClipPlane;
uniform 	float _ClipPlaneWorld;
uniform 	vec4 _ClipPlane;
uniform 	vec4 mhy_AvatarLightDir;
uniform 	vec4 mhy_CharacterOverrideLightDir;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
struct unity_Builtins1Array_Type {
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw1 {
	unity_Builtins1Array_Type unity_Builtins1Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform lowp sampler2D _CharacterAmbientSensorTex;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp float vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD6;
flat out highp uint vs_SV_InstanceID0;
vec3 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump float u_xlat16_4;
vec3 u_xlat5;
int u_xlati5;
bool u_xlatb5;
float u_xlat6;
mediump float u_xlat16_9;
float u_xlat10;
bool u_xlatb10;
bool u_xlatb11;
float u_xlat15;
bool u_xlatb15;
float u_xlat16;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
#ifdef UNITY_ADRENO_ES3
    u_xlatb5 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseClipPlane));
#else
    u_xlatb5 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseClipPlane);
#endif
    if(u_xlatb5){
#ifdef UNITY_ADRENO_ES3
        u_xlatb5 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ClipPlaneWorld));
#else
        u_xlatb5 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ClipPlaneWorld);
#endif
        if(u_xlatb5){
            u_xlati5 = u_xlati0 << 2;
#ifdef UNITY_ADRENO_ES3
            u_xlatb10 = !!(abs(_ClipPlane.w)<0.00100000005);
#else
            u_xlatb10 = abs(_ClipPlane.w)<0.00100000005;
#endif
            u_xlat1.xyz = _ClipPlane.www * _ClipPlane.xyz;
            u_xlat1.xyz = (bool(u_xlatb10)) ? vec3(0.0, 0.0, 0.0) : u_xlat1.xyz;
            u_xlat2 = u_xlat1.yyyy * unity_Builtins1Array[u_xlati5 / 4].hlslcc_mtx4x4unity_WorldToObjectArray[1];
            u_xlat2 = unity_Builtins1Array[u_xlati5 / 4].hlslcc_mtx4x4unity_WorldToObjectArray[0] * u_xlat1.xxxx + u_xlat2;
            u_xlat1 = unity_Builtins1Array[u_xlati5 / 4].hlslcc_mtx4x4unity_WorldToObjectArray[2] * u_xlat1.zzzz + u_xlat2;
            u_xlat1 = u_xlat1 + unity_Builtins1Array[u_xlati5 / 4].hlslcc_mtx4x4unity_WorldToObjectArray[3];
            u_xlat1.xyz = u_xlat1.xyz / u_xlat1.www;
            u_xlat2.xyz = _ClipPlane.yyy * unity_Builtins1Array[u_xlati5 / 4].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz;
            u_xlat2.xyz = unity_Builtins1Array[u_xlati5 / 4].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz * _ClipPlane.xxx + u_xlat2.xyz;
            u_xlat5.xyz = unity_Builtins1Array[u_xlati5 / 4].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz * _ClipPlane.zzz + u_xlat2.xyz;
            u_xlat1.x = dot(u_xlat1.xyz, u_xlat5.xyz);
            u_xlat6 = dot(in_POSITION0.xyz, u_xlat5.xyz);
#ifdef UNITY_ADRENO_ES3
            u_xlatb11 = !!(u_xlat6<u_xlat1.x);
#else
            u_xlatb11 = u_xlat6<u_xlat1.x;
#endif
            u_xlat1.x = (-u_xlat1.x) + u_xlat6;
            u_xlat2.xyz = (-u_xlat1.xxx) * u_xlat5.xyz + in_POSITION0.xyz;
            u_xlat2.w = 0.0;
            u_xlat3.xyz = in_POSITION0.xyz;
            u_xlat3.w = in_COLOR0.w;
            u_xlat1 = (bool(u_xlatb11)) ? u_xlat2 : u_xlat3;
            u_xlat16_4 = u_xlat1.w;
        } else {
            u_xlat5.x = dot(in_POSITION0.xyz, _ClipPlane.xyz);
            u_xlat10 = _ClipPlane.w + -0.00999999978;
#ifdef UNITY_ADRENO_ES3
            u_xlatb10 = !!(u_xlat5.x<u_xlat10);
#else
            u_xlatb10 = u_xlat5.x<u_xlat10;
#endif
            u_xlat5.x = u_xlat5.x + (-_ClipPlane.w);
            u_xlat2.xyz = (-u_xlat5.xxx) * _ClipPlane.xyz + in_POSITION0.xyz;
            u_xlat2.w = 0.0;
            u_xlat3.xyz = in_POSITION0.xyz;
            u_xlat3.w = in_COLOR0.w;
            u_xlat1 = (bool(u_xlatb10)) ? u_xlat2 : u_xlat3;
            u_xlat16_4 = u_xlat1.w;
        //ENDIF
        }
    } else {
        u_xlat1.xyz = in_POSITION0.xyz;
        u_xlat16_4 = in_COLOR0.w;
    //ENDIF
    }
    u_xlati0 = u_xlati0 << 2;
    u_xlat2.xyw = (-_WorldSpaceCameraPos.xyz) + unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat3.x = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].x;
    u_xlat3.y = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].x;
    u_xlat3.z = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].x;
    u_xlat3.w = u_xlat2.x;
    u_xlat1.w = 1.0;
    u_xlat5.x = dot(u_xlat3, u_xlat1);
    u_xlat3.x = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].y;
    u_xlat3.y = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].y;
    u_xlat3.z = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].y;
    u_xlat3.w = u_xlat2.y;
    u_xlat10 = dot(u_xlat3, u_xlat1);
    u_xlat2.x = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].z;
    u_xlat2.y = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].z;
    u_xlat2.z = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].z;
    u_xlat15 = dot(u_xlat2, u_xlat1);
    u_xlat2.x = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].w;
    u_xlat2.y = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].w;
    u_xlat2.z = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].w;
    u_xlat2.w = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3].w;
    u_xlat16 = dot(u_xlat2, u_xlat1);
    u_xlat2 = vec4(u_xlat10) * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat5.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVPZero[2] * vec4(u_xlat15) + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVPZero[3] * vec4(u_xlat16) + u_xlat2;
    u_xlat3 = u_xlat1.yyyy * unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat3 = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * u_xlat1.xxxx + u_xlat3;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * u_xlat1.zzzz + u_xlat3;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3] * in_POSITION0.wwww + u_xlat1;
    vs_TEXCOORD3.xyz = u_xlat1.xyz / u_xlat1.www;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.xz = u_xlat2.xw * vec2(0.5, 0.5);
    u_xlat5.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat1.w = u_xlat5.x * 0.5;
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat5.xyz = in_NORMAL0.yyy * unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat5.xyz = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_NORMAL0.xxx + u_xlat5.xyz;
    u_xlat0.xyz = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_NORMAL0.zzz + u_xlat5.xyz;
    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(0.5<mhy_CharacterOverrideLightDir.w);
#else
    u_xlatb15 = 0.5<mhy_CharacterOverrideLightDir.w;
#endif
    u_xlat1.x = mhy_CharacterOverrideLightDir.x;
    u_xlat1.yz = (-mhy_CharacterOverrideLightDir.yz);
    u_xlat1.xyz = (bool(u_xlatb15)) ? u_xlat1.xyz : mhy_AvatarLightDir.xyz;
    u_xlat16_9 = dot(u_xlat0.xyz, u_xlat1.xyz);
    vs_TEXCOORD1.w = u_xlat16_9 * 0.497500002 + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_CharacterAmbientSensorShadowOn));
#else
    u_xlatb15 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_CharacterAmbientSensorShadowOn);
#endif
    if(u_xlatb15){
        u_xlat15 = textureLod(_CharacterAmbientSensorTex, _AmbientSensorUVs.xy, 0.0).x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb15 = !!(0.5<u_xlat15);
#else
        u_xlatb15 = 0.5<u_xlat15;
#endif
        vs_TEXCOORD4 = u_xlatb15 ? 1.0 : float(0.0);
    } else {
        vs_TEXCOORD4 = 0.0;
    //ENDIF
    }
    gl_Position = u_xlat2;
    vs_COLOR0.xyz = in_COLOR0.xyz;
    vs_COLOR0.w = u_xlat16_4;
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    vs_TEXCOORD2.zw = u_xlat2.zw;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	mediump vec4 _Color;
uniform 	float _MainTexAlphaUse;
uniform 	mediump float _MainTexAlphaCutoff;
uniform 	mediump vec4 _MainTexTintColor;
uniform 	float _UseLightMapColorAO;
uniform 	float _UseVertexColorAO;
uniform 	mediump float _LightArea;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	float _UseCoolShadowColorOrTex;
uniform 	mediump vec3 _CoolShadowMultColor;
uniform 	float _UseShadowTransition;
uniform 	float _ShadowTransitionRange;
uniform 	float _ShadowTransitionSoftness;
uniform 	mediump vec3 _SpecularColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	float _FaceBlushStrength;
uniform 	mediump vec3 _FaceBlushColor;
uniform 	mediump float _EmissionScaler;
uniform 	mediump vec3 _EmissionColor_MHY;
uniform 	float _UseMaterial2;
uniform 	mediump vec3 _Color2;
uniform 	mediump vec3 _FirstShadowMultColor2;
uniform 	mediump vec3 _CoolShadowMultColor2;
uniform 	mediump float _Shininess2;
uniform 	mediump float _SpecMulti2;
uniform 	float _ShadowTransitionRange2;
uniform 	float _ShadowTransitionSoftness2;
uniform 	float _UseMaterial3;
uniform 	mediump vec3 _Color3;
uniform 	mediump vec3 _FirstShadowMultColor3;
uniform 	mediump vec3 _CoolShadowMultColor3;
uniform 	mediump float _Shininess3;
uniform 	mediump float _SpecMulti3;
uniform 	float _ShadowTransitionRange3;
uniform 	float _ShadowTransitionSoftness3;
uniform 	float _UseMaterial4;
uniform 	mediump vec3 _Color4;
uniform 	mediump vec3 _FirstShadowMultColor4;
uniform 	mediump vec3 _CoolShadowMultColor4;
uniform 	mediump float _Shininess4;
uniform 	mediump float _SpecMulti4;
uniform 	float _ShadowTransitionRange4;
uniform 	float _ShadowTransitionSoftness4;
uniform 	float _UseMaterial5;
uniform 	mediump vec3 _Color5;
uniform 	mediump vec3 _FirstShadowMultColor5;
uniform 	mediump vec3 _CoolShadowMultColor5;
uniform 	mediump float _Shininess5;
uniform 	mediump float _SpecMulti5;
uniform 	float _ShadowTransitionRange5;
uniform 	float _ShadowTransitionSoftness5;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _TextureBiasWhenDithering;
uniform 	float _UseClipPlane;
uniform 	float _ES_CharacterAmbientLightOn;
uniform 	float _ES_CharacterAmbientBrightness;
uniform 	vec3 _ES_CharacterMainLightColor;
uniform 	vec3 _ES_CharacterAmbientLightColor;
uniform 	float _ES_CharacterMainLightRatio;
uniform 	float _ES_CharacterAmbientLightRatio;
uniform 	float _ES_CharacterColorTone;
uniform 	float _ES_CharacterPointLightWholeIntensity;
uniform 	vec4 mhy_AvatarLightDir;
uniform 	vec4 mhy_CharacterPointLightColor;
uniform 	vec4 mhy_CharacterOverrideLightDir;
uniform 	mediump vec4 _FlowMapColor01;
uniform 	mediump float _FlowScale01;
uniform 	mediump float _FlowMap01_Uspeed;
uniform 	vec4 _FlowMap01_ST;
uniform 	mediump float _FlowMap01_Vspeed;
uniform 	mediump float _Noise_Uspeed;
uniform 	vec4 _Noise_ST;
uniform 	mediump float _Noise_Vspeed;
uniform 	mediump float _NoiseFlowIntensity;
uniform 	mediump float _MaskOffset01;
uniform 	mediump float _NoiseIntensity;
uniform 	mediump float _Mask01_Power;
uniform 	mediump vec4 _FlowMapColor02;
uniform 	mediump float _FlowScale02;
uniform 	mediump float _FlowMap02_Uspeed;
uniform 	vec4 _FlowMap02_ST;
uniform 	mediump float _FlowMap02_Vspeed;
uniform 	mediump float _MaskOffset02;
uniform 	mediump float _Mask02_Power;
uniform 	mediump float _DissolveNoise_Uspeed;
uniform 	vec4 _DissovleNoise_ST;
uniform 	mediump float _DissolveNoise_Vspeed;
uniform 	mediump float _DissovleNoiseScale;
uniform 	mediump float _Dissovle;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _Noise;
uniform lowp sampler2D _FlowMap01;
uniform lowp sampler2D _Mask01;
uniform lowp sampler2D _FlowMap02;
uniform lowp sampler2D _Mask02;
uniform lowp sampler2D _DissovleNoise;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp float vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
vec3 u_xlat2;
mediump float u_xlat16_2;
bvec4 u_xlatb2;
vec3 u_xlat3;
mediump float u_xlat16_3;
lowp vec4 u_xlat10_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
bvec4 u_xlatb5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
mediump vec3 u_xlat16_7;
bvec3 u_xlatb7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
bool u_xlatb11;
vec3 u_xlat13;
mediump vec3 u_xlat16_13;
lowp float u_xlat10_13;
bool u_xlatb13;
mediump vec3 u_xlat16_14;
int u_xlati14;
bool u_xlatb14;
mediump float u_xlat16_15;
mediump vec3 u_xlat16_17;
mediump vec3 u_xlat16_19;
bvec2 u_xlatb22;
float u_xlat24;
bool u_xlatb24;
float u_xlat33;
mediump float u_xlat16_33;
lowp float u_xlat10_33;
int u_xlati33;
bool u_xlatb33;
float u_xlat35;
mediump float u_xlat16_35;
int u_xlati35;
float u_xlat36;
int u_xlati36;
mediump float u_xlat16_37;
mediump float u_xlat16_39;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseClipPlane));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseClipPlane);
#endif
    u_xlat16_1.x = vs_COLOR0.w + -0.00999999978;
#ifdef UNITY_ADRENO_ES3
    u_xlatb11 = !!(u_xlat16_1.x<0.0);
#else
    u_xlatb11 = u_xlat16_1.x<0.0;
#endif
    u_xlatb0 = u_xlatb0 && u_xlatb11;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(_DitherAlpha<0.949999988);
#else
        u_xlatb0 = _DitherAlpha<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb22.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb22.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb22.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = _DitherAlpha * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + -0.00999999978;
#ifdef UNITY_ADRENO_ES3
            u_xlatb0 = !!(u_xlat0.x<0.0);
#else
            u_xlatb0 = u_xlat0.x<0.0;
#endif
            if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(0.5<mhy_CharacterOverrideLightDir.w);
#else
    u_xlatb2.x = 0.5<mhy_CharacterOverrideLightDir.w;
#endif
    u_xlat3.x = mhy_CharacterOverrideLightDir.x;
    u_xlat3.yz = (-mhy_CharacterOverrideLightDir.yz);
    u_xlat2.xyz = (u_xlatb2.x) ? u_xlat3.xyz : mhy_AvatarLightDir.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat33) + u_xlat2.xyz;
    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat0.xyz = vec3(u_xlat33) * u_xlat0.xyz;
    u_xlat33 = _TextureBiasWhenDithering + -1.0;
    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy, u_xlat33);
    u_xlat16_4.xyz = u_xlat1.xyz * _MainTexTintColor.xyz;
    u_xlat16_5.xyz = u_xlat16_4.xyz + u_xlat16_4.xyz;
    u_xlat16_6.xyz = u_xlat1.xyz + _MainTexTintColor.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_6.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(-4.0, -4.0, -4.0) + u_xlat16_6.xyz;
    u_xlatb2 = lessThan(vec4(0.5, 0.5, 0.5, 0.00999999978), u_xlat1);
    u_xlat16_6.x = (u_xlatb2.x) ? float(1.0) : float(0.0);
    u_xlat16_6.y = (u_xlatb2.y) ? float(1.0) : float(0.0);
    u_xlat16_6.z = (u_xlatb2.z) ? float(1.0) : float(0.0);
    u_xlat16_4.xyz = u_xlat16_4.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat16_4.xyz = u_xlat16_6.xyz * u_xlat16_4.xyz + u_xlat16_5.xyz;
    u_xlatb2.xyz = equal(vec4(_MainTexAlphaUse), vec4(3.0, 1.0, 2.0, 0.0)).xyz;
    u_xlat3.x = u_xlat1.w * _FaceBlushStrength;
    u_xlat16_14.xyz = (-u_xlat16_4.xyz) + _FaceBlushColor.xyz;
    u_xlat3.xyz = u_xlat3.xxx * u_xlat16_14.xyz + u_xlat16_4.xyz;
    u_xlat16_4.xyz = (u_xlatb2.x) ? u_xlat3.xyz : u_xlat16_4.xyz;
    u_xlat16_37 = u_xlat1.w + (-_MainTexAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(u_xlat16_37<0.0);
#else
    u_xlatb2.x = u_xlat16_37<0.0;
#endif
    u_xlatb2.x = u_xlatb2.y && u_xlatb2.x;
    if((int(u_xlatb2.x) * int(0xffffffffu))!=0){discard;}
    u_xlat10_3 = texture(_LightMapTex, vs_TEXCOORD0.xy, u_xlat33);
    u_xlatb2.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseLightMapColorAO, _UseVertexColorAO, _UseLightMapColorAO, _UseLightMapColorAO)).xy;
    u_xlat16_37 = (u_xlatb2.x) ? u_xlat10_3.y : 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseMaterial2));
#else
    u_xlatb33 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseMaterial2);
#endif
    u_xlatb5 = greaterThanEqual(u_xlat10_3.wwww, vec4(0.800000012, 0.400000006, 0.200000003, 0.600000024));
    u_xlatb33 = u_xlatb33 && u_xlatb5.x;
    u_xlat33 = (u_xlatb33) ? 2.0 : 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseMaterial3));
#else
    u_xlatb2.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseMaterial3);
#endif
    u_xlatb2.x = u_xlatb5.y && u_xlatb2.x;
    u_xlatb7.xyz = lessThan(u_xlat10_3.wwww, vec4(0.600000024, 0.400000006, 0.800000012, 0.0)).xyz;
    u_xlatb2.x = u_xlatb2.x && u_xlatb7.x;
    u_xlat33 = (u_xlatb2.x) ? 3.0 : u_xlat33;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseMaterial4));
#else
    u_xlatb2.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseMaterial4);
#endif
    u_xlatb2.x = u_xlatb5.z && u_xlatb2.x;
    u_xlatb2.x = u_xlatb7.y && u_xlatb2.x;
    u_xlat33 = (u_xlatb2.x) ? 4.0 : u_xlat33;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseMaterial5));
#else
    u_xlatb2.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseMaterial5);
#endif
    u_xlatb2.x = u_xlatb5.w && u_xlatb2.x;
    u_xlatb2.x = u_xlatb7.z && u_xlatb2.x;
    u_xlat33 = (u_xlatb2.x) ? 5.0 : u_xlat33;
    u_xlatb5 = equal(vec4(u_xlat33), vec4(2.0, 3.0, 4.0, 5.0));
    u_xlat16_6.xyz = (u_xlatb5.x) ? _Color2.xyz : _Color.xyz;
    u_xlat16_6.xyz = (u_xlatb5.y) ? _Color3.xyz : u_xlat16_6.xyz;
    u_xlat16_6.xyz = (u_xlatb5.z) ? _Color4.xyz : u_xlat16_6.xyz;
    u_xlat16_6.xyz = (u_xlatb5.w) ? _Color5.xyz : u_xlat16_6.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_6.xyz;
    u_xlatb2.x = u_xlatb2.w && u_xlatb2.z;
    u_xlat16_6.x = (u_xlatb2.x) ? u_xlat1.w : 0.0;
    u_xlat16_17.x = u_xlat16_37 * vs_COLOR0.x;
    u_xlat16_37 = (u_xlatb2.y) ? u_xlat16_17.x : u_xlat16_37;
#ifdef UNITY_ADRENO_ES3
    u_xlatb13 = !!(u_xlat16_37<0.0500000007);
#else
    u_xlatb13 = u_xlat16_37<0.0500000007;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(0.949999988<u_xlat16_37);
#else
    u_xlatb24 = 0.949999988<u_xlat16_37;
#endif
    u_xlat35 = u_xlat16_37 + vs_TEXCOORD1.w;
    u_xlat35 = u_xlat35 * 0.5;
    u_xlat16_37 = (u_xlatb24) ? 1.0 : u_xlat35;
    u_xlat16_37 = (u_xlatb13) ? 0.0 : u_xlat16_37;
#ifdef UNITY_ADRENO_ES3
    u_xlatb13 = !!(u_xlat16_37<_LightArea);
#else
    u_xlatb13 = u_xlat16_37<_LightArea;
#endif
    if(u_xlatb13){
#ifdef UNITY_ADRENO_ES3
        u_xlatb13 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition));
#else
        u_xlatb13 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition);
#endif
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(u_xlat33==1.0);
#else
        u_xlatb24 = u_xlat33==1.0;
#endif
        u_xlat16_8.x = (u_xlatb24) ? _ShadowTransitionRange : 0.0;
        u_xlat16_8.y = (u_xlatb24) ? _ShadowTransitionSoftness : 0.0;
        u_xlat16_17.xy = (u_xlatb5.x) ? vec2(_ShadowTransitionRange2, _ShadowTransitionSoftness2) : u_xlat16_8.xy;
        u_xlat16_17.xy = (u_xlatb5.y) ? vec2(_ShadowTransitionRange3, _ShadowTransitionSoftness3) : u_xlat16_17.xy;
        u_xlat16_17.xy = (u_xlatb5.z) ? vec2(_ShadowTransitionRange4, _ShadowTransitionSoftness4) : u_xlat16_17.xy;
        u_xlat16_17.xy = (u_xlatb5.w) ? vec2(_ShadowTransitionRange5, _ShadowTransitionSoftness5) : u_xlat16_17.xy;
        u_xlat16_37 = (-u_xlat16_37) + _LightArea;
        u_xlat16_37 = u_xlat16_37 / u_xlat16_17.x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(u_xlat16_37>=1.0);
#else
        u_xlatb24 = u_xlat16_37>=1.0;
#endif
        u_xlat16_35 = u_xlat16_37 + 0.00999999978;
        u_xlat16_35 = log2(u_xlat16_35);
        u_xlat16_35 = u_xlat16_35 * u_xlat16_17.y;
        u_xlat16_35 = exp2(u_xlat16_35);
        u_xlat35 = min(u_xlat16_35, 1.0);
        u_xlat24 = (u_xlatb24) ? 1.0 : u_xlat35;
        u_xlat13.x = (u_xlatb13) ? u_xlat24 : 1.0;
        u_xlat16_37 = 0.0;
    } else {
        u_xlat13.x = 0.0;
        u_xlat16_37 = 1.0;
    //ENDIF
    }
    u_xlat24 = (-u_xlat16_37) + 1.0;
#ifdef UNITY_ADRENO_ES3
    { bool cond = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(vs_TEXCOORD4); u_xlati35 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati35 = int((vec4(0.0, 0.0, 0.0, 0.0)!=vec4(vs_TEXCOORD4)) ? 0xFFFFFFFFu : uint(0u));
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(u_xlat33==1.0);
#else
    u_xlatb33 = u_xlat33==1.0;
#endif
    if(u_xlatb33){
#ifdef UNITY_ADRENO_ES3
        u_xlatb14 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex));
#else
        u_xlatb14 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex);
#endif
        u_xlat16_7.xyz = vec3(_FirstShadowMultColor.xxyz.y + (-_CoolShadowMultColor.x), _FirstShadowMultColor.xxyz.z + (-_CoolShadowMultColor.y), float(_FirstShadowMultColor.z) + (-_CoolShadowMultColor.z));
        u_xlat7.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_7.xyz + _CoolShadowMultColor.xyz;
        u_xlat16_17.xyz = (bool(u_xlatb14)) ? u_xlat7.xyz : vec3(_FirstShadowMultColor.x, _FirstShadowMultColor.y, _FirstShadowMultColor.z);
    } else {
        if(u_xlatb5.x){
#ifdef UNITY_ADRENO_ES3
            u_xlatb14 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex));
#else
            u_xlatb14 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex);
#endif
            u_xlat16_7.xyz = _FirstShadowMultColor2.xyz + (-_CoolShadowMultColor2.xyz);
            u_xlat7.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_7.xyz + _CoolShadowMultColor2.xyz;
            u_xlat16_17.xyz = (bool(u_xlatb14)) ? u_xlat7.xyz : _FirstShadowMultColor2.xyz;
        } else {
#ifdef UNITY_ADRENO_ES3
            u_xlatb14 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex));
#else
            u_xlatb14 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex);
#endif
            u_xlat16_7.xyz = _FirstShadowMultColor3.xyz + (-_CoolShadowMultColor3.xyz);
            u_xlat7.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_7.xyz + _CoolShadowMultColor3.xyz;
            u_xlat16_8.xyz = (bool(u_xlatb14)) ? u_xlat7.xyz : _FirstShadowMultColor3.xyz;
            u_xlat16_7.xyz = _FirstShadowMultColor4.xyz + (-_CoolShadowMultColor4.xyz);
            u_xlat7.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_7.xyz + _CoolShadowMultColor4.xyz;
            u_xlat16_9.xyz = (bool(u_xlatb14)) ? u_xlat7.xyz : _FirstShadowMultColor4.xyz;
            u_xlat16_7.xyz = _FirstShadowMultColor5.xyz + (-_CoolShadowMultColor5.xyz);
            u_xlat7.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_7.xyz + _CoolShadowMultColor5.xyz;
            u_xlat16_10.xyz = (bool(u_xlatb14)) ? u_xlat7.xyz : _FirstShadowMultColor5.xyz;
            u_xlat16_9.xyz = (u_xlatb5.z) ? u_xlat16_9.xyz : u_xlat16_10.xyz;
            u_xlat16_17.xyz = (u_xlatb5.y) ? u_xlat16_8.xyz : u_xlat16_9.xyz;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition));
#else
    u_xlatb14 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition);
#endif
    u_xlati36 = ~u_xlati35;
    u_xlati14 = u_xlatb14 ? u_xlati36 : int(0);
    u_xlat16_7.xyz = u_xlat16_17.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat7.xyz = u_xlat13.xxx * u_xlat16_7.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_17.xyz = (int(u_xlati14) != 0) ? u_xlat7.xyz : u_xlat16_17.xyz;
    u_xlat16_37 = (u_xlatb5.z) ? _Shininess4 : _Shininess5;
    u_xlat16_8.x = (u_xlatb5.z) ? _SpecMulti4 : _SpecMulti5;
    u_xlat16_37 = (u_xlatb5.y) ? _Shininess3 : u_xlat16_37;
    u_xlat16_8.x = (u_xlatb5.y) ? _SpecMulti3 : u_xlat16_8.x;
    u_xlat16_37 = (u_xlatb5.x) ? _Shininess2 : u_xlat16_37;
    u_xlat16_8.x = (u_xlatb5.x) ? _SpecMulti2 : u_xlat16_8.x;
    u_xlat16_37 = (u_xlatb33) ? _Shininess : u_xlat16_37;
    u_xlat16_8.x = (u_xlatb33) ? _SpecMulti : u_xlat16_8.x;
    u_xlat16_19.x = dot(vs_TEXCOORD1.xyz, u_xlat0.xyz);
    u_xlat16_19.x = max(u_xlat16_19.x, 0.00100000005);
    u_xlat16_19.x = log2(u_xlat16_19.x);
    u_xlat16_37 = u_xlat16_37 * u_xlat16_19.x;
    u_xlat16_37 = exp2(u_xlat16_37);
    u_xlat0.x = (-u_xlat10_3.z) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat0.x<u_xlat16_37);
#else
    u_xlatb0 = u_xlat0.x<u_xlat16_37;
#endif
    u_xlat16_8.xyz = u_xlat16_8.xxx * _SpecularColor.xyz;
    u_xlat16_8.xyz = u_xlat10_3.xxx * u_xlat16_8.xyz;
    u_xlat16_8.xyz = (bool(u_xlatb0)) ? u_xlat16_8.xyz : vec3(0.0, 0.0, 0.0);
    u_xlat16_4.xyz = vec3(u_xlat16_4.x * _EmissionColor_MHY.xxyz.y, u_xlat16_4.y * _EmissionColor_MHY.xxyz.z, u_xlat16_4.z * float(_EmissionColor_MHY.z));
    u_xlat0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(u_xlat24==1.0);
#else
    u_xlatb33 = u_xlat24==1.0;
#endif
    u_xlati33 = int(uint(u_xlatb33) * 0xffffffffu | uint(u_xlati35));
    u_xlat13.xyz = u_xlat0.xyz * u_xlat16_17.xyz;
    u_xlat0.xyz = (int(u_xlati33) != 0) ? u_xlat13.xyz : u_xlat0.xyz;
    u_xlat0.xyz = u_xlat16_8.xyz + u_xlat0.xyz;
    u_xlat13.xy = vs_TEXCOORD0.zw * _FlowMap01_ST.xy + _FlowMap01_ST.zw;
    u_xlat16_8.x = _Time.y * _FlowMap01_Uspeed + u_xlat13.x;
    u_xlat16_8.y = _Time.y * _FlowMap01_Vspeed + u_xlat13.y;
    u_xlat13.xy = vs_TEXCOORD0.zw * _Noise_ST.xy + _Noise_ST.zw;
    u_xlat16_9.x = _Time.y * _Noise_Uspeed + u_xlat13.x;
    u_xlat16_9.y = _Time.y * _Noise_Vspeed + u_xlat13.y;
    u_xlat10_33 = texture(_Noise, u_xlat16_9.xy).x;
    u_xlat16_37 = _MaskOffset01 * 1.39999998 + -0.699999988;
    u_xlat16_17.x = u_xlat10_33 * _NoiseIntensity;
    u_xlat13.xy = vs_TEXCOORD0.zw * _FlowMap02_ST.xy + _FlowMap02_ST.zw;
    u_xlat16_9.x = _Time.y * _FlowMap02_Uspeed + u_xlat13.x;
    u_xlat16_9.y = _Time.y * _FlowMap02_Vspeed + u_xlat13.y;
    u_xlat16_39 = _MaskOffset02 * 1.39999998 + -0.699999988;
    u_xlat16_10.xyz = _FlowMapColor01.xyz * vec3(_FlowScale01);
    u_xlat16_8.xy = vec2(u_xlat10_33) * vec2(vec2(_NoiseFlowIntensity, _NoiseFlowIntensity)) + u_xlat16_8.xy;
    u_xlat10_13 = texture(_FlowMap01, u_xlat16_8.xy).x;
    u_xlat16_13.xyz = vec3(u_xlat10_13) * u_xlat16_10.xyz;
    u_xlat16_8.x = (-vs_TEXCOORD0.z) + 1.0;
    u_xlat16_1.x = u_xlat16_37 + u_xlat16_8.x;
    u_xlat16_1.yw = vec2(u_xlat10_33) * vec2(vec2(_NoiseIntensity, _NoiseIntensity)) + (-vs_TEXCOORD0.ww);
    u_xlat16_17.y = 1.0;
    u_xlat16_19.xy = u_xlat16_1.xy + u_xlat16_17.xy;
    u_xlat10_3.x = texture(_Mask01, u_xlat16_19.xy).x;
    u_xlat16_3 = max(u_xlat10_3.x, 9.99999975e-05);
    u_xlat16_3 = log2(u_xlat16_3);
    u_xlat16_3 = u_xlat16_3 * _Mask01_Power;
    u_xlat16_3 = exp2(u_xlat16_3);
    u_xlat16_19.xyz = _FlowMapColor02.xyz * vec3(_FlowScale02);
    u_xlat16_9.xy = vec2(u_xlat10_33) * vec2(vec2(_NoiseFlowIntensity, _NoiseFlowIntensity)) + u_xlat16_9.xy;
    u_xlat10_33 = texture(_FlowMap02, u_xlat16_9.xy).x;
    u_xlat16_14.xyz = vec3(u_xlat10_33) * u_xlat16_19.xyz;
    u_xlat16_1.z = u_xlat16_39 + u_xlat16_8.x;
    u_xlat16_17.xy = vec2(u_xlat16_1.z + u_xlat16_17.x, u_xlat16_1.w + u_xlat16_17.y);
    u_xlat10_33 = texture(_Mask02, u_xlat16_17.xy).x;
    u_xlat16_33 = max(u_xlat10_33, 9.99999975e-05);
    u_xlat16_33 = log2(u_xlat16_33);
    u_xlat16_33 = u_xlat16_33 * _Mask02_Power;
    u_xlat16_33 = exp2(u_xlat16_33);
    u_xlat16_14.xyz = vec3(u_xlat16_33) * u_xlat16_14.xyz;
    u_xlat16_13.xyz = u_xlat16_13.xyz * vec3(u_xlat16_3) + u_xlat16_14.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(_EmissionScaler) + u_xlat16_13.xyz;
    u_xlat3.xyz = (-u_xlat0.xyz) + u_xlat16_4.xyz;
    u_xlat3.xyz = u_xlat16_6.xxx * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat7.xy = vs_TEXCOORD0.zw * _DissovleNoise_ST.xy + _DissovleNoise_ST.zw;
    u_xlat16_4.x = _Time.y * _DissolveNoise_Uspeed + u_xlat7.x;
    u_xlat16_4.y = _Time.y * _DissolveNoise_Vspeed + u_xlat7.y;
    u_xlat10_33 = texture(_DissovleNoise, u_xlat16_4.xy).x;
    u_xlat33 = u_xlat10_33 * _DissovleNoiseScale + vs_TEXCOORD0.z;
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(_Dissovle>=u_xlat33);
#else
    u_xlatb33 = _Dissovle>=u_xlat33;
#endif
    u_xlat0.xyz = (u_xlatb2.x) ? u_xlat3.xyz : u_xlat0.xyz;
    u_xlat0.xyz = u_xlat16_13.xyz + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(0.00999999978<u_xlat16_6.x);
#else
    u_xlatb2.x = 0.00999999978<u_xlat16_6.x;
#endif
    if((int(u_xlatb33) * int(0xffffffffu))==0){discard;}
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn));
#else
    u_xlatb33 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn);
#endif
    u_xlat13.xyz = u_xlat0.xyz * vec3(vec3(_ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness));
    u_xlat3.xyz = vec3(vec3(_ES_CharacterPointLightWholeIntensity, _ES_CharacterPointLightWholeIntensity, _ES_CharacterPointLightWholeIntensity)) * mhy_CharacterPointLightColor.xyz;
    u_xlat7.xyz = _ES_CharacterMainLightColor.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.xyz = min(max(u_xlat7.xyz, 0.0), 1.0);
#else
    u_xlat7.xyz = clamp(u_xlat7.xyz, 0.0, 1.0);
#endif
    u_xlat36 = (-mhy_CharacterPointLightColor.w) + 1.0;
    u_xlat3.xyz = u_xlat7.xyz * vec3(u_xlat36) + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat3.xyz = vec3(vec3(_ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio)) * u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat13.xyz = u_xlat13.xyz * u_xlat3.xyz;
    u_xlat3.xyz = _ES_CharacterAmbientLightColor.xyz * vec3(_ES_CharacterAmbientLightRatio);
    u_xlat16_4.xyz = u_xlat13.xyz * vec3(10.0, 10.0, 10.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.xyz = min(max(u_xlat16_4.xyz, 0.0), 1.0);
#else
    u_xlat16_4.xyz = clamp(u_xlat16_4.xyz, 0.0, 1.0);
#endif
    u_xlat13.xyz = u_xlat3.xyz * u_xlat16_4.xyz + u_xlat13.xyz;
    u_xlat16_4.xyz = (bool(u_xlatb33)) ? u_xlat13.xyz : u_xlat0.xyz;
    u_xlat16_17.xyz = u_xlat0.xyz + (-u_xlat16_4.xyz);
    u_xlat16_17.xyz = u_xlat16_6.xxx * u_xlat16_17.xyz + u_xlat16_4.xyz;
    u_xlat16_0.xyz = (u_xlatb2.x) ? u_xlat16_17.xyz : u_xlat16_4.xyz;
    u_xlat16_4.x = max(u_xlat16_0.z, u_xlat16_0.y);
    u_xlat16_1.w = max(u_xlat16_0.x, u_xlat16_4.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(1.0<u_xlat16_1.w);
#else
    u_xlatb2.x = 1.0<u_xlat16_1.w;
#endif
    u_xlat16_1.xyz = u_xlat16_0.xyz / u_xlat16_1.www;
    u_xlat16_0.w = 1.0;
    u_xlat16_0 = (u_xlatb2.x) ? u_xlat16_1 : u_xlat16_0;
    u_xlat16_4.x = min(u_xlat16_0.w, 1.10000002);
    u_xlat16_15 = u_xlat16_0.w + (-u_xlat16_4.x);
    u_xlat16_4.x = u_xlat16_6.x * u_xlat16_15 + u_xlat16_4.x;
    u_xlat16_2 = u_xlat16_4.x * 0.0500000007;
    SV_Target0.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb13 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb13 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_4.x = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb13) ? u_xlat16_4.x : 0.0;
    SV_Target0.w = 0.0156862754;
    SV_Target1.xyz = u_xlat16_0.xyz;
    SV_Target1.w = u_xlat16_2;
    SV_Target2.xy = vec2(0.0, 0.0);
    SV_Target2.w = vs_TEXCOORD4;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "MSAA_INTERPOLATION" "MAIN_TEX_COLORING_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	vec4 _MainTex_ST;
uniform 	float _CharacterAmbientSensorShadowOn;
uniform 	vec4 _AmbientSensorUVs;
uniform 	float _UseClipPlane;
uniform 	float _ClipPlaneWorld;
uniform 	vec4 _ClipPlane;
uniform 	vec4 mhy_AvatarLightDir;
uniform 	vec4 mhy_CharacterOverrideLightDir;
uniform lowp sampler2D _CharacterAmbientSensorTex;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp float vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD6;
vec4 u_xlat0;
bvec2 u_xlatb0;
vec4 u_xlat1;
bool u_xlatb1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump float u_xlat16_4;
float u_xlat5;
float u_xlat6;
float u_xlat7;
float u_xlat10;
bool u_xlatb10;
float u_xlat15;
bool u_xlatb15;
float u_xlat16;
bool u_xlatb16;
void main()
{
    u_xlatb0.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseClipPlane, _ClipPlaneWorld, _UseClipPlane, _UseClipPlane)).xy;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(abs(_ClipPlane.w)<0.00100000005);
#else
    u_xlatb10 = abs(_ClipPlane.w)<0.00100000005;
#endif
    u_xlat1.xyz = _ClipPlane.www * _ClipPlane.xyz;
    u_xlat1.xyz = (bool(u_xlatb10)) ? vec3(0.0, 0.0, 0.0) : u_xlat1.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_WorldToObject[1];
    u_xlat2 = hlslcc_mtx4x4unity_WorldToObject[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_WorldToObject[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_WorldToObject[3];
    u_xlat1.xyz = u_xlat1.xyz / u_xlat1.www;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * _ClipPlane.yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _ClipPlane.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _ClipPlane.zzz + u_xlat2.xyz;
    u_xlat10 = dot(u_xlat1.xyz, u_xlat2.xyz);
    u_xlat15 = dot(in_POSITION0.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(u_xlat15<u_xlat10);
#else
    u_xlatb1 = u_xlat15<u_xlat10;
#endif
    u_xlat10 = (-u_xlat10) + u_xlat15;
    u_xlat2.xyz = (-vec3(u_xlat10)) * u_xlat2.xyz + in_POSITION0.xyz;
    u_xlat2.w = 0.0;
    u_xlat3.xyz = in_POSITION0.xyz;
    u_xlat3.w = in_COLOR0.w;
    u_xlat1 = (bool(u_xlatb1)) ? u_xlat2 : u_xlat3;
    u_xlat10 = dot(in_POSITION0.xyz, _ClipPlane.xyz);
    u_xlat15 = _ClipPlane.w + -0.00999999978;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(u_xlat10<u_xlat15);
#else
    u_xlatb15 = u_xlat10<u_xlat15;
#endif
    u_xlat10 = u_xlat10 + (-_ClipPlane.w);
    u_xlat2.xyz = (-vec3(u_xlat10)) * _ClipPlane.xyz + in_POSITION0.xyz;
    u_xlat2.w = 0.0;
    u_xlat2 = (bool(u_xlatb15)) ? u_xlat2 : u_xlat3;
    u_xlat1.xyz = (u_xlatb0.y) ? u_xlat1.xyz : u_xlat2.xyz;
    u_xlat16_4 = (u_xlatb0.y) ? u_xlat1.w : u_xlat2.w;
    u_xlat1.xyz = (u_xlatb0.x) ? u_xlat1.xyz : in_POSITION0.xyz;
    vs_COLOR0.w = (u_xlatb0.x) ? u_xlat16_4 : in_COLOR0.w;
    u_xlat0.xyw = (-_WorldSpaceCameraPos.xyz) + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat2.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;
    u_xlat2.y = hlslcc_mtx4x4unity_ObjectToWorld[1].x;
    u_xlat2.z = hlslcc_mtx4x4unity_ObjectToWorld[2].x;
    u_xlat2.w = u_xlat0.x;
    u_xlat1.w = 1.0;
    u_xlat2.x = dot(u_xlat2, u_xlat1);
    u_xlat3.x = hlslcc_mtx4x4unity_ObjectToWorld[0].y;
    u_xlat3.y = hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat3.z = hlslcc_mtx4x4unity_ObjectToWorld[2].y;
    u_xlat3.w = u_xlat0.y;
    u_xlat7 = dot(u_xlat3, u_xlat1);
    u_xlat0.x = hlslcc_mtx4x4unity_ObjectToWorld[0].z;
    u_xlat0.y = hlslcc_mtx4x4unity_ObjectToWorld[1].z;
    u_xlat0.z = hlslcc_mtx4x4unity_ObjectToWorld[2].z;
    u_xlat0.x = dot(u_xlat0, u_xlat1);
    u_xlat3.x = hlslcc_mtx4x4unity_ObjectToWorld[0].w;
    u_xlat3.y = hlslcc_mtx4x4unity_ObjectToWorld[1].w;
    u_xlat3.z = hlslcc_mtx4x4unity_ObjectToWorld[2].w;
    u_xlat3.w = hlslcc_mtx4x4unity_ObjectToWorld[3].w;
    u_xlat5 = dot(u_xlat3, u_xlat1);
    u_xlat3 = vec4(u_xlat7) * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[3] * vec4(u_xlat5) + u_xlat2;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat1;
    vs_TEXCOORD3.xyz = u_xlat1.xyz / u_xlat1.www;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.xz = u_xlat0.xw * vec2(0.5, 0.5);
    u_xlat6 = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.w = u_xlat6 * 0.5;
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat1.xyz = in_NORMAL0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_NORMAL0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_NORMAL0.zzz + u_xlat1.xyz;
    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat16 = inversesqrt(u_xlat16);
    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(0.5<mhy_CharacterOverrideLightDir.w);
#else
    u_xlatb16 = 0.5<mhy_CharacterOverrideLightDir.w;
#endif
    u_xlat2.x = mhy_CharacterOverrideLightDir.x;
    u_xlat2.yz = (-mhy_CharacterOverrideLightDir.yz);
    u_xlat2.xyz = (bool(u_xlatb16)) ? u_xlat2.xyz : mhy_AvatarLightDir.xyz;
    u_xlat16_4 = dot(u_xlat1.xyz, u_xlat2.xyz);
    vs_TEXCOORD1.w = u_xlat16_4 * 0.497500002 + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_CharacterAmbientSensorShadowOn));
#else
    u_xlatb16 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_CharacterAmbientSensorShadowOn);
#endif
    if(u_xlatb16){
        u_xlat16 = textureLod(_CharacterAmbientSensorTex, _AmbientSensorUVs.xy, 0.0).x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb16 = !!(0.5<u_xlat16);
#else
        u_xlatb16 = 0.5<u_xlat16;
#endif
        vs_TEXCOORD4 = u_xlatb16 ? 1.0 : float(0.0);
    } else {
        vs_TEXCOORD4 = 0.0;
    //ENDIF
    }
    gl_Position = u_xlat0;
    vs_COLOR0.xyz = in_COLOR0.xyz;
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    vs_TEXCOORD2.zw = u_xlat0.zw;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	mediump vec4 _Color;
uniform 	float _MainTexAlphaUse;
uniform 	mediump float _MainTexAlphaCutoff;
uniform 	mediump vec4 _MainTexTintColor;
uniform 	float _UseVertexColorAO;
uniform 	mediump float _LightArea;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	float _UseCoolShadowColorOrTex;
uniform 	mediump vec3 _CoolShadowMultColor;
uniform 	float _UseShadowTransition;
uniform 	float _ShadowTransitionRange;
uniform 	float _ShadowTransitionSoftness;
uniform 	mediump vec3 _SpecularColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	float _FaceBlushStrength;
uniform 	mediump vec3 _FaceBlushColor;
uniform 	mediump float _EmissionScaler;
uniform 	mediump vec3 _EmissionColor_MHY;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _UseClipPlane;
uniform 	float _ES_CharacterAmbientLightOn;
uniform 	float _ES_CharacterAmbientBrightness;
uniform 	vec3 _ES_CharacterMainLightColor;
uniform 	vec3 _ES_CharacterAmbientLightColor;
uniform 	float _ES_CharacterMainLightRatio;
uniform 	float _ES_CharacterAmbientLightRatio;
uniform 	float _ES_CharacterColorTone;
uniform 	float _ES_CharacterPointLightWholeIntensity;
uniform 	vec4 mhy_AvatarLightDir;
uniform 	vec4 mhy_CharacterPointLightColor;
uniform 	vec4 mhy_CharacterOverrideLightDir;
uniform 	mediump vec4 _FlowMapColor01;
uniform 	mediump float _FlowScale01;
uniform 	mediump float _FlowMap01_Uspeed;
uniform 	vec4 _FlowMap01_ST;
uniform 	mediump float _FlowMap01_Vspeed;
uniform 	mediump float _Noise_Uspeed;
uniform 	vec4 _Noise_ST;
uniform 	mediump float _Noise_Vspeed;
uniform 	mediump float _NoiseFlowIntensity;
uniform 	mediump float _MaskOffset01;
uniform 	mediump float _NoiseIntensity;
uniform 	mediump float _Mask01_Power;
uniform 	mediump vec4 _FlowMapColor02;
uniform 	mediump float _FlowScale02;
uniform 	mediump float _FlowMap02_Uspeed;
uniform 	vec4 _FlowMap02_ST;
uniform 	mediump float _FlowMap02_Vspeed;
uniform 	mediump float _MaskOffset02;
uniform 	mediump float _Mask02_Power;
uniform 	mediump float _DissolveNoise_Uspeed;
uniform 	vec4 _DissovleNoise_ST;
uniform 	mediump float _DissolveNoise_Vspeed;
uniform 	mediump float _DissovleNoiseScale;
uniform 	mediump float _Dissovle;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _Noise;
uniform lowp sampler2D _FlowMap01;
uniform lowp sampler2D _Mask01;
uniform lowp sampler2D _FlowMap02;
uniform lowp sampler2D _Mask02;
uniform lowp sampler2D _DissovleNoise;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp float vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
lowp float u_xlat10_2;
bvec4 u_xlatb2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
lowp float u_xlat10_3;
int u_xlati3;
bool u_xlatb3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec2 u_xlat16_7;
mediump vec3 u_xlat16_8;
vec3 u_xlat9;
bool u_xlatb10;
vec3 u_xlat12;
mediump vec3 u_xlat16_12;
lowp float u_xlat10_12;
int u_xlati12;
bool u_xlatb12;
vec3 u_xlat13;
mediump vec3 u_xlat16_13;
mediump float u_xlat16_14;
mediump vec2 u_xlat16_15;
mediump vec2 u_xlat16_16;
bvec2 u_xlatb20;
vec2 u_xlat22;
bool u_xlatb22;
mediump vec2 u_xlat16_25;
float u_xlat30;
bool u_xlatb30;
float u_xlat32;
mediump float u_xlat16_32;
lowp float u_xlat10_32;
int u_xlati32;
bool u_xlatb32;
float u_xlat33;
mediump float u_xlat16_34;
mediump float u_xlat16_35;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseClipPlane));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseClipPlane);
#endif
    u_xlat16_1.x = vs_COLOR0.w + -0.00999999978;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(u_xlat16_1.x<0.0);
#else
    u_xlatb10 = u_xlat16_1.x<0.0;
#endif
    u_xlatb0 = u_xlatb0 && u_xlatb10;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(_DitherAlpha<0.949999988);
#else
        u_xlatb0 = _DitherAlpha<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb20.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb20.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb20.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = _DitherAlpha * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + -0.00999999978;
#ifdef UNITY_ADRENO_ES3
            u_xlatb0 = !!(u_xlat0.x<0.0);
#else
            u_xlatb0 = u_xlat0.x<0.0;
#endif
            if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(0.5<mhy_CharacterOverrideLightDir.w);
#else
    u_xlatb2.x = 0.5<mhy_CharacterOverrideLightDir.w;
#endif
    u_xlat3.x = mhy_CharacterOverrideLightDir.x;
    u_xlat3.yz = (-mhy_CharacterOverrideLightDir.yz);
    u_xlat2.xyz = (u_xlatb2.x) ? u_xlat3.xyz : mhy_AvatarLightDir.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat30) + u_xlat2.xyz;
    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
    u_xlat2.xy = dFdx(vs_TEXCOORD0.xy);
    u_xlat22.xy = dFdy(vs_TEXCOORD0.xy);
    u_xlat2.xy = u_xlat22.xy + u_xlat2.xy;
    u_xlat22.xy = (-u_xlat2.xy) * vec2(0.25, 0.25) + vs_TEXCOORD0.xy;
    u_xlat2.xy = u_xlat2.xy * vec2(0.25, 0.25) + vs_TEXCOORD0.xy;
    u_xlat2.xy = (int(gl_SampleID) != 0) ? u_xlat22.xy : u_xlat2.xy;
    u_xlat1 = textureLod(_MainTex, u_xlat2.xy, 0.0);
    u_xlat16_4.xyz = u_xlat1.xyz * _MainTexTintColor.xyz;
    u_xlat16_5.xyz = u_xlat16_4.xyz + u_xlat16_4.xyz;
    u_xlat16_6.xyz = u_xlat1.xyz + _MainTexTintColor.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_6.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(-4.0, -4.0, -4.0) + u_xlat16_6.xyz;
    u_xlatb2 = lessThan(vec4(0.5, 0.5, 0.5, 0.00999999978), u_xlat1);
    u_xlat16_6.x = (u_xlatb2.x) ? float(1.0) : float(0.0);
    u_xlat16_6.y = (u_xlatb2.y) ? float(1.0) : float(0.0);
    u_xlat16_6.z = (u_xlatb2.z) ? float(1.0) : float(0.0);
    u_xlat16_4.xyz = u_xlat16_4.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat16_4.xyz = u_xlat16_6.xyz * u_xlat16_4.xyz + u_xlat16_5.xyz;
    u_xlatb2.xyz = equal(vec4(_MainTexAlphaUse), vec4(3.0, 1.0, 2.0, 0.0)).xyz;
    u_xlat30 = u_xlat1.w * _FaceBlushStrength;
    u_xlat16_3.xyz = (-u_xlat16_4.xyz) + _FaceBlushColor.xyz;
    u_xlat3.xyz = vec3(u_xlat30) * u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat16_4.xyz = (u_xlatb2.x) ? u_xlat3.xyz : u_xlat16_4.xyz;
    u_xlat16_34 = u_xlat1.w + (-_MainTexAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(u_xlat16_34<0.0);
#else
    u_xlatb30 = u_xlat16_34<0.0;
#endif
    u_xlatb30 = u_xlatb2.y && u_xlatb30;
    if((int(u_xlatb30) * int(0xffffffffu))!=0){discard;}
    u_xlat16_4.xyz = u_xlat16_4.xyz * _Color.xyz;
    u_xlatb30 = u_xlatb2.w && u_xlatb2.z;
    u_xlat16_34 = (u_xlatb30) ? u_xlat1.w : 0.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorAO));
#else
    u_xlatb2.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorAO);
#endif
    u_xlat16_5.x = vs_COLOR0.x * 0.5;
    u_xlat16_5.x = (u_xlatb2.x) ? u_xlat16_5.x : 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat16_5.x<0.0500000007);
#else
    u_xlatb12 = u_xlat16_5.x<0.0500000007;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(0.949999988<u_xlat16_5.x);
#else
    u_xlatb22 = 0.949999988<u_xlat16_5.x;
#endif
    u_xlat32 = u_xlat16_5.x + vs_TEXCOORD1.w;
    u_xlat32 = u_xlat32 * 0.5;
    u_xlat16_5.x = (u_xlatb22) ? 1.0 : u_xlat32;
    u_xlat16_5.x = (u_xlatb12) ? 0.0 : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb2.x) ? u_xlat16_5.x : vs_TEXCOORD1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(u_xlat16_5.x<_LightArea);
#else
    u_xlatb2.x = u_xlat16_5.x<_LightArea;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition));
#else
    u_xlatb12 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition);
#endif
    u_xlat16_5.x = (-u_xlat16_5.x) + _LightArea;
    u_xlat16_5.x = u_xlat16_5.x / _ShadowTransitionRange;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(u_xlat16_5.x>=1.0);
#else
    u_xlatb22 = u_xlat16_5.x>=1.0;
#endif
    u_xlat16_32 = u_xlat16_5.x + 0.00999999978;
    u_xlat16_32 = log2(u_xlat16_32);
    u_xlat32 = u_xlat16_32 * _ShadowTransitionSoftness;
    u_xlat32 = exp2(u_xlat32);
    u_xlat32 = min(u_xlat32, 1.0);
    u_xlat22.x = (u_xlatb22) ? 1.0 : u_xlat32;
    u_xlat22.x = (u_xlatb12) ? u_xlat22.x : 1.0;
    u_xlat22.x = u_xlatb2.x ? u_xlat22.x : float(0.0);
#ifdef UNITY_ADRENO_ES3
    { bool cond = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(vs_TEXCOORD4); u_xlati32 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati32 = int((vec4(0.0, 0.0, 0.0, 0.0)!=vec4(vs_TEXCOORD4)) ? 0xFFFFFFFFu : uint(0u));
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex));
#else
    u_xlatb3 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex);
#endif
    u_xlat16_13.xyz = vec3(_FirstShadowMultColor.xxyz.y + (-_CoolShadowMultColor.x), _FirstShadowMultColor.xxyz.z + (-_CoolShadowMultColor.y), float(_FirstShadowMultColor.z) + (-_CoolShadowMultColor.z));
    u_xlat13.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_13.xyz + _CoolShadowMultColor.xyz;
    u_xlat16_5.xyz = (bool(u_xlatb3)) ? u_xlat13.xyz : vec3(_FirstShadowMultColor.x, _FirstShadowMultColor.y, _FirstShadowMultColor.z);
    u_xlati3 = ~u_xlati32;
    u_xlati12 = u_xlatb12 ? u_xlati3 : int(0);
    u_xlat16_3.xyz = u_xlat16_5.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat3.xyz = u_xlat22.xxx * u_xlat16_3.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_5.xyz = (int(u_xlati12) != 0) ? u_xlat3.xyz : u_xlat16_5.xyz;
    u_xlat16_35 = dot(vs_TEXCOORD1.xyz, u_xlat0.xyz);
    u_xlat16_35 = max(u_xlat16_35, 0.00100000005);
    u_xlat16_35 = log2(u_xlat16_35);
    u_xlat16_35 = u_xlat16_35 * _Shininess;
    u_xlat16_35 = exp2(u_xlat16_35);
    u_xlat16_6.xyz = vec3(u_xlat16_35) * _SpecularColor.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(_SpecMulti);
    u_xlat16_4.xyz = vec3(u_xlat16_4.x * _EmissionColor_MHY.xxyz.y, u_xlat16_4.y * _EmissionColor_MHY.xxyz.z, u_xlat16_4.z * float(_EmissionColor_MHY.z));
    u_xlati0 = int(uint(u_xlatb2.x) * 0xffffffffu | uint(u_xlati32));
    u_xlat2.xyz = u_xlat1.xyz * u_xlat16_5.xyz;
    u_xlat0.xyz = (int(u_xlati0) != 0) ? u_xlat2.xyz : u_xlat1.xyz;
    u_xlat0.xyz = u_xlat16_6.xyz * vec3(0.5, 0.5, 0.5) + u_xlat0.xyz;
    u_xlat2.xy = vs_TEXCOORD0.zw * _FlowMap01_ST.xy + _FlowMap01_ST.zw;
    u_xlat16_5.x = _Time.y * _FlowMap01_Uspeed + u_xlat2.x;
    u_xlat16_5.y = _Time.y * _FlowMap01_Vspeed + u_xlat2.y;
    u_xlat2.xy = vs_TEXCOORD0.zw * _Noise_ST.xy + _Noise_ST.zw;
    u_xlat16_6.x = _Time.y * _Noise_Uspeed + u_xlat2.x;
    u_xlat16_6.y = _Time.y * _Noise_Vspeed + u_xlat2.y;
    u_xlat10_2 = textureLod(_Noise, u_xlat16_6.xy, 0.0).x;
    u_xlat16_25.x = _MaskOffset01 * 1.39999998 + -0.699999988;
    u_xlat16_16.x = u_xlat10_2 * _NoiseIntensity;
    u_xlat12.xy = vs_TEXCOORD0.zw * _FlowMap02_ST.xy + _FlowMap02_ST.zw;
    u_xlat16_7.x = _Time.y * _FlowMap02_Uspeed + u_xlat12.x;
    u_xlat16_7.y = _Time.y * _FlowMap02_Vspeed + u_xlat12.y;
    u_xlat16_25.y = _MaskOffset02 * 1.39999998 + -0.699999988;
    u_xlat16_8.xyz = _FlowMapColor01.xyz * vec3(_FlowScale01);
    u_xlat16_5.xy = vec2(u_xlat10_2) * vec2(vec2(_NoiseFlowIntensity, _NoiseFlowIntensity)) + u_xlat16_5.xy;
    u_xlat10_12 = textureLod(_FlowMap01, u_xlat16_5.xy, 0.0).x;
    u_xlat16_12.xyz = vec3(u_xlat10_12) * u_xlat16_8.xyz;
    u_xlat16_5.x = (-vs_TEXCOORD0.z) + 1.0;
    u_xlat16_1.xz = u_xlat16_25.xy + u_xlat16_5.xx;
    u_xlat16_1.yw = vec2(u_xlat10_2) * vec2(vec2(_NoiseIntensity, _NoiseIntensity)) + (-vs_TEXCOORD0.ww);
    u_xlat16_16.y = 1.0;
    u_xlat16_15.xy = u_xlat16_1.xy + u_xlat16_16.xy;
    u_xlat10_3 = textureLod(_Mask01, u_xlat16_15.xy, 0.0).x;
    u_xlat16_3.x = max(u_xlat10_3, 9.99999975e-05);
    u_xlat16_3.x = log2(u_xlat16_3.x);
    u_xlat16_3.x = u_xlat16_3.x * _Mask01_Power;
    u_xlat16_3.x = exp2(u_xlat16_3.x);
    u_xlat16_8.xyz = _FlowMapColor02.xyz * vec3(_FlowScale02);
    u_xlat16_15.xy = vec2(u_xlat10_2) * vec2(vec2(_NoiseFlowIntensity, _NoiseFlowIntensity)) + u_xlat16_7.xy;
    u_xlat10_2 = textureLod(_FlowMap02, u_xlat16_15.xy, 0.0).x;
    u_xlat16_13.xyz = vec3(u_xlat10_2) * u_xlat16_8.xyz;
    u_xlat16_5.xy = vec2(u_xlat16_1.z + u_xlat16_16.x, u_xlat16_1.w + u_xlat16_16.y);
    u_xlat10_2 = textureLod(_Mask02, u_xlat16_5.xy, 0.0).x;
    u_xlat16_2.x = max(u_xlat10_2, 9.99999975e-05);
    u_xlat16_2.x = log2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * _Mask02_Power;
    u_xlat16_2.x = exp2(u_xlat16_2.x);
    u_xlat16_13.xyz = u_xlat16_2.xxx * u_xlat16_13.xyz;
    u_xlat16_2.xyz = u_xlat16_12.xyz * u_xlat16_3.xxx + u_xlat16_13.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(_EmissionScaler) + u_xlat16_2.xyz;
    u_xlat3.xyz = (-u_xlat0.xyz) + u_xlat16_4.xyz;
    u_xlat3.xyz = vec3(u_xlat16_34) * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat9.xy = vs_TEXCOORD0.zw * _DissovleNoise_ST.xy + _DissovleNoise_ST.zw;
    u_xlat16_4.x = _Time.y * _DissolveNoise_Uspeed + u_xlat9.x;
    u_xlat16_4.y = _Time.y * _DissolveNoise_Vspeed + u_xlat9.y;
    u_xlat10_32 = textureLod(_DissovleNoise, u_xlat16_4.xy, 0.0).x;
    u_xlat32 = u_xlat10_32 * _DissovleNoiseScale + vs_TEXCOORD0.z;
#ifdef UNITY_ADRENO_ES3
    u_xlatb32 = !!(_Dissovle>=u_xlat32);
#else
    u_xlatb32 = _Dissovle>=u_xlat32;
#endif
    u_xlat0.xyz = (bool(u_xlatb30)) ? u_xlat3.xyz : u_xlat0.xyz;
    u_xlat0.xyz = u_xlat16_2.xyz + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(0.00999999978<u_xlat16_34);
#else
    u_xlatb30 = 0.00999999978<u_xlat16_34;
#endif
    if((int(u_xlatb32) * int(0xffffffffu))==0){discard;}
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn));
#else
    u_xlatb2.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn);
#endif
    u_xlat12.xyz = u_xlat0.xyz * vec3(vec3(_ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness));
    u_xlat3.xyz = vec3(vec3(_ES_CharacterPointLightWholeIntensity, _ES_CharacterPointLightWholeIntensity, _ES_CharacterPointLightWholeIntensity)) * mhy_CharacterPointLightColor.xyz;
    u_xlat9.xyz = _ES_CharacterMainLightColor.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat9.xyz = min(max(u_xlat9.xyz, 0.0), 1.0);
#else
    u_xlat9.xyz = clamp(u_xlat9.xyz, 0.0, 1.0);
#endif
    u_xlat33 = (-mhy_CharacterPointLightColor.w) + 1.0;
    u_xlat3.xyz = u_xlat9.xyz * vec3(u_xlat33) + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat3.xyz = vec3(vec3(_ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio)) * u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat12.xyz = u_xlat12.xyz * u_xlat3.xyz;
    u_xlat3.xyz = _ES_CharacterAmbientLightColor.xyz * vec3(_ES_CharacterAmbientLightRatio);
    u_xlat16_4.xyz = u_xlat12.xyz * vec3(10.0, 10.0, 10.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.xyz = min(max(u_xlat16_4.xyz, 0.0), 1.0);
#else
    u_xlat16_4.xyz = clamp(u_xlat16_4.xyz, 0.0, 1.0);
#endif
    u_xlat12.xyz = u_xlat3.xyz * u_xlat16_4.xyz + u_xlat12.xyz;
    u_xlat16_4.xyz = (u_xlatb2.x) ? u_xlat12.xyz : u_xlat0.xyz;
    u_xlat16_5.xyz = u_xlat0.xyz + (-u_xlat16_4.xyz);
    u_xlat16_5.xyz = vec3(u_xlat16_34) * u_xlat16_5.xyz + u_xlat16_4.xyz;
    u_xlat16_0.xyz = (bool(u_xlatb30)) ? u_xlat16_5.xyz : u_xlat16_4.xyz;
    u_xlat16_4.x = max(u_xlat16_0.z, u_xlat16_0.y);
    u_xlat16_1.w = max(u_xlat16_0.x, u_xlat16_4.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(1.0<u_xlat16_1.w);
#else
    u_xlatb2.x = 1.0<u_xlat16_1.w;
#endif
    u_xlat16_1.xyz = u_xlat16_0.xyz / u_xlat16_1.www;
    u_xlat16_0.w = 1.0;
    u_xlat16_0 = (u_xlatb2.x) ? u_xlat16_1 : u_xlat16_0;
    u_xlat16_4.x = min(u_xlat16_0.w, 1.10000002);
    u_xlat16_14 = u_xlat16_0.w + (-u_xlat16_4.x);
    u_xlat16_4.x = u_xlat16_34 * u_xlat16_14 + u_xlat16_4.x;
    u_xlat16_2.x = u_xlat16_4.x * 0.0500000007;
    SV_Target0.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb12 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_4.x = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb12) ? u_xlat16_4.x : 0.0;
    SV_Target0.w = 0.0156862754;
    SV_Target1.xyz = u_xlat16_0.xyz;
    SV_Target1.w = u_xlat16_2.x;
    SV_Target2.xy = vec2(0.0, 0.0);
    SV_Target2.w = vs_TEXCOORD4;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "MSAA_INTERPOLATION" "TOON_SPECULAR_ON" "TOON_LIGHTMAP_ON" "MAIN_TEX_COLORING_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	vec4 _MainTex_ST;
uniform 	float _CharacterAmbientSensorShadowOn;
uniform 	vec4 _AmbientSensorUVs;
uniform 	float _UseClipPlane;
uniform 	float _ClipPlaneWorld;
uniform 	vec4 _ClipPlane;
uniform 	vec4 mhy_AvatarLightDir;
uniform 	vec4 mhy_CharacterOverrideLightDir;
uniform lowp sampler2D _CharacterAmbientSensorTex;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp float vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD6;
vec4 u_xlat0;
bvec2 u_xlatb0;
vec4 u_xlat1;
bool u_xlatb1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump float u_xlat16_4;
float u_xlat5;
float u_xlat6;
float u_xlat7;
float u_xlat10;
bool u_xlatb10;
float u_xlat15;
bool u_xlatb15;
float u_xlat16;
bool u_xlatb16;
void main()
{
    u_xlatb0.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseClipPlane, _ClipPlaneWorld, _UseClipPlane, _UseClipPlane)).xy;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(abs(_ClipPlane.w)<0.00100000005);
#else
    u_xlatb10 = abs(_ClipPlane.w)<0.00100000005;
#endif
    u_xlat1.xyz = _ClipPlane.www * _ClipPlane.xyz;
    u_xlat1.xyz = (bool(u_xlatb10)) ? vec3(0.0, 0.0, 0.0) : u_xlat1.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_WorldToObject[1];
    u_xlat2 = hlslcc_mtx4x4unity_WorldToObject[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_WorldToObject[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_WorldToObject[3];
    u_xlat1.xyz = u_xlat1.xyz / u_xlat1.www;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * _ClipPlane.yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _ClipPlane.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _ClipPlane.zzz + u_xlat2.xyz;
    u_xlat10 = dot(u_xlat1.xyz, u_xlat2.xyz);
    u_xlat15 = dot(in_POSITION0.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(u_xlat15<u_xlat10);
#else
    u_xlatb1 = u_xlat15<u_xlat10;
#endif
    u_xlat10 = (-u_xlat10) + u_xlat15;
    u_xlat2.xyz = (-vec3(u_xlat10)) * u_xlat2.xyz + in_POSITION0.xyz;
    u_xlat2.w = 0.0;
    u_xlat3.xyz = in_POSITION0.xyz;
    u_xlat3.w = in_COLOR0.w;
    u_xlat1 = (bool(u_xlatb1)) ? u_xlat2 : u_xlat3;
    u_xlat10 = dot(in_POSITION0.xyz, _ClipPlane.xyz);
    u_xlat15 = _ClipPlane.w + -0.00999999978;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(u_xlat10<u_xlat15);
#else
    u_xlatb15 = u_xlat10<u_xlat15;
#endif
    u_xlat10 = u_xlat10 + (-_ClipPlane.w);
    u_xlat2.xyz = (-vec3(u_xlat10)) * _ClipPlane.xyz + in_POSITION0.xyz;
    u_xlat2.w = 0.0;
    u_xlat2 = (bool(u_xlatb15)) ? u_xlat2 : u_xlat3;
    u_xlat1.xyz = (u_xlatb0.y) ? u_xlat1.xyz : u_xlat2.xyz;
    u_xlat16_4 = (u_xlatb0.y) ? u_xlat1.w : u_xlat2.w;
    u_xlat1.xyz = (u_xlatb0.x) ? u_xlat1.xyz : in_POSITION0.xyz;
    vs_COLOR0.w = (u_xlatb0.x) ? u_xlat16_4 : in_COLOR0.w;
    u_xlat0.xyw = (-_WorldSpaceCameraPos.xyz) + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat2.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;
    u_xlat2.y = hlslcc_mtx4x4unity_ObjectToWorld[1].x;
    u_xlat2.z = hlslcc_mtx4x4unity_ObjectToWorld[2].x;
    u_xlat2.w = u_xlat0.x;
    u_xlat1.w = 1.0;
    u_xlat2.x = dot(u_xlat2, u_xlat1);
    u_xlat3.x = hlslcc_mtx4x4unity_ObjectToWorld[0].y;
    u_xlat3.y = hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat3.z = hlslcc_mtx4x4unity_ObjectToWorld[2].y;
    u_xlat3.w = u_xlat0.y;
    u_xlat7 = dot(u_xlat3, u_xlat1);
    u_xlat0.x = hlslcc_mtx4x4unity_ObjectToWorld[0].z;
    u_xlat0.y = hlslcc_mtx4x4unity_ObjectToWorld[1].z;
    u_xlat0.z = hlslcc_mtx4x4unity_ObjectToWorld[2].z;
    u_xlat0.x = dot(u_xlat0, u_xlat1);
    u_xlat3.x = hlslcc_mtx4x4unity_ObjectToWorld[0].w;
    u_xlat3.y = hlslcc_mtx4x4unity_ObjectToWorld[1].w;
    u_xlat3.z = hlslcc_mtx4x4unity_ObjectToWorld[2].w;
    u_xlat3.w = hlslcc_mtx4x4unity_ObjectToWorld[3].w;
    u_xlat5 = dot(u_xlat3, u_xlat1);
    u_xlat3 = vec4(u_xlat7) * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[3] * vec4(u_xlat5) + u_xlat2;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat1;
    vs_TEXCOORD3.xyz = u_xlat1.xyz / u_xlat1.www;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.xz = u_xlat0.xw * vec2(0.5, 0.5);
    u_xlat6 = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.w = u_xlat6 * 0.5;
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat1.xyz = in_NORMAL0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_NORMAL0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_NORMAL0.zzz + u_xlat1.xyz;
    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat16 = inversesqrt(u_xlat16);
    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(0.5<mhy_CharacterOverrideLightDir.w);
#else
    u_xlatb16 = 0.5<mhy_CharacterOverrideLightDir.w;
#endif
    u_xlat2.x = mhy_CharacterOverrideLightDir.x;
    u_xlat2.yz = (-mhy_CharacterOverrideLightDir.yz);
    u_xlat2.xyz = (bool(u_xlatb16)) ? u_xlat2.xyz : mhy_AvatarLightDir.xyz;
    u_xlat16_4 = dot(u_xlat1.xyz, u_xlat2.xyz);
    vs_TEXCOORD1.w = u_xlat16_4 * 0.497500002 + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_CharacterAmbientSensorShadowOn));
#else
    u_xlatb16 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_CharacterAmbientSensorShadowOn);
#endif
    if(u_xlatb16){
        u_xlat16 = textureLod(_CharacterAmbientSensorTex, _AmbientSensorUVs.xy, 0.0).x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb16 = !!(0.5<u_xlat16);
#else
        u_xlatb16 = 0.5<u_xlat16;
#endif
        vs_TEXCOORD4 = u_xlatb16 ? 1.0 : float(0.0);
    } else {
        vs_TEXCOORD4 = 0.0;
    //ENDIF
    }
    gl_Position = u_xlat0;
    vs_COLOR0.xyz = in_COLOR0.xyz;
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    vs_TEXCOORD2.zw = u_xlat0.zw;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	mediump vec4 _Color;
uniform 	float _MainTexAlphaUse;
uniform 	mediump float _MainTexAlphaCutoff;
uniform 	mediump vec4 _MainTexTintColor;
uniform 	float _UseLightMapColorAO;
uniform 	float _UseVertexColorAO;
uniform 	mediump float _LightArea;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	float _UseCoolShadowColorOrTex;
uniform 	mediump vec3 _CoolShadowMultColor;
uniform 	float _UseShadowTransition;
uniform 	float _ShadowTransitionRange;
uniform 	float _ShadowTransitionSoftness;
uniform 	mediump vec3 _SpecularColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	float _FaceBlushStrength;
uniform 	mediump vec3 _FaceBlushColor;
uniform 	mediump float _EmissionScaler;
uniform 	mediump vec3 _EmissionColor_MHY;
uniform 	float _UseMaterial2;
uniform 	mediump vec3 _Color2;
uniform 	mediump vec3 _FirstShadowMultColor2;
uniform 	mediump vec3 _CoolShadowMultColor2;
uniform 	mediump float _Shininess2;
uniform 	mediump float _SpecMulti2;
uniform 	float _ShadowTransitionRange2;
uniform 	float _ShadowTransitionSoftness2;
uniform 	float _UseMaterial3;
uniform 	mediump vec3 _Color3;
uniform 	mediump vec3 _FirstShadowMultColor3;
uniform 	mediump vec3 _CoolShadowMultColor3;
uniform 	mediump float _Shininess3;
uniform 	mediump float _SpecMulti3;
uniform 	float _ShadowTransitionRange3;
uniform 	float _ShadowTransitionSoftness3;
uniform 	float _UseMaterial4;
uniform 	mediump vec3 _Color4;
uniform 	mediump vec3 _FirstShadowMultColor4;
uniform 	mediump vec3 _CoolShadowMultColor4;
uniform 	mediump float _Shininess4;
uniform 	mediump float _SpecMulti4;
uniform 	float _ShadowTransitionRange4;
uniform 	float _ShadowTransitionSoftness4;
uniform 	float _UseMaterial5;
uniform 	mediump vec3 _Color5;
uniform 	mediump vec3 _FirstShadowMultColor5;
uniform 	mediump vec3 _CoolShadowMultColor5;
uniform 	mediump float _Shininess5;
uniform 	mediump float _SpecMulti5;
uniform 	float _ShadowTransitionRange5;
uniform 	float _ShadowTransitionSoftness5;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _UseClipPlane;
uniform 	float _ES_CharacterAmbientLightOn;
uniform 	float _ES_CharacterAmbientBrightness;
uniform 	vec3 _ES_CharacterMainLightColor;
uniform 	vec3 _ES_CharacterAmbientLightColor;
uniform 	float _ES_CharacterMainLightRatio;
uniform 	float _ES_CharacterAmbientLightRatio;
uniform 	float _ES_CharacterColorTone;
uniform 	float _ES_CharacterPointLightWholeIntensity;
uniform 	vec4 mhy_AvatarLightDir;
uniform 	vec4 mhy_CharacterPointLightColor;
uniform 	vec4 mhy_CharacterOverrideLightDir;
uniform 	mediump vec4 _FlowMapColor01;
uniform 	mediump float _FlowScale01;
uniform 	mediump float _FlowMap01_Uspeed;
uniform 	vec4 _FlowMap01_ST;
uniform 	mediump float _FlowMap01_Vspeed;
uniform 	mediump float _Noise_Uspeed;
uniform 	vec4 _Noise_ST;
uniform 	mediump float _Noise_Vspeed;
uniform 	mediump float _NoiseFlowIntensity;
uniform 	mediump float _MaskOffset01;
uniform 	mediump float _NoiseIntensity;
uniform 	mediump float _Mask01_Power;
uniform 	mediump vec4 _FlowMapColor02;
uniform 	mediump float _FlowScale02;
uniform 	mediump float _FlowMap02_Uspeed;
uniform 	vec4 _FlowMap02_ST;
uniform 	mediump float _FlowMap02_Vspeed;
uniform 	mediump float _MaskOffset02;
uniform 	mediump float _Mask02_Power;
uniform 	mediump float _DissolveNoise_Uspeed;
uniform 	vec4 _DissovleNoise_ST;
uniform 	mediump float _DissolveNoise_Vspeed;
uniform 	mediump float _DissovleNoiseScale;
uniform 	mediump float _Dissovle;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _Noise;
uniform lowp sampler2D _FlowMap01;
uniform lowp sampler2D _Mask01;
uniform lowp sampler2D _FlowMap02;
uniform lowp sampler2D _Mask02;
uniform lowp sampler2D _DissovleNoise;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp float vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
vec3 u_xlat2;
mediump vec4 u_xlat16_2;
lowp vec4 u_xlat10_2;
bool u_xlatb2;
vec3 u_xlat3;
mediump float u_xlat16_3;
lowp float u_xlat10_3;
bvec4 u_xlatb3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
bvec4 u_xlatb5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
mediump vec3 u_xlat16_7;
bvec3 u_xlatb7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
vec3 u_xlat11;
bool u_xlatb11;
vec3 u_xlat13;
bool u_xlatb13;
float u_xlat14;
mediump vec3 u_xlat16_14;
int u_xlati14;
mediump float u_xlat16_15;
mediump vec3 u_xlat16_17;
mediump vec3 u_xlat16_19;
bvec2 u_xlatb22;
vec2 u_xlat24;
int u_xlati25;
bool u_xlatb25;
float u_xlat33;
mediump float u_xlat16_33;
lowp float u_xlat10_33;
bool u_xlatb33;
float u_xlat35;
bool u_xlatb35;
float u_xlat36;
int u_xlati36;
mediump float u_xlat16_37;
mediump float u_xlat16_39;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseClipPlane));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseClipPlane);
#endif
    u_xlat16_1.x = vs_COLOR0.w + -0.00999999978;
#ifdef UNITY_ADRENO_ES3
    u_xlatb11 = !!(u_xlat16_1.x<0.0);
#else
    u_xlatb11 = u_xlat16_1.x<0.0;
#endif
    u_xlatb0 = u_xlatb0 && u_xlatb11;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(_DitherAlpha<0.949999988);
#else
        u_xlatb0 = _DitherAlpha<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb22.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb22.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb22.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = _DitherAlpha * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + -0.00999999978;
#ifdef UNITY_ADRENO_ES3
            u_xlatb0 = !!(u_xlat0.x<0.0);
#else
            u_xlatb0 = u_xlat0.x<0.0;
#endif
            if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(0.5<mhy_CharacterOverrideLightDir.w);
#else
    u_xlatb2 = 0.5<mhy_CharacterOverrideLightDir.w;
#endif
    u_xlat3.x = mhy_CharacterOverrideLightDir.x;
    u_xlat3.yz = (-mhy_CharacterOverrideLightDir.yz);
    u_xlat2.xyz = (bool(u_xlatb2)) ? u_xlat3.xyz : mhy_AvatarLightDir.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat33) + u_xlat2.xyz;
    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat0.xyz = vec3(u_xlat33) * u_xlat0.xyz;
    u_xlat2.xy = dFdx(vs_TEXCOORD0.xy);
    u_xlat24.xy = dFdy(vs_TEXCOORD0.xy);
    u_xlat2.xy = u_xlat24.xy + u_xlat2.xy;
    u_xlat24.xy = (-u_xlat2.xy) * vec2(0.25, 0.25) + vs_TEXCOORD0.xy;
    u_xlat2.xy = u_xlat2.xy * vec2(0.25, 0.25) + vs_TEXCOORD0.xy;
    u_xlat2.xy = (int(gl_SampleID) != 0) ? u_xlat24.xy : u_xlat2.xy;
    u_xlat1 = textureLod(_MainTex, u_xlat2.xy, 0.0);
    u_xlat16_4.xyz = u_xlat1.xyz * _MainTexTintColor.xyz;
    u_xlat16_5.xyz = u_xlat16_4.xyz + u_xlat16_4.xyz;
    u_xlat16_6.xyz = u_xlat1.xyz + _MainTexTintColor.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_6.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(-4.0, -4.0, -4.0) + u_xlat16_6.xyz;
    u_xlatb3 = lessThan(vec4(0.5, 0.5, 0.5, 0.00999999978), u_xlat1);
    u_xlat16_6.x = (u_xlatb3.x) ? float(1.0) : float(0.0);
    u_xlat16_6.y = (u_xlatb3.y) ? float(1.0) : float(0.0);
    u_xlat16_6.z = (u_xlatb3.z) ? float(1.0) : float(0.0);
    u_xlat16_4.xyz = u_xlat16_4.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat16_4.xyz = u_xlat16_6.xyz * u_xlat16_4.xyz + u_xlat16_5.xyz;
    u_xlatb3.xyz = equal(vec4(_MainTexAlphaUse), vec4(3.0, 1.0, 2.0, 0.0)).xyz;
    u_xlat33 = u_xlat1.w * _FaceBlushStrength;
    u_xlat16_7.xyz = (-u_xlat16_4.xyz) + _FaceBlushColor.xyz;
    u_xlat7.xyz = vec3(u_xlat33) * u_xlat16_7.xyz + u_xlat16_4.xyz;
    u_xlat16_4.xyz = (u_xlatb3.x) ? u_xlat7.xyz : u_xlat16_4.xyz;
    u_xlat16_37 = u_xlat1.w + (-_MainTexAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(u_xlat16_37<0.0);
#else
    u_xlatb33 = u_xlat16_37<0.0;
#endif
    u_xlatb33 = u_xlatb3.y && u_xlatb33;
    if((int(u_xlatb33) * int(0xffffffffu))!=0){discard;}
    u_xlat10_2 = textureLod(_LightMapTex, u_xlat2.xy, 0.0);
    u_xlatb3.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseLightMapColorAO, _UseVertexColorAO, _UseLightMapColorAO, _UseLightMapColorAO)).xy;
    u_xlat16_37 = (u_xlatb3.x) ? u_xlat10_2.y : 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseMaterial2));
#else
    u_xlatb33 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseMaterial2);
#endif
    u_xlatb5 = greaterThanEqual(u_xlat10_2.wwww, vec4(0.800000012, 0.400000006, 0.200000003, 0.600000024));
    u_xlatb33 = u_xlatb33 && u_xlatb5.x;
    u_xlat33 = (u_xlatb33) ? 2.0 : 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb13 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseMaterial3));
#else
    u_xlatb13 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseMaterial3);
#endif
    u_xlatb13 = u_xlatb5.y && u_xlatb13;
    u_xlatb7.xyz = lessThan(u_xlat10_2.wwww, vec4(0.600000024, 0.400000006, 0.800000012, 0.0)).xyz;
    u_xlatb13 = u_xlatb13 && u_xlatb7.x;
    u_xlat33 = (u_xlatb13) ? 3.0 : u_xlat33;
#ifdef UNITY_ADRENO_ES3
    u_xlatb13 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseMaterial4));
#else
    u_xlatb13 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseMaterial4);
#endif
    u_xlatb13 = u_xlatb5.z && u_xlatb13;
    u_xlatb13 = u_xlatb7.y && u_xlatb13;
    u_xlat33 = (u_xlatb13) ? 4.0 : u_xlat33;
#ifdef UNITY_ADRENO_ES3
    u_xlatb13 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseMaterial5));
#else
    u_xlatb13 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseMaterial5);
#endif
    u_xlatb13 = u_xlatb5.w && u_xlatb13;
    u_xlatb13 = u_xlatb7.z && u_xlatb13;
    u_xlat33 = (u_xlatb13) ? 5.0 : u_xlat33;
    u_xlatb5 = equal(vec4(u_xlat33), vec4(2.0, 3.0, 4.0, 5.0));
    u_xlat16_6.xyz = (u_xlatb5.x) ? _Color2.xyz : _Color.xyz;
    u_xlat16_6.xyz = (u_xlatb5.y) ? _Color3.xyz : u_xlat16_6.xyz;
    u_xlat16_6.xyz = (u_xlatb5.z) ? _Color4.xyz : u_xlat16_6.xyz;
    u_xlat16_6.xyz = (u_xlatb5.w) ? _Color5.xyz : u_xlat16_6.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_6.xyz;
    u_xlatb13 = u_xlatb3.w && u_xlatb3.z;
    u_xlat16_6.x = (u_xlatb13) ? u_xlat1.w : 0.0;
    u_xlat16_17.x = u_xlat16_37 * vs_COLOR0.x;
    u_xlat16_37 = (u_xlatb3.y) ? u_xlat16_17.x : u_xlat16_37;
#ifdef UNITY_ADRENO_ES3
    u_xlatb35 = !!(u_xlat16_37<0.0500000007);
#else
    u_xlatb35 = u_xlat16_37<0.0500000007;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb3.x = !!(0.949999988<u_xlat16_37);
#else
    u_xlatb3.x = 0.949999988<u_xlat16_37;
#endif
    u_xlat14 = u_xlat16_37 + vs_TEXCOORD1.w;
    u_xlat14 = u_xlat14 * 0.5;
    u_xlat16_37 = (u_xlatb3.x) ? 1.0 : u_xlat14;
    u_xlat16_37 = (u_xlatb35) ? 0.0 : u_xlat16_37;
#ifdef UNITY_ADRENO_ES3
    u_xlatb35 = !!(u_xlat16_37<_LightArea);
#else
    u_xlatb35 = u_xlat16_37<_LightArea;
#endif
    if(u_xlatb35){
#ifdef UNITY_ADRENO_ES3
        u_xlatb35 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition));
#else
        u_xlatb35 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition);
#endif
#ifdef UNITY_ADRENO_ES3
        u_xlatb3.x = !!(u_xlat33==1.0);
#else
        u_xlatb3.x = u_xlat33==1.0;
#endif
        u_xlat16_8.x = (u_xlatb3.x) ? _ShadowTransitionRange : 0.0;
        u_xlat16_8.y = (u_xlatb3.x) ? _ShadowTransitionSoftness : 0.0;
        u_xlat16_17.xy = (u_xlatb5.x) ? vec2(_ShadowTransitionRange2, _ShadowTransitionSoftness2) : u_xlat16_8.xy;
        u_xlat16_17.xy = (u_xlatb5.y) ? vec2(_ShadowTransitionRange3, _ShadowTransitionSoftness3) : u_xlat16_17.xy;
        u_xlat16_17.xy = (u_xlatb5.z) ? vec2(_ShadowTransitionRange4, _ShadowTransitionSoftness4) : u_xlat16_17.xy;
        u_xlat16_17.xy = (u_xlatb5.w) ? vec2(_ShadowTransitionRange5, _ShadowTransitionSoftness5) : u_xlat16_17.xy;
        u_xlat16_37 = (-u_xlat16_37) + _LightArea;
        u_xlat16_37 = u_xlat16_37 / u_xlat16_17.x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb3.x = !!(u_xlat16_37>=1.0);
#else
        u_xlatb3.x = u_xlat16_37>=1.0;
#endif
        u_xlat16_14.x = u_xlat16_37 + 0.00999999978;
        u_xlat16_14.x = log2(u_xlat16_14.x);
        u_xlat16_14.x = u_xlat16_14.x * u_xlat16_17.y;
        u_xlat16_14.x = exp2(u_xlat16_14.x);
        u_xlat14 = min(u_xlat16_14.x, 1.0);
        u_xlat3.x = (u_xlatb3.x) ? 1.0 : u_xlat14;
        u_xlat35 = (u_xlatb35) ? u_xlat3.x : 1.0;
        u_xlat16_37 = 0.0;
    } else {
        u_xlat35 = 0.0;
        u_xlat16_37 = 1.0;
    //ENDIF
    }
    u_xlat3.x = (-u_xlat16_37) + 1.0;
#ifdef UNITY_ADRENO_ES3
    { bool cond = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(vs_TEXCOORD4); u_xlati14 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati14 = int((vec4(0.0, 0.0, 0.0, 0.0)!=vec4(vs_TEXCOORD4)) ? 0xFFFFFFFFu : uint(0u));
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(u_xlat33==1.0);
#else
    u_xlatb33 = u_xlat33==1.0;
#endif
    if(u_xlatb33){
#ifdef UNITY_ADRENO_ES3
        u_xlatb25 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex));
#else
        u_xlatb25 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex);
#endif
        u_xlat16_7.xyz = vec3(_FirstShadowMultColor.xxyz.y + (-_CoolShadowMultColor.x), _FirstShadowMultColor.xxyz.z + (-_CoolShadowMultColor.y), float(_FirstShadowMultColor.z) + (-_CoolShadowMultColor.z));
        u_xlat7.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_7.xyz + _CoolShadowMultColor.xyz;
        u_xlat16_17.xyz = (bool(u_xlatb25)) ? u_xlat7.xyz : vec3(_FirstShadowMultColor.x, _FirstShadowMultColor.y, _FirstShadowMultColor.z);
    } else {
        if(u_xlatb5.x){
#ifdef UNITY_ADRENO_ES3
            u_xlatb25 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex));
#else
            u_xlatb25 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex);
#endif
            u_xlat16_7.xyz = _FirstShadowMultColor2.xyz + (-_CoolShadowMultColor2.xyz);
            u_xlat7.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_7.xyz + _CoolShadowMultColor2.xyz;
            u_xlat16_17.xyz = (bool(u_xlatb25)) ? u_xlat7.xyz : _FirstShadowMultColor2.xyz;
        } else {
#ifdef UNITY_ADRENO_ES3
            u_xlatb25 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex));
#else
            u_xlatb25 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex);
#endif
            u_xlat16_7.xyz = _FirstShadowMultColor3.xyz + (-_CoolShadowMultColor3.xyz);
            u_xlat7.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_7.xyz + _CoolShadowMultColor3.xyz;
            u_xlat16_8.xyz = (bool(u_xlatb25)) ? u_xlat7.xyz : _FirstShadowMultColor3.xyz;
            u_xlat16_7.xyz = _FirstShadowMultColor4.xyz + (-_CoolShadowMultColor4.xyz);
            u_xlat7.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_7.xyz + _CoolShadowMultColor4.xyz;
            u_xlat16_9.xyz = (bool(u_xlatb25)) ? u_xlat7.xyz : _FirstShadowMultColor4.xyz;
            u_xlat16_7.xyz = _FirstShadowMultColor5.xyz + (-_CoolShadowMultColor5.xyz);
            u_xlat7.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_7.xyz + _CoolShadowMultColor5.xyz;
            u_xlat16_10.xyz = (bool(u_xlatb25)) ? u_xlat7.xyz : _FirstShadowMultColor5.xyz;
            u_xlat16_9.xyz = (u_xlatb5.z) ? u_xlat16_9.xyz : u_xlat16_10.xyz;
            u_xlat16_17.xyz = (u_xlatb5.y) ? u_xlat16_8.xyz : u_xlat16_9.xyz;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb25 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition));
#else
    u_xlatb25 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition);
#endif
    u_xlati36 = ~u_xlati14;
    u_xlati25 = u_xlatb25 ? u_xlati36 : int(0);
    u_xlat16_7.xyz = u_xlat16_17.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat7.xyz = vec3(u_xlat35) * u_xlat16_7.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_17.xyz = (int(u_xlati25) != 0) ? u_xlat7.xyz : u_xlat16_17.xyz;
    u_xlat16_37 = (u_xlatb5.z) ? _Shininess4 : _Shininess5;
    u_xlat16_8.x = (u_xlatb5.z) ? _SpecMulti4 : _SpecMulti5;
    u_xlat16_37 = (u_xlatb5.y) ? _Shininess3 : u_xlat16_37;
    u_xlat16_8.x = (u_xlatb5.y) ? _SpecMulti3 : u_xlat16_8.x;
    u_xlat16_37 = (u_xlatb5.x) ? _Shininess2 : u_xlat16_37;
    u_xlat16_8.x = (u_xlatb5.x) ? _SpecMulti2 : u_xlat16_8.x;
    u_xlat16_37 = (u_xlatb33) ? _Shininess : u_xlat16_37;
    u_xlat16_8.x = (u_xlatb33) ? _SpecMulti : u_xlat16_8.x;
    u_xlat16_19.x = dot(vs_TEXCOORD1.xyz, u_xlat0.xyz);
    u_xlat16_19.x = max(u_xlat16_19.x, 0.00100000005);
    u_xlat16_19.x = log2(u_xlat16_19.x);
    u_xlat16_37 = u_xlat16_37 * u_xlat16_19.x;
    u_xlat16_37 = exp2(u_xlat16_37);
    u_xlat0.x = (-u_xlat10_2.z) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat0.x<u_xlat16_37);
#else
    u_xlatb0 = u_xlat0.x<u_xlat16_37;
#endif
    u_xlat16_8.xyz = u_xlat16_8.xxx * _SpecularColor.xyz;
    u_xlat16_8.xyz = u_xlat10_2.xxx * u_xlat16_8.xyz;
    u_xlat16_8.xyz = (bool(u_xlatb0)) ? u_xlat16_8.xyz : vec3(0.0, 0.0, 0.0);
    u_xlat16_4.xyz = vec3(u_xlat16_4.x * _EmissionColor_MHY.xxyz.y, u_xlat16_4.y * _EmissionColor_MHY.xxyz.z, u_xlat16_4.z * float(_EmissionColor_MHY.z));
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat3.x==1.0);
#else
    u_xlatb0 = u_xlat3.x==1.0;
#endif
    u_xlati0 = int(uint(u_xlatb0) * 0xffffffffu | uint(u_xlati14));
    u_xlat11.xyz = u_xlat1.xyz * u_xlat16_17.xyz;
    u_xlat0.xyz = (int(u_xlati0) != 0) ? u_xlat11.xyz : u_xlat1.xyz;
    u_xlat0.xyz = u_xlat16_8.xyz + u_xlat0.xyz;
    u_xlat2.xz = vs_TEXCOORD0.zw * _FlowMap01_ST.xy + _FlowMap01_ST.zw;
    u_xlat16_8.x = _Time.y * _FlowMap01_Uspeed + u_xlat2.x;
    u_xlat16_8.y = _Time.y * _FlowMap01_Vspeed + u_xlat2.z;
    u_xlat2.xz = vs_TEXCOORD0.zw * _Noise_ST.xy + _Noise_ST.zw;
    u_xlat16_9.x = _Time.y * _Noise_Uspeed + u_xlat2.x;
    u_xlat16_9.y = _Time.y * _Noise_Vspeed + u_xlat2.z;
    u_xlat10_33 = textureLod(_Noise, u_xlat16_9.xy, 0.0).x;
    u_xlat16_37 = _MaskOffset01 * 1.39999998 + -0.699999988;
    u_xlat16_17.x = u_xlat10_33 * _NoiseIntensity;
    u_xlat2.xz = vs_TEXCOORD0.zw * _FlowMap02_ST.xy + _FlowMap02_ST.zw;
    u_xlat16_9.x = _Time.y * _FlowMap02_Uspeed + u_xlat2.x;
    u_xlat16_9.y = _Time.y * _FlowMap02_Vspeed + u_xlat2.z;
    u_xlat16_39 = _MaskOffset02 * 1.39999998 + -0.699999988;
    u_xlat16_10.xyz = _FlowMapColor01.xyz * vec3(_FlowScale01);
    u_xlat16_8.xy = vec2(u_xlat10_33) * vec2(vec2(_NoiseFlowIntensity, _NoiseFlowIntensity)) + u_xlat16_8.xy;
    u_xlat10_2.x = textureLod(_FlowMap01, u_xlat16_8.xy, 0.0).x;
    u_xlat16_2.xzw = u_xlat10_2.xxx * u_xlat16_10.xyz;
    u_xlat16_8.x = (-vs_TEXCOORD0.z) + 1.0;
    u_xlat16_1.x = u_xlat16_37 + u_xlat16_8.x;
    u_xlat16_1.yw = vec2(u_xlat10_33) * vec2(vec2(_NoiseIntensity, _NoiseIntensity)) + (-vs_TEXCOORD0.ww);
    u_xlat16_17.y = 1.0;
    u_xlat16_19.xy = u_xlat16_1.xy + u_xlat16_17.xy;
    u_xlat10_3 = textureLod(_Mask01, u_xlat16_19.xy, 0.0).x;
    u_xlat16_3 = max(u_xlat10_3, 9.99999975e-05);
    u_xlat16_3 = log2(u_xlat16_3);
    u_xlat16_3 = u_xlat16_3 * _Mask01_Power;
    u_xlat16_3 = exp2(u_xlat16_3);
    u_xlat16_19.xyz = _FlowMapColor02.xyz * vec3(_FlowScale02);
    u_xlat16_9.xy = vec2(u_xlat10_33) * vec2(vec2(_NoiseFlowIntensity, _NoiseFlowIntensity)) + u_xlat16_9.xy;
    u_xlat10_33 = textureLod(_FlowMap02, u_xlat16_9.xy, 0.0).x;
    u_xlat16_14.xyz = vec3(u_xlat10_33) * u_xlat16_19.xyz;
    u_xlat16_1.z = u_xlat16_39 + u_xlat16_8.x;
    u_xlat16_17.xy = vec2(u_xlat16_1.z + u_xlat16_17.x, u_xlat16_1.w + u_xlat16_17.y);
    u_xlat10_33 = textureLod(_Mask02, u_xlat16_17.xy, 0.0).x;
    u_xlat16_33 = max(u_xlat10_33, 9.99999975e-05);
    u_xlat16_33 = log2(u_xlat16_33);
    u_xlat16_33 = u_xlat16_33 * _Mask02_Power;
    u_xlat16_33 = exp2(u_xlat16_33);
    u_xlat16_14.xyz = vec3(u_xlat16_33) * u_xlat16_14.xyz;
    u_xlat16_2.xzw = u_xlat16_2.xzw * vec3(u_xlat16_3) + u_xlat16_14.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(_EmissionScaler) + u_xlat16_2.xzw;
    u_xlat3.xyz = (-u_xlat0.xyz) + u_xlat16_4.xyz;
    u_xlat3.xyz = u_xlat16_6.xxx * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat7.xy = vs_TEXCOORD0.zw * _DissovleNoise_ST.xy + _DissovleNoise_ST.zw;
    u_xlat16_4.x = _Time.y * _DissolveNoise_Uspeed + u_xlat7.x;
    u_xlat16_4.y = _Time.y * _DissolveNoise_Vspeed + u_xlat7.y;
    u_xlat10_33 = textureLod(_DissovleNoise, u_xlat16_4.xy, 0.0).x;
    u_xlat33 = u_xlat10_33 * _DissovleNoiseScale + vs_TEXCOORD0.z;
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(_Dissovle>=u_xlat33);
#else
    u_xlatb33 = _Dissovle>=u_xlat33;
#endif
    u_xlat0.xyz = (bool(u_xlatb13)) ? u_xlat3.xyz : u_xlat0.xyz;
    u_xlat0.xyz = u_xlat16_2.xzw + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(0.00999999978<u_xlat16_6.x);
#else
    u_xlatb2 = 0.00999999978<u_xlat16_6.x;
#endif
    if((int(u_xlatb33) * int(0xffffffffu))==0){discard;}
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn));
#else
    u_xlatb33 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn);
#endif
    u_xlat13.xyz = u_xlat0.xyz * vec3(vec3(_ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness));
    u_xlat3.xyz = vec3(vec3(_ES_CharacterPointLightWholeIntensity, _ES_CharacterPointLightWholeIntensity, _ES_CharacterPointLightWholeIntensity)) * mhy_CharacterPointLightColor.xyz;
    u_xlat7.xyz = _ES_CharacterMainLightColor.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.xyz = min(max(u_xlat7.xyz, 0.0), 1.0);
#else
    u_xlat7.xyz = clamp(u_xlat7.xyz, 0.0, 1.0);
#endif
    u_xlat36 = (-mhy_CharacterPointLightColor.w) + 1.0;
    u_xlat3.xyz = u_xlat7.xyz * vec3(u_xlat36) + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat3.xyz = vec3(vec3(_ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio)) * u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat13.xyz = u_xlat13.xyz * u_xlat3.xyz;
    u_xlat3.xyz = _ES_CharacterAmbientLightColor.xyz * vec3(_ES_CharacterAmbientLightRatio);
    u_xlat16_4.xyz = u_xlat13.xyz * vec3(10.0, 10.0, 10.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.xyz = min(max(u_xlat16_4.xyz, 0.0), 1.0);
#else
    u_xlat16_4.xyz = clamp(u_xlat16_4.xyz, 0.0, 1.0);
#endif
    u_xlat13.xyz = u_xlat3.xyz * u_xlat16_4.xyz + u_xlat13.xyz;
    u_xlat16_4.xyz = (bool(u_xlatb33)) ? u_xlat13.xyz : u_xlat0.xyz;
    u_xlat16_17.xyz = u_xlat0.xyz + (-u_xlat16_4.xyz);
    u_xlat16_17.xyz = u_xlat16_6.xxx * u_xlat16_17.xyz + u_xlat16_4.xyz;
    u_xlat16_0.xyz = (bool(u_xlatb2)) ? u_xlat16_17.xyz : u_xlat16_4.xyz;
    u_xlat16_4.x = max(u_xlat16_0.z, u_xlat16_0.y);
    u_xlat16_1.w = max(u_xlat16_0.x, u_xlat16_4.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(1.0<u_xlat16_1.w);
#else
    u_xlatb2 = 1.0<u_xlat16_1.w;
#endif
    u_xlat16_1.xyz = u_xlat16_0.xyz / u_xlat16_1.www;
    u_xlat16_0.w = 1.0;
    u_xlat16_0 = (bool(u_xlatb2)) ? u_xlat16_1 : u_xlat16_0;
    u_xlat16_4.x = min(u_xlat16_0.w, 1.10000002);
    u_xlat16_15 = u_xlat16_0.w + (-u_xlat16_4.x);
    u_xlat16_4.x = u_xlat16_6.x * u_xlat16_15 + u_xlat16_4.x;
    u_xlat16_2.x = u_xlat16_4.x * 0.0500000007;
    SV_Target0.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb13 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb13 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_4.x = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb13) ? u_xlat16_4.x : 0.0;
    SV_Target0.w = 0.0156862754;
    SV_Target1.xyz = u_xlat16_0.xyz;
    SV_Target1.w = u_xlat16_2.x;
    SV_Target2.xy = vec2(0.0, 0.0);
    SV_Target2.w = vs_TEXCOORD4;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MSAA_INTERPOLATION" "MAIN_TEX_COLORING_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _MainTex_ST;
uniform 	float _CharacterAmbientSensorShadowOn;
uniform 	vec4 _AmbientSensorUVs;
uniform 	float _UseClipPlane;
uniform 	float _ClipPlaneWorld;
uniform 	vec4 _ClipPlane;
uniform 	vec4 mhy_AvatarLightDir;
uniform 	vec4 mhy_CharacterOverrideLightDir;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
struct unity_Builtins1Array_Type {
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw1 {
	unity_Builtins1Array_Type unity_Builtins1Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform lowp sampler2D _CharacterAmbientSensorTex;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp float vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD6;
flat out highp uint vs_SV_InstanceID0;
vec3 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump float u_xlat16_4;
vec3 u_xlat5;
int u_xlati5;
bool u_xlatb5;
float u_xlat6;
mediump float u_xlat16_9;
float u_xlat10;
bool u_xlatb10;
bool u_xlatb11;
float u_xlat15;
bool u_xlatb15;
float u_xlat16;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
#ifdef UNITY_ADRENO_ES3
    u_xlatb5 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseClipPlane));
#else
    u_xlatb5 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseClipPlane);
#endif
    if(u_xlatb5){
#ifdef UNITY_ADRENO_ES3
        u_xlatb5 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ClipPlaneWorld));
#else
        u_xlatb5 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ClipPlaneWorld);
#endif
        if(u_xlatb5){
            u_xlati5 = u_xlati0 << 2;
#ifdef UNITY_ADRENO_ES3
            u_xlatb10 = !!(abs(_ClipPlane.w)<0.00100000005);
#else
            u_xlatb10 = abs(_ClipPlane.w)<0.00100000005;
#endif
            u_xlat1.xyz = _ClipPlane.www * _ClipPlane.xyz;
            u_xlat1.xyz = (bool(u_xlatb10)) ? vec3(0.0, 0.0, 0.0) : u_xlat1.xyz;
            u_xlat2 = u_xlat1.yyyy * unity_Builtins1Array[u_xlati5 / 4].hlslcc_mtx4x4unity_WorldToObjectArray[1];
            u_xlat2 = unity_Builtins1Array[u_xlati5 / 4].hlslcc_mtx4x4unity_WorldToObjectArray[0] * u_xlat1.xxxx + u_xlat2;
            u_xlat1 = unity_Builtins1Array[u_xlati5 / 4].hlslcc_mtx4x4unity_WorldToObjectArray[2] * u_xlat1.zzzz + u_xlat2;
            u_xlat1 = u_xlat1 + unity_Builtins1Array[u_xlati5 / 4].hlslcc_mtx4x4unity_WorldToObjectArray[3];
            u_xlat1.xyz = u_xlat1.xyz / u_xlat1.www;
            u_xlat2.xyz = _ClipPlane.yyy * unity_Builtins1Array[u_xlati5 / 4].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz;
            u_xlat2.xyz = unity_Builtins1Array[u_xlati5 / 4].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz * _ClipPlane.xxx + u_xlat2.xyz;
            u_xlat5.xyz = unity_Builtins1Array[u_xlati5 / 4].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz * _ClipPlane.zzz + u_xlat2.xyz;
            u_xlat1.x = dot(u_xlat1.xyz, u_xlat5.xyz);
            u_xlat6 = dot(in_POSITION0.xyz, u_xlat5.xyz);
#ifdef UNITY_ADRENO_ES3
            u_xlatb11 = !!(u_xlat6<u_xlat1.x);
#else
            u_xlatb11 = u_xlat6<u_xlat1.x;
#endif
            u_xlat1.x = (-u_xlat1.x) + u_xlat6;
            u_xlat2.xyz = (-u_xlat1.xxx) * u_xlat5.xyz + in_POSITION0.xyz;
            u_xlat2.w = 0.0;
            u_xlat3.xyz = in_POSITION0.xyz;
            u_xlat3.w = in_COLOR0.w;
            u_xlat1 = (bool(u_xlatb11)) ? u_xlat2 : u_xlat3;
            u_xlat16_4 = u_xlat1.w;
        } else {
            u_xlat5.x = dot(in_POSITION0.xyz, _ClipPlane.xyz);
            u_xlat10 = _ClipPlane.w + -0.00999999978;
#ifdef UNITY_ADRENO_ES3
            u_xlatb10 = !!(u_xlat5.x<u_xlat10);
#else
            u_xlatb10 = u_xlat5.x<u_xlat10;
#endif
            u_xlat5.x = u_xlat5.x + (-_ClipPlane.w);
            u_xlat2.xyz = (-u_xlat5.xxx) * _ClipPlane.xyz + in_POSITION0.xyz;
            u_xlat2.w = 0.0;
            u_xlat3.xyz = in_POSITION0.xyz;
            u_xlat3.w = in_COLOR0.w;
            u_xlat1 = (bool(u_xlatb10)) ? u_xlat2 : u_xlat3;
            u_xlat16_4 = u_xlat1.w;
        //ENDIF
        }
    } else {
        u_xlat1.xyz = in_POSITION0.xyz;
        u_xlat16_4 = in_COLOR0.w;
    //ENDIF
    }
    u_xlati0 = u_xlati0 << 2;
    u_xlat2.xyw = (-_WorldSpaceCameraPos.xyz) + unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat3.x = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].x;
    u_xlat3.y = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].x;
    u_xlat3.z = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].x;
    u_xlat3.w = u_xlat2.x;
    u_xlat1.w = 1.0;
    u_xlat5.x = dot(u_xlat3, u_xlat1);
    u_xlat3.x = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].y;
    u_xlat3.y = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].y;
    u_xlat3.z = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].y;
    u_xlat3.w = u_xlat2.y;
    u_xlat10 = dot(u_xlat3, u_xlat1);
    u_xlat2.x = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].z;
    u_xlat2.y = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].z;
    u_xlat2.z = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].z;
    u_xlat15 = dot(u_xlat2, u_xlat1);
    u_xlat2.x = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].w;
    u_xlat2.y = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].w;
    u_xlat2.z = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].w;
    u_xlat2.w = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3].w;
    u_xlat16 = dot(u_xlat2, u_xlat1);
    u_xlat2 = vec4(u_xlat10) * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat5.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVPZero[2] * vec4(u_xlat15) + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVPZero[3] * vec4(u_xlat16) + u_xlat2;
    u_xlat3 = u_xlat1.yyyy * unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat3 = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * u_xlat1.xxxx + u_xlat3;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * u_xlat1.zzzz + u_xlat3;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3] * in_POSITION0.wwww + u_xlat1;
    vs_TEXCOORD3.xyz = u_xlat1.xyz / u_xlat1.www;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.xz = u_xlat2.xw * vec2(0.5, 0.5);
    u_xlat5.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat1.w = u_xlat5.x * 0.5;
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat5.xyz = in_NORMAL0.yyy * unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat5.xyz = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_NORMAL0.xxx + u_xlat5.xyz;
    u_xlat0.xyz = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_NORMAL0.zzz + u_xlat5.xyz;
    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(0.5<mhy_CharacterOverrideLightDir.w);
#else
    u_xlatb15 = 0.5<mhy_CharacterOverrideLightDir.w;
#endif
    u_xlat1.x = mhy_CharacterOverrideLightDir.x;
    u_xlat1.yz = (-mhy_CharacterOverrideLightDir.yz);
    u_xlat1.xyz = (bool(u_xlatb15)) ? u_xlat1.xyz : mhy_AvatarLightDir.xyz;
    u_xlat16_9 = dot(u_xlat0.xyz, u_xlat1.xyz);
    vs_TEXCOORD1.w = u_xlat16_9 * 0.497500002 + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_CharacterAmbientSensorShadowOn));
#else
    u_xlatb15 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_CharacterAmbientSensorShadowOn);
#endif
    if(u_xlatb15){
        u_xlat15 = textureLod(_CharacterAmbientSensorTex, _AmbientSensorUVs.xy, 0.0).x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb15 = !!(0.5<u_xlat15);
#else
        u_xlatb15 = 0.5<u_xlat15;
#endif
        vs_TEXCOORD4 = u_xlatb15 ? 1.0 : float(0.0);
    } else {
        vs_TEXCOORD4 = 0.0;
    //ENDIF
    }
    gl_Position = u_xlat2;
    vs_COLOR0.xyz = in_COLOR0.xyz;
    vs_COLOR0.w = u_xlat16_4;
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    vs_TEXCOORD2.zw = u_xlat2.zw;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	mediump vec4 _Color;
uniform 	float _MainTexAlphaUse;
uniform 	mediump float _MainTexAlphaCutoff;
uniform 	mediump vec4 _MainTexTintColor;
uniform 	float _UseVertexColorAO;
uniform 	mediump float _LightArea;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	float _UseCoolShadowColorOrTex;
uniform 	mediump vec3 _CoolShadowMultColor;
uniform 	float _UseShadowTransition;
uniform 	float _ShadowTransitionRange;
uniform 	float _ShadowTransitionSoftness;
uniform 	mediump vec3 _SpecularColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	float _FaceBlushStrength;
uniform 	mediump vec3 _FaceBlushColor;
uniform 	mediump float _EmissionScaler;
uniform 	mediump vec3 _EmissionColor_MHY;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _UseClipPlane;
uniform 	float _ES_CharacterAmbientLightOn;
uniform 	float _ES_CharacterAmbientBrightness;
uniform 	vec3 _ES_CharacterMainLightColor;
uniform 	vec3 _ES_CharacterAmbientLightColor;
uniform 	float _ES_CharacterMainLightRatio;
uniform 	float _ES_CharacterAmbientLightRatio;
uniform 	float _ES_CharacterColorTone;
uniform 	float _ES_CharacterPointLightWholeIntensity;
uniform 	vec4 mhy_AvatarLightDir;
uniform 	vec4 mhy_CharacterPointLightColor;
uniform 	vec4 mhy_CharacterOverrideLightDir;
uniform 	mediump vec4 _FlowMapColor01;
uniform 	mediump float _FlowScale01;
uniform 	mediump float _FlowMap01_Uspeed;
uniform 	vec4 _FlowMap01_ST;
uniform 	mediump float _FlowMap01_Vspeed;
uniform 	mediump float _Noise_Uspeed;
uniform 	vec4 _Noise_ST;
uniform 	mediump float _Noise_Vspeed;
uniform 	mediump float _NoiseFlowIntensity;
uniform 	mediump float _MaskOffset01;
uniform 	mediump float _NoiseIntensity;
uniform 	mediump float _Mask01_Power;
uniform 	mediump vec4 _FlowMapColor02;
uniform 	mediump float _FlowScale02;
uniform 	mediump float _FlowMap02_Uspeed;
uniform 	vec4 _FlowMap02_ST;
uniform 	mediump float _FlowMap02_Vspeed;
uniform 	mediump float _MaskOffset02;
uniform 	mediump float _Mask02_Power;
uniform 	mediump float _DissolveNoise_Uspeed;
uniform 	vec4 _DissovleNoise_ST;
uniform 	mediump float _DissolveNoise_Vspeed;
uniform 	mediump float _DissovleNoiseScale;
uniform 	mediump float _Dissovle;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _Noise;
uniform lowp sampler2D _FlowMap01;
uniform lowp sampler2D _Mask01;
uniform lowp sampler2D _FlowMap02;
uniform lowp sampler2D _Mask02;
uniform lowp sampler2D _DissovleNoise;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp float vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
lowp float u_xlat10_2;
bvec4 u_xlatb2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
lowp float u_xlat10_3;
int u_xlati3;
bool u_xlatb3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec2 u_xlat16_7;
mediump vec3 u_xlat16_8;
vec3 u_xlat9;
bool u_xlatb10;
vec3 u_xlat12;
mediump vec3 u_xlat16_12;
lowp float u_xlat10_12;
int u_xlati12;
bool u_xlatb12;
vec3 u_xlat13;
mediump vec3 u_xlat16_13;
mediump float u_xlat16_14;
mediump vec2 u_xlat16_15;
mediump vec2 u_xlat16_16;
bvec2 u_xlatb20;
vec2 u_xlat22;
bool u_xlatb22;
mediump vec2 u_xlat16_25;
float u_xlat30;
bool u_xlatb30;
float u_xlat32;
mediump float u_xlat16_32;
lowp float u_xlat10_32;
int u_xlati32;
bool u_xlatb32;
float u_xlat33;
mediump float u_xlat16_34;
mediump float u_xlat16_35;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseClipPlane));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseClipPlane);
#endif
    u_xlat16_1.x = vs_COLOR0.w + -0.00999999978;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(u_xlat16_1.x<0.0);
#else
    u_xlatb10 = u_xlat16_1.x<0.0;
#endif
    u_xlatb0 = u_xlatb0 && u_xlatb10;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(_DitherAlpha<0.949999988);
#else
        u_xlatb0 = _DitherAlpha<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb20.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb20.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb20.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = _DitherAlpha * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + -0.00999999978;
#ifdef UNITY_ADRENO_ES3
            u_xlatb0 = !!(u_xlat0.x<0.0);
#else
            u_xlatb0 = u_xlat0.x<0.0;
#endif
            if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(0.5<mhy_CharacterOverrideLightDir.w);
#else
    u_xlatb2.x = 0.5<mhy_CharacterOverrideLightDir.w;
#endif
    u_xlat3.x = mhy_CharacterOverrideLightDir.x;
    u_xlat3.yz = (-mhy_CharacterOverrideLightDir.yz);
    u_xlat2.xyz = (u_xlatb2.x) ? u_xlat3.xyz : mhy_AvatarLightDir.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat30) + u_xlat2.xyz;
    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
    u_xlat2.xy = dFdx(vs_TEXCOORD0.xy);
    u_xlat22.xy = dFdy(vs_TEXCOORD0.xy);
    u_xlat2.xy = u_xlat22.xy + u_xlat2.xy;
    u_xlat22.xy = (-u_xlat2.xy) * vec2(0.25, 0.25) + vs_TEXCOORD0.xy;
    u_xlat2.xy = u_xlat2.xy * vec2(0.25, 0.25) + vs_TEXCOORD0.xy;
    u_xlat2.xy = (int(gl_SampleID) != 0) ? u_xlat22.xy : u_xlat2.xy;
    u_xlat1 = textureLod(_MainTex, u_xlat2.xy, 0.0);
    u_xlat16_4.xyz = u_xlat1.xyz * _MainTexTintColor.xyz;
    u_xlat16_5.xyz = u_xlat16_4.xyz + u_xlat16_4.xyz;
    u_xlat16_6.xyz = u_xlat1.xyz + _MainTexTintColor.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_6.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(-4.0, -4.0, -4.0) + u_xlat16_6.xyz;
    u_xlatb2 = lessThan(vec4(0.5, 0.5, 0.5, 0.00999999978), u_xlat1);
    u_xlat16_6.x = (u_xlatb2.x) ? float(1.0) : float(0.0);
    u_xlat16_6.y = (u_xlatb2.y) ? float(1.0) : float(0.0);
    u_xlat16_6.z = (u_xlatb2.z) ? float(1.0) : float(0.0);
    u_xlat16_4.xyz = u_xlat16_4.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat16_4.xyz = u_xlat16_6.xyz * u_xlat16_4.xyz + u_xlat16_5.xyz;
    u_xlatb2.xyz = equal(vec4(_MainTexAlphaUse), vec4(3.0, 1.0, 2.0, 0.0)).xyz;
    u_xlat30 = u_xlat1.w * _FaceBlushStrength;
    u_xlat16_3.xyz = (-u_xlat16_4.xyz) + _FaceBlushColor.xyz;
    u_xlat3.xyz = vec3(u_xlat30) * u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat16_4.xyz = (u_xlatb2.x) ? u_xlat3.xyz : u_xlat16_4.xyz;
    u_xlat16_34 = u_xlat1.w + (-_MainTexAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(u_xlat16_34<0.0);
#else
    u_xlatb30 = u_xlat16_34<0.0;
#endif
    u_xlatb30 = u_xlatb2.y && u_xlatb30;
    if((int(u_xlatb30) * int(0xffffffffu))!=0){discard;}
    u_xlat16_4.xyz = u_xlat16_4.xyz * _Color.xyz;
    u_xlatb30 = u_xlatb2.w && u_xlatb2.z;
    u_xlat16_34 = (u_xlatb30) ? u_xlat1.w : 0.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorAO));
#else
    u_xlatb2.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorAO);
#endif
    u_xlat16_5.x = vs_COLOR0.x * 0.5;
    u_xlat16_5.x = (u_xlatb2.x) ? u_xlat16_5.x : 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat16_5.x<0.0500000007);
#else
    u_xlatb12 = u_xlat16_5.x<0.0500000007;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(0.949999988<u_xlat16_5.x);
#else
    u_xlatb22 = 0.949999988<u_xlat16_5.x;
#endif
    u_xlat32 = u_xlat16_5.x + vs_TEXCOORD1.w;
    u_xlat32 = u_xlat32 * 0.5;
    u_xlat16_5.x = (u_xlatb22) ? 1.0 : u_xlat32;
    u_xlat16_5.x = (u_xlatb12) ? 0.0 : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb2.x) ? u_xlat16_5.x : vs_TEXCOORD1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(u_xlat16_5.x<_LightArea);
#else
    u_xlatb2.x = u_xlat16_5.x<_LightArea;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition));
#else
    u_xlatb12 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition);
#endif
    u_xlat16_5.x = (-u_xlat16_5.x) + _LightArea;
    u_xlat16_5.x = u_xlat16_5.x / _ShadowTransitionRange;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(u_xlat16_5.x>=1.0);
#else
    u_xlatb22 = u_xlat16_5.x>=1.0;
#endif
    u_xlat16_32 = u_xlat16_5.x + 0.00999999978;
    u_xlat16_32 = log2(u_xlat16_32);
    u_xlat32 = u_xlat16_32 * _ShadowTransitionSoftness;
    u_xlat32 = exp2(u_xlat32);
    u_xlat32 = min(u_xlat32, 1.0);
    u_xlat22.x = (u_xlatb22) ? 1.0 : u_xlat32;
    u_xlat22.x = (u_xlatb12) ? u_xlat22.x : 1.0;
    u_xlat22.x = u_xlatb2.x ? u_xlat22.x : float(0.0);
#ifdef UNITY_ADRENO_ES3
    { bool cond = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(vs_TEXCOORD4); u_xlati32 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati32 = int((vec4(0.0, 0.0, 0.0, 0.0)!=vec4(vs_TEXCOORD4)) ? 0xFFFFFFFFu : uint(0u));
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex));
#else
    u_xlatb3 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex);
#endif
    u_xlat16_13.xyz = vec3(_FirstShadowMultColor.xxyz.y + (-_CoolShadowMultColor.x), _FirstShadowMultColor.xxyz.z + (-_CoolShadowMultColor.y), float(_FirstShadowMultColor.z) + (-_CoolShadowMultColor.z));
    u_xlat13.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_13.xyz + _CoolShadowMultColor.xyz;
    u_xlat16_5.xyz = (bool(u_xlatb3)) ? u_xlat13.xyz : vec3(_FirstShadowMultColor.x, _FirstShadowMultColor.y, _FirstShadowMultColor.z);
    u_xlati3 = ~u_xlati32;
    u_xlati12 = u_xlatb12 ? u_xlati3 : int(0);
    u_xlat16_3.xyz = u_xlat16_5.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat3.xyz = u_xlat22.xxx * u_xlat16_3.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_5.xyz = (int(u_xlati12) != 0) ? u_xlat3.xyz : u_xlat16_5.xyz;
    u_xlat16_35 = dot(vs_TEXCOORD1.xyz, u_xlat0.xyz);
    u_xlat16_35 = max(u_xlat16_35, 0.00100000005);
    u_xlat16_35 = log2(u_xlat16_35);
    u_xlat16_35 = u_xlat16_35 * _Shininess;
    u_xlat16_35 = exp2(u_xlat16_35);
    u_xlat16_6.xyz = vec3(u_xlat16_35) * _SpecularColor.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(_SpecMulti);
    u_xlat16_4.xyz = vec3(u_xlat16_4.x * _EmissionColor_MHY.xxyz.y, u_xlat16_4.y * _EmissionColor_MHY.xxyz.z, u_xlat16_4.z * float(_EmissionColor_MHY.z));
    u_xlati0 = int(uint(u_xlatb2.x) * 0xffffffffu | uint(u_xlati32));
    u_xlat2.xyz = u_xlat1.xyz * u_xlat16_5.xyz;
    u_xlat0.xyz = (int(u_xlati0) != 0) ? u_xlat2.xyz : u_xlat1.xyz;
    u_xlat0.xyz = u_xlat16_6.xyz * vec3(0.5, 0.5, 0.5) + u_xlat0.xyz;
    u_xlat2.xy = vs_TEXCOORD0.zw * _FlowMap01_ST.xy + _FlowMap01_ST.zw;
    u_xlat16_5.x = _Time.y * _FlowMap01_Uspeed + u_xlat2.x;
    u_xlat16_5.y = _Time.y * _FlowMap01_Vspeed + u_xlat2.y;
    u_xlat2.xy = vs_TEXCOORD0.zw * _Noise_ST.xy + _Noise_ST.zw;
    u_xlat16_6.x = _Time.y * _Noise_Uspeed + u_xlat2.x;
    u_xlat16_6.y = _Time.y * _Noise_Vspeed + u_xlat2.y;
    u_xlat10_2 = textureLod(_Noise, u_xlat16_6.xy, 0.0).x;
    u_xlat16_25.x = _MaskOffset01 * 1.39999998 + -0.699999988;
    u_xlat16_16.x = u_xlat10_2 * _NoiseIntensity;
    u_xlat12.xy = vs_TEXCOORD0.zw * _FlowMap02_ST.xy + _FlowMap02_ST.zw;
    u_xlat16_7.x = _Time.y * _FlowMap02_Uspeed + u_xlat12.x;
    u_xlat16_7.y = _Time.y * _FlowMap02_Vspeed + u_xlat12.y;
    u_xlat16_25.y = _MaskOffset02 * 1.39999998 + -0.699999988;
    u_xlat16_8.xyz = _FlowMapColor01.xyz * vec3(_FlowScale01);
    u_xlat16_5.xy = vec2(u_xlat10_2) * vec2(vec2(_NoiseFlowIntensity, _NoiseFlowIntensity)) + u_xlat16_5.xy;
    u_xlat10_12 = textureLod(_FlowMap01, u_xlat16_5.xy, 0.0).x;
    u_xlat16_12.xyz = vec3(u_xlat10_12) * u_xlat16_8.xyz;
    u_xlat16_5.x = (-vs_TEXCOORD0.z) + 1.0;
    u_xlat16_1.xz = u_xlat16_25.xy + u_xlat16_5.xx;
    u_xlat16_1.yw = vec2(u_xlat10_2) * vec2(vec2(_NoiseIntensity, _NoiseIntensity)) + (-vs_TEXCOORD0.ww);
    u_xlat16_16.y = 1.0;
    u_xlat16_15.xy = u_xlat16_1.xy + u_xlat16_16.xy;
    u_xlat10_3 = textureLod(_Mask01, u_xlat16_15.xy, 0.0).x;
    u_xlat16_3.x = max(u_xlat10_3, 9.99999975e-05);
    u_xlat16_3.x = log2(u_xlat16_3.x);
    u_xlat16_3.x = u_xlat16_3.x * _Mask01_Power;
    u_xlat16_3.x = exp2(u_xlat16_3.x);
    u_xlat16_8.xyz = _FlowMapColor02.xyz * vec3(_FlowScale02);
    u_xlat16_15.xy = vec2(u_xlat10_2) * vec2(vec2(_NoiseFlowIntensity, _NoiseFlowIntensity)) + u_xlat16_7.xy;
    u_xlat10_2 = textureLod(_FlowMap02, u_xlat16_15.xy, 0.0).x;
    u_xlat16_13.xyz = vec3(u_xlat10_2) * u_xlat16_8.xyz;
    u_xlat16_5.xy = vec2(u_xlat16_1.z + u_xlat16_16.x, u_xlat16_1.w + u_xlat16_16.y);
    u_xlat10_2 = textureLod(_Mask02, u_xlat16_5.xy, 0.0).x;
    u_xlat16_2.x = max(u_xlat10_2, 9.99999975e-05);
    u_xlat16_2.x = log2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * _Mask02_Power;
    u_xlat16_2.x = exp2(u_xlat16_2.x);
    u_xlat16_13.xyz = u_xlat16_2.xxx * u_xlat16_13.xyz;
    u_xlat16_2.xyz = u_xlat16_12.xyz * u_xlat16_3.xxx + u_xlat16_13.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(_EmissionScaler) + u_xlat16_2.xyz;
    u_xlat3.xyz = (-u_xlat0.xyz) + u_xlat16_4.xyz;
    u_xlat3.xyz = vec3(u_xlat16_34) * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat9.xy = vs_TEXCOORD0.zw * _DissovleNoise_ST.xy + _DissovleNoise_ST.zw;
    u_xlat16_4.x = _Time.y * _DissolveNoise_Uspeed + u_xlat9.x;
    u_xlat16_4.y = _Time.y * _DissolveNoise_Vspeed + u_xlat9.y;
    u_xlat10_32 = textureLod(_DissovleNoise, u_xlat16_4.xy, 0.0).x;
    u_xlat32 = u_xlat10_32 * _DissovleNoiseScale + vs_TEXCOORD0.z;
#ifdef UNITY_ADRENO_ES3
    u_xlatb32 = !!(_Dissovle>=u_xlat32);
#else
    u_xlatb32 = _Dissovle>=u_xlat32;
#endif
    u_xlat0.xyz = (bool(u_xlatb30)) ? u_xlat3.xyz : u_xlat0.xyz;
    u_xlat0.xyz = u_xlat16_2.xyz + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(0.00999999978<u_xlat16_34);
#else
    u_xlatb30 = 0.00999999978<u_xlat16_34;
#endif
    if((int(u_xlatb32) * int(0xffffffffu))==0){discard;}
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn));
#else
    u_xlatb2.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn);
#endif
    u_xlat12.xyz = u_xlat0.xyz * vec3(vec3(_ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness));
    u_xlat3.xyz = vec3(vec3(_ES_CharacterPointLightWholeIntensity, _ES_CharacterPointLightWholeIntensity, _ES_CharacterPointLightWholeIntensity)) * mhy_CharacterPointLightColor.xyz;
    u_xlat9.xyz = _ES_CharacterMainLightColor.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat9.xyz = min(max(u_xlat9.xyz, 0.0), 1.0);
#else
    u_xlat9.xyz = clamp(u_xlat9.xyz, 0.0, 1.0);
#endif
    u_xlat33 = (-mhy_CharacterPointLightColor.w) + 1.0;
    u_xlat3.xyz = u_xlat9.xyz * vec3(u_xlat33) + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat3.xyz = vec3(vec3(_ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio)) * u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat12.xyz = u_xlat12.xyz * u_xlat3.xyz;
    u_xlat3.xyz = _ES_CharacterAmbientLightColor.xyz * vec3(_ES_CharacterAmbientLightRatio);
    u_xlat16_4.xyz = u_xlat12.xyz * vec3(10.0, 10.0, 10.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.xyz = min(max(u_xlat16_4.xyz, 0.0), 1.0);
#else
    u_xlat16_4.xyz = clamp(u_xlat16_4.xyz, 0.0, 1.0);
#endif
    u_xlat12.xyz = u_xlat3.xyz * u_xlat16_4.xyz + u_xlat12.xyz;
    u_xlat16_4.xyz = (u_xlatb2.x) ? u_xlat12.xyz : u_xlat0.xyz;
    u_xlat16_5.xyz = u_xlat0.xyz + (-u_xlat16_4.xyz);
    u_xlat16_5.xyz = vec3(u_xlat16_34) * u_xlat16_5.xyz + u_xlat16_4.xyz;
    u_xlat16_0.xyz = (bool(u_xlatb30)) ? u_xlat16_5.xyz : u_xlat16_4.xyz;
    u_xlat16_4.x = max(u_xlat16_0.z, u_xlat16_0.y);
    u_xlat16_1.w = max(u_xlat16_0.x, u_xlat16_4.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(1.0<u_xlat16_1.w);
#else
    u_xlatb2.x = 1.0<u_xlat16_1.w;
#endif
    u_xlat16_1.xyz = u_xlat16_0.xyz / u_xlat16_1.www;
    u_xlat16_0.w = 1.0;
    u_xlat16_0 = (u_xlatb2.x) ? u_xlat16_1 : u_xlat16_0;
    u_xlat16_4.x = min(u_xlat16_0.w, 1.10000002);
    u_xlat16_14 = u_xlat16_0.w + (-u_xlat16_4.x);
    u_xlat16_4.x = u_xlat16_34 * u_xlat16_14 + u_xlat16_4.x;
    u_xlat16_2.x = u_xlat16_4.x * 0.0500000007;
    SV_Target0.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb12 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_4.x = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb12) ? u_xlat16_4.x : 0.0;
    SV_Target0.w = 0.0156862754;
    SV_Target1.xyz = u_xlat16_0.xyz;
    SV_Target1.w = u_xlat16_2.x;
    SV_Target2.xy = vec2(0.0, 0.0);
    SV_Target2.w = vs_TEXCOORD4;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MSAA_INTERPOLATION" "TOON_SPECULAR_ON" "TOON_LIGHTMAP_ON" "MAIN_TEX_COLORING_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _MainTex_ST;
uniform 	float _CharacterAmbientSensorShadowOn;
uniform 	vec4 _AmbientSensorUVs;
uniform 	float _UseClipPlane;
uniform 	float _ClipPlaneWorld;
uniform 	vec4 _ClipPlane;
uniform 	vec4 mhy_AvatarLightDir;
uniform 	vec4 mhy_CharacterOverrideLightDir;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
struct unity_Builtins1Array_Type {
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw1 {
	unity_Builtins1Array_Type unity_Builtins1Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform lowp sampler2D _CharacterAmbientSensorTex;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp float vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD6;
flat out highp uint vs_SV_InstanceID0;
vec3 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump float u_xlat16_4;
vec3 u_xlat5;
int u_xlati5;
bool u_xlatb5;
float u_xlat6;
mediump float u_xlat16_9;
float u_xlat10;
bool u_xlatb10;
bool u_xlatb11;
float u_xlat15;
bool u_xlatb15;
float u_xlat16;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
#ifdef UNITY_ADRENO_ES3
    u_xlatb5 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseClipPlane));
#else
    u_xlatb5 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseClipPlane);
#endif
    if(u_xlatb5){
#ifdef UNITY_ADRENO_ES3
        u_xlatb5 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ClipPlaneWorld));
#else
        u_xlatb5 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ClipPlaneWorld);
#endif
        if(u_xlatb5){
            u_xlati5 = u_xlati0 << 2;
#ifdef UNITY_ADRENO_ES3
            u_xlatb10 = !!(abs(_ClipPlane.w)<0.00100000005);
#else
            u_xlatb10 = abs(_ClipPlane.w)<0.00100000005;
#endif
            u_xlat1.xyz = _ClipPlane.www * _ClipPlane.xyz;
            u_xlat1.xyz = (bool(u_xlatb10)) ? vec3(0.0, 0.0, 0.0) : u_xlat1.xyz;
            u_xlat2 = u_xlat1.yyyy * unity_Builtins1Array[u_xlati5 / 4].hlslcc_mtx4x4unity_WorldToObjectArray[1];
            u_xlat2 = unity_Builtins1Array[u_xlati5 / 4].hlslcc_mtx4x4unity_WorldToObjectArray[0] * u_xlat1.xxxx + u_xlat2;
            u_xlat1 = unity_Builtins1Array[u_xlati5 / 4].hlslcc_mtx4x4unity_WorldToObjectArray[2] * u_xlat1.zzzz + u_xlat2;
            u_xlat1 = u_xlat1 + unity_Builtins1Array[u_xlati5 / 4].hlslcc_mtx4x4unity_WorldToObjectArray[3];
            u_xlat1.xyz = u_xlat1.xyz / u_xlat1.www;
            u_xlat2.xyz = _ClipPlane.yyy * unity_Builtins1Array[u_xlati5 / 4].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz;
            u_xlat2.xyz = unity_Builtins1Array[u_xlati5 / 4].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz * _ClipPlane.xxx + u_xlat2.xyz;
            u_xlat5.xyz = unity_Builtins1Array[u_xlati5 / 4].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz * _ClipPlane.zzz + u_xlat2.xyz;
            u_xlat1.x = dot(u_xlat1.xyz, u_xlat5.xyz);
            u_xlat6 = dot(in_POSITION0.xyz, u_xlat5.xyz);
#ifdef UNITY_ADRENO_ES3
            u_xlatb11 = !!(u_xlat6<u_xlat1.x);
#else
            u_xlatb11 = u_xlat6<u_xlat1.x;
#endif
            u_xlat1.x = (-u_xlat1.x) + u_xlat6;
            u_xlat2.xyz = (-u_xlat1.xxx) * u_xlat5.xyz + in_POSITION0.xyz;
            u_xlat2.w = 0.0;
            u_xlat3.xyz = in_POSITION0.xyz;
            u_xlat3.w = in_COLOR0.w;
            u_xlat1 = (bool(u_xlatb11)) ? u_xlat2 : u_xlat3;
            u_xlat16_4 = u_xlat1.w;
        } else {
            u_xlat5.x = dot(in_POSITION0.xyz, _ClipPlane.xyz);
            u_xlat10 = _ClipPlane.w + -0.00999999978;
#ifdef UNITY_ADRENO_ES3
            u_xlatb10 = !!(u_xlat5.x<u_xlat10);
#else
            u_xlatb10 = u_xlat5.x<u_xlat10;
#endif
            u_xlat5.x = u_xlat5.x + (-_ClipPlane.w);
            u_xlat2.xyz = (-u_xlat5.xxx) * _ClipPlane.xyz + in_POSITION0.xyz;
            u_xlat2.w = 0.0;
            u_xlat3.xyz = in_POSITION0.xyz;
            u_xlat3.w = in_COLOR0.w;
            u_xlat1 = (bool(u_xlatb10)) ? u_xlat2 : u_xlat3;
            u_xlat16_4 = u_xlat1.w;
        //ENDIF
        }
    } else {
        u_xlat1.xyz = in_POSITION0.xyz;
        u_xlat16_4 = in_COLOR0.w;
    //ENDIF
    }
    u_xlati0 = u_xlati0 << 2;
    u_xlat2.xyw = (-_WorldSpaceCameraPos.xyz) + unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat3.x = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].x;
    u_xlat3.y = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].x;
    u_xlat3.z = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].x;
    u_xlat3.w = u_xlat2.x;
    u_xlat1.w = 1.0;
    u_xlat5.x = dot(u_xlat3, u_xlat1);
    u_xlat3.x = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].y;
    u_xlat3.y = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].y;
    u_xlat3.z = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].y;
    u_xlat3.w = u_xlat2.y;
    u_xlat10 = dot(u_xlat3, u_xlat1);
    u_xlat2.x = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].z;
    u_xlat2.y = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].z;
    u_xlat2.z = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].z;
    u_xlat15 = dot(u_xlat2, u_xlat1);
    u_xlat2.x = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].w;
    u_xlat2.y = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].w;
    u_xlat2.z = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].w;
    u_xlat2.w = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3].w;
    u_xlat16 = dot(u_xlat2, u_xlat1);
    u_xlat2 = vec4(u_xlat10) * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat5.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVPZero[2] * vec4(u_xlat15) + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVPZero[3] * vec4(u_xlat16) + u_xlat2;
    u_xlat3 = u_xlat1.yyyy * unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat3 = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * u_xlat1.xxxx + u_xlat3;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * u_xlat1.zzzz + u_xlat3;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3] * in_POSITION0.wwww + u_xlat1;
    vs_TEXCOORD3.xyz = u_xlat1.xyz / u_xlat1.www;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.xz = u_xlat2.xw * vec2(0.5, 0.5);
    u_xlat5.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat1.w = u_xlat5.x * 0.5;
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat5.xyz = in_NORMAL0.yyy * unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat5.xyz = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_NORMAL0.xxx + u_xlat5.xyz;
    u_xlat0.xyz = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_NORMAL0.zzz + u_xlat5.xyz;
    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(0.5<mhy_CharacterOverrideLightDir.w);
#else
    u_xlatb15 = 0.5<mhy_CharacterOverrideLightDir.w;
#endif
    u_xlat1.x = mhy_CharacterOverrideLightDir.x;
    u_xlat1.yz = (-mhy_CharacterOverrideLightDir.yz);
    u_xlat1.xyz = (bool(u_xlatb15)) ? u_xlat1.xyz : mhy_AvatarLightDir.xyz;
    u_xlat16_9 = dot(u_xlat0.xyz, u_xlat1.xyz);
    vs_TEXCOORD1.w = u_xlat16_9 * 0.497500002 + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_CharacterAmbientSensorShadowOn));
#else
    u_xlatb15 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_CharacterAmbientSensorShadowOn);
#endif
    if(u_xlatb15){
        u_xlat15 = textureLod(_CharacterAmbientSensorTex, _AmbientSensorUVs.xy, 0.0).x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb15 = !!(0.5<u_xlat15);
#else
        u_xlatb15 = 0.5<u_xlat15;
#endif
        vs_TEXCOORD4 = u_xlatb15 ? 1.0 : float(0.0);
    } else {
        vs_TEXCOORD4 = 0.0;
    //ENDIF
    }
    gl_Position = u_xlat2;
    vs_COLOR0.xyz = in_COLOR0.xyz;
    vs_COLOR0.w = u_xlat16_4;
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    vs_TEXCOORD2.zw = u_xlat2.zw;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	mediump vec4 _Color;
uniform 	float _MainTexAlphaUse;
uniform 	mediump float _MainTexAlphaCutoff;
uniform 	mediump vec4 _MainTexTintColor;
uniform 	float _UseLightMapColorAO;
uniform 	float _UseVertexColorAO;
uniform 	mediump float _LightArea;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	float _UseCoolShadowColorOrTex;
uniform 	mediump vec3 _CoolShadowMultColor;
uniform 	float _UseShadowTransition;
uniform 	float _ShadowTransitionRange;
uniform 	float _ShadowTransitionSoftness;
uniform 	mediump vec3 _SpecularColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	float _FaceBlushStrength;
uniform 	mediump vec3 _FaceBlushColor;
uniform 	mediump float _EmissionScaler;
uniform 	mediump vec3 _EmissionColor_MHY;
uniform 	float _UseMaterial2;
uniform 	mediump vec3 _Color2;
uniform 	mediump vec3 _FirstShadowMultColor2;
uniform 	mediump vec3 _CoolShadowMultColor2;
uniform 	mediump float _Shininess2;
uniform 	mediump float _SpecMulti2;
uniform 	float _ShadowTransitionRange2;
uniform 	float _ShadowTransitionSoftness2;
uniform 	float _UseMaterial3;
uniform 	mediump vec3 _Color3;
uniform 	mediump vec3 _FirstShadowMultColor3;
uniform 	mediump vec3 _CoolShadowMultColor3;
uniform 	mediump float _Shininess3;
uniform 	mediump float _SpecMulti3;
uniform 	float _ShadowTransitionRange3;
uniform 	float _ShadowTransitionSoftness3;
uniform 	float _UseMaterial4;
uniform 	mediump vec3 _Color4;
uniform 	mediump vec3 _FirstShadowMultColor4;
uniform 	mediump vec3 _CoolShadowMultColor4;
uniform 	mediump float _Shininess4;
uniform 	mediump float _SpecMulti4;
uniform 	float _ShadowTransitionRange4;
uniform 	float _ShadowTransitionSoftness4;
uniform 	float _UseMaterial5;
uniform 	mediump vec3 _Color5;
uniform 	mediump vec3 _FirstShadowMultColor5;
uniform 	mediump vec3 _CoolShadowMultColor5;
uniform 	mediump float _Shininess5;
uniform 	mediump float _SpecMulti5;
uniform 	float _ShadowTransitionRange5;
uniform 	float _ShadowTransitionSoftness5;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _UseClipPlane;
uniform 	float _ES_CharacterAmbientLightOn;
uniform 	float _ES_CharacterAmbientBrightness;
uniform 	vec3 _ES_CharacterMainLightColor;
uniform 	vec3 _ES_CharacterAmbientLightColor;
uniform 	float _ES_CharacterMainLightRatio;
uniform 	float _ES_CharacterAmbientLightRatio;
uniform 	float _ES_CharacterColorTone;
uniform 	float _ES_CharacterPointLightWholeIntensity;
uniform 	vec4 mhy_AvatarLightDir;
uniform 	vec4 mhy_CharacterPointLightColor;
uniform 	vec4 mhy_CharacterOverrideLightDir;
uniform 	mediump vec4 _FlowMapColor01;
uniform 	mediump float _FlowScale01;
uniform 	mediump float _FlowMap01_Uspeed;
uniform 	vec4 _FlowMap01_ST;
uniform 	mediump float _FlowMap01_Vspeed;
uniform 	mediump float _Noise_Uspeed;
uniform 	vec4 _Noise_ST;
uniform 	mediump float _Noise_Vspeed;
uniform 	mediump float _NoiseFlowIntensity;
uniform 	mediump float _MaskOffset01;
uniform 	mediump float _NoiseIntensity;
uniform 	mediump float _Mask01_Power;
uniform 	mediump vec4 _FlowMapColor02;
uniform 	mediump float _FlowScale02;
uniform 	mediump float _FlowMap02_Uspeed;
uniform 	vec4 _FlowMap02_ST;
uniform 	mediump float _FlowMap02_Vspeed;
uniform 	mediump float _MaskOffset02;
uniform 	mediump float _Mask02_Power;
uniform 	mediump float _DissolveNoise_Uspeed;
uniform 	vec4 _DissovleNoise_ST;
uniform 	mediump float _DissolveNoise_Vspeed;
uniform 	mediump float _DissovleNoiseScale;
uniform 	mediump float _Dissovle;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _Noise;
uniform lowp sampler2D _FlowMap01;
uniform lowp sampler2D _Mask01;
uniform lowp sampler2D _FlowMap02;
uniform lowp sampler2D _Mask02;
uniform lowp sampler2D _DissovleNoise;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp float vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
vec3 u_xlat2;
mediump vec4 u_xlat16_2;
lowp vec4 u_xlat10_2;
bool u_xlatb2;
vec3 u_xlat3;
mediump float u_xlat16_3;
lowp float u_xlat10_3;
bvec4 u_xlatb3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
bvec4 u_xlatb5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
mediump vec3 u_xlat16_7;
bvec3 u_xlatb7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
vec3 u_xlat11;
bool u_xlatb11;
vec3 u_xlat13;
bool u_xlatb13;
float u_xlat14;
mediump vec3 u_xlat16_14;
int u_xlati14;
mediump float u_xlat16_15;
mediump vec3 u_xlat16_17;
mediump vec3 u_xlat16_19;
bvec2 u_xlatb22;
vec2 u_xlat24;
int u_xlati25;
bool u_xlatb25;
float u_xlat33;
mediump float u_xlat16_33;
lowp float u_xlat10_33;
bool u_xlatb33;
float u_xlat35;
bool u_xlatb35;
float u_xlat36;
int u_xlati36;
mediump float u_xlat16_37;
mediump float u_xlat16_39;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseClipPlane));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseClipPlane);
#endif
    u_xlat16_1.x = vs_COLOR0.w + -0.00999999978;
#ifdef UNITY_ADRENO_ES3
    u_xlatb11 = !!(u_xlat16_1.x<0.0);
#else
    u_xlatb11 = u_xlat16_1.x<0.0;
#endif
    u_xlatb0 = u_xlatb0 && u_xlatb11;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(_DitherAlpha<0.949999988);
#else
        u_xlatb0 = _DitherAlpha<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb22.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb22.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb22.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = _DitherAlpha * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + -0.00999999978;
#ifdef UNITY_ADRENO_ES3
            u_xlatb0 = !!(u_xlat0.x<0.0);
#else
            u_xlatb0 = u_xlat0.x<0.0;
#endif
            if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(0.5<mhy_CharacterOverrideLightDir.w);
#else
    u_xlatb2 = 0.5<mhy_CharacterOverrideLightDir.w;
#endif
    u_xlat3.x = mhy_CharacterOverrideLightDir.x;
    u_xlat3.yz = (-mhy_CharacterOverrideLightDir.yz);
    u_xlat2.xyz = (bool(u_xlatb2)) ? u_xlat3.xyz : mhy_AvatarLightDir.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat33) + u_xlat2.xyz;
    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat0.xyz = vec3(u_xlat33) * u_xlat0.xyz;
    u_xlat2.xy = dFdx(vs_TEXCOORD0.xy);
    u_xlat24.xy = dFdy(vs_TEXCOORD0.xy);
    u_xlat2.xy = u_xlat24.xy + u_xlat2.xy;
    u_xlat24.xy = (-u_xlat2.xy) * vec2(0.25, 0.25) + vs_TEXCOORD0.xy;
    u_xlat2.xy = u_xlat2.xy * vec2(0.25, 0.25) + vs_TEXCOORD0.xy;
    u_xlat2.xy = (int(gl_SampleID) != 0) ? u_xlat24.xy : u_xlat2.xy;
    u_xlat1 = textureLod(_MainTex, u_xlat2.xy, 0.0);
    u_xlat16_4.xyz = u_xlat1.xyz * _MainTexTintColor.xyz;
    u_xlat16_5.xyz = u_xlat16_4.xyz + u_xlat16_4.xyz;
    u_xlat16_6.xyz = u_xlat1.xyz + _MainTexTintColor.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_6.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(-4.0, -4.0, -4.0) + u_xlat16_6.xyz;
    u_xlatb3 = lessThan(vec4(0.5, 0.5, 0.5, 0.00999999978), u_xlat1);
    u_xlat16_6.x = (u_xlatb3.x) ? float(1.0) : float(0.0);
    u_xlat16_6.y = (u_xlatb3.y) ? float(1.0) : float(0.0);
    u_xlat16_6.z = (u_xlatb3.z) ? float(1.0) : float(0.0);
    u_xlat16_4.xyz = u_xlat16_4.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat16_4.xyz = u_xlat16_6.xyz * u_xlat16_4.xyz + u_xlat16_5.xyz;
    u_xlatb3.xyz = equal(vec4(_MainTexAlphaUse), vec4(3.0, 1.0, 2.0, 0.0)).xyz;
    u_xlat33 = u_xlat1.w * _FaceBlushStrength;
    u_xlat16_7.xyz = (-u_xlat16_4.xyz) + _FaceBlushColor.xyz;
    u_xlat7.xyz = vec3(u_xlat33) * u_xlat16_7.xyz + u_xlat16_4.xyz;
    u_xlat16_4.xyz = (u_xlatb3.x) ? u_xlat7.xyz : u_xlat16_4.xyz;
    u_xlat16_37 = u_xlat1.w + (-_MainTexAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(u_xlat16_37<0.0);
#else
    u_xlatb33 = u_xlat16_37<0.0;
#endif
    u_xlatb33 = u_xlatb3.y && u_xlatb33;
    if((int(u_xlatb33) * int(0xffffffffu))!=0){discard;}
    u_xlat10_2 = textureLod(_LightMapTex, u_xlat2.xy, 0.0);
    u_xlatb3.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseLightMapColorAO, _UseVertexColorAO, _UseLightMapColorAO, _UseLightMapColorAO)).xy;
    u_xlat16_37 = (u_xlatb3.x) ? u_xlat10_2.y : 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseMaterial2));
#else
    u_xlatb33 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseMaterial2);
#endif
    u_xlatb5 = greaterThanEqual(u_xlat10_2.wwww, vec4(0.800000012, 0.400000006, 0.200000003, 0.600000024));
    u_xlatb33 = u_xlatb33 && u_xlatb5.x;
    u_xlat33 = (u_xlatb33) ? 2.0 : 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb13 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseMaterial3));
#else
    u_xlatb13 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseMaterial3);
#endif
    u_xlatb13 = u_xlatb5.y && u_xlatb13;
    u_xlatb7.xyz = lessThan(u_xlat10_2.wwww, vec4(0.600000024, 0.400000006, 0.800000012, 0.0)).xyz;
    u_xlatb13 = u_xlatb13 && u_xlatb7.x;
    u_xlat33 = (u_xlatb13) ? 3.0 : u_xlat33;
#ifdef UNITY_ADRENO_ES3
    u_xlatb13 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseMaterial4));
#else
    u_xlatb13 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseMaterial4);
#endif
    u_xlatb13 = u_xlatb5.z && u_xlatb13;
    u_xlatb13 = u_xlatb7.y && u_xlatb13;
    u_xlat33 = (u_xlatb13) ? 4.0 : u_xlat33;
#ifdef UNITY_ADRENO_ES3
    u_xlatb13 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseMaterial5));
#else
    u_xlatb13 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseMaterial5);
#endif
    u_xlatb13 = u_xlatb5.w && u_xlatb13;
    u_xlatb13 = u_xlatb7.z && u_xlatb13;
    u_xlat33 = (u_xlatb13) ? 5.0 : u_xlat33;
    u_xlatb5 = equal(vec4(u_xlat33), vec4(2.0, 3.0, 4.0, 5.0));
    u_xlat16_6.xyz = (u_xlatb5.x) ? _Color2.xyz : _Color.xyz;
    u_xlat16_6.xyz = (u_xlatb5.y) ? _Color3.xyz : u_xlat16_6.xyz;
    u_xlat16_6.xyz = (u_xlatb5.z) ? _Color4.xyz : u_xlat16_6.xyz;
    u_xlat16_6.xyz = (u_xlatb5.w) ? _Color5.xyz : u_xlat16_6.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_6.xyz;
    u_xlatb13 = u_xlatb3.w && u_xlatb3.z;
    u_xlat16_6.x = (u_xlatb13) ? u_xlat1.w : 0.0;
    u_xlat16_17.x = u_xlat16_37 * vs_COLOR0.x;
    u_xlat16_37 = (u_xlatb3.y) ? u_xlat16_17.x : u_xlat16_37;
#ifdef UNITY_ADRENO_ES3
    u_xlatb35 = !!(u_xlat16_37<0.0500000007);
#else
    u_xlatb35 = u_xlat16_37<0.0500000007;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb3.x = !!(0.949999988<u_xlat16_37);
#else
    u_xlatb3.x = 0.949999988<u_xlat16_37;
#endif
    u_xlat14 = u_xlat16_37 + vs_TEXCOORD1.w;
    u_xlat14 = u_xlat14 * 0.5;
    u_xlat16_37 = (u_xlatb3.x) ? 1.0 : u_xlat14;
    u_xlat16_37 = (u_xlatb35) ? 0.0 : u_xlat16_37;
#ifdef UNITY_ADRENO_ES3
    u_xlatb35 = !!(u_xlat16_37<_LightArea);
#else
    u_xlatb35 = u_xlat16_37<_LightArea;
#endif
    if(u_xlatb35){
#ifdef UNITY_ADRENO_ES3
        u_xlatb35 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition));
#else
        u_xlatb35 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition);
#endif
#ifdef UNITY_ADRENO_ES3
        u_xlatb3.x = !!(u_xlat33==1.0);
#else
        u_xlatb3.x = u_xlat33==1.0;
#endif
        u_xlat16_8.x = (u_xlatb3.x) ? _ShadowTransitionRange : 0.0;
        u_xlat16_8.y = (u_xlatb3.x) ? _ShadowTransitionSoftness : 0.0;
        u_xlat16_17.xy = (u_xlatb5.x) ? vec2(_ShadowTransitionRange2, _ShadowTransitionSoftness2) : u_xlat16_8.xy;
        u_xlat16_17.xy = (u_xlatb5.y) ? vec2(_ShadowTransitionRange3, _ShadowTransitionSoftness3) : u_xlat16_17.xy;
        u_xlat16_17.xy = (u_xlatb5.z) ? vec2(_ShadowTransitionRange4, _ShadowTransitionSoftness4) : u_xlat16_17.xy;
        u_xlat16_17.xy = (u_xlatb5.w) ? vec2(_ShadowTransitionRange5, _ShadowTransitionSoftness5) : u_xlat16_17.xy;
        u_xlat16_37 = (-u_xlat16_37) + _LightArea;
        u_xlat16_37 = u_xlat16_37 / u_xlat16_17.x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb3.x = !!(u_xlat16_37>=1.0);
#else
        u_xlatb3.x = u_xlat16_37>=1.0;
#endif
        u_xlat16_14.x = u_xlat16_37 + 0.00999999978;
        u_xlat16_14.x = log2(u_xlat16_14.x);
        u_xlat16_14.x = u_xlat16_14.x * u_xlat16_17.y;
        u_xlat16_14.x = exp2(u_xlat16_14.x);
        u_xlat14 = min(u_xlat16_14.x, 1.0);
        u_xlat3.x = (u_xlatb3.x) ? 1.0 : u_xlat14;
        u_xlat35 = (u_xlatb35) ? u_xlat3.x : 1.0;
        u_xlat16_37 = 0.0;
    } else {
        u_xlat35 = 0.0;
        u_xlat16_37 = 1.0;
    //ENDIF
    }
    u_xlat3.x = (-u_xlat16_37) + 1.0;
#ifdef UNITY_ADRENO_ES3
    { bool cond = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(vs_TEXCOORD4); u_xlati14 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati14 = int((vec4(0.0, 0.0, 0.0, 0.0)!=vec4(vs_TEXCOORD4)) ? 0xFFFFFFFFu : uint(0u));
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(u_xlat33==1.0);
#else
    u_xlatb33 = u_xlat33==1.0;
#endif
    if(u_xlatb33){
#ifdef UNITY_ADRENO_ES3
        u_xlatb25 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex));
#else
        u_xlatb25 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex);
#endif
        u_xlat16_7.xyz = vec3(_FirstShadowMultColor.xxyz.y + (-_CoolShadowMultColor.x), _FirstShadowMultColor.xxyz.z + (-_CoolShadowMultColor.y), float(_FirstShadowMultColor.z) + (-_CoolShadowMultColor.z));
        u_xlat7.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_7.xyz + _CoolShadowMultColor.xyz;
        u_xlat16_17.xyz = (bool(u_xlatb25)) ? u_xlat7.xyz : vec3(_FirstShadowMultColor.x, _FirstShadowMultColor.y, _FirstShadowMultColor.z);
    } else {
        if(u_xlatb5.x){
#ifdef UNITY_ADRENO_ES3
            u_xlatb25 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex));
#else
            u_xlatb25 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex);
#endif
            u_xlat16_7.xyz = _FirstShadowMultColor2.xyz + (-_CoolShadowMultColor2.xyz);
            u_xlat7.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_7.xyz + _CoolShadowMultColor2.xyz;
            u_xlat16_17.xyz = (bool(u_xlatb25)) ? u_xlat7.xyz : _FirstShadowMultColor2.xyz;
        } else {
#ifdef UNITY_ADRENO_ES3
            u_xlatb25 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex));
#else
            u_xlatb25 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex);
#endif
            u_xlat16_7.xyz = _FirstShadowMultColor3.xyz + (-_CoolShadowMultColor3.xyz);
            u_xlat7.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_7.xyz + _CoolShadowMultColor3.xyz;
            u_xlat16_8.xyz = (bool(u_xlatb25)) ? u_xlat7.xyz : _FirstShadowMultColor3.xyz;
            u_xlat16_7.xyz = _FirstShadowMultColor4.xyz + (-_CoolShadowMultColor4.xyz);
            u_xlat7.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_7.xyz + _CoolShadowMultColor4.xyz;
            u_xlat16_9.xyz = (bool(u_xlatb25)) ? u_xlat7.xyz : _FirstShadowMultColor4.xyz;
            u_xlat16_7.xyz = _FirstShadowMultColor5.xyz + (-_CoolShadowMultColor5.xyz);
            u_xlat7.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_7.xyz + _CoolShadowMultColor5.xyz;
            u_xlat16_10.xyz = (bool(u_xlatb25)) ? u_xlat7.xyz : _FirstShadowMultColor5.xyz;
            u_xlat16_9.xyz = (u_xlatb5.z) ? u_xlat16_9.xyz : u_xlat16_10.xyz;
            u_xlat16_17.xyz = (u_xlatb5.y) ? u_xlat16_8.xyz : u_xlat16_9.xyz;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb25 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition));
#else
    u_xlatb25 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition);
#endif
    u_xlati36 = ~u_xlati14;
    u_xlati25 = u_xlatb25 ? u_xlati36 : int(0);
    u_xlat16_7.xyz = u_xlat16_17.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat7.xyz = vec3(u_xlat35) * u_xlat16_7.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_17.xyz = (int(u_xlati25) != 0) ? u_xlat7.xyz : u_xlat16_17.xyz;
    u_xlat16_37 = (u_xlatb5.z) ? _Shininess4 : _Shininess5;
    u_xlat16_8.x = (u_xlatb5.z) ? _SpecMulti4 : _SpecMulti5;
    u_xlat16_37 = (u_xlatb5.y) ? _Shininess3 : u_xlat16_37;
    u_xlat16_8.x = (u_xlatb5.y) ? _SpecMulti3 : u_xlat16_8.x;
    u_xlat16_37 = (u_xlatb5.x) ? _Shininess2 : u_xlat16_37;
    u_xlat16_8.x = (u_xlatb5.x) ? _SpecMulti2 : u_xlat16_8.x;
    u_xlat16_37 = (u_xlatb33) ? _Shininess : u_xlat16_37;
    u_xlat16_8.x = (u_xlatb33) ? _SpecMulti : u_xlat16_8.x;
    u_xlat16_19.x = dot(vs_TEXCOORD1.xyz, u_xlat0.xyz);
    u_xlat16_19.x = max(u_xlat16_19.x, 0.00100000005);
    u_xlat16_19.x = log2(u_xlat16_19.x);
    u_xlat16_37 = u_xlat16_37 * u_xlat16_19.x;
    u_xlat16_37 = exp2(u_xlat16_37);
    u_xlat0.x = (-u_xlat10_2.z) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat0.x<u_xlat16_37);
#else
    u_xlatb0 = u_xlat0.x<u_xlat16_37;
#endif
    u_xlat16_8.xyz = u_xlat16_8.xxx * _SpecularColor.xyz;
    u_xlat16_8.xyz = u_xlat10_2.xxx * u_xlat16_8.xyz;
    u_xlat16_8.xyz = (bool(u_xlatb0)) ? u_xlat16_8.xyz : vec3(0.0, 0.0, 0.0);
    u_xlat16_4.xyz = vec3(u_xlat16_4.x * _EmissionColor_MHY.xxyz.y, u_xlat16_4.y * _EmissionColor_MHY.xxyz.z, u_xlat16_4.z * float(_EmissionColor_MHY.z));
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat3.x==1.0);
#else
    u_xlatb0 = u_xlat3.x==1.0;
#endif
    u_xlati0 = int(uint(u_xlatb0) * 0xffffffffu | uint(u_xlati14));
    u_xlat11.xyz = u_xlat1.xyz * u_xlat16_17.xyz;
    u_xlat0.xyz = (int(u_xlati0) != 0) ? u_xlat11.xyz : u_xlat1.xyz;
    u_xlat0.xyz = u_xlat16_8.xyz + u_xlat0.xyz;
    u_xlat2.xz = vs_TEXCOORD0.zw * _FlowMap01_ST.xy + _FlowMap01_ST.zw;
    u_xlat16_8.x = _Time.y * _FlowMap01_Uspeed + u_xlat2.x;
    u_xlat16_8.y = _Time.y * _FlowMap01_Vspeed + u_xlat2.z;
    u_xlat2.xz = vs_TEXCOORD0.zw * _Noise_ST.xy + _Noise_ST.zw;
    u_xlat16_9.x = _Time.y * _Noise_Uspeed + u_xlat2.x;
    u_xlat16_9.y = _Time.y * _Noise_Vspeed + u_xlat2.z;
    u_xlat10_33 = textureLod(_Noise, u_xlat16_9.xy, 0.0).x;
    u_xlat16_37 = _MaskOffset01 * 1.39999998 + -0.699999988;
    u_xlat16_17.x = u_xlat10_33 * _NoiseIntensity;
    u_xlat2.xz = vs_TEXCOORD0.zw * _FlowMap02_ST.xy + _FlowMap02_ST.zw;
    u_xlat16_9.x = _Time.y * _FlowMap02_Uspeed + u_xlat2.x;
    u_xlat16_9.y = _Time.y * _FlowMap02_Vspeed + u_xlat2.z;
    u_xlat16_39 = _MaskOffset02 * 1.39999998 + -0.699999988;
    u_xlat16_10.xyz = _FlowMapColor01.xyz * vec3(_FlowScale01);
    u_xlat16_8.xy = vec2(u_xlat10_33) * vec2(vec2(_NoiseFlowIntensity, _NoiseFlowIntensity)) + u_xlat16_8.xy;
    u_xlat10_2.x = textureLod(_FlowMap01, u_xlat16_8.xy, 0.0).x;
    u_xlat16_2.xzw = u_xlat10_2.xxx * u_xlat16_10.xyz;
    u_xlat16_8.x = (-vs_TEXCOORD0.z) + 1.0;
    u_xlat16_1.x = u_xlat16_37 + u_xlat16_8.x;
    u_xlat16_1.yw = vec2(u_xlat10_33) * vec2(vec2(_NoiseIntensity, _NoiseIntensity)) + (-vs_TEXCOORD0.ww);
    u_xlat16_17.y = 1.0;
    u_xlat16_19.xy = u_xlat16_1.xy + u_xlat16_17.xy;
    u_xlat10_3 = textureLod(_Mask01, u_xlat16_19.xy, 0.0).x;
    u_xlat16_3 = max(u_xlat10_3, 9.99999975e-05);
    u_xlat16_3 = log2(u_xlat16_3);
    u_xlat16_3 = u_xlat16_3 * _Mask01_Power;
    u_xlat16_3 = exp2(u_xlat16_3);
    u_xlat16_19.xyz = _FlowMapColor02.xyz * vec3(_FlowScale02);
    u_xlat16_9.xy = vec2(u_xlat10_33) * vec2(vec2(_NoiseFlowIntensity, _NoiseFlowIntensity)) + u_xlat16_9.xy;
    u_xlat10_33 = textureLod(_FlowMap02, u_xlat16_9.xy, 0.0).x;
    u_xlat16_14.xyz = vec3(u_xlat10_33) * u_xlat16_19.xyz;
    u_xlat16_1.z = u_xlat16_39 + u_xlat16_8.x;
    u_xlat16_17.xy = vec2(u_xlat16_1.z + u_xlat16_17.x, u_xlat16_1.w + u_xlat16_17.y);
    u_xlat10_33 = textureLod(_Mask02, u_xlat16_17.xy, 0.0).x;
    u_xlat16_33 = max(u_xlat10_33, 9.99999975e-05);
    u_xlat16_33 = log2(u_xlat16_33);
    u_xlat16_33 = u_xlat16_33 * _Mask02_Power;
    u_xlat16_33 = exp2(u_xlat16_33);
    u_xlat16_14.xyz = vec3(u_xlat16_33) * u_xlat16_14.xyz;
    u_xlat16_2.xzw = u_xlat16_2.xzw * vec3(u_xlat16_3) + u_xlat16_14.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(_EmissionScaler) + u_xlat16_2.xzw;
    u_xlat3.xyz = (-u_xlat0.xyz) + u_xlat16_4.xyz;
    u_xlat3.xyz = u_xlat16_6.xxx * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat7.xy = vs_TEXCOORD0.zw * _DissovleNoise_ST.xy + _DissovleNoise_ST.zw;
    u_xlat16_4.x = _Time.y * _DissolveNoise_Uspeed + u_xlat7.x;
    u_xlat16_4.y = _Time.y * _DissolveNoise_Vspeed + u_xlat7.y;
    u_xlat10_33 = textureLod(_DissovleNoise, u_xlat16_4.xy, 0.0).x;
    u_xlat33 = u_xlat10_33 * _DissovleNoiseScale + vs_TEXCOORD0.z;
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(_Dissovle>=u_xlat33);
#else
    u_xlatb33 = _Dissovle>=u_xlat33;
#endif
    u_xlat0.xyz = (bool(u_xlatb13)) ? u_xlat3.xyz : u_xlat0.xyz;
    u_xlat0.xyz = u_xlat16_2.xzw + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(0.00999999978<u_xlat16_6.x);
#else
    u_xlatb2 = 0.00999999978<u_xlat16_6.x;
#endif
    if((int(u_xlatb33) * int(0xffffffffu))==0){discard;}
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn));
#else
    u_xlatb33 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn);
#endif
    u_xlat13.xyz = u_xlat0.xyz * vec3(vec3(_ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness));
    u_xlat3.xyz = vec3(vec3(_ES_CharacterPointLightWholeIntensity, _ES_CharacterPointLightWholeIntensity, _ES_CharacterPointLightWholeIntensity)) * mhy_CharacterPointLightColor.xyz;
    u_xlat7.xyz = _ES_CharacterMainLightColor.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.xyz = min(max(u_xlat7.xyz, 0.0), 1.0);
#else
    u_xlat7.xyz = clamp(u_xlat7.xyz, 0.0, 1.0);
#endif
    u_xlat36 = (-mhy_CharacterPointLightColor.w) + 1.0;
    u_xlat3.xyz = u_xlat7.xyz * vec3(u_xlat36) + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat3.xyz = vec3(vec3(_ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio)) * u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat13.xyz = u_xlat13.xyz * u_xlat3.xyz;
    u_xlat3.xyz = _ES_CharacterAmbientLightColor.xyz * vec3(_ES_CharacterAmbientLightRatio);
    u_xlat16_4.xyz = u_xlat13.xyz * vec3(10.0, 10.0, 10.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.xyz = min(max(u_xlat16_4.xyz, 0.0), 1.0);
#else
    u_xlat16_4.xyz = clamp(u_xlat16_4.xyz, 0.0, 1.0);
#endif
    u_xlat13.xyz = u_xlat3.xyz * u_xlat16_4.xyz + u_xlat13.xyz;
    u_xlat16_4.xyz = (bool(u_xlatb33)) ? u_xlat13.xyz : u_xlat0.xyz;
    u_xlat16_17.xyz = u_xlat0.xyz + (-u_xlat16_4.xyz);
    u_xlat16_17.xyz = u_xlat16_6.xxx * u_xlat16_17.xyz + u_xlat16_4.xyz;
    u_xlat16_0.xyz = (bool(u_xlatb2)) ? u_xlat16_17.xyz : u_xlat16_4.xyz;
    u_xlat16_4.x = max(u_xlat16_0.z, u_xlat16_0.y);
    u_xlat16_1.w = max(u_xlat16_0.x, u_xlat16_4.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(1.0<u_xlat16_1.w);
#else
    u_xlatb2 = 1.0<u_xlat16_1.w;
#endif
    u_xlat16_1.xyz = u_xlat16_0.xyz / u_xlat16_1.www;
    u_xlat16_0.w = 1.0;
    u_xlat16_0 = (bool(u_xlatb2)) ? u_xlat16_1 : u_xlat16_0;
    u_xlat16_4.x = min(u_xlat16_0.w, 1.10000002);
    u_xlat16_15 = u_xlat16_0.w + (-u_xlat16_4.x);
    u_xlat16_4.x = u_xlat16_6.x * u_xlat16_15 + u_xlat16_4.x;
    u_xlat16_2.x = u_xlat16_4.x * 0.0500000007;
    SV_Target0.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb13 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb13 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_4.x = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb13) ? u_xlat16_4.x : 0.0;
    SV_Target0.w = 0.0156862754;
    SV_Target1.xyz = u_xlat16_0.xyz;
    SV_Target1.w = u_xlat16_2.x;
    SV_Target2.xy = vec2(0.0, 0.0);
    SV_Target2.w = vs_TEXCOORD4;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "LINE_INTERPOLATION" "MAIN_TEX_COLORING_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	vec4 _MainTex_ST;
uniform 	float _CharacterAmbientSensorShadowOn;
uniform 	vec4 _AmbientSensorUVs;
uniform 	float _UseClipPlane;
uniform 	float _ClipPlaneWorld;
uniform 	vec4 _ClipPlane;
uniform 	vec4 mhy_AvatarLightDir;
uniform 	vec4 mhy_CharacterOverrideLightDir;
uniform lowp sampler2D _CharacterAmbientSensorTex;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp float vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD6;
vec4 u_xlat0;
bvec2 u_xlatb0;
vec4 u_xlat1;
bool u_xlatb1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump float u_xlat16_4;
float u_xlat5;
float u_xlat6;
float u_xlat7;
float u_xlat10;
bool u_xlatb10;
float u_xlat15;
bool u_xlatb15;
float u_xlat16;
bool u_xlatb16;
void main()
{
    u_xlatb0.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseClipPlane, _ClipPlaneWorld, _UseClipPlane, _UseClipPlane)).xy;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(abs(_ClipPlane.w)<0.00100000005);
#else
    u_xlatb10 = abs(_ClipPlane.w)<0.00100000005;
#endif
    u_xlat1.xyz = _ClipPlane.www * _ClipPlane.xyz;
    u_xlat1.xyz = (bool(u_xlatb10)) ? vec3(0.0, 0.0, 0.0) : u_xlat1.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_WorldToObject[1];
    u_xlat2 = hlslcc_mtx4x4unity_WorldToObject[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_WorldToObject[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_WorldToObject[3];
    u_xlat1.xyz = u_xlat1.xyz / u_xlat1.www;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * _ClipPlane.yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _ClipPlane.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _ClipPlane.zzz + u_xlat2.xyz;
    u_xlat10 = dot(u_xlat1.xyz, u_xlat2.xyz);
    u_xlat15 = dot(in_POSITION0.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(u_xlat15<u_xlat10);
#else
    u_xlatb1 = u_xlat15<u_xlat10;
#endif
    u_xlat10 = (-u_xlat10) + u_xlat15;
    u_xlat2.xyz = (-vec3(u_xlat10)) * u_xlat2.xyz + in_POSITION0.xyz;
    u_xlat2.w = 0.0;
    u_xlat3.xyz = in_POSITION0.xyz;
    u_xlat3.w = in_COLOR0.w;
    u_xlat1 = (bool(u_xlatb1)) ? u_xlat2 : u_xlat3;
    u_xlat10 = dot(in_POSITION0.xyz, _ClipPlane.xyz);
    u_xlat15 = _ClipPlane.w + -0.00999999978;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(u_xlat10<u_xlat15);
#else
    u_xlatb15 = u_xlat10<u_xlat15;
#endif
    u_xlat10 = u_xlat10 + (-_ClipPlane.w);
    u_xlat2.xyz = (-vec3(u_xlat10)) * _ClipPlane.xyz + in_POSITION0.xyz;
    u_xlat2.w = 0.0;
    u_xlat2 = (bool(u_xlatb15)) ? u_xlat2 : u_xlat3;
    u_xlat1.xyz = (u_xlatb0.y) ? u_xlat1.xyz : u_xlat2.xyz;
    u_xlat16_4 = (u_xlatb0.y) ? u_xlat1.w : u_xlat2.w;
    u_xlat1.xyz = (u_xlatb0.x) ? u_xlat1.xyz : in_POSITION0.xyz;
    vs_COLOR0.w = (u_xlatb0.x) ? u_xlat16_4 : in_COLOR0.w;
    u_xlat0.xyw = (-_WorldSpaceCameraPos.xyz) + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat2.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;
    u_xlat2.y = hlslcc_mtx4x4unity_ObjectToWorld[1].x;
    u_xlat2.z = hlslcc_mtx4x4unity_ObjectToWorld[2].x;
    u_xlat2.w = u_xlat0.x;
    u_xlat1.w = 1.0;
    u_xlat2.x = dot(u_xlat2, u_xlat1);
    u_xlat3.x = hlslcc_mtx4x4unity_ObjectToWorld[0].y;
    u_xlat3.y = hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat3.z = hlslcc_mtx4x4unity_ObjectToWorld[2].y;
    u_xlat3.w = u_xlat0.y;
    u_xlat7 = dot(u_xlat3, u_xlat1);
    u_xlat0.x = hlslcc_mtx4x4unity_ObjectToWorld[0].z;
    u_xlat0.y = hlslcc_mtx4x4unity_ObjectToWorld[1].z;
    u_xlat0.z = hlslcc_mtx4x4unity_ObjectToWorld[2].z;
    u_xlat0.x = dot(u_xlat0, u_xlat1);
    u_xlat3.x = hlslcc_mtx4x4unity_ObjectToWorld[0].w;
    u_xlat3.y = hlslcc_mtx4x4unity_ObjectToWorld[1].w;
    u_xlat3.z = hlslcc_mtx4x4unity_ObjectToWorld[2].w;
    u_xlat3.w = hlslcc_mtx4x4unity_ObjectToWorld[3].w;
    u_xlat5 = dot(u_xlat3, u_xlat1);
    u_xlat3 = vec4(u_xlat7) * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[3] * vec4(u_xlat5) + u_xlat2;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat1;
    vs_TEXCOORD3.xyz = u_xlat1.xyz / u_xlat1.www;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.xz = u_xlat0.xw * vec2(0.5, 0.5);
    u_xlat6 = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.w = u_xlat6 * 0.5;
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat1.xyz = in_NORMAL0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_NORMAL0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_NORMAL0.zzz + u_xlat1.xyz;
    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat16 = inversesqrt(u_xlat16);
    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(0.5<mhy_CharacterOverrideLightDir.w);
#else
    u_xlatb16 = 0.5<mhy_CharacterOverrideLightDir.w;
#endif
    u_xlat2.x = mhy_CharacterOverrideLightDir.x;
    u_xlat2.yz = (-mhy_CharacterOverrideLightDir.yz);
    u_xlat2.xyz = (bool(u_xlatb16)) ? u_xlat2.xyz : mhy_AvatarLightDir.xyz;
    u_xlat16_4 = dot(u_xlat1.xyz, u_xlat2.xyz);
    vs_TEXCOORD1.w = u_xlat16_4 * 0.497500002 + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_CharacterAmbientSensorShadowOn));
#else
    u_xlatb16 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_CharacterAmbientSensorShadowOn);
#endif
    if(u_xlatb16){
        u_xlat16 = textureLod(_CharacterAmbientSensorTex, _AmbientSensorUVs.xy, 0.0).x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb16 = !!(0.5<u_xlat16);
#else
        u_xlatb16 = 0.5<u_xlat16;
#endif
        vs_TEXCOORD4 = u_xlatb16 ? 1.0 : float(0.0);
    } else {
        vs_TEXCOORD4 = 0.0;
    //ENDIF
    }
    gl_Position = u_xlat0;
    vs_COLOR0.xyz = in_COLOR0.xyz;
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    vs_TEXCOORD2.zw = u_xlat0.zw;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	mediump vec4 _Color;
uniform 	float _MainTexAlphaUse;
uniform 	mediump float _MainTexAlphaCutoff;
uniform 	mediump vec4 _MainTexTintColor;
uniform 	float _UseVertexColorAO;
uniform 	mediump float _LightArea;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	float _UseCoolShadowColorOrTex;
uniform 	mediump vec3 _CoolShadowMultColor;
uniform 	float _UseShadowTransition;
uniform 	float _ShadowTransitionRange;
uniform 	float _ShadowTransitionSoftness;
uniform 	mediump vec3 _SpecularColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	float _FaceBlushStrength;
uniform 	mediump vec3 _FaceBlushColor;
uniform 	mediump float _EmissionScaler;
uniform 	mediump vec3 _EmissionColor_MHY;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _TextureBiasWhenDithering;
uniform 	float _UseClipPlane;
uniform 	float _ES_CharacterAmbientLightOn;
uniform 	float _ES_CharacterAmbientBrightness;
uniform 	vec3 _ES_CharacterMainLightColor;
uniform 	vec3 _ES_CharacterAmbientLightColor;
uniform 	float _ES_CharacterMainLightRatio;
uniform 	float _ES_CharacterAmbientLightRatio;
uniform 	float _ES_CharacterColorTone;
uniform 	float _ES_CharacterPointLightWholeIntensity;
uniform 	vec4 mhy_AvatarLightDir;
uniform 	vec4 mhy_CharacterPointLightColor;
uniform 	vec4 mhy_CharacterOverrideLightDir;
uniform 	mediump vec4 _FlowMapColor01;
uniform 	mediump float _FlowScale01;
uniform 	mediump float _FlowMap01_Uspeed;
uniform 	vec4 _FlowMap01_ST;
uniform 	mediump float _FlowMap01_Vspeed;
uniform 	mediump float _Noise_Uspeed;
uniform 	vec4 _Noise_ST;
uniform 	mediump float _Noise_Vspeed;
uniform 	mediump float _NoiseFlowIntensity;
uniform 	mediump float _MaskOffset01;
uniform 	mediump float _NoiseIntensity;
uniform 	mediump float _Mask01_Power;
uniform 	mediump vec4 _FlowMapColor02;
uniform 	mediump float _FlowScale02;
uniform 	mediump float _FlowMap02_Uspeed;
uniform 	vec4 _FlowMap02_ST;
uniform 	mediump float _FlowMap02_Vspeed;
uniform 	mediump float _MaskOffset02;
uniform 	mediump float _Mask02_Power;
uniform 	mediump float _DissolveNoise_Uspeed;
uniform 	vec4 _DissovleNoise_ST;
uniform 	mediump float _DissolveNoise_Vspeed;
uniform 	mediump float _DissovleNoiseScale;
uniform 	mediump float _Dissovle;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _Noise;
uniform lowp sampler2D _FlowMap01;
uniform lowp sampler2D _Mask01;
uniform lowp sampler2D _FlowMap02;
uniform lowp sampler2D _Mask02;
uniform lowp sampler2D _DissovleNoise;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp float vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
lowp float u_xlat10_2;
int u_xlati2;
bvec4 u_xlatb2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
lowp float u_xlat10_3;
int u_xlati3;
bool u_xlatb3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec2 u_xlat16_7;
mediump vec3 u_xlat16_8;
vec3 u_xlat9;
bool u_xlatb10;
vec3 u_xlat12;
mediump vec3 u_xlat16_12;
lowp float u_xlat10_12;
int u_xlati12;
bool u_xlatb12;
vec3 u_xlat13;
mediump vec3 u_xlat16_13;
mediump float u_xlat16_14;
mediump vec2 u_xlat16_15;
mediump vec2 u_xlat16_16;
bvec2 u_xlatb20;
float u_xlat22;
bool u_xlatb22;
mediump vec2 u_xlat16_25;
float u_xlat30;
bool u_xlatb30;
float u_xlat32;
mediump float u_xlat16_32;
lowp float u_xlat10_32;
int u_xlati32;
bool u_xlatb32;
float u_xlat33;
mediump float u_xlat16_34;
mediump float u_xlat16_35;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseClipPlane));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseClipPlane);
#endif
    u_xlat16_1.x = vs_COLOR0.w + -0.00999999978;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(u_xlat16_1.x<0.0);
#else
    u_xlatb10 = u_xlat16_1.x<0.0;
#endif
    u_xlatb0 = u_xlatb0 && u_xlatb10;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(_DitherAlpha<0.949999988);
#else
        u_xlatb0 = _DitherAlpha<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb20.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb20.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb20.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = _DitherAlpha * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + -0.00999999978;
#ifdef UNITY_ADRENO_ES3
            u_xlatb0 = !!(u_xlat0.x<0.0);
#else
            u_xlatb0 = u_xlat0.x<0.0;
#endif
            if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(0.5<mhy_CharacterOverrideLightDir.w);
#else
    u_xlatb2.x = 0.5<mhy_CharacterOverrideLightDir.w;
#endif
    u_xlat3.x = mhy_CharacterOverrideLightDir.x;
    u_xlat3.yz = (-mhy_CharacterOverrideLightDir.yz);
    u_xlat2.xyz = (u_xlatb2.x) ? u_xlat3.xyz : mhy_AvatarLightDir.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat30) + u_xlat2.xyz;
    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
    u_xlat30 = _TextureBiasWhenDithering + -1.0;
    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy, u_xlat30);
    u_xlat16_4.xyz = u_xlat1.xyz * _MainTexTintColor.xyz;
    u_xlat16_5.xyz = u_xlat16_4.xyz + u_xlat16_4.xyz;
    u_xlat16_6.xyz = u_xlat1.xyz + _MainTexTintColor.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_6.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(-4.0, -4.0, -4.0) + u_xlat16_6.xyz;
    u_xlatb2 = lessThan(vec4(0.5, 0.5, 0.5, 0.00999999978), u_xlat1);
    u_xlat16_6.x = (u_xlatb2.x) ? float(1.0) : float(0.0);
    u_xlat16_6.y = (u_xlatb2.y) ? float(1.0) : float(0.0);
    u_xlat16_6.z = (u_xlatb2.z) ? float(1.0) : float(0.0);
    u_xlat16_4.xyz = u_xlat16_4.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat16_4.xyz = u_xlat16_6.xyz * u_xlat16_4.xyz + u_xlat16_5.xyz;
    u_xlatb2.xyz = equal(vec4(_MainTexAlphaUse), vec4(3.0, 1.0, 2.0, 0.0)).xyz;
    u_xlat30 = u_xlat1.w * _FaceBlushStrength;
    u_xlat16_3.xyz = (-u_xlat16_4.xyz) + _FaceBlushColor.xyz;
    u_xlat3.xyz = vec3(u_xlat30) * u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat16_4.xyz = (u_xlatb2.x) ? u_xlat3.xyz : u_xlat16_4.xyz;
    u_xlat16_34 = u_xlat1.w + (-_MainTexAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(u_xlat16_34<0.0);
#else
    u_xlatb30 = u_xlat16_34<0.0;
#endif
    u_xlatb30 = u_xlatb2.y && u_xlatb30;
    if((int(u_xlatb30) * int(0xffffffffu))!=0){discard;}
    u_xlat16_4.xyz = u_xlat16_4.xyz * _Color.xyz;
    u_xlatb30 = u_xlatb2.w && u_xlatb2.z;
    u_xlat16_34 = (u_xlatb30) ? u_xlat1.w : 0.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorAO));
#else
    u_xlatb2.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorAO);
#endif
    u_xlat16_5.x = vs_COLOR0.x * 0.5;
    u_xlat16_5.x = (u_xlatb2.x) ? u_xlat16_5.x : 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat16_5.x<0.0500000007);
#else
    u_xlatb12 = u_xlat16_5.x<0.0500000007;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(0.949999988<u_xlat16_5.x);
#else
    u_xlatb22 = 0.949999988<u_xlat16_5.x;
#endif
    u_xlat32 = u_xlat16_5.x + vs_TEXCOORD1.w;
    u_xlat32 = u_xlat32 * 0.5;
    u_xlat16_5.x = (u_xlatb22) ? 1.0 : u_xlat32;
    u_xlat16_5.x = (u_xlatb12) ? 0.0 : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb2.x) ? u_xlat16_5.x : vs_TEXCOORD1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(u_xlat16_5.x<_LightArea);
#else
    u_xlatb2.x = u_xlat16_5.x<_LightArea;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition));
#else
    u_xlatb12 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition);
#endif
    u_xlat16_5.x = (-u_xlat16_5.x) + _LightArea;
    u_xlat16_5.x = u_xlat16_5.x / _ShadowTransitionRange;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(u_xlat16_5.x>=1.0);
#else
    u_xlatb22 = u_xlat16_5.x>=1.0;
#endif
    u_xlat16_32 = u_xlat16_5.x + 0.00999999978;
    u_xlat16_32 = log2(u_xlat16_32);
    u_xlat32 = u_xlat16_32 * _ShadowTransitionSoftness;
    u_xlat32 = exp2(u_xlat32);
    u_xlat32 = min(u_xlat32, 1.0);
    u_xlat22 = (u_xlatb22) ? 1.0 : u_xlat32;
    u_xlat22 = (u_xlatb12) ? u_xlat22 : 1.0;
    u_xlat22 = u_xlatb2.x ? u_xlat22 : float(0.0);
#ifdef UNITY_ADRENO_ES3
    { bool cond = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(vs_TEXCOORD4); u_xlati32 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati32 = int((vec4(0.0, 0.0, 0.0, 0.0)!=vec4(vs_TEXCOORD4)) ? 0xFFFFFFFFu : uint(0u));
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex));
#else
    u_xlatb3 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex);
#endif
    u_xlat16_13.xyz = vec3(_FirstShadowMultColor.xxyz.y + (-_CoolShadowMultColor.x), _FirstShadowMultColor.xxyz.z + (-_CoolShadowMultColor.y), float(_FirstShadowMultColor.z) + (-_CoolShadowMultColor.z));
    u_xlat13.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_13.xyz + _CoolShadowMultColor.xyz;
    u_xlat16_5.xyz = (bool(u_xlatb3)) ? u_xlat13.xyz : vec3(_FirstShadowMultColor.x, _FirstShadowMultColor.y, _FirstShadowMultColor.z);
    u_xlati3 = ~u_xlati32;
    u_xlati12 = u_xlatb12 ? u_xlati3 : int(0);
    u_xlat16_3.xyz = u_xlat16_5.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat3.xyz = vec3(u_xlat22) * u_xlat16_3.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_5.xyz = (int(u_xlati12) != 0) ? u_xlat3.xyz : u_xlat16_5.xyz;
    u_xlat16_35 = dot(vs_TEXCOORD1.xyz, u_xlat0.xyz);
    u_xlat16_35 = max(u_xlat16_35, 0.00100000005);
    u_xlat16_35 = log2(u_xlat16_35);
    u_xlat16_35 = u_xlat16_35 * _Shininess;
    u_xlat16_35 = exp2(u_xlat16_35);
    u_xlat16_6.xyz = vec3(u_xlat16_35) * _SpecularColor.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(_SpecMulti);
    u_xlat16_4.xyz = vec3(u_xlat16_4.x * _EmissionColor_MHY.xxyz.y, u_xlat16_4.y * _EmissionColor_MHY.xxyz.z, u_xlat16_4.z * float(_EmissionColor_MHY.z));
    u_xlat0.xyz = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0).xyz;
    u_xlati2 = int(uint(u_xlatb2.x) * 0xffffffffu | uint(u_xlati32));
    u_xlat12.xyz = u_xlat0.xyz * u_xlat16_5.xyz;
    u_xlat0.xyz = (int(u_xlati2) != 0) ? u_xlat12.xyz : u_xlat0.xyz;
    u_xlat0.xyz = u_xlat16_6.xyz * vec3(0.5, 0.5, 0.5) + u_xlat0.xyz;
    u_xlat2.xy = vs_TEXCOORD0.zw * _FlowMap01_ST.xy + _FlowMap01_ST.zw;
    u_xlat16_5.x = _Time.y * _FlowMap01_Uspeed + u_xlat2.x;
    u_xlat16_5.y = _Time.y * _FlowMap01_Vspeed + u_xlat2.y;
    u_xlat2.xy = vs_TEXCOORD0.zw * _Noise_ST.xy + _Noise_ST.zw;
    u_xlat16_6.x = _Time.y * _Noise_Uspeed + u_xlat2.x;
    u_xlat16_6.y = _Time.y * _Noise_Vspeed + u_xlat2.y;
    u_xlat10_2 = textureLod(_Noise, u_xlat16_6.xy, 0.0).x;
    u_xlat16_25.x = _MaskOffset01 * 1.39999998 + -0.699999988;
    u_xlat16_16.x = u_xlat10_2 * _NoiseIntensity;
    u_xlat12.xy = vs_TEXCOORD0.zw * _FlowMap02_ST.xy + _FlowMap02_ST.zw;
    u_xlat16_7.x = _Time.y * _FlowMap02_Uspeed + u_xlat12.x;
    u_xlat16_7.y = _Time.y * _FlowMap02_Vspeed + u_xlat12.y;
    u_xlat16_25.y = _MaskOffset02 * 1.39999998 + -0.699999988;
    u_xlat16_8.xyz = _FlowMapColor01.xyz * vec3(_FlowScale01);
    u_xlat16_5.xy = vec2(u_xlat10_2) * vec2(vec2(_NoiseFlowIntensity, _NoiseFlowIntensity)) + u_xlat16_5.xy;
    u_xlat10_12 = textureLod(_FlowMap01, u_xlat16_5.xy, 0.0).x;
    u_xlat16_12.xyz = vec3(u_xlat10_12) * u_xlat16_8.xyz;
    u_xlat16_5.x = (-vs_TEXCOORD0.z) + 1.0;
    u_xlat16_1.xz = u_xlat16_25.xy + u_xlat16_5.xx;
    u_xlat16_1.yw = vec2(u_xlat10_2) * vec2(vec2(_NoiseIntensity, _NoiseIntensity)) + (-vs_TEXCOORD0.ww);
    u_xlat16_16.y = 1.0;
    u_xlat16_15.xy = u_xlat16_1.xy + u_xlat16_16.xy;
    u_xlat10_3 = textureLod(_Mask01, u_xlat16_15.xy, 0.0).x;
    u_xlat16_3.x = max(u_xlat10_3, 9.99999975e-05);
    u_xlat16_3.x = log2(u_xlat16_3.x);
    u_xlat16_3.x = u_xlat16_3.x * _Mask01_Power;
    u_xlat16_3.x = exp2(u_xlat16_3.x);
    u_xlat16_8.xyz = _FlowMapColor02.xyz * vec3(_FlowScale02);
    u_xlat16_15.xy = vec2(u_xlat10_2) * vec2(vec2(_NoiseFlowIntensity, _NoiseFlowIntensity)) + u_xlat16_7.xy;
    u_xlat10_2 = textureLod(_FlowMap02, u_xlat16_15.xy, 0.0).x;
    u_xlat16_13.xyz = vec3(u_xlat10_2) * u_xlat16_8.xyz;
    u_xlat16_5.xy = vec2(u_xlat16_1.z + u_xlat16_16.x, u_xlat16_1.w + u_xlat16_16.y);
    u_xlat10_2 = textureLod(_Mask02, u_xlat16_5.xy, 0.0).x;
    u_xlat16_2.x = max(u_xlat10_2, 9.99999975e-05);
    u_xlat16_2.x = log2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * _Mask02_Power;
    u_xlat16_2.x = exp2(u_xlat16_2.x);
    u_xlat16_13.xyz = u_xlat16_2.xxx * u_xlat16_13.xyz;
    u_xlat16_2.xyz = u_xlat16_12.xyz * u_xlat16_3.xxx + u_xlat16_13.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(_EmissionScaler) + u_xlat16_2.xyz;
    u_xlat3.xyz = (-u_xlat0.xyz) + u_xlat16_4.xyz;
    u_xlat3.xyz = vec3(u_xlat16_34) * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat9.xy = vs_TEXCOORD0.zw * _DissovleNoise_ST.xy + _DissovleNoise_ST.zw;
    u_xlat16_4.x = _Time.y * _DissolveNoise_Uspeed + u_xlat9.x;
    u_xlat16_4.y = _Time.y * _DissolveNoise_Vspeed + u_xlat9.y;
    u_xlat10_32 = textureLod(_DissovleNoise, u_xlat16_4.xy, 0.0).x;
    u_xlat32 = u_xlat10_32 * _DissovleNoiseScale + vs_TEXCOORD0.z;
#ifdef UNITY_ADRENO_ES3
    u_xlatb32 = !!(_Dissovle>=u_xlat32);
#else
    u_xlatb32 = _Dissovle>=u_xlat32;
#endif
    u_xlat0.xyz = (bool(u_xlatb30)) ? u_xlat3.xyz : u_xlat0.xyz;
    u_xlat0.xyz = u_xlat16_2.xyz + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(0.00999999978<u_xlat16_34);
#else
    u_xlatb30 = 0.00999999978<u_xlat16_34;
#endif
    if((int(u_xlatb32) * int(0xffffffffu))==0){discard;}
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn));
#else
    u_xlatb2.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn);
#endif
    u_xlat12.xyz = u_xlat0.xyz * vec3(vec3(_ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness));
    u_xlat3.xyz = vec3(vec3(_ES_CharacterPointLightWholeIntensity, _ES_CharacterPointLightWholeIntensity, _ES_CharacterPointLightWholeIntensity)) * mhy_CharacterPointLightColor.xyz;
    u_xlat9.xyz = _ES_CharacterMainLightColor.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat9.xyz = min(max(u_xlat9.xyz, 0.0), 1.0);
#else
    u_xlat9.xyz = clamp(u_xlat9.xyz, 0.0, 1.0);
#endif
    u_xlat33 = (-mhy_CharacterPointLightColor.w) + 1.0;
    u_xlat3.xyz = u_xlat9.xyz * vec3(u_xlat33) + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat3.xyz = vec3(vec3(_ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio)) * u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat12.xyz = u_xlat12.xyz * u_xlat3.xyz;
    u_xlat3.xyz = _ES_CharacterAmbientLightColor.xyz * vec3(_ES_CharacterAmbientLightRatio);
    u_xlat16_4.xyz = u_xlat12.xyz * vec3(10.0, 10.0, 10.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.xyz = min(max(u_xlat16_4.xyz, 0.0), 1.0);
#else
    u_xlat16_4.xyz = clamp(u_xlat16_4.xyz, 0.0, 1.0);
#endif
    u_xlat12.xyz = u_xlat3.xyz * u_xlat16_4.xyz + u_xlat12.xyz;
    u_xlat16_4.xyz = (u_xlatb2.x) ? u_xlat12.xyz : u_xlat0.xyz;
    u_xlat16_5.xyz = u_xlat0.xyz + (-u_xlat16_4.xyz);
    u_xlat16_5.xyz = vec3(u_xlat16_34) * u_xlat16_5.xyz + u_xlat16_4.xyz;
    u_xlat16_0.xyz = (bool(u_xlatb30)) ? u_xlat16_5.xyz : u_xlat16_4.xyz;
    u_xlat16_4.x = max(u_xlat16_0.z, u_xlat16_0.y);
    u_xlat16_1.w = max(u_xlat16_0.x, u_xlat16_4.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(1.0<u_xlat16_1.w);
#else
    u_xlatb2.x = 1.0<u_xlat16_1.w;
#endif
    u_xlat16_1.xyz = u_xlat16_0.xyz / u_xlat16_1.www;
    u_xlat16_0.w = 1.0;
    u_xlat16_0 = (u_xlatb2.x) ? u_xlat16_1 : u_xlat16_0;
    u_xlat16_4.x = min(u_xlat16_0.w, 1.10000002);
    u_xlat16_14 = u_xlat16_0.w + (-u_xlat16_4.x);
    u_xlat16_4.x = u_xlat16_34 * u_xlat16_14 + u_xlat16_4.x;
    u_xlat16_2.x = u_xlat16_4.x * 0.0500000007;
    SV_Target0.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb12 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_4.x = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb12) ? u_xlat16_4.x : 0.0;
    SV_Target0.w = 0.0156862754;
    SV_Target1.xyz = u_xlat16_0.xyz;
    SV_Target1.w = u_xlat16_2.x;
    SV_Target2.xy = vec2(0.0, 0.0);
    SV_Target2.w = vs_TEXCOORD4;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "LINE_INTERPOLATION" "TOON_SPECULAR_ON" "TOON_LIGHTMAP_ON" "MAIN_TEX_COLORING_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	vec4 _MainTex_ST;
uniform 	float _CharacterAmbientSensorShadowOn;
uniform 	vec4 _AmbientSensorUVs;
uniform 	float _UseClipPlane;
uniform 	float _ClipPlaneWorld;
uniform 	vec4 _ClipPlane;
uniform 	vec4 mhy_AvatarLightDir;
uniform 	vec4 mhy_CharacterOverrideLightDir;
uniform lowp sampler2D _CharacterAmbientSensorTex;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp float vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD6;
vec4 u_xlat0;
bvec2 u_xlatb0;
vec4 u_xlat1;
bool u_xlatb1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump float u_xlat16_4;
float u_xlat5;
float u_xlat6;
float u_xlat7;
float u_xlat10;
bool u_xlatb10;
float u_xlat15;
bool u_xlatb15;
float u_xlat16;
bool u_xlatb16;
void main()
{
    u_xlatb0.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseClipPlane, _ClipPlaneWorld, _UseClipPlane, _UseClipPlane)).xy;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(abs(_ClipPlane.w)<0.00100000005);
#else
    u_xlatb10 = abs(_ClipPlane.w)<0.00100000005;
#endif
    u_xlat1.xyz = _ClipPlane.www * _ClipPlane.xyz;
    u_xlat1.xyz = (bool(u_xlatb10)) ? vec3(0.0, 0.0, 0.0) : u_xlat1.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_WorldToObject[1];
    u_xlat2 = hlslcc_mtx4x4unity_WorldToObject[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_WorldToObject[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_WorldToObject[3];
    u_xlat1.xyz = u_xlat1.xyz / u_xlat1.www;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * _ClipPlane.yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _ClipPlane.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _ClipPlane.zzz + u_xlat2.xyz;
    u_xlat10 = dot(u_xlat1.xyz, u_xlat2.xyz);
    u_xlat15 = dot(in_POSITION0.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(u_xlat15<u_xlat10);
#else
    u_xlatb1 = u_xlat15<u_xlat10;
#endif
    u_xlat10 = (-u_xlat10) + u_xlat15;
    u_xlat2.xyz = (-vec3(u_xlat10)) * u_xlat2.xyz + in_POSITION0.xyz;
    u_xlat2.w = 0.0;
    u_xlat3.xyz = in_POSITION0.xyz;
    u_xlat3.w = in_COLOR0.w;
    u_xlat1 = (bool(u_xlatb1)) ? u_xlat2 : u_xlat3;
    u_xlat10 = dot(in_POSITION0.xyz, _ClipPlane.xyz);
    u_xlat15 = _ClipPlane.w + -0.00999999978;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(u_xlat10<u_xlat15);
#else
    u_xlatb15 = u_xlat10<u_xlat15;
#endif
    u_xlat10 = u_xlat10 + (-_ClipPlane.w);
    u_xlat2.xyz = (-vec3(u_xlat10)) * _ClipPlane.xyz + in_POSITION0.xyz;
    u_xlat2.w = 0.0;
    u_xlat2 = (bool(u_xlatb15)) ? u_xlat2 : u_xlat3;
    u_xlat1.xyz = (u_xlatb0.y) ? u_xlat1.xyz : u_xlat2.xyz;
    u_xlat16_4 = (u_xlatb0.y) ? u_xlat1.w : u_xlat2.w;
    u_xlat1.xyz = (u_xlatb0.x) ? u_xlat1.xyz : in_POSITION0.xyz;
    vs_COLOR0.w = (u_xlatb0.x) ? u_xlat16_4 : in_COLOR0.w;
    u_xlat0.xyw = (-_WorldSpaceCameraPos.xyz) + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat2.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;
    u_xlat2.y = hlslcc_mtx4x4unity_ObjectToWorld[1].x;
    u_xlat2.z = hlslcc_mtx4x4unity_ObjectToWorld[2].x;
    u_xlat2.w = u_xlat0.x;
    u_xlat1.w = 1.0;
    u_xlat2.x = dot(u_xlat2, u_xlat1);
    u_xlat3.x = hlslcc_mtx4x4unity_ObjectToWorld[0].y;
    u_xlat3.y = hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat3.z = hlslcc_mtx4x4unity_ObjectToWorld[2].y;
    u_xlat3.w = u_xlat0.y;
    u_xlat7 = dot(u_xlat3, u_xlat1);
    u_xlat0.x = hlslcc_mtx4x4unity_ObjectToWorld[0].z;
    u_xlat0.y = hlslcc_mtx4x4unity_ObjectToWorld[1].z;
    u_xlat0.z = hlslcc_mtx4x4unity_ObjectToWorld[2].z;
    u_xlat0.x = dot(u_xlat0, u_xlat1);
    u_xlat3.x = hlslcc_mtx4x4unity_ObjectToWorld[0].w;
    u_xlat3.y = hlslcc_mtx4x4unity_ObjectToWorld[1].w;
    u_xlat3.z = hlslcc_mtx4x4unity_ObjectToWorld[2].w;
    u_xlat3.w = hlslcc_mtx4x4unity_ObjectToWorld[3].w;
    u_xlat5 = dot(u_xlat3, u_xlat1);
    u_xlat3 = vec4(u_xlat7) * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[3] * vec4(u_xlat5) + u_xlat2;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat1;
    vs_TEXCOORD3.xyz = u_xlat1.xyz / u_xlat1.www;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.xz = u_xlat0.xw * vec2(0.5, 0.5);
    u_xlat6 = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.w = u_xlat6 * 0.5;
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat1.xyz = in_NORMAL0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_NORMAL0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_NORMAL0.zzz + u_xlat1.xyz;
    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat16 = inversesqrt(u_xlat16);
    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(0.5<mhy_CharacterOverrideLightDir.w);
#else
    u_xlatb16 = 0.5<mhy_CharacterOverrideLightDir.w;
#endif
    u_xlat2.x = mhy_CharacterOverrideLightDir.x;
    u_xlat2.yz = (-mhy_CharacterOverrideLightDir.yz);
    u_xlat2.xyz = (bool(u_xlatb16)) ? u_xlat2.xyz : mhy_AvatarLightDir.xyz;
    u_xlat16_4 = dot(u_xlat1.xyz, u_xlat2.xyz);
    vs_TEXCOORD1.w = u_xlat16_4 * 0.497500002 + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_CharacterAmbientSensorShadowOn));
#else
    u_xlatb16 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_CharacterAmbientSensorShadowOn);
#endif
    if(u_xlatb16){
        u_xlat16 = textureLod(_CharacterAmbientSensorTex, _AmbientSensorUVs.xy, 0.0).x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb16 = !!(0.5<u_xlat16);
#else
        u_xlatb16 = 0.5<u_xlat16;
#endif
        vs_TEXCOORD4 = u_xlatb16 ? 1.0 : float(0.0);
    } else {
        vs_TEXCOORD4 = 0.0;
    //ENDIF
    }
    gl_Position = u_xlat0;
    vs_COLOR0.xyz = in_COLOR0.xyz;
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    vs_TEXCOORD2.zw = u_xlat0.zw;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	mediump vec4 _Color;
uniform 	float _MainTexAlphaUse;
uniform 	mediump float _MainTexAlphaCutoff;
uniform 	mediump vec4 _MainTexTintColor;
uniform 	float _UseLightMapColorAO;
uniform 	float _UseVertexColorAO;
uniform 	mediump float _LightArea;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	float _UseCoolShadowColorOrTex;
uniform 	mediump vec3 _CoolShadowMultColor;
uniform 	float _UseShadowTransition;
uniform 	float _ShadowTransitionRange;
uniform 	float _ShadowTransitionSoftness;
uniform 	mediump vec3 _SpecularColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	float _FaceBlushStrength;
uniform 	mediump vec3 _FaceBlushColor;
uniform 	mediump float _EmissionScaler;
uniform 	mediump vec3 _EmissionColor_MHY;
uniform 	float _UseMaterial2;
uniform 	mediump vec3 _Color2;
uniform 	mediump vec3 _FirstShadowMultColor2;
uniform 	mediump vec3 _CoolShadowMultColor2;
uniform 	mediump float _Shininess2;
uniform 	mediump float _SpecMulti2;
uniform 	float _ShadowTransitionRange2;
uniform 	float _ShadowTransitionSoftness2;
uniform 	float _UseMaterial3;
uniform 	mediump vec3 _Color3;
uniform 	mediump vec3 _FirstShadowMultColor3;
uniform 	mediump vec3 _CoolShadowMultColor3;
uniform 	mediump float _Shininess3;
uniform 	mediump float _SpecMulti3;
uniform 	float _ShadowTransitionRange3;
uniform 	float _ShadowTransitionSoftness3;
uniform 	float _UseMaterial4;
uniform 	mediump vec3 _Color4;
uniform 	mediump vec3 _FirstShadowMultColor4;
uniform 	mediump vec3 _CoolShadowMultColor4;
uniform 	mediump float _Shininess4;
uniform 	mediump float _SpecMulti4;
uniform 	float _ShadowTransitionRange4;
uniform 	float _ShadowTransitionSoftness4;
uniform 	float _UseMaterial5;
uniform 	mediump vec3 _Color5;
uniform 	mediump vec3 _FirstShadowMultColor5;
uniform 	mediump vec3 _CoolShadowMultColor5;
uniform 	mediump float _Shininess5;
uniform 	mediump float _SpecMulti5;
uniform 	float _ShadowTransitionRange5;
uniform 	float _ShadowTransitionSoftness5;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _TextureBiasWhenDithering;
uniform 	float _UseClipPlane;
uniform 	float _ES_CharacterAmbientLightOn;
uniform 	float _ES_CharacterAmbientBrightness;
uniform 	vec3 _ES_CharacterMainLightColor;
uniform 	vec3 _ES_CharacterAmbientLightColor;
uniform 	float _ES_CharacterMainLightRatio;
uniform 	float _ES_CharacterAmbientLightRatio;
uniform 	float _ES_CharacterColorTone;
uniform 	float _ES_CharacterPointLightWholeIntensity;
uniform 	vec4 mhy_AvatarLightDir;
uniform 	vec4 mhy_CharacterPointLightColor;
uniform 	vec4 mhy_CharacterOverrideLightDir;
uniform 	mediump vec4 _FlowMapColor01;
uniform 	mediump float _FlowScale01;
uniform 	mediump float _FlowMap01_Uspeed;
uniform 	vec4 _FlowMap01_ST;
uniform 	mediump float _FlowMap01_Vspeed;
uniform 	mediump float _Noise_Uspeed;
uniform 	vec4 _Noise_ST;
uniform 	mediump float _Noise_Vspeed;
uniform 	mediump float _NoiseFlowIntensity;
uniform 	mediump float _MaskOffset01;
uniform 	mediump float _NoiseIntensity;
uniform 	mediump float _Mask01_Power;
uniform 	mediump vec4 _FlowMapColor02;
uniform 	mediump float _FlowScale02;
uniform 	mediump float _FlowMap02_Uspeed;
uniform 	vec4 _FlowMap02_ST;
uniform 	mediump float _FlowMap02_Vspeed;
uniform 	mediump float _MaskOffset02;
uniform 	mediump float _Mask02_Power;
uniform 	mediump float _DissolveNoise_Uspeed;
uniform 	vec4 _DissovleNoise_ST;
uniform 	mediump float _DissolveNoise_Vspeed;
uniform 	mediump float _DissovleNoiseScale;
uniform 	mediump float _Dissovle;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _Noise;
uniform lowp sampler2D _FlowMap01;
uniform lowp sampler2D _Mask01;
uniform lowp sampler2D _FlowMap02;
uniform lowp sampler2D _Mask02;
uniform lowp sampler2D _DissovleNoise;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp float vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
vec3 u_xlat2;
mediump float u_xlat16_2;
bvec4 u_xlatb2;
vec3 u_xlat3;
mediump float u_xlat16_3;
lowp vec4 u_xlat10_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
bvec4 u_xlatb5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
mediump vec3 u_xlat16_7;
bvec3 u_xlatb7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
bool u_xlatb11;
vec3 u_xlat13;
mediump vec3 u_xlat16_13;
lowp float u_xlat10_13;
bool u_xlatb13;
mediump vec3 u_xlat16_14;
int u_xlati14;
bool u_xlatb14;
mediump float u_xlat16_15;
mediump vec3 u_xlat16_17;
mediump vec3 u_xlat16_19;
bvec2 u_xlatb22;
float u_xlat24;
bool u_xlatb24;
float u_xlat33;
mediump float u_xlat16_33;
lowp float u_xlat10_33;
int u_xlati33;
bool u_xlatb33;
float u_xlat35;
mediump float u_xlat16_35;
int u_xlati35;
float u_xlat36;
int u_xlati36;
mediump float u_xlat16_37;
mediump float u_xlat16_39;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseClipPlane));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseClipPlane);
#endif
    u_xlat16_1.x = vs_COLOR0.w + -0.00999999978;
#ifdef UNITY_ADRENO_ES3
    u_xlatb11 = !!(u_xlat16_1.x<0.0);
#else
    u_xlatb11 = u_xlat16_1.x<0.0;
#endif
    u_xlatb0 = u_xlatb0 && u_xlatb11;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(_DitherAlpha<0.949999988);
#else
        u_xlatb0 = _DitherAlpha<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb22.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb22.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb22.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = _DitherAlpha * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + -0.00999999978;
#ifdef UNITY_ADRENO_ES3
            u_xlatb0 = !!(u_xlat0.x<0.0);
#else
            u_xlatb0 = u_xlat0.x<0.0;
#endif
            if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(0.5<mhy_CharacterOverrideLightDir.w);
#else
    u_xlatb2.x = 0.5<mhy_CharacterOverrideLightDir.w;
#endif
    u_xlat3.x = mhy_CharacterOverrideLightDir.x;
    u_xlat3.yz = (-mhy_CharacterOverrideLightDir.yz);
    u_xlat2.xyz = (u_xlatb2.x) ? u_xlat3.xyz : mhy_AvatarLightDir.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat33) + u_xlat2.xyz;
    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat0.xyz = vec3(u_xlat33) * u_xlat0.xyz;
    u_xlat33 = _TextureBiasWhenDithering + -1.0;
    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy, u_xlat33);
    u_xlat16_4.xyz = u_xlat1.xyz * _MainTexTintColor.xyz;
    u_xlat16_5.xyz = u_xlat16_4.xyz + u_xlat16_4.xyz;
    u_xlat16_6.xyz = u_xlat1.xyz + _MainTexTintColor.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_6.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(-4.0, -4.0, -4.0) + u_xlat16_6.xyz;
    u_xlatb2 = lessThan(vec4(0.5, 0.5, 0.5, 0.00999999978), u_xlat1);
    u_xlat16_6.x = (u_xlatb2.x) ? float(1.0) : float(0.0);
    u_xlat16_6.y = (u_xlatb2.y) ? float(1.0) : float(0.0);
    u_xlat16_6.z = (u_xlatb2.z) ? float(1.0) : float(0.0);
    u_xlat16_4.xyz = u_xlat16_4.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat16_4.xyz = u_xlat16_6.xyz * u_xlat16_4.xyz + u_xlat16_5.xyz;
    u_xlatb2.xyz = equal(vec4(_MainTexAlphaUse), vec4(3.0, 1.0, 2.0, 0.0)).xyz;
    u_xlat3.x = u_xlat1.w * _FaceBlushStrength;
    u_xlat16_14.xyz = (-u_xlat16_4.xyz) + _FaceBlushColor.xyz;
    u_xlat3.xyz = u_xlat3.xxx * u_xlat16_14.xyz + u_xlat16_4.xyz;
    u_xlat16_4.xyz = (u_xlatb2.x) ? u_xlat3.xyz : u_xlat16_4.xyz;
    u_xlat16_37 = u_xlat1.w + (-_MainTexAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(u_xlat16_37<0.0);
#else
    u_xlatb2.x = u_xlat16_37<0.0;
#endif
    u_xlatb2.x = u_xlatb2.y && u_xlatb2.x;
    if((int(u_xlatb2.x) * int(0xffffffffu))!=0){discard;}
    u_xlat10_3 = texture(_LightMapTex, vs_TEXCOORD0.xy, u_xlat33);
    u_xlatb2.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseLightMapColorAO, _UseVertexColorAO, _UseLightMapColorAO, _UseLightMapColorAO)).xy;
    u_xlat16_37 = (u_xlatb2.x) ? u_xlat10_3.y : 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseMaterial2));
#else
    u_xlatb33 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseMaterial2);
#endif
    u_xlatb5 = greaterThanEqual(u_xlat10_3.wwww, vec4(0.800000012, 0.400000006, 0.200000003, 0.600000024));
    u_xlatb33 = u_xlatb33 && u_xlatb5.x;
    u_xlat33 = (u_xlatb33) ? 2.0 : 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseMaterial3));
#else
    u_xlatb2.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseMaterial3);
#endif
    u_xlatb2.x = u_xlatb5.y && u_xlatb2.x;
    u_xlatb7.xyz = lessThan(u_xlat10_3.wwww, vec4(0.600000024, 0.400000006, 0.800000012, 0.0)).xyz;
    u_xlatb2.x = u_xlatb2.x && u_xlatb7.x;
    u_xlat33 = (u_xlatb2.x) ? 3.0 : u_xlat33;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseMaterial4));
#else
    u_xlatb2.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseMaterial4);
#endif
    u_xlatb2.x = u_xlatb5.z && u_xlatb2.x;
    u_xlatb2.x = u_xlatb7.y && u_xlatb2.x;
    u_xlat33 = (u_xlatb2.x) ? 4.0 : u_xlat33;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseMaterial5));
#else
    u_xlatb2.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseMaterial5);
#endif
    u_xlatb2.x = u_xlatb5.w && u_xlatb2.x;
    u_xlatb2.x = u_xlatb7.z && u_xlatb2.x;
    u_xlat33 = (u_xlatb2.x) ? 5.0 : u_xlat33;
    u_xlatb5 = equal(vec4(u_xlat33), vec4(2.0, 3.0, 4.0, 5.0));
    u_xlat16_6.xyz = (u_xlatb5.x) ? _Color2.xyz : _Color.xyz;
    u_xlat16_6.xyz = (u_xlatb5.y) ? _Color3.xyz : u_xlat16_6.xyz;
    u_xlat16_6.xyz = (u_xlatb5.z) ? _Color4.xyz : u_xlat16_6.xyz;
    u_xlat16_6.xyz = (u_xlatb5.w) ? _Color5.xyz : u_xlat16_6.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_6.xyz;
    u_xlatb2.x = u_xlatb2.w && u_xlatb2.z;
    u_xlat16_6.x = (u_xlatb2.x) ? u_xlat1.w : 0.0;
    u_xlat16_17.x = u_xlat16_37 * vs_COLOR0.x;
    u_xlat16_37 = (u_xlatb2.y) ? u_xlat16_17.x : u_xlat16_37;
#ifdef UNITY_ADRENO_ES3
    u_xlatb13 = !!(u_xlat16_37<0.0500000007);
#else
    u_xlatb13 = u_xlat16_37<0.0500000007;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(0.949999988<u_xlat16_37);
#else
    u_xlatb24 = 0.949999988<u_xlat16_37;
#endif
    u_xlat35 = u_xlat16_37 + vs_TEXCOORD1.w;
    u_xlat35 = u_xlat35 * 0.5;
    u_xlat16_37 = (u_xlatb24) ? 1.0 : u_xlat35;
    u_xlat16_37 = (u_xlatb13) ? 0.0 : u_xlat16_37;
#ifdef UNITY_ADRENO_ES3
    u_xlatb13 = !!(u_xlat16_37<_LightArea);
#else
    u_xlatb13 = u_xlat16_37<_LightArea;
#endif
    if(u_xlatb13){
#ifdef UNITY_ADRENO_ES3
        u_xlatb13 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition));
#else
        u_xlatb13 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition);
#endif
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(u_xlat33==1.0);
#else
        u_xlatb24 = u_xlat33==1.0;
#endif
        u_xlat16_8.x = (u_xlatb24) ? _ShadowTransitionRange : 0.0;
        u_xlat16_8.y = (u_xlatb24) ? _ShadowTransitionSoftness : 0.0;
        u_xlat16_17.xy = (u_xlatb5.x) ? vec2(_ShadowTransitionRange2, _ShadowTransitionSoftness2) : u_xlat16_8.xy;
        u_xlat16_17.xy = (u_xlatb5.y) ? vec2(_ShadowTransitionRange3, _ShadowTransitionSoftness3) : u_xlat16_17.xy;
        u_xlat16_17.xy = (u_xlatb5.z) ? vec2(_ShadowTransitionRange4, _ShadowTransitionSoftness4) : u_xlat16_17.xy;
        u_xlat16_17.xy = (u_xlatb5.w) ? vec2(_ShadowTransitionRange5, _ShadowTransitionSoftness5) : u_xlat16_17.xy;
        u_xlat16_37 = (-u_xlat16_37) + _LightArea;
        u_xlat16_37 = u_xlat16_37 / u_xlat16_17.x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(u_xlat16_37>=1.0);
#else
        u_xlatb24 = u_xlat16_37>=1.0;
#endif
        u_xlat16_35 = u_xlat16_37 + 0.00999999978;
        u_xlat16_35 = log2(u_xlat16_35);
        u_xlat16_35 = u_xlat16_35 * u_xlat16_17.y;
        u_xlat16_35 = exp2(u_xlat16_35);
        u_xlat35 = min(u_xlat16_35, 1.0);
        u_xlat24 = (u_xlatb24) ? 1.0 : u_xlat35;
        u_xlat13.x = (u_xlatb13) ? u_xlat24 : 1.0;
        u_xlat16_37 = 0.0;
    } else {
        u_xlat13.x = 0.0;
        u_xlat16_37 = 1.0;
    //ENDIF
    }
    u_xlat24 = (-u_xlat16_37) + 1.0;
#ifdef UNITY_ADRENO_ES3
    { bool cond = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(vs_TEXCOORD4); u_xlati35 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati35 = int((vec4(0.0, 0.0, 0.0, 0.0)!=vec4(vs_TEXCOORD4)) ? 0xFFFFFFFFu : uint(0u));
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(u_xlat33==1.0);
#else
    u_xlatb33 = u_xlat33==1.0;
#endif
    if(u_xlatb33){
#ifdef UNITY_ADRENO_ES3
        u_xlatb14 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex));
#else
        u_xlatb14 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex);
#endif
        u_xlat16_7.xyz = vec3(_FirstShadowMultColor.xxyz.y + (-_CoolShadowMultColor.x), _FirstShadowMultColor.xxyz.z + (-_CoolShadowMultColor.y), float(_FirstShadowMultColor.z) + (-_CoolShadowMultColor.z));
        u_xlat7.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_7.xyz + _CoolShadowMultColor.xyz;
        u_xlat16_17.xyz = (bool(u_xlatb14)) ? u_xlat7.xyz : vec3(_FirstShadowMultColor.x, _FirstShadowMultColor.y, _FirstShadowMultColor.z);
    } else {
        if(u_xlatb5.x){
#ifdef UNITY_ADRENO_ES3
            u_xlatb14 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex));
#else
            u_xlatb14 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex);
#endif
            u_xlat16_7.xyz = _FirstShadowMultColor2.xyz + (-_CoolShadowMultColor2.xyz);
            u_xlat7.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_7.xyz + _CoolShadowMultColor2.xyz;
            u_xlat16_17.xyz = (bool(u_xlatb14)) ? u_xlat7.xyz : _FirstShadowMultColor2.xyz;
        } else {
#ifdef UNITY_ADRENO_ES3
            u_xlatb14 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex));
#else
            u_xlatb14 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex);
#endif
            u_xlat16_7.xyz = _FirstShadowMultColor3.xyz + (-_CoolShadowMultColor3.xyz);
            u_xlat7.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_7.xyz + _CoolShadowMultColor3.xyz;
            u_xlat16_8.xyz = (bool(u_xlatb14)) ? u_xlat7.xyz : _FirstShadowMultColor3.xyz;
            u_xlat16_7.xyz = _FirstShadowMultColor4.xyz + (-_CoolShadowMultColor4.xyz);
            u_xlat7.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_7.xyz + _CoolShadowMultColor4.xyz;
            u_xlat16_9.xyz = (bool(u_xlatb14)) ? u_xlat7.xyz : _FirstShadowMultColor4.xyz;
            u_xlat16_7.xyz = _FirstShadowMultColor5.xyz + (-_CoolShadowMultColor5.xyz);
            u_xlat7.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_7.xyz + _CoolShadowMultColor5.xyz;
            u_xlat16_10.xyz = (bool(u_xlatb14)) ? u_xlat7.xyz : _FirstShadowMultColor5.xyz;
            u_xlat16_9.xyz = (u_xlatb5.z) ? u_xlat16_9.xyz : u_xlat16_10.xyz;
            u_xlat16_17.xyz = (u_xlatb5.y) ? u_xlat16_8.xyz : u_xlat16_9.xyz;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition));
#else
    u_xlatb14 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition);
#endif
    u_xlati36 = ~u_xlati35;
    u_xlati14 = u_xlatb14 ? u_xlati36 : int(0);
    u_xlat16_7.xyz = u_xlat16_17.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat7.xyz = u_xlat13.xxx * u_xlat16_7.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_17.xyz = (int(u_xlati14) != 0) ? u_xlat7.xyz : u_xlat16_17.xyz;
    u_xlat16_37 = (u_xlatb5.z) ? _Shininess4 : _Shininess5;
    u_xlat16_8.x = (u_xlatb5.z) ? _SpecMulti4 : _SpecMulti5;
    u_xlat16_37 = (u_xlatb5.y) ? _Shininess3 : u_xlat16_37;
    u_xlat16_8.x = (u_xlatb5.y) ? _SpecMulti3 : u_xlat16_8.x;
    u_xlat16_37 = (u_xlatb5.x) ? _Shininess2 : u_xlat16_37;
    u_xlat16_8.x = (u_xlatb5.x) ? _SpecMulti2 : u_xlat16_8.x;
    u_xlat16_37 = (u_xlatb33) ? _Shininess : u_xlat16_37;
    u_xlat16_8.x = (u_xlatb33) ? _SpecMulti : u_xlat16_8.x;
    u_xlat16_19.x = dot(vs_TEXCOORD1.xyz, u_xlat0.xyz);
    u_xlat16_19.x = max(u_xlat16_19.x, 0.00100000005);
    u_xlat16_19.x = log2(u_xlat16_19.x);
    u_xlat16_37 = u_xlat16_37 * u_xlat16_19.x;
    u_xlat16_37 = exp2(u_xlat16_37);
    u_xlat0.x = (-u_xlat10_3.z) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat0.x<u_xlat16_37);
#else
    u_xlatb0 = u_xlat0.x<u_xlat16_37;
#endif
    u_xlat16_8.xyz = u_xlat16_8.xxx * _SpecularColor.xyz;
    u_xlat16_8.xyz = u_xlat10_3.xxx * u_xlat16_8.xyz;
    u_xlat16_8.xyz = (bool(u_xlatb0)) ? u_xlat16_8.xyz : vec3(0.0, 0.0, 0.0);
    u_xlat16_4.xyz = vec3(u_xlat16_4.x * _EmissionColor_MHY.xxyz.y, u_xlat16_4.y * _EmissionColor_MHY.xxyz.z, u_xlat16_4.z * float(_EmissionColor_MHY.z));
    u_xlat0.xyz = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(u_xlat24==1.0);
#else
    u_xlatb33 = u_xlat24==1.0;
#endif
    u_xlati33 = int(uint(u_xlatb33) * 0xffffffffu | uint(u_xlati35));
    u_xlat13.xyz = u_xlat0.xyz * u_xlat16_17.xyz;
    u_xlat0.xyz = (int(u_xlati33) != 0) ? u_xlat13.xyz : u_xlat0.xyz;
    u_xlat0.xyz = u_xlat16_8.xyz + u_xlat0.xyz;
    u_xlat13.xy = vs_TEXCOORD0.zw * _FlowMap01_ST.xy + _FlowMap01_ST.zw;
    u_xlat16_8.x = _Time.y * _FlowMap01_Uspeed + u_xlat13.x;
    u_xlat16_8.y = _Time.y * _FlowMap01_Vspeed + u_xlat13.y;
    u_xlat13.xy = vs_TEXCOORD0.zw * _Noise_ST.xy + _Noise_ST.zw;
    u_xlat16_9.x = _Time.y * _Noise_Uspeed + u_xlat13.x;
    u_xlat16_9.y = _Time.y * _Noise_Vspeed + u_xlat13.y;
    u_xlat10_33 = textureLod(_Noise, u_xlat16_9.xy, 0.0).x;
    u_xlat16_37 = _MaskOffset01 * 1.39999998 + -0.699999988;
    u_xlat16_17.x = u_xlat10_33 * _NoiseIntensity;
    u_xlat13.xy = vs_TEXCOORD0.zw * _FlowMap02_ST.xy + _FlowMap02_ST.zw;
    u_xlat16_9.x = _Time.y * _FlowMap02_Uspeed + u_xlat13.x;
    u_xlat16_9.y = _Time.y * _FlowMap02_Vspeed + u_xlat13.y;
    u_xlat16_39 = _MaskOffset02 * 1.39999998 + -0.699999988;
    u_xlat16_10.xyz = _FlowMapColor01.xyz * vec3(_FlowScale01);
    u_xlat16_8.xy = vec2(u_xlat10_33) * vec2(vec2(_NoiseFlowIntensity, _NoiseFlowIntensity)) + u_xlat16_8.xy;
    u_xlat10_13 = textureLod(_FlowMap01, u_xlat16_8.xy, 0.0).x;
    u_xlat16_13.xyz = vec3(u_xlat10_13) * u_xlat16_10.xyz;
    u_xlat16_8.x = (-vs_TEXCOORD0.z) + 1.0;
    u_xlat16_1.x = u_xlat16_37 + u_xlat16_8.x;
    u_xlat16_1.yw = vec2(u_xlat10_33) * vec2(vec2(_NoiseIntensity, _NoiseIntensity)) + (-vs_TEXCOORD0.ww);
    u_xlat16_17.y = 1.0;
    u_xlat16_19.xy = u_xlat16_1.xy + u_xlat16_17.xy;
    u_xlat10_3.x = textureLod(_Mask01, u_xlat16_19.xy, 0.0).x;
    u_xlat16_3 = max(u_xlat10_3.x, 9.99999975e-05);
    u_xlat16_3 = log2(u_xlat16_3);
    u_xlat16_3 = u_xlat16_3 * _Mask01_Power;
    u_xlat16_3 = exp2(u_xlat16_3);
    u_xlat16_19.xyz = _FlowMapColor02.xyz * vec3(_FlowScale02);
    u_xlat16_9.xy = vec2(u_xlat10_33) * vec2(vec2(_NoiseFlowIntensity, _NoiseFlowIntensity)) + u_xlat16_9.xy;
    u_xlat10_33 = textureLod(_FlowMap02, u_xlat16_9.xy, 0.0).x;
    u_xlat16_14.xyz = vec3(u_xlat10_33) * u_xlat16_19.xyz;
    u_xlat16_1.z = u_xlat16_39 + u_xlat16_8.x;
    u_xlat16_17.xy = vec2(u_xlat16_1.z + u_xlat16_17.x, u_xlat16_1.w + u_xlat16_17.y);
    u_xlat10_33 = textureLod(_Mask02, u_xlat16_17.xy, 0.0).x;
    u_xlat16_33 = max(u_xlat10_33, 9.99999975e-05);
    u_xlat16_33 = log2(u_xlat16_33);
    u_xlat16_33 = u_xlat16_33 * _Mask02_Power;
    u_xlat16_33 = exp2(u_xlat16_33);
    u_xlat16_14.xyz = vec3(u_xlat16_33) * u_xlat16_14.xyz;
    u_xlat16_13.xyz = u_xlat16_13.xyz * vec3(u_xlat16_3) + u_xlat16_14.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(_EmissionScaler) + u_xlat16_13.xyz;
    u_xlat3.xyz = (-u_xlat0.xyz) + u_xlat16_4.xyz;
    u_xlat3.xyz = u_xlat16_6.xxx * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat7.xy = vs_TEXCOORD0.zw * _DissovleNoise_ST.xy + _DissovleNoise_ST.zw;
    u_xlat16_4.x = _Time.y * _DissolveNoise_Uspeed + u_xlat7.x;
    u_xlat16_4.y = _Time.y * _DissolveNoise_Vspeed + u_xlat7.y;
    u_xlat10_33 = textureLod(_DissovleNoise, u_xlat16_4.xy, 0.0).x;
    u_xlat33 = u_xlat10_33 * _DissovleNoiseScale + vs_TEXCOORD0.z;
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(_Dissovle>=u_xlat33);
#else
    u_xlatb33 = _Dissovle>=u_xlat33;
#endif
    u_xlat0.xyz = (u_xlatb2.x) ? u_xlat3.xyz : u_xlat0.xyz;
    u_xlat0.xyz = u_xlat16_13.xyz + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(0.00999999978<u_xlat16_6.x);
#else
    u_xlatb2.x = 0.00999999978<u_xlat16_6.x;
#endif
    if((int(u_xlatb33) * int(0xffffffffu))==0){discard;}
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn));
#else
    u_xlatb33 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn);
#endif
    u_xlat13.xyz = u_xlat0.xyz * vec3(vec3(_ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness));
    u_xlat3.xyz = vec3(vec3(_ES_CharacterPointLightWholeIntensity, _ES_CharacterPointLightWholeIntensity, _ES_CharacterPointLightWholeIntensity)) * mhy_CharacterPointLightColor.xyz;
    u_xlat7.xyz = _ES_CharacterMainLightColor.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.xyz = min(max(u_xlat7.xyz, 0.0), 1.0);
#else
    u_xlat7.xyz = clamp(u_xlat7.xyz, 0.0, 1.0);
#endif
    u_xlat36 = (-mhy_CharacterPointLightColor.w) + 1.0;
    u_xlat3.xyz = u_xlat7.xyz * vec3(u_xlat36) + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat3.xyz = vec3(vec3(_ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio)) * u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat13.xyz = u_xlat13.xyz * u_xlat3.xyz;
    u_xlat3.xyz = _ES_CharacterAmbientLightColor.xyz * vec3(_ES_CharacterAmbientLightRatio);
    u_xlat16_4.xyz = u_xlat13.xyz * vec3(10.0, 10.0, 10.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.xyz = min(max(u_xlat16_4.xyz, 0.0), 1.0);
#else
    u_xlat16_4.xyz = clamp(u_xlat16_4.xyz, 0.0, 1.0);
#endif
    u_xlat13.xyz = u_xlat3.xyz * u_xlat16_4.xyz + u_xlat13.xyz;
    u_xlat16_4.xyz = (bool(u_xlatb33)) ? u_xlat13.xyz : u_xlat0.xyz;
    u_xlat16_17.xyz = u_xlat0.xyz + (-u_xlat16_4.xyz);
    u_xlat16_17.xyz = u_xlat16_6.xxx * u_xlat16_17.xyz + u_xlat16_4.xyz;
    u_xlat16_0.xyz = (u_xlatb2.x) ? u_xlat16_17.xyz : u_xlat16_4.xyz;
    u_xlat16_4.x = max(u_xlat16_0.z, u_xlat16_0.y);
    u_xlat16_1.w = max(u_xlat16_0.x, u_xlat16_4.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(1.0<u_xlat16_1.w);
#else
    u_xlatb2.x = 1.0<u_xlat16_1.w;
#endif
    u_xlat16_1.xyz = u_xlat16_0.xyz / u_xlat16_1.www;
    u_xlat16_0.w = 1.0;
    u_xlat16_0 = (u_xlatb2.x) ? u_xlat16_1 : u_xlat16_0;
    u_xlat16_4.x = min(u_xlat16_0.w, 1.10000002);
    u_xlat16_15 = u_xlat16_0.w + (-u_xlat16_4.x);
    u_xlat16_4.x = u_xlat16_6.x * u_xlat16_15 + u_xlat16_4.x;
    u_xlat16_2 = u_xlat16_4.x * 0.0500000007;
    SV_Target0.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb13 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb13 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_4.x = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb13) ? u_xlat16_4.x : 0.0;
    SV_Target0.w = 0.0156862754;
    SV_Target1.xyz = u_xlat16_0.xyz;
    SV_Target1.w = u_xlat16_2;
    SV_Target2.xy = vec2(0.0, 0.0);
    SV_Target2.w = vs_TEXCOORD4;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "LINE_INTERPOLATION" "MAIN_TEX_COLORING_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _MainTex_ST;
uniform 	float _CharacterAmbientSensorShadowOn;
uniform 	vec4 _AmbientSensorUVs;
uniform 	float _UseClipPlane;
uniform 	float _ClipPlaneWorld;
uniform 	vec4 _ClipPlane;
uniform 	vec4 mhy_AvatarLightDir;
uniform 	vec4 mhy_CharacterOverrideLightDir;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
struct unity_Builtins1Array_Type {
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw1 {
	unity_Builtins1Array_Type unity_Builtins1Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform lowp sampler2D _CharacterAmbientSensorTex;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp float vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD6;
flat out highp uint vs_SV_InstanceID0;
vec3 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump float u_xlat16_4;
vec3 u_xlat5;
int u_xlati5;
bool u_xlatb5;
float u_xlat6;
mediump float u_xlat16_9;
float u_xlat10;
bool u_xlatb10;
bool u_xlatb11;
float u_xlat15;
bool u_xlatb15;
float u_xlat16;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
#ifdef UNITY_ADRENO_ES3
    u_xlatb5 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseClipPlane));
#else
    u_xlatb5 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseClipPlane);
#endif
    if(u_xlatb5){
#ifdef UNITY_ADRENO_ES3
        u_xlatb5 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ClipPlaneWorld));
#else
        u_xlatb5 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ClipPlaneWorld);
#endif
        if(u_xlatb5){
            u_xlati5 = u_xlati0 << 2;
#ifdef UNITY_ADRENO_ES3
            u_xlatb10 = !!(abs(_ClipPlane.w)<0.00100000005);
#else
            u_xlatb10 = abs(_ClipPlane.w)<0.00100000005;
#endif
            u_xlat1.xyz = _ClipPlane.www * _ClipPlane.xyz;
            u_xlat1.xyz = (bool(u_xlatb10)) ? vec3(0.0, 0.0, 0.0) : u_xlat1.xyz;
            u_xlat2 = u_xlat1.yyyy * unity_Builtins1Array[u_xlati5 / 4].hlslcc_mtx4x4unity_WorldToObjectArray[1];
            u_xlat2 = unity_Builtins1Array[u_xlati5 / 4].hlslcc_mtx4x4unity_WorldToObjectArray[0] * u_xlat1.xxxx + u_xlat2;
            u_xlat1 = unity_Builtins1Array[u_xlati5 / 4].hlslcc_mtx4x4unity_WorldToObjectArray[2] * u_xlat1.zzzz + u_xlat2;
            u_xlat1 = u_xlat1 + unity_Builtins1Array[u_xlati5 / 4].hlslcc_mtx4x4unity_WorldToObjectArray[3];
            u_xlat1.xyz = u_xlat1.xyz / u_xlat1.www;
            u_xlat2.xyz = _ClipPlane.yyy * unity_Builtins1Array[u_xlati5 / 4].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz;
            u_xlat2.xyz = unity_Builtins1Array[u_xlati5 / 4].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz * _ClipPlane.xxx + u_xlat2.xyz;
            u_xlat5.xyz = unity_Builtins1Array[u_xlati5 / 4].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz * _ClipPlane.zzz + u_xlat2.xyz;
            u_xlat1.x = dot(u_xlat1.xyz, u_xlat5.xyz);
            u_xlat6 = dot(in_POSITION0.xyz, u_xlat5.xyz);
#ifdef UNITY_ADRENO_ES3
            u_xlatb11 = !!(u_xlat6<u_xlat1.x);
#else
            u_xlatb11 = u_xlat6<u_xlat1.x;
#endif
            u_xlat1.x = (-u_xlat1.x) + u_xlat6;
            u_xlat2.xyz = (-u_xlat1.xxx) * u_xlat5.xyz + in_POSITION0.xyz;
            u_xlat2.w = 0.0;
            u_xlat3.xyz = in_POSITION0.xyz;
            u_xlat3.w = in_COLOR0.w;
            u_xlat1 = (bool(u_xlatb11)) ? u_xlat2 : u_xlat3;
            u_xlat16_4 = u_xlat1.w;
        } else {
            u_xlat5.x = dot(in_POSITION0.xyz, _ClipPlane.xyz);
            u_xlat10 = _ClipPlane.w + -0.00999999978;
#ifdef UNITY_ADRENO_ES3
            u_xlatb10 = !!(u_xlat5.x<u_xlat10);
#else
            u_xlatb10 = u_xlat5.x<u_xlat10;
#endif
            u_xlat5.x = u_xlat5.x + (-_ClipPlane.w);
            u_xlat2.xyz = (-u_xlat5.xxx) * _ClipPlane.xyz + in_POSITION0.xyz;
            u_xlat2.w = 0.0;
            u_xlat3.xyz = in_POSITION0.xyz;
            u_xlat3.w = in_COLOR0.w;
            u_xlat1 = (bool(u_xlatb10)) ? u_xlat2 : u_xlat3;
            u_xlat16_4 = u_xlat1.w;
        //ENDIF
        }
    } else {
        u_xlat1.xyz = in_POSITION0.xyz;
        u_xlat16_4 = in_COLOR0.w;
    //ENDIF
    }
    u_xlati0 = u_xlati0 << 2;
    u_xlat2.xyw = (-_WorldSpaceCameraPos.xyz) + unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat3.x = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].x;
    u_xlat3.y = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].x;
    u_xlat3.z = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].x;
    u_xlat3.w = u_xlat2.x;
    u_xlat1.w = 1.0;
    u_xlat5.x = dot(u_xlat3, u_xlat1);
    u_xlat3.x = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].y;
    u_xlat3.y = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].y;
    u_xlat3.z = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].y;
    u_xlat3.w = u_xlat2.y;
    u_xlat10 = dot(u_xlat3, u_xlat1);
    u_xlat2.x = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].z;
    u_xlat2.y = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].z;
    u_xlat2.z = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].z;
    u_xlat15 = dot(u_xlat2, u_xlat1);
    u_xlat2.x = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].w;
    u_xlat2.y = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].w;
    u_xlat2.z = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].w;
    u_xlat2.w = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3].w;
    u_xlat16 = dot(u_xlat2, u_xlat1);
    u_xlat2 = vec4(u_xlat10) * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat5.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVPZero[2] * vec4(u_xlat15) + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVPZero[3] * vec4(u_xlat16) + u_xlat2;
    u_xlat3 = u_xlat1.yyyy * unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat3 = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * u_xlat1.xxxx + u_xlat3;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * u_xlat1.zzzz + u_xlat3;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3] * in_POSITION0.wwww + u_xlat1;
    vs_TEXCOORD3.xyz = u_xlat1.xyz / u_xlat1.www;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.xz = u_xlat2.xw * vec2(0.5, 0.5);
    u_xlat5.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat1.w = u_xlat5.x * 0.5;
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat5.xyz = in_NORMAL0.yyy * unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat5.xyz = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_NORMAL0.xxx + u_xlat5.xyz;
    u_xlat0.xyz = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_NORMAL0.zzz + u_xlat5.xyz;
    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(0.5<mhy_CharacterOverrideLightDir.w);
#else
    u_xlatb15 = 0.5<mhy_CharacterOverrideLightDir.w;
#endif
    u_xlat1.x = mhy_CharacterOverrideLightDir.x;
    u_xlat1.yz = (-mhy_CharacterOverrideLightDir.yz);
    u_xlat1.xyz = (bool(u_xlatb15)) ? u_xlat1.xyz : mhy_AvatarLightDir.xyz;
    u_xlat16_9 = dot(u_xlat0.xyz, u_xlat1.xyz);
    vs_TEXCOORD1.w = u_xlat16_9 * 0.497500002 + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_CharacterAmbientSensorShadowOn));
#else
    u_xlatb15 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_CharacterAmbientSensorShadowOn);
#endif
    if(u_xlatb15){
        u_xlat15 = textureLod(_CharacterAmbientSensorTex, _AmbientSensorUVs.xy, 0.0).x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb15 = !!(0.5<u_xlat15);
#else
        u_xlatb15 = 0.5<u_xlat15;
#endif
        vs_TEXCOORD4 = u_xlatb15 ? 1.0 : float(0.0);
    } else {
        vs_TEXCOORD4 = 0.0;
    //ENDIF
    }
    gl_Position = u_xlat2;
    vs_COLOR0.xyz = in_COLOR0.xyz;
    vs_COLOR0.w = u_xlat16_4;
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    vs_TEXCOORD2.zw = u_xlat2.zw;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	mediump vec4 _Color;
uniform 	float _MainTexAlphaUse;
uniform 	mediump float _MainTexAlphaCutoff;
uniform 	mediump vec4 _MainTexTintColor;
uniform 	float _UseVertexColorAO;
uniform 	mediump float _LightArea;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	float _UseCoolShadowColorOrTex;
uniform 	mediump vec3 _CoolShadowMultColor;
uniform 	float _UseShadowTransition;
uniform 	float _ShadowTransitionRange;
uniform 	float _ShadowTransitionSoftness;
uniform 	mediump vec3 _SpecularColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	float _FaceBlushStrength;
uniform 	mediump vec3 _FaceBlushColor;
uniform 	mediump float _EmissionScaler;
uniform 	mediump vec3 _EmissionColor_MHY;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _TextureBiasWhenDithering;
uniform 	float _UseClipPlane;
uniform 	float _ES_CharacterAmbientLightOn;
uniform 	float _ES_CharacterAmbientBrightness;
uniform 	vec3 _ES_CharacterMainLightColor;
uniform 	vec3 _ES_CharacterAmbientLightColor;
uniform 	float _ES_CharacterMainLightRatio;
uniform 	float _ES_CharacterAmbientLightRatio;
uniform 	float _ES_CharacterColorTone;
uniform 	float _ES_CharacterPointLightWholeIntensity;
uniform 	vec4 mhy_AvatarLightDir;
uniform 	vec4 mhy_CharacterPointLightColor;
uniform 	vec4 mhy_CharacterOverrideLightDir;
uniform 	mediump vec4 _FlowMapColor01;
uniform 	mediump float _FlowScale01;
uniform 	mediump float _FlowMap01_Uspeed;
uniform 	vec4 _FlowMap01_ST;
uniform 	mediump float _FlowMap01_Vspeed;
uniform 	mediump float _Noise_Uspeed;
uniform 	vec4 _Noise_ST;
uniform 	mediump float _Noise_Vspeed;
uniform 	mediump float _NoiseFlowIntensity;
uniform 	mediump float _MaskOffset01;
uniform 	mediump float _NoiseIntensity;
uniform 	mediump float _Mask01_Power;
uniform 	mediump vec4 _FlowMapColor02;
uniform 	mediump float _FlowScale02;
uniform 	mediump float _FlowMap02_Uspeed;
uniform 	vec4 _FlowMap02_ST;
uniform 	mediump float _FlowMap02_Vspeed;
uniform 	mediump float _MaskOffset02;
uniform 	mediump float _Mask02_Power;
uniform 	mediump float _DissolveNoise_Uspeed;
uniform 	vec4 _DissovleNoise_ST;
uniform 	mediump float _DissolveNoise_Vspeed;
uniform 	mediump float _DissovleNoiseScale;
uniform 	mediump float _Dissovle;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _Noise;
uniform lowp sampler2D _FlowMap01;
uniform lowp sampler2D _Mask01;
uniform lowp sampler2D _FlowMap02;
uniform lowp sampler2D _Mask02;
uniform lowp sampler2D _DissovleNoise;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp float vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
lowp float u_xlat10_2;
int u_xlati2;
bvec4 u_xlatb2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
lowp float u_xlat10_3;
int u_xlati3;
bool u_xlatb3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec2 u_xlat16_7;
mediump vec3 u_xlat16_8;
vec3 u_xlat9;
bool u_xlatb10;
vec3 u_xlat12;
mediump vec3 u_xlat16_12;
lowp float u_xlat10_12;
int u_xlati12;
bool u_xlatb12;
vec3 u_xlat13;
mediump vec3 u_xlat16_13;
mediump float u_xlat16_14;
mediump vec2 u_xlat16_15;
mediump vec2 u_xlat16_16;
bvec2 u_xlatb20;
float u_xlat22;
bool u_xlatb22;
mediump vec2 u_xlat16_25;
float u_xlat30;
bool u_xlatb30;
float u_xlat32;
mediump float u_xlat16_32;
lowp float u_xlat10_32;
int u_xlati32;
bool u_xlatb32;
float u_xlat33;
mediump float u_xlat16_34;
mediump float u_xlat16_35;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseClipPlane));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseClipPlane);
#endif
    u_xlat16_1.x = vs_COLOR0.w + -0.00999999978;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(u_xlat16_1.x<0.0);
#else
    u_xlatb10 = u_xlat16_1.x<0.0;
#endif
    u_xlatb0 = u_xlatb0 && u_xlatb10;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(_DitherAlpha<0.949999988);
#else
        u_xlatb0 = _DitherAlpha<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb20.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb20.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb20.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = _DitherAlpha * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + -0.00999999978;
#ifdef UNITY_ADRENO_ES3
            u_xlatb0 = !!(u_xlat0.x<0.0);
#else
            u_xlatb0 = u_xlat0.x<0.0;
#endif
            if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(0.5<mhy_CharacterOverrideLightDir.w);
#else
    u_xlatb2.x = 0.5<mhy_CharacterOverrideLightDir.w;
#endif
    u_xlat3.x = mhy_CharacterOverrideLightDir.x;
    u_xlat3.yz = (-mhy_CharacterOverrideLightDir.yz);
    u_xlat2.xyz = (u_xlatb2.x) ? u_xlat3.xyz : mhy_AvatarLightDir.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat30) + u_xlat2.xyz;
    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
    u_xlat30 = _TextureBiasWhenDithering + -1.0;
    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy, u_xlat30);
    u_xlat16_4.xyz = u_xlat1.xyz * _MainTexTintColor.xyz;
    u_xlat16_5.xyz = u_xlat16_4.xyz + u_xlat16_4.xyz;
    u_xlat16_6.xyz = u_xlat1.xyz + _MainTexTintColor.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_6.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(-4.0, -4.0, -4.0) + u_xlat16_6.xyz;
    u_xlatb2 = lessThan(vec4(0.5, 0.5, 0.5, 0.00999999978), u_xlat1);
    u_xlat16_6.x = (u_xlatb2.x) ? float(1.0) : float(0.0);
    u_xlat16_6.y = (u_xlatb2.y) ? float(1.0) : float(0.0);
    u_xlat16_6.z = (u_xlatb2.z) ? float(1.0) : float(0.0);
    u_xlat16_4.xyz = u_xlat16_4.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat16_4.xyz = u_xlat16_6.xyz * u_xlat16_4.xyz + u_xlat16_5.xyz;
    u_xlatb2.xyz = equal(vec4(_MainTexAlphaUse), vec4(3.0, 1.0, 2.0, 0.0)).xyz;
    u_xlat30 = u_xlat1.w * _FaceBlushStrength;
    u_xlat16_3.xyz = (-u_xlat16_4.xyz) + _FaceBlushColor.xyz;
    u_xlat3.xyz = vec3(u_xlat30) * u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat16_4.xyz = (u_xlatb2.x) ? u_xlat3.xyz : u_xlat16_4.xyz;
    u_xlat16_34 = u_xlat1.w + (-_MainTexAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(u_xlat16_34<0.0);
#else
    u_xlatb30 = u_xlat16_34<0.0;
#endif
    u_xlatb30 = u_xlatb2.y && u_xlatb30;
    if((int(u_xlatb30) * int(0xffffffffu))!=0){discard;}
    u_xlat16_4.xyz = u_xlat16_4.xyz * _Color.xyz;
    u_xlatb30 = u_xlatb2.w && u_xlatb2.z;
    u_xlat16_34 = (u_xlatb30) ? u_xlat1.w : 0.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorAO));
#else
    u_xlatb2.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorAO);
#endif
    u_xlat16_5.x = vs_COLOR0.x * 0.5;
    u_xlat16_5.x = (u_xlatb2.x) ? u_xlat16_5.x : 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat16_5.x<0.0500000007);
#else
    u_xlatb12 = u_xlat16_5.x<0.0500000007;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(0.949999988<u_xlat16_5.x);
#else
    u_xlatb22 = 0.949999988<u_xlat16_5.x;
#endif
    u_xlat32 = u_xlat16_5.x + vs_TEXCOORD1.w;
    u_xlat32 = u_xlat32 * 0.5;
    u_xlat16_5.x = (u_xlatb22) ? 1.0 : u_xlat32;
    u_xlat16_5.x = (u_xlatb12) ? 0.0 : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb2.x) ? u_xlat16_5.x : vs_TEXCOORD1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(u_xlat16_5.x<_LightArea);
#else
    u_xlatb2.x = u_xlat16_5.x<_LightArea;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition));
#else
    u_xlatb12 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition);
#endif
    u_xlat16_5.x = (-u_xlat16_5.x) + _LightArea;
    u_xlat16_5.x = u_xlat16_5.x / _ShadowTransitionRange;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(u_xlat16_5.x>=1.0);
#else
    u_xlatb22 = u_xlat16_5.x>=1.0;
#endif
    u_xlat16_32 = u_xlat16_5.x + 0.00999999978;
    u_xlat16_32 = log2(u_xlat16_32);
    u_xlat32 = u_xlat16_32 * _ShadowTransitionSoftness;
    u_xlat32 = exp2(u_xlat32);
    u_xlat32 = min(u_xlat32, 1.0);
    u_xlat22 = (u_xlatb22) ? 1.0 : u_xlat32;
    u_xlat22 = (u_xlatb12) ? u_xlat22 : 1.0;
    u_xlat22 = u_xlatb2.x ? u_xlat22 : float(0.0);
#ifdef UNITY_ADRENO_ES3
    { bool cond = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(vs_TEXCOORD4); u_xlati32 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati32 = int((vec4(0.0, 0.0, 0.0, 0.0)!=vec4(vs_TEXCOORD4)) ? 0xFFFFFFFFu : uint(0u));
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex));
#else
    u_xlatb3 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex);
#endif
    u_xlat16_13.xyz = vec3(_FirstShadowMultColor.xxyz.y + (-_CoolShadowMultColor.x), _FirstShadowMultColor.xxyz.z + (-_CoolShadowMultColor.y), float(_FirstShadowMultColor.z) + (-_CoolShadowMultColor.z));
    u_xlat13.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_13.xyz + _CoolShadowMultColor.xyz;
    u_xlat16_5.xyz = (bool(u_xlatb3)) ? u_xlat13.xyz : vec3(_FirstShadowMultColor.x, _FirstShadowMultColor.y, _FirstShadowMultColor.z);
    u_xlati3 = ~u_xlati32;
    u_xlati12 = u_xlatb12 ? u_xlati3 : int(0);
    u_xlat16_3.xyz = u_xlat16_5.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat3.xyz = vec3(u_xlat22) * u_xlat16_3.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_5.xyz = (int(u_xlati12) != 0) ? u_xlat3.xyz : u_xlat16_5.xyz;
    u_xlat16_35 = dot(vs_TEXCOORD1.xyz, u_xlat0.xyz);
    u_xlat16_35 = max(u_xlat16_35, 0.00100000005);
    u_xlat16_35 = log2(u_xlat16_35);
    u_xlat16_35 = u_xlat16_35 * _Shininess;
    u_xlat16_35 = exp2(u_xlat16_35);
    u_xlat16_6.xyz = vec3(u_xlat16_35) * _SpecularColor.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(_SpecMulti);
    u_xlat16_4.xyz = vec3(u_xlat16_4.x * _EmissionColor_MHY.xxyz.y, u_xlat16_4.y * _EmissionColor_MHY.xxyz.z, u_xlat16_4.z * float(_EmissionColor_MHY.z));
    u_xlat0.xyz = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0).xyz;
    u_xlati2 = int(uint(u_xlatb2.x) * 0xffffffffu | uint(u_xlati32));
    u_xlat12.xyz = u_xlat0.xyz * u_xlat16_5.xyz;
    u_xlat0.xyz = (int(u_xlati2) != 0) ? u_xlat12.xyz : u_xlat0.xyz;
    u_xlat0.xyz = u_xlat16_6.xyz * vec3(0.5, 0.5, 0.5) + u_xlat0.xyz;
    u_xlat2.xy = vs_TEXCOORD0.zw * _FlowMap01_ST.xy + _FlowMap01_ST.zw;
    u_xlat16_5.x = _Time.y * _FlowMap01_Uspeed + u_xlat2.x;
    u_xlat16_5.y = _Time.y * _FlowMap01_Vspeed + u_xlat2.y;
    u_xlat2.xy = vs_TEXCOORD0.zw * _Noise_ST.xy + _Noise_ST.zw;
    u_xlat16_6.x = _Time.y * _Noise_Uspeed + u_xlat2.x;
    u_xlat16_6.y = _Time.y * _Noise_Vspeed + u_xlat2.y;
    u_xlat10_2 = textureLod(_Noise, u_xlat16_6.xy, 0.0).x;
    u_xlat16_25.x = _MaskOffset01 * 1.39999998 + -0.699999988;
    u_xlat16_16.x = u_xlat10_2 * _NoiseIntensity;
    u_xlat12.xy = vs_TEXCOORD0.zw * _FlowMap02_ST.xy + _FlowMap02_ST.zw;
    u_xlat16_7.x = _Time.y * _FlowMap02_Uspeed + u_xlat12.x;
    u_xlat16_7.y = _Time.y * _FlowMap02_Vspeed + u_xlat12.y;
    u_xlat16_25.y = _MaskOffset02 * 1.39999998 + -0.699999988;
    u_xlat16_8.xyz = _FlowMapColor01.xyz * vec3(_FlowScale01);
    u_xlat16_5.xy = vec2(u_xlat10_2) * vec2(vec2(_NoiseFlowIntensity, _NoiseFlowIntensity)) + u_xlat16_5.xy;
    u_xlat10_12 = textureLod(_FlowMap01, u_xlat16_5.xy, 0.0).x;
    u_xlat16_12.xyz = vec3(u_xlat10_12) * u_xlat16_8.xyz;
    u_xlat16_5.x = (-vs_TEXCOORD0.z) + 1.0;
    u_xlat16_1.xz = u_xlat16_25.xy + u_xlat16_5.xx;
    u_xlat16_1.yw = vec2(u_xlat10_2) * vec2(vec2(_NoiseIntensity, _NoiseIntensity)) + (-vs_TEXCOORD0.ww);
    u_xlat16_16.y = 1.0;
    u_xlat16_15.xy = u_xlat16_1.xy + u_xlat16_16.xy;
    u_xlat10_3 = textureLod(_Mask01, u_xlat16_15.xy, 0.0).x;
    u_xlat16_3.x = max(u_xlat10_3, 9.99999975e-05);
    u_xlat16_3.x = log2(u_xlat16_3.x);
    u_xlat16_3.x = u_xlat16_3.x * _Mask01_Power;
    u_xlat16_3.x = exp2(u_xlat16_3.x);
    u_xlat16_8.xyz = _FlowMapColor02.xyz * vec3(_FlowScale02);
    u_xlat16_15.xy = vec2(u_xlat10_2) * vec2(vec2(_NoiseFlowIntensity, _NoiseFlowIntensity)) + u_xlat16_7.xy;
    u_xlat10_2 = textureLod(_FlowMap02, u_xlat16_15.xy, 0.0).x;
    u_xlat16_13.xyz = vec3(u_xlat10_2) * u_xlat16_8.xyz;
    u_xlat16_5.xy = vec2(u_xlat16_1.z + u_xlat16_16.x, u_xlat16_1.w + u_xlat16_16.y);
    u_xlat10_2 = textureLod(_Mask02, u_xlat16_5.xy, 0.0).x;
    u_xlat16_2.x = max(u_xlat10_2, 9.99999975e-05);
    u_xlat16_2.x = log2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * _Mask02_Power;
    u_xlat16_2.x = exp2(u_xlat16_2.x);
    u_xlat16_13.xyz = u_xlat16_2.xxx * u_xlat16_13.xyz;
    u_xlat16_2.xyz = u_xlat16_12.xyz * u_xlat16_3.xxx + u_xlat16_13.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(_EmissionScaler) + u_xlat16_2.xyz;
    u_xlat3.xyz = (-u_xlat0.xyz) + u_xlat16_4.xyz;
    u_xlat3.xyz = vec3(u_xlat16_34) * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat9.xy = vs_TEXCOORD0.zw * _DissovleNoise_ST.xy + _DissovleNoise_ST.zw;
    u_xlat16_4.x = _Time.y * _DissolveNoise_Uspeed + u_xlat9.x;
    u_xlat16_4.y = _Time.y * _DissolveNoise_Vspeed + u_xlat9.y;
    u_xlat10_32 = textureLod(_DissovleNoise, u_xlat16_4.xy, 0.0).x;
    u_xlat32 = u_xlat10_32 * _DissovleNoiseScale + vs_TEXCOORD0.z;
#ifdef UNITY_ADRENO_ES3
    u_xlatb32 = !!(_Dissovle>=u_xlat32);
#else
    u_xlatb32 = _Dissovle>=u_xlat32;
#endif
    u_xlat0.xyz = (bool(u_xlatb30)) ? u_xlat3.xyz : u_xlat0.xyz;
    u_xlat0.xyz = u_xlat16_2.xyz + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(0.00999999978<u_xlat16_34);
#else
    u_xlatb30 = 0.00999999978<u_xlat16_34;
#endif
    if((int(u_xlatb32) * int(0xffffffffu))==0){discard;}
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn));
#else
    u_xlatb2.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn);
#endif
    u_xlat12.xyz = u_xlat0.xyz * vec3(vec3(_ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness));
    u_xlat3.xyz = vec3(vec3(_ES_CharacterPointLightWholeIntensity, _ES_CharacterPointLightWholeIntensity, _ES_CharacterPointLightWholeIntensity)) * mhy_CharacterPointLightColor.xyz;
    u_xlat9.xyz = _ES_CharacterMainLightColor.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat9.xyz = min(max(u_xlat9.xyz, 0.0), 1.0);
#else
    u_xlat9.xyz = clamp(u_xlat9.xyz, 0.0, 1.0);
#endif
    u_xlat33 = (-mhy_CharacterPointLightColor.w) + 1.0;
    u_xlat3.xyz = u_xlat9.xyz * vec3(u_xlat33) + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat3.xyz = vec3(vec3(_ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio)) * u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat12.xyz = u_xlat12.xyz * u_xlat3.xyz;
    u_xlat3.xyz = _ES_CharacterAmbientLightColor.xyz * vec3(_ES_CharacterAmbientLightRatio);
    u_xlat16_4.xyz = u_xlat12.xyz * vec3(10.0, 10.0, 10.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.xyz = min(max(u_xlat16_4.xyz, 0.0), 1.0);
#else
    u_xlat16_4.xyz = clamp(u_xlat16_4.xyz, 0.0, 1.0);
#endif
    u_xlat12.xyz = u_xlat3.xyz * u_xlat16_4.xyz + u_xlat12.xyz;
    u_xlat16_4.xyz = (u_xlatb2.x) ? u_xlat12.xyz : u_xlat0.xyz;
    u_xlat16_5.xyz = u_xlat0.xyz + (-u_xlat16_4.xyz);
    u_xlat16_5.xyz = vec3(u_xlat16_34) * u_xlat16_5.xyz + u_xlat16_4.xyz;
    u_xlat16_0.xyz = (bool(u_xlatb30)) ? u_xlat16_5.xyz : u_xlat16_4.xyz;
    u_xlat16_4.x = max(u_xlat16_0.z, u_xlat16_0.y);
    u_xlat16_1.w = max(u_xlat16_0.x, u_xlat16_4.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(1.0<u_xlat16_1.w);
#else
    u_xlatb2.x = 1.0<u_xlat16_1.w;
#endif
    u_xlat16_1.xyz = u_xlat16_0.xyz / u_xlat16_1.www;
    u_xlat16_0.w = 1.0;
    u_xlat16_0 = (u_xlatb2.x) ? u_xlat16_1 : u_xlat16_0;
    u_xlat16_4.x = min(u_xlat16_0.w, 1.10000002);
    u_xlat16_14 = u_xlat16_0.w + (-u_xlat16_4.x);
    u_xlat16_4.x = u_xlat16_34 * u_xlat16_14 + u_xlat16_4.x;
    u_xlat16_2.x = u_xlat16_4.x * 0.0500000007;
    SV_Target0.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb12 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_4.x = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb12) ? u_xlat16_4.x : 0.0;
    SV_Target0.w = 0.0156862754;
    SV_Target1.xyz = u_xlat16_0.xyz;
    SV_Target1.w = u_xlat16_2.x;
    SV_Target2.xy = vec2(0.0, 0.0);
    SV_Target2.w = vs_TEXCOORD4;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "LINE_INTERPOLATION" "TOON_SPECULAR_ON" "TOON_LIGHTMAP_ON" "MAIN_TEX_COLORING_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _MainTex_ST;
uniform 	float _CharacterAmbientSensorShadowOn;
uniform 	vec4 _AmbientSensorUVs;
uniform 	float _UseClipPlane;
uniform 	float _ClipPlaneWorld;
uniform 	vec4 _ClipPlane;
uniform 	vec4 mhy_AvatarLightDir;
uniform 	vec4 mhy_CharacterOverrideLightDir;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
struct unity_Builtins1Array_Type {
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw1 {
	unity_Builtins1Array_Type unity_Builtins1Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform lowp sampler2D _CharacterAmbientSensorTex;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp float vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD6;
flat out highp uint vs_SV_InstanceID0;
vec3 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump float u_xlat16_4;
vec3 u_xlat5;
int u_xlati5;
bool u_xlatb5;
float u_xlat6;
mediump float u_xlat16_9;
float u_xlat10;
bool u_xlatb10;
bool u_xlatb11;
float u_xlat15;
bool u_xlatb15;
float u_xlat16;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
#ifdef UNITY_ADRENO_ES3
    u_xlatb5 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseClipPlane));
#else
    u_xlatb5 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseClipPlane);
#endif
    if(u_xlatb5){
#ifdef UNITY_ADRENO_ES3
        u_xlatb5 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ClipPlaneWorld));
#else
        u_xlatb5 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ClipPlaneWorld);
#endif
        if(u_xlatb5){
            u_xlati5 = u_xlati0 << 2;
#ifdef UNITY_ADRENO_ES3
            u_xlatb10 = !!(abs(_ClipPlane.w)<0.00100000005);
#else
            u_xlatb10 = abs(_ClipPlane.w)<0.00100000005;
#endif
            u_xlat1.xyz = _ClipPlane.www * _ClipPlane.xyz;
            u_xlat1.xyz = (bool(u_xlatb10)) ? vec3(0.0, 0.0, 0.0) : u_xlat1.xyz;
            u_xlat2 = u_xlat1.yyyy * unity_Builtins1Array[u_xlati5 / 4].hlslcc_mtx4x4unity_WorldToObjectArray[1];
            u_xlat2 = unity_Builtins1Array[u_xlati5 / 4].hlslcc_mtx4x4unity_WorldToObjectArray[0] * u_xlat1.xxxx + u_xlat2;
            u_xlat1 = unity_Builtins1Array[u_xlati5 / 4].hlslcc_mtx4x4unity_WorldToObjectArray[2] * u_xlat1.zzzz + u_xlat2;
            u_xlat1 = u_xlat1 + unity_Builtins1Array[u_xlati5 / 4].hlslcc_mtx4x4unity_WorldToObjectArray[3];
            u_xlat1.xyz = u_xlat1.xyz / u_xlat1.www;
            u_xlat2.xyz = _ClipPlane.yyy * unity_Builtins1Array[u_xlati5 / 4].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz;
            u_xlat2.xyz = unity_Builtins1Array[u_xlati5 / 4].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz * _ClipPlane.xxx + u_xlat2.xyz;
            u_xlat5.xyz = unity_Builtins1Array[u_xlati5 / 4].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz * _ClipPlane.zzz + u_xlat2.xyz;
            u_xlat1.x = dot(u_xlat1.xyz, u_xlat5.xyz);
            u_xlat6 = dot(in_POSITION0.xyz, u_xlat5.xyz);
#ifdef UNITY_ADRENO_ES3
            u_xlatb11 = !!(u_xlat6<u_xlat1.x);
#else
            u_xlatb11 = u_xlat6<u_xlat1.x;
#endif
            u_xlat1.x = (-u_xlat1.x) + u_xlat6;
            u_xlat2.xyz = (-u_xlat1.xxx) * u_xlat5.xyz + in_POSITION0.xyz;
            u_xlat2.w = 0.0;
            u_xlat3.xyz = in_POSITION0.xyz;
            u_xlat3.w = in_COLOR0.w;
            u_xlat1 = (bool(u_xlatb11)) ? u_xlat2 : u_xlat3;
            u_xlat16_4 = u_xlat1.w;
        } else {
            u_xlat5.x = dot(in_POSITION0.xyz, _ClipPlane.xyz);
            u_xlat10 = _ClipPlane.w + -0.00999999978;
#ifdef UNITY_ADRENO_ES3
            u_xlatb10 = !!(u_xlat5.x<u_xlat10);
#else
            u_xlatb10 = u_xlat5.x<u_xlat10;
#endif
            u_xlat5.x = u_xlat5.x + (-_ClipPlane.w);
            u_xlat2.xyz = (-u_xlat5.xxx) * _ClipPlane.xyz + in_POSITION0.xyz;
            u_xlat2.w = 0.0;
            u_xlat3.xyz = in_POSITION0.xyz;
            u_xlat3.w = in_COLOR0.w;
            u_xlat1 = (bool(u_xlatb10)) ? u_xlat2 : u_xlat3;
            u_xlat16_4 = u_xlat1.w;
        //ENDIF
        }
    } else {
        u_xlat1.xyz = in_POSITION0.xyz;
        u_xlat16_4 = in_COLOR0.w;
    //ENDIF
    }
    u_xlati0 = u_xlati0 << 2;
    u_xlat2.xyw = (-_WorldSpaceCameraPos.xyz) + unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat3.x = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].x;
    u_xlat3.y = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].x;
    u_xlat3.z = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].x;
    u_xlat3.w = u_xlat2.x;
    u_xlat1.w = 1.0;
    u_xlat5.x = dot(u_xlat3, u_xlat1);
    u_xlat3.x = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].y;
    u_xlat3.y = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].y;
    u_xlat3.z = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].y;
    u_xlat3.w = u_xlat2.y;
    u_xlat10 = dot(u_xlat3, u_xlat1);
    u_xlat2.x = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].z;
    u_xlat2.y = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].z;
    u_xlat2.z = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].z;
    u_xlat15 = dot(u_xlat2, u_xlat1);
    u_xlat2.x = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].w;
    u_xlat2.y = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].w;
    u_xlat2.z = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].w;
    u_xlat2.w = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3].w;
    u_xlat16 = dot(u_xlat2, u_xlat1);
    u_xlat2 = vec4(u_xlat10) * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat5.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVPZero[2] * vec4(u_xlat15) + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVPZero[3] * vec4(u_xlat16) + u_xlat2;
    u_xlat3 = u_xlat1.yyyy * unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat3 = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * u_xlat1.xxxx + u_xlat3;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * u_xlat1.zzzz + u_xlat3;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3] * in_POSITION0.wwww + u_xlat1;
    vs_TEXCOORD3.xyz = u_xlat1.xyz / u_xlat1.www;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.xz = u_xlat2.xw * vec2(0.5, 0.5);
    u_xlat5.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat1.w = u_xlat5.x * 0.5;
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat5.xyz = in_NORMAL0.yyy * unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat5.xyz = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_NORMAL0.xxx + u_xlat5.xyz;
    u_xlat0.xyz = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_NORMAL0.zzz + u_xlat5.xyz;
    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(0.5<mhy_CharacterOverrideLightDir.w);
#else
    u_xlatb15 = 0.5<mhy_CharacterOverrideLightDir.w;
#endif
    u_xlat1.x = mhy_CharacterOverrideLightDir.x;
    u_xlat1.yz = (-mhy_CharacterOverrideLightDir.yz);
    u_xlat1.xyz = (bool(u_xlatb15)) ? u_xlat1.xyz : mhy_AvatarLightDir.xyz;
    u_xlat16_9 = dot(u_xlat0.xyz, u_xlat1.xyz);
    vs_TEXCOORD1.w = u_xlat16_9 * 0.497500002 + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_CharacterAmbientSensorShadowOn));
#else
    u_xlatb15 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_CharacterAmbientSensorShadowOn);
#endif
    if(u_xlatb15){
        u_xlat15 = textureLod(_CharacterAmbientSensorTex, _AmbientSensorUVs.xy, 0.0).x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb15 = !!(0.5<u_xlat15);
#else
        u_xlatb15 = 0.5<u_xlat15;
#endif
        vs_TEXCOORD4 = u_xlatb15 ? 1.0 : float(0.0);
    } else {
        vs_TEXCOORD4 = 0.0;
    //ENDIF
    }
    gl_Position = u_xlat2;
    vs_COLOR0.xyz = in_COLOR0.xyz;
    vs_COLOR0.w = u_xlat16_4;
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    vs_TEXCOORD2.zw = u_xlat2.zw;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	mediump vec4 _Color;
uniform 	float _MainTexAlphaUse;
uniform 	mediump float _MainTexAlphaCutoff;
uniform 	mediump vec4 _MainTexTintColor;
uniform 	float _UseLightMapColorAO;
uniform 	float _UseVertexColorAO;
uniform 	mediump float _LightArea;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	float _UseCoolShadowColorOrTex;
uniform 	mediump vec3 _CoolShadowMultColor;
uniform 	float _UseShadowTransition;
uniform 	float _ShadowTransitionRange;
uniform 	float _ShadowTransitionSoftness;
uniform 	mediump vec3 _SpecularColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	float _FaceBlushStrength;
uniform 	mediump vec3 _FaceBlushColor;
uniform 	mediump float _EmissionScaler;
uniform 	mediump vec3 _EmissionColor_MHY;
uniform 	float _UseMaterial2;
uniform 	mediump vec3 _Color2;
uniform 	mediump vec3 _FirstShadowMultColor2;
uniform 	mediump vec3 _CoolShadowMultColor2;
uniform 	mediump float _Shininess2;
uniform 	mediump float _SpecMulti2;
uniform 	float _ShadowTransitionRange2;
uniform 	float _ShadowTransitionSoftness2;
uniform 	float _UseMaterial3;
uniform 	mediump vec3 _Color3;
uniform 	mediump vec3 _FirstShadowMultColor3;
uniform 	mediump vec3 _CoolShadowMultColor3;
uniform 	mediump float _Shininess3;
uniform 	mediump float _SpecMulti3;
uniform 	float _ShadowTransitionRange3;
uniform 	float _ShadowTransitionSoftness3;
uniform 	float _UseMaterial4;
uniform 	mediump vec3 _Color4;
uniform 	mediump vec3 _FirstShadowMultColor4;
uniform 	mediump vec3 _CoolShadowMultColor4;
uniform 	mediump float _Shininess4;
uniform 	mediump float _SpecMulti4;
uniform 	float _ShadowTransitionRange4;
uniform 	float _ShadowTransitionSoftness4;
uniform 	float _UseMaterial5;
uniform 	mediump vec3 _Color5;
uniform 	mediump vec3 _FirstShadowMultColor5;
uniform 	mediump vec3 _CoolShadowMultColor5;
uniform 	mediump float _Shininess5;
uniform 	mediump float _SpecMulti5;
uniform 	float _ShadowTransitionRange5;
uniform 	float _ShadowTransitionSoftness5;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _TextureBiasWhenDithering;
uniform 	float _UseClipPlane;
uniform 	float _ES_CharacterAmbientLightOn;
uniform 	float _ES_CharacterAmbientBrightness;
uniform 	vec3 _ES_CharacterMainLightColor;
uniform 	vec3 _ES_CharacterAmbientLightColor;
uniform 	float _ES_CharacterMainLightRatio;
uniform 	float _ES_CharacterAmbientLightRatio;
uniform 	float _ES_CharacterColorTone;
uniform 	float _ES_CharacterPointLightWholeIntensity;
uniform 	vec4 mhy_AvatarLightDir;
uniform 	vec4 mhy_CharacterPointLightColor;
uniform 	vec4 mhy_CharacterOverrideLightDir;
uniform 	mediump vec4 _FlowMapColor01;
uniform 	mediump float _FlowScale01;
uniform 	mediump float _FlowMap01_Uspeed;
uniform 	vec4 _FlowMap01_ST;
uniform 	mediump float _FlowMap01_Vspeed;
uniform 	mediump float _Noise_Uspeed;
uniform 	vec4 _Noise_ST;
uniform 	mediump float _Noise_Vspeed;
uniform 	mediump float _NoiseFlowIntensity;
uniform 	mediump float _MaskOffset01;
uniform 	mediump float _NoiseIntensity;
uniform 	mediump float _Mask01_Power;
uniform 	mediump vec4 _FlowMapColor02;
uniform 	mediump float _FlowScale02;
uniform 	mediump float _FlowMap02_Uspeed;
uniform 	vec4 _FlowMap02_ST;
uniform 	mediump float _FlowMap02_Vspeed;
uniform 	mediump float _MaskOffset02;
uniform 	mediump float _Mask02_Power;
uniform 	mediump float _DissolveNoise_Uspeed;
uniform 	vec4 _DissovleNoise_ST;
uniform 	mediump float _DissolveNoise_Vspeed;
uniform 	mediump float _DissovleNoiseScale;
uniform 	mediump float _Dissovle;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _Noise;
uniform lowp sampler2D _FlowMap01;
uniform lowp sampler2D _Mask01;
uniform lowp sampler2D _FlowMap02;
uniform lowp sampler2D _Mask02;
uniform lowp sampler2D _DissovleNoise;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp float vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
vec3 u_xlat2;
mediump float u_xlat16_2;
bvec4 u_xlatb2;
vec3 u_xlat3;
mediump float u_xlat16_3;
lowp vec4 u_xlat10_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
bvec4 u_xlatb5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
mediump vec3 u_xlat16_7;
bvec3 u_xlatb7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
bool u_xlatb11;
vec3 u_xlat13;
mediump vec3 u_xlat16_13;
lowp float u_xlat10_13;
bool u_xlatb13;
mediump vec3 u_xlat16_14;
int u_xlati14;
bool u_xlatb14;
mediump float u_xlat16_15;
mediump vec3 u_xlat16_17;
mediump vec3 u_xlat16_19;
bvec2 u_xlatb22;
float u_xlat24;
bool u_xlatb24;
float u_xlat33;
mediump float u_xlat16_33;
lowp float u_xlat10_33;
int u_xlati33;
bool u_xlatb33;
float u_xlat35;
mediump float u_xlat16_35;
int u_xlati35;
float u_xlat36;
int u_xlati36;
mediump float u_xlat16_37;
mediump float u_xlat16_39;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseClipPlane));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseClipPlane);
#endif
    u_xlat16_1.x = vs_COLOR0.w + -0.00999999978;
#ifdef UNITY_ADRENO_ES3
    u_xlatb11 = !!(u_xlat16_1.x<0.0);
#else
    u_xlatb11 = u_xlat16_1.x<0.0;
#endif
    u_xlatb0 = u_xlatb0 && u_xlatb11;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(_DitherAlpha<0.949999988);
#else
        u_xlatb0 = _DitherAlpha<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb22.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb22.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb22.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = _DitherAlpha * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + -0.00999999978;
#ifdef UNITY_ADRENO_ES3
            u_xlatb0 = !!(u_xlat0.x<0.0);
#else
            u_xlatb0 = u_xlat0.x<0.0;
#endif
            if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(0.5<mhy_CharacterOverrideLightDir.w);
#else
    u_xlatb2.x = 0.5<mhy_CharacterOverrideLightDir.w;
#endif
    u_xlat3.x = mhy_CharacterOverrideLightDir.x;
    u_xlat3.yz = (-mhy_CharacterOverrideLightDir.yz);
    u_xlat2.xyz = (u_xlatb2.x) ? u_xlat3.xyz : mhy_AvatarLightDir.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat33) + u_xlat2.xyz;
    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat0.xyz = vec3(u_xlat33) * u_xlat0.xyz;
    u_xlat33 = _TextureBiasWhenDithering + -1.0;
    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy, u_xlat33);
    u_xlat16_4.xyz = u_xlat1.xyz * _MainTexTintColor.xyz;
    u_xlat16_5.xyz = u_xlat16_4.xyz + u_xlat16_4.xyz;
    u_xlat16_6.xyz = u_xlat1.xyz + _MainTexTintColor.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_6.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(-4.0, -4.0, -4.0) + u_xlat16_6.xyz;
    u_xlatb2 = lessThan(vec4(0.5, 0.5, 0.5, 0.00999999978), u_xlat1);
    u_xlat16_6.x = (u_xlatb2.x) ? float(1.0) : float(0.0);
    u_xlat16_6.y = (u_xlatb2.y) ? float(1.0) : float(0.0);
    u_xlat16_6.z = (u_xlatb2.z) ? float(1.0) : float(0.0);
    u_xlat16_4.xyz = u_xlat16_4.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat16_4.xyz = u_xlat16_6.xyz * u_xlat16_4.xyz + u_xlat16_5.xyz;
    u_xlatb2.xyz = equal(vec4(_MainTexAlphaUse), vec4(3.0, 1.0, 2.0, 0.0)).xyz;
    u_xlat3.x = u_xlat1.w * _FaceBlushStrength;
    u_xlat16_14.xyz = (-u_xlat16_4.xyz) + _FaceBlushColor.xyz;
    u_xlat3.xyz = u_xlat3.xxx * u_xlat16_14.xyz + u_xlat16_4.xyz;
    u_xlat16_4.xyz = (u_xlatb2.x) ? u_xlat3.xyz : u_xlat16_4.xyz;
    u_xlat16_37 = u_xlat1.w + (-_MainTexAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(u_xlat16_37<0.0);
#else
    u_xlatb2.x = u_xlat16_37<0.0;
#endif
    u_xlatb2.x = u_xlatb2.y && u_xlatb2.x;
    if((int(u_xlatb2.x) * int(0xffffffffu))!=0){discard;}
    u_xlat10_3 = texture(_LightMapTex, vs_TEXCOORD0.xy, u_xlat33);
    u_xlatb2.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseLightMapColorAO, _UseVertexColorAO, _UseLightMapColorAO, _UseLightMapColorAO)).xy;
    u_xlat16_37 = (u_xlatb2.x) ? u_xlat10_3.y : 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseMaterial2));
#else
    u_xlatb33 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseMaterial2);
#endif
    u_xlatb5 = greaterThanEqual(u_xlat10_3.wwww, vec4(0.800000012, 0.400000006, 0.200000003, 0.600000024));
    u_xlatb33 = u_xlatb33 && u_xlatb5.x;
    u_xlat33 = (u_xlatb33) ? 2.0 : 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseMaterial3));
#else
    u_xlatb2.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseMaterial3);
#endif
    u_xlatb2.x = u_xlatb5.y && u_xlatb2.x;
    u_xlatb7.xyz = lessThan(u_xlat10_3.wwww, vec4(0.600000024, 0.400000006, 0.800000012, 0.0)).xyz;
    u_xlatb2.x = u_xlatb2.x && u_xlatb7.x;
    u_xlat33 = (u_xlatb2.x) ? 3.0 : u_xlat33;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseMaterial4));
#else
    u_xlatb2.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseMaterial4);
#endif
    u_xlatb2.x = u_xlatb5.z && u_xlatb2.x;
    u_xlatb2.x = u_xlatb7.y && u_xlatb2.x;
    u_xlat33 = (u_xlatb2.x) ? 4.0 : u_xlat33;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseMaterial5));
#else
    u_xlatb2.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseMaterial5);
#endif
    u_xlatb2.x = u_xlatb5.w && u_xlatb2.x;
    u_xlatb2.x = u_xlatb7.z && u_xlatb2.x;
    u_xlat33 = (u_xlatb2.x) ? 5.0 : u_xlat33;
    u_xlatb5 = equal(vec4(u_xlat33), vec4(2.0, 3.0, 4.0, 5.0));
    u_xlat16_6.xyz = (u_xlatb5.x) ? _Color2.xyz : _Color.xyz;
    u_xlat16_6.xyz = (u_xlatb5.y) ? _Color3.xyz : u_xlat16_6.xyz;
    u_xlat16_6.xyz = (u_xlatb5.z) ? _Color4.xyz : u_xlat16_6.xyz;
    u_xlat16_6.xyz = (u_xlatb5.w) ? _Color5.xyz : u_xlat16_6.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_6.xyz;
    u_xlatb2.x = u_xlatb2.w && u_xlatb2.z;
    u_xlat16_6.x = (u_xlatb2.x) ? u_xlat1.w : 0.0;
    u_xlat16_17.x = u_xlat16_37 * vs_COLOR0.x;
    u_xlat16_37 = (u_xlatb2.y) ? u_xlat16_17.x : u_xlat16_37;
#ifdef UNITY_ADRENO_ES3
    u_xlatb13 = !!(u_xlat16_37<0.0500000007);
#else
    u_xlatb13 = u_xlat16_37<0.0500000007;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(0.949999988<u_xlat16_37);
#else
    u_xlatb24 = 0.949999988<u_xlat16_37;
#endif
    u_xlat35 = u_xlat16_37 + vs_TEXCOORD1.w;
    u_xlat35 = u_xlat35 * 0.5;
    u_xlat16_37 = (u_xlatb24) ? 1.0 : u_xlat35;
    u_xlat16_37 = (u_xlatb13) ? 0.0 : u_xlat16_37;
#ifdef UNITY_ADRENO_ES3
    u_xlatb13 = !!(u_xlat16_37<_LightArea);
#else
    u_xlatb13 = u_xlat16_37<_LightArea;
#endif
    if(u_xlatb13){
#ifdef UNITY_ADRENO_ES3
        u_xlatb13 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition));
#else
        u_xlatb13 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition);
#endif
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(u_xlat33==1.0);
#else
        u_xlatb24 = u_xlat33==1.0;
#endif
        u_xlat16_8.x = (u_xlatb24) ? _ShadowTransitionRange : 0.0;
        u_xlat16_8.y = (u_xlatb24) ? _ShadowTransitionSoftness : 0.0;
        u_xlat16_17.xy = (u_xlatb5.x) ? vec2(_ShadowTransitionRange2, _ShadowTransitionSoftness2) : u_xlat16_8.xy;
        u_xlat16_17.xy = (u_xlatb5.y) ? vec2(_ShadowTransitionRange3, _ShadowTransitionSoftness3) : u_xlat16_17.xy;
        u_xlat16_17.xy = (u_xlatb5.z) ? vec2(_ShadowTransitionRange4, _ShadowTransitionSoftness4) : u_xlat16_17.xy;
        u_xlat16_17.xy = (u_xlatb5.w) ? vec2(_ShadowTransitionRange5, _ShadowTransitionSoftness5) : u_xlat16_17.xy;
        u_xlat16_37 = (-u_xlat16_37) + _LightArea;
        u_xlat16_37 = u_xlat16_37 / u_xlat16_17.x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(u_xlat16_37>=1.0);
#else
        u_xlatb24 = u_xlat16_37>=1.0;
#endif
        u_xlat16_35 = u_xlat16_37 + 0.00999999978;
        u_xlat16_35 = log2(u_xlat16_35);
        u_xlat16_35 = u_xlat16_35 * u_xlat16_17.y;
        u_xlat16_35 = exp2(u_xlat16_35);
        u_xlat35 = min(u_xlat16_35, 1.0);
        u_xlat24 = (u_xlatb24) ? 1.0 : u_xlat35;
        u_xlat13.x = (u_xlatb13) ? u_xlat24 : 1.0;
        u_xlat16_37 = 0.0;
    } else {
        u_xlat13.x = 0.0;
        u_xlat16_37 = 1.0;
    //ENDIF
    }
    u_xlat24 = (-u_xlat16_37) + 1.0;
#ifdef UNITY_ADRENO_ES3
    { bool cond = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(vs_TEXCOORD4); u_xlati35 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati35 = int((vec4(0.0, 0.0, 0.0, 0.0)!=vec4(vs_TEXCOORD4)) ? 0xFFFFFFFFu : uint(0u));
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(u_xlat33==1.0);
#else
    u_xlatb33 = u_xlat33==1.0;
#endif
    if(u_xlatb33){
#ifdef UNITY_ADRENO_ES3
        u_xlatb14 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex));
#else
        u_xlatb14 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex);
#endif
        u_xlat16_7.xyz = vec3(_FirstShadowMultColor.xxyz.y + (-_CoolShadowMultColor.x), _FirstShadowMultColor.xxyz.z + (-_CoolShadowMultColor.y), float(_FirstShadowMultColor.z) + (-_CoolShadowMultColor.z));
        u_xlat7.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_7.xyz + _CoolShadowMultColor.xyz;
        u_xlat16_17.xyz = (bool(u_xlatb14)) ? u_xlat7.xyz : vec3(_FirstShadowMultColor.x, _FirstShadowMultColor.y, _FirstShadowMultColor.z);
    } else {
        if(u_xlatb5.x){
#ifdef UNITY_ADRENO_ES3
            u_xlatb14 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex));
#else
            u_xlatb14 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex);
#endif
            u_xlat16_7.xyz = _FirstShadowMultColor2.xyz + (-_CoolShadowMultColor2.xyz);
            u_xlat7.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_7.xyz + _CoolShadowMultColor2.xyz;
            u_xlat16_17.xyz = (bool(u_xlatb14)) ? u_xlat7.xyz : _FirstShadowMultColor2.xyz;
        } else {
#ifdef UNITY_ADRENO_ES3
            u_xlatb14 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex));
#else
            u_xlatb14 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex);
#endif
            u_xlat16_7.xyz = _FirstShadowMultColor3.xyz + (-_CoolShadowMultColor3.xyz);
            u_xlat7.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_7.xyz + _CoolShadowMultColor3.xyz;
            u_xlat16_8.xyz = (bool(u_xlatb14)) ? u_xlat7.xyz : _FirstShadowMultColor3.xyz;
            u_xlat16_7.xyz = _FirstShadowMultColor4.xyz + (-_CoolShadowMultColor4.xyz);
            u_xlat7.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_7.xyz + _CoolShadowMultColor4.xyz;
            u_xlat16_9.xyz = (bool(u_xlatb14)) ? u_xlat7.xyz : _FirstShadowMultColor4.xyz;
            u_xlat16_7.xyz = _FirstShadowMultColor5.xyz + (-_CoolShadowMultColor5.xyz);
            u_xlat7.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_7.xyz + _CoolShadowMultColor5.xyz;
            u_xlat16_10.xyz = (bool(u_xlatb14)) ? u_xlat7.xyz : _FirstShadowMultColor5.xyz;
            u_xlat16_9.xyz = (u_xlatb5.z) ? u_xlat16_9.xyz : u_xlat16_10.xyz;
            u_xlat16_17.xyz = (u_xlatb5.y) ? u_xlat16_8.xyz : u_xlat16_9.xyz;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition));
#else
    u_xlatb14 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition);
#endif
    u_xlati36 = ~u_xlati35;
    u_xlati14 = u_xlatb14 ? u_xlati36 : int(0);
    u_xlat16_7.xyz = u_xlat16_17.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat7.xyz = u_xlat13.xxx * u_xlat16_7.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_17.xyz = (int(u_xlati14) != 0) ? u_xlat7.xyz : u_xlat16_17.xyz;
    u_xlat16_37 = (u_xlatb5.z) ? _Shininess4 : _Shininess5;
    u_xlat16_8.x = (u_xlatb5.z) ? _SpecMulti4 : _SpecMulti5;
    u_xlat16_37 = (u_xlatb5.y) ? _Shininess3 : u_xlat16_37;
    u_xlat16_8.x = (u_xlatb5.y) ? _SpecMulti3 : u_xlat16_8.x;
    u_xlat16_37 = (u_xlatb5.x) ? _Shininess2 : u_xlat16_37;
    u_xlat16_8.x = (u_xlatb5.x) ? _SpecMulti2 : u_xlat16_8.x;
    u_xlat16_37 = (u_xlatb33) ? _Shininess : u_xlat16_37;
    u_xlat16_8.x = (u_xlatb33) ? _SpecMulti : u_xlat16_8.x;
    u_xlat16_19.x = dot(vs_TEXCOORD1.xyz, u_xlat0.xyz);
    u_xlat16_19.x = max(u_xlat16_19.x, 0.00100000005);
    u_xlat16_19.x = log2(u_xlat16_19.x);
    u_xlat16_37 = u_xlat16_37 * u_xlat16_19.x;
    u_xlat16_37 = exp2(u_xlat16_37);
    u_xlat0.x = (-u_xlat10_3.z) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat0.x<u_xlat16_37);
#else
    u_xlatb0 = u_xlat0.x<u_xlat16_37;
#endif
    u_xlat16_8.xyz = u_xlat16_8.xxx * _SpecularColor.xyz;
    u_xlat16_8.xyz = u_xlat10_3.xxx * u_xlat16_8.xyz;
    u_xlat16_8.xyz = (bool(u_xlatb0)) ? u_xlat16_8.xyz : vec3(0.0, 0.0, 0.0);
    u_xlat16_4.xyz = vec3(u_xlat16_4.x * _EmissionColor_MHY.xxyz.y, u_xlat16_4.y * _EmissionColor_MHY.xxyz.z, u_xlat16_4.z * float(_EmissionColor_MHY.z));
    u_xlat0.xyz = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(u_xlat24==1.0);
#else
    u_xlatb33 = u_xlat24==1.0;
#endif
    u_xlati33 = int(uint(u_xlatb33) * 0xffffffffu | uint(u_xlati35));
    u_xlat13.xyz = u_xlat0.xyz * u_xlat16_17.xyz;
    u_xlat0.xyz = (int(u_xlati33) != 0) ? u_xlat13.xyz : u_xlat0.xyz;
    u_xlat0.xyz = u_xlat16_8.xyz + u_xlat0.xyz;
    u_xlat13.xy = vs_TEXCOORD0.zw * _FlowMap01_ST.xy + _FlowMap01_ST.zw;
    u_xlat16_8.x = _Time.y * _FlowMap01_Uspeed + u_xlat13.x;
    u_xlat16_8.y = _Time.y * _FlowMap01_Vspeed + u_xlat13.y;
    u_xlat13.xy = vs_TEXCOORD0.zw * _Noise_ST.xy + _Noise_ST.zw;
    u_xlat16_9.x = _Time.y * _Noise_Uspeed + u_xlat13.x;
    u_xlat16_9.y = _Time.y * _Noise_Vspeed + u_xlat13.y;
    u_xlat10_33 = textureLod(_Noise, u_xlat16_9.xy, 0.0).x;
    u_xlat16_37 = _MaskOffset01 * 1.39999998 + -0.699999988;
    u_xlat16_17.x = u_xlat10_33 * _NoiseIntensity;
    u_xlat13.xy = vs_TEXCOORD0.zw * _FlowMap02_ST.xy + _FlowMap02_ST.zw;
    u_xlat16_9.x = _Time.y * _FlowMap02_Uspeed + u_xlat13.x;
    u_xlat16_9.y = _Time.y * _FlowMap02_Vspeed + u_xlat13.y;
    u_xlat16_39 = _MaskOffset02 * 1.39999998 + -0.699999988;
    u_xlat16_10.xyz = _FlowMapColor01.xyz * vec3(_FlowScale01);
    u_xlat16_8.xy = vec2(u_xlat10_33) * vec2(vec2(_NoiseFlowIntensity, _NoiseFlowIntensity)) + u_xlat16_8.xy;
    u_xlat10_13 = textureLod(_FlowMap01, u_xlat16_8.xy, 0.0).x;
    u_xlat16_13.xyz = vec3(u_xlat10_13) * u_xlat16_10.xyz;
    u_xlat16_8.x = (-vs_TEXCOORD0.z) + 1.0;
    u_xlat16_1.x = u_xlat16_37 + u_xlat16_8.x;
    u_xlat16_1.yw = vec2(u_xlat10_33) * vec2(vec2(_NoiseIntensity, _NoiseIntensity)) + (-vs_TEXCOORD0.ww);
    u_xlat16_17.y = 1.0;
    u_xlat16_19.xy = u_xlat16_1.xy + u_xlat16_17.xy;
    u_xlat10_3.x = textureLod(_Mask01, u_xlat16_19.xy, 0.0).x;
    u_xlat16_3 = max(u_xlat10_3.x, 9.99999975e-05);
    u_xlat16_3 = log2(u_xlat16_3);
    u_xlat16_3 = u_xlat16_3 * _Mask01_Power;
    u_xlat16_3 = exp2(u_xlat16_3);
    u_xlat16_19.xyz = _FlowMapColor02.xyz * vec3(_FlowScale02);
    u_xlat16_9.xy = vec2(u_xlat10_33) * vec2(vec2(_NoiseFlowIntensity, _NoiseFlowIntensity)) + u_xlat16_9.xy;
    u_xlat10_33 = textureLod(_FlowMap02, u_xlat16_9.xy, 0.0).x;
    u_xlat16_14.xyz = vec3(u_xlat10_33) * u_xlat16_19.xyz;
    u_xlat16_1.z = u_xlat16_39 + u_xlat16_8.x;
    u_xlat16_17.xy = vec2(u_xlat16_1.z + u_xlat16_17.x, u_xlat16_1.w + u_xlat16_17.y);
    u_xlat10_33 = textureLod(_Mask02, u_xlat16_17.xy, 0.0).x;
    u_xlat16_33 = max(u_xlat10_33, 9.99999975e-05);
    u_xlat16_33 = log2(u_xlat16_33);
    u_xlat16_33 = u_xlat16_33 * _Mask02_Power;
    u_xlat16_33 = exp2(u_xlat16_33);
    u_xlat16_14.xyz = vec3(u_xlat16_33) * u_xlat16_14.xyz;
    u_xlat16_13.xyz = u_xlat16_13.xyz * vec3(u_xlat16_3) + u_xlat16_14.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(_EmissionScaler) + u_xlat16_13.xyz;
    u_xlat3.xyz = (-u_xlat0.xyz) + u_xlat16_4.xyz;
    u_xlat3.xyz = u_xlat16_6.xxx * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat7.xy = vs_TEXCOORD0.zw * _DissovleNoise_ST.xy + _DissovleNoise_ST.zw;
    u_xlat16_4.x = _Time.y * _DissolveNoise_Uspeed + u_xlat7.x;
    u_xlat16_4.y = _Time.y * _DissolveNoise_Vspeed + u_xlat7.y;
    u_xlat10_33 = textureLod(_DissovleNoise, u_xlat16_4.xy, 0.0).x;
    u_xlat33 = u_xlat10_33 * _DissovleNoiseScale + vs_TEXCOORD0.z;
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(_Dissovle>=u_xlat33);
#else
    u_xlatb33 = _Dissovle>=u_xlat33;
#endif
    u_xlat0.xyz = (u_xlatb2.x) ? u_xlat3.xyz : u_xlat0.xyz;
    u_xlat0.xyz = u_xlat16_13.xyz + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(0.00999999978<u_xlat16_6.x);
#else
    u_xlatb2.x = 0.00999999978<u_xlat16_6.x;
#endif
    if((int(u_xlatb33) * int(0xffffffffu))==0){discard;}
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn));
#else
    u_xlatb33 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn);
#endif
    u_xlat13.xyz = u_xlat0.xyz * vec3(vec3(_ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness));
    u_xlat3.xyz = vec3(vec3(_ES_CharacterPointLightWholeIntensity, _ES_CharacterPointLightWholeIntensity, _ES_CharacterPointLightWholeIntensity)) * mhy_CharacterPointLightColor.xyz;
    u_xlat7.xyz = _ES_CharacterMainLightColor.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.xyz = min(max(u_xlat7.xyz, 0.0), 1.0);
#else
    u_xlat7.xyz = clamp(u_xlat7.xyz, 0.0, 1.0);
#endif
    u_xlat36 = (-mhy_CharacterPointLightColor.w) + 1.0;
    u_xlat3.xyz = u_xlat7.xyz * vec3(u_xlat36) + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat3.xyz = vec3(vec3(_ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio)) * u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat13.xyz = u_xlat13.xyz * u_xlat3.xyz;
    u_xlat3.xyz = _ES_CharacterAmbientLightColor.xyz * vec3(_ES_CharacterAmbientLightRatio);
    u_xlat16_4.xyz = u_xlat13.xyz * vec3(10.0, 10.0, 10.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.xyz = min(max(u_xlat16_4.xyz, 0.0), 1.0);
#else
    u_xlat16_4.xyz = clamp(u_xlat16_4.xyz, 0.0, 1.0);
#endif
    u_xlat13.xyz = u_xlat3.xyz * u_xlat16_4.xyz + u_xlat13.xyz;
    u_xlat16_4.xyz = (bool(u_xlatb33)) ? u_xlat13.xyz : u_xlat0.xyz;
    u_xlat16_17.xyz = u_xlat0.xyz + (-u_xlat16_4.xyz);
    u_xlat16_17.xyz = u_xlat16_6.xxx * u_xlat16_17.xyz + u_xlat16_4.xyz;
    u_xlat16_0.xyz = (u_xlatb2.x) ? u_xlat16_17.xyz : u_xlat16_4.xyz;
    u_xlat16_4.x = max(u_xlat16_0.z, u_xlat16_0.y);
    u_xlat16_1.w = max(u_xlat16_0.x, u_xlat16_4.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(1.0<u_xlat16_1.w);
#else
    u_xlatb2.x = 1.0<u_xlat16_1.w;
#endif
    u_xlat16_1.xyz = u_xlat16_0.xyz / u_xlat16_1.www;
    u_xlat16_0.w = 1.0;
    u_xlat16_0 = (u_xlatb2.x) ? u_xlat16_1 : u_xlat16_0;
    u_xlat16_4.x = min(u_xlat16_0.w, 1.10000002);
    u_xlat16_15 = u_xlat16_0.w + (-u_xlat16_4.x);
    u_xlat16_4.x = u_xlat16_6.x * u_xlat16_15 + u_xlat16_4.x;
    u_xlat16_2 = u_xlat16_4.x * 0.0500000007;
    SV_Target0.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb13 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb13 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_4.x = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb13) ? u_xlat16_4.x : 0.0;
    SV_Target0.w = 0.0156862754;
    SV_Target1.xyz = u_xlat16_0.xyz;
    SV_Target1.w = u_xlat16_2;
    SV_Target2.xy = vec2(0.0, 0.0);
    SV_Target2.w = vs_TEXCOORD4;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FACE_MAP_NEW_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	vec4 _MainTex_ST;
uniform 	float _FaceMapRotateOffset;
uniform 	float _CharacterAmbientSensorShadowOn;
uniform 	vec4 _AmbientSensorUVs;
uniform 	float _UseClipPlane;
uniform 	float _ClipPlaneWorld;
uniform 	vec4 _ClipPlane;
uniform 	vec4 mhy_AvatarLightDir;
uniform 	vec4 mhy_CharacterOverrideLightDir;
uniform lowp sampler2D _CharacterAmbientSensorTex;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp float vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD6;
vec3 u_xlat0;
bool u_xlatb0;
vec3 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
bool u_xlatb3;
vec4 u_xlat4;
vec4 u_xlat5;
mediump vec2 u_xlat16_6;
float u_xlat7;
bool u_xlatb7;
vec3 u_xlat8;
bvec2 u_xlatb8;
bool u_xlatb9;
mediump float u_xlat16_13;
float u_xlat14;
bool u_xlatb14;
float u_xlat15;
float u_xlat21;
float u_xlat22;
bool u_xlatb22;
float u_xlat23;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.5<mhy_CharacterOverrideLightDir.w);
#else
    u_xlatb0 = 0.5<mhy_CharacterOverrideLightDir.w;
#endif
    u_xlat1.x = mhy_CharacterOverrideLightDir.x;
    u_xlat1.yz = (-mhy_CharacterOverrideLightDir.yz);
    u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat1.xyz : mhy_AvatarLightDir.xyz;
    u_xlat21 = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_ObjectToWorld[1].xyz);
    u_xlat1.x = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_ObjectToWorld[2].xyz);
    u_xlatb8.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseClipPlane, _ClipPlaneWorld, _UseClipPlane, _UseClipPlane)).xy;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(abs(_ClipPlane.w)<0.00100000005);
#else
    u_xlatb22 = abs(_ClipPlane.w)<0.00100000005;
#endif
    u_xlat2.xyz = _ClipPlane.www * _ClipPlane.xyz;
    u_xlat2.xyz = (bool(u_xlatb22)) ? vec3(0.0, 0.0, 0.0) : u_xlat2.xyz;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_WorldToObject[1];
    u_xlat3 = hlslcc_mtx4x4unity_WorldToObject[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat2 = hlslcc_mtx4x4unity_WorldToObject[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat2 = u_xlat2 + hlslcc_mtx4x4unity_WorldToObject[3];
    u_xlat2.xyz = u_xlat2.xyz / u_xlat2.www;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * _ClipPlane.yyy;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _ClipPlane.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _ClipPlane.zzz + u_xlat3.xyz;
    u_xlat22 = dot(u_xlat2.xyz, u_xlat3.xyz);
    u_xlat2.x = dot(in_POSITION0.xyz, u_xlat3.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(u_xlat2.x<u_xlat22);
#else
    u_xlatb9 = u_xlat2.x<u_xlat22;
#endif
    u_xlat22 = (-u_xlat22) + u_xlat2.x;
    u_xlat3.xyz = (-vec3(u_xlat22)) * u_xlat3.xyz + in_POSITION0.xyz;
    u_xlat3.w = 0.0;
    u_xlat4.xyz = in_POSITION0.xyz;
    u_xlat4.w = in_COLOR0.w;
    u_xlat2 = (bool(u_xlatb9)) ? u_xlat3 : u_xlat4;
    u_xlat22 = dot(in_POSITION0.xyz, _ClipPlane.xyz);
    u_xlat3.x = _ClipPlane.w + -0.00999999978;
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(u_xlat22<u_xlat3.x);
#else
    u_xlatb3 = u_xlat22<u_xlat3.x;
#endif
    u_xlat22 = u_xlat22 + (-_ClipPlane.w);
    u_xlat5.xyz = (-vec3(u_xlat22)) * _ClipPlane.xyz + in_POSITION0.xyz;
    u_xlat5.w = 0.0;
    u_xlat3 = (bool(u_xlatb3)) ? u_xlat5 : u_xlat4;
    u_xlat2.xyz = (u_xlatb8.y) ? u_xlat2.xyz : u_xlat3.xyz;
    u_xlat16_6.x = (u_xlatb8.y) ? u_xlat2.w : u_xlat3.w;
    u_xlat2.xyz = (u_xlatb8.x) ? u_xlat2.xyz : in_POSITION0.xyz;
    vs_COLOR0.w = (u_xlatb8.x) ? u_xlat16_6.x : in_COLOR0.w;
    u_xlat3.xyw = (-_WorldSpaceCameraPos.xyz) + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat4.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;
    u_xlat4.y = hlslcc_mtx4x4unity_ObjectToWorld[1].x;
    u_xlat4.z = hlslcc_mtx4x4unity_ObjectToWorld[2].x;
    u_xlat4.w = u_xlat3.x;
    u_xlat2.w = 1.0;
    u_xlat8.x = dot(u_xlat4, u_xlat2);
    u_xlat4.x = hlslcc_mtx4x4unity_ObjectToWorld[0].y;
    u_xlat4.y = hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat4.z = hlslcc_mtx4x4unity_ObjectToWorld[2].y;
    u_xlat4.w = u_xlat3.y;
    u_xlat15 = dot(u_xlat4, u_xlat2);
    u_xlat3.x = hlslcc_mtx4x4unity_ObjectToWorld[0].z;
    u_xlat3.y = hlslcc_mtx4x4unity_ObjectToWorld[1].z;
    u_xlat3.z = hlslcc_mtx4x4unity_ObjectToWorld[2].z;
    u_xlat22 = dot(u_xlat3, u_xlat2);
    u_xlat3.x = hlslcc_mtx4x4unity_ObjectToWorld[0].w;
    u_xlat3.y = hlslcc_mtx4x4unity_ObjectToWorld[1].w;
    u_xlat3.z = hlslcc_mtx4x4unity_ObjectToWorld[2].w;
    u_xlat3.w = hlslcc_mtx4x4unity_ObjectToWorld[3].w;
    u_xlat23 = dot(u_xlat3, u_xlat2);
    u_xlat3 = vec4(u_xlat15) * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat8.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVPZero[2] * vec4(u_xlat22) + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVPZero[3] * vec4(u_xlat23) + u_xlat3;
    u_xlat4 = u_xlat2.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat4 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat2.xxxx + u_xlat4;
    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat2.zzzz + u_xlat4;
    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat2;
    vs_TEXCOORD3.xyz = u_xlat2.xyz / u_xlat2.www;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat2.xz = u_xlat3.xw * vec2(0.5, 0.5);
    u_xlat8.x = u_xlat3.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat8.x * 0.5;
    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat8.xyz = in_NORMAL0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat8.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_NORMAL0.xxx + u_xlat8.xyz;
    u_xlat8.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_NORMAL0.zzz + u_xlat8.xyz;
    u_xlat2.x = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat8.xyz = u_xlat8.xyz * u_xlat2.xxx;
    u_xlat16_6.x = dot(u_xlat8.xyz, u_xlat0.xyz);
    vs_TEXCOORD1.w = u_xlat16_6.x * 0.497500002 + 0.5;
    u_xlat16_6.x = min(abs(u_xlat21), abs(u_xlat1.x));
    u_xlat16_13 = max(abs(u_xlat21), abs(u_xlat1.x));
    u_xlat16_13 = float(1.0) / u_xlat16_13;
    u_xlat16_6.x = u_xlat16_13 * u_xlat16_6.x;
    u_xlat16_13 = u_xlat16_6.x * u_xlat16_6.x;
    u_xlat0.x = u_xlat16_13 * 0.0208350997 + -0.0851330012;
    u_xlat0.x = u_xlat16_13 * u_xlat0.x + 0.180141002;
    u_xlat0.x = u_xlat16_13 * u_xlat0.x + -0.330299497;
    u_xlat0.x = u_xlat16_13 * u_xlat0.x + 0.999866009;
    u_xlat7 = u_xlat0.x * u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(abs(u_xlat21)<abs(u_xlat1.x));
#else
    u_xlatb14 = abs(u_xlat21)<abs(u_xlat1.x);
#endif
    u_xlat7 = u_xlat7 * -2.0 + 1.57079637;
    u_xlat7 = u_xlatb14 ? u_xlat7 : float(0.0);
    u_xlat0.x = u_xlat16_6.x * u_xlat0.x + u_xlat7;
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(u_xlat21<(-u_xlat21));
#else
    u_xlatb7 = u_xlat21<(-u_xlat21);
#endif
    u_xlat7 = u_xlatb7 ? -3.14159274 : float(0.0);
    u_xlat0.x = u_xlat7 + u_xlat0.x;
    u_xlat16_6.x = min(u_xlat21, u_xlat1.x);
    u_xlat16_13 = max(u_xlat21, u_xlat1.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(u_xlat16_6.x<(-u_xlat16_6.x));
#else
    u_xlatb7 = u_xlat16_6.x<(-u_xlat16_6.x);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(u_xlat16_13>=(-u_xlat16_13));
#else
    u_xlatb14 = u_xlat16_13>=(-u_xlat16_13);
#endif
    u_xlatb7 = u_xlatb14 && u_xlatb7;
    u_xlat0.x = (u_xlatb7) ? (-u_xlat0.x) : u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(0.0<(-u_xlat0.x));
#else
    u_xlatb7 = 0.0<(-u_xlat0.x);
#endif
    u_xlat16_6.x = u_xlat0.x * -0.318309903;
    u_xlat0.x = max(_FaceMapRotateOffset, 0.0);
    u_xlat14 = _FaceMapRotateOffset + 1.0;
    u_xlat14 = min(u_xlat14, 1.0);
    u_xlat14 = (-u_xlat0.x) + u_xlat14;
    u_xlat0.x = (-u_xlat0.x) + abs(u_xlat16_6.x);
    u_xlat14 = float(1.0) / u_xlat14;
    u_xlat0.x = u_xlat14 * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat14 = u_xlat0.x * -2.0 + 3.0;
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * u_xlat14;
    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);
    u_xlat0.x = min(u_xlat0.x, 0.999899983);
    u_xlat16_6.xy = in_TEXCOORD0.xy * vec2(-1.0, 1.0) + vec2(1.0, 0.0);
    vs_TEXCOORD6.xy = (bool(u_xlatb7)) ? u_xlat16_6.xy : in_TEXCOORD0.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_CharacterAmbientSensorShadowOn));
#else
    u_xlatb7 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_CharacterAmbientSensorShadowOn);
#endif
    if(u_xlatb7){
        u_xlat7 = textureLod(_CharacterAmbientSensorTex, _AmbientSensorUVs.xy, 0.0).x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb7 = !!(0.5<u_xlat7);
#else
        u_xlatb7 = 0.5<u_xlat7;
#endif
        vs_TEXCOORD4 = u_xlatb7 ? 1.0 : float(0.0);
    } else {
        vs_TEXCOORD4 = 0.0;
    //ENDIF
    }
    gl_Position = u_xlat3;
    vs_COLOR0.xyz = in_COLOR0.xyz;
    vs_TEXCOORD1.xyz = u_xlat8.xyz;
    vs_TEXCOORD2.zw = u_xlat3.zw;
    vs_TEXCOORD6.z = u_xlat0.x;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	mediump vec4 _Color;
uniform 	float _MainTexAlphaUse;
uniform 	mediump float _MainTexAlphaCutoff;
uniform 	float _UseVertexColorAO;
uniform 	mediump float _LightArea;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	float _UseCoolShadowColorOrTex;
uniform 	mediump vec3 _CoolShadowMultColor;
uniform 	float _UseShadowTransition;
uniform 	float _ShadowTransitionRange;
uniform 	float _ShadowTransitionSoftness;
uniform 	mediump vec3 _SpecularColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	float _FaceBlushStrength;
uniform 	mediump vec3 _FaceBlushColor;
uniform 	mediump float _EmissionScaler;
uniform 	mediump vec3 _EmissionColor_MHY;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _TextureBiasWhenDithering;
uniform 	float _UseClipPlane;
uniform 	float _ES_CharacterAmbientLightOn;
uniform 	float _ES_CharacterAmbientBrightness;
uniform 	vec3 _ES_CharacterMainLightColor;
uniform 	vec3 _ES_CharacterAmbientLightColor;
uniform 	float _ES_CharacterMainLightRatio;
uniform 	float _ES_CharacterAmbientLightRatio;
uniform 	float _ES_CharacterColorTone;
uniform 	float _ES_CharacterPointLightWholeIntensity;
uniform 	vec4 mhy_AvatarLightDir;
uniform 	vec4 mhy_CharacterPointLightColor;
uniform 	vec4 mhy_CharacterOverrideLightDir;
uniform 	mediump vec4 _FlowMapColor01;
uniform 	mediump float _FlowScale01;
uniform 	mediump float _FlowMap01_Uspeed;
uniform 	vec4 _FlowMap01_ST;
uniform 	mediump float _FlowMap01_Vspeed;
uniform 	mediump float _Noise_Uspeed;
uniform 	vec4 _Noise_ST;
uniform 	mediump float _Noise_Vspeed;
uniform 	mediump float _NoiseFlowIntensity;
uniform 	mediump float _MaskOffset01;
uniform 	mediump float _NoiseIntensity;
uniform 	mediump float _Mask01_Power;
uniform 	mediump vec4 _FlowMapColor02;
uniform 	mediump float _FlowScale02;
uniform 	mediump float _FlowMap02_Uspeed;
uniform 	vec4 _FlowMap02_ST;
uniform 	mediump float _FlowMap02_Vspeed;
uniform 	mediump float _MaskOffset02;
uniform 	mediump float _Mask02_Power;
uniform 	mediump float _DissolveNoise_Uspeed;
uniform 	vec4 _DissovleNoise_ST;
uniform 	mediump float _DissolveNoise_Vspeed;
uniform 	mediump float _DissovleNoiseScale;
uniform 	mediump float _Dissovle;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _Noise;
uniform lowp sampler2D _FlowMap01;
uniform lowp sampler2D _Mask01;
uniform lowp sampler2D _FlowMap02;
uniform lowp sampler2D _Mask02;
uniform lowp sampler2D _DissovleNoise;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp float vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
lowp float u_xlat10_2;
int u_xlati2;
bvec3 u_xlatb2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
lowp float u_xlat10_3;
int u_xlati3;
bool u_xlatb3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec2 u_xlat16_7;
mediump vec3 u_xlat16_8;
vec3 u_xlat9;
bool u_xlatb10;
vec3 u_xlat12;
mediump vec3 u_xlat16_12;
lowp float u_xlat10_12;
int u_xlati12;
bool u_xlatb12;
vec3 u_xlat13;
mediump vec3 u_xlat16_13;
mediump float u_xlat16_14;
mediump vec2 u_xlat16_15;
mediump vec2 u_xlat16_16;
bvec2 u_xlatb20;
float u_xlat22;
bool u_xlatb22;
mediump vec2 u_xlat16_25;
float u_xlat30;
bool u_xlatb30;
float u_xlat32;
mediump float u_xlat16_32;
lowp float u_xlat10_32;
int u_xlati32;
bool u_xlatb32;
float u_xlat33;
mediump float u_xlat16_34;
mediump float u_xlat16_35;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseClipPlane));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseClipPlane);
#endif
    u_xlat16_1.x = vs_COLOR0.w + -0.00999999978;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(u_xlat16_1.x<0.0);
#else
    u_xlatb10 = u_xlat16_1.x<0.0;
#endif
    u_xlatb0 = u_xlatb0 && u_xlatb10;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(_DitherAlpha<0.949999988);
#else
        u_xlatb0 = _DitherAlpha<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb20.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb20.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb20.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = _DitherAlpha * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + -0.00999999978;
#ifdef UNITY_ADRENO_ES3
            u_xlatb0 = !!(u_xlat0.x<0.0);
#else
            u_xlatb0 = u_xlat0.x<0.0;
#endif
            if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(0.5<mhy_CharacterOverrideLightDir.w);
#else
    u_xlatb2.x = 0.5<mhy_CharacterOverrideLightDir.w;
#endif
    u_xlat3.x = mhy_CharacterOverrideLightDir.x;
    u_xlat3.yz = (-mhy_CharacterOverrideLightDir.yz);
    u_xlat2.xyz = (u_xlatb2.x) ? u_xlat3.xyz : mhy_AvatarLightDir.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat30) + u_xlat2.xyz;
    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
    u_xlat30 = _TextureBiasWhenDithering + -1.0;
    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy, u_xlat30);
    u_xlatb2.xyz = equal(vec4(_MainTexAlphaUse), vec4(3.0, 1.0, 2.0, 0.0)).xyz;
    u_xlat30 = u_xlat1.w * _FaceBlushStrength;
    u_xlat3.xyz = (-u_xlat1.xyz) + _FaceBlushColor.xyz;
    u_xlat3.xyz = vec3(u_xlat30) * u_xlat3.xyz + u_xlat1.xyz;
    u_xlat16_4.xyz = (u_xlatb2.x) ? u_xlat3.xyz : u_xlat1.xyz;
    u_xlat16_34 = u_xlat1.w + (-_MainTexAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(u_xlat16_34<0.0);
#else
    u_xlatb30 = u_xlat16_34<0.0;
#endif
    u_xlatb30 = u_xlatb2.y && u_xlatb30;
    if((int(u_xlatb30) * int(0xffffffffu))!=0){discard;}
    u_xlat16_4.xyz = u_xlat16_4.xyz * _Color.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(0.00999999978<u_xlat1.w);
#else
    u_xlatb30 = 0.00999999978<u_xlat1.w;
#endif
    u_xlatb30 = u_xlatb30 && u_xlatb2.z;
    u_xlat16_34 = (u_xlatb30) ? u_xlat1.w : 0.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorAO));
#else
    u_xlatb2.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorAO);
#endif
    u_xlat16_5.x = vs_COLOR0.x * 0.5;
    u_xlat16_5.x = (u_xlatb2.x) ? u_xlat16_5.x : 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat16_5.x<0.0500000007);
#else
    u_xlatb12 = u_xlat16_5.x<0.0500000007;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(0.949999988<u_xlat16_5.x);
#else
    u_xlatb22 = 0.949999988<u_xlat16_5.x;
#endif
    u_xlat32 = u_xlat16_5.x + vs_TEXCOORD1.w;
    u_xlat32 = u_xlat32 * 0.5;
    u_xlat16_5.x = (u_xlatb22) ? 1.0 : u_xlat32;
    u_xlat16_5.x = (u_xlatb12) ? 0.0 : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb2.x) ? u_xlat16_5.x : vs_TEXCOORD1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(u_xlat16_5.x<_LightArea);
#else
    u_xlatb2.x = u_xlat16_5.x<_LightArea;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition));
#else
    u_xlatb12 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition);
#endif
    u_xlat16_5.x = (-u_xlat16_5.x) + _LightArea;
    u_xlat16_5.x = u_xlat16_5.x / _ShadowTransitionRange;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(u_xlat16_5.x>=1.0);
#else
    u_xlatb22 = u_xlat16_5.x>=1.0;
#endif
    u_xlat16_32 = u_xlat16_5.x + 0.00999999978;
    u_xlat16_32 = log2(u_xlat16_32);
    u_xlat32 = u_xlat16_32 * _ShadowTransitionSoftness;
    u_xlat32 = exp2(u_xlat32);
    u_xlat32 = min(u_xlat32, 1.0);
    u_xlat22 = (u_xlatb22) ? 1.0 : u_xlat32;
    u_xlat22 = (u_xlatb12) ? u_xlat22 : 1.0;
    u_xlat22 = u_xlatb2.x ? u_xlat22 : float(0.0);
#ifdef UNITY_ADRENO_ES3
    { bool cond = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(vs_TEXCOORD4); u_xlati32 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati32 = int((vec4(0.0, 0.0, 0.0, 0.0)!=vec4(vs_TEXCOORD4)) ? 0xFFFFFFFFu : uint(0u));
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex));
#else
    u_xlatb3 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex);
#endif
    u_xlat16_13.xyz = vec3(_FirstShadowMultColor.xxyz.y + (-_CoolShadowMultColor.x), _FirstShadowMultColor.xxyz.z + (-_CoolShadowMultColor.y), float(_FirstShadowMultColor.z) + (-_CoolShadowMultColor.z));
    u_xlat13.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_13.xyz + _CoolShadowMultColor.xyz;
    u_xlat16_5.xyz = (bool(u_xlatb3)) ? u_xlat13.xyz : vec3(_FirstShadowMultColor.x, _FirstShadowMultColor.y, _FirstShadowMultColor.z);
    u_xlati3 = ~u_xlati32;
    u_xlati12 = u_xlatb12 ? u_xlati3 : int(0);
    u_xlat16_3.xyz = u_xlat16_5.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat3.xyz = vec3(u_xlat22) * u_xlat16_3.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_5.xyz = (int(u_xlati12) != 0) ? u_xlat3.xyz : u_xlat16_5.xyz;
    u_xlat16_5.xyz = (int(u_xlati32) != 0) ? u_xlat16_5.xyz : vec3(1.0, 1.0, 1.0);
    u_xlat16_35 = dot(vs_TEXCOORD1.xyz, u_xlat0.xyz);
    u_xlat16_35 = max(u_xlat16_35, 0.00100000005);
    u_xlat16_35 = log2(u_xlat16_35);
    u_xlat16_35 = u_xlat16_35 * _Shininess;
    u_xlat16_35 = exp2(u_xlat16_35);
    u_xlat16_6.xyz = vec3(u_xlat16_35) * _SpecularColor.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(_SpecMulti);
    u_xlat16_4.xyz = vec3(u_xlat16_4.x * _EmissionColor_MHY.xxyz.y, u_xlat16_4.y * _EmissionColor_MHY.xxyz.z, u_xlat16_4.z * float(_EmissionColor_MHY.z));
    u_xlat0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlati2 = int(uint(u_xlatb2.x) * 0xffffffffu | uint(u_xlati32));
    u_xlat12.xyz = u_xlat0.xyz * u_xlat16_5.xyz;
    u_xlat0.xyz = (int(u_xlati2) != 0) ? u_xlat12.xyz : u_xlat0.xyz;
    u_xlat0.xyz = u_xlat16_6.xyz * vec3(0.5, 0.5, 0.5) + u_xlat0.xyz;
    u_xlat2.xy = vs_TEXCOORD0.zw * _FlowMap01_ST.xy + _FlowMap01_ST.zw;
    u_xlat16_5.x = _Time.y * _FlowMap01_Uspeed + u_xlat2.x;
    u_xlat16_5.y = _Time.y * _FlowMap01_Vspeed + u_xlat2.y;
    u_xlat2.xy = vs_TEXCOORD0.zw * _Noise_ST.xy + _Noise_ST.zw;
    u_xlat16_6.x = _Time.y * _Noise_Uspeed + u_xlat2.x;
    u_xlat16_6.y = _Time.y * _Noise_Vspeed + u_xlat2.y;
    u_xlat10_2 = texture(_Noise, u_xlat16_6.xy).x;
    u_xlat16_25.x = _MaskOffset01 * 1.39999998 + -0.699999988;
    u_xlat16_16.x = u_xlat10_2 * _NoiseIntensity;
    u_xlat12.xy = vs_TEXCOORD0.zw * _FlowMap02_ST.xy + _FlowMap02_ST.zw;
    u_xlat16_7.x = _Time.y * _FlowMap02_Uspeed + u_xlat12.x;
    u_xlat16_7.y = _Time.y * _FlowMap02_Vspeed + u_xlat12.y;
    u_xlat16_25.y = _MaskOffset02 * 1.39999998 + -0.699999988;
    u_xlat16_8.xyz = _FlowMapColor01.xyz * vec3(_FlowScale01);
    u_xlat16_5.xy = vec2(u_xlat10_2) * vec2(vec2(_NoiseFlowIntensity, _NoiseFlowIntensity)) + u_xlat16_5.xy;
    u_xlat10_12 = texture(_FlowMap01, u_xlat16_5.xy).x;
    u_xlat16_12.xyz = vec3(u_xlat10_12) * u_xlat16_8.xyz;
    u_xlat16_5.x = (-vs_TEXCOORD0.z) + 1.0;
    u_xlat16_1.xz = u_xlat16_25.xy + u_xlat16_5.xx;
    u_xlat16_1.yw = vec2(u_xlat10_2) * vec2(vec2(_NoiseIntensity, _NoiseIntensity)) + (-vs_TEXCOORD0.ww);
    u_xlat16_16.y = 1.0;
    u_xlat16_15.xy = u_xlat16_1.xy + u_xlat16_16.xy;
    u_xlat10_3 = texture(_Mask01, u_xlat16_15.xy).x;
    u_xlat16_3.x = max(u_xlat10_3, 9.99999975e-05);
    u_xlat16_3.x = log2(u_xlat16_3.x);
    u_xlat16_3.x = u_xlat16_3.x * _Mask01_Power;
    u_xlat16_3.x = exp2(u_xlat16_3.x);
    u_xlat16_8.xyz = _FlowMapColor02.xyz * vec3(_FlowScale02);
    u_xlat16_15.xy = vec2(u_xlat10_2) * vec2(vec2(_NoiseFlowIntensity, _NoiseFlowIntensity)) + u_xlat16_7.xy;
    u_xlat10_2 = texture(_FlowMap02, u_xlat16_15.xy).x;
    u_xlat16_13.xyz = vec3(u_xlat10_2) * u_xlat16_8.xyz;
    u_xlat16_5.xy = vec2(u_xlat16_1.z + u_xlat16_16.x, u_xlat16_1.w + u_xlat16_16.y);
    u_xlat10_2 = texture(_Mask02, u_xlat16_5.xy).x;
    u_xlat16_2.x = max(u_xlat10_2, 9.99999975e-05);
    u_xlat16_2.x = log2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * _Mask02_Power;
    u_xlat16_2.x = exp2(u_xlat16_2.x);
    u_xlat16_13.xyz = u_xlat16_2.xxx * u_xlat16_13.xyz;
    u_xlat16_2.xyz = u_xlat16_12.xyz * u_xlat16_3.xxx + u_xlat16_13.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(_EmissionScaler) + u_xlat16_2.xyz;
    u_xlat3.xyz = (-u_xlat0.xyz) + u_xlat16_4.xyz;
    u_xlat3.xyz = vec3(u_xlat16_34) * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat9.xy = vs_TEXCOORD0.zw * _DissovleNoise_ST.xy + _DissovleNoise_ST.zw;
    u_xlat16_4.x = _Time.y * _DissolveNoise_Uspeed + u_xlat9.x;
    u_xlat16_4.y = _Time.y * _DissolveNoise_Vspeed + u_xlat9.y;
    u_xlat10_32 = texture(_DissovleNoise, u_xlat16_4.xy).x;
    u_xlat32 = u_xlat10_32 * _DissovleNoiseScale + vs_TEXCOORD0.z;
#ifdef UNITY_ADRENO_ES3
    u_xlatb32 = !!(_Dissovle>=u_xlat32);
#else
    u_xlatb32 = _Dissovle>=u_xlat32;
#endif
    u_xlat0.xyz = (bool(u_xlatb30)) ? u_xlat3.xyz : u_xlat0.xyz;
    u_xlat0.xyz = u_xlat16_2.xyz + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(0.00999999978<u_xlat16_34);
#else
    u_xlatb30 = 0.00999999978<u_xlat16_34;
#endif
    if((int(u_xlatb32) * int(0xffffffffu))==0){discard;}
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn));
#else
    u_xlatb2.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn);
#endif
    u_xlat12.xyz = u_xlat0.xyz * vec3(vec3(_ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness));
    u_xlat3.xyz = vec3(vec3(_ES_CharacterPointLightWholeIntensity, _ES_CharacterPointLightWholeIntensity, _ES_CharacterPointLightWholeIntensity)) * mhy_CharacterPointLightColor.xyz;
    u_xlat9.xyz = _ES_CharacterMainLightColor.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat9.xyz = min(max(u_xlat9.xyz, 0.0), 1.0);
#else
    u_xlat9.xyz = clamp(u_xlat9.xyz, 0.0, 1.0);
#endif
    u_xlat33 = (-mhy_CharacterPointLightColor.w) + 1.0;
    u_xlat3.xyz = u_xlat9.xyz * vec3(u_xlat33) + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat3.xyz = vec3(vec3(_ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio)) * u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat12.xyz = u_xlat12.xyz * u_xlat3.xyz;
    u_xlat3.xyz = _ES_CharacterAmbientLightColor.xyz * vec3(_ES_CharacterAmbientLightRatio);
    u_xlat16_4.xyz = u_xlat12.xyz * vec3(10.0, 10.0, 10.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.xyz = min(max(u_xlat16_4.xyz, 0.0), 1.0);
#else
    u_xlat16_4.xyz = clamp(u_xlat16_4.xyz, 0.0, 1.0);
#endif
    u_xlat12.xyz = u_xlat3.xyz * u_xlat16_4.xyz + u_xlat12.xyz;
    u_xlat16_4.xyz = (u_xlatb2.x) ? u_xlat12.xyz : u_xlat0.xyz;
    u_xlat16_5.xyz = u_xlat0.xyz + (-u_xlat16_4.xyz);
    u_xlat16_5.xyz = vec3(u_xlat16_34) * u_xlat16_5.xyz + u_xlat16_4.xyz;
    u_xlat16_0.xyz = (bool(u_xlatb30)) ? u_xlat16_5.xyz : u_xlat16_4.xyz;
    u_xlat16_4.x = max(u_xlat16_0.z, u_xlat16_0.y);
    u_xlat16_1.w = max(u_xlat16_0.x, u_xlat16_4.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(1.0<u_xlat16_1.w);
#else
    u_xlatb2.x = 1.0<u_xlat16_1.w;
#endif
    u_xlat16_1.xyz = u_xlat16_0.xyz / u_xlat16_1.www;
    u_xlat16_0.w = 1.0;
    u_xlat16_0 = (u_xlatb2.x) ? u_xlat16_1 : u_xlat16_0;
    u_xlat16_4.x = min(u_xlat16_0.w, 1.10000002);
    u_xlat16_14 = u_xlat16_0.w + (-u_xlat16_4.x);
    u_xlat16_4.x = u_xlat16_34 * u_xlat16_14 + u_xlat16_4.x;
    u_xlat16_2.x = u_xlat16_4.x * 0.0500000007;
    SV_Target0.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb12 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_4.x = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb12) ? u_xlat16_4.x : 0.0;
    SV_Target0.w = 0.0156862754;
    SV_Target1.xyz = u_xlat16_0.xyz;
    SV_Target1.w = u_xlat16_2.x;
    SV_Target2.xy = vec2(0.0, 0.0);
    SV_Target2.w = vs_TEXCOORD4;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "TOON_SPECULAR_ON" "TOON_LIGHTMAP_ON" "FACE_MAP_NEW_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	vec4 _MainTex_ST;
uniform 	float _FaceMapRotateOffset;
uniform 	float _CharacterAmbientSensorShadowOn;
uniform 	vec4 _AmbientSensorUVs;
uniform 	float _UseClipPlane;
uniform 	float _ClipPlaneWorld;
uniform 	vec4 _ClipPlane;
uniform 	vec4 mhy_AvatarLightDir;
uniform 	vec4 mhy_CharacterOverrideLightDir;
uniform lowp sampler2D _CharacterAmbientSensorTex;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp float vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD6;
vec3 u_xlat0;
bool u_xlatb0;
vec3 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
bool u_xlatb3;
vec4 u_xlat4;
vec4 u_xlat5;
mediump vec2 u_xlat16_6;
float u_xlat7;
bool u_xlatb7;
vec3 u_xlat8;
bvec2 u_xlatb8;
bool u_xlatb9;
mediump float u_xlat16_13;
float u_xlat14;
bool u_xlatb14;
float u_xlat15;
float u_xlat21;
float u_xlat22;
bool u_xlatb22;
float u_xlat23;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.5<mhy_CharacterOverrideLightDir.w);
#else
    u_xlatb0 = 0.5<mhy_CharacterOverrideLightDir.w;
#endif
    u_xlat1.x = mhy_CharacterOverrideLightDir.x;
    u_xlat1.yz = (-mhy_CharacterOverrideLightDir.yz);
    u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat1.xyz : mhy_AvatarLightDir.xyz;
    u_xlat21 = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_ObjectToWorld[1].xyz);
    u_xlat1.x = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_ObjectToWorld[2].xyz);
    u_xlatb8.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseClipPlane, _ClipPlaneWorld, _UseClipPlane, _UseClipPlane)).xy;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(abs(_ClipPlane.w)<0.00100000005);
#else
    u_xlatb22 = abs(_ClipPlane.w)<0.00100000005;
#endif
    u_xlat2.xyz = _ClipPlane.www * _ClipPlane.xyz;
    u_xlat2.xyz = (bool(u_xlatb22)) ? vec3(0.0, 0.0, 0.0) : u_xlat2.xyz;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_WorldToObject[1];
    u_xlat3 = hlslcc_mtx4x4unity_WorldToObject[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat2 = hlslcc_mtx4x4unity_WorldToObject[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat2 = u_xlat2 + hlslcc_mtx4x4unity_WorldToObject[3];
    u_xlat2.xyz = u_xlat2.xyz / u_xlat2.www;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * _ClipPlane.yyy;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _ClipPlane.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _ClipPlane.zzz + u_xlat3.xyz;
    u_xlat22 = dot(u_xlat2.xyz, u_xlat3.xyz);
    u_xlat2.x = dot(in_POSITION0.xyz, u_xlat3.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(u_xlat2.x<u_xlat22);
#else
    u_xlatb9 = u_xlat2.x<u_xlat22;
#endif
    u_xlat22 = (-u_xlat22) + u_xlat2.x;
    u_xlat3.xyz = (-vec3(u_xlat22)) * u_xlat3.xyz + in_POSITION0.xyz;
    u_xlat3.w = 0.0;
    u_xlat4.xyz = in_POSITION0.xyz;
    u_xlat4.w = in_COLOR0.w;
    u_xlat2 = (bool(u_xlatb9)) ? u_xlat3 : u_xlat4;
    u_xlat22 = dot(in_POSITION0.xyz, _ClipPlane.xyz);
    u_xlat3.x = _ClipPlane.w + -0.00999999978;
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(u_xlat22<u_xlat3.x);
#else
    u_xlatb3 = u_xlat22<u_xlat3.x;
#endif
    u_xlat22 = u_xlat22 + (-_ClipPlane.w);
    u_xlat5.xyz = (-vec3(u_xlat22)) * _ClipPlane.xyz + in_POSITION0.xyz;
    u_xlat5.w = 0.0;
    u_xlat3 = (bool(u_xlatb3)) ? u_xlat5 : u_xlat4;
    u_xlat2.xyz = (u_xlatb8.y) ? u_xlat2.xyz : u_xlat3.xyz;
    u_xlat16_6.x = (u_xlatb8.y) ? u_xlat2.w : u_xlat3.w;
    u_xlat2.xyz = (u_xlatb8.x) ? u_xlat2.xyz : in_POSITION0.xyz;
    vs_COLOR0.w = (u_xlatb8.x) ? u_xlat16_6.x : in_COLOR0.w;
    u_xlat3.xyw = (-_WorldSpaceCameraPos.xyz) + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat4.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;
    u_xlat4.y = hlslcc_mtx4x4unity_ObjectToWorld[1].x;
    u_xlat4.z = hlslcc_mtx4x4unity_ObjectToWorld[2].x;
    u_xlat4.w = u_xlat3.x;
    u_xlat2.w = 1.0;
    u_xlat8.x = dot(u_xlat4, u_xlat2);
    u_xlat4.x = hlslcc_mtx4x4unity_ObjectToWorld[0].y;
    u_xlat4.y = hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat4.z = hlslcc_mtx4x4unity_ObjectToWorld[2].y;
    u_xlat4.w = u_xlat3.y;
    u_xlat15 = dot(u_xlat4, u_xlat2);
    u_xlat3.x = hlslcc_mtx4x4unity_ObjectToWorld[0].z;
    u_xlat3.y = hlslcc_mtx4x4unity_ObjectToWorld[1].z;
    u_xlat3.z = hlslcc_mtx4x4unity_ObjectToWorld[2].z;
    u_xlat22 = dot(u_xlat3, u_xlat2);
    u_xlat3.x = hlslcc_mtx4x4unity_ObjectToWorld[0].w;
    u_xlat3.y = hlslcc_mtx4x4unity_ObjectToWorld[1].w;
    u_xlat3.z = hlslcc_mtx4x4unity_ObjectToWorld[2].w;
    u_xlat3.w = hlslcc_mtx4x4unity_ObjectToWorld[3].w;
    u_xlat23 = dot(u_xlat3, u_xlat2);
    u_xlat3 = vec4(u_xlat15) * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat8.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVPZero[2] * vec4(u_xlat22) + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVPZero[3] * vec4(u_xlat23) + u_xlat3;
    u_xlat4 = u_xlat2.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat4 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat2.xxxx + u_xlat4;
    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat2.zzzz + u_xlat4;
    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat2;
    vs_TEXCOORD3.xyz = u_xlat2.xyz / u_xlat2.www;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat2.xz = u_xlat3.xw * vec2(0.5, 0.5);
    u_xlat8.x = u_xlat3.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat8.x * 0.5;
    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat8.xyz = in_NORMAL0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat8.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_NORMAL0.xxx + u_xlat8.xyz;
    u_xlat8.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_NORMAL0.zzz + u_xlat8.xyz;
    u_xlat2.x = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat8.xyz = u_xlat8.xyz * u_xlat2.xxx;
    u_xlat16_6.x = dot(u_xlat8.xyz, u_xlat0.xyz);
    vs_TEXCOORD1.w = u_xlat16_6.x * 0.497500002 + 0.5;
    u_xlat16_6.x = min(abs(u_xlat21), abs(u_xlat1.x));
    u_xlat16_13 = max(abs(u_xlat21), abs(u_xlat1.x));
    u_xlat16_13 = float(1.0) / u_xlat16_13;
    u_xlat16_6.x = u_xlat16_13 * u_xlat16_6.x;
    u_xlat16_13 = u_xlat16_6.x * u_xlat16_6.x;
    u_xlat0.x = u_xlat16_13 * 0.0208350997 + -0.0851330012;
    u_xlat0.x = u_xlat16_13 * u_xlat0.x + 0.180141002;
    u_xlat0.x = u_xlat16_13 * u_xlat0.x + -0.330299497;
    u_xlat0.x = u_xlat16_13 * u_xlat0.x + 0.999866009;
    u_xlat7 = u_xlat0.x * u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(abs(u_xlat21)<abs(u_xlat1.x));
#else
    u_xlatb14 = abs(u_xlat21)<abs(u_xlat1.x);
#endif
    u_xlat7 = u_xlat7 * -2.0 + 1.57079637;
    u_xlat7 = u_xlatb14 ? u_xlat7 : float(0.0);
    u_xlat0.x = u_xlat16_6.x * u_xlat0.x + u_xlat7;
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(u_xlat21<(-u_xlat21));
#else
    u_xlatb7 = u_xlat21<(-u_xlat21);
#endif
    u_xlat7 = u_xlatb7 ? -3.14159274 : float(0.0);
    u_xlat0.x = u_xlat7 + u_xlat0.x;
    u_xlat16_6.x = min(u_xlat21, u_xlat1.x);
    u_xlat16_13 = max(u_xlat21, u_xlat1.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(u_xlat16_6.x<(-u_xlat16_6.x));
#else
    u_xlatb7 = u_xlat16_6.x<(-u_xlat16_6.x);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(u_xlat16_13>=(-u_xlat16_13));
#else
    u_xlatb14 = u_xlat16_13>=(-u_xlat16_13);
#endif
    u_xlatb7 = u_xlatb14 && u_xlatb7;
    u_xlat0.x = (u_xlatb7) ? (-u_xlat0.x) : u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(0.0<(-u_xlat0.x));
#else
    u_xlatb7 = 0.0<(-u_xlat0.x);
#endif
    u_xlat16_6.x = u_xlat0.x * -0.318309903;
    u_xlat0.x = max(_FaceMapRotateOffset, 0.0);
    u_xlat14 = _FaceMapRotateOffset + 1.0;
    u_xlat14 = min(u_xlat14, 1.0);
    u_xlat14 = (-u_xlat0.x) + u_xlat14;
    u_xlat0.x = (-u_xlat0.x) + abs(u_xlat16_6.x);
    u_xlat14 = float(1.0) / u_xlat14;
    u_xlat0.x = u_xlat14 * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat14 = u_xlat0.x * -2.0 + 3.0;
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * u_xlat14;
    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);
    u_xlat0.x = min(u_xlat0.x, 0.999899983);
    u_xlat16_6.xy = in_TEXCOORD0.xy * vec2(-1.0, 1.0) + vec2(1.0, 0.0);
    vs_TEXCOORD6.xy = (bool(u_xlatb7)) ? u_xlat16_6.xy : in_TEXCOORD0.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_CharacterAmbientSensorShadowOn));
#else
    u_xlatb7 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_CharacterAmbientSensorShadowOn);
#endif
    if(u_xlatb7){
        u_xlat7 = textureLod(_CharacterAmbientSensorTex, _AmbientSensorUVs.xy, 0.0).x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb7 = !!(0.5<u_xlat7);
#else
        u_xlatb7 = 0.5<u_xlat7;
#endif
        vs_TEXCOORD4 = u_xlatb7 ? 1.0 : float(0.0);
    } else {
        vs_TEXCOORD4 = 0.0;
    //ENDIF
    }
    gl_Position = u_xlat3;
    vs_COLOR0.xyz = in_COLOR0.xyz;
    vs_TEXCOORD1.xyz = u_xlat8.xyz;
    vs_TEXCOORD2.zw = u_xlat3.zw;
    vs_TEXCOORD6.z = u_xlat0.x;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	mediump vec4 _Color;
uniform 	float _MainTexAlphaUse;
uniform 	mediump float _MainTexAlphaCutoff;
uniform 	float _UseLightMapColorAO;
uniform 	float _UseVertexColorAO;
uniform 	mediump float _LightArea;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	float _UseCoolShadowColorOrTex;
uniform 	mediump vec3 _CoolShadowMultColor;
uniform 	float _UseShadowTransition;
uniform 	float _ShadowTransitionRange;
uniform 	float _ShadowTransitionSoftness;
uniform 	mediump vec3 _SpecularColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	float _FaceBlushStrength;
uniform 	mediump vec3 _FaceBlushColor;
uniform 	float _FaceMapSoftness;
uniform 	mediump float _EmissionScaler;
uniform 	mediump vec3 _EmissionColor_MHY;
uniform 	float _UseMaterial2;
uniform 	mediump vec3 _Color2;
uniform 	mediump vec3 _FirstShadowMultColor2;
uniform 	mediump vec3 _CoolShadowMultColor2;
uniform 	mediump float _Shininess2;
uniform 	mediump float _SpecMulti2;
uniform 	float _ShadowTransitionRange2;
uniform 	float _ShadowTransitionSoftness2;
uniform 	float _UseMaterial3;
uniform 	mediump vec3 _Color3;
uniform 	mediump vec3 _FirstShadowMultColor3;
uniform 	mediump vec3 _CoolShadowMultColor3;
uniform 	mediump float _Shininess3;
uniform 	mediump float _SpecMulti3;
uniform 	float _ShadowTransitionRange3;
uniform 	float _ShadowTransitionSoftness3;
uniform 	float _UseMaterial4;
uniform 	mediump vec3 _Color4;
uniform 	mediump vec3 _FirstShadowMultColor4;
uniform 	mediump vec3 _CoolShadowMultColor4;
uniform 	mediump float _Shininess4;
uniform 	mediump float _SpecMulti4;
uniform 	float _ShadowTransitionRange4;
uniform 	float _ShadowTransitionSoftness4;
uniform 	float _UseMaterial5;
uniform 	mediump vec3 _Color5;
uniform 	mediump vec3 _FirstShadowMultColor5;
uniform 	mediump vec3 _CoolShadowMultColor5;
uniform 	mediump float _Shininess5;
uniform 	mediump float _SpecMulti5;
uniform 	float _ShadowTransitionRange5;
uniform 	float _ShadowTransitionSoftness5;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _TextureBiasWhenDithering;
uniform 	float _UseClipPlane;
uniform 	float _ES_CharacterAmbientLightOn;
uniform 	float _ES_CharacterAmbientBrightness;
uniform 	vec3 _ES_CharacterMainLightColor;
uniform 	vec3 _ES_CharacterAmbientLightColor;
uniform 	float _ES_CharacterMainLightRatio;
uniform 	float _ES_CharacterAmbientLightRatio;
uniform 	float _ES_CharacterColorTone;
uniform 	float _ES_CharacterPointLightWholeIntensity;
uniform 	vec4 mhy_AvatarLightDir;
uniform 	vec4 mhy_CharacterPointLightColor;
uniform 	vec4 mhy_CharacterOverrideLightDir;
uniform 	mediump vec4 _FlowMapColor01;
uniform 	mediump float _FlowScale01;
uniform 	mediump float _FlowMap01_Uspeed;
uniform 	vec4 _FlowMap01_ST;
uniform 	mediump float _FlowMap01_Vspeed;
uniform 	mediump float _Noise_Uspeed;
uniform 	vec4 _Noise_ST;
uniform 	mediump float _Noise_Vspeed;
uniform 	mediump float _NoiseFlowIntensity;
uniform 	mediump float _MaskOffset01;
uniform 	mediump float _NoiseIntensity;
uniform 	mediump float _Mask01_Power;
uniform 	mediump vec4 _FlowMapColor02;
uniform 	mediump float _FlowScale02;
uniform 	mediump float _FlowMap02_Uspeed;
uniform 	vec4 _FlowMap02_ST;
uniform 	mediump float _FlowMap02_Vspeed;
uniform 	mediump float _MaskOffset02;
uniform 	mediump float _Mask02_Power;
uniform 	mediump float _DissolveNoise_Uspeed;
uniform 	vec4 _DissovleNoise_ST;
uniform 	mediump float _DissolveNoise_Vspeed;
uniform 	mediump float _DissovleNoiseScale;
uniform 	mediump float _Dissovle;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _FaceMapTex;
uniform lowp sampler2D _Noise;
uniform lowp sampler2D _FlowMap01;
uniform lowp sampler2D _Mask01;
uniform lowp sampler2D _FlowMap02;
uniform lowp sampler2D _Mask02;
uniform lowp sampler2D _DissovleNoise;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp float vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
vec3 u_xlat2;
mediump float u_xlat16_2;
bvec3 u_xlatb2;
vec3 u_xlat3;
mediump float u_xlat16_3;
lowp vec4 u_xlat10_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
bvec4 u_xlatb5;
vec3 u_xlat6;
mediump vec3 u_xlat16_6;
bvec3 u_xlatb6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
bool u_xlatb11;
vec3 u_xlat13;
mediump vec3 u_xlat16_13;
lowp float u_xlat10_13;
bool u_xlatb13;
float u_xlat14;
mediump vec3 u_xlat16_14;
int u_xlati14;
mediump float u_xlat16_15;
mediump vec3 u_xlat16_18;
mediump vec3 u_xlat16_19;
bvec2 u_xlatb22;
vec2 u_xlat24;
mediump float u_xlat16_30;
float u_xlat33;
mediump float u_xlat16_33;
lowp float u_xlat10_33;
int u_xlati33;
bool u_xlatb33;
float u_xlat35;
float u_xlat36;
int u_xlati36;
bool u_xlatb36;
mediump float u_xlat16_37;
float u_xlat38;
mediump float u_xlat16_38;
int u_xlati38;
mediump float u_xlat16_40;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseClipPlane));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseClipPlane);
#endif
    u_xlat16_1.x = vs_COLOR0.w + -0.00999999978;
#ifdef UNITY_ADRENO_ES3
    u_xlatb11 = !!(u_xlat16_1.x<0.0);
#else
    u_xlatb11 = u_xlat16_1.x<0.0;
#endif
    u_xlatb0 = u_xlatb0 && u_xlatb11;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(_DitherAlpha<0.949999988);
#else
        u_xlatb0 = _DitherAlpha<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb22.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb22.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb22.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = _DitherAlpha * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + -0.00999999978;
#ifdef UNITY_ADRENO_ES3
            u_xlatb0 = !!(u_xlat0.x<0.0);
#else
            u_xlatb0 = u_xlat0.x<0.0;
#endif
            if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(0.5<mhy_CharacterOverrideLightDir.w);
#else
    u_xlatb2.x = 0.5<mhy_CharacterOverrideLightDir.w;
#endif
    u_xlat3.x = mhy_CharacterOverrideLightDir.x;
    u_xlat3.yz = (-mhy_CharacterOverrideLightDir.yz);
    u_xlat2.xyz = (u_xlatb2.x) ? u_xlat3.xyz : mhy_AvatarLightDir.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat33) + u_xlat2.xyz;
    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat0.xyz = vec3(u_xlat33) * u_xlat0.xyz;
    u_xlat33 = _TextureBiasWhenDithering + -1.0;
    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy, u_xlat33);
    u_xlatb2.xyz = equal(vec4(_MainTexAlphaUse), vec4(3.0, 1.0, 2.0, 0.0)).xyz;
    u_xlat35 = u_xlat1.w * _FaceBlushStrength;
    u_xlat3.xyz = (-u_xlat1.xyz) + _FaceBlushColor.xyz;
    u_xlat3.xyz = vec3(u_xlat35) * u_xlat3.xyz + u_xlat1.xyz;
    u_xlat16_4.xyz = (u_xlatb2.x) ? u_xlat3.xyz : u_xlat1.xyz;
    u_xlat16_37 = u_xlat1.w + (-_MainTexAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(u_xlat16_37<0.0);
#else
    u_xlatb2.x = u_xlat16_37<0.0;
#endif
    u_xlatb2.x = u_xlatb2.y && u_xlatb2.x;
    if((int(u_xlatb2.x) * int(0xffffffffu))!=0){discard;}
    u_xlat10_3 = texture(_LightMapTex, vs_TEXCOORD0.xy, u_xlat33);
    u_xlatb2.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseLightMapColorAO, _UseVertexColorAO, _UseLightMapColorAO, _UseLightMapColorAO)).xy;
    u_xlat16_37 = (u_xlatb2.x) ? u_xlat10_3.y : 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseMaterial2));
#else
    u_xlatb33 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseMaterial2);
#endif
    u_xlatb5 = greaterThanEqual(u_xlat10_3.wwww, vec4(0.800000012, 0.400000006, 0.200000003, 0.600000024));
    u_xlatb33 = u_xlatb33 && u_xlatb5.x;
    u_xlat33 = (u_xlatb33) ? 2.0 : 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseMaterial3));
#else
    u_xlatb2.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseMaterial3);
#endif
    u_xlatb2.x = u_xlatb5.y && u_xlatb2.x;
    u_xlatb6.xyz = lessThan(u_xlat10_3.wwww, vec4(0.600000024, 0.400000006, 0.800000012, 0.0)).xyz;
    u_xlatb2.x = u_xlatb2.x && u_xlatb6.x;
    u_xlat33 = (u_xlatb2.x) ? 3.0 : u_xlat33;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseMaterial4));
#else
    u_xlatb2.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseMaterial4);
#endif
    u_xlatb2.x = u_xlatb5.z && u_xlatb2.x;
    u_xlatb2.x = u_xlatb6.y && u_xlatb2.x;
    u_xlat33 = (u_xlatb2.x) ? 4.0 : u_xlat33;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseMaterial5));
#else
    u_xlatb2.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseMaterial5);
#endif
    u_xlatb2.x = u_xlatb5.w && u_xlatb2.x;
    u_xlatb2.x = u_xlatb6.z && u_xlatb2.x;
    u_xlat33 = (u_xlatb2.x) ? 5.0 : u_xlat33;
    u_xlatb5 = equal(vec4(u_xlat33), vec4(2.0, 3.0, 4.0, 5.0));
    u_xlat16_7.xyz = (u_xlatb5.x) ? _Color2.xyz : _Color.xyz;
    u_xlat16_7.xyz = (u_xlatb5.y) ? _Color3.xyz : u_xlat16_7.xyz;
    u_xlat16_7.xyz = (u_xlatb5.z) ? _Color4.xyz : u_xlat16_7.xyz;
    u_xlat16_7.xyz = (u_xlatb5.w) ? _Color5.xyz : u_xlat16_7.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_7.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(0.00999999978<u_xlat1.w);
#else
    u_xlatb2.x = 0.00999999978<u_xlat1.w;
#endif
    u_xlatb2.x = u_xlatb2.x && u_xlatb2.z;
    u_xlat16_7.x = (u_xlatb2.x) ? u_xlat1.w : 0.0;
    u_xlat24.x = texture(_FaceMapTex, vs_TEXCOORD6.xy).w;
    u_xlat35 = max(_FaceMapSoftness, 9.99999997e-07);
    u_xlat16_18.x = (-u_xlat35) + vs_TEXCOORD6.z;
    u_xlat16_14.x = max(u_xlat16_18.x, 9.99999975e-05);
    u_xlat16_14.x = min(u_xlat16_14.x, 0.998899996);
    u_xlat16_18.x = u_xlat35 + vs_TEXCOORD6.z;
    u_xlat24.y = min(u_xlat16_18.x, 0.999899983);
    u_xlat24.xy = u_xlat24.xy + (-u_xlat16_14.xx);
    u_xlat35 = float(1.0) / u_xlat24.y;
    u_xlat24.x = u_xlat35 * u_xlat24.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat24.x = min(max(u_xlat24.x, 0.0), 1.0);
#else
    u_xlat24.x = clamp(u_xlat24.x, 0.0, 1.0);
#endif
    u_xlat35 = u_xlat24.x * -2.0 + 3.0;
    u_xlat24.x = u_xlat24.x * u_xlat24.x;
    u_xlat14 = u_xlat24.x * u_xlat35;
    u_xlat16_18.x = u_xlat16_37 * vs_COLOR0.x;
    u_xlat16_37 = (u_xlatb2.y) ? u_xlat16_18.x : u_xlat16_37;
#ifdef UNITY_ADRENO_ES3
    u_xlatb13 = !!(u_xlat16_37<0.0500000007);
#else
    u_xlatb13 = u_xlat16_37<0.0500000007;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb36 = !!(0.949999988<u_xlat16_37);
#else
    u_xlatb36 = 0.949999988<u_xlat16_37;
#endif
    u_xlat6.x = u_xlat16_37 + vs_TEXCOORD1.w;
    u_xlat6.x = u_xlat6.x * 0.5;
    u_xlat16_37 = (u_xlatb36) ? 1.0 : u_xlat6.x;
    u_xlat16_37 = (u_xlatb13) ? 0.0 : u_xlat16_37;
#ifdef UNITY_ADRENO_ES3
    u_xlatb13 = !!(u_xlat16_37<_LightArea);
#else
    u_xlatb13 = u_xlat16_37<_LightArea;
#endif
    if(u_xlatb13){
#ifdef UNITY_ADRENO_ES3
        u_xlatb13 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition));
#else
        u_xlatb13 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition);
#endif
#ifdef UNITY_ADRENO_ES3
        u_xlatb36 = !!(u_xlat33==1.0);
#else
        u_xlatb36 = u_xlat33==1.0;
#endif
        u_xlat16_8.x = (u_xlatb36) ? _ShadowTransitionRange : 0.0;
        u_xlat16_8.y = (u_xlatb36) ? _ShadowTransitionSoftness : 0.0;
        u_xlat16_18.xy = (u_xlatb5.x) ? vec2(_ShadowTransitionRange2, _ShadowTransitionSoftness2) : u_xlat16_8.xy;
        u_xlat16_18.xy = (u_xlatb5.y) ? vec2(_ShadowTransitionRange3, _ShadowTransitionSoftness3) : u_xlat16_18.xy;
        u_xlat16_18.xy = (u_xlatb5.z) ? vec2(_ShadowTransitionRange4, _ShadowTransitionSoftness4) : u_xlat16_18.xy;
        u_xlat16_18.xy = (u_xlatb5.w) ? vec2(_ShadowTransitionRange5, _ShadowTransitionSoftness5) : u_xlat16_18.xy;
        u_xlat16_37 = (-u_xlat16_37) + _LightArea;
        u_xlat16_37 = u_xlat16_37 / u_xlat16_18.x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb36 = !!(u_xlat16_37>=1.0);
#else
        u_xlatb36 = u_xlat16_37>=1.0;
#endif
        u_xlat16_38 = u_xlat16_37 + 0.00999999978;
        u_xlat16_38 = log2(u_xlat16_38);
        u_xlat16_38 = u_xlat16_38 * u_xlat16_18.y;
        u_xlat16_38 = exp2(u_xlat16_38);
        u_xlat38 = min(u_xlat16_38, 1.0);
        u_xlat36 = (u_xlatb36) ? 1.0 : u_xlat38;
        u_xlat13.x = (u_xlatb13) ? u_xlat36 : 1.0;
        u_xlat16_37 = 0.0;
    } else {
        u_xlat13.x = 0.0;
        u_xlat16_37 = 1.0;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb36 = !!(0.5<u_xlat10_3.x);
#else
    u_xlatb36 = 0.5<u_xlat10_3.x;
#endif
    u_xlat16_18.x = min(u_xlat14, u_xlat16_37);
    u_xlat16_37 = (u_xlatb36) ? u_xlat16_18.x : u_xlat16_37;
    u_xlat16_37 = (-u_xlat16_37) + 1.0;
#ifdef UNITY_ADRENO_ES3
    { bool cond = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(vs_TEXCOORD4); u_xlati14 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati14 = int((vec4(0.0, 0.0, 0.0, 0.0)!=vec4(vs_TEXCOORD4)) ? 0xFFFFFFFFu : uint(0u));
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(u_xlat33==1.0);
#else
    u_xlatb33 = u_xlat33==1.0;
#endif
    if(u_xlatb33){
#ifdef UNITY_ADRENO_ES3
        u_xlatb36 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex));
#else
        u_xlatb36 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex);
#endif
        u_xlat16_6.xyz = vec3(_FirstShadowMultColor.xxyz.y + (-_CoolShadowMultColor.x), _FirstShadowMultColor.xxyz.z + (-_CoolShadowMultColor.y), float(_FirstShadowMultColor.z) + (-_CoolShadowMultColor.z));
        u_xlat6.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_6.xyz + _CoolShadowMultColor.xyz;
        u_xlat16_18.xyz = (bool(u_xlatb36)) ? u_xlat6.xyz : vec3(_FirstShadowMultColor.x, _FirstShadowMultColor.y, _FirstShadowMultColor.z);
    } else {
        if(u_xlatb5.x){
#ifdef UNITY_ADRENO_ES3
            u_xlatb36 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex));
#else
            u_xlatb36 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex);
#endif
            u_xlat16_6.xyz = _FirstShadowMultColor2.xyz + (-_CoolShadowMultColor2.xyz);
            u_xlat6.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_6.xyz + _CoolShadowMultColor2.xyz;
            u_xlat16_18.xyz = (bool(u_xlatb36)) ? u_xlat6.xyz : _FirstShadowMultColor2.xyz;
        } else {
#ifdef UNITY_ADRENO_ES3
            u_xlatb36 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex));
#else
            u_xlatb36 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex);
#endif
            u_xlat16_6.xyz = _FirstShadowMultColor3.xyz + (-_CoolShadowMultColor3.xyz);
            u_xlat6.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_6.xyz + _CoolShadowMultColor3.xyz;
            u_xlat16_8.xyz = (bool(u_xlatb36)) ? u_xlat6.xyz : _FirstShadowMultColor3.xyz;
            u_xlat16_6.xyz = _FirstShadowMultColor4.xyz + (-_CoolShadowMultColor4.xyz);
            u_xlat6.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_6.xyz + _CoolShadowMultColor4.xyz;
            u_xlat16_9.xyz = (bool(u_xlatb36)) ? u_xlat6.xyz : _FirstShadowMultColor4.xyz;
            u_xlat16_6.xyz = _FirstShadowMultColor5.xyz + (-_CoolShadowMultColor5.xyz);
            u_xlat6.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_6.xyz + _CoolShadowMultColor5.xyz;
            u_xlat16_10.xyz = (bool(u_xlatb36)) ? u_xlat6.xyz : _FirstShadowMultColor5.xyz;
            u_xlat16_9.xyz = (u_xlatb5.z) ? u_xlat16_9.xyz : u_xlat16_10.xyz;
            u_xlat16_18.xyz = (u_xlatb5.y) ? u_xlat16_8.xyz : u_xlat16_9.xyz;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb36 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition));
#else
    u_xlatb36 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition);
#endif
    u_xlati38 = ~u_xlati14;
    u_xlati36 = u_xlatb36 ? u_xlati38 : int(0);
    u_xlat16_6.xyz = u_xlat16_18.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat6.xyz = u_xlat13.xxx * u_xlat16_6.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_18.xyz = (int(u_xlati36) != 0) ? u_xlat6.xyz : u_xlat16_18.xyz;
    u_xlat16_8.x = (-u_xlat35) * u_xlat24.x + 1.0;
    u_xlat16_19.xyz = u_xlat16_18.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat16_8.xyz = u_xlat16_8.xxx * u_xlat16_19.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_18.xyz = (int(u_xlati14) != 0) ? u_xlat16_18.xyz : u_xlat16_8.xyz;
    u_xlat16_8.x = (u_xlatb5.z) ? _Shininess4 : _Shininess5;
    u_xlat16_19.x = (u_xlatb5.z) ? _SpecMulti4 : _SpecMulti5;
    u_xlat16_8.x = (u_xlatb5.y) ? _Shininess3 : u_xlat16_8.x;
    u_xlat16_19.x = (u_xlatb5.y) ? _SpecMulti3 : u_xlat16_19.x;
    u_xlat16_8.x = (u_xlatb5.x) ? _Shininess2 : u_xlat16_8.x;
    u_xlat16_19.x = (u_xlatb5.x) ? _SpecMulti2 : u_xlat16_19.x;
    u_xlat16_8.x = (u_xlatb33) ? _Shininess : u_xlat16_8.x;
    u_xlat16_19.x = (u_xlatb33) ? _SpecMulti : u_xlat16_19.x;
    u_xlat16_30 = dot(vs_TEXCOORD1.xyz, u_xlat0.xyz);
    u_xlat16_30 = max(u_xlat16_30, 0.00100000005);
    u_xlat16_30 = log2(u_xlat16_30);
    u_xlat16_8.x = u_xlat16_30 * u_xlat16_8.x;
    u_xlat16_8.x = exp2(u_xlat16_8.x);
    u_xlat0.x = (-u_xlat10_3.z) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat0.x<u_xlat16_8.x);
#else
    u_xlatb0 = u_xlat0.x<u_xlat16_8.x;
#endif
    u_xlat16_8.xyz = u_xlat16_19.xxx * _SpecularColor.xyz;
    u_xlat16_8.xyz = u_xlat10_3.xxx * u_xlat16_8.xyz;
    u_xlat16_8.xyz = (bool(u_xlatb0)) ? u_xlat16_8.xyz : vec3(0.0, 0.0, 0.0);
    u_xlat16_4.xyz = vec3(u_xlat16_4.x * _EmissionColor_MHY.xxyz.y, u_xlat16_4.y * _EmissionColor_MHY.xxyz.z, u_xlat16_4.z * float(_EmissionColor_MHY.z));
    u_xlat0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(u_xlat16_37==1.0);
#else
    u_xlatb33 = u_xlat16_37==1.0;
#endif
    u_xlati33 = int(uint(u_xlatb33) * 0xffffffffu | uint(u_xlati14));
    u_xlat13.xyz = u_xlat0.xyz * u_xlat16_18.xyz;
    u_xlat0.xyz = (int(u_xlati33) != 0) ? u_xlat13.xyz : u_xlat0.xyz;
    u_xlat0.xyz = u_xlat16_8.xyz + u_xlat0.xyz;
    u_xlat13.xy = vs_TEXCOORD0.zw * _FlowMap01_ST.xy + _FlowMap01_ST.zw;
    u_xlat16_8.x = _Time.y * _FlowMap01_Uspeed + u_xlat13.x;
    u_xlat16_8.y = _Time.y * _FlowMap01_Vspeed + u_xlat13.y;
    u_xlat13.xy = vs_TEXCOORD0.zw * _Noise_ST.xy + _Noise_ST.zw;
    u_xlat16_9.x = _Time.y * _Noise_Uspeed + u_xlat13.x;
    u_xlat16_9.y = _Time.y * _Noise_Vspeed + u_xlat13.y;
    u_xlat10_33 = texture(_Noise, u_xlat16_9.xy).x;
    u_xlat16_37 = _MaskOffset01 * 1.39999998 + -0.699999988;
    u_xlat16_18.x = u_xlat10_33 * _NoiseIntensity;
    u_xlat13.xy = vs_TEXCOORD0.zw * _FlowMap02_ST.xy + _FlowMap02_ST.zw;
    u_xlat16_9.x = _Time.y * _FlowMap02_Uspeed + u_xlat13.x;
    u_xlat16_9.y = _Time.y * _FlowMap02_Vspeed + u_xlat13.y;
    u_xlat16_40 = _MaskOffset02 * 1.39999998 + -0.699999988;
    u_xlat16_10.xyz = _FlowMapColor01.xyz * vec3(_FlowScale01);
    u_xlat16_8.xy = vec2(u_xlat10_33) * vec2(vec2(_NoiseFlowIntensity, _NoiseFlowIntensity)) + u_xlat16_8.xy;
    u_xlat10_13 = texture(_FlowMap01, u_xlat16_8.xy).x;
    u_xlat16_13.xyz = vec3(u_xlat10_13) * u_xlat16_10.xyz;
    u_xlat16_8.x = (-vs_TEXCOORD0.z) + 1.0;
    u_xlat16_1.x = u_xlat16_37 + u_xlat16_8.x;
    u_xlat16_1.yw = vec2(u_xlat10_33) * vec2(vec2(_NoiseIntensity, _NoiseIntensity)) + (-vs_TEXCOORD0.ww);
    u_xlat16_18.y = 1.0;
    u_xlat16_19.xy = u_xlat16_1.xy + u_xlat16_18.xy;
    u_xlat10_3.x = texture(_Mask01, u_xlat16_19.xy).x;
    u_xlat16_3 = max(u_xlat10_3.x, 9.99999975e-05);
    u_xlat16_3 = log2(u_xlat16_3);
    u_xlat16_3 = u_xlat16_3 * _Mask01_Power;
    u_xlat16_3 = exp2(u_xlat16_3);
    u_xlat16_19.xyz = _FlowMapColor02.xyz * vec3(_FlowScale02);
    u_xlat16_9.xy = vec2(u_xlat10_33) * vec2(vec2(_NoiseFlowIntensity, _NoiseFlowIntensity)) + u_xlat16_9.xy;
    u_xlat10_33 = texture(_FlowMap02, u_xlat16_9.xy).x;
    u_xlat16_14.xyz = vec3(u_xlat10_33) * u_xlat16_19.xyz;
    u_xlat16_1.z = u_xlat16_40 + u_xlat16_8.x;
    u_xlat16_18.xy = vec2(u_xlat16_1.z + u_xlat16_18.x, u_xlat16_1.w + u_xlat16_18.y);
    u_xlat10_33 = texture(_Mask02, u_xlat16_18.xy).x;
    u_xlat16_33 = max(u_xlat10_33, 9.99999975e-05);
    u_xlat16_33 = log2(u_xlat16_33);
    u_xlat16_33 = u_xlat16_33 * _Mask02_Power;
    u_xlat16_33 = exp2(u_xlat16_33);
    u_xlat16_14.xyz = vec3(u_xlat16_33) * u_xlat16_14.xyz;
    u_xlat16_13.xyz = u_xlat16_13.xyz * vec3(u_xlat16_3) + u_xlat16_14.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(_EmissionScaler) + u_xlat16_13.xyz;
    u_xlat3.xyz = (-u_xlat0.xyz) + u_xlat16_4.xyz;
    u_xlat3.xyz = u_xlat16_7.xxx * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat5.xy = vs_TEXCOORD0.zw * _DissovleNoise_ST.xy + _DissovleNoise_ST.zw;
    u_xlat16_4.x = _Time.y * _DissolveNoise_Uspeed + u_xlat5.x;
    u_xlat16_4.y = _Time.y * _DissolveNoise_Vspeed + u_xlat5.y;
    u_xlat10_33 = texture(_DissovleNoise, u_xlat16_4.xy).x;
    u_xlat33 = u_xlat10_33 * _DissovleNoiseScale + vs_TEXCOORD0.z;
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(_Dissovle>=u_xlat33);
#else
    u_xlatb33 = _Dissovle>=u_xlat33;
#endif
    u_xlat0.xyz = (u_xlatb2.x) ? u_xlat3.xyz : u_xlat0.xyz;
    u_xlat0.xyz = u_xlat16_13.xyz + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(0.00999999978<u_xlat16_7.x);
#else
    u_xlatb2.x = 0.00999999978<u_xlat16_7.x;
#endif
    if((int(u_xlatb33) * int(0xffffffffu))==0){discard;}
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn));
#else
    u_xlatb33 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn);
#endif
    u_xlat13.xyz = u_xlat0.xyz * vec3(vec3(_ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness));
    u_xlat3.xyz = vec3(vec3(_ES_CharacterPointLightWholeIntensity, _ES_CharacterPointLightWholeIntensity, _ES_CharacterPointLightWholeIntensity)) * mhy_CharacterPointLightColor.xyz;
    u_xlat5.xyz = _ES_CharacterMainLightColor.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.xyz = min(max(u_xlat5.xyz, 0.0), 1.0);
#else
    u_xlat5.xyz = clamp(u_xlat5.xyz, 0.0, 1.0);
#endif
    u_xlat36 = (-mhy_CharacterPointLightColor.w) + 1.0;
    u_xlat3.xyz = u_xlat5.xyz * vec3(u_xlat36) + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat3.xyz = vec3(vec3(_ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio)) * u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat13.xyz = u_xlat13.xyz * u_xlat3.xyz;
    u_xlat3.xyz = _ES_CharacterAmbientLightColor.xyz * vec3(_ES_CharacterAmbientLightRatio);
    u_xlat16_4.xyz = u_xlat13.xyz * vec3(10.0, 10.0, 10.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.xyz = min(max(u_xlat16_4.xyz, 0.0), 1.0);
#else
    u_xlat16_4.xyz = clamp(u_xlat16_4.xyz, 0.0, 1.0);
#endif
    u_xlat13.xyz = u_xlat3.xyz * u_xlat16_4.xyz + u_xlat13.xyz;
    u_xlat16_4.xyz = (bool(u_xlatb33)) ? u_xlat13.xyz : u_xlat0.xyz;
    u_xlat16_18.xyz = u_xlat0.xyz + (-u_xlat16_4.xyz);
    u_xlat16_18.xyz = u_xlat16_7.xxx * u_xlat16_18.xyz + u_xlat16_4.xyz;
    u_xlat16_0.xyz = (u_xlatb2.x) ? u_xlat16_18.xyz : u_xlat16_4.xyz;
    u_xlat16_4.x = max(u_xlat16_0.z, u_xlat16_0.y);
    u_xlat16_1.w = max(u_xlat16_0.x, u_xlat16_4.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(1.0<u_xlat16_1.w);
#else
    u_xlatb2.x = 1.0<u_xlat16_1.w;
#endif
    u_xlat16_1.xyz = u_xlat16_0.xyz / u_xlat16_1.www;
    u_xlat16_0.w = 1.0;
    u_xlat16_0 = (u_xlatb2.x) ? u_xlat16_1 : u_xlat16_0;
    u_xlat16_4.x = min(u_xlat16_0.w, 1.10000002);
    u_xlat16_15 = u_xlat16_0.w + (-u_xlat16_4.x);
    u_xlat16_4.x = u_xlat16_7.x * u_xlat16_15 + u_xlat16_4.x;
    u_xlat16_2 = u_xlat16_4.x * 0.0500000007;
    SV_Target0.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb13 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb13 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_4.x = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb13) ? u_xlat16_4.x : 0.0;
    SV_Target0.w = 0.0156862754;
    SV_Target1.xyz = u_xlat16_0.xyz;
    SV_Target1.w = u_xlat16_2;
    SV_Target2.xy = vec2(0.0, 0.0);
    SV_Target2.w = vs_TEXCOORD4;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "FACE_MAP_NEW_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _MainTex_ST;
uniform 	float _FaceMapRotateOffset;
uniform 	float _CharacterAmbientSensorShadowOn;
uniform 	vec4 _AmbientSensorUVs;
uniform 	float _UseClipPlane;
uniform 	float _ClipPlaneWorld;
uniform 	vec4 _ClipPlane;
uniform 	vec4 mhy_AvatarLightDir;
uniform 	vec4 mhy_CharacterOverrideLightDir;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
struct unity_Builtins1Array_Type {
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw1 {
	unity_Builtins1Array_Type unity_Builtins1Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform lowp sampler2D _CharacterAmbientSensorTex;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp float vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD6;
flat out highp uint vs_SV_InstanceID0;
float u_xlat0;
int u_xlati0;
vec3 u_xlat1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
vec4 u_xlat4;
mediump float u_xlat16_5;
vec3 u_xlat6;
bool u_xlatb6;
float u_xlat7;
mediump vec2 u_xlat16_11;
float u_xlat12;
bool u_xlatb12;
float u_xlat13;
bool u_xlatb13;
mediump float u_xlat16_17;
float u_xlat19;
bool u_xlatb19;
float u_xlat20;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.5<mhy_CharacterOverrideLightDir.w);
#else
    u_xlatb6 = 0.5<mhy_CharacterOverrideLightDir.w;
#endif
    u_xlat1.x = mhy_CharacterOverrideLightDir.x;
    u_xlat1.yz = (-mhy_CharacterOverrideLightDir.yz);
    u_xlat6.xyz = (bool(u_xlatb6)) ? u_xlat1.xyz : mhy_AvatarLightDir.xyz;
    u_xlati0 = u_xlati0 << 2;
    u_xlat1.x = dot(u_xlat6.xyz, unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz);
    u_xlat7 = dot(u_xlat6.xyz, unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb13 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseClipPlane));
#else
    u_xlatb13 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseClipPlane);
#endif
    if(u_xlatb13){
#ifdef UNITY_ADRENO_ES3
        u_xlatb13 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ClipPlaneWorld));
#else
        u_xlatb13 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ClipPlaneWorld);
#endif
        if(u_xlatb13){
#ifdef UNITY_ADRENO_ES3
            u_xlatb13 = !!(abs(_ClipPlane.w)<0.00100000005);
#else
            u_xlatb13 = abs(_ClipPlane.w)<0.00100000005;
#endif
            u_xlat2.xyz = _ClipPlane.www * _ClipPlane.xyz;
            u_xlat2.xyz = (bool(u_xlatb13)) ? vec3(0.0, 0.0, 0.0) : u_xlat2.xyz;
            u_xlat3 = u_xlat2.yyyy * unity_Builtins1Array[u_xlati0 / 4].hlslcc_mtx4x4unity_WorldToObjectArray[1];
            u_xlat3 = unity_Builtins1Array[u_xlati0 / 4].hlslcc_mtx4x4unity_WorldToObjectArray[0] * u_xlat2.xxxx + u_xlat3;
            u_xlat2 = unity_Builtins1Array[u_xlati0 / 4].hlslcc_mtx4x4unity_WorldToObjectArray[2] * u_xlat2.zzzz + u_xlat3;
            u_xlat2 = u_xlat2 + unity_Builtins1Array[u_xlati0 / 4].hlslcc_mtx4x4unity_WorldToObjectArray[3];
            u_xlat2.xyz = u_xlat2.xyz / u_xlat2.www;
            u_xlat3.xyz = _ClipPlane.yyy * unity_Builtins1Array[u_xlati0 / 4].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz;
            u_xlat3.xyz = unity_Builtins1Array[u_xlati0 / 4].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz * _ClipPlane.xxx + u_xlat3.xyz;
            u_xlat3.xyz = unity_Builtins1Array[u_xlati0 / 4].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz * _ClipPlane.zzz + u_xlat3.xyz;
            u_xlat13 = dot(u_xlat2.xyz, u_xlat3.xyz);
            u_xlat19 = dot(in_POSITION0.xyz, u_xlat3.xyz);
#ifdef UNITY_ADRENO_ES3
            u_xlatb2 = !!(u_xlat19<u_xlat13);
#else
            u_xlatb2 = u_xlat19<u_xlat13;
#endif
            u_xlat13 = (-u_xlat13) + u_xlat19;
            u_xlat3.xyz = (-vec3(u_xlat13)) * u_xlat3.xyz + in_POSITION0.xyz;
            u_xlat3.w = 0.0;
            u_xlat4.xyz = in_POSITION0.xyz;
            u_xlat4.w = in_COLOR0.w;
            u_xlat2 = (bool(u_xlatb2)) ? u_xlat3 : u_xlat4;
            u_xlat16_5 = u_xlat2.w;
        } else {
            u_xlat13 = dot(in_POSITION0.xyz, _ClipPlane.xyz);
            u_xlat19 = _ClipPlane.w + -0.00999999978;
#ifdef UNITY_ADRENO_ES3
            u_xlatb19 = !!(u_xlat13<u_xlat19);
#else
            u_xlatb19 = u_xlat13<u_xlat19;
#endif
            u_xlat13 = u_xlat13 + (-_ClipPlane.w);
            u_xlat3.xyz = (-vec3(u_xlat13)) * _ClipPlane.xyz + in_POSITION0.xyz;
            u_xlat3.w = 0.0;
            u_xlat4.xyz = in_POSITION0.xyz;
            u_xlat4.w = in_COLOR0.w;
            u_xlat2 = (bool(u_xlatb19)) ? u_xlat3 : u_xlat4;
            u_xlat16_5 = u_xlat2.w;
        //ENDIF
        }
    } else {
        u_xlat2.xyz = in_POSITION0.xyz;
        u_xlat16_5 = in_COLOR0.w;
    //ENDIF
    }
    u_xlat3.xyw = (-_WorldSpaceCameraPos.xyz) + unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat4.x = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].x;
    u_xlat4.y = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].x;
    u_xlat4.z = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].x;
    u_xlat4.w = u_xlat3.x;
    u_xlat2.w = 1.0;
    u_xlat13 = dot(u_xlat4, u_xlat2);
    u_xlat4.x = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].y;
    u_xlat4.y = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].y;
    u_xlat4.z = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].y;
    u_xlat4.w = u_xlat3.y;
    u_xlat19 = dot(u_xlat4, u_xlat2);
    u_xlat3.x = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].z;
    u_xlat3.y = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].z;
    u_xlat3.z = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].z;
    u_xlat3.x = dot(u_xlat3, u_xlat2);
    u_xlat4.x = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].w;
    u_xlat4.y = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].w;
    u_xlat4.z = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].w;
    u_xlat4.w = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3].w;
    u_xlat20 = dot(u_xlat4, u_xlat2);
    u_xlat4 = vec4(u_xlat19) * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat4 = hlslcc_mtx4x4unity_MatrixVPZero[0] * vec4(u_xlat13) + u_xlat4;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat3.xxxx + u_xlat4;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVPZero[3] * vec4(u_xlat20) + u_xlat3;
    u_xlat4 = u_xlat2.yyyy * unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat4 = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * u_xlat2.xxxx + u_xlat4;
    u_xlat2 = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * u_xlat2.zzzz + u_xlat4;
    u_xlat2 = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3] * in_POSITION0.wwww + u_xlat2;
    vs_TEXCOORD3.xyz = u_xlat2.xyz / u_xlat2.www;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat2.xz = u_xlat3.xw * vec2(0.5, 0.5);
    u_xlat13 = u_xlat3.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat13 * 0.5;
    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat2.xyz = in_NORMAL0.yyy * unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat2.xyz = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_NORMAL0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_NORMAL0.zzz + u_xlat2.xyz;
    u_xlat0 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0 = inversesqrt(u_xlat0);
    u_xlat2.xyz = vec3(u_xlat0) * u_xlat2.xyz;
    u_xlat16_11.x = dot(u_xlat2.xyz, u_xlat6.xyz);
    vs_TEXCOORD1.w = u_xlat16_11.x * 0.497500002 + 0.5;
    u_xlat16_11.x = min(abs(u_xlat1.x), abs(u_xlat7));
    u_xlat16_17 = max(abs(u_xlat1.x), abs(u_xlat7));
    u_xlat16_17 = float(1.0) / u_xlat16_17;
    u_xlat16_11.x = u_xlat16_17 * u_xlat16_11.x;
    u_xlat16_17 = u_xlat16_11.x * u_xlat16_11.x;
    u_xlat0 = u_xlat16_17 * 0.0208350997 + -0.0851330012;
    u_xlat0 = u_xlat16_17 * u_xlat0 + 0.180141002;
    u_xlat0 = u_xlat16_17 * u_xlat0 + -0.330299497;
    u_xlat0 = u_xlat16_17 * u_xlat0 + 0.999866009;
    u_xlat6.x = u_xlat0 * u_xlat16_11.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(abs(u_xlat1.x)<abs(u_xlat7));
#else
    u_xlatb12 = abs(u_xlat1.x)<abs(u_xlat7);
#endif
    u_xlat6.x = u_xlat6.x * -2.0 + 1.57079637;
    u_xlat6.x = u_xlatb12 ? u_xlat6.x : float(0.0);
    u_xlat0 = u_xlat16_11.x * u_xlat0 + u_xlat6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(u_xlat1.x<(-u_xlat1.x));
#else
    u_xlatb6 = u_xlat1.x<(-u_xlat1.x);
#endif
    u_xlat6.x = u_xlatb6 ? -3.14159274 : float(0.0);
    u_xlat0 = u_xlat6.x + u_xlat0;
    u_xlat16_11.x = min(u_xlat1.x, u_xlat7);
    u_xlat16_17 = max(u_xlat1.x, u_xlat7);
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(u_xlat16_11.x<(-u_xlat16_11.x));
#else
    u_xlatb6 = u_xlat16_11.x<(-u_xlat16_11.x);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat16_17>=(-u_xlat16_17));
#else
    u_xlatb12 = u_xlat16_17>=(-u_xlat16_17);
#endif
    u_xlatb6 = u_xlatb12 && u_xlatb6;
    u_xlat0 = (u_xlatb6) ? (-u_xlat0) : u_xlat0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.0<(-u_xlat0));
#else
    u_xlatb6 = 0.0<(-u_xlat0);
#endif
    u_xlat16_11.x = u_xlat0 * -0.318309903;
    u_xlat0 = max(_FaceMapRotateOffset, 0.0);
    u_xlat12 = _FaceMapRotateOffset + 1.0;
    u_xlat12 = min(u_xlat12, 1.0);
    u_xlat12 = (-u_xlat0) + u_xlat12;
    u_xlat0 = (-u_xlat0) + abs(u_xlat16_11.x);
    u_xlat12 = float(1.0) / u_xlat12;
    u_xlat0 = u_xlat12 * u_xlat0;
#ifdef UNITY_ADRENO_ES3
    u_xlat0 = min(max(u_xlat0, 0.0), 1.0);
#else
    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
#endif
    u_xlat12 = u_xlat0 * -2.0 + 3.0;
    u_xlat0 = u_xlat0 * u_xlat0;
    u_xlat0 = u_xlat0 * u_xlat12;
    u_xlat0 = max(u_xlat0, 9.99999975e-05);
    u_xlat0 = min(u_xlat0, 0.999899983);
    u_xlat16_11.xy = in_TEXCOORD0.xy * vec2(-1.0, 1.0) + vec2(1.0, 0.0);
    vs_TEXCOORD6.xy = (bool(u_xlatb6)) ? u_xlat16_11.xy : in_TEXCOORD0.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_CharacterAmbientSensorShadowOn));
#else
    u_xlatb6 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_CharacterAmbientSensorShadowOn);
#endif
    if(u_xlatb6){
        u_xlat6.x = textureLod(_CharacterAmbientSensorTex, _AmbientSensorUVs.xy, 0.0).x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb6 = !!(0.5<u_xlat6.x);
#else
        u_xlatb6 = 0.5<u_xlat6.x;
#endif
        vs_TEXCOORD4 = u_xlatb6 ? 1.0 : float(0.0);
    } else {
        vs_TEXCOORD4 = 0.0;
    //ENDIF
    }
    gl_Position = u_xlat3;
    vs_COLOR0.xyz = in_COLOR0.xyz;
    vs_COLOR0.w = u_xlat16_5;
    vs_TEXCOORD1.xyz = u_xlat2.xyz;
    vs_TEXCOORD2.zw = u_xlat3.zw;
    vs_TEXCOORD6.z = u_xlat0;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	mediump vec4 _Color;
uniform 	float _MainTexAlphaUse;
uniform 	mediump float _MainTexAlphaCutoff;
uniform 	float _UseVertexColorAO;
uniform 	mediump float _LightArea;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	float _UseCoolShadowColorOrTex;
uniform 	mediump vec3 _CoolShadowMultColor;
uniform 	float _UseShadowTransition;
uniform 	float _ShadowTransitionRange;
uniform 	float _ShadowTransitionSoftness;
uniform 	mediump vec3 _SpecularColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	float _FaceBlushStrength;
uniform 	mediump vec3 _FaceBlushColor;
uniform 	mediump float _EmissionScaler;
uniform 	mediump vec3 _EmissionColor_MHY;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _TextureBiasWhenDithering;
uniform 	float _UseClipPlane;
uniform 	float _ES_CharacterAmbientLightOn;
uniform 	float _ES_CharacterAmbientBrightness;
uniform 	vec3 _ES_CharacterMainLightColor;
uniform 	vec3 _ES_CharacterAmbientLightColor;
uniform 	float _ES_CharacterMainLightRatio;
uniform 	float _ES_CharacterAmbientLightRatio;
uniform 	float _ES_CharacterColorTone;
uniform 	float _ES_CharacterPointLightWholeIntensity;
uniform 	vec4 mhy_AvatarLightDir;
uniform 	vec4 mhy_CharacterPointLightColor;
uniform 	vec4 mhy_CharacterOverrideLightDir;
uniform 	mediump vec4 _FlowMapColor01;
uniform 	mediump float _FlowScale01;
uniform 	mediump float _FlowMap01_Uspeed;
uniform 	vec4 _FlowMap01_ST;
uniform 	mediump float _FlowMap01_Vspeed;
uniform 	mediump float _Noise_Uspeed;
uniform 	vec4 _Noise_ST;
uniform 	mediump float _Noise_Vspeed;
uniform 	mediump float _NoiseFlowIntensity;
uniform 	mediump float _MaskOffset01;
uniform 	mediump float _NoiseIntensity;
uniform 	mediump float _Mask01_Power;
uniform 	mediump vec4 _FlowMapColor02;
uniform 	mediump float _FlowScale02;
uniform 	mediump float _FlowMap02_Uspeed;
uniform 	vec4 _FlowMap02_ST;
uniform 	mediump float _FlowMap02_Vspeed;
uniform 	mediump float _MaskOffset02;
uniform 	mediump float _Mask02_Power;
uniform 	mediump float _DissolveNoise_Uspeed;
uniform 	vec4 _DissovleNoise_ST;
uniform 	mediump float _DissolveNoise_Vspeed;
uniform 	mediump float _DissovleNoiseScale;
uniform 	mediump float _Dissovle;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _Noise;
uniform lowp sampler2D _FlowMap01;
uniform lowp sampler2D _Mask01;
uniform lowp sampler2D _FlowMap02;
uniform lowp sampler2D _Mask02;
uniform lowp sampler2D _DissovleNoise;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp float vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
lowp float u_xlat10_2;
int u_xlati2;
bvec3 u_xlatb2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
lowp float u_xlat10_3;
int u_xlati3;
bool u_xlatb3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec2 u_xlat16_7;
mediump vec3 u_xlat16_8;
vec3 u_xlat9;
bool u_xlatb10;
vec3 u_xlat12;
mediump vec3 u_xlat16_12;
lowp float u_xlat10_12;
int u_xlati12;
bool u_xlatb12;
vec3 u_xlat13;
mediump vec3 u_xlat16_13;
mediump float u_xlat16_14;
mediump vec2 u_xlat16_15;
mediump vec2 u_xlat16_16;
bvec2 u_xlatb20;
float u_xlat22;
bool u_xlatb22;
mediump vec2 u_xlat16_25;
float u_xlat30;
bool u_xlatb30;
float u_xlat32;
mediump float u_xlat16_32;
lowp float u_xlat10_32;
int u_xlati32;
bool u_xlatb32;
float u_xlat33;
mediump float u_xlat16_34;
mediump float u_xlat16_35;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseClipPlane));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseClipPlane);
#endif
    u_xlat16_1.x = vs_COLOR0.w + -0.00999999978;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(u_xlat16_1.x<0.0);
#else
    u_xlatb10 = u_xlat16_1.x<0.0;
#endif
    u_xlatb0 = u_xlatb0 && u_xlatb10;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(_DitherAlpha<0.949999988);
#else
        u_xlatb0 = _DitherAlpha<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb20.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb20.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb20.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = _DitherAlpha * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + -0.00999999978;
#ifdef UNITY_ADRENO_ES3
            u_xlatb0 = !!(u_xlat0.x<0.0);
#else
            u_xlatb0 = u_xlat0.x<0.0;
#endif
            if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(0.5<mhy_CharacterOverrideLightDir.w);
#else
    u_xlatb2.x = 0.5<mhy_CharacterOverrideLightDir.w;
#endif
    u_xlat3.x = mhy_CharacterOverrideLightDir.x;
    u_xlat3.yz = (-mhy_CharacterOverrideLightDir.yz);
    u_xlat2.xyz = (u_xlatb2.x) ? u_xlat3.xyz : mhy_AvatarLightDir.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat30) + u_xlat2.xyz;
    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
    u_xlat30 = _TextureBiasWhenDithering + -1.0;
    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy, u_xlat30);
    u_xlatb2.xyz = equal(vec4(_MainTexAlphaUse), vec4(3.0, 1.0, 2.0, 0.0)).xyz;
    u_xlat30 = u_xlat1.w * _FaceBlushStrength;
    u_xlat3.xyz = (-u_xlat1.xyz) + _FaceBlushColor.xyz;
    u_xlat3.xyz = vec3(u_xlat30) * u_xlat3.xyz + u_xlat1.xyz;
    u_xlat16_4.xyz = (u_xlatb2.x) ? u_xlat3.xyz : u_xlat1.xyz;
    u_xlat16_34 = u_xlat1.w + (-_MainTexAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(u_xlat16_34<0.0);
#else
    u_xlatb30 = u_xlat16_34<0.0;
#endif
    u_xlatb30 = u_xlatb2.y && u_xlatb30;
    if((int(u_xlatb30) * int(0xffffffffu))!=0){discard;}
    u_xlat16_4.xyz = u_xlat16_4.xyz * _Color.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(0.00999999978<u_xlat1.w);
#else
    u_xlatb30 = 0.00999999978<u_xlat1.w;
#endif
    u_xlatb30 = u_xlatb30 && u_xlatb2.z;
    u_xlat16_34 = (u_xlatb30) ? u_xlat1.w : 0.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorAO));
#else
    u_xlatb2.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorAO);
#endif
    u_xlat16_5.x = vs_COLOR0.x * 0.5;
    u_xlat16_5.x = (u_xlatb2.x) ? u_xlat16_5.x : 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat16_5.x<0.0500000007);
#else
    u_xlatb12 = u_xlat16_5.x<0.0500000007;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(0.949999988<u_xlat16_5.x);
#else
    u_xlatb22 = 0.949999988<u_xlat16_5.x;
#endif
    u_xlat32 = u_xlat16_5.x + vs_TEXCOORD1.w;
    u_xlat32 = u_xlat32 * 0.5;
    u_xlat16_5.x = (u_xlatb22) ? 1.0 : u_xlat32;
    u_xlat16_5.x = (u_xlatb12) ? 0.0 : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb2.x) ? u_xlat16_5.x : vs_TEXCOORD1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(u_xlat16_5.x<_LightArea);
#else
    u_xlatb2.x = u_xlat16_5.x<_LightArea;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition));
#else
    u_xlatb12 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition);
#endif
    u_xlat16_5.x = (-u_xlat16_5.x) + _LightArea;
    u_xlat16_5.x = u_xlat16_5.x / _ShadowTransitionRange;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(u_xlat16_5.x>=1.0);
#else
    u_xlatb22 = u_xlat16_5.x>=1.0;
#endif
    u_xlat16_32 = u_xlat16_5.x + 0.00999999978;
    u_xlat16_32 = log2(u_xlat16_32);
    u_xlat32 = u_xlat16_32 * _ShadowTransitionSoftness;
    u_xlat32 = exp2(u_xlat32);
    u_xlat32 = min(u_xlat32, 1.0);
    u_xlat22 = (u_xlatb22) ? 1.0 : u_xlat32;
    u_xlat22 = (u_xlatb12) ? u_xlat22 : 1.0;
    u_xlat22 = u_xlatb2.x ? u_xlat22 : float(0.0);
#ifdef UNITY_ADRENO_ES3
    { bool cond = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(vs_TEXCOORD4); u_xlati32 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati32 = int((vec4(0.0, 0.0, 0.0, 0.0)!=vec4(vs_TEXCOORD4)) ? 0xFFFFFFFFu : uint(0u));
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex));
#else
    u_xlatb3 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex);
#endif
    u_xlat16_13.xyz = vec3(_FirstShadowMultColor.xxyz.y + (-_CoolShadowMultColor.x), _FirstShadowMultColor.xxyz.z + (-_CoolShadowMultColor.y), float(_FirstShadowMultColor.z) + (-_CoolShadowMultColor.z));
    u_xlat13.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_13.xyz + _CoolShadowMultColor.xyz;
    u_xlat16_5.xyz = (bool(u_xlatb3)) ? u_xlat13.xyz : vec3(_FirstShadowMultColor.x, _FirstShadowMultColor.y, _FirstShadowMultColor.z);
    u_xlati3 = ~u_xlati32;
    u_xlati12 = u_xlatb12 ? u_xlati3 : int(0);
    u_xlat16_3.xyz = u_xlat16_5.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat3.xyz = vec3(u_xlat22) * u_xlat16_3.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_5.xyz = (int(u_xlati12) != 0) ? u_xlat3.xyz : u_xlat16_5.xyz;
    u_xlat16_5.xyz = (int(u_xlati32) != 0) ? u_xlat16_5.xyz : vec3(1.0, 1.0, 1.0);
    u_xlat16_35 = dot(vs_TEXCOORD1.xyz, u_xlat0.xyz);
    u_xlat16_35 = max(u_xlat16_35, 0.00100000005);
    u_xlat16_35 = log2(u_xlat16_35);
    u_xlat16_35 = u_xlat16_35 * _Shininess;
    u_xlat16_35 = exp2(u_xlat16_35);
    u_xlat16_6.xyz = vec3(u_xlat16_35) * _SpecularColor.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(_SpecMulti);
    u_xlat16_4.xyz = vec3(u_xlat16_4.x * _EmissionColor_MHY.xxyz.y, u_xlat16_4.y * _EmissionColor_MHY.xxyz.z, u_xlat16_4.z * float(_EmissionColor_MHY.z));
    u_xlat0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlati2 = int(uint(u_xlatb2.x) * 0xffffffffu | uint(u_xlati32));
    u_xlat12.xyz = u_xlat0.xyz * u_xlat16_5.xyz;
    u_xlat0.xyz = (int(u_xlati2) != 0) ? u_xlat12.xyz : u_xlat0.xyz;
    u_xlat0.xyz = u_xlat16_6.xyz * vec3(0.5, 0.5, 0.5) + u_xlat0.xyz;
    u_xlat2.xy = vs_TEXCOORD0.zw * _FlowMap01_ST.xy + _FlowMap01_ST.zw;
    u_xlat16_5.x = _Time.y * _FlowMap01_Uspeed + u_xlat2.x;
    u_xlat16_5.y = _Time.y * _FlowMap01_Vspeed + u_xlat2.y;
    u_xlat2.xy = vs_TEXCOORD0.zw * _Noise_ST.xy + _Noise_ST.zw;
    u_xlat16_6.x = _Time.y * _Noise_Uspeed + u_xlat2.x;
    u_xlat16_6.y = _Time.y * _Noise_Vspeed + u_xlat2.y;
    u_xlat10_2 = texture(_Noise, u_xlat16_6.xy).x;
    u_xlat16_25.x = _MaskOffset01 * 1.39999998 + -0.699999988;
    u_xlat16_16.x = u_xlat10_2 * _NoiseIntensity;
    u_xlat12.xy = vs_TEXCOORD0.zw * _FlowMap02_ST.xy + _FlowMap02_ST.zw;
    u_xlat16_7.x = _Time.y * _FlowMap02_Uspeed + u_xlat12.x;
    u_xlat16_7.y = _Time.y * _FlowMap02_Vspeed + u_xlat12.y;
    u_xlat16_25.y = _MaskOffset02 * 1.39999998 + -0.699999988;
    u_xlat16_8.xyz = _FlowMapColor01.xyz * vec3(_FlowScale01);
    u_xlat16_5.xy = vec2(u_xlat10_2) * vec2(vec2(_NoiseFlowIntensity, _NoiseFlowIntensity)) + u_xlat16_5.xy;
    u_xlat10_12 = texture(_FlowMap01, u_xlat16_5.xy).x;
    u_xlat16_12.xyz = vec3(u_xlat10_12) * u_xlat16_8.xyz;
    u_xlat16_5.x = (-vs_TEXCOORD0.z) + 1.0;
    u_xlat16_1.xz = u_xlat16_25.xy + u_xlat16_5.xx;
    u_xlat16_1.yw = vec2(u_xlat10_2) * vec2(vec2(_NoiseIntensity, _NoiseIntensity)) + (-vs_TEXCOORD0.ww);
    u_xlat16_16.y = 1.0;
    u_xlat16_15.xy = u_xlat16_1.xy + u_xlat16_16.xy;
    u_xlat10_3 = texture(_Mask01, u_xlat16_15.xy).x;
    u_xlat16_3.x = max(u_xlat10_3, 9.99999975e-05);
    u_xlat16_3.x = log2(u_xlat16_3.x);
    u_xlat16_3.x = u_xlat16_3.x * _Mask01_Power;
    u_xlat16_3.x = exp2(u_xlat16_3.x);
    u_xlat16_8.xyz = _FlowMapColor02.xyz * vec3(_FlowScale02);
    u_xlat16_15.xy = vec2(u_xlat10_2) * vec2(vec2(_NoiseFlowIntensity, _NoiseFlowIntensity)) + u_xlat16_7.xy;
    u_xlat10_2 = texture(_FlowMap02, u_xlat16_15.xy).x;
    u_xlat16_13.xyz = vec3(u_xlat10_2) * u_xlat16_8.xyz;
    u_xlat16_5.xy = vec2(u_xlat16_1.z + u_xlat16_16.x, u_xlat16_1.w + u_xlat16_16.y);
    u_xlat10_2 = texture(_Mask02, u_xlat16_5.xy).x;
    u_xlat16_2.x = max(u_xlat10_2, 9.99999975e-05);
    u_xlat16_2.x = log2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * _Mask02_Power;
    u_xlat16_2.x = exp2(u_xlat16_2.x);
    u_xlat16_13.xyz = u_xlat16_2.xxx * u_xlat16_13.xyz;
    u_xlat16_2.xyz = u_xlat16_12.xyz * u_xlat16_3.xxx + u_xlat16_13.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(_EmissionScaler) + u_xlat16_2.xyz;
    u_xlat3.xyz = (-u_xlat0.xyz) + u_xlat16_4.xyz;
    u_xlat3.xyz = vec3(u_xlat16_34) * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat9.xy = vs_TEXCOORD0.zw * _DissovleNoise_ST.xy + _DissovleNoise_ST.zw;
    u_xlat16_4.x = _Time.y * _DissolveNoise_Uspeed + u_xlat9.x;
    u_xlat16_4.y = _Time.y * _DissolveNoise_Vspeed + u_xlat9.y;
    u_xlat10_32 = texture(_DissovleNoise, u_xlat16_4.xy).x;
    u_xlat32 = u_xlat10_32 * _DissovleNoiseScale + vs_TEXCOORD0.z;
#ifdef UNITY_ADRENO_ES3
    u_xlatb32 = !!(_Dissovle>=u_xlat32);
#else
    u_xlatb32 = _Dissovle>=u_xlat32;
#endif
    u_xlat0.xyz = (bool(u_xlatb30)) ? u_xlat3.xyz : u_xlat0.xyz;
    u_xlat0.xyz = u_xlat16_2.xyz + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(0.00999999978<u_xlat16_34);
#else
    u_xlatb30 = 0.00999999978<u_xlat16_34;
#endif
    if((int(u_xlatb32) * int(0xffffffffu))==0){discard;}
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn));
#else
    u_xlatb2.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn);
#endif
    u_xlat12.xyz = u_xlat0.xyz * vec3(vec3(_ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness));
    u_xlat3.xyz = vec3(vec3(_ES_CharacterPointLightWholeIntensity, _ES_CharacterPointLightWholeIntensity, _ES_CharacterPointLightWholeIntensity)) * mhy_CharacterPointLightColor.xyz;
    u_xlat9.xyz = _ES_CharacterMainLightColor.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat9.xyz = min(max(u_xlat9.xyz, 0.0), 1.0);
#else
    u_xlat9.xyz = clamp(u_xlat9.xyz, 0.0, 1.0);
#endif
    u_xlat33 = (-mhy_CharacterPointLightColor.w) + 1.0;
    u_xlat3.xyz = u_xlat9.xyz * vec3(u_xlat33) + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat3.xyz = vec3(vec3(_ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio)) * u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat12.xyz = u_xlat12.xyz * u_xlat3.xyz;
    u_xlat3.xyz = _ES_CharacterAmbientLightColor.xyz * vec3(_ES_CharacterAmbientLightRatio);
    u_xlat16_4.xyz = u_xlat12.xyz * vec3(10.0, 10.0, 10.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.xyz = min(max(u_xlat16_4.xyz, 0.0), 1.0);
#else
    u_xlat16_4.xyz = clamp(u_xlat16_4.xyz, 0.0, 1.0);
#endif
    u_xlat12.xyz = u_xlat3.xyz * u_xlat16_4.xyz + u_xlat12.xyz;
    u_xlat16_4.xyz = (u_xlatb2.x) ? u_xlat12.xyz : u_xlat0.xyz;
    u_xlat16_5.xyz = u_xlat0.xyz + (-u_xlat16_4.xyz);
    u_xlat16_5.xyz = vec3(u_xlat16_34) * u_xlat16_5.xyz + u_xlat16_4.xyz;
    u_xlat16_0.xyz = (bool(u_xlatb30)) ? u_xlat16_5.xyz : u_xlat16_4.xyz;
    u_xlat16_4.x = max(u_xlat16_0.z, u_xlat16_0.y);
    u_xlat16_1.w = max(u_xlat16_0.x, u_xlat16_4.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(1.0<u_xlat16_1.w);
#else
    u_xlatb2.x = 1.0<u_xlat16_1.w;
#endif
    u_xlat16_1.xyz = u_xlat16_0.xyz / u_xlat16_1.www;
    u_xlat16_0.w = 1.0;
    u_xlat16_0 = (u_xlatb2.x) ? u_xlat16_1 : u_xlat16_0;
    u_xlat16_4.x = min(u_xlat16_0.w, 1.10000002);
    u_xlat16_14 = u_xlat16_0.w + (-u_xlat16_4.x);
    u_xlat16_4.x = u_xlat16_34 * u_xlat16_14 + u_xlat16_4.x;
    u_xlat16_2.x = u_xlat16_4.x * 0.0500000007;
    SV_Target0.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb12 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_4.x = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb12) ? u_xlat16_4.x : 0.0;
    SV_Target0.w = 0.0156862754;
    SV_Target1.xyz = u_xlat16_0.xyz;
    SV_Target1.w = u_xlat16_2.x;
    SV_Target2.xy = vec2(0.0, 0.0);
    SV_Target2.w = vs_TEXCOORD4;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "TOON_SPECULAR_ON" "TOON_LIGHTMAP_ON" "FACE_MAP_NEW_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _MainTex_ST;
uniform 	float _FaceMapRotateOffset;
uniform 	float _CharacterAmbientSensorShadowOn;
uniform 	vec4 _AmbientSensorUVs;
uniform 	float _UseClipPlane;
uniform 	float _ClipPlaneWorld;
uniform 	vec4 _ClipPlane;
uniform 	vec4 mhy_AvatarLightDir;
uniform 	vec4 mhy_CharacterOverrideLightDir;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
struct unity_Builtins1Array_Type {
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw1 {
	unity_Builtins1Array_Type unity_Builtins1Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform lowp sampler2D _CharacterAmbientSensorTex;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp float vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD6;
flat out highp uint vs_SV_InstanceID0;
float u_xlat0;
int u_xlati0;
vec3 u_xlat1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
vec4 u_xlat4;
mediump float u_xlat16_5;
vec3 u_xlat6;
bool u_xlatb6;
float u_xlat7;
mediump vec2 u_xlat16_11;
float u_xlat12;
bool u_xlatb12;
float u_xlat13;
bool u_xlatb13;
mediump float u_xlat16_17;
float u_xlat19;
bool u_xlatb19;
float u_xlat20;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.5<mhy_CharacterOverrideLightDir.w);
#else
    u_xlatb6 = 0.5<mhy_CharacterOverrideLightDir.w;
#endif
    u_xlat1.x = mhy_CharacterOverrideLightDir.x;
    u_xlat1.yz = (-mhy_CharacterOverrideLightDir.yz);
    u_xlat6.xyz = (bool(u_xlatb6)) ? u_xlat1.xyz : mhy_AvatarLightDir.xyz;
    u_xlati0 = u_xlati0 << 2;
    u_xlat1.x = dot(u_xlat6.xyz, unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz);
    u_xlat7 = dot(u_xlat6.xyz, unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb13 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseClipPlane));
#else
    u_xlatb13 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseClipPlane);
#endif
    if(u_xlatb13){
#ifdef UNITY_ADRENO_ES3
        u_xlatb13 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ClipPlaneWorld));
#else
        u_xlatb13 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ClipPlaneWorld);
#endif
        if(u_xlatb13){
#ifdef UNITY_ADRENO_ES3
            u_xlatb13 = !!(abs(_ClipPlane.w)<0.00100000005);
#else
            u_xlatb13 = abs(_ClipPlane.w)<0.00100000005;
#endif
            u_xlat2.xyz = _ClipPlane.www * _ClipPlane.xyz;
            u_xlat2.xyz = (bool(u_xlatb13)) ? vec3(0.0, 0.0, 0.0) : u_xlat2.xyz;
            u_xlat3 = u_xlat2.yyyy * unity_Builtins1Array[u_xlati0 / 4].hlslcc_mtx4x4unity_WorldToObjectArray[1];
            u_xlat3 = unity_Builtins1Array[u_xlati0 / 4].hlslcc_mtx4x4unity_WorldToObjectArray[0] * u_xlat2.xxxx + u_xlat3;
            u_xlat2 = unity_Builtins1Array[u_xlati0 / 4].hlslcc_mtx4x4unity_WorldToObjectArray[2] * u_xlat2.zzzz + u_xlat3;
            u_xlat2 = u_xlat2 + unity_Builtins1Array[u_xlati0 / 4].hlslcc_mtx4x4unity_WorldToObjectArray[3];
            u_xlat2.xyz = u_xlat2.xyz / u_xlat2.www;
            u_xlat3.xyz = _ClipPlane.yyy * unity_Builtins1Array[u_xlati0 / 4].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz;
            u_xlat3.xyz = unity_Builtins1Array[u_xlati0 / 4].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz * _ClipPlane.xxx + u_xlat3.xyz;
            u_xlat3.xyz = unity_Builtins1Array[u_xlati0 / 4].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz * _ClipPlane.zzz + u_xlat3.xyz;
            u_xlat13 = dot(u_xlat2.xyz, u_xlat3.xyz);
            u_xlat19 = dot(in_POSITION0.xyz, u_xlat3.xyz);
#ifdef UNITY_ADRENO_ES3
            u_xlatb2 = !!(u_xlat19<u_xlat13);
#else
            u_xlatb2 = u_xlat19<u_xlat13;
#endif
            u_xlat13 = (-u_xlat13) + u_xlat19;
            u_xlat3.xyz = (-vec3(u_xlat13)) * u_xlat3.xyz + in_POSITION0.xyz;
            u_xlat3.w = 0.0;
            u_xlat4.xyz = in_POSITION0.xyz;
            u_xlat4.w = in_COLOR0.w;
            u_xlat2 = (bool(u_xlatb2)) ? u_xlat3 : u_xlat4;
            u_xlat16_5 = u_xlat2.w;
        } else {
            u_xlat13 = dot(in_POSITION0.xyz, _ClipPlane.xyz);
            u_xlat19 = _ClipPlane.w + -0.00999999978;
#ifdef UNITY_ADRENO_ES3
            u_xlatb19 = !!(u_xlat13<u_xlat19);
#else
            u_xlatb19 = u_xlat13<u_xlat19;
#endif
            u_xlat13 = u_xlat13 + (-_ClipPlane.w);
            u_xlat3.xyz = (-vec3(u_xlat13)) * _ClipPlane.xyz + in_POSITION0.xyz;
            u_xlat3.w = 0.0;
            u_xlat4.xyz = in_POSITION0.xyz;
            u_xlat4.w = in_COLOR0.w;
            u_xlat2 = (bool(u_xlatb19)) ? u_xlat3 : u_xlat4;
            u_xlat16_5 = u_xlat2.w;
        //ENDIF
        }
    } else {
        u_xlat2.xyz = in_POSITION0.xyz;
        u_xlat16_5 = in_COLOR0.w;
    //ENDIF
    }
    u_xlat3.xyw = (-_WorldSpaceCameraPos.xyz) + unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat4.x = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].x;
    u_xlat4.y = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].x;
    u_xlat4.z = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].x;
    u_xlat4.w = u_xlat3.x;
    u_xlat2.w = 1.0;
    u_xlat13 = dot(u_xlat4, u_xlat2);
    u_xlat4.x = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].y;
    u_xlat4.y = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].y;
    u_xlat4.z = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].y;
    u_xlat4.w = u_xlat3.y;
    u_xlat19 = dot(u_xlat4, u_xlat2);
    u_xlat3.x = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].z;
    u_xlat3.y = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].z;
    u_xlat3.z = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].z;
    u_xlat3.x = dot(u_xlat3, u_xlat2);
    u_xlat4.x = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].w;
    u_xlat4.y = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].w;
    u_xlat4.z = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].w;
    u_xlat4.w = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3].w;
    u_xlat20 = dot(u_xlat4, u_xlat2);
    u_xlat4 = vec4(u_xlat19) * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat4 = hlslcc_mtx4x4unity_MatrixVPZero[0] * vec4(u_xlat13) + u_xlat4;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat3.xxxx + u_xlat4;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVPZero[3] * vec4(u_xlat20) + u_xlat3;
    u_xlat4 = u_xlat2.yyyy * unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat4 = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * u_xlat2.xxxx + u_xlat4;
    u_xlat2 = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * u_xlat2.zzzz + u_xlat4;
    u_xlat2 = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3] * in_POSITION0.wwww + u_xlat2;
    vs_TEXCOORD3.xyz = u_xlat2.xyz / u_xlat2.www;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat2.xz = u_xlat3.xw * vec2(0.5, 0.5);
    u_xlat13 = u_xlat3.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat13 * 0.5;
    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat2.xyz = in_NORMAL0.yyy * unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat2.xyz = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_NORMAL0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_NORMAL0.zzz + u_xlat2.xyz;
    u_xlat0 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0 = inversesqrt(u_xlat0);
    u_xlat2.xyz = vec3(u_xlat0) * u_xlat2.xyz;
    u_xlat16_11.x = dot(u_xlat2.xyz, u_xlat6.xyz);
    vs_TEXCOORD1.w = u_xlat16_11.x * 0.497500002 + 0.5;
    u_xlat16_11.x = min(abs(u_xlat1.x), abs(u_xlat7));
    u_xlat16_17 = max(abs(u_xlat1.x), abs(u_xlat7));
    u_xlat16_17 = float(1.0) / u_xlat16_17;
    u_xlat16_11.x = u_xlat16_17 * u_xlat16_11.x;
    u_xlat16_17 = u_xlat16_11.x * u_xlat16_11.x;
    u_xlat0 = u_xlat16_17 * 0.0208350997 + -0.0851330012;
    u_xlat0 = u_xlat16_17 * u_xlat0 + 0.180141002;
    u_xlat0 = u_xlat16_17 * u_xlat0 + -0.330299497;
    u_xlat0 = u_xlat16_17 * u_xlat0 + 0.999866009;
    u_xlat6.x = u_xlat0 * u_xlat16_11.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(abs(u_xlat1.x)<abs(u_xlat7));
#else
    u_xlatb12 = abs(u_xlat1.x)<abs(u_xlat7);
#endif
    u_xlat6.x = u_xlat6.x * -2.0 + 1.57079637;
    u_xlat6.x = u_xlatb12 ? u_xlat6.x : float(0.0);
    u_xlat0 = u_xlat16_11.x * u_xlat0 + u_xlat6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(u_xlat1.x<(-u_xlat1.x));
#else
    u_xlatb6 = u_xlat1.x<(-u_xlat1.x);
#endif
    u_xlat6.x = u_xlatb6 ? -3.14159274 : float(0.0);
    u_xlat0 = u_xlat6.x + u_xlat0;
    u_xlat16_11.x = min(u_xlat1.x, u_xlat7);
    u_xlat16_17 = max(u_xlat1.x, u_xlat7);
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(u_xlat16_11.x<(-u_xlat16_11.x));
#else
    u_xlatb6 = u_xlat16_11.x<(-u_xlat16_11.x);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat16_17>=(-u_xlat16_17));
#else
    u_xlatb12 = u_xlat16_17>=(-u_xlat16_17);
#endif
    u_xlatb6 = u_xlatb12 && u_xlatb6;
    u_xlat0 = (u_xlatb6) ? (-u_xlat0) : u_xlat0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.0<(-u_xlat0));
#else
    u_xlatb6 = 0.0<(-u_xlat0);
#endif
    u_xlat16_11.x = u_xlat0 * -0.318309903;
    u_xlat0 = max(_FaceMapRotateOffset, 0.0);
    u_xlat12 = _FaceMapRotateOffset + 1.0;
    u_xlat12 = min(u_xlat12, 1.0);
    u_xlat12 = (-u_xlat0) + u_xlat12;
    u_xlat0 = (-u_xlat0) + abs(u_xlat16_11.x);
    u_xlat12 = float(1.0) / u_xlat12;
    u_xlat0 = u_xlat12 * u_xlat0;
#ifdef UNITY_ADRENO_ES3
    u_xlat0 = min(max(u_xlat0, 0.0), 1.0);
#else
    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
#endif
    u_xlat12 = u_xlat0 * -2.0 + 3.0;
    u_xlat0 = u_xlat0 * u_xlat0;
    u_xlat0 = u_xlat0 * u_xlat12;
    u_xlat0 = max(u_xlat0, 9.99999975e-05);
    u_xlat0 = min(u_xlat0, 0.999899983);
    u_xlat16_11.xy = in_TEXCOORD0.xy * vec2(-1.0, 1.0) + vec2(1.0, 0.0);
    vs_TEXCOORD6.xy = (bool(u_xlatb6)) ? u_xlat16_11.xy : in_TEXCOORD0.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_CharacterAmbientSensorShadowOn));
#else
    u_xlatb6 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_CharacterAmbientSensorShadowOn);
#endif
    if(u_xlatb6){
        u_xlat6.x = textureLod(_CharacterAmbientSensorTex, _AmbientSensorUVs.xy, 0.0).x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb6 = !!(0.5<u_xlat6.x);
#else
        u_xlatb6 = 0.5<u_xlat6.x;
#endif
        vs_TEXCOORD4 = u_xlatb6 ? 1.0 : float(0.0);
    } else {
        vs_TEXCOORD4 = 0.0;
    //ENDIF
    }
    gl_Position = u_xlat3;
    vs_COLOR0.xyz = in_COLOR0.xyz;
    vs_COLOR0.w = u_xlat16_5;
    vs_TEXCOORD1.xyz = u_xlat2.xyz;
    vs_TEXCOORD2.zw = u_xlat3.zw;
    vs_TEXCOORD6.z = u_xlat0;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	mediump vec4 _Color;
uniform 	float _MainTexAlphaUse;
uniform 	mediump float _MainTexAlphaCutoff;
uniform 	float _UseLightMapColorAO;
uniform 	float _UseVertexColorAO;
uniform 	mediump float _LightArea;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	float _UseCoolShadowColorOrTex;
uniform 	mediump vec3 _CoolShadowMultColor;
uniform 	float _UseShadowTransition;
uniform 	float _ShadowTransitionRange;
uniform 	float _ShadowTransitionSoftness;
uniform 	mediump vec3 _SpecularColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	float _FaceBlushStrength;
uniform 	mediump vec3 _FaceBlushColor;
uniform 	float _FaceMapSoftness;
uniform 	mediump float _EmissionScaler;
uniform 	mediump vec3 _EmissionColor_MHY;
uniform 	float _UseMaterial2;
uniform 	mediump vec3 _Color2;
uniform 	mediump vec3 _FirstShadowMultColor2;
uniform 	mediump vec3 _CoolShadowMultColor2;
uniform 	mediump float _Shininess2;
uniform 	mediump float _SpecMulti2;
uniform 	float _ShadowTransitionRange2;
uniform 	float _ShadowTransitionSoftness2;
uniform 	float _UseMaterial3;
uniform 	mediump vec3 _Color3;
uniform 	mediump vec3 _FirstShadowMultColor3;
uniform 	mediump vec3 _CoolShadowMultColor3;
uniform 	mediump float _Shininess3;
uniform 	mediump float _SpecMulti3;
uniform 	float _ShadowTransitionRange3;
uniform 	float _ShadowTransitionSoftness3;
uniform 	float _UseMaterial4;
uniform 	mediump vec3 _Color4;
uniform 	mediump vec3 _FirstShadowMultColor4;
uniform 	mediump vec3 _CoolShadowMultColor4;
uniform 	mediump float _Shininess4;
uniform 	mediump float _SpecMulti4;
uniform 	float _ShadowTransitionRange4;
uniform 	float _ShadowTransitionSoftness4;
uniform 	float _UseMaterial5;
uniform 	mediump vec3 _Color5;
uniform 	mediump vec3 _FirstShadowMultColor5;
uniform 	mediump vec3 _CoolShadowMultColor5;
uniform 	mediump float _Shininess5;
uniform 	mediump float _SpecMulti5;
uniform 	float _ShadowTransitionRange5;
uniform 	float _ShadowTransitionSoftness5;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _TextureBiasWhenDithering;
uniform 	float _UseClipPlane;
uniform 	float _ES_CharacterAmbientLightOn;
uniform 	float _ES_CharacterAmbientBrightness;
uniform 	vec3 _ES_CharacterMainLightColor;
uniform 	vec3 _ES_CharacterAmbientLightColor;
uniform 	float _ES_CharacterMainLightRatio;
uniform 	float _ES_CharacterAmbientLightRatio;
uniform 	float _ES_CharacterColorTone;
uniform 	float _ES_CharacterPointLightWholeIntensity;
uniform 	vec4 mhy_AvatarLightDir;
uniform 	vec4 mhy_CharacterPointLightColor;
uniform 	vec4 mhy_CharacterOverrideLightDir;
uniform 	mediump vec4 _FlowMapColor01;
uniform 	mediump float _FlowScale01;
uniform 	mediump float _FlowMap01_Uspeed;
uniform 	vec4 _FlowMap01_ST;
uniform 	mediump float _FlowMap01_Vspeed;
uniform 	mediump float _Noise_Uspeed;
uniform 	vec4 _Noise_ST;
uniform 	mediump float _Noise_Vspeed;
uniform 	mediump float _NoiseFlowIntensity;
uniform 	mediump float _MaskOffset01;
uniform 	mediump float _NoiseIntensity;
uniform 	mediump float _Mask01_Power;
uniform 	mediump vec4 _FlowMapColor02;
uniform 	mediump float _FlowScale02;
uniform 	mediump float _FlowMap02_Uspeed;
uniform 	vec4 _FlowMap02_ST;
uniform 	mediump float _FlowMap02_Vspeed;
uniform 	mediump float _MaskOffset02;
uniform 	mediump float _Mask02_Power;
uniform 	mediump float _DissolveNoise_Uspeed;
uniform 	vec4 _DissovleNoise_ST;
uniform 	mediump float _DissolveNoise_Vspeed;
uniform 	mediump float _DissovleNoiseScale;
uniform 	mediump float _Dissovle;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _FaceMapTex;
uniform lowp sampler2D _Noise;
uniform lowp sampler2D _FlowMap01;
uniform lowp sampler2D _Mask01;
uniform lowp sampler2D _FlowMap02;
uniform lowp sampler2D _Mask02;
uniform lowp sampler2D _DissovleNoise;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp float vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
vec3 u_xlat2;
mediump float u_xlat16_2;
bvec3 u_xlatb2;
vec3 u_xlat3;
mediump float u_xlat16_3;
lowp vec4 u_xlat10_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
bvec4 u_xlatb5;
vec3 u_xlat6;
mediump vec3 u_xlat16_6;
bvec3 u_xlatb6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
bool u_xlatb11;
vec3 u_xlat13;
mediump vec3 u_xlat16_13;
lowp float u_xlat10_13;
bool u_xlatb13;
float u_xlat14;
mediump vec3 u_xlat16_14;
int u_xlati14;
mediump float u_xlat16_15;
mediump vec3 u_xlat16_18;
mediump vec3 u_xlat16_19;
bvec2 u_xlatb22;
vec2 u_xlat24;
mediump float u_xlat16_30;
float u_xlat33;
mediump float u_xlat16_33;
lowp float u_xlat10_33;
int u_xlati33;
bool u_xlatb33;
float u_xlat35;
float u_xlat36;
int u_xlati36;
bool u_xlatb36;
mediump float u_xlat16_37;
float u_xlat38;
mediump float u_xlat16_38;
int u_xlati38;
mediump float u_xlat16_40;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseClipPlane));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseClipPlane);
#endif
    u_xlat16_1.x = vs_COLOR0.w + -0.00999999978;
#ifdef UNITY_ADRENO_ES3
    u_xlatb11 = !!(u_xlat16_1.x<0.0);
#else
    u_xlatb11 = u_xlat16_1.x<0.0;
#endif
    u_xlatb0 = u_xlatb0 && u_xlatb11;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(_DitherAlpha<0.949999988);
#else
        u_xlatb0 = _DitherAlpha<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb22.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb22.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb22.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = _DitherAlpha * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + -0.00999999978;
#ifdef UNITY_ADRENO_ES3
            u_xlatb0 = !!(u_xlat0.x<0.0);
#else
            u_xlatb0 = u_xlat0.x<0.0;
#endif
            if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(0.5<mhy_CharacterOverrideLightDir.w);
#else
    u_xlatb2.x = 0.5<mhy_CharacterOverrideLightDir.w;
#endif
    u_xlat3.x = mhy_CharacterOverrideLightDir.x;
    u_xlat3.yz = (-mhy_CharacterOverrideLightDir.yz);
    u_xlat2.xyz = (u_xlatb2.x) ? u_xlat3.xyz : mhy_AvatarLightDir.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat33) + u_xlat2.xyz;
    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat0.xyz = vec3(u_xlat33) * u_xlat0.xyz;
    u_xlat33 = _TextureBiasWhenDithering + -1.0;
    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy, u_xlat33);
    u_xlatb2.xyz = equal(vec4(_MainTexAlphaUse), vec4(3.0, 1.0, 2.0, 0.0)).xyz;
    u_xlat35 = u_xlat1.w * _FaceBlushStrength;
    u_xlat3.xyz = (-u_xlat1.xyz) + _FaceBlushColor.xyz;
    u_xlat3.xyz = vec3(u_xlat35) * u_xlat3.xyz + u_xlat1.xyz;
    u_xlat16_4.xyz = (u_xlatb2.x) ? u_xlat3.xyz : u_xlat1.xyz;
    u_xlat16_37 = u_xlat1.w + (-_MainTexAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(u_xlat16_37<0.0);
#else
    u_xlatb2.x = u_xlat16_37<0.0;
#endif
    u_xlatb2.x = u_xlatb2.y && u_xlatb2.x;
    if((int(u_xlatb2.x) * int(0xffffffffu))!=0){discard;}
    u_xlat10_3 = texture(_LightMapTex, vs_TEXCOORD0.xy, u_xlat33);
    u_xlatb2.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseLightMapColorAO, _UseVertexColorAO, _UseLightMapColorAO, _UseLightMapColorAO)).xy;
    u_xlat16_37 = (u_xlatb2.x) ? u_xlat10_3.y : 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseMaterial2));
#else
    u_xlatb33 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseMaterial2);
#endif
    u_xlatb5 = greaterThanEqual(u_xlat10_3.wwww, vec4(0.800000012, 0.400000006, 0.200000003, 0.600000024));
    u_xlatb33 = u_xlatb33 && u_xlatb5.x;
    u_xlat33 = (u_xlatb33) ? 2.0 : 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseMaterial3));
#else
    u_xlatb2.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseMaterial3);
#endif
    u_xlatb2.x = u_xlatb5.y && u_xlatb2.x;
    u_xlatb6.xyz = lessThan(u_xlat10_3.wwww, vec4(0.600000024, 0.400000006, 0.800000012, 0.0)).xyz;
    u_xlatb2.x = u_xlatb2.x && u_xlatb6.x;
    u_xlat33 = (u_xlatb2.x) ? 3.0 : u_xlat33;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseMaterial4));
#else
    u_xlatb2.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseMaterial4);
#endif
    u_xlatb2.x = u_xlatb5.z && u_xlatb2.x;
    u_xlatb2.x = u_xlatb6.y && u_xlatb2.x;
    u_xlat33 = (u_xlatb2.x) ? 4.0 : u_xlat33;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseMaterial5));
#else
    u_xlatb2.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseMaterial5);
#endif
    u_xlatb2.x = u_xlatb5.w && u_xlatb2.x;
    u_xlatb2.x = u_xlatb6.z && u_xlatb2.x;
    u_xlat33 = (u_xlatb2.x) ? 5.0 : u_xlat33;
    u_xlatb5 = equal(vec4(u_xlat33), vec4(2.0, 3.0, 4.0, 5.0));
    u_xlat16_7.xyz = (u_xlatb5.x) ? _Color2.xyz : _Color.xyz;
    u_xlat16_7.xyz = (u_xlatb5.y) ? _Color3.xyz : u_xlat16_7.xyz;
    u_xlat16_7.xyz = (u_xlatb5.z) ? _Color4.xyz : u_xlat16_7.xyz;
    u_xlat16_7.xyz = (u_xlatb5.w) ? _Color5.xyz : u_xlat16_7.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_7.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(0.00999999978<u_xlat1.w);
#else
    u_xlatb2.x = 0.00999999978<u_xlat1.w;
#endif
    u_xlatb2.x = u_xlatb2.x && u_xlatb2.z;
    u_xlat16_7.x = (u_xlatb2.x) ? u_xlat1.w : 0.0;
    u_xlat24.x = texture(_FaceMapTex, vs_TEXCOORD6.xy).w;
    u_xlat35 = max(_FaceMapSoftness, 9.99999997e-07);
    u_xlat16_18.x = (-u_xlat35) + vs_TEXCOORD6.z;
    u_xlat16_14.x = max(u_xlat16_18.x, 9.99999975e-05);
    u_xlat16_14.x = min(u_xlat16_14.x, 0.998899996);
    u_xlat16_18.x = u_xlat35 + vs_TEXCOORD6.z;
    u_xlat24.y = min(u_xlat16_18.x, 0.999899983);
    u_xlat24.xy = u_xlat24.xy + (-u_xlat16_14.xx);
    u_xlat35 = float(1.0) / u_xlat24.y;
    u_xlat24.x = u_xlat35 * u_xlat24.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat24.x = min(max(u_xlat24.x, 0.0), 1.0);
#else
    u_xlat24.x = clamp(u_xlat24.x, 0.0, 1.0);
#endif
    u_xlat35 = u_xlat24.x * -2.0 + 3.0;
    u_xlat24.x = u_xlat24.x * u_xlat24.x;
    u_xlat14 = u_xlat24.x * u_xlat35;
    u_xlat16_18.x = u_xlat16_37 * vs_COLOR0.x;
    u_xlat16_37 = (u_xlatb2.y) ? u_xlat16_18.x : u_xlat16_37;
#ifdef UNITY_ADRENO_ES3
    u_xlatb13 = !!(u_xlat16_37<0.0500000007);
#else
    u_xlatb13 = u_xlat16_37<0.0500000007;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb36 = !!(0.949999988<u_xlat16_37);
#else
    u_xlatb36 = 0.949999988<u_xlat16_37;
#endif
    u_xlat6.x = u_xlat16_37 + vs_TEXCOORD1.w;
    u_xlat6.x = u_xlat6.x * 0.5;
    u_xlat16_37 = (u_xlatb36) ? 1.0 : u_xlat6.x;
    u_xlat16_37 = (u_xlatb13) ? 0.0 : u_xlat16_37;
#ifdef UNITY_ADRENO_ES3
    u_xlatb13 = !!(u_xlat16_37<_LightArea);
#else
    u_xlatb13 = u_xlat16_37<_LightArea;
#endif
    if(u_xlatb13){
#ifdef UNITY_ADRENO_ES3
        u_xlatb13 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition));
#else
        u_xlatb13 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition);
#endif
#ifdef UNITY_ADRENO_ES3
        u_xlatb36 = !!(u_xlat33==1.0);
#else
        u_xlatb36 = u_xlat33==1.0;
#endif
        u_xlat16_8.x = (u_xlatb36) ? _ShadowTransitionRange : 0.0;
        u_xlat16_8.y = (u_xlatb36) ? _ShadowTransitionSoftness : 0.0;
        u_xlat16_18.xy = (u_xlatb5.x) ? vec2(_ShadowTransitionRange2, _ShadowTransitionSoftness2) : u_xlat16_8.xy;
        u_xlat16_18.xy = (u_xlatb5.y) ? vec2(_ShadowTransitionRange3, _ShadowTransitionSoftness3) : u_xlat16_18.xy;
        u_xlat16_18.xy = (u_xlatb5.z) ? vec2(_ShadowTransitionRange4, _ShadowTransitionSoftness4) : u_xlat16_18.xy;
        u_xlat16_18.xy = (u_xlatb5.w) ? vec2(_ShadowTransitionRange5, _ShadowTransitionSoftness5) : u_xlat16_18.xy;
        u_xlat16_37 = (-u_xlat16_37) + _LightArea;
        u_xlat16_37 = u_xlat16_37 / u_xlat16_18.x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb36 = !!(u_xlat16_37>=1.0);
#else
        u_xlatb36 = u_xlat16_37>=1.0;
#endif
        u_xlat16_38 = u_xlat16_37 + 0.00999999978;
        u_xlat16_38 = log2(u_xlat16_38);
        u_xlat16_38 = u_xlat16_38 * u_xlat16_18.y;
        u_xlat16_38 = exp2(u_xlat16_38);
        u_xlat38 = min(u_xlat16_38, 1.0);
        u_xlat36 = (u_xlatb36) ? 1.0 : u_xlat38;
        u_xlat13.x = (u_xlatb13) ? u_xlat36 : 1.0;
        u_xlat16_37 = 0.0;
    } else {
        u_xlat13.x = 0.0;
        u_xlat16_37 = 1.0;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb36 = !!(0.5<u_xlat10_3.x);
#else
    u_xlatb36 = 0.5<u_xlat10_3.x;
#endif
    u_xlat16_18.x = min(u_xlat14, u_xlat16_37);
    u_xlat16_37 = (u_xlatb36) ? u_xlat16_18.x : u_xlat16_37;
    u_xlat16_37 = (-u_xlat16_37) + 1.0;
#ifdef UNITY_ADRENO_ES3
    { bool cond = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(vs_TEXCOORD4); u_xlati14 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati14 = int((vec4(0.0, 0.0, 0.0, 0.0)!=vec4(vs_TEXCOORD4)) ? 0xFFFFFFFFu : uint(0u));
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(u_xlat33==1.0);
#else
    u_xlatb33 = u_xlat33==1.0;
#endif
    if(u_xlatb33){
#ifdef UNITY_ADRENO_ES3
        u_xlatb36 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex));
#else
        u_xlatb36 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex);
#endif
        u_xlat16_6.xyz = vec3(_FirstShadowMultColor.xxyz.y + (-_CoolShadowMultColor.x), _FirstShadowMultColor.xxyz.z + (-_CoolShadowMultColor.y), float(_FirstShadowMultColor.z) + (-_CoolShadowMultColor.z));
        u_xlat6.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_6.xyz + _CoolShadowMultColor.xyz;
        u_xlat16_18.xyz = (bool(u_xlatb36)) ? u_xlat6.xyz : vec3(_FirstShadowMultColor.x, _FirstShadowMultColor.y, _FirstShadowMultColor.z);
    } else {
        if(u_xlatb5.x){
#ifdef UNITY_ADRENO_ES3
            u_xlatb36 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex));
#else
            u_xlatb36 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex);
#endif
            u_xlat16_6.xyz = _FirstShadowMultColor2.xyz + (-_CoolShadowMultColor2.xyz);
            u_xlat6.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_6.xyz + _CoolShadowMultColor2.xyz;
            u_xlat16_18.xyz = (bool(u_xlatb36)) ? u_xlat6.xyz : _FirstShadowMultColor2.xyz;
        } else {
#ifdef UNITY_ADRENO_ES3
            u_xlatb36 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex));
#else
            u_xlatb36 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex);
#endif
            u_xlat16_6.xyz = _FirstShadowMultColor3.xyz + (-_CoolShadowMultColor3.xyz);
            u_xlat6.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_6.xyz + _CoolShadowMultColor3.xyz;
            u_xlat16_8.xyz = (bool(u_xlatb36)) ? u_xlat6.xyz : _FirstShadowMultColor3.xyz;
            u_xlat16_6.xyz = _FirstShadowMultColor4.xyz + (-_CoolShadowMultColor4.xyz);
            u_xlat6.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_6.xyz + _CoolShadowMultColor4.xyz;
            u_xlat16_9.xyz = (bool(u_xlatb36)) ? u_xlat6.xyz : _FirstShadowMultColor4.xyz;
            u_xlat16_6.xyz = _FirstShadowMultColor5.xyz + (-_CoolShadowMultColor5.xyz);
            u_xlat6.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_6.xyz + _CoolShadowMultColor5.xyz;
            u_xlat16_10.xyz = (bool(u_xlatb36)) ? u_xlat6.xyz : _FirstShadowMultColor5.xyz;
            u_xlat16_9.xyz = (u_xlatb5.z) ? u_xlat16_9.xyz : u_xlat16_10.xyz;
            u_xlat16_18.xyz = (u_xlatb5.y) ? u_xlat16_8.xyz : u_xlat16_9.xyz;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb36 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition));
#else
    u_xlatb36 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition);
#endif
    u_xlati38 = ~u_xlati14;
    u_xlati36 = u_xlatb36 ? u_xlati38 : int(0);
    u_xlat16_6.xyz = u_xlat16_18.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat6.xyz = u_xlat13.xxx * u_xlat16_6.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_18.xyz = (int(u_xlati36) != 0) ? u_xlat6.xyz : u_xlat16_18.xyz;
    u_xlat16_8.x = (-u_xlat35) * u_xlat24.x + 1.0;
    u_xlat16_19.xyz = u_xlat16_18.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat16_8.xyz = u_xlat16_8.xxx * u_xlat16_19.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_18.xyz = (int(u_xlati14) != 0) ? u_xlat16_18.xyz : u_xlat16_8.xyz;
    u_xlat16_8.x = (u_xlatb5.z) ? _Shininess4 : _Shininess5;
    u_xlat16_19.x = (u_xlatb5.z) ? _SpecMulti4 : _SpecMulti5;
    u_xlat16_8.x = (u_xlatb5.y) ? _Shininess3 : u_xlat16_8.x;
    u_xlat16_19.x = (u_xlatb5.y) ? _SpecMulti3 : u_xlat16_19.x;
    u_xlat16_8.x = (u_xlatb5.x) ? _Shininess2 : u_xlat16_8.x;
    u_xlat16_19.x = (u_xlatb5.x) ? _SpecMulti2 : u_xlat16_19.x;
    u_xlat16_8.x = (u_xlatb33) ? _Shininess : u_xlat16_8.x;
    u_xlat16_19.x = (u_xlatb33) ? _SpecMulti : u_xlat16_19.x;
    u_xlat16_30 = dot(vs_TEXCOORD1.xyz, u_xlat0.xyz);
    u_xlat16_30 = max(u_xlat16_30, 0.00100000005);
    u_xlat16_30 = log2(u_xlat16_30);
    u_xlat16_8.x = u_xlat16_30 * u_xlat16_8.x;
    u_xlat16_8.x = exp2(u_xlat16_8.x);
    u_xlat0.x = (-u_xlat10_3.z) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat0.x<u_xlat16_8.x);
#else
    u_xlatb0 = u_xlat0.x<u_xlat16_8.x;
#endif
    u_xlat16_8.xyz = u_xlat16_19.xxx * _SpecularColor.xyz;
    u_xlat16_8.xyz = u_xlat10_3.xxx * u_xlat16_8.xyz;
    u_xlat16_8.xyz = (bool(u_xlatb0)) ? u_xlat16_8.xyz : vec3(0.0, 0.0, 0.0);
    u_xlat16_4.xyz = vec3(u_xlat16_4.x * _EmissionColor_MHY.xxyz.y, u_xlat16_4.y * _EmissionColor_MHY.xxyz.z, u_xlat16_4.z * float(_EmissionColor_MHY.z));
    u_xlat0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(u_xlat16_37==1.0);
#else
    u_xlatb33 = u_xlat16_37==1.0;
#endif
    u_xlati33 = int(uint(u_xlatb33) * 0xffffffffu | uint(u_xlati14));
    u_xlat13.xyz = u_xlat0.xyz * u_xlat16_18.xyz;
    u_xlat0.xyz = (int(u_xlati33) != 0) ? u_xlat13.xyz : u_xlat0.xyz;
    u_xlat0.xyz = u_xlat16_8.xyz + u_xlat0.xyz;
    u_xlat13.xy = vs_TEXCOORD0.zw * _FlowMap01_ST.xy + _FlowMap01_ST.zw;
    u_xlat16_8.x = _Time.y * _FlowMap01_Uspeed + u_xlat13.x;
    u_xlat16_8.y = _Time.y * _FlowMap01_Vspeed + u_xlat13.y;
    u_xlat13.xy = vs_TEXCOORD0.zw * _Noise_ST.xy + _Noise_ST.zw;
    u_xlat16_9.x = _Time.y * _Noise_Uspeed + u_xlat13.x;
    u_xlat16_9.y = _Time.y * _Noise_Vspeed + u_xlat13.y;
    u_xlat10_33 = texture(_Noise, u_xlat16_9.xy).x;
    u_xlat16_37 = _MaskOffset01 * 1.39999998 + -0.699999988;
    u_xlat16_18.x = u_xlat10_33 * _NoiseIntensity;
    u_xlat13.xy = vs_TEXCOORD0.zw * _FlowMap02_ST.xy + _FlowMap02_ST.zw;
    u_xlat16_9.x = _Time.y * _FlowMap02_Uspeed + u_xlat13.x;
    u_xlat16_9.y = _Time.y * _FlowMap02_Vspeed + u_xlat13.y;
    u_xlat16_40 = _MaskOffset02 * 1.39999998 + -0.699999988;
    u_xlat16_10.xyz = _FlowMapColor01.xyz * vec3(_FlowScale01);
    u_xlat16_8.xy = vec2(u_xlat10_33) * vec2(vec2(_NoiseFlowIntensity, _NoiseFlowIntensity)) + u_xlat16_8.xy;
    u_xlat10_13 = texture(_FlowMap01, u_xlat16_8.xy).x;
    u_xlat16_13.xyz = vec3(u_xlat10_13) * u_xlat16_10.xyz;
    u_xlat16_8.x = (-vs_TEXCOORD0.z) + 1.0;
    u_xlat16_1.x = u_xlat16_37 + u_xlat16_8.x;
    u_xlat16_1.yw = vec2(u_xlat10_33) * vec2(vec2(_NoiseIntensity, _NoiseIntensity)) + (-vs_TEXCOORD0.ww);
    u_xlat16_18.y = 1.0;
    u_xlat16_19.xy = u_xlat16_1.xy + u_xlat16_18.xy;
    u_xlat10_3.x = texture(_Mask01, u_xlat16_19.xy).x;
    u_xlat16_3 = max(u_xlat10_3.x, 9.99999975e-05);
    u_xlat16_3 = log2(u_xlat16_3);
    u_xlat16_3 = u_xlat16_3 * _Mask01_Power;
    u_xlat16_3 = exp2(u_xlat16_3);
    u_xlat16_19.xyz = _FlowMapColor02.xyz * vec3(_FlowScale02);
    u_xlat16_9.xy = vec2(u_xlat10_33) * vec2(vec2(_NoiseFlowIntensity, _NoiseFlowIntensity)) + u_xlat16_9.xy;
    u_xlat10_33 = texture(_FlowMap02, u_xlat16_9.xy).x;
    u_xlat16_14.xyz = vec3(u_xlat10_33) * u_xlat16_19.xyz;
    u_xlat16_1.z = u_xlat16_40 + u_xlat16_8.x;
    u_xlat16_18.xy = vec2(u_xlat16_1.z + u_xlat16_18.x, u_xlat16_1.w + u_xlat16_18.y);
    u_xlat10_33 = texture(_Mask02, u_xlat16_18.xy).x;
    u_xlat16_33 = max(u_xlat10_33, 9.99999975e-05);
    u_xlat16_33 = log2(u_xlat16_33);
    u_xlat16_33 = u_xlat16_33 * _Mask02_Power;
    u_xlat16_33 = exp2(u_xlat16_33);
    u_xlat16_14.xyz = vec3(u_xlat16_33) * u_xlat16_14.xyz;
    u_xlat16_13.xyz = u_xlat16_13.xyz * vec3(u_xlat16_3) + u_xlat16_14.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(_EmissionScaler) + u_xlat16_13.xyz;
    u_xlat3.xyz = (-u_xlat0.xyz) + u_xlat16_4.xyz;
    u_xlat3.xyz = u_xlat16_7.xxx * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat5.xy = vs_TEXCOORD0.zw * _DissovleNoise_ST.xy + _DissovleNoise_ST.zw;
    u_xlat16_4.x = _Time.y * _DissolveNoise_Uspeed + u_xlat5.x;
    u_xlat16_4.y = _Time.y * _DissolveNoise_Vspeed + u_xlat5.y;
    u_xlat10_33 = texture(_DissovleNoise, u_xlat16_4.xy).x;
    u_xlat33 = u_xlat10_33 * _DissovleNoiseScale + vs_TEXCOORD0.z;
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(_Dissovle>=u_xlat33);
#else
    u_xlatb33 = _Dissovle>=u_xlat33;
#endif
    u_xlat0.xyz = (u_xlatb2.x) ? u_xlat3.xyz : u_xlat0.xyz;
    u_xlat0.xyz = u_xlat16_13.xyz + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(0.00999999978<u_xlat16_7.x);
#else
    u_xlatb2.x = 0.00999999978<u_xlat16_7.x;
#endif
    if((int(u_xlatb33) * int(0xffffffffu))==0){discard;}
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn));
#else
    u_xlatb33 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn);
#endif
    u_xlat13.xyz = u_xlat0.xyz * vec3(vec3(_ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness));
    u_xlat3.xyz = vec3(vec3(_ES_CharacterPointLightWholeIntensity, _ES_CharacterPointLightWholeIntensity, _ES_CharacterPointLightWholeIntensity)) * mhy_CharacterPointLightColor.xyz;
    u_xlat5.xyz = _ES_CharacterMainLightColor.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.xyz = min(max(u_xlat5.xyz, 0.0), 1.0);
#else
    u_xlat5.xyz = clamp(u_xlat5.xyz, 0.0, 1.0);
#endif
    u_xlat36 = (-mhy_CharacterPointLightColor.w) + 1.0;
    u_xlat3.xyz = u_xlat5.xyz * vec3(u_xlat36) + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat3.xyz = vec3(vec3(_ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio)) * u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat13.xyz = u_xlat13.xyz * u_xlat3.xyz;
    u_xlat3.xyz = _ES_CharacterAmbientLightColor.xyz * vec3(_ES_CharacterAmbientLightRatio);
    u_xlat16_4.xyz = u_xlat13.xyz * vec3(10.0, 10.0, 10.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.xyz = min(max(u_xlat16_4.xyz, 0.0), 1.0);
#else
    u_xlat16_4.xyz = clamp(u_xlat16_4.xyz, 0.0, 1.0);
#endif
    u_xlat13.xyz = u_xlat3.xyz * u_xlat16_4.xyz + u_xlat13.xyz;
    u_xlat16_4.xyz = (bool(u_xlatb33)) ? u_xlat13.xyz : u_xlat0.xyz;
    u_xlat16_18.xyz = u_xlat0.xyz + (-u_xlat16_4.xyz);
    u_xlat16_18.xyz = u_xlat16_7.xxx * u_xlat16_18.xyz + u_xlat16_4.xyz;
    u_xlat16_0.xyz = (u_xlatb2.x) ? u_xlat16_18.xyz : u_xlat16_4.xyz;
    u_xlat16_4.x = max(u_xlat16_0.z, u_xlat16_0.y);
    u_xlat16_1.w = max(u_xlat16_0.x, u_xlat16_4.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(1.0<u_xlat16_1.w);
#else
    u_xlatb2.x = 1.0<u_xlat16_1.w;
#endif
    u_xlat16_1.xyz = u_xlat16_0.xyz / u_xlat16_1.www;
    u_xlat16_0.w = 1.0;
    u_xlat16_0 = (u_xlatb2.x) ? u_xlat16_1 : u_xlat16_0;
    u_xlat16_4.x = min(u_xlat16_0.w, 1.10000002);
    u_xlat16_15 = u_xlat16_0.w + (-u_xlat16_4.x);
    u_xlat16_4.x = u_xlat16_7.x * u_xlat16_15 + u_xlat16_4.x;
    u_xlat16_2 = u_xlat16_4.x * 0.0500000007;
    SV_Target0.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb13 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb13 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_4.x = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb13) ? u_xlat16_4.x : 0.0;
    SV_Target0.w = 0.0156862754;
    SV_Target1.xyz = u_xlat16_0.xyz;
    SV_Target1.w = u_xlat16_2;
    SV_Target2.xy = vec2(0.0, 0.0);
    SV_Target2.w = vs_TEXCOORD4;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "MSAA_INTERPOLATION" "FACE_MAP_NEW_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	vec4 _MainTex_ST;
uniform 	float _FaceMapRotateOffset;
uniform 	float _CharacterAmbientSensorShadowOn;
uniform 	vec4 _AmbientSensorUVs;
uniform 	float _UseClipPlane;
uniform 	float _ClipPlaneWorld;
uniform 	vec4 _ClipPlane;
uniform 	vec4 mhy_AvatarLightDir;
uniform 	vec4 mhy_CharacterOverrideLightDir;
uniform lowp sampler2D _CharacterAmbientSensorTex;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp float vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD6;
vec3 u_xlat0;
bool u_xlatb0;
vec3 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
bool u_xlatb3;
vec4 u_xlat4;
vec4 u_xlat5;
mediump vec2 u_xlat16_6;
float u_xlat7;
bool u_xlatb7;
vec3 u_xlat8;
bvec2 u_xlatb8;
bool u_xlatb9;
mediump float u_xlat16_13;
float u_xlat14;
bool u_xlatb14;
float u_xlat15;
float u_xlat21;
float u_xlat22;
bool u_xlatb22;
float u_xlat23;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.5<mhy_CharacterOverrideLightDir.w);
#else
    u_xlatb0 = 0.5<mhy_CharacterOverrideLightDir.w;
#endif
    u_xlat1.x = mhy_CharacterOverrideLightDir.x;
    u_xlat1.yz = (-mhy_CharacterOverrideLightDir.yz);
    u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat1.xyz : mhy_AvatarLightDir.xyz;
    u_xlat21 = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_ObjectToWorld[1].xyz);
    u_xlat1.x = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_ObjectToWorld[2].xyz);
    u_xlatb8.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseClipPlane, _ClipPlaneWorld, _UseClipPlane, _UseClipPlane)).xy;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(abs(_ClipPlane.w)<0.00100000005);
#else
    u_xlatb22 = abs(_ClipPlane.w)<0.00100000005;
#endif
    u_xlat2.xyz = _ClipPlane.www * _ClipPlane.xyz;
    u_xlat2.xyz = (bool(u_xlatb22)) ? vec3(0.0, 0.0, 0.0) : u_xlat2.xyz;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_WorldToObject[1];
    u_xlat3 = hlslcc_mtx4x4unity_WorldToObject[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat2 = hlslcc_mtx4x4unity_WorldToObject[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat2 = u_xlat2 + hlslcc_mtx4x4unity_WorldToObject[3];
    u_xlat2.xyz = u_xlat2.xyz / u_xlat2.www;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * _ClipPlane.yyy;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _ClipPlane.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _ClipPlane.zzz + u_xlat3.xyz;
    u_xlat22 = dot(u_xlat2.xyz, u_xlat3.xyz);
    u_xlat2.x = dot(in_POSITION0.xyz, u_xlat3.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(u_xlat2.x<u_xlat22);
#else
    u_xlatb9 = u_xlat2.x<u_xlat22;
#endif
    u_xlat22 = (-u_xlat22) + u_xlat2.x;
    u_xlat3.xyz = (-vec3(u_xlat22)) * u_xlat3.xyz + in_POSITION0.xyz;
    u_xlat3.w = 0.0;
    u_xlat4.xyz = in_POSITION0.xyz;
    u_xlat4.w = in_COLOR0.w;
    u_xlat2 = (bool(u_xlatb9)) ? u_xlat3 : u_xlat4;
    u_xlat22 = dot(in_POSITION0.xyz, _ClipPlane.xyz);
    u_xlat3.x = _ClipPlane.w + -0.00999999978;
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(u_xlat22<u_xlat3.x);
#else
    u_xlatb3 = u_xlat22<u_xlat3.x;
#endif
    u_xlat22 = u_xlat22 + (-_ClipPlane.w);
    u_xlat5.xyz = (-vec3(u_xlat22)) * _ClipPlane.xyz + in_POSITION0.xyz;
    u_xlat5.w = 0.0;
    u_xlat3 = (bool(u_xlatb3)) ? u_xlat5 : u_xlat4;
    u_xlat2.xyz = (u_xlatb8.y) ? u_xlat2.xyz : u_xlat3.xyz;
    u_xlat16_6.x = (u_xlatb8.y) ? u_xlat2.w : u_xlat3.w;
    u_xlat2.xyz = (u_xlatb8.x) ? u_xlat2.xyz : in_POSITION0.xyz;
    vs_COLOR0.w = (u_xlatb8.x) ? u_xlat16_6.x : in_COLOR0.w;
    u_xlat3.xyw = (-_WorldSpaceCameraPos.xyz) + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat4.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;
    u_xlat4.y = hlslcc_mtx4x4unity_ObjectToWorld[1].x;
    u_xlat4.z = hlslcc_mtx4x4unity_ObjectToWorld[2].x;
    u_xlat4.w = u_xlat3.x;
    u_xlat2.w = 1.0;
    u_xlat8.x = dot(u_xlat4, u_xlat2);
    u_xlat4.x = hlslcc_mtx4x4unity_ObjectToWorld[0].y;
    u_xlat4.y = hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat4.z = hlslcc_mtx4x4unity_ObjectToWorld[2].y;
    u_xlat4.w = u_xlat3.y;
    u_xlat15 = dot(u_xlat4, u_xlat2);
    u_xlat3.x = hlslcc_mtx4x4unity_ObjectToWorld[0].z;
    u_xlat3.y = hlslcc_mtx4x4unity_ObjectToWorld[1].z;
    u_xlat3.z = hlslcc_mtx4x4unity_ObjectToWorld[2].z;
    u_xlat22 = dot(u_xlat3, u_xlat2);
    u_xlat3.x = hlslcc_mtx4x4unity_ObjectToWorld[0].w;
    u_xlat3.y = hlslcc_mtx4x4unity_ObjectToWorld[1].w;
    u_xlat3.z = hlslcc_mtx4x4unity_ObjectToWorld[2].w;
    u_xlat3.w = hlslcc_mtx4x4unity_ObjectToWorld[3].w;
    u_xlat23 = dot(u_xlat3, u_xlat2);
    u_xlat3 = vec4(u_xlat15) * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat8.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVPZero[2] * vec4(u_xlat22) + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVPZero[3] * vec4(u_xlat23) + u_xlat3;
    u_xlat4 = u_xlat2.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat4 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat2.xxxx + u_xlat4;
    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat2.zzzz + u_xlat4;
    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat2;
    vs_TEXCOORD3.xyz = u_xlat2.xyz / u_xlat2.www;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat2.xz = u_xlat3.xw * vec2(0.5, 0.5);
    u_xlat8.x = u_xlat3.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat8.x * 0.5;
    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat8.xyz = in_NORMAL0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat8.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_NORMAL0.xxx + u_xlat8.xyz;
    u_xlat8.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_NORMAL0.zzz + u_xlat8.xyz;
    u_xlat2.x = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat8.xyz = u_xlat8.xyz * u_xlat2.xxx;
    u_xlat16_6.x = dot(u_xlat8.xyz, u_xlat0.xyz);
    vs_TEXCOORD1.w = u_xlat16_6.x * 0.497500002 + 0.5;
    u_xlat16_6.x = min(abs(u_xlat21), abs(u_xlat1.x));
    u_xlat16_13 = max(abs(u_xlat21), abs(u_xlat1.x));
    u_xlat16_13 = float(1.0) / u_xlat16_13;
    u_xlat16_6.x = u_xlat16_13 * u_xlat16_6.x;
    u_xlat16_13 = u_xlat16_6.x * u_xlat16_6.x;
    u_xlat0.x = u_xlat16_13 * 0.0208350997 + -0.0851330012;
    u_xlat0.x = u_xlat16_13 * u_xlat0.x + 0.180141002;
    u_xlat0.x = u_xlat16_13 * u_xlat0.x + -0.330299497;
    u_xlat0.x = u_xlat16_13 * u_xlat0.x + 0.999866009;
    u_xlat7 = u_xlat0.x * u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(abs(u_xlat21)<abs(u_xlat1.x));
#else
    u_xlatb14 = abs(u_xlat21)<abs(u_xlat1.x);
#endif
    u_xlat7 = u_xlat7 * -2.0 + 1.57079637;
    u_xlat7 = u_xlatb14 ? u_xlat7 : float(0.0);
    u_xlat0.x = u_xlat16_6.x * u_xlat0.x + u_xlat7;
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(u_xlat21<(-u_xlat21));
#else
    u_xlatb7 = u_xlat21<(-u_xlat21);
#endif
    u_xlat7 = u_xlatb7 ? -3.14159274 : float(0.0);
    u_xlat0.x = u_xlat7 + u_xlat0.x;
    u_xlat16_6.x = min(u_xlat21, u_xlat1.x);
    u_xlat16_13 = max(u_xlat21, u_xlat1.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(u_xlat16_6.x<(-u_xlat16_6.x));
#else
    u_xlatb7 = u_xlat16_6.x<(-u_xlat16_6.x);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(u_xlat16_13>=(-u_xlat16_13));
#else
    u_xlatb14 = u_xlat16_13>=(-u_xlat16_13);
#endif
    u_xlatb7 = u_xlatb14 && u_xlatb7;
    u_xlat0.x = (u_xlatb7) ? (-u_xlat0.x) : u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(0.0<(-u_xlat0.x));
#else
    u_xlatb7 = 0.0<(-u_xlat0.x);
#endif
    u_xlat16_6.x = u_xlat0.x * -0.318309903;
    u_xlat0.x = max(_FaceMapRotateOffset, 0.0);
    u_xlat14 = _FaceMapRotateOffset + 1.0;
    u_xlat14 = min(u_xlat14, 1.0);
    u_xlat14 = (-u_xlat0.x) + u_xlat14;
    u_xlat0.x = (-u_xlat0.x) + abs(u_xlat16_6.x);
    u_xlat14 = float(1.0) / u_xlat14;
    u_xlat0.x = u_xlat14 * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat14 = u_xlat0.x * -2.0 + 3.0;
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * u_xlat14;
    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);
    u_xlat0.x = min(u_xlat0.x, 0.999899983);
    u_xlat16_6.xy = in_TEXCOORD0.xy * vec2(-1.0, 1.0) + vec2(1.0, 0.0);
    vs_TEXCOORD6.xy = (bool(u_xlatb7)) ? u_xlat16_6.xy : in_TEXCOORD0.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_CharacterAmbientSensorShadowOn));
#else
    u_xlatb7 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_CharacterAmbientSensorShadowOn);
#endif
    if(u_xlatb7){
        u_xlat7 = textureLod(_CharacterAmbientSensorTex, _AmbientSensorUVs.xy, 0.0).x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb7 = !!(0.5<u_xlat7);
#else
        u_xlatb7 = 0.5<u_xlat7;
#endif
        vs_TEXCOORD4 = u_xlatb7 ? 1.0 : float(0.0);
    } else {
        vs_TEXCOORD4 = 0.0;
    //ENDIF
    }
    gl_Position = u_xlat3;
    vs_COLOR0.xyz = in_COLOR0.xyz;
    vs_TEXCOORD1.xyz = u_xlat8.xyz;
    vs_TEXCOORD2.zw = u_xlat3.zw;
    vs_TEXCOORD6.z = u_xlat0.x;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	mediump vec4 _Color;
uniform 	float _MainTexAlphaUse;
uniform 	mediump float _MainTexAlphaCutoff;
uniform 	float _UseVertexColorAO;
uniform 	mediump float _LightArea;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	float _UseCoolShadowColorOrTex;
uniform 	mediump vec3 _CoolShadowMultColor;
uniform 	float _UseShadowTransition;
uniform 	float _ShadowTransitionRange;
uniform 	float _ShadowTransitionSoftness;
uniform 	mediump vec3 _SpecularColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	float _FaceBlushStrength;
uniform 	mediump vec3 _FaceBlushColor;
uniform 	mediump float _EmissionScaler;
uniform 	mediump vec3 _EmissionColor_MHY;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _UseClipPlane;
uniform 	float _ES_CharacterAmbientLightOn;
uniform 	float _ES_CharacterAmbientBrightness;
uniform 	vec3 _ES_CharacterMainLightColor;
uniform 	vec3 _ES_CharacterAmbientLightColor;
uniform 	float _ES_CharacterMainLightRatio;
uniform 	float _ES_CharacterAmbientLightRatio;
uniform 	float _ES_CharacterColorTone;
uniform 	float _ES_CharacterPointLightWholeIntensity;
uniform 	vec4 mhy_AvatarLightDir;
uniform 	vec4 mhy_CharacterPointLightColor;
uniform 	vec4 mhy_CharacterOverrideLightDir;
uniform 	mediump vec4 _FlowMapColor01;
uniform 	mediump float _FlowScale01;
uniform 	mediump float _FlowMap01_Uspeed;
uniform 	vec4 _FlowMap01_ST;
uniform 	mediump float _FlowMap01_Vspeed;
uniform 	mediump float _Noise_Uspeed;
uniform 	vec4 _Noise_ST;
uniform 	mediump float _Noise_Vspeed;
uniform 	mediump float _NoiseFlowIntensity;
uniform 	mediump float _MaskOffset01;
uniform 	mediump float _NoiseIntensity;
uniform 	mediump float _Mask01_Power;
uniform 	mediump vec4 _FlowMapColor02;
uniform 	mediump float _FlowScale02;
uniform 	mediump float _FlowMap02_Uspeed;
uniform 	vec4 _FlowMap02_ST;
uniform 	mediump float _FlowMap02_Vspeed;
uniform 	mediump float _MaskOffset02;
uniform 	mediump float _Mask02_Power;
uniform 	mediump float _DissolveNoise_Uspeed;
uniform 	vec4 _DissovleNoise_ST;
uniform 	mediump float _DissolveNoise_Vspeed;
uniform 	mediump float _DissovleNoiseScale;
uniform 	mediump float _Dissovle;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _Noise;
uniform lowp sampler2D _FlowMap01;
uniform lowp sampler2D _Mask01;
uniform lowp sampler2D _FlowMap02;
uniform lowp sampler2D _Mask02;
uniform lowp sampler2D _DissovleNoise;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp float vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
lowp float u_xlat10_2;
bvec3 u_xlatb2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
lowp float u_xlat10_3;
int u_xlati3;
bool u_xlatb3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec2 u_xlat16_7;
mediump vec3 u_xlat16_8;
vec3 u_xlat9;
bool u_xlatb10;
vec3 u_xlat12;
mediump vec3 u_xlat16_12;
lowp float u_xlat10_12;
int u_xlati12;
bool u_xlatb12;
vec3 u_xlat13;
mediump vec3 u_xlat16_13;
mediump float u_xlat16_14;
mediump vec2 u_xlat16_15;
mediump vec2 u_xlat16_16;
bvec2 u_xlatb20;
vec2 u_xlat22;
bool u_xlatb22;
mediump vec2 u_xlat16_25;
float u_xlat30;
bool u_xlatb30;
float u_xlat32;
mediump float u_xlat16_32;
lowp float u_xlat10_32;
int u_xlati32;
bool u_xlatb32;
float u_xlat33;
mediump float u_xlat16_34;
mediump float u_xlat16_35;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseClipPlane));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseClipPlane);
#endif
    u_xlat16_1.x = vs_COLOR0.w + -0.00999999978;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(u_xlat16_1.x<0.0);
#else
    u_xlatb10 = u_xlat16_1.x<0.0;
#endif
    u_xlatb0 = u_xlatb0 && u_xlatb10;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(_DitherAlpha<0.949999988);
#else
        u_xlatb0 = _DitherAlpha<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb20.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb20.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb20.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = _DitherAlpha * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + -0.00999999978;
#ifdef UNITY_ADRENO_ES3
            u_xlatb0 = !!(u_xlat0.x<0.0);
#else
            u_xlatb0 = u_xlat0.x<0.0;
#endif
            if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(0.5<mhy_CharacterOverrideLightDir.w);
#else
    u_xlatb2.x = 0.5<mhy_CharacterOverrideLightDir.w;
#endif
    u_xlat3.x = mhy_CharacterOverrideLightDir.x;
    u_xlat3.yz = (-mhy_CharacterOverrideLightDir.yz);
    u_xlat2.xyz = (u_xlatb2.x) ? u_xlat3.xyz : mhy_AvatarLightDir.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat30) + u_xlat2.xyz;
    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
    u_xlat2.xy = dFdx(vs_TEXCOORD0.xy);
    u_xlat22.xy = dFdy(vs_TEXCOORD0.xy);
    u_xlat2.xy = u_xlat22.xy + u_xlat2.xy;
    u_xlat22.xy = (-u_xlat2.xy) * vec2(0.25, 0.25) + vs_TEXCOORD0.xy;
    u_xlat2.xy = u_xlat2.xy * vec2(0.25, 0.25) + vs_TEXCOORD0.xy;
    u_xlat2.xy = (int(gl_SampleID) != 0) ? u_xlat22.xy : u_xlat2.xy;
    u_xlat1 = textureLod(_MainTex, u_xlat2.xy, 0.0);
    u_xlatb2.xyz = equal(vec4(_MainTexAlphaUse), vec4(3.0, 1.0, 2.0, 0.0)).xyz;
    u_xlat30 = u_xlat1.w * _FaceBlushStrength;
    u_xlat3.xyz = (-u_xlat1.xyz) + _FaceBlushColor.xyz;
    u_xlat3.xyz = vec3(u_xlat30) * u_xlat3.xyz + u_xlat1.xyz;
    u_xlat16_4.xyz = (u_xlatb2.x) ? u_xlat3.xyz : u_xlat1.xyz;
    u_xlat16_34 = u_xlat1.w + (-_MainTexAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(u_xlat16_34<0.0);
#else
    u_xlatb30 = u_xlat16_34<0.0;
#endif
    u_xlatb30 = u_xlatb2.y && u_xlatb30;
    if((int(u_xlatb30) * int(0xffffffffu))!=0){discard;}
    u_xlat16_4.xyz = u_xlat16_4.xyz * _Color.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(0.00999999978<u_xlat1.w);
#else
    u_xlatb30 = 0.00999999978<u_xlat1.w;
#endif
    u_xlatb30 = u_xlatb30 && u_xlatb2.z;
    u_xlat16_34 = (u_xlatb30) ? u_xlat1.w : 0.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorAO));
#else
    u_xlatb2.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorAO);
#endif
    u_xlat16_5.x = vs_COLOR0.x * 0.5;
    u_xlat16_5.x = (u_xlatb2.x) ? u_xlat16_5.x : 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat16_5.x<0.0500000007);
#else
    u_xlatb12 = u_xlat16_5.x<0.0500000007;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(0.949999988<u_xlat16_5.x);
#else
    u_xlatb22 = 0.949999988<u_xlat16_5.x;
#endif
    u_xlat32 = u_xlat16_5.x + vs_TEXCOORD1.w;
    u_xlat32 = u_xlat32 * 0.5;
    u_xlat16_5.x = (u_xlatb22) ? 1.0 : u_xlat32;
    u_xlat16_5.x = (u_xlatb12) ? 0.0 : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb2.x) ? u_xlat16_5.x : vs_TEXCOORD1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(u_xlat16_5.x<_LightArea);
#else
    u_xlatb2.x = u_xlat16_5.x<_LightArea;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition));
#else
    u_xlatb12 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition);
#endif
    u_xlat16_5.x = (-u_xlat16_5.x) + _LightArea;
    u_xlat16_5.x = u_xlat16_5.x / _ShadowTransitionRange;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(u_xlat16_5.x>=1.0);
#else
    u_xlatb22 = u_xlat16_5.x>=1.0;
#endif
    u_xlat16_32 = u_xlat16_5.x + 0.00999999978;
    u_xlat16_32 = log2(u_xlat16_32);
    u_xlat32 = u_xlat16_32 * _ShadowTransitionSoftness;
    u_xlat32 = exp2(u_xlat32);
    u_xlat32 = min(u_xlat32, 1.0);
    u_xlat22.x = (u_xlatb22) ? 1.0 : u_xlat32;
    u_xlat22.x = (u_xlatb12) ? u_xlat22.x : 1.0;
    u_xlat22.x = u_xlatb2.x ? u_xlat22.x : float(0.0);
#ifdef UNITY_ADRENO_ES3
    { bool cond = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(vs_TEXCOORD4); u_xlati32 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati32 = int((vec4(0.0, 0.0, 0.0, 0.0)!=vec4(vs_TEXCOORD4)) ? 0xFFFFFFFFu : uint(0u));
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex));
#else
    u_xlatb3 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex);
#endif
    u_xlat16_13.xyz = vec3(_FirstShadowMultColor.xxyz.y + (-_CoolShadowMultColor.x), _FirstShadowMultColor.xxyz.z + (-_CoolShadowMultColor.y), float(_FirstShadowMultColor.z) + (-_CoolShadowMultColor.z));
    u_xlat13.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_13.xyz + _CoolShadowMultColor.xyz;
    u_xlat16_5.xyz = (bool(u_xlatb3)) ? u_xlat13.xyz : vec3(_FirstShadowMultColor.x, _FirstShadowMultColor.y, _FirstShadowMultColor.z);
    u_xlati3 = ~u_xlati32;
    u_xlati12 = u_xlatb12 ? u_xlati3 : int(0);
    u_xlat16_3.xyz = u_xlat16_5.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat3.xyz = u_xlat22.xxx * u_xlat16_3.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_5.xyz = (int(u_xlati12) != 0) ? u_xlat3.xyz : u_xlat16_5.xyz;
    u_xlat16_5.xyz = (int(u_xlati32) != 0) ? u_xlat16_5.xyz : vec3(1.0, 1.0, 1.0);
    u_xlat16_35 = dot(vs_TEXCOORD1.xyz, u_xlat0.xyz);
    u_xlat16_35 = max(u_xlat16_35, 0.00100000005);
    u_xlat16_35 = log2(u_xlat16_35);
    u_xlat16_35 = u_xlat16_35 * _Shininess;
    u_xlat16_35 = exp2(u_xlat16_35);
    u_xlat16_6.xyz = vec3(u_xlat16_35) * _SpecularColor.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(_SpecMulti);
    u_xlat16_4.xyz = vec3(u_xlat16_4.x * _EmissionColor_MHY.xxyz.y, u_xlat16_4.y * _EmissionColor_MHY.xxyz.z, u_xlat16_4.z * float(_EmissionColor_MHY.z));
    u_xlati0 = int(uint(u_xlatb2.x) * 0xffffffffu | uint(u_xlati32));
    u_xlat2.xyz = u_xlat1.xyz * u_xlat16_5.xyz;
    u_xlat0.xyz = (int(u_xlati0) != 0) ? u_xlat2.xyz : u_xlat1.xyz;
    u_xlat0.xyz = u_xlat16_6.xyz * vec3(0.5, 0.5, 0.5) + u_xlat0.xyz;
    u_xlat2.xy = vs_TEXCOORD0.zw * _FlowMap01_ST.xy + _FlowMap01_ST.zw;
    u_xlat16_5.x = _Time.y * _FlowMap01_Uspeed + u_xlat2.x;
    u_xlat16_5.y = _Time.y * _FlowMap01_Vspeed + u_xlat2.y;
    u_xlat2.xy = vs_TEXCOORD0.zw * _Noise_ST.xy + _Noise_ST.zw;
    u_xlat16_6.x = _Time.y * _Noise_Uspeed + u_xlat2.x;
    u_xlat16_6.y = _Time.y * _Noise_Vspeed + u_xlat2.y;
    u_xlat10_2 = textureLod(_Noise, u_xlat16_6.xy, 0.0).x;
    u_xlat16_25.x = _MaskOffset01 * 1.39999998 + -0.699999988;
    u_xlat16_16.x = u_xlat10_2 * _NoiseIntensity;
    u_xlat12.xy = vs_TEXCOORD0.zw * _FlowMap02_ST.xy + _FlowMap02_ST.zw;
    u_xlat16_7.x = _Time.y * _FlowMap02_Uspeed + u_xlat12.x;
    u_xlat16_7.y = _Time.y * _FlowMap02_Vspeed + u_xlat12.y;
    u_xlat16_25.y = _MaskOffset02 * 1.39999998 + -0.699999988;
    u_xlat16_8.xyz = _FlowMapColor01.xyz * vec3(_FlowScale01);
    u_xlat16_5.xy = vec2(u_xlat10_2) * vec2(vec2(_NoiseFlowIntensity, _NoiseFlowIntensity)) + u_xlat16_5.xy;
    u_xlat10_12 = textureLod(_FlowMap01, u_xlat16_5.xy, 0.0).x;
    u_xlat16_12.xyz = vec3(u_xlat10_12) * u_xlat16_8.xyz;
    u_xlat16_5.x = (-vs_TEXCOORD0.z) + 1.0;
    u_xlat16_1.xz = u_xlat16_25.xy + u_xlat16_5.xx;
    u_xlat16_1.yw = vec2(u_xlat10_2) * vec2(vec2(_NoiseIntensity, _NoiseIntensity)) + (-vs_TEXCOORD0.ww);
    u_xlat16_16.y = 1.0;
    u_xlat16_15.xy = u_xlat16_1.xy + u_xlat16_16.xy;
    u_xlat10_3 = textureLod(_Mask01, u_xlat16_15.xy, 0.0).x;
    u_xlat16_3.x = max(u_xlat10_3, 9.99999975e-05);
    u_xlat16_3.x = log2(u_xlat16_3.x);
    u_xlat16_3.x = u_xlat16_3.x * _Mask01_Power;
    u_xlat16_3.x = exp2(u_xlat16_3.x);
    u_xlat16_8.xyz = _FlowMapColor02.xyz * vec3(_FlowScale02);
    u_xlat16_15.xy = vec2(u_xlat10_2) * vec2(vec2(_NoiseFlowIntensity, _NoiseFlowIntensity)) + u_xlat16_7.xy;
    u_xlat10_2 = textureLod(_FlowMap02, u_xlat16_15.xy, 0.0).x;
    u_xlat16_13.xyz = vec3(u_xlat10_2) * u_xlat16_8.xyz;
    u_xlat16_5.xy = vec2(u_xlat16_1.z + u_xlat16_16.x, u_xlat16_1.w + u_xlat16_16.y);
    u_xlat10_2 = textureLod(_Mask02, u_xlat16_5.xy, 0.0).x;
    u_xlat16_2.x = max(u_xlat10_2, 9.99999975e-05);
    u_xlat16_2.x = log2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * _Mask02_Power;
    u_xlat16_2.x = exp2(u_xlat16_2.x);
    u_xlat16_13.xyz = u_xlat16_2.xxx * u_xlat16_13.xyz;
    u_xlat16_2.xyz = u_xlat16_12.xyz * u_xlat16_3.xxx + u_xlat16_13.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(_EmissionScaler) + u_xlat16_2.xyz;
    u_xlat3.xyz = (-u_xlat0.xyz) + u_xlat16_4.xyz;
    u_xlat3.xyz = vec3(u_xlat16_34) * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat9.xy = vs_TEXCOORD0.zw * _DissovleNoise_ST.xy + _DissovleNoise_ST.zw;
    u_xlat16_4.x = _Time.y * _DissolveNoise_Uspeed + u_xlat9.x;
    u_xlat16_4.y = _Time.y * _DissolveNoise_Vspeed + u_xlat9.y;
    u_xlat10_32 = textureLod(_DissovleNoise, u_xlat16_4.xy, 0.0).x;
    u_xlat32 = u_xlat10_32 * _DissovleNoiseScale + vs_TEXCOORD0.z;
#ifdef UNITY_ADRENO_ES3
    u_xlatb32 = !!(_Dissovle>=u_xlat32);
#else
    u_xlatb32 = _Dissovle>=u_xlat32;
#endif
    u_xlat0.xyz = (bool(u_xlatb30)) ? u_xlat3.xyz : u_xlat0.xyz;
    u_xlat0.xyz = u_xlat16_2.xyz + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(0.00999999978<u_xlat16_34);
#else
    u_xlatb30 = 0.00999999978<u_xlat16_34;
#endif
    if((int(u_xlatb32) * int(0xffffffffu))==0){discard;}
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn));
#else
    u_xlatb2.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn);
#endif
    u_xlat12.xyz = u_xlat0.xyz * vec3(vec3(_ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness));
    u_xlat3.xyz = vec3(vec3(_ES_CharacterPointLightWholeIntensity, _ES_CharacterPointLightWholeIntensity, _ES_CharacterPointLightWholeIntensity)) * mhy_CharacterPointLightColor.xyz;
    u_xlat9.xyz = _ES_CharacterMainLightColor.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat9.xyz = min(max(u_xlat9.xyz, 0.0), 1.0);
#else
    u_xlat9.xyz = clamp(u_xlat9.xyz, 0.0, 1.0);
#endif
    u_xlat33 = (-mhy_CharacterPointLightColor.w) + 1.0;
    u_xlat3.xyz = u_xlat9.xyz * vec3(u_xlat33) + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat3.xyz = vec3(vec3(_ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio)) * u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat12.xyz = u_xlat12.xyz * u_xlat3.xyz;
    u_xlat3.xyz = _ES_CharacterAmbientLightColor.xyz * vec3(_ES_CharacterAmbientLightRatio);
    u_xlat16_4.xyz = u_xlat12.xyz * vec3(10.0, 10.0, 10.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.xyz = min(max(u_xlat16_4.xyz, 0.0), 1.0);
#else
    u_xlat16_4.xyz = clamp(u_xlat16_4.xyz, 0.0, 1.0);
#endif
    u_xlat12.xyz = u_xlat3.xyz * u_xlat16_4.xyz + u_xlat12.xyz;
    u_xlat16_4.xyz = (u_xlatb2.x) ? u_xlat12.xyz : u_xlat0.xyz;
    u_xlat16_5.xyz = u_xlat0.xyz + (-u_xlat16_4.xyz);
    u_xlat16_5.xyz = vec3(u_xlat16_34) * u_xlat16_5.xyz + u_xlat16_4.xyz;
    u_xlat16_0.xyz = (bool(u_xlatb30)) ? u_xlat16_5.xyz : u_xlat16_4.xyz;
    u_xlat16_4.x = max(u_xlat16_0.z, u_xlat16_0.y);
    u_xlat16_1.w = max(u_xlat16_0.x, u_xlat16_4.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(1.0<u_xlat16_1.w);
#else
    u_xlatb2.x = 1.0<u_xlat16_1.w;
#endif
    u_xlat16_1.xyz = u_xlat16_0.xyz / u_xlat16_1.www;
    u_xlat16_0.w = 1.0;
    u_xlat16_0 = (u_xlatb2.x) ? u_xlat16_1 : u_xlat16_0;
    u_xlat16_4.x = min(u_xlat16_0.w, 1.10000002);
    u_xlat16_14 = u_xlat16_0.w + (-u_xlat16_4.x);
    u_xlat16_4.x = u_xlat16_34 * u_xlat16_14 + u_xlat16_4.x;
    u_xlat16_2.x = u_xlat16_4.x * 0.0500000007;
    SV_Target0.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb12 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_4.x = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb12) ? u_xlat16_4.x : 0.0;
    SV_Target0.w = 0.0156862754;
    SV_Target1.xyz = u_xlat16_0.xyz;
    SV_Target1.w = u_xlat16_2.x;
    SV_Target2.xy = vec2(0.0, 0.0);
    SV_Target2.w = vs_TEXCOORD4;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "MSAA_INTERPOLATION" "TOON_SPECULAR_ON" "TOON_LIGHTMAP_ON" "FACE_MAP_NEW_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	vec4 _MainTex_ST;
uniform 	float _FaceMapRotateOffset;
uniform 	float _CharacterAmbientSensorShadowOn;
uniform 	vec4 _AmbientSensorUVs;
uniform 	float _UseClipPlane;
uniform 	float _ClipPlaneWorld;
uniform 	vec4 _ClipPlane;
uniform 	vec4 mhy_AvatarLightDir;
uniform 	vec4 mhy_CharacterOverrideLightDir;
uniform lowp sampler2D _CharacterAmbientSensorTex;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp float vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD6;
vec3 u_xlat0;
bool u_xlatb0;
vec3 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
bool u_xlatb3;
vec4 u_xlat4;
vec4 u_xlat5;
mediump vec2 u_xlat16_6;
float u_xlat7;
bool u_xlatb7;
vec3 u_xlat8;
bvec2 u_xlatb8;
bool u_xlatb9;
mediump float u_xlat16_13;
float u_xlat14;
bool u_xlatb14;
float u_xlat15;
float u_xlat21;
float u_xlat22;
bool u_xlatb22;
float u_xlat23;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.5<mhy_CharacterOverrideLightDir.w);
#else
    u_xlatb0 = 0.5<mhy_CharacterOverrideLightDir.w;
#endif
    u_xlat1.x = mhy_CharacterOverrideLightDir.x;
    u_xlat1.yz = (-mhy_CharacterOverrideLightDir.yz);
    u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat1.xyz : mhy_AvatarLightDir.xyz;
    u_xlat21 = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_ObjectToWorld[1].xyz);
    u_xlat1.x = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_ObjectToWorld[2].xyz);
    u_xlatb8.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseClipPlane, _ClipPlaneWorld, _UseClipPlane, _UseClipPlane)).xy;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(abs(_ClipPlane.w)<0.00100000005);
#else
    u_xlatb22 = abs(_ClipPlane.w)<0.00100000005;
#endif
    u_xlat2.xyz = _ClipPlane.www * _ClipPlane.xyz;
    u_xlat2.xyz = (bool(u_xlatb22)) ? vec3(0.0, 0.0, 0.0) : u_xlat2.xyz;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_WorldToObject[1];
    u_xlat3 = hlslcc_mtx4x4unity_WorldToObject[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat2 = hlslcc_mtx4x4unity_WorldToObject[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat2 = u_xlat2 + hlslcc_mtx4x4unity_WorldToObject[3];
    u_xlat2.xyz = u_xlat2.xyz / u_xlat2.www;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * _ClipPlane.yyy;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _ClipPlane.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _ClipPlane.zzz + u_xlat3.xyz;
    u_xlat22 = dot(u_xlat2.xyz, u_xlat3.xyz);
    u_xlat2.x = dot(in_POSITION0.xyz, u_xlat3.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(u_xlat2.x<u_xlat22);
#else
    u_xlatb9 = u_xlat2.x<u_xlat22;
#endif
    u_xlat22 = (-u_xlat22) + u_xlat2.x;
    u_xlat3.xyz = (-vec3(u_xlat22)) * u_xlat3.xyz + in_POSITION0.xyz;
    u_xlat3.w = 0.0;
    u_xlat4.xyz = in_POSITION0.xyz;
    u_xlat4.w = in_COLOR0.w;
    u_xlat2 = (bool(u_xlatb9)) ? u_xlat3 : u_xlat4;
    u_xlat22 = dot(in_POSITION0.xyz, _ClipPlane.xyz);
    u_xlat3.x = _ClipPlane.w + -0.00999999978;
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(u_xlat22<u_xlat3.x);
#else
    u_xlatb3 = u_xlat22<u_xlat3.x;
#endif
    u_xlat22 = u_xlat22 + (-_ClipPlane.w);
    u_xlat5.xyz = (-vec3(u_xlat22)) * _ClipPlane.xyz + in_POSITION0.xyz;
    u_xlat5.w = 0.0;
    u_xlat3 = (bool(u_xlatb3)) ? u_xlat5 : u_xlat4;
    u_xlat2.xyz = (u_xlatb8.y) ? u_xlat2.xyz : u_xlat3.xyz;
    u_xlat16_6.x = (u_xlatb8.y) ? u_xlat2.w : u_xlat3.w;
    u_xlat2.xyz = (u_xlatb8.x) ? u_xlat2.xyz : in_POSITION0.xyz;
    vs_COLOR0.w = (u_xlatb8.x) ? u_xlat16_6.x : in_COLOR0.w;
    u_xlat3.xyw = (-_WorldSpaceCameraPos.xyz) + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat4.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;
    u_xlat4.y = hlslcc_mtx4x4unity_ObjectToWorld[1].x;
    u_xlat4.z = hlslcc_mtx4x4unity_ObjectToWorld[2].x;
    u_xlat4.w = u_xlat3.x;
    u_xlat2.w = 1.0;
    u_xlat8.x = dot(u_xlat4, u_xlat2);
    u_xlat4.x = hlslcc_mtx4x4unity_ObjectToWorld[0].y;
    u_xlat4.y = hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat4.z = hlslcc_mtx4x4unity_ObjectToWorld[2].y;
    u_xlat4.w = u_xlat3.y;
    u_xlat15 = dot(u_xlat4, u_xlat2);
    u_xlat3.x = hlslcc_mtx4x4unity_ObjectToWorld[0].z;
    u_xlat3.y = hlslcc_mtx4x4unity_ObjectToWorld[1].z;
    u_xlat3.z = hlslcc_mtx4x4unity_ObjectToWorld[2].z;
    u_xlat22 = dot(u_xlat3, u_xlat2);
    u_xlat3.x = hlslcc_mtx4x4unity_ObjectToWorld[0].w;
    u_xlat3.y = hlslcc_mtx4x4unity_ObjectToWorld[1].w;
    u_xlat3.z = hlslcc_mtx4x4unity_ObjectToWorld[2].w;
    u_xlat3.w = hlslcc_mtx4x4unity_ObjectToWorld[3].w;
    u_xlat23 = dot(u_xlat3, u_xlat2);
    u_xlat3 = vec4(u_xlat15) * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat8.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVPZero[2] * vec4(u_xlat22) + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVPZero[3] * vec4(u_xlat23) + u_xlat3;
    u_xlat4 = u_xlat2.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat4 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat2.xxxx + u_xlat4;
    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat2.zzzz + u_xlat4;
    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat2;
    vs_TEXCOORD3.xyz = u_xlat2.xyz / u_xlat2.www;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat2.xz = u_xlat3.xw * vec2(0.5, 0.5);
    u_xlat8.x = u_xlat3.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat8.x * 0.5;
    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat8.xyz = in_NORMAL0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat8.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_NORMAL0.xxx + u_xlat8.xyz;
    u_xlat8.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_NORMAL0.zzz + u_xlat8.xyz;
    u_xlat2.x = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat8.xyz = u_xlat8.xyz * u_xlat2.xxx;
    u_xlat16_6.x = dot(u_xlat8.xyz, u_xlat0.xyz);
    vs_TEXCOORD1.w = u_xlat16_6.x * 0.497500002 + 0.5;
    u_xlat16_6.x = min(abs(u_xlat21), abs(u_xlat1.x));
    u_xlat16_13 = max(abs(u_xlat21), abs(u_xlat1.x));
    u_xlat16_13 = float(1.0) / u_xlat16_13;
    u_xlat16_6.x = u_xlat16_13 * u_xlat16_6.x;
    u_xlat16_13 = u_xlat16_6.x * u_xlat16_6.x;
    u_xlat0.x = u_xlat16_13 * 0.0208350997 + -0.0851330012;
    u_xlat0.x = u_xlat16_13 * u_xlat0.x + 0.180141002;
    u_xlat0.x = u_xlat16_13 * u_xlat0.x + -0.330299497;
    u_xlat0.x = u_xlat16_13 * u_xlat0.x + 0.999866009;
    u_xlat7 = u_xlat0.x * u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(abs(u_xlat21)<abs(u_xlat1.x));
#else
    u_xlatb14 = abs(u_xlat21)<abs(u_xlat1.x);
#endif
    u_xlat7 = u_xlat7 * -2.0 + 1.57079637;
    u_xlat7 = u_xlatb14 ? u_xlat7 : float(0.0);
    u_xlat0.x = u_xlat16_6.x * u_xlat0.x + u_xlat7;
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(u_xlat21<(-u_xlat21));
#else
    u_xlatb7 = u_xlat21<(-u_xlat21);
#endif
    u_xlat7 = u_xlatb7 ? -3.14159274 : float(0.0);
    u_xlat0.x = u_xlat7 + u_xlat0.x;
    u_xlat16_6.x = min(u_xlat21, u_xlat1.x);
    u_xlat16_13 = max(u_xlat21, u_xlat1.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(u_xlat16_6.x<(-u_xlat16_6.x));
#else
    u_xlatb7 = u_xlat16_6.x<(-u_xlat16_6.x);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(u_xlat16_13>=(-u_xlat16_13));
#else
    u_xlatb14 = u_xlat16_13>=(-u_xlat16_13);
#endif
    u_xlatb7 = u_xlatb14 && u_xlatb7;
    u_xlat0.x = (u_xlatb7) ? (-u_xlat0.x) : u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(0.0<(-u_xlat0.x));
#else
    u_xlatb7 = 0.0<(-u_xlat0.x);
#endif
    u_xlat16_6.x = u_xlat0.x * -0.318309903;
    u_xlat0.x = max(_FaceMapRotateOffset, 0.0);
    u_xlat14 = _FaceMapRotateOffset + 1.0;
    u_xlat14 = min(u_xlat14, 1.0);
    u_xlat14 = (-u_xlat0.x) + u_xlat14;
    u_xlat0.x = (-u_xlat0.x) + abs(u_xlat16_6.x);
    u_xlat14 = float(1.0) / u_xlat14;
    u_xlat0.x = u_xlat14 * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat14 = u_xlat0.x * -2.0 + 3.0;
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * u_xlat14;
    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);
    u_xlat0.x = min(u_xlat0.x, 0.999899983);
    u_xlat16_6.xy = in_TEXCOORD0.xy * vec2(-1.0, 1.0) + vec2(1.0, 0.0);
    vs_TEXCOORD6.xy = (bool(u_xlatb7)) ? u_xlat16_6.xy : in_TEXCOORD0.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_CharacterAmbientSensorShadowOn));
#else
    u_xlatb7 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_CharacterAmbientSensorShadowOn);
#endif
    if(u_xlatb7){
        u_xlat7 = textureLod(_CharacterAmbientSensorTex, _AmbientSensorUVs.xy, 0.0).x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb7 = !!(0.5<u_xlat7);
#else
        u_xlatb7 = 0.5<u_xlat7;
#endif
        vs_TEXCOORD4 = u_xlatb7 ? 1.0 : float(0.0);
    } else {
        vs_TEXCOORD4 = 0.0;
    //ENDIF
    }
    gl_Position = u_xlat3;
    vs_COLOR0.xyz = in_COLOR0.xyz;
    vs_TEXCOORD1.xyz = u_xlat8.xyz;
    vs_TEXCOORD2.zw = u_xlat3.zw;
    vs_TEXCOORD6.z = u_xlat0.x;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	mediump vec4 _Color;
uniform 	float _MainTexAlphaUse;
uniform 	mediump float _MainTexAlphaCutoff;
uniform 	float _UseLightMapColorAO;
uniform 	float _UseVertexColorAO;
uniform 	mediump float _LightArea;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	float _UseCoolShadowColorOrTex;
uniform 	mediump vec3 _CoolShadowMultColor;
uniform 	float _UseShadowTransition;
uniform 	float _ShadowTransitionRange;
uniform 	float _ShadowTransitionSoftness;
uniform 	mediump vec3 _SpecularColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	float _FaceBlushStrength;
uniform 	mediump vec3 _FaceBlushColor;
uniform 	float _FaceMapSoftness;
uniform 	mediump float _EmissionScaler;
uniform 	mediump vec3 _EmissionColor_MHY;
uniform 	float _UseMaterial2;
uniform 	mediump vec3 _Color2;
uniform 	mediump vec3 _FirstShadowMultColor2;
uniform 	mediump vec3 _CoolShadowMultColor2;
uniform 	mediump float _Shininess2;
uniform 	mediump float _SpecMulti2;
uniform 	float _ShadowTransitionRange2;
uniform 	float _ShadowTransitionSoftness2;
uniform 	float _UseMaterial3;
uniform 	mediump vec3 _Color3;
uniform 	mediump vec3 _FirstShadowMultColor3;
uniform 	mediump vec3 _CoolShadowMultColor3;
uniform 	mediump float _Shininess3;
uniform 	mediump float _SpecMulti3;
uniform 	float _ShadowTransitionRange3;
uniform 	float _ShadowTransitionSoftness3;
uniform 	float _UseMaterial4;
uniform 	mediump vec3 _Color4;
uniform 	mediump vec3 _FirstShadowMultColor4;
uniform 	mediump vec3 _CoolShadowMultColor4;
uniform 	mediump float _Shininess4;
uniform 	mediump float _SpecMulti4;
uniform 	float _ShadowTransitionRange4;
uniform 	float _ShadowTransitionSoftness4;
uniform 	float _UseMaterial5;
uniform 	mediump vec3 _Color5;
uniform 	mediump vec3 _FirstShadowMultColor5;
uniform 	mediump vec3 _CoolShadowMultColor5;
uniform 	mediump float _Shininess5;
uniform 	mediump float _SpecMulti5;
uniform 	float _ShadowTransitionRange5;
uniform 	float _ShadowTransitionSoftness5;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _UseClipPlane;
uniform 	float _ES_CharacterAmbientLightOn;
uniform 	float _ES_CharacterAmbientBrightness;
uniform 	vec3 _ES_CharacterMainLightColor;
uniform 	vec3 _ES_CharacterAmbientLightColor;
uniform 	float _ES_CharacterMainLightRatio;
uniform 	float _ES_CharacterAmbientLightRatio;
uniform 	float _ES_CharacterColorTone;
uniform 	float _ES_CharacterPointLightWholeIntensity;
uniform 	vec4 mhy_AvatarLightDir;
uniform 	vec4 mhy_CharacterPointLightColor;
uniform 	vec4 mhy_CharacterOverrideLightDir;
uniform 	mediump vec4 _FlowMapColor01;
uniform 	mediump float _FlowScale01;
uniform 	mediump float _FlowMap01_Uspeed;
uniform 	vec4 _FlowMap01_ST;
uniform 	mediump float _FlowMap01_Vspeed;
uniform 	mediump float _Noise_Uspeed;
uniform 	vec4 _Noise_ST;
uniform 	mediump float _Noise_Vspeed;
uniform 	mediump float _NoiseFlowIntensity;
uniform 	mediump float _MaskOffset01;
uniform 	mediump float _NoiseIntensity;
uniform 	mediump float _Mask01_Power;
uniform 	mediump vec4 _FlowMapColor02;
uniform 	mediump float _FlowScale02;
uniform 	mediump float _FlowMap02_Uspeed;
uniform 	vec4 _FlowMap02_ST;
uniform 	mediump float _FlowMap02_Vspeed;
uniform 	mediump float _MaskOffset02;
uniform 	mediump float _Mask02_Power;
uniform 	mediump float _DissolveNoise_Uspeed;
uniform 	vec4 _DissovleNoise_ST;
uniform 	mediump float _DissolveNoise_Vspeed;
uniform 	mediump float _DissovleNoiseScale;
uniform 	mediump float _Dissovle;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _FaceMapTex;
uniform lowp sampler2D _Noise;
uniform lowp sampler2D _FlowMap01;
uniform lowp sampler2D _Mask01;
uniform lowp sampler2D _FlowMap02;
uniform lowp sampler2D _Mask02;
uniform lowp sampler2D _DissovleNoise;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp float vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
vec3 u_xlat2;
mediump vec4 u_xlat16_2;
lowp vec4 u_xlat10_2;
bool u_xlatb2;
vec3 u_xlat3;
mediump float u_xlat16_3;
lowp float u_xlat10_3;
bvec3 u_xlatb3;
vec3 u_xlat4;
bvec4 u_xlatb4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
mediump vec3 u_xlat16_6;
bvec3 u_xlatb6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
vec3 u_xlat11;
bool u_xlatb11;
vec3 u_xlat13;
bool u_xlatb13;
float u_xlat14;
mediump vec3 u_xlat16_14;
bool u_xlatb14;
mediump float u_xlat16_16;
mediump vec3 u_xlat16_18;
mediump vec3 u_xlat16_19;
bvec2 u_xlatb22;
vec2 u_xlat24;
mediump float u_xlat16_25;
int u_xlati25;
mediump float u_xlat16_30;
float u_xlat33;
mediump float u_xlat16_33;
lowp float u_xlat10_33;
bool u_xlatb33;
mediump float u_xlat16_35;
lowp float u_xlat10_35;
float u_xlat36;
int u_xlati36;
bool u_xlatb36;
float u_xlat37;
mediump float u_xlat16_37;
int u_xlati37;
mediump float u_xlat16_38;
mediump float u_xlat16_40;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseClipPlane));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseClipPlane);
#endif
    u_xlat16_1.x = vs_COLOR0.w + -0.00999999978;
#ifdef UNITY_ADRENO_ES3
    u_xlatb11 = !!(u_xlat16_1.x<0.0);
#else
    u_xlatb11 = u_xlat16_1.x<0.0;
#endif
    u_xlatb0 = u_xlatb0 && u_xlatb11;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(_DitherAlpha<0.949999988);
#else
        u_xlatb0 = _DitherAlpha<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb22.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb22.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb22.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = _DitherAlpha * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + -0.00999999978;
#ifdef UNITY_ADRENO_ES3
            u_xlatb0 = !!(u_xlat0.x<0.0);
#else
            u_xlatb0 = u_xlat0.x<0.0;
#endif
            if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(0.5<mhy_CharacterOverrideLightDir.w);
#else
    u_xlatb2 = 0.5<mhy_CharacterOverrideLightDir.w;
#endif
    u_xlat3.x = mhy_CharacterOverrideLightDir.x;
    u_xlat3.yz = (-mhy_CharacterOverrideLightDir.yz);
    u_xlat2.xyz = (bool(u_xlatb2)) ? u_xlat3.xyz : mhy_AvatarLightDir.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat33) + u_xlat2.xyz;
    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat0.xyz = vec3(u_xlat33) * u_xlat0.xyz;
    u_xlat2.xy = dFdx(vs_TEXCOORD0.xy);
    u_xlat24.xy = dFdy(vs_TEXCOORD0.xy);
    u_xlat2.xy = u_xlat24.xy + u_xlat2.xy;
    u_xlat24.xy = (-u_xlat2.xy) * vec2(0.25, 0.25) + vs_TEXCOORD0.xy;
    u_xlat2.xy = u_xlat2.xy * vec2(0.25, 0.25) + vs_TEXCOORD0.xy;
    u_xlat2.xy = (int(gl_SampleID) != 0) ? u_xlat24.xy : u_xlat2.xy;
    u_xlat1 = textureLod(_MainTex, u_xlat2.xy, 0.0);
    u_xlatb3.xyz = equal(vec4(_MainTexAlphaUse), vec4(3.0, 1.0, 2.0, 0.0)).xyz;
    u_xlat33 = u_xlat1.w * _FaceBlushStrength;
    u_xlat4.xyz = (-u_xlat1.xyz) + _FaceBlushColor.xyz;
    u_xlat4.xyz = vec3(u_xlat33) * u_xlat4.xyz + u_xlat1.xyz;
    u_xlat16_5.xyz = (u_xlatb3.x) ? u_xlat4.xyz : u_xlat1.xyz;
    u_xlat16_38 = u_xlat1.w + (-_MainTexAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(u_xlat16_38<0.0);
#else
    u_xlatb33 = u_xlat16_38<0.0;
#endif
    u_xlatb33 = u_xlatb3.y && u_xlatb33;
    if((int(u_xlatb33) * int(0xffffffffu))!=0){discard;}
    u_xlat10_2 = textureLod(_LightMapTex, u_xlat2.xy, 0.0);
    u_xlatb3.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseLightMapColorAO, _UseVertexColorAO, _UseLightMapColorAO, _UseLightMapColorAO)).xy;
    u_xlat16_38 = (u_xlatb3.x) ? u_xlat10_2.y : 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseMaterial2));
#else
    u_xlatb33 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseMaterial2);
#endif
    u_xlatb4 = greaterThanEqual(u_xlat10_2.wwww, vec4(0.800000012, 0.400000006, 0.200000003, 0.600000024));
    u_xlatb33 = u_xlatb33 && u_xlatb4.x;
    u_xlat33 = (u_xlatb33) ? 2.0 : 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb13 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseMaterial3));
#else
    u_xlatb13 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseMaterial3);
#endif
    u_xlatb13 = u_xlatb4.y && u_xlatb13;
    u_xlatb6.xyz = lessThan(u_xlat10_2.wwww, vec4(0.600000024, 0.400000006, 0.800000012, 0.0)).xyz;
    u_xlatb13 = u_xlatb13 && u_xlatb6.x;
    u_xlat33 = (u_xlatb13) ? 3.0 : u_xlat33;
#ifdef UNITY_ADRENO_ES3
    u_xlatb13 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseMaterial4));
#else
    u_xlatb13 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseMaterial4);
#endif
    u_xlatb13 = u_xlatb4.z && u_xlatb13;
    u_xlatb13 = u_xlatb6.y && u_xlatb13;
    u_xlat33 = (u_xlatb13) ? 4.0 : u_xlat33;
#ifdef UNITY_ADRENO_ES3
    u_xlatb13 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseMaterial5));
#else
    u_xlatb13 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseMaterial5);
#endif
    u_xlatb13 = u_xlatb4.w && u_xlatb13;
    u_xlatb13 = u_xlatb6.z && u_xlatb13;
    u_xlat33 = (u_xlatb13) ? 5.0 : u_xlat33;
    u_xlatb4 = equal(vec4(u_xlat33), vec4(2.0, 3.0, 4.0, 5.0));
    u_xlat16_7.xyz = (u_xlatb4.x) ? _Color2.xyz : _Color.xyz;
    u_xlat16_7.xyz = (u_xlatb4.y) ? _Color3.xyz : u_xlat16_7.xyz;
    u_xlat16_7.xyz = (u_xlatb4.z) ? _Color4.xyz : u_xlat16_7.xyz;
    u_xlat16_7.xyz = (u_xlatb4.w) ? _Color5.xyz : u_xlat16_7.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_7.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb13 = !!(0.00999999978<u_xlat1.w);
#else
    u_xlatb13 = 0.00999999978<u_xlat1.w;
#endif
    u_xlatb13 = u_xlatb13 && u_xlatb3.z;
    u_xlat16_7.x = (u_xlatb13) ? u_xlat1.w : 0.0;
    u_xlat10_35 = texture(_FaceMapTex, vs_TEXCOORD6.xy, -1.0).w;
    u_xlat3.x = max(_FaceMapSoftness, 9.99999997e-07);
    u_xlat16_18.x = (-u_xlat3.x) + vs_TEXCOORD6.z;
    u_xlat16_25 = max(u_xlat16_18.x, 9.99999975e-05);
    u_xlat16_25 = min(u_xlat16_25, 0.998899996);
    u_xlat16_18.x = u_xlat3.x + vs_TEXCOORD6.z;
    u_xlat16_3 = min(u_xlat16_18.x, 0.999899983);
    u_xlat16_3 = (-u_xlat16_25) + u_xlat16_3;
    u_xlat16_35 = u_xlat10_35 + (-u_xlat16_25);
    u_xlat16_3 = float(1.0) / u_xlat16_3;
    u_xlat16_35 = u_xlat16_35 * u_xlat16_3;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_35 = min(max(u_xlat16_35, 0.0), 1.0);
#else
    u_xlat16_35 = clamp(u_xlat16_35, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat16_35 * -2.0 + 3.0;
    u_xlat16_35 = u_xlat16_35 * u_xlat16_35;
    u_xlat16_25 = u_xlat16_35 * u_xlat16_3;
    u_xlat16_18.x = u_xlat16_38 * vs_COLOR0.x;
    u_xlat16_38 = (u_xlatb3.y) ? u_xlat16_18.x : u_xlat16_38;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(u_xlat16_38<0.0500000007);
#else
    u_xlatb14 = u_xlat16_38<0.0500000007;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb36 = !!(0.949999988<u_xlat16_38);
#else
    u_xlatb36 = 0.949999988<u_xlat16_38;
#endif
    u_xlat6.x = u_xlat16_38 + vs_TEXCOORD1.w;
    u_xlat6.x = u_xlat6.x * 0.5;
    u_xlat16_38 = (u_xlatb36) ? 1.0 : u_xlat6.x;
    u_xlat16_38 = (u_xlatb14) ? 0.0 : u_xlat16_38;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(u_xlat16_38<_LightArea);
#else
    u_xlatb14 = u_xlat16_38<_LightArea;
#endif
    if(u_xlatb14){
#ifdef UNITY_ADRENO_ES3
        u_xlatb14 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition));
#else
        u_xlatb14 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition);
#endif
#ifdef UNITY_ADRENO_ES3
        u_xlatb36 = !!(u_xlat33==1.0);
#else
        u_xlatb36 = u_xlat33==1.0;
#endif
        u_xlat16_8.x = (u_xlatb36) ? _ShadowTransitionRange : 0.0;
        u_xlat16_8.y = (u_xlatb36) ? _ShadowTransitionSoftness : 0.0;
        u_xlat16_18.xy = (u_xlatb4.x) ? vec2(_ShadowTransitionRange2, _ShadowTransitionSoftness2) : u_xlat16_8.xy;
        u_xlat16_18.xy = (u_xlatb4.y) ? vec2(_ShadowTransitionRange3, _ShadowTransitionSoftness3) : u_xlat16_18.xy;
        u_xlat16_18.xy = (u_xlatb4.z) ? vec2(_ShadowTransitionRange4, _ShadowTransitionSoftness4) : u_xlat16_18.xy;
        u_xlat16_18.xy = (u_xlatb4.w) ? vec2(_ShadowTransitionRange5, _ShadowTransitionSoftness5) : u_xlat16_18.xy;
        u_xlat16_38 = (-u_xlat16_38) + _LightArea;
        u_xlat16_38 = u_xlat16_38 / u_xlat16_18.x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb36 = !!(u_xlat16_38>=1.0);
#else
        u_xlatb36 = u_xlat16_38>=1.0;
#endif
        u_xlat16_37 = u_xlat16_38 + 0.00999999978;
        u_xlat16_37 = log2(u_xlat16_37);
        u_xlat16_37 = u_xlat16_37 * u_xlat16_18.y;
        u_xlat16_37 = exp2(u_xlat16_37);
        u_xlat37 = min(u_xlat16_37, 1.0);
        u_xlat36 = (u_xlatb36) ? 1.0 : u_xlat37;
        u_xlat14 = (u_xlatb14) ? u_xlat36 : 1.0;
        u_xlat16_38 = 0.0;
    } else {
        u_xlat14 = 0.0;
        u_xlat16_38 = 1.0;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb36 = !!(0.5<u_xlat10_2.x);
#else
    u_xlatb36 = 0.5<u_xlat10_2.x;
#endif
    u_xlat16_18.x = min(u_xlat16_25, u_xlat16_38);
    u_xlat16_38 = (u_xlatb36) ? u_xlat16_18.x : u_xlat16_38;
    u_xlat16_38 = (-u_xlat16_38) + 1.0;
#ifdef UNITY_ADRENO_ES3
    { bool cond = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(vs_TEXCOORD4); u_xlati25 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati25 = int((vec4(0.0, 0.0, 0.0, 0.0)!=vec4(vs_TEXCOORD4)) ? 0xFFFFFFFFu : uint(0u));
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(u_xlat33==1.0);
#else
    u_xlatb33 = u_xlat33==1.0;
#endif
    if(u_xlatb33){
#ifdef UNITY_ADRENO_ES3
        u_xlatb36 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex));
#else
        u_xlatb36 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex);
#endif
        u_xlat16_6.xyz = vec3(_FirstShadowMultColor.xxyz.y + (-_CoolShadowMultColor.x), _FirstShadowMultColor.xxyz.z + (-_CoolShadowMultColor.y), float(_FirstShadowMultColor.z) + (-_CoolShadowMultColor.z));
        u_xlat6.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_6.xyz + _CoolShadowMultColor.xyz;
        u_xlat16_18.xyz = (bool(u_xlatb36)) ? u_xlat6.xyz : vec3(_FirstShadowMultColor.x, _FirstShadowMultColor.y, _FirstShadowMultColor.z);
    } else {
        if(u_xlatb4.x){
#ifdef UNITY_ADRENO_ES3
            u_xlatb36 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex));
#else
            u_xlatb36 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex);
#endif
            u_xlat16_6.xyz = _FirstShadowMultColor2.xyz + (-_CoolShadowMultColor2.xyz);
            u_xlat6.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_6.xyz + _CoolShadowMultColor2.xyz;
            u_xlat16_18.xyz = (bool(u_xlatb36)) ? u_xlat6.xyz : _FirstShadowMultColor2.xyz;
        } else {
#ifdef UNITY_ADRENO_ES3
            u_xlatb36 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex));
#else
            u_xlatb36 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex);
#endif
            u_xlat16_6.xyz = _FirstShadowMultColor3.xyz + (-_CoolShadowMultColor3.xyz);
            u_xlat6.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_6.xyz + _CoolShadowMultColor3.xyz;
            u_xlat16_8.xyz = (bool(u_xlatb36)) ? u_xlat6.xyz : _FirstShadowMultColor3.xyz;
            u_xlat16_6.xyz = _FirstShadowMultColor4.xyz + (-_CoolShadowMultColor4.xyz);
            u_xlat6.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_6.xyz + _CoolShadowMultColor4.xyz;
            u_xlat16_9.xyz = (bool(u_xlatb36)) ? u_xlat6.xyz : _FirstShadowMultColor4.xyz;
            u_xlat16_6.xyz = _FirstShadowMultColor5.xyz + (-_CoolShadowMultColor5.xyz);
            u_xlat6.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_6.xyz + _CoolShadowMultColor5.xyz;
            u_xlat16_10.xyz = (bool(u_xlatb36)) ? u_xlat6.xyz : _FirstShadowMultColor5.xyz;
            u_xlat16_9.xyz = (u_xlatb4.z) ? u_xlat16_9.xyz : u_xlat16_10.xyz;
            u_xlat16_18.xyz = (u_xlatb4.y) ? u_xlat16_8.xyz : u_xlat16_9.xyz;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb36 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition));
#else
    u_xlatb36 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition);
#endif
    u_xlati37 = ~u_xlati25;
    u_xlati36 = u_xlatb36 ? u_xlati37 : int(0);
    u_xlat16_6.xyz = u_xlat16_18.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat6.xyz = vec3(u_xlat14) * u_xlat16_6.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_18.xyz = (int(u_xlati36) != 0) ? u_xlat6.xyz : u_xlat16_18.xyz;
    u_xlat16_8.x = (-u_xlat16_3) * u_xlat16_35 + 1.0;
    u_xlat16_19.xyz = u_xlat16_18.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat16_8.xyz = u_xlat16_8.xxx * u_xlat16_19.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_18.xyz = (int(u_xlati25) != 0) ? u_xlat16_18.xyz : u_xlat16_8.xyz;
    u_xlat16_8.x = (u_xlatb4.z) ? _Shininess4 : _Shininess5;
    u_xlat16_19.x = (u_xlatb4.z) ? _SpecMulti4 : _SpecMulti5;
    u_xlat16_8.x = (u_xlatb4.y) ? _Shininess3 : u_xlat16_8.x;
    u_xlat16_19.x = (u_xlatb4.y) ? _SpecMulti3 : u_xlat16_19.x;
    u_xlat16_8.x = (u_xlatb4.x) ? _Shininess2 : u_xlat16_8.x;
    u_xlat16_19.x = (u_xlatb4.x) ? _SpecMulti2 : u_xlat16_19.x;
    u_xlat16_8.x = (u_xlatb33) ? _Shininess : u_xlat16_8.x;
    u_xlat16_19.x = (u_xlatb33) ? _SpecMulti : u_xlat16_19.x;
    u_xlat16_30 = dot(vs_TEXCOORD1.xyz, u_xlat0.xyz);
    u_xlat16_30 = max(u_xlat16_30, 0.00100000005);
    u_xlat16_30 = log2(u_xlat16_30);
    u_xlat16_8.x = u_xlat16_30 * u_xlat16_8.x;
    u_xlat16_8.x = exp2(u_xlat16_8.x);
    u_xlat0.x = (-u_xlat10_2.z) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat0.x<u_xlat16_8.x);
#else
    u_xlatb0 = u_xlat0.x<u_xlat16_8.x;
#endif
    u_xlat16_8.xyz = u_xlat16_19.xxx * _SpecularColor.xyz;
    u_xlat16_8.xyz = u_xlat10_2.xxx * u_xlat16_8.xyz;
    u_xlat16_8.xyz = (bool(u_xlatb0)) ? u_xlat16_8.xyz : vec3(0.0, 0.0, 0.0);
    u_xlat16_5.xyz = vec3(u_xlat16_5.x * _EmissionColor_MHY.xxyz.y, u_xlat16_5.y * _EmissionColor_MHY.xxyz.z, u_xlat16_5.z * float(_EmissionColor_MHY.z));
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat16_38==1.0);
#else
    u_xlatb0 = u_xlat16_38==1.0;
#endif
    u_xlati0 = int(uint(u_xlatb0) * 0xffffffffu | uint(u_xlati25));
    u_xlat11.xyz = u_xlat1.xyz * u_xlat16_18.xyz;
    u_xlat0.xyz = (int(u_xlati0) != 0) ? u_xlat11.xyz : u_xlat1.xyz;
    u_xlat0.xyz = u_xlat16_8.xyz + u_xlat0.xyz;
    u_xlat2.xz = vs_TEXCOORD0.zw * _FlowMap01_ST.xy + _FlowMap01_ST.zw;
    u_xlat16_8.x = _Time.y * _FlowMap01_Uspeed + u_xlat2.x;
    u_xlat16_8.y = _Time.y * _FlowMap01_Vspeed + u_xlat2.z;
    u_xlat2.xz = vs_TEXCOORD0.zw * _Noise_ST.xy + _Noise_ST.zw;
    u_xlat16_9.x = _Time.y * _Noise_Uspeed + u_xlat2.x;
    u_xlat16_9.y = _Time.y * _Noise_Vspeed + u_xlat2.z;
    u_xlat10_33 = textureLod(_Noise, u_xlat16_9.xy, 0.0).x;
    u_xlat16_38 = _MaskOffset01 * 1.39999998 + -0.699999988;
    u_xlat16_18.x = u_xlat10_33 * _NoiseIntensity;
    u_xlat2.xz = vs_TEXCOORD0.zw * _FlowMap02_ST.xy + _FlowMap02_ST.zw;
    u_xlat16_9.x = _Time.y * _FlowMap02_Uspeed + u_xlat2.x;
    u_xlat16_9.y = _Time.y * _FlowMap02_Vspeed + u_xlat2.z;
    u_xlat16_40 = _MaskOffset02 * 1.39999998 + -0.699999988;
    u_xlat16_10.xyz = _FlowMapColor01.xyz * vec3(_FlowScale01);
    u_xlat16_8.xy = vec2(u_xlat10_33) * vec2(vec2(_NoiseFlowIntensity, _NoiseFlowIntensity)) + u_xlat16_8.xy;
    u_xlat10_2.x = textureLod(_FlowMap01, u_xlat16_8.xy, 0.0).x;
    u_xlat16_2.xzw = u_xlat10_2.xxx * u_xlat16_10.xyz;
    u_xlat16_8.x = (-vs_TEXCOORD0.z) + 1.0;
    u_xlat16_1.x = u_xlat16_38 + u_xlat16_8.x;
    u_xlat16_1.yw = vec2(u_xlat10_33) * vec2(vec2(_NoiseIntensity, _NoiseIntensity)) + (-vs_TEXCOORD0.ww);
    u_xlat16_18.y = 1.0;
    u_xlat16_19.xy = u_xlat16_1.xy + u_xlat16_18.xy;
    u_xlat10_3 = textureLod(_Mask01, u_xlat16_19.xy, 0.0).x;
    u_xlat16_3 = max(u_xlat10_3, 9.99999975e-05);
    u_xlat16_3 = log2(u_xlat16_3);
    u_xlat16_3 = u_xlat16_3 * _Mask01_Power;
    u_xlat16_3 = exp2(u_xlat16_3);
    u_xlat16_19.xyz = _FlowMapColor02.xyz * vec3(_FlowScale02);
    u_xlat16_9.xy = vec2(u_xlat10_33) * vec2(vec2(_NoiseFlowIntensity, _NoiseFlowIntensity)) + u_xlat16_9.xy;
    u_xlat10_33 = textureLod(_FlowMap02, u_xlat16_9.xy, 0.0).x;
    u_xlat16_14.xyz = vec3(u_xlat10_33) * u_xlat16_19.xyz;
    u_xlat16_1.z = u_xlat16_40 + u_xlat16_8.x;
    u_xlat16_18.xy = vec2(u_xlat16_1.z + u_xlat16_18.x, u_xlat16_1.w + u_xlat16_18.y);
    u_xlat10_33 = textureLod(_Mask02, u_xlat16_18.xy, 0.0).x;
    u_xlat16_33 = max(u_xlat10_33, 9.99999975e-05);
    u_xlat16_33 = log2(u_xlat16_33);
    u_xlat16_33 = u_xlat16_33 * _Mask02_Power;
    u_xlat16_33 = exp2(u_xlat16_33);
    u_xlat16_14.xyz = vec3(u_xlat16_33) * u_xlat16_14.xyz;
    u_xlat16_2.xzw = u_xlat16_2.xzw * vec3(u_xlat16_3) + u_xlat16_14.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(_EmissionScaler) + u_xlat16_2.xzw;
    u_xlat3.xyz = (-u_xlat0.xyz) + u_xlat16_5.xyz;
    u_xlat3.xyz = u_xlat16_7.xxx * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat4.xy = vs_TEXCOORD0.zw * _DissovleNoise_ST.xy + _DissovleNoise_ST.zw;
    u_xlat16_5.x = _Time.y * _DissolveNoise_Uspeed + u_xlat4.x;
    u_xlat16_5.y = _Time.y * _DissolveNoise_Vspeed + u_xlat4.y;
    u_xlat10_33 = textureLod(_DissovleNoise, u_xlat16_5.xy, 0.0).x;
    u_xlat33 = u_xlat10_33 * _DissovleNoiseScale + vs_TEXCOORD0.z;
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(_Dissovle>=u_xlat33);
#else
    u_xlatb33 = _Dissovle>=u_xlat33;
#endif
    u_xlat0.xyz = (bool(u_xlatb13)) ? u_xlat3.xyz : u_xlat0.xyz;
    u_xlat0.xyz = u_xlat16_2.xzw + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(0.00999999978<u_xlat16_7.x);
#else
    u_xlatb2 = 0.00999999978<u_xlat16_7.x;
#endif
    if((int(u_xlatb33) * int(0xffffffffu))==0){discard;}
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn));
#else
    u_xlatb33 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn);
#endif
    u_xlat13.xyz = u_xlat0.xyz * vec3(vec3(_ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness));
    u_xlat3.xyz = vec3(vec3(_ES_CharacterPointLightWholeIntensity, _ES_CharacterPointLightWholeIntensity, _ES_CharacterPointLightWholeIntensity)) * mhy_CharacterPointLightColor.xyz;
    u_xlat4.xyz = _ES_CharacterMainLightColor.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.xyz = min(max(u_xlat4.xyz, 0.0), 1.0);
#else
    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
#endif
    u_xlat36 = (-mhy_CharacterPointLightColor.w) + 1.0;
    u_xlat3.xyz = u_xlat4.xyz * vec3(u_xlat36) + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat3.xyz = vec3(vec3(_ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio)) * u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat13.xyz = u_xlat13.xyz * u_xlat3.xyz;
    u_xlat3.xyz = _ES_CharacterAmbientLightColor.xyz * vec3(_ES_CharacterAmbientLightRatio);
    u_xlat16_5.xyz = u_xlat13.xyz * vec3(10.0, 10.0, 10.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.xyz = min(max(u_xlat16_5.xyz, 0.0), 1.0);
#else
    u_xlat16_5.xyz = clamp(u_xlat16_5.xyz, 0.0, 1.0);
#endif
    u_xlat13.xyz = u_xlat3.xyz * u_xlat16_5.xyz + u_xlat13.xyz;
    u_xlat16_5.xyz = (bool(u_xlatb33)) ? u_xlat13.xyz : u_xlat0.xyz;
    u_xlat16_18.xyz = u_xlat0.xyz + (-u_xlat16_5.xyz);
    u_xlat16_18.xyz = u_xlat16_7.xxx * u_xlat16_18.xyz + u_xlat16_5.xyz;
    u_xlat16_0.xyz = (bool(u_xlatb2)) ? u_xlat16_18.xyz : u_xlat16_5.xyz;
    u_xlat16_5.x = max(u_xlat16_0.z, u_xlat16_0.y);
    u_xlat16_1.w = max(u_xlat16_0.x, u_xlat16_5.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(1.0<u_xlat16_1.w);
#else
    u_xlatb2 = 1.0<u_xlat16_1.w;
#endif
    u_xlat16_1.xyz = u_xlat16_0.xyz / u_xlat16_1.www;
    u_xlat16_0.w = 1.0;
    u_xlat16_0 = (bool(u_xlatb2)) ? u_xlat16_1 : u_xlat16_0;
    u_xlat16_5.x = min(u_xlat16_0.w, 1.10000002);
    u_xlat16_16 = u_xlat16_0.w + (-u_xlat16_5.x);
    u_xlat16_5.x = u_xlat16_7.x * u_xlat16_16 + u_xlat16_5.x;
    u_xlat16_2.x = u_xlat16_5.x * 0.0500000007;
    SV_Target0.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb13 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb13 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_5.x = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb13) ? u_xlat16_5.x : 0.0;
    SV_Target0.w = 0.0156862754;
    SV_Target1.xyz = u_xlat16_0.xyz;
    SV_Target1.w = u_xlat16_2.x;
    SV_Target2.xy = vec2(0.0, 0.0);
    SV_Target2.w = vs_TEXCOORD4;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MSAA_INTERPOLATION" "FACE_MAP_NEW_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _MainTex_ST;
uniform 	float _FaceMapRotateOffset;
uniform 	float _CharacterAmbientSensorShadowOn;
uniform 	vec4 _AmbientSensorUVs;
uniform 	float _UseClipPlane;
uniform 	float _ClipPlaneWorld;
uniform 	vec4 _ClipPlane;
uniform 	vec4 mhy_AvatarLightDir;
uniform 	vec4 mhy_CharacterOverrideLightDir;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
struct unity_Builtins1Array_Type {
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw1 {
	unity_Builtins1Array_Type unity_Builtins1Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform lowp sampler2D _CharacterAmbientSensorTex;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp float vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD6;
flat out highp uint vs_SV_InstanceID0;
float u_xlat0;
int u_xlati0;
vec3 u_xlat1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
vec4 u_xlat4;
mediump float u_xlat16_5;
vec3 u_xlat6;
bool u_xlatb6;
float u_xlat7;
mediump vec2 u_xlat16_11;
float u_xlat12;
bool u_xlatb12;
float u_xlat13;
bool u_xlatb13;
mediump float u_xlat16_17;
float u_xlat19;
bool u_xlatb19;
float u_xlat20;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.5<mhy_CharacterOverrideLightDir.w);
#else
    u_xlatb6 = 0.5<mhy_CharacterOverrideLightDir.w;
#endif
    u_xlat1.x = mhy_CharacterOverrideLightDir.x;
    u_xlat1.yz = (-mhy_CharacterOverrideLightDir.yz);
    u_xlat6.xyz = (bool(u_xlatb6)) ? u_xlat1.xyz : mhy_AvatarLightDir.xyz;
    u_xlati0 = u_xlati0 << 2;
    u_xlat1.x = dot(u_xlat6.xyz, unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz);
    u_xlat7 = dot(u_xlat6.xyz, unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb13 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseClipPlane));
#else
    u_xlatb13 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseClipPlane);
#endif
    if(u_xlatb13){
#ifdef UNITY_ADRENO_ES3
        u_xlatb13 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ClipPlaneWorld));
#else
        u_xlatb13 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ClipPlaneWorld);
#endif
        if(u_xlatb13){
#ifdef UNITY_ADRENO_ES3
            u_xlatb13 = !!(abs(_ClipPlane.w)<0.00100000005);
#else
            u_xlatb13 = abs(_ClipPlane.w)<0.00100000005;
#endif
            u_xlat2.xyz = _ClipPlane.www * _ClipPlane.xyz;
            u_xlat2.xyz = (bool(u_xlatb13)) ? vec3(0.0, 0.0, 0.0) : u_xlat2.xyz;
            u_xlat3 = u_xlat2.yyyy * unity_Builtins1Array[u_xlati0 / 4].hlslcc_mtx4x4unity_WorldToObjectArray[1];
            u_xlat3 = unity_Builtins1Array[u_xlati0 / 4].hlslcc_mtx4x4unity_WorldToObjectArray[0] * u_xlat2.xxxx + u_xlat3;
            u_xlat2 = unity_Builtins1Array[u_xlati0 / 4].hlslcc_mtx4x4unity_WorldToObjectArray[2] * u_xlat2.zzzz + u_xlat3;
            u_xlat2 = u_xlat2 + unity_Builtins1Array[u_xlati0 / 4].hlslcc_mtx4x4unity_WorldToObjectArray[3];
            u_xlat2.xyz = u_xlat2.xyz / u_xlat2.www;
            u_xlat3.xyz = _ClipPlane.yyy * unity_Builtins1Array[u_xlati0 / 4].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz;
            u_xlat3.xyz = unity_Builtins1Array[u_xlati0 / 4].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz * _ClipPlane.xxx + u_xlat3.xyz;
            u_xlat3.xyz = unity_Builtins1Array[u_xlati0 / 4].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz * _ClipPlane.zzz + u_xlat3.xyz;
            u_xlat13 = dot(u_xlat2.xyz, u_xlat3.xyz);
            u_xlat19 = dot(in_POSITION0.xyz, u_xlat3.xyz);
#ifdef UNITY_ADRENO_ES3
            u_xlatb2 = !!(u_xlat19<u_xlat13);
#else
            u_xlatb2 = u_xlat19<u_xlat13;
#endif
            u_xlat13 = (-u_xlat13) + u_xlat19;
            u_xlat3.xyz = (-vec3(u_xlat13)) * u_xlat3.xyz + in_POSITION0.xyz;
            u_xlat3.w = 0.0;
            u_xlat4.xyz = in_POSITION0.xyz;
            u_xlat4.w = in_COLOR0.w;
            u_xlat2 = (bool(u_xlatb2)) ? u_xlat3 : u_xlat4;
            u_xlat16_5 = u_xlat2.w;
        } else {
            u_xlat13 = dot(in_POSITION0.xyz, _ClipPlane.xyz);
            u_xlat19 = _ClipPlane.w + -0.00999999978;
#ifdef UNITY_ADRENO_ES3
            u_xlatb19 = !!(u_xlat13<u_xlat19);
#else
            u_xlatb19 = u_xlat13<u_xlat19;
#endif
            u_xlat13 = u_xlat13 + (-_ClipPlane.w);
            u_xlat3.xyz = (-vec3(u_xlat13)) * _ClipPlane.xyz + in_POSITION0.xyz;
            u_xlat3.w = 0.0;
            u_xlat4.xyz = in_POSITION0.xyz;
            u_xlat4.w = in_COLOR0.w;
            u_xlat2 = (bool(u_xlatb19)) ? u_xlat3 : u_xlat4;
            u_xlat16_5 = u_xlat2.w;
        //ENDIF
        }
    } else {
        u_xlat2.xyz = in_POSITION0.xyz;
        u_xlat16_5 = in_COLOR0.w;
    //ENDIF
    }
    u_xlat3.xyw = (-_WorldSpaceCameraPos.xyz) + unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat4.x = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].x;
    u_xlat4.y = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].x;
    u_xlat4.z = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].x;
    u_xlat4.w = u_xlat3.x;
    u_xlat2.w = 1.0;
    u_xlat13 = dot(u_xlat4, u_xlat2);
    u_xlat4.x = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].y;
    u_xlat4.y = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].y;
    u_xlat4.z = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].y;
    u_xlat4.w = u_xlat3.y;
    u_xlat19 = dot(u_xlat4, u_xlat2);
    u_xlat3.x = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].z;
    u_xlat3.y = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].z;
    u_xlat3.z = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].z;
    u_xlat3.x = dot(u_xlat3, u_xlat2);
    u_xlat4.x = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].w;
    u_xlat4.y = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].w;
    u_xlat4.z = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].w;
    u_xlat4.w = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3].w;
    u_xlat20 = dot(u_xlat4, u_xlat2);
    u_xlat4 = vec4(u_xlat19) * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat4 = hlslcc_mtx4x4unity_MatrixVPZero[0] * vec4(u_xlat13) + u_xlat4;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat3.xxxx + u_xlat4;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVPZero[3] * vec4(u_xlat20) + u_xlat3;
    u_xlat4 = u_xlat2.yyyy * unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat4 = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * u_xlat2.xxxx + u_xlat4;
    u_xlat2 = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * u_xlat2.zzzz + u_xlat4;
    u_xlat2 = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3] * in_POSITION0.wwww + u_xlat2;
    vs_TEXCOORD3.xyz = u_xlat2.xyz / u_xlat2.www;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat2.xz = u_xlat3.xw * vec2(0.5, 0.5);
    u_xlat13 = u_xlat3.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat13 * 0.5;
    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat2.xyz = in_NORMAL0.yyy * unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat2.xyz = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_NORMAL0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_NORMAL0.zzz + u_xlat2.xyz;
    u_xlat0 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0 = inversesqrt(u_xlat0);
    u_xlat2.xyz = vec3(u_xlat0) * u_xlat2.xyz;
    u_xlat16_11.x = dot(u_xlat2.xyz, u_xlat6.xyz);
    vs_TEXCOORD1.w = u_xlat16_11.x * 0.497500002 + 0.5;
    u_xlat16_11.x = min(abs(u_xlat1.x), abs(u_xlat7));
    u_xlat16_17 = max(abs(u_xlat1.x), abs(u_xlat7));
    u_xlat16_17 = float(1.0) / u_xlat16_17;
    u_xlat16_11.x = u_xlat16_17 * u_xlat16_11.x;
    u_xlat16_17 = u_xlat16_11.x * u_xlat16_11.x;
    u_xlat0 = u_xlat16_17 * 0.0208350997 + -0.0851330012;
    u_xlat0 = u_xlat16_17 * u_xlat0 + 0.180141002;
    u_xlat0 = u_xlat16_17 * u_xlat0 + -0.330299497;
    u_xlat0 = u_xlat16_17 * u_xlat0 + 0.999866009;
    u_xlat6.x = u_xlat0 * u_xlat16_11.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(abs(u_xlat1.x)<abs(u_xlat7));
#else
    u_xlatb12 = abs(u_xlat1.x)<abs(u_xlat7);
#endif
    u_xlat6.x = u_xlat6.x * -2.0 + 1.57079637;
    u_xlat6.x = u_xlatb12 ? u_xlat6.x : float(0.0);
    u_xlat0 = u_xlat16_11.x * u_xlat0 + u_xlat6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(u_xlat1.x<(-u_xlat1.x));
#else
    u_xlatb6 = u_xlat1.x<(-u_xlat1.x);
#endif
    u_xlat6.x = u_xlatb6 ? -3.14159274 : float(0.0);
    u_xlat0 = u_xlat6.x + u_xlat0;
    u_xlat16_11.x = min(u_xlat1.x, u_xlat7);
    u_xlat16_17 = max(u_xlat1.x, u_xlat7);
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(u_xlat16_11.x<(-u_xlat16_11.x));
#else
    u_xlatb6 = u_xlat16_11.x<(-u_xlat16_11.x);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat16_17>=(-u_xlat16_17));
#else
    u_xlatb12 = u_xlat16_17>=(-u_xlat16_17);
#endif
    u_xlatb6 = u_xlatb12 && u_xlatb6;
    u_xlat0 = (u_xlatb6) ? (-u_xlat0) : u_xlat0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.0<(-u_xlat0));
#else
    u_xlatb6 = 0.0<(-u_xlat0);
#endif
    u_xlat16_11.x = u_xlat0 * -0.318309903;
    u_xlat0 = max(_FaceMapRotateOffset, 0.0);
    u_xlat12 = _FaceMapRotateOffset + 1.0;
    u_xlat12 = min(u_xlat12, 1.0);
    u_xlat12 = (-u_xlat0) + u_xlat12;
    u_xlat0 = (-u_xlat0) + abs(u_xlat16_11.x);
    u_xlat12 = float(1.0) / u_xlat12;
    u_xlat0 = u_xlat12 * u_xlat0;
#ifdef UNITY_ADRENO_ES3
    u_xlat0 = min(max(u_xlat0, 0.0), 1.0);
#else
    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
#endif
    u_xlat12 = u_xlat0 * -2.0 + 3.0;
    u_xlat0 = u_xlat0 * u_xlat0;
    u_xlat0 = u_xlat0 * u_xlat12;
    u_xlat0 = max(u_xlat0, 9.99999975e-05);
    u_xlat0 = min(u_xlat0, 0.999899983);
    u_xlat16_11.xy = in_TEXCOORD0.xy * vec2(-1.0, 1.0) + vec2(1.0, 0.0);
    vs_TEXCOORD6.xy = (bool(u_xlatb6)) ? u_xlat16_11.xy : in_TEXCOORD0.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_CharacterAmbientSensorShadowOn));
#else
    u_xlatb6 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_CharacterAmbientSensorShadowOn);
#endif
    if(u_xlatb6){
        u_xlat6.x = textureLod(_CharacterAmbientSensorTex, _AmbientSensorUVs.xy, 0.0).x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb6 = !!(0.5<u_xlat6.x);
#else
        u_xlatb6 = 0.5<u_xlat6.x;
#endif
        vs_TEXCOORD4 = u_xlatb6 ? 1.0 : float(0.0);
    } else {
        vs_TEXCOORD4 = 0.0;
    //ENDIF
    }
    gl_Position = u_xlat3;
    vs_COLOR0.xyz = in_COLOR0.xyz;
    vs_COLOR0.w = u_xlat16_5;
    vs_TEXCOORD1.xyz = u_xlat2.xyz;
    vs_TEXCOORD2.zw = u_xlat3.zw;
    vs_TEXCOORD6.z = u_xlat0;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	mediump vec4 _Color;
uniform 	float _MainTexAlphaUse;
uniform 	mediump float _MainTexAlphaCutoff;
uniform 	float _UseVertexColorAO;
uniform 	mediump float _LightArea;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	float _UseCoolShadowColorOrTex;
uniform 	mediump vec3 _CoolShadowMultColor;
uniform 	float _UseShadowTransition;
uniform 	float _ShadowTransitionRange;
uniform 	float _ShadowTransitionSoftness;
uniform 	mediump vec3 _SpecularColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	float _FaceBlushStrength;
uniform 	mediump vec3 _FaceBlushColor;
uniform 	mediump float _EmissionScaler;
uniform 	mediump vec3 _EmissionColor_MHY;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _UseClipPlane;
uniform 	float _ES_CharacterAmbientLightOn;
uniform 	float _ES_CharacterAmbientBrightness;
uniform 	vec3 _ES_CharacterMainLightColor;
uniform 	vec3 _ES_CharacterAmbientLightColor;
uniform 	float _ES_CharacterMainLightRatio;
uniform 	float _ES_CharacterAmbientLightRatio;
uniform 	float _ES_CharacterColorTone;
uniform 	float _ES_CharacterPointLightWholeIntensity;
uniform 	vec4 mhy_AvatarLightDir;
uniform 	vec4 mhy_CharacterPointLightColor;
uniform 	vec4 mhy_CharacterOverrideLightDir;
uniform 	mediump vec4 _FlowMapColor01;
uniform 	mediump float _FlowScale01;
uniform 	mediump float _FlowMap01_Uspeed;
uniform 	vec4 _FlowMap01_ST;
uniform 	mediump float _FlowMap01_Vspeed;
uniform 	mediump float _Noise_Uspeed;
uniform 	vec4 _Noise_ST;
uniform 	mediump float _Noise_Vspeed;
uniform 	mediump float _NoiseFlowIntensity;
uniform 	mediump float _MaskOffset01;
uniform 	mediump float _NoiseIntensity;
uniform 	mediump float _Mask01_Power;
uniform 	mediump vec4 _FlowMapColor02;
uniform 	mediump float _FlowScale02;
uniform 	mediump float _FlowMap02_Uspeed;
uniform 	vec4 _FlowMap02_ST;
uniform 	mediump float _FlowMap02_Vspeed;
uniform 	mediump float _MaskOffset02;
uniform 	mediump float _Mask02_Power;
uniform 	mediump float _DissolveNoise_Uspeed;
uniform 	vec4 _DissovleNoise_ST;
uniform 	mediump float _DissolveNoise_Vspeed;
uniform 	mediump float _DissovleNoiseScale;
uniform 	mediump float _Dissovle;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _Noise;
uniform lowp sampler2D _FlowMap01;
uniform lowp sampler2D _Mask01;
uniform lowp sampler2D _FlowMap02;
uniform lowp sampler2D _Mask02;
uniform lowp sampler2D _DissovleNoise;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp float vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
lowp float u_xlat10_2;
bvec3 u_xlatb2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
lowp float u_xlat10_3;
int u_xlati3;
bool u_xlatb3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec2 u_xlat16_7;
mediump vec3 u_xlat16_8;
vec3 u_xlat9;
bool u_xlatb10;
vec3 u_xlat12;
mediump vec3 u_xlat16_12;
lowp float u_xlat10_12;
int u_xlati12;
bool u_xlatb12;
vec3 u_xlat13;
mediump vec3 u_xlat16_13;
mediump float u_xlat16_14;
mediump vec2 u_xlat16_15;
mediump vec2 u_xlat16_16;
bvec2 u_xlatb20;
vec2 u_xlat22;
bool u_xlatb22;
mediump vec2 u_xlat16_25;
float u_xlat30;
bool u_xlatb30;
float u_xlat32;
mediump float u_xlat16_32;
lowp float u_xlat10_32;
int u_xlati32;
bool u_xlatb32;
float u_xlat33;
mediump float u_xlat16_34;
mediump float u_xlat16_35;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseClipPlane));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseClipPlane);
#endif
    u_xlat16_1.x = vs_COLOR0.w + -0.00999999978;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(u_xlat16_1.x<0.0);
#else
    u_xlatb10 = u_xlat16_1.x<0.0;
#endif
    u_xlatb0 = u_xlatb0 && u_xlatb10;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(_DitherAlpha<0.949999988);
#else
        u_xlatb0 = _DitherAlpha<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb20.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb20.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb20.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = _DitherAlpha * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + -0.00999999978;
#ifdef UNITY_ADRENO_ES3
            u_xlatb0 = !!(u_xlat0.x<0.0);
#else
            u_xlatb0 = u_xlat0.x<0.0;
#endif
            if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(0.5<mhy_CharacterOverrideLightDir.w);
#else
    u_xlatb2.x = 0.5<mhy_CharacterOverrideLightDir.w;
#endif
    u_xlat3.x = mhy_CharacterOverrideLightDir.x;
    u_xlat3.yz = (-mhy_CharacterOverrideLightDir.yz);
    u_xlat2.xyz = (u_xlatb2.x) ? u_xlat3.xyz : mhy_AvatarLightDir.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat30) + u_xlat2.xyz;
    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
    u_xlat2.xy = dFdx(vs_TEXCOORD0.xy);
    u_xlat22.xy = dFdy(vs_TEXCOORD0.xy);
    u_xlat2.xy = u_xlat22.xy + u_xlat2.xy;
    u_xlat22.xy = (-u_xlat2.xy) * vec2(0.25, 0.25) + vs_TEXCOORD0.xy;
    u_xlat2.xy = u_xlat2.xy * vec2(0.25, 0.25) + vs_TEXCOORD0.xy;
    u_xlat2.xy = (int(gl_SampleID) != 0) ? u_xlat22.xy : u_xlat2.xy;
    u_xlat1 = textureLod(_MainTex, u_xlat2.xy, 0.0);
    u_xlatb2.xyz = equal(vec4(_MainTexAlphaUse), vec4(3.0, 1.0, 2.0, 0.0)).xyz;
    u_xlat30 = u_xlat1.w * _FaceBlushStrength;
    u_xlat3.xyz = (-u_xlat1.xyz) + _FaceBlushColor.xyz;
    u_xlat3.xyz = vec3(u_xlat30) * u_xlat3.xyz + u_xlat1.xyz;
    u_xlat16_4.xyz = (u_xlatb2.x) ? u_xlat3.xyz : u_xlat1.xyz;
    u_xlat16_34 = u_xlat1.w + (-_MainTexAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(u_xlat16_34<0.0);
#else
    u_xlatb30 = u_xlat16_34<0.0;
#endif
    u_xlatb30 = u_xlatb2.y && u_xlatb30;
    if((int(u_xlatb30) * int(0xffffffffu))!=0){discard;}
    u_xlat16_4.xyz = u_xlat16_4.xyz * _Color.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(0.00999999978<u_xlat1.w);
#else
    u_xlatb30 = 0.00999999978<u_xlat1.w;
#endif
    u_xlatb30 = u_xlatb30 && u_xlatb2.z;
    u_xlat16_34 = (u_xlatb30) ? u_xlat1.w : 0.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorAO));
#else
    u_xlatb2.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorAO);
#endif
    u_xlat16_5.x = vs_COLOR0.x * 0.5;
    u_xlat16_5.x = (u_xlatb2.x) ? u_xlat16_5.x : 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat16_5.x<0.0500000007);
#else
    u_xlatb12 = u_xlat16_5.x<0.0500000007;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(0.949999988<u_xlat16_5.x);
#else
    u_xlatb22 = 0.949999988<u_xlat16_5.x;
#endif
    u_xlat32 = u_xlat16_5.x + vs_TEXCOORD1.w;
    u_xlat32 = u_xlat32 * 0.5;
    u_xlat16_5.x = (u_xlatb22) ? 1.0 : u_xlat32;
    u_xlat16_5.x = (u_xlatb12) ? 0.0 : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb2.x) ? u_xlat16_5.x : vs_TEXCOORD1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(u_xlat16_5.x<_LightArea);
#else
    u_xlatb2.x = u_xlat16_5.x<_LightArea;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition));
#else
    u_xlatb12 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition);
#endif
    u_xlat16_5.x = (-u_xlat16_5.x) + _LightArea;
    u_xlat16_5.x = u_xlat16_5.x / _ShadowTransitionRange;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(u_xlat16_5.x>=1.0);
#else
    u_xlatb22 = u_xlat16_5.x>=1.0;
#endif
    u_xlat16_32 = u_xlat16_5.x + 0.00999999978;
    u_xlat16_32 = log2(u_xlat16_32);
    u_xlat32 = u_xlat16_32 * _ShadowTransitionSoftness;
    u_xlat32 = exp2(u_xlat32);
    u_xlat32 = min(u_xlat32, 1.0);
    u_xlat22.x = (u_xlatb22) ? 1.0 : u_xlat32;
    u_xlat22.x = (u_xlatb12) ? u_xlat22.x : 1.0;
    u_xlat22.x = u_xlatb2.x ? u_xlat22.x : float(0.0);
#ifdef UNITY_ADRENO_ES3
    { bool cond = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(vs_TEXCOORD4); u_xlati32 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati32 = int((vec4(0.0, 0.0, 0.0, 0.0)!=vec4(vs_TEXCOORD4)) ? 0xFFFFFFFFu : uint(0u));
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex));
#else
    u_xlatb3 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex);
#endif
    u_xlat16_13.xyz = vec3(_FirstShadowMultColor.xxyz.y + (-_CoolShadowMultColor.x), _FirstShadowMultColor.xxyz.z + (-_CoolShadowMultColor.y), float(_FirstShadowMultColor.z) + (-_CoolShadowMultColor.z));
    u_xlat13.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_13.xyz + _CoolShadowMultColor.xyz;
    u_xlat16_5.xyz = (bool(u_xlatb3)) ? u_xlat13.xyz : vec3(_FirstShadowMultColor.x, _FirstShadowMultColor.y, _FirstShadowMultColor.z);
    u_xlati3 = ~u_xlati32;
    u_xlati12 = u_xlatb12 ? u_xlati3 : int(0);
    u_xlat16_3.xyz = u_xlat16_5.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat3.xyz = u_xlat22.xxx * u_xlat16_3.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_5.xyz = (int(u_xlati12) != 0) ? u_xlat3.xyz : u_xlat16_5.xyz;
    u_xlat16_5.xyz = (int(u_xlati32) != 0) ? u_xlat16_5.xyz : vec3(1.0, 1.0, 1.0);
    u_xlat16_35 = dot(vs_TEXCOORD1.xyz, u_xlat0.xyz);
    u_xlat16_35 = max(u_xlat16_35, 0.00100000005);
    u_xlat16_35 = log2(u_xlat16_35);
    u_xlat16_35 = u_xlat16_35 * _Shininess;
    u_xlat16_35 = exp2(u_xlat16_35);
    u_xlat16_6.xyz = vec3(u_xlat16_35) * _SpecularColor.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(_SpecMulti);
    u_xlat16_4.xyz = vec3(u_xlat16_4.x * _EmissionColor_MHY.xxyz.y, u_xlat16_4.y * _EmissionColor_MHY.xxyz.z, u_xlat16_4.z * float(_EmissionColor_MHY.z));
    u_xlati0 = int(uint(u_xlatb2.x) * 0xffffffffu | uint(u_xlati32));
    u_xlat2.xyz = u_xlat1.xyz * u_xlat16_5.xyz;
    u_xlat0.xyz = (int(u_xlati0) != 0) ? u_xlat2.xyz : u_xlat1.xyz;
    u_xlat0.xyz = u_xlat16_6.xyz * vec3(0.5, 0.5, 0.5) + u_xlat0.xyz;
    u_xlat2.xy = vs_TEXCOORD0.zw * _FlowMap01_ST.xy + _FlowMap01_ST.zw;
    u_xlat16_5.x = _Time.y * _FlowMap01_Uspeed + u_xlat2.x;
    u_xlat16_5.y = _Time.y * _FlowMap01_Vspeed + u_xlat2.y;
    u_xlat2.xy = vs_TEXCOORD0.zw * _Noise_ST.xy + _Noise_ST.zw;
    u_xlat16_6.x = _Time.y * _Noise_Uspeed + u_xlat2.x;
    u_xlat16_6.y = _Time.y * _Noise_Vspeed + u_xlat2.y;
    u_xlat10_2 = textureLod(_Noise, u_xlat16_6.xy, 0.0).x;
    u_xlat16_25.x = _MaskOffset01 * 1.39999998 + -0.699999988;
    u_xlat16_16.x = u_xlat10_2 * _NoiseIntensity;
    u_xlat12.xy = vs_TEXCOORD0.zw * _FlowMap02_ST.xy + _FlowMap02_ST.zw;
    u_xlat16_7.x = _Time.y * _FlowMap02_Uspeed + u_xlat12.x;
    u_xlat16_7.y = _Time.y * _FlowMap02_Vspeed + u_xlat12.y;
    u_xlat16_25.y = _MaskOffset02 * 1.39999998 + -0.699999988;
    u_xlat16_8.xyz = _FlowMapColor01.xyz * vec3(_FlowScale01);
    u_xlat16_5.xy = vec2(u_xlat10_2) * vec2(vec2(_NoiseFlowIntensity, _NoiseFlowIntensity)) + u_xlat16_5.xy;
    u_xlat10_12 = textureLod(_FlowMap01, u_xlat16_5.xy, 0.0).x;
    u_xlat16_12.xyz = vec3(u_xlat10_12) * u_xlat16_8.xyz;
    u_xlat16_5.x = (-vs_TEXCOORD0.z) + 1.0;
    u_xlat16_1.xz = u_xlat16_25.xy + u_xlat16_5.xx;
    u_xlat16_1.yw = vec2(u_xlat10_2) * vec2(vec2(_NoiseIntensity, _NoiseIntensity)) + (-vs_TEXCOORD0.ww);
    u_xlat16_16.y = 1.0;
    u_xlat16_15.xy = u_xlat16_1.xy + u_xlat16_16.xy;
    u_xlat10_3 = textureLod(_Mask01, u_xlat16_15.xy, 0.0).x;
    u_xlat16_3.x = max(u_xlat10_3, 9.99999975e-05);
    u_xlat16_3.x = log2(u_xlat16_3.x);
    u_xlat16_3.x = u_xlat16_3.x * _Mask01_Power;
    u_xlat16_3.x = exp2(u_xlat16_3.x);
    u_xlat16_8.xyz = _FlowMapColor02.xyz * vec3(_FlowScale02);
    u_xlat16_15.xy = vec2(u_xlat10_2) * vec2(vec2(_NoiseFlowIntensity, _NoiseFlowIntensity)) + u_xlat16_7.xy;
    u_xlat10_2 = textureLod(_FlowMap02, u_xlat16_15.xy, 0.0).x;
    u_xlat16_13.xyz = vec3(u_xlat10_2) * u_xlat16_8.xyz;
    u_xlat16_5.xy = vec2(u_xlat16_1.z + u_xlat16_16.x, u_xlat16_1.w + u_xlat16_16.y);
    u_xlat10_2 = textureLod(_Mask02, u_xlat16_5.xy, 0.0).x;
    u_xlat16_2.x = max(u_xlat10_2, 9.99999975e-05);
    u_xlat16_2.x = log2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * _Mask02_Power;
    u_xlat16_2.x = exp2(u_xlat16_2.x);
    u_xlat16_13.xyz = u_xlat16_2.xxx * u_xlat16_13.xyz;
    u_xlat16_2.xyz = u_xlat16_12.xyz * u_xlat16_3.xxx + u_xlat16_13.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(_EmissionScaler) + u_xlat16_2.xyz;
    u_xlat3.xyz = (-u_xlat0.xyz) + u_xlat16_4.xyz;
    u_xlat3.xyz = vec3(u_xlat16_34) * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat9.xy = vs_TEXCOORD0.zw * _DissovleNoise_ST.xy + _DissovleNoise_ST.zw;
    u_xlat16_4.x = _Time.y * _DissolveNoise_Uspeed + u_xlat9.x;
    u_xlat16_4.y = _Time.y * _DissolveNoise_Vspeed + u_xlat9.y;
    u_xlat10_32 = textureLod(_DissovleNoise, u_xlat16_4.xy, 0.0).x;
    u_xlat32 = u_xlat10_32 * _DissovleNoiseScale + vs_TEXCOORD0.z;
#ifdef UNITY_ADRENO_ES3
    u_xlatb32 = !!(_Dissovle>=u_xlat32);
#else
    u_xlatb32 = _Dissovle>=u_xlat32;
#endif
    u_xlat0.xyz = (bool(u_xlatb30)) ? u_xlat3.xyz : u_xlat0.xyz;
    u_xlat0.xyz = u_xlat16_2.xyz + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(0.00999999978<u_xlat16_34);
#else
    u_xlatb30 = 0.00999999978<u_xlat16_34;
#endif
    if((int(u_xlatb32) * int(0xffffffffu))==0){discard;}
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn));
#else
    u_xlatb2.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn);
#endif
    u_xlat12.xyz = u_xlat0.xyz * vec3(vec3(_ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness));
    u_xlat3.xyz = vec3(vec3(_ES_CharacterPointLightWholeIntensity, _ES_CharacterPointLightWholeIntensity, _ES_CharacterPointLightWholeIntensity)) * mhy_CharacterPointLightColor.xyz;
    u_xlat9.xyz = _ES_CharacterMainLightColor.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat9.xyz = min(max(u_xlat9.xyz, 0.0), 1.0);
#else
    u_xlat9.xyz = clamp(u_xlat9.xyz, 0.0, 1.0);
#endif
    u_xlat33 = (-mhy_CharacterPointLightColor.w) + 1.0;
    u_xlat3.xyz = u_xlat9.xyz * vec3(u_xlat33) + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat3.xyz = vec3(vec3(_ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio)) * u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat12.xyz = u_xlat12.xyz * u_xlat3.xyz;
    u_xlat3.xyz = _ES_CharacterAmbientLightColor.xyz * vec3(_ES_CharacterAmbientLightRatio);
    u_xlat16_4.xyz = u_xlat12.xyz * vec3(10.0, 10.0, 10.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.xyz = min(max(u_xlat16_4.xyz, 0.0), 1.0);
#else
    u_xlat16_4.xyz = clamp(u_xlat16_4.xyz, 0.0, 1.0);
#endif
    u_xlat12.xyz = u_xlat3.xyz * u_xlat16_4.xyz + u_xlat12.xyz;
    u_xlat16_4.xyz = (u_xlatb2.x) ? u_xlat12.xyz : u_xlat0.xyz;
    u_xlat16_5.xyz = u_xlat0.xyz + (-u_xlat16_4.xyz);
    u_xlat16_5.xyz = vec3(u_xlat16_34) * u_xlat16_5.xyz + u_xlat16_4.xyz;
    u_xlat16_0.xyz = (bool(u_xlatb30)) ? u_xlat16_5.xyz : u_xlat16_4.xyz;
    u_xlat16_4.x = max(u_xlat16_0.z, u_xlat16_0.y);
    u_xlat16_1.w = max(u_xlat16_0.x, u_xlat16_4.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(1.0<u_xlat16_1.w);
#else
    u_xlatb2.x = 1.0<u_xlat16_1.w;
#endif
    u_xlat16_1.xyz = u_xlat16_0.xyz / u_xlat16_1.www;
    u_xlat16_0.w = 1.0;
    u_xlat16_0 = (u_xlatb2.x) ? u_xlat16_1 : u_xlat16_0;
    u_xlat16_4.x = min(u_xlat16_0.w, 1.10000002);
    u_xlat16_14 = u_xlat16_0.w + (-u_xlat16_4.x);
    u_xlat16_4.x = u_xlat16_34 * u_xlat16_14 + u_xlat16_4.x;
    u_xlat16_2.x = u_xlat16_4.x * 0.0500000007;
    SV_Target0.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb12 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_4.x = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb12) ? u_xlat16_4.x : 0.0;
    SV_Target0.w = 0.0156862754;
    SV_Target1.xyz = u_xlat16_0.xyz;
    SV_Target1.w = u_xlat16_2.x;
    SV_Target2.xy = vec2(0.0, 0.0);
    SV_Target2.w = vs_TEXCOORD4;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MSAA_INTERPOLATION" "TOON_SPECULAR_ON" "TOON_LIGHTMAP_ON" "FACE_MAP_NEW_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _MainTex_ST;
uniform 	float _FaceMapRotateOffset;
uniform 	float _CharacterAmbientSensorShadowOn;
uniform 	vec4 _AmbientSensorUVs;
uniform 	float _UseClipPlane;
uniform 	float _ClipPlaneWorld;
uniform 	vec4 _ClipPlane;
uniform 	vec4 mhy_AvatarLightDir;
uniform 	vec4 mhy_CharacterOverrideLightDir;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
struct unity_Builtins1Array_Type {
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw1 {
	unity_Builtins1Array_Type unity_Builtins1Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform lowp sampler2D _CharacterAmbientSensorTex;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp float vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD6;
flat out highp uint vs_SV_InstanceID0;
float u_xlat0;
int u_xlati0;
vec3 u_xlat1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
vec4 u_xlat4;
mediump float u_xlat16_5;
vec3 u_xlat6;
bool u_xlatb6;
float u_xlat7;
mediump vec2 u_xlat16_11;
float u_xlat12;
bool u_xlatb12;
float u_xlat13;
bool u_xlatb13;
mediump float u_xlat16_17;
float u_xlat19;
bool u_xlatb19;
float u_xlat20;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.5<mhy_CharacterOverrideLightDir.w);
#else
    u_xlatb6 = 0.5<mhy_CharacterOverrideLightDir.w;
#endif
    u_xlat1.x = mhy_CharacterOverrideLightDir.x;
    u_xlat1.yz = (-mhy_CharacterOverrideLightDir.yz);
    u_xlat6.xyz = (bool(u_xlatb6)) ? u_xlat1.xyz : mhy_AvatarLightDir.xyz;
    u_xlati0 = u_xlati0 << 2;
    u_xlat1.x = dot(u_xlat6.xyz, unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz);
    u_xlat7 = dot(u_xlat6.xyz, unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb13 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseClipPlane));
#else
    u_xlatb13 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseClipPlane);
#endif
    if(u_xlatb13){
#ifdef UNITY_ADRENO_ES3
        u_xlatb13 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ClipPlaneWorld));
#else
        u_xlatb13 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ClipPlaneWorld);
#endif
        if(u_xlatb13){
#ifdef UNITY_ADRENO_ES3
            u_xlatb13 = !!(abs(_ClipPlane.w)<0.00100000005);
#else
            u_xlatb13 = abs(_ClipPlane.w)<0.00100000005;
#endif
            u_xlat2.xyz = _ClipPlane.www * _ClipPlane.xyz;
            u_xlat2.xyz = (bool(u_xlatb13)) ? vec3(0.0, 0.0, 0.0) : u_xlat2.xyz;
            u_xlat3 = u_xlat2.yyyy * unity_Builtins1Array[u_xlati0 / 4].hlslcc_mtx4x4unity_WorldToObjectArray[1];
            u_xlat3 = unity_Builtins1Array[u_xlati0 / 4].hlslcc_mtx4x4unity_WorldToObjectArray[0] * u_xlat2.xxxx + u_xlat3;
            u_xlat2 = unity_Builtins1Array[u_xlati0 / 4].hlslcc_mtx4x4unity_WorldToObjectArray[2] * u_xlat2.zzzz + u_xlat3;
            u_xlat2 = u_xlat2 + unity_Builtins1Array[u_xlati0 / 4].hlslcc_mtx4x4unity_WorldToObjectArray[3];
            u_xlat2.xyz = u_xlat2.xyz / u_xlat2.www;
            u_xlat3.xyz = _ClipPlane.yyy * unity_Builtins1Array[u_xlati0 / 4].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz;
            u_xlat3.xyz = unity_Builtins1Array[u_xlati0 / 4].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz * _ClipPlane.xxx + u_xlat3.xyz;
            u_xlat3.xyz = unity_Builtins1Array[u_xlati0 / 4].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz * _ClipPlane.zzz + u_xlat3.xyz;
            u_xlat13 = dot(u_xlat2.xyz, u_xlat3.xyz);
            u_xlat19 = dot(in_POSITION0.xyz, u_xlat3.xyz);
#ifdef UNITY_ADRENO_ES3
            u_xlatb2 = !!(u_xlat19<u_xlat13);
#else
            u_xlatb2 = u_xlat19<u_xlat13;
#endif
            u_xlat13 = (-u_xlat13) + u_xlat19;
            u_xlat3.xyz = (-vec3(u_xlat13)) * u_xlat3.xyz + in_POSITION0.xyz;
            u_xlat3.w = 0.0;
            u_xlat4.xyz = in_POSITION0.xyz;
            u_xlat4.w = in_COLOR0.w;
            u_xlat2 = (bool(u_xlatb2)) ? u_xlat3 : u_xlat4;
            u_xlat16_5 = u_xlat2.w;
        } else {
            u_xlat13 = dot(in_POSITION0.xyz, _ClipPlane.xyz);
            u_xlat19 = _ClipPlane.w + -0.00999999978;
#ifdef UNITY_ADRENO_ES3
            u_xlatb19 = !!(u_xlat13<u_xlat19);
#else
            u_xlatb19 = u_xlat13<u_xlat19;
#endif
            u_xlat13 = u_xlat13 + (-_ClipPlane.w);
            u_xlat3.xyz = (-vec3(u_xlat13)) * _ClipPlane.xyz + in_POSITION0.xyz;
            u_xlat3.w = 0.0;
            u_xlat4.xyz = in_POSITION0.xyz;
            u_xlat4.w = in_COLOR0.w;
            u_xlat2 = (bool(u_xlatb19)) ? u_xlat3 : u_xlat4;
            u_xlat16_5 = u_xlat2.w;
        //ENDIF
        }
    } else {
        u_xlat2.xyz = in_POSITION0.xyz;
        u_xlat16_5 = in_COLOR0.w;
    //ENDIF
    }
    u_xlat3.xyw = (-_WorldSpaceCameraPos.xyz) + unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat4.x = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].x;
    u_xlat4.y = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].x;
    u_xlat4.z = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].x;
    u_xlat4.w = u_xlat3.x;
    u_xlat2.w = 1.0;
    u_xlat13 = dot(u_xlat4, u_xlat2);
    u_xlat4.x = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].y;
    u_xlat4.y = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].y;
    u_xlat4.z = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].y;
    u_xlat4.w = u_xlat3.y;
    u_xlat19 = dot(u_xlat4, u_xlat2);
    u_xlat3.x = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].z;
    u_xlat3.y = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].z;
    u_xlat3.z = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].z;
    u_xlat3.x = dot(u_xlat3, u_xlat2);
    u_xlat4.x = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].w;
    u_xlat4.y = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].w;
    u_xlat4.z = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].w;
    u_xlat4.w = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3].w;
    u_xlat20 = dot(u_xlat4, u_xlat2);
    u_xlat4 = vec4(u_xlat19) * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat4 = hlslcc_mtx4x4unity_MatrixVPZero[0] * vec4(u_xlat13) + u_xlat4;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat3.xxxx + u_xlat4;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVPZero[3] * vec4(u_xlat20) + u_xlat3;
    u_xlat4 = u_xlat2.yyyy * unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat4 = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * u_xlat2.xxxx + u_xlat4;
    u_xlat2 = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * u_xlat2.zzzz + u_xlat4;
    u_xlat2 = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3] * in_POSITION0.wwww + u_xlat2;
    vs_TEXCOORD3.xyz = u_xlat2.xyz / u_xlat2.www;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat2.xz = u_xlat3.xw * vec2(0.5, 0.5);
    u_xlat13 = u_xlat3.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat13 * 0.5;
    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat2.xyz = in_NORMAL0.yyy * unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat2.xyz = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_NORMAL0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_NORMAL0.zzz + u_xlat2.xyz;
    u_xlat0 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0 = inversesqrt(u_xlat0);
    u_xlat2.xyz = vec3(u_xlat0) * u_xlat2.xyz;
    u_xlat16_11.x = dot(u_xlat2.xyz, u_xlat6.xyz);
    vs_TEXCOORD1.w = u_xlat16_11.x * 0.497500002 + 0.5;
    u_xlat16_11.x = min(abs(u_xlat1.x), abs(u_xlat7));
    u_xlat16_17 = max(abs(u_xlat1.x), abs(u_xlat7));
    u_xlat16_17 = float(1.0) / u_xlat16_17;
    u_xlat16_11.x = u_xlat16_17 * u_xlat16_11.x;
    u_xlat16_17 = u_xlat16_11.x * u_xlat16_11.x;
    u_xlat0 = u_xlat16_17 * 0.0208350997 + -0.0851330012;
    u_xlat0 = u_xlat16_17 * u_xlat0 + 0.180141002;
    u_xlat0 = u_xlat16_17 * u_xlat0 + -0.330299497;
    u_xlat0 = u_xlat16_17 * u_xlat0 + 0.999866009;
    u_xlat6.x = u_xlat0 * u_xlat16_11.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(abs(u_xlat1.x)<abs(u_xlat7));
#else
    u_xlatb12 = abs(u_xlat1.x)<abs(u_xlat7);
#endif
    u_xlat6.x = u_xlat6.x * -2.0 + 1.57079637;
    u_xlat6.x = u_xlatb12 ? u_xlat6.x : float(0.0);
    u_xlat0 = u_xlat16_11.x * u_xlat0 + u_xlat6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(u_xlat1.x<(-u_xlat1.x));
#else
    u_xlatb6 = u_xlat1.x<(-u_xlat1.x);
#endif
    u_xlat6.x = u_xlatb6 ? -3.14159274 : float(0.0);
    u_xlat0 = u_xlat6.x + u_xlat0;
    u_xlat16_11.x = min(u_xlat1.x, u_xlat7);
    u_xlat16_17 = max(u_xlat1.x, u_xlat7);
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(u_xlat16_11.x<(-u_xlat16_11.x));
#else
    u_xlatb6 = u_xlat16_11.x<(-u_xlat16_11.x);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat16_17>=(-u_xlat16_17));
#else
    u_xlatb12 = u_xlat16_17>=(-u_xlat16_17);
#endif
    u_xlatb6 = u_xlatb12 && u_xlatb6;
    u_xlat0 = (u_xlatb6) ? (-u_xlat0) : u_xlat0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.0<(-u_xlat0));
#else
    u_xlatb6 = 0.0<(-u_xlat0);
#endif
    u_xlat16_11.x = u_xlat0 * -0.318309903;
    u_xlat0 = max(_FaceMapRotateOffset, 0.0);
    u_xlat12 = _FaceMapRotateOffset + 1.0;
    u_xlat12 = min(u_xlat12, 1.0);
    u_xlat12 = (-u_xlat0) + u_xlat12;
    u_xlat0 = (-u_xlat0) + abs(u_xlat16_11.x);
    u_xlat12 = float(1.0) / u_xlat12;
    u_xlat0 = u_xlat12 * u_xlat0;
#ifdef UNITY_ADRENO_ES3
    u_xlat0 = min(max(u_xlat0, 0.0), 1.0);
#else
    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
#endif
    u_xlat12 = u_xlat0 * -2.0 + 3.0;
    u_xlat0 = u_xlat0 * u_xlat0;
    u_xlat0 = u_xlat0 * u_xlat12;
    u_xlat0 = max(u_xlat0, 9.99999975e-05);
    u_xlat0 = min(u_xlat0, 0.999899983);
    u_xlat16_11.xy = in_TEXCOORD0.xy * vec2(-1.0, 1.0) + vec2(1.0, 0.0);
    vs_TEXCOORD6.xy = (bool(u_xlatb6)) ? u_xlat16_11.xy : in_TEXCOORD0.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_CharacterAmbientSensorShadowOn));
#else
    u_xlatb6 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_CharacterAmbientSensorShadowOn);
#endif
    if(u_xlatb6){
        u_xlat6.x = textureLod(_CharacterAmbientSensorTex, _AmbientSensorUVs.xy, 0.0).x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb6 = !!(0.5<u_xlat6.x);
#else
        u_xlatb6 = 0.5<u_xlat6.x;
#endif
        vs_TEXCOORD4 = u_xlatb6 ? 1.0 : float(0.0);
    } else {
        vs_TEXCOORD4 = 0.0;
    //ENDIF
    }
    gl_Position = u_xlat3;
    vs_COLOR0.xyz = in_COLOR0.xyz;
    vs_COLOR0.w = u_xlat16_5;
    vs_TEXCOORD1.xyz = u_xlat2.xyz;
    vs_TEXCOORD2.zw = u_xlat3.zw;
    vs_TEXCOORD6.z = u_xlat0;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	mediump vec4 _Color;
uniform 	float _MainTexAlphaUse;
uniform 	mediump float _MainTexAlphaCutoff;
uniform 	float _UseLightMapColorAO;
uniform 	float _UseVertexColorAO;
uniform 	mediump float _LightArea;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	float _UseCoolShadowColorOrTex;
uniform 	mediump vec3 _CoolShadowMultColor;
uniform 	float _UseShadowTransition;
uniform 	float _ShadowTransitionRange;
uniform 	float _ShadowTransitionSoftness;
uniform 	mediump vec3 _SpecularColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	float _FaceBlushStrength;
uniform 	mediump vec3 _FaceBlushColor;
uniform 	float _FaceMapSoftness;
uniform 	mediump float _EmissionScaler;
uniform 	mediump vec3 _EmissionColor_MHY;
uniform 	float _UseMaterial2;
uniform 	mediump vec3 _Color2;
uniform 	mediump vec3 _FirstShadowMultColor2;
uniform 	mediump vec3 _CoolShadowMultColor2;
uniform 	mediump float _Shininess2;
uniform 	mediump float _SpecMulti2;
uniform 	float _ShadowTransitionRange2;
uniform 	float _ShadowTransitionSoftness2;
uniform 	float _UseMaterial3;
uniform 	mediump vec3 _Color3;
uniform 	mediump vec3 _FirstShadowMultColor3;
uniform 	mediump vec3 _CoolShadowMultColor3;
uniform 	mediump float _Shininess3;
uniform 	mediump float _SpecMulti3;
uniform 	float _ShadowTransitionRange3;
uniform 	float _ShadowTransitionSoftness3;
uniform 	float _UseMaterial4;
uniform 	mediump vec3 _Color4;
uniform 	mediump vec3 _FirstShadowMultColor4;
uniform 	mediump vec3 _CoolShadowMultColor4;
uniform 	mediump float _Shininess4;
uniform 	mediump float _SpecMulti4;
uniform 	float _ShadowTransitionRange4;
uniform 	float _ShadowTransitionSoftness4;
uniform 	float _UseMaterial5;
uniform 	mediump vec3 _Color5;
uniform 	mediump vec3 _FirstShadowMultColor5;
uniform 	mediump vec3 _CoolShadowMultColor5;
uniform 	mediump float _Shininess5;
uniform 	mediump float _SpecMulti5;
uniform 	float _ShadowTransitionRange5;
uniform 	float _ShadowTransitionSoftness5;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _UseClipPlane;
uniform 	float _ES_CharacterAmbientLightOn;
uniform 	float _ES_CharacterAmbientBrightness;
uniform 	vec3 _ES_CharacterMainLightColor;
uniform 	vec3 _ES_CharacterAmbientLightColor;
uniform 	float _ES_CharacterMainLightRatio;
uniform 	float _ES_CharacterAmbientLightRatio;
uniform 	float _ES_CharacterColorTone;
uniform 	float _ES_CharacterPointLightWholeIntensity;
uniform 	vec4 mhy_AvatarLightDir;
uniform 	vec4 mhy_CharacterPointLightColor;
uniform 	vec4 mhy_CharacterOverrideLightDir;
uniform 	mediump vec4 _FlowMapColor01;
uniform 	mediump float _FlowScale01;
uniform 	mediump float _FlowMap01_Uspeed;
uniform 	vec4 _FlowMap01_ST;
uniform 	mediump float _FlowMap01_Vspeed;
uniform 	mediump float _Noise_Uspeed;
uniform 	vec4 _Noise_ST;
uniform 	mediump float _Noise_Vspeed;
uniform 	mediump float _NoiseFlowIntensity;
uniform 	mediump float _MaskOffset01;
uniform 	mediump float _NoiseIntensity;
uniform 	mediump float _Mask01_Power;
uniform 	mediump vec4 _FlowMapColor02;
uniform 	mediump float _FlowScale02;
uniform 	mediump float _FlowMap02_Uspeed;
uniform 	vec4 _FlowMap02_ST;
uniform 	mediump float _FlowMap02_Vspeed;
uniform 	mediump float _MaskOffset02;
uniform 	mediump float _Mask02_Power;
uniform 	mediump float _DissolveNoise_Uspeed;
uniform 	vec4 _DissovleNoise_ST;
uniform 	mediump float _DissolveNoise_Vspeed;
uniform 	mediump float _DissovleNoiseScale;
uniform 	mediump float _Dissovle;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _FaceMapTex;
uniform lowp sampler2D _Noise;
uniform lowp sampler2D _FlowMap01;
uniform lowp sampler2D _Mask01;
uniform lowp sampler2D _FlowMap02;
uniform lowp sampler2D _Mask02;
uniform lowp sampler2D _DissovleNoise;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp float vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
vec3 u_xlat2;
mediump vec4 u_xlat16_2;
lowp vec4 u_xlat10_2;
bool u_xlatb2;
vec3 u_xlat3;
mediump float u_xlat16_3;
lowp float u_xlat10_3;
bvec3 u_xlatb3;
vec3 u_xlat4;
bvec4 u_xlatb4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
mediump vec3 u_xlat16_6;
bvec3 u_xlatb6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
vec3 u_xlat11;
bool u_xlatb11;
vec3 u_xlat13;
bool u_xlatb13;
float u_xlat14;
mediump vec3 u_xlat16_14;
bool u_xlatb14;
mediump float u_xlat16_16;
mediump vec3 u_xlat16_18;
mediump vec3 u_xlat16_19;
bvec2 u_xlatb22;
vec2 u_xlat24;
mediump float u_xlat16_25;
int u_xlati25;
mediump float u_xlat16_30;
float u_xlat33;
mediump float u_xlat16_33;
lowp float u_xlat10_33;
bool u_xlatb33;
mediump float u_xlat16_35;
lowp float u_xlat10_35;
float u_xlat36;
int u_xlati36;
bool u_xlatb36;
float u_xlat37;
mediump float u_xlat16_37;
int u_xlati37;
mediump float u_xlat16_38;
mediump float u_xlat16_40;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseClipPlane));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseClipPlane);
#endif
    u_xlat16_1.x = vs_COLOR0.w + -0.00999999978;
#ifdef UNITY_ADRENO_ES3
    u_xlatb11 = !!(u_xlat16_1.x<0.0);
#else
    u_xlatb11 = u_xlat16_1.x<0.0;
#endif
    u_xlatb0 = u_xlatb0 && u_xlatb11;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(_DitherAlpha<0.949999988);
#else
        u_xlatb0 = _DitherAlpha<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb22.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb22.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb22.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = _DitherAlpha * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + -0.00999999978;
#ifdef UNITY_ADRENO_ES3
            u_xlatb0 = !!(u_xlat0.x<0.0);
#else
            u_xlatb0 = u_xlat0.x<0.0;
#endif
            if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(0.5<mhy_CharacterOverrideLightDir.w);
#else
    u_xlatb2 = 0.5<mhy_CharacterOverrideLightDir.w;
#endif
    u_xlat3.x = mhy_CharacterOverrideLightDir.x;
    u_xlat3.yz = (-mhy_CharacterOverrideLightDir.yz);
    u_xlat2.xyz = (bool(u_xlatb2)) ? u_xlat3.xyz : mhy_AvatarLightDir.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat33) + u_xlat2.xyz;
    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat0.xyz = vec3(u_xlat33) * u_xlat0.xyz;
    u_xlat2.xy = dFdx(vs_TEXCOORD0.xy);
    u_xlat24.xy = dFdy(vs_TEXCOORD0.xy);
    u_xlat2.xy = u_xlat24.xy + u_xlat2.xy;
    u_xlat24.xy = (-u_xlat2.xy) * vec2(0.25, 0.25) + vs_TEXCOORD0.xy;
    u_xlat2.xy = u_xlat2.xy * vec2(0.25, 0.25) + vs_TEXCOORD0.xy;
    u_xlat2.xy = (int(gl_SampleID) != 0) ? u_xlat24.xy : u_xlat2.xy;
    u_xlat1 = textureLod(_MainTex, u_xlat2.xy, 0.0);
    u_xlatb3.xyz = equal(vec4(_MainTexAlphaUse), vec4(3.0, 1.0, 2.0, 0.0)).xyz;
    u_xlat33 = u_xlat1.w * _FaceBlushStrength;
    u_xlat4.xyz = (-u_xlat1.xyz) + _FaceBlushColor.xyz;
    u_xlat4.xyz = vec3(u_xlat33) * u_xlat4.xyz + u_xlat1.xyz;
    u_xlat16_5.xyz = (u_xlatb3.x) ? u_xlat4.xyz : u_xlat1.xyz;
    u_xlat16_38 = u_xlat1.w + (-_MainTexAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(u_xlat16_38<0.0);
#else
    u_xlatb33 = u_xlat16_38<0.0;
#endif
    u_xlatb33 = u_xlatb3.y && u_xlatb33;
    if((int(u_xlatb33) * int(0xffffffffu))!=0){discard;}
    u_xlat10_2 = textureLod(_LightMapTex, u_xlat2.xy, 0.0);
    u_xlatb3.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseLightMapColorAO, _UseVertexColorAO, _UseLightMapColorAO, _UseLightMapColorAO)).xy;
    u_xlat16_38 = (u_xlatb3.x) ? u_xlat10_2.y : 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseMaterial2));
#else
    u_xlatb33 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseMaterial2);
#endif
    u_xlatb4 = greaterThanEqual(u_xlat10_2.wwww, vec4(0.800000012, 0.400000006, 0.200000003, 0.600000024));
    u_xlatb33 = u_xlatb33 && u_xlatb4.x;
    u_xlat33 = (u_xlatb33) ? 2.0 : 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb13 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseMaterial3));
#else
    u_xlatb13 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseMaterial3);
#endif
    u_xlatb13 = u_xlatb4.y && u_xlatb13;
    u_xlatb6.xyz = lessThan(u_xlat10_2.wwww, vec4(0.600000024, 0.400000006, 0.800000012, 0.0)).xyz;
    u_xlatb13 = u_xlatb13 && u_xlatb6.x;
    u_xlat33 = (u_xlatb13) ? 3.0 : u_xlat33;
#ifdef UNITY_ADRENO_ES3
    u_xlatb13 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseMaterial4));
#else
    u_xlatb13 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseMaterial4);
#endif
    u_xlatb13 = u_xlatb4.z && u_xlatb13;
    u_xlatb13 = u_xlatb6.y && u_xlatb13;
    u_xlat33 = (u_xlatb13) ? 4.0 : u_xlat33;
#ifdef UNITY_ADRENO_ES3
    u_xlatb13 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseMaterial5));
#else
    u_xlatb13 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseMaterial5);
#endif
    u_xlatb13 = u_xlatb4.w && u_xlatb13;
    u_xlatb13 = u_xlatb6.z && u_xlatb13;
    u_xlat33 = (u_xlatb13) ? 5.0 : u_xlat33;
    u_xlatb4 = equal(vec4(u_xlat33), vec4(2.0, 3.0, 4.0, 5.0));
    u_xlat16_7.xyz = (u_xlatb4.x) ? _Color2.xyz : _Color.xyz;
    u_xlat16_7.xyz = (u_xlatb4.y) ? _Color3.xyz : u_xlat16_7.xyz;
    u_xlat16_7.xyz = (u_xlatb4.z) ? _Color4.xyz : u_xlat16_7.xyz;
    u_xlat16_7.xyz = (u_xlatb4.w) ? _Color5.xyz : u_xlat16_7.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_7.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb13 = !!(0.00999999978<u_xlat1.w);
#else
    u_xlatb13 = 0.00999999978<u_xlat1.w;
#endif
    u_xlatb13 = u_xlatb13 && u_xlatb3.z;
    u_xlat16_7.x = (u_xlatb13) ? u_xlat1.w : 0.0;
    u_xlat10_35 = texture(_FaceMapTex, vs_TEXCOORD6.xy, -1.0).w;
    u_xlat3.x = max(_FaceMapSoftness, 9.99999997e-07);
    u_xlat16_18.x = (-u_xlat3.x) + vs_TEXCOORD6.z;
    u_xlat16_25 = max(u_xlat16_18.x, 9.99999975e-05);
    u_xlat16_25 = min(u_xlat16_25, 0.998899996);
    u_xlat16_18.x = u_xlat3.x + vs_TEXCOORD6.z;
    u_xlat16_3 = min(u_xlat16_18.x, 0.999899983);
    u_xlat16_3 = (-u_xlat16_25) + u_xlat16_3;
    u_xlat16_35 = u_xlat10_35 + (-u_xlat16_25);
    u_xlat16_3 = float(1.0) / u_xlat16_3;
    u_xlat16_35 = u_xlat16_35 * u_xlat16_3;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_35 = min(max(u_xlat16_35, 0.0), 1.0);
#else
    u_xlat16_35 = clamp(u_xlat16_35, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat16_35 * -2.0 + 3.0;
    u_xlat16_35 = u_xlat16_35 * u_xlat16_35;
    u_xlat16_25 = u_xlat16_35 * u_xlat16_3;
    u_xlat16_18.x = u_xlat16_38 * vs_COLOR0.x;
    u_xlat16_38 = (u_xlatb3.y) ? u_xlat16_18.x : u_xlat16_38;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(u_xlat16_38<0.0500000007);
#else
    u_xlatb14 = u_xlat16_38<0.0500000007;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb36 = !!(0.949999988<u_xlat16_38);
#else
    u_xlatb36 = 0.949999988<u_xlat16_38;
#endif
    u_xlat6.x = u_xlat16_38 + vs_TEXCOORD1.w;
    u_xlat6.x = u_xlat6.x * 0.5;
    u_xlat16_38 = (u_xlatb36) ? 1.0 : u_xlat6.x;
    u_xlat16_38 = (u_xlatb14) ? 0.0 : u_xlat16_38;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(u_xlat16_38<_LightArea);
#else
    u_xlatb14 = u_xlat16_38<_LightArea;
#endif
    if(u_xlatb14){
#ifdef UNITY_ADRENO_ES3
        u_xlatb14 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition));
#else
        u_xlatb14 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition);
#endif
#ifdef UNITY_ADRENO_ES3
        u_xlatb36 = !!(u_xlat33==1.0);
#else
        u_xlatb36 = u_xlat33==1.0;
#endif
        u_xlat16_8.x = (u_xlatb36) ? _ShadowTransitionRange : 0.0;
        u_xlat16_8.y = (u_xlatb36) ? _ShadowTransitionSoftness : 0.0;
        u_xlat16_18.xy = (u_xlatb4.x) ? vec2(_ShadowTransitionRange2, _ShadowTransitionSoftness2) : u_xlat16_8.xy;
        u_xlat16_18.xy = (u_xlatb4.y) ? vec2(_ShadowTransitionRange3, _ShadowTransitionSoftness3) : u_xlat16_18.xy;
        u_xlat16_18.xy = (u_xlatb4.z) ? vec2(_ShadowTransitionRange4, _ShadowTransitionSoftness4) : u_xlat16_18.xy;
        u_xlat16_18.xy = (u_xlatb4.w) ? vec2(_ShadowTransitionRange5, _ShadowTransitionSoftness5) : u_xlat16_18.xy;
        u_xlat16_38 = (-u_xlat16_38) + _LightArea;
        u_xlat16_38 = u_xlat16_38 / u_xlat16_18.x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb36 = !!(u_xlat16_38>=1.0);
#else
        u_xlatb36 = u_xlat16_38>=1.0;
#endif
        u_xlat16_37 = u_xlat16_38 + 0.00999999978;
        u_xlat16_37 = log2(u_xlat16_37);
        u_xlat16_37 = u_xlat16_37 * u_xlat16_18.y;
        u_xlat16_37 = exp2(u_xlat16_37);
        u_xlat37 = min(u_xlat16_37, 1.0);
        u_xlat36 = (u_xlatb36) ? 1.0 : u_xlat37;
        u_xlat14 = (u_xlatb14) ? u_xlat36 : 1.0;
        u_xlat16_38 = 0.0;
    } else {
        u_xlat14 = 0.0;
        u_xlat16_38 = 1.0;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb36 = !!(0.5<u_xlat10_2.x);
#else
    u_xlatb36 = 0.5<u_xlat10_2.x;
#endif
    u_xlat16_18.x = min(u_xlat16_25, u_xlat16_38);
    u_xlat16_38 = (u_xlatb36) ? u_xlat16_18.x : u_xlat16_38;
    u_xlat16_38 = (-u_xlat16_38) + 1.0;
#ifdef UNITY_ADRENO_ES3
    { bool cond = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(vs_TEXCOORD4); u_xlati25 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati25 = int((vec4(0.0, 0.0, 0.0, 0.0)!=vec4(vs_TEXCOORD4)) ? 0xFFFFFFFFu : uint(0u));
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(u_xlat33==1.0);
#else
    u_xlatb33 = u_xlat33==1.0;
#endif
    if(u_xlatb33){
#ifdef UNITY_ADRENO_ES3
        u_xlatb36 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex));
#else
        u_xlatb36 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex);
#endif
        u_xlat16_6.xyz = vec3(_FirstShadowMultColor.xxyz.y + (-_CoolShadowMultColor.x), _FirstShadowMultColor.xxyz.z + (-_CoolShadowMultColor.y), float(_FirstShadowMultColor.z) + (-_CoolShadowMultColor.z));
        u_xlat6.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_6.xyz + _CoolShadowMultColor.xyz;
        u_xlat16_18.xyz = (bool(u_xlatb36)) ? u_xlat6.xyz : vec3(_FirstShadowMultColor.x, _FirstShadowMultColor.y, _FirstShadowMultColor.z);
    } else {
        if(u_xlatb4.x){
#ifdef UNITY_ADRENO_ES3
            u_xlatb36 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex));
#else
            u_xlatb36 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex);
#endif
            u_xlat16_6.xyz = _FirstShadowMultColor2.xyz + (-_CoolShadowMultColor2.xyz);
            u_xlat6.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_6.xyz + _CoolShadowMultColor2.xyz;
            u_xlat16_18.xyz = (bool(u_xlatb36)) ? u_xlat6.xyz : _FirstShadowMultColor2.xyz;
        } else {
#ifdef UNITY_ADRENO_ES3
            u_xlatb36 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex));
#else
            u_xlatb36 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex);
#endif
            u_xlat16_6.xyz = _FirstShadowMultColor3.xyz + (-_CoolShadowMultColor3.xyz);
            u_xlat6.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_6.xyz + _CoolShadowMultColor3.xyz;
            u_xlat16_8.xyz = (bool(u_xlatb36)) ? u_xlat6.xyz : _FirstShadowMultColor3.xyz;
            u_xlat16_6.xyz = _FirstShadowMultColor4.xyz + (-_CoolShadowMultColor4.xyz);
            u_xlat6.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_6.xyz + _CoolShadowMultColor4.xyz;
            u_xlat16_9.xyz = (bool(u_xlatb36)) ? u_xlat6.xyz : _FirstShadowMultColor4.xyz;
            u_xlat16_6.xyz = _FirstShadowMultColor5.xyz + (-_CoolShadowMultColor5.xyz);
            u_xlat6.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_6.xyz + _CoolShadowMultColor5.xyz;
            u_xlat16_10.xyz = (bool(u_xlatb36)) ? u_xlat6.xyz : _FirstShadowMultColor5.xyz;
            u_xlat16_9.xyz = (u_xlatb4.z) ? u_xlat16_9.xyz : u_xlat16_10.xyz;
            u_xlat16_18.xyz = (u_xlatb4.y) ? u_xlat16_8.xyz : u_xlat16_9.xyz;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb36 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition));
#else
    u_xlatb36 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition);
#endif
    u_xlati37 = ~u_xlati25;
    u_xlati36 = u_xlatb36 ? u_xlati37 : int(0);
    u_xlat16_6.xyz = u_xlat16_18.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat6.xyz = vec3(u_xlat14) * u_xlat16_6.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_18.xyz = (int(u_xlati36) != 0) ? u_xlat6.xyz : u_xlat16_18.xyz;
    u_xlat16_8.x = (-u_xlat16_3) * u_xlat16_35 + 1.0;
    u_xlat16_19.xyz = u_xlat16_18.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat16_8.xyz = u_xlat16_8.xxx * u_xlat16_19.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_18.xyz = (int(u_xlati25) != 0) ? u_xlat16_18.xyz : u_xlat16_8.xyz;
    u_xlat16_8.x = (u_xlatb4.z) ? _Shininess4 : _Shininess5;
    u_xlat16_19.x = (u_xlatb4.z) ? _SpecMulti4 : _SpecMulti5;
    u_xlat16_8.x = (u_xlatb4.y) ? _Shininess3 : u_xlat16_8.x;
    u_xlat16_19.x = (u_xlatb4.y) ? _SpecMulti3 : u_xlat16_19.x;
    u_xlat16_8.x = (u_xlatb4.x) ? _Shininess2 : u_xlat16_8.x;
    u_xlat16_19.x = (u_xlatb4.x) ? _SpecMulti2 : u_xlat16_19.x;
    u_xlat16_8.x = (u_xlatb33) ? _Shininess : u_xlat16_8.x;
    u_xlat16_19.x = (u_xlatb33) ? _SpecMulti : u_xlat16_19.x;
    u_xlat16_30 = dot(vs_TEXCOORD1.xyz, u_xlat0.xyz);
    u_xlat16_30 = max(u_xlat16_30, 0.00100000005);
    u_xlat16_30 = log2(u_xlat16_30);
    u_xlat16_8.x = u_xlat16_30 * u_xlat16_8.x;
    u_xlat16_8.x = exp2(u_xlat16_8.x);
    u_xlat0.x = (-u_xlat10_2.z) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat0.x<u_xlat16_8.x);
#else
    u_xlatb0 = u_xlat0.x<u_xlat16_8.x;
#endif
    u_xlat16_8.xyz = u_xlat16_19.xxx * _SpecularColor.xyz;
    u_xlat16_8.xyz = u_xlat10_2.xxx * u_xlat16_8.xyz;
    u_xlat16_8.xyz = (bool(u_xlatb0)) ? u_xlat16_8.xyz : vec3(0.0, 0.0, 0.0);
    u_xlat16_5.xyz = vec3(u_xlat16_5.x * _EmissionColor_MHY.xxyz.y, u_xlat16_5.y * _EmissionColor_MHY.xxyz.z, u_xlat16_5.z * float(_EmissionColor_MHY.z));
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat16_38==1.0);
#else
    u_xlatb0 = u_xlat16_38==1.0;
#endif
    u_xlati0 = int(uint(u_xlatb0) * 0xffffffffu | uint(u_xlati25));
    u_xlat11.xyz = u_xlat1.xyz * u_xlat16_18.xyz;
    u_xlat0.xyz = (int(u_xlati0) != 0) ? u_xlat11.xyz : u_xlat1.xyz;
    u_xlat0.xyz = u_xlat16_8.xyz + u_xlat0.xyz;
    u_xlat2.xz = vs_TEXCOORD0.zw * _FlowMap01_ST.xy + _FlowMap01_ST.zw;
    u_xlat16_8.x = _Time.y * _FlowMap01_Uspeed + u_xlat2.x;
    u_xlat16_8.y = _Time.y * _FlowMap01_Vspeed + u_xlat2.z;
    u_xlat2.xz = vs_TEXCOORD0.zw * _Noise_ST.xy + _Noise_ST.zw;
    u_xlat16_9.x = _Time.y * _Noise_Uspeed + u_xlat2.x;
    u_xlat16_9.y = _Time.y * _Noise_Vspeed + u_xlat2.z;
    u_xlat10_33 = textureLod(_Noise, u_xlat16_9.xy, 0.0).x;
    u_xlat16_38 = _MaskOffset01 * 1.39999998 + -0.699999988;
    u_xlat16_18.x = u_xlat10_33 * _NoiseIntensity;
    u_xlat2.xz = vs_TEXCOORD0.zw * _FlowMap02_ST.xy + _FlowMap02_ST.zw;
    u_xlat16_9.x = _Time.y * _FlowMap02_Uspeed + u_xlat2.x;
    u_xlat16_9.y = _Time.y * _FlowMap02_Vspeed + u_xlat2.z;
    u_xlat16_40 = _MaskOffset02 * 1.39999998 + -0.699999988;
    u_xlat16_10.xyz = _FlowMapColor01.xyz * vec3(_FlowScale01);
    u_xlat16_8.xy = vec2(u_xlat10_33) * vec2(vec2(_NoiseFlowIntensity, _NoiseFlowIntensity)) + u_xlat16_8.xy;
    u_xlat10_2.x = textureLod(_FlowMap01, u_xlat16_8.xy, 0.0).x;
    u_xlat16_2.xzw = u_xlat10_2.xxx * u_xlat16_10.xyz;
    u_xlat16_8.x = (-vs_TEXCOORD0.z) + 1.0;
    u_xlat16_1.x = u_xlat16_38 + u_xlat16_8.x;
    u_xlat16_1.yw = vec2(u_xlat10_33) * vec2(vec2(_NoiseIntensity, _NoiseIntensity)) + (-vs_TEXCOORD0.ww);
    u_xlat16_18.y = 1.0;
    u_xlat16_19.xy = u_xlat16_1.xy + u_xlat16_18.xy;
    u_xlat10_3 = textureLod(_Mask01, u_xlat16_19.xy, 0.0).x;
    u_xlat16_3 = max(u_xlat10_3, 9.99999975e-05);
    u_xlat16_3 = log2(u_xlat16_3);
    u_xlat16_3 = u_xlat16_3 * _Mask01_Power;
    u_xlat16_3 = exp2(u_xlat16_3);
    u_xlat16_19.xyz = _FlowMapColor02.xyz * vec3(_FlowScale02);
    u_xlat16_9.xy = vec2(u_xlat10_33) * vec2(vec2(_NoiseFlowIntensity, _NoiseFlowIntensity)) + u_xlat16_9.xy;
    u_xlat10_33 = textureLod(_FlowMap02, u_xlat16_9.xy, 0.0).x;
    u_xlat16_14.xyz = vec3(u_xlat10_33) * u_xlat16_19.xyz;
    u_xlat16_1.z = u_xlat16_40 + u_xlat16_8.x;
    u_xlat16_18.xy = vec2(u_xlat16_1.z + u_xlat16_18.x, u_xlat16_1.w + u_xlat16_18.y);
    u_xlat10_33 = textureLod(_Mask02, u_xlat16_18.xy, 0.0).x;
    u_xlat16_33 = max(u_xlat10_33, 9.99999975e-05);
    u_xlat16_33 = log2(u_xlat16_33);
    u_xlat16_33 = u_xlat16_33 * _Mask02_Power;
    u_xlat16_33 = exp2(u_xlat16_33);
    u_xlat16_14.xyz = vec3(u_xlat16_33) * u_xlat16_14.xyz;
    u_xlat16_2.xzw = u_xlat16_2.xzw * vec3(u_xlat16_3) + u_xlat16_14.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(_EmissionScaler) + u_xlat16_2.xzw;
    u_xlat3.xyz = (-u_xlat0.xyz) + u_xlat16_5.xyz;
    u_xlat3.xyz = u_xlat16_7.xxx * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat4.xy = vs_TEXCOORD0.zw * _DissovleNoise_ST.xy + _DissovleNoise_ST.zw;
    u_xlat16_5.x = _Time.y * _DissolveNoise_Uspeed + u_xlat4.x;
    u_xlat16_5.y = _Time.y * _DissolveNoise_Vspeed + u_xlat4.y;
    u_xlat10_33 = textureLod(_DissovleNoise, u_xlat16_5.xy, 0.0).x;
    u_xlat33 = u_xlat10_33 * _DissovleNoiseScale + vs_TEXCOORD0.z;
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(_Dissovle>=u_xlat33);
#else
    u_xlatb33 = _Dissovle>=u_xlat33;
#endif
    u_xlat0.xyz = (bool(u_xlatb13)) ? u_xlat3.xyz : u_xlat0.xyz;
    u_xlat0.xyz = u_xlat16_2.xzw + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(0.00999999978<u_xlat16_7.x);
#else
    u_xlatb2 = 0.00999999978<u_xlat16_7.x;
#endif
    if((int(u_xlatb33) * int(0xffffffffu))==0){discard;}
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn));
#else
    u_xlatb33 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn);
#endif
    u_xlat13.xyz = u_xlat0.xyz * vec3(vec3(_ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness));
    u_xlat3.xyz = vec3(vec3(_ES_CharacterPointLightWholeIntensity, _ES_CharacterPointLightWholeIntensity, _ES_CharacterPointLightWholeIntensity)) * mhy_CharacterPointLightColor.xyz;
    u_xlat4.xyz = _ES_CharacterMainLightColor.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.xyz = min(max(u_xlat4.xyz, 0.0), 1.0);
#else
    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
#endif
    u_xlat36 = (-mhy_CharacterPointLightColor.w) + 1.0;
    u_xlat3.xyz = u_xlat4.xyz * vec3(u_xlat36) + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat3.xyz = vec3(vec3(_ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio)) * u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat13.xyz = u_xlat13.xyz * u_xlat3.xyz;
    u_xlat3.xyz = _ES_CharacterAmbientLightColor.xyz * vec3(_ES_CharacterAmbientLightRatio);
    u_xlat16_5.xyz = u_xlat13.xyz * vec3(10.0, 10.0, 10.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.xyz = min(max(u_xlat16_5.xyz, 0.0), 1.0);
#else
    u_xlat16_5.xyz = clamp(u_xlat16_5.xyz, 0.0, 1.0);
#endif
    u_xlat13.xyz = u_xlat3.xyz * u_xlat16_5.xyz + u_xlat13.xyz;
    u_xlat16_5.xyz = (bool(u_xlatb33)) ? u_xlat13.xyz : u_xlat0.xyz;
    u_xlat16_18.xyz = u_xlat0.xyz + (-u_xlat16_5.xyz);
    u_xlat16_18.xyz = u_xlat16_7.xxx * u_xlat16_18.xyz + u_xlat16_5.xyz;
    u_xlat16_0.xyz = (bool(u_xlatb2)) ? u_xlat16_18.xyz : u_xlat16_5.xyz;
    u_xlat16_5.x = max(u_xlat16_0.z, u_xlat16_0.y);
    u_xlat16_1.w = max(u_xlat16_0.x, u_xlat16_5.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(1.0<u_xlat16_1.w);
#else
    u_xlatb2 = 1.0<u_xlat16_1.w;
#endif
    u_xlat16_1.xyz = u_xlat16_0.xyz / u_xlat16_1.www;
    u_xlat16_0.w = 1.0;
    u_xlat16_0 = (bool(u_xlatb2)) ? u_xlat16_1 : u_xlat16_0;
    u_xlat16_5.x = min(u_xlat16_0.w, 1.10000002);
    u_xlat16_16 = u_xlat16_0.w + (-u_xlat16_5.x);
    u_xlat16_5.x = u_xlat16_7.x * u_xlat16_16 + u_xlat16_5.x;
    u_xlat16_2.x = u_xlat16_5.x * 0.0500000007;
    SV_Target0.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb13 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb13 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_5.x = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb13) ? u_xlat16_5.x : 0.0;
    SV_Target0.w = 0.0156862754;
    SV_Target1.xyz = u_xlat16_0.xyz;
    SV_Target1.w = u_xlat16_2.x;
    SV_Target2.xy = vec2(0.0, 0.0);
    SV_Target2.w = vs_TEXCOORD4;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "LINE_INTERPOLATION" "FACE_MAP_NEW_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	vec4 _MainTex_ST;
uniform 	float _FaceMapRotateOffset;
uniform 	float _CharacterAmbientSensorShadowOn;
uniform 	vec4 _AmbientSensorUVs;
uniform 	float _UseClipPlane;
uniform 	float _ClipPlaneWorld;
uniform 	vec4 _ClipPlane;
uniform 	vec4 mhy_AvatarLightDir;
uniform 	vec4 mhy_CharacterOverrideLightDir;
uniform lowp sampler2D _CharacterAmbientSensorTex;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp float vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD6;
vec3 u_xlat0;
bool u_xlatb0;
vec3 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
bool u_xlatb3;
vec4 u_xlat4;
vec4 u_xlat5;
mediump vec2 u_xlat16_6;
float u_xlat7;
bool u_xlatb7;
vec3 u_xlat8;
bvec2 u_xlatb8;
bool u_xlatb9;
mediump float u_xlat16_13;
float u_xlat14;
bool u_xlatb14;
float u_xlat15;
float u_xlat21;
float u_xlat22;
bool u_xlatb22;
float u_xlat23;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.5<mhy_CharacterOverrideLightDir.w);
#else
    u_xlatb0 = 0.5<mhy_CharacterOverrideLightDir.w;
#endif
    u_xlat1.x = mhy_CharacterOverrideLightDir.x;
    u_xlat1.yz = (-mhy_CharacterOverrideLightDir.yz);
    u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat1.xyz : mhy_AvatarLightDir.xyz;
    u_xlat21 = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_ObjectToWorld[1].xyz);
    u_xlat1.x = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_ObjectToWorld[2].xyz);
    u_xlatb8.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseClipPlane, _ClipPlaneWorld, _UseClipPlane, _UseClipPlane)).xy;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(abs(_ClipPlane.w)<0.00100000005);
#else
    u_xlatb22 = abs(_ClipPlane.w)<0.00100000005;
#endif
    u_xlat2.xyz = _ClipPlane.www * _ClipPlane.xyz;
    u_xlat2.xyz = (bool(u_xlatb22)) ? vec3(0.0, 0.0, 0.0) : u_xlat2.xyz;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_WorldToObject[1];
    u_xlat3 = hlslcc_mtx4x4unity_WorldToObject[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat2 = hlslcc_mtx4x4unity_WorldToObject[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat2 = u_xlat2 + hlslcc_mtx4x4unity_WorldToObject[3];
    u_xlat2.xyz = u_xlat2.xyz / u_xlat2.www;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * _ClipPlane.yyy;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _ClipPlane.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _ClipPlane.zzz + u_xlat3.xyz;
    u_xlat22 = dot(u_xlat2.xyz, u_xlat3.xyz);
    u_xlat2.x = dot(in_POSITION0.xyz, u_xlat3.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(u_xlat2.x<u_xlat22);
#else
    u_xlatb9 = u_xlat2.x<u_xlat22;
#endif
    u_xlat22 = (-u_xlat22) + u_xlat2.x;
    u_xlat3.xyz = (-vec3(u_xlat22)) * u_xlat3.xyz + in_POSITION0.xyz;
    u_xlat3.w = 0.0;
    u_xlat4.xyz = in_POSITION0.xyz;
    u_xlat4.w = in_COLOR0.w;
    u_xlat2 = (bool(u_xlatb9)) ? u_xlat3 : u_xlat4;
    u_xlat22 = dot(in_POSITION0.xyz, _ClipPlane.xyz);
    u_xlat3.x = _ClipPlane.w + -0.00999999978;
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(u_xlat22<u_xlat3.x);
#else
    u_xlatb3 = u_xlat22<u_xlat3.x;
#endif
    u_xlat22 = u_xlat22 + (-_ClipPlane.w);
    u_xlat5.xyz = (-vec3(u_xlat22)) * _ClipPlane.xyz + in_POSITION0.xyz;
    u_xlat5.w = 0.0;
    u_xlat3 = (bool(u_xlatb3)) ? u_xlat5 : u_xlat4;
    u_xlat2.xyz = (u_xlatb8.y) ? u_xlat2.xyz : u_xlat3.xyz;
    u_xlat16_6.x = (u_xlatb8.y) ? u_xlat2.w : u_xlat3.w;
    u_xlat2.xyz = (u_xlatb8.x) ? u_xlat2.xyz : in_POSITION0.xyz;
    vs_COLOR0.w = (u_xlatb8.x) ? u_xlat16_6.x : in_COLOR0.w;
    u_xlat3.xyw = (-_WorldSpaceCameraPos.xyz) + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat4.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;
    u_xlat4.y = hlslcc_mtx4x4unity_ObjectToWorld[1].x;
    u_xlat4.z = hlslcc_mtx4x4unity_ObjectToWorld[2].x;
    u_xlat4.w = u_xlat3.x;
    u_xlat2.w = 1.0;
    u_xlat8.x = dot(u_xlat4, u_xlat2);
    u_xlat4.x = hlslcc_mtx4x4unity_ObjectToWorld[0].y;
    u_xlat4.y = hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat4.z = hlslcc_mtx4x4unity_ObjectToWorld[2].y;
    u_xlat4.w = u_xlat3.y;
    u_xlat15 = dot(u_xlat4, u_xlat2);
    u_xlat3.x = hlslcc_mtx4x4unity_ObjectToWorld[0].z;
    u_xlat3.y = hlslcc_mtx4x4unity_ObjectToWorld[1].z;
    u_xlat3.z = hlslcc_mtx4x4unity_ObjectToWorld[2].z;
    u_xlat22 = dot(u_xlat3, u_xlat2);
    u_xlat3.x = hlslcc_mtx4x4unity_ObjectToWorld[0].w;
    u_xlat3.y = hlslcc_mtx4x4unity_ObjectToWorld[1].w;
    u_xlat3.z = hlslcc_mtx4x4unity_ObjectToWorld[2].w;
    u_xlat3.w = hlslcc_mtx4x4unity_ObjectToWorld[3].w;
    u_xlat23 = dot(u_xlat3, u_xlat2);
    u_xlat3 = vec4(u_xlat15) * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat8.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVPZero[2] * vec4(u_xlat22) + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVPZero[3] * vec4(u_xlat23) + u_xlat3;
    u_xlat4 = u_xlat2.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat4 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat2.xxxx + u_xlat4;
    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat2.zzzz + u_xlat4;
    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat2;
    vs_TEXCOORD3.xyz = u_xlat2.xyz / u_xlat2.www;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat2.xz = u_xlat3.xw * vec2(0.5, 0.5);
    u_xlat8.x = u_xlat3.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat8.x * 0.5;
    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat8.xyz = in_NORMAL0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat8.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_NORMAL0.xxx + u_xlat8.xyz;
    u_xlat8.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_NORMAL0.zzz + u_xlat8.xyz;
    u_xlat2.x = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat8.xyz = u_xlat8.xyz * u_xlat2.xxx;
    u_xlat16_6.x = dot(u_xlat8.xyz, u_xlat0.xyz);
    vs_TEXCOORD1.w = u_xlat16_6.x * 0.497500002 + 0.5;
    u_xlat16_6.x = min(abs(u_xlat21), abs(u_xlat1.x));
    u_xlat16_13 = max(abs(u_xlat21), abs(u_xlat1.x));
    u_xlat16_13 = float(1.0) / u_xlat16_13;
    u_xlat16_6.x = u_xlat16_13 * u_xlat16_6.x;
    u_xlat16_13 = u_xlat16_6.x * u_xlat16_6.x;
    u_xlat0.x = u_xlat16_13 * 0.0208350997 + -0.0851330012;
    u_xlat0.x = u_xlat16_13 * u_xlat0.x + 0.180141002;
    u_xlat0.x = u_xlat16_13 * u_xlat0.x + -0.330299497;
    u_xlat0.x = u_xlat16_13 * u_xlat0.x + 0.999866009;
    u_xlat7 = u_xlat0.x * u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(abs(u_xlat21)<abs(u_xlat1.x));
#else
    u_xlatb14 = abs(u_xlat21)<abs(u_xlat1.x);
#endif
    u_xlat7 = u_xlat7 * -2.0 + 1.57079637;
    u_xlat7 = u_xlatb14 ? u_xlat7 : float(0.0);
    u_xlat0.x = u_xlat16_6.x * u_xlat0.x + u_xlat7;
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(u_xlat21<(-u_xlat21));
#else
    u_xlatb7 = u_xlat21<(-u_xlat21);
#endif
    u_xlat7 = u_xlatb7 ? -3.14159274 : float(0.0);
    u_xlat0.x = u_xlat7 + u_xlat0.x;
    u_xlat16_6.x = min(u_xlat21, u_xlat1.x);
    u_xlat16_13 = max(u_xlat21, u_xlat1.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(u_xlat16_6.x<(-u_xlat16_6.x));
#else
    u_xlatb7 = u_xlat16_6.x<(-u_xlat16_6.x);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(u_xlat16_13>=(-u_xlat16_13));
#else
    u_xlatb14 = u_xlat16_13>=(-u_xlat16_13);
#endif
    u_xlatb7 = u_xlatb14 && u_xlatb7;
    u_xlat0.x = (u_xlatb7) ? (-u_xlat0.x) : u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(0.0<(-u_xlat0.x));
#else
    u_xlatb7 = 0.0<(-u_xlat0.x);
#endif
    u_xlat16_6.x = u_xlat0.x * -0.318309903;
    u_xlat0.x = max(_FaceMapRotateOffset, 0.0);
    u_xlat14 = _FaceMapRotateOffset + 1.0;
    u_xlat14 = min(u_xlat14, 1.0);
    u_xlat14 = (-u_xlat0.x) + u_xlat14;
    u_xlat0.x = (-u_xlat0.x) + abs(u_xlat16_6.x);
    u_xlat14 = float(1.0) / u_xlat14;
    u_xlat0.x = u_xlat14 * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat14 = u_xlat0.x * -2.0 + 3.0;
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * u_xlat14;
    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);
    u_xlat0.x = min(u_xlat0.x, 0.999899983);
    u_xlat16_6.xy = in_TEXCOORD0.xy * vec2(-1.0, 1.0) + vec2(1.0, 0.0);
    vs_TEXCOORD6.xy = (bool(u_xlatb7)) ? u_xlat16_6.xy : in_TEXCOORD0.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_CharacterAmbientSensorShadowOn));
#else
    u_xlatb7 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_CharacterAmbientSensorShadowOn);
#endif
    if(u_xlatb7){
        u_xlat7 = textureLod(_CharacterAmbientSensorTex, _AmbientSensorUVs.xy, 0.0).x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb7 = !!(0.5<u_xlat7);
#else
        u_xlatb7 = 0.5<u_xlat7;
#endif
        vs_TEXCOORD4 = u_xlatb7 ? 1.0 : float(0.0);
    } else {
        vs_TEXCOORD4 = 0.0;
    //ENDIF
    }
    gl_Position = u_xlat3;
    vs_COLOR0.xyz = in_COLOR0.xyz;
    vs_TEXCOORD1.xyz = u_xlat8.xyz;
    vs_TEXCOORD2.zw = u_xlat3.zw;
    vs_TEXCOORD6.z = u_xlat0.x;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	mediump vec4 _Color;
uniform 	float _MainTexAlphaUse;
uniform 	mediump float _MainTexAlphaCutoff;
uniform 	float _UseVertexColorAO;
uniform 	mediump float _LightArea;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	float _UseCoolShadowColorOrTex;
uniform 	mediump vec3 _CoolShadowMultColor;
uniform 	float _UseShadowTransition;
uniform 	float _ShadowTransitionRange;
uniform 	float _ShadowTransitionSoftness;
uniform 	mediump vec3 _SpecularColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	float _FaceBlushStrength;
uniform 	mediump vec3 _FaceBlushColor;
uniform 	mediump float _EmissionScaler;
uniform 	mediump vec3 _EmissionColor_MHY;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _TextureBiasWhenDithering;
uniform 	float _UseClipPlane;
uniform 	float _ES_CharacterAmbientLightOn;
uniform 	float _ES_CharacterAmbientBrightness;
uniform 	vec3 _ES_CharacterMainLightColor;
uniform 	vec3 _ES_CharacterAmbientLightColor;
uniform 	float _ES_CharacterMainLightRatio;
uniform 	float _ES_CharacterAmbientLightRatio;
uniform 	float _ES_CharacterColorTone;
uniform 	float _ES_CharacterPointLightWholeIntensity;
uniform 	vec4 mhy_AvatarLightDir;
uniform 	vec4 mhy_CharacterPointLightColor;
uniform 	vec4 mhy_CharacterOverrideLightDir;
uniform 	mediump vec4 _FlowMapColor01;
uniform 	mediump float _FlowScale01;
uniform 	mediump float _FlowMap01_Uspeed;
uniform 	vec4 _FlowMap01_ST;
uniform 	mediump float _FlowMap01_Vspeed;
uniform 	mediump float _Noise_Uspeed;
uniform 	vec4 _Noise_ST;
uniform 	mediump float _Noise_Vspeed;
uniform 	mediump float _NoiseFlowIntensity;
uniform 	mediump float _MaskOffset01;
uniform 	mediump float _NoiseIntensity;
uniform 	mediump float _Mask01_Power;
uniform 	mediump vec4 _FlowMapColor02;
uniform 	mediump float _FlowScale02;
uniform 	mediump float _FlowMap02_Uspeed;
uniform 	vec4 _FlowMap02_ST;
uniform 	mediump float _FlowMap02_Vspeed;
uniform 	mediump float _MaskOffset02;
uniform 	mediump float _Mask02_Power;
uniform 	mediump float _DissolveNoise_Uspeed;
uniform 	vec4 _DissovleNoise_ST;
uniform 	mediump float _DissolveNoise_Vspeed;
uniform 	mediump float _DissovleNoiseScale;
uniform 	mediump float _Dissovle;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _Noise;
uniform lowp sampler2D _FlowMap01;
uniform lowp sampler2D _Mask01;
uniform lowp sampler2D _FlowMap02;
uniform lowp sampler2D _Mask02;
uniform lowp sampler2D _DissovleNoise;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp float vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
lowp float u_xlat10_2;
int u_xlati2;
bvec3 u_xlatb2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
lowp float u_xlat10_3;
int u_xlati3;
bool u_xlatb3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec2 u_xlat16_7;
mediump vec3 u_xlat16_8;
vec3 u_xlat9;
bool u_xlatb10;
vec3 u_xlat12;
mediump vec3 u_xlat16_12;
lowp float u_xlat10_12;
int u_xlati12;
bool u_xlatb12;
vec3 u_xlat13;
mediump vec3 u_xlat16_13;
mediump float u_xlat16_14;
mediump vec2 u_xlat16_15;
mediump vec2 u_xlat16_16;
bvec2 u_xlatb20;
float u_xlat22;
bool u_xlatb22;
mediump vec2 u_xlat16_25;
float u_xlat30;
bool u_xlatb30;
float u_xlat32;
mediump float u_xlat16_32;
lowp float u_xlat10_32;
int u_xlati32;
bool u_xlatb32;
float u_xlat33;
mediump float u_xlat16_34;
mediump float u_xlat16_35;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseClipPlane));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseClipPlane);
#endif
    u_xlat16_1.x = vs_COLOR0.w + -0.00999999978;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(u_xlat16_1.x<0.0);
#else
    u_xlatb10 = u_xlat16_1.x<0.0;
#endif
    u_xlatb0 = u_xlatb0 && u_xlatb10;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(_DitherAlpha<0.949999988);
#else
        u_xlatb0 = _DitherAlpha<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb20.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb20.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb20.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = _DitherAlpha * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + -0.00999999978;
#ifdef UNITY_ADRENO_ES3
            u_xlatb0 = !!(u_xlat0.x<0.0);
#else
            u_xlatb0 = u_xlat0.x<0.0;
#endif
            if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(0.5<mhy_CharacterOverrideLightDir.w);
#else
    u_xlatb2.x = 0.5<mhy_CharacterOverrideLightDir.w;
#endif
    u_xlat3.x = mhy_CharacterOverrideLightDir.x;
    u_xlat3.yz = (-mhy_CharacterOverrideLightDir.yz);
    u_xlat2.xyz = (u_xlatb2.x) ? u_xlat3.xyz : mhy_AvatarLightDir.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat30) + u_xlat2.xyz;
    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
    u_xlat30 = _TextureBiasWhenDithering + -1.0;
    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy, u_xlat30);
    u_xlatb2.xyz = equal(vec4(_MainTexAlphaUse), vec4(3.0, 1.0, 2.0, 0.0)).xyz;
    u_xlat30 = u_xlat1.w * _FaceBlushStrength;
    u_xlat3.xyz = (-u_xlat1.xyz) + _FaceBlushColor.xyz;
    u_xlat3.xyz = vec3(u_xlat30) * u_xlat3.xyz + u_xlat1.xyz;
    u_xlat16_4.xyz = (u_xlatb2.x) ? u_xlat3.xyz : u_xlat1.xyz;
    u_xlat16_34 = u_xlat1.w + (-_MainTexAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(u_xlat16_34<0.0);
#else
    u_xlatb30 = u_xlat16_34<0.0;
#endif
    u_xlatb30 = u_xlatb2.y && u_xlatb30;
    if((int(u_xlatb30) * int(0xffffffffu))!=0){discard;}
    u_xlat16_4.xyz = u_xlat16_4.xyz * _Color.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(0.00999999978<u_xlat1.w);
#else
    u_xlatb30 = 0.00999999978<u_xlat1.w;
#endif
    u_xlatb30 = u_xlatb30 && u_xlatb2.z;
    u_xlat16_34 = (u_xlatb30) ? u_xlat1.w : 0.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorAO));
#else
    u_xlatb2.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorAO);
#endif
    u_xlat16_5.x = vs_COLOR0.x * 0.5;
    u_xlat16_5.x = (u_xlatb2.x) ? u_xlat16_5.x : 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat16_5.x<0.0500000007);
#else
    u_xlatb12 = u_xlat16_5.x<0.0500000007;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(0.949999988<u_xlat16_5.x);
#else
    u_xlatb22 = 0.949999988<u_xlat16_5.x;
#endif
    u_xlat32 = u_xlat16_5.x + vs_TEXCOORD1.w;
    u_xlat32 = u_xlat32 * 0.5;
    u_xlat16_5.x = (u_xlatb22) ? 1.0 : u_xlat32;
    u_xlat16_5.x = (u_xlatb12) ? 0.0 : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb2.x) ? u_xlat16_5.x : vs_TEXCOORD1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(u_xlat16_5.x<_LightArea);
#else
    u_xlatb2.x = u_xlat16_5.x<_LightArea;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition));
#else
    u_xlatb12 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition);
#endif
    u_xlat16_5.x = (-u_xlat16_5.x) + _LightArea;
    u_xlat16_5.x = u_xlat16_5.x / _ShadowTransitionRange;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(u_xlat16_5.x>=1.0);
#else
    u_xlatb22 = u_xlat16_5.x>=1.0;
#endif
    u_xlat16_32 = u_xlat16_5.x + 0.00999999978;
    u_xlat16_32 = log2(u_xlat16_32);
    u_xlat32 = u_xlat16_32 * _ShadowTransitionSoftness;
    u_xlat32 = exp2(u_xlat32);
    u_xlat32 = min(u_xlat32, 1.0);
    u_xlat22 = (u_xlatb22) ? 1.0 : u_xlat32;
    u_xlat22 = (u_xlatb12) ? u_xlat22 : 1.0;
    u_xlat22 = u_xlatb2.x ? u_xlat22 : float(0.0);
#ifdef UNITY_ADRENO_ES3
    { bool cond = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(vs_TEXCOORD4); u_xlati32 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati32 = int((vec4(0.0, 0.0, 0.0, 0.0)!=vec4(vs_TEXCOORD4)) ? 0xFFFFFFFFu : uint(0u));
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex));
#else
    u_xlatb3 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex);
#endif
    u_xlat16_13.xyz = vec3(_FirstShadowMultColor.xxyz.y + (-_CoolShadowMultColor.x), _FirstShadowMultColor.xxyz.z + (-_CoolShadowMultColor.y), float(_FirstShadowMultColor.z) + (-_CoolShadowMultColor.z));
    u_xlat13.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_13.xyz + _CoolShadowMultColor.xyz;
    u_xlat16_5.xyz = (bool(u_xlatb3)) ? u_xlat13.xyz : vec3(_FirstShadowMultColor.x, _FirstShadowMultColor.y, _FirstShadowMultColor.z);
    u_xlati3 = ~u_xlati32;
    u_xlati12 = u_xlatb12 ? u_xlati3 : int(0);
    u_xlat16_3.xyz = u_xlat16_5.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat3.xyz = vec3(u_xlat22) * u_xlat16_3.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_5.xyz = (int(u_xlati12) != 0) ? u_xlat3.xyz : u_xlat16_5.xyz;
    u_xlat16_5.xyz = (int(u_xlati32) != 0) ? u_xlat16_5.xyz : vec3(1.0, 1.0, 1.0);
    u_xlat16_35 = dot(vs_TEXCOORD1.xyz, u_xlat0.xyz);
    u_xlat16_35 = max(u_xlat16_35, 0.00100000005);
    u_xlat16_35 = log2(u_xlat16_35);
    u_xlat16_35 = u_xlat16_35 * _Shininess;
    u_xlat16_35 = exp2(u_xlat16_35);
    u_xlat16_6.xyz = vec3(u_xlat16_35) * _SpecularColor.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(_SpecMulti);
    u_xlat16_4.xyz = vec3(u_xlat16_4.x * _EmissionColor_MHY.xxyz.y, u_xlat16_4.y * _EmissionColor_MHY.xxyz.z, u_xlat16_4.z * float(_EmissionColor_MHY.z));
    u_xlat0.xyz = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0).xyz;
    u_xlati2 = int(uint(u_xlatb2.x) * 0xffffffffu | uint(u_xlati32));
    u_xlat12.xyz = u_xlat0.xyz * u_xlat16_5.xyz;
    u_xlat0.xyz = (int(u_xlati2) != 0) ? u_xlat12.xyz : u_xlat0.xyz;
    u_xlat0.xyz = u_xlat16_6.xyz * vec3(0.5, 0.5, 0.5) + u_xlat0.xyz;
    u_xlat2.xy = vs_TEXCOORD0.zw * _FlowMap01_ST.xy + _FlowMap01_ST.zw;
    u_xlat16_5.x = _Time.y * _FlowMap01_Uspeed + u_xlat2.x;
    u_xlat16_5.y = _Time.y * _FlowMap01_Vspeed + u_xlat2.y;
    u_xlat2.xy = vs_TEXCOORD0.zw * _Noise_ST.xy + _Noise_ST.zw;
    u_xlat16_6.x = _Time.y * _Noise_Uspeed + u_xlat2.x;
    u_xlat16_6.y = _Time.y * _Noise_Vspeed + u_xlat2.y;
    u_xlat10_2 = textureLod(_Noise, u_xlat16_6.xy, 0.0).x;
    u_xlat16_25.x = _MaskOffset01 * 1.39999998 + -0.699999988;
    u_xlat16_16.x = u_xlat10_2 * _NoiseIntensity;
    u_xlat12.xy = vs_TEXCOORD0.zw * _FlowMap02_ST.xy + _FlowMap02_ST.zw;
    u_xlat16_7.x = _Time.y * _FlowMap02_Uspeed + u_xlat12.x;
    u_xlat16_7.y = _Time.y * _FlowMap02_Vspeed + u_xlat12.y;
    u_xlat16_25.y = _MaskOffset02 * 1.39999998 + -0.699999988;
    u_xlat16_8.xyz = _FlowMapColor01.xyz * vec3(_FlowScale01);
    u_xlat16_5.xy = vec2(u_xlat10_2) * vec2(vec2(_NoiseFlowIntensity, _NoiseFlowIntensity)) + u_xlat16_5.xy;
    u_xlat10_12 = textureLod(_FlowMap01, u_xlat16_5.xy, 0.0).x;
    u_xlat16_12.xyz = vec3(u_xlat10_12) * u_xlat16_8.xyz;
    u_xlat16_5.x = (-vs_TEXCOORD0.z) + 1.0;
    u_xlat16_1.xz = u_xlat16_25.xy + u_xlat16_5.xx;
    u_xlat16_1.yw = vec2(u_xlat10_2) * vec2(vec2(_NoiseIntensity, _NoiseIntensity)) + (-vs_TEXCOORD0.ww);
    u_xlat16_16.y = 1.0;
    u_xlat16_15.xy = u_xlat16_1.xy + u_xlat16_16.xy;
    u_xlat10_3 = textureLod(_Mask01, u_xlat16_15.xy, 0.0).x;
    u_xlat16_3.x = max(u_xlat10_3, 9.99999975e-05);
    u_xlat16_3.x = log2(u_xlat16_3.x);
    u_xlat16_3.x = u_xlat16_3.x * _Mask01_Power;
    u_xlat16_3.x = exp2(u_xlat16_3.x);
    u_xlat16_8.xyz = _FlowMapColor02.xyz * vec3(_FlowScale02);
    u_xlat16_15.xy = vec2(u_xlat10_2) * vec2(vec2(_NoiseFlowIntensity, _NoiseFlowIntensity)) + u_xlat16_7.xy;
    u_xlat10_2 = textureLod(_FlowMap02, u_xlat16_15.xy, 0.0).x;
    u_xlat16_13.xyz = vec3(u_xlat10_2) * u_xlat16_8.xyz;
    u_xlat16_5.xy = vec2(u_xlat16_1.z + u_xlat16_16.x, u_xlat16_1.w + u_xlat16_16.y);
    u_xlat10_2 = textureLod(_Mask02, u_xlat16_5.xy, 0.0).x;
    u_xlat16_2.x = max(u_xlat10_2, 9.99999975e-05);
    u_xlat16_2.x = log2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * _Mask02_Power;
    u_xlat16_2.x = exp2(u_xlat16_2.x);
    u_xlat16_13.xyz = u_xlat16_2.xxx * u_xlat16_13.xyz;
    u_xlat16_2.xyz = u_xlat16_12.xyz * u_xlat16_3.xxx + u_xlat16_13.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(_EmissionScaler) + u_xlat16_2.xyz;
    u_xlat3.xyz = (-u_xlat0.xyz) + u_xlat16_4.xyz;
    u_xlat3.xyz = vec3(u_xlat16_34) * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat9.xy = vs_TEXCOORD0.zw * _DissovleNoise_ST.xy + _DissovleNoise_ST.zw;
    u_xlat16_4.x = _Time.y * _DissolveNoise_Uspeed + u_xlat9.x;
    u_xlat16_4.y = _Time.y * _DissolveNoise_Vspeed + u_xlat9.y;
    u_xlat10_32 = textureLod(_DissovleNoise, u_xlat16_4.xy, 0.0).x;
    u_xlat32 = u_xlat10_32 * _DissovleNoiseScale + vs_TEXCOORD0.z;
#ifdef UNITY_ADRENO_ES3
    u_xlatb32 = !!(_Dissovle>=u_xlat32);
#else
    u_xlatb32 = _Dissovle>=u_xlat32;
#endif
    u_xlat0.xyz = (bool(u_xlatb30)) ? u_xlat3.xyz : u_xlat0.xyz;
    u_xlat0.xyz = u_xlat16_2.xyz + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(0.00999999978<u_xlat16_34);
#else
    u_xlatb30 = 0.00999999978<u_xlat16_34;
#endif
    if((int(u_xlatb32) * int(0xffffffffu))==0){discard;}
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn));
#else
    u_xlatb2.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn);
#endif
    u_xlat12.xyz = u_xlat0.xyz * vec3(vec3(_ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness));
    u_xlat3.xyz = vec3(vec3(_ES_CharacterPointLightWholeIntensity, _ES_CharacterPointLightWholeIntensity, _ES_CharacterPointLightWholeIntensity)) * mhy_CharacterPointLightColor.xyz;
    u_xlat9.xyz = _ES_CharacterMainLightColor.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat9.xyz = min(max(u_xlat9.xyz, 0.0), 1.0);
#else
    u_xlat9.xyz = clamp(u_xlat9.xyz, 0.0, 1.0);
#endif
    u_xlat33 = (-mhy_CharacterPointLightColor.w) + 1.0;
    u_xlat3.xyz = u_xlat9.xyz * vec3(u_xlat33) + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat3.xyz = vec3(vec3(_ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio)) * u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat12.xyz = u_xlat12.xyz * u_xlat3.xyz;
    u_xlat3.xyz = _ES_CharacterAmbientLightColor.xyz * vec3(_ES_CharacterAmbientLightRatio);
    u_xlat16_4.xyz = u_xlat12.xyz * vec3(10.0, 10.0, 10.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.xyz = min(max(u_xlat16_4.xyz, 0.0), 1.0);
#else
    u_xlat16_4.xyz = clamp(u_xlat16_4.xyz, 0.0, 1.0);
#endif
    u_xlat12.xyz = u_xlat3.xyz * u_xlat16_4.xyz + u_xlat12.xyz;
    u_xlat16_4.xyz = (u_xlatb2.x) ? u_xlat12.xyz : u_xlat0.xyz;
    u_xlat16_5.xyz = u_xlat0.xyz + (-u_xlat16_4.xyz);
    u_xlat16_5.xyz = vec3(u_xlat16_34) * u_xlat16_5.xyz + u_xlat16_4.xyz;
    u_xlat16_0.xyz = (bool(u_xlatb30)) ? u_xlat16_5.xyz : u_xlat16_4.xyz;
    u_xlat16_4.x = max(u_xlat16_0.z, u_xlat16_0.y);
    u_xlat16_1.w = max(u_xlat16_0.x, u_xlat16_4.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(1.0<u_xlat16_1.w);
#else
    u_xlatb2.x = 1.0<u_xlat16_1.w;
#endif
    u_xlat16_1.xyz = u_xlat16_0.xyz / u_xlat16_1.www;
    u_xlat16_0.w = 1.0;
    u_xlat16_0 = (u_xlatb2.x) ? u_xlat16_1 : u_xlat16_0;
    u_xlat16_4.x = min(u_xlat16_0.w, 1.10000002);
    u_xlat16_14 = u_xlat16_0.w + (-u_xlat16_4.x);
    u_xlat16_4.x = u_xlat16_34 * u_xlat16_14 + u_xlat16_4.x;
    u_xlat16_2.x = u_xlat16_4.x * 0.0500000007;
    SV_Target0.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb12 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_4.x = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb12) ? u_xlat16_4.x : 0.0;
    SV_Target0.w = 0.0156862754;
    SV_Target1.xyz = u_xlat16_0.xyz;
    SV_Target1.w = u_xlat16_2.x;
    SV_Target2.xy = vec2(0.0, 0.0);
    SV_Target2.w = vs_TEXCOORD4;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "LINE_INTERPOLATION" "TOON_SPECULAR_ON" "TOON_LIGHTMAP_ON" "FACE_MAP_NEW_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	vec4 _MainTex_ST;
uniform 	float _FaceMapRotateOffset;
uniform 	float _CharacterAmbientSensorShadowOn;
uniform 	vec4 _AmbientSensorUVs;
uniform 	float _UseClipPlane;
uniform 	float _ClipPlaneWorld;
uniform 	vec4 _ClipPlane;
uniform 	vec4 mhy_AvatarLightDir;
uniform 	vec4 mhy_CharacterOverrideLightDir;
uniform lowp sampler2D _CharacterAmbientSensorTex;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp float vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD6;
vec3 u_xlat0;
bool u_xlatb0;
vec3 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
bool u_xlatb3;
vec4 u_xlat4;
vec4 u_xlat5;
mediump vec2 u_xlat16_6;
float u_xlat7;
bool u_xlatb7;
vec3 u_xlat8;
bvec2 u_xlatb8;
bool u_xlatb9;
mediump float u_xlat16_13;
float u_xlat14;
bool u_xlatb14;
float u_xlat15;
float u_xlat21;
float u_xlat22;
bool u_xlatb22;
float u_xlat23;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.5<mhy_CharacterOverrideLightDir.w);
#else
    u_xlatb0 = 0.5<mhy_CharacterOverrideLightDir.w;
#endif
    u_xlat1.x = mhy_CharacterOverrideLightDir.x;
    u_xlat1.yz = (-mhy_CharacterOverrideLightDir.yz);
    u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat1.xyz : mhy_AvatarLightDir.xyz;
    u_xlat21 = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_ObjectToWorld[1].xyz);
    u_xlat1.x = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_ObjectToWorld[2].xyz);
    u_xlatb8.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseClipPlane, _ClipPlaneWorld, _UseClipPlane, _UseClipPlane)).xy;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(abs(_ClipPlane.w)<0.00100000005);
#else
    u_xlatb22 = abs(_ClipPlane.w)<0.00100000005;
#endif
    u_xlat2.xyz = _ClipPlane.www * _ClipPlane.xyz;
    u_xlat2.xyz = (bool(u_xlatb22)) ? vec3(0.0, 0.0, 0.0) : u_xlat2.xyz;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_WorldToObject[1];
    u_xlat3 = hlslcc_mtx4x4unity_WorldToObject[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat2 = hlslcc_mtx4x4unity_WorldToObject[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat2 = u_xlat2 + hlslcc_mtx4x4unity_WorldToObject[3];
    u_xlat2.xyz = u_xlat2.xyz / u_xlat2.www;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * _ClipPlane.yyy;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _ClipPlane.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _ClipPlane.zzz + u_xlat3.xyz;
    u_xlat22 = dot(u_xlat2.xyz, u_xlat3.xyz);
    u_xlat2.x = dot(in_POSITION0.xyz, u_xlat3.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(u_xlat2.x<u_xlat22);
#else
    u_xlatb9 = u_xlat2.x<u_xlat22;
#endif
    u_xlat22 = (-u_xlat22) + u_xlat2.x;
    u_xlat3.xyz = (-vec3(u_xlat22)) * u_xlat3.xyz + in_POSITION0.xyz;
    u_xlat3.w = 0.0;
    u_xlat4.xyz = in_POSITION0.xyz;
    u_xlat4.w = in_COLOR0.w;
    u_xlat2 = (bool(u_xlatb9)) ? u_xlat3 : u_xlat4;
    u_xlat22 = dot(in_POSITION0.xyz, _ClipPlane.xyz);
    u_xlat3.x = _ClipPlane.w + -0.00999999978;
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(u_xlat22<u_xlat3.x);
#else
    u_xlatb3 = u_xlat22<u_xlat3.x;
#endif
    u_xlat22 = u_xlat22 + (-_ClipPlane.w);
    u_xlat5.xyz = (-vec3(u_xlat22)) * _ClipPlane.xyz + in_POSITION0.xyz;
    u_xlat5.w = 0.0;
    u_xlat3 = (bool(u_xlatb3)) ? u_xlat5 : u_xlat4;
    u_xlat2.xyz = (u_xlatb8.y) ? u_xlat2.xyz : u_xlat3.xyz;
    u_xlat16_6.x = (u_xlatb8.y) ? u_xlat2.w : u_xlat3.w;
    u_xlat2.xyz = (u_xlatb8.x) ? u_xlat2.xyz : in_POSITION0.xyz;
    vs_COLOR0.w = (u_xlatb8.x) ? u_xlat16_6.x : in_COLOR0.w;
    u_xlat3.xyw = (-_WorldSpaceCameraPos.xyz) + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat4.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;
    u_xlat4.y = hlslcc_mtx4x4unity_ObjectToWorld[1].x;
    u_xlat4.z = hlslcc_mtx4x4unity_ObjectToWorld[2].x;
    u_xlat4.w = u_xlat3.x;
    u_xlat2.w = 1.0;
    u_xlat8.x = dot(u_xlat4, u_xlat2);
    u_xlat4.x = hlslcc_mtx4x4unity_ObjectToWorld[0].y;
    u_xlat4.y = hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat4.z = hlslcc_mtx4x4unity_ObjectToWorld[2].y;
    u_xlat4.w = u_xlat3.y;
    u_xlat15 = dot(u_xlat4, u_xlat2);
    u_xlat3.x = hlslcc_mtx4x4unity_ObjectToWorld[0].z;
    u_xlat3.y = hlslcc_mtx4x4unity_ObjectToWorld[1].z;
    u_xlat3.z = hlslcc_mtx4x4unity_ObjectToWorld[2].z;
    u_xlat22 = dot(u_xlat3, u_xlat2);
    u_xlat3.x = hlslcc_mtx4x4unity_ObjectToWorld[0].w;
    u_xlat3.y = hlslcc_mtx4x4unity_ObjectToWorld[1].w;
    u_xlat3.z = hlslcc_mtx4x4unity_ObjectToWorld[2].w;
    u_xlat3.w = hlslcc_mtx4x4unity_ObjectToWorld[3].w;
    u_xlat23 = dot(u_xlat3, u_xlat2);
    u_xlat3 = vec4(u_xlat15) * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat8.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVPZero[2] * vec4(u_xlat22) + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVPZero[3] * vec4(u_xlat23) + u_xlat3;
    u_xlat4 = u_xlat2.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat4 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat2.xxxx + u_xlat4;
    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat2.zzzz + u_xlat4;
    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat2;
    vs_TEXCOORD3.xyz = u_xlat2.xyz / u_xlat2.www;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat2.xz = u_xlat3.xw * vec2(0.5, 0.5);
    u_xlat8.x = u_xlat3.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat8.x * 0.5;
    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat8.xyz = in_NORMAL0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat8.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_NORMAL0.xxx + u_xlat8.xyz;
    u_xlat8.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_NORMAL0.zzz + u_xlat8.xyz;
    u_xlat2.x = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat8.xyz = u_xlat8.xyz * u_xlat2.xxx;
    u_xlat16_6.x = dot(u_xlat8.xyz, u_xlat0.xyz);
    vs_TEXCOORD1.w = u_xlat16_6.x * 0.497500002 + 0.5;
    u_xlat16_6.x = min(abs(u_xlat21), abs(u_xlat1.x));
    u_xlat16_13 = max(abs(u_xlat21), abs(u_xlat1.x));
    u_xlat16_13 = float(1.0) / u_xlat16_13;
    u_xlat16_6.x = u_xlat16_13 * u_xlat16_6.x;
    u_xlat16_13 = u_xlat16_6.x * u_xlat16_6.x;
    u_xlat0.x = u_xlat16_13 * 0.0208350997 + -0.0851330012;
    u_xlat0.x = u_xlat16_13 * u_xlat0.x + 0.180141002;
    u_xlat0.x = u_xlat16_13 * u_xlat0.x + -0.330299497;
    u_xlat0.x = u_xlat16_13 * u_xlat0.x + 0.999866009;
    u_xlat7 = u_xlat0.x * u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(abs(u_xlat21)<abs(u_xlat1.x));
#else
    u_xlatb14 = abs(u_xlat21)<abs(u_xlat1.x);
#endif
    u_xlat7 = u_xlat7 * -2.0 + 1.57079637;
    u_xlat7 = u_xlatb14 ? u_xlat7 : float(0.0);
    u_xlat0.x = u_xlat16_6.x * u_xlat0.x + u_xlat7;
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(u_xlat21<(-u_xlat21));
#else
    u_xlatb7 = u_xlat21<(-u_xlat21);
#endif
    u_xlat7 = u_xlatb7 ? -3.14159274 : float(0.0);
    u_xlat0.x = u_xlat7 + u_xlat0.x;
    u_xlat16_6.x = min(u_xlat21, u_xlat1.x);
    u_xlat16_13 = max(u_xlat21, u_xlat1.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(u_xlat16_6.x<(-u_xlat16_6.x));
#else
    u_xlatb7 = u_xlat16_6.x<(-u_xlat16_6.x);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(u_xlat16_13>=(-u_xlat16_13));
#else
    u_xlatb14 = u_xlat16_13>=(-u_xlat16_13);
#endif
    u_xlatb7 = u_xlatb14 && u_xlatb7;
    u_xlat0.x = (u_xlatb7) ? (-u_xlat0.x) : u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(0.0<(-u_xlat0.x));
#else
    u_xlatb7 = 0.0<(-u_xlat0.x);
#endif
    u_xlat16_6.x = u_xlat0.x * -0.318309903;
    u_xlat0.x = max(_FaceMapRotateOffset, 0.0);
    u_xlat14 = _FaceMapRotateOffset + 1.0;
    u_xlat14 = min(u_xlat14, 1.0);
    u_xlat14 = (-u_xlat0.x) + u_xlat14;
    u_xlat0.x = (-u_xlat0.x) + abs(u_xlat16_6.x);
    u_xlat14 = float(1.0) / u_xlat14;
    u_xlat0.x = u_xlat14 * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat14 = u_xlat0.x * -2.0 + 3.0;
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * u_xlat14;
    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);
    u_xlat0.x = min(u_xlat0.x, 0.999899983);
    u_xlat16_6.xy = in_TEXCOORD0.xy * vec2(-1.0, 1.0) + vec2(1.0, 0.0);
    vs_TEXCOORD6.xy = (bool(u_xlatb7)) ? u_xlat16_6.xy : in_TEXCOORD0.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_CharacterAmbientSensorShadowOn));
#else
    u_xlatb7 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_CharacterAmbientSensorShadowOn);
#endif
    if(u_xlatb7){
        u_xlat7 = textureLod(_CharacterAmbientSensorTex, _AmbientSensorUVs.xy, 0.0).x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb7 = !!(0.5<u_xlat7);
#else
        u_xlatb7 = 0.5<u_xlat7;
#endif
        vs_TEXCOORD4 = u_xlatb7 ? 1.0 : float(0.0);
    } else {
        vs_TEXCOORD4 = 0.0;
    //ENDIF
    }
    gl_Position = u_xlat3;
    vs_COLOR0.xyz = in_COLOR0.xyz;
    vs_TEXCOORD1.xyz = u_xlat8.xyz;
    vs_TEXCOORD2.zw = u_xlat3.zw;
    vs_TEXCOORD6.z = u_xlat0.x;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	mediump vec4 _Color;
uniform 	float _MainTexAlphaUse;
uniform 	mediump float _MainTexAlphaCutoff;
uniform 	float _UseLightMapColorAO;
uniform 	float _UseVertexColorAO;
uniform 	mediump float _LightArea;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	float _UseCoolShadowColorOrTex;
uniform 	mediump vec3 _CoolShadowMultColor;
uniform 	float _UseShadowTransition;
uniform 	float _ShadowTransitionRange;
uniform 	float _ShadowTransitionSoftness;
uniform 	mediump vec3 _SpecularColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	float _FaceBlushStrength;
uniform 	mediump vec3 _FaceBlushColor;
uniform 	float _FaceMapSoftness;
uniform 	mediump float _EmissionScaler;
uniform 	mediump vec3 _EmissionColor_MHY;
uniform 	float _UseMaterial2;
uniform 	mediump vec3 _Color2;
uniform 	mediump vec3 _FirstShadowMultColor2;
uniform 	mediump vec3 _CoolShadowMultColor2;
uniform 	mediump float _Shininess2;
uniform 	mediump float _SpecMulti2;
uniform 	float _ShadowTransitionRange2;
uniform 	float _ShadowTransitionSoftness2;
uniform 	float _UseMaterial3;
uniform 	mediump vec3 _Color3;
uniform 	mediump vec3 _FirstShadowMultColor3;
uniform 	mediump vec3 _CoolShadowMultColor3;
uniform 	mediump float _Shininess3;
uniform 	mediump float _SpecMulti3;
uniform 	float _ShadowTransitionRange3;
uniform 	float _ShadowTransitionSoftness3;
uniform 	float _UseMaterial4;
uniform 	mediump vec3 _Color4;
uniform 	mediump vec3 _FirstShadowMultColor4;
uniform 	mediump vec3 _CoolShadowMultColor4;
uniform 	mediump float _Shininess4;
uniform 	mediump float _SpecMulti4;
uniform 	float _ShadowTransitionRange4;
uniform 	float _ShadowTransitionSoftness4;
uniform 	float _UseMaterial5;
uniform 	mediump vec3 _Color5;
uniform 	mediump vec3 _FirstShadowMultColor5;
uniform 	mediump vec3 _CoolShadowMultColor5;
uniform 	mediump float _Shininess5;
uniform 	mediump float _SpecMulti5;
uniform 	float _ShadowTransitionRange5;
uniform 	float _ShadowTransitionSoftness5;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _TextureBiasWhenDithering;
uniform 	float _UseClipPlane;
uniform 	float _ES_CharacterAmbientLightOn;
uniform 	float _ES_CharacterAmbientBrightness;
uniform 	vec3 _ES_CharacterMainLightColor;
uniform 	vec3 _ES_CharacterAmbientLightColor;
uniform 	float _ES_CharacterMainLightRatio;
uniform 	float _ES_CharacterAmbientLightRatio;
uniform 	float _ES_CharacterColorTone;
uniform 	float _ES_CharacterPointLightWholeIntensity;
uniform 	vec4 mhy_AvatarLightDir;
uniform 	vec4 mhy_CharacterPointLightColor;
uniform 	vec4 mhy_CharacterOverrideLightDir;
uniform 	mediump vec4 _FlowMapColor01;
uniform 	mediump float _FlowScale01;
uniform 	mediump float _FlowMap01_Uspeed;
uniform 	vec4 _FlowMap01_ST;
uniform 	mediump float _FlowMap01_Vspeed;
uniform 	mediump float _Noise_Uspeed;
uniform 	vec4 _Noise_ST;
uniform 	mediump float _Noise_Vspeed;
uniform 	mediump float _NoiseFlowIntensity;
uniform 	mediump float _MaskOffset01;
uniform 	mediump float _NoiseIntensity;
uniform 	mediump float _Mask01_Power;
uniform 	mediump vec4 _FlowMapColor02;
uniform 	mediump float _FlowScale02;
uniform 	mediump float _FlowMap02_Uspeed;
uniform 	vec4 _FlowMap02_ST;
uniform 	mediump float _FlowMap02_Vspeed;
uniform 	mediump float _MaskOffset02;
uniform 	mediump float _Mask02_Power;
uniform 	mediump float _DissolveNoise_Uspeed;
uniform 	vec4 _DissovleNoise_ST;
uniform 	mediump float _DissolveNoise_Vspeed;
uniform 	mediump float _DissovleNoiseScale;
uniform 	mediump float _Dissovle;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _FaceMapTex;
uniform lowp sampler2D _Noise;
uniform lowp sampler2D _FlowMap01;
uniform lowp sampler2D _Mask01;
uniform lowp sampler2D _FlowMap02;
uniform lowp sampler2D _Mask02;
uniform lowp sampler2D _DissovleNoise;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp float vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
vec3 u_xlat2;
mediump float u_xlat16_2;
bvec3 u_xlatb2;
vec3 u_xlat3;
mediump float u_xlat16_3;
lowp vec4 u_xlat10_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
bvec4 u_xlatb5;
vec3 u_xlat6;
mediump vec3 u_xlat16_6;
bvec3 u_xlatb6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
bool u_xlatb11;
vec3 u_xlat13;
mediump vec3 u_xlat16_13;
lowp float u_xlat10_13;
bool u_xlatb13;
float u_xlat14;
mediump vec3 u_xlat16_14;
int u_xlati14;
mediump float u_xlat16_15;
mediump vec3 u_xlat16_18;
mediump vec3 u_xlat16_19;
bvec2 u_xlatb22;
vec2 u_xlat24;
mediump float u_xlat16_30;
float u_xlat33;
mediump float u_xlat16_33;
lowp float u_xlat10_33;
int u_xlati33;
bool u_xlatb33;
float u_xlat35;
float u_xlat36;
int u_xlati36;
bool u_xlatb36;
mediump float u_xlat16_37;
float u_xlat38;
mediump float u_xlat16_38;
int u_xlati38;
mediump float u_xlat16_40;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseClipPlane));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseClipPlane);
#endif
    u_xlat16_1.x = vs_COLOR0.w + -0.00999999978;
#ifdef UNITY_ADRENO_ES3
    u_xlatb11 = !!(u_xlat16_1.x<0.0);
#else
    u_xlatb11 = u_xlat16_1.x<0.0;
#endif
    u_xlatb0 = u_xlatb0 && u_xlatb11;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(_DitherAlpha<0.949999988);
#else
        u_xlatb0 = _DitherAlpha<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb22.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb22.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb22.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = _DitherAlpha * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + -0.00999999978;
#ifdef UNITY_ADRENO_ES3
            u_xlatb0 = !!(u_xlat0.x<0.0);
#else
            u_xlatb0 = u_xlat0.x<0.0;
#endif
            if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(0.5<mhy_CharacterOverrideLightDir.w);
#else
    u_xlatb2.x = 0.5<mhy_CharacterOverrideLightDir.w;
#endif
    u_xlat3.x = mhy_CharacterOverrideLightDir.x;
    u_xlat3.yz = (-mhy_CharacterOverrideLightDir.yz);
    u_xlat2.xyz = (u_xlatb2.x) ? u_xlat3.xyz : mhy_AvatarLightDir.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat33) + u_xlat2.xyz;
    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat0.xyz = vec3(u_xlat33) * u_xlat0.xyz;
    u_xlat33 = _TextureBiasWhenDithering + -1.0;
    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy, u_xlat33);
    u_xlatb2.xyz = equal(vec4(_MainTexAlphaUse), vec4(3.0, 1.0, 2.0, 0.0)).xyz;
    u_xlat35 = u_xlat1.w * _FaceBlushStrength;
    u_xlat3.xyz = (-u_xlat1.xyz) + _FaceBlushColor.xyz;
    u_xlat3.xyz = vec3(u_xlat35) * u_xlat3.xyz + u_xlat1.xyz;
    u_xlat16_4.xyz = (u_xlatb2.x) ? u_xlat3.xyz : u_xlat1.xyz;
    u_xlat16_37 = u_xlat1.w + (-_MainTexAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(u_xlat16_37<0.0);
#else
    u_xlatb2.x = u_xlat16_37<0.0;
#endif
    u_xlatb2.x = u_xlatb2.y && u_xlatb2.x;
    if((int(u_xlatb2.x) * int(0xffffffffu))!=0){discard;}
    u_xlat10_3 = texture(_LightMapTex, vs_TEXCOORD0.xy, u_xlat33);
    u_xlatb2.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseLightMapColorAO, _UseVertexColorAO, _UseLightMapColorAO, _UseLightMapColorAO)).xy;
    u_xlat16_37 = (u_xlatb2.x) ? u_xlat10_3.y : 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseMaterial2));
#else
    u_xlatb33 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseMaterial2);
#endif
    u_xlatb5 = greaterThanEqual(u_xlat10_3.wwww, vec4(0.800000012, 0.400000006, 0.200000003, 0.600000024));
    u_xlatb33 = u_xlatb33 && u_xlatb5.x;
    u_xlat33 = (u_xlatb33) ? 2.0 : 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseMaterial3));
#else
    u_xlatb2.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseMaterial3);
#endif
    u_xlatb2.x = u_xlatb5.y && u_xlatb2.x;
    u_xlatb6.xyz = lessThan(u_xlat10_3.wwww, vec4(0.600000024, 0.400000006, 0.800000012, 0.0)).xyz;
    u_xlatb2.x = u_xlatb2.x && u_xlatb6.x;
    u_xlat33 = (u_xlatb2.x) ? 3.0 : u_xlat33;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseMaterial4));
#else
    u_xlatb2.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseMaterial4);
#endif
    u_xlatb2.x = u_xlatb5.z && u_xlatb2.x;
    u_xlatb2.x = u_xlatb6.y && u_xlatb2.x;
    u_xlat33 = (u_xlatb2.x) ? 4.0 : u_xlat33;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseMaterial5));
#else
    u_xlatb2.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseMaterial5);
#endif
    u_xlatb2.x = u_xlatb5.w && u_xlatb2.x;
    u_xlatb2.x = u_xlatb6.z && u_xlatb2.x;
    u_xlat33 = (u_xlatb2.x) ? 5.0 : u_xlat33;
    u_xlatb5 = equal(vec4(u_xlat33), vec4(2.0, 3.0, 4.0, 5.0));
    u_xlat16_7.xyz = (u_xlatb5.x) ? _Color2.xyz : _Color.xyz;
    u_xlat16_7.xyz = (u_xlatb5.y) ? _Color3.xyz : u_xlat16_7.xyz;
    u_xlat16_7.xyz = (u_xlatb5.z) ? _Color4.xyz : u_xlat16_7.xyz;
    u_xlat16_7.xyz = (u_xlatb5.w) ? _Color5.xyz : u_xlat16_7.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_7.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(0.00999999978<u_xlat1.w);
#else
    u_xlatb2.x = 0.00999999978<u_xlat1.w;
#endif
    u_xlatb2.x = u_xlatb2.x && u_xlatb2.z;
    u_xlat16_7.x = (u_xlatb2.x) ? u_xlat1.w : 0.0;
    u_xlat24.x = texture(_FaceMapTex, vs_TEXCOORD6.xy, -1.0).w;
    u_xlat35 = max(_FaceMapSoftness, 9.99999997e-07);
    u_xlat16_18.x = (-u_xlat35) + vs_TEXCOORD6.z;
    u_xlat16_14.x = max(u_xlat16_18.x, 9.99999975e-05);
    u_xlat16_14.x = min(u_xlat16_14.x, 0.998899996);
    u_xlat16_18.x = u_xlat35 + vs_TEXCOORD6.z;
    u_xlat24.y = min(u_xlat16_18.x, 0.999899983);
    u_xlat24.xy = u_xlat24.xy + (-u_xlat16_14.xx);
    u_xlat35 = float(1.0) / u_xlat24.y;
    u_xlat24.x = u_xlat35 * u_xlat24.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat24.x = min(max(u_xlat24.x, 0.0), 1.0);
#else
    u_xlat24.x = clamp(u_xlat24.x, 0.0, 1.0);
#endif
    u_xlat35 = u_xlat24.x * -2.0 + 3.0;
    u_xlat24.x = u_xlat24.x * u_xlat24.x;
    u_xlat14 = u_xlat24.x * u_xlat35;
    u_xlat16_18.x = u_xlat16_37 * vs_COLOR0.x;
    u_xlat16_37 = (u_xlatb2.y) ? u_xlat16_18.x : u_xlat16_37;
#ifdef UNITY_ADRENO_ES3
    u_xlatb13 = !!(u_xlat16_37<0.0500000007);
#else
    u_xlatb13 = u_xlat16_37<0.0500000007;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb36 = !!(0.949999988<u_xlat16_37);
#else
    u_xlatb36 = 0.949999988<u_xlat16_37;
#endif
    u_xlat6.x = u_xlat16_37 + vs_TEXCOORD1.w;
    u_xlat6.x = u_xlat6.x * 0.5;
    u_xlat16_37 = (u_xlatb36) ? 1.0 : u_xlat6.x;
    u_xlat16_37 = (u_xlatb13) ? 0.0 : u_xlat16_37;
#ifdef UNITY_ADRENO_ES3
    u_xlatb13 = !!(u_xlat16_37<_LightArea);
#else
    u_xlatb13 = u_xlat16_37<_LightArea;
#endif
    if(u_xlatb13){
#ifdef UNITY_ADRENO_ES3
        u_xlatb13 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition));
#else
        u_xlatb13 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition);
#endif
#ifdef UNITY_ADRENO_ES3
        u_xlatb36 = !!(u_xlat33==1.0);
#else
        u_xlatb36 = u_xlat33==1.0;
#endif
        u_xlat16_8.x = (u_xlatb36) ? _ShadowTransitionRange : 0.0;
        u_xlat16_8.y = (u_xlatb36) ? _ShadowTransitionSoftness : 0.0;
        u_xlat16_18.xy = (u_xlatb5.x) ? vec2(_ShadowTransitionRange2, _ShadowTransitionSoftness2) : u_xlat16_8.xy;
        u_xlat16_18.xy = (u_xlatb5.y) ? vec2(_ShadowTransitionRange3, _ShadowTransitionSoftness3) : u_xlat16_18.xy;
        u_xlat16_18.xy = (u_xlatb5.z) ? vec2(_ShadowTransitionRange4, _ShadowTransitionSoftness4) : u_xlat16_18.xy;
        u_xlat16_18.xy = (u_xlatb5.w) ? vec2(_ShadowTransitionRange5, _ShadowTransitionSoftness5) : u_xlat16_18.xy;
        u_xlat16_37 = (-u_xlat16_37) + _LightArea;
        u_xlat16_37 = u_xlat16_37 / u_xlat16_18.x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb36 = !!(u_xlat16_37>=1.0);
#else
        u_xlatb36 = u_xlat16_37>=1.0;
#endif
        u_xlat16_38 = u_xlat16_37 + 0.00999999978;
        u_xlat16_38 = log2(u_xlat16_38);
        u_xlat16_38 = u_xlat16_38 * u_xlat16_18.y;
        u_xlat16_38 = exp2(u_xlat16_38);
        u_xlat38 = min(u_xlat16_38, 1.0);
        u_xlat36 = (u_xlatb36) ? 1.0 : u_xlat38;
        u_xlat13.x = (u_xlatb13) ? u_xlat36 : 1.0;
        u_xlat16_37 = 0.0;
    } else {
        u_xlat13.x = 0.0;
        u_xlat16_37 = 1.0;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb36 = !!(0.5<u_xlat10_3.x);
#else
    u_xlatb36 = 0.5<u_xlat10_3.x;
#endif
    u_xlat16_18.x = min(u_xlat14, u_xlat16_37);
    u_xlat16_37 = (u_xlatb36) ? u_xlat16_18.x : u_xlat16_37;
    u_xlat16_37 = (-u_xlat16_37) + 1.0;
#ifdef UNITY_ADRENO_ES3
    { bool cond = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(vs_TEXCOORD4); u_xlati14 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati14 = int((vec4(0.0, 0.0, 0.0, 0.0)!=vec4(vs_TEXCOORD4)) ? 0xFFFFFFFFu : uint(0u));
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(u_xlat33==1.0);
#else
    u_xlatb33 = u_xlat33==1.0;
#endif
    if(u_xlatb33){
#ifdef UNITY_ADRENO_ES3
        u_xlatb36 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex));
#else
        u_xlatb36 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex);
#endif
        u_xlat16_6.xyz = vec3(_FirstShadowMultColor.xxyz.y + (-_CoolShadowMultColor.x), _FirstShadowMultColor.xxyz.z + (-_CoolShadowMultColor.y), float(_FirstShadowMultColor.z) + (-_CoolShadowMultColor.z));
        u_xlat6.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_6.xyz + _CoolShadowMultColor.xyz;
        u_xlat16_18.xyz = (bool(u_xlatb36)) ? u_xlat6.xyz : vec3(_FirstShadowMultColor.x, _FirstShadowMultColor.y, _FirstShadowMultColor.z);
    } else {
        if(u_xlatb5.x){
#ifdef UNITY_ADRENO_ES3
            u_xlatb36 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex));
#else
            u_xlatb36 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex);
#endif
            u_xlat16_6.xyz = _FirstShadowMultColor2.xyz + (-_CoolShadowMultColor2.xyz);
            u_xlat6.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_6.xyz + _CoolShadowMultColor2.xyz;
            u_xlat16_18.xyz = (bool(u_xlatb36)) ? u_xlat6.xyz : _FirstShadowMultColor2.xyz;
        } else {
#ifdef UNITY_ADRENO_ES3
            u_xlatb36 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex));
#else
            u_xlatb36 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex);
#endif
            u_xlat16_6.xyz = _FirstShadowMultColor3.xyz + (-_CoolShadowMultColor3.xyz);
            u_xlat6.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_6.xyz + _CoolShadowMultColor3.xyz;
            u_xlat16_8.xyz = (bool(u_xlatb36)) ? u_xlat6.xyz : _FirstShadowMultColor3.xyz;
            u_xlat16_6.xyz = _FirstShadowMultColor4.xyz + (-_CoolShadowMultColor4.xyz);
            u_xlat6.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_6.xyz + _CoolShadowMultColor4.xyz;
            u_xlat16_9.xyz = (bool(u_xlatb36)) ? u_xlat6.xyz : _FirstShadowMultColor4.xyz;
            u_xlat16_6.xyz = _FirstShadowMultColor5.xyz + (-_CoolShadowMultColor5.xyz);
            u_xlat6.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_6.xyz + _CoolShadowMultColor5.xyz;
            u_xlat16_10.xyz = (bool(u_xlatb36)) ? u_xlat6.xyz : _FirstShadowMultColor5.xyz;
            u_xlat16_9.xyz = (u_xlatb5.z) ? u_xlat16_9.xyz : u_xlat16_10.xyz;
            u_xlat16_18.xyz = (u_xlatb5.y) ? u_xlat16_8.xyz : u_xlat16_9.xyz;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb36 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition));
#else
    u_xlatb36 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition);
#endif
    u_xlati38 = ~u_xlati14;
    u_xlati36 = u_xlatb36 ? u_xlati38 : int(0);
    u_xlat16_6.xyz = u_xlat16_18.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat6.xyz = u_xlat13.xxx * u_xlat16_6.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_18.xyz = (int(u_xlati36) != 0) ? u_xlat6.xyz : u_xlat16_18.xyz;
    u_xlat16_8.x = (-u_xlat35) * u_xlat24.x + 1.0;
    u_xlat16_19.xyz = u_xlat16_18.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat16_8.xyz = u_xlat16_8.xxx * u_xlat16_19.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_18.xyz = (int(u_xlati14) != 0) ? u_xlat16_18.xyz : u_xlat16_8.xyz;
    u_xlat16_8.x = (u_xlatb5.z) ? _Shininess4 : _Shininess5;
    u_xlat16_19.x = (u_xlatb5.z) ? _SpecMulti4 : _SpecMulti5;
    u_xlat16_8.x = (u_xlatb5.y) ? _Shininess3 : u_xlat16_8.x;
    u_xlat16_19.x = (u_xlatb5.y) ? _SpecMulti3 : u_xlat16_19.x;
    u_xlat16_8.x = (u_xlatb5.x) ? _Shininess2 : u_xlat16_8.x;
    u_xlat16_19.x = (u_xlatb5.x) ? _SpecMulti2 : u_xlat16_19.x;
    u_xlat16_8.x = (u_xlatb33) ? _Shininess : u_xlat16_8.x;
    u_xlat16_19.x = (u_xlatb33) ? _SpecMulti : u_xlat16_19.x;
    u_xlat16_30 = dot(vs_TEXCOORD1.xyz, u_xlat0.xyz);
    u_xlat16_30 = max(u_xlat16_30, 0.00100000005);
    u_xlat16_30 = log2(u_xlat16_30);
    u_xlat16_8.x = u_xlat16_30 * u_xlat16_8.x;
    u_xlat16_8.x = exp2(u_xlat16_8.x);
    u_xlat0.x = (-u_xlat10_3.z) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat0.x<u_xlat16_8.x);
#else
    u_xlatb0 = u_xlat0.x<u_xlat16_8.x;
#endif
    u_xlat16_8.xyz = u_xlat16_19.xxx * _SpecularColor.xyz;
    u_xlat16_8.xyz = u_xlat10_3.xxx * u_xlat16_8.xyz;
    u_xlat16_8.xyz = (bool(u_xlatb0)) ? u_xlat16_8.xyz : vec3(0.0, 0.0, 0.0);
    u_xlat16_4.xyz = vec3(u_xlat16_4.x * _EmissionColor_MHY.xxyz.y, u_xlat16_4.y * _EmissionColor_MHY.xxyz.z, u_xlat16_4.z * float(_EmissionColor_MHY.z));
    u_xlat0.xyz = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(u_xlat16_37==1.0);
#else
    u_xlatb33 = u_xlat16_37==1.0;
#endif
    u_xlati33 = int(uint(u_xlatb33) * 0xffffffffu | uint(u_xlati14));
    u_xlat13.xyz = u_xlat0.xyz * u_xlat16_18.xyz;
    u_xlat0.xyz = (int(u_xlati33) != 0) ? u_xlat13.xyz : u_xlat0.xyz;
    u_xlat0.xyz = u_xlat16_8.xyz + u_xlat0.xyz;
    u_xlat13.xy = vs_TEXCOORD0.zw * _FlowMap01_ST.xy + _FlowMap01_ST.zw;
    u_xlat16_8.x = _Time.y * _FlowMap01_Uspeed + u_xlat13.x;
    u_xlat16_8.y = _Time.y * _FlowMap01_Vspeed + u_xlat13.y;
    u_xlat13.xy = vs_TEXCOORD0.zw * _Noise_ST.xy + _Noise_ST.zw;
    u_xlat16_9.x = _Time.y * _Noise_Uspeed + u_xlat13.x;
    u_xlat16_9.y = _Time.y * _Noise_Vspeed + u_xlat13.y;
    u_xlat10_33 = textureLod(_Noise, u_xlat16_9.xy, 0.0).x;
    u_xlat16_37 = _MaskOffset01 * 1.39999998 + -0.699999988;
    u_xlat16_18.x = u_xlat10_33 * _NoiseIntensity;
    u_xlat13.xy = vs_TEXCOORD0.zw * _FlowMap02_ST.xy + _FlowMap02_ST.zw;
    u_xlat16_9.x = _Time.y * _FlowMap02_Uspeed + u_xlat13.x;
    u_xlat16_9.y = _Time.y * _FlowMap02_Vspeed + u_xlat13.y;
    u_xlat16_40 = _MaskOffset02 * 1.39999998 + -0.699999988;
    u_xlat16_10.xyz = _FlowMapColor01.xyz * vec3(_FlowScale01);
    u_xlat16_8.xy = vec2(u_xlat10_33) * vec2(vec2(_NoiseFlowIntensity, _NoiseFlowIntensity)) + u_xlat16_8.xy;
    u_xlat10_13 = textureLod(_FlowMap01, u_xlat16_8.xy, 0.0).x;
    u_xlat16_13.xyz = vec3(u_xlat10_13) * u_xlat16_10.xyz;
    u_xlat16_8.x = (-vs_TEXCOORD0.z) + 1.0;
    u_xlat16_1.x = u_xlat16_37 + u_xlat16_8.x;
    u_xlat16_1.yw = vec2(u_xlat10_33) * vec2(vec2(_NoiseIntensity, _NoiseIntensity)) + (-vs_TEXCOORD0.ww);
    u_xlat16_18.y = 1.0;
    u_xlat16_19.xy = u_xlat16_1.xy + u_xlat16_18.xy;
    u_xlat10_3.x = textureLod(_Mask01, u_xlat16_19.xy, 0.0).x;
    u_xlat16_3 = max(u_xlat10_3.x, 9.99999975e-05);
    u_xlat16_3 = log2(u_xlat16_3);
    u_xlat16_3 = u_xlat16_3 * _Mask01_Power;
    u_xlat16_3 = exp2(u_xlat16_3);
    u_xlat16_19.xyz = _FlowMapColor02.xyz * vec3(_FlowScale02);
    u_xlat16_9.xy = vec2(u_xlat10_33) * vec2(vec2(_NoiseFlowIntensity, _NoiseFlowIntensity)) + u_xlat16_9.xy;
    u_xlat10_33 = textureLod(_FlowMap02, u_xlat16_9.xy, 0.0).x;
    u_xlat16_14.xyz = vec3(u_xlat10_33) * u_xlat16_19.xyz;
    u_xlat16_1.z = u_xlat16_40 + u_xlat16_8.x;
    u_xlat16_18.xy = vec2(u_xlat16_1.z + u_xlat16_18.x, u_xlat16_1.w + u_xlat16_18.y);
    u_xlat10_33 = textureLod(_Mask02, u_xlat16_18.xy, 0.0).x;
    u_xlat16_33 = max(u_xlat10_33, 9.99999975e-05);
    u_xlat16_33 = log2(u_xlat16_33);
    u_xlat16_33 = u_xlat16_33 * _Mask02_Power;
    u_xlat16_33 = exp2(u_xlat16_33);
    u_xlat16_14.xyz = vec3(u_xlat16_33) * u_xlat16_14.xyz;
    u_xlat16_13.xyz = u_xlat16_13.xyz * vec3(u_xlat16_3) + u_xlat16_14.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(_EmissionScaler) + u_xlat16_13.xyz;
    u_xlat3.xyz = (-u_xlat0.xyz) + u_xlat16_4.xyz;
    u_xlat3.xyz = u_xlat16_7.xxx * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat5.xy = vs_TEXCOORD0.zw * _DissovleNoise_ST.xy + _DissovleNoise_ST.zw;
    u_xlat16_4.x = _Time.y * _DissolveNoise_Uspeed + u_xlat5.x;
    u_xlat16_4.y = _Time.y * _DissolveNoise_Vspeed + u_xlat5.y;
    u_xlat10_33 = textureLod(_DissovleNoise, u_xlat16_4.xy, 0.0).x;
    u_xlat33 = u_xlat10_33 * _DissovleNoiseScale + vs_TEXCOORD0.z;
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(_Dissovle>=u_xlat33);
#else
    u_xlatb33 = _Dissovle>=u_xlat33;
#endif
    u_xlat0.xyz = (u_xlatb2.x) ? u_xlat3.xyz : u_xlat0.xyz;
    u_xlat0.xyz = u_xlat16_13.xyz + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(0.00999999978<u_xlat16_7.x);
#else
    u_xlatb2.x = 0.00999999978<u_xlat16_7.x;
#endif
    if((int(u_xlatb33) * int(0xffffffffu))==0){discard;}
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn));
#else
    u_xlatb33 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn);
#endif
    u_xlat13.xyz = u_xlat0.xyz * vec3(vec3(_ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness));
    u_xlat3.xyz = vec3(vec3(_ES_CharacterPointLightWholeIntensity, _ES_CharacterPointLightWholeIntensity, _ES_CharacterPointLightWholeIntensity)) * mhy_CharacterPointLightColor.xyz;
    u_xlat5.xyz = _ES_CharacterMainLightColor.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.xyz = min(max(u_xlat5.xyz, 0.0), 1.0);
#else
    u_xlat5.xyz = clamp(u_xlat5.xyz, 0.0, 1.0);
#endif
    u_xlat36 = (-mhy_CharacterPointLightColor.w) + 1.0;
    u_xlat3.xyz = u_xlat5.xyz * vec3(u_xlat36) + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat3.xyz = vec3(vec3(_ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio)) * u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat13.xyz = u_xlat13.xyz * u_xlat3.xyz;
    u_xlat3.xyz = _ES_CharacterAmbientLightColor.xyz * vec3(_ES_CharacterAmbientLightRatio);
    u_xlat16_4.xyz = u_xlat13.xyz * vec3(10.0, 10.0, 10.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.xyz = min(max(u_xlat16_4.xyz, 0.0), 1.0);
#else
    u_xlat16_4.xyz = clamp(u_xlat16_4.xyz, 0.0, 1.0);
#endif
    u_xlat13.xyz = u_xlat3.xyz * u_xlat16_4.xyz + u_xlat13.xyz;
    u_xlat16_4.xyz = (bool(u_xlatb33)) ? u_xlat13.xyz : u_xlat0.xyz;
    u_xlat16_18.xyz = u_xlat0.xyz + (-u_xlat16_4.xyz);
    u_xlat16_18.xyz = u_xlat16_7.xxx * u_xlat16_18.xyz + u_xlat16_4.xyz;
    u_xlat16_0.xyz = (u_xlatb2.x) ? u_xlat16_18.xyz : u_xlat16_4.xyz;
    u_xlat16_4.x = max(u_xlat16_0.z, u_xlat16_0.y);
    u_xlat16_1.w = max(u_xlat16_0.x, u_xlat16_4.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(1.0<u_xlat16_1.w);
#else
    u_xlatb2.x = 1.0<u_xlat16_1.w;
#endif
    u_xlat16_1.xyz = u_xlat16_0.xyz / u_xlat16_1.www;
    u_xlat16_0.w = 1.0;
    u_xlat16_0 = (u_xlatb2.x) ? u_xlat16_1 : u_xlat16_0;
    u_xlat16_4.x = min(u_xlat16_0.w, 1.10000002);
    u_xlat16_15 = u_xlat16_0.w + (-u_xlat16_4.x);
    u_xlat16_4.x = u_xlat16_7.x * u_xlat16_15 + u_xlat16_4.x;
    u_xlat16_2 = u_xlat16_4.x * 0.0500000007;
    SV_Target0.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb13 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb13 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_4.x = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb13) ? u_xlat16_4.x : 0.0;
    SV_Target0.w = 0.0156862754;
    SV_Target1.xyz = u_xlat16_0.xyz;
    SV_Target1.w = u_xlat16_2;
    SV_Target2.xy = vec2(0.0, 0.0);
    SV_Target2.w = vs_TEXCOORD4;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "LINE_INTERPOLATION" "FACE_MAP_NEW_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _MainTex_ST;
uniform 	float _FaceMapRotateOffset;
uniform 	float _CharacterAmbientSensorShadowOn;
uniform 	vec4 _AmbientSensorUVs;
uniform 	float _UseClipPlane;
uniform 	float _ClipPlaneWorld;
uniform 	vec4 _ClipPlane;
uniform 	vec4 mhy_AvatarLightDir;
uniform 	vec4 mhy_CharacterOverrideLightDir;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
struct unity_Builtins1Array_Type {
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw1 {
	unity_Builtins1Array_Type unity_Builtins1Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform lowp sampler2D _CharacterAmbientSensorTex;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp float vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD6;
flat out highp uint vs_SV_InstanceID0;
float u_xlat0;
int u_xlati0;
vec3 u_xlat1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
vec4 u_xlat4;
mediump float u_xlat16_5;
vec3 u_xlat6;
bool u_xlatb6;
float u_xlat7;
mediump vec2 u_xlat16_11;
float u_xlat12;
bool u_xlatb12;
float u_xlat13;
bool u_xlatb13;
mediump float u_xlat16_17;
float u_xlat19;
bool u_xlatb19;
float u_xlat20;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.5<mhy_CharacterOverrideLightDir.w);
#else
    u_xlatb6 = 0.5<mhy_CharacterOverrideLightDir.w;
#endif
    u_xlat1.x = mhy_CharacterOverrideLightDir.x;
    u_xlat1.yz = (-mhy_CharacterOverrideLightDir.yz);
    u_xlat6.xyz = (bool(u_xlatb6)) ? u_xlat1.xyz : mhy_AvatarLightDir.xyz;
    u_xlati0 = u_xlati0 << 2;
    u_xlat1.x = dot(u_xlat6.xyz, unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz);
    u_xlat7 = dot(u_xlat6.xyz, unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb13 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseClipPlane));
#else
    u_xlatb13 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseClipPlane);
#endif
    if(u_xlatb13){
#ifdef UNITY_ADRENO_ES3
        u_xlatb13 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ClipPlaneWorld));
#else
        u_xlatb13 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ClipPlaneWorld);
#endif
        if(u_xlatb13){
#ifdef UNITY_ADRENO_ES3
            u_xlatb13 = !!(abs(_ClipPlane.w)<0.00100000005);
#else
            u_xlatb13 = abs(_ClipPlane.w)<0.00100000005;
#endif
            u_xlat2.xyz = _ClipPlane.www * _ClipPlane.xyz;
            u_xlat2.xyz = (bool(u_xlatb13)) ? vec3(0.0, 0.0, 0.0) : u_xlat2.xyz;
            u_xlat3 = u_xlat2.yyyy * unity_Builtins1Array[u_xlati0 / 4].hlslcc_mtx4x4unity_WorldToObjectArray[1];
            u_xlat3 = unity_Builtins1Array[u_xlati0 / 4].hlslcc_mtx4x4unity_WorldToObjectArray[0] * u_xlat2.xxxx + u_xlat3;
            u_xlat2 = unity_Builtins1Array[u_xlati0 / 4].hlslcc_mtx4x4unity_WorldToObjectArray[2] * u_xlat2.zzzz + u_xlat3;
            u_xlat2 = u_xlat2 + unity_Builtins1Array[u_xlati0 / 4].hlslcc_mtx4x4unity_WorldToObjectArray[3];
            u_xlat2.xyz = u_xlat2.xyz / u_xlat2.www;
            u_xlat3.xyz = _ClipPlane.yyy * unity_Builtins1Array[u_xlati0 / 4].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz;
            u_xlat3.xyz = unity_Builtins1Array[u_xlati0 / 4].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz * _ClipPlane.xxx + u_xlat3.xyz;
            u_xlat3.xyz = unity_Builtins1Array[u_xlati0 / 4].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz * _ClipPlane.zzz + u_xlat3.xyz;
            u_xlat13 = dot(u_xlat2.xyz, u_xlat3.xyz);
            u_xlat19 = dot(in_POSITION0.xyz, u_xlat3.xyz);
#ifdef UNITY_ADRENO_ES3
            u_xlatb2 = !!(u_xlat19<u_xlat13);
#else
            u_xlatb2 = u_xlat19<u_xlat13;
#endif
            u_xlat13 = (-u_xlat13) + u_xlat19;
            u_xlat3.xyz = (-vec3(u_xlat13)) * u_xlat3.xyz + in_POSITION0.xyz;
            u_xlat3.w = 0.0;
            u_xlat4.xyz = in_POSITION0.xyz;
            u_xlat4.w = in_COLOR0.w;
            u_xlat2 = (bool(u_xlatb2)) ? u_xlat3 : u_xlat4;
            u_xlat16_5 = u_xlat2.w;
        } else {
            u_xlat13 = dot(in_POSITION0.xyz, _ClipPlane.xyz);
            u_xlat19 = _ClipPlane.w + -0.00999999978;
#ifdef UNITY_ADRENO_ES3
            u_xlatb19 = !!(u_xlat13<u_xlat19);
#else
            u_xlatb19 = u_xlat13<u_xlat19;
#endif
            u_xlat13 = u_xlat13 + (-_ClipPlane.w);
            u_xlat3.xyz = (-vec3(u_xlat13)) * _ClipPlane.xyz + in_POSITION0.xyz;
            u_xlat3.w = 0.0;
            u_xlat4.xyz = in_POSITION0.xyz;
            u_xlat4.w = in_COLOR0.w;
            u_xlat2 = (bool(u_xlatb19)) ? u_xlat3 : u_xlat4;
            u_xlat16_5 = u_xlat2.w;
        //ENDIF
        }
    } else {
        u_xlat2.xyz = in_POSITION0.xyz;
        u_xlat16_5 = in_COLOR0.w;
    //ENDIF
    }
    u_xlat3.xyw = (-_WorldSpaceCameraPos.xyz) + unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat4.x = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].x;
    u_xlat4.y = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].x;
    u_xlat4.z = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].x;
    u_xlat4.w = u_xlat3.x;
    u_xlat2.w = 1.0;
    u_xlat13 = dot(u_xlat4, u_xlat2);
    u_xlat4.x = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].y;
    u_xlat4.y = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].y;
    u_xlat4.z = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].y;
    u_xlat4.w = u_xlat3.y;
    u_xlat19 = dot(u_xlat4, u_xlat2);
    u_xlat3.x = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].z;
    u_xlat3.y = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].z;
    u_xlat3.z = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].z;
    u_xlat3.x = dot(u_xlat3, u_xlat2);
    u_xlat4.x = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].w;
    u_xlat4.y = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].w;
    u_xlat4.z = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].w;
    u_xlat4.w = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3].w;
    u_xlat20 = dot(u_xlat4, u_xlat2);
    u_xlat4 = vec4(u_xlat19) * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat4 = hlslcc_mtx4x4unity_MatrixVPZero[0] * vec4(u_xlat13) + u_xlat4;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat3.xxxx + u_xlat4;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVPZero[3] * vec4(u_xlat20) + u_xlat3;
    u_xlat4 = u_xlat2.yyyy * unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat4 = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * u_xlat2.xxxx + u_xlat4;
    u_xlat2 = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * u_xlat2.zzzz + u_xlat4;
    u_xlat2 = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3] * in_POSITION0.wwww + u_xlat2;
    vs_TEXCOORD3.xyz = u_xlat2.xyz / u_xlat2.www;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat2.xz = u_xlat3.xw * vec2(0.5, 0.5);
    u_xlat13 = u_xlat3.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat13 * 0.5;
    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat2.xyz = in_NORMAL0.yyy * unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat2.xyz = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_NORMAL0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_NORMAL0.zzz + u_xlat2.xyz;
    u_xlat0 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0 = inversesqrt(u_xlat0);
    u_xlat2.xyz = vec3(u_xlat0) * u_xlat2.xyz;
    u_xlat16_11.x = dot(u_xlat2.xyz, u_xlat6.xyz);
    vs_TEXCOORD1.w = u_xlat16_11.x * 0.497500002 + 0.5;
    u_xlat16_11.x = min(abs(u_xlat1.x), abs(u_xlat7));
    u_xlat16_17 = max(abs(u_xlat1.x), abs(u_xlat7));
    u_xlat16_17 = float(1.0) / u_xlat16_17;
    u_xlat16_11.x = u_xlat16_17 * u_xlat16_11.x;
    u_xlat16_17 = u_xlat16_11.x * u_xlat16_11.x;
    u_xlat0 = u_xlat16_17 * 0.0208350997 + -0.0851330012;
    u_xlat0 = u_xlat16_17 * u_xlat0 + 0.180141002;
    u_xlat0 = u_xlat16_17 * u_xlat0 + -0.330299497;
    u_xlat0 = u_xlat16_17 * u_xlat0 + 0.999866009;
    u_xlat6.x = u_xlat0 * u_xlat16_11.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(abs(u_xlat1.x)<abs(u_xlat7));
#else
    u_xlatb12 = abs(u_xlat1.x)<abs(u_xlat7);
#endif
    u_xlat6.x = u_xlat6.x * -2.0 + 1.57079637;
    u_xlat6.x = u_xlatb12 ? u_xlat6.x : float(0.0);
    u_xlat0 = u_xlat16_11.x * u_xlat0 + u_xlat6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(u_xlat1.x<(-u_xlat1.x));
#else
    u_xlatb6 = u_xlat1.x<(-u_xlat1.x);
#endif
    u_xlat6.x = u_xlatb6 ? -3.14159274 : float(0.0);
    u_xlat0 = u_xlat6.x + u_xlat0;
    u_xlat16_11.x = min(u_xlat1.x, u_xlat7);
    u_xlat16_17 = max(u_xlat1.x, u_xlat7);
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(u_xlat16_11.x<(-u_xlat16_11.x));
#else
    u_xlatb6 = u_xlat16_11.x<(-u_xlat16_11.x);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat16_17>=(-u_xlat16_17));
#else
    u_xlatb12 = u_xlat16_17>=(-u_xlat16_17);
#endif
    u_xlatb6 = u_xlatb12 && u_xlatb6;
    u_xlat0 = (u_xlatb6) ? (-u_xlat0) : u_xlat0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.0<(-u_xlat0));
#else
    u_xlatb6 = 0.0<(-u_xlat0);
#endif
    u_xlat16_11.x = u_xlat0 * -0.318309903;
    u_xlat0 = max(_FaceMapRotateOffset, 0.0);
    u_xlat12 = _FaceMapRotateOffset + 1.0;
    u_xlat12 = min(u_xlat12, 1.0);
    u_xlat12 = (-u_xlat0) + u_xlat12;
    u_xlat0 = (-u_xlat0) + abs(u_xlat16_11.x);
    u_xlat12 = float(1.0) / u_xlat12;
    u_xlat0 = u_xlat12 * u_xlat0;
#ifdef UNITY_ADRENO_ES3
    u_xlat0 = min(max(u_xlat0, 0.0), 1.0);
#else
    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
#endif
    u_xlat12 = u_xlat0 * -2.0 + 3.0;
    u_xlat0 = u_xlat0 * u_xlat0;
    u_xlat0 = u_xlat0 * u_xlat12;
    u_xlat0 = max(u_xlat0, 9.99999975e-05);
    u_xlat0 = min(u_xlat0, 0.999899983);
    u_xlat16_11.xy = in_TEXCOORD0.xy * vec2(-1.0, 1.0) + vec2(1.0, 0.0);
    vs_TEXCOORD6.xy = (bool(u_xlatb6)) ? u_xlat16_11.xy : in_TEXCOORD0.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_CharacterAmbientSensorShadowOn));
#else
    u_xlatb6 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_CharacterAmbientSensorShadowOn);
#endif
    if(u_xlatb6){
        u_xlat6.x = textureLod(_CharacterAmbientSensorTex, _AmbientSensorUVs.xy, 0.0).x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb6 = !!(0.5<u_xlat6.x);
#else
        u_xlatb6 = 0.5<u_xlat6.x;
#endif
        vs_TEXCOORD4 = u_xlatb6 ? 1.0 : float(0.0);
    } else {
        vs_TEXCOORD4 = 0.0;
    //ENDIF
    }
    gl_Position = u_xlat3;
    vs_COLOR0.xyz = in_COLOR0.xyz;
    vs_COLOR0.w = u_xlat16_5;
    vs_TEXCOORD1.xyz = u_xlat2.xyz;
    vs_TEXCOORD2.zw = u_xlat3.zw;
    vs_TEXCOORD6.z = u_xlat0;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	mediump vec4 _Color;
uniform 	float _MainTexAlphaUse;
uniform 	mediump float _MainTexAlphaCutoff;
uniform 	float _UseVertexColorAO;
uniform 	mediump float _LightArea;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	float _UseCoolShadowColorOrTex;
uniform 	mediump vec3 _CoolShadowMultColor;
uniform 	float _UseShadowTransition;
uniform 	float _ShadowTransitionRange;
uniform 	float _ShadowTransitionSoftness;
uniform 	mediump vec3 _SpecularColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	float _FaceBlushStrength;
uniform 	mediump vec3 _FaceBlushColor;
uniform 	mediump float _EmissionScaler;
uniform 	mediump vec3 _EmissionColor_MHY;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _TextureBiasWhenDithering;
uniform 	float _UseClipPlane;
uniform 	float _ES_CharacterAmbientLightOn;
uniform 	float _ES_CharacterAmbientBrightness;
uniform 	vec3 _ES_CharacterMainLightColor;
uniform 	vec3 _ES_CharacterAmbientLightColor;
uniform 	float _ES_CharacterMainLightRatio;
uniform 	float _ES_CharacterAmbientLightRatio;
uniform 	float _ES_CharacterColorTone;
uniform 	float _ES_CharacterPointLightWholeIntensity;
uniform 	vec4 mhy_AvatarLightDir;
uniform 	vec4 mhy_CharacterPointLightColor;
uniform 	vec4 mhy_CharacterOverrideLightDir;
uniform 	mediump vec4 _FlowMapColor01;
uniform 	mediump float _FlowScale01;
uniform 	mediump float _FlowMap01_Uspeed;
uniform 	vec4 _FlowMap01_ST;
uniform 	mediump float _FlowMap01_Vspeed;
uniform 	mediump float _Noise_Uspeed;
uniform 	vec4 _Noise_ST;
uniform 	mediump float _Noise_Vspeed;
uniform 	mediump float _NoiseFlowIntensity;
uniform 	mediump float _MaskOffset01;
uniform 	mediump float _NoiseIntensity;
uniform 	mediump float _Mask01_Power;
uniform 	mediump vec4 _FlowMapColor02;
uniform 	mediump float _FlowScale02;
uniform 	mediump float _FlowMap02_Uspeed;
uniform 	vec4 _FlowMap02_ST;
uniform 	mediump float _FlowMap02_Vspeed;
uniform 	mediump float _MaskOffset02;
uniform 	mediump float _Mask02_Power;
uniform 	mediump float _DissolveNoise_Uspeed;
uniform 	vec4 _DissovleNoise_ST;
uniform 	mediump float _DissolveNoise_Vspeed;
uniform 	mediump float _DissovleNoiseScale;
uniform 	mediump float _Dissovle;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _Noise;
uniform lowp sampler2D _FlowMap01;
uniform lowp sampler2D _Mask01;
uniform lowp sampler2D _FlowMap02;
uniform lowp sampler2D _Mask02;
uniform lowp sampler2D _DissovleNoise;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp float vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
lowp float u_xlat10_2;
int u_xlati2;
bvec3 u_xlatb2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
lowp float u_xlat10_3;
int u_xlati3;
bool u_xlatb3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec2 u_xlat16_7;
mediump vec3 u_xlat16_8;
vec3 u_xlat9;
bool u_xlatb10;
vec3 u_xlat12;
mediump vec3 u_xlat16_12;
lowp float u_xlat10_12;
int u_xlati12;
bool u_xlatb12;
vec3 u_xlat13;
mediump vec3 u_xlat16_13;
mediump float u_xlat16_14;
mediump vec2 u_xlat16_15;
mediump vec2 u_xlat16_16;
bvec2 u_xlatb20;
float u_xlat22;
bool u_xlatb22;
mediump vec2 u_xlat16_25;
float u_xlat30;
bool u_xlatb30;
float u_xlat32;
mediump float u_xlat16_32;
lowp float u_xlat10_32;
int u_xlati32;
bool u_xlatb32;
float u_xlat33;
mediump float u_xlat16_34;
mediump float u_xlat16_35;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseClipPlane));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseClipPlane);
#endif
    u_xlat16_1.x = vs_COLOR0.w + -0.00999999978;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(u_xlat16_1.x<0.0);
#else
    u_xlatb10 = u_xlat16_1.x<0.0;
#endif
    u_xlatb0 = u_xlatb0 && u_xlatb10;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(_DitherAlpha<0.949999988);
#else
        u_xlatb0 = _DitherAlpha<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb20.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb20.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb20.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = _DitherAlpha * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + -0.00999999978;
#ifdef UNITY_ADRENO_ES3
            u_xlatb0 = !!(u_xlat0.x<0.0);
#else
            u_xlatb0 = u_xlat0.x<0.0;
#endif
            if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(0.5<mhy_CharacterOverrideLightDir.w);
#else
    u_xlatb2.x = 0.5<mhy_CharacterOverrideLightDir.w;
#endif
    u_xlat3.x = mhy_CharacterOverrideLightDir.x;
    u_xlat3.yz = (-mhy_CharacterOverrideLightDir.yz);
    u_xlat2.xyz = (u_xlatb2.x) ? u_xlat3.xyz : mhy_AvatarLightDir.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat30) + u_xlat2.xyz;
    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
    u_xlat30 = _TextureBiasWhenDithering + -1.0;
    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy, u_xlat30);
    u_xlatb2.xyz = equal(vec4(_MainTexAlphaUse), vec4(3.0, 1.0, 2.0, 0.0)).xyz;
    u_xlat30 = u_xlat1.w * _FaceBlushStrength;
    u_xlat3.xyz = (-u_xlat1.xyz) + _FaceBlushColor.xyz;
    u_xlat3.xyz = vec3(u_xlat30) * u_xlat3.xyz + u_xlat1.xyz;
    u_xlat16_4.xyz = (u_xlatb2.x) ? u_xlat3.xyz : u_xlat1.xyz;
    u_xlat16_34 = u_xlat1.w + (-_MainTexAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(u_xlat16_34<0.0);
#else
    u_xlatb30 = u_xlat16_34<0.0;
#endif
    u_xlatb30 = u_xlatb2.y && u_xlatb30;
    if((int(u_xlatb30) * int(0xffffffffu))!=0){discard;}
    u_xlat16_4.xyz = u_xlat16_4.xyz * _Color.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(0.00999999978<u_xlat1.w);
#else
    u_xlatb30 = 0.00999999978<u_xlat1.w;
#endif
    u_xlatb30 = u_xlatb30 && u_xlatb2.z;
    u_xlat16_34 = (u_xlatb30) ? u_xlat1.w : 0.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorAO));
#else
    u_xlatb2.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorAO);
#endif
    u_xlat16_5.x = vs_COLOR0.x * 0.5;
    u_xlat16_5.x = (u_xlatb2.x) ? u_xlat16_5.x : 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat16_5.x<0.0500000007);
#else
    u_xlatb12 = u_xlat16_5.x<0.0500000007;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(0.949999988<u_xlat16_5.x);
#else
    u_xlatb22 = 0.949999988<u_xlat16_5.x;
#endif
    u_xlat32 = u_xlat16_5.x + vs_TEXCOORD1.w;
    u_xlat32 = u_xlat32 * 0.5;
    u_xlat16_5.x = (u_xlatb22) ? 1.0 : u_xlat32;
    u_xlat16_5.x = (u_xlatb12) ? 0.0 : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb2.x) ? u_xlat16_5.x : vs_TEXCOORD1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(u_xlat16_5.x<_LightArea);
#else
    u_xlatb2.x = u_xlat16_5.x<_LightArea;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition));
#else
    u_xlatb12 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition);
#endif
    u_xlat16_5.x = (-u_xlat16_5.x) + _LightArea;
    u_xlat16_5.x = u_xlat16_5.x / _ShadowTransitionRange;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(u_xlat16_5.x>=1.0);
#else
    u_xlatb22 = u_xlat16_5.x>=1.0;
#endif
    u_xlat16_32 = u_xlat16_5.x + 0.00999999978;
    u_xlat16_32 = log2(u_xlat16_32);
    u_xlat32 = u_xlat16_32 * _ShadowTransitionSoftness;
    u_xlat32 = exp2(u_xlat32);
    u_xlat32 = min(u_xlat32, 1.0);
    u_xlat22 = (u_xlatb22) ? 1.0 : u_xlat32;
    u_xlat22 = (u_xlatb12) ? u_xlat22 : 1.0;
    u_xlat22 = u_xlatb2.x ? u_xlat22 : float(0.0);
#ifdef UNITY_ADRENO_ES3
    { bool cond = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(vs_TEXCOORD4); u_xlati32 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati32 = int((vec4(0.0, 0.0, 0.0, 0.0)!=vec4(vs_TEXCOORD4)) ? 0xFFFFFFFFu : uint(0u));
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex));
#else
    u_xlatb3 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex);
#endif
    u_xlat16_13.xyz = vec3(_FirstShadowMultColor.xxyz.y + (-_CoolShadowMultColor.x), _FirstShadowMultColor.xxyz.z + (-_CoolShadowMultColor.y), float(_FirstShadowMultColor.z) + (-_CoolShadowMultColor.z));
    u_xlat13.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_13.xyz + _CoolShadowMultColor.xyz;
    u_xlat16_5.xyz = (bool(u_xlatb3)) ? u_xlat13.xyz : vec3(_FirstShadowMultColor.x, _FirstShadowMultColor.y, _FirstShadowMultColor.z);
    u_xlati3 = ~u_xlati32;
    u_xlati12 = u_xlatb12 ? u_xlati3 : int(0);
    u_xlat16_3.xyz = u_xlat16_5.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat3.xyz = vec3(u_xlat22) * u_xlat16_3.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_5.xyz = (int(u_xlati12) != 0) ? u_xlat3.xyz : u_xlat16_5.xyz;
    u_xlat16_5.xyz = (int(u_xlati32) != 0) ? u_xlat16_5.xyz : vec3(1.0, 1.0, 1.0);
    u_xlat16_35 = dot(vs_TEXCOORD1.xyz, u_xlat0.xyz);
    u_xlat16_35 = max(u_xlat16_35, 0.00100000005);
    u_xlat16_35 = log2(u_xlat16_35);
    u_xlat16_35 = u_xlat16_35 * _Shininess;
    u_xlat16_35 = exp2(u_xlat16_35);
    u_xlat16_6.xyz = vec3(u_xlat16_35) * _SpecularColor.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(_SpecMulti);
    u_xlat16_4.xyz = vec3(u_xlat16_4.x * _EmissionColor_MHY.xxyz.y, u_xlat16_4.y * _EmissionColor_MHY.xxyz.z, u_xlat16_4.z * float(_EmissionColor_MHY.z));
    u_xlat0.xyz = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0).xyz;
    u_xlati2 = int(uint(u_xlatb2.x) * 0xffffffffu | uint(u_xlati32));
    u_xlat12.xyz = u_xlat0.xyz * u_xlat16_5.xyz;
    u_xlat0.xyz = (int(u_xlati2) != 0) ? u_xlat12.xyz : u_xlat0.xyz;
    u_xlat0.xyz = u_xlat16_6.xyz * vec3(0.5, 0.5, 0.5) + u_xlat0.xyz;
    u_xlat2.xy = vs_TEXCOORD0.zw * _FlowMap01_ST.xy + _FlowMap01_ST.zw;
    u_xlat16_5.x = _Time.y * _FlowMap01_Uspeed + u_xlat2.x;
    u_xlat16_5.y = _Time.y * _FlowMap01_Vspeed + u_xlat2.y;
    u_xlat2.xy = vs_TEXCOORD0.zw * _Noise_ST.xy + _Noise_ST.zw;
    u_xlat16_6.x = _Time.y * _Noise_Uspeed + u_xlat2.x;
    u_xlat16_6.y = _Time.y * _Noise_Vspeed + u_xlat2.y;
    u_xlat10_2 = textureLod(_Noise, u_xlat16_6.xy, 0.0).x;
    u_xlat16_25.x = _MaskOffset01 * 1.39999998 + -0.699999988;
    u_xlat16_16.x = u_xlat10_2 * _NoiseIntensity;
    u_xlat12.xy = vs_TEXCOORD0.zw * _FlowMap02_ST.xy + _FlowMap02_ST.zw;
    u_xlat16_7.x = _Time.y * _FlowMap02_Uspeed + u_xlat12.x;
    u_xlat16_7.y = _Time.y * _FlowMap02_Vspeed + u_xlat12.y;
    u_xlat16_25.y = _MaskOffset02 * 1.39999998 + -0.699999988;
    u_xlat16_8.xyz = _FlowMapColor01.xyz * vec3(_FlowScale01);
    u_xlat16_5.xy = vec2(u_xlat10_2) * vec2(vec2(_NoiseFlowIntensity, _NoiseFlowIntensity)) + u_xlat16_5.xy;
    u_xlat10_12 = textureLod(_FlowMap01, u_xlat16_5.xy, 0.0).x;
    u_xlat16_12.xyz = vec3(u_xlat10_12) * u_xlat16_8.xyz;
    u_xlat16_5.x = (-vs_TEXCOORD0.z) + 1.0;
    u_xlat16_1.xz = u_xlat16_25.xy + u_xlat16_5.xx;
    u_xlat16_1.yw = vec2(u_xlat10_2) * vec2(vec2(_NoiseIntensity, _NoiseIntensity)) + (-vs_TEXCOORD0.ww);
    u_xlat16_16.y = 1.0;
    u_xlat16_15.xy = u_xlat16_1.xy + u_xlat16_16.xy;
    u_xlat10_3 = textureLod(_Mask01, u_xlat16_15.xy, 0.0).x;
    u_xlat16_3.x = max(u_xlat10_3, 9.99999975e-05);
    u_xlat16_3.x = log2(u_xlat16_3.x);
    u_xlat16_3.x = u_xlat16_3.x * _Mask01_Power;
    u_xlat16_3.x = exp2(u_xlat16_3.x);
    u_xlat16_8.xyz = _FlowMapColor02.xyz * vec3(_FlowScale02);
    u_xlat16_15.xy = vec2(u_xlat10_2) * vec2(vec2(_NoiseFlowIntensity, _NoiseFlowIntensity)) + u_xlat16_7.xy;
    u_xlat10_2 = textureLod(_FlowMap02, u_xlat16_15.xy, 0.0).x;
    u_xlat16_13.xyz = vec3(u_xlat10_2) * u_xlat16_8.xyz;
    u_xlat16_5.xy = vec2(u_xlat16_1.z + u_xlat16_16.x, u_xlat16_1.w + u_xlat16_16.y);
    u_xlat10_2 = textureLod(_Mask02, u_xlat16_5.xy, 0.0).x;
    u_xlat16_2.x = max(u_xlat10_2, 9.99999975e-05);
    u_xlat16_2.x = log2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * _Mask02_Power;
    u_xlat16_2.x = exp2(u_xlat16_2.x);
    u_xlat16_13.xyz = u_xlat16_2.xxx * u_xlat16_13.xyz;
    u_xlat16_2.xyz = u_xlat16_12.xyz * u_xlat16_3.xxx + u_xlat16_13.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(_EmissionScaler) + u_xlat16_2.xyz;
    u_xlat3.xyz = (-u_xlat0.xyz) + u_xlat16_4.xyz;
    u_xlat3.xyz = vec3(u_xlat16_34) * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat9.xy = vs_TEXCOORD0.zw * _DissovleNoise_ST.xy + _DissovleNoise_ST.zw;
    u_xlat16_4.x = _Time.y * _DissolveNoise_Uspeed + u_xlat9.x;
    u_xlat16_4.y = _Time.y * _DissolveNoise_Vspeed + u_xlat9.y;
    u_xlat10_32 = textureLod(_DissovleNoise, u_xlat16_4.xy, 0.0).x;
    u_xlat32 = u_xlat10_32 * _DissovleNoiseScale + vs_TEXCOORD0.z;
#ifdef UNITY_ADRENO_ES3
    u_xlatb32 = !!(_Dissovle>=u_xlat32);
#else
    u_xlatb32 = _Dissovle>=u_xlat32;
#endif
    u_xlat0.xyz = (bool(u_xlatb30)) ? u_xlat3.xyz : u_xlat0.xyz;
    u_xlat0.xyz = u_xlat16_2.xyz + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(0.00999999978<u_xlat16_34);
#else
    u_xlatb30 = 0.00999999978<u_xlat16_34;
#endif
    if((int(u_xlatb32) * int(0xffffffffu))==0){discard;}
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn));
#else
    u_xlatb2.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn);
#endif
    u_xlat12.xyz = u_xlat0.xyz * vec3(vec3(_ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness));
    u_xlat3.xyz = vec3(vec3(_ES_CharacterPointLightWholeIntensity, _ES_CharacterPointLightWholeIntensity, _ES_CharacterPointLightWholeIntensity)) * mhy_CharacterPointLightColor.xyz;
    u_xlat9.xyz = _ES_CharacterMainLightColor.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat9.xyz = min(max(u_xlat9.xyz, 0.0), 1.0);
#else
    u_xlat9.xyz = clamp(u_xlat9.xyz, 0.0, 1.0);
#endif
    u_xlat33 = (-mhy_CharacterPointLightColor.w) + 1.0;
    u_xlat3.xyz = u_xlat9.xyz * vec3(u_xlat33) + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat3.xyz = vec3(vec3(_ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio)) * u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat12.xyz = u_xlat12.xyz * u_xlat3.xyz;
    u_xlat3.xyz = _ES_CharacterAmbientLightColor.xyz * vec3(_ES_CharacterAmbientLightRatio);
    u_xlat16_4.xyz = u_xlat12.xyz * vec3(10.0, 10.0, 10.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.xyz = min(max(u_xlat16_4.xyz, 0.0), 1.0);
#else
    u_xlat16_4.xyz = clamp(u_xlat16_4.xyz, 0.0, 1.0);
#endif
    u_xlat12.xyz = u_xlat3.xyz * u_xlat16_4.xyz + u_xlat12.xyz;
    u_xlat16_4.xyz = (u_xlatb2.x) ? u_xlat12.xyz : u_xlat0.xyz;
    u_xlat16_5.xyz = u_xlat0.xyz + (-u_xlat16_4.xyz);
    u_xlat16_5.xyz = vec3(u_xlat16_34) * u_xlat16_5.xyz + u_xlat16_4.xyz;
    u_xlat16_0.xyz = (bool(u_xlatb30)) ? u_xlat16_5.xyz : u_xlat16_4.xyz;
    u_xlat16_4.x = max(u_xlat16_0.z, u_xlat16_0.y);
    u_xlat16_1.w = max(u_xlat16_0.x, u_xlat16_4.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(1.0<u_xlat16_1.w);
#else
    u_xlatb2.x = 1.0<u_xlat16_1.w;
#endif
    u_xlat16_1.xyz = u_xlat16_0.xyz / u_xlat16_1.www;
    u_xlat16_0.w = 1.0;
    u_xlat16_0 = (u_xlatb2.x) ? u_xlat16_1 : u_xlat16_0;
    u_xlat16_4.x = min(u_xlat16_0.w, 1.10000002);
    u_xlat16_14 = u_xlat16_0.w + (-u_xlat16_4.x);
    u_xlat16_4.x = u_xlat16_34 * u_xlat16_14 + u_xlat16_4.x;
    u_xlat16_2.x = u_xlat16_4.x * 0.0500000007;
    SV_Target0.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb12 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_4.x = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb12) ? u_xlat16_4.x : 0.0;
    SV_Target0.w = 0.0156862754;
    SV_Target1.xyz = u_xlat16_0.xyz;
    SV_Target1.w = u_xlat16_2.x;
    SV_Target2.xy = vec2(0.0, 0.0);
    SV_Target2.w = vs_TEXCOORD4;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "LINE_INTERPOLATION" "TOON_SPECULAR_ON" "TOON_LIGHTMAP_ON" "FACE_MAP_NEW_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _MainTex_ST;
uniform 	float _FaceMapRotateOffset;
uniform 	float _CharacterAmbientSensorShadowOn;
uniform 	vec4 _AmbientSensorUVs;
uniform 	float _UseClipPlane;
uniform 	float _ClipPlaneWorld;
uniform 	vec4 _ClipPlane;
uniform 	vec4 mhy_AvatarLightDir;
uniform 	vec4 mhy_CharacterOverrideLightDir;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
struct unity_Builtins1Array_Type {
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw1 {
	unity_Builtins1Array_Type unity_Builtins1Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform lowp sampler2D _CharacterAmbientSensorTex;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp float vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD6;
flat out highp uint vs_SV_InstanceID0;
float u_xlat0;
int u_xlati0;
vec3 u_xlat1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
vec4 u_xlat4;
mediump float u_xlat16_5;
vec3 u_xlat6;
bool u_xlatb6;
float u_xlat7;
mediump vec2 u_xlat16_11;
float u_xlat12;
bool u_xlatb12;
float u_xlat13;
bool u_xlatb13;
mediump float u_xlat16_17;
float u_xlat19;
bool u_xlatb19;
float u_xlat20;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.5<mhy_CharacterOverrideLightDir.w);
#else
    u_xlatb6 = 0.5<mhy_CharacterOverrideLightDir.w;
#endif
    u_xlat1.x = mhy_CharacterOverrideLightDir.x;
    u_xlat1.yz = (-mhy_CharacterOverrideLightDir.yz);
    u_xlat6.xyz = (bool(u_xlatb6)) ? u_xlat1.xyz : mhy_AvatarLightDir.xyz;
    u_xlati0 = u_xlati0 << 2;
    u_xlat1.x = dot(u_xlat6.xyz, unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz);
    u_xlat7 = dot(u_xlat6.xyz, unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb13 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseClipPlane));
#else
    u_xlatb13 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseClipPlane);
#endif
    if(u_xlatb13){
#ifdef UNITY_ADRENO_ES3
        u_xlatb13 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ClipPlaneWorld));
#else
        u_xlatb13 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ClipPlaneWorld);
#endif
        if(u_xlatb13){
#ifdef UNITY_ADRENO_ES3
            u_xlatb13 = !!(abs(_ClipPlane.w)<0.00100000005);
#else
            u_xlatb13 = abs(_ClipPlane.w)<0.00100000005;
#endif
            u_xlat2.xyz = _ClipPlane.www * _ClipPlane.xyz;
            u_xlat2.xyz = (bool(u_xlatb13)) ? vec3(0.0, 0.0, 0.0) : u_xlat2.xyz;
            u_xlat3 = u_xlat2.yyyy * unity_Builtins1Array[u_xlati0 / 4].hlslcc_mtx4x4unity_WorldToObjectArray[1];
            u_xlat3 = unity_Builtins1Array[u_xlati0 / 4].hlslcc_mtx4x4unity_WorldToObjectArray[0] * u_xlat2.xxxx + u_xlat3;
            u_xlat2 = unity_Builtins1Array[u_xlati0 / 4].hlslcc_mtx4x4unity_WorldToObjectArray[2] * u_xlat2.zzzz + u_xlat3;
            u_xlat2 = u_xlat2 + unity_Builtins1Array[u_xlati0 / 4].hlslcc_mtx4x4unity_WorldToObjectArray[3];
            u_xlat2.xyz = u_xlat2.xyz / u_xlat2.www;
            u_xlat3.xyz = _ClipPlane.yyy * unity_Builtins1Array[u_xlati0 / 4].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz;
            u_xlat3.xyz = unity_Builtins1Array[u_xlati0 / 4].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz * _ClipPlane.xxx + u_xlat3.xyz;
            u_xlat3.xyz = unity_Builtins1Array[u_xlati0 / 4].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz * _ClipPlane.zzz + u_xlat3.xyz;
            u_xlat13 = dot(u_xlat2.xyz, u_xlat3.xyz);
            u_xlat19 = dot(in_POSITION0.xyz, u_xlat3.xyz);
#ifdef UNITY_ADRENO_ES3
            u_xlatb2 = !!(u_xlat19<u_xlat13);
#else
            u_xlatb2 = u_xlat19<u_xlat13;
#endif
            u_xlat13 = (-u_xlat13) + u_xlat19;
            u_xlat3.xyz = (-vec3(u_xlat13)) * u_xlat3.xyz + in_POSITION0.xyz;
            u_xlat3.w = 0.0;
            u_xlat4.xyz = in_POSITION0.xyz;
            u_xlat4.w = in_COLOR0.w;
            u_xlat2 = (bool(u_xlatb2)) ? u_xlat3 : u_xlat4;
            u_xlat16_5 = u_xlat2.w;
        } else {
            u_xlat13 = dot(in_POSITION0.xyz, _ClipPlane.xyz);
            u_xlat19 = _ClipPlane.w + -0.00999999978;
#ifdef UNITY_ADRENO_ES3
            u_xlatb19 = !!(u_xlat13<u_xlat19);
#else
            u_xlatb19 = u_xlat13<u_xlat19;
#endif
            u_xlat13 = u_xlat13 + (-_ClipPlane.w);
            u_xlat3.xyz = (-vec3(u_xlat13)) * _ClipPlane.xyz + in_POSITION0.xyz;
            u_xlat3.w = 0.0;
            u_xlat4.xyz = in_POSITION0.xyz;
            u_xlat4.w = in_COLOR0.w;
            u_xlat2 = (bool(u_xlatb19)) ? u_xlat3 : u_xlat4;
            u_xlat16_5 = u_xlat2.w;
        //ENDIF
        }
    } else {
        u_xlat2.xyz = in_POSITION0.xyz;
        u_xlat16_5 = in_COLOR0.w;
    //ENDIF
    }
    u_xlat3.xyw = (-_WorldSpaceCameraPos.xyz) + unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat4.x = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].x;
    u_xlat4.y = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].x;
    u_xlat4.z = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].x;
    u_xlat4.w = u_xlat3.x;
    u_xlat2.w = 1.0;
    u_xlat13 = dot(u_xlat4, u_xlat2);
    u_xlat4.x = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].y;
    u_xlat4.y = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].y;
    u_xlat4.z = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].y;
    u_xlat4.w = u_xlat3.y;
    u_xlat19 = dot(u_xlat4, u_xlat2);
    u_xlat3.x = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].z;
    u_xlat3.y = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].z;
    u_xlat3.z = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].z;
    u_xlat3.x = dot(u_xlat3, u_xlat2);
    u_xlat4.x = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].w;
    u_xlat4.y = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].w;
    u_xlat4.z = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].w;
    u_xlat4.w = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3].w;
    u_xlat20 = dot(u_xlat4, u_xlat2);
    u_xlat4 = vec4(u_xlat19) * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat4 = hlslcc_mtx4x4unity_MatrixVPZero[0] * vec4(u_xlat13) + u_xlat4;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat3.xxxx + u_xlat4;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVPZero[3] * vec4(u_xlat20) + u_xlat3;
    u_xlat4 = u_xlat2.yyyy * unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat4 = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * u_xlat2.xxxx + u_xlat4;
    u_xlat2 = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * u_xlat2.zzzz + u_xlat4;
    u_xlat2 = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3] * in_POSITION0.wwww + u_xlat2;
    vs_TEXCOORD3.xyz = u_xlat2.xyz / u_xlat2.www;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat2.xz = u_xlat3.xw * vec2(0.5, 0.5);
    u_xlat13 = u_xlat3.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat13 * 0.5;
    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat2.xyz = in_NORMAL0.yyy * unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat2.xyz = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_NORMAL0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_NORMAL0.zzz + u_xlat2.xyz;
    u_xlat0 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0 = inversesqrt(u_xlat0);
    u_xlat2.xyz = vec3(u_xlat0) * u_xlat2.xyz;
    u_xlat16_11.x = dot(u_xlat2.xyz, u_xlat6.xyz);
    vs_TEXCOORD1.w = u_xlat16_11.x * 0.497500002 + 0.5;
    u_xlat16_11.x = min(abs(u_xlat1.x), abs(u_xlat7));
    u_xlat16_17 = max(abs(u_xlat1.x), abs(u_xlat7));
    u_xlat16_17 = float(1.0) / u_xlat16_17;
    u_xlat16_11.x = u_xlat16_17 * u_xlat16_11.x;
    u_xlat16_17 = u_xlat16_11.x * u_xlat16_11.x;
    u_xlat0 = u_xlat16_17 * 0.0208350997 + -0.0851330012;
    u_xlat0 = u_xlat16_17 * u_xlat0 + 0.180141002;
    u_xlat0 = u_xlat16_17 * u_xlat0 + -0.330299497;
    u_xlat0 = u_xlat16_17 * u_xlat0 + 0.999866009;
    u_xlat6.x = u_xlat0 * u_xlat16_11.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(abs(u_xlat1.x)<abs(u_xlat7));
#else
    u_xlatb12 = abs(u_xlat1.x)<abs(u_xlat7);
#endif
    u_xlat6.x = u_xlat6.x * -2.0 + 1.57079637;
    u_xlat6.x = u_xlatb12 ? u_xlat6.x : float(0.0);
    u_xlat0 = u_xlat16_11.x * u_xlat0 + u_xlat6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(u_xlat1.x<(-u_xlat1.x));
#else
    u_xlatb6 = u_xlat1.x<(-u_xlat1.x);
#endif
    u_xlat6.x = u_xlatb6 ? -3.14159274 : float(0.0);
    u_xlat0 = u_xlat6.x + u_xlat0;
    u_xlat16_11.x = min(u_xlat1.x, u_xlat7);
    u_xlat16_17 = max(u_xlat1.x, u_xlat7);
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(u_xlat16_11.x<(-u_xlat16_11.x));
#else
    u_xlatb6 = u_xlat16_11.x<(-u_xlat16_11.x);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat16_17>=(-u_xlat16_17));
#else
    u_xlatb12 = u_xlat16_17>=(-u_xlat16_17);
#endif
    u_xlatb6 = u_xlatb12 && u_xlatb6;
    u_xlat0 = (u_xlatb6) ? (-u_xlat0) : u_xlat0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.0<(-u_xlat0));
#else
    u_xlatb6 = 0.0<(-u_xlat0);
#endif
    u_xlat16_11.x = u_xlat0 * -0.318309903;
    u_xlat0 = max(_FaceMapRotateOffset, 0.0);
    u_xlat12 = _FaceMapRotateOffset + 1.0;
    u_xlat12 = min(u_xlat12, 1.0);
    u_xlat12 = (-u_xlat0) + u_xlat12;
    u_xlat0 = (-u_xlat0) + abs(u_xlat16_11.x);
    u_xlat12 = float(1.0) / u_xlat12;
    u_xlat0 = u_xlat12 * u_xlat0;
#ifdef UNITY_ADRENO_ES3
    u_xlat0 = min(max(u_xlat0, 0.0), 1.0);
#else
    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
#endif
    u_xlat12 = u_xlat0 * -2.0 + 3.0;
    u_xlat0 = u_xlat0 * u_xlat0;
    u_xlat0 = u_xlat0 * u_xlat12;
    u_xlat0 = max(u_xlat0, 9.99999975e-05);
    u_xlat0 = min(u_xlat0, 0.999899983);
    u_xlat16_11.xy = in_TEXCOORD0.xy * vec2(-1.0, 1.0) + vec2(1.0, 0.0);
    vs_TEXCOORD6.xy = (bool(u_xlatb6)) ? u_xlat16_11.xy : in_TEXCOORD0.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_CharacterAmbientSensorShadowOn));
#else
    u_xlatb6 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_CharacterAmbientSensorShadowOn);
#endif
    if(u_xlatb6){
        u_xlat6.x = textureLod(_CharacterAmbientSensorTex, _AmbientSensorUVs.xy, 0.0).x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb6 = !!(0.5<u_xlat6.x);
#else
        u_xlatb6 = 0.5<u_xlat6.x;
#endif
        vs_TEXCOORD4 = u_xlatb6 ? 1.0 : float(0.0);
    } else {
        vs_TEXCOORD4 = 0.0;
    //ENDIF
    }
    gl_Position = u_xlat3;
    vs_COLOR0.xyz = in_COLOR0.xyz;
    vs_COLOR0.w = u_xlat16_5;
    vs_TEXCOORD1.xyz = u_xlat2.xyz;
    vs_TEXCOORD2.zw = u_xlat3.zw;
    vs_TEXCOORD6.z = u_xlat0;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	mediump vec4 _Color;
uniform 	float _MainTexAlphaUse;
uniform 	mediump float _MainTexAlphaCutoff;
uniform 	float _UseLightMapColorAO;
uniform 	float _UseVertexColorAO;
uniform 	mediump float _LightArea;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	float _UseCoolShadowColorOrTex;
uniform 	mediump vec3 _CoolShadowMultColor;
uniform 	float _UseShadowTransition;
uniform 	float _ShadowTransitionRange;
uniform 	float _ShadowTransitionSoftness;
uniform 	mediump vec3 _SpecularColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	float _FaceBlushStrength;
uniform 	mediump vec3 _FaceBlushColor;
uniform 	float _FaceMapSoftness;
uniform 	mediump float _EmissionScaler;
uniform 	mediump vec3 _EmissionColor_MHY;
uniform 	float _UseMaterial2;
uniform 	mediump vec3 _Color2;
uniform 	mediump vec3 _FirstShadowMultColor2;
uniform 	mediump vec3 _CoolShadowMultColor2;
uniform 	mediump float _Shininess2;
uniform 	mediump float _SpecMulti2;
uniform 	float _ShadowTransitionRange2;
uniform 	float _ShadowTransitionSoftness2;
uniform 	float _UseMaterial3;
uniform 	mediump vec3 _Color3;
uniform 	mediump vec3 _FirstShadowMultColor3;
uniform 	mediump vec3 _CoolShadowMultColor3;
uniform 	mediump float _Shininess3;
uniform 	mediump float _SpecMulti3;
uniform 	float _ShadowTransitionRange3;
uniform 	float _ShadowTransitionSoftness3;
uniform 	float _UseMaterial4;
uniform 	mediump vec3 _Color4;
uniform 	mediump vec3 _FirstShadowMultColor4;
uniform 	mediump vec3 _CoolShadowMultColor4;
uniform 	mediump float _Shininess4;
uniform 	mediump float _SpecMulti4;
uniform 	float _ShadowTransitionRange4;
uniform 	float _ShadowTransitionSoftness4;
uniform 	float _UseMaterial5;
uniform 	mediump vec3 _Color5;
uniform 	mediump vec3 _FirstShadowMultColor5;
uniform 	mediump vec3 _CoolShadowMultColor5;
uniform 	mediump float _Shininess5;
uniform 	mediump float _SpecMulti5;
uniform 	float _ShadowTransitionRange5;
uniform 	float _ShadowTransitionSoftness5;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _TextureBiasWhenDithering;
uniform 	float _UseClipPlane;
uniform 	float _ES_CharacterAmbientLightOn;
uniform 	float _ES_CharacterAmbientBrightness;
uniform 	vec3 _ES_CharacterMainLightColor;
uniform 	vec3 _ES_CharacterAmbientLightColor;
uniform 	float _ES_CharacterMainLightRatio;
uniform 	float _ES_CharacterAmbientLightRatio;
uniform 	float _ES_CharacterColorTone;
uniform 	float _ES_CharacterPointLightWholeIntensity;
uniform 	vec4 mhy_AvatarLightDir;
uniform 	vec4 mhy_CharacterPointLightColor;
uniform 	vec4 mhy_CharacterOverrideLightDir;
uniform 	mediump vec4 _FlowMapColor01;
uniform 	mediump float _FlowScale01;
uniform 	mediump float _FlowMap01_Uspeed;
uniform 	vec4 _FlowMap01_ST;
uniform 	mediump float _FlowMap01_Vspeed;
uniform 	mediump float _Noise_Uspeed;
uniform 	vec4 _Noise_ST;
uniform 	mediump float _Noise_Vspeed;
uniform 	mediump float _NoiseFlowIntensity;
uniform 	mediump float _MaskOffset01;
uniform 	mediump float _NoiseIntensity;
uniform 	mediump float _Mask01_Power;
uniform 	mediump vec4 _FlowMapColor02;
uniform 	mediump float _FlowScale02;
uniform 	mediump float _FlowMap02_Uspeed;
uniform 	vec4 _FlowMap02_ST;
uniform 	mediump float _FlowMap02_Vspeed;
uniform 	mediump float _MaskOffset02;
uniform 	mediump float _Mask02_Power;
uniform 	mediump float _DissolveNoise_Uspeed;
uniform 	vec4 _DissovleNoise_ST;
uniform 	mediump float _DissolveNoise_Vspeed;
uniform 	mediump float _DissovleNoiseScale;
uniform 	mediump float _Dissovle;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _FaceMapTex;
uniform lowp sampler2D _Noise;
uniform lowp sampler2D _FlowMap01;
uniform lowp sampler2D _Mask01;
uniform lowp sampler2D _FlowMap02;
uniform lowp sampler2D _Mask02;
uniform lowp sampler2D _DissovleNoise;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp float vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
vec3 u_xlat2;
mediump float u_xlat16_2;
bvec3 u_xlatb2;
vec3 u_xlat3;
mediump float u_xlat16_3;
lowp vec4 u_xlat10_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
bvec4 u_xlatb5;
vec3 u_xlat6;
mediump vec3 u_xlat16_6;
bvec3 u_xlatb6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
bool u_xlatb11;
vec3 u_xlat13;
mediump vec3 u_xlat16_13;
lowp float u_xlat10_13;
bool u_xlatb13;
float u_xlat14;
mediump vec3 u_xlat16_14;
int u_xlati14;
mediump float u_xlat16_15;
mediump vec3 u_xlat16_18;
mediump vec3 u_xlat16_19;
bvec2 u_xlatb22;
vec2 u_xlat24;
mediump float u_xlat16_30;
float u_xlat33;
mediump float u_xlat16_33;
lowp float u_xlat10_33;
int u_xlati33;
bool u_xlatb33;
float u_xlat35;
float u_xlat36;
int u_xlati36;
bool u_xlatb36;
mediump float u_xlat16_37;
float u_xlat38;
mediump float u_xlat16_38;
int u_xlati38;
mediump float u_xlat16_40;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseClipPlane));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseClipPlane);
#endif
    u_xlat16_1.x = vs_COLOR0.w + -0.00999999978;
#ifdef UNITY_ADRENO_ES3
    u_xlatb11 = !!(u_xlat16_1.x<0.0);
#else
    u_xlatb11 = u_xlat16_1.x<0.0;
#endif
    u_xlatb0 = u_xlatb0 && u_xlatb11;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(_DitherAlpha<0.949999988);
#else
        u_xlatb0 = _DitherAlpha<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb22.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb22.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb22.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = _DitherAlpha * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + -0.00999999978;
#ifdef UNITY_ADRENO_ES3
            u_xlatb0 = !!(u_xlat0.x<0.0);
#else
            u_xlatb0 = u_xlat0.x<0.0;
#endif
            if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(0.5<mhy_CharacterOverrideLightDir.w);
#else
    u_xlatb2.x = 0.5<mhy_CharacterOverrideLightDir.w;
#endif
    u_xlat3.x = mhy_CharacterOverrideLightDir.x;
    u_xlat3.yz = (-mhy_CharacterOverrideLightDir.yz);
    u_xlat2.xyz = (u_xlatb2.x) ? u_xlat3.xyz : mhy_AvatarLightDir.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat33) + u_xlat2.xyz;
    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat0.xyz = vec3(u_xlat33) * u_xlat0.xyz;
    u_xlat33 = _TextureBiasWhenDithering + -1.0;
    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy, u_xlat33);
    u_xlatb2.xyz = equal(vec4(_MainTexAlphaUse), vec4(3.0, 1.0, 2.0, 0.0)).xyz;
    u_xlat35 = u_xlat1.w * _FaceBlushStrength;
    u_xlat3.xyz = (-u_xlat1.xyz) + _FaceBlushColor.xyz;
    u_xlat3.xyz = vec3(u_xlat35) * u_xlat3.xyz + u_xlat1.xyz;
    u_xlat16_4.xyz = (u_xlatb2.x) ? u_xlat3.xyz : u_xlat1.xyz;
    u_xlat16_37 = u_xlat1.w + (-_MainTexAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(u_xlat16_37<0.0);
#else
    u_xlatb2.x = u_xlat16_37<0.0;
#endif
    u_xlatb2.x = u_xlatb2.y && u_xlatb2.x;
    if((int(u_xlatb2.x) * int(0xffffffffu))!=0){discard;}
    u_xlat10_3 = texture(_LightMapTex, vs_TEXCOORD0.xy, u_xlat33);
    u_xlatb2.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseLightMapColorAO, _UseVertexColorAO, _UseLightMapColorAO, _UseLightMapColorAO)).xy;
    u_xlat16_37 = (u_xlatb2.x) ? u_xlat10_3.y : 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseMaterial2));
#else
    u_xlatb33 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseMaterial2);
#endif
    u_xlatb5 = greaterThanEqual(u_xlat10_3.wwww, vec4(0.800000012, 0.400000006, 0.200000003, 0.600000024));
    u_xlatb33 = u_xlatb33 && u_xlatb5.x;
    u_xlat33 = (u_xlatb33) ? 2.0 : 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseMaterial3));
#else
    u_xlatb2.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseMaterial3);
#endif
    u_xlatb2.x = u_xlatb5.y && u_xlatb2.x;
    u_xlatb6.xyz = lessThan(u_xlat10_3.wwww, vec4(0.600000024, 0.400000006, 0.800000012, 0.0)).xyz;
    u_xlatb2.x = u_xlatb2.x && u_xlatb6.x;
    u_xlat33 = (u_xlatb2.x) ? 3.0 : u_xlat33;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseMaterial4));
#else
    u_xlatb2.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseMaterial4);
#endif
    u_xlatb2.x = u_xlatb5.z && u_xlatb2.x;
    u_xlatb2.x = u_xlatb6.y && u_xlatb2.x;
    u_xlat33 = (u_xlatb2.x) ? 4.0 : u_xlat33;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseMaterial5));
#else
    u_xlatb2.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseMaterial5);
#endif
    u_xlatb2.x = u_xlatb5.w && u_xlatb2.x;
    u_xlatb2.x = u_xlatb6.z && u_xlatb2.x;
    u_xlat33 = (u_xlatb2.x) ? 5.0 : u_xlat33;
    u_xlatb5 = equal(vec4(u_xlat33), vec4(2.0, 3.0, 4.0, 5.0));
    u_xlat16_7.xyz = (u_xlatb5.x) ? _Color2.xyz : _Color.xyz;
    u_xlat16_7.xyz = (u_xlatb5.y) ? _Color3.xyz : u_xlat16_7.xyz;
    u_xlat16_7.xyz = (u_xlatb5.z) ? _Color4.xyz : u_xlat16_7.xyz;
    u_xlat16_7.xyz = (u_xlatb5.w) ? _Color5.xyz : u_xlat16_7.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_7.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(0.00999999978<u_xlat1.w);
#else
    u_xlatb2.x = 0.00999999978<u_xlat1.w;
#endif
    u_xlatb2.x = u_xlatb2.x && u_xlatb2.z;
    u_xlat16_7.x = (u_xlatb2.x) ? u_xlat1.w : 0.0;
    u_xlat24.x = texture(_FaceMapTex, vs_TEXCOORD6.xy, -1.0).w;
    u_xlat35 = max(_FaceMapSoftness, 9.99999997e-07);
    u_xlat16_18.x = (-u_xlat35) + vs_TEXCOORD6.z;
    u_xlat16_14.x = max(u_xlat16_18.x, 9.99999975e-05);
    u_xlat16_14.x = min(u_xlat16_14.x, 0.998899996);
    u_xlat16_18.x = u_xlat35 + vs_TEXCOORD6.z;
    u_xlat24.y = min(u_xlat16_18.x, 0.999899983);
    u_xlat24.xy = u_xlat24.xy + (-u_xlat16_14.xx);
    u_xlat35 = float(1.0) / u_xlat24.y;
    u_xlat24.x = u_xlat35 * u_xlat24.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat24.x = min(max(u_xlat24.x, 0.0), 1.0);
#else
    u_xlat24.x = clamp(u_xlat24.x, 0.0, 1.0);
#endif
    u_xlat35 = u_xlat24.x * -2.0 + 3.0;
    u_xlat24.x = u_xlat24.x * u_xlat24.x;
    u_xlat14 = u_xlat24.x * u_xlat35;
    u_xlat16_18.x = u_xlat16_37 * vs_COLOR0.x;
    u_xlat16_37 = (u_xlatb2.y) ? u_xlat16_18.x : u_xlat16_37;
#ifdef UNITY_ADRENO_ES3
    u_xlatb13 = !!(u_xlat16_37<0.0500000007);
#else
    u_xlatb13 = u_xlat16_37<0.0500000007;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb36 = !!(0.949999988<u_xlat16_37);
#else
    u_xlatb36 = 0.949999988<u_xlat16_37;
#endif
    u_xlat6.x = u_xlat16_37 + vs_TEXCOORD1.w;
    u_xlat6.x = u_xlat6.x * 0.5;
    u_xlat16_37 = (u_xlatb36) ? 1.0 : u_xlat6.x;
    u_xlat16_37 = (u_xlatb13) ? 0.0 : u_xlat16_37;
#ifdef UNITY_ADRENO_ES3
    u_xlatb13 = !!(u_xlat16_37<_LightArea);
#else
    u_xlatb13 = u_xlat16_37<_LightArea;
#endif
    if(u_xlatb13){
#ifdef UNITY_ADRENO_ES3
        u_xlatb13 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition));
#else
        u_xlatb13 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition);
#endif
#ifdef UNITY_ADRENO_ES3
        u_xlatb36 = !!(u_xlat33==1.0);
#else
        u_xlatb36 = u_xlat33==1.0;
#endif
        u_xlat16_8.x = (u_xlatb36) ? _ShadowTransitionRange : 0.0;
        u_xlat16_8.y = (u_xlatb36) ? _ShadowTransitionSoftness : 0.0;
        u_xlat16_18.xy = (u_xlatb5.x) ? vec2(_ShadowTransitionRange2, _ShadowTransitionSoftness2) : u_xlat16_8.xy;
        u_xlat16_18.xy = (u_xlatb5.y) ? vec2(_ShadowTransitionRange3, _ShadowTransitionSoftness3) : u_xlat16_18.xy;
        u_xlat16_18.xy = (u_xlatb5.z) ? vec2(_ShadowTransitionRange4, _ShadowTransitionSoftness4) : u_xlat16_18.xy;
        u_xlat16_18.xy = (u_xlatb5.w) ? vec2(_ShadowTransitionRange5, _ShadowTransitionSoftness5) : u_xlat16_18.xy;
        u_xlat16_37 = (-u_xlat16_37) + _LightArea;
        u_xlat16_37 = u_xlat16_37 / u_xlat16_18.x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb36 = !!(u_xlat16_37>=1.0);
#else
        u_xlatb36 = u_xlat16_37>=1.0;
#endif
        u_xlat16_38 = u_xlat16_37 + 0.00999999978;
        u_xlat16_38 = log2(u_xlat16_38);
        u_xlat16_38 = u_xlat16_38 * u_xlat16_18.y;
        u_xlat16_38 = exp2(u_xlat16_38);
        u_xlat38 = min(u_xlat16_38, 1.0);
        u_xlat36 = (u_xlatb36) ? 1.0 : u_xlat38;
        u_xlat13.x = (u_xlatb13) ? u_xlat36 : 1.0;
        u_xlat16_37 = 0.0;
    } else {
        u_xlat13.x = 0.0;
        u_xlat16_37 = 1.0;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb36 = !!(0.5<u_xlat10_3.x);
#else
    u_xlatb36 = 0.5<u_xlat10_3.x;
#endif
    u_xlat16_18.x = min(u_xlat14, u_xlat16_37);
    u_xlat16_37 = (u_xlatb36) ? u_xlat16_18.x : u_xlat16_37;
    u_xlat16_37 = (-u_xlat16_37) + 1.0;
#ifdef UNITY_ADRENO_ES3
    { bool cond = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(vs_TEXCOORD4); u_xlati14 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati14 = int((vec4(0.0, 0.0, 0.0, 0.0)!=vec4(vs_TEXCOORD4)) ? 0xFFFFFFFFu : uint(0u));
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(u_xlat33==1.0);
#else
    u_xlatb33 = u_xlat33==1.0;
#endif
    if(u_xlatb33){
#ifdef UNITY_ADRENO_ES3
        u_xlatb36 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex));
#else
        u_xlatb36 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex);
#endif
        u_xlat16_6.xyz = vec3(_FirstShadowMultColor.xxyz.y + (-_CoolShadowMultColor.x), _FirstShadowMultColor.xxyz.z + (-_CoolShadowMultColor.y), float(_FirstShadowMultColor.z) + (-_CoolShadowMultColor.z));
        u_xlat6.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_6.xyz + _CoolShadowMultColor.xyz;
        u_xlat16_18.xyz = (bool(u_xlatb36)) ? u_xlat6.xyz : vec3(_FirstShadowMultColor.x, _FirstShadowMultColor.y, _FirstShadowMultColor.z);
    } else {
        if(u_xlatb5.x){
#ifdef UNITY_ADRENO_ES3
            u_xlatb36 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex));
#else
            u_xlatb36 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex);
#endif
            u_xlat16_6.xyz = _FirstShadowMultColor2.xyz + (-_CoolShadowMultColor2.xyz);
            u_xlat6.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_6.xyz + _CoolShadowMultColor2.xyz;
            u_xlat16_18.xyz = (bool(u_xlatb36)) ? u_xlat6.xyz : _FirstShadowMultColor2.xyz;
        } else {
#ifdef UNITY_ADRENO_ES3
            u_xlatb36 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex));
#else
            u_xlatb36 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex);
#endif
            u_xlat16_6.xyz = _FirstShadowMultColor3.xyz + (-_CoolShadowMultColor3.xyz);
            u_xlat6.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_6.xyz + _CoolShadowMultColor3.xyz;
            u_xlat16_8.xyz = (bool(u_xlatb36)) ? u_xlat6.xyz : _FirstShadowMultColor3.xyz;
            u_xlat16_6.xyz = _FirstShadowMultColor4.xyz + (-_CoolShadowMultColor4.xyz);
            u_xlat6.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_6.xyz + _CoolShadowMultColor4.xyz;
            u_xlat16_9.xyz = (bool(u_xlatb36)) ? u_xlat6.xyz : _FirstShadowMultColor4.xyz;
            u_xlat16_6.xyz = _FirstShadowMultColor5.xyz + (-_CoolShadowMultColor5.xyz);
            u_xlat6.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_6.xyz + _CoolShadowMultColor5.xyz;
            u_xlat16_10.xyz = (bool(u_xlatb36)) ? u_xlat6.xyz : _FirstShadowMultColor5.xyz;
            u_xlat16_9.xyz = (u_xlatb5.z) ? u_xlat16_9.xyz : u_xlat16_10.xyz;
            u_xlat16_18.xyz = (u_xlatb5.y) ? u_xlat16_8.xyz : u_xlat16_9.xyz;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb36 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition));
#else
    u_xlatb36 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition);
#endif
    u_xlati38 = ~u_xlati14;
    u_xlati36 = u_xlatb36 ? u_xlati38 : int(0);
    u_xlat16_6.xyz = u_xlat16_18.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat6.xyz = u_xlat13.xxx * u_xlat16_6.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_18.xyz = (int(u_xlati36) != 0) ? u_xlat6.xyz : u_xlat16_18.xyz;
    u_xlat16_8.x = (-u_xlat35) * u_xlat24.x + 1.0;
    u_xlat16_19.xyz = u_xlat16_18.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat16_8.xyz = u_xlat16_8.xxx * u_xlat16_19.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_18.xyz = (int(u_xlati14) != 0) ? u_xlat16_18.xyz : u_xlat16_8.xyz;
    u_xlat16_8.x = (u_xlatb5.z) ? _Shininess4 : _Shininess5;
    u_xlat16_19.x = (u_xlatb5.z) ? _SpecMulti4 : _SpecMulti5;
    u_xlat16_8.x = (u_xlatb5.y) ? _Shininess3 : u_xlat16_8.x;
    u_xlat16_19.x = (u_xlatb5.y) ? _SpecMulti3 : u_xlat16_19.x;
    u_xlat16_8.x = (u_xlatb5.x) ? _Shininess2 : u_xlat16_8.x;
    u_xlat16_19.x = (u_xlatb5.x) ? _SpecMulti2 : u_xlat16_19.x;
    u_xlat16_8.x = (u_xlatb33) ? _Shininess : u_xlat16_8.x;
    u_xlat16_19.x = (u_xlatb33) ? _SpecMulti : u_xlat16_19.x;
    u_xlat16_30 = dot(vs_TEXCOORD1.xyz, u_xlat0.xyz);
    u_xlat16_30 = max(u_xlat16_30, 0.00100000005);
    u_xlat16_30 = log2(u_xlat16_30);
    u_xlat16_8.x = u_xlat16_30 * u_xlat16_8.x;
    u_xlat16_8.x = exp2(u_xlat16_8.x);
    u_xlat0.x = (-u_xlat10_3.z) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat0.x<u_xlat16_8.x);
#else
    u_xlatb0 = u_xlat0.x<u_xlat16_8.x;
#endif
    u_xlat16_8.xyz = u_xlat16_19.xxx * _SpecularColor.xyz;
    u_xlat16_8.xyz = u_xlat10_3.xxx * u_xlat16_8.xyz;
    u_xlat16_8.xyz = (bool(u_xlatb0)) ? u_xlat16_8.xyz : vec3(0.0, 0.0, 0.0);
    u_xlat16_4.xyz = vec3(u_xlat16_4.x * _EmissionColor_MHY.xxyz.y, u_xlat16_4.y * _EmissionColor_MHY.xxyz.z, u_xlat16_4.z * float(_EmissionColor_MHY.z));
    u_xlat0.xyz = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(u_xlat16_37==1.0);
#else
    u_xlatb33 = u_xlat16_37==1.0;
#endif
    u_xlati33 = int(uint(u_xlatb33) * 0xffffffffu | uint(u_xlati14));
    u_xlat13.xyz = u_xlat0.xyz * u_xlat16_18.xyz;
    u_xlat0.xyz = (int(u_xlati33) != 0) ? u_xlat13.xyz : u_xlat0.xyz;
    u_xlat0.xyz = u_xlat16_8.xyz + u_xlat0.xyz;
    u_xlat13.xy = vs_TEXCOORD0.zw * _FlowMap01_ST.xy + _FlowMap01_ST.zw;
    u_xlat16_8.x = _Time.y * _FlowMap01_Uspeed + u_xlat13.x;
    u_xlat16_8.y = _Time.y * _FlowMap01_Vspeed + u_xlat13.y;
    u_xlat13.xy = vs_TEXCOORD0.zw * _Noise_ST.xy + _Noise_ST.zw;
    u_xlat16_9.x = _Time.y * _Noise_Uspeed + u_xlat13.x;
    u_xlat16_9.y = _Time.y * _Noise_Vspeed + u_xlat13.y;
    u_xlat10_33 = textureLod(_Noise, u_xlat16_9.xy, 0.0).x;
    u_xlat16_37 = _MaskOffset01 * 1.39999998 + -0.699999988;
    u_xlat16_18.x = u_xlat10_33 * _NoiseIntensity;
    u_xlat13.xy = vs_TEXCOORD0.zw * _FlowMap02_ST.xy + _FlowMap02_ST.zw;
    u_xlat16_9.x = _Time.y * _FlowMap02_Uspeed + u_xlat13.x;
    u_xlat16_9.y = _Time.y * _FlowMap02_Vspeed + u_xlat13.y;
    u_xlat16_40 = _MaskOffset02 * 1.39999998 + -0.699999988;
    u_xlat16_10.xyz = _FlowMapColor01.xyz * vec3(_FlowScale01);
    u_xlat16_8.xy = vec2(u_xlat10_33) * vec2(vec2(_NoiseFlowIntensity, _NoiseFlowIntensity)) + u_xlat16_8.xy;
    u_xlat10_13 = textureLod(_FlowMap01, u_xlat16_8.xy, 0.0).x;
    u_xlat16_13.xyz = vec3(u_xlat10_13) * u_xlat16_10.xyz;
    u_xlat16_8.x = (-vs_TEXCOORD0.z) + 1.0;
    u_xlat16_1.x = u_xlat16_37 + u_xlat16_8.x;
    u_xlat16_1.yw = vec2(u_xlat10_33) * vec2(vec2(_NoiseIntensity, _NoiseIntensity)) + (-vs_TEXCOORD0.ww);
    u_xlat16_18.y = 1.0;
    u_xlat16_19.xy = u_xlat16_1.xy + u_xlat16_18.xy;
    u_xlat10_3.x = textureLod(_Mask01, u_xlat16_19.xy, 0.0).x;
    u_xlat16_3 = max(u_xlat10_3.x, 9.99999975e-05);
    u_xlat16_3 = log2(u_xlat16_3);
    u_xlat16_3 = u_xlat16_3 * _Mask01_Power;
    u_xlat16_3 = exp2(u_xlat16_3);
    u_xlat16_19.xyz = _FlowMapColor02.xyz * vec3(_FlowScale02);
    u_xlat16_9.xy = vec2(u_xlat10_33) * vec2(vec2(_NoiseFlowIntensity, _NoiseFlowIntensity)) + u_xlat16_9.xy;
    u_xlat10_33 = textureLod(_FlowMap02, u_xlat16_9.xy, 0.0).x;
    u_xlat16_14.xyz = vec3(u_xlat10_33) * u_xlat16_19.xyz;
    u_xlat16_1.z = u_xlat16_40 + u_xlat16_8.x;
    u_xlat16_18.xy = vec2(u_xlat16_1.z + u_xlat16_18.x, u_xlat16_1.w + u_xlat16_18.y);
    u_xlat10_33 = textureLod(_Mask02, u_xlat16_18.xy, 0.0).x;
    u_xlat16_33 = max(u_xlat10_33, 9.99999975e-05);
    u_xlat16_33 = log2(u_xlat16_33);
    u_xlat16_33 = u_xlat16_33 * _Mask02_Power;
    u_xlat16_33 = exp2(u_xlat16_33);
    u_xlat16_14.xyz = vec3(u_xlat16_33) * u_xlat16_14.xyz;
    u_xlat16_13.xyz = u_xlat16_13.xyz * vec3(u_xlat16_3) + u_xlat16_14.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(_EmissionScaler) + u_xlat16_13.xyz;
    u_xlat3.xyz = (-u_xlat0.xyz) + u_xlat16_4.xyz;
    u_xlat3.xyz = u_xlat16_7.xxx * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat5.xy = vs_TEXCOORD0.zw * _DissovleNoise_ST.xy + _DissovleNoise_ST.zw;
    u_xlat16_4.x = _Time.y * _DissolveNoise_Uspeed + u_xlat5.x;
    u_xlat16_4.y = _Time.y * _DissolveNoise_Vspeed + u_xlat5.y;
    u_xlat10_33 = textureLod(_DissovleNoise, u_xlat16_4.xy, 0.0).x;
    u_xlat33 = u_xlat10_33 * _DissovleNoiseScale + vs_TEXCOORD0.z;
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(_Dissovle>=u_xlat33);
#else
    u_xlatb33 = _Dissovle>=u_xlat33;
#endif
    u_xlat0.xyz = (u_xlatb2.x) ? u_xlat3.xyz : u_xlat0.xyz;
    u_xlat0.xyz = u_xlat16_13.xyz + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(0.00999999978<u_xlat16_7.x);
#else
    u_xlatb2.x = 0.00999999978<u_xlat16_7.x;
#endif
    if((int(u_xlatb33) * int(0xffffffffu))==0){discard;}
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn));
#else
    u_xlatb33 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn);
#endif
    u_xlat13.xyz = u_xlat0.xyz * vec3(vec3(_ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness));
    u_xlat3.xyz = vec3(vec3(_ES_CharacterPointLightWholeIntensity, _ES_CharacterPointLightWholeIntensity, _ES_CharacterPointLightWholeIntensity)) * mhy_CharacterPointLightColor.xyz;
    u_xlat5.xyz = _ES_CharacterMainLightColor.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.xyz = min(max(u_xlat5.xyz, 0.0), 1.0);
#else
    u_xlat5.xyz = clamp(u_xlat5.xyz, 0.0, 1.0);
#endif
    u_xlat36 = (-mhy_CharacterPointLightColor.w) + 1.0;
    u_xlat3.xyz = u_xlat5.xyz * vec3(u_xlat36) + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat3.xyz = vec3(vec3(_ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio)) * u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat13.xyz = u_xlat13.xyz * u_xlat3.xyz;
    u_xlat3.xyz = _ES_CharacterAmbientLightColor.xyz * vec3(_ES_CharacterAmbientLightRatio);
    u_xlat16_4.xyz = u_xlat13.xyz * vec3(10.0, 10.0, 10.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.xyz = min(max(u_xlat16_4.xyz, 0.0), 1.0);
#else
    u_xlat16_4.xyz = clamp(u_xlat16_4.xyz, 0.0, 1.0);
#endif
    u_xlat13.xyz = u_xlat3.xyz * u_xlat16_4.xyz + u_xlat13.xyz;
    u_xlat16_4.xyz = (bool(u_xlatb33)) ? u_xlat13.xyz : u_xlat0.xyz;
    u_xlat16_18.xyz = u_xlat0.xyz + (-u_xlat16_4.xyz);
    u_xlat16_18.xyz = u_xlat16_7.xxx * u_xlat16_18.xyz + u_xlat16_4.xyz;
    u_xlat16_0.xyz = (u_xlatb2.x) ? u_xlat16_18.xyz : u_xlat16_4.xyz;
    u_xlat16_4.x = max(u_xlat16_0.z, u_xlat16_0.y);
    u_xlat16_1.w = max(u_xlat16_0.x, u_xlat16_4.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(1.0<u_xlat16_1.w);
#else
    u_xlatb2.x = 1.0<u_xlat16_1.w;
#endif
    u_xlat16_1.xyz = u_xlat16_0.xyz / u_xlat16_1.www;
    u_xlat16_0.w = 1.0;
    u_xlat16_0 = (u_xlatb2.x) ? u_xlat16_1 : u_xlat16_0;
    u_xlat16_4.x = min(u_xlat16_0.w, 1.10000002);
    u_xlat16_15 = u_xlat16_0.w + (-u_xlat16_4.x);
    u_xlat16_4.x = u_xlat16_7.x * u_xlat16_15 + u_xlat16_4.x;
    u_xlat16_2 = u_xlat16_4.x * 0.0500000007;
    SV_Target0.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb13 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb13 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_4.x = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb13) ? u_xlat16_4.x : 0.0;
    SV_Target0.w = 0.0156862754;
    SV_Target1.xyz = u_xlat16_0.xyz;
    SV_Target1.w = u_xlat16_2;
    SV_Target2.xy = vec2(0.0, 0.0);
    SV_Target2.w = vs_TEXCOORD4;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "MAIN_TEX_COLORING_ON" "FACE_MAP_NEW_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	vec4 _MainTex_ST;
uniform 	float _FaceMapRotateOffset;
uniform 	float _CharacterAmbientSensorShadowOn;
uniform 	vec4 _AmbientSensorUVs;
uniform 	float _UseClipPlane;
uniform 	float _ClipPlaneWorld;
uniform 	vec4 _ClipPlane;
uniform 	vec4 mhy_AvatarLightDir;
uniform 	vec4 mhy_CharacterOverrideLightDir;
uniform lowp sampler2D _CharacterAmbientSensorTex;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp float vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD6;
vec3 u_xlat0;
bool u_xlatb0;
vec3 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
bool u_xlatb3;
vec4 u_xlat4;
vec4 u_xlat5;
mediump vec2 u_xlat16_6;
float u_xlat7;
bool u_xlatb7;
vec3 u_xlat8;
bvec2 u_xlatb8;
bool u_xlatb9;
mediump float u_xlat16_13;
float u_xlat14;
bool u_xlatb14;
float u_xlat15;
float u_xlat21;
float u_xlat22;
bool u_xlatb22;
float u_xlat23;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.5<mhy_CharacterOverrideLightDir.w);
#else
    u_xlatb0 = 0.5<mhy_CharacterOverrideLightDir.w;
#endif
    u_xlat1.x = mhy_CharacterOverrideLightDir.x;
    u_xlat1.yz = (-mhy_CharacterOverrideLightDir.yz);
    u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat1.xyz : mhy_AvatarLightDir.xyz;
    u_xlat21 = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_ObjectToWorld[1].xyz);
    u_xlat1.x = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_ObjectToWorld[2].xyz);
    u_xlatb8.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseClipPlane, _ClipPlaneWorld, _UseClipPlane, _UseClipPlane)).xy;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(abs(_ClipPlane.w)<0.00100000005);
#else
    u_xlatb22 = abs(_ClipPlane.w)<0.00100000005;
#endif
    u_xlat2.xyz = _ClipPlane.www * _ClipPlane.xyz;
    u_xlat2.xyz = (bool(u_xlatb22)) ? vec3(0.0, 0.0, 0.0) : u_xlat2.xyz;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_WorldToObject[1];
    u_xlat3 = hlslcc_mtx4x4unity_WorldToObject[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat2 = hlslcc_mtx4x4unity_WorldToObject[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat2 = u_xlat2 + hlslcc_mtx4x4unity_WorldToObject[3];
    u_xlat2.xyz = u_xlat2.xyz / u_xlat2.www;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * _ClipPlane.yyy;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _ClipPlane.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _ClipPlane.zzz + u_xlat3.xyz;
    u_xlat22 = dot(u_xlat2.xyz, u_xlat3.xyz);
    u_xlat2.x = dot(in_POSITION0.xyz, u_xlat3.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(u_xlat2.x<u_xlat22);
#else
    u_xlatb9 = u_xlat2.x<u_xlat22;
#endif
    u_xlat22 = (-u_xlat22) + u_xlat2.x;
    u_xlat3.xyz = (-vec3(u_xlat22)) * u_xlat3.xyz + in_POSITION0.xyz;
    u_xlat3.w = 0.0;
    u_xlat4.xyz = in_POSITION0.xyz;
    u_xlat4.w = in_COLOR0.w;
    u_xlat2 = (bool(u_xlatb9)) ? u_xlat3 : u_xlat4;
    u_xlat22 = dot(in_POSITION0.xyz, _ClipPlane.xyz);
    u_xlat3.x = _ClipPlane.w + -0.00999999978;
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(u_xlat22<u_xlat3.x);
#else
    u_xlatb3 = u_xlat22<u_xlat3.x;
#endif
    u_xlat22 = u_xlat22 + (-_ClipPlane.w);
    u_xlat5.xyz = (-vec3(u_xlat22)) * _ClipPlane.xyz + in_POSITION0.xyz;
    u_xlat5.w = 0.0;
    u_xlat3 = (bool(u_xlatb3)) ? u_xlat5 : u_xlat4;
    u_xlat2.xyz = (u_xlatb8.y) ? u_xlat2.xyz : u_xlat3.xyz;
    u_xlat16_6.x = (u_xlatb8.y) ? u_xlat2.w : u_xlat3.w;
    u_xlat2.xyz = (u_xlatb8.x) ? u_xlat2.xyz : in_POSITION0.xyz;
    vs_COLOR0.w = (u_xlatb8.x) ? u_xlat16_6.x : in_COLOR0.w;
    u_xlat3.xyw = (-_WorldSpaceCameraPos.xyz) + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat4.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;
    u_xlat4.y = hlslcc_mtx4x4unity_ObjectToWorld[1].x;
    u_xlat4.z = hlslcc_mtx4x4unity_ObjectToWorld[2].x;
    u_xlat4.w = u_xlat3.x;
    u_xlat2.w = 1.0;
    u_xlat8.x = dot(u_xlat4, u_xlat2);
    u_xlat4.x = hlslcc_mtx4x4unity_ObjectToWorld[0].y;
    u_xlat4.y = hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat4.z = hlslcc_mtx4x4unity_ObjectToWorld[2].y;
    u_xlat4.w = u_xlat3.y;
    u_xlat15 = dot(u_xlat4, u_xlat2);
    u_xlat3.x = hlslcc_mtx4x4unity_ObjectToWorld[0].z;
    u_xlat3.y = hlslcc_mtx4x4unity_ObjectToWorld[1].z;
    u_xlat3.z = hlslcc_mtx4x4unity_ObjectToWorld[2].z;
    u_xlat22 = dot(u_xlat3, u_xlat2);
    u_xlat3.x = hlslcc_mtx4x4unity_ObjectToWorld[0].w;
    u_xlat3.y = hlslcc_mtx4x4unity_ObjectToWorld[1].w;
    u_xlat3.z = hlslcc_mtx4x4unity_ObjectToWorld[2].w;
    u_xlat3.w = hlslcc_mtx4x4unity_ObjectToWorld[3].w;
    u_xlat23 = dot(u_xlat3, u_xlat2);
    u_xlat3 = vec4(u_xlat15) * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat8.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVPZero[2] * vec4(u_xlat22) + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVPZero[3] * vec4(u_xlat23) + u_xlat3;
    u_xlat4 = u_xlat2.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat4 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat2.xxxx + u_xlat4;
    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat2.zzzz + u_xlat4;
    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat2;
    vs_TEXCOORD3.xyz = u_xlat2.xyz / u_xlat2.www;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat2.xz = u_xlat3.xw * vec2(0.5, 0.5);
    u_xlat8.x = u_xlat3.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat8.x * 0.5;
    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat8.xyz = in_NORMAL0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat8.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_NORMAL0.xxx + u_xlat8.xyz;
    u_xlat8.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_NORMAL0.zzz + u_xlat8.xyz;
    u_xlat2.x = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat8.xyz = u_xlat8.xyz * u_xlat2.xxx;
    u_xlat16_6.x = dot(u_xlat8.xyz, u_xlat0.xyz);
    vs_TEXCOORD1.w = u_xlat16_6.x * 0.497500002 + 0.5;
    u_xlat16_6.x = min(abs(u_xlat21), abs(u_xlat1.x));
    u_xlat16_13 = max(abs(u_xlat21), abs(u_xlat1.x));
    u_xlat16_13 = float(1.0) / u_xlat16_13;
    u_xlat16_6.x = u_xlat16_13 * u_xlat16_6.x;
    u_xlat16_13 = u_xlat16_6.x * u_xlat16_6.x;
    u_xlat0.x = u_xlat16_13 * 0.0208350997 + -0.0851330012;
    u_xlat0.x = u_xlat16_13 * u_xlat0.x + 0.180141002;
    u_xlat0.x = u_xlat16_13 * u_xlat0.x + -0.330299497;
    u_xlat0.x = u_xlat16_13 * u_xlat0.x + 0.999866009;
    u_xlat7 = u_xlat0.x * u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(abs(u_xlat21)<abs(u_xlat1.x));
#else
    u_xlatb14 = abs(u_xlat21)<abs(u_xlat1.x);
#endif
    u_xlat7 = u_xlat7 * -2.0 + 1.57079637;
    u_xlat7 = u_xlatb14 ? u_xlat7 : float(0.0);
    u_xlat0.x = u_xlat16_6.x * u_xlat0.x + u_xlat7;
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(u_xlat21<(-u_xlat21));
#else
    u_xlatb7 = u_xlat21<(-u_xlat21);
#endif
    u_xlat7 = u_xlatb7 ? -3.14159274 : float(0.0);
    u_xlat0.x = u_xlat7 + u_xlat0.x;
    u_xlat16_6.x = min(u_xlat21, u_xlat1.x);
    u_xlat16_13 = max(u_xlat21, u_xlat1.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(u_xlat16_6.x<(-u_xlat16_6.x));
#else
    u_xlatb7 = u_xlat16_6.x<(-u_xlat16_6.x);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(u_xlat16_13>=(-u_xlat16_13));
#else
    u_xlatb14 = u_xlat16_13>=(-u_xlat16_13);
#endif
    u_xlatb7 = u_xlatb14 && u_xlatb7;
    u_xlat0.x = (u_xlatb7) ? (-u_xlat0.x) : u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(0.0<(-u_xlat0.x));
#else
    u_xlatb7 = 0.0<(-u_xlat0.x);
#endif
    u_xlat16_6.x = u_xlat0.x * -0.318309903;
    u_xlat0.x = max(_FaceMapRotateOffset, 0.0);
    u_xlat14 = _FaceMapRotateOffset + 1.0;
    u_xlat14 = min(u_xlat14, 1.0);
    u_xlat14 = (-u_xlat0.x) + u_xlat14;
    u_xlat0.x = (-u_xlat0.x) + abs(u_xlat16_6.x);
    u_xlat14 = float(1.0) / u_xlat14;
    u_xlat0.x = u_xlat14 * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat14 = u_xlat0.x * -2.0 + 3.0;
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * u_xlat14;
    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);
    u_xlat0.x = min(u_xlat0.x, 0.999899983);
    u_xlat16_6.xy = in_TEXCOORD0.xy * vec2(-1.0, 1.0) + vec2(1.0, 0.0);
    vs_TEXCOORD6.xy = (bool(u_xlatb7)) ? u_xlat16_6.xy : in_TEXCOORD0.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_CharacterAmbientSensorShadowOn));
#else
    u_xlatb7 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_CharacterAmbientSensorShadowOn);
#endif
    if(u_xlatb7){
        u_xlat7 = textureLod(_CharacterAmbientSensorTex, _AmbientSensorUVs.xy, 0.0).x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb7 = !!(0.5<u_xlat7);
#else
        u_xlatb7 = 0.5<u_xlat7;
#endif
        vs_TEXCOORD4 = u_xlatb7 ? 1.0 : float(0.0);
    } else {
        vs_TEXCOORD4 = 0.0;
    //ENDIF
    }
    gl_Position = u_xlat3;
    vs_COLOR0.xyz = in_COLOR0.xyz;
    vs_TEXCOORD1.xyz = u_xlat8.xyz;
    vs_TEXCOORD2.zw = u_xlat3.zw;
    vs_TEXCOORD6.z = u_xlat0.x;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	mediump vec4 _Color;
uniform 	float _MainTexAlphaUse;
uniform 	mediump float _MainTexAlphaCutoff;
uniform 	mediump vec4 _MainTexTintColor;
uniform 	float _UseVertexColorAO;
uniform 	mediump float _LightArea;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	float _UseCoolShadowColorOrTex;
uniform 	mediump vec3 _CoolShadowMultColor;
uniform 	float _UseShadowTransition;
uniform 	float _ShadowTransitionRange;
uniform 	float _ShadowTransitionSoftness;
uniform 	mediump vec3 _SpecularColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	float _FaceBlushStrength;
uniform 	mediump vec3 _FaceBlushColor;
uniform 	mediump float _EmissionScaler;
uniform 	mediump vec3 _EmissionColor_MHY;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _TextureBiasWhenDithering;
uniform 	float _UseClipPlane;
uniform 	float _ES_CharacterAmbientLightOn;
uniform 	float _ES_CharacterAmbientBrightness;
uniform 	vec3 _ES_CharacterMainLightColor;
uniform 	vec3 _ES_CharacterAmbientLightColor;
uniform 	float _ES_CharacterMainLightRatio;
uniform 	float _ES_CharacterAmbientLightRatio;
uniform 	float _ES_CharacterColorTone;
uniform 	float _ES_CharacterPointLightWholeIntensity;
uniform 	vec4 mhy_AvatarLightDir;
uniform 	vec4 mhy_CharacterPointLightColor;
uniform 	vec4 mhy_CharacterOverrideLightDir;
uniform 	mediump vec4 _FlowMapColor01;
uniform 	mediump float _FlowScale01;
uniform 	mediump float _FlowMap01_Uspeed;
uniform 	vec4 _FlowMap01_ST;
uniform 	mediump float _FlowMap01_Vspeed;
uniform 	mediump float _Noise_Uspeed;
uniform 	vec4 _Noise_ST;
uniform 	mediump float _Noise_Vspeed;
uniform 	mediump float _NoiseFlowIntensity;
uniform 	mediump float _MaskOffset01;
uniform 	mediump float _NoiseIntensity;
uniform 	mediump float _Mask01_Power;
uniform 	mediump vec4 _FlowMapColor02;
uniform 	mediump float _FlowScale02;
uniform 	mediump float _FlowMap02_Uspeed;
uniform 	vec4 _FlowMap02_ST;
uniform 	mediump float _FlowMap02_Vspeed;
uniform 	mediump float _MaskOffset02;
uniform 	mediump float _Mask02_Power;
uniform 	mediump float _DissolveNoise_Uspeed;
uniform 	vec4 _DissovleNoise_ST;
uniform 	mediump float _DissolveNoise_Vspeed;
uniform 	mediump float _DissovleNoiseScale;
uniform 	mediump float _Dissovle;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _Noise;
uniform lowp sampler2D _FlowMap01;
uniform lowp sampler2D _Mask01;
uniform lowp sampler2D _FlowMap02;
uniform lowp sampler2D _Mask02;
uniform lowp sampler2D _DissovleNoise;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp float vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
lowp float u_xlat10_2;
int u_xlati2;
bvec4 u_xlatb2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
lowp float u_xlat10_3;
int u_xlati3;
bool u_xlatb3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec2 u_xlat16_7;
mediump vec3 u_xlat16_8;
vec3 u_xlat9;
bool u_xlatb10;
vec3 u_xlat12;
mediump vec3 u_xlat16_12;
lowp float u_xlat10_12;
int u_xlati12;
bool u_xlatb12;
vec3 u_xlat13;
mediump vec3 u_xlat16_13;
mediump float u_xlat16_14;
mediump vec2 u_xlat16_15;
mediump vec2 u_xlat16_16;
bvec2 u_xlatb20;
float u_xlat22;
bool u_xlatb22;
mediump vec2 u_xlat16_25;
float u_xlat30;
bool u_xlatb30;
float u_xlat32;
mediump float u_xlat16_32;
lowp float u_xlat10_32;
int u_xlati32;
bool u_xlatb32;
float u_xlat33;
mediump float u_xlat16_34;
mediump float u_xlat16_35;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseClipPlane));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseClipPlane);
#endif
    u_xlat16_1.x = vs_COLOR0.w + -0.00999999978;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(u_xlat16_1.x<0.0);
#else
    u_xlatb10 = u_xlat16_1.x<0.0;
#endif
    u_xlatb0 = u_xlatb0 && u_xlatb10;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(_DitherAlpha<0.949999988);
#else
        u_xlatb0 = _DitherAlpha<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb20.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb20.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb20.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = _DitherAlpha * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + -0.00999999978;
#ifdef UNITY_ADRENO_ES3
            u_xlatb0 = !!(u_xlat0.x<0.0);
#else
            u_xlatb0 = u_xlat0.x<0.0;
#endif
            if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(0.5<mhy_CharacterOverrideLightDir.w);
#else
    u_xlatb2.x = 0.5<mhy_CharacterOverrideLightDir.w;
#endif
    u_xlat3.x = mhy_CharacterOverrideLightDir.x;
    u_xlat3.yz = (-mhy_CharacterOverrideLightDir.yz);
    u_xlat2.xyz = (u_xlatb2.x) ? u_xlat3.xyz : mhy_AvatarLightDir.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat30) + u_xlat2.xyz;
    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
    u_xlat30 = _TextureBiasWhenDithering + -1.0;
    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy, u_xlat30);
    u_xlat16_4.xyz = u_xlat1.xyz * _MainTexTintColor.xyz;
    u_xlat16_5.xyz = u_xlat16_4.xyz + u_xlat16_4.xyz;
    u_xlat16_6.xyz = u_xlat1.xyz + _MainTexTintColor.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_6.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(-4.0, -4.0, -4.0) + u_xlat16_6.xyz;
    u_xlatb2 = lessThan(vec4(0.5, 0.5, 0.5, 0.00999999978), u_xlat1);
    u_xlat16_6.x = (u_xlatb2.x) ? float(1.0) : float(0.0);
    u_xlat16_6.y = (u_xlatb2.y) ? float(1.0) : float(0.0);
    u_xlat16_6.z = (u_xlatb2.z) ? float(1.0) : float(0.0);
    u_xlat16_4.xyz = u_xlat16_4.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat16_4.xyz = u_xlat16_6.xyz * u_xlat16_4.xyz + u_xlat16_5.xyz;
    u_xlatb2.xyz = equal(vec4(_MainTexAlphaUse), vec4(3.0, 1.0, 2.0, 0.0)).xyz;
    u_xlat30 = u_xlat1.w * _FaceBlushStrength;
    u_xlat16_3.xyz = (-u_xlat16_4.xyz) + _FaceBlushColor.xyz;
    u_xlat3.xyz = vec3(u_xlat30) * u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat16_4.xyz = (u_xlatb2.x) ? u_xlat3.xyz : u_xlat16_4.xyz;
    u_xlat16_34 = u_xlat1.w + (-_MainTexAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(u_xlat16_34<0.0);
#else
    u_xlatb30 = u_xlat16_34<0.0;
#endif
    u_xlatb30 = u_xlatb2.y && u_xlatb30;
    if((int(u_xlatb30) * int(0xffffffffu))!=0){discard;}
    u_xlat16_4.xyz = u_xlat16_4.xyz * _Color.xyz;
    u_xlatb30 = u_xlatb2.w && u_xlatb2.z;
    u_xlat16_34 = (u_xlatb30) ? u_xlat1.w : 0.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorAO));
#else
    u_xlatb2.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorAO);
#endif
    u_xlat16_5.x = vs_COLOR0.x * 0.5;
    u_xlat16_5.x = (u_xlatb2.x) ? u_xlat16_5.x : 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat16_5.x<0.0500000007);
#else
    u_xlatb12 = u_xlat16_5.x<0.0500000007;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(0.949999988<u_xlat16_5.x);
#else
    u_xlatb22 = 0.949999988<u_xlat16_5.x;
#endif
    u_xlat32 = u_xlat16_5.x + vs_TEXCOORD1.w;
    u_xlat32 = u_xlat32 * 0.5;
    u_xlat16_5.x = (u_xlatb22) ? 1.0 : u_xlat32;
    u_xlat16_5.x = (u_xlatb12) ? 0.0 : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb2.x) ? u_xlat16_5.x : vs_TEXCOORD1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(u_xlat16_5.x<_LightArea);
#else
    u_xlatb2.x = u_xlat16_5.x<_LightArea;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition));
#else
    u_xlatb12 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition);
#endif
    u_xlat16_5.x = (-u_xlat16_5.x) + _LightArea;
    u_xlat16_5.x = u_xlat16_5.x / _ShadowTransitionRange;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(u_xlat16_5.x>=1.0);
#else
    u_xlatb22 = u_xlat16_5.x>=1.0;
#endif
    u_xlat16_32 = u_xlat16_5.x + 0.00999999978;
    u_xlat16_32 = log2(u_xlat16_32);
    u_xlat32 = u_xlat16_32 * _ShadowTransitionSoftness;
    u_xlat32 = exp2(u_xlat32);
    u_xlat32 = min(u_xlat32, 1.0);
    u_xlat22 = (u_xlatb22) ? 1.0 : u_xlat32;
    u_xlat22 = (u_xlatb12) ? u_xlat22 : 1.0;
    u_xlat22 = u_xlatb2.x ? u_xlat22 : float(0.0);
#ifdef UNITY_ADRENO_ES3
    { bool cond = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(vs_TEXCOORD4); u_xlati32 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati32 = int((vec4(0.0, 0.0, 0.0, 0.0)!=vec4(vs_TEXCOORD4)) ? 0xFFFFFFFFu : uint(0u));
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex));
#else
    u_xlatb3 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex);
#endif
    u_xlat16_13.xyz = vec3(_FirstShadowMultColor.xxyz.y + (-_CoolShadowMultColor.x), _FirstShadowMultColor.xxyz.z + (-_CoolShadowMultColor.y), float(_FirstShadowMultColor.z) + (-_CoolShadowMultColor.z));
    u_xlat13.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_13.xyz + _CoolShadowMultColor.xyz;
    u_xlat16_5.xyz = (bool(u_xlatb3)) ? u_xlat13.xyz : vec3(_FirstShadowMultColor.x, _FirstShadowMultColor.y, _FirstShadowMultColor.z);
    u_xlati3 = ~u_xlati32;
    u_xlati12 = u_xlatb12 ? u_xlati3 : int(0);
    u_xlat16_3.xyz = u_xlat16_5.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat3.xyz = vec3(u_xlat22) * u_xlat16_3.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_5.xyz = (int(u_xlati12) != 0) ? u_xlat3.xyz : u_xlat16_5.xyz;
    u_xlat16_5.xyz = (int(u_xlati32) != 0) ? u_xlat16_5.xyz : vec3(1.0, 1.0, 1.0);
    u_xlat16_35 = dot(vs_TEXCOORD1.xyz, u_xlat0.xyz);
    u_xlat16_35 = max(u_xlat16_35, 0.00100000005);
    u_xlat16_35 = log2(u_xlat16_35);
    u_xlat16_35 = u_xlat16_35 * _Shininess;
    u_xlat16_35 = exp2(u_xlat16_35);
    u_xlat16_6.xyz = vec3(u_xlat16_35) * _SpecularColor.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(_SpecMulti);
    u_xlat16_4.xyz = vec3(u_xlat16_4.x * _EmissionColor_MHY.xxyz.y, u_xlat16_4.y * _EmissionColor_MHY.xxyz.z, u_xlat16_4.z * float(_EmissionColor_MHY.z));
    u_xlat0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlati2 = int(uint(u_xlatb2.x) * 0xffffffffu | uint(u_xlati32));
    u_xlat12.xyz = u_xlat0.xyz * u_xlat16_5.xyz;
    u_xlat0.xyz = (int(u_xlati2) != 0) ? u_xlat12.xyz : u_xlat0.xyz;
    u_xlat0.xyz = u_xlat16_6.xyz * vec3(0.5, 0.5, 0.5) + u_xlat0.xyz;
    u_xlat2.xy = vs_TEXCOORD0.zw * _FlowMap01_ST.xy + _FlowMap01_ST.zw;
    u_xlat16_5.x = _Time.y * _FlowMap01_Uspeed + u_xlat2.x;
    u_xlat16_5.y = _Time.y * _FlowMap01_Vspeed + u_xlat2.y;
    u_xlat2.xy = vs_TEXCOORD0.zw * _Noise_ST.xy + _Noise_ST.zw;
    u_xlat16_6.x = _Time.y * _Noise_Uspeed + u_xlat2.x;
    u_xlat16_6.y = _Time.y * _Noise_Vspeed + u_xlat2.y;
    u_xlat10_2 = texture(_Noise, u_xlat16_6.xy).x;
    u_xlat16_25.x = _MaskOffset01 * 1.39999998 + -0.699999988;
    u_xlat16_16.x = u_xlat10_2 * _NoiseIntensity;
    u_xlat12.xy = vs_TEXCOORD0.zw * _FlowMap02_ST.xy + _FlowMap02_ST.zw;
    u_xlat16_7.x = _Time.y * _FlowMap02_Uspeed + u_xlat12.x;
    u_xlat16_7.y = _Time.y * _FlowMap02_Vspeed + u_xlat12.y;
    u_xlat16_25.y = _MaskOffset02 * 1.39999998 + -0.699999988;
    u_xlat16_8.xyz = _FlowMapColor01.xyz * vec3(_FlowScale01);
    u_xlat16_5.xy = vec2(u_xlat10_2) * vec2(vec2(_NoiseFlowIntensity, _NoiseFlowIntensity)) + u_xlat16_5.xy;
    u_xlat10_12 = texture(_FlowMap01, u_xlat16_5.xy).x;
    u_xlat16_12.xyz = vec3(u_xlat10_12) * u_xlat16_8.xyz;
    u_xlat16_5.x = (-vs_TEXCOORD0.z) + 1.0;
    u_xlat16_1.xz = u_xlat16_25.xy + u_xlat16_5.xx;
    u_xlat16_1.yw = vec2(u_xlat10_2) * vec2(vec2(_NoiseIntensity, _NoiseIntensity)) + (-vs_TEXCOORD0.ww);
    u_xlat16_16.y = 1.0;
    u_xlat16_15.xy = u_xlat16_1.xy + u_xlat16_16.xy;
    u_xlat10_3 = texture(_Mask01, u_xlat16_15.xy).x;
    u_xlat16_3.x = max(u_xlat10_3, 9.99999975e-05);
    u_xlat16_3.x = log2(u_xlat16_3.x);
    u_xlat16_3.x = u_xlat16_3.x * _Mask01_Power;
    u_xlat16_3.x = exp2(u_xlat16_3.x);
    u_xlat16_8.xyz = _FlowMapColor02.xyz * vec3(_FlowScale02);
    u_xlat16_15.xy = vec2(u_xlat10_2) * vec2(vec2(_NoiseFlowIntensity, _NoiseFlowIntensity)) + u_xlat16_7.xy;
    u_xlat10_2 = texture(_FlowMap02, u_xlat16_15.xy).x;
    u_xlat16_13.xyz = vec3(u_xlat10_2) * u_xlat16_8.xyz;
    u_xlat16_5.xy = vec2(u_xlat16_1.z + u_xlat16_16.x, u_xlat16_1.w + u_xlat16_16.y);
    u_xlat10_2 = texture(_Mask02, u_xlat16_5.xy).x;
    u_xlat16_2.x = max(u_xlat10_2, 9.99999975e-05);
    u_xlat16_2.x = log2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * _Mask02_Power;
    u_xlat16_2.x = exp2(u_xlat16_2.x);
    u_xlat16_13.xyz = u_xlat16_2.xxx * u_xlat16_13.xyz;
    u_xlat16_2.xyz = u_xlat16_12.xyz * u_xlat16_3.xxx + u_xlat16_13.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(_EmissionScaler) + u_xlat16_2.xyz;
    u_xlat3.xyz = (-u_xlat0.xyz) + u_xlat16_4.xyz;
    u_xlat3.xyz = vec3(u_xlat16_34) * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat9.xy = vs_TEXCOORD0.zw * _DissovleNoise_ST.xy + _DissovleNoise_ST.zw;
    u_xlat16_4.x = _Time.y * _DissolveNoise_Uspeed + u_xlat9.x;
    u_xlat16_4.y = _Time.y * _DissolveNoise_Vspeed + u_xlat9.y;
    u_xlat10_32 = texture(_DissovleNoise, u_xlat16_4.xy).x;
    u_xlat32 = u_xlat10_32 * _DissovleNoiseScale + vs_TEXCOORD0.z;
#ifdef UNITY_ADRENO_ES3
    u_xlatb32 = !!(_Dissovle>=u_xlat32);
#else
    u_xlatb32 = _Dissovle>=u_xlat32;
#endif
    u_xlat0.xyz = (bool(u_xlatb30)) ? u_xlat3.xyz : u_xlat0.xyz;
    u_xlat0.xyz = u_xlat16_2.xyz + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(0.00999999978<u_xlat16_34);
#else
    u_xlatb30 = 0.00999999978<u_xlat16_34;
#endif
    if((int(u_xlatb32) * int(0xffffffffu))==0){discard;}
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn));
#else
    u_xlatb2.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn);
#endif
    u_xlat12.xyz = u_xlat0.xyz * vec3(vec3(_ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness));
    u_xlat3.xyz = vec3(vec3(_ES_CharacterPointLightWholeIntensity, _ES_CharacterPointLightWholeIntensity, _ES_CharacterPointLightWholeIntensity)) * mhy_CharacterPointLightColor.xyz;
    u_xlat9.xyz = _ES_CharacterMainLightColor.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat9.xyz = min(max(u_xlat9.xyz, 0.0), 1.0);
#else
    u_xlat9.xyz = clamp(u_xlat9.xyz, 0.0, 1.0);
#endif
    u_xlat33 = (-mhy_CharacterPointLightColor.w) + 1.0;
    u_xlat3.xyz = u_xlat9.xyz * vec3(u_xlat33) + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat3.xyz = vec3(vec3(_ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio)) * u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat12.xyz = u_xlat12.xyz * u_xlat3.xyz;
    u_xlat3.xyz = _ES_CharacterAmbientLightColor.xyz * vec3(_ES_CharacterAmbientLightRatio);
    u_xlat16_4.xyz = u_xlat12.xyz * vec3(10.0, 10.0, 10.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.xyz = min(max(u_xlat16_4.xyz, 0.0), 1.0);
#else
    u_xlat16_4.xyz = clamp(u_xlat16_4.xyz, 0.0, 1.0);
#endif
    u_xlat12.xyz = u_xlat3.xyz * u_xlat16_4.xyz + u_xlat12.xyz;
    u_xlat16_4.xyz = (u_xlatb2.x) ? u_xlat12.xyz : u_xlat0.xyz;
    u_xlat16_5.xyz = u_xlat0.xyz + (-u_xlat16_4.xyz);
    u_xlat16_5.xyz = vec3(u_xlat16_34) * u_xlat16_5.xyz + u_xlat16_4.xyz;
    u_xlat16_0.xyz = (bool(u_xlatb30)) ? u_xlat16_5.xyz : u_xlat16_4.xyz;
    u_xlat16_4.x = max(u_xlat16_0.z, u_xlat16_0.y);
    u_xlat16_1.w = max(u_xlat16_0.x, u_xlat16_4.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(1.0<u_xlat16_1.w);
#else
    u_xlatb2.x = 1.0<u_xlat16_1.w;
#endif
    u_xlat16_1.xyz = u_xlat16_0.xyz / u_xlat16_1.www;
    u_xlat16_0.w = 1.0;
    u_xlat16_0 = (u_xlatb2.x) ? u_xlat16_1 : u_xlat16_0;
    u_xlat16_4.x = min(u_xlat16_0.w, 1.10000002);
    u_xlat16_14 = u_xlat16_0.w + (-u_xlat16_4.x);
    u_xlat16_4.x = u_xlat16_34 * u_xlat16_14 + u_xlat16_4.x;
    u_xlat16_2.x = u_xlat16_4.x * 0.0500000007;
    SV_Target0.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb12 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_4.x = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb12) ? u_xlat16_4.x : 0.0;
    SV_Target0.w = 0.0156862754;
    SV_Target1.xyz = u_xlat16_0.xyz;
    SV_Target1.w = u_xlat16_2.x;
    SV_Target2.xy = vec2(0.0, 0.0);
    SV_Target2.w = vs_TEXCOORD4;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "TOON_SPECULAR_ON" "TOON_LIGHTMAP_ON" "MAIN_TEX_COLORING_ON" "FACE_MAP_NEW_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	vec4 _MainTex_ST;
uniform 	float _FaceMapRotateOffset;
uniform 	float _CharacterAmbientSensorShadowOn;
uniform 	vec4 _AmbientSensorUVs;
uniform 	float _UseClipPlane;
uniform 	float _ClipPlaneWorld;
uniform 	vec4 _ClipPlane;
uniform 	vec4 mhy_AvatarLightDir;
uniform 	vec4 mhy_CharacterOverrideLightDir;
uniform lowp sampler2D _CharacterAmbientSensorTex;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp float vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD6;
vec3 u_xlat0;
bool u_xlatb0;
vec3 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
bool u_xlatb3;
vec4 u_xlat4;
vec4 u_xlat5;
mediump vec2 u_xlat16_6;
float u_xlat7;
bool u_xlatb7;
vec3 u_xlat8;
bvec2 u_xlatb8;
bool u_xlatb9;
mediump float u_xlat16_13;
float u_xlat14;
bool u_xlatb14;
float u_xlat15;
float u_xlat21;
float u_xlat22;
bool u_xlatb22;
float u_xlat23;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.5<mhy_CharacterOverrideLightDir.w);
#else
    u_xlatb0 = 0.5<mhy_CharacterOverrideLightDir.w;
#endif
    u_xlat1.x = mhy_CharacterOverrideLightDir.x;
    u_xlat1.yz = (-mhy_CharacterOverrideLightDir.yz);
    u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat1.xyz : mhy_AvatarLightDir.xyz;
    u_xlat21 = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_ObjectToWorld[1].xyz);
    u_xlat1.x = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_ObjectToWorld[2].xyz);
    u_xlatb8.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseClipPlane, _ClipPlaneWorld, _UseClipPlane, _UseClipPlane)).xy;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(abs(_ClipPlane.w)<0.00100000005);
#else
    u_xlatb22 = abs(_ClipPlane.w)<0.00100000005;
#endif
    u_xlat2.xyz = _ClipPlane.www * _ClipPlane.xyz;
    u_xlat2.xyz = (bool(u_xlatb22)) ? vec3(0.0, 0.0, 0.0) : u_xlat2.xyz;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_WorldToObject[1];
    u_xlat3 = hlslcc_mtx4x4unity_WorldToObject[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat2 = hlslcc_mtx4x4unity_WorldToObject[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat2 = u_xlat2 + hlslcc_mtx4x4unity_WorldToObject[3];
    u_xlat2.xyz = u_xlat2.xyz / u_xlat2.www;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * _ClipPlane.yyy;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _ClipPlane.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _ClipPlane.zzz + u_xlat3.xyz;
    u_xlat22 = dot(u_xlat2.xyz, u_xlat3.xyz);
    u_xlat2.x = dot(in_POSITION0.xyz, u_xlat3.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(u_xlat2.x<u_xlat22);
#else
    u_xlatb9 = u_xlat2.x<u_xlat22;
#endif
    u_xlat22 = (-u_xlat22) + u_xlat2.x;
    u_xlat3.xyz = (-vec3(u_xlat22)) * u_xlat3.xyz + in_POSITION0.xyz;
    u_xlat3.w = 0.0;
    u_xlat4.xyz = in_POSITION0.xyz;
    u_xlat4.w = in_COLOR0.w;
    u_xlat2 = (bool(u_xlatb9)) ? u_xlat3 : u_xlat4;
    u_xlat22 = dot(in_POSITION0.xyz, _ClipPlane.xyz);
    u_xlat3.x = _ClipPlane.w + -0.00999999978;
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(u_xlat22<u_xlat3.x);
#else
    u_xlatb3 = u_xlat22<u_xlat3.x;
#endif
    u_xlat22 = u_xlat22 + (-_ClipPlane.w);
    u_xlat5.xyz = (-vec3(u_xlat22)) * _ClipPlane.xyz + in_POSITION0.xyz;
    u_xlat5.w = 0.0;
    u_xlat3 = (bool(u_xlatb3)) ? u_xlat5 : u_xlat4;
    u_xlat2.xyz = (u_xlatb8.y) ? u_xlat2.xyz : u_xlat3.xyz;
    u_xlat16_6.x = (u_xlatb8.y) ? u_xlat2.w : u_xlat3.w;
    u_xlat2.xyz = (u_xlatb8.x) ? u_xlat2.xyz : in_POSITION0.xyz;
    vs_COLOR0.w = (u_xlatb8.x) ? u_xlat16_6.x : in_COLOR0.w;
    u_xlat3.xyw = (-_WorldSpaceCameraPos.xyz) + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat4.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;
    u_xlat4.y = hlslcc_mtx4x4unity_ObjectToWorld[1].x;
    u_xlat4.z = hlslcc_mtx4x4unity_ObjectToWorld[2].x;
    u_xlat4.w = u_xlat3.x;
    u_xlat2.w = 1.0;
    u_xlat8.x = dot(u_xlat4, u_xlat2);
    u_xlat4.x = hlslcc_mtx4x4unity_ObjectToWorld[0].y;
    u_xlat4.y = hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat4.z = hlslcc_mtx4x4unity_ObjectToWorld[2].y;
    u_xlat4.w = u_xlat3.y;
    u_xlat15 = dot(u_xlat4, u_xlat2);
    u_xlat3.x = hlslcc_mtx4x4unity_ObjectToWorld[0].z;
    u_xlat3.y = hlslcc_mtx4x4unity_ObjectToWorld[1].z;
    u_xlat3.z = hlslcc_mtx4x4unity_ObjectToWorld[2].z;
    u_xlat22 = dot(u_xlat3, u_xlat2);
    u_xlat3.x = hlslcc_mtx4x4unity_ObjectToWorld[0].w;
    u_xlat3.y = hlslcc_mtx4x4unity_ObjectToWorld[1].w;
    u_xlat3.z = hlslcc_mtx4x4unity_ObjectToWorld[2].w;
    u_xlat3.w = hlslcc_mtx4x4unity_ObjectToWorld[3].w;
    u_xlat23 = dot(u_xlat3, u_xlat2);
    u_xlat3 = vec4(u_xlat15) * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat8.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVPZero[2] * vec4(u_xlat22) + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVPZero[3] * vec4(u_xlat23) + u_xlat3;
    u_xlat4 = u_xlat2.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat4 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat2.xxxx + u_xlat4;
    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat2.zzzz + u_xlat4;
    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat2;
    vs_TEXCOORD3.xyz = u_xlat2.xyz / u_xlat2.www;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat2.xz = u_xlat3.xw * vec2(0.5, 0.5);
    u_xlat8.x = u_xlat3.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat8.x * 0.5;
    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat8.xyz = in_NORMAL0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat8.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_NORMAL0.xxx + u_xlat8.xyz;
    u_xlat8.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_NORMAL0.zzz + u_xlat8.xyz;
    u_xlat2.x = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat8.xyz = u_xlat8.xyz * u_xlat2.xxx;
    u_xlat16_6.x = dot(u_xlat8.xyz, u_xlat0.xyz);
    vs_TEXCOORD1.w = u_xlat16_6.x * 0.497500002 + 0.5;
    u_xlat16_6.x = min(abs(u_xlat21), abs(u_xlat1.x));
    u_xlat16_13 = max(abs(u_xlat21), abs(u_xlat1.x));
    u_xlat16_13 = float(1.0) / u_xlat16_13;
    u_xlat16_6.x = u_xlat16_13 * u_xlat16_6.x;
    u_xlat16_13 = u_xlat16_6.x * u_xlat16_6.x;
    u_xlat0.x = u_xlat16_13 * 0.0208350997 + -0.0851330012;
    u_xlat0.x = u_xlat16_13 * u_xlat0.x + 0.180141002;
    u_xlat0.x = u_xlat16_13 * u_xlat0.x + -0.330299497;
    u_xlat0.x = u_xlat16_13 * u_xlat0.x + 0.999866009;
    u_xlat7 = u_xlat0.x * u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(abs(u_xlat21)<abs(u_xlat1.x));
#else
    u_xlatb14 = abs(u_xlat21)<abs(u_xlat1.x);
#endif
    u_xlat7 = u_xlat7 * -2.0 + 1.57079637;
    u_xlat7 = u_xlatb14 ? u_xlat7 : float(0.0);
    u_xlat0.x = u_xlat16_6.x * u_xlat0.x + u_xlat7;
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(u_xlat21<(-u_xlat21));
#else
    u_xlatb7 = u_xlat21<(-u_xlat21);
#endif
    u_xlat7 = u_xlatb7 ? -3.14159274 : float(0.0);
    u_xlat0.x = u_xlat7 + u_xlat0.x;
    u_xlat16_6.x = min(u_xlat21, u_xlat1.x);
    u_xlat16_13 = max(u_xlat21, u_xlat1.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(u_xlat16_6.x<(-u_xlat16_6.x));
#else
    u_xlatb7 = u_xlat16_6.x<(-u_xlat16_6.x);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(u_xlat16_13>=(-u_xlat16_13));
#else
    u_xlatb14 = u_xlat16_13>=(-u_xlat16_13);
#endif
    u_xlatb7 = u_xlatb14 && u_xlatb7;
    u_xlat0.x = (u_xlatb7) ? (-u_xlat0.x) : u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(0.0<(-u_xlat0.x));
#else
    u_xlatb7 = 0.0<(-u_xlat0.x);
#endif
    u_xlat16_6.x = u_xlat0.x * -0.318309903;
    u_xlat0.x = max(_FaceMapRotateOffset, 0.0);
    u_xlat14 = _FaceMapRotateOffset + 1.0;
    u_xlat14 = min(u_xlat14, 1.0);
    u_xlat14 = (-u_xlat0.x) + u_xlat14;
    u_xlat0.x = (-u_xlat0.x) + abs(u_xlat16_6.x);
    u_xlat14 = float(1.0) / u_xlat14;
    u_xlat0.x = u_xlat14 * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat14 = u_xlat0.x * -2.0 + 3.0;
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * u_xlat14;
    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);
    u_xlat0.x = min(u_xlat0.x, 0.999899983);
    u_xlat16_6.xy = in_TEXCOORD0.xy * vec2(-1.0, 1.0) + vec2(1.0, 0.0);
    vs_TEXCOORD6.xy = (bool(u_xlatb7)) ? u_xlat16_6.xy : in_TEXCOORD0.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_CharacterAmbientSensorShadowOn));
#else
    u_xlatb7 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_CharacterAmbientSensorShadowOn);
#endif
    if(u_xlatb7){
        u_xlat7 = textureLod(_CharacterAmbientSensorTex, _AmbientSensorUVs.xy, 0.0).x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb7 = !!(0.5<u_xlat7);
#else
        u_xlatb7 = 0.5<u_xlat7;
#endif
        vs_TEXCOORD4 = u_xlatb7 ? 1.0 : float(0.0);
    } else {
        vs_TEXCOORD4 = 0.0;
    //ENDIF
    }
    gl_Position = u_xlat3;
    vs_COLOR0.xyz = in_COLOR0.xyz;
    vs_TEXCOORD1.xyz = u_xlat8.xyz;
    vs_TEXCOORD2.zw = u_xlat3.zw;
    vs_TEXCOORD6.z = u_xlat0.x;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	mediump vec4 _Color;
uniform 	float _MainTexAlphaUse;
uniform 	mediump float _MainTexAlphaCutoff;
uniform 	mediump vec4 _MainTexTintColor;
uniform 	float _UseLightMapColorAO;
uniform 	float _UseVertexColorAO;
uniform 	mediump float _LightArea;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	float _UseCoolShadowColorOrTex;
uniform 	mediump vec3 _CoolShadowMultColor;
uniform 	float _UseShadowTransition;
uniform 	float _ShadowTransitionRange;
uniform 	float _ShadowTransitionSoftness;
uniform 	mediump vec3 _SpecularColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	float _FaceBlushStrength;
uniform 	mediump vec3 _FaceBlushColor;
uniform 	float _FaceMapSoftness;
uniform 	mediump float _EmissionScaler;
uniform 	mediump vec3 _EmissionColor_MHY;
uniform 	float _UseMaterial2;
uniform 	mediump vec3 _Color2;
uniform 	mediump vec3 _FirstShadowMultColor2;
uniform 	mediump vec3 _CoolShadowMultColor2;
uniform 	mediump float _Shininess2;
uniform 	mediump float _SpecMulti2;
uniform 	float _ShadowTransitionRange2;
uniform 	float _ShadowTransitionSoftness2;
uniform 	float _UseMaterial3;
uniform 	mediump vec3 _Color3;
uniform 	mediump vec3 _FirstShadowMultColor3;
uniform 	mediump vec3 _CoolShadowMultColor3;
uniform 	mediump float _Shininess3;
uniform 	mediump float _SpecMulti3;
uniform 	float _ShadowTransitionRange3;
uniform 	float _ShadowTransitionSoftness3;
uniform 	float _UseMaterial4;
uniform 	mediump vec3 _Color4;
uniform 	mediump vec3 _FirstShadowMultColor4;
uniform 	mediump vec3 _CoolShadowMultColor4;
uniform 	mediump float _Shininess4;
uniform 	mediump float _SpecMulti4;
uniform 	float _ShadowTransitionRange4;
uniform 	float _ShadowTransitionSoftness4;
uniform 	float _UseMaterial5;
uniform 	mediump vec3 _Color5;
uniform 	mediump vec3 _FirstShadowMultColor5;
uniform 	mediump vec3 _CoolShadowMultColor5;
uniform 	mediump float _Shininess5;
uniform 	mediump float _SpecMulti5;
uniform 	float _ShadowTransitionRange5;
uniform 	float _ShadowTransitionSoftness5;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _TextureBiasWhenDithering;
uniform 	float _UseClipPlane;
uniform 	float _ES_CharacterAmbientLightOn;
uniform 	float _ES_CharacterAmbientBrightness;
uniform 	vec3 _ES_CharacterMainLightColor;
uniform 	vec3 _ES_CharacterAmbientLightColor;
uniform 	float _ES_CharacterMainLightRatio;
uniform 	float _ES_CharacterAmbientLightRatio;
uniform 	float _ES_CharacterColorTone;
uniform 	float _ES_CharacterPointLightWholeIntensity;
uniform 	vec4 mhy_AvatarLightDir;
uniform 	vec4 mhy_CharacterPointLightColor;
uniform 	vec4 mhy_CharacterOverrideLightDir;
uniform 	mediump vec4 _FlowMapColor01;
uniform 	mediump float _FlowScale01;
uniform 	mediump float _FlowMap01_Uspeed;
uniform 	vec4 _FlowMap01_ST;
uniform 	mediump float _FlowMap01_Vspeed;
uniform 	mediump float _Noise_Uspeed;
uniform 	vec4 _Noise_ST;
uniform 	mediump float _Noise_Vspeed;
uniform 	mediump float _NoiseFlowIntensity;
uniform 	mediump float _MaskOffset01;
uniform 	mediump float _NoiseIntensity;
uniform 	mediump float _Mask01_Power;
uniform 	mediump vec4 _FlowMapColor02;
uniform 	mediump float _FlowScale02;
uniform 	mediump float _FlowMap02_Uspeed;
uniform 	vec4 _FlowMap02_ST;
uniform 	mediump float _FlowMap02_Vspeed;
uniform 	mediump float _MaskOffset02;
uniform 	mediump float _Mask02_Power;
uniform 	mediump float _DissolveNoise_Uspeed;
uniform 	vec4 _DissovleNoise_ST;
uniform 	mediump float _DissolveNoise_Vspeed;
uniform 	mediump float _DissovleNoiseScale;
uniform 	mediump float _Dissovle;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _FaceMapTex;
uniform lowp sampler2D _Noise;
uniform lowp sampler2D _FlowMap01;
uniform lowp sampler2D _Mask01;
uniform lowp sampler2D _FlowMap02;
uniform lowp sampler2D _Mask02;
uniform lowp sampler2D _DissovleNoise;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp float vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
vec3 u_xlat2;
mediump float u_xlat16_2;
bvec4 u_xlatb2;
vec3 u_xlat3;
mediump float u_xlat16_3;
lowp vec4 u_xlat10_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
bvec4 u_xlatb5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
mediump vec3 u_xlat16_7;
int u_xlati7;
bvec3 u_xlatb7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
bool u_xlatb11;
vec3 u_xlat13;
mediump vec3 u_xlat16_13;
lowp float u_xlat10_13;
bool u_xlatb13;
float u_xlat14;
mediump vec3 u_xlat16_14;
int u_xlati14;
mediump float u_xlat16_15;
mediump vec3 u_xlat16_17;
mediump vec3 u_xlat16_19;
bvec2 u_xlatb22;
vec2 u_xlat24;
mediump float u_xlat16_30;
float u_xlat33;
mediump float u_xlat16_33;
lowp float u_xlat10_33;
int u_xlati33;
bool u_xlatb33;
float u_xlat35;
float u_xlat36;
int u_xlati36;
bool u_xlatb36;
mediump float u_xlat16_37;
mediump float u_xlat16_39;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseClipPlane));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseClipPlane);
#endif
    u_xlat16_1.x = vs_COLOR0.w + -0.00999999978;
#ifdef UNITY_ADRENO_ES3
    u_xlatb11 = !!(u_xlat16_1.x<0.0);
#else
    u_xlatb11 = u_xlat16_1.x<0.0;
#endif
    u_xlatb0 = u_xlatb0 && u_xlatb11;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(_DitherAlpha<0.949999988);
#else
        u_xlatb0 = _DitherAlpha<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb22.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb22.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb22.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = _DitherAlpha * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + -0.00999999978;
#ifdef UNITY_ADRENO_ES3
            u_xlatb0 = !!(u_xlat0.x<0.0);
#else
            u_xlatb0 = u_xlat0.x<0.0;
#endif
            if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(0.5<mhy_CharacterOverrideLightDir.w);
#else
    u_xlatb2.x = 0.5<mhy_CharacterOverrideLightDir.w;
#endif
    u_xlat3.x = mhy_CharacterOverrideLightDir.x;
    u_xlat3.yz = (-mhy_CharacterOverrideLightDir.yz);
    u_xlat2.xyz = (u_xlatb2.x) ? u_xlat3.xyz : mhy_AvatarLightDir.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat33) + u_xlat2.xyz;
    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat0.xyz = vec3(u_xlat33) * u_xlat0.xyz;
    u_xlat33 = _TextureBiasWhenDithering + -1.0;
    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy, u_xlat33);
    u_xlat16_4.xyz = u_xlat1.xyz * _MainTexTintColor.xyz;
    u_xlat16_5.xyz = u_xlat16_4.xyz + u_xlat16_4.xyz;
    u_xlat16_6.xyz = u_xlat1.xyz + _MainTexTintColor.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_6.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(-4.0, -4.0, -4.0) + u_xlat16_6.xyz;
    u_xlatb2 = lessThan(vec4(0.5, 0.5, 0.5, 0.00999999978), u_xlat1);
    u_xlat16_6.x = (u_xlatb2.x) ? float(1.0) : float(0.0);
    u_xlat16_6.y = (u_xlatb2.y) ? float(1.0) : float(0.0);
    u_xlat16_6.z = (u_xlatb2.z) ? float(1.0) : float(0.0);
    u_xlat16_4.xyz = u_xlat16_4.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat16_4.xyz = u_xlat16_6.xyz * u_xlat16_4.xyz + u_xlat16_5.xyz;
    u_xlatb2.xyz = equal(vec4(_MainTexAlphaUse), vec4(3.0, 1.0, 2.0, 0.0)).xyz;
    u_xlat3.x = u_xlat1.w * _FaceBlushStrength;
    u_xlat16_14.xyz = (-u_xlat16_4.xyz) + _FaceBlushColor.xyz;
    u_xlat3.xyz = u_xlat3.xxx * u_xlat16_14.xyz + u_xlat16_4.xyz;
    u_xlat16_4.xyz = (u_xlatb2.x) ? u_xlat3.xyz : u_xlat16_4.xyz;
    u_xlat16_37 = u_xlat1.w + (-_MainTexAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(u_xlat16_37<0.0);
#else
    u_xlatb2.x = u_xlat16_37<0.0;
#endif
    u_xlatb2.x = u_xlatb2.y && u_xlatb2.x;
    if((int(u_xlatb2.x) * int(0xffffffffu))!=0){discard;}
    u_xlat10_3 = texture(_LightMapTex, vs_TEXCOORD0.xy, u_xlat33);
    u_xlatb2.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseLightMapColorAO, _UseVertexColorAO, _UseLightMapColorAO, _UseLightMapColorAO)).xy;
    u_xlat16_37 = (u_xlatb2.x) ? u_xlat10_3.y : 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseMaterial2));
#else
    u_xlatb33 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseMaterial2);
#endif
    u_xlatb5 = greaterThanEqual(u_xlat10_3.wwww, vec4(0.800000012, 0.400000006, 0.200000003, 0.600000024));
    u_xlatb33 = u_xlatb33 && u_xlatb5.x;
    u_xlat33 = (u_xlatb33) ? 2.0 : 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseMaterial3));
#else
    u_xlatb2.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseMaterial3);
#endif
    u_xlatb2.x = u_xlatb5.y && u_xlatb2.x;
    u_xlatb7.xyz = lessThan(u_xlat10_3.wwww, vec4(0.600000024, 0.400000006, 0.800000012, 0.0)).xyz;
    u_xlatb2.x = u_xlatb2.x && u_xlatb7.x;
    u_xlat33 = (u_xlatb2.x) ? 3.0 : u_xlat33;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseMaterial4));
#else
    u_xlatb2.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseMaterial4);
#endif
    u_xlatb2.x = u_xlatb5.z && u_xlatb2.x;
    u_xlatb2.x = u_xlatb7.y && u_xlatb2.x;
    u_xlat33 = (u_xlatb2.x) ? 4.0 : u_xlat33;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseMaterial5));
#else
    u_xlatb2.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseMaterial5);
#endif
    u_xlatb2.x = u_xlatb5.w && u_xlatb2.x;
    u_xlatb2.x = u_xlatb7.z && u_xlatb2.x;
    u_xlat33 = (u_xlatb2.x) ? 5.0 : u_xlat33;
    u_xlatb5 = equal(vec4(u_xlat33), vec4(2.0, 3.0, 4.0, 5.0));
    u_xlat16_6.xyz = (u_xlatb5.x) ? _Color2.xyz : _Color.xyz;
    u_xlat16_6.xyz = (u_xlatb5.y) ? _Color3.xyz : u_xlat16_6.xyz;
    u_xlat16_6.xyz = (u_xlatb5.z) ? _Color4.xyz : u_xlat16_6.xyz;
    u_xlat16_6.xyz = (u_xlatb5.w) ? _Color5.xyz : u_xlat16_6.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_6.xyz;
    u_xlatb2.x = u_xlatb2.w && u_xlatb2.z;
    u_xlat16_6.x = (u_xlatb2.x) ? u_xlat1.w : 0.0;
    u_xlat24.x = texture(_FaceMapTex, vs_TEXCOORD6.xy).w;
    u_xlat35 = max(_FaceMapSoftness, 9.99999997e-07);
    u_xlat16_17.x = (-u_xlat35) + vs_TEXCOORD6.z;
    u_xlat16_14.x = max(u_xlat16_17.x, 9.99999975e-05);
    u_xlat16_14.x = min(u_xlat16_14.x, 0.998899996);
    u_xlat16_17.x = u_xlat35 + vs_TEXCOORD6.z;
    u_xlat24.y = min(u_xlat16_17.x, 0.999899983);
    u_xlat24.xy = u_xlat24.xy + (-u_xlat16_14.xx);
    u_xlat35 = float(1.0) / u_xlat24.y;
    u_xlat24.x = u_xlat35 * u_xlat24.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat24.x = min(max(u_xlat24.x, 0.0), 1.0);
#else
    u_xlat24.x = clamp(u_xlat24.x, 0.0, 1.0);
#endif
    u_xlat35 = u_xlat24.x * -2.0 + 3.0;
    u_xlat24.x = u_xlat24.x * u_xlat24.x;
    u_xlat14 = u_xlat24.x * u_xlat35;
    u_xlat16_17.x = u_xlat16_37 * vs_COLOR0.x;
    u_xlat16_37 = (u_xlatb2.y) ? u_xlat16_17.x : u_xlat16_37;
#ifdef UNITY_ADRENO_ES3
    u_xlatb13 = !!(u_xlat16_37<0.0500000007);
#else
    u_xlatb13 = u_xlat16_37<0.0500000007;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb36 = !!(0.949999988<u_xlat16_37);
#else
    u_xlatb36 = 0.949999988<u_xlat16_37;
#endif
    u_xlat7.x = u_xlat16_37 + vs_TEXCOORD1.w;
    u_xlat7.x = u_xlat7.x * 0.5;
    u_xlat16_37 = (u_xlatb36) ? 1.0 : u_xlat7.x;
    u_xlat16_37 = (u_xlatb13) ? 0.0 : u_xlat16_37;
#ifdef UNITY_ADRENO_ES3
    u_xlatb13 = !!(u_xlat16_37<_LightArea);
#else
    u_xlatb13 = u_xlat16_37<_LightArea;
#endif
    if(u_xlatb13){
#ifdef UNITY_ADRENO_ES3
        u_xlatb13 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition));
#else
        u_xlatb13 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition);
#endif
#ifdef UNITY_ADRENO_ES3
        u_xlatb36 = !!(u_xlat33==1.0);
#else
        u_xlatb36 = u_xlat33==1.0;
#endif
        u_xlat16_8.x = (u_xlatb36) ? _ShadowTransitionRange : 0.0;
        u_xlat16_8.y = (u_xlatb36) ? _ShadowTransitionSoftness : 0.0;
        u_xlat16_17.xy = (u_xlatb5.x) ? vec2(_ShadowTransitionRange2, _ShadowTransitionSoftness2) : u_xlat16_8.xy;
        u_xlat16_17.xy = (u_xlatb5.y) ? vec2(_ShadowTransitionRange3, _ShadowTransitionSoftness3) : u_xlat16_17.xy;
        u_xlat16_17.xy = (u_xlatb5.z) ? vec2(_ShadowTransitionRange4, _ShadowTransitionSoftness4) : u_xlat16_17.xy;
        u_xlat16_17.xy = (u_xlatb5.w) ? vec2(_ShadowTransitionRange5, _ShadowTransitionSoftness5) : u_xlat16_17.xy;
        u_xlat16_37 = (-u_xlat16_37) + _LightArea;
        u_xlat16_37 = u_xlat16_37 / u_xlat16_17.x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb36 = !!(u_xlat16_37>=1.0);
#else
        u_xlatb36 = u_xlat16_37>=1.0;
#endif
        u_xlat16_7.x = u_xlat16_37 + 0.00999999978;
        u_xlat16_7.x = log2(u_xlat16_7.x);
        u_xlat16_7.x = u_xlat16_17.y * u_xlat16_7.x;
        u_xlat16_7.x = exp2(u_xlat16_7.x);
        u_xlat7.x = min(u_xlat16_7.x, 1.0);
        u_xlat36 = (u_xlatb36) ? 1.0 : u_xlat7.x;
        u_xlat13.x = (u_xlatb13) ? u_xlat36 : 1.0;
        u_xlat16_37 = 0.0;
    } else {
        u_xlat13.x = 0.0;
        u_xlat16_37 = 1.0;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb36 = !!(0.5<u_xlat10_3.x);
#else
    u_xlatb36 = 0.5<u_xlat10_3.x;
#endif
    u_xlat16_17.x = min(u_xlat14, u_xlat16_37);
    u_xlat16_37 = (u_xlatb36) ? u_xlat16_17.x : u_xlat16_37;
    u_xlat16_37 = (-u_xlat16_37) + 1.0;
#ifdef UNITY_ADRENO_ES3
    { bool cond = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(vs_TEXCOORD4); u_xlati14 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati14 = int((vec4(0.0, 0.0, 0.0, 0.0)!=vec4(vs_TEXCOORD4)) ? 0xFFFFFFFFu : uint(0u));
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(u_xlat33==1.0);
#else
    u_xlatb33 = u_xlat33==1.0;
#endif
    if(u_xlatb33){
#ifdef UNITY_ADRENO_ES3
        u_xlatb36 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex));
#else
        u_xlatb36 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex);
#endif
        u_xlat16_7.xyz = vec3(_FirstShadowMultColor.xxyz.y + (-_CoolShadowMultColor.x), _FirstShadowMultColor.xxyz.z + (-_CoolShadowMultColor.y), float(_FirstShadowMultColor.z) + (-_CoolShadowMultColor.z));
        u_xlat7.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_7.xyz + _CoolShadowMultColor.xyz;
        u_xlat16_17.xyz = (bool(u_xlatb36)) ? u_xlat7.xyz : vec3(_FirstShadowMultColor.x, _FirstShadowMultColor.y, _FirstShadowMultColor.z);
    } else {
        if(u_xlatb5.x){
#ifdef UNITY_ADRENO_ES3
            u_xlatb36 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex));
#else
            u_xlatb36 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex);
#endif
            u_xlat16_7.xyz = _FirstShadowMultColor2.xyz + (-_CoolShadowMultColor2.xyz);
            u_xlat7.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_7.xyz + _CoolShadowMultColor2.xyz;
            u_xlat16_17.xyz = (bool(u_xlatb36)) ? u_xlat7.xyz : _FirstShadowMultColor2.xyz;
        } else {
#ifdef UNITY_ADRENO_ES3
            u_xlatb36 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex));
#else
            u_xlatb36 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex);
#endif
            u_xlat16_7.xyz = _FirstShadowMultColor3.xyz + (-_CoolShadowMultColor3.xyz);
            u_xlat7.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_7.xyz + _CoolShadowMultColor3.xyz;
            u_xlat16_8.xyz = (bool(u_xlatb36)) ? u_xlat7.xyz : _FirstShadowMultColor3.xyz;
            u_xlat16_7.xyz = _FirstShadowMultColor4.xyz + (-_CoolShadowMultColor4.xyz);
            u_xlat7.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_7.xyz + _CoolShadowMultColor4.xyz;
            u_xlat16_9.xyz = (bool(u_xlatb36)) ? u_xlat7.xyz : _FirstShadowMultColor4.xyz;
            u_xlat16_7.xyz = _FirstShadowMultColor5.xyz + (-_CoolShadowMultColor5.xyz);
            u_xlat7.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_7.xyz + _CoolShadowMultColor5.xyz;
            u_xlat16_10.xyz = (bool(u_xlatb36)) ? u_xlat7.xyz : _FirstShadowMultColor5.xyz;
            u_xlat16_9.xyz = (u_xlatb5.z) ? u_xlat16_9.xyz : u_xlat16_10.xyz;
            u_xlat16_17.xyz = (u_xlatb5.y) ? u_xlat16_8.xyz : u_xlat16_9.xyz;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb36 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition));
#else
    u_xlatb36 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition);
#endif
    u_xlati7 = ~u_xlati14;
    u_xlati36 = u_xlatb36 ? u_xlati7 : int(0);
    u_xlat16_7.xyz = u_xlat16_17.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat7.xyz = u_xlat13.xxx * u_xlat16_7.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_17.xyz = (int(u_xlati36) != 0) ? u_xlat7.xyz : u_xlat16_17.xyz;
    u_xlat16_8.x = (-u_xlat35) * u_xlat24.x + 1.0;
    u_xlat16_19.xyz = u_xlat16_17.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat16_8.xyz = u_xlat16_8.xxx * u_xlat16_19.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_17.xyz = (int(u_xlati14) != 0) ? u_xlat16_17.xyz : u_xlat16_8.xyz;
    u_xlat16_8.x = (u_xlatb5.z) ? _Shininess4 : _Shininess5;
    u_xlat16_19.x = (u_xlatb5.z) ? _SpecMulti4 : _SpecMulti5;
    u_xlat16_8.x = (u_xlatb5.y) ? _Shininess3 : u_xlat16_8.x;
    u_xlat16_19.x = (u_xlatb5.y) ? _SpecMulti3 : u_xlat16_19.x;
    u_xlat16_8.x = (u_xlatb5.x) ? _Shininess2 : u_xlat16_8.x;
    u_xlat16_19.x = (u_xlatb5.x) ? _SpecMulti2 : u_xlat16_19.x;
    u_xlat16_8.x = (u_xlatb33) ? _Shininess : u_xlat16_8.x;
    u_xlat16_19.x = (u_xlatb33) ? _SpecMulti : u_xlat16_19.x;
    u_xlat16_30 = dot(vs_TEXCOORD1.xyz, u_xlat0.xyz);
    u_xlat16_30 = max(u_xlat16_30, 0.00100000005);
    u_xlat16_30 = log2(u_xlat16_30);
    u_xlat16_8.x = u_xlat16_30 * u_xlat16_8.x;
    u_xlat16_8.x = exp2(u_xlat16_8.x);
    u_xlat0.x = (-u_xlat10_3.z) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat0.x<u_xlat16_8.x);
#else
    u_xlatb0 = u_xlat0.x<u_xlat16_8.x;
#endif
    u_xlat16_8.xyz = u_xlat16_19.xxx * _SpecularColor.xyz;
    u_xlat16_8.xyz = u_xlat10_3.xxx * u_xlat16_8.xyz;
    u_xlat16_8.xyz = (bool(u_xlatb0)) ? u_xlat16_8.xyz : vec3(0.0, 0.0, 0.0);
    u_xlat16_4.xyz = vec3(u_xlat16_4.x * _EmissionColor_MHY.xxyz.y, u_xlat16_4.y * _EmissionColor_MHY.xxyz.z, u_xlat16_4.z * float(_EmissionColor_MHY.z));
    u_xlat0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(u_xlat16_37==1.0);
#else
    u_xlatb33 = u_xlat16_37==1.0;
#endif
    u_xlati33 = int(uint(u_xlatb33) * 0xffffffffu | uint(u_xlati14));
    u_xlat13.xyz = u_xlat0.xyz * u_xlat16_17.xyz;
    u_xlat0.xyz = (int(u_xlati33) != 0) ? u_xlat13.xyz : u_xlat0.xyz;
    u_xlat0.xyz = u_xlat16_8.xyz + u_xlat0.xyz;
    u_xlat13.xy = vs_TEXCOORD0.zw * _FlowMap01_ST.xy + _FlowMap01_ST.zw;
    u_xlat16_8.x = _Time.y * _FlowMap01_Uspeed + u_xlat13.x;
    u_xlat16_8.y = _Time.y * _FlowMap01_Vspeed + u_xlat13.y;
    u_xlat13.xy = vs_TEXCOORD0.zw * _Noise_ST.xy + _Noise_ST.zw;
    u_xlat16_9.x = _Time.y * _Noise_Uspeed + u_xlat13.x;
    u_xlat16_9.y = _Time.y * _Noise_Vspeed + u_xlat13.y;
    u_xlat10_33 = texture(_Noise, u_xlat16_9.xy).x;
    u_xlat16_37 = _MaskOffset01 * 1.39999998 + -0.699999988;
    u_xlat16_17.x = u_xlat10_33 * _NoiseIntensity;
    u_xlat13.xy = vs_TEXCOORD0.zw * _FlowMap02_ST.xy + _FlowMap02_ST.zw;
    u_xlat16_9.x = _Time.y * _FlowMap02_Uspeed + u_xlat13.x;
    u_xlat16_9.y = _Time.y * _FlowMap02_Vspeed + u_xlat13.y;
    u_xlat16_39 = _MaskOffset02 * 1.39999998 + -0.699999988;
    u_xlat16_10.xyz = _FlowMapColor01.xyz * vec3(_FlowScale01);
    u_xlat16_8.xy = vec2(u_xlat10_33) * vec2(vec2(_NoiseFlowIntensity, _NoiseFlowIntensity)) + u_xlat16_8.xy;
    u_xlat10_13 = texture(_FlowMap01, u_xlat16_8.xy).x;
    u_xlat16_13.xyz = vec3(u_xlat10_13) * u_xlat16_10.xyz;
    u_xlat16_8.x = (-vs_TEXCOORD0.z) + 1.0;
    u_xlat16_1.x = u_xlat16_37 + u_xlat16_8.x;
    u_xlat16_1.yw = vec2(u_xlat10_33) * vec2(vec2(_NoiseIntensity, _NoiseIntensity)) + (-vs_TEXCOORD0.ww);
    u_xlat16_17.y = 1.0;
    u_xlat16_19.xy = u_xlat16_1.xy + u_xlat16_17.xy;
    u_xlat10_3.x = texture(_Mask01, u_xlat16_19.xy).x;
    u_xlat16_3 = max(u_xlat10_3.x, 9.99999975e-05);
    u_xlat16_3 = log2(u_xlat16_3);
    u_xlat16_3 = u_xlat16_3 * _Mask01_Power;
    u_xlat16_3 = exp2(u_xlat16_3);
    u_xlat16_19.xyz = _FlowMapColor02.xyz * vec3(_FlowScale02);
    u_xlat16_9.xy = vec2(u_xlat10_33) * vec2(vec2(_NoiseFlowIntensity, _NoiseFlowIntensity)) + u_xlat16_9.xy;
    u_xlat10_33 = texture(_FlowMap02, u_xlat16_9.xy).x;
    u_xlat16_14.xyz = vec3(u_xlat10_33) * u_xlat16_19.xyz;
    u_xlat16_1.z = u_xlat16_39 + u_xlat16_8.x;
    u_xlat16_17.xy = vec2(u_xlat16_1.z + u_xlat16_17.x, u_xlat16_1.w + u_xlat16_17.y);
    u_xlat10_33 = texture(_Mask02, u_xlat16_17.xy).x;
    u_xlat16_33 = max(u_xlat10_33, 9.99999975e-05);
    u_xlat16_33 = log2(u_xlat16_33);
    u_xlat16_33 = u_xlat16_33 * _Mask02_Power;
    u_xlat16_33 = exp2(u_xlat16_33);
    u_xlat16_14.xyz = vec3(u_xlat16_33) * u_xlat16_14.xyz;
    u_xlat16_13.xyz = u_xlat16_13.xyz * vec3(u_xlat16_3) + u_xlat16_14.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(_EmissionScaler) + u_xlat16_13.xyz;
    u_xlat3.xyz = (-u_xlat0.xyz) + u_xlat16_4.xyz;
    u_xlat3.xyz = u_xlat16_6.xxx * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat7.xy = vs_TEXCOORD0.zw * _DissovleNoise_ST.xy + _DissovleNoise_ST.zw;
    u_xlat16_4.x = _Time.y * _DissolveNoise_Uspeed + u_xlat7.x;
    u_xlat16_4.y = _Time.y * _DissolveNoise_Vspeed + u_xlat7.y;
    u_xlat10_33 = texture(_DissovleNoise, u_xlat16_4.xy).x;
    u_xlat33 = u_xlat10_33 * _DissovleNoiseScale + vs_TEXCOORD0.z;
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(_Dissovle>=u_xlat33);
#else
    u_xlatb33 = _Dissovle>=u_xlat33;
#endif
    u_xlat0.xyz = (u_xlatb2.x) ? u_xlat3.xyz : u_xlat0.xyz;
    u_xlat0.xyz = u_xlat16_13.xyz + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(0.00999999978<u_xlat16_6.x);
#else
    u_xlatb2.x = 0.00999999978<u_xlat16_6.x;
#endif
    if((int(u_xlatb33) * int(0xffffffffu))==0){discard;}
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn));
#else
    u_xlatb33 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn);
#endif
    u_xlat13.xyz = u_xlat0.xyz * vec3(vec3(_ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness));
    u_xlat3.xyz = vec3(vec3(_ES_CharacterPointLightWholeIntensity, _ES_CharacterPointLightWholeIntensity, _ES_CharacterPointLightWholeIntensity)) * mhy_CharacterPointLightColor.xyz;
    u_xlat7.xyz = _ES_CharacterMainLightColor.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.xyz = min(max(u_xlat7.xyz, 0.0), 1.0);
#else
    u_xlat7.xyz = clamp(u_xlat7.xyz, 0.0, 1.0);
#endif
    u_xlat36 = (-mhy_CharacterPointLightColor.w) + 1.0;
    u_xlat3.xyz = u_xlat7.xyz * vec3(u_xlat36) + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat3.xyz = vec3(vec3(_ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio)) * u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat13.xyz = u_xlat13.xyz * u_xlat3.xyz;
    u_xlat3.xyz = _ES_CharacterAmbientLightColor.xyz * vec3(_ES_CharacterAmbientLightRatio);
    u_xlat16_4.xyz = u_xlat13.xyz * vec3(10.0, 10.0, 10.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.xyz = min(max(u_xlat16_4.xyz, 0.0), 1.0);
#else
    u_xlat16_4.xyz = clamp(u_xlat16_4.xyz, 0.0, 1.0);
#endif
    u_xlat13.xyz = u_xlat3.xyz * u_xlat16_4.xyz + u_xlat13.xyz;
    u_xlat16_4.xyz = (bool(u_xlatb33)) ? u_xlat13.xyz : u_xlat0.xyz;
    u_xlat16_17.xyz = u_xlat0.xyz + (-u_xlat16_4.xyz);
    u_xlat16_17.xyz = u_xlat16_6.xxx * u_xlat16_17.xyz + u_xlat16_4.xyz;
    u_xlat16_0.xyz = (u_xlatb2.x) ? u_xlat16_17.xyz : u_xlat16_4.xyz;
    u_xlat16_4.x = max(u_xlat16_0.z, u_xlat16_0.y);
    u_xlat16_1.w = max(u_xlat16_0.x, u_xlat16_4.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(1.0<u_xlat16_1.w);
#else
    u_xlatb2.x = 1.0<u_xlat16_1.w;
#endif
    u_xlat16_1.xyz = u_xlat16_0.xyz / u_xlat16_1.www;
    u_xlat16_0.w = 1.0;
    u_xlat16_0 = (u_xlatb2.x) ? u_xlat16_1 : u_xlat16_0;
    u_xlat16_4.x = min(u_xlat16_0.w, 1.10000002);
    u_xlat16_15 = u_xlat16_0.w + (-u_xlat16_4.x);
    u_xlat16_4.x = u_xlat16_6.x * u_xlat16_15 + u_xlat16_4.x;
    u_xlat16_2 = u_xlat16_4.x * 0.0500000007;
    SV_Target0.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb13 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb13 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_4.x = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb13) ? u_xlat16_4.x : 0.0;
    SV_Target0.w = 0.0156862754;
    SV_Target1.xyz = u_xlat16_0.xyz;
    SV_Target1.w = u_xlat16_2;
    SV_Target2.xy = vec2(0.0, 0.0);
    SV_Target2.w = vs_TEXCOORD4;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MAIN_TEX_COLORING_ON" "FACE_MAP_NEW_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _MainTex_ST;
uniform 	float _FaceMapRotateOffset;
uniform 	float _CharacterAmbientSensorShadowOn;
uniform 	vec4 _AmbientSensorUVs;
uniform 	float _UseClipPlane;
uniform 	float _ClipPlaneWorld;
uniform 	vec4 _ClipPlane;
uniform 	vec4 mhy_AvatarLightDir;
uniform 	vec4 mhy_CharacterOverrideLightDir;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
struct unity_Builtins1Array_Type {
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw1 {
	unity_Builtins1Array_Type unity_Builtins1Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform lowp sampler2D _CharacterAmbientSensorTex;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp float vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD6;
flat out highp uint vs_SV_InstanceID0;
float u_xlat0;
int u_xlati0;
vec3 u_xlat1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
vec4 u_xlat4;
mediump float u_xlat16_5;
vec3 u_xlat6;
bool u_xlatb6;
float u_xlat7;
mediump vec2 u_xlat16_11;
float u_xlat12;
bool u_xlatb12;
float u_xlat13;
bool u_xlatb13;
mediump float u_xlat16_17;
float u_xlat19;
bool u_xlatb19;
float u_xlat20;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.5<mhy_CharacterOverrideLightDir.w);
#else
    u_xlatb6 = 0.5<mhy_CharacterOverrideLightDir.w;
#endif
    u_xlat1.x = mhy_CharacterOverrideLightDir.x;
    u_xlat1.yz = (-mhy_CharacterOverrideLightDir.yz);
    u_xlat6.xyz = (bool(u_xlatb6)) ? u_xlat1.xyz : mhy_AvatarLightDir.xyz;
    u_xlati0 = u_xlati0 << 2;
    u_xlat1.x = dot(u_xlat6.xyz, unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz);
    u_xlat7 = dot(u_xlat6.xyz, unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb13 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseClipPlane));
#else
    u_xlatb13 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseClipPlane);
#endif
    if(u_xlatb13){
#ifdef UNITY_ADRENO_ES3
        u_xlatb13 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ClipPlaneWorld));
#else
        u_xlatb13 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ClipPlaneWorld);
#endif
        if(u_xlatb13){
#ifdef UNITY_ADRENO_ES3
            u_xlatb13 = !!(abs(_ClipPlane.w)<0.00100000005);
#else
            u_xlatb13 = abs(_ClipPlane.w)<0.00100000005;
#endif
            u_xlat2.xyz = _ClipPlane.www * _ClipPlane.xyz;
            u_xlat2.xyz = (bool(u_xlatb13)) ? vec3(0.0, 0.0, 0.0) : u_xlat2.xyz;
            u_xlat3 = u_xlat2.yyyy * unity_Builtins1Array[u_xlati0 / 4].hlslcc_mtx4x4unity_WorldToObjectArray[1];
            u_xlat3 = unity_Builtins1Array[u_xlati0 / 4].hlslcc_mtx4x4unity_WorldToObjectArray[0] * u_xlat2.xxxx + u_xlat3;
            u_xlat2 = unity_Builtins1Array[u_xlati0 / 4].hlslcc_mtx4x4unity_WorldToObjectArray[2] * u_xlat2.zzzz + u_xlat3;
            u_xlat2 = u_xlat2 + unity_Builtins1Array[u_xlati0 / 4].hlslcc_mtx4x4unity_WorldToObjectArray[3];
            u_xlat2.xyz = u_xlat2.xyz / u_xlat2.www;
            u_xlat3.xyz = _ClipPlane.yyy * unity_Builtins1Array[u_xlati0 / 4].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz;
            u_xlat3.xyz = unity_Builtins1Array[u_xlati0 / 4].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz * _ClipPlane.xxx + u_xlat3.xyz;
            u_xlat3.xyz = unity_Builtins1Array[u_xlati0 / 4].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz * _ClipPlane.zzz + u_xlat3.xyz;
            u_xlat13 = dot(u_xlat2.xyz, u_xlat3.xyz);
            u_xlat19 = dot(in_POSITION0.xyz, u_xlat3.xyz);
#ifdef UNITY_ADRENO_ES3
            u_xlatb2 = !!(u_xlat19<u_xlat13);
#else
            u_xlatb2 = u_xlat19<u_xlat13;
#endif
            u_xlat13 = (-u_xlat13) + u_xlat19;
            u_xlat3.xyz = (-vec3(u_xlat13)) * u_xlat3.xyz + in_POSITION0.xyz;
            u_xlat3.w = 0.0;
            u_xlat4.xyz = in_POSITION0.xyz;
            u_xlat4.w = in_COLOR0.w;
            u_xlat2 = (bool(u_xlatb2)) ? u_xlat3 : u_xlat4;
            u_xlat16_5 = u_xlat2.w;
        } else {
            u_xlat13 = dot(in_POSITION0.xyz, _ClipPlane.xyz);
            u_xlat19 = _ClipPlane.w + -0.00999999978;
#ifdef UNITY_ADRENO_ES3
            u_xlatb19 = !!(u_xlat13<u_xlat19);
#else
            u_xlatb19 = u_xlat13<u_xlat19;
#endif
            u_xlat13 = u_xlat13 + (-_ClipPlane.w);
            u_xlat3.xyz = (-vec3(u_xlat13)) * _ClipPlane.xyz + in_POSITION0.xyz;
            u_xlat3.w = 0.0;
            u_xlat4.xyz = in_POSITION0.xyz;
            u_xlat4.w = in_COLOR0.w;
            u_xlat2 = (bool(u_xlatb19)) ? u_xlat3 : u_xlat4;
            u_xlat16_5 = u_xlat2.w;
        //ENDIF
        }
    } else {
        u_xlat2.xyz = in_POSITION0.xyz;
        u_xlat16_5 = in_COLOR0.w;
    //ENDIF
    }
    u_xlat3.xyw = (-_WorldSpaceCameraPos.xyz) + unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat4.x = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].x;
    u_xlat4.y = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].x;
    u_xlat4.z = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].x;
    u_xlat4.w = u_xlat3.x;
    u_xlat2.w = 1.0;
    u_xlat13 = dot(u_xlat4, u_xlat2);
    u_xlat4.x = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].y;
    u_xlat4.y = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].y;
    u_xlat4.z = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].y;
    u_xlat4.w = u_xlat3.y;
    u_xlat19 = dot(u_xlat4, u_xlat2);
    u_xlat3.x = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].z;
    u_xlat3.y = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].z;
    u_xlat3.z = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].z;
    u_xlat3.x = dot(u_xlat3, u_xlat2);
    u_xlat4.x = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].w;
    u_xlat4.y = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].w;
    u_xlat4.z = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].w;
    u_xlat4.w = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3].w;
    u_xlat20 = dot(u_xlat4, u_xlat2);
    u_xlat4 = vec4(u_xlat19) * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat4 = hlslcc_mtx4x4unity_MatrixVPZero[0] * vec4(u_xlat13) + u_xlat4;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat3.xxxx + u_xlat4;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVPZero[3] * vec4(u_xlat20) + u_xlat3;
    u_xlat4 = u_xlat2.yyyy * unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat4 = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * u_xlat2.xxxx + u_xlat4;
    u_xlat2 = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * u_xlat2.zzzz + u_xlat4;
    u_xlat2 = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3] * in_POSITION0.wwww + u_xlat2;
    vs_TEXCOORD3.xyz = u_xlat2.xyz / u_xlat2.www;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat2.xz = u_xlat3.xw * vec2(0.5, 0.5);
    u_xlat13 = u_xlat3.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat13 * 0.5;
    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat2.xyz = in_NORMAL0.yyy * unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat2.xyz = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_NORMAL0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_NORMAL0.zzz + u_xlat2.xyz;
    u_xlat0 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0 = inversesqrt(u_xlat0);
    u_xlat2.xyz = vec3(u_xlat0) * u_xlat2.xyz;
    u_xlat16_11.x = dot(u_xlat2.xyz, u_xlat6.xyz);
    vs_TEXCOORD1.w = u_xlat16_11.x * 0.497500002 + 0.5;
    u_xlat16_11.x = min(abs(u_xlat1.x), abs(u_xlat7));
    u_xlat16_17 = max(abs(u_xlat1.x), abs(u_xlat7));
    u_xlat16_17 = float(1.0) / u_xlat16_17;
    u_xlat16_11.x = u_xlat16_17 * u_xlat16_11.x;
    u_xlat16_17 = u_xlat16_11.x * u_xlat16_11.x;
    u_xlat0 = u_xlat16_17 * 0.0208350997 + -0.0851330012;
    u_xlat0 = u_xlat16_17 * u_xlat0 + 0.180141002;
    u_xlat0 = u_xlat16_17 * u_xlat0 + -0.330299497;
    u_xlat0 = u_xlat16_17 * u_xlat0 + 0.999866009;
    u_xlat6.x = u_xlat0 * u_xlat16_11.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(abs(u_xlat1.x)<abs(u_xlat7));
#else
    u_xlatb12 = abs(u_xlat1.x)<abs(u_xlat7);
#endif
    u_xlat6.x = u_xlat6.x * -2.0 + 1.57079637;
    u_xlat6.x = u_xlatb12 ? u_xlat6.x : float(0.0);
    u_xlat0 = u_xlat16_11.x * u_xlat0 + u_xlat6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(u_xlat1.x<(-u_xlat1.x));
#else
    u_xlatb6 = u_xlat1.x<(-u_xlat1.x);
#endif
    u_xlat6.x = u_xlatb6 ? -3.14159274 : float(0.0);
    u_xlat0 = u_xlat6.x + u_xlat0;
    u_xlat16_11.x = min(u_xlat1.x, u_xlat7);
    u_xlat16_17 = max(u_xlat1.x, u_xlat7);
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(u_xlat16_11.x<(-u_xlat16_11.x));
#else
    u_xlatb6 = u_xlat16_11.x<(-u_xlat16_11.x);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat16_17>=(-u_xlat16_17));
#else
    u_xlatb12 = u_xlat16_17>=(-u_xlat16_17);
#endif
    u_xlatb6 = u_xlatb12 && u_xlatb6;
    u_xlat0 = (u_xlatb6) ? (-u_xlat0) : u_xlat0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.0<(-u_xlat0));
#else
    u_xlatb6 = 0.0<(-u_xlat0);
#endif
    u_xlat16_11.x = u_xlat0 * -0.318309903;
    u_xlat0 = max(_FaceMapRotateOffset, 0.0);
    u_xlat12 = _FaceMapRotateOffset + 1.0;
    u_xlat12 = min(u_xlat12, 1.0);
    u_xlat12 = (-u_xlat0) + u_xlat12;
    u_xlat0 = (-u_xlat0) + abs(u_xlat16_11.x);
    u_xlat12 = float(1.0) / u_xlat12;
    u_xlat0 = u_xlat12 * u_xlat0;
#ifdef UNITY_ADRENO_ES3
    u_xlat0 = min(max(u_xlat0, 0.0), 1.0);
#else
    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
#endif
    u_xlat12 = u_xlat0 * -2.0 + 3.0;
    u_xlat0 = u_xlat0 * u_xlat0;
    u_xlat0 = u_xlat0 * u_xlat12;
    u_xlat0 = max(u_xlat0, 9.99999975e-05);
    u_xlat0 = min(u_xlat0, 0.999899983);
    u_xlat16_11.xy = in_TEXCOORD0.xy * vec2(-1.0, 1.0) + vec2(1.0, 0.0);
    vs_TEXCOORD6.xy = (bool(u_xlatb6)) ? u_xlat16_11.xy : in_TEXCOORD0.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_CharacterAmbientSensorShadowOn));
#else
    u_xlatb6 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_CharacterAmbientSensorShadowOn);
#endif
    if(u_xlatb6){
        u_xlat6.x = textureLod(_CharacterAmbientSensorTex, _AmbientSensorUVs.xy, 0.0).x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb6 = !!(0.5<u_xlat6.x);
#else
        u_xlatb6 = 0.5<u_xlat6.x;
#endif
        vs_TEXCOORD4 = u_xlatb6 ? 1.0 : float(0.0);
    } else {
        vs_TEXCOORD4 = 0.0;
    //ENDIF
    }
    gl_Position = u_xlat3;
    vs_COLOR0.xyz = in_COLOR0.xyz;
    vs_COLOR0.w = u_xlat16_5;
    vs_TEXCOORD1.xyz = u_xlat2.xyz;
    vs_TEXCOORD2.zw = u_xlat3.zw;
    vs_TEXCOORD6.z = u_xlat0;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	mediump vec4 _Color;
uniform 	float _MainTexAlphaUse;
uniform 	mediump float _MainTexAlphaCutoff;
uniform 	mediump vec4 _MainTexTintColor;
uniform 	float _UseVertexColorAO;
uniform 	mediump float _LightArea;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	float _UseCoolShadowColorOrTex;
uniform 	mediump vec3 _CoolShadowMultColor;
uniform 	float _UseShadowTransition;
uniform 	float _ShadowTransitionRange;
uniform 	float _ShadowTransitionSoftness;
uniform 	mediump vec3 _SpecularColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	float _FaceBlushStrength;
uniform 	mediump vec3 _FaceBlushColor;
uniform 	mediump float _EmissionScaler;
uniform 	mediump vec3 _EmissionColor_MHY;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _TextureBiasWhenDithering;
uniform 	float _UseClipPlane;
uniform 	float _ES_CharacterAmbientLightOn;
uniform 	float _ES_CharacterAmbientBrightness;
uniform 	vec3 _ES_CharacterMainLightColor;
uniform 	vec3 _ES_CharacterAmbientLightColor;
uniform 	float _ES_CharacterMainLightRatio;
uniform 	float _ES_CharacterAmbientLightRatio;
uniform 	float _ES_CharacterColorTone;
uniform 	float _ES_CharacterPointLightWholeIntensity;
uniform 	vec4 mhy_AvatarLightDir;
uniform 	vec4 mhy_CharacterPointLightColor;
uniform 	vec4 mhy_CharacterOverrideLightDir;
uniform 	mediump vec4 _FlowMapColor01;
uniform 	mediump float _FlowScale01;
uniform 	mediump float _FlowMap01_Uspeed;
uniform 	vec4 _FlowMap01_ST;
uniform 	mediump float _FlowMap01_Vspeed;
uniform 	mediump float _Noise_Uspeed;
uniform 	vec4 _Noise_ST;
uniform 	mediump float _Noise_Vspeed;
uniform 	mediump float _NoiseFlowIntensity;
uniform 	mediump float _MaskOffset01;
uniform 	mediump float _NoiseIntensity;
uniform 	mediump float _Mask01_Power;
uniform 	mediump vec4 _FlowMapColor02;
uniform 	mediump float _FlowScale02;
uniform 	mediump float _FlowMap02_Uspeed;
uniform 	vec4 _FlowMap02_ST;
uniform 	mediump float _FlowMap02_Vspeed;
uniform 	mediump float _MaskOffset02;
uniform 	mediump float _Mask02_Power;
uniform 	mediump float _DissolveNoise_Uspeed;
uniform 	vec4 _DissovleNoise_ST;
uniform 	mediump float _DissolveNoise_Vspeed;
uniform 	mediump float _DissovleNoiseScale;
uniform 	mediump float _Dissovle;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _Noise;
uniform lowp sampler2D _FlowMap01;
uniform lowp sampler2D _Mask01;
uniform lowp sampler2D _FlowMap02;
uniform lowp sampler2D _Mask02;
uniform lowp sampler2D _DissovleNoise;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp float vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
lowp float u_xlat10_2;
int u_xlati2;
bvec4 u_xlatb2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
lowp float u_xlat10_3;
int u_xlati3;
bool u_xlatb3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec2 u_xlat16_7;
mediump vec3 u_xlat16_8;
vec3 u_xlat9;
bool u_xlatb10;
vec3 u_xlat12;
mediump vec3 u_xlat16_12;
lowp float u_xlat10_12;
int u_xlati12;
bool u_xlatb12;
vec3 u_xlat13;
mediump vec3 u_xlat16_13;
mediump float u_xlat16_14;
mediump vec2 u_xlat16_15;
mediump vec2 u_xlat16_16;
bvec2 u_xlatb20;
float u_xlat22;
bool u_xlatb22;
mediump vec2 u_xlat16_25;
float u_xlat30;
bool u_xlatb30;
float u_xlat32;
mediump float u_xlat16_32;
lowp float u_xlat10_32;
int u_xlati32;
bool u_xlatb32;
float u_xlat33;
mediump float u_xlat16_34;
mediump float u_xlat16_35;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseClipPlane));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseClipPlane);
#endif
    u_xlat16_1.x = vs_COLOR0.w + -0.00999999978;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(u_xlat16_1.x<0.0);
#else
    u_xlatb10 = u_xlat16_1.x<0.0;
#endif
    u_xlatb0 = u_xlatb0 && u_xlatb10;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(_DitherAlpha<0.949999988);
#else
        u_xlatb0 = _DitherAlpha<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb20.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb20.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb20.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = _DitherAlpha * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + -0.00999999978;
#ifdef UNITY_ADRENO_ES3
            u_xlatb0 = !!(u_xlat0.x<0.0);
#else
            u_xlatb0 = u_xlat0.x<0.0;
#endif
            if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(0.5<mhy_CharacterOverrideLightDir.w);
#else
    u_xlatb2.x = 0.5<mhy_CharacterOverrideLightDir.w;
#endif
    u_xlat3.x = mhy_CharacterOverrideLightDir.x;
    u_xlat3.yz = (-mhy_CharacterOverrideLightDir.yz);
    u_xlat2.xyz = (u_xlatb2.x) ? u_xlat3.xyz : mhy_AvatarLightDir.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat30) + u_xlat2.xyz;
    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
    u_xlat30 = _TextureBiasWhenDithering + -1.0;
    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy, u_xlat30);
    u_xlat16_4.xyz = u_xlat1.xyz * _MainTexTintColor.xyz;
    u_xlat16_5.xyz = u_xlat16_4.xyz + u_xlat16_4.xyz;
    u_xlat16_6.xyz = u_xlat1.xyz + _MainTexTintColor.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_6.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(-4.0, -4.0, -4.0) + u_xlat16_6.xyz;
    u_xlatb2 = lessThan(vec4(0.5, 0.5, 0.5, 0.00999999978), u_xlat1);
    u_xlat16_6.x = (u_xlatb2.x) ? float(1.0) : float(0.0);
    u_xlat16_6.y = (u_xlatb2.y) ? float(1.0) : float(0.0);
    u_xlat16_6.z = (u_xlatb2.z) ? float(1.0) : float(0.0);
    u_xlat16_4.xyz = u_xlat16_4.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat16_4.xyz = u_xlat16_6.xyz * u_xlat16_4.xyz + u_xlat16_5.xyz;
    u_xlatb2.xyz = equal(vec4(_MainTexAlphaUse), vec4(3.0, 1.0, 2.0, 0.0)).xyz;
    u_xlat30 = u_xlat1.w * _FaceBlushStrength;
    u_xlat16_3.xyz = (-u_xlat16_4.xyz) + _FaceBlushColor.xyz;
    u_xlat3.xyz = vec3(u_xlat30) * u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat16_4.xyz = (u_xlatb2.x) ? u_xlat3.xyz : u_xlat16_4.xyz;
    u_xlat16_34 = u_xlat1.w + (-_MainTexAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(u_xlat16_34<0.0);
#else
    u_xlatb30 = u_xlat16_34<0.0;
#endif
    u_xlatb30 = u_xlatb2.y && u_xlatb30;
    if((int(u_xlatb30) * int(0xffffffffu))!=0){discard;}
    u_xlat16_4.xyz = u_xlat16_4.xyz * _Color.xyz;
    u_xlatb30 = u_xlatb2.w && u_xlatb2.z;
    u_xlat16_34 = (u_xlatb30) ? u_xlat1.w : 0.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorAO));
#else
    u_xlatb2.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorAO);
#endif
    u_xlat16_5.x = vs_COLOR0.x * 0.5;
    u_xlat16_5.x = (u_xlatb2.x) ? u_xlat16_5.x : 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat16_5.x<0.0500000007);
#else
    u_xlatb12 = u_xlat16_5.x<0.0500000007;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(0.949999988<u_xlat16_5.x);
#else
    u_xlatb22 = 0.949999988<u_xlat16_5.x;
#endif
    u_xlat32 = u_xlat16_5.x + vs_TEXCOORD1.w;
    u_xlat32 = u_xlat32 * 0.5;
    u_xlat16_5.x = (u_xlatb22) ? 1.0 : u_xlat32;
    u_xlat16_5.x = (u_xlatb12) ? 0.0 : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb2.x) ? u_xlat16_5.x : vs_TEXCOORD1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(u_xlat16_5.x<_LightArea);
#else
    u_xlatb2.x = u_xlat16_5.x<_LightArea;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition));
#else
    u_xlatb12 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition);
#endif
    u_xlat16_5.x = (-u_xlat16_5.x) + _LightArea;
    u_xlat16_5.x = u_xlat16_5.x / _ShadowTransitionRange;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(u_xlat16_5.x>=1.0);
#else
    u_xlatb22 = u_xlat16_5.x>=1.0;
#endif
    u_xlat16_32 = u_xlat16_5.x + 0.00999999978;
    u_xlat16_32 = log2(u_xlat16_32);
    u_xlat32 = u_xlat16_32 * _ShadowTransitionSoftness;
    u_xlat32 = exp2(u_xlat32);
    u_xlat32 = min(u_xlat32, 1.0);
    u_xlat22 = (u_xlatb22) ? 1.0 : u_xlat32;
    u_xlat22 = (u_xlatb12) ? u_xlat22 : 1.0;
    u_xlat22 = u_xlatb2.x ? u_xlat22 : float(0.0);
#ifdef UNITY_ADRENO_ES3
    { bool cond = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(vs_TEXCOORD4); u_xlati32 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati32 = int((vec4(0.0, 0.0, 0.0, 0.0)!=vec4(vs_TEXCOORD4)) ? 0xFFFFFFFFu : uint(0u));
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex));
#else
    u_xlatb3 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex);
#endif
    u_xlat16_13.xyz = vec3(_FirstShadowMultColor.xxyz.y + (-_CoolShadowMultColor.x), _FirstShadowMultColor.xxyz.z + (-_CoolShadowMultColor.y), float(_FirstShadowMultColor.z) + (-_CoolShadowMultColor.z));
    u_xlat13.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_13.xyz + _CoolShadowMultColor.xyz;
    u_xlat16_5.xyz = (bool(u_xlatb3)) ? u_xlat13.xyz : vec3(_FirstShadowMultColor.x, _FirstShadowMultColor.y, _FirstShadowMultColor.z);
    u_xlati3 = ~u_xlati32;
    u_xlati12 = u_xlatb12 ? u_xlati3 : int(0);
    u_xlat16_3.xyz = u_xlat16_5.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat3.xyz = vec3(u_xlat22) * u_xlat16_3.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_5.xyz = (int(u_xlati12) != 0) ? u_xlat3.xyz : u_xlat16_5.xyz;
    u_xlat16_5.xyz = (int(u_xlati32) != 0) ? u_xlat16_5.xyz : vec3(1.0, 1.0, 1.0);
    u_xlat16_35 = dot(vs_TEXCOORD1.xyz, u_xlat0.xyz);
    u_xlat16_35 = max(u_xlat16_35, 0.00100000005);
    u_xlat16_35 = log2(u_xlat16_35);
    u_xlat16_35 = u_xlat16_35 * _Shininess;
    u_xlat16_35 = exp2(u_xlat16_35);
    u_xlat16_6.xyz = vec3(u_xlat16_35) * _SpecularColor.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(_SpecMulti);
    u_xlat16_4.xyz = vec3(u_xlat16_4.x * _EmissionColor_MHY.xxyz.y, u_xlat16_4.y * _EmissionColor_MHY.xxyz.z, u_xlat16_4.z * float(_EmissionColor_MHY.z));
    u_xlat0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlati2 = int(uint(u_xlatb2.x) * 0xffffffffu | uint(u_xlati32));
    u_xlat12.xyz = u_xlat0.xyz * u_xlat16_5.xyz;
    u_xlat0.xyz = (int(u_xlati2) != 0) ? u_xlat12.xyz : u_xlat0.xyz;
    u_xlat0.xyz = u_xlat16_6.xyz * vec3(0.5, 0.5, 0.5) + u_xlat0.xyz;
    u_xlat2.xy = vs_TEXCOORD0.zw * _FlowMap01_ST.xy + _FlowMap01_ST.zw;
    u_xlat16_5.x = _Time.y * _FlowMap01_Uspeed + u_xlat2.x;
    u_xlat16_5.y = _Time.y * _FlowMap01_Vspeed + u_xlat2.y;
    u_xlat2.xy = vs_TEXCOORD0.zw * _Noise_ST.xy + _Noise_ST.zw;
    u_xlat16_6.x = _Time.y * _Noise_Uspeed + u_xlat2.x;
    u_xlat16_6.y = _Time.y * _Noise_Vspeed + u_xlat2.y;
    u_xlat10_2 = texture(_Noise, u_xlat16_6.xy).x;
    u_xlat16_25.x = _MaskOffset01 * 1.39999998 + -0.699999988;
    u_xlat16_16.x = u_xlat10_2 * _NoiseIntensity;
    u_xlat12.xy = vs_TEXCOORD0.zw * _FlowMap02_ST.xy + _FlowMap02_ST.zw;
    u_xlat16_7.x = _Time.y * _FlowMap02_Uspeed + u_xlat12.x;
    u_xlat16_7.y = _Time.y * _FlowMap02_Vspeed + u_xlat12.y;
    u_xlat16_25.y = _MaskOffset02 * 1.39999998 + -0.699999988;
    u_xlat16_8.xyz = _FlowMapColor01.xyz * vec3(_FlowScale01);
    u_xlat16_5.xy = vec2(u_xlat10_2) * vec2(vec2(_NoiseFlowIntensity, _NoiseFlowIntensity)) + u_xlat16_5.xy;
    u_xlat10_12 = texture(_FlowMap01, u_xlat16_5.xy).x;
    u_xlat16_12.xyz = vec3(u_xlat10_12) * u_xlat16_8.xyz;
    u_xlat16_5.x = (-vs_TEXCOORD0.z) + 1.0;
    u_xlat16_1.xz = u_xlat16_25.xy + u_xlat16_5.xx;
    u_xlat16_1.yw = vec2(u_xlat10_2) * vec2(vec2(_NoiseIntensity, _NoiseIntensity)) + (-vs_TEXCOORD0.ww);
    u_xlat16_16.y = 1.0;
    u_xlat16_15.xy = u_xlat16_1.xy + u_xlat16_16.xy;
    u_xlat10_3 = texture(_Mask01, u_xlat16_15.xy).x;
    u_xlat16_3.x = max(u_xlat10_3, 9.99999975e-05);
    u_xlat16_3.x = log2(u_xlat16_3.x);
    u_xlat16_3.x = u_xlat16_3.x * _Mask01_Power;
    u_xlat16_3.x = exp2(u_xlat16_3.x);
    u_xlat16_8.xyz = _FlowMapColor02.xyz * vec3(_FlowScale02);
    u_xlat16_15.xy = vec2(u_xlat10_2) * vec2(vec2(_NoiseFlowIntensity, _NoiseFlowIntensity)) + u_xlat16_7.xy;
    u_xlat10_2 = texture(_FlowMap02, u_xlat16_15.xy).x;
    u_xlat16_13.xyz = vec3(u_xlat10_2) * u_xlat16_8.xyz;
    u_xlat16_5.xy = vec2(u_xlat16_1.z + u_xlat16_16.x, u_xlat16_1.w + u_xlat16_16.y);
    u_xlat10_2 = texture(_Mask02, u_xlat16_5.xy).x;
    u_xlat16_2.x = max(u_xlat10_2, 9.99999975e-05);
    u_xlat16_2.x = log2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * _Mask02_Power;
    u_xlat16_2.x = exp2(u_xlat16_2.x);
    u_xlat16_13.xyz = u_xlat16_2.xxx * u_xlat16_13.xyz;
    u_xlat16_2.xyz = u_xlat16_12.xyz * u_xlat16_3.xxx + u_xlat16_13.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(_EmissionScaler) + u_xlat16_2.xyz;
    u_xlat3.xyz = (-u_xlat0.xyz) + u_xlat16_4.xyz;
    u_xlat3.xyz = vec3(u_xlat16_34) * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat9.xy = vs_TEXCOORD0.zw * _DissovleNoise_ST.xy + _DissovleNoise_ST.zw;
    u_xlat16_4.x = _Time.y * _DissolveNoise_Uspeed + u_xlat9.x;
    u_xlat16_4.y = _Time.y * _DissolveNoise_Vspeed + u_xlat9.y;
    u_xlat10_32 = texture(_DissovleNoise, u_xlat16_4.xy).x;
    u_xlat32 = u_xlat10_32 * _DissovleNoiseScale + vs_TEXCOORD0.z;
#ifdef UNITY_ADRENO_ES3
    u_xlatb32 = !!(_Dissovle>=u_xlat32);
#else
    u_xlatb32 = _Dissovle>=u_xlat32;
#endif
    u_xlat0.xyz = (bool(u_xlatb30)) ? u_xlat3.xyz : u_xlat0.xyz;
    u_xlat0.xyz = u_xlat16_2.xyz + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(0.00999999978<u_xlat16_34);
#else
    u_xlatb30 = 0.00999999978<u_xlat16_34;
#endif
    if((int(u_xlatb32) * int(0xffffffffu))==0){discard;}
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn));
#else
    u_xlatb2.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn);
#endif
    u_xlat12.xyz = u_xlat0.xyz * vec3(vec3(_ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness));
    u_xlat3.xyz = vec3(vec3(_ES_CharacterPointLightWholeIntensity, _ES_CharacterPointLightWholeIntensity, _ES_CharacterPointLightWholeIntensity)) * mhy_CharacterPointLightColor.xyz;
    u_xlat9.xyz = _ES_CharacterMainLightColor.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat9.xyz = min(max(u_xlat9.xyz, 0.0), 1.0);
#else
    u_xlat9.xyz = clamp(u_xlat9.xyz, 0.0, 1.0);
#endif
    u_xlat33 = (-mhy_CharacterPointLightColor.w) + 1.0;
    u_xlat3.xyz = u_xlat9.xyz * vec3(u_xlat33) + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat3.xyz = vec3(vec3(_ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio)) * u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat12.xyz = u_xlat12.xyz * u_xlat3.xyz;
    u_xlat3.xyz = _ES_CharacterAmbientLightColor.xyz * vec3(_ES_CharacterAmbientLightRatio);
    u_xlat16_4.xyz = u_xlat12.xyz * vec3(10.0, 10.0, 10.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.xyz = min(max(u_xlat16_4.xyz, 0.0), 1.0);
#else
    u_xlat16_4.xyz = clamp(u_xlat16_4.xyz, 0.0, 1.0);
#endif
    u_xlat12.xyz = u_xlat3.xyz * u_xlat16_4.xyz + u_xlat12.xyz;
    u_xlat16_4.xyz = (u_xlatb2.x) ? u_xlat12.xyz : u_xlat0.xyz;
    u_xlat16_5.xyz = u_xlat0.xyz + (-u_xlat16_4.xyz);
    u_xlat16_5.xyz = vec3(u_xlat16_34) * u_xlat16_5.xyz + u_xlat16_4.xyz;
    u_xlat16_0.xyz = (bool(u_xlatb30)) ? u_xlat16_5.xyz : u_xlat16_4.xyz;
    u_xlat16_4.x = max(u_xlat16_0.z, u_xlat16_0.y);
    u_xlat16_1.w = max(u_xlat16_0.x, u_xlat16_4.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(1.0<u_xlat16_1.w);
#else
    u_xlatb2.x = 1.0<u_xlat16_1.w;
#endif
    u_xlat16_1.xyz = u_xlat16_0.xyz / u_xlat16_1.www;
    u_xlat16_0.w = 1.0;
    u_xlat16_0 = (u_xlatb2.x) ? u_xlat16_1 : u_xlat16_0;
    u_xlat16_4.x = min(u_xlat16_0.w, 1.10000002);
    u_xlat16_14 = u_xlat16_0.w + (-u_xlat16_4.x);
    u_xlat16_4.x = u_xlat16_34 * u_xlat16_14 + u_xlat16_4.x;
    u_xlat16_2.x = u_xlat16_4.x * 0.0500000007;
    SV_Target0.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb12 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_4.x = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb12) ? u_xlat16_4.x : 0.0;
    SV_Target0.w = 0.0156862754;
    SV_Target1.xyz = u_xlat16_0.xyz;
    SV_Target1.w = u_xlat16_2.x;
    SV_Target2.xy = vec2(0.0, 0.0);
    SV_Target2.w = vs_TEXCOORD4;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "TOON_SPECULAR_ON" "TOON_LIGHTMAP_ON" "MAIN_TEX_COLORING_ON" "FACE_MAP_NEW_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _MainTex_ST;
uniform 	float _FaceMapRotateOffset;
uniform 	float _CharacterAmbientSensorShadowOn;
uniform 	vec4 _AmbientSensorUVs;
uniform 	float _UseClipPlane;
uniform 	float _ClipPlaneWorld;
uniform 	vec4 _ClipPlane;
uniform 	vec4 mhy_AvatarLightDir;
uniform 	vec4 mhy_CharacterOverrideLightDir;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
struct unity_Builtins1Array_Type {
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw1 {
	unity_Builtins1Array_Type unity_Builtins1Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform lowp sampler2D _CharacterAmbientSensorTex;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp float vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD6;
flat out highp uint vs_SV_InstanceID0;
float u_xlat0;
int u_xlati0;
vec3 u_xlat1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
vec4 u_xlat4;
mediump float u_xlat16_5;
vec3 u_xlat6;
bool u_xlatb6;
float u_xlat7;
mediump vec2 u_xlat16_11;
float u_xlat12;
bool u_xlatb12;
float u_xlat13;
bool u_xlatb13;
mediump float u_xlat16_17;
float u_xlat19;
bool u_xlatb19;
float u_xlat20;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.5<mhy_CharacterOverrideLightDir.w);
#else
    u_xlatb6 = 0.5<mhy_CharacterOverrideLightDir.w;
#endif
    u_xlat1.x = mhy_CharacterOverrideLightDir.x;
    u_xlat1.yz = (-mhy_CharacterOverrideLightDir.yz);
    u_xlat6.xyz = (bool(u_xlatb6)) ? u_xlat1.xyz : mhy_AvatarLightDir.xyz;
    u_xlati0 = u_xlati0 << 2;
    u_xlat1.x = dot(u_xlat6.xyz, unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz);
    u_xlat7 = dot(u_xlat6.xyz, unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb13 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseClipPlane));
#else
    u_xlatb13 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseClipPlane);
#endif
    if(u_xlatb13){
#ifdef UNITY_ADRENO_ES3
        u_xlatb13 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ClipPlaneWorld));
#else
        u_xlatb13 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ClipPlaneWorld);
#endif
        if(u_xlatb13){
#ifdef UNITY_ADRENO_ES3
            u_xlatb13 = !!(abs(_ClipPlane.w)<0.00100000005);
#else
            u_xlatb13 = abs(_ClipPlane.w)<0.00100000005;
#endif
            u_xlat2.xyz = _ClipPlane.www * _ClipPlane.xyz;
            u_xlat2.xyz = (bool(u_xlatb13)) ? vec3(0.0, 0.0, 0.0) : u_xlat2.xyz;
            u_xlat3 = u_xlat2.yyyy * unity_Builtins1Array[u_xlati0 / 4].hlslcc_mtx4x4unity_WorldToObjectArray[1];
            u_xlat3 = unity_Builtins1Array[u_xlati0 / 4].hlslcc_mtx4x4unity_WorldToObjectArray[0] * u_xlat2.xxxx + u_xlat3;
            u_xlat2 = unity_Builtins1Array[u_xlati0 / 4].hlslcc_mtx4x4unity_WorldToObjectArray[2] * u_xlat2.zzzz + u_xlat3;
            u_xlat2 = u_xlat2 + unity_Builtins1Array[u_xlati0 / 4].hlslcc_mtx4x4unity_WorldToObjectArray[3];
            u_xlat2.xyz = u_xlat2.xyz / u_xlat2.www;
            u_xlat3.xyz = _ClipPlane.yyy * unity_Builtins1Array[u_xlati0 / 4].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz;
            u_xlat3.xyz = unity_Builtins1Array[u_xlati0 / 4].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz * _ClipPlane.xxx + u_xlat3.xyz;
            u_xlat3.xyz = unity_Builtins1Array[u_xlati0 / 4].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz * _ClipPlane.zzz + u_xlat3.xyz;
            u_xlat13 = dot(u_xlat2.xyz, u_xlat3.xyz);
            u_xlat19 = dot(in_POSITION0.xyz, u_xlat3.xyz);
#ifdef UNITY_ADRENO_ES3
            u_xlatb2 = !!(u_xlat19<u_xlat13);
#else
            u_xlatb2 = u_xlat19<u_xlat13;
#endif
            u_xlat13 = (-u_xlat13) + u_xlat19;
            u_xlat3.xyz = (-vec3(u_xlat13)) * u_xlat3.xyz + in_POSITION0.xyz;
            u_xlat3.w = 0.0;
            u_xlat4.xyz = in_POSITION0.xyz;
            u_xlat4.w = in_COLOR0.w;
            u_xlat2 = (bool(u_xlatb2)) ? u_xlat3 : u_xlat4;
            u_xlat16_5 = u_xlat2.w;
        } else {
            u_xlat13 = dot(in_POSITION0.xyz, _ClipPlane.xyz);
            u_xlat19 = _ClipPlane.w + -0.00999999978;
#ifdef UNITY_ADRENO_ES3
            u_xlatb19 = !!(u_xlat13<u_xlat19);
#else
            u_xlatb19 = u_xlat13<u_xlat19;
#endif
            u_xlat13 = u_xlat13 + (-_ClipPlane.w);
            u_xlat3.xyz = (-vec3(u_xlat13)) * _ClipPlane.xyz + in_POSITION0.xyz;
            u_xlat3.w = 0.0;
            u_xlat4.xyz = in_POSITION0.xyz;
            u_xlat4.w = in_COLOR0.w;
            u_xlat2 = (bool(u_xlatb19)) ? u_xlat3 : u_xlat4;
            u_xlat16_5 = u_xlat2.w;
        //ENDIF
        }
    } else {
        u_xlat2.xyz = in_POSITION0.xyz;
        u_xlat16_5 = in_COLOR0.w;
    //ENDIF
    }
    u_xlat3.xyw = (-_WorldSpaceCameraPos.xyz) + unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat4.x = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].x;
    u_xlat4.y = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].x;
    u_xlat4.z = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].x;
    u_xlat4.w = u_xlat3.x;
    u_xlat2.w = 1.0;
    u_xlat13 = dot(u_xlat4, u_xlat2);
    u_xlat4.x = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].y;
    u_xlat4.y = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].y;
    u_xlat4.z = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].y;
    u_xlat4.w = u_xlat3.y;
    u_xlat19 = dot(u_xlat4, u_xlat2);
    u_xlat3.x = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].z;
    u_xlat3.y = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].z;
    u_xlat3.z = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].z;
    u_xlat3.x = dot(u_xlat3, u_xlat2);
    u_xlat4.x = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].w;
    u_xlat4.y = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].w;
    u_xlat4.z = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].w;
    u_xlat4.w = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3].w;
    u_xlat20 = dot(u_xlat4, u_xlat2);
    u_xlat4 = vec4(u_xlat19) * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat4 = hlslcc_mtx4x4unity_MatrixVPZero[0] * vec4(u_xlat13) + u_xlat4;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat3.xxxx + u_xlat4;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVPZero[3] * vec4(u_xlat20) + u_xlat3;
    u_xlat4 = u_xlat2.yyyy * unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat4 = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * u_xlat2.xxxx + u_xlat4;
    u_xlat2 = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * u_xlat2.zzzz + u_xlat4;
    u_xlat2 = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3] * in_POSITION0.wwww + u_xlat2;
    vs_TEXCOORD3.xyz = u_xlat2.xyz / u_xlat2.www;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat2.xz = u_xlat3.xw * vec2(0.5, 0.5);
    u_xlat13 = u_xlat3.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat13 * 0.5;
    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat2.xyz = in_NORMAL0.yyy * unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat2.xyz = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_NORMAL0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_NORMAL0.zzz + u_xlat2.xyz;
    u_xlat0 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0 = inversesqrt(u_xlat0);
    u_xlat2.xyz = vec3(u_xlat0) * u_xlat2.xyz;
    u_xlat16_11.x = dot(u_xlat2.xyz, u_xlat6.xyz);
    vs_TEXCOORD1.w = u_xlat16_11.x * 0.497500002 + 0.5;
    u_xlat16_11.x = min(abs(u_xlat1.x), abs(u_xlat7));
    u_xlat16_17 = max(abs(u_xlat1.x), abs(u_xlat7));
    u_xlat16_17 = float(1.0) / u_xlat16_17;
    u_xlat16_11.x = u_xlat16_17 * u_xlat16_11.x;
    u_xlat16_17 = u_xlat16_11.x * u_xlat16_11.x;
    u_xlat0 = u_xlat16_17 * 0.0208350997 + -0.0851330012;
    u_xlat0 = u_xlat16_17 * u_xlat0 + 0.180141002;
    u_xlat0 = u_xlat16_17 * u_xlat0 + -0.330299497;
    u_xlat0 = u_xlat16_17 * u_xlat0 + 0.999866009;
    u_xlat6.x = u_xlat0 * u_xlat16_11.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(abs(u_xlat1.x)<abs(u_xlat7));
#else
    u_xlatb12 = abs(u_xlat1.x)<abs(u_xlat7);
#endif
    u_xlat6.x = u_xlat6.x * -2.0 + 1.57079637;
    u_xlat6.x = u_xlatb12 ? u_xlat6.x : float(0.0);
    u_xlat0 = u_xlat16_11.x * u_xlat0 + u_xlat6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(u_xlat1.x<(-u_xlat1.x));
#else
    u_xlatb6 = u_xlat1.x<(-u_xlat1.x);
#endif
    u_xlat6.x = u_xlatb6 ? -3.14159274 : float(0.0);
    u_xlat0 = u_xlat6.x + u_xlat0;
    u_xlat16_11.x = min(u_xlat1.x, u_xlat7);
    u_xlat16_17 = max(u_xlat1.x, u_xlat7);
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(u_xlat16_11.x<(-u_xlat16_11.x));
#else
    u_xlatb6 = u_xlat16_11.x<(-u_xlat16_11.x);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat16_17>=(-u_xlat16_17));
#else
    u_xlatb12 = u_xlat16_17>=(-u_xlat16_17);
#endif
    u_xlatb6 = u_xlatb12 && u_xlatb6;
    u_xlat0 = (u_xlatb6) ? (-u_xlat0) : u_xlat0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.0<(-u_xlat0));
#else
    u_xlatb6 = 0.0<(-u_xlat0);
#endif
    u_xlat16_11.x = u_xlat0 * -0.318309903;
    u_xlat0 = max(_FaceMapRotateOffset, 0.0);
    u_xlat12 = _FaceMapRotateOffset + 1.0;
    u_xlat12 = min(u_xlat12, 1.0);
    u_xlat12 = (-u_xlat0) + u_xlat12;
    u_xlat0 = (-u_xlat0) + abs(u_xlat16_11.x);
    u_xlat12 = float(1.0) / u_xlat12;
    u_xlat0 = u_xlat12 * u_xlat0;
#ifdef UNITY_ADRENO_ES3
    u_xlat0 = min(max(u_xlat0, 0.0), 1.0);
#else
    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
#endif
    u_xlat12 = u_xlat0 * -2.0 + 3.0;
    u_xlat0 = u_xlat0 * u_xlat0;
    u_xlat0 = u_xlat0 * u_xlat12;
    u_xlat0 = max(u_xlat0, 9.99999975e-05);
    u_xlat0 = min(u_xlat0, 0.999899983);
    u_xlat16_11.xy = in_TEXCOORD0.xy * vec2(-1.0, 1.0) + vec2(1.0, 0.0);
    vs_TEXCOORD6.xy = (bool(u_xlatb6)) ? u_xlat16_11.xy : in_TEXCOORD0.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_CharacterAmbientSensorShadowOn));
#else
    u_xlatb6 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_CharacterAmbientSensorShadowOn);
#endif
    if(u_xlatb6){
        u_xlat6.x = textureLod(_CharacterAmbientSensorTex, _AmbientSensorUVs.xy, 0.0).x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb6 = !!(0.5<u_xlat6.x);
#else
        u_xlatb6 = 0.5<u_xlat6.x;
#endif
        vs_TEXCOORD4 = u_xlatb6 ? 1.0 : float(0.0);
    } else {
        vs_TEXCOORD4 = 0.0;
    //ENDIF
    }
    gl_Position = u_xlat3;
    vs_COLOR0.xyz = in_COLOR0.xyz;
    vs_COLOR0.w = u_xlat16_5;
    vs_TEXCOORD1.xyz = u_xlat2.xyz;
    vs_TEXCOORD2.zw = u_xlat3.zw;
    vs_TEXCOORD6.z = u_xlat0;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	mediump vec4 _Color;
uniform 	float _MainTexAlphaUse;
uniform 	mediump float _MainTexAlphaCutoff;
uniform 	mediump vec4 _MainTexTintColor;
uniform 	float _UseLightMapColorAO;
uniform 	float _UseVertexColorAO;
uniform 	mediump float _LightArea;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	float _UseCoolShadowColorOrTex;
uniform 	mediump vec3 _CoolShadowMultColor;
uniform 	float _UseShadowTransition;
uniform 	float _ShadowTransitionRange;
uniform 	float _ShadowTransitionSoftness;
uniform 	mediump vec3 _SpecularColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	float _FaceBlushStrength;
uniform 	mediump vec3 _FaceBlushColor;
uniform 	float _FaceMapSoftness;
uniform 	mediump float _EmissionScaler;
uniform 	mediump vec3 _EmissionColor_MHY;
uniform 	float _UseMaterial2;
uniform 	mediump vec3 _Color2;
uniform 	mediump vec3 _FirstShadowMultColor2;
uniform 	mediump vec3 _CoolShadowMultColor2;
uniform 	mediump float _Shininess2;
uniform 	mediump float _SpecMulti2;
uniform 	float _ShadowTransitionRange2;
uniform 	float _ShadowTransitionSoftness2;
uniform 	float _UseMaterial3;
uniform 	mediump vec3 _Color3;
uniform 	mediump vec3 _FirstShadowMultColor3;
uniform 	mediump vec3 _CoolShadowMultColor3;
uniform 	mediump float _Shininess3;
uniform 	mediump float _SpecMulti3;
uniform 	float _ShadowTransitionRange3;
uniform 	float _ShadowTransitionSoftness3;
uniform 	float _UseMaterial4;
uniform 	mediump vec3 _Color4;
uniform 	mediump vec3 _FirstShadowMultColor4;
uniform 	mediump vec3 _CoolShadowMultColor4;
uniform 	mediump float _Shininess4;
uniform 	mediump float _SpecMulti4;
uniform 	float _ShadowTransitionRange4;
uniform 	float _ShadowTransitionSoftness4;
uniform 	float _UseMaterial5;
uniform 	mediump vec3 _Color5;
uniform 	mediump vec3 _FirstShadowMultColor5;
uniform 	mediump vec3 _CoolShadowMultColor5;
uniform 	mediump float _Shininess5;
uniform 	mediump float _SpecMulti5;
uniform 	float _ShadowTransitionRange5;
uniform 	float _ShadowTransitionSoftness5;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _TextureBiasWhenDithering;
uniform 	float _UseClipPlane;
uniform 	float _ES_CharacterAmbientLightOn;
uniform 	float _ES_CharacterAmbientBrightness;
uniform 	vec3 _ES_CharacterMainLightColor;
uniform 	vec3 _ES_CharacterAmbientLightColor;
uniform 	float _ES_CharacterMainLightRatio;
uniform 	float _ES_CharacterAmbientLightRatio;
uniform 	float _ES_CharacterColorTone;
uniform 	float _ES_CharacterPointLightWholeIntensity;
uniform 	vec4 mhy_AvatarLightDir;
uniform 	vec4 mhy_CharacterPointLightColor;
uniform 	vec4 mhy_CharacterOverrideLightDir;
uniform 	mediump vec4 _FlowMapColor01;
uniform 	mediump float _FlowScale01;
uniform 	mediump float _FlowMap01_Uspeed;
uniform 	vec4 _FlowMap01_ST;
uniform 	mediump float _FlowMap01_Vspeed;
uniform 	mediump float _Noise_Uspeed;
uniform 	vec4 _Noise_ST;
uniform 	mediump float _Noise_Vspeed;
uniform 	mediump float _NoiseFlowIntensity;
uniform 	mediump float _MaskOffset01;
uniform 	mediump float _NoiseIntensity;
uniform 	mediump float _Mask01_Power;
uniform 	mediump vec4 _FlowMapColor02;
uniform 	mediump float _FlowScale02;
uniform 	mediump float _FlowMap02_Uspeed;
uniform 	vec4 _FlowMap02_ST;
uniform 	mediump float _FlowMap02_Vspeed;
uniform 	mediump float _MaskOffset02;
uniform 	mediump float _Mask02_Power;
uniform 	mediump float _DissolveNoise_Uspeed;
uniform 	vec4 _DissovleNoise_ST;
uniform 	mediump float _DissolveNoise_Vspeed;
uniform 	mediump float _DissovleNoiseScale;
uniform 	mediump float _Dissovle;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _FaceMapTex;
uniform lowp sampler2D _Noise;
uniform lowp sampler2D _FlowMap01;
uniform lowp sampler2D _Mask01;
uniform lowp sampler2D _FlowMap02;
uniform lowp sampler2D _Mask02;
uniform lowp sampler2D _DissovleNoise;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp float vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
vec3 u_xlat2;
mediump float u_xlat16_2;
bvec4 u_xlatb2;
vec3 u_xlat3;
mediump float u_xlat16_3;
lowp vec4 u_xlat10_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
bvec4 u_xlatb5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
mediump vec3 u_xlat16_7;
int u_xlati7;
bvec3 u_xlatb7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
bool u_xlatb11;
vec3 u_xlat13;
mediump vec3 u_xlat16_13;
lowp float u_xlat10_13;
bool u_xlatb13;
float u_xlat14;
mediump vec3 u_xlat16_14;
int u_xlati14;
mediump float u_xlat16_15;
mediump vec3 u_xlat16_17;
mediump vec3 u_xlat16_19;
bvec2 u_xlatb22;
vec2 u_xlat24;
mediump float u_xlat16_30;
float u_xlat33;
mediump float u_xlat16_33;
lowp float u_xlat10_33;
int u_xlati33;
bool u_xlatb33;
float u_xlat35;
float u_xlat36;
int u_xlati36;
bool u_xlatb36;
mediump float u_xlat16_37;
mediump float u_xlat16_39;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseClipPlane));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseClipPlane);
#endif
    u_xlat16_1.x = vs_COLOR0.w + -0.00999999978;
#ifdef UNITY_ADRENO_ES3
    u_xlatb11 = !!(u_xlat16_1.x<0.0);
#else
    u_xlatb11 = u_xlat16_1.x<0.0;
#endif
    u_xlatb0 = u_xlatb0 && u_xlatb11;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(_DitherAlpha<0.949999988);
#else
        u_xlatb0 = _DitherAlpha<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb22.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb22.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb22.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = _DitherAlpha * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + -0.00999999978;
#ifdef UNITY_ADRENO_ES3
            u_xlatb0 = !!(u_xlat0.x<0.0);
#else
            u_xlatb0 = u_xlat0.x<0.0;
#endif
            if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(0.5<mhy_CharacterOverrideLightDir.w);
#else
    u_xlatb2.x = 0.5<mhy_CharacterOverrideLightDir.w;
#endif
    u_xlat3.x = mhy_CharacterOverrideLightDir.x;
    u_xlat3.yz = (-mhy_CharacterOverrideLightDir.yz);
    u_xlat2.xyz = (u_xlatb2.x) ? u_xlat3.xyz : mhy_AvatarLightDir.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat33) + u_xlat2.xyz;
    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat0.xyz = vec3(u_xlat33) * u_xlat0.xyz;
    u_xlat33 = _TextureBiasWhenDithering + -1.0;
    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy, u_xlat33);
    u_xlat16_4.xyz = u_xlat1.xyz * _MainTexTintColor.xyz;
    u_xlat16_5.xyz = u_xlat16_4.xyz + u_xlat16_4.xyz;
    u_xlat16_6.xyz = u_xlat1.xyz + _MainTexTintColor.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_6.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(-4.0, -4.0, -4.0) + u_xlat16_6.xyz;
    u_xlatb2 = lessThan(vec4(0.5, 0.5, 0.5, 0.00999999978), u_xlat1);
    u_xlat16_6.x = (u_xlatb2.x) ? float(1.0) : float(0.0);
    u_xlat16_6.y = (u_xlatb2.y) ? float(1.0) : float(0.0);
    u_xlat16_6.z = (u_xlatb2.z) ? float(1.0) : float(0.0);
    u_xlat16_4.xyz = u_xlat16_4.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat16_4.xyz = u_xlat16_6.xyz * u_xlat16_4.xyz + u_xlat16_5.xyz;
    u_xlatb2.xyz = equal(vec4(_MainTexAlphaUse), vec4(3.0, 1.0, 2.0, 0.0)).xyz;
    u_xlat3.x = u_xlat1.w * _FaceBlushStrength;
    u_xlat16_14.xyz = (-u_xlat16_4.xyz) + _FaceBlushColor.xyz;
    u_xlat3.xyz = u_xlat3.xxx * u_xlat16_14.xyz + u_xlat16_4.xyz;
    u_xlat16_4.xyz = (u_xlatb2.x) ? u_xlat3.xyz : u_xlat16_4.xyz;
    u_xlat16_37 = u_xlat1.w + (-_MainTexAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(u_xlat16_37<0.0);
#else
    u_xlatb2.x = u_xlat16_37<0.0;
#endif
    u_xlatb2.x = u_xlatb2.y && u_xlatb2.x;
    if((int(u_xlatb2.x) * int(0xffffffffu))!=0){discard;}
    u_xlat10_3 = texture(_LightMapTex, vs_TEXCOORD0.xy, u_xlat33);
    u_xlatb2.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseLightMapColorAO, _UseVertexColorAO, _UseLightMapColorAO, _UseLightMapColorAO)).xy;
    u_xlat16_37 = (u_xlatb2.x) ? u_xlat10_3.y : 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseMaterial2));
#else
    u_xlatb33 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseMaterial2);
#endif
    u_xlatb5 = greaterThanEqual(u_xlat10_3.wwww, vec4(0.800000012, 0.400000006, 0.200000003, 0.600000024));
    u_xlatb33 = u_xlatb33 && u_xlatb5.x;
    u_xlat33 = (u_xlatb33) ? 2.0 : 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseMaterial3));
#else
    u_xlatb2.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseMaterial3);
#endif
    u_xlatb2.x = u_xlatb5.y && u_xlatb2.x;
    u_xlatb7.xyz = lessThan(u_xlat10_3.wwww, vec4(0.600000024, 0.400000006, 0.800000012, 0.0)).xyz;
    u_xlatb2.x = u_xlatb2.x && u_xlatb7.x;
    u_xlat33 = (u_xlatb2.x) ? 3.0 : u_xlat33;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseMaterial4));
#else
    u_xlatb2.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseMaterial4);
#endif
    u_xlatb2.x = u_xlatb5.z && u_xlatb2.x;
    u_xlatb2.x = u_xlatb7.y && u_xlatb2.x;
    u_xlat33 = (u_xlatb2.x) ? 4.0 : u_xlat33;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseMaterial5));
#else
    u_xlatb2.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseMaterial5);
#endif
    u_xlatb2.x = u_xlatb5.w && u_xlatb2.x;
    u_xlatb2.x = u_xlatb7.z && u_xlatb2.x;
    u_xlat33 = (u_xlatb2.x) ? 5.0 : u_xlat33;
    u_xlatb5 = equal(vec4(u_xlat33), vec4(2.0, 3.0, 4.0, 5.0));
    u_xlat16_6.xyz = (u_xlatb5.x) ? _Color2.xyz : _Color.xyz;
    u_xlat16_6.xyz = (u_xlatb5.y) ? _Color3.xyz : u_xlat16_6.xyz;
    u_xlat16_6.xyz = (u_xlatb5.z) ? _Color4.xyz : u_xlat16_6.xyz;
    u_xlat16_6.xyz = (u_xlatb5.w) ? _Color5.xyz : u_xlat16_6.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_6.xyz;
    u_xlatb2.x = u_xlatb2.w && u_xlatb2.z;
    u_xlat16_6.x = (u_xlatb2.x) ? u_xlat1.w : 0.0;
    u_xlat24.x = texture(_FaceMapTex, vs_TEXCOORD6.xy).w;
    u_xlat35 = max(_FaceMapSoftness, 9.99999997e-07);
    u_xlat16_17.x = (-u_xlat35) + vs_TEXCOORD6.z;
    u_xlat16_14.x = max(u_xlat16_17.x, 9.99999975e-05);
    u_xlat16_14.x = min(u_xlat16_14.x, 0.998899996);
    u_xlat16_17.x = u_xlat35 + vs_TEXCOORD6.z;
    u_xlat24.y = min(u_xlat16_17.x, 0.999899983);
    u_xlat24.xy = u_xlat24.xy + (-u_xlat16_14.xx);
    u_xlat35 = float(1.0) / u_xlat24.y;
    u_xlat24.x = u_xlat35 * u_xlat24.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat24.x = min(max(u_xlat24.x, 0.0), 1.0);
#else
    u_xlat24.x = clamp(u_xlat24.x, 0.0, 1.0);
#endif
    u_xlat35 = u_xlat24.x * -2.0 + 3.0;
    u_xlat24.x = u_xlat24.x * u_xlat24.x;
    u_xlat14 = u_xlat24.x * u_xlat35;
    u_xlat16_17.x = u_xlat16_37 * vs_COLOR0.x;
    u_xlat16_37 = (u_xlatb2.y) ? u_xlat16_17.x : u_xlat16_37;
#ifdef UNITY_ADRENO_ES3
    u_xlatb13 = !!(u_xlat16_37<0.0500000007);
#else
    u_xlatb13 = u_xlat16_37<0.0500000007;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb36 = !!(0.949999988<u_xlat16_37);
#else
    u_xlatb36 = 0.949999988<u_xlat16_37;
#endif
    u_xlat7.x = u_xlat16_37 + vs_TEXCOORD1.w;
    u_xlat7.x = u_xlat7.x * 0.5;
    u_xlat16_37 = (u_xlatb36) ? 1.0 : u_xlat7.x;
    u_xlat16_37 = (u_xlatb13) ? 0.0 : u_xlat16_37;
#ifdef UNITY_ADRENO_ES3
    u_xlatb13 = !!(u_xlat16_37<_LightArea);
#else
    u_xlatb13 = u_xlat16_37<_LightArea;
#endif
    if(u_xlatb13){
#ifdef UNITY_ADRENO_ES3
        u_xlatb13 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition));
#else
        u_xlatb13 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition);
#endif
#ifdef UNITY_ADRENO_ES3
        u_xlatb36 = !!(u_xlat33==1.0);
#else
        u_xlatb36 = u_xlat33==1.0;
#endif
        u_xlat16_8.x = (u_xlatb36) ? _ShadowTransitionRange : 0.0;
        u_xlat16_8.y = (u_xlatb36) ? _ShadowTransitionSoftness : 0.0;
        u_xlat16_17.xy = (u_xlatb5.x) ? vec2(_ShadowTransitionRange2, _ShadowTransitionSoftness2) : u_xlat16_8.xy;
        u_xlat16_17.xy = (u_xlatb5.y) ? vec2(_ShadowTransitionRange3, _ShadowTransitionSoftness3) : u_xlat16_17.xy;
        u_xlat16_17.xy = (u_xlatb5.z) ? vec2(_ShadowTransitionRange4, _ShadowTransitionSoftness4) : u_xlat16_17.xy;
        u_xlat16_17.xy = (u_xlatb5.w) ? vec2(_ShadowTransitionRange5, _ShadowTransitionSoftness5) : u_xlat16_17.xy;
        u_xlat16_37 = (-u_xlat16_37) + _LightArea;
        u_xlat16_37 = u_xlat16_37 / u_xlat16_17.x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb36 = !!(u_xlat16_37>=1.0);
#else
        u_xlatb36 = u_xlat16_37>=1.0;
#endif
        u_xlat16_7.x = u_xlat16_37 + 0.00999999978;
        u_xlat16_7.x = log2(u_xlat16_7.x);
        u_xlat16_7.x = u_xlat16_17.y * u_xlat16_7.x;
        u_xlat16_7.x = exp2(u_xlat16_7.x);
        u_xlat7.x = min(u_xlat16_7.x, 1.0);
        u_xlat36 = (u_xlatb36) ? 1.0 : u_xlat7.x;
        u_xlat13.x = (u_xlatb13) ? u_xlat36 : 1.0;
        u_xlat16_37 = 0.0;
    } else {
        u_xlat13.x = 0.0;
        u_xlat16_37 = 1.0;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb36 = !!(0.5<u_xlat10_3.x);
#else
    u_xlatb36 = 0.5<u_xlat10_3.x;
#endif
    u_xlat16_17.x = min(u_xlat14, u_xlat16_37);
    u_xlat16_37 = (u_xlatb36) ? u_xlat16_17.x : u_xlat16_37;
    u_xlat16_37 = (-u_xlat16_37) + 1.0;
#ifdef UNITY_ADRENO_ES3
    { bool cond = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(vs_TEXCOORD4); u_xlati14 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati14 = int((vec4(0.0, 0.0, 0.0, 0.0)!=vec4(vs_TEXCOORD4)) ? 0xFFFFFFFFu : uint(0u));
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(u_xlat33==1.0);
#else
    u_xlatb33 = u_xlat33==1.0;
#endif
    if(u_xlatb33){
#ifdef UNITY_ADRENO_ES3
        u_xlatb36 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex));
#else
        u_xlatb36 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex);
#endif
        u_xlat16_7.xyz = vec3(_FirstShadowMultColor.xxyz.y + (-_CoolShadowMultColor.x), _FirstShadowMultColor.xxyz.z + (-_CoolShadowMultColor.y), float(_FirstShadowMultColor.z) + (-_CoolShadowMultColor.z));
        u_xlat7.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_7.xyz + _CoolShadowMultColor.xyz;
        u_xlat16_17.xyz = (bool(u_xlatb36)) ? u_xlat7.xyz : vec3(_FirstShadowMultColor.x, _FirstShadowMultColor.y, _FirstShadowMultColor.z);
    } else {
        if(u_xlatb5.x){
#ifdef UNITY_ADRENO_ES3
            u_xlatb36 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex));
#else
            u_xlatb36 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex);
#endif
            u_xlat16_7.xyz = _FirstShadowMultColor2.xyz + (-_CoolShadowMultColor2.xyz);
            u_xlat7.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_7.xyz + _CoolShadowMultColor2.xyz;
            u_xlat16_17.xyz = (bool(u_xlatb36)) ? u_xlat7.xyz : _FirstShadowMultColor2.xyz;
        } else {
#ifdef UNITY_ADRENO_ES3
            u_xlatb36 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex));
#else
            u_xlatb36 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex);
#endif
            u_xlat16_7.xyz = _FirstShadowMultColor3.xyz + (-_CoolShadowMultColor3.xyz);
            u_xlat7.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_7.xyz + _CoolShadowMultColor3.xyz;
            u_xlat16_8.xyz = (bool(u_xlatb36)) ? u_xlat7.xyz : _FirstShadowMultColor3.xyz;
            u_xlat16_7.xyz = _FirstShadowMultColor4.xyz + (-_CoolShadowMultColor4.xyz);
            u_xlat7.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_7.xyz + _CoolShadowMultColor4.xyz;
            u_xlat16_9.xyz = (bool(u_xlatb36)) ? u_xlat7.xyz : _FirstShadowMultColor4.xyz;
            u_xlat16_7.xyz = _FirstShadowMultColor5.xyz + (-_CoolShadowMultColor5.xyz);
            u_xlat7.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_7.xyz + _CoolShadowMultColor5.xyz;
            u_xlat16_10.xyz = (bool(u_xlatb36)) ? u_xlat7.xyz : _FirstShadowMultColor5.xyz;
            u_xlat16_9.xyz = (u_xlatb5.z) ? u_xlat16_9.xyz : u_xlat16_10.xyz;
            u_xlat16_17.xyz = (u_xlatb5.y) ? u_xlat16_8.xyz : u_xlat16_9.xyz;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb36 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition));
#else
    u_xlatb36 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition);
#endif
    u_xlati7 = ~u_xlati14;
    u_xlati36 = u_xlatb36 ? u_xlati7 : int(0);
    u_xlat16_7.xyz = u_xlat16_17.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat7.xyz = u_xlat13.xxx * u_xlat16_7.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_17.xyz = (int(u_xlati36) != 0) ? u_xlat7.xyz : u_xlat16_17.xyz;
    u_xlat16_8.x = (-u_xlat35) * u_xlat24.x + 1.0;
    u_xlat16_19.xyz = u_xlat16_17.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat16_8.xyz = u_xlat16_8.xxx * u_xlat16_19.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_17.xyz = (int(u_xlati14) != 0) ? u_xlat16_17.xyz : u_xlat16_8.xyz;
    u_xlat16_8.x = (u_xlatb5.z) ? _Shininess4 : _Shininess5;
    u_xlat16_19.x = (u_xlatb5.z) ? _SpecMulti4 : _SpecMulti5;
    u_xlat16_8.x = (u_xlatb5.y) ? _Shininess3 : u_xlat16_8.x;
    u_xlat16_19.x = (u_xlatb5.y) ? _SpecMulti3 : u_xlat16_19.x;
    u_xlat16_8.x = (u_xlatb5.x) ? _Shininess2 : u_xlat16_8.x;
    u_xlat16_19.x = (u_xlatb5.x) ? _SpecMulti2 : u_xlat16_19.x;
    u_xlat16_8.x = (u_xlatb33) ? _Shininess : u_xlat16_8.x;
    u_xlat16_19.x = (u_xlatb33) ? _SpecMulti : u_xlat16_19.x;
    u_xlat16_30 = dot(vs_TEXCOORD1.xyz, u_xlat0.xyz);
    u_xlat16_30 = max(u_xlat16_30, 0.00100000005);
    u_xlat16_30 = log2(u_xlat16_30);
    u_xlat16_8.x = u_xlat16_30 * u_xlat16_8.x;
    u_xlat16_8.x = exp2(u_xlat16_8.x);
    u_xlat0.x = (-u_xlat10_3.z) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat0.x<u_xlat16_8.x);
#else
    u_xlatb0 = u_xlat0.x<u_xlat16_8.x;
#endif
    u_xlat16_8.xyz = u_xlat16_19.xxx * _SpecularColor.xyz;
    u_xlat16_8.xyz = u_xlat10_3.xxx * u_xlat16_8.xyz;
    u_xlat16_8.xyz = (bool(u_xlatb0)) ? u_xlat16_8.xyz : vec3(0.0, 0.0, 0.0);
    u_xlat16_4.xyz = vec3(u_xlat16_4.x * _EmissionColor_MHY.xxyz.y, u_xlat16_4.y * _EmissionColor_MHY.xxyz.z, u_xlat16_4.z * float(_EmissionColor_MHY.z));
    u_xlat0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(u_xlat16_37==1.0);
#else
    u_xlatb33 = u_xlat16_37==1.0;
#endif
    u_xlati33 = int(uint(u_xlatb33) * 0xffffffffu | uint(u_xlati14));
    u_xlat13.xyz = u_xlat0.xyz * u_xlat16_17.xyz;
    u_xlat0.xyz = (int(u_xlati33) != 0) ? u_xlat13.xyz : u_xlat0.xyz;
    u_xlat0.xyz = u_xlat16_8.xyz + u_xlat0.xyz;
    u_xlat13.xy = vs_TEXCOORD0.zw * _FlowMap01_ST.xy + _FlowMap01_ST.zw;
    u_xlat16_8.x = _Time.y * _FlowMap01_Uspeed + u_xlat13.x;
    u_xlat16_8.y = _Time.y * _FlowMap01_Vspeed + u_xlat13.y;
    u_xlat13.xy = vs_TEXCOORD0.zw * _Noise_ST.xy + _Noise_ST.zw;
    u_xlat16_9.x = _Time.y * _Noise_Uspeed + u_xlat13.x;
    u_xlat16_9.y = _Time.y * _Noise_Vspeed + u_xlat13.y;
    u_xlat10_33 = texture(_Noise, u_xlat16_9.xy).x;
    u_xlat16_37 = _MaskOffset01 * 1.39999998 + -0.699999988;
    u_xlat16_17.x = u_xlat10_33 * _NoiseIntensity;
    u_xlat13.xy = vs_TEXCOORD0.zw * _FlowMap02_ST.xy + _FlowMap02_ST.zw;
    u_xlat16_9.x = _Time.y * _FlowMap02_Uspeed + u_xlat13.x;
    u_xlat16_9.y = _Time.y * _FlowMap02_Vspeed + u_xlat13.y;
    u_xlat16_39 = _MaskOffset02 * 1.39999998 + -0.699999988;
    u_xlat16_10.xyz = _FlowMapColor01.xyz * vec3(_FlowScale01);
    u_xlat16_8.xy = vec2(u_xlat10_33) * vec2(vec2(_NoiseFlowIntensity, _NoiseFlowIntensity)) + u_xlat16_8.xy;
    u_xlat10_13 = texture(_FlowMap01, u_xlat16_8.xy).x;
    u_xlat16_13.xyz = vec3(u_xlat10_13) * u_xlat16_10.xyz;
    u_xlat16_8.x = (-vs_TEXCOORD0.z) + 1.0;
    u_xlat16_1.x = u_xlat16_37 + u_xlat16_8.x;
    u_xlat16_1.yw = vec2(u_xlat10_33) * vec2(vec2(_NoiseIntensity, _NoiseIntensity)) + (-vs_TEXCOORD0.ww);
    u_xlat16_17.y = 1.0;
    u_xlat16_19.xy = u_xlat16_1.xy + u_xlat16_17.xy;
    u_xlat10_3.x = texture(_Mask01, u_xlat16_19.xy).x;
    u_xlat16_3 = max(u_xlat10_3.x, 9.99999975e-05);
    u_xlat16_3 = log2(u_xlat16_3);
    u_xlat16_3 = u_xlat16_3 * _Mask01_Power;
    u_xlat16_3 = exp2(u_xlat16_3);
    u_xlat16_19.xyz = _FlowMapColor02.xyz * vec3(_FlowScale02);
    u_xlat16_9.xy = vec2(u_xlat10_33) * vec2(vec2(_NoiseFlowIntensity, _NoiseFlowIntensity)) + u_xlat16_9.xy;
    u_xlat10_33 = texture(_FlowMap02, u_xlat16_9.xy).x;
    u_xlat16_14.xyz = vec3(u_xlat10_33) * u_xlat16_19.xyz;
    u_xlat16_1.z = u_xlat16_39 + u_xlat16_8.x;
    u_xlat16_17.xy = vec2(u_xlat16_1.z + u_xlat16_17.x, u_xlat16_1.w + u_xlat16_17.y);
    u_xlat10_33 = texture(_Mask02, u_xlat16_17.xy).x;
    u_xlat16_33 = max(u_xlat10_33, 9.99999975e-05);
    u_xlat16_33 = log2(u_xlat16_33);
    u_xlat16_33 = u_xlat16_33 * _Mask02_Power;
    u_xlat16_33 = exp2(u_xlat16_33);
    u_xlat16_14.xyz = vec3(u_xlat16_33) * u_xlat16_14.xyz;
    u_xlat16_13.xyz = u_xlat16_13.xyz * vec3(u_xlat16_3) + u_xlat16_14.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(_EmissionScaler) + u_xlat16_13.xyz;
    u_xlat3.xyz = (-u_xlat0.xyz) + u_xlat16_4.xyz;
    u_xlat3.xyz = u_xlat16_6.xxx * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat7.xy = vs_TEXCOORD0.zw * _DissovleNoise_ST.xy + _DissovleNoise_ST.zw;
    u_xlat16_4.x = _Time.y * _DissolveNoise_Uspeed + u_xlat7.x;
    u_xlat16_4.y = _Time.y * _DissolveNoise_Vspeed + u_xlat7.y;
    u_xlat10_33 = texture(_DissovleNoise, u_xlat16_4.xy).x;
    u_xlat33 = u_xlat10_33 * _DissovleNoiseScale + vs_TEXCOORD0.z;
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(_Dissovle>=u_xlat33);
#else
    u_xlatb33 = _Dissovle>=u_xlat33;
#endif
    u_xlat0.xyz = (u_xlatb2.x) ? u_xlat3.xyz : u_xlat0.xyz;
    u_xlat0.xyz = u_xlat16_13.xyz + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(0.00999999978<u_xlat16_6.x);
#else
    u_xlatb2.x = 0.00999999978<u_xlat16_6.x;
#endif
    if((int(u_xlatb33) * int(0xffffffffu))==0){discard;}
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn));
#else
    u_xlatb33 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn);
#endif
    u_xlat13.xyz = u_xlat0.xyz * vec3(vec3(_ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness));
    u_xlat3.xyz = vec3(vec3(_ES_CharacterPointLightWholeIntensity, _ES_CharacterPointLightWholeIntensity, _ES_CharacterPointLightWholeIntensity)) * mhy_CharacterPointLightColor.xyz;
    u_xlat7.xyz = _ES_CharacterMainLightColor.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.xyz = min(max(u_xlat7.xyz, 0.0), 1.0);
#else
    u_xlat7.xyz = clamp(u_xlat7.xyz, 0.0, 1.0);
#endif
    u_xlat36 = (-mhy_CharacterPointLightColor.w) + 1.0;
    u_xlat3.xyz = u_xlat7.xyz * vec3(u_xlat36) + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat3.xyz = vec3(vec3(_ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio)) * u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat13.xyz = u_xlat13.xyz * u_xlat3.xyz;
    u_xlat3.xyz = _ES_CharacterAmbientLightColor.xyz * vec3(_ES_CharacterAmbientLightRatio);
    u_xlat16_4.xyz = u_xlat13.xyz * vec3(10.0, 10.0, 10.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.xyz = min(max(u_xlat16_4.xyz, 0.0), 1.0);
#else
    u_xlat16_4.xyz = clamp(u_xlat16_4.xyz, 0.0, 1.0);
#endif
    u_xlat13.xyz = u_xlat3.xyz * u_xlat16_4.xyz + u_xlat13.xyz;
    u_xlat16_4.xyz = (bool(u_xlatb33)) ? u_xlat13.xyz : u_xlat0.xyz;
    u_xlat16_17.xyz = u_xlat0.xyz + (-u_xlat16_4.xyz);
    u_xlat16_17.xyz = u_xlat16_6.xxx * u_xlat16_17.xyz + u_xlat16_4.xyz;
    u_xlat16_0.xyz = (u_xlatb2.x) ? u_xlat16_17.xyz : u_xlat16_4.xyz;
    u_xlat16_4.x = max(u_xlat16_0.z, u_xlat16_0.y);
    u_xlat16_1.w = max(u_xlat16_0.x, u_xlat16_4.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(1.0<u_xlat16_1.w);
#else
    u_xlatb2.x = 1.0<u_xlat16_1.w;
#endif
    u_xlat16_1.xyz = u_xlat16_0.xyz / u_xlat16_1.www;
    u_xlat16_0.w = 1.0;
    u_xlat16_0 = (u_xlatb2.x) ? u_xlat16_1 : u_xlat16_0;
    u_xlat16_4.x = min(u_xlat16_0.w, 1.10000002);
    u_xlat16_15 = u_xlat16_0.w + (-u_xlat16_4.x);
    u_xlat16_4.x = u_xlat16_6.x * u_xlat16_15 + u_xlat16_4.x;
    u_xlat16_2 = u_xlat16_4.x * 0.0500000007;
    SV_Target0.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb13 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb13 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_4.x = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb13) ? u_xlat16_4.x : 0.0;
    SV_Target0.w = 0.0156862754;
    SV_Target1.xyz = u_xlat16_0.xyz;
    SV_Target1.w = u_xlat16_2;
    SV_Target2.xy = vec2(0.0, 0.0);
    SV_Target2.w = vs_TEXCOORD4;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "MSAA_INTERPOLATION" "MAIN_TEX_COLORING_ON" "FACE_MAP_NEW_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	vec4 _MainTex_ST;
uniform 	float _FaceMapRotateOffset;
uniform 	float _CharacterAmbientSensorShadowOn;
uniform 	vec4 _AmbientSensorUVs;
uniform 	float _UseClipPlane;
uniform 	float _ClipPlaneWorld;
uniform 	vec4 _ClipPlane;
uniform 	vec4 mhy_AvatarLightDir;
uniform 	vec4 mhy_CharacterOverrideLightDir;
uniform lowp sampler2D _CharacterAmbientSensorTex;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp float vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD6;
vec3 u_xlat0;
bool u_xlatb0;
vec3 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
bool u_xlatb3;
vec4 u_xlat4;
vec4 u_xlat5;
mediump vec2 u_xlat16_6;
float u_xlat7;
bool u_xlatb7;
vec3 u_xlat8;
bvec2 u_xlatb8;
bool u_xlatb9;
mediump float u_xlat16_13;
float u_xlat14;
bool u_xlatb14;
float u_xlat15;
float u_xlat21;
float u_xlat22;
bool u_xlatb22;
float u_xlat23;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.5<mhy_CharacterOverrideLightDir.w);
#else
    u_xlatb0 = 0.5<mhy_CharacterOverrideLightDir.w;
#endif
    u_xlat1.x = mhy_CharacterOverrideLightDir.x;
    u_xlat1.yz = (-mhy_CharacterOverrideLightDir.yz);
    u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat1.xyz : mhy_AvatarLightDir.xyz;
    u_xlat21 = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_ObjectToWorld[1].xyz);
    u_xlat1.x = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_ObjectToWorld[2].xyz);
    u_xlatb8.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseClipPlane, _ClipPlaneWorld, _UseClipPlane, _UseClipPlane)).xy;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(abs(_ClipPlane.w)<0.00100000005);
#else
    u_xlatb22 = abs(_ClipPlane.w)<0.00100000005;
#endif
    u_xlat2.xyz = _ClipPlane.www * _ClipPlane.xyz;
    u_xlat2.xyz = (bool(u_xlatb22)) ? vec3(0.0, 0.0, 0.0) : u_xlat2.xyz;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_WorldToObject[1];
    u_xlat3 = hlslcc_mtx4x4unity_WorldToObject[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat2 = hlslcc_mtx4x4unity_WorldToObject[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat2 = u_xlat2 + hlslcc_mtx4x4unity_WorldToObject[3];
    u_xlat2.xyz = u_xlat2.xyz / u_xlat2.www;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * _ClipPlane.yyy;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _ClipPlane.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _ClipPlane.zzz + u_xlat3.xyz;
    u_xlat22 = dot(u_xlat2.xyz, u_xlat3.xyz);
    u_xlat2.x = dot(in_POSITION0.xyz, u_xlat3.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(u_xlat2.x<u_xlat22);
#else
    u_xlatb9 = u_xlat2.x<u_xlat22;
#endif
    u_xlat22 = (-u_xlat22) + u_xlat2.x;
    u_xlat3.xyz = (-vec3(u_xlat22)) * u_xlat3.xyz + in_POSITION0.xyz;
    u_xlat3.w = 0.0;
    u_xlat4.xyz = in_POSITION0.xyz;
    u_xlat4.w = in_COLOR0.w;
    u_xlat2 = (bool(u_xlatb9)) ? u_xlat3 : u_xlat4;
    u_xlat22 = dot(in_POSITION0.xyz, _ClipPlane.xyz);
    u_xlat3.x = _ClipPlane.w + -0.00999999978;
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(u_xlat22<u_xlat3.x);
#else
    u_xlatb3 = u_xlat22<u_xlat3.x;
#endif
    u_xlat22 = u_xlat22 + (-_ClipPlane.w);
    u_xlat5.xyz = (-vec3(u_xlat22)) * _ClipPlane.xyz + in_POSITION0.xyz;
    u_xlat5.w = 0.0;
    u_xlat3 = (bool(u_xlatb3)) ? u_xlat5 : u_xlat4;
    u_xlat2.xyz = (u_xlatb8.y) ? u_xlat2.xyz : u_xlat3.xyz;
    u_xlat16_6.x = (u_xlatb8.y) ? u_xlat2.w : u_xlat3.w;
    u_xlat2.xyz = (u_xlatb8.x) ? u_xlat2.xyz : in_POSITION0.xyz;
    vs_COLOR0.w = (u_xlatb8.x) ? u_xlat16_6.x : in_COLOR0.w;
    u_xlat3.xyw = (-_WorldSpaceCameraPos.xyz) + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat4.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;
    u_xlat4.y = hlslcc_mtx4x4unity_ObjectToWorld[1].x;
    u_xlat4.z = hlslcc_mtx4x4unity_ObjectToWorld[2].x;
    u_xlat4.w = u_xlat3.x;
    u_xlat2.w = 1.0;
    u_xlat8.x = dot(u_xlat4, u_xlat2);
    u_xlat4.x = hlslcc_mtx4x4unity_ObjectToWorld[0].y;
    u_xlat4.y = hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat4.z = hlslcc_mtx4x4unity_ObjectToWorld[2].y;
    u_xlat4.w = u_xlat3.y;
    u_xlat15 = dot(u_xlat4, u_xlat2);
    u_xlat3.x = hlslcc_mtx4x4unity_ObjectToWorld[0].z;
    u_xlat3.y = hlslcc_mtx4x4unity_ObjectToWorld[1].z;
    u_xlat3.z = hlslcc_mtx4x4unity_ObjectToWorld[2].z;
    u_xlat22 = dot(u_xlat3, u_xlat2);
    u_xlat3.x = hlslcc_mtx4x4unity_ObjectToWorld[0].w;
    u_xlat3.y = hlslcc_mtx4x4unity_ObjectToWorld[1].w;
    u_xlat3.z = hlslcc_mtx4x4unity_ObjectToWorld[2].w;
    u_xlat3.w = hlslcc_mtx4x4unity_ObjectToWorld[3].w;
    u_xlat23 = dot(u_xlat3, u_xlat2);
    u_xlat3 = vec4(u_xlat15) * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat8.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVPZero[2] * vec4(u_xlat22) + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVPZero[3] * vec4(u_xlat23) + u_xlat3;
    u_xlat4 = u_xlat2.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat4 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat2.xxxx + u_xlat4;
    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat2.zzzz + u_xlat4;
    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat2;
    vs_TEXCOORD3.xyz = u_xlat2.xyz / u_xlat2.www;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat2.xz = u_xlat3.xw * vec2(0.5, 0.5);
    u_xlat8.x = u_xlat3.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat8.x * 0.5;
    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat8.xyz = in_NORMAL0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat8.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_NORMAL0.xxx + u_xlat8.xyz;
    u_xlat8.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_NORMAL0.zzz + u_xlat8.xyz;
    u_xlat2.x = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat8.xyz = u_xlat8.xyz * u_xlat2.xxx;
    u_xlat16_6.x = dot(u_xlat8.xyz, u_xlat0.xyz);
    vs_TEXCOORD1.w = u_xlat16_6.x * 0.497500002 + 0.5;
    u_xlat16_6.x = min(abs(u_xlat21), abs(u_xlat1.x));
    u_xlat16_13 = max(abs(u_xlat21), abs(u_xlat1.x));
    u_xlat16_13 = float(1.0) / u_xlat16_13;
    u_xlat16_6.x = u_xlat16_13 * u_xlat16_6.x;
    u_xlat16_13 = u_xlat16_6.x * u_xlat16_6.x;
    u_xlat0.x = u_xlat16_13 * 0.0208350997 + -0.0851330012;
    u_xlat0.x = u_xlat16_13 * u_xlat0.x + 0.180141002;
    u_xlat0.x = u_xlat16_13 * u_xlat0.x + -0.330299497;
    u_xlat0.x = u_xlat16_13 * u_xlat0.x + 0.999866009;
    u_xlat7 = u_xlat0.x * u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(abs(u_xlat21)<abs(u_xlat1.x));
#else
    u_xlatb14 = abs(u_xlat21)<abs(u_xlat1.x);
#endif
    u_xlat7 = u_xlat7 * -2.0 + 1.57079637;
    u_xlat7 = u_xlatb14 ? u_xlat7 : float(0.0);
    u_xlat0.x = u_xlat16_6.x * u_xlat0.x + u_xlat7;
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(u_xlat21<(-u_xlat21));
#else
    u_xlatb7 = u_xlat21<(-u_xlat21);
#endif
    u_xlat7 = u_xlatb7 ? -3.14159274 : float(0.0);
    u_xlat0.x = u_xlat7 + u_xlat0.x;
    u_xlat16_6.x = min(u_xlat21, u_xlat1.x);
    u_xlat16_13 = max(u_xlat21, u_xlat1.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(u_xlat16_6.x<(-u_xlat16_6.x));
#else
    u_xlatb7 = u_xlat16_6.x<(-u_xlat16_6.x);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(u_xlat16_13>=(-u_xlat16_13));
#else
    u_xlatb14 = u_xlat16_13>=(-u_xlat16_13);
#endif
    u_xlatb7 = u_xlatb14 && u_xlatb7;
    u_xlat0.x = (u_xlatb7) ? (-u_xlat0.x) : u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(0.0<(-u_xlat0.x));
#else
    u_xlatb7 = 0.0<(-u_xlat0.x);
#endif
    u_xlat16_6.x = u_xlat0.x * -0.318309903;
    u_xlat0.x = max(_FaceMapRotateOffset, 0.0);
    u_xlat14 = _FaceMapRotateOffset + 1.0;
    u_xlat14 = min(u_xlat14, 1.0);
    u_xlat14 = (-u_xlat0.x) + u_xlat14;
    u_xlat0.x = (-u_xlat0.x) + abs(u_xlat16_6.x);
    u_xlat14 = float(1.0) / u_xlat14;
    u_xlat0.x = u_xlat14 * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat14 = u_xlat0.x * -2.0 + 3.0;
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * u_xlat14;
    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);
    u_xlat0.x = min(u_xlat0.x, 0.999899983);
    u_xlat16_6.xy = in_TEXCOORD0.xy * vec2(-1.0, 1.0) + vec2(1.0, 0.0);
    vs_TEXCOORD6.xy = (bool(u_xlatb7)) ? u_xlat16_6.xy : in_TEXCOORD0.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_CharacterAmbientSensorShadowOn));
#else
    u_xlatb7 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_CharacterAmbientSensorShadowOn);
#endif
    if(u_xlatb7){
        u_xlat7 = textureLod(_CharacterAmbientSensorTex, _AmbientSensorUVs.xy, 0.0).x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb7 = !!(0.5<u_xlat7);
#else
        u_xlatb7 = 0.5<u_xlat7;
#endif
        vs_TEXCOORD4 = u_xlatb7 ? 1.0 : float(0.0);
    } else {
        vs_TEXCOORD4 = 0.0;
    //ENDIF
    }
    gl_Position = u_xlat3;
    vs_COLOR0.xyz = in_COLOR0.xyz;
    vs_TEXCOORD1.xyz = u_xlat8.xyz;
    vs_TEXCOORD2.zw = u_xlat3.zw;
    vs_TEXCOORD6.z = u_xlat0.x;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	mediump vec4 _Color;
uniform 	float _MainTexAlphaUse;
uniform 	mediump float _MainTexAlphaCutoff;
uniform 	mediump vec4 _MainTexTintColor;
uniform 	float _UseVertexColorAO;
uniform 	mediump float _LightArea;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	float _UseCoolShadowColorOrTex;
uniform 	mediump vec3 _CoolShadowMultColor;
uniform 	float _UseShadowTransition;
uniform 	float _ShadowTransitionRange;
uniform 	float _ShadowTransitionSoftness;
uniform 	mediump vec3 _SpecularColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	float _FaceBlushStrength;
uniform 	mediump vec3 _FaceBlushColor;
uniform 	mediump float _EmissionScaler;
uniform 	mediump vec3 _EmissionColor_MHY;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _UseClipPlane;
uniform 	float _ES_CharacterAmbientLightOn;
uniform 	float _ES_CharacterAmbientBrightness;
uniform 	vec3 _ES_CharacterMainLightColor;
uniform 	vec3 _ES_CharacterAmbientLightColor;
uniform 	float _ES_CharacterMainLightRatio;
uniform 	float _ES_CharacterAmbientLightRatio;
uniform 	float _ES_CharacterColorTone;
uniform 	float _ES_CharacterPointLightWholeIntensity;
uniform 	vec4 mhy_AvatarLightDir;
uniform 	vec4 mhy_CharacterPointLightColor;
uniform 	vec4 mhy_CharacterOverrideLightDir;
uniform 	mediump vec4 _FlowMapColor01;
uniform 	mediump float _FlowScale01;
uniform 	mediump float _FlowMap01_Uspeed;
uniform 	vec4 _FlowMap01_ST;
uniform 	mediump float _FlowMap01_Vspeed;
uniform 	mediump float _Noise_Uspeed;
uniform 	vec4 _Noise_ST;
uniform 	mediump float _Noise_Vspeed;
uniform 	mediump float _NoiseFlowIntensity;
uniform 	mediump float _MaskOffset01;
uniform 	mediump float _NoiseIntensity;
uniform 	mediump float _Mask01_Power;
uniform 	mediump vec4 _FlowMapColor02;
uniform 	mediump float _FlowScale02;
uniform 	mediump float _FlowMap02_Uspeed;
uniform 	vec4 _FlowMap02_ST;
uniform 	mediump float _FlowMap02_Vspeed;
uniform 	mediump float _MaskOffset02;
uniform 	mediump float _Mask02_Power;
uniform 	mediump float _DissolveNoise_Uspeed;
uniform 	vec4 _DissovleNoise_ST;
uniform 	mediump float _DissolveNoise_Vspeed;
uniform 	mediump float _DissovleNoiseScale;
uniform 	mediump float _Dissovle;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _Noise;
uniform lowp sampler2D _FlowMap01;
uniform lowp sampler2D _Mask01;
uniform lowp sampler2D _FlowMap02;
uniform lowp sampler2D _Mask02;
uniform lowp sampler2D _DissovleNoise;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp float vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
lowp float u_xlat10_2;
bvec4 u_xlatb2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
lowp float u_xlat10_3;
int u_xlati3;
bool u_xlatb3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec2 u_xlat16_7;
mediump vec3 u_xlat16_8;
vec3 u_xlat9;
bool u_xlatb10;
vec3 u_xlat12;
mediump vec3 u_xlat16_12;
lowp float u_xlat10_12;
int u_xlati12;
bool u_xlatb12;
vec3 u_xlat13;
mediump vec3 u_xlat16_13;
mediump float u_xlat16_14;
mediump vec2 u_xlat16_15;
mediump vec2 u_xlat16_16;
bvec2 u_xlatb20;
vec2 u_xlat22;
bool u_xlatb22;
mediump vec2 u_xlat16_25;
float u_xlat30;
bool u_xlatb30;
float u_xlat32;
mediump float u_xlat16_32;
lowp float u_xlat10_32;
int u_xlati32;
bool u_xlatb32;
float u_xlat33;
mediump float u_xlat16_34;
mediump float u_xlat16_35;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseClipPlane));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseClipPlane);
#endif
    u_xlat16_1.x = vs_COLOR0.w + -0.00999999978;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(u_xlat16_1.x<0.0);
#else
    u_xlatb10 = u_xlat16_1.x<0.0;
#endif
    u_xlatb0 = u_xlatb0 && u_xlatb10;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(_DitherAlpha<0.949999988);
#else
        u_xlatb0 = _DitherAlpha<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb20.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb20.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb20.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = _DitherAlpha * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + -0.00999999978;
#ifdef UNITY_ADRENO_ES3
            u_xlatb0 = !!(u_xlat0.x<0.0);
#else
            u_xlatb0 = u_xlat0.x<0.0;
#endif
            if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(0.5<mhy_CharacterOverrideLightDir.w);
#else
    u_xlatb2.x = 0.5<mhy_CharacterOverrideLightDir.w;
#endif
    u_xlat3.x = mhy_CharacterOverrideLightDir.x;
    u_xlat3.yz = (-mhy_CharacterOverrideLightDir.yz);
    u_xlat2.xyz = (u_xlatb2.x) ? u_xlat3.xyz : mhy_AvatarLightDir.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat30) + u_xlat2.xyz;
    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
    u_xlat2.xy = dFdx(vs_TEXCOORD0.xy);
    u_xlat22.xy = dFdy(vs_TEXCOORD0.xy);
    u_xlat2.xy = u_xlat22.xy + u_xlat2.xy;
    u_xlat22.xy = (-u_xlat2.xy) * vec2(0.25, 0.25) + vs_TEXCOORD0.xy;
    u_xlat2.xy = u_xlat2.xy * vec2(0.25, 0.25) + vs_TEXCOORD0.xy;
    u_xlat2.xy = (int(gl_SampleID) != 0) ? u_xlat22.xy : u_xlat2.xy;
    u_xlat1 = textureLod(_MainTex, u_xlat2.xy, 0.0);
    u_xlat16_4.xyz = u_xlat1.xyz * _MainTexTintColor.xyz;
    u_xlat16_5.xyz = u_xlat16_4.xyz + u_xlat16_4.xyz;
    u_xlat16_6.xyz = u_xlat1.xyz + _MainTexTintColor.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_6.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(-4.0, -4.0, -4.0) + u_xlat16_6.xyz;
    u_xlatb2 = lessThan(vec4(0.5, 0.5, 0.5, 0.00999999978), u_xlat1);
    u_xlat16_6.x = (u_xlatb2.x) ? float(1.0) : float(0.0);
    u_xlat16_6.y = (u_xlatb2.y) ? float(1.0) : float(0.0);
    u_xlat16_6.z = (u_xlatb2.z) ? float(1.0) : float(0.0);
    u_xlat16_4.xyz = u_xlat16_4.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat16_4.xyz = u_xlat16_6.xyz * u_xlat16_4.xyz + u_xlat16_5.xyz;
    u_xlatb2.xyz = equal(vec4(_MainTexAlphaUse), vec4(3.0, 1.0, 2.0, 0.0)).xyz;
    u_xlat30 = u_xlat1.w * _FaceBlushStrength;
    u_xlat16_3.xyz = (-u_xlat16_4.xyz) + _FaceBlushColor.xyz;
    u_xlat3.xyz = vec3(u_xlat30) * u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat16_4.xyz = (u_xlatb2.x) ? u_xlat3.xyz : u_xlat16_4.xyz;
    u_xlat16_34 = u_xlat1.w + (-_MainTexAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(u_xlat16_34<0.0);
#else
    u_xlatb30 = u_xlat16_34<0.0;
#endif
    u_xlatb30 = u_xlatb2.y && u_xlatb30;
    if((int(u_xlatb30) * int(0xffffffffu))!=0){discard;}
    u_xlat16_4.xyz = u_xlat16_4.xyz * _Color.xyz;
    u_xlatb30 = u_xlatb2.w && u_xlatb2.z;
    u_xlat16_34 = (u_xlatb30) ? u_xlat1.w : 0.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorAO));
#else
    u_xlatb2.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorAO);
#endif
    u_xlat16_5.x = vs_COLOR0.x * 0.5;
    u_xlat16_5.x = (u_xlatb2.x) ? u_xlat16_5.x : 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat16_5.x<0.0500000007);
#else
    u_xlatb12 = u_xlat16_5.x<0.0500000007;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(0.949999988<u_xlat16_5.x);
#else
    u_xlatb22 = 0.949999988<u_xlat16_5.x;
#endif
    u_xlat32 = u_xlat16_5.x + vs_TEXCOORD1.w;
    u_xlat32 = u_xlat32 * 0.5;
    u_xlat16_5.x = (u_xlatb22) ? 1.0 : u_xlat32;
    u_xlat16_5.x = (u_xlatb12) ? 0.0 : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb2.x) ? u_xlat16_5.x : vs_TEXCOORD1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(u_xlat16_5.x<_LightArea);
#else
    u_xlatb2.x = u_xlat16_5.x<_LightArea;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition));
#else
    u_xlatb12 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition);
#endif
    u_xlat16_5.x = (-u_xlat16_5.x) + _LightArea;
    u_xlat16_5.x = u_xlat16_5.x / _ShadowTransitionRange;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(u_xlat16_5.x>=1.0);
#else
    u_xlatb22 = u_xlat16_5.x>=1.0;
#endif
    u_xlat16_32 = u_xlat16_5.x + 0.00999999978;
    u_xlat16_32 = log2(u_xlat16_32);
    u_xlat32 = u_xlat16_32 * _ShadowTransitionSoftness;
    u_xlat32 = exp2(u_xlat32);
    u_xlat32 = min(u_xlat32, 1.0);
    u_xlat22.x = (u_xlatb22) ? 1.0 : u_xlat32;
    u_xlat22.x = (u_xlatb12) ? u_xlat22.x : 1.0;
    u_xlat22.x = u_xlatb2.x ? u_xlat22.x : float(0.0);
#ifdef UNITY_ADRENO_ES3
    { bool cond = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(vs_TEXCOORD4); u_xlati32 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati32 = int((vec4(0.0, 0.0, 0.0, 0.0)!=vec4(vs_TEXCOORD4)) ? 0xFFFFFFFFu : uint(0u));
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex));
#else
    u_xlatb3 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex);
#endif
    u_xlat16_13.xyz = vec3(_FirstShadowMultColor.xxyz.y + (-_CoolShadowMultColor.x), _FirstShadowMultColor.xxyz.z + (-_CoolShadowMultColor.y), float(_FirstShadowMultColor.z) + (-_CoolShadowMultColor.z));
    u_xlat13.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_13.xyz + _CoolShadowMultColor.xyz;
    u_xlat16_5.xyz = (bool(u_xlatb3)) ? u_xlat13.xyz : vec3(_FirstShadowMultColor.x, _FirstShadowMultColor.y, _FirstShadowMultColor.z);
    u_xlati3 = ~u_xlati32;
    u_xlati12 = u_xlatb12 ? u_xlati3 : int(0);
    u_xlat16_3.xyz = u_xlat16_5.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat3.xyz = u_xlat22.xxx * u_xlat16_3.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_5.xyz = (int(u_xlati12) != 0) ? u_xlat3.xyz : u_xlat16_5.xyz;
    u_xlat16_5.xyz = (int(u_xlati32) != 0) ? u_xlat16_5.xyz : vec3(1.0, 1.0, 1.0);
    u_xlat16_35 = dot(vs_TEXCOORD1.xyz, u_xlat0.xyz);
    u_xlat16_35 = max(u_xlat16_35, 0.00100000005);
    u_xlat16_35 = log2(u_xlat16_35);
    u_xlat16_35 = u_xlat16_35 * _Shininess;
    u_xlat16_35 = exp2(u_xlat16_35);
    u_xlat16_6.xyz = vec3(u_xlat16_35) * _SpecularColor.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(_SpecMulti);
    u_xlat16_4.xyz = vec3(u_xlat16_4.x * _EmissionColor_MHY.xxyz.y, u_xlat16_4.y * _EmissionColor_MHY.xxyz.z, u_xlat16_4.z * float(_EmissionColor_MHY.z));
    u_xlati0 = int(uint(u_xlatb2.x) * 0xffffffffu | uint(u_xlati32));
    u_xlat2.xyz = u_xlat1.xyz * u_xlat16_5.xyz;
    u_xlat0.xyz = (int(u_xlati0) != 0) ? u_xlat2.xyz : u_xlat1.xyz;
    u_xlat0.xyz = u_xlat16_6.xyz * vec3(0.5, 0.5, 0.5) + u_xlat0.xyz;
    u_xlat2.xy = vs_TEXCOORD0.zw * _FlowMap01_ST.xy + _FlowMap01_ST.zw;
    u_xlat16_5.x = _Time.y * _FlowMap01_Uspeed + u_xlat2.x;
    u_xlat16_5.y = _Time.y * _FlowMap01_Vspeed + u_xlat2.y;
    u_xlat2.xy = vs_TEXCOORD0.zw * _Noise_ST.xy + _Noise_ST.zw;
    u_xlat16_6.x = _Time.y * _Noise_Uspeed + u_xlat2.x;
    u_xlat16_6.y = _Time.y * _Noise_Vspeed + u_xlat2.y;
    u_xlat10_2 = textureLod(_Noise, u_xlat16_6.xy, 0.0).x;
    u_xlat16_25.x = _MaskOffset01 * 1.39999998 + -0.699999988;
    u_xlat16_16.x = u_xlat10_2 * _NoiseIntensity;
    u_xlat12.xy = vs_TEXCOORD0.zw * _FlowMap02_ST.xy + _FlowMap02_ST.zw;
    u_xlat16_7.x = _Time.y * _FlowMap02_Uspeed + u_xlat12.x;
    u_xlat16_7.y = _Time.y * _FlowMap02_Vspeed + u_xlat12.y;
    u_xlat16_25.y = _MaskOffset02 * 1.39999998 + -0.699999988;
    u_xlat16_8.xyz = _FlowMapColor01.xyz * vec3(_FlowScale01);
    u_xlat16_5.xy = vec2(u_xlat10_2) * vec2(vec2(_NoiseFlowIntensity, _NoiseFlowIntensity)) + u_xlat16_5.xy;
    u_xlat10_12 = textureLod(_FlowMap01, u_xlat16_5.xy, 0.0).x;
    u_xlat16_12.xyz = vec3(u_xlat10_12) * u_xlat16_8.xyz;
    u_xlat16_5.x = (-vs_TEXCOORD0.z) + 1.0;
    u_xlat16_1.xz = u_xlat16_25.xy + u_xlat16_5.xx;
    u_xlat16_1.yw = vec2(u_xlat10_2) * vec2(vec2(_NoiseIntensity, _NoiseIntensity)) + (-vs_TEXCOORD0.ww);
    u_xlat16_16.y = 1.0;
    u_xlat16_15.xy = u_xlat16_1.xy + u_xlat16_16.xy;
    u_xlat10_3 = textureLod(_Mask01, u_xlat16_15.xy, 0.0).x;
    u_xlat16_3.x = max(u_xlat10_3, 9.99999975e-05);
    u_xlat16_3.x = log2(u_xlat16_3.x);
    u_xlat16_3.x = u_xlat16_3.x * _Mask01_Power;
    u_xlat16_3.x = exp2(u_xlat16_3.x);
    u_xlat16_8.xyz = _FlowMapColor02.xyz * vec3(_FlowScale02);
    u_xlat16_15.xy = vec2(u_xlat10_2) * vec2(vec2(_NoiseFlowIntensity, _NoiseFlowIntensity)) + u_xlat16_7.xy;
    u_xlat10_2 = textureLod(_FlowMap02, u_xlat16_15.xy, 0.0).x;
    u_xlat16_13.xyz = vec3(u_xlat10_2) * u_xlat16_8.xyz;
    u_xlat16_5.xy = vec2(u_xlat16_1.z + u_xlat16_16.x, u_xlat16_1.w + u_xlat16_16.y);
    u_xlat10_2 = textureLod(_Mask02, u_xlat16_5.xy, 0.0).x;
    u_xlat16_2.x = max(u_xlat10_2, 9.99999975e-05);
    u_xlat16_2.x = log2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * _Mask02_Power;
    u_xlat16_2.x = exp2(u_xlat16_2.x);
    u_xlat16_13.xyz = u_xlat16_2.xxx * u_xlat16_13.xyz;
    u_xlat16_2.xyz = u_xlat16_12.xyz * u_xlat16_3.xxx + u_xlat16_13.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(_EmissionScaler) + u_xlat16_2.xyz;
    u_xlat3.xyz = (-u_xlat0.xyz) + u_xlat16_4.xyz;
    u_xlat3.xyz = vec3(u_xlat16_34) * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat9.xy = vs_TEXCOORD0.zw * _DissovleNoise_ST.xy + _DissovleNoise_ST.zw;
    u_xlat16_4.x = _Time.y * _DissolveNoise_Uspeed + u_xlat9.x;
    u_xlat16_4.y = _Time.y * _DissolveNoise_Vspeed + u_xlat9.y;
    u_xlat10_32 = textureLod(_DissovleNoise, u_xlat16_4.xy, 0.0).x;
    u_xlat32 = u_xlat10_32 * _DissovleNoiseScale + vs_TEXCOORD0.z;
#ifdef UNITY_ADRENO_ES3
    u_xlatb32 = !!(_Dissovle>=u_xlat32);
#else
    u_xlatb32 = _Dissovle>=u_xlat32;
#endif
    u_xlat0.xyz = (bool(u_xlatb30)) ? u_xlat3.xyz : u_xlat0.xyz;
    u_xlat0.xyz = u_xlat16_2.xyz + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(0.00999999978<u_xlat16_34);
#else
    u_xlatb30 = 0.00999999978<u_xlat16_34;
#endif
    if((int(u_xlatb32) * int(0xffffffffu))==0){discard;}
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn));
#else
    u_xlatb2.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn);
#endif
    u_xlat12.xyz = u_xlat0.xyz * vec3(vec3(_ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness));
    u_xlat3.xyz = vec3(vec3(_ES_CharacterPointLightWholeIntensity, _ES_CharacterPointLightWholeIntensity, _ES_CharacterPointLightWholeIntensity)) * mhy_CharacterPointLightColor.xyz;
    u_xlat9.xyz = _ES_CharacterMainLightColor.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat9.xyz = min(max(u_xlat9.xyz, 0.0), 1.0);
#else
    u_xlat9.xyz = clamp(u_xlat9.xyz, 0.0, 1.0);
#endif
    u_xlat33 = (-mhy_CharacterPointLightColor.w) + 1.0;
    u_xlat3.xyz = u_xlat9.xyz * vec3(u_xlat33) + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat3.xyz = vec3(vec3(_ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio)) * u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat12.xyz = u_xlat12.xyz * u_xlat3.xyz;
    u_xlat3.xyz = _ES_CharacterAmbientLightColor.xyz * vec3(_ES_CharacterAmbientLightRatio);
    u_xlat16_4.xyz = u_xlat12.xyz * vec3(10.0, 10.0, 10.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.xyz = min(max(u_xlat16_4.xyz, 0.0), 1.0);
#else
    u_xlat16_4.xyz = clamp(u_xlat16_4.xyz, 0.0, 1.0);
#endif
    u_xlat12.xyz = u_xlat3.xyz * u_xlat16_4.xyz + u_xlat12.xyz;
    u_xlat16_4.xyz = (u_xlatb2.x) ? u_xlat12.xyz : u_xlat0.xyz;
    u_xlat16_5.xyz = u_xlat0.xyz + (-u_xlat16_4.xyz);
    u_xlat16_5.xyz = vec3(u_xlat16_34) * u_xlat16_5.xyz + u_xlat16_4.xyz;
    u_xlat16_0.xyz = (bool(u_xlatb30)) ? u_xlat16_5.xyz : u_xlat16_4.xyz;
    u_xlat16_4.x = max(u_xlat16_0.z, u_xlat16_0.y);
    u_xlat16_1.w = max(u_xlat16_0.x, u_xlat16_4.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(1.0<u_xlat16_1.w);
#else
    u_xlatb2.x = 1.0<u_xlat16_1.w;
#endif
    u_xlat16_1.xyz = u_xlat16_0.xyz / u_xlat16_1.www;
    u_xlat16_0.w = 1.0;
    u_xlat16_0 = (u_xlatb2.x) ? u_xlat16_1 : u_xlat16_0;
    u_xlat16_4.x = min(u_xlat16_0.w, 1.10000002);
    u_xlat16_14 = u_xlat16_0.w + (-u_xlat16_4.x);
    u_xlat16_4.x = u_xlat16_34 * u_xlat16_14 + u_xlat16_4.x;
    u_xlat16_2.x = u_xlat16_4.x * 0.0500000007;
    SV_Target0.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb12 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_4.x = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb12) ? u_xlat16_4.x : 0.0;
    SV_Target0.w = 0.0156862754;
    SV_Target1.xyz = u_xlat16_0.xyz;
    SV_Target1.w = u_xlat16_2.x;
    SV_Target2.xy = vec2(0.0, 0.0);
    SV_Target2.w = vs_TEXCOORD4;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "MSAA_INTERPOLATION" "TOON_SPECULAR_ON" "TOON_LIGHTMAP_ON" "MAIN_TEX_COLORING_ON" "FACE_MAP_NEW_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	vec4 _MainTex_ST;
uniform 	float _FaceMapRotateOffset;
uniform 	float _CharacterAmbientSensorShadowOn;
uniform 	vec4 _AmbientSensorUVs;
uniform 	float _UseClipPlane;
uniform 	float _ClipPlaneWorld;
uniform 	vec4 _ClipPlane;
uniform 	vec4 mhy_AvatarLightDir;
uniform 	vec4 mhy_CharacterOverrideLightDir;
uniform lowp sampler2D _CharacterAmbientSensorTex;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp float vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD6;
vec3 u_xlat0;
bool u_xlatb0;
vec3 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
bool u_xlatb3;
vec4 u_xlat4;
vec4 u_xlat5;
mediump vec2 u_xlat16_6;
float u_xlat7;
bool u_xlatb7;
vec3 u_xlat8;
bvec2 u_xlatb8;
bool u_xlatb9;
mediump float u_xlat16_13;
float u_xlat14;
bool u_xlatb14;
float u_xlat15;
float u_xlat21;
float u_xlat22;
bool u_xlatb22;
float u_xlat23;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.5<mhy_CharacterOverrideLightDir.w);
#else
    u_xlatb0 = 0.5<mhy_CharacterOverrideLightDir.w;
#endif
    u_xlat1.x = mhy_CharacterOverrideLightDir.x;
    u_xlat1.yz = (-mhy_CharacterOverrideLightDir.yz);
    u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat1.xyz : mhy_AvatarLightDir.xyz;
    u_xlat21 = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_ObjectToWorld[1].xyz);
    u_xlat1.x = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_ObjectToWorld[2].xyz);
    u_xlatb8.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseClipPlane, _ClipPlaneWorld, _UseClipPlane, _UseClipPlane)).xy;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(abs(_ClipPlane.w)<0.00100000005);
#else
    u_xlatb22 = abs(_ClipPlane.w)<0.00100000005;
#endif
    u_xlat2.xyz = _ClipPlane.www * _ClipPlane.xyz;
    u_xlat2.xyz = (bool(u_xlatb22)) ? vec3(0.0, 0.0, 0.0) : u_xlat2.xyz;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_WorldToObject[1];
    u_xlat3 = hlslcc_mtx4x4unity_WorldToObject[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat2 = hlslcc_mtx4x4unity_WorldToObject[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat2 = u_xlat2 + hlslcc_mtx4x4unity_WorldToObject[3];
    u_xlat2.xyz = u_xlat2.xyz / u_xlat2.www;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * _ClipPlane.yyy;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _ClipPlane.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _ClipPlane.zzz + u_xlat3.xyz;
    u_xlat22 = dot(u_xlat2.xyz, u_xlat3.xyz);
    u_xlat2.x = dot(in_POSITION0.xyz, u_xlat3.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(u_xlat2.x<u_xlat22);
#else
    u_xlatb9 = u_xlat2.x<u_xlat22;
#endif
    u_xlat22 = (-u_xlat22) + u_xlat2.x;
    u_xlat3.xyz = (-vec3(u_xlat22)) * u_xlat3.xyz + in_POSITION0.xyz;
    u_xlat3.w = 0.0;
    u_xlat4.xyz = in_POSITION0.xyz;
    u_xlat4.w = in_COLOR0.w;
    u_xlat2 = (bool(u_xlatb9)) ? u_xlat3 : u_xlat4;
    u_xlat22 = dot(in_POSITION0.xyz, _ClipPlane.xyz);
    u_xlat3.x = _ClipPlane.w + -0.00999999978;
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(u_xlat22<u_xlat3.x);
#else
    u_xlatb3 = u_xlat22<u_xlat3.x;
#endif
    u_xlat22 = u_xlat22 + (-_ClipPlane.w);
    u_xlat5.xyz = (-vec3(u_xlat22)) * _ClipPlane.xyz + in_POSITION0.xyz;
    u_xlat5.w = 0.0;
    u_xlat3 = (bool(u_xlatb3)) ? u_xlat5 : u_xlat4;
    u_xlat2.xyz = (u_xlatb8.y) ? u_xlat2.xyz : u_xlat3.xyz;
    u_xlat16_6.x = (u_xlatb8.y) ? u_xlat2.w : u_xlat3.w;
    u_xlat2.xyz = (u_xlatb8.x) ? u_xlat2.xyz : in_POSITION0.xyz;
    vs_COLOR0.w = (u_xlatb8.x) ? u_xlat16_6.x : in_COLOR0.w;
    u_xlat3.xyw = (-_WorldSpaceCameraPos.xyz) + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat4.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;
    u_xlat4.y = hlslcc_mtx4x4unity_ObjectToWorld[1].x;
    u_xlat4.z = hlslcc_mtx4x4unity_ObjectToWorld[2].x;
    u_xlat4.w = u_xlat3.x;
    u_xlat2.w = 1.0;
    u_xlat8.x = dot(u_xlat4, u_xlat2);
    u_xlat4.x = hlslcc_mtx4x4unity_ObjectToWorld[0].y;
    u_xlat4.y = hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat4.z = hlslcc_mtx4x4unity_ObjectToWorld[2].y;
    u_xlat4.w = u_xlat3.y;
    u_xlat15 = dot(u_xlat4, u_xlat2);
    u_xlat3.x = hlslcc_mtx4x4unity_ObjectToWorld[0].z;
    u_xlat3.y = hlslcc_mtx4x4unity_ObjectToWorld[1].z;
    u_xlat3.z = hlslcc_mtx4x4unity_ObjectToWorld[2].z;
    u_xlat22 = dot(u_xlat3, u_xlat2);
    u_xlat3.x = hlslcc_mtx4x4unity_ObjectToWorld[0].w;
    u_xlat3.y = hlslcc_mtx4x4unity_ObjectToWorld[1].w;
    u_xlat3.z = hlslcc_mtx4x4unity_ObjectToWorld[2].w;
    u_xlat3.w = hlslcc_mtx4x4unity_ObjectToWorld[3].w;
    u_xlat23 = dot(u_xlat3, u_xlat2);
    u_xlat3 = vec4(u_xlat15) * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat8.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVPZero[2] * vec4(u_xlat22) + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVPZero[3] * vec4(u_xlat23) + u_xlat3;
    u_xlat4 = u_xlat2.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat4 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat2.xxxx + u_xlat4;
    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat2.zzzz + u_xlat4;
    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat2;
    vs_TEXCOORD3.xyz = u_xlat2.xyz / u_xlat2.www;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat2.xz = u_xlat3.xw * vec2(0.5, 0.5);
    u_xlat8.x = u_xlat3.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat8.x * 0.5;
    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat8.xyz = in_NORMAL0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat8.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_NORMAL0.xxx + u_xlat8.xyz;
    u_xlat8.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_NORMAL0.zzz + u_xlat8.xyz;
    u_xlat2.x = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat8.xyz = u_xlat8.xyz * u_xlat2.xxx;
    u_xlat16_6.x = dot(u_xlat8.xyz, u_xlat0.xyz);
    vs_TEXCOORD1.w = u_xlat16_6.x * 0.497500002 + 0.5;
    u_xlat16_6.x = min(abs(u_xlat21), abs(u_xlat1.x));
    u_xlat16_13 = max(abs(u_xlat21), abs(u_xlat1.x));
    u_xlat16_13 = float(1.0) / u_xlat16_13;
    u_xlat16_6.x = u_xlat16_13 * u_xlat16_6.x;
    u_xlat16_13 = u_xlat16_6.x * u_xlat16_6.x;
    u_xlat0.x = u_xlat16_13 * 0.0208350997 + -0.0851330012;
    u_xlat0.x = u_xlat16_13 * u_xlat0.x + 0.180141002;
    u_xlat0.x = u_xlat16_13 * u_xlat0.x + -0.330299497;
    u_xlat0.x = u_xlat16_13 * u_xlat0.x + 0.999866009;
    u_xlat7 = u_xlat0.x * u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(abs(u_xlat21)<abs(u_xlat1.x));
#else
    u_xlatb14 = abs(u_xlat21)<abs(u_xlat1.x);
#endif
    u_xlat7 = u_xlat7 * -2.0 + 1.57079637;
    u_xlat7 = u_xlatb14 ? u_xlat7 : float(0.0);
    u_xlat0.x = u_xlat16_6.x * u_xlat0.x + u_xlat7;
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(u_xlat21<(-u_xlat21));
#else
    u_xlatb7 = u_xlat21<(-u_xlat21);
#endif
    u_xlat7 = u_xlatb7 ? -3.14159274 : float(0.0);
    u_xlat0.x = u_xlat7 + u_xlat0.x;
    u_xlat16_6.x = min(u_xlat21, u_xlat1.x);
    u_xlat16_13 = max(u_xlat21, u_xlat1.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(u_xlat16_6.x<(-u_xlat16_6.x));
#else
    u_xlatb7 = u_xlat16_6.x<(-u_xlat16_6.x);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(u_xlat16_13>=(-u_xlat16_13));
#else
    u_xlatb14 = u_xlat16_13>=(-u_xlat16_13);
#endif
    u_xlatb7 = u_xlatb14 && u_xlatb7;
    u_xlat0.x = (u_xlatb7) ? (-u_xlat0.x) : u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(0.0<(-u_xlat0.x));
#else
    u_xlatb7 = 0.0<(-u_xlat0.x);
#endif
    u_xlat16_6.x = u_xlat0.x * -0.318309903;
    u_xlat0.x = max(_FaceMapRotateOffset, 0.0);
    u_xlat14 = _FaceMapRotateOffset + 1.0;
    u_xlat14 = min(u_xlat14, 1.0);
    u_xlat14 = (-u_xlat0.x) + u_xlat14;
    u_xlat0.x = (-u_xlat0.x) + abs(u_xlat16_6.x);
    u_xlat14 = float(1.0) / u_xlat14;
    u_xlat0.x = u_xlat14 * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat14 = u_xlat0.x * -2.0 + 3.0;
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * u_xlat14;
    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);
    u_xlat0.x = min(u_xlat0.x, 0.999899983);
    u_xlat16_6.xy = in_TEXCOORD0.xy * vec2(-1.0, 1.0) + vec2(1.0, 0.0);
    vs_TEXCOORD6.xy = (bool(u_xlatb7)) ? u_xlat16_6.xy : in_TEXCOORD0.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_CharacterAmbientSensorShadowOn));
#else
    u_xlatb7 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_CharacterAmbientSensorShadowOn);
#endif
    if(u_xlatb7){
        u_xlat7 = textureLod(_CharacterAmbientSensorTex, _AmbientSensorUVs.xy, 0.0).x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb7 = !!(0.5<u_xlat7);
#else
        u_xlatb7 = 0.5<u_xlat7;
#endif
        vs_TEXCOORD4 = u_xlatb7 ? 1.0 : float(0.0);
    } else {
        vs_TEXCOORD4 = 0.0;
    //ENDIF
    }
    gl_Position = u_xlat3;
    vs_COLOR0.xyz = in_COLOR0.xyz;
    vs_TEXCOORD1.xyz = u_xlat8.xyz;
    vs_TEXCOORD2.zw = u_xlat3.zw;
    vs_TEXCOORD6.z = u_xlat0.x;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	mediump vec4 _Color;
uniform 	float _MainTexAlphaUse;
uniform 	mediump float _MainTexAlphaCutoff;
uniform 	mediump vec4 _MainTexTintColor;
uniform 	float _UseLightMapColorAO;
uniform 	float _UseVertexColorAO;
uniform 	mediump float _LightArea;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	float _UseCoolShadowColorOrTex;
uniform 	mediump vec3 _CoolShadowMultColor;
uniform 	float _UseShadowTransition;
uniform 	float _ShadowTransitionRange;
uniform 	float _ShadowTransitionSoftness;
uniform 	mediump vec3 _SpecularColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	float _FaceBlushStrength;
uniform 	mediump vec3 _FaceBlushColor;
uniform 	float _FaceMapSoftness;
uniform 	mediump float _EmissionScaler;
uniform 	mediump vec3 _EmissionColor_MHY;
uniform 	float _UseMaterial2;
uniform 	mediump vec3 _Color2;
uniform 	mediump vec3 _FirstShadowMultColor2;
uniform 	mediump vec3 _CoolShadowMultColor2;
uniform 	mediump float _Shininess2;
uniform 	mediump float _SpecMulti2;
uniform 	float _ShadowTransitionRange2;
uniform 	float _ShadowTransitionSoftness2;
uniform 	float _UseMaterial3;
uniform 	mediump vec3 _Color3;
uniform 	mediump vec3 _FirstShadowMultColor3;
uniform 	mediump vec3 _CoolShadowMultColor3;
uniform 	mediump float _Shininess3;
uniform 	mediump float _SpecMulti3;
uniform 	float _ShadowTransitionRange3;
uniform 	float _ShadowTransitionSoftness3;
uniform 	float _UseMaterial4;
uniform 	mediump vec3 _Color4;
uniform 	mediump vec3 _FirstShadowMultColor4;
uniform 	mediump vec3 _CoolShadowMultColor4;
uniform 	mediump float _Shininess4;
uniform 	mediump float _SpecMulti4;
uniform 	float _ShadowTransitionRange4;
uniform 	float _ShadowTransitionSoftness4;
uniform 	float _UseMaterial5;
uniform 	mediump vec3 _Color5;
uniform 	mediump vec3 _FirstShadowMultColor5;
uniform 	mediump vec3 _CoolShadowMultColor5;
uniform 	mediump float _Shininess5;
uniform 	mediump float _SpecMulti5;
uniform 	float _ShadowTransitionRange5;
uniform 	float _ShadowTransitionSoftness5;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _UseClipPlane;
uniform 	float _ES_CharacterAmbientLightOn;
uniform 	float _ES_CharacterAmbientBrightness;
uniform 	vec3 _ES_CharacterMainLightColor;
uniform 	vec3 _ES_CharacterAmbientLightColor;
uniform 	float _ES_CharacterMainLightRatio;
uniform 	float _ES_CharacterAmbientLightRatio;
uniform 	float _ES_CharacterColorTone;
uniform 	float _ES_CharacterPointLightWholeIntensity;
uniform 	vec4 mhy_AvatarLightDir;
uniform 	vec4 mhy_CharacterPointLightColor;
uniform 	vec4 mhy_CharacterOverrideLightDir;
uniform 	mediump vec4 _FlowMapColor01;
uniform 	mediump float _FlowScale01;
uniform 	mediump float _FlowMap01_Uspeed;
uniform 	vec4 _FlowMap01_ST;
uniform 	mediump float _FlowMap01_Vspeed;
uniform 	mediump float _Noise_Uspeed;
uniform 	vec4 _Noise_ST;
uniform 	mediump float _Noise_Vspeed;
uniform 	mediump float _NoiseFlowIntensity;
uniform 	mediump float _MaskOffset01;
uniform 	mediump float _NoiseIntensity;
uniform 	mediump float _Mask01_Power;
uniform 	mediump vec4 _FlowMapColor02;
uniform 	mediump float _FlowScale02;
uniform 	mediump float _FlowMap02_Uspeed;
uniform 	vec4 _FlowMap02_ST;
uniform 	mediump float _FlowMap02_Vspeed;
uniform 	mediump float _MaskOffset02;
uniform 	mediump float _Mask02_Power;
uniform 	mediump float _DissolveNoise_Uspeed;
uniform 	vec4 _DissovleNoise_ST;
uniform 	mediump float _DissolveNoise_Vspeed;
uniform 	mediump float _DissovleNoiseScale;
uniform 	mediump float _Dissovle;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _FaceMapTex;
uniform lowp sampler2D _Noise;
uniform lowp sampler2D _FlowMap01;
uniform lowp sampler2D _Mask01;
uniform lowp sampler2D _FlowMap02;
uniform lowp sampler2D _Mask02;
uniform lowp sampler2D _DissovleNoise;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp float vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
vec3 u_xlat2;
mediump vec4 u_xlat16_2;
lowp vec4 u_xlat10_2;
bool u_xlatb2;
vec3 u_xlat3;
mediump float u_xlat16_3;
lowp float u_xlat10_3;
bvec4 u_xlatb3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
bvec4 u_xlatb5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
mediump vec3 u_xlat16_7;
int u_xlati7;
bvec3 u_xlatb7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
vec3 u_xlat11;
bool u_xlatb11;
vec3 u_xlat13;
bool u_xlatb13;
float u_xlat14;
mediump vec3 u_xlat16_14;
bool u_xlatb14;
mediump float u_xlat16_15;
mediump vec3 u_xlat16_17;
mediump vec3 u_xlat16_19;
bvec2 u_xlatb22;
vec2 u_xlat24;
mediump float u_xlat16_25;
int u_xlati25;
mediump float u_xlat16_30;
float u_xlat33;
mediump float u_xlat16_33;
lowp float u_xlat10_33;
bool u_xlatb33;
mediump float u_xlat16_35;
lowp float u_xlat10_35;
float u_xlat36;
int u_xlati36;
bool u_xlatb36;
mediump float u_xlat16_37;
mediump float u_xlat16_39;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseClipPlane));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseClipPlane);
#endif
    u_xlat16_1.x = vs_COLOR0.w + -0.00999999978;
#ifdef UNITY_ADRENO_ES3
    u_xlatb11 = !!(u_xlat16_1.x<0.0);
#else
    u_xlatb11 = u_xlat16_1.x<0.0;
#endif
    u_xlatb0 = u_xlatb0 && u_xlatb11;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(_DitherAlpha<0.949999988);
#else
        u_xlatb0 = _DitherAlpha<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb22.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb22.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb22.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = _DitherAlpha * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + -0.00999999978;
#ifdef UNITY_ADRENO_ES3
            u_xlatb0 = !!(u_xlat0.x<0.0);
#else
            u_xlatb0 = u_xlat0.x<0.0;
#endif
            if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(0.5<mhy_CharacterOverrideLightDir.w);
#else
    u_xlatb2 = 0.5<mhy_CharacterOverrideLightDir.w;
#endif
    u_xlat3.x = mhy_CharacterOverrideLightDir.x;
    u_xlat3.yz = (-mhy_CharacterOverrideLightDir.yz);
    u_xlat2.xyz = (bool(u_xlatb2)) ? u_xlat3.xyz : mhy_AvatarLightDir.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat33) + u_xlat2.xyz;
    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat0.xyz = vec3(u_xlat33) * u_xlat0.xyz;
    u_xlat2.xy = dFdx(vs_TEXCOORD0.xy);
    u_xlat24.xy = dFdy(vs_TEXCOORD0.xy);
    u_xlat2.xy = u_xlat24.xy + u_xlat2.xy;
    u_xlat24.xy = (-u_xlat2.xy) * vec2(0.25, 0.25) + vs_TEXCOORD0.xy;
    u_xlat2.xy = u_xlat2.xy * vec2(0.25, 0.25) + vs_TEXCOORD0.xy;
    u_xlat2.xy = (int(gl_SampleID) != 0) ? u_xlat24.xy : u_xlat2.xy;
    u_xlat1 = textureLod(_MainTex, u_xlat2.xy, 0.0);
    u_xlat16_4.xyz = u_xlat1.xyz * _MainTexTintColor.xyz;
    u_xlat16_5.xyz = u_xlat16_4.xyz + u_xlat16_4.xyz;
    u_xlat16_6.xyz = u_xlat1.xyz + _MainTexTintColor.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_6.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(-4.0, -4.0, -4.0) + u_xlat16_6.xyz;
    u_xlatb3 = lessThan(vec4(0.5, 0.5, 0.5, 0.00999999978), u_xlat1);
    u_xlat16_6.x = (u_xlatb3.x) ? float(1.0) : float(0.0);
    u_xlat16_6.y = (u_xlatb3.y) ? float(1.0) : float(0.0);
    u_xlat16_6.z = (u_xlatb3.z) ? float(1.0) : float(0.0);
    u_xlat16_4.xyz = u_xlat16_4.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat16_4.xyz = u_xlat16_6.xyz * u_xlat16_4.xyz + u_xlat16_5.xyz;
    u_xlatb3.xyz = equal(vec4(_MainTexAlphaUse), vec4(3.0, 1.0, 2.0, 0.0)).xyz;
    u_xlat33 = u_xlat1.w * _FaceBlushStrength;
    u_xlat16_7.xyz = (-u_xlat16_4.xyz) + _FaceBlushColor.xyz;
    u_xlat7.xyz = vec3(u_xlat33) * u_xlat16_7.xyz + u_xlat16_4.xyz;
    u_xlat16_4.xyz = (u_xlatb3.x) ? u_xlat7.xyz : u_xlat16_4.xyz;
    u_xlat16_37 = u_xlat1.w + (-_MainTexAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(u_xlat16_37<0.0);
#else
    u_xlatb33 = u_xlat16_37<0.0;
#endif
    u_xlatb33 = u_xlatb3.y && u_xlatb33;
    if((int(u_xlatb33) * int(0xffffffffu))!=0){discard;}
    u_xlat10_2 = textureLod(_LightMapTex, u_xlat2.xy, 0.0);
    u_xlatb3.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseLightMapColorAO, _UseVertexColorAO, _UseLightMapColorAO, _UseLightMapColorAO)).xy;
    u_xlat16_37 = (u_xlatb3.x) ? u_xlat10_2.y : 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseMaterial2));
#else
    u_xlatb33 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseMaterial2);
#endif
    u_xlatb5 = greaterThanEqual(u_xlat10_2.wwww, vec4(0.800000012, 0.400000006, 0.200000003, 0.600000024));
    u_xlatb33 = u_xlatb33 && u_xlatb5.x;
    u_xlat33 = (u_xlatb33) ? 2.0 : 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb13 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseMaterial3));
#else
    u_xlatb13 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseMaterial3);
#endif
    u_xlatb13 = u_xlatb5.y && u_xlatb13;
    u_xlatb7.xyz = lessThan(u_xlat10_2.wwww, vec4(0.600000024, 0.400000006, 0.800000012, 0.0)).xyz;
    u_xlatb13 = u_xlatb13 && u_xlatb7.x;
    u_xlat33 = (u_xlatb13) ? 3.0 : u_xlat33;
#ifdef UNITY_ADRENO_ES3
    u_xlatb13 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseMaterial4));
#else
    u_xlatb13 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseMaterial4);
#endif
    u_xlatb13 = u_xlatb5.z && u_xlatb13;
    u_xlatb13 = u_xlatb7.y && u_xlatb13;
    u_xlat33 = (u_xlatb13) ? 4.0 : u_xlat33;
#ifdef UNITY_ADRENO_ES3
    u_xlatb13 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseMaterial5));
#else
    u_xlatb13 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseMaterial5);
#endif
    u_xlatb13 = u_xlatb5.w && u_xlatb13;
    u_xlatb13 = u_xlatb7.z && u_xlatb13;
    u_xlat33 = (u_xlatb13) ? 5.0 : u_xlat33;
    u_xlatb5 = equal(vec4(u_xlat33), vec4(2.0, 3.0, 4.0, 5.0));
    u_xlat16_6.xyz = (u_xlatb5.x) ? _Color2.xyz : _Color.xyz;
    u_xlat16_6.xyz = (u_xlatb5.y) ? _Color3.xyz : u_xlat16_6.xyz;
    u_xlat16_6.xyz = (u_xlatb5.z) ? _Color4.xyz : u_xlat16_6.xyz;
    u_xlat16_6.xyz = (u_xlatb5.w) ? _Color5.xyz : u_xlat16_6.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_6.xyz;
    u_xlatb13 = u_xlatb3.w && u_xlatb3.z;
    u_xlat16_6.x = (u_xlatb13) ? u_xlat1.w : 0.0;
    u_xlat10_35 = texture(_FaceMapTex, vs_TEXCOORD6.xy, -1.0).w;
    u_xlat3.x = max(_FaceMapSoftness, 9.99999997e-07);
    u_xlat16_17.x = (-u_xlat3.x) + vs_TEXCOORD6.z;
    u_xlat16_25 = max(u_xlat16_17.x, 9.99999975e-05);
    u_xlat16_25 = min(u_xlat16_25, 0.998899996);
    u_xlat16_17.x = u_xlat3.x + vs_TEXCOORD6.z;
    u_xlat16_3 = min(u_xlat16_17.x, 0.999899983);
    u_xlat16_3 = (-u_xlat16_25) + u_xlat16_3;
    u_xlat16_35 = u_xlat10_35 + (-u_xlat16_25);
    u_xlat16_3 = float(1.0) / u_xlat16_3;
    u_xlat16_35 = u_xlat16_35 * u_xlat16_3;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_35 = min(max(u_xlat16_35, 0.0), 1.0);
#else
    u_xlat16_35 = clamp(u_xlat16_35, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat16_35 * -2.0 + 3.0;
    u_xlat16_35 = u_xlat16_35 * u_xlat16_35;
    u_xlat16_25 = u_xlat16_35 * u_xlat16_3;
    u_xlat16_17.x = u_xlat16_37 * vs_COLOR0.x;
    u_xlat16_37 = (u_xlatb3.y) ? u_xlat16_17.x : u_xlat16_37;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(u_xlat16_37<0.0500000007);
#else
    u_xlatb14 = u_xlat16_37<0.0500000007;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb36 = !!(0.949999988<u_xlat16_37);
#else
    u_xlatb36 = 0.949999988<u_xlat16_37;
#endif
    u_xlat7.x = u_xlat16_37 + vs_TEXCOORD1.w;
    u_xlat7.x = u_xlat7.x * 0.5;
    u_xlat16_37 = (u_xlatb36) ? 1.0 : u_xlat7.x;
    u_xlat16_37 = (u_xlatb14) ? 0.0 : u_xlat16_37;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(u_xlat16_37<_LightArea);
#else
    u_xlatb14 = u_xlat16_37<_LightArea;
#endif
    if(u_xlatb14){
#ifdef UNITY_ADRENO_ES3
        u_xlatb14 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition));
#else
        u_xlatb14 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition);
#endif
#ifdef UNITY_ADRENO_ES3
        u_xlatb36 = !!(u_xlat33==1.0);
#else
        u_xlatb36 = u_xlat33==1.0;
#endif
        u_xlat16_8.x = (u_xlatb36) ? _ShadowTransitionRange : 0.0;
        u_xlat16_8.y = (u_xlatb36) ? _ShadowTransitionSoftness : 0.0;
        u_xlat16_17.xy = (u_xlatb5.x) ? vec2(_ShadowTransitionRange2, _ShadowTransitionSoftness2) : u_xlat16_8.xy;
        u_xlat16_17.xy = (u_xlatb5.y) ? vec2(_ShadowTransitionRange3, _ShadowTransitionSoftness3) : u_xlat16_17.xy;
        u_xlat16_17.xy = (u_xlatb5.z) ? vec2(_ShadowTransitionRange4, _ShadowTransitionSoftness4) : u_xlat16_17.xy;
        u_xlat16_17.xy = (u_xlatb5.w) ? vec2(_ShadowTransitionRange5, _ShadowTransitionSoftness5) : u_xlat16_17.xy;
        u_xlat16_37 = (-u_xlat16_37) + _LightArea;
        u_xlat16_37 = u_xlat16_37 / u_xlat16_17.x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb36 = !!(u_xlat16_37>=1.0);
#else
        u_xlatb36 = u_xlat16_37>=1.0;
#endif
        u_xlat16_7.x = u_xlat16_37 + 0.00999999978;
        u_xlat16_7.x = log2(u_xlat16_7.x);
        u_xlat16_7.x = u_xlat16_17.y * u_xlat16_7.x;
        u_xlat16_7.x = exp2(u_xlat16_7.x);
        u_xlat7.x = min(u_xlat16_7.x, 1.0);
        u_xlat36 = (u_xlatb36) ? 1.0 : u_xlat7.x;
        u_xlat14 = (u_xlatb14) ? u_xlat36 : 1.0;
        u_xlat16_37 = 0.0;
    } else {
        u_xlat14 = 0.0;
        u_xlat16_37 = 1.0;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb36 = !!(0.5<u_xlat10_2.x);
#else
    u_xlatb36 = 0.5<u_xlat10_2.x;
#endif
    u_xlat16_17.x = min(u_xlat16_25, u_xlat16_37);
    u_xlat16_37 = (u_xlatb36) ? u_xlat16_17.x : u_xlat16_37;
    u_xlat16_37 = (-u_xlat16_37) + 1.0;
#ifdef UNITY_ADRENO_ES3
    { bool cond = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(vs_TEXCOORD4); u_xlati25 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati25 = int((vec4(0.0, 0.0, 0.0, 0.0)!=vec4(vs_TEXCOORD4)) ? 0xFFFFFFFFu : uint(0u));
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(u_xlat33==1.0);
#else
    u_xlatb33 = u_xlat33==1.0;
#endif
    if(u_xlatb33){
#ifdef UNITY_ADRENO_ES3
        u_xlatb36 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex));
#else
        u_xlatb36 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex);
#endif
        u_xlat16_7.xyz = vec3(_FirstShadowMultColor.xxyz.y + (-_CoolShadowMultColor.x), _FirstShadowMultColor.xxyz.z + (-_CoolShadowMultColor.y), float(_FirstShadowMultColor.z) + (-_CoolShadowMultColor.z));
        u_xlat7.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_7.xyz + _CoolShadowMultColor.xyz;
        u_xlat16_17.xyz = (bool(u_xlatb36)) ? u_xlat7.xyz : vec3(_FirstShadowMultColor.x, _FirstShadowMultColor.y, _FirstShadowMultColor.z);
    } else {
        if(u_xlatb5.x){
#ifdef UNITY_ADRENO_ES3
            u_xlatb36 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex));
#else
            u_xlatb36 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex);
#endif
            u_xlat16_7.xyz = _FirstShadowMultColor2.xyz + (-_CoolShadowMultColor2.xyz);
            u_xlat7.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_7.xyz + _CoolShadowMultColor2.xyz;
            u_xlat16_17.xyz = (bool(u_xlatb36)) ? u_xlat7.xyz : _FirstShadowMultColor2.xyz;
        } else {
#ifdef UNITY_ADRENO_ES3
            u_xlatb36 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex));
#else
            u_xlatb36 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex);
#endif
            u_xlat16_7.xyz = _FirstShadowMultColor3.xyz + (-_CoolShadowMultColor3.xyz);
            u_xlat7.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_7.xyz + _CoolShadowMultColor3.xyz;
            u_xlat16_8.xyz = (bool(u_xlatb36)) ? u_xlat7.xyz : _FirstShadowMultColor3.xyz;
            u_xlat16_7.xyz = _FirstShadowMultColor4.xyz + (-_CoolShadowMultColor4.xyz);
            u_xlat7.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_7.xyz + _CoolShadowMultColor4.xyz;
            u_xlat16_9.xyz = (bool(u_xlatb36)) ? u_xlat7.xyz : _FirstShadowMultColor4.xyz;
            u_xlat16_7.xyz = _FirstShadowMultColor5.xyz + (-_CoolShadowMultColor5.xyz);
            u_xlat7.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_7.xyz + _CoolShadowMultColor5.xyz;
            u_xlat16_10.xyz = (bool(u_xlatb36)) ? u_xlat7.xyz : _FirstShadowMultColor5.xyz;
            u_xlat16_9.xyz = (u_xlatb5.z) ? u_xlat16_9.xyz : u_xlat16_10.xyz;
            u_xlat16_17.xyz = (u_xlatb5.y) ? u_xlat16_8.xyz : u_xlat16_9.xyz;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb36 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition));
#else
    u_xlatb36 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition);
#endif
    u_xlati7 = ~u_xlati25;
    u_xlati36 = u_xlatb36 ? u_xlati7 : int(0);
    u_xlat16_7.xyz = u_xlat16_17.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat7.xyz = vec3(u_xlat14) * u_xlat16_7.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_17.xyz = (int(u_xlati36) != 0) ? u_xlat7.xyz : u_xlat16_17.xyz;
    u_xlat16_8.x = (-u_xlat16_3) * u_xlat16_35 + 1.0;
    u_xlat16_19.xyz = u_xlat16_17.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat16_8.xyz = u_xlat16_8.xxx * u_xlat16_19.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_17.xyz = (int(u_xlati25) != 0) ? u_xlat16_17.xyz : u_xlat16_8.xyz;
    u_xlat16_8.x = (u_xlatb5.z) ? _Shininess4 : _Shininess5;
    u_xlat16_19.x = (u_xlatb5.z) ? _SpecMulti4 : _SpecMulti5;
    u_xlat16_8.x = (u_xlatb5.y) ? _Shininess3 : u_xlat16_8.x;
    u_xlat16_19.x = (u_xlatb5.y) ? _SpecMulti3 : u_xlat16_19.x;
    u_xlat16_8.x = (u_xlatb5.x) ? _Shininess2 : u_xlat16_8.x;
    u_xlat16_19.x = (u_xlatb5.x) ? _SpecMulti2 : u_xlat16_19.x;
    u_xlat16_8.x = (u_xlatb33) ? _Shininess : u_xlat16_8.x;
    u_xlat16_19.x = (u_xlatb33) ? _SpecMulti : u_xlat16_19.x;
    u_xlat16_30 = dot(vs_TEXCOORD1.xyz, u_xlat0.xyz);
    u_xlat16_30 = max(u_xlat16_30, 0.00100000005);
    u_xlat16_30 = log2(u_xlat16_30);
    u_xlat16_8.x = u_xlat16_30 * u_xlat16_8.x;
    u_xlat16_8.x = exp2(u_xlat16_8.x);
    u_xlat0.x = (-u_xlat10_2.z) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat0.x<u_xlat16_8.x);
#else
    u_xlatb0 = u_xlat0.x<u_xlat16_8.x;
#endif
    u_xlat16_8.xyz = u_xlat16_19.xxx * _SpecularColor.xyz;
    u_xlat16_8.xyz = u_xlat10_2.xxx * u_xlat16_8.xyz;
    u_xlat16_8.xyz = (bool(u_xlatb0)) ? u_xlat16_8.xyz : vec3(0.0, 0.0, 0.0);
    u_xlat16_4.xyz = vec3(u_xlat16_4.x * _EmissionColor_MHY.xxyz.y, u_xlat16_4.y * _EmissionColor_MHY.xxyz.z, u_xlat16_4.z * float(_EmissionColor_MHY.z));
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat16_37==1.0);
#else
    u_xlatb0 = u_xlat16_37==1.0;
#endif
    u_xlati0 = int(uint(u_xlatb0) * 0xffffffffu | uint(u_xlati25));
    u_xlat11.xyz = u_xlat1.xyz * u_xlat16_17.xyz;
    u_xlat0.xyz = (int(u_xlati0) != 0) ? u_xlat11.xyz : u_xlat1.xyz;
    u_xlat0.xyz = u_xlat16_8.xyz + u_xlat0.xyz;
    u_xlat2.xz = vs_TEXCOORD0.zw * _FlowMap01_ST.xy + _FlowMap01_ST.zw;
    u_xlat16_8.x = _Time.y * _FlowMap01_Uspeed + u_xlat2.x;
    u_xlat16_8.y = _Time.y * _FlowMap01_Vspeed + u_xlat2.z;
    u_xlat2.xz = vs_TEXCOORD0.zw * _Noise_ST.xy + _Noise_ST.zw;
    u_xlat16_9.x = _Time.y * _Noise_Uspeed + u_xlat2.x;
    u_xlat16_9.y = _Time.y * _Noise_Vspeed + u_xlat2.z;
    u_xlat10_33 = textureLod(_Noise, u_xlat16_9.xy, 0.0).x;
    u_xlat16_37 = _MaskOffset01 * 1.39999998 + -0.699999988;
    u_xlat16_17.x = u_xlat10_33 * _NoiseIntensity;
    u_xlat2.xz = vs_TEXCOORD0.zw * _FlowMap02_ST.xy + _FlowMap02_ST.zw;
    u_xlat16_9.x = _Time.y * _FlowMap02_Uspeed + u_xlat2.x;
    u_xlat16_9.y = _Time.y * _FlowMap02_Vspeed + u_xlat2.z;
    u_xlat16_39 = _MaskOffset02 * 1.39999998 + -0.699999988;
    u_xlat16_10.xyz = _FlowMapColor01.xyz * vec3(_FlowScale01);
    u_xlat16_8.xy = vec2(u_xlat10_33) * vec2(vec2(_NoiseFlowIntensity, _NoiseFlowIntensity)) + u_xlat16_8.xy;
    u_xlat10_2.x = textureLod(_FlowMap01, u_xlat16_8.xy, 0.0).x;
    u_xlat16_2.xzw = u_xlat10_2.xxx * u_xlat16_10.xyz;
    u_xlat16_8.x = (-vs_TEXCOORD0.z) + 1.0;
    u_xlat16_1.x = u_xlat16_37 + u_xlat16_8.x;
    u_xlat16_1.yw = vec2(u_xlat10_33) * vec2(vec2(_NoiseIntensity, _NoiseIntensity)) + (-vs_TEXCOORD0.ww);
    u_xlat16_17.y = 1.0;
    u_xlat16_19.xy = u_xlat16_1.xy + u_xlat16_17.xy;
    u_xlat10_3 = textureLod(_Mask01, u_xlat16_19.xy, 0.0).x;
    u_xlat16_3 = max(u_xlat10_3, 9.99999975e-05);
    u_xlat16_3 = log2(u_xlat16_3);
    u_xlat16_3 = u_xlat16_3 * _Mask01_Power;
    u_xlat16_3 = exp2(u_xlat16_3);
    u_xlat16_19.xyz = _FlowMapColor02.xyz * vec3(_FlowScale02);
    u_xlat16_9.xy = vec2(u_xlat10_33) * vec2(vec2(_NoiseFlowIntensity, _NoiseFlowIntensity)) + u_xlat16_9.xy;
    u_xlat10_33 = textureLod(_FlowMap02, u_xlat16_9.xy, 0.0).x;
    u_xlat16_14.xyz = vec3(u_xlat10_33) * u_xlat16_19.xyz;
    u_xlat16_1.z = u_xlat16_39 + u_xlat16_8.x;
    u_xlat16_17.xy = vec2(u_xlat16_1.z + u_xlat16_17.x, u_xlat16_1.w + u_xlat16_17.y);
    u_xlat10_33 = textureLod(_Mask02, u_xlat16_17.xy, 0.0).x;
    u_xlat16_33 = max(u_xlat10_33, 9.99999975e-05);
    u_xlat16_33 = log2(u_xlat16_33);
    u_xlat16_33 = u_xlat16_33 * _Mask02_Power;
    u_xlat16_33 = exp2(u_xlat16_33);
    u_xlat16_14.xyz = vec3(u_xlat16_33) * u_xlat16_14.xyz;
    u_xlat16_2.xzw = u_xlat16_2.xzw * vec3(u_xlat16_3) + u_xlat16_14.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(_EmissionScaler) + u_xlat16_2.xzw;
    u_xlat3.xyz = (-u_xlat0.xyz) + u_xlat16_4.xyz;
    u_xlat3.xyz = u_xlat16_6.xxx * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat7.xy = vs_TEXCOORD0.zw * _DissovleNoise_ST.xy + _DissovleNoise_ST.zw;
    u_xlat16_4.x = _Time.y * _DissolveNoise_Uspeed + u_xlat7.x;
    u_xlat16_4.y = _Time.y * _DissolveNoise_Vspeed + u_xlat7.y;
    u_xlat10_33 = textureLod(_DissovleNoise, u_xlat16_4.xy, 0.0).x;
    u_xlat33 = u_xlat10_33 * _DissovleNoiseScale + vs_TEXCOORD0.z;
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(_Dissovle>=u_xlat33);
#else
    u_xlatb33 = _Dissovle>=u_xlat33;
#endif
    u_xlat0.xyz = (bool(u_xlatb13)) ? u_xlat3.xyz : u_xlat0.xyz;
    u_xlat0.xyz = u_xlat16_2.xzw + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(0.00999999978<u_xlat16_6.x);
#else
    u_xlatb2 = 0.00999999978<u_xlat16_6.x;
#endif
    if((int(u_xlatb33) * int(0xffffffffu))==0){discard;}
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn));
#else
    u_xlatb33 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn);
#endif
    u_xlat13.xyz = u_xlat0.xyz * vec3(vec3(_ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness));
    u_xlat3.xyz = vec3(vec3(_ES_CharacterPointLightWholeIntensity, _ES_CharacterPointLightWholeIntensity, _ES_CharacterPointLightWholeIntensity)) * mhy_CharacterPointLightColor.xyz;
    u_xlat7.xyz = _ES_CharacterMainLightColor.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.xyz = min(max(u_xlat7.xyz, 0.0), 1.0);
#else
    u_xlat7.xyz = clamp(u_xlat7.xyz, 0.0, 1.0);
#endif
    u_xlat36 = (-mhy_CharacterPointLightColor.w) + 1.0;
    u_xlat3.xyz = u_xlat7.xyz * vec3(u_xlat36) + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat3.xyz = vec3(vec3(_ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio)) * u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat13.xyz = u_xlat13.xyz * u_xlat3.xyz;
    u_xlat3.xyz = _ES_CharacterAmbientLightColor.xyz * vec3(_ES_CharacterAmbientLightRatio);
    u_xlat16_4.xyz = u_xlat13.xyz * vec3(10.0, 10.0, 10.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.xyz = min(max(u_xlat16_4.xyz, 0.0), 1.0);
#else
    u_xlat16_4.xyz = clamp(u_xlat16_4.xyz, 0.0, 1.0);
#endif
    u_xlat13.xyz = u_xlat3.xyz * u_xlat16_4.xyz + u_xlat13.xyz;
    u_xlat16_4.xyz = (bool(u_xlatb33)) ? u_xlat13.xyz : u_xlat0.xyz;
    u_xlat16_17.xyz = u_xlat0.xyz + (-u_xlat16_4.xyz);
    u_xlat16_17.xyz = u_xlat16_6.xxx * u_xlat16_17.xyz + u_xlat16_4.xyz;
    u_xlat16_0.xyz = (bool(u_xlatb2)) ? u_xlat16_17.xyz : u_xlat16_4.xyz;
    u_xlat16_4.x = max(u_xlat16_0.z, u_xlat16_0.y);
    u_xlat16_1.w = max(u_xlat16_0.x, u_xlat16_4.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(1.0<u_xlat16_1.w);
#else
    u_xlatb2 = 1.0<u_xlat16_1.w;
#endif
    u_xlat16_1.xyz = u_xlat16_0.xyz / u_xlat16_1.www;
    u_xlat16_0.w = 1.0;
    u_xlat16_0 = (bool(u_xlatb2)) ? u_xlat16_1 : u_xlat16_0;
    u_xlat16_4.x = min(u_xlat16_0.w, 1.10000002);
    u_xlat16_15 = u_xlat16_0.w + (-u_xlat16_4.x);
    u_xlat16_4.x = u_xlat16_6.x * u_xlat16_15 + u_xlat16_4.x;
    u_xlat16_2.x = u_xlat16_4.x * 0.0500000007;
    SV_Target0.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb13 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb13 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_4.x = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb13) ? u_xlat16_4.x : 0.0;
    SV_Target0.w = 0.0156862754;
    SV_Target1.xyz = u_xlat16_0.xyz;
    SV_Target1.w = u_xlat16_2.x;
    SV_Target2.xy = vec2(0.0, 0.0);
    SV_Target2.w = vs_TEXCOORD4;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MSAA_INTERPOLATION" "MAIN_TEX_COLORING_ON" "FACE_MAP_NEW_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _MainTex_ST;
uniform 	float _FaceMapRotateOffset;
uniform 	float _CharacterAmbientSensorShadowOn;
uniform 	vec4 _AmbientSensorUVs;
uniform 	float _UseClipPlane;
uniform 	float _ClipPlaneWorld;
uniform 	vec4 _ClipPlane;
uniform 	vec4 mhy_AvatarLightDir;
uniform 	vec4 mhy_CharacterOverrideLightDir;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
struct unity_Builtins1Array_Type {
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw1 {
	unity_Builtins1Array_Type unity_Builtins1Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform lowp sampler2D _CharacterAmbientSensorTex;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp float vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD6;
flat out highp uint vs_SV_InstanceID0;
float u_xlat0;
int u_xlati0;
vec3 u_xlat1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
vec4 u_xlat4;
mediump float u_xlat16_5;
vec3 u_xlat6;
bool u_xlatb6;
float u_xlat7;
mediump vec2 u_xlat16_11;
float u_xlat12;
bool u_xlatb12;
float u_xlat13;
bool u_xlatb13;
mediump float u_xlat16_17;
float u_xlat19;
bool u_xlatb19;
float u_xlat20;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.5<mhy_CharacterOverrideLightDir.w);
#else
    u_xlatb6 = 0.5<mhy_CharacterOverrideLightDir.w;
#endif
    u_xlat1.x = mhy_CharacterOverrideLightDir.x;
    u_xlat1.yz = (-mhy_CharacterOverrideLightDir.yz);
    u_xlat6.xyz = (bool(u_xlatb6)) ? u_xlat1.xyz : mhy_AvatarLightDir.xyz;
    u_xlati0 = u_xlati0 << 2;
    u_xlat1.x = dot(u_xlat6.xyz, unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz);
    u_xlat7 = dot(u_xlat6.xyz, unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb13 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseClipPlane));
#else
    u_xlatb13 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseClipPlane);
#endif
    if(u_xlatb13){
#ifdef UNITY_ADRENO_ES3
        u_xlatb13 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ClipPlaneWorld));
#else
        u_xlatb13 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ClipPlaneWorld);
#endif
        if(u_xlatb13){
#ifdef UNITY_ADRENO_ES3
            u_xlatb13 = !!(abs(_ClipPlane.w)<0.00100000005);
#else
            u_xlatb13 = abs(_ClipPlane.w)<0.00100000005;
#endif
            u_xlat2.xyz = _ClipPlane.www * _ClipPlane.xyz;
            u_xlat2.xyz = (bool(u_xlatb13)) ? vec3(0.0, 0.0, 0.0) : u_xlat2.xyz;
            u_xlat3 = u_xlat2.yyyy * unity_Builtins1Array[u_xlati0 / 4].hlslcc_mtx4x4unity_WorldToObjectArray[1];
            u_xlat3 = unity_Builtins1Array[u_xlati0 / 4].hlslcc_mtx4x4unity_WorldToObjectArray[0] * u_xlat2.xxxx + u_xlat3;
            u_xlat2 = unity_Builtins1Array[u_xlati0 / 4].hlslcc_mtx4x4unity_WorldToObjectArray[2] * u_xlat2.zzzz + u_xlat3;
            u_xlat2 = u_xlat2 + unity_Builtins1Array[u_xlati0 / 4].hlslcc_mtx4x4unity_WorldToObjectArray[3];
            u_xlat2.xyz = u_xlat2.xyz / u_xlat2.www;
            u_xlat3.xyz = _ClipPlane.yyy * unity_Builtins1Array[u_xlati0 / 4].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz;
            u_xlat3.xyz = unity_Builtins1Array[u_xlati0 / 4].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz * _ClipPlane.xxx + u_xlat3.xyz;
            u_xlat3.xyz = unity_Builtins1Array[u_xlati0 / 4].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz * _ClipPlane.zzz + u_xlat3.xyz;
            u_xlat13 = dot(u_xlat2.xyz, u_xlat3.xyz);
            u_xlat19 = dot(in_POSITION0.xyz, u_xlat3.xyz);
#ifdef UNITY_ADRENO_ES3
            u_xlatb2 = !!(u_xlat19<u_xlat13);
#else
            u_xlatb2 = u_xlat19<u_xlat13;
#endif
            u_xlat13 = (-u_xlat13) + u_xlat19;
            u_xlat3.xyz = (-vec3(u_xlat13)) * u_xlat3.xyz + in_POSITION0.xyz;
            u_xlat3.w = 0.0;
            u_xlat4.xyz = in_POSITION0.xyz;
            u_xlat4.w = in_COLOR0.w;
            u_xlat2 = (bool(u_xlatb2)) ? u_xlat3 : u_xlat4;
            u_xlat16_5 = u_xlat2.w;
        } else {
            u_xlat13 = dot(in_POSITION0.xyz, _ClipPlane.xyz);
            u_xlat19 = _ClipPlane.w + -0.00999999978;
#ifdef UNITY_ADRENO_ES3
            u_xlatb19 = !!(u_xlat13<u_xlat19);
#else
            u_xlatb19 = u_xlat13<u_xlat19;
#endif
            u_xlat13 = u_xlat13 + (-_ClipPlane.w);
            u_xlat3.xyz = (-vec3(u_xlat13)) * _ClipPlane.xyz + in_POSITION0.xyz;
            u_xlat3.w = 0.0;
            u_xlat4.xyz = in_POSITION0.xyz;
            u_xlat4.w = in_COLOR0.w;
            u_xlat2 = (bool(u_xlatb19)) ? u_xlat3 : u_xlat4;
            u_xlat16_5 = u_xlat2.w;
        //ENDIF
        }
    } else {
        u_xlat2.xyz = in_POSITION0.xyz;
        u_xlat16_5 = in_COLOR0.w;
    //ENDIF
    }
    u_xlat3.xyw = (-_WorldSpaceCameraPos.xyz) + unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat4.x = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].x;
    u_xlat4.y = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].x;
    u_xlat4.z = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].x;
    u_xlat4.w = u_xlat3.x;
    u_xlat2.w = 1.0;
    u_xlat13 = dot(u_xlat4, u_xlat2);
    u_xlat4.x = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].y;
    u_xlat4.y = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].y;
    u_xlat4.z = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].y;
    u_xlat4.w = u_xlat3.y;
    u_xlat19 = dot(u_xlat4, u_xlat2);
    u_xlat3.x = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].z;
    u_xlat3.y = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].z;
    u_xlat3.z = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].z;
    u_xlat3.x = dot(u_xlat3, u_xlat2);
    u_xlat4.x = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].w;
    u_xlat4.y = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].w;
    u_xlat4.z = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].w;
    u_xlat4.w = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3].w;
    u_xlat20 = dot(u_xlat4, u_xlat2);
    u_xlat4 = vec4(u_xlat19) * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat4 = hlslcc_mtx4x4unity_MatrixVPZero[0] * vec4(u_xlat13) + u_xlat4;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat3.xxxx + u_xlat4;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVPZero[3] * vec4(u_xlat20) + u_xlat3;
    u_xlat4 = u_xlat2.yyyy * unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat4 = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * u_xlat2.xxxx + u_xlat4;
    u_xlat2 = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * u_xlat2.zzzz + u_xlat4;
    u_xlat2 = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3] * in_POSITION0.wwww + u_xlat2;
    vs_TEXCOORD3.xyz = u_xlat2.xyz / u_xlat2.www;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat2.xz = u_xlat3.xw * vec2(0.5, 0.5);
    u_xlat13 = u_xlat3.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat13 * 0.5;
    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat2.xyz = in_NORMAL0.yyy * unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat2.xyz = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_NORMAL0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_NORMAL0.zzz + u_xlat2.xyz;
    u_xlat0 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0 = inversesqrt(u_xlat0);
    u_xlat2.xyz = vec3(u_xlat0) * u_xlat2.xyz;
    u_xlat16_11.x = dot(u_xlat2.xyz, u_xlat6.xyz);
    vs_TEXCOORD1.w = u_xlat16_11.x * 0.497500002 + 0.5;
    u_xlat16_11.x = min(abs(u_xlat1.x), abs(u_xlat7));
    u_xlat16_17 = max(abs(u_xlat1.x), abs(u_xlat7));
    u_xlat16_17 = float(1.0) / u_xlat16_17;
    u_xlat16_11.x = u_xlat16_17 * u_xlat16_11.x;
    u_xlat16_17 = u_xlat16_11.x * u_xlat16_11.x;
    u_xlat0 = u_xlat16_17 * 0.0208350997 + -0.0851330012;
    u_xlat0 = u_xlat16_17 * u_xlat0 + 0.180141002;
    u_xlat0 = u_xlat16_17 * u_xlat0 + -0.330299497;
    u_xlat0 = u_xlat16_17 * u_xlat0 + 0.999866009;
    u_xlat6.x = u_xlat0 * u_xlat16_11.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(abs(u_xlat1.x)<abs(u_xlat7));
#else
    u_xlatb12 = abs(u_xlat1.x)<abs(u_xlat7);
#endif
    u_xlat6.x = u_xlat6.x * -2.0 + 1.57079637;
    u_xlat6.x = u_xlatb12 ? u_xlat6.x : float(0.0);
    u_xlat0 = u_xlat16_11.x * u_xlat0 + u_xlat6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(u_xlat1.x<(-u_xlat1.x));
#else
    u_xlatb6 = u_xlat1.x<(-u_xlat1.x);
#endif
    u_xlat6.x = u_xlatb6 ? -3.14159274 : float(0.0);
    u_xlat0 = u_xlat6.x + u_xlat0;
    u_xlat16_11.x = min(u_xlat1.x, u_xlat7);
    u_xlat16_17 = max(u_xlat1.x, u_xlat7);
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(u_xlat16_11.x<(-u_xlat16_11.x));
#else
    u_xlatb6 = u_xlat16_11.x<(-u_xlat16_11.x);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat16_17>=(-u_xlat16_17));
#else
    u_xlatb12 = u_xlat16_17>=(-u_xlat16_17);
#endif
    u_xlatb6 = u_xlatb12 && u_xlatb6;
    u_xlat0 = (u_xlatb6) ? (-u_xlat0) : u_xlat0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.0<(-u_xlat0));
#else
    u_xlatb6 = 0.0<(-u_xlat0);
#endif
    u_xlat16_11.x = u_xlat0 * -0.318309903;
    u_xlat0 = max(_FaceMapRotateOffset, 0.0);
    u_xlat12 = _FaceMapRotateOffset + 1.0;
    u_xlat12 = min(u_xlat12, 1.0);
    u_xlat12 = (-u_xlat0) + u_xlat12;
    u_xlat0 = (-u_xlat0) + abs(u_xlat16_11.x);
    u_xlat12 = float(1.0) / u_xlat12;
    u_xlat0 = u_xlat12 * u_xlat0;
#ifdef UNITY_ADRENO_ES3
    u_xlat0 = min(max(u_xlat0, 0.0), 1.0);
#else
    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
#endif
    u_xlat12 = u_xlat0 * -2.0 + 3.0;
    u_xlat0 = u_xlat0 * u_xlat0;
    u_xlat0 = u_xlat0 * u_xlat12;
    u_xlat0 = max(u_xlat0, 9.99999975e-05);
    u_xlat0 = min(u_xlat0, 0.999899983);
    u_xlat16_11.xy = in_TEXCOORD0.xy * vec2(-1.0, 1.0) + vec2(1.0, 0.0);
    vs_TEXCOORD6.xy = (bool(u_xlatb6)) ? u_xlat16_11.xy : in_TEXCOORD0.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_CharacterAmbientSensorShadowOn));
#else
    u_xlatb6 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_CharacterAmbientSensorShadowOn);
#endif
    if(u_xlatb6){
        u_xlat6.x = textureLod(_CharacterAmbientSensorTex, _AmbientSensorUVs.xy, 0.0).x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb6 = !!(0.5<u_xlat6.x);
#else
        u_xlatb6 = 0.5<u_xlat6.x;
#endif
        vs_TEXCOORD4 = u_xlatb6 ? 1.0 : float(0.0);
    } else {
        vs_TEXCOORD4 = 0.0;
    //ENDIF
    }
    gl_Position = u_xlat3;
    vs_COLOR0.xyz = in_COLOR0.xyz;
    vs_COLOR0.w = u_xlat16_5;
    vs_TEXCOORD1.xyz = u_xlat2.xyz;
    vs_TEXCOORD2.zw = u_xlat3.zw;
    vs_TEXCOORD6.z = u_xlat0;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	mediump vec4 _Color;
uniform 	float _MainTexAlphaUse;
uniform 	mediump float _MainTexAlphaCutoff;
uniform 	mediump vec4 _MainTexTintColor;
uniform 	float _UseVertexColorAO;
uniform 	mediump float _LightArea;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	float _UseCoolShadowColorOrTex;
uniform 	mediump vec3 _CoolShadowMultColor;
uniform 	float _UseShadowTransition;
uniform 	float _ShadowTransitionRange;
uniform 	float _ShadowTransitionSoftness;
uniform 	mediump vec3 _SpecularColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	float _FaceBlushStrength;
uniform 	mediump vec3 _FaceBlushColor;
uniform 	mediump float _EmissionScaler;
uniform 	mediump vec3 _EmissionColor_MHY;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _UseClipPlane;
uniform 	float _ES_CharacterAmbientLightOn;
uniform 	float _ES_CharacterAmbientBrightness;
uniform 	vec3 _ES_CharacterMainLightColor;
uniform 	vec3 _ES_CharacterAmbientLightColor;
uniform 	float _ES_CharacterMainLightRatio;
uniform 	float _ES_CharacterAmbientLightRatio;
uniform 	float _ES_CharacterColorTone;
uniform 	float _ES_CharacterPointLightWholeIntensity;
uniform 	vec4 mhy_AvatarLightDir;
uniform 	vec4 mhy_CharacterPointLightColor;
uniform 	vec4 mhy_CharacterOverrideLightDir;
uniform 	mediump vec4 _FlowMapColor01;
uniform 	mediump float _FlowScale01;
uniform 	mediump float _FlowMap01_Uspeed;
uniform 	vec4 _FlowMap01_ST;
uniform 	mediump float _FlowMap01_Vspeed;
uniform 	mediump float _Noise_Uspeed;
uniform 	vec4 _Noise_ST;
uniform 	mediump float _Noise_Vspeed;
uniform 	mediump float _NoiseFlowIntensity;
uniform 	mediump float _MaskOffset01;
uniform 	mediump float _NoiseIntensity;
uniform 	mediump float _Mask01_Power;
uniform 	mediump vec4 _FlowMapColor02;
uniform 	mediump float _FlowScale02;
uniform 	mediump float _FlowMap02_Uspeed;
uniform 	vec4 _FlowMap02_ST;
uniform 	mediump float _FlowMap02_Vspeed;
uniform 	mediump float _MaskOffset02;
uniform 	mediump float _Mask02_Power;
uniform 	mediump float _DissolveNoise_Uspeed;
uniform 	vec4 _DissovleNoise_ST;
uniform 	mediump float _DissolveNoise_Vspeed;
uniform 	mediump float _DissovleNoiseScale;
uniform 	mediump float _Dissovle;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _Noise;
uniform lowp sampler2D _FlowMap01;
uniform lowp sampler2D _Mask01;
uniform lowp sampler2D _FlowMap02;
uniform lowp sampler2D _Mask02;
uniform lowp sampler2D _DissovleNoise;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp float vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
lowp float u_xlat10_2;
bvec4 u_xlatb2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
lowp float u_xlat10_3;
int u_xlati3;
bool u_xlatb3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec2 u_xlat16_7;
mediump vec3 u_xlat16_8;
vec3 u_xlat9;
bool u_xlatb10;
vec3 u_xlat12;
mediump vec3 u_xlat16_12;
lowp float u_xlat10_12;
int u_xlati12;
bool u_xlatb12;
vec3 u_xlat13;
mediump vec3 u_xlat16_13;
mediump float u_xlat16_14;
mediump vec2 u_xlat16_15;
mediump vec2 u_xlat16_16;
bvec2 u_xlatb20;
vec2 u_xlat22;
bool u_xlatb22;
mediump vec2 u_xlat16_25;
float u_xlat30;
bool u_xlatb30;
float u_xlat32;
mediump float u_xlat16_32;
lowp float u_xlat10_32;
int u_xlati32;
bool u_xlatb32;
float u_xlat33;
mediump float u_xlat16_34;
mediump float u_xlat16_35;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseClipPlane));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseClipPlane);
#endif
    u_xlat16_1.x = vs_COLOR0.w + -0.00999999978;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(u_xlat16_1.x<0.0);
#else
    u_xlatb10 = u_xlat16_1.x<0.0;
#endif
    u_xlatb0 = u_xlatb0 && u_xlatb10;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(_DitherAlpha<0.949999988);
#else
        u_xlatb0 = _DitherAlpha<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb20.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb20.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb20.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = _DitherAlpha * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + -0.00999999978;
#ifdef UNITY_ADRENO_ES3
            u_xlatb0 = !!(u_xlat0.x<0.0);
#else
            u_xlatb0 = u_xlat0.x<0.0;
#endif
            if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(0.5<mhy_CharacterOverrideLightDir.w);
#else
    u_xlatb2.x = 0.5<mhy_CharacterOverrideLightDir.w;
#endif
    u_xlat3.x = mhy_CharacterOverrideLightDir.x;
    u_xlat3.yz = (-mhy_CharacterOverrideLightDir.yz);
    u_xlat2.xyz = (u_xlatb2.x) ? u_xlat3.xyz : mhy_AvatarLightDir.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat30) + u_xlat2.xyz;
    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
    u_xlat2.xy = dFdx(vs_TEXCOORD0.xy);
    u_xlat22.xy = dFdy(vs_TEXCOORD0.xy);
    u_xlat2.xy = u_xlat22.xy + u_xlat2.xy;
    u_xlat22.xy = (-u_xlat2.xy) * vec2(0.25, 0.25) + vs_TEXCOORD0.xy;
    u_xlat2.xy = u_xlat2.xy * vec2(0.25, 0.25) + vs_TEXCOORD0.xy;
    u_xlat2.xy = (int(gl_SampleID) != 0) ? u_xlat22.xy : u_xlat2.xy;
    u_xlat1 = textureLod(_MainTex, u_xlat2.xy, 0.0);
    u_xlat16_4.xyz = u_xlat1.xyz * _MainTexTintColor.xyz;
    u_xlat16_5.xyz = u_xlat16_4.xyz + u_xlat16_4.xyz;
    u_xlat16_6.xyz = u_xlat1.xyz + _MainTexTintColor.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_6.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(-4.0, -4.0, -4.0) + u_xlat16_6.xyz;
    u_xlatb2 = lessThan(vec4(0.5, 0.5, 0.5, 0.00999999978), u_xlat1);
    u_xlat16_6.x = (u_xlatb2.x) ? float(1.0) : float(0.0);
    u_xlat16_6.y = (u_xlatb2.y) ? float(1.0) : float(0.0);
    u_xlat16_6.z = (u_xlatb2.z) ? float(1.0) : float(0.0);
    u_xlat16_4.xyz = u_xlat16_4.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat16_4.xyz = u_xlat16_6.xyz * u_xlat16_4.xyz + u_xlat16_5.xyz;
    u_xlatb2.xyz = equal(vec4(_MainTexAlphaUse), vec4(3.0, 1.0, 2.0, 0.0)).xyz;
    u_xlat30 = u_xlat1.w * _FaceBlushStrength;
    u_xlat16_3.xyz = (-u_xlat16_4.xyz) + _FaceBlushColor.xyz;
    u_xlat3.xyz = vec3(u_xlat30) * u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat16_4.xyz = (u_xlatb2.x) ? u_xlat3.xyz : u_xlat16_4.xyz;
    u_xlat16_34 = u_xlat1.w + (-_MainTexAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(u_xlat16_34<0.0);
#else
    u_xlatb30 = u_xlat16_34<0.0;
#endif
    u_xlatb30 = u_xlatb2.y && u_xlatb30;
    if((int(u_xlatb30) * int(0xffffffffu))!=0){discard;}
    u_xlat16_4.xyz = u_xlat16_4.xyz * _Color.xyz;
    u_xlatb30 = u_xlatb2.w && u_xlatb2.z;
    u_xlat16_34 = (u_xlatb30) ? u_xlat1.w : 0.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorAO));
#else
    u_xlatb2.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorAO);
#endif
    u_xlat16_5.x = vs_COLOR0.x * 0.5;
    u_xlat16_5.x = (u_xlatb2.x) ? u_xlat16_5.x : 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat16_5.x<0.0500000007);
#else
    u_xlatb12 = u_xlat16_5.x<0.0500000007;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(0.949999988<u_xlat16_5.x);
#else
    u_xlatb22 = 0.949999988<u_xlat16_5.x;
#endif
    u_xlat32 = u_xlat16_5.x + vs_TEXCOORD1.w;
    u_xlat32 = u_xlat32 * 0.5;
    u_xlat16_5.x = (u_xlatb22) ? 1.0 : u_xlat32;
    u_xlat16_5.x = (u_xlatb12) ? 0.0 : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb2.x) ? u_xlat16_5.x : vs_TEXCOORD1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(u_xlat16_5.x<_LightArea);
#else
    u_xlatb2.x = u_xlat16_5.x<_LightArea;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition));
#else
    u_xlatb12 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition);
#endif
    u_xlat16_5.x = (-u_xlat16_5.x) + _LightArea;
    u_xlat16_5.x = u_xlat16_5.x / _ShadowTransitionRange;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(u_xlat16_5.x>=1.0);
#else
    u_xlatb22 = u_xlat16_5.x>=1.0;
#endif
    u_xlat16_32 = u_xlat16_5.x + 0.00999999978;
    u_xlat16_32 = log2(u_xlat16_32);
    u_xlat32 = u_xlat16_32 * _ShadowTransitionSoftness;
    u_xlat32 = exp2(u_xlat32);
    u_xlat32 = min(u_xlat32, 1.0);
    u_xlat22.x = (u_xlatb22) ? 1.0 : u_xlat32;
    u_xlat22.x = (u_xlatb12) ? u_xlat22.x : 1.0;
    u_xlat22.x = u_xlatb2.x ? u_xlat22.x : float(0.0);
#ifdef UNITY_ADRENO_ES3
    { bool cond = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(vs_TEXCOORD4); u_xlati32 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati32 = int((vec4(0.0, 0.0, 0.0, 0.0)!=vec4(vs_TEXCOORD4)) ? 0xFFFFFFFFu : uint(0u));
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex));
#else
    u_xlatb3 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex);
#endif
    u_xlat16_13.xyz = vec3(_FirstShadowMultColor.xxyz.y + (-_CoolShadowMultColor.x), _FirstShadowMultColor.xxyz.z + (-_CoolShadowMultColor.y), float(_FirstShadowMultColor.z) + (-_CoolShadowMultColor.z));
    u_xlat13.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_13.xyz + _CoolShadowMultColor.xyz;
    u_xlat16_5.xyz = (bool(u_xlatb3)) ? u_xlat13.xyz : vec3(_FirstShadowMultColor.x, _FirstShadowMultColor.y, _FirstShadowMultColor.z);
    u_xlati3 = ~u_xlati32;
    u_xlati12 = u_xlatb12 ? u_xlati3 : int(0);
    u_xlat16_3.xyz = u_xlat16_5.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat3.xyz = u_xlat22.xxx * u_xlat16_3.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_5.xyz = (int(u_xlati12) != 0) ? u_xlat3.xyz : u_xlat16_5.xyz;
    u_xlat16_5.xyz = (int(u_xlati32) != 0) ? u_xlat16_5.xyz : vec3(1.0, 1.0, 1.0);
    u_xlat16_35 = dot(vs_TEXCOORD1.xyz, u_xlat0.xyz);
    u_xlat16_35 = max(u_xlat16_35, 0.00100000005);
    u_xlat16_35 = log2(u_xlat16_35);
    u_xlat16_35 = u_xlat16_35 * _Shininess;
    u_xlat16_35 = exp2(u_xlat16_35);
    u_xlat16_6.xyz = vec3(u_xlat16_35) * _SpecularColor.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(_SpecMulti);
    u_xlat16_4.xyz = vec3(u_xlat16_4.x * _EmissionColor_MHY.xxyz.y, u_xlat16_4.y * _EmissionColor_MHY.xxyz.z, u_xlat16_4.z * float(_EmissionColor_MHY.z));
    u_xlati0 = int(uint(u_xlatb2.x) * 0xffffffffu | uint(u_xlati32));
    u_xlat2.xyz = u_xlat1.xyz * u_xlat16_5.xyz;
    u_xlat0.xyz = (int(u_xlati0) != 0) ? u_xlat2.xyz : u_xlat1.xyz;
    u_xlat0.xyz = u_xlat16_6.xyz * vec3(0.5, 0.5, 0.5) + u_xlat0.xyz;
    u_xlat2.xy = vs_TEXCOORD0.zw * _FlowMap01_ST.xy + _FlowMap01_ST.zw;
    u_xlat16_5.x = _Time.y * _FlowMap01_Uspeed + u_xlat2.x;
    u_xlat16_5.y = _Time.y * _FlowMap01_Vspeed + u_xlat2.y;
    u_xlat2.xy = vs_TEXCOORD0.zw * _Noise_ST.xy + _Noise_ST.zw;
    u_xlat16_6.x = _Time.y * _Noise_Uspeed + u_xlat2.x;
    u_xlat16_6.y = _Time.y * _Noise_Vspeed + u_xlat2.y;
    u_xlat10_2 = textureLod(_Noise, u_xlat16_6.xy, 0.0).x;
    u_xlat16_25.x = _MaskOffset01 * 1.39999998 + -0.699999988;
    u_xlat16_16.x = u_xlat10_2 * _NoiseIntensity;
    u_xlat12.xy = vs_TEXCOORD0.zw * _FlowMap02_ST.xy + _FlowMap02_ST.zw;
    u_xlat16_7.x = _Time.y * _FlowMap02_Uspeed + u_xlat12.x;
    u_xlat16_7.y = _Time.y * _FlowMap02_Vspeed + u_xlat12.y;
    u_xlat16_25.y = _MaskOffset02 * 1.39999998 + -0.699999988;
    u_xlat16_8.xyz = _FlowMapColor01.xyz * vec3(_FlowScale01);
    u_xlat16_5.xy = vec2(u_xlat10_2) * vec2(vec2(_NoiseFlowIntensity, _NoiseFlowIntensity)) + u_xlat16_5.xy;
    u_xlat10_12 = textureLod(_FlowMap01, u_xlat16_5.xy, 0.0).x;
    u_xlat16_12.xyz = vec3(u_xlat10_12) * u_xlat16_8.xyz;
    u_xlat16_5.x = (-vs_TEXCOORD0.z) + 1.0;
    u_xlat16_1.xz = u_xlat16_25.xy + u_xlat16_5.xx;
    u_xlat16_1.yw = vec2(u_xlat10_2) * vec2(vec2(_NoiseIntensity, _NoiseIntensity)) + (-vs_TEXCOORD0.ww);
    u_xlat16_16.y = 1.0;
    u_xlat16_15.xy = u_xlat16_1.xy + u_xlat16_16.xy;
    u_xlat10_3 = textureLod(_Mask01, u_xlat16_15.xy, 0.0).x;
    u_xlat16_3.x = max(u_xlat10_3, 9.99999975e-05);
    u_xlat16_3.x = log2(u_xlat16_3.x);
    u_xlat16_3.x = u_xlat16_3.x * _Mask01_Power;
    u_xlat16_3.x = exp2(u_xlat16_3.x);
    u_xlat16_8.xyz = _FlowMapColor02.xyz * vec3(_FlowScale02);
    u_xlat16_15.xy = vec2(u_xlat10_2) * vec2(vec2(_NoiseFlowIntensity, _NoiseFlowIntensity)) + u_xlat16_7.xy;
    u_xlat10_2 = textureLod(_FlowMap02, u_xlat16_15.xy, 0.0).x;
    u_xlat16_13.xyz = vec3(u_xlat10_2) * u_xlat16_8.xyz;
    u_xlat16_5.xy = vec2(u_xlat16_1.z + u_xlat16_16.x, u_xlat16_1.w + u_xlat16_16.y);
    u_xlat10_2 = textureLod(_Mask02, u_xlat16_5.xy, 0.0).x;
    u_xlat16_2.x = max(u_xlat10_2, 9.99999975e-05);
    u_xlat16_2.x = log2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * _Mask02_Power;
    u_xlat16_2.x = exp2(u_xlat16_2.x);
    u_xlat16_13.xyz = u_xlat16_2.xxx * u_xlat16_13.xyz;
    u_xlat16_2.xyz = u_xlat16_12.xyz * u_xlat16_3.xxx + u_xlat16_13.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(_EmissionScaler) + u_xlat16_2.xyz;
    u_xlat3.xyz = (-u_xlat0.xyz) + u_xlat16_4.xyz;
    u_xlat3.xyz = vec3(u_xlat16_34) * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat9.xy = vs_TEXCOORD0.zw * _DissovleNoise_ST.xy + _DissovleNoise_ST.zw;
    u_xlat16_4.x = _Time.y * _DissolveNoise_Uspeed + u_xlat9.x;
    u_xlat16_4.y = _Time.y * _DissolveNoise_Vspeed + u_xlat9.y;
    u_xlat10_32 = textureLod(_DissovleNoise, u_xlat16_4.xy, 0.0).x;
    u_xlat32 = u_xlat10_32 * _DissovleNoiseScale + vs_TEXCOORD0.z;
#ifdef UNITY_ADRENO_ES3
    u_xlatb32 = !!(_Dissovle>=u_xlat32);
#else
    u_xlatb32 = _Dissovle>=u_xlat32;
#endif
    u_xlat0.xyz = (bool(u_xlatb30)) ? u_xlat3.xyz : u_xlat0.xyz;
    u_xlat0.xyz = u_xlat16_2.xyz + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(0.00999999978<u_xlat16_34);
#else
    u_xlatb30 = 0.00999999978<u_xlat16_34;
#endif
    if((int(u_xlatb32) * int(0xffffffffu))==0){discard;}
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn));
#else
    u_xlatb2.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn);
#endif
    u_xlat12.xyz = u_xlat0.xyz * vec3(vec3(_ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness));
    u_xlat3.xyz = vec3(vec3(_ES_CharacterPointLightWholeIntensity, _ES_CharacterPointLightWholeIntensity, _ES_CharacterPointLightWholeIntensity)) * mhy_CharacterPointLightColor.xyz;
    u_xlat9.xyz = _ES_CharacterMainLightColor.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat9.xyz = min(max(u_xlat9.xyz, 0.0), 1.0);
#else
    u_xlat9.xyz = clamp(u_xlat9.xyz, 0.0, 1.0);
#endif
    u_xlat33 = (-mhy_CharacterPointLightColor.w) + 1.0;
    u_xlat3.xyz = u_xlat9.xyz * vec3(u_xlat33) + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat3.xyz = vec3(vec3(_ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio)) * u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat12.xyz = u_xlat12.xyz * u_xlat3.xyz;
    u_xlat3.xyz = _ES_CharacterAmbientLightColor.xyz * vec3(_ES_CharacterAmbientLightRatio);
    u_xlat16_4.xyz = u_xlat12.xyz * vec3(10.0, 10.0, 10.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.xyz = min(max(u_xlat16_4.xyz, 0.0), 1.0);
#else
    u_xlat16_4.xyz = clamp(u_xlat16_4.xyz, 0.0, 1.0);
#endif
    u_xlat12.xyz = u_xlat3.xyz * u_xlat16_4.xyz + u_xlat12.xyz;
    u_xlat16_4.xyz = (u_xlatb2.x) ? u_xlat12.xyz : u_xlat0.xyz;
    u_xlat16_5.xyz = u_xlat0.xyz + (-u_xlat16_4.xyz);
    u_xlat16_5.xyz = vec3(u_xlat16_34) * u_xlat16_5.xyz + u_xlat16_4.xyz;
    u_xlat16_0.xyz = (bool(u_xlatb30)) ? u_xlat16_5.xyz : u_xlat16_4.xyz;
    u_xlat16_4.x = max(u_xlat16_0.z, u_xlat16_0.y);
    u_xlat16_1.w = max(u_xlat16_0.x, u_xlat16_4.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(1.0<u_xlat16_1.w);
#else
    u_xlatb2.x = 1.0<u_xlat16_1.w;
#endif
    u_xlat16_1.xyz = u_xlat16_0.xyz / u_xlat16_1.www;
    u_xlat16_0.w = 1.0;
    u_xlat16_0 = (u_xlatb2.x) ? u_xlat16_1 : u_xlat16_0;
    u_xlat16_4.x = min(u_xlat16_0.w, 1.10000002);
    u_xlat16_14 = u_xlat16_0.w + (-u_xlat16_4.x);
    u_xlat16_4.x = u_xlat16_34 * u_xlat16_14 + u_xlat16_4.x;
    u_xlat16_2.x = u_xlat16_4.x * 0.0500000007;
    SV_Target0.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb12 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_4.x = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb12) ? u_xlat16_4.x : 0.0;
    SV_Target0.w = 0.0156862754;
    SV_Target1.xyz = u_xlat16_0.xyz;
    SV_Target1.w = u_xlat16_2.x;
    SV_Target2.xy = vec2(0.0, 0.0);
    SV_Target2.w = vs_TEXCOORD4;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MSAA_INTERPOLATION" "TOON_SPECULAR_ON" "TOON_LIGHTMAP_ON" "MAIN_TEX_COLORING_ON" "FACE_MAP_NEW_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _MainTex_ST;
uniform 	float _FaceMapRotateOffset;
uniform 	float _CharacterAmbientSensorShadowOn;
uniform 	vec4 _AmbientSensorUVs;
uniform 	float _UseClipPlane;
uniform 	float _ClipPlaneWorld;
uniform 	vec4 _ClipPlane;
uniform 	vec4 mhy_AvatarLightDir;
uniform 	vec4 mhy_CharacterOverrideLightDir;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
struct unity_Builtins1Array_Type {
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw1 {
	unity_Builtins1Array_Type unity_Builtins1Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform lowp sampler2D _CharacterAmbientSensorTex;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp float vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD6;
flat out highp uint vs_SV_InstanceID0;
float u_xlat0;
int u_xlati0;
vec3 u_xlat1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
vec4 u_xlat4;
mediump float u_xlat16_5;
vec3 u_xlat6;
bool u_xlatb6;
float u_xlat7;
mediump vec2 u_xlat16_11;
float u_xlat12;
bool u_xlatb12;
float u_xlat13;
bool u_xlatb13;
mediump float u_xlat16_17;
float u_xlat19;
bool u_xlatb19;
float u_xlat20;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.5<mhy_CharacterOverrideLightDir.w);
#else
    u_xlatb6 = 0.5<mhy_CharacterOverrideLightDir.w;
#endif
    u_xlat1.x = mhy_CharacterOverrideLightDir.x;
    u_xlat1.yz = (-mhy_CharacterOverrideLightDir.yz);
    u_xlat6.xyz = (bool(u_xlatb6)) ? u_xlat1.xyz : mhy_AvatarLightDir.xyz;
    u_xlati0 = u_xlati0 << 2;
    u_xlat1.x = dot(u_xlat6.xyz, unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz);
    u_xlat7 = dot(u_xlat6.xyz, unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb13 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseClipPlane));
#else
    u_xlatb13 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseClipPlane);
#endif
    if(u_xlatb13){
#ifdef UNITY_ADRENO_ES3
        u_xlatb13 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ClipPlaneWorld));
#else
        u_xlatb13 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ClipPlaneWorld);
#endif
        if(u_xlatb13){
#ifdef UNITY_ADRENO_ES3
            u_xlatb13 = !!(abs(_ClipPlane.w)<0.00100000005);
#else
            u_xlatb13 = abs(_ClipPlane.w)<0.00100000005;
#endif
            u_xlat2.xyz = _ClipPlane.www * _ClipPlane.xyz;
            u_xlat2.xyz = (bool(u_xlatb13)) ? vec3(0.0, 0.0, 0.0) : u_xlat2.xyz;
            u_xlat3 = u_xlat2.yyyy * unity_Builtins1Array[u_xlati0 / 4].hlslcc_mtx4x4unity_WorldToObjectArray[1];
            u_xlat3 = unity_Builtins1Array[u_xlati0 / 4].hlslcc_mtx4x4unity_WorldToObjectArray[0] * u_xlat2.xxxx + u_xlat3;
            u_xlat2 = unity_Builtins1Array[u_xlati0 / 4].hlslcc_mtx4x4unity_WorldToObjectArray[2] * u_xlat2.zzzz + u_xlat3;
            u_xlat2 = u_xlat2 + unity_Builtins1Array[u_xlati0 / 4].hlslcc_mtx4x4unity_WorldToObjectArray[3];
            u_xlat2.xyz = u_xlat2.xyz / u_xlat2.www;
            u_xlat3.xyz = _ClipPlane.yyy * unity_Builtins1Array[u_xlati0 / 4].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz;
            u_xlat3.xyz = unity_Builtins1Array[u_xlati0 / 4].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz * _ClipPlane.xxx + u_xlat3.xyz;
            u_xlat3.xyz = unity_Builtins1Array[u_xlati0 / 4].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz * _ClipPlane.zzz + u_xlat3.xyz;
            u_xlat13 = dot(u_xlat2.xyz, u_xlat3.xyz);
            u_xlat19 = dot(in_POSITION0.xyz, u_xlat3.xyz);
#ifdef UNITY_ADRENO_ES3
            u_xlatb2 = !!(u_xlat19<u_xlat13);
#else
            u_xlatb2 = u_xlat19<u_xlat13;
#endif
            u_xlat13 = (-u_xlat13) + u_xlat19;
            u_xlat3.xyz = (-vec3(u_xlat13)) * u_xlat3.xyz + in_POSITION0.xyz;
            u_xlat3.w = 0.0;
            u_xlat4.xyz = in_POSITION0.xyz;
            u_xlat4.w = in_COLOR0.w;
            u_xlat2 = (bool(u_xlatb2)) ? u_xlat3 : u_xlat4;
            u_xlat16_5 = u_xlat2.w;
        } else {
            u_xlat13 = dot(in_POSITION0.xyz, _ClipPlane.xyz);
            u_xlat19 = _ClipPlane.w + -0.00999999978;
#ifdef UNITY_ADRENO_ES3
            u_xlatb19 = !!(u_xlat13<u_xlat19);
#else
            u_xlatb19 = u_xlat13<u_xlat19;
#endif
            u_xlat13 = u_xlat13 + (-_ClipPlane.w);
            u_xlat3.xyz = (-vec3(u_xlat13)) * _ClipPlane.xyz + in_POSITION0.xyz;
            u_xlat3.w = 0.0;
            u_xlat4.xyz = in_POSITION0.xyz;
            u_xlat4.w = in_COLOR0.w;
            u_xlat2 = (bool(u_xlatb19)) ? u_xlat3 : u_xlat4;
            u_xlat16_5 = u_xlat2.w;
        //ENDIF
        }
    } else {
        u_xlat2.xyz = in_POSITION0.xyz;
        u_xlat16_5 = in_COLOR0.w;
    //ENDIF
    }
    u_xlat3.xyw = (-_WorldSpaceCameraPos.xyz) + unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat4.x = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].x;
    u_xlat4.y = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].x;
    u_xlat4.z = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].x;
    u_xlat4.w = u_xlat3.x;
    u_xlat2.w = 1.0;
    u_xlat13 = dot(u_xlat4, u_xlat2);
    u_xlat4.x = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].y;
    u_xlat4.y = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].y;
    u_xlat4.z = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].y;
    u_xlat4.w = u_xlat3.y;
    u_xlat19 = dot(u_xlat4, u_xlat2);
    u_xlat3.x = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].z;
    u_xlat3.y = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].z;
    u_xlat3.z = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].z;
    u_xlat3.x = dot(u_xlat3, u_xlat2);
    u_xlat4.x = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].w;
    u_xlat4.y = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].w;
    u_xlat4.z = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].w;
    u_xlat4.w = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3].w;
    u_xlat20 = dot(u_xlat4, u_xlat2);
    u_xlat4 = vec4(u_xlat19) * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat4 = hlslcc_mtx4x4unity_MatrixVPZero[0] * vec4(u_xlat13) + u_xlat4;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat3.xxxx + u_xlat4;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVPZero[3] * vec4(u_xlat20) + u_xlat3;
    u_xlat4 = u_xlat2.yyyy * unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat4 = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * u_xlat2.xxxx + u_xlat4;
    u_xlat2 = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * u_xlat2.zzzz + u_xlat4;
    u_xlat2 = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3] * in_POSITION0.wwww + u_xlat2;
    vs_TEXCOORD3.xyz = u_xlat2.xyz / u_xlat2.www;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat2.xz = u_xlat3.xw * vec2(0.5, 0.5);
    u_xlat13 = u_xlat3.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat13 * 0.5;
    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat2.xyz = in_NORMAL0.yyy * unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat2.xyz = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_NORMAL0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_NORMAL0.zzz + u_xlat2.xyz;
    u_xlat0 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0 = inversesqrt(u_xlat0);
    u_xlat2.xyz = vec3(u_xlat0) * u_xlat2.xyz;
    u_xlat16_11.x = dot(u_xlat2.xyz, u_xlat6.xyz);
    vs_TEXCOORD1.w = u_xlat16_11.x * 0.497500002 + 0.5;
    u_xlat16_11.x = min(abs(u_xlat1.x), abs(u_xlat7));
    u_xlat16_17 = max(abs(u_xlat1.x), abs(u_xlat7));
    u_xlat16_17 = float(1.0) / u_xlat16_17;
    u_xlat16_11.x = u_xlat16_17 * u_xlat16_11.x;
    u_xlat16_17 = u_xlat16_11.x * u_xlat16_11.x;
    u_xlat0 = u_xlat16_17 * 0.0208350997 + -0.0851330012;
    u_xlat0 = u_xlat16_17 * u_xlat0 + 0.180141002;
    u_xlat0 = u_xlat16_17 * u_xlat0 + -0.330299497;
    u_xlat0 = u_xlat16_17 * u_xlat0 + 0.999866009;
    u_xlat6.x = u_xlat0 * u_xlat16_11.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(abs(u_xlat1.x)<abs(u_xlat7));
#else
    u_xlatb12 = abs(u_xlat1.x)<abs(u_xlat7);
#endif
    u_xlat6.x = u_xlat6.x * -2.0 + 1.57079637;
    u_xlat6.x = u_xlatb12 ? u_xlat6.x : float(0.0);
    u_xlat0 = u_xlat16_11.x * u_xlat0 + u_xlat6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(u_xlat1.x<(-u_xlat1.x));
#else
    u_xlatb6 = u_xlat1.x<(-u_xlat1.x);
#endif
    u_xlat6.x = u_xlatb6 ? -3.14159274 : float(0.0);
    u_xlat0 = u_xlat6.x + u_xlat0;
    u_xlat16_11.x = min(u_xlat1.x, u_xlat7);
    u_xlat16_17 = max(u_xlat1.x, u_xlat7);
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(u_xlat16_11.x<(-u_xlat16_11.x));
#else
    u_xlatb6 = u_xlat16_11.x<(-u_xlat16_11.x);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat16_17>=(-u_xlat16_17));
#else
    u_xlatb12 = u_xlat16_17>=(-u_xlat16_17);
#endif
    u_xlatb6 = u_xlatb12 && u_xlatb6;
    u_xlat0 = (u_xlatb6) ? (-u_xlat0) : u_xlat0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.0<(-u_xlat0));
#else
    u_xlatb6 = 0.0<(-u_xlat0);
#endif
    u_xlat16_11.x = u_xlat0 * -0.318309903;
    u_xlat0 = max(_FaceMapRotateOffset, 0.0);
    u_xlat12 = _FaceMapRotateOffset + 1.0;
    u_xlat12 = min(u_xlat12, 1.0);
    u_xlat12 = (-u_xlat0) + u_xlat12;
    u_xlat0 = (-u_xlat0) + abs(u_xlat16_11.x);
    u_xlat12 = float(1.0) / u_xlat12;
    u_xlat0 = u_xlat12 * u_xlat0;
#ifdef UNITY_ADRENO_ES3
    u_xlat0 = min(max(u_xlat0, 0.0), 1.0);
#else
    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
#endif
    u_xlat12 = u_xlat0 * -2.0 + 3.0;
    u_xlat0 = u_xlat0 * u_xlat0;
    u_xlat0 = u_xlat0 * u_xlat12;
    u_xlat0 = max(u_xlat0, 9.99999975e-05);
    u_xlat0 = min(u_xlat0, 0.999899983);
    u_xlat16_11.xy = in_TEXCOORD0.xy * vec2(-1.0, 1.0) + vec2(1.0, 0.0);
    vs_TEXCOORD6.xy = (bool(u_xlatb6)) ? u_xlat16_11.xy : in_TEXCOORD0.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_CharacterAmbientSensorShadowOn));
#else
    u_xlatb6 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_CharacterAmbientSensorShadowOn);
#endif
    if(u_xlatb6){
        u_xlat6.x = textureLod(_CharacterAmbientSensorTex, _AmbientSensorUVs.xy, 0.0).x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb6 = !!(0.5<u_xlat6.x);
#else
        u_xlatb6 = 0.5<u_xlat6.x;
#endif
        vs_TEXCOORD4 = u_xlatb6 ? 1.0 : float(0.0);
    } else {
        vs_TEXCOORD4 = 0.0;
    //ENDIF
    }
    gl_Position = u_xlat3;
    vs_COLOR0.xyz = in_COLOR0.xyz;
    vs_COLOR0.w = u_xlat16_5;
    vs_TEXCOORD1.xyz = u_xlat2.xyz;
    vs_TEXCOORD2.zw = u_xlat3.zw;
    vs_TEXCOORD6.z = u_xlat0;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	mediump vec4 _Color;
uniform 	float _MainTexAlphaUse;
uniform 	mediump float _MainTexAlphaCutoff;
uniform 	mediump vec4 _MainTexTintColor;
uniform 	float _UseLightMapColorAO;
uniform 	float _UseVertexColorAO;
uniform 	mediump float _LightArea;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	float _UseCoolShadowColorOrTex;
uniform 	mediump vec3 _CoolShadowMultColor;
uniform 	float _UseShadowTransition;
uniform 	float _ShadowTransitionRange;
uniform 	float _ShadowTransitionSoftness;
uniform 	mediump vec3 _SpecularColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	float _FaceBlushStrength;
uniform 	mediump vec3 _FaceBlushColor;
uniform 	float _FaceMapSoftness;
uniform 	mediump float _EmissionScaler;
uniform 	mediump vec3 _EmissionColor_MHY;
uniform 	float _UseMaterial2;
uniform 	mediump vec3 _Color2;
uniform 	mediump vec3 _FirstShadowMultColor2;
uniform 	mediump vec3 _CoolShadowMultColor2;
uniform 	mediump float _Shininess2;
uniform 	mediump float _SpecMulti2;
uniform 	float _ShadowTransitionRange2;
uniform 	float _ShadowTransitionSoftness2;
uniform 	float _UseMaterial3;
uniform 	mediump vec3 _Color3;
uniform 	mediump vec3 _FirstShadowMultColor3;
uniform 	mediump vec3 _CoolShadowMultColor3;
uniform 	mediump float _Shininess3;
uniform 	mediump float _SpecMulti3;
uniform 	float _ShadowTransitionRange3;
uniform 	float _ShadowTransitionSoftness3;
uniform 	float _UseMaterial4;
uniform 	mediump vec3 _Color4;
uniform 	mediump vec3 _FirstShadowMultColor4;
uniform 	mediump vec3 _CoolShadowMultColor4;
uniform 	mediump float _Shininess4;
uniform 	mediump float _SpecMulti4;
uniform 	float _ShadowTransitionRange4;
uniform 	float _ShadowTransitionSoftness4;
uniform 	float _UseMaterial5;
uniform 	mediump vec3 _Color5;
uniform 	mediump vec3 _FirstShadowMultColor5;
uniform 	mediump vec3 _CoolShadowMultColor5;
uniform 	mediump float _Shininess5;
uniform 	mediump float _SpecMulti5;
uniform 	float _ShadowTransitionRange5;
uniform 	float _ShadowTransitionSoftness5;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _UseClipPlane;
uniform 	float _ES_CharacterAmbientLightOn;
uniform 	float _ES_CharacterAmbientBrightness;
uniform 	vec3 _ES_CharacterMainLightColor;
uniform 	vec3 _ES_CharacterAmbientLightColor;
uniform 	float _ES_CharacterMainLightRatio;
uniform 	float _ES_CharacterAmbientLightRatio;
uniform 	float _ES_CharacterColorTone;
uniform 	float _ES_CharacterPointLightWholeIntensity;
uniform 	vec4 mhy_AvatarLightDir;
uniform 	vec4 mhy_CharacterPointLightColor;
uniform 	vec4 mhy_CharacterOverrideLightDir;
uniform 	mediump vec4 _FlowMapColor01;
uniform 	mediump float _FlowScale01;
uniform 	mediump float _FlowMap01_Uspeed;
uniform 	vec4 _FlowMap01_ST;
uniform 	mediump float _FlowMap01_Vspeed;
uniform 	mediump float _Noise_Uspeed;
uniform 	vec4 _Noise_ST;
uniform 	mediump float _Noise_Vspeed;
uniform 	mediump float _NoiseFlowIntensity;
uniform 	mediump float _MaskOffset01;
uniform 	mediump float _NoiseIntensity;
uniform 	mediump float _Mask01_Power;
uniform 	mediump vec4 _FlowMapColor02;
uniform 	mediump float _FlowScale02;
uniform 	mediump float _FlowMap02_Uspeed;
uniform 	vec4 _FlowMap02_ST;
uniform 	mediump float _FlowMap02_Vspeed;
uniform 	mediump float _MaskOffset02;
uniform 	mediump float _Mask02_Power;
uniform 	mediump float _DissolveNoise_Uspeed;
uniform 	vec4 _DissovleNoise_ST;
uniform 	mediump float _DissolveNoise_Vspeed;
uniform 	mediump float _DissovleNoiseScale;
uniform 	mediump float _Dissovle;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _FaceMapTex;
uniform lowp sampler2D _Noise;
uniform lowp sampler2D _FlowMap01;
uniform lowp sampler2D _Mask01;
uniform lowp sampler2D _FlowMap02;
uniform lowp sampler2D _Mask02;
uniform lowp sampler2D _DissovleNoise;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp float vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
vec3 u_xlat2;
mediump vec4 u_xlat16_2;
lowp vec4 u_xlat10_2;
bool u_xlatb2;
vec3 u_xlat3;
mediump float u_xlat16_3;
lowp float u_xlat10_3;
bvec4 u_xlatb3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
bvec4 u_xlatb5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
mediump vec3 u_xlat16_7;
int u_xlati7;
bvec3 u_xlatb7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
vec3 u_xlat11;
bool u_xlatb11;
vec3 u_xlat13;
bool u_xlatb13;
float u_xlat14;
mediump vec3 u_xlat16_14;
bool u_xlatb14;
mediump float u_xlat16_15;
mediump vec3 u_xlat16_17;
mediump vec3 u_xlat16_19;
bvec2 u_xlatb22;
vec2 u_xlat24;
mediump float u_xlat16_25;
int u_xlati25;
mediump float u_xlat16_30;
float u_xlat33;
mediump float u_xlat16_33;
lowp float u_xlat10_33;
bool u_xlatb33;
mediump float u_xlat16_35;
lowp float u_xlat10_35;
float u_xlat36;
int u_xlati36;
bool u_xlatb36;
mediump float u_xlat16_37;
mediump float u_xlat16_39;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseClipPlane));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseClipPlane);
#endif
    u_xlat16_1.x = vs_COLOR0.w + -0.00999999978;
#ifdef UNITY_ADRENO_ES3
    u_xlatb11 = !!(u_xlat16_1.x<0.0);
#else
    u_xlatb11 = u_xlat16_1.x<0.0;
#endif
    u_xlatb0 = u_xlatb0 && u_xlatb11;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(_DitherAlpha<0.949999988);
#else
        u_xlatb0 = _DitherAlpha<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb22.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb22.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb22.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = _DitherAlpha * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + -0.00999999978;
#ifdef UNITY_ADRENO_ES3
            u_xlatb0 = !!(u_xlat0.x<0.0);
#else
            u_xlatb0 = u_xlat0.x<0.0;
#endif
            if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(0.5<mhy_CharacterOverrideLightDir.w);
#else
    u_xlatb2 = 0.5<mhy_CharacterOverrideLightDir.w;
#endif
    u_xlat3.x = mhy_CharacterOverrideLightDir.x;
    u_xlat3.yz = (-mhy_CharacterOverrideLightDir.yz);
    u_xlat2.xyz = (bool(u_xlatb2)) ? u_xlat3.xyz : mhy_AvatarLightDir.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat33) + u_xlat2.xyz;
    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat0.xyz = vec3(u_xlat33) * u_xlat0.xyz;
    u_xlat2.xy = dFdx(vs_TEXCOORD0.xy);
    u_xlat24.xy = dFdy(vs_TEXCOORD0.xy);
    u_xlat2.xy = u_xlat24.xy + u_xlat2.xy;
    u_xlat24.xy = (-u_xlat2.xy) * vec2(0.25, 0.25) + vs_TEXCOORD0.xy;
    u_xlat2.xy = u_xlat2.xy * vec2(0.25, 0.25) + vs_TEXCOORD0.xy;
    u_xlat2.xy = (int(gl_SampleID) != 0) ? u_xlat24.xy : u_xlat2.xy;
    u_xlat1 = textureLod(_MainTex, u_xlat2.xy, 0.0);
    u_xlat16_4.xyz = u_xlat1.xyz * _MainTexTintColor.xyz;
    u_xlat16_5.xyz = u_xlat16_4.xyz + u_xlat16_4.xyz;
    u_xlat16_6.xyz = u_xlat1.xyz + _MainTexTintColor.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_6.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(-4.0, -4.0, -4.0) + u_xlat16_6.xyz;
    u_xlatb3 = lessThan(vec4(0.5, 0.5, 0.5, 0.00999999978), u_xlat1);
    u_xlat16_6.x = (u_xlatb3.x) ? float(1.0) : float(0.0);
    u_xlat16_6.y = (u_xlatb3.y) ? float(1.0) : float(0.0);
    u_xlat16_6.z = (u_xlatb3.z) ? float(1.0) : float(0.0);
    u_xlat16_4.xyz = u_xlat16_4.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat16_4.xyz = u_xlat16_6.xyz * u_xlat16_4.xyz + u_xlat16_5.xyz;
    u_xlatb3.xyz = equal(vec4(_MainTexAlphaUse), vec4(3.0, 1.0, 2.0, 0.0)).xyz;
    u_xlat33 = u_xlat1.w * _FaceBlushStrength;
    u_xlat16_7.xyz = (-u_xlat16_4.xyz) + _FaceBlushColor.xyz;
    u_xlat7.xyz = vec3(u_xlat33) * u_xlat16_7.xyz + u_xlat16_4.xyz;
    u_xlat16_4.xyz = (u_xlatb3.x) ? u_xlat7.xyz : u_xlat16_4.xyz;
    u_xlat16_37 = u_xlat1.w + (-_MainTexAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(u_xlat16_37<0.0);
#else
    u_xlatb33 = u_xlat16_37<0.0;
#endif
    u_xlatb33 = u_xlatb3.y && u_xlatb33;
    if((int(u_xlatb33) * int(0xffffffffu))!=0){discard;}
    u_xlat10_2 = textureLod(_LightMapTex, u_xlat2.xy, 0.0);
    u_xlatb3.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseLightMapColorAO, _UseVertexColorAO, _UseLightMapColorAO, _UseLightMapColorAO)).xy;
    u_xlat16_37 = (u_xlatb3.x) ? u_xlat10_2.y : 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseMaterial2));
#else
    u_xlatb33 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseMaterial2);
#endif
    u_xlatb5 = greaterThanEqual(u_xlat10_2.wwww, vec4(0.800000012, 0.400000006, 0.200000003, 0.600000024));
    u_xlatb33 = u_xlatb33 && u_xlatb5.x;
    u_xlat33 = (u_xlatb33) ? 2.0 : 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb13 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseMaterial3));
#else
    u_xlatb13 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseMaterial3);
#endif
    u_xlatb13 = u_xlatb5.y && u_xlatb13;
    u_xlatb7.xyz = lessThan(u_xlat10_2.wwww, vec4(0.600000024, 0.400000006, 0.800000012, 0.0)).xyz;
    u_xlatb13 = u_xlatb13 && u_xlatb7.x;
    u_xlat33 = (u_xlatb13) ? 3.0 : u_xlat33;
#ifdef UNITY_ADRENO_ES3
    u_xlatb13 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseMaterial4));
#else
    u_xlatb13 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseMaterial4);
#endif
    u_xlatb13 = u_xlatb5.z && u_xlatb13;
    u_xlatb13 = u_xlatb7.y && u_xlatb13;
    u_xlat33 = (u_xlatb13) ? 4.0 : u_xlat33;
#ifdef UNITY_ADRENO_ES3
    u_xlatb13 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseMaterial5));
#else
    u_xlatb13 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseMaterial5);
#endif
    u_xlatb13 = u_xlatb5.w && u_xlatb13;
    u_xlatb13 = u_xlatb7.z && u_xlatb13;
    u_xlat33 = (u_xlatb13) ? 5.0 : u_xlat33;
    u_xlatb5 = equal(vec4(u_xlat33), vec4(2.0, 3.0, 4.0, 5.0));
    u_xlat16_6.xyz = (u_xlatb5.x) ? _Color2.xyz : _Color.xyz;
    u_xlat16_6.xyz = (u_xlatb5.y) ? _Color3.xyz : u_xlat16_6.xyz;
    u_xlat16_6.xyz = (u_xlatb5.z) ? _Color4.xyz : u_xlat16_6.xyz;
    u_xlat16_6.xyz = (u_xlatb5.w) ? _Color5.xyz : u_xlat16_6.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_6.xyz;
    u_xlatb13 = u_xlatb3.w && u_xlatb3.z;
    u_xlat16_6.x = (u_xlatb13) ? u_xlat1.w : 0.0;
    u_xlat10_35 = texture(_FaceMapTex, vs_TEXCOORD6.xy, -1.0).w;
    u_xlat3.x = max(_FaceMapSoftness, 9.99999997e-07);
    u_xlat16_17.x = (-u_xlat3.x) + vs_TEXCOORD6.z;
    u_xlat16_25 = max(u_xlat16_17.x, 9.99999975e-05);
    u_xlat16_25 = min(u_xlat16_25, 0.998899996);
    u_xlat16_17.x = u_xlat3.x + vs_TEXCOORD6.z;
    u_xlat16_3 = min(u_xlat16_17.x, 0.999899983);
    u_xlat16_3 = (-u_xlat16_25) + u_xlat16_3;
    u_xlat16_35 = u_xlat10_35 + (-u_xlat16_25);
    u_xlat16_3 = float(1.0) / u_xlat16_3;
    u_xlat16_35 = u_xlat16_35 * u_xlat16_3;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_35 = min(max(u_xlat16_35, 0.0), 1.0);
#else
    u_xlat16_35 = clamp(u_xlat16_35, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat16_35 * -2.0 + 3.0;
    u_xlat16_35 = u_xlat16_35 * u_xlat16_35;
    u_xlat16_25 = u_xlat16_35 * u_xlat16_3;
    u_xlat16_17.x = u_xlat16_37 * vs_COLOR0.x;
    u_xlat16_37 = (u_xlatb3.y) ? u_xlat16_17.x : u_xlat16_37;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(u_xlat16_37<0.0500000007);
#else
    u_xlatb14 = u_xlat16_37<0.0500000007;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb36 = !!(0.949999988<u_xlat16_37);
#else
    u_xlatb36 = 0.949999988<u_xlat16_37;
#endif
    u_xlat7.x = u_xlat16_37 + vs_TEXCOORD1.w;
    u_xlat7.x = u_xlat7.x * 0.5;
    u_xlat16_37 = (u_xlatb36) ? 1.0 : u_xlat7.x;
    u_xlat16_37 = (u_xlatb14) ? 0.0 : u_xlat16_37;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(u_xlat16_37<_LightArea);
#else
    u_xlatb14 = u_xlat16_37<_LightArea;
#endif
    if(u_xlatb14){
#ifdef UNITY_ADRENO_ES3
        u_xlatb14 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition));
#else
        u_xlatb14 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition);
#endif
#ifdef UNITY_ADRENO_ES3
        u_xlatb36 = !!(u_xlat33==1.0);
#else
        u_xlatb36 = u_xlat33==1.0;
#endif
        u_xlat16_8.x = (u_xlatb36) ? _ShadowTransitionRange : 0.0;
        u_xlat16_8.y = (u_xlatb36) ? _ShadowTransitionSoftness : 0.0;
        u_xlat16_17.xy = (u_xlatb5.x) ? vec2(_ShadowTransitionRange2, _ShadowTransitionSoftness2) : u_xlat16_8.xy;
        u_xlat16_17.xy = (u_xlatb5.y) ? vec2(_ShadowTransitionRange3, _ShadowTransitionSoftness3) : u_xlat16_17.xy;
        u_xlat16_17.xy = (u_xlatb5.z) ? vec2(_ShadowTransitionRange4, _ShadowTransitionSoftness4) : u_xlat16_17.xy;
        u_xlat16_17.xy = (u_xlatb5.w) ? vec2(_ShadowTransitionRange5, _ShadowTransitionSoftness5) : u_xlat16_17.xy;
        u_xlat16_37 = (-u_xlat16_37) + _LightArea;
        u_xlat16_37 = u_xlat16_37 / u_xlat16_17.x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb36 = !!(u_xlat16_37>=1.0);
#else
        u_xlatb36 = u_xlat16_37>=1.0;
#endif
        u_xlat16_7.x = u_xlat16_37 + 0.00999999978;
        u_xlat16_7.x = log2(u_xlat16_7.x);
        u_xlat16_7.x = u_xlat16_17.y * u_xlat16_7.x;
        u_xlat16_7.x = exp2(u_xlat16_7.x);
        u_xlat7.x = min(u_xlat16_7.x, 1.0);
        u_xlat36 = (u_xlatb36) ? 1.0 : u_xlat7.x;
        u_xlat14 = (u_xlatb14) ? u_xlat36 : 1.0;
        u_xlat16_37 = 0.0;
    } else {
        u_xlat14 = 0.0;
        u_xlat16_37 = 1.0;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb36 = !!(0.5<u_xlat10_2.x);
#else
    u_xlatb36 = 0.5<u_xlat10_2.x;
#endif
    u_xlat16_17.x = min(u_xlat16_25, u_xlat16_37);
    u_xlat16_37 = (u_xlatb36) ? u_xlat16_17.x : u_xlat16_37;
    u_xlat16_37 = (-u_xlat16_37) + 1.0;
#ifdef UNITY_ADRENO_ES3
    { bool cond = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(vs_TEXCOORD4); u_xlati25 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati25 = int((vec4(0.0, 0.0, 0.0, 0.0)!=vec4(vs_TEXCOORD4)) ? 0xFFFFFFFFu : uint(0u));
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(u_xlat33==1.0);
#else
    u_xlatb33 = u_xlat33==1.0;
#endif
    if(u_xlatb33){
#ifdef UNITY_ADRENO_ES3
        u_xlatb36 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex));
#else
        u_xlatb36 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex);
#endif
        u_xlat16_7.xyz = vec3(_FirstShadowMultColor.xxyz.y + (-_CoolShadowMultColor.x), _FirstShadowMultColor.xxyz.z + (-_CoolShadowMultColor.y), float(_FirstShadowMultColor.z) + (-_CoolShadowMultColor.z));
        u_xlat7.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_7.xyz + _CoolShadowMultColor.xyz;
        u_xlat16_17.xyz = (bool(u_xlatb36)) ? u_xlat7.xyz : vec3(_FirstShadowMultColor.x, _FirstShadowMultColor.y, _FirstShadowMultColor.z);
    } else {
        if(u_xlatb5.x){
#ifdef UNITY_ADRENO_ES3
            u_xlatb36 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex));
#else
            u_xlatb36 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex);
#endif
            u_xlat16_7.xyz = _FirstShadowMultColor2.xyz + (-_CoolShadowMultColor2.xyz);
            u_xlat7.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_7.xyz + _CoolShadowMultColor2.xyz;
            u_xlat16_17.xyz = (bool(u_xlatb36)) ? u_xlat7.xyz : _FirstShadowMultColor2.xyz;
        } else {
#ifdef UNITY_ADRENO_ES3
            u_xlatb36 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex));
#else
            u_xlatb36 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex);
#endif
            u_xlat16_7.xyz = _FirstShadowMultColor3.xyz + (-_CoolShadowMultColor3.xyz);
            u_xlat7.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_7.xyz + _CoolShadowMultColor3.xyz;
            u_xlat16_8.xyz = (bool(u_xlatb36)) ? u_xlat7.xyz : _FirstShadowMultColor3.xyz;
            u_xlat16_7.xyz = _FirstShadowMultColor4.xyz + (-_CoolShadowMultColor4.xyz);
            u_xlat7.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_7.xyz + _CoolShadowMultColor4.xyz;
            u_xlat16_9.xyz = (bool(u_xlatb36)) ? u_xlat7.xyz : _FirstShadowMultColor4.xyz;
            u_xlat16_7.xyz = _FirstShadowMultColor5.xyz + (-_CoolShadowMultColor5.xyz);
            u_xlat7.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_7.xyz + _CoolShadowMultColor5.xyz;
            u_xlat16_10.xyz = (bool(u_xlatb36)) ? u_xlat7.xyz : _FirstShadowMultColor5.xyz;
            u_xlat16_9.xyz = (u_xlatb5.z) ? u_xlat16_9.xyz : u_xlat16_10.xyz;
            u_xlat16_17.xyz = (u_xlatb5.y) ? u_xlat16_8.xyz : u_xlat16_9.xyz;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb36 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition));
#else
    u_xlatb36 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition);
#endif
    u_xlati7 = ~u_xlati25;
    u_xlati36 = u_xlatb36 ? u_xlati7 : int(0);
    u_xlat16_7.xyz = u_xlat16_17.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat7.xyz = vec3(u_xlat14) * u_xlat16_7.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_17.xyz = (int(u_xlati36) != 0) ? u_xlat7.xyz : u_xlat16_17.xyz;
    u_xlat16_8.x = (-u_xlat16_3) * u_xlat16_35 + 1.0;
    u_xlat16_19.xyz = u_xlat16_17.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat16_8.xyz = u_xlat16_8.xxx * u_xlat16_19.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_17.xyz = (int(u_xlati25) != 0) ? u_xlat16_17.xyz : u_xlat16_8.xyz;
    u_xlat16_8.x = (u_xlatb5.z) ? _Shininess4 : _Shininess5;
    u_xlat16_19.x = (u_xlatb5.z) ? _SpecMulti4 : _SpecMulti5;
    u_xlat16_8.x = (u_xlatb5.y) ? _Shininess3 : u_xlat16_8.x;
    u_xlat16_19.x = (u_xlatb5.y) ? _SpecMulti3 : u_xlat16_19.x;
    u_xlat16_8.x = (u_xlatb5.x) ? _Shininess2 : u_xlat16_8.x;
    u_xlat16_19.x = (u_xlatb5.x) ? _SpecMulti2 : u_xlat16_19.x;
    u_xlat16_8.x = (u_xlatb33) ? _Shininess : u_xlat16_8.x;
    u_xlat16_19.x = (u_xlatb33) ? _SpecMulti : u_xlat16_19.x;
    u_xlat16_30 = dot(vs_TEXCOORD1.xyz, u_xlat0.xyz);
    u_xlat16_30 = max(u_xlat16_30, 0.00100000005);
    u_xlat16_30 = log2(u_xlat16_30);
    u_xlat16_8.x = u_xlat16_30 * u_xlat16_8.x;
    u_xlat16_8.x = exp2(u_xlat16_8.x);
    u_xlat0.x = (-u_xlat10_2.z) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat0.x<u_xlat16_8.x);
#else
    u_xlatb0 = u_xlat0.x<u_xlat16_8.x;
#endif
    u_xlat16_8.xyz = u_xlat16_19.xxx * _SpecularColor.xyz;
    u_xlat16_8.xyz = u_xlat10_2.xxx * u_xlat16_8.xyz;
    u_xlat16_8.xyz = (bool(u_xlatb0)) ? u_xlat16_8.xyz : vec3(0.0, 0.0, 0.0);
    u_xlat16_4.xyz = vec3(u_xlat16_4.x * _EmissionColor_MHY.xxyz.y, u_xlat16_4.y * _EmissionColor_MHY.xxyz.z, u_xlat16_4.z * float(_EmissionColor_MHY.z));
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat16_37==1.0);
#else
    u_xlatb0 = u_xlat16_37==1.0;
#endif
    u_xlati0 = int(uint(u_xlatb0) * 0xffffffffu | uint(u_xlati25));
    u_xlat11.xyz = u_xlat1.xyz * u_xlat16_17.xyz;
    u_xlat0.xyz = (int(u_xlati0) != 0) ? u_xlat11.xyz : u_xlat1.xyz;
    u_xlat0.xyz = u_xlat16_8.xyz + u_xlat0.xyz;
    u_xlat2.xz = vs_TEXCOORD0.zw * _FlowMap01_ST.xy + _FlowMap01_ST.zw;
    u_xlat16_8.x = _Time.y * _FlowMap01_Uspeed + u_xlat2.x;
    u_xlat16_8.y = _Time.y * _FlowMap01_Vspeed + u_xlat2.z;
    u_xlat2.xz = vs_TEXCOORD0.zw * _Noise_ST.xy + _Noise_ST.zw;
    u_xlat16_9.x = _Time.y * _Noise_Uspeed + u_xlat2.x;
    u_xlat16_9.y = _Time.y * _Noise_Vspeed + u_xlat2.z;
    u_xlat10_33 = textureLod(_Noise, u_xlat16_9.xy, 0.0).x;
    u_xlat16_37 = _MaskOffset01 * 1.39999998 + -0.699999988;
    u_xlat16_17.x = u_xlat10_33 * _NoiseIntensity;
    u_xlat2.xz = vs_TEXCOORD0.zw * _FlowMap02_ST.xy + _FlowMap02_ST.zw;
    u_xlat16_9.x = _Time.y * _FlowMap02_Uspeed + u_xlat2.x;
    u_xlat16_9.y = _Time.y * _FlowMap02_Vspeed + u_xlat2.z;
    u_xlat16_39 = _MaskOffset02 * 1.39999998 + -0.699999988;
    u_xlat16_10.xyz = _FlowMapColor01.xyz * vec3(_FlowScale01);
    u_xlat16_8.xy = vec2(u_xlat10_33) * vec2(vec2(_NoiseFlowIntensity, _NoiseFlowIntensity)) + u_xlat16_8.xy;
    u_xlat10_2.x = textureLod(_FlowMap01, u_xlat16_8.xy, 0.0).x;
    u_xlat16_2.xzw = u_xlat10_2.xxx * u_xlat16_10.xyz;
    u_xlat16_8.x = (-vs_TEXCOORD0.z) + 1.0;
    u_xlat16_1.x = u_xlat16_37 + u_xlat16_8.x;
    u_xlat16_1.yw = vec2(u_xlat10_33) * vec2(vec2(_NoiseIntensity, _NoiseIntensity)) + (-vs_TEXCOORD0.ww);
    u_xlat16_17.y = 1.0;
    u_xlat16_19.xy = u_xlat16_1.xy + u_xlat16_17.xy;
    u_xlat10_3 = textureLod(_Mask01, u_xlat16_19.xy, 0.0).x;
    u_xlat16_3 = max(u_xlat10_3, 9.99999975e-05);
    u_xlat16_3 = log2(u_xlat16_3);
    u_xlat16_3 = u_xlat16_3 * _Mask01_Power;
    u_xlat16_3 = exp2(u_xlat16_3);
    u_xlat16_19.xyz = _FlowMapColor02.xyz * vec3(_FlowScale02);
    u_xlat16_9.xy = vec2(u_xlat10_33) * vec2(vec2(_NoiseFlowIntensity, _NoiseFlowIntensity)) + u_xlat16_9.xy;
    u_xlat10_33 = textureLod(_FlowMap02, u_xlat16_9.xy, 0.0).x;
    u_xlat16_14.xyz = vec3(u_xlat10_33) * u_xlat16_19.xyz;
    u_xlat16_1.z = u_xlat16_39 + u_xlat16_8.x;
    u_xlat16_17.xy = vec2(u_xlat16_1.z + u_xlat16_17.x, u_xlat16_1.w + u_xlat16_17.y);
    u_xlat10_33 = textureLod(_Mask02, u_xlat16_17.xy, 0.0).x;
    u_xlat16_33 = max(u_xlat10_33, 9.99999975e-05);
    u_xlat16_33 = log2(u_xlat16_33);
    u_xlat16_33 = u_xlat16_33 * _Mask02_Power;
    u_xlat16_33 = exp2(u_xlat16_33);
    u_xlat16_14.xyz = vec3(u_xlat16_33) * u_xlat16_14.xyz;
    u_xlat16_2.xzw = u_xlat16_2.xzw * vec3(u_xlat16_3) + u_xlat16_14.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(_EmissionScaler) + u_xlat16_2.xzw;
    u_xlat3.xyz = (-u_xlat0.xyz) + u_xlat16_4.xyz;
    u_xlat3.xyz = u_xlat16_6.xxx * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat7.xy = vs_TEXCOORD0.zw * _DissovleNoise_ST.xy + _DissovleNoise_ST.zw;
    u_xlat16_4.x = _Time.y * _DissolveNoise_Uspeed + u_xlat7.x;
    u_xlat16_4.y = _Time.y * _DissolveNoise_Vspeed + u_xlat7.y;
    u_xlat10_33 = textureLod(_DissovleNoise, u_xlat16_4.xy, 0.0).x;
    u_xlat33 = u_xlat10_33 * _DissovleNoiseScale + vs_TEXCOORD0.z;
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(_Dissovle>=u_xlat33);
#else
    u_xlatb33 = _Dissovle>=u_xlat33;
#endif
    u_xlat0.xyz = (bool(u_xlatb13)) ? u_xlat3.xyz : u_xlat0.xyz;
    u_xlat0.xyz = u_xlat16_2.xzw + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(0.00999999978<u_xlat16_6.x);
#else
    u_xlatb2 = 0.00999999978<u_xlat16_6.x;
#endif
    if((int(u_xlatb33) * int(0xffffffffu))==0){discard;}
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn));
#else
    u_xlatb33 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn);
#endif
    u_xlat13.xyz = u_xlat0.xyz * vec3(vec3(_ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness));
    u_xlat3.xyz = vec3(vec3(_ES_CharacterPointLightWholeIntensity, _ES_CharacterPointLightWholeIntensity, _ES_CharacterPointLightWholeIntensity)) * mhy_CharacterPointLightColor.xyz;
    u_xlat7.xyz = _ES_CharacterMainLightColor.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.xyz = min(max(u_xlat7.xyz, 0.0), 1.0);
#else
    u_xlat7.xyz = clamp(u_xlat7.xyz, 0.0, 1.0);
#endif
    u_xlat36 = (-mhy_CharacterPointLightColor.w) + 1.0;
    u_xlat3.xyz = u_xlat7.xyz * vec3(u_xlat36) + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat3.xyz = vec3(vec3(_ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio)) * u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat13.xyz = u_xlat13.xyz * u_xlat3.xyz;
    u_xlat3.xyz = _ES_CharacterAmbientLightColor.xyz * vec3(_ES_CharacterAmbientLightRatio);
    u_xlat16_4.xyz = u_xlat13.xyz * vec3(10.0, 10.0, 10.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.xyz = min(max(u_xlat16_4.xyz, 0.0), 1.0);
#else
    u_xlat16_4.xyz = clamp(u_xlat16_4.xyz, 0.0, 1.0);
#endif
    u_xlat13.xyz = u_xlat3.xyz * u_xlat16_4.xyz + u_xlat13.xyz;
    u_xlat16_4.xyz = (bool(u_xlatb33)) ? u_xlat13.xyz : u_xlat0.xyz;
    u_xlat16_17.xyz = u_xlat0.xyz + (-u_xlat16_4.xyz);
    u_xlat16_17.xyz = u_xlat16_6.xxx * u_xlat16_17.xyz + u_xlat16_4.xyz;
    u_xlat16_0.xyz = (bool(u_xlatb2)) ? u_xlat16_17.xyz : u_xlat16_4.xyz;
    u_xlat16_4.x = max(u_xlat16_0.z, u_xlat16_0.y);
    u_xlat16_1.w = max(u_xlat16_0.x, u_xlat16_4.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(1.0<u_xlat16_1.w);
#else
    u_xlatb2 = 1.0<u_xlat16_1.w;
#endif
    u_xlat16_1.xyz = u_xlat16_0.xyz / u_xlat16_1.www;
    u_xlat16_0.w = 1.0;
    u_xlat16_0 = (bool(u_xlatb2)) ? u_xlat16_1 : u_xlat16_0;
    u_xlat16_4.x = min(u_xlat16_0.w, 1.10000002);
    u_xlat16_15 = u_xlat16_0.w + (-u_xlat16_4.x);
    u_xlat16_4.x = u_xlat16_6.x * u_xlat16_15 + u_xlat16_4.x;
    u_xlat16_2.x = u_xlat16_4.x * 0.0500000007;
    SV_Target0.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb13 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb13 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_4.x = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb13) ? u_xlat16_4.x : 0.0;
    SV_Target0.w = 0.0156862754;
    SV_Target1.xyz = u_xlat16_0.xyz;
    SV_Target1.w = u_xlat16_2.x;
    SV_Target2.xy = vec2(0.0, 0.0);
    SV_Target2.w = vs_TEXCOORD4;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "LINE_INTERPOLATION" "MAIN_TEX_COLORING_ON" "FACE_MAP_NEW_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	vec4 _MainTex_ST;
uniform 	float _FaceMapRotateOffset;
uniform 	float _CharacterAmbientSensorShadowOn;
uniform 	vec4 _AmbientSensorUVs;
uniform 	float _UseClipPlane;
uniform 	float _ClipPlaneWorld;
uniform 	vec4 _ClipPlane;
uniform 	vec4 mhy_AvatarLightDir;
uniform 	vec4 mhy_CharacterOverrideLightDir;
uniform lowp sampler2D _CharacterAmbientSensorTex;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp float vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD6;
vec3 u_xlat0;
bool u_xlatb0;
vec3 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
bool u_xlatb3;
vec4 u_xlat4;
vec4 u_xlat5;
mediump vec2 u_xlat16_6;
float u_xlat7;
bool u_xlatb7;
vec3 u_xlat8;
bvec2 u_xlatb8;
bool u_xlatb9;
mediump float u_xlat16_13;
float u_xlat14;
bool u_xlatb14;
float u_xlat15;
float u_xlat21;
float u_xlat22;
bool u_xlatb22;
float u_xlat23;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.5<mhy_CharacterOverrideLightDir.w);
#else
    u_xlatb0 = 0.5<mhy_CharacterOverrideLightDir.w;
#endif
    u_xlat1.x = mhy_CharacterOverrideLightDir.x;
    u_xlat1.yz = (-mhy_CharacterOverrideLightDir.yz);
    u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat1.xyz : mhy_AvatarLightDir.xyz;
    u_xlat21 = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_ObjectToWorld[1].xyz);
    u_xlat1.x = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_ObjectToWorld[2].xyz);
    u_xlatb8.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseClipPlane, _ClipPlaneWorld, _UseClipPlane, _UseClipPlane)).xy;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(abs(_ClipPlane.w)<0.00100000005);
#else
    u_xlatb22 = abs(_ClipPlane.w)<0.00100000005;
#endif
    u_xlat2.xyz = _ClipPlane.www * _ClipPlane.xyz;
    u_xlat2.xyz = (bool(u_xlatb22)) ? vec3(0.0, 0.0, 0.0) : u_xlat2.xyz;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_WorldToObject[1];
    u_xlat3 = hlslcc_mtx4x4unity_WorldToObject[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat2 = hlslcc_mtx4x4unity_WorldToObject[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat2 = u_xlat2 + hlslcc_mtx4x4unity_WorldToObject[3];
    u_xlat2.xyz = u_xlat2.xyz / u_xlat2.www;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * _ClipPlane.yyy;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _ClipPlane.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _ClipPlane.zzz + u_xlat3.xyz;
    u_xlat22 = dot(u_xlat2.xyz, u_xlat3.xyz);
    u_xlat2.x = dot(in_POSITION0.xyz, u_xlat3.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(u_xlat2.x<u_xlat22);
#else
    u_xlatb9 = u_xlat2.x<u_xlat22;
#endif
    u_xlat22 = (-u_xlat22) + u_xlat2.x;
    u_xlat3.xyz = (-vec3(u_xlat22)) * u_xlat3.xyz + in_POSITION0.xyz;
    u_xlat3.w = 0.0;
    u_xlat4.xyz = in_POSITION0.xyz;
    u_xlat4.w = in_COLOR0.w;
    u_xlat2 = (bool(u_xlatb9)) ? u_xlat3 : u_xlat4;
    u_xlat22 = dot(in_POSITION0.xyz, _ClipPlane.xyz);
    u_xlat3.x = _ClipPlane.w + -0.00999999978;
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(u_xlat22<u_xlat3.x);
#else
    u_xlatb3 = u_xlat22<u_xlat3.x;
#endif
    u_xlat22 = u_xlat22 + (-_ClipPlane.w);
    u_xlat5.xyz = (-vec3(u_xlat22)) * _ClipPlane.xyz + in_POSITION0.xyz;
    u_xlat5.w = 0.0;
    u_xlat3 = (bool(u_xlatb3)) ? u_xlat5 : u_xlat4;
    u_xlat2.xyz = (u_xlatb8.y) ? u_xlat2.xyz : u_xlat3.xyz;
    u_xlat16_6.x = (u_xlatb8.y) ? u_xlat2.w : u_xlat3.w;
    u_xlat2.xyz = (u_xlatb8.x) ? u_xlat2.xyz : in_POSITION0.xyz;
    vs_COLOR0.w = (u_xlatb8.x) ? u_xlat16_6.x : in_COLOR0.w;
    u_xlat3.xyw = (-_WorldSpaceCameraPos.xyz) + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat4.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;
    u_xlat4.y = hlslcc_mtx4x4unity_ObjectToWorld[1].x;
    u_xlat4.z = hlslcc_mtx4x4unity_ObjectToWorld[2].x;
    u_xlat4.w = u_xlat3.x;
    u_xlat2.w = 1.0;
    u_xlat8.x = dot(u_xlat4, u_xlat2);
    u_xlat4.x = hlslcc_mtx4x4unity_ObjectToWorld[0].y;
    u_xlat4.y = hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat4.z = hlslcc_mtx4x4unity_ObjectToWorld[2].y;
    u_xlat4.w = u_xlat3.y;
    u_xlat15 = dot(u_xlat4, u_xlat2);
    u_xlat3.x = hlslcc_mtx4x4unity_ObjectToWorld[0].z;
    u_xlat3.y = hlslcc_mtx4x4unity_ObjectToWorld[1].z;
    u_xlat3.z = hlslcc_mtx4x4unity_ObjectToWorld[2].z;
    u_xlat22 = dot(u_xlat3, u_xlat2);
    u_xlat3.x = hlslcc_mtx4x4unity_ObjectToWorld[0].w;
    u_xlat3.y = hlslcc_mtx4x4unity_ObjectToWorld[1].w;
    u_xlat3.z = hlslcc_mtx4x4unity_ObjectToWorld[2].w;
    u_xlat3.w = hlslcc_mtx4x4unity_ObjectToWorld[3].w;
    u_xlat23 = dot(u_xlat3, u_xlat2);
    u_xlat3 = vec4(u_xlat15) * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat8.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVPZero[2] * vec4(u_xlat22) + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVPZero[3] * vec4(u_xlat23) + u_xlat3;
    u_xlat4 = u_xlat2.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat4 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat2.xxxx + u_xlat4;
    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat2.zzzz + u_xlat4;
    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat2;
    vs_TEXCOORD3.xyz = u_xlat2.xyz / u_xlat2.www;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat2.xz = u_xlat3.xw * vec2(0.5, 0.5);
    u_xlat8.x = u_xlat3.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat8.x * 0.5;
    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat8.xyz = in_NORMAL0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat8.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_NORMAL0.xxx + u_xlat8.xyz;
    u_xlat8.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_NORMAL0.zzz + u_xlat8.xyz;
    u_xlat2.x = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat8.xyz = u_xlat8.xyz * u_xlat2.xxx;
    u_xlat16_6.x = dot(u_xlat8.xyz, u_xlat0.xyz);
    vs_TEXCOORD1.w = u_xlat16_6.x * 0.497500002 + 0.5;
    u_xlat16_6.x = min(abs(u_xlat21), abs(u_xlat1.x));
    u_xlat16_13 = max(abs(u_xlat21), abs(u_xlat1.x));
    u_xlat16_13 = float(1.0) / u_xlat16_13;
    u_xlat16_6.x = u_xlat16_13 * u_xlat16_6.x;
    u_xlat16_13 = u_xlat16_6.x * u_xlat16_6.x;
    u_xlat0.x = u_xlat16_13 * 0.0208350997 + -0.0851330012;
    u_xlat0.x = u_xlat16_13 * u_xlat0.x + 0.180141002;
    u_xlat0.x = u_xlat16_13 * u_xlat0.x + -0.330299497;
    u_xlat0.x = u_xlat16_13 * u_xlat0.x + 0.999866009;
    u_xlat7 = u_xlat0.x * u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(abs(u_xlat21)<abs(u_xlat1.x));
#else
    u_xlatb14 = abs(u_xlat21)<abs(u_xlat1.x);
#endif
    u_xlat7 = u_xlat7 * -2.0 + 1.57079637;
    u_xlat7 = u_xlatb14 ? u_xlat7 : float(0.0);
    u_xlat0.x = u_xlat16_6.x * u_xlat0.x + u_xlat7;
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(u_xlat21<(-u_xlat21));
#else
    u_xlatb7 = u_xlat21<(-u_xlat21);
#endif
    u_xlat7 = u_xlatb7 ? -3.14159274 : float(0.0);
    u_xlat0.x = u_xlat7 + u_xlat0.x;
    u_xlat16_6.x = min(u_xlat21, u_xlat1.x);
    u_xlat16_13 = max(u_xlat21, u_xlat1.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(u_xlat16_6.x<(-u_xlat16_6.x));
#else
    u_xlatb7 = u_xlat16_6.x<(-u_xlat16_6.x);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(u_xlat16_13>=(-u_xlat16_13));
#else
    u_xlatb14 = u_xlat16_13>=(-u_xlat16_13);
#endif
    u_xlatb7 = u_xlatb14 && u_xlatb7;
    u_xlat0.x = (u_xlatb7) ? (-u_xlat0.x) : u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(0.0<(-u_xlat0.x));
#else
    u_xlatb7 = 0.0<(-u_xlat0.x);
#endif
    u_xlat16_6.x = u_xlat0.x * -0.318309903;
    u_xlat0.x = max(_FaceMapRotateOffset, 0.0);
    u_xlat14 = _FaceMapRotateOffset + 1.0;
    u_xlat14 = min(u_xlat14, 1.0);
    u_xlat14 = (-u_xlat0.x) + u_xlat14;
    u_xlat0.x = (-u_xlat0.x) + abs(u_xlat16_6.x);
    u_xlat14 = float(1.0) / u_xlat14;
    u_xlat0.x = u_xlat14 * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat14 = u_xlat0.x * -2.0 + 3.0;
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * u_xlat14;
    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);
    u_xlat0.x = min(u_xlat0.x, 0.999899983);
    u_xlat16_6.xy = in_TEXCOORD0.xy * vec2(-1.0, 1.0) + vec2(1.0, 0.0);
    vs_TEXCOORD6.xy = (bool(u_xlatb7)) ? u_xlat16_6.xy : in_TEXCOORD0.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_CharacterAmbientSensorShadowOn));
#else
    u_xlatb7 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_CharacterAmbientSensorShadowOn);
#endif
    if(u_xlatb7){
        u_xlat7 = textureLod(_CharacterAmbientSensorTex, _AmbientSensorUVs.xy, 0.0).x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb7 = !!(0.5<u_xlat7);
#else
        u_xlatb7 = 0.5<u_xlat7;
#endif
        vs_TEXCOORD4 = u_xlatb7 ? 1.0 : float(0.0);
    } else {
        vs_TEXCOORD4 = 0.0;
    //ENDIF
    }
    gl_Position = u_xlat3;
    vs_COLOR0.xyz = in_COLOR0.xyz;
    vs_TEXCOORD1.xyz = u_xlat8.xyz;
    vs_TEXCOORD2.zw = u_xlat3.zw;
    vs_TEXCOORD6.z = u_xlat0.x;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	mediump vec4 _Color;
uniform 	float _MainTexAlphaUse;
uniform 	mediump float _MainTexAlphaCutoff;
uniform 	mediump vec4 _MainTexTintColor;
uniform 	float _UseVertexColorAO;
uniform 	mediump float _LightArea;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	float _UseCoolShadowColorOrTex;
uniform 	mediump vec3 _CoolShadowMultColor;
uniform 	float _UseShadowTransition;
uniform 	float _ShadowTransitionRange;
uniform 	float _ShadowTransitionSoftness;
uniform 	mediump vec3 _SpecularColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	float _FaceBlushStrength;
uniform 	mediump vec3 _FaceBlushColor;
uniform 	mediump float _EmissionScaler;
uniform 	mediump vec3 _EmissionColor_MHY;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _TextureBiasWhenDithering;
uniform 	float _UseClipPlane;
uniform 	float _ES_CharacterAmbientLightOn;
uniform 	float _ES_CharacterAmbientBrightness;
uniform 	vec3 _ES_CharacterMainLightColor;
uniform 	vec3 _ES_CharacterAmbientLightColor;
uniform 	float _ES_CharacterMainLightRatio;
uniform 	float _ES_CharacterAmbientLightRatio;
uniform 	float _ES_CharacterColorTone;
uniform 	float _ES_CharacterPointLightWholeIntensity;
uniform 	vec4 mhy_AvatarLightDir;
uniform 	vec4 mhy_CharacterPointLightColor;
uniform 	vec4 mhy_CharacterOverrideLightDir;
uniform 	mediump vec4 _FlowMapColor01;
uniform 	mediump float _FlowScale01;
uniform 	mediump float _FlowMap01_Uspeed;
uniform 	vec4 _FlowMap01_ST;
uniform 	mediump float _FlowMap01_Vspeed;
uniform 	mediump float _Noise_Uspeed;
uniform 	vec4 _Noise_ST;
uniform 	mediump float _Noise_Vspeed;
uniform 	mediump float _NoiseFlowIntensity;
uniform 	mediump float _MaskOffset01;
uniform 	mediump float _NoiseIntensity;
uniform 	mediump float _Mask01_Power;
uniform 	mediump vec4 _FlowMapColor02;
uniform 	mediump float _FlowScale02;
uniform 	mediump float _FlowMap02_Uspeed;
uniform 	vec4 _FlowMap02_ST;
uniform 	mediump float _FlowMap02_Vspeed;
uniform 	mediump float _MaskOffset02;
uniform 	mediump float _Mask02_Power;
uniform 	mediump float _DissolveNoise_Uspeed;
uniform 	vec4 _DissovleNoise_ST;
uniform 	mediump float _DissolveNoise_Vspeed;
uniform 	mediump float _DissovleNoiseScale;
uniform 	mediump float _Dissovle;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _Noise;
uniform lowp sampler2D _FlowMap01;
uniform lowp sampler2D _Mask01;
uniform lowp sampler2D _FlowMap02;
uniform lowp sampler2D _Mask02;
uniform lowp sampler2D _DissovleNoise;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp float vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
lowp float u_xlat10_2;
int u_xlati2;
bvec4 u_xlatb2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
lowp float u_xlat10_3;
int u_xlati3;
bool u_xlatb3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec2 u_xlat16_7;
mediump vec3 u_xlat16_8;
vec3 u_xlat9;
bool u_xlatb10;
vec3 u_xlat12;
mediump vec3 u_xlat16_12;
lowp float u_xlat10_12;
int u_xlati12;
bool u_xlatb12;
vec3 u_xlat13;
mediump vec3 u_xlat16_13;
mediump float u_xlat16_14;
mediump vec2 u_xlat16_15;
mediump vec2 u_xlat16_16;
bvec2 u_xlatb20;
float u_xlat22;
bool u_xlatb22;
mediump vec2 u_xlat16_25;
float u_xlat30;
bool u_xlatb30;
float u_xlat32;
mediump float u_xlat16_32;
lowp float u_xlat10_32;
int u_xlati32;
bool u_xlatb32;
float u_xlat33;
mediump float u_xlat16_34;
mediump float u_xlat16_35;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseClipPlane));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseClipPlane);
#endif
    u_xlat16_1.x = vs_COLOR0.w + -0.00999999978;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(u_xlat16_1.x<0.0);
#else
    u_xlatb10 = u_xlat16_1.x<0.0;
#endif
    u_xlatb0 = u_xlatb0 && u_xlatb10;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(_DitherAlpha<0.949999988);
#else
        u_xlatb0 = _DitherAlpha<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb20.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb20.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb20.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = _DitherAlpha * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + -0.00999999978;
#ifdef UNITY_ADRENO_ES3
            u_xlatb0 = !!(u_xlat0.x<0.0);
#else
            u_xlatb0 = u_xlat0.x<0.0;
#endif
            if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(0.5<mhy_CharacterOverrideLightDir.w);
#else
    u_xlatb2.x = 0.5<mhy_CharacterOverrideLightDir.w;
#endif
    u_xlat3.x = mhy_CharacterOverrideLightDir.x;
    u_xlat3.yz = (-mhy_CharacterOverrideLightDir.yz);
    u_xlat2.xyz = (u_xlatb2.x) ? u_xlat3.xyz : mhy_AvatarLightDir.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat30) + u_xlat2.xyz;
    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
    u_xlat30 = _TextureBiasWhenDithering + -1.0;
    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy, u_xlat30);
    u_xlat16_4.xyz = u_xlat1.xyz * _MainTexTintColor.xyz;
    u_xlat16_5.xyz = u_xlat16_4.xyz + u_xlat16_4.xyz;
    u_xlat16_6.xyz = u_xlat1.xyz + _MainTexTintColor.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_6.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(-4.0, -4.0, -4.0) + u_xlat16_6.xyz;
    u_xlatb2 = lessThan(vec4(0.5, 0.5, 0.5, 0.00999999978), u_xlat1);
    u_xlat16_6.x = (u_xlatb2.x) ? float(1.0) : float(0.0);
    u_xlat16_6.y = (u_xlatb2.y) ? float(1.0) : float(0.0);
    u_xlat16_6.z = (u_xlatb2.z) ? float(1.0) : float(0.0);
    u_xlat16_4.xyz = u_xlat16_4.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat16_4.xyz = u_xlat16_6.xyz * u_xlat16_4.xyz + u_xlat16_5.xyz;
    u_xlatb2.xyz = equal(vec4(_MainTexAlphaUse), vec4(3.0, 1.0, 2.0, 0.0)).xyz;
    u_xlat30 = u_xlat1.w * _FaceBlushStrength;
    u_xlat16_3.xyz = (-u_xlat16_4.xyz) + _FaceBlushColor.xyz;
    u_xlat3.xyz = vec3(u_xlat30) * u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat16_4.xyz = (u_xlatb2.x) ? u_xlat3.xyz : u_xlat16_4.xyz;
    u_xlat16_34 = u_xlat1.w + (-_MainTexAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(u_xlat16_34<0.0);
#else
    u_xlatb30 = u_xlat16_34<0.0;
#endif
    u_xlatb30 = u_xlatb2.y && u_xlatb30;
    if((int(u_xlatb30) * int(0xffffffffu))!=0){discard;}
    u_xlat16_4.xyz = u_xlat16_4.xyz * _Color.xyz;
    u_xlatb30 = u_xlatb2.w && u_xlatb2.z;
    u_xlat16_34 = (u_xlatb30) ? u_xlat1.w : 0.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorAO));
#else
    u_xlatb2.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorAO);
#endif
    u_xlat16_5.x = vs_COLOR0.x * 0.5;
    u_xlat16_5.x = (u_xlatb2.x) ? u_xlat16_5.x : 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat16_5.x<0.0500000007);
#else
    u_xlatb12 = u_xlat16_5.x<0.0500000007;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(0.949999988<u_xlat16_5.x);
#else
    u_xlatb22 = 0.949999988<u_xlat16_5.x;
#endif
    u_xlat32 = u_xlat16_5.x + vs_TEXCOORD1.w;
    u_xlat32 = u_xlat32 * 0.5;
    u_xlat16_5.x = (u_xlatb22) ? 1.0 : u_xlat32;
    u_xlat16_5.x = (u_xlatb12) ? 0.0 : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb2.x) ? u_xlat16_5.x : vs_TEXCOORD1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(u_xlat16_5.x<_LightArea);
#else
    u_xlatb2.x = u_xlat16_5.x<_LightArea;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition));
#else
    u_xlatb12 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition);
#endif
    u_xlat16_5.x = (-u_xlat16_5.x) + _LightArea;
    u_xlat16_5.x = u_xlat16_5.x / _ShadowTransitionRange;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(u_xlat16_5.x>=1.0);
#else
    u_xlatb22 = u_xlat16_5.x>=1.0;
#endif
    u_xlat16_32 = u_xlat16_5.x + 0.00999999978;
    u_xlat16_32 = log2(u_xlat16_32);
    u_xlat32 = u_xlat16_32 * _ShadowTransitionSoftness;
    u_xlat32 = exp2(u_xlat32);
    u_xlat32 = min(u_xlat32, 1.0);
    u_xlat22 = (u_xlatb22) ? 1.0 : u_xlat32;
    u_xlat22 = (u_xlatb12) ? u_xlat22 : 1.0;
    u_xlat22 = u_xlatb2.x ? u_xlat22 : float(0.0);
#ifdef UNITY_ADRENO_ES3
    { bool cond = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(vs_TEXCOORD4); u_xlati32 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati32 = int((vec4(0.0, 0.0, 0.0, 0.0)!=vec4(vs_TEXCOORD4)) ? 0xFFFFFFFFu : uint(0u));
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex));
#else
    u_xlatb3 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex);
#endif
    u_xlat16_13.xyz = vec3(_FirstShadowMultColor.xxyz.y + (-_CoolShadowMultColor.x), _FirstShadowMultColor.xxyz.z + (-_CoolShadowMultColor.y), float(_FirstShadowMultColor.z) + (-_CoolShadowMultColor.z));
    u_xlat13.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_13.xyz + _CoolShadowMultColor.xyz;
    u_xlat16_5.xyz = (bool(u_xlatb3)) ? u_xlat13.xyz : vec3(_FirstShadowMultColor.x, _FirstShadowMultColor.y, _FirstShadowMultColor.z);
    u_xlati3 = ~u_xlati32;
    u_xlati12 = u_xlatb12 ? u_xlati3 : int(0);
    u_xlat16_3.xyz = u_xlat16_5.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat3.xyz = vec3(u_xlat22) * u_xlat16_3.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_5.xyz = (int(u_xlati12) != 0) ? u_xlat3.xyz : u_xlat16_5.xyz;
    u_xlat16_5.xyz = (int(u_xlati32) != 0) ? u_xlat16_5.xyz : vec3(1.0, 1.0, 1.0);
    u_xlat16_35 = dot(vs_TEXCOORD1.xyz, u_xlat0.xyz);
    u_xlat16_35 = max(u_xlat16_35, 0.00100000005);
    u_xlat16_35 = log2(u_xlat16_35);
    u_xlat16_35 = u_xlat16_35 * _Shininess;
    u_xlat16_35 = exp2(u_xlat16_35);
    u_xlat16_6.xyz = vec3(u_xlat16_35) * _SpecularColor.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(_SpecMulti);
    u_xlat16_4.xyz = vec3(u_xlat16_4.x * _EmissionColor_MHY.xxyz.y, u_xlat16_4.y * _EmissionColor_MHY.xxyz.z, u_xlat16_4.z * float(_EmissionColor_MHY.z));
    u_xlat0.xyz = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0).xyz;
    u_xlati2 = int(uint(u_xlatb2.x) * 0xffffffffu | uint(u_xlati32));
    u_xlat12.xyz = u_xlat0.xyz * u_xlat16_5.xyz;
    u_xlat0.xyz = (int(u_xlati2) != 0) ? u_xlat12.xyz : u_xlat0.xyz;
    u_xlat0.xyz = u_xlat16_6.xyz * vec3(0.5, 0.5, 0.5) + u_xlat0.xyz;
    u_xlat2.xy = vs_TEXCOORD0.zw * _FlowMap01_ST.xy + _FlowMap01_ST.zw;
    u_xlat16_5.x = _Time.y * _FlowMap01_Uspeed + u_xlat2.x;
    u_xlat16_5.y = _Time.y * _FlowMap01_Vspeed + u_xlat2.y;
    u_xlat2.xy = vs_TEXCOORD0.zw * _Noise_ST.xy + _Noise_ST.zw;
    u_xlat16_6.x = _Time.y * _Noise_Uspeed + u_xlat2.x;
    u_xlat16_6.y = _Time.y * _Noise_Vspeed + u_xlat2.y;
    u_xlat10_2 = textureLod(_Noise, u_xlat16_6.xy, 0.0).x;
    u_xlat16_25.x = _MaskOffset01 * 1.39999998 + -0.699999988;
    u_xlat16_16.x = u_xlat10_2 * _NoiseIntensity;
    u_xlat12.xy = vs_TEXCOORD0.zw * _FlowMap02_ST.xy + _FlowMap02_ST.zw;
    u_xlat16_7.x = _Time.y * _FlowMap02_Uspeed + u_xlat12.x;
    u_xlat16_7.y = _Time.y * _FlowMap02_Vspeed + u_xlat12.y;
    u_xlat16_25.y = _MaskOffset02 * 1.39999998 + -0.699999988;
    u_xlat16_8.xyz = _FlowMapColor01.xyz * vec3(_FlowScale01);
    u_xlat16_5.xy = vec2(u_xlat10_2) * vec2(vec2(_NoiseFlowIntensity, _NoiseFlowIntensity)) + u_xlat16_5.xy;
    u_xlat10_12 = textureLod(_FlowMap01, u_xlat16_5.xy, 0.0).x;
    u_xlat16_12.xyz = vec3(u_xlat10_12) * u_xlat16_8.xyz;
    u_xlat16_5.x = (-vs_TEXCOORD0.z) + 1.0;
    u_xlat16_1.xz = u_xlat16_25.xy + u_xlat16_5.xx;
    u_xlat16_1.yw = vec2(u_xlat10_2) * vec2(vec2(_NoiseIntensity, _NoiseIntensity)) + (-vs_TEXCOORD0.ww);
    u_xlat16_16.y = 1.0;
    u_xlat16_15.xy = u_xlat16_1.xy + u_xlat16_16.xy;
    u_xlat10_3 = textureLod(_Mask01, u_xlat16_15.xy, 0.0).x;
    u_xlat16_3.x = max(u_xlat10_3, 9.99999975e-05);
    u_xlat16_3.x = log2(u_xlat16_3.x);
    u_xlat16_3.x = u_xlat16_3.x * _Mask01_Power;
    u_xlat16_3.x = exp2(u_xlat16_3.x);
    u_xlat16_8.xyz = _FlowMapColor02.xyz * vec3(_FlowScale02);
    u_xlat16_15.xy = vec2(u_xlat10_2) * vec2(vec2(_NoiseFlowIntensity, _NoiseFlowIntensity)) + u_xlat16_7.xy;
    u_xlat10_2 = textureLod(_FlowMap02, u_xlat16_15.xy, 0.0).x;
    u_xlat16_13.xyz = vec3(u_xlat10_2) * u_xlat16_8.xyz;
    u_xlat16_5.xy = vec2(u_xlat16_1.z + u_xlat16_16.x, u_xlat16_1.w + u_xlat16_16.y);
    u_xlat10_2 = textureLod(_Mask02, u_xlat16_5.xy, 0.0).x;
    u_xlat16_2.x = max(u_xlat10_2, 9.99999975e-05);
    u_xlat16_2.x = log2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * _Mask02_Power;
    u_xlat16_2.x = exp2(u_xlat16_2.x);
    u_xlat16_13.xyz = u_xlat16_2.xxx * u_xlat16_13.xyz;
    u_xlat16_2.xyz = u_xlat16_12.xyz * u_xlat16_3.xxx + u_xlat16_13.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(_EmissionScaler) + u_xlat16_2.xyz;
    u_xlat3.xyz = (-u_xlat0.xyz) + u_xlat16_4.xyz;
    u_xlat3.xyz = vec3(u_xlat16_34) * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat9.xy = vs_TEXCOORD0.zw * _DissovleNoise_ST.xy + _DissovleNoise_ST.zw;
    u_xlat16_4.x = _Time.y * _DissolveNoise_Uspeed + u_xlat9.x;
    u_xlat16_4.y = _Time.y * _DissolveNoise_Vspeed + u_xlat9.y;
    u_xlat10_32 = textureLod(_DissovleNoise, u_xlat16_4.xy, 0.0).x;
    u_xlat32 = u_xlat10_32 * _DissovleNoiseScale + vs_TEXCOORD0.z;
#ifdef UNITY_ADRENO_ES3
    u_xlatb32 = !!(_Dissovle>=u_xlat32);
#else
    u_xlatb32 = _Dissovle>=u_xlat32;
#endif
    u_xlat0.xyz = (bool(u_xlatb30)) ? u_xlat3.xyz : u_xlat0.xyz;
    u_xlat0.xyz = u_xlat16_2.xyz + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(0.00999999978<u_xlat16_34);
#else
    u_xlatb30 = 0.00999999978<u_xlat16_34;
#endif
    if((int(u_xlatb32) * int(0xffffffffu))==0){discard;}
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn));
#else
    u_xlatb2.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn);
#endif
    u_xlat12.xyz = u_xlat0.xyz * vec3(vec3(_ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness));
    u_xlat3.xyz = vec3(vec3(_ES_CharacterPointLightWholeIntensity, _ES_CharacterPointLightWholeIntensity, _ES_CharacterPointLightWholeIntensity)) * mhy_CharacterPointLightColor.xyz;
    u_xlat9.xyz = _ES_CharacterMainLightColor.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat9.xyz = min(max(u_xlat9.xyz, 0.0), 1.0);
#else
    u_xlat9.xyz = clamp(u_xlat9.xyz, 0.0, 1.0);
#endif
    u_xlat33 = (-mhy_CharacterPointLightColor.w) + 1.0;
    u_xlat3.xyz = u_xlat9.xyz * vec3(u_xlat33) + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat3.xyz = vec3(vec3(_ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio)) * u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat12.xyz = u_xlat12.xyz * u_xlat3.xyz;
    u_xlat3.xyz = _ES_CharacterAmbientLightColor.xyz * vec3(_ES_CharacterAmbientLightRatio);
    u_xlat16_4.xyz = u_xlat12.xyz * vec3(10.0, 10.0, 10.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.xyz = min(max(u_xlat16_4.xyz, 0.0), 1.0);
#else
    u_xlat16_4.xyz = clamp(u_xlat16_4.xyz, 0.0, 1.0);
#endif
    u_xlat12.xyz = u_xlat3.xyz * u_xlat16_4.xyz + u_xlat12.xyz;
    u_xlat16_4.xyz = (u_xlatb2.x) ? u_xlat12.xyz : u_xlat0.xyz;
    u_xlat16_5.xyz = u_xlat0.xyz + (-u_xlat16_4.xyz);
    u_xlat16_5.xyz = vec3(u_xlat16_34) * u_xlat16_5.xyz + u_xlat16_4.xyz;
    u_xlat16_0.xyz = (bool(u_xlatb30)) ? u_xlat16_5.xyz : u_xlat16_4.xyz;
    u_xlat16_4.x = max(u_xlat16_0.z, u_xlat16_0.y);
    u_xlat16_1.w = max(u_xlat16_0.x, u_xlat16_4.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(1.0<u_xlat16_1.w);
#else
    u_xlatb2.x = 1.0<u_xlat16_1.w;
#endif
    u_xlat16_1.xyz = u_xlat16_0.xyz / u_xlat16_1.www;
    u_xlat16_0.w = 1.0;
    u_xlat16_0 = (u_xlatb2.x) ? u_xlat16_1 : u_xlat16_0;
    u_xlat16_4.x = min(u_xlat16_0.w, 1.10000002);
    u_xlat16_14 = u_xlat16_0.w + (-u_xlat16_4.x);
    u_xlat16_4.x = u_xlat16_34 * u_xlat16_14 + u_xlat16_4.x;
    u_xlat16_2.x = u_xlat16_4.x * 0.0500000007;
    SV_Target0.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb12 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_4.x = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb12) ? u_xlat16_4.x : 0.0;
    SV_Target0.w = 0.0156862754;
    SV_Target1.xyz = u_xlat16_0.xyz;
    SV_Target1.w = u_xlat16_2.x;
    SV_Target2.xy = vec2(0.0, 0.0);
    SV_Target2.w = vs_TEXCOORD4;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "LINE_INTERPOLATION" "TOON_SPECULAR_ON" "TOON_LIGHTMAP_ON" "MAIN_TEX_COLORING_ON" "FACE_MAP_NEW_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	vec4 _MainTex_ST;
uniform 	float _FaceMapRotateOffset;
uniform 	float _CharacterAmbientSensorShadowOn;
uniform 	vec4 _AmbientSensorUVs;
uniform 	float _UseClipPlane;
uniform 	float _ClipPlaneWorld;
uniform 	vec4 _ClipPlane;
uniform 	vec4 mhy_AvatarLightDir;
uniform 	vec4 mhy_CharacterOverrideLightDir;
uniform lowp sampler2D _CharacterAmbientSensorTex;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp float vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD6;
vec3 u_xlat0;
bool u_xlatb0;
vec3 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
bool u_xlatb3;
vec4 u_xlat4;
vec4 u_xlat5;
mediump vec2 u_xlat16_6;
float u_xlat7;
bool u_xlatb7;
vec3 u_xlat8;
bvec2 u_xlatb8;
bool u_xlatb9;
mediump float u_xlat16_13;
float u_xlat14;
bool u_xlatb14;
float u_xlat15;
float u_xlat21;
float u_xlat22;
bool u_xlatb22;
float u_xlat23;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.5<mhy_CharacterOverrideLightDir.w);
#else
    u_xlatb0 = 0.5<mhy_CharacterOverrideLightDir.w;
#endif
    u_xlat1.x = mhy_CharacterOverrideLightDir.x;
    u_xlat1.yz = (-mhy_CharacterOverrideLightDir.yz);
    u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat1.xyz : mhy_AvatarLightDir.xyz;
    u_xlat21 = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_ObjectToWorld[1].xyz);
    u_xlat1.x = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_ObjectToWorld[2].xyz);
    u_xlatb8.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseClipPlane, _ClipPlaneWorld, _UseClipPlane, _UseClipPlane)).xy;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(abs(_ClipPlane.w)<0.00100000005);
#else
    u_xlatb22 = abs(_ClipPlane.w)<0.00100000005;
#endif
    u_xlat2.xyz = _ClipPlane.www * _ClipPlane.xyz;
    u_xlat2.xyz = (bool(u_xlatb22)) ? vec3(0.0, 0.0, 0.0) : u_xlat2.xyz;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_WorldToObject[1];
    u_xlat3 = hlslcc_mtx4x4unity_WorldToObject[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat2 = hlslcc_mtx4x4unity_WorldToObject[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat2 = u_xlat2 + hlslcc_mtx4x4unity_WorldToObject[3];
    u_xlat2.xyz = u_xlat2.xyz / u_xlat2.www;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * _ClipPlane.yyy;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _ClipPlane.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _ClipPlane.zzz + u_xlat3.xyz;
    u_xlat22 = dot(u_xlat2.xyz, u_xlat3.xyz);
    u_xlat2.x = dot(in_POSITION0.xyz, u_xlat3.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(u_xlat2.x<u_xlat22);
#else
    u_xlatb9 = u_xlat2.x<u_xlat22;
#endif
    u_xlat22 = (-u_xlat22) + u_xlat2.x;
    u_xlat3.xyz = (-vec3(u_xlat22)) * u_xlat3.xyz + in_POSITION0.xyz;
    u_xlat3.w = 0.0;
    u_xlat4.xyz = in_POSITION0.xyz;
    u_xlat4.w = in_COLOR0.w;
    u_xlat2 = (bool(u_xlatb9)) ? u_xlat3 : u_xlat4;
    u_xlat22 = dot(in_POSITION0.xyz, _ClipPlane.xyz);
    u_xlat3.x = _ClipPlane.w + -0.00999999978;
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(u_xlat22<u_xlat3.x);
#else
    u_xlatb3 = u_xlat22<u_xlat3.x;
#endif
    u_xlat22 = u_xlat22 + (-_ClipPlane.w);
    u_xlat5.xyz = (-vec3(u_xlat22)) * _ClipPlane.xyz + in_POSITION0.xyz;
    u_xlat5.w = 0.0;
    u_xlat3 = (bool(u_xlatb3)) ? u_xlat5 : u_xlat4;
    u_xlat2.xyz = (u_xlatb8.y) ? u_xlat2.xyz : u_xlat3.xyz;
    u_xlat16_6.x = (u_xlatb8.y) ? u_xlat2.w : u_xlat3.w;
    u_xlat2.xyz = (u_xlatb8.x) ? u_xlat2.xyz : in_POSITION0.xyz;
    vs_COLOR0.w = (u_xlatb8.x) ? u_xlat16_6.x : in_COLOR0.w;
    u_xlat3.xyw = (-_WorldSpaceCameraPos.xyz) + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat4.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;
    u_xlat4.y = hlslcc_mtx4x4unity_ObjectToWorld[1].x;
    u_xlat4.z = hlslcc_mtx4x4unity_ObjectToWorld[2].x;
    u_xlat4.w = u_xlat3.x;
    u_xlat2.w = 1.0;
    u_xlat8.x = dot(u_xlat4, u_xlat2);
    u_xlat4.x = hlslcc_mtx4x4unity_ObjectToWorld[0].y;
    u_xlat4.y = hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat4.z = hlslcc_mtx4x4unity_ObjectToWorld[2].y;
    u_xlat4.w = u_xlat3.y;
    u_xlat15 = dot(u_xlat4, u_xlat2);
    u_xlat3.x = hlslcc_mtx4x4unity_ObjectToWorld[0].z;
    u_xlat3.y = hlslcc_mtx4x4unity_ObjectToWorld[1].z;
    u_xlat3.z = hlslcc_mtx4x4unity_ObjectToWorld[2].z;
    u_xlat22 = dot(u_xlat3, u_xlat2);
    u_xlat3.x = hlslcc_mtx4x4unity_ObjectToWorld[0].w;
    u_xlat3.y = hlslcc_mtx4x4unity_ObjectToWorld[1].w;
    u_xlat3.z = hlslcc_mtx4x4unity_ObjectToWorld[2].w;
    u_xlat3.w = hlslcc_mtx4x4unity_ObjectToWorld[3].w;
    u_xlat23 = dot(u_xlat3, u_xlat2);
    u_xlat3 = vec4(u_xlat15) * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat8.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVPZero[2] * vec4(u_xlat22) + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVPZero[3] * vec4(u_xlat23) + u_xlat3;
    u_xlat4 = u_xlat2.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat4 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat2.xxxx + u_xlat4;
    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat2.zzzz + u_xlat4;
    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat2;
    vs_TEXCOORD3.xyz = u_xlat2.xyz / u_xlat2.www;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat2.xz = u_xlat3.xw * vec2(0.5, 0.5);
    u_xlat8.x = u_xlat3.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat8.x * 0.5;
    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat8.xyz = in_NORMAL0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat8.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_NORMAL0.xxx + u_xlat8.xyz;
    u_xlat8.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_NORMAL0.zzz + u_xlat8.xyz;
    u_xlat2.x = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat8.xyz = u_xlat8.xyz * u_xlat2.xxx;
    u_xlat16_6.x = dot(u_xlat8.xyz, u_xlat0.xyz);
    vs_TEXCOORD1.w = u_xlat16_6.x * 0.497500002 + 0.5;
    u_xlat16_6.x = min(abs(u_xlat21), abs(u_xlat1.x));
    u_xlat16_13 = max(abs(u_xlat21), abs(u_xlat1.x));
    u_xlat16_13 = float(1.0) / u_xlat16_13;
    u_xlat16_6.x = u_xlat16_13 * u_xlat16_6.x;
    u_xlat16_13 = u_xlat16_6.x * u_xlat16_6.x;
    u_xlat0.x = u_xlat16_13 * 0.0208350997 + -0.0851330012;
    u_xlat0.x = u_xlat16_13 * u_xlat0.x + 0.180141002;
    u_xlat0.x = u_xlat16_13 * u_xlat0.x + -0.330299497;
    u_xlat0.x = u_xlat16_13 * u_xlat0.x + 0.999866009;
    u_xlat7 = u_xlat0.x * u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(abs(u_xlat21)<abs(u_xlat1.x));
#else
    u_xlatb14 = abs(u_xlat21)<abs(u_xlat1.x);
#endif
    u_xlat7 = u_xlat7 * -2.0 + 1.57079637;
    u_xlat7 = u_xlatb14 ? u_xlat7 : float(0.0);
    u_xlat0.x = u_xlat16_6.x * u_xlat0.x + u_xlat7;
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(u_xlat21<(-u_xlat21));
#else
    u_xlatb7 = u_xlat21<(-u_xlat21);
#endif
    u_xlat7 = u_xlatb7 ? -3.14159274 : float(0.0);
    u_xlat0.x = u_xlat7 + u_xlat0.x;
    u_xlat16_6.x = min(u_xlat21, u_xlat1.x);
    u_xlat16_13 = max(u_xlat21, u_xlat1.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(u_xlat16_6.x<(-u_xlat16_6.x));
#else
    u_xlatb7 = u_xlat16_6.x<(-u_xlat16_6.x);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(u_xlat16_13>=(-u_xlat16_13));
#else
    u_xlatb14 = u_xlat16_13>=(-u_xlat16_13);
#endif
    u_xlatb7 = u_xlatb14 && u_xlatb7;
    u_xlat0.x = (u_xlatb7) ? (-u_xlat0.x) : u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(0.0<(-u_xlat0.x));
#else
    u_xlatb7 = 0.0<(-u_xlat0.x);
#endif
    u_xlat16_6.x = u_xlat0.x * -0.318309903;
    u_xlat0.x = max(_FaceMapRotateOffset, 0.0);
    u_xlat14 = _FaceMapRotateOffset + 1.0;
    u_xlat14 = min(u_xlat14, 1.0);
    u_xlat14 = (-u_xlat0.x) + u_xlat14;
    u_xlat0.x = (-u_xlat0.x) + abs(u_xlat16_6.x);
    u_xlat14 = float(1.0) / u_xlat14;
    u_xlat0.x = u_xlat14 * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat14 = u_xlat0.x * -2.0 + 3.0;
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * u_xlat14;
    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);
    u_xlat0.x = min(u_xlat0.x, 0.999899983);
    u_xlat16_6.xy = in_TEXCOORD0.xy * vec2(-1.0, 1.0) + vec2(1.0, 0.0);
    vs_TEXCOORD6.xy = (bool(u_xlatb7)) ? u_xlat16_6.xy : in_TEXCOORD0.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_CharacterAmbientSensorShadowOn));
#else
    u_xlatb7 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_CharacterAmbientSensorShadowOn);
#endif
    if(u_xlatb7){
        u_xlat7 = textureLod(_CharacterAmbientSensorTex, _AmbientSensorUVs.xy, 0.0).x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb7 = !!(0.5<u_xlat7);
#else
        u_xlatb7 = 0.5<u_xlat7;
#endif
        vs_TEXCOORD4 = u_xlatb7 ? 1.0 : float(0.0);
    } else {
        vs_TEXCOORD4 = 0.0;
    //ENDIF
    }
    gl_Position = u_xlat3;
    vs_COLOR0.xyz = in_COLOR0.xyz;
    vs_TEXCOORD1.xyz = u_xlat8.xyz;
    vs_TEXCOORD2.zw = u_xlat3.zw;
    vs_TEXCOORD6.z = u_xlat0.x;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	mediump vec4 _Color;
uniform 	float _MainTexAlphaUse;
uniform 	mediump float _MainTexAlphaCutoff;
uniform 	mediump vec4 _MainTexTintColor;
uniform 	float _UseLightMapColorAO;
uniform 	float _UseVertexColorAO;
uniform 	mediump float _LightArea;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	float _UseCoolShadowColorOrTex;
uniform 	mediump vec3 _CoolShadowMultColor;
uniform 	float _UseShadowTransition;
uniform 	float _ShadowTransitionRange;
uniform 	float _ShadowTransitionSoftness;
uniform 	mediump vec3 _SpecularColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	float _FaceBlushStrength;
uniform 	mediump vec3 _FaceBlushColor;
uniform 	float _FaceMapSoftness;
uniform 	mediump float _EmissionScaler;
uniform 	mediump vec3 _EmissionColor_MHY;
uniform 	float _UseMaterial2;
uniform 	mediump vec3 _Color2;
uniform 	mediump vec3 _FirstShadowMultColor2;
uniform 	mediump vec3 _CoolShadowMultColor2;
uniform 	mediump float _Shininess2;
uniform 	mediump float _SpecMulti2;
uniform 	float _ShadowTransitionRange2;
uniform 	float _ShadowTransitionSoftness2;
uniform 	float _UseMaterial3;
uniform 	mediump vec3 _Color3;
uniform 	mediump vec3 _FirstShadowMultColor3;
uniform 	mediump vec3 _CoolShadowMultColor3;
uniform 	mediump float _Shininess3;
uniform 	mediump float _SpecMulti3;
uniform 	float _ShadowTransitionRange3;
uniform 	float _ShadowTransitionSoftness3;
uniform 	float _UseMaterial4;
uniform 	mediump vec3 _Color4;
uniform 	mediump vec3 _FirstShadowMultColor4;
uniform 	mediump vec3 _CoolShadowMultColor4;
uniform 	mediump float _Shininess4;
uniform 	mediump float _SpecMulti4;
uniform 	float _ShadowTransitionRange4;
uniform 	float _ShadowTransitionSoftness4;
uniform 	float _UseMaterial5;
uniform 	mediump vec3 _Color5;
uniform 	mediump vec3 _FirstShadowMultColor5;
uniform 	mediump vec3 _CoolShadowMultColor5;
uniform 	mediump float _Shininess5;
uniform 	mediump float _SpecMulti5;
uniform 	float _ShadowTransitionRange5;
uniform 	float _ShadowTransitionSoftness5;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _TextureBiasWhenDithering;
uniform 	float _UseClipPlane;
uniform 	float _ES_CharacterAmbientLightOn;
uniform 	float _ES_CharacterAmbientBrightness;
uniform 	vec3 _ES_CharacterMainLightColor;
uniform 	vec3 _ES_CharacterAmbientLightColor;
uniform 	float _ES_CharacterMainLightRatio;
uniform 	float _ES_CharacterAmbientLightRatio;
uniform 	float _ES_CharacterColorTone;
uniform 	float _ES_CharacterPointLightWholeIntensity;
uniform 	vec4 mhy_AvatarLightDir;
uniform 	vec4 mhy_CharacterPointLightColor;
uniform 	vec4 mhy_CharacterOverrideLightDir;
uniform 	mediump vec4 _FlowMapColor01;
uniform 	mediump float _FlowScale01;
uniform 	mediump float _FlowMap01_Uspeed;
uniform 	vec4 _FlowMap01_ST;
uniform 	mediump float _FlowMap01_Vspeed;
uniform 	mediump float _Noise_Uspeed;
uniform 	vec4 _Noise_ST;
uniform 	mediump float _Noise_Vspeed;
uniform 	mediump float _NoiseFlowIntensity;
uniform 	mediump float _MaskOffset01;
uniform 	mediump float _NoiseIntensity;
uniform 	mediump float _Mask01_Power;
uniform 	mediump vec4 _FlowMapColor02;
uniform 	mediump float _FlowScale02;
uniform 	mediump float _FlowMap02_Uspeed;
uniform 	vec4 _FlowMap02_ST;
uniform 	mediump float _FlowMap02_Vspeed;
uniform 	mediump float _MaskOffset02;
uniform 	mediump float _Mask02_Power;
uniform 	mediump float _DissolveNoise_Uspeed;
uniform 	vec4 _DissovleNoise_ST;
uniform 	mediump float _DissolveNoise_Vspeed;
uniform 	mediump float _DissovleNoiseScale;
uniform 	mediump float _Dissovle;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _FaceMapTex;
uniform lowp sampler2D _Noise;
uniform lowp sampler2D _FlowMap01;
uniform lowp sampler2D _Mask01;
uniform lowp sampler2D _FlowMap02;
uniform lowp sampler2D _Mask02;
uniform lowp sampler2D _DissovleNoise;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp float vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
vec3 u_xlat2;
mediump float u_xlat16_2;
bvec4 u_xlatb2;
vec3 u_xlat3;
mediump float u_xlat16_3;
lowp vec4 u_xlat10_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
bvec4 u_xlatb5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
mediump vec3 u_xlat16_7;
int u_xlati7;
bvec3 u_xlatb7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
bool u_xlatb11;
vec3 u_xlat13;
mediump vec3 u_xlat16_13;
lowp float u_xlat10_13;
bool u_xlatb13;
float u_xlat14;
mediump vec3 u_xlat16_14;
int u_xlati14;
mediump float u_xlat16_15;
mediump vec3 u_xlat16_17;
mediump vec3 u_xlat16_19;
bvec2 u_xlatb22;
vec2 u_xlat24;
mediump float u_xlat16_30;
float u_xlat33;
mediump float u_xlat16_33;
lowp float u_xlat10_33;
int u_xlati33;
bool u_xlatb33;
float u_xlat35;
float u_xlat36;
int u_xlati36;
bool u_xlatb36;
mediump float u_xlat16_37;
mediump float u_xlat16_39;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseClipPlane));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseClipPlane);
#endif
    u_xlat16_1.x = vs_COLOR0.w + -0.00999999978;
#ifdef UNITY_ADRENO_ES3
    u_xlatb11 = !!(u_xlat16_1.x<0.0);
#else
    u_xlatb11 = u_xlat16_1.x<0.0;
#endif
    u_xlatb0 = u_xlatb0 && u_xlatb11;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(_DitherAlpha<0.949999988);
#else
        u_xlatb0 = _DitherAlpha<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb22.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb22.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb22.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = _DitherAlpha * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + -0.00999999978;
#ifdef UNITY_ADRENO_ES3
            u_xlatb0 = !!(u_xlat0.x<0.0);
#else
            u_xlatb0 = u_xlat0.x<0.0;
#endif
            if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(0.5<mhy_CharacterOverrideLightDir.w);
#else
    u_xlatb2.x = 0.5<mhy_CharacterOverrideLightDir.w;
#endif
    u_xlat3.x = mhy_CharacterOverrideLightDir.x;
    u_xlat3.yz = (-mhy_CharacterOverrideLightDir.yz);
    u_xlat2.xyz = (u_xlatb2.x) ? u_xlat3.xyz : mhy_AvatarLightDir.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat33) + u_xlat2.xyz;
    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat0.xyz = vec3(u_xlat33) * u_xlat0.xyz;
    u_xlat33 = _TextureBiasWhenDithering + -1.0;
    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy, u_xlat33);
    u_xlat16_4.xyz = u_xlat1.xyz * _MainTexTintColor.xyz;
    u_xlat16_5.xyz = u_xlat16_4.xyz + u_xlat16_4.xyz;
    u_xlat16_6.xyz = u_xlat1.xyz + _MainTexTintColor.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_6.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(-4.0, -4.0, -4.0) + u_xlat16_6.xyz;
    u_xlatb2 = lessThan(vec4(0.5, 0.5, 0.5, 0.00999999978), u_xlat1);
    u_xlat16_6.x = (u_xlatb2.x) ? float(1.0) : float(0.0);
    u_xlat16_6.y = (u_xlatb2.y) ? float(1.0) : float(0.0);
    u_xlat16_6.z = (u_xlatb2.z) ? float(1.0) : float(0.0);
    u_xlat16_4.xyz = u_xlat16_4.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat16_4.xyz = u_xlat16_6.xyz * u_xlat16_4.xyz + u_xlat16_5.xyz;
    u_xlatb2.xyz = equal(vec4(_MainTexAlphaUse), vec4(3.0, 1.0, 2.0, 0.0)).xyz;
    u_xlat3.x = u_xlat1.w * _FaceBlushStrength;
    u_xlat16_14.xyz = (-u_xlat16_4.xyz) + _FaceBlushColor.xyz;
    u_xlat3.xyz = u_xlat3.xxx * u_xlat16_14.xyz + u_xlat16_4.xyz;
    u_xlat16_4.xyz = (u_xlatb2.x) ? u_xlat3.xyz : u_xlat16_4.xyz;
    u_xlat16_37 = u_xlat1.w + (-_MainTexAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(u_xlat16_37<0.0);
#else
    u_xlatb2.x = u_xlat16_37<0.0;
#endif
    u_xlatb2.x = u_xlatb2.y && u_xlatb2.x;
    if((int(u_xlatb2.x) * int(0xffffffffu))!=0){discard;}
    u_xlat10_3 = texture(_LightMapTex, vs_TEXCOORD0.xy, u_xlat33);
    u_xlatb2.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseLightMapColorAO, _UseVertexColorAO, _UseLightMapColorAO, _UseLightMapColorAO)).xy;
    u_xlat16_37 = (u_xlatb2.x) ? u_xlat10_3.y : 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseMaterial2));
#else
    u_xlatb33 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseMaterial2);
#endif
    u_xlatb5 = greaterThanEqual(u_xlat10_3.wwww, vec4(0.800000012, 0.400000006, 0.200000003, 0.600000024));
    u_xlatb33 = u_xlatb33 && u_xlatb5.x;
    u_xlat33 = (u_xlatb33) ? 2.0 : 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseMaterial3));
#else
    u_xlatb2.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseMaterial3);
#endif
    u_xlatb2.x = u_xlatb5.y && u_xlatb2.x;
    u_xlatb7.xyz = lessThan(u_xlat10_3.wwww, vec4(0.600000024, 0.400000006, 0.800000012, 0.0)).xyz;
    u_xlatb2.x = u_xlatb2.x && u_xlatb7.x;
    u_xlat33 = (u_xlatb2.x) ? 3.0 : u_xlat33;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseMaterial4));
#else
    u_xlatb2.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseMaterial4);
#endif
    u_xlatb2.x = u_xlatb5.z && u_xlatb2.x;
    u_xlatb2.x = u_xlatb7.y && u_xlatb2.x;
    u_xlat33 = (u_xlatb2.x) ? 4.0 : u_xlat33;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseMaterial5));
#else
    u_xlatb2.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseMaterial5);
#endif
    u_xlatb2.x = u_xlatb5.w && u_xlatb2.x;
    u_xlatb2.x = u_xlatb7.z && u_xlatb2.x;
    u_xlat33 = (u_xlatb2.x) ? 5.0 : u_xlat33;
    u_xlatb5 = equal(vec4(u_xlat33), vec4(2.0, 3.0, 4.0, 5.0));
    u_xlat16_6.xyz = (u_xlatb5.x) ? _Color2.xyz : _Color.xyz;
    u_xlat16_6.xyz = (u_xlatb5.y) ? _Color3.xyz : u_xlat16_6.xyz;
    u_xlat16_6.xyz = (u_xlatb5.z) ? _Color4.xyz : u_xlat16_6.xyz;
    u_xlat16_6.xyz = (u_xlatb5.w) ? _Color5.xyz : u_xlat16_6.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_6.xyz;
    u_xlatb2.x = u_xlatb2.w && u_xlatb2.z;
    u_xlat16_6.x = (u_xlatb2.x) ? u_xlat1.w : 0.0;
    u_xlat24.x = texture(_FaceMapTex, vs_TEXCOORD6.xy, -1.0).w;
    u_xlat35 = max(_FaceMapSoftness, 9.99999997e-07);
    u_xlat16_17.x = (-u_xlat35) + vs_TEXCOORD6.z;
    u_xlat16_14.x = max(u_xlat16_17.x, 9.99999975e-05);
    u_xlat16_14.x = min(u_xlat16_14.x, 0.998899996);
    u_xlat16_17.x = u_xlat35 + vs_TEXCOORD6.z;
    u_xlat24.y = min(u_xlat16_17.x, 0.999899983);
    u_xlat24.xy = u_xlat24.xy + (-u_xlat16_14.xx);
    u_xlat35 = float(1.0) / u_xlat24.y;
    u_xlat24.x = u_xlat35 * u_xlat24.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat24.x = min(max(u_xlat24.x, 0.0), 1.0);
#else
    u_xlat24.x = clamp(u_xlat24.x, 0.0, 1.0);
#endif
    u_xlat35 = u_xlat24.x * -2.0 + 3.0;
    u_xlat24.x = u_xlat24.x * u_xlat24.x;
    u_xlat14 = u_xlat24.x * u_xlat35;
    u_xlat16_17.x = u_xlat16_37 * vs_COLOR0.x;
    u_xlat16_37 = (u_xlatb2.y) ? u_xlat16_17.x : u_xlat16_37;
#ifdef UNITY_ADRENO_ES3
    u_xlatb13 = !!(u_xlat16_37<0.0500000007);
#else
    u_xlatb13 = u_xlat16_37<0.0500000007;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb36 = !!(0.949999988<u_xlat16_37);
#else
    u_xlatb36 = 0.949999988<u_xlat16_37;
#endif
    u_xlat7.x = u_xlat16_37 + vs_TEXCOORD1.w;
    u_xlat7.x = u_xlat7.x * 0.5;
    u_xlat16_37 = (u_xlatb36) ? 1.0 : u_xlat7.x;
    u_xlat16_37 = (u_xlatb13) ? 0.0 : u_xlat16_37;
#ifdef UNITY_ADRENO_ES3
    u_xlatb13 = !!(u_xlat16_37<_LightArea);
#else
    u_xlatb13 = u_xlat16_37<_LightArea;
#endif
    if(u_xlatb13){
#ifdef UNITY_ADRENO_ES3
        u_xlatb13 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition));
#else
        u_xlatb13 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition);
#endif
#ifdef UNITY_ADRENO_ES3
        u_xlatb36 = !!(u_xlat33==1.0);
#else
        u_xlatb36 = u_xlat33==1.0;
#endif
        u_xlat16_8.x = (u_xlatb36) ? _ShadowTransitionRange : 0.0;
        u_xlat16_8.y = (u_xlatb36) ? _ShadowTransitionSoftness : 0.0;
        u_xlat16_17.xy = (u_xlatb5.x) ? vec2(_ShadowTransitionRange2, _ShadowTransitionSoftness2) : u_xlat16_8.xy;
        u_xlat16_17.xy = (u_xlatb5.y) ? vec2(_ShadowTransitionRange3, _ShadowTransitionSoftness3) : u_xlat16_17.xy;
        u_xlat16_17.xy = (u_xlatb5.z) ? vec2(_ShadowTransitionRange4, _ShadowTransitionSoftness4) : u_xlat16_17.xy;
        u_xlat16_17.xy = (u_xlatb5.w) ? vec2(_ShadowTransitionRange5, _ShadowTransitionSoftness5) : u_xlat16_17.xy;
        u_xlat16_37 = (-u_xlat16_37) + _LightArea;
        u_xlat16_37 = u_xlat16_37 / u_xlat16_17.x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb36 = !!(u_xlat16_37>=1.0);
#else
        u_xlatb36 = u_xlat16_37>=1.0;
#endif
        u_xlat16_7.x = u_xlat16_37 + 0.00999999978;
        u_xlat16_7.x = log2(u_xlat16_7.x);
        u_xlat16_7.x = u_xlat16_17.y * u_xlat16_7.x;
        u_xlat16_7.x = exp2(u_xlat16_7.x);
        u_xlat7.x = min(u_xlat16_7.x, 1.0);
        u_xlat36 = (u_xlatb36) ? 1.0 : u_xlat7.x;
        u_xlat13.x = (u_xlatb13) ? u_xlat36 : 1.0;
        u_xlat16_37 = 0.0;
    } else {
        u_xlat13.x = 0.0;
        u_xlat16_37 = 1.0;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb36 = !!(0.5<u_xlat10_3.x);
#else
    u_xlatb36 = 0.5<u_xlat10_3.x;
#endif
    u_xlat16_17.x = min(u_xlat14, u_xlat16_37);
    u_xlat16_37 = (u_xlatb36) ? u_xlat16_17.x : u_xlat16_37;
    u_xlat16_37 = (-u_xlat16_37) + 1.0;
#ifdef UNITY_ADRENO_ES3
    { bool cond = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(vs_TEXCOORD4); u_xlati14 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati14 = int((vec4(0.0, 0.0, 0.0, 0.0)!=vec4(vs_TEXCOORD4)) ? 0xFFFFFFFFu : uint(0u));
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(u_xlat33==1.0);
#else
    u_xlatb33 = u_xlat33==1.0;
#endif
    if(u_xlatb33){
#ifdef UNITY_ADRENO_ES3
        u_xlatb36 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex));
#else
        u_xlatb36 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex);
#endif
        u_xlat16_7.xyz = vec3(_FirstShadowMultColor.xxyz.y + (-_CoolShadowMultColor.x), _FirstShadowMultColor.xxyz.z + (-_CoolShadowMultColor.y), float(_FirstShadowMultColor.z) + (-_CoolShadowMultColor.z));
        u_xlat7.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_7.xyz + _CoolShadowMultColor.xyz;
        u_xlat16_17.xyz = (bool(u_xlatb36)) ? u_xlat7.xyz : vec3(_FirstShadowMultColor.x, _FirstShadowMultColor.y, _FirstShadowMultColor.z);
    } else {
        if(u_xlatb5.x){
#ifdef UNITY_ADRENO_ES3
            u_xlatb36 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex));
#else
            u_xlatb36 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex);
#endif
            u_xlat16_7.xyz = _FirstShadowMultColor2.xyz + (-_CoolShadowMultColor2.xyz);
            u_xlat7.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_7.xyz + _CoolShadowMultColor2.xyz;
            u_xlat16_17.xyz = (bool(u_xlatb36)) ? u_xlat7.xyz : _FirstShadowMultColor2.xyz;
        } else {
#ifdef UNITY_ADRENO_ES3
            u_xlatb36 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex));
#else
            u_xlatb36 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex);
#endif
            u_xlat16_7.xyz = _FirstShadowMultColor3.xyz + (-_CoolShadowMultColor3.xyz);
            u_xlat7.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_7.xyz + _CoolShadowMultColor3.xyz;
            u_xlat16_8.xyz = (bool(u_xlatb36)) ? u_xlat7.xyz : _FirstShadowMultColor3.xyz;
            u_xlat16_7.xyz = _FirstShadowMultColor4.xyz + (-_CoolShadowMultColor4.xyz);
            u_xlat7.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_7.xyz + _CoolShadowMultColor4.xyz;
            u_xlat16_9.xyz = (bool(u_xlatb36)) ? u_xlat7.xyz : _FirstShadowMultColor4.xyz;
            u_xlat16_7.xyz = _FirstShadowMultColor5.xyz + (-_CoolShadowMultColor5.xyz);
            u_xlat7.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_7.xyz + _CoolShadowMultColor5.xyz;
            u_xlat16_10.xyz = (bool(u_xlatb36)) ? u_xlat7.xyz : _FirstShadowMultColor5.xyz;
            u_xlat16_9.xyz = (u_xlatb5.z) ? u_xlat16_9.xyz : u_xlat16_10.xyz;
            u_xlat16_17.xyz = (u_xlatb5.y) ? u_xlat16_8.xyz : u_xlat16_9.xyz;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb36 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition));
#else
    u_xlatb36 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition);
#endif
    u_xlati7 = ~u_xlati14;
    u_xlati36 = u_xlatb36 ? u_xlati7 : int(0);
    u_xlat16_7.xyz = u_xlat16_17.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat7.xyz = u_xlat13.xxx * u_xlat16_7.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_17.xyz = (int(u_xlati36) != 0) ? u_xlat7.xyz : u_xlat16_17.xyz;
    u_xlat16_8.x = (-u_xlat35) * u_xlat24.x + 1.0;
    u_xlat16_19.xyz = u_xlat16_17.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat16_8.xyz = u_xlat16_8.xxx * u_xlat16_19.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_17.xyz = (int(u_xlati14) != 0) ? u_xlat16_17.xyz : u_xlat16_8.xyz;
    u_xlat16_8.x = (u_xlatb5.z) ? _Shininess4 : _Shininess5;
    u_xlat16_19.x = (u_xlatb5.z) ? _SpecMulti4 : _SpecMulti5;
    u_xlat16_8.x = (u_xlatb5.y) ? _Shininess3 : u_xlat16_8.x;
    u_xlat16_19.x = (u_xlatb5.y) ? _SpecMulti3 : u_xlat16_19.x;
    u_xlat16_8.x = (u_xlatb5.x) ? _Shininess2 : u_xlat16_8.x;
    u_xlat16_19.x = (u_xlatb5.x) ? _SpecMulti2 : u_xlat16_19.x;
    u_xlat16_8.x = (u_xlatb33) ? _Shininess : u_xlat16_8.x;
    u_xlat16_19.x = (u_xlatb33) ? _SpecMulti : u_xlat16_19.x;
    u_xlat16_30 = dot(vs_TEXCOORD1.xyz, u_xlat0.xyz);
    u_xlat16_30 = max(u_xlat16_30, 0.00100000005);
    u_xlat16_30 = log2(u_xlat16_30);
    u_xlat16_8.x = u_xlat16_30 * u_xlat16_8.x;
    u_xlat16_8.x = exp2(u_xlat16_8.x);
    u_xlat0.x = (-u_xlat10_3.z) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat0.x<u_xlat16_8.x);
#else
    u_xlatb0 = u_xlat0.x<u_xlat16_8.x;
#endif
    u_xlat16_8.xyz = u_xlat16_19.xxx * _SpecularColor.xyz;
    u_xlat16_8.xyz = u_xlat10_3.xxx * u_xlat16_8.xyz;
    u_xlat16_8.xyz = (bool(u_xlatb0)) ? u_xlat16_8.xyz : vec3(0.0, 0.0, 0.0);
    u_xlat16_4.xyz = vec3(u_xlat16_4.x * _EmissionColor_MHY.xxyz.y, u_xlat16_4.y * _EmissionColor_MHY.xxyz.z, u_xlat16_4.z * float(_EmissionColor_MHY.z));
    u_xlat0.xyz = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(u_xlat16_37==1.0);
#else
    u_xlatb33 = u_xlat16_37==1.0;
#endif
    u_xlati33 = int(uint(u_xlatb33) * 0xffffffffu | uint(u_xlati14));
    u_xlat13.xyz = u_xlat0.xyz * u_xlat16_17.xyz;
    u_xlat0.xyz = (int(u_xlati33) != 0) ? u_xlat13.xyz : u_xlat0.xyz;
    u_xlat0.xyz = u_xlat16_8.xyz + u_xlat0.xyz;
    u_xlat13.xy = vs_TEXCOORD0.zw * _FlowMap01_ST.xy + _FlowMap01_ST.zw;
    u_xlat16_8.x = _Time.y * _FlowMap01_Uspeed + u_xlat13.x;
    u_xlat16_8.y = _Time.y * _FlowMap01_Vspeed + u_xlat13.y;
    u_xlat13.xy = vs_TEXCOORD0.zw * _Noise_ST.xy + _Noise_ST.zw;
    u_xlat16_9.x = _Time.y * _Noise_Uspeed + u_xlat13.x;
    u_xlat16_9.y = _Time.y * _Noise_Vspeed + u_xlat13.y;
    u_xlat10_33 = textureLod(_Noise, u_xlat16_9.xy, 0.0).x;
    u_xlat16_37 = _MaskOffset01 * 1.39999998 + -0.699999988;
    u_xlat16_17.x = u_xlat10_33 * _NoiseIntensity;
    u_xlat13.xy = vs_TEXCOORD0.zw * _FlowMap02_ST.xy + _FlowMap02_ST.zw;
    u_xlat16_9.x = _Time.y * _FlowMap02_Uspeed + u_xlat13.x;
    u_xlat16_9.y = _Time.y * _FlowMap02_Vspeed + u_xlat13.y;
    u_xlat16_39 = _MaskOffset02 * 1.39999998 + -0.699999988;
    u_xlat16_10.xyz = _FlowMapColor01.xyz * vec3(_FlowScale01);
    u_xlat16_8.xy = vec2(u_xlat10_33) * vec2(vec2(_NoiseFlowIntensity, _NoiseFlowIntensity)) + u_xlat16_8.xy;
    u_xlat10_13 = textureLod(_FlowMap01, u_xlat16_8.xy, 0.0).x;
    u_xlat16_13.xyz = vec3(u_xlat10_13) * u_xlat16_10.xyz;
    u_xlat16_8.x = (-vs_TEXCOORD0.z) + 1.0;
    u_xlat16_1.x = u_xlat16_37 + u_xlat16_8.x;
    u_xlat16_1.yw = vec2(u_xlat10_33) * vec2(vec2(_NoiseIntensity, _NoiseIntensity)) + (-vs_TEXCOORD0.ww);
    u_xlat16_17.y = 1.0;
    u_xlat16_19.xy = u_xlat16_1.xy + u_xlat16_17.xy;
    u_xlat10_3.x = textureLod(_Mask01, u_xlat16_19.xy, 0.0).x;
    u_xlat16_3 = max(u_xlat10_3.x, 9.99999975e-05);
    u_xlat16_3 = log2(u_xlat16_3);
    u_xlat16_3 = u_xlat16_3 * _Mask01_Power;
    u_xlat16_3 = exp2(u_xlat16_3);
    u_xlat16_19.xyz = _FlowMapColor02.xyz * vec3(_FlowScale02);
    u_xlat16_9.xy = vec2(u_xlat10_33) * vec2(vec2(_NoiseFlowIntensity, _NoiseFlowIntensity)) + u_xlat16_9.xy;
    u_xlat10_33 = textureLod(_FlowMap02, u_xlat16_9.xy, 0.0).x;
    u_xlat16_14.xyz = vec3(u_xlat10_33) * u_xlat16_19.xyz;
    u_xlat16_1.z = u_xlat16_39 + u_xlat16_8.x;
    u_xlat16_17.xy = vec2(u_xlat16_1.z + u_xlat16_17.x, u_xlat16_1.w + u_xlat16_17.y);
    u_xlat10_33 = textureLod(_Mask02, u_xlat16_17.xy, 0.0).x;
    u_xlat16_33 = max(u_xlat10_33, 9.99999975e-05);
    u_xlat16_33 = log2(u_xlat16_33);
    u_xlat16_33 = u_xlat16_33 * _Mask02_Power;
    u_xlat16_33 = exp2(u_xlat16_33);
    u_xlat16_14.xyz = vec3(u_xlat16_33) * u_xlat16_14.xyz;
    u_xlat16_13.xyz = u_xlat16_13.xyz * vec3(u_xlat16_3) + u_xlat16_14.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(_EmissionScaler) + u_xlat16_13.xyz;
    u_xlat3.xyz = (-u_xlat0.xyz) + u_xlat16_4.xyz;
    u_xlat3.xyz = u_xlat16_6.xxx * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat7.xy = vs_TEXCOORD0.zw * _DissovleNoise_ST.xy + _DissovleNoise_ST.zw;
    u_xlat16_4.x = _Time.y * _DissolveNoise_Uspeed + u_xlat7.x;
    u_xlat16_4.y = _Time.y * _DissolveNoise_Vspeed + u_xlat7.y;
    u_xlat10_33 = textureLod(_DissovleNoise, u_xlat16_4.xy, 0.0).x;
    u_xlat33 = u_xlat10_33 * _DissovleNoiseScale + vs_TEXCOORD0.z;
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(_Dissovle>=u_xlat33);
#else
    u_xlatb33 = _Dissovle>=u_xlat33;
#endif
    u_xlat0.xyz = (u_xlatb2.x) ? u_xlat3.xyz : u_xlat0.xyz;
    u_xlat0.xyz = u_xlat16_13.xyz + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(0.00999999978<u_xlat16_6.x);
#else
    u_xlatb2.x = 0.00999999978<u_xlat16_6.x;
#endif
    if((int(u_xlatb33) * int(0xffffffffu))==0){discard;}
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn));
#else
    u_xlatb33 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn);
#endif
    u_xlat13.xyz = u_xlat0.xyz * vec3(vec3(_ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness));
    u_xlat3.xyz = vec3(vec3(_ES_CharacterPointLightWholeIntensity, _ES_CharacterPointLightWholeIntensity, _ES_CharacterPointLightWholeIntensity)) * mhy_CharacterPointLightColor.xyz;
    u_xlat7.xyz = _ES_CharacterMainLightColor.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.xyz = min(max(u_xlat7.xyz, 0.0), 1.0);
#else
    u_xlat7.xyz = clamp(u_xlat7.xyz, 0.0, 1.0);
#endif
    u_xlat36 = (-mhy_CharacterPointLightColor.w) + 1.0;
    u_xlat3.xyz = u_xlat7.xyz * vec3(u_xlat36) + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat3.xyz = vec3(vec3(_ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio)) * u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat13.xyz = u_xlat13.xyz * u_xlat3.xyz;
    u_xlat3.xyz = _ES_CharacterAmbientLightColor.xyz * vec3(_ES_CharacterAmbientLightRatio);
    u_xlat16_4.xyz = u_xlat13.xyz * vec3(10.0, 10.0, 10.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.xyz = min(max(u_xlat16_4.xyz, 0.0), 1.0);
#else
    u_xlat16_4.xyz = clamp(u_xlat16_4.xyz, 0.0, 1.0);
#endif
    u_xlat13.xyz = u_xlat3.xyz * u_xlat16_4.xyz + u_xlat13.xyz;
    u_xlat16_4.xyz = (bool(u_xlatb33)) ? u_xlat13.xyz : u_xlat0.xyz;
    u_xlat16_17.xyz = u_xlat0.xyz + (-u_xlat16_4.xyz);
    u_xlat16_17.xyz = u_xlat16_6.xxx * u_xlat16_17.xyz + u_xlat16_4.xyz;
    u_xlat16_0.xyz = (u_xlatb2.x) ? u_xlat16_17.xyz : u_xlat16_4.xyz;
    u_xlat16_4.x = max(u_xlat16_0.z, u_xlat16_0.y);
    u_xlat16_1.w = max(u_xlat16_0.x, u_xlat16_4.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(1.0<u_xlat16_1.w);
#else
    u_xlatb2.x = 1.0<u_xlat16_1.w;
#endif
    u_xlat16_1.xyz = u_xlat16_0.xyz / u_xlat16_1.www;
    u_xlat16_0.w = 1.0;
    u_xlat16_0 = (u_xlatb2.x) ? u_xlat16_1 : u_xlat16_0;
    u_xlat16_4.x = min(u_xlat16_0.w, 1.10000002);
    u_xlat16_15 = u_xlat16_0.w + (-u_xlat16_4.x);
    u_xlat16_4.x = u_xlat16_6.x * u_xlat16_15 + u_xlat16_4.x;
    u_xlat16_2 = u_xlat16_4.x * 0.0500000007;
    SV_Target0.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb13 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb13 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_4.x = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb13) ? u_xlat16_4.x : 0.0;
    SV_Target0.w = 0.0156862754;
    SV_Target1.xyz = u_xlat16_0.xyz;
    SV_Target1.w = u_xlat16_2;
    SV_Target2.xy = vec2(0.0, 0.0);
    SV_Target2.w = vs_TEXCOORD4;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "LINE_INTERPOLATION" "MAIN_TEX_COLORING_ON" "FACE_MAP_NEW_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _MainTex_ST;
uniform 	float _FaceMapRotateOffset;
uniform 	float _CharacterAmbientSensorShadowOn;
uniform 	vec4 _AmbientSensorUVs;
uniform 	float _UseClipPlane;
uniform 	float _ClipPlaneWorld;
uniform 	vec4 _ClipPlane;
uniform 	vec4 mhy_AvatarLightDir;
uniform 	vec4 mhy_CharacterOverrideLightDir;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
struct unity_Builtins1Array_Type {
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw1 {
	unity_Builtins1Array_Type unity_Builtins1Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform lowp sampler2D _CharacterAmbientSensorTex;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp float vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD6;
flat out highp uint vs_SV_InstanceID0;
float u_xlat0;
int u_xlati0;
vec3 u_xlat1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
vec4 u_xlat4;
mediump float u_xlat16_5;
vec3 u_xlat6;
bool u_xlatb6;
float u_xlat7;
mediump vec2 u_xlat16_11;
float u_xlat12;
bool u_xlatb12;
float u_xlat13;
bool u_xlatb13;
mediump float u_xlat16_17;
float u_xlat19;
bool u_xlatb19;
float u_xlat20;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.5<mhy_CharacterOverrideLightDir.w);
#else
    u_xlatb6 = 0.5<mhy_CharacterOverrideLightDir.w;
#endif
    u_xlat1.x = mhy_CharacterOverrideLightDir.x;
    u_xlat1.yz = (-mhy_CharacterOverrideLightDir.yz);
    u_xlat6.xyz = (bool(u_xlatb6)) ? u_xlat1.xyz : mhy_AvatarLightDir.xyz;
    u_xlati0 = u_xlati0 << 2;
    u_xlat1.x = dot(u_xlat6.xyz, unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz);
    u_xlat7 = dot(u_xlat6.xyz, unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb13 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseClipPlane));
#else
    u_xlatb13 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseClipPlane);
#endif
    if(u_xlatb13){
#ifdef UNITY_ADRENO_ES3
        u_xlatb13 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ClipPlaneWorld));
#else
        u_xlatb13 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ClipPlaneWorld);
#endif
        if(u_xlatb13){
#ifdef UNITY_ADRENO_ES3
            u_xlatb13 = !!(abs(_ClipPlane.w)<0.00100000005);
#else
            u_xlatb13 = abs(_ClipPlane.w)<0.00100000005;
#endif
            u_xlat2.xyz = _ClipPlane.www * _ClipPlane.xyz;
            u_xlat2.xyz = (bool(u_xlatb13)) ? vec3(0.0, 0.0, 0.0) : u_xlat2.xyz;
            u_xlat3 = u_xlat2.yyyy * unity_Builtins1Array[u_xlati0 / 4].hlslcc_mtx4x4unity_WorldToObjectArray[1];
            u_xlat3 = unity_Builtins1Array[u_xlati0 / 4].hlslcc_mtx4x4unity_WorldToObjectArray[0] * u_xlat2.xxxx + u_xlat3;
            u_xlat2 = unity_Builtins1Array[u_xlati0 / 4].hlslcc_mtx4x4unity_WorldToObjectArray[2] * u_xlat2.zzzz + u_xlat3;
            u_xlat2 = u_xlat2 + unity_Builtins1Array[u_xlati0 / 4].hlslcc_mtx4x4unity_WorldToObjectArray[3];
            u_xlat2.xyz = u_xlat2.xyz / u_xlat2.www;
            u_xlat3.xyz = _ClipPlane.yyy * unity_Builtins1Array[u_xlati0 / 4].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz;
            u_xlat3.xyz = unity_Builtins1Array[u_xlati0 / 4].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz * _ClipPlane.xxx + u_xlat3.xyz;
            u_xlat3.xyz = unity_Builtins1Array[u_xlati0 / 4].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz * _ClipPlane.zzz + u_xlat3.xyz;
            u_xlat13 = dot(u_xlat2.xyz, u_xlat3.xyz);
            u_xlat19 = dot(in_POSITION0.xyz, u_xlat3.xyz);
#ifdef UNITY_ADRENO_ES3
            u_xlatb2 = !!(u_xlat19<u_xlat13);
#else
            u_xlatb2 = u_xlat19<u_xlat13;
#endif
            u_xlat13 = (-u_xlat13) + u_xlat19;
            u_xlat3.xyz = (-vec3(u_xlat13)) * u_xlat3.xyz + in_POSITION0.xyz;
            u_xlat3.w = 0.0;
            u_xlat4.xyz = in_POSITION0.xyz;
            u_xlat4.w = in_COLOR0.w;
            u_xlat2 = (bool(u_xlatb2)) ? u_xlat3 : u_xlat4;
            u_xlat16_5 = u_xlat2.w;
        } else {
            u_xlat13 = dot(in_POSITION0.xyz, _ClipPlane.xyz);
            u_xlat19 = _ClipPlane.w + -0.00999999978;
#ifdef UNITY_ADRENO_ES3
            u_xlatb19 = !!(u_xlat13<u_xlat19);
#else
            u_xlatb19 = u_xlat13<u_xlat19;
#endif
            u_xlat13 = u_xlat13 + (-_ClipPlane.w);
            u_xlat3.xyz = (-vec3(u_xlat13)) * _ClipPlane.xyz + in_POSITION0.xyz;
            u_xlat3.w = 0.0;
            u_xlat4.xyz = in_POSITION0.xyz;
            u_xlat4.w = in_COLOR0.w;
            u_xlat2 = (bool(u_xlatb19)) ? u_xlat3 : u_xlat4;
            u_xlat16_5 = u_xlat2.w;
        //ENDIF
        }
    } else {
        u_xlat2.xyz = in_POSITION0.xyz;
        u_xlat16_5 = in_COLOR0.w;
    //ENDIF
    }
    u_xlat3.xyw = (-_WorldSpaceCameraPos.xyz) + unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat4.x = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].x;
    u_xlat4.y = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].x;
    u_xlat4.z = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].x;
    u_xlat4.w = u_xlat3.x;
    u_xlat2.w = 1.0;
    u_xlat13 = dot(u_xlat4, u_xlat2);
    u_xlat4.x = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].y;
    u_xlat4.y = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].y;
    u_xlat4.z = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].y;
    u_xlat4.w = u_xlat3.y;
    u_xlat19 = dot(u_xlat4, u_xlat2);
    u_xlat3.x = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].z;
    u_xlat3.y = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].z;
    u_xlat3.z = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].z;
    u_xlat3.x = dot(u_xlat3, u_xlat2);
    u_xlat4.x = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].w;
    u_xlat4.y = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].w;
    u_xlat4.z = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].w;
    u_xlat4.w = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3].w;
    u_xlat20 = dot(u_xlat4, u_xlat2);
    u_xlat4 = vec4(u_xlat19) * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat4 = hlslcc_mtx4x4unity_MatrixVPZero[0] * vec4(u_xlat13) + u_xlat4;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat3.xxxx + u_xlat4;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVPZero[3] * vec4(u_xlat20) + u_xlat3;
    u_xlat4 = u_xlat2.yyyy * unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat4 = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * u_xlat2.xxxx + u_xlat4;
    u_xlat2 = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * u_xlat2.zzzz + u_xlat4;
    u_xlat2 = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3] * in_POSITION0.wwww + u_xlat2;
    vs_TEXCOORD3.xyz = u_xlat2.xyz / u_xlat2.www;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat2.xz = u_xlat3.xw * vec2(0.5, 0.5);
    u_xlat13 = u_xlat3.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat13 * 0.5;
    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat2.xyz = in_NORMAL0.yyy * unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat2.xyz = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_NORMAL0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_NORMAL0.zzz + u_xlat2.xyz;
    u_xlat0 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0 = inversesqrt(u_xlat0);
    u_xlat2.xyz = vec3(u_xlat0) * u_xlat2.xyz;
    u_xlat16_11.x = dot(u_xlat2.xyz, u_xlat6.xyz);
    vs_TEXCOORD1.w = u_xlat16_11.x * 0.497500002 + 0.5;
    u_xlat16_11.x = min(abs(u_xlat1.x), abs(u_xlat7));
    u_xlat16_17 = max(abs(u_xlat1.x), abs(u_xlat7));
    u_xlat16_17 = float(1.0) / u_xlat16_17;
    u_xlat16_11.x = u_xlat16_17 * u_xlat16_11.x;
    u_xlat16_17 = u_xlat16_11.x * u_xlat16_11.x;
    u_xlat0 = u_xlat16_17 * 0.0208350997 + -0.0851330012;
    u_xlat0 = u_xlat16_17 * u_xlat0 + 0.180141002;
    u_xlat0 = u_xlat16_17 * u_xlat0 + -0.330299497;
    u_xlat0 = u_xlat16_17 * u_xlat0 + 0.999866009;
    u_xlat6.x = u_xlat0 * u_xlat16_11.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(abs(u_xlat1.x)<abs(u_xlat7));
#else
    u_xlatb12 = abs(u_xlat1.x)<abs(u_xlat7);
#endif
    u_xlat6.x = u_xlat6.x * -2.0 + 1.57079637;
    u_xlat6.x = u_xlatb12 ? u_xlat6.x : float(0.0);
    u_xlat0 = u_xlat16_11.x * u_xlat0 + u_xlat6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(u_xlat1.x<(-u_xlat1.x));
#else
    u_xlatb6 = u_xlat1.x<(-u_xlat1.x);
#endif
    u_xlat6.x = u_xlatb6 ? -3.14159274 : float(0.0);
    u_xlat0 = u_xlat6.x + u_xlat0;
    u_xlat16_11.x = min(u_xlat1.x, u_xlat7);
    u_xlat16_17 = max(u_xlat1.x, u_xlat7);
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(u_xlat16_11.x<(-u_xlat16_11.x));
#else
    u_xlatb6 = u_xlat16_11.x<(-u_xlat16_11.x);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat16_17>=(-u_xlat16_17));
#else
    u_xlatb12 = u_xlat16_17>=(-u_xlat16_17);
#endif
    u_xlatb6 = u_xlatb12 && u_xlatb6;
    u_xlat0 = (u_xlatb6) ? (-u_xlat0) : u_xlat0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.0<(-u_xlat0));
#else
    u_xlatb6 = 0.0<(-u_xlat0);
#endif
    u_xlat16_11.x = u_xlat0 * -0.318309903;
    u_xlat0 = max(_FaceMapRotateOffset, 0.0);
    u_xlat12 = _FaceMapRotateOffset + 1.0;
    u_xlat12 = min(u_xlat12, 1.0);
    u_xlat12 = (-u_xlat0) + u_xlat12;
    u_xlat0 = (-u_xlat0) + abs(u_xlat16_11.x);
    u_xlat12 = float(1.0) / u_xlat12;
    u_xlat0 = u_xlat12 * u_xlat0;
#ifdef UNITY_ADRENO_ES3
    u_xlat0 = min(max(u_xlat0, 0.0), 1.0);
#else
    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
#endif
    u_xlat12 = u_xlat0 * -2.0 + 3.0;
    u_xlat0 = u_xlat0 * u_xlat0;
    u_xlat0 = u_xlat0 * u_xlat12;
    u_xlat0 = max(u_xlat0, 9.99999975e-05);
    u_xlat0 = min(u_xlat0, 0.999899983);
    u_xlat16_11.xy = in_TEXCOORD0.xy * vec2(-1.0, 1.0) + vec2(1.0, 0.0);
    vs_TEXCOORD6.xy = (bool(u_xlatb6)) ? u_xlat16_11.xy : in_TEXCOORD0.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_CharacterAmbientSensorShadowOn));
#else
    u_xlatb6 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_CharacterAmbientSensorShadowOn);
#endif
    if(u_xlatb6){
        u_xlat6.x = textureLod(_CharacterAmbientSensorTex, _AmbientSensorUVs.xy, 0.0).x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb6 = !!(0.5<u_xlat6.x);
#else
        u_xlatb6 = 0.5<u_xlat6.x;
#endif
        vs_TEXCOORD4 = u_xlatb6 ? 1.0 : float(0.0);
    } else {
        vs_TEXCOORD4 = 0.0;
    //ENDIF
    }
    gl_Position = u_xlat3;
    vs_COLOR0.xyz = in_COLOR0.xyz;
    vs_COLOR0.w = u_xlat16_5;
    vs_TEXCOORD1.xyz = u_xlat2.xyz;
    vs_TEXCOORD2.zw = u_xlat3.zw;
    vs_TEXCOORD6.z = u_xlat0;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	mediump vec4 _Color;
uniform 	float _MainTexAlphaUse;
uniform 	mediump float _MainTexAlphaCutoff;
uniform 	mediump vec4 _MainTexTintColor;
uniform 	float _UseVertexColorAO;
uniform 	mediump float _LightArea;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	float _UseCoolShadowColorOrTex;
uniform 	mediump vec3 _CoolShadowMultColor;
uniform 	float _UseShadowTransition;
uniform 	float _ShadowTransitionRange;
uniform 	float _ShadowTransitionSoftness;
uniform 	mediump vec3 _SpecularColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	float _FaceBlushStrength;
uniform 	mediump vec3 _FaceBlushColor;
uniform 	mediump float _EmissionScaler;
uniform 	mediump vec3 _EmissionColor_MHY;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _TextureBiasWhenDithering;
uniform 	float _UseClipPlane;
uniform 	float _ES_CharacterAmbientLightOn;
uniform 	float _ES_CharacterAmbientBrightness;
uniform 	vec3 _ES_CharacterMainLightColor;
uniform 	vec3 _ES_CharacterAmbientLightColor;
uniform 	float _ES_CharacterMainLightRatio;
uniform 	float _ES_CharacterAmbientLightRatio;
uniform 	float _ES_CharacterColorTone;
uniform 	float _ES_CharacterPointLightWholeIntensity;
uniform 	vec4 mhy_AvatarLightDir;
uniform 	vec4 mhy_CharacterPointLightColor;
uniform 	vec4 mhy_CharacterOverrideLightDir;
uniform 	mediump vec4 _FlowMapColor01;
uniform 	mediump float _FlowScale01;
uniform 	mediump float _FlowMap01_Uspeed;
uniform 	vec4 _FlowMap01_ST;
uniform 	mediump float _FlowMap01_Vspeed;
uniform 	mediump float _Noise_Uspeed;
uniform 	vec4 _Noise_ST;
uniform 	mediump float _Noise_Vspeed;
uniform 	mediump float _NoiseFlowIntensity;
uniform 	mediump float _MaskOffset01;
uniform 	mediump float _NoiseIntensity;
uniform 	mediump float _Mask01_Power;
uniform 	mediump vec4 _FlowMapColor02;
uniform 	mediump float _FlowScale02;
uniform 	mediump float _FlowMap02_Uspeed;
uniform 	vec4 _FlowMap02_ST;
uniform 	mediump float _FlowMap02_Vspeed;
uniform 	mediump float _MaskOffset02;
uniform 	mediump float _Mask02_Power;
uniform 	mediump float _DissolveNoise_Uspeed;
uniform 	vec4 _DissovleNoise_ST;
uniform 	mediump float _DissolveNoise_Vspeed;
uniform 	mediump float _DissovleNoiseScale;
uniform 	mediump float _Dissovle;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _Noise;
uniform lowp sampler2D _FlowMap01;
uniform lowp sampler2D _Mask01;
uniform lowp sampler2D _FlowMap02;
uniform lowp sampler2D _Mask02;
uniform lowp sampler2D _DissovleNoise;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp float vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
lowp float u_xlat10_2;
int u_xlati2;
bvec4 u_xlatb2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
lowp float u_xlat10_3;
int u_xlati3;
bool u_xlatb3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec2 u_xlat16_7;
mediump vec3 u_xlat16_8;
vec3 u_xlat9;
bool u_xlatb10;
vec3 u_xlat12;
mediump vec3 u_xlat16_12;
lowp float u_xlat10_12;
int u_xlati12;
bool u_xlatb12;
vec3 u_xlat13;
mediump vec3 u_xlat16_13;
mediump float u_xlat16_14;
mediump vec2 u_xlat16_15;
mediump vec2 u_xlat16_16;
bvec2 u_xlatb20;
float u_xlat22;
bool u_xlatb22;
mediump vec2 u_xlat16_25;
float u_xlat30;
bool u_xlatb30;
float u_xlat32;
mediump float u_xlat16_32;
lowp float u_xlat10_32;
int u_xlati32;
bool u_xlatb32;
float u_xlat33;
mediump float u_xlat16_34;
mediump float u_xlat16_35;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseClipPlane));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseClipPlane);
#endif
    u_xlat16_1.x = vs_COLOR0.w + -0.00999999978;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(u_xlat16_1.x<0.0);
#else
    u_xlatb10 = u_xlat16_1.x<0.0;
#endif
    u_xlatb0 = u_xlatb0 && u_xlatb10;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(_DitherAlpha<0.949999988);
#else
        u_xlatb0 = _DitherAlpha<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb20.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb20.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb20.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = _DitherAlpha * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + -0.00999999978;
#ifdef UNITY_ADRENO_ES3
            u_xlatb0 = !!(u_xlat0.x<0.0);
#else
            u_xlatb0 = u_xlat0.x<0.0;
#endif
            if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(0.5<mhy_CharacterOverrideLightDir.w);
#else
    u_xlatb2.x = 0.5<mhy_CharacterOverrideLightDir.w;
#endif
    u_xlat3.x = mhy_CharacterOverrideLightDir.x;
    u_xlat3.yz = (-mhy_CharacterOverrideLightDir.yz);
    u_xlat2.xyz = (u_xlatb2.x) ? u_xlat3.xyz : mhy_AvatarLightDir.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat30) + u_xlat2.xyz;
    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
    u_xlat30 = _TextureBiasWhenDithering + -1.0;
    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy, u_xlat30);
    u_xlat16_4.xyz = u_xlat1.xyz * _MainTexTintColor.xyz;
    u_xlat16_5.xyz = u_xlat16_4.xyz + u_xlat16_4.xyz;
    u_xlat16_6.xyz = u_xlat1.xyz + _MainTexTintColor.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_6.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(-4.0, -4.0, -4.0) + u_xlat16_6.xyz;
    u_xlatb2 = lessThan(vec4(0.5, 0.5, 0.5, 0.00999999978), u_xlat1);
    u_xlat16_6.x = (u_xlatb2.x) ? float(1.0) : float(0.0);
    u_xlat16_6.y = (u_xlatb2.y) ? float(1.0) : float(0.0);
    u_xlat16_6.z = (u_xlatb2.z) ? float(1.0) : float(0.0);
    u_xlat16_4.xyz = u_xlat16_4.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat16_4.xyz = u_xlat16_6.xyz * u_xlat16_4.xyz + u_xlat16_5.xyz;
    u_xlatb2.xyz = equal(vec4(_MainTexAlphaUse), vec4(3.0, 1.0, 2.0, 0.0)).xyz;
    u_xlat30 = u_xlat1.w * _FaceBlushStrength;
    u_xlat16_3.xyz = (-u_xlat16_4.xyz) + _FaceBlushColor.xyz;
    u_xlat3.xyz = vec3(u_xlat30) * u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat16_4.xyz = (u_xlatb2.x) ? u_xlat3.xyz : u_xlat16_4.xyz;
    u_xlat16_34 = u_xlat1.w + (-_MainTexAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(u_xlat16_34<0.0);
#else
    u_xlatb30 = u_xlat16_34<0.0;
#endif
    u_xlatb30 = u_xlatb2.y && u_xlatb30;
    if((int(u_xlatb30) * int(0xffffffffu))!=0){discard;}
    u_xlat16_4.xyz = u_xlat16_4.xyz * _Color.xyz;
    u_xlatb30 = u_xlatb2.w && u_xlatb2.z;
    u_xlat16_34 = (u_xlatb30) ? u_xlat1.w : 0.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorAO));
#else
    u_xlatb2.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorAO);
#endif
    u_xlat16_5.x = vs_COLOR0.x * 0.5;
    u_xlat16_5.x = (u_xlatb2.x) ? u_xlat16_5.x : 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat16_5.x<0.0500000007);
#else
    u_xlatb12 = u_xlat16_5.x<0.0500000007;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(0.949999988<u_xlat16_5.x);
#else
    u_xlatb22 = 0.949999988<u_xlat16_5.x;
#endif
    u_xlat32 = u_xlat16_5.x + vs_TEXCOORD1.w;
    u_xlat32 = u_xlat32 * 0.5;
    u_xlat16_5.x = (u_xlatb22) ? 1.0 : u_xlat32;
    u_xlat16_5.x = (u_xlatb12) ? 0.0 : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb2.x) ? u_xlat16_5.x : vs_TEXCOORD1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(u_xlat16_5.x<_LightArea);
#else
    u_xlatb2.x = u_xlat16_5.x<_LightArea;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition));
#else
    u_xlatb12 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition);
#endif
    u_xlat16_5.x = (-u_xlat16_5.x) + _LightArea;
    u_xlat16_5.x = u_xlat16_5.x / _ShadowTransitionRange;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(u_xlat16_5.x>=1.0);
#else
    u_xlatb22 = u_xlat16_5.x>=1.0;
#endif
    u_xlat16_32 = u_xlat16_5.x + 0.00999999978;
    u_xlat16_32 = log2(u_xlat16_32);
    u_xlat32 = u_xlat16_32 * _ShadowTransitionSoftness;
    u_xlat32 = exp2(u_xlat32);
    u_xlat32 = min(u_xlat32, 1.0);
    u_xlat22 = (u_xlatb22) ? 1.0 : u_xlat32;
    u_xlat22 = (u_xlatb12) ? u_xlat22 : 1.0;
    u_xlat22 = u_xlatb2.x ? u_xlat22 : float(0.0);
#ifdef UNITY_ADRENO_ES3
    { bool cond = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(vs_TEXCOORD4); u_xlati32 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati32 = int((vec4(0.0, 0.0, 0.0, 0.0)!=vec4(vs_TEXCOORD4)) ? 0xFFFFFFFFu : uint(0u));
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex));
#else
    u_xlatb3 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex);
#endif
    u_xlat16_13.xyz = vec3(_FirstShadowMultColor.xxyz.y + (-_CoolShadowMultColor.x), _FirstShadowMultColor.xxyz.z + (-_CoolShadowMultColor.y), float(_FirstShadowMultColor.z) + (-_CoolShadowMultColor.z));
    u_xlat13.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_13.xyz + _CoolShadowMultColor.xyz;
    u_xlat16_5.xyz = (bool(u_xlatb3)) ? u_xlat13.xyz : vec3(_FirstShadowMultColor.x, _FirstShadowMultColor.y, _FirstShadowMultColor.z);
    u_xlati3 = ~u_xlati32;
    u_xlati12 = u_xlatb12 ? u_xlati3 : int(0);
    u_xlat16_3.xyz = u_xlat16_5.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat3.xyz = vec3(u_xlat22) * u_xlat16_3.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_5.xyz = (int(u_xlati12) != 0) ? u_xlat3.xyz : u_xlat16_5.xyz;
    u_xlat16_5.xyz = (int(u_xlati32) != 0) ? u_xlat16_5.xyz : vec3(1.0, 1.0, 1.0);
    u_xlat16_35 = dot(vs_TEXCOORD1.xyz, u_xlat0.xyz);
    u_xlat16_35 = max(u_xlat16_35, 0.00100000005);
    u_xlat16_35 = log2(u_xlat16_35);
    u_xlat16_35 = u_xlat16_35 * _Shininess;
    u_xlat16_35 = exp2(u_xlat16_35);
    u_xlat16_6.xyz = vec3(u_xlat16_35) * _SpecularColor.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(_SpecMulti);
    u_xlat16_4.xyz = vec3(u_xlat16_4.x * _EmissionColor_MHY.xxyz.y, u_xlat16_4.y * _EmissionColor_MHY.xxyz.z, u_xlat16_4.z * float(_EmissionColor_MHY.z));
    u_xlat0.xyz = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0).xyz;
    u_xlati2 = int(uint(u_xlatb2.x) * 0xffffffffu | uint(u_xlati32));
    u_xlat12.xyz = u_xlat0.xyz * u_xlat16_5.xyz;
    u_xlat0.xyz = (int(u_xlati2) != 0) ? u_xlat12.xyz : u_xlat0.xyz;
    u_xlat0.xyz = u_xlat16_6.xyz * vec3(0.5, 0.5, 0.5) + u_xlat0.xyz;
    u_xlat2.xy = vs_TEXCOORD0.zw * _FlowMap01_ST.xy + _FlowMap01_ST.zw;
    u_xlat16_5.x = _Time.y * _FlowMap01_Uspeed + u_xlat2.x;
    u_xlat16_5.y = _Time.y * _FlowMap01_Vspeed + u_xlat2.y;
    u_xlat2.xy = vs_TEXCOORD0.zw * _Noise_ST.xy + _Noise_ST.zw;
    u_xlat16_6.x = _Time.y * _Noise_Uspeed + u_xlat2.x;
    u_xlat16_6.y = _Time.y * _Noise_Vspeed + u_xlat2.y;
    u_xlat10_2 = textureLod(_Noise, u_xlat16_6.xy, 0.0).x;
    u_xlat16_25.x = _MaskOffset01 * 1.39999998 + -0.699999988;
    u_xlat16_16.x = u_xlat10_2 * _NoiseIntensity;
    u_xlat12.xy = vs_TEXCOORD0.zw * _FlowMap02_ST.xy + _FlowMap02_ST.zw;
    u_xlat16_7.x = _Time.y * _FlowMap02_Uspeed + u_xlat12.x;
    u_xlat16_7.y = _Time.y * _FlowMap02_Vspeed + u_xlat12.y;
    u_xlat16_25.y = _MaskOffset02 * 1.39999998 + -0.699999988;
    u_xlat16_8.xyz = _FlowMapColor01.xyz * vec3(_FlowScale01);
    u_xlat16_5.xy = vec2(u_xlat10_2) * vec2(vec2(_NoiseFlowIntensity, _NoiseFlowIntensity)) + u_xlat16_5.xy;
    u_xlat10_12 = textureLod(_FlowMap01, u_xlat16_5.xy, 0.0).x;
    u_xlat16_12.xyz = vec3(u_xlat10_12) * u_xlat16_8.xyz;
    u_xlat16_5.x = (-vs_TEXCOORD0.z) + 1.0;
    u_xlat16_1.xz = u_xlat16_25.xy + u_xlat16_5.xx;
    u_xlat16_1.yw = vec2(u_xlat10_2) * vec2(vec2(_NoiseIntensity, _NoiseIntensity)) + (-vs_TEXCOORD0.ww);
    u_xlat16_16.y = 1.0;
    u_xlat16_15.xy = u_xlat16_1.xy + u_xlat16_16.xy;
    u_xlat10_3 = textureLod(_Mask01, u_xlat16_15.xy, 0.0).x;
    u_xlat16_3.x = max(u_xlat10_3, 9.99999975e-05);
    u_xlat16_3.x = log2(u_xlat16_3.x);
    u_xlat16_3.x = u_xlat16_3.x * _Mask01_Power;
    u_xlat16_3.x = exp2(u_xlat16_3.x);
    u_xlat16_8.xyz = _FlowMapColor02.xyz * vec3(_FlowScale02);
    u_xlat16_15.xy = vec2(u_xlat10_2) * vec2(vec2(_NoiseFlowIntensity, _NoiseFlowIntensity)) + u_xlat16_7.xy;
    u_xlat10_2 = textureLod(_FlowMap02, u_xlat16_15.xy, 0.0).x;
    u_xlat16_13.xyz = vec3(u_xlat10_2) * u_xlat16_8.xyz;
    u_xlat16_5.xy = vec2(u_xlat16_1.z + u_xlat16_16.x, u_xlat16_1.w + u_xlat16_16.y);
    u_xlat10_2 = textureLod(_Mask02, u_xlat16_5.xy, 0.0).x;
    u_xlat16_2.x = max(u_xlat10_2, 9.99999975e-05);
    u_xlat16_2.x = log2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * _Mask02_Power;
    u_xlat16_2.x = exp2(u_xlat16_2.x);
    u_xlat16_13.xyz = u_xlat16_2.xxx * u_xlat16_13.xyz;
    u_xlat16_2.xyz = u_xlat16_12.xyz * u_xlat16_3.xxx + u_xlat16_13.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(_EmissionScaler) + u_xlat16_2.xyz;
    u_xlat3.xyz = (-u_xlat0.xyz) + u_xlat16_4.xyz;
    u_xlat3.xyz = vec3(u_xlat16_34) * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat9.xy = vs_TEXCOORD0.zw * _DissovleNoise_ST.xy + _DissovleNoise_ST.zw;
    u_xlat16_4.x = _Time.y * _DissolveNoise_Uspeed + u_xlat9.x;
    u_xlat16_4.y = _Time.y * _DissolveNoise_Vspeed + u_xlat9.y;
    u_xlat10_32 = textureLod(_DissovleNoise, u_xlat16_4.xy, 0.0).x;
    u_xlat32 = u_xlat10_32 * _DissovleNoiseScale + vs_TEXCOORD0.z;
#ifdef UNITY_ADRENO_ES3
    u_xlatb32 = !!(_Dissovle>=u_xlat32);
#else
    u_xlatb32 = _Dissovle>=u_xlat32;
#endif
    u_xlat0.xyz = (bool(u_xlatb30)) ? u_xlat3.xyz : u_xlat0.xyz;
    u_xlat0.xyz = u_xlat16_2.xyz + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(0.00999999978<u_xlat16_34);
#else
    u_xlatb30 = 0.00999999978<u_xlat16_34;
#endif
    if((int(u_xlatb32) * int(0xffffffffu))==0){discard;}
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn));
#else
    u_xlatb2.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn);
#endif
    u_xlat12.xyz = u_xlat0.xyz * vec3(vec3(_ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness));
    u_xlat3.xyz = vec3(vec3(_ES_CharacterPointLightWholeIntensity, _ES_CharacterPointLightWholeIntensity, _ES_CharacterPointLightWholeIntensity)) * mhy_CharacterPointLightColor.xyz;
    u_xlat9.xyz = _ES_CharacterMainLightColor.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat9.xyz = min(max(u_xlat9.xyz, 0.0), 1.0);
#else
    u_xlat9.xyz = clamp(u_xlat9.xyz, 0.0, 1.0);
#endif
    u_xlat33 = (-mhy_CharacterPointLightColor.w) + 1.0;
    u_xlat3.xyz = u_xlat9.xyz * vec3(u_xlat33) + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat3.xyz = vec3(vec3(_ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio)) * u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat12.xyz = u_xlat12.xyz * u_xlat3.xyz;
    u_xlat3.xyz = _ES_CharacterAmbientLightColor.xyz * vec3(_ES_CharacterAmbientLightRatio);
    u_xlat16_4.xyz = u_xlat12.xyz * vec3(10.0, 10.0, 10.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.xyz = min(max(u_xlat16_4.xyz, 0.0), 1.0);
#else
    u_xlat16_4.xyz = clamp(u_xlat16_4.xyz, 0.0, 1.0);
#endif
    u_xlat12.xyz = u_xlat3.xyz * u_xlat16_4.xyz + u_xlat12.xyz;
    u_xlat16_4.xyz = (u_xlatb2.x) ? u_xlat12.xyz : u_xlat0.xyz;
    u_xlat16_5.xyz = u_xlat0.xyz + (-u_xlat16_4.xyz);
    u_xlat16_5.xyz = vec3(u_xlat16_34) * u_xlat16_5.xyz + u_xlat16_4.xyz;
    u_xlat16_0.xyz = (bool(u_xlatb30)) ? u_xlat16_5.xyz : u_xlat16_4.xyz;
    u_xlat16_4.x = max(u_xlat16_0.z, u_xlat16_0.y);
    u_xlat16_1.w = max(u_xlat16_0.x, u_xlat16_4.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(1.0<u_xlat16_1.w);
#else
    u_xlatb2.x = 1.0<u_xlat16_1.w;
#endif
    u_xlat16_1.xyz = u_xlat16_0.xyz / u_xlat16_1.www;
    u_xlat16_0.w = 1.0;
    u_xlat16_0 = (u_xlatb2.x) ? u_xlat16_1 : u_xlat16_0;
    u_xlat16_4.x = min(u_xlat16_0.w, 1.10000002);
    u_xlat16_14 = u_xlat16_0.w + (-u_xlat16_4.x);
    u_xlat16_4.x = u_xlat16_34 * u_xlat16_14 + u_xlat16_4.x;
    u_xlat16_2.x = u_xlat16_4.x * 0.0500000007;
    SV_Target0.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb12 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_4.x = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb12) ? u_xlat16_4.x : 0.0;
    SV_Target0.w = 0.0156862754;
    SV_Target1.xyz = u_xlat16_0.xyz;
    SV_Target1.w = u_xlat16_2.x;
    SV_Target2.xy = vec2(0.0, 0.0);
    SV_Target2.w = vs_TEXCOORD4;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "LINE_INTERPOLATION" "TOON_SPECULAR_ON" "TOON_LIGHTMAP_ON" "MAIN_TEX_COLORING_ON" "FACE_MAP_NEW_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _MainTex_ST;
uniform 	float _FaceMapRotateOffset;
uniform 	float _CharacterAmbientSensorShadowOn;
uniform 	vec4 _AmbientSensorUVs;
uniform 	float _UseClipPlane;
uniform 	float _ClipPlaneWorld;
uniform 	vec4 _ClipPlane;
uniform 	vec4 mhy_AvatarLightDir;
uniform 	vec4 mhy_CharacterOverrideLightDir;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
struct unity_Builtins1Array_Type {
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw1 {
	unity_Builtins1Array_Type unity_Builtins1Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform lowp sampler2D _CharacterAmbientSensorTex;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp float vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD6;
flat out highp uint vs_SV_InstanceID0;
float u_xlat0;
int u_xlati0;
vec3 u_xlat1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
vec4 u_xlat4;
mediump float u_xlat16_5;
vec3 u_xlat6;
bool u_xlatb6;
float u_xlat7;
mediump vec2 u_xlat16_11;
float u_xlat12;
bool u_xlatb12;
float u_xlat13;
bool u_xlatb13;
mediump float u_xlat16_17;
float u_xlat19;
bool u_xlatb19;
float u_xlat20;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.5<mhy_CharacterOverrideLightDir.w);
#else
    u_xlatb6 = 0.5<mhy_CharacterOverrideLightDir.w;
#endif
    u_xlat1.x = mhy_CharacterOverrideLightDir.x;
    u_xlat1.yz = (-mhy_CharacterOverrideLightDir.yz);
    u_xlat6.xyz = (bool(u_xlatb6)) ? u_xlat1.xyz : mhy_AvatarLightDir.xyz;
    u_xlati0 = u_xlati0 << 2;
    u_xlat1.x = dot(u_xlat6.xyz, unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz);
    u_xlat7 = dot(u_xlat6.xyz, unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb13 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseClipPlane));
#else
    u_xlatb13 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseClipPlane);
#endif
    if(u_xlatb13){
#ifdef UNITY_ADRENO_ES3
        u_xlatb13 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ClipPlaneWorld));
#else
        u_xlatb13 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ClipPlaneWorld);
#endif
        if(u_xlatb13){
#ifdef UNITY_ADRENO_ES3
            u_xlatb13 = !!(abs(_ClipPlane.w)<0.00100000005);
#else
            u_xlatb13 = abs(_ClipPlane.w)<0.00100000005;
#endif
            u_xlat2.xyz = _ClipPlane.www * _ClipPlane.xyz;
            u_xlat2.xyz = (bool(u_xlatb13)) ? vec3(0.0, 0.0, 0.0) : u_xlat2.xyz;
            u_xlat3 = u_xlat2.yyyy * unity_Builtins1Array[u_xlati0 / 4].hlslcc_mtx4x4unity_WorldToObjectArray[1];
            u_xlat3 = unity_Builtins1Array[u_xlati0 / 4].hlslcc_mtx4x4unity_WorldToObjectArray[0] * u_xlat2.xxxx + u_xlat3;
            u_xlat2 = unity_Builtins1Array[u_xlati0 / 4].hlslcc_mtx4x4unity_WorldToObjectArray[2] * u_xlat2.zzzz + u_xlat3;
            u_xlat2 = u_xlat2 + unity_Builtins1Array[u_xlati0 / 4].hlslcc_mtx4x4unity_WorldToObjectArray[3];
            u_xlat2.xyz = u_xlat2.xyz / u_xlat2.www;
            u_xlat3.xyz = _ClipPlane.yyy * unity_Builtins1Array[u_xlati0 / 4].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz;
            u_xlat3.xyz = unity_Builtins1Array[u_xlati0 / 4].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz * _ClipPlane.xxx + u_xlat3.xyz;
            u_xlat3.xyz = unity_Builtins1Array[u_xlati0 / 4].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz * _ClipPlane.zzz + u_xlat3.xyz;
            u_xlat13 = dot(u_xlat2.xyz, u_xlat3.xyz);
            u_xlat19 = dot(in_POSITION0.xyz, u_xlat3.xyz);
#ifdef UNITY_ADRENO_ES3
            u_xlatb2 = !!(u_xlat19<u_xlat13);
#else
            u_xlatb2 = u_xlat19<u_xlat13;
#endif
            u_xlat13 = (-u_xlat13) + u_xlat19;
            u_xlat3.xyz = (-vec3(u_xlat13)) * u_xlat3.xyz + in_POSITION0.xyz;
            u_xlat3.w = 0.0;
            u_xlat4.xyz = in_POSITION0.xyz;
            u_xlat4.w = in_COLOR0.w;
            u_xlat2 = (bool(u_xlatb2)) ? u_xlat3 : u_xlat4;
            u_xlat16_5 = u_xlat2.w;
        } else {
            u_xlat13 = dot(in_POSITION0.xyz, _ClipPlane.xyz);
            u_xlat19 = _ClipPlane.w + -0.00999999978;
#ifdef UNITY_ADRENO_ES3
            u_xlatb19 = !!(u_xlat13<u_xlat19);
#else
            u_xlatb19 = u_xlat13<u_xlat19;
#endif
            u_xlat13 = u_xlat13 + (-_ClipPlane.w);
            u_xlat3.xyz = (-vec3(u_xlat13)) * _ClipPlane.xyz + in_POSITION0.xyz;
            u_xlat3.w = 0.0;
            u_xlat4.xyz = in_POSITION0.xyz;
            u_xlat4.w = in_COLOR0.w;
            u_xlat2 = (bool(u_xlatb19)) ? u_xlat3 : u_xlat4;
            u_xlat16_5 = u_xlat2.w;
        //ENDIF
        }
    } else {
        u_xlat2.xyz = in_POSITION0.xyz;
        u_xlat16_5 = in_COLOR0.w;
    //ENDIF
    }
    u_xlat3.xyw = (-_WorldSpaceCameraPos.xyz) + unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat4.x = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].x;
    u_xlat4.y = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].x;
    u_xlat4.z = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].x;
    u_xlat4.w = u_xlat3.x;
    u_xlat2.w = 1.0;
    u_xlat13 = dot(u_xlat4, u_xlat2);
    u_xlat4.x = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].y;
    u_xlat4.y = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].y;
    u_xlat4.z = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].y;
    u_xlat4.w = u_xlat3.y;
    u_xlat19 = dot(u_xlat4, u_xlat2);
    u_xlat3.x = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].z;
    u_xlat3.y = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].z;
    u_xlat3.z = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].z;
    u_xlat3.x = dot(u_xlat3, u_xlat2);
    u_xlat4.x = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].w;
    u_xlat4.y = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].w;
    u_xlat4.z = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].w;
    u_xlat4.w = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3].w;
    u_xlat20 = dot(u_xlat4, u_xlat2);
    u_xlat4 = vec4(u_xlat19) * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat4 = hlslcc_mtx4x4unity_MatrixVPZero[0] * vec4(u_xlat13) + u_xlat4;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat3.xxxx + u_xlat4;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVPZero[3] * vec4(u_xlat20) + u_xlat3;
    u_xlat4 = u_xlat2.yyyy * unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat4 = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * u_xlat2.xxxx + u_xlat4;
    u_xlat2 = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * u_xlat2.zzzz + u_xlat4;
    u_xlat2 = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3] * in_POSITION0.wwww + u_xlat2;
    vs_TEXCOORD3.xyz = u_xlat2.xyz / u_xlat2.www;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat2.xz = u_xlat3.xw * vec2(0.5, 0.5);
    u_xlat13 = u_xlat3.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat13 * 0.5;
    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat2.xyz = in_NORMAL0.yyy * unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat2.xyz = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_NORMAL0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_NORMAL0.zzz + u_xlat2.xyz;
    u_xlat0 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0 = inversesqrt(u_xlat0);
    u_xlat2.xyz = vec3(u_xlat0) * u_xlat2.xyz;
    u_xlat16_11.x = dot(u_xlat2.xyz, u_xlat6.xyz);
    vs_TEXCOORD1.w = u_xlat16_11.x * 0.497500002 + 0.5;
    u_xlat16_11.x = min(abs(u_xlat1.x), abs(u_xlat7));
    u_xlat16_17 = max(abs(u_xlat1.x), abs(u_xlat7));
    u_xlat16_17 = float(1.0) / u_xlat16_17;
    u_xlat16_11.x = u_xlat16_17 * u_xlat16_11.x;
    u_xlat16_17 = u_xlat16_11.x * u_xlat16_11.x;
    u_xlat0 = u_xlat16_17 * 0.0208350997 + -0.0851330012;
    u_xlat0 = u_xlat16_17 * u_xlat0 + 0.180141002;
    u_xlat0 = u_xlat16_17 * u_xlat0 + -0.330299497;
    u_xlat0 = u_xlat16_17 * u_xlat0 + 0.999866009;
    u_xlat6.x = u_xlat0 * u_xlat16_11.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(abs(u_xlat1.x)<abs(u_xlat7));
#else
    u_xlatb12 = abs(u_xlat1.x)<abs(u_xlat7);
#endif
    u_xlat6.x = u_xlat6.x * -2.0 + 1.57079637;
    u_xlat6.x = u_xlatb12 ? u_xlat6.x : float(0.0);
    u_xlat0 = u_xlat16_11.x * u_xlat0 + u_xlat6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(u_xlat1.x<(-u_xlat1.x));
#else
    u_xlatb6 = u_xlat1.x<(-u_xlat1.x);
#endif
    u_xlat6.x = u_xlatb6 ? -3.14159274 : float(0.0);
    u_xlat0 = u_xlat6.x + u_xlat0;
    u_xlat16_11.x = min(u_xlat1.x, u_xlat7);
    u_xlat16_17 = max(u_xlat1.x, u_xlat7);
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(u_xlat16_11.x<(-u_xlat16_11.x));
#else
    u_xlatb6 = u_xlat16_11.x<(-u_xlat16_11.x);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat16_17>=(-u_xlat16_17));
#else
    u_xlatb12 = u_xlat16_17>=(-u_xlat16_17);
#endif
    u_xlatb6 = u_xlatb12 && u_xlatb6;
    u_xlat0 = (u_xlatb6) ? (-u_xlat0) : u_xlat0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.0<(-u_xlat0));
#else
    u_xlatb6 = 0.0<(-u_xlat0);
#endif
    u_xlat16_11.x = u_xlat0 * -0.318309903;
    u_xlat0 = max(_FaceMapRotateOffset, 0.0);
    u_xlat12 = _FaceMapRotateOffset + 1.0;
    u_xlat12 = min(u_xlat12, 1.0);
    u_xlat12 = (-u_xlat0) + u_xlat12;
    u_xlat0 = (-u_xlat0) + abs(u_xlat16_11.x);
    u_xlat12 = float(1.0) / u_xlat12;
    u_xlat0 = u_xlat12 * u_xlat0;
#ifdef UNITY_ADRENO_ES3
    u_xlat0 = min(max(u_xlat0, 0.0), 1.0);
#else
    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
#endif
    u_xlat12 = u_xlat0 * -2.0 + 3.0;
    u_xlat0 = u_xlat0 * u_xlat0;
    u_xlat0 = u_xlat0 * u_xlat12;
    u_xlat0 = max(u_xlat0, 9.99999975e-05);
    u_xlat0 = min(u_xlat0, 0.999899983);
    u_xlat16_11.xy = in_TEXCOORD0.xy * vec2(-1.0, 1.0) + vec2(1.0, 0.0);
    vs_TEXCOORD6.xy = (bool(u_xlatb6)) ? u_xlat16_11.xy : in_TEXCOORD0.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_CharacterAmbientSensorShadowOn));
#else
    u_xlatb6 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_CharacterAmbientSensorShadowOn);
#endif
    if(u_xlatb6){
        u_xlat6.x = textureLod(_CharacterAmbientSensorTex, _AmbientSensorUVs.xy, 0.0).x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb6 = !!(0.5<u_xlat6.x);
#else
        u_xlatb6 = 0.5<u_xlat6.x;
#endif
        vs_TEXCOORD4 = u_xlatb6 ? 1.0 : float(0.0);
    } else {
        vs_TEXCOORD4 = 0.0;
    //ENDIF
    }
    gl_Position = u_xlat3;
    vs_COLOR0.xyz = in_COLOR0.xyz;
    vs_COLOR0.w = u_xlat16_5;
    vs_TEXCOORD1.xyz = u_xlat2.xyz;
    vs_TEXCOORD2.zw = u_xlat3.zw;
    vs_TEXCOORD6.z = u_xlat0;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	mediump vec4 _Color;
uniform 	float _MainTexAlphaUse;
uniform 	mediump float _MainTexAlphaCutoff;
uniform 	mediump vec4 _MainTexTintColor;
uniform 	float _UseLightMapColorAO;
uniform 	float _UseVertexColorAO;
uniform 	mediump float _LightArea;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	float _UseCoolShadowColorOrTex;
uniform 	mediump vec3 _CoolShadowMultColor;
uniform 	float _UseShadowTransition;
uniform 	float _ShadowTransitionRange;
uniform 	float _ShadowTransitionSoftness;
uniform 	mediump vec3 _SpecularColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	float _FaceBlushStrength;
uniform 	mediump vec3 _FaceBlushColor;
uniform 	float _FaceMapSoftness;
uniform 	mediump float _EmissionScaler;
uniform 	mediump vec3 _EmissionColor_MHY;
uniform 	float _UseMaterial2;
uniform 	mediump vec3 _Color2;
uniform 	mediump vec3 _FirstShadowMultColor2;
uniform 	mediump vec3 _CoolShadowMultColor2;
uniform 	mediump float _Shininess2;
uniform 	mediump float _SpecMulti2;
uniform 	float _ShadowTransitionRange2;
uniform 	float _ShadowTransitionSoftness2;
uniform 	float _UseMaterial3;
uniform 	mediump vec3 _Color3;
uniform 	mediump vec3 _FirstShadowMultColor3;
uniform 	mediump vec3 _CoolShadowMultColor3;
uniform 	mediump float _Shininess3;
uniform 	mediump float _SpecMulti3;
uniform 	float _ShadowTransitionRange3;
uniform 	float _ShadowTransitionSoftness3;
uniform 	float _UseMaterial4;
uniform 	mediump vec3 _Color4;
uniform 	mediump vec3 _FirstShadowMultColor4;
uniform 	mediump vec3 _CoolShadowMultColor4;
uniform 	mediump float _Shininess4;
uniform 	mediump float _SpecMulti4;
uniform 	float _ShadowTransitionRange4;
uniform 	float _ShadowTransitionSoftness4;
uniform 	float _UseMaterial5;
uniform 	mediump vec3 _Color5;
uniform 	mediump vec3 _FirstShadowMultColor5;
uniform 	mediump vec3 _CoolShadowMultColor5;
uniform 	mediump float _Shininess5;
uniform 	mediump float _SpecMulti5;
uniform 	float _ShadowTransitionRange5;
uniform 	float _ShadowTransitionSoftness5;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _TextureBiasWhenDithering;
uniform 	float _UseClipPlane;
uniform 	float _ES_CharacterAmbientLightOn;
uniform 	float _ES_CharacterAmbientBrightness;
uniform 	vec3 _ES_CharacterMainLightColor;
uniform 	vec3 _ES_CharacterAmbientLightColor;
uniform 	float _ES_CharacterMainLightRatio;
uniform 	float _ES_CharacterAmbientLightRatio;
uniform 	float _ES_CharacterColorTone;
uniform 	float _ES_CharacterPointLightWholeIntensity;
uniform 	vec4 mhy_AvatarLightDir;
uniform 	vec4 mhy_CharacterPointLightColor;
uniform 	vec4 mhy_CharacterOverrideLightDir;
uniform 	mediump vec4 _FlowMapColor01;
uniform 	mediump float _FlowScale01;
uniform 	mediump float _FlowMap01_Uspeed;
uniform 	vec4 _FlowMap01_ST;
uniform 	mediump float _FlowMap01_Vspeed;
uniform 	mediump float _Noise_Uspeed;
uniform 	vec4 _Noise_ST;
uniform 	mediump float _Noise_Vspeed;
uniform 	mediump float _NoiseFlowIntensity;
uniform 	mediump float _MaskOffset01;
uniform 	mediump float _NoiseIntensity;
uniform 	mediump float _Mask01_Power;
uniform 	mediump vec4 _FlowMapColor02;
uniform 	mediump float _FlowScale02;
uniform 	mediump float _FlowMap02_Uspeed;
uniform 	vec4 _FlowMap02_ST;
uniform 	mediump float _FlowMap02_Vspeed;
uniform 	mediump float _MaskOffset02;
uniform 	mediump float _Mask02_Power;
uniform 	mediump float _DissolveNoise_Uspeed;
uniform 	vec4 _DissovleNoise_ST;
uniform 	mediump float _DissolveNoise_Vspeed;
uniform 	mediump float _DissovleNoiseScale;
uniform 	mediump float _Dissovle;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _FaceMapTex;
uniform lowp sampler2D _Noise;
uniform lowp sampler2D _FlowMap01;
uniform lowp sampler2D _Mask01;
uniform lowp sampler2D _FlowMap02;
uniform lowp sampler2D _Mask02;
uniform lowp sampler2D _DissovleNoise;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp float vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
vec3 u_xlat2;
mediump float u_xlat16_2;
bvec4 u_xlatb2;
vec3 u_xlat3;
mediump float u_xlat16_3;
lowp vec4 u_xlat10_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
bvec4 u_xlatb5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
mediump vec3 u_xlat16_7;
int u_xlati7;
bvec3 u_xlatb7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
bool u_xlatb11;
vec3 u_xlat13;
mediump vec3 u_xlat16_13;
lowp float u_xlat10_13;
bool u_xlatb13;
float u_xlat14;
mediump vec3 u_xlat16_14;
int u_xlati14;
mediump float u_xlat16_15;
mediump vec3 u_xlat16_17;
mediump vec3 u_xlat16_19;
bvec2 u_xlatb22;
vec2 u_xlat24;
mediump float u_xlat16_30;
float u_xlat33;
mediump float u_xlat16_33;
lowp float u_xlat10_33;
int u_xlati33;
bool u_xlatb33;
float u_xlat35;
float u_xlat36;
int u_xlati36;
bool u_xlatb36;
mediump float u_xlat16_37;
mediump float u_xlat16_39;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseClipPlane));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseClipPlane);
#endif
    u_xlat16_1.x = vs_COLOR0.w + -0.00999999978;
#ifdef UNITY_ADRENO_ES3
    u_xlatb11 = !!(u_xlat16_1.x<0.0);
#else
    u_xlatb11 = u_xlat16_1.x<0.0;
#endif
    u_xlatb0 = u_xlatb0 && u_xlatb11;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(_DitherAlpha<0.949999988);
#else
        u_xlatb0 = _DitherAlpha<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb22.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb22.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb22.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = _DitherAlpha * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + -0.00999999978;
#ifdef UNITY_ADRENO_ES3
            u_xlatb0 = !!(u_xlat0.x<0.0);
#else
            u_xlatb0 = u_xlat0.x<0.0;
#endif
            if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(0.5<mhy_CharacterOverrideLightDir.w);
#else
    u_xlatb2.x = 0.5<mhy_CharacterOverrideLightDir.w;
#endif
    u_xlat3.x = mhy_CharacterOverrideLightDir.x;
    u_xlat3.yz = (-mhy_CharacterOverrideLightDir.yz);
    u_xlat2.xyz = (u_xlatb2.x) ? u_xlat3.xyz : mhy_AvatarLightDir.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat33) + u_xlat2.xyz;
    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat0.xyz = vec3(u_xlat33) * u_xlat0.xyz;
    u_xlat33 = _TextureBiasWhenDithering + -1.0;
    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy, u_xlat33);
    u_xlat16_4.xyz = u_xlat1.xyz * _MainTexTintColor.xyz;
    u_xlat16_5.xyz = u_xlat16_4.xyz + u_xlat16_4.xyz;
    u_xlat16_6.xyz = u_xlat1.xyz + _MainTexTintColor.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_6.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(-4.0, -4.0, -4.0) + u_xlat16_6.xyz;
    u_xlatb2 = lessThan(vec4(0.5, 0.5, 0.5, 0.00999999978), u_xlat1);
    u_xlat16_6.x = (u_xlatb2.x) ? float(1.0) : float(0.0);
    u_xlat16_6.y = (u_xlatb2.y) ? float(1.0) : float(0.0);
    u_xlat16_6.z = (u_xlatb2.z) ? float(1.0) : float(0.0);
    u_xlat16_4.xyz = u_xlat16_4.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat16_4.xyz = u_xlat16_6.xyz * u_xlat16_4.xyz + u_xlat16_5.xyz;
    u_xlatb2.xyz = equal(vec4(_MainTexAlphaUse), vec4(3.0, 1.0, 2.0, 0.0)).xyz;
    u_xlat3.x = u_xlat1.w * _FaceBlushStrength;
    u_xlat16_14.xyz = (-u_xlat16_4.xyz) + _FaceBlushColor.xyz;
    u_xlat3.xyz = u_xlat3.xxx * u_xlat16_14.xyz + u_xlat16_4.xyz;
    u_xlat16_4.xyz = (u_xlatb2.x) ? u_xlat3.xyz : u_xlat16_4.xyz;
    u_xlat16_37 = u_xlat1.w + (-_MainTexAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(u_xlat16_37<0.0);
#else
    u_xlatb2.x = u_xlat16_37<0.0;
#endif
    u_xlatb2.x = u_xlatb2.y && u_xlatb2.x;
    if((int(u_xlatb2.x) * int(0xffffffffu))!=0){discard;}
    u_xlat10_3 = texture(_LightMapTex, vs_TEXCOORD0.xy, u_xlat33);
    u_xlatb2.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseLightMapColorAO, _UseVertexColorAO, _UseLightMapColorAO, _UseLightMapColorAO)).xy;
    u_xlat16_37 = (u_xlatb2.x) ? u_xlat10_3.y : 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseMaterial2));
#else
    u_xlatb33 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseMaterial2);
#endif
    u_xlatb5 = greaterThanEqual(u_xlat10_3.wwww, vec4(0.800000012, 0.400000006, 0.200000003, 0.600000024));
    u_xlatb33 = u_xlatb33 && u_xlatb5.x;
    u_xlat33 = (u_xlatb33) ? 2.0 : 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseMaterial3));
#else
    u_xlatb2.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseMaterial3);
#endif
    u_xlatb2.x = u_xlatb5.y && u_xlatb2.x;
    u_xlatb7.xyz = lessThan(u_xlat10_3.wwww, vec4(0.600000024, 0.400000006, 0.800000012, 0.0)).xyz;
    u_xlatb2.x = u_xlatb2.x && u_xlatb7.x;
    u_xlat33 = (u_xlatb2.x) ? 3.0 : u_xlat33;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseMaterial4));
#else
    u_xlatb2.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseMaterial4);
#endif
    u_xlatb2.x = u_xlatb5.z && u_xlatb2.x;
    u_xlatb2.x = u_xlatb7.y && u_xlatb2.x;
    u_xlat33 = (u_xlatb2.x) ? 4.0 : u_xlat33;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseMaterial5));
#else
    u_xlatb2.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseMaterial5);
#endif
    u_xlatb2.x = u_xlatb5.w && u_xlatb2.x;
    u_xlatb2.x = u_xlatb7.z && u_xlatb2.x;
    u_xlat33 = (u_xlatb2.x) ? 5.0 : u_xlat33;
    u_xlatb5 = equal(vec4(u_xlat33), vec4(2.0, 3.0, 4.0, 5.0));
    u_xlat16_6.xyz = (u_xlatb5.x) ? _Color2.xyz : _Color.xyz;
    u_xlat16_6.xyz = (u_xlatb5.y) ? _Color3.xyz : u_xlat16_6.xyz;
    u_xlat16_6.xyz = (u_xlatb5.z) ? _Color4.xyz : u_xlat16_6.xyz;
    u_xlat16_6.xyz = (u_xlatb5.w) ? _Color5.xyz : u_xlat16_6.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_6.xyz;
    u_xlatb2.x = u_xlatb2.w && u_xlatb2.z;
    u_xlat16_6.x = (u_xlatb2.x) ? u_xlat1.w : 0.0;
    u_xlat24.x = texture(_FaceMapTex, vs_TEXCOORD6.xy, -1.0).w;
    u_xlat35 = max(_FaceMapSoftness, 9.99999997e-07);
    u_xlat16_17.x = (-u_xlat35) + vs_TEXCOORD6.z;
    u_xlat16_14.x = max(u_xlat16_17.x, 9.99999975e-05);
    u_xlat16_14.x = min(u_xlat16_14.x, 0.998899996);
    u_xlat16_17.x = u_xlat35 + vs_TEXCOORD6.z;
    u_xlat24.y = min(u_xlat16_17.x, 0.999899983);
    u_xlat24.xy = u_xlat24.xy + (-u_xlat16_14.xx);
    u_xlat35 = float(1.0) / u_xlat24.y;
    u_xlat24.x = u_xlat35 * u_xlat24.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat24.x = min(max(u_xlat24.x, 0.0), 1.0);
#else
    u_xlat24.x = clamp(u_xlat24.x, 0.0, 1.0);
#endif
    u_xlat35 = u_xlat24.x * -2.0 + 3.0;
    u_xlat24.x = u_xlat24.x * u_xlat24.x;
    u_xlat14 = u_xlat24.x * u_xlat35;
    u_xlat16_17.x = u_xlat16_37 * vs_COLOR0.x;
    u_xlat16_37 = (u_xlatb2.y) ? u_xlat16_17.x : u_xlat16_37;
#ifdef UNITY_ADRENO_ES3
    u_xlatb13 = !!(u_xlat16_37<0.0500000007);
#else
    u_xlatb13 = u_xlat16_37<0.0500000007;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb36 = !!(0.949999988<u_xlat16_37);
#else
    u_xlatb36 = 0.949999988<u_xlat16_37;
#endif
    u_xlat7.x = u_xlat16_37 + vs_TEXCOORD1.w;
    u_xlat7.x = u_xlat7.x * 0.5;
    u_xlat16_37 = (u_xlatb36) ? 1.0 : u_xlat7.x;
    u_xlat16_37 = (u_xlatb13) ? 0.0 : u_xlat16_37;
#ifdef UNITY_ADRENO_ES3
    u_xlatb13 = !!(u_xlat16_37<_LightArea);
#else
    u_xlatb13 = u_xlat16_37<_LightArea;
#endif
    if(u_xlatb13){
#ifdef UNITY_ADRENO_ES3
        u_xlatb13 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition));
#else
        u_xlatb13 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition);
#endif
#ifdef UNITY_ADRENO_ES3
        u_xlatb36 = !!(u_xlat33==1.0);
#else
        u_xlatb36 = u_xlat33==1.0;
#endif
        u_xlat16_8.x = (u_xlatb36) ? _ShadowTransitionRange : 0.0;
        u_xlat16_8.y = (u_xlatb36) ? _ShadowTransitionSoftness : 0.0;
        u_xlat16_17.xy = (u_xlatb5.x) ? vec2(_ShadowTransitionRange2, _ShadowTransitionSoftness2) : u_xlat16_8.xy;
        u_xlat16_17.xy = (u_xlatb5.y) ? vec2(_ShadowTransitionRange3, _ShadowTransitionSoftness3) : u_xlat16_17.xy;
        u_xlat16_17.xy = (u_xlatb5.z) ? vec2(_ShadowTransitionRange4, _ShadowTransitionSoftness4) : u_xlat16_17.xy;
        u_xlat16_17.xy = (u_xlatb5.w) ? vec2(_ShadowTransitionRange5, _ShadowTransitionSoftness5) : u_xlat16_17.xy;
        u_xlat16_37 = (-u_xlat16_37) + _LightArea;
        u_xlat16_37 = u_xlat16_37 / u_xlat16_17.x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb36 = !!(u_xlat16_37>=1.0);
#else
        u_xlatb36 = u_xlat16_37>=1.0;
#endif
        u_xlat16_7.x = u_xlat16_37 + 0.00999999978;
        u_xlat16_7.x = log2(u_xlat16_7.x);
        u_xlat16_7.x = u_xlat16_17.y * u_xlat16_7.x;
        u_xlat16_7.x = exp2(u_xlat16_7.x);
        u_xlat7.x = min(u_xlat16_7.x, 1.0);
        u_xlat36 = (u_xlatb36) ? 1.0 : u_xlat7.x;
        u_xlat13.x = (u_xlatb13) ? u_xlat36 : 1.0;
        u_xlat16_37 = 0.0;
    } else {
        u_xlat13.x = 0.0;
        u_xlat16_37 = 1.0;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb36 = !!(0.5<u_xlat10_3.x);
#else
    u_xlatb36 = 0.5<u_xlat10_3.x;
#endif
    u_xlat16_17.x = min(u_xlat14, u_xlat16_37);
    u_xlat16_37 = (u_xlatb36) ? u_xlat16_17.x : u_xlat16_37;
    u_xlat16_37 = (-u_xlat16_37) + 1.0;
#ifdef UNITY_ADRENO_ES3
    { bool cond = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(vs_TEXCOORD4); u_xlati14 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati14 = int((vec4(0.0, 0.0, 0.0, 0.0)!=vec4(vs_TEXCOORD4)) ? 0xFFFFFFFFu : uint(0u));
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(u_xlat33==1.0);
#else
    u_xlatb33 = u_xlat33==1.0;
#endif
    if(u_xlatb33){
#ifdef UNITY_ADRENO_ES3
        u_xlatb36 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex));
#else
        u_xlatb36 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex);
#endif
        u_xlat16_7.xyz = vec3(_FirstShadowMultColor.xxyz.y + (-_CoolShadowMultColor.x), _FirstShadowMultColor.xxyz.z + (-_CoolShadowMultColor.y), float(_FirstShadowMultColor.z) + (-_CoolShadowMultColor.z));
        u_xlat7.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_7.xyz + _CoolShadowMultColor.xyz;
        u_xlat16_17.xyz = (bool(u_xlatb36)) ? u_xlat7.xyz : vec3(_FirstShadowMultColor.x, _FirstShadowMultColor.y, _FirstShadowMultColor.z);
    } else {
        if(u_xlatb5.x){
#ifdef UNITY_ADRENO_ES3
            u_xlatb36 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex));
#else
            u_xlatb36 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex);
#endif
            u_xlat16_7.xyz = _FirstShadowMultColor2.xyz + (-_CoolShadowMultColor2.xyz);
            u_xlat7.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_7.xyz + _CoolShadowMultColor2.xyz;
            u_xlat16_17.xyz = (bool(u_xlatb36)) ? u_xlat7.xyz : _FirstShadowMultColor2.xyz;
        } else {
#ifdef UNITY_ADRENO_ES3
            u_xlatb36 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex));
#else
            u_xlatb36 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex);
#endif
            u_xlat16_7.xyz = _FirstShadowMultColor3.xyz + (-_CoolShadowMultColor3.xyz);
            u_xlat7.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_7.xyz + _CoolShadowMultColor3.xyz;
            u_xlat16_8.xyz = (bool(u_xlatb36)) ? u_xlat7.xyz : _FirstShadowMultColor3.xyz;
            u_xlat16_7.xyz = _FirstShadowMultColor4.xyz + (-_CoolShadowMultColor4.xyz);
            u_xlat7.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_7.xyz + _CoolShadowMultColor4.xyz;
            u_xlat16_9.xyz = (bool(u_xlatb36)) ? u_xlat7.xyz : _FirstShadowMultColor4.xyz;
            u_xlat16_7.xyz = _FirstShadowMultColor5.xyz + (-_CoolShadowMultColor5.xyz);
            u_xlat7.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_7.xyz + _CoolShadowMultColor5.xyz;
            u_xlat16_10.xyz = (bool(u_xlatb36)) ? u_xlat7.xyz : _FirstShadowMultColor5.xyz;
            u_xlat16_9.xyz = (u_xlatb5.z) ? u_xlat16_9.xyz : u_xlat16_10.xyz;
            u_xlat16_17.xyz = (u_xlatb5.y) ? u_xlat16_8.xyz : u_xlat16_9.xyz;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb36 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition));
#else
    u_xlatb36 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition);
#endif
    u_xlati7 = ~u_xlati14;
    u_xlati36 = u_xlatb36 ? u_xlati7 : int(0);
    u_xlat16_7.xyz = u_xlat16_17.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat7.xyz = u_xlat13.xxx * u_xlat16_7.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_17.xyz = (int(u_xlati36) != 0) ? u_xlat7.xyz : u_xlat16_17.xyz;
    u_xlat16_8.x = (-u_xlat35) * u_xlat24.x + 1.0;
    u_xlat16_19.xyz = u_xlat16_17.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat16_8.xyz = u_xlat16_8.xxx * u_xlat16_19.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_17.xyz = (int(u_xlati14) != 0) ? u_xlat16_17.xyz : u_xlat16_8.xyz;
    u_xlat16_8.x = (u_xlatb5.z) ? _Shininess4 : _Shininess5;
    u_xlat16_19.x = (u_xlatb5.z) ? _SpecMulti4 : _SpecMulti5;
    u_xlat16_8.x = (u_xlatb5.y) ? _Shininess3 : u_xlat16_8.x;
    u_xlat16_19.x = (u_xlatb5.y) ? _SpecMulti3 : u_xlat16_19.x;
    u_xlat16_8.x = (u_xlatb5.x) ? _Shininess2 : u_xlat16_8.x;
    u_xlat16_19.x = (u_xlatb5.x) ? _SpecMulti2 : u_xlat16_19.x;
    u_xlat16_8.x = (u_xlatb33) ? _Shininess : u_xlat16_8.x;
    u_xlat16_19.x = (u_xlatb33) ? _SpecMulti : u_xlat16_19.x;
    u_xlat16_30 = dot(vs_TEXCOORD1.xyz, u_xlat0.xyz);
    u_xlat16_30 = max(u_xlat16_30, 0.00100000005);
    u_xlat16_30 = log2(u_xlat16_30);
    u_xlat16_8.x = u_xlat16_30 * u_xlat16_8.x;
    u_xlat16_8.x = exp2(u_xlat16_8.x);
    u_xlat0.x = (-u_xlat10_3.z) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat0.x<u_xlat16_8.x);
#else
    u_xlatb0 = u_xlat0.x<u_xlat16_8.x;
#endif
    u_xlat16_8.xyz = u_xlat16_19.xxx * _SpecularColor.xyz;
    u_xlat16_8.xyz = u_xlat10_3.xxx * u_xlat16_8.xyz;
    u_xlat16_8.xyz = (bool(u_xlatb0)) ? u_xlat16_8.xyz : vec3(0.0, 0.0, 0.0);
    u_xlat16_4.xyz = vec3(u_xlat16_4.x * _EmissionColor_MHY.xxyz.y, u_xlat16_4.y * _EmissionColor_MHY.xxyz.z, u_xlat16_4.z * float(_EmissionColor_MHY.z));
    u_xlat0.xyz = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(u_xlat16_37==1.0);
#else
    u_xlatb33 = u_xlat16_37==1.0;
#endif
    u_xlati33 = int(uint(u_xlatb33) * 0xffffffffu | uint(u_xlati14));
    u_xlat13.xyz = u_xlat0.xyz * u_xlat16_17.xyz;
    u_xlat0.xyz = (int(u_xlati33) != 0) ? u_xlat13.xyz : u_xlat0.xyz;
    u_xlat0.xyz = u_xlat16_8.xyz + u_xlat0.xyz;
    u_xlat13.xy = vs_TEXCOORD0.zw * _FlowMap01_ST.xy + _FlowMap01_ST.zw;
    u_xlat16_8.x = _Time.y * _FlowMap01_Uspeed + u_xlat13.x;
    u_xlat16_8.y = _Time.y * _FlowMap01_Vspeed + u_xlat13.y;
    u_xlat13.xy = vs_TEXCOORD0.zw * _Noise_ST.xy + _Noise_ST.zw;
    u_xlat16_9.x = _Time.y * _Noise_Uspeed + u_xlat13.x;
    u_xlat16_9.y = _Time.y * _Noise_Vspeed + u_xlat13.y;
    u_xlat10_33 = textureLod(_Noise, u_xlat16_9.xy, 0.0).x;
    u_xlat16_37 = _MaskOffset01 * 1.39999998 + -0.699999988;
    u_xlat16_17.x = u_xlat10_33 * _NoiseIntensity;
    u_xlat13.xy = vs_TEXCOORD0.zw * _FlowMap02_ST.xy + _FlowMap02_ST.zw;
    u_xlat16_9.x = _Time.y * _FlowMap02_Uspeed + u_xlat13.x;
    u_xlat16_9.y = _Time.y * _FlowMap02_Vspeed + u_xlat13.y;
    u_xlat16_39 = _MaskOffset02 * 1.39999998 + -0.699999988;
    u_xlat16_10.xyz = _FlowMapColor01.xyz * vec3(_FlowScale01);
    u_xlat16_8.xy = vec2(u_xlat10_33) * vec2(vec2(_NoiseFlowIntensity, _NoiseFlowIntensity)) + u_xlat16_8.xy;
    u_xlat10_13 = textureLod(_FlowMap01, u_xlat16_8.xy, 0.0).x;
    u_xlat16_13.xyz = vec3(u_xlat10_13) * u_xlat16_10.xyz;
    u_xlat16_8.x = (-vs_TEXCOORD0.z) + 1.0;
    u_xlat16_1.x = u_xlat16_37 + u_xlat16_8.x;
    u_xlat16_1.yw = vec2(u_xlat10_33) * vec2(vec2(_NoiseIntensity, _NoiseIntensity)) + (-vs_TEXCOORD0.ww);
    u_xlat16_17.y = 1.0;
    u_xlat16_19.xy = u_xlat16_1.xy + u_xlat16_17.xy;
    u_xlat10_3.x = textureLod(_Mask01, u_xlat16_19.xy, 0.0).x;
    u_xlat16_3 = max(u_xlat10_3.x, 9.99999975e-05);
    u_xlat16_3 = log2(u_xlat16_3);
    u_xlat16_3 = u_xlat16_3 * _Mask01_Power;
    u_xlat16_3 = exp2(u_xlat16_3);
    u_xlat16_19.xyz = _FlowMapColor02.xyz * vec3(_FlowScale02);
    u_xlat16_9.xy = vec2(u_xlat10_33) * vec2(vec2(_NoiseFlowIntensity, _NoiseFlowIntensity)) + u_xlat16_9.xy;
    u_xlat10_33 = textureLod(_FlowMap02, u_xlat16_9.xy, 0.0).x;
    u_xlat16_14.xyz = vec3(u_xlat10_33) * u_xlat16_19.xyz;
    u_xlat16_1.z = u_xlat16_39 + u_xlat16_8.x;
    u_xlat16_17.xy = vec2(u_xlat16_1.z + u_xlat16_17.x, u_xlat16_1.w + u_xlat16_17.y);
    u_xlat10_33 = textureLod(_Mask02, u_xlat16_17.xy, 0.0).x;
    u_xlat16_33 = max(u_xlat10_33, 9.99999975e-05);
    u_xlat16_33 = log2(u_xlat16_33);
    u_xlat16_33 = u_xlat16_33 * _Mask02_Power;
    u_xlat16_33 = exp2(u_xlat16_33);
    u_xlat16_14.xyz = vec3(u_xlat16_33) * u_xlat16_14.xyz;
    u_xlat16_13.xyz = u_xlat16_13.xyz * vec3(u_xlat16_3) + u_xlat16_14.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(_EmissionScaler) + u_xlat16_13.xyz;
    u_xlat3.xyz = (-u_xlat0.xyz) + u_xlat16_4.xyz;
    u_xlat3.xyz = u_xlat16_6.xxx * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat7.xy = vs_TEXCOORD0.zw * _DissovleNoise_ST.xy + _DissovleNoise_ST.zw;
    u_xlat16_4.x = _Time.y * _DissolveNoise_Uspeed + u_xlat7.x;
    u_xlat16_4.y = _Time.y * _DissolveNoise_Vspeed + u_xlat7.y;
    u_xlat10_33 = textureLod(_DissovleNoise, u_xlat16_4.xy, 0.0).x;
    u_xlat33 = u_xlat10_33 * _DissovleNoiseScale + vs_TEXCOORD0.z;
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(_Dissovle>=u_xlat33);
#else
    u_xlatb33 = _Dissovle>=u_xlat33;
#endif
    u_xlat0.xyz = (u_xlatb2.x) ? u_xlat3.xyz : u_xlat0.xyz;
    u_xlat0.xyz = u_xlat16_13.xyz + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(0.00999999978<u_xlat16_6.x);
#else
    u_xlatb2.x = 0.00999999978<u_xlat16_6.x;
#endif
    if((int(u_xlatb33) * int(0xffffffffu))==0){discard;}
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn));
#else
    u_xlatb33 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn);
#endif
    u_xlat13.xyz = u_xlat0.xyz * vec3(vec3(_ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness));
    u_xlat3.xyz = vec3(vec3(_ES_CharacterPointLightWholeIntensity, _ES_CharacterPointLightWholeIntensity, _ES_CharacterPointLightWholeIntensity)) * mhy_CharacterPointLightColor.xyz;
    u_xlat7.xyz = _ES_CharacterMainLightColor.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.xyz = min(max(u_xlat7.xyz, 0.0), 1.0);
#else
    u_xlat7.xyz = clamp(u_xlat7.xyz, 0.0, 1.0);
#endif
    u_xlat36 = (-mhy_CharacterPointLightColor.w) + 1.0;
    u_xlat3.xyz = u_xlat7.xyz * vec3(u_xlat36) + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat3.xyz = vec3(vec3(_ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio)) * u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat13.xyz = u_xlat13.xyz * u_xlat3.xyz;
    u_xlat3.xyz = _ES_CharacterAmbientLightColor.xyz * vec3(_ES_CharacterAmbientLightRatio);
    u_xlat16_4.xyz = u_xlat13.xyz * vec3(10.0, 10.0, 10.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.xyz = min(max(u_xlat16_4.xyz, 0.0), 1.0);
#else
    u_xlat16_4.xyz = clamp(u_xlat16_4.xyz, 0.0, 1.0);
#endif
    u_xlat13.xyz = u_xlat3.xyz * u_xlat16_4.xyz + u_xlat13.xyz;
    u_xlat16_4.xyz = (bool(u_xlatb33)) ? u_xlat13.xyz : u_xlat0.xyz;
    u_xlat16_17.xyz = u_xlat0.xyz + (-u_xlat16_4.xyz);
    u_xlat16_17.xyz = u_xlat16_6.xxx * u_xlat16_17.xyz + u_xlat16_4.xyz;
    u_xlat16_0.xyz = (u_xlatb2.x) ? u_xlat16_17.xyz : u_xlat16_4.xyz;
    u_xlat16_4.x = max(u_xlat16_0.z, u_xlat16_0.y);
    u_xlat16_1.w = max(u_xlat16_0.x, u_xlat16_4.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(1.0<u_xlat16_1.w);
#else
    u_xlatb2.x = 1.0<u_xlat16_1.w;
#endif
    u_xlat16_1.xyz = u_xlat16_0.xyz / u_xlat16_1.www;
    u_xlat16_0.w = 1.0;
    u_xlat16_0 = (u_xlatb2.x) ? u_xlat16_1 : u_xlat16_0;
    u_xlat16_4.x = min(u_xlat16_0.w, 1.10000002);
    u_xlat16_15 = u_xlat16_0.w + (-u_xlat16_4.x);
    u_xlat16_4.x = u_xlat16_6.x * u_xlat16_15 + u_xlat16_4.x;
    u_xlat16_2 = u_xlat16_4.x * 0.0500000007;
    SV_Target0.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb13 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb13 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_4.x = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb13) ? u_xlat16_4.x : 0.0;
    SV_Target0.w = 0.0156862754;
    SV_Target1.xyz = u_xlat16_0.xyz;
    SV_Target1.w = u_xlat16_2;
    SV_Target2.xy = vec2(0.0, 0.0);
    SV_Target2.w = vs_TEXCOORD4;
    return;
}

#endif
"
}
}
Program "fp" {
SubProgram "gles3 " {
""
}
SubProgram "gles3 " {
Keywords { "TOON_SPECULAR_ON" "TOON_LIGHTMAP_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "TOON_SPECULAR_ON" "TOON_LIGHTMAP_ON" }
""
}
SubProgram "gles3 " {
Keywords { "MSAA_INTERPOLATION" }
""
}
SubProgram "gles3 " {
Keywords { "MSAA_INTERPOLATION" "TOON_SPECULAR_ON" "TOON_LIGHTMAP_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MSAA_INTERPOLATION" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MSAA_INTERPOLATION" "TOON_SPECULAR_ON" "TOON_LIGHTMAP_ON" }
""
}
SubProgram "gles3 " {
Keywords { "LINE_INTERPOLATION" }
""
}
SubProgram "gles3 " {
Keywords { "LINE_INTERPOLATION" "TOON_SPECULAR_ON" "TOON_LIGHTMAP_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "LINE_INTERPOLATION" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "LINE_INTERPOLATION" "TOON_SPECULAR_ON" "TOON_LIGHTMAP_ON" }
""
}
SubProgram "gles3 " {
Keywords { "MAIN_TEX_COLORING_ON" }
""
}
SubProgram "gles3 " {
Keywords { "TOON_SPECULAR_ON" "TOON_LIGHTMAP_ON" "MAIN_TEX_COLORING_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MAIN_TEX_COLORING_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "TOON_SPECULAR_ON" "TOON_LIGHTMAP_ON" "MAIN_TEX_COLORING_ON" }
""
}
SubProgram "gles3 " {
Keywords { "MSAA_INTERPOLATION" "MAIN_TEX_COLORING_ON" }
""
}
SubProgram "gles3 " {
Keywords { "MSAA_INTERPOLATION" "TOON_SPECULAR_ON" "TOON_LIGHTMAP_ON" "MAIN_TEX_COLORING_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MSAA_INTERPOLATION" "MAIN_TEX_COLORING_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MSAA_INTERPOLATION" "TOON_SPECULAR_ON" "TOON_LIGHTMAP_ON" "MAIN_TEX_COLORING_ON" }
""
}
SubProgram "gles3 " {
Keywords { "LINE_INTERPOLATION" "MAIN_TEX_COLORING_ON" }
""
}
SubProgram "gles3 " {
Keywords { "LINE_INTERPOLATION" "TOON_SPECULAR_ON" "TOON_LIGHTMAP_ON" "MAIN_TEX_COLORING_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "LINE_INTERPOLATION" "MAIN_TEX_COLORING_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "LINE_INTERPOLATION" "TOON_SPECULAR_ON" "TOON_LIGHTMAP_ON" "MAIN_TEX_COLORING_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FACE_MAP_NEW_ON" }
""
}
SubProgram "gles3 " {
Keywords { "TOON_SPECULAR_ON" "TOON_LIGHTMAP_ON" "FACE_MAP_NEW_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "FACE_MAP_NEW_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "TOON_SPECULAR_ON" "TOON_LIGHTMAP_ON" "FACE_MAP_NEW_ON" }
""
}
SubProgram "gles3 " {
Keywords { "MSAA_INTERPOLATION" "FACE_MAP_NEW_ON" }
""
}
SubProgram "gles3 " {
Keywords { "MSAA_INTERPOLATION" "TOON_SPECULAR_ON" "TOON_LIGHTMAP_ON" "FACE_MAP_NEW_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MSAA_INTERPOLATION" "FACE_MAP_NEW_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MSAA_INTERPOLATION" "TOON_SPECULAR_ON" "TOON_LIGHTMAP_ON" "FACE_MAP_NEW_ON" }
""
}
SubProgram "gles3 " {
Keywords { "LINE_INTERPOLATION" "FACE_MAP_NEW_ON" }
""
}
SubProgram "gles3 " {
Keywords { "LINE_INTERPOLATION" "TOON_SPECULAR_ON" "TOON_LIGHTMAP_ON" "FACE_MAP_NEW_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "LINE_INTERPOLATION" "FACE_MAP_NEW_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "LINE_INTERPOLATION" "TOON_SPECULAR_ON" "TOON_LIGHTMAP_ON" "FACE_MAP_NEW_ON" }
""
}
SubProgram "gles3 " {
Keywords { "MAIN_TEX_COLORING_ON" "FACE_MAP_NEW_ON" }
""
}
SubProgram "gles3 " {
Keywords { "TOON_SPECULAR_ON" "TOON_LIGHTMAP_ON" "MAIN_TEX_COLORING_ON" "FACE_MAP_NEW_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MAIN_TEX_COLORING_ON" "FACE_MAP_NEW_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "TOON_SPECULAR_ON" "TOON_LIGHTMAP_ON" "MAIN_TEX_COLORING_ON" "FACE_MAP_NEW_ON" }
""
}
SubProgram "gles3 " {
Keywords { "MSAA_INTERPOLATION" "MAIN_TEX_COLORING_ON" "FACE_MAP_NEW_ON" }
""
}
SubProgram "gles3 " {
Keywords { "MSAA_INTERPOLATION" "TOON_SPECULAR_ON" "TOON_LIGHTMAP_ON" "MAIN_TEX_COLORING_ON" "FACE_MAP_NEW_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MSAA_INTERPOLATION" "MAIN_TEX_COLORING_ON" "FACE_MAP_NEW_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MSAA_INTERPOLATION" "TOON_SPECULAR_ON" "TOON_LIGHTMAP_ON" "MAIN_TEX_COLORING_ON" "FACE_MAP_NEW_ON" }
""
}
SubProgram "gles3 " {
Keywords { "LINE_INTERPOLATION" "MAIN_TEX_COLORING_ON" "FACE_MAP_NEW_ON" }
""
}
SubProgram "gles3 " {
Keywords { "LINE_INTERPOLATION" "TOON_SPECULAR_ON" "TOON_LIGHTMAP_ON" "MAIN_TEX_COLORING_ON" "FACE_MAP_NEW_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "LINE_INTERPOLATION" "MAIN_TEX_COLORING_ON" "FACE_MAP_NEW_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "LINE_INTERPOLATION" "TOON_SPECULAR_ON" "TOON_LIGHTMAP_ON" "MAIN_TEX_COLORING_ON" "FACE_MAP_NEW_ON" }
""
}
}
}
 Pass {
  Name "OUTLINE"
  Tags { "Distortion" = "None" "EntityUseType" = "Character" "IGNOREPROJECTOR" = "true" "LIGHTMODE" = "HYBRIDDEFERREDOUTLINE" "OutlineType" = "Complex" "QUEUE" = "Geometry" "Reflected" = "Reflected" "RenderType" = "Opaque" }
  Cull Front
  GpuProgramID 99269
Program "vp" {
SubProgram "gles3 " {
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	float _OutlineType;
uniform 	mediump float _OutlineWidth;
uniform 	mediump vec4 _OutlineColor;
uniform 	mediump float _MaxOutlineZOffset;
uniform 	mediump float _Scale;
uniform 	vec3 _OutlineWidthAdjustZs;
uniform 	vec3 _OutlineWidthAdjustScales;
uniform 	float _UseClipPlane;
uniform 	float _ClipPlaneWorld;
uniform 	vec4 _ClipPlane;
uniform 	vec4 _MainTex_ST;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _OutlineCorrectionWidth;
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
out mediump vec4 vs_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
bvec2 u_xlatb0;
vec4 u_xlat1;
bool u_xlatb1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump vec2 u_xlat16_4;
vec3 u_xlat6;
bool u_xlatb6;
float u_xlat10;
bool u_xlatb10;
float u_xlat15;
bool u_xlatb15;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(_OutlineType==0.0);
#else
    u_xlatb0.x = _OutlineType==0.0;
#endif
    if(u_xlatb0.x){
        gl_Position = vec4(0.0, 0.0, 0.0, 0.0);
        vs_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD1.xyz = vec3(0.0, 0.0, 0.0);
        vs_TEXCOORD0.xy = vec2(0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlatb0.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseClipPlane, _ClipPlaneWorld, _UseClipPlane, _UseClipPlane)).xy;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(abs(_ClipPlane.w)<0.00100000005);
#else
    u_xlatb10 = abs(_ClipPlane.w)<0.00100000005;
#endif
    u_xlat1.xyz = _ClipPlane.www * _ClipPlane.xyz;
    u_xlat1.xyz = (bool(u_xlatb10)) ? vec3(0.0, 0.0, 0.0) : u_xlat1.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_WorldToObject[1];
    u_xlat2 = hlslcc_mtx4x4unity_WorldToObject[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_WorldToObject[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_WorldToObject[3];
    u_xlat1.xyz = u_xlat1.xyz / u_xlat1.www;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * _ClipPlane.yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _ClipPlane.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _ClipPlane.zzz + u_xlat2.xyz;
    u_xlat10 = dot(u_xlat1.xyz, u_xlat2.xyz);
    u_xlat15 = dot(in_POSITION0.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(u_xlat15<u_xlat10);
#else
    u_xlatb1 = u_xlat15<u_xlat10;
#endif
    u_xlat10 = (-u_xlat10) + u_xlat15;
    u_xlat2.xyz = (-vec3(u_xlat10)) * u_xlat2.xyz + in_POSITION0.xyz;
    u_xlat2.w = 0.0;
    u_xlat3.xyz = in_POSITION0.xyz;
    u_xlat3.w = 1.0;
    u_xlat1 = (bool(u_xlatb1)) ? u_xlat2 : u_xlat3;
    u_xlat10 = dot(in_POSITION0.xyz, _ClipPlane.xyz);
    u_xlat15 = _ClipPlane.w + -0.00999999978;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(u_xlat10<u_xlat15);
#else
    u_xlatb15 = u_xlat10<u_xlat15;
#endif
    u_xlat10 = u_xlat10 + (-_ClipPlane.w);
    u_xlat2.xyz = (-vec3(u_xlat10)) * _ClipPlane.xyz + in_POSITION0.xyz;
    u_xlat2.w = 0.0;
    u_xlat2 = (bool(u_xlatb15)) ? u_xlat2 : u_xlat3;
    u_xlat1.xyz = (u_xlatb0.y) ? u_xlat1.xyz : u_xlat2.xyz;
    u_xlat16_4.x = (u_xlatb0.y) ? u_xlat1.w : u_xlat2.w;
    u_xlat1.xyz = (u_xlatb0.x) ? u_xlat1.xyz : in_POSITION0.xyz;
    vs_COLOR0.w = (u_xlatb0.x) ? u_xlat16_4.x : 1.0;
    u_xlat0.xyw = (-_WorldSpaceCameraPos.xyz) + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat2.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;
    u_xlat2.y = hlslcc_mtx4x4unity_ObjectToWorld[1].x;
    u_xlat2.z = hlslcc_mtx4x4unity_ObjectToWorld[2].x;
    u_xlat2.w = u_xlat0.x;
    u_xlat1.w = in_POSITION0.w;
    u_xlat2.x = dot(u_xlat2, u_xlat1);
    u_xlat3.x = hlslcc_mtx4x4unity_ObjectToWorld[0].y;
    u_xlat3.y = hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat3.z = hlslcc_mtx4x4unity_ObjectToWorld[2].y;
    u_xlat3.w = u_xlat0.y;
    u_xlat2.y = dot(u_xlat3, u_xlat1);
    u_xlat0.x = hlslcc_mtx4x4unity_ObjectToWorld[0].z;
    u_xlat0.y = hlslcc_mtx4x4unity_ObjectToWorld[1].z;
    u_xlat0.z = hlslcc_mtx4x4unity_ObjectToWorld[2].z;
    u_xlat2.z = dot(u_xlat0, u_xlat1);
    u_xlat0.x = hlslcc_mtx4x4unity_ObjectToWorld[0].w;
    u_xlat0.y = hlslcc_mtx4x4unity_ObjectToWorld[1].w;
    u_xlat0.z = hlslcc_mtx4x4unity_ObjectToWorld[2].w;
    u_xlat0.w = hlslcc_mtx4x4unity_ObjectToWorld[3].w;
    u_xlat2.w = dot(u_xlat0, u_xlat1);
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].x;
    u_xlat0.y = hlslcc_mtx4x4unity_MatrixV[1].x;
    u_xlat0.z = hlslcc_mtx4x4unity_MatrixV[2].x;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].y;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].y;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].y;
    u_xlat0.y = dot(u_xlat1.xyz, u_xlat2.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.z = dot(u_xlat1.xyz, u_xlat2.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].w;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].w;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].w;
    u_xlat1.w = hlslcc_mtx4x4unity_MatrixV[3].w;
    u_xlat15 = dot(u_xlat1, u_xlat2);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(_OutlineType==1.0);
#else
    u_xlatb1 = _OutlineType==1.0;
#endif
    u_xlat1.xyz = (bool(u_xlatb1)) ? in_NORMAL0.xyz : in_TANGENT0.xyz;
    u_xlat2.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyw = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * u_xlat1.zzz + u_xlat1.xyw;
    u_xlat6.xz = u_xlat1.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat1.xx + u_xlat6.xz;
    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat1.zz + u_xlat1.xy;
    u_xlat1.z = 0.00999999978;
    u_xlat16_4.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat16_4.x = inversesqrt(u_xlat16_4.x);
    u_xlat16_4.xy = u_xlat1.xy * u_xlat16_4.xx;
    u_xlat1.x = 2.41400003 / hlslcc_mtx4x4unity_CameraProjection[1].y;
    u_xlat6.x = (-u_xlat0.z) * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(u_xlat6.x<_OutlineWidthAdjustZs.y);
#else
    u_xlatb6 = u_xlat6.x<_OutlineWidthAdjustZs.y;
#endif
    u_xlat2.xy = (bool(u_xlatb6)) ? _OutlineWidthAdjustZs.xy : _OutlineWidthAdjustZs.yz;
    u_xlat2.zw = (bool(u_xlatb6)) ? _OutlineWidthAdjustScales.xy : _OutlineWidthAdjustScales.yz;
    u_xlat1.x = (-u_xlat0.z) * u_xlat1.x + (-u_xlat2.x);
    u_xlat6.xy = vec2((-u_xlat2.x) + u_xlat2.y, (-u_xlat2.z) + u_xlat2.w);
    u_xlat6.x = max(u_xlat6.x, 0.00100000005);
    u_xlat1.x = u_xlat1.x / u_xlat6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat1.x * u_xlat6.y + u_xlat2.z;
    u_xlat6.x = _OutlineWidth * _OutlineCorrectionWidth;
    u_xlat1.x = u_xlat1.x * u_xlat6.x;
    u_xlat1.x = u_xlat1.x * 100.0;
    u_xlat1.x = u_xlat1.x * _Scale;
    u_xlat1.x = u_xlat1.x * 0.414250195;
    u_xlat1.x = u_xlat1.x * in_COLOR0.w;
    u_xlat6.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat6.xyz = u_xlat0.xyz * u_xlat6.xxx;
    u_xlat6.xyz = u_xlat6.xyz * vec3(_MaxOutlineZOffset);
    u_xlat6.xyz = u_xlat6.xyz * vec3(vec3(_Scale, _Scale, _Scale));
    u_xlat2.x = in_COLOR0.z + -0.5;
    u_xlat0.xyz = u_xlat6.xyz * u_xlat2.xxx + u_xlat0.xyz;
    u_xlat0.xy = u_xlat16_4.xy * u_xlat1.xx + u_xlat0.xy;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];
    u_xlat1 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[3] * vec4(u_xlat15) + u_xlat1;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb1 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    u_xlat2.xz = u_xlat0.xw * vec2(0.5, 0.5);
    u_xlat6.x = u_xlat0.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat6.x * 0.5;
    u_xlat6.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD2.xy = mix(vec2(0.0, 0.0), u_xlat6.xy, vec2(bvec2(u_xlatb1)));
    vs_TEXCOORD2.z = u_xlatb1 ? _DitherAlpha : float(0.0);
    vs_TEXCOORD2.w = u_xlatb1 ? u_xlat0.w : float(0.0);
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    gl_Position = u_xlat0;
    vs_COLOR0.xyz = _OutlineColor.xyz;
    vs_TEXCOORD3.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD3.zw = vec2(0.0, 0.0);
    vs_TEXCOORD1.xyz = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec4 _ScreenParams;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _OutlineColor;
uniform 	float _ES_CharacterAmbientLightOn;
uniform 	float _ES_CharacterAmbientBrightness;
uniform 	vec3 _ES_CharacterMainLightColor;
uniform 	vec3 _ES_CharacterAmbientLightColor;
uniform 	float _ES_CharacterMainLightRatio;
uniform 	float _ES_CharacterAmbientLightRatio;
uniform 	float _ES_CharacterPointLightWholeIntensity;
uniform 	vec4 mhy_CharacterPointLightColor;
uniform 	float _UseClipPlane;
uniform 	float _MainTexAlphaUse;
uniform 	mediump float _MainTexAlphaCutoff;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	mediump float _DeferredLightThreshold;
uniform 	mediump float _DissolveNoise_Uspeed;
uniform 	vec4 _DissovleNoise_ST;
uniform 	mediump float _DissolveNoise_Vspeed;
uniform 	mediump float _DissovleNoiseScale;
uniform 	mediump float _Dissovle;
uniform 	float _UseMaterial2;
uniform 	mediump vec3 _Color2;
uniform 	mediump vec3 _OutlineColor2;
uniform 	float _UseMaterial3;
uniform 	mediump vec3 _Color3;
uniform 	mediump vec3 _OutlineColor3;
uniform 	float _UseMaterial4;
uniform 	mediump vec3 _Color4;
uniform 	mediump vec3 _OutlineColor4;
uniform 	float _UseMaterial5;
uniform 	mediump vec3 _Color5;
uniform 	mediump vec3 _OutlineColor5;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _DissovleNoise;
in mediump vec4 vs_COLOR0;
in highp vec2 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec2 u_xlat0;
lowp float u_xlat10_0;
ivec4 u_xlati0;
uvec2 u_xlatu0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump float u_xlat16_1;
bvec4 u_xlatb1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
bool u_xlatb3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
vec3 u_xlat9;
ivec3 u_xlati9;
bool u_xlatb9;
bvec3 u_xlatb12;
float u_xlat18;
bvec2 u_xlatb18;
bool u_xlatb27;
float u_xlat30;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseClipPlane));
#else
    u_xlatb0.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseClipPlane);
#endif
    u_xlat16_1 = vs_COLOR0.w + -0.00999999978;
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(u_xlat16_1<0.0);
#else
    u_xlatb9 = u_xlat16_1<0.0;
#endif
    u_xlatb0.x = u_xlatb0.x && u_xlatb9;
    if((int(u_xlatb0.x) * int(0xffffffffu))!=0){discard;}
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0.x){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(_DitherAlpha<0.949999988);
#else
        u_xlatb0.x = _DitherAlpha<0.949999988;
#endif
        if(u_xlatb0.x){
            u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb18.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb18.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb18.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = _DitherAlpha * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + -0.00999999978;
#ifdef UNITY_ADRENO_ES3
            u_xlatb0.x = !!(u_xlat0.x<0.0);
#else
            u_xlatb0.x = u_xlat0.x<0.0;
#endif
            if((int(u_xlatb0.x) * int(0xffffffffu))!=0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy).w;
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(_MainTexAlphaUse==1.0);
#else
    u_xlatb9 = _MainTexAlphaUse==1.0;
#endif
    u_xlat16_2.x = u_xlat10_0 + (-_MainTexAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(u_xlat16_2.x<0.0);
#else
    u_xlatb0.x = u_xlat16_2.x<0.0;
#endif
    u_xlatb0.x = u_xlatb9 && u_xlatb0.x;
    if((int(u_xlatb0.x) * int(0xffffffffu))!=0){discard;}
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseMaterial2));
#else
    u_xlatb0.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseMaterial2);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.y = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseMaterial3));
#else
    u_xlatb0.y = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseMaterial3);
#endif
    u_xlatb18.x = u_xlatb0.y || u_xlatb0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseMaterial4));
#else
    u_xlatb27 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseMaterial4);
#endif
    u_xlatb18.x = u_xlatb27 || u_xlatb18.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseMaterial5));
#else
    u_xlatb3 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseMaterial5);
#endif
    u_xlatb18.x = u_xlatb18.x || u_xlatb3;
    if(u_xlatb18.x){
        u_xlat18 = texture(_LightMapTex, vs_TEXCOORD0.xy).w;
        u_xlatb1 = greaterThanEqual(vec4(u_xlat18), vec4(0.800000012, 0.400000006, 0.200000003, 0.600000024));
        u_xlat16_2.xyz = _Color2.xyz * _OutlineColor2.xyz;
        u_xlati0.xy = ivec2(uvec2(u_xlatb0.xy) * 0xffffffffu & uvec2(u_xlatb1.xy) * 0xffffffffu);
        u_xlatb12.xyz = lessThan(vec4(u_xlat18), vec4(0.600000024, 0.400000006, 0.800000012, 0.800000012)).xyz;
        u_xlat16_4.xyz = _Color3.xyz * _OutlineColor3.xyz;
        u_xlati0.z = int(uint(u_xlatb27) * 0xffffffffu & uint(u_xlatb1.z) * 0xffffffffu);
        u_xlat16_5.xyz = _Color4.xyz * _OutlineColor4.xyz;
        u_xlati0.w = int(uint(u_xlatb1.w) * 0xffffffffu & uint(u_xlatb3) * 0xffffffffu);
        u_xlati9.xyz = ivec3((uvec3(u_xlatb12.xyz) * 0xffffffffu) & uvec3(u_xlati0.yzw));
        u_xlat16_6.xyz = _Color5.xyz * _OutlineColor5.xyz;
        u_xlat16_7.xyz = _Color.xyz * _OutlineColor.xyz;
        u_xlat16_6.xyz = (u_xlati9.z != 0) ? u_xlat16_6.xyz : u_xlat16_7.xyz;
        u_xlat16_5.xyz = (u_xlati9.y != 0) ? u_xlat16_5.xyz : u_xlat16_6.xyz;
        u_xlat16_4.xyz = (u_xlati9.x != 0) ? u_xlat16_4.xyz : u_xlat16_5.xyz;
        u_xlat16_2.xyz = (u_xlati0.x != 0) ? u_xlat16_2.xyz : u_xlat16_4.xyz;
    } else {
        u_xlat16_2.xyz = vs_COLOR0.xyz;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD3.xy * _DissovleNoise_ST.xy + _DissovleNoise_ST.zw;
    u_xlat16_4.x = _Time.y * _DissolveNoise_Uspeed + u_xlat0.x;
    u_xlat16_4.y = _Time.y * _DissolveNoise_Vspeed + u_xlat0.y;
    u_xlat10_0 = texture(_DissovleNoise, u_xlat16_4.xy).x;
    u_xlat0.x = u_xlat10_0 * _DissovleNoiseScale + vs_TEXCOORD3.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(_Dissovle>=u_xlat0.x);
#else
    u_xlatb0.x = _Dissovle>=u_xlat0.x;
#endif
    if((int(u_xlatb0.x) * int(0xffffffffu))==0){discard;}
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn));
#else
    u_xlatb0.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn);
#endif
    u_xlat9.xyz = u_xlat16_2.xyz * vec3(_ES_CharacterAmbientBrightness);
    u_xlat3.xyz = vec3(vec3(_ES_CharacterPointLightWholeIntensity, _ES_CharacterPointLightWholeIntensity, _ES_CharacterPointLightWholeIntensity)) * mhy_CharacterPointLightColor.xyz;
    u_xlat8.xyz = vec3(_ES_CharacterMainLightColor.x, _ES_CharacterMainLightColor.y, _ES_CharacterMainLightColor.z);
#ifdef UNITY_ADRENO_ES3
    u_xlat8.xyz = min(max(u_xlat8.xyz, 0.0), 1.0);
#else
    u_xlat8.xyz = clamp(u_xlat8.xyz, 0.0, 1.0);
#endif
    u_xlat30 = (-mhy_CharacterPointLightColor.w) + 1.0;
    u_xlat3.xyz = u_xlat8.xyz * vec3(u_xlat30) + u_xlat3.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat3.xyz = min(max(u_xlat3.xyz, 0.0), 1.0);
#else
    u_xlat3.xyz = clamp(u_xlat3.xyz, 0.0, 1.0);
#endif
    u_xlat3.xyz = u_xlat3.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat3.xyz = vec3(vec3(_ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio)) * u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat9.xyz = u_xlat9.xyz * u_xlat3.xyz;
    u_xlat3.xyz = _ES_CharacterAmbientLightColor.xyz * vec3(_ES_CharacterAmbientLightRatio);
    u_xlat16_4.xyz = u_xlat9.xyz * vec3(10.0, 10.0, 10.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.xyz = min(max(u_xlat16_4.xyz, 0.0), 1.0);
#else
    u_xlat16_4.xyz = clamp(u_xlat16_4.xyz, 0.0, 1.0);
#endif
    u_xlat9.xyz = u_xlat3.xyz * u_xlat16_4.xyz + u_xlat9.xyz;
    SV_Target1.xyz = (u_xlatb0.x) ? u_xlat9.xyz : u_xlat16_2.xyz;
    SV_Target0.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_2.x = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb0.x) ? u_xlat16_2.x : 0.0;
    SV_Target0.w = 0.0196078438;
    SV_Target1.w = 0.0500000007;
    SV_Target2.xy = vec2(0.0, 0.0);
    SV_Target2.w = _DeferredLightThreshold;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	int unity_BaseInstanceID;
uniform 	float _OutlineType;
uniform 	mediump float _OutlineWidth;
uniform 	mediump vec4 _OutlineColor;
uniform 	mediump float _MaxOutlineZOffset;
uniform 	mediump float _Scale;
uniform 	vec3 _OutlineWidthAdjustZs;
uniform 	vec3 _OutlineWidthAdjustScales;
uniform 	float _UseClipPlane;
uniform 	float _ClipPlaneWorld;
uniform 	vec4 _ClipPlane;
uniform 	vec4 _MainTex_ST;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _OutlineCorrectionWidth;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
out mediump vec4 vs_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
int u_xlati0;
bool u_xlatb0;
vec4 u_xlat1;
bool u_xlatb1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
vec4 u_xlat4;
mediump vec2 u_xlat16_5;
float u_xlat6;
bvec2 u_xlatb6;
vec2 u_xlat7;
bool u_xlatb7;
vec2 u_xlat12;
bool u_xlatb12;
float u_xlat18;
bool u_xlatb18;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_OutlineType==0.0);
#else
    u_xlatb0 = _OutlineType==0.0;
#endif
    if(u_xlatb0){
        gl_Position = vec4(0.0, 0.0, 0.0, 0.0);
        vs_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD1.xyz = vec3(0.0, 0.0, 0.0);
        vs_TEXCOORD0.xy = vec2(0.0, 0.0);
        vs_SV_InstanceID0 = uint(gl_InstanceID);
        return;
    //ENDIF
    }
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlatb6.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseClipPlane, _ClipPlaneWorld, _UseClipPlane, _UseClipPlane)).xy;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(abs(_ClipPlane.w)<0.00100000005);
#else
    u_xlatb18 = abs(_ClipPlane.w)<0.00100000005;
#endif
    u_xlat1.xyz = _ClipPlane.www * _ClipPlane.xyz;
    u_xlat1.xyz = (bool(u_xlatb18)) ? vec3(0.0, 0.0, 0.0) : u_xlat1.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_WorldToObject[1];
    u_xlat2 = hlslcc_mtx4x4unity_WorldToObject[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_WorldToObject[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_WorldToObject[3];
    u_xlat1.xyz = u_xlat1.xyz / u_xlat1.www;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * _ClipPlane.yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _ClipPlane.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _ClipPlane.zzz + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat1.xyz, u_xlat2.xyz);
    u_xlat1.x = dot(in_POSITION0.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(u_xlat1.x<u_xlat18);
#else
    u_xlatb7 = u_xlat1.x<u_xlat18;
#endif
    u_xlat18 = (-u_xlat18) + u_xlat1.x;
    u_xlat2.xyz = (-vec3(u_xlat18)) * u_xlat2.xyz + in_POSITION0.xyz;
    u_xlat2.w = 0.0;
    u_xlat3.xyz = in_POSITION0.xyz;
    u_xlat3.w = 1.0;
    u_xlat1 = (bool(u_xlatb7)) ? u_xlat2 : u_xlat3;
    u_xlat18 = dot(in_POSITION0.xyz, _ClipPlane.xyz);
    u_xlat2.x = _ClipPlane.w + -0.00999999978;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat18<u_xlat2.x);
#else
    u_xlatb2 = u_xlat18<u_xlat2.x;
#endif
    u_xlat18 = u_xlat18 + (-_ClipPlane.w);
    u_xlat4.xyz = (-vec3(u_xlat18)) * _ClipPlane.xyz + in_POSITION0.xyz;
    u_xlat4.w = 0.0;
    u_xlat2 = (bool(u_xlatb2)) ? u_xlat4 : u_xlat3;
    u_xlat1.xyz = (u_xlatb6.y) ? u_xlat1.xyz : u_xlat2.xyz;
    u_xlat16_5.x = (u_xlatb6.y) ? u_xlat1.w : u_xlat2.w;
    u_xlat1.xyz = (u_xlatb6.x) ? u_xlat1.xyz : in_POSITION0.xyz;
    vs_COLOR0.w = (u_xlatb6.x) ? u_xlat16_5.x : 1.0;
    u_xlati0 = u_xlati0 << 2;
    u_xlat2.xyw = (-_WorldSpaceCameraPos.xyz) + unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat3.x = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].x;
    u_xlat3.y = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].x;
    u_xlat3.z = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].x;
    u_xlat3.w = u_xlat2.x;
    u_xlat1.w = in_POSITION0.w;
    u_xlat3.x = dot(u_xlat3, u_xlat1);
    u_xlat4.x = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].y;
    u_xlat4.y = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].y;
    u_xlat4.z = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].y;
    u_xlat4.w = u_xlat2.y;
    u_xlat3.y = dot(u_xlat4, u_xlat1);
    u_xlat2.x = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].z;
    u_xlat2.y = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].z;
    u_xlat2.z = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].z;
    u_xlat3.z = dot(u_xlat2, u_xlat1);
    u_xlat2.x = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].w;
    u_xlat2.y = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].w;
    u_xlat2.z = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].w;
    u_xlat2.w = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3].w;
    u_xlat3.w = dot(u_xlat2, u_xlat1);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].x;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].x;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].x;
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat3.xyz);
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].y;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].y;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].y;
    u_xlat1.y = dot(u_xlat2.xyz, u_xlat3.xyz);
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat1.z = dot(u_xlat2.xyz, u_xlat3.xyz);
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].w;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].w;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].w;
    u_xlat2.w = hlslcc_mtx4x4unity_MatrixV[3].w;
    u_xlat6 = dot(u_xlat2, u_xlat3);
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_OutlineType==1.0);
#else
    u_xlatb12 = _OutlineType==1.0;
#endif
    u_xlat2.xyz = (bool(u_xlatb12)) ? in_NORMAL0.xyz : in_TANGENT0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat2.xyw = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat0.xzw = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xy = u_xlat0.zz * hlslcc_mtx4x4unity_MatrixV[1].xy;
    u_xlat0.xz = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat0.xx + u_xlat2.xy;
    u_xlat2.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat0.ww + u_xlat0.xz;
    u_xlat2.z = 0.00999999978;
    u_xlat16_5.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat16_5.x = inversesqrt(u_xlat16_5.x);
    u_xlat16_5.xy = u_xlat2.xy * u_xlat16_5.xx;
    u_xlat0.x = 2.41400003 / hlslcc_mtx4x4unity_CameraProjection[1].y;
    u_xlat12.x = u_xlat0.x * (-u_xlat1.z);
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat12.x<_OutlineWidthAdjustZs.y);
#else
    u_xlatb12 = u_xlat12.x<_OutlineWidthAdjustZs.y;
#endif
    u_xlat2.xy = (bool(u_xlatb12)) ? _OutlineWidthAdjustZs.xy : _OutlineWidthAdjustZs.yz;
    u_xlat2.zw = (bool(u_xlatb12)) ? _OutlineWidthAdjustScales.xy : _OutlineWidthAdjustScales.yz;
    u_xlat0.x = (-u_xlat1.z) * u_xlat0.x + (-u_xlat2.x);
    u_xlat12.xy = vec2((-u_xlat2.x) + u_xlat2.y, (-u_xlat2.z) + u_xlat2.w);
    u_xlat12.x = max(u_xlat12.x, 0.00100000005);
    u_xlat0.x = u_xlat0.x / u_xlat12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x * u_xlat12.y + u_xlat2.z;
    u_xlat12.x = _OutlineWidth * _OutlineCorrectionWidth;
    u_xlat0.x = u_xlat0.x * u_xlat12.x;
    u_xlat0.x = u_xlat0.x * 100.0;
    u_xlat0.x = u_xlat0.x * _Scale;
    u_xlat0.x = u_xlat0.x * 0.414250195;
    u_xlat0.x = u_xlat0.x * in_COLOR0.w;
    u_xlat12.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12.x = inversesqrt(u_xlat12.x);
    u_xlat2.xyz = u_xlat12.xxx * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat2.xyz * vec3(_MaxOutlineZOffset);
    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(_Scale, _Scale, _Scale));
    u_xlat12.x = in_COLOR0.z + -0.5;
    u_xlat1.xyz = u_xlat2.xyz * u_xlat12.xxx + u_xlat1.xyz;
    u_xlat0.xz = u_xlat16_5.xy * u_xlat0.xx + u_xlat1.xy;
    u_xlat2 = u_xlat0.zzzz * hlslcc_mtx4x4glstate_matrix_projection[1];
    u_xlat2 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[3] * vec4(u_xlat6) + u_xlat1;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb1 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    u_xlat2.xz = u_xlat0.xw * vec2(0.5, 0.5);
    u_xlat7.x = u_xlat0.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat7.x * 0.5;
    u_xlat7.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD2.xy = mix(vec2(0.0, 0.0), u_xlat7.xy, vec2(bvec2(u_xlatb1)));
    vs_TEXCOORD2.z = u_xlatb1 ? _DitherAlpha : float(0.0);
    vs_TEXCOORD2.w = u_xlatb1 ? u_xlat0.w : float(0.0);
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    gl_Position = u_xlat0;
    vs_COLOR0.xyz = _OutlineColor.xyz;
    vs_TEXCOORD3.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD3.zw = vec2(0.0, 0.0);
    vs_TEXCOORD1.xyz = vec3(0.0, 0.0, 0.0);
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec4 _ScreenParams;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _OutlineColor;
uniform 	float _ES_CharacterAmbientLightOn;
uniform 	float _ES_CharacterAmbientBrightness;
uniform 	vec3 _ES_CharacterMainLightColor;
uniform 	vec3 _ES_CharacterAmbientLightColor;
uniform 	float _ES_CharacterMainLightRatio;
uniform 	float _ES_CharacterAmbientLightRatio;
uniform 	float _ES_CharacterPointLightWholeIntensity;
uniform 	vec4 mhy_CharacterPointLightColor;
uniform 	float _UseClipPlane;
uniform 	float _MainTexAlphaUse;
uniform 	mediump float _MainTexAlphaCutoff;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	mediump float _DeferredLightThreshold;
uniform 	mediump float _DissolveNoise_Uspeed;
uniform 	vec4 _DissovleNoise_ST;
uniform 	mediump float _DissolveNoise_Vspeed;
uniform 	mediump float _DissovleNoiseScale;
uniform 	mediump float _Dissovle;
uniform 	float _UseMaterial2;
uniform 	mediump vec3 _Color2;
uniform 	mediump vec3 _OutlineColor2;
uniform 	float _UseMaterial3;
uniform 	mediump vec3 _Color3;
uniform 	mediump vec3 _OutlineColor3;
uniform 	float _UseMaterial4;
uniform 	mediump vec3 _Color4;
uniform 	mediump vec3 _OutlineColor4;
uniform 	float _UseMaterial5;
uniform 	mediump vec3 _Color5;
uniform 	mediump vec3 _OutlineColor5;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _DissovleNoise;
in mediump vec4 vs_COLOR0;
in highp vec2 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec2 u_xlat0;
lowp float u_xlat10_0;
ivec4 u_xlati0;
uvec2 u_xlatu0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump float u_xlat16_1;
bvec4 u_xlatb1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
bool u_xlatb3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
vec3 u_xlat9;
ivec3 u_xlati9;
bool u_xlatb9;
bvec3 u_xlatb12;
float u_xlat18;
bvec2 u_xlatb18;
bool u_xlatb27;
float u_xlat30;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseClipPlane));
#else
    u_xlatb0.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseClipPlane);
#endif
    u_xlat16_1 = vs_COLOR0.w + -0.00999999978;
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(u_xlat16_1<0.0);
#else
    u_xlatb9 = u_xlat16_1<0.0;
#endif
    u_xlatb0.x = u_xlatb0.x && u_xlatb9;
    if((int(u_xlatb0.x) * int(0xffffffffu))!=0){discard;}
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0.x){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(_DitherAlpha<0.949999988);
#else
        u_xlatb0.x = _DitherAlpha<0.949999988;
#endif
        if(u_xlatb0.x){
            u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb18.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb18.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb18.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = _DitherAlpha * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + -0.00999999978;
#ifdef UNITY_ADRENO_ES3
            u_xlatb0.x = !!(u_xlat0.x<0.0);
#else
            u_xlatb0.x = u_xlat0.x<0.0;
#endif
            if((int(u_xlatb0.x) * int(0xffffffffu))!=0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy).w;
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(_MainTexAlphaUse==1.0);
#else
    u_xlatb9 = _MainTexAlphaUse==1.0;
#endif
    u_xlat16_2.x = u_xlat10_0 + (-_MainTexAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(u_xlat16_2.x<0.0);
#else
    u_xlatb0.x = u_xlat16_2.x<0.0;
#endif
    u_xlatb0.x = u_xlatb9 && u_xlatb0.x;
    if((int(u_xlatb0.x) * int(0xffffffffu))!=0){discard;}
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseMaterial2));
#else
    u_xlatb0.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseMaterial2);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.y = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseMaterial3));
#else
    u_xlatb0.y = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseMaterial3);
#endif
    u_xlatb18.x = u_xlatb0.y || u_xlatb0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseMaterial4));
#else
    u_xlatb27 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseMaterial4);
#endif
    u_xlatb18.x = u_xlatb27 || u_xlatb18.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseMaterial5));
#else
    u_xlatb3 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseMaterial5);
#endif
    u_xlatb18.x = u_xlatb18.x || u_xlatb3;
    if(u_xlatb18.x){
        u_xlat18 = texture(_LightMapTex, vs_TEXCOORD0.xy).w;
        u_xlatb1 = greaterThanEqual(vec4(u_xlat18), vec4(0.800000012, 0.400000006, 0.200000003, 0.600000024));
        u_xlat16_2.xyz = _Color2.xyz * _OutlineColor2.xyz;
        u_xlati0.xy = ivec2(uvec2(u_xlatb0.xy) * 0xffffffffu & uvec2(u_xlatb1.xy) * 0xffffffffu);
        u_xlatb12.xyz = lessThan(vec4(u_xlat18), vec4(0.600000024, 0.400000006, 0.800000012, 0.800000012)).xyz;
        u_xlat16_4.xyz = _Color3.xyz * _OutlineColor3.xyz;
        u_xlati0.z = int(uint(u_xlatb27) * 0xffffffffu & uint(u_xlatb1.z) * 0xffffffffu);
        u_xlat16_5.xyz = _Color4.xyz * _OutlineColor4.xyz;
        u_xlati0.w = int(uint(u_xlatb1.w) * 0xffffffffu & uint(u_xlatb3) * 0xffffffffu);
        u_xlati9.xyz = ivec3((uvec3(u_xlatb12.xyz) * 0xffffffffu) & uvec3(u_xlati0.yzw));
        u_xlat16_6.xyz = _Color5.xyz * _OutlineColor5.xyz;
        u_xlat16_7.xyz = _Color.xyz * _OutlineColor.xyz;
        u_xlat16_6.xyz = (u_xlati9.z != 0) ? u_xlat16_6.xyz : u_xlat16_7.xyz;
        u_xlat16_5.xyz = (u_xlati9.y != 0) ? u_xlat16_5.xyz : u_xlat16_6.xyz;
        u_xlat16_4.xyz = (u_xlati9.x != 0) ? u_xlat16_4.xyz : u_xlat16_5.xyz;
        u_xlat16_2.xyz = (u_xlati0.x != 0) ? u_xlat16_2.xyz : u_xlat16_4.xyz;
    } else {
        u_xlat16_2.xyz = vs_COLOR0.xyz;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD3.xy * _DissovleNoise_ST.xy + _DissovleNoise_ST.zw;
    u_xlat16_4.x = _Time.y * _DissolveNoise_Uspeed + u_xlat0.x;
    u_xlat16_4.y = _Time.y * _DissolveNoise_Vspeed + u_xlat0.y;
    u_xlat10_0 = texture(_DissovleNoise, u_xlat16_4.xy).x;
    u_xlat0.x = u_xlat10_0 * _DissovleNoiseScale + vs_TEXCOORD3.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(_Dissovle>=u_xlat0.x);
#else
    u_xlatb0.x = _Dissovle>=u_xlat0.x;
#endif
    if((int(u_xlatb0.x) * int(0xffffffffu))==0){discard;}
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn));
#else
    u_xlatb0.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn);
#endif
    u_xlat9.xyz = u_xlat16_2.xyz * vec3(_ES_CharacterAmbientBrightness);
    u_xlat3.xyz = vec3(vec3(_ES_CharacterPointLightWholeIntensity, _ES_CharacterPointLightWholeIntensity, _ES_CharacterPointLightWholeIntensity)) * mhy_CharacterPointLightColor.xyz;
    u_xlat8.xyz = vec3(_ES_CharacterMainLightColor.x, _ES_CharacterMainLightColor.y, _ES_CharacterMainLightColor.z);
#ifdef UNITY_ADRENO_ES3
    u_xlat8.xyz = min(max(u_xlat8.xyz, 0.0), 1.0);
#else
    u_xlat8.xyz = clamp(u_xlat8.xyz, 0.0, 1.0);
#endif
    u_xlat30 = (-mhy_CharacterPointLightColor.w) + 1.0;
    u_xlat3.xyz = u_xlat8.xyz * vec3(u_xlat30) + u_xlat3.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat3.xyz = min(max(u_xlat3.xyz, 0.0), 1.0);
#else
    u_xlat3.xyz = clamp(u_xlat3.xyz, 0.0, 1.0);
#endif
    u_xlat3.xyz = u_xlat3.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat3.xyz = vec3(vec3(_ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio)) * u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat9.xyz = u_xlat9.xyz * u_xlat3.xyz;
    u_xlat3.xyz = _ES_CharacterAmbientLightColor.xyz * vec3(_ES_CharacterAmbientLightRatio);
    u_xlat16_4.xyz = u_xlat9.xyz * vec3(10.0, 10.0, 10.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.xyz = min(max(u_xlat16_4.xyz, 0.0), 1.0);
#else
    u_xlat16_4.xyz = clamp(u_xlat16_4.xyz, 0.0, 1.0);
#endif
    u_xlat9.xyz = u_xlat3.xyz * u_xlat16_4.xyz + u_xlat9.xyz;
    SV_Target1.xyz = (u_xlatb0.x) ? u_xlat9.xyz : u_xlat16_2.xyz;
    SV_Target0.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_2.x = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb0.x) ? u_xlat16_2.x : 0.0;
    SV_Target0.w = 0.0196078438;
    SV_Target1.w = 0.0500000007;
    SV_Target2.xy = vec2(0.0, 0.0);
    SV_Target2.w = _DeferredLightThreshold;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "MSAA_INTERPOLATION" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	float _OutlineType;
uniform 	mediump float _OutlineWidth;
uniform 	mediump vec4 _OutlineColor;
uniform 	mediump float _MaxOutlineZOffset;
uniform 	mediump float _Scale;
uniform 	vec3 _OutlineWidthAdjustZs;
uniform 	vec3 _OutlineWidthAdjustScales;
uniform 	float _UseClipPlane;
uniform 	float _ClipPlaneWorld;
uniform 	vec4 _ClipPlane;
uniform 	vec4 _MainTex_ST;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _OutlineCorrectionWidth;
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
out mediump vec4 vs_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
bvec2 u_xlatb0;
vec4 u_xlat1;
bool u_xlatb1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump vec2 u_xlat16_4;
vec3 u_xlat6;
bool u_xlatb6;
float u_xlat10;
bool u_xlatb10;
float u_xlat15;
bool u_xlatb15;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(_OutlineType==0.0);
#else
    u_xlatb0.x = _OutlineType==0.0;
#endif
    if(u_xlatb0.x){
        gl_Position = vec4(0.0, 0.0, 0.0, 0.0);
        vs_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD1.xyz = vec3(0.0, 0.0, 0.0);
        vs_TEXCOORD0.xy = vec2(0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlatb0.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseClipPlane, _ClipPlaneWorld, _UseClipPlane, _UseClipPlane)).xy;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(abs(_ClipPlane.w)<0.00100000005);
#else
    u_xlatb10 = abs(_ClipPlane.w)<0.00100000005;
#endif
    u_xlat1.xyz = _ClipPlane.www * _ClipPlane.xyz;
    u_xlat1.xyz = (bool(u_xlatb10)) ? vec3(0.0, 0.0, 0.0) : u_xlat1.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_WorldToObject[1];
    u_xlat2 = hlslcc_mtx4x4unity_WorldToObject[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_WorldToObject[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_WorldToObject[3];
    u_xlat1.xyz = u_xlat1.xyz / u_xlat1.www;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * _ClipPlane.yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _ClipPlane.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _ClipPlane.zzz + u_xlat2.xyz;
    u_xlat10 = dot(u_xlat1.xyz, u_xlat2.xyz);
    u_xlat15 = dot(in_POSITION0.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(u_xlat15<u_xlat10);
#else
    u_xlatb1 = u_xlat15<u_xlat10;
#endif
    u_xlat10 = (-u_xlat10) + u_xlat15;
    u_xlat2.xyz = (-vec3(u_xlat10)) * u_xlat2.xyz + in_POSITION0.xyz;
    u_xlat2.w = 0.0;
    u_xlat3.xyz = in_POSITION0.xyz;
    u_xlat3.w = 1.0;
    u_xlat1 = (bool(u_xlatb1)) ? u_xlat2 : u_xlat3;
    u_xlat10 = dot(in_POSITION0.xyz, _ClipPlane.xyz);
    u_xlat15 = _ClipPlane.w + -0.00999999978;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(u_xlat10<u_xlat15);
#else
    u_xlatb15 = u_xlat10<u_xlat15;
#endif
    u_xlat10 = u_xlat10 + (-_ClipPlane.w);
    u_xlat2.xyz = (-vec3(u_xlat10)) * _ClipPlane.xyz + in_POSITION0.xyz;
    u_xlat2.w = 0.0;
    u_xlat2 = (bool(u_xlatb15)) ? u_xlat2 : u_xlat3;
    u_xlat1.xyz = (u_xlatb0.y) ? u_xlat1.xyz : u_xlat2.xyz;
    u_xlat16_4.x = (u_xlatb0.y) ? u_xlat1.w : u_xlat2.w;
    u_xlat1.xyz = (u_xlatb0.x) ? u_xlat1.xyz : in_POSITION0.xyz;
    vs_COLOR0.w = (u_xlatb0.x) ? u_xlat16_4.x : 1.0;
    u_xlat0.xyw = (-_WorldSpaceCameraPos.xyz) + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat2.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;
    u_xlat2.y = hlslcc_mtx4x4unity_ObjectToWorld[1].x;
    u_xlat2.z = hlslcc_mtx4x4unity_ObjectToWorld[2].x;
    u_xlat2.w = u_xlat0.x;
    u_xlat1.w = in_POSITION0.w;
    u_xlat2.x = dot(u_xlat2, u_xlat1);
    u_xlat3.x = hlslcc_mtx4x4unity_ObjectToWorld[0].y;
    u_xlat3.y = hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat3.z = hlslcc_mtx4x4unity_ObjectToWorld[2].y;
    u_xlat3.w = u_xlat0.y;
    u_xlat2.y = dot(u_xlat3, u_xlat1);
    u_xlat0.x = hlslcc_mtx4x4unity_ObjectToWorld[0].z;
    u_xlat0.y = hlslcc_mtx4x4unity_ObjectToWorld[1].z;
    u_xlat0.z = hlslcc_mtx4x4unity_ObjectToWorld[2].z;
    u_xlat2.z = dot(u_xlat0, u_xlat1);
    u_xlat0.x = hlslcc_mtx4x4unity_ObjectToWorld[0].w;
    u_xlat0.y = hlslcc_mtx4x4unity_ObjectToWorld[1].w;
    u_xlat0.z = hlslcc_mtx4x4unity_ObjectToWorld[2].w;
    u_xlat0.w = hlslcc_mtx4x4unity_ObjectToWorld[3].w;
    u_xlat2.w = dot(u_xlat0, u_xlat1);
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].x;
    u_xlat0.y = hlslcc_mtx4x4unity_MatrixV[1].x;
    u_xlat0.z = hlslcc_mtx4x4unity_MatrixV[2].x;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].y;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].y;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].y;
    u_xlat0.y = dot(u_xlat1.xyz, u_xlat2.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.z = dot(u_xlat1.xyz, u_xlat2.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].w;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].w;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].w;
    u_xlat1.w = hlslcc_mtx4x4unity_MatrixV[3].w;
    u_xlat15 = dot(u_xlat1, u_xlat2);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(_OutlineType==1.0);
#else
    u_xlatb1 = _OutlineType==1.0;
#endif
    u_xlat1.xyz = (bool(u_xlatb1)) ? in_NORMAL0.xyz : in_TANGENT0.xyz;
    u_xlat2.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyw = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * u_xlat1.zzz + u_xlat1.xyw;
    u_xlat6.xz = u_xlat1.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat1.xx + u_xlat6.xz;
    u_xlat1.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat1.zz + u_xlat1.xy;
    u_xlat1.z = 0.00999999978;
    u_xlat16_4.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat16_4.x = inversesqrt(u_xlat16_4.x);
    u_xlat16_4.xy = u_xlat1.xy * u_xlat16_4.xx;
    u_xlat1.x = 2.41400003 / hlslcc_mtx4x4unity_CameraProjection[1].y;
    u_xlat6.x = (-u_xlat0.z) * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(u_xlat6.x<_OutlineWidthAdjustZs.y);
#else
    u_xlatb6 = u_xlat6.x<_OutlineWidthAdjustZs.y;
#endif
    u_xlat2.xy = (bool(u_xlatb6)) ? _OutlineWidthAdjustZs.xy : _OutlineWidthAdjustZs.yz;
    u_xlat2.zw = (bool(u_xlatb6)) ? _OutlineWidthAdjustScales.xy : _OutlineWidthAdjustScales.yz;
    u_xlat1.x = (-u_xlat0.z) * u_xlat1.x + (-u_xlat2.x);
    u_xlat6.xy = vec2((-u_xlat2.x) + u_xlat2.y, (-u_xlat2.z) + u_xlat2.w);
    u_xlat6.x = max(u_xlat6.x, 0.00100000005);
    u_xlat1.x = u_xlat1.x / u_xlat6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat1.x * u_xlat6.y + u_xlat2.z;
    u_xlat6.x = _OutlineWidth * _OutlineCorrectionWidth;
    u_xlat1.x = u_xlat1.x * u_xlat6.x;
    u_xlat1.x = u_xlat1.x * 100.0;
    u_xlat1.x = u_xlat1.x * _Scale;
    u_xlat1.x = u_xlat1.x * 0.414250195;
    u_xlat1.x = u_xlat1.x * in_COLOR0.w;
    u_xlat6.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat6.xyz = u_xlat0.xyz * u_xlat6.xxx;
    u_xlat6.xyz = u_xlat6.xyz * vec3(_MaxOutlineZOffset);
    u_xlat6.xyz = u_xlat6.xyz * vec3(vec3(_Scale, _Scale, _Scale));
    u_xlat2.x = in_COLOR0.z + -0.5;
    u_xlat0.xyz = u_xlat6.xyz * u_xlat2.xxx + u_xlat0.xyz;
    u_xlat0.xy = u_xlat16_4.xy * u_xlat1.xx + u_xlat0.xy;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];
    u_xlat1 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[3] * vec4(u_xlat15) + u_xlat1;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb1 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    u_xlat2.xz = u_xlat0.xw * vec2(0.5, 0.5);
    u_xlat6.x = u_xlat0.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat6.x * 0.5;
    u_xlat6.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD2.xy = mix(vec2(0.0, 0.0), u_xlat6.xy, vec2(bvec2(u_xlatb1)));
    vs_TEXCOORD2.z = u_xlatb1 ? _DitherAlpha : float(0.0);
    vs_TEXCOORD2.w = u_xlatb1 ? u_xlat0.w : float(0.0);
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    gl_Position = u_xlat0;
    vs_COLOR0.xyz = _OutlineColor.xyz;
    vs_TEXCOORD3.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD3.zw = vec2(0.0, 0.0);
    vs_TEXCOORD1.xyz = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec4 _ScreenParams;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _OutlineColor;
uniform 	float _ES_CharacterAmbientLightOn;
uniform 	float _ES_CharacterAmbientBrightness;
uniform 	vec3 _ES_CharacterMainLightColor;
uniform 	vec3 _ES_CharacterAmbientLightColor;
uniform 	float _ES_CharacterMainLightRatio;
uniform 	float _ES_CharacterAmbientLightRatio;
uniform 	float _ES_CharacterPointLightWholeIntensity;
uniform 	vec4 mhy_CharacterPointLightColor;
uniform 	float _UseClipPlane;
uniform 	float _MainTexAlphaUse;
uniform 	mediump float _MainTexAlphaCutoff;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	mediump float _DeferredLightThreshold;
uniform 	mediump float _DissolveNoise_Uspeed;
uniform 	vec4 _DissovleNoise_ST;
uniform 	mediump float _DissolveNoise_Vspeed;
uniform 	mediump float _DissovleNoiseScale;
uniform 	mediump float _Dissovle;
uniform 	float _UseMaterial2;
uniform 	mediump vec3 _Color2;
uniform 	mediump vec3 _OutlineColor2;
uniform 	float _UseMaterial3;
uniform 	mediump vec3 _Color3;
uniform 	mediump vec3 _OutlineColor3;
uniform 	float _UseMaterial4;
uniform 	mediump vec3 _Color4;
uniform 	mediump vec3 _OutlineColor4;
uniform 	float _UseMaterial5;
uniform 	mediump vec3 _Color5;
uniform 	mediump vec3 _OutlineColor5;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _DissovleNoise;
in mediump vec4 vs_COLOR0;
in highp vec2 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec2 u_xlat0;
lowp float u_xlat10_0;
ivec4 u_xlati0;
uvec2 u_xlatu0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump float u_xlat16_1;
bvec4 u_xlatb1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
bool u_xlatb3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
vec3 u_xlat9;
ivec3 u_xlati9;
bool u_xlatb9;
bvec3 u_xlatb12;
float u_xlat18;
bvec2 u_xlatb18;
bool u_xlatb27;
float u_xlat30;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseClipPlane));
#else
    u_xlatb0.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseClipPlane);
#endif
    u_xlat16_1 = vs_COLOR0.w + -0.00999999978;
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(u_xlat16_1<0.0);
#else
    u_xlatb9 = u_xlat16_1<0.0;
#endif
    u_xlatb0.x = u_xlatb0.x && u_xlatb9;
    if((int(u_xlatb0.x) * int(0xffffffffu))!=0){discard;}
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0.x){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(_DitherAlpha<0.949999988);
#else
        u_xlatb0.x = _DitherAlpha<0.949999988;
#endif
        if(u_xlatb0.x){
            u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb18.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb18.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb18.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = _DitherAlpha * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + -0.00999999978;
#ifdef UNITY_ADRENO_ES3
            u_xlatb0.x = !!(u_xlat0.x<0.0);
#else
            u_xlatb0.x = u_xlat0.x<0.0;
#endif
            if((int(u_xlatb0.x) * int(0xffffffffu))!=0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy).w;
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(_MainTexAlphaUse==1.0);
#else
    u_xlatb9 = _MainTexAlphaUse==1.0;
#endif
    u_xlat16_2.x = u_xlat10_0 + (-_MainTexAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(u_xlat16_2.x<0.0);
#else
    u_xlatb0.x = u_xlat16_2.x<0.0;
#endif
    u_xlatb0.x = u_xlatb9 && u_xlatb0.x;
    if((int(u_xlatb0.x) * int(0xffffffffu))!=0){discard;}
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseMaterial2));
#else
    u_xlatb0.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseMaterial2);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.y = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseMaterial3));
#else
    u_xlatb0.y = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseMaterial3);
#endif
    u_xlatb18.x = u_xlatb0.y || u_xlatb0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseMaterial4));
#else
    u_xlatb27 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseMaterial4);
#endif
    u_xlatb18.x = u_xlatb27 || u_xlatb18.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseMaterial5));
#else
    u_xlatb3 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseMaterial5);
#endif
    u_xlatb18.x = u_xlatb18.x || u_xlatb3;
    if(u_xlatb18.x){
        u_xlat18 = texture(_LightMapTex, vs_TEXCOORD0.xy).w;
        u_xlatb1 = greaterThanEqual(vec4(u_xlat18), vec4(0.800000012, 0.400000006, 0.200000003, 0.600000024));
        u_xlat16_2.xyz = _Color2.xyz * _OutlineColor2.xyz;
        u_xlati0.xy = ivec2(uvec2(u_xlatb0.xy) * 0xffffffffu & uvec2(u_xlatb1.xy) * 0xffffffffu);
        u_xlatb12.xyz = lessThan(vec4(u_xlat18), vec4(0.600000024, 0.400000006, 0.800000012, 0.800000012)).xyz;
        u_xlat16_4.xyz = _Color3.xyz * _OutlineColor3.xyz;
        u_xlati0.z = int(uint(u_xlatb27) * 0xffffffffu & uint(u_xlatb1.z) * 0xffffffffu);
        u_xlat16_5.xyz = _Color4.xyz * _OutlineColor4.xyz;
        u_xlati0.w = int(uint(u_xlatb1.w) * 0xffffffffu & uint(u_xlatb3) * 0xffffffffu);
        u_xlati9.xyz = ivec3((uvec3(u_xlatb12.xyz) * 0xffffffffu) & uvec3(u_xlati0.yzw));
        u_xlat16_6.xyz = _Color5.xyz * _OutlineColor5.xyz;
        u_xlat16_7.xyz = _Color.xyz * _OutlineColor.xyz;
        u_xlat16_6.xyz = (u_xlati9.z != 0) ? u_xlat16_6.xyz : u_xlat16_7.xyz;
        u_xlat16_5.xyz = (u_xlati9.y != 0) ? u_xlat16_5.xyz : u_xlat16_6.xyz;
        u_xlat16_4.xyz = (u_xlati9.x != 0) ? u_xlat16_4.xyz : u_xlat16_5.xyz;
        u_xlat16_2.xyz = (u_xlati0.x != 0) ? u_xlat16_2.xyz : u_xlat16_4.xyz;
    } else {
        u_xlat16_2.xyz = vs_COLOR0.xyz;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD3.xy * _DissovleNoise_ST.xy + _DissovleNoise_ST.zw;
    u_xlat16_4.x = _Time.y * _DissolveNoise_Uspeed + u_xlat0.x;
    u_xlat16_4.y = _Time.y * _DissolveNoise_Vspeed + u_xlat0.y;
    u_xlat10_0 = texture(_DissovleNoise, u_xlat16_4.xy).x;
    u_xlat0.x = u_xlat10_0 * _DissovleNoiseScale + vs_TEXCOORD3.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(_Dissovle>=u_xlat0.x);
#else
    u_xlatb0.x = _Dissovle>=u_xlat0.x;
#endif
    if((int(u_xlatb0.x) * int(0xffffffffu))==0){discard;}
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn));
#else
    u_xlatb0.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn);
#endif
    u_xlat9.xyz = u_xlat16_2.xyz * vec3(_ES_CharacterAmbientBrightness);
    u_xlat3.xyz = vec3(vec3(_ES_CharacterPointLightWholeIntensity, _ES_CharacterPointLightWholeIntensity, _ES_CharacterPointLightWholeIntensity)) * mhy_CharacterPointLightColor.xyz;
    u_xlat8.xyz = vec3(_ES_CharacterMainLightColor.x, _ES_CharacterMainLightColor.y, _ES_CharacterMainLightColor.z);
#ifdef UNITY_ADRENO_ES3
    u_xlat8.xyz = min(max(u_xlat8.xyz, 0.0), 1.0);
#else
    u_xlat8.xyz = clamp(u_xlat8.xyz, 0.0, 1.0);
#endif
    u_xlat30 = (-mhy_CharacterPointLightColor.w) + 1.0;
    u_xlat3.xyz = u_xlat8.xyz * vec3(u_xlat30) + u_xlat3.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat3.xyz = min(max(u_xlat3.xyz, 0.0), 1.0);
#else
    u_xlat3.xyz = clamp(u_xlat3.xyz, 0.0, 1.0);
#endif
    u_xlat3.xyz = u_xlat3.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat3.xyz = vec3(vec3(_ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio)) * u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat9.xyz = u_xlat9.xyz * u_xlat3.xyz;
    u_xlat3.xyz = _ES_CharacterAmbientLightColor.xyz * vec3(_ES_CharacterAmbientLightRatio);
    u_xlat16_4.xyz = u_xlat9.xyz * vec3(10.0, 10.0, 10.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.xyz = min(max(u_xlat16_4.xyz, 0.0), 1.0);
#else
    u_xlat16_4.xyz = clamp(u_xlat16_4.xyz, 0.0, 1.0);
#endif
    u_xlat9.xyz = u_xlat3.xyz * u_xlat16_4.xyz + u_xlat9.xyz;
    SV_Target1.xyz = (u_xlatb0.x) ? u_xlat9.xyz : u_xlat16_2.xyz;
    SV_Target0.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_2.x = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb0.x) ? u_xlat16_2.x : 0.0;
    SV_Target0.w = 0.0196078438;
    SV_Target1.w = 0.0500000007;
    SV_Target2.xy = vec2(0.0, 0.0);
    SV_Target2.w = _DeferredLightThreshold;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MSAA_INTERPOLATION" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	int unity_BaseInstanceID;
uniform 	float _OutlineType;
uniform 	mediump float _OutlineWidth;
uniform 	mediump vec4 _OutlineColor;
uniform 	mediump float _MaxOutlineZOffset;
uniform 	mediump float _Scale;
uniform 	vec3 _OutlineWidthAdjustZs;
uniform 	vec3 _OutlineWidthAdjustScales;
uniform 	float _UseClipPlane;
uniform 	float _ClipPlaneWorld;
uniform 	vec4 _ClipPlane;
uniform 	vec4 _MainTex_ST;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _OutlineCorrectionWidth;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
out mediump vec4 vs_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
int u_xlati0;
bool u_xlatb0;
vec4 u_xlat1;
bool u_xlatb1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
vec4 u_xlat4;
mediump vec2 u_xlat16_5;
float u_xlat6;
bvec2 u_xlatb6;
vec2 u_xlat7;
bool u_xlatb7;
vec2 u_xlat12;
bool u_xlatb12;
float u_xlat18;
bool u_xlatb18;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_OutlineType==0.0);
#else
    u_xlatb0 = _OutlineType==0.0;
#endif
    if(u_xlatb0){
        gl_Position = vec4(0.0, 0.0, 0.0, 0.0);
        vs_COLOR0 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD1.xyz = vec3(0.0, 0.0, 0.0);
        vs_TEXCOORD0.xy = vec2(0.0, 0.0);
        vs_SV_InstanceID0 = uint(gl_InstanceID);
        return;
    //ENDIF
    }
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlatb6.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseClipPlane, _ClipPlaneWorld, _UseClipPlane, _UseClipPlane)).xy;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(abs(_ClipPlane.w)<0.00100000005);
#else
    u_xlatb18 = abs(_ClipPlane.w)<0.00100000005;
#endif
    u_xlat1.xyz = _ClipPlane.www * _ClipPlane.xyz;
    u_xlat1.xyz = (bool(u_xlatb18)) ? vec3(0.0, 0.0, 0.0) : u_xlat1.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_WorldToObject[1];
    u_xlat2 = hlslcc_mtx4x4unity_WorldToObject[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_WorldToObject[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_WorldToObject[3];
    u_xlat1.xyz = u_xlat1.xyz / u_xlat1.www;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * _ClipPlane.yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _ClipPlane.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _ClipPlane.zzz + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat1.xyz, u_xlat2.xyz);
    u_xlat1.x = dot(in_POSITION0.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(u_xlat1.x<u_xlat18);
#else
    u_xlatb7 = u_xlat1.x<u_xlat18;
#endif
    u_xlat18 = (-u_xlat18) + u_xlat1.x;
    u_xlat2.xyz = (-vec3(u_xlat18)) * u_xlat2.xyz + in_POSITION0.xyz;
    u_xlat2.w = 0.0;
    u_xlat3.xyz = in_POSITION0.xyz;
    u_xlat3.w = 1.0;
    u_xlat1 = (bool(u_xlatb7)) ? u_xlat2 : u_xlat3;
    u_xlat18 = dot(in_POSITION0.xyz, _ClipPlane.xyz);
    u_xlat2.x = _ClipPlane.w + -0.00999999978;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat18<u_xlat2.x);
#else
    u_xlatb2 = u_xlat18<u_xlat2.x;
#endif
    u_xlat18 = u_xlat18 + (-_ClipPlane.w);
    u_xlat4.xyz = (-vec3(u_xlat18)) * _ClipPlane.xyz + in_POSITION0.xyz;
    u_xlat4.w = 0.0;
    u_xlat2 = (bool(u_xlatb2)) ? u_xlat4 : u_xlat3;
    u_xlat1.xyz = (u_xlatb6.y) ? u_xlat1.xyz : u_xlat2.xyz;
    u_xlat16_5.x = (u_xlatb6.y) ? u_xlat1.w : u_xlat2.w;
    u_xlat1.xyz = (u_xlatb6.x) ? u_xlat1.xyz : in_POSITION0.xyz;
    vs_COLOR0.w = (u_xlatb6.x) ? u_xlat16_5.x : 1.0;
    u_xlati0 = u_xlati0 << 2;
    u_xlat2.xyw = (-_WorldSpaceCameraPos.xyz) + unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat3.x = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].x;
    u_xlat3.y = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].x;
    u_xlat3.z = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].x;
    u_xlat3.w = u_xlat2.x;
    u_xlat1.w = in_POSITION0.w;
    u_xlat3.x = dot(u_xlat3, u_xlat1);
    u_xlat4.x = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].y;
    u_xlat4.y = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].y;
    u_xlat4.z = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].y;
    u_xlat4.w = u_xlat2.y;
    u_xlat3.y = dot(u_xlat4, u_xlat1);
    u_xlat2.x = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].z;
    u_xlat2.y = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].z;
    u_xlat2.z = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].z;
    u_xlat3.z = dot(u_xlat2, u_xlat1);
    u_xlat2.x = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].w;
    u_xlat2.y = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].w;
    u_xlat2.z = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].w;
    u_xlat2.w = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3].w;
    u_xlat3.w = dot(u_xlat2, u_xlat1);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].x;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].x;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].x;
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat3.xyz);
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].y;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].y;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].y;
    u_xlat1.y = dot(u_xlat2.xyz, u_xlat3.xyz);
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat1.z = dot(u_xlat2.xyz, u_xlat3.xyz);
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].w;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].w;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].w;
    u_xlat2.w = hlslcc_mtx4x4unity_MatrixV[3].w;
    u_xlat6 = dot(u_xlat2, u_xlat3);
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_OutlineType==1.0);
#else
    u_xlatb12 = _OutlineType==1.0;
#endif
    u_xlat2.xyz = (bool(u_xlatb12)) ? in_NORMAL0.xyz : in_TANGENT0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat2.xyw = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat0.xzw = unity_Builtins0Array[u_xlati0 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xy = u_xlat0.zz * hlslcc_mtx4x4unity_MatrixV[1].xy;
    u_xlat0.xz = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat0.xx + u_xlat2.xy;
    u_xlat2.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat0.ww + u_xlat0.xz;
    u_xlat2.z = 0.00999999978;
    u_xlat16_5.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat16_5.x = inversesqrt(u_xlat16_5.x);
    u_xlat16_5.xy = u_xlat2.xy * u_xlat16_5.xx;
    u_xlat0.x = 2.41400003 / hlslcc_mtx4x4unity_CameraProjection[1].y;
    u_xlat12.x = u_xlat0.x * (-u_xlat1.z);
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat12.x<_OutlineWidthAdjustZs.y);
#else
    u_xlatb12 = u_xlat12.x<_OutlineWidthAdjustZs.y;
#endif
    u_xlat2.xy = (bool(u_xlatb12)) ? _OutlineWidthAdjustZs.xy : _OutlineWidthAdjustZs.yz;
    u_xlat2.zw = (bool(u_xlatb12)) ? _OutlineWidthAdjustScales.xy : _OutlineWidthAdjustScales.yz;
    u_xlat0.x = (-u_xlat1.z) * u_xlat0.x + (-u_xlat2.x);
    u_xlat12.xy = vec2((-u_xlat2.x) + u_xlat2.y, (-u_xlat2.z) + u_xlat2.w);
    u_xlat12.x = max(u_xlat12.x, 0.00100000005);
    u_xlat0.x = u_xlat0.x / u_xlat12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x * u_xlat12.y + u_xlat2.z;
    u_xlat12.x = _OutlineWidth * _OutlineCorrectionWidth;
    u_xlat0.x = u_xlat0.x * u_xlat12.x;
    u_xlat0.x = u_xlat0.x * 100.0;
    u_xlat0.x = u_xlat0.x * _Scale;
    u_xlat0.x = u_xlat0.x * 0.414250195;
    u_xlat0.x = u_xlat0.x * in_COLOR0.w;
    u_xlat12.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12.x = inversesqrt(u_xlat12.x);
    u_xlat2.xyz = u_xlat12.xxx * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat2.xyz * vec3(_MaxOutlineZOffset);
    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(_Scale, _Scale, _Scale));
    u_xlat12.x = in_COLOR0.z + -0.5;
    u_xlat1.xyz = u_xlat2.xyz * u_xlat12.xxx + u_xlat1.xyz;
    u_xlat0.xz = u_xlat16_5.xy * u_xlat0.xx + u_xlat1.xy;
    u_xlat2 = u_xlat0.zzzz * hlslcc_mtx4x4glstate_matrix_projection[1];
    u_xlat2 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[3] * vec4(u_xlat6) + u_xlat1;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb1 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    u_xlat2.xz = u_xlat0.xw * vec2(0.5, 0.5);
    u_xlat7.x = u_xlat0.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat7.x * 0.5;
    u_xlat7.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD2.xy = mix(vec2(0.0, 0.0), u_xlat7.xy, vec2(bvec2(u_xlatb1)));
    vs_TEXCOORD2.z = u_xlatb1 ? _DitherAlpha : float(0.0);
    vs_TEXCOORD2.w = u_xlatb1 ? u_xlat0.w : float(0.0);
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    gl_Position = u_xlat0;
    vs_COLOR0.xyz = _OutlineColor.xyz;
    vs_TEXCOORD3.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD3.zw = vec2(0.0, 0.0);
    vs_TEXCOORD1.xyz = vec3(0.0, 0.0, 0.0);
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec4 _ScreenParams;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _OutlineColor;
uniform 	float _ES_CharacterAmbientLightOn;
uniform 	float _ES_CharacterAmbientBrightness;
uniform 	vec3 _ES_CharacterMainLightColor;
uniform 	vec3 _ES_CharacterAmbientLightColor;
uniform 	float _ES_CharacterMainLightRatio;
uniform 	float _ES_CharacterAmbientLightRatio;
uniform 	float _ES_CharacterPointLightWholeIntensity;
uniform 	vec4 mhy_CharacterPointLightColor;
uniform 	float _UseClipPlane;
uniform 	float _MainTexAlphaUse;
uniform 	mediump float _MainTexAlphaCutoff;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	mediump float _DeferredLightThreshold;
uniform 	mediump float _DissolveNoise_Uspeed;
uniform 	vec4 _DissovleNoise_ST;
uniform 	mediump float _DissolveNoise_Vspeed;
uniform 	mediump float _DissovleNoiseScale;
uniform 	mediump float _Dissovle;
uniform 	float _UseMaterial2;
uniform 	mediump vec3 _Color2;
uniform 	mediump vec3 _OutlineColor2;
uniform 	float _UseMaterial3;
uniform 	mediump vec3 _Color3;
uniform 	mediump vec3 _OutlineColor3;
uniform 	float _UseMaterial4;
uniform 	mediump vec3 _Color4;
uniform 	mediump vec3 _OutlineColor4;
uniform 	float _UseMaterial5;
uniform 	mediump vec3 _Color5;
uniform 	mediump vec3 _OutlineColor5;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _DissovleNoise;
in mediump vec4 vs_COLOR0;
in highp vec2 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec2 u_xlat0;
lowp float u_xlat10_0;
ivec4 u_xlati0;
uvec2 u_xlatu0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump float u_xlat16_1;
bvec4 u_xlatb1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
bool u_xlatb3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
vec3 u_xlat9;
ivec3 u_xlati9;
bool u_xlatb9;
bvec3 u_xlatb12;
float u_xlat18;
bvec2 u_xlatb18;
bool u_xlatb27;
float u_xlat30;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseClipPlane));
#else
    u_xlatb0.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseClipPlane);
#endif
    u_xlat16_1 = vs_COLOR0.w + -0.00999999978;
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(u_xlat16_1<0.0);
#else
    u_xlatb9 = u_xlat16_1<0.0;
#endif
    u_xlatb0.x = u_xlatb0.x && u_xlatb9;
    if((int(u_xlatb0.x) * int(0xffffffffu))!=0){discard;}
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0.x){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(_DitherAlpha<0.949999988);
#else
        u_xlatb0.x = _DitherAlpha<0.949999988;
#endif
        if(u_xlatb0.x){
            u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb18.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb18.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb18.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = _DitherAlpha * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + -0.00999999978;
#ifdef UNITY_ADRENO_ES3
            u_xlatb0.x = !!(u_xlat0.x<0.0);
#else
            u_xlatb0.x = u_xlat0.x<0.0;
#endif
            if((int(u_xlatb0.x) * int(0xffffffffu))!=0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy).w;
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(_MainTexAlphaUse==1.0);
#else
    u_xlatb9 = _MainTexAlphaUse==1.0;
#endif
    u_xlat16_2.x = u_xlat10_0 + (-_MainTexAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(u_xlat16_2.x<0.0);
#else
    u_xlatb0.x = u_xlat16_2.x<0.0;
#endif
    u_xlatb0.x = u_xlatb9 && u_xlatb0.x;
    if((int(u_xlatb0.x) * int(0xffffffffu))!=0){discard;}
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseMaterial2));
#else
    u_xlatb0.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseMaterial2);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.y = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseMaterial3));
#else
    u_xlatb0.y = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseMaterial3);
#endif
    u_xlatb18.x = u_xlatb0.y || u_xlatb0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseMaterial4));
#else
    u_xlatb27 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseMaterial4);
#endif
    u_xlatb18.x = u_xlatb27 || u_xlatb18.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseMaterial5));
#else
    u_xlatb3 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseMaterial5);
#endif
    u_xlatb18.x = u_xlatb18.x || u_xlatb3;
    if(u_xlatb18.x){
        u_xlat18 = texture(_LightMapTex, vs_TEXCOORD0.xy).w;
        u_xlatb1 = greaterThanEqual(vec4(u_xlat18), vec4(0.800000012, 0.400000006, 0.200000003, 0.600000024));
        u_xlat16_2.xyz = _Color2.xyz * _OutlineColor2.xyz;
        u_xlati0.xy = ivec2(uvec2(u_xlatb0.xy) * 0xffffffffu & uvec2(u_xlatb1.xy) * 0xffffffffu);
        u_xlatb12.xyz = lessThan(vec4(u_xlat18), vec4(0.600000024, 0.400000006, 0.800000012, 0.800000012)).xyz;
        u_xlat16_4.xyz = _Color3.xyz * _OutlineColor3.xyz;
        u_xlati0.z = int(uint(u_xlatb27) * 0xffffffffu & uint(u_xlatb1.z) * 0xffffffffu);
        u_xlat16_5.xyz = _Color4.xyz * _OutlineColor4.xyz;
        u_xlati0.w = int(uint(u_xlatb1.w) * 0xffffffffu & uint(u_xlatb3) * 0xffffffffu);
        u_xlati9.xyz = ivec3((uvec3(u_xlatb12.xyz) * 0xffffffffu) & uvec3(u_xlati0.yzw));
        u_xlat16_6.xyz = _Color5.xyz * _OutlineColor5.xyz;
        u_xlat16_7.xyz = _Color.xyz * _OutlineColor.xyz;
        u_xlat16_6.xyz = (u_xlati9.z != 0) ? u_xlat16_6.xyz : u_xlat16_7.xyz;
        u_xlat16_5.xyz = (u_xlati9.y != 0) ? u_xlat16_5.xyz : u_xlat16_6.xyz;
        u_xlat16_4.xyz = (u_xlati9.x != 0) ? u_xlat16_4.xyz : u_xlat16_5.xyz;
        u_xlat16_2.xyz = (u_xlati0.x != 0) ? u_xlat16_2.xyz : u_xlat16_4.xyz;
    } else {
        u_xlat16_2.xyz = vs_COLOR0.xyz;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD3.xy * _DissovleNoise_ST.xy + _DissovleNoise_ST.zw;
    u_xlat16_4.x = _Time.y * _DissolveNoise_Uspeed + u_xlat0.x;
    u_xlat16_4.y = _Time.y * _DissolveNoise_Vspeed + u_xlat0.y;
    u_xlat10_0 = texture(_DissovleNoise, u_xlat16_4.xy).x;
    u_xlat0.x = u_xlat10_0 * _DissovleNoiseScale + vs_TEXCOORD3.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(_Dissovle>=u_xlat0.x);
#else
    u_xlatb0.x = _Dissovle>=u_xlat0.x;
#endif
    if((int(u_xlatb0.x) * int(0xffffffffu))==0){discard;}
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn));
#else
    u_xlatb0.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn);
#endif
    u_xlat9.xyz = u_xlat16_2.xyz * vec3(_ES_CharacterAmbientBrightness);
    u_xlat3.xyz = vec3(vec3(_ES_CharacterPointLightWholeIntensity, _ES_CharacterPointLightWholeIntensity, _ES_CharacterPointLightWholeIntensity)) * mhy_CharacterPointLightColor.xyz;
    u_xlat8.xyz = vec3(_ES_CharacterMainLightColor.x, _ES_CharacterMainLightColor.y, _ES_CharacterMainLightColor.z);
#ifdef UNITY_ADRENO_ES3
    u_xlat8.xyz = min(max(u_xlat8.xyz, 0.0), 1.0);
#else
    u_xlat8.xyz = clamp(u_xlat8.xyz, 0.0, 1.0);
#endif
    u_xlat30 = (-mhy_CharacterPointLightColor.w) + 1.0;
    u_xlat3.xyz = u_xlat8.xyz * vec3(u_xlat30) + u_xlat3.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat3.xyz = min(max(u_xlat3.xyz, 0.0), 1.0);
#else
    u_xlat3.xyz = clamp(u_xlat3.xyz, 0.0, 1.0);
#endif
    u_xlat3.xyz = u_xlat3.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat3.xyz = vec3(vec3(_ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio)) * u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat9.xyz = u_xlat9.xyz * u_xlat3.xyz;
    u_xlat3.xyz = _ES_CharacterAmbientLightColor.xyz * vec3(_ES_CharacterAmbientLightRatio);
    u_xlat16_4.xyz = u_xlat9.xyz * vec3(10.0, 10.0, 10.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.xyz = min(max(u_xlat16_4.xyz, 0.0), 1.0);
#else
    u_xlat16_4.xyz = clamp(u_xlat16_4.xyz, 0.0, 1.0);
#endif
    u_xlat9.xyz = u_xlat3.xyz * u_xlat16_4.xyz + u_xlat9.xyz;
    SV_Target1.xyz = (u_xlatb0.x) ? u_xlat9.xyz : u_xlat16_2.xyz;
    SV_Target0.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_2.x = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb0.x) ? u_xlat16_2.x : 0.0;
    SV_Target0.w = 0.0196078438;
    SV_Target1.w = 0.0500000007;
    SV_Target2.xy = vec2(0.0, 0.0);
    SV_Target2.w = _DeferredLightThreshold;
    return;
}

#endif
"
}
}
Program "fp" {
SubProgram "gles3 " {
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" }
""
}
SubProgram "gles3 " {
Keywords { "MSAA_INTERPOLATION" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MSAA_INTERPOLATION" }
""
}
}
}
 Pass {
  Name "SHADOWCASTER"
  Tags { "ComplexCaster" = "true" "Distortion" = "None" "EntityUseType" = "Character" "IGNOREPROJECTOR" = "true" "LIGHTMODE" = "SHADOWCASTER" "OutlineType" = "Complex" "QUEUE" = "Geometry" "Reflected" = "Reflected" "RenderType" = "Opaque" "SHADOWSUPPORT" = "true" }
  GpuProgramID 150062
Program "vp" {
SubProgram "gles3 " {
Keywords { "SHADOWS_DEPTH" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	float mhy_avatar_normal_bias;
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
float u_xlat12;
bool u_xlatb12;
void main()
{
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat1.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;
    u_xlat1.y = hlslcc_mtx4x4unity_ObjectToWorld[1].x;
    u_xlat1.z = hlslcc_mtx4x4unity_ObjectToWorld[2].x;
    u_xlat2.xyw = (-_WorldSpaceCameraPos.xyz) + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1.w = u_xlat2.x;
    u_xlat1.x = dot(u_xlat1, in_POSITION0);
    u_xlat3.w = u_xlat2.y;
    u_xlat3.x = hlslcc_mtx4x4unity_ObjectToWorld[0].y;
    u_xlat3.y = hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat3.z = hlslcc_mtx4x4unity_ObjectToWorld[2].y;
    u_xlat1.y = dot(u_xlat3, in_POSITION0);
    u_xlat2.x = hlslcc_mtx4x4unity_ObjectToWorld[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_ObjectToWorld[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_ObjectToWorld[2].z;
    u_xlat1.z = dot(u_xlat2, in_POSITION0);
    u_xlat2.xyz = (-u_xlat1.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat12 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat2.xyz = vec3(u_xlat12) * u_xlat2.xyz;
    u_xlat12 = dot(u_xlat0.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat12 = (-u_xlat12) * u_xlat12 + 1.0;
    u_xlat12 = sqrt(u_xlat12);
    u_xlat12 = u_xlat12 * mhy_avatar_normal_bias;
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(u_xlat12) + u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(mhy_avatar_normal_bias!=0.0);
#else
    u_xlatb12 = mhy_avatar_normal_bias!=0.0;
#endif
    u_xlat0.xyz = (bool(u_xlatb12)) ? u_xlat0.xyz : u_xlat1.xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1.x = hlslcc_mtx4x4unity_ObjectToWorld[0].w;
    u_xlat1.y = hlslcc_mtx4x4unity_ObjectToWorld[1].w;
    u_xlat1.z = hlslcc_mtx4x4unity_ObjectToWorld[2].w;
    u_xlat1.w = hlslcc_mtx4x4unity_ObjectToWorld[3].w;
    u_xlat1.x = dot(u_xlat1, in_POSITION0);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[3] * u_xlat1.xxxx + u_xlat0;
    gl_Position.z = u_xlat0.w * 0.000500000024 + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD3.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD3.zw = vec2(0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	float _MainTexAlphaUse;
uniform 	mediump float _MainTexAlphaCutoff;
uniform 	mediump float _DissolveNoise_Uspeed;
uniform 	vec4 _DissovleNoise_ST;
uniform 	mediump float _DissolveNoise_Vspeed;
uniform 	mediump float _DissovleNoiseScale;
uniform 	mediump float _Dissovle;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DissovleNoise;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out highp vec4 SV_Target0;
vec2 u_xlat0;
lowp float u_xlat10_0;
bool u_xlatb0;
mediump vec2 u_xlat16_1;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_MainTexAlphaUse==1.0);
#else
    u_xlatb0 = _MainTexAlphaUse==1.0;
#endif
    if(u_xlatb0){
        u_xlat10_0 = texture(_MainTex, vs_TEXCOORD1.xy).w;
        u_xlat0.x = u_xlat10_0 + (-_MainTexAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD3.xy * _DissovleNoise_ST.xy + _DissovleNoise_ST.zw;
    u_xlat16_1.x = _Time.y * _DissolveNoise_Uspeed + u_xlat0.x;
    u_xlat16_1.y = _Time.y * _DissolveNoise_Vspeed + u_xlat0.y;
    u_xlat10_0 = texture(_DissovleNoise, u_xlat16_1.xy).x;
    u_xlat0.x = u_xlat10_0 * _DissovleNoiseScale + vs_TEXCOORD3.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Dissovle>=u_xlat0.x);
#else
    u_xlatb0 = _Dissovle>=u_xlat0.x;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))==0){discard;}
    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "SHADOWS_CUBE" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	float mhy_avatar_normal_bias;
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
out highp vec3 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
float u_xlat12;
bool u_xlatb12;
void main()
{
    vs_TEXCOORD0.xyz = vec3(0.0, 0.0, 0.0);
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat1.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;
    u_xlat1.y = hlslcc_mtx4x4unity_ObjectToWorld[1].x;
    u_xlat1.z = hlslcc_mtx4x4unity_ObjectToWorld[2].x;
    u_xlat2.xyw = (-_WorldSpaceCameraPos.xyz) + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1.w = u_xlat2.x;
    u_xlat1.x = dot(u_xlat1, in_POSITION0);
    u_xlat3.w = u_xlat2.y;
    u_xlat3.x = hlslcc_mtx4x4unity_ObjectToWorld[0].y;
    u_xlat3.y = hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat3.z = hlslcc_mtx4x4unity_ObjectToWorld[2].y;
    u_xlat1.y = dot(u_xlat3, in_POSITION0);
    u_xlat2.x = hlslcc_mtx4x4unity_ObjectToWorld[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_ObjectToWorld[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_ObjectToWorld[2].z;
    u_xlat1.z = dot(u_xlat2, in_POSITION0);
    u_xlat2.xyz = (-u_xlat1.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat12 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat2.xyz = vec3(u_xlat12) * u_xlat2.xyz;
    u_xlat12 = dot(u_xlat0.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat12 = (-u_xlat12) * u_xlat12 + 1.0;
    u_xlat12 = sqrt(u_xlat12);
    u_xlat12 = u_xlat12 * mhy_avatar_normal_bias;
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(u_xlat12) + u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(mhy_avatar_normal_bias!=0.0);
#else
    u_xlatb12 = mhy_avatar_normal_bias!=0.0;
#endif
    u_xlat0.xyz = (bool(u_xlatb12)) ? u_xlat0.xyz : u_xlat1.xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1.x = hlslcc_mtx4x4unity_ObjectToWorld[0].w;
    u_xlat1.y = hlslcc_mtx4x4unity_ObjectToWorld[1].w;
    u_xlat1.z = hlslcc_mtx4x4unity_ObjectToWorld[2].w;
    u_xlat1.w = hlslcc_mtx4x4unity_ObjectToWorld[3].w;
    u_xlat1.x = dot(u_xlat1, in_POSITION0);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[3] * u_xlat1.xxxx + u_xlat0;
    gl_Position.z = u_xlat0.w * 0.000500000024 + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD3.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD3.zw = vec2(0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_LightShadowBias;
uniform 	float _MainTexAlphaUse;
uniform 	mediump float _MainTexAlphaCutoff;
uniform 	mediump float _DissolveNoise_Uspeed;
uniform 	vec4 _DissovleNoise_ST;
uniform 	mediump float _DissolveNoise_Vspeed;
uniform 	mediump float _DissovleNoiseScale;
uniform 	mediump float _Dissovle;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DissovleNoise;
in highp vec3 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out highp vec4 SV_Target0;
vec4 u_xlat0;
lowp float u_xlat10_0;
bool u_xlatb0;
mediump vec2 u_xlat16_1;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_MainTexAlphaUse==1.0);
#else
    u_xlatb0 = _MainTexAlphaUse==1.0;
#endif
    if(u_xlatb0){
        u_xlat10_0 = texture(_MainTex, vs_TEXCOORD1.xy).w;
        u_xlat0.x = u_xlat10_0 + (-_MainTexAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD3.xy * _DissovleNoise_ST.xy + _DissovleNoise_ST.zw;
    u_xlat16_1.x = _Time.y * _DissolveNoise_Uspeed + u_xlat0.x;
    u_xlat16_1.y = _Time.y * _DissolveNoise_Vspeed + u_xlat0.y;
    u_xlat10_0 = texture(_DissovleNoise, u_xlat16_1.xy).x;
    u_xlat0.x = u_xlat10_0 * _DissovleNoiseScale + vs_TEXCOORD3.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Dissovle>=u_xlat0.x);
#else
    u_xlatb0 = _Dissovle>=u_xlat0.x;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))==0){discard;}
    u_xlat0.x = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = u_xlat0.x + unity_LightShadowBias.x;
    u_xlat0.x = u_xlat0.x * _LightPositionRange.w;
    u_xlat0.x = min(u_xlat0.x, 0.999000013);
    u_xlat0 = u_xlat0.xxxx * vec4(1.0, 255.0, 65025.0, 16581375.0);
    u_xlat0 = fract(u_xlat0);
    SV_Target0 = (-u_xlat0.yzww) * vec4(0.00392156886, 0.00392156886, 0.00392156886, 0.00392156886) + u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "SHADOWS_DEPTH" "INSTANCING_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	int unity_BaseInstanceID;
uniform 	float mhy_avatar_normal_bias;
uniform 	vec4 _MainTex_ST;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD3;
flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
vec4 u_xlat1;
bool u_xlatb1;
vec4 u_xlat2;
vec4 u_xlat3;
float u_xlat12;
int u_xlati12;
float u_xlat13;
void main()
{
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlati12 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati12 = u_xlati12 << 2;
    u_xlat1.xyw = (-_WorldSpaceCameraPos.xyz) + unity_Builtins0Array[u_xlati12 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat2.w = u_xlat1.x;
    u_xlat2.x = unity_Builtins0Array[u_xlati12 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].x;
    u_xlat2.y = unity_Builtins0Array[u_xlati12 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].x;
    u_xlat2.z = unity_Builtins0Array[u_xlati12 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].x;
    u_xlat2.x = dot(u_xlat2, in_POSITION0);
    u_xlat3.w = u_xlat1.y;
    u_xlat3.x = unity_Builtins0Array[u_xlati12 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].y;
    u_xlat3.y = unity_Builtins0Array[u_xlati12 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].y;
    u_xlat3.z = unity_Builtins0Array[u_xlati12 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].y;
    u_xlat2.y = dot(u_xlat3, in_POSITION0);
    u_xlat1.x = unity_Builtins0Array[u_xlati12 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].z;
    u_xlat1.y = unity_Builtins0Array[u_xlati12 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].z;
    u_xlat1.z = unity_Builtins0Array[u_xlati12 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].z;
    u_xlat2.z = dot(u_xlat1, in_POSITION0);
    u_xlat1.xyz = (-u_xlat2.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    u_xlat1.x = dot(u_xlat0.xyz, u_xlat1.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.x = (-u_xlat1.x) * u_xlat1.x + 1.0;
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * mhy_avatar_normal_bias;
    u_xlat0.xyz = (-u_xlat0.xyz) * u_xlat1.xxx + u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(mhy_avatar_normal_bias!=0.0);
#else
    u_xlatb1 = mhy_avatar_normal_bias!=0.0;
#endif
    u_xlat0.xyz = (bool(u_xlatb1)) ? u_xlat0.xyz : u_xlat2.xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat2.x = unity_Builtins0Array[u_xlati12 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].w;
    u_xlat2.y = unity_Builtins0Array[u_xlati12 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].w;
    u_xlat2.z = unity_Builtins0Array[u_xlati12 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].w;
    u_xlat2.w = unity_Builtins0Array[u_xlati12 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3].w;
    u_xlat0.x = dot(u_xlat2, in_POSITION0);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[3] * u_xlat0.xxxx + u_xlat1;
    gl_Position.z = u_xlat0.w * 0.000500000024 + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD3.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD3.zw = vec2(0.0, 0.0);
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	float _MainTexAlphaUse;
uniform 	mediump float _MainTexAlphaCutoff;
uniform 	mediump float _DissolveNoise_Uspeed;
uniform 	vec4 _DissovleNoise_ST;
uniform 	mediump float _DissolveNoise_Vspeed;
uniform 	mediump float _DissovleNoiseScale;
uniform 	mediump float _Dissovle;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DissovleNoise;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out highp vec4 SV_Target0;
vec2 u_xlat0;
lowp float u_xlat10_0;
bool u_xlatb0;
mediump vec2 u_xlat16_1;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_MainTexAlphaUse==1.0);
#else
    u_xlatb0 = _MainTexAlphaUse==1.0;
#endif
    if(u_xlatb0){
        u_xlat10_0 = texture(_MainTex, vs_TEXCOORD1.xy).w;
        u_xlat0.x = u_xlat10_0 + (-_MainTexAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD3.xy * _DissovleNoise_ST.xy + _DissovleNoise_ST.zw;
    u_xlat16_1.x = _Time.y * _DissolveNoise_Uspeed + u_xlat0.x;
    u_xlat16_1.y = _Time.y * _DissolveNoise_Vspeed + u_xlat0.y;
    u_xlat10_0 = texture(_DissovleNoise, u_xlat16_1.xy).x;
    u_xlat0.x = u_xlat10_0 * _DissovleNoiseScale + vs_TEXCOORD3.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Dissovle>=u_xlat0.x);
#else
    u_xlatb0 = _Dissovle>=u_xlat0.x;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))==0){discard;}
    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "SHADOWS_CUBE" "INSTANCING_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	int unity_BaseInstanceID;
uniform 	float mhy_avatar_normal_bias;
uniform 	vec4 _MainTex_ST;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
out highp vec3 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD3;
flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
vec4 u_xlat1;
bool u_xlatb1;
vec4 u_xlat2;
vec4 u_xlat3;
float u_xlat12;
int u_xlati12;
float u_xlat13;
void main()
{
    vs_TEXCOORD0.xyz = vec3(0.0, 0.0, 0.0);
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlati12 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati12 = u_xlati12 << 2;
    u_xlat1.xyw = (-_WorldSpaceCameraPos.xyz) + unity_Builtins0Array[u_xlati12 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat2.w = u_xlat1.x;
    u_xlat2.x = unity_Builtins0Array[u_xlati12 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].x;
    u_xlat2.y = unity_Builtins0Array[u_xlati12 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].x;
    u_xlat2.z = unity_Builtins0Array[u_xlati12 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].x;
    u_xlat2.x = dot(u_xlat2, in_POSITION0);
    u_xlat3.w = u_xlat1.y;
    u_xlat3.x = unity_Builtins0Array[u_xlati12 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].y;
    u_xlat3.y = unity_Builtins0Array[u_xlati12 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].y;
    u_xlat3.z = unity_Builtins0Array[u_xlati12 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].y;
    u_xlat2.y = dot(u_xlat3, in_POSITION0);
    u_xlat1.x = unity_Builtins0Array[u_xlati12 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].z;
    u_xlat1.y = unity_Builtins0Array[u_xlati12 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].z;
    u_xlat1.z = unity_Builtins0Array[u_xlati12 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].z;
    u_xlat2.z = dot(u_xlat1, in_POSITION0);
    u_xlat1.xyz = (-u_xlat2.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    u_xlat1.x = dot(u_xlat0.xyz, u_xlat1.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.x = (-u_xlat1.x) * u_xlat1.x + 1.0;
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * mhy_avatar_normal_bias;
    u_xlat0.xyz = (-u_xlat0.xyz) * u_xlat1.xxx + u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(mhy_avatar_normal_bias!=0.0);
#else
    u_xlatb1 = mhy_avatar_normal_bias!=0.0;
#endif
    u_xlat0.xyz = (bool(u_xlatb1)) ? u_xlat0.xyz : u_xlat2.xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat2.x = unity_Builtins0Array[u_xlati12 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].w;
    u_xlat2.y = unity_Builtins0Array[u_xlati12 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].w;
    u_xlat2.z = unity_Builtins0Array[u_xlati12 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].w;
    u_xlat2.w = unity_Builtins0Array[u_xlati12 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3].w;
    u_xlat0.x = dot(u_xlat2, in_POSITION0);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[3] * u_xlat0.xxxx + u_xlat1;
    gl_Position.z = u_xlat0.w * 0.000500000024 + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD3.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD3.zw = vec2(0.0, 0.0);
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_LightShadowBias;
uniform 	float _MainTexAlphaUse;
uniform 	mediump float _MainTexAlphaCutoff;
uniform 	mediump float _DissolveNoise_Uspeed;
uniform 	vec4 _DissovleNoise_ST;
uniform 	mediump float _DissolveNoise_Vspeed;
uniform 	mediump float _DissovleNoiseScale;
uniform 	mediump float _Dissovle;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DissovleNoise;
in highp vec3 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out highp vec4 SV_Target0;
vec4 u_xlat0;
lowp float u_xlat10_0;
bool u_xlatb0;
mediump vec2 u_xlat16_1;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_MainTexAlphaUse==1.0);
#else
    u_xlatb0 = _MainTexAlphaUse==1.0;
#endif
    if(u_xlatb0){
        u_xlat10_0 = texture(_MainTex, vs_TEXCOORD1.xy).w;
        u_xlat0.x = u_xlat10_0 + (-_MainTexAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD3.xy * _DissovleNoise_ST.xy + _DissovleNoise_ST.zw;
    u_xlat16_1.x = _Time.y * _DissolveNoise_Uspeed + u_xlat0.x;
    u_xlat16_1.y = _Time.y * _DissolveNoise_Vspeed + u_xlat0.y;
    u_xlat10_0 = texture(_DissovleNoise, u_xlat16_1.xy).x;
    u_xlat0.x = u_xlat10_0 * _DissovleNoiseScale + vs_TEXCOORD3.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Dissovle>=u_xlat0.x);
#else
    u_xlatb0 = _Dissovle>=u_xlat0.x;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))==0){discard;}
    u_xlat0.x = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = u_xlat0.x + unity_LightShadowBias.x;
    u_xlat0.x = u_xlat0.x * _LightPositionRange.w;
    u_xlat0.x = min(u_xlat0.x, 0.999000013);
    u_xlat0 = u_xlat0.xxxx * vec4(1.0, 255.0, 65025.0, 16581375.0);
    u_xlat0 = fract(u_xlat0);
    SV_Target0 = (-u_xlat0.yzww) * vec4(0.00392156886, 0.00392156886, 0.00392156886, 0.00392156886) + u_xlat0;
    return;
}

#endif
"
}
}
Program "fp" {
SubProgram "gles3 " {
Keywords { "SHADOWS_DEPTH" }
""
}
SubProgram "gles3 " {
Keywords { "SHADOWS_CUBE" }
""
}
SubProgram "gles3 " {
Keywords { "SHADOWS_DEPTH" "INSTANCING_ON" }
""
}
SubProgram "gles3 " {
Keywords { "SHADOWS_CUBE" "INSTANCING_ON" }
""
}
}
}
 Pass {
  Name "FORWARDBASEBODY"
  Tags { "Distortion" = "None" "EntityUseType" = "Character" "IGNOREPROJECTOR" = "true" "LIGHTMODE" = "FORWARDBASE" "OutlineType" = "Complex" "QUEUE" = "Geometry" "Reflected" = "Reflected" "RenderType" = "Opaque" }
  Cull Off
  GpuProgramID 249916
Program "vp" {
SubProgram "gles3 " {
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out highp vec2 vs_TEXCOORD0;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
void main()
{
    u_xlat0.x = hlslcc_mtx4x4unity_ObjectToWorld[0].y;
    u_xlat0.y = hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat0.z = hlslcc_mtx4x4unity_ObjectToWorld[2].y;
    u_xlat1.xyw = (-_WorldSpaceCameraPos.xyz) + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat0.w = u_xlat1.y;
    u_xlat2.xyz = in_POSITION0.xyz;
    u_xlat2.w = 1.0;
    u_xlat0.x = dot(u_xlat0, u_xlat2);
    u_xlat0 = u_xlat0.xxxx * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat3.w = u_xlat1.x;
    u_xlat3.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;
    u_xlat3.y = hlslcc_mtx4x4unity_ObjectToWorld[1].x;
    u_xlat3.z = hlslcc_mtx4x4unity_ObjectToWorld[2].x;
    u_xlat3.x = dot(u_xlat3, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat3.xxxx + u_xlat0;
    u_xlat1.x = hlslcc_mtx4x4unity_ObjectToWorld[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_ObjectToWorld[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_ObjectToWorld[2].z;
    u_xlat1.x = dot(u_xlat1, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat1.xxxx + u_xlat0;
    u_xlat1.x = hlslcc_mtx4x4unity_ObjectToWorld[0].w;
    u_xlat1.y = hlslcc_mtx4x4unity_ObjectToWorld[1].w;
    u_xlat1.z = hlslcc_mtx4x4unity_ObjectToWorld[2].w;
    u_xlat1.w = hlslcc_mtx4x4unity_ObjectToWorld[3].w;
    u_xlat1.x = dot(u_xlat1, u_xlat2);
    gl_Position = hlslcc_mtx4x4unity_MatrixVPZero[3] * u_xlat1.xxxx + u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	float _MainTexAlphaUse;
uniform 	mediump float _MainTexAlphaCutoff;
uniform 	float _TextureBiasWhenDithering;
uniform lowp sampler2D _MainTex;
in highp vec2 vs_TEXCOORD0;
layout(location = 0) out mediump vec4 SV_Target0;
bool u_xlatb0;
lowp vec4 u_xlat10_1;
mediump float u_xlat16_2;
bool u_xlatb3;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_MainTexAlphaUse==1.0);
#else
    u_xlatb0 = _MainTexAlphaUse==1.0;
#endif
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy, _TextureBiasWhenDithering);
    u_xlat16_2 = u_xlat10_1.w + (-_MainTexAlphaCutoff);
    SV_Target0.xyz = u_xlat10_1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(u_xlat16_2<0.0);
#else
    u_xlatb3 = u_xlat16_2<0.0;
#endif
    u_xlatb0 = u_xlatb0 && u_xlatb3;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
}
Program "fp" {
SubProgram "gles3 " {
""
}
}
}
 Pass {
  Name "MOTIONVECTORS"
  Tags { "Distortion" = "None" "EntityUseType" = "Character" "IGNOREPROJECTOR" = "true" "LIGHTMODE" = "MOTIONVECTORS" "OutlineType" = "Complex" "QUEUE" = "Geometry" "Reflected" = "Reflected" "RenderType" = "Opaque" }
  ZWrite Off
  GpuProgramID 323180
Program "vp" {
SubProgram "gles3 " {
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	vec4 hlslcc_mtx4x4_PreviousM[4];
uniform 	vec4 hlslcc_mtx4x4_NonJitteredVP[4];
uniform 	vec4 hlslcc_mtx4x4_PreviousVP[4];
uniform 	int _HasLastPositionData;
uniform 	float _MotionVectorDepthBias;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
void main()
{
    u_xlat0.x = hlslcc_mtx4x4unity_ObjectToWorld[0].y;
    u_xlat0.y = hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat0.z = hlslcc_mtx4x4unity_ObjectToWorld[2].y;
    u_xlat1.xyw = (-_WorldSpaceCameraPos.xyz) + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat0.w = u_xlat1.y;
    u_xlat2.xyz = in_POSITION0.xyz;
    u_xlat2.w = 1.0;
    u_xlat0.x = dot(u_xlat0, u_xlat2);
    u_xlat0 = u_xlat0.xxxx * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat3.w = u_xlat1.x;
    u_xlat3.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;
    u_xlat3.y = hlslcc_mtx4x4unity_ObjectToWorld[1].x;
    u_xlat3.z = hlslcc_mtx4x4unity_ObjectToWorld[2].x;
    u_xlat3.x = dot(u_xlat3, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat3.xxxx + u_xlat0;
    u_xlat1.x = hlslcc_mtx4x4unity_ObjectToWorld[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_ObjectToWorld[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_ObjectToWorld[2].z;
    u_xlat1.x = dot(u_xlat1, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat1.xxxx + u_xlat0;
    u_xlat1.x = hlslcc_mtx4x4unity_ObjectToWorld[0].w;
    u_xlat1.y = hlslcc_mtx4x4unity_ObjectToWorld[1].w;
    u_xlat1.z = hlslcc_mtx4x4unity_ObjectToWorld[2].w;
    u_xlat1.w = hlslcc_mtx4x4unity_ObjectToWorld[3].w;
    u_xlat1.x = dot(u_xlat1, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[3] * u_xlat1.xxxx + u_xlat0;
    u_xlat1.x = dot(vec2(vec2(_MotionVectorDepthBias, _MotionVectorDepthBias)), u_xlat0.ww);
    gl_Position.z = u_xlat0.z + u_xlat1.x;
    gl_Position.xyw = u_xlat0.xyw;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD3.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD3.zw = vec2(0.0, 0.0);
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4_NonJitteredVP[1];
    u_xlat1 = hlslcc_mtx4x4_NonJitteredVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4_NonJitteredVP[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD1 = hlslcc_mtx4x4_NonJitteredVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat0.xyz = in_NORMAL0.xyz;
    u_xlat0.w = 1.0;
    u_xlat0 = (_HasLastPositionData != 0) ? u_xlat0 : in_POSITION0;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4_PreviousM[1];
    u_xlat1 = hlslcc_mtx4x4_PreviousM[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4_PreviousM[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4_PreviousM[3] * u_xlat0.wwww + u_xlat1;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4_PreviousVP[1];
    u_xlat1 = hlslcc_mtx4x4_PreviousVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4_PreviousVP[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD2 = hlslcc_mtx4x4_PreviousVP[3] * u_xlat0.wwww + u_xlat1;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	int _ForceNoMotion;
uniform 	float _DitherAlpha;
uniform 	float _MainTexAlphaUse;
uniform 	mediump float _MainTexAlphaCutoff;
uniform 	mediump float _DissolveNoise_Uspeed;
uniform 	vec4 _DissovleNoise_ST;
uniform 	mediump float _DissolveNoise_Vspeed;
uniform 	mediump float _DissovleNoiseScale;
uniform 	mediump float _Dissovle;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DissovleNoise;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec2 u_xlat16_0;
lowp float u_xlat10_0;
bool u_xlatb0;
mediump vec2 u_xlat16_1;
ivec2 u_xlati2;
bool u_xlatb2;
vec2 u_xlat6;
ivec2 u_xlati6;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_MainTexAlphaUse==1.0);
#else
    u_xlatb0 = _MainTexAlphaUse==1.0;
#endif
    if(u_xlatb0){
        u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy).w;
        u_xlat0.x = u_xlat10_0 + (-_MainTexAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD3.xy * _DissovleNoise_ST.xy + _DissovleNoise_ST.zw;
    u_xlat16_1.x = _Time.y * _DissolveNoise_Uspeed + u_xlat0.x;
    u_xlat16_1.y = _Time.y * _DissolveNoise_Vspeed + u_xlat0.y;
    u_xlat10_0 = texture(_DissovleNoise, u_xlat16_1.xy).x;
    u_xlat0.x = u_xlat10_0 * _DissovleNoiseScale + vs_TEXCOORD3.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Dissovle>=u_xlat0.x);
#else
    u_xlatb0 = _Dissovle>=u_xlat0.x;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))==0){discard;}
    u_xlat0.xy = vs_TEXCOORD1.xy / vs_TEXCOORD1.ww;
    u_xlat0.zw = vs_TEXCOORD2.xy / vs_TEXCOORD2.ww;
    u_xlat0 = u_xlat0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat6.xy = vec2(u_xlat0.z * float(0.5), u_xlat0.w * float(0.5));
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + (-u_xlat6.xy);
    u_xlat16_1.x = (_ForceNoMotion != 0) ? 1.0 : 0.0;
    u_xlat16_1.xy = u_xlat16_1.xx * (-u_xlat0.xy) + u_xlat0.xy;
    u_xlat16_0.xy = sqrt(abs(u_xlat16_1.xy));
    u_xlati6.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_1.xyxy).xy) * 0xFFFFFFFFu);
    u_xlati2.xy = ivec2(uvec2(lessThan(u_xlat16_1.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
    u_xlati6.xy = (-u_xlati6.xy) + u_xlati2.xy;
    u_xlat6.xy = vec2(u_xlati6.xy);
    u_xlat0.xy = u_xlat6.xy * u_xlat16_0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.498039216, 0.498039216);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(_DitherAlpha<0.949999988);
#else
    u_xlatb2 = _DitherAlpha<0.949999988;
#endif
    u_xlat0.w = u_xlatb2 ? 1.0 : float(0.0);
    u_xlat0.z = 1.0;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 hlslcc_mtx4x4_NonJitteredVP[4];
uniform 	vec4 hlslcc_mtx4x4_PreviousVP[4];
uniform 	int _HasLastPositionData;
uniform 	float _MotionVectorDepthBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
struct MotionVectorParam0Array_Type {
	vec4 hlslcc_mtx4x4unity_MVPreviousMArray[4];
};
layout(std140) uniform UnityInstancing_MotionVectorParam0 {
	MotionVectorParam0Array_Type MotionVectorParam0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
vec4 u_xlat1;
int u_xlati1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
float u_xlat6;
void main()
{
    u_xlat0.xyz = in_POSITION0.xyz;
    u_xlat0.w = 1.0;
    u_xlati1 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati1 = u_xlati1 << 2;
    u_xlat2.xyw = (-_WorldSpaceCameraPos.xyz) + unity_Builtins0Array[u_xlati1 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat3.w = u_xlat2.y;
    u_xlat3.x = unity_Builtins0Array[u_xlati1 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].y;
    u_xlat3.y = unity_Builtins0Array[u_xlati1 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].y;
    u_xlat3.z = unity_Builtins0Array[u_xlati1 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].y;
    u_xlat6 = dot(u_xlat3, u_xlat0);
    u_xlat3 = vec4(u_xlat6) * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat4.w = u_xlat2.x;
    u_xlat4.x = unity_Builtins0Array[u_xlati1 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].x;
    u_xlat4.y = unity_Builtins0Array[u_xlati1 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].x;
    u_xlat4.z = unity_Builtins0Array[u_xlati1 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].x;
    u_xlat6 = dot(u_xlat4, u_xlat0);
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVPZero[0] * vec4(u_xlat6) + u_xlat3;
    u_xlat2.x = unity_Builtins0Array[u_xlati1 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].z;
    u_xlat2.y = unity_Builtins0Array[u_xlati1 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].z;
    u_xlat2.z = unity_Builtins0Array[u_xlati1 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].z;
    u_xlat6 = dot(u_xlat2, u_xlat0);
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVPZero[2] * vec4(u_xlat6) + u_xlat3;
    u_xlat3.x = unity_Builtins0Array[u_xlati1 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].w;
    u_xlat3.y = unity_Builtins0Array[u_xlati1 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].w;
    u_xlat3.z = unity_Builtins0Array[u_xlati1 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].w;
    u_xlat3.w = unity_Builtins0Array[u_xlati1 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3].w;
    u_xlat0.x = dot(u_xlat3, u_xlat0);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[3] * u_xlat0.xxxx + u_xlat2;
    u_xlat6 = dot(vec2(vec2(_MotionVectorDepthBias, _MotionVectorDepthBias)), u_xlat0.ww);
    gl_Position.z = u_xlat0.z + u_xlat6;
    gl_Position.xyw = u_xlat0.xyw;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD3.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD3.zw = vec2(0.0, 0.0);
    u_xlat0 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati1 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat0 = unity_Builtins0Array[u_xlati1 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = unity_Builtins0Array[u_xlati1 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = unity_Builtins0Array[u_xlati1 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4_NonJitteredVP[1];
    u_xlat2 = hlslcc_mtx4x4_NonJitteredVP[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4_NonJitteredVP[2] * u_xlat0.zzzz + u_xlat2;
    vs_TEXCOORD1 = hlslcc_mtx4x4_NonJitteredVP[3] * u_xlat0.wwww + u_xlat2;
    u_xlat0.xyz = in_NORMAL0.xyz;
    u_xlat0.w = 1.0;
    u_xlat0 = (_HasLastPositionData != 0) ? u_xlat0 : in_POSITION0;
    u_xlat2 = u_xlat0.yyyy * MotionVectorParam0Array[u_xlati1 / 4].hlslcc_mtx4x4unity_MVPreviousMArray[1];
    u_xlat2 = MotionVectorParam0Array[u_xlati1 / 4].hlslcc_mtx4x4unity_MVPreviousMArray[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat2 = MotionVectorParam0Array[u_xlati1 / 4].hlslcc_mtx4x4unity_MVPreviousMArray[2] * u_xlat0.zzzz + u_xlat2;
    u_xlat0 = MotionVectorParam0Array[u_xlati1 / 4].hlslcc_mtx4x4unity_MVPreviousMArray[3] * u_xlat0.wwww + u_xlat2;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4_PreviousVP[1];
    u_xlat1 = hlslcc_mtx4x4_PreviousVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4_PreviousVP[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD2 = hlslcc_mtx4x4_PreviousVP[3] * u_xlat0.wwww + u_xlat1;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	int _ForceNoMotion;
uniform 	float _DitherAlpha;
uniform 	float _MainTexAlphaUse;
uniform 	mediump float _MainTexAlphaCutoff;
uniform 	mediump float _DissolveNoise_Uspeed;
uniform 	vec4 _DissovleNoise_ST;
uniform 	mediump float _DissolveNoise_Vspeed;
uniform 	mediump float _DissovleNoiseScale;
uniform 	mediump float _Dissovle;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DissovleNoise;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec2 u_xlat16_0;
lowp float u_xlat10_0;
bool u_xlatb0;
mediump vec2 u_xlat16_1;
ivec2 u_xlati2;
bool u_xlatb2;
vec2 u_xlat6;
ivec2 u_xlati6;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_MainTexAlphaUse==1.0);
#else
    u_xlatb0 = _MainTexAlphaUse==1.0;
#endif
    if(u_xlatb0){
        u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy).w;
        u_xlat0.x = u_xlat10_0 + (-_MainTexAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD3.xy * _DissovleNoise_ST.xy + _DissovleNoise_ST.zw;
    u_xlat16_1.x = _Time.y * _DissolveNoise_Uspeed + u_xlat0.x;
    u_xlat16_1.y = _Time.y * _DissolveNoise_Vspeed + u_xlat0.y;
    u_xlat10_0 = texture(_DissovleNoise, u_xlat16_1.xy).x;
    u_xlat0.x = u_xlat10_0 * _DissovleNoiseScale + vs_TEXCOORD3.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Dissovle>=u_xlat0.x);
#else
    u_xlatb0 = _Dissovle>=u_xlat0.x;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))==0){discard;}
    u_xlat0.xy = vs_TEXCOORD1.xy / vs_TEXCOORD1.ww;
    u_xlat0.zw = vs_TEXCOORD2.xy / vs_TEXCOORD2.ww;
    u_xlat0 = u_xlat0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat6.xy = vec2(u_xlat0.z * float(0.5), u_xlat0.w * float(0.5));
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + (-u_xlat6.xy);
    u_xlat16_1.x = (_ForceNoMotion != 0) ? 1.0 : 0.0;
    u_xlat16_1.xy = u_xlat16_1.xx * (-u_xlat0.xy) + u_xlat0.xy;
    u_xlat16_0.xy = sqrt(abs(u_xlat16_1.xy));
    u_xlati6.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_1.xyxy).xy) * 0xFFFFFFFFu);
    u_xlati2.xy = ivec2(uvec2(lessThan(u_xlat16_1.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
    u_xlati6.xy = (-u_xlati6.xy) + u_xlati2.xy;
    u_xlat6.xy = vec2(u_xlati6.xy);
    u_xlat0.xy = u_xlat6.xy * u_xlat16_0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.498039216, 0.498039216);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(_DitherAlpha<0.949999988);
#else
    u_xlatb2 = _DitherAlpha<0.949999988;
#endif
    u_xlat0.w = u_xlatb2 ? 1.0 : float(0.0);
    u_xlat0.z = 1.0;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "MSAA_INTERPOLATION" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	vec4 hlslcc_mtx4x4_PreviousM[4];
uniform 	vec4 hlslcc_mtx4x4_NonJitteredVP[4];
uniform 	vec4 hlslcc_mtx4x4_PreviousVP[4];
uniform 	int _HasLastPositionData;
uniform 	float _MotionVectorDepthBias;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
void main()
{
    u_xlat0.x = hlslcc_mtx4x4unity_ObjectToWorld[0].y;
    u_xlat0.y = hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat0.z = hlslcc_mtx4x4unity_ObjectToWorld[2].y;
    u_xlat1.xyw = (-_WorldSpaceCameraPos.xyz) + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat0.w = u_xlat1.y;
    u_xlat2.xyz = in_POSITION0.xyz;
    u_xlat2.w = 1.0;
    u_xlat0.x = dot(u_xlat0, u_xlat2);
    u_xlat0 = u_xlat0.xxxx * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat3.w = u_xlat1.x;
    u_xlat3.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;
    u_xlat3.y = hlslcc_mtx4x4unity_ObjectToWorld[1].x;
    u_xlat3.z = hlslcc_mtx4x4unity_ObjectToWorld[2].x;
    u_xlat3.x = dot(u_xlat3, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat3.xxxx + u_xlat0;
    u_xlat1.x = hlslcc_mtx4x4unity_ObjectToWorld[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_ObjectToWorld[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_ObjectToWorld[2].z;
    u_xlat1.x = dot(u_xlat1, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat1.xxxx + u_xlat0;
    u_xlat1.x = hlslcc_mtx4x4unity_ObjectToWorld[0].w;
    u_xlat1.y = hlslcc_mtx4x4unity_ObjectToWorld[1].w;
    u_xlat1.z = hlslcc_mtx4x4unity_ObjectToWorld[2].w;
    u_xlat1.w = hlslcc_mtx4x4unity_ObjectToWorld[3].w;
    u_xlat1.x = dot(u_xlat1, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[3] * u_xlat1.xxxx + u_xlat0;
    u_xlat1.x = dot(vec2(vec2(_MotionVectorDepthBias, _MotionVectorDepthBias)), u_xlat0.ww);
    gl_Position.z = u_xlat0.z + u_xlat1.x;
    gl_Position.xyw = u_xlat0.xyw;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD3.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD3.zw = vec2(0.0, 0.0);
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4_NonJitteredVP[1];
    u_xlat1 = hlslcc_mtx4x4_NonJitteredVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4_NonJitteredVP[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD1 = hlslcc_mtx4x4_NonJitteredVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat0.xyz = in_NORMAL0.xyz;
    u_xlat0.w = 1.0;
    u_xlat0 = (_HasLastPositionData != 0) ? u_xlat0 : in_POSITION0;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4_PreviousM[1];
    u_xlat1 = hlslcc_mtx4x4_PreviousM[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4_PreviousM[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4_PreviousM[3] * u_xlat0.wwww + u_xlat1;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4_PreviousVP[1];
    u_xlat1 = hlslcc_mtx4x4_PreviousVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4_PreviousVP[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD2 = hlslcc_mtx4x4_PreviousVP[3] * u_xlat0.wwww + u_xlat1;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	int _ForceNoMotion;
uniform 	float _DitherAlpha;
uniform 	float _MainTexAlphaUse;
uniform 	mediump float _MainTexAlphaCutoff;
uniform 	mediump float _DissolveNoise_Uspeed;
uniform 	vec4 _DissovleNoise_ST;
uniform 	mediump float _DissolveNoise_Vspeed;
uniform 	mediump float _DissovleNoiseScale;
uniform 	mediump float _Dissovle;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DissovleNoise;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec2 u_xlat16_0;
lowp float u_xlat10_0;
bool u_xlatb0;
mediump vec2 u_xlat16_1;
ivec2 u_xlati2;
bool u_xlatb2;
vec2 u_xlat6;
ivec2 u_xlati6;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_MainTexAlphaUse==1.0);
#else
    u_xlatb0 = _MainTexAlphaUse==1.0;
#endif
    if(u_xlatb0){
        u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy).w;
        u_xlat0.x = u_xlat10_0 + (-_MainTexAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD3.xy * _DissovleNoise_ST.xy + _DissovleNoise_ST.zw;
    u_xlat16_1.x = _Time.y * _DissolveNoise_Uspeed + u_xlat0.x;
    u_xlat16_1.y = _Time.y * _DissolveNoise_Vspeed + u_xlat0.y;
    u_xlat10_0 = texture(_DissovleNoise, u_xlat16_1.xy).x;
    u_xlat0.x = u_xlat10_0 * _DissovleNoiseScale + vs_TEXCOORD3.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Dissovle>=u_xlat0.x);
#else
    u_xlatb0 = _Dissovle>=u_xlat0.x;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))==0){discard;}
    u_xlat0.xy = vs_TEXCOORD1.xy / vs_TEXCOORD1.ww;
    u_xlat0.zw = vs_TEXCOORD2.xy / vs_TEXCOORD2.ww;
    u_xlat0 = u_xlat0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat6.xy = vec2(u_xlat0.z * float(0.5), u_xlat0.w * float(0.5));
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + (-u_xlat6.xy);
    u_xlat16_1.x = (_ForceNoMotion != 0) ? 1.0 : 0.0;
    u_xlat16_1.xy = u_xlat16_1.xx * (-u_xlat0.xy) + u_xlat0.xy;
    u_xlat16_0.xy = sqrt(abs(u_xlat16_1.xy));
    u_xlati6.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_1.xyxy).xy) * 0xFFFFFFFFu);
    u_xlati2.xy = ivec2(uvec2(lessThan(u_xlat16_1.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
    u_xlati6.xy = (-u_xlati6.xy) + u_xlati2.xy;
    u_xlat6.xy = vec2(u_xlati6.xy);
    u_xlat0.xy = u_xlat6.xy * u_xlat16_0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.498039216, 0.498039216);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(_DitherAlpha<0.949999988);
#else
    u_xlatb2 = _DitherAlpha<0.949999988;
#endif
    u_xlat0.w = u_xlatb2 ? 1.0 : float(0.0);
    u_xlat0.z = 1.0;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MSAA_INTERPOLATION" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 hlslcc_mtx4x4_NonJitteredVP[4];
uniform 	vec4 hlslcc_mtx4x4_PreviousVP[4];
uniform 	int _HasLastPositionData;
uniform 	float _MotionVectorDepthBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
struct MotionVectorParam0Array_Type {
	vec4 hlslcc_mtx4x4unity_MVPreviousMArray[4];
};
layout(std140) uniform UnityInstancing_MotionVectorParam0 {
	MotionVectorParam0Array_Type MotionVectorParam0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec3 in_NORMAL0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
vec4 u_xlat1;
int u_xlati1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
float u_xlat6;
void main()
{
    u_xlat0.xyz = in_POSITION0.xyz;
    u_xlat0.w = 1.0;
    u_xlati1 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati1 = u_xlati1 << 2;
    u_xlat2.xyw = (-_WorldSpaceCameraPos.xyz) + unity_Builtins0Array[u_xlati1 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat3.w = u_xlat2.y;
    u_xlat3.x = unity_Builtins0Array[u_xlati1 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].y;
    u_xlat3.y = unity_Builtins0Array[u_xlati1 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].y;
    u_xlat3.z = unity_Builtins0Array[u_xlati1 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].y;
    u_xlat6 = dot(u_xlat3, u_xlat0);
    u_xlat3 = vec4(u_xlat6) * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat4.w = u_xlat2.x;
    u_xlat4.x = unity_Builtins0Array[u_xlati1 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].x;
    u_xlat4.y = unity_Builtins0Array[u_xlati1 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].x;
    u_xlat4.z = unity_Builtins0Array[u_xlati1 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].x;
    u_xlat6 = dot(u_xlat4, u_xlat0);
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVPZero[0] * vec4(u_xlat6) + u_xlat3;
    u_xlat2.x = unity_Builtins0Array[u_xlati1 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].z;
    u_xlat2.y = unity_Builtins0Array[u_xlati1 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].z;
    u_xlat2.z = unity_Builtins0Array[u_xlati1 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].z;
    u_xlat6 = dot(u_xlat2, u_xlat0);
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVPZero[2] * vec4(u_xlat6) + u_xlat3;
    u_xlat3.x = unity_Builtins0Array[u_xlati1 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].w;
    u_xlat3.y = unity_Builtins0Array[u_xlati1 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].w;
    u_xlat3.z = unity_Builtins0Array[u_xlati1 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].w;
    u_xlat3.w = unity_Builtins0Array[u_xlati1 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3].w;
    u_xlat0.x = dot(u_xlat3, u_xlat0);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[3] * u_xlat0.xxxx + u_xlat2;
    u_xlat6 = dot(vec2(vec2(_MotionVectorDepthBias, _MotionVectorDepthBias)), u_xlat0.ww);
    gl_Position.z = u_xlat0.z + u_xlat6;
    gl_Position.xyw = u_xlat0.xyw;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD3.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD3.zw = vec2(0.0, 0.0);
    u_xlat0 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati1 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat0 = unity_Builtins0Array[u_xlati1 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = unity_Builtins0Array[u_xlati1 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = unity_Builtins0Array[u_xlati1 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4_NonJitteredVP[1];
    u_xlat2 = hlslcc_mtx4x4_NonJitteredVP[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4_NonJitteredVP[2] * u_xlat0.zzzz + u_xlat2;
    vs_TEXCOORD1 = hlslcc_mtx4x4_NonJitteredVP[3] * u_xlat0.wwww + u_xlat2;
    u_xlat0.xyz = in_NORMAL0.xyz;
    u_xlat0.w = 1.0;
    u_xlat0 = (_HasLastPositionData != 0) ? u_xlat0 : in_POSITION0;
    u_xlat2 = u_xlat0.yyyy * MotionVectorParam0Array[u_xlati1 / 4].hlslcc_mtx4x4unity_MVPreviousMArray[1];
    u_xlat2 = MotionVectorParam0Array[u_xlati1 / 4].hlslcc_mtx4x4unity_MVPreviousMArray[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat2 = MotionVectorParam0Array[u_xlati1 / 4].hlslcc_mtx4x4unity_MVPreviousMArray[2] * u_xlat0.zzzz + u_xlat2;
    u_xlat0 = MotionVectorParam0Array[u_xlati1 / 4].hlslcc_mtx4x4unity_MVPreviousMArray[3] * u_xlat0.wwww + u_xlat2;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4_PreviousVP[1];
    u_xlat1 = hlslcc_mtx4x4_PreviousVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4_PreviousVP[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD2 = hlslcc_mtx4x4_PreviousVP[3] * u_xlat0.wwww + u_xlat1;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	int _ForceNoMotion;
uniform 	float _DitherAlpha;
uniform 	float _MainTexAlphaUse;
uniform 	mediump float _MainTexAlphaCutoff;
uniform 	mediump float _DissolveNoise_Uspeed;
uniform 	vec4 _DissovleNoise_ST;
uniform 	mediump float _DissolveNoise_Vspeed;
uniform 	mediump float _DissovleNoiseScale;
uniform 	mediump float _Dissovle;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DissovleNoise;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec2 u_xlat16_0;
lowp float u_xlat10_0;
bool u_xlatb0;
mediump vec2 u_xlat16_1;
ivec2 u_xlati2;
bool u_xlatb2;
vec2 u_xlat6;
ivec2 u_xlati6;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_MainTexAlphaUse==1.0);
#else
    u_xlatb0 = _MainTexAlphaUse==1.0;
#endif
    if(u_xlatb0){
        u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy).w;
        u_xlat0.x = u_xlat10_0 + (-_MainTexAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD3.xy * _DissovleNoise_ST.xy + _DissovleNoise_ST.zw;
    u_xlat16_1.x = _Time.y * _DissolveNoise_Uspeed + u_xlat0.x;
    u_xlat16_1.y = _Time.y * _DissolveNoise_Vspeed + u_xlat0.y;
    u_xlat10_0 = texture(_DissovleNoise, u_xlat16_1.xy).x;
    u_xlat0.x = u_xlat10_0 * _DissovleNoiseScale + vs_TEXCOORD3.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Dissovle>=u_xlat0.x);
#else
    u_xlatb0 = _Dissovle>=u_xlat0.x;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))==0){discard;}
    u_xlat0.xy = vs_TEXCOORD1.xy / vs_TEXCOORD1.ww;
    u_xlat0.zw = vs_TEXCOORD2.xy / vs_TEXCOORD2.ww;
    u_xlat0 = u_xlat0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat6.xy = vec2(u_xlat0.z * float(0.5), u_xlat0.w * float(0.5));
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + (-u_xlat6.xy);
    u_xlat16_1.x = (_ForceNoMotion != 0) ? 1.0 : 0.0;
    u_xlat16_1.xy = u_xlat16_1.xx * (-u_xlat0.xy) + u_xlat0.xy;
    u_xlat16_0.xy = sqrt(abs(u_xlat16_1.xy));
    u_xlati6.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_1.xyxy).xy) * 0xFFFFFFFFu);
    u_xlati2.xy = ivec2(uvec2(lessThan(u_xlat16_1.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
    u_xlati6.xy = (-u_xlati6.xy) + u_xlati2.xy;
    u_xlat6.xy = vec2(u_xlati6.xy);
    u_xlat0.xy = u_xlat6.xy * u_xlat16_0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.498039216, 0.498039216);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(_DitherAlpha<0.949999988);
#else
    u_xlatb2 = _DitherAlpha<0.949999988;
#endif
    u_xlat0.w = u_xlatb2 ? 1.0 : float(0.0);
    u_xlat0.z = 1.0;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
}
Program "fp" {
SubProgram "gles3 " {
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" }
""
}
SubProgram "gles3 " {
Keywords { "MSAA_INTERPOLATION" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MSAA_INTERPOLATION" }
""
}
}
}
 Pass {
  Name "MOTIONVECTORSOUTLINE"
  Tags { "Distortion" = "None" "EntityUseType" = "Character" "IGNOREPROJECTOR" = "true" "LIGHTMODE" = "MOTIONVECTORSOUTLINE" "OutlineType" = "Complex" "QUEUE" = "Geometry" "Reflected" = "Reflected" "RenderType" = "Opaque" }
  ZWrite Off
  Cull Front
  GpuProgramID 359246
Program "vp" {
SubProgram "gles3 " {
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_CameraProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4_PreviousM[4];
uniform 	mediump float _OutlineWidth;
uniform 	mediump float _MaxOutlineZOffset;
uniform 	mediump float _Scale;
uniform 	vec3 _OutlineWidthAdjustZs;
uniform 	vec3 _OutlineWidthAdjustScales;
uniform 	vec4 hlslcc_mtx4x4_PreviousV[4];
uniform 	vec4 hlslcc_mtx4x4_NonJitteredP[4];
uniform 	int _HasLastPositionData;
uniform 	float _MotionVectorDepthBias;
uniform 	float _OutlineCorrectionWidth;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec2 u_xlat16_1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
vec4 u_xlat6;
mediump vec2 u_xlat16_7;
float u_xlat8;
bool u_xlatb8;
vec3 u_xlat12;
vec2 u_xlat16;
mediump float u_xlat16_17;
float u_xlat24;
float u_xlat26;
bool u_xlatb26;
void main()
{
    u_xlat0.xy = hlslcc_mtx4x4unity_ObjectToWorld[1].yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * hlslcc_mtx4x4unity_ObjectToWorld[1].xx + u_xlat0.xy;
    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * hlslcc_mtx4x4unity_ObjectToWorld[1].zz + u_xlat0.xy;
    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[3].xy * hlslcc_mtx4x4unity_ObjectToWorld[1].ww + u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * in_TANGENT0.yy;
    u_xlat16.xy = hlslcc_mtx4x4unity_ObjectToWorld[0].yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
    u_xlat16.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * hlslcc_mtx4x4unity_ObjectToWorld[0].xx + u_xlat16.xy;
    u_xlat16.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * hlslcc_mtx4x4unity_ObjectToWorld[0].zz + u_xlat16.xy;
    u_xlat16.xy = hlslcc_mtx4x4unity_MatrixV[3].xy * hlslcc_mtx4x4unity_ObjectToWorld[0].ww + u_xlat16.xy;
    u_xlat0.xy = u_xlat16.xy * in_TANGENT0.xx + u_xlat0.xy;
    u_xlat16.xy = hlslcc_mtx4x4unity_ObjectToWorld[2].yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
    u_xlat16.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * hlslcc_mtx4x4unity_ObjectToWorld[2].xx + u_xlat16.xy;
    u_xlat16.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * hlslcc_mtx4x4unity_ObjectToWorld[2].zz + u_xlat16.xy;
    u_xlat16.xy = hlslcc_mtx4x4unity_MatrixV[3].xy * hlslcc_mtx4x4unity_ObjectToWorld[2].ww + u_xlat16.xy;
    u_xlat0.xy = u_xlat16.xy * in_TANGENT0.zz + u_xlat0.xy;
    u_xlat0.z = 0.00999999978;
    u_xlat16_1.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat16_1.x = inversesqrt(u_xlat16_1.x);
    u_xlat16_1.xy = u_xlat0.xy * u_xlat16_1.xx;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].x;
    u_xlat0.y = hlslcc_mtx4x4unity_MatrixV[1].x;
    u_xlat0.z = hlslcc_mtx4x4unity_MatrixV[2].x;
    u_xlat2.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;
    u_xlat2.y = hlslcc_mtx4x4unity_ObjectToWorld[1].x;
    u_xlat2.z = hlslcc_mtx4x4unity_ObjectToWorld[2].x;
    u_xlat3.xyw = (-_WorldSpaceCameraPos.xyz) + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat2.w = u_xlat3.x;
    u_xlat2.x = dot(u_xlat2, in_POSITION0);
    u_xlat4.w = u_xlat3.y;
    u_xlat4.x = hlslcc_mtx4x4unity_ObjectToWorld[0].y;
    u_xlat4.y = hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat4.z = hlslcc_mtx4x4unity_ObjectToWorld[2].y;
    u_xlat2.y = dot(u_xlat4, in_POSITION0);
    u_xlat3.x = hlslcc_mtx4x4unity_ObjectToWorld[0].z;
    u_xlat3.y = hlslcc_mtx4x4unity_ObjectToWorld[1].z;
    u_xlat3.z = hlslcc_mtx4x4unity_ObjectToWorld[2].z;
    u_xlat2.z = dot(u_xlat3, in_POSITION0);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);
    u_xlat3.x = hlslcc_mtx4x4unity_MatrixV[0].y;
    u_xlat3.y = hlslcc_mtx4x4unity_MatrixV[1].y;
    u_xlat3.z = hlslcc_mtx4x4unity_MatrixV[2].y;
    u_xlat0.y = dot(u_xlat3.xyz, u_xlat2.xyz);
    u_xlat3.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat3.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat3.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.z = dot(u_xlat3.xyz, u_xlat2.xyz);
    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat3.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    u_xlat16_17 = _Scale * _MaxOutlineZOffset;
    u_xlat24 = in_COLOR0.z + -0.5;
    u_xlat24 = u_xlat24 * u_xlat16_17;
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat24) + u_xlat0.xyz;
    u_xlat0.x = 2.41400003 / hlslcc_mtx4x4unity_CameraProjection[1].y;
    u_xlat8 = u_xlat0.x * (-u_xlat0.z);
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(u_xlat8<_OutlineWidthAdjustZs.y);
#else
    u_xlatb8 = u_xlat8<_OutlineWidthAdjustZs.y;
#endif
    u_xlat4.xy = _OutlineWidthAdjustZs.xy;
    u_xlat4.zw = _OutlineWidthAdjustScales.xy;
    u_xlat5.xy = _OutlineWidthAdjustZs.yz;
    u_xlat5.zw = _OutlineWidthAdjustScales.yz;
    u_xlat6 = (bool(u_xlatb8)) ? u_xlat4 : u_xlat5;
    u_xlat8 = (-u_xlat0.z) * u_xlat0.x + (-u_xlat6.x);
    u_xlat6.xy = vec2((-u_xlat6.x) + u_xlat6.y, (-u_xlat6.z) + u_xlat6.w);
    u_xlat16.x = max(u_xlat6.x, 0.00100000005);
    u_xlat8 = u_xlat8 / u_xlat16.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat8 = min(max(u_xlat8, 0.0), 1.0);
#else
    u_xlat8 = clamp(u_xlat8, 0.0, 1.0);
#endif
    u_xlat8 = u_xlat8 * u_xlat6.y + u_xlat6.z;
    u_xlat16.x = _OutlineWidth * _OutlineCorrectionWidth;
    u_xlat8 = u_xlat8 * u_xlat16.x;
    u_xlat8 = u_xlat8 * 100.0;
    u_xlat8 = u_xlat8 * _Scale;
    u_xlat8 = u_xlat8 * in_COLOR0.w;
    u_xlat8 = u_xlat8 * 0.414250195;
    u_xlat3.xy = u_xlat16_1.xy * vec2(u_xlat8) + u_xlat3.xy;
    u_xlat1 = u_xlat3.yyyy * hlslcc_mtx4x4_NonJitteredP[1];
    u_xlat1 = hlslcc_mtx4x4_NonJitteredP[0] * u_xlat3.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4_NonJitteredP[2] * u_xlat3.zzzz + u_xlat1;
    u_xlat6.x = hlslcc_mtx4x4unity_ObjectToWorld[0].w;
    u_xlat6.y = hlslcc_mtx4x4unity_ObjectToWorld[1].w;
    u_xlat6.z = hlslcc_mtx4x4unity_ObjectToWorld[2].w;
    u_xlat6.w = hlslcc_mtx4x4unity_ObjectToWorld[3].w;
    u_xlat2.w = dot(u_xlat6, in_POSITION0);
    u_xlat6.x = hlslcc_mtx4x4unity_MatrixV[0].w;
    u_xlat6.y = hlslcc_mtx4x4unity_MatrixV[1].w;
    u_xlat6.z = hlslcc_mtx4x4unity_MatrixV[2].w;
    u_xlat6.w = hlslcc_mtx4x4unity_MatrixV[3].w;
    u_xlat8 = dot(u_xlat6, u_xlat2);
    vs_TEXCOORD0 = hlslcc_mtx4x4_NonJitteredP[3] * vec4(u_xlat8) + u_xlat1;
    u_xlat1.xyz = in_TEXCOORD0.xyz;
    u_xlat1.w = 1.0;
    u_xlat1 = (_HasLastPositionData != 0) ? u_xlat1 : in_POSITION0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4_PreviousM[1];
    u_xlat2 = hlslcc_mtx4x4_PreviousM[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4_PreviousM[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4_PreviousM[3] * u_xlat1.wwww + u_xlat2;
    u_xlat2.xyz = u_xlat1.yyy * hlslcc_mtx4x4_PreviousV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4_PreviousV[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4_PreviousV[2].xyz * u_xlat1.zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4_PreviousV[3].xyz * u_xlat1.www + u_xlat2.xyz;
    u_xlat26 = u_xlat0.x * (-u_xlat2.z);
#ifdef UNITY_ADRENO_ES3
    u_xlatb26 = !!(u_xlat26<_OutlineWidthAdjustZs.y);
#else
    u_xlatb26 = u_xlat26<_OutlineWidthAdjustZs.y;
#endif
    u_xlat1 = (bool(u_xlatb26)) ? u_xlat4 : u_xlat5;
    u_xlat0.x = (-u_xlat2.z) * u_xlat0.x + (-u_xlat1.x);
    u_xlat4.xy = vec2((-u_xlat1.x) + u_xlat1.y, (-u_xlat1.z) + u_xlat1.w);
    u_xlat26 = max(u_xlat4.x, 0.00100000005);
    u_xlat0.x = u_xlat0.x / u_xlat26;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x * u_xlat4.y + u_xlat1.z;
    u_xlat0.x = u_xlat0.x * u_xlat16.x;
    u_xlat0.x = u_xlat0.x * 100.0;
    u_xlat0.x = u_xlat0.x * _Scale;
    u_xlat0.x = u_xlat0.x * in_COLOR0.w;
    u_xlat0.x = u_xlat0.x * 0.414250195;
    u_xlat4.xyz = (_HasLastPositionData != 0) ? in_TEXCOORD2.xyz : in_TANGENT0.xyz;
    u_xlat5.xyz = u_xlat4.yyy * hlslcc_mtx4x4_PreviousM[1].xyz;
    u_xlat4.xyw = hlslcc_mtx4x4_PreviousM[0].xyz * u_xlat4.xxx + u_xlat5.xyz;
    u_xlat4.xyz = hlslcc_mtx4x4_PreviousM[2].xyz * u_xlat4.zzz + u_xlat4.xyw;
    u_xlat12.xz = u_xlat4.yy * hlslcc_mtx4x4_PreviousV[1].xy;
    u_xlat4.xy = hlslcc_mtx4x4_PreviousV[0].xy * u_xlat4.xx + u_xlat12.xz;
    u_xlat4.xy = hlslcc_mtx4x4_PreviousV[2].xy * u_xlat4.zz + u_xlat4.xy;
    u_xlat4.z = 0.00999999978;
    u_xlat16_7.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat16_7.x = inversesqrt(u_xlat16_7.x);
    u_xlat16_7.xy = u_xlat4.xy * u_xlat16_7.xx;
    u_xlat16.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat16.x = inversesqrt(u_xlat16.x);
    u_xlat4.xyz = u_xlat16.xxx * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat4.xyz * vec3(u_xlat24) + u_xlat2.xyz;
    u_xlat0.xz = u_xlat16_7.xy * u_xlat0.xx + u_xlat2.xy;
    u_xlat1 = u_xlat0.zzzz * hlslcc_mtx4x4_NonJitteredP[1];
    u_xlat1 = hlslcc_mtx4x4_NonJitteredP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4_NonJitteredP[2] * u_xlat2.zzzz + u_xlat1;
    vs_TEXCOORD1 = u_xlat1 + hlslcc_mtx4x4_NonJitteredP[3];
    u_xlat1 = u_xlat3.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];
    u_xlat1 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat3.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat3.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[3] * vec4(u_xlat8) + u_xlat1;
    u_xlat2.x = dot(vec2(vec2(_MotionVectorDepthBias, _MotionVectorDepthBias)), u_xlat0.ww);
    gl_Position.z = u_xlat0.z + u_xlat2.x;
    gl_Position.xyw = u_xlat0.xyw;
    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	float _DitherAlpha;
uniform 	int _ForceNoMotion;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
ivec2 u_xlati0;
mediump vec2 u_xlat16_1;
mediump vec2 u_xlat16_2;
bool u_xlatb2;
vec2 u_xlat6;
ivec2 u_xlati6;
void main()
{
    u_xlat0.xy = vs_TEXCOORD1.xy / vs_TEXCOORD1.ww;
    u_xlat0.xy = u_xlat0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5);
    u_xlat6.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat6.xy = u_xlat6.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat6.xy * vec2(0.5, 0.5) + (-u_xlat0.xy);
    u_xlat16_1.x = (_ForceNoMotion != 0) ? 1.0 : 0.0;
    u_xlat16_1.xy = u_xlat16_1.xx * (-u_xlat0.xy) + u_xlat0.xy;
    u_xlati0.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_1.xyxx).xy) * 0xFFFFFFFFu);
    u_xlati6.xy = ivec2(uvec2(lessThan(u_xlat16_1.xyxy, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
    u_xlat16_2.xy = sqrt(abs(u_xlat16_1.xy));
    u_xlati0.xy = (-u_xlati0.xy) + u_xlati6.xy;
    u_xlat0.xy = vec2(u_xlati0.xy);
    u_xlat0.xy = u_xlat0.xy * u_xlat16_2.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.498039216, 0.498039216);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(_DitherAlpha<0.949999988);
#else
    u_xlatb2 = _DitherAlpha<0.949999988;
#endif
    u_xlat0.w = u_xlatb2 ? 1.0 : float(0.0);
    u_xlat0.z = 1.0;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "MSAA_INTERPOLATION" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_CameraProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4_PreviousM[4];
uniform 	mediump float _OutlineWidth;
uniform 	mediump float _MaxOutlineZOffset;
uniform 	mediump float _Scale;
uniform 	vec3 _OutlineWidthAdjustZs;
uniform 	vec3 _OutlineWidthAdjustScales;
uniform 	vec4 hlslcc_mtx4x4_PreviousV[4];
uniform 	vec4 hlslcc_mtx4x4_NonJitteredP[4];
uniform 	int _HasLastPositionData;
uniform 	float _MotionVectorDepthBias;
uniform 	float _OutlineCorrectionWidth;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec2 u_xlat16_1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
vec4 u_xlat6;
mediump vec2 u_xlat16_7;
float u_xlat8;
bool u_xlatb8;
vec3 u_xlat12;
vec2 u_xlat16;
mediump float u_xlat16_17;
float u_xlat24;
float u_xlat26;
bool u_xlatb26;
void main()
{
    u_xlat0.xy = hlslcc_mtx4x4unity_ObjectToWorld[1].yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * hlslcc_mtx4x4unity_ObjectToWorld[1].xx + u_xlat0.xy;
    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * hlslcc_mtx4x4unity_ObjectToWorld[1].zz + u_xlat0.xy;
    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[3].xy * hlslcc_mtx4x4unity_ObjectToWorld[1].ww + u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * in_TANGENT0.yy;
    u_xlat16.xy = hlslcc_mtx4x4unity_ObjectToWorld[0].yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
    u_xlat16.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * hlslcc_mtx4x4unity_ObjectToWorld[0].xx + u_xlat16.xy;
    u_xlat16.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * hlslcc_mtx4x4unity_ObjectToWorld[0].zz + u_xlat16.xy;
    u_xlat16.xy = hlslcc_mtx4x4unity_MatrixV[3].xy * hlslcc_mtx4x4unity_ObjectToWorld[0].ww + u_xlat16.xy;
    u_xlat0.xy = u_xlat16.xy * in_TANGENT0.xx + u_xlat0.xy;
    u_xlat16.xy = hlslcc_mtx4x4unity_ObjectToWorld[2].yy * hlslcc_mtx4x4unity_MatrixV[1].xy;
    u_xlat16.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * hlslcc_mtx4x4unity_ObjectToWorld[2].xx + u_xlat16.xy;
    u_xlat16.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * hlslcc_mtx4x4unity_ObjectToWorld[2].zz + u_xlat16.xy;
    u_xlat16.xy = hlslcc_mtx4x4unity_MatrixV[3].xy * hlslcc_mtx4x4unity_ObjectToWorld[2].ww + u_xlat16.xy;
    u_xlat0.xy = u_xlat16.xy * in_TANGENT0.zz + u_xlat0.xy;
    u_xlat0.z = 0.00999999978;
    u_xlat16_1.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat16_1.x = inversesqrt(u_xlat16_1.x);
    u_xlat16_1.xy = u_xlat0.xy * u_xlat16_1.xx;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].x;
    u_xlat0.y = hlslcc_mtx4x4unity_MatrixV[1].x;
    u_xlat0.z = hlslcc_mtx4x4unity_MatrixV[2].x;
    u_xlat2.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;
    u_xlat2.y = hlslcc_mtx4x4unity_ObjectToWorld[1].x;
    u_xlat2.z = hlslcc_mtx4x4unity_ObjectToWorld[2].x;
    u_xlat3.xyw = (-_WorldSpaceCameraPos.xyz) + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat2.w = u_xlat3.x;
    u_xlat2.x = dot(u_xlat2, in_POSITION0);
    u_xlat4.w = u_xlat3.y;
    u_xlat4.x = hlslcc_mtx4x4unity_ObjectToWorld[0].y;
    u_xlat4.y = hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat4.z = hlslcc_mtx4x4unity_ObjectToWorld[2].y;
    u_xlat2.y = dot(u_xlat4, in_POSITION0);
    u_xlat3.x = hlslcc_mtx4x4unity_ObjectToWorld[0].z;
    u_xlat3.y = hlslcc_mtx4x4unity_ObjectToWorld[1].z;
    u_xlat3.z = hlslcc_mtx4x4unity_ObjectToWorld[2].z;
    u_xlat2.z = dot(u_xlat3, in_POSITION0);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);
    u_xlat3.x = hlslcc_mtx4x4unity_MatrixV[0].y;
    u_xlat3.y = hlslcc_mtx4x4unity_MatrixV[1].y;
    u_xlat3.z = hlslcc_mtx4x4unity_MatrixV[2].y;
    u_xlat0.y = dot(u_xlat3.xyz, u_xlat2.xyz);
    u_xlat3.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat3.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat3.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.z = dot(u_xlat3.xyz, u_xlat2.xyz);
    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat3.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    u_xlat16_17 = _Scale * _MaxOutlineZOffset;
    u_xlat24 = in_COLOR0.z + -0.5;
    u_xlat24 = u_xlat24 * u_xlat16_17;
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat24) + u_xlat0.xyz;
    u_xlat0.x = 2.41400003 / hlslcc_mtx4x4unity_CameraProjection[1].y;
    u_xlat8 = u_xlat0.x * (-u_xlat0.z);
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(u_xlat8<_OutlineWidthAdjustZs.y);
#else
    u_xlatb8 = u_xlat8<_OutlineWidthAdjustZs.y;
#endif
    u_xlat4.xy = _OutlineWidthAdjustZs.xy;
    u_xlat4.zw = _OutlineWidthAdjustScales.xy;
    u_xlat5.xy = _OutlineWidthAdjustZs.yz;
    u_xlat5.zw = _OutlineWidthAdjustScales.yz;
    u_xlat6 = (bool(u_xlatb8)) ? u_xlat4 : u_xlat5;
    u_xlat8 = (-u_xlat0.z) * u_xlat0.x + (-u_xlat6.x);
    u_xlat6.xy = vec2((-u_xlat6.x) + u_xlat6.y, (-u_xlat6.z) + u_xlat6.w);
    u_xlat16.x = max(u_xlat6.x, 0.00100000005);
    u_xlat8 = u_xlat8 / u_xlat16.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat8 = min(max(u_xlat8, 0.0), 1.0);
#else
    u_xlat8 = clamp(u_xlat8, 0.0, 1.0);
#endif
    u_xlat8 = u_xlat8 * u_xlat6.y + u_xlat6.z;
    u_xlat16.x = _OutlineWidth * _OutlineCorrectionWidth;
    u_xlat8 = u_xlat8 * u_xlat16.x;
    u_xlat8 = u_xlat8 * 100.0;
    u_xlat8 = u_xlat8 * _Scale;
    u_xlat8 = u_xlat8 * in_COLOR0.w;
    u_xlat8 = u_xlat8 * 0.414250195;
    u_xlat3.xy = u_xlat16_1.xy * vec2(u_xlat8) + u_xlat3.xy;
    u_xlat1 = u_xlat3.yyyy * hlslcc_mtx4x4_NonJitteredP[1];
    u_xlat1 = hlslcc_mtx4x4_NonJitteredP[0] * u_xlat3.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4_NonJitteredP[2] * u_xlat3.zzzz + u_xlat1;
    u_xlat6.x = hlslcc_mtx4x4unity_ObjectToWorld[0].w;
    u_xlat6.y = hlslcc_mtx4x4unity_ObjectToWorld[1].w;
    u_xlat6.z = hlslcc_mtx4x4unity_ObjectToWorld[2].w;
    u_xlat6.w = hlslcc_mtx4x4unity_ObjectToWorld[3].w;
    u_xlat2.w = dot(u_xlat6, in_POSITION0);
    u_xlat6.x = hlslcc_mtx4x4unity_MatrixV[0].w;
    u_xlat6.y = hlslcc_mtx4x4unity_MatrixV[1].w;
    u_xlat6.z = hlslcc_mtx4x4unity_MatrixV[2].w;
    u_xlat6.w = hlslcc_mtx4x4unity_MatrixV[3].w;
    u_xlat8 = dot(u_xlat6, u_xlat2);
    vs_TEXCOORD0 = hlslcc_mtx4x4_NonJitteredP[3] * vec4(u_xlat8) + u_xlat1;
    u_xlat1.xyz = in_TEXCOORD0.xyz;
    u_xlat1.w = 1.0;
    u_xlat1 = (_HasLastPositionData != 0) ? u_xlat1 : in_POSITION0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4_PreviousM[1];
    u_xlat2 = hlslcc_mtx4x4_PreviousM[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4_PreviousM[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4_PreviousM[3] * u_xlat1.wwww + u_xlat2;
    u_xlat2.xyz = u_xlat1.yyy * hlslcc_mtx4x4_PreviousV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4_PreviousV[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4_PreviousV[2].xyz * u_xlat1.zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4_PreviousV[3].xyz * u_xlat1.www + u_xlat2.xyz;
    u_xlat26 = u_xlat0.x * (-u_xlat2.z);
#ifdef UNITY_ADRENO_ES3
    u_xlatb26 = !!(u_xlat26<_OutlineWidthAdjustZs.y);
#else
    u_xlatb26 = u_xlat26<_OutlineWidthAdjustZs.y;
#endif
    u_xlat1 = (bool(u_xlatb26)) ? u_xlat4 : u_xlat5;
    u_xlat0.x = (-u_xlat2.z) * u_xlat0.x + (-u_xlat1.x);
    u_xlat4.xy = vec2((-u_xlat1.x) + u_xlat1.y, (-u_xlat1.z) + u_xlat1.w);
    u_xlat26 = max(u_xlat4.x, 0.00100000005);
    u_xlat0.x = u_xlat0.x / u_xlat26;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x * u_xlat4.y + u_xlat1.z;
    u_xlat0.x = u_xlat0.x * u_xlat16.x;
    u_xlat0.x = u_xlat0.x * 100.0;
    u_xlat0.x = u_xlat0.x * _Scale;
    u_xlat0.x = u_xlat0.x * in_COLOR0.w;
    u_xlat0.x = u_xlat0.x * 0.414250195;
    u_xlat4.xyz = (_HasLastPositionData != 0) ? in_TEXCOORD2.xyz : in_TANGENT0.xyz;
    u_xlat5.xyz = u_xlat4.yyy * hlslcc_mtx4x4_PreviousM[1].xyz;
    u_xlat4.xyw = hlslcc_mtx4x4_PreviousM[0].xyz * u_xlat4.xxx + u_xlat5.xyz;
    u_xlat4.xyz = hlslcc_mtx4x4_PreviousM[2].xyz * u_xlat4.zzz + u_xlat4.xyw;
    u_xlat12.xz = u_xlat4.yy * hlslcc_mtx4x4_PreviousV[1].xy;
    u_xlat4.xy = hlslcc_mtx4x4_PreviousV[0].xy * u_xlat4.xx + u_xlat12.xz;
    u_xlat4.xy = hlslcc_mtx4x4_PreviousV[2].xy * u_xlat4.zz + u_xlat4.xy;
    u_xlat4.z = 0.00999999978;
    u_xlat16_7.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat16_7.x = inversesqrt(u_xlat16_7.x);
    u_xlat16_7.xy = u_xlat4.xy * u_xlat16_7.xx;
    u_xlat16.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat16.x = inversesqrt(u_xlat16.x);
    u_xlat4.xyz = u_xlat16.xxx * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat4.xyz * vec3(u_xlat24) + u_xlat2.xyz;
    u_xlat0.xz = u_xlat16_7.xy * u_xlat0.xx + u_xlat2.xy;
    u_xlat1 = u_xlat0.zzzz * hlslcc_mtx4x4_NonJitteredP[1];
    u_xlat1 = hlslcc_mtx4x4_NonJitteredP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4_NonJitteredP[2] * u_xlat2.zzzz + u_xlat1;
    vs_TEXCOORD1 = u_xlat1 + hlslcc_mtx4x4_NonJitteredP[3];
    u_xlat1 = u_xlat3.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];
    u_xlat1 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat3.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat3.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[3] * vec4(u_xlat8) + u_xlat1;
    u_xlat2.x = dot(vec2(vec2(_MotionVectorDepthBias, _MotionVectorDepthBias)), u_xlat0.ww);
    gl_Position.z = u_xlat0.z + u_xlat2.x;
    gl_Position.xyw = u_xlat0.xyw;
    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	float _DitherAlpha;
uniform 	int _ForceNoMotion;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
ivec2 u_xlati0;
mediump vec2 u_xlat16_1;
mediump vec2 u_xlat16_2;
bool u_xlatb2;
vec2 u_xlat6;
ivec2 u_xlati6;
void main()
{
    u_xlat0.xy = vs_TEXCOORD1.xy / vs_TEXCOORD1.ww;
    u_xlat0.xy = u_xlat0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5);
    u_xlat6.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat6.xy = u_xlat6.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat6.xy * vec2(0.5, 0.5) + (-u_xlat0.xy);
    u_xlat16_1.x = (_ForceNoMotion != 0) ? 1.0 : 0.0;
    u_xlat16_1.xy = u_xlat16_1.xx * (-u_xlat0.xy) + u_xlat0.xy;
    u_xlati0.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_1.xyxx).xy) * 0xFFFFFFFFu);
    u_xlati6.xy = ivec2(uvec2(lessThan(u_xlat16_1.xyxy, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
    u_xlat16_2.xy = sqrt(abs(u_xlat16_1.xy));
    u_xlati0.xy = (-u_xlati0.xy) + u_xlati6.xy;
    u_xlat0.xy = vec2(u_xlati0.xy);
    u_xlat0.xy = u_xlat0.xy * u_xlat16_2.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.498039216, 0.498039216);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(_DitherAlpha<0.949999988);
#else
    u_xlatb2 = _DitherAlpha<0.949999988;
#endif
    u_xlat0.w = u_xlatb2 ? 1.0 : float(0.0);
    u_xlat0.z = 1.0;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
}
Program "fp" {
SubProgram "gles3 " {
""
}
SubProgram "gles3 " {
Keywords { "MSAA_INTERPOLATION" }
""
}
}
}
 Pass {
  Name "DEPTHONLY"
  Tags { "Distortion" = "None" "EntityUseType" = "Character" "IGNOREPROJECTOR" = "true" "LIGHTMODE" = "DepthOnly" "OutlineType" = "Complex" "QUEUE" = "Geometry" "Reflected" = "Reflected" "RenderType" = "Opaque" }
  GpuProgramID 428018
Program "vp" {
SubProgram "gles3 " {
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
out highp vec4 vs_TEXCOORD5;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
bool u_xlatb8;
void main()
{
    u_xlat0.x = hlslcc_mtx4x4unity_ObjectToWorld[0].y;
    u_xlat0.y = hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat0.z = hlslcc_mtx4x4unity_ObjectToWorld[2].y;
    u_xlat1.xyw = (-_WorldSpaceCameraPos.xyz) + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat0.w = u_xlat1.y;
    u_xlat2.xyz = in_POSITION0.xyz;
    u_xlat2.w = 1.0;
    u_xlat0.x = dot(u_xlat0, u_xlat2);
    u_xlat0 = u_xlat0.xxxx * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat3.w = u_xlat1.x;
    u_xlat3.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;
    u_xlat3.y = hlslcc_mtx4x4unity_ObjectToWorld[1].x;
    u_xlat3.z = hlslcc_mtx4x4unity_ObjectToWorld[2].x;
    u_xlat3.x = dot(u_xlat3, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat3.xxxx + u_xlat0;
    u_xlat1.x = hlslcc_mtx4x4unity_ObjectToWorld[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_ObjectToWorld[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_ObjectToWorld[2].z;
    u_xlat1.x = dot(u_xlat1, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat1.xxxx + u_xlat0;
    u_xlat1.x = hlslcc_mtx4x4unity_ObjectToWorld[0].w;
    u_xlat1.y = hlslcc_mtx4x4unity_ObjectToWorld[1].w;
    u_xlat1.z = hlslcc_mtx4x4unity_ObjectToWorld[2].w;
    u_xlat1.w = hlslcc_mtx4x4unity_ObjectToWorld[3].w;
    u_xlat1.x = dot(u_xlat1, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[3] * u_xlat1.xxxx + u_xlat0;
    gl_Position = u_xlat0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb8 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD5.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb8)));
    vs_TEXCOORD5.z = u_xlatb8 ? _DitherAlpha : float(0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	float _UsingDitherAlpha;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_TARGET0;
vec2 u_xlat0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
bvec2 u_xlatb4;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD5.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD5.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD5.yx / vs_TEXCOORD5.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb4.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb4.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb4.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD5.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + -0.00999999978;
#ifdef UNITY_ADRENO_ES3
            u_xlatb0 = !!(u_xlat0.x<0.0);
#else
            u_xlatb0 = u_xlat0.x<0.0;
#endif
            if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    SV_TARGET0 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
"
}
}
Program "fp" {
SubProgram "gles3 " {
""
}
}
}
}
Fallback "Unlit/Texture"
CustomEditor "MoleMole.ASECharacterShaderEditorBase"
}