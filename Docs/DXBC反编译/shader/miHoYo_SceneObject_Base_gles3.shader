//////////////////////////////////////////
//
// NOTE: This is *not* a valid shader file
//
///////////////////////////////////////////
Shader "miHoYo/SceneObject/Base" {
Properties {
[Header(Color)] _Color ("Tint Color", Color) = (1,1,1,1)
[Header(Element View)] _ElementViewEleID ("Element ID", Float) = 0
[Header(Texture)] _MainTex ("Main Tex", 2D) = "white" { }
[Enum(None, 0, AlphaTest, 1, Emission, 2)] _MainTexAlphaUse ("Main Tex Alpha Use", Float) = 0
_MainTexAlphaCutoff ("Main Tex Alpha Cutoff", Range(0, 1)) = 0.5
[Toggle(NORMAL_MAP_ON)] _UseNormalMap ("Use Normal Map", Float) = 0
_BumpMap ("Main Normal Map", 2D) = "bump" { }
_BumpScale ("Main Normal Map scale", Range(0.0001, 2)) = 1
[Header(Shadow)] [Toggle(TOON_LIGHTMAP_ON)] _UseToonLightMap ("Use Toon Light Map", Float) = 0
[MHYToggle] _UseLightMapColorAO ("Use Light Map Color.g For AO", Float) = 1
[MHYToggle] _UseVertexColorAO ("Use Vertex Color.r For AO", Float) = 1
[MHYToggle] _UseCoolShadowColorOrTex ("Use Cool Shadow Color Or Tex", Float) = 0
_LightMapTex ("Light Map Tex (RGB)", 2D) = "gray" { }
_LightArea ("Light Area Threshold", Range(0, 1)) = 0.5
_FirstShadowMultColor ("Warm Shadow Color", Color) = (0.9,0.7,0.75,1)
_CoolShadowMultColor ("Cool Shadow Color", Color) = (0.9,0.7,0.75,1)
[Header(Shadow Transition)] [Toggle(SHADOW_TRANSITION_ON)] _UseShadowTransition ("Use Shadow Transition (only work when shadow ramp is off)", Float) = 0
_ShadowTransitionRange ("Shadow Transition Range", Range(0.001, 0.2)) = 0.01
_ShadowTransitionSoftness ("Shadow Transition Softness", Range(0, 2)) = 0.5
[Header(Specular)] [Toggle(TOON_SPECULAR_ON)] _UseToonSpecular ("Use Toon Specular", Float) = 1
_SpecularColor ("Specular Color", Color) = (1,1,1,1)
_Shininess ("Specular Shininess", Range(0.1, 100)) = 10
_SpecMulti ("Specular Multiply Factor", Range(0, 1)) = 0.1
[Header(Emission(need use main tex alpha as mask))] _EmissionScaler ("Emission Scaler", Range(1, 100)) = 1
_EmissionColor_MHY ("Emission Color", Color) = (1,1,1,1)
[Header(Back Face)] [Toggle(BACK_FACE_ON)] _DrawBackFace ("Draw Back Face", Float) = 0
[Header(Metal)] [Toggle(METAL_MAT)] _MetalMaterial ("Metal Material", Float) = 0
_MTMap ("Metal Map", 2D) = "white" { }
_MTMapBrightness ("Metal Map Brightness", Float) = 1
_MTMapTileScale ("Metal Map Tile Scale", Float) = 1
_MTMapLightColor ("Metal Map Light Color", Color) = (1,1,1,1)
_MTMapDarkColor ("Metal Map Dark Color", Color) = (0,0,0,0)
_MTShadowMultiColor ("Metal Shadow Multiply Color", Color) = (0.8,0.8,0.8,0.8)
_MTShininess ("Metal Shininess", Float) = 11
_MTSpecularScale ("Metal Specular Scale", Float) = 60
_MTSpecularAttenInShadow ("Metal Specular Attenuation in Shadow", Range(0, 1)) = 0.2
_MTSpecularColor ("Metal Specular Color", Color) = (1,1,1,1)
[Header(State)] [Enum(UnityEngine.Rendering.CullMode)] _CullMode ("Cull Mode", Float) = 2
[Header(ASE Properties)] _ASEHeader ("", Float) = 0
}
SubShader {
 Tags { "IGNOREPROJECTOR" = "False" "QUEUE" = "Geometry" "RenderType" = "Opaque" }
 Pass {
  Tags { "DebugView" = "On" "IGNOREPROJECTOR" = "False" "LIGHTMODE" = "HYBRIDDEFERRED" "QUEUE" = "Geometry" "RenderType" = "Opaque" "tex2DOverride" = "SceneObjectTex2D" }
  Cull Off
  GpuProgramID 54824
Program "vp" {
SubProgram "gles3 " {
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec3 mhy_AvatarLightDir;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump float u_xlat16_4;
float u_xlat16;
void main()
{
    u_xlat0.x = hlslcc_mtx4x4unity_ObjectToWorld[0].y;
    u_xlat0.y = hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat0.z = hlslcc_mtx4x4unity_ObjectToWorld[2].y;
    u_xlat1.xyw = (-_WorldSpaceCameraPos.xyz) + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat0.w = u_xlat1.y;
    u_xlat2.xyz = in_POSITION0.xyz;
    u_xlat2.w = 1.0;
    u_xlat0.x = dot(u_xlat0, u_xlat2);
    u_xlat0 = u_xlat0.xxxx * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat3.w = u_xlat1.x;
    u_xlat3.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;
    u_xlat3.y = hlslcc_mtx4x4unity_ObjectToWorld[1].x;
    u_xlat3.z = hlslcc_mtx4x4unity_ObjectToWorld[2].x;
    u_xlat3.x = dot(u_xlat3, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat3.xxxx + u_xlat0;
    u_xlat1.x = hlslcc_mtx4x4unity_ObjectToWorld[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_ObjectToWorld[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_ObjectToWorld[2].z;
    u_xlat1.x = dot(u_xlat1, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat1.xxxx + u_xlat0;
    u_xlat1.x = hlslcc_mtx4x4unity_ObjectToWorld[0].w;
    u_xlat1.y = hlslcc_mtx4x4unity_ObjectToWorld[1].w;
    u_xlat1.z = hlslcc_mtx4x4unity_ObjectToWorld[2].w;
    u_xlat1.w = hlslcc_mtx4x4unity_ObjectToWorld[3].w;
    u_xlat1.x = dot(u_xlat1, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[3] * u_xlat1.xxxx + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat16 = inversesqrt(u_xlat16);
    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
    u_xlat16_4 = dot(u_xlat1.xyz, mhy_AvatarLightDir.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    vs_TEXCOORD1.w = u_xlat16_4 * 0.497500002 + 0.5;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.zw = u_xlat0.zw;
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD3.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD5.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	mediump vec4 _Color;
uniform 	float _MainTexAlphaUse;
uniform 	mediump float _MainTexAlphaCutoff;
uniform 	float _UseVertexColorAO;
uniform 	mediump float _LightArea;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	float _UseCoolShadowColorOrTex;
uniform 	mediump vec3 _CoolShadowMultColor;
uniform 	float _UseShadowTransition;
uniform 	float _ShadowTransitionRange;
uniform 	float _ShadowTransitionSoftness;
uniform 	mediump vec3 _SpecularColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump float _EmissionScaler;
uniform 	mediump vec3 _EmissionColor_MHY;
uniform 	float _ES_CharacterAmbientLightOn;
uniform 	float _ES_CharacterAmbientBrightness;
uniform 	vec3 _ES_CharacterMainLightColor;
uniform 	float _ES_CharacterMainLightBrightness;
uniform 	vec3 _ES_CharacterAmbientLightColor;
uniform 	float _ES_CharacterMainLightRatio;
uniform 	float _ES_CharacterAmbientLightRatio;
uniform 	float _ES_CharacterColorTone;
uniform 	vec3 mhy_AvatarLightDir;
uniform lowp sampler2D _MainTex;
in mediump vec4 vs_COLOR0;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec4 u_xlat0;
bvec2 u_xlatb0;
vec3 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
bool u_xlatb1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump vec4 u_xlat16_3;
bool u_xlatb3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
bool u_xlatb8;
float u_xlat16;
mediump float u_xlat16_16;
bool u_xlatb16;
bool u_xlatb24;
mediump float u_xlat16_26;
bool u_xlatb27;
mediump float u_xlat16_28;
mediump float u_xlat16_29;
void main()
{
    u_xlatb0.xy = equal(vec4(_MainTexAlphaUse), vec4(1.0, 2.0, 0.0, 0.0)).xy;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy, -1.0);
    u_xlat16_2.x = u_xlat10_1.w + (-_MainTexAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(u_xlat16_2.x<0.0);
#else
    u_xlatb16 = u_xlat16_2.x<0.0;
#endif
    u_xlatb0.x = u_xlatb0.x && u_xlatb16;
    if((int(u_xlatb0.x) * int(0xffffffffu))!=0){discard;}
    SV_Target0.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0470588244;
    u_xlat0.xzw = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat0.xzw = u_xlat0.xzw * u_xlat3.xxx + mhy_AvatarLightDir.xyz;
    u_xlat3.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat0.xzw = u_xlat0.xzw * u_xlat3.xxx;
    u_xlat16_2.x = dot(vs_TEXCOORD1.xyz, u_xlat0.xzw);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.00100000005);
    u_xlat16_2.x = log2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * _Shininess;
    u_xlat16_2.x = exp2(u_xlat16_2.x);
    u_xlat16_2.xyz = u_xlat16_2.xxx * _SpecularColor.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(_SpecMulti);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(0.5, 0.5, 0.5);
    u_xlat16_26 = vs_COLOR0.x * 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorAO));
#else
    u_xlatb0.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorAO);
#endif
    u_xlat16_26 = (u_xlatb0.x) ? u_xlat16_26 : 0.5;
    u_xlat16 = u_xlat16_26 + vs_TEXCOORD1.w;
    u_xlat16 = u_xlat16 * 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(0.949999988<u_xlat16_26);
#else
    u_xlatb24 = 0.949999988<u_xlat16_26;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(u_xlat16_26<0.0500000007);
#else
    u_xlatb3 = u_xlat16_26<0.0500000007;
#endif
    u_xlat16_26 = (u_xlatb24) ? 1.0 : u_xlat16;
    u_xlat16_26 = (u_xlatb3) ? 0.0 : u_xlat16_26;
    u_xlat16_26 = (u_xlatb0.x) ? u_xlat16_26 : vs_TEXCOORD1.w;
    u_xlat16_4.x = (-u_xlat16_26) + _LightArea;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(u_xlat16_26<_LightArea);
#else
    u_xlatb0.x = u_xlat16_26<_LightArea;
#endif
    u_xlat16_26 = u_xlat16_4.x / _ShadowTransitionRange;
    u_xlat16_16 = u_xlat16_26 + 0.00999999978;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(u_xlat16_26>=1.0);
#else
    u_xlatb24 = u_xlat16_26>=1.0;
#endif
    u_xlat16_16 = log2(u_xlat16_16);
    u_xlat16 = u_xlat16_16 * _ShadowTransitionSoftness;
    u_xlat16 = exp2(u_xlat16);
    u_xlat16 = min(u_xlat16, 1.0);
    u_xlat16 = (u_xlatb24) ? 1.0 : u_xlat16;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition));
#else
    u_xlatb24 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition);
#endif
    u_xlat16 = (u_xlatb24) ? u_xlat16 : 1.0;
    u_xlat16 = u_xlatb0.x ? u_xlat16 : float(0.0);
    u_xlat16_3.xyz = vec3(_FirstShadowMultColor.xxyz.y + (-_CoolShadowMultColor.x), _FirstShadowMultColor.xxyz.z + (-_CoolShadowMultColor.y), float(_FirstShadowMultColor.z) + (-_CoolShadowMultColor.z));
    u_xlat3.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_3.xyz + _CoolShadowMultColor.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex));
#else
    u_xlatb27 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex);
#endif
    u_xlat16_4.xyz = (bool(u_xlatb27)) ? u_xlat3.xyz : vec3(_FirstShadowMultColor.x, _FirstShadowMultColor.y, _FirstShadowMultColor.z);
    u_xlat16_3.xyz = u_xlat16_4.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat3.xyz = vec3(u_xlat16) * u_xlat16_3.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_5.xyz = (bool(u_xlatb24)) ? u_xlat3.xyz : u_xlat16_4.xyz;
    u_xlat16_6.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_6.xyz;
    u_xlat1.xyz = u_xlat16_6.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
    u_xlat0.xzw = (u_xlatb0.x) ? u_xlat16_5.xyz : u_xlat1.xyz;
    u_xlat16_5.xyz = u_xlat16_2.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness)) + u_xlat0.xzw;
    u_xlat0.xzw = u_xlat16_2.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
    u_xlat16_2.xyz = u_xlat16_6.xyz * u_xlat16_4.xyz + u_xlat0.xzw;
    u_xlat16_4.xyz = u_xlat16_6.xyz * _EmissionColor_MHY.xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * vec3(vec3(_EmissionScaler, _EmissionScaler, _EmissionScaler)) + (-u_xlat16_5.xyz);
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(vec3(_EmissionScaler, _EmissionScaler, _EmissionScaler)) + (-u_xlat16_2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(0.00999999978<u_xlat10_1.w);
#else
    u_xlatb0.x = 0.00999999978<u_xlat10_1.w;
#endif
    u_xlatb0.x = u_xlatb0.x && u_xlatb0.y;
    u_xlat16_26 = (u_xlatb0.x) ? u_xlat10_1.w : 0.0;
    u_xlat16_6.xyz = vec3(u_xlat16_26) * u_xlat16_6.xyz + u_xlat16_5.xyz;
    u_xlat16_5.xyz = (u_xlatb0.x) ? u_xlat16_6.xyz : u_xlat16_5.xyz;
    u_xlat8.xyz = u_xlat16_5.xyz * vec3(vec3(_ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness));
    u_xlat1.xyz = _ES_CharacterMainLightColor.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat1.xyz = vec3(vec3(_ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio)) * u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat8.xyz = u_xlat8.xyz * u_xlat1.xyz;
    u_xlat16_6.xyz = u_xlat8.xyz * vec3(10.0, 10.0, 10.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.xyz = min(max(u_xlat16_6.xyz, 0.0), 1.0);
#else
    u_xlat16_6.xyz = clamp(u_xlat16_6.xyz, 0.0, 1.0);
#endif
    u_xlat1.xyz = _ES_CharacterAmbientLightColor.xyz * vec3(_ES_CharacterAmbientLightRatio);
    u_xlat8.xyz = u_xlat1.xyz * u_xlat16_6.xyz + u_xlat8.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn));
#else
    u_xlatb1 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn);
#endif
    u_xlat16_6.xyz = (bool(u_xlatb1)) ? u_xlat8.xyz : u_xlat16_5.xyz;
    u_xlat16_7.xyz = u_xlat16_5.xyz + (-u_xlat16_6.xyz);
    u_xlat16_7.xyz = vec3(u_xlat16_26) * u_xlat16_7.xyz + u_xlat16_6.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.00999999978<u_xlat16_26);
#else
    u_xlatb8 = 0.00999999978<u_xlat16_26;
#endif
    u_xlat16_1.xyz = (bool(u_xlatb8)) ? u_xlat16_7.xyz : u_xlat16_6.xyz;
    u_xlat16_28 = max(u_xlat16_1.z, u_xlat16_1.y);
    u_xlat16_3.w = max(u_xlat16_1.x, u_xlat16_28);
    u_xlat16_3.xyz = u_xlat16_1.xyz / u_xlat16_3.www;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(1.0<u_xlat16_3.w);
#else
    u_xlatb16 = 1.0<u_xlat16_3.w;
#endif
    u_xlat16_1.w = 1.0;
    u_xlat16_1 = (bool(u_xlatb16)) ? u_xlat16_3 : u_xlat16_1;
    u_xlat16_28 = min(u_xlat16_1.w, 1.10000002);
    u_xlat16_29 = u_xlat16_1.w + (-u_xlat16_28);
    SV_Target1.xyz = u_xlat16_1.xyz;
    u_xlat16_28 = u_xlat16_26 * u_xlat16_29 + u_xlat16_28;
    SV_Target1.w = u_xlat16_28 * 0.0500000007;
    u_xlat16_4.xyz = vec3(u_xlat16_26) * u_xlat16_4.xyz + u_xlat16_2.xyz;
    u_xlat16_2.xyz = (u_xlatb0.x) ? u_xlat16_4.xyz : u_xlat16_2.xyz;
    u_xlat16_4.xyz = (-u_xlat16_2.xyz) + u_xlat16_5.xyz;
    u_xlat16_4.xyz = vec3(u_xlat16_26) * u_xlat16_4.xyz + u_xlat16_2.xyz;
    u_xlat16_2.xyz = (bool(u_xlatb8)) ? u_xlat16_4.xyz : u_xlat16_2.xyz;
    SV_Target2.xy = u_xlat16_2.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_2.x = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb0.x) ? u_xlat16_2.x : u_xlat16_2.z;
    SV_Target2.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "MSAA_INTERPOLATION" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec3 mhy_AvatarLightDir;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump float u_xlat16_4;
float u_xlat16;
void main()
{
    u_xlat0.x = hlslcc_mtx4x4unity_ObjectToWorld[0].y;
    u_xlat0.y = hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat0.z = hlslcc_mtx4x4unity_ObjectToWorld[2].y;
    u_xlat1.xyw = (-_WorldSpaceCameraPos.xyz) + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat0.w = u_xlat1.y;
    u_xlat2.xyz = in_POSITION0.xyz;
    u_xlat2.w = 1.0;
    u_xlat0.x = dot(u_xlat0, u_xlat2);
    u_xlat0 = u_xlat0.xxxx * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat3.w = u_xlat1.x;
    u_xlat3.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;
    u_xlat3.y = hlslcc_mtx4x4unity_ObjectToWorld[1].x;
    u_xlat3.z = hlslcc_mtx4x4unity_ObjectToWorld[2].x;
    u_xlat3.x = dot(u_xlat3, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat3.xxxx + u_xlat0;
    u_xlat1.x = hlslcc_mtx4x4unity_ObjectToWorld[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_ObjectToWorld[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_ObjectToWorld[2].z;
    u_xlat1.x = dot(u_xlat1, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat1.xxxx + u_xlat0;
    u_xlat1.x = hlslcc_mtx4x4unity_ObjectToWorld[0].w;
    u_xlat1.y = hlslcc_mtx4x4unity_ObjectToWorld[1].w;
    u_xlat1.z = hlslcc_mtx4x4unity_ObjectToWorld[2].w;
    u_xlat1.w = hlslcc_mtx4x4unity_ObjectToWorld[3].w;
    u_xlat1.x = dot(u_xlat1, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[3] * u_xlat1.xxxx + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat16 = inversesqrt(u_xlat16);
    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
    u_xlat16_4 = dot(u_xlat1.xyz, mhy_AvatarLightDir.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    vs_TEXCOORD1.w = u_xlat16_4 * 0.497500002 + 0.5;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.zw = u_xlat0.zw;
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD3.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD5.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	mediump vec4 _Color;
uniform 	float _MainTexAlphaUse;
uniform 	mediump float _MainTexAlphaCutoff;
uniform 	float _UseVertexColorAO;
uniform 	mediump float _LightArea;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	float _UseCoolShadowColorOrTex;
uniform 	mediump vec3 _CoolShadowMultColor;
uniform 	float _UseShadowTransition;
uniform 	float _ShadowTransitionRange;
uniform 	float _ShadowTransitionSoftness;
uniform 	mediump vec3 _SpecularColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump float _EmissionScaler;
uniform 	mediump vec3 _EmissionColor_MHY;
uniform 	float _ES_CharacterAmbientLightOn;
uniform 	float _ES_CharacterAmbientBrightness;
uniform 	vec3 _ES_CharacterMainLightColor;
uniform 	float _ES_CharacterMainLightBrightness;
uniform 	vec3 _ES_CharacterAmbientLightColor;
uniform 	float _ES_CharacterMainLightRatio;
uniform 	float _ES_CharacterAmbientLightRatio;
uniform 	float _ES_CharacterColorTone;
uniform 	vec3 mhy_AvatarLightDir;
uniform lowp sampler2D _MainTex;
in mediump vec4 vs_COLOR0;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
bool u_xlatb2;
vec3 u_xlat3;
mediump vec4 u_xlat16_3;
bool u_xlatb3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
bool u_xlatb8;
mediump float u_xlat16_9;
float u_xlat10;
mediump float u_xlat16_10;
bvec2 u_xlatb10;
vec2 u_xlat16;
bool u_xlatb16;
mediump float u_xlat16_25;
bool u_xlatb26;
bool u_xlatb27;
mediump float u_xlat16_28;
mediump float u_xlat16_29;
void main()
{
    u_xlat0.xy = dFdx(vs_TEXCOORD0.xy);
    u_xlat16.xy = dFdy(vs_TEXCOORD0.xy);
    u_xlat0.xy = u_xlat16.xy + u_xlat0.xy;
    u_xlat16.xy = (-u_xlat0.xy) * vec2(0.25, 0.25) + vs_TEXCOORD0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25) + vs_TEXCOORD0.xy;
    u_xlat0.xy = (int(gl_SampleID) != 0) ? u_xlat16.xy : u_xlat0.xy;
    u_xlat10_0 = textureLod(_MainTex, u_xlat0.xy, 0.0);
    u_xlat16_1.x = u_xlat10_0.w + (-_MainTexAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat16_1.x<0.0);
#else
    u_xlatb2 = u_xlat16_1.x<0.0;
#endif
    u_xlatb10.xy = equal(vec4(_MainTexAlphaUse), vec4(1.0, 2.0, 0.0, 0.0)).xy;
    u_xlatb2 = u_xlatb10.x && u_xlatb2;
    if((int(u_xlatb2) * int(0xffffffffu))!=0){discard;}
    SV_Target0.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0470588244;
    u_xlat16_1.x = vs_COLOR0.x * 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorAO));
#else
    u_xlatb2 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorAO);
#endif
    u_xlat16_1.x = (u_xlatb2) ? u_xlat16_1.x : 0.5;
    u_xlat10 = u_xlat16_1.x + vs_TEXCOORD1.w;
    u_xlat10 = u_xlat10 * 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb26 = !!(0.949999988<u_xlat16_1.x);
#else
    u_xlatb26 = 0.949999988<u_xlat16_1.x;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(u_xlat16_1.x<0.0500000007);
#else
    u_xlatb3 = u_xlat16_1.x<0.0500000007;
#endif
    u_xlat16_1.x = (u_xlatb26) ? 1.0 : u_xlat10;
    u_xlat16_1.x = (u_xlatb3) ? 0.0 : u_xlat16_1.x;
    u_xlat16_1.x = (u_xlatb2) ? u_xlat16_1.x : vs_TEXCOORD1.w;
    u_xlat16_9 = (-u_xlat16_1.x) + _LightArea;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat16_1.x<_LightArea);
#else
    u_xlatb2 = u_xlat16_1.x<_LightArea;
#endif
    u_xlat16_1.x = u_xlat16_9 / _ShadowTransitionRange;
    u_xlat16_10 = u_xlat16_1.x + 0.00999999978;
#ifdef UNITY_ADRENO_ES3
    u_xlatb26 = !!(u_xlat16_1.x>=1.0);
#else
    u_xlatb26 = u_xlat16_1.x>=1.0;
#endif
    u_xlat16_10 = log2(u_xlat16_10);
    u_xlat10 = u_xlat16_10 * _ShadowTransitionSoftness;
    u_xlat10 = exp2(u_xlat10);
    u_xlat10 = min(u_xlat10, 1.0);
    u_xlat10 = (u_xlatb26) ? 1.0 : u_xlat10;
#ifdef UNITY_ADRENO_ES3
    u_xlatb26 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition));
#else
    u_xlatb26 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition);
#endif
    u_xlat10 = (u_xlatb26) ? u_xlat10 : 1.0;
    u_xlat10 = u_xlatb2 ? u_xlat10 : float(0.0);
    u_xlat16_3.xyz = vec3(_FirstShadowMultColor.xxyz.y + (-_CoolShadowMultColor.x), _FirstShadowMultColor.xxyz.z + (-_CoolShadowMultColor.y), float(_FirstShadowMultColor.z) + (-_CoolShadowMultColor.z));
    u_xlat3.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_3.xyz + _CoolShadowMultColor.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex));
#else
    u_xlatb27 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex);
#endif
    u_xlat16_1.xyz = (bool(u_xlatb27)) ? u_xlat3.xyz : vec3(_FirstShadowMultColor.x, _FirstShadowMultColor.y, _FirstShadowMultColor.z);
    u_xlat16_3.xyz = u_xlat16_1.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat3.xyz = vec3(u_xlat10) * u_xlat16_3.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_4.xyz = (bool(u_xlatb26)) ? u_xlat3.xyz : u_xlat16_1.xyz;
    u_xlat16_5.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_5.xyz;
    u_xlat0.xyz = u_xlat16_5.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
    u_xlat0.xyz = (bool(u_xlatb2)) ? u_xlat16_4.xyz : u_xlat0.xyz;
    u_xlat2.xyw = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3.x = dot(u_xlat2.xyw, u_xlat2.xyw);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat2.xyw = u_xlat2.xyw * u_xlat3.xxx + mhy_AvatarLightDir.xyz;
    u_xlat3.x = dot(u_xlat2.xyw, u_xlat2.xyw);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat2.xyw = u_xlat2.xyw * u_xlat3.xxx;
    u_xlat16_25 = dot(vs_TEXCOORD1.xyz, u_xlat2.xyw);
    u_xlat16_25 = max(u_xlat16_25, 0.00100000005);
    u_xlat16_25 = log2(u_xlat16_25);
    u_xlat16_25 = u_xlat16_25 * _Shininess;
    u_xlat16_25 = exp2(u_xlat16_25);
    u_xlat16_4.xyz = vec3(u_xlat16_25) * _SpecularColor.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(_SpecMulti);
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(0.5, 0.5, 0.5);
    u_xlat16_6.xyz = u_xlat16_4.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness)) + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat16_4.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
    u_xlat16_1.xyz = u_xlat16_5.xyz * u_xlat16_1.xyz + u_xlat0.xyz;
    u_xlat16_4.xyz = u_xlat16_5.xyz * _EmissionColor_MHY.xyz;
    u_xlat16_5.xyz = u_xlat16_4.xyz * vec3(vec3(_EmissionScaler, _EmissionScaler, _EmissionScaler)) + (-u_xlat16_6.xyz);
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(vec3(_EmissionScaler, _EmissionScaler, _EmissionScaler)) + (-u_xlat16_1.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.00999999978<u_xlat10_0.w);
#else
    u_xlatb0 = 0.00999999978<u_xlat10_0.w;
#endif
    u_xlatb0 = u_xlatb0 && u_xlatb10.y;
    u_xlat16_25 = (u_xlatb0) ? u_xlat10_0.w : 0.0;
    u_xlat16_5.xyz = vec3(u_xlat16_25) * u_xlat16_5.xyz + u_xlat16_6.xyz;
    u_xlat16_5.xyz = (bool(u_xlatb0)) ? u_xlat16_5.xyz : u_xlat16_6.xyz;
    u_xlat8.xyz = u_xlat16_5.xyz * vec3(vec3(_ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness));
    u_xlat2.xyz = _ES_CharacterMainLightColor.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat2.xyz = vec3(vec3(_ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio)) * u_xlat2.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat8.xyz = u_xlat8.xyz * u_xlat2.xyz;
    u_xlat16_6.xyz = u_xlat8.xyz * vec3(10.0, 10.0, 10.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.xyz = min(max(u_xlat16_6.xyz, 0.0), 1.0);
#else
    u_xlat16_6.xyz = clamp(u_xlat16_6.xyz, 0.0, 1.0);
#endif
    u_xlat2.xyz = _ES_CharacterAmbientLightColor.xyz * vec3(_ES_CharacterAmbientLightRatio);
    u_xlat8.xyz = u_xlat2.xyz * u_xlat16_6.xyz + u_xlat8.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn));
#else
    u_xlatb2 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn);
#endif
    u_xlat16_6.xyz = (bool(u_xlatb2)) ? u_xlat8.xyz : u_xlat16_5.xyz;
    u_xlat16_7.xyz = u_xlat16_5.xyz + (-u_xlat16_6.xyz);
    u_xlat16_7.xyz = vec3(u_xlat16_25) * u_xlat16_7.xyz + u_xlat16_6.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.00999999978<u_xlat16_25);
#else
    u_xlatb8 = 0.00999999978<u_xlat16_25;
#endif
    u_xlat16_2.xyz = (bool(u_xlatb8)) ? u_xlat16_7.xyz : u_xlat16_6.xyz;
    u_xlat16_28 = max(u_xlat16_2.z, u_xlat16_2.y);
    u_xlat16_3.w = max(u_xlat16_2.x, u_xlat16_28);
    u_xlat16_3.xyz = u_xlat16_2.xyz / u_xlat16_3.www;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(1.0<u_xlat16_3.w);
#else
    u_xlatb16 = 1.0<u_xlat16_3.w;
#endif
    u_xlat16_2.w = 1.0;
    u_xlat16_2 = (bool(u_xlatb16)) ? u_xlat16_3 : u_xlat16_2;
    u_xlat16_28 = min(u_xlat16_2.w, 1.10000002);
    u_xlat16_29 = u_xlat16_2.w + (-u_xlat16_28);
    SV_Target1.xyz = u_xlat16_2.xyz;
    u_xlat16_28 = u_xlat16_25 * u_xlat16_29 + u_xlat16_28;
    SV_Target1.w = u_xlat16_28 * 0.0500000007;
    u_xlat16_4.xyz = vec3(u_xlat16_25) * u_xlat16_4.xyz + u_xlat16_1.xyz;
    u_xlat16_1.xyz = (bool(u_xlatb0)) ? u_xlat16_4.xyz : u_xlat16_1.xyz;
    u_xlat16_4.xyz = (-u_xlat16_1.xyz) + u_xlat16_5.xyz;
    u_xlat16_4.xyz = vec3(u_xlat16_25) * u_xlat16_4.xyz + u_xlat16_1.xyz;
    u_xlat16_1.xyz = (bool(u_xlatb8)) ? u_xlat16_4.xyz : u_xlat16_1.xyz;
    SV_Target2.xy = u_xlat16_1.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_1.x = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb0) ? u_xlat16_1.x : u_xlat16_1.z;
    SV_Target2.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "LINE_INTERPOLATION" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec3 mhy_AvatarLightDir;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump float u_xlat16_4;
float u_xlat16;
void main()
{
    u_xlat0.x = hlslcc_mtx4x4unity_ObjectToWorld[0].y;
    u_xlat0.y = hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat0.z = hlslcc_mtx4x4unity_ObjectToWorld[2].y;
    u_xlat1.xyw = (-_WorldSpaceCameraPos.xyz) + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat0.w = u_xlat1.y;
    u_xlat2.xyz = in_POSITION0.xyz;
    u_xlat2.w = 1.0;
    u_xlat0.x = dot(u_xlat0, u_xlat2);
    u_xlat0 = u_xlat0.xxxx * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat3.w = u_xlat1.x;
    u_xlat3.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;
    u_xlat3.y = hlslcc_mtx4x4unity_ObjectToWorld[1].x;
    u_xlat3.z = hlslcc_mtx4x4unity_ObjectToWorld[2].x;
    u_xlat3.x = dot(u_xlat3, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat3.xxxx + u_xlat0;
    u_xlat1.x = hlslcc_mtx4x4unity_ObjectToWorld[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_ObjectToWorld[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_ObjectToWorld[2].z;
    u_xlat1.x = dot(u_xlat1, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat1.xxxx + u_xlat0;
    u_xlat1.x = hlslcc_mtx4x4unity_ObjectToWorld[0].w;
    u_xlat1.y = hlslcc_mtx4x4unity_ObjectToWorld[1].w;
    u_xlat1.z = hlslcc_mtx4x4unity_ObjectToWorld[2].w;
    u_xlat1.w = hlslcc_mtx4x4unity_ObjectToWorld[3].w;
    u_xlat1.x = dot(u_xlat1, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[3] * u_xlat1.xxxx + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat16 = inversesqrt(u_xlat16);
    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
    u_xlat16_4 = dot(u_xlat1.xyz, mhy_AvatarLightDir.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    vs_TEXCOORD1.w = u_xlat16_4 * 0.497500002 + 0.5;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.zw = u_xlat0.zw;
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD3.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD5.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	mediump vec4 _Color;
uniform 	float _MainTexAlphaUse;
uniform 	mediump float _MainTexAlphaCutoff;
uniform 	float _UseVertexColorAO;
uniform 	mediump float _LightArea;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	float _UseCoolShadowColorOrTex;
uniform 	mediump vec3 _CoolShadowMultColor;
uniform 	float _UseShadowTransition;
uniform 	float _ShadowTransitionRange;
uniform 	float _ShadowTransitionSoftness;
uniform 	mediump vec3 _SpecularColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump float _EmissionScaler;
uniform 	mediump vec3 _EmissionColor_MHY;
uniform 	float _ES_CharacterAmbientLightOn;
uniform 	float _ES_CharacterAmbientBrightness;
uniform 	vec3 _ES_CharacterMainLightColor;
uniform 	float _ES_CharacterMainLightBrightness;
uniform 	vec3 _ES_CharacterAmbientLightColor;
uniform 	float _ES_CharacterMainLightRatio;
uniform 	float _ES_CharacterAmbientLightRatio;
uniform 	float _ES_CharacterColorTone;
uniform 	vec3 mhy_AvatarLightDir;
uniform lowp sampler2D _MainTex;
in mediump vec4 vs_COLOR0;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec4 u_xlat0;
bvec2 u_xlatb0;
vec3 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
bool u_xlatb1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump vec4 u_xlat16_3;
bool u_xlatb3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
bool u_xlatb8;
float u_xlat16;
mediump float u_xlat16_16;
bool u_xlatb16;
bool u_xlatb24;
mediump float u_xlat16_26;
bool u_xlatb27;
mediump float u_xlat16_28;
mediump float u_xlat16_29;
void main()
{
    u_xlatb0.xy = equal(vec4(_MainTexAlphaUse), vec4(1.0, 2.0, 0.0, 0.0)).xy;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy, -1.0);
    u_xlat16_2.x = u_xlat10_1.w + (-_MainTexAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(u_xlat16_2.x<0.0);
#else
    u_xlatb16 = u_xlat16_2.x<0.0;
#endif
    u_xlatb0.x = u_xlatb0.x && u_xlatb16;
    if((int(u_xlatb0.x) * int(0xffffffffu))!=0){discard;}
    SV_Target0.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0470588244;
    u_xlat0.xzw = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat0.xzw = u_xlat0.xzw * u_xlat3.xxx + mhy_AvatarLightDir.xyz;
    u_xlat3.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat0.xzw = u_xlat0.xzw * u_xlat3.xxx;
    u_xlat16_2.x = dot(vs_TEXCOORD1.xyz, u_xlat0.xzw);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.00100000005);
    u_xlat16_2.x = log2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * _Shininess;
    u_xlat16_2.x = exp2(u_xlat16_2.x);
    u_xlat16_2.xyz = u_xlat16_2.xxx * _SpecularColor.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(_SpecMulti);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(0.5, 0.5, 0.5);
    u_xlat16_26 = vs_COLOR0.x * 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorAO));
#else
    u_xlatb0.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorAO);
#endif
    u_xlat16_26 = (u_xlatb0.x) ? u_xlat16_26 : 0.5;
    u_xlat16 = u_xlat16_26 + vs_TEXCOORD1.w;
    u_xlat16 = u_xlat16 * 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(0.949999988<u_xlat16_26);
#else
    u_xlatb24 = 0.949999988<u_xlat16_26;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(u_xlat16_26<0.0500000007);
#else
    u_xlatb3 = u_xlat16_26<0.0500000007;
#endif
    u_xlat16_26 = (u_xlatb24) ? 1.0 : u_xlat16;
    u_xlat16_26 = (u_xlatb3) ? 0.0 : u_xlat16_26;
    u_xlat16_26 = (u_xlatb0.x) ? u_xlat16_26 : vs_TEXCOORD1.w;
    u_xlat16_4.x = (-u_xlat16_26) + _LightArea;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(u_xlat16_26<_LightArea);
#else
    u_xlatb0.x = u_xlat16_26<_LightArea;
#endif
    u_xlat16_26 = u_xlat16_4.x / _ShadowTransitionRange;
    u_xlat16_16 = u_xlat16_26 + 0.00999999978;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(u_xlat16_26>=1.0);
#else
    u_xlatb24 = u_xlat16_26>=1.0;
#endif
    u_xlat16_16 = log2(u_xlat16_16);
    u_xlat16 = u_xlat16_16 * _ShadowTransitionSoftness;
    u_xlat16 = exp2(u_xlat16);
    u_xlat16 = min(u_xlat16, 1.0);
    u_xlat16 = (u_xlatb24) ? 1.0 : u_xlat16;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition));
#else
    u_xlatb24 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition);
#endif
    u_xlat16 = (u_xlatb24) ? u_xlat16 : 1.0;
    u_xlat16 = u_xlatb0.x ? u_xlat16 : float(0.0);
    u_xlat16_3.xyz = vec3(_FirstShadowMultColor.xxyz.y + (-_CoolShadowMultColor.x), _FirstShadowMultColor.xxyz.z + (-_CoolShadowMultColor.y), float(_FirstShadowMultColor.z) + (-_CoolShadowMultColor.z));
    u_xlat3.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_3.xyz + _CoolShadowMultColor.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex));
#else
    u_xlatb27 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex);
#endif
    u_xlat16_4.xyz = (bool(u_xlatb27)) ? u_xlat3.xyz : vec3(_FirstShadowMultColor.x, _FirstShadowMultColor.y, _FirstShadowMultColor.z);
    u_xlat16_3.xyz = u_xlat16_4.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat3.xyz = vec3(u_xlat16) * u_xlat16_3.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_5.xyz = (bool(u_xlatb24)) ? u_xlat3.xyz : u_xlat16_4.xyz;
    u_xlat16_6.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_6.xyz;
    u_xlat1.xyz = u_xlat16_6.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
    u_xlat0.xzw = (u_xlatb0.x) ? u_xlat16_5.xyz : u_xlat1.xyz;
    u_xlat16_5.xyz = u_xlat16_2.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness)) + u_xlat0.xzw;
    u_xlat0.xzw = u_xlat16_2.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
    u_xlat16_2.xyz = u_xlat16_6.xyz * u_xlat16_4.xyz + u_xlat0.xzw;
    u_xlat16_4.xyz = u_xlat16_6.xyz * _EmissionColor_MHY.xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * vec3(vec3(_EmissionScaler, _EmissionScaler, _EmissionScaler)) + (-u_xlat16_5.xyz);
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(vec3(_EmissionScaler, _EmissionScaler, _EmissionScaler)) + (-u_xlat16_2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(0.00999999978<u_xlat10_1.w);
#else
    u_xlatb0.x = 0.00999999978<u_xlat10_1.w;
#endif
    u_xlatb0.x = u_xlatb0.x && u_xlatb0.y;
    u_xlat16_26 = (u_xlatb0.x) ? u_xlat10_1.w : 0.0;
    u_xlat16_6.xyz = vec3(u_xlat16_26) * u_xlat16_6.xyz + u_xlat16_5.xyz;
    u_xlat16_5.xyz = (u_xlatb0.x) ? u_xlat16_6.xyz : u_xlat16_5.xyz;
    u_xlat8.xyz = u_xlat16_5.xyz * vec3(vec3(_ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness));
    u_xlat1.xyz = _ES_CharacterMainLightColor.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat1.xyz = vec3(vec3(_ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio)) * u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat8.xyz = u_xlat8.xyz * u_xlat1.xyz;
    u_xlat16_6.xyz = u_xlat8.xyz * vec3(10.0, 10.0, 10.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.xyz = min(max(u_xlat16_6.xyz, 0.0), 1.0);
#else
    u_xlat16_6.xyz = clamp(u_xlat16_6.xyz, 0.0, 1.0);
#endif
    u_xlat1.xyz = _ES_CharacterAmbientLightColor.xyz * vec3(_ES_CharacterAmbientLightRatio);
    u_xlat8.xyz = u_xlat1.xyz * u_xlat16_6.xyz + u_xlat8.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn));
#else
    u_xlatb1 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn);
#endif
    u_xlat16_6.xyz = (bool(u_xlatb1)) ? u_xlat8.xyz : u_xlat16_5.xyz;
    u_xlat16_7.xyz = u_xlat16_5.xyz + (-u_xlat16_6.xyz);
    u_xlat16_7.xyz = vec3(u_xlat16_26) * u_xlat16_7.xyz + u_xlat16_6.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.00999999978<u_xlat16_26);
#else
    u_xlatb8 = 0.00999999978<u_xlat16_26;
#endif
    u_xlat16_1.xyz = (bool(u_xlatb8)) ? u_xlat16_7.xyz : u_xlat16_6.xyz;
    u_xlat16_28 = max(u_xlat16_1.z, u_xlat16_1.y);
    u_xlat16_3.w = max(u_xlat16_1.x, u_xlat16_28);
    u_xlat16_3.xyz = u_xlat16_1.xyz / u_xlat16_3.www;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(1.0<u_xlat16_3.w);
#else
    u_xlatb16 = 1.0<u_xlat16_3.w;
#endif
    u_xlat16_1.w = 1.0;
    u_xlat16_1 = (bool(u_xlatb16)) ? u_xlat16_3 : u_xlat16_1;
    u_xlat16_28 = min(u_xlat16_1.w, 1.10000002);
    u_xlat16_29 = u_xlat16_1.w + (-u_xlat16_28);
    SV_Target1.xyz = u_xlat16_1.xyz;
    u_xlat16_28 = u_xlat16_26 * u_xlat16_29 + u_xlat16_28;
    SV_Target1.w = u_xlat16_28 * 0.0500000007;
    u_xlat16_4.xyz = vec3(u_xlat16_26) * u_xlat16_4.xyz + u_xlat16_2.xyz;
    u_xlat16_2.xyz = (u_xlatb0.x) ? u_xlat16_4.xyz : u_xlat16_2.xyz;
    u_xlat16_4.xyz = (-u_xlat16_2.xyz) + u_xlat16_5.xyz;
    u_xlat16_4.xyz = vec3(u_xlat16_26) * u_xlat16_4.xyz + u_xlat16_2.xyz;
    u_xlat16_2.xyz = (bool(u_xlatb8)) ? u_xlat16_4.xyz : u_xlat16_2.xyz;
    SV_Target2.xy = u_xlat16_2.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_2.x = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb0.x) ? u_xlat16_2.x : u_xlat16_2.z;
    SV_Target2.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "METAL_MAT" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec3 mhy_AvatarLightDir;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump float u_xlat16_4;
float u_xlat16;
void main()
{
    u_xlat0.x = hlslcc_mtx4x4unity_ObjectToWorld[0].y;
    u_xlat0.y = hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat0.z = hlslcc_mtx4x4unity_ObjectToWorld[2].y;
    u_xlat1.xyw = (-_WorldSpaceCameraPos.xyz) + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat0.w = u_xlat1.y;
    u_xlat2.xyz = in_POSITION0.xyz;
    u_xlat2.w = 1.0;
    u_xlat0.x = dot(u_xlat0, u_xlat2);
    u_xlat0 = u_xlat0.xxxx * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat3.w = u_xlat1.x;
    u_xlat3.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;
    u_xlat3.y = hlslcc_mtx4x4unity_ObjectToWorld[1].x;
    u_xlat3.z = hlslcc_mtx4x4unity_ObjectToWorld[2].x;
    u_xlat3.x = dot(u_xlat3, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat3.xxxx + u_xlat0;
    u_xlat1.x = hlslcc_mtx4x4unity_ObjectToWorld[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_ObjectToWorld[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_ObjectToWorld[2].z;
    u_xlat1.x = dot(u_xlat1, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat1.xxxx + u_xlat0;
    u_xlat1.x = hlslcc_mtx4x4unity_ObjectToWorld[0].w;
    u_xlat1.y = hlslcc_mtx4x4unity_ObjectToWorld[1].w;
    u_xlat1.z = hlslcc_mtx4x4unity_ObjectToWorld[2].w;
    u_xlat1.w = hlslcc_mtx4x4unity_ObjectToWorld[3].w;
    u_xlat1.x = dot(u_xlat1, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[3] * u_xlat1.xxxx + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat16 = inversesqrt(u_xlat16);
    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
    u_xlat16_4 = dot(u_xlat1.xyz, mhy_AvatarLightDir.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    vs_TEXCOORD1.w = u_xlat16_4 * 0.497500002 + 0.5;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.zw = u_xlat0.zw;
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD3.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD5.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToCamera[4];
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	mediump vec4 _Color;
uniform 	float _MainTexAlphaUse;
uniform 	mediump float _MainTexAlphaCutoff;
uniform 	float _UseVertexColorAO;
uniform 	mediump float _LightArea;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	float _UseCoolShadowColorOrTex;
uniform 	mediump vec3 _CoolShadowMultColor;
uniform 	float _UseShadowTransition;
uniform 	float _ShadowTransitionRange;
uniform 	float _ShadowTransitionSoftness;
uniform 	mediump vec3 _SpecularColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump float _EmissionScaler;
uniform 	mediump vec3 _EmissionColor_MHY;
uniform 	mediump float _MTMapBrightness;
uniform 	float _MTMapTileScale;
uniform 	mediump vec3 _MTMapLightColor;
uniform 	mediump vec3 _MTMapDarkColor;
uniform 	mediump vec3 _MTShadowMultiColor;
uniform 	mediump float _MTShininess;
uniform 	mediump vec3 _MTSpecularColor;
uniform 	mediump float _MTSpecularScale;
uniform 	float _ES_CharacterAmbientLightOn;
uniform 	float _ES_CharacterAmbientBrightness;
uniform 	vec3 _ES_CharacterMainLightColor;
uniform 	float _ES_CharacterMainLightBrightness;
uniform 	vec3 _ES_CharacterAmbientLightColor;
uniform 	float _ES_CharacterMainLightRatio;
uniform 	float _ES_CharacterAmbientLightRatio;
uniform 	float _ES_CharacterColorTone;
uniform 	vec3 mhy_AvatarLightDir;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MTMap;
in mediump vec4 vs_COLOR0;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
bool u_xlatb1;
lowp vec3 u_xlat10_2;
bvec2 u_xlatb2;
mediump vec3 u_xlat16_3;
mediump float u_xlat16_4;
float u_xlat5;
bool u_xlatb5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
vec3 u_xlat11;
mediump vec3 u_xlat16_11;
vec3 u_xlat12;
mediump vec3 u_xlat16_12;
vec3 u_xlat13;
bool u_xlatb15;
float u_xlat16;
vec3 u_xlat19;
bool u_xlatb19;
mediump vec3 u_xlat16_20;
bool u_xlatb29;
float u_xlat33;
bool u_xlatb33;
float u_xlat42;
bool u_xlatb42;
mediump float u_xlat16_45;
float u_xlat47;
mediump float u_xlat16_47;
lowp float u_xlat10_47;
bool u_xlatb47;
mediump float u_xlat16_48;
void main()
{
    u_xlat0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat42 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat42 = inversesqrt(u_xlat42);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat42) + mhy_AvatarLightDir.xyz;
    u_xlat42 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat42 = inversesqrt(u_xlat42);
    u_xlat0.xyz = vec3(u_xlat42) * u_xlat0.xyz;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy, -1.0);
    u_xlatb2.xy = equal(vec4(_MainTexAlphaUse), vec4(1.0, 2.0, 0.0, 0.0)).xy;
    u_xlat16_3.x = u_xlat10_1.w + (-_MainTexAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb42 = !!(u_xlat16_3.x<0.0);
#else
    u_xlatb42 = u_xlat16_3.x<0.0;
#endif
    u_xlatb42 = u_xlatb2.x && u_xlatb42;
    if((int(u_xlatb42) * int(0xffffffffu))!=0){discard;}
    u_xlat10_2.xz = texture(_LightMapTex, vs_TEXCOORD0.xy, -1.0).xz;
    u_xlat16_3.xyz = u_xlat10_1.xyz * _Color.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb42 = !!(0.00999999978<u_xlat10_1.w);
#else
    u_xlatb42 = 0.00999999978<u_xlat10_1.w;
#endif
    u_xlatb42 = u_xlatb42 && u_xlatb2.y;
    u_xlat16_45 = (u_xlatb42) ? u_xlat10_1.w : 0.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorAO));
#else
    u_xlatb1 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorAO);
#endif
    u_xlat16_4 = vs_COLOR0.x * 0.5;
    u_xlat16_4 = (u_xlatb1) ? u_xlat16_4 : 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(u_xlat16_4<0.0500000007);
#else
    u_xlatb15 = u_xlat16_4<0.0500000007;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb29 = !!(0.949999988<u_xlat16_4);
#else
    u_xlatb29 = 0.949999988<u_xlat16_4;
#endif
    u_xlat16 = u_xlat16_4 + vs_TEXCOORD1.w;
    u_xlat5 = u_xlat16 * 0.5;
    u_xlat16_6.x = (u_xlatb29) ? 1.0 : u_xlat5;
    u_xlat16_6.x = (u_xlatb15) ? 0.0 : u_xlat16_6.x;
    u_xlat16_6.x = (u_xlatb1) ? u_xlat16_6.x : vs_TEXCOORD1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlatb5 = !!(u_xlat16_6.x<_LightArea);
#else
    u_xlatb5 = u_xlat16_6.x<_LightArea;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb19 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition));
#else
    u_xlatb19 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition);
#endif
    u_xlat16_6.x = (-u_xlat16_6.x) + _LightArea;
    u_xlat16_6.x = u_xlat16_6.x / _ShadowTransitionRange;
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(u_xlat16_6.x>=1.0);
#else
    u_xlatb33 = u_xlat16_6.x>=1.0;
#endif
    u_xlat16_47 = u_xlat16_6.x + 0.00999999978;
    u_xlat16_47 = log2(u_xlat16_47);
    u_xlat47 = u_xlat16_47 * _ShadowTransitionSoftness;
    u_xlat47 = exp2(u_xlat47);
    u_xlat47 = min(u_xlat47, 1.0);
    u_xlat33 = (u_xlatb33) ? 1.0 : u_xlat47;
    u_xlat33 = (u_xlatb19) ? u_xlat33 : 1.0;
    u_xlat33 = u_xlatb5 ? u_xlat33 : float(0.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb47 = !!(0.899999976<u_xlat10_2.x);
#else
    u_xlatb47 = 0.899999976<u_xlat10_2.x;
#endif
    if(u_xlatb47){
        u_xlat7.xy = vs_TEXCOORD1.yy * hlslcc_mtx4x4unity_WorldToCamera[1].xy;
        u_xlat7.xy = hlslcc_mtx4x4unity_WorldToCamera[0].xy * vs_TEXCOORD1.xx + u_xlat7.xy;
        u_xlat7.yz = hlslcc_mtx4x4unity_WorldToCamera[2].xy * vs_TEXCOORD1.zz + u_xlat7.xy;
        u_xlat7.x = u_xlat7.y * _MTMapTileScale;
        u_xlat16_6.xy = u_xlat7.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
        u_xlat10_47 = texture(_MTMap, u_xlat16_6.xy).x;
        u_xlat16_6.x = u_xlat10_47 * _MTMapBrightness;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
        u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
        u_xlat16_20.xyz = _MTMapLightColor.xyz + (-_MTMapDarkColor.xyz);
        u_xlat16_6.xyz = u_xlat16_6.xxx * u_xlat16_20.xyz + _MTMapDarkColor.xyz;
        u_xlat16_6.xyz = u_xlat16_3.xyz * u_xlat16_6.xyz;
        u_xlat16_48 = dot(vs_TEXCOORD1.xyz, u_xlat0.xyz);
        u_xlat16_48 = max(u_xlat16_48, 0.00100000005);
        u_xlat16_48 = log2(u_xlat16_48);
        u_xlat16_48 = u_xlat16_48 * _MTShininess;
        u_xlat16_48 = exp2(u_xlat16_48);
        u_xlat16_48 = u_xlat16_48 * _MTSpecularScale;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_48 = min(max(u_xlat16_48, 0.0), 1.0);
#else
        u_xlat16_48 = clamp(u_xlat16_48, 0.0, 1.0);
#endif
        u_xlat16_8.xyz = vec3(u_xlat16_48) * _MTSpecularColor.xyz;
        u_xlat16_8.xyz = u_xlat10_2.zzz * u_xlat16_8.xyz;
        u_xlat16_9.xyz = u_xlat16_6.xyz * _MTShadowMultiColor.xyz;
        u_xlat16_7.xyz = _MTShadowMultiColor.xyz + vec3(-1.0, -1.0, -1.0);
        u_xlat7.xyz = vec3(u_xlat33) * u_xlat16_7.xyz + vec3(1.0, 1.0, 1.0);
        u_xlat16_10.xyz = (bool(u_xlatb19)) ? u_xlat7.xyz : _MTShadowMultiColor.xyz;
        u_xlat16_10.xyz = u_xlat16_6.xyz * u_xlat16_10.xyz;
        u_xlat7.xyz = u_xlat16_6.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
        u_xlat7.xyz = (bool(u_xlatb5)) ? u_xlat16_10.xyz : u_xlat7.xyz;
        u_xlat11.xyz = u_xlat16_8.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
        u_xlat16_7.xyz = u_xlat7.xyz;
        u_xlat16_11.xyz = u_xlat11.xyz;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb47 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex));
#else
        u_xlatb47 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex);
#endif
        u_xlat16_12.xyz = vec3(_FirstShadowMultColor.xxyz.y + (-_CoolShadowMultColor.x), _FirstShadowMultColor.xxyz.z + (-_CoolShadowMultColor.y), float(_FirstShadowMultColor.z) + (-_CoolShadowMultColor.z));
        u_xlat12.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_12.xyz + _CoolShadowMultColor.xyz;
        u_xlat16_6.xyz = (bool(u_xlatb47)) ? u_xlat12.xyz : vec3(_FirstShadowMultColor.x, _FirstShadowMultColor.y, _FirstShadowMultColor.z);
        u_xlat16_9.xyz = u_xlat16_3.xyz * u_xlat16_6.xyz;
        u_xlat16_12.xyz = u_xlat16_6.xyz + vec3(-1.0, -1.0, -1.0);
        u_xlat12.xyz = vec3(u_xlat33) * u_xlat16_12.xyz + vec3(1.0, 1.0, 1.0);
        u_xlat16_6.xyz = (bool(u_xlatb19)) ? u_xlat12.xyz : u_xlat16_6.xyz;
        u_xlat16_6.xyz = u_xlat16_3.xyz * u_xlat16_6.xyz;
        u_xlat19.xyz = u_xlat16_3.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
        u_xlat7.xyz = (bool(u_xlatb5)) ? u_xlat16_6.xyz : u_xlat19.xyz;
        u_xlat16_6.x = dot(vs_TEXCOORD1.xyz, u_xlat0.xyz);
        u_xlat16_6.x = max(u_xlat16_6.x, 0.00100000005);
        u_xlat16_6.x = log2(u_xlat16_6.x);
        u_xlat16_6.x = u_xlat16_6.x * _Shininess;
        u_xlat16_6.x = exp2(u_xlat16_6.x);
        u_xlat16_6.xyz = u_xlat16_6.xxx * _SpecularColor.xyz;
        u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(_SpecMulti);
        u_xlat16_6.xyz = u_xlat10_2.xxx * u_xlat16_6.xyz;
        u_xlat11.xyz = u_xlat16_6.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
        u_xlat16_7.xyz = u_xlat7.xyz;
        u_xlat16_11.xyz = u_xlat11.xyz;
    //ENDIF
    }
    u_xlat16_3.xyz = u_xlat16_3.xyz * _EmissionColor_MHY.xyz;
    u_xlat16_6.xyz = u_xlat16_7.xyz + u_xlat16_11.xyz;
    u_xlat16_8.xyz = u_xlat16_9.xyz + u_xlat16_11.xyz;
    u_xlat16_9.xyz = u_xlat16_3.xyz * vec3(vec3(_EmissionScaler, _EmissionScaler, _EmissionScaler)) + (-u_xlat16_6.xyz);
    u_xlat16_9.xyz = vec3(u_xlat16_45) * u_xlat16_9.xyz + u_xlat16_6.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(vec3(_EmissionScaler, _EmissionScaler, _EmissionScaler)) + (-u_xlat16_8.xyz);
    u_xlat16_3.xyz = vec3(u_xlat16_45) * u_xlat16_3.xyz + u_xlat16_8.xyz;
    u_xlat16_6.xyz = (bool(u_xlatb42)) ? u_xlat16_9.xyz : u_xlat16_6.xyz;
    u_xlat16_3.xyz = (bool(u_xlatb42)) ? u_xlat16_3.xyz : u_xlat16_8.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb5 = !!(0.00999999978<u_xlat16_45);
#else
    u_xlatb5 = 0.00999999978<u_xlat16_45;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb19 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn));
#else
    u_xlatb19 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn);
#endif
    u_xlat12.xyz = u_xlat16_6.xyz * vec3(vec3(_ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness));
    u_xlat13.xyz = _ES_CharacterMainLightColor.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat13.xyz = vec3(vec3(_ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio)) * u_xlat13.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat12.xyz = u_xlat12.xyz * u_xlat13.xyz;
    u_xlat13.xyz = _ES_CharacterAmbientLightColor.xyz * vec3(_ES_CharacterAmbientLightRatio);
    u_xlat16_8.xyz = u_xlat12.xyz * vec3(10.0, 10.0, 10.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_8.xyz = min(max(u_xlat16_8.xyz, 0.0), 1.0);
#else
    u_xlat16_8.xyz = clamp(u_xlat16_8.xyz, 0.0, 1.0);
#endif
    u_xlat12.xyz = u_xlat13.xyz * u_xlat16_8.xyz + u_xlat12.xyz;
    u_xlat16_8.xyz = (bool(u_xlatb19)) ? u_xlat12.xyz : u_xlat16_6.xyz;
    u_xlat16_9.xyz = u_xlat16_6.xyz + (-u_xlat16_8.xyz);
    u_xlat16_9.xyz = vec3(u_xlat16_45) * u_xlat16_9.xyz + u_xlat16_8.xyz;
    u_xlat16_6.xyz = (-u_xlat16_3.xyz) + u_xlat16_6.xyz;
    u_xlat16_6.xyz = vec3(u_xlat16_45) * u_xlat16_6.xyz + u_xlat16_3.xyz;
    u_xlat16_0.xyz = (bool(u_xlatb5)) ? u_xlat16_9.xyz : u_xlat16_8.xyz;
    u_xlat16_3.xyz = (bool(u_xlatb5)) ? u_xlat16_6.xyz : u_xlat16_3.xyz;
    u_xlat16_6.x = max(u_xlat16_0.z, u_xlat16_0.y);
    u_xlat16_1.w = max(u_xlat16_0.x, u_xlat16_6.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb5 = !!(1.0<u_xlat16_1.w);
#else
    u_xlatb5 = 1.0<u_xlat16_1.w;
#endif
    u_xlat16_1.xyz = u_xlat16_0.xyz / u_xlat16_1.www;
    u_xlat16_0.w = 1.0;
    u_xlat16_0 = (bool(u_xlatb5)) ? u_xlat16_1 : u_xlat16_0;
    u_xlat16_6.x = min(u_xlat16_0.w, 1.10000002);
    u_xlat16_20.x = u_xlat16_0.w + (-u_xlat16_6.x);
    u_xlat16_45 = u_xlat16_45 * u_xlat16_20.x + u_xlat16_6.x;
    SV_Target1.w = u_xlat16_45 * 0.0500000007;
    SV_Target0.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb5 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb5 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_45 = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb5) ? u_xlat16_45 : u_xlat16_3.z;
    SV_Target0.w = 0.0470588244;
    SV_Target1.xyz = u_xlat16_0.xyz;
    SV_Target2.xy = u_xlat16_3.xy;
    SV_Target2.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "MSAA_INTERPOLATION" "METAL_MAT" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec3 mhy_AvatarLightDir;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump float u_xlat16_4;
float u_xlat16;
void main()
{
    u_xlat0.x = hlslcc_mtx4x4unity_ObjectToWorld[0].y;
    u_xlat0.y = hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat0.z = hlslcc_mtx4x4unity_ObjectToWorld[2].y;
    u_xlat1.xyw = (-_WorldSpaceCameraPos.xyz) + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat0.w = u_xlat1.y;
    u_xlat2.xyz = in_POSITION0.xyz;
    u_xlat2.w = 1.0;
    u_xlat0.x = dot(u_xlat0, u_xlat2);
    u_xlat0 = u_xlat0.xxxx * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat3.w = u_xlat1.x;
    u_xlat3.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;
    u_xlat3.y = hlslcc_mtx4x4unity_ObjectToWorld[1].x;
    u_xlat3.z = hlslcc_mtx4x4unity_ObjectToWorld[2].x;
    u_xlat3.x = dot(u_xlat3, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat3.xxxx + u_xlat0;
    u_xlat1.x = hlslcc_mtx4x4unity_ObjectToWorld[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_ObjectToWorld[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_ObjectToWorld[2].z;
    u_xlat1.x = dot(u_xlat1, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat1.xxxx + u_xlat0;
    u_xlat1.x = hlslcc_mtx4x4unity_ObjectToWorld[0].w;
    u_xlat1.y = hlslcc_mtx4x4unity_ObjectToWorld[1].w;
    u_xlat1.z = hlslcc_mtx4x4unity_ObjectToWorld[2].w;
    u_xlat1.w = hlslcc_mtx4x4unity_ObjectToWorld[3].w;
    u_xlat1.x = dot(u_xlat1, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[3] * u_xlat1.xxxx + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat16 = inversesqrt(u_xlat16);
    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
    u_xlat16_4 = dot(u_xlat1.xyz, mhy_AvatarLightDir.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    vs_TEXCOORD1.w = u_xlat16_4 * 0.497500002 + 0.5;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.zw = u_xlat0.zw;
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD3.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD5.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToCamera[4];
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	mediump vec4 _Color;
uniform 	float _MainTexAlphaUse;
uniform 	mediump float _MainTexAlphaCutoff;
uniform 	float _UseVertexColorAO;
uniform 	mediump float _LightArea;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	float _UseCoolShadowColorOrTex;
uniform 	mediump vec3 _CoolShadowMultColor;
uniform 	float _UseShadowTransition;
uniform 	float _ShadowTransitionRange;
uniform 	float _ShadowTransitionSoftness;
uniform 	mediump vec3 _SpecularColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump float _EmissionScaler;
uniform 	mediump vec3 _EmissionColor_MHY;
uniform 	mediump float _MTMapBrightness;
uniform 	float _MTMapTileScale;
uniform 	mediump vec3 _MTMapLightColor;
uniform 	mediump vec3 _MTMapDarkColor;
uniform 	mediump vec3 _MTShadowMultiColor;
uniform 	mediump float _MTShininess;
uniform 	mediump vec3 _MTSpecularColor;
uniform 	mediump float _MTSpecularScale;
uniform 	float _ES_CharacterAmbientLightOn;
uniform 	float _ES_CharacterAmbientBrightness;
uniform 	vec3 _ES_CharacterMainLightColor;
uniform 	float _ES_CharacterMainLightBrightness;
uniform 	vec3 _ES_CharacterAmbientLightColor;
uniform 	float _ES_CharacterMainLightRatio;
uniform 	float _ES_CharacterAmbientLightRatio;
uniform 	float _ES_CharacterColorTone;
uniform 	vec3 mhy_AvatarLightDir;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MTMap;
in mediump vec4 vs_COLOR0;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec2 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec2 u_xlat10_0;
vec3 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_2;
bool u_xlatb2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
vec3 u_xlat9;
mediump vec3 u_xlat16_9;
vec3 u_xlat10;
mediump vec3 u_xlat16_10;
vec3 u_xlat11;
vec3 u_xlat14;
bool u_xlatb14;
mediump vec3 u_xlat16_16;
vec2 u_xlat24;
bvec2 u_xlatb24;
float u_xlat26;
bool u_xlatb26;
bool u_xlatb37;
float u_xlat38;
mediump float u_xlat16_38;
lowp float u_xlat10_38;
bool u_xlatb38;
mediump float u_xlat16_39;
mediump float u_xlat16_40;
void main()
{
    u_xlat0.xy = dFdx(vs_TEXCOORD0.xy);
    u_xlat24.xy = dFdy(vs_TEXCOORD0.xy);
    u_xlat0.xy = u_xlat24.xy + u_xlat0.xy;
    u_xlat24.xy = (-u_xlat0.xy) * vec2(0.25, 0.25) + vs_TEXCOORD0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25) + vs_TEXCOORD0.xy;
    u_xlat0.xy = (int(gl_SampleID) != 0) ? u_xlat24.xy : u_xlat0.xy;
    u_xlat1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat24.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat24.x = inversesqrt(u_xlat24.x);
    u_xlat1.xyz = u_xlat1.xyz * u_xlat24.xxx + mhy_AvatarLightDir.xyz;
    u_xlat24.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat24.x = inversesqrt(u_xlat24.x);
    u_xlat1.xyz = u_xlat24.xxx * u_xlat1.xyz;
    u_xlat10_2 = textureLod(_MainTex, u_xlat0.xy, 0.0);
    u_xlatb24.xy = equal(vec4(_MainTexAlphaUse), vec4(1.0, 2.0, 1.0, 2.0)).xy;
    u_xlat16_3.x = u_xlat10_2.w + (-_MainTexAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb37 = !!(u_xlat16_3.x<0.0);
#else
    u_xlatb37 = u_xlat16_3.x<0.0;
#endif
    u_xlatb24.x = u_xlatb24.x && u_xlatb37;
    if((int(u_xlatb24.x) * int(0xffffffffu))!=0){discard;}
    u_xlat10_0.xy = textureLod(_LightMapTex, u_xlat0.xy, 0.0).xz;
    u_xlat16_3.xyz = u_xlat10_2.xyz * _Color.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24.x = !!(0.00999999978<u_xlat10_2.w);
#else
    u_xlatb24.x = 0.00999999978<u_xlat10_2.w;
#endif
    u_xlatb24.x = u_xlatb24.x && u_xlatb24.y;
    u_xlat16_39 = (u_xlatb24.x) ? u_xlat10_2.w : 0.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorAO));
#else
    u_xlatb2 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorAO);
#endif
    u_xlat16_4.x = vs_COLOR0.x * 0.5;
    u_xlat16_4.x = (u_xlatb2) ? u_xlat16_4.x : 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(u_xlat16_4.x<0.0500000007);
#else
    u_xlatb14 = u_xlat16_4.x<0.0500000007;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb26 = !!(0.949999988<u_xlat16_4.x);
#else
    u_xlatb26 = 0.949999988<u_xlat16_4.x;
#endif
    u_xlat38 = u_xlat16_4.x + vs_TEXCOORD1.w;
    u_xlat38 = u_xlat38 * 0.5;
    u_xlat16_4.x = (u_xlatb26) ? 1.0 : u_xlat38;
    u_xlat16_4.x = (u_xlatb14) ? 0.0 : u_xlat16_4.x;
    u_xlat16_4.x = (u_xlatb2) ? u_xlat16_4.x : vs_TEXCOORD1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat16_4.x<_LightArea);
#else
    u_xlatb2 = u_xlat16_4.x<_LightArea;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition));
#else
    u_xlatb14 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition);
#endif
    u_xlat16_4.x = (-u_xlat16_4.x) + _LightArea;
    u_xlat16_4.x = u_xlat16_4.x / _ShadowTransitionRange;
#ifdef UNITY_ADRENO_ES3
    u_xlatb26 = !!(u_xlat16_4.x>=1.0);
#else
    u_xlatb26 = u_xlat16_4.x>=1.0;
#endif
    u_xlat16_38 = u_xlat16_4.x + 0.00999999978;
    u_xlat16_38 = log2(u_xlat16_38);
    u_xlat38 = u_xlat16_38 * _ShadowTransitionSoftness;
    u_xlat38 = exp2(u_xlat38);
    u_xlat38 = min(u_xlat38, 1.0);
    u_xlat26 = (u_xlatb26) ? 1.0 : u_xlat38;
    u_xlat26 = (u_xlatb14) ? u_xlat26 : 1.0;
    u_xlat26 = u_xlatb2 ? u_xlat26 : float(0.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb38 = !!(0.899999976<u_xlat10_0.x);
#else
    u_xlatb38 = 0.899999976<u_xlat10_0.x;
#endif
    if(u_xlatb38){
        u_xlat5.xy = vs_TEXCOORD1.yy * hlslcc_mtx4x4unity_WorldToCamera[1].xy;
        u_xlat5.xy = hlslcc_mtx4x4unity_WorldToCamera[0].xy * vs_TEXCOORD1.xx + u_xlat5.xy;
        u_xlat5.yz = hlslcc_mtx4x4unity_WorldToCamera[2].xy * vs_TEXCOORD1.zz + u_xlat5.xy;
        u_xlat5.x = u_xlat5.y * _MTMapTileScale;
        u_xlat16_4.xy = u_xlat5.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
        u_xlat10_38 = texture(_MTMap, u_xlat16_4.xy, -1.0).x;
        u_xlat16_4.x = u_xlat10_38 * _MTMapBrightness;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
        u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
        u_xlat16_16.xyz = _MTMapLightColor.xyz + (-_MTMapDarkColor.xyz);
        u_xlat16_4.xyz = u_xlat16_4.xxx * u_xlat16_16.xyz + _MTMapDarkColor.xyz;
        u_xlat16_4.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;
        u_xlat16_40 = dot(vs_TEXCOORD1.xyz, u_xlat1.xyz);
        u_xlat16_40 = max(u_xlat16_40, 0.00100000005);
        u_xlat16_40 = log2(u_xlat16_40);
        u_xlat16_40 = u_xlat16_40 * _MTShininess;
        u_xlat16_40 = exp2(u_xlat16_40);
        u_xlat16_40 = u_xlat16_40 * _MTSpecularScale;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_40 = min(max(u_xlat16_40, 0.0), 1.0);
#else
        u_xlat16_40 = clamp(u_xlat16_40, 0.0, 1.0);
#endif
        u_xlat16_6.xyz = vec3(u_xlat16_40) * _MTSpecularColor.xyz;
        u_xlat16_6.xyz = u_xlat10_0.yyy * u_xlat16_6.xyz;
        u_xlat16_7.xyz = u_xlat16_4.xyz * _MTShadowMultiColor.xyz;
        u_xlat16_5.xyz = _MTShadowMultiColor.xyz + vec3(-1.0, -1.0, -1.0);
        u_xlat5.xyz = vec3(u_xlat26) * u_xlat16_5.xyz + vec3(1.0, 1.0, 1.0);
        u_xlat16_8.xyz = (bool(u_xlatb14)) ? u_xlat5.xyz : _MTShadowMultiColor.xyz;
        u_xlat16_8.xyz = u_xlat16_4.xyz * u_xlat16_8.xyz;
        u_xlat5.xyz = u_xlat16_4.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
        u_xlat5.xyz = (bool(u_xlatb2)) ? u_xlat16_8.xyz : u_xlat5.xyz;
        u_xlat9.xyz = u_xlat16_6.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
        u_xlat16_5.xyz = u_xlat5.xyz;
        u_xlat16_9.xyz = u_xlat9.xyz;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb38 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex));
#else
        u_xlatb38 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex);
#endif
        u_xlat16_10.xyz = vec3(_FirstShadowMultColor.xxyz.y + (-_CoolShadowMultColor.x), _FirstShadowMultColor.xxyz.z + (-_CoolShadowMultColor.y), float(_FirstShadowMultColor.z) + (-_CoolShadowMultColor.z));
        u_xlat10.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_10.xyz + _CoolShadowMultColor.xyz;
        u_xlat16_4.xyz = (bool(u_xlatb38)) ? u_xlat10.xyz : vec3(_FirstShadowMultColor.x, _FirstShadowMultColor.y, _FirstShadowMultColor.z);
        u_xlat16_7.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;
        u_xlat16_10.xyz = u_xlat16_4.xyz + vec3(-1.0, -1.0, -1.0);
        u_xlat10.xyz = vec3(u_xlat26) * u_xlat16_10.xyz + vec3(1.0, 1.0, 1.0);
        u_xlat16_4.xyz = (bool(u_xlatb14)) ? u_xlat10.xyz : u_xlat16_4.xyz;
        u_xlat16_4.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;
        u_xlat14.xyz = u_xlat16_3.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
        u_xlat5.xyz = (bool(u_xlatb2)) ? u_xlat16_4.xyz : u_xlat14.xyz;
        u_xlat16_4.x = dot(vs_TEXCOORD1.xyz, u_xlat1.xyz);
        u_xlat16_4.x = max(u_xlat16_4.x, 0.00100000005);
        u_xlat16_4.x = log2(u_xlat16_4.x);
        u_xlat16_4.x = u_xlat16_4.x * _Shininess;
        u_xlat16_4.x = exp2(u_xlat16_4.x);
        u_xlat16_4.xyz = u_xlat16_4.xxx * _SpecularColor.xyz;
        u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(_SpecMulti);
        u_xlat16_4.xyz = u_xlat10_0.xxx * u_xlat16_4.xyz;
        u_xlat9.xyz = u_xlat16_4.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
        u_xlat16_5.xyz = u_xlat5.xyz;
        u_xlat16_9.xyz = u_xlat9.xyz;
    //ENDIF
    }
    u_xlat16_4.xyz = u_xlat16_3.xyz * _EmissionColor_MHY.xyz;
    u_xlat16_6.xyz = u_xlat16_5.xyz + u_xlat16_9.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz + u_xlat16_9.xyz;
    u_xlat16_8.xyz = u_xlat16_4.xyz * vec3(vec3(_EmissionScaler, _EmissionScaler, _EmissionScaler)) + (-u_xlat16_6.xyz);
    u_xlat16_8.xyz = vec3(u_xlat16_39) * u_xlat16_8.xyz + u_xlat16_6.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(vec3(_EmissionScaler, _EmissionScaler, _EmissionScaler)) + (-u_xlat16_7.xyz);
    u_xlat16_4.xyz = vec3(u_xlat16_39) * u_xlat16_4.xyz + u_xlat16_7.xyz;
    u_xlat16_6.xyz = (u_xlatb24.x) ? u_xlat16_8.xyz : u_xlat16_6.xyz;
    u_xlat16_4.xyz = (u_xlatb24.x) ? u_xlat16_4.xyz : u_xlat16_7.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(0.00999999978<u_xlat16_39);
#else
    u_xlatb2 = 0.00999999978<u_xlat16_39;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn));
#else
    u_xlatb14 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn);
#endif
    u_xlat10.xyz = u_xlat16_6.xyz * vec3(vec3(_ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness));
    u_xlat11.xyz = _ES_CharacterMainLightColor.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat11.xyz = vec3(vec3(_ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio)) * u_xlat11.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat10.xyz = u_xlat10.xyz * u_xlat11.xyz;
    u_xlat11.xyz = _ES_CharacterAmbientLightColor.xyz * vec3(_ES_CharacterAmbientLightRatio);
    u_xlat16_7.xyz = u_xlat10.xyz * vec3(10.0, 10.0, 10.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.xyz = min(max(u_xlat16_7.xyz, 0.0), 1.0);
#else
    u_xlat16_7.xyz = clamp(u_xlat16_7.xyz, 0.0, 1.0);
#endif
    u_xlat10.xyz = u_xlat11.xyz * u_xlat16_7.xyz + u_xlat10.xyz;
    u_xlat16_7.xyz = (bool(u_xlatb14)) ? u_xlat10.xyz : u_xlat16_6.xyz;
    u_xlat16_8.xyz = u_xlat16_6.xyz + (-u_xlat16_7.xyz);
    u_xlat16_8.xyz = vec3(u_xlat16_39) * u_xlat16_8.xyz + u_xlat16_7.xyz;
    u_xlat16_6.xyz = (-u_xlat16_4.xyz) + u_xlat16_6.xyz;
    u_xlat16_6.xyz = vec3(u_xlat16_39) * u_xlat16_6.xyz + u_xlat16_4.xyz;
    u_xlat16_0.xyz = (bool(u_xlatb2)) ? u_xlat16_8.xyz : u_xlat16_7.xyz;
    u_xlat16_4.xyz = (bool(u_xlatb2)) ? u_xlat16_6.xyz : u_xlat16_4.xyz;
    u_xlat16_40 = max(u_xlat16_0.z, u_xlat16_0.y);
    u_xlat16_1.w = max(u_xlat16_0.x, u_xlat16_40);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(1.0<u_xlat16_1.w);
#else
    u_xlatb2 = 1.0<u_xlat16_1.w;
#endif
    u_xlat16_1.xyz = u_xlat16_0.xyz / u_xlat16_1.www;
    u_xlat16_0.w = 1.0;
    u_xlat16_0 = (bool(u_xlatb2)) ? u_xlat16_1 : u_xlat16_0;
    u_xlat16_40 = min(u_xlat16_0.w, 1.10000002);
    u_xlat16_6.x = u_xlat16_0.w + (-u_xlat16_40);
    u_xlat16_40 = u_xlat16_39 * u_xlat16_6.x + u_xlat16_40;
    SV_Target1.w = u_xlat16_40 * 0.0500000007;
    SV_Target0.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb2 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_40 = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb2) ? u_xlat16_40 : u_xlat16_4.z;
    SV_Target0.w = 0.0470588244;
    SV_Target1.xyz = u_xlat16_0.xyz;
    SV_Target2.xy = u_xlat16_4.xy;
    SV_Target2.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "LINE_INTERPOLATION" "METAL_MAT" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec3 mhy_AvatarLightDir;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump float u_xlat16_4;
float u_xlat16;
void main()
{
    u_xlat0.x = hlslcc_mtx4x4unity_ObjectToWorld[0].y;
    u_xlat0.y = hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat0.z = hlslcc_mtx4x4unity_ObjectToWorld[2].y;
    u_xlat1.xyw = (-_WorldSpaceCameraPos.xyz) + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat0.w = u_xlat1.y;
    u_xlat2.xyz = in_POSITION0.xyz;
    u_xlat2.w = 1.0;
    u_xlat0.x = dot(u_xlat0, u_xlat2);
    u_xlat0 = u_xlat0.xxxx * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat3.w = u_xlat1.x;
    u_xlat3.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;
    u_xlat3.y = hlslcc_mtx4x4unity_ObjectToWorld[1].x;
    u_xlat3.z = hlslcc_mtx4x4unity_ObjectToWorld[2].x;
    u_xlat3.x = dot(u_xlat3, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat3.xxxx + u_xlat0;
    u_xlat1.x = hlslcc_mtx4x4unity_ObjectToWorld[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_ObjectToWorld[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_ObjectToWorld[2].z;
    u_xlat1.x = dot(u_xlat1, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat1.xxxx + u_xlat0;
    u_xlat1.x = hlslcc_mtx4x4unity_ObjectToWorld[0].w;
    u_xlat1.y = hlslcc_mtx4x4unity_ObjectToWorld[1].w;
    u_xlat1.z = hlslcc_mtx4x4unity_ObjectToWorld[2].w;
    u_xlat1.w = hlslcc_mtx4x4unity_ObjectToWorld[3].w;
    u_xlat1.x = dot(u_xlat1, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[3] * u_xlat1.xxxx + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat16 = inversesqrt(u_xlat16);
    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
    u_xlat16_4 = dot(u_xlat1.xyz, mhy_AvatarLightDir.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    vs_TEXCOORD1.w = u_xlat16_4 * 0.497500002 + 0.5;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.zw = u_xlat0.zw;
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD3.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD5.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToCamera[4];
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	mediump vec4 _Color;
uniform 	float _MainTexAlphaUse;
uniform 	mediump float _MainTexAlphaCutoff;
uniform 	float _UseVertexColorAO;
uniform 	mediump float _LightArea;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	float _UseCoolShadowColorOrTex;
uniform 	mediump vec3 _CoolShadowMultColor;
uniform 	float _UseShadowTransition;
uniform 	float _ShadowTransitionRange;
uniform 	float _ShadowTransitionSoftness;
uniform 	mediump vec3 _SpecularColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump float _EmissionScaler;
uniform 	mediump vec3 _EmissionColor_MHY;
uniform 	mediump float _MTMapBrightness;
uniform 	float _MTMapTileScale;
uniform 	mediump vec3 _MTMapLightColor;
uniform 	mediump vec3 _MTMapDarkColor;
uniform 	mediump vec3 _MTShadowMultiColor;
uniform 	mediump float _MTShininess;
uniform 	mediump vec3 _MTSpecularColor;
uniform 	mediump float _MTSpecularScale;
uniform 	float _ES_CharacterAmbientLightOn;
uniform 	float _ES_CharacterAmbientBrightness;
uniform 	vec3 _ES_CharacterMainLightColor;
uniform 	float _ES_CharacterMainLightBrightness;
uniform 	vec3 _ES_CharacterAmbientLightColor;
uniform 	float _ES_CharacterMainLightRatio;
uniform 	float _ES_CharacterAmbientLightRatio;
uniform 	float _ES_CharacterColorTone;
uniform 	vec3 mhy_AvatarLightDir;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MTMap;
in mediump vec4 vs_COLOR0;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
bool u_xlatb1;
lowp vec3 u_xlat10_2;
bvec2 u_xlatb2;
mediump vec3 u_xlat16_3;
mediump float u_xlat16_4;
float u_xlat5;
bool u_xlatb5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
vec3 u_xlat11;
mediump vec3 u_xlat16_11;
vec3 u_xlat12;
mediump vec3 u_xlat16_12;
vec3 u_xlat13;
bool u_xlatb15;
float u_xlat16;
vec3 u_xlat19;
bool u_xlatb19;
mediump vec3 u_xlat16_20;
bool u_xlatb29;
float u_xlat33;
bool u_xlatb33;
float u_xlat42;
bool u_xlatb42;
mediump float u_xlat16_45;
float u_xlat47;
mediump float u_xlat16_47;
lowp float u_xlat10_47;
bool u_xlatb47;
mediump float u_xlat16_48;
void main()
{
    u_xlat0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat42 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat42 = inversesqrt(u_xlat42);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat42) + mhy_AvatarLightDir.xyz;
    u_xlat42 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat42 = inversesqrt(u_xlat42);
    u_xlat0.xyz = vec3(u_xlat42) * u_xlat0.xyz;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy, -1.0);
    u_xlatb2.xy = equal(vec4(_MainTexAlphaUse), vec4(1.0, 2.0, 0.0, 0.0)).xy;
    u_xlat16_3.x = u_xlat10_1.w + (-_MainTexAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb42 = !!(u_xlat16_3.x<0.0);
#else
    u_xlatb42 = u_xlat16_3.x<0.0;
#endif
    u_xlatb42 = u_xlatb2.x && u_xlatb42;
    if((int(u_xlatb42) * int(0xffffffffu))!=0){discard;}
    u_xlat10_2.xz = texture(_LightMapTex, vs_TEXCOORD0.xy, -1.0).xz;
    u_xlat16_3.xyz = u_xlat10_1.xyz * _Color.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb42 = !!(0.00999999978<u_xlat10_1.w);
#else
    u_xlatb42 = 0.00999999978<u_xlat10_1.w;
#endif
    u_xlatb42 = u_xlatb42 && u_xlatb2.y;
    u_xlat16_45 = (u_xlatb42) ? u_xlat10_1.w : 0.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorAO));
#else
    u_xlatb1 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorAO);
#endif
    u_xlat16_4 = vs_COLOR0.x * 0.5;
    u_xlat16_4 = (u_xlatb1) ? u_xlat16_4 : 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(u_xlat16_4<0.0500000007);
#else
    u_xlatb15 = u_xlat16_4<0.0500000007;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb29 = !!(0.949999988<u_xlat16_4);
#else
    u_xlatb29 = 0.949999988<u_xlat16_4;
#endif
    u_xlat16 = u_xlat16_4 + vs_TEXCOORD1.w;
    u_xlat5 = u_xlat16 * 0.5;
    u_xlat16_6.x = (u_xlatb29) ? 1.0 : u_xlat5;
    u_xlat16_6.x = (u_xlatb15) ? 0.0 : u_xlat16_6.x;
    u_xlat16_6.x = (u_xlatb1) ? u_xlat16_6.x : vs_TEXCOORD1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlatb5 = !!(u_xlat16_6.x<_LightArea);
#else
    u_xlatb5 = u_xlat16_6.x<_LightArea;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb19 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition));
#else
    u_xlatb19 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition);
#endif
    u_xlat16_6.x = (-u_xlat16_6.x) + _LightArea;
    u_xlat16_6.x = u_xlat16_6.x / _ShadowTransitionRange;
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(u_xlat16_6.x>=1.0);
#else
    u_xlatb33 = u_xlat16_6.x>=1.0;
#endif
    u_xlat16_47 = u_xlat16_6.x + 0.00999999978;
    u_xlat16_47 = log2(u_xlat16_47);
    u_xlat47 = u_xlat16_47 * _ShadowTransitionSoftness;
    u_xlat47 = exp2(u_xlat47);
    u_xlat47 = min(u_xlat47, 1.0);
    u_xlat33 = (u_xlatb33) ? 1.0 : u_xlat47;
    u_xlat33 = (u_xlatb19) ? u_xlat33 : 1.0;
    u_xlat33 = u_xlatb5 ? u_xlat33 : float(0.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb47 = !!(0.899999976<u_xlat10_2.x);
#else
    u_xlatb47 = 0.899999976<u_xlat10_2.x;
#endif
    if(u_xlatb47){
        u_xlat7.xy = vs_TEXCOORD1.yy * hlslcc_mtx4x4unity_WorldToCamera[1].xy;
        u_xlat7.xy = hlslcc_mtx4x4unity_WorldToCamera[0].xy * vs_TEXCOORD1.xx + u_xlat7.xy;
        u_xlat7.yz = hlslcc_mtx4x4unity_WorldToCamera[2].xy * vs_TEXCOORD1.zz + u_xlat7.xy;
        u_xlat7.x = u_xlat7.y * _MTMapTileScale;
        u_xlat16_6.xy = u_xlat7.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
        u_xlat10_47 = texture(_MTMap, u_xlat16_6.xy, -1.0).x;
        u_xlat16_6.x = u_xlat10_47 * _MTMapBrightness;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
        u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
        u_xlat16_20.xyz = _MTMapLightColor.xyz + (-_MTMapDarkColor.xyz);
        u_xlat16_6.xyz = u_xlat16_6.xxx * u_xlat16_20.xyz + _MTMapDarkColor.xyz;
        u_xlat16_6.xyz = u_xlat16_3.xyz * u_xlat16_6.xyz;
        u_xlat16_48 = dot(vs_TEXCOORD1.xyz, u_xlat0.xyz);
        u_xlat16_48 = max(u_xlat16_48, 0.00100000005);
        u_xlat16_48 = log2(u_xlat16_48);
        u_xlat16_48 = u_xlat16_48 * _MTShininess;
        u_xlat16_48 = exp2(u_xlat16_48);
        u_xlat16_48 = u_xlat16_48 * _MTSpecularScale;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_48 = min(max(u_xlat16_48, 0.0), 1.0);
#else
        u_xlat16_48 = clamp(u_xlat16_48, 0.0, 1.0);
#endif
        u_xlat16_8.xyz = vec3(u_xlat16_48) * _MTSpecularColor.xyz;
        u_xlat16_8.xyz = u_xlat10_2.zzz * u_xlat16_8.xyz;
        u_xlat16_9.xyz = u_xlat16_6.xyz * _MTShadowMultiColor.xyz;
        u_xlat16_7.xyz = _MTShadowMultiColor.xyz + vec3(-1.0, -1.0, -1.0);
        u_xlat7.xyz = vec3(u_xlat33) * u_xlat16_7.xyz + vec3(1.0, 1.0, 1.0);
        u_xlat16_10.xyz = (bool(u_xlatb19)) ? u_xlat7.xyz : _MTShadowMultiColor.xyz;
        u_xlat16_10.xyz = u_xlat16_6.xyz * u_xlat16_10.xyz;
        u_xlat7.xyz = u_xlat16_6.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
        u_xlat7.xyz = (bool(u_xlatb5)) ? u_xlat16_10.xyz : u_xlat7.xyz;
        u_xlat11.xyz = u_xlat16_8.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
        u_xlat16_7.xyz = u_xlat7.xyz;
        u_xlat16_11.xyz = u_xlat11.xyz;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb47 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex));
#else
        u_xlatb47 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex);
#endif
        u_xlat16_12.xyz = vec3(_FirstShadowMultColor.xxyz.y + (-_CoolShadowMultColor.x), _FirstShadowMultColor.xxyz.z + (-_CoolShadowMultColor.y), float(_FirstShadowMultColor.z) + (-_CoolShadowMultColor.z));
        u_xlat12.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_12.xyz + _CoolShadowMultColor.xyz;
        u_xlat16_6.xyz = (bool(u_xlatb47)) ? u_xlat12.xyz : vec3(_FirstShadowMultColor.x, _FirstShadowMultColor.y, _FirstShadowMultColor.z);
        u_xlat16_9.xyz = u_xlat16_3.xyz * u_xlat16_6.xyz;
        u_xlat16_12.xyz = u_xlat16_6.xyz + vec3(-1.0, -1.0, -1.0);
        u_xlat12.xyz = vec3(u_xlat33) * u_xlat16_12.xyz + vec3(1.0, 1.0, 1.0);
        u_xlat16_6.xyz = (bool(u_xlatb19)) ? u_xlat12.xyz : u_xlat16_6.xyz;
        u_xlat16_6.xyz = u_xlat16_3.xyz * u_xlat16_6.xyz;
        u_xlat19.xyz = u_xlat16_3.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
        u_xlat7.xyz = (bool(u_xlatb5)) ? u_xlat16_6.xyz : u_xlat19.xyz;
        u_xlat16_6.x = dot(vs_TEXCOORD1.xyz, u_xlat0.xyz);
        u_xlat16_6.x = max(u_xlat16_6.x, 0.00100000005);
        u_xlat16_6.x = log2(u_xlat16_6.x);
        u_xlat16_6.x = u_xlat16_6.x * _Shininess;
        u_xlat16_6.x = exp2(u_xlat16_6.x);
        u_xlat16_6.xyz = u_xlat16_6.xxx * _SpecularColor.xyz;
        u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(_SpecMulti);
        u_xlat16_6.xyz = u_xlat10_2.xxx * u_xlat16_6.xyz;
        u_xlat11.xyz = u_xlat16_6.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
        u_xlat16_7.xyz = u_xlat7.xyz;
        u_xlat16_11.xyz = u_xlat11.xyz;
    //ENDIF
    }
    u_xlat16_3.xyz = u_xlat16_3.xyz * _EmissionColor_MHY.xyz;
    u_xlat16_6.xyz = u_xlat16_7.xyz + u_xlat16_11.xyz;
    u_xlat16_8.xyz = u_xlat16_9.xyz + u_xlat16_11.xyz;
    u_xlat16_9.xyz = u_xlat16_3.xyz * vec3(vec3(_EmissionScaler, _EmissionScaler, _EmissionScaler)) + (-u_xlat16_6.xyz);
    u_xlat16_9.xyz = vec3(u_xlat16_45) * u_xlat16_9.xyz + u_xlat16_6.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(vec3(_EmissionScaler, _EmissionScaler, _EmissionScaler)) + (-u_xlat16_8.xyz);
    u_xlat16_3.xyz = vec3(u_xlat16_45) * u_xlat16_3.xyz + u_xlat16_8.xyz;
    u_xlat16_6.xyz = (bool(u_xlatb42)) ? u_xlat16_9.xyz : u_xlat16_6.xyz;
    u_xlat16_3.xyz = (bool(u_xlatb42)) ? u_xlat16_3.xyz : u_xlat16_8.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb5 = !!(0.00999999978<u_xlat16_45);
#else
    u_xlatb5 = 0.00999999978<u_xlat16_45;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb19 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn));
#else
    u_xlatb19 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn);
#endif
    u_xlat12.xyz = u_xlat16_6.xyz * vec3(vec3(_ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness));
    u_xlat13.xyz = _ES_CharacterMainLightColor.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat13.xyz = vec3(vec3(_ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio)) * u_xlat13.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat12.xyz = u_xlat12.xyz * u_xlat13.xyz;
    u_xlat13.xyz = _ES_CharacterAmbientLightColor.xyz * vec3(_ES_CharacterAmbientLightRatio);
    u_xlat16_8.xyz = u_xlat12.xyz * vec3(10.0, 10.0, 10.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_8.xyz = min(max(u_xlat16_8.xyz, 0.0), 1.0);
#else
    u_xlat16_8.xyz = clamp(u_xlat16_8.xyz, 0.0, 1.0);
#endif
    u_xlat12.xyz = u_xlat13.xyz * u_xlat16_8.xyz + u_xlat12.xyz;
    u_xlat16_8.xyz = (bool(u_xlatb19)) ? u_xlat12.xyz : u_xlat16_6.xyz;
    u_xlat16_9.xyz = u_xlat16_6.xyz + (-u_xlat16_8.xyz);
    u_xlat16_9.xyz = vec3(u_xlat16_45) * u_xlat16_9.xyz + u_xlat16_8.xyz;
    u_xlat16_6.xyz = (-u_xlat16_3.xyz) + u_xlat16_6.xyz;
    u_xlat16_6.xyz = vec3(u_xlat16_45) * u_xlat16_6.xyz + u_xlat16_3.xyz;
    u_xlat16_0.xyz = (bool(u_xlatb5)) ? u_xlat16_9.xyz : u_xlat16_8.xyz;
    u_xlat16_3.xyz = (bool(u_xlatb5)) ? u_xlat16_6.xyz : u_xlat16_3.xyz;
    u_xlat16_6.x = max(u_xlat16_0.z, u_xlat16_0.y);
    u_xlat16_1.w = max(u_xlat16_0.x, u_xlat16_6.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb5 = !!(1.0<u_xlat16_1.w);
#else
    u_xlatb5 = 1.0<u_xlat16_1.w;
#endif
    u_xlat16_1.xyz = u_xlat16_0.xyz / u_xlat16_1.www;
    u_xlat16_0.w = 1.0;
    u_xlat16_0 = (bool(u_xlatb5)) ? u_xlat16_1 : u_xlat16_0;
    u_xlat16_6.x = min(u_xlat16_0.w, 1.10000002);
    u_xlat16_20.x = u_xlat16_0.w + (-u_xlat16_6.x);
    u_xlat16_45 = u_xlat16_45 * u_xlat16_20.x + u_xlat16_6.x;
    SV_Target1.w = u_xlat16_45 * 0.0500000007;
    SV_Target0.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb5 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb5 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_45 = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb5) ? u_xlat16_45 : u_xlat16_3.z;
    SV_Target0.w = 0.0470588244;
    SV_Target1.xyz = u_xlat16_0.xyz;
    SV_Target2.xy = u_xlat16_3.xy;
    SV_Target2.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "BACK_FACE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec3 mhy_AvatarLightDir;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump float u_xlat16_4;
float u_xlat16;
void main()
{
    u_xlat0.x = hlslcc_mtx4x4unity_ObjectToWorld[0].y;
    u_xlat0.y = hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat0.z = hlslcc_mtx4x4unity_ObjectToWorld[2].y;
    u_xlat1.xyw = (-_WorldSpaceCameraPos.xyz) + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat0.w = u_xlat1.y;
    u_xlat2.xyz = in_POSITION0.xyz;
    u_xlat2.w = 1.0;
    u_xlat0.x = dot(u_xlat0, u_xlat2);
    u_xlat0 = u_xlat0.xxxx * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat3.w = u_xlat1.x;
    u_xlat3.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;
    u_xlat3.y = hlslcc_mtx4x4unity_ObjectToWorld[1].x;
    u_xlat3.z = hlslcc_mtx4x4unity_ObjectToWorld[2].x;
    u_xlat3.x = dot(u_xlat3, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat3.xxxx + u_xlat0;
    u_xlat1.x = hlslcc_mtx4x4unity_ObjectToWorld[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_ObjectToWorld[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_ObjectToWorld[2].z;
    u_xlat1.x = dot(u_xlat1, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat1.xxxx + u_xlat0;
    u_xlat1.x = hlslcc_mtx4x4unity_ObjectToWorld[0].w;
    u_xlat1.y = hlslcc_mtx4x4unity_ObjectToWorld[1].w;
    u_xlat1.z = hlslcc_mtx4x4unity_ObjectToWorld[2].w;
    u_xlat1.w = hlslcc_mtx4x4unity_ObjectToWorld[3].w;
    u_xlat1.x = dot(u_xlat1, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[3] * u_xlat1.xxxx + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat16 = inversesqrt(u_xlat16);
    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
    u_xlat16_4 = dot(u_xlat1.xyz, mhy_AvatarLightDir.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    vs_TEXCOORD1.w = u_xlat16_4 * 0.497500002 + 0.5;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.zw = u_xlat0.zw;
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD3.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD5.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	mediump vec4 _Color;
uniform 	float _MainTexAlphaUse;
uniform 	mediump float _MainTexAlphaCutoff;
uniform 	float _UseVertexColorAO;
uniform 	mediump float _LightArea;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	float _UseCoolShadowColorOrTex;
uniform 	mediump vec3 _CoolShadowMultColor;
uniform 	float _UseShadowTransition;
uniform 	float _ShadowTransitionRange;
uniform 	float _ShadowTransitionSoftness;
uniform 	mediump vec3 _SpecularColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump float _EmissionScaler;
uniform 	mediump vec3 _EmissionColor_MHY;
uniform 	float _ES_CharacterAmbientLightOn;
uniform 	float _ES_CharacterAmbientBrightness;
uniform 	vec3 _ES_CharacterMainLightColor;
uniform 	float _ES_CharacterMainLightBrightness;
uniform 	vec3 _ES_CharacterAmbientLightColor;
uniform 	float _ES_CharacterMainLightRatio;
uniform 	float _ES_CharacterAmbientLightRatio;
uniform 	float _ES_CharacterColorTone;
uniform 	vec3 mhy_AvatarLightDir;
uniform lowp sampler2D _MainTex;
in mediump vec4 vs_COLOR0;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec4 u_xlat0;
bvec2 u_xlatb0;
vec3 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
bool u_xlatb1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump vec4 u_xlat16_3;
bool u_xlatb3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
bool u_xlatb8;
float u_xlat16;
mediump float u_xlat16_16;
bool u_xlatb16;
bool u_xlatb24;
mediump float u_xlat16_26;
bool u_xlatb27;
mediump float u_xlat16_28;
mediump float u_xlat16_29;
void main()
{
    u_xlatb0.xy = equal(vec4(_MainTexAlphaUse), vec4(1.0, 2.0, 0.0, 0.0)).xy;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy, -1.0);
    u_xlat16_2.x = u_xlat10_1.w + (-_MainTexAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(u_xlat16_2.x<0.0);
#else
    u_xlatb16 = u_xlat16_2.x<0.0;
#endif
    u_xlatb0.x = u_xlatb0.x && u_xlatb16;
    if((int(u_xlatb0.x) * int(0xffffffffu))!=0){discard;}
    SV_Target0.w = 0.0470588244;
    u_xlat16_2.xyz = (uint((gl_FrontFacing ? 0xffffffffu : uint(0))) != uint(0u)) ? vs_TEXCOORD1.xyz : (-vs_TEXCOORD1.xyz);
    SV_Target0.xyz = u_xlat16_2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    u_xlat0.xzw = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat0.xzw = u_xlat0.xzw * u_xlat3.xxx + mhy_AvatarLightDir.xyz;
    u_xlat3.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat0.xzw = u_xlat0.xzw * u_xlat3.xxx;
    u_xlat16_2.x = dot(u_xlat16_2.xyz, u_xlat0.xzw);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.00100000005);
    u_xlat16_2.x = log2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * _Shininess;
    u_xlat16_2.x = exp2(u_xlat16_2.x);
    u_xlat16_2.xyz = u_xlat16_2.xxx * _SpecularColor.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(_SpecMulti);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(0.5, 0.5, 0.5);
    u_xlat16_26 = vs_COLOR0.x * 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorAO));
#else
    u_xlatb0.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorAO);
#endif
    u_xlat16_26 = (u_xlatb0.x) ? u_xlat16_26 : 0.5;
    u_xlat16 = u_xlat16_26 + vs_TEXCOORD1.w;
    u_xlat16 = u_xlat16 * 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(0.949999988<u_xlat16_26);
#else
    u_xlatb24 = 0.949999988<u_xlat16_26;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(u_xlat16_26<0.0500000007);
#else
    u_xlatb3 = u_xlat16_26<0.0500000007;
#endif
    u_xlat16_26 = (u_xlatb24) ? 1.0 : u_xlat16;
    u_xlat16_26 = (u_xlatb3) ? 0.0 : u_xlat16_26;
    u_xlat16_26 = (u_xlatb0.x) ? u_xlat16_26 : vs_TEXCOORD1.w;
    u_xlat16_4.x = (-u_xlat16_26) + _LightArea;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(u_xlat16_26<_LightArea);
#else
    u_xlatb0.x = u_xlat16_26<_LightArea;
#endif
    u_xlat16_26 = u_xlat16_4.x / _ShadowTransitionRange;
    u_xlat16_16 = u_xlat16_26 + 0.00999999978;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(u_xlat16_26>=1.0);
#else
    u_xlatb24 = u_xlat16_26>=1.0;
#endif
    u_xlat16_16 = log2(u_xlat16_16);
    u_xlat16 = u_xlat16_16 * _ShadowTransitionSoftness;
    u_xlat16 = exp2(u_xlat16);
    u_xlat16 = min(u_xlat16, 1.0);
    u_xlat16 = (u_xlatb24) ? 1.0 : u_xlat16;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition));
#else
    u_xlatb24 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition);
#endif
    u_xlat16 = (u_xlatb24) ? u_xlat16 : 1.0;
    u_xlat16 = u_xlatb0.x ? u_xlat16 : float(0.0);
    u_xlat16_3.xyz = vec3(_FirstShadowMultColor.xxyz.y + (-_CoolShadowMultColor.x), _FirstShadowMultColor.xxyz.z + (-_CoolShadowMultColor.y), float(_FirstShadowMultColor.z) + (-_CoolShadowMultColor.z));
    u_xlat3.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_3.xyz + _CoolShadowMultColor.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex));
#else
    u_xlatb27 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex);
#endif
    u_xlat16_4.xyz = (bool(u_xlatb27)) ? u_xlat3.xyz : vec3(_FirstShadowMultColor.x, _FirstShadowMultColor.y, _FirstShadowMultColor.z);
    u_xlat16_3.xyz = u_xlat16_4.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat3.xyz = vec3(u_xlat16) * u_xlat16_3.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_5.xyz = (bool(u_xlatb24)) ? u_xlat3.xyz : u_xlat16_4.xyz;
    u_xlat16_6.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_6.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(int((gl_FrontFacing ? 0xffffffffu : uint(0)))==0);
#else
    u_xlatb16 = int((gl_FrontFacing ? 0xffffffffu : uint(0)))==0;
#endif
    u_xlatb0.x = u_xlatb0.x || u_xlatb16;
    u_xlat1.xyz = u_xlat16_6.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
    u_xlat0.xzw = (u_xlatb0.x) ? u_xlat16_5.xyz : u_xlat1.xyz;
    u_xlat16_5.xyz = u_xlat16_2.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness)) + u_xlat0.xzw;
    u_xlat0.xzw = u_xlat16_2.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
    u_xlat16_2.xyz = u_xlat16_6.xyz * u_xlat16_4.xyz + u_xlat0.xzw;
    u_xlat16_4.xyz = u_xlat16_6.xyz * _EmissionColor_MHY.xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * vec3(vec3(_EmissionScaler, _EmissionScaler, _EmissionScaler)) + (-u_xlat16_5.xyz);
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(vec3(_EmissionScaler, _EmissionScaler, _EmissionScaler)) + (-u_xlat16_2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(0.00999999978<u_xlat10_1.w);
#else
    u_xlatb0.x = 0.00999999978<u_xlat10_1.w;
#endif
    u_xlatb0.x = u_xlatb0.x && u_xlatb0.y;
    u_xlat16_26 = (u_xlatb0.x) ? u_xlat10_1.w : 0.0;
    u_xlat16_6.xyz = vec3(u_xlat16_26) * u_xlat16_6.xyz + u_xlat16_5.xyz;
    u_xlat16_5.xyz = (u_xlatb0.x) ? u_xlat16_6.xyz : u_xlat16_5.xyz;
    u_xlat8.xyz = u_xlat16_5.xyz * vec3(vec3(_ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness));
    u_xlat1.xyz = _ES_CharacterMainLightColor.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat1.xyz = vec3(vec3(_ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio)) * u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat8.xyz = u_xlat8.xyz * u_xlat1.xyz;
    u_xlat16_6.xyz = u_xlat8.xyz * vec3(10.0, 10.0, 10.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.xyz = min(max(u_xlat16_6.xyz, 0.0), 1.0);
#else
    u_xlat16_6.xyz = clamp(u_xlat16_6.xyz, 0.0, 1.0);
#endif
    u_xlat1.xyz = _ES_CharacterAmbientLightColor.xyz * vec3(_ES_CharacterAmbientLightRatio);
    u_xlat8.xyz = u_xlat1.xyz * u_xlat16_6.xyz + u_xlat8.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn));
#else
    u_xlatb1 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn);
#endif
    u_xlat16_6.xyz = (bool(u_xlatb1)) ? u_xlat8.xyz : u_xlat16_5.xyz;
    u_xlat16_7.xyz = u_xlat16_5.xyz + (-u_xlat16_6.xyz);
    u_xlat16_7.xyz = vec3(u_xlat16_26) * u_xlat16_7.xyz + u_xlat16_6.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.00999999978<u_xlat16_26);
#else
    u_xlatb8 = 0.00999999978<u_xlat16_26;
#endif
    u_xlat16_1.xyz = (bool(u_xlatb8)) ? u_xlat16_7.xyz : u_xlat16_6.xyz;
    u_xlat16_28 = max(u_xlat16_1.z, u_xlat16_1.y);
    u_xlat16_3.w = max(u_xlat16_1.x, u_xlat16_28);
    u_xlat16_3.xyz = u_xlat16_1.xyz / u_xlat16_3.www;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(1.0<u_xlat16_3.w);
#else
    u_xlatb16 = 1.0<u_xlat16_3.w;
#endif
    u_xlat16_1.w = 1.0;
    u_xlat16_1 = (bool(u_xlatb16)) ? u_xlat16_3 : u_xlat16_1;
    u_xlat16_28 = min(u_xlat16_1.w, 1.10000002);
    u_xlat16_29 = u_xlat16_1.w + (-u_xlat16_28);
    SV_Target1.xyz = u_xlat16_1.xyz;
    u_xlat16_28 = u_xlat16_26 * u_xlat16_29 + u_xlat16_28;
    SV_Target1.w = u_xlat16_28 * 0.0500000007;
    u_xlat16_4.xyz = vec3(u_xlat16_26) * u_xlat16_4.xyz + u_xlat16_2.xyz;
    u_xlat16_2.xyz = (u_xlatb0.x) ? u_xlat16_4.xyz : u_xlat16_2.xyz;
    u_xlat16_4.xyz = (-u_xlat16_2.xyz) + u_xlat16_5.xyz;
    u_xlat16_4.xyz = vec3(u_xlat16_26) * u_xlat16_4.xyz + u_xlat16_2.xyz;
    u_xlat16_2.xyz = (bool(u_xlatb8)) ? u_xlat16_4.xyz : u_xlat16_2.xyz;
    SV_Target2.xy = u_xlat16_2.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_2.x = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb0.x) ? u_xlat16_2.x : u_xlat16_2.z;
    SV_Target2.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "MSAA_INTERPOLATION" "BACK_FACE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec3 mhy_AvatarLightDir;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump float u_xlat16_4;
float u_xlat16;
void main()
{
    u_xlat0.x = hlslcc_mtx4x4unity_ObjectToWorld[0].y;
    u_xlat0.y = hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat0.z = hlslcc_mtx4x4unity_ObjectToWorld[2].y;
    u_xlat1.xyw = (-_WorldSpaceCameraPos.xyz) + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat0.w = u_xlat1.y;
    u_xlat2.xyz = in_POSITION0.xyz;
    u_xlat2.w = 1.0;
    u_xlat0.x = dot(u_xlat0, u_xlat2);
    u_xlat0 = u_xlat0.xxxx * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat3.w = u_xlat1.x;
    u_xlat3.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;
    u_xlat3.y = hlslcc_mtx4x4unity_ObjectToWorld[1].x;
    u_xlat3.z = hlslcc_mtx4x4unity_ObjectToWorld[2].x;
    u_xlat3.x = dot(u_xlat3, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat3.xxxx + u_xlat0;
    u_xlat1.x = hlslcc_mtx4x4unity_ObjectToWorld[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_ObjectToWorld[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_ObjectToWorld[2].z;
    u_xlat1.x = dot(u_xlat1, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat1.xxxx + u_xlat0;
    u_xlat1.x = hlslcc_mtx4x4unity_ObjectToWorld[0].w;
    u_xlat1.y = hlslcc_mtx4x4unity_ObjectToWorld[1].w;
    u_xlat1.z = hlslcc_mtx4x4unity_ObjectToWorld[2].w;
    u_xlat1.w = hlslcc_mtx4x4unity_ObjectToWorld[3].w;
    u_xlat1.x = dot(u_xlat1, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[3] * u_xlat1.xxxx + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat16 = inversesqrt(u_xlat16);
    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
    u_xlat16_4 = dot(u_xlat1.xyz, mhy_AvatarLightDir.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    vs_TEXCOORD1.w = u_xlat16_4 * 0.497500002 + 0.5;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.zw = u_xlat0.zw;
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD3.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD5.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	mediump vec4 _Color;
uniform 	float _MainTexAlphaUse;
uniform 	mediump float _MainTexAlphaCutoff;
uniform 	float _UseVertexColorAO;
uniform 	mediump float _LightArea;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	float _UseCoolShadowColorOrTex;
uniform 	mediump vec3 _CoolShadowMultColor;
uniform 	float _UseShadowTransition;
uniform 	float _ShadowTransitionRange;
uniform 	float _ShadowTransitionSoftness;
uniform 	mediump vec3 _SpecularColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump float _EmissionScaler;
uniform 	mediump vec3 _EmissionColor_MHY;
uniform 	float _ES_CharacterAmbientLightOn;
uniform 	float _ES_CharacterAmbientBrightness;
uniform 	vec3 _ES_CharacterMainLightColor;
uniform 	float _ES_CharacterMainLightBrightness;
uniform 	vec3 _ES_CharacterAmbientLightColor;
uniform 	float _ES_CharacterMainLightRatio;
uniform 	float _ES_CharacterAmbientLightRatio;
uniform 	float _ES_CharacterColorTone;
uniform 	vec3 mhy_AvatarLightDir;
uniform lowp sampler2D _MainTex;
in mediump vec4 vs_COLOR0;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
bool u_xlatb2;
vec3 u_xlat3;
mediump vec4 u_xlat16_3;
bool u_xlatb3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
bool u_xlatb8;
float u_xlat10;
mediump float u_xlat16_10;
bvec2 u_xlatb10;
vec2 u_xlat16;
bool u_xlatb16;
mediump float u_xlat16_25;
bool u_xlatb26;
bool u_xlatb27;
mediump float u_xlat16_28;
mediump float u_xlat16_29;
void main()
{
    u_xlat0.xy = dFdx(vs_TEXCOORD0.xy);
    u_xlat16.xy = dFdy(vs_TEXCOORD0.xy);
    u_xlat0.xy = u_xlat16.xy + u_xlat0.xy;
    u_xlat16.xy = (-u_xlat0.xy) * vec2(0.25, 0.25) + vs_TEXCOORD0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25) + vs_TEXCOORD0.xy;
    u_xlat0.xy = (int(gl_SampleID) != 0) ? u_xlat16.xy : u_xlat0.xy;
    u_xlat10_0 = textureLod(_MainTex, u_xlat0.xy, 0.0);
    u_xlat16_1.x = u_xlat10_0.w + (-_MainTexAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat16_1.x<0.0);
#else
    u_xlatb2 = u_xlat16_1.x<0.0;
#endif
    u_xlatb10.xy = equal(vec4(_MainTexAlphaUse), vec4(1.0, 2.0, 0.0, 0.0)).xy;
    u_xlatb2 = u_xlatb10.x && u_xlatb2;
    if((int(u_xlatb2) * int(0xffffffffu))!=0){discard;}
    SV_Target0.w = 0.0470588244;
    u_xlat16_1.xyz = (uint((gl_FrontFacing ? 0xffffffffu : uint(0))) != uint(0u)) ? vs_TEXCOORD1.xyz : (-vs_TEXCOORD1.xyz);
    SV_Target0.xyz = u_xlat16_1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    u_xlat2.xyw = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3.x = dot(u_xlat2.xyw, u_xlat2.xyw);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat2.xyw = u_xlat2.xyw * u_xlat3.xxx + mhy_AvatarLightDir.xyz;
    u_xlat3.x = dot(u_xlat2.xyw, u_xlat2.xyw);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat2.xyw = u_xlat2.xyw * u_xlat3.xxx;
    u_xlat16_1.x = dot(u_xlat16_1.xyz, u_xlat2.xyw);
    u_xlat16_1.x = max(u_xlat16_1.x, 0.00100000005);
    u_xlat16_1.x = log2(u_xlat16_1.x);
    u_xlat16_1.x = u_xlat16_1.x * _Shininess;
    u_xlat16_1.x = exp2(u_xlat16_1.x);
    u_xlat16_1.xyz = u_xlat16_1.xxx * _SpecularColor.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(_SpecMulti);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(0.5, 0.5, 0.5);
    u_xlat16_25 = vs_COLOR0.x * 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorAO));
#else
    u_xlatb2 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorAO);
#endif
    u_xlat16_25 = (u_xlatb2) ? u_xlat16_25 : 0.5;
    u_xlat10 = u_xlat16_25 + vs_TEXCOORD1.w;
    u_xlat10 = u_xlat10 * 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb26 = !!(0.949999988<u_xlat16_25);
#else
    u_xlatb26 = 0.949999988<u_xlat16_25;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(u_xlat16_25<0.0500000007);
#else
    u_xlatb3 = u_xlat16_25<0.0500000007;
#endif
    u_xlat16_25 = (u_xlatb26) ? 1.0 : u_xlat10;
    u_xlat16_25 = (u_xlatb3) ? 0.0 : u_xlat16_25;
    u_xlat16_25 = (u_xlatb2) ? u_xlat16_25 : vs_TEXCOORD1.w;
    u_xlat16_4.x = (-u_xlat16_25) + _LightArea;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat16_25<_LightArea);
#else
    u_xlatb2 = u_xlat16_25<_LightArea;
#endif
    u_xlat16_25 = u_xlat16_4.x / _ShadowTransitionRange;
    u_xlat16_10 = u_xlat16_25 + 0.00999999978;
#ifdef UNITY_ADRENO_ES3
    u_xlatb26 = !!(u_xlat16_25>=1.0);
#else
    u_xlatb26 = u_xlat16_25>=1.0;
#endif
    u_xlat16_10 = log2(u_xlat16_10);
    u_xlat10 = u_xlat16_10 * _ShadowTransitionSoftness;
    u_xlat10 = exp2(u_xlat10);
    u_xlat10 = min(u_xlat10, 1.0);
    u_xlat10 = (u_xlatb26) ? 1.0 : u_xlat10;
#ifdef UNITY_ADRENO_ES3
    u_xlatb26 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition));
#else
    u_xlatb26 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition);
#endif
    u_xlat10 = (u_xlatb26) ? u_xlat10 : 1.0;
    u_xlat10 = u_xlatb2 ? u_xlat10 : float(0.0);
    u_xlat16_3.xyz = vec3(_FirstShadowMultColor.xxyz.y + (-_CoolShadowMultColor.x), _FirstShadowMultColor.xxyz.z + (-_CoolShadowMultColor.y), float(_FirstShadowMultColor.z) + (-_CoolShadowMultColor.z));
    u_xlat3.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_3.xyz + _CoolShadowMultColor.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex));
#else
    u_xlatb27 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex);
#endif
    u_xlat16_4.xyz = (bool(u_xlatb27)) ? u_xlat3.xyz : vec3(_FirstShadowMultColor.x, _FirstShadowMultColor.y, _FirstShadowMultColor.z);
    u_xlat16_3.xyz = u_xlat16_4.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat3.xyz = vec3(u_xlat10) * u_xlat16_3.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_5.xyz = (bool(u_xlatb26)) ? u_xlat3.xyz : u_xlat16_4.xyz;
    u_xlat16_6.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_6.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(int((gl_FrontFacing ? 0xffffffffu : uint(0)))==0);
#else
    u_xlatb0 = int((gl_FrontFacing ? 0xffffffffu : uint(0)))==0;
#endif
    u_xlatb0 = u_xlatb2 || u_xlatb0;
    u_xlat2.xyw = u_xlat16_6.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
    u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat16_5.xyz : u_xlat2.xyw;
    u_xlat16_5.xyz = u_xlat16_1.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness)) + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
    u_xlat16_1.xyz = u_xlat16_6.xyz * u_xlat16_4.xyz + u_xlat0.xyz;
    u_xlat16_4.xyz = u_xlat16_6.xyz * _EmissionColor_MHY.xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * vec3(vec3(_EmissionScaler, _EmissionScaler, _EmissionScaler)) + (-u_xlat16_5.xyz);
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(vec3(_EmissionScaler, _EmissionScaler, _EmissionScaler)) + (-u_xlat16_1.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.00999999978<u_xlat10_0.w);
#else
    u_xlatb0 = 0.00999999978<u_xlat10_0.w;
#endif
    u_xlatb0 = u_xlatb0 && u_xlatb10.y;
    u_xlat16_25 = (u_xlatb0) ? u_xlat10_0.w : 0.0;
    u_xlat16_6.xyz = vec3(u_xlat16_25) * u_xlat16_6.xyz + u_xlat16_5.xyz;
    u_xlat16_5.xyz = (bool(u_xlatb0)) ? u_xlat16_6.xyz : u_xlat16_5.xyz;
    u_xlat8.xyz = u_xlat16_5.xyz * vec3(vec3(_ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness));
    u_xlat2.xyz = _ES_CharacterMainLightColor.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat2.xyz = vec3(vec3(_ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio)) * u_xlat2.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat8.xyz = u_xlat8.xyz * u_xlat2.xyz;
    u_xlat16_6.xyz = u_xlat8.xyz * vec3(10.0, 10.0, 10.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.xyz = min(max(u_xlat16_6.xyz, 0.0), 1.0);
#else
    u_xlat16_6.xyz = clamp(u_xlat16_6.xyz, 0.0, 1.0);
#endif
    u_xlat2.xyz = _ES_CharacterAmbientLightColor.xyz * vec3(_ES_CharacterAmbientLightRatio);
    u_xlat8.xyz = u_xlat2.xyz * u_xlat16_6.xyz + u_xlat8.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn));
#else
    u_xlatb2 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn);
#endif
    u_xlat16_6.xyz = (bool(u_xlatb2)) ? u_xlat8.xyz : u_xlat16_5.xyz;
    u_xlat16_7.xyz = u_xlat16_5.xyz + (-u_xlat16_6.xyz);
    u_xlat16_7.xyz = vec3(u_xlat16_25) * u_xlat16_7.xyz + u_xlat16_6.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.00999999978<u_xlat16_25);
#else
    u_xlatb8 = 0.00999999978<u_xlat16_25;
#endif
    u_xlat16_2.xyz = (bool(u_xlatb8)) ? u_xlat16_7.xyz : u_xlat16_6.xyz;
    u_xlat16_28 = max(u_xlat16_2.z, u_xlat16_2.y);
    u_xlat16_3.w = max(u_xlat16_2.x, u_xlat16_28);
    u_xlat16_3.xyz = u_xlat16_2.xyz / u_xlat16_3.www;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(1.0<u_xlat16_3.w);
#else
    u_xlatb16 = 1.0<u_xlat16_3.w;
#endif
    u_xlat16_2.w = 1.0;
    u_xlat16_2 = (bool(u_xlatb16)) ? u_xlat16_3 : u_xlat16_2;
    u_xlat16_28 = min(u_xlat16_2.w, 1.10000002);
    u_xlat16_29 = u_xlat16_2.w + (-u_xlat16_28);
    SV_Target1.xyz = u_xlat16_2.xyz;
    u_xlat16_28 = u_xlat16_25 * u_xlat16_29 + u_xlat16_28;
    SV_Target1.w = u_xlat16_28 * 0.0500000007;
    u_xlat16_4.xyz = vec3(u_xlat16_25) * u_xlat16_4.xyz + u_xlat16_1.xyz;
    u_xlat16_1.xyz = (bool(u_xlatb0)) ? u_xlat16_4.xyz : u_xlat16_1.xyz;
    u_xlat16_4.xyz = (-u_xlat16_1.xyz) + u_xlat16_5.xyz;
    u_xlat16_4.xyz = vec3(u_xlat16_25) * u_xlat16_4.xyz + u_xlat16_1.xyz;
    u_xlat16_1.xyz = (bool(u_xlatb8)) ? u_xlat16_4.xyz : u_xlat16_1.xyz;
    SV_Target2.xy = u_xlat16_1.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_1.x = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb0) ? u_xlat16_1.x : u_xlat16_1.z;
    SV_Target2.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "LINE_INTERPOLATION" "BACK_FACE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec3 mhy_AvatarLightDir;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump float u_xlat16_4;
float u_xlat16;
void main()
{
    u_xlat0.x = hlslcc_mtx4x4unity_ObjectToWorld[0].y;
    u_xlat0.y = hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat0.z = hlslcc_mtx4x4unity_ObjectToWorld[2].y;
    u_xlat1.xyw = (-_WorldSpaceCameraPos.xyz) + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat0.w = u_xlat1.y;
    u_xlat2.xyz = in_POSITION0.xyz;
    u_xlat2.w = 1.0;
    u_xlat0.x = dot(u_xlat0, u_xlat2);
    u_xlat0 = u_xlat0.xxxx * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat3.w = u_xlat1.x;
    u_xlat3.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;
    u_xlat3.y = hlslcc_mtx4x4unity_ObjectToWorld[1].x;
    u_xlat3.z = hlslcc_mtx4x4unity_ObjectToWorld[2].x;
    u_xlat3.x = dot(u_xlat3, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat3.xxxx + u_xlat0;
    u_xlat1.x = hlslcc_mtx4x4unity_ObjectToWorld[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_ObjectToWorld[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_ObjectToWorld[2].z;
    u_xlat1.x = dot(u_xlat1, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat1.xxxx + u_xlat0;
    u_xlat1.x = hlslcc_mtx4x4unity_ObjectToWorld[0].w;
    u_xlat1.y = hlslcc_mtx4x4unity_ObjectToWorld[1].w;
    u_xlat1.z = hlslcc_mtx4x4unity_ObjectToWorld[2].w;
    u_xlat1.w = hlslcc_mtx4x4unity_ObjectToWorld[3].w;
    u_xlat1.x = dot(u_xlat1, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[3] * u_xlat1.xxxx + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat16 = inversesqrt(u_xlat16);
    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
    u_xlat16_4 = dot(u_xlat1.xyz, mhy_AvatarLightDir.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    vs_TEXCOORD1.w = u_xlat16_4 * 0.497500002 + 0.5;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.zw = u_xlat0.zw;
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD3.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD5.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	mediump vec4 _Color;
uniform 	float _MainTexAlphaUse;
uniform 	mediump float _MainTexAlphaCutoff;
uniform 	float _UseVertexColorAO;
uniform 	mediump float _LightArea;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	float _UseCoolShadowColorOrTex;
uniform 	mediump vec3 _CoolShadowMultColor;
uniform 	float _UseShadowTransition;
uniform 	float _ShadowTransitionRange;
uniform 	float _ShadowTransitionSoftness;
uniform 	mediump vec3 _SpecularColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump float _EmissionScaler;
uniform 	mediump vec3 _EmissionColor_MHY;
uniform 	float _ES_CharacterAmbientLightOn;
uniform 	float _ES_CharacterAmbientBrightness;
uniform 	vec3 _ES_CharacterMainLightColor;
uniform 	float _ES_CharacterMainLightBrightness;
uniform 	vec3 _ES_CharacterAmbientLightColor;
uniform 	float _ES_CharacterMainLightRatio;
uniform 	float _ES_CharacterAmbientLightRatio;
uniform 	float _ES_CharacterColorTone;
uniform 	vec3 mhy_AvatarLightDir;
uniform lowp sampler2D _MainTex;
in mediump vec4 vs_COLOR0;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec4 u_xlat0;
bvec2 u_xlatb0;
vec3 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
bool u_xlatb1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump vec4 u_xlat16_3;
bool u_xlatb3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
bool u_xlatb8;
float u_xlat16;
mediump float u_xlat16_16;
bool u_xlatb16;
bool u_xlatb24;
mediump float u_xlat16_26;
bool u_xlatb27;
mediump float u_xlat16_28;
mediump float u_xlat16_29;
void main()
{
    u_xlatb0.xy = equal(vec4(_MainTexAlphaUse), vec4(1.0, 2.0, 0.0, 0.0)).xy;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy, -1.0);
    u_xlat16_2.x = u_xlat10_1.w + (-_MainTexAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(u_xlat16_2.x<0.0);
#else
    u_xlatb16 = u_xlat16_2.x<0.0;
#endif
    u_xlatb0.x = u_xlatb0.x && u_xlatb16;
    if((int(u_xlatb0.x) * int(0xffffffffu))!=0){discard;}
    SV_Target0.w = 0.0470588244;
    u_xlat16_2.xyz = (uint((gl_FrontFacing ? 0xffffffffu : uint(0))) != uint(0u)) ? vs_TEXCOORD1.xyz : (-vs_TEXCOORD1.xyz);
    SV_Target0.xyz = u_xlat16_2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    u_xlat0.xzw = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat0.xzw = u_xlat0.xzw * u_xlat3.xxx + mhy_AvatarLightDir.xyz;
    u_xlat3.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat0.xzw = u_xlat0.xzw * u_xlat3.xxx;
    u_xlat16_2.x = dot(u_xlat16_2.xyz, u_xlat0.xzw);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.00100000005);
    u_xlat16_2.x = log2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * _Shininess;
    u_xlat16_2.x = exp2(u_xlat16_2.x);
    u_xlat16_2.xyz = u_xlat16_2.xxx * _SpecularColor.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(_SpecMulti);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(0.5, 0.5, 0.5);
    u_xlat16_26 = vs_COLOR0.x * 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorAO));
#else
    u_xlatb0.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorAO);
#endif
    u_xlat16_26 = (u_xlatb0.x) ? u_xlat16_26 : 0.5;
    u_xlat16 = u_xlat16_26 + vs_TEXCOORD1.w;
    u_xlat16 = u_xlat16 * 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(0.949999988<u_xlat16_26);
#else
    u_xlatb24 = 0.949999988<u_xlat16_26;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(u_xlat16_26<0.0500000007);
#else
    u_xlatb3 = u_xlat16_26<0.0500000007;
#endif
    u_xlat16_26 = (u_xlatb24) ? 1.0 : u_xlat16;
    u_xlat16_26 = (u_xlatb3) ? 0.0 : u_xlat16_26;
    u_xlat16_26 = (u_xlatb0.x) ? u_xlat16_26 : vs_TEXCOORD1.w;
    u_xlat16_4.x = (-u_xlat16_26) + _LightArea;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(u_xlat16_26<_LightArea);
#else
    u_xlatb0.x = u_xlat16_26<_LightArea;
#endif
    u_xlat16_26 = u_xlat16_4.x / _ShadowTransitionRange;
    u_xlat16_16 = u_xlat16_26 + 0.00999999978;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(u_xlat16_26>=1.0);
#else
    u_xlatb24 = u_xlat16_26>=1.0;
#endif
    u_xlat16_16 = log2(u_xlat16_16);
    u_xlat16 = u_xlat16_16 * _ShadowTransitionSoftness;
    u_xlat16 = exp2(u_xlat16);
    u_xlat16 = min(u_xlat16, 1.0);
    u_xlat16 = (u_xlatb24) ? 1.0 : u_xlat16;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition));
#else
    u_xlatb24 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition);
#endif
    u_xlat16 = (u_xlatb24) ? u_xlat16 : 1.0;
    u_xlat16 = u_xlatb0.x ? u_xlat16 : float(0.0);
    u_xlat16_3.xyz = vec3(_FirstShadowMultColor.xxyz.y + (-_CoolShadowMultColor.x), _FirstShadowMultColor.xxyz.z + (-_CoolShadowMultColor.y), float(_FirstShadowMultColor.z) + (-_CoolShadowMultColor.z));
    u_xlat3.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_3.xyz + _CoolShadowMultColor.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex));
#else
    u_xlatb27 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex);
#endif
    u_xlat16_4.xyz = (bool(u_xlatb27)) ? u_xlat3.xyz : vec3(_FirstShadowMultColor.x, _FirstShadowMultColor.y, _FirstShadowMultColor.z);
    u_xlat16_3.xyz = u_xlat16_4.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat3.xyz = vec3(u_xlat16) * u_xlat16_3.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_5.xyz = (bool(u_xlatb24)) ? u_xlat3.xyz : u_xlat16_4.xyz;
    u_xlat16_6.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_6.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(int((gl_FrontFacing ? 0xffffffffu : uint(0)))==0);
#else
    u_xlatb16 = int((gl_FrontFacing ? 0xffffffffu : uint(0)))==0;
#endif
    u_xlatb0.x = u_xlatb0.x || u_xlatb16;
    u_xlat1.xyz = u_xlat16_6.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
    u_xlat0.xzw = (u_xlatb0.x) ? u_xlat16_5.xyz : u_xlat1.xyz;
    u_xlat16_5.xyz = u_xlat16_2.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness)) + u_xlat0.xzw;
    u_xlat0.xzw = u_xlat16_2.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
    u_xlat16_2.xyz = u_xlat16_6.xyz * u_xlat16_4.xyz + u_xlat0.xzw;
    u_xlat16_4.xyz = u_xlat16_6.xyz * _EmissionColor_MHY.xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * vec3(vec3(_EmissionScaler, _EmissionScaler, _EmissionScaler)) + (-u_xlat16_5.xyz);
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(vec3(_EmissionScaler, _EmissionScaler, _EmissionScaler)) + (-u_xlat16_2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(0.00999999978<u_xlat10_1.w);
#else
    u_xlatb0.x = 0.00999999978<u_xlat10_1.w;
#endif
    u_xlatb0.x = u_xlatb0.x && u_xlatb0.y;
    u_xlat16_26 = (u_xlatb0.x) ? u_xlat10_1.w : 0.0;
    u_xlat16_6.xyz = vec3(u_xlat16_26) * u_xlat16_6.xyz + u_xlat16_5.xyz;
    u_xlat16_5.xyz = (u_xlatb0.x) ? u_xlat16_6.xyz : u_xlat16_5.xyz;
    u_xlat8.xyz = u_xlat16_5.xyz * vec3(vec3(_ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness));
    u_xlat1.xyz = _ES_CharacterMainLightColor.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat1.xyz = vec3(vec3(_ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio)) * u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat8.xyz = u_xlat8.xyz * u_xlat1.xyz;
    u_xlat16_6.xyz = u_xlat8.xyz * vec3(10.0, 10.0, 10.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.xyz = min(max(u_xlat16_6.xyz, 0.0), 1.0);
#else
    u_xlat16_6.xyz = clamp(u_xlat16_6.xyz, 0.0, 1.0);
#endif
    u_xlat1.xyz = _ES_CharacterAmbientLightColor.xyz * vec3(_ES_CharacterAmbientLightRatio);
    u_xlat8.xyz = u_xlat1.xyz * u_xlat16_6.xyz + u_xlat8.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn));
#else
    u_xlatb1 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn);
#endif
    u_xlat16_6.xyz = (bool(u_xlatb1)) ? u_xlat8.xyz : u_xlat16_5.xyz;
    u_xlat16_7.xyz = u_xlat16_5.xyz + (-u_xlat16_6.xyz);
    u_xlat16_7.xyz = vec3(u_xlat16_26) * u_xlat16_7.xyz + u_xlat16_6.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.00999999978<u_xlat16_26);
#else
    u_xlatb8 = 0.00999999978<u_xlat16_26;
#endif
    u_xlat16_1.xyz = (bool(u_xlatb8)) ? u_xlat16_7.xyz : u_xlat16_6.xyz;
    u_xlat16_28 = max(u_xlat16_1.z, u_xlat16_1.y);
    u_xlat16_3.w = max(u_xlat16_1.x, u_xlat16_28);
    u_xlat16_3.xyz = u_xlat16_1.xyz / u_xlat16_3.www;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(1.0<u_xlat16_3.w);
#else
    u_xlatb16 = 1.0<u_xlat16_3.w;
#endif
    u_xlat16_1.w = 1.0;
    u_xlat16_1 = (bool(u_xlatb16)) ? u_xlat16_3 : u_xlat16_1;
    u_xlat16_28 = min(u_xlat16_1.w, 1.10000002);
    u_xlat16_29 = u_xlat16_1.w + (-u_xlat16_28);
    SV_Target1.xyz = u_xlat16_1.xyz;
    u_xlat16_28 = u_xlat16_26 * u_xlat16_29 + u_xlat16_28;
    SV_Target1.w = u_xlat16_28 * 0.0500000007;
    u_xlat16_4.xyz = vec3(u_xlat16_26) * u_xlat16_4.xyz + u_xlat16_2.xyz;
    u_xlat16_2.xyz = (u_xlatb0.x) ? u_xlat16_4.xyz : u_xlat16_2.xyz;
    u_xlat16_4.xyz = (-u_xlat16_2.xyz) + u_xlat16_5.xyz;
    u_xlat16_4.xyz = vec3(u_xlat16_26) * u_xlat16_4.xyz + u_xlat16_2.xyz;
    u_xlat16_2.xyz = (bool(u_xlatb8)) ? u_xlat16_4.xyz : u_xlat16_2.xyz;
    SV_Target2.xy = u_xlat16_2.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_2.x = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb0.x) ? u_xlat16_2.x : u_xlat16_2.z;
    SV_Target2.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "BACK_FACE_ON" "METAL_MAT" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec3 mhy_AvatarLightDir;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump float u_xlat16_4;
float u_xlat16;
void main()
{
    u_xlat0.x = hlslcc_mtx4x4unity_ObjectToWorld[0].y;
    u_xlat0.y = hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat0.z = hlslcc_mtx4x4unity_ObjectToWorld[2].y;
    u_xlat1.xyw = (-_WorldSpaceCameraPos.xyz) + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat0.w = u_xlat1.y;
    u_xlat2.xyz = in_POSITION0.xyz;
    u_xlat2.w = 1.0;
    u_xlat0.x = dot(u_xlat0, u_xlat2);
    u_xlat0 = u_xlat0.xxxx * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat3.w = u_xlat1.x;
    u_xlat3.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;
    u_xlat3.y = hlslcc_mtx4x4unity_ObjectToWorld[1].x;
    u_xlat3.z = hlslcc_mtx4x4unity_ObjectToWorld[2].x;
    u_xlat3.x = dot(u_xlat3, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat3.xxxx + u_xlat0;
    u_xlat1.x = hlslcc_mtx4x4unity_ObjectToWorld[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_ObjectToWorld[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_ObjectToWorld[2].z;
    u_xlat1.x = dot(u_xlat1, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat1.xxxx + u_xlat0;
    u_xlat1.x = hlslcc_mtx4x4unity_ObjectToWorld[0].w;
    u_xlat1.y = hlslcc_mtx4x4unity_ObjectToWorld[1].w;
    u_xlat1.z = hlslcc_mtx4x4unity_ObjectToWorld[2].w;
    u_xlat1.w = hlslcc_mtx4x4unity_ObjectToWorld[3].w;
    u_xlat1.x = dot(u_xlat1, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[3] * u_xlat1.xxxx + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat16 = inversesqrt(u_xlat16);
    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
    u_xlat16_4 = dot(u_xlat1.xyz, mhy_AvatarLightDir.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    vs_TEXCOORD1.w = u_xlat16_4 * 0.497500002 + 0.5;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.zw = u_xlat0.zw;
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD3.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD5.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToCamera[4];
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	mediump vec4 _Color;
uniform 	float _MainTexAlphaUse;
uniform 	mediump float _MainTexAlphaCutoff;
uniform 	float _UseVertexColorAO;
uniform 	mediump float _LightArea;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	float _UseCoolShadowColorOrTex;
uniform 	mediump vec3 _CoolShadowMultColor;
uniform 	float _UseShadowTransition;
uniform 	float _ShadowTransitionRange;
uniform 	float _ShadowTransitionSoftness;
uniform 	mediump vec3 _SpecularColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump float _EmissionScaler;
uniform 	mediump vec3 _EmissionColor_MHY;
uniform 	mediump float _MTMapBrightness;
uniform 	float _MTMapTileScale;
uniform 	mediump vec3 _MTMapLightColor;
uniform 	mediump vec3 _MTMapDarkColor;
uniform 	mediump vec3 _MTShadowMultiColor;
uniform 	mediump float _MTShininess;
uniform 	mediump vec3 _MTSpecularColor;
uniform 	mediump float _MTSpecularScale;
uniform 	float _ES_CharacterAmbientLightOn;
uniform 	float _ES_CharacterAmbientBrightness;
uniform 	vec3 _ES_CharacterMainLightColor;
uniform 	float _ES_CharacterMainLightBrightness;
uniform 	vec3 _ES_CharacterAmbientLightColor;
uniform 	float _ES_CharacterMainLightRatio;
uniform 	float _ES_CharacterAmbientLightRatio;
uniform 	float _ES_CharacterColorTone;
uniform 	vec3 mhy_AvatarLightDir;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MTMap;
in mediump vec4 vs_COLOR0;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
mediump vec3 u_xlat16_0;
vec3 u_xlat1;
mediump vec4 u_xlat16_1;
mediump vec4 u_xlat16_2;
lowp vec4 u_xlat10_2;
bool u_xlatb2;
lowp vec3 u_xlat10_3;
bvec2 u_xlatb3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
bool u_xlatb6;
float u_xlat7;
bool u_xlatb7;
vec3 u_xlat8;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
mediump vec3 u_xlat16_11;
vec3 u_xlat12;
mediump vec3 u_xlat16_12;
vec3 u_xlat13;
float u_xlat17;
bool u_xlatb17;
mediump vec3 u_xlat16_19;
vec3 u_xlat21;
mediump vec3 u_xlat16_21;
lowp float u_xlat10_21;
bool u_xlatb21;
bool u_xlatb31;
mediump float u_xlat16_42;
float u_xlat43;
bool u_xlatb43;
bool u_xlatb45;
mediump float u_xlat16_46;
mediump float u_xlat16_47;
void main()
{
    u_xlat16_0.xyz = (uint((gl_FrontFacing ? 0xffffffffu : uint(0))) != uint(0u)) ? vs_TEXCOORD1.xyz : (-vs_TEXCOORD1.xyz);
    u_xlat1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat43 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat43 = inversesqrt(u_xlat43);
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat43) + mhy_AvatarLightDir.xyz;
    u_xlat43 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat43 = inversesqrt(u_xlat43);
    u_xlat1.xyz = vec3(u_xlat43) * u_xlat1.xyz;
    u_xlat10_2 = texture(_MainTex, vs_TEXCOORD0.xy, -1.0);
    u_xlatb3.xy = equal(vec4(_MainTexAlphaUse), vec4(1.0, 2.0, 0.0, 0.0)).xy;
    u_xlat16_42 = u_xlat10_2.w + (-_MainTexAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb43 = !!(u_xlat16_42<0.0);
#else
    u_xlatb43 = u_xlat16_42<0.0;
#endif
    u_xlatb43 = u_xlatb3.x && u_xlatb43;
    if((int(u_xlatb43) * int(0xffffffffu))!=0){discard;}
    u_xlat10_3.xz = texture(_LightMapTex, vs_TEXCOORD0.xy, -1.0).xz;
    u_xlat16_4.xyz = u_xlat10_2.xyz * _Color.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb43 = !!(0.00999999978<u_xlat10_2.w);
#else
    u_xlatb43 = 0.00999999978<u_xlat10_2.w;
#endif
    u_xlatb2 = u_xlatb43 && u_xlatb3.y;
    u_xlat16_42 = (u_xlatb2) ? u_xlat10_2.w : 0.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb17 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorAO));
#else
    u_xlatb17 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorAO);
#endif
    u_xlat16_46 = vs_COLOR0.x * 0.5;
    u_xlat16_5.x = (u_xlatb17) ? u_xlat16_46 : 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb45 = !!(u_xlat16_5.x<0.0500000007);
#else
    u_xlatb45 = u_xlat16_5.x<0.0500000007;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.949999988<u_xlat16_5.x);
#else
    u_xlatb6 = 0.949999988<u_xlat16_5.x;
#endif
    u_xlat7 = u_xlat16_5.x + vs_TEXCOORD1.w;
    u_xlat7 = u_xlat7 * 0.5;
    u_xlat16_5.x = (u_xlatb6) ? 1.0 : u_xlat7;
    u_xlat16_5.x = (u_xlatb45) ? 0.0 : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb17) ? u_xlat16_5.x : vs_TEXCOORD1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlatb17 = !!(u_xlat16_5.x<_LightArea);
#else
    u_xlatb17 = u_xlat16_5.x<_LightArea;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb45 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition));
#else
    u_xlatb45 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition);
#endif
    u_xlat16_5.x = (-u_xlat16_5.x) + _LightArea;
    u_xlat16_5.x = u_xlat16_5.x / _ShadowTransitionRange;
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(u_xlat16_5.x>=1.0);
#else
    u_xlatb7 = u_xlat16_5.x>=1.0;
#endif
    u_xlat16_21.x = u_xlat16_5.x + 0.00999999978;
    u_xlat16_21.x = log2(u_xlat16_21.x);
    u_xlat21.x = u_xlat16_21.x * _ShadowTransitionSoftness;
    u_xlat21.x = exp2(u_xlat21.x);
    u_xlat21.x = min(u_xlat21.x, 1.0);
    u_xlat7 = (u_xlatb7) ? 1.0 : u_xlat21.x;
    u_xlat7 = (u_xlatb45) ? u_xlat7 : 1.0;
    u_xlat7 = u_xlatb17 ? u_xlat7 : float(0.0);
    u_xlat17 = u_xlatb17 ? 1.0 : float(0.0);
    u_xlat17 = ((gl_FrontFacing ? 0xffffffffu : uint(0)) != uint(0u)) ? u_xlat17 : 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(0.899999976<u_xlat10_3.x);
#else
    u_xlatb21 = 0.899999976<u_xlat10_3.x;
#endif
    if(u_xlatb21){
        u_xlat21.xy = u_xlat16_0.yy * hlslcc_mtx4x4unity_WorldToCamera[1].xy;
        u_xlat21.xy = hlslcc_mtx4x4unity_WorldToCamera[0].xy * u_xlat16_0.xx + u_xlat21.xy;
        u_xlat8.yz = hlslcc_mtx4x4unity_WorldToCamera[2].xy * u_xlat16_0.zz + u_xlat21.xy;
        u_xlat8.x = u_xlat8.y * _MTMapTileScale;
        u_xlat16_5.xy = u_xlat8.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
        u_xlat10_21 = texture(_MTMap, u_xlat16_5.xy).x;
        u_xlat16_5.x = u_xlat10_21 * _MTMapBrightness;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
        u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
        u_xlat16_19.xyz = _MTMapLightColor.xyz + (-_MTMapDarkColor.xyz);
        u_xlat16_5.xyz = u_xlat16_5.xxx * u_xlat16_19.xyz + _MTMapDarkColor.xyz;
        u_xlat16_5.xyz = u_xlat16_4.xyz * u_xlat16_5.xyz;
        u_xlat16_47 = dot(u_xlat16_0.xyz, u_xlat1.xyz);
        u_xlat16_47 = max(u_xlat16_47, 0.00100000005);
        u_xlat16_47 = log2(u_xlat16_47);
        u_xlat16_47 = u_xlat16_47 * _MTShininess;
        u_xlat16_47 = exp2(u_xlat16_47);
        u_xlat16_47 = u_xlat16_47 * _MTSpecularScale;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_47 = min(max(u_xlat16_47, 0.0), 1.0);
#else
        u_xlat16_47 = clamp(u_xlat16_47, 0.0, 1.0);
#endif
        u_xlat16_9.xyz = vec3(u_xlat16_47) * _MTSpecularColor.xyz;
        u_xlat16_9.xyz = u_xlat10_3.zzz * u_xlat16_9.xyz;
        u_xlat16_10.xyz = u_xlat16_5.xyz * _MTShadowMultiColor.xyz;
        u_xlat16_21.xyz = _MTShadowMultiColor.xyz + vec3(-1.0, -1.0, -1.0);
        u_xlat21.xyz = vec3(u_xlat7) * u_xlat16_21.xyz + vec3(1.0, 1.0, 1.0);
        u_xlat16_11.xyz = (bool(u_xlatb45)) ? u_xlat21.xyz : _MTShadowMultiColor.xyz;
#ifdef UNITY_ADRENO_ES3
        u_xlatb31 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(u_xlat17));
#else
        u_xlatb31 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(u_xlat17);
#endif
        u_xlat16_11.xyz = u_xlat16_5.xyz * u_xlat16_11.xyz;
        u_xlat21.xyz = u_xlat16_5.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
        u_xlat21.xyz = (bool(u_xlatb31)) ? u_xlat16_11.xyz : u_xlat21.xyz;
        u_xlat8.xyz = u_xlat16_9.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
        u_xlat16_21.xyz = u_xlat21.xyz;
        u_xlat16_8.xyz = u_xlat8.xyz;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb31 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex));
#else
        u_xlatb31 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex);
#endif
        u_xlat16_12.xyz = vec3(_FirstShadowMultColor.xxyz.y + (-_CoolShadowMultColor.x), _FirstShadowMultColor.xxyz.z + (-_CoolShadowMultColor.y), float(_FirstShadowMultColor.z) + (-_CoolShadowMultColor.z));
        u_xlat12.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_12.xyz + _CoolShadowMultColor.xyz;
        u_xlat16_5.xyz = (bool(u_xlatb31)) ? u_xlat12.xyz : vec3(_FirstShadowMultColor.x, _FirstShadowMultColor.y, _FirstShadowMultColor.z);
        u_xlat16_10.xyz = u_xlat16_4.xyz * u_xlat16_5.xyz;
        u_xlat16_12.xyz = u_xlat16_5.xyz + vec3(-1.0, -1.0, -1.0);
        u_xlat12.xyz = vec3(u_xlat7) * u_xlat16_12.xyz + vec3(1.0, 1.0, 1.0);
        u_xlat16_5.xyz = (bool(u_xlatb45)) ? u_xlat12.xyz : u_xlat16_5.xyz;
#ifdef UNITY_ADRENO_ES3
        u_xlatb17 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(u_xlat17));
#else
        u_xlatb17 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(u_xlat17);
#endif
        u_xlat16_5.xyz = u_xlat16_4.xyz * u_xlat16_5.xyz;
        u_xlat12.xyz = u_xlat16_4.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
        u_xlat21.xyz = (bool(u_xlatb17)) ? u_xlat16_5.xyz : u_xlat12.xyz;
        u_xlat16_5.x = dot(u_xlat16_0.xyz, u_xlat1.xyz);
        u_xlat16_5.x = max(u_xlat16_5.x, 0.00100000005);
        u_xlat16_5.x = log2(u_xlat16_5.x);
        u_xlat16_5.x = u_xlat16_5.x * _Shininess;
        u_xlat16_5.x = exp2(u_xlat16_5.x);
        u_xlat16_5.xyz = u_xlat16_5.xxx * _SpecularColor.xyz;
        u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(_SpecMulti);
        u_xlat16_5.xyz = u_xlat10_3.xxx * u_xlat16_5.xyz;
        u_xlat8.xyz = u_xlat16_5.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
        u_xlat16_21.xyz = u_xlat21.xyz;
        u_xlat16_8.xyz = u_xlat8.xyz;
    //ENDIF
    }
    u_xlat16_5.xyz = u_xlat16_4.xyz * _EmissionColor_MHY.xyz;
    u_xlat16_9.xyz = u_xlat16_21.xyz + u_xlat16_8.xyz;
    u_xlat16_10.xyz = u_xlat16_8.xyz + u_xlat16_10.xyz;
    u_xlat16_11.xyz = u_xlat16_5.xyz * vec3(vec3(_EmissionScaler, _EmissionScaler, _EmissionScaler)) + (-u_xlat16_9.xyz);
    u_xlat16_11.xyz = vec3(u_xlat16_42) * u_xlat16_11.xyz + u_xlat16_9.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(vec3(_EmissionScaler, _EmissionScaler, _EmissionScaler)) + (-u_xlat16_10.xyz);
    u_xlat16_5.xyz = vec3(u_xlat16_42) * u_xlat16_5.xyz + u_xlat16_10.xyz;
    u_xlat16_9.xyz = (bool(u_xlatb2)) ? u_xlat16_11.xyz : u_xlat16_9.xyz;
    u_xlat16_5.xyz = (bool(u_xlatb2)) ? u_xlat16_5.xyz : u_xlat16_10.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb3.x = !!(0.00999999978<u_xlat16_42);
#else
    u_xlatb3.x = 0.00999999978<u_xlat16_42;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb17 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn));
#else
    u_xlatb17 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn);
#endif
    u_xlat12.xyz = u_xlat16_9.xyz * vec3(vec3(_ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness));
    u_xlat13.xyz = _ES_CharacterMainLightColor.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat13.xyz = vec3(vec3(_ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio)) * u_xlat13.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat12.xyz = u_xlat12.xyz * u_xlat13.xyz;
    u_xlat13.xyz = _ES_CharacterAmbientLightColor.xyz * vec3(_ES_CharacterAmbientLightRatio);
    u_xlat16_10.xyz = u_xlat12.xyz * vec3(10.0, 10.0, 10.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_10.xyz = min(max(u_xlat16_10.xyz, 0.0), 1.0);
#else
    u_xlat16_10.xyz = clamp(u_xlat16_10.xyz, 0.0, 1.0);
#endif
    u_xlat12.xyz = u_xlat13.xyz * u_xlat16_10.xyz + u_xlat12.xyz;
    u_xlat16_10.xyz = (bool(u_xlatb17)) ? u_xlat12.xyz : u_xlat16_9.xyz;
    u_xlat16_11.xyz = u_xlat16_9.xyz + (-u_xlat16_10.xyz);
    u_xlat16_11.xyz = vec3(u_xlat16_42) * u_xlat16_11.xyz + u_xlat16_10.xyz;
    u_xlat16_9.xyz = (-u_xlat16_5.xyz) + u_xlat16_9.xyz;
    u_xlat16_9.xyz = vec3(u_xlat16_42) * u_xlat16_9.xyz + u_xlat16_5.xyz;
    u_xlat16_1.xyz = (u_xlatb3.x) ? u_xlat16_11.xyz : u_xlat16_10.xyz;
    u_xlat16_5.xyz = (u_xlatb3.x) ? u_xlat16_9.xyz : u_xlat16_5.xyz;
    u_xlat16_47 = max(u_xlat16_1.z, u_xlat16_1.y);
    u_xlat16_2.w = max(u_xlat16_1.x, u_xlat16_47);
#ifdef UNITY_ADRENO_ES3
    u_xlatb3.x = !!(1.0<u_xlat16_2.w);
#else
    u_xlatb3.x = 1.0<u_xlat16_2.w;
#endif
    u_xlat16_2.xyz = u_xlat16_1.xyz / u_xlat16_2.www;
    u_xlat16_1.w = 1.0;
    u_xlat16_1 = (u_xlatb3.x) ? u_xlat16_2 : u_xlat16_1;
    u_xlat16_47 = min(u_xlat16_1.w, 1.10000002);
    u_xlat16_9.x = u_xlat16_1.w + (-u_xlat16_47);
    u_xlat16_42 = u_xlat16_42 * u_xlat16_9.x + u_xlat16_47;
    SV_Target1.w = u_xlat16_42 * 0.0500000007;
    SV_Target0.xyz = u_xlat16_0.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb3.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb3.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_0.x = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb3.x) ? u_xlat16_0.x : u_xlat16_5.z;
    SV_Target0.w = 0.0470588244;
    SV_Target1.xyz = u_xlat16_1.xyz;
    SV_Target2.xy = u_xlat16_5.xy;
    SV_Target2.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "MSAA_INTERPOLATION" "BACK_FACE_ON" "METAL_MAT" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec3 mhy_AvatarLightDir;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump float u_xlat16_4;
float u_xlat16;
void main()
{
    u_xlat0.x = hlslcc_mtx4x4unity_ObjectToWorld[0].y;
    u_xlat0.y = hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat0.z = hlslcc_mtx4x4unity_ObjectToWorld[2].y;
    u_xlat1.xyw = (-_WorldSpaceCameraPos.xyz) + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat0.w = u_xlat1.y;
    u_xlat2.xyz = in_POSITION0.xyz;
    u_xlat2.w = 1.0;
    u_xlat0.x = dot(u_xlat0, u_xlat2);
    u_xlat0 = u_xlat0.xxxx * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat3.w = u_xlat1.x;
    u_xlat3.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;
    u_xlat3.y = hlslcc_mtx4x4unity_ObjectToWorld[1].x;
    u_xlat3.z = hlslcc_mtx4x4unity_ObjectToWorld[2].x;
    u_xlat3.x = dot(u_xlat3, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat3.xxxx + u_xlat0;
    u_xlat1.x = hlslcc_mtx4x4unity_ObjectToWorld[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_ObjectToWorld[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_ObjectToWorld[2].z;
    u_xlat1.x = dot(u_xlat1, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat1.xxxx + u_xlat0;
    u_xlat1.x = hlslcc_mtx4x4unity_ObjectToWorld[0].w;
    u_xlat1.y = hlslcc_mtx4x4unity_ObjectToWorld[1].w;
    u_xlat1.z = hlslcc_mtx4x4unity_ObjectToWorld[2].w;
    u_xlat1.w = hlslcc_mtx4x4unity_ObjectToWorld[3].w;
    u_xlat1.x = dot(u_xlat1, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[3] * u_xlat1.xxxx + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat16 = inversesqrt(u_xlat16);
    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
    u_xlat16_4 = dot(u_xlat1.xyz, mhy_AvatarLightDir.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    vs_TEXCOORD1.w = u_xlat16_4 * 0.497500002 + 0.5;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.zw = u_xlat0.zw;
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD3.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD5.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToCamera[4];
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	mediump vec4 _Color;
uniform 	float _MainTexAlphaUse;
uniform 	mediump float _MainTexAlphaCutoff;
uniform 	float _UseVertexColorAO;
uniform 	mediump float _LightArea;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	float _UseCoolShadowColorOrTex;
uniform 	mediump vec3 _CoolShadowMultColor;
uniform 	float _UseShadowTransition;
uniform 	float _ShadowTransitionRange;
uniform 	float _ShadowTransitionSoftness;
uniform 	mediump vec3 _SpecularColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump float _EmissionScaler;
uniform 	mediump vec3 _EmissionColor_MHY;
uniform 	mediump float _MTMapBrightness;
uniform 	float _MTMapTileScale;
uniform 	mediump vec3 _MTMapLightColor;
uniform 	mediump vec3 _MTMapDarkColor;
uniform 	mediump vec3 _MTShadowMultiColor;
uniform 	mediump float _MTShininess;
uniform 	mediump vec3 _MTSpecularColor;
uniform 	mediump float _MTSpecularScale;
uniform 	float _ES_CharacterAmbientLightOn;
uniform 	float _ES_CharacterAmbientBrightness;
uniform 	vec3 _ES_CharacterMainLightColor;
uniform 	float _ES_CharacterMainLightBrightness;
uniform 	vec3 _ES_CharacterAmbientLightColor;
uniform 	float _ES_CharacterMainLightRatio;
uniform 	float _ES_CharacterAmbientLightRatio;
uniform 	float _ES_CharacterColorTone;
uniform 	vec3 mhy_AvatarLightDir;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MTMap;
in mediump vec4 vs_COLOR0;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec2 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec2 u_xlat10_0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec4 u_xlat16_2;
float u_xlat3;
lowp vec4 u_xlat10_3;
bool u_xlatb3;
mediump vec3 u_xlat16_4;
mediump float u_xlat16_5;
vec3 u_xlat6;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
vec3 u_xlat10;
mediump vec3 u_xlat16_10;
vec3 u_xlat11;
mediump vec3 u_xlat16_11;
vec3 u_xlat12;
vec3 u_xlat16;
bool u_xlatb16;
mediump vec3 u_xlat16_18;
mediump float u_xlat16_20;
vec2 u_xlat26;
bvec2 u_xlatb26;
float u_xlat29;
bool u_xlatb29;
mediump float u_xlat16_40;
bool u_xlatb41;
float u_xlat42;
mediump float u_xlat16_42;
lowp float u_xlat10_42;
bool u_xlatb42;
void main()
{
    u_xlat0.xy = dFdx(vs_TEXCOORD0.xy);
    u_xlat26.xy = dFdy(vs_TEXCOORD0.xy);
    u_xlat0.xy = u_xlat26.xy + u_xlat0.xy;
    u_xlat26.xy = (-u_xlat0.xy) * vec2(0.25, 0.25) + vs_TEXCOORD0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25) + vs_TEXCOORD0.xy;
    u_xlat0.xy = (int(gl_SampleID) != 0) ? u_xlat26.xy : u_xlat0.xy;
    u_xlat16_1.xyz = (uint((gl_FrontFacing ? 0xffffffffu : uint(0))) != uint(0u)) ? vs_TEXCOORD1.xyz : (-vs_TEXCOORD1.xyz);
    u_xlat2.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat26.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat26.x = inversesqrt(u_xlat26.x);
    u_xlat2.xyz = u_xlat2.xyz * u_xlat26.xxx + mhy_AvatarLightDir.xyz;
    u_xlat26.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat26.x = inversesqrt(u_xlat26.x);
    u_xlat2.xyz = u_xlat26.xxx * u_xlat2.xyz;
    u_xlat10_3 = textureLod(_MainTex, u_xlat0.xy, 0.0);
    u_xlatb26.xy = equal(vec4(_MainTexAlphaUse), vec4(1.0, 2.0, 1.0, 2.0)).xy;
    u_xlat16_40 = u_xlat10_3.w + (-_MainTexAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb41 = !!(u_xlat16_40<0.0);
#else
    u_xlatb41 = u_xlat16_40<0.0;
#endif
    u_xlatb26.x = u_xlatb26.x && u_xlatb41;
    if((int(u_xlatb26.x) * int(0xffffffffu))!=0){discard;}
    u_xlat10_0.xy = textureLod(_LightMapTex, u_xlat0.xy, 0.0).xz;
    u_xlat16_4.xyz = u_xlat10_3.xyz * _Color.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb26.x = !!(0.00999999978<u_xlat10_3.w);
#else
    u_xlatb26.x = 0.00999999978<u_xlat10_3.w;
#endif
    u_xlatb26.x = u_xlatb26.x && u_xlatb26.y;
    u_xlat16_5 = (u_xlatb26.x) ? u_xlat10_3.w : 0.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorAO));
#else
    u_xlatb3 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorAO);
#endif
    u_xlat16_18.x = vs_COLOR0.x * 0.5;
    u_xlat16_18.x = (u_xlatb3) ? u_xlat16_18.x : 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(u_xlat16_18.x<0.0500000007);
#else
    u_xlatb16 = u_xlat16_18.x<0.0500000007;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb29 = !!(0.949999988<u_xlat16_18.x);
#else
    u_xlatb29 = 0.949999988<u_xlat16_18.x;
#endif
    u_xlat42 = u_xlat16_18.x + vs_TEXCOORD1.w;
    u_xlat42 = u_xlat42 * 0.5;
    u_xlat16_18.x = (u_xlatb29) ? 1.0 : u_xlat42;
    u_xlat16_18.x = (u_xlatb16) ? 0.0 : u_xlat16_18.x;
    u_xlat16_18.x = (u_xlatb3) ? u_xlat16_18.x : vs_TEXCOORD1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(u_xlat16_18.x<_LightArea);
#else
    u_xlatb3 = u_xlat16_18.x<_LightArea;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition));
#else
    u_xlatb16 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition);
#endif
    u_xlat16_18.x = (-u_xlat16_18.x) + _LightArea;
    u_xlat16_18.x = u_xlat16_18.x / _ShadowTransitionRange;
#ifdef UNITY_ADRENO_ES3
    u_xlatb29 = !!(u_xlat16_18.x>=1.0);
#else
    u_xlatb29 = u_xlat16_18.x>=1.0;
#endif
    u_xlat16_42 = u_xlat16_18.x + 0.00999999978;
    u_xlat16_42 = log2(u_xlat16_42);
    u_xlat42 = u_xlat16_42 * _ShadowTransitionSoftness;
    u_xlat42 = exp2(u_xlat42);
    u_xlat42 = min(u_xlat42, 1.0);
    u_xlat29 = (u_xlatb29) ? 1.0 : u_xlat42;
    u_xlat29 = (u_xlatb16) ? u_xlat29 : 1.0;
    u_xlat29 = u_xlatb3 ? u_xlat29 : float(0.0);
    u_xlat3 = u_xlatb3 ? 1.0 : float(0.0);
    u_xlat3 = ((gl_FrontFacing ? 0xffffffffu : uint(0)) != uint(0u)) ? u_xlat3 : 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb42 = !!(0.899999976<u_xlat10_0.x);
#else
    u_xlatb42 = 0.899999976<u_xlat10_0.x;
#endif
    if(u_xlatb42){
        u_xlat6.xy = u_xlat16_1.yy * hlslcc_mtx4x4unity_WorldToCamera[1].xy;
        u_xlat6.xy = hlslcc_mtx4x4unity_WorldToCamera[0].xy * u_xlat16_1.xx + u_xlat6.xy;
        u_xlat6.yz = hlslcc_mtx4x4unity_WorldToCamera[2].xy * u_xlat16_1.zz + u_xlat6.xy;
        u_xlat6.x = u_xlat6.y * _MTMapTileScale;
        u_xlat16_18.xy = u_xlat6.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
        u_xlat10_42 = texture(_MTMap, u_xlat16_18.xy, -1.0).x;
        u_xlat16_18.x = u_xlat10_42 * _MTMapBrightness;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_18.x = min(max(u_xlat16_18.x, 0.0), 1.0);
#else
        u_xlat16_18.x = clamp(u_xlat16_18.x, 0.0, 1.0);
#endif
        u_xlat16_7.xyz = _MTMapLightColor.xyz + (-_MTMapDarkColor.xyz);
        u_xlat16_18.xyz = u_xlat16_18.xxx * u_xlat16_7.xyz + _MTMapDarkColor.xyz;
        u_xlat16_18.xyz = u_xlat16_4.xyz * u_xlat16_18.xyz;
        u_xlat16_7.x = dot(u_xlat16_1.xyz, u_xlat2.xyz);
        u_xlat16_7.x = max(u_xlat16_7.x, 0.00100000005);
        u_xlat16_7.x = log2(u_xlat16_7.x);
        u_xlat16_7.x = u_xlat16_7.x * _MTShininess;
        u_xlat16_7.x = exp2(u_xlat16_7.x);
        u_xlat16_7.x = u_xlat16_7.x * _MTSpecularScale;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
        u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
        u_xlat16_7.xyz = u_xlat16_7.xxx * _MTSpecularColor.xyz;
        u_xlat16_7.xyz = u_xlat10_0.yyy * u_xlat16_7.xyz;
        u_xlat16_8.xyz = u_xlat16_18.xyz * _MTShadowMultiColor.xyz;
        u_xlat16_6.xyz = _MTShadowMultiColor.xyz + vec3(-1.0, -1.0, -1.0);
        u_xlat6.xyz = vec3(u_xlat29) * u_xlat16_6.xyz + vec3(1.0, 1.0, 1.0);
        u_xlat16_9.xyz = (bool(u_xlatb16)) ? u_xlat6.xyz : _MTShadowMultiColor.xyz;
#ifdef UNITY_ADRENO_ES3
        u_xlatb42 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(u_xlat3));
#else
        u_xlatb42 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(u_xlat3);
#endif
        u_xlat16_9.xyz = u_xlat16_18.xyz * u_xlat16_9.xyz;
        u_xlat6.xyz = u_xlat16_18.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
        u_xlat6.xyz = (bool(u_xlatb42)) ? u_xlat16_9.xyz : u_xlat6.xyz;
        u_xlat10.xyz = u_xlat16_7.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
        u_xlat16_6.xyz = u_xlat6.xyz;
        u_xlat16_10.xyz = u_xlat10.xyz;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb42 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex));
#else
        u_xlatb42 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex);
#endif
        u_xlat16_11.xyz = vec3(_FirstShadowMultColor.xxyz.y + (-_CoolShadowMultColor.x), _FirstShadowMultColor.xxyz.z + (-_CoolShadowMultColor.y), float(_FirstShadowMultColor.z) + (-_CoolShadowMultColor.z));
        u_xlat11.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_11.xyz + _CoolShadowMultColor.xyz;
        u_xlat16_18.xyz = (bool(u_xlatb42)) ? u_xlat11.xyz : vec3(_FirstShadowMultColor.x, _FirstShadowMultColor.y, _FirstShadowMultColor.z);
        u_xlat16_8.xyz = u_xlat16_4.xyz * u_xlat16_18.xyz;
        u_xlat16_11.xyz = u_xlat16_18.xyz + vec3(-1.0, -1.0, -1.0);
        u_xlat11.xyz = vec3(u_xlat29) * u_xlat16_11.xyz + vec3(1.0, 1.0, 1.0);
        u_xlat16_18.xyz = (bool(u_xlatb16)) ? u_xlat11.xyz : u_xlat16_18.xyz;
#ifdef UNITY_ADRENO_ES3
        u_xlatb3 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(u_xlat3));
#else
        u_xlatb3 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(u_xlat3);
#endif
        u_xlat16_18.xyz = u_xlat16_4.xyz * u_xlat16_18.xyz;
        u_xlat16.xyz = u_xlat16_4.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
        u_xlat6.xyz = (bool(u_xlatb3)) ? u_xlat16_18.xyz : u_xlat16.xyz;
        u_xlat16_18.x = dot(u_xlat16_1.xyz, u_xlat2.xyz);
        u_xlat16_18.x = max(u_xlat16_18.x, 0.00100000005);
        u_xlat16_18.x = log2(u_xlat16_18.x);
        u_xlat16_18.x = u_xlat16_18.x * _Shininess;
        u_xlat16_18.x = exp2(u_xlat16_18.x);
        u_xlat16_18.xyz = u_xlat16_18.xxx * _SpecularColor.xyz;
        u_xlat16_18.xyz = u_xlat16_18.xyz * vec3(_SpecMulti);
        u_xlat16_18.xyz = u_xlat10_0.xxx * u_xlat16_18.xyz;
        u_xlat10.xyz = u_xlat16_18.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
        u_xlat16_6.xyz = u_xlat6.xyz;
        u_xlat16_10.xyz = u_xlat10.xyz;
    //ENDIF
    }
    u_xlat16_18.xyz = u_xlat16_4.xyz * _EmissionColor_MHY.xyz;
    u_xlat16_7.xyz = u_xlat16_6.xyz + u_xlat16_10.xyz;
    u_xlat16_8.xyz = u_xlat16_8.xyz + u_xlat16_10.xyz;
    u_xlat16_9.xyz = u_xlat16_18.xyz * vec3(vec3(_EmissionScaler, _EmissionScaler, _EmissionScaler)) + (-u_xlat16_7.xyz);
    u_xlat16_9.xyz = vec3(u_xlat16_5) * u_xlat16_9.xyz + u_xlat16_7.xyz;
    u_xlat16_18.xyz = u_xlat16_18.xyz * vec3(vec3(_EmissionScaler, _EmissionScaler, _EmissionScaler)) + (-u_xlat16_8.xyz);
    u_xlat16_18.xyz = vec3(u_xlat16_5) * u_xlat16_18.xyz + u_xlat16_8.xyz;
    u_xlat16_7.xyz = (u_xlatb26.x) ? u_xlat16_9.xyz : u_xlat16_7.xyz;
    u_xlat16_18.xyz = (u_xlatb26.x) ? u_xlat16_18.xyz : u_xlat16_8.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(0.00999999978<u_xlat16_5);
#else
    u_xlatb3 = 0.00999999978<u_xlat16_5;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn));
#else
    u_xlatb16 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn);
#endif
    u_xlat11.xyz = u_xlat16_7.xyz * vec3(vec3(_ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness));
    u_xlat12.xyz = _ES_CharacterMainLightColor.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat12.xyz = vec3(vec3(_ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio)) * u_xlat12.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat11.xyz = u_xlat11.xyz * u_xlat12.xyz;
    u_xlat12.xyz = _ES_CharacterAmbientLightColor.xyz * vec3(_ES_CharacterAmbientLightRatio);
    u_xlat16_8.xyz = u_xlat11.xyz * vec3(10.0, 10.0, 10.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_8.xyz = min(max(u_xlat16_8.xyz, 0.0), 1.0);
#else
    u_xlat16_8.xyz = clamp(u_xlat16_8.xyz, 0.0, 1.0);
#endif
    u_xlat11.xyz = u_xlat12.xyz * u_xlat16_8.xyz + u_xlat11.xyz;
    u_xlat16_8.xyz = (bool(u_xlatb16)) ? u_xlat11.xyz : u_xlat16_7.xyz;
    u_xlat16_9.xyz = u_xlat16_7.xyz + (-u_xlat16_8.xyz);
    u_xlat16_9.xyz = vec3(u_xlat16_5) * u_xlat16_9.xyz + u_xlat16_8.xyz;
    u_xlat16_7.xyz = (-u_xlat16_18.xyz) + u_xlat16_7.xyz;
    u_xlat16_7.xyz = vec3(u_xlat16_5) * u_xlat16_7.xyz + u_xlat16_18.xyz;
    u_xlat16_0.xyz = (bool(u_xlatb3)) ? u_xlat16_9.xyz : u_xlat16_8.xyz;
    u_xlat16_18.xyz = (bool(u_xlatb3)) ? u_xlat16_7.xyz : u_xlat16_18.xyz;
    u_xlat16_7.x = max(u_xlat16_0.z, u_xlat16_0.y);
    u_xlat16_2.w = max(u_xlat16_0.x, u_xlat16_7.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(1.0<u_xlat16_2.w);
#else
    u_xlatb3 = 1.0<u_xlat16_2.w;
#endif
    u_xlat16_2.xyz = u_xlat16_0.xyz / u_xlat16_2.www;
    u_xlat16_0.w = 1.0;
    u_xlat16_0 = (bool(u_xlatb3)) ? u_xlat16_2 : u_xlat16_0;
    u_xlat16_7.x = min(u_xlat16_0.w, 1.10000002);
    u_xlat16_20 = u_xlat16_0.w + (-u_xlat16_7.x);
    u_xlat16_5 = u_xlat16_5 * u_xlat16_20 + u_xlat16_7.x;
    SV_Target1.w = u_xlat16_5 * 0.0500000007;
    SV_Target0.xyz = u_xlat16_1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb3 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_5 = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb3) ? u_xlat16_5 : u_xlat16_18.z;
    SV_Target0.w = 0.0470588244;
    SV_Target1.xyz = u_xlat16_0.xyz;
    SV_Target2.xy = u_xlat16_18.xy;
    SV_Target2.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "LINE_INTERPOLATION" "BACK_FACE_ON" "METAL_MAT" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec3 mhy_AvatarLightDir;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump float u_xlat16_4;
float u_xlat16;
void main()
{
    u_xlat0.x = hlslcc_mtx4x4unity_ObjectToWorld[0].y;
    u_xlat0.y = hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat0.z = hlslcc_mtx4x4unity_ObjectToWorld[2].y;
    u_xlat1.xyw = (-_WorldSpaceCameraPos.xyz) + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat0.w = u_xlat1.y;
    u_xlat2.xyz = in_POSITION0.xyz;
    u_xlat2.w = 1.0;
    u_xlat0.x = dot(u_xlat0, u_xlat2);
    u_xlat0 = u_xlat0.xxxx * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat3.w = u_xlat1.x;
    u_xlat3.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;
    u_xlat3.y = hlslcc_mtx4x4unity_ObjectToWorld[1].x;
    u_xlat3.z = hlslcc_mtx4x4unity_ObjectToWorld[2].x;
    u_xlat3.x = dot(u_xlat3, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat3.xxxx + u_xlat0;
    u_xlat1.x = hlslcc_mtx4x4unity_ObjectToWorld[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_ObjectToWorld[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_ObjectToWorld[2].z;
    u_xlat1.x = dot(u_xlat1, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat1.xxxx + u_xlat0;
    u_xlat1.x = hlslcc_mtx4x4unity_ObjectToWorld[0].w;
    u_xlat1.y = hlslcc_mtx4x4unity_ObjectToWorld[1].w;
    u_xlat1.z = hlslcc_mtx4x4unity_ObjectToWorld[2].w;
    u_xlat1.w = hlslcc_mtx4x4unity_ObjectToWorld[3].w;
    u_xlat1.x = dot(u_xlat1, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[3] * u_xlat1.xxxx + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat16 = inversesqrt(u_xlat16);
    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
    u_xlat16_4 = dot(u_xlat1.xyz, mhy_AvatarLightDir.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    vs_TEXCOORD1.w = u_xlat16_4 * 0.497500002 + 0.5;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.zw = u_xlat0.zw;
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD3.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD5.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToCamera[4];
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	mediump vec4 _Color;
uniform 	float _MainTexAlphaUse;
uniform 	mediump float _MainTexAlphaCutoff;
uniform 	float _UseVertexColorAO;
uniform 	mediump float _LightArea;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	float _UseCoolShadowColorOrTex;
uniform 	mediump vec3 _CoolShadowMultColor;
uniform 	float _UseShadowTransition;
uniform 	float _ShadowTransitionRange;
uniform 	float _ShadowTransitionSoftness;
uniform 	mediump vec3 _SpecularColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump float _EmissionScaler;
uniform 	mediump vec3 _EmissionColor_MHY;
uniform 	mediump float _MTMapBrightness;
uniform 	float _MTMapTileScale;
uniform 	mediump vec3 _MTMapLightColor;
uniform 	mediump vec3 _MTMapDarkColor;
uniform 	mediump vec3 _MTShadowMultiColor;
uniform 	mediump float _MTShininess;
uniform 	mediump vec3 _MTSpecularColor;
uniform 	mediump float _MTSpecularScale;
uniform 	float _ES_CharacterAmbientLightOn;
uniform 	float _ES_CharacterAmbientBrightness;
uniform 	vec3 _ES_CharacterMainLightColor;
uniform 	float _ES_CharacterMainLightBrightness;
uniform 	vec3 _ES_CharacterAmbientLightColor;
uniform 	float _ES_CharacterMainLightRatio;
uniform 	float _ES_CharacterAmbientLightRatio;
uniform 	float _ES_CharacterColorTone;
uniform 	vec3 mhy_AvatarLightDir;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MTMap;
in mediump vec4 vs_COLOR0;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
mediump vec3 u_xlat16_0;
vec3 u_xlat1;
mediump vec4 u_xlat16_1;
mediump vec4 u_xlat16_2;
lowp vec4 u_xlat10_2;
bool u_xlatb2;
lowp vec3 u_xlat10_3;
bvec2 u_xlatb3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
bool u_xlatb6;
float u_xlat7;
bool u_xlatb7;
vec3 u_xlat8;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
mediump vec3 u_xlat16_11;
vec3 u_xlat12;
mediump vec3 u_xlat16_12;
vec3 u_xlat13;
float u_xlat17;
bool u_xlatb17;
mediump vec3 u_xlat16_19;
vec3 u_xlat21;
mediump vec3 u_xlat16_21;
lowp float u_xlat10_21;
bool u_xlatb21;
bool u_xlatb31;
mediump float u_xlat16_42;
float u_xlat43;
bool u_xlatb43;
bool u_xlatb45;
mediump float u_xlat16_46;
mediump float u_xlat16_47;
void main()
{
    u_xlat16_0.xyz = (uint((gl_FrontFacing ? 0xffffffffu : uint(0))) != uint(0u)) ? vs_TEXCOORD1.xyz : (-vs_TEXCOORD1.xyz);
    u_xlat1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat43 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat43 = inversesqrt(u_xlat43);
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat43) + mhy_AvatarLightDir.xyz;
    u_xlat43 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat43 = inversesqrt(u_xlat43);
    u_xlat1.xyz = vec3(u_xlat43) * u_xlat1.xyz;
    u_xlat10_2 = texture(_MainTex, vs_TEXCOORD0.xy, -1.0);
    u_xlatb3.xy = equal(vec4(_MainTexAlphaUse), vec4(1.0, 2.0, 0.0, 0.0)).xy;
    u_xlat16_42 = u_xlat10_2.w + (-_MainTexAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb43 = !!(u_xlat16_42<0.0);
#else
    u_xlatb43 = u_xlat16_42<0.0;
#endif
    u_xlatb43 = u_xlatb3.x && u_xlatb43;
    if((int(u_xlatb43) * int(0xffffffffu))!=0){discard;}
    u_xlat10_3.xz = texture(_LightMapTex, vs_TEXCOORD0.xy, -1.0).xz;
    u_xlat16_4.xyz = u_xlat10_2.xyz * _Color.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb43 = !!(0.00999999978<u_xlat10_2.w);
#else
    u_xlatb43 = 0.00999999978<u_xlat10_2.w;
#endif
    u_xlatb2 = u_xlatb43 && u_xlatb3.y;
    u_xlat16_42 = (u_xlatb2) ? u_xlat10_2.w : 0.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb17 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorAO));
#else
    u_xlatb17 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorAO);
#endif
    u_xlat16_46 = vs_COLOR0.x * 0.5;
    u_xlat16_5.x = (u_xlatb17) ? u_xlat16_46 : 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb45 = !!(u_xlat16_5.x<0.0500000007);
#else
    u_xlatb45 = u_xlat16_5.x<0.0500000007;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.949999988<u_xlat16_5.x);
#else
    u_xlatb6 = 0.949999988<u_xlat16_5.x;
#endif
    u_xlat7 = u_xlat16_5.x + vs_TEXCOORD1.w;
    u_xlat7 = u_xlat7 * 0.5;
    u_xlat16_5.x = (u_xlatb6) ? 1.0 : u_xlat7;
    u_xlat16_5.x = (u_xlatb45) ? 0.0 : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb17) ? u_xlat16_5.x : vs_TEXCOORD1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlatb17 = !!(u_xlat16_5.x<_LightArea);
#else
    u_xlatb17 = u_xlat16_5.x<_LightArea;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb45 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition));
#else
    u_xlatb45 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition);
#endif
    u_xlat16_5.x = (-u_xlat16_5.x) + _LightArea;
    u_xlat16_5.x = u_xlat16_5.x / _ShadowTransitionRange;
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(u_xlat16_5.x>=1.0);
#else
    u_xlatb7 = u_xlat16_5.x>=1.0;
#endif
    u_xlat16_21.x = u_xlat16_5.x + 0.00999999978;
    u_xlat16_21.x = log2(u_xlat16_21.x);
    u_xlat21.x = u_xlat16_21.x * _ShadowTransitionSoftness;
    u_xlat21.x = exp2(u_xlat21.x);
    u_xlat21.x = min(u_xlat21.x, 1.0);
    u_xlat7 = (u_xlatb7) ? 1.0 : u_xlat21.x;
    u_xlat7 = (u_xlatb45) ? u_xlat7 : 1.0;
    u_xlat7 = u_xlatb17 ? u_xlat7 : float(0.0);
    u_xlat17 = u_xlatb17 ? 1.0 : float(0.0);
    u_xlat17 = ((gl_FrontFacing ? 0xffffffffu : uint(0)) != uint(0u)) ? u_xlat17 : 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(0.899999976<u_xlat10_3.x);
#else
    u_xlatb21 = 0.899999976<u_xlat10_3.x;
#endif
    if(u_xlatb21){
        u_xlat21.xy = u_xlat16_0.yy * hlslcc_mtx4x4unity_WorldToCamera[1].xy;
        u_xlat21.xy = hlslcc_mtx4x4unity_WorldToCamera[0].xy * u_xlat16_0.xx + u_xlat21.xy;
        u_xlat8.yz = hlslcc_mtx4x4unity_WorldToCamera[2].xy * u_xlat16_0.zz + u_xlat21.xy;
        u_xlat8.x = u_xlat8.y * _MTMapTileScale;
        u_xlat16_5.xy = u_xlat8.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
        u_xlat10_21 = texture(_MTMap, u_xlat16_5.xy, -1.0).x;
        u_xlat16_5.x = u_xlat10_21 * _MTMapBrightness;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
        u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
        u_xlat16_19.xyz = _MTMapLightColor.xyz + (-_MTMapDarkColor.xyz);
        u_xlat16_5.xyz = u_xlat16_5.xxx * u_xlat16_19.xyz + _MTMapDarkColor.xyz;
        u_xlat16_5.xyz = u_xlat16_4.xyz * u_xlat16_5.xyz;
        u_xlat16_47 = dot(u_xlat16_0.xyz, u_xlat1.xyz);
        u_xlat16_47 = max(u_xlat16_47, 0.00100000005);
        u_xlat16_47 = log2(u_xlat16_47);
        u_xlat16_47 = u_xlat16_47 * _MTShininess;
        u_xlat16_47 = exp2(u_xlat16_47);
        u_xlat16_47 = u_xlat16_47 * _MTSpecularScale;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_47 = min(max(u_xlat16_47, 0.0), 1.0);
#else
        u_xlat16_47 = clamp(u_xlat16_47, 0.0, 1.0);
#endif
        u_xlat16_9.xyz = vec3(u_xlat16_47) * _MTSpecularColor.xyz;
        u_xlat16_9.xyz = u_xlat10_3.zzz * u_xlat16_9.xyz;
        u_xlat16_10.xyz = u_xlat16_5.xyz * _MTShadowMultiColor.xyz;
        u_xlat16_21.xyz = _MTShadowMultiColor.xyz + vec3(-1.0, -1.0, -1.0);
        u_xlat21.xyz = vec3(u_xlat7) * u_xlat16_21.xyz + vec3(1.0, 1.0, 1.0);
        u_xlat16_11.xyz = (bool(u_xlatb45)) ? u_xlat21.xyz : _MTShadowMultiColor.xyz;
#ifdef UNITY_ADRENO_ES3
        u_xlatb31 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(u_xlat17));
#else
        u_xlatb31 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(u_xlat17);
#endif
        u_xlat16_11.xyz = u_xlat16_5.xyz * u_xlat16_11.xyz;
        u_xlat21.xyz = u_xlat16_5.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
        u_xlat21.xyz = (bool(u_xlatb31)) ? u_xlat16_11.xyz : u_xlat21.xyz;
        u_xlat8.xyz = u_xlat16_9.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
        u_xlat16_21.xyz = u_xlat21.xyz;
        u_xlat16_8.xyz = u_xlat8.xyz;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb31 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex));
#else
        u_xlatb31 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex);
#endif
        u_xlat16_12.xyz = vec3(_FirstShadowMultColor.xxyz.y + (-_CoolShadowMultColor.x), _FirstShadowMultColor.xxyz.z + (-_CoolShadowMultColor.y), float(_FirstShadowMultColor.z) + (-_CoolShadowMultColor.z));
        u_xlat12.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_12.xyz + _CoolShadowMultColor.xyz;
        u_xlat16_5.xyz = (bool(u_xlatb31)) ? u_xlat12.xyz : vec3(_FirstShadowMultColor.x, _FirstShadowMultColor.y, _FirstShadowMultColor.z);
        u_xlat16_10.xyz = u_xlat16_4.xyz * u_xlat16_5.xyz;
        u_xlat16_12.xyz = u_xlat16_5.xyz + vec3(-1.0, -1.0, -1.0);
        u_xlat12.xyz = vec3(u_xlat7) * u_xlat16_12.xyz + vec3(1.0, 1.0, 1.0);
        u_xlat16_5.xyz = (bool(u_xlatb45)) ? u_xlat12.xyz : u_xlat16_5.xyz;
#ifdef UNITY_ADRENO_ES3
        u_xlatb17 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(u_xlat17));
#else
        u_xlatb17 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(u_xlat17);
#endif
        u_xlat16_5.xyz = u_xlat16_4.xyz * u_xlat16_5.xyz;
        u_xlat12.xyz = u_xlat16_4.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
        u_xlat21.xyz = (bool(u_xlatb17)) ? u_xlat16_5.xyz : u_xlat12.xyz;
        u_xlat16_5.x = dot(u_xlat16_0.xyz, u_xlat1.xyz);
        u_xlat16_5.x = max(u_xlat16_5.x, 0.00100000005);
        u_xlat16_5.x = log2(u_xlat16_5.x);
        u_xlat16_5.x = u_xlat16_5.x * _Shininess;
        u_xlat16_5.x = exp2(u_xlat16_5.x);
        u_xlat16_5.xyz = u_xlat16_5.xxx * _SpecularColor.xyz;
        u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(_SpecMulti);
        u_xlat16_5.xyz = u_xlat10_3.xxx * u_xlat16_5.xyz;
        u_xlat8.xyz = u_xlat16_5.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
        u_xlat16_21.xyz = u_xlat21.xyz;
        u_xlat16_8.xyz = u_xlat8.xyz;
    //ENDIF
    }
    u_xlat16_5.xyz = u_xlat16_4.xyz * _EmissionColor_MHY.xyz;
    u_xlat16_9.xyz = u_xlat16_21.xyz + u_xlat16_8.xyz;
    u_xlat16_10.xyz = u_xlat16_8.xyz + u_xlat16_10.xyz;
    u_xlat16_11.xyz = u_xlat16_5.xyz * vec3(vec3(_EmissionScaler, _EmissionScaler, _EmissionScaler)) + (-u_xlat16_9.xyz);
    u_xlat16_11.xyz = vec3(u_xlat16_42) * u_xlat16_11.xyz + u_xlat16_9.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(vec3(_EmissionScaler, _EmissionScaler, _EmissionScaler)) + (-u_xlat16_10.xyz);
    u_xlat16_5.xyz = vec3(u_xlat16_42) * u_xlat16_5.xyz + u_xlat16_10.xyz;
    u_xlat16_9.xyz = (bool(u_xlatb2)) ? u_xlat16_11.xyz : u_xlat16_9.xyz;
    u_xlat16_5.xyz = (bool(u_xlatb2)) ? u_xlat16_5.xyz : u_xlat16_10.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb3.x = !!(0.00999999978<u_xlat16_42);
#else
    u_xlatb3.x = 0.00999999978<u_xlat16_42;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb17 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn));
#else
    u_xlatb17 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn);
#endif
    u_xlat12.xyz = u_xlat16_9.xyz * vec3(vec3(_ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness));
    u_xlat13.xyz = _ES_CharacterMainLightColor.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat13.xyz = vec3(vec3(_ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio)) * u_xlat13.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat12.xyz = u_xlat12.xyz * u_xlat13.xyz;
    u_xlat13.xyz = _ES_CharacterAmbientLightColor.xyz * vec3(_ES_CharacterAmbientLightRatio);
    u_xlat16_10.xyz = u_xlat12.xyz * vec3(10.0, 10.0, 10.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_10.xyz = min(max(u_xlat16_10.xyz, 0.0), 1.0);
#else
    u_xlat16_10.xyz = clamp(u_xlat16_10.xyz, 0.0, 1.0);
#endif
    u_xlat12.xyz = u_xlat13.xyz * u_xlat16_10.xyz + u_xlat12.xyz;
    u_xlat16_10.xyz = (bool(u_xlatb17)) ? u_xlat12.xyz : u_xlat16_9.xyz;
    u_xlat16_11.xyz = u_xlat16_9.xyz + (-u_xlat16_10.xyz);
    u_xlat16_11.xyz = vec3(u_xlat16_42) * u_xlat16_11.xyz + u_xlat16_10.xyz;
    u_xlat16_9.xyz = (-u_xlat16_5.xyz) + u_xlat16_9.xyz;
    u_xlat16_9.xyz = vec3(u_xlat16_42) * u_xlat16_9.xyz + u_xlat16_5.xyz;
    u_xlat16_1.xyz = (u_xlatb3.x) ? u_xlat16_11.xyz : u_xlat16_10.xyz;
    u_xlat16_5.xyz = (u_xlatb3.x) ? u_xlat16_9.xyz : u_xlat16_5.xyz;
    u_xlat16_47 = max(u_xlat16_1.z, u_xlat16_1.y);
    u_xlat16_2.w = max(u_xlat16_1.x, u_xlat16_47);
#ifdef UNITY_ADRENO_ES3
    u_xlatb3.x = !!(1.0<u_xlat16_2.w);
#else
    u_xlatb3.x = 1.0<u_xlat16_2.w;
#endif
    u_xlat16_2.xyz = u_xlat16_1.xyz / u_xlat16_2.www;
    u_xlat16_1.w = 1.0;
    u_xlat16_1 = (u_xlatb3.x) ? u_xlat16_2 : u_xlat16_1;
    u_xlat16_47 = min(u_xlat16_1.w, 1.10000002);
    u_xlat16_9.x = u_xlat16_1.w + (-u_xlat16_47);
    u_xlat16_42 = u_xlat16_42 * u_xlat16_9.x + u_xlat16_47;
    SV_Target1.w = u_xlat16_42 * 0.0500000007;
    SV_Target0.xyz = u_xlat16_0.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb3.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb3.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_0.x = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb3.x) ? u_xlat16_0.x : u_xlat16_5.z;
    SV_Target0.w = 0.0470588244;
    SV_Target1.xyz = u_xlat16_1.xyz;
    SV_Target2.xy = u_xlat16_5.xy;
    SV_Target2.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "NORMAL_MAP_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
float u_xlat12;
void main()
{
    u_xlat0.x = hlslcc_mtx4x4unity_ObjectToWorld[0].y;
    u_xlat0.y = hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat0.z = hlslcc_mtx4x4unity_ObjectToWorld[2].y;
    u_xlat1.xyw = (-_WorldSpaceCameraPos.xyz) + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat0.w = u_xlat1.y;
    u_xlat2.xyz = in_POSITION0.xyz;
    u_xlat2.w = 1.0;
    u_xlat0.x = dot(u_xlat0, u_xlat2);
    u_xlat0 = u_xlat0.xxxx * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat3.w = u_xlat1.x;
    u_xlat3.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;
    u_xlat3.y = hlslcc_mtx4x4unity_ObjectToWorld[1].x;
    u_xlat3.z = hlslcc_mtx4x4unity_ObjectToWorld[2].x;
    u_xlat3.x = dot(u_xlat3, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat3.xxxx + u_xlat0;
    u_xlat1.x = hlslcc_mtx4x4unity_ObjectToWorld[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_ObjectToWorld[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_ObjectToWorld[2].z;
    u_xlat1.x = dot(u_xlat1, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat1.xxxx + u_xlat0;
    u_xlat1.x = hlslcc_mtx4x4unity_ObjectToWorld[0].w;
    u_xlat1.y = hlslcc_mtx4x4unity_ObjectToWorld[1].w;
    u_xlat1.z = hlslcc_mtx4x4unity_ObjectToWorld[2].w;
    u_xlat1.w = hlslcc_mtx4x4unity_ObjectToWorld[3].w;
    u_xlat1.x = dot(u_xlat1, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[3] * u_xlat1.xxxx + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD1 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.zw = u_xlat0.zw;
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD3.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
    u_xlat12 = in_TANGENT0.w * unity_WorldTransformParams.w;
    u_xlat2.xyz = vec3(u_xlat12) * u_xlat2.xyz;
    vs_TEXCOORD4.y = u_xlat2.x;
    vs_TEXCOORD4.x = u_xlat1.z;
    vs_TEXCOORD4.z = u_xlat0.y;
    vs_TEXCOORD5.x = u_xlat1.x;
    vs_TEXCOORD6.x = u_xlat1.y;
    vs_TEXCOORD5.z = u_xlat0.z;
    vs_TEXCOORD6.z = u_xlat0.x;
    vs_TEXCOORD5.y = u_xlat2.y;
    vs_TEXCOORD6.y = u_xlat2.z;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	mediump vec4 _Color;
uniform 	float _MainTexAlphaUse;
uniform 	mediump float _MainTexAlphaCutoff;
uniform 	mediump float _BumpScale;
uniform 	float _UseVertexColorAO;
uniform 	mediump float _LightArea;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	float _UseCoolShadowColorOrTex;
uniform 	mediump vec3 _CoolShadowMultColor;
uniform 	float _UseShadowTransition;
uniform 	float _ShadowTransitionRange;
uniform 	float _ShadowTransitionSoftness;
uniform 	mediump vec3 _SpecularColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump float _EmissionScaler;
uniform 	mediump vec3 _EmissionColor_MHY;
uniform 	float _ES_CharacterAmbientLightOn;
uniform 	float _ES_CharacterAmbientBrightness;
uniform 	vec3 _ES_CharacterMainLightColor;
uniform 	float _ES_CharacterMainLightBrightness;
uniform 	vec3 _ES_CharacterAmbientLightColor;
uniform 	float _ES_CharacterMainLightRatio;
uniform 	float _ES_CharacterAmbientLightRatio;
uniform 	float _ES_CharacterColorTone;
uniform 	vec3 mhy_AvatarLightDir;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MainTex;
in mediump vec4 vs_COLOR0;
in highp vec2 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD5;
in highp vec3 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec4 u_xlat0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
vec3 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
bool u_xlatb1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump vec4 u_xlat16_3;
bool u_xlatb3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
bool u_xlatb8;
bool u_xlatb11;
float u_xlat16;
mediump float u_xlat16_16;
bool u_xlatb16;
float u_xlat24;
bool u_xlatb24;
mediump float u_xlat16_26;
bool u_xlatb27;
mediump float u_xlat16_28;
mediump float u_xlat16_29;
void main()
{
    u_xlatb0.xy = equal(vec4(_MainTexAlphaUse), vec4(1.0, 2.0, 0.0, 0.0)).xy;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy, -1.0);
    u_xlat16_2.x = u_xlat10_1.w + (-_MainTexAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(u_xlat16_2.x<0.0);
#else
    u_xlatb16 = u_xlat16_2.x<0.0;
#endif
    u_xlatb0.x = u_xlatb0.x && u_xlatb16;
    if((int(u_xlatb0.x) * int(0xffffffffu))!=0){discard;}
    u_xlat10_0.xzw = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xzw * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_2.xy = u_xlat16_2.xy * vec2(vec2(_BumpScale, _BumpScale));
    u_xlat3.x = dot(vs_TEXCOORD4.xyz, u_xlat16_2.xyz);
    u_xlat3.y = dot(vs_TEXCOORD5.xyz, u_xlat16_2.xyz);
    u_xlat3.z = dot(vs_TEXCOORD6.xyz, u_xlat16_2.xyz);
    u_xlat16_2.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat16_2.x = inversesqrt(u_xlat16_2.x);
    u_xlat16_2.xyz = u_xlat16_2.xxx * u_xlat3.xyz;
    SV_Target0.xyz = u_xlat16_2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0470588244;
    u_xlat0.xzw = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat0.xzw = u_xlat0.xzw * u_xlat3.xxx + mhy_AvatarLightDir.xyz;
    u_xlat3.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat0.xzw = u_xlat0.xzw * u_xlat3.xxx;
    u_xlat16_26 = dot(u_xlat16_2.xyz, u_xlat0.xzw);
    u_xlat16_2.x = dot(u_xlat16_2.xyz, mhy_AvatarLightDir.xyz);
    u_xlat0.x = u_xlat16_2.x * 0.497500002 + 0.5;
    u_xlat16_2.x = max(u_xlat16_26, 0.00100000005);
    u_xlat16_2.x = log2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * _Shininess;
    u_xlat16_2.x = exp2(u_xlat16_2.x);
    u_xlat16_2.xyz = u_xlat16_2.xxx * _SpecularColor.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(_SpecMulti);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(0.5, 0.5, 0.5);
    u_xlat16_26 = vs_COLOR0.x * 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorAO));
#else
    u_xlatb16 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorAO);
#endif
    u_xlat16_26 = (u_xlatb16) ? u_xlat16_26 : 0.5;
    u_xlat24 = u_xlat0.x + u_xlat16_26;
    u_xlat24 = u_xlat24 * 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(0.949999988<u_xlat16_26);
#else
    u_xlatb3 = 0.949999988<u_xlat16_26;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb11 = !!(u_xlat16_26<0.0500000007);
#else
    u_xlatb11 = u_xlat16_26<0.0500000007;
#endif
    u_xlat16_26 = (u_xlatb3) ? 1.0 : u_xlat24;
    u_xlat16_26 = (u_xlatb11) ? 0.0 : u_xlat16_26;
    u_xlat16_26 = (u_xlatb16) ? u_xlat16_26 : u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(u_xlat16_26<_LightArea);
#else
    u_xlatb0.x = u_xlat16_26<_LightArea;
#endif
    u_xlat16_26 = (-u_xlat16_26) + _LightArea;
    u_xlat16_26 = u_xlat16_26 / _ShadowTransitionRange;
    u_xlat16_16 = u_xlat16_26 + 0.00999999978;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(u_xlat16_26>=1.0);
#else
    u_xlatb24 = u_xlat16_26>=1.0;
#endif
    u_xlat16_16 = log2(u_xlat16_16);
    u_xlat16 = u_xlat16_16 * _ShadowTransitionSoftness;
    u_xlat16 = exp2(u_xlat16);
    u_xlat16 = min(u_xlat16, 1.0);
    u_xlat16 = (u_xlatb24) ? 1.0 : u_xlat16;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition));
#else
    u_xlatb24 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition);
#endif
    u_xlat16 = (u_xlatb24) ? u_xlat16 : 1.0;
    u_xlat16 = u_xlatb0.x ? u_xlat16 : float(0.0);
    u_xlat16_3.xyz = vec3(_FirstShadowMultColor.xxyz.y + (-_CoolShadowMultColor.x), _FirstShadowMultColor.xxyz.z + (-_CoolShadowMultColor.y), float(_FirstShadowMultColor.z) + (-_CoolShadowMultColor.z));
    u_xlat3.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_3.xyz + _CoolShadowMultColor.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex));
#else
    u_xlatb27 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex);
#endif
    u_xlat16_4.xyz = (bool(u_xlatb27)) ? u_xlat3.xyz : vec3(_FirstShadowMultColor.x, _FirstShadowMultColor.y, _FirstShadowMultColor.z);
    u_xlat16_3.xyz = u_xlat16_4.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat3.xyz = vec3(u_xlat16) * u_xlat16_3.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_5.xyz = (bool(u_xlatb24)) ? u_xlat3.xyz : u_xlat16_4.xyz;
    u_xlat16_6.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_6.xyz;
    u_xlat1.xyz = u_xlat16_6.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
    u_xlat0.xzw = (u_xlatb0.x) ? u_xlat16_5.xyz : u_xlat1.xyz;
    u_xlat16_5.xyz = u_xlat16_2.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness)) + u_xlat0.xzw;
    u_xlat0.xzw = u_xlat16_2.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
    u_xlat16_2.xyz = u_xlat16_6.xyz * u_xlat16_4.xyz + u_xlat0.xzw;
    u_xlat16_4.xyz = u_xlat16_6.xyz * _EmissionColor_MHY.xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * vec3(vec3(_EmissionScaler, _EmissionScaler, _EmissionScaler)) + (-u_xlat16_5.xyz);
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(vec3(_EmissionScaler, _EmissionScaler, _EmissionScaler)) + (-u_xlat16_2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(0.00999999978<u_xlat10_1.w);
#else
    u_xlatb0.x = 0.00999999978<u_xlat10_1.w;
#endif
    u_xlatb0.x = u_xlatb0.x && u_xlatb0.y;
    u_xlat16_26 = (u_xlatb0.x) ? u_xlat10_1.w : 0.0;
    u_xlat16_6.xyz = vec3(u_xlat16_26) * u_xlat16_6.xyz + u_xlat16_5.xyz;
    u_xlat16_5.xyz = (u_xlatb0.x) ? u_xlat16_6.xyz : u_xlat16_5.xyz;
    u_xlat8.xyz = u_xlat16_5.xyz * vec3(vec3(_ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness));
    u_xlat1.xyz = _ES_CharacterMainLightColor.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat1.xyz = vec3(vec3(_ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio)) * u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat8.xyz = u_xlat8.xyz * u_xlat1.xyz;
    u_xlat16_6.xyz = u_xlat8.xyz * vec3(10.0, 10.0, 10.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.xyz = min(max(u_xlat16_6.xyz, 0.0), 1.0);
#else
    u_xlat16_6.xyz = clamp(u_xlat16_6.xyz, 0.0, 1.0);
#endif
    u_xlat1.xyz = _ES_CharacterAmbientLightColor.xyz * vec3(_ES_CharacterAmbientLightRatio);
    u_xlat8.xyz = u_xlat1.xyz * u_xlat16_6.xyz + u_xlat8.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn));
#else
    u_xlatb1 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn);
#endif
    u_xlat16_6.xyz = (bool(u_xlatb1)) ? u_xlat8.xyz : u_xlat16_5.xyz;
    u_xlat16_7.xyz = u_xlat16_5.xyz + (-u_xlat16_6.xyz);
    u_xlat16_7.xyz = vec3(u_xlat16_26) * u_xlat16_7.xyz + u_xlat16_6.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.00999999978<u_xlat16_26);
#else
    u_xlatb8 = 0.00999999978<u_xlat16_26;
#endif
    u_xlat16_1.xyz = (bool(u_xlatb8)) ? u_xlat16_7.xyz : u_xlat16_6.xyz;
    u_xlat16_28 = max(u_xlat16_1.z, u_xlat16_1.y);
    u_xlat16_3.w = max(u_xlat16_1.x, u_xlat16_28);
    u_xlat16_3.xyz = u_xlat16_1.xyz / u_xlat16_3.www;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(1.0<u_xlat16_3.w);
#else
    u_xlatb16 = 1.0<u_xlat16_3.w;
#endif
    u_xlat16_1.w = 1.0;
    u_xlat16_1 = (bool(u_xlatb16)) ? u_xlat16_3 : u_xlat16_1;
    u_xlat16_28 = min(u_xlat16_1.w, 1.10000002);
    u_xlat16_29 = u_xlat16_1.w + (-u_xlat16_28);
    SV_Target1.xyz = u_xlat16_1.xyz;
    u_xlat16_28 = u_xlat16_26 * u_xlat16_29 + u_xlat16_28;
    SV_Target1.w = u_xlat16_28 * 0.0500000007;
    u_xlat16_4.xyz = vec3(u_xlat16_26) * u_xlat16_4.xyz + u_xlat16_2.xyz;
    u_xlat16_2.xyz = (u_xlatb0.x) ? u_xlat16_4.xyz : u_xlat16_2.xyz;
    u_xlat16_4.xyz = (-u_xlat16_2.xyz) + u_xlat16_5.xyz;
    u_xlat16_4.xyz = vec3(u_xlat16_26) * u_xlat16_4.xyz + u_xlat16_2.xyz;
    u_xlat16_2.xyz = (bool(u_xlatb8)) ? u_xlat16_4.xyz : u_xlat16_2.xyz;
    SV_Target2.xy = u_xlat16_2.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_2.x = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb0.x) ? u_xlat16_2.x : u_xlat16_2.z;
    SV_Target2.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "MSAA_INTERPOLATION" "NORMAL_MAP_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
float u_xlat12;
void main()
{
    u_xlat0.x = hlslcc_mtx4x4unity_ObjectToWorld[0].y;
    u_xlat0.y = hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat0.z = hlslcc_mtx4x4unity_ObjectToWorld[2].y;
    u_xlat1.xyw = (-_WorldSpaceCameraPos.xyz) + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat0.w = u_xlat1.y;
    u_xlat2.xyz = in_POSITION0.xyz;
    u_xlat2.w = 1.0;
    u_xlat0.x = dot(u_xlat0, u_xlat2);
    u_xlat0 = u_xlat0.xxxx * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat3.w = u_xlat1.x;
    u_xlat3.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;
    u_xlat3.y = hlslcc_mtx4x4unity_ObjectToWorld[1].x;
    u_xlat3.z = hlslcc_mtx4x4unity_ObjectToWorld[2].x;
    u_xlat3.x = dot(u_xlat3, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat3.xxxx + u_xlat0;
    u_xlat1.x = hlslcc_mtx4x4unity_ObjectToWorld[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_ObjectToWorld[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_ObjectToWorld[2].z;
    u_xlat1.x = dot(u_xlat1, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat1.xxxx + u_xlat0;
    u_xlat1.x = hlslcc_mtx4x4unity_ObjectToWorld[0].w;
    u_xlat1.y = hlslcc_mtx4x4unity_ObjectToWorld[1].w;
    u_xlat1.z = hlslcc_mtx4x4unity_ObjectToWorld[2].w;
    u_xlat1.w = hlslcc_mtx4x4unity_ObjectToWorld[3].w;
    u_xlat1.x = dot(u_xlat1, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[3] * u_xlat1.xxxx + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD1 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.zw = u_xlat0.zw;
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD3.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
    u_xlat12 = in_TANGENT0.w * unity_WorldTransformParams.w;
    u_xlat2.xyz = vec3(u_xlat12) * u_xlat2.xyz;
    vs_TEXCOORD4.y = u_xlat2.x;
    vs_TEXCOORD4.x = u_xlat1.z;
    vs_TEXCOORD4.z = u_xlat0.y;
    vs_TEXCOORD5.x = u_xlat1.x;
    vs_TEXCOORD6.x = u_xlat1.y;
    vs_TEXCOORD5.z = u_xlat0.z;
    vs_TEXCOORD6.z = u_xlat0.x;
    vs_TEXCOORD5.y = u_xlat2.y;
    vs_TEXCOORD6.y = u_xlat2.z;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	mediump vec4 _Color;
uniform 	float _MainTexAlphaUse;
uniform 	mediump float _MainTexAlphaCutoff;
uniform 	mediump float _BumpScale;
uniform 	float _UseVertexColorAO;
uniform 	mediump float _LightArea;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	float _UseCoolShadowColorOrTex;
uniform 	mediump vec3 _CoolShadowMultColor;
uniform 	float _UseShadowTransition;
uniform 	float _ShadowTransitionRange;
uniform 	float _ShadowTransitionSoftness;
uniform 	mediump vec3 _SpecularColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump float _EmissionScaler;
uniform 	mediump vec3 _EmissionColor_MHY;
uniform 	float _ES_CharacterAmbientLightOn;
uniform 	float _ES_CharacterAmbientBrightness;
uniform 	vec3 _ES_CharacterMainLightColor;
uniform 	float _ES_CharacterMainLightBrightness;
uniform 	vec3 _ES_CharacterAmbientLightColor;
uniform 	float _ES_CharacterMainLightRatio;
uniform 	float _ES_CharacterAmbientLightRatio;
uniform 	float _ES_CharacterColorTone;
uniform 	vec3 mhy_AvatarLightDir;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MainTex;
in mediump vec4 vs_COLOR0;
in highp vec2 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD5;
in highp vec3 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec4 u_xlat0;
lowp vec3 u_xlat10_0;
bool u_xlatb0;
vec3 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
bool u_xlatb1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump vec4 u_xlat16_3;
bool u_xlatb3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
mediump float u_xlat16_8;
bvec2 u_xlatb8;
bool u_xlatb11;
vec2 u_xlat16;
bool u_xlatb16;
float u_xlat24;
bool u_xlatb24;
mediump float u_xlat16_26;
bool u_xlatb27;
mediump float u_xlat16_28;
mediump float u_xlat16_29;
void main()
{
    u_xlat0.xy = dFdx(vs_TEXCOORD0.xy);
    u_xlat16.xy = dFdy(vs_TEXCOORD0.xy);
    u_xlat0.xy = u_xlat16.xy + u_xlat0.xy;
    u_xlat16.xy = (-u_xlat0.xy) * vec2(0.25, 0.25) + vs_TEXCOORD0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25) + vs_TEXCOORD0.xy;
    u_xlat0.xy = (int(gl_SampleID) != 0) ? u_xlat16.xy : u_xlat0.xy;
    u_xlat10_1 = textureLod(_MainTex, u_xlat0.xy, 0.0);
    u_xlat10_0.xyz = textureLod(_BumpMap, u_xlat0.xy, 0.0).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_26 = u_xlat10_1.w + (-_MainTexAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat16_26<0.0);
#else
    u_xlatb0 = u_xlat16_26<0.0;
#endif
    u_xlatb8.xy = equal(vec4(_MainTexAlphaUse), vec4(1.0, 2.0, 0.0, 0.0)).xy;
    u_xlatb0 = u_xlatb8.x && u_xlatb0;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat16_2.xy = u_xlat16_2.xy * vec2(vec2(_BumpScale, _BumpScale));
    u_xlat3.x = dot(vs_TEXCOORD4.xyz, u_xlat16_2.xyz);
    u_xlat3.y = dot(vs_TEXCOORD5.xyz, u_xlat16_2.xyz);
    u_xlat3.z = dot(vs_TEXCOORD6.xyz, u_xlat16_2.xyz);
    u_xlat16_2.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat16_2.x = inversesqrt(u_xlat16_2.x);
    u_xlat16_2.xyz = u_xlat16_2.xxx * u_xlat3.xyz;
    SV_Target0.xyz = u_xlat16_2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0470588244;
    u_xlat0.xyw = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3.x = dot(u_xlat0.xyw, u_xlat0.xyw);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat0.xyw = u_xlat0.xyw * u_xlat3.xxx + mhy_AvatarLightDir.xyz;
    u_xlat3.x = dot(u_xlat0.xyw, u_xlat0.xyw);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat0.xyw = u_xlat0.xyw * u_xlat3.xxx;
    u_xlat16_26 = dot(u_xlat16_2.xyz, u_xlat0.xyw);
    u_xlat16_2.x = dot(u_xlat16_2.xyz, mhy_AvatarLightDir.xyz);
    u_xlat0.x = u_xlat16_2.x * 0.497500002 + 0.5;
    u_xlat16_2.x = max(u_xlat16_26, 0.00100000005);
    u_xlat16_2.x = log2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * _Shininess;
    u_xlat16_2.x = exp2(u_xlat16_2.x);
    u_xlat16_2.xyz = u_xlat16_2.xxx * _SpecularColor.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(_SpecMulti);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(0.5, 0.5, 0.5);
    u_xlat16_26 = vs_COLOR0.x * 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorAO));
#else
    u_xlatb8.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorAO);
#endif
    u_xlat16_26 = (u_xlatb8.x) ? u_xlat16_26 : 0.5;
    u_xlat24 = u_xlat0.x + u_xlat16_26;
    u_xlat24 = u_xlat24 * 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(0.949999988<u_xlat16_26);
#else
    u_xlatb3 = 0.949999988<u_xlat16_26;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb11 = !!(u_xlat16_26<0.0500000007);
#else
    u_xlatb11 = u_xlat16_26<0.0500000007;
#endif
    u_xlat16_26 = (u_xlatb3) ? 1.0 : u_xlat24;
    u_xlat16_26 = (u_xlatb11) ? 0.0 : u_xlat16_26;
    u_xlat16_26 = (u_xlatb8.x) ? u_xlat16_26 : u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat16_26<_LightArea);
#else
    u_xlatb0 = u_xlat16_26<_LightArea;
#endif
    u_xlat16_26 = (-u_xlat16_26) + _LightArea;
    u_xlat16_26 = u_xlat16_26 / _ShadowTransitionRange;
    u_xlat16_8 = u_xlat16_26 + 0.00999999978;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(u_xlat16_26>=1.0);
#else
    u_xlatb24 = u_xlat16_26>=1.0;
#endif
    u_xlat16_8 = log2(u_xlat16_8);
    u_xlat8.x = u_xlat16_8 * _ShadowTransitionSoftness;
    u_xlat8.x = exp2(u_xlat8.x);
    u_xlat8.x = min(u_xlat8.x, 1.0);
    u_xlat8.x = (u_xlatb24) ? 1.0 : u_xlat8.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition));
#else
    u_xlatb24 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition);
#endif
    u_xlat8.x = (u_xlatb24) ? u_xlat8.x : 1.0;
    u_xlat8.x = u_xlatb0 ? u_xlat8.x : float(0.0);
    u_xlat16_3.xyz = vec3(_FirstShadowMultColor.xxyz.y + (-_CoolShadowMultColor.x), _FirstShadowMultColor.xxyz.z + (-_CoolShadowMultColor.y), float(_FirstShadowMultColor.z) + (-_CoolShadowMultColor.z));
    u_xlat3.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_3.xyz + _CoolShadowMultColor.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex));
#else
    u_xlatb27 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex);
#endif
    u_xlat16_4.xyz = (bool(u_xlatb27)) ? u_xlat3.xyz : vec3(_FirstShadowMultColor.x, _FirstShadowMultColor.y, _FirstShadowMultColor.z);
    u_xlat16_3.xyz = u_xlat16_4.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat3.xyz = u_xlat8.xxx * u_xlat16_3.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_5.xyz = (bool(u_xlatb24)) ? u_xlat3.xyz : u_xlat16_4.xyz;
    u_xlat16_6.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_6.xyz;
    u_xlat1.xyz = u_xlat16_6.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
    u_xlat0.xyw = (bool(u_xlatb0)) ? u_xlat16_5.xyz : u_xlat1.xyz;
    u_xlat16_5.xyz = u_xlat16_2.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness)) + u_xlat0.xyw;
    u_xlat0.xyw = u_xlat16_2.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
    u_xlat16_2.xyz = u_xlat16_6.xyz * u_xlat16_4.xyz + u_xlat0.xyw;
    u_xlat16_4.xyz = u_xlat16_6.xyz * _EmissionColor_MHY.xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * vec3(vec3(_EmissionScaler, _EmissionScaler, _EmissionScaler)) + (-u_xlat16_5.xyz);
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(vec3(_EmissionScaler, _EmissionScaler, _EmissionScaler)) + (-u_xlat16_2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.00999999978<u_xlat10_1.w);
#else
    u_xlatb0 = 0.00999999978<u_xlat10_1.w;
#endif
    u_xlatb0 = u_xlatb0 && u_xlatb8.y;
    u_xlat16_26 = (u_xlatb0) ? u_xlat10_1.w : 0.0;
    u_xlat16_6.xyz = vec3(u_xlat16_26) * u_xlat16_6.xyz + u_xlat16_5.xyz;
    u_xlat16_5.xyz = (bool(u_xlatb0)) ? u_xlat16_6.xyz : u_xlat16_5.xyz;
    u_xlat8.xyz = u_xlat16_5.xyz * vec3(vec3(_ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness));
    u_xlat1.xyz = _ES_CharacterMainLightColor.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat1.xyz = vec3(vec3(_ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio)) * u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat8.xyz = u_xlat8.xyz * u_xlat1.xyz;
    u_xlat16_6.xyz = u_xlat8.xyz * vec3(10.0, 10.0, 10.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.xyz = min(max(u_xlat16_6.xyz, 0.0), 1.0);
#else
    u_xlat16_6.xyz = clamp(u_xlat16_6.xyz, 0.0, 1.0);
#endif
    u_xlat1.xyz = _ES_CharacterAmbientLightColor.xyz * vec3(_ES_CharacterAmbientLightRatio);
    u_xlat8.xyz = u_xlat1.xyz * u_xlat16_6.xyz + u_xlat8.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn));
#else
    u_xlatb1 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn);
#endif
    u_xlat16_6.xyz = (bool(u_xlatb1)) ? u_xlat8.xyz : u_xlat16_5.xyz;
    u_xlat16_7.xyz = u_xlat16_5.xyz + (-u_xlat16_6.xyz);
    u_xlat16_7.xyz = vec3(u_xlat16_26) * u_xlat16_7.xyz + u_xlat16_6.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8.x = !!(0.00999999978<u_xlat16_26);
#else
    u_xlatb8.x = 0.00999999978<u_xlat16_26;
#endif
    u_xlat16_1.xyz = (u_xlatb8.x) ? u_xlat16_7.xyz : u_xlat16_6.xyz;
    u_xlat16_28 = max(u_xlat16_1.z, u_xlat16_1.y);
    u_xlat16_3.w = max(u_xlat16_1.x, u_xlat16_28);
    u_xlat16_3.xyz = u_xlat16_1.xyz / u_xlat16_3.www;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(1.0<u_xlat16_3.w);
#else
    u_xlatb16 = 1.0<u_xlat16_3.w;
#endif
    u_xlat16_1.w = 1.0;
    u_xlat16_1 = (bool(u_xlatb16)) ? u_xlat16_3 : u_xlat16_1;
    u_xlat16_28 = min(u_xlat16_1.w, 1.10000002);
    u_xlat16_29 = u_xlat16_1.w + (-u_xlat16_28);
    SV_Target1.xyz = u_xlat16_1.xyz;
    u_xlat16_28 = u_xlat16_26 * u_xlat16_29 + u_xlat16_28;
    SV_Target1.w = u_xlat16_28 * 0.0500000007;
    u_xlat16_4.xyz = vec3(u_xlat16_26) * u_xlat16_4.xyz + u_xlat16_2.xyz;
    u_xlat16_2.xyz = (bool(u_xlatb0)) ? u_xlat16_4.xyz : u_xlat16_2.xyz;
    u_xlat16_4.xyz = (-u_xlat16_2.xyz) + u_xlat16_5.xyz;
    u_xlat16_4.xyz = vec3(u_xlat16_26) * u_xlat16_4.xyz + u_xlat16_2.xyz;
    u_xlat16_2.xyz = (u_xlatb8.x) ? u_xlat16_4.xyz : u_xlat16_2.xyz;
    SV_Target2.xy = u_xlat16_2.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_2.x = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb0) ? u_xlat16_2.x : u_xlat16_2.z;
    SV_Target2.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "LINE_INTERPOLATION" "NORMAL_MAP_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
float u_xlat12;
void main()
{
    u_xlat0.x = hlslcc_mtx4x4unity_ObjectToWorld[0].y;
    u_xlat0.y = hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat0.z = hlslcc_mtx4x4unity_ObjectToWorld[2].y;
    u_xlat1.xyw = (-_WorldSpaceCameraPos.xyz) + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat0.w = u_xlat1.y;
    u_xlat2.xyz = in_POSITION0.xyz;
    u_xlat2.w = 1.0;
    u_xlat0.x = dot(u_xlat0, u_xlat2);
    u_xlat0 = u_xlat0.xxxx * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat3.w = u_xlat1.x;
    u_xlat3.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;
    u_xlat3.y = hlslcc_mtx4x4unity_ObjectToWorld[1].x;
    u_xlat3.z = hlslcc_mtx4x4unity_ObjectToWorld[2].x;
    u_xlat3.x = dot(u_xlat3, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat3.xxxx + u_xlat0;
    u_xlat1.x = hlslcc_mtx4x4unity_ObjectToWorld[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_ObjectToWorld[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_ObjectToWorld[2].z;
    u_xlat1.x = dot(u_xlat1, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat1.xxxx + u_xlat0;
    u_xlat1.x = hlslcc_mtx4x4unity_ObjectToWorld[0].w;
    u_xlat1.y = hlslcc_mtx4x4unity_ObjectToWorld[1].w;
    u_xlat1.z = hlslcc_mtx4x4unity_ObjectToWorld[2].w;
    u_xlat1.w = hlslcc_mtx4x4unity_ObjectToWorld[3].w;
    u_xlat1.x = dot(u_xlat1, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[3] * u_xlat1.xxxx + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD1 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.zw = u_xlat0.zw;
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD3.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
    u_xlat12 = in_TANGENT0.w * unity_WorldTransformParams.w;
    u_xlat2.xyz = vec3(u_xlat12) * u_xlat2.xyz;
    vs_TEXCOORD4.y = u_xlat2.x;
    vs_TEXCOORD4.x = u_xlat1.z;
    vs_TEXCOORD4.z = u_xlat0.y;
    vs_TEXCOORD5.x = u_xlat1.x;
    vs_TEXCOORD6.x = u_xlat1.y;
    vs_TEXCOORD5.z = u_xlat0.z;
    vs_TEXCOORD6.z = u_xlat0.x;
    vs_TEXCOORD5.y = u_xlat2.y;
    vs_TEXCOORD6.y = u_xlat2.z;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	mediump vec4 _Color;
uniform 	float _MainTexAlphaUse;
uniform 	mediump float _MainTexAlphaCutoff;
uniform 	mediump float _BumpScale;
uniform 	float _UseVertexColorAO;
uniform 	mediump float _LightArea;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	float _UseCoolShadowColorOrTex;
uniform 	mediump vec3 _CoolShadowMultColor;
uniform 	float _UseShadowTransition;
uniform 	float _ShadowTransitionRange;
uniform 	float _ShadowTransitionSoftness;
uniform 	mediump vec3 _SpecularColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump float _EmissionScaler;
uniform 	mediump vec3 _EmissionColor_MHY;
uniform 	float _ES_CharacterAmbientLightOn;
uniform 	float _ES_CharacterAmbientBrightness;
uniform 	vec3 _ES_CharacterMainLightColor;
uniform 	float _ES_CharacterMainLightBrightness;
uniform 	vec3 _ES_CharacterAmbientLightColor;
uniform 	float _ES_CharacterMainLightRatio;
uniform 	float _ES_CharacterAmbientLightRatio;
uniform 	float _ES_CharacterColorTone;
uniform 	vec3 mhy_AvatarLightDir;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MainTex;
in mediump vec4 vs_COLOR0;
in highp vec2 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD5;
in highp vec3 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec4 u_xlat0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
vec3 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
bool u_xlatb1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump vec4 u_xlat16_3;
bool u_xlatb3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
bool u_xlatb8;
bool u_xlatb11;
float u_xlat16;
mediump float u_xlat16_16;
bool u_xlatb16;
float u_xlat24;
bool u_xlatb24;
mediump float u_xlat16_26;
bool u_xlatb27;
mediump float u_xlat16_28;
mediump float u_xlat16_29;
void main()
{
    u_xlatb0.xy = equal(vec4(_MainTexAlphaUse), vec4(1.0, 2.0, 0.0, 0.0)).xy;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy, -1.0);
    u_xlat16_2.x = u_xlat10_1.w + (-_MainTexAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(u_xlat16_2.x<0.0);
#else
    u_xlatb16 = u_xlat16_2.x<0.0;
#endif
    u_xlatb0.x = u_xlatb0.x && u_xlatb16;
    if((int(u_xlatb0.x) * int(0xffffffffu))!=0){discard;}
    u_xlat10_0.xzw = texture(_BumpMap, vs_TEXCOORD0.xy, -1.0).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xzw * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_2.xy = u_xlat16_2.xy * vec2(vec2(_BumpScale, _BumpScale));
    u_xlat3.x = dot(vs_TEXCOORD4.xyz, u_xlat16_2.xyz);
    u_xlat3.y = dot(vs_TEXCOORD5.xyz, u_xlat16_2.xyz);
    u_xlat3.z = dot(vs_TEXCOORD6.xyz, u_xlat16_2.xyz);
    u_xlat16_2.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat16_2.x = inversesqrt(u_xlat16_2.x);
    u_xlat16_2.xyz = u_xlat16_2.xxx * u_xlat3.xyz;
    SV_Target0.xyz = u_xlat16_2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0470588244;
    u_xlat0.xzw = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat0.xzw = u_xlat0.xzw * u_xlat3.xxx + mhy_AvatarLightDir.xyz;
    u_xlat3.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat0.xzw = u_xlat0.xzw * u_xlat3.xxx;
    u_xlat16_26 = dot(u_xlat16_2.xyz, u_xlat0.xzw);
    u_xlat16_2.x = dot(u_xlat16_2.xyz, mhy_AvatarLightDir.xyz);
    u_xlat0.x = u_xlat16_2.x * 0.497500002 + 0.5;
    u_xlat16_2.x = max(u_xlat16_26, 0.00100000005);
    u_xlat16_2.x = log2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * _Shininess;
    u_xlat16_2.x = exp2(u_xlat16_2.x);
    u_xlat16_2.xyz = u_xlat16_2.xxx * _SpecularColor.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(_SpecMulti);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(0.5, 0.5, 0.5);
    u_xlat16_26 = vs_COLOR0.x * 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorAO));
#else
    u_xlatb16 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorAO);
#endif
    u_xlat16_26 = (u_xlatb16) ? u_xlat16_26 : 0.5;
    u_xlat24 = u_xlat0.x + u_xlat16_26;
    u_xlat24 = u_xlat24 * 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(0.949999988<u_xlat16_26);
#else
    u_xlatb3 = 0.949999988<u_xlat16_26;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb11 = !!(u_xlat16_26<0.0500000007);
#else
    u_xlatb11 = u_xlat16_26<0.0500000007;
#endif
    u_xlat16_26 = (u_xlatb3) ? 1.0 : u_xlat24;
    u_xlat16_26 = (u_xlatb11) ? 0.0 : u_xlat16_26;
    u_xlat16_26 = (u_xlatb16) ? u_xlat16_26 : u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(u_xlat16_26<_LightArea);
#else
    u_xlatb0.x = u_xlat16_26<_LightArea;
#endif
    u_xlat16_26 = (-u_xlat16_26) + _LightArea;
    u_xlat16_26 = u_xlat16_26 / _ShadowTransitionRange;
    u_xlat16_16 = u_xlat16_26 + 0.00999999978;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(u_xlat16_26>=1.0);
#else
    u_xlatb24 = u_xlat16_26>=1.0;
#endif
    u_xlat16_16 = log2(u_xlat16_16);
    u_xlat16 = u_xlat16_16 * _ShadowTransitionSoftness;
    u_xlat16 = exp2(u_xlat16);
    u_xlat16 = min(u_xlat16, 1.0);
    u_xlat16 = (u_xlatb24) ? 1.0 : u_xlat16;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition));
#else
    u_xlatb24 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition);
#endif
    u_xlat16 = (u_xlatb24) ? u_xlat16 : 1.0;
    u_xlat16 = u_xlatb0.x ? u_xlat16 : float(0.0);
    u_xlat16_3.xyz = vec3(_FirstShadowMultColor.xxyz.y + (-_CoolShadowMultColor.x), _FirstShadowMultColor.xxyz.z + (-_CoolShadowMultColor.y), float(_FirstShadowMultColor.z) + (-_CoolShadowMultColor.z));
    u_xlat3.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_3.xyz + _CoolShadowMultColor.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex));
#else
    u_xlatb27 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex);
#endif
    u_xlat16_4.xyz = (bool(u_xlatb27)) ? u_xlat3.xyz : vec3(_FirstShadowMultColor.x, _FirstShadowMultColor.y, _FirstShadowMultColor.z);
    u_xlat16_3.xyz = u_xlat16_4.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat3.xyz = vec3(u_xlat16) * u_xlat16_3.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_5.xyz = (bool(u_xlatb24)) ? u_xlat3.xyz : u_xlat16_4.xyz;
    u_xlat16_6.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_6.xyz;
    u_xlat1.xyz = u_xlat16_6.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
    u_xlat0.xzw = (u_xlatb0.x) ? u_xlat16_5.xyz : u_xlat1.xyz;
    u_xlat16_5.xyz = u_xlat16_2.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness)) + u_xlat0.xzw;
    u_xlat0.xzw = u_xlat16_2.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
    u_xlat16_2.xyz = u_xlat16_6.xyz * u_xlat16_4.xyz + u_xlat0.xzw;
    u_xlat16_4.xyz = u_xlat16_6.xyz * _EmissionColor_MHY.xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * vec3(vec3(_EmissionScaler, _EmissionScaler, _EmissionScaler)) + (-u_xlat16_5.xyz);
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(vec3(_EmissionScaler, _EmissionScaler, _EmissionScaler)) + (-u_xlat16_2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(0.00999999978<u_xlat10_1.w);
#else
    u_xlatb0.x = 0.00999999978<u_xlat10_1.w;
#endif
    u_xlatb0.x = u_xlatb0.x && u_xlatb0.y;
    u_xlat16_26 = (u_xlatb0.x) ? u_xlat10_1.w : 0.0;
    u_xlat16_6.xyz = vec3(u_xlat16_26) * u_xlat16_6.xyz + u_xlat16_5.xyz;
    u_xlat16_5.xyz = (u_xlatb0.x) ? u_xlat16_6.xyz : u_xlat16_5.xyz;
    u_xlat8.xyz = u_xlat16_5.xyz * vec3(vec3(_ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness));
    u_xlat1.xyz = _ES_CharacterMainLightColor.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat1.xyz = vec3(vec3(_ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio)) * u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat8.xyz = u_xlat8.xyz * u_xlat1.xyz;
    u_xlat16_6.xyz = u_xlat8.xyz * vec3(10.0, 10.0, 10.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.xyz = min(max(u_xlat16_6.xyz, 0.0), 1.0);
#else
    u_xlat16_6.xyz = clamp(u_xlat16_6.xyz, 0.0, 1.0);
#endif
    u_xlat1.xyz = _ES_CharacterAmbientLightColor.xyz * vec3(_ES_CharacterAmbientLightRatio);
    u_xlat8.xyz = u_xlat1.xyz * u_xlat16_6.xyz + u_xlat8.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn));
#else
    u_xlatb1 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn);
#endif
    u_xlat16_6.xyz = (bool(u_xlatb1)) ? u_xlat8.xyz : u_xlat16_5.xyz;
    u_xlat16_7.xyz = u_xlat16_5.xyz + (-u_xlat16_6.xyz);
    u_xlat16_7.xyz = vec3(u_xlat16_26) * u_xlat16_7.xyz + u_xlat16_6.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.00999999978<u_xlat16_26);
#else
    u_xlatb8 = 0.00999999978<u_xlat16_26;
#endif
    u_xlat16_1.xyz = (bool(u_xlatb8)) ? u_xlat16_7.xyz : u_xlat16_6.xyz;
    u_xlat16_28 = max(u_xlat16_1.z, u_xlat16_1.y);
    u_xlat16_3.w = max(u_xlat16_1.x, u_xlat16_28);
    u_xlat16_3.xyz = u_xlat16_1.xyz / u_xlat16_3.www;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(1.0<u_xlat16_3.w);
#else
    u_xlatb16 = 1.0<u_xlat16_3.w;
#endif
    u_xlat16_1.w = 1.0;
    u_xlat16_1 = (bool(u_xlatb16)) ? u_xlat16_3 : u_xlat16_1;
    u_xlat16_28 = min(u_xlat16_1.w, 1.10000002);
    u_xlat16_29 = u_xlat16_1.w + (-u_xlat16_28);
    SV_Target1.xyz = u_xlat16_1.xyz;
    u_xlat16_28 = u_xlat16_26 * u_xlat16_29 + u_xlat16_28;
    SV_Target1.w = u_xlat16_28 * 0.0500000007;
    u_xlat16_4.xyz = vec3(u_xlat16_26) * u_xlat16_4.xyz + u_xlat16_2.xyz;
    u_xlat16_2.xyz = (u_xlatb0.x) ? u_xlat16_4.xyz : u_xlat16_2.xyz;
    u_xlat16_4.xyz = (-u_xlat16_2.xyz) + u_xlat16_5.xyz;
    u_xlat16_4.xyz = vec3(u_xlat16_26) * u_xlat16_4.xyz + u_xlat16_2.xyz;
    u_xlat16_2.xyz = (bool(u_xlatb8)) ? u_xlat16_4.xyz : u_xlat16_2.xyz;
    SV_Target2.xy = u_xlat16_2.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_2.x = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb0.x) ? u_xlat16_2.x : u_xlat16_2.z;
    SV_Target2.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "METAL_MAT" "NORMAL_MAP_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
float u_xlat12;
void main()
{
    u_xlat0.x = hlslcc_mtx4x4unity_ObjectToWorld[0].y;
    u_xlat0.y = hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat0.z = hlslcc_mtx4x4unity_ObjectToWorld[2].y;
    u_xlat1.xyw = (-_WorldSpaceCameraPos.xyz) + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat0.w = u_xlat1.y;
    u_xlat2.xyz = in_POSITION0.xyz;
    u_xlat2.w = 1.0;
    u_xlat0.x = dot(u_xlat0, u_xlat2);
    u_xlat0 = u_xlat0.xxxx * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat3.w = u_xlat1.x;
    u_xlat3.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;
    u_xlat3.y = hlslcc_mtx4x4unity_ObjectToWorld[1].x;
    u_xlat3.z = hlslcc_mtx4x4unity_ObjectToWorld[2].x;
    u_xlat3.x = dot(u_xlat3, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat3.xxxx + u_xlat0;
    u_xlat1.x = hlslcc_mtx4x4unity_ObjectToWorld[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_ObjectToWorld[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_ObjectToWorld[2].z;
    u_xlat1.x = dot(u_xlat1, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat1.xxxx + u_xlat0;
    u_xlat1.x = hlslcc_mtx4x4unity_ObjectToWorld[0].w;
    u_xlat1.y = hlslcc_mtx4x4unity_ObjectToWorld[1].w;
    u_xlat1.z = hlslcc_mtx4x4unity_ObjectToWorld[2].w;
    u_xlat1.w = hlslcc_mtx4x4unity_ObjectToWorld[3].w;
    u_xlat1.x = dot(u_xlat1, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[3] * u_xlat1.xxxx + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD1 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.zw = u_xlat0.zw;
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD3.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
    u_xlat12 = in_TANGENT0.w * unity_WorldTransformParams.w;
    u_xlat2.xyz = vec3(u_xlat12) * u_xlat2.xyz;
    vs_TEXCOORD4.y = u_xlat2.x;
    vs_TEXCOORD4.x = u_xlat1.z;
    vs_TEXCOORD4.z = u_xlat0.y;
    vs_TEXCOORD5.x = u_xlat1.x;
    vs_TEXCOORD6.x = u_xlat1.y;
    vs_TEXCOORD5.z = u_xlat0.z;
    vs_TEXCOORD6.z = u_xlat0.x;
    vs_TEXCOORD5.y = u_xlat2.y;
    vs_TEXCOORD6.y = u_xlat2.z;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToCamera[4];
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	mediump vec4 _Color;
uniform 	float _MainTexAlphaUse;
uniform 	mediump float _MainTexAlphaCutoff;
uniform 	mediump float _BumpScale;
uniform 	float _UseVertexColorAO;
uniform 	mediump float _LightArea;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	float _UseCoolShadowColorOrTex;
uniform 	mediump vec3 _CoolShadowMultColor;
uniform 	float _UseShadowTransition;
uniform 	float _ShadowTransitionRange;
uniform 	float _ShadowTransitionSoftness;
uniform 	mediump vec3 _SpecularColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump float _EmissionScaler;
uniform 	mediump vec3 _EmissionColor_MHY;
uniform 	mediump float _MTMapBrightness;
uniform 	float _MTMapTileScale;
uniform 	mediump vec3 _MTMapLightColor;
uniform 	mediump vec3 _MTMapDarkColor;
uniform 	mediump vec3 _MTShadowMultiColor;
uniform 	mediump float _MTShininess;
uniform 	mediump vec3 _MTSpecularColor;
uniform 	mediump float _MTSpecularScale;
uniform 	float _ES_CharacterAmbientLightOn;
uniform 	float _ES_CharacterAmbientBrightness;
uniform 	vec3 _ES_CharacterMainLightColor;
uniform 	float _ES_CharacterMainLightBrightness;
uniform 	vec3 _ES_CharacterAmbientLightColor;
uniform 	float _ES_CharacterMainLightRatio;
uniform 	float _ES_CharacterAmbientLightRatio;
uniform 	float _ES_CharacterColorTone;
uniform 	vec3 mhy_AvatarLightDir;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MTMap;
in mediump vec4 vs_COLOR0;
in highp vec2 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD5;
in highp vec3 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec3 u_xlat10_0;
mediump vec3 u_xlat16_1;
mediump vec4 u_xlat16_2;
lowp vec4 u_xlat10_2;
bool u_xlatb2;
lowp vec3 u_xlat10_3;
bvec2 u_xlatb3;
mediump vec3 u_xlat16_4;
mediump float u_xlat16_5;
float u_xlat6;
bool u_xlatb6;
vec3 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
vec3 u_xlat11;
mediump vec3 u_xlat16_11;
vec3 u_xlat12;
mediump vec3 u_xlat16_12;
vec3 u_xlat13;
bool u_xlatb17;
mediump vec3 u_xlat16_19;
vec3 u_xlat20;
bool u_xlatb20;
mediump float u_xlat16_22;
float u_xlat34;
bool u_xlatb34;
float u_xlat42;
bool u_xlatb42;
mediump float u_xlat16_43;
float u_xlat48;
mediump float u_xlat16_48;
lowp float u_xlat10_48;
bool u_xlatb48;
void main()
{
    u_xlat10_0.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_1.xy = u_xlat16_1.xy * vec2(vec2(_BumpScale, _BumpScale));
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, u_xlat16_1.xyz);
    u_xlat0.y = dot(vs_TEXCOORD5.xyz, u_xlat16_1.xyz);
    u_xlat0.z = dot(vs_TEXCOORD6.xyz, u_xlat16_1.xyz);
    u_xlat16_1.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat16_1.x = inversesqrt(u_xlat16_1.x);
    u_xlat16_1.xyz = u_xlat0.xyz * u_xlat16_1.xxx;
    u_xlat0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat42 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat42 = inversesqrt(u_xlat42);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat42) + mhy_AvatarLightDir.xyz;
    u_xlat42 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat42 = inversesqrt(u_xlat42);
    u_xlat0.xyz = vec3(u_xlat42) * u_xlat0.xyz;
    u_xlat10_2 = texture(_MainTex, vs_TEXCOORD0.xy, -1.0);
    u_xlatb3.xy = equal(vec4(_MainTexAlphaUse), vec4(1.0, 2.0, 0.0, 0.0)).xy;
    u_xlat16_43 = u_xlat10_2.w + (-_MainTexAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb42 = !!(u_xlat16_43<0.0);
#else
    u_xlatb42 = u_xlat16_43<0.0;
#endif
    u_xlatb3.x = u_xlatb3.x && u_xlatb42;
    if((int(u_xlatb3.x) * int(0xffffffffu))!=0){discard;}
    u_xlat10_3.xz = texture(_LightMapTex, vs_TEXCOORD0.xy, -1.0).xz;
    u_xlat16_4.xyz = u_xlat10_2.xyz * _Color.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(0.00999999978<u_xlat10_2.w);
#else
    u_xlatb2 = 0.00999999978<u_xlat10_2.w;
#endif
    u_xlatb17 = u_xlatb2 && u_xlatb3.y;
    u_xlat16_5 = (u_xlatb17) ? u_xlat10_2.w : 0.0;
    u_xlat16_19.x = dot(u_xlat16_1.xyz, mhy_AvatarLightDir.xyz);
    u_xlat6 = u_xlat16_19.x * 0.497500002 + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb20 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorAO));
#else
    u_xlatb20 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorAO);
#endif
    u_xlat16_19.x = vs_COLOR0.x * 0.5;
    u_xlat16_19.x = (u_xlatb20) ? u_xlat16_19.x : 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb34 = !!(u_xlat16_19.x<0.0500000007);
#else
    u_xlatb34 = u_xlat16_19.x<0.0500000007;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb48 = !!(0.949999988<u_xlat16_19.x);
#else
    u_xlatb48 = 0.949999988<u_xlat16_19.x;
#endif
    u_xlat7.x = u_xlat16_19.x + u_xlat6;
    u_xlat7.x = u_xlat7.x * 0.5;
    u_xlat16_19.x = (u_xlatb48) ? 1.0 : u_xlat7.x;
    u_xlat16_19.x = (u_xlatb34) ? 0.0 : u_xlat16_19.x;
    u_xlat16_19.x = (u_xlatb20) ? u_xlat16_19.x : u_xlat6;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(u_xlat16_19.x<_LightArea);
#else
    u_xlatb6 = u_xlat16_19.x<_LightArea;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb20 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition));
#else
    u_xlatb20 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition);
#endif
    u_xlat16_19.x = (-u_xlat16_19.x) + _LightArea;
    u_xlat16_19.x = u_xlat16_19.x / _ShadowTransitionRange;
#ifdef UNITY_ADRENO_ES3
    u_xlatb34 = !!(u_xlat16_19.x>=1.0);
#else
    u_xlatb34 = u_xlat16_19.x>=1.0;
#endif
    u_xlat16_48 = u_xlat16_19.x + 0.00999999978;
    u_xlat16_48 = log2(u_xlat16_48);
    u_xlat48 = u_xlat16_48 * _ShadowTransitionSoftness;
    u_xlat48 = exp2(u_xlat48);
    u_xlat48 = min(u_xlat48, 1.0);
    u_xlat34 = (u_xlatb34) ? 1.0 : u_xlat48;
    u_xlat34 = (u_xlatb20) ? u_xlat34 : 1.0;
    u_xlat34 = u_xlatb6 ? u_xlat34 : float(0.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb48 = !!(0.899999976<u_xlat10_3.x);
#else
    u_xlatb48 = 0.899999976<u_xlat10_3.x;
#endif
    if(u_xlatb48){
        u_xlat7.xy = u_xlat16_1.yy * hlslcc_mtx4x4unity_WorldToCamera[1].xy;
        u_xlat7.xy = hlslcc_mtx4x4unity_WorldToCamera[0].xy * u_xlat16_1.xx + u_xlat7.xy;
        u_xlat7.yz = hlslcc_mtx4x4unity_WorldToCamera[2].xy * u_xlat16_1.zz + u_xlat7.xy;
        u_xlat7.x = u_xlat7.y * _MTMapTileScale;
        u_xlat16_19.xy = u_xlat7.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
        u_xlat10_48 = texture(_MTMap, u_xlat16_19.xy).x;
        u_xlat16_19.x = u_xlat10_48 * _MTMapBrightness;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_19.x = min(max(u_xlat16_19.x, 0.0), 1.0);
#else
        u_xlat16_19.x = clamp(u_xlat16_19.x, 0.0, 1.0);
#endif
        u_xlat16_8.xyz = _MTMapLightColor.xyz + (-_MTMapDarkColor.xyz);
        u_xlat16_19.xyz = u_xlat16_19.xxx * u_xlat16_8.xyz + _MTMapDarkColor.xyz;
        u_xlat16_19.xyz = u_xlat16_4.xyz * u_xlat16_19.xyz;
        u_xlat16_8.x = dot(u_xlat16_1.xyz, u_xlat0.xyz);
        u_xlat16_8.x = max(u_xlat16_8.x, 0.00100000005);
        u_xlat16_8.x = log2(u_xlat16_8.x);
        u_xlat16_8.x = u_xlat16_8.x * _MTShininess;
        u_xlat16_8.x = exp2(u_xlat16_8.x);
        u_xlat16_8.x = u_xlat16_8.x * _MTSpecularScale;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_8.x = min(max(u_xlat16_8.x, 0.0), 1.0);
#else
        u_xlat16_8.x = clamp(u_xlat16_8.x, 0.0, 1.0);
#endif
        u_xlat16_8.xyz = u_xlat16_8.xxx * _MTSpecularColor.xyz;
        u_xlat16_8.xyz = u_xlat10_3.zzz * u_xlat16_8.xyz;
        u_xlat16_9.xyz = u_xlat16_19.xyz * _MTShadowMultiColor.xyz;
        u_xlat16_7.xyz = _MTShadowMultiColor.xyz + vec3(-1.0, -1.0, -1.0);
        u_xlat7.xyz = vec3(u_xlat34) * u_xlat16_7.xyz + vec3(1.0, 1.0, 1.0);
        u_xlat16_10.xyz = (bool(u_xlatb20)) ? u_xlat7.xyz : _MTShadowMultiColor.xyz;
        u_xlat16_10.xyz = u_xlat16_19.xyz * u_xlat16_10.xyz;
        u_xlat7.xyz = u_xlat16_19.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
        u_xlat7.xyz = (bool(u_xlatb6)) ? u_xlat16_10.xyz : u_xlat7.xyz;
        u_xlat11.xyz = u_xlat16_8.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
        u_xlat16_7.xyz = u_xlat7.xyz;
        u_xlat16_11.xyz = u_xlat11.xyz;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb48 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex));
#else
        u_xlatb48 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex);
#endif
        u_xlat16_12.xyz = vec3(_FirstShadowMultColor.xxyz.y + (-_CoolShadowMultColor.x), _FirstShadowMultColor.xxyz.z + (-_CoolShadowMultColor.y), float(_FirstShadowMultColor.z) + (-_CoolShadowMultColor.z));
        u_xlat12.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_12.xyz + _CoolShadowMultColor.xyz;
        u_xlat16_19.xyz = (bool(u_xlatb48)) ? u_xlat12.xyz : vec3(_FirstShadowMultColor.x, _FirstShadowMultColor.y, _FirstShadowMultColor.z);
        u_xlat16_9.xyz = u_xlat16_4.xyz * u_xlat16_19.xyz;
        u_xlat16_12.xyz = u_xlat16_19.xyz + vec3(-1.0, -1.0, -1.0);
        u_xlat12.xyz = vec3(u_xlat34) * u_xlat16_12.xyz + vec3(1.0, 1.0, 1.0);
        u_xlat16_19.xyz = (bool(u_xlatb20)) ? u_xlat12.xyz : u_xlat16_19.xyz;
        u_xlat16_19.xyz = u_xlat16_4.xyz * u_xlat16_19.xyz;
        u_xlat20.xyz = u_xlat16_4.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
        u_xlat7.xyz = (bool(u_xlatb6)) ? u_xlat16_19.xyz : u_xlat20.xyz;
        u_xlat16_19.x = dot(u_xlat16_1.xyz, u_xlat0.xyz);
        u_xlat16_19.x = max(u_xlat16_19.x, 0.00100000005);
        u_xlat16_19.x = log2(u_xlat16_19.x);
        u_xlat16_19.x = u_xlat16_19.x * _Shininess;
        u_xlat16_19.x = exp2(u_xlat16_19.x);
        u_xlat16_19.xyz = u_xlat16_19.xxx * _SpecularColor.xyz;
        u_xlat16_19.xyz = u_xlat16_19.xyz * vec3(_SpecMulti);
        u_xlat16_19.xyz = u_xlat10_3.xxx * u_xlat16_19.xyz;
        u_xlat11.xyz = u_xlat16_19.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
        u_xlat16_7.xyz = u_xlat7.xyz;
        u_xlat16_11.xyz = u_xlat11.xyz;
    //ENDIF
    }
    u_xlat16_19.xyz = u_xlat16_4.xyz * _EmissionColor_MHY.xyz;
    u_xlat16_8.xyz = u_xlat16_7.xyz + u_xlat16_11.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz + u_xlat16_11.xyz;
    u_xlat16_10.xyz = u_xlat16_19.xyz * vec3(vec3(_EmissionScaler, _EmissionScaler, _EmissionScaler)) + (-u_xlat16_8.xyz);
    u_xlat16_10.xyz = vec3(u_xlat16_5) * u_xlat16_10.xyz + u_xlat16_8.xyz;
    u_xlat16_19.xyz = u_xlat16_19.xyz * vec3(vec3(_EmissionScaler, _EmissionScaler, _EmissionScaler)) + (-u_xlat16_9.xyz);
    u_xlat16_19.xyz = vec3(u_xlat16_5) * u_xlat16_19.xyz + u_xlat16_9.xyz;
    u_xlat16_8.xyz = (bool(u_xlatb17)) ? u_xlat16_10.xyz : u_xlat16_8.xyz;
    u_xlat16_19.xyz = (bool(u_xlatb17)) ? u_xlat16_19.xyz : u_xlat16_9.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.00999999978<u_xlat16_5);
#else
    u_xlatb6 = 0.00999999978<u_xlat16_5;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb20 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn));
#else
    u_xlatb20 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn);
#endif
    u_xlat12.xyz = u_xlat16_8.xyz * vec3(vec3(_ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness));
    u_xlat13.xyz = _ES_CharacterMainLightColor.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat13.xyz = vec3(vec3(_ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio)) * u_xlat13.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat12.xyz = u_xlat12.xyz * u_xlat13.xyz;
    u_xlat13.xyz = _ES_CharacterAmbientLightColor.xyz * vec3(_ES_CharacterAmbientLightRatio);
    u_xlat16_9.xyz = u_xlat12.xyz * vec3(10.0, 10.0, 10.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_9.xyz = min(max(u_xlat16_9.xyz, 0.0), 1.0);
#else
    u_xlat16_9.xyz = clamp(u_xlat16_9.xyz, 0.0, 1.0);
#endif
    u_xlat12.xyz = u_xlat13.xyz * u_xlat16_9.xyz + u_xlat12.xyz;
    u_xlat16_9.xyz = (bool(u_xlatb20)) ? u_xlat12.xyz : u_xlat16_8.xyz;
    u_xlat16_10.xyz = u_xlat16_8.xyz + (-u_xlat16_9.xyz);
    u_xlat16_10.xyz = vec3(u_xlat16_5) * u_xlat16_10.xyz + u_xlat16_9.xyz;
    u_xlat16_8.xyz = (-u_xlat16_19.xyz) + u_xlat16_8.xyz;
    u_xlat16_8.xyz = vec3(u_xlat16_5) * u_xlat16_8.xyz + u_xlat16_19.xyz;
    u_xlat16_0.xyz = (bool(u_xlatb6)) ? u_xlat16_10.xyz : u_xlat16_9.xyz;
    u_xlat16_19.xyz = (bool(u_xlatb6)) ? u_xlat16_8.xyz : u_xlat16_19.xyz;
    u_xlat16_8.x = max(u_xlat16_0.z, u_xlat16_0.y);
    u_xlat16_2.w = max(u_xlat16_0.x, u_xlat16_8.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(1.0<u_xlat16_2.w);
#else
    u_xlatb6 = 1.0<u_xlat16_2.w;
#endif
    u_xlat16_2.xyz = u_xlat16_0.xyz / u_xlat16_2.www;
    u_xlat16_0.w = 1.0;
    u_xlat16_0 = (bool(u_xlatb6)) ? u_xlat16_2 : u_xlat16_0;
    u_xlat16_8.x = min(u_xlat16_0.w, 1.10000002);
    u_xlat16_22 = u_xlat16_0.w + (-u_xlat16_8.x);
    u_xlat16_5 = u_xlat16_5 * u_xlat16_22 + u_xlat16_8.x;
    SV_Target1.w = u_xlat16_5 * 0.0500000007;
    SV_Target0.xyz = u_xlat16_1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb6 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_5 = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb6) ? u_xlat16_5 : u_xlat16_19.z;
    SV_Target0.w = 0.0470588244;
    SV_Target1.xyz = u_xlat16_0.xyz;
    SV_Target2.xy = u_xlat16_19.xy;
    SV_Target2.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "MSAA_INTERPOLATION" "METAL_MAT" "NORMAL_MAP_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
float u_xlat12;
void main()
{
    u_xlat0.x = hlslcc_mtx4x4unity_ObjectToWorld[0].y;
    u_xlat0.y = hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat0.z = hlslcc_mtx4x4unity_ObjectToWorld[2].y;
    u_xlat1.xyw = (-_WorldSpaceCameraPos.xyz) + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat0.w = u_xlat1.y;
    u_xlat2.xyz = in_POSITION0.xyz;
    u_xlat2.w = 1.0;
    u_xlat0.x = dot(u_xlat0, u_xlat2);
    u_xlat0 = u_xlat0.xxxx * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat3.w = u_xlat1.x;
    u_xlat3.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;
    u_xlat3.y = hlslcc_mtx4x4unity_ObjectToWorld[1].x;
    u_xlat3.z = hlslcc_mtx4x4unity_ObjectToWorld[2].x;
    u_xlat3.x = dot(u_xlat3, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat3.xxxx + u_xlat0;
    u_xlat1.x = hlslcc_mtx4x4unity_ObjectToWorld[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_ObjectToWorld[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_ObjectToWorld[2].z;
    u_xlat1.x = dot(u_xlat1, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat1.xxxx + u_xlat0;
    u_xlat1.x = hlslcc_mtx4x4unity_ObjectToWorld[0].w;
    u_xlat1.y = hlslcc_mtx4x4unity_ObjectToWorld[1].w;
    u_xlat1.z = hlslcc_mtx4x4unity_ObjectToWorld[2].w;
    u_xlat1.w = hlslcc_mtx4x4unity_ObjectToWorld[3].w;
    u_xlat1.x = dot(u_xlat1, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[3] * u_xlat1.xxxx + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD1 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.zw = u_xlat0.zw;
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD3.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
    u_xlat12 = in_TANGENT0.w * unity_WorldTransformParams.w;
    u_xlat2.xyz = vec3(u_xlat12) * u_xlat2.xyz;
    vs_TEXCOORD4.y = u_xlat2.x;
    vs_TEXCOORD4.x = u_xlat1.z;
    vs_TEXCOORD4.z = u_xlat0.y;
    vs_TEXCOORD5.x = u_xlat1.x;
    vs_TEXCOORD6.x = u_xlat1.y;
    vs_TEXCOORD5.z = u_xlat0.z;
    vs_TEXCOORD6.z = u_xlat0.x;
    vs_TEXCOORD5.y = u_xlat2.y;
    vs_TEXCOORD6.y = u_xlat2.z;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToCamera[4];
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	mediump vec4 _Color;
uniform 	float _MainTexAlphaUse;
uniform 	mediump float _MainTexAlphaCutoff;
uniform 	mediump float _BumpScale;
uniform 	float _UseVertexColorAO;
uniform 	mediump float _LightArea;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	float _UseCoolShadowColorOrTex;
uniform 	mediump vec3 _CoolShadowMultColor;
uniform 	float _UseShadowTransition;
uniform 	float _ShadowTransitionRange;
uniform 	float _ShadowTransitionSoftness;
uniform 	mediump vec3 _SpecularColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump float _EmissionScaler;
uniform 	mediump vec3 _EmissionColor_MHY;
uniform 	mediump float _MTMapBrightness;
uniform 	float _MTMapTileScale;
uniform 	mediump vec3 _MTMapLightColor;
uniform 	mediump vec3 _MTMapDarkColor;
uniform 	mediump vec3 _MTShadowMultiColor;
uniform 	mediump float _MTShininess;
uniform 	mediump vec3 _MTSpecularColor;
uniform 	mediump float _MTSpecularScale;
uniform 	float _ES_CharacterAmbientLightOn;
uniform 	float _ES_CharacterAmbientBrightness;
uniform 	vec3 _ES_CharacterMainLightColor;
uniform 	float _ES_CharacterMainLightBrightness;
uniform 	vec3 _ES_CharacterAmbientLightColor;
uniform 	float _ES_CharacterMainLightRatio;
uniform 	float _ES_CharacterAmbientLightRatio;
uniform 	float _ES_CharacterColorTone;
uniform 	vec3 mhy_AvatarLightDir;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MTMap;
in mediump vec4 vs_COLOR0;
in highp vec2 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD5;
in highp vec3 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec2 u_xlat0;
mediump vec4 u_xlat16_0;
vec3 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
lowp vec4 u_xlat10_3;
bool u_xlatb3;
bvec2 u_xlatb4;
lowp vec2 u_xlat10_5;
bool u_xlatb5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
mediump vec3 u_xlat16_11;
vec3 u_xlat12;
mediump vec3 u_xlat16_12;
bool u_xlatb12;
vec3 u_xlat13;
float u_xlat17;
bool u_xlatb17;
vec3 u_xlat19;
mediump vec3 u_xlat16_19;
mediump vec3 u_xlat16_21;
vec3 u_xlat26;
mediump vec3 u_xlat16_26;
vec2 u_xlat28;
bool u_xlatb31;
vec2 u_xlat33;
mediump float u_xlat16_33;
lowp float u_xlat10_33;
bool u_xlatb33;
bool u_xlatb43;
mediump float u_xlat16_44;
float u_xlat45;
bool u_xlatb45;
float u_xlat47;
mediump float u_xlat16_48;
mediump float u_xlat16_49;
void main()
{
    u_xlat0.xy = dFdx(vs_TEXCOORD0.xy);
    u_xlat28.xy = dFdy(vs_TEXCOORD0.xy);
    u_xlat0.xy = u_xlat28.xy + u_xlat0.xy;
    u_xlat28.xy = (-u_xlat0.xy) * vec2(0.25, 0.25) + vs_TEXCOORD0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25) + vs_TEXCOORD0.xy;
    u_xlat0.xy = (int(gl_SampleID) != 0) ? u_xlat28.xy : u_xlat0.xy;
    u_xlat10_1.xyz = textureLod(_BumpMap, u_xlat0.xy, 0.0).xyz;
    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_2.xy = u_xlat16_2.xy * vec2(vec2(_BumpScale, _BumpScale));
    u_xlat1.x = dot(vs_TEXCOORD4.xyz, u_xlat16_2.xyz);
    u_xlat1.y = dot(vs_TEXCOORD5.xyz, u_xlat16_2.xyz);
    u_xlat1.z = dot(vs_TEXCOORD6.xyz, u_xlat16_2.xyz);
    u_xlat16_2.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat16_2.x = inversesqrt(u_xlat16_2.x);
    u_xlat16_2.xyz = u_xlat1.xyz * u_xlat16_2.xxx;
    u_xlat1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat28.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat28.x = inversesqrt(u_xlat28.x);
    u_xlat1.xyz = u_xlat1.xyz * u_xlat28.xxx + mhy_AvatarLightDir.xyz;
    u_xlat28.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat28.x = inversesqrt(u_xlat28.x);
    u_xlat1.xyz = u_xlat28.xxx * u_xlat1.xyz;
    u_xlat10_3 = textureLod(_MainTex, u_xlat0.xy, 0.0);
    u_xlatb4.xy = equal(vec4(_MainTexAlphaUse), vec4(1.0, 2.0, 0.0, 0.0)).xy;
    u_xlat16_44 = u_xlat10_3.w + (-_MainTexAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb43 = !!(u_xlat16_44<0.0);
#else
    u_xlatb43 = u_xlat16_44<0.0;
#endif
    u_xlatb5 = u_xlatb4.x && u_xlatb43;
    if((int(u_xlatb5) * int(0xffffffffu))!=0){discard;}
    u_xlat10_5.xy = textureLod(_LightMapTex, u_xlat0.xy, 0.0).xz;
    u_xlat16_6.xyz = u_xlat10_3.xyz * _Color.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(0.00999999978<u_xlat10_3.w);
#else
    u_xlatb3 = 0.00999999978<u_xlat10_3.w;
#endif
    u_xlatb3 = u_xlatb3 && u_xlatb4.y;
    u_xlat16_48 = (u_xlatb3) ? u_xlat10_3.w : 0.0;
    u_xlat16_7.x = dot(u_xlat16_2.xyz, mhy_AvatarLightDir.xyz);
    u_xlat17 = u_xlat16_7.x * 0.497500002 + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb31 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorAO));
#else
    u_xlatb31 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorAO);
#endif
    u_xlat16_7.x = vs_COLOR0.x * 0.5;
    u_xlat16_7.x = (u_xlatb31) ? u_xlat16_7.x : 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb45 = !!(u_xlat16_7.x<0.0500000007);
#else
    u_xlatb45 = u_xlat16_7.x<0.0500000007;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(0.949999988<u_xlat16_7.x);
#else
    u_xlatb33 = 0.949999988<u_xlat16_7.x;
#endif
    u_xlat47 = u_xlat17 + u_xlat16_7.x;
    u_xlat47 = u_xlat47 * 0.5;
    u_xlat16_7.x = (u_xlatb33) ? 1.0 : u_xlat47;
    u_xlat16_7.x = (u_xlatb45) ? 0.0 : u_xlat16_7.x;
    u_xlat16_7.x = (u_xlatb31) ? u_xlat16_7.x : u_xlat17;
#ifdef UNITY_ADRENO_ES3
    u_xlatb17 = !!(u_xlat16_7.x<_LightArea);
#else
    u_xlatb17 = u_xlat16_7.x<_LightArea;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb31 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition));
#else
    u_xlatb31 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition);
#endif
    u_xlat16_7.x = (-u_xlat16_7.x) + _LightArea;
    u_xlat16_7.x = u_xlat16_7.x / _ShadowTransitionRange;
#ifdef UNITY_ADRENO_ES3
    u_xlatb45 = !!(u_xlat16_7.x>=1.0);
#else
    u_xlatb45 = u_xlat16_7.x>=1.0;
#endif
    u_xlat16_33 = u_xlat16_7.x + 0.00999999978;
    u_xlat16_33 = log2(u_xlat16_33);
    u_xlat33.x = u_xlat16_33 * _ShadowTransitionSoftness;
    u_xlat33.x = exp2(u_xlat33.x);
    u_xlat33.x = min(u_xlat33.x, 1.0);
    u_xlat45 = (u_xlatb45) ? 1.0 : u_xlat33.x;
    u_xlat45 = (u_xlatb31) ? u_xlat45 : 1.0;
    u_xlat45 = u_xlatb17 ? u_xlat45 : float(0.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(0.899999976<u_xlat10_5.x);
#else
    u_xlatb33 = 0.899999976<u_xlat10_5.x;
#endif
    if(u_xlatb33){
        u_xlat33.xy = u_xlat16_2.yy * hlslcc_mtx4x4unity_WorldToCamera[1].xy;
        u_xlat33.xy = hlslcc_mtx4x4unity_WorldToCamera[0].xy * u_xlat16_2.xx + u_xlat33.xy;
        u_xlat8.yz = hlslcc_mtx4x4unity_WorldToCamera[2].xy * u_xlat16_2.zz + u_xlat33.xy;
        u_xlat8.x = u_xlat8.y * _MTMapTileScale;
        u_xlat16_7.xy = u_xlat8.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
        u_xlat10_33 = texture(_MTMap, u_xlat16_7.xy, -1.0).x;
        u_xlat16_7.x = u_xlat10_33 * _MTMapBrightness;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
        u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
        u_xlat16_21.xyz = _MTMapLightColor.xyz + (-_MTMapDarkColor.xyz);
        u_xlat16_7.xyz = u_xlat16_7.xxx * u_xlat16_21.xyz + _MTMapDarkColor.xyz;
        u_xlat16_7.xyz = u_xlat16_6.xyz * u_xlat16_7.xyz;
        u_xlat16_49 = dot(u_xlat16_2.xyz, u_xlat1.xyz);
        u_xlat16_49 = max(u_xlat16_49, 0.00100000005);
        u_xlat16_49 = log2(u_xlat16_49);
        u_xlat16_49 = u_xlat16_49 * _MTShininess;
        u_xlat16_49 = exp2(u_xlat16_49);
        u_xlat16_49 = u_xlat16_49 * _MTSpecularScale;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_49 = min(max(u_xlat16_49, 0.0), 1.0);
#else
        u_xlat16_49 = clamp(u_xlat16_49, 0.0, 1.0);
#endif
        u_xlat16_9.xyz = vec3(u_xlat16_49) * _MTSpecularColor.xyz;
        u_xlat16_9.xyz = u_xlat10_5.yyy * u_xlat16_9.xyz;
        u_xlat16_10.xyz = u_xlat16_7.xyz * _MTShadowMultiColor.xyz;
        u_xlat16_19.xyz = _MTShadowMultiColor.xyz + vec3(-1.0, -1.0, -1.0);
        u_xlat19.xyz = vec3(u_xlat45) * u_xlat16_19.xyz + vec3(1.0, 1.0, 1.0);
        u_xlat16_11.xyz = (bool(u_xlatb31)) ? u_xlat19.xyz : _MTShadowMultiColor.xyz;
        u_xlat16_11.xyz = u_xlat16_7.xyz * u_xlat16_11.xyz;
        u_xlat19.xyz = u_xlat16_7.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
        u_xlat19.xyz = (bool(u_xlatb17)) ? u_xlat16_11.xyz : u_xlat19.xyz;
        u_xlat8.xyz = u_xlat16_9.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
        u_xlat16_19.xyz = u_xlat19.xyz;
        u_xlat16_8.xyz = u_xlat8.xyz;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb12 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex));
#else
        u_xlatb12 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex);
#endif
        u_xlat16_26.xyz = vec3(_FirstShadowMultColor.xxyz.y + (-_CoolShadowMultColor.x), _FirstShadowMultColor.xxyz.z + (-_CoolShadowMultColor.y), float(_FirstShadowMultColor.z) + (-_CoolShadowMultColor.z));
        u_xlat26.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_26.xyz + _CoolShadowMultColor.xyz;
        u_xlat16_7.xyz = (bool(u_xlatb12)) ? u_xlat26.xyz : vec3(_FirstShadowMultColor.x, _FirstShadowMultColor.y, _FirstShadowMultColor.z);
        u_xlat16_10.xyz = u_xlat16_6.xyz * u_xlat16_7.xyz;
        u_xlat16_12.xyz = u_xlat16_7.xyz + vec3(-1.0, -1.0, -1.0);
        u_xlat12.xyz = vec3(u_xlat45) * u_xlat16_12.xyz + vec3(1.0, 1.0, 1.0);
        u_xlat16_7.xyz = (bool(u_xlatb31)) ? u_xlat12.xyz : u_xlat16_7.xyz;
        u_xlat16_7.xyz = u_xlat16_6.xyz * u_xlat16_7.xyz;
        u_xlat12.xyz = u_xlat16_6.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
        u_xlat19.xyz = (bool(u_xlatb17)) ? u_xlat16_7.xyz : u_xlat12.xyz;
        u_xlat16_7.x = dot(u_xlat16_2.xyz, u_xlat1.xyz);
        u_xlat16_7.x = max(u_xlat16_7.x, 0.00100000005);
        u_xlat16_7.x = log2(u_xlat16_7.x);
        u_xlat16_7.x = u_xlat16_7.x * _Shininess;
        u_xlat16_7.x = exp2(u_xlat16_7.x);
        u_xlat16_7.xyz = u_xlat16_7.xxx * _SpecularColor.xyz;
        u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(_SpecMulti);
        u_xlat16_7.xyz = u_xlat10_5.xxx * u_xlat16_7.xyz;
        u_xlat8.xyz = u_xlat16_7.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
        u_xlat16_19.xyz = u_xlat19.xyz;
        u_xlat16_8.xyz = u_xlat8.xyz;
    //ENDIF
    }
    u_xlat16_6.xyz = u_xlat16_6.xyz * _EmissionColor_MHY.xyz;
    u_xlat16_7.xyz = u_xlat16_19.xyz + u_xlat16_8.xyz;
    u_xlat16_9.xyz = u_xlat16_8.xyz + u_xlat16_10.xyz;
    u_xlat16_10.xyz = u_xlat16_6.xyz * vec3(vec3(_EmissionScaler, _EmissionScaler, _EmissionScaler)) + (-u_xlat16_7.xyz);
    u_xlat16_10.xyz = vec3(u_xlat16_48) * u_xlat16_10.xyz + u_xlat16_7.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(vec3(_EmissionScaler, _EmissionScaler, _EmissionScaler)) + (-u_xlat16_9.xyz);
    u_xlat16_6.xyz = vec3(u_xlat16_48) * u_xlat16_6.xyz + u_xlat16_9.xyz;
    u_xlat16_7.xyz = (bool(u_xlatb3)) ? u_xlat16_10.xyz : u_xlat16_7.xyz;
    u_xlat16_6.xyz = (bool(u_xlatb3)) ? u_xlat16_6.xyz : u_xlat16_9.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(0.00999999978<u_xlat16_48);
#else
    u_xlatb3 = 0.00999999978<u_xlat16_48;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb17 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn));
#else
    u_xlatb17 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn);
#endif
    u_xlat12.xyz = u_xlat16_7.xyz * vec3(vec3(_ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness));
    u_xlat13.xyz = _ES_CharacterMainLightColor.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat13.xyz = vec3(vec3(_ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio)) * u_xlat13.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat12.xyz = u_xlat12.xyz * u_xlat13.xyz;
    u_xlat13.xyz = _ES_CharacterAmbientLightColor.xyz * vec3(_ES_CharacterAmbientLightRatio);
    u_xlat16_9.xyz = u_xlat12.xyz * vec3(10.0, 10.0, 10.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_9.xyz = min(max(u_xlat16_9.xyz, 0.0), 1.0);
#else
    u_xlat16_9.xyz = clamp(u_xlat16_9.xyz, 0.0, 1.0);
#endif
    u_xlat12.xyz = u_xlat13.xyz * u_xlat16_9.xyz + u_xlat12.xyz;
    u_xlat16_9.xyz = (bool(u_xlatb17)) ? u_xlat12.xyz : u_xlat16_7.xyz;
    u_xlat16_10.xyz = u_xlat16_7.xyz + (-u_xlat16_9.xyz);
    u_xlat16_10.xyz = vec3(u_xlat16_48) * u_xlat16_10.xyz + u_xlat16_9.xyz;
    u_xlat16_7.xyz = (-u_xlat16_6.xyz) + u_xlat16_7.xyz;
    u_xlat16_7.xyz = vec3(u_xlat16_48) * u_xlat16_7.xyz + u_xlat16_6.xyz;
    u_xlat16_0.xyz = (bool(u_xlatb3)) ? u_xlat16_10.xyz : u_xlat16_9.xyz;
    u_xlat16_6.xyz = (bool(u_xlatb3)) ? u_xlat16_7.xyz : u_xlat16_6.xyz;
    u_xlat16_7.x = max(u_xlat16_0.z, u_xlat16_0.y);
    u_xlat16_1.w = max(u_xlat16_0.x, u_xlat16_7.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(1.0<u_xlat16_1.w);
#else
    u_xlatb3 = 1.0<u_xlat16_1.w;
#endif
    u_xlat16_1.xyz = u_xlat16_0.xyz / u_xlat16_1.www;
    u_xlat16_0.w = 1.0;
    u_xlat16_0 = (bool(u_xlatb3)) ? u_xlat16_1 : u_xlat16_0;
    u_xlat16_7.x = min(u_xlat16_0.w, 1.10000002);
    u_xlat16_21.x = u_xlat16_0.w + (-u_xlat16_7.x);
    u_xlat16_48 = u_xlat16_48 * u_xlat16_21.x + u_xlat16_7.x;
    SV_Target1.w = u_xlat16_48 * 0.0500000007;
    SV_Target0.xyz = u_xlat16_2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb3 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_48 = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb3) ? u_xlat16_48 : u_xlat16_6.z;
    SV_Target0.w = 0.0470588244;
    SV_Target1.xyz = u_xlat16_0.xyz;
    SV_Target2.xy = u_xlat16_6.xy;
    SV_Target2.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "LINE_INTERPOLATION" "METAL_MAT" "NORMAL_MAP_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
float u_xlat12;
void main()
{
    u_xlat0.x = hlslcc_mtx4x4unity_ObjectToWorld[0].y;
    u_xlat0.y = hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat0.z = hlslcc_mtx4x4unity_ObjectToWorld[2].y;
    u_xlat1.xyw = (-_WorldSpaceCameraPos.xyz) + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat0.w = u_xlat1.y;
    u_xlat2.xyz = in_POSITION0.xyz;
    u_xlat2.w = 1.0;
    u_xlat0.x = dot(u_xlat0, u_xlat2);
    u_xlat0 = u_xlat0.xxxx * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat3.w = u_xlat1.x;
    u_xlat3.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;
    u_xlat3.y = hlslcc_mtx4x4unity_ObjectToWorld[1].x;
    u_xlat3.z = hlslcc_mtx4x4unity_ObjectToWorld[2].x;
    u_xlat3.x = dot(u_xlat3, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat3.xxxx + u_xlat0;
    u_xlat1.x = hlslcc_mtx4x4unity_ObjectToWorld[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_ObjectToWorld[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_ObjectToWorld[2].z;
    u_xlat1.x = dot(u_xlat1, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat1.xxxx + u_xlat0;
    u_xlat1.x = hlslcc_mtx4x4unity_ObjectToWorld[0].w;
    u_xlat1.y = hlslcc_mtx4x4unity_ObjectToWorld[1].w;
    u_xlat1.z = hlslcc_mtx4x4unity_ObjectToWorld[2].w;
    u_xlat1.w = hlslcc_mtx4x4unity_ObjectToWorld[3].w;
    u_xlat1.x = dot(u_xlat1, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[3] * u_xlat1.xxxx + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD1 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.zw = u_xlat0.zw;
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD3.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
    u_xlat12 = in_TANGENT0.w * unity_WorldTransformParams.w;
    u_xlat2.xyz = vec3(u_xlat12) * u_xlat2.xyz;
    vs_TEXCOORD4.y = u_xlat2.x;
    vs_TEXCOORD4.x = u_xlat1.z;
    vs_TEXCOORD4.z = u_xlat0.y;
    vs_TEXCOORD5.x = u_xlat1.x;
    vs_TEXCOORD6.x = u_xlat1.y;
    vs_TEXCOORD5.z = u_xlat0.z;
    vs_TEXCOORD6.z = u_xlat0.x;
    vs_TEXCOORD5.y = u_xlat2.y;
    vs_TEXCOORD6.y = u_xlat2.z;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToCamera[4];
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	mediump vec4 _Color;
uniform 	float _MainTexAlphaUse;
uniform 	mediump float _MainTexAlphaCutoff;
uniform 	mediump float _BumpScale;
uniform 	float _UseVertexColorAO;
uniform 	mediump float _LightArea;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	float _UseCoolShadowColorOrTex;
uniform 	mediump vec3 _CoolShadowMultColor;
uniform 	float _UseShadowTransition;
uniform 	float _ShadowTransitionRange;
uniform 	float _ShadowTransitionSoftness;
uniform 	mediump vec3 _SpecularColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump float _EmissionScaler;
uniform 	mediump vec3 _EmissionColor_MHY;
uniform 	mediump float _MTMapBrightness;
uniform 	float _MTMapTileScale;
uniform 	mediump vec3 _MTMapLightColor;
uniform 	mediump vec3 _MTMapDarkColor;
uniform 	mediump vec3 _MTShadowMultiColor;
uniform 	mediump float _MTShininess;
uniform 	mediump vec3 _MTSpecularColor;
uniform 	mediump float _MTSpecularScale;
uniform 	float _ES_CharacterAmbientLightOn;
uniform 	float _ES_CharacterAmbientBrightness;
uniform 	vec3 _ES_CharacterMainLightColor;
uniform 	float _ES_CharacterMainLightBrightness;
uniform 	vec3 _ES_CharacterAmbientLightColor;
uniform 	float _ES_CharacterMainLightRatio;
uniform 	float _ES_CharacterAmbientLightRatio;
uniform 	float _ES_CharacterColorTone;
uniform 	vec3 mhy_AvatarLightDir;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MTMap;
in mediump vec4 vs_COLOR0;
in highp vec2 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD5;
in highp vec3 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec3 u_xlat10_0;
mediump vec3 u_xlat16_1;
mediump vec4 u_xlat16_2;
lowp vec4 u_xlat10_2;
bool u_xlatb2;
lowp vec3 u_xlat10_3;
bvec2 u_xlatb3;
mediump vec3 u_xlat16_4;
mediump float u_xlat16_5;
float u_xlat6;
bool u_xlatb6;
vec3 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
vec3 u_xlat11;
mediump vec3 u_xlat16_11;
vec3 u_xlat12;
mediump vec3 u_xlat16_12;
vec3 u_xlat13;
bool u_xlatb17;
mediump vec3 u_xlat16_19;
vec3 u_xlat20;
bool u_xlatb20;
mediump float u_xlat16_22;
float u_xlat34;
bool u_xlatb34;
float u_xlat42;
bool u_xlatb42;
mediump float u_xlat16_43;
float u_xlat48;
mediump float u_xlat16_48;
lowp float u_xlat10_48;
bool u_xlatb48;
void main()
{
    u_xlat10_0.xyz = texture(_BumpMap, vs_TEXCOORD0.xy, -1.0).xyz;
    u_xlat16_1.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_1.xy = u_xlat16_1.xy * vec2(vec2(_BumpScale, _BumpScale));
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, u_xlat16_1.xyz);
    u_xlat0.y = dot(vs_TEXCOORD5.xyz, u_xlat16_1.xyz);
    u_xlat0.z = dot(vs_TEXCOORD6.xyz, u_xlat16_1.xyz);
    u_xlat16_1.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat16_1.x = inversesqrt(u_xlat16_1.x);
    u_xlat16_1.xyz = u_xlat0.xyz * u_xlat16_1.xxx;
    u_xlat0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat42 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat42 = inversesqrt(u_xlat42);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat42) + mhy_AvatarLightDir.xyz;
    u_xlat42 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat42 = inversesqrt(u_xlat42);
    u_xlat0.xyz = vec3(u_xlat42) * u_xlat0.xyz;
    u_xlat10_2 = texture(_MainTex, vs_TEXCOORD0.xy, -1.0);
    u_xlatb3.xy = equal(vec4(_MainTexAlphaUse), vec4(1.0, 2.0, 0.0, 0.0)).xy;
    u_xlat16_43 = u_xlat10_2.w + (-_MainTexAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb42 = !!(u_xlat16_43<0.0);
#else
    u_xlatb42 = u_xlat16_43<0.0;
#endif
    u_xlatb3.x = u_xlatb3.x && u_xlatb42;
    if((int(u_xlatb3.x) * int(0xffffffffu))!=0){discard;}
    u_xlat10_3.xz = texture(_LightMapTex, vs_TEXCOORD0.xy, -1.0).xz;
    u_xlat16_4.xyz = u_xlat10_2.xyz * _Color.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(0.00999999978<u_xlat10_2.w);
#else
    u_xlatb2 = 0.00999999978<u_xlat10_2.w;
#endif
    u_xlatb17 = u_xlatb2 && u_xlatb3.y;
    u_xlat16_5 = (u_xlatb17) ? u_xlat10_2.w : 0.0;
    u_xlat16_19.x = dot(u_xlat16_1.xyz, mhy_AvatarLightDir.xyz);
    u_xlat6 = u_xlat16_19.x * 0.497500002 + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb20 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorAO));
#else
    u_xlatb20 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorAO);
#endif
    u_xlat16_19.x = vs_COLOR0.x * 0.5;
    u_xlat16_19.x = (u_xlatb20) ? u_xlat16_19.x : 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb34 = !!(u_xlat16_19.x<0.0500000007);
#else
    u_xlatb34 = u_xlat16_19.x<0.0500000007;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb48 = !!(0.949999988<u_xlat16_19.x);
#else
    u_xlatb48 = 0.949999988<u_xlat16_19.x;
#endif
    u_xlat7.x = u_xlat16_19.x + u_xlat6;
    u_xlat7.x = u_xlat7.x * 0.5;
    u_xlat16_19.x = (u_xlatb48) ? 1.0 : u_xlat7.x;
    u_xlat16_19.x = (u_xlatb34) ? 0.0 : u_xlat16_19.x;
    u_xlat16_19.x = (u_xlatb20) ? u_xlat16_19.x : u_xlat6;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(u_xlat16_19.x<_LightArea);
#else
    u_xlatb6 = u_xlat16_19.x<_LightArea;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb20 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition));
#else
    u_xlatb20 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition);
#endif
    u_xlat16_19.x = (-u_xlat16_19.x) + _LightArea;
    u_xlat16_19.x = u_xlat16_19.x / _ShadowTransitionRange;
#ifdef UNITY_ADRENO_ES3
    u_xlatb34 = !!(u_xlat16_19.x>=1.0);
#else
    u_xlatb34 = u_xlat16_19.x>=1.0;
#endif
    u_xlat16_48 = u_xlat16_19.x + 0.00999999978;
    u_xlat16_48 = log2(u_xlat16_48);
    u_xlat48 = u_xlat16_48 * _ShadowTransitionSoftness;
    u_xlat48 = exp2(u_xlat48);
    u_xlat48 = min(u_xlat48, 1.0);
    u_xlat34 = (u_xlatb34) ? 1.0 : u_xlat48;
    u_xlat34 = (u_xlatb20) ? u_xlat34 : 1.0;
    u_xlat34 = u_xlatb6 ? u_xlat34 : float(0.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb48 = !!(0.899999976<u_xlat10_3.x);
#else
    u_xlatb48 = 0.899999976<u_xlat10_3.x;
#endif
    if(u_xlatb48){
        u_xlat7.xy = u_xlat16_1.yy * hlslcc_mtx4x4unity_WorldToCamera[1].xy;
        u_xlat7.xy = hlslcc_mtx4x4unity_WorldToCamera[0].xy * u_xlat16_1.xx + u_xlat7.xy;
        u_xlat7.yz = hlslcc_mtx4x4unity_WorldToCamera[2].xy * u_xlat16_1.zz + u_xlat7.xy;
        u_xlat7.x = u_xlat7.y * _MTMapTileScale;
        u_xlat16_19.xy = u_xlat7.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
        u_xlat10_48 = texture(_MTMap, u_xlat16_19.xy, -1.0).x;
        u_xlat16_19.x = u_xlat10_48 * _MTMapBrightness;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_19.x = min(max(u_xlat16_19.x, 0.0), 1.0);
#else
        u_xlat16_19.x = clamp(u_xlat16_19.x, 0.0, 1.0);
#endif
        u_xlat16_8.xyz = _MTMapLightColor.xyz + (-_MTMapDarkColor.xyz);
        u_xlat16_19.xyz = u_xlat16_19.xxx * u_xlat16_8.xyz + _MTMapDarkColor.xyz;
        u_xlat16_19.xyz = u_xlat16_4.xyz * u_xlat16_19.xyz;
        u_xlat16_8.x = dot(u_xlat16_1.xyz, u_xlat0.xyz);
        u_xlat16_8.x = max(u_xlat16_8.x, 0.00100000005);
        u_xlat16_8.x = log2(u_xlat16_8.x);
        u_xlat16_8.x = u_xlat16_8.x * _MTShininess;
        u_xlat16_8.x = exp2(u_xlat16_8.x);
        u_xlat16_8.x = u_xlat16_8.x * _MTSpecularScale;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_8.x = min(max(u_xlat16_8.x, 0.0), 1.0);
#else
        u_xlat16_8.x = clamp(u_xlat16_8.x, 0.0, 1.0);
#endif
        u_xlat16_8.xyz = u_xlat16_8.xxx * _MTSpecularColor.xyz;
        u_xlat16_8.xyz = u_xlat10_3.zzz * u_xlat16_8.xyz;
        u_xlat16_9.xyz = u_xlat16_19.xyz * _MTShadowMultiColor.xyz;
        u_xlat16_7.xyz = _MTShadowMultiColor.xyz + vec3(-1.0, -1.0, -1.0);
        u_xlat7.xyz = vec3(u_xlat34) * u_xlat16_7.xyz + vec3(1.0, 1.0, 1.0);
        u_xlat16_10.xyz = (bool(u_xlatb20)) ? u_xlat7.xyz : _MTShadowMultiColor.xyz;
        u_xlat16_10.xyz = u_xlat16_19.xyz * u_xlat16_10.xyz;
        u_xlat7.xyz = u_xlat16_19.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
        u_xlat7.xyz = (bool(u_xlatb6)) ? u_xlat16_10.xyz : u_xlat7.xyz;
        u_xlat11.xyz = u_xlat16_8.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
        u_xlat16_7.xyz = u_xlat7.xyz;
        u_xlat16_11.xyz = u_xlat11.xyz;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb48 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex));
#else
        u_xlatb48 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex);
#endif
        u_xlat16_12.xyz = vec3(_FirstShadowMultColor.xxyz.y + (-_CoolShadowMultColor.x), _FirstShadowMultColor.xxyz.z + (-_CoolShadowMultColor.y), float(_FirstShadowMultColor.z) + (-_CoolShadowMultColor.z));
        u_xlat12.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_12.xyz + _CoolShadowMultColor.xyz;
        u_xlat16_19.xyz = (bool(u_xlatb48)) ? u_xlat12.xyz : vec3(_FirstShadowMultColor.x, _FirstShadowMultColor.y, _FirstShadowMultColor.z);
        u_xlat16_9.xyz = u_xlat16_4.xyz * u_xlat16_19.xyz;
        u_xlat16_12.xyz = u_xlat16_19.xyz + vec3(-1.0, -1.0, -1.0);
        u_xlat12.xyz = vec3(u_xlat34) * u_xlat16_12.xyz + vec3(1.0, 1.0, 1.0);
        u_xlat16_19.xyz = (bool(u_xlatb20)) ? u_xlat12.xyz : u_xlat16_19.xyz;
        u_xlat16_19.xyz = u_xlat16_4.xyz * u_xlat16_19.xyz;
        u_xlat20.xyz = u_xlat16_4.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
        u_xlat7.xyz = (bool(u_xlatb6)) ? u_xlat16_19.xyz : u_xlat20.xyz;
        u_xlat16_19.x = dot(u_xlat16_1.xyz, u_xlat0.xyz);
        u_xlat16_19.x = max(u_xlat16_19.x, 0.00100000005);
        u_xlat16_19.x = log2(u_xlat16_19.x);
        u_xlat16_19.x = u_xlat16_19.x * _Shininess;
        u_xlat16_19.x = exp2(u_xlat16_19.x);
        u_xlat16_19.xyz = u_xlat16_19.xxx * _SpecularColor.xyz;
        u_xlat16_19.xyz = u_xlat16_19.xyz * vec3(_SpecMulti);
        u_xlat16_19.xyz = u_xlat10_3.xxx * u_xlat16_19.xyz;
        u_xlat11.xyz = u_xlat16_19.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
        u_xlat16_7.xyz = u_xlat7.xyz;
        u_xlat16_11.xyz = u_xlat11.xyz;
    //ENDIF
    }
    u_xlat16_19.xyz = u_xlat16_4.xyz * _EmissionColor_MHY.xyz;
    u_xlat16_8.xyz = u_xlat16_7.xyz + u_xlat16_11.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz + u_xlat16_11.xyz;
    u_xlat16_10.xyz = u_xlat16_19.xyz * vec3(vec3(_EmissionScaler, _EmissionScaler, _EmissionScaler)) + (-u_xlat16_8.xyz);
    u_xlat16_10.xyz = vec3(u_xlat16_5) * u_xlat16_10.xyz + u_xlat16_8.xyz;
    u_xlat16_19.xyz = u_xlat16_19.xyz * vec3(vec3(_EmissionScaler, _EmissionScaler, _EmissionScaler)) + (-u_xlat16_9.xyz);
    u_xlat16_19.xyz = vec3(u_xlat16_5) * u_xlat16_19.xyz + u_xlat16_9.xyz;
    u_xlat16_8.xyz = (bool(u_xlatb17)) ? u_xlat16_10.xyz : u_xlat16_8.xyz;
    u_xlat16_19.xyz = (bool(u_xlatb17)) ? u_xlat16_19.xyz : u_xlat16_9.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.00999999978<u_xlat16_5);
#else
    u_xlatb6 = 0.00999999978<u_xlat16_5;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb20 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn));
#else
    u_xlatb20 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn);
#endif
    u_xlat12.xyz = u_xlat16_8.xyz * vec3(vec3(_ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness));
    u_xlat13.xyz = _ES_CharacterMainLightColor.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat13.xyz = vec3(vec3(_ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio)) * u_xlat13.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat12.xyz = u_xlat12.xyz * u_xlat13.xyz;
    u_xlat13.xyz = _ES_CharacterAmbientLightColor.xyz * vec3(_ES_CharacterAmbientLightRatio);
    u_xlat16_9.xyz = u_xlat12.xyz * vec3(10.0, 10.0, 10.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_9.xyz = min(max(u_xlat16_9.xyz, 0.0), 1.0);
#else
    u_xlat16_9.xyz = clamp(u_xlat16_9.xyz, 0.0, 1.0);
#endif
    u_xlat12.xyz = u_xlat13.xyz * u_xlat16_9.xyz + u_xlat12.xyz;
    u_xlat16_9.xyz = (bool(u_xlatb20)) ? u_xlat12.xyz : u_xlat16_8.xyz;
    u_xlat16_10.xyz = u_xlat16_8.xyz + (-u_xlat16_9.xyz);
    u_xlat16_10.xyz = vec3(u_xlat16_5) * u_xlat16_10.xyz + u_xlat16_9.xyz;
    u_xlat16_8.xyz = (-u_xlat16_19.xyz) + u_xlat16_8.xyz;
    u_xlat16_8.xyz = vec3(u_xlat16_5) * u_xlat16_8.xyz + u_xlat16_19.xyz;
    u_xlat16_0.xyz = (bool(u_xlatb6)) ? u_xlat16_10.xyz : u_xlat16_9.xyz;
    u_xlat16_19.xyz = (bool(u_xlatb6)) ? u_xlat16_8.xyz : u_xlat16_19.xyz;
    u_xlat16_8.x = max(u_xlat16_0.z, u_xlat16_0.y);
    u_xlat16_2.w = max(u_xlat16_0.x, u_xlat16_8.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(1.0<u_xlat16_2.w);
#else
    u_xlatb6 = 1.0<u_xlat16_2.w;
#endif
    u_xlat16_2.xyz = u_xlat16_0.xyz / u_xlat16_2.www;
    u_xlat16_0.w = 1.0;
    u_xlat16_0 = (bool(u_xlatb6)) ? u_xlat16_2 : u_xlat16_0;
    u_xlat16_8.x = min(u_xlat16_0.w, 1.10000002);
    u_xlat16_22 = u_xlat16_0.w + (-u_xlat16_8.x);
    u_xlat16_5 = u_xlat16_5 * u_xlat16_22 + u_xlat16_8.x;
    SV_Target1.w = u_xlat16_5 * 0.0500000007;
    SV_Target0.xyz = u_xlat16_1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb6 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_5 = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb6) ? u_xlat16_5 : u_xlat16_19.z;
    SV_Target0.w = 0.0470588244;
    SV_Target1.xyz = u_xlat16_0.xyz;
    SV_Target2.xy = u_xlat16_19.xy;
    SV_Target2.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "BACK_FACE_ON" "NORMAL_MAP_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
float u_xlat12;
void main()
{
    u_xlat0.x = hlslcc_mtx4x4unity_ObjectToWorld[0].y;
    u_xlat0.y = hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat0.z = hlslcc_mtx4x4unity_ObjectToWorld[2].y;
    u_xlat1.xyw = (-_WorldSpaceCameraPos.xyz) + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat0.w = u_xlat1.y;
    u_xlat2.xyz = in_POSITION0.xyz;
    u_xlat2.w = 1.0;
    u_xlat0.x = dot(u_xlat0, u_xlat2);
    u_xlat0 = u_xlat0.xxxx * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat3.w = u_xlat1.x;
    u_xlat3.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;
    u_xlat3.y = hlslcc_mtx4x4unity_ObjectToWorld[1].x;
    u_xlat3.z = hlslcc_mtx4x4unity_ObjectToWorld[2].x;
    u_xlat3.x = dot(u_xlat3, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat3.xxxx + u_xlat0;
    u_xlat1.x = hlslcc_mtx4x4unity_ObjectToWorld[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_ObjectToWorld[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_ObjectToWorld[2].z;
    u_xlat1.x = dot(u_xlat1, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat1.xxxx + u_xlat0;
    u_xlat1.x = hlslcc_mtx4x4unity_ObjectToWorld[0].w;
    u_xlat1.y = hlslcc_mtx4x4unity_ObjectToWorld[1].w;
    u_xlat1.z = hlslcc_mtx4x4unity_ObjectToWorld[2].w;
    u_xlat1.w = hlslcc_mtx4x4unity_ObjectToWorld[3].w;
    u_xlat1.x = dot(u_xlat1, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[3] * u_xlat1.xxxx + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD1 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.zw = u_xlat0.zw;
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD3.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
    u_xlat12 = in_TANGENT0.w * unity_WorldTransformParams.w;
    u_xlat2.xyz = vec3(u_xlat12) * u_xlat2.xyz;
    vs_TEXCOORD4.y = u_xlat2.x;
    vs_TEXCOORD4.x = u_xlat1.z;
    vs_TEXCOORD4.z = u_xlat0.y;
    vs_TEXCOORD5.x = u_xlat1.x;
    vs_TEXCOORD6.x = u_xlat1.y;
    vs_TEXCOORD5.z = u_xlat0.z;
    vs_TEXCOORD6.z = u_xlat0.x;
    vs_TEXCOORD5.y = u_xlat2.y;
    vs_TEXCOORD6.y = u_xlat2.z;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	mediump vec4 _Color;
uniform 	float _MainTexAlphaUse;
uniform 	mediump float _MainTexAlphaCutoff;
uniform 	mediump float _BumpScale;
uniform 	float _UseVertexColorAO;
uniform 	mediump float _LightArea;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	float _UseCoolShadowColorOrTex;
uniform 	mediump vec3 _CoolShadowMultColor;
uniform 	float _UseShadowTransition;
uniform 	float _ShadowTransitionRange;
uniform 	float _ShadowTransitionSoftness;
uniform 	mediump vec3 _SpecularColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump float _EmissionScaler;
uniform 	mediump vec3 _EmissionColor_MHY;
uniform 	float _ES_CharacterAmbientLightOn;
uniform 	float _ES_CharacterAmbientBrightness;
uniform 	vec3 _ES_CharacterMainLightColor;
uniform 	float _ES_CharacterMainLightBrightness;
uniform 	vec3 _ES_CharacterAmbientLightColor;
uniform 	float _ES_CharacterMainLightRatio;
uniform 	float _ES_CharacterAmbientLightRatio;
uniform 	float _ES_CharacterColorTone;
uniform 	vec3 mhy_AvatarLightDir;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MainTex;
in mediump vec4 vs_COLOR0;
in highp vec2 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD5;
in highp vec3 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec4 u_xlat0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
vec3 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
bool u_xlatb1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump vec4 u_xlat16_3;
bool u_xlatb3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
bool u_xlatb8;
vec3 u_xlat11;
mediump vec3 u_xlat16_11;
bool u_xlatb11;
bool u_xlatb16;
float u_xlat24;
mediump float u_xlat16_24;
bool u_xlatb24;
mediump float u_xlat16_26;
mediump float u_xlat16_28;
mediump float u_xlat16_29;
void main()
{
    u_xlatb0.xy = equal(vec4(_MainTexAlphaUse), vec4(1.0, 2.0, 0.0, 0.0)).xy;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy, -1.0);
    u_xlat16_2.x = u_xlat10_1.w + (-_MainTexAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(u_xlat16_2.x<0.0);
#else
    u_xlatb16 = u_xlat16_2.x<0.0;
#endif
    u_xlatb0.x = u_xlatb0.x && u_xlatb16;
    if((int(u_xlatb0.x) * int(0xffffffffu))!=0){discard;}
    u_xlat10_0.xzw = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xzw * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_2.xy = u_xlat16_2.xy * vec2(vec2(_BumpScale, _BumpScale));
    u_xlat3.x = dot(vs_TEXCOORD4.xyz, u_xlat16_2.xyz);
    u_xlat3.y = dot(vs_TEXCOORD5.xyz, u_xlat16_2.xyz);
    u_xlat3.z = dot(vs_TEXCOORD6.xyz, u_xlat16_2.xyz);
    u_xlat16_2.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat16_2.x = inversesqrt(u_xlat16_2.x);
    u_xlat16_2.xyz = u_xlat16_2.xxx * u_xlat3.xyz;
    u_xlat16_2.xyz = (uint((gl_FrontFacing ? 0xffffffffu : uint(0))) != uint(0u)) ? u_xlat16_2.xyz : (-u_xlat16_2.xyz);
    SV_Target0.xyz = u_xlat16_2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0470588244;
    u_xlat0.xzw = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat0.xzw = u_xlat0.xzw * u_xlat3.xxx + mhy_AvatarLightDir.xyz;
    u_xlat3.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat0.xzw = u_xlat0.xzw * u_xlat3.xxx;
    u_xlat16_26 = dot(u_xlat16_2.xyz, u_xlat0.xzw);
    u_xlat16_2.x = dot(u_xlat16_2.xyz, mhy_AvatarLightDir.xyz);
    u_xlat0.x = u_xlat16_2.x * 0.497500002 + 0.5;
    u_xlat16_2.x = max(u_xlat16_26, 0.00100000005);
    u_xlat16_2.x = log2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * _Shininess;
    u_xlat16_2.x = exp2(u_xlat16_2.x);
    u_xlat16_2.xyz = u_xlat16_2.xxx * _SpecularColor.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(_SpecMulti);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(0.5, 0.5, 0.5);
    u_xlat16_26 = vs_COLOR0.x * 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorAO));
#else
    u_xlatb16 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorAO);
#endif
    u_xlat16_26 = (u_xlatb16) ? u_xlat16_26 : 0.5;
    u_xlat24 = u_xlat0.x + u_xlat16_26;
    u_xlat24 = u_xlat24 * 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(0.949999988<u_xlat16_26);
#else
    u_xlatb3 = 0.949999988<u_xlat16_26;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb11 = !!(u_xlat16_26<0.0500000007);
#else
    u_xlatb11 = u_xlat16_26<0.0500000007;
#endif
    u_xlat16_26 = (u_xlatb3) ? 1.0 : u_xlat24;
    u_xlat16_26 = (u_xlatb11) ? 0.0 : u_xlat16_26;
    u_xlat16_26 = (u_xlatb16) ? u_xlat16_26 : u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(u_xlat16_26<_LightArea);
#else
    u_xlatb0.x = u_xlat16_26<_LightArea;
#endif
    u_xlat16_26 = (-u_xlat16_26) + _LightArea;
    u_xlat16_26 = u_xlat16_26 / _ShadowTransitionRange;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(int((gl_FrontFacing ? 0xffffffffu : uint(0)))==0);
#else
    u_xlatb16 = int((gl_FrontFacing ? 0xffffffffu : uint(0)))==0;
#endif
    u_xlatb16 = u_xlatb0.x || u_xlatb16;
    u_xlat16_24 = u_xlat16_26 + 0.00999999978;
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(u_xlat16_26>=1.0);
#else
    u_xlatb3 = u_xlat16_26>=1.0;
#endif
    u_xlat16_24 = log2(u_xlat16_24);
    u_xlat24 = u_xlat16_24 * _ShadowTransitionSoftness;
    u_xlat24 = exp2(u_xlat24);
    u_xlat24 = min(u_xlat24, 1.0);
    u_xlat24 = (u_xlatb3) ? 1.0 : u_xlat24;
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition));
#else
    u_xlatb3 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition);
#endif
    u_xlat24 = (u_xlatb3) ? u_xlat24 : 1.0;
    u_xlat0.x = u_xlatb0.x ? u_xlat24 : float(0.0);
    u_xlat16_11.xyz = vec3(_FirstShadowMultColor.xxyz.y + (-_CoolShadowMultColor.x), _FirstShadowMultColor.xxyz.z + (-_CoolShadowMultColor.y), float(_FirstShadowMultColor.z) + (-_CoolShadowMultColor.z));
    u_xlat11.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_11.xyz + _CoolShadowMultColor.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex));
#else
    u_xlatb24 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex);
#endif
    u_xlat16_4.xyz = (bool(u_xlatb24)) ? u_xlat11.xyz : vec3(_FirstShadowMultColor.x, _FirstShadowMultColor.y, _FirstShadowMultColor.z);
    u_xlat16_11.xyz = u_xlat16_4.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat11.xyz = u_xlat0.xxx * u_xlat16_11.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_5.xyz = (bool(u_xlatb3)) ? u_xlat11.xyz : u_xlat16_4.xyz;
    u_xlat16_6.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_6.xyz;
    u_xlat1.xyz = u_xlat16_6.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
    u_xlat0.xzw = (bool(u_xlatb16)) ? u_xlat16_5.xyz : u_xlat1.xyz;
    u_xlat16_5.xyz = u_xlat16_2.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness)) + u_xlat0.xzw;
    u_xlat0.xzw = u_xlat16_2.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
    u_xlat16_2.xyz = u_xlat16_6.xyz * u_xlat16_4.xyz + u_xlat0.xzw;
    u_xlat16_4.xyz = u_xlat16_6.xyz * _EmissionColor_MHY.xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * vec3(vec3(_EmissionScaler, _EmissionScaler, _EmissionScaler)) + (-u_xlat16_5.xyz);
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(vec3(_EmissionScaler, _EmissionScaler, _EmissionScaler)) + (-u_xlat16_2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(0.00999999978<u_xlat10_1.w);
#else
    u_xlatb0.x = 0.00999999978<u_xlat10_1.w;
#endif
    u_xlatb0.x = u_xlatb0.x && u_xlatb0.y;
    u_xlat16_26 = (u_xlatb0.x) ? u_xlat10_1.w : 0.0;
    u_xlat16_6.xyz = vec3(u_xlat16_26) * u_xlat16_6.xyz + u_xlat16_5.xyz;
    u_xlat16_5.xyz = (u_xlatb0.x) ? u_xlat16_6.xyz : u_xlat16_5.xyz;
    u_xlat8.xyz = u_xlat16_5.xyz * vec3(vec3(_ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness));
    u_xlat1.xyz = _ES_CharacterMainLightColor.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat1.xyz = vec3(vec3(_ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio)) * u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat8.xyz = u_xlat8.xyz * u_xlat1.xyz;
    u_xlat16_6.xyz = u_xlat8.xyz * vec3(10.0, 10.0, 10.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.xyz = min(max(u_xlat16_6.xyz, 0.0), 1.0);
#else
    u_xlat16_6.xyz = clamp(u_xlat16_6.xyz, 0.0, 1.0);
#endif
    u_xlat1.xyz = _ES_CharacterAmbientLightColor.xyz * vec3(_ES_CharacterAmbientLightRatio);
    u_xlat8.xyz = u_xlat1.xyz * u_xlat16_6.xyz + u_xlat8.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn));
#else
    u_xlatb1 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn);
#endif
    u_xlat16_6.xyz = (bool(u_xlatb1)) ? u_xlat8.xyz : u_xlat16_5.xyz;
    u_xlat16_7.xyz = u_xlat16_5.xyz + (-u_xlat16_6.xyz);
    u_xlat16_7.xyz = vec3(u_xlat16_26) * u_xlat16_7.xyz + u_xlat16_6.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.00999999978<u_xlat16_26);
#else
    u_xlatb8 = 0.00999999978<u_xlat16_26;
#endif
    u_xlat16_1.xyz = (bool(u_xlatb8)) ? u_xlat16_7.xyz : u_xlat16_6.xyz;
    u_xlat16_28 = max(u_xlat16_1.z, u_xlat16_1.y);
    u_xlat16_3.w = max(u_xlat16_1.x, u_xlat16_28);
    u_xlat16_3.xyz = u_xlat16_1.xyz / u_xlat16_3.www;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(1.0<u_xlat16_3.w);
#else
    u_xlatb16 = 1.0<u_xlat16_3.w;
#endif
    u_xlat16_1.w = 1.0;
    u_xlat16_1 = (bool(u_xlatb16)) ? u_xlat16_3 : u_xlat16_1;
    u_xlat16_28 = min(u_xlat16_1.w, 1.10000002);
    u_xlat16_29 = u_xlat16_1.w + (-u_xlat16_28);
    SV_Target1.xyz = u_xlat16_1.xyz;
    u_xlat16_28 = u_xlat16_26 * u_xlat16_29 + u_xlat16_28;
    SV_Target1.w = u_xlat16_28 * 0.0500000007;
    u_xlat16_4.xyz = vec3(u_xlat16_26) * u_xlat16_4.xyz + u_xlat16_2.xyz;
    u_xlat16_2.xyz = (u_xlatb0.x) ? u_xlat16_4.xyz : u_xlat16_2.xyz;
    u_xlat16_4.xyz = (-u_xlat16_2.xyz) + u_xlat16_5.xyz;
    u_xlat16_4.xyz = vec3(u_xlat16_26) * u_xlat16_4.xyz + u_xlat16_2.xyz;
    u_xlat16_2.xyz = (bool(u_xlatb8)) ? u_xlat16_4.xyz : u_xlat16_2.xyz;
    SV_Target2.xy = u_xlat16_2.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_2.x = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb0.x) ? u_xlat16_2.x : u_xlat16_2.z;
    SV_Target2.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "MSAA_INTERPOLATION" "BACK_FACE_ON" "NORMAL_MAP_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
float u_xlat12;
void main()
{
    u_xlat0.x = hlslcc_mtx4x4unity_ObjectToWorld[0].y;
    u_xlat0.y = hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat0.z = hlslcc_mtx4x4unity_ObjectToWorld[2].y;
    u_xlat1.xyw = (-_WorldSpaceCameraPos.xyz) + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat0.w = u_xlat1.y;
    u_xlat2.xyz = in_POSITION0.xyz;
    u_xlat2.w = 1.0;
    u_xlat0.x = dot(u_xlat0, u_xlat2);
    u_xlat0 = u_xlat0.xxxx * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat3.w = u_xlat1.x;
    u_xlat3.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;
    u_xlat3.y = hlslcc_mtx4x4unity_ObjectToWorld[1].x;
    u_xlat3.z = hlslcc_mtx4x4unity_ObjectToWorld[2].x;
    u_xlat3.x = dot(u_xlat3, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat3.xxxx + u_xlat0;
    u_xlat1.x = hlslcc_mtx4x4unity_ObjectToWorld[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_ObjectToWorld[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_ObjectToWorld[2].z;
    u_xlat1.x = dot(u_xlat1, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat1.xxxx + u_xlat0;
    u_xlat1.x = hlslcc_mtx4x4unity_ObjectToWorld[0].w;
    u_xlat1.y = hlslcc_mtx4x4unity_ObjectToWorld[1].w;
    u_xlat1.z = hlslcc_mtx4x4unity_ObjectToWorld[2].w;
    u_xlat1.w = hlslcc_mtx4x4unity_ObjectToWorld[3].w;
    u_xlat1.x = dot(u_xlat1, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[3] * u_xlat1.xxxx + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD1 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.zw = u_xlat0.zw;
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD3.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
    u_xlat12 = in_TANGENT0.w * unity_WorldTransformParams.w;
    u_xlat2.xyz = vec3(u_xlat12) * u_xlat2.xyz;
    vs_TEXCOORD4.y = u_xlat2.x;
    vs_TEXCOORD4.x = u_xlat1.z;
    vs_TEXCOORD4.z = u_xlat0.y;
    vs_TEXCOORD5.x = u_xlat1.x;
    vs_TEXCOORD6.x = u_xlat1.y;
    vs_TEXCOORD5.z = u_xlat0.z;
    vs_TEXCOORD6.z = u_xlat0.x;
    vs_TEXCOORD5.y = u_xlat2.y;
    vs_TEXCOORD6.y = u_xlat2.z;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	mediump vec4 _Color;
uniform 	float _MainTexAlphaUse;
uniform 	mediump float _MainTexAlphaCutoff;
uniform 	mediump float _BumpScale;
uniform 	float _UseVertexColorAO;
uniform 	mediump float _LightArea;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	float _UseCoolShadowColorOrTex;
uniform 	mediump vec3 _CoolShadowMultColor;
uniform 	float _UseShadowTransition;
uniform 	float _ShadowTransitionRange;
uniform 	float _ShadowTransitionSoftness;
uniform 	mediump vec3 _SpecularColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump float _EmissionScaler;
uniform 	mediump vec3 _EmissionColor_MHY;
uniform 	float _ES_CharacterAmbientLightOn;
uniform 	float _ES_CharacterAmbientBrightness;
uniform 	vec3 _ES_CharacterMainLightColor;
uniform 	float _ES_CharacterMainLightBrightness;
uniform 	vec3 _ES_CharacterAmbientLightColor;
uniform 	float _ES_CharacterMainLightRatio;
uniform 	float _ES_CharacterAmbientLightRatio;
uniform 	float _ES_CharacterColorTone;
uniform 	vec3 mhy_AvatarLightDir;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MainTex;
in mediump vec4 vs_COLOR0;
in highp vec2 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD5;
in highp vec3 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec4 u_xlat0;
lowp vec3 u_xlat10_0;
bool u_xlatb0;
vec3 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
bool u_xlatb1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump vec4 u_xlat16_3;
bool u_xlatb3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
bvec2 u_xlatb8;
vec3 u_xlat11;
mediump vec3 u_xlat16_11;
bool u_xlatb11;
vec2 u_xlat16;
bool u_xlatb16;
float u_xlat24;
mediump float u_xlat16_24;
bool u_xlatb24;
mediump float u_xlat16_26;
mediump float u_xlat16_28;
mediump float u_xlat16_29;
void main()
{
    u_xlat0.xy = dFdx(vs_TEXCOORD0.xy);
    u_xlat16.xy = dFdy(vs_TEXCOORD0.xy);
    u_xlat0.xy = u_xlat16.xy + u_xlat0.xy;
    u_xlat16.xy = (-u_xlat0.xy) * vec2(0.25, 0.25) + vs_TEXCOORD0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25) + vs_TEXCOORD0.xy;
    u_xlat0.xy = (int(gl_SampleID) != 0) ? u_xlat16.xy : u_xlat0.xy;
    u_xlat10_1 = textureLod(_MainTex, u_xlat0.xy, 0.0);
    u_xlat10_0.xyz = textureLod(_BumpMap, u_xlat0.xy, 0.0).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_26 = u_xlat10_1.w + (-_MainTexAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat16_26<0.0);
#else
    u_xlatb0 = u_xlat16_26<0.0;
#endif
    u_xlatb8.xy = equal(vec4(_MainTexAlphaUse), vec4(1.0, 2.0, 0.0, 0.0)).xy;
    u_xlatb0 = u_xlatb8.x && u_xlatb0;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat16_2.xy = u_xlat16_2.xy * vec2(vec2(_BumpScale, _BumpScale));
    u_xlat3.x = dot(vs_TEXCOORD4.xyz, u_xlat16_2.xyz);
    u_xlat3.y = dot(vs_TEXCOORD5.xyz, u_xlat16_2.xyz);
    u_xlat3.z = dot(vs_TEXCOORD6.xyz, u_xlat16_2.xyz);
    u_xlat16_2.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat16_2.x = inversesqrt(u_xlat16_2.x);
    u_xlat16_2.xyz = u_xlat16_2.xxx * u_xlat3.xyz;
    u_xlat16_2.xyz = (uint((gl_FrontFacing ? 0xffffffffu : uint(0))) != uint(0u)) ? u_xlat16_2.xyz : (-u_xlat16_2.xyz);
    SV_Target0.xyz = u_xlat16_2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0470588244;
    u_xlat0.xyw = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3.x = dot(u_xlat0.xyw, u_xlat0.xyw);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat0.xyw = u_xlat0.xyw * u_xlat3.xxx + mhy_AvatarLightDir.xyz;
    u_xlat3.x = dot(u_xlat0.xyw, u_xlat0.xyw);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat0.xyw = u_xlat0.xyw * u_xlat3.xxx;
    u_xlat16_26 = dot(u_xlat16_2.xyz, u_xlat0.xyw);
    u_xlat16_2.x = dot(u_xlat16_2.xyz, mhy_AvatarLightDir.xyz);
    u_xlat0.x = u_xlat16_2.x * 0.497500002 + 0.5;
    u_xlat16_2.x = max(u_xlat16_26, 0.00100000005);
    u_xlat16_2.x = log2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * _Shininess;
    u_xlat16_2.x = exp2(u_xlat16_2.x);
    u_xlat16_2.xyz = u_xlat16_2.xxx * _SpecularColor.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(_SpecMulti);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(0.5, 0.5, 0.5);
    u_xlat16_26 = vs_COLOR0.x * 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorAO));
#else
    u_xlatb8.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorAO);
#endif
    u_xlat16_26 = (u_xlatb8.x) ? u_xlat16_26 : 0.5;
    u_xlat24 = u_xlat0.x + u_xlat16_26;
    u_xlat24 = u_xlat24 * 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(0.949999988<u_xlat16_26);
#else
    u_xlatb3 = 0.949999988<u_xlat16_26;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb11 = !!(u_xlat16_26<0.0500000007);
#else
    u_xlatb11 = u_xlat16_26<0.0500000007;
#endif
    u_xlat16_26 = (u_xlatb3) ? 1.0 : u_xlat24;
    u_xlat16_26 = (u_xlatb11) ? 0.0 : u_xlat16_26;
    u_xlat16_26 = (u_xlatb8.x) ? u_xlat16_26 : u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat16_26<_LightArea);
#else
    u_xlatb0 = u_xlat16_26<_LightArea;
#endif
    u_xlat16_26 = (-u_xlat16_26) + _LightArea;
    u_xlat16_26 = u_xlat16_26 / _ShadowTransitionRange;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8.x = !!(int((gl_FrontFacing ? 0xffffffffu : uint(0)))==0);
#else
    u_xlatb8.x = int((gl_FrontFacing ? 0xffffffffu : uint(0)))==0;
#endif
    u_xlatb8.x = u_xlatb0 || u_xlatb8.x;
    u_xlat16_24 = u_xlat16_26 + 0.00999999978;
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(u_xlat16_26>=1.0);
#else
    u_xlatb3 = u_xlat16_26>=1.0;
#endif
    u_xlat16_24 = log2(u_xlat16_24);
    u_xlat24 = u_xlat16_24 * _ShadowTransitionSoftness;
    u_xlat24 = exp2(u_xlat24);
    u_xlat24 = min(u_xlat24, 1.0);
    u_xlat24 = (u_xlatb3) ? 1.0 : u_xlat24;
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition));
#else
    u_xlatb3 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition);
#endif
    u_xlat24 = (u_xlatb3) ? u_xlat24 : 1.0;
    u_xlat0.x = u_xlatb0 ? u_xlat24 : float(0.0);
    u_xlat16_11.xyz = vec3(_FirstShadowMultColor.xxyz.y + (-_CoolShadowMultColor.x), _FirstShadowMultColor.xxyz.z + (-_CoolShadowMultColor.y), float(_FirstShadowMultColor.z) + (-_CoolShadowMultColor.z));
    u_xlat11.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_11.xyz + _CoolShadowMultColor.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex));
#else
    u_xlatb24 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex);
#endif
    u_xlat16_4.xyz = (bool(u_xlatb24)) ? u_xlat11.xyz : vec3(_FirstShadowMultColor.x, _FirstShadowMultColor.y, _FirstShadowMultColor.z);
    u_xlat16_11.xyz = u_xlat16_4.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat11.xyz = u_xlat0.xxx * u_xlat16_11.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_5.xyz = (bool(u_xlatb3)) ? u_xlat11.xyz : u_xlat16_4.xyz;
    u_xlat16_6.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_6.xyz;
    u_xlat1.xyz = u_xlat16_6.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
    u_xlat0.xyw = (u_xlatb8.x) ? u_xlat16_5.xyz : u_xlat1.xyz;
    u_xlat16_5.xyz = u_xlat16_2.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness)) + u_xlat0.xyw;
    u_xlat0.xyw = u_xlat16_2.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
    u_xlat16_2.xyz = u_xlat16_6.xyz * u_xlat16_4.xyz + u_xlat0.xyw;
    u_xlat16_4.xyz = u_xlat16_6.xyz * _EmissionColor_MHY.xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * vec3(vec3(_EmissionScaler, _EmissionScaler, _EmissionScaler)) + (-u_xlat16_5.xyz);
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(vec3(_EmissionScaler, _EmissionScaler, _EmissionScaler)) + (-u_xlat16_2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.00999999978<u_xlat10_1.w);
#else
    u_xlatb0 = 0.00999999978<u_xlat10_1.w;
#endif
    u_xlatb0 = u_xlatb0 && u_xlatb8.y;
    u_xlat16_26 = (u_xlatb0) ? u_xlat10_1.w : 0.0;
    u_xlat16_6.xyz = vec3(u_xlat16_26) * u_xlat16_6.xyz + u_xlat16_5.xyz;
    u_xlat16_5.xyz = (bool(u_xlatb0)) ? u_xlat16_6.xyz : u_xlat16_5.xyz;
    u_xlat8.xyz = u_xlat16_5.xyz * vec3(vec3(_ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness));
    u_xlat1.xyz = _ES_CharacterMainLightColor.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat1.xyz = vec3(vec3(_ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio)) * u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat8.xyz = u_xlat8.xyz * u_xlat1.xyz;
    u_xlat16_6.xyz = u_xlat8.xyz * vec3(10.0, 10.0, 10.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.xyz = min(max(u_xlat16_6.xyz, 0.0), 1.0);
#else
    u_xlat16_6.xyz = clamp(u_xlat16_6.xyz, 0.0, 1.0);
#endif
    u_xlat1.xyz = _ES_CharacterAmbientLightColor.xyz * vec3(_ES_CharacterAmbientLightRatio);
    u_xlat8.xyz = u_xlat1.xyz * u_xlat16_6.xyz + u_xlat8.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn));
#else
    u_xlatb1 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn);
#endif
    u_xlat16_6.xyz = (bool(u_xlatb1)) ? u_xlat8.xyz : u_xlat16_5.xyz;
    u_xlat16_7.xyz = u_xlat16_5.xyz + (-u_xlat16_6.xyz);
    u_xlat16_7.xyz = vec3(u_xlat16_26) * u_xlat16_7.xyz + u_xlat16_6.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8.x = !!(0.00999999978<u_xlat16_26);
#else
    u_xlatb8.x = 0.00999999978<u_xlat16_26;
#endif
    u_xlat16_1.xyz = (u_xlatb8.x) ? u_xlat16_7.xyz : u_xlat16_6.xyz;
    u_xlat16_28 = max(u_xlat16_1.z, u_xlat16_1.y);
    u_xlat16_3.w = max(u_xlat16_1.x, u_xlat16_28);
    u_xlat16_3.xyz = u_xlat16_1.xyz / u_xlat16_3.www;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(1.0<u_xlat16_3.w);
#else
    u_xlatb16 = 1.0<u_xlat16_3.w;
#endif
    u_xlat16_1.w = 1.0;
    u_xlat16_1 = (bool(u_xlatb16)) ? u_xlat16_3 : u_xlat16_1;
    u_xlat16_28 = min(u_xlat16_1.w, 1.10000002);
    u_xlat16_29 = u_xlat16_1.w + (-u_xlat16_28);
    SV_Target1.xyz = u_xlat16_1.xyz;
    u_xlat16_28 = u_xlat16_26 * u_xlat16_29 + u_xlat16_28;
    SV_Target1.w = u_xlat16_28 * 0.0500000007;
    u_xlat16_4.xyz = vec3(u_xlat16_26) * u_xlat16_4.xyz + u_xlat16_2.xyz;
    u_xlat16_2.xyz = (bool(u_xlatb0)) ? u_xlat16_4.xyz : u_xlat16_2.xyz;
    u_xlat16_4.xyz = (-u_xlat16_2.xyz) + u_xlat16_5.xyz;
    u_xlat16_4.xyz = vec3(u_xlat16_26) * u_xlat16_4.xyz + u_xlat16_2.xyz;
    u_xlat16_2.xyz = (u_xlatb8.x) ? u_xlat16_4.xyz : u_xlat16_2.xyz;
    SV_Target2.xy = u_xlat16_2.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_2.x = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb0) ? u_xlat16_2.x : u_xlat16_2.z;
    SV_Target2.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "LINE_INTERPOLATION" "BACK_FACE_ON" "NORMAL_MAP_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
float u_xlat12;
void main()
{
    u_xlat0.x = hlslcc_mtx4x4unity_ObjectToWorld[0].y;
    u_xlat0.y = hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat0.z = hlslcc_mtx4x4unity_ObjectToWorld[2].y;
    u_xlat1.xyw = (-_WorldSpaceCameraPos.xyz) + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat0.w = u_xlat1.y;
    u_xlat2.xyz = in_POSITION0.xyz;
    u_xlat2.w = 1.0;
    u_xlat0.x = dot(u_xlat0, u_xlat2);
    u_xlat0 = u_xlat0.xxxx * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat3.w = u_xlat1.x;
    u_xlat3.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;
    u_xlat3.y = hlslcc_mtx4x4unity_ObjectToWorld[1].x;
    u_xlat3.z = hlslcc_mtx4x4unity_ObjectToWorld[2].x;
    u_xlat3.x = dot(u_xlat3, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat3.xxxx + u_xlat0;
    u_xlat1.x = hlslcc_mtx4x4unity_ObjectToWorld[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_ObjectToWorld[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_ObjectToWorld[2].z;
    u_xlat1.x = dot(u_xlat1, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat1.xxxx + u_xlat0;
    u_xlat1.x = hlslcc_mtx4x4unity_ObjectToWorld[0].w;
    u_xlat1.y = hlslcc_mtx4x4unity_ObjectToWorld[1].w;
    u_xlat1.z = hlslcc_mtx4x4unity_ObjectToWorld[2].w;
    u_xlat1.w = hlslcc_mtx4x4unity_ObjectToWorld[3].w;
    u_xlat1.x = dot(u_xlat1, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[3] * u_xlat1.xxxx + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD1 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.zw = u_xlat0.zw;
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD3.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
    u_xlat12 = in_TANGENT0.w * unity_WorldTransformParams.w;
    u_xlat2.xyz = vec3(u_xlat12) * u_xlat2.xyz;
    vs_TEXCOORD4.y = u_xlat2.x;
    vs_TEXCOORD4.x = u_xlat1.z;
    vs_TEXCOORD4.z = u_xlat0.y;
    vs_TEXCOORD5.x = u_xlat1.x;
    vs_TEXCOORD6.x = u_xlat1.y;
    vs_TEXCOORD5.z = u_xlat0.z;
    vs_TEXCOORD6.z = u_xlat0.x;
    vs_TEXCOORD5.y = u_xlat2.y;
    vs_TEXCOORD6.y = u_xlat2.z;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	mediump vec4 _Color;
uniform 	float _MainTexAlphaUse;
uniform 	mediump float _MainTexAlphaCutoff;
uniform 	mediump float _BumpScale;
uniform 	float _UseVertexColorAO;
uniform 	mediump float _LightArea;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	float _UseCoolShadowColorOrTex;
uniform 	mediump vec3 _CoolShadowMultColor;
uniform 	float _UseShadowTransition;
uniform 	float _ShadowTransitionRange;
uniform 	float _ShadowTransitionSoftness;
uniform 	mediump vec3 _SpecularColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump float _EmissionScaler;
uniform 	mediump vec3 _EmissionColor_MHY;
uniform 	float _ES_CharacterAmbientLightOn;
uniform 	float _ES_CharacterAmbientBrightness;
uniform 	vec3 _ES_CharacterMainLightColor;
uniform 	float _ES_CharacterMainLightBrightness;
uniform 	vec3 _ES_CharacterAmbientLightColor;
uniform 	float _ES_CharacterMainLightRatio;
uniform 	float _ES_CharacterAmbientLightRatio;
uniform 	float _ES_CharacterColorTone;
uniform 	vec3 mhy_AvatarLightDir;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MainTex;
in mediump vec4 vs_COLOR0;
in highp vec2 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD5;
in highp vec3 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec4 u_xlat0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
vec3 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
bool u_xlatb1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump vec4 u_xlat16_3;
bool u_xlatb3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
bool u_xlatb8;
vec3 u_xlat11;
mediump vec3 u_xlat16_11;
bool u_xlatb11;
bool u_xlatb16;
float u_xlat24;
mediump float u_xlat16_24;
bool u_xlatb24;
mediump float u_xlat16_26;
mediump float u_xlat16_28;
mediump float u_xlat16_29;
void main()
{
    u_xlatb0.xy = equal(vec4(_MainTexAlphaUse), vec4(1.0, 2.0, 0.0, 0.0)).xy;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy, -1.0);
    u_xlat16_2.x = u_xlat10_1.w + (-_MainTexAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(u_xlat16_2.x<0.0);
#else
    u_xlatb16 = u_xlat16_2.x<0.0;
#endif
    u_xlatb0.x = u_xlatb0.x && u_xlatb16;
    if((int(u_xlatb0.x) * int(0xffffffffu))!=0){discard;}
    u_xlat10_0.xzw = texture(_BumpMap, vs_TEXCOORD0.xy, -1.0).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xzw * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_2.xy = u_xlat16_2.xy * vec2(vec2(_BumpScale, _BumpScale));
    u_xlat3.x = dot(vs_TEXCOORD4.xyz, u_xlat16_2.xyz);
    u_xlat3.y = dot(vs_TEXCOORD5.xyz, u_xlat16_2.xyz);
    u_xlat3.z = dot(vs_TEXCOORD6.xyz, u_xlat16_2.xyz);
    u_xlat16_2.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat16_2.x = inversesqrt(u_xlat16_2.x);
    u_xlat16_2.xyz = u_xlat16_2.xxx * u_xlat3.xyz;
    u_xlat16_2.xyz = (uint((gl_FrontFacing ? 0xffffffffu : uint(0))) != uint(0u)) ? u_xlat16_2.xyz : (-u_xlat16_2.xyz);
    SV_Target0.xyz = u_xlat16_2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0470588244;
    u_xlat0.xzw = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat0.xzw = u_xlat0.xzw * u_xlat3.xxx + mhy_AvatarLightDir.xyz;
    u_xlat3.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat0.xzw = u_xlat0.xzw * u_xlat3.xxx;
    u_xlat16_26 = dot(u_xlat16_2.xyz, u_xlat0.xzw);
    u_xlat16_2.x = dot(u_xlat16_2.xyz, mhy_AvatarLightDir.xyz);
    u_xlat0.x = u_xlat16_2.x * 0.497500002 + 0.5;
    u_xlat16_2.x = max(u_xlat16_26, 0.00100000005);
    u_xlat16_2.x = log2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * _Shininess;
    u_xlat16_2.x = exp2(u_xlat16_2.x);
    u_xlat16_2.xyz = u_xlat16_2.xxx * _SpecularColor.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(_SpecMulti);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(0.5, 0.5, 0.5);
    u_xlat16_26 = vs_COLOR0.x * 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorAO));
#else
    u_xlatb16 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorAO);
#endif
    u_xlat16_26 = (u_xlatb16) ? u_xlat16_26 : 0.5;
    u_xlat24 = u_xlat0.x + u_xlat16_26;
    u_xlat24 = u_xlat24 * 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(0.949999988<u_xlat16_26);
#else
    u_xlatb3 = 0.949999988<u_xlat16_26;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb11 = !!(u_xlat16_26<0.0500000007);
#else
    u_xlatb11 = u_xlat16_26<0.0500000007;
#endif
    u_xlat16_26 = (u_xlatb3) ? 1.0 : u_xlat24;
    u_xlat16_26 = (u_xlatb11) ? 0.0 : u_xlat16_26;
    u_xlat16_26 = (u_xlatb16) ? u_xlat16_26 : u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(u_xlat16_26<_LightArea);
#else
    u_xlatb0.x = u_xlat16_26<_LightArea;
#endif
    u_xlat16_26 = (-u_xlat16_26) + _LightArea;
    u_xlat16_26 = u_xlat16_26 / _ShadowTransitionRange;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(int((gl_FrontFacing ? 0xffffffffu : uint(0)))==0);
#else
    u_xlatb16 = int((gl_FrontFacing ? 0xffffffffu : uint(0)))==0;
#endif
    u_xlatb16 = u_xlatb0.x || u_xlatb16;
    u_xlat16_24 = u_xlat16_26 + 0.00999999978;
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(u_xlat16_26>=1.0);
#else
    u_xlatb3 = u_xlat16_26>=1.0;
#endif
    u_xlat16_24 = log2(u_xlat16_24);
    u_xlat24 = u_xlat16_24 * _ShadowTransitionSoftness;
    u_xlat24 = exp2(u_xlat24);
    u_xlat24 = min(u_xlat24, 1.0);
    u_xlat24 = (u_xlatb3) ? 1.0 : u_xlat24;
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition));
#else
    u_xlatb3 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition);
#endif
    u_xlat24 = (u_xlatb3) ? u_xlat24 : 1.0;
    u_xlat0.x = u_xlatb0.x ? u_xlat24 : float(0.0);
    u_xlat16_11.xyz = vec3(_FirstShadowMultColor.xxyz.y + (-_CoolShadowMultColor.x), _FirstShadowMultColor.xxyz.z + (-_CoolShadowMultColor.y), float(_FirstShadowMultColor.z) + (-_CoolShadowMultColor.z));
    u_xlat11.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_11.xyz + _CoolShadowMultColor.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex));
#else
    u_xlatb24 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex);
#endif
    u_xlat16_4.xyz = (bool(u_xlatb24)) ? u_xlat11.xyz : vec3(_FirstShadowMultColor.x, _FirstShadowMultColor.y, _FirstShadowMultColor.z);
    u_xlat16_11.xyz = u_xlat16_4.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat11.xyz = u_xlat0.xxx * u_xlat16_11.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_5.xyz = (bool(u_xlatb3)) ? u_xlat11.xyz : u_xlat16_4.xyz;
    u_xlat16_6.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_6.xyz;
    u_xlat1.xyz = u_xlat16_6.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
    u_xlat0.xzw = (bool(u_xlatb16)) ? u_xlat16_5.xyz : u_xlat1.xyz;
    u_xlat16_5.xyz = u_xlat16_2.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness)) + u_xlat0.xzw;
    u_xlat0.xzw = u_xlat16_2.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
    u_xlat16_2.xyz = u_xlat16_6.xyz * u_xlat16_4.xyz + u_xlat0.xzw;
    u_xlat16_4.xyz = u_xlat16_6.xyz * _EmissionColor_MHY.xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * vec3(vec3(_EmissionScaler, _EmissionScaler, _EmissionScaler)) + (-u_xlat16_5.xyz);
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(vec3(_EmissionScaler, _EmissionScaler, _EmissionScaler)) + (-u_xlat16_2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(0.00999999978<u_xlat10_1.w);
#else
    u_xlatb0.x = 0.00999999978<u_xlat10_1.w;
#endif
    u_xlatb0.x = u_xlatb0.x && u_xlatb0.y;
    u_xlat16_26 = (u_xlatb0.x) ? u_xlat10_1.w : 0.0;
    u_xlat16_6.xyz = vec3(u_xlat16_26) * u_xlat16_6.xyz + u_xlat16_5.xyz;
    u_xlat16_5.xyz = (u_xlatb0.x) ? u_xlat16_6.xyz : u_xlat16_5.xyz;
    u_xlat8.xyz = u_xlat16_5.xyz * vec3(vec3(_ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness));
    u_xlat1.xyz = _ES_CharacterMainLightColor.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat1.xyz = vec3(vec3(_ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio)) * u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat8.xyz = u_xlat8.xyz * u_xlat1.xyz;
    u_xlat16_6.xyz = u_xlat8.xyz * vec3(10.0, 10.0, 10.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.xyz = min(max(u_xlat16_6.xyz, 0.0), 1.0);
#else
    u_xlat16_6.xyz = clamp(u_xlat16_6.xyz, 0.0, 1.0);
#endif
    u_xlat1.xyz = _ES_CharacterAmbientLightColor.xyz * vec3(_ES_CharacterAmbientLightRatio);
    u_xlat8.xyz = u_xlat1.xyz * u_xlat16_6.xyz + u_xlat8.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn));
#else
    u_xlatb1 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn);
#endif
    u_xlat16_6.xyz = (bool(u_xlatb1)) ? u_xlat8.xyz : u_xlat16_5.xyz;
    u_xlat16_7.xyz = u_xlat16_5.xyz + (-u_xlat16_6.xyz);
    u_xlat16_7.xyz = vec3(u_xlat16_26) * u_xlat16_7.xyz + u_xlat16_6.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.00999999978<u_xlat16_26);
#else
    u_xlatb8 = 0.00999999978<u_xlat16_26;
#endif
    u_xlat16_1.xyz = (bool(u_xlatb8)) ? u_xlat16_7.xyz : u_xlat16_6.xyz;
    u_xlat16_28 = max(u_xlat16_1.z, u_xlat16_1.y);
    u_xlat16_3.w = max(u_xlat16_1.x, u_xlat16_28);
    u_xlat16_3.xyz = u_xlat16_1.xyz / u_xlat16_3.www;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(1.0<u_xlat16_3.w);
#else
    u_xlatb16 = 1.0<u_xlat16_3.w;
#endif
    u_xlat16_1.w = 1.0;
    u_xlat16_1 = (bool(u_xlatb16)) ? u_xlat16_3 : u_xlat16_1;
    u_xlat16_28 = min(u_xlat16_1.w, 1.10000002);
    u_xlat16_29 = u_xlat16_1.w + (-u_xlat16_28);
    SV_Target1.xyz = u_xlat16_1.xyz;
    u_xlat16_28 = u_xlat16_26 * u_xlat16_29 + u_xlat16_28;
    SV_Target1.w = u_xlat16_28 * 0.0500000007;
    u_xlat16_4.xyz = vec3(u_xlat16_26) * u_xlat16_4.xyz + u_xlat16_2.xyz;
    u_xlat16_2.xyz = (u_xlatb0.x) ? u_xlat16_4.xyz : u_xlat16_2.xyz;
    u_xlat16_4.xyz = (-u_xlat16_2.xyz) + u_xlat16_5.xyz;
    u_xlat16_4.xyz = vec3(u_xlat16_26) * u_xlat16_4.xyz + u_xlat16_2.xyz;
    u_xlat16_2.xyz = (bool(u_xlatb8)) ? u_xlat16_4.xyz : u_xlat16_2.xyz;
    SV_Target2.xy = u_xlat16_2.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_2.x = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb0.x) ? u_xlat16_2.x : u_xlat16_2.z;
    SV_Target2.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "BACK_FACE_ON" "METAL_MAT" "NORMAL_MAP_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
float u_xlat12;
void main()
{
    u_xlat0.x = hlslcc_mtx4x4unity_ObjectToWorld[0].y;
    u_xlat0.y = hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat0.z = hlslcc_mtx4x4unity_ObjectToWorld[2].y;
    u_xlat1.xyw = (-_WorldSpaceCameraPos.xyz) + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat0.w = u_xlat1.y;
    u_xlat2.xyz = in_POSITION0.xyz;
    u_xlat2.w = 1.0;
    u_xlat0.x = dot(u_xlat0, u_xlat2);
    u_xlat0 = u_xlat0.xxxx * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat3.w = u_xlat1.x;
    u_xlat3.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;
    u_xlat3.y = hlslcc_mtx4x4unity_ObjectToWorld[1].x;
    u_xlat3.z = hlslcc_mtx4x4unity_ObjectToWorld[2].x;
    u_xlat3.x = dot(u_xlat3, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat3.xxxx + u_xlat0;
    u_xlat1.x = hlslcc_mtx4x4unity_ObjectToWorld[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_ObjectToWorld[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_ObjectToWorld[2].z;
    u_xlat1.x = dot(u_xlat1, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat1.xxxx + u_xlat0;
    u_xlat1.x = hlslcc_mtx4x4unity_ObjectToWorld[0].w;
    u_xlat1.y = hlslcc_mtx4x4unity_ObjectToWorld[1].w;
    u_xlat1.z = hlslcc_mtx4x4unity_ObjectToWorld[2].w;
    u_xlat1.w = hlslcc_mtx4x4unity_ObjectToWorld[3].w;
    u_xlat1.x = dot(u_xlat1, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[3] * u_xlat1.xxxx + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD1 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.zw = u_xlat0.zw;
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD3.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
    u_xlat12 = in_TANGENT0.w * unity_WorldTransformParams.w;
    u_xlat2.xyz = vec3(u_xlat12) * u_xlat2.xyz;
    vs_TEXCOORD4.y = u_xlat2.x;
    vs_TEXCOORD4.x = u_xlat1.z;
    vs_TEXCOORD4.z = u_xlat0.y;
    vs_TEXCOORD5.x = u_xlat1.x;
    vs_TEXCOORD6.x = u_xlat1.y;
    vs_TEXCOORD5.z = u_xlat0.z;
    vs_TEXCOORD6.z = u_xlat0.x;
    vs_TEXCOORD5.y = u_xlat2.y;
    vs_TEXCOORD6.y = u_xlat2.z;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToCamera[4];
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	mediump vec4 _Color;
uniform 	float _MainTexAlphaUse;
uniform 	mediump float _MainTexAlphaCutoff;
uniform 	mediump float _BumpScale;
uniform 	float _UseVertexColorAO;
uniform 	mediump float _LightArea;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	float _UseCoolShadowColorOrTex;
uniform 	mediump vec3 _CoolShadowMultColor;
uniform 	float _UseShadowTransition;
uniform 	float _ShadowTransitionRange;
uniform 	float _ShadowTransitionSoftness;
uniform 	mediump vec3 _SpecularColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump float _EmissionScaler;
uniform 	mediump vec3 _EmissionColor_MHY;
uniform 	mediump float _MTMapBrightness;
uniform 	float _MTMapTileScale;
uniform 	mediump vec3 _MTMapLightColor;
uniform 	mediump vec3 _MTMapDarkColor;
uniform 	mediump vec3 _MTShadowMultiColor;
uniform 	mediump float _MTShininess;
uniform 	mediump vec3 _MTSpecularColor;
uniform 	mediump float _MTSpecularScale;
uniform 	float _ES_CharacterAmbientLightOn;
uniform 	float _ES_CharacterAmbientBrightness;
uniform 	vec3 _ES_CharacterMainLightColor;
uniform 	float _ES_CharacterMainLightBrightness;
uniform 	vec3 _ES_CharacterAmbientLightColor;
uniform 	float _ES_CharacterMainLightRatio;
uniform 	float _ES_CharacterAmbientLightRatio;
uniform 	float _ES_CharacterColorTone;
uniform 	vec3 mhy_AvatarLightDir;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MTMap;
in mediump vec4 vs_COLOR0;
in highp vec2 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD5;
in highp vec3 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec3 u_xlat10_0;
mediump vec3 u_xlat16_1;
mediump vec4 u_xlat16_2;
lowp vec4 u_xlat10_2;
bool u_xlatb2;
lowp vec3 u_xlat10_3;
bvec2 u_xlatb3;
mediump vec3 u_xlat16_4;
mediump float u_xlat16_5;
float u_xlat6;
bool u_xlatb6;
vec3 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
vec3 u_xlat11;
mediump vec3 u_xlat16_11;
vec3 u_xlat12;
float u_xlat16;
bool u_xlatb16;
mediump vec3 u_xlat16_18;
vec3 u_xlat19;
mediump vec3 u_xlat16_19;
lowp float u_xlat10_19;
bool u_xlatb19;
mediump float u_xlat16_21;
bool u_xlatb29;
float u_xlat32;
float u_xlat39;
bool u_xlatb39;
mediump float u_xlat16_40;
bool u_xlatb42;
void main()
{
    u_xlat10_0.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_1.xy = u_xlat16_1.xy * vec2(vec2(_BumpScale, _BumpScale));
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, u_xlat16_1.xyz);
    u_xlat0.y = dot(vs_TEXCOORD5.xyz, u_xlat16_1.xyz);
    u_xlat0.z = dot(vs_TEXCOORD6.xyz, u_xlat16_1.xyz);
    u_xlat16_1.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat16_1.x = inversesqrt(u_xlat16_1.x);
    u_xlat16_1.xyz = u_xlat0.xyz * u_xlat16_1.xxx;
    u_xlat16_1.xyz = (uint((gl_FrontFacing ? 0xffffffffu : uint(0))) != uint(0u)) ? u_xlat16_1.xyz : (-u_xlat16_1.xyz);
    u_xlat0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat39 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat39 = inversesqrt(u_xlat39);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat39) + mhy_AvatarLightDir.xyz;
    u_xlat39 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat39 = inversesqrt(u_xlat39);
    u_xlat0.xyz = vec3(u_xlat39) * u_xlat0.xyz;
    u_xlat10_2 = texture(_MainTex, vs_TEXCOORD0.xy, -1.0);
    u_xlatb3.xy = equal(vec4(_MainTexAlphaUse), vec4(1.0, 2.0, 0.0, 0.0)).xy;
    u_xlat16_40 = u_xlat10_2.w + (-_MainTexAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb39 = !!(u_xlat16_40<0.0);
#else
    u_xlatb39 = u_xlat16_40<0.0;
#endif
    u_xlatb39 = u_xlatb3.x && u_xlatb39;
    if((int(u_xlatb39) * int(0xffffffffu))!=0){discard;}
    u_xlat10_3.xz = texture(_LightMapTex, vs_TEXCOORD0.xy, -1.0).xz;
    u_xlat16_4.xyz = u_xlat10_2.xyz * _Color.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb39 = !!(0.00999999978<u_xlat10_2.w);
#else
    u_xlatb39 = 0.00999999978<u_xlat10_2.w;
#endif
    u_xlatb2 = u_xlatb39 && u_xlatb3.y;
    u_xlat16_5 = (u_xlatb2) ? u_xlat10_2.w : 0.0;
    u_xlat16_18.x = dot(u_xlat16_1.xyz, mhy_AvatarLightDir.xyz);
    u_xlat16 = u_xlat16_18.x * 0.497500002 + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb42 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorAO));
#else
    u_xlatb42 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorAO);
#endif
    u_xlat16_18.x = vs_COLOR0.x * 0.5;
    u_xlat16_18.x = (u_xlatb42) ? u_xlat16_18.x : 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(u_xlat16_18.x<0.0500000007);
#else
    u_xlatb6 = u_xlat16_18.x<0.0500000007;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb19 = !!(0.949999988<u_xlat16_18.x);
#else
    u_xlatb19 = 0.949999988<u_xlat16_18.x;
#endif
    u_xlat32 = u_xlat16 + u_xlat16_18.x;
    u_xlat32 = u_xlat32 * 0.5;
    u_xlat16_18.x = (u_xlatb19) ? 1.0 : u_xlat32;
    u_xlat16_18.x = (u_xlatb6) ? 0.0 : u_xlat16_18.x;
    u_xlat16_18.x = (u_xlatb42) ? u_xlat16_18.x : u_xlat16;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(u_xlat16_18.x<_LightArea);
#else
    u_xlatb16 = u_xlat16_18.x<_LightArea;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb42 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition));
#else
    u_xlatb42 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition);
#endif
    u_xlat16_18.x = (-u_xlat16_18.x) + _LightArea;
    u_xlat16_18.x = u_xlat16_18.x / _ShadowTransitionRange;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(u_xlat16_18.x>=1.0);
#else
    u_xlatb6 = u_xlat16_18.x>=1.0;
#endif
    u_xlat16_19.x = u_xlat16_18.x + 0.00999999978;
    u_xlat16_19.x = log2(u_xlat16_19.x);
    u_xlat19.x = u_xlat16_19.x * _ShadowTransitionSoftness;
    u_xlat19.x = exp2(u_xlat19.x);
    u_xlat19.x = min(u_xlat19.x, 1.0);
    u_xlat6 = (u_xlatb6) ? 1.0 : u_xlat19.x;
    u_xlat6 = (u_xlatb42) ? u_xlat6 : 1.0;
    u_xlat6 = u_xlatb16 ? u_xlat6 : float(0.0);
    u_xlat16 = u_xlatb16 ? 1.0 : float(0.0);
    u_xlat16 = ((gl_FrontFacing ? 0xffffffffu : uint(0)) != uint(0u)) ? u_xlat16 : 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb19 = !!(0.899999976<u_xlat10_3.x);
#else
    u_xlatb19 = 0.899999976<u_xlat10_3.x;
#endif
    if(u_xlatb19){
        u_xlat19.xy = u_xlat16_1.yy * hlslcc_mtx4x4unity_WorldToCamera[1].xy;
        u_xlat19.xy = hlslcc_mtx4x4unity_WorldToCamera[0].xy * u_xlat16_1.xx + u_xlat19.xy;
        u_xlat7.yz = hlslcc_mtx4x4unity_WorldToCamera[2].xy * u_xlat16_1.zz + u_xlat19.xy;
        u_xlat7.x = u_xlat7.y * _MTMapTileScale;
        u_xlat16_18.xy = u_xlat7.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
        u_xlat10_19 = texture(_MTMap, u_xlat16_18.xy).x;
        u_xlat16_18.x = u_xlat10_19 * _MTMapBrightness;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_18.x = min(max(u_xlat16_18.x, 0.0), 1.0);
#else
        u_xlat16_18.x = clamp(u_xlat16_18.x, 0.0, 1.0);
#endif
        u_xlat16_8.xyz = _MTMapLightColor.xyz + (-_MTMapDarkColor.xyz);
        u_xlat16_18.xyz = u_xlat16_18.xxx * u_xlat16_8.xyz + _MTMapDarkColor.xyz;
        u_xlat16_18.xyz = u_xlat16_4.xyz * u_xlat16_18.xyz;
        u_xlat16_8.x = dot(u_xlat16_1.xyz, u_xlat0.xyz);
        u_xlat16_8.x = max(u_xlat16_8.x, 0.00100000005);
        u_xlat16_8.x = log2(u_xlat16_8.x);
        u_xlat16_8.x = u_xlat16_8.x * _MTShininess;
        u_xlat16_8.x = exp2(u_xlat16_8.x);
        u_xlat16_8.x = u_xlat16_8.x * _MTSpecularScale;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_8.x = min(max(u_xlat16_8.x, 0.0), 1.0);
#else
        u_xlat16_8.x = clamp(u_xlat16_8.x, 0.0, 1.0);
#endif
        u_xlat16_8.xyz = u_xlat16_8.xxx * _MTSpecularColor.xyz;
        u_xlat16_8.xyz = u_xlat10_3.zzz * u_xlat16_8.xyz;
        u_xlat16_9.xyz = u_xlat16_18.xyz * _MTShadowMultiColor.xyz;
        u_xlat16_19.xyz = _MTShadowMultiColor.xyz + vec3(-1.0, -1.0, -1.0);
        u_xlat19.xyz = vec3(u_xlat6) * u_xlat16_19.xyz + vec3(1.0, 1.0, 1.0);
        u_xlat16_10.xyz = (bool(u_xlatb42)) ? u_xlat19.xyz : _MTShadowMultiColor.xyz;
#ifdef UNITY_ADRENO_ES3
        u_xlatb29 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(u_xlat16));
#else
        u_xlatb29 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(u_xlat16);
#endif
        u_xlat16_10.xyz = u_xlat16_18.xyz * u_xlat16_10.xyz;
        u_xlat19.xyz = u_xlat16_18.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
        u_xlat19.xyz = (bool(u_xlatb29)) ? u_xlat16_10.xyz : u_xlat19.xyz;
        u_xlat7.xyz = u_xlat16_8.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
        u_xlat16_19.xyz = u_xlat19.xyz;
        u_xlat16_7.xyz = u_xlat7.xyz;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb29 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex));
#else
        u_xlatb29 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex);
#endif
        u_xlat16_11.xyz = vec3(_FirstShadowMultColor.xxyz.y + (-_CoolShadowMultColor.x), _FirstShadowMultColor.xxyz.z + (-_CoolShadowMultColor.y), float(_FirstShadowMultColor.z) + (-_CoolShadowMultColor.z));
        u_xlat11.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_11.xyz + _CoolShadowMultColor.xyz;
        u_xlat16_18.xyz = (bool(u_xlatb29)) ? u_xlat11.xyz : vec3(_FirstShadowMultColor.x, _FirstShadowMultColor.y, _FirstShadowMultColor.z);
        u_xlat16_9.xyz = u_xlat16_4.xyz * u_xlat16_18.xyz;
        u_xlat16_11.xyz = u_xlat16_18.xyz + vec3(-1.0, -1.0, -1.0);
        u_xlat11.xyz = vec3(u_xlat6) * u_xlat16_11.xyz + vec3(1.0, 1.0, 1.0);
        u_xlat16_18.xyz = (bool(u_xlatb42)) ? u_xlat11.xyz : u_xlat16_18.xyz;
#ifdef UNITY_ADRENO_ES3
        u_xlatb16 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(u_xlat16));
#else
        u_xlatb16 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(u_xlat16);
#endif
        u_xlat16_18.xyz = u_xlat16_4.xyz * u_xlat16_18.xyz;
        u_xlat11.xyz = u_xlat16_4.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
        u_xlat19.xyz = (bool(u_xlatb16)) ? u_xlat16_18.xyz : u_xlat11.xyz;
        u_xlat16_18.x = dot(u_xlat16_1.xyz, u_xlat0.xyz);
        u_xlat16_18.x = max(u_xlat16_18.x, 0.00100000005);
        u_xlat16_18.x = log2(u_xlat16_18.x);
        u_xlat16_18.x = u_xlat16_18.x * _Shininess;
        u_xlat16_18.x = exp2(u_xlat16_18.x);
        u_xlat16_18.xyz = u_xlat16_18.xxx * _SpecularColor.xyz;
        u_xlat16_18.xyz = u_xlat16_18.xyz * vec3(_SpecMulti);
        u_xlat16_18.xyz = u_xlat10_3.xxx * u_xlat16_18.xyz;
        u_xlat7.xyz = u_xlat16_18.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
        u_xlat16_19.xyz = u_xlat19.xyz;
        u_xlat16_7.xyz = u_xlat7.xyz;
    //ENDIF
    }
    u_xlat16_18.xyz = u_xlat16_4.xyz * _EmissionColor_MHY.xyz;
    u_xlat16_8.xyz = u_xlat16_19.xyz + u_xlat16_7.xyz;
    u_xlat16_9.xyz = u_xlat16_7.xyz + u_xlat16_9.xyz;
    u_xlat16_10.xyz = u_xlat16_18.xyz * vec3(vec3(_EmissionScaler, _EmissionScaler, _EmissionScaler)) + (-u_xlat16_8.xyz);
    u_xlat16_10.xyz = vec3(u_xlat16_5) * u_xlat16_10.xyz + u_xlat16_8.xyz;
    u_xlat16_18.xyz = u_xlat16_18.xyz * vec3(vec3(_EmissionScaler, _EmissionScaler, _EmissionScaler)) + (-u_xlat16_9.xyz);
    u_xlat16_18.xyz = vec3(u_xlat16_5) * u_xlat16_18.xyz + u_xlat16_9.xyz;
    u_xlat16_8.xyz = (bool(u_xlatb2)) ? u_xlat16_10.xyz : u_xlat16_8.xyz;
    u_xlat16_18.xyz = (bool(u_xlatb2)) ? u_xlat16_18.xyz : u_xlat16_9.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb3.x = !!(0.00999999978<u_xlat16_5);
#else
    u_xlatb3.x = 0.00999999978<u_xlat16_5;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn));
#else
    u_xlatb16 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn);
#endif
    u_xlat11.xyz = u_xlat16_8.xyz * vec3(vec3(_ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness));
    u_xlat12.xyz = _ES_CharacterMainLightColor.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat12.xyz = vec3(vec3(_ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio)) * u_xlat12.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat11.xyz = u_xlat11.xyz * u_xlat12.xyz;
    u_xlat12.xyz = _ES_CharacterAmbientLightColor.xyz * vec3(_ES_CharacterAmbientLightRatio);
    u_xlat16_9.xyz = u_xlat11.xyz * vec3(10.0, 10.0, 10.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_9.xyz = min(max(u_xlat16_9.xyz, 0.0), 1.0);
#else
    u_xlat16_9.xyz = clamp(u_xlat16_9.xyz, 0.0, 1.0);
#endif
    u_xlat11.xyz = u_xlat12.xyz * u_xlat16_9.xyz + u_xlat11.xyz;
    u_xlat16_9.xyz = (bool(u_xlatb16)) ? u_xlat11.xyz : u_xlat16_8.xyz;
    u_xlat16_10.xyz = u_xlat16_8.xyz + (-u_xlat16_9.xyz);
    u_xlat16_10.xyz = vec3(u_xlat16_5) * u_xlat16_10.xyz + u_xlat16_9.xyz;
    u_xlat16_8.xyz = (-u_xlat16_18.xyz) + u_xlat16_8.xyz;
    u_xlat16_8.xyz = vec3(u_xlat16_5) * u_xlat16_8.xyz + u_xlat16_18.xyz;
    u_xlat16_0.xyz = (u_xlatb3.x) ? u_xlat16_10.xyz : u_xlat16_9.xyz;
    u_xlat16_18.xyz = (u_xlatb3.x) ? u_xlat16_8.xyz : u_xlat16_18.xyz;
    u_xlat16_8.x = max(u_xlat16_0.z, u_xlat16_0.y);
    u_xlat16_2.w = max(u_xlat16_0.x, u_xlat16_8.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb3.x = !!(1.0<u_xlat16_2.w);
#else
    u_xlatb3.x = 1.0<u_xlat16_2.w;
#endif
    u_xlat16_2.xyz = u_xlat16_0.xyz / u_xlat16_2.www;
    u_xlat16_0.w = 1.0;
    u_xlat16_0 = (u_xlatb3.x) ? u_xlat16_2 : u_xlat16_0;
    u_xlat16_8.x = min(u_xlat16_0.w, 1.10000002);
    u_xlat16_21 = u_xlat16_0.w + (-u_xlat16_8.x);
    u_xlat16_5 = u_xlat16_5 * u_xlat16_21 + u_xlat16_8.x;
    SV_Target1.w = u_xlat16_5 * 0.0500000007;
    SV_Target0.xyz = u_xlat16_1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb3.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb3.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_5 = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb3.x) ? u_xlat16_5 : u_xlat16_18.z;
    SV_Target0.w = 0.0470588244;
    SV_Target1.xyz = u_xlat16_0.xyz;
    SV_Target2.xy = u_xlat16_18.xy;
    SV_Target2.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "MSAA_INTERPOLATION" "BACK_FACE_ON" "METAL_MAT" "NORMAL_MAP_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
float u_xlat12;
void main()
{
    u_xlat0.x = hlslcc_mtx4x4unity_ObjectToWorld[0].y;
    u_xlat0.y = hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat0.z = hlslcc_mtx4x4unity_ObjectToWorld[2].y;
    u_xlat1.xyw = (-_WorldSpaceCameraPos.xyz) + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat0.w = u_xlat1.y;
    u_xlat2.xyz = in_POSITION0.xyz;
    u_xlat2.w = 1.0;
    u_xlat0.x = dot(u_xlat0, u_xlat2);
    u_xlat0 = u_xlat0.xxxx * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat3.w = u_xlat1.x;
    u_xlat3.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;
    u_xlat3.y = hlslcc_mtx4x4unity_ObjectToWorld[1].x;
    u_xlat3.z = hlslcc_mtx4x4unity_ObjectToWorld[2].x;
    u_xlat3.x = dot(u_xlat3, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat3.xxxx + u_xlat0;
    u_xlat1.x = hlslcc_mtx4x4unity_ObjectToWorld[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_ObjectToWorld[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_ObjectToWorld[2].z;
    u_xlat1.x = dot(u_xlat1, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat1.xxxx + u_xlat0;
    u_xlat1.x = hlslcc_mtx4x4unity_ObjectToWorld[0].w;
    u_xlat1.y = hlslcc_mtx4x4unity_ObjectToWorld[1].w;
    u_xlat1.z = hlslcc_mtx4x4unity_ObjectToWorld[2].w;
    u_xlat1.w = hlslcc_mtx4x4unity_ObjectToWorld[3].w;
    u_xlat1.x = dot(u_xlat1, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[3] * u_xlat1.xxxx + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD1 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.zw = u_xlat0.zw;
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD3.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
    u_xlat12 = in_TANGENT0.w * unity_WorldTransformParams.w;
    u_xlat2.xyz = vec3(u_xlat12) * u_xlat2.xyz;
    vs_TEXCOORD4.y = u_xlat2.x;
    vs_TEXCOORD4.x = u_xlat1.z;
    vs_TEXCOORD4.z = u_xlat0.y;
    vs_TEXCOORD5.x = u_xlat1.x;
    vs_TEXCOORD6.x = u_xlat1.y;
    vs_TEXCOORD5.z = u_xlat0.z;
    vs_TEXCOORD6.z = u_xlat0.x;
    vs_TEXCOORD5.y = u_xlat2.y;
    vs_TEXCOORD6.y = u_xlat2.z;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToCamera[4];
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	mediump vec4 _Color;
uniform 	float _MainTexAlphaUse;
uniform 	mediump float _MainTexAlphaCutoff;
uniform 	mediump float _BumpScale;
uniform 	float _UseVertexColorAO;
uniform 	mediump float _LightArea;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	float _UseCoolShadowColorOrTex;
uniform 	mediump vec3 _CoolShadowMultColor;
uniform 	float _UseShadowTransition;
uniform 	float _ShadowTransitionRange;
uniform 	float _ShadowTransitionSoftness;
uniform 	mediump vec3 _SpecularColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump float _EmissionScaler;
uniform 	mediump vec3 _EmissionColor_MHY;
uniform 	mediump float _MTMapBrightness;
uniform 	float _MTMapTileScale;
uniform 	mediump vec3 _MTMapLightColor;
uniform 	mediump vec3 _MTMapDarkColor;
uniform 	mediump vec3 _MTShadowMultiColor;
uniform 	mediump float _MTShininess;
uniform 	mediump vec3 _MTSpecularColor;
uniform 	mediump float _MTSpecularScale;
uniform 	float _ES_CharacterAmbientLightOn;
uniform 	float _ES_CharacterAmbientBrightness;
uniform 	vec3 _ES_CharacterMainLightColor;
uniform 	float _ES_CharacterMainLightBrightness;
uniform 	vec3 _ES_CharacterAmbientLightColor;
uniform 	float _ES_CharacterMainLightRatio;
uniform 	float _ES_CharacterAmbientLightRatio;
uniform 	float _ES_CharacterColorTone;
uniform 	vec3 mhy_AvatarLightDir;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MTMap;
in mediump vec4 vs_COLOR0;
in highp vec2 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD5;
in highp vec3 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec2 u_xlat0;
mediump vec4 u_xlat16_0;
vec3 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
lowp vec4 u_xlat10_3;
bool u_xlatb3;
bvec2 u_xlatb4;
lowp vec2 u_xlat10_5;
bool u_xlatb5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
mediump vec3 u_xlat16_11;
vec3 u_xlat12;
mediump vec3 u_xlat16_12;
bool u_xlatb12;
vec3 u_xlat13;
float u_xlat17;
bool u_xlatb17;
vec3 u_xlat19;
mediump vec3 u_xlat16_19;
bool u_xlatb19;
mediump vec3 u_xlat16_21;
vec3 u_xlat26;
mediump vec3 u_xlat16_26;
vec2 u_xlat28;
bool u_xlatb31;
vec2 u_xlat33;
mediump float u_xlat16_33;
lowp float u_xlat10_33;
bool u_xlatb33;
float u_xlat43;
bool u_xlatb43;
mediump float u_xlat16_44;
float u_xlat45;
bool u_xlatb45;
float u_xlat47;
mediump float u_xlat16_48;
mediump float u_xlat16_49;
void main()
{
    u_xlat0.xy = dFdx(vs_TEXCOORD0.xy);
    u_xlat28.xy = dFdy(vs_TEXCOORD0.xy);
    u_xlat0.xy = u_xlat28.xy + u_xlat0.xy;
    u_xlat28.xy = (-u_xlat0.xy) * vec2(0.25, 0.25) + vs_TEXCOORD0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25) + vs_TEXCOORD0.xy;
    u_xlat0.xy = (int(gl_SampleID) != 0) ? u_xlat28.xy : u_xlat0.xy;
    u_xlat10_1.xyz = textureLod(_BumpMap, u_xlat0.xy, 0.0).xyz;
    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_2.xy = u_xlat16_2.xy * vec2(vec2(_BumpScale, _BumpScale));
    u_xlat1.x = dot(vs_TEXCOORD4.xyz, u_xlat16_2.xyz);
    u_xlat1.y = dot(vs_TEXCOORD5.xyz, u_xlat16_2.xyz);
    u_xlat1.z = dot(vs_TEXCOORD6.xyz, u_xlat16_2.xyz);
    u_xlat16_2.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat16_2.x = inversesqrt(u_xlat16_2.x);
    u_xlat16_2.xyz = u_xlat1.xyz * u_xlat16_2.xxx;
    u_xlat16_2.xyz = (uint((gl_FrontFacing ? 0xffffffffu : uint(0))) != uint(0u)) ? u_xlat16_2.xyz : (-u_xlat16_2.xyz);
    u_xlat1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat28.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat28.x = inversesqrt(u_xlat28.x);
    u_xlat1.xyz = u_xlat1.xyz * u_xlat28.xxx + mhy_AvatarLightDir.xyz;
    u_xlat28.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat43 = inversesqrt(u_xlat28.x);
    u_xlat1.xyz = vec3(u_xlat43) * u_xlat1.xyz;
    u_xlat10_3 = textureLod(_MainTex, u_xlat0.xy, 0.0);
    u_xlatb4.xy = equal(vec4(_MainTexAlphaUse), vec4(1.0, 2.0, 0.0, 0.0)).xy;
    u_xlat16_44 = u_xlat10_3.w + (-_MainTexAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb43 = !!(u_xlat16_44<0.0);
#else
    u_xlatb43 = u_xlat16_44<0.0;
#endif
    u_xlatb5 = u_xlatb4.x && u_xlatb43;
    if((int(u_xlatb5) * int(0xffffffffu))!=0){discard;}
    u_xlat10_5.xy = textureLod(_LightMapTex, u_xlat0.xy, 0.0).xz;
    u_xlat16_6.xyz = u_xlat10_3.xyz * _Color.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(0.00999999978<u_xlat10_3.w);
#else
    u_xlatb3 = 0.00999999978<u_xlat10_3.w;
#endif
    u_xlatb3 = u_xlatb3 && u_xlatb4.y;
    u_xlat16_48 = (u_xlatb3) ? u_xlat10_3.w : 0.0;
    u_xlat16_7.x = dot(u_xlat16_2.xyz, mhy_AvatarLightDir.xyz);
    u_xlat17 = u_xlat16_7.x * 0.497500002 + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb31 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorAO));
#else
    u_xlatb31 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorAO);
#endif
    u_xlat16_7.x = vs_COLOR0.x * 0.5;
    u_xlat16_7.x = (u_xlatb31) ? u_xlat16_7.x : 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb45 = !!(u_xlat16_7.x<0.0500000007);
#else
    u_xlatb45 = u_xlat16_7.x<0.0500000007;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(0.949999988<u_xlat16_7.x);
#else
    u_xlatb33 = 0.949999988<u_xlat16_7.x;
#endif
    u_xlat47 = u_xlat17 + u_xlat16_7.x;
    u_xlat47 = u_xlat47 * 0.5;
    u_xlat16_7.x = (u_xlatb33) ? 1.0 : u_xlat47;
    u_xlat16_7.x = (u_xlatb45) ? 0.0 : u_xlat16_7.x;
    u_xlat16_7.x = (u_xlatb31) ? u_xlat16_7.x : u_xlat17;
#ifdef UNITY_ADRENO_ES3
    u_xlatb17 = !!(u_xlat16_7.x<_LightArea);
#else
    u_xlatb17 = u_xlat16_7.x<_LightArea;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb31 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition));
#else
    u_xlatb31 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition);
#endif
    u_xlat16_7.x = (-u_xlat16_7.x) + _LightArea;
    u_xlat16_7.x = u_xlat16_7.x / _ShadowTransitionRange;
#ifdef UNITY_ADRENO_ES3
    u_xlatb45 = !!(u_xlat16_7.x>=1.0);
#else
    u_xlatb45 = u_xlat16_7.x>=1.0;
#endif
    u_xlat16_33 = u_xlat16_7.x + 0.00999999978;
    u_xlat16_33 = log2(u_xlat16_33);
    u_xlat33.x = u_xlat16_33 * _ShadowTransitionSoftness;
    u_xlat33.x = exp2(u_xlat33.x);
    u_xlat33.x = min(u_xlat33.x, 1.0);
    u_xlat45 = (u_xlatb45) ? 1.0 : u_xlat33.x;
    u_xlat45 = (u_xlatb31) ? u_xlat45 : 1.0;
    u_xlat45 = u_xlatb17 ? u_xlat45 : float(0.0);
    u_xlat17 = u_xlatb17 ? 1.0 : float(0.0);
    u_xlat17 = ((gl_FrontFacing ? 0xffffffffu : uint(0)) != uint(0u)) ? u_xlat17 : 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(0.899999976<u_xlat10_5.x);
#else
    u_xlatb33 = 0.899999976<u_xlat10_5.x;
#endif
    if(u_xlatb33){
        u_xlat33.xy = u_xlat16_2.yy * hlslcc_mtx4x4unity_WorldToCamera[1].xy;
        u_xlat33.xy = hlslcc_mtx4x4unity_WorldToCamera[0].xy * u_xlat16_2.xx + u_xlat33.xy;
        u_xlat8.yz = hlslcc_mtx4x4unity_WorldToCamera[2].xy * u_xlat16_2.zz + u_xlat33.xy;
        u_xlat8.x = u_xlat8.y * _MTMapTileScale;
        u_xlat16_7.xy = u_xlat8.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
        u_xlat10_33 = texture(_MTMap, u_xlat16_7.xy, -1.0).x;
        u_xlat16_7.x = u_xlat10_33 * _MTMapBrightness;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
        u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
        u_xlat16_21.xyz = _MTMapLightColor.xyz + (-_MTMapDarkColor.xyz);
        u_xlat16_7.xyz = u_xlat16_7.xxx * u_xlat16_21.xyz + _MTMapDarkColor.xyz;
        u_xlat16_7.xyz = u_xlat16_6.xyz * u_xlat16_7.xyz;
        u_xlat16_49 = dot(u_xlat16_2.xyz, u_xlat1.xyz);
        u_xlat16_49 = max(u_xlat16_49, 0.00100000005);
        u_xlat16_49 = log2(u_xlat16_49);
        u_xlat16_49 = u_xlat16_49 * _MTShininess;
        u_xlat16_49 = exp2(u_xlat16_49);
        u_xlat16_49 = u_xlat16_49 * _MTSpecularScale;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_49 = min(max(u_xlat16_49, 0.0), 1.0);
#else
        u_xlat16_49 = clamp(u_xlat16_49, 0.0, 1.0);
#endif
        u_xlat16_9.xyz = vec3(u_xlat16_49) * _MTSpecularColor.xyz;
        u_xlat16_9.xyz = u_xlat10_5.yyy * u_xlat16_9.xyz;
        u_xlat16_10.xyz = u_xlat16_7.xyz * _MTShadowMultiColor.xyz;
        u_xlat16_19.xyz = _MTShadowMultiColor.xyz + vec3(-1.0, -1.0, -1.0);
        u_xlat19.xyz = vec3(u_xlat45) * u_xlat16_19.xyz + vec3(1.0, 1.0, 1.0);
        u_xlat16_11.xyz = (bool(u_xlatb31)) ? u_xlat19.xyz : _MTShadowMultiColor.xyz;
#ifdef UNITY_ADRENO_ES3
        u_xlatb19 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(u_xlat17));
#else
        u_xlatb19 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(u_xlat17);
#endif
        u_xlat16_11.xyz = u_xlat16_7.xyz * u_xlat16_11.xyz;
        u_xlat8.xyz = u_xlat16_7.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
        u_xlat19.xyz = (bool(u_xlatb19)) ? u_xlat16_11.xyz : u_xlat8.xyz;
        u_xlat8.xyz = u_xlat16_9.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
        u_xlat16_19.xyz = u_xlat19.xyz;
        u_xlat16_8.xyz = u_xlat8.xyz;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb12 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex));
#else
        u_xlatb12 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex);
#endif
        u_xlat16_26.xyz = vec3(_FirstShadowMultColor.xxyz.y + (-_CoolShadowMultColor.x), _FirstShadowMultColor.xxyz.z + (-_CoolShadowMultColor.y), float(_FirstShadowMultColor.z) + (-_CoolShadowMultColor.z));
        u_xlat26.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_26.xyz + _CoolShadowMultColor.xyz;
        u_xlat16_7.xyz = (bool(u_xlatb12)) ? u_xlat26.xyz : vec3(_FirstShadowMultColor.x, _FirstShadowMultColor.y, _FirstShadowMultColor.z);
        u_xlat16_10.xyz = u_xlat16_6.xyz * u_xlat16_7.xyz;
        u_xlat16_12.xyz = u_xlat16_7.xyz + vec3(-1.0, -1.0, -1.0);
        u_xlat12.xyz = vec3(u_xlat45) * u_xlat16_12.xyz + vec3(1.0, 1.0, 1.0);
        u_xlat16_7.xyz = (bool(u_xlatb31)) ? u_xlat12.xyz : u_xlat16_7.xyz;
#ifdef UNITY_ADRENO_ES3
        u_xlatb17 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(u_xlat17));
#else
        u_xlatb17 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(u_xlat17);
#endif
        u_xlat16_7.xyz = u_xlat16_6.xyz * u_xlat16_7.xyz;
        u_xlat12.xyz = u_xlat16_6.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
        u_xlat19.xyz = (bool(u_xlatb17)) ? u_xlat16_7.xyz : u_xlat12.xyz;
        u_xlat16_7.x = dot(u_xlat16_2.xyz, u_xlat1.xyz);
        u_xlat16_7.x = max(u_xlat16_7.x, 0.00100000005);
        u_xlat16_7.x = log2(u_xlat16_7.x);
        u_xlat16_7.x = u_xlat16_7.x * _Shininess;
        u_xlat16_7.x = exp2(u_xlat16_7.x);
        u_xlat16_7.xyz = u_xlat16_7.xxx * _SpecularColor.xyz;
        u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(_SpecMulti);
        u_xlat16_7.xyz = u_xlat10_5.xxx * u_xlat16_7.xyz;
        u_xlat8.xyz = u_xlat16_7.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
        u_xlat16_19.xyz = u_xlat19.xyz;
        u_xlat16_8.xyz = u_xlat8.xyz;
    //ENDIF
    }
    u_xlat16_6.xyz = u_xlat16_6.xyz * _EmissionColor_MHY.xyz;
    u_xlat16_7.xyz = u_xlat16_19.xyz + u_xlat16_8.xyz;
    u_xlat16_9.xyz = u_xlat16_8.xyz + u_xlat16_10.xyz;
    u_xlat16_10.xyz = u_xlat16_6.xyz * vec3(vec3(_EmissionScaler, _EmissionScaler, _EmissionScaler)) + (-u_xlat16_7.xyz);
    u_xlat16_10.xyz = vec3(u_xlat16_48) * u_xlat16_10.xyz + u_xlat16_7.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(vec3(_EmissionScaler, _EmissionScaler, _EmissionScaler)) + (-u_xlat16_9.xyz);
    u_xlat16_6.xyz = vec3(u_xlat16_48) * u_xlat16_6.xyz + u_xlat16_9.xyz;
    u_xlat16_7.xyz = (bool(u_xlatb3)) ? u_xlat16_10.xyz : u_xlat16_7.xyz;
    u_xlat16_6.xyz = (bool(u_xlatb3)) ? u_xlat16_6.xyz : u_xlat16_9.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(0.00999999978<u_xlat16_48);
#else
    u_xlatb3 = 0.00999999978<u_xlat16_48;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb17 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn));
#else
    u_xlatb17 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn);
#endif
    u_xlat12.xyz = u_xlat16_7.xyz * vec3(vec3(_ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness));
    u_xlat13.xyz = _ES_CharacterMainLightColor.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat13.xyz = vec3(vec3(_ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio)) * u_xlat13.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat12.xyz = u_xlat12.xyz * u_xlat13.xyz;
    u_xlat13.xyz = _ES_CharacterAmbientLightColor.xyz * vec3(_ES_CharacterAmbientLightRatio);
    u_xlat16_9.xyz = u_xlat12.xyz * vec3(10.0, 10.0, 10.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_9.xyz = min(max(u_xlat16_9.xyz, 0.0), 1.0);
#else
    u_xlat16_9.xyz = clamp(u_xlat16_9.xyz, 0.0, 1.0);
#endif
    u_xlat12.xyz = u_xlat13.xyz * u_xlat16_9.xyz + u_xlat12.xyz;
    u_xlat16_9.xyz = (bool(u_xlatb17)) ? u_xlat12.xyz : u_xlat16_7.xyz;
    u_xlat16_10.xyz = u_xlat16_7.xyz + (-u_xlat16_9.xyz);
    u_xlat16_10.xyz = vec3(u_xlat16_48) * u_xlat16_10.xyz + u_xlat16_9.xyz;
    u_xlat16_7.xyz = (-u_xlat16_6.xyz) + u_xlat16_7.xyz;
    u_xlat16_7.xyz = vec3(u_xlat16_48) * u_xlat16_7.xyz + u_xlat16_6.xyz;
    u_xlat16_0.xyz = (bool(u_xlatb3)) ? u_xlat16_10.xyz : u_xlat16_9.xyz;
    u_xlat16_6.xyz = (bool(u_xlatb3)) ? u_xlat16_7.xyz : u_xlat16_6.xyz;
    u_xlat16_7.x = max(u_xlat16_0.z, u_xlat16_0.y);
    u_xlat16_1.w = max(u_xlat16_0.x, u_xlat16_7.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(1.0<u_xlat16_1.w);
#else
    u_xlatb3 = 1.0<u_xlat16_1.w;
#endif
    u_xlat16_1.xyz = u_xlat16_0.xyz / u_xlat16_1.www;
    u_xlat16_0.w = 1.0;
    u_xlat16_0 = (bool(u_xlatb3)) ? u_xlat16_1 : u_xlat16_0;
    u_xlat16_7.x = min(u_xlat16_0.w, 1.10000002);
    u_xlat16_21.x = u_xlat16_0.w + (-u_xlat16_7.x);
    u_xlat16_48 = u_xlat16_48 * u_xlat16_21.x + u_xlat16_7.x;
    SV_Target1.w = u_xlat16_48 * 0.0500000007;
    SV_Target0.xyz = u_xlat16_2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb3 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_48 = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb3) ? u_xlat16_48 : u_xlat16_6.z;
    SV_Target0.w = 0.0470588244;
    SV_Target1.xyz = u_xlat16_0.xyz;
    SV_Target2.xy = u_xlat16_6.xy;
    SV_Target2.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "LINE_INTERPOLATION" "BACK_FACE_ON" "METAL_MAT" "NORMAL_MAP_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
float u_xlat12;
void main()
{
    u_xlat0.x = hlslcc_mtx4x4unity_ObjectToWorld[0].y;
    u_xlat0.y = hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat0.z = hlslcc_mtx4x4unity_ObjectToWorld[2].y;
    u_xlat1.xyw = (-_WorldSpaceCameraPos.xyz) + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat0.w = u_xlat1.y;
    u_xlat2.xyz = in_POSITION0.xyz;
    u_xlat2.w = 1.0;
    u_xlat0.x = dot(u_xlat0, u_xlat2);
    u_xlat0 = u_xlat0.xxxx * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat3.w = u_xlat1.x;
    u_xlat3.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;
    u_xlat3.y = hlslcc_mtx4x4unity_ObjectToWorld[1].x;
    u_xlat3.z = hlslcc_mtx4x4unity_ObjectToWorld[2].x;
    u_xlat3.x = dot(u_xlat3, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat3.xxxx + u_xlat0;
    u_xlat1.x = hlslcc_mtx4x4unity_ObjectToWorld[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_ObjectToWorld[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_ObjectToWorld[2].z;
    u_xlat1.x = dot(u_xlat1, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat1.xxxx + u_xlat0;
    u_xlat1.x = hlslcc_mtx4x4unity_ObjectToWorld[0].w;
    u_xlat1.y = hlslcc_mtx4x4unity_ObjectToWorld[1].w;
    u_xlat1.z = hlslcc_mtx4x4unity_ObjectToWorld[2].w;
    u_xlat1.w = hlslcc_mtx4x4unity_ObjectToWorld[3].w;
    u_xlat1.x = dot(u_xlat1, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[3] * u_xlat1.xxxx + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD1 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.zw = u_xlat0.zw;
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD3.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
    u_xlat12 = in_TANGENT0.w * unity_WorldTransformParams.w;
    u_xlat2.xyz = vec3(u_xlat12) * u_xlat2.xyz;
    vs_TEXCOORD4.y = u_xlat2.x;
    vs_TEXCOORD4.x = u_xlat1.z;
    vs_TEXCOORD4.z = u_xlat0.y;
    vs_TEXCOORD5.x = u_xlat1.x;
    vs_TEXCOORD6.x = u_xlat1.y;
    vs_TEXCOORD5.z = u_xlat0.z;
    vs_TEXCOORD6.z = u_xlat0.x;
    vs_TEXCOORD5.y = u_xlat2.y;
    vs_TEXCOORD6.y = u_xlat2.z;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToCamera[4];
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	mediump vec4 _Color;
uniform 	float _MainTexAlphaUse;
uniform 	mediump float _MainTexAlphaCutoff;
uniform 	mediump float _BumpScale;
uniform 	float _UseVertexColorAO;
uniform 	mediump float _LightArea;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	float _UseCoolShadowColorOrTex;
uniform 	mediump vec3 _CoolShadowMultColor;
uniform 	float _UseShadowTransition;
uniform 	float _ShadowTransitionRange;
uniform 	float _ShadowTransitionSoftness;
uniform 	mediump vec3 _SpecularColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump float _EmissionScaler;
uniform 	mediump vec3 _EmissionColor_MHY;
uniform 	mediump float _MTMapBrightness;
uniform 	float _MTMapTileScale;
uniform 	mediump vec3 _MTMapLightColor;
uniform 	mediump vec3 _MTMapDarkColor;
uniform 	mediump vec3 _MTShadowMultiColor;
uniform 	mediump float _MTShininess;
uniform 	mediump vec3 _MTSpecularColor;
uniform 	mediump float _MTSpecularScale;
uniform 	float _ES_CharacterAmbientLightOn;
uniform 	float _ES_CharacterAmbientBrightness;
uniform 	vec3 _ES_CharacterMainLightColor;
uniform 	float _ES_CharacterMainLightBrightness;
uniform 	vec3 _ES_CharacterAmbientLightColor;
uniform 	float _ES_CharacterMainLightRatio;
uniform 	float _ES_CharacterAmbientLightRatio;
uniform 	float _ES_CharacterColorTone;
uniform 	vec3 mhy_AvatarLightDir;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MTMap;
in mediump vec4 vs_COLOR0;
in highp vec2 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD5;
in highp vec3 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec3 u_xlat10_0;
mediump vec3 u_xlat16_1;
mediump vec4 u_xlat16_2;
lowp vec4 u_xlat10_2;
bool u_xlatb2;
lowp vec3 u_xlat10_3;
bvec2 u_xlatb3;
mediump vec3 u_xlat16_4;
mediump float u_xlat16_5;
float u_xlat6;
bool u_xlatb6;
vec3 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
vec3 u_xlat11;
mediump vec3 u_xlat16_11;
vec3 u_xlat12;
float u_xlat16;
bool u_xlatb16;
mediump vec3 u_xlat16_18;
vec3 u_xlat19;
mediump vec3 u_xlat16_19;
lowp float u_xlat10_19;
bool u_xlatb19;
mediump float u_xlat16_21;
bool u_xlatb29;
float u_xlat32;
float u_xlat39;
bool u_xlatb39;
mediump float u_xlat16_40;
bool u_xlatb42;
void main()
{
    u_xlat10_0.xyz = texture(_BumpMap, vs_TEXCOORD0.xy, -1.0).xyz;
    u_xlat16_1.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_1.xy = u_xlat16_1.xy * vec2(vec2(_BumpScale, _BumpScale));
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, u_xlat16_1.xyz);
    u_xlat0.y = dot(vs_TEXCOORD5.xyz, u_xlat16_1.xyz);
    u_xlat0.z = dot(vs_TEXCOORD6.xyz, u_xlat16_1.xyz);
    u_xlat16_1.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat16_1.x = inversesqrt(u_xlat16_1.x);
    u_xlat16_1.xyz = u_xlat0.xyz * u_xlat16_1.xxx;
    u_xlat16_1.xyz = (uint((gl_FrontFacing ? 0xffffffffu : uint(0))) != uint(0u)) ? u_xlat16_1.xyz : (-u_xlat16_1.xyz);
    u_xlat0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat39 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat39 = inversesqrt(u_xlat39);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat39) + mhy_AvatarLightDir.xyz;
    u_xlat39 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat39 = inversesqrt(u_xlat39);
    u_xlat0.xyz = vec3(u_xlat39) * u_xlat0.xyz;
    u_xlat10_2 = texture(_MainTex, vs_TEXCOORD0.xy, -1.0);
    u_xlatb3.xy = equal(vec4(_MainTexAlphaUse), vec4(1.0, 2.0, 0.0, 0.0)).xy;
    u_xlat16_40 = u_xlat10_2.w + (-_MainTexAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb39 = !!(u_xlat16_40<0.0);
#else
    u_xlatb39 = u_xlat16_40<0.0;
#endif
    u_xlatb39 = u_xlatb3.x && u_xlatb39;
    if((int(u_xlatb39) * int(0xffffffffu))!=0){discard;}
    u_xlat10_3.xz = texture(_LightMapTex, vs_TEXCOORD0.xy, -1.0).xz;
    u_xlat16_4.xyz = u_xlat10_2.xyz * _Color.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb39 = !!(0.00999999978<u_xlat10_2.w);
#else
    u_xlatb39 = 0.00999999978<u_xlat10_2.w;
#endif
    u_xlatb2 = u_xlatb39 && u_xlatb3.y;
    u_xlat16_5 = (u_xlatb2) ? u_xlat10_2.w : 0.0;
    u_xlat16_18.x = dot(u_xlat16_1.xyz, mhy_AvatarLightDir.xyz);
    u_xlat16 = u_xlat16_18.x * 0.497500002 + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb42 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorAO));
#else
    u_xlatb42 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorAO);
#endif
    u_xlat16_18.x = vs_COLOR0.x * 0.5;
    u_xlat16_18.x = (u_xlatb42) ? u_xlat16_18.x : 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(u_xlat16_18.x<0.0500000007);
#else
    u_xlatb6 = u_xlat16_18.x<0.0500000007;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb19 = !!(0.949999988<u_xlat16_18.x);
#else
    u_xlatb19 = 0.949999988<u_xlat16_18.x;
#endif
    u_xlat32 = u_xlat16 + u_xlat16_18.x;
    u_xlat32 = u_xlat32 * 0.5;
    u_xlat16_18.x = (u_xlatb19) ? 1.0 : u_xlat32;
    u_xlat16_18.x = (u_xlatb6) ? 0.0 : u_xlat16_18.x;
    u_xlat16_18.x = (u_xlatb42) ? u_xlat16_18.x : u_xlat16;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(u_xlat16_18.x<_LightArea);
#else
    u_xlatb16 = u_xlat16_18.x<_LightArea;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb42 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition));
#else
    u_xlatb42 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition);
#endif
    u_xlat16_18.x = (-u_xlat16_18.x) + _LightArea;
    u_xlat16_18.x = u_xlat16_18.x / _ShadowTransitionRange;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(u_xlat16_18.x>=1.0);
#else
    u_xlatb6 = u_xlat16_18.x>=1.0;
#endif
    u_xlat16_19.x = u_xlat16_18.x + 0.00999999978;
    u_xlat16_19.x = log2(u_xlat16_19.x);
    u_xlat19.x = u_xlat16_19.x * _ShadowTransitionSoftness;
    u_xlat19.x = exp2(u_xlat19.x);
    u_xlat19.x = min(u_xlat19.x, 1.0);
    u_xlat6 = (u_xlatb6) ? 1.0 : u_xlat19.x;
    u_xlat6 = (u_xlatb42) ? u_xlat6 : 1.0;
    u_xlat6 = u_xlatb16 ? u_xlat6 : float(0.0);
    u_xlat16 = u_xlatb16 ? 1.0 : float(0.0);
    u_xlat16 = ((gl_FrontFacing ? 0xffffffffu : uint(0)) != uint(0u)) ? u_xlat16 : 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb19 = !!(0.899999976<u_xlat10_3.x);
#else
    u_xlatb19 = 0.899999976<u_xlat10_3.x;
#endif
    if(u_xlatb19){
        u_xlat19.xy = u_xlat16_1.yy * hlslcc_mtx4x4unity_WorldToCamera[1].xy;
        u_xlat19.xy = hlslcc_mtx4x4unity_WorldToCamera[0].xy * u_xlat16_1.xx + u_xlat19.xy;
        u_xlat7.yz = hlslcc_mtx4x4unity_WorldToCamera[2].xy * u_xlat16_1.zz + u_xlat19.xy;
        u_xlat7.x = u_xlat7.y * _MTMapTileScale;
        u_xlat16_18.xy = u_xlat7.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
        u_xlat10_19 = texture(_MTMap, u_xlat16_18.xy, -1.0).x;
        u_xlat16_18.x = u_xlat10_19 * _MTMapBrightness;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_18.x = min(max(u_xlat16_18.x, 0.0), 1.0);
#else
        u_xlat16_18.x = clamp(u_xlat16_18.x, 0.0, 1.0);
#endif
        u_xlat16_8.xyz = _MTMapLightColor.xyz + (-_MTMapDarkColor.xyz);
        u_xlat16_18.xyz = u_xlat16_18.xxx * u_xlat16_8.xyz + _MTMapDarkColor.xyz;
        u_xlat16_18.xyz = u_xlat16_4.xyz * u_xlat16_18.xyz;
        u_xlat16_8.x = dot(u_xlat16_1.xyz, u_xlat0.xyz);
        u_xlat16_8.x = max(u_xlat16_8.x, 0.00100000005);
        u_xlat16_8.x = log2(u_xlat16_8.x);
        u_xlat16_8.x = u_xlat16_8.x * _MTShininess;
        u_xlat16_8.x = exp2(u_xlat16_8.x);
        u_xlat16_8.x = u_xlat16_8.x * _MTSpecularScale;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_8.x = min(max(u_xlat16_8.x, 0.0), 1.0);
#else
        u_xlat16_8.x = clamp(u_xlat16_8.x, 0.0, 1.0);
#endif
        u_xlat16_8.xyz = u_xlat16_8.xxx * _MTSpecularColor.xyz;
        u_xlat16_8.xyz = u_xlat10_3.zzz * u_xlat16_8.xyz;
        u_xlat16_9.xyz = u_xlat16_18.xyz * _MTShadowMultiColor.xyz;
        u_xlat16_19.xyz = _MTShadowMultiColor.xyz + vec3(-1.0, -1.0, -1.0);
        u_xlat19.xyz = vec3(u_xlat6) * u_xlat16_19.xyz + vec3(1.0, 1.0, 1.0);
        u_xlat16_10.xyz = (bool(u_xlatb42)) ? u_xlat19.xyz : _MTShadowMultiColor.xyz;
#ifdef UNITY_ADRENO_ES3
        u_xlatb29 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(u_xlat16));
#else
        u_xlatb29 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(u_xlat16);
#endif
        u_xlat16_10.xyz = u_xlat16_18.xyz * u_xlat16_10.xyz;
        u_xlat19.xyz = u_xlat16_18.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
        u_xlat19.xyz = (bool(u_xlatb29)) ? u_xlat16_10.xyz : u_xlat19.xyz;
        u_xlat7.xyz = u_xlat16_8.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
        u_xlat16_19.xyz = u_xlat19.xyz;
        u_xlat16_7.xyz = u_xlat7.xyz;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb29 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex));
#else
        u_xlatb29 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex);
#endif
        u_xlat16_11.xyz = vec3(_FirstShadowMultColor.xxyz.y + (-_CoolShadowMultColor.x), _FirstShadowMultColor.xxyz.z + (-_CoolShadowMultColor.y), float(_FirstShadowMultColor.z) + (-_CoolShadowMultColor.z));
        u_xlat11.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_11.xyz + _CoolShadowMultColor.xyz;
        u_xlat16_18.xyz = (bool(u_xlatb29)) ? u_xlat11.xyz : vec3(_FirstShadowMultColor.x, _FirstShadowMultColor.y, _FirstShadowMultColor.z);
        u_xlat16_9.xyz = u_xlat16_4.xyz * u_xlat16_18.xyz;
        u_xlat16_11.xyz = u_xlat16_18.xyz + vec3(-1.0, -1.0, -1.0);
        u_xlat11.xyz = vec3(u_xlat6) * u_xlat16_11.xyz + vec3(1.0, 1.0, 1.0);
        u_xlat16_18.xyz = (bool(u_xlatb42)) ? u_xlat11.xyz : u_xlat16_18.xyz;
#ifdef UNITY_ADRENO_ES3
        u_xlatb16 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(u_xlat16));
#else
        u_xlatb16 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(u_xlat16);
#endif
        u_xlat16_18.xyz = u_xlat16_4.xyz * u_xlat16_18.xyz;
        u_xlat11.xyz = u_xlat16_4.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
        u_xlat19.xyz = (bool(u_xlatb16)) ? u_xlat16_18.xyz : u_xlat11.xyz;
        u_xlat16_18.x = dot(u_xlat16_1.xyz, u_xlat0.xyz);
        u_xlat16_18.x = max(u_xlat16_18.x, 0.00100000005);
        u_xlat16_18.x = log2(u_xlat16_18.x);
        u_xlat16_18.x = u_xlat16_18.x * _Shininess;
        u_xlat16_18.x = exp2(u_xlat16_18.x);
        u_xlat16_18.xyz = u_xlat16_18.xxx * _SpecularColor.xyz;
        u_xlat16_18.xyz = u_xlat16_18.xyz * vec3(_SpecMulti);
        u_xlat16_18.xyz = u_xlat10_3.xxx * u_xlat16_18.xyz;
        u_xlat7.xyz = u_xlat16_18.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
        u_xlat16_19.xyz = u_xlat19.xyz;
        u_xlat16_7.xyz = u_xlat7.xyz;
    //ENDIF
    }
    u_xlat16_18.xyz = u_xlat16_4.xyz * _EmissionColor_MHY.xyz;
    u_xlat16_8.xyz = u_xlat16_19.xyz + u_xlat16_7.xyz;
    u_xlat16_9.xyz = u_xlat16_7.xyz + u_xlat16_9.xyz;
    u_xlat16_10.xyz = u_xlat16_18.xyz * vec3(vec3(_EmissionScaler, _EmissionScaler, _EmissionScaler)) + (-u_xlat16_8.xyz);
    u_xlat16_10.xyz = vec3(u_xlat16_5) * u_xlat16_10.xyz + u_xlat16_8.xyz;
    u_xlat16_18.xyz = u_xlat16_18.xyz * vec3(vec3(_EmissionScaler, _EmissionScaler, _EmissionScaler)) + (-u_xlat16_9.xyz);
    u_xlat16_18.xyz = vec3(u_xlat16_5) * u_xlat16_18.xyz + u_xlat16_9.xyz;
    u_xlat16_8.xyz = (bool(u_xlatb2)) ? u_xlat16_10.xyz : u_xlat16_8.xyz;
    u_xlat16_18.xyz = (bool(u_xlatb2)) ? u_xlat16_18.xyz : u_xlat16_9.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb3.x = !!(0.00999999978<u_xlat16_5);
#else
    u_xlatb3.x = 0.00999999978<u_xlat16_5;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn));
#else
    u_xlatb16 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn);
#endif
    u_xlat11.xyz = u_xlat16_8.xyz * vec3(vec3(_ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness));
    u_xlat12.xyz = _ES_CharacterMainLightColor.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat12.xyz = vec3(vec3(_ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio)) * u_xlat12.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat11.xyz = u_xlat11.xyz * u_xlat12.xyz;
    u_xlat12.xyz = _ES_CharacterAmbientLightColor.xyz * vec3(_ES_CharacterAmbientLightRatio);
    u_xlat16_9.xyz = u_xlat11.xyz * vec3(10.0, 10.0, 10.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_9.xyz = min(max(u_xlat16_9.xyz, 0.0), 1.0);
#else
    u_xlat16_9.xyz = clamp(u_xlat16_9.xyz, 0.0, 1.0);
#endif
    u_xlat11.xyz = u_xlat12.xyz * u_xlat16_9.xyz + u_xlat11.xyz;
    u_xlat16_9.xyz = (bool(u_xlatb16)) ? u_xlat11.xyz : u_xlat16_8.xyz;
    u_xlat16_10.xyz = u_xlat16_8.xyz + (-u_xlat16_9.xyz);
    u_xlat16_10.xyz = vec3(u_xlat16_5) * u_xlat16_10.xyz + u_xlat16_9.xyz;
    u_xlat16_8.xyz = (-u_xlat16_18.xyz) + u_xlat16_8.xyz;
    u_xlat16_8.xyz = vec3(u_xlat16_5) * u_xlat16_8.xyz + u_xlat16_18.xyz;
    u_xlat16_0.xyz = (u_xlatb3.x) ? u_xlat16_10.xyz : u_xlat16_9.xyz;
    u_xlat16_18.xyz = (u_xlatb3.x) ? u_xlat16_8.xyz : u_xlat16_18.xyz;
    u_xlat16_8.x = max(u_xlat16_0.z, u_xlat16_0.y);
    u_xlat16_2.w = max(u_xlat16_0.x, u_xlat16_8.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb3.x = !!(1.0<u_xlat16_2.w);
#else
    u_xlatb3.x = 1.0<u_xlat16_2.w;
#endif
    u_xlat16_2.xyz = u_xlat16_0.xyz / u_xlat16_2.www;
    u_xlat16_0.w = 1.0;
    u_xlat16_0 = (u_xlatb3.x) ? u_xlat16_2 : u_xlat16_0;
    u_xlat16_8.x = min(u_xlat16_0.w, 1.10000002);
    u_xlat16_21 = u_xlat16_0.w + (-u_xlat16_8.x);
    u_xlat16_5 = u_xlat16_5 * u_xlat16_21 + u_xlat16_8.x;
    SV_Target1.w = u_xlat16_5 * 0.0500000007;
    SV_Target0.xyz = u_xlat16_1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb3.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb3.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_5 = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb3.x) ? u_xlat16_5 : u_xlat16_18.z;
    SV_Target0.w = 0.0470588244;
    SV_Target1.xyz = u_xlat16_0.xyz;
    SV_Target2.xy = u_xlat16_18.xy;
    SV_Target2.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "TOON_SPECULAR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec3 mhy_AvatarLightDir;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump float u_xlat16_4;
float u_xlat16;
void main()
{
    u_xlat0.x = hlslcc_mtx4x4unity_ObjectToWorld[0].y;
    u_xlat0.y = hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat0.z = hlslcc_mtx4x4unity_ObjectToWorld[2].y;
    u_xlat1.xyw = (-_WorldSpaceCameraPos.xyz) + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat0.w = u_xlat1.y;
    u_xlat2.xyz = in_POSITION0.xyz;
    u_xlat2.w = 1.0;
    u_xlat0.x = dot(u_xlat0, u_xlat2);
    u_xlat0 = u_xlat0.xxxx * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat3.w = u_xlat1.x;
    u_xlat3.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;
    u_xlat3.y = hlslcc_mtx4x4unity_ObjectToWorld[1].x;
    u_xlat3.z = hlslcc_mtx4x4unity_ObjectToWorld[2].x;
    u_xlat3.x = dot(u_xlat3, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat3.xxxx + u_xlat0;
    u_xlat1.x = hlslcc_mtx4x4unity_ObjectToWorld[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_ObjectToWorld[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_ObjectToWorld[2].z;
    u_xlat1.x = dot(u_xlat1, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat1.xxxx + u_xlat0;
    u_xlat1.x = hlslcc_mtx4x4unity_ObjectToWorld[0].w;
    u_xlat1.y = hlslcc_mtx4x4unity_ObjectToWorld[1].w;
    u_xlat1.z = hlslcc_mtx4x4unity_ObjectToWorld[2].w;
    u_xlat1.w = hlslcc_mtx4x4unity_ObjectToWorld[3].w;
    u_xlat1.x = dot(u_xlat1, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[3] * u_xlat1.xxxx + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat16 = inversesqrt(u_xlat16);
    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
    u_xlat16_4 = dot(u_xlat1.xyz, mhy_AvatarLightDir.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    vs_TEXCOORD1.w = u_xlat16_4 * 0.497500002 + 0.5;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.zw = u_xlat0.zw;
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD3.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD5.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	mediump vec4 _Color;
uniform 	float _MainTexAlphaUse;
uniform 	mediump float _MainTexAlphaCutoff;
uniform 	float _UseVertexColorAO;
uniform 	mediump float _LightArea;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	float _UseCoolShadowColorOrTex;
uniform 	mediump vec3 _CoolShadowMultColor;
uniform 	float _UseShadowTransition;
uniform 	float _ShadowTransitionRange;
uniform 	float _ShadowTransitionSoftness;
uniform 	mediump vec3 _SpecularColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump float _EmissionScaler;
uniform 	mediump vec3 _EmissionColor_MHY;
uniform 	float _ES_CharacterAmbientLightOn;
uniform 	float _ES_CharacterAmbientBrightness;
uniform 	vec3 _ES_CharacterMainLightColor;
uniform 	float _ES_CharacterMainLightBrightness;
uniform 	vec3 _ES_CharacterAmbientLightColor;
uniform 	float _ES_CharacterMainLightRatio;
uniform 	float _ES_CharacterAmbientLightRatio;
uniform 	float _ES_CharacterColorTone;
uniform 	vec3 mhy_AvatarLightDir;
uniform lowp sampler2D _MainTex;
in mediump vec4 vs_COLOR0;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec4 u_xlat0;
bvec2 u_xlatb0;
vec3 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
bool u_xlatb1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump vec4 u_xlat16_3;
bool u_xlatb3;
vec3 u_xlat4;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
vec3 u_xlat9;
bool u_xlatb9;
mediump float u_xlat16_11;
float u_xlat12;
mediump float u_xlat16_12;
bool u_xlatb18;
bool u_xlatb21;
mediump float u_xlat16_29;
bool u_xlatb30;
mediump float u_xlat16_32;
mediump float u_xlat16_33;
void main()
{
    u_xlatb0.xy = equal(vec4(_MainTexAlphaUse), vec4(1.0, 2.0, 0.0, 0.0)).xy;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy, -1.0);
    u_xlat16_2.x = u_xlat10_1.w + (-_MainTexAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(u_xlat16_2.x<0.0);
#else
    u_xlatb18 = u_xlat16_2.x<0.0;
#endif
    u_xlatb0.x = u_xlatb0.x && u_xlatb18;
    if((int(u_xlatb0.x) * int(0xffffffffu))!=0){discard;}
    SV_Target0.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0470588244;
    u_xlat0.xzw = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat0.xzw = u_xlat0.xzw * u_xlat3.xxx + mhy_AvatarLightDir.xyz;
    u_xlat3.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat0.xzw = u_xlat0.xzw * u_xlat3.xxx;
    u_xlat16_2.x = dot(vs_TEXCOORD1.xyz, u_xlat0.xzw);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.00100000005);
    u_xlat16_2.x = log2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * _Shininess;
    u_xlat16_2.x = exp2(u_xlat16_2.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(0.5<u_xlat16_2.x);
#else
    u_xlatb0.x = 0.5<u_xlat16_2.x;
#endif
    u_xlat16_2.xyz = _SpecularColor.xyz * vec3(_SpecMulti);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(0.5, 0.5, 0.5);
    u_xlat3.xyz = u_xlat16_2.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
    u_xlat0.xzw = mix(vec3(0.0, 0.0, 0.0), u_xlat3.xyz, vec3(u_xlatb0.xxx));
    u_xlat16_2.x = vs_COLOR0.x * 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorAO));
#else
    u_xlatb3 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorAO);
#endif
    u_xlat16_2.x = (u_xlatb3) ? u_xlat16_2.x : 0.5;
    u_xlat12 = u_xlat16_2.x + vs_TEXCOORD1.w;
    u_xlat12 = u_xlat12 * 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(0.949999988<u_xlat16_2.x);
#else
    u_xlatb21 = 0.949999988<u_xlat16_2.x;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(u_xlat16_2.x<0.0500000007);
#else
    u_xlatb30 = u_xlat16_2.x<0.0500000007;
#endif
    u_xlat16_2.x = (u_xlatb21) ? 1.0 : u_xlat12;
    u_xlat16_2.x = (u_xlatb30) ? 0.0 : u_xlat16_2.x;
    u_xlat16_2.x = (u_xlatb3) ? u_xlat16_2.x : vs_TEXCOORD1.w;
    u_xlat16_11 = (-u_xlat16_2.x) + _LightArea;
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(u_xlat16_2.x<_LightArea);
#else
    u_xlatb3 = u_xlat16_2.x<_LightArea;
#endif
    u_xlat16_2.x = u_xlat16_11 / _ShadowTransitionRange;
    u_xlat16_12 = u_xlat16_2.x + 0.00999999978;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(u_xlat16_2.x>=1.0);
#else
    u_xlatb21 = u_xlat16_2.x>=1.0;
#endif
    u_xlat16_12 = log2(u_xlat16_12);
    u_xlat12 = u_xlat16_12 * _ShadowTransitionSoftness;
    u_xlat12 = exp2(u_xlat12);
    u_xlat12 = min(u_xlat12, 1.0);
    u_xlat12 = (u_xlatb21) ? 1.0 : u_xlat12;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition));
#else
    u_xlatb21 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition);
#endif
    u_xlat12 = (u_xlatb21) ? u_xlat12 : 1.0;
    u_xlat12 = u_xlatb3 ? u_xlat12 : float(0.0);
    u_xlat16_4.xyz = vec3(_FirstShadowMultColor.xxyz.y + (-_CoolShadowMultColor.x), _FirstShadowMultColor.xxyz.z + (-_CoolShadowMultColor.y), float(_FirstShadowMultColor.z) + (-_CoolShadowMultColor.z));
    u_xlat4.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_4.xyz + _CoolShadowMultColor.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex));
#else
    u_xlatb30 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex);
#endif
    u_xlat16_2.xyz = (bool(u_xlatb30)) ? u_xlat4.xyz : vec3(_FirstShadowMultColor.x, _FirstShadowMultColor.y, _FirstShadowMultColor.z);
    u_xlat16_4.xyz = u_xlat16_2.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat4.xyz = vec3(u_xlat12) * u_xlat16_4.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_5.xyz = (bool(u_xlatb21)) ? u_xlat4.xyz : u_xlat16_2.xyz;
    u_xlat16_6.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_6.xyz;
    u_xlat1.xyz = u_xlat16_6.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
    u_xlat1.xyz = (bool(u_xlatb3)) ? u_xlat16_5.xyz : u_xlat1.xyz;
    u_xlat16_5.xyz = u_xlat0.xzw + u_xlat1.xyz;
    u_xlat16_2.xyz = u_xlat16_6.xyz * u_xlat16_2.xyz + u_xlat0.xzw;
    u_xlat16_6.xyz = u_xlat16_6.xyz * _EmissionColor_MHY.xyz;
    u_xlat16_7.xyz = u_xlat16_6.xyz * vec3(vec3(_EmissionScaler, _EmissionScaler, _EmissionScaler)) + (-u_xlat16_5.xyz);
    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(vec3(_EmissionScaler, _EmissionScaler, _EmissionScaler)) + (-u_xlat16_2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(0.00999999978<u_xlat10_1.w);
#else
    u_xlatb0.x = 0.00999999978<u_xlat10_1.w;
#endif
    u_xlatb0.x = u_xlatb0.x && u_xlatb0.y;
    u_xlat16_29 = (u_xlatb0.x) ? u_xlat10_1.w : 0.0;
    u_xlat16_7.xyz = vec3(u_xlat16_29) * u_xlat16_7.xyz + u_xlat16_5.xyz;
    u_xlat16_5.xyz = (u_xlatb0.x) ? u_xlat16_7.xyz : u_xlat16_5.xyz;
    u_xlat9.xyz = u_xlat16_5.xyz * vec3(vec3(_ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness));
    u_xlat1.xyz = _ES_CharacterMainLightColor.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat1.xyz = vec3(vec3(_ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio)) * u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat9.xyz = u_xlat9.xyz * u_xlat1.xyz;
    u_xlat16_7.xyz = u_xlat9.xyz * vec3(10.0, 10.0, 10.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.xyz = min(max(u_xlat16_7.xyz, 0.0), 1.0);
#else
    u_xlat16_7.xyz = clamp(u_xlat16_7.xyz, 0.0, 1.0);
#endif
    u_xlat1.xyz = _ES_CharacterAmbientLightColor.xyz * vec3(_ES_CharacterAmbientLightRatio);
    u_xlat9.xyz = u_xlat1.xyz * u_xlat16_7.xyz + u_xlat9.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn));
#else
    u_xlatb1 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn);
#endif
    u_xlat16_7.xyz = (bool(u_xlatb1)) ? u_xlat9.xyz : u_xlat16_5.xyz;
    u_xlat16_8.xyz = u_xlat16_5.xyz + (-u_xlat16_7.xyz);
    u_xlat16_8.xyz = vec3(u_xlat16_29) * u_xlat16_8.xyz + u_xlat16_7.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(0.00999999978<u_xlat16_29);
#else
    u_xlatb9 = 0.00999999978<u_xlat16_29;
#endif
    u_xlat16_1.xyz = (bool(u_xlatb9)) ? u_xlat16_8.xyz : u_xlat16_7.xyz;
    u_xlat16_32 = max(u_xlat16_1.z, u_xlat16_1.y);
    u_xlat16_3.w = max(u_xlat16_1.x, u_xlat16_32);
    u_xlat16_3.xyz = u_xlat16_1.xyz / u_xlat16_3.www;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(1.0<u_xlat16_3.w);
#else
    u_xlatb18 = 1.0<u_xlat16_3.w;
#endif
    u_xlat16_1.w = 1.0;
    u_xlat16_1 = (bool(u_xlatb18)) ? u_xlat16_3 : u_xlat16_1;
    u_xlat16_32 = min(u_xlat16_1.w, 1.10000002);
    u_xlat16_33 = u_xlat16_1.w + (-u_xlat16_32);
    SV_Target1.xyz = u_xlat16_1.xyz;
    u_xlat16_32 = u_xlat16_29 * u_xlat16_33 + u_xlat16_32;
    SV_Target1.w = u_xlat16_32 * 0.0500000007;
    u_xlat16_6.xyz = vec3(u_xlat16_29) * u_xlat16_6.xyz + u_xlat16_2.xyz;
    u_xlat16_2.xyz = (u_xlatb0.x) ? u_xlat16_6.xyz : u_xlat16_2.xyz;
    u_xlat16_5.xyz = (-u_xlat16_2.xyz) + u_xlat16_5.xyz;
    u_xlat16_5.xyz = vec3(u_xlat16_29) * u_xlat16_5.xyz + u_xlat16_2.xyz;
    u_xlat16_2.xyz = (bool(u_xlatb9)) ? u_xlat16_5.xyz : u_xlat16_2.xyz;
    SV_Target2.xy = u_xlat16_2.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_2.x = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb0.x) ? u_xlat16_2.x : u_xlat16_2.z;
    SV_Target2.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "MSAA_INTERPOLATION" "TOON_SPECULAR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec3 mhy_AvatarLightDir;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump float u_xlat16_4;
float u_xlat16;
void main()
{
    u_xlat0.x = hlslcc_mtx4x4unity_ObjectToWorld[0].y;
    u_xlat0.y = hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat0.z = hlslcc_mtx4x4unity_ObjectToWorld[2].y;
    u_xlat1.xyw = (-_WorldSpaceCameraPos.xyz) + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat0.w = u_xlat1.y;
    u_xlat2.xyz = in_POSITION0.xyz;
    u_xlat2.w = 1.0;
    u_xlat0.x = dot(u_xlat0, u_xlat2);
    u_xlat0 = u_xlat0.xxxx * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat3.w = u_xlat1.x;
    u_xlat3.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;
    u_xlat3.y = hlslcc_mtx4x4unity_ObjectToWorld[1].x;
    u_xlat3.z = hlslcc_mtx4x4unity_ObjectToWorld[2].x;
    u_xlat3.x = dot(u_xlat3, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat3.xxxx + u_xlat0;
    u_xlat1.x = hlslcc_mtx4x4unity_ObjectToWorld[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_ObjectToWorld[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_ObjectToWorld[2].z;
    u_xlat1.x = dot(u_xlat1, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat1.xxxx + u_xlat0;
    u_xlat1.x = hlslcc_mtx4x4unity_ObjectToWorld[0].w;
    u_xlat1.y = hlslcc_mtx4x4unity_ObjectToWorld[1].w;
    u_xlat1.z = hlslcc_mtx4x4unity_ObjectToWorld[2].w;
    u_xlat1.w = hlslcc_mtx4x4unity_ObjectToWorld[3].w;
    u_xlat1.x = dot(u_xlat1, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[3] * u_xlat1.xxxx + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat16 = inversesqrt(u_xlat16);
    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
    u_xlat16_4 = dot(u_xlat1.xyz, mhy_AvatarLightDir.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    vs_TEXCOORD1.w = u_xlat16_4 * 0.497500002 + 0.5;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.zw = u_xlat0.zw;
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD3.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD5.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	mediump vec4 _Color;
uniform 	float _MainTexAlphaUse;
uniform 	mediump float _MainTexAlphaCutoff;
uniform 	float _UseVertexColorAO;
uniform 	mediump float _LightArea;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	float _UseCoolShadowColorOrTex;
uniform 	mediump vec3 _CoolShadowMultColor;
uniform 	float _UseShadowTransition;
uniform 	float _ShadowTransitionRange;
uniform 	float _ShadowTransitionSoftness;
uniform 	mediump vec3 _SpecularColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump float _EmissionScaler;
uniform 	mediump vec3 _EmissionColor_MHY;
uniform 	float _ES_CharacterAmbientLightOn;
uniform 	float _ES_CharacterAmbientBrightness;
uniform 	vec3 _ES_CharacterMainLightColor;
uniform 	float _ES_CharacterMainLightBrightness;
uniform 	vec3 _ES_CharacterAmbientLightColor;
uniform 	float _ES_CharacterMainLightRatio;
uniform 	float _ES_CharacterAmbientLightRatio;
uniform 	float _ES_CharacterColorTone;
uniform 	vec3 mhy_AvatarLightDir;
uniform lowp sampler2D _MainTex;
in mediump vec4 vs_COLOR0;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
bool u_xlatb2;
vec3 u_xlat3;
mediump vec4 u_xlat16_3;
bool u_xlatb3;
vec3 u_xlat4;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
vec3 u_xlat9;
bool u_xlatb9;
mediump float u_xlat16_10;
bvec2 u_xlatb11;
float u_xlat12;
mediump float u_xlat16_12;
vec2 u_xlat18;
bool u_xlatb18;
bool u_xlatb21;
mediump float u_xlat16_28;
bool u_xlatb30;
mediump float u_xlat16_32;
mediump float u_xlat16_33;
void main()
{
    u_xlat0.xy = dFdx(vs_TEXCOORD0.xy);
    u_xlat18.xy = dFdy(vs_TEXCOORD0.xy);
    u_xlat0.xy = u_xlat18.xy + u_xlat0.xy;
    u_xlat18.xy = (-u_xlat0.xy) * vec2(0.25, 0.25) + vs_TEXCOORD0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25) + vs_TEXCOORD0.xy;
    u_xlat0.xy = (int(gl_SampleID) != 0) ? u_xlat18.xy : u_xlat0.xy;
    u_xlat10_0 = textureLod(_MainTex, u_xlat0.xy, 0.0);
    u_xlat16_1.x = u_xlat10_0.w + (-_MainTexAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat16_1.x<0.0);
#else
    u_xlatb2 = u_xlat16_1.x<0.0;
#endif
    u_xlatb11.xy = equal(vec4(_MainTexAlphaUse), vec4(1.0, 2.0, 0.0, 0.0)).xy;
    u_xlatb2 = u_xlatb11.x && u_xlatb2;
    if((int(u_xlatb2) * int(0xffffffffu))!=0){discard;}
    SV_Target0.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0470588244;
    u_xlat2.xyw = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3.x = dot(u_xlat2.xyw, u_xlat2.xyw);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat2.xyw = u_xlat2.xyw * u_xlat3.xxx + mhy_AvatarLightDir.xyz;
    u_xlat3.x = dot(u_xlat2.xyw, u_xlat2.xyw);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat2.xyw = u_xlat2.xyw * u_xlat3.xxx;
    u_xlat16_1.x = dot(vs_TEXCOORD1.xyz, u_xlat2.xyw);
    u_xlat16_1.x = max(u_xlat16_1.x, 0.00100000005);
    u_xlat16_1.x = log2(u_xlat16_1.x);
    u_xlat16_1.x = u_xlat16_1.x * _Shininess;
    u_xlat16_1.x = exp2(u_xlat16_1.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(0.5<u_xlat16_1.x);
#else
    u_xlatb2 = 0.5<u_xlat16_1.x;
#endif
    u_xlat16_1.xyz = _SpecularColor.xyz * vec3(_SpecMulti);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(0.5, 0.5, 0.5);
    u_xlat3.xyz = u_xlat16_1.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
    u_xlat2.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat3.xyz, vec3(bvec3(u_xlatb2)));
    u_xlat16_1.x = vs_COLOR0.x * 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorAO));
#else
    u_xlatb3 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorAO);
#endif
    u_xlat16_1.x = (u_xlatb3) ? u_xlat16_1.x : 0.5;
    u_xlat12 = u_xlat16_1.x + vs_TEXCOORD1.w;
    u_xlat12 = u_xlat12 * 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(0.949999988<u_xlat16_1.x);
#else
    u_xlatb21 = 0.949999988<u_xlat16_1.x;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(u_xlat16_1.x<0.0500000007);
#else
    u_xlatb30 = u_xlat16_1.x<0.0500000007;
#endif
    u_xlat16_1.x = (u_xlatb21) ? 1.0 : u_xlat12;
    u_xlat16_1.x = (u_xlatb30) ? 0.0 : u_xlat16_1.x;
    u_xlat16_1.x = (u_xlatb3) ? u_xlat16_1.x : vs_TEXCOORD1.w;
    u_xlat16_10 = (-u_xlat16_1.x) + _LightArea;
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(u_xlat16_1.x<_LightArea);
#else
    u_xlatb3 = u_xlat16_1.x<_LightArea;
#endif
    u_xlat16_1.x = u_xlat16_10 / _ShadowTransitionRange;
    u_xlat16_12 = u_xlat16_1.x + 0.00999999978;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(u_xlat16_1.x>=1.0);
#else
    u_xlatb21 = u_xlat16_1.x>=1.0;
#endif
    u_xlat16_12 = log2(u_xlat16_12);
    u_xlat12 = u_xlat16_12 * _ShadowTransitionSoftness;
    u_xlat12 = exp2(u_xlat12);
    u_xlat12 = min(u_xlat12, 1.0);
    u_xlat12 = (u_xlatb21) ? 1.0 : u_xlat12;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition));
#else
    u_xlatb21 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition);
#endif
    u_xlat12 = (u_xlatb21) ? u_xlat12 : 1.0;
    u_xlat12 = u_xlatb3 ? u_xlat12 : float(0.0);
    u_xlat16_4.xyz = vec3(_FirstShadowMultColor.xxyz.y + (-_CoolShadowMultColor.x), _FirstShadowMultColor.xxyz.z + (-_CoolShadowMultColor.y), float(_FirstShadowMultColor.z) + (-_CoolShadowMultColor.z));
    u_xlat4.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_4.xyz + _CoolShadowMultColor.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex));
#else
    u_xlatb30 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex);
#endif
    u_xlat16_1.xyz = (bool(u_xlatb30)) ? u_xlat4.xyz : vec3(_FirstShadowMultColor.x, _FirstShadowMultColor.y, _FirstShadowMultColor.z);
    u_xlat16_4.xyz = u_xlat16_1.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat4.xyz = vec3(u_xlat12) * u_xlat16_4.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_5.xyz = (bool(u_xlatb21)) ? u_xlat4.xyz : u_xlat16_1.xyz;
    u_xlat16_6.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_6.xyz;
    u_xlat0.xyz = u_xlat16_6.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
    u_xlat0.xyz = (bool(u_xlatb3)) ? u_xlat16_5.xyz : u_xlat0.xyz;
    u_xlat16_5.xyz = u_xlat2.xyw + u_xlat0.xyz;
    u_xlat16_1.xyz = u_xlat16_6.xyz * u_xlat16_1.xyz + u_xlat2.xyw;
    u_xlat16_6.xyz = u_xlat16_6.xyz * _EmissionColor_MHY.xyz;
    u_xlat16_7.xyz = u_xlat16_6.xyz * vec3(vec3(_EmissionScaler, _EmissionScaler, _EmissionScaler)) + (-u_xlat16_5.xyz);
    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(vec3(_EmissionScaler, _EmissionScaler, _EmissionScaler)) + (-u_xlat16_1.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.00999999978<u_xlat10_0.w);
#else
    u_xlatb0 = 0.00999999978<u_xlat10_0.w;
#endif
    u_xlatb0 = u_xlatb0 && u_xlatb11.y;
    u_xlat16_28 = (u_xlatb0) ? u_xlat10_0.w : 0.0;
    u_xlat16_7.xyz = vec3(u_xlat16_28) * u_xlat16_7.xyz + u_xlat16_5.xyz;
    u_xlat16_5.xyz = (bool(u_xlatb0)) ? u_xlat16_7.xyz : u_xlat16_5.xyz;
    u_xlat9.xyz = u_xlat16_5.xyz * vec3(vec3(_ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness));
    u_xlat2.xyz = _ES_CharacterMainLightColor.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat2.xyz = vec3(vec3(_ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio)) * u_xlat2.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat9.xyz = u_xlat9.xyz * u_xlat2.xyz;
    u_xlat16_7.xyz = u_xlat9.xyz * vec3(10.0, 10.0, 10.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.xyz = min(max(u_xlat16_7.xyz, 0.0), 1.0);
#else
    u_xlat16_7.xyz = clamp(u_xlat16_7.xyz, 0.0, 1.0);
#endif
    u_xlat2.xyz = _ES_CharacterAmbientLightColor.xyz * vec3(_ES_CharacterAmbientLightRatio);
    u_xlat9.xyz = u_xlat2.xyz * u_xlat16_7.xyz + u_xlat9.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn));
#else
    u_xlatb2 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn);
#endif
    u_xlat16_7.xyz = (bool(u_xlatb2)) ? u_xlat9.xyz : u_xlat16_5.xyz;
    u_xlat16_8.xyz = u_xlat16_5.xyz + (-u_xlat16_7.xyz);
    u_xlat16_8.xyz = vec3(u_xlat16_28) * u_xlat16_8.xyz + u_xlat16_7.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(0.00999999978<u_xlat16_28);
#else
    u_xlatb9 = 0.00999999978<u_xlat16_28;
#endif
    u_xlat16_2.xyz = (bool(u_xlatb9)) ? u_xlat16_8.xyz : u_xlat16_7.xyz;
    u_xlat16_32 = max(u_xlat16_2.z, u_xlat16_2.y);
    u_xlat16_3.w = max(u_xlat16_2.x, u_xlat16_32);
    u_xlat16_3.xyz = u_xlat16_2.xyz / u_xlat16_3.www;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(1.0<u_xlat16_3.w);
#else
    u_xlatb18 = 1.0<u_xlat16_3.w;
#endif
    u_xlat16_2.w = 1.0;
    u_xlat16_2 = (bool(u_xlatb18)) ? u_xlat16_3 : u_xlat16_2;
    u_xlat16_32 = min(u_xlat16_2.w, 1.10000002);
    u_xlat16_33 = u_xlat16_2.w + (-u_xlat16_32);
    SV_Target1.xyz = u_xlat16_2.xyz;
    u_xlat16_32 = u_xlat16_28 * u_xlat16_33 + u_xlat16_32;
    SV_Target1.w = u_xlat16_32 * 0.0500000007;
    u_xlat16_6.xyz = vec3(u_xlat16_28) * u_xlat16_6.xyz + u_xlat16_1.xyz;
    u_xlat16_1.xyz = (bool(u_xlatb0)) ? u_xlat16_6.xyz : u_xlat16_1.xyz;
    u_xlat16_5.xyz = (-u_xlat16_1.xyz) + u_xlat16_5.xyz;
    u_xlat16_5.xyz = vec3(u_xlat16_28) * u_xlat16_5.xyz + u_xlat16_1.xyz;
    u_xlat16_1.xyz = (bool(u_xlatb9)) ? u_xlat16_5.xyz : u_xlat16_1.xyz;
    SV_Target2.xy = u_xlat16_1.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_1.x = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb0) ? u_xlat16_1.x : u_xlat16_1.z;
    SV_Target2.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "LINE_INTERPOLATION" "TOON_SPECULAR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec3 mhy_AvatarLightDir;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump float u_xlat16_4;
float u_xlat16;
void main()
{
    u_xlat0.x = hlslcc_mtx4x4unity_ObjectToWorld[0].y;
    u_xlat0.y = hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat0.z = hlslcc_mtx4x4unity_ObjectToWorld[2].y;
    u_xlat1.xyw = (-_WorldSpaceCameraPos.xyz) + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat0.w = u_xlat1.y;
    u_xlat2.xyz = in_POSITION0.xyz;
    u_xlat2.w = 1.0;
    u_xlat0.x = dot(u_xlat0, u_xlat2);
    u_xlat0 = u_xlat0.xxxx * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat3.w = u_xlat1.x;
    u_xlat3.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;
    u_xlat3.y = hlslcc_mtx4x4unity_ObjectToWorld[1].x;
    u_xlat3.z = hlslcc_mtx4x4unity_ObjectToWorld[2].x;
    u_xlat3.x = dot(u_xlat3, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat3.xxxx + u_xlat0;
    u_xlat1.x = hlslcc_mtx4x4unity_ObjectToWorld[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_ObjectToWorld[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_ObjectToWorld[2].z;
    u_xlat1.x = dot(u_xlat1, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat1.xxxx + u_xlat0;
    u_xlat1.x = hlslcc_mtx4x4unity_ObjectToWorld[0].w;
    u_xlat1.y = hlslcc_mtx4x4unity_ObjectToWorld[1].w;
    u_xlat1.z = hlslcc_mtx4x4unity_ObjectToWorld[2].w;
    u_xlat1.w = hlslcc_mtx4x4unity_ObjectToWorld[3].w;
    u_xlat1.x = dot(u_xlat1, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[3] * u_xlat1.xxxx + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat16 = inversesqrt(u_xlat16);
    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
    u_xlat16_4 = dot(u_xlat1.xyz, mhy_AvatarLightDir.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    vs_TEXCOORD1.w = u_xlat16_4 * 0.497500002 + 0.5;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.zw = u_xlat0.zw;
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD3.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD5.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	mediump vec4 _Color;
uniform 	float _MainTexAlphaUse;
uniform 	mediump float _MainTexAlphaCutoff;
uniform 	float _UseVertexColorAO;
uniform 	mediump float _LightArea;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	float _UseCoolShadowColorOrTex;
uniform 	mediump vec3 _CoolShadowMultColor;
uniform 	float _UseShadowTransition;
uniform 	float _ShadowTransitionRange;
uniform 	float _ShadowTransitionSoftness;
uniform 	mediump vec3 _SpecularColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump float _EmissionScaler;
uniform 	mediump vec3 _EmissionColor_MHY;
uniform 	float _ES_CharacterAmbientLightOn;
uniform 	float _ES_CharacterAmbientBrightness;
uniform 	vec3 _ES_CharacterMainLightColor;
uniform 	float _ES_CharacterMainLightBrightness;
uniform 	vec3 _ES_CharacterAmbientLightColor;
uniform 	float _ES_CharacterMainLightRatio;
uniform 	float _ES_CharacterAmbientLightRatio;
uniform 	float _ES_CharacterColorTone;
uniform 	vec3 mhy_AvatarLightDir;
uniform lowp sampler2D _MainTex;
in mediump vec4 vs_COLOR0;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec4 u_xlat0;
bvec2 u_xlatb0;
vec3 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
bool u_xlatb1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump vec4 u_xlat16_3;
bool u_xlatb3;
vec3 u_xlat4;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
vec3 u_xlat9;
bool u_xlatb9;
mediump float u_xlat16_11;
float u_xlat12;
mediump float u_xlat16_12;
bool u_xlatb18;
bool u_xlatb21;
mediump float u_xlat16_29;
bool u_xlatb30;
mediump float u_xlat16_32;
mediump float u_xlat16_33;
void main()
{
    u_xlatb0.xy = equal(vec4(_MainTexAlphaUse), vec4(1.0, 2.0, 0.0, 0.0)).xy;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy, -1.0);
    u_xlat16_2.x = u_xlat10_1.w + (-_MainTexAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(u_xlat16_2.x<0.0);
#else
    u_xlatb18 = u_xlat16_2.x<0.0;
#endif
    u_xlatb0.x = u_xlatb0.x && u_xlatb18;
    if((int(u_xlatb0.x) * int(0xffffffffu))!=0){discard;}
    SV_Target0.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0470588244;
    u_xlat0.xzw = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat0.xzw = u_xlat0.xzw * u_xlat3.xxx + mhy_AvatarLightDir.xyz;
    u_xlat3.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat0.xzw = u_xlat0.xzw * u_xlat3.xxx;
    u_xlat16_2.x = dot(vs_TEXCOORD1.xyz, u_xlat0.xzw);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.00100000005);
    u_xlat16_2.x = log2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * _Shininess;
    u_xlat16_2.x = exp2(u_xlat16_2.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(0.5<u_xlat16_2.x);
#else
    u_xlatb0.x = 0.5<u_xlat16_2.x;
#endif
    u_xlat16_2.xyz = _SpecularColor.xyz * vec3(_SpecMulti);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(0.5, 0.5, 0.5);
    u_xlat3.xyz = u_xlat16_2.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
    u_xlat0.xzw = mix(vec3(0.0, 0.0, 0.0), u_xlat3.xyz, vec3(u_xlatb0.xxx));
    u_xlat16_2.x = vs_COLOR0.x * 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorAO));
#else
    u_xlatb3 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorAO);
#endif
    u_xlat16_2.x = (u_xlatb3) ? u_xlat16_2.x : 0.5;
    u_xlat12 = u_xlat16_2.x + vs_TEXCOORD1.w;
    u_xlat12 = u_xlat12 * 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(0.949999988<u_xlat16_2.x);
#else
    u_xlatb21 = 0.949999988<u_xlat16_2.x;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(u_xlat16_2.x<0.0500000007);
#else
    u_xlatb30 = u_xlat16_2.x<0.0500000007;
#endif
    u_xlat16_2.x = (u_xlatb21) ? 1.0 : u_xlat12;
    u_xlat16_2.x = (u_xlatb30) ? 0.0 : u_xlat16_2.x;
    u_xlat16_2.x = (u_xlatb3) ? u_xlat16_2.x : vs_TEXCOORD1.w;
    u_xlat16_11 = (-u_xlat16_2.x) + _LightArea;
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(u_xlat16_2.x<_LightArea);
#else
    u_xlatb3 = u_xlat16_2.x<_LightArea;
#endif
    u_xlat16_2.x = u_xlat16_11 / _ShadowTransitionRange;
    u_xlat16_12 = u_xlat16_2.x + 0.00999999978;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(u_xlat16_2.x>=1.0);
#else
    u_xlatb21 = u_xlat16_2.x>=1.0;
#endif
    u_xlat16_12 = log2(u_xlat16_12);
    u_xlat12 = u_xlat16_12 * _ShadowTransitionSoftness;
    u_xlat12 = exp2(u_xlat12);
    u_xlat12 = min(u_xlat12, 1.0);
    u_xlat12 = (u_xlatb21) ? 1.0 : u_xlat12;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition));
#else
    u_xlatb21 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition);
#endif
    u_xlat12 = (u_xlatb21) ? u_xlat12 : 1.0;
    u_xlat12 = u_xlatb3 ? u_xlat12 : float(0.0);
    u_xlat16_4.xyz = vec3(_FirstShadowMultColor.xxyz.y + (-_CoolShadowMultColor.x), _FirstShadowMultColor.xxyz.z + (-_CoolShadowMultColor.y), float(_FirstShadowMultColor.z) + (-_CoolShadowMultColor.z));
    u_xlat4.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_4.xyz + _CoolShadowMultColor.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex));
#else
    u_xlatb30 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex);
#endif
    u_xlat16_2.xyz = (bool(u_xlatb30)) ? u_xlat4.xyz : vec3(_FirstShadowMultColor.x, _FirstShadowMultColor.y, _FirstShadowMultColor.z);
    u_xlat16_4.xyz = u_xlat16_2.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat4.xyz = vec3(u_xlat12) * u_xlat16_4.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_5.xyz = (bool(u_xlatb21)) ? u_xlat4.xyz : u_xlat16_2.xyz;
    u_xlat16_6.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_6.xyz;
    u_xlat1.xyz = u_xlat16_6.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
    u_xlat1.xyz = (bool(u_xlatb3)) ? u_xlat16_5.xyz : u_xlat1.xyz;
    u_xlat16_5.xyz = u_xlat0.xzw + u_xlat1.xyz;
    u_xlat16_2.xyz = u_xlat16_6.xyz * u_xlat16_2.xyz + u_xlat0.xzw;
    u_xlat16_6.xyz = u_xlat16_6.xyz * _EmissionColor_MHY.xyz;
    u_xlat16_7.xyz = u_xlat16_6.xyz * vec3(vec3(_EmissionScaler, _EmissionScaler, _EmissionScaler)) + (-u_xlat16_5.xyz);
    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(vec3(_EmissionScaler, _EmissionScaler, _EmissionScaler)) + (-u_xlat16_2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(0.00999999978<u_xlat10_1.w);
#else
    u_xlatb0.x = 0.00999999978<u_xlat10_1.w;
#endif
    u_xlatb0.x = u_xlatb0.x && u_xlatb0.y;
    u_xlat16_29 = (u_xlatb0.x) ? u_xlat10_1.w : 0.0;
    u_xlat16_7.xyz = vec3(u_xlat16_29) * u_xlat16_7.xyz + u_xlat16_5.xyz;
    u_xlat16_5.xyz = (u_xlatb0.x) ? u_xlat16_7.xyz : u_xlat16_5.xyz;
    u_xlat9.xyz = u_xlat16_5.xyz * vec3(vec3(_ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness));
    u_xlat1.xyz = _ES_CharacterMainLightColor.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat1.xyz = vec3(vec3(_ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio)) * u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat9.xyz = u_xlat9.xyz * u_xlat1.xyz;
    u_xlat16_7.xyz = u_xlat9.xyz * vec3(10.0, 10.0, 10.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.xyz = min(max(u_xlat16_7.xyz, 0.0), 1.0);
#else
    u_xlat16_7.xyz = clamp(u_xlat16_7.xyz, 0.0, 1.0);
#endif
    u_xlat1.xyz = _ES_CharacterAmbientLightColor.xyz * vec3(_ES_CharacterAmbientLightRatio);
    u_xlat9.xyz = u_xlat1.xyz * u_xlat16_7.xyz + u_xlat9.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn));
#else
    u_xlatb1 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn);
#endif
    u_xlat16_7.xyz = (bool(u_xlatb1)) ? u_xlat9.xyz : u_xlat16_5.xyz;
    u_xlat16_8.xyz = u_xlat16_5.xyz + (-u_xlat16_7.xyz);
    u_xlat16_8.xyz = vec3(u_xlat16_29) * u_xlat16_8.xyz + u_xlat16_7.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(0.00999999978<u_xlat16_29);
#else
    u_xlatb9 = 0.00999999978<u_xlat16_29;
#endif
    u_xlat16_1.xyz = (bool(u_xlatb9)) ? u_xlat16_8.xyz : u_xlat16_7.xyz;
    u_xlat16_32 = max(u_xlat16_1.z, u_xlat16_1.y);
    u_xlat16_3.w = max(u_xlat16_1.x, u_xlat16_32);
    u_xlat16_3.xyz = u_xlat16_1.xyz / u_xlat16_3.www;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(1.0<u_xlat16_3.w);
#else
    u_xlatb18 = 1.0<u_xlat16_3.w;
#endif
    u_xlat16_1.w = 1.0;
    u_xlat16_1 = (bool(u_xlatb18)) ? u_xlat16_3 : u_xlat16_1;
    u_xlat16_32 = min(u_xlat16_1.w, 1.10000002);
    u_xlat16_33 = u_xlat16_1.w + (-u_xlat16_32);
    SV_Target1.xyz = u_xlat16_1.xyz;
    u_xlat16_32 = u_xlat16_29 * u_xlat16_33 + u_xlat16_32;
    SV_Target1.w = u_xlat16_32 * 0.0500000007;
    u_xlat16_6.xyz = vec3(u_xlat16_29) * u_xlat16_6.xyz + u_xlat16_2.xyz;
    u_xlat16_2.xyz = (u_xlatb0.x) ? u_xlat16_6.xyz : u_xlat16_2.xyz;
    u_xlat16_5.xyz = (-u_xlat16_2.xyz) + u_xlat16_5.xyz;
    u_xlat16_5.xyz = vec3(u_xlat16_29) * u_xlat16_5.xyz + u_xlat16_2.xyz;
    u_xlat16_2.xyz = (bool(u_xlatb9)) ? u_xlat16_5.xyz : u_xlat16_2.xyz;
    SV_Target2.xy = u_xlat16_2.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_2.x = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb0.x) ? u_xlat16_2.x : u_xlat16_2.z;
    SV_Target2.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "TOON_SPECULAR_ON" "METAL_MAT" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec3 mhy_AvatarLightDir;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump float u_xlat16_4;
float u_xlat16;
void main()
{
    u_xlat0.x = hlslcc_mtx4x4unity_ObjectToWorld[0].y;
    u_xlat0.y = hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat0.z = hlslcc_mtx4x4unity_ObjectToWorld[2].y;
    u_xlat1.xyw = (-_WorldSpaceCameraPos.xyz) + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat0.w = u_xlat1.y;
    u_xlat2.xyz = in_POSITION0.xyz;
    u_xlat2.w = 1.0;
    u_xlat0.x = dot(u_xlat0, u_xlat2);
    u_xlat0 = u_xlat0.xxxx * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat3.w = u_xlat1.x;
    u_xlat3.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;
    u_xlat3.y = hlslcc_mtx4x4unity_ObjectToWorld[1].x;
    u_xlat3.z = hlslcc_mtx4x4unity_ObjectToWorld[2].x;
    u_xlat3.x = dot(u_xlat3, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat3.xxxx + u_xlat0;
    u_xlat1.x = hlslcc_mtx4x4unity_ObjectToWorld[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_ObjectToWorld[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_ObjectToWorld[2].z;
    u_xlat1.x = dot(u_xlat1, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat1.xxxx + u_xlat0;
    u_xlat1.x = hlslcc_mtx4x4unity_ObjectToWorld[0].w;
    u_xlat1.y = hlslcc_mtx4x4unity_ObjectToWorld[1].w;
    u_xlat1.z = hlslcc_mtx4x4unity_ObjectToWorld[2].w;
    u_xlat1.w = hlslcc_mtx4x4unity_ObjectToWorld[3].w;
    u_xlat1.x = dot(u_xlat1, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[3] * u_xlat1.xxxx + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat16 = inversesqrt(u_xlat16);
    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
    u_xlat16_4 = dot(u_xlat1.xyz, mhy_AvatarLightDir.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    vs_TEXCOORD1.w = u_xlat16_4 * 0.497500002 + 0.5;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.zw = u_xlat0.zw;
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD3.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD5.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToCamera[4];
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	mediump vec4 _Color;
uniform 	float _MainTexAlphaUse;
uniform 	mediump float _MainTexAlphaCutoff;
uniform 	float _UseVertexColorAO;
uniform 	mediump float _LightArea;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	float _UseCoolShadowColorOrTex;
uniform 	mediump vec3 _CoolShadowMultColor;
uniform 	float _UseShadowTransition;
uniform 	float _ShadowTransitionRange;
uniform 	float _ShadowTransitionSoftness;
uniform 	mediump vec3 _SpecularColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump float _EmissionScaler;
uniform 	mediump vec3 _EmissionColor_MHY;
uniform 	mediump float _MTMapBrightness;
uniform 	float _MTMapTileScale;
uniform 	mediump vec3 _MTMapLightColor;
uniform 	mediump vec3 _MTMapDarkColor;
uniform 	mediump vec3 _MTShadowMultiColor;
uniform 	mediump float _MTShininess;
uniform 	mediump vec3 _MTSpecularColor;
uniform 	mediump float _MTSpecularScale;
uniform 	float _ES_CharacterAmbientLightOn;
uniform 	float _ES_CharacterAmbientBrightness;
uniform 	vec3 _ES_CharacterMainLightColor;
uniform 	float _ES_CharacterMainLightBrightness;
uniform 	vec3 _ES_CharacterAmbientLightColor;
uniform 	float _ES_CharacterMainLightRatio;
uniform 	float _ES_CharacterAmbientLightRatio;
uniform 	float _ES_CharacterColorTone;
uniform 	vec3 mhy_AvatarLightDir;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MTMap;
in mediump vec4 vs_COLOR0;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
bool u_xlatb1;
lowp vec3 u_xlat10_2;
bvec2 u_xlatb2;
mediump vec3 u_xlat16_3;
mediump float u_xlat16_4;
mediump vec3 u_xlat16_5;
float u_xlat6;
bool u_xlatb6;
vec3 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
vec3 u_xlat11;
mediump vec3 u_xlat16_11;
vec3 u_xlat12;
mediump vec3 u_xlat16_12;
vec3 u_xlat13;
bool u_xlatb15;
float u_xlat16;
mediump vec3 u_xlat16_19;
vec3 u_xlat20;
bool u_xlatb20;
bool u_xlatb29;
float u_xlat34;
bool u_xlatb34;
float u_xlat42;
bool u_xlatb42;
float u_xlat43;
mediump float u_xlat16_45;
mediump float u_xlat16_47;
float u_xlat48;
mediump float u_xlat16_48;
lowp float u_xlat10_48;
bool u_xlatb48;
void main()
{
    u_xlat0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat42 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat42 = inversesqrt(u_xlat42);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat42) + mhy_AvatarLightDir.xyz;
    u_xlat42 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat42 = inversesqrt(u_xlat42);
    u_xlat0.xyz = vec3(u_xlat42) * u_xlat0.xyz;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy, -1.0);
    u_xlatb2.xy = equal(vec4(_MainTexAlphaUse), vec4(1.0, 2.0, 0.0, 0.0)).xy;
    u_xlat16_3.x = u_xlat10_1.w + (-_MainTexAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb42 = !!(u_xlat16_3.x<0.0);
#else
    u_xlatb42 = u_xlat16_3.x<0.0;
#endif
    u_xlatb42 = u_xlatb2.x && u_xlatb42;
    if((int(u_xlatb42) * int(0xffffffffu))!=0){discard;}
    u_xlat10_2.xz = texture(_LightMapTex, vs_TEXCOORD0.xy, -1.0).xz;
    u_xlat16_3.xyz = u_xlat10_1.xyz * _Color.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb42 = !!(0.00999999978<u_xlat10_1.w);
#else
    u_xlatb42 = 0.00999999978<u_xlat10_1.w;
#endif
    u_xlatb42 = u_xlatb42 && u_xlatb2.y;
    u_xlat16_45 = (u_xlatb42) ? u_xlat10_1.w : 0.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorAO));
#else
    u_xlatb1 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorAO);
#endif
    u_xlat16_4 = vs_COLOR0.x * 0.5;
    u_xlat16_4 = (u_xlatb1) ? u_xlat16_4 : 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(u_xlat16_4<0.0500000007);
#else
    u_xlatb15 = u_xlat16_4<0.0500000007;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb29 = !!(0.949999988<u_xlat16_4);
#else
    u_xlatb29 = 0.949999988<u_xlat16_4;
#endif
    u_xlat43 = u_xlat16_4 + vs_TEXCOORD1.w;
    u_xlat16 = u_xlat43 * 0.5;
    u_xlat16_5.x = (u_xlatb29) ? 1.0 : u_xlat16;
    u_xlat16_5.x = (u_xlatb15) ? 0.0 : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb1) ? u_xlat16_5.x : vs_TEXCOORD1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(u_xlat16_5.x<_LightArea);
#else
    u_xlatb6 = u_xlat16_5.x<_LightArea;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb20 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition));
#else
    u_xlatb20 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition);
#endif
    u_xlat16_5.x = (-u_xlat16_5.x) + _LightArea;
    u_xlat16_5.x = u_xlat16_5.x / _ShadowTransitionRange;
#ifdef UNITY_ADRENO_ES3
    u_xlatb34 = !!(u_xlat16_5.x>=1.0);
#else
    u_xlatb34 = u_xlat16_5.x>=1.0;
#endif
    u_xlat16_48 = u_xlat16_5.x + 0.00999999978;
    u_xlat16_48 = log2(u_xlat16_48);
    u_xlat48 = u_xlat16_48 * _ShadowTransitionSoftness;
    u_xlat48 = exp2(u_xlat48);
    u_xlat48 = min(u_xlat48, 1.0);
    u_xlat34 = (u_xlatb34) ? 1.0 : u_xlat48;
    u_xlat34 = (u_xlatb20) ? u_xlat34 : 1.0;
    u_xlat34 = u_xlatb6 ? u_xlat34 : float(0.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb48 = !!(0.899999976<u_xlat10_2.x);
#else
    u_xlatb48 = 0.899999976<u_xlat10_2.x;
#endif
    if(u_xlatb48){
        u_xlat7.xy = vs_TEXCOORD1.yy * hlslcc_mtx4x4unity_WorldToCamera[1].xy;
        u_xlat7.xy = hlslcc_mtx4x4unity_WorldToCamera[0].xy * vs_TEXCOORD1.xx + u_xlat7.xy;
        u_xlat7.yz = hlslcc_mtx4x4unity_WorldToCamera[2].xy * vs_TEXCOORD1.zz + u_xlat7.xy;
        u_xlat7.x = u_xlat7.y * _MTMapTileScale;
        u_xlat16_5.xy = u_xlat7.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
        u_xlat10_48 = texture(_MTMap, u_xlat16_5.xy).x;
        u_xlat16_5.x = u_xlat10_48 * _MTMapBrightness;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
        u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
        u_xlat16_19.xyz = _MTMapLightColor.xyz + (-_MTMapDarkColor.xyz);
        u_xlat16_5.xyz = u_xlat16_5.xxx * u_xlat16_19.xyz + _MTMapDarkColor.xyz;
        u_xlat16_5.xyz = u_xlat16_3.xyz * u_xlat16_5.xyz;
        u_xlat16_47 = dot(vs_TEXCOORD1.xyz, u_xlat0.xyz);
        u_xlat16_47 = max(u_xlat16_47, 0.00100000005);
        u_xlat16_47 = log2(u_xlat16_47);
        u_xlat16_47 = u_xlat16_47 * _MTShininess;
        u_xlat16_47 = exp2(u_xlat16_47);
        u_xlat16_47 = u_xlat16_47 * _MTSpecularScale;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_47 = min(max(u_xlat16_47, 0.0), 1.0);
#else
        u_xlat16_47 = clamp(u_xlat16_47, 0.0, 1.0);
#endif
        u_xlat16_8.xyz = vec3(u_xlat16_47) * _MTSpecularColor.xyz;
        u_xlat16_8.xyz = u_xlat10_2.zzz * u_xlat16_8.xyz;
        u_xlat16_9.xyz = u_xlat16_5.xyz * _MTShadowMultiColor.xyz;
        u_xlat16_7.xyz = _MTShadowMultiColor.xyz + vec3(-1.0, -1.0, -1.0);
        u_xlat7.xyz = vec3(u_xlat34) * u_xlat16_7.xyz + vec3(1.0, 1.0, 1.0);
        u_xlat16_10.xyz = (bool(u_xlatb20)) ? u_xlat7.xyz : _MTShadowMultiColor.xyz;
        u_xlat16_10.xyz = u_xlat16_5.xyz * u_xlat16_10.xyz;
        u_xlat7.xyz = u_xlat16_5.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
        u_xlat7.xyz = (bool(u_xlatb6)) ? u_xlat16_10.xyz : u_xlat7.xyz;
        u_xlat11.xyz = u_xlat16_8.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
        u_xlat16_7.xyz = u_xlat7.xyz;
        u_xlat16_11.xyz = u_xlat11.xyz;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb48 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex));
#else
        u_xlatb48 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex);
#endif
        u_xlat16_12.xyz = vec3(_FirstShadowMultColor.xxyz.y + (-_CoolShadowMultColor.x), _FirstShadowMultColor.xxyz.z + (-_CoolShadowMultColor.y), float(_FirstShadowMultColor.z) + (-_CoolShadowMultColor.z));
        u_xlat12.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_12.xyz + _CoolShadowMultColor.xyz;
        u_xlat16_5.xyz = (bool(u_xlatb48)) ? u_xlat12.xyz : vec3(_FirstShadowMultColor.x, _FirstShadowMultColor.y, _FirstShadowMultColor.z);
        u_xlat16_9.xyz = u_xlat16_3.xyz * u_xlat16_5.xyz;
        u_xlat16_12.xyz = u_xlat16_5.xyz + vec3(-1.0, -1.0, -1.0);
        u_xlat12.xyz = vec3(u_xlat34) * u_xlat16_12.xyz + vec3(1.0, 1.0, 1.0);
        u_xlat16_5.xyz = (bool(u_xlatb20)) ? u_xlat12.xyz : u_xlat16_5.xyz;
        u_xlat16_5.xyz = u_xlat16_3.xyz * u_xlat16_5.xyz;
        u_xlat20.xyz = u_xlat16_3.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
        u_xlat7.xyz = (bool(u_xlatb6)) ? u_xlat16_5.xyz : u_xlat20.xyz;
        u_xlat16_5.x = dot(vs_TEXCOORD1.xyz, u_xlat0.xyz);
        u_xlat16_5.x = max(u_xlat16_5.x, 0.00100000005);
        u_xlat16_5.x = log2(u_xlat16_5.x);
        u_xlat16_5.x = u_xlat16_5.x * _Shininess;
        u_xlat16_5.x = exp2(u_xlat16_5.x);
        u_xlat6 = (-u_xlat10_2.z) + 1.0;
#ifdef UNITY_ADRENO_ES3
        u_xlatb6 = !!(u_xlat6<u_xlat16_5.x);
#else
        u_xlatb6 = u_xlat6<u_xlat16_5.x;
#endif
        u_xlat16_5.xyz = _SpecularColor.xyz * vec3(_SpecMulti);
        u_xlat16_5.xyz = u_xlat10_2.xxx * u_xlat16_5.xyz;
        u_xlat20.xyz = u_xlat16_5.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
        u_xlat11.xyz = mix(vec3(0.0, 0.0, 0.0), u_xlat20.xyz, vec3(bvec3(u_xlatb6)));
        u_xlat16_7.xyz = u_xlat7.xyz;
        u_xlat16_11.xyz = u_xlat11.xyz;
    //ENDIF
    }
    u_xlat16_3.xyz = u_xlat16_3.xyz * _EmissionColor_MHY.xyz;
    u_xlat16_5.xyz = u_xlat16_7.xyz + u_xlat16_11.xyz;
    u_xlat16_8.xyz = u_xlat16_9.xyz + u_xlat16_11.xyz;
    u_xlat16_9.xyz = u_xlat16_3.xyz * vec3(vec3(_EmissionScaler, _EmissionScaler, _EmissionScaler)) + (-u_xlat16_5.xyz);
    u_xlat16_9.xyz = vec3(u_xlat16_45) * u_xlat16_9.xyz + u_xlat16_5.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(vec3(_EmissionScaler, _EmissionScaler, _EmissionScaler)) + (-u_xlat16_8.xyz);
    u_xlat16_3.xyz = vec3(u_xlat16_45) * u_xlat16_3.xyz + u_xlat16_8.xyz;
    u_xlat16_5.xyz = (bool(u_xlatb42)) ? u_xlat16_9.xyz : u_xlat16_5.xyz;
    u_xlat16_3.xyz = (bool(u_xlatb42)) ? u_xlat16_3.xyz : u_xlat16_8.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.00999999978<u_xlat16_45);
#else
    u_xlatb6 = 0.00999999978<u_xlat16_45;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb20 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn));
#else
    u_xlatb20 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn);
#endif
    u_xlat12.xyz = u_xlat16_5.xyz * vec3(vec3(_ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness));
    u_xlat13.xyz = _ES_CharacterMainLightColor.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat13.xyz = vec3(vec3(_ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio)) * u_xlat13.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat12.xyz = u_xlat12.xyz * u_xlat13.xyz;
    u_xlat13.xyz = _ES_CharacterAmbientLightColor.xyz * vec3(_ES_CharacterAmbientLightRatio);
    u_xlat16_8.xyz = u_xlat12.xyz * vec3(10.0, 10.0, 10.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_8.xyz = min(max(u_xlat16_8.xyz, 0.0), 1.0);
#else
    u_xlat16_8.xyz = clamp(u_xlat16_8.xyz, 0.0, 1.0);
#endif
    u_xlat12.xyz = u_xlat13.xyz * u_xlat16_8.xyz + u_xlat12.xyz;
    u_xlat16_8.xyz = (bool(u_xlatb20)) ? u_xlat12.xyz : u_xlat16_5.xyz;
    u_xlat16_9.xyz = u_xlat16_5.xyz + (-u_xlat16_8.xyz);
    u_xlat16_9.xyz = vec3(u_xlat16_45) * u_xlat16_9.xyz + u_xlat16_8.xyz;
    u_xlat16_5.xyz = (-u_xlat16_3.xyz) + u_xlat16_5.xyz;
    u_xlat16_5.xyz = vec3(u_xlat16_45) * u_xlat16_5.xyz + u_xlat16_3.xyz;
    u_xlat16_0.xyz = (bool(u_xlatb6)) ? u_xlat16_9.xyz : u_xlat16_8.xyz;
    u_xlat16_3.xyz = (bool(u_xlatb6)) ? u_xlat16_5.xyz : u_xlat16_3.xyz;
    u_xlat16_5.x = max(u_xlat16_0.z, u_xlat16_0.y);
    u_xlat16_1.w = max(u_xlat16_0.x, u_xlat16_5.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(1.0<u_xlat16_1.w);
#else
    u_xlatb6 = 1.0<u_xlat16_1.w;
#endif
    u_xlat16_1.xyz = u_xlat16_0.xyz / u_xlat16_1.www;
    u_xlat16_0.w = 1.0;
    u_xlat16_0 = (bool(u_xlatb6)) ? u_xlat16_1 : u_xlat16_0;
    u_xlat16_5.x = min(u_xlat16_0.w, 1.10000002);
    u_xlat16_19.x = u_xlat16_0.w + (-u_xlat16_5.x);
    u_xlat16_45 = u_xlat16_45 * u_xlat16_19.x + u_xlat16_5.x;
    SV_Target1.w = u_xlat16_45 * 0.0500000007;
    SV_Target0.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb6 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_45 = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb6) ? u_xlat16_45 : u_xlat16_3.z;
    SV_Target0.w = 0.0470588244;
    SV_Target1.xyz = u_xlat16_0.xyz;
    SV_Target2.xy = u_xlat16_3.xy;
    SV_Target2.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "MSAA_INTERPOLATION" "TOON_SPECULAR_ON" "METAL_MAT" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec3 mhy_AvatarLightDir;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump float u_xlat16_4;
float u_xlat16;
void main()
{
    u_xlat0.x = hlslcc_mtx4x4unity_ObjectToWorld[0].y;
    u_xlat0.y = hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat0.z = hlslcc_mtx4x4unity_ObjectToWorld[2].y;
    u_xlat1.xyw = (-_WorldSpaceCameraPos.xyz) + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat0.w = u_xlat1.y;
    u_xlat2.xyz = in_POSITION0.xyz;
    u_xlat2.w = 1.0;
    u_xlat0.x = dot(u_xlat0, u_xlat2);
    u_xlat0 = u_xlat0.xxxx * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat3.w = u_xlat1.x;
    u_xlat3.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;
    u_xlat3.y = hlslcc_mtx4x4unity_ObjectToWorld[1].x;
    u_xlat3.z = hlslcc_mtx4x4unity_ObjectToWorld[2].x;
    u_xlat3.x = dot(u_xlat3, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat3.xxxx + u_xlat0;
    u_xlat1.x = hlslcc_mtx4x4unity_ObjectToWorld[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_ObjectToWorld[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_ObjectToWorld[2].z;
    u_xlat1.x = dot(u_xlat1, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat1.xxxx + u_xlat0;
    u_xlat1.x = hlslcc_mtx4x4unity_ObjectToWorld[0].w;
    u_xlat1.y = hlslcc_mtx4x4unity_ObjectToWorld[1].w;
    u_xlat1.z = hlslcc_mtx4x4unity_ObjectToWorld[2].w;
    u_xlat1.w = hlslcc_mtx4x4unity_ObjectToWorld[3].w;
    u_xlat1.x = dot(u_xlat1, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[3] * u_xlat1.xxxx + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat16 = inversesqrt(u_xlat16);
    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
    u_xlat16_4 = dot(u_xlat1.xyz, mhy_AvatarLightDir.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    vs_TEXCOORD1.w = u_xlat16_4 * 0.497500002 + 0.5;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.zw = u_xlat0.zw;
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD3.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD5.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToCamera[4];
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	mediump vec4 _Color;
uniform 	float _MainTexAlphaUse;
uniform 	mediump float _MainTexAlphaCutoff;
uniform 	float _UseVertexColorAO;
uniform 	mediump float _LightArea;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	float _UseCoolShadowColorOrTex;
uniform 	mediump vec3 _CoolShadowMultColor;
uniform 	float _UseShadowTransition;
uniform 	float _ShadowTransitionRange;
uniform 	float _ShadowTransitionSoftness;
uniform 	mediump vec3 _SpecularColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump float _EmissionScaler;
uniform 	mediump vec3 _EmissionColor_MHY;
uniform 	mediump float _MTMapBrightness;
uniform 	float _MTMapTileScale;
uniform 	mediump vec3 _MTMapLightColor;
uniform 	mediump vec3 _MTMapDarkColor;
uniform 	mediump vec3 _MTShadowMultiColor;
uniform 	mediump float _MTShininess;
uniform 	mediump vec3 _MTSpecularColor;
uniform 	mediump float _MTSpecularScale;
uniform 	float _ES_CharacterAmbientLightOn;
uniform 	float _ES_CharacterAmbientBrightness;
uniform 	vec3 _ES_CharacterMainLightColor;
uniform 	float _ES_CharacterMainLightBrightness;
uniform 	vec3 _ES_CharacterAmbientLightColor;
uniform 	float _ES_CharacterMainLightRatio;
uniform 	float _ES_CharacterAmbientLightRatio;
uniform 	float _ES_CharacterColorTone;
uniform 	vec3 mhy_AvatarLightDir;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MTMap;
in mediump vec4 vs_COLOR0;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec2 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec2 u_xlat10_0;
vec3 u_xlat1;
mediump vec4 u_xlat16_1;
float u_xlat2;
lowp vec4 u_xlat10_2;
bool u_xlatb2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
vec3 u_xlat9;
mediump vec3 u_xlat16_9;
vec3 u_xlat10;
mediump vec3 u_xlat16_10;
vec3 u_xlat11;
vec3 u_xlat14;
bool u_xlatb14;
mediump vec3 u_xlat16_16;
vec2 u_xlat24;
bvec2 u_xlatb24;
float u_xlat26;
bool u_xlatb26;
bool u_xlatb36;
bool u_xlatb37;
float u_xlat38;
mediump float u_xlat16_38;
lowp float u_xlat10_38;
bool u_xlatb38;
mediump float u_xlat16_39;
mediump float u_xlat16_40;
void main()
{
    u_xlat0.xy = dFdx(vs_TEXCOORD0.xy);
    u_xlat24.xy = dFdy(vs_TEXCOORD0.xy);
    u_xlat0.xy = u_xlat24.xy + u_xlat0.xy;
    u_xlat24.xy = (-u_xlat0.xy) * vec2(0.25, 0.25) + vs_TEXCOORD0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25) + vs_TEXCOORD0.xy;
    u_xlat0.xy = (int(gl_SampleID) != 0) ? u_xlat24.xy : u_xlat0.xy;
    u_xlat1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat24.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat24.x = inversesqrt(u_xlat24.x);
    u_xlat1.xyz = u_xlat1.xyz * u_xlat24.xxx + mhy_AvatarLightDir.xyz;
    u_xlat24.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat24.x = inversesqrt(u_xlat24.x);
    u_xlat1.xyz = u_xlat24.xxx * u_xlat1.xyz;
    u_xlat10_2 = textureLod(_MainTex, u_xlat0.xy, 0.0);
    u_xlatb24.xy = equal(vec4(_MainTexAlphaUse), vec4(1.0, 2.0, 1.0, 2.0)).xy;
    u_xlat16_3.x = u_xlat10_2.w + (-_MainTexAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb37 = !!(u_xlat16_3.x<0.0);
#else
    u_xlatb37 = u_xlat16_3.x<0.0;
#endif
    u_xlatb24.x = u_xlatb24.x && u_xlatb37;
    if((int(u_xlatb24.x) * int(0xffffffffu))!=0){discard;}
    u_xlat10_0.xy = textureLod(_LightMapTex, u_xlat0.xy, 0.0).xz;
    u_xlat16_3.xyz = u_xlat10_2.xyz * _Color.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24.x = !!(0.00999999978<u_xlat10_2.w);
#else
    u_xlatb24.x = 0.00999999978<u_xlat10_2.w;
#endif
    u_xlatb24.x = u_xlatb24.x && u_xlatb24.y;
    u_xlat16_39 = (u_xlatb24.x) ? u_xlat10_2.w : 0.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb36 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorAO));
#else
    u_xlatb36 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorAO);
#endif
    u_xlat16_4.x = vs_COLOR0.x * 0.5;
    u_xlat16_4.x = (u_xlatb36) ? u_xlat16_4.x : 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat16_4.x<0.0500000007);
#else
    u_xlatb2 = u_xlat16_4.x<0.0500000007;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(0.949999988<u_xlat16_4.x);
#else
    u_xlatb14 = 0.949999988<u_xlat16_4.x;
#endif
    u_xlat26 = u_xlat16_4.x + vs_TEXCOORD1.w;
    u_xlat26 = u_xlat26 * 0.5;
    u_xlat16_4.x = (u_xlatb14) ? 1.0 : u_xlat26;
    u_xlat16_4.x = (u_xlatb2) ? 0.0 : u_xlat16_4.x;
    u_xlat16_4.x = (u_xlatb36) ? u_xlat16_4.x : vs_TEXCOORD1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat16_4.x<_LightArea);
#else
    u_xlatb2 = u_xlat16_4.x<_LightArea;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition));
#else
    u_xlatb14 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition);
#endif
    u_xlat16_4.x = (-u_xlat16_4.x) + _LightArea;
    u_xlat16_4.x = u_xlat16_4.x / _ShadowTransitionRange;
#ifdef UNITY_ADRENO_ES3
    u_xlatb26 = !!(u_xlat16_4.x>=1.0);
#else
    u_xlatb26 = u_xlat16_4.x>=1.0;
#endif
    u_xlat16_38 = u_xlat16_4.x + 0.00999999978;
    u_xlat16_38 = log2(u_xlat16_38);
    u_xlat38 = u_xlat16_38 * _ShadowTransitionSoftness;
    u_xlat38 = exp2(u_xlat38);
    u_xlat38 = min(u_xlat38, 1.0);
    u_xlat26 = (u_xlatb26) ? 1.0 : u_xlat38;
    u_xlat26 = (u_xlatb14) ? u_xlat26 : 1.0;
    u_xlat26 = u_xlatb2 ? u_xlat26 : float(0.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb38 = !!(0.899999976<u_xlat10_0.x);
#else
    u_xlatb38 = 0.899999976<u_xlat10_0.x;
#endif
    if(u_xlatb38){
        u_xlat5.xy = vs_TEXCOORD1.yy * hlslcc_mtx4x4unity_WorldToCamera[1].xy;
        u_xlat5.xy = hlslcc_mtx4x4unity_WorldToCamera[0].xy * vs_TEXCOORD1.xx + u_xlat5.xy;
        u_xlat5.yz = hlslcc_mtx4x4unity_WorldToCamera[2].xy * vs_TEXCOORD1.zz + u_xlat5.xy;
        u_xlat5.x = u_xlat5.y * _MTMapTileScale;
        u_xlat16_4.xy = u_xlat5.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
        u_xlat10_38 = texture(_MTMap, u_xlat16_4.xy, -1.0).x;
        u_xlat16_4.x = u_xlat10_38 * _MTMapBrightness;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
        u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
        u_xlat16_16.xyz = _MTMapLightColor.xyz + (-_MTMapDarkColor.xyz);
        u_xlat16_4.xyz = u_xlat16_4.xxx * u_xlat16_16.xyz + _MTMapDarkColor.xyz;
        u_xlat16_4.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;
        u_xlat16_40 = dot(vs_TEXCOORD1.xyz, u_xlat1.xyz);
        u_xlat16_40 = max(u_xlat16_40, 0.00100000005);
        u_xlat16_40 = log2(u_xlat16_40);
        u_xlat16_40 = u_xlat16_40 * _MTShininess;
        u_xlat16_40 = exp2(u_xlat16_40);
        u_xlat16_40 = u_xlat16_40 * _MTSpecularScale;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_40 = min(max(u_xlat16_40, 0.0), 1.0);
#else
        u_xlat16_40 = clamp(u_xlat16_40, 0.0, 1.0);
#endif
        u_xlat16_6.xyz = vec3(u_xlat16_40) * _MTSpecularColor.xyz;
        u_xlat16_6.xyz = u_xlat10_0.yyy * u_xlat16_6.xyz;
        u_xlat16_7.xyz = u_xlat16_4.xyz * _MTShadowMultiColor.xyz;
        u_xlat16_5.xyz = _MTShadowMultiColor.xyz + vec3(-1.0, -1.0, -1.0);
        u_xlat5.xyz = vec3(u_xlat26) * u_xlat16_5.xyz + vec3(1.0, 1.0, 1.0);
        u_xlat16_8.xyz = (bool(u_xlatb14)) ? u_xlat5.xyz : _MTShadowMultiColor.xyz;
        u_xlat16_8.xyz = u_xlat16_4.xyz * u_xlat16_8.xyz;
        u_xlat5.xyz = u_xlat16_4.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
        u_xlat5.xyz = (bool(u_xlatb2)) ? u_xlat16_8.xyz : u_xlat5.xyz;
        u_xlat9.xyz = u_xlat16_6.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
        u_xlat16_5.xyz = u_xlat5.xyz;
        u_xlat16_9.xyz = u_xlat9.xyz;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb38 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex));
#else
        u_xlatb38 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex);
#endif
        u_xlat16_10.xyz = vec3(_FirstShadowMultColor.xxyz.y + (-_CoolShadowMultColor.x), _FirstShadowMultColor.xxyz.z + (-_CoolShadowMultColor.y), float(_FirstShadowMultColor.z) + (-_CoolShadowMultColor.z));
        u_xlat10.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_10.xyz + _CoolShadowMultColor.xyz;
        u_xlat16_4.xyz = (bool(u_xlatb38)) ? u_xlat10.xyz : vec3(_FirstShadowMultColor.x, _FirstShadowMultColor.y, _FirstShadowMultColor.z);
        u_xlat16_7.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;
        u_xlat16_10.xyz = u_xlat16_4.xyz + vec3(-1.0, -1.0, -1.0);
        u_xlat10.xyz = vec3(u_xlat26) * u_xlat16_10.xyz + vec3(1.0, 1.0, 1.0);
        u_xlat16_4.xyz = (bool(u_xlatb14)) ? u_xlat10.xyz : u_xlat16_4.xyz;
        u_xlat16_4.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;
        u_xlat14.xyz = u_xlat16_3.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
        u_xlat5.xyz = (bool(u_xlatb2)) ? u_xlat16_4.xyz : u_xlat14.xyz;
        u_xlat16_4.x = dot(vs_TEXCOORD1.xyz, u_xlat1.xyz);
        u_xlat16_4.x = max(u_xlat16_4.x, 0.00100000005);
        u_xlat16_4.x = log2(u_xlat16_4.x);
        u_xlat16_4.x = u_xlat16_4.x * _Shininess;
        u_xlat16_4.x = exp2(u_xlat16_4.x);
        u_xlat2 = (-u_xlat10_0.y) + 1.0;
#ifdef UNITY_ADRENO_ES3
        u_xlatb2 = !!(u_xlat2<u_xlat16_4.x);
#else
        u_xlatb2 = u_xlat2<u_xlat16_4.x;
#endif
        u_xlat16_4.xyz = _SpecularColor.xyz * vec3(_SpecMulti);
        u_xlat16_4.xyz = u_xlat10_0.xxx * u_xlat16_4.xyz;
        u_xlat14.xyz = u_xlat16_4.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
        u_xlat9.xyz = mix(vec3(0.0, 0.0, 0.0), u_xlat14.xyz, vec3(bvec3(u_xlatb2)));
        u_xlat16_5.xyz = u_xlat5.xyz;
        u_xlat16_9.xyz = u_xlat9.xyz;
    //ENDIF
    }
    u_xlat16_4.xyz = u_xlat16_3.xyz * _EmissionColor_MHY.xyz;
    u_xlat16_6.xyz = u_xlat16_5.xyz + u_xlat16_9.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz + u_xlat16_9.xyz;
    u_xlat16_8.xyz = u_xlat16_4.xyz * vec3(vec3(_EmissionScaler, _EmissionScaler, _EmissionScaler)) + (-u_xlat16_6.xyz);
    u_xlat16_8.xyz = vec3(u_xlat16_39) * u_xlat16_8.xyz + u_xlat16_6.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(vec3(_EmissionScaler, _EmissionScaler, _EmissionScaler)) + (-u_xlat16_7.xyz);
    u_xlat16_4.xyz = vec3(u_xlat16_39) * u_xlat16_4.xyz + u_xlat16_7.xyz;
    u_xlat16_6.xyz = (u_xlatb24.x) ? u_xlat16_8.xyz : u_xlat16_6.xyz;
    u_xlat16_4.xyz = (u_xlatb24.x) ? u_xlat16_4.xyz : u_xlat16_7.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(0.00999999978<u_xlat16_39);
#else
    u_xlatb2 = 0.00999999978<u_xlat16_39;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn));
#else
    u_xlatb14 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn);
#endif
    u_xlat10.xyz = u_xlat16_6.xyz * vec3(vec3(_ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness));
    u_xlat11.xyz = _ES_CharacterMainLightColor.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat11.xyz = vec3(vec3(_ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio)) * u_xlat11.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat10.xyz = u_xlat10.xyz * u_xlat11.xyz;
    u_xlat11.xyz = _ES_CharacterAmbientLightColor.xyz * vec3(_ES_CharacterAmbientLightRatio);
    u_xlat16_7.xyz = u_xlat10.xyz * vec3(10.0, 10.0, 10.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.xyz = min(max(u_xlat16_7.xyz, 0.0), 1.0);
#else
    u_xlat16_7.xyz = clamp(u_xlat16_7.xyz, 0.0, 1.0);
#endif
    u_xlat10.xyz = u_xlat11.xyz * u_xlat16_7.xyz + u_xlat10.xyz;
    u_xlat16_7.xyz = (bool(u_xlatb14)) ? u_xlat10.xyz : u_xlat16_6.xyz;
    u_xlat16_8.xyz = u_xlat16_6.xyz + (-u_xlat16_7.xyz);
    u_xlat16_8.xyz = vec3(u_xlat16_39) * u_xlat16_8.xyz + u_xlat16_7.xyz;
    u_xlat16_6.xyz = (-u_xlat16_4.xyz) + u_xlat16_6.xyz;
    u_xlat16_6.xyz = vec3(u_xlat16_39) * u_xlat16_6.xyz + u_xlat16_4.xyz;
    u_xlat16_0.xyz = (bool(u_xlatb2)) ? u_xlat16_8.xyz : u_xlat16_7.xyz;
    u_xlat16_4.xyz = (bool(u_xlatb2)) ? u_xlat16_6.xyz : u_xlat16_4.xyz;
    u_xlat16_40 = max(u_xlat16_0.z, u_xlat16_0.y);
    u_xlat16_1.w = max(u_xlat16_0.x, u_xlat16_40);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(1.0<u_xlat16_1.w);
#else
    u_xlatb2 = 1.0<u_xlat16_1.w;
#endif
    u_xlat16_1.xyz = u_xlat16_0.xyz / u_xlat16_1.www;
    u_xlat16_0.w = 1.0;
    u_xlat16_0 = (bool(u_xlatb2)) ? u_xlat16_1 : u_xlat16_0;
    u_xlat16_40 = min(u_xlat16_0.w, 1.10000002);
    u_xlat16_6.x = u_xlat16_0.w + (-u_xlat16_40);
    u_xlat16_40 = u_xlat16_39 * u_xlat16_6.x + u_xlat16_40;
    SV_Target1.w = u_xlat16_40 * 0.0500000007;
    SV_Target0.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb2 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_40 = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb2) ? u_xlat16_40 : u_xlat16_4.z;
    SV_Target0.w = 0.0470588244;
    SV_Target1.xyz = u_xlat16_0.xyz;
    SV_Target2.xy = u_xlat16_4.xy;
    SV_Target2.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "LINE_INTERPOLATION" "TOON_SPECULAR_ON" "METAL_MAT" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec3 mhy_AvatarLightDir;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump float u_xlat16_4;
float u_xlat16;
void main()
{
    u_xlat0.x = hlslcc_mtx4x4unity_ObjectToWorld[0].y;
    u_xlat0.y = hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat0.z = hlslcc_mtx4x4unity_ObjectToWorld[2].y;
    u_xlat1.xyw = (-_WorldSpaceCameraPos.xyz) + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat0.w = u_xlat1.y;
    u_xlat2.xyz = in_POSITION0.xyz;
    u_xlat2.w = 1.0;
    u_xlat0.x = dot(u_xlat0, u_xlat2);
    u_xlat0 = u_xlat0.xxxx * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat3.w = u_xlat1.x;
    u_xlat3.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;
    u_xlat3.y = hlslcc_mtx4x4unity_ObjectToWorld[1].x;
    u_xlat3.z = hlslcc_mtx4x4unity_ObjectToWorld[2].x;
    u_xlat3.x = dot(u_xlat3, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat3.xxxx + u_xlat0;
    u_xlat1.x = hlslcc_mtx4x4unity_ObjectToWorld[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_ObjectToWorld[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_ObjectToWorld[2].z;
    u_xlat1.x = dot(u_xlat1, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat1.xxxx + u_xlat0;
    u_xlat1.x = hlslcc_mtx4x4unity_ObjectToWorld[0].w;
    u_xlat1.y = hlslcc_mtx4x4unity_ObjectToWorld[1].w;
    u_xlat1.z = hlslcc_mtx4x4unity_ObjectToWorld[2].w;
    u_xlat1.w = hlslcc_mtx4x4unity_ObjectToWorld[3].w;
    u_xlat1.x = dot(u_xlat1, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[3] * u_xlat1.xxxx + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat16 = inversesqrt(u_xlat16);
    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
    u_xlat16_4 = dot(u_xlat1.xyz, mhy_AvatarLightDir.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    vs_TEXCOORD1.w = u_xlat16_4 * 0.497500002 + 0.5;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.zw = u_xlat0.zw;
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD3.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD5.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToCamera[4];
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	mediump vec4 _Color;
uniform 	float _MainTexAlphaUse;
uniform 	mediump float _MainTexAlphaCutoff;
uniform 	float _UseVertexColorAO;
uniform 	mediump float _LightArea;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	float _UseCoolShadowColorOrTex;
uniform 	mediump vec3 _CoolShadowMultColor;
uniform 	float _UseShadowTransition;
uniform 	float _ShadowTransitionRange;
uniform 	float _ShadowTransitionSoftness;
uniform 	mediump vec3 _SpecularColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump float _EmissionScaler;
uniform 	mediump vec3 _EmissionColor_MHY;
uniform 	mediump float _MTMapBrightness;
uniform 	float _MTMapTileScale;
uniform 	mediump vec3 _MTMapLightColor;
uniform 	mediump vec3 _MTMapDarkColor;
uniform 	mediump vec3 _MTShadowMultiColor;
uniform 	mediump float _MTShininess;
uniform 	mediump vec3 _MTSpecularColor;
uniform 	mediump float _MTSpecularScale;
uniform 	float _ES_CharacterAmbientLightOn;
uniform 	float _ES_CharacterAmbientBrightness;
uniform 	vec3 _ES_CharacterMainLightColor;
uniform 	float _ES_CharacterMainLightBrightness;
uniform 	vec3 _ES_CharacterAmbientLightColor;
uniform 	float _ES_CharacterMainLightRatio;
uniform 	float _ES_CharacterAmbientLightRatio;
uniform 	float _ES_CharacterColorTone;
uniform 	vec3 mhy_AvatarLightDir;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MTMap;
in mediump vec4 vs_COLOR0;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
bool u_xlatb1;
lowp vec3 u_xlat10_2;
bvec2 u_xlatb2;
mediump vec3 u_xlat16_3;
mediump float u_xlat16_4;
mediump vec3 u_xlat16_5;
float u_xlat6;
bool u_xlatb6;
vec3 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
vec3 u_xlat11;
mediump vec3 u_xlat16_11;
vec3 u_xlat12;
mediump vec3 u_xlat16_12;
vec3 u_xlat13;
bool u_xlatb15;
float u_xlat16;
mediump vec3 u_xlat16_19;
vec3 u_xlat20;
bool u_xlatb20;
bool u_xlatb29;
float u_xlat34;
bool u_xlatb34;
float u_xlat42;
bool u_xlatb42;
float u_xlat43;
mediump float u_xlat16_45;
mediump float u_xlat16_47;
float u_xlat48;
mediump float u_xlat16_48;
lowp float u_xlat10_48;
bool u_xlatb48;
void main()
{
    u_xlat0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat42 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat42 = inversesqrt(u_xlat42);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat42) + mhy_AvatarLightDir.xyz;
    u_xlat42 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat42 = inversesqrt(u_xlat42);
    u_xlat0.xyz = vec3(u_xlat42) * u_xlat0.xyz;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy, -1.0);
    u_xlatb2.xy = equal(vec4(_MainTexAlphaUse), vec4(1.0, 2.0, 0.0, 0.0)).xy;
    u_xlat16_3.x = u_xlat10_1.w + (-_MainTexAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb42 = !!(u_xlat16_3.x<0.0);
#else
    u_xlatb42 = u_xlat16_3.x<0.0;
#endif
    u_xlatb42 = u_xlatb2.x && u_xlatb42;
    if((int(u_xlatb42) * int(0xffffffffu))!=0){discard;}
    u_xlat10_2.xz = texture(_LightMapTex, vs_TEXCOORD0.xy, -1.0).xz;
    u_xlat16_3.xyz = u_xlat10_1.xyz * _Color.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb42 = !!(0.00999999978<u_xlat10_1.w);
#else
    u_xlatb42 = 0.00999999978<u_xlat10_1.w;
#endif
    u_xlatb42 = u_xlatb42 && u_xlatb2.y;
    u_xlat16_45 = (u_xlatb42) ? u_xlat10_1.w : 0.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorAO));
#else
    u_xlatb1 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorAO);
#endif
    u_xlat16_4 = vs_COLOR0.x * 0.5;
    u_xlat16_4 = (u_xlatb1) ? u_xlat16_4 : 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(u_xlat16_4<0.0500000007);
#else
    u_xlatb15 = u_xlat16_4<0.0500000007;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb29 = !!(0.949999988<u_xlat16_4);
#else
    u_xlatb29 = 0.949999988<u_xlat16_4;
#endif
    u_xlat43 = u_xlat16_4 + vs_TEXCOORD1.w;
    u_xlat16 = u_xlat43 * 0.5;
    u_xlat16_5.x = (u_xlatb29) ? 1.0 : u_xlat16;
    u_xlat16_5.x = (u_xlatb15) ? 0.0 : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb1) ? u_xlat16_5.x : vs_TEXCOORD1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(u_xlat16_5.x<_LightArea);
#else
    u_xlatb6 = u_xlat16_5.x<_LightArea;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb20 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition));
#else
    u_xlatb20 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition);
#endif
    u_xlat16_5.x = (-u_xlat16_5.x) + _LightArea;
    u_xlat16_5.x = u_xlat16_5.x / _ShadowTransitionRange;
#ifdef UNITY_ADRENO_ES3
    u_xlatb34 = !!(u_xlat16_5.x>=1.0);
#else
    u_xlatb34 = u_xlat16_5.x>=1.0;
#endif
    u_xlat16_48 = u_xlat16_5.x + 0.00999999978;
    u_xlat16_48 = log2(u_xlat16_48);
    u_xlat48 = u_xlat16_48 * _ShadowTransitionSoftness;
    u_xlat48 = exp2(u_xlat48);
    u_xlat48 = min(u_xlat48, 1.0);
    u_xlat34 = (u_xlatb34) ? 1.0 : u_xlat48;
    u_xlat34 = (u_xlatb20) ? u_xlat34 : 1.0;
    u_xlat34 = u_xlatb6 ? u_xlat34 : float(0.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb48 = !!(0.899999976<u_xlat10_2.x);
#else
    u_xlatb48 = 0.899999976<u_xlat10_2.x;
#endif
    if(u_xlatb48){
        u_xlat7.xy = vs_TEXCOORD1.yy * hlslcc_mtx4x4unity_WorldToCamera[1].xy;
        u_xlat7.xy = hlslcc_mtx4x4unity_WorldToCamera[0].xy * vs_TEXCOORD1.xx + u_xlat7.xy;
        u_xlat7.yz = hlslcc_mtx4x4unity_WorldToCamera[2].xy * vs_TEXCOORD1.zz + u_xlat7.xy;
        u_xlat7.x = u_xlat7.y * _MTMapTileScale;
        u_xlat16_5.xy = u_xlat7.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
        u_xlat10_48 = texture(_MTMap, u_xlat16_5.xy, -1.0).x;
        u_xlat16_5.x = u_xlat10_48 * _MTMapBrightness;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
        u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
        u_xlat16_19.xyz = _MTMapLightColor.xyz + (-_MTMapDarkColor.xyz);
        u_xlat16_5.xyz = u_xlat16_5.xxx * u_xlat16_19.xyz + _MTMapDarkColor.xyz;
        u_xlat16_5.xyz = u_xlat16_3.xyz * u_xlat16_5.xyz;
        u_xlat16_47 = dot(vs_TEXCOORD1.xyz, u_xlat0.xyz);
        u_xlat16_47 = max(u_xlat16_47, 0.00100000005);
        u_xlat16_47 = log2(u_xlat16_47);
        u_xlat16_47 = u_xlat16_47 * _MTShininess;
        u_xlat16_47 = exp2(u_xlat16_47);
        u_xlat16_47 = u_xlat16_47 * _MTSpecularScale;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_47 = min(max(u_xlat16_47, 0.0), 1.0);
#else
        u_xlat16_47 = clamp(u_xlat16_47, 0.0, 1.0);
#endif
        u_xlat16_8.xyz = vec3(u_xlat16_47) * _MTSpecularColor.xyz;
        u_xlat16_8.xyz = u_xlat10_2.zzz * u_xlat16_8.xyz;
        u_xlat16_9.xyz = u_xlat16_5.xyz * _MTShadowMultiColor.xyz;
        u_xlat16_7.xyz = _MTShadowMultiColor.xyz + vec3(-1.0, -1.0, -1.0);
        u_xlat7.xyz = vec3(u_xlat34) * u_xlat16_7.xyz + vec3(1.0, 1.0, 1.0);
        u_xlat16_10.xyz = (bool(u_xlatb20)) ? u_xlat7.xyz : _MTShadowMultiColor.xyz;
        u_xlat16_10.xyz = u_xlat16_5.xyz * u_xlat16_10.xyz;
        u_xlat7.xyz = u_xlat16_5.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
        u_xlat7.xyz = (bool(u_xlatb6)) ? u_xlat16_10.xyz : u_xlat7.xyz;
        u_xlat11.xyz = u_xlat16_8.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
        u_xlat16_7.xyz = u_xlat7.xyz;
        u_xlat16_11.xyz = u_xlat11.xyz;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb48 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex));
#else
        u_xlatb48 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex);
#endif
        u_xlat16_12.xyz = vec3(_FirstShadowMultColor.xxyz.y + (-_CoolShadowMultColor.x), _FirstShadowMultColor.xxyz.z + (-_CoolShadowMultColor.y), float(_FirstShadowMultColor.z) + (-_CoolShadowMultColor.z));
        u_xlat12.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_12.xyz + _CoolShadowMultColor.xyz;
        u_xlat16_5.xyz = (bool(u_xlatb48)) ? u_xlat12.xyz : vec3(_FirstShadowMultColor.x, _FirstShadowMultColor.y, _FirstShadowMultColor.z);
        u_xlat16_9.xyz = u_xlat16_3.xyz * u_xlat16_5.xyz;
        u_xlat16_12.xyz = u_xlat16_5.xyz + vec3(-1.0, -1.0, -1.0);
        u_xlat12.xyz = vec3(u_xlat34) * u_xlat16_12.xyz + vec3(1.0, 1.0, 1.0);
        u_xlat16_5.xyz = (bool(u_xlatb20)) ? u_xlat12.xyz : u_xlat16_5.xyz;
        u_xlat16_5.xyz = u_xlat16_3.xyz * u_xlat16_5.xyz;
        u_xlat20.xyz = u_xlat16_3.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
        u_xlat7.xyz = (bool(u_xlatb6)) ? u_xlat16_5.xyz : u_xlat20.xyz;
        u_xlat16_5.x = dot(vs_TEXCOORD1.xyz, u_xlat0.xyz);
        u_xlat16_5.x = max(u_xlat16_5.x, 0.00100000005);
        u_xlat16_5.x = log2(u_xlat16_5.x);
        u_xlat16_5.x = u_xlat16_5.x * _Shininess;
        u_xlat16_5.x = exp2(u_xlat16_5.x);
        u_xlat6 = (-u_xlat10_2.z) + 1.0;
#ifdef UNITY_ADRENO_ES3
        u_xlatb6 = !!(u_xlat6<u_xlat16_5.x);
#else
        u_xlatb6 = u_xlat6<u_xlat16_5.x;
#endif
        u_xlat16_5.xyz = _SpecularColor.xyz * vec3(_SpecMulti);
        u_xlat16_5.xyz = u_xlat10_2.xxx * u_xlat16_5.xyz;
        u_xlat20.xyz = u_xlat16_5.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
        u_xlat11.xyz = mix(vec3(0.0, 0.0, 0.0), u_xlat20.xyz, vec3(bvec3(u_xlatb6)));
        u_xlat16_7.xyz = u_xlat7.xyz;
        u_xlat16_11.xyz = u_xlat11.xyz;
    //ENDIF
    }
    u_xlat16_3.xyz = u_xlat16_3.xyz * _EmissionColor_MHY.xyz;
    u_xlat16_5.xyz = u_xlat16_7.xyz + u_xlat16_11.xyz;
    u_xlat16_8.xyz = u_xlat16_9.xyz + u_xlat16_11.xyz;
    u_xlat16_9.xyz = u_xlat16_3.xyz * vec3(vec3(_EmissionScaler, _EmissionScaler, _EmissionScaler)) + (-u_xlat16_5.xyz);
    u_xlat16_9.xyz = vec3(u_xlat16_45) * u_xlat16_9.xyz + u_xlat16_5.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(vec3(_EmissionScaler, _EmissionScaler, _EmissionScaler)) + (-u_xlat16_8.xyz);
    u_xlat16_3.xyz = vec3(u_xlat16_45) * u_xlat16_3.xyz + u_xlat16_8.xyz;
    u_xlat16_5.xyz = (bool(u_xlatb42)) ? u_xlat16_9.xyz : u_xlat16_5.xyz;
    u_xlat16_3.xyz = (bool(u_xlatb42)) ? u_xlat16_3.xyz : u_xlat16_8.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.00999999978<u_xlat16_45);
#else
    u_xlatb6 = 0.00999999978<u_xlat16_45;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb20 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn));
#else
    u_xlatb20 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn);
#endif
    u_xlat12.xyz = u_xlat16_5.xyz * vec3(vec3(_ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness));
    u_xlat13.xyz = _ES_CharacterMainLightColor.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat13.xyz = vec3(vec3(_ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio)) * u_xlat13.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat12.xyz = u_xlat12.xyz * u_xlat13.xyz;
    u_xlat13.xyz = _ES_CharacterAmbientLightColor.xyz * vec3(_ES_CharacterAmbientLightRatio);
    u_xlat16_8.xyz = u_xlat12.xyz * vec3(10.0, 10.0, 10.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_8.xyz = min(max(u_xlat16_8.xyz, 0.0), 1.0);
#else
    u_xlat16_8.xyz = clamp(u_xlat16_8.xyz, 0.0, 1.0);
#endif
    u_xlat12.xyz = u_xlat13.xyz * u_xlat16_8.xyz + u_xlat12.xyz;
    u_xlat16_8.xyz = (bool(u_xlatb20)) ? u_xlat12.xyz : u_xlat16_5.xyz;
    u_xlat16_9.xyz = u_xlat16_5.xyz + (-u_xlat16_8.xyz);
    u_xlat16_9.xyz = vec3(u_xlat16_45) * u_xlat16_9.xyz + u_xlat16_8.xyz;
    u_xlat16_5.xyz = (-u_xlat16_3.xyz) + u_xlat16_5.xyz;
    u_xlat16_5.xyz = vec3(u_xlat16_45) * u_xlat16_5.xyz + u_xlat16_3.xyz;
    u_xlat16_0.xyz = (bool(u_xlatb6)) ? u_xlat16_9.xyz : u_xlat16_8.xyz;
    u_xlat16_3.xyz = (bool(u_xlatb6)) ? u_xlat16_5.xyz : u_xlat16_3.xyz;
    u_xlat16_5.x = max(u_xlat16_0.z, u_xlat16_0.y);
    u_xlat16_1.w = max(u_xlat16_0.x, u_xlat16_5.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(1.0<u_xlat16_1.w);
#else
    u_xlatb6 = 1.0<u_xlat16_1.w;
#endif
    u_xlat16_1.xyz = u_xlat16_0.xyz / u_xlat16_1.www;
    u_xlat16_0.w = 1.0;
    u_xlat16_0 = (bool(u_xlatb6)) ? u_xlat16_1 : u_xlat16_0;
    u_xlat16_5.x = min(u_xlat16_0.w, 1.10000002);
    u_xlat16_19.x = u_xlat16_0.w + (-u_xlat16_5.x);
    u_xlat16_45 = u_xlat16_45 * u_xlat16_19.x + u_xlat16_5.x;
    SV_Target1.w = u_xlat16_45 * 0.0500000007;
    SV_Target0.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb6 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_45 = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb6) ? u_xlat16_45 : u_xlat16_3.z;
    SV_Target0.w = 0.0470588244;
    SV_Target1.xyz = u_xlat16_0.xyz;
    SV_Target2.xy = u_xlat16_3.xy;
    SV_Target2.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "TOON_SPECULAR_ON" "BACK_FACE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec3 mhy_AvatarLightDir;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump float u_xlat16_4;
float u_xlat16;
void main()
{
    u_xlat0.x = hlslcc_mtx4x4unity_ObjectToWorld[0].y;
    u_xlat0.y = hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat0.z = hlslcc_mtx4x4unity_ObjectToWorld[2].y;
    u_xlat1.xyw = (-_WorldSpaceCameraPos.xyz) + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat0.w = u_xlat1.y;
    u_xlat2.xyz = in_POSITION0.xyz;
    u_xlat2.w = 1.0;
    u_xlat0.x = dot(u_xlat0, u_xlat2);
    u_xlat0 = u_xlat0.xxxx * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat3.w = u_xlat1.x;
    u_xlat3.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;
    u_xlat3.y = hlslcc_mtx4x4unity_ObjectToWorld[1].x;
    u_xlat3.z = hlslcc_mtx4x4unity_ObjectToWorld[2].x;
    u_xlat3.x = dot(u_xlat3, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat3.xxxx + u_xlat0;
    u_xlat1.x = hlslcc_mtx4x4unity_ObjectToWorld[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_ObjectToWorld[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_ObjectToWorld[2].z;
    u_xlat1.x = dot(u_xlat1, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat1.xxxx + u_xlat0;
    u_xlat1.x = hlslcc_mtx4x4unity_ObjectToWorld[0].w;
    u_xlat1.y = hlslcc_mtx4x4unity_ObjectToWorld[1].w;
    u_xlat1.z = hlslcc_mtx4x4unity_ObjectToWorld[2].w;
    u_xlat1.w = hlslcc_mtx4x4unity_ObjectToWorld[3].w;
    u_xlat1.x = dot(u_xlat1, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[3] * u_xlat1.xxxx + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat16 = inversesqrt(u_xlat16);
    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
    u_xlat16_4 = dot(u_xlat1.xyz, mhy_AvatarLightDir.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    vs_TEXCOORD1.w = u_xlat16_4 * 0.497500002 + 0.5;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.zw = u_xlat0.zw;
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD3.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD5.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	mediump vec4 _Color;
uniform 	float _MainTexAlphaUse;
uniform 	mediump float _MainTexAlphaCutoff;
uniform 	float _UseVertexColorAO;
uniform 	mediump float _LightArea;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	float _UseCoolShadowColorOrTex;
uniform 	mediump vec3 _CoolShadowMultColor;
uniform 	float _UseShadowTransition;
uniform 	float _ShadowTransitionRange;
uniform 	float _ShadowTransitionSoftness;
uniform 	mediump vec3 _SpecularColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump float _EmissionScaler;
uniform 	mediump vec3 _EmissionColor_MHY;
uniform 	float _ES_CharacterAmbientLightOn;
uniform 	float _ES_CharacterAmbientBrightness;
uniform 	vec3 _ES_CharacterMainLightColor;
uniform 	float _ES_CharacterMainLightBrightness;
uniform 	vec3 _ES_CharacterAmbientLightColor;
uniform 	float _ES_CharacterMainLightRatio;
uniform 	float _ES_CharacterAmbientLightRatio;
uniform 	float _ES_CharacterColorTone;
uniform 	vec3 mhy_AvatarLightDir;
uniform lowp sampler2D _MainTex;
in mediump vec4 vs_COLOR0;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec4 u_xlat0;
bvec2 u_xlatb0;
vec3 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
bool u_xlatb1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump vec4 u_xlat16_3;
bool u_xlatb3;
vec3 u_xlat4;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
vec3 u_xlat9;
bool u_xlatb9;
mediump float u_xlat16_11;
float u_xlat12;
mediump float u_xlat16_12;
bool u_xlatb18;
bool u_xlatb21;
mediump float u_xlat16_29;
bool u_xlatb30;
mediump float u_xlat16_32;
mediump float u_xlat16_33;
void main()
{
    u_xlatb0.xy = equal(vec4(_MainTexAlphaUse), vec4(1.0, 2.0, 0.0, 0.0)).xy;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy, -1.0);
    u_xlat16_2.x = u_xlat10_1.w + (-_MainTexAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(u_xlat16_2.x<0.0);
#else
    u_xlatb18 = u_xlat16_2.x<0.0;
#endif
    u_xlatb0.x = u_xlatb0.x && u_xlatb18;
    if((int(u_xlatb0.x) * int(0xffffffffu))!=0){discard;}
    SV_Target0.w = 0.0470588244;
    u_xlat16_2.xyz = (uint((gl_FrontFacing ? 0xffffffffu : uint(0))) != uint(0u)) ? vs_TEXCOORD1.xyz : (-vs_TEXCOORD1.xyz);
    SV_Target0.xyz = u_xlat16_2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    u_xlat0.xzw = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat0.xzw = u_xlat0.xzw * u_xlat3.xxx + mhy_AvatarLightDir.xyz;
    u_xlat3.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat0.xzw = u_xlat0.xzw * u_xlat3.xxx;
    u_xlat16_2.x = dot(u_xlat16_2.xyz, u_xlat0.xzw);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.00100000005);
    u_xlat16_2.x = log2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * _Shininess;
    u_xlat16_2.x = exp2(u_xlat16_2.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(0.5<u_xlat16_2.x);
#else
    u_xlatb0.x = 0.5<u_xlat16_2.x;
#endif
    u_xlat16_2.xyz = _SpecularColor.xyz * vec3(_SpecMulti);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(0.5, 0.5, 0.5);
    u_xlat3.xyz = u_xlat16_2.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
    u_xlat0.xzw = mix(vec3(0.0, 0.0, 0.0), u_xlat3.xyz, vec3(u_xlatb0.xxx));
    u_xlat16_2.x = vs_COLOR0.x * 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorAO));
#else
    u_xlatb3 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorAO);
#endif
    u_xlat16_2.x = (u_xlatb3) ? u_xlat16_2.x : 0.5;
    u_xlat12 = u_xlat16_2.x + vs_TEXCOORD1.w;
    u_xlat12 = u_xlat12 * 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(0.949999988<u_xlat16_2.x);
#else
    u_xlatb21 = 0.949999988<u_xlat16_2.x;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(u_xlat16_2.x<0.0500000007);
#else
    u_xlatb30 = u_xlat16_2.x<0.0500000007;
#endif
    u_xlat16_2.x = (u_xlatb21) ? 1.0 : u_xlat12;
    u_xlat16_2.x = (u_xlatb30) ? 0.0 : u_xlat16_2.x;
    u_xlat16_2.x = (u_xlatb3) ? u_xlat16_2.x : vs_TEXCOORD1.w;
    u_xlat16_11 = (-u_xlat16_2.x) + _LightArea;
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(u_xlat16_2.x<_LightArea);
#else
    u_xlatb3 = u_xlat16_2.x<_LightArea;
#endif
    u_xlat16_2.x = u_xlat16_11 / _ShadowTransitionRange;
    u_xlat16_12 = u_xlat16_2.x + 0.00999999978;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(u_xlat16_2.x>=1.0);
#else
    u_xlatb21 = u_xlat16_2.x>=1.0;
#endif
    u_xlat16_12 = log2(u_xlat16_12);
    u_xlat12 = u_xlat16_12 * _ShadowTransitionSoftness;
    u_xlat12 = exp2(u_xlat12);
    u_xlat12 = min(u_xlat12, 1.0);
    u_xlat12 = (u_xlatb21) ? 1.0 : u_xlat12;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition));
#else
    u_xlatb21 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition);
#endif
    u_xlat12 = (u_xlatb21) ? u_xlat12 : 1.0;
    u_xlat12 = u_xlatb3 ? u_xlat12 : float(0.0);
    u_xlat16_4.xyz = vec3(_FirstShadowMultColor.xxyz.y + (-_CoolShadowMultColor.x), _FirstShadowMultColor.xxyz.z + (-_CoolShadowMultColor.y), float(_FirstShadowMultColor.z) + (-_CoolShadowMultColor.z));
    u_xlat4.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_4.xyz + _CoolShadowMultColor.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex));
#else
    u_xlatb30 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex);
#endif
    u_xlat16_2.xyz = (bool(u_xlatb30)) ? u_xlat4.xyz : vec3(_FirstShadowMultColor.x, _FirstShadowMultColor.y, _FirstShadowMultColor.z);
    u_xlat16_4.xyz = u_xlat16_2.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat4.xyz = vec3(u_xlat12) * u_xlat16_4.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_5.xyz = (bool(u_xlatb21)) ? u_xlat4.xyz : u_xlat16_2.xyz;
    u_xlat16_6.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_6.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(int((gl_FrontFacing ? 0xffffffffu : uint(0)))==0);
#else
    u_xlatb1 = int((gl_FrontFacing ? 0xffffffffu : uint(0)))==0;
#endif
    u_xlatb1 = u_xlatb3 || u_xlatb1;
    u_xlat3.xyz = u_xlat16_6.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
    u_xlat1.xyz = (bool(u_xlatb1)) ? u_xlat16_5.xyz : u_xlat3.xyz;
    u_xlat16_5.xyz = u_xlat0.xzw + u_xlat1.xyz;
    u_xlat16_2.xyz = u_xlat16_6.xyz * u_xlat16_2.xyz + u_xlat0.xzw;
    u_xlat16_6.xyz = u_xlat16_6.xyz * _EmissionColor_MHY.xyz;
    u_xlat16_7.xyz = u_xlat16_6.xyz * vec3(vec3(_EmissionScaler, _EmissionScaler, _EmissionScaler)) + (-u_xlat16_5.xyz);
    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(vec3(_EmissionScaler, _EmissionScaler, _EmissionScaler)) + (-u_xlat16_2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(0.00999999978<u_xlat10_1.w);
#else
    u_xlatb0.x = 0.00999999978<u_xlat10_1.w;
#endif
    u_xlatb0.x = u_xlatb0.x && u_xlatb0.y;
    u_xlat16_29 = (u_xlatb0.x) ? u_xlat10_1.w : 0.0;
    u_xlat16_7.xyz = vec3(u_xlat16_29) * u_xlat16_7.xyz + u_xlat16_5.xyz;
    u_xlat16_5.xyz = (u_xlatb0.x) ? u_xlat16_7.xyz : u_xlat16_5.xyz;
    u_xlat9.xyz = u_xlat16_5.xyz * vec3(vec3(_ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness));
    u_xlat1.xyz = _ES_CharacterMainLightColor.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat1.xyz = vec3(vec3(_ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio)) * u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat9.xyz = u_xlat9.xyz * u_xlat1.xyz;
    u_xlat16_7.xyz = u_xlat9.xyz * vec3(10.0, 10.0, 10.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.xyz = min(max(u_xlat16_7.xyz, 0.0), 1.0);
#else
    u_xlat16_7.xyz = clamp(u_xlat16_7.xyz, 0.0, 1.0);
#endif
    u_xlat1.xyz = _ES_CharacterAmbientLightColor.xyz * vec3(_ES_CharacterAmbientLightRatio);
    u_xlat9.xyz = u_xlat1.xyz * u_xlat16_7.xyz + u_xlat9.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn));
#else
    u_xlatb1 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn);
#endif
    u_xlat16_7.xyz = (bool(u_xlatb1)) ? u_xlat9.xyz : u_xlat16_5.xyz;
    u_xlat16_8.xyz = u_xlat16_5.xyz + (-u_xlat16_7.xyz);
    u_xlat16_8.xyz = vec3(u_xlat16_29) * u_xlat16_8.xyz + u_xlat16_7.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(0.00999999978<u_xlat16_29);
#else
    u_xlatb9 = 0.00999999978<u_xlat16_29;
#endif
    u_xlat16_1.xyz = (bool(u_xlatb9)) ? u_xlat16_8.xyz : u_xlat16_7.xyz;
    u_xlat16_32 = max(u_xlat16_1.z, u_xlat16_1.y);
    u_xlat16_3.w = max(u_xlat16_1.x, u_xlat16_32);
    u_xlat16_3.xyz = u_xlat16_1.xyz / u_xlat16_3.www;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(1.0<u_xlat16_3.w);
#else
    u_xlatb18 = 1.0<u_xlat16_3.w;
#endif
    u_xlat16_1.w = 1.0;
    u_xlat16_1 = (bool(u_xlatb18)) ? u_xlat16_3 : u_xlat16_1;
    u_xlat16_32 = min(u_xlat16_1.w, 1.10000002);
    u_xlat16_33 = u_xlat16_1.w + (-u_xlat16_32);
    SV_Target1.xyz = u_xlat16_1.xyz;
    u_xlat16_32 = u_xlat16_29 * u_xlat16_33 + u_xlat16_32;
    SV_Target1.w = u_xlat16_32 * 0.0500000007;
    u_xlat16_6.xyz = vec3(u_xlat16_29) * u_xlat16_6.xyz + u_xlat16_2.xyz;
    u_xlat16_2.xyz = (u_xlatb0.x) ? u_xlat16_6.xyz : u_xlat16_2.xyz;
    u_xlat16_5.xyz = (-u_xlat16_2.xyz) + u_xlat16_5.xyz;
    u_xlat16_5.xyz = vec3(u_xlat16_29) * u_xlat16_5.xyz + u_xlat16_2.xyz;
    u_xlat16_2.xyz = (bool(u_xlatb9)) ? u_xlat16_5.xyz : u_xlat16_2.xyz;
    SV_Target2.xy = u_xlat16_2.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_2.x = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb0.x) ? u_xlat16_2.x : u_xlat16_2.z;
    SV_Target2.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "MSAA_INTERPOLATION" "TOON_SPECULAR_ON" "BACK_FACE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec3 mhy_AvatarLightDir;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump float u_xlat16_4;
float u_xlat16;
void main()
{
    u_xlat0.x = hlslcc_mtx4x4unity_ObjectToWorld[0].y;
    u_xlat0.y = hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat0.z = hlslcc_mtx4x4unity_ObjectToWorld[2].y;
    u_xlat1.xyw = (-_WorldSpaceCameraPos.xyz) + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat0.w = u_xlat1.y;
    u_xlat2.xyz = in_POSITION0.xyz;
    u_xlat2.w = 1.0;
    u_xlat0.x = dot(u_xlat0, u_xlat2);
    u_xlat0 = u_xlat0.xxxx * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat3.w = u_xlat1.x;
    u_xlat3.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;
    u_xlat3.y = hlslcc_mtx4x4unity_ObjectToWorld[1].x;
    u_xlat3.z = hlslcc_mtx4x4unity_ObjectToWorld[2].x;
    u_xlat3.x = dot(u_xlat3, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat3.xxxx + u_xlat0;
    u_xlat1.x = hlslcc_mtx4x4unity_ObjectToWorld[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_ObjectToWorld[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_ObjectToWorld[2].z;
    u_xlat1.x = dot(u_xlat1, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat1.xxxx + u_xlat0;
    u_xlat1.x = hlslcc_mtx4x4unity_ObjectToWorld[0].w;
    u_xlat1.y = hlslcc_mtx4x4unity_ObjectToWorld[1].w;
    u_xlat1.z = hlslcc_mtx4x4unity_ObjectToWorld[2].w;
    u_xlat1.w = hlslcc_mtx4x4unity_ObjectToWorld[3].w;
    u_xlat1.x = dot(u_xlat1, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[3] * u_xlat1.xxxx + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat16 = inversesqrt(u_xlat16);
    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
    u_xlat16_4 = dot(u_xlat1.xyz, mhy_AvatarLightDir.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    vs_TEXCOORD1.w = u_xlat16_4 * 0.497500002 + 0.5;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.zw = u_xlat0.zw;
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD3.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD5.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	mediump vec4 _Color;
uniform 	float _MainTexAlphaUse;
uniform 	mediump float _MainTexAlphaCutoff;
uniform 	float _UseVertexColorAO;
uniform 	mediump float _LightArea;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	float _UseCoolShadowColorOrTex;
uniform 	mediump vec3 _CoolShadowMultColor;
uniform 	float _UseShadowTransition;
uniform 	float _ShadowTransitionRange;
uniform 	float _ShadowTransitionSoftness;
uniform 	mediump vec3 _SpecularColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump float _EmissionScaler;
uniform 	mediump vec3 _EmissionColor_MHY;
uniform 	float _ES_CharacterAmbientLightOn;
uniform 	float _ES_CharacterAmbientBrightness;
uniform 	vec3 _ES_CharacterMainLightColor;
uniform 	float _ES_CharacterMainLightBrightness;
uniform 	vec3 _ES_CharacterAmbientLightColor;
uniform 	float _ES_CharacterMainLightRatio;
uniform 	float _ES_CharacterAmbientLightRatio;
uniform 	float _ES_CharacterColorTone;
uniform 	vec3 mhy_AvatarLightDir;
uniform lowp sampler2D _MainTex;
in mediump vec4 vs_COLOR0;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
bool u_xlatb2;
vec3 u_xlat3;
mediump vec4 u_xlat16_3;
bool u_xlatb3;
vec3 u_xlat4;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
vec3 u_xlat9;
bool u_xlatb9;
mediump float u_xlat16_10;
bvec2 u_xlatb11;
float u_xlat12;
mediump float u_xlat16_12;
vec2 u_xlat18;
bool u_xlatb18;
bool u_xlatb21;
mediump float u_xlat16_28;
bool u_xlatb30;
mediump float u_xlat16_32;
mediump float u_xlat16_33;
void main()
{
    u_xlat0.xy = dFdx(vs_TEXCOORD0.xy);
    u_xlat18.xy = dFdy(vs_TEXCOORD0.xy);
    u_xlat0.xy = u_xlat18.xy + u_xlat0.xy;
    u_xlat18.xy = (-u_xlat0.xy) * vec2(0.25, 0.25) + vs_TEXCOORD0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25) + vs_TEXCOORD0.xy;
    u_xlat0.xy = (int(gl_SampleID) != 0) ? u_xlat18.xy : u_xlat0.xy;
    u_xlat10_0 = textureLod(_MainTex, u_xlat0.xy, 0.0);
    u_xlat16_1.x = u_xlat10_0.w + (-_MainTexAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat16_1.x<0.0);
#else
    u_xlatb2 = u_xlat16_1.x<0.0;
#endif
    u_xlatb11.xy = equal(vec4(_MainTexAlphaUse), vec4(1.0, 2.0, 0.0, 0.0)).xy;
    u_xlatb2 = u_xlatb11.x && u_xlatb2;
    if((int(u_xlatb2) * int(0xffffffffu))!=0){discard;}
    SV_Target0.w = 0.0470588244;
    u_xlat16_1.xyz = (uint((gl_FrontFacing ? 0xffffffffu : uint(0))) != uint(0u)) ? vs_TEXCOORD1.xyz : (-vs_TEXCOORD1.xyz);
    SV_Target0.xyz = u_xlat16_1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    u_xlat2.xyw = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3.x = dot(u_xlat2.xyw, u_xlat2.xyw);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat2.xyw = u_xlat2.xyw * u_xlat3.xxx + mhy_AvatarLightDir.xyz;
    u_xlat3.x = dot(u_xlat2.xyw, u_xlat2.xyw);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat2.xyw = u_xlat2.xyw * u_xlat3.xxx;
    u_xlat16_1.x = dot(u_xlat16_1.xyz, u_xlat2.xyw);
    u_xlat16_1.x = max(u_xlat16_1.x, 0.00100000005);
    u_xlat16_1.x = log2(u_xlat16_1.x);
    u_xlat16_1.x = u_xlat16_1.x * _Shininess;
    u_xlat16_1.x = exp2(u_xlat16_1.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(0.5<u_xlat16_1.x);
#else
    u_xlatb2 = 0.5<u_xlat16_1.x;
#endif
    u_xlat16_1.xyz = _SpecularColor.xyz * vec3(_SpecMulti);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(0.5, 0.5, 0.5);
    u_xlat3.xyz = u_xlat16_1.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
    u_xlat2.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat3.xyz, vec3(bvec3(u_xlatb2)));
    u_xlat16_1.x = vs_COLOR0.x * 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorAO));
#else
    u_xlatb3 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorAO);
#endif
    u_xlat16_1.x = (u_xlatb3) ? u_xlat16_1.x : 0.5;
    u_xlat12 = u_xlat16_1.x + vs_TEXCOORD1.w;
    u_xlat12 = u_xlat12 * 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(0.949999988<u_xlat16_1.x);
#else
    u_xlatb21 = 0.949999988<u_xlat16_1.x;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(u_xlat16_1.x<0.0500000007);
#else
    u_xlatb30 = u_xlat16_1.x<0.0500000007;
#endif
    u_xlat16_1.x = (u_xlatb21) ? 1.0 : u_xlat12;
    u_xlat16_1.x = (u_xlatb30) ? 0.0 : u_xlat16_1.x;
    u_xlat16_1.x = (u_xlatb3) ? u_xlat16_1.x : vs_TEXCOORD1.w;
    u_xlat16_10 = (-u_xlat16_1.x) + _LightArea;
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(u_xlat16_1.x<_LightArea);
#else
    u_xlatb3 = u_xlat16_1.x<_LightArea;
#endif
    u_xlat16_1.x = u_xlat16_10 / _ShadowTransitionRange;
    u_xlat16_12 = u_xlat16_1.x + 0.00999999978;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(u_xlat16_1.x>=1.0);
#else
    u_xlatb21 = u_xlat16_1.x>=1.0;
#endif
    u_xlat16_12 = log2(u_xlat16_12);
    u_xlat12 = u_xlat16_12 * _ShadowTransitionSoftness;
    u_xlat12 = exp2(u_xlat12);
    u_xlat12 = min(u_xlat12, 1.0);
    u_xlat12 = (u_xlatb21) ? 1.0 : u_xlat12;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition));
#else
    u_xlatb21 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition);
#endif
    u_xlat12 = (u_xlatb21) ? u_xlat12 : 1.0;
    u_xlat12 = u_xlatb3 ? u_xlat12 : float(0.0);
    u_xlat16_4.xyz = vec3(_FirstShadowMultColor.xxyz.y + (-_CoolShadowMultColor.x), _FirstShadowMultColor.xxyz.z + (-_CoolShadowMultColor.y), float(_FirstShadowMultColor.z) + (-_CoolShadowMultColor.z));
    u_xlat4.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_4.xyz + _CoolShadowMultColor.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex));
#else
    u_xlatb30 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex);
#endif
    u_xlat16_1.xyz = (bool(u_xlatb30)) ? u_xlat4.xyz : vec3(_FirstShadowMultColor.x, _FirstShadowMultColor.y, _FirstShadowMultColor.z);
    u_xlat16_4.xyz = u_xlat16_1.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat4.xyz = vec3(u_xlat12) * u_xlat16_4.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_5.xyz = (bool(u_xlatb21)) ? u_xlat4.xyz : u_xlat16_1.xyz;
    u_xlat16_6.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_6.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(int((gl_FrontFacing ? 0xffffffffu : uint(0)))==0);
#else
    u_xlatb0 = int((gl_FrontFacing ? 0xffffffffu : uint(0)))==0;
#endif
    u_xlatb0 = u_xlatb3 || u_xlatb0;
    u_xlat3.xyz = u_xlat16_6.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
    u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat16_5.xyz : u_xlat3.xyz;
    u_xlat16_5.xyz = u_xlat2.xyw + u_xlat0.xyz;
    u_xlat16_1.xyz = u_xlat16_6.xyz * u_xlat16_1.xyz + u_xlat2.xyw;
    u_xlat16_6.xyz = u_xlat16_6.xyz * _EmissionColor_MHY.xyz;
    u_xlat16_7.xyz = u_xlat16_6.xyz * vec3(vec3(_EmissionScaler, _EmissionScaler, _EmissionScaler)) + (-u_xlat16_5.xyz);
    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(vec3(_EmissionScaler, _EmissionScaler, _EmissionScaler)) + (-u_xlat16_1.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.00999999978<u_xlat10_0.w);
#else
    u_xlatb0 = 0.00999999978<u_xlat10_0.w;
#endif
    u_xlatb0 = u_xlatb0 && u_xlatb11.y;
    u_xlat16_28 = (u_xlatb0) ? u_xlat10_0.w : 0.0;
    u_xlat16_7.xyz = vec3(u_xlat16_28) * u_xlat16_7.xyz + u_xlat16_5.xyz;
    u_xlat16_5.xyz = (bool(u_xlatb0)) ? u_xlat16_7.xyz : u_xlat16_5.xyz;
    u_xlat9.xyz = u_xlat16_5.xyz * vec3(vec3(_ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness));
    u_xlat2.xyz = _ES_CharacterMainLightColor.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat2.xyz = vec3(vec3(_ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio)) * u_xlat2.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat9.xyz = u_xlat9.xyz * u_xlat2.xyz;
    u_xlat16_7.xyz = u_xlat9.xyz * vec3(10.0, 10.0, 10.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.xyz = min(max(u_xlat16_7.xyz, 0.0), 1.0);
#else
    u_xlat16_7.xyz = clamp(u_xlat16_7.xyz, 0.0, 1.0);
#endif
    u_xlat2.xyz = _ES_CharacterAmbientLightColor.xyz * vec3(_ES_CharacterAmbientLightRatio);
    u_xlat9.xyz = u_xlat2.xyz * u_xlat16_7.xyz + u_xlat9.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn));
#else
    u_xlatb2 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn);
#endif
    u_xlat16_7.xyz = (bool(u_xlatb2)) ? u_xlat9.xyz : u_xlat16_5.xyz;
    u_xlat16_8.xyz = u_xlat16_5.xyz + (-u_xlat16_7.xyz);
    u_xlat16_8.xyz = vec3(u_xlat16_28) * u_xlat16_8.xyz + u_xlat16_7.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(0.00999999978<u_xlat16_28);
#else
    u_xlatb9 = 0.00999999978<u_xlat16_28;
#endif
    u_xlat16_2.xyz = (bool(u_xlatb9)) ? u_xlat16_8.xyz : u_xlat16_7.xyz;
    u_xlat16_32 = max(u_xlat16_2.z, u_xlat16_2.y);
    u_xlat16_3.w = max(u_xlat16_2.x, u_xlat16_32);
    u_xlat16_3.xyz = u_xlat16_2.xyz / u_xlat16_3.www;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(1.0<u_xlat16_3.w);
#else
    u_xlatb18 = 1.0<u_xlat16_3.w;
#endif
    u_xlat16_2.w = 1.0;
    u_xlat16_2 = (bool(u_xlatb18)) ? u_xlat16_3 : u_xlat16_2;
    u_xlat16_32 = min(u_xlat16_2.w, 1.10000002);
    u_xlat16_33 = u_xlat16_2.w + (-u_xlat16_32);
    SV_Target1.xyz = u_xlat16_2.xyz;
    u_xlat16_32 = u_xlat16_28 * u_xlat16_33 + u_xlat16_32;
    SV_Target1.w = u_xlat16_32 * 0.0500000007;
    u_xlat16_6.xyz = vec3(u_xlat16_28) * u_xlat16_6.xyz + u_xlat16_1.xyz;
    u_xlat16_1.xyz = (bool(u_xlatb0)) ? u_xlat16_6.xyz : u_xlat16_1.xyz;
    u_xlat16_5.xyz = (-u_xlat16_1.xyz) + u_xlat16_5.xyz;
    u_xlat16_5.xyz = vec3(u_xlat16_28) * u_xlat16_5.xyz + u_xlat16_1.xyz;
    u_xlat16_1.xyz = (bool(u_xlatb9)) ? u_xlat16_5.xyz : u_xlat16_1.xyz;
    SV_Target2.xy = u_xlat16_1.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_1.x = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb0) ? u_xlat16_1.x : u_xlat16_1.z;
    SV_Target2.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "LINE_INTERPOLATION" "TOON_SPECULAR_ON" "BACK_FACE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec3 mhy_AvatarLightDir;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump float u_xlat16_4;
float u_xlat16;
void main()
{
    u_xlat0.x = hlslcc_mtx4x4unity_ObjectToWorld[0].y;
    u_xlat0.y = hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat0.z = hlslcc_mtx4x4unity_ObjectToWorld[2].y;
    u_xlat1.xyw = (-_WorldSpaceCameraPos.xyz) + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat0.w = u_xlat1.y;
    u_xlat2.xyz = in_POSITION0.xyz;
    u_xlat2.w = 1.0;
    u_xlat0.x = dot(u_xlat0, u_xlat2);
    u_xlat0 = u_xlat0.xxxx * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat3.w = u_xlat1.x;
    u_xlat3.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;
    u_xlat3.y = hlslcc_mtx4x4unity_ObjectToWorld[1].x;
    u_xlat3.z = hlslcc_mtx4x4unity_ObjectToWorld[2].x;
    u_xlat3.x = dot(u_xlat3, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat3.xxxx + u_xlat0;
    u_xlat1.x = hlslcc_mtx4x4unity_ObjectToWorld[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_ObjectToWorld[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_ObjectToWorld[2].z;
    u_xlat1.x = dot(u_xlat1, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat1.xxxx + u_xlat0;
    u_xlat1.x = hlslcc_mtx4x4unity_ObjectToWorld[0].w;
    u_xlat1.y = hlslcc_mtx4x4unity_ObjectToWorld[1].w;
    u_xlat1.z = hlslcc_mtx4x4unity_ObjectToWorld[2].w;
    u_xlat1.w = hlslcc_mtx4x4unity_ObjectToWorld[3].w;
    u_xlat1.x = dot(u_xlat1, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[3] * u_xlat1.xxxx + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat16 = inversesqrt(u_xlat16);
    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
    u_xlat16_4 = dot(u_xlat1.xyz, mhy_AvatarLightDir.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    vs_TEXCOORD1.w = u_xlat16_4 * 0.497500002 + 0.5;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.zw = u_xlat0.zw;
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD3.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD5.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	mediump vec4 _Color;
uniform 	float _MainTexAlphaUse;
uniform 	mediump float _MainTexAlphaCutoff;
uniform 	float _UseVertexColorAO;
uniform 	mediump float _LightArea;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	float _UseCoolShadowColorOrTex;
uniform 	mediump vec3 _CoolShadowMultColor;
uniform 	float _UseShadowTransition;
uniform 	float _ShadowTransitionRange;
uniform 	float _ShadowTransitionSoftness;
uniform 	mediump vec3 _SpecularColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump float _EmissionScaler;
uniform 	mediump vec3 _EmissionColor_MHY;
uniform 	float _ES_CharacterAmbientLightOn;
uniform 	float _ES_CharacterAmbientBrightness;
uniform 	vec3 _ES_CharacterMainLightColor;
uniform 	float _ES_CharacterMainLightBrightness;
uniform 	vec3 _ES_CharacterAmbientLightColor;
uniform 	float _ES_CharacterMainLightRatio;
uniform 	float _ES_CharacterAmbientLightRatio;
uniform 	float _ES_CharacterColorTone;
uniform 	vec3 mhy_AvatarLightDir;
uniform lowp sampler2D _MainTex;
in mediump vec4 vs_COLOR0;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec4 u_xlat0;
bvec2 u_xlatb0;
vec3 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
bool u_xlatb1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump vec4 u_xlat16_3;
bool u_xlatb3;
vec3 u_xlat4;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
vec3 u_xlat9;
bool u_xlatb9;
mediump float u_xlat16_11;
float u_xlat12;
mediump float u_xlat16_12;
bool u_xlatb18;
bool u_xlatb21;
mediump float u_xlat16_29;
bool u_xlatb30;
mediump float u_xlat16_32;
mediump float u_xlat16_33;
void main()
{
    u_xlatb0.xy = equal(vec4(_MainTexAlphaUse), vec4(1.0, 2.0, 0.0, 0.0)).xy;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy, -1.0);
    u_xlat16_2.x = u_xlat10_1.w + (-_MainTexAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(u_xlat16_2.x<0.0);
#else
    u_xlatb18 = u_xlat16_2.x<0.0;
#endif
    u_xlatb0.x = u_xlatb0.x && u_xlatb18;
    if((int(u_xlatb0.x) * int(0xffffffffu))!=0){discard;}
    SV_Target0.w = 0.0470588244;
    u_xlat16_2.xyz = (uint((gl_FrontFacing ? 0xffffffffu : uint(0))) != uint(0u)) ? vs_TEXCOORD1.xyz : (-vs_TEXCOORD1.xyz);
    SV_Target0.xyz = u_xlat16_2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    u_xlat0.xzw = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat0.xzw = u_xlat0.xzw * u_xlat3.xxx + mhy_AvatarLightDir.xyz;
    u_xlat3.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat0.xzw = u_xlat0.xzw * u_xlat3.xxx;
    u_xlat16_2.x = dot(u_xlat16_2.xyz, u_xlat0.xzw);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.00100000005);
    u_xlat16_2.x = log2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * _Shininess;
    u_xlat16_2.x = exp2(u_xlat16_2.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(0.5<u_xlat16_2.x);
#else
    u_xlatb0.x = 0.5<u_xlat16_2.x;
#endif
    u_xlat16_2.xyz = _SpecularColor.xyz * vec3(_SpecMulti);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(0.5, 0.5, 0.5);
    u_xlat3.xyz = u_xlat16_2.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
    u_xlat0.xzw = mix(vec3(0.0, 0.0, 0.0), u_xlat3.xyz, vec3(u_xlatb0.xxx));
    u_xlat16_2.x = vs_COLOR0.x * 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorAO));
#else
    u_xlatb3 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorAO);
#endif
    u_xlat16_2.x = (u_xlatb3) ? u_xlat16_2.x : 0.5;
    u_xlat12 = u_xlat16_2.x + vs_TEXCOORD1.w;
    u_xlat12 = u_xlat12 * 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(0.949999988<u_xlat16_2.x);
#else
    u_xlatb21 = 0.949999988<u_xlat16_2.x;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(u_xlat16_2.x<0.0500000007);
#else
    u_xlatb30 = u_xlat16_2.x<0.0500000007;
#endif
    u_xlat16_2.x = (u_xlatb21) ? 1.0 : u_xlat12;
    u_xlat16_2.x = (u_xlatb30) ? 0.0 : u_xlat16_2.x;
    u_xlat16_2.x = (u_xlatb3) ? u_xlat16_2.x : vs_TEXCOORD1.w;
    u_xlat16_11 = (-u_xlat16_2.x) + _LightArea;
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(u_xlat16_2.x<_LightArea);
#else
    u_xlatb3 = u_xlat16_2.x<_LightArea;
#endif
    u_xlat16_2.x = u_xlat16_11 / _ShadowTransitionRange;
    u_xlat16_12 = u_xlat16_2.x + 0.00999999978;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(u_xlat16_2.x>=1.0);
#else
    u_xlatb21 = u_xlat16_2.x>=1.0;
#endif
    u_xlat16_12 = log2(u_xlat16_12);
    u_xlat12 = u_xlat16_12 * _ShadowTransitionSoftness;
    u_xlat12 = exp2(u_xlat12);
    u_xlat12 = min(u_xlat12, 1.0);
    u_xlat12 = (u_xlatb21) ? 1.0 : u_xlat12;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition));
#else
    u_xlatb21 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition);
#endif
    u_xlat12 = (u_xlatb21) ? u_xlat12 : 1.0;
    u_xlat12 = u_xlatb3 ? u_xlat12 : float(0.0);
    u_xlat16_4.xyz = vec3(_FirstShadowMultColor.xxyz.y + (-_CoolShadowMultColor.x), _FirstShadowMultColor.xxyz.z + (-_CoolShadowMultColor.y), float(_FirstShadowMultColor.z) + (-_CoolShadowMultColor.z));
    u_xlat4.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_4.xyz + _CoolShadowMultColor.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex));
#else
    u_xlatb30 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex);
#endif
    u_xlat16_2.xyz = (bool(u_xlatb30)) ? u_xlat4.xyz : vec3(_FirstShadowMultColor.x, _FirstShadowMultColor.y, _FirstShadowMultColor.z);
    u_xlat16_4.xyz = u_xlat16_2.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat4.xyz = vec3(u_xlat12) * u_xlat16_4.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_5.xyz = (bool(u_xlatb21)) ? u_xlat4.xyz : u_xlat16_2.xyz;
    u_xlat16_6.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_6.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(int((gl_FrontFacing ? 0xffffffffu : uint(0)))==0);
#else
    u_xlatb1 = int((gl_FrontFacing ? 0xffffffffu : uint(0)))==0;
#endif
    u_xlatb1 = u_xlatb3 || u_xlatb1;
    u_xlat3.xyz = u_xlat16_6.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
    u_xlat1.xyz = (bool(u_xlatb1)) ? u_xlat16_5.xyz : u_xlat3.xyz;
    u_xlat16_5.xyz = u_xlat0.xzw + u_xlat1.xyz;
    u_xlat16_2.xyz = u_xlat16_6.xyz * u_xlat16_2.xyz + u_xlat0.xzw;
    u_xlat16_6.xyz = u_xlat16_6.xyz * _EmissionColor_MHY.xyz;
    u_xlat16_7.xyz = u_xlat16_6.xyz * vec3(vec3(_EmissionScaler, _EmissionScaler, _EmissionScaler)) + (-u_xlat16_5.xyz);
    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(vec3(_EmissionScaler, _EmissionScaler, _EmissionScaler)) + (-u_xlat16_2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(0.00999999978<u_xlat10_1.w);
#else
    u_xlatb0.x = 0.00999999978<u_xlat10_1.w;
#endif
    u_xlatb0.x = u_xlatb0.x && u_xlatb0.y;
    u_xlat16_29 = (u_xlatb0.x) ? u_xlat10_1.w : 0.0;
    u_xlat16_7.xyz = vec3(u_xlat16_29) * u_xlat16_7.xyz + u_xlat16_5.xyz;
    u_xlat16_5.xyz = (u_xlatb0.x) ? u_xlat16_7.xyz : u_xlat16_5.xyz;
    u_xlat9.xyz = u_xlat16_5.xyz * vec3(vec3(_ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness));
    u_xlat1.xyz = _ES_CharacterMainLightColor.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat1.xyz = vec3(vec3(_ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio)) * u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat9.xyz = u_xlat9.xyz * u_xlat1.xyz;
    u_xlat16_7.xyz = u_xlat9.xyz * vec3(10.0, 10.0, 10.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.xyz = min(max(u_xlat16_7.xyz, 0.0), 1.0);
#else
    u_xlat16_7.xyz = clamp(u_xlat16_7.xyz, 0.0, 1.0);
#endif
    u_xlat1.xyz = _ES_CharacterAmbientLightColor.xyz * vec3(_ES_CharacterAmbientLightRatio);
    u_xlat9.xyz = u_xlat1.xyz * u_xlat16_7.xyz + u_xlat9.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn));
#else
    u_xlatb1 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn);
#endif
    u_xlat16_7.xyz = (bool(u_xlatb1)) ? u_xlat9.xyz : u_xlat16_5.xyz;
    u_xlat16_8.xyz = u_xlat16_5.xyz + (-u_xlat16_7.xyz);
    u_xlat16_8.xyz = vec3(u_xlat16_29) * u_xlat16_8.xyz + u_xlat16_7.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(0.00999999978<u_xlat16_29);
#else
    u_xlatb9 = 0.00999999978<u_xlat16_29;
#endif
    u_xlat16_1.xyz = (bool(u_xlatb9)) ? u_xlat16_8.xyz : u_xlat16_7.xyz;
    u_xlat16_32 = max(u_xlat16_1.z, u_xlat16_1.y);
    u_xlat16_3.w = max(u_xlat16_1.x, u_xlat16_32);
    u_xlat16_3.xyz = u_xlat16_1.xyz / u_xlat16_3.www;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(1.0<u_xlat16_3.w);
#else
    u_xlatb18 = 1.0<u_xlat16_3.w;
#endif
    u_xlat16_1.w = 1.0;
    u_xlat16_1 = (bool(u_xlatb18)) ? u_xlat16_3 : u_xlat16_1;
    u_xlat16_32 = min(u_xlat16_1.w, 1.10000002);
    u_xlat16_33 = u_xlat16_1.w + (-u_xlat16_32);
    SV_Target1.xyz = u_xlat16_1.xyz;
    u_xlat16_32 = u_xlat16_29 * u_xlat16_33 + u_xlat16_32;
    SV_Target1.w = u_xlat16_32 * 0.0500000007;
    u_xlat16_6.xyz = vec3(u_xlat16_29) * u_xlat16_6.xyz + u_xlat16_2.xyz;
    u_xlat16_2.xyz = (u_xlatb0.x) ? u_xlat16_6.xyz : u_xlat16_2.xyz;
    u_xlat16_5.xyz = (-u_xlat16_2.xyz) + u_xlat16_5.xyz;
    u_xlat16_5.xyz = vec3(u_xlat16_29) * u_xlat16_5.xyz + u_xlat16_2.xyz;
    u_xlat16_2.xyz = (bool(u_xlatb9)) ? u_xlat16_5.xyz : u_xlat16_2.xyz;
    SV_Target2.xy = u_xlat16_2.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_2.x = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb0.x) ? u_xlat16_2.x : u_xlat16_2.z;
    SV_Target2.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "TOON_SPECULAR_ON" "BACK_FACE_ON" "METAL_MAT" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec3 mhy_AvatarLightDir;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump float u_xlat16_4;
float u_xlat16;
void main()
{
    u_xlat0.x = hlslcc_mtx4x4unity_ObjectToWorld[0].y;
    u_xlat0.y = hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat0.z = hlslcc_mtx4x4unity_ObjectToWorld[2].y;
    u_xlat1.xyw = (-_WorldSpaceCameraPos.xyz) + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat0.w = u_xlat1.y;
    u_xlat2.xyz = in_POSITION0.xyz;
    u_xlat2.w = 1.0;
    u_xlat0.x = dot(u_xlat0, u_xlat2);
    u_xlat0 = u_xlat0.xxxx * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat3.w = u_xlat1.x;
    u_xlat3.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;
    u_xlat3.y = hlslcc_mtx4x4unity_ObjectToWorld[1].x;
    u_xlat3.z = hlslcc_mtx4x4unity_ObjectToWorld[2].x;
    u_xlat3.x = dot(u_xlat3, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat3.xxxx + u_xlat0;
    u_xlat1.x = hlslcc_mtx4x4unity_ObjectToWorld[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_ObjectToWorld[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_ObjectToWorld[2].z;
    u_xlat1.x = dot(u_xlat1, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat1.xxxx + u_xlat0;
    u_xlat1.x = hlslcc_mtx4x4unity_ObjectToWorld[0].w;
    u_xlat1.y = hlslcc_mtx4x4unity_ObjectToWorld[1].w;
    u_xlat1.z = hlslcc_mtx4x4unity_ObjectToWorld[2].w;
    u_xlat1.w = hlslcc_mtx4x4unity_ObjectToWorld[3].w;
    u_xlat1.x = dot(u_xlat1, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[3] * u_xlat1.xxxx + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat16 = inversesqrt(u_xlat16);
    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
    u_xlat16_4 = dot(u_xlat1.xyz, mhy_AvatarLightDir.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    vs_TEXCOORD1.w = u_xlat16_4 * 0.497500002 + 0.5;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.zw = u_xlat0.zw;
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD3.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD5.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToCamera[4];
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	mediump vec4 _Color;
uniform 	float _MainTexAlphaUse;
uniform 	mediump float _MainTexAlphaCutoff;
uniform 	float _UseVertexColorAO;
uniform 	mediump float _LightArea;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	float _UseCoolShadowColorOrTex;
uniform 	mediump vec3 _CoolShadowMultColor;
uniform 	float _UseShadowTransition;
uniform 	float _ShadowTransitionRange;
uniform 	float _ShadowTransitionSoftness;
uniform 	mediump vec3 _SpecularColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump float _EmissionScaler;
uniform 	mediump vec3 _EmissionColor_MHY;
uniform 	mediump float _MTMapBrightness;
uniform 	float _MTMapTileScale;
uniform 	mediump vec3 _MTMapLightColor;
uniform 	mediump vec3 _MTMapDarkColor;
uniform 	mediump vec3 _MTShadowMultiColor;
uniform 	mediump float _MTShininess;
uniform 	mediump vec3 _MTSpecularColor;
uniform 	mediump float _MTSpecularScale;
uniform 	float _ES_CharacterAmbientLightOn;
uniform 	float _ES_CharacterAmbientBrightness;
uniform 	vec3 _ES_CharacterMainLightColor;
uniform 	float _ES_CharacterMainLightBrightness;
uniform 	vec3 _ES_CharacterAmbientLightColor;
uniform 	float _ES_CharacterMainLightRatio;
uniform 	float _ES_CharacterAmbientLightRatio;
uniform 	float _ES_CharacterColorTone;
uniform 	vec3 mhy_AvatarLightDir;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MTMap;
in mediump vec4 vs_COLOR0;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
mediump vec3 u_xlat16_0;
vec3 u_xlat1;
mediump vec4 u_xlat16_1;
mediump vec4 u_xlat16_2;
lowp vec4 u_xlat10_2;
bool u_xlatb2;
vec4 u_xlat3;
lowp vec3 u_xlat10_3;
bvec2 u_xlatb3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
bool u_xlatb6;
float u_xlat7;
float u_xlat8;
bool u_xlatb8;
vec3 u_xlat9;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
mediump vec3 u_xlat16_11;
mediump vec3 u_xlat16_12;
vec3 u_xlat13;
mediump vec3 u_xlat16_13;
bool u_xlatb13;
vec3 u_xlat14;
float u_xlat18;
bool u_xlatb18;
mediump vec3 u_xlat16_20;
vec3 u_xlat23;
mediump vec3 u_xlat16_23;
lowp float u_xlat10_23;
bool u_xlatb23;
vec3 u_xlat28;
mediump vec3 u_xlat16_28;
mediump float u_xlat16_45;
float u_xlat46;
bool u_xlatb46;
bool u_xlatb48;
mediump float u_xlat16_49;
mediump float u_xlat16_50;
void main()
{
    u_xlat16_0.xyz = (uint((gl_FrontFacing ? 0xffffffffu : uint(0))) != uint(0u)) ? vs_TEXCOORD1.xyz : (-vs_TEXCOORD1.xyz);
    u_xlat1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat46 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat46 = inversesqrt(u_xlat46);
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat46) + mhy_AvatarLightDir.xyz;
    u_xlat46 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat46 = inversesqrt(u_xlat46);
    u_xlat1.xyz = vec3(u_xlat46) * u_xlat1.xyz;
    u_xlat10_2 = texture(_MainTex, vs_TEXCOORD0.xy, -1.0);
    u_xlatb3.xy = equal(vec4(_MainTexAlphaUse), vec4(1.0, 2.0, 0.0, 0.0)).xy;
    u_xlat16_45 = u_xlat10_2.w + (-_MainTexAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb46 = !!(u_xlat16_45<0.0);
#else
    u_xlatb46 = u_xlat16_45<0.0;
#endif
    u_xlatb46 = u_xlatb3.x && u_xlatb46;
    if((int(u_xlatb46) * int(0xffffffffu))!=0){discard;}
    u_xlat10_3.xz = texture(_LightMapTex, vs_TEXCOORD0.xy, -1.0).xz;
    u_xlat16_4.xyz = u_xlat10_2.xyz * _Color.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb46 = !!(0.00999999978<u_xlat10_2.w);
#else
    u_xlatb46 = 0.00999999978<u_xlat10_2.w;
#endif
    u_xlatb2 = u_xlatb46 && u_xlatb3.y;
    u_xlat16_45 = (u_xlatb2) ? u_xlat10_2.w : 0.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorAO));
#else
    u_xlatb18 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorAO);
#endif
    u_xlat16_49 = vs_COLOR0.x * 0.5;
    u_xlat16_5.x = (u_xlatb18) ? u_xlat16_49 : 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb48 = !!(u_xlat16_5.x<0.0500000007);
#else
    u_xlatb48 = u_xlat16_5.x<0.0500000007;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.949999988<u_xlat16_5.x);
#else
    u_xlatb6 = 0.949999988<u_xlat16_5.x;
#endif
    u_xlat7 = u_xlat16_5.x + vs_TEXCOORD1.w;
    u_xlat8 = u_xlat7 * 0.5;
    u_xlat16_5.x = (u_xlatb6) ? 1.0 : u_xlat8;
    u_xlat16_5.x = (u_xlatb48) ? 0.0 : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb18) ? u_xlat16_5.x : vs_TEXCOORD1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(u_xlat16_5.x<_LightArea);
#else
    u_xlatb18 = u_xlat16_5.x<_LightArea;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb48 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition));
#else
    u_xlatb48 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition);
#endif
    u_xlat16_5.x = (-u_xlat16_5.x) + _LightArea;
    u_xlat16_5.x = u_xlat16_5.x / _ShadowTransitionRange;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(u_xlat16_5.x>=1.0);
#else
    u_xlatb8 = u_xlat16_5.x>=1.0;
#endif
    u_xlat16_23.x = u_xlat16_5.x + 0.00999999978;
    u_xlat16_23.x = log2(u_xlat16_23.x);
    u_xlat23.x = u_xlat16_23.x * _ShadowTransitionSoftness;
    u_xlat23.x = exp2(u_xlat23.x);
    u_xlat23.x = min(u_xlat23.x, 1.0);
    u_xlat8 = (u_xlatb8) ? 1.0 : u_xlat23.x;
    u_xlat8 = (u_xlatb48) ? u_xlat8 : 1.0;
    u_xlat8 = u_xlatb18 ? u_xlat8 : float(0.0);
    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
    u_xlat18 = ((gl_FrontFacing ? 0xffffffffu : uint(0)) != uint(0u)) ? u_xlat18 : 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb23 = !!(0.899999976<u_xlat10_3.x);
#else
    u_xlatb23 = 0.899999976<u_xlat10_3.x;
#endif
    if(u_xlatb23){
        u_xlat23.xy = u_xlat16_0.yy * hlslcc_mtx4x4unity_WorldToCamera[1].xy;
        u_xlat23.xy = hlslcc_mtx4x4unity_WorldToCamera[0].xy * u_xlat16_0.xx + u_xlat23.xy;
        u_xlat9.yz = hlslcc_mtx4x4unity_WorldToCamera[2].xy * u_xlat16_0.zz + u_xlat23.xy;
        u_xlat9.x = u_xlat9.y * _MTMapTileScale;
        u_xlat16_5.xy = u_xlat9.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
        u_xlat10_23 = texture(_MTMap, u_xlat16_5.xy).x;
        u_xlat16_5.x = u_xlat10_23 * _MTMapBrightness;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
        u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
        u_xlat16_20.xyz = _MTMapLightColor.xyz + (-_MTMapDarkColor.xyz);
        u_xlat16_5.xyz = u_xlat16_5.xxx * u_xlat16_20.xyz + _MTMapDarkColor.xyz;
        u_xlat16_5.xyz = u_xlat16_4.xyz * u_xlat16_5.xyz;
        u_xlat16_50 = dot(u_xlat16_0.xyz, u_xlat1.xyz);
        u_xlat16_50 = max(u_xlat16_50, 0.00100000005);
        u_xlat16_50 = log2(u_xlat16_50);
        u_xlat16_50 = u_xlat16_50 * _MTShininess;
        u_xlat16_50 = exp2(u_xlat16_50);
        u_xlat16_50 = u_xlat16_50 * _MTSpecularScale;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_50 = min(max(u_xlat16_50, 0.0), 1.0);
#else
        u_xlat16_50 = clamp(u_xlat16_50, 0.0, 1.0);
#endif
        u_xlat16_10.xyz = vec3(u_xlat16_50) * _MTSpecularColor.xyz;
        u_xlat16_10.xyz = u_xlat10_3.zzz * u_xlat16_10.xyz;
        u_xlat16_11.xyz = u_xlat16_5.xyz * _MTShadowMultiColor.xyz;
        u_xlat16_23.xyz = _MTShadowMultiColor.xyz + vec3(-1.0, -1.0, -1.0);
        u_xlat23.xyz = vec3(u_xlat8) * u_xlat16_23.xyz + vec3(1.0, 1.0, 1.0);
        u_xlat16_12.xyz = (bool(u_xlatb48)) ? u_xlat23.xyz : _MTShadowMultiColor.xyz;
#ifdef UNITY_ADRENO_ES3
        u_xlatb23 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(u_xlat18));
#else
        u_xlatb23 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(u_xlat18);
#endif
        u_xlat16_12.xyz = u_xlat16_5.xyz * u_xlat16_12.xyz;
        u_xlat9.xyz = u_xlat16_5.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
        u_xlat23.xyz = (bool(u_xlatb23)) ? u_xlat16_12.xyz : u_xlat9.xyz;
        u_xlat9.xyz = u_xlat16_10.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
        u_xlat16_23.xyz = u_xlat23.xyz;
        u_xlat16_9.xyz = u_xlat9.xyz;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb13 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex));
#else
        u_xlatb13 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex);
#endif
        u_xlat16_28.xyz = vec3(_FirstShadowMultColor.xxyz.y + (-_CoolShadowMultColor.x), _FirstShadowMultColor.xxyz.z + (-_CoolShadowMultColor.y), float(_FirstShadowMultColor.z) + (-_CoolShadowMultColor.z));
        u_xlat28.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_28.xyz + _CoolShadowMultColor.xyz;
        u_xlat16_5.xyz = (bool(u_xlatb13)) ? u_xlat28.xyz : vec3(_FirstShadowMultColor.x, _FirstShadowMultColor.y, _FirstShadowMultColor.z);
        u_xlat16_11.xyz = u_xlat16_4.xyz * u_xlat16_5.xyz;
        u_xlat16_13.xyz = u_xlat16_5.xyz + vec3(-1.0, -1.0, -1.0);
        u_xlat13.xyz = vec3(u_xlat8) * u_xlat16_13.xyz + vec3(1.0, 1.0, 1.0);
        u_xlat16_5.xyz = (bool(u_xlatb48)) ? u_xlat13.xyz : u_xlat16_5.xyz;
#ifdef UNITY_ADRENO_ES3
        u_xlatb18 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(u_xlat18));
#else
        u_xlatb18 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(u_xlat18);
#endif
        u_xlat16_5.xyz = u_xlat16_4.xyz * u_xlat16_5.xyz;
        u_xlat13.xyz = u_xlat16_4.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
        u_xlat23.xyz = (bool(u_xlatb18)) ? u_xlat16_5.xyz : u_xlat13.xyz;
        u_xlat16_5.x = dot(u_xlat16_0.xyz, u_xlat1.xyz);
        u_xlat16_5.x = max(u_xlat16_5.x, 0.00100000005);
        u_xlat16_5.x = log2(u_xlat16_5.x);
        u_xlat16_5.x = u_xlat16_5.x * _Shininess;
        u_xlat16_5.x = exp2(u_xlat16_5.x);
        u_xlat18 = (-u_xlat10_3.z) + 1.0;
#ifdef UNITY_ADRENO_ES3
        u_xlatb18 = !!(u_xlat18<u_xlat16_5.x);
#else
        u_xlatb18 = u_xlat18<u_xlat16_5.x;
#endif
        u_xlat16_5.xyz = _SpecularColor.xyz * vec3(_SpecMulti);
        u_xlat16_5.xyz = u_xlat10_3.xxx * u_xlat16_5.xyz;
        u_xlat3.xzw = u_xlat16_5.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
        u_xlat9.xyz = mix(vec3(0.0, 0.0, 0.0), u_xlat3.xzw, vec3(bvec3(u_xlatb18)));
        u_xlat16_23.xyz = u_xlat23.xyz;
        u_xlat16_9.xyz = u_xlat9.xyz;
    //ENDIF
    }
    u_xlat16_5.xyz = u_xlat16_4.xyz * _EmissionColor_MHY.xyz;
    u_xlat16_10.xyz = u_xlat16_23.xyz + u_xlat16_9.xyz;
    u_xlat16_11.xyz = u_xlat16_9.xyz + u_xlat16_11.xyz;
    u_xlat16_12.xyz = u_xlat16_5.xyz * vec3(vec3(_EmissionScaler, _EmissionScaler, _EmissionScaler)) + (-u_xlat16_10.xyz);
    u_xlat16_12.xyz = vec3(u_xlat16_45) * u_xlat16_12.xyz + u_xlat16_10.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(vec3(_EmissionScaler, _EmissionScaler, _EmissionScaler)) + (-u_xlat16_11.xyz);
    u_xlat16_5.xyz = vec3(u_xlat16_45) * u_xlat16_5.xyz + u_xlat16_11.xyz;
    u_xlat16_10.xyz = (bool(u_xlatb2)) ? u_xlat16_12.xyz : u_xlat16_10.xyz;
    u_xlat16_5.xyz = (bool(u_xlatb2)) ? u_xlat16_5.xyz : u_xlat16_11.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb3.x = !!(0.00999999978<u_xlat16_45);
#else
    u_xlatb3.x = 0.00999999978<u_xlat16_45;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn));
#else
    u_xlatb18 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn);
#endif
    u_xlat13.xyz = u_xlat16_10.xyz * vec3(vec3(_ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness));
    u_xlat14.xyz = _ES_CharacterMainLightColor.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat14.xyz = vec3(vec3(_ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio)) * u_xlat14.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat13.xyz = u_xlat13.xyz * u_xlat14.xyz;
    u_xlat14.xyz = _ES_CharacterAmbientLightColor.xyz * vec3(_ES_CharacterAmbientLightRatio);
    u_xlat16_11.xyz = u_xlat13.xyz * vec3(10.0, 10.0, 10.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_11.xyz = min(max(u_xlat16_11.xyz, 0.0), 1.0);
#else
    u_xlat16_11.xyz = clamp(u_xlat16_11.xyz, 0.0, 1.0);
#endif
    u_xlat13.xyz = u_xlat14.xyz * u_xlat16_11.xyz + u_xlat13.xyz;
    u_xlat16_11.xyz = (bool(u_xlatb18)) ? u_xlat13.xyz : u_xlat16_10.xyz;
    u_xlat16_12.xyz = u_xlat16_10.xyz + (-u_xlat16_11.xyz);
    u_xlat16_12.xyz = vec3(u_xlat16_45) * u_xlat16_12.xyz + u_xlat16_11.xyz;
    u_xlat16_10.xyz = (-u_xlat16_5.xyz) + u_xlat16_10.xyz;
    u_xlat16_10.xyz = vec3(u_xlat16_45) * u_xlat16_10.xyz + u_xlat16_5.xyz;
    u_xlat16_1.xyz = (u_xlatb3.x) ? u_xlat16_12.xyz : u_xlat16_11.xyz;
    u_xlat16_5.xyz = (u_xlatb3.x) ? u_xlat16_10.xyz : u_xlat16_5.xyz;
    u_xlat16_50 = max(u_xlat16_1.z, u_xlat16_1.y);
    u_xlat16_2.w = max(u_xlat16_1.x, u_xlat16_50);
#ifdef UNITY_ADRENO_ES3
    u_xlatb3.x = !!(1.0<u_xlat16_2.w);
#else
    u_xlatb3.x = 1.0<u_xlat16_2.w;
#endif
    u_xlat16_2.xyz = u_xlat16_1.xyz / u_xlat16_2.www;
    u_xlat16_1.w = 1.0;
    u_xlat16_1 = (u_xlatb3.x) ? u_xlat16_2 : u_xlat16_1;
    u_xlat16_50 = min(u_xlat16_1.w, 1.10000002);
    u_xlat16_10.x = u_xlat16_1.w + (-u_xlat16_50);
    u_xlat16_45 = u_xlat16_45 * u_xlat16_10.x + u_xlat16_50;
    SV_Target1.w = u_xlat16_45 * 0.0500000007;
    SV_Target0.xyz = u_xlat16_0.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb3.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb3.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_0.x = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb3.x) ? u_xlat16_0.x : u_xlat16_5.z;
    SV_Target0.w = 0.0470588244;
    SV_Target1.xyz = u_xlat16_1.xyz;
    SV_Target2.xy = u_xlat16_5.xy;
    SV_Target2.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "MSAA_INTERPOLATION" "TOON_SPECULAR_ON" "BACK_FACE_ON" "METAL_MAT" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec3 mhy_AvatarLightDir;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump float u_xlat16_4;
float u_xlat16;
void main()
{
    u_xlat0.x = hlslcc_mtx4x4unity_ObjectToWorld[0].y;
    u_xlat0.y = hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat0.z = hlslcc_mtx4x4unity_ObjectToWorld[2].y;
    u_xlat1.xyw = (-_WorldSpaceCameraPos.xyz) + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat0.w = u_xlat1.y;
    u_xlat2.xyz = in_POSITION0.xyz;
    u_xlat2.w = 1.0;
    u_xlat0.x = dot(u_xlat0, u_xlat2);
    u_xlat0 = u_xlat0.xxxx * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat3.w = u_xlat1.x;
    u_xlat3.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;
    u_xlat3.y = hlslcc_mtx4x4unity_ObjectToWorld[1].x;
    u_xlat3.z = hlslcc_mtx4x4unity_ObjectToWorld[2].x;
    u_xlat3.x = dot(u_xlat3, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat3.xxxx + u_xlat0;
    u_xlat1.x = hlslcc_mtx4x4unity_ObjectToWorld[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_ObjectToWorld[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_ObjectToWorld[2].z;
    u_xlat1.x = dot(u_xlat1, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat1.xxxx + u_xlat0;
    u_xlat1.x = hlslcc_mtx4x4unity_ObjectToWorld[0].w;
    u_xlat1.y = hlslcc_mtx4x4unity_ObjectToWorld[1].w;
    u_xlat1.z = hlslcc_mtx4x4unity_ObjectToWorld[2].w;
    u_xlat1.w = hlslcc_mtx4x4unity_ObjectToWorld[3].w;
    u_xlat1.x = dot(u_xlat1, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[3] * u_xlat1.xxxx + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat16 = inversesqrt(u_xlat16);
    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
    u_xlat16_4 = dot(u_xlat1.xyz, mhy_AvatarLightDir.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    vs_TEXCOORD1.w = u_xlat16_4 * 0.497500002 + 0.5;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.zw = u_xlat0.zw;
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD3.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD5.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToCamera[4];
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	mediump vec4 _Color;
uniform 	float _MainTexAlphaUse;
uniform 	mediump float _MainTexAlphaCutoff;
uniform 	float _UseVertexColorAO;
uniform 	mediump float _LightArea;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	float _UseCoolShadowColorOrTex;
uniform 	mediump vec3 _CoolShadowMultColor;
uniform 	float _UseShadowTransition;
uniform 	float _ShadowTransitionRange;
uniform 	float _ShadowTransitionSoftness;
uniform 	mediump vec3 _SpecularColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump float _EmissionScaler;
uniform 	mediump vec3 _EmissionColor_MHY;
uniform 	mediump float _MTMapBrightness;
uniform 	float _MTMapTileScale;
uniform 	mediump vec3 _MTMapLightColor;
uniform 	mediump vec3 _MTMapDarkColor;
uniform 	mediump vec3 _MTShadowMultiColor;
uniform 	mediump float _MTShininess;
uniform 	mediump vec3 _MTSpecularColor;
uniform 	mediump float _MTSpecularScale;
uniform 	float _ES_CharacterAmbientLightOn;
uniform 	float _ES_CharacterAmbientBrightness;
uniform 	vec3 _ES_CharacterMainLightColor;
uniform 	float _ES_CharacterMainLightBrightness;
uniform 	vec3 _ES_CharacterAmbientLightColor;
uniform 	float _ES_CharacterMainLightRatio;
uniform 	float _ES_CharacterAmbientLightRatio;
uniform 	float _ES_CharacterColorTone;
uniform 	vec3 mhy_AvatarLightDir;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MTMap;
in mediump vec4 vs_COLOR0;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec2 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec2 u_xlat10_0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec4 u_xlat16_2;
float u_xlat3;
lowp vec4 u_xlat10_3;
bool u_xlatb3;
mediump vec3 u_xlat16_4;
mediump float u_xlat16_5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
vec3 u_xlat11;
mediump vec3 u_xlat16_11;
vec3 u_xlat12;
mediump vec3 u_xlat16_12;
vec3 u_xlat13;
vec3 u_xlat17;
bool u_xlatb17;
mediump vec3 u_xlat16_20;
vec2 u_xlat28;
bvec2 u_xlatb28;
float u_xlat31;
bool u_xlatb31;
mediump float u_xlat16_43;
bool u_xlatb44;
float u_xlat45;
mediump float u_xlat16_45;
lowp float u_xlat10_45;
bool u_xlatb45;
mediump float u_xlat16_48;
void main()
{
    u_xlat0.xy = dFdx(vs_TEXCOORD0.xy);
    u_xlat28.xy = dFdy(vs_TEXCOORD0.xy);
    u_xlat0.xy = u_xlat28.xy + u_xlat0.xy;
    u_xlat28.xy = (-u_xlat0.xy) * vec2(0.25, 0.25) + vs_TEXCOORD0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25) + vs_TEXCOORD0.xy;
    u_xlat0.xy = (int(gl_SampleID) != 0) ? u_xlat28.xy : u_xlat0.xy;
    u_xlat16_1.xyz = (uint((gl_FrontFacing ? 0xffffffffu : uint(0))) != uint(0u)) ? vs_TEXCOORD1.xyz : (-vs_TEXCOORD1.xyz);
    u_xlat2.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat28.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat28.x = inversesqrt(u_xlat28.x);
    u_xlat2.xyz = u_xlat2.xyz * u_xlat28.xxx + mhy_AvatarLightDir.xyz;
    u_xlat28.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat28.x = inversesqrt(u_xlat28.x);
    u_xlat2.xyz = u_xlat28.xxx * u_xlat2.xyz;
    u_xlat10_3 = textureLod(_MainTex, u_xlat0.xy, 0.0);
    u_xlatb28.xy = equal(vec4(_MainTexAlphaUse), vec4(1.0, 2.0, 1.0, 2.0)).xy;
    u_xlat16_43 = u_xlat10_3.w + (-_MainTexAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb44 = !!(u_xlat16_43<0.0);
#else
    u_xlatb44 = u_xlat16_43<0.0;
#endif
    u_xlatb28.x = u_xlatb28.x && u_xlatb44;
    if((int(u_xlatb28.x) * int(0xffffffffu))!=0){discard;}
    u_xlat10_0.xy = textureLod(_LightMapTex, u_xlat0.xy, 0.0).xz;
    u_xlat16_4.xyz = u_xlat10_3.xyz * _Color.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb28.x = !!(0.00999999978<u_xlat10_3.w);
#else
    u_xlatb28.x = 0.00999999978<u_xlat10_3.w;
#endif
    u_xlatb28.x = u_xlatb28.x && u_xlatb28.y;
    u_xlat16_5 = (u_xlatb28.x) ? u_xlat10_3.w : 0.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorAO));
#else
    u_xlatb3 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorAO);
#endif
    u_xlat16_6.x = vs_COLOR0.x * 0.5;
    u_xlat16_6.x = (u_xlatb3) ? u_xlat16_6.x : 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb17 = !!(u_xlat16_6.x<0.0500000007);
#else
    u_xlatb17 = u_xlat16_6.x<0.0500000007;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb31 = !!(0.949999988<u_xlat16_6.x);
#else
    u_xlatb31 = 0.949999988<u_xlat16_6.x;
#endif
    u_xlat45 = u_xlat16_6.x + vs_TEXCOORD1.w;
    u_xlat45 = u_xlat45 * 0.5;
    u_xlat16_6.x = (u_xlatb31) ? 1.0 : u_xlat45;
    u_xlat16_6.x = (u_xlatb17) ? 0.0 : u_xlat16_6.x;
    u_xlat16_6.x = (u_xlatb3) ? u_xlat16_6.x : vs_TEXCOORD1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(u_xlat16_6.x<_LightArea);
#else
    u_xlatb3 = u_xlat16_6.x<_LightArea;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb17 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition));
#else
    u_xlatb17 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition);
#endif
    u_xlat16_6.x = (-u_xlat16_6.x) + _LightArea;
    u_xlat16_6.x = u_xlat16_6.x / _ShadowTransitionRange;
#ifdef UNITY_ADRENO_ES3
    u_xlatb31 = !!(u_xlat16_6.x>=1.0);
#else
    u_xlatb31 = u_xlat16_6.x>=1.0;
#endif
    u_xlat16_45 = u_xlat16_6.x + 0.00999999978;
    u_xlat16_45 = log2(u_xlat16_45);
    u_xlat45 = u_xlat16_45 * _ShadowTransitionSoftness;
    u_xlat45 = exp2(u_xlat45);
    u_xlat45 = min(u_xlat45, 1.0);
    u_xlat31 = (u_xlatb31) ? 1.0 : u_xlat45;
    u_xlat31 = (u_xlatb17) ? u_xlat31 : 1.0;
    u_xlat31 = u_xlatb3 ? u_xlat31 : float(0.0);
    u_xlat3 = u_xlatb3 ? 1.0 : float(0.0);
    u_xlat3 = ((gl_FrontFacing ? 0xffffffffu : uint(0)) != uint(0u)) ? u_xlat3 : 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb45 = !!(0.899999976<u_xlat10_0.x);
#else
    u_xlatb45 = 0.899999976<u_xlat10_0.x;
#endif
    if(u_xlatb45){
        u_xlat7.xy = u_xlat16_1.yy * hlslcc_mtx4x4unity_WorldToCamera[1].xy;
        u_xlat7.xy = hlslcc_mtx4x4unity_WorldToCamera[0].xy * u_xlat16_1.xx + u_xlat7.xy;
        u_xlat7.yz = hlslcc_mtx4x4unity_WorldToCamera[2].xy * u_xlat16_1.zz + u_xlat7.xy;
        u_xlat7.x = u_xlat7.y * _MTMapTileScale;
        u_xlat16_6.xy = u_xlat7.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
        u_xlat10_45 = texture(_MTMap, u_xlat16_6.xy, -1.0).x;
        u_xlat16_6.x = u_xlat10_45 * _MTMapBrightness;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
        u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
        u_xlat16_20.xyz = _MTMapLightColor.xyz + (-_MTMapDarkColor.xyz);
        u_xlat16_6.xyz = u_xlat16_6.xxx * u_xlat16_20.xyz + _MTMapDarkColor.xyz;
        u_xlat16_6.xyz = u_xlat16_4.xyz * u_xlat16_6.xyz;
        u_xlat16_48 = dot(u_xlat16_1.xyz, u_xlat2.xyz);
        u_xlat16_48 = max(u_xlat16_48, 0.00100000005);
        u_xlat16_48 = log2(u_xlat16_48);
        u_xlat16_48 = u_xlat16_48 * _MTShininess;
        u_xlat16_48 = exp2(u_xlat16_48);
        u_xlat16_48 = u_xlat16_48 * _MTSpecularScale;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_48 = min(max(u_xlat16_48, 0.0), 1.0);
#else
        u_xlat16_48 = clamp(u_xlat16_48, 0.0, 1.0);
#endif
        u_xlat16_8.xyz = vec3(u_xlat16_48) * _MTSpecularColor.xyz;
        u_xlat16_8.xyz = u_xlat10_0.yyy * u_xlat16_8.xyz;
        u_xlat16_9.xyz = u_xlat16_6.xyz * _MTShadowMultiColor.xyz;
        u_xlat16_7.xyz = _MTShadowMultiColor.xyz + vec3(-1.0, -1.0, -1.0);
        u_xlat7.xyz = vec3(u_xlat31) * u_xlat16_7.xyz + vec3(1.0, 1.0, 1.0);
        u_xlat16_10.xyz = (bool(u_xlatb17)) ? u_xlat7.xyz : _MTShadowMultiColor.xyz;
#ifdef UNITY_ADRENO_ES3
        u_xlatb45 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(u_xlat3));
#else
        u_xlatb45 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(u_xlat3);
#endif
        u_xlat16_10.xyz = u_xlat16_6.xyz * u_xlat16_10.xyz;
        u_xlat7.xyz = u_xlat16_6.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
        u_xlat7.xyz = (bool(u_xlatb45)) ? u_xlat16_10.xyz : u_xlat7.xyz;
        u_xlat11.xyz = u_xlat16_8.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
        u_xlat16_7.xyz = u_xlat7.xyz;
        u_xlat16_11.xyz = u_xlat11.xyz;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb45 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex));
#else
        u_xlatb45 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex);
#endif
        u_xlat16_12.xyz = vec3(_FirstShadowMultColor.xxyz.y + (-_CoolShadowMultColor.x), _FirstShadowMultColor.xxyz.z + (-_CoolShadowMultColor.y), float(_FirstShadowMultColor.z) + (-_CoolShadowMultColor.z));
        u_xlat12.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_12.xyz + _CoolShadowMultColor.xyz;
        u_xlat16_6.xyz = (bool(u_xlatb45)) ? u_xlat12.xyz : vec3(_FirstShadowMultColor.x, _FirstShadowMultColor.y, _FirstShadowMultColor.z);
        u_xlat16_9.xyz = u_xlat16_4.xyz * u_xlat16_6.xyz;
        u_xlat16_12.xyz = u_xlat16_6.xyz + vec3(-1.0, -1.0, -1.0);
        u_xlat12.xyz = vec3(u_xlat31) * u_xlat16_12.xyz + vec3(1.0, 1.0, 1.0);
        u_xlat16_6.xyz = (bool(u_xlatb17)) ? u_xlat12.xyz : u_xlat16_6.xyz;
#ifdef UNITY_ADRENO_ES3
        u_xlatb3 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(u_xlat3));
#else
        u_xlatb3 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(u_xlat3);
#endif
        u_xlat16_6.xyz = u_xlat16_4.xyz * u_xlat16_6.xyz;
        u_xlat17.xyz = u_xlat16_4.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
        u_xlat7.xyz = (bool(u_xlatb3)) ? u_xlat16_6.xyz : u_xlat17.xyz;
        u_xlat16_6.x = dot(u_xlat16_1.xyz, u_xlat2.xyz);
        u_xlat16_6.x = max(u_xlat16_6.x, 0.00100000005);
        u_xlat16_6.x = log2(u_xlat16_6.x);
        u_xlat16_6.x = u_xlat16_6.x * _Shininess;
        u_xlat16_6.x = exp2(u_xlat16_6.x);
        u_xlat3 = (-u_xlat10_0.y) + 1.0;
#ifdef UNITY_ADRENO_ES3
        u_xlatb3 = !!(u_xlat3<u_xlat16_6.x);
#else
        u_xlatb3 = u_xlat3<u_xlat16_6.x;
#endif
        u_xlat16_6.xyz = _SpecularColor.xyz * vec3(_SpecMulti);
        u_xlat16_6.xyz = u_xlat10_0.xxx * u_xlat16_6.xyz;
        u_xlat17.xyz = u_xlat16_6.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
        u_xlat11.xyz = mix(vec3(0.0, 0.0, 0.0), u_xlat17.xyz, vec3(bvec3(u_xlatb3)));
        u_xlat16_7.xyz = u_xlat7.xyz;
        u_xlat16_11.xyz = u_xlat11.xyz;
    //ENDIF
    }
    u_xlat16_6.xyz = u_xlat16_4.xyz * _EmissionColor_MHY.xyz;
    u_xlat16_8.xyz = u_xlat16_7.xyz + u_xlat16_11.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz + u_xlat16_11.xyz;
    u_xlat16_10.xyz = u_xlat16_6.xyz * vec3(vec3(_EmissionScaler, _EmissionScaler, _EmissionScaler)) + (-u_xlat16_8.xyz);
    u_xlat16_10.xyz = vec3(u_xlat16_5) * u_xlat16_10.xyz + u_xlat16_8.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(vec3(_EmissionScaler, _EmissionScaler, _EmissionScaler)) + (-u_xlat16_9.xyz);
    u_xlat16_6.xyz = vec3(u_xlat16_5) * u_xlat16_6.xyz + u_xlat16_9.xyz;
    u_xlat16_8.xyz = (u_xlatb28.x) ? u_xlat16_10.xyz : u_xlat16_8.xyz;
    u_xlat16_6.xyz = (u_xlatb28.x) ? u_xlat16_6.xyz : u_xlat16_9.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(0.00999999978<u_xlat16_5);
#else
    u_xlatb3 = 0.00999999978<u_xlat16_5;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb17 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn));
#else
    u_xlatb17 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn);
#endif
    u_xlat12.xyz = u_xlat16_8.xyz * vec3(vec3(_ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness));
    u_xlat13.xyz = _ES_CharacterMainLightColor.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat13.xyz = vec3(vec3(_ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio)) * u_xlat13.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat12.xyz = u_xlat12.xyz * u_xlat13.xyz;
    u_xlat13.xyz = _ES_CharacterAmbientLightColor.xyz * vec3(_ES_CharacterAmbientLightRatio);
    u_xlat16_9.xyz = u_xlat12.xyz * vec3(10.0, 10.0, 10.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_9.xyz = min(max(u_xlat16_9.xyz, 0.0), 1.0);
#else
    u_xlat16_9.xyz = clamp(u_xlat16_9.xyz, 0.0, 1.0);
#endif
    u_xlat12.xyz = u_xlat13.xyz * u_xlat16_9.xyz + u_xlat12.xyz;
    u_xlat16_9.xyz = (bool(u_xlatb17)) ? u_xlat12.xyz : u_xlat16_8.xyz;
    u_xlat16_10.xyz = u_xlat16_8.xyz + (-u_xlat16_9.xyz);
    u_xlat16_10.xyz = vec3(u_xlat16_5) * u_xlat16_10.xyz + u_xlat16_9.xyz;
    u_xlat16_8.xyz = (-u_xlat16_6.xyz) + u_xlat16_8.xyz;
    u_xlat16_8.xyz = vec3(u_xlat16_5) * u_xlat16_8.xyz + u_xlat16_6.xyz;
    u_xlat16_0.xyz = (bool(u_xlatb3)) ? u_xlat16_10.xyz : u_xlat16_9.xyz;
    u_xlat16_6.xyz = (bool(u_xlatb3)) ? u_xlat16_8.xyz : u_xlat16_6.xyz;
    u_xlat16_48 = max(u_xlat16_0.z, u_xlat16_0.y);
    u_xlat16_2.w = max(u_xlat16_0.x, u_xlat16_48);
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(1.0<u_xlat16_2.w);
#else
    u_xlatb3 = 1.0<u_xlat16_2.w;
#endif
    u_xlat16_2.xyz = u_xlat16_0.xyz / u_xlat16_2.www;
    u_xlat16_0.w = 1.0;
    u_xlat16_0 = (bool(u_xlatb3)) ? u_xlat16_2 : u_xlat16_0;
    u_xlat16_48 = min(u_xlat16_0.w, 1.10000002);
    u_xlat16_8.x = u_xlat16_0.w + (-u_xlat16_48);
    u_xlat16_48 = u_xlat16_5 * u_xlat16_8.x + u_xlat16_48;
    SV_Target1.w = u_xlat16_48 * 0.0500000007;
    SV_Target0.xyz = u_xlat16_1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb3 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_48 = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb3) ? u_xlat16_48 : u_xlat16_6.z;
    SV_Target0.w = 0.0470588244;
    SV_Target1.xyz = u_xlat16_0.xyz;
    SV_Target2.xy = u_xlat16_6.xy;
    SV_Target2.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "LINE_INTERPOLATION" "TOON_SPECULAR_ON" "BACK_FACE_ON" "METAL_MAT" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec3 mhy_AvatarLightDir;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump float u_xlat16_4;
float u_xlat16;
void main()
{
    u_xlat0.x = hlslcc_mtx4x4unity_ObjectToWorld[0].y;
    u_xlat0.y = hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat0.z = hlslcc_mtx4x4unity_ObjectToWorld[2].y;
    u_xlat1.xyw = (-_WorldSpaceCameraPos.xyz) + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat0.w = u_xlat1.y;
    u_xlat2.xyz = in_POSITION0.xyz;
    u_xlat2.w = 1.0;
    u_xlat0.x = dot(u_xlat0, u_xlat2);
    u_xlat0 = u_xlat0.xxxx * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat3.w = u_xlat1.x;
    u_xlat3.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;
    u_xlat3.y = hlslcc_mtx4x4unity_ObjectToWorld[1].x;
    u_xlat3.z = hlslcc_mtx4x4unity_ObjectToWorld[2].x;
    u_xlat3.x = dot(u_xlat3, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat3.xxxx + u_xlat0;
    u_xlat1.x = hlslcc_mtx4x4unity_ObjectToWorld[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_ObjectToWorld[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_ObjectToWorld[2].z;
    u_xlat1.x = dot(u_xlat1, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat1.xxxx + u_xlat0;
    u_xlat1.x = hlslcc_mtx4x4unity_ObjectToWorld[0].w;
    u_xlat1.y = hlslcc_mtx4x4unity_ObjectToWorld[1].w;
    u_xlat1.z = hlslcc_mtx4x4unity_ObjectToWorld[2].w;
    u_xlat1.w = hlslcc_mtx4x4unity_ObjectToWorld[3].w;
    u_xlat1.x = dot(u_xlat1, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[3] * u_xlat1.xxxx + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat16 = inversesqrt(u_xlat16);
    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
    u_xlat16_4 = dot(u_xlat1.xyz, mhy_AvatarLightDir.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    vs_TEXCOORD1.w = u_xlat16_4 * 0.497500002 + 0.5;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.zw = u_xlat0.zw;
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD3.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD5.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToCamera[4];
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	mediump vec4 _Color;
uniform 	float _MainTexAlphaUse;
uniform 	mediump float _MainTexAlphaCutoff;
uniform 	float _UseVertexColorAO;
uniform 	mediump float _LightArea;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	float _UseCoolShadowColorOrTex;
uniform 	mediump vec3 _CoolShadowMultColor;
uniform 	float _UseShadowTransition;
uniform 	float _ShadowTransitionRange;
uniform 	float _ShadowTransitionSoftness;
uniform 	mediump vec3 _SpecularColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump float _EmissionScaler;
uniform 	mediump vec3 _EmissionColor_MHY;
uniform 	mediump float _MTMapBrightness;
uniform 	float _MTMapTileScale;
uniform 	mediump vec3 _MTMapLightColor;
uniform 	mediump vec3 _MTMapDarkColor;
uniform 	mediump vec3 _MTShadowMultiColor;
uniform 	mediump float _MTShininess;
uniform 	mediump vec3 _MTSpecularColor;
uniform 	mediump float _MTSpecularScale;
uniform 	float _ES_CharacterAmbientLightOn;
uniform 	float _ES_CharacterAmbientBrightness;
uniform 	vec3 _ES_CharacterMainLightColor;
uniform 	float _ES_CharacterMainLightBrightness;
uniform 	vec3 _ES_CharacterAmbientLightColor;
uniform 	float _ES_CharacterMainLightRatio;
uniform 	float _ES_CharacterAmbientLightRatio;
uniform 	float _ES_CharacterColorTone;
uniform 	vec3 mhy_AvatarLightDir;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MTMap;
in mediump vec4 vs_COLOR0;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
mediump vec3 u_xlat16_0;
vec3 u_xlat1;
mediump vec4 u_xlat16_1;
mediump vec4 u_xlat16_2;
lowp vec4 u_xlat10_2;
bool u_xlatb2;
vec4 u_xlat3;
lowp vec3 u_xlat10_3;
bvec2 u_xlatb3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
bool u_xlatb6;
float u_xlat7;
float u_xlat8;
bool u_xlatb8;
vec3 u_xlat9;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
mediump vec3 u_xlat16_11;
mediump vec3 u_xlat16_12;
vec3 u_xlat13;
mediump vec3 u_xlat16_13;
bool u_xlatb13;
vec3 u_xlat14;
float u_xlat18;
bool u_xlatb18;
mediump vec3 u_xlat16_20;
vec3 u_xlat23;
mediump vec3 u_xlat16_23;
lowp float u_xlat10_23;
bool u_xlatb23;
vec3 u_xlat28;
mediump vec3 u_xlat16_28;
mediump float u_xlat16_45;
float u_xlat46;
bool u_xlatb46;
bool u_xlatb48;
mediump float u_xlat16_49;
mediump float u_xlat16_50;
void main()
{
    u_xlat16_0.xyz = (uint((gl_FrontFacing ? 0xffffffffu : uint(0))) != uint(0u)) ? vs_TEXCOORD1.xyz : (-vs_TEXCOORD1.xyz);
    u_xlat1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat46 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat46 = inversesqrt(u_xlat46);
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat46) + mhy_AvatarLightDir.xyz;
    u_xlat46 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat46 = inversesqrt(u_xlat46);
    u_xlat1.xyz = vec3(u_xlat46) * u_xlat1.xyz;
    u_xlat10_2 = texture(_MainTex, vs_TEXCOORD0.xy, -1.0);
    u_xlatb3.xy = equal(vec4(_MainTexAlphaUse), vec4(1.0, 2.0, 0.0, 0.0)).xy;
    u_xlat16_45 = u_xlat10_2.w + (-_MainTexAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb46 = !!(u_xlat16_45<0.0);
#else
    u_xlatb46 = u_xlat16_45<0.0;
#endif
    u_xlatb46 = u_xlatb3.x && u_xlatb46;
    if((int(u_xlatb46) * int(0xffffffffu))!=0){discard;}
    u_xlat10_3.xz = texture(_LightMapTex, vs_TEXCOORD0.xy, -1.0).xz;
    u_xlat16_4.xyz = u_xlat10_2.xyz * _Color.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb46 = !!(0.00999999978<u_xlat10_2.w);
#else
    u_xlatb46 = 0.00999999978<u_xlat10_2.w;
#endif
    u_xlatb2 = u_xlatb46 && u_xlatb3.y;
    u_xlat16_45 = (u_xlatb2) ? u_xlat10_2.w : 0.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorAO));
#else
    u_xlatb18 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorAO);
#endif
    u_xlat16_49 = vs_COLOR0.x * 0.5;
    u_xlat16_5.x = (u_xlatb18) ? u_xlat16_49 : 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb48 = !!(u_xlat16_5.x<0.0500000007);
#else
    u_xlatb48 = u_xlat16_5.x<0.0500000007;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.949999988<u_xlat16_5.x);
#else
    u_xlatb6 = 0.949999988<u_xlat16_5.x;
#endif
    u_xlat7 = u_xlat16_5.x + vs_TEXCOORD1.w;
    u_xlat8 = u_xlat7 * 0.5;
    u_xlat16_5.x = (u_xlatb6) ? 1.0 : u_xlat8;
    u_xlat16_5.x = (u_xlatb48) ? 0.0 : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb18) ? u_xlat16_5.x : vs_TEXCOORD1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(u_xlat16_5.x<_LightArea);
#else
    u_xlatb18 = u_xlat16_5.x<_LightArea;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb48 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition));
#else
    u_xlatb48 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition);
#endif
    u_xlat16_5.x = (-u_xlat16_5.x) + _LightArea;
    u_xlat16_5.x = u_xlat16_5.x / _ShadowTransitionRange;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(u_xlat16_5.x>=1.0);
#else
    u_xlatb8 = u_xlat16_5.x>=1.0;
#endif
    u_xlat16_23.x = u_xlat16_5.x + 0.00999999978;
    u_xlat16_23.x = log2(u_xlat16_23.x);
    u_xlat23.x = u_xlat16_23.x * _ShadowTransitionSoftness;
    u_xlat23.x = exp2(u_xlat23.x);
    u_xlat23.x = min(u_xlat23.x, 1.0);
    u_xlat8 = (u_xlatb8) ? 1.0 : u_xlat23.x;
    u_xlat8 = (u_xlatb48) ? u_xlat8 : 1.0;
    u_xlat8 = u_xlatb18 ? u_xlat8 : float(0.0);
    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
    u_xlat18 = ((gl_FrontFacing ? 0xffffffffu : uint(0)) != uint(0u)) ? u_xlat18 : 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb23 = !!(0.899999976<u_xlat10_3.x);
#else
    u_xlatb23 = 0.899999976<u_xlat10_3.x;
#endif
    if(u_xlatb23){
        u_xlat23.xy = u_xlat16_0.yy * hlslcc_mtx4x4unity_WorldToCamera[1].xy;
        u_xlat23.xy = hlslcc_mtx4x4unity_WorldToCamera[0].xy * u_xlat16_0.xx + u_xlat23.xy;
        u_xlat9.yz = hlslcc_mtx4x4unity_WorldToCamera[2].xy * u_xlat16_0.zz + u_xlat23.xy;
        u_xlat9.x = u_xlat9.y * _MTMapTileScale;
        u_xlat16_5.xy = u_xlat9.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
        u_xlat10_23 = texture(_MTMap, u_xlat16_5.xy, -1.0).x;
        u_xlat16_5.x = u_xlat10_23 * _MTMapBrightness;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
        u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
        u_xlat16_20.xyz = _MTMapLightColor.xyz + (-_MTMapDarkColor.xyz);
        u_xlat16_5.xyz = u_xlat16_5.xxx * u_xlat16_20.xyz + _MTMapDarkColor.xyz;
        u_xlat16_5.xyz = u_xlat16_4.xyz * u_xlat16_5.xyz;
        u_xlat16_50 = dot(u_xlat16_0.xyz, u_xlat1.xyz);
        u_xlat16_50 = max(u_xlat16_50, 0.00100000005);
        u_xlat16_50 = log2(u_xlat16_50);
        u_xlat16_50 = u_xlat16_50 * _MTShininess;
        u_xlat16_50 = exp2(u_xlat16_50);
        u_xlat16_50 = u_xlat16_50 * _MTSpecularScale;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_50 = min(max(u_xlat16_50, 0.0), 1.0);
#else
        u_xlat16_50 = clamp(u_xlat16_50, 0.0, 1.0);
#endif
        u_xlat16_10.xyz = vec3(u_xlat16_50) * _MTSpecularColor.xyz;
        u_xlat16_10.xyz = u_xlat10_3.zzz * u_xlat16_10.xyz;
        u_xlat16_11.xyz = u_xlat16_5.xyz * _MTShadowMultiColor.xyz;
        u_xlat16_23.xyz = _MTShadowMultiColor.xyz + vec3(-1.0, -1.0, -1.0);
        u_xlat23.xyz = vec3(u_xlat8) * u_xlat16_23.xyz + vec3(1.0, 1.0, 1.0);
        u_xlat16_12.xyz = (bool(u_xlatb48)) ? u_xlat23.xyz : _MTShadowMultiColor.xyz;
#ifdef UNITY_ADRENO_ES3
        u_xlatb23 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(u_xlat18));
#else
        u_xlatb23 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(u_xlat18);
#endif
        u_xlat16_12.xyz = u_xlat16_5.xyz * u_xlat16_12.xyz;
        u_xlat9.xyz = u_xlat16_5.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
        u_xlat23.xyz = (bool(u_xlatb23)) ? u_xlat16_12.xyz : u_xlat9.xyz;
        u_xlat9.xyz = u_xlat16_10.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
        u_xlat16_23.xyz = u_xlat23.xyz;
        u_xlat16_9.xyz = u_xlat9.xyz;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb13 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex));
#else
        u_xlatb13 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex);
#endif
        u_xlat16_28.xyz = vec3(_FirstShadowMultColor.xxyz.y + (-_CoolShadowMultColor.x), _FirstShadowMultColor.xxyz.z + (-_CoolShadowMultColor.y), float(_FirstShadowMultColor.z) + (-_CoolShadowMultColor.z));
        u_xlat28.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_28.xyz + _CoolShadowMultColor.xyz;
        u_xlat16_5.xyz = (bool(u_xlatb13)) ? u_xlat28.xyz : vec3(_FirstShadowMultColor.x, _FirstShadowMultColor.y, _FirstShadowMultColor.z);
        u_xlat16_11.xyz = u_xlat16_4.xyz * u_xlat16_5.xyz;
        u_xlat16_13.xyz = u_xlat16_5.xyz + vec3(-1.0, -1.0, -1.0);
        u_xlat13.xyz = vec3(u_xlat8) * u_xlat16_13.xyz + vec3(1.0, 1.0, 1.0);
        u_xlat16_5.xyz = (bool(u_xlatb48)) ? u_xlat13.xyz : u_xlat16_5.xyz;
#ifdef UNITY_ADRENO_ES3
        u_xlatb18 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(u_xlat18));
#else
        u_xlatb18 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(u_xlat18);
#endif
        u_xlat16_5.xyz = u_xlat16_4.xyz * u_xlat16_5.xyz;
        u_xlat13.xyz = u_xlat16_4.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
        u_xlat23.xyz = (bool(u_xlatb18)) ? u_xlat16_5.xyz : u_xlat13.xyz;
        u_xlat16_5.x = dot(u_xlat16_0.xyz, u_xlat1.xyz);
        u_xlat16_5.x = max(u_xlat16_5.x, 0.00100000005);
        u_xlat16_5.x = log2(u_xlat16_5.x);
        u_xlat16_5.x = u_xlat16_5.x * _Shininess;
        u_xlat16_5.x = exp2(u_xlat16_5.x);
        u_xlat18 = (-u_xlat10_3.z) + 1.0;
#ifdef UNITY_ADRENO_ES3
        u_xlatb18 = !!(u_xlat18<u_xlat16_5.x);
#else
        u_xlatb18 = u_xlat18<u_xlat16_5.x;
#endif
        u_xlat16_5.xyz = _SpecularColor.xyz * vec3(_SpecMulti);
        u_xlat16_5.xyz = u_xlat10_3.xxx * u_xlat16_5.xyz;
        u_xlat3.xzw = u_xlat16_5.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
        u_xlat9.xyz = mix(vec3(0.0, 0.0, 0.0), u_xlat3.xzw, vec3(bvec3(u_xlatb18)));
        u_xlat16_23.xyz = u_xlat23.xyz;
        u_xlat16_9.xyz = u_xlat9.xyz;
    //ENDIF
    }
    u_xlat16_5.xyz = u_xlat16_4.xyz * _EmissionColor_MHY.xyz;
    u_xlat16_10.xyz = u_xlat16_23.xyz + u_xlat16_9.xyz;
    u_xlat16_11.xyz = u_xlat16_9.xyz + u_xlat16_11.xyz;
    u_xlat16_12.xyz = u_xlat16_5.xyz * vec3(vec3(_EmissionScaler, _EmissionScaler, _EmissionScaler)) + (-u_xlat16_10.xyz);
    u_xlat16_12.xyz = vec3(u_xlat16_45) * u_xlat16_12.xyz + u_xlat16_10.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(vec3(_EmissionScaler, _EmissionScaler, _EmissionScaler)) + (-u_xlat16_11.xyz);
    u_xlat16_5.xyz = vec3(u_xlat16_45) * u_xlat16_5.xyz + u_xlat16_11.xyz;
    u_xlat16_10.xyz = (bool(u_xlatb2)) ? u_xlat16_12.xyz : u_xlat16_10.xyz;
    u_xlat16_5.xyz = (bool(u_xlatb2)) ? u_xlat16_5.xyz : u_xlat16_11.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb3.x = !!(0.00999999978<u_xlat16_45);
#else
    u_xlatb3.x = 0.00999999978<u_xlat16_45;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn));
#else
    u_xlatb18 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn);
#endif
    u_xlat13.xyz = u_xlat16_10.xyz * vec3(vec3(_ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness));
    u_xlat14.xyz = _ES_CharacterMainLightColor.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat14.xyz = vec3(vec3(_ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio)) * u_xlat14.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat13.xyz = u_xlat13.xyz * u_xlat14.xyz;
    u_xlat14.xyz = _ES_CharacterAmbientLightColor.xyz * vec3(_ES_CharacterAmbientLightRatio);
    u_xlat16_11.xyz = u_xlat13.xyz * vec3(10.0, 10.0, 10.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_11.xyz = min(max(u_xlat16_11.xyz, 0.0), 1.0);
#else
    u_xlat16_11.xyz = clamp(u_xlat16_11.xyz, 0.0, 1.0);
#endif
    u_xlat13.xyz = u_xlat14.xyz * u_xlat16_11.xyz + u_xlat13.xyz;
    u_xlat16_11.xyz = (bool(u_xlatb18)) ? u_xlat13.xyz : u_xlat16_10.xyz;
    u_xlat16_12.xyz = u_xlat16_10.xyz + (-u_xlat16_11.xyz);
    u_xlat16_12.xyz = vec3(u_xlat16_45) * u_xlat16_12.xyz + u_xlat16_11.xyz;
    u_xlat16_10.xyz = (-u_xlat16_5.xyz) + u_xlat16_10.xyz;
    u_xlat16_10.xyz = vec3(u_xlat16_45) * u_xlat16_10.xyz + u_xlat16_5.xyz;
    u_xlat16_1.xyz = (u_xlatb3.x) ? u_xlat16_12.xyz : u_xlat16_11.xyz;
    u_xlat16_5.xyz = (u_xlatb3.x) ? u_xlat16_10.xyz : u_xlat16_5.xyz;
    u_xlat16_50 = max(u_xlat16_1.z, u_xlat16_1.y);
    u_xlat16_2.w = max(u_xlat16_1.x, u_xlat16_50);
#ifdef UNITY_ADRENO_ES3
    u_xlatb3.x = !!(1.0<u_xlat16_2.w);
#else
    u_xlatb3.x = 1.0<u_xlat16_2.w;
#endif
    u_xlat16_2.xyz = u_xlat16_1.xyz / u_xlat16_2.www;
    u_xlat16_1.w = 1.0;
    u_xlat16_1 = (u_xlatb3.x) ? u_xlat16_2 : u_xlat16_1;
    u_xlat16_50 = min(u_xlat16_1.w, 1.10000002);
    u_xlat16_10.x = u_xlat16_1.w + (-u_xlat16_50);
    u_xlat16_45 = u_xlat16_45 * u_xlat16_10.x + u_xlat16_50;
    SV_Target1.w = u_xlat16_45 * 0.0500000007;
    SV_Target0.xyz = u_xlat16_0.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb3.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb3.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_0.x = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb3.x) ? u_xlat16_0.x : u_xlat16_5.z;
    SV_Target0.w = 0.0470588244;
    SV_Target1.xyz = u_xlat16_1.xyz;
    SV_Target2.xy = u_xlat16_5.xy;
    SV_Target2.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "TOON_SPECULAR_ON" "NORMAL_MAP_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
float u_xlat12;
void main()
{
    u_xlat0.x = hlslcc_mtx4x4unity_ObjectToWorld[0].y;
    u_xlat0.y = hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat0.z = hlslcc_mtx4x4unity_ObjectToWorld[2].y;
    u_xlat1.xyw = (-_WorldSpaceCameraPos.xyz) + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat0.w = u_xlat1.y;
    u_xlat2.xyz = in_POSITION0.xyz;
    u_xlat2.w = 1.0;
    u_xlat0.x = dot(u_xlat0, u_xlat2);
    u_xlat0 = u_xlat0.xxxx * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat3.w = u_xlat1.x;
    u_xlat3.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;
    u_xlat3.y = hlslcc_mtx4x4unity_ObjectToWorld[1].x;
    u_xlat3.z = hlslcc_mtx4x4unity_ObjectToWorld[2].x;
    u_xlat3.x = dot(u_xlat3, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat3.xxxx + u_xlat0;
    u_xlat1.x = hlslcc_mtx4x4unity_ObjectToWorld[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_ObjectToWorld[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_ObjectToWorld[2].z;
    u_xlat1.x = dot(u_xlat1, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat1.xxxx + u_xlat0;
    u_xlat1.x = hlslcc_mtx4x4unity_ObjectToWorld[0].w;
    u_xlat1.y = hlslcc_mtx4x4unity_ObjectToWorld[1].w;
    u_xlat1.z = hlslcc_mtx4x4unity_ObjectToWorld[2].w;
    u_xlat1.w = hlslcc_mtx4x4unity_ObjectToWorld[3].w;
    u_xlat1.x = dot(u_xlat1, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[3] * u_xlat1.xxxx + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD1 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.zw = u_xlat0.zw;
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD3.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
    u_xlat12 = in_TANGENT0.w * unity_WorldTransformParams.w;
    u_xlat2.xyz = vec3(u_xlat12) * u_xlat2.xyz;
    vs_TEXCOORD4.y = u_xlat2.x;
    vs_TEXCOORD4.x = u_xlat1.z;
    vs_TEXCOORD4.z = u_xlat0.y;
    vs_TEXCOORD5.x = u_xlat1.x;
    vs_TEXCOORD6.x = u_xlat1.y;
    vs_TEXCOORD5.z = u_xlat0.z;
    vs_TEXCOORD6.z = u_xlat0.x;
    vs_TEXCOORD5.y = u_xlat2.y;
    vs_TEXCOORD6.y = u_xlat2.z;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	mediump vec4 _Color;
uniform 	float _MainTexAlphaUse;
uniform 	mediump float _MainTexAlphaCutoff;
uniform 	mediump float _BumpScale;
uniform 	float _UseVertexColorAO;
uniform 	mediump float _LightArea;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	float _UseCoolShadowColorOrTex;
uniform 	mediump vec3 _CoolShadowMultColor;
uniform 	float _UseShadowTransition;
uniform 	float _ShadowTransitionRange;
uniform 	float _ShadowTransitionSoftness;
uniform 	mediump vec3 _SpecularColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump float _EmissionScaler;
uniform 	mediump vec3 _EmissionColor_MHY;
uniform 	float _ES_CharacterAmbientLightOn;
uniform 	float _ES_CharacterAmbientBrightness;
uniform 	vec3 _ES_CharacterMainLightColor;
uniform 	float _ES_CharacterMainLightBrightness;
uniform 	vec3 _ES_CharacterAmbientLightColor;
uniform 	float _ES_CharacterMainLightRatio;
uniform 	float _ES_CharacterAmbientLightRatio;
uniform 	float _ES_CharacterColorTone;
uniform 	vec3 mhy_AvatarLightDir;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MainTex;
in mediump vec4 vs_COLOR0;
in highp vec2 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD5;
in highp vec3 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec4 u_xlat0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
vec3 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
bool u_xlatb1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump vec4 u_xlat16_3;
vec3 u_xlat4;
mediump vec3 u_xlat16_4;
bool u_xlatb4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
vec3 u_xlat9;
bool u_xlatb9;
float u_xlat18;
mediump float u_xlat16_18;
bool u_xlatb18;
float u_xlat27;
bool u_xlatb27;
mediump float u_xlat16_29;
bool u_xlatb30;
mediump float u_xlat16_32;
mediump float u_xlat16_33;
void main()
{
    u_xlatb0.xy = equal(vec4(_MainTexAlphaUse), vec4(1.0, 2.0, 0.0, 0.0)).xy;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy, -1.0);
    u_xlat16_2.x = u_xlat10_1.w + (-_MainTexAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(u_xlat16_2.x<0.0);
#else
    u_xlatb18 = u_xlat16_2.x<0.0;
#endif
    u_xlatb0.x = u_xlatb0.x && u_xlatb18;
    if((int(u_xlatb0.x) * int(0xffffffffu))!=0){discard;}
    u_xlat10_0.xzw = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xzw * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_2.xy = u_xlat16_2.xy * vec2(vec2(_BumpScale, _BumpScale));
    u_xlat3.x = dot(vs_TEXCOORD4.xyz, u_xlat16_2.xyz);
    u_xlat3.y = dot(vs_TEXCOORD5.xyz, u_xlat16_2.xyz);
    u_xlat3.z = dot(vs_TEXCOORD6.xyz, u_xlat16_2.xyz);
    u_xlat16_2.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat16_2.x = inversesqrt(u_xlat16_2.x);
    u_xlat16_2.xyz = u_xlat16_2.xxx * u_xlat3.xyz;
    SV_Target0.xyz = u_xlat16_2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0470588244;
    u_xlat0.xzw = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat0.xzw = u_xlat0.xzw * u_xlat3.xxx + mhy_AvatarLightDir.xyz;
    u_xlat3.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat0.xzw = u_xlat0.xzw * u_xlat3.xxx;
    u_xlat16_29 = dot(u_xlat16_2.xyz, u_xlat0.xzw);
    u_xlat16_2.x = dot(u_xlat16_2.xyz, mhy_AvatarLightDir.xyz);
    u_xlat0.x = u_xlat16_2.x * 0.497500002 + 0.5;
    u_xlat16_2.x = max(u_xlat16_29, 0.00100000005);
    u_xlat16_2.x = log2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * _Shininess;
    u_xlat16_2.x = exp2(u_xlat16_2.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(0.5<u_xlat16_2.x);
#else
    u_xlatb18 = 0.5<u_xlat16_2.x;
#endif
    u_xlat16_2.xyz = _SpecularColor.xyz * vec3(_SpecMulti);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(0.5, 0.5, 0.5);
    u_xlat3.xyz = u_xlat16_2.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
    u_xlat3.xyz = mix(vec3(0.0, 0.0, 0.0), u_xlat3.xyz, vec3(bvec3(u_xlatb18)));
    u_xlat16_2.x = vs_COLOR0.x * 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorAO));
#else
    u_xlatb18 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorAO);
#endif
    u_xlat16_2.x = (u_xlatb18) ? u_xlat16_2.x : 0.5;
    u_xlat27 = u_xlat0.x + u_xlat16_2.x;
    u_xlat27 = u_xlat27 * 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(0.949999988<u_xlat16_2.x);
#else
    u_xlatb30 = 0.949999988<u_xlat16_2.x;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(u_xlat16_2.x<0.0500000007);
#else
    u_xlatb4 = u_xlat16_2.x<0.0500000007;
#endif
    u_xlat16_2.x = (u_xlatb30) ? 1.0 : u_xlat27;
    u_xlat16_2.x = (u_xlatb4) ? 0.0 : u_xlat16_2.x;
    u_xlat16_2.x = (u_xlatb18) ? u_xlat16_2.x : u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(u_xlat16_2.x<_LightArea);
#else
    u_xlatb0.x = u_xlat16_2.x<_LightArea;
#endif
    u_xlat16_2.x = (-u_xlat16_2.x) + _LightArea;
    u_xlat16_2.x = u_xlat16_2.x / _ShadowTransitionRange;
    u_xlat16_18 = u_xlat16_2.x + 0.00999999978;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(u_xlat16_2.x>=1.0);
#else
    u_xlatb27 = u_xlat16_2.x>=1.0;
#endif
    u_xlat16_18 = log2(u_xlat16_18);
    u_xlat18 = u_xlat16_18 * _ShadowTransitionSoftness;
    u_xlat18 = exp2(u_xlat18);
    u_xlat18 = min(u_xlat18, 1.0);
    u_xlat18 = (u_xlatb27) ? 1.0 : u_xlat18;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition));
#else
    u_xlatb27 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition);
#endif
    u_xlat18 = (u_xlatb27) ? u_xlat18 : 1.0;
    u_xlat18 = u_xlatb0.x ? u_xlat18 : float(0.0);
    u_xlat16_4.xyz = vec3(_FirstShadowMultColor.xxyz.y + (-_CoolShadowMultColor.x), _FirstShadowMultColor.xxyz.z + (-_CoolShadowMultColor.y), float(_FirstShadowMultColor.z) + (-_CoolShadowMultColor.z));
    u_xlat4.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_4.xyz + _CoolShadowMultColor.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex));
#else
    u_xlatb30 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex);
#endif
    u_xlat16_2.xyz = (bool(u_xlatb30)) ? u_xlat4.xyz : vec3(_FirstShadowMultColor.x, _FirstShadowMultColor.y, _FirstShadowMultColor.z);
    u_xlat16_4.xyz = u_xlat16_2.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat4.xyz = vec3(u_xlat18) * u_xlat16_4.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_5.xyz = (bool(u_xlatb27)) ? u_xlat4.xyz : u_xlat16_2.xyz;
    u_xlat16_6.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_6.xyz;
    u_xlat1.xyz = u_xlat16_6.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
    u_xlat0.xzw = (u_xlatb0.x) ? u_xlat16_5.xyz : u_xlat1.xyz;
    u_xlat16_5.xyz = u_xlat3.xyz + u_xlat0.xzw;
    u_xlat16_2.xyz = u_xlat16_6.xyz * u_xlat16_2.xyz + u_xlat3.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * _EmissionColor_MHY.xyz;
    u_xlat16_7.xyz = u_xlat16_6.xyz * vec3(vec3(_EmissionScaler, _EmissionScaler, _EmissionScaler)) + (-u_xlat16_5.xyz);
    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(vec3(_EmissionScaler, _EmissionScaler, _EmissionScaler)) + (-u_xlat16_2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(0.00999999978<u_xlat10_1.w);
#else
    u_xlatb0.x = 0.00999999978<u_xlat10_1.w;
#endif
    u_xlatb0.x = u_xlatb0.x && u_xlatb0.y;
    u_xlat16_29 = (u_xlatb0.x) ? u_xlat10_1.w : 0.0;
    u_xlat16_7.xyz = vec3(u_xlat16_29) * u_xlat16_7.xyz + u_xlat16_5.xyz;
    u_xlat16_5.xyz = (u_xlatb0.x) ? u_xlat16_7.xyz : u_xlat16_5.xyz;
    u_xlat9.xyz = u_xlat16_5.xyz * vec3(vec3(_ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness));
    u_xlat1.xyz = _ES_CharacterMainLightColor.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat1.xyz = vec3(vec3(_ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio)) * u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat9.xyz = u_xlat9.xyz * u_xlat1.xyz;
    u_xlat16_7.xyz = u_xlat9.xyz * vec3(10.0, 10.0, 10.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.xyz = min(max(u_xlat16_7.xyz, 0.0), 1.0);
#else
    u_xlat16_7.xyz = clamp(u_xlat16_7.xyz, 0.0, 1.0);
#endif
    u_xlat1.xyz = _ES_CharacterAmbientLightColor.xyz * vec3(_ES_CharacterAmbientLightRatio);
    u_xlat9.xyz = u_xlat1.xyz * u_xlat16_7.xyz + u_xlat9.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn));
#else
    u_xlatb1 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn);
#endif
    u_xlat16_7.xyz = (bool(u_xlatb1)) ? u_xlat9.xyz : u_xlat16_5.xyz;
    u_xlat16_8.xyz = u_xlat16_5.xyz + (-u_xlat16_7.xyz);
    u_xlat16_8.xyz = vec3(u_xlat16_29) * u_xlat16_8.xyz + u_xlat16_7.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(0.00999999978<u_xlat16_29);
#else
    u_xlatb9 = 0.00999999978<u_xlat16_29;
#endif
    u_xlat16_1.xyz = (bool(u_xlatb9)) ? u_xlat16_8.xyz : u_xlat16_7.xyz;
    u_xlat16_32 = max(u_xlat16_1.z, u_xlat16_1.y);
    u_xlat16_3.w = max(u_xlat16_1.x, u_xlat16_32);
    u_xlat16_3.xyz = u_xlat16_1.xyz / u_xlat16_3.www;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(1.0<u_xlat16_3.w);
#else
    u_xlatb18 = 1.0<u_xlat16_3.w;
#endif
    u_xlat16_1.w = 1.0;
    u_xlat16_1 = (bool(u_xlatb18)) ? u_xlat16_3 : u_xlat16_1;
    u_xlat16_32 = min(u_xlat16_1.w, 1.10000002);
    u_xlat16_33 = u_xlat16_1.w + (-u_xlat16_32);
    SV_Target1.xyz = u_xlat16_1.xyz;
    u_xlat16_32 = u_xlat16_29 * u_xlat16_33 + u_xlat16_32;
    SV_Target1.w = u_xlat16_32 * 0.0500000007;
    u_xlat16_6.xyz = vec3(u_xlat16_29) * u_xlat16_6.xyz + u_xlat16_2.xyz;
    u_xlat16_2.xyz = (u_xlatb0.x) ? u_xlat16_6.xyz : u_xlat16_2.xyz;
    u_xlat16_5.xyz = (-u_xlat16_2.xyz) + u_xlat16_5.xyz;
    u_xlat16_5.xyz = vec3(u_xlat16_29) * u_xlat16_5.xyz + u_xlat16_2.xyz;
    u_xlat16_2.xyz = (bool(u_xlatb9)) ? u_xlat16_5.xyz : u_xlat16_2.xyz;
    SV_Target2.xy = u_xlat16_2.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_2.x = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb0.x) ? u_xlat16_2.x : u_xlat16_2.z;
    SV_Target2.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "MSAA_INTERPOLATION" "TOON_SPECULAR_ON" "NORMAL_MAP_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
float u_xlat12;
void main()
{
    u_xlat0.x = hlslcc_mtx4x4unity_ObjectToWorld[0].y;
    u_xlat0.y = hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat0.z = hlslcc_mtx4x4unity_ObjectToWorld[2].y;
    u_xlat1.xyw = (-_WorldSpaceCameraPos.xyz) + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat0.w = u_xlat1.y;
    u_xlat2.xyz = in_POSITION0.xyz;
    u_xlat2.w = 1.0;
    u_xlat0.x = dot(u_xlat0, u_xlat2);
    u_xlat0 = u_xlat0.xxxx * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat3.w = u_xlat1.x;
    u_xlat3.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;
    u_xlat3.y = hlslcc_mtx4x4unity_ObjectToWorld[1].x;
    u_xlat3.z = hlslcc_mtx4x4unity_ObjectToWorld[2].x;
    u_xlat3.x = dot(u_xlat3, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat3.xxxx + u_xlat0;
    u_xlat1.x = hlslcc_mtx4x4unity_ObjectToWorld[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_ObjectToWorld[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_ObjectToWorld[2].z;
    u_xlat1.x = dot(u_xlat1, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat1.xxxx + u_xlat0;
    u_xlat1.x = hlslcc_mtx4x4unity_ObjectToWorld[0].w;
    u_xlat1.y = hlslcc_mtx4x4unity_ObjectToWorld[1].w;
    u_xlat1.z = hlslcc_mtx4x4unity_ObjectToWorld[2].w;
    u_xlat1.w = hlslcc_mtx4x4unity_ObjectToWorld[3].w;
    u_xlat1.x = dot(u_xlat1, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[3] * u_xlat1.xxxx + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD1 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.zw = u_xlat0.zw;
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD3.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
    u_xlat12 = in_TANGENT0.w * unity_WorldTransformParams.w;
    u_xlat2.xyz = vec3(u_xlat12) * u_xlat2.xyz;
    vs_TEXCOORD4.y = u_xlat2.x;
    vs_TEXCOORD4.x = u_xlat1.z;
    vs_TEXCOORD4.z = u_xlat0.y;
    vs_TEXCOORD5.x = u_xlat1.x;
    vs_TEXCOORD6.x = u_xlat1.y;
    vs_TEXCOORD5.z = u_xlat0.z;
    vs_TEXCOORD6.z = u_xlat0.x;
    vs_TEXCOORD5.y = u_xlat2.y;
    vs_TEXCOORD6.y = u_xlat2.z;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	mediump vec4 _Color;
uniform 	float _MainTexAlphaUse;
uniform 	mediump float _MainTexAlphaCutoff;
uniform 	mediump float _BumpScale;
uniform 	float _UseVertexColorAO;
uniform 	mediump float _LightArea;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	float _UseCoolShadowColorOrTex;
uniform 	mediump vec3 _CoolShadowMultColor;
uniform 	float _UseShadowTransition;
uniform 	float _ShadowTransitionRange;
uniform 	float _ShadowTransitionSoftness;
uniform 	mediump vec3 _SpecularColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump float _EmissionScaler;
uniform 	mediump vec3 _EmissionColor_MHY;
uniform 	float _ES_CharacterAmbientLightOn;
uniform 	float _ES_CharacterAmbientBrightness;
uniform 	vec3 _ES_CharacterMainLightColor;
uniform 	float _ES_CharacterMainLightBrightness;
uniform 	vec3 _ES_CharacterAmbientLightColor;
uniform 	float _ES_CharacterMainLightRatio;
uniform 	float _ES_CharacterAmbientLightRatio;
uniform 	float _ES_CharacterColorTone;
uniform 	vec3 mhy_AvatarLightDir;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MainTex;
in mediump vec4 vs_COLOR0;
in highp vec2 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD5;
in highp vec3 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec4 u_xlat0;
lowp vec3 u_xlat10_0;
bool u_xlatb0;
vec3 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
bool u_xlatb1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump vec4 u_xlat16_3;
vec3 u_xlat4;
mediump vec3 u_xlat16_4;
bool u_xlatb4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
vec3 u_xlat9;
mediump float u_xlat16_9;
bvec2 u_xlatb9;
vec2 u_xlat18;
bool u_xlatb18;
float u_xlat27;
bool u_xlatb27;
mediump float u_xlat16_29;
bool u_xlatb30;
mediump float u_xlat16_32;
mediump float u_xlat16_33;
void main()
{
    u_xlat0.xy = dFdx(vs_TEXCOORD0.xy);
    u_xlat18.xy = dFdy(vs_TEXCOORD0.xy);
    u_xlat0.xy = u_xlat18.xy + u_xlat0.xy;
    u_xlat18.xy = (-u_xlat0.xy) * vec2(0.25, 0.25) + vs_TEXCOORD0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25) + vs_TEXCOORD0.xy;
    u_xlat0.xy = (int(gl_SampleID) != 0) ? u_xlat18.xy : u_xlat0.xy;
    u_xlat10_1 = textureLod(_MainTex, u_xlat0.xy, 0.0);
    u_xlat10_0.xyz = textureLod(_BumpMap, u_xlat0.xy, 0.0).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_29 = u_xlat10_1.w + (-_MainTexAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat16_29<0.0);
#else
    u_xlatb0 = u_xlat16_29<0.0;
#endif
    u_xlatb9.xy = equal(vec4(_MainTexAlphaUse), vec4(1.0, 2.0, 0.0, 0.0)).xy;
    u_xlatb0 = u_xlatb9.x && u_xlatb0;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat16_2.xy = u_xlat16_2.xy * vec2(vec2(_BumpScale, _BumpScale));
    u_xlat3.x = dot(vs_TEXCOORD4.xyz, u_xlat16_2.xyz);
    u_xlat3.y = dot(vs_TEXCOORD5.xyz, u_xlat16_2.xyz);
    u_xlat3.z = dot(vs_TEXCOORD6.xyz, u_xlat16_2.xyz);
    u_xlat16_2.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat16_2.x = inversesqrt(u_xlat16_2.x);
    u_xlat16_2.xyz = u_xlat16_2.xxx * u_xlat3.xyz;
    SV_Target0.xyz = u_xlat16_2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0470588244;
    u_xlat0.xyw = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3.x = dot(u_xlat0.xyw, u_xlat0.xyw);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat0.xyw = u_xlat0.xyw * u_xlat3.xxx + mhy_AvatarLightDir.xyz;
    u_xlat3.x = dot(u_xlat0.xyw, u_xlat0.xyw);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat0.xyw = u_xlat0.xyw * u_xlat3.xxx;
    u_xlat16_29 = dot(u_xlat16_2.xyz, u_xlat0.xyw);
    u_xlat16_2.x = dot(u_xlat16_2.xyz, mhy_AvatarLightDir.xyz);
    u_xlat0.x = u_xlat16_2.x * 0.497500002 + 0.5;
    u_xlat16_2.x = max(u_xlat16_29, 0.00100000005);
    u_xlat16_2.x = log2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * _Shininess;
    u_xlat16_2.x = exp2(u_xlat16_2.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb9.x = !!(0.5<u_xlat16_2.x);
#else
    u_xlatb9.x = 0.5<u_xlat16_2.x;
#endif
    u_xlat16_2.xyz = _SpecularColor.xyz * vec3(_SpecMulti);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(0.5, 0.5, 0.5);
    u_xlat3.xyz = u_xlat16_2.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
    u_xlat3.xyz = mix(vec3(0.0, 0.0, 0.0), u_xlat3.xyz, vec3(u_xlatb9.xxx));
    u_xlat16_2.x = vs_COLOR0.x * 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb9.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorAO));
#else
    u_xlatb9.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorAO);
#endif
    u_xlat16_2.x = (u_xlatb9.x) ? u_xlat16_2.x : 0.5;
    u_xlat27 = u_xlat0.x + u_xlat16_2.x;
    u_xlat27 = u_xlat27 * 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(0.949999988<u_xlat16_2.x);
#else
    u_xlatb30 = 0.949999988<u_xlat16_2.x;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(u_xlat16_2.x<0.0500000007);
#else
    u_xlatb4 = u_xlat16_2.x<0.0500000007;
#endif
    u_xlat16_2.x = (u_xlatb30) ? 1.0 : u_xlat27;
    u_xlat16_2.x = (u_xlatb4) ? 0.0 : u_xlat16_2.x;
    u_xlat16_2.x = (u_xlatb9.x) ? u_xlat16_2.x : u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat16_2.x<_LightArea);
#else
    u_xlatb0 = u_xlat16_2.x<_LightArea;
#endif
    u_xlat16_2.x = (-u_xlat16_2.x) + _LightArea;
    u_xlat16_2.x = u_xlat16_2.x / _ShadowTransitionRange;
    u_xlat16_9 = u_xlat16_2.x + 0.00999999978;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(u_xlat16_2.x>=1.0);
#else
    u_xlatb27 = u_xlat16_2.x>=1.0;
#endif
    u_xlat16_9 = log2(u_xlat16_9);
    u_xlat9.x = u_xlat16_9 * _ShadowTransitionSoftness;
    u_xlat9.x = exp2(u_xlat9.x);
    u_xlat9.x = min(u_xlat9.x, 1.0);
    u_xlat9.x = (u_xlatb27) ? 1.0 : u_xlat9.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition));
#else
    u_xlatb27 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition);
#endif
    u_xlat9.x = (u_xlatb27) ? u_xlat9.x : 1.0;
    u_xlat9.x = u_xlatb0 ? u_xlat9.x : float(0.0);
    u_xlat16_4.xyz = vec3(_FirstShadowMultColor.xxyz.y + (-_CoolShadowMultColor.x), _FirstShadowMultColor.xxyz.z + (-_CoolShadowMultColor.y), float(_FirstShadowMultColor.z) + (-_CoolShadowMultColor.z));
    u_xlat4.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_4.xyz + _CoolShadowMultColor.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex));
#else
    u_xlatb30 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex);
#endif
    u_xlat16_2.xyz = (bool(u_xlatb30)) ? u_xlat4.xyz : vec3(_FirstShadowMultColor.x, _FirstShadowMultColor.y, _FirstShadowMultColor.z);
    u_xlat16_4.xyz = u_xlat16_2.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat4.xyz = u_xlat9.xxx * u_xlat16_4.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_5.xyz = (bool(u_xlatb27)) ? u_xlat4.xyz : u_xlat16_2.xyz;
    u_xlat16_6.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_6.xyz;
    u_xlat1.xyz = u_xlat16_6.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
    u_xlat0.xyw = (bool(u_xlatb0)) ? u_xlat16_5.xyz : u_xlat1.xyz;
    u_xlat16_5.xyz = u_xlat3.xyz + u_xlat0.xyw;
    u_xlat16_2.xyz = u_xlat16_6.xyz * u_xlat16_2.xyz + u_xlat3.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * _EmissionColor_MHY.xyz;
    u_xlat16_7.xyz = u_xlat16_6.xyz * vec3(vec3(_EmissionScaler, _EmissionScaler, _EmissionScaler)) + (-u_xlat16_5.xyz);
    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(vec3(_EmissionScaler, _EmissionScaler, _EmissionScaler)) + (-u_xlat16_2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.00999999978<u_xlat10_1.w);
#else
    u_xlatb0 = 0.00999999978<u_xlat10_1.w;
#endif
    u_xlatb0 = u_xlatb0 && u_xlatb9.y;
    u_xlat16_29 = (u_xlatb0) ? u_xlat10_1.w : 0.0;
    u_xlat16_7.xyz = vec3(u_xlat16_29) * u_xlat16_7.xyz + u_xlat16_5.xyz;
    u_xlat16_5.xyz = (bool(u_xlatb0)) ? u_xlat16_7.xyz : u_xlat16_5.xyz;
    u_xlat9.xyz = u_xlat16_5.xyz * vec3(vec3(_ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness));
    u_xlat1.xyz = _ES_CharacterMainLightColor.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat1.xyz = vec3(vec3(_ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio)) * u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat9.xyz = u_xlat9.xyz * u_xlat1.xyz;
    u_xlat16_7.xyz = u_xlat9.xyz * vec3(10.0, 10.0, 10.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.xyz = min(max(u_xlat16_7.xyz, 0.0), 1.0);
#else
    u_xlat16_7.xyz = clamp(u_xlat16_7.xyz, 0.0, 1.0);
#endif
    u_xlat1.xyz = _ES_CharacterAmbientLightColor.xyz * vec3(_ES_CharacterAmbientLightRatio);
    u_xlat9.xyz = u_xlat1.xyz * u_xlat16_7.xyz + u_xlat9.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn));
#else
    u_xlatb1 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn);
#endif
    u_xlat16_7.xyz = (bool(u_xlatb1)) ? u_xlat9.xyz : u_xlat16_5.xyz;
    u_xlat16_8.xyz = u_xlat16_5.xyz + (-u_xlat16_7.xyz);
    u_xlat16_8.xyz = vec3(u_xlat16_29) * u_xlat16_8.xyz + u_xlat16_7.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb9.x = !!(0.00999999978<u_xlat16_29);
#else
    u_xlatb9.x = 0.00999999978<u_xlat16_29;
#endif
    u_xlat16_1.xyz = (u_xlatb9.x) ? u_xlat16_8.xyz : u_xlat16_7.xyz;
    u_xlat16_32 = max(u_xlat16_1.z, u_xlat16_1.y);
    u_xlat16_3.w = max(u_xlat16_1.x, u_xlat16_32);
    u_xlat16_3.xyz = u_xlat16_1.xyz / u_xlat16_3.www;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(1.0<u_xlat16_3.w);
#else
    u_xlatb18 = 1.0<u_xlat16_3.w;
#endif
    u_xlat16_1.w = 1.0;
    u_xlat16_1 = (bool(u_xlatb18)) ? u_xlat16_3 : u_xlat16_1;
    u_xlat16_32 = min(u_xlat16_1.w, 1.10000002);
    u_xlat16_33 = u_xlat16_1.w + (-u_xlat16_32);
    SV_Target1.xyz = u_xlat16_1.xyz;
    u_xlat16_32 = u_xlat16_29 * u_xlat16_33 + u_xlat16_32;
    SV_Target1.w = u_xlat16_32 * 0.0500000007;
    u_xlat16_6.xyz = vec3(u_xlat16_29) * u_xlat16_6.xyz + u_xlat16_2.xyz;
    u_xlat16_2.xyz = (bool(u_xlatb0)) ? u_xlat16_6.xyz : u_xlat16_2.xyz;
    u_xlat16_5.xyz = (-u_xlat16_2.xyz) + u_xlat16_5.xyz;
    u_xlat16_5.xyz = vec3(u_xlat16_29) * u_xlat16_5.xyz + u_xlat16_2.xyz;
    u_xlat16_2.xyz = (u_xlatb9.x) ? u_xlat16_5.xyz : u_xlat16_2.xyz;
    SV_Target2.xy = u_xlat16_2.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_2.x = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb0) ? u_xlat16_2.x : u_xlat16_2.z;
    SV_Target2.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "LINE_INTERPOLATION" "TOON_SPECULAR_ON" "NORMAL_MAP_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
float u_xlat12;
void main()
{
    u_xlat0.x = hlslcc_mtx4x4unity_ObjectToWorld[0].y;
    u_xlat0.y = hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat0.z = hlslcc_mtx4x4unity_ObjectToWorld[2].y;
    u_xlat1.xyw = (-_WorldSpaceCameraPos.xyz) + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat0.w = u_xlat1.y;
    u_xlat2.xyz = in_POSITION0.xyz;
    u_xlat2.w = 1.0;
    u_xlat0.x = dot(u_xlat0, u_xlat2);
    u_xlat0 = u_xlat0.xxxx * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat3.w = u_xlat1.x;
    u_xlat3.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;
    u_xlat3.y = hlslcc_mtx4x4unity_ObjectToWorld[1].x;
    u_xlat3.z = hlslcc_mtx4x4unity_ObjectToWorld[2].x;
    u_xlat3.x = dot(u_xlat3, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat3.xxxx + u_xlat0;
    u_xlat1.x = hlslcc_mtx4x4unity_ObjectToWorld[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_ObjectToWorld[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_ObjectToWorld[2].z;
    u_xlat1.x = dot(u_xlat1, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat1.xxxx + u_xlat0;
    u_xlat1.x = hlslcc_mtx4x4unity_ObjectToWorld[0].w;
    u_xlat1.y = hlslcc_mtx4x4unity_ObjectToWorld[1].w;
    u_xlat1.z = hlslcc_mtx4x4unity_ObjectToWorld[2].w;
    u_xlat1.w = hlslcc_mtx4x4unity_ObjectToWorld[3].w;
    u_xlat1.x = dot(u_xlat1, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[3] * u_xlat1.xxxx + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD1 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.zw = u_xlat0.zw;
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD3.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
    u_xlat12 = in_TANGENT0.w * unity_WorldTransformParams.w;
    u_xlat2.xyz = vec3(u_xlat12) * u_xlat2.xyz;
    vs_TEXCOORD4.y = u_xlat2.x;
    vs_TEXCOORD4.x = u_xlat1.z;
    vs_TEXCOORD4.z = u_xlat0.y;
    vs_TEXCOORD5.x = u_xlat1.x;
    vs_TEXCOORD6.x = u_xlat1.y;
    vs_TEXCOORD5.z = u_xlat0.z;
    vs_TEXCOORD6.z = u_xlat0.x;
    vs_TEXCOORD5.y = u_xlat2.y;
    vs_TEXCOORD6.y = u_xlat2.z;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	mediump vec4 _Color;
uniform 	float _MainTexAlphaUse;
uniform 	mediump float _MainTexAlphaCutoff;
uniform 	mediump float _BumpScale;
uniform 	float _UseVertexColorAO;
uniform 	mediump float _LightArea;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	float _UseCoolShadowColorOrTex;
uniform 	mediump vec3 _CoolShadowMultColor;
uniform 	float _UseShadowTransition;
uniform 	float _ShadowTransitionRange;
uniform 	float _ShadowTransitionSoftness;
uniform 	mediump vec3 _SpecularColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump float _EmissionScaler;
uniform 	mediump vec3 _EmissionColor_MHY;
uniform 	float _ES_CharacterAmbientLightOn;
uniform 	float _ES_CharacterAmbientBrightness;
uniform 	vec3 _ES_CharacterMainLightColor;
uniform 	float _ES_CharacterMainLightBrightness;
uniform 	vec3 _ES_CharacterAmbientLightColor;
uniform 	float _ES_CharacterMainLightRatio;
uniform 	float _ES_CharacterAmbientLightRatio;
uniform 	float _ES_CharacterColorTone;
uniform 	vec3 mhy_AvatarLightDir;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MainTex;
in mediump vec4 vs_COLOR0;
in highp vec2 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD5;
in highp vec3 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec4 u_xlat0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
vec3 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
bool u_xlatb1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump vec4 u_xlat16_3;
vec3 u_xlat4;
mediump vec3 u_xlat16_4;
bool u_xlatb4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
vec3 u_xlat9;
bool u_xlatb9;
float u_xlat18;
mediump float u_xlat16_18;
bool u_xlatb18;
float u_xlat27;
bool u_xlatb27;
mediump float u_xlat16_29;
bool u_xlatb30;
mediump float u_xlat16_32;
mediump float u_xlat16_33;
void main()
{
    u_xlatb0.xy = equal(vec4(_MainTexAlphaUse), vec4(1.0, 2.0, 0.0, 0.0)).xy;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy, -1.0);
    u_xlat16_2.x = u_xlat10_1.w + (-_MainTexAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(u_xlat16_2.x<0.0);
#else
    u_xlatb18 = u_xlat16_2.x<0.0;
#endif
    u_xlatb0.x = u_xlatb0.x && u_xlatb18;
    if((int(u_xlatb0.x) * int(0xffffffffu))!=0){discard;}
    u_xlat10_0.xzw = texture(_BumpMap, vs_TEXCOORD0.xy, -1.0).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xzw * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_2.xy = u_xlat16_2.xy * vec2(vec2(_BumpScale, _BumpScale));
    u_xlat3.x = dot(vs_TEXCOORD4.xyz, u_xlat16_2.xyz);
    u_xlat3.y = dot(vs_TEXCOORD5.xyz, u_xlat16_2.xyz);
    u_xlat3.z = dot(vs_TEXCOORD6.xyz, u_xlat16_2.xyz);
    u_xlat16_2.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat16_2.x = inversesqrt(u_xlat16_2.x);
    u_xlat16_2.xyz = u_xlat16_2.xxx * u_xlat3.xyz;
    SV_Target0.xyz = u_xlat16_2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0470588244;
    u_xlat0.xzw = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat0.xzw = u_xlat0.xzw * u_xlat3.xxx + mhy_AvatarLightDir.xyz;
    u_xlat3.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat0.xzw = u_xlat0.xzw * u_xlat3.xxx;
    u_xlat16_29 = dot(u_xlat16_2.xyz, u_xlat0.xzw);
    u_xlat16_2.x = dot(u_xlat16_2.xyz, mhy_AvatarLightDir.xyz);
    u_xlat0.x = u_xlat16_2.x * 0.497500002 + 0.5;
    u_xlat16_2.x = max(u_xlat16_29, 0.00100000005);
    u_xlat16_2.x = log2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * _Shininess;
    u_xlat16_2.x = exp2(u_xlat16_2.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(0.5<u_xlat16_2.x);
#else
    u_xlatb18 = 0.5<u_xlat16_2.x;
#endif
    u_xlat16_2.xyz = _SpecularColor.xyz * vec3(_SpecMulti);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(0.5, 0.5, 0.5);
    u_xlat3.xyz = u_xlat16_2.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
    u_xlat3.xyz = mix(vec3(0.0, 0.0, 0.0), u_xlat3.xyz, vec3(bvec3(u_xlatb18)));
    u_xlat16_2.x = vs_COLOR0.x * 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorAO));
#else
    u_xlatb18 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorAO);
#endif
    u_xlat16_2.x = (u_xlatb18) ? u_xlat16_2.x : 0.5;
    u_xlat27 = u_xlat0.x + u_xlat16_2.x;
    u_xlat27 = u_xlat27 * 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(0.949999988<u_xlat16_2.x);
#else
    u_xlatb30 = 0.949999988<u_xlat16_2.x;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(u_xlat16_2.x<0.0500000007);
#else
    u_xlatb4 = u_xlat16_2.x<0.0500000007;
#endif
    u_xlat16_2.x = (u_xlatb30) ? 1.0 : u_xlat27;
    u_xlat16_2.x = (u_xlatb4) ? 0.0 : u_xlat16_2.x;
    u_xlat16_2.x = (u_xlatb18) ? u_xlat16_2.x : u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(u_xlat16_2.x<_LightArea);
#else
    u_xlatb0.x = u_xlat16_2.x<_LightArea;
#endif
    u_xlat16_2.x = (-u_xlat16_2.x) + _LightArea;
    u_xlat16_2.x = u_xlat16_2.x / _ShadowTransitionRange;
    u_xlat16_18 = u_xlat16_2.x + 0.00999999978;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(u_xlat16_2.x>=1.0);
#else
    u_xlatb27 = u_xlat16_2.x>=1.0;
#endif
    u_xlat16_18 = log2(u_xlat16_18);
    u_xlat18 = u_xlat16_18 * _ShadowTransitionSoftness;
    u_xlat18 = exp2(u_xlat18);
    u_xlat18 = min(u_xlat18, 1.0);
    u_xlat18 = (u_xlatb27) ? 1.0 : u_xlat18;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition));
#else
    u_xlatb27 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition);
#endif
    u_xlat18 = (u_xlatb27) ? u_xlat18 : 1.0;
    u_xlat18 = u_xlatb0.x ? u_xlat18 : float(0.0);
    u_xlat16_4.xyz = vec3(_FirstShadowMultColor.xxyz.y + (-_CoolShadowMultColor.x), _FirstShadowMultColor.xxyz.z + (-_CoolShadowMultColor.y), float(_FirstShadowMultColor.z) + (-_CoolShadowMultColor.z));
    u_xlat4.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_4.xyz + _CoolShadowMultColor.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex));
#else
    u_xlatb30 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex);
#endif
    u_xlat16_2.xyz = (bool(u_xlatb30)) ? u_xlat4.xyz : vec3(_FirstShadowMultColor.x, _FirstShadowMultColor.y, _FirstShadowMultColor.z);
    u_xlat16_4.xyz = u_xlat16_2.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat4.xyz = vec3(u_xlat18) * u_xlat16_4.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_5.xyz = (bool(u_xlatb27)) ? u_xlat4.xyz : u_xlat16_2.xyz;
    u_xlat16_6.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_6.xyz;
    u_xlat1.xyz = u_xlat16_6.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
    u_xlat0.xzw = (u_xlatb0.x) ? u_xlat16_5.xyz : u_xlat1.xyz;
    u_xlat16_5.xyz = u_xlat3.xyz + u_xlat0.xzw;
    u_xlat16_2.xyz = u_xlat16_6.xyz * u_xlat16_2.xyz + u_xlat3.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * _EmissionColor_MHY.xyz;
    u_xlat16_7.xyz = u_xlat16_6.xyz * vec3(vec3(_EmissionScaler, _EmissionScaler, _EmissionScaler)) + (-u_xlat16_5.xyz);
    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(vec3(_EmissionScaler, _EmissionScaler, _EmissionScaler)) + (-u_xlat16_2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(0.00999999978<u_xlat10_1.w);
#else
    u_xlatb0.x = 0.00999999978<u_xlat10_1.w;
#endif
    u_xlatb0.x = u_xlatb0.x && u_xlatb0.y;
    u_xlat16_29 = (u_xlatb0.x) ? u_xlat10_1.w : 0.0;
    u_xlat16_7.xyz = vec3(u_xlat16_29) * u_xlat16_7.xyz + u_xlat16_5.xyz;
    u_xlat16_5.xyz = (u_xlatb0.x) ? u_xlat16_7.xyz : u_xlat16_5.xyz;
    u_xlat9.xyz = u_xlat16_5.xyz * vec3(vec3(_ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness));
    u_xlat1.xyz = _ES_CharacterMainLightColor.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat1.xyz = vec3(vec3(_ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio)) * u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat9.xyz = u_xlat9.xyz * u_xlat1.xyz;
    u_xlat16_7.xyz = u_xlat9.xyz * vec3(10.0, 10.0, 10.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.xyz = min(max(u_xlat16_7.xyz, 0.0), 1.0);
#else
    u_xlat16_7.xyz = clamp(u_xlat16_7.xyz, 0.0, 1.0);
#endif
    u_xlat1.xyz = _ES_CharacterAmbientLightColor.xyz * vec3(_ES_CharacterAmbientLightRatio);
    u_xlat9.xyz = u_xlat1.xyz * u_xlat16_7.xyz + u_xlat9.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn));
#else
    u_xlatb1 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn);
#endif
    u_xlat16_7.xyz = (bool(u_xlatb1)) ? u_xlat9.xyz : u_xlat16_5.xyz;
    u_xlat16_8.xyz = u_xlat16_5.xyz + (-u_xlat16_7.xyz);
    u_xlat16_8.xyz = vec3(u_xlat16_29) * u_xlat16_8.xyz + u_xlat16_7.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(0.00999999978<u_xlat16_29);
#else
    u_xlatb9 = 0.00999999978<u_xlat16_29;
#endif
    u_xlat16_1.xyz = (bool(u_xlatb9)) ? u_xlat16_8.xyz : u_xlat16_7.xyz;
    u_xlat16_32 = max(u_xlat16_1.z, u_xlat16_1.y);
    u_xlat16_3.w = max(u_xlat16_1.x, u_xlat16_32);
    u_xlat16_3.xyz = u_xlat16_1.xyz / u_xlat16_3.www;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(1.0<u_xlat16_3.w);
#else
    u_xlatb18 = 1.0<u_xlat16_3.w;
#endif
    u_xlat16_1.w = 1.0;
    u_xlat16_1 = (bool(u_xlatb18)) ? u_xlat16_3 : u_xlat16_1;
    u_xlat16_32 = min(u_xlat16_1.w, 1.10000002);
    u_xlat16_33 = u_xlat16_1.w + (-u_xlat16_32);
    SV_Target1.xyz = u_xlat16_1.xyz;
    u_xlat16_32 = u_xlat16_29 * u_xlat16_33 + u_xlat16_32;
    SV_Target1.w = u_xlat16_32 * 0.0500000007;
    u_xlat16_6.xyz = vec3(u_xlat16_29) * u_xlat16_6.xyz + u_xlat16_2.xyz;
    u_xlat16_2.xyz = (u_xlatb0.x) ? u_xlat16_6.xyz : u_xlat16_2.xyz;
    u_xlat16_5.xyz = (-u_xlat16_2.xyz) + u_xlat16_5.xyz;
    u_xlat16_5.xyz = vec3(u_xlat16_29) * u_xlat16_5.xyz + u_xlat16_2.xyz;
    u_xlat16_2.xyz = (bool(u_xlatb9)) ? u_xlat16_5.xyz : u_xlat16_2.xyz;
    SV_Target2.xy = u_xlat16_2.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_2.x = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb0.x) ? u_xlat16_2.x : u_xlat16_2.z;
    SV_Target2.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "TOON_SPECULAR_ON" "METAL_MAT" "NORMAL_MAP_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
float u_xlat12;
void main()
{
    u_xlat0.x = hlslcc_mtx4x4unity_ObjectToWorld[0].y;
    u_xlat0.y = hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat0.z = hlslcc_mtx4x4unity_ObjectToWorld[2].y;
    u_xlat1.xyw = (-_WorldSpaceCameraPos.xyz) + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat0.w = u_xlat1.y;
    u_xlat2.xyz = in_POSITION0.xyz;
    u_xlat2.w = 1.0;
    u_xlat0.x = dot(u_xlat0, u_xlat2);
    u_xlat0 = u_xlat0.xxxx * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat3.w = u_xlat1.x;
    u_xlat3.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;
    u_xlat3.y = hlslcc_mtx4x4unity_ObjectToWorld[1].x;
    u_xlat3.z = hlslcc_mtx4x4unity_ObjectToWorld[2].x;
    u_xlat3.x = dot(u_xlat3, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat3.xxxx + u_xlat0;
    u_xlat1.x = hlslcc_mtx4x4unity_ObjectToWorld[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_ObjectToWorld[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_ObjectToWorld[2].z;
    u_xlat1.x = dot(u_xlat1, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat1.xxxx + u_xlat0;
    u_xlat1.x = hlslcc_mtx4x4unity_ObjectToWorld[0].w;
    u_xlat1.y = hlslcc_mtx4x4unity_ObjectToWorld[1].w;
    u_xlat1.z = hlslcc_mtx4x4unity_ObjectToWorld[2].w;
    u_xlat1.w = hlslcc_mtx4x4unity_ObjectToWorld[3].w;
    u_xlat1.x = dot(u_xlat1, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[3] * u_xlat1.xxxx + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD1 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.zw = u_xlat0.zw;
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD3.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
    u_xlat12 = in_TANGENT0.w * unity_WorldTransformParams.w;
    u_xlat2.xyz = vec3(u_xlat12) * u_xlat2.xyz;
    vs_TEXCOORD4.y = u_xlat2.x;
    vs_TEXCOORD4.x = u_xlat1.z;
    vs_TEXCOORD4.z = u_xlat0.y;
    vs_TEXCOORD5.x = u_xlat1.x;
    vs_TEXCOORD6.x = u_xlat1.y;
    vs_TEXCOORD5.z = u_xlat0.z;
    vs_TEXCOORD6.z = u_xlat0.x;
    vs_TEXCOORD5.y = u_xlat2.y;
    vs_TEXCOORD6.y = u_xlat2.z;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToCamera[4];
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	mediump vec4 _Color;
uniform 	float _MainTexAlphaUse;
uniform 	mediump float _MainTexAlphaCutoff;
uniform 	mediump float _BumpScale;
uniform 	float _UseVertexColorAO;
uniform 	mediump float _LightArea;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	float _UseCoolShadowColorOrTex;
uniform 	mediump vec3 _CoolShadowMultColor;
uniform 	float _UseShadowTransition;
uniform 	float _ShadowTransitionRange;
uniform 	float _ShadowTransitionSoftness;
uniform 	mediump vec3 _SpecularColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump float _EmissionScaler;
uniform 	mediump vec3 _EmissionColor_MHY;
uniform 	mediump float _MTMapBrightness;
uniform 	float _MTMapTileScale;
uniform 	mediump vec3 _MTMapLightColor;
uniform 	mediump vec3 _MTMapDarkColor;
uniform 	mediump vec3 _MTShadowMultiColor;
uniform 	mediump float _MTShininess;
uniform 	mediump vec3 _MTSpecularColor;
uniform 	mediump float _MTSpecularScale;
uniform 	float _ES_CharacterAmbientLightOn;
uniform 	float _ES_CharacterAmbientBrightness;
uniform 	vec3 _ES_CharacterMainLightColor;
uniform 	float _ES_CharacterMainLightBrightness;
uniform 	vec3 _ES_CharacterAmbientLightColor;
uniform 	float _ES_CharacterMainLightRatio;
uniform 	float _ES_CharacterAmbientLightRatio;
uniform 	float _ES_CharacterColorTone;
uniform 	vec3 mhy_AvatarLightDir;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MTMap;
in mediump vec4 vs_COLOR0;
in highp vec2 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD5;
in highp vec3 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec3 u_xlat10_0;
mediump vec3 u_xlat16_1;
mediump vec4 u_xlat16_2;
lowp vec4 u_xlat10_2;
bool u_xlatb2;
vec4 u_xlat3;
lowp vec3 u_xlat10_3;
bvec2 u_xlatb3;
mediump vec3 u_xlat16_4;
mediump float u_xlat16_5;
mediump vec3 u_xlat16_6;
float u_xlat7;
bool u_xlatb7;
vec3 u_xlat8;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
mediump vec3 u_xlat16_11;
vec3 u_xlat12;
mediump vec3 u_xlat16_12;
bool u_xlatb12;
vec3 u_xlat13;
float u_xlat17;
bool u_xlatb17;
mediump vec3 u_xlat16_20;
vec3 u_xlat21;
mediump vec3 u_xlat16_21;
lowp float u_xlat10_21;
bool u_xlatb21;
vec3 u_xlat26;
mediump vec3 u_xlat16_26;
float u_xlat35;
float u_xlat42;
bool u_xlatb42;
mediump float u_xlat16_43;
bool u_xlatb45;
mediump float u_xlat16_48;
void main()
{
    u_xlat10_0.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_1.xy = u_xlat16_1.xy * vec2(vec2(_BumpScale, _BumpScale));
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, u_xlat16_1.xyz);
    u_xlat0.y = dot(vs_TEXCOORD5.xyz, u_xlat16_1.xyz);
    u_xlat0.z = dot(vs_TEXCOORD6.xyz, u_xlat16_1.xyz);
    u_xlat16_1.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat16_1.x = inversesqrt(u_xlat16_1.x);
    u_xlat16_1.xyz = u_xlat0.xyz * u_xlat16_1.xxx;
    u_xlat0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat42 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat42 = inversesqrt(u_xlat42);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat42) + mhy_AvatarLightDir.xyz;
    u_xlat42 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat42 = inversesqrt(u_xlat42);
    u_xlat0.xyz = vec3(u_xlat42) * u_xlat0.xyz;
    u_xlat10_2 = texture(_MainTex, vs_TEXCOORD0.xy, -1.0);
    u_xlatb3.xy = equal(vec4(_MainTexAlphaUse), vec4(1.0, 2.0, 0.0, 0.0)).xy;
    u_xlat16_43 = u_xlat10_2.w + (-_MainTexAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb42 = !!(u_xlat16_43<0.0);
#else
    u_xlatb42 = u_xlat16_43<0.0;
#endif
    u_xlatb3.x = u_xlatb3.x && u_xlatb42;
    if((int(u_xlatb3.x) * int(0xffffffffu))!=0){discard;}
    u_xlat10_3.xz = texture(_LightMapTex, vs_TEXCOORD0.xy, -1.0).xz;
    u_xlat16_4.xyz = u_xlat10_2.xyz * _Color.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(0.00999999978<u_xlat10_2.w);
#else
    u_xlatb2 = 0.00999999978<u_xlat10_2.w;
#endif
    u_xlatb2 = u_xlatb2 && u_xlatb3.y;
    u_xlat16_5 = (u_xlatb2) ? u_xlat10_2.w : 0.0;
    u_xlat16_6.x = dot(u_xlat16_1.xyz, mhy_AvatarLightDir.xyz);
    u_xlat17 = u_xlat16_6.x * 0.497500002 + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb45 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorAO));
#else
    u_xlatb45 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorAO);
#endif
    u_xlat16_6.x = vs_COLOR0.x * 0.5;
    u_xlat16_6.x = (u_xlatb45) ? u_xlat16_6.x : 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(u_xlat16_6.x<0.0500000007);
#else
    u_xlatb7 = u_xlat16_6.x<0.0500000007;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(0.949999988<u_xlat16_6.x);
#else
    u_xlatb21 = 0.949999988<u_xlat16_6.x;
#endif
    u_xlat35 = u_xlat17 + u_xlat16_6.x;
    u_xlat35 = u_xlat35 * 0.5;
    u_xlat16_6.x = (u_xlatb21) ? 1.0 : u_xlat35;
    u_xlat16_6.x = (u_xlatb7) ? 0.0 : u_xlat16_6.x;
    u_xlat16_6.x = (u_xlatb45) ? u_xlat16_6.x : u_xlat17;
#ifdef UNITY_ADRENO_ES3
    u_xlatb17 = !!(u_xlat16_6.x<_LightArea);
#else
    u_xlatb17 = u_xlat16_6.x<_LightArea;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb45 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition));
#else
    u_xlatb45 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition);
#endif
    u_xlat16_6.x = (-u_xlat16_6.x) + _LightArea;
    u_xlat16_6.x = u_xlat16_6.x / _ShadowTransitionRange;
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(u_xlat16_6.x>=1.0);
#else
    u_xlatb7 = u_xlat16_6.x>=1.0;
#endif
    u_xlat16_21.x = u_xlat16_6.x + 0.00999999978;
    u_xlat16_21.x = log2(u_xlat16_21.x);
    u_xlat21.x = u_xlat16_21.x * _ShadowTransitionSoftness;
    u_xlat21.x = exp2(u_xlat21.x);
    u_xlat21.x = min(u_xlat21.x, 1.0);
    u_xlat7 = (u_xlatb7) ? 1.0 : u_xlat21.x;
    u_xlat7 = (u_xlatb45) ? u_xlat7 : 1.0;
    u_xlat7 = u_xlatb17 ? u_xlat7 : float(0.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(0.899999976<u_xlat10_3.x);
#else
    u_xlatb21 = 0.899999976<u_xlat10_3.x;
#endif
    if(u_xlatb21){
        u_xlat21.xy = u_xlat16_1.yy * hlslcc_mtx4x4unity_WorldToCamera[1].xy;
        u_xlat21.xy = hlslcc_mtx4x4unity_WorldToCamera[0].xy * u_xlat16_1.xx + u_xlat21.xy;
        u_xlat8.yz = hlslcc_mtx4x4unity_WorldToCamera[2].xy * u_xlat16_1.zz + u_xlat21.xy;
        u_xlat8.x = u_xlat8.y * _MTMapTileScale;
        u_xlat16_6.xy = u_xlat8.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
        u_xlat10_21 = texture(_MTMap, u_xlat16_6.xy).x;
        u_xlat16_6.x = u_xlat10_21 * _MTMapBrightness;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
        u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
        u_xlat16_20.xyz = _MTMapLightColor.xyz + (-_MTMapDarkColor.xyz);
        u_xlat16_6.xyz = u_xlat16_6.xxx * u_xlat16_20.xyz + _MTMapDarkColor.xyz;
        u_xlat16_6.xyz = u_xlat16_4.xyz * u_xlat16_6.xyz;
        u_xlat16_48 = dot(u_xlat16_1.xyz, u_xlat0.xyz);
        u_xlat16_48 = max(u_xlat16_48, 0.00100000005);
        u_xlat16_48 = log2(u_xlat16_48);
        u_xlat16_48 = u_xlat16_48 * _MTShininess;
        u_xlat16_48 = exp2(u_xlat16_48);
        u_xlat16_48 = u_xlat16_48 * _MTSpecularScale;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_48 = min(max(u_xlat16_48, 0.0), 1.0);
#else
        u_xlat16_48 = clamp(u_xlat16_48, 0.0, 1.0);
#endif
        u_xlat16_9.xyz = vec3(u_xlat16_48) * _MTSpecularColor.xyz;
        u_xlat16_9.xyz = u_xlat10_3.zzz * u_xlat16_9.xyz;
        u_xlat16_10.xyz = u_xlat16_6.xyz * _MTShadowMultiColor.xyz;
        u_xlat16_21.xyz = _MTShadowMultiColor.xyz + vec3(-1.0, -1.0, -1.0);
        u_xlat21.xyz = vec3(u_xlat7) * u_xlat16_21.xyz + vec3(1.0, 1.0, 1.0);
        u_xlat16_11.xyz = (bool(u_xlatb45)) ? u_xlat21.xyz : _MTShadowMultiColor.xyz;
        u_xlat16_11.xyz = u_xlat16_6.xyz * u_xlat16_11.xyz;
        u_xlat21.xyz = u_xlat16_6.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
        u_xlat21.xyz = (bool(u_xlatb17)) ? u_xlat16_11.xyz : u_xlat21.xyz;
        u_xlat8.xyz = u_xlat16_9.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
        u_xlat16_21.xyz = u_xlat21.xyz;
        u_xlat16_8.xyz = u_xlat8.xyz;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb12 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex));
#else
        u_xlatb12 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex);
#endif
        u_xlat16_26.xyz = vec3(_FirstShadowMultColor.xxyz.y + (-_CoolShadowMultColor.x), _FirstShadowMultColor.xxyz.z + (-_CoolShadowMultColor.y), float(_FirstShadowMultColor.z) + (-_CoolShadowMultColor.z));
        u_xlat26.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_26.xyz + _CoolShadowMultColor.xyz;
        u_xlat16_6.xyz = (bool(u_xlatb12)) ? u_xlat26.xyz : vec3(_FirstShadowMultColor.x, _FirstShadowMultColor.y, _FirstShadowMultColor.z);
        u_xlat16_10.xyz = u_xlat16_4.xyz * u_xlat16_6.xyz;
        u_xlat16_12.xyz = u_xlat16_6.xyz + vec3(-1.0, -1.0, -1.0);
        u_xlat12.xyz = vec3(u_xlat7) * u_xlat16_12.xyz + vec3(1.0, 1.0, 1.0);
        u_xlat16_6.xyz = (bool(u_xlatb45)) ? u_xlat12.xyz : u_xlat16_6.xyz;
        u_xlat16_6.xyz = u_xlat16_4.xyz * u_xlat16_6.xyz;
        u_xlat12.xyz = u_xlat16_4.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
        u_xlat21.xyz = (bool(u_xlatb17)) ? u_xlat16_6.xyz : u_xlat12.xyz;
        u_xlat16_6.x = dot(u_xlat16_1.xyz, u_xlat0.xyz);
        u_xlat16_6.x = max(u_xlat16_6.x, 0.00100000005);
        u_xlat16_6.x = log2(u_xlat16_6.x);
        u_xlat16_6.x = u_xlat16_6.x * _Shininess;
        u_xlat16_6.x = exp2(u_xlat16_6.x);
        u_xlat17 = (-u_xlat10_3.z) + 1.0;
#ifdef UNITY_ADRENO_ES3
        u_xlatb17 = !!(u_xlat17<u_xlat16_6.x);
#else
        u_xlatb17 = u_xlat17<u_xlat16_6.x;
#endif
        u_xlat16_6.xyz = _SpecularColor.xyz * vec3(_SpecMulti);
        u_xlat16_6.xyz = u_xlat10_3.xxx * u_xlat16_6.xyz;
        u_xlat3.xzw = u_xlat16_6.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
        u_xlat8.xyz = mix(vec3(0.0, 0.0, 0.0), u_xlat3.xzw, vec3(bvec3(u_xlatb17)));
        u_xlat16_21.xyz = u_xlat21.xyz;
        u_xlat16_8.xyz = u_xlat8.xyz;
    //ENDIF
    }
    u_xlat16_6.xyz = u_xlat16_4.xyz * _EmissionColor_MHY.xyz;
    u_xlat16_9.xyz = u_xlat16_21.xyz + u_xlat16_8.xyz;
    u_xlat16_10.xyz = u_xlat16_8.xyz + u_xlat16_10.xyz;
    u_xlat16_11.xyz = u_xlat16_6.xyz * vec3(vec3(_EmissionScaler, _EmissionScaler, _EmissionScaler)) + (-u_xlat16_9.xyz);
    u_xlat16_11.xyz = vec3(u_xlat16_5) * u_xlat16_11.xyz + u_xlat16_9.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(vec3(_EmissionScaler, _EmissionScaler, _EmissionScaler)) + (-u_xlat16_10.xyz);
    u_xlat16_6.xyz = vec3(u_xlat16_5) * u_xlat16_6.xyz + u_xlat16_10.xyz;
    u_xlat16_9.xyz = (bool(u_xlatb2)) ? u_xlat16_11.xyz : u_xlat16_9.xyz;
    u_xlat16_6.xyz = (bool(u_xlatb2)) ? u_xlat16_6.xyz : u_xlat16_10.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb3.x = !!(0.00999999978<u_xlat16_5);
#else
    u_xlatb3.x = 0.00999999978<u_xlat16_5;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb17 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn));
#else
    u_xlatb17 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn);
#endif
    u_xlat12.xyz = u_xlat16_9.xyz * vec3(vec3(_ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness));
    u_xlat13.xyz = _ES_CharacterMainLightColor.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat13.xyz = vec3(vec3(_ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio)) * u_xlat13.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat12.xyz = u_xlat12.xyz * u_xlat13.xyz;
    u_xlat13.xyz = _ES_CharacterAmbientLightColor.xyz * vec3(_ES_CharacterAmbientLightRatio);
    u_xlat16_10.xyz = u_xlat12.xyz * vec3(10.0, 10.0, 10.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_10.xyz = min(max(u_xlat16_10.xyz, 0.0), 1.0);
#else
    u_xlat16_10.xyz = clamp(u_xlat16_10.xyz, 0.0, 1.0);
#endif
    u_xlat12.xyz = u_xlat13.xyz * u_xlat16_10.xyz + u_xlat12.xyz;
    u_xlat16_10.xyz = (bool(u_xlatb17)) ? u_xlat12.xyz : u_xlat16_9.xyz;
    u_xlat16_11.xyz = u_xlat16_9.xyz + (-u_xlat16_10.xyz);
    u_xlat16_11.xyz = vec3(u_xlat16_5) * u_xlat16_11.xyz + u_xlat16_10.xyz;
    u_xlat16_9.xyz = (-u_xlat16_6.xyz) + u_xlat16_9.xyz;
    u_xlat16_9.xyz = vec3(u_xlat16_5) * u_xlat16_9.xyz + u_xlat16_6.xyz;
    u_xlat16_0.xyz = (u_xlatb3.x) ? u_xlat16_11.xyz : u_xlat16_10.xyz;
    u_xlat16_6.xyz = (u_xlatb3.x) ? u_xlat16_9.xyz : u_xlat16_6.xyz;
    u_xlat16_48 = max(u_xlat16_0.z, u_xlat16_0.y);
    u_xlat16_2.w = max(u_xlat16_0.x, u_xlat16_48);
#ifdef UNITY_ADRENO_ES3
    u_xlatb3.x = !!(1.0<u_xlat16_2.w);
#else
    u_xlatb3.x = 1.0<u_xlat16_2.w;
#endif
    u_xlat16_2.xyz = u_xlat16_0.xyz / u_xlat16_2.www;
    u_xlat16_0.w = 1.0;
    u_xlat16_0 = (u_xlatb3.x) ? u_xlat16_2 : u_xlat16_0;
    u_xlat16_48 = min(u_xlat16_0.w, 1.10000002);
    u_xlat16_9.x = u_xlat16_0.w + (-u_xlat16_48);
    u_xlat16_48 = u_xlat16_5 * u_xlat16_9.x + u_xlat16_48;
    SV_Target1.w = u_xlat16_48 * 0.0500000007;
    SV_Target0.xyz = u_xlat16_1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb3.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb3.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_48 = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb3.x) ? u_xlat16_48 : u_xlat16_6.z;
    SV_Target0.w = 0.0470588244;
    SV_Target1.xyz = u_xlat16_0.xyz;
    SV_Target2.xy = u_xlat16_6.xy;
    SV_Target2.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "MSAA_INTERPOLATION" "TOON_SPECULAR_ON" "METAL_MAT" "NORMAL_MAP_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
float u_xlat12;
void main()
{
    u_xlat0.x = hlslcc_mtx4x4unity_ObjectToWorld[0].y;
    u_xlat0.y = hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat0.z = hlslcc_mtx4x4unity_ObjectToWorld[2].y;
    u_xlat1.xyw = (-_WorldSpaceCameraPos.xyz) + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat0.w = u_xlat1.y;
    u_xlat2.xyz = in_POSITION0.xyz;
    u_xlat2.w = 1.0;
    u_xlat0.x = dot(u_xlat0, u_xlat2);
    u_xlat0 = u_xlat0.xxxx * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat3.w = u_xlat1.x;
    u_xlat3.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;
    u_xlat3.y = hlslcc_mtx4x4unity_ObjectToWorld[1].x;
    u_xlat3.z = hlslcc_mtx4x4unity_ObjectToWorld[2].x;
    u_xlat3.x = dot(u_xlat3, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat3.xxxx + u_xlat0;
    u_xlat1.x = hlslcc_mtx4x4unity_ObjectToWorld[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_ObjectToWorld[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_ObjectToWorld[2].z;
    u_xlat1.x = dot(u_xlat1, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat1.xxxx + u_xlat0;
    u_xlat1.x = hlslcc_mtx4x4unity_ObjectToWorld[0].w;
    u_xlat1.y = hlslcc_mtx4x4unity_ObjectToWorld[1].w;
    u_xlat1.z = hlslcc_mtx4x4unity_ObjectToWorld[2].w;
    u_xlat1.w = hlslcc_mtx4x4unity_ObjectToWorld[3].w;
    u_xlat1.x = dot(u_xlat1, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[3] * u_xlat1.xxxx + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD1 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.zw = u_xlat0.zw;
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD3.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
    u_xlat12 = in_TANGENT0.w * unity_WorldTransformParams.w;
    u_xlat2.xyz = vec3(u_xlat12) * u_xlat2.xyz;
    vs_TEXCOORD4.y = u_xlat2.x;
    vs_TEXCOORD4.x = u_xlat1.z;
    vs_TEXCOORD4.z = u_xlat0.y;
    vs_TEXCOORD5.x = u_xlat1.x;
    vs_TEXCOORD6.x = u_xlat1.y;
    vs_TEXCOORD5.z = u_xlat0.z;
    vs_TEXCOORD6.z = u_xlat0.x;
    vs_TEXCOORD5.y = u_xlat2.y;
    vs_TEXCOORD6.y = u_xlat2.z;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToCamera[4];
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	mediump vec4 _Color;
uniform 	float _MainTexAlphaUse;
uniform 	mediump float _MainTexAlphaCutoff;
uniform 	mediump float _BumpScale;
uniform 	float _UseVertexColorAO;
uniform 	mediump float _LightArea;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	float _UseCoolShadowColorOrTex;
uniform 	mediump vec3 _CoolShadowMultColor;
uniform 	float _UseShadowTransition;
uniform 	float _ShadowTransitionRange;
uniform 	float _ShadowTransitionSoftness;
uniform 	mediump vec3 _SpecularColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump float _EmissionScaler;
uniform 	mediump vec3 _EmissionColor_MHY;
uniform 	mediump float _MTMapBrightness;
uniform 	float _MTMapTileScale;
uniform 	mediump vec3 _MTMapLightColor;
uniform 	mediump vec3 _MTMapDarkColor;
uniform 	mediump vec3 _MTShadowMultiColor;
uniform 	mediump float _MTShininess;
uniform 	mediump vec3 _MTSpecularColor;
uniform 	mediump float _MTSpecularScale;
uniform 	float _ES_CharacterAmbientLightOn;
uniform 	float _ES_CharacterAmbientBrightness;
uniform 	vec3 _ES_CharacterMainLightColor;
uniform 	float _ES_CharacterMainLightBrightness;
uniform 	vec3 _ES_CharacterAmbientLightColor;
uniform 	float _ES_CharacterMainLightRatio;
uniform 	float _ES_CharacterAmbientLightRatio;
uniform 	float _ES_CharacterColorTone;
uniform 	vec3 mhy_AvatarLightDir;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MTMap;
in mediump vec4 vs_COLOR0;
in highp vec2 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD5;
in highp vec3 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec2 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec2 u_xlat10_0;
bool u_xlatb0;
vec3 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
float u_xlat3;
lowp vec4 u_xlat10_3;
bool u_xlatb3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
vec3 u_xlat10;
mediump vec3 u_xlat16_10;
bool u_xlatb10;
float u_xlat11;
bool u_xlatb11;
vec3 u_xlat14;
mediump vec3 u_xlat16_14;
lowp float u_xlat10_14;
bool u_xlatb14;
vec3 u_xlat21;
mediump vec3 u_xlat16_21;
vec2 u_xlat22;
bvec2 u_xlatb22;
float u_xlat25;
float u_xlat33;
bool u_xlatb33;
bool u_xlatb34;
mediump float u_xlat16_35;
mediump float u_xlat16_37;
void main()
{
    u_xlat0.xy = dFdx(vs_TEXCOORD0.xy);
    u_xlat22.xy = dFdy(vs_TEXCOORD0.xy);
    u_xlat0.xy = u_xlat22.xy + u_xlat0.xy;
    u_xlat22.xy = (-u_xlat0.xy) * vec2(0.25, 0.25) + vs_TEXCOORD0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25) + vs_TEXCOORD0.xy;
    u_xlat0.xy = (int(gl_SampleID) != 0) ? u_xlat22.xy : u_xlat0.xy;
    u_xlat10_1.xyz = textureLod(_BumpMap, u_xlat0.xy, 0.0).xyz;
    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_2.xy = u_xlat16_2.xy * vec2(vec2(_BumpScale, _BumpScale));
    u_xlat1.x = dot(vs_TEXCOORD4.xyz, u_xlat16_2.xyz);
    u_xlat1.y = dot(vs_TEXCOORD5.xyz, u_xlat16_2.xyz);
    u_xlat1.z = dot(vs_TEXCOORD6.xyz, u_xlat16_2.xyz);
    u_xlat16_2.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat16_2.x = inversesqrt(u_xlat16_2.x);
    u_xlat16_2.xyz = u_xlat1.xyz * u_xlat16_2.xxx;
    u_xlat1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat22.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat22.x = inversesqrt(u_xlat22.x);
    u_xlat1.xyz = u_xlat1.xyz * u_xlat22.xxx + mhy_AvatarLightDir.xyz;
    u_xlat22.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat22.x = inversesqrt(u_xlat22.x);
    u_xlat1.xyz = u_xlat22.xxx * u_xlat1.xyz;
    u_xlat10_3 = textureLod(_MainTex, u_xlat0.xy, 0.0);
    u_xlatb22.xy = equal(vec4(_MainTexAlphaUse), vec4(1.0, 2.0, 1.0, 2.0)).xy;
    u_xlat16_35 = u_xlat10_3.w + (-_MainTexAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb34 = !!(u_xlat16_35<0.0);
#else
    u_xlatb34 = u_xlat16_35<0.0;
#endif
    u_xlatb22.x = u_xlatb22.x && u_xlatb34;
    if((int(u_xlatb22.x) * int(0xffffffffu))!=0){discard;}
    u_xlat10_0.xy = textureLod(_LightMapTex, u_xlat0.xy, 0.0).xz;
    u_xlat16_4.xyz = u_xlat10_3.xyz * _Color.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22.x = !!(0.00999999978<u_xlat10_3.w);
#else
    u_xlatb22.x = 0.00999999978<u_xlat10_3.w;
#endif
    u_xlatb22.x = u_xlatb22.x && u_xlatb22.y;
    u_xlat16_35 = (u_xlatb22.x) ? u_xlat10_3.w : 0.0;
    u_xlat16_37 = dot(u_xlat16_2.xyz, mhy_AvatarLightDir.xyz);
    u_xlat33 = u_xlat16_37 * 0.497500002 + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb34 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorAO));
#else
    u_xlatb34 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorAO);
#endif
    u_xlat16_37 = vs_COLOR0.x * 0.5;
    u_xlat16_37 = (u_xlatb34) ? u_xlat16_37 : 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(u_xlat16_37<0.0500000007);
#else
    u_xlatb3 = u_xlat16_37<0.0500000007;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(0.949999988<u_xlat16_37);
#else
    u_xlatb14 = 0.949999988<u_xlat16_37;
#endif
    u_xlat25 = u_xlat33 + u_xlat16_37;
    u_xlat25 = u_xlat25 * 0.5;
    u_xlat16_37 = (u_xlatb14) ? 1.0 : u_xlat25;
    u_xlat16_37 = (u_xlatb3) ? 0.0 : u_xlat16_37;
    u_xlat16_37 = (u_xlatb34) ? u_xlat16_37 : u_xlat33;
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(u_xlat16_37<_LightArea);
#else
    u_xlatb33 = u_xlat16_37<_LightArea;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb34 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition));
#else
    u_xlatb34 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition);
#endif
    u_xlat16_37 = (-u_xlat16_37) + _LightArea;
    u_xlat16_37 = u_xlat16_37 / _ShadowTransitionRange;
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(u_xlat16_37>=1.0);
#else
    u_xlatb3 = u_xlat16_37>=1.0;
#endif
    u_xlat16_14.x = u_xlat16_37 + 0.00999999978;
    u_xlat16_14.x = log2(u_xlat16_14.x);
    u_xlat14.x = u_xlat16_14.x * _ShadowTransitionSoftness;
    u_xlat14.x = exp2(u_xlat14.x);
    u_xlat14.x = min(u_xlat14.x, 1.0);
    u_xlat3 = (u_xlatb3) ? 1.0 : u_xlat14.x;
    u_xlat3 = (u_xlatb34) ? u_xlat3 : 1.0;
    u_xlat3 = u_xlatb33 ? u_xlat3 : float(0.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(0.899999976<u_xlat10_0.x);
#else
    u_xlatb14 = 0.899999976<u_xlat10_0.x;
#endif
    if(u_xlatb14){
        u_xlat14.xy = u_xlat16_2.yy * hlslcc_mtx4x4unity_WorldToCamera[1].xy;
        u_xlat14.xy = hlslcc_mtx4x4unity_WorldToCamera[0].xy * u_xlat16_2.xx + u_xlat14.xy;
        u_xlat5.yz = hlslcc_mtx4x4unity_WorldToCamera[2].xy * u_xlat16_2.zz + u_xlat14.xy;
        u_xlat5.x = u_xlat5.y * _MTMapTileScale;
        u_xlat16_6.xy = u_xlat5.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
        u_xlat10_14 = texture(_MTMap, u_xlat16_6.xy, -1.0).x;
        u_xlat16_37 = u_xlat10_14 * _MTMapBrightness;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_37 = min(max(u_xlat16_37, 0.0), 1.0);
#else
        u_xlat16_37 = clamp(u_xlat16_37, 0.0, 1.0);
#endif
        u_xlat16_6.xyz = _MTMapLightColor.xyz + (-_MTMapDarkColor.xyz);
        u_xlat16_6.xyz = vec3(u_xlat16_37) * u_xlat16_6.xyz + _MTMapDarkColor.xyz;
        u_xlat16_6.xyz = u_xlat16_4.xyz * u_xlat16_6.xyz;
        u_xlat16_37 = dot(u_xlat16_2.xyz, u_xlat1.xyz);
        u_xlat16_37 = max(u_xlat16_37, 0.00100000005);
        u_xlat16_37 = log2(u_xlat16_37);
        u_xlat16_37 = u_xlat16_37 * _MTShininess;
        u_xlat16_37 = exp2(u_xlat16_37);
        u_xlat16_37 = u_xlat16_37 * _MTSpecularScale;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_37 = min(max(u_xlat16_37, 0.0), 1.0);
#else
        u_xlat16_37 = clamp(u_xlat16_37, 0.0, 1.0);
#endif
        u_xlat16_7.xyz = vec3(u_xlat16_37) * _MTSpecularColor.xyz;
        u_xlat16_7.xyz = u_xlat10_0.yyy * u_xlat16_7.xyz;
        u_xlat16_8.xyz = u_xlat16_6.xyz * _MTShadowMultiColor.xyz;
        u_xlat16_14.xyz = _MTShadowMultiColor.xyz + vec3(-1.0, -1.0, -1.0);
        u_xlat14.xyz = vec3(u_xlat3) * u_xlat16_14.xyz + vec3(1.0, 1.0, 1.0);
        u_xlat16_9.xyz = (bool(u_xlatb34)) ? u_xlat14.xyz : _MTShadowMultiColor.xyz;
        u_xlat16_9.xyz = u_xlat16_6.xyz * u_xlat16_9.xyz;
        u_xlat14.xyz = u_xlat16_6.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
        u_xlat14.xyz = (bool(u_xlatb33)) ? u_xlat16_9.xyz : u_xlat14.xyz;
        u_xlat5.xyz = u_xlat16_7.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
        u_xlat16_14.xyz = u_xlat14.xyz;
        u_xlat16_5.xyz = u_xlat5.xyz;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb10 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex));
#else
        u_xlatb10 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex);
#endif
        u_xlat16_21.xyz = vec3(_FirstShadowMultColor.xxyz.y + (-_CoolShadowMultColor.x), _FirstShadowMultColor.xxyz.z + (-_CoolShadowMultColor.y), float(_FirstShadowMultColor.z) + (-_CoolShadowMultColor.z));
        u_xlat21.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_21.xyz + _CoolShadowMultColor.xyz;
        u_xlat16_6.xyz = (bool(u_xlatb10)) ? u_xlat21.xyz : vec3(_FirstShadowMultColor.x, _FirstShadowMultColor.y, _FirstShadowMultColor.z);
        u_xlat16_8.xyz = u_xlat16_4.xyz * u_xlat16_6.xyz;
        u_xlat16_10.xyz = u_xlat16_6.xyz + vec3(-1.0, -1.0, -1.0);
        u_xlat10.xyz = vec3(u_xlat3) * u_xlat16_10.xyz + vec3(1.0, 1.0, 1.0);
        u_xlat16_6.xyz = (bool(u_xlatb34)) ? u_xlat10.xyz : u_xlat16_6.xyz;
        u_xlat16_6.xyz = u_xlat16_4.xyz * u_xlat16_6.xyz;
        u_xlat10.xyz = u_xlat16_4.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
        u_xlat14.xyz = (bool(u_xlatb33)) ? u_xlat16_6.xyz : u_xlat10.xyz;
        u_xlat16_37 = dot(u_xlat16_2.xyz, u_xlat1.xyz);
        u_xlat16_37 = max(u_xlat16_37, 0.00100000005);
        u_xlat16_37 = log2(u_xlat16_37);
        u_xlat16_37 = u_xlat16_37 * _Shininess;
        u_xlat16_37 = exp2(u_xlat16_37);
        u_xlat11 = (-u_xlat10_0.y) + 1.0;
#ifdef UNITY_ADRENO_ES3
        u_xlatb11 = !!(u_xlat11<u_xlat16_37);
#else
        u_xlatb11 = u_xlat11<u_xlat16_37;
#endif
        u_xlat16_6.xyz = _SpecularColor.xyz * vec3(_SpecMulti);
        u_xlat16_6.xyz = u_xlat10_0.xxx * u_xlat16_6.xyz;
        u_xlat1.xyz = u_xlat16_6.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
        u_xlat5.xyz = mix(vec3(0.0, 0.0, 0.0), u_xlat1.xyz, vec3(bvec3(u_xlatb11)));
        u_xlat16_14.xyz = u_xlat14.xyz;
        u_xlat16_5.xyz = u_xlat5.xyz;
    //ENDIF
    }
    u_xlat16_4.xyz = u_xlat16_4.xyz * _EmissionColor_MHY.xyz;
    u_xlat16_6.xyz = u_xlat16_14.xyz + u_xlat16_5.xyz;
    u_xlat16_7.xyz = u_xlat16_5.xyz + u_xlat16_8.xyz;
    u_xlat16_8.xyz = u_xlat16_4.xyz * vec3(vec3(_EmissionScaler, _EmissionScaler, _EmissionScaler)) + (-u_xlat16_6.xyz);
    u_xlat16_8.xyz = vec3(u_xlat16_35) * u_xlat16_8.xyz + u_xlat16_6.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(vec3(_EmissionScaler, _EmissionScaler, _EmissionScaler)) + (-u_xlat16_7.xyz);
    u_xlat16_4.xyz = vec3(u_xlat16_35) * u_xlat16_4.xyz + u_xlat16_7.xyz;
    u_xlat16_6.xyz = (u_xlatb22.x) ? u_xlat16_8.xyz : u_xlat16_6.xyz;
    u_xlat16_4.xyz = (u_xlatb22.x) ? u_xlat16_4.xyz : u_xlat16_7.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.00999999978<u_xlat16_35);
#else
    u_xlatb0 = 0.00999999978<u_xlat16_35;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb11 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn));
#else
    u_xlatb11 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn);
#endif
    u_xlat1.xyz = u_xlat16_6.xyz * vec3(vec3(_ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness));
    u_xlat10.xyz = _ES_CharacterMainLightColor.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat10.xyz = vec3(vec3(_ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio)) * u_xlat10.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat1.xyz = u_xlat1.xyz * u_xlat10.xyz;
    u_xlat10.xyz = _ES_CharacterAmbientLightColor.xyz * vec3(_ES_CharacterAmbientLightRatio);
    u_xlat16_7.xyz = u_xlat1.xyz * vec3(10.0, 10.0, 10.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.xyz = min(max(u_xlat16_7.xyz, 0.0), 1.0);
#else
    u_xlat16_7.xyz = clamp(u_xlat16_7.xyz, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat10.xyz * u_xlat16_7.xyz + u_xlat1.xyz;
    u_xlat16_7.xyz = (bool(u_xlatb11)) ? u_xlat1.xyz : u_xlat16_6.xyz;
    u_xlat16_8.xyz = u_xlat16_6.xyz + (-u_xlat16_7.xyz);
    u_xlat16_8.xyz = vec3(u_xlat16_35) * u_xlat16_8.xyz + u_xlat16_7.xyz;
    u_xlat16_6.xyz = (-u_xlat16_4.xyz) + u_xlat16_6.xyz;
    u_xlat16_6.xyz = vec3(u_xlat16_35) * u_xlat16_6.xyz + u_xlat16_4.xyz;
    u_xlat16_1.xyz = (bool(u_xlatb0)) ? u_xlat16_8.xyz : u_xlat16_7.xyz;
    u_xlat16_4.xyz = (bool(u_xlatb0)) ? u_xlat16_6.xyz : u_xlat16_4.xyz;
    u_xlat16_37 = max(u_xlat16_1.z, u_xlat16_1.y);
    u_xlat16_0.w = max(u_xlat16_1.x, u_xlat16_37);
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(1.0<u_xlat16_0.w);
#else
    u_xlatb10 = 1.0<u_xlat16_0.w;
#endif
    u_xlat16_0.xyz = u_xlat16_1.xyz / u_xlat16_0.www;
    u_xlat16_1.w = 1.0;
    u_xlat16_0 = (bool(u_xlatb10)) ? u_xlat16_0 : u_xlat16_1;
    u_xlat16_37 = min(u_xlat16_0.w, 1.10000002);
    u_xlat16_6.x = u_xlat16_0.w + (-u_xlat16_37);
    u_xlat16_35 = u_xlat16_35 * u_xlat16_6.x + u_xlat16_37;
    SV_Target1.w = u_xlat16_35 * 0.0500000007;
    SV_Target0.xyz = u_xlat16_2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb10 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_2.x = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb10) ? u_xlat16_2.x : u_xlat16_4.z;
    SV_Target0.w = 0.0470588244;
    SV_Target1.xyz = u_xlat16_0.xyz;
    SV_Target2.xy = u_xlat16_4.xy;
    SV_Target2.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "LINE_INTERPOLATION" "TOON_SPECULAR_ON" "METAL_MAT" "NORMAL_MAP_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
float u_xlat12;
void main()
{
    u_xlat0.x = hlslcc_mtx4x4unity_ObjectToWorld[0].y;
    u_xlat0.y = hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat0.z = hlslcc_mtx4x4unity_ObjectToWorld[2].y;
    u_xlat1.xyw = (-_WorldSpaceCameraPos.xyz) + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat0.w = u_xlat1.y;
    u_xlat2.xyz = in_POSITION0.xyz;
    u_xlat2.w = 1.0;
    u_xlat0.x = dot(u_xlat0, u_xlat2);
    u_xlat0 = u_xlat0.xxxx * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat3.w = u_xlat1.x;
    u_xlat3.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;
    u_xlat3.y = hlslcc_mtx4x4unity_ObjectToWorld[1].x;
    u_xlat3.z = hlslcc_mtx4x4unity_ObjectToWorld[2].x;
    u_xlat3.x = dot(u_xlat3, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat3.xxxx + u_xlat0;
    u_xlat1.x = hlslcc_mtx4x4unity_ObjectToWorld[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_ObjectToWorld[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_ObjectToWorld[2].z;
    u_xlat1.x = dot(u_xlat1, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat1.xxxx + u_xlat0;
    u_xlat1.x = hlslcc_mtx4x4unity_ObjectToWorld[0].w;
    u_xlat1.y = hlslcc_mtx4x4unity_ObjectToWorld[1].w;
    u_xlat1.z = hlslcc_mtx4x4unity_ObjectToWorld[2].w;
    u_xlat1.w = hlslcc_mtx4x4unity_ObjectToWorld[3].w;
    u_xlat1.x = dot(u_xlat1, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[3] * u_xlat1.xxxx + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD1 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.zw = u_xlat0.zw;
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD3.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
    u_xlat12 = in_TANGENT0.w * unity_WorldTransformParams.w;
    u_xlat2.xyz = vec3(u_xlat12) * u_xlat2.xyz;
    vs_TEXCOORD4.y = u_xlat2.x;
    vs_TEXCOORD4.x = u_xlat1.z;
    vs_TEXCOORD4.z = u_xlat0.y;
    vs_TEXCOORD5.x = u_xlat1.x;
    vs_TEXCOORD6.x = u_xlat1.y;
    vs_TEXCOORD5.z = u_xlat0.z;
    vs_TEXCOORD6.z = u_xlat0.x;
    vs_TEXCOORD5.y = u_xlat2.y;
    vs_TEXCOORD6.y = u_xlat2.z;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToCamera[4];
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	mediump vec4 _Color;
uniform 	float _MainTexAlphaUse;
uniform 	mediump float _MainTexAlphaCutoff;
uniform 	mediump float _BumpScale;
uniform 	float _UseVertexColorAO;
uniform 	mediump float _LightArea;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	float _UseCoolShadowColorOrTex;
uniform 	mediump vec3 _CoolShadowMultColor;
uniform 	float _UseShadowTransition;
uniform 	float _ShadowTransitionRange;
uniform 	float _ShadowTransitionSoftness;
uniform 	mediump vec3 _SpecularColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump float _EmissionScaler;
uniform 	mediump vec3 _EmissionColor_MHY;
uniform 	mediump float _MTMapBrightness;
uniform 	float _MTMapTileScale;
uniform 	mediump vec3 _MTMapLightColor;
uniform 	mediump vec3 _MTMapDarkColor;
uniform 	mediump vec3 _MTShadowMultiColor;
uniform 	mediump float _MTShininess;
uniform 	mediump vec3 _MTSpecularColor;
uniform 	mediump float _MTSpecularScale;
uniform 	float _ES_CharacterAmbientLightOn;
uniform 	float _ES_CharacterAmbientBrightness;
uniform 	vec3 _ES_CharacterMainLightColor;
uniform 	float _ES_CharacterMainLightBrightness;
uniform 	vec3 _ES_CharacterAmbientLightColor;
uniform 	float _ES_CharacterMainLightRatio;
uniform 	float _ES_CharacterAmbientLightRatio;
uniform 	float _ES_CharacterColorTone;
uniform 	vec3 mhy_AvatarLightDir;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MTMap;
in mediump vec4 vs_COLOR0;
in highp vec2 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD5;
in highp vec3 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec3 u_xlat10_0;
mediump vec3 u_xlat16_1;
mediump vec4 u_xlat16_2;
lowp vec4 u_xlat10_2;
bool u_xlatb2;
vec4 u_xlat3;
lowp vec3 u_xlat10_3;
bvec2 u_xlatb3;
mediump vec3 u_xlat16_4;
mediump float u_xlat16_5;
mediump vec3 u_xlat16_6;
float u_xlat7;
bool u_xlatb7;
vec3 u_xlat8;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
mediump vec3 u_xlat16_11;
vec3 u_xlat12;
mediump vec3 u_xlat16_12;
bool u_xlatb12;
vec3 u_xlat13;
float u_xlat17;
bool u_xlatb17;
mediump vec3 u_xlat16_20;
vec3 u_xlat21;
mediump vec3 u_xlat16_21;
lowp float u_xlat10_21;
bool u_xlatb21;
vec3 u_xlat26;
mediump vec3 u_xlat16_26;
float u_xlat35;
float u_xlat42;
bool u_xlatb42;
mediump float u_xlat16_43;
bool u_xlatb45;
mediump float u_xlat16_48;
void main()
{
    u_xlat10_0.xyz = texture(_BumpMap, vs_TEXCOORD0.xy, -1.0).xyz;
    u_xlat16_1.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_1.xy = u_xlat16_1.xy * vec2(vec2(_BumpScale, _BumpScale));
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, u_xlat16_1.xyz);
    u_xlat0.y = dot(vs_TEXCOORD5.xyz, u_xlat16_1.xyz);
    u_xlat0.z = dot(vs_TEXCOORD6.xyz, u_xlat16_1.xyz);
    u_xlat16_1.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat16_1.x = inversesqrt(u_xlat16_1.x);
    u_xlat16_1.xyz = u_xlat0.xyz * u_xlat16_1.xxx;
    u_xlat0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat42 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat42 = inversesqrt(u_xlat42);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat42) + mhy_AvatarLightDir.xyz;
    u_xlat42 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat42 = inversesqrt(u_xlat42);
    u_xlat0.xyz = vec3(u_xlat42) * u_xlat0.xyz;
    u_xlat10_2 = texture(_MainTex, vs_TEXCOORD0.xy, -1.0);
    u_xlatb3.xy = equal(vec4(_MainTexAlphaUse), vec4(1.0, 2.0, 0.0, 0.0)).xy;
    u_xlat16_43 = u_xlat10_2.w + (-_MainTexAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb42 = !!(u_xlat16_43<0.0);
#else
    u_xlatb42 = u_xlat16_43<0.0;
#endif
    u_xlatb3.x = u_xlatb3.x && u_xlatb42;
    if((int(u_xlatb3.x) * int(0xffffffffu))!=0){discard;}
    u_xlat10_3.xz = texture(_LightMapTex, vs_TEXCOORD0.xy, -1.0).xz;
    u_xlat16_4.xyz = u_xlat10_2.xyz * _Color.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(0.00999999978<u_xlat10_2.w);
#else
    u_xlatb2 = 0.00999999978<u_xlat10_2.w;
#endif
    u_xlatb2 = u_xlatb2 && u_xlatb3.y;
    u_xlat16_5 = (u_xlatb2) ? u_xlat10_2.w : 0.0;
    u_xlat16_6.x = dot(u_xlat16_1.xyz, mhy_AvatarLightDir.xyz);
    u_xlat17 = u_xlat16_6.x * 0.497500002 + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb45 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorAO));
#else
    u_xlatb45 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorAO);
#endif
    u_xlat16_6.x = vs_COLOR0.x * 0.5;
    u_xlat16_6.x = (u_xlatb45) ? u_xlat16_6.x : 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(u_xlat16_6.x<0.0500000007);
#else
    u_xlatb7 = u_xlat16_6.x<0.0500000007;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(0.949999988<u_xlat16_6.x);
#else
    u_xlatb21 = 0.949999988<u_xlat16_6.x;
#endif
    u_xlat35 = u_xlat17 + u_xlat16_6.x;
    u_xlat35 = u_xlat35 * 0.5;
    u_xlat16_6.x = (u_xlatb21) ? 1.0 : u_xlat35;
    u_xlat16_6.x = (u_xlatb7) ? 0.0 : u_xlat16_6.x;
    u_xlat16_6.x = (u_xlatb45) ? u_xlat16_6.x : u_xlat17;
#ifdef UNITY_ADRENO_ES3
    u_xlatb17 = !!(u_xlat16_6.x<_LightArea);
#else
    u_xlatb17 = u_xlat16_6.x<_LightArea;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb45 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition));
#else
    u_xlatb45 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition);
#endif
    u_xlat16_6.x = (-u_xlat16_6.x) + _LightArea;
    u_xlat16_6.x = u_xlat16_6.x / _ShadowTransitionRange;
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(u_xlat16_6.x>=1.0);
#else
    u_xlatb7 = u_xlat16_6.x>=1.0;
#endif
    u_xlat16_21.x = u_xlat16_6.x + 0.00999999978;
    u_xlat16_21.x = log2(u_xlat16_21.x);
    u_xlat21.x = u_xlat16_21.x * _ShadowTransitionSoftness;
    u_xlat21.x = exp2(u_xlat21.x);
    u_xlat21.x = min(u_xlat21.x, 1.0);
    u_xlat7 = (u_xlatb7) ? 1.0 : u_xlat21.x;
    u_xlat7 = (u_xlatb45) ? u_xlat7 : 1.0;
    u_xlat7 = u_xlatb17 ? u_xlat7 : float(0.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(0.899999976<u_xlat10_3.x);
#else
    u_xlatb21 = 0.899999976<u_xlat10_3.x;
#endif
    if(u_xlatb21){
        u_xlat21.xy = u_xlat16_1.yy * hlslcc_mtx4x4unity_WorldToCamera[1].xy;
        u_xlat21.xy = hlslcc_mtx4x4unity_WorldToCamera[0].xy * u_xlat16_1.xx + u_xlat21.xy;
        u_xlat8.yz = hlslcc_mtx4x4unity_WorldToCamera[2].xy * u_xlat16_1.zz + u_xlat21.xy;
        u_xlat8.x = u_xlat8.y * _MTMapTileScale;
        u_xlat16_6.xy = u_xlat8.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
        u_xlat10_21 = texture(_MTMap, u_xlat16_6.xy, -1.0).x;
        u_xlat16_6.x = u_xlat10_21 * _MTMapBrightness;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
        u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
        u_xlat16_20.xyz = _MTMapLightColor.xyz + (-_MTMapDarkColor.xyz);
        u_xlat16_6.xyz = u_xlat16_6.xxx * u_xlat16_20.xyz + _MTMapDarkColor.xyz;
        u_xlat16_6.xyz = u_xlat16_4.xyz * u_xlat16_6.xyz;
        u_xlat16_48 = dot(u_xlat16_1.xyz, u_xlat0.xyz);
        u_xlat16_48 = max(u_xlat16_48, 0.00100000005);
        u_xlat16_48 = log2(u_xlat16_48);
        u_xlat16_48 = u_xlat16_48 * _MTShininess;
        u_xlat16_48 = exp2(u_xlat16_48);
        u_xlat16_48 = u_xlat16_48 * _MTSpecularScale;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_48 = min(max(u_xlat16_48, 0.0), 1.0);
#else
        u_xlat16_48 = clamp(u_xlat16_48, 0.0, 1.0);
#endif
        u_xlat16_9.xyz = vec3(u_xlat16_48) * _MTSpecularColor.xyz;
        u_xlat16_9.xyz = u_xlat10_3.zzz * u_xlat16_9.xyz;
        u_xlat16_10.xyz = u_xlat16_6.xyz * _MTShadowMultiColor.xyz;
        u_xlat16_21.xyz = _MTShadowMultiColor.xyz + vec3(-1.0, -1.0, -1.0);
        u_xlat21.xyz = vec3(u_xlat7) * u_xlat16_21.xyz + vec3(1.0, 1.0, 1.0);
        u_xlat16_11.xyz = (bool(u_xlatb45)) ? u_xlat21.xyz : _MTShadowMultiColor.xyz;
        u_xlat16_11.xyz = u_xlat16_6.xyz * u_xlat16_11.xyz;
        u_xlat21.xyz = u_xlat16_6.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
        u_xlat21.xyz = (bool(u_xlatb17)) ? u_xlat16_11.xyz : u_xlat21.xyz;
        u_xlat8.xyz = u_xlat16_9.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
        u_xlat16_21.xyz = u_xlat21.xyz;
        u_xlat16_8.xyz = u_xlat8.xyz;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb12 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex));
#else
        u_xlatb12 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex);
#endif
        u_xlat16_26.xyz = vec3(_FirstShadowMultColor.xxyz.y + (-_CoolShadowMultColor.x), _FirstShadowMultColor.xxyz.z + (-_CoolShadowMultColor.y), float(_FirstShadowMultColor.z) + (-_CoolShadowMultColor.z));
        u_xlat26.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_26.xyz + _CoolShadowMultColor.xyz;
        u_xlat16_6.xyz = (bool(u_xlatb12)) ? u_xlat26.xyz : vec3(_FirstShadowMultColor.x, _FirstShadowMultColor.y, _FirstShadowMultColor.z);
        u_xlat16_10.xyz = u_xlat16_4.xyz * u_xlat16_6.xyz;
        u_xlat16_12.xyz = u_xlat16_6.xyz + vec3(-1.0, -1.0, -1.0);
        u_xlat12.xyz = vec3(u_xlat7) * u_xlat16_12.xyz + vec3(1.0, 1.0, 1.0);
        u_xlat16_6.xyz = (bool(u_xlatb45)) ? u_xlat12.xyz : u_xlat16_6.xyz;
        u_xlat16_6.xyz = u_xlat16_4.xyz * u_xlat16_6.xyz;
        u_xlat12.xyz = u_xlat16_4.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
        u_xlat21.xyz = (bool(u_xlatb17)) ? u_xlat16_6.xyz : u_xlat12.xyz;
        u_xlat16_6.x = dot(u_xlat16_1.xyz, u_xlat0.xyz);
        u_xlat16_6.x = max(u_xlat16_6.x, 0.00100000005);
        u_xlat16_6.x = log2(u_xlat16_6.x);
        u_xlat16_6.x = u_xlat16_6.x * _Shininess;
        u_xlat16_6.x = exp2(u_xlat16_6.x);
        u_xlat17 = (-u_xlat10_3.z) + 1.0;
#ifdef UNITY_ADRENO_ES3
        u_xlatb17 = !!(u_xlat17<u_xlat16_6.x);
#else
        u_xlatb17 = u_xlat17<u_xlat16_6.x;
#endif
        u_xlat16_6.xyz = _SpecularColor.xyz * vec3(_SpecMulti);
        u_xlat16_6.xyz = u_xlat10_3.xxx * u_xlat16_6.xyz;
        u_xlat3.xzw = u_xlat16_6.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
        u_xlat8.xyz = mix(vec3(0.0, 0.0, 0.0), u_xlat3.xzw, vec3(bvec3(u_xlatb17)));
        u_xlat16_21.xyz = u_xlat21.xyz;
        u_xlat16_8.xyz = u_xlat8.xyz;
    //ENDIF
    }
    u_xlat16_6.xyz = u_xlat16_4.xyz * _EmissionColor_MHY.xyz;
    u_xlat16_9.xyz = u_xlat16_21.xyz + u_xlat16_8.xyz;
    u_xlat16_10.xyz = u_xlat16_8.xyz + u_xlat16_10.xyz;
    u_xlat16_11.xyz = u_xlat16_6.xyz * vec3(vec3(_EmissionScaler, _EmissionScaler, _EmissionScaler)) + (-u_xlat16_9.xyz);
    u_xlat16_11.xyz = vec3(u_xlat16_5) * u_xlat16_11.xyz + u_xlat16_9.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(vec3(_EmissionScaler, _EmissionScaler, _EmissionScaler)) + (-u_xlat16_10.xyz);
    u_xlat16_6.xyz = vec3(u_xlat16_5) * u_xlat16_6.xyz + u_xlat16_10.xyz;
    u_xlat16_9.xyz = (bool(u_xlatb2)) ? u_xlat16_11.xyz : u_xlat16_9.xyz;
    u_xlat16_6.xyz = (bool(u_xlatb2)) ? u_xlat16_6.xyz : u_xlat16_10.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb3.x = !!(0.00999999978<u_xlat16_5);
#else
    u_xlatb3.x = 0.00999999978<u_xlat16_5;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb17 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn));
#else
    u_xlatb17 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn);
#endif
    u_xlat12.xyz = u_xlat16_9.xyz * vec3(vec3(_ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness));
    u_xlat13.xyz = _ES_CharacterMainLightColor.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat13.xyz = vec3(vec3(_ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio)) * u_xlat13.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat12.xyz = u_xlat12.xyz * u_xlat13.xyz;
    u_xlat13.xyz = _ES_CharacterAmbientLightColor.xyz * vec3(_ES_CharacterAmbientLightRatio);
    u_xlat16_10.xyz = u_xlat12.xyz * vec3(10.0, 10.0, 10.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_10.xyz = min(max(u_xlat16_10.xyz, 0.0), 1.0);
#else
    u_xlat16_10.xyz = clamp(u_xlat16_10.xyz, 0.0, 1.0);
#endif
    u_xlat12.xyz = u_xlat13.xyz * u_xlat16_10.xyz + u_xlat12.xyz;
    u_xlat16_10.xyz = (bool(u_xlatb17)) ? u_xlat12.xyz : u_xlat16_9.xyz;
    u_xlat16_11.xyz = u_xlat16_9.xyz + (-u_xlat16_10.xyz);
    u_xlat16_11.xyz = vec3(u_xlat16_5) * u_xlat16_11.xyz + u_xlat16_10.xyz;
    u_xlat16_9.xyz = (-u_xlat16_6.xyz) + u_xlat16_9.xyz;
    u_xlat16_9.xyz = vec3(u_xlat16_5) * u_xlat16_9.xyz + u_xlat16_6.xyz;
    u_xlat16_0.xyz = (u_xlatb3.x) ? u_xlat16_11.xyz : u_xlat16_10.xyz;
    u_xlat16_6.xyz = (u_xlatb3.x) ? u_xlat16_9.xyz : u_xlat16_6.xyz;
    u_xlat16_48 = max(u_xlat16_0.z, u_xlat16_0.y);
    u_xlat16_2.w = max(u_xlat16_0.x, u_xlat16_48);
#ifdef UNITY_ADRENO_ES3
    u_xlatb3.x = !!(1.0<u_xlat16_2.w);
#else
    u_xlatb3.x = 1.0<u_xlat16_2.w;
#endif
    u_xlat16_2.xyz = u_xlat16_0.xyz / u_xlat16_2.www;
    u_xlat16_0.w = 1.0;
    u_xlat16_0 = (u_xlatb3.x) ? u_xlat16_2 : u_xlat16_0;
    u_xlat16_48 = min(u_xlat16_0.w, 1.10000002);
    u_xlat16_9.x = u_xlat16_0.w + (-u_xlat16_48);
    u_xlat16_48 = u_xlat16_5 * u_xlat16_9.x + u_xlat16_48;
    SV_Target1.w = u_xlat16_48 * 0.0500000007;
    SV_Target0.xyz = u_xlat16_1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb3.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb3.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_48 = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb3.x) ? u_xlat16_48 : u_xlat16_6.z;
    SV_Target0.w = 0.0470588244;
    SV_Target1.xyz = u_xlat16_0.xyz;
    SV_Target2.xy = u_xlat16_6.xy;
    SV_Target2.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "TOON_SPECULAR_ON" "BACK_FACE_ON" "NORMAL_MAP_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
float u_xlat12;
void main()
{
    u_xlat0.x = hlslcc_mtx4x4unity_ObjectToWorld[0].y;
    u_xlat0.y = hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat0.z = hlslcc_mtx4x4unity_ObjectToWorld[2].y;
    u_xlat1.xyw = (-_WorldSpaceCameraPos.xyz) + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat0.w = u_xlat1.y;
    u_xlat2.xyz = in_POSITION0.xyz;
    u_xlat2.w = 1.0;
    u_xlat0.x = dot(u_xlat0, u_xlat2);
    u_xlat0 = u_xlat0.xxxx * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat3.w = u_xlat1.x;
    u_xlat3.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;
    u_xlat3.y = hlslcc_mtx4x4unity_ObjectToWorld[1].x;
    u_xlat3.z = hlslcc_mtx4x4unity_ObjectToWorld[2].x;
    u_xlat3.x = dot(u_xlat3, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat3.xxxx + u_xlat0;
    u_xlat1.x = hlslcc_mtx4x4unity_ObjectToWorld[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_ObjectToWorld[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_ObjectToWorld[2].z;
    u_xlat1.x = dot(u_xlat1, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat1.xxxx + u_xlat0;
    u_xlat1.x = hlslcc_mtx4x4unity_ObjectToWorld[0].w;
    u_xlat1.y = hlslcc_mtx4x4unity_ObjectToWorld[1].w;
    u_xlat1.z = hlslcc_mtx4x4unity_ObjectToWorld[2].w;
    u_xlat1.w = hlslcc_mtx4x4unity_ObjectToWorld[3].w;
    u_xlat1.x = dot(u_xlat1, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[3] * u_xlat1.xxxx + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD1 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.zw = u_xlat0.zw;
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD3.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
    u_xlat12 = in_TANGENT0.w * unity_WorldTransformParams.w;
    u_xlat2.xyz = vec3(u_xlat12) * u_xlat2.xyz;
    vs_TEXCOORD4.y = u_xlat2.x;
    vs_TEXCOORD4.x = u_xlat1.z;
    vs_TEXCOORD4.z = u_xlat0.y;
    vs_TEXCOORD5.x = u_xlat1.x;
    vs_TEXCOORD6.x = u_xlat1.y;
    vs_TEXCOORD5.z = u_xlat0.z;
    vs_TEXCOORD6.z = u_xlat0.x;
    vs_TEXCOORD5.y = u_xlat2.y;
    vs_TEXCOORD6.y = u_xlat2.z;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	mediump vec4 _Color;
uniform 	float _MainTexAlphaUse;
uniform 	mediump float _MainTexAlphaCutoff;
uniform 	mediump float _BumpScale;
uniform 	float _UseVertexColorAO;
uniform 	mediump float _LightArea;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	float _UseCoolShadowColorOrTex;
uniform 	mediump vec3 _CoolShadowMultColor;
uniform 	float _UseShadowTransition;
uniform 	float _ShadowTransitionRange;
uniform 	float _ShadowTransitionSoftness;
uniform 	mediump vec3 _SpecularColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump float _EmissionScaler;
uniform 	mediump vec3 _EmissionColor_MHY;
uniform 	float _ES_CharacterAmbientLightOn;
uniform 	float _ES_CharacterAmbientBrightness;
uniform 	vec3 _ES_CharacterMainLightColor;
uniform 	float _ES_CharacterMainLightBrightness;
uniform 	vec3 _ES_CharacterAmbientLightColor;
uniform 	float _ES_CharacterMainLightRatio;
uniform 	float _ES_CharacterAmbientLightRatio;
uniform 	float _ES_CharacterColorTone;
uniform 	vec3 mhy_AvatarLightDir;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MainTex;
in mediump vec4 vs_COLOR0;
in highp vec2 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD5;
in highp vec3 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec4 u_xlat0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
vec3 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
bool u_xlatb1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump vec4 u_xlat16_3;
vec3 u_xlat4;
mediump vec3 u_xlat16_4;
bool u_xlatb4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
vec3 u_xlat9;
bool u_xlatb9;
bool u_xlatb18;
float u_xlat27;
mediump float u_xlat16_27;
bool u_xlatb27;
mediump float u_xlat16_29;
bool u_xlatb30;
mediump float u_xlat16_32;
mediump float u_xlat16_33;
void main()
{
    u_xlatb0.xy = equal(vec4(_MainTexAlphaUse), vec4(1.0, 2.0, 0.0, 0.0)).xy;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy, -1.0);
    u_xlat16_2.x = u_xlat10_1.w + (-_MainTexAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(u_xlat16_2.x<0.0);
#else
    u_xlatb18 = u_xlat16_2.x<0.0;
#endif
    u_xlatb0.x = u_xlatb0.x && u_xlatb18;
    if((int(u_xlatb0.x) * int(0xffffffffu))!=0){discard;}
    u_xlat10_0.xzw = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xzw * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_2.xy = u_xlat16_2.xy * vec2(vec2(_BumpScale, _BumpScale));
    u_xlat3.x = dot(vs_TEXCOORD4.xyz, u_xlat16_2.xyz);
    u_xlat3.y = dot(vs_TEXCOORD5.xyz, u_xlat16_2.xyz);
    u_xlat3.z = dot(vs_TEXCOORD6.xyz, u_xlat16_2.xyz);
    u_xlat16_2.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat16_2.x = inversesqrt(u_xlat16_2.x);
    u_xlat16_2.xyz = u_xlat16_2.xxx * u_xlat3.xyz;
    u_xlat16_2.xyz = (uint((gl_FrontFacing ? 0xffffffffu : uint(0))) != uint(0u)) ? u_xlat16_2.xyz : (-u_xlat16_2.xyz);
    SV_Target0.xyz = u_xlat16_2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0470588244;
    u_xlat0.xzw = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat0.xzw = u_xlat0.xzw * u_xlat3.xxx + mhy_AvatarLightDir.xyz;
    u_xlat3.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat0.xzw = u_xlat0.xzw * u_xlat3.xxx;
    u_xlat16_29 = dot(u_xlat16_2.xyz, u_xlat0.xzw);
    u_xlat16_2.x = dot(u_xlat16_2.xyz, mhy_AvatarLightDir.xyz);
    u_xlat0.x = u_xlat16_2.x * 0.497500002 + 0.5;
    u_xlat16_2.x = max(u_xlat16_29, 0.00100000005);
    u_xlat16_2.x = log2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * _Shininess;
    u_xlat16_2.x = exp2(u_xlat16_2.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(0.5<u_xlat16_2.x);
#else
    u_xlatb18 = 0.5<u_xlat16_2.x;
#endif
    u_xlat16_2.xyz = _SpecularColor.xyz * vec3(_SpecMulti);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(0.5, 0.5, 0.5);
    u_xlat3.xyz = u_xlat16_2.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
    u_xlat3.xyz = mix(vec3(0.0, 0.0, 0.0), u_xlat3.xyz, vec3(bvec3(u_xlatb18)));
    u_xlat16_2.x = vs_COLOR0.x * 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorAO));
#else
    u_xlatb18 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorAO);
#endif
    u_xlat16_2.x = (u_xlatb18) ? u_xlat16_2.x : 0.5;
    u_xlat27 = u_xlat0.x + u_xlat16_2.x;
    u_xlat27 = u_xlat27 * 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(0.949999988<u_xlat16_2.x);
#else
    u_xlatb30 = 0.949999988<u_xlat16_2.x;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(u_xlat16_2.x<0.0500000007);
#else
    u_xlatb4 = u_xlat16_2.x<0.0500000007;
#endif
    u_xlat16_2.x = (u_xlatb30) ? 1.0 : u_xlat27;
    u_xlat16_2.x = (u_xlatb4) ? 0.0 : u_xlat16_2.x;
    u_xlat16_2.x = (u_xlatb18) ? u_xlat16_2.x : u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(u_xlat16_2.x<_LightArea);
#else
    u_xlatb0.x = u_xlat16_2.x<_LightArea;
#endif
    u_xlat16_2.x = (-u_xlat16_2.x) + _LightArea;
    u_xlat16_2.x = u_xlat16_2.x / _ShadowTransitionRange;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(int((gl_FrontFacing ? 0xffffffffu : uint(0)))==0);
#else
    u_xlatb18 = int((gl_FrontFacing ? 0xffffffffu : uint(0)))==0;
#endif
    u_xlatb18 = u_xlatb0.x || u_xlatb18;
    u_xlat16_27 = u_xlat16_2.x + 0.00999999978;
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(u_xlat16_2.x>=1.0);
#else
    u_xlatb30 = u_xlat16_2.x>=1.0;
#endif
    u_xlat16_27 = log2(u_xlat16_27);
    u_xlat27 = u_xlat16_27 * _ShadowTransitionSoftness;
    u_xlat27 = exp2(u_xlat27);
    u_xlat27 = min(u_xlat27, 1.0);
    u_xlat27 = (u_xlatb30) ? 1.0 : u_xlat27;
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition));
#else
    u_xlatb30 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition);
#endif
    u_xlat27 = (u_xlatb30) ? u_xlat27 : 1.0;
    u_xlat0.x = u_xlatb0.x ? u_xlat27 : float(0.0);
    u_xlat16_4.xyz = vec3(_FirstShadowMultColor.xxyz.y + (-_CoolShadowMultColor.x), _FirstShadowMultColor.xxyz.z + (-_CoolShadowMultColor.y), float(_FirstShadowMultColor.z) + (-_CoolShadowMultColor.z));
    u_xlat4.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_4.xyz + _CoolShadowMultColor.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex));
#else
    u_xlatb27 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex);
#endif
    u_xlat16_2.xyz = (bool(u_xlatb27)) ? u_xlat4.xyz : vec3(_FirstShadowMultColor.x, _FirstShadowMultColor.y, _FirstShadowMultColor.z);
    u_xlat16_4.xyz = u_xlat16_2.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat4.xyz = u_xlat0.xxx * u_xlat16_4.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_5.xyz = (bool(u_xlatb30)) ? u_xlat4.xyz : u_xlat16_2.xyz;
    u_xlat16_6.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_6.xyz;
    u_xlat1.xyz = u_xlat16_6.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
    u_xlat0.xzw = (bool(u_xlatb18)) ? u_xlat16_5.xyz : u_xlat1.xyz;
    u_xlat16_5.xyz = u_xlat3.xyz + u_xlat0.xzw;
    u_xlat16_2.xyz = u_xlat16_6.xyz * u_xlat16_2.xyz + u_xlat3.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * _EmissionColor_MHY.xyz;
    u_xlat16_7.xyz = u_xlat16_6.xyz * vec3(vec3(_EmissionScaler, _EmissionScaler, _EmissionScaler)) + (-u_xlat16_5.xyz);
    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(vec3(_EmissionScaler, _EmissionScaler, _EmissionScaler)) + (-u_xlat16_2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(0.00999999978<u_xlat10_1.w);
#else
    u_xlatb0.x = 0.00999999978<u_xlat10_1.w;
#endif
    u_xlatb0.x = u_xlatb0.x && u_xlatb0.y;
    u_xlat16_29 = (u_xlatb0.x) ? u_xlat10_1.w : 0.0;
    u_xlat16_7.xyz = vec3(u_xlat16_29) * u_xlat16_7.xyz + u_xlat16_5.xyz;
    u_xlat16_5.xyz = (u_xlatb0.x) ? u_xlat16_7.xyz : u_xlat16_5.xyz;
    u_xlat9.xyz = u_xlat16_5.xyz * vec3(vec3(_ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness));
    u_xlat1.xyz = _ES_CharacterMainLightColor.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat1.xyz = vec3(vec3(_ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio)) * u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat9.xyz = u_xlat9.xyz * u_xlat1.xyz;
    u_xlat16_7.xyz = u_xlat9.xyz * vec3(10.0, 10.0, 10.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.xyz = min(max(u_xlat16_7.xyz, 0.0), 1.0);
#else
    u_xlat16_7.xyz = clamp(u_xlat16_7.xyz, 0.0, 1.0);
#endif
    u_xlat1.xyz = _ES_CharacterAmbientLightColor.xyz * vec3(_ES_CharacterAmbientLightRatio);
    u_xlat9.xyz = u_xlat1.xyz * u_xlat16_7.xyz + u_xlat9.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn));
#else
    u_xlatb1 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn);
#endif
    u_xlat16_7.xyz = (bool(u_xlatb1)) ? u_xlat9.xyz : u_xlat16_5.xyz;
    u_xlat16_8.xyz = u_xlat16_5.xyz + (-u_xlat16_7.xyz);
    u_xlat16_8.xyz = vec3(u_xlat16_29) * u_xlat16_8.xyz + u_xlat16_7.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(0.00999999978<u_xlat16_29);
#else
    u_xlatb9 = 0.00999999978<u_xlat16_29;
#endif
    u_xlat16_1.xyz = (bool(u_xlatb9)) ? u_xlat16_8.xyz : u_xlat16_7.xyz;
    u_xlat16_32 = max(u_xlat16_1.z, u_xlat16_1.y);
    u_xlat16_3.w = max(u_xlat16_1.x, u_xlat16_32);
    u_xlat16_3.xyz = u_xlat16_1.xyz / u_xlat16_3.www;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(1.0<u_xlat16_3.w);
#else
    u_xlatb18 = 1.0<u_xlat16_3.w;
#endif
    u_xlat16_1.w = 1.0;
    u_xlat16_1 = (bool(u_xlatb18)) ? u_xlat16_3 : u_xlat16_1;
    u_xlat16_32 = min(u_xlat16_1.w, 1.10000002);
    u_xlat16_33 = u_xlat16_1.w + (-u_xlat16_32);
    SV_Target1.xyz = u_xlat16_1.xyz;
    u_xlat16_32 = u_xlat16_29 * u_xlat16_33 + u_xlat16_32;
    SV_Target1.w = u_xlat16_32 * 0.0500000007;
    u_xlat16_6.xyz = vec3(u_xlat16_29) * u_xlat16_6.xyz + u_xlat16_2.xyz;
    u_xlat16_2.xyz = (u_xlatb0.x) ? u_xlat16_6.xyz : u_xlat16_2.xyz;
    u_xlat16_5.xyz = (-u_xlat16_2.xyz) + u_xlat16_5.xyz;
    u_xlat16_5.xyz = vec3(u_xlat16_29) * u_xlat16_5.xyz + u_xlat16_2.xyz;
    u_xlat16_2.xyz = (bool(u_xlatb9)) ? u_xlat16_5.xyz : u_xlat16_2.xyz;
    SV_Target2.xy = u_xlat16_2.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_2.x = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb0.x) ? u_xlat16_2.x : u_xlat16_2.z;
    SV_Target2.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "MSAA_INTERPOLATION" "TOON_SPECULAR_ON" "BACK_FACE_ON" "NORMAL_MAP_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
float u_xlat12;
void main()
{
    u_xlat0.x = hlslcc_mtx4x4unity_ObjectToWorld[0].y;
    u_xlat0.y = hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat0.z = hlslcc_mtx4x4unity_ObjectToWorld[2].y;
    u_xlat1.xyw = (-_WorldSpaceCameraPos.xyz) + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat0.w = u_xlat1.y;
    u_xlat2.xyz = in_POSITION0.xyz;
    u_xlat2.w = 1.0;
    u_xlat0.x = dot(u_xlat0, u_xlat2);
    u_xlat0 = u_xlat0.xxxx * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat3.w = u_xlat1.x;
    u_xlat3.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;
    u_xlat3.y = hlslcc_mtx4x4unity_ObjectToWorld[1].x;
    u_xlat3.z = hlslcc_mtx4x4unity_ObjectToWorld[2].x;
    u_xlat3.x = dot(u_xlat3, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat3.xxxx + u_xlat0;
    u_xlat1.x = hlslcc_mtx4x4unity_ObjectToWorld[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_ObjectToWorld[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_ObjectToWorld[2].z;
    u_xlat1.x = dot(u_xlat1, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat1.xxxx + u_xlat0;
    u_xlat1.x = hlslcc_mtx4x4unity_ObjectToWorld[0].w;
    u_xlat1.y = hlslcc_mtx4x4unity_ObjectToWorld[1].w;
    u_xlat1.z = hlslcc_mtx4x4unity_ObjectToWorld[2].w;
    u_xlat1.w = hlslcc_mtx4x4unity_ObjectToWorld[3].w;
    u_xlat1.x = dot(u_xlat1, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[3] * u_xlat1.xxxx + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD1 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.zw = u_xlat0.zw;
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD3.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
    u_xlat12 = in_TANGENT0.w * unity_WorldTransformParams.w;
    u_xlat2.xyz = vec3(u_xlat12) * u_xlat2.xyz;
    vs_TEXCOORD4.y = u_xlat2.x;
    vs_TEXCOORD4.x = u_xlat1.z;
    vs_TEXCOORD4.z = u_xlat0.y;
    vs_TEXCOORD5.x = u_xlat1.x;
    vs_TEXCOORD6.x = u_xlat1.y;
    vs_TEXCOORD5.z = u_xlat0.z;
    vs_TEXCOORD6.z = u_xlat0.x;
    vs_TEXCOORD5.y = u_xlat2.y;
    vs_TEXCOORD6.y = u_xlat2.z;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	mediump vec4 _Color;
uniform 	float _MainTexAlphaUse;
uniform 	mediump float _MainTexAlphaCutoff;
uniform 	mediump float _BumpScale;
uniform 	float _UseVertexColorAO;
uniform 	mediump float _LightArea;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	float _UseCoolShadowColorOrTex;
uniform 	mediump vec3 _CoolShadowMultColor;
uniform 	float _UseShadowTransition;
uniform 	float _ShadowTransitionRange;
uniform 	float _ShadowTransitionSoftness;
uniform 	mediump vec3 _SpecularColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump float _EmissionScaler;
uniform 	mediump vec3 _EmissionColor_MHY;
uniform 	float _ES_CharacterAmbientLightOn;
uniform 	float _ES_CharacterAmbientBrightness;
uniform 	vec3 _ES_CharacterMainLightColor;
uniform 	float _ES_CharacterMainLightBrightness;
uniform 	vec3 _ES_CharacterAmbientLightColor;
uniform 	float _ES_CharacterMainLightRatio;
uniform 	float _ES_CharacterAmbientLightRatio;
uniform 	float _ES_CharacterColorTone;
uniform 	vec3 mhy_AvatarLightDir;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MainTex;
in mediump vec4 vs_COLOR0;
in highp vec2 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD5;
in highp vec3 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec4 u_xlat0;
lowp vec3 u_xlat10_0;
bool u_xlatb0;
vec3 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
bool u_xlatb1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump vec4 u_xlat16_3;
vec3 u_xlat4;
mediump vec3 u_xlat16_4;
bool u_xlatb4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
vec3 u_xlat9;
bvec2 u_xlatb9;
vec2 u_xlat18;
bool u_xlatb18;
float u_xlat27;
mediump float u_xlat16_27;
bool u_xlatb27;
mediump float u_xlat16_29;
bool u_xlatb30;
mediump float u_xlat16_32;
mediump float u_xlat16_33;
void main()
{
    u_xlat0.xy = dFdx(vs_TEXCOORD0.xy);
    u_xlat18.xy = dFdy(vs_TEXCOORD0.xy);
    u_xlat0.xy = u_xlat18.xy + u_xlat0.xy;
    u_xlat18.xy = (-u_xlat0.xy) * vec2(0.25, 0.25) + vs_TEXCOORD0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25) + vs_TEXCOORD0.xy;
    u_xlat0.xy = (int(gl_SampleID) != 0) ? u_xlat18.xy : u_xlat0.xy;
    u_xlat10_1 = textureLod(_MainTex, u_xlat0.xy, 0.0);
    u_xlat10_0.xyz = textureLod(_BumpMap, u_xlat0.xy, 0.0).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_29 = u_xlat10_1.w + (-_MainTexAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat16_29<0.0);
#else
    u_xlatb0 = u_xlat16_29<0.0;
#endif
    u_xlatb9.xy = equal(vec4(_MainTexAlphaUse), vec4(1.0, 2.0, 0.0, 0.0)).xy;
    u_xlatb0 = u_xlatb9.x && u_xlatb0;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat16_2.xy = u_xlat16_2.xy * vec2(vec2(_BumpScale, _BumpScale));
    u_xlat3.x = dot(vs_TEXCOORD4.xyz, u_xlat16_2.xyz);
    u_xlat3.y = dot(vs_TEXCOORD5.xyz, u_xlat16_2.xyz);
    u_xlat3.z = dot(vs_TEXCOORD6.xyz, u_xlat16_2.xyz);
    u_xlat16_2.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat16_2.x = inversesqrt(u_xlat16_2.x);
    u_xlat16_2.xyz = u_xlat16_2.xxx * u_xlat3.xyz;
    u_xlat16_2.xyz = (uint((gl_FrontFacing ? 0xffffffffu : uint(0))) != uint(0u)) ? u_xlat16_2.xyz : (-u_xlat16_2.xyz);
    SV_Target0.xyz = u_xlat16_2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0470588244;
    u_xlat0.xyw = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3.x = dot(u_xlat0.xyw, u_xlat0.xyw);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat0.xyw = u_xlat0.xyw * u_xlat3.xxx + mhy_AvatarLightDir.xyz;
    u_xlat3.x = dot(u_xlat0.xyw, u_xlat0.xyw);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat0.xyw = u_xlat0.xyw * u_xlat3.xxx;
    u_xlat16_29 = dot(u_xlat16_2.xyz, u_xlat0.xyw);
    u_xlat16_2.x = dot(u_xlat16_2.xyz, mhy_AvatarLightDir.xyz);
    u_xlat0.x = u_xlat16_2.x * 0.497500002 + 0.5;
    u_xlat16_2.x = max(u_xlat16_29, 0.00100000005);
    u_xlat16_2.x = log2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * _Shininess;
    u_xlat16_2.x = exp2(u_xlat16_2.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb9.x = !!(0.5<u_xlat16_2.x);
#else
    u_xlatb9.x = 0.5<u_xlat16_2.x;
#endif
    u_xlat16_2.xyz = _SpecularColor.xyz * vec3(_SpecMulti);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(0.5, 0.5, 0.5);
    u_xlat3.xyz = u_xlat16_2.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
    u_xlat3.xyz = mix(vec3(0.0, 0.0, 0.0), u_xlat3.xyz, vec3(u_xlatb9.xxx));
    u_xlat16_2.x = vs_COLOR0.x * 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb9.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorAO));
#else
    u_xlatb9.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorAO);
#endif
    u_xlat16_2.x = (u_xlatb9.x) ? u_xlat16_2.x : 0.5;
    u_xlat27 = u_xlat0.x + u_xlat16_2.x;
    u_xlat27 = u_xlat27 * 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(0.949999988<u_xlat16_2.x);
#else
    u_xlatb30 = 0.949999988<u_xlat16_2.x;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(u_xlat16_2.x<0.0500000007);
#else
    u_xlatb4 = u_xlat16_2.x<0.0500000007;
#endif
    u_xlat16_2.x = (u_xlatb30) ? 1.0 : u_xlat27;
    u_xlat16_2.x = (u_xlatb4) ? 0.0 : u_xlat16_2.x;
    u_xlat16_2.x = (u_xlatb9.x) ? u_xlat16_2.x : u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat16_2.x<_LightArea);
#else
    u_xlatb0 = u_xlat16_2.x<_LightArea;
#endif
    u_xlat16_2.x = (-u_xlat16_2.x) + _LightArea;
    u_xlat16_2.x = u_xlat16_2.x / _ShadowTransitionRange;
#ifdef UNITY_ADRENO_ES3
    u_xlatb9.x = !!(int((gl_FrontFacing ? 0xffffffffu : uint(0)))==0);
#else
    u_xlatb9.x = int((gl_FrontFacing ? 0xffffffffu : uint(0)))==0;
#endif
    u_xlatb9.x = u_xlatb0 || u_xlatb9.x;
    u_xlat16_27 = u_xlat16_2.x + 0.00999999978;
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(u_xlat16_2.x>=1.0);
#else
    u_xlatb30 = u_xlat16_2.x>=1.0;
#endif
    u_xlat16_27 = log2(u_xlat16_27);
    u_xlat27 = u_xlat16_27 * _ShadowTransitionSoftness;
    u_xlat27 = exp2(u_xlat27);
    u_xlat27 = min(u_xlat27, 1.0);
    u_xlat27 = (u_xlatb30) ? 1.0 : u_xlat27;
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition));
#else
    u_xlatb30 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition);
#endif
    u_xlat27 = (u_xlatb30) ? u_xlat27 : 1.0;
    u_xlat0.x = u_xlatb0 ? u_xlat27 : float(0.0);
    u_xlat16_4.xyz = vec3(_FirstShadowMultColor.xxyz.y + (-_CoolShadowMultColor.x), _FirstShadowMultColor.xxyz.z + (-_CoolShadowMultColor.y), float(_FirstShadowMultColor.z) + (-_CoolShadowMultColor.z));
    u_xlat4.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_4.xyz + _CoolShadowMultColor.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex));
#else
    u_xlatb27 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex);
#endif
    u_xlat16_2.xyz = (bool(u_xlatb27)) ? u_xlat4.xyz : vec3(_FirstShadowMultColor.x, _FirstShadowMultColor.y, _FirstShadowMultColor.z);
    u_xlat16_4.xyz = u_xlat16_2.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat4.xyz = u_xlat0.xxx * u_xlat16_4.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_5.xyz = (bool(u_xlatb30)) ? u_xlat4.xyz : u_xlat16_2.xyz;
    u_xlat16_6.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_6.xyz;
    u_xlat1.xyz = u_xlat16_6.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
    u_xlat0.xyw = (u_xlatb9.x) ? u_xlat16_5.xyz : u_xlat1.xyz;
    u_xlat16_5.xyz = u_xlat3.xyz + u_xlat0.xyw;
    u_xlat16_2.xyz = u_xlat16_6.xyz * u_xlat16_2.xyz + u_xlat3.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * _EmissionColor_MHY.xyz;
    u_xlat16_7.xyz = u_xlat16_6.xyz * vec3(vec3(_EmissionScaler, _EmissionScaler, _EmissionScaler)) + (-u_xlat16_5.xyz);
    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(vec3(_EmissionScaler, _EmissionScaler, _EmissionScaler)) + (-u_xlat16_2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.00999999978<u_xlat10_1.w);
#else
    u_xlatb0 = 0.00999999978<u_xlat10_1.w;
#endif
    u_xlatb0 = u_xlatb0 && u_xlatb9.y;
    u_xlat16_29 = (u_xlatb0) ? u_xlat10_1.w : 0.0;
    u_xlat16_7.xyz = vec3(u_xlat16_29) * u_xlat16_7.xyz + u_xlat16_5.xyz;
    u_xlat16_5.xyz = (bool(u_xlatb0)) ? u_xlat16_7.xyz : u_xlat16_5.xyz;
    u_xlat9.xyz = u_xlat16_5.xyz * vec3(vec3(_ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness));
    u_xlat1.xyz = _ES_CharacterMainLightColor.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat1.xyz = vec3(vec3(_ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio)) * u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat9.xyz = u_xlat9.xyz * u_xlat1.xyz;
    u_xlat16_7.xyz = u_xlat9.xyz * vec3(10.0, 10.0, 10.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.xyz = min(max(u_xlat16_7.xyz, 0.0), 1.0);
#else
    u_xlat16_7.xyz = clamp(u_xlat16_7.xyz, 0.0, 1.0);
#endif
    u_xlat1.xyz = _ES_CharacterAmbientLightColor.xyz * vec3(_ES_CharacterAmbientLightRatio);
    u_xlat9.xyz = u_xlat1.xyz * u_xlat16_7.xyz + u_xlat9.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn));
#else
    u_xlatb1 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn);
#endif
    u_xlat16_7.xyz = (bool(u_xlatb1)) ? u_xlat9.xyz : u_xlat16_5.xyz;
    u_xlat16_8.xyz = u_xlat16_5.xyz + (-u_xlat16_7.xyz);
    u_xlat16_8.xyz = vec3(u_xlat16_29) * u_xlat16_8.xyz + u_xlat16_7.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb9.x = !!(0.00999999978<u_xlat16_29);
#else
    u_xlatb9.x = 0.00999999978<u_xlat16_29;
#endif
    u_xlat16_1.xyz = (u_xlatb9.x) ? u_xlat16_8.xyz : u_xlat16_7.xyz;
    u_xlat16_32 = max(u_xlat16_1.z, u_xlat16_1.y);
    u_xlat16_3.w = max(u_xlat16_1.x, u_xlat16_32);
    u_xlat16_3.xyz = u_xlat16_1.xyz / u_xlat16_3.www;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(1.0<u_xlat16_3.w);
#else
    u_xlatb18 = 1.0<u_xlat16_3.w;
#endif
    u_xlat16_1.w = 1.0;
    u_xlat16_1 = (bool(u_xlatb18)) ? u_xlat16_3 : u_xlat16_1;
    u_xlat16_32 = min(u_xlat16_1.w, 1.10000002);
    u_xlat16_33 = u_xlat16_1.w + (-u_xlat16_32);
    SV_Target1.xyz = u_xlat16_1.xyz;
    u_xlat16_32 = u_xlat16_29 * u_xlat16_33 + u_xlat16_32;
    SV_Target1.w = u_xlat16_32 * 0.0500000007;
    u_xlat16_6.xyz = vec3(u_xlat16_29) * u_xlat16_6.xyz + u_xlat16_2.xyz;
    u_xlat16_2.xyz = (bool(u_xlatb0)) ? u_xlat16_6.xyz : u_xlat16_2.xyz;
    u_xlat16_5.xyz = (-u_xlat16_2.xyz) + u_xlat16_5.xyz;
    u_xlat16_5.xyz = vec3(u_xlat16_29) * u_xlat16_5.xyz + u_xlat16_2.xyz;
    u_xlat16_2.xyz = (u_xlatb9.x) ? u_xlat16_5.xyz : u_xlat16_2.xyz;
    SV_Target2.xy = u_xlat16_2.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_2.x = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb0) ? u_xlat16_2.x : u_xlat16_2.z;
    SV_Target2.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "LINE_INTERPOLATION" "TOON_SPECULAR_ON" "BACK_FACE_ON" "NORMAL_MAP_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
float u_xlat12;
void main()
{
    u_xlat0.x = hlslcc_mtx4x4unity_ObjectToWorld[0].y;
    u_xlat0.y = hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat0.z = hlslcc_mtx4x4unity_ObjectToWorld[2].y;
    u_xlat1.xyw = (-_WorldSpaceCameraPos.xyz) + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat0.w = u_xlat1.y;
    u_xlat2.xyz = in_POSITION0.xyz;
    u_xlat2.w = 1.0;
    u_xlat0.x = dot(u_xlat0, u_xlat2);
    u_xlat0 = u_xlat0.xxxx * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat3.w = u_xlat1.x;
    u_xlat3.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;
    u_xlat3.y = hlslcc_mtx4x4unity_ObjectToWorld[1].x;
    u_xlat3.z = hlslcc_mtx4x4unity_ObjectToWorld[2].x;
    u_xlat3.x = dot(u_xlat3, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat3.xxxx + u_xlat0;
    u_xlat1.x = hlslcc_mtx4x4unity_ObjectToWorld[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_ObjectToWorld[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_ObjectToWorld[2].z;
    u_xlat1.x = dot(u_xlat1, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat1.xxxx + u_xlat0;
    u_xlat1.x = hlslcc_mtx4x4unity_ObjectToWorld[0].w;
    u_xlat1.y = hlslcc_mtx4x4unity_ObjectToWorld[1].w;
    u_xlat1.z = hlslcc_mtx4x4unity_ObjectToWorld[2].w;
    u_xlat1.w = hlslcc_mtx4x4unity_ObjectToWorld[3].w;
    u_xlat1.x = dot(u_xlat1, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[3] * u_xlat1.xxxx + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD1 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.zw = u_xlat0.zw;
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD3.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
    u_xlat12 = in_TANGENT0.w * unity_WorldTransformParams.w;
    u_xlat2.xyz = vec3(u_xlat12) * u_xlat2.xyz;
    vs_TEXCOORD4.y = u_xlat2.x;
    vs_TEXCOORD4.x = u_xlat1.z;
    vs_TEXCOORD4.z = u_xlat0.y;
    vs_TEXCOORD5.x = u_xlat1.x;
    vs_TEXCOORD6.x = u_xlat1.y;
    vs_TEXCOORD5.z = u_xlat0.z;
    vs_TEXCOORD6.z = u_xlat0.x;
    vs_TEXCOORD5.y = u_xlat2.y;
    vs_TEXCOORD6.y = u_xlat2.z;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	mediump vec4 _Color;
uniform 	float _MainTexAlphaUse;
uniform 	mediump float _MainTexAlphaCutoff;
uniform 	mediump float _BumpScale;
uniform 	float _UseVertexColorAO;
uniform 	mediump float _LightArea;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	float _UseCoolShadowColorOrTex;
uniform 	mediump vec3 _CoolShadowMultColor;
uniform 	float _UseShadowTransition;
uniform 	float _ShadowTransitionRange;
uniform 	float _ShadowTransitionSoftness;
uniform 	mediump vec3 _SpecularColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump float _EmissionScaler;
uniform 	mediump vec3 _EmissionColor_MHY;
uniform 	float _ES_CharacterAmbientLightOn;
uniform 	float _ES_CharacterAmbientBrightness;
uniform 	vec3 _ES_CharacterMainLightColor;
uniform 	float _ES_CharacterMainLightBrightness;
uniform 	vec3 _ES_CharacterAmbientLightColor;
uniform 	float _ES_CharacterMainLightRatio;
uniform 	float _ES_CharacterAmbientLightRatio;
uniform 	float _ES_CharacterColorTone;
uniform 	vec3 mhy_AvatarLightDir;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MainTex;
in mediump vec4 vs_COLOR0;
in highp vec2 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD5;
in highp vec3 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec4 u_xlat0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
vec3 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
bool u_xlatb1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump vec4 u_xlat16_3;
vec3 u_xlat4;
mediump vec3 u_xlat16_4;
bool u_xlatb4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
vec3 u_xlat9;
bool u_xlatb9;
bool u_xlatb18;
float u_xlat27;
mediump float u_xlat16_27;
bool u_xlatb27;
mediump float u_xlat16_29;
bool u_xlatb30;
mediump float u_xlat16_32;
mediump float u_xlat16_33;
void main()
{
    u_xlatb0.xy = equal(vec4(_MainTexAlphaUse), vec4(1.0, 2.0, 0.0, 0.0)).xy;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy, -1.0);
    u_xlat16_2.x = u_xlat10_1.w + (-_MainTexAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(u_xlat16_2.x<0.0);
#else
    u_xlatb18 = u_xlat16_2.x<0.0;
#endif
    u_xlatb0.x = u_xlatb0.x && u_xlatb18;
    if((int(u_xlatb0.x) * int(0xffffffffu))!=0){discard;}
    u_xlat10_0.xzw = texture(_BumpMap, vs_TEXCOORD0.xy, -1.0).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xzw * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_2.xy = u_xlat16_2.xy * vec2(vec2(_BumpScale, _BumpScale));
    u_xlat3.x = dot(vs_TEXCOORD4.xyz, u_xlat16_2.xyz);
    u_xlat3.y = dot(vs_TEXCOORD5.xyz, u_xlat16_2.xyz);
    u_xlat3.z = dot(vs_TEXCOORD6.xyz, u_xlat16_2.xyz);
    u_xlat16_2.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat16_2.x = inversesqrt(u_xlat16_2.x);
    u_xlat16_2.xyz = u_xlat16_2.xxx * u_xlat3.xyz;
    u_xlat16_2.xyz = (uint((gl_FrontFacing ? 0xffffffffu : uint(0))) != uint(0u)) ? u_xlat16_2.xyz : (-u_xlat16_2.xyz);
    SV_Target0.xyz = u_xlat16_2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0470588244;
    u_xlat0.xzw = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat0.xzw = u_xlat0.xzw * u_xlat3.xxx + mhy_AvatarLightDir.xyz;
    u_xlat3.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat0.xzw = u_xlat0.xzw * u_xlat3.xxx;
    u_xlat16_29 = dot(u_xlat16_2.xyz, u_xlat0.xzw);
    u_xlat16_2.x = dot(u_xlat16_2.xyz, mhy_AvatarLightDir.xyz);
    u_xlat0.x = u_xlat16_2.x * 0.497500002 + 0.5;
    u_xlat16_2.x = max(u_xlat16_29, 0.00100000005);
    u_xlat16_2.x = log2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * _Shininess;
    u_xlat16_2.x = exp2(u_xlat16_2.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(0.5<u_xlat16_2.x);
#else
    u_xlatb18 = 0.5<u_xlat16_2.x;
#endif
    u_xlat16_2.xyz = _SpecularColor.xyz * vec3(_SpecMulti);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(0.5, 0.5, 0.5);
    u_xlat3.xyz = u_xlat16_2.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
    u_xlat3.xyz = mix(vec3(0.0, 0.0, 0.0), u_xlat3.xyz, vec3(bvec3(u_xlatb18)));
    u_xlat16_2.x = vs_COLOR0.x * 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorAO));
#else
    u_xlatb18 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorAO);
#endif
    u_xlat16_2.x = (u_xlatb18) ? u_xlat16_2.x : 0.5;
    u_xlat27 = u_xlat0.x + u_xlat16_2.x;
    u_xlat27 = u_xlat27 * 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(0.949999988<u_xlat16_2.x);
#else
    u_xlatb30 = 0.949999988<u_xlat16_2.x;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(u_xlat16_2.x<0.0500000007);
#else
    u_xlatb4 = u_xlat16_2.x<0.0500000007;
#endif
    u_xlat16_2.x = (u_xlatb30) ? 1.0 : u_xlat27;
    u_xlat16_2.x = (u_xlatb4) ? 0.0 : u_xlat16_2.x;
    u_xlat16_2.x = (u_xlatb18) ? u_xlat16_2.x : u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(u_xlat16_2.x<_LightArea);
#else
    u_xlatb0.x = u_xlat16_2.x<_LightArea;
#endif
    u_xlat16_2.x = (-u_xlat16_2.x) + _LightArea;
    u_xlat16_2.x = u_xlat16_2.x / _ShadowTransitionRange;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(int((gl_FrontFacing ? 0xffffffffu : uint(0)))==0);
#else
    u_xlatb18 = int((gl_FrontFacing ? 0xffffffffu : uint(0)))==0;
#endif
    u_xlatb18 = u_xlatb0.x || u_xlatb18;
    u_xlat16_27 = u_xlat16_2.x + 0.00999999978;
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(u_xlat16_2.x>=1.0);
#else
    u_xlatb30 = u_xlat16_2.x>=1.0;
#endif
    u_xlat16_27 = log2(u_xlat16_27);
    u_xlat27 = u_xlat16_27 * _ShadowTransitionSoftness;
    u_xlat27 = exp2(u_xlat27);
    u_xlat27 = min(u_xlat27, 1.0);
    u_xlat27 = (u_xlatb30) ? 1.0 : u_xlat27;
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition));
#else
    u_xlatb30 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition);
#endif
    u_xlat27 = (u_xlatb30) ? u_xlat27 : 1.0;
    u_xlat0.x = u_xlatb0.x ? u_xlat27 : float(0.0);
    u_xlat16_4.xyz = vec3(_FirstShadowMultColor.xxyz.y + (-_CoolShadowMultColor.x), _FirstShadowMultColor.xxyz.z + (-_CoolShadowMultColor.y), float(_FirstShadowMultColor.z) + (-_CoolShadowMultColor.z));
    u_xlat4.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_4.xyz + _CoolShadowMultColor.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex));
#else
    u_xlatb27 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex);
#endif
    u_xlat16_2.xyz = (bool(u_xlatb27)) ? u_xlat4.xyz : vec3(_FirstShadowMultColor.x, _FirstShadowMultColor.y, _FirstShadowMultColor.z);
    u_xlat16_4.xyz = u_xlat16_2.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat4.xyz = u_xlat0.xxx * u_xlat16_4.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_5.xyz = (bool(u_xlatb30)) ? u_xlat4.xyz : u_xlat16_2.xyz;
    u_xlat16_6.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_6.xyz;
    u_xlat1.xyz = u_xlat16_6.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
    u_xlat0.xzw = (bool(u_xlatb18)) ? u_xlat16_5.xyz : u_xlat1.xyz;
    u_xlat16_5.xyz = u_xlat3.xyz + u_xlat0.xzw;
    u_xlat16_2.xyz = u_xlat16_6.xyz * u_xlat16_2.xyz + u_xlat3.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * _EmissionColor_MHY.xyz;
    u_xlat16_7.xyz = u_xlat16_6.xyz * vec3(vec3(_EmissionScaler, _EmissionScaler, _EmissionScaler)) + (-u_xlat16_5.xyz);
    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(vec3(_EmissionScaler, _EmissionScaler, _EmissionScaler)) + (-u_xlat16_2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(0.00999999978<u_xlat10_1.w);
#else
    u_xlatb0.x = 0.00999999978<u_xlat10_1.w;
#endif
    u_xlatb0.x = u_xlatb0.x && u_xlatb0.y;
    u_xlat16_29 = (u_xlatb0.x) ? u_xlat10_1.w : 0.0;
    u_xlat16_7.xyz = vec3(u_xlat16_29) * u_xlat16_7.xyz + u_xlat16_5.xyz;
    u_xlat16_5.xyz = (u_xlatb0.x) ? u_xlat16_7.xyz : u_xlat16_5.xyz;
    u_xlat9.xyz = u_xlat16_5.xyz * vec3(vec3(_ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness));
    u_xlat1.xyz = _ES_CharacterMainLightColor.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat1.xyz = vec3(vec3(_ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio)) * u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat9.xyz = u_xlat9.xyz * u_xlat1.xyz;
    u_xlat16_7.xyz = u_xlat9.xyz * vec3(10.0, 10.0, 10.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.xyz = min(max(u_xlat16_7.xyz, 0.0), 1.0);
#else
    u_xlat16_7.xyz = clamp(u_xlat16_7.xyz, 0.0, 1.0);
#endif
    u_xlat1.xyz = _ES_CharacterAmbientLightColor.xyz * vec3(_ES_CharacterAmbientLightRatio);
    u_xlat9.xyz = u_xlat1.xyz * u_xlat16_7.xyz + u_xlat9.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn));
#else
    u_xlatb1 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn);
#endif
    u_xlat16_7.xyz = (bool(u_xlatb1)) ? u_xlat9.xyz : u_xlat16_5.xyz;
    u_xlat16_8.xyz = u_xlat16_5.xyz + (-u_xlat16_7.xyz);
    u_xlat16_8.xyz = vec3(u_xlat16_29) * u_xlat16_8.xyz + u_xlat16_7.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(0.00999999978<u_xlat16_29);
#else
    u_xlatb9 = 0.00999999978<u_xlat16_29;
#endif
    u_xlat16_1.xyz = (bool(u_xlatb9)) ? u_xlat16_8.xyz : u_xlat16_7.xyz;
    u_xlat16_32 = max(u_xlat16_1.z, u_xlat16_1.y);
    u_xlat16_3.w = max(u_xlat16_1.x, u_xlat16_32);
    u_xlat16_3.xyz = u_xlat16_1.xyz / u_xlat16_3.www;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(1.0<u_xlat16_3.w);
#else
    u_xlatb18 = 1.0<u_xlat16_3.w;
#endif
    u_xlat16_1.w = 1.0;
    u_xlat16_1 = (bool(u_xlatb18)) ? u_xlat16_3 : u_xlat16_1;
    u_xlat16_32 = min(u_xlat16_1.w, 1.10000002);
    u_xlat16_33 = u_xlat16_1.w + (-u_xlat16_32);
    SV_Target1.xyz = u_xlat16_1.xyz;
    u_xlat16_32 = u_xlat16_29 * u_xlat16_33 + u_xlat16_32;
    SV_Target1.w = u_xlat16_32 * 0.0500000007;
    u_xlat16_6.xyz = vec3(u_xlat16_29) * u_xlat16_6.xyz + u_xlat16_2.xyz;
    u_xlat16_2.xyz = (u_xlatb0.x) ? u_xlat16_6.xyz : u_xlat16_2.xyz;
    u_xlat16_5.xyz = (-u_xlat16_2.xyz) + u_xlat16_5.xyz;
    u_xlat16_5.xyz = vec3(u_xlat16_29) * u_xlat16_5.xyz + u_xlat16_2.xyz;
    u_xlat16_2.xyz = (bool(u_xlatb9)) ? u_xlat16_5.xyz : u_xlat16_2.xyz;
    SV_Target2.xy = u_xlat16_2.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_2.x = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb0.x) ? u_xlat16_2.x : u_xlat16_2.z;
    SV_Target2.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "TOON_SPECULAR_ON" "BACK_FACE_ON" "METAL_MAT" "NORMAL_MAP_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
float u_xlat12;
void main()
{
    u_xlat0.x = hlslcc_mtx4x4unity_ObjectToWorld[0].y;
    u_xlat0.y = hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat0.z = hlslcc_mtx4x4unity_ObjectToWorld[2].y;
    u_xlat1.xyw = (-_WorldSpaceCameraPos.xyz) + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat0.w = u_xlat1.y;
    u_xlat2.xyz = in_POSITION0.xyz;
    u_xlat2.w = 1.0;
    u_xlat0.x = dot(u_xlat0, u_xlat2);
    u_xlat0 = u_xlat0.xxxx * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat3.w = u_xlat1.x;
    u_xlat3.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;
    u_xlat3.y = hlslcc_mtx4x4unity_ObjectToWorld[1].x;
    u_xlat3.z = hlslcc_mtx4x4unity_ObjectToWorld[2].x;
    u_xlat3.x = dot(u_xlat3, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat3.xxxx + u_xlat0;
    u_xlat1.x = hlslcc_mtx4x4unity_ObjectToWorld[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_ObjectToWorld[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_ObjectToWorld[2].z;
    u_xlat1.x = dot(u_xlat1, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat1.xxxx + u_xlat0;
    u_xlat1.x = hlslcc_mtx4x4unity_ObjectToWorld[0].w;
    u_xlat1.y = hlslcc_mtx4x4unity_ObjectToWorld[1].w;
    u_xlat1.z = hlslcc_mtx4x4unity_ObjectToWorld[2].w;
    u_xlat1.w = hlslcc_mtx4x4unity_ObjectToWorld[3].w;
    u_xlat1.x = dot(u_xlat1, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[3] * u_xlat1.xxxx + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD1 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.zw = u_xlat0.zw;
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD3.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
    u_xlat12 = in_TANGENT0.w * unity_WorldTransformParams.w;
    u_xlat2.xyz = vec3(u_xlat12) * u_xlat2.xyz;
    vs_TEXCOORD4.y = u_xlat2.x;
    vs_TEXCOORD4.x = u_xlat1.z;
    vs_TEXCOORD4.z = u_xlat0.y;
    vs_TEXCOORD5.x = u_xlat1.x;
    vs_TEXCOORD6.x = u_xlat1.y;
    vs_TEXCOORD5.z = u_xlat0.z;
    vs_TEXCOORD6.z = u_xlat0.x;
    vs_TEXCOORD5.y = u_xlat2.y;
    vs_TEXCOORD6.y = u_xlat2.z;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToCamera[4];
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	mediump vec4 _Color;
uniform 	float _MainTexAlphaUse;
uniform 	mediump float _MainTexAlphaCutoff;
uniform 	mediump float _BumpScale;
uniform 	float _UseVertexColorAO;
uniform 	mediump float _LightArea;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	float _UseCoolShadowColorOrTex;
uniform 	mediump vec3 _CoolShadowMultColor;
uniform 	float _UseShadowTransition;
uniform 	float _ShadowTransitionRange;
uniform 	float _ShadowTransitionSoftness;
uniform 	mediump vec3 _SpecularColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump float _EmissionScaler;
uniform 	mediump vec3 _EmissionColor_MHY;
uniform 	mediump float _MTMapBrightness;
uniform 	float _MTMapTileScale;
uniform 	mediump vec3 _MTMapLightColor;
uniform 	mediump vec3 _MTMapDarkColor;
uniform 	mediump vec3 _MTShadowMultiColor;
uniform 	mediump float _MTShininess;
uniform 	mediump vec3 _MTSpecularColor;
uniform 	mediump float _MTSpecularScale;
uniform 	float _ES_CharacterAmbientLightOn;
uniform 	float _ES_CharacterAmbientBrightness;
uniform 	vec3 _ES_CharacterMainLightColor;
uniform 	float _ES_CharacterMainLightBrightness;
uniform 	vec3 _ES_CharacterAmbientLightColor;
uniform 	float _ES_CharacterMainLightRatio;
uniform 	float _ES_CharacterAmbientLightRatio;
uniform 	float _ES_CharacterColorTone;
uniform 	vec3 mhy_AvatarLightDir;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MTMap;
in mediump vec4 vs_COLOR0;
in highp vec2 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD5;
in highp vec3 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec3 u_xlat10_0;
mediump vec3 u_xlat16_1;
float u_xlat2;
mediump vec4 u_xlat16_2;
lowp vec4 u_xlat10_2;
bool u_xlatb2;
vec3 u_xlat3;
lowp vec3 u_xlat10_3;
bvec2 u_xlatb3;
mediump vec3 u_xlat16_4;
mediump float u_xlat16_5;
vec3 u_xlat6;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
vec3 u_xlat10;
mediump vec3 u_xlat16_10;
vec3 u_xlat11;
mediump vec3 u_xlat16_11;
vec3 u_xlat14;
bool u_xlatb14;
vec3 u_xlat15;
mediump vec3 u_xlat16_17;
mediump float u_xlat16_19;
float u_xlat26;
bool u_xlatb26;
float u_xlat36;
bool u_xlatb36;
mediump float u_xlat16_37;
float u_xlat38;
mediump float u_xlat16_38;
lowp float u_xlat10_38;
bool u_xlatb38;
void main()
{
    u_xlat10_0.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_1.xy = u_xlat16_1.xy * vec2(vec2(_BumpScale, _BumpScale));
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, u_xlat16_1.xyz);
    u_xlat0.y = dot(vs_TEXCOORD5.xyz, u_xlat16_1.xyz);
    u_xlat0.z = dot(vs_TEXCOORD6.xyz, u_xlat16_1.xyz);
    u_xlat16_1.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat16_1.x = inversesqrt(u_xlat16_1.x);
    u_xlat16_1.xyz = u_xlat0.xyz * u_xlat16_1.xxx;
    u_xlat16_1.xyz = (uint((gl_FrontFacing ? 0xffffffffu : uint(0))) != uint(0u)) ? u_xlat16_1.xyz : (-u_xlat16_1.xyz);
    u_xlat0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat36 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat36 = inversesqrt(u_xlat36);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat36) + mhy_AvatarLightDir.xyz;
    u_xlat36 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat36 = inversesqrt(u_xlat36);
    u_xlat0.xyz = vec3(u_xlat36) * u_xlat0.xyz;
    u_xlat10_2 = texture(_MainTex, vs_TEXCOORD0.xy, -1.0);
    u_xlatb3.xy = equal(vec4(_MainTexAlphaUse), vec4(1.0, 2.0, 0.0, 0.0)).xy;
    u_xlat16_37 = u_xlat10_2.w + (-_MainTexAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb36 = !!(u_xlat16_37<0.0);
#else
    u_xlatb36 = u_xlat16_37<0.0;
#endif
    u_xlatb36 = u_xlatb3.x && u_xlatb36;
    if((int(u_xlatb36) * int(0xffffffffu))!=0){discard;}
    u_xlat10_3.xz = texture(_LightMapTex, vs_TEXCOORD0.xy, -1.0).xz;
    u_xlat16_4.xyz = u_xlat10_2.xyz * _Color.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb36 = !!(0.00999999978<u_xlat10_2.w);
#else
    u_xlatb36 = 0.00999999978<u_xlat10_2.w;
#endif
    u_xlatb36 = u_xlatb36 && u_xlatb3.y;
    u_xlat16_5 = (u_xlatb36) ? u_xlat10_2.w : 0.0;
    u_xlat16_17.x = dot(u_xlat16_1.xyz, mhy_AvatarLightDir.xyz);
    u_xlat2 = u_xlat16_17.x * 0.497500002 + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorAO));
#else
    u_xlatb14 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorAO);
#endif
    u_xlat16_17.x = vs_COLOR0.x * 0.5;
    u_xlat16_17.x = (u_xlatb14) ? u_xlat16_17.x : 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb26 = !!(u_xlat16_17.x<0.0500000007);
#else
    u_xlatb26 = u_xlat16_17.x<0.0500000007;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb38 = !!(0.949999988<u_xlat16_17.x);
#else
    u_xlatb38 = 0.949999988<u_xlat16_17.x;
#endif
    u_xlat15.x = u_xlat2 + u_xlat16_17.x;
    u_xlat15.x = u_xlat15.x * 0.5;
    u_xlat16_17.x = (u_xlatb38) ? 1.0 : u_xlat15.x;
    u_xlat16_17.x = (u_xlatb26) ? 0.0 : u_xlat16_17.x;
    u_xlat16_17.x = (u_xlatb14) ? u_xlat16_17.x : u_xlat2;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat16_17.x<_LightArea);
#else
    u_xlatb2 = u_xlat16_17.x<_LightArea;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition));
#else
    u_xlatb14 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition);
#endif
    u_xlat16_17.x = (-u_xlat16_17.x) + _LightArea;
    u_xlat16_17.x = u_xlat16_17.x / _ShadowTransitionRange;
#ifdef UNITY_ADRENO_ES3
    u_xlatb26 = !!(u_xlat16_17.x>=1.0);
#else
    u_xlatb26 = u_xlat16_17.x>=1.0;
#endif
    u_xlat16_38 = u_xlat16_17.x + 0.00999999978;
    u_xlat16_38 = log2(u_xlat16_38);
    u_xlat38 = u_xlat16_38 * _ShadowTransitionSoftness;
    u_xlat38 = exp2(u_xlat38);
    u_xlat38 = min(u_xlat38, 1.0);
    u_xlat26 = (u_xlatb26) ? 1.0 : u_xlat38;
    u_xlat26 = (u_xlatb14) ? u_xlat26 : 1.0;
    u_xlat26 = u_xlatb2 ? u_xlat26 : float(0.0);
    u_xlat2 = u_xlatb2 ? 1.0 : float(0.0);
    u_xlat2 = ((gl_FrontFacing ? 0xffffffffu : uint(0)) != uint(0u)) ? u_xlat2 : 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb38 = !!(0.899999976<u_xlat10_3.x);
#else
    u_xlatb38 = 0.899999976<u_xlat10_3.x;
#endif
    if(u_xlatb38){
        u_xlat15.xz = u_xlat16_1.yy * hlslcc_mtx4x4unity_WorldToCamera[1].xy;
        u_xlat15.xz = hlslcc_mtx4x4unity_WorldToCamera[0].xy * u_xlat16_1.xx + u_xlat15.xz;
        u_xlat6.yz = hlslcc_mtx4x4unity_WorldToCamera[2].xy * u_xlat16_1.zz + u_xlat15.xz;
        u_xlat6.x = u_xlat6.y * _MTMapTileScale;
        u_xlat16_17.xy = u_xlat6.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
        u_xlat10_38 = texture(_MTMap, u_xlat16_17.xy).x;
        u_xlat16_17.x = u_xlat10_38 * _MTMapBrightness;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_17.x = min(max(u_xlat16_17.x, 0.0), 1.0);
#else
        u_xlat16_17.x = clamp(u_xlat16_17.x, 0.0, 1.0);
#endif
        u_xlat16_7.xyz = _MTMapLightColor.xyz + (-_MTMapDarkColor.xyz);
        u_xlat16_17.xyz = u_xlat16_17.xxx * u_xlat16_7.xyz + _MTMapDarkColor.xyz;
        u_xlat16_17.xyz = u_xlat16_4.xyz * u_xlat16_17.xyz;
        u_xlat16_7.x = dot(u_xlat16_1.xyz, u_xlat0.xyz);
        u_xlat16_7.x = max(u_xlat16_7.x, 0.00100000005);
        u_xlat16_7.x = log2(u_xlat16_7.x);
        u_xlat16_7.x = u_xlat16_7.x * _MTShininess;
        u_xlat16_7.x = exp2(u_xlat16_7.x);
        u_xlat16_7.x = u_xlat16_7.x * _MTSpecularScale;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
        u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
        u_xlat16_7.xyz = u_xlat16_7.xxx * _MTSpecularColor.xyz;
        u_xlat16_7.xyz = u_xlat10_3.zzz * u_xlat16_7.xyz;
        u_xlat16_8.xyz = u_xlat16_17.xyz * _MTShadowMultiColor.xyz;
        u_xlat16_6.xyz = _MTShadowMultiColor.xyz + vec3(-1.0, -1.0, -1.0);
        u_xlat6.xyz = vec3(u_xlat26) * u_xlat16_6.xyz + vec3(1.0, 1.0, 1.0);
        u_xlat16_9.xyz = (bool(u_xlatb14)) ? u_xlat6.xyz : _MTShadowMultiColor.xyz;
#ifdef UNITY_ADRENO_ES3
        u_xlatb38 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(u_xlat2));
#else
        u_xlatb38 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(u_xlat2);
#endif
        u_xlat16_9.xyz = u_xlat16_17.xyz * u_xlat16_9.xyz;
        u_xlat6.xyz = u_xlat16_17.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
        u_xlat6.xyz = (bool(u_xlatb38)) ? u_xlat16_9.xyz : u_xlat6.xyz;
        u_xlat10.xyz = u_xlat16_7.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
        u_xlat16_6.xyz = u_xlat6.xyz;
        u_xlat16_10.xyz = u_xlat10.xyz;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb38 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex));
#else
        u_xlatb38 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex);
#endif
        u_xlat16_11.xyz = vec3(_FirstShadowMultColor.xxyz.y + (-_CoolShadowMultColor.x), _FirstShadowMultColor.xxyz.z + (-_CoolShadowMultColor.y), float(_FirstShadowMultColor.z) + (-_CoolShadowMultColor.z));
        u_xlat11.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_11.xyz + _CoolShadowMultColor.xyz;
        u_xlat16_17.xyz = (bool(u_xlatb38)) ? u_xlat11.xyz : vec3(_FirstShadowMultColor.x, _FirstShadowMultColor.y, _FirstShadowMultColor.z);
        u_xlat16_8.xyz = u_xlat16_4.xyz * u_xlat16_17.xyz;
        u_xlat16_11.xyz = u_xlat16_17.xyz + vec3(-1.0, -1.0, -1.0);
        u_xlat11.xyz = vec3(u_xlat26) * u_xlat16_11.xyz + vec3(1.0, 1.0, 1.0);
        u_xlat16_17.xyz = (bool(u_xlatb14)) ? u_xlat11.xyz : u_xlat16_17.xyz;
#ifdef UNITY_ADRENO_ES3
        u_xlatb2 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(u_xlat2));
#else
        u_xlatb2 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(u_xlat2);
#endif
        u_xlat16_17.xyz = u_xlat16_4.xyz * u_xlat16_17.xyz;
        u_xlat14.xyz = u_xlat16_4.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
        u_xlat6.xyz = (bool(u_xlatb2)) ? u_xlat16_17.xyz : u_xlat14.xyz;
        u_xlat16_17.x = dot(u_xlat16_1.xyz, u_xlat0.xyz);
        u_xlat16_17.x = max(u_xlat16_17.x, 0.00100000005);
        u_xlat16_17.x = log2(u_xlat16_17.x);
        u_xlat16_17.x = u_xlat16_17.x * _Shininess;
        u_xlat16_17.x = exp2(u_xlat16_17.x);
        u_xlat2 = (-u_xlat10_3.z) + 1.0;
#ifdef UNITY_ADRENO_ES3
        u_xlatb2 = !!(u_xlat2<u_xlat16_17.x);
#else
        u_xlatb2 = u_xlat2<u_xlat16_17.x;
#endif
        u_xlat16_17.xyz = _SpecularColor.xyz * vec3(_SpecMulti);
        u_xlat16_17.xyz = u_xlat10_3.xxx * u_xlat16_17.xyz;
        u_xlat14.xyz = u_xlat16_17.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
        u_xlat10.xyz = mix(vec3(0.0, 0.0, 0.0), u_xlat14.xyz, vec3(bvec3(u_xlatb2)));
        u_xlat16_6.xyz = u_xlat6.xyz;
        u_xlat16_10.xyz = u_xlat10.xyz;
    //ENDIF
    }
    u_xlat16_17.xyz = u_xlat16_4.xyz * _EmissionColor_MHY.xyz;
    u_xlat16_7.xyz = u_xlat16_6.xyz + u_xlat16_10.xyz;
    u_xlat16_8.xyz = u_xlat16_8.xyz + u_xlat16_10.xyz;
    u_xlat16_9.xyz = u_xlat16_17.xyz * vec3(vec3(_EmissionScaler, _EmissionScaler, _EmissionScaler)) + (-u_xlat16_7.xyz);
    u_xlat16_9.xyz = vec3(u_xlat16_5) * u_xlat16_9.xyz + u_xlat16_7.xyz;
    u_xlat16_17.xyz = u_xlat16_17.xyz * vec3(vec3(_EmissionScaler, _EmissionScaler, _EmissionScaler)) + (-u_xlat16_8.xyz);
    u_xlat16_17.xyz = vec3(u_xlat16_5) * u_xlat16_17.xyz + u_xlat16_8.xyz;
    u_xlat16_7.xyz = (bool(u_xlatb36)) ? u_xlat16_9.xyz : u_xlat16_7.xyz;
    u_xlat16_17.xyz = (bool(u_xlatb36)) ? u_xlat16_17.xyz : u_xlat16_8.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(0.00999999978<u_xlat16_5);
#else
    u_xlatb2 = 0.00999999978<u_xlat16_5;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn));
#else
    u_xlatb14 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn);
#endif
    u_xlat3.xyz = u_xlat16_7.xyz * vec3(vec3(_ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness));
    u_xlat11.xyz = _ES_CharacterMainLightColor.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat11.xyz = vec3(vec3(_ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio)) * u_xlat11.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat3.xyz = u_xlat3.xyz * u_xlat11.xyz;
    u_xlat11.xyz = _ES_CharacterAmbientLightColor.xyz * vec3(_ES_CharacterAmbientLightRatio);
    u_xlat16_8.xyz = u_xlat3.xyz * vec3(10.0, 10.0, 10.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_8.xyz = min(max(u_xlat16_8.xyz, 0.0), 1.0);
#else
    u_xlat16_8.xyz = clamp(u_xlat16_8.xyz, 0.0, 1.0);
#endif
    u_xlat3.xyz = u_xlat11.xyz * u_xlat16_8.xyz + u_xlat3.xyz;
    u_xlat16_8.xyz = (bool(u_xlatb14)) ? u_xlat3.xyz : u_xlat16_7.xyz;
    u_xlat16_9.xyz = u_xlat16_7.xyz + (-u_xlat16_8.xyz);
    u_xlat16_9.xyz = vec3(u_xlat16_5) * u_xlat16_9.xyz + u_xlat16_8.xyz;
    u_xlat16_7.xyz = (-u_xlat16_17.xyz) + u_xlat16_7.xyz;
    u_xlat16_7.xyz = vec3(u_xlat16_5) * u_xlat16_7.xyz + u_xlat16_17.xyz;
    u_xlat16_0.xyz = (bool(u_xlatb2)) ? u_xlat16_9.xyz : u_xlat16_8.xyz;
    u_xlat16_17.xyz = (bool(u_xlatb2)) ? u_xlat16_7.xyz : u_xlat16_17.xyz;
    u_xlat16_7.x = max(u_xlat16_0.z, u_xlat16_0.y);
    u_xlat16_2.w = max(u_xlat16_0.x, u_xlat16_7.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb3.x = !!(1.0<u_xlat16_2.w);
#else
    u_xlatb3.x = 1.0<u_xlat16_2.w;
#endif
    u_xlat16_2.xyz = u_xlat16_0.xyz / u_xlat16_2.www;
    u_xlat16_0.w = 1.0;
    u_xlat16_0 = (u_xlatb3.x) ? u_xlat16_2 : u_xlat16_0;
    u_xlat16_7.x = min(u_xlat16_0.w, 1.10000002);
    u_xlat16_19 = u_xlat16_0.w + (-u_xlat16_7.x);
    u_xlat16_5 = u_xlat16_5 * u_xlat16_19 + u_xlat16_7.x;
    SV_Target1.w = u_xlat16_5 * 0.0500000007;
    SV_Target0.xyz = u_xlat16_1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb3.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb3.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_5 = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb3.x) ? u_xlat16_5 : u_xlat16_17.z;
    SV_Target0.w = 0.0470588244;
    SV_Target1.xyz = u_xlat16_0.xyz;
    SV_Target2.xy = u_xlat16_17.xy;
    SV_Target2.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "MSAA_INTERPOLATION" "TOON_SPECULAR_ON" "BACK_FACE_ON" "METAL_MAT" "NORMAL_MAP_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
float u_xlat12;
void main()
{
    u_xlat0.x = hlslcc_mtx4x4unity_ObjectToWorld[0].y;
    u_xlat0.y = hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat0.z = hlslcc_mtx4x4unity_ObjectToWorld[2].y;
    u_xlat1.xyw = (-_WorldSpaceCameraPos.xyz) + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat0.w = u_xlat1.y;
    u_xlat2.xyz = in_POSITION0.xyz;
    u_xlat2.w = 1.0;
    u_xlat0.x = dot(u_xlat0, u_xlat2);
    u_xlat0 = u_xlat0.xxxx * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat3.w = u_xlat1.x;
    u_xlat3.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;
    u_xlat3.y = hlslcc_mtx4x4unity_ObjectToWorld[1].x;
    u_xlat3.z = hlslcc_mtx4x4unity_ObjectToWorld[2].x;
    u_xlat3.x = dot(u_xlat3, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat3.xxxx + u_xlat0;
    u_xlat1.x = hlslcc_mtx4x4unity_ObjectToWorld[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_ObjectToWorld[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_ObjectToWorld[2].z;
    u_xlat1.x = dot(u_xlat1, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat1.xxxx + u_xlat0;
    u_xlat1.x = hlslcc_mtx4x4unity_ObjectToWorld[0].w;
    u_xlat1.y = hlslcc_mtx4x4unity_ObjectToWorld[1].w;
    u_xlat1.z = hlslcc_mtx4x4unity_ObjectToWorld[2].w;
    u_xlat1.w = hlslcc_mtx4x4unity_ObjectToWorld[3].w;
    u_xlat1.x = dot(u_xlat1, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[3] * u_xlat1.xxxx + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD1 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.zw = u_xlat0.zw;
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD3.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
    u_xlat12 = in_TANGENT0.w * unity_WorldTransformParams.w;
    u_xlat2.xyz = vec3(u_xlat12) * u_xlat2.xyz;
    vs_TEXCOORD4.y = u_xlat2.x;
    vs_TEXCOORD4.x = u_xlat1.z;
    vs_TEXCOORD4.z = u_xlat0.y;
    vs_TEXCOORD5.x = u_xlat1.x;
    vs_TEXCOORD6.x = u_xlat1.y;
    vs_TEXCOORD5.z = u_xlat0.z;
    vs_TEXCOORD6.z = u_xlat0.x;
    vs_TEXCOORD5.y = u_xlat2.y;
    vs_TEXCOORD6.y = u_xlat2.z;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToCamera[4];
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	mediump vec4 _Color;
uniform 	float _MainTexAlphaUse;
uniform 	mediump float _MainTexAlphaCutoff;
uniform 	mediump float _BumpScale;
uniform 	float _UseVertexColorAO;
uniform 	mediump float _LightArea;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	float _UseCoolShadowColorOrTex;
uniform 	mediump vec3 _CoolShadowMultColor;
uniform 	float _UseShadowTransition;
uniform 	float _ShadowTransitionRange;
uniform 	float _ShadowTransitionSoftness;
uniform 	mediump vec3 _SpecularColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump float _EmissionScaler;
uniform 	mediump vec3 _EmissionColor_MHY;
uniform 	mediump float _MTMapBrightness;
uniform 	float _MTMapTileScale;
uniform 	mediump vec3 _MTMapLightColor;
uniform 	mediump vec3 _MTMapDarkColor;
uniform 	mediump vec3 _MTShadowMultiColor;
uniform 	mediump float _MTShininess;
uniform 	mediump vec3 _MTSpecularColor;
uniform 	mediump float _MTSpecularScale;
uniform 	float _ES_CharacterAmbientLightOn;
uniform 	float _ES_CharacterAmbientBrightness;
uniform 	vec3 _ES_CharacterMainLightColor;
uniform 	float _ES_CharacterMainLightBrightness;
uniform 	vec3 _ES_CharacterAmbientLightColor;
uniform 	float _ES_CharacterMainLightRatio;
uniform 	float _ES_CharacterAmbientLightRatio;
uniform 	float _ES_CharacterColorTone;
uniform 	vec3 mhy_AvatarLightDir;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MTMap;
in mediump vec4 vs_COLOR0;
in highp vec2 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD5;
in highp vec3 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec2 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec2 u_xlat10_0;
bool u_xlatb0;
vec3 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
float u_xlat3;
lowp vec4 u_xlat10_3;
bool u_xlatb3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
vec3 u_xlat10;
mediump vec3 u_xlat16_10;
bool u_xlatb10;
float u_xlat11;
bool u_xlatb11;
vec3 u_xlat14;
mediump vec3 u_xlat16_14;
lowp float u_xlat10_14;
bool u_xlatb14;
vec3 u_xlat21;
mediump vec3 u_xlat16_21;
vec2 u_xlat22;
bvec2 u_xlatb22;
float u_xlat25;
float u_xlat33;
bool u_xlatb33;
bool u_xlatb34;
mediump float u_xlat16_35;
mediump float u_xlat16_37;
void main()
{
    u_xlat0.xy = dFdx(vs_TEXCOORD0.xy);
    u_xlat22.xy = dFdy(vs_TEXCOORD0.xy);
    u_xlat0.xy = u_xlat22.xy + u_xlat0.xy;
    u_xlat22.xy = (-u_xlat0.xy) * vec2(0.25, 0.25) + vs_TEXCOORD0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25) + vs_TEXCOORD0.xy;
    u_xlat0.xy = (int(gl_SampleID) != 0) ? u_xlat22.xy : u_xlat0.xy;
    u_xlat10_1.xyz = textureLod(_BumpMap, u_xlat0.xy, 0.0).xyz;
    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_2.xy = u_xlat16_2.xy * vec2(vec2(_BumpScale, _BumpScale));
    u_xlat1.x = dot(vs_TEXCOORD4.xyz, u_xlat16_2.xyz);
    u_xlat1.y = dot(vs_TEXCOORD5.xyz, u_xlat16_2.xyz);
    u_xlat1.z = dot(vs_TEXCOORD6.xyz, u_xlat16_2.xyz);
    u_xlat16_2.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat16_2.x = inversesqrt(u_xlat16_2.x);
    u_xlat16_2.xyz = u_xlat1.xyz * u_xlat16_2.xxx;
    u_xlat16_2.xyz = (uint((gl_FrontFacing ? 0xffffffffu : uint(0))) != uint(0u)) ? u_xlat16_2.xyz : (-u_xlat16_2.xyz);
    u_xlat1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat22.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat22.x = inversesqrt(u_xlat22.x);
    u_xlat1.xyz = u_xlat1.xyz * u_xlat22.xxx + mhy_AvatarLightDir.xyz;
    u_xlat22.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat22.x = inversesqrt(u_xlat22.x);
    u_xlat1.xyz = u_xlat22.xxx * u_xlat1.xyz;
    u_xlat10_3 = textureLod(_MainTex, u_xlat0.xy, 0.0);
    u_xlatb22.xy = equal(vec4(_MainTexAlphaUse), vec4(1.0, 2.0, 1.0, 2.0)).xy;
    u_xlat16_35 = u_xlat10_3.w + (-_MainTexAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb34 = !!(u_xlat16_35<0.0);
#else
    u_xlatb34 = u_xlat16_35<0.0;
#endif
    u_xlatb22.x = u_xlatb22.x && u_xlatb34;
    if((int(u_xlatb22.x) * int(0xffffffffu))!=0){discard;}
    u_xlat10_0.xy = textureLod(_LightMapTex, u_xlat0.xy, 0.0).xz;
    u_xlat16_4.xyz = u_xlat10_3.xyz * _Color.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22.x = !!(0.00999999978<u_xlat10_3.w);
#else
    u_xlatb22.x = 0.00999999978<u_xlat10_3.w;
#endif
    u_xlatb22.x = u_xlatb22.x && u_xlatb22.y;
    u_xlat16_35 = (u_xlatb22.x) ? u_xlat10_3.w : 0.0;
    u_xlat16_37 = dot(u_xlat16_2.xyz, mhy_AvatarLightDir.xyz);
    u_xlat33 = u_xlat16_37 * 0.497500002 + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb34 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorAO));
#else
    u_xlatb34 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorAO);
#endif
    u_xlat16_37 = vs_COLOR0.x * 0.5;
    u_xlat16_37 = (u_xlatb34) ? u_xlat16_37 : 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(u_xlat16_37<0.0500000007);
#else
    u_xlatb3 = u_xlat16_37<0.0500000007;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(0.949999988<u_xlat16_37);
#else
    u_xlatb14 = 0.949999988<u_xlat16_37;
#endif
    u_xlat25 = u_xlat33 + u_xlat16_37;
    u_xlat25 = u_xlat25 * 0.5;
    u_xlat16_37 = (u_xlatb14) ? 1.0 : u_xlat25;
    u_xlat16_37 = (u_xlatb3) ? 0.0 : u_xlat16_37;
    u_xlat16_37 = (u_xlatb34) ? u_xlat16_37 : u_xlat33;
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(u_xlat16_37<_LightArea);
#else
    u_xlatb33 = u_xlat16_37<_LightArea;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb34 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition));
#else
    u_xlatb34 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition);
#endif
    u_xlat16_37 = (-u_xlat16_37) + _LightArea;
    u_xlat16_37 = u_xlat16_37 / _ShadowTransitionRange;
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(u_xlat16_37>=1.0);
#else
    u_xlatb3 = u_xlat16_37>=1.0;
#endif
    u_xlat16_14.x = u_xlat16_37 + 0.00999999978;
    u_xlat16_14.x = log2(u_xlat16_14.x);
    u_xlat14.x = u_xlat16_14.x * _ShadowTransitionSoftness;
    u_xlat14.x = exp2(u_xlat14.x);
    u_xlat14.x = min(u_xlat14.x, 1.0);
    u_xlat3 = (u_xlatb3) ? 1.0 : u_xlat14.x;
    u_xlat3 = (u_xlatb34) ? u_xlat3 : 1.0;
    u_xlat3 = u_xlatb33 ? u_xlat3 : float(0.0);
    u_xlat33 = u_xlatb33 ? 1.0 : float(0.0);
    u_xlat33 = ((gl_FrontFacing ? 0xffffffffu : uint(0)) != uint(0u)) ? u_xlat33 : 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(0.899999976<u_xlat10_0.x);
#else
    u_xlatb14 = 0.899999976<u_xlat10_0.x;
#endif
    if(u_xlatb14){
        u_xlat14.xy = u_xlat16_2.yy * hlslcc_mtx4x4unity_WorldToCamera[1].xy;
        u_xlat14.xy = hlslcc_mtx4x4unity_WorldToCamera[0].xy * u_xlat16_2.xx + u_xlat14.xy;
        u_xlat5.yz = hlslcc_mtx4x4unity_WorldToCamera[2].xy * u_xlat16_2.zz + u_xlat14.xy;
        u_xlat5.x = u_xlat5.y * _MTMapTileScale;
        u_xlat16_6.xy = u_xlat5.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
        u_xlat10_14 = texture(_MTMap, u_xlat16_6.xy, -1.0).x;
        u_xlat16_37 = u_xlat10_14 * _MTMapBrightness;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_37 = min(max(u_xlat16_37, 0.0), 1.0);
#else
        u_xlat16_37 = clamp(u_xlat16_37, 0.0, 1.0);
#endif
        u_xlat16_6.xyz = _MTMapLightColor.xyz + (-_MTMapDarkColor.xyz);
        u_xlat16_6.xyz = vec3(u_xlat16_37) * u_xlat16_6.xyz + _MTMapDarkColor.xyz;
        u_xlat16_6.xyz = u_xlat16_4.xyz * u_xlat16_6.xyz;
        u_xlat16_37 = dot(u_xlat16_2.xyz, u_xlat1.xyz);
        u_xlat16_37 = max(u_xlat16_37, 0.00100000005);
        u_xlat16_37 = log2(u_xlat16_37);
        u_xlat16_37 = u_xlat16_37 * _MTShininess;
        u_xlat16_37 = exp2(u_xlat16_37);
        u_xlat16_37 = u_xlat16_37 * _MTSpecularScale;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_37 = min(max(u_xlat16_37, 0.0), 1.0);
#else
        u_xlat16_37 = clamp(u_xlat16_37, 0.0, 1.0);
#endif
        u_xlat16_7.xyz = vec3(u_xlat16_37) * _MTSpecularColor.xyz;
        u_xlat16_7.xyz = u_xlat10_0.yyy * u_xlat16_7.xyz;
        u_xlat16_8.xyz = u_xlat16_6.xyz * _MTShadowMultiColor.xyz;
        u_xlat16_14.xyz = _MTShadowMultiColor.xyz + vec3(-1.0, -1.0, -1.0);
        u_xlat14.xyz = vec3(u_xlat3) * u_xlat16_14.xyz + vec3(1.0, 1.0, 1.0);
        u_xlat16_9.xyz = (bool(u_xlatb34)) ? u_xlat14.xyz : _MTShadowMultiColor.xyz;
#ifdef UNITY_ADRENO_ES3
        u_xlatb14 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(u_xlat33));
#else
        u_xlatb14 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(u_xlat33);
#endif
        u_xlat16_9.xyz = u_xlat16_6.xyz * u_xlat16_9.xyz;
        u_xlat5.xyz = u_xlat16_6.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
        u_xlat14.xyz = (bool(u_xlatb14)) ? u_xlat16_9.xyz : u_xlat5.xyz;
        u_xlat5.xyz = u_xlat16_7.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
        u_xlat16_14.xyz = u_xlat14.xyz;
        u_xlat16_5.xyz = u_xlat5.xyz;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb10 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex));
#else
        u_xlatb10 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex);
#endif
        u_xlat16_21.xyz = vec3(_FirstShadowMultColor.xxyz.y + (-_CoolShadowMultColor.x), _FirstShadowMultColor.xxyz.z + (-_CoolShadowMultColor.y), float(_FirstShadowMultColor.z) + (-_CoolShadowMultColor.z));
        u_xlat21.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_21.xyz + _CoolShadowMultColor.xyz;
        u_xlat16_6.xyz = (bool(u_xlatb10)) ? u_xlat21.xyz : vec3(_FirstShadowMultColor.x, _FirstShadowMultColor.y, _FirstShadowMultColor.z);
        u_xlat16_8.xyz = u_xlat16_4.xyz * u_xlat16_6.xyz;
        u_xlat16_10.xyz = u_xlat16_6.xyz + vec3(-1.0, -1.0, -1.0);
        u_xlat10.xyz = vec3(u_xlat3) * u_xlat16_10.xyz + vec3(1.0, 1.0, 1.0);
        u_xlat16_6.xyz = (bool(u_xlatb34)) ? u_xlat10.xyz : u_xlat16_6.xyz;
#ifdef UNITY_ADRENO_ES3
        u_xlatb33 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(u_xlat33));
#else
        u_xlatb33 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(u_xlat33);
#endif
        u_xlat16_6.xyz = u_xlat16_4.xyz * u_xlat16_6.xyz;
        u_xlat10.xyz = u_xlat16_4.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
        u_xlat14.xyz = (bool(u_xlatb33)) ? u_xlat16_6.xyz : u_xlat10.xyz;
        u_xlat16_37 = dot(u_xlat16_2.xyz, u_xlat1.xyz);
        u_xlat16_37 = max(u_xlat16_37, 0.00100000005);
        u_xlat16_37 = log2(u_xlat16_37);
        u_xlat16_37 = u_xlat16_37 * _Shininess;
        u_xlat16_37 = exp2(u_xlat16_37);
        u_xlat11 = (-u_xlat10_0.y) + 1.0;
#ifdef UNITY_ADRENO_ES3
        u_xlatb11 = !!(u_xlat11<u_xlat16_37);
#else
        u_xlatb11 = u_xlat11<u_xlat16_37;
#endif
        u_xlat16_6.xyz = _SpecularColor.xyz * vec3(_SpecMulti);
        u_xlat16_6.xyz = u_xlat10_0.xxx * u_xlat16_6.xyz;
        u_xlat1.xyz = u_xlat16_6.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
        u_xlat5.xyz = mix(vec3(0.0, 0.0, 0.0), u_xlat1.xyz, vec3(bvec3(u_xlatb11)));
        u_xlat16_14.xyz = u_xlat14.xyz;
        u_xlat16_5.xyz = u_xlat5.xyz;
    //ENDIF
    }
    u_xlat16_4.xyz = u_xlat16_4.xyz * _EmissionColor_MHY.xyz;
    u_xlat16_6.xyz = u_xlat16_14.xyz + u_xlat16_5.xyz;
    u_xlat16_7.xyz = u_xlat16_5.xyz + u_xlat16_8.xyz;
    u_xlat16_8.xyz = u_xlat16_4.xyz * vec3(vec3(_EmissionScaler, _EmissionScaler, _EmissionScaler)) + (-u_xlat16_6.xyz);
    u_xlat16_8.xyz = vec3(u_xlat16_35) * u_xlat16_8.xyz + u_xlat16_6.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(vec3(_EmissionScaler, _EmissionScaler, _EmissionScaler)) + (-u_xlat16_7.xyz);
    u_xlat16_4.xyz = vec3(u_xlat16_35) * u_xlat16_4.xyz + u_xlat16_7.xyz;
    u_xlat16_6.xyz = (u_xlatb22.x) ? u_xlat16_8.xyz : u_xlat16_6.xyz;
    u_xlat16_4.xyz = (u_xlatb22.x) ? u_xlat16_4.xyz : u_xlat16_7.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.00999999978<u_xlat16_35);
#else
    u_xlatb0 = 0.00999999978<u_xlat16_35;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb11 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn));
#else
    u_xlatb11 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn);
#endif
    u_xlat1.xyz = u_xlat16_6.xyz * vec3(vec3(_ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness));
    u_xlat10.xyz = _ES_CharacterMainLightColor.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat10.xyz = vec3(vec3(_ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio)) * u_xlat10.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat1.xyz = u_xlat1.xyz * u_xlat10.xyz;
    u_xlat10.xyz = _ES_CharacterAmbientLightColor.xyz * vec3(_ES_CharacterAmbientLightRatio);
    u_xlat16_7.xyz = u_xlat1.xyz * vec3(10.0, 10.0, 10.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.xyz = min(max(u_xlat16_7.xyz, 0.0), 1.0);
#else
    u_xlat16_7.xyz = clamp(u_xlat16_7.xyz, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat10.xyz * u_xlat16_7.xyz + u_xlat1.xyz;
    u_xlat16_7.xyz = (bool(u_xlatb11)) ? u_xlat1.xyz : u_xlat16_6.xyz;
    u_xlat16_8.xyz = u_xlat16_6.xyz + (-u_xlat16_7.xyz);
    u_xlat16_8.xyz = vec3(u_xlat16_35) * u_xlat16_8.xyz + u_xlat16_7.xyz;
    u_xlat16_6.xyz = (-u_xlat16_4.xyz) + u_xlat16_6.xyz;
    u_xlat16_6.xyz = vec3(u_xlat16_35) * u_xlat16_6.xyz + u_xlat16_4.xyz;
    u_xlat16_1.xyz = (bool(u_xlatb0)) ? u_xlat16_8.xyz : u_xlat16_7.xyz;
    u_xlat16_4.xyz = (bool(u_xlatb0)) ? u_xlat16_6.xyz : u_xlat16_4.xyz;
    u_xlat16_37 = max(u_xlat16_1.z, u_xlat16_1.y);
    u_xlat16_0.w = max(u_xlat16_1.x, u_xlat16_37);
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(1.0<u_xlat16_0.w);
#else
    u_xlatb10 = 1.0<u_xlat16_0.w;
#endif
    u_xlat16_0.xyz = u_xlat16_1.xyz / u_xlat16_0.www;
    u_xlat16_1.w = 1.0;
    u_xlat16_0 = (bool(u_xlatb10)) ? u_xlat16_0 : u_xlat16_1;
    u_xlat16_37 = min(u_xlat16_0.w, 1.10000002);
    u_xlat16_6.x = u_xlat16_0.w + (-u_xlat16_37);
    u_xlat16_35 = u_xlat16_35 * u_xlat16_6.x + u_xlat16_37;
    SV_Target1.w = u_xlat16_35 * 0.0500000007;
    SV_Target0.xyz = u_xlat16_2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb10 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_2.x = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb10) ? u_xlat16_2.x : u_xlat16_4.z;
    SV_Target0.w = 0.0470588244;
    SV_Target1.xyz = u_xlat16_0.xyz;
    SV_Target2.xy = u_xlat16_4.xy;
    SV_Target2.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "LINE_INTERPOLATION" "TOON_SPECULAR_ON" "BACK_FACE_ON" "METAL_MAT" "NORMAL_MAP_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
float u_xlat12;
void main()
{
    u_xlat0.x = hlslcc_mtx4x4unity_ObjectToWorld[0].y;
    u_xlat0.y = hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat0.z = hlslcc_mtx4x4unity_ObjectToWorld[2].y;
    u_xlat1.xyw = (-_WorldSpaceCameraPos.xyz) + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat0.w = u_xlat1.y;
    u_xlat2.xyz = in_POSITION0.xyz;
    u_xlat2.w = 1.0;
    u_xlat0.x = dot(u_xlat0, u_xlat2);
    u_xlat0 = u_xlat0.xxxx * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat3.w = u_xlat1.x;
    u_xlat3.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;
    u_xlat3.y = hlslcc_mtx4x4unity_ObjectToWorld[1].x;
    u_xlat3.z = hlslcc_mtx4x4unity_ObjectToWorld[2].x;
    u_xlat3.x = dot(u_xlat3, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat3.xxxx + u_xlat0;
    u_xlat1.x = hlslcc_mtx4x4unity_ObjectToWorld[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_ObjectToWorld[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_ObjectToWorld[2].z;
    u_xlat1.x = dot(u_xlat1, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat1.xxxx + u_xlat0;
    u_xlat1.x = hlslcc_mtx4x4unity_ObjectToWorld[0].w;
    u_xlat1.y = hlslcc_mtx4x4unity_ObjectToWorld[1].w;
    u_xlat1.z = hlslcc_mtx4x4unity_ObjectToWorld[2].w;
    u_xlat1.w = hlslcc_mtx4x4unity_ObjectToWorld[3].w;
    u_xlat1.x = dot(u_xlat1, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[3] * u_xlat1.xxxx + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD1 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.zw = u_xlat0.zw;
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD3.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
    u_xlat12 = in_TANGENT0.w * unity_WorldTransformParams.w;
    u_xlat2.xyz = vec3(u_xlat12) * u_xlat2.xyz;
    vs_TEXCOORD4.y = u_xlat2.x;
    vs_TEXCOORD4.x = u_xlat1.z;
    vs_TEXCOORD4.z = u_xlat0.y;
    vs_TEXCOORD5.x = u_xlat1.x;
    vs_TEXCOORD6.x = u_xlat1.y;
    vs_TEXCOORD5.z = u_xlat0.z;
    vs_TEXCOORD6.z = u_xlat0.x;
    vs_TEXCOORD5.y = u_xlat2.y;
    vs_TEXCOORD6.y = u_xlat2.z;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToCamera[4];
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	mediump vec4 _Color;
uniform 	float _MainTexAlphaUse;
uniform 	mediump float _MainTexAlphaCutoff;
uniform 	mediump float _BumpScale;
uniform 	float _UseVertexColorAO;
uniform 	mediump float _LightArea;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	float _UseCoolShadowColorOrTex;
uniform 	mediump vec3 _CoolShadowMultColor;
uniform 	float _UseShadowTransition;
uniform 	float _ShadowTransitionRange;
uniform 	float _ShadowTransitionSoftness;
uniform 	mediump vec3 _SpecularColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump float _EmissionScaler;
uniform 	mediump vec3 _EmissionColor_MHY;
uniform 	mediump float _MTMapBrightness;
uniform 	float _MTMapTileScale;
uniform 	mediump vec3 _MTMapLightColor;
uniform 	mediump vec3 _MTMapDarkColor;
uniform 	mediump vec3 _MTShadowMultiColor;
uniform 	mediump float _MTShininess;
uniform 	mediump vec3 _MTSpecularColor;
uniform 	mediump float _MTSpecularScale;
uniform 	float _ES_CharacterAmbientLightOn;
uniform 	float _ES_CharacterAmbientBrightness;
uniform 	vec3 _ES_CharacterMainLightColor;
uniform 	float _ES_CharacterMainLightBrightness;
uniform 	vec3 _ES_CharacterAmbientLightColor;
uniform 	float _ES_CharacterMainLightRatio;
uniform 	float _ES_CharacterAmbientLightRatio;
uniform 	float _ES_CharacterColorTone;
uniform 	vec3 mhy_AvatarLightDir;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MTMap;
in mediump vec4 vs_COLOR0;
in highp vec2 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD5;
in highp vec3 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec3 u_xlat10_0;
mediump vec3 u_xlat16_1;
float u_xlat2;
mediump vec4 u_xlat16_2;
lowp vec4 u_xlat10_2;
bool u_xlatb2;
vec3 u_xlat3;
lowp vec3 u_xlat10_3;
bvec2 u_xlatb3;
mediump vec3 u_xlat16_4;
mediump float u_xlat16_5;
vec3 u_xlat6;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
vec3 u_xlat10;
mediump vec3 u_xlat16_10;
vec3 u_xlat11;
mediump vec3 u_xlat16_11;
vec3 u_xlat14;
bool u_xlatb14;
vec3 u_xlat15;
mediump vec3 u_xlat16_17;
mediump float u_xlat16_19;
float u_xlat26;
bool u_xlatb26;
float u_xlat36;
bool u_xlatb36;
mediump float u_xlat16_37;
float u_xlat38;
mediump float u_xlat16_38;
lowp float u_xlat10_38;
bool u_xlatb38;
void main()
{
    u_xlat10_0.xyz = texture(_BumpMap, vs_TEXCOORD0.xy, -1.0).xyz;
    u_xlat16_1.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_1.xy = u_xlat16_1.xy * vec2(vec2(_BumpScale, _BumpScale));
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, u_xlat16_1.xyz);
    u_xlat0.y = dot(vs_TEXCOORD5.xyz, u_xlat16_1.xyz);
    u_xlat0.z = dot(vs_TEXCOORD6.xyz, u_xlat16_1.xyz);
    u_xlat16_1.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat16_1.x = inversesqrt(u_xlat16_1.x);
    u_xlat16_1.xyz = u_xlat0.xyz * u_xlat16_1.xxx;
    u_xlat16_1.xyz = (uint((gl_FrontFacing ? 0xffffffffu : uint(0))) != uint(0u)) ? u_xlat16_1.xyz : (-u_xlat16_1.xyz);
    u_xlat0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat36 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat36 = inversesqrt(u_xlat36);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat36) + mhy_AvatarLightDir.xyz;
    u_xlat36 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat36 = inversesqrt(u_xlat36);
    u_xlat0.xyz = vec3(u_xlat36) * u_xlat0.xyz;
    u_xlat10_2 = texture(_MainTex, vs_TEXCOORD0.xy, -1.0);
    u_xlatb3.xy = equal(vec4(_MainTexAlphaUse), vec4(1.0, 2.0, 0.0, 0.0)).xy;
    u_xlat16_37 = u_xlat10_2.w + (-_MainTexAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb36 = !!(u_xlat16_37<0.0);
#else
    u_xlatb36 = u_xlat16_37<0.0;
#endif
    u_xlatb36 = u_xlatb3.x && u_xlatb36;
    if((int(u_xlatb36) * int(0xffffffffu))!=0){discard;}
    u_xlat10_3.xz = texture(_LightMapTex, vs_TEXCOORD0.xy, -1.0).xz;
    u_xlat16_4.xyz = u_xlat10_2.xyz * _Color.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb36 = !!(0.00999999978<u_xlat10_2.w);
#else
    u_xlatb36 = 0.00999999978<u_xlat10_2.w;
#endif
    u_xlatb36 = u_xlatb36 && u_xlatb3.y;
    u_xlat16_5 = (u_xlatb36) ? u_xlat10_2.w : 0.0;
    u_xlat16_17.x = dot(u_xlat16_1.xyz, mhy_AvatarLightDir.xyz);
    u_xlat2 = u_xlat16_17.x * 0.497500002 + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorAO));
#else
    u_xlatb14 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColorAO);
#endif
    u_xlat16_17.x = vs_COLOR0.x * 0.5;
    u_xlat16_17.x = (u_xlatb14) ? u_xlat16_17.x : 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb26 = !!(u_xlat16_17.x<0.0500000007);
#else
    u_xlatb26 = u_xlat16_17.x<0.0500000007;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb38 = !!(0.949999988<u_xlat16_17.x);
#else
    u_xlatb38 = 0.949999988<u_xlat16_17.x;
#endif
    u_xlat15.x = u_xlat2 + u_xlat16_17.x;
    u_xlat15.x = u_xlat15.x * 0.5;
    u_xlat16_17.x = (u_xlatb38) ? 1.0 : u_xlat15.x;
    u_xlat16_17.x = (u_xlatb26) ? 0.0 : u_xlat16_17.x;
    u_xlat16_17.x = (u_xlatb14) ? u_xlat16_17.x : u_xlat2;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat16_17.x<_LightArea);
#else
    u_xlatb2 = u_xlat16_17.x<_LightArea;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition));
#else
    u_xlatb14 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition);
#endif
    u_xlat16_17.x = (-u_xlat16_17.x) + _LightArea;
    u_xlat16_17.x = u_xlat16_17.x / _ShadowTransitionRange;
#ifdef UNITY_ADRENO_ES3
    u_xlatb26 = !!(u_xlat16_17.x>=1.0);
#else
    u_xlatb26 = u_xlat16_17.x>=1.0;
#endif
    u_xlat16_38 = u_xlat16_17.x + 0.00999999978;
    u_xlat16_38 = log2(u_xlat16_38);
    u_xlat38 = u_xlat16_38 * _ShadowTransitionSoftness;
    u_xlat38 = exp2(u_xlat38);
    u_xlat38 = min(u_xlat38, 1.0);
    u_xlat26 = (u_xlatb26) ? 1.0 : u_xlat38;
    u_xlat26 = (u_xlatb14) ? u_xlat26 : 1.0;
    u_xlat26 = u_xlatb2 ? u_xlat26 : float(0.0);
    u_xlat2 = u_xlatb2 ? 1.0 : float(0.0);
    u_xlat2 = ((gl_FrontFacing ? 0xffffffffu : uint(0)) != uint(0u)) ? u_xlat2 : 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb38 = !!(0.899999976<u_xlat10_3.x);
#else
    u_xlatb38 = 0.899999976<u_xlat10_3.x;
#endif
    if(u_xlatb38){
        u_xlat15.xz = u_xlat16_1.yy * hlslcc_mtx4x4unity_WorldToCamera[1].xy;
        u_xlat15.xz = hlslcc_mtx4x4unity_WorldToCamera[0].xy * u_xlat16_1.xx + u_xlat15.xz;
        u_xlat6.yz = hlslcc_mtx4x4unity_WorldToCamera[2].xy * u_xlat16_1.zz + u_xlat15.xz;
        u_xlat6.x = u_xlat6.y * _MTMapTileScale;
        u_xlat16_17.xy = u_xlat6.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
        u_xlat10_38 = texture(_MTMap, u_xlat16_17.xy, -1.0).x;
        u_xlat16_17.x = u_xlat10_38 * _MTMapBrightness;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_17.x = min(max(u_xlat16_17.x, 0.0), 1.0);
#else
        u_xlat16_17.x = clamp(u_xlat16_17.x, 0.0, 1.0);
#endif
        u_xlat16_7.xyz = _MTMapLightColor.xyz + (-_MTMapDarkColor.xyz);
        u_xlat16_17.xyz = u_xlat16_17.xxx * u_xlat16_7.xyz + _MTMapDarkColor.xyz;
        u_xlat16_17.xyz = u_xlat16_4.xyz * u_xlat16_17.xyz;
        u_xlat16_7.x = dot(u_xlat16_1.xyz, u_xlat0.xyz);
        u_xlat16_7.x = max(u_xlat16_7.x, 0.00100000005);
        u_xlat16_7.x = log2(u_xlat16_7.x);
        u_xlat16_7.x = u_xlat16_7.x * _MTShininess;
        u_xlat16_7.x = exp2(u_xlat16_7.x);
        u_xlat16_7.x = u_xlat16_7.x * _MTSpecularScale;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
        u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
        u_xlat16_7.xyz = u_xlat16_7.xxx * _MTSpecularColor.xyz;
        u_xlat16_7.xyz = u_xlat10_3.zzz * u_xlat16_7.xyz;
        u_xlat16_8.xyz = u_xlat16_17.xyz * _MTShadowMultiColor.xyz;
        u_xlat16_6.xyz = _MTShadowMultiColor.xyz + vec3(-1.0, -1.0, -1.0);
        u_xlat6.xyz = vec3(u_xlat26) * u_xlat16_6.xyz + vec3(1.0, 1.0, 1.0);
        u_xlat16_9.xyz = (bool(u_xlatb14)) ? u_xlat6.xyz : _MTShadowMultiColor.xyz;
#ifdef UNITY_ADRENO_ES3
        u_xlatb38 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(u_xlat2));
#else
        u_xlatb38 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(u_xlat2);
#endif
        u_xlat16_9.xyz = u_xlat16_17.xyz * u_xlat16_9.xyz;
        u_xlat6.xyz = u_xlat16_17.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
        u_xlat6.xyz = (bool(u_xlatb38)) ? u_xlat16_9.xyz : u_xlat6.xyz;
        u_xlat10.xyz = u_xlat16_7.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
        u_xlat16_6.xyz = u_xlat6.xyz;
        u_xlat16_10.xyz = u_xlat10.xyz;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb38 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex));
#else
        u_xlatb38 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex);
#endif
        u_xlat16_11.xyz = vec3(_FirstShadowMultColor.xxyz.y + (-_CoolShadowMultColor.x), _FirstShadowMultColor.xxyz.z + (-_CoolShadowMultColor.y), float(_FirstShadowMultColor.z) + (-_CoolShadowMultColor.z));
        u_xlat11.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_11.xyz + _CoolShadowMultColor.xyz;
        u_xlat16_17.xyz = (bool(u_xlatb38)) ? u_xlat11.xyz : vec3(_FirstShadowMultColor.x, _FirstShadowMultColor.y, _FirstShadowMultColor.z);
        u_xlat16_8.xyz = u_xlat16_4.xyz * u_xlat16_17.xyz;
        u_xlat16_11.xyz = u_xlat16_17.xyz + vec3(-1.0, -1.0, -1.0);
        u_xlat11.xyz = vec3(u_xlat26) * u_xlat16_11.xyz + vec3(1.0, 1.0, 1.0);
        u_xlat16_17.xyz = (bool(u_xlatb14)) ? u_xlat11.xyz : u_xlat16_17.xyz;
#ifdef UNITY_ADRENO_ES3
        u_xlatb2 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(u_xlat2));
#else
        u_xlatb2 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(u_xlat2);
#endif
        u_xlat16_17.xyz = u_xlat16_4.xyz * u_xlat16_17.xyz;
        u_xlat14.xyz = u_xlat16_4.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
        u_xlat6.xyz = (bool(u_xlatb2)) ? u_xlat16_17.xyz : u_xlat14.xyz;
        u_xlat16_17.x = dot(u_xlat16_1.xyz, u_xlat0.xyz);
        u_xlat16_17.x = max(u_xlat16_17.x, 0.00100000005);
        u_xlat16_17.x = log2(u_xlat16_17.x);
        u_xlat16_17.x = u_xlat16_17.x * _Shininess;
        u_xlat16_17.x = exp2(u_xlat16_17.x);
        u_xlat2 = (-u_xlat10_3.z) + 1.0;
#ifdef UNITY_ADRENO_ES3
        u_xlatb2 = !!(u_xlat2<u_xlat16_17.x);
#else
        u_xlatb2 = u_xlat2<u_xlat16_17.x;
#endif
        u_xlat16_17.xyz = _SpecularColor.xyz * vec3(_SpecMulti);
        u_xlat16_17.xyz = u_xlat10_3.xxx * u_xlat16_17.xyz;
        u_xlat14.xyz = u_xlat16_17.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
        u_xlat10.xyz = mix(vec3(0.0, 0.0, 0.0), u_xlat14.xyz, vec3(bvec3(u_xlatb2)));
        u_xlat16_6.xyz = u_xlat6.xyz;
        u_xlat16_10.xyz = u_xlat10.xyz;
    //ENDIF
    }
    u_xlat16_17.xyz = u_xlat16_4.xyz * _EmissionColor_MHY.xyz;
    u_xlat16_7.xyz = u_xlat16_6.xyz + u_xlat16_10.xyz;
    u_xlat16_8.xyz = u_xlat16_8.xyz + u_xlat16_10.xyz;
    u_xlat16_9.xyz = u_xlat16_17.xyz * vec3(vec3(_EmissionScaler, _EmissionScaler, _EmissionScaler)) + (-u_xlat16_7.xyz);
    u_xlat16_9.xyz = vec3(u_xlat16_5) * u_xlat16_9.xyz + u_xlat16_7.xyz;
    u_xlat16_17.xyz = u_xlat16_17.xyz * vec3(vec3(_EmissionScaler, _EmissionScaler, _EmissionScaler)) + (-u_xlat16_8.xyz);
    u_xlat16_17.xyz = vec3(u_xlat16_5) * u_xlat16_17.xyz + u_xlat16_8.xyz;
    u_xlat16_7.xyz = (bool(u_xlatb36)) ? u_xlat16_9.xyz : u_xlat16_7.xyz;
    u_xlat16_17.xyz = (bool(u_xlatb36)) ? u_xlat16_17.xyz : u_xlat16_8.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(0.00999999978<u_xlat16_5);
#else
    u_xlatb2 = 0.00999999978<u_xlat16_5;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn));
#else
    u_xlatb14 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn);
#endif
    u_xlat3.xyz = u_xlat16_7.xyz * vec3(vec3(_ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness));
    u_xlat11.xyz = _ES_CharacterMainLightColor.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat11.xyz = vec3(vec3(_ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio)) * u_xlat11.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat3.xyz = u_xlat3.xyz * u_xlat11.xyz;
    u_xlat11.xyz = _ES_CharacterAmbientLightColor.xyz * vec3(_ES_CharacterAmbientLightRatio);
    u_xlat16_8.xyz = u_xlat3.xyz * vec3(10.0, 10.0, 10.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_8.xyz = min(max(u_xlat16_8.xyz, 0.0), 1.0);
#else
    u_xlat16_8.xyz = clamp(u_xlat16_8.xyz, 0.0, 1.0);
#endif
    u_xlat3.xyz = u_xlat11.xyz * u_xlat16_8.xyz + u_xlat3.xyz;
    u_xlat16_8.xyz = (bool(u_xlatb14)) ? u_xlat3.xyz : u_xlat16_7.xyz;
    u_xlat16_9.xyz = u_xlat16_7.xyz + (-u_xlat16_8.xyz);
    u_xlat16_9.xyz = vec3(u_xlat16_5) * u_xlat16_9.xyz + u_xlat16_8.xyz;
    u_xlat16_7.xyz = (-u_xlat16_17.xyz) + u_xlat16_7.xyz;
    u_xlat16_7.xyz = vec3(u_xlat16_5) * u_xlat16_7.xyz + u_xlat16_17.xyz;
    u_xlat16_0.xyz = (bool(u_xlatb2)) ? u_xlat16_9.xyz : u_xlat16_8.xyz;
    u_xlat16_17.xyz = (bool(u_xlatb2)) ? u_xlat16_7.xyz : u_xlat16_17.xyz;
    u_xlat16_7.x = max(u_xlat16_0.z, u_xlat16_0.y);
    u_xlat16_2.w = max(u_xlat16_0.x, u_xlat16_7.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb3.x = !!(1.0<u_xlat16_2.w);
#else
    u_xlatb3.x = 1.0<u_xlat16_2.w;
#endif
    u_xlat16_2.xyz = u_xlat16_0.xyz / u_xlat16_2.www;
    u_xlat16_0.w = 1.0;
    u_xlat16_0 = (u_xlatb3.x) ? u_xlat16_2 : u_xlat16_0;
    u_xlat16_7.x = min(u_xlat16_0.w, 1.10000002);
    u_xlat16_19 = u_xlat16_0.w + (-u_xlat16_7.x);
    u_xlat16_5 = u_xlat16_5 * u_xlat16_19 + u_xlat16_7.x;
    SV_Target1.w = u_xlat16_5 * 0.0500000007;
    SV_Target0.xyz = u_xlat16_1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb3.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb3.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_5 = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb3.x) ? u_xlat16_5 : u_xlat16_17.z;
    SV_Target0.w = 0.0470588244;
    SV_Target1.xyz = u_xlat16_0.xyz;
    SV_Target2.xy = u_xlat16_17.xy;
    SV_Target2.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "TOON_LIGHTMAP_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec3 mhy_AvatarLightDir;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump float u_xlat16_4;
float u_xlat16;
void main()
{
    u_xlat0.x = hlslcc_mtx4x4unity_ObjectToWorld[0].y;
    u_xlat0.y = hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat0.z = hlslcc_mtx4x4unity_ObjectToWorld[2].y;
    u_xlat1.xyw = (-_WorldSpaceCameraPos.xyz) + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat0.w = u_xlat1.y;
    u_xlat2.xyz = in_POSITION0.xyz;
    u_xlat2.w = 1.0;
    u_xlat0.x = dot(u_xlat0, u_xlat2);
    u_xlat0 = u_xlat0.xxxx * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat3.w = u_xlat1.x;
    u_xlat3.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;
    u_xlat3.y = hlslcc_mtx4x4unity_ObjectToWorld[1].x;
    u_xlat3.z = hlslcc_mtx4x4unity_ObjectToWorld[2].x;
    u_xlat3.x = dot(u_xlat3, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat3.xxxx + u_xlat0;
    u_xlat1.x = hlslcc_mtx4x4unity_ObjectToWorld[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_ObjectToWorld[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_ObjectToWorld[2].z;
    u_xlat1.x = dot(u_xlat1, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat1.xxxx + u_xlat0;
    u_xlat1.x = hlslcc_mtx4x4unity_ObjectToWorld[0].w;
    u_xlat1.y = hlslcc_mtx4x4unity_ObjectToWorld[1].w;
    u_xlat1.z = hlslcc_mtx4x4unity_ObjectToWorld[2].w;
    u_xlat1.w = hlslcc_mtx4x4unity_ObjectToWorld[3].w;
    u_xlat1.x = dot(u_xlat1, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[3] * u_xlat1.xxxx + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat16 = inversesqrt(u_xlat16);
    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
    u_xlat16_4 = dot(u_xlat1.xyz, mhy_AvatarLightDir.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    vs_TEXCOORD1.w = u_xlat16_4 * 0.497500002 + 0.5;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.zw = u_xlat0.zw;
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD3.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD5.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	mediump vec4 _Color;
uniform 	float _MainTexAlphaUse;
uniform 	mediump float _MainTexAlphaCutoff;
uniform 	float _UseLightMapColorAO;
uniform 	float _UseVertexColorAO;
uniform 	mediump float _LightArea;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	float _UseCoolShadowColorOrTex;
uniform 	mediump vec3 _CoolShadowMultColor;
uniform 	float _UseShadowTransition;
uniform 	float _ShadowTransitionRange;
uniform 	float _ShadowTransitionSoftness;
uniform 	mediump vec3 _SpecularColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump float _EmissionScaler;
uniform 	mediump vec3 _EmissionColor_MHY;
uniform 	float _ES_CharacterAmbientLightOn;
uniform 	float _ES_CharacterAmbientBrightness;
uniform 	vec3 _ES_CharacterMainLightColor;
uniform 	float _ES_CharacterMainLightBrightness;
uniform 	vec3 _ES_CharacterAmbientLightColor;
uniform 	float _ES_CharacterMainLightRatio;
uniform 	float _ES_CharacterAmbientLightRatio;
uniform 	float _ES_CharacterColorTone;
uniform 	vec3 mhy_AvatarLightDir;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMapTex;
in mediump vec4 vs_COLOR0;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec4 u_xlat0;
lowp vec3 u_xlat10_0;
bvec2 u_xlatb0;
vec3 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
bool u_xlatb1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump vec4 u_xlat16_3;
bvec2 u_xlatb3;
bool u_xlatb4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
vec3 u_xlat9;
bool u_xlatb9;
mediump float u_xlat16_11;
vec3 u_xlat12;
mediump vec3 u_xlat16_12;
float u_xlat18;
bool u_xlatb18;
float u_xlat27;
mediump float u_xlat16_27;
bool u_xlatb27;
mediump float u_xlat16_29;
mediump float u_xlat16_32;
mediump float u_xlat16_33;
void main()
{
    u_xlatb0.xy = equal(vec4(_MainTexAlphaUse), vec4(1.0, 2.0, 0.0, 0.0)).xy;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy, -1.0);
    u_xlat16_2.x = u_xlat10_1.w + (-_MainTexAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(u_xlat16_2.x<0.0);
#else
    u_xlatb18 = u_xlat16_2.x<0.0;
#endif
    u_xlatb0.x = u_xlatb0.x && u_xlatb18;
    if((int(u_xlatb0.x) * int(0xffffffffu))!=0){discard;}
    SV_Target0.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0470588244;
    u_xlat10_0.xz = texture(_LightMapTex, vs_TEXCOORD0.xy, -1.0).xy;
    u_xlatb3.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseLightMapColorAO, _UseVertexColorAO, _UseLightMapColorAO, _UseLightMapColorAO)).xy;
    u_xlat16_2.x = (u_xlatb3.x) ? u_xlat10_0.z : 0.5;
    u_xlat16_11 = u_xlat16_2.x * vs_COLOR0.x;
    u_xlat16_2.x = (u_xlatb3.y) ? u_xlat16_11 : u_xlat16_2.x;
    u_xlat18 = u_xlat16_2.x + vs_TEXCOORD1.w;
    u_xlat18 = u_xlat18 * 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(0.949999988<u_xlat16_2.x);
#else
    u_xlatb27 = 0.949999988<u_xlat16_2.x;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb3.x = !!(u_xlat16_2.x<0.0500000007);
#else
    u_xlatb3.x = u_xlat16_2.x<0.0500000007;
#endif
    u_xlat16_2.x = (u_xlatb27) ? 1.0 : u_xlat18;
    u_xlat16_2.x = (u_xlatb3.x) ? 0.0 : u_xlat16_2.x;
    u_xlat16_11 = (-u_xlat16_2.x) + _LightArea;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(u_xlat16_2.x<_LightArea);
#else
    u_xlatb18 = u_xlat16_2.x<_LightArea;
#endif
    u_xlat16_2.x = u_xlat16_11 / _ShadowTransitionRange;
    u_xlat16_27 = u_xlat16_2.x + 0.00999999978;
#ifdef UNITY_ADRENO_ES3
    u_xlatb3.x = !!(u_xlat16_2.x>=1.0);
#else
    u_xlatb3.x = u_xlat16_2.x>=1.0;
#endif
    u_xlat16_27 = log2(u_xlat16_27);
    u_xlat27 = u_xlat16_27 * _ShadowTransitionSoftness;
    u_xlat27 = exp2(u_xlat27);
    u_xlat27 = min(u_xlat27, 1.0);
    u_xlat27 = (u_xlatb3.x) ? 1.0 : u_xlat27;
#ifdef UNITY_ADRENO_ES3
    u_xlatb3.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition));
#else
    u_xlatb3.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition);
#endif
    u_xlat27 = (u_xlatb3.x) ? u_xlat27 : 1.0;
    u_xlat27 = u_xlatb18 ? u_xlat27 : float(0.0);
    u_xlat16_12.xyz = vec3(_FirstShadowMultColor.xxyz.y + (-_CoolShadowMultColor.x), _FirstShadowMultColor.xxyz.z + (-_CoolShadowMultColor.y), float(_FirstShadowMultColor.z) + (-_CoolShadowMultColor.z));
    u_xlat12.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_12.xyz + _CoolShadowMultColor.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex));
#else
    u_xlatb4 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex);
#endif
    u_xlat16_2.xyz = (bool(u_xlatb4)) ? u_xlat12.xyz : vec3(_FirstShadowMultColor.x, _FirstShadowMultColor.y, _FirstShadowMultColor.z);
    u_xlat16_12.xyz = u_xlat16_2.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat12.xyz = vec3(u_xlat27) * u_xlat16_12.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_5.xyz = (u_xlatb3.x) ? u_xlat12.xyz : u_xlat16_2.xyz;
    u_xlat16_6.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_6.xyz;
    u_xlat1.xyz = u_xlat16_6.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
    u_xlat1.xyz = (bool(u_xlatb18)) ? u_xlat16_5.xyz : u_xlat1.xyz;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat18) + mhy_AvatarLightDir.xyz;
    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat3.xyz = vec3(u_xlat18) * u_xlat3.xyz;
    u_xlat16_29 = dot(vs_TEXCOORD1.xyz, u_xlat3.xyz);
    u_xlat16_29 = max(u_xlat16_29, 0.00100000005);
    u_xlat16_29 = log2(u_xlat16_29);
    u_xlat16_29 = u_xlat16_29 * _Shininess;
    u_xlat16_29 = exp2(u_xlat16_29);
    u_xlat16_5.xyz = vec3(u_xlat16_29) * _SpecularColor.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(_SpecMulti);
    u_xlat16_5.xyz = u_xlat10_0.xxx * u_xlat16_5.xyz;
    u_xlat16_7.xyz = u_xlat16_5.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness)) + u_xlat1.xyz;
    u_xlat0.xzw = u_xlat16_5.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
    u_xlat16_2.xyz = u_xlat16_6.xyz * u_xlat16_2.xyz + u_xlat0.xzw;
    u_xlat16_5.xyz = u_xlat16_6.xyz * _EmissionColor_MHY.xyz;
    u_xlat16_6.xyz = u_xlat16_5.xyz * vec3(vec3(_EmissionScaler, _EmissionScaler, _EmissionScaler)) + (-u_xlat16_7.xyz);
    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(vec3(_EmissionScaler, _EmissionScaler, _EmissionScaler)) + (-u_xlat16_2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(0.00999999978<u_xlat10_1.w);
#else
    u_xlatb0.x = 0.00999999978<u_xlat10_1.w;
#endif
    u_xlatb0.x = u_xlatb0.x && u_xlatb0.y;
    u_xlat16_29 = (u_xlatb0.x) ? u_xlat10_1.w : 0.0;
    u_xlat16_6.xyz = vec3(u_xlat16_29) * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat16_6.xyz = (u_xlatb0.x) ? u_xlat16_6.xyz : u_xlat16_7.xyz;
    u_xlat9.xyz = u_xlat16_6.xyz * vec3(vec3(_ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness));
    u_xlat1.xyz = _ES_CharacterMainLightColor.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat1.xyz = vec3(vec3(_ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio)) * u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat9.xyz = u_xlat9.xyz * u_xlat1.xyz;
    u_xlat16_7.xyz = u_xlat9.xyz * vec3(10.0, 10.0, 10.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.xyz = min(max(u_xlat16_7.xyz, 0.0), 1.0);
#else
    u_xlat16_7.xyz = clamp(u_xlat16_7.xyz, 0.0, 1.0);
#endif
    u_xlat1.xyz = _ES_CharacterAmbientLightColor.xyz * vec3(_ES_CharacterAmbientLightRatio);
    u_xlat9.xyz = u_xlat1.xyz * u_xlat16_7.xyz + u_xlat9.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn));
#else
    u_xlatb1 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn);
#endif
    u_xlat16_7.xyz = (bool(u_xlatb1)) ? u_xlat9.xyz : u_xlat16_6.xyz;
    u_xlat16_8.xyz = u_xlat16_6.xyz + (-u_xlat16_7.xyz);
    u_xlat16_8.xyz = vec3(u_xlat16_29) * u_xlat16_8.xyz + u_xlat16_7.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(0.00999999978<u_xlat16_29);
#else
    u_xlatb9 = 0.00999999978<u_xlat16_29;
#endif
    u_xlat16_1.xyz = (bool(u_xlatb9)) ? u_xlat16_8.xyz : u_xlat16_7.xyz;
    u_xlat16_32 = max(u_xlat16_1.z, u_xlat16_1.y);
    u_xlat16_3.w = max(u_xlat16_1.x, u_xlat16_32);
    u_xlat16_3.xyz = u_xlat16_1.xyz / u_xlat16_3.www;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(1.0<u_xlat16_3.w);
#else
    u_xlatb18 = 1.0<u_xlat16_3.w;
#endif
    u_xlat16_1.w = 1.0;
    u_xlat16_1 = (bool(u_xlatb18)) ? u_xlat16_3 : u_xlat16_1;
    u_xlat16_32 = min(u_xlat16_1.w, 1.10000002);
    u_xlat16_33 = u_xlat16_1.w + (-u_xlat16_32);
    SV_Target1.xyz = u_xlat16_1.xyz;
    u_xlat16_32 = u_xlat16_29 * u_xlat16_33 + u_xlat16_32;
    SV_Target1.w = u_xlat16_32 * 0.0500000007;
    u_xlat16_5.xyz = vec3(u_xlat16_29) * u_xlat16_5.xyz + u_xlat16_2.xyz;
    u_xlat16_2.xyz = (u_xlatb0.x) ? u_xlat16_5.xyz : u_xlat16_2.xyz;
    u_xlat16_5.xyz = (-u_xlat16_2.xyz) + u_xlat16_6.xyz;
    u_xlat16_5.xyz = vec3(u_xlat16_29) * u_xlat16_5.xyz + u_xlat16_2.xyz;
    u_xlat16_2.xyz = (bool(u_xlatb9)) ? u_xlat16_5.xyz : u_xlat16_2.xyz;
    SV_Target2.xy = u_xlat16_2.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_2.x = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb0.x) ? u_xlat16_2.x : u_xlat16_2.z;
    SV_Target2.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "MSAA_INTERPOLATION" "TOON_LIGHTMAP_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec3 mhy_AvatarLightDir;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump float u_xlat16_4;
float u_xlat16;
void main()
{
    u_xlat0.x = hlslcc_mtx4x4unity_ObjectToWorld[0].y;
    u_xlat0.y = hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat0.z = hlslcc_mtx4x4unity_ObjectToWorld[2].y;
    u_xlat1.xyw = (-_WorldSpaceCameraPos.xyz) + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat0.w = u_xlat1.y;
    u_xlat2.xyz = in_POSITION0.xyz;
    u_xlat2.w = 1.0;
    u_xlat0.x = dot(u_xlat0, u_xlat2);
    u_xlat0 = u_xlat0.xxxx * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat3.w = u_xlat1.x;
    u_xlat3.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;
    u_xlat3.y = hlslcc_mtx4x4unity_ObjectToWorld[1].x;
    u_xlat3.z = hlslcc_mtx4x4unity_ObjectToWorld[2].x;
    u_xlat3.x = dot(u_xlat3, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat3.xxxx + u_xlat0;
    u_xlat1.x = hlslcc_mtx4x4unity_ObjectToWorld[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_ObjectToWorld[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_ObjectToWorld[2].z;
    u_xlat1.x = dot(u_xlat1, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat1.xxxx + u_xlat0;
    u_xlat1.x = hlslcc_mtx4x4unity_ObjectToWorld[0].w;
    u_xlat1.y = hlslcc_mtx4x4unity_ObjectToWorld[1].w;
    u_xlat1.z = hlslcc_mtx4x4unity_ObjectToWorld[2].w;
    u_xlat1.w = hlslcc_mtx4x4unity_ObjectToWorld[3].w;
    u_xlat1.x = dot(u_xlat1, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[3] * u_xlat1.xxxx + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat16 = inversesqrt(u_xlat16);
    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
    u_xlat16_4 = dot(u_xlat1.xyz, mhy_AvatarLightDir.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    vs_TEXCOORD1.w = u_xlat16_4 * 0.497500002 + 0.5;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.zw = u_xlat0.zw;
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD3.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD5.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	mediump vec4 _Color;
uniform 	float _MainTexAlphaUse;
uniform 	mediump float _MainTexAlphaCutoff;
uniform 	float _UseLightMapColorAO;
uniform 	float _UseVertexColorAO;
uniform 	mediump float _LightArea;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	float _UseCoolShadowColorOrTex;
uniform 	mediump vec3 _CoolShadowMultColor;
uniform 	float _UseShadowTransition;
uniform 	float _ShadowTransitionRange;
uniform 	float _ShadowTransitionSoftness;
uniform 	mediump vec3 _SpecularColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump float _EmissionScaler;
uniform 	mediump vec3 _EmissionColor_MHY;
uniform 	float _ES_CharacterAmbientLightOn;
uniform 	float _ES_CharacterAmbientBrightness;
uniform 	vec3 _ES_CharacterMainLightColor;
uniform 	float _ES_CharacterMainLightBrightness;
uniform 	vec3 _ES_CharacterAmbientLightColor;
uniform 	float _ES_CharacterMainLightRatio;
uniform 	float _ES_CharacterAmbientLightRatio;
uniform 	float _ES_CharacterColorTone;
uniform 	vec3 mhy_AvatarLightDir;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMapTex;
in mediump vec4 vs_COLOR0;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec3 u_xlat0;
lowp vec2 u_xlat10_0;
bvec3 u_xlatb0;
vec3 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
bool u_xlatb1;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump vec4 u_xlat16_3;
bvec2 u_xlatb3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
mediump float u_xlat16_8;
bool u_xlatb8;
vec2 u_xlat16;
bool u_xlatb16;
bool u_xlatb24;
mediump float u_xlat16_26;
mediump float u_xlat16_28;
mediump float u_xlat16_29;
void main()
{
    u_xlat0.xy = dFdx(vs_TEXCOORD0.xy);
    u_xlat16.xy = dFdy(vs_TEXCOORD0.xy);
    u_xlat0.xy = u_xlat16.xy + u_xlat0.xy;
    u_xlat16.xy = (-u_xlat0.xy) * vec2(0.25, 0.25) + vs_TEXCOORD0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25) + vs_TEXCOORD0.xy;
    u_xlat0.xy = (int(gl_SampleID) != 0) ? u_xlat16.xy : u_xlat0.xy;
    u_xlat10_1 = textureLod(_MainTex, u_xlat0.xy, 0.0);
    u_xlat10_0.xy = textureLod(_LightMapTex, u_xlat0.xy, 0.0).xy;
    u_xlat16_2.x = u_xlat10_1.w + (-_MainTexAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(u_xlat16_2.x<0.0);
#else
    u_xlatb16 = u_xlat16_2.x<0.0;
#endif
    u_xlatb3.xy = equal(vec4(_MainTexAlphaUse), vec4(1.0, 2.0, 0.0, 0.0)).xy;
    u_xlatb16 = u_xlatb16 && u_xlatb3.x;
    if((int(u_xlatb16) * int(0xffffffffu))!=0){discard;}
    SV_Target0.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0470588244;
    u_xlat3.xzw = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat16.x = dot(u_xlat3.xzw, u_xlat3.xzw);
    u_xlat16.x = inversesqrt(u_xlat16.x);
    u_xlat3.xzw = u_xlat3.xzw * u_xlat16.xxx + mhy_AvatarLightDir.xyz;
    u_xlat16.x = dot(u_xlat3.xzw, u_xlat3.xzw);
    u_xlat16.x = inversesqrt(u_xlat16.x);
    u_xlat3.xzw = u_xlat16.xxx * u_xlat3.xzw;
    u_xlat16_2.x = dot(vs_TEXCOORD1.xyz, u_xlat3.xzw);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.00100000005);
    u_xlat16_2.x = log2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * _Shininess;
    u_xlat16_2.x = exp2(u_xlat16_2.x);
    u_xlat16_2.xyz = u_xlat16_2.xxx * _SpecularColor.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(_SpecMulti);
    u_xlat16_2.xyz = u_xlat10_0.xxx * u_xlat16_2.xyz;
    u_xlatb0.xz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseLightMapColorAO, _UseLightMapColorAO, _UseVertexColorAO, _UseLightMapColorAO)).xz;
    u_xlat16_26 = (u_xlatb0.x) ? u_xlat10_0.y : 0.5;
    u_xlat16_4.x = u_xlat16_26 * vs_COLOR0.x;
    u_xlat16_26 = (u_xlatb0.z) ? u_xlat16_4.x : u_xlat16_26;
    u_xlat0.x = u_xlat16_26 + vs_TEXCOORD1.w;
    u_xlat0.x = u_xlat0.x * 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.949999988<u_xlat16_26);
#else
    u_xlatb8 = 0.949999988<u_xlat16_26;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(u_xlat16_26<0.0500000007);
#else
    u_xlatb16 = u_xlat16_26<0.0500000007;
#endif
    u_xlat16_26 = (u_xlatb8) ? 1.0 : u_xlat0.x;
    u_xlat16_26 = (u_xlatb16) ? 0.0 : u_xlat16_26;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(u_xlat16_26<_LightArea);
#else
    u_xlatb0.x = u_xlat16_26<_LightArea;
#endif
    u_xlat16_26 = (-u_xlat16_26) + _LightArea;
    u_xlat16_26 = u_xlat16_26 / _ShadowTransitionRange;
    u_xlat16_8 = u_xlat16_26 + 0.00999999978;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(u_xlat16_26>=1.0);
#else
    u_xlatb16 = u_xlat16_26>=1.0;
#endif
    u_xlat16_8 = log2(u_xlat16_8);
    u_xlat8.x = u_xlat16_8 * _ShadowTransitionSoftness;
    u_xlat8.x = exp2(u_xlat8.x);
    u_xlat8.x = min(u_xlat8.x, 1.0);
    u_xlat8.x = (u_xlatb16) ? 1.0 : u_xlat8.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition));
#else
    u_xlatb16 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition);
#endif
    u_xlat8.x = (u_xlatb16) ? u_xlat8.x : 1.0;
    u_xlat8.x = u_xlatb0.x ? u_xlat8.x : float(0.0);
    u_xlat16_3.xzw = vec3(_FirstShadowMultColor.xxyz.y + (-_CoolShadowMultColor.x), _FirstShadowMultColor.xxyz.z + (-_CoolShadowMultColor.y), float(_FirstShadowMultColor.z) + (-_CoolShadowMultColor.z));
    u_xlat3.xzw = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_3.xzw + _CoolShadowMultColor.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex));
#else
    u_xlatb24 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex);
#endif
    u_xlat16_4.xyz = (bool(u_xlatb24)) ? u_xlat3.xzw : vec3(_FirstShadowMultColor.x, _FirstShadowMultColor.y, _FirstShadowMultColor.z);
    u_xlat16_3.xzw = u_xlat16_4.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat3.xzw = u_xlat8.xxx * u_xlat16_3.xzw + vec3(1.0, 1.0, 1.0);
    u_xlat16_5.xyz = (bool(u_xlatb16)) ? u_xlat3.xzw : u_xlat16_4.xyz;
    u_xlat16_6.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_6.xyz;
    u_xlat8.xyz = u_xlat16_6.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
    u_xlat0.xyz = (u_xlatb0.x) ? u_xlat16_5.xyz : u_xlat8.xyz;
    u_xlat16_5.xyz = u_xlat16_2.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness)) + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat16_2.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
    u_xlat16_2.xyz = u_xlat16_6.xyz * u_xlat16_4.xyz + u_xlat0.xyz;
    u_xlat16_4.xyz = u_xlat16_6.xyz * _EmissionColor_MHY.xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * vec3(vec3(_EmissionScaler, _EmissionScaler, _EmissionScaler)) + (-u_xlat16_5.xyz);
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(vec3(_EmissionScaler, _EmissionScaler, _EmissionScaler)) + (-u_xlat16_2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(0.00999999978<u_xlat10_1.w);
#else
    u_xlatb0.x = 0.00999999978<u_xlat10_1.w;
#endif
    u_xlatb0.x = u_xlatb0.x && u_xlatb3.y;
    u_xlat16_26 = (u_xlatb0.x) ? u_xlat10_1.w : 0.0;
    u_xlat16_6.xyz = vec3(u_xlat16_26) * u_xlat16_6.xyz + u_xlat16_5.xyz;
    u_xlat16_5.xyz = (u_xlatb0.x) ? u_xlat16_6.xyz : u_xlat16_5.xyz;
    u_xlat8.xyz = u_xlat16_5.xyz * vec3(vec3(_ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness));
    u_xlat1.xyz = _ES_CharacterMainLightColor.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat1.xyz = vec3(vec3(_ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio)) * u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat8.xyz = u_xlat8.xyz * u_xlat1.xyz;
    u_xlat16_6.xyz = u_xlat8.xyz * vec3(10.0, 10.0, 10.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.xyz = min(max(u_xlat16_6.xyz, 0.0), 1.0);
#else
    u_xlat16_6.xyz = clamp(u_xlat16_6.xyz, 0.0, 1.0);
#endif
    u_xlat1.xyz = _ES_CharacterAmbientLightColor.xyz * vec3(_ES_CharacterAmbientLightRatio);
    u_xlat8.xyz = u_xlat1.xyz * u_xlat16_6.xyz + u_xlat8.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn));
#else
    u_xlatb1 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn);
#endif
    u_xlat16_6.xyz = (bool(u_xlatb1)) ? u_xlat8.xyz : u_xlat16_5.xyz;
    u_xlat16_7.xyz = u_xlat16_5.xyz + (-u_xlat16_6.xyz);
    u_xlat16_7.xyz = vec3(u_xlat16_26) * u_xlat16_7.xyz + u_xlat16_6.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.00999999978<u_xlat16_26);
#else
    u_xlatb8 = 0.00999999978<u_xlat16_26;
#endif
    u_xlat16_1.xyz = (bool(u_xlatb8)) ? u_xlat16_7.xyz : u_xlat16_6.xyz;
    u_xlat16_28 = max(u_xlat16_1.z, u_xlat16_1.y);
    u_xlat16_3.w = max(u_xlat16_1.x, u_xlat16_28);
    u_xlat16_3.xyz = u_xlat16_1.xyz / u_xlat16_3.www;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(1.0<u_xlat16_3.w);
#else
    u_xlatb16 = 1.0<u_xlat16_3.w;
#endif
    u_xlat16_1.w = 1.0;
    u_xlat16_1 = (bool(u_xlatb16)) ? u_xlat16_3 : u_xlat16_1;
    u_xlat16_28 = min(u_xlat16_1.w, 1.10000002);
    u_xlat16_29 = u_xlat16_1.w + (-u_xlat16_28);
    SV_Target1.xyz = u_xlat16_1.xyz;
    u_xlat16_28 = u_xlat16_26 * u_xlat16_29 + u_xlat16_28;
    SV_Target1.w = u_xlat16_28 * 0.0500000007;
    u_xlat16_4.xyz = vec3(u_xlat16_26) * u_xlat16_4.xyz + u_xlat16_2.xyz;
    u_xlat16_2.xyz = (u_xlatb0.x) ? u_xlat16_4.xyz : u_xlat16_2.xyz;
    u_xlat16_4.xyz = (-u_xlat16_2.xyz) + u_xlat16_5.xyz;
    u_xlat16_4.xyz = vec3(u_xlat16_26) * u_xlat16_4.xyz + u_xlat16_2.xyz;
    u_xlat16_2.xyz = (bool(u_xlatb8)) ? u_xlat16_4.xyz : u_xlat16_2.xyz;
    SV_Target2.xy = u_xlat16_2.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_2.x = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb0.x) ? u_xlat16_2.x : u_xlat16_2.z;
    SV_Target2.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "LINE_INTERPOLATION" "TOON_LIGHTMAP_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec3 mhy_AvatarLightDir;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump float u_xlat16_4;
float u_xlat16;
void main()
{
    u_xlat0.x = hlslcc_mtx4x4unity_ObjectToWorld[0].y;
    u_xlat0.y = hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat0.z = hlslcc_mtx4x4unity_ObjectToWorld[2].y;
    u_xlat1.xyw = (-_WorldSpaceCameraPos.xyz) + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat0.w = u_xlat1.y;
    u_xlat2.xyz = in_POSITION0.xyz;
    u_xlat2.w = 1.0;
    u_xlat0.x = dot(u_xlat0, u_xlat2);
    u_xlat0 = u_xlat0.xxxx * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat3.w = u_xlat1.x;
    u_xlat3.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;
    u_xlat3.y = hlslcc_mtx4x4unity_ObjectToWorld[1].x;
    u_xlat3.z = hlslcc_mtx4x4unity_ObjectToWorld[2].x;
    u_xlat3.x = dot(u_xlat3, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat3.xxxx + u_xlat0;
    u_xlat1.x = hlslcc_mtx4x4unity_ObjectToWorld[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_ObjectToWorld[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_ObjectToWorld[2].z;
    u_xlat1.x = dot(u_xlat1, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat1.xxxx + u_xlat0;
    u_xlat1.x = hlslcc_mtx4x4unity_ObjectToWorld[0].w;
    u_xlat1.y = hlslcc_mtx4x4unity_ObjectToWorld[1].w;
    u_xlat1.z = hlslcc_mtx4x4unity_ObjectToWorld[2].w;
    u_xlat1.w = hlslcc_mtx4x4unity_ObjectToWorld[3].w;
    u_xlat1.x = dot(u_xlat1, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[3] * u_xlat1.xxxx + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat16 = inversesqrt(u_xlat16);
    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
    u_xlat16_4 = dot(u_xlat1.xyz, mhy_AvatarLightDir.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    vs_TEXCOORD1.w = u_xlat16_4 * 0.497500002 + 0.5;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.zw = u_xlat0.zw;
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD3.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD5.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	mediump vec4 _Color;
uniform 	float _MainTexAlphaUse;
uniform 	mediump float _MainTexAlphaCutoff;
uniform 	float _UseLightMapColorAO;
uniform 	float _UseVertexColorAO;
uniform 	mediump float _LightArea;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	float _UseCoolShadowColorOrTex;
uniform 	mediump vec3 _CoolShadowMultColor;
uniform 	float _UseShadowTransition;
uniform 	float _ShadowTransitionRange;
uniform 	float _ShadowTransitionSoftness;
uniform 	mediump vec3 _SpecularColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump float _EmissionScaler;
uniform 	mediump vec3 _EmissionColor_MHY;
uniform 	float _ES_CharacterAmbientLightOn;
uniform 	float _ES_CharacterAmbientBrightness;
uniform 	vec3 _ES_CharacterMainLightColor;
uniform 	float _ES_CharacterMainLightBrightness;
uniform 	vec3 _ES_CharacterAmbientLightColor;
uniform 	float _ES_CharacterMainLightRatio;
uniform 	float _ES_CharacterAmbientLightRatio;
uniform 	float _ES_CharacterColorTone;
uniform 	vec3 mhy_AvatarLightDir;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMapTex;
in mediump vec4 vs_COLOR0;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec4 u_xlat0;
lowp vec3 u_xlat10_0;
bvec2 u_xlatb0;
vec3 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
bool u_xlatb1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump vec4 u_xlat16_3;
bvec2 u_xlatb3;
bool u_xlatb4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
vec3 u_xlat9;
bool u_xlatb9;
mediump float u_xlat16_11;
vec3 u_xlat12;
mediump vec3 u_xlat16_12;
float u_xlat18;
bool u_xlatb18;
float u_xlat27;
mediump float u_xlat16_27;
bool u_xlatb27;
mediump float u_xlat16_29;
mediump float u_xlat16_32;
mediump float u_xlat16_33;
void main()
{
    u_xlatb0.xy = equal(vec4(_MainTexAlphaUse), vec4(1.0, 2.0, 0.0, 0.0)).xy;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy, -1.0);
    u_xlat16_2.x = u_xlat10_1.w + (-_MainTexAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(u_xlat16_2.x<0.0);
#else
    u_xlatb18 = u_xlat16_2.x<0.0;
#endif
    u_xlatb0.x = u_xlatb0.x && u_xlatb18;
    if((int(u_xlatb0.x) * int(0xffffffffu))!=0){discard;}
    SV_Target0.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0470588244;
    u_xlat10_0.xz = texture(_LightMapTex, vs_TEXCOORD0.xy, -1.0).xy;
    u_xlatb3.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseLightMapColorAO, _UseVertexColorAO, _UseLightMapColorAO, _UseLightMapColorAO)).xy;
    u_xlat16_2.x = (u_xlatb3.x) ? u_xlat10_0.z : 0.5;
    u_xlat16_11 = u_xlat16_2.x * vs_COLOR0.x;
    u_xlat16_2.x = (u_xlatb3.y) ? u_xlat16_11 : u_xlat16_2.x;
    u_xlat18 = u_xlat16_2.x + vs_TEXCOORD1.w;
    u_xlat18 = u_xlat18 * 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(0.949999988<u_xlat16_2.x);
#else
    u_xlatb27 = 0.949999988<u_xlat16_2.x;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb3.x = !!(u_xlat16_2.x<0.0500000007);
#else
    u_xlatb3.x = u_xlat16_2.x<0.0500000007;
#endif
    u_xlat16_2.x = (u_xlatb27) ? 1.0 : u_xlat18;
    u_xlat16_2.x = (u_xlatb3.x) ? 0.0 : u_xlat16_2.x;
    u_xlat16_11 = (-u_xlat16_2.x) + _LightArea;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(u_xlat16_2.x<_LightArea);
#else
    u_xlatb18 = u_xlat16_2.x<_LightArea;
#endif
    u_xlat16_2.x = u_xlat16_11 / _ShadowTransitionRange;
    u_xlat16_27 = u_xlat16_2.x + 0.00999999978;
#ifdef UNITY_ADRENO_ES3
    u_xlatb3.x = !!(u_xlat16_2.x>=1.0);
#else
    u_xlatb3.x = u_xlat16_2.x>=1.0;
#endif
    u_xlat16_27 = log2(u_xlat16_27);
    u_xlat27 = u_xlat16_27 * _ShadowTransitionSoftness;
    u_xlat27 = exp2(u_xlat27);
    u_xlat27 = min(u_xlat27, 1.0);
    u_xlat27 = (u_xlatb3.x) ? 1.0 : u_xlat27;
#ifdef UNITY_ADRENO_ES3
    u_xlatb3.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition));
#else
    u_xlatb3.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition);
#endif
    u_xlat27 = (u_xlatb3.x) ? u_xlat27 : 1.0;
    u_xlat27 = u_xlatb18 ? u_xlat27 : float(0.0);
    u_xlat16_12.xyz = vec3(_FirstShadowMultColor.xxyz.y + (-_CoolShadowMultColor.x), _FirstShadowMultColor.xxyz.z + (-_CoolShadowMultColor.y), float(_FirstShadowMultColor.z) + (-_CoolShadowMultColor.z));
    u_xlat12.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_12.xyz + _CoolShadowMultColor.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex));
#else
    u_xlatb4 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex);
#endif
    u_xlat16_2.xyz = (bool(u_xlatb4)) ? u_xlat12.xyz : vec3(_FirstShadowMultColor.x, _FirstShadowMultColor.y, _FirstShadowMultColor.z);
    u_xlat16_12.xyz = u_xlat16_2.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat12.xyz = vec3(u_xlat27) * u_xlat16_12.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_5.xyz = (u_xlatb3.x) ? u_xlat12.xyz : u_xlat16_2.xyz;
    u_xlat16_6.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_6.xyz;
    u_xlat1.xyz = u_xlat16_6.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
    u_xlat1.xyz = (bool(u_xlatb18)) ? u_xlat16_5.xyz : u_xlat1.xyz;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat18) + mhy_AvatarLightDir.xyz;
    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat3.xyz = vec3(u_xlat18) * u_xlat3.xyz;
    u_xlat16_29 = dot(vs_TEXCOORD1.xyz, u_xlat3.xyz);
    u_xlat16_29 = max(u_xlat16_29, 0.00100000005);
    u_xlat16_29 = log2(u_xlat16_29);
    u_xlat16_29 = u_xlat16_29 * _Shininess;
    u_xlat16_29 = exp2(u_xlat16_29);
    u_xlat16_5.xyz = vec3(u_xlat16_29) * _SpecularColor.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(_SpecMulti);
    u_xlat16_5.xyz = u_xlat10_0.xxx * u_xlat16_5.xyz;
    u_xlat16_7.xyz = u_xlat16_5.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness)) + u_xlat1.xyz;
    u_xlat0.xzw = u_xlat16_5.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
    u_xlat16_2.xyz = u_xlat16_6.xyz * u_xlat16_2.xyz + u_xlat0.xzw;
    u_xlat16_5.xyz = u_xlat16_6.xyz * _EmissionColor_MHY.xyz;
    u_xlat16_6.xyz = u_xlat16_5.xyz * vec3(vec3(_EmissionScaler, _EmissionScaler, _EmissionScaler)) + (-u_xlat16_7.xyz);
    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(vec3(_EmissionScaler, _EmissionScaler, _EmissionScaler)) + (-u_xlat16_2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(0.00999999978<u_xlat10_1.w);
#else
    u_xlatb0.x = 0.00999999978<u_xlat10_1.w;
#endif
    u_xlatb0.x = u_xlatb0.x && u_xlatb0.y;
    u_xlat16_29 = (u_xlatb0.x) ? u_xlat10_1.w : 0.0;
    u_xlat16_6.xyz = vec3(u_xlat16_29) * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat16_6.xyz = (u_xlatb0.x) ? u_xlat16_6.xyz : u_xlat16_7.xyz;
    u_xlat9.xyz = u_xlat16_6.xyz * vec3(vec3(_ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness));
    u_xlat1.xyz = _ES_CharacterMainLightColor.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat1.xyz = vec3(vec3(_ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio)) * u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat9.xyz = u_xlat9.xyz * u_xlat1.xyz;
    u_xlat16_7.xyz = u_xlat9.xyz * vec3(10.0, 10.0, 10.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.xyz = min(max(u_xlat16_7.xyz, 0.0), 1.0);
#else
    u_xlat16_7.xyz = clamp(u_xlat16_7.xyz, 0.0, 1.0);
#endif
    u_xlat1.xyz = _ES_CharacterAmbientLightColor.xyz * vec3(_ES_CharacterAmbientLightRatio);
    u_xlat9.xyz = u_xlat1.xyz * u_xlat16_7.xyz + u_xlat9.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn));
#else
    u_xlatb1 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn);
#endif
    u_xlat16_7.xyz = (bool(u_xlatb1)) ? u_xlat9.xyz : u_xlat16_6.xyz;
    u_xlat16_8.xyz = u_xlat16_6.xyz + (-u_xlat16_7.xyz);
    u_xlat16_8.xyz = vec3(u_xlat16_29) * u_xlat16_8.xyz + u_xlat16_7.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(0.00999999978<u_xlat16_29);
#else
    u_xlatb9 = 0.00999999978<u_xlat16_29;
#endif
    u_xlat16_1.xyz = (bool(u_xlatb9)) ? u_xlat16_8.xyz : u_xlat16_7.xyz;
    u_xlat16_32 = max(u_xlat16_1.z, u_xlat16_1.y);
    u_xlat16_3.w = max(u_xlat16_1.x, u_xlat16_32);
    u_xlat16_3.xyz = u_xlat16_1.xyz / u_xlat16_3.www;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(1.0<u_xlat16_3.w);
#else
    u_xlatb18 = 1.0<u_xlat16_3.w;
#endif
    u_xlat16_1.w = 1.0;
    u_xlat16_1 = (bool(u_xlatb18)) ? u_xlat16_3 : u_xlat16_1;
    u_xlat16_32 = min(u_xlat16_1.w, 1.10000002);
    u_xlat16_33 = u_xlat16_1.w + (-u_xlat16_32);
    SV_Target1.xyz = u_xlat16_1.xyz;
    u_xlat16_32 = u_xlat16_29 * u_xlat16_33 + u_xlat16_32;
    SV_Target1.w = u_xlat16_32 * 0.0500000007;
    u_xlat16_5.xyz = vec3(u_xlat16_29) * u_xlat16_5.xyz + u_xlat16_2.xyz;
    u_xlat16_2.xyz = (u_xlatb0.x) ? u_xlat16_5.xyz : u_xlat16_2.xyz;
    u_xlat16_5.xyz = (-u_xlat16_2.xyz) + u_xlat16_6.xyz;
    u_xlat16_5.xyz = vec3(u_xlat16_29) * u_xlat16_5.xyz + u_xlat16_2.xyz;
    u_xlat16_2.xyz = (bool(u_xlatb9)) ? u_xlat16_5.xyz : u_xlat16_2.xyz;
    SV_Target2.xy = u_xlat16_2.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_2.x = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb0.x) ? u_xlat16_2.x : u_xlat16_2.z;
    SV_Target2.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "TOON_LIGHTMAP_ON" "METAL_MAT" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec3 mhy_AvatarLightDir;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump float u_xlat16_4;
float u_xlat16;
void main()
{
    u_xlat0.x = hlslcc_mtx4x4unity_ObjectToWorld[0].y;
    u_xlat0.y = hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat0.z = hlslcc_mtx4x4unity_ObjectToWorld[2].y;
    u_xlat1.xyw = (-_WorldSpaceCameraPos.xyz) + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat0.w = u_xlat1.y;
    u_xlat2.xyz = in_POSITION0.xyz;
    u_xlat2.w = 1.0;
    u_xlat0.x = dot(u_xlat0, u_xlat2);
    u_xlat0 = u_xlat0.xxxx * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat3.w = u_xlat1.x;
    u_xlat3.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;
    u_xlat3.y = hlslcc_mtx4x4unity_ObjectToWorld[1].x;
    u_xlat3.z = hlslcc_mtx4x4unity_ObjectToWorld[2].x;
    u_xlat3.x = dot(u_xlat3, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat3.xxxx + u_xlat0;
    u_xlat1.x = hlslcc_mtx4x4unity_ObjectToWorld[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_ObjectToWorld[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_ObjectToWorld[2].z;
    u_xlat1.x = dot(u_xlat1, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat1.xxxx + u_xlat0;
    u_xlat1.x = hlslcc_mtx4x4unity_ObjectToWorld[0].w;
    u_xlat1.y = hlslcc_mtx4x4unity_ObjectToWorld[1].w;
    u_xlat1.z = hlslcc_mtx4x4unity_ObjectToWorld[2].w;
    u_xlat1.w = hlslcc_mtx4x4unity_ObjectToWorld[3].w;
    u_xlat1.x = dot(u_xlat1, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[3] * u_xlat1.xxxx + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat16 = inversesqrt(u_xlat16);
    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
    u_xlat16_4 = dot(u_xlat1.xyz, mhy_AvatarLightDir.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    vs_TEXCOORD1.w = u_xlat16_4 * 0.497500002 + 0.5;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.zw = u_xlat0.zw;
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD3.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD5.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToCamera[4];
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	mediump vec4 _Color;
uniform 	float _MainTexAlphaUse;
uniform 	mediump float _MainTexAlphaCutoff;
uniform 	float _UseLightMapColorAO;
uniform 	float _UseVertexColorAO;
uniform 	mediump float _LightArea;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	float _UseCoolShadowColorOrTex;
uniform 	mediump vec3 _CoolShadowMultColor;
uniform 	float _UseShadowTransition;
uniform 	float _ShadowTransitionRange;
uniform 	float _ShadowTransitionSoftness;
uniform 	mediump vec3 _SpecularColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump float _EmissionScaler;
uniform 	mediump vec3 _EmissionColor_MHY;
uniform 	mediump float _MTMapBrightness;
uniform 	float _MTMapTileScale;
uniform 	mediump vec3 _MTMapLightColor;
uniform 	mediump vec3 _MTMapDarkColor;
uniform 	mediump vec3 _MTShadowMultiColor;
uniform 	mediump float _MTShininess;
uniform 	mediump vec3 _MTSpecularColor;
uniform 	mediump float _MTSpecularScale;
uniform 	float _ES_CharacterAmbientLightOn;
uniform 	float _ES_CharacterAmbientBrightness;
uniform 	vec3 _ES_CharacterMainLightColor;
uniform 	float _ES_CharacterMainLightBrightness;
uniform 	vec3 _ES_CharacterAmbientLightColor;
uniform 	float _ES_CharacterMainLightRatio;
uniform 	float _ES_CharacterAmbientLightRatio;
uniform 	float _ES_CharacterColorTone;
uniform 	vec3 mhy_AvatarLightDir;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MTMap;
in mediump vec4 vs_COLOR0;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
bool u_xlatb1;
lowp vec4 u_xlat10_2;
bvec2 u_xlatb2;
mediump float u_xlat16_3;
float u_xlat4;
bvec2 u_xlatb4;
mediump float u_xlat16_5;
vec3 u_xlat6;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
vec3 u_xlat10;
mediump vec3 u_xlat16_10;
vec3 u_xlat11;
bool u_xlatb13;
bool u_xlatb14;
mediump vec3 u_xlat16_15;
vec3 u_xlat16;
mediump vec3 u_xlat16_16;
lowp float u_xlat10_16;
bool u_xlatb16;
mediump vec3 u_xlat16_17;
mediump float u_xlat16_19;
float u_xlat26;
bool u_xlatb26;
float u_xlat36;
bool u_xlatb36;
bool u_xlatb38;
void main()
{
    u_xlat0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat36 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat36 = inversesqrt(u_xlat36);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat36) + mhy_AvatarLightDir.xyz;
    u_xlat36 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat36 = inversesqrt(u_xlat36);
    u_xlat0.xyz = vec3(u_xlat36) * u_xlat0.xyz;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy, -1.0);
    u_xlatb2.xy = equal(vec4(_MainTexAlphaUse), vec4(1.0, 2.0, 0.0, 0.0)).xy;
    u_xlat16_3 = u_xlat10_1.w + (-_MainTexAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb36 = !!(u_xlat16_3<0.0);
#else
    u_xlatb36 = u_xlat16_3<0.0;
#endif
    u_xlatb36 = u_xlatb2.x && u_xlatb36;
    if((int(u_xlatb36) * int(0xffffffffu))!=0){discard;}
    u_xlat10_2.xzw = texture(_LightMapTex, vs_TEXCOORD0.xy, -1.0).xyz;
    u_xlatb4.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseLightMapColorAO, _UseVertexColorAO, _UseLightMapColorAO, _UseLightMapColorAO)).xy;
    u_xlat16_3 = (u_xlatb4.x) ? u_xlat10_2.z : 0.5;
    u_xlat16_15.xyz = u_xlat10_1.xyz * _Color.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb36 = !!(0.00999999978<u_xlat10_1.w);
#else
    u_xlatb36 = 0.00999999978<u_xlat10_1.w;
#endif
    u_xlatb1 = u_xlatb36 && u_xlatb2.y;
    u_xlat16_5 = (u_xlatb1) ? u_xlat10_1.w : 0.0;
    u_xlat16_17.x = u_xlat16_3 * vs_COLOR0.x;
    u_xlat16_3 = (u_xlatb4.y) ? u_xlat16_17.x : u_xlat16_3;
#ifdef UNITY_ADRENO_ES3
    u_xlatb13 = !!(u_xlat16_3<0.0500000007);
#else
    u_xlatb13 = u_xlat16_3<0.0500000007;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(0.949999988<u_xlat16_3);
#else
    u_xlatb14 = 0.949999988<u_xlat16_3;
#endif
    u_xlat26 = u_xlat16_3 + vs_TEXCOORD1.w;
    u_xlat26 = u_xlat26 * 0.5;
    u_xlat16_17.x = (u_xlatb14) ? 1.0 : u_xlat26;
    u_xlat16_17.x = (u_xlatb13) ? 0.0 : u_xlat16_17.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(u_xlat16_17.x<_LightArea);
#else
    u_xlatb14 = u_xlat16_17.x<_LightArea;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb26 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition));
#else
    u_xlatb26 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition);
#endif
    u_xlat16_17.x = (-u_xlat16_17.x) + _LightArea;
    u_xlat16_17.x = u_xlat16_17.x / _ShadowTransitionRange;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4.x = !!(u_xlat16_17.x>=1.0);
#else
    u_xlatb4.x = u_xlat16_17.x>=1.0;
#endif
    u_xlat16_16.x = u_xlat16_17.x + 0.00999999978;
    u_xlat16_16.x = log2(u_xlat16_16.x);
    u_xlat16.x = u_xlat16_16.x * _ShadowTransitionSoftness;
    u_xlat16.x = exp2(u_xlat16.x);
    u_xlat16.x = min(u_xlat16.x, 1.0);
    u_xlat4 = (u_xlatb4.x) ? 1.0 : u_xlat16.x;
    u_xlat4 = (u_xlatb26) ? u_xlat4 : 1.0;
    u_xlat4 = u_xlatb14 ? u_xlat4 : float(0.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(0.899999976<u_xlat10_2.x);
#else
    u_xlatb16 = 0.899999976<u_xlat10_2.x;
#endif
    if(u_xlatb16){
        u_xlat16.xy = vs_TEXCOORD1.yy * hlslcc_mtx4x4unity_WorldToCamera[1].xy;
        u_xlat16.xy = hlslcc_mtx4x4unity_WorldToCamera[0].xy * vs_TEXCOORD1.xx + u_xlat16.xy;
        u_xlat6.yz = hlslcc_mtx4x4unity_WorldToCamera[2].xy * vs_TEXCOORD1.zz + u_xlat16.xy;
        u_xlat6.x = u_xlat6.y * _MTMapTileScale;
        u_xlat16_17.xy = u_xlat6.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
        u_xlat10_16 = texture(_MTMap, u_xlat16_17.xy).x;
        u_xlat16_17.x = u_xlat10_16 * _MTMapBrightness;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_17.x = min(max(u_xlat16_17.x, 0.0), 1.0);
#else
        u_xlat16_17.x = clamp(u_xlat16_17.x, 0.0, 1.0);
#endif
        u_xlat16_7.xyz = _MTMapLightColor.xyz + (-_MTMapDarkColor.xyz);
        u_xlat16_17.xyz = u_xlat16_17.xxx * u_xlat16_7.xyz + _MTMapDarkColor.xyz;
        u_xlat16_17.xyz = u_xlat16_15.xyz * u_xlat16_17.xyz;
        u_xlat16_7.x = dot(vs_TEXCOORD1.xyz, u_xlat0.xyz);
        u_xlat16_7.x = max(u_xlat16_7.x, 0.00100000005);
        u_xlat16_7.x = log2(u_xlat16_7.x);
        u_xlat16_7.x = u_xlat16_7.x * _MTShininess;
        u_xlat16_7.x = exp2(u_xlat16_7.x);
        u_xlat16_7.x = u_xlat16_7.x * _MTSpecularScale;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
        u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
        u_xlat16_7.xyz = u_xlat16_7.xxx * _MTSpecularColor.xyz;
        u_xlat16_7.xyz = u_xlat10_2.www * u_xlat16_7.xyz;
        u_xlat16_8.xyz = u_xlat16_17.xyz * _MTShadowMultiColor.xyz;
        u_xlat16_16.xyz = _MTShadowMultiColor.xyz + vec3(-1.0, -1.0, -1.0);
        u_xlat16.xyz = vec3(u_xlat4) * u_xlat16_16.xyz + vec3(1.0, 1.0, 1.0);
        u_xlat16_9.xyz = (bool(u_xlatb26)) ? u_xlat16.xyz : _MTShadowMultiColor.xyz;
        u_xlat16_9.xyz = u_xlat16_17.xyz * u_xlat16_9.xyz;
        u_xlat16.xyz = u_xlat16_17.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
        u_xlat16.xyz = (bool(u_xlatb14)) ? u_xlat16_9.xyz : u_xlat16.xyz;
        u_xlat6.xyz = u_xlat16_7.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
        u_xlat16_16.xyz = u_xlat16.xyz;
        u_xlat16_6.xyz = u_xlat6.xyz;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb38 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex));
#else
        u_xlatb38 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex);
#endif
        u_xlat16_10.xyz = vec3(_FirstShadowMultColor.xxyz.y + (-_CoolShadowMultColor.x), _FirstShadowMultColor.xxyz.z + (-_CoolShadowMultColor.y), float(_FirstShadowMultColor.z) + (-_CoolShadowMultColor.z));
        u_xlat10.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_10.xyz + _CoolShadowMultColor.xyz;
        u_xlat16_17.xyz = (bool(u_xlatb38)) ? u_xlat10.xyz : vec3(_FirstShadowMultColor.x, _FirstShadowMultColor.y, _FirstShadowMultColor.z);
        u_xlat16_8.xyz = u_xlat16_15.xyz * u_xlat16_17.xyz;
        u_xlat16_10.xyz = u_xlat16_17.xyz + vec3(-1.0, -1.0, -1.0);
        u_xlat10.xyz = vec3(u_xlat4) * u_xlat16_10.xyz + vec3(1.0, 1.0, 1.0);
        u_xlat16_17.xyz = (bool(u_xlatb26)) ? u_xlat10.xyz : u_xlat16_17.xyz;
        u_xlat16_17.xyz = u_xlat16_15.xyz * u_xlat16_17.xyz;
        u_xlat10.xyz = u_xlat16_15.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
        u_xlat16.xyz = (bool(u_xlatb14)) ? u_xlat16_17.xyz : u_xlat10.xyz;
        u_xlat16_17.x = dot(vs_TEXCOORD1.xyz, u_xlat0.xyz);
        u_xlat16_17.x = max(u_xlat16_17.x, 0.00100000005);
        u_xlat16_17.x = log2(u_xlat16_17.x);
        u_xlat16_17.x = u_xlat16_17.x * _Shininess;
        u_xlat16_17.x = exp2(u_xlat16_17.x);
        u_xlat16_17.xyz = u_xlat16_17.xxx * _SpecularColor.xyz;
        u_xlat16_17.xyz = u_xlat16_17.xyz * vec3(_SpecMulti);
        u_xlat16_17.xyz = u_xlat10_2.xxx * u_xlat16_17.xyz;
        u_xlat6.xyz = u_xlat16_17.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
        u_xlat16_16.xyz = u_xlat16.xyz;
        u_xlat16_6.xyz = u_xlat6.xyz;
    //ENDIF
    }
    u_xlat16_17.xyz = u_xlat16_15.xyz * _EmissionColor_MHY.xyz;
    u_xlat16_7.xyz = u_xlat16_16.xyz + u_xlat16_6.xyz;
    u_xlat16_8.xyz = u_xlat16_6.xyz + u_xlat16_8.xyz;
    u_xlat16_9.xyz = u_xlat16_17.xyz * vec3(vec3(_EmissionScaler, _EmissionScaler, _EmissionScaler)) + (-u_xlat16_7.xyz);
    u_xlat16_9.xyz = vec3(u_xlat16_5) * u_xlat16_9.xyz + u_xlat16_7.xyz;
    u_xlat16_17.xyz = u_xlat16_17.xyz * vec3(vec3(_EmissionScaler, _EmissionScaler, _EmissionScaler)) + (-u_xlat16_8.xyz);
    u_xlat16_17.xyz = vec3(u_xlat16_5) * u_xlat16_17.xyz + u_xlat16_8.xyz;
    u_xlat16_7.xyz = (bool(u_xlatb1)) ? u_xlat16_9.xyz : u_xlat16_7.xyz;
    u_xlat16_17.xyz = (bool(u_xlatb1)) ? u_xlat16_17.xyz : u_xlat16_8.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(0.00999999978<u_xlat16_5);
#else
    u_xlatb2.x = 0.00999999978<u_xlat16_5;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn));
#else
    u_xlatb14 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn);
#endif
    u_xlat10.xyz = u_xlat16_7.xyz * vec3(vec3(_ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness));
    u_xlat11.xyz = _ES_CharacterMainLightColor.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat11.xyz = vec3(vec3(_ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio)) * u_xlat11.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat10.xyz = u_xlat10.xyz * u_xlat11.xyz;
    u_xlat11.xyz = _ES_CharacterAmbientLightColor.xyz * vec3(_ES_CharacterAmbientLightRatio);
    u_xlat16_8.xyz = u_xlat10.xyz * vec3(10.0, 10.0, 10.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_8.xyz = min(max(u_xlat16_8.xyz, 0.0), 1.0);
#else
    u_xlat16_8.xyz = clamp(u_xlat16_8.xyz, 0.0, 1.0);
#endif
    u_xlat10.xyz = u_xlat11.xyz * u_xlat16_8.xyz + u_xlat10.xyz;
    u_xlat16_8.xyz = (bool(u_xlatb14)) ? u_xlat10.xyz : u_xlat16_7.xyz;
    u_xlat16_9.xyz = u_xlat16_7.xyz + (-u_xlat16_8.xyz);
    u_xlat16_9.xyz = vec3(u_xlat16_5) * u_xlat16_9.xyz + u_xlat16_8.xyz;
    u_xlat16_7.xyz = (-u_xlat16_17.xyz) + u_xlat16_7.xyz;
    u_xlat16_7.xyz = vec3(u_xlat16_5) * u_xlat16_7.xyz + u_xlat16_17.xyz;
    u_xlat16_0.xyz = (u_xlatb2.x) ? u_xlat16_9.xyz : u_xlat16_8.xyz;
    u_xlat16_17.xyz = (u_xlatb2.x) ? u_xlat16_7.xyz : u_xlat16_17.xyz;
    u_xlat16_7.x = max(u_xlat16_0.z, u_xlat16_0.y);
    u_xlat16_1.w = max(u_xlat16_0.x, u_xlat16_7.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(1.0<u_xlat16_1.w);
#else
    u_xlatb2.x = 1.0<u_xlat16_1.w;
#endif
    u_xlat16_1.xyz = u_xlat16_0.xyz / u_xlat16_1.www;
    u_xlat16_0.w = 1.0;
    u_xlat16_0 = (u_xlatb2.x) ? u_xlat16_1 : u_xlat16_0;
    u_xlat16_7.x = min(u_xlat16_0.w, 1.10000002);
    u_xlat16_19 = u_xlat16_0.w + (-u_xlat16_7.x);
    u_xlat16_5 = u_xlat16_5 * u_xlat16_19 + u_xlat16_7.x;
    SV_Target1.w = u_xlat16_5 * 0.0500000007;
    SV_Target0.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb2.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_5 = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb2.x) ? u_xlat16_5 : u_xlat16_17.z;
    SV_Target0.w = 0.0470588244;
    SV_Target1.xyz = u_xlat16_0.xyz;
    SV_Target2.xy = u_xlat16_17.xy;
    SV_Target2.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "MSAA_INTERPOLATION" "TOON_LIGHTMAP_ON" "METAL_MAT" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec3 mhy_AvatarLightDir;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump float u_xlat16_4;
float u_xlat16;
void main()
{
    u_xlat0.x = hlslcc_mtx4x4unity_ObjectToWorld[0].y;
    u_xlat0.y = hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat0.z = hlslcc_mtx4x4unity_ObjectToWorld[2].y;
    u_xlat1.xyw = (-_WorldSpaceCameraPos.xyz) + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat0.w = u_xlat1.y;
    u_xlat2.xyz = in_POSITION0.xyz;
    u_xlat2.w = 1.0;
    u_xlat0.x = dot(u_xlat0, u_xlat2);
    u_xlat0 = u_xlat0.xxxx * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat3.w = u_xlat1.x;
    u_xlat3.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;
    u_xlat3.y = hlslcc_mtx4x4unity_ObjectToWorld[1].x;
    u_xlat3.z = hlslcc_mtx4x4unity_ObjectToWorld[2].x;
    u_xlat3.x = dot(u_xlat3, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat3.xxxx + u_xlat0;
    u_xlat1.x = hlslcc_mtx4x4unity_ObjectToWorld[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_ObjectToWorld[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_ObjectToWorld[2].z;
    u_xlat1.x = dot(u_xlat1, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat1.xxxx + u_xlat0;
    u_xlat1.x = hlslcc_mtx4x4unity_ObjectToWorld[0].w;
    u_xlat1.y = hlslcc_mtx4x4unity_ObjectToWorld[1].w;
    u_xlat1.z = hlslcc_mtx4x4unity_ObjectToWorld[2].w;
    u_xlat1.w = hlslcc_mtx4x4unity_ObjectToWorld[3].w;
    u_xlat1.x = dot(u_xlat1, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[3] * u_xlat1.xxxx + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat16 = inversesqrt(u_xlat16);
    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
    u_xlat16_4 = dot(u_xlat1.xyz, mhy_AvatarLightDir.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    vs_TEXCOORD1.w = u_xlat16_4 * 0.497500002 + 0.5;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.zw = u_xlat0.zw;
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD3.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD5.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToCamera[4];
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	mediump vec4 _Color;
uniform 	float _MainTexAlphaUse;
uniform 	mediump float _MainTexAlphaCutoff;
uniform 	float _UseLightMapColorAO;
uniform 	float _UseVertexColorAO;
uniform 	mediump float _LightArea;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	float _UseCoolShadowColorOrTex;
uniform 	mediump vec3 _CoolShadowMultColor;
uniform 	float _UseShadowTransition;
uniform 	float _ShadowTransitionRange;
uniform 	float _ShadowTransitionSoftness;
uniform 	mediump vec3 _SpecularColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump float _EmissionScaler;
uniform 	mediump vec3 _EmissionColor_MHY;
uniform 	mediump float _MTMapBrightness;
uniform 	float _MTMapTileScale;
uniform 	mediump vec3 _MTMapLightColor;
uniform 	mediump vec3 _MTMapDarkColor;
uniform 	mediump vec3 _MTShadowMultiColor;
uniform 	mediump float _MTShininess;
uniform 	mediump vec3 _MTSpecularColor;
uniform 	mediump float _MTSpecularScale;
uniform 	float _ES_CharacterAmbientLightOn;
uniform 	float _ES_CharacterAmbientBrightness;
uniform 	vec3 _ES_CharacterMainLightColor;
uniform 	float _ES_CharacterMainLightBrightness;
uniform 	vec3 _ES_CharacterAmbientLightColor;
uniform 	float _ES_CharacterMainLightRatio;
uniform 	float _ES_CharacterAmbientLightRatio;
uniform 	float _ES_CharacterColorTone;
uniform 	vec3 mhy_AvatarLightDir;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MTMap;
in mediump vec4 vs_COLOR0;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec2 u_xlat0;
mediump vec4 u_xlat16_0;
vec3 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_2;
bool u_xlatb2;
mediump float u_xlat16_3;
lowp vec3 u_xlat10_4;
bool u_xlatb4;
vec3 u_xlat5;
bvec2 u_xlatb5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
mediump vec3 u_xlat16_11;
vec3 u_xlat12;
mediump vec3 u_xlat16_12;
vec3 u_xlat13;
mediump vec3 u_xlat16_13;
bool u_xlatb18;
vec3 u_xlat19;
bool u_xlatb19;
mediump vec3 u_xlat16_21;
vec2 u_xlat28;
bvec2 u_xlatb28;
bool u_xlatb32;
vec2 u_xlat33;
mediump float u_xlat16_33;
lowp float u_xlat10_33;
bool u_xlatb33;
bool u_xlatb43;
bool u_xlatb46;
mediump float u_xlat16_48;
mediump float u_xlat16_49;
void main()
{
    u_xlat0.xy = dFdx(vs_TEXCOORD0.xy);
    u_xlat28.xy = dFdy(vs_TEXCOORD0.xy);
    u_xlat0.xy = u_xlat28.xy + u_xlat0.xy;
    u_xlat28.xy = (-u_xlat0.xy) * vec2(0.25, 0.25) + vs_TEXCOORD0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25) + vs_TEXCOORD0.xy;
    u_xlat0.xy = (int(gl_SampleID) != 0) ? u_xlat28.xy : u_xlat0.xy;
    u_xlat1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat28.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat28.x = inversesqrt(u_xlat28.x);
    u_xlat1.xyz = u_xlat1.xyz * u_xlat28.xxx + mhy_AvatarLightDir.xyz;
    u_xlat28.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat28.x = inversesqrt(u_xlat28.x);
    u_xlat1.xyz = u_xlat28.xxx * u_xlat1.xyz;
    u_xlat10_2 = textureLod(_MainTex, u_xlat0.xy, 0.0);
    u_xlatb28.xy = equal(vec4(_MainTexAlphaUse), vec4(1.0, 2.0, 1.0, 2.0)).xy;
    u_xlat16_3 = u_xlat10_2.w + (-_MainTexAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb43 = !!(u_xlat16_3<0.0);
#else
    u_xlatb43 = u_xlat16_3<0.0;
#endif
    u_xlatb28.x = u_xlatb28.x && u_xlatb43;
    if((int(u_xlatb28.x) * int(0xffffffffu))!=0){discard;}
    u_xlat10_4.xyz = textureLod(_LightMapTex, u_xlat0.xy, 0.0).xyz;
    u_xlatb5.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseLightMapColorAO, _UseVertexColorAO, _UseLightMapColorAO, _UseLightMapColorAO)).xy;
    u_xlat16_3 = (u_xlatb5.x) ? u_xlat10_4.y : 0.5;
    u_xlat16_6.xyz = u_xlat10_2.xyz * _Color.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(0.00999999978<u_xlat10_2.w);
#else
    u_xlatb2 = 0.00999999978<u_xlat10_2.w;
#endif
    u_xlatb18 = u_xlatb28.y && u_xlatb2;
    u_xlat16_48 = (u_xlatb18) ? u_xlat10_2.w : 0.0;
    u_xlat16_7.x = u_xlat16_3 * vs_COLOR0.x;
    u_xlat16_7.x = (u_xlatb5.y) ? u_xlat16_7.x : u_xlat16_3;
#ifdef UNITY_ADRENO_ES3
    u_xlatb46 = !!(u_xlat16_7.x<0.0500000007);
#else
    u_xlatb46 = u_xlat16_7.x<0.0500000007;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb5.x = !!(0.949999988<u_xlat16_7.x);
#else
    u_xlatb5.x = 0.949999988<u_xlat16_7.x;
#endif
    u_xlat19.x = u_xlat16_7.x + vs_TEXCOORD1.w;
    u_xlat19.x = u_xlat19.x * 0.5;
    u_xlat16_7.x = (u_xlatb5.x) ? 1.0 : u_xlat19.x;
    u_xlat16_7.x = (u_xlatb46) ? 0.0 : u_xlat16_7.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb46 = !!(u_xlat16_7.x<_LightArea);
#else
    u_xlatb46 = u_xlat16_7.x<_LightArea;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb5.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition));
#else
    u_xlatb5.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition);
#endif
    u_xlat16_7.x = (-u_xlat16_7.x) + _LightArea;
    u_xlat16_7.x = u_xlat16_7.x / _ShadowTransitionRange;
#ifdef UNITY_ADRENO_ES3
    u_xlatb19 = !!(u_xlat16_7.x>=1.0);
#else
    u_xlatb19 = u_xlat16_7.x>=1.0;
#endif
    u_xlat16_33 = u_xlat16_7.x + 0.00999999978;
    u_xlat16_33 = log2(u_xlat16_33);
    u_xlat33.x = u_xlat16_33 * _ShadowTransitionSoftness;
    u_xlat33.x = exp2(u_xlat33.x);
    u_xlat33.x = min(u_xlat33.x, 1.0);
    u_xlat19.x = (u_xlatb19) ? 1.0 : u_xlat33.x;
    u_xlat19.x = (u_xlatb5.x) ? u_xlat19.x : 1.0;
    u_xlat19.x = u_xlatb46 ? u_xlat19.x : float(0.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(0.899999976<u_xlat10_4.x);
#else
    u_xlatb33 = 0.899999976<u_xlat10_4.x;
#endif
    if(u_xlatb33){
        u_xlat33.xy = vs_TEXCOORD1.yy * hlslcc_mtx4x4unity_WorldToCamera[1].xy;
        u_xlat33.xy = hlslcc_mtx4x4unity_WorldToCamera[0].xy * vs_TEXCOORD1.xx + u_xlat33.xy;
        u_xlat8.yz = hlslcc_mtx4x4unity_WorldToCamera[2].xy * vs_TEXCOORD1.zz + u_xlat33.xy;
        u_xlat8.x = u_xlat8.y * _MTMapTileScale;
        u_xlat16_7.xy = u_xlat8.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
        u_xlat10_33 = texture(_MTMap, u_xlat16_7.xy, -1.0).x;
        u_xlat16_7.x = u_xlat10_33 * _MTMapBrightness;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
        u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
        u_xlat16_21.xyz = _MTMapLightColor.xyz + (-_MTMapDarkColor.xyz);
        u_xlat16_7.xyz = u_xlat16_7.xxx * u_xlat16_21.xyz + _MTMapDarkColor.xyz;
        u_xlat16_7.xyz = u_xlat16_6.xyz * u_xlat16_7.xyz;
        u_xlat16_49 = dot(vs_TEXCOORD1.xyz, u_xlat1.xyz);
        u_xlat16_49 = max(u_xlat16_49, 0.00100000005);
        u_xlat16_49 = log2(u_xlat16_49);
        u_xlat16_49 = u_xlat16_49 * _MTShininess;
        u_xlat16_49 = exp2(u_xlat16_49);
        u_xlat16_49 = u_xlat16_49 * _MTSpecularScale;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_49 = min(max(u_xlat16_49, 0.0), 1.0);
#else
        u_xlat16_49 = clamp(u_xlat16_49, 0.0, 1.0);
#endif
        u_xlat16_9.xyz = vec3(u_xlat16_49) * _MTSpecularColor.xyz;
        u_xlat16_9.xyz = u_xlat10_4.zzz * u_xlat16_9.xyz;
        u_xlat16_10.xyz = u_xlat16_7.xyz * _MTShadowMultiColor.xyz;
        u_xlat16_8.xyz = _MTShadowMultiColor.xyz + vec3(-1.0, -1.0, -1.0);
        u_xlat8.xyz = u_xlat19.xxx * u_xlat16_8.xyz + vec3(1.0, 1.0, 1.0);
        u_xlat16_11.xyz = (u_xlatb5.x) ? u_xlat8.xyz : _MTShadowMultiColor.xyz;
        u_xlat16_11.xyz = u_xlat16_7.xyz * u_xlat16_11.xyz;
        u_xlat8.xyz = u_xlat16_7.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
        u_xlat8.xyz = (bool(u_xlatb46)) ? u_xlat16_11.xyz : u_xlat8.xyz;
        u_xlat12.xyz = u_xlat16_9.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
        u_xlat16_8.xyz = u_xlat8.xyz;
        u_xlat16_12.xyz = u_xlat12.xyz;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb32 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex));
#else
        u_xlatb32 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex);
#endif
        u_xlat16_13.xyz = vec3(_FirstShadowMultColor.xxyz.y + (-_CoolShadowMultColor.x), _FirstShadowMultColor.xxyz.z + (-_CoolShadowMultColor.y), float(_FirstShadowMultColor.z) + (-_CoolShadowMultColor.z));
        u_xlat13.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_13.xyz + _CoolShadowMultColor.xyz;
        u_xlat16_7.xyz = (bool(u_xlatb32)) ? u_xlat13.xyz : vec3(_FirstShadowMultColor.x, _FirstShadowMultColor.y, _FirstShadowMultColor.z);
        u_xlat16_10.xyz = u_xlat16_6.xyz * u_xlat16_7.xyz;
        u_xlat16_13.xyz = u_xlat16_7.xyz + vec3(-1.0, -1.0, -1.0);
        u_xlat19.xyz = u_xlat19.xxx * u_xlat16_13.xyz + vec3(1.0, 1.0, 1.0);
        u_xlat16_7.xyz = (u_xlatb5.x) ? u_xlat19.xyz : u_xlat16_7.xyz;
        u_xlat16_7.xyz = u_xlat16_6.xyz * u_xlat16_7.xyz;
        u_xlat5.xyz = u_xlat16_6.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
        u_xlat8.xyz = (bool(u_xlatb46)) ? u_xlat16_7.xyz : u_xlat5.xyz;
        u_xlat16_7.x = dot(vs_TEXCOORD1.xyz, u_xlat1.xyz);
        u_xlat16_7.x = max(u_xlat16_7.x, 0.00100000005);
        u_xlat16_7.x = log2(u_xlat16_7.x);
        u_xlat16_7.x = u_xlat16_7.x * _Shininess;
        u_xlat16_7.x = exp2(u_xlat16_7.x);
        u_xlat16_7.xyz = u_xlat16_7.xxx * _SpecularColor.xyz;
        u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(_SpecMulti);
        u_xlat16_7.xyz = u_xlat10_4.xxx * u_xlat16_7.xyz;
        u_xlat12.xyz = u_xlat16_7.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
        u_xlat16_8.xyz = u_xlat8.xyz;
        u_xlat16_12.xyz = u_xlat12.xyz;
    //ENDIF
    }
    u_xlat16_6.xyz = u_xlat16_6.xyz * _EmissionColor_MHY.xyz;
    u_xlat16_7.xyz = u_xlat16_8.xyz + u_xlat16_12.xyz;
    u_xlat16_9.xyz = u_xlat16_10.xyz + u_xlat16_12.xyz;
    u_xlat16_10.xyz = u_xlat16_6.xyz * vec3(vec3(_EmissionScaler, _EmissionScaler, _EmissionScaler)) + (-u_xlat16_7.xyz);
    u_xlat16_10.xyz = vec3(u_xlat16_48) * u_xlat16_10.xyz + u_xlat16_7.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(vec3(_EmissionScaler, _EmissionScaler, _EmissionScaler)) + (-u_xlat16_9.xyz);
    u_xlat16_6.xyz = vec3(u_xlat16_48) * u_xlat16_6.xyz + u_xlat16_9.xyz;
    u_xlat16_7.xyz = (bool(u_xlatb18)) ? u_xlat16_10.xyz : u_xlat16_7.xyz;
    u_xlat16_6.xyz = (bool(u_xlatb18)) ? u_xlat16_6.xyz : u_xlat16_9.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(0.00999999978<u_xlat16_48);
#else
    u_xlatb4 = 0.00999999978<u_xlat16_48;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn));
#else
    u_xlatb18 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn);
#endif
    u_xlat5.xyz = u_xlat16_7.xyz * vec3(vec3(_ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness));
    u_xlat13.xyz = _ES_CharacterMainLightColor.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat13.xyz = vec3(vec3(_ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio)) * u_xlat13.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat5.xyz = u_xlat5.xyz * u_xlat13.xyz;
    u_xlat13.xyz = _ES_CharacterAmbientLightColor.xyz * vec3(_ES_CharacterAmbientLightRatio);
    u_xlat16_9.xyz = u_xlat5.xyz * vec3(10.0, 10.0, 10.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_9.xyz = min(max(u_xlat16_9.xyz, 0.0), 1.0);
#else
    u_xlat16_9.xyz = clamp(u_xlat16_9.xyz, 0.0, 1.0);
#endif
    u_xlat5.xyz = u_xlat13.xyz * u_xlat16_9.xyz + u_xlat5.xyz;
    u_xlat16_9.xyz = (bool(u_xlatb18)) ? u_xlat5.xyz : u_xlat16_7.xyz;
    u_xlat16_10.xyz = u_xlat16_7.xyz + (-u_xlat16_9.xyz);
    u_xlat16_10.xyz = vec3(u_xlat16_48) * u_xlat16_10.xyz + u_xlat16_9.xyz;
    u_xlat16_7.xyz = (-u_xlat16_6.xyz) + u_xlat16_7.xyz;
    u_xlat16_7.xyz = vec3(u_xlat16_48) * u_xlat16_7.xyz + u_xlat16_6.xyz;
    u_xlat16_0.xyz = (bool(u_xlatb4)) ? u_xlat16_10.xyz : u_xlat16_9.xyz;
    u_xlat16_6.xyz = (bool(u_xlatb4)) ? u_xlat16_7.xyz : u_xlat16_6.xyz;
    u_xlat16_7.x = max(u_xlat16_0.z, u_xlat16_0.y);
    u_xlat16_1.w = max(u_xlat16_0.x, u_xlat16_7.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(1.0<u_xlat16_1.w);
#else
    u_xlatb4 = 1.0<u_xlat16_1.w;
#endif
    u_xlat16_1.xyz = u_xlat16_0.xyz / u_xlat16_1.www;
    u_xlat16_0.w = 1.0;
    u_xlat16_0 = (bool(u_xlatb4)) ? u_xlat16_1 : u_xlat16_0;
    u_xlat16_7.x = min(u_xlat16_0.w, 1.10000002);
    u_xlat16_21.x = u_xlat16_0.w + (-u_xlat16_7.x);
    u_xlat16_48 = u_xlat16_48 * u_xlat16_21.x + u_xlat16_7.x;
    SV_Target1.w = u_xlat16_48 * 0.0500000007;
    SV_Target0.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb4 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_48 = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb4) ? u_xlat16_48 : u_xlat16_6.z;
    SV_Target0.w = 0.0470588244;
    SV_Target1.xyz = u_xlat16_0.xyz;
    SV_Target2.xy = u_xlat16_6.xy;
    SV_Target2.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "LINE_INTERPOLATION" "TOON_LIGHTMAP_ON" "METAL_MAT" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec3 mhy_AvatarLightDir;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump float u_xlat16_4;
float u_xlat16;
void main()
{
    u_xlat0.x = hlslcc_mtx4x4unity_ObjectToWorld[0].y;
    u_xlat0.y = hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat0.z = hlslcc_mtx4x4unity_ObjectToWorld[2].y;
    u_xlat1.xyw = (-_WorldSpaceCameraPos.xyz) + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat0.w = u_xlat1.y;
    u_xlat2.xyz = in_POSITION0.xyz;
    u_xlat2.w = 1.0;
    u_xlat0.x = dot(u_xlat0, u_xlat2);
    u_xlat0 = u_xlat0.xxxx * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat3.w = u_xlat1.x;
    u_xlat3.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;
    u_xlat3.y = hlslcc_mtx4x4unity_ObjectToWorld[1].x;
    u_xlat3.z = hlslcc_mtx4x4unity_ObjectToWorld[2].x;
    u_xlat3.x = dot(u_xlat3, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat3.xxxx + u_xlat0;
    u_xlat1.x = hlslcc_mtx4x4unity_ObjectToWorld[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_ObjectToWorld[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_ObjectToWorld[2].z;
    u_xlat1.x = dot(u_xlat1, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat1.xxxx + u_xlat0;
    u_xlat1.x = hlslcc_mtx4x4unity_ObjectToWorld[0].w;
    u_xlat1.y = hlslcc_mtx4x4unity_ObjectToWorld[1].w;
    u_xlat1.z = hlslcc_mtx4x4unity_ObjectToWorld[2].w;
    u_xlat1.w = hlslcc_mtx4x4unity_ObjectToWorld[3].w;
    u_xlat1.x = dot(u_xlat1, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[3] * u_xlat1.xxxx + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat16 = inversesqrt(u_xlat16);
    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
    u_xlat16_4 = dot(u_xlat1.xyz, mhy_AvatarLightDir.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    vs_TEXCOORD1.w = u_xlat16_4 * 0.497500002 + 0.5;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.zw = u_xlat0.zw;
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD3.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD5.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToCamera[4];
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	mediump vec4 _Color;
uniform 	float _MainTexAlphaUse;
uniform 	mediump float _MainTexAlphaCutoff;
uniform 	float _UseLightMapColorAO;
uniform 	float _UseVertexColorAO;
uniform 	mediump float _LightArea;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	float _UseCoolShadowColorOrTex;
uniform 	mediump vec3 _CoolShadowMultColor;
uniform 	float _UseShadowTransition;
uniform 	float _ShadowTransitionRange;
uniform 	float _ShadowTransitionSoftness;
uniform 	mediump vec3 _SpecularColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump float _EmissionScaler;
uniform 	mediump vec3 _EmissionColor_MHY;
uniform 	mediump float _MTMapBrightness;
uniform 	float _MTMapTileScale;
uniform 	mediump vec3 _MTMapLightColor;
uniform 	mediump vec3 _MTMapDarkColor;
uniform 	mediump vec3 _MTShadowMultiColor;
uniform 	mediump float _MTShininess;
uniform 	mediump vec3 _MTSpecularColor;
uniform 	mediump float _MTSpecularScale;
uniform 	float _ES_CharacterAmbientLightOn;
uniform 	float _ES_CharacterAmbientBrightness;
uniform 	vec3 _ES_CharacterMainLightColor;
uniform 	float _ES_CharacterMainLightBrightness;
uniform 	vec3 _ES_CharacterAmbientLightColor;
uniform 	float _ES_CharacterMainLightRatio;
uniform 	float _ES_CharacterAmbientLightRatio;
uniform 	float _ES_CharacterColorTone;
uniform 	vec3 mhy_AvatarLightDir;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MTMap;
in mediump vec4 vs_COLOR0;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
bool u_xlatb1;
lowp vec4 u_xlat10_2;
bvec2 u_xlatb2;
mediump float u_xlat16_3;
float u_xlat4;
bvec2 u_xlatb4;
mediump float u_xlat16_5;
vec3 u_xlat6;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
vec3 u_xlat10;
mediump vec3 u_xlat16_10;
vec3 u_xlat11;
bool u_xlatb13;
bool u_xlatb14;
mediump vec3 u_xlat16_15;
vec3 u_xlat16;
mediump vec3 u_xlat16_16;
lowp float u_xlat10_16;
bool u_xlatb16;
mediump vec3 u_xlat16_17;
mediump float u_xlat16_19;
float u_xlat26;
bool u_xlatb26;
float u_xlat36;
bool u_xlatb36;
bool u_xlatb38;
void main()
{
    u_xlat0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat36 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat36 = inversesqrt(u_xlat36);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat36) + mhy_AvatarLightDir.xyz;
    u_xlat36 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat36 = inversesqrt(u_xlat36);
    u_xlat0.xyz = vec3(u_xlat36) * u_xlat0.xyz;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy, -1.0);
    u_xlatb2.xy = equal(vec4(_MainTexAlphaUse), vec4(1.0, 2.0, 0.0, 0.0)).xy;
    u_xlat16_3 = u_xlat10_1.w + (-_MainTexAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb36 = !!(u_xlat16_3<0.0);
#else
    u_xlatb36 = u_xlat16_3<0.0;
#endif
    u_xlatb36 = u_xlatb2.x && u_xlatb36;
    if((int(u_xlatb36) * int(0xffffffffu))!=0){discard;}
    u_xlat10_2.xzw = texture(_LightMapTex, vs_TEXCOORD0.xy, -1.0).xyz;
    u_xlatb4.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseLightMapColorAO, _UseVertexColorAO, _UseLightMapColorAO, _UseLightMapColorAO)).xy;
    u_xlat16_3 = (u_xlatb4.x) ? u_xlat10_2.z : 0.5;
    u_xlat16_15.xyz = u_xlat10_1.xyz * _Color.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb36 = !!(0.00999999978<u_xlat10_1.w);
#else
    u_xlatb36 = 0.00999999978<u_xlat10_1.w;
#endif
    u_xlatb1 = u_xlatb36 && u_xlatb2.y;
    u_xlat16_5 = (u_xlatb1) ? u_xlat10_1.w : 0.0;
    u_xlat16_17.x = u_xlat16_3 * vs_COLOR0.x;
    u_xlat16_3 = (u_xlatb4.y) ? u_xlat16_17.x : u_xlat16_3;
#ifdef UNITY_ADRENO_ES3
    u_xlatb13 = !!(u_xlat16_3<0.0500000007);
#else
    u_xlatb13 = u_xlat16_3<0.0500000007;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(0.949999988<u_xlat16_3);
#else
    u_xlatb14 = 0.949999988<u_xlat16_3;
#endif
    u_xlat26 = u_xlat16_3 + vs_TEXCOORD1.w;
    u_xlat26 = u_xlat26 * 0.5;
    u_xlat16_17.x = (u_xlatb14) ? 1.0 : u_xlat26;
    u_xlat16_17.x = (u_xlatb13) ? 0.0 : u_xlat16_17.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(u_xlat16_17.x<_LightArea);
#else
    u_xlatb14 = u_xlat16_17.x<_LightArea;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb26 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition));
#else
    u_xlatb26 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition);
#endif
    u_xlat16_17.x = (-u_xlat16_17.x) + _LightArea;
    u_xlat16_17.x = u_xlat16_17.x / _ShadowTransitionRange;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4.x = !!(u_xlat16_17.x>=1.0);
#else
    u_xlatb4.x = u_xlat16_17.x>=1.0;
#endif
    u_xlat16_16.x = u_xlat16_17.x + 0.00999999978;
    u_xlat16_16.x = log2(u_xlat16_16.x);
    u_xlat16.x = u_xlat16_16.x * _ShadowTransitionSoftness;
    u_xlat16.x = exp2(u_xlat16.x);
    u_xlat16.x = min(u_xlat16.x, 1.0);
    u_xlat4 = (u_xlatb4.x) ? 1.0 : u_xlat16.x;
    u_xlat4 = (u_xlatb26) ? u_xlat4 : 1.0;
    u_xlat4 = u_xlatb14 ? u_xlat4 : float(0.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(0.899999976<u_xlat10_2.x);
#else
    u_xlatb16 = 0.899999976<u_xlat10_2.x;
#endif
    if(u_xlatb16){
        u_xlat16.xy = vs_TEXCOORD1.yy * hlslcc_mtx4x4unity_WorldToCamera[1].xy;
        u_xlat16.xy = hlslcc_mtx4x4unity_WorldToCamera[0].xy * vs_TEXCOORD1.xx + u_xlat16.xy;
        u_xlat6.yz = hlslcc_mtx4x4unity_WorldToCamera[2].xy * vs_TEXCOORD1.zz + u_xlat16.xy;
        u_xlat6.x = u_xlat6.y * _MTMapTileScale;
        u_xlat16_17.xy = u_xlat6.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
        u_xlat10_16 = texture(_MTMap, u_xlat16_17.xy, -1.0).x;
        u_xlat16_17.x = u_xlat10_16 * _MTMapBrightness;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_17.x = min(max(u_xlat16_17.x, 0.0), 1.0);
#else
        u_xlat16_17.x = clamp(u_xlat16_17.x, 0.0, 1.0);
#endif
        u_xlat16_7.xyz = _MTMapLightColor.xyz + (-_MTMapDarkColor.xyz);
        u_xlat16_17.xyz = u_xlat16_17.xxx * u_xlat16_7.xyz + _MTMapDarkColor.xyz;
        u_xlat16_17.xyz = u_xlat16_15.xyz * u_xlat16_17.xyz;
        u_xlat16_7.x = dot(vs_TEXCOORD1.xyz, u_xlat0.xyz);
        u_xlat16_7.x = max(u_xlat16_7.x, 0.00100000005);
        u_xlat16_7.x = log2(u_xlat16_7.x);
        u_xlat16_7.x = u_xlat16_7.x * _MTShininess;
        u_xlat16_7.x = exp2(u_xlat16_7.x);
        u_xlat16_7.x = u_xlat16_7.x * _MTSpecularScale;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
        u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
        u_xlat16_7.xyz = u_xlat16_7.xxx * _MTSpecularColor.xyz;
        u_xlat16_7.xyz = u_xlat10_2.www * u_xlat16_7.xyz;
        u_xlat16_8.xyz = u_xlat16_17.xyz * _MTShadowMultiColor.xyz;
        u_xlat16_16.xyz = _MTShadowMultiColor.xyz + vec3(-1.0, -1.0, -1.0);
        u_xlat16.xyz = vec3(u_xlat4) * u_xlat16_16.xyz + vec3(1.0, 1.0, 1.0);
        u_xlat16_9.xyz = (bool(u_xlatb26)) ? u_xlat16.xyz : _MTShadowMultiColor.xyz;
        u_xlat16_9.xyz = u_xlat16_17.xyz * u_xlat16_9.xyz;
        u_xlat16.xyz = u_xlat16_17.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
        u_xlat16.xyz = (bool(u_xlatb14)) ? u_xlat16_9.xyz : u_xlat16.xyz;
        u_xlat6.xyz = u_xlat16_7.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
        u_xlat16_16.xyz = u_xlat16.xyz;
        u_xlat16_6.xyz = u_xlat6.xyz;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb38 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex));
#else
        u_xlatb38 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex);
#endif
        u_xlat16_10.xyz = vec3(_FirstShadowMultColor.xxyz.y + (-_CoolShadowMultColor.x), _FirstShadowMultColor.xxyz.z + (-_CoolShadowMultColor.y), float(_FirstShadowMultColor.z) + (-_CoolShadowMultColor.z));
        u_xlat10.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_10.xyz + _CoolShadowMultColor.xyz;
        u_xlat16_17.xyz = (bool(u_xlatb38)) ? u_xlat10.xyz : vec3(_FirstShadowMultColor.x, _FirstShadowMultColor.y, _FirstShadowMultColor.z);
        u_xlat16_8.xyz = u_xlat16_15.xyz * u_xlat16_17.xyz;
        u_xlat16_10.xyz = u_xlat16_17.xyz + vec3(-1.0, -1.0, -1.0);
        u_xlat10.xyz = vec3(u_xlat4) * u_xlat16_10.xyz + vec3(1.0, 1.0, 1.0);
        u_xlat16_17.xyz = (bool(u_xlatb26)) ? u_xlat10.xyz : u_xlat16_17.xyz;
        u_xlat16_17.xyz = u_xlat16_15.xyz * u_xlat16_17.xyz;
        u_xlat10.xyz = u_xlat16_15.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
        u_xlat16.xyz = (bool(u_xlatb14)) ? u_xlat16_17.xyz : u_xlat10.xyz;
        u_xlat16_17.x = dot(vs_TEXCOORD1.xyz, u_xlat0.xyz);
        u_xlat16_17.x = max(u_xlat16_17.x, 0.00100000005);
        u_xlat16_17.x = log2(u_xlat16_17.x);
        u_xlat16_17.x = u_xlat16_17.x * _Shininess;
        u_xlat16_17.x = exp2(u_xlat16_17.x);
        u_xlat16_17.xyz = u_xlat16_17.xxx * _SpecularColor.xyz;
        u_xlat16_17.xyz = u_xlat16_17.xyz * vec3(_SpecMulti);
        u_xlat16_17.xyz = u_xlat10_2.xxx * u_xlat16_17.xyz;
        u_xlat6.xyz = u_xlat16_17.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
        u_xlat16_16.xyz = u_xlat16.xyz;
        u_xlat16_6.xyz = u_xlat6.xyz;
    //ENDIF
    }
    u_xlat16_17.xyz = u_xlat16_15.xyz * _EmissionColor_MHY.xyz;
    u_xlat16_7.xyz = u_xlat16_16.xyz + u_xlat16_6.xyz;
    u_xlat16_8.xyz = u_xlat16_6.xyz + u_xlat16_8.xyz;
    u_xlat16_9.xyz = u_xlat16_17.xyz * vec3(vec3(_EmissionScaler, _EmissionScaler, _EmissionScaler)) + (-u_xlat16_7.xyz);
    u_xlat16_9.xyz = vec3(u_xlat16_5) * u_xlat16_9.xyz + u_xlat16_7.xyz;
    u_xlat16_17.xyz = u_xlat16_17.xyz * vec3(vec3(_EmissionScaler, _EmissionScaler, _EmissionScaler)) + (-u_xlat16_8.xyz);
    u_xlat16_17.xyz = vec3(u_xlat16_5) * u_xlat16_17.xyz + u_xlat16_8.xyz;
    u_xlat16_7.xyz = (bool(u_xlatb1)) ? u_xlat16_9.xyz : u_xlat16_7.xyz;
    u_xlat16_17.xyz = (bool(u_xlatb1)) ? u_xlat16_17.xyz : u_xlat16_8.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(0.00999999978<u_xlat16_5);
#else
    u_xlatb2.x = 0.00999999978<u_xlat16_5;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn));
#else
    u_xlatb14 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn);
#endif
    u_xlat10.xyz = u_xlat16_7.xyz * vec3(vec3(_ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness));
    u_xlat11.xyz = _ES_CharacterMainLightColor.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat11.xyz = vec3(vec3(_ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio)) * u_xlat11.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat10.xyz = u_xlat10.xyz * u_xlat11.xyz;
    u_xlat11.xyz = _ES_CharacterAmbientLightColor.xyz * vec3(_ES_CharacterAmbientLightRatio);
    u_xlat16_8.xyz = u_xlat10.xyz * vec3(10.0, 10.0, 10.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_8.xyz = min(max(u_xlat16_8.xyz, 0.0), 1.0);
#else
    u_xlat16_8.xyz = clamp(u_xlat16_8.xyz, 0.0, 1.0);
#endif
    u_xlat10.xyz = u_xlat11.xyz * u_xlat16_8.xyz + u_xlat10.xyz;
    u_xlat16_8.xyz = (bool(u_xlatb14)) ? u_xlat10.xyz : u_xlat16_7.xyz;
    u_xlat16_9.xyz = u_xlat16_7.xyz + (-u_xlat16_8.xyz);
    u_xlat16_9.xyz = vec3(u_xlat16_5) * u_xlat16_9.xyz + u_xlat16_8.xyz;
    u_xlat16_7.xyz = (-u_xlat16_17.xyz) + u_xlat16_7.xyz;
    u_xlat16_7.xyz = vec3(u_xlat16_5) * u_xlat16_7.xyz + u_xlat16_17.xyz;
    u_xlat16_0.xyz = (u_xlatb2.x) ? u_xlat16_9.xyz : u_xlat16_8.xyz;
    u_xlat16_17.xyz = (u_xlatb2.x) ? u_xlat16_7.xyz : u_xlat16_17.xyz;
    u_xlat16_7.x = max(u_xlat16_0.z, u_xlat16_0.y);
    u_xlat16_1.w = max(u_xlat16_0.x, u_xlat16_7.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(1.0<u_xlat16_1.w);
#else
    u_xlatb2.x = 1.0<u_xlat16_1.w;
#endif
    u_xlat16_1.xyz = u_xlat16_0.xyz / u_xlat16_1.www;
    u_xlat16_0.w = 1.0;
    u_xlat16_0 = (u_xlatb2.x) ? u_xlat16_1 : u_xlat16_0;
    u_xlat16_7.x = min(u_xlat16_0.w, 1.10000002);
    u_xlat16_19 = u_xlat16_0.w + (-u_xlat16_7.x);
    u_xlat16_5 = u_xlat16_5 * u_xlat16_19 + u_xlat16_7.x;
    SV_Target1.w = u_xlat16_5 * 0.0500000007;
    SV_Target0.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb2.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_5 = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb2.x) ? u_xlat16_5 : u_xlat16_17.z;
    SV_Target0.w = 0.0470588244;
    SV_Target1.xyz = u_xlat16_0.xyz;
    SV_Target2.xy = u_xlat16_17.xy;
    SV_Target2.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "TOON_LIGHTMAP_ON" "BACK_FACE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec3 mhy_AvatarLightDir;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump float u_xlat16_4;
float u_xlat16;
void main()
{
    u_xlat0.x = hlslcc_mtx4x4unity_ObjectToWorld[0].y;
    u_xlat0.y = hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat0.z = hlslcc_mtx4x4unity_ObjectToWorld[2].y;
    u_xlat1.xyw = (-_WorldSpaceCameraPos.xyz) + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat0.w = u_xlat1.y;
    u_xlat2.xyz = in_POSITION0.xyz;
    u_xlat2.w = 1.0;
    u_xlat0.x = dot(u_xlat0, u_xlat2);
    u_xlat0 = u_xlat0.xxxx * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat3.w = u_xlat1.x;
    u_xlat3.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;
    u_xlat3.y = hlslcc_mtx4x4unity_ObjectToWorld[1].x;
    u_xlat3.z = hlslcc_mtx4x4unity_ObjectToWorld[2].x;
    u_xlat3.x = dot(u_xlat3, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat3.xxxx + u_xlat0;
    u_xlat1.x = hlslcc_mtx4x4unity_ObjectToWorld[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_ObjectToWorld[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_ObjectToWorld[2].z;
    u_xlat1.x = dot(u_xlat1, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat1.xxxx + u_xlat0;
    u_xlat1.x = hlslcc_mtx4x4unity_ObjectToWorld[0].w;
    u_xlat1.y = hlslcc_mtx4x4unity_ObjectToWorld[1].w;
    u_xlat1.z = hlslcc_mtx4x4unity_ObjectToWorld[2].w;
    u_xlat1.w = hlslcc_mtx4x4unity_ObjectToWorld[3].w;
    u_xlat1.x = dot(u_xlat1, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[3] * u_xlat1.xxxx + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat16 = inversesqrt(u_xlat16);
    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
    u_xlat16_4 = dot(u_xlat1.xyz, mhy_AvatarLightDir.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    vs_TEXCOORD1.w = u_xlat16_4 * 0.497500002 + 0.5;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.zw = u_xlat0.zw;
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD3.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD5.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	mediump vec4 _Color;
uniform 	float _MainTexAlphaUse;
uniform 	mediump float _MainTexAlphaCutoff;
uniform 	float _UseLightMapColorAO;
uniform 	float _UseVertexColorAO;
uniform 	mediump float _LightArea;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	float _UseCoolShadowColorOrTex;
uniform 	mediump vec3 _CoolShadowMultColor;
uniform 	float _UseShadowTransition;
uniform 	float _ShadowTransitionRange;
uniform 	float _ShadowTransitionSoftness;
uniform 	mediump vec3 _SpecularColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump float _EmissionScaler;
uniform 	mediump vec3 _EmissionColor_MHY;
uniform 	float _ES_CharacterAmbientLightOn;
uniform 	float _ES_CharacterAmbientBrightness;
uniform 	vec3 _ES_CharacterMainLightColor;
uniform 	float _ES_CharacterMainLightBrightness;
uniform 	vec3 _ES_CharacterAmbientLightColor;
uniform 	float _ES_CharacterMainLightRatio;
uniform 	float _ES_CharacterAmbientLightRatio;
uniform 	float _ES_CharacterColorTone;
uniform 	vec3 mhy_AvatarLightDir;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMapTex;
in mediump vec4 vs_COLOR0;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec4 u_xlat0;
lowp vec3 u_xlat10_0;
bvec4 u_xlatb0;
vec3 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
bool u_xlatb1;
mediump vec3 u_xlat16_2;
float u_xlat3;
mediump vec4 u_xlat16_3;
bool u_xlatb3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
bool u_xlatb8;
vec3 u_xlat11;
mediump vec3 u_xlat16_11;
bool u_xlatb16;
float u_xlat24;
mediump float u_xlat16_24;
bool u_xlatb24;
mediump float u_xlat16_26;
mediump float u_xlat16_28;
mediump float u_xlat16_29;
void main()
{
    u_xlatb0.xy = equal(vec4(_MainTexAlphaUse), vec4(1.0, 2.0, 0.0, 0.0)).xy;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy, -1.0);
    u_xlat16_2.x = u_xlat10_1.w + (-_MainTexAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(u_xlat16_2.x<0.0);
#else
    u_xlatb16 = u_xlat16_2.x<0.0;
#endif
    u_xlatb0.x = u_xlatb0.x && u_xlatb16;
    if((int(u_xlatb0.x) * int(0xffffffffu))!=0){discard;}
    SV_Target0.w = 0.0470588244;
    u_xlat16_2.xyz = (uint((gl_FrontFacing ? 0xffffffffu : uint(0))) != uint(0u)) ? vs_TEXCOORD1.xyz : (-vs_TEXCOORD1.xyz);
    SV_Target0.xyz = u_xlat16_2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    u_xlat0.xzw = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3 = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat3 = inversesqrt(u_xlat3);
    u_xlat0.xzw = u_xlat0.xzw * vec3(u_xlat3) + mhy_AvatarLightDir.xyz;
    u_xlat3 = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat3 = inversesqrt(u_xlat3);
    u_xlat0.xzw = u_xlat0.xzw * vec3(u_xlat3);
    u_xlat16_2.x = dot(u_xlat16_2.xyz, u_xlat0.xzw);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.00100000005);
    u_xlat16_2.x = log2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * _Shininess;
    u_xlat16_2.x = exp2(u_xlat16_2.x);
    u_xlat16_2.xyz = u_xlat16_2.xxx * _SpecularColor.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(_SpecMulti);
    u_xlat10_0.xz = texture(_LightMapTex, vs_TEXCOORD0.xy, -1.0).xy;
    u_xlat16_2.xyz = u_xlat10_0.xxx * u_xlat16_2.xyz;
    u_xlatb0.xw = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseLightMapColorAO, _UseLightMapColorAO, _UseLightMapColorAO, _UseVertexColorAO)).xw;
    u_xlat16_26 = (u_xlatb0.x) ? u_xlat10_0.z : 0.5;
    u_xlat16_4.x = u_xlat16_26 * vs_COLOR0.x;
    u_xlat16_26 = (u_xlatb0.w) ? u_xlat16_4.x : u_xlat16_26;
    u_xlat0.x = u_xlat16_26 + vs_TEXCOORD1.w;
    u_xlat0.x = u_xlat0.x * 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(0.949999988<u_xlat16_26);
#else
    u_xlatb16 = 0.949999988<u_xlat16_26;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(u_xlat16_26<0.0500000007);
#else
    u_xlatb24 = u_xlat16_26<0.0500000007;
#endif
    u_xlat16_26 = (u_xlatb16) ? 1.0 : u_xlat0.x;
    u_xlat16_26 = (u_xlatb24) ? 0.0 : u_xlat16_26;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(u_xlat16_26<_LightArea);
#else
    u_xlatb0.x = u_xlat16_26<_LightArea;
#endif
    u_xlat16_26 = (-u_xlat16_26) + _LightArea;
    u_xlat16_26 = u_xlat16_26 / _ShadowTransitionRange;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(int((gl_FrontFacing ? 0xffffffffu : uint(0)))==0);
#else
    u_xlatb16 = int((gl_FrontFacing ? 0xffffffffu : uint(0)))==0;
#endif
    u_xlatb16 = u_xlatb0.x || u_xlatb16;
    u_xlat16_24 = u_xlat16_26 + 0.00999999978;
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(u_xlat16_26>=1.0);
#else
    u_xlatb3 = u_xlat16_26>=1.0;
#endif
    u_xlat16_24 = log2(u_xlat16_24);
    u_xlat24 = u_xlat16_24 * _ShadowTransitionSoftness;
    u_xlat24 = exp2(u_xlat24);
    u_xlat24 = min(u_xlat24, 1.0);
    u_xlat24 = (u_xlatb3) ? 1.0 : u_xlat24;
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition));
#else
    u_xlatb3 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition);
#endif
    u_xlat24 = (u_xlatb3) ? u_xlat24 : 1.0;
    u_xlat0.x = u_xlatb0.x ? u_xlat24 : float(0.0);
    u_xlat16_11.xyz = vec3(_FirstShadowMultColor.xxyz.y + (-_CoolShadowMultColor.x), _FirstShadowMultColor.xxyz.z + (-_CoolShadowMultColor.y), float(_FirstShadowMultColor.z) + (-_CoolShadowMultColor.z));
    u_xlat11.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_11.xyz + _CoolShadowMultColor.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex));
#else
    u_xlatb24 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex);
#endif
    u_xlat16_4.xyz = (bool(u_xlatb24)) ? u_xlat11.xyz : vec3(_FirstShadowMultColor.x, _FirstShadowMultColor.y, _FirstShadowMultColor.z);
    u_xlat16_11.xyz = u_xlat16_4.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat11.xyz = u_xlat0.xxx * u_xlat16_11.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_5.xyz = (bool(u_xlatb3)) ? u_xlat11.xyz : u_xlat16_4.xyz;
    u_xlat16_6.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_6.xyz;
    u_xlat1.xyz = u_xlat16_6.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
    u_xlat0.xzw = (bool(u_xlatb16)) ? u_xlat16_5.xyz : u_xlat1.xyz;
    u_xlat16_5.xyz = u_xlat16_2.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness)) + u_xlat0.xzw;
    u_xlat0.xzw = u_xlat16_2.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
    u_xlat16_2.xyz = u_xlat16_6.xyz * u_xlat16_4.xyz + u_xlat0.xzw;
    u_xlat16_4.xyz = u_xlat16_6.xyz * _EmissionColor_MHY.xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * vec3(vec3(_EmissionScaler, _EmissionScaler, _EmissionScaler)) + (-u_xlat16_5.xyz);
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(vec3(_EmissionScaler, _EmissionScaler, _EmissionScaler)) + (-u_xlat16_2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(0.00999999978<u_xlat10_1.w);
#else
    u_xlatb0.x = 0.00999999978<u_xlat10_1.w;
#endif
    u_xlatb0.x = u_xlatb0.x && u_xlatb0.y;
    u_xlat16_26 = (u_xlatb0.x) ? u_xlat10_1.w : 0.0;
    u_xlat16_6.xyz = vec3(u_xlat16_26) * u_xlat16_6.xyz + u_xlat16_5.xyz;
    u_xlat16_5.xyz = (u_xlatb0.x) ? u_xlat16_6.xyz : u_xlat16_5.xyz;
    u_xlat8.xyz = u_xlat16_5.xyz * vec3(vec3(_ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness));
    u_xlat1.xyz = _ES_CharacterMainLightColor.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat1.xyz = vec3(vec3(_ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio)) * u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat8.xyz = u_xlat8.xyz * u_xlat1.xyz;
    u_xlat16_6.xyz = u_xlat8.xyz * vec3(10.0, 10.0, 10.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.xyz = min(max(u_xlat16_6.xyz, 0.0), 1.0);
#else
    u_xlat16_6.xyz = clamp(u_xlat16_6.xyz, 0.0, 1.0);
#endif
    u_xlat1.xyz = _ES_CharacterAmbientLightColor.xyz * vec3(_ES_CharacterAmbientLightRatio);
    u_xlat8.xyz = u_xlat1.xyz * u_xlat16_6.xyz + u_xlat8.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn));
#else
    u_xlatb1 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn);
#endif
    u_xlat16_6.xyz = (bool(u_xlatb1)) ? u_xlat8.xyz : u_xlat16_5.xyz;
    u_xlat16_7.xyz = u_xlat16_5.xyz + (-u_xlat16_6.xyz);
    u_xlat16_7.xyz = vec3(u_xlat16_26) * u_xlat16_7.xyz + u_xlat16_6.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.00999999978<u_xlat16_26);
#else
    u_xlatb8 = 0.00999999978<u_xlat16_26;
#endif
    u_xlat16_1.xyz = (bool(u_xlatb8)) ? u_xlat16_7.xyz : u_xlat16_6.xyz;
    u_xlat16_28 = max(u_xlat16_1.z, u_xlat16_1.y);
    u_xlat16_3.w = max(u_xlat16_1.x, u_xlat16_28);
    u_xlat16_3.xyz = u_xlat16_1.xyz / u_xlat16_3.www;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(1.0<u_xlat16_3.w);
#else
    u_xlatb16 = 1.0<u_xlat16_3.w;
#endif
    u_xlat16_1.w = 1.0;
    u_xlat16_1 = (bool(u_xlatb16)) ? u_xlat16_3 : u_xlat16_1;
    u_xlat16_28 = min(u_xlat16_1.w, 1.10000002);
    u_xlat16_29 = u_xlat16_1.w + (-u_xlat16_28);
    SV_Target1.xyz = u_xlat16_1.xyz;
    u_xlat16_28 = u_xlat16_26 * u_xlat16_29 + u_xlat16_28;
    SV_Target1.w = u_xlat16_28 * 0.0500000007;
    u_xlat16_4.xyz = vec3(u_xlat16_26) * u_xlat16_4.xyz + u_xlat16_2.xyz;
    u_xlat16_2.xyz = (u_xlatb0.x) ? u_xlat16_4.xyz : u_xlat16_2.xyz;
    u_xlat16_4.xyz = (-u_xlat16_2.xyz) + u_xlat16_5.xyz;
    u_xlat16_4.xyz = vec3(u_xlat16_26) * u_xlat16_4.xyz + u_xlat16_2.xyz;
    u_xlat16_2.xyz = (bool(u_xlatb8)) ? u_xlat16_4.xyz : u_xlat16_2.xyz;
    SV_Target2.xy = u_xlat16_2.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_2.x = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb0.x) ? u_xlat16_2.x : u_xlat16_2.z;
    SV_Target2.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "MSAA_INTERPOLATION" "TOON_LIGHTMAP_ON" "BACK_FACE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec3 mhy_AvatarLightDir;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump float u_xlat16_4;
float u_xlat16;
void main()
{
    u_xlat0.x = hlslcc_mtx4x4unity_ObjectToWorld[0].y;
    u_xlat0.y = hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat0.z = hlslcc_mtx4x4unity_ObjectToWorld[2].y;
    u_xlat1.xyw = (-_WorldSpaceCameraPos.xyz) + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat0.w = u_xlat1.y;
    u_xlat2.xyz = in_POSITION0.xyz;
    u_xlat2.w = 1.0;
    u_xlat0.x = dot(u_xlat0, u_xlat2);
    u_xlat0 = u_xlat0.xxxx * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat3.w = u_xlat1.x;
    u_xlat3.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;
    u_xlat3.y = hlslcc_mtx4x4unity_ObjectToWorld[1].x;
    u_xlat3.z = hlslcc_mtx4x4unity_ObjectToWorld[2].x;
    u_xlat3.x = dot(u_xlat3, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat3.xxxx + u_xlat0;
    u_xlat1.x = hlslcc_mtx4x4unity_ObjectToWorld[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_ObjectToWorld[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_ObjectToWorld[2].z;
    u_xlat1.x = dot(u_xlat1, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat1.xxxx + u_xlat0;
    u_xlat1.x = hlslcc_mtx4x4unity_ObjectToWorld[0].w;
    u_xlat1.y = hlslcc_mtx4x4unity_ObjectToWorld[1].w;
    u_xlat1.z = hlslcc_mtx4x4unity_ObjectToWorld[2].w;
    u_xlat1.w = hlslcc_mtx4x4unity_ObjectToWorld[3].w;
    u_xlat1.x = dot(u_xlat1, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[3] * u_xlat1.xxxx + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat16 = inversesqrt(u_xlat16);
    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
    u_xlat16_4 = dot(u_xlat1.xyz, mhy_AvatarLightDir.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    vs_TEXCOORD1.w = u_xlat16_4 * 0.497500002 + 0.5;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.zw = u_xlat0.zw;
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD3.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD5.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	mediump vec4 _Color;
uniform 	float _MainTexAlphaUse;
uniform 	mediump float _MainTexAlphaCutoff;
uniform 	float _UseLightMapColorAO;
uniform 	float _UseVertexColorAO;
uniform 	mediump float _LightArea;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	float _UseCoolShadowColorOrTex;
uniform 	mediump vec3 _CoolShadowMultColor;
uniform 	float _UseShadowTransition;
uniform 	float _ShadowTransitionRange;
uniform 	float _ShadowTransitionSoftness;
uniform 	mediump vec3 _SpecularColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump float _EmissionScaler;
uniform 	mediump vec3 _EmissionColor_MHY;
uniform 	float _ES_CharacterAmbientLightOn;
uniform 	float _ES_CharacterAmbientBrightness;
uniform 	vec3 _ES_CharacterMainLightColor;
uniform 	float _ES_CharacterMainLightBrightness;
uniform 	vec3 _ES_CharacterAmbientLightColor;
uniform 	float _ES_CharacterMainLightRatio;
uniform 	float _ES_CharacterAmbientLightRatio;
uniform 	float _ES_CharacterColorTone;
uniform 	vec3 mhy_AvatarLightDir;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMapTex;
in mediump vec4 vs_COLOR0;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec4 u_xlat0;
lowp vec2 u_xlat10_0;
bvec3 u_xlatb0;
vec3 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
bool u_xlatb1;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump vec4 u_xlat16_3;
bvec2 u_xlatb3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
bool u_xlatb8;
vec2 u_xlat16;
mediump float u_xlat16_16;
bool u_xlatb16;
bool u_xlatb24;
mediump float u_xlat16_26;
mediump float u_xlat16_28;
mediump float u_xlat16_29;
void main()
{
    u_xlat0.xy = dFdx(vs_TEXCOORD0.xy);
    u_xlat16.xy = dFdy(vs_TEXCOORD0.xy);
    u_xlat0.xy = u_xlat16.xy + u_xlat0.xy;
    u_xlat16.xy = (-u_xlat0.xy) * vec2(0.25, 0.25) + vs_TEXCOORD0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25) + vs_TEXCOORD0.xy;
    u_xlat0.xy = (int(gl_SampleID) != 0) ? u_xlat16.xy : u_xlat0.xy;
    u_xlat10_1 = textureLod(_MainTex, u_xlat0.xy, 0.0);
    u_xlat10_0.xy = textureLod(_LightMapTex, u_xlat0.xy, 0.0).xy;
    u_xlat16_2.x = u_xlat10_1.w + (-_MainTexAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(u_xlat16_2.x<0.0);
#else
    u_xlatb16 = u_xlat16_2.x<0.0;
#endif
    u_xlatb3.xy = equal(vec4(_MainTexAlphaUse), vec4(1.0, 2.0, 0.0, 0.0)).xy;
    u_xlatb16 = u_xlatb16 && u_xlatb3.x;
    if((int(u_xlatb16) * int(0xffffffffu))!=0){discard;}
    SV_Target0.w = 0.0470588244;
    u_xlat16_2.xyz = (uint((gl_FrontFacing ? 0xffffffffu : uint(0))) != uint(0u)) ? vs_TEXCOORD1.xyz : (-vs_TEXCOORD1.xyz);
    SV_Target0.xyz = u_xlat16_2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    u_xlat3.xzw = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat16.x = dot(u_xlat3.xzw, u_xlat3.xzw);
    u_xlat16.x = inversesqrt(u_xlat16.x);
    u_xlat3.xzw = u_xlat3.xzw * u_xlat16.xxx + mhy_AvatarLightDir.xyz;
    u_xlat16.x = dot(u_xlat3.xzw, u_xlat3.xzw);
    u_xlat16.x = inversesqrt(u_xlat16.x);
    u_xlat3.xzw = u_xlat16.xxx * u_xlat3.xzw;
    u_xlat16_2.x = dot(u_xlat16_2.xyz, u_xlat3.xzw);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.00100000005);
    u_xlat16_2.x = log2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * _Shininess;
    u_xlat16_2.x = exp2(u_xlat16_2.x);
    u_xlat16_2.xyz = u_xlat16_2.xxx * _SpecularColor.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(_SpecMulti);
    u_xlat16_2.xyz = u_xlat10_0.xxx * u_xlat16_2.xyz;
    u_xlatb0.xz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseLightMapColorAO, _UseLightMapColorAO, _UseVertexColorAO, _UseLightMapColorAO)).xz;
    u_xlat16_26 = (u_xlatb0.x) ? u_xlat10_0.y : 0.5;
    u_xlat16_4.x = u_xlat16_26 * vs_COLOR0.x;
    u_xlat16_26 = (u_xlatb0.z) ? u_xlat16_4.x : u_xlat16_26;
    u_xlat0.x = u_xlat16_26 + vs_TEXCOORD1.w;
    u_xlat0.x = u_xlat0.x * 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.949999988<u_xlat16_26);
#else
    u_xlatb8 = 0.949999988<u_xlat16_26;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(u_xlat16_26<0.0500000007);
#else
    u_xlatb16 = u_xlat16_26<0.0500000007;
#endif
    u_xlat16_26 = (u_xlatb8) ? 1.0 : u_xlat0.x;
    u_xlat16_26 = (u_xlatb16) ? 0.0 : u_xlat16_26;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(u_xlat16_26<_LightArea);
#else
    u_xlatb0.x = u_xlat16_26<_LightArea;
#endif
    u_xlat16_26 = (-u_xlat16_26) + _LightArea;
    u_xlat16_26 = u_xlat16_26 / _ShadowTransitionRange;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(int((gl_FrontFacing ? 0xffffffffu : uint(0)))==0);
#else
    u_xlatb8 = int((gl_FrontFacing ? 0xffffffffu : uint(0)))==0;
#endif
    u_xlatb8 = u_xlatb0.x || u_xlatb8;
    u_xlat16_16 = u_xlat16_26 + 0.00999999978;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(u_xlat16_26>=1.0);
#else
    u_xlatb24 = u_xlat16_26>=1.0;
#endif
    u_xlat16_16 = log2(u_xlat16_16);
    u_xlat16.x = u_xlat16_16 * _ShadowTransitionSoftness;
    u_xlat16.x = exp2(u_xlat16.x);
    u_xlat16.x = min(u_xlat16.x, 1.0);
    u_xlat16.x = (u_xlatb24) ? 1.0 : u_xlat16.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition));
#else
    u_xlatb24 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition);
#endif
    u_xlat16.x = (u_xlatb24) ? u_xlat16.x : 1.0;
    u_xlat0.x = u_xlatb0.x ? u_xlat16.x : float(0.0);
    u_xlat16_3.xzw = vec3(_FirstShadowMultColor.xxyz.y + (-_CoolShadowMultColor.x), _FirstShadowMultColor.xxyz.z + (-_CoolShadowMultColor.y), float(_FirstShadowMultColor.z) + (-_CoolShadowMultColor.z));
    u_xlat3.xzw = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_3.xzw + _CoolShadowMultColor.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex));
#else
    u_xlatb16 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex);
#endif
    u_xlat16_4.xyz = (bool(u_xlatb16)) ? u_xlat3.xzw : vec3(_FirstShadowMultColor.x, _FirstShadowMultColor.y, _FirstShadowMultColor.z);
    u_xlat16_3.xzw = u_xlat16_4.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat3.xzw = u_xlat0.xxx * u_xlat16_3.xzw + vec3(1.0, 1.0, 1.0);
    u_xlat16_5.xyz = (bool(u_xlatb24)) ? u_xlat3.xzw : u_xlat16_4.xyz;
    u_xlat16_6.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_6.xyz;
    u_xlat0.xzw = u_xlat16_6.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
    u_xlat0.xyz = (bool(u_xlatb8)) ? u_xlat16_5.xyz : u_xlat0.xzw;
    u_xlat16_5.xyz = u_xlat16_2.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness)) + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat16_2.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
    u_xlat16_2.xyz = u_xlat16_6.xyz * u_xlat16_4.xyz + u_xlat0.xyz;
    u_xlat16_4.xyz = u_xlat16_6.xyz * _EmissionColor_MHY.xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * vec3(vec3(_EmissionScaler, _EmissionScaler, _EmissionScaler)) + (-u_xlat16_5.xyz);
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(vec3(_EmissionScaler, _EmissionScaler, _EmissionScaler)) + (-u_xlat16_2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(0.00999999978<u_xlat10_1.w);
#else
    u_xlatb0.x = 0.00999999978<u_xlat10_1.w;
#endif
    u_xlatb0.x = u_xlatb0.x && u_xlatb3.y;
    u_xlat16_26 = (u_xlatb0.x) ? u_xlat10_1.w : 0.0;
    u_xlat16_6.xyz = vec3(u_xlat16_26) * u_xlat16_6.xyz + u_xlat16_5.xyz;
    u_xlat16_5.xyz = (u_xlatb0.x) ? u_xlat16_6.xyz : u_xlat16_5.xyz;
    u_xlat8.xyz = u_xlat16_5.xyz * vec3(vec3(_ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness));
    u_xlat1.xyz = _ES_CharacterMainLightColor.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat1.xyz = vec3(vec3(_ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio)) * u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat8.xyz = u_xlat8.xyz * u_xlat1.xyz;
    u_xlat16_6.xyz = u_xlat8.xyz * vec3(10.0, 10.0, 10.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.xyz = min(max(u_xlat16_6.xyz, 0.0), 1.0);
#else
    u_xlat16_6.xyz = clamp(u_xlat16_6.xyz, 0.0, 1.0);
#endif
    u_xlat1.xyz = _ES_CharacterAmbientLightColor.xyz * vec3(_ES_CharacterAmbientLightRatio);
    u_xlat8.xyz = u_xlat1.xyz * u_xlat16_6.xyz + u_xlat8.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn));
#else
    u_xlatb1 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn);
#endif
    u_xlat16_6.xyz = (bool(u_xlatb1)) ? u_xlat8.xyz : u_xlat16_5.xyz;
    u_xlat16_7.xyz = u_xlat16_5.xyz + (-u_xlat16_6.xyz);
    u_xlat16_7.xyz = vec3(u_xlat16_26) * u_xlat16_7.xyz + u_xlat16_6.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.00999999978<u_xlat16_26);
#else
    u_xlatb8 = 0.00999999978<u_xlat16_26;
#endif
    u_xlat16_1.xyz = (bool(u_xlatb8)) ? u_xlat16_7.xyz : u_xlat16_6.xyz;
    u_xlat16_28 = max(u_xlat16_1.z, u_xlat16_1.y);
    u_xlat16_3.w = max(u_xlat16_1.x, u_xlat16_28);
    u_xlat16_3.xyz = u_xlat16_1.xyz / u_xlat16_3.www;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(1.0<u_xlat16_3.w);
#else
    u_xlatb16 = 1.0<u_xlat16_3.w;
#endif
    u_xlat16_1.w = 1.0;
    u_xlat16_1 = (bool(u_xlatb16)) ? u_xlat16_3 : u_xlat16_1;
    u_xlat16_28 = min(u_xlat16_1.w, 1.10000002);
    u_xlat16_29 = u_xlat16_1.w + (-u_xlat16_28);
    SV_Target1.xyz = u_xlat16_1.xyz;
    u_xlat16_28 = u_xlat16_26 * u_xlat16_29 + u_xlat16_28;
    SV_Target1.w = u_xlat16_28 * 0.0500000007;
    u_xlat16_4.xyz = vec3(u_xlat16_26) * u_xlat16_4.xyz + u_xlat16_2.xyz;
    u_xlat16_2.xyz = (u_xlatb0.x) ? u_xlat16_4.xyz : u_xlat16_2.xyz;
    u_xlat16_4.xyz = (-u_xlat16_2.xyz) + u_xlat16_5.xyz;
    u_xlat16_4.xyz = vec3(u_xlat16_26) * u_xlat16_4.xyz + u_xlat16_2.xyz;
    u_xlat16_2.xyz = (bool(u_xlatb8)) ? u_xlat16_4.xyz : u_xlat16_2.xyz;
    SV_Target2.xy = u_xlat16_2.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_2.x = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb0.x) ? u_xlat16_2.x : u_xlat16_2.z;
    SV_Target2.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "LINE_INTERPOLATION" "TOON_LIGHTMAP_ON" "BACK_FACE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec3 mhy_AvatarLightDir;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump float u_xlat16_4;
float u_xlat16;
void main()
{
    u_xlat0.x = hlslcc_mtx4x4unity_ObjectToWorld[0].y;
    u_xlat0.y = hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat0.z = hlslcc_mtx4x4unity_ObjectToWorld[2].y;
    u_xlat1.xyw = (-_WorldSpaceCameraPos.xyz) + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat0.w = u_xlat1.y;
    u_xlat2.xyz = in_POSITION0.xyz;
    u_xlat2.w = 1.0;
    u_xlat0.x = dot(u_xlat0, u_xlat2);
    u_xlat0 = u_xlat0.xxxx * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat3.w = u_xlat1.x;
    u_xlat3.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;
    u_xlat3.y = hlslcc_mtx4x4unity_ObjectToWorld[1].x;
    u_xlat3.z = hlslcc_mtx4x4unity_ObjectToWorld[2].x;
    u_xlat3.x = dot(u_xlat3, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat3.xxxx + u_xlat0;
    u_xlat1.x = hlslcc_mtx4x4unity_ObjectToWorld[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_ObjectToWorld[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_ObjectToWorld[2].z;
    u_xlat1.x = dot(u_xlat1, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat1.xxxx + u_xlat0;
    u_xlat1.x = hlslcc_mtx4x4unity_ObjectToWorld[0].w;
    u_xlat1.y = hlslcc_mtx4x4unity_ObjectToWorld[1].w;
    u_xlat1.z = hlslcc_mtx4x4unity_ObjectToWorld[2].w;
    u_xlat1.w = hlslcc_mtx4x4unity_ObjectToWorld[3].w;
    u_xlat1.x = dot(u_xlat1, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[3] * u_xlat1.xxxx + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat16 = inversesqrt(u_xlat16);
    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
    u_xlat16_4 = dot(u_xlat1.xyz, mhy_AvatarLightDir.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    vs_TEXCOORD1.w = u_xlat16_4 * 0.497500002 + 0.5;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.zw = u_xlat0.zw;
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD3.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD5.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	mediump vec4 _Color;
uniform 	float _MainTexAlphaUse;
uniform 	mediump float _MainTexAlphaCutoff;
uniform 	float _UseLightMapColorAO;
uniform 	float _UseVertexColorAO;
uniform 	mediump float _LightArea;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	float _UseCoolShadowColorOrTex;
uniform 	mediump vec3 _CoolShadowMultColor;
uniform 	float _UseShadowTransition;
uniform 	float _ShadowTransitionRange;
uniform 	float _ShadowTransitionSoftness;
uniform 	mediump vec3 _SpecularColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump float _EmissionScaler;
uniform 	mediump vec3 _EmissionColor_MHY;
uniform 	float _ES_CharacterAmbientLightOn;
uniform 	float _ES_CharacterAmbientBrightness;
uniform 	vec3 _ES_CharacterMainLightColor;
uniform 	float _ES_CharacterMainLightBrightness;
uniform 	vec3 _ES_CharacterAmbientLightColor;
uniform 	float _ES_CharacterMainLightRatio;
uniform 	float _ES_CharacterAmbientLightRatio;
uniform 	float _ES_CharacterColorTone;
uniform 	vec3 mhy_AvatarLightDir;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMapTex;
in mediump vec4 vs_COLOR0;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec4 u_xlat0;
lowp vec3 u_xlat10_0;
bvec4 u_xlatb0;
vec3 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
bool u_xlatb1;
mediump vec3 u_xlat16_2;
float u_xlat3;
mediump vec4 u_xlat16_3;
bool u_xlatb3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
bool u_xlatb8;
vec3 u_xlat11;
mediump vec3 u_xlat16_11;
bool u_xlatb16;
float u_xlat24;
mediump float u_xlat16_24;
bool u_xlatb24;
mediump float u_xlat16_26;
mediump float u_xlat16_28;
mediump float u_xlat16_29;
void main()
{
    u_xlatb0.xy = equal(vec4(_MainTexAlphaUse), vec4(1.0, 2.0, 0.0, 0.0)).xy;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy, -1.0);
    u_xlat16_2.x = u_xlat10_1.w + (-_MainTexAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(u_xlat16_2.x<0.0);
#else
    u_xlatb16 = u_xlat16_2.x<0.0;
#endif
    u_xlatb0.x = u_xlatb0.x && u_xlatb16;
    if((int(u_xlatb0.x) * int(0xffffffffu))!=0){discard;}
    SV_Target0.w = 0.0470588244;
    u_xlat16_2.xyz = (uint((gl_FrontFacing ? 0xffffffffu : uint(0))) != uint(0u)) ? vs_TEXCOORD1.xyz : (-vs_TEXCOORD1.xyz);
    SV_Target0.xyz = u_xlat16_2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    u_xlat0.xzw = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3 = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat3 = inversesqrt(u_xlat3);
    u_xlat0.xzw = u_xlat0.xzw * vec3(u_xlat3) + mhy_AvatarLightDir.xyz;
    u_xlat3 = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat3 = inversesqrt(u_xlat3);
    u_xlat0.xzw = u_xlat0.xzw * vec3(u_xlat3);
    u_xlat16_2.x = dot(u_xlat16_2.xyz, u_xlat0.xzw);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.00100000005);
    u_xlat16_2.x = log2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * _Shininess;
    u_xlat16_2.x = exp2(u_xlat16_2.x);
    u_xlat16_2.xyz = u_xlat16_2.xxx * _SpecularColor.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(_SpecMulti);
    u_xlat10_0.xz = texture(_LightMapTex, vs_TEXCOORD0.xy, -1.0).xy;
    u_xlat16_2.xyz = u_xlat10_0.xxx * u_xlat16_2.xyz;
    u_xlatb0.xw = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseLightMapColorAO, _UseLightMapColorAO, _UseLightMapColorAO, _UseVertexColorAO)).xw;
    u_xlat16_26 = (u_xlatb0.x) ? u_xlat10_0.z : 0.5;
    u_xlat16_4.x = u_xlat16_26 * vs_COLOR0.x;
    u_xlat16_26 = (u_xlatb0.w) ? u_xlat16_4.x : u_xlat16_26;
    u_xlat0.x = u_xlat16_26 + vs_TEXCOORD1.w;
    u_xlat0.x = u_xlat0.x * 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(0.949999988<u_xlat16_26);
#else
    u_xlatb16 = 0.949999988<u_xlat16_26;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(u_xlat16_26<0.0500000007);
#else
    u_xlatb24 = u_xlat16_26<0.0500000007;
#endif
    u_xlat16_26 = (u_xlatb16) ? 1.0 : u_xlat0.x;
    u_xlat16_26 = (u_xlatb24) ? 0.0 : u_xlat16_26;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(u_xlat16_26<_LightArea);
#else
    u_xlatb0.x = u_xlat16_26<_LightArea;
#endif
    u_xlat16_26 = (-u_xlat16_26) + _LightArea;
    u_xlat16_26 = u_xlat16_26 / _ShadowTransitionRange;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(int((gl_FrontFacing ? 0xffffffffu : uint(0)))==0);
#else
    u_xlatb16 = int((gl_FrontFacing ? 0xffffffffu : uint(0)))==0;
#endif
    u_xlatb16 = u_xlatb0.x || u_xlatb16;
    u_xlat16_24 = u_xlat16_26 + 0.00999999978;
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(u_xlat16_26>=1.0);
#else
    u_xlatb3 = u_xlat16_26>=1.0;
#endif
    u_xlat16_24 = log2(u_xlat16_24);
    u_xlat24 = u_xlat16_24 * _ShadowTransitionSoftness;
    u_xlat24 = exp2(u_xlat24);
    u_xlat24 = min(u_xlat24, 1.0);
    u_xlat24 = (u_xlatb3) ? 1.0 : u_xlat24;
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition));
#else
    u_xlatb3 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition);
#endif
    u_xlat24 = (u_xlatb3) ? u_xlat24 : 1.0;
    u_xlat0.x = u_xlatb0.x ? u_xlat24 : float(0.0);
    u_xlat16_11.xyz = vec3(_FirstShadowMultColor.xxyz.y + (-_CoolShadowMultColor.x), _FirstShadowMultColor.xxyz.z + (-_CoolShadowMultColor.y), float(_FirstShadowMultColor.z) + (-_CoolShadowMultColor.z));
    u_xlat11.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_11.xyz + _CoolShadowMultColor.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex));
#else
    u_xlatb24 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex);
#endif
    u_xlat16_4.xyz = (bool(u_xlatb24)) ? u_xlat11.xyz : vec3(_FirstShadowMultColor.x, _FirstShadowMultColor.y, _FirstShadowMultColor.z);
    u_xlat16_11.xyz = u_xlat16_4.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat11.xyz = u_xlat0.xxx * u_xlat16_11.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_5.xyz = (bool(u_xlatb3)) ? u_xlat11.xyz : u_xlat16_4.xyz;
    u_xlat16_6.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_6.xyz;
    u_xlat1.xyz = u_xlat16_6.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
    u_xlat0.xzw = (bool(u_xlatb16)) ? u_xlat16_5.xyz : u_xlat1.xyz;
    u_xlat16_5.xyz = u_xlat16_2.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness)) + u_xlat0.xzw;
    u_xlat0.xzw = u_xlat16_2.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
    u_xlat16_2.xyz = u_xlat16_6.xyz * u_xlat16_4.xyz + u_xlat0.xzw;
    u_xlat16_4.xyz = u_xlat16_6.xyz * _EmissionColor_MHY.xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * vec3(vec3(_EmissionScaler, _EmissionScaler, _EmissionScaler)) + (-u_xlat16_5.xyz);
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(vec3(_EmissionScaler, _EmissionScaler, _EmissionScaler)) + (-u_xlat16_2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(0.00999999978<u_xlat10_1.w);
#else
    u_xlatb0.x = 0.00999999978<u_xlat10_1.w;
#endif
    u_xlatb0.x = u_xlatb0.x && u_xlatb0.y;
    u_xlat16_26 = (u_xlatb0.x) ? u_xlat10_1.w : 0.0;
    u_xlat16_6.xyz = vec3(u_xlat16_26) * u_xlat16_6.xyz + u_xlat16_5.xyz;
    u_xlat16_5.xyz = (u_xlatb0.x) ? u_xlat16_6.xyz : u_xlat16_5.xyz;
    u_xlat8.xyz = u_xlat16_5.xyz * vec3(vec3(_ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness));
    u_xlat1.xyz = _ES_CharacterMainLightColor.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat1.xyz = vec3(vec3(_ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio)) * u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat8.xyz = u_xlat8.xyz * u_xlat1.xyz;
    u_xlat16_6.xyz = u_xlat8.xyz * vec3(10.0, 10.0, 10.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.xyz = min(max(u_xlat16_6.xyz, 0.0), 1.0);
#else
    u_xlat16_6.xyz = clamp(u_xlat16_6.xyz, 0.0, 1.0);
#endif
    u_xlat1.xyz = _ES_CharacterAmbientLightColor.xyz * vec3(_ES_CharacterAmbientLightRatio);
    u_xlat8.xyz = u_xlat1.xyz * u_xlat16_6.xyz + u_xlat8.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn));
#else
    u_xlatb1 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn);
#endif
    u_xlat16_6.xyz = (bool(u_xlatb1)) ? u_xlat8.xyz : u_xlat16_5.xyz;
    u_xlat16_7.xyz = u_xlat16_5.xyz + (-u_xlat16_6.xyz);
    u_xlat16_7.xyz = vec3(u_xlat16_26) * u_xlat16_7.xyz + u_xlat16_6.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.00999999978<u_xlat16_26);
#else
    u_xlatb8 = 0.00999999978<u_xlat16_26;
#endif
    u_xlat16_1.xyz = (bool(u_xlatb8)) ? u_xlat16_7.xyz : u_xlat16_6.xyz;
    u_xlat16_28 = max(u_xlat16_1.z, u_xlat16_1.y);
    u_xlat16_3.w = max(u_xlat16_1.x, u_xlat16_28);
    u_xlat16_3.xyz = u_xlat16_1.xyz / u_xlat16_3.www;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(1.0<u_xlat16_3.w);
#else
    u_xlatb16 = 1.0<u_xlat16_3.w;
#endif
    u_xlat16_1.w = 1.0;
    u_xlat16_1 = (bool(u_xlatb16)) ? u_xlat16_3 : u_xlat16_1;
    u_xlat16_28 = min(u_xlat16_1.w, 1.10000002);
    u_xlat16_29 = u_xlat16_1.w + (-u_xlat16_28);
    SV_Target1.xyz = u_xlat16_1.xyz;
    u_xlat16_28 = u_xlat16_26 * u_xlat16_29 + u_xlat16_28;
    SV_Target1.w = u_xlat16_28 * 0.0500000007;
    u_xlat16_4.xyz = vec3(u_xlat16_26) * u_xlat16_4.xyz + u_xlat16_2.xyz;
    u_xlat16_2.xyz = (u_xlatb0.x) ? u_xlat16_4.xyz : u_xlat16_2.xyz;
    u_xlat16_4.xyz = (-u_xlat16_2.xyz) + u_xlat16_5.xyz;
    u_xlat16_4.xyz = vec3(u_xlat16_26) * u_xlat16_4.xyz + u_xlat16_2.xyz;
    u_xlat16_2.xyz = (bool(u_xlatb8)) ? u_xlat16_4.xyz : u_xlat16_2.xyz;
    SV_Target2.xy = u_xlat16_2.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_2.x = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb0.x) ? u_xlat16_2.x : u_xlat16_2.z;
    SV_Target2.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "TOON_LIGHTMAP_ON" "BACK_FACE_ON" "METAL_MAT" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec3 mhy_AvatarLightDir;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump float u_xlat16_4;
float u_xlat16;
void main()
{
    u_xlat0.x = hlslcc_mtx4x4unity_ObjectToWorld[0].y;
    u_xlat0.y = hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat0.z = hlslcc_mtx4x4unity_ObjectToWorld[2].y;
    u_xlat1.xyw = (-_WorldSpaceCameraPos.xyz) + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat0.w = u_xlat1.y;
    u_xlat2.xyz = in_POSITION0.xyz;
    u_xlat2.w = 1.0;
    u_xlat0.x = dot(u_xlat0, u_xlat2);
    u_xlat0 = u_xlat0.xxxx * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat3.w = u_xlat1.x;
    u_xlat3.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;
    u_xlat3.y = hlslcc_mtx4x4unity_ObjectToWorld[1].x;
    u_xlat3.z = hlslcc_mtx4x4unity_ObjectToWorld[2].x;
    u_xlat3.x = dot(u_xlat3, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat3.xxxx + u_xlat0;
    u_xlat1.x = hlslcc_mtx4x4unity_ObjectToWorld[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_ObjectToWorld[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_ObjectToWorld[2].z;
    u_xlat1.x = dot(u_xlat1, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat1.xxxx + u_xlat0;
    u_xlat1.x = hlslcc_mtx4x4unity_ObjectToWorld[0].w;
    u_xlat1.y = hlslcc_mtx4x4unity_ObjectToWorld[1].w;
    u_xlat1.z = hlslcc_mtx4x4unity_ObjectToWorld[2].w;
    u_xlat1.w = hlslcc_mtx4x4unity_ObjectToWorld[3].w;
    u_xlat1.x = dot(u_xlat1, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[3] * u_xlat1.xxxx + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat16 = inversesqrt(u_xlat16);
    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
    u_xlat16_4 = dot(u_xlat1.xyz, mhy_AvatarLightDir.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    vs_TEXCOORD1.w = u_xlat16_4 * 0.497500002 + 0.5;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.zw = u_xlat0.zw;
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD3.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD5.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToCamera[4];
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	mediump vec4 _Color;
uniform 	float _MainTexAlphaUse;
uniform 	mediump float _MainTexAlphaCutoff;
uniform 	float _UseLightMapColorAO;
uniform 	float _UseVertexColorAO;
uniform 	mediump float _LightArea;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	float _UseCoolShadowColorOrTex;
uniform 	mediump vec3 _CoolShadowMultColor;
uniform 	float _UseShadowTransition;
uniform 	float _ShadowTransitionRange;
uniform 	float _ShadowTransitionSoftness;
uniform 	mediump vec3 _SpecularColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump float _EmissionScaler;
uniform 	mediump vec3 _EmissionColor_MHY;
uniform 	mediump float _MTMapBrightness;
uniform 	float _MTMapTileScale;
uniform 	mediump vec3 _MTMapLightColor;
uniform 	mediump vec3 _MTMapDarkColor;
uniform 	mediump vec3 _MTShadowMultiColor;
uniform 	mediump float _MTShininess;
uniform 	mediump vec3 _MTSpecularColor;
uniform 	mediump float _MTSpecularScale;
uniform 	float _ES_CharacterAmbientLightOn;
uniform 	float _ES_CharacterAmbientBrightness;
uniform 	vec3 _ES_CharacterMainLightColor;
uniform 	float _ES_CharacterMainLightBrightness;
uniform 	vec3 _ES_CharacterAmbientLightColor;
uniform 	float _ES_CharacterMainLightRatio;
uniform 	float _ES_CharacterAmbientLightRatio;
uniform 	float _ES_CharacterColorTone;
uniform 	vec3 mhy_AvatarLightDir;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MTMap;
in mediump vec4 vs_COLOR0;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
mediump vec3 u_xlat16_0;
vec3 u_xlat1;
mediump vec4 u_xlat16_1;
bool u_xlatb1;
mediump vec4 u_xlat16_2;
lowp vec4 u_xlat10_2;
bool u_xlatb2;
vec3 u_xlat3;
lowp vec4 u_xlat10_3;
bvec2 u_xlatb3;
float u_xlat4;
bvec2 u_xlatb4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
vec3 u_xlat11;
mediump vec3 u_xlat16_11;
bool u_xlatb13;
float u_xlat15;
bool u_xlatb15;
vec3 u_xlat16;
mediump vec3 u_xlat16_16;
lowp float u_xlat10_16;
bool u_xlatb16;
mediump vec3 u_xlat16_18;
float u_xlat27;
bool u_xlatb27;
mediump float u_xlat16_36;
float u_xlat37;
bool u_xlatb37;
bool u_xlatb39;
mediump float u_xlat16_41;
mediump float u_xlat16_42;
void main()
{
    u_xlat16_0.xyz = (uint((gl_FrontFacing ? 0xffffffffu : uint(0))) != uint(0u)) ? vs_TEXCOORD1.xyz : (-vs_TEXCOORD1.xyz);
    u_xlat1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat37 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat37 = inversesqrt(u_xlat37);
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat37) + mhy_AvatarLightDir.xyz;
    u_xlat37 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat37 = inversesqrt(u_xlat37);
    u_xlat1.xyz = vec3(u_xlat37) * u_xlat1.xyz;
    u_xlat10_2 = texture(_MainTex, vs_TEXCOORD0.xy, -1.0);
    u_xlatb3.xy = equal(vec4(_MainTexAlphaUse), vec4(1.0, 2.0, 0.0, 0.0)).xy;
    u_xlat16_36 = u_xlat10_2.w + (-_MainTexAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb37 = !!(u_xlat16_36<0.0);
#else
    u_xlatb37 = u_xlat16_36<0.0;
#endif
    u_xlatb37 = u_xlatb3.x && u_xlatb37;
    if((int(u_xlatb37) * int(0xffffffffu))!=0){discard;}
    u_xlat10_3.xzw = texture(_LightMapTex, vs_TEXCOORD0.xy, -1.0).xyz;
    u_xlatb4.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseLightMapColorAO, _UseVertexColorAO, _UseLightMapColorAO, _UseLightMapColorAO)).xy;
    u_xlat16_36 = (u_xlatb4.x) ? u_xlat10_3.z : 0.5;
    u_xlat16_5.xyz = u_xlat10_2.xyz * _Color.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb37 = !!(0.00999999978<u_xlat10_2.w);
#else
    u_xlatb37 = 0.00999999978<u_xlat10_2.w;
#endif
    u_xlatb37 = u_xlatb37 && u_xlatb3.y;
    u_xlat16_41 = (u_xlatb37) ? u_xlat10_2.w : 0.0;
    u_xlat16_6.x = u_xlat16_36 * vs_COLOR0.x;
    u_xlat16_36 = (u_xlatb4.y) ? u_xlat16_6.x : u_xlat16_36;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat16_36<0.0500000007);
#else
    u_xlatb2 = u_xlat16_36<0.0500000007;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(0.949999988<u_xlat16_36);
#else
    u_xlatb15 = 0.949999988<u_xlat16_36;
#endif
    u_xlat27 = u_xlat16_36 + vs_TEXCOORD1.w;
    u_xlat27 = u_xlat27 * 0.5;
    u_xlat16_6.x = (u_xlatb15) ? 1.0 : u_xlat27;
    u_xlat16_6.x = (u_xlatb2) ? 0.0 : u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(u_xlat16_6.x<_LightArea);
#else
    u_xlatb15 = u_xlat16_6.x<_LightArea;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition));
#else
    u_xlatb27 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition);
#endif
    u_xlat16_6.x = (-u_xlat16_6.x) + _LightArea;
    u_xlat16_6.x = u_xlat16_6.x / _ShadowTransitionRange;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4.x = !!(u_xlat16_6.x>=1.0);
#else
    u_xlatb4.x = u_xlat16_6.x>=1.0;
#endif
    u_xlat16_16.x = u_xlat16_6.x + 0.00999999978;
    u_xlat16_16.x = log2(u_xlat16_16.x);
    u_xlat16.x = u_xlat16_16.x * _ShadowTransitionSoftness;
    u_xlat16.x = exp2(u_xlat16.x);
    u_xlat16.x = min(u_xlat16.x, 1.0);
    u_xlat4 = (u_xlatb4.x) ? 1.0 : u_xlat16.x;
    u_xlat4 = (u_xlatb27) ? u_xlat4 : 1.0;
    u_xlat4 = u_xlatb15 ? u_xlat4 : float(0.0);
    u_xlat15 = u_xlatb15 ? 1.0 : float(0.0);
    u_xlat15 = ((gl_FrontFacing ? 0xffffffffu : uint(0)) != uint(0u)) ? u_xlat15 : 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(0.899999976<u_xlat10_3.x);
#else
    u_xlatb16 = 0.899999976<u_xlat10_3.x;
#endif
    if(u_xlatb16){
        u_xlat16.xy = u_xlat16_0.yy * hlslcc_mtx4x4unity_WorldToCamera[1].xy;
        u_xlat16.xy = hlslcc_mtx4x4unity_WorldToCamera[0].xy * u_xlat16_0.xx + u_xlat16.xy;
        u_xlat7.yz = hlslcc_mtx4x4unity_WorldToCamera[2].xy * u_xlat16_0.zz + u_xlat16.xy;
        u_xlat7.x = u_xlat7.y * _MTMapTileScale;
        u_xlat16_6.xy = u_xlat7.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
        u_xlat10_16 = texture(_MTMap, u_xlat16_6.xy).x;
        u_xlat16_6.x = u_xlat10_16 * _MTMapBrightness;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
        u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
        u_xlat16_18.xyz = _MTMapLightColor.xyz + (-_MTMapDarkColor.xyz);
        u_xlat16_6.xyz = u_xlat16_6.xxx * u_xlat16_18.xyz + _MTMapDarkColor.xyz;
        u_xlat16_6.xyz = u_xlat16_5.xyz * u_xlat16_6.xyz;
        u_xlat16_42 = dot(u_xlat16_0.xyz, u_xlat1.xyz);
        u_xlat16_42 = max(u_xlat16_42, 0.00100000005);
        u_xlat16_42 = log2(u_xlat16_42);
        u_xlat16_42 = u_xlat16_42 * _MTShininess;
        u_xlat16_42 = exp2(u_xlat16_42);
        u_xlat16_42 = u_xlat16_42 * _MTSpecularScale;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_42 = min(max(u_xlat16_42, 0.0), 1.0);
#else
        u_xlat16_42 = clamp(u_xlat16_42, 0.0, 1.0);
#endif
        u_xlat16_8.xyz = vec3(u_xlat16_42) * _MTSpecularColor.xyz;
        u_xlat16_8.xyz = u_xlat10_3.www * u_xlat16_8.xyz;
        u_xlat16_9.xyz = u_xlat16_6.xyz * _MTShadowMultiColor.xyz;
        u_xlat16_16.xyz = _MTShadowMultiColor.xyz + vec3(-1.0, -1.0, -1.0);
        u_xlat16.xyz = vec3(u_xlat4) * u_xlat16_16.xyz + vec3(1.0, 1.0, 1.0);
        u_xlat16_10.xyz = (bool(u_xlatb27)) ? u_xlat16.xyz : _MTShadowMultiColor.xyz;
#ifdef UNITY_ADRENO_ES3
        u_xlatb39 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(u_xlat15));
#else
        u_xlatb39 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(u_xlat15);
#endif
        u_xlat16_10.xyz = u_xlat16_6.xyz * u_xlat16_10.xyz;
        u_xlat16.xyz = u_xlat16_6.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
        u_xlat16.xyz = (bool(u_xlatb39)) ? u_xlat16_10.xyz : u_xlat16.xyz;
        u_xlat7.xyz = u_xlat16_8.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
        u_xlat16_16.xyz = u_xlat16.xyz;
        u_xlat16_7.xyz = u_xlat7.xyz;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb39 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex));
#else
        u_xlatb39 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex);
#endif
        u_xlat16_11.xyz = vec3(_FirstShadowMultColor.xxyz.y + (-_CoolShadowMultColor.x), _FirstShadowMultColor.xxyz.z + (-_CoolShadowMultColor.y), float(_FirstShadowMultColor.z) + (-_CoolShadowMultColor.z));
        u_xlat11.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_11.xyz + _CoolShadowMultColor.xyz;
        u_xlat16_6.xyz = (bool(u_xlatb39)) ? u_xlat11.xyz : vec3(_FirstShadowMultColor.x, _FirstShadowMultColor.y, _FirstShadowMultColor.z);
        u_xlat16_9.xyz = u_xlat16_5.xyz * u_xlat16_6.xyz;
        u_xlat16_11.xyz = u_xlat16_6.xyz + vec3(-1.0, -1.0, -1.0);
        u_xlat11.xyz = vec3(u_xlat4) * u_xlat16_11.xyz + vec3(1.0, 1.0, 1.0);
        u_xlat16_6.xyz = (bool(u_xlatb27)) ? u_xlat11.xyz : u_xlat16_6.xyz;
#ifdef UNITY_ADRENO_ES3
        u_xlatb15 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(u_xlat15));
#else
        u_xlatb15 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(u_xlat15);
#endif
        u_xlat16_6.xyz = u_xlat16_5.xyz * u_xlat16_6.xyz;
        u_xlat11.xyz = u_xlat16_5.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
        u_xlat16.xyz = (bool(u_xlatb15)) ? u_xlat16_6.xyz : u_xlat11.xyz;
        u_xlat16_6.x = dot(u_xlat16_0.xyz, u_xlat1.xyz);
        u_xlat16_6.x = max(u_xlat16_6.x, 0.00100000005);
        u_xlat16_6.x = log2(u_xlat16_6.x);
        u_xlat16_6.x = u_xlat16_6.x * _Shininess;
        u_xlat16_6.x = exp2(u_xlat16_6.x);
        u_xlat16_6.xyz = u_xlat16_6.xxx * _SpecularColor.xyz;
        u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(_SpecMulti);
        u_xlat16_6.xyz = u_xlat10_3.xxx * u_xlat16_6.xyz;
        u_xlat7.xyz = u_xlat16_6.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
        u_xlat16_16.xyz = u_xlat16.xyz;
        u_xlat16_7.xyz = u_xlat7.xyz;
    //ENDIF
    }
    u_xlat16_5.xyz = u_xlat16_5.xyz * _EmissionColor_MHY.xyz;
    u_xlat16_6.xyz = u_xlat16_16.xyz + u_xlat16_7.xyz;
    u_xlat16_8.xyz = u_xlat16_7.xyz + u_xlat16_9.xyz;
    u_xlat16_9.xyz = u_xlat16_5.xyz * vec3(vec3(_EmissionScaler, _EmissionScaler, _EmissionScaler)) + (-u_xlat16_6.xyz);
    u_xlat16_9.xyz = vec3(u_xlat16_41) * u_xlat16_9.xyz + u_xlat16_6.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(vec3(_EmissionScaler, _EmissionScaler, _EmissionScaler)) + (-u_xlat16_8.xyz);
    u_xlat16_5.xyz = vec3(u_xlat16_41) * u_xlat16_5.xyz + u_xlat16_8.xyz;
    u_xlat16_6.xyz = (bool(u_xlatb37)) ? u_xlat16_9.xyz : u_xlat16_6.xyz;
    u_xlat16_5.xyz = (bool(u_xlatb37)) ? u_xlat16_5.xyz : u_xlat16_8.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(0.00999999978<u_xlat16_41);
#else
    u_xlatb1 = 0.00999999978<u_xlat16_41;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb13 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn));
#else
    u_xlatb13 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn);
#endif
    u_xlat3.xyz = u_xlat16_6.xyz * vec3(vec3(_ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness));
    u_xlat11.xyz = _ES_CharacterMainLightColor.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat11.xyz = vec3(vec3(_ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio)) * u_xlat11.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat3.xyz = u_xlat3.xyz * u_xlat11.xyz;
    u_xlat11.xyz = _ES_CharacterAmbientLightColor.xyz * vec3(_ES_CharacterAmbientLightRatio);
    u_xlat16_8.xyz = u_xlat3.xyz * vec3(10.0, 10.0, 10.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_8.xyz = min(max(u_xlat16_8.xyz, 0.0), 1.0);
#else
    u_xlat16_8.xyz = clamp(u_xlat16_8.xyz, 0.0, 1.0);
#endif
    u_xlat3.xyz = u_xlat11.xyz * u_xlat16_8.xyz + u_xlat3.xyz;
    u_xlat16_8.xyz = (bool(u_xlatb13)) ? u_xlat3.xyz : u_xlat16_6.xyz;
    u_xlat16_9.xyz = u_xlat16_6.xyz + (-u_xlat16_8.xyz);
    u_xlat16_9.xyz = vec3(u_xlat16_41) * u_xlat16_9.xyz + u_xlat16_8.xyz;
    u_xlat16_6.xyz = (-u_xlat16_5.xyz) + u_xlat16_6.xyz;
    u_xlat16_6.xyz = vec3(u_xlat16_41) * u_xlat16_6.xyz + u_xlat16_5.xyz;
    u_xlat16_2.xyz = (bool(u_xlatb1)) ? u_xlat16_9.xyz : u_xlat16_8.xyz;
    u_xlat16_5.xyz = (bool(u_xlatb1)) ? u_xlat16_6.xyz : u_xlat16_5.xyz;
    u_xlat16_6.x = max(u_xlat16_2.z, u_xlat16_2.y);
    u_xlat16_1.w = max(u_xlat16_2.x, u_xlat16_6.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb3.x = !!(1.0<u_xlat16_1.w);
#else
    u_xlatb3.x = 1.0<u_xlat16_1.w;
#endif
    u_xlat16_1.xyz = u_xlat16_2.xyz / u_xlat16_1.www;
    u_xlat16_2.w = 1.0;
    u_xlat16_1 = (u_xlatb3.x) ? u_xlat16_1 : u_xlat16_2;
    u_xlat16_6.x = min(u_xlat16_1.w, 1.10000002);
    u_xlat16_18.x = u_xlat16_1.w + (-u_xlat16_6.x);
    u_xlat16_41 = u_xlat16_41 * u_xlat16_18.x + u_xlat16_6.x;
    SV_Target1.w = u_xlat16_41 * 0.0500000007;
    SV_Target0.xyz = u_xlat16_0.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb3.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb3.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_41 = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb3.x) ? u_xlat16_41 : u_xlat16_5.z;
    SV_Target0.w = 0.0470588244;
    SV_Target1.xyz = u_xlat16_1.xyz;
    SV_Target2.xy = u_xlat16_5.xy;
    SV_Target2.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "MSAA_INTERPOLATION" "TOON_LIGHTMAP_ON" "BACK_FACE_ON" "METAL_MAT" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec3 mhy_AvatarLightDir;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump float u_xlat16_4;
float u_xlat16;
void main()
{
    u_xlat0.x = hlslcc_mtx4x4unity_ObjectToWorld[0].y;
    u_xlat0.y = hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat0.z = hlslcc_mtx4x4unity_ObjectToWorld[2].y;
    u_xlat1.xyw = (-_WorldSpaceCameraPos.xyz) + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat0.w = u_xlat1.y;
    u_xlat2.xyz = in_POSITION0.xyz;
    u_xlat2.w = 1.0;
    u_xlat0.x = dot(u_xlat0, u_xlat2);
    u_xlat0 = u_xlat0.xxxx * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat3.w = u_xlat1.x;
    u_xlat3.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;
    u_xlat3.y = hlslcc_mtx4x4unity_ObjectToWorld[1].x;
    u_xlat3.z = hlslcc_mtx4x4unity_ObjectToWorld[2].x;
    u_xlat3.x = dot(u_xlat3, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat3.xxxx + u_xlat0;
    u_xlat1.x = hlslcc_mtx4x4unity_ObjectToWorld[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_ObjectToWorld[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_ObjectToWorld[2].z;
    u_xlat1.x = dot(u_xlat1, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat1.xxxx + u_xlat0;
    u_xlat1.x = hlslcc_mtx4x4unity_ObjectToWorld[0].w;
    u_xlat1.y = hlslcc_mtx4x4unity_ObjectToWorld[1].w;
    u_xlat1.z = hlslcc_mtx4x4unity_ObjectToWorld[2].w;
    u_xlat1.w = hlslcc_mtx4x4unity_ObjectToWorld[3].w;
    u_xlat1.x = dot(u_xlat1, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[3] * u_xlat1.xxxx + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat16 = inversesqrt(u_xlat16);
    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
    u_xlat16_4 = dot(u_xlat1.xyz, mhy_AvatarLightDir.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    vs_TEXCOORD1.w = u_xlat16_4 * 0.497500002 + 0.5;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.zw = u_xlat0.zw;
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD3.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD5.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToCamera[4];
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	mediump vec4 _Color;
uniform 	float _MainTexAlphaUse;
uniform 	mediump float _MainTexAlphaCutoff;
uniform 	float _UseLightMapColorAO;
uniform 	float _UseVertexColorAO;
uniform 	mediump float _LightArea;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	float _UseCoolShadowColorOrTex;
uniform 	mediump vec3 _CoolShadowMultColor;
uniform 	float _UseShadowTransition;
uniform 	float _ShadowTransitionRange;
uniform 	float _ShadowTransitionSoftness;
uniform 	mediump vec3 _SpecularColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump float _EmissionScaler;
uniform 	mediump vec3 _EmissionColor_MHY;
uniform 	mediump float _MTMapBrightness;
uniform 	float _MTMapTileScale;
uniform 	mediump vec3 _MTMapLightColor;
uniform 	mediump vec3 _MTMapDarkColor;
uniform 	mediump vec3 _MTShadowMultiColor;
uniform 	mediump float _MTShininess;
uniform 	mediump vec3 _MTSpecularColor;
uniform 	mediump float _MTSpecularScale;
uniform 	float _ES_CharacterAmbientLightOn;
uniform 	float _ES_CharacterAmbientBrightness;
uniform 	vec3 _ES_CharacterMainLightColor;
uniform 	float _ES_CharacterMainLightBrightness;
uniform 	vec3 _ES_CharacterAmbientLightColor;
uniform 	float _ES_CharacterMainLightRatio;
uniform 	float _ES_CharacterAmbientLightRatio;
uniform 	float _ES_CharacterColorTone;
uniform 	vec3 mhy_AvatarLightDir;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MTMap;
in mediump vec4 vs_COLOR0;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec2 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec3 u_xlat10_0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec4 u_xlat16_2;
lowp vec4 u_xlat10_3;
bool u_xlatb3;
vec3 u_xlat4;
mediump vec3 u_xlat16_4;
lowp float u_xlat10_4;
bvec2 u_xlatb4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
vec3 u_xlat10;
mediump vec3 u_xlat16_10;
vec3 u_xlat11;
mediump vec3 u_xlat16_11;
bool u_xlatb11;
vec3 u_xlat12;
bool u_xlatb13;
float u_xlat16;
bool u_xlatb16;
vec3 u_xlat17;
mediump vec3 u_xlat16_19;
vec3 u_xlat24;
mediump vec3 u_xlat16_24;
vec2 u_xlat26;
bvec2 u_xlatb26;
bool u_xlatb29;
mediump float u_xlat16_40;
bool u_xlatb41;
float u_xlat42;
bool u_xlatb42;
mediump float u_xlat16_44;
mediump float u_xlat16_45;
void main()
{
    u_xlat0.xy = dFdx(vs_TEXCOORD0.xy);
    u_xlat26.xy = dFdy(vs_TEXCOORD0.xy);
    u_xlat0.xy = u_xlat26.xy + u_xlat0.xy;
    u_xlat26.xy = (-u_xlat0.xy) * vec2(0.25, 0.25) + vs_TEXCOORD0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25) + vs_TEXCOORD0.xy;
    u_xlat0.xy = (int(gl_SampleID) != 0) ? u_xlat26.xy : u_xlat0.xy;
    u_xlat16_1.xyz = (uint((gl_FrontFacing ? 0xffffffffu : uint(0))) != uint(0u)) ? vs_TEXCOORD1.xyz : (-vs_TEXCOORD1.xyz);
    u_xlat2.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat26.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat26.x = inversesqrt(u_xlat26.x);
    u_xlat2.xyz = u_xlat2.xyz * u_xlat26.xxx + mhy_AvatarLightDir.xyz;
    u_xlat26.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat26.x = inversesqrt(u_xlat26.x);
    u_xlat2.xyz = u_xlat26.xxx * u_xlat2.xyz;
    u_xlat10_3 = textureLod(_MainTex, u_xlat0.xy, 0.0);
    u_xlatb26.xy = equal(vec4(_MainTexAlphaUse), vec4(1.0, 2.0, 1.0, 2.0)).xy;
    u_xlat16_40 = u_xlat10_3.w + (-_MainTexAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb41 = !!(u_xlat16_40<0.0);
#else
    u_xlatb41 = u_xlat16_40<0.0;
#endif
    u_xlatb26.x = u_xlatb26.x && u_xlatb41;
    if((int(u_xlatb26.x) * int(0xffffffffu))!=0){discard;}
    u_xlat10_0.xyz = textureLod(_LightMapTex, u_xlat0.xy, 0.0).xyz;
    u_xlatb4.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseLightMapColorAO, _UseVertexColorAO, _UseLightMapColorAO, _UseLightMapColorAO)).xy;
    u_xlat16_40 = (u_xlatb4.x) ? u_xlat10_0.y : 0.5;
    u_xlat16_5.xyz = u_xlat10_3.xyz * _Color.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb13 = !!(0.00999999978<u_xlat10_3.w);
#else
    u_xlatb13 = 0.00999999978<u_xlat10_3.w;
#endif
    u_xlatb3 = u_xlatb13 && u_xlatb26.y;
    u_xlat16_44 = (u_xlatb3) ? u_xlat10_3.w : 0.0;
    u_xlat16_6.x = u_xlat16_40 * vs_COLOR0.x;
    u_xlat16_6.x = (u_xlatb4.y) ? u_xlat16_6.x : u_xlat16_40;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(u_xlat16_6.x<0.0500000007);
#else
    u_xlatb16 = u_xlat16_6.x<0.0500000007;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb29 = !!(0.949999988<u_xlat16_6.x);
#else
    u_xlatb29 = 0.949999988<u_xlat16_6.x;
#endif
    u_xlat42 = u_xlat16_6.x + vs_TEXCOORD1.w;
    u_xlat42 = u_xlat42 * 0.5;
    u_xlat16_6.x = (u_xlatb29) ? 1.0 : u_xlat42;
    u_xlat16_6.x = (u_xlatb16) ? 0.0 : u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(u_xlat16_6.x<_LightArea);
#else
    u_xlatb16 = u_xlat16_6.x<_LightArea;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb29 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition));
#else
    u_xlatb29 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition);
#endif
    u_xlat16_6.x = (-u_xlat16_6.x) + _LightArea;
    u_xlat16_6.x = u_xlat16_6.x / _ShadowTransitionRange;
#ifdef UNITY_ADRENO_ES3
    u_xlatb42 = !!(u_xlat16_6.x>=1.0);
#else
    u_xlatb42 = u_xlat16_6.x>=1.0;
#endif
    u_xlat16_4.x = u_xlat16_6.x + 0.00999999978;
    u_xlat16_4.x = log2(u_xlat16_4.x);
    u_xlat4.x = u_xlat16_4.x * _ShadowTransitionSoftness;
    u_xlat4.x = exp2(u_xlat4.x);
    u_xlat4.x = min(u_xlat4.x, 1.0);
    u_xlat42 = (u_xlatb42) ? 1.0 : u_xlat4.x;
    u_xlat42 = (u_xlatb29) ? u_xlat42 : 1.0;
    u_xlat42 = u_xlatb16 ? u_xlat42 : float(0.0);
    u_xlat16 = u_xlatb16 ? 1.0 : float(0.0);
    u_xlat16 = ((gl_FrontFacing ? 0xffffffffu : uint(0)) != uint(0u)) ? u_xlat16 : 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4.x = !!(0.899999976<u_xlat10_0.x);
#else
    u_xlatb4.x = 0.899999976<u_xlat10_0.x;
#endif
    if(u_xlatb4.x){
        u_xlat4.xy = u_xlat16_1.yy * hlslcc_mtx4x4unity_WorldToCamera[1].xy;
        u_xlat4.xy = hlslcc_mtx4x4unity_WorldToCamera[0].xy * u_xlat16_1.xx + u_xlat4.xy;
        u_xlat4.yz = hlslcc_mtx4x4unity_WorldToCamera[2].xy * u_xlat16_1.zz + u_xlat4.xy;
        u_xlat4.x = u_xlat4.y * _MTMapTileScale;
        u_xlat16_6.xy = u_xlat4.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
        u_xlat10_4 = texture(_MTMap, u_xlat16_6.xy, -1.0).x;
        u_xlat16_6.x = u_xlat10_4 * _MTMapBrightness;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
        u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
        u_xlat16_19.xyz = _MTMapLightColor.xyz + (-_MTMapDarkColor.xyz);
        u_xlat16_6.xyz = u_xlat16_6.xxx * u_xlat16_19.xyz + _MTMapDarkColor.xyz;
        u_xlat16_6.xyz = u_xlat16_5.xyz * u_xlat16_6.xyz;
        u_xlat16_45 = dot(u_xlat16_1.xyz, u_xlat2.xyz);
        u_xlat16_45 = max(u_xlat16_45, 0.00100000005);
        u_xlat16_45 = log2(u_xlat16_45);
        u_xlat16_45 = u_xlat16_45 * _MTShininess;
        u_xlat16_45 = exp2(u_xlat16_45);
        u_xlat16_45 = u_xlat16_45 * _MTSpecularScale;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_45 = min(max(u_xlat16_45, 0.0), 1.0);
#else
        u_xlat16_45 = clamp(u_xlat16_45, 0.0, 1.0);
#endif
        u_xlat16_7.xyz = vec3(u_xlat16_45) * _MTSpecularColor.xyz;
        u_xlat16_7.xyz = u_xlat10_0.zzz * u_xlat16_7.xyz;
        u_xlat16_8.xyz = u_xlat16_6.xyz * _MTShadowMultiColor.xyz;
        u_xlat16_4.xyz = _MTShadowMultiColor.xyz + vec3(-1.0, -1.0, -1.0);
        u_xlat4.xyz = vec3(u_xlat42) * u_xlat16_4.xyz + vec3(1.0, 1.0, 1.0);
        u_xlat16_9.xyz = (bool(u_xlatb29)) ? u_xlat4.xyz : _MTShadowMultiColor.xyz;
#ifdef UNITY_ADRENO_ES3
        u_xlatb4.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(u_xlat16));
#else
        u_xlatb4.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(u_xlat16);
#endif
        u_xlat16_9.xyz = u_xlat16_6.xyz * u_xlat16_9.xyz;
        u_xlat17.xyz = u_xlat16_6.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
        u_xlat4.xyz = (u_xlatb4.x) ? u_xlat16_9.xyz : u_xlat17.xyz;
        u_xlat10.xyz = u_xlat16_7.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
        u_xlat16_4.xyz = u_xlat4.xyz;
        u_xlat16_10.xyz = u_xlat10.xyz;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb11 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex));
#else
        u_xlatb11 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex);
#endif
        u_xlat16_24.xyz = vec3(_FirstShadowMultColor.xxyz.y + (-_CoolShadowMultColor.x), _FirstShadowMultColor.xxyz.z + (-_CoolShadowMultColor.y), float(_FirstShadowMultColor.z) + (-_CoolShadowMultColor.z));
        u_xlat24.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_24.xyz + _CoolShadowMultColor.xyz;
        u_xlat16_6.xyz = (bool(u_xlatb11)) ? u_xlat24.xyz : vec3(_FirstShadowMultColor.x, _FirstShadowMultColor.y, _FirstShadowMultColor.z);
        u_xlat16_8.xyz = u_xlat16_5.xyz * u_xlat16_6.xyz;
        u_xlat16_11.xyz = u_xlat16_6.xyz + vec3(-1.0, -1.0, -1.0);
        u_xlat11.xyz = vec3(u_xlat42) * u_xlat16_11.xyz + vec3(1.0, 1.0, 1.0);
        u_xlat16_6.xyz = (bool(u_xlatb29)) ? u_xlat11.xyz : u_xlat16_6.xyz;
#ifdef UNITY_ADRENO_ES3
        u_xlatb16 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(u_xlat16));
#else
        u_xlatb16 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(u_xlat16);
#endif
        u_xlat16_6.xyz = u_xlat16_5.xyz * u_xlat16_6.xyz;
        u_xlat11.xyz = u_xlat16_5.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
        u_xlat4.xyz = (bool(u_xlatb16)) ? u_xlat16_6.xyz : u_xlat11.xyz;
        u_xlat16_6.x = dot(u_xlat16_1.xyz, u_xlat2.xyz);
        u_xlat16_6.x = max(u_xlat16_6.x, 0.00100000005);
        u_xlat16_6.x = log2(u_xlat16_6.x);
        u_xlat16_6.x = u_xlat16_6.x * _Shininess;
        u_xlat16_6.x = exp2(u_xlat16_6.x);
        u_xlat16_6.xyz = u_xlat16_6.xxx * _SpecularColor.xyz;
        u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(_SpecMulti);
        u_xlat16_6.xyz = u_xlat10_0.xxx * u_xlat16_6.xyz;
        u_xlat10.xyz = u_xlat16_6.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
        u_xlat16_4.xyz = u_xlat4.xyz;
        u_xlat16_10.xyz = u_xlat10.xyz;
    //ENDIF
    }
    u_xlat16_5.xyz = u_xlat16_5.xyz * _EmissionColor_MHY.xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz + u_xlat16_10.xyz;
    u_xlat16_7.xyz = u_xlat16_8.xyz + u_xlat16_10.xyz;
    u_xlat16_8.xyz = u_xlat16_5.xyz * vec3(vec3(_EmissionScaler, _EmissionScaler, _EmissionScaler)) + (-u_xlat16_6.xyz);
    u_xlat16_8.xyz = vec3(u_xlat16_44) * u_xlat16_8.xyz + u_xlat16_6.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(vec3(_EmissionScaler, _EmissionScaler, _EmissionScaler)) + (-u_xlat16_7.xyz);
    u_xlat16_5.xyz = vec3(u_xlat16_44) * u_xlat16_5.xyz + u_xlat16_7.xyz;
    u_xlat16_6.xyz = (bool(u_xlatb3)) ? u_xlat16_8.xyz : u_xlat16_6.xyz;
    u_xlat16_5.xyz = (bool(u_xlatb3)) ? u_xlat16_5.xyz : u_xlat16_7.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(0.00999999978<u_xlat16_44);
#else
    u_xlatb3 = 0.00999999978<u_xlat16_44;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn));
#else
    u_xlatb16 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn);
#endif
    u_xlat11.xyz = u_xlat16_6.xyz * vec3(vec3(_ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness));
    u_xlat12.xyz = _ES_CharacterMainLightColor.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat12.xyz = vec3(vec3(_ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio)) * u_xlat12.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat11.xyz = u_xlat11.xyz * u_xlat12.xyz;
    u_xlat12.xyz = _ES_CharacterAmbientLightColor.xyz * vec3(_ES_CharacterAmbientLightRatio);
    u_xlat16_7.xyz = u_xlat11.xyz * vec3(10.0, 10.0, 10.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.xyz = min(max(u_xlat16_7.xyz, 0.0), 1.0);
#else
    u_xlat16_7.xyz = clamp(u_xlat16_7.xyz, 0.0, 1.0);
#endif
    u_xlat11.xyz = u_xlat12.xyz * u_xlat16_7.xyz + u_xlat11.xyz;
    u_xlat16_7.xyz = (bool(u_xlatb16)) ? u_xlat11.xyz : u_xlat16_6.xyz;
    u_xlat16_8.xyz = u_xlat16_6.xyz + (-u_xlat16_7.xyz);
    u_xlat16_8.xyz = vec3(u_xlat16_44) * u_xlat16_8.xyz + u_xlat16_7.xyz;
    u_xlat16_6.xyz = (-u_xlat16_5.xyz) + u_xlat16_6.xyz;
    u_xlat16_6.xyz = vec3(u_xlat16_44) * u_xlat16_6.xyz + u_xlat16_5.xyz;
    u_xlat16_0.xyz = (bool(u_xlatb3)) ? u_xlat16_8.xyz : u_xlat16_7.xyz;
    u_xlat16_5.xyz = (bool(u_xlatb3)) ? u_xlat16_6.xyz : u_xlat16_5.xyz;
    u_xlat16_6.x = max(u_xlat16_0.z, u_xlat16_0.y);
    u_xlat16_2.w = max(u_xlat16_0.x, u_xlat16_6.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(1.0<u_xlat16_2.w);
#else
    u_xlatb3 = 1.0<u_xlat16_2.w;
#endif
    u_xlat16_2.xyz = u_xlat16_0.xyz / u_xlat16_2.www;
    u_xlat16_0.w = 1.0;
    u_xlat16_0 = (bool(u_xlatb3)) ? u_xlat16_2 : u_xlat16_0;
    u_xlat16_6.x = min(u_xlat16_0.w, 1.10000002);
    u_xlat16_19.x = u_xlat16_0.w + (-u_xlat16_6.x);
    u_xlat16_44 = u_xlat16_44 * u_xlat16_19.x + u_xlat16_6.x;
    SV_Target1.w = u_xlat16_44 * 0.0500000007;
    SV_Target0.xyz = u_xlat16_1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb3 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_44 = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb3) ? u_xlat16_44 : u_xlat16_5.z;
    SV_Target0.w = 0.0470588244;
    SV_Target1.xyz = u_xlat16_0.xyz;
    SV_Target2.xy = u_xlat16_5.xy;
    SV_Target2.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "LINE_INTERPOLATION" "TOON_LIGHTMAP_ON" "BACK_FACE_ON" "METAL_MAT" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec3 mhy_AvatarLightDir;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump float u_xlat16_4;
float u_xlat16;
void main()
{
    u_xlat0.x = hlslcc_mtx4x4unity_ObjectToWorld[0].y;
    u_xlat0.y = hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat0.z = hlslcc_mtx4x4unity_ObjectToWorld[2].y;
    u_xlat1.xyw = (-_WorldSpaceCameraPos.xyz) + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat0.w = u_xlat1.y;
    u_xlat2.xyz = in_POSITION0.xyz;
    u_xlat2.w = 1.0;
    u_xlat0.x = dot(u_xlat0, u_xlat2);
    u_xlat0 = u_xlat0.xxxx * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat3.w = u_xlat1.x;
    u_xlat3.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;
    u_xlat3.y = hlslcc_mtx4x4unity_ObjectToWorld[1].x;
    u_xlat3.z = hlslcc_mtx4x4unity_ObjectToWorld[2].x;
    u_xlat3.x = dot(u_xlat3, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat3.xxxx + u_xlat0;
    u_xlat1.x = hlslcc_mtx4x4unity_ObjectToWorld[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_ObjectToWorld[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_ObjectToWorld[2].z;
    u_xlat1.x = dot(u_xlat1, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat1.xxxx + u_xlat0;
    u_xlat1.x = hlslcc_mtx4x4unity_ObjectToWorld[0].w;
    u_xlat1.y = hlslcc_mtx4x4unity_ObjectToWorld[1].w;
    u_xlat1.z = hlslcc_mtx4x4unity_ObjectToWorld[2].w;
    u_xlat1.w = hlslcc_mtx4x4unity_ObjectToWorld[3].w;
    u_xlat1.x = dot(u_xlat1, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[3] * u_xlat1.xxxx + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat16 = inversesqrt(u_xlat16);
    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
    u_xlat16_4 = dot(u_xlat1.xyz, mhy_AvatarLightDir.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    vs_TEXCOORD1.w = u_xlat16_4 * 0.497500002 + 0.5;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.zw = u_xlat0.zw;
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD3.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD5.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToCamera[4];
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	mediump vec4 _Color;
uniform 	float _MainTexAlphaUse;
uniform 	mediump float _MainTexAlphaCutoff;
uniform 	float _UseLightMapColorAO;
uniform 	float _UseVertexColorAO;
uniform 	mediump float _LightArea;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	float _UseCoolShadowColorOrTex;
uniform 	mediump vec3 _CoolShadowMultColor;
uniform 	float _UseShadowTransition;
uniform 	float _ShadowTransitionRange;
uniform 	float _ShadowTransitionSoftness;
uniform 	mediump vec3 _SpecularColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump float _EmissionScaler;
uniform 	mediump vec3 _EmissionColor_MHY;
uniform 	mediump float _MTMapBrightness;
uniform 	float _MTMapTileScale;
uniform 	mediump vec3 _MTMapLightColor;
uniform 	mediump vec3 _MTMapDarkColor;
uniform 	mediump vec3 _MTShadowMultiColor;
uniform 	mediump float _MTShininess;
uniform 	mediump vec3 _MTSpecularColor;
uniform 	mediump float _MTSpecularScale;
uniform 	float _ES_CharacterAmbientLightOn;
uniform 	float _ES_CharacterAmbientBrightness;
uniform 	vec3 _ES_CharacterMainLightColor;
uniform 	float _ES_CharacterMainLightBrightness;
uniform 	vec3 _ES_CharacterAmbientLightColor;
uniform 	float _ES_CharacterMainLightRatio;
uniform 	float _ES_CharacterAmbientLightRatio;
uniform 	float _ES_CharacterColorTone;
uniform 	vec3 mhy_AvatarLightDir;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MTMap;
in mediump vec4 vs_COLOR0;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
mediump vec3 u_xlat16_0;
vec3 u_xlat1;
mediump vec4 u_xlat16_1;
bool u_xlatb1;
mediump vec4 u_xlat16_2;
lowp vec4 u_xlat10_2;
bool u_xlatb2;
vec3 u_xlat3;
lowp vec4 u_xlat10_3;
bvec2 u_xlatb3;
float u_xlat4;
bvec2 u_xlatb4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
vec3 u_xlat11;
mediump vec3 u_xlat16_11;
bool u_xlatb13;
float u_xlat15;
bool u_xlatb15;
vec3 u_xlat16;
mediump vec3 u_xlat16_16;
lowp float u_xlat10_16;
bool u_xlatb16;
mediump vec3 u_xlat16_18;
float u_xlat27;
bool u_xlatb27;
mediump float u_xlat16_36;
float u_xlat37;
bool u_xlatb37;
bool u_xlatb39;
mediump float u_xlat16_41;
mediump float u_xlat16_42;
void main()
{
    u_xlat16_0.xyz = (uint((gl_FrontFacing ? 0xffffffffu : uint(0))) != uint(0u)) ? vs_TEXCOORD1.xyz : (-vs_TEXCOORD1.xyz);
    u_xlat1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat37 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat37 = inversesqrt(u_xlat37);
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat37) + mhy_AvatarLightDir.xyz;
    u_xlat37 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat37 = inversesqrt(u_xlat37);
    u_xlat1.xyz = vec3(u_xlat37) * u_xlat1.xyz;
    u_xlat10_2 = texture(_MainTex, vs_TEXCOORD0.xy, -1.0);
    u_xlatb3.xy = equal(vec4(_MainTexAlphaUse), vec4(1.0, 2.0, 0.0, 0.0)).xy;
    u_xlat16_36 = u_xlat10_2.w + (-_MainTexAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb37 = !!(u_xlat16_36<0.0);
#else
    u_xlatb37 = u_xlat16_36<0.0;
#endif
    u_xlatb37 = u_xlatb3.x && u_xlatb37;
    if((int(u_xlatb37) * int(0xffffffffu))!=0){discard;}
    u_xlat10_3.xzw = texture(_LightMapTex, vs_TEXCOORD0.xy, -1.0).xyz;
    u_xlatb4.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseLightMapColorAO, _UseVertexColorAO, _UseLightMapColorAO, _UseLightMapColorAO)).xy;
    u_xlat16_36 = (u_xlatb4.x) ? u_xlat10_3.z : 0.5;
    u_xlat16_5.xyz = u_xlat10_2.xyz * _Color.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb37 = !!(0.00999999978<u_xlat10_2.w);
#else
    u_xlatb37 = 0.00999999978<u_xlat10_2.w;
#endif
    u_xlatb37 = u_xlatb37 && u_xlatb3.y;
    u_xlat16_41 = (u_xlatb37) ? u_xlat10_2.w : 0.0;
    u_xlat16_6.x = u_xlat16_36 * vs_COLOR0.x;
    u_xlat16_36 = (u_xlatb4.y) ? u_xlat16_6.x : u_xlat16_36;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat16_36<0.0500000007);
#else
    u_xlatb2 = u_xlat16_36<0.0500000007;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(0.949999988<u_xlat16_36);
#else
    u_xlatb15 = 0.949999988<u_xlat16_36;
#endif
    u_xlat27 = u_xlat16_36 + vs_TEXCOORD1.w;
    u_xlat27 = u_xlat27 * 0.5;
    u_xlat16_6.x = (u_xlatb15) ? 1.0 : u_xlat27;
    u_xlat16_6.x = (u_xlatb2) ? 0.0 : u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(u_xlat16_6.x<_LightArea);
#else
    u_xlatb15 = u_xlat16_6.x<_LightArea;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition));
#else
    u_xlatb27 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition);
#endif
    u_xlat16_6.x = (-u_xlat16_6.x) + _LightArea;
    u_xlat16_6.x = u_xlat16_6.x / _ShadowTransitionRange;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4.x = !!(u_xlat16_6.x>=1.0);
#else
    u_xlatb4.x = u_xlat16_6.x>=1.0;
#endif
    u_xlat16_16.x = u_xlat16_6.x + 0.00999999978;
    u_xlat16_16.x = log2(u_xlat16_16.x);
    u_xlat16.x = u_xlat16_16.x * _ShadowTransitionSoftness;
    u_xlat16.x = exp2(u_xlat16.x);
    u_xlat16.x = min(u_xlat16.x, 1.0);
    u_xlat4 = (u_xlatb4.x) ? 1.0 : u_xlat16.x;
    u_xlat4 = (u_xlatb27) ? u_xlat4 : 1.0;
    u_xlat4 = u_xlatb15 ? u_xlat4 : float(0.0);
    u_xlat15 = u_xlatb15 ? 1.0 : float(0.0);
    u_xlat15 = ((gl_FrontFacing ? 0xffffffffu : uint(0)) != uint(0u)) ? u_xlat15 : 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(0.899999976<u_xlat10_3.x);
#else
    u_xlatb16 = 0.899999976<u_xlat10_3.x;
#endif
    if(u_xlatb16){
        u_xlat16.xy = u_xlat16_0.yy * hlslcc_mtx4x4unity_WorldToCamera[1].xy;
        u_xlat16.xy = hlslcc_mtx4x4unity_WorldToCamera[0].xy * u_xlat16_0.xx + u_xlat16.xy;
        u_xlat7.yz = hlslcc_mtx4x4unity_WorldToCamera[2].xy * u_xlat16_0.zz + u_xlat16.xy;
        u_xlat7.x = u_xlat7.y * _MTMapTileScale;
        u_xlat16_6.xy = u_xlat7.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
        u_xlat10_16 = texture(_MTMap, u_xlat16_6.xy, -1.0).x;
        u_xlat16_6.x = u_xlat10_16 * _MTMapBrightness;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
        u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
        u_xlat16_18.xyz = _MTMapLightColor.xyz + (-_MTMapDarkColor.xyz);
        u_xlat16_6.xyz = u_xlat16_6.xxx * u_xlat16_18.xyz + _MTMapDarkColor.xyz;
        u_xlat16_6.xyz = u_xlat16_5.xyz * u_xlat16_6.xyz;
        u_xlat16_42 = dot(u_xlat16_0.xyz, u_xlat1.xyz);
        u_xlat16_42 = max(u_xlat16_42, 0.00100000005);
        u_xlat16_42 = log2(u_xlat16_42);
        u_xlat16_42 = u_xlat16_42 * _MTShininess;
        u_xlat16_42 = exp2(u_xlat16_42);
        u_xlat16_42 = u_xlat16_42 * _MTSpecularScale;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_42 = min(max(u_xlat16_42, 0.0), 1.0);
#else
        u_xlat16_42 = clamp(u_xlat16_42, 0.0, 1.0);
#endif
        u_xlat16_8.xyz = vec3(u_xlat16_42) * _MTSpecularColor.xyz;
        u_xlat16_8.xyz = u_xlat10_3.www * u_xlat16_8.xyz;
        u_xlat16_9.xyz = u_xlat16_6.xyz * _MTShadowMultiColor.xyz;
        u_xlat16_16.xyz = _MTShadowMultiColor.xyz + vec3(-1.0, -1.0, -1.0);
        u_xlat16.xyz = vec3(u_xlat4) * u_xlat16_16.xyz + vec3(1.0, 1.0, 1.0);
        u_xlat16_10.xyz = (bool(u_xlatb27)) ? u_xlat16.xyz : _MTShadowMultiColor.xyz;
#ifdef UNITY_ADRENO_ES3
        u_xlatb39 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(u_xlat15));
#else
        u_xlatb39 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(u_xlat15);
#endif
        u_xlat16_10.xyz = u_xlat16_6.xyz * u_xlat16_10.xyz;
        u_xlat16.xyz = u_xlat16_6.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
        u_xlat16.xyz = (bool(u_xlatb39)) ? u_xlat16_10.xyz : u_xlat16.xyz;
        u_xlat7.xyz = u_xlat16_8.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
        u_xlat16_16.xyz = u_xlat16.xyz;
        u_xlat16_7.xyz = u_xlat7.xyz;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb39 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex));
#else
        u_xlatb39 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex);
#endif
        u_xlat16_11.xyz = vec3(_FirstShadowMultColor.xxyz.y + (-_CoolShadowMultColor.x), _FirstShadowMultColor.xxyz.z + (-_CoolShadowMultColor.y), float(_FirstShadowMultColor.z) + (-_CoolShadowMultColor.z));
        u_xlat11.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_11.xyz + _CoolShadowMultColor.xyz;
        u_xlat16_6.xyz = (bool(u_xlatb39)) ? u_xlat11.xyz : vec3(_FirstShadowMultColor.x, _FirstShadowMultColor.y, _FirstShadowMultColor.z);
        u_xlat16_9.xyz = u_xlat16_5.xyz * u_xlat16_6.xyz;
        u_xlat16_11.xyz = u_xlat16_6.xyz + vec3(-1.0, -1.0, -1.0);
        u_xlat11.xyz = vec3(u_xlat4) * u_xlat16_11.xyz + vec3(1.0, 1.0, 1.0);
        u_xlat16_6.xyz = (bool(u_xlatb27)) ? u_xlat11.xyz : u_xlat16_6.xyz;
#ifdef UNITY_ADRENO_ES3
        u_xlatb15 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(u_xlat15));
#else
        u_xlatb15 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(u_xlat15);
#endif
        u_xlat16_6.xyz = u_xlat16_5.xyz * u_xlat16_6.xyz;
        u_xlat11.xyz = u_xlat16_5.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
        u_xlat16.xyz = (bool(u_xlatb15)) ? u_xlat16_6.xyz : u_xlat11.xyz;
        u_xlat16_6.x = dot(u_xlat16_0.xyz, u_xlat1.xyz);
        u_xlat16_6.x = max(u_xlat16_6.x, 0.00100000005);
        u_xlat16_6.x = log2(u_xlat16_6.x);
        u_xlat16_6.x = u_xlat16_6.x * _Shininess;
        u_xlat16_6.x = exp2(u_xlat16_6.x);
        u_xlat16_6.xyz = u_xlat16_6.xxx * _SpecularColor.xyz;
        u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(_SpecMulti);
        u_xlat16_6.xyz = u_xlat10_3.xxx * u_xlat16_6.xyz;
        u_xlat7.xyz = u_xlat16_6.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
        u_xlat16_16.xyz = u_xlat16.xyz;
        u_xlat16_7.xyz = u_xlat7.xyz;
    //ENDIF
    }
    u_xlat16_5.xyz = u_xlat16_5.xyz * _EmissionColor_MHY.xyz;
    u_xlat16_6.xyz = u_xlat16_16.xyz + u_xlat16_7.xyz;
    u_xlat16_8.xyz = u_xlat16_7.xyz + u_xlat16_9.xyz;
    u_xlat16_9.xyz = u_xlat16_5.xyz * vec3(vec3(_EmissionScaler, _EmissionScaler, _EmissionScaler)) + (-u_xlat16_6.xyz);
    u_xlat16_9.xyz = vec3(u_xlat16_41) * u_xlat16_9.xyz + u_xlat16_6.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(vec3(_EmissionScaler, _EmissionScaler, _EmissionScaler)) + (-u_xlat16_8.xyz);
    u_xlat16_5.xyz = vec3(u_xlat16_41) * u_xlat16_5.xyz + u_xlat16_8.xyz;
    u_xlat16_6.xyz = (bool(u_xlatb37)) ? u_xlat16_9.xyz : u_xlat16_6.xyz;
    u_xlat16_5.xyz = (bool(u_xlatb37)) ? u_xlat16_5.xyz : u_xlat16_8.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(0.00999999978<u_xlat16_41);
#else
    u_xlatb1 = 0.00999999978<u_xlat16_41;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb13 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn));
#else
    u_xlatb13 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn);
#endif
    u_xlat3.xyz = u_xlat16_6.xyz * vec3(vec3(_ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness));
    u_xlat11.xyz = _ES_CharacterMainLightColor.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat11.xyz = vec3(vec3(_ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio)) * u_xlat11.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat3.xyz = u_xlat3.xyz * u_xlat11.xyz;
    u_xlat11.xyz = _ES_CharacterAmbientLightColor.xyz * vec3(_ES_CharacterAmbientLightRatio);
    u_xlat16_8.xyz = u_xlat3.xyz * vec3(10.0, 10.0, 10.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_8.xyz = min(max(u_xlat16_8.xyz, 0.0), 1.0);
#else
    u_xlat16_8.xyz = clamp(u_xlat16_8.xyz, 0.0, 1.0);
#endif
    u_xlat3.xyz = u_xlat11.xyz * u_xlat16_8.xyz + u_xlat3.xyz;
    u_xlat16_8.xyz = (bool(u_xlatb13)) ? u_xlat3.xyz : u_xlat16_6.xyz;
    u_xlat16_9.xyz = u_xlat16_6.xyz + (-u_xlat16_8.xyz);
    u_xlat16_9.xyz = vec3(u_xlat16_41) * u_xlat16_9.xyz + u_xlat16_8.xyz;
    u_xlat16_6.xyz = (-u_xlat16_5.xyz) + u_xlat16_6.xyz;
    u_xlat16_6.xyz = vec3(u_xlat16_41) * u_xlat16_6.xyz + u_xlat16_5.xyz;
    u_xlat16_2.xyz = (bool(u_xlatb1)) ? u_xlat16_9.xyz : u_xlat16_8.xyz;
    u_xlat16_5.xyz = (bool(u_xlatb1)) ? u_xlat16_6.xyz : u_xlat16_5.xyz;
    u_xlat16_6.x = max(u_xlat16_2.z, u_xlat16_2.y);
    u_xlat16_1.w = max(u_xlat16_2.x, u_xlat16_6.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb3.x = !!(1.0<u_xlat16_1.w);
#else
    u_xlatb3.x = 1.0<u_xlat16_1.w;
#endif
    u_xlat16_1.xyz = u_xlat16_2.xyz / u_xlat16_1.www;
    u_xlat16_2.w = 1.0;
    u_xlat16_1 = (u_xlatb3.x) ? u_xlat16_1 : u_xlat16_2;
    u_xlat16_6.x = min(u_xlat16_1.w, 1.10000002);
    u_xlat16_18.x = u_xlat16_1.w + (-u_xlat16_6.x);
    u_xlat16_41 = u_xlat16_41 * u_xlat16_18.x + u_xlat16_6.x;
    SV_Target1.w = u_xlat16_41 * 0.0500000007;
    SV_Target0.xyz = u_xlat16_0.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb3.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb3.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_41 = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb3.x) ? u_xlat16_41 : u_xlat16_5.z;
    SV_Target0.w = 0.0470588244;
    SV_Target1.xyz = u_xlat16_1.xyz;
    SV_Target2.xy = u_xlat16_5.xy;
    SV_Target2.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "TOON_LIGHTMAP_ON" "NORMAL_MAP_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
float u_xlat12;
void main()
{
    u_xlat0.x = hlslcc_mtx4x4unity_ObjectToWorld[0].y;
    u_xlat0.y = hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat0.z = hlslcc_mtx4x4unity_ObjectToWorld[2].y;
    u_xlat1.xyw = (-_WorldSpaceCameraPos.xyz) + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat0.w = u_xlat1.y;
    u_xlat2.xyz = in_POSITION0.xyz;
    u_xlat2.w = 1.0;
    u_xlat0.x = dot(u_xlat0, u_xlat2);
    u_xlat0 = u_xlat0.xxxx * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat3.w = u_xlat1.x;
    u_xlat3.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;
    u_xlat3.y = hlslcc_mtx4x4unity_ObjectToWorld[1].x;
    u_xlat3.z = hlslcc_mtx4x4unity_ObjectToWorld[2].x;
    u_xlat3.x = dot(u_xlat3, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat3.xxxx + u_xlat0;
    u_xlat1.x = hlslcc_mtx4x4unity_ObjectToWorld[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_ObjectToWorld[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_ObjectToWorld[2].z;
    u_xlat1.x = dot(u_xlat1, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat1.xxxx + u_xlat0;
    u_xlat1.x = hlslcc_mtx4x4unity_ObjectToWorld[0].w;
    u_xlat1.y = hlslcc_mtx4x4unity_ObjectToWorld[1].w;
    u_xlat1.z = hlslcc_mtx4x4unity_ObjectToWorld[2].w;
    u_xlat1.w = hlslcc_mtx4x4unity_ObjectToWorld[3].w;
    u_xlat1.x = dot(u_xlat1, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[3] * u_xlat1.xxxx + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD1 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.zw = u_xlat0.zw;
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD3.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
    u_xlat12 = in_TANGENT0.w * unity_WorldTransformParams.w;
    u_xlat2.xyz = vec3(u_xlat12) * u_xlat2.xyz;
    vs_TEXCOORD4.y = u_xlat2.x;
    vs_TEXCOORD4.x = u_xlat1.z;
    vs_TEXCOORD4.z = u_xlat0.y;
    vs_TEXCOORD5.x = u_xlat1.x;
    vs_TEXCOORD6.x = u_xlat1.y;
    vs_TEXCOORD5.z = u_xlat0.z;
    vs_TEXCOORD6.z = u_xlat0.x;
    vs_TEXCOORD5.y = u_xlat2.y;
    vs_TEXCOORD6.y = u_xlat2.z;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	mediump vec4 _Color;
uniform 	float _MainTexAlphaUse;
uniform 	mediump float _MainTexAlphaCutoff;
uniform 	mediump float _BumpScale;
uniform 	float _UseLightMapColorAO;
uniform 	float _UseVertexColorAO;
uniform 	mediump float _LightArea;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	float _UseCoolShadowColorOrTex;
uniform 	mediump vec3 _CoolShadowMultColor;
uniform 	float _UseShadowTransition;
uniform 	float _ShadowTransitionRange;
uniform 	float _ShadowTransitionSoftness;
uniform 	mediump vec3 _SpecularColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump float _EmissionScaler;
uniform 	mediump vec3 _EmissionColor_MHY;
uniform 	float _ES_CharacterAmbientLightOn;
uniform 	float _ES_CharacterAmbientBrightness;
uniform 	vec3 _ES_CharacterMainLightColor;
uniform 	float _ES_CharacterMainLightBrightness;
uniform 	vec3 _ES_CharacterAmbientLightColor;
uniform 	float _ES_CharacterMainLightRatio;
uniform 	float _ES_CharacterAmbientLightRatio;
uniform 	float _ES_CharacterColorTone;
uniform 	vec3 mhy_AvatarLightDir;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMapTex;
in mediump vec4 vs_COLOR0;
in highp vec2 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD5;
in highp vec3 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec4 u_xlat0;
mediump float u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
vec3 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
bool u_xlatb1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump vec4 u_xlat16_3;
bvec2 u_xlatb3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
bool u_xlatb8;
float u_xlat16;
mediump float u_xlat16_16;
lowp vec2 u_xlat10_16;
bool u_xlatb16;
bool u_xlatb24;
mediump float u_xlat16_26;
bool u_xlatb27;
mediump float u_xlat16_28;
mediump float u_xlat16_29;
void main()
{
    u_xlatb0.xy = equal(vec4(_MainTexAlphaUse), vec4(1.0, 2.0, 0.0, 0.0)).xy;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy, -1.0);
    u_xlat16_2.x = u_xlat10_1.w + (-_MainTexAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(u_xlat16_2.x<0.0);
#else
    u_xlatb16 = u_xlat16_2.x<0.0;
#endif
    u_xlatb0.x = u_xlatb0.x && u_xlatb16;
    if((int(u_xlatb0.x) * int(0xffffffffu))!=0){discard;}
    u_xlat10_0.xzw = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xzw * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_2.xy = u_xlat16_2.xy * vec2(vec2(_BumpScale, _BumpScale));
    u_xlat3.x = dot(vs_TEXCOORD4.xyz, u_xlat16_2.xyz);
    u_xlat3.y = dot(vs_TEXCOORD5.xyz, u_xlat16_2.xyz);
    u_xlat3.z = dot(vs_TEXCOORD6.xyz, u_xlat16_2.xyz);
    u_xlat16_2.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat16_2.x = inversesqrt(u_xlat16_2.x);
    u_xlat16_2.xyz = u_xlat16_2.xxx * u_xlat3.xyz;
    SV_Target0.xyz = u_xlat16_2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0470588244;
    u_xlat0.xzw = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat0.xzw = u_xlat0.xzw * u_xlat3.xxx + mhy_AvatarLightDir.xyz;
    u_xlat3.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat0.xzw = u_xlat0.xzw * u_xlat3.xxx;
    u_xlat16_26 = dot(u_xlat16_2.xyz, u_xlat0.xzw);
    u_xlat16_2.x = dot(u_xlat16_2.xyz, mhy_AvatarLightDir.xyz);
    u_xlat16_0 = u_xlat16_2.x * 0.497500002 + 0.5;
    u_xlat16_2.x = max(u_xlat16_26, 0.00100000005);
    u_xlat16_2.x = log2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * _Shininess;
    u_xlat16_2.x = exp2(u_xlat16_2.x);
    u_xlat16_2.xyz = u_xlat16_2.xxx * _SpecularColor.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(_SpecMulti);
    u_xlat10_16.xy = texture(_LightMapTex, vs_TEXCOORD0.xy, -1.0).xy;
    u_xlat16_2.xyz = u_xlat10_16.xxx * u_xlat16_2.xyz;
    u_xlatb3.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseLightMapColorAO, _UseVertexColorAO, _UseLightMapColorAO, _UseLightMapColorAO)).xy;
    u_xlat16_26 = (u_xlatb3.x) ? u_xlat10_16.y : 0.5;
    u_xlat16_4.x = u_xlat16_26 * vs_COLOR0.x;
    u_xlat16_26 = (u_xlatb3.y) ? u_xlat16_4.x : u_xlat16_26;
    u_xlat16_0 = u_xlat16_0 + u_xlat16_26;
    u_xlat0.x = u_xlat16_0 * 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(0.949999988<u_xlat16_26);
#else
    u_xlatb16 = 0.949999988<u_xlat16_26;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(u_xlat16_26<0.0500000007);
#else
    u_xlatb24 = u_xlat16_26<0.0500000007;
#endif
    u_xlat16_26 = (u_xlatb16) ? 1.0 : u_xlat0.x;
    u_xlat16_26 = (u_xlatb24) ? 0.0 : u_xlat16_26;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(u_xlat16_26<_LightArea);
#else
    u_xlatb0.x = u_xlat16_26<_LightArea;
#endif
    u_xlat16_26 = (-u_xlat16_26) + _LightArea;
    u_xlat16_26 = u_xlat16_26 / _ShadowTransitionRange;
    u_xlat16_16 = u_xlat16_26 + 0.00999999978;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(u_xlat16_26>=1.0);
#else
    u_xlatb24 = u_xlat16_26>=1.0;
#endif
    u_xlat16_16 = log2(u_xlat16_16);
    u_xlat16 = u_xlat16_16 * _ShadowTransitionSoftness;
    u_xlat16 = exp2(u_xlat16);
    u_xlat16 = min(u_xlat16, 1.0);
    u_xlat16 = (u_xlatb24) ? 1.0 : u_xlat16;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition));
#else
    u_xlatb24 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition);
#endif
    u_xlat16 = (u_xlatb24) ? u_xlat16 : 1.0;
    u_xlat16 = u_xlatb0.x ? u_xlat16 : float(0.0);
    u_xlat16_3.xyz = vec3(_FirstShadowMultColor.xxyz.y + (-_CoolShadowMultColor.x), _FirstShadowMultColor.xxyz.z + (-_CoolShadowMultColor.y), float(_FirstShadowMultColor.z) + (-_CoolShadowMultColor.z));
    u_xlat3.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_3.xyz + _CoolShadowMultColor.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex));
#else
    u_xlatb27 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex);
#endif
    u_xlat16_4.xyz = (bool(u_xlatb27)) ? u_xlat3.xyz : vec3(_FirstShadowMultColor.x, _FirstShadowMultColor.y, _FirstShadowMultColor.z);
    u_xlat16_3.xyz = u_xlat16_4.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat3.xyz = vec3(u_xlat16) * u_xlat16_3.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_5.xyz = (bool(u_xlatb24)) ? u_xlat3.xyz : u_xlat16_4.xyz;
    u_xlat16_6.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_6.xyz;
    u_xlat1.xyz = u_xlat16_6.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
    u_xlat0.xzw = (u_xlatb0.x) ? u_xlat16_5.xyz : u_xlat1.xyz;
    u_xlat16_5.xyz = u_xlat16_2.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness)) + u_xlat0.xzw;
    u_xlat0.xzw = u_xlat16_2.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
    u_xlat16_2.xyz = u_xlat16_6.xyz * u_xlat16_4.xyz + u_xlat0.xzw;
    u_xlat16_4.xyz = u_xlat16_6.xyz * _EmissionColor_MHY.xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * vec3(vec3(_EmissionScaler, _EmissionScaler, _EmissionScaler)) + (-u_xlat16_5.xyz);
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(vec3(_EmissionScaler, _EmissionScaler, _EmissionScaler)) + (-u_xlat16_2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(0.00999999978<u_xlat10_1.w);
#else
    u_xlatb0.x = 0.00999999978<u_xlat10_1.w;
#endif
    u_xlatb0.x = u_xlatb0.x && u_xlatb0.y;
    u_xlat16_26 = (u_xlatb0.x) ? u_xlat10_1.w : 0.0;
    u_xlat16_6.xyz = vec3(u_xlat16_26) * u_xlat16_6.xyz + u_xlat16_5.xyz;
    u_xlat16_5.xyz = (u_xlatb0.x) ? u_xlat16_6.xyz : u_xlat16_5.xyz;
    u_xlat8.xyz = u_xlat16_5.xyz * vec3(vec3(_ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness));
    u_xlat1.xyz = _ES_CharacterMainLightColor.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat1.xyz = vec3(vec3(_ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio)) * u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat8.xyz = u_xlat8.xyz * u_xlat1.xyz;
    u_xlat16_6.xyz = u_xlat8.xyz * vec3(10.0, 10.0, 10.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.xyz = min(max(u_xlat16_6.xyz, 0.0), 1.0);
#else
    u_xlat16_6.xyz = clamp(u_xlat16_6.xyz, 0.0, 1.0);
#endif
    u_xlat1.xyz = _ES_CharacterAmbientLightColor.xyz * vec3(_ES_CharacterAmbientLightRatio);
    u_xlat8.xyz = u_xlat1.xyz * u_xlat16_6.xyz + u_xlat8.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn));
#else
    u_xlatb1 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn);
#endif
    u_xlat16_6.xyz = (bool(u_xlatb1)) ? u_xlat8.xyz : u_xlat16_5.xyz;
    u_xlat16_7.xyz = u_xlat16_5.xyz + (-u_xlat16_6.xyz);
    u_xlat16_7.xyz = vec3(u_xlat16_26) * u_xlat16_7.xyz + u_xlat16_6.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.00999999978<u_xlat16_26);
#else
    u_xlatb8 = 0.00999999978<u_xlat16_26;
#endif
    u_xlat16_1.xyz = (bool(u_xlatb8)) ? u_xlat16_7.xyz : u_xlat16_6.xyz;
    u_xlat16_28 = max(u_xlat16_1.z, u_xlat16_1.y);
    u_xlat16_3.w = max(u_xlat16_1.x, u_xlat16_28);
    u_xlat16_3.xyz = u_xlat16_1.xyz / u_xlat16_3.www;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(1.0<u_xlat16_3.w);
#else
    u_xlatb16 = 1.0<u_xlat16_3.w;
#endif
    u_xlat16_1.w = 1.0;
    u_xlat16_1 = (bool(u_xlatb16)) ? u_xlat16_3 : u_xlat16_1;
    u_xlat16_28 = min(u_xlat16_1.w, 1.10000002);
    u_xlat16_29 = u_xlat16_1.w + (-u_xlat16_28);
    SV_Target1.xyz = u_xlat16_1.xyz;
    u_xlat16_28 = u_xlat16_26 * u_xlat16_29 + u_xlat16_28;
    SV_Target1.w = u_xlat16_28 * 0.0500000007;
    u_xlat16_4.xyz = vec3(u_xlat16_26) * u_xlat16_4.xyz + u_xlat16_2.xyz;
    u_xlat16_2.xyz = (u_xlatb0.x) ? u_xlat16_4.xyz : u_xlat16_2.xyz;
    u_xlat16_4.xyz = (-u_xlat16_2.xyz) + u_xlat16_5.xyz;
    u_xlat16_4.xyz = vec3(u_xlat16_26) * u_xlat16_4.xyz + u_xlat16_2.xyz;
    u_xlat16_2.xyz = (bool(u_xlatb8)) ? u_xlat16_4.xyz : u_xlat16_2.xyz;
    SV_Target2.xy = u_xlat16_2.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_2.x = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb0.x) ? u_xlat16_2.x : u_xlat16_2.z;
    SV_Target2.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "MSAA_INTERPOLATION" "TOON_LIGHTMAP_ON" "NORMAL_MAP_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
float u_xlat12;
void main()
{
    u_xlat0.x = hlslcc_mtx4x4unity_ObjectToWorld[0].y;
    u_xlat0.y = hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat0.z = hlslcc_mtx4x4unity_ObjectToWorld[2].y;
    u_xlat1.xyw = (-_WorldSpaceCameraPos.xyz) + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat0.w = u_xlat1.y;
    u_xlat2.xyz = in_POSITION0.xyz;
    u_xlat2.w = 1.0;
    u_xlat0.x = dot(u_xlat0, u_xlat2);
    u_xlat0 = u_xlat0.xxxx * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat3.w = u_xlat1.x;
    u_xlat3.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;
    u_xlat3.y = hlslcc_mtx4x4unity_ObjectToWorld[1].x;
    u_xlat3.z = hlslcc_mtx4x4unity_ObjectToWorld[2].x;
    u_xlat3.x = dot(u_xlat3, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat3.xxxx + u_xlat0;
    u_xlat1.x = hlslcc_mtx4x4unity_ObjectToWorld[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_ObjectToWorld[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_ObjectToWorld[2].z;
    u_xlat1.x = dot(u_xlat1, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat1.xxxx + u_xlat0;
    u_xlat1.x = hlslcc_mtx4x4unity_ObjectToWorld[0].w;
    u_xlat1.y = hlslcc_mtx4x4unity_ObjectToWorld[1].w;
    u_xlat1.z = hlslcc_mtx4x4unity_ObjectToWorld[2].w;
    u_xlat1.w = hlslcc_mtx4x4unity_ObjectToWorld[3].w;
    u_xlat1.x = dot(u_xlat1, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[3] * u_xlat1.xxxx + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD1 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.zw = u_xlat0.zw;
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD3.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
    u_xlat12 = in_TANGENT0.w * unity_WorldTransformParams.w;
    u_xlat2.xyz = vec3(u_xlat12) * u_xlat2.xyz;
    vs_TEXCOORD4.y = u_xlat2.x;
    vs_TEXCOORD4.x = u_xlat1.z;
    vs_TEXCOORD4.z = u_xlat0.y;
    vs_TEXCOORD5.x = u_xlat1.x;
    vs_TEXCOORD6.x = u_xlat1.y;
    vs_TEXCOORD5.z = u_xlat0.z;
    vs_TEXCOORD6.z = u_xlat0.x;
    vs_TEXCOORD5.y = u_xlat2.y;
    vs_TEXCOORD6.y = u_xlat2.z;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	mediump vec4 _Color;
uniform 	float _MainTexAlphaUse;
uniform 	mediump float _MainTexAlphaCutoff;
uniform 	mediump float _BumpScale;
uniform 	float _UseLightMapColorAO;
uniform 	float _UseVertexColorAO;
uniform 	mediump float _LightArea;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	float _UseCoolShadowColorOrTex;
uniform 	mediump vec3 _CoolShadowMultColor;
uniform 	float _UseShadowTransition;
uniform 	float _ShadowTransitionRange;
uniform 	float _ShadowTransitionSoftness;
uniform 	mediump vec3 _SpecularColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump float _EmissionScaler;
uniform 	mediump vec3 _EmissionColor_MHY;
uniform 	float _ES_CharacterAmbientLightOn;
uniform 	float _ES_CharacterAmbientBrightness;
uniform 	vec3 _ES_CharacterMainLightColor;
uniform 	float _ES_CharacterMainLightBrightness;
uniform 	vec3 _ES_CharacterAmbientLightColor;
uniform 	float _ES_CharacterMainLightRatio;
uniform 	float _ES_CharacterAmbientLightRatio;
uniform 	float _ES_CharacterColorTone;
uniform 	vec3 mhy_AvatarLightDir;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMapTex;
in mediump vec4 vs_COLOR0;
in highp vec2 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD5;
in highp vec3 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec3 u_xlat0;
mediump float u_xlat16_0;
lowp vec2 u_xlat10_0;
bvec4 u_xlatb0;
vec3 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
bool u_xlatb1;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump vec4 u_xlat16_3;
lowp vec4 u_xlat10_3;
bvec2 u_xlatb3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
vec3 u_xlat9;
mediump float u_xlat16_9;
bool u_xlatb9;
vec2 u_xlat18;
mediump float u_xlat16_18;
bool u_xlatb18;
bool u_xlatb27;
mediump float u_xlat16_29;
mediump float u_xlat16_32;
mediump float u_xlat16_33;
void main()
{
    u_xlat0.xy = dFdx(vs_TEXCOORD0.xy);
    u_xlat18.xy = dFdy(vs_TEXCOORD0.xy);
    u_xlat0.xy = u_xlat18.xy + u_xlat0.xy;
    u_xlat18.xy = (-u_xlat0.xy) * vec2(0.25, 0.25) + vs_TEXCOORD0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25) + vs_TEXCOORD0.xy;
    u_xlat0.xy = (int(gl_SampleID) != 0) ? u_xlat18.xy : u_xlat0.xy;
    u_xlat10_1 = textureLod(_MainTex, u_xlat0.xy, 0.0);
    u_xlat16_2.x = u_xlat10_1.w + (-_MainTexAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(u_xlat16_2.x<0.0);
#else
    u_xlatb18 = u_xlat16_2.x<0.0;
#endif
    u_xlatb3.xy = equal(vec4(_MainTexAlphaUse), vec4(1.0, 2.0, 0.0, 0.0)).xy;
    u_xlatb18 = u_xlatb18 && u_xlatb3.x;
    if((int(u_xlatb18) * int(0xffffffffu))!=0){discard;}
    u_xlat10_3.xzw = textureLod(_BumpMap, u_xlat0.xy, 0.0).xyz;
    u_xlat10_0.xy = textureLod(_LightMapTex, u_xlat0.xy, 0.0).xy;
    u_xlat16_2.xyz = u_xlat10_3.xzw * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_2.xy = u_xlat16_2.xy * vec2(vec2(_BumpScale, _BumpScale));
    u_xlat4.x = dot(vs_TEXCOORD4.xyz, u_xlat16_2.xyz);
    u_xlat4.y = dot(vs_TEXCOORD5.xyz, u_xlat16_2.xyz);
    u_xlat4.z = dot(vs_TEXCOORD6.xyz, u_xlat16_2.xyz);
    u_xlat16_2.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat16_2.x = inversesqrt(u_xlat16_2.x);
    u_xlat16_2.xyz = u_xlat16_2.xxx * u_xlat4.xyz;
    SV_Target0.xyz = u_xlat16_2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0470588244;
    u_xlat3.xzw = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat18.x = dot(u_xlat3.xzw, u_xlat3.xzw);
    u_xlat18.x = inversesqrt(u_xlat18.x);
    u_xlat3.xzw = u_xlat3.xzw * u_xlat18.xxx + mhy_AvatarLightDir.xyz;
    u_xlat18.x = dot(u_xlat3.xzw, u_xlat3.xzw);
    u_xlat18.x = inversesqrt(u_xlat18.x);
    u_xlat3.xzw = u_xlat18.xxx * u_xlat3.xzw;
    u_xlat16_29 = dot(u_xlat16_2.xyz, u_xlat3.xzw);
    u_xlat16_2.x = dot(u_xlat16_2.xyz, mhy_AvatarLightDir.xyz);
    u_xlat16_18 = u_xlat16_2.x * 0.497500002 + 0.5;
    u_xlat16_2.x = max(u_xlat16_29, 0.00100000005);
    u_xlat16_2.x = log2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * _Shininess;
    u_xlat16_2.x = exp2(u_xlat16_2.x);
    u_xlat16_2.xyz = u_xlat16_2.xxx * _SpecularColor.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(_SpecMulti);
    u_xlat16_2.xyz = u_xlat10_0.xxx * u_xlat16_2.xyz;
    u_xlatb0.xw = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseLightMapColorAO, _UseLightMapColorAO, _UseLightMapColorAO, _UseVertexColorAO)).xw;
    u_xlat16_29 = (u_xlatb0.x) ? u_xlat10_0.y : 0.5;
    u_xlat16_5.x = u_xlat16_29 * vs_COLOR0.x;
    u_xlat16_29 = (u_xlatb0.w) ? u_xlat16_5.x : u_xlat16_29;
    u_xlat16_0 = u_xlat16_18 + u_xlat16_29;
    u_xlat0.x = u_xlat16_0 * 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(0.949999988<u_xlat16_29);
#else
    u_xlatb9 = 0.949999988<u_xlat16_29;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(u_xlat16_29<0.0500000007);
#else
    u_xlatb18 = u_xlat16_29<0.0500000007;
#endif
    u_xlat16_29 = (u_xlatb9) ? 1.0 : u_xlat0.x;
    u_xlat16_29 = (u_xlatb18) ? 0.0 : u_xlat16_29;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(u_xlat16_29<_LightArea);
#else
    u_xlatb0.x = u_xlat16_29<_LightArea;
#endif
    u_xlat16_29 = (-u_xlat16_29) + _LightArea;
    u_xlat16_29 = u_xlat16_29 / _ShadowTransitionRange;
    u_xlat16_9 = u_xlat16_29 + 0.00999999978;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(u_xlat16_29>=1.0);
#else
    u_xlatb18 = u_xlat16_29>=1.0;
#endif
    u_xlat16_9 = log2(u_xlat16_9);
    u_xlat9.x = u_xlat16_9 * _ShadowTransitionSoftness;
    u_xlat9.x = exp2(u_xlat9.x);
    u_xlat9.x = min(u_xlat9.x, 1.0);
    u_xlat9.x = (u_xlatb18) ? 1.0 : u_xlat9.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition));
#else
    u_xlatb18 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition);
#endif
    u_xlat9.x = (u_xlatb18) ? u_xlat9.x : 1.0;
    u_xlat9.x = u_xlatb0.x ? u_xlat9.x : float(0.0);
    u_xlat16_3.xzw = vec3(_FirstShadowMultColor.xxyz.y + (-_CoolShadowMultColor.x), _FirstShadowMultColor.xxyz.z + (-_CoolShadowMultColor.y), float(_FirstShadowMultColor.z) + (-_CoolShadowMultColor.z));
    u_xlat3.xzw = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_3.xzw + _CoolShadowMultColor.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex));
#else
    u_xlatb27 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex);
#endif
    u_xlat16_5.xyz = (bool(u_xlatb27)) ? u_xlat3.xzw : vec3(_FirstShadowMultColor.x, _FirstShadowMultColor.y, _FirstShadowMultColor.z);
    u_xlat16_3.xzw = u_xlat16_5.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat3.xzw = u_xlat9.xxx * u_xlat16_3.xzw + vec3(1.0, 1.0, 1.0);
    u_xlat16_6.xyz = (bool(u_xlatb18)) ? u_xlat3.xzw : u_xlat16_5.xyz;
    u_xlat16_7.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_7.xyz;
    u_xlat9.xyz = u_xlat16_7.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
    u_xlat0.xyz = (u_xlatb0.x) ? u_xlat16_6.xyz : u_xlat9.xyz;
    u_xlat16_6.xyz = u_xlat16_2.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness)) + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat16_2.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
    u_xlat16_2.xyz = u_xlat16_7.xyz * u_xlat16_5.xyz + u_xlat0.xyz;
    u_xlat16_5.xyz = u_xlat16_7.xyz * _EmissionColor_MHY.xyz;
    u_xlat16_7.xyz = u_xlat16_5.xyz * vec3(vec3(_EmissionScaler, _EmissionScaler, _EmissionScaler)) + (-u_xlat16_6.xyz);
    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(vec3(_EmissionScaler, _EmissionScaler, _EmissionScaler)) + (-u_xlat16_2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(0.00999999978<u_xlat10_1.w);
#else
    u_xlatb0.x = 0.00999999978<u_xlat10_1.w;
#endif
    u_xlatb0.x = u_xlatb0.x && u_xlatb3.y;
    u_xlat16_29 = (u_xlatb0.x) ? u_xlat10_1.w : 0.0;
    u_xlat16_7.xyz = vec3(u_xlat16_29) * u_xlat16_7.xyz + u_xlat16_6.xyz;
    u_xlat16_6.xyz = (u_xlatb0.x) ? u_xlat16_7.xyz : u_xlat16_6.xyz;
    u_xlat9.xyz = u_xlat16_6.xyz * vec3(vec3(_ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness));
    u_xlat1.xyz = _ES_CharacterMainLightColor.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat1.xyz = vec3(vec3(_ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio)) * u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat9.xyz = u_xlat9.xyz * u_xlat1.xyz;
    u_xlat16_7.xyz = u_xlat9.xyz * vec3(10.0, 10.0, 10.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.xyz = min(max(u_xlat16_7.xyz, 0.0), 1.0);
#else
    u_xlat16_7.xyz = clamp(u_xlat16_7.xyz, 0.0, 1.0);
#endif
    u_xlat1.xyz = _ES_CharacterAmbientLightColor.xyz * vec3(_ES_CharacterAmbientLightRatio);
    u_xlat9.xyz = u_xlat1.xyz * u_xlat16_7.xyz + u_xlat9.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn));
#else
    u_xlatb1 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn);
#endif
    u_xlat16_7.xyz = (bool(u_xlatb1)) ? u_xlat9.xyz : u_xlat16_6.xyz;
    u_xlat16_8.xyz = u_xlat16_6.xyz + (-u_xlat16_7.xyz);
    u_xlat16_8.xyz = vec3(u_xlat16_29) * u_xlat16_8.xyz + u_xlat16_7.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(0.00999999978<u_xlat16_29);
#else
    u_xlatb9 = 0.00999999978<u_xlat16_29;
#endif
    u_xlat16_1.xyz = (bool(u_xlatb9)) ? u_xlat16_8.xyz : u_xlat16_7.xyz;
    u_xlat16_32 = max(u_xlat16_1.z, u_xlat16_1.y);
    u_xlat16_3.w = max(u_xlat16_1.x, u_xlat16_32);
    u_xlat16_3.xyz = u_xlat16_1.xyz / u_xlat16_3.www;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(1.0<u_xlat16_3.w);
#else
    u_xlatb18 = 1.0<u_xlat16_3.w;
#endif
    u_xlat16_1.w = 1.0;
    u_xlat16_1 = (bool(u_xlatb18)) ? u_xlat16_3 : u_xlat16_1;
    u_xlat16_32 = min(u_xlat16_1.w, 1.10000002);
    u_xlat16_33 = u_xlat16_1.w + (-u_xlat16_32);
    SV_Target1.xyz = u_xlat16_1.xyz;
    u_xlat16_32 = u_xlat16_29 * u_xlat16_33 + u_xlat16_32;
    SV_Target1.w = u_xlat16_32 * 0.0500000007;
    u_xlat16_5.xyz = vec3(u_xlat16_29) * u_xlat16_5.xyz + u_xlat16_2.xyz;
    u_xlat16_2.xyz = (u_xlatb0.x) ? u_xlat16_5.xyz : u_xlat16_2.xyz;
    u_xlat16_5.xyz = (-u_xlat16_2.xyz) + u_xlat16_6.xyz;
    u_xlat16_5.xyz = vec3(u_xlat16_29) * u_xlat16_5.xyz + u_xlat16_2.xyz;
    u_xlat16_2.xyz = (bool(u_xlatb9)) ? u_xlat16_5.xyz : u_xlat16_2.xyz;
    SV_Target2.xy = u_xlat16_2.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_2.x = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb0.x) ? u_xlat16_2.x : u_xlat16_2.z;
    SV_Target2.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "LINE_INTERPOLATION" "TOON_LIGHTMAP_ON" "NORMAL_MAP_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
float u_xlat12;
void main()
{
    u_xlat0.x = hlslcc_mtx4x4unity_ObjectToWorld[0].y;
    u_xlat0.y = hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat0.z = hlslcc_mtx4x4unity_ObjectToWorld[2].y;
    u_xlat1.xyw = (-_WorldSpaceCameraPos.xyz) + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat0.w = u_xlat1.y;
    u_xlat2.xyz = in_POSITION0.xyz;
    u_xlat2.w = 1.0;
    u_xlat0.x = dot(u_xlat0, u_xlat2);
    u_xlat0 = u_xlat0.xxxx * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat3.w = u_xlat1.x;
    u_xlat3.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;
    u_xlat3.y = hlslcc_mtx4x4unity_ObjectToWorld[1].x;
    u_xlat3.z = hlslcc_mtx4x4unity_ObjectToWorld[2].x;
    u_xlat3.x = dot(u_xlat3, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat3.xxxx + u_xlat0;
    u_xlat1.x = hlslcc_mtx4x4unity_ObjectToWorld[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_ObjectToWorld[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_ObjectToWorld[2].z;
    u_xlat1.x = dot(u_xlat1, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat1.xxxx + u_xlat0;
    u_xlat1.x = hlslcc_mtx4x4unity_ObjectToWorld[0].w;
    u_xlat1.y = hlslcc_mtx4x4unity_ObjectToWorld[1].w;
    u_xlat1.z = hlslcc_mtx4x4unity_ObjectToWorld[2].w;
    u_xlat1.w = hlslcc_mtx4x4unity_ObjectToWorld[3].w;
    u_xlat1.x = dot(u_xlat1, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[3] * u_xlat1.xxxx + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD1 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.zw = u_xlat0.zw;
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD3.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
    u_xlat12 = in_TANGENT0.w * unity_WorldTransformParams.w;
    u_xlat2.xyz = vec3(u_xlat12) * u_xlat2.xyz;
    vs_TEXCOORD4.y = u_xlat2.x;
    vs_TEXCOORD4.x = u_xlat1.z;
    vs_TEXCOORD4.z = u_xlat0.y;
    vs_TEXCOORD5.x = u_xlat1.x;
    vs_TEXCOORD6.x = u_xlat1.y;
    vs_TEXCOORD5.z = u_xlat0.z;
    vs_TEXCOORD6.z = u_xlat0.x;
    vs_TEXCOORD5.y = u_xlat2.y;
    vs_TEXCOORD6.y = u_xlat2.z;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	mediump vec4 _Color;
uniform 	float _MainTexAlphaUse;
uniform 	mediump float _MainTexAlphaCutoff;
uniform 	mediump float _BumpScale;
uniform 	float _UseLightMapColorAO;
uniform 	float _UseVertexColorAO;
uniform 	mediump float _LightArea;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	float _UseCoolShadowColorOrTex;
uniform 	mediump vec3 _CoolShadowMultColor;
uniform 	float _UseShadowTransition;
uniform 	float _ShadowTransitionRange;
uniform 	float _ShadowTransitionSoftness;
uniform 	mediump vec3 _SpecularColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump float _EmissionScaler;
uniform 	mediump vec3 _EmissionColor_MHY;
uniform 	float _ES_CharacterAmbientLightOn;
uniform 	float _ES_CharacterAmbientBrightness;
uniform 	vec3 _ES_CharacterMainLightColor;
uniform 	float _ES_CharacterMainLightBrightness;
uniform 	vec3 _ES_CharacterAmbientLightColor;
uniform 	float _ES_CharacterMainLightRatio;
uniform 	float _ES_CharacterAmbientLightRatio;
uniform 	float _ES_CharacterColorTone;
uniform 	vec3 mhy_AvatarLightDir;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMapTex;
in mediump vec4 vs_COLOR0;
in highp vec2 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD5;
in highp vec3 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec4 u_xlat0;
mediump float u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
vec3 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
bool u_xlatb1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump vec4 u_xlat16_3;
bvec2 u_xlatb3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
bool u_xlatb8;
float u_xlat16;
mediump float u_xlat16_16;
lowp vec2 u_xlat10_16;
bool u_xlatb16;
bool u_xlatb24;
mediump float u_xlat16_26;
bool u_xlatb27;
mediump float u_xlat16_28;
mediump float u_xlat16_29;
void main()
{
    u_xlatb0.xy = equal(vec4(_MainTexAlphaUse), vec4(1.0, 2.0, 0.0, 0.0)).xy;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy, -1.0);
    u_xlat16_2.x = u_xlat10_1.w + (-_MainTexAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(u_xlat16_2.x<0.0);
#else
    u_xlatb16 = u_xlat16_2.x<0.0;
#endif
    u_xlatb0.x = u_xlatb0.x && u_xlatb16;
    if((int(u_xlatb0.x) * int(0xffffffffu))!=0){discard;}
    u_xlat10_0.xzw = texture(_BumpMap, vs_TEXCOORD0.xy, -1.0).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xzw * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_2.xy = u_xlat16_2.xy * vec2(vec2(_BumpScale, _BumpScale));
    u_xlat3.x = dot(vs_TEXCOORD4.xyz, u_xlat16_2.xyz);
    u_xlat3.y = dot(vs_TEXCOORD5.xyz, u_xlat16_2.xyz);
    u_xlat3.z = dot(vs_TEXCOORD6.xyz, u_xlat16_2.xyz);
    u_xlat16_2.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat16_2.x = inversesqrt(u_xlat16_2.x);
    u_xlat16_2.xyz = u_xlat16_2.xxx * u_xlat3.xyz;
    SV_Target0.xyz = u_xlat16_2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0470588244;
    u_xlat0.xzw = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat0.xzw = u_xlat0.xzw * u_xlat3.xxx + mhy_AvatarLightDir.xyz;
    u_xlat3.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat0.xzw = u_xlat0.xzw * u_xlat3.xxx;
    u_xlat16_26 = dot(u_xlat16_2.xyz, u_xlat0.xzw);
    u_xlat16_2.x = dot(u_xlat16_2.xyz, mhy_AvatarLightDir.xyz);
    u_xlat16_0 = u_xlat16_2.x * 0.497500002 + 0.5;
    u_xlat16_2.x = max(u_xlat16_26, 0.00100000005);
    u_xlat16_2.x = log2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * _Shininess;
    u_xlat16_2.x = exp2(u_xlat16_2.x);
    u_xlat16_2.xyz = u_xlat16_2.xxx * _SpecularColor.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(_SpecMulti);
    u_xlat10_16.xy = texture(_LightMapTex, vs_TEXCOORD0.xy, -1.0).xy;
    u_xlat16_2.xyz = u_xlat10_16.xxx * u_xlat16_2.xyz;
    u_xlatb3.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseLightMapColorAO, _UseVertexColorAO, _UseLightMapColorAO, _UseLightMapColorAO)).xy;
    u_xlat16_26 = (u_xlatb3.x) ? u_xlat10_16.y : 0.5;
    u_xlat16_4.x = u_xlat16_26 * vs_COLOR0.x;
    u_xlat16_26 = (u_xlatb3.y) ? u_xlat16_4.x : u_xlat16_26;
    u_xlat16_0 = u_xlat16_0 + u_xlat16_26;
    u_xlat0.x = u_xlat16_0 * 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(0.949999988<u_xlat16_26);
#else
    u_xlatb16 = 0.949999988<u_xlat16_26;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(u_xlat16_26<0.0500000007);
#else
    u_xlatb24 = u_xlat16_26<0.0500000007;
#endif
    u_xlat16_26 = (u_xlatb16) ? 1.0 : u_xlat0.x;
    u_xlat16_26 = (u_xlatb24) ? 0.0 : u_xlat16_26;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(u_xlat16_26<_LightArea);
#else
    u_xlatb0.x = u_xlat16_26<_LightArea;
#endif
    u_xlat16_26 = (-u_xlat16_26) + _LightArea;
    u_xlat16_26 = u_xlat16_26 / _ShadowTransitionRange;
    u_xlat16_16 = u_xlat16_26 + 0.00999999978;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(u_xlat16_26>=1.0);
#else
    u_xlatb24 = u_xlat16_26>=1.0;
#endif
    u_xlat16_16 = log2(u_xlat16_16);
    u_xlat16 = u_xlat16_16 * _ShadowTransitionSoftness;
    u_xlat16 = exp2(u_xlat16);
    u_xlat16 = min(u_xlat16, 1.0);
    u_xlat16 = (u_xlatb24) ? 1.0 : u_xlat16;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition));
#else
    u_xlatb24 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition);
#endif
    u_xlat16 = (u_xlatb24) ? u_xlat16 : 1.0;
    u_xlat16 = u_xlatb0.x ? u_xlat16 : float(0.0);
    u_xlat16_3.xyz = vec3(_FirstShadowMultColor.xxyz.y + (-_CoolShadowMultColor.x), _FirstShadowMultColor.xxyz.z + (-_CoolShadowMultColor.y), float(_FirstShadowMultColor.z) + (-_CoolShadowMultColor.z));
    u_xlat3.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_3.xyz + _CoolShadowMultColor.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex));
#else
    u_xlatb27 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex);
#endif
    u_xlat16_4.xyz = (bool(u_xlatb27)) ? u_xlat3.xyz : vec3(_FirstShadowMultColor.x, _FirstShadowMultColor.y, _FirstShadowMultColor.z);
    u_xlat16_3.xyz = u_xlat16_4.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat3.xyz = vec3(u_xlat16) * u_xlat16_3.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_5.xyz = (bool(u_xlatb24)) ? u_xlat3.xyz : u_xlat16_4.xyz;
    u_xlat16_6.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_6.xyz;
    u_xlat1.xyz = u_xlat16_6.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
    u_xlat0.xzw = (u_xlatb0.x) ? u_xlat16_5.xyz : u_xlat1.xyz;
    u_xlat16_5.xyz = u_xlat16_2.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness)) + u_xlat0.xzw;
    u_xlat0.xzw = u_xlat16_2.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
    u_xlat16_2.xyz = u_xlat16_6.xyz * u_xlat16_4.xyz + u_xlat0.xzw;
    u_xlat16_4.xyz = u_xlat16_6.xyz * _EmissionColor_MHY.xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * vec3(vec3(_EmissionScaler, _EmissionScaler, _EmissionScaler)) + (-u_xlat16_5.xyz);
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(vec3(_EmissionScaler, _EmissionScaler, _EmissionScaler)) + (-u_xlat16_2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(0.00999999978<u_xlat10_1.w);
#else
    u_xlatb0.x = 0.00999999978<u_xlat10_1.w;
#endif
    u_xlatb0.x = u_xlatb0.x && u_xlatb0.y;
    u_xlat16_26 = (u_xlatb0.x) ? u_xlat10_1.w : 0.0;
    u_xlat16_6.xyz = vec3(u_xlat16_26) * u_xlat16_6.xyz + u_xlat16_5.xyz;
    u_xlat16_5.xyz = (u_xlatb0.x) ? u_xlat16_6.xyz : u_xlat16_5.xyz;
    u_xlat8.xyz = u_xlat16_5.xyz * vec3(vec3(_ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness));
    u_xlat1.xyz = _ES_CharacterMainLightColor.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat1.xyz = vec3(vec3(_ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio)) * u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat8.xyz = u_xlat8.xyz * u_xlat1.xyz;
    u_xlat16_6.xyz = u_xlat8.xyz * vec3(10.0, 10.0, 10.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.xyz = min(max(u_xlat16_6.xyz, 0.0), 1.0);
#else
    u_xlat16_6.xyz = clamp(u_xlat16_6.xyz, 0.0, 1.0);
#endif
    u_xlat1.xyz = _ES_CharacterAmbientLightColor.xyz * vec3(_ES_CharacterAmbientLightRatio);
    u_xlat8.xyz = u_xlat1.xyz * u_xlat16_6.xyz + u_xlat8.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn));
#else
    u_xlatb1 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn);
#endif
    u_xlat16_6.xyz = (bool(u_xlatb1)) ? u_xlat8.xyz : u_xlat16_5.xyz;
    u_xlat16_7.xyz = u_xlat16_5.xyz + (-u_xlat16_6.xyz);
    u_xlat16_7.xyz = vec3(u_xlat16_26) * u_xlat16_7.xyz + u_xlat16_6.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.00999999978<u_xlat16_26);
#else
    u_xlatb8 = 0.00999999978<u_xlat16_26;
#endif
    u_xlat16_1.xyz = (bool(u_xlatb8)) ? u_xlat16_7.xyz : u_xlat16_6.xyz;
    u_xlat16_28 = max(u_xlat16_1.z, u_xlat16_1.y);
    u_xlat16_3.w = max(u_xlat16_1.x, u_xlat16_28);
    u_xlat16_3.xyz = u_xlat16_1.xyz / u_xlat16_3.www;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(1.0<u_xlat16_3.w);
#else
    u_xlatb16 = 1.0<u_xlat16_3.w;
#endif
    u_xlat16_1.w = 1.0;
    u_xlat16_1 = (bool(u_xlatb16)) ? u_xlat16_3 : u_xlat16_1;
    u_xlat16_28 = min(u_xlat16_1.w, 1.10000002);
    u_xlat16_29 = u_xlat16_1.w + (-u_xlat16_28);
    SV_Target1.xyz = u_xlat16_1.xyz;
    u_xlat16_28 = u_xlat16_26 * u_xlat16_29 + u_xlat16_28;
    SV_Target1.w = u_xlat16_28 * 0.0500000007;
    u_xlat16_4.xyz = vec3(u_xlat16_26) * u_xlat16_4.xyz + u_xlat16_2.xyz;
    u_xlat16_2.xyz = (u_xlatb0.x) ? u_xlat16_4.xyz : u_xlat16_2.xyz;
    u_xlat16_4.xyz = (-u_xlat16_2.xyz) + u_xlat16_5.xyz;
    u_xlat16_4.xyz = vec3(u_xlat16_26) * u_xlat16_4.xyz + u_xlat16_2.xyz;
    u_xlat16_2.xyz = (bool(u_xlatb8)) ? u_xlat16_4.xyz : u_xlat16_2.xyz;
    SV_Target2.xy = u_xlat16_2.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_2.x = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb0.x) ? u_xlat16_2.x : u_xlat16_2.z;
    SV_Target2.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "TOON_LIGHTMAP_ON" "METAL_MAT" "NORMAL_MAP_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
float u_xlat12;
void main()
{
    u_xlat0.x = hlslcc_mtx4x4unity_ObjectToWorld[0].y;
    u_xlat0.y = hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat0.z = hlslcc_mtx4x4unity_ObjectToWorld[2].y;
    u_xlat1.xyw = (-_WorldSpaceCameraPos.xyz) + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat0.w = u_xlat1.y;
    u_xlat2.xyz = in_POSITION0.xyz;
    u_xlat2.w = 1.0;
    u_xlat0.x = dot(u_xlat0, u_xlat2);
    u_xlat0 = u_xlat0.xxxx * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat3.w = u_xlat1.x;
    u_xlat3.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;
    u_xlat3.y = hlslcc_mtx4x4unity_ObjectToWorld[1].x;
    u_xlat3.z = hlslcc_mtx4x4unity_ObjectToWorld[2].x;
    u_xlat3.x = dot(u_xlat3, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat3.xxxx + u_xlat0;
    u_xlat1.x = hlslcc_mtx4x4unity_ObjectToWorld[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_ObjectToWorld[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_ObjectToWorld[2].z;
    u_xlat1.x = dot(u_xlat1, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat1.xxxx + u_xlat0;
    u_xlat1.x = hlslcc_mtx4x4unity_ObjectToWorld[0].w;
    u_xlat1.y = hlslcc_mtx4x4unity_ObjectToWorld[1].w;
    u_xlat1.z = hlslcc_mtx4x4unity_ObjectToWorld[2].w;
    u_xlat1.w = hlslcc_mtx4x4unity_ObjectToWorld[3].w;
    u_xlat1.x = dot(u_xlat1, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[3] * u_xlat1.xxxx + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD1 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.zw = u_xlat0.zw;
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD3.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
    u_xlat12 = in_TANGENT0.w * unity_WorldTransformParams.w;
    u_xlat2.xyz = vec3(u_xlat12) * u_xlat2.xyz;
    vs_TEXCOORD4.y = u_xlat2.x;
    vs_TEXCOORD4.x = u_xlat1.z;
    vs_TEXCOORD4.z = u_xlat0.y;
    vs_TEXCOORD5.x = u_xlat1.x;
    vs_TEXCOORD6.x = u_xlat1.y;
    vs_TEXCOORD5.z = u_xlat0.z;
    vs_TEXCOORD6.z = u_xlat0.x;
    vs_TEXCOORD5.y = u_xlat2.y;
    vs_TEXCOORD6.y = u_xlat2.z;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToCamera[4];
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	mediump vec4 _Color;
uniform 	float _MainTexAlphaUse;
uniform 	mediump float _MainTexAlphaCutoff;
uniform 	mediump float _BumpScale;
uniform 	float _UseLightMapColorAO;
uniform 	float _UseVertexColorAO;
uniform 	mediump float _LightArea;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	float _UseCoolShadowColorOrTex;
uniform 	mediump vec3 _CoolShadowMultColor;
uniform 	float _UseShadowTransition;
uniform 	float _ShadowTransitionRange;
uniform 	float _ShadowTransitionSoftness;
uniform 	mediump vec3 _SpecularColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump float _EmissionScaler;
uniform 	mediump vec3 _EmissionColor_MHY;
uniform 	mediump float _MTMapBrightness;
uniform 	float _MTMapTileScale;
uniform 	mediump vec3 _MTMapLightColor;
uniform 	mediump vec3 _MTMapDarkColor;
uniform 	mediump vec3 _MTShadowMultiColor;
uniform 	mediump float _MTShininess;
uniform 	mediump vec3 _MTSpecularColor;
uniform 	mediump float _MTSpecularScale;
uniform 	float _ES_CharacterAmbientLightOn;
uniform 	float _ES_CharacterAmbientBrightness;
uniform 	vec3 _ES_CharacterMainLightColor;
uniform 	float _ES_CharacterMainLightBrightness;
uniform 	vec3 _ES_CharacterAmbientLightColor;
uniform 	float _ES_CharacterMainLightRatio;
uniform 	float _ES_CharacterAmbientLightRatio;
uniform 	float _ES_CharacterColorTone;
uniform 	vec3 mhy_AvatarLightDir;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MTMap;
in mediump vec4 vs_COLOR0;
in highp vec2 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD5;
in highp vec3 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec3 u_xlat10_0;
mediump vec3 u_xlat16_1;
float u_xlat2;
mediump vec4 u_xlat16_2;
lowp vec4 u_xlat10_2;
bool u_xlatb2;
lowp vec4 u_xlat10_3;
bvec2 u_xlatb3;
vec3 u_xlat4;
mediump vec3 u_xlat16_4;
bvec2 u_xlatb4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
vec3 u_xlat10;
mediump vec3 u_xlat16_10;
bool u_xlatb10;
vec3 u_xlat11;
vec3 u_xlat14;
bool u_xlatb14;
vec3 u_xlat15;
mediump vec3 u_xlat16_15;
float u_xlat26;
bool u_xlatb26;
float u_xlat36;
bool u_xlatb36;
mediump float u_xlat16_37;
float u_xlat38;
mediump float u_xlat16_38;
lowp float u_xlat10_38;
bool u_xlatb38;
mediump float u_xlat16_41;
void main()
{
    u_xlat10_0.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_1.xy = u_xlat16_1.xy * vec2(vec2(_BumpScale, _BumpScale));
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, u_xlat16_1.xyz);
    u_xlat0.y = dot(vs_TEXCOORD5.xyz, u_xlat16_1.xyz);
    u_xlat0.z = dot(vs_TEXCOORD6.xyz, u_xlat16_1.xyz);
    u_xlat16_1.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat16_1.x = inversesqrt(u_xlat16_1.x);
    u_xlat16_1.xyz = u_xlat0.xyz * u_xlat16_1.xxx;
    u_xlat0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat36 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat36 = inversesqrt(u_xlat36);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat36) + mhy_AvatarLightDir.xyz;
    u_xlat36 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat36 = inversesqrt(u_xlat36);
    u_xlat0.xyz = vec3(u_xlat36) * u_xlat0.xyz;
    u_xlat10_2 = texture(_MainTex, vs_TEXCOORD0.xy, -1.0);
    u_xlatb3.xy = equal(vec4(_MainTexAlphaUse), vec4(1.0, 2.0, 0.0, 0.0)).xy;
    u_xlat16_37 = u_xlat10_2.w + (-_MainTexAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb36 = !!(u_xlat16_37<0.0);
#else
    u_xlatb36 = u_xlat16_37<0.0;
#endif
    u_xlatb36 = u_xlatb3.x && u_xlatb36;
    if((int(u_xlatb36) * int(0xffffffffu))!=0){discard;}
    u_xlat10_3.xzw = texture(_LightMapTex, vs_TEXCOORD0.xy, -1.0).xyz;
    u_xlatb4.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseLightMapColorAO, _UseVertexColorAO, _UseLightMapColorAO, _UseLightMapColorAO)).xy;
    u_xlat16_37 = (u_xlatb4.x) ? u_xlat10_3.z : 0.5;
    u_xlat16_5.xyz = u_xlat10_2.xyz * _Color.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb36 = !!(0.00999999978<u_xlat10_2.w);
#else
    u_xlatb36 = 0.00999999978<u_xlat10_2.w;
#endif
    u_xlatb36 = u_xlatb36 && u_xlatb3.y;
    u_xlat16_41 = (u_xlatb36) ? u_xlat10_2.w : 0.0;
    u_xlat16_6.x = dot(u_xlat16_1.xyz, mhy_AvatarLightDir.xyz);
    u_xlat16_2.x = u_xlat16_6.x * 0.497500002 + 0.5;
    u_xlat16_6.x = u_xlat16_37 * vs_COLOR0.x;
    u_xlat16_37 = (u_xlatb4.y) ? u_xlat16_6.x : u_xlat16_37;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(u_xlat16_37<0.0500000007);
#else
    u_xlatb14 = u_xlat16_37<0.0500000007;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb26 = !!(0.949999988<u_xlat16_37);
#else
    u_xlatb26 = 0.949999988<u_xlat16_37;
#endif
    u_xlat16_2.x = u_xlat16_37 + u_xlat16_2.x;
    u_xlat2 = u_xlat16_2.x * 0.5;
    u_xlat16_37 = (u_xlatb26) ? 1.0 : u_xlat2;
    u_xlat16_37 = (u_xlatb14) ? 0.0 : u_xlat16_37;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat16_37<_LightArea);
#else
    u_xlatb2 = u_xlat16_37<_LightArea;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition));
#else
    u_xlatb14 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition);
#endif
    u_xlat16_37 = (-u_xlat16_37) + _LightArea;
    u_xlat16_37 = u_xlat16_37 / _ShadowTransitionRange;
#ifdef UNITY_ADRENO_ES3
    u_xlatb26 = !!(u_xlat16_37>=1.0);
#else
    u_xlatb26 = u_xlat16_37>=1.0;
#endif
    u_xlat16_38 = u_xlat16_37 + 0.00999999978;
    u_xlat16_38 = log2(u_xlat16_38);
    u_xlat38 = u_xlat16_38 * _ShadowTransitionSoftness;
    u_xlat38 = exp2(u_xlat38);
    u_xlat38 = min(u_xlat38, 1.0);
    u_xlat26 = (u_xlatb26) ? 1.0 : u_xlat38;
    u_xlat26 = (u_xlatb14) ? u_xlat26 : 1.0;
    u_xlat26 = u_xlatb2 ? u_xlat26 : float(0.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb38 = !!(0.899999976<u_xlat10_3.x);
#else
    u_xlatb38 = 0.899999976<u_xlat10_3.x;
#endif
    if(u_xlatb38){
        u_xlat15.xy = u_xlat16_1.yy * hlslcc_mtx4x4unity_WorldToCamera[1].xy;
        u_xlat15.xy = hlslcc_mtx4x4unity_WorldToCamera[0].xy * u_xlat16_1.xx + u_xlat15.xy;
        u_xlat4.yz = hlslcc_mtx4x4unity_WorldToCamera[2].xy * u_xlat16_1.zz + u_xlat15.xy;
        u_xlat4.x = u_xlat4.y * _MTMapTileScale;
        u_xlat16_6.xy = u_xlat4.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
        u_xlat10_38 = texture(_MTMap, u_xlat16_6.xy).x;
        u_xlat16_37 = u_xlat10_38 * _MTMapBrightness;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_37 = min(max(u_xlat16_37, 0.0), 1.0);
#else
        u_xlat16_37 = clamp(u_xlat16_37, 0.0, 1.0);
#endif
        u_xlat16_6.xyz = _MTMapLightColor.xyz + (-_MTMapDarkColor.xyz);
        u_xlat16_6.xyz = vec3(u_xlat16_37) * u_xlat16_6.xyz + _MTMapDarkColor.xyz;
        u_xlat16_6.xyz = u_xlat16_5.xyz * u_xlat16_6.xyz;
        u_xlat16_37 = dot(u_xlat16_1.xyz, u_xlat0.xyz);
        u_xlat16_37 = max(u_xlat16_37, 0.00100000005);
        u_xlat16_37 = log2(u_xlat16_37);
        u_xlat16_37 = u_xlat16_37 * _MTShininess;
        u_xlat16_37 = exp2(u_xlat16_37);
        u_xlat16_37 = u_xlat16_37 * _MTSpecularScale;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_37 = min(max(u_xlat16_37, 0.0), 1.0);
#else
        u_xlat16_37 = clamp(u_xlat16_37, 0.0, 1.0);
#endif
        u_xlat16_7.xyz = vec3(u_xlat16_37) * _MTSpecularColor.xyz;
        u_xlat16_7.xyz = u_xlat10_3.www * u_xlat16_7.xyz;
        u_xlat16_8.xyz = u_xlat16_6.xyz * _MTShadowMultiColor.xyz;
        u_xlat16_15.xyz = _MTShadowMultiColor.xyz + vec3(-1.0, -1.0, -1.0);
        u_xlat15.xyz = vec3(u_xlat26) * u_xlat16_15.xyz + vec3(1.0, 1.0, 1.0);
        u_xlat16_9.xyz = (bool(u_xlatb14)) ? u_xlat15.xyz : _MTShadowMultiColor.xyz;
        u_xlat16_9.xyz = u_xlat16_6.xyz * u_xlat16_9.xyz;
        u_xlat15.xyz = u_xlat16_6.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
        u_xlat15.xyz = (bool(u_xlatb2)) ? u_xlat16_9.xyz : u_xlat15.xyz;
        u_xlat4.xyz = u_xlat16_7.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
        u_xlat16_15.xyz = u_xlat15.xyz;
        u_xlat16_4.xyz = u_xlat4.xyz;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb38 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex));
#else
        u_xlatb38 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex);
#endif
        u_xlat16_10.xyz = vec3(_FirstShadowMultColor.xxyz.y + (-_CoolShadowMultColor.x), _FirstShadowMultColor.xxyz.z + (-_CoolShadowMultColor.y), float(_FirstShadowMultColor.z) + (-_CoolShadowMultColor.z));
        u_xlat10.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_10.xyz + _CoolShadowMultColor.xyz;
        u_xlat16_6.xyz = (bool(u_xlatb38)) ? u_xlat10.xyz : vec3(_FirstShadowMultColor.x, _FirstShadowMultColor.y, _FirstShadowMultColor.z);
        u_xlat16_8.xyz = u_xlat16_5.xyz * u_xlat16_6.xyz;
        u_xlat16_10.xyz = u_xlat16_6.xyz + vec3(-1.0, -1.0, -1.0);
        u_xlat10.xyz = vec3(u_xlat26) * u_xlat16_10.xyz + vec3(1.0, 1.0, 1.0);
        u_xlat16_6.xyz = (bool(u_xlatb14)) ? u_xlat10.xyz : u_xlat16_6.xyz;
        u_xlat16_6.xyz = u_xlat16_5.xyz * u_xlat16_6.xyz;
        u_xlat14.xyz = u_xlat16_5.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
        u_xlat15.xyz = (bool(u_xlatb2)) ? u_xlat16_6.xyz : u_xlat14.xyz;
        u_xlat16_37 = dot(u_xlat16_1.xyz, u_xlat0.xyz);
        u_xlat16_37 = max(u_xlat16_37, 0.00100000005);
        u_xlat16_37 = log2(u_xlat16_37);
        u_xlat16_37 = u_xlat16_37 * _Shininess;
        u_xlat16_37 = exp2(u_xlat16_37);
        u_xlat16_6.xyz = vec3(u_xlat16_37) * _SpecularColor.xyz;
        u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(_SpecMulti);
        u_xlat16_6.xyz = u_xlat10_3.xxx * u_xlat16_6.xyz;
        u_xlat4.xyz = u_xlat16_6.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
        u_xlat16_15.xyz = u_xlat15.xyz;
        u_xlat16_4.xyz = u_xlat4.xyz;
    //ENDIF
    }
    u_xlat16_5.xyz = u_xlat16_5.xyz * _EmissionColor_MHY.xyz;
    u_xlat16_6.xyz = u_xlat16_15.xyz + u_xlat16_4.xyz;
    u_xlat16_7.xyz = u_xlat16_4.xyz + u_xlat16_8.xyz;
    u_xlat16_8.xyz = u_xlat16_5.xyz * vec3(vec3(_EmissionScaler, _EmissionScaler, _EmissionScaler)) + (-u_xlat16_6.xyz);
    u_xlat16_8.xyz = vec3(u_xlat16_41) * u_xlat16_8.xyz + u_xlat16_6.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(vec3(_EmissionScaler, _EmissionScaler, _EmissionScaler)) + (-u_xlat16_7.xyz);
    u_xlat16_5.xyz = vec3(u_xlat16_41) * u_xlat16_5.xyz + u_xlat16_7.xyz;
    u_xlat16_6.xyz = (bool(u_xlatb36)) ? u_xlat16_8.xyz : u_xlat16_6.xyz;
    u_xlat16_5.xyz = (bool(u_xlatb36)) ? u_xlat16_5.xyz : u_xlat16_7.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(0.00999999978<u_xlat16_41);
#else
    u_xlatb2 = 0.00999999978<u_xlat16_41;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn));
#else
    u_xlatb14 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn);
#endif
    u_xlat10.xyz = u_xlat16_6.xyz * vec3(vec3(_ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness));
    u_xlat11.xyz = _ES_CharacterMainLightColor.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat11.xyz = vec3(vec3(_ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio)) * u_xlat11.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat10.xyz = u_xlat10.xyz * u_xlat11.xyz;
    u_xlat11.xyz = _ES_CharacterAmbientLightColor.xyz * vec3(_ES_CharacterAmbientLightRatio);
    u_xlat16_7.xyz = u_xlat10.xyz * vec3(10.0, 10.0, 10.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.xyz = min(max(u_xlat16_7.xyz, 0.0), 1.0);
#else
    u_xlat16_7.xyz = clamp(u_xlat16_7.xyz, 0.0, 1.0);
#endif
    u_xlat10.xyz = u_xlat11.xyz * u_xlat16_7.xyz + u_xlat10.xyz;
    u_xlat16_7.xyz = (bool(u_xlatb14)) ? u_xlat10.xyz : u_xlat16_6.xyz;
    u_xlat16_8.xyz = u_xlat16_6.xyz + (-u_xlat16_7.xyz);
    u_xlat16_8.xyz = vec3(u_xlat16_41) * u_xlat16_8.xyz + u_xlat16_7.xyz;
    u_xlat16_6.xyz = (-u_xlat16_5.xyz) + u_xlat16_6.xyz;
    u_xlat16_6.xyz = vec3(u_xlat16_41) * u_xlat16_6.xyz + u_xlat16_5.xyz;
    u_xlat16_0.xyz = (bool(u_xlatb2)) ? u_xlat16_8.xyz : u_xlat16_7.xyz;
    u_xlat16_5.xyz = (bool(u_xlatb2)) ? u_xlat16_6.xyz : u_xlat16_5.xyz;
    u_xlat16_37 = max(u_xlat16_0.z, u_xlat16_0.y);
    u_xlat16_2.w = max(u_xlat16_0.x, u_xlat16_37);
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(1.0<u_xlat16_2.w);
#else
    u_xlatb10 = 1.0<u_xlat16_2.w;
#endif
    u_xlat16_2.xyz = u_xlat16_0.xyz / u_xlat16_2.www;
    u_xlat16_0.w = 1.0;
    u_xlat16_0 = (bool(u_xlatb10)) ? u_xlat16_2 : u_xlat16_0;
    u_xlat16_37 = min(u_xlat16_0.w, 1.10000002);
    u_xlat16_6.x = u_xlat16_0.w + (-u_xlat16_37);
    u_xlat16_37 = u_xlat16_41 * u_xlat16_6.x + u_xlat16_37;
    SV_Target1.w = u_xlat16_37 * 0.0500000007;
    SV_Target0.xyz = u_xlat16_1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb10 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_1.x = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb10) ? u_xlat16_1.x : u_xlat16_5.z;
    SV_Target0.w = 0.0470588244;
    SV_Target1.xyz = u_xlat16_0.xyz;
    SV_Target2.xy = u_xlat16_5.xy;
    SV_Target2.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "MSAA_INTERPOLATION" "TOON_LIGHTMAP_ON" "METAL_MAT" "NORMAL_MAP_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
float u_xlat12;
void main()
{
    u_xlat0.x = hlslcc_mtx4x4unity_ObjectToWorld[0].y;
    u_xlat0.y = hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat0.z = hlslcc_mtx4x4unity_ObjectToWorld[2].y;
    u_xlat1.xyw = (-_WorldSpaceCameraPos.xyz) + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat0.w = u_xlat1.y;
    u_xlat2.xyz = in_POSITION0.xyz;
    u_xlat2.w = 1.0;
    u_xlat0.x = dot(u_xlat0, u_xlat2);
    u_xlat0 = u_xlat0.xxxx * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat3.w = u_xlat1.x;
    u_xlat3.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;
    u_xlat3.y = hlslcc_mtx4x4unity_ObjectToWorld[1].x;
    u_xlat3.z = hlslcc_mtx4x4unity_ObjectToWorld[2].x;
    u_xlat3.x = dot(u_xlat3, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat3.xxxx + u_xlat0;
    u_xlat1.x = hlslcc_mtx4x4unity_ObjectToWorld[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_ObjectToWorld[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_ObjectToWorld[2].z;
    u_xlat1.x = dot(u_xlat1, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat1.xxxx + u_xlat0;
    u_xlat1.x = hlslcc_mtx4x4unity_ObjectToWorld[0].w;
    u_xlat1.y = hlslcc_mtx4x4unity_ObjectToWorld[1].w;
    u_xlat1.z = hlslcc_mtx4x4unity_ObjectToWorld[2].w;
    u_xlat1.w = hlslcc_mtx4x4unity_ObjectToWorld[3].w;
    u_xlat1.x = dot(u_xlat1, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[3] * u_xlat1.xxxx + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD1 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.zw = u_xlat0.zw;
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD3.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
    u_xlat12 = in_TANGENT0.w * unity_WorldTransformParams.w;
    u_xlat2.xyz = vec3(u_xlat12) * u_xlat2.xyz;
    vs_TEXCOORD4.y = u_xlat2.x;
    vs_TEXCOORD4.x = u_xlat1.z;
    vs_TEXCOORD4.z = u_xlat0.y;
    vs_TEXCOORD5.x = u_xlat1.x;
    vs_TEXCOORD6.x = u_xlat1.y;
    vs_TEXCOORD5.z = u_xlat0.z;
    vs_TEXCOORD6.z = u_xlat0.x;
    vs_TEXCOORD5.y = u_xlat2.y;
    vs_TEXCOORD6.y = u_xlat2.z;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToCamera[4];
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	mediump vec4 _Color;
uniform 	float _MainTexAlphaUse;
uniform 	mediump float _MainTexAlphaCutoff;
uniform 	mediump float _BumpScale;
uniform 	float _UseLightMapColorAO;
uniform 	float _UseVertexColorAO;
uniform 	mediump float _LightArea;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	float _UseCoolShadowColorOrTex;
uniform 	mediump vec3 _CoolShadowMultColor;
uniform 	float _UseShadowTransition;
uniform 	float _ShadowTransitionRange;
uniform 	float _ShadowTransitionSoftness;
uniform 	mediump vec3 _SpecularColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump float _EmissionScaler;
uniform 	mediump vec3 _EmissionColor_MHY;
uniform 	mediump float _MTMapBrightness;
uniform 	float _MTMapTileScale;
uniform 	mediump vec3 _MTMapLightColor;
uniform 	mediump vec3 _MTMapDarkColor;
uniform 	mediump vec3 _MTShadowMultiColor;
uniform 	mediump float _MTShininess;
uniform 	mediump vec3 _MTSpecularColor;
uniform 	mediump float _MTSpecularScale;
uniform 	float _ES_CharacterAmbientLightOn;
uniform 	float _ES_CharacterAmbientBrightness;
uniform 	vec3 _ES_CharacterMainLightColor;
uniform 	float _ES_CharacterMainLightBrightness;
uniform 	vec3 _ES_CharacterAmbientLightColor;
uniform 	float _ES_CharacterMainLightRatio;
uniform 	float _ES_CharacterAmbientLightRatio;
uniform 	float _ES_CharacterColorTone;
uniform 	vec3 mhy_AvatarLightDir;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MTMap;
in mediump vec4 vs_COLOR0;
in highp vec2 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD5;
in highp vec3 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec2 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec3 u_xlat10_0;
bool u_xlatb0;
vec3 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
float u_xlat3;
lowp vec4 u_xlat10_3;
bool u_xlatb3;
vec3 u_xlat4;
mediump vec3 u_xlat16_4;
bvec2 u_xlatb4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
vec3 u_xlat10;
mediump vec3 u_xlat16_10;
bool u_xlatb10;
bool u_xlatb11;
vec3 u_xlat14;
mediump vec3 u_xlat16_14;
lowp float u_xlat10_14;
bool u_xlatb14;
vec2 u_xlat22;
bvec2 u_xlatb22;
float u_xlat33;
mediump float u_xlat16_33;
bool u_xlatb33;
bool u_xlatb34;
mediump float u_xlat16_35;
mediump float u_xlat16_38;
void main()
{
    u_xlat0.xy = dFdx(vs_TEXCOORD0.xy);
    u_xlat22.xy = dFdy(vs_TEXCOORD0.xy);
    u_xlat0.xy = u_xlat22.xy + u_xlat0.xy;
    u_xlat22.xy = (-u_xlat0.xy) * vec2(0.25, 0.25) + vs_TEXCOORD0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25) + vs_TEXCOORD0.xy;
    u_xlat0.xy = (int(gl_SampleID) != 0) ? u_xlat22.xy : u_xlat0.xy;
    u_xlat10_1.xyz = textureLod(_BumpMap, u_xlat0.xy, 0.0).xyz;
    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_2.xy = u_xlat16_2.xy * vec2(vec2(_BumpScale, _BumpScale));
    u_xlat1.x = dot(vs_TEXCOORD4.xyz, u_xlat16_2.xyz);
    u_xlat1.y = dot(vs_TEXCOORD5.xyz, u_xlat16_2.xyz);
    u_xlat1.z = dot(vs_TEXCOORD6.xyz, u_xlat16_2.xyz);
    u_xlat16_2.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat16_2.x = inversesqrt(u_xlat16_2.x);
    u_xlat16_2.xyz = u_xlat1.xyz * u_xlat16_2.xxx;
    u_xlat1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat22.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat22.x = inversesqrt(u_xlat22.x);
    u_xlat1.xyz = u_xlat1.xyz * u_xlat22.xxx + mhy_AvatarLightDir.xyz;
    u_xlat22.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat22.x = inversesqrt(u_xlat22.x);
    u_xlat1.xyz = u_xlat22.xxx * u_xlat1.xyz;
    u_xlat10_3 = textureLod(_MainTex, u_xlat0.xy, 0.0);
    u_xlatb22.xy = equal(vec4(_MainTexAlphaUse), vec4(1.0, 2.0, 1.0, 2.0)).xy;
    u_xlat16_35 = u_xlat10_3.w + (-_MainTexAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb34 = !!(u_xlat16_35<0.0);
#else
    u_xlatb34 = u_xlat16_35<0.0;
#endif
    u_xlatb22.x = u_xlatb22.x && u_xlatb34;
    if((int(u_xlatb22.x) * int(0xffffffffu))!=0){discard;}
    u_xlat10_0.xyz = textureLod(_LightMapTex, u_xlat0.xy, 0.0).xyz;
    u_xlatb4.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseLightMapColorAO, _UseVertexColorAO, _UseLightMapColorAO, _UseLightMapColorAO)).xy;
    u_xlat16_35 = (u_xlatb4.x) ? u_xlat10_0.y : 0.5;
    u_xlat16_5.xyz = u_xlat10_3.xyz * _Color.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb11 = !!(0.00999999978<u_xlat10_3.w);
#else
    u_xlatb11 = 0.00999999978<u_xlat10_3.w;
#endif
    u_xlatb11 = u_xlatb11 && u_xlatb22.y;
    u_xlat16_38 = (u_xlatb11) ? u_xlat10_3.w : 0.0;
    u_xlat16_6.x = dot(u_xlat16_2.xyz, mhy_AvatarLightDir.xyz);
    u_xlat16_33 = u_xlat16_6.x * 0.497500002 + 0.5;
    u_xlat16_6.x = u_xlat16_35 * vs_COLOR0.x;
    u_xlat16_35 = (u_xlatb4.y) ? u_xlat16_6.x : u_xlat16_35;
#ifdef UNITY_ADRENO_ES3
    u_xlatb34 = !!(u_xlat16_35<0.0500000007);
#else
    u_xlatb34 = u_xlat16_35<0.0500000007;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(0.949999988<u_xlat16_35);
#else
    u_xlatb3 = 0.949999988<u_xlat16_35;
#endif
    u_xlat16_33 = u_xlat16_33 + u_xlat16_35;
    u_xlat33 = u_xlat16_33 * 0.5;
    u_xlat16_35 = (u_xlatb3) ? 1.0 : u_xlat33;
    u_xlat16_35 = (u_xlatb34) ? 0.0 : u_xlat16_35;
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(u_xlat16_35<_LightArea);
#else
    u_xlatb33 = u_xlat16_35<_LightArea;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb34 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition));
#else
    u_xlatb34 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition);
#endif
    u_xlat16_35 = (-u_xlat16_35) + _LightArea;
    u_xlat16_35 = u_xlat16_35 / _ShadowTransitionRange;
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(u_xlat16_35>=1.0);
#else
    u_xlatb3 = u_xlat16_35>=1.0;
#endif
    u_xlat16_14.x = u_xlat16_35 + 0.00999999978;
    u_xlat16_14.x = log2(u_xlat16_14.x);
    u_xlat14.x = u_xlat16_14.x * _ShadowTransitionSoftness;
    u_xlat14.x = exp2(u_xlat14.x);
    u_xlat14.x = min(u_xlat14.x, 1.0);
    u_xlat3 = (u_xlatb3) ? 1.0 : u_xlat14.x;
    u_xlat3 = (u_xlatb34) ? u_xlat3 : 1.0;
    u_xlat3 = u_xlatb33 ? u_xlat3 : float(0.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(0.899999976<u_xlat10_0.x);
#else
    u_xlatb14 = 0.899999976<u_xlat10_0.x;
#endif
    if(u_xlatb14){
        u_xlat14.xy = u_xlat16_2.yy * hlslcc_mtx4x4unity_WorldToCamera[1].xy;
        u_xlat14.xy = hlslcc_mtx4x4unity_WorldToCamera[0].xy * u_xlat16_2.xx + u_xlat14.xy;
        u_xlat4.yz = hlslcc_mtx4x4unity_WorldToCamera[2].xy * u_xlat16_2.zz + u_xlat14.xy;
        u_xlat4.x = u_xlat4.y * _MTMapTileScale;
        u_xlat16_6.xy = u_xlat4.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
        u_xlat10_14 = texture(_MTMap, u_xlat16_6.xy, -1.0).x;
        u_xlat16_35 = u_xlat10_14 * _MTMapBrightness;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_35 = min(max(u_xlat16_35, 0.0), 1.0);
#else
        u_xlat16_35 = clamp(u_xlat16_35, 0.0, 1.0);
#endif
        u_xlat16_6.xyz = _MTMapLightColor.xyz + (-_MTMapDarkColor.xyz);
        u_xlat16_6.xyz = vec3(u_xlat16_35) * u_xlat16_6.xyz + _MTMapDarkColor.xyz;
        u_xlat16_6.xyz = u_xlat16_5.xyz * u_xlat16_6.xyz;
        u_xlat16_35 = dot(u_xlat16_2.xyz, u_xlat1.xyz);
        u_xlat16_35 = max(u_xlat16_35, 0.00100000005);
        u_xlat16_35 = log2(u_xlat16_35);
        u_xlat16_35 = u_xlat16_35 * _MTShininess;
        u_xlat16_35 = exp2(u_xlat16_35);
        u_xlat16_35 = u_xlat16_35 * _MTSpecularScale;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_35 = min(max(u_xlat16_35, 0.0), 1.0);
#else
        u_xlat16_35 = clamp(u_xlat16_35, 0.0, 1.0);
#endif
        u_xlat16_7.xyz = vec3(u_xlat16_35) * _MTSpecularColor.xyz;
        u_xlat16_7.xyz = u_xlat10_0.zzz * u_xlat16_7.xyz;
        u_xlat16_8.xyz = u_xlat16_6.xyz * _MTShadowMultiColor.xyz;
        u_xlat16_14.xyz = _MTShadowMultiColor.xyz + vec3(-1.0, -1.0, -1.0);
        u_xlat14.xyz = vec3(u_xlat3) * u_xlat16_14.xyz + vec3(1.0, 1.0, 1.0);
        u_xlat16_9.xyz = (bool(u_xlatb34)) ? u_xlat14.xyz : _MTShadowMultiColor.xyz;
        u_xlat16_9.xyz = u_xlat16_6.xyz * u_xlat16_9.xyz;
        u_xlat14.xyz = u_xlat16_6.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
        u_xlat14.xyz = (bool(u_xlatb33)) ? u_xlat16_9.xyz : u_xlat14.xyz;
        u_xlat4.xyz = u_xlat16_7.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
        u_xlat16_14.xyz = u_xlat14.xyz;
        u_xlat16_4.xyz = u_xlat4.xyz;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb22.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex));
#else
        u_xlatb22.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex);
#endif
        u_xlat16_10.xyz = vec3(_FirstShadowMultColor.xxyz.y + (-_CoolShadowMultColor.x), _FirstShadowMultColor.xxyz.z + (-_CoolShadowMultColor.y), float(_FirstShadowMultColor.z) + (-_CoolShadowMultColor.z));
        u_xlat10.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_10.xyz + _CoolShadowMultColor.xyz;
        u_xlat16_6.xyz = (u_xlatb22.x) ? u_xlat10.xyz : vec3(_FirstShadowMultColor.x, _FirstShadowMultColor.y, _FirstShadowMultColor.z);
        u_xlat16_8.xyz = u_xlat16_5.xyz * u_xlat16_6.xyz;
        u_xlat16_10.xyz = u_xlat16_6.xyz + vec3(-1.0, -1.0, -1.0);
        u_xlat10.xyz = vec3(u_xlat3) * u_xlat16_10.xyz + vec3(1.0, 1.0, 1.0);
        u_xlat16_6.xyz = (bool(u_xlatb34)) ? u_xlat10.xyz : u_xlat16_6.xyz;
        u_xlat16_6.xyz = u_xlat16_5.xyz * u_xlat16_6.xyz;
        u_xlat10.xyz = u_xlat16_5.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
        u_xlat14.xyz = (bool(u_xlatb33)) ? u_xlat16_6.xyz : u_xlat10.xyz;
        u_xlat16_35 = dot(u_xlat16_2.xyz, u_xlat1.xyz);
        u_xlat16_35 = max(u_xlat16_35, 0.00100000005);
        u_xlat16_35 = log2(u_xlat16_35);
        u_xlat16_35 = u_xlat16_35 * _Shininess;
        u_xlat16_35 = exp2(u_xlat16_35);
        u_xlat16_6.xyz = vec3(u_xlat16_35) * _SpecularColor.xyz;
        u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(_SpecMulti);
        u_xlat16_6.xyz = u_xlat10_0.xxx * u_xlat16_6.xyz;
        u_xlat4.xyz = u_xlat16_6.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
        u_xlat16_14.xyz = u_xlat14.xyz;
        u_xlat16_4.xyz = u_xlat4.xyz;
    //ENDIF
    }
    u_xlat16_5.xyz = u_xlat16_5.xyz * _EmissionColor_MHY.xyz;
    u_xlat16_6.xyz = u_xlat16_14.xyz + u_xlat16_4.xyz;
    u_xlat16_7.xyz = u_xlat16_4.xyz + u_xlat16_8.xyz;
    u_xlat16_8.xyz = u_xlat16_5.xyz * vec3(vec3(_EmissionScaler, _EmissionScaler, _EmissionScaler)) + (-u_xlat16_6.xyz);
    u_xlat16_8.xyz = vec3(u_xlat16_38) * u_xlat16_8.xyz + u_xlat16_6.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(vec3(_EmissionScaler, _EmissionScaler, _EmissionScaler)) + (-u_xlat16_7.xyz);
    u_xlat16_5.xyz = vec3(u_xlat16_38) * u_xlat16_5.xyz + u_xlat16_7.xyz;
    u_xlat16_6.xyz = (bool(u_xlatb11)) ? u_xlat16_8.xyz : u_xlat16_6.xyz;
    u_xlat16_5.xyz = (bool(u_xlatb11)) ? u_xlat16_5.xyz : u_xlat16_7.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.00999999978<u_xlat16_38);
#else
    u_xlatb0 = 0.00999999978<u_xlat16_38;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb11 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn));
#else
    u_xlatb11 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn);
#endif
    u_xlat1.xyz = u_xlat16_6.xyz * vec3(vec3(_ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness));
    u_xlat10.xyz = _ES_CharacterMainLightColor.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat10.xyz = vec3(vec3(_ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio)) * u_xlat10.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat1.xyz = u_xlat1.xyz * u_xlat10.xyz;
    u_xlat10.xyz = _ES_CharacterAmbientLightColor.xyz * vec3(_ES_CharacterAmbientLightRatio);
    u_xlat16_7.xyz = u_xlat1.xyz * vec3(10.0, 10.0, 10.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.xyz = min(max(u_xlat16_7.xyz, 0.0), 1.0);
#else
    u_xlat16_7.xyz = clamp(u_xlat16_7.xyz, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat10.xyz * u_xlat16_7.xyz + u_xlat1.xyz;
    u_xlat16_7.xyz = (bool(u_xlatb11)) ? u_xlat1.xyz : u_xlat16_6.xyz;
    u_xlat16_8.xyz = u_xlat16_6.xyz + (-u_xlat16_7.xyz);
    u_xlat16_8.xyz = vec3(u_xlat16_38) * u_xlat16_8.xyz + u_xlat16_7.xyz;
    u_xlat16_6.xyz = (-u_xlat16_5.xyz) + u_xlat16_6.xyz;
    u_xlat16_6.xyz = vec3(u_xlat16_38) * u_xlat16_6.xyz + u_xlat16_5.xyz;
    u_xlat16_1.xyz = (bool(u_xlatb0)) ? u_xlat16_8.xyz : u_xlat16_7.xyz;
    u_xlat16_5.xyz = (bool(u_xlatb0)) ? u_xlat16_6.xyz : u_xlat16_5.xyz;
    u_xlat16_35 = max(u_xlat16_1.z, u_xlat16_1.y);
    u_xlat16_0.w = max(u_xlat16_1.x, u_xlat16_35);
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(1.0<u_xlat16_0.w);
#else
    u_xlatb10 = 1.0<u_xlat16_0.w;
#endif
    u_xlat16_0.xyz = u_xlat16_1.xyz / u_xlat16_0.www;
    u_xlat16_1.w = 1.0;
    u_xlat16_0 = (bool(u_xlatb10)) ? u_xlat16_0 : u_xlat16_1;
    u_xlat16_35 = min(u_xlat16_0.w, 1.10000002);
    u_xlat16_6.x = u_xlat16_0.w + (-u_xlat16_35);
    u_xlat16_35 = u_xlat16_38 * u_xlat16_6.x + u_xlat16_35;
    SV_Target1.w = u_xlat16_35 * 0.0500000007;
    SV_Target0.xyz = u_xlat16_2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb10 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_2.x = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb10) ? u_xlat16_2.x : u_xlat16_5.z;
    SV_Target0.w = 0.0470588244;
    SV_Target1.xyz = u_xlat16_0.xyz;
    SV_Target2.xy = u_xlat16_5.xy;
    SV_Target2.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "LINE_INTERPOLATION" "TOON_LIGHTMAP_ON" "METAL_MAT" "NORMAL_MAP_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
float u_xlat12;
void main()
{
    u_xlat0.x = hlslcc_mtx4x4unity_ObjectToWorld[0].y;
    u_xlat0.y = hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat0.z = hlslcc_mtx4x4unity_ObjectToWorld[2].y;
    u_xlat1.xyw = (-_WorldSpaceCameraPos.xyz) + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat0.w = u_xlat1.y;
    u_xlat2.xyz = in_POSITION0.xyz;
    u_xlat2.w = 1.0;
    u_xlat0.x = dot(u_xlat0, u_xlat2);
    u_xlat0 = u_xlat0.xxxx * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat3.w = u_xlat1.x;
    u_xlat3.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;
    u_xlat3.y = hlslcc_mtx4x4unity_ObjectToWorld[1].x;
    u_xlat3.z = hlslcc_mtx4x4unity_ObjectToWorld[2].x;
    u_xlat3.x = dot(u_xlat3, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat3.xxxx + u_xlat0;
    u_xlat1.x = hlslcc_mtx4x4unity_ObjectToWorld[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_ObjectToWorld[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_ObjectToWorld[2].z;
    u_xlat1.x = dot(u_xlat1, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat1.xxxx + u_xlat0;
    u_xlat1.x = hlslcc_mtx4x4unity_ObjectToWorld[0].w;
    u_xlat1.y = hlslcc_mtx4x4unity_ObjectToWorld[1].w;
    u_xlat1.z = hlslcc_mtx4x4unity_ObjectToWorld[2].w;
    u_xlat1.w = hlslcc_mtx4x4unity_ObjectToWorld[3].w;
    u_xlat1.x = dot(u_xlat1, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[3] * u_xlat1.xxxx + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD1 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.zw = u_xlat0.zw;
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD3.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
    u_xlat12 = in_TANGENT0.w * unity_WorldTransformParams.w;
    u_xlat2.xyz = vec3(u_xlat12) * u_xlat2.xyz;
    vs_TEXCOORD4.y = u_xlat2.x;
    vs_TEXCOORD4.x = u_xlat1.z;
    vs_TEXCOORD4.z = u_xlat0.y;
    vs_TEXCOORD5.x = u_xlat1.x;
    vs_TEXCOORD6.x = u_xlat1.y;
    vs_TEXCOORD5.z = u_xlat0.z;
    vs_TEXCOORD6.z = u_xlat0.x;
    vs_TEXCOORD5.y = u_xlat2.y;
    vs_TEXCOORD6.y = u_xlat2.z;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToCamera[4];
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	mediump vec4 _Color;
uniform 	float _MainTexAlphaUse;
uniform 	mediump float _MainTexAlphaCutoff;
uniform 	mediump float _BumpScale;
uniform 	float _UseLightMapColorAO;
uniform 	float _UseVertexColorAO;
uniform 	mediump float _LightArea;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	float _UseCoolShadowColorOrTex;
uniform 	mediump vec3 _CoolShadowMultColor;
uniform 	float _UseShadowTransition;
uniform 	float _ShadowTransitionRange;
uniform 	float _ShadowTransitionSoftness;
uniform 	mediump vec3 _SpecularColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump float _EmissionScaler;
uniform 	mediump vec3 _EmissionColor_MHY;
uniform 	mediump float _MTMapBrightness;
uniform 	float _MTMapTileScale;
uniform 	mediump vec3 _MTMapLightColor;
uniform 	mediump vec3 _MTMapDarkColor;
uniform 	mediump vec3 _MTShadowMultiColor;
uniform 	mediump float _MTShininess;
uniform 	mediump vec3 _MTSpecularColor;
uniform 	mediump float _MTSpecularScale;
uniform 	float _ES_CharacterAmbientLightOn;
uniform 	float _ES_CharacterAmbientBrightness;
uniform 	vec3 _ES_CharacterMainLightColor;
uniform 	float _ES_CharacterMainLightBrightness;
uniform 	vec3 _ES_CharacterAmbientLightColor;
uniform 	float _ES_CharacterMainLightRatio;
uniform 	float _ES_CharacterAmbientLightRatio;
uniform 	float _ES_CharacterColorTone;
uniform 	vec3 mhy_AvatarLightDir;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MTMap;
in mediump vec4 vs_COLOR0;
in highp vec2 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD5;
in highp vec3 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec3 u_xlat10_0;
mediump vec3 u_xlat16_1;
float u_xlat2;
mediump vec4 u_xlat16_2;
lowp vec4 u_xlat10_2;
bool u_xlatb2;
lowp vec4 u_xlat10_3;
bvec2 u_xlatb3;
vec3 u_xlat4;
mediump vec3 u_xlat16_4;
bvec2 u_xlatb4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
vec3 u_xlat10;
mediump vec3 u_xlat16_10;
bool u_xlatb10;
vec3 u_xlat11;
vec3 u_xlat14;
bool u_xlatb14;
vec3 u_xlat15;
mediump vec3 u_xlat16_15;
float u_xlat26;
bool u_xlatb26;
float u_xlat36;
bool u_xlatb36;
mediump float u_xlat16_37;
float u_xlat38;
mediump float u_xlat16_38;
lowp float u_xlat10_38;
bool u_xlatb38;
mediump float u_xlat16_41;
void main()
{
    u_xlat10_0.xyz = texture(_BumpMap, vs_TEXCOORD0.xy, -1.0).xyz;
    u_xlat16_1.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_1.xy = u_xlat16_1.xy * vec2(vec2(_BumpScale, _BumpScale));
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, u_xlat16_1.xyz);
    u_xlat0.y = dot(vs_TEXCOORD5.xyz, u_xlat16_1.xyz);
    u_xlat0.z = dot(vs_TEXCOORD6.xyz, u_xlat16_1.xyz);
    u_xlat16_1.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat16_1.x = inversesqrt(u_xlat16_1.x);
    u_xlat16_1.xyz = u_xlat0.xyz * u_xlat16_1.xxx;
    u_xlat0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat36 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat36 = inversesqrt(u_xlat36);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat36) + mhy_AvatarLightDir.xyz;
    u_xlat36 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat36 = inversesqrt(u_xlat36);
    u_xlat0.xyz = vec3(u_xlat36) * u_xlat0.xyz;
    u_xlat10_2 = texture(_MainTex, vs_TEXCOORD0.xy, -1.0);
    u_xlatb3.xy = equal(vec4(_MainTexAlphaUse), vec4(1.0, 2.0, 0.0, 0.0)).xy;
    u_xlat16_37 = u_xlat10_2.w + (-_MainTexAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb36 = !!(u_xlat16_37<0.0);
#else
    u_xlatb36 = u_xlat16_37<0.0;
#endif
    u_xlatb36 = u_xlatb3.x && u_xlatb36;
    if((int(u_xlatb36) * int(0xffffffffu))!=0){discard;}
    u_xlat10_3.xzw = texture(_LightMapTex, vs_TEXCOORD0.xy, -1.0).xyz;
    u_xlatb4.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseLightMapColorAO, _UseVertexColorAO, _UseLightMapColorAO, _UseLightMapColorAO)).xy;
    u_xlat16_37 = (u_xlatb4.x) ? u_xlat10_3.z : 0.5;
    u_xlat16_5.xyz = u_xlat10_2.xyz * _Color.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb36 = !!(0.00999999978<u_xlat10_2.w);
#else
    u_xlatb36 = 0.00999999978<u_xlat10_2.w;
#endif
    u_xlatb36 = u_xlatb36 && u_xlatb3.y;
    u_xlat16_41 = (u_xlatb36) ? u_xlat10_2.w : 0.0;
    u_xlat16_6.x = dot(u_xlat16_1.xyz, mhy_AvatarLightDir.xyz);
    u_xlat16_2.x = u_xlat16_6.x * 0.497500002 + 0.5;
    u_xlat16_6.x = u_xlat16_37 * vs_COLOR0.x;
    u_xlat16_37 = (u_xlatb4.y) ? u_xlat16_6.x : u_xlat16_37;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(u_xlat16_37<0.0500000007);
#else
    u_xlatb14 = u_xlat16_37<0.0500000007;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb26 = !!(0.949999988<u_xlat16_37);
#else
    u_xlatb26 = 0.949999988<u_xlat16_37;
#endif
    u_xlat16_2.x = u_xlat16_37 + u_xlat16_2.x;
    u_xlat2 = u_xlat16_2.x * 0.5;
    u_xlat16_37 = (u_xlatb26) ? 1.0 : u_xlat2;
    u_xlat16_37 = (u_xlatb14) ? 0.0 : u_xlat16_37;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat16_37<_LightArea);
#else
    u_xlatb2 = u_xlat16_37<_LightArea;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition));
#else
    u_xlatb14 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition);
#endif
    u_xlat16_37 = (-u_xlat16_37) + _LightArea;
    u_xlat16_37 = u_xlat16_37 / _ShadowTransitionRange;
#ifdef UNITY_ADRENO_ES3
    u_xlatb26 = !!(u_xlat16_37>=1.0);
#else
    u_xlatb26 = u_xlat16_37>=1.0;
#endif
    u_xlat16_38 = u_xlat16_37 + 0.00999999978;
    u_xlat16_38 = log2(u_xlat16_38);
    u_xlat38 = u_xlat16_38 * _ShadowTransitionSoftness;
    u_xlat38 = exp2(u_xlat38);
    u_xlat38 = min(u_xlat38, 1.0);
    u_xlat26 = (u_xlatb26) ? 1.0 : u_xlat38;
    u_xlat26 = (u_xlatb14) ? u_xlat26 : 1.0;
    u_xlat26 = u_xlatb2 ? u_xlat26 : float(0.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb38 = !!(0.899999976<u_xlat10_3.x);
#else
    u_xlatb38 = 0.899999976<u_xlat10_3.x;
#endif
    if(u_xlatb38){
        u_xlat15.xy = u_xlat16_1.yy * hlslcc_mtx4x4unity_WorldToCamera[1].xy;
        u_xlat15.xy = hlslcc_mtx4x4unity_WorldToCamera[0].xy * u_xlat16_1.xx + u_xlat15.xy;
        u_xlat4.yz = hlslcc_mtx4x4unity_WorldToCamera[2].xy * u_xlat16_1.zz + u_xlat15.xy;
        u_xlat4.x = u_xlat4.y * _MTMapTileScale;
        u_xlat16_6.xy = u_xlat4.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
        u_xlat10_38 = texture(_MTMap, u_xlat16_6.xy, -1.0).x;
        u_xlat16_37 = u_xlat10_38 * _MTMapBrightness;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_37 = min(max(u_xlat16_37, 0.0), 1.0);
#else
        u_xlat16_37 = clamp(u_xlat16_37, 0.0, 1.0);
#endif
        u_xlat16_6.xyz = _MTMapLightColor.xyz + (-_MTMapDarkColor.xyz);
        u_xlat16_6.xyz = vec3(u_xlat16_37) * u_xlat16_6.xyz + _MTMapDarkColor.xyz;
        u_xlat16_6.xyz = u_xlat16_5.xyz * u_xlat16_6.xyz;
        u_xlat16_37 = dot(u_xlat16_1.xyz, u_xlat0.xyz);
        u_xlat16_37 = max(u_xlat16_37, 0.00100000005);
        u_xlat16_37 = log2(u_xlat16_37);
        u_xlat16_37 = u_xlat16_37 * _MTShininess;
        u_xlat16_37 = exp2(u_xlat16_37);
        u_xlat16_37 = u_xlat16_37 * _MTSpecularScale;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_37 = min(max(u_xlat16_37, 0.0), 1.0);
#else
        u_xlat16_37 = clamp(u_xlat16_37, 0.0, 1.0);
#endif
        u_xlat16_7.xyz = vec3(u_xlat16_37) * _MTSpecularColor.xyz;
        u_xlat16_7.xyz = u_xlat10_3.www * u_xlat16_7.xyz;
        u_xlat16_8.xyz = u_xlat16_6.xyz * _MTShadowMultiColor.xyz;
        u_xlat16_15.xyz = _MTShadowMultiColor.xyz + vec3(-1.0, -1.0, -1.0);
        u_xlat15.xyz = vec3(u_xlat26) * u_xlat16_15.xyz + vec3(1.0, 1.0, 1.0);
        u_xlat16_9.xyz = (bool(u_xlatb14)) ? u_xlat15.xyz : _MTShadowMultiColor.xyz;
        u_xlat16_9.xyz = u_xlat16_6.xyz * u_xlat16_9.xyz;
        u_xlat15.xyz = u_xlat16_6.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
        u_xlat15.xyz = (bool(u_xlatb2)) ? u_xlat16_9.xyz : u_xlat15.xyz;
        u_xlat4.xyz = u_xlat16_7.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
        u_xlat16_15.xyz = u_xlat15.xyz;
        u_xlat16_4.xyz = u_xlat4.xyz;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb38 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex));
#else
        u_xlatb38 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex);
#endif
        u_xlat16_10.xyz = vec3(_FirstShadowMultColor.xxyz.y + (-_CoolShadowMultColor.x), _FirstShadowMultColor.xxyz.z + (-_CoolShadowMultColor.y), float(_FirstShadowMultColor.z) + (-_CoolShadowMultColor.z));
        u_xlat10.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_10.xyz + _CoolShadowMultColor.xyz;
        u_xlat16_6.xyz = (bool(u_xlatb38)) ? u_xlat10.xyz : vec3(_FirstShadowMultColor.x, _FirstShadowMultColor.y, _FirstShadowMultColor.z);
        u_xlat16_8.xyz = u_xlat16_5.xyz * u_xlat16_6.xyz;
        u_xlat16_10.xyz = u_xlat16_6.xyz + vec3(-1.0, -1.0, -1.0);
        u_xlat10.xyz = vec3(u_xlat26) * u_xlat16_10.xyz + vec3(1.0, 1.0, 1.0);
        u_xlat16_6.xyz = (bool(u_xlatb14)) ? u_xlat10.xyz : u_xlat16_6.xyz;
        u_xlat16_6.xyz = u_xlat16_5.xyz * u_xlat16_6.xyz;
        u_xlat14.xyz = u_xlat16_5.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
        u_xlat15.xyz = (bool(u_xlatb2)) ? u_xlat16_6.xyz : u_xlat14.xyz;
        u_xlat16_37 = dot(u_xlat16_1.xyz, u_xlat0.xyz);
        u_xlat16_37 = max(u_xlat16_37, 0.00100000005);
        u_xlat16_37 = log2(u_xlat16_37);
        u_xlat16_37 = u_xlat16_37 * _Shininess;
        u_xlat16_37 = exp2(u_xlat16_37);
        u_xlat16_6.xyz = vec3(u_xlat16_37) * _SpecularColor.xyz;
        u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(_SpecMulti);
        u_xlat16_6.xyz = u_xlat10_3.xxx * u_xlat16_6.xyz;
        u_xlat4.xyz = u_xlat16_6.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
        u_xlat16_15.xyz = u_xlat15.xyz;
        u_xlat16_4.xyz = u_xlat4.xyz;
    //ENDIF
    }
    u_xlat16_5.xyz = u_xlat16_5.xyz * _EmissionColor_MHY.xyz;
    u_xlat16_6.xyz = u_xlat16_15.xyz + u_xlat16_4.xyz;
    u_xlat16_7.xyz = u_xlat16_4.xyz + u_xlat16_8.xyz;
    u_xlat16_8.xyz = u_xlat16_5.xyz * vec3(vec3(_EmissionScaler, _EmissionScaler, _EmissionScaler)) + (-u_xlat16_6.xyz);
    u_xlat16_8.xyz = vec3(u_xlat16_41) * u_xlat16_8.xyz + u_xlat16_6.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(vec3(_EmissionScaler, _EmissionScaler, _EmissionScaler)) + (-u_xlat16_7.xyz);
    u_xlat16_5.xyz = vec3(u_xlat16_41) * u_xlat16_5.xyz + u_xlat16_7.xyz;
    u_xlat16_6.xyz = (bool(u_xlatb36)) ? u_xlat16_8.xyz : u_xlat16_6.xyz;
    u_xlat16_5.xyz = (bool(u_xlatb36)) ? u_xlat16_5.xyz : u_xlat16_7.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(0.00999999978<u_xlat16_41);
#else
    u_xlatb2 = 0.00999999978<u_xlat16_41;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn));
#else
    u_xlatb14 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn);
#endif
    u_xlat10.xyz = u_xlat16_6.xyz * vec3(vec3(_ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness));
    u_xlat11.xyz = _ES_CharacterMainLightColor.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat11.xyz = vec3(vec3(_ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio)) * u_xlat11.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat10.xyz = u_xlat10.xyz * u_xlat11.xyz;
    u_xlat11.xyz = _ES_CharacterAmbientLightColor.xyz * vec3(_ES_CharacterAmbientLightRatio);
    u_xlat16_7.xyz = u_xlat10.xyz * vec3(10.0, 10.0, 10.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.xyz = min(max(u_xlat16_7.xyz, 0.0), 1.0);
#else
    u_xlat16_7.xyz = clamp(u_xlat16_7.xyz, 0.0, 1.0);
#endif
    u_xlat10.xyz = u_xlat11.xyz * u_xlat16_7.xyz + u_xlat10.xyz;
    u_xlat16_7.xyz = (bool(u_xlatb14)) ? u_xlat10.xyz : u_xlat16_6.xyz;
    u_xlat16_8.xyz = u_xlat16_6.xyz + (-u_xlat16_7.xyz);
    u_xlat16_8.xyz = vec3(u_xlat16_41) * u_xlat16_8.xyz + u_xlat16_7.xyz;
    u_xlat16_6.xyz = (-u_xlat16_5.xyz) + u_xlat16_6.xyz;
    u_xlat16_6.xyz = vec3(u_xlat16_41) * u_xlat16_6.xyz + u_xlat16_5.xyz;
    u_xlat16_0.xyz = (bool(u_xlatb2)) ? u_xlat16_8.xyz : u_xlat16_7.xyz;
    u_xlat16_5.xyz = (bool(u_xlatb2)) ? u_xlat16_6.xyz : u_xlat16_5.xyz;
    u_xlat16_37 = max(u_xlat16_0.z, u_xlat16_0.y);
    u_xlat16_2.w = max(u_xlat16_0.x, u_xlat16_37);
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(1.0<u_xlat16_2.w);
#else
    u_xlatb10 = 1.0<u_xlat16_2.w;
#endif
    u_xlat16_2.xyz = u_xlat16_0.xyz / u_xlat16_2.www;
    u_xlat16_0.w = 1.0;
    u_xlat16_0 = (bool(u_xlatb10)) ? u_xlat16_2 : u_xlat16_0;
    u_xlat16_37 = min(u_xlat16_0.w, 1.10000002);
    u_xlat16_6.x = u_xlat16_0.w + (-u_xlat16_37);
    u_xlat16_37 = u_xlat16_41 * u_xlat16_6.x + u_xlat16_37;
    SV_Target1.w = u_xlat16_37 * 0.0500000007;
    SV_Target0.xyz = u_xlat16_1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb10 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_1.x = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb10) ? u_xlat16_1.x : u_xlat16_5.z;
    SV_Target0.w = 0.0470588244;
    SV_Target1.xyz = u_xlat16_0.xyz;
    SV_Target2.xy = u_xlat16_5.xy;
    SV_Target2.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "TOON_LIGHTMAP_ON" "BACK_FACE_ON" "NORMAL_MAP_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
float u_xlat12;
void main()
{
    u_xlat0.x = hlslcc_mtx4x4unity_ObjectToWorld[0].y;
    u_xlat0.y = hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat0.z = hlslcc_mtx4x4unity_ObjectToWorld[2].y;
    u_xlat1.xyw = (-_WorldSpaceCameraPos.xyz) + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat0.w = u_xlat1.y;
    u_xlat2.xyz = in_POSITION0.xyz;
    u_xlat2.w = 1.0;
    u_xlat0.x = dot(u_xlat0, u_xlat2);
    u_xlat0 = u_xlat0.xxxx * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat3.w = u_xlat1.x;
    u_xlat3.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;
    u_xlat3.y = hlslcc_mtx4x4unity_ObjectToWorld[1].x;
    u_xlat3.z = hlslcc_mtx4x4unity_ObjectToWorld[2].x;
    u_xlat3.x = dot(u_xlat3, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat3.xxxx + u_xlat0;
    u_xlat1.x = hlslcc_mtx4x4unity_ObjectToWorld[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_ObjectToWorld[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_ObjectToWorld[2].z;
    u_xlat1.x = dot(u_xlat1, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat1.xxxx + u_xlat0;
    u_xlat1.x = hlslcc_mtx4x4unity_ObjectToWorld[0].w;
    u_xlat1.y = hlslcc_mtx4x4unity_ObjectToWorld[1].w;
    u_xlat1.z = hlslcc_mtx4x4unity_ObjectToWorld[2].w;
    u_xlat1.w = hlslcc_mtx4x4unity_ObjectToWorld[3].w;
    u_xlat1.x = dot(u_xlat1, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[3] * u_xlat1.xxxx + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD1 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.zw = u_xlat0.zw;
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD3.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
    u_xlat12 = in_TANGENT0.w * unity_WorldTransformParams.w;
    u_xlat2.xyz = vec3(u_xlat12) * u_xlat2.xyz;
    vs_TEXCOORD4.y = u_xlat2.x;
    vs_TEXCOORD4.x = u_xlat1.z;
    vs_TEXCOORD4.z = u_xlat0.y;
    vs_TEXCOORD5.x = u_xlat1.x;
    vs_TEXCOORD6.x = u_xlat1.y;
    vs_TEXCOORD5.z = u_xlat0.z;
    vs_TEXCOORD6.z = u_xlat0.x;
    vs_TEXCOORD5.y = u_xlat2.y;
    vs_TEXCOORD6.y = u_xlat2.z;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	mediump vec4 _Color;
uniform 	float _MainTexAlphaUse;
uniform 	mediump float _MainTexAlphaCutoff;
uniform 	mediump float _BumpScale;
uniform 	float _UseLightMapColorAO;
uniform 	float _UseVertexColorAO;
uniform 	mediump float _LightArea;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	float _UseCoolShadowColorOrTex;
uniform 	mediump vec3 _CoolShadowMultColor;
uniform 	float _UseShadowTransition;
uniform 	float _ShadowTransitionRange;
uniform 	float _ShadowTransitionSoftness;
uniform 	mediump vec3 _SpecularColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump float _EmissionScaler;
uniform 	mediump vec3 _EmissionColor_MHY;
uniform 	float _ES_CharacterAmbientLightOn;
uniform 	float _ES_CharacterAmbientBrightness;
uniform 	vec3 _ES_CharacterMainLightColor;
uniform 	float _ES_CharacterMainLightBrightness;
uniform 	vec3 _ES_CharacterAmbientLightColor;
uniform 	float _ES_CharacterMainLightRatio;
uniform 	float _ES_CharacterAmbientLightRatio;
uniform 	float _ES_CharacterColorTone;
uniform 	vec3 mhy_AvatarLightDir;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMapTex;
in mediump vec4 vs_COLOR0;
in highp vec2 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD5;
in highp vec3 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec4 u_xlat0;
mediump float u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
vec3 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
bool u_xlatb1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump vec4 u_xlat16_3;
bvec2 u_xlatb3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
bool u_xlatb8;
vec3 u_xlat11;
mediump vec3 u_xlat16_11;
lowp vec2 u_xlat10_16;
bool u_xlatb16;
float u_xlat24;
mediump float u_xlat16_24;
bool u_xlatb24;
mediump float u_xlat16_26;
mediump float u_xlat16_28;
mediump float u_xlat16_29;
void main()
{
    u_xlatb0.xy = equal(vec4(_MainTexAlphaUse), vec4(1.0, 2.0, 0.0, 0.0)).xy;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy, -1.0);
    u_xlat16_2.x = u_xlat10_1.w + (-_MainTexAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(u_xlat16_2.x<0.0);
#else
    u_xlatb16 = u_xlat16_2.x<0.0;
#endif
    u_xlatb0.x = u_xlatb0.x && u_xlatb16;
    if((int(u_xlatb0.x) * int(0xffffffffu))!=0){discard;}
    u_xlat10_0.xzw = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xzw * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_2.xy = u_xlat16_2.xy * vec2(vec2(_BumpScale, _BumpScale));
    u_xlat3.x = dot(vs_TEXCOORD4.xyz, u_xlat16_2.xyz);
    u_xlat3.y = dot(vs_TEXCOORD5.xyz, u_xlat16_2.xyz);
    u_xlat3.z = dot(vs_TEXCOORD6.xyz, u_xlat16_2.xyz);
    u_xlat16_2.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat16_2.x = inversesqrt(u_xlat16_2.x);
    u_xlat16_2.xyz = u_xlat16_2.xxx * u_xlat3.xyz;
    u_xlat16_2.xyz = (uint((gl_FrontFacing ? 0xffffffffu : uint(0))) != uint(0u)) ? u_xlat16_2.xyz : (-u_xlat16_2.xyz);
    SV_Target0.xyz = u_xlat16_2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0470588244;
    u_xlat0.xzw = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat0.xzw = u_xlat0.xzw * u_xlat3.xxx + mhy_AvatarLightDir.xyz;
    u_xlat3.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat0.xzw = u_xlat0.xzw * u_xlat3.xxx;
    u_xlat16_26 = dot(u_xlat16_2.xyz, u_xlat0.xzw);
    u_xlat16_2.x = dot(u_xlat16_2.xyz, mhy_AvatarLightDir.xyz);
    u_xlat16_0 = u_xlat16_2.x * 0.497500002 + 0.5;
    u_xlat16_2.x = max(u_xlat16_26, 0.00100000005);
    u_xlat16_2.x = log2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * _Shininess;
    u_xlat16_2.x = exp2(u_xlat16_2.x);
    u_xlat16_2.xyz = u_xlat16_2.xxx * _SpecularColor.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(_SpecMulti);
    u_xlat10_16.xy = texture(_LightMapTex, vs_TEXCOORD0.xy, -1.0).xy;
    u_xlat16_2.xyz = u_xlat10_16.xxx * u_xlat16_2.xyz;
    u_xlatb3.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseLightMapColorAO, _UseVertexColorAO, _UseLightMapColorAO, _UseLightMapColorAO)).xy;
    u_xlat16_26 = (u_xlatb3.x) ? u_xlat10_16.y : 0.5;
    u_xlat16_4.x = u_xlat16_26 * vs_COLOR0.x;
    u_xlat16_26 = (u_xlatb3.y) ? u_xlat16_4.x : u_xlat16_26;
    u_xlat16_0 = u_xlat16_0 + u_xlat16_26;
    u_xlat0.x = u_xlat16_0 * 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(0.949999988<u_xlat16_26);
#else
    u_xlatb16 = 0.949999988<u_xlat16_26;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(u_xlat16_26<0.0500000007);
#else
    u_xlatb24 = u_xlat16_26<0.0500000007;
#endif
    u_xlat16_26 = (u_xlatb16) ? 1.0 : u_xlat0.x;
    u_xlat16_26 = (u_xlatb24) ? 0.0 : u_xlat16_26;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(u_xlat16_26<_LightArea);
#else
    u_xlatb0.x = u_xlat16_26<_LightArea;
#endif
    u_xlat16_26 = (-u_xlat16_26) + _LightArea;
    u_xlat16_26 = u_xlat16_26 / _ShadowTransitionRange;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(int((gl_FrontFacing ? 0xffffffffu : uint(0)))==0);
#else
    u_xlatb16 = int((gl_FrontFacing ? 0xffffffffu : uint(0)))==0;
#endif
    u_xlatb16 = u_xlatb0.x || u_xlatb16;
    u_xlat16_24 = u_xlat16_26 + 0.00999999978;
#ifdef UNITY_ADRENO_ES3
    u_xlatb3.x = !!(u_xlat16_26>=1.0);
#else
    u_xlatb3.x = u_xlat16_26>=1.0;
#endif
    u_xlat16_24 = log2(u_xlat16_24);
    u_xlat24 = u_xlat16_24 * _ShadowTransitionSoftness;
    u_xlat24 = exp2(u_xlat24);
    u_xlat24 = min(u_xlat24, 1.0);
    u_xlat24 = (u_xlatb3.x) ? 1.0 : u_xlat24;
#ifdef UNITY_ADRENO_ES3
    u_xlatb3.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition));
#else
    u_xlatb3.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition);
#endif
    u_xlat24 = (u_xlatb3.x) ? u_xlat24 : 1.0;
    u_xlat0.x = u_xlatb0.x ? u_xlat24 : float(0.0);
    u_xlat16_11.xyz = vec3(_FirstShadowMultColor.xxyz.y + (-_CoolShadowMultColor.x), _FirstShadowMultColor.xxyz.z + (-_CoolShadowMultColor.y), float(_FirstShadowMultColor.z) + (-_CoolShadowMultColor.z));
    u_xlat11.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_11.xyz + _CoolShadowMultColor.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex));
#else
    u_xlatb24 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex);
#endif
    u_xlat16_4.xyz = (bool(u_xlatb24)) ? u_xlat11.xyz : vec3(_FirstShadowMultColor.x, _FirstShadowMultColor.y, _FirstShadowMultColor.z);
    u_xlat16_11.xyz = u_xlat16_4.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat11.xyz = u_xlat0.xxx * u_xlat16_11.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_5.xyz = (u_xlatb3.x) ? u_xlat11.xyz : u_xlat16_4.xyz;
    u_xlat16_6.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_6.xyz;
    u_xlat1.xyz = u_xlat16_6.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
    u_xlat0.xzw = (bool(u_xlatb16)) ? u_xlat16_5.xyz : u_xlat1.xyz;
    u_xlat16_5.xyz = u_xlat16_2.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness)) + u_xlat0.xzw;
    u_xlat0.xzw = u_xlat16_2.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
    u_xlat16_2.xyz = u_xlat16_6.xyz * u_xlat16_4.xyz + u_xlat0.xzw;
    u_xlat16_4.xyz = u_xlat16_6.xyz * _EmissionColor_MHY.xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * vec3(vec3(_EmissionScaler, _EmissionScaler, _EmissionScaler)) + (-u_xlat16_5.xyz);
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(vec3(_EmissionScaler, _EmissionScaler, _EmissionScaler)) + (-u_xlat16_2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(0.00999999978<u_xlat10_1.w);
#else
    u_xlatb0.x = 0.00999999978<u_xlat10_1.w;
#endif
    u_xlatb0.x = u_xlatb0.x && u_xlatb0.y;
    u_xlat16_26 = (u_xlatb0.x) ? u_xlat10_1.w : 0.0;
    u_xlat16_6.xyz = vec3(u_xlat16_26) * u_xlat16_6.xyz + u_xlat16_5.xyz;
    u_xlat16_5.xyz = (u_xlatb0.x) ? u_xlat16_6.xyz : u_xlat16_5.xyz;
    u_xlat8.xyz = u_xlat16_5.xyz * vec3(vec3(_ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness));
    u_xlat1.xyz = _ES_CharacterMainLightColor.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat1.xyz = vec3(vec3(_ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio)) * u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat8.xyz = u_xlat8.xyz * u_xlat1.xyz;
    u_xlat16_6.xyz = u_xlat8.xyz * vec3(10.0, 10.0, 10.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.xyz = min(max(u_xlat16_6.xyz, 0.0), 1.0);
#else
    u_xlat16_6.xyz = clamp(u_xlat16_6.xyz, 0.0, 1.0);
#endif
    u_xlat1.xyz = _ES_CharacterAmbientLightColor.xyz * vec3(_ES_CharacterAmbientLightRatio);
    u_xlat8.xyz = u_xlat1.xyz * u_xlat16_6.xyz + u_xlat8.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn));
#else
    u_xlatb1 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn);
#endif
    u_xlat16_6.xyz = (bool(u_xlatb1)) ? u_xlat8.xyz : u_xlat16_5.xyz;
    u_xlat16_7.xyz = u_xlat16_5.xyz + (-u_xlat16_6.xyz);
    u_xlat16_7.xyz = vec3(u_xlat16_26) * u_xlat16_7.xyz + u_xlat16_6.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.00999999978<u_xlat16_26);
#else
    u_xlatb8 = 0.00999999978<u_xlat16_26;
#endif
    u_xlat16_1.xyz = (bool(u_xlatb8)) ? u_xlat16_7.xyz : u_xlat16_6.xyz;
    u_xlat16_28 = max(u_xlat16_1.z, u_xlat16_1.y);
    u_xlat16_3.w = max(u_xlat16_1.x, u_xlat16_28);
    u_xlat16_3.xyz = u_xlat16_1.xyz / u_xlat16_3.www;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(1.0<u_xlat16_3.w);
#else
    u_xlatb16 = 1.0<u_xlat16_3.w;
#endif
    u_xlat16_1.w = 1.0;
    u_xlat16_1 = (bool(u_xlatb16)) ? u_xlat16_3 : u_xlat16_1;
    u_xlat16_28 = min(u_xlat16_1.w, 1.10000002);
    u_xlat16_29 = u_xlat16_1.w + (-u_xlat16_28);
    SV_Target1.xyz = u_xlat16_1.xyz;
    u_xlat16_28 = u_xlat16_26 * u_xlat16_29 + u_xlat16_28;
    SV_Target1.w = u_xlat16_28 * 0.0500000007;
    u_xlat16_4.xyz = vec3(u_xlat16_26) * u_xlat16_4.xyz + u_xlat16_2.xyz;
    u_xlat16_2.xyz = (u_xlatb0.x) ? u_xlat16_4.xyz : u_xlat16_2.xyz;
    u_xlat16_4.xyz = (-u_xlat16_2.xyz) + u_xlat16_5.xyz;
    u_xlat16_4.xyz = vec3(u_xlat16_26) * u_xlat16_4.xyz + u_xlat16_2.xyz;
    u_xlat16_2.xyz = (bool(u_xlatb8)) ? u_xlat16_4.xyz : u_xlat16_2.xyz;
    SV_Target2.xy = u_xlat16_2.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_2.x = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb0.x) ? u_xlat16_2.x : u_xlat16_2.z;
    SV_Target2.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "MSAA_INTERPOLATION" "TOON_LIGHTMAP_ON" "BACK_FACE_ON" "NORMAL_MAP_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
float u_xlat12;
void main()
{
    u_xlat0.x = hlslcc_mtx4x4unity_ObjectToWorld[0].y;
    u_xlat0.y = hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat0.z = hlslcc_mtx4x4unity_ObjectToWorld[2].y;
    u_xlat1.xyw = (-_WorldSpaceCameraPos.xyz) + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat0.w = u_xlat1.y;
    u_xlat2.xyz = in_POSITION0.xyz;
    u_xlat2.w = 1.0;
    u_xlat0.x = dot(u_xlat0, u_xlat2);
    u_xlat0 = u_xlat0.xxxx * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat3.w = u_xlat1.x;
    u_xlat3.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;
    u_xlat3.y = hlslcc_mtx4x4unity_ObjectToWorld[1].x;
    u_xlat3.z = hlslcc_mtx4x4unity_ObjectToWorld[2].x;
    u_xlat3.x = dot(u_xlat3, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat3.xxxx + u_xlat0;
    u_xlat1.x = hlslcc_mtx4x4unity_ObjectToWorld[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_ObjectToWorld[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_ObjectToWorld[2].z;
    u_xlat1.x = dot(u_xlat1, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat1.xxxx + u_xlat0;
    u_xlat1.x = hlslcc_mtx4x4unity_ObjectToWorld[0].w;
    u_xlat1.y = hlslcc_mtx4x4unity_ObjectToWorld[1].w;
    u_xlat1.z = hlslcc_mtx4x4unity_ObjectToWorld[2].w;
    u_xlat1.w = hlslcc_mtx4x4unity_ObjectToWorld[3].w;
    u_xlat1.x = dot(u_xlat1, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[3] * u_xlat1.xxxx + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD1 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.zw = u_xlat0.zw;
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD3.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
    u_xlat12 = in_TANGENT0.w * unity_WorldTransformParams.w;
    u_xlat2.xyz = vec3(u_xlat12) * u_xlat2.xyz;
    vs_TEXCOORD4.y = u_xlat2.x;
    vs_TEXCOORD4.x = u_xlat1.z;
    vs_TEXCOORD4.z = u_xlat0.y;
    vs_TEXCOORD5.x = u_xlat1.x;
    vs_TEXCOORD6.x = u_xlat1.y;
    vs_TEXCOORD5.z = u_xlat0.z;
    vs_TEXCOORD6.z = u_xlat0.x;
    vs_TEXCOORD5.y = u_xlat2.y;
    vs_TEXCOORD6.y = u_xlat2.z;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	mediump vec4 _Color;
uniform 	float _MainTexAlphaUse;
uniform 	mediump float _MainTexAlphaCutoff;
uniform 	mediump float _BumpScale;
uniform 	float _UseLightMapColorAO;
uniform 	float _UseVertexColorAO;
uniform 	mediump float _LightArea;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	float _UseCoolShadowColorOrTex;
uniform 	mediump vec3 _CoolShadowMultColor;
uniform 	float _UseShadowTransition;
uniform 	float _ShadowTransitionRange;
uniform 	float _ShadowTransitionSoftness;
uniform 	mediump vec3 _SpecularColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump float _EmissionScaler;
uniform 	mediump vec3 _EmissionColor_MHY;
uniform 	float _ES_CharacterAmbientLightOn;
uniform 	float _ES_CharacterAmbientBrightness;
uniform 	vec3 _ES_CharacterMainLightColor;
uniform 	float _ES_CharacterMainLightBrightness;
uniform 	vec3 _ES_CharacterAmbientLightColor;
uniform 	float _ES_CharacterMainLightRatio;
uniform 	float _ES_CharacterAmbientLightRatio;
uniform 	float _ES_CharacterColorTone;
uniform 	vec3 mhy_AvatarLightDir;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMapTex;
in mediump vec4 vs_COLOR0;
in highp vec2 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD5;
in highp vec3 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec4 u_xlat0;
mediump float u_xlat16_0;
lowp vec2 u_xlat10_0;
bvec4 u_xlatb0;
vec3 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
bool u_xlatb1;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump vec4 u_xlat16_3;
lowp vec4 u_xlat10_3;
bvec2 u_xlatb3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
vec3 u_xlat9;
bool u_xlatb9;
vec2 u_xlat18;
mediump float u_xlat16_18;
bool u_xlatb18;
bool u_xlatb27;
mediump float u_xlat16_29;
mediump float u_xlat16_32;
mediump float u_xlat16_33;
void main()
{
    u_xlat0.xy = dFdx(vs_TEXCOORD0.xy);
    u_xlat18.xy = dFdy(vs_TEXCOORD0.xy);
    u_xlat0.xy = u_xlat18.xy + u_xlat0.xy;
    u_xlat18.xy = (-u_xlat0.xy) * vec2(0.25, 0.25) + vs_TEXCOORD0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25) + vs_TEXCOORD0.xy;
    u_xlat0.xy = (int(gl_SampleID) != 0) ? u_xlat18.xy : u_xlat0.xy;
    u_xlat10_1 = textureLod(_MainTex, u_xlat0.xy, 0.0);
    u_xlat16_2.x = u_xlat10_1.w + (-_MainTexAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(u_xlat16_2.x<0.0);
#else
    u_xlatb18 = u_xlat16_2.x<0.0;
#endif
    u_xlatb3.xy = equal(vec4(_MainTexAlphaUse), vec4(1.0, 2.0, 0.0, 0.0)).xy;
    u_xlatb18 = u_xlatb18 && u_xlatb3.x;
    if((int(u_xlatb18) * int(0xffffffffu))!=0){discard;}
    u_xlat10_3.xzw = textureLod(_BumpMap, u_xlat0.xy, 0.0).xyz;
    u_xlat10_0.xy = textureLod(_LightMapTex, u_xlat0.xy, 0.0).xy;
    u_xlat16_2.xyz = u_xlat10_3.xzw * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_2.xy = u_xlat16_2.xy * vec2(vec2(_BumpScale, _BumpScale));
    u_xlat4.x = dot(vs_TEXCOORD4.xyz, u_xlat16_2.xyz);
    u_xlat4.y = dot(vs_TEXCOORD5.xyz, u_xlat16_2.xyz);
    u_xlat4.z = dot(vs_TEXCOORD6.xyz, u_xlat16_2.xyz);
    u_xlat16_2.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat16_2.x = inversesqrt(u_xlat16_2.x);
    u_xlat16_2.xyz = u_xlat16_2.xxx * u_xlat4.xyz;
    u_xlat16_2.xyz = (uint((gl_FrontFacing ? 0xffffffffu : uint(0))) != uint(0u)) ? u_xlat16_2.xyz : (-u_xlat16_2.xyz);
    SV_Target0.xyz = u_xlat16_2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0470588244;
    u_xlat3.xzw = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat18.x = dot(u_xlat3.xzw, u_xlat3.xzw);
    u_xlat18.x = inversesqrt(u_xlat18.x);
    u_xlat3.xzw = u_xlat3.xzw * u_xlat18.xxx + mhy_AvatarLightDir.xyz;
    u_xlat18.x = dot(u_xlat3.xzw, u_xlat3.xzw);
    u_xlat18.x = inversesqrt(u_xlat18.x);
    u_xlat3.xzw = u_xlat18.xxx * u_xlat3.xzw;
    u_xlat16_29 = dot(u_xlat16_2.xyz, u_xlat3.xzw);
    u_xlat16_2.x = dot(u_xlat16_2.xyz, mhy_AvatarLightDir.xyz);
    u_xlat16_18 = u_xlat16_2.x * 0.497500002 + 0.5;
    u_xlat16_2.x = max(u_xlat16_29, 0.00100000005);
    u_xlat16_2.x = log2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * _Shininess;
    u_xlat16_2.x = exp2(u_xlat16_2.x);
    u_xlat16_2.xyz = u_xlat16_2.xxx * _SpecularColor.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(_SpecMulti);
    u_xlat16_2.xyz = u_xlat10_0.xxx * u_xlat16_2.xyz;
    u_xlatb0.xw = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseLightMapColorAO, _UseLightMapColorAO, _UseLightMapColorAO, _UseVertexColorAO)).xw;
    u_xlat16_29 = (u_xlatb0.x) ? u_xlat10_0.y : 0.5;
    u_xlat16_5.x = u_xlat16_29 * vs_COLOR0.x;
    u_xlat16_29 = (u_xlatb0.w) ? u_xlat16_5.x : u_xlat16_29;
    u_xlat16_0 = u_xlat16_18 + u_xlat16_29;
    u_xlat0.x = u_xlat16_0 * 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(0.949999988<u_xlat16_29);
#else
    u_xlatb9 = 0.949999988<u_xlat16_29;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(u_xlat16_29<0.0500000007);
#else
    u_xlatb18 = u_xlat16_29<0.0500000007;
#endif
    u_xlat16_29 = (u_xlatb9) ? 1.0 : u_xlat0.x;
    u_xlat16_29 = (u_xlatb18) ? 0.0 : u_xlat16_29;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(u_xlat16_29<_LightArea);
#else
    u_xlatb0.x = u_xlat16_29<_LightArea;
#endif
    u_xlat16_29 = (-u_xlat16_29) + _LightArea;
    u_xlat16_29 = u_xlat16_29 / _ShadowTransitionRange;
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(int((gl_FrontFacing ? 0xffffffffu : uint(0)))==0);
#else
    u_xlatb9 = int((gl_FrontFacing ? 0xffffffffu : uint(0)))==0;
#endif
    u_xlatb9 = u_xlatb0.x || u_xlatb9;
    u_xlat16_18 = u_xlat16_29 + 0.00999999978;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(u_xlat16_29>=1.0);
#else
    u_xlatb27 = u_xlat16_29>=1.0;
#endif
    u_xlat16_18 = log2(u_xlat16_18);
    u_xlat18.x = u_xlat16_18 * _ShadowTransitionSoftness;
    u_xlat18.x = exp2(u_xlat18.x);
    u_xlat18.x = min(u_xlat18.x, 1.0);
    u_xlat18.x = (u_xlatb27) ? 1.0 : u_xlat18.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition));
#else
    u_xlatb27 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition);
#endif
    u_xlat18.x = (u_xlatb27) ? u_xlat18.x : 1.0;
    u_xlat0.x = u_xlatb0.x ? u_xlat18.x : float(0.0);
    u_xlat16_3.xzw = vec3(_FirstShadowMultColor.xxyz.y + (-_CoolShadowMultColor.x), _FirstShadowMultColor.xxyz.z + (-_CoolShadowMultColor.y), float(_FirstShadowMultColor.z) + (-_CoolShadowMultColor.z));
    u_xlat3.xzw = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_3.xzw + _CoolShadowMultColor.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex));
#else
    u_xlatb18 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex);
#endif
    u_xlat16_5.xyz = (bool(u_xlatb18)) ? u_xlat3.xzw : vec3(_FirstShadowMultColor.x, _FirstShadowMultColor.y, _FirstShadowMultColor.z);
    u_xlat16_3.xzw = u_xlat16_5.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat3.xzw = u_xlat0.xxx * u_xlat16_3.xzw + vec3(1.0, 1.0, 1.0);
    u_xlat16_6.xyz = (bool(u_xlatb27)) ? u_xlat3.xzw : u_xlat16_5.xyz;
    u_xlat16_7.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_7.xyz;
    u_xlat0.xzw = u_xlat16_7.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
    u_xlat0.xyz = (bool(u_xlatb9)) ? u_xlat16_6.xyz : u_xlat0.xzw;
    u_xlat16_6.xyz = u_xlat16_2.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness)) + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat16_2.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
    u_xlat16_2.xyz = u_xlat16_7.xyz * u_xlat16_5.xyz + u_xlat0.xyz;
    u_xlat16_5.xyz = u_xlat16_7.xyz * _EmissionColor_MHY.xyz;
    u_xlat16_7.xyz = u_xlat16_5.xyz * vec3(vec3(_EmissionScaler, _EmissionScaler, _EmissionScaler)) + (-u_xlat16_6.xyz);
    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(vec3(_EmissionScaler, _EmissionScaler, _EmissionScaler)) + (-u_xlat16_2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(0.00999999978<u_xlat10_1.w);
#else
    u_xlatb0.x = 0.00999999978<u_xlat10_1.w;
#endif
    u_xlatb0.x = u_xlatb0.x && u_xlatb3.y;
    u_xlat16_29 = (u_xlatb0.x) ? u_xlat10_1.w : 0.0;
    u_xlat16_7.xyz = vec3(u_xlat16_29) * u_xlat16_7.xyz + u_xlat16_6.xyz;
    u_xlat16_6.xyz = (u_xlatb0.x) ? u_xlat16_7.xyz : u_xlat16_6.xyz;
    u_xlat9.xyz = u_xlat16_6.xyz * vec3(vec3(_ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness));
    u_xlat1.xyz = _ES_CharacterMainLightColor.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat1.xyz = vec3(vec3(_ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio)) * u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat9.xyz = u_xlat9.xyz * u_xlat1.xyz;
    u_xlat16_7.xyz = u_xlat9.xyz * vec3(10.0, 10.0, 10.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.xyz = min(max(u_xlat16_7.xyz, 0.0), 1.0);
#else
    u_xlat16_7.xyz = clamp(u_xlat16_7.xyz, 0.0, 1.0);
#endif
    u_xlat1.xyz = _ES_CharacterAmbientLightColor.xyz * vec3(_ES_CharacterAmbientLightRatio);
    u_xlat9.xyz = u_xlat1.xyz * u_xlat16_7.xyz + u_xlat9.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn));
#else
    u_xlatb1 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn);
#endif
    u_xlat16_7.xyz = (bool(u_xlatb1)) ? u_xlat9.xyz : u_xlat16_6.xyz;
    u_xlat16_8.xyz = u_xlat16_6.xyz + (-u_xlat16_7.xyz);
    u_xlat16_8.xyz = vec3(u_xlat16_29) * u_xlat16_8.xyz + u_xlat16_7.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(0.00999999978<u_xlat16_29);
#else
    u_xlatb9 = 0.00999999978<u_xlat16_29;
#endif
    u_xlat16_1.xyz = (bool(u_xlatb9)) ? u_xlat16_8.xyz : u_xlat16_7.xyz;
    u_xlat16_32 = max(u_xlat16_1.z, u_xlat16_1.y);
    u_xlat16_3.w = max(u_xlat16_1.x, u_xlat16_32);
    u_xlat16_3.xyz = u_xlat16_1.xyz / u_xlat16_3.www;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(1.0<u_xlat16_3.w);
#else
    u_xlatb18 = 1.0<u_xlat16_3.w;
#endif
    u_xlat16_1.w = 1.0;
    u_xlat16_1 = (bool(u_xlatb18)) ? u_xlat16_3 : u_xlat16_1;
    u_xlat16_32 = min(u_xlat16_1.w, 1.10000002);
    u_xlat16_33 = u_xlat16_1.w + (-u_xlat16_32);
    SV_Target1.xyz = u_xlat16_1.xyz;
    u_xlat16_32 = u_xlat16_29 * u_xlat16_33 + u_xlat16_32;
    SV_Target1.w = u_xlat16_32 * 0.0500000007;
    u_xlat16_5.xyz = vec3(u_xlat16_29) * u_xlat16_5.xyz + u_xlat16_2.xyz;
    u_xlat16_2.xyz = (u_xlatb0.x) ? u_xlat16_5.xyz : u_xlat16_2.xyz;
    u_xlat16_5.xyz = (-u_xlat16_2.xyz) + u_xlat16_6.xyz;
    u_xlat16_5.xyz = vec3(u_xlat16_29) * u_xlat16_5.xyz + u_xlat16_2.xyz;
    u_xlat16_2.xyz = (bool(u_xlatb9)) ? u_xlat16_5.xyz : u_xlat16_2.xyz;
    SV_Target2.xy = u_xlat16_2.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_2.x = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb0.x) ? u_xlat16_2.x : u_xlat16_2.z;
    SV_Target2.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "LINE_INTERPOLATION" "TOON_LIGHTMAP_ON" "BACK_FACE_ON" "NORMAL_MAP_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
float u_xlat12;
void main()
{
    u_xlat0.x = hlslcc_mtx4x4unity_ObjectToWorld[0].y;
    u_xlat0.y = hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat0.z = hlslcc_mtx4x4unity_ObjectToWorld[2].y;
    u_xlat1.xyw = (-_WorldSpaceCameraPos.xyz) + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat0.w = u_xlat1.y;
    u_xlat2.xyz = in_POSITION0.xyz;
    u_xlat2.w = 1.0;
    u_xlat0.x = dot(u_xlat0, u_xlat2);
    u_xlat0 = u_xlat0.xxxx * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat3.w = u_xlat1.x;
    u_xlat3.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;
    u_xlat3.y = hlslcc_mtx4x4unity_ObjectToWorld[1].x;
    u_xlat3.z = hlslcc_mtx4x4unity_ObjectToWorld[2].x;
    u_xlat3.x = dot(u_xlat3, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat3.xxxx + u_xlat0;
    u_xlat1.x = hlslcc_mtx4x4unity_ObjectToWorld[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_ObjectToWorld[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_ObjectToWorld[2].z;
    u_xlat1.x = dot(u_xlat1, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat1.xxxx + u_xlat0;
    u_xlat1.x = hlslcc_mtx4x4unity_ObjectToWorld[0].w;
    u_xlat1.y = hlslcc_mtx4x4unity_ObjectToWorld[1].w;
    u_xlat1.z = hlslcc_mtx4x4unity_ObjectToWorld[2].w;
    u_xlat1.w = hlslcc_mtx4x4unity_ObjectToWorld[3].w;
    u_xlat1.x = dot(u_xlat1, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[3] * u_xlat1.xxxx + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD1 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.zw = u_xlat0.zw;
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD3.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
    u_xlat12 = in_TANGENT0.w * unity_WorldTransformParams.w;
    u_xlat2.xyz = vec3(u_xlat12) * u_xlat2.xyz;
    vs_TEXCOORD4.y = u_xlat2.x;
    vs_TEXCOORD4.x = u_xlat1.z;
    vs_TEXCOORD4.z = u_xlat0.y;
    vs_TEXCOORD5.x = u_xlat1.x;
    vs_TEXCOORD6.x = u_xlat1.y;
    vs_TEXCOORD5.z = u_xlat0.z;
    vs_TEXCOORD6.z = u_xlat0.x;
    vs_TEXCOORD5.y = u_xlat2.y;
    vs_TEXCOORD6.y = u_xlat2.z;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	mediump vec4 _Color;
uniform 	float _MainTexAlphaUse;
uniform 	mediump float _MainTexAlphaCutoff;
uniform 	mediump float _BumpScale;
uniform 	float _UseLightMapColorAO;
uniform 	float _UseVertexColorAO;
uniform 	mediump float _LightArea;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	float _UseCoolShadowColorOrTex;
uniform 	mediump vec3 _CoolShadowMultColor;
uniform 	float _UseShadowTransition;
uniform 	float _ShadowTransitionRange;
uniform 	float _ShadowTransitionSoftness;
uniform 	mediump vec3 _SpecularColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump float _EmissionScaler;
uniform 	mediump vec3 _EmissionColor_MHY;
uniform 	float _ES_CharacterAmbientLightOn;
uniform 	float _ES_CharacterAmbientBrightness;
uniform 	vec3 _ES_CharacterMainLightColor;
uniform 	float _ES_CharacterMainLightBrightness;
uniform 	vec3 _ES_CharacterAmbientLightColor;
uniform 	float _ES_CharacterMainLightRatio;
uniform 	float _ES_CharacterAmbientLightRatio;
uniform 	float _ES_CharacterColorTone;
uniform 	vec3 mhy_AvatarLightDir;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMapTex;
in mediump vec4 vs_COLOR0;
in highp vec2 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD5;
in highp vec3 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec4 u_xlat0;
mediump float u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
vec3 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
bool u_xlatb1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump vec4 u_xlat16_3;
bvec2 u_xlatb3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
bool u_xlatb8;
vec3 u_xlat11;
mediump vec3 u_xlat16_11;
lowp vec2 u_xlat10_16;
bool u_xlatb16;
float u_xlat24;
mediump float u_xlat16_24;
bool u_xlatb24;
mediump float u_xlat16_26;
mediump float u_xlat16_28;
mediump float u_xlat16_29;
void main()
{
    u_xlatb0.xy = equal(vec4(_MainTexAlphaUse), vec4(1.0, 2.0, 0.0, 0.0)).xy;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy, -1.0);
    u_xlat16_2.x = u_xlat10_1.w + (-_MainTexAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(u_xlat16_2.x<0.0);
#else
    u_xlatb16 = u_xlat16_2.x<0.0;
#endif
    u_xlatb0.x = u_xlatb0.x && u_xlatb16;
    if((int(u_xlatb0.x) * int(0xffffffffu))!=0){discard;}
    u_xlat10_0.xzw = texture(_BumpMap, vs_TEXCOORD0.xy, -1.0).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xzw * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_2.xy = u_xlat16_2.xy * vec2(vec2(_BumpScale, _BumpScale));
    u_xlat3.x = dot(vs_TEXCOORD4.xyz, u_xlat16_2.xyz);
    u_xlat3.y = dot(vs_TEXCOORD5.xyz, u_xlat16_2.xyz);
    u_xlat3.z = dot(vs_TEXCOORD6.xyz, u_xlat16_2.xyz);
    u_xlat16_2.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat16_2.x = inversesqrt(u_xlat16_2.x);
    u_xlat16_2.xyz = u_xlat16_2.xxx * u_xlat3.xyz;
    u_xlat16_2.xyz = (uint((gl_FrontFacing ? 0xffffffffu : uint(0))) != uint(0u)) ? u_xlat16_2.xyz : (-u_xlat16_2.xyz);
    SV_Target0.xyz = u_xlat16_2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0470588244;
    u_xlat0.xzw = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat0.xzw = u_xlat0.xzw * u_xlat3.xxx + mhy_AvatarLightDir.xyz;
    u_xlat3.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat0.xzw = u_xlat0.xzw * u_xlat3.xxx;
    u_xlat16_26 = dot(u_xlat16_2.xyz, u_xlat0.xzw);
    u_xlat16_2.x = dot(u_xlat16_2.xyz, mhy_AvatarLightDir.xyz);
    u_xlat16_0 = u_xlat16_2.x * 0.497500002 + 0.5;
    u_xlat16_2.x = max(u_xlat16_26, 0.00100000005);
    u_xlat16_2.x = log2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * _Shininess;
    u_xlat16_2.x = exp2(u_xlat16_2.x);
    u_xlat16_2.xyz = u_xlat16_2.xxx * _SpecularColor.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(_SpecMulti);
    u_xlat10_16.xy = texture(_LightMapTex, vs_TEXCOORD0.xy, -1.0).xy;
    u_xlat16_2.xyz = u_xlat10_16.xxx * u_xlat16_2.xyz;
    u_xlatb3.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseLightMapColorAO, _UseVertexColorAO, _UseLightMapColorAO, _UseLightMapColorAO)).xy;
    u_xlat16_26 = (u_xlatb3.x) ? u_xlat10_16.y : 0.5;
    u_xlat16_4.x = u_xlat16_26 * vs_COLOR0.x;
    u_xlat16_26 = (u_xlatb3.y) ? u_xlat16_4.x : u_xlat16_26;
    u_xlat16_0 = u_xlat16_0 + u_xlat16_26;
    u_xlat0.x = u_xlat16_0 * 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(0.949999988<u_xlat16_26);
#else
    u_xlatb16 = 0.949999988<u_xlat16_26;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(u_xlat16_26<0.0500000007);
#else
    u_xlatb24 = u_xlat16_26<0.0500000007;
#endif
    u_xlat16_26 = (u_xlatb16) ? 1.0 : u_xlat0.x;
    u_xlat16_26 = (u_xlatb24) ? 0.0 : u_xlat16_26;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(u_xlat16_26<_LightArea);
#else
    u_xlatb0.x = u_xlat16_26<_LightArea;
#endif
    u_xlat16_26 = (-u_xlat16_26) + _LightArea;
    u_xlat16_26 = u_xlat16_26 / _ShadowTransitionRange;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(int((gl_FrontFacing ? 0xffffffffu : uint(0)))==0);
#else
    u_xlatb16 = int((gl_FrontFacing ? 0xffffffffu : uint(0)))==0;
#endif
    u_xlatb16 = u_xlatb0.x || u_xlatb16;
    u_xlat16_24 = u_xlat16_26 + 0.00999999978;
#ifdef UNITY_ADRENO_ES3
    u_xlatb3.x = !!(u_xlat16_26>=1.0);
#else
    u_xlatb3.x = u_xlat16_26>=1.0;
#endif
    u_xlat16_24 = log2(u_xlat16_24);
    u_xlat24 = u_xlat16_24 * _ShadowTransitionSoftness;
    u_xlat24 = exp2(u_xlat24);
    u_xlat24 = min(u_xlat24, 1.0);
    u_xlat24 = (u_xlatb3.x) ? 1.0 : u_xlat24;
#ifdef UNITY_ADRENO_ES3
    u_xlatb3.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition));
#else
    u_xlatb3.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition);
#endif
    u_xlat24 = (u_xlatb3.x) ? u_xlat24 : 1.0;
    u_xlat0.x = u_xlatb0.x ? u_xlat24 : float(0.0);
    u_xlat16_11.xyz = vec3(_FirstShadowMultColor.xxyz.y + (-_CoolShadowMultColor.x), _FirstShadowMultColor.xxyz.z + (-_CoolShadowMultColor.y), float(_FirstShadowMultColor.z) + (-_CoolShadowMultColor.z));
    u_xlat11.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_11.xyz + _CoolShadowMultColor.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex));
#else
    u_xlatb24 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex);
#endif
    u_xlat16_4.xyz = (bool(u_xlatb24)) ? u_xlat11.xyz : vec3(_FirstShadowMultColor.x, _FirstShadowMultColor.y, _FirstShadowMultColor.z);
    u_xlat16_11.xyz = u_xlat16_4.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat11.xyz = u_xlat0.xxx * u_xlat16_11.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_5.xyz = (u_xlatb3.x) ? u_xlat11.xyz : u_xlat16_4.xyz;
    u_xlat16_6.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_6.xyz;
    u_xlat1.xyz = u_xlat16_6.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
    u_xlat0.xzw = (bool(u_xlatb16)) ? u_xlat16_5.xyz : u_xlat1.xyz;
    u_xlat16_5.xyz = u_xlat16_2.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness)) + u_xlat0.xzw;
    u_xlat0.xzw = u_xlat16_2.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
    u_xlat16_2.xyz = u_xlat16_6.xyz * u_xlat16_4.xyz + u_xlat0.xzw;
    u_xlat16_4.xyz = u_xlat16_6.xyz * _EmissionColor_MHY.xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * vec3(vec3(_EmissionScaler, _EmissionScaler, _EmissionScaler)) + (-u_xlat16_5.xyz);
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(vec3(_EmissionScaler, _EmissionScaler, _EmissionScaler)) + (-u_xlat16_2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(0.00999999978<u_xlat10_1.w);
#else
    u_xlatb0.x = 0.00999999978<u_xlat10_1.w;
#endif
    u_xlatb0.x = u_xlatb0.x && u_xlatb0.y;
    u_xlat16_26 = (u_xlatb0.x) ? u_xlat10_1.w : 0.0;
    u_xlat16_6.xyz = vec3(u_xlat16_26) * u_xlat16_6.xyz + u_xlat16_5.xyz;
    u_xlat16_5.xyz = (u_xlatb0.x) ? u_xlat16_6.xyz : u_xlat16_5.xyz;
    u_xlat8.xyz = u_xlat16_5.xyz * vec3(vec3(_ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness));
    u_xlat1.xyz = _ES_CharacterMainLightColor.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat1.xyz = vec3(vec3(_ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio)) * u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat8.xyz = u_xlat8.xyz * u_xlat1.xyz;
    u_xlat16_6.xyz = u_xlat8.xyz * vec3(10.0, 10.0, 10.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.xyz = min(max(u_xlat16_6.xyz, 0.0), 1.0);
#else
    u_xlat16_6.xyz = clamp(u_xlat16_6.xyz, 0.0, 1.0);
#endif
    u_xlat1.xyz = _ES_CharacterAmbientLightColor.xyz * vec3(_ES_CharacterAmbientLightRatio);
    u_xlat8.xyz = u_xlat1.xyz * u_xlat16_6.xyz + u_xlat8.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn));
#else
    u_xlatb1 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn);
#endif
    u_xlat16_6.xyz = (bool(u_xlatb1)) ? u_xlat8.xyz : u_xlat16_5.xyz;
    u_xlat16_7.xyz = u_xlat16_5.xyz + (-u_xlat16_6.xyz);
    u_xlat16_7.xyz = vec3(u_xlat16_26) * u_xlat16_7.xyz + u_xlat16_6.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.00999999978<u_xlat16_26);
#else
    u_xlatb8 = 0.00999999978<u_xlat16_26;
#endif
    u_xlat16_1.xyz = (bool(u_xlatb8)) ? u_xlat16_7.xyz : u_xlat16_6.xyz;
    u_xlat16_28 = max(u_xlat16_1.z, u_xlat16_1.y);
    u_xlat16_3.w = max(u_xlat16_1.x, u_xlat16_28);
    u_xlat16_3.xyz = u_xlat16_1.xyz / u_xlat16_3.www;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(1.0<u_xlat16_3.w);
#else
    u_xlatb16 = 1.0<u_xlat16_3.w;
#endif
    u_xlat16_1.w = 1.0;
    u_xlat16_1 = (bool(u_xlatb16)) ? u_xlat16_3 : u_xlat16_1;
    u_xlat16_28 = min(u_xlat16_1.w, 1.10000002);
    u_xlat16_29 = u_xlat16_1.w + (-u_xlat16_28);
    SV_Target1.xyz = u_xlat16_1.xyz;
    u_xlat16_28 = u_xlat16_26 * u_xlat16_29 + u_xlat16_28;
    SV_Target1.w = u_xlat16_28 * 0.0500000007;
    u_xlat16_4.xyz = vec3(u_xlat16_26) * u_xlat16_4.xyz + u_xlat16_2.xyz;
    u_xlat16_2.xyz = (u_xlatb0.x) ? u_xlat16_4.xyz : u_xlat16_2.xyz;
    u_xlat16_4.xyz = (-u_xlat16_2.xyz) + u_xlat16_5.xyz;
    u_xlat16_4.xyz = vec3(u_xlat16_26) * u_xlat16_4.xyz + u_xlat16_2.xyz;
    u_xlat16_2.xyz = (bool(u_xlatb8)) ? u_xlat16_4.xyz : u_xlat16_2.xyz;
    SV_Target2.xy = u_xlat16_2.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_2.x = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb0.x) ? u_xlat16_2.x : u_xlat16_2.z;
    SV_Target2.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "TOON_LIGHTMAP_ON" "BACK_FACE_ON" "METAL_MAT" "NORMAL_MAP_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
float u_xlat12;
void main()
{
    u_xlat0.x = hlslcc_mtx4x4unity_ObjectToWorld[0].y;
    u_xlat0.y = hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat0.z = hlslcc_mtx4x4unity_ObjectToWorld[2].y;
    u_xlat1.xyw = (-_WorldSpaceCameraPos.xyz) + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat0.w = u_xlat1.y;
    u_xlat2.xyz = in_POSITION0.xyz;
    u_xlat2.w = 1.0;
    u_xlat0.x = dot(u_xlat0, u_xlat2);
    u_xlat0 = u_xlat0.xxxx * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat3.w = u_xlat1.x;
    u_xlat3.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;
    u_xlat3.y = hlslcc_mtx4x4unity_ObjectToWorld[1].x;
    u_xlat3.z = hlslcc_mtx4x4unity_ObjectToWorld[2].x;
    u_xlat3.x = dot(u_xlat3, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat3.xxxx + u_xlat0;
    u_xlat1.x = hlslcc_mtx4x4unity_ObjectToWorld[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_ObjectToWorld[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_ObjectToWorld[2].z;
    u_xlat1.x = dot(u_xlat1, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat1.xxxx + u_xlat0;
    u_xlat1.x = hlslcc_mtx4x4unity_ObjectToWorld[0].w;
    u_xlat1.y = hlslcc_mtx4x4unity_ObjectToWorld[1].w;
    u_xlat1.z = hlslcc_mtx4x4unity_ObjectToWorld[2].w;
    u_xlat1.w = hlslcc_mtx4x4unity_ObjectToWorld[3].w;
    u_xlat1.x = dot(u_xlat1, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[3] * u_xlat1.xxxx + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD1 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.zw = u_xlat0.zw;
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD3.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
    u_xlat12 = in_TANGENT0.w * unity_WorldTransformParams.w;
    u_xlat2.xyz = vec3(u_xlat12) * u_xlat2.xyz;
    vs_TEXCOORD4.y = u_xlat2.x;
    vs_TEXCOORD4.x = u_xlat1.z;
    vs_TEXCOORD4.z = u_xlat0.y;
    vs_TEXCOORD5.x = u_xlat1.x;
    vs_TEXCOORD6.x = u_xlat1.y;
    vs_TEXCOORD5.z = u_xlat0.z;
    vs_TEXCOORD6.z = u_xlat0.x;
    vs_TEXCOORD5.y = u_xlat2.y;
    vs_TEXCOORD6.y = u_xlat2.z;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToCamera[4];
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	mediump vec4 _Color;
uniform 	float _MainTexAlphaUse;
uniform 	mediump float _MainTexAlphaCutoff;
uniform 	mediump float _BumpScale;
uniform 	float _UseLightMapColorAO;
uniform 	float _UseVertexColorAO;
uniform 	mediump float _LightArea;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	float _UseCoolShadowColorOrTex;
uniform 	mediump vec3 _CoolShadowMultColor;
uniform 	float _UseShadowTransition;
uniform 	float _ShadowTransitionRange;
uniform 	float _ShadowTransitionSoftness;
uniform 	mediump vec3 _SpecularColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump float _EmissionScaler;
uniform 	mediump vec3 _EmissionColor_MHY;
uniform 	mediump float _MTMapBrightness;
uniform 	float _MTMapTileScale;
uniform 	mediump vec3 _MTMapLightColor;
uniform 	mediump vec3 _MTMapDarkColor;
uniform 	mediump vec3 _MTShadowMultiColor;
uniform 	mediump float _MTShininess;
uniform 	mediump vec3 _MTSpecularColor;
uniform 	mediump float _MTSpecularScale;
uniform 	float _ES_CharacterAmbientLightOn;
uniform 	float _ES_CharacterAmbientBrightness;
uniform 	vec3 _ES_CharacterMainLightColor;
uniform 	float _ES_CharacterMainLightBrightness;
uniform 	vec3 _ES_CharacterAmbientLightColor;
uniform 	float _ES_CharacterMainLightRatio;
uniform 	float _ES_CharacterAmbientLightRatio;
uniform 	float _ES_CharacterColorTone;
uniform 	vec3 mhy_AvatarLightDir;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MTMap;
in mediump vec4 vs_COLOR0;
in highp vec2 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD5;
in highp vec3 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec3 u_xlat10_0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec4 u_xlat16_2;
lowp vec4 u_xlat10_2;
bool u_xlatb2;
lowp vec4 u_xlat10_3;
bvec2 u_xlatb3;
bvec2 u_xlatb4;
mediump float u_xlat16_5;
mediump float u_xlat16_6;
vec3 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
vec3 u_xlat11;
mediump vec3 u_xlat16_11;
bool u_xlatb11;
bool u_xlatb12;
vec3 u_xlat14;
bool u_xlatb14;
vec3 u_xlat15;
mediump vec3 u_xlat16_15;
mediump vec3 u_xlat16_17;
mediump vec3 u_xlat16_18;
mediump float u_xlat16_20;
float u_xlat26;
bool u_xlatb26;
float u_xlat36;
bool u_xlatb36;
mediump float u_xlat16_37;
float u_xlat38;
mediump float u_xlat16_38;
lowp float u_xlat10_38;
bool u_xlatb38;
void main()
{
    u_xlat10_0.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_1.xy = u_xlat16_1.xy * vec2(vec2(_BumpScale, _BumpScale));
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, u_xlat16_1.xyz);
    u_xlat0.y = dot(vs_TEXCOORD5.xyz, u_xlat16_1.xyz);
    u_xlat0.z = dot(vs_TEXCOORD6.xyz, u_xlat16_1.xyz);
    u_xlat16_1.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat16_1.x = inversesqrt(u_xlat16_1.x);
    u_xlat16_1.xyz = u_xlat0.xyz * u_xlat16_1.xxx;
    u_xlat16_1.xyz = (uint((gl_FrontFacing ? 0xffffffffu : uint(0))) != uint(0u)) ? u_xlat16_1.xyz : (-u_xlat16_1.xyz);
    u_xlat0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat36 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat36 = inversesqrt(u_xlat36);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat36) + mhy_AvatarLightDir.xyz;
    u_xlat36 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat36 = inversesqrt(u_xlat36);
    u_xlat0.xyz = vec3(u_xlat36) * u_xlat0.xyz;
    u_xlat10_2 = texture(_MainTex, vs_TEXCOORD0.xy, -1.0);
    u_xlatb3.xy = equal(vec4(_MainTexAlphaUse), vec4(1.0, 2.0, 0.0, 0.0)).xy;
    u_xlat16_37 = u_xlat10_2.w + (-_MainTexAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb36 = !!(u_xlat16_37<0.0);
#else
    u_xlatb36 = u_xlat16_37<0.0;
#endif
    u_xlatb36 = u_xlatb3.x && u_xlatb36;
    if((int(u_xlatb36) * int(0xffffffffu))!=0){discard;}
    u_xlat10_3.xzw = texture(_LightMapTex, vs_TEXCOORD0.xy, -1.0).xyz;
    u_xlatb4.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseLightMapColorAO, _UseVertexColorAO, _UseLightMapColorAO, _UseLightMapColorAO)).xy;
    u_xlat16_5 = (u_xlatb4.x) ? u_xlat10_3.z : 0.5;
    u_xlat16_17.xyz = u_xlat10_2.xyz * _Color.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb36 = !!(0.00999999978<u_xlat10_2.w);
#else
    u_xlatb36 = 0.00999999978<u_xlat10_2.w;
#endif
    u_xlatb36 = u_xlatb36 && u_xlatb3.y;
    u_xlat16_6 = (u_xlatb36) ? u_xlat10_2.w : 0.0;
    u_xlat16_18.x = dot(u_xlat16_1.xyz, mhy_AvatarLightDir.xyz);
    u_xlat16_2.x = u_xlat16_18.x * 0.497500002 + 0.5;
    u_xlat16_18.x = u_xlat16_5 * vs_COLOR0.x;
    u_xlat16_18.x = (u_xlatb4.y) ? u_xlat16_18.x : u_xlat16_5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(u_xlat16_18.x<0.0500000007);
#else
    u_xlatb14 = u_xlat16_18.x<0.0500000007;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb26 = !!(0.949999988<u_xlat16_18.x);
#else
    u_xlatb26 = 0.949999988<u_xlat16_18.x;
#endif
    u_xlat16_2.x = u_xlat16_2.x + u_xlat16_18.x;
    u_xlat2.x = u_xlat16_2.x * 0.5;
    u_xlat16_18.x = (u_xlatb26) ? 1.0 : u_xlat2.x;
    u_xlat16_18.x = (u_xlatb14) ? 0.0 : u_xlat16_18.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat16_18.x<_LightArea);
#else
    u_xlatb2 = u_xlat16_18.x<_LightArea;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition));
#else
    u_xlatb14 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition);
#endif
    u_xlat16_18.x = (-u_xlat16_18.x) + _LightArea;
    u_xlat16_18.x = u_xlat16_18.x / _ShadowTransitionRange;
#ifdef UNITY_ADRENO_ES3
    u_xlatb26 = !!(u_xlat16_18.x>=1.0);
#else
    u_xlatb26 = u_xlat16_18.x>=1.0;
#endif
    u_xlat16_38 = u_xlat16_18.x + 0.00999999978;
    u_xlat16_38 = log2(u_xlat16_38);
    u_xlat38 = u_xlat16_38 * _ShadowTransitionSoftness;
    u_xlat38 = exp2(u_xlat38);
    u_xlat38 = min(u_xlat38, 1.0);
    u_xlat26 = (u_xlatb26) ? 1.0 : u_xlat38;
    u_xlat26 = (u_xlatb14) ? u_xlat26 : 1.0;
    u_xlat26 = u_xlatb2 ? u_xlat26 : float(0.0);
    u_xlat2.x = u_xlatb2 ? 1.0 : float(0.0);
    u_xlat2.x = ((gl_FrontFacing ? 0xffffffffu : uint(0)) != uint(0u)) ? u_xlat2.x : 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb38 = !!(0.899999976<u_xlat10_3.x);
#else
    u_xlatb38 = 0.899999976<u_xlat10_3.x;
#endif
    if(u_xlatb38){
        u_xlat15.xy = u_xlat16_1.yy * hlslcc_mtx4x4unity_WorldToCamera[1].xy;
        u_xlat15.xy = hlslcc_mtx4x4unity_WorldToCamera[0].xy * u_xlat16_1.xx + u_xlat15.xy;
        u_xlat7.yz = hlslcc_mtx4x4unity_WorldToCamera[2].xy * u_xlat16_1.zz + u_xlat15.xy;
        u_xlat7.x = u_xlat7.y * _MTMapTileScale;
        u_xlat16_18.xy = u_xlat7.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
        u_xlat10_38 = texture(_MTMap, u_xlat16_18.xy).x;
        u_xlat16_18.x = u_xlat10_38 * _MTMapBrightness;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_18.x = min(max(u_xlat16_18.x, 0.0), 1.0);
#else
        u_xlat16_18.x = clamp(u_xlat16_18.x, 0.0, 1.0);
#endif
        u_xlat16_8.xyz = _MTMapLightColor.xyz + (-_MTMapDarkColor.xyz);
        u_xlat16_18.xyz = u_xlat16_18.xxx * u_xlat16_8.xyz + _MTMapDarkColor.xyz;
        u_xlat16_18.xyz = u_xlat16_17.xyz * u_xlat16_18.xyz;
        u_xlat16_8.x = dot(u_xlat16_1.xyz, u_xlat0.xyz);
        u_xlat16_8.x = max(u_xlat16_8.x, 0.00100000005);
        u_xlat16_8.x = log2(u_xlat16_8.x);
        u_xlat16_8.x = u_xlat16_8.x * _MTShininess;
        u_xlat16_8.x = exp2(u_xlat16_8.x);
        u_xlat16_8.x = u_xlat16_8.x * _MTSpecularScale;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_8.x = min(max(u_xlat16_8.x, 0.0), 1.0);
#else
        u_xlat16_8.x = clamp(u_xlat16_8.x, 0.0, 1.0);
#endif
        u_xlat16_8.xyz = u_xlat16_8.xxx * _MTSpecularColor.xyz;
        u_xlat16_8.xyz = u_xlat10_3.www * u_xlat16_8.xyz;
        u_xlat16_9.xyz = u_xlat16_18.xyz * _MTShadowMultiColor.xyz;
        u_xlat16_15.xyz = _MTShadowMultiColor.xyz + vec3(-1.0, -1.0, -1.0);
        u_xlat15.xyz = vec3(u_xlat26) * u_xlat16_15.xyz + vec3(1.0, 1.0, 1.0);
        u_xlat16_10.xyz = (bool(u_xlatb14)) ? u_xlat15.xyz : _MTShadowMultiColor.xyz;
#ifdef UNITY_ADRENO_ES3
        u_xlatb38 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(u_xlat2.x));
#else
        u_xlatb38 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(u_xlat2.x);
#endif
        u_xlat16_10.xyz = u_xlat16_18.xyz * u_xlat16_10.xyz;
        u_xlat15.xyz = u_xlat16_18.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
        u_xlat15.xyz = (bool(u_xlatb38)) ? u_xlat16_10.xyz : u_xlat15.xyz;
        u_xlat7.xyz = u_xlat16_8.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
        u_xlat16_15.xyz = u_xlat15.xyz;
        u_xlat16_7.xyz = u_xlat7.xyz;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb38 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex));
#else
        u_xlatb38 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex);
#endif
        u_xlat16_11.xyz = vec3(_FirstShadowMultColor.xxyz.y + (-_CoolShadowMultColor.x), _FirstShadowMultColor.xxyz.z + (-_CoolShadowMultColor.y), float(_FirstShadowMultColor.z) + (-_CoolShadowMultColor.z));
        u_xlat11.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_11.xyz + _CoolShadowMultColor.xyz;
        u_xlat16_18.xyz = (bool(u_xlatb38)) ? u_xlat11.xyz : vec3(_FirstShadowMultColor.x, _FirstShadowMultColor.y, _FirstShadowMultColor.z);
        u_xlat16_9.xyz = u_xlat16_17.xyz * u_xlat16_18.xyz;
        u_xlat16_11.xyz = u_xlat16_18.xyz + vec3(-1.0, -1.0, -1.0);
        u_xlat11.xyz = vec3(u_xlat26) * u_xlat16_11.xyz + vec3(1.0, 1.0, 1.0);
        u_xlat16_18.xyz = (bool(u_xlatb14)) ? u_xlat11.xyz : u_xlat16_18.xyz;
#ifdef UNITY_ADRENO_ES3
        u_xlatb2 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(u_xlat2.x));
#else
        u_xlatb2 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(u_xlat2.x);
#endif
        u_xlat16_18.xyz = u_xlat16_17.xyz * u_xlat16_18.xyz;
        u_xlat14.xyz = u_xlat16_17.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
        u_xlat15.xyz = (bool(u_xlatb2)) ? u_xlat16_18.xyz : u_xlat14.xyz;
        u_xlat16_18.x = dot(u_xlat16_1.xyz, u_xlat0.xyz);
        u_xlat16_18.x = max(u_xlat16_18.x, 0.00100000005);
        u_xlat16_18.x = log2(u_xlat16_18.x);
        u_xlat16_18.x = u_xlat16_18.x * _Shininess;
        u_xlat16_18.x = exp2(u_xlat16_18.x);
        u_xlat16_18.xyz = u_xlat16_18.xxx * _SpecularColor.xyz;
        u_xlat16_18.xyz = u_xlat16_18.xyz * vec3(_SpecMulti);
        u_xlat16_18.xyz = u_xlat10_3.xxx * u_xlat16_18.xyz;
        u_xlat7.xyz = u_xlat16_18.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
        u_xlat16_15.xyz = u_xlat15.xyz;
        u_xlat16_7.xyz = u_xlat7.xyz;
    //ENDIF
    }
    u_xlat16_18.xyz = u_xlat16_17.xyz * _EmissionColor_MHY.xyz;
    u_xlat16_8.xyz = u_xlat16_15.xyz + u_xlat16_7.xyz;
    u_xlat16_9.xyz = u_xlat16_7.xyz + u_xlat16_9.xyz;
    u_xlat16_10.xyz = u_xlat16_18.xyz * vec3(vec3(_EmissionScaler, _EmissionScaler, _EmissionScaler)) + (-u_xlat16_8.xyz);
    u_xlat16_10.xyz = vec3(u_xlat16_6) * u_xlat16_10.xyz + u_xlat16_8.xyz;
    u_xlat16_18.xyz = u_xlat16_18.xyz * vec3(vec3(_EmissionScaler, _EmissionScaler, _EmissionScaler)) + (-u_xlat16_9.xyz);
    u_xlat16_18.xyz = vec3(u_xlat16_6) * u_xlat16_18.xyz + u_xlat16_9.xyz;
    u_xlat16_8.xyz = (bool(u_xlatb36)) ? u_xlat16_10.xyz : u_xlat16_8.xyz;
    u_xlat16_18.xyz = (bool(u_xlatb36)) ? u_xlat16_18.xyz : u_xlat16_9.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.00999999978<u_xlat16_6);
#else
    u_xlatb0 = 0.00999999978<u_xlat16_6;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn));
#else
    u_xlatb12 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn);
#endif
    u_xlat2.xyz = u_xlat16_8.xyz * vec3(vec3(_ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness));
    u_xlat11.xyz = _ES_CharacterMainLightColor.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat11.xyz = vec3(vec3(_ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio)) * u_xlat11.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat2.xyz = u_xlat2.xyz * u_xlat11.xyz;
    u_xlat11.xyz = _ES_CharacterAmbientLightColor.xyz * vec3(_ES_CharacterAmbientLightRatio);
    u_xlat16_9.xyz = u_xlat2.xyz * vec3(10.0, 10.0, 10.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_9.xyz = min(max(u_xlat16_9.xyz, 0.0), 1.0);
#else
    u_xlat16_9.xyz = clamp(u_xlat16_9.xyz, 0.0, 1.0);
#endif
    u_xlat2.xyz = u_xlat11.xyz * u_xlat16_9.xyz + u_xlat2.xyz;
    u_xlat16_9.xyz = (bool(u_xlatb12)) ? u_xlat2.xyz : u_xlat16_8.xyz;
    u_xlat16_10.xyz = u_xlat16_8.xyz + (-u_xlat16_9.xyz);
    u_xlat16_10.xyz = vec3(u_xlat16_6) * u_xlat16_10.xyz + u_xlat16_9.xyz;
    u_xlat16_8.xyz = (-u_xlat16_18.xyz) + u_xlat16_8.xyz;
    u_xlat16_8.xyz = vec3(u_xlat16_6) * u_xlat16_8.xyz + u_xlat16_18.xyz;
    u_xlat16_2.xyz = (bool(u_xlatb0)) ? u_xlat16_10.xyz : u_xlat16_9.xyz;
    u_xlat16_18.xyz = (bool(u_xlatb0)) ? u_xlat16_8.xyz : u_xlat16_18.xyz;
    u_xlat16_8.x = max(u_xlat16_2.z, u_xlat16_2.y);
    u_xlat16_0.w = max(u_xlat16_2.x, u_xlat16_8.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb11 = !!(1.0<u_xlat16_0.w);
#else
    u_xlatb11 = 1.0<u_xlat16_0.w;
#endif
    u_xlat16_0.xyz = u_xlat16_2.xyz / u_xlat16_0.www;
    u_xlat16_2.w = 1.0;
    u_xlat16_0 = (bool(u_xlatb11)) ? u_xlat16_0 : u_xlat16_2;
    u_xlat16_8.x = min(u_xlat16_0.w, 1.10000002);
    u_xlat16_20 = u_xlat16_0.w + (-u_xlat16_8.x);
    u_xlat16_6 = u_xlat16_6 * u_xlat16_20 + u_xlat16_8.x;
    SV_Target1.w = u_xlat16_6 * 0.0500000007;
    SV_Target0.xyz = u_xlat16_1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb11 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb11 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_6 = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb11) ? u_xlat16_6 : u_xlat16_18.z;
    SV_Target0.w = 0.0470588244;
    SV_Target1.xyz = u_xlat16_0.xyz;
    SV_Target2.xy = u_xlat16_18.xy;
    SV_Target2.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "MSAA_INTERPOLATION" "TOON_LIGHTMAP_ON" "BACK_FACE_ON" "METAL_MAT" "NORMAL_MAP_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
float u_xlat12;
void main()
{
    u_xlat0.x = hlslcc_mtx4x4unity_ObjectToWorld[0].y;
    u_xlat0.y = hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat0.z = hlslcc_mtx4x4unity_ObjectToWorld[2].y;
    u_xlat1.xyw = (-_WorldSpaceCameraPos.xyz) + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat0.w = u_xlat1.y;
    u_xlat2.xyz = in_POSITION0.xyz;
    u_xlat2.w = 1.0;
    u_xlat0.x = dot(u_xlat0, u_xlat2);
    u_xlat0 = u_xlat0.xxxx * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat3.w = u_xlat1.x;
    u_xlat3.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;
    u_xlat3.y = hlslcc_mtx4x4unity_ObjectToWorld[1].x;
    u_xlat3.z = hlslcc_mtx4x4unity_ObjectToWorld[2].x;
    u_xlat3.x = dot(u_xlat3, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat3.xxxx + u_xlat0;
    u_xlat1.x = hlslcc_mtx4x4unity_ObjectToWorld[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_ObjectToWorld[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_ObjectToWorld[2].z;
    u_xlat1.x = dot(u_xlat1, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat1.xxxx + u_xlat0;
    u_xlat1.x = hlslcc_mtx4x4unity_ObjectToWorld[0].w;
    u_xlat1.y = hlslcc_mtx4x4unity_ObjectToWorld[1].w;
    u_xlat1.z = hlslcc_mtx4x4unity_ObjectToWorld[2].w;
    u_xlat1.w = hlslcc_mtx4x4unity_ObjectToWorld[3].w;
    u_xlat1.x = dot(u_xlat1, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[3] * u_xlat1.xxxx + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD1 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.zw = u_xlat0.zw;
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD3.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
    u_xlat12 = in_TANGENT0.w * unity_WorldTransformParams.w;
    u_xlat2.xyz = vec3(u_xlat12) * u_xlat2.xyz;
    vs_TEXCOORD4.y = u_xlat2.x;
    vs_TEXCOORD4.x = u_xlat1.z;
    vs_TEXCOORD4.z = u_xlat0.y;
    vs_TEXCOORD5.x = u_xlat1.x;
    vs_TEXCOORD6.x = u_xlat1.y;
    vs_TEXCOORD5.z = u_xlat0.z;
    vs_TEXCOORD6.z = u_xlat0.x;
    vs_TEXCOORD5.y = u_xlat2.y;
    vs_TEXCOORD6.y = u_xlat2.z;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToCamera[4];
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	mediump vec4 _Color;
uniform 	float _MainTexAlphaUse;
uniform 	mediump float _MainTexAlphaCutoff;
uniform 	mediump float _BumpScale;
uniform 	float _UseLightMapColorAO;
uniform 	float _UseVertexColorAO;
uniform 	mediump float _LightArea;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	float _UseCoolShadowColorOrTex;
uniform 	mediump vec3 _CoolShadowMultColor;
uniform 	float _UseShadowTransition;
uniform 	float _ShadowTransitionRange;
uniform 	float _ShadowTransitionSoftness;
uniform 	mediump vec3 _SpecularColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump float _EmissionScaler;
uniform 	mediump vec3 _EmissionColor_MHY;
uniform 	mediump float _MTMapBrightness;
uniform 	float _MTMapTileScale;
uniform 	mediump vec3 _MTMapLightColor;
uniform 	mediump vec3 _MTMapDarkColor;
uniform 	mediump vec3 _MTShadowMultiColor;
uniform 	mediump float _MTShininess;
uniform 	mediump vec3 _MTSpecularColor;
uniform 	mediump float _MTSpecularScale;
uniform 	float _ES_CharacterAmbientLightOn;
uniform 	float _ES_CharacterAmbientBrightness;
uniform 	vec3 _ES_CharacterMainLightColor;
uniform 	float _ES_CharacterMainLightBrightness;
uniform 	vec3 _ES_CharacterAmbientLightColor;
uniform 	float _ES_CharacterMainLightRatio;
uniform 	float _ES_CharacterAmbientLightRatio;
uniform 	float _ES_CharacterColorTone;
uniform 	vec3 mhy_AvatarLightDir;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MTMap;
in mediump vec4 vs_COLOR0;
in highp vec2 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD5;
in highp vec3 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec2 u_xlat0;
mediump vec4 u_xlat16_0;
vec3 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
lowp vec4 u_xlat10_3;
bool u_xlatb3;
bvec2 u_xlatb4;
lowp vec3 u_xlat10_5;
bool u_xlatb5;
vec3 u_xlat6;
mediump vec3 u_xlat16_6;
bvec2 u_xlatb6;
mediump vec3 u_xlat16_7;
mediump float u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
mediump vec3 u_xlat16_11;
vec3 u_xlat12;
mediump vec3 u_xlat16_12;
bool u_xlatb12;
vec3 u_xlat13;
float u_xlat17;
mediump float u_xlat16_17;
bool u_xlatb17;
vec3 u_xlat19;
mediump vec3 u_xlat16_19;
lowp float u_xlat10_19;
bool u_xlatb19;
mediump vec3 u_xlat16_21;
mediump vec3 u_xlat16_22;
vec3 u_xlat26;
mediump vec3 u_xlat16_26;
vec2 u_xlat28;
bool u_xlatb31;
float u_xlat43;
bool u_xlatb43;
mediump float u_xlat16_44;
float u_xlat45;
bool u_xlatb45;
mediump float u_xlat16_49;
void main()
{
    u_xlat0.xy = dFdx(vs_TEXCOORD0.xy);
    u_xlat28.xy = dFdy(vs_TEXCOORD0.xy);
    u_xlat0.xy = u_xlat28.xy + u_xlat0.xy;
    u_xlat28.xy = (-u_xlat0.xy) * vec2(0.25, 0.25) + vs_TEXCOORD0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25) + vs_TEXCOORD0.xy;
    u_xlat0.xy = (int(gl_SampleID) != 0) ? u_xlat28.xy : u_xlat0.xy;
    u_xlat10_1.xyz = textureLod(_BumpMap, u_xlat0.xy, 0.0).xyz;
    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_2.xy = u_xlat16_2.xy * vec2(vec2(_BumpScale, _BumpScale));
    u_xlat1.x = dot(vs_TEXCOORD4.xyz, u_xlat16_2.xyz);
    u_xlat1.y = dot(vs_TEXCOORD5.xyz, u_xlat16_2.xyz);
    u_xlat1.z = dot(vs_TEXCOORD6.xyz, u_xlat16_2.xyz);
    u_xlat16_2.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat16_2.x = inversesqrt(u_xlat16_2.x);
    u_xlat16_2.xyz = u_xlat1.xyz * u_xlat16_2.xxx;
    u_xlat16_2.xyz = (uint((gl_FrontFacing ? 0xffffffffu : uint(0))) != uint(0u)) ? u_xlat16_2.xyz : (-u_xlat16_2.xyz);
    u_xlat1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat28.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat28.x = inversesqrt(u_xlat28.x);
    u_xlat1.xyz = u_xlat1.xyz * u_xlat28.xxx + mhy_AvatarLightDir.xyz;
    u_xlat28.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat43 = inversesqrt(u_xlat28.x);
    u_xlat1.xyz = vec3(u_xlat43) * u_xlat1.xyz;
    u_xlat10_3 = textureLod(_MainTex, u_xlat0.xy, 0.0);
    u_xlatb4.xy = equal(vec4(_MainTexAlphaUse), vec4(1.0, 2.0, 0.0, 0.0)).xy;
    u_xlat16_44 = u_xlat10_3.w + (-_MainTexAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb43 = !!(u_xlat16_44<0.0);
#else
    u_xlatb43 = u_xlat16_44<0.0;
#endif
    u_xlatb5 = u_xlatb4.x && u_xlatb43;
    if((int(u_xlatb5) * int(0xffffffffu))!=0){discard;}
    u_xlat10_5.xyz = textureLod(_LightMapTex, u_xlat0.xy, 0.0).xyz;
    u_xlatb6.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseLightMapColorAO, _UseVertexColorAO, _UseLightMapColorAO, _UseLightMapColorAO)).xy;
    u_xlat16_7.x = (u_xlatb6.x) ? u_xlat10_5.y : 0.5;
    u_xlat16_21.xyz = u_xlat10_3.xyz * _Color.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(0.00999999978<u_xlat10_3.w);
#else
    u_xlatb3 = 0.00999999978<u_xlat10_3.w;
#endif
    u_xlatb3 = u_xlatb3 && u_xlatb4.y;
    u_xlat16_8 = (u_xlatb3) ? u_xlat10_3.w : 0.0;
    u_xlat16_22.x = dot(u_xlat16_2.xyz, mhy_AvatarLightDir.xyz);
    u_xlat16_17 = u_xlat16_22.x * 0.497500002 + 0.5;
    u_xlat16_22.x = u_xlat16_7.x * vs_COLOR0.x;
    u_xlat16_7.x = (u_xlatb6.y) ? u_xlat16_22.x : u_xlat16_7.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb31 = !!(u_xlat16_7.x<0.0500000007);
#else
    u_xlatb31 = u_xlat16_7.x<0.0500000007;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb45 = !!(0.949999988<u_xlat16_7.x);
#else
    u_xlatb45 = 0.949999988<u_xlat16_7.x;
#endif
    u_xlat16_17 = u_xlat16_17 + u_xlat16_7.x;
    u_xlat17 = u_xlat16_17 * 0.5;
    u_xlat16_7.x = (u_xlatb45) ? 1.0 : u_xlat17;
    u_xlat16_7.x = (u_xlatb31) ? 0.0 : u_xlat16_7.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb17 = !!(u_xlat16_7.x<_LightArea);
#else
    u_xlatb17 = u_xlat16_7.x<_LightArea;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb31 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition));
#else
    u_xlatb31 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition);
#endif
    u_xlat16_7.x = (-u_xlat16_7.x) + _LightArea;
    u_xlat16_7.x = u_xlat16_7.x / _ShadowTransitionRange;
#ifdef UNITY_ADRENO_ES3
    u_xlatb45 = !!(u_xlat16_7.x>=1.0);
#else
    u_xlatb45 = u_xlat16_7.x>=1.0;
#endif
    u_xlat16_19.x = u_xlat16_7.x + 0.00999999978;
    u_xlat16_19.x = log2(u_xlat16_19.x);
    u_xlat19.x = u_xlat16_19.x * _ShadowTransitionSoftness;
    u_xlat19.x = exp2(u_xlat19.x);
    u_xlat19.x = min(u_xlat19.x, 1.0);
    u_xlat45 = (u_xlatb45) ? 1.0 : u_xlat19.x;
    u_xlat45 = (u_xlatb31) ? u_xlat45 : 1.0;
    u_xlat45 = u_xlatb17 ? u_xlat45 : float(0.0);
    u_xlat17 = u_xlatb17 ? 1.0 : float(0.0);
    u_xlat17 = ((gl_FrontFacing ? 0xffffffffu : uint(0)) != uint(0u)) ? u_xlat17 : 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb19 = !!(0.899999976<u_xlat10_5.x);
#else
    u_xlatb19 = 0.899999976<u_xlat10_5.x;
#endif
    if(u_xlatb19){
        u_xlat19.xz = u_xlat16_2.yy * hlslcc_mtx4x4unity_WorldToCamera[1].xy;
        u_xlat19.xz = hlslcc_mtx4x4unity_WorldToCamera[0].xy * u_xlat16_2.xx + u_xlat19.xz;
        u_xlat6.yz = hlslcc_mtx4x4unity_WorldToCamera[2].xy * u_xlat16_2.zz + u_xlat19.xz;
        u_xlat6.x = u_xlat6.y * _MTMapTileScale;
        u_xlat16_22.xy = u_xlat6.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
        u_xlat10_19 = texture(_MTMap, u_xlat16_22.xy, -1.0).x;
        u_xlat16_7.x = u_xlat10_19 * _MTMapBrightness;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
        u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
        u_xlat16_22.xyz = _MTMapLightColor.xyz + (-_MTMapDarkColor.xyz);
        u_xlat16_22.xyz = u_xlat16_7.xxx * u_xlat16_22.xyz + _MTMapDarkColor.xyz;
        u_xlat16_22.xyz = u_xlat16_21.xyz * u_xlat16_22.xyz;
        u_xlat16_7.x = dot(u_xlat16_2.xyz, u_xlat1.xyz);
        u_xlat16_7.x = max(u_xlat16_7.x, 0.00100000005);
        u_xlat16_7.x = log2(u_xlat16_7.x);
        u_xlat16_7.x = u_xlat16_7.x * _MTShininess;
        u_xlat16_7.x = exp2(u_xlat16_7.x);
        u_xlat16_7.x = u_xlat16_7.x * _MTSpecularScale;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
        u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
        u_xlat16_9.xyz = u_xlat16_7.xxx * _MTSpecularColor.xyz;
        u_xlat16_9.xyz = u_xlat10_5.zzz * u_xlat16_9.xyz;
        u_xlat16_10.xyz = u_xlat16_22.xyz * _MTShadowMultiColor.xyz;
        u_xlat16_19.xyz = _MTShadowMultiColor.xyz + vec3(-1.0, -1.0, -1.0);
        u_xlat19.xyz = vec3(u_xlat45) * u_xlat16_19.xyz + vec3(1.0, 1.0, 1.0);
        u_xlat16_11.xyz = (bool(u_xlatb31)) ? u_xlat19.xyz : _MTShadowMultiColor.xyz;
#ifdef UNITY_ADRENO_ES3
        u_xlatb19 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(u_xlat17));
#else
        u_xlatb19 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(u_xlat17);
#endif
        u_xlat16_11.xyz = u_xlat16_22.xyz * u_xlat16_11.xyz;
        u_xlat6.xyz = u_xlat16_22.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
        u_xlat19.xyz = (bool(u_xlatb19)) ? u_xlat16_11.xyz : u_xlat6.xyz;
        u_xlat6.xyz = u_xlat16_9.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
        u_xlat16_19.xyz = u_xlat19.xyz;
        u_xlat16_6.xyz = u_xlat6.xyz;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb12 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex));
#else
        u_xlatb12 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex);
#endif
        u_xlat16_26.xyz = vec3(_FirstShadowMultColor.xxyz.y + (-_CoolShadowMultColor.x), _FirstShadowMultColor.xxyz.z + (-_CoolShadowMultColor.y), float(_FirstShadowMultColor.z) + (-_CoolShadowMultColor.z));
        u_xlat26.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_26.xyz + _CoolShadowMultColor.xyz;
        u_xlat16_22.xyz = (bool(u_xlatb12)) ? u_xlat26.xyz : vec3(_FirstShadowMultColor.x, _FirstShadowMultColor.y, _FirstShadowMultColor.z);
        u_xlat16_10.xyz = u_xlat16_21.xyz * u_xlat16_22.xyz;
        u_xlat16_12.xyz = u_xlat16_22.xyz + vec3(-1.0, -1.0, -1.0);
        u_xlat12.xyz = vec3(u_xlat45) * u_xlat16_12.xyz + vec3(1.0, 1.0, 1.0);
        u_xlat16_22.xyz = (bool(u_xlatb31)) ? u_xlat12.xyz : u_xlat16_22.xyz;
#ifdef UNITY_ADRENO_ES3
        u_xlatb17 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(u_xlat17));
#else
        u_xlatb17 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(u_xlat17);
#endif
        u_xlat16_22.xyz = u_xlat16_21.xyz * u_xlat16_22.xyz;
        u_xlat12.xyz = u_xlat16_21.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
        u_xlat19.xyz = (bool(u_xlatb17)) ? u_xlat16_22.xyz : u_xlat12.xyz;
        u_xlat16_7.x = dot(u_xlat16_2.xyz, u_xlat1.xyz);
        u_xlat16_7.x = max(u_xlat16_7.x, 0.00100000005);
        u_xlat16_7.x = log2(u_xlat16_7.x);
        u_xlat16_7.x = u_xlat16_7.x * _Shininess;
        u_xlat16_7.x = exp2(u_xlat16_7.x);
        u_xlat16_22.xyz = u_xlat16_7.xxx * _SpecularColor.xyz;
        u_xlat16_22.xyz = u_xlat16_22.xyz * vec3(_SpecMulti);
        u_xlat16_22.xyz = u_xlat10_5.xxx * u_xlat16_22.xyz;
        u_xlat6.xyz = u_xlat16_22.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
        u_xlat16_19.xyz = u_xlat19.xyz;
        u_xlat16_6.xyz = u_xlat6.xyz;
    //ENDIF
    }
    u_xlat16_7.xyz = u_xlat16_21.xyz * _EmissionColor_MHY.xyz;
    u_xlat16_22.xyz = u_xlat16_19.xyz + u_xlat16_6.xyz;
    u_xlat16_9.xyz = u_xlat16_6.xyz + u_xlat16_10.xyz;
    u_xlat16_10.xyz = u_xlat16_7.xyz * vec3(vec3(_EmissionScaler, _EmissionScaler, _EmissionScaler)) + (-u_xlat16_22.xyz);
    u_xlat16_10.xyz = vec3(u_xlat16_8) * u_xlat16_10.xyz + u_xlat16_22.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(vec3(_EmissionScaler, _EmissionScaler, _EmissionScaler)) + (-u_xlat16_9.xyz);
    u_xlat16_7.xyz = vec3(u_xlat16_8) * u_xlat16_7.xyz + u_xlat16_9.xyz;
    u_xlat16_22.xyz = (bool(u_xlatb3)) ? u_xlat16_10.xyz : u_xlat16_22.xyz;
    u_xlat16_7.xyz = (bool(u_xlatb3)) ? u_xlat16_7.xyz : u_xlat16_9.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(0.00999999978<u_xlat16_8);
#else
    u_xlatb3 = 0.00999999978<u_xlat16_8;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb17 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn));
#else
    u_xlatb17 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn);
#endif
    u_xlat12.xyz = u_xlat16_22.xyz * vec3(vec3(_ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness));
    u_xlat13.xyz = _ES_CharacterMainLightColor.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat13.xyz = vec3(vec3(_ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio)) * u_xlat13.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat12.xyz = u_xlat12.xyz * u_xlat13.xyz;
    u_xlat13.xyz = _ES_CharacterAmbientLightColor.xyz * vec3(_ES_CharacterAmbientLightRatio);
    u_xlat16_9.xyz = u_xlat12.xyz * vec3(10.0, 10.0, 10.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_9.xyz = min(max(u_xlat16_9.xyz, 0.0), 1.0);
#else
    u_xlat16_9.xyz = clamp(u_xlat16_9.xyz, 0.0, 1.0);
#endif
    u_xlat12.xyz = u_xlat13.xyz * u_xlat16_9.xyz + u_xlat12.xyz;
    u_xlat16_9.xyz = (bool(u_xlatb17)) ? u_xlat12.xyz : u_xlat16_22.xyz;
    u_xlat16_10.xyz = u_xlat16_22.xyz + (-u_xlat16_9.xyz);
    u_xlat16_10.xyz = vec3(u_xlat16_8) * u_xlat16_10.xyz + u_xlat16_9.xyz;
    u_xlat16_22.xyz = (-u_xlat16_7.xyz) + u_xlat16_22.xyz;
    u_xlat16_22.xyz = vec3(u_xlat16_8) * u_xlat16_22.xyz + u_xlat16_7.xyz;
    u_xlat16_0.xyz = (bool(u_xlatb3)) ? u_xlat16_10.xyz : u_xlat16_9.xyz;
    u_xlat16_7.xyz = (bool(u_xlatb3)) ? u_xlat16_22.xyz : u_xlat16_7.xyz;
    u_xlat16_49 = max(u_xlat16_0.z, u_xlat16_0.y);
    u_xlat16_1.w = max(u_xlat16_0.x, u_xlat16_49);
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(1.0<u_xlat16_1.w);
#else
    u_xlatb3 = 1.0<u_xlat16_1.w;
#endif
    u_xlat16_1.xyz = u_xlat16_0.xyz / u_xlat16_1.www;
    u_xlat16_0.w = 1.0;
    u_xlat16_0 = (bool(u_xlatb3)) ? u_xlat16_1 : u_xlat16_0;
    u_xlat16_49 = min(u_xlat16_0.w, 1.10000002);
    u_xlat16_22.x = u_xlat16_0.w + (-u_xlat16_49);
    u_xlat16_49 = u_xlat16_8 * u_xlat16_22.x + u_xlat16_49;
    SV_Target1.w = u_xlat16_49 * 0.0500000007;
    SV_Target0.xyz = u_xlat16_2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb3 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_49 = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb3) ? u_xlat16_49 : u_xlat16_7.z;
    SV_Target0.w = 0.0470588244;
    SV_Target1.xyz = u_xlat16_0.xyz;
    SV_Target2.xy = u_xlat16_7.xy;
    SV_Target2.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "LINE_INTERPOLATION" "TOON_LIGHTMAP_ON" "BACK_FACE_ON" "METAL_MAT" "NORMAL_MAP_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
float u_xlat12;
void main()
{
    u_xlat0.x = hlslcc_mtx4x4unity_ObjectToWorld[0].y;
    u_xlat0.y = hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat0.z = hlslcc_mtx4x4unity_ObjectToWorld[2].y;
    u_xlat1.xyw = (-_WorldSpaceCameraPos.xyz) + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat0.w = u_xlat1.y;
    u_xlat2.xyz = in_POSITION0.xyz;
    u_xlat2.w = 1.0;
    u_xlat0.x = dot(u_xlat0, u_xlat2);
    u_xlat0 = u_xlat0.xxxx * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat3.w = u_xlat1.x;
    u_xlat3.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;
    u_xlat3.y = hlslcc_mtx4x4unity_ObjectToWorld[1].x;
    u_xlat3.z = hlslcc_mtx4x4unity_ObjectToWorld[2].x;
    u_xlat3.x = dot(u_xlat3, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat3.xxxx + u_xlat0;
    u_xlat1.x = hlslcc_mtx4x4unity_ObjectToWorld[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_ObjectToWorld[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_ObjectToWorld[2].z;
    u_xlat1.x = dot(u_xlat1, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat1.xxxx + u_xlat0;
    u_xlat1.x = hlslcc_mtx4x4unity_ObjectToWorld[0].w;
    u_xlat1.y = hlslcc_mtx4x4unity_ObjectToWorld[1].w;
    u_xlat1.z = hlslcc_mtx4x4unity_ObjectToWorld[2].w;
    u_xlat1.w = hlslcc_mtx4x4unity_ObjectToWorld[3].w;
    u_xlat1.x = dot(u_xlat1, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[3] * u_xlat1.xxxx + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD1 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.zw = u_xlat0.zw;
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD3.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
    u_xlat12 = in_TANGENT0.w * unity_WorldTransformParams.w;
    u_xlat2.xyz = vec3(u_xlat12) * u_xlat2.xyz;
    vs_TEXCOORD4.y = u_xlat2.x;
    vs_TEXCOORD4.x = u_xlat1.z;
    vs_TEXCOORD4.z = u_xlat0.y;
    vs_TEXCOORD5.x = u_xlat1.x;
    vs_TEXCOORD6.x = u_xlat1.y;
    vs_TEXCOORD5.z = u_xlat0.z;
    vs_TEXCOORD6.z = u_xlat0.x;
    vs_TEXCOORD5.y = u_xlat2.y;
    vs_TEXCOORD6.y = u_xlat2.z;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToCamera[4];
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	mediump vec4 _Color;
uniform 	float _MainTexAlphaUse;
uniform 	mediump float _MainTexAlphaCutoff;
uniform 	mediump float _BumpScale;
uniform 	float _UseLightMapColorAO;
uniform 	float _UseVertexColorAO;
uniform 	mediump float _LightArea;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	float _UseCoolShadowColorOrTex;
uniform 	mediump vec3 _CoolShadowMultColor;
uniform 	float _UseShadowTransition;
uniform 	float _ShadowTransitionRange;
uniform 	float _ShadowTransitionSoftness;
uniform 	mediump vec3 _SpecularColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump float _EmissionScaler;
uniform 	mediump vec3 _EmissionColor_MHY;
uniform 	mediump float _MTMapBrightness;
uniform 	float _MTMapTileScale;
uniform 	mediump vec3 _MTMapLightColor;
uniform 	mediump vec3 _MTMapDarkColor;
uniform 	mediump vec3 _MTShadowMultiColor;
uniform 	mediump float _MTShininess;
uniform 	mediump vec3 _MTSpecularColor;
uniform 	mediump float _MTSpecularScale;
uniform 	float _ES_CharacterAmbientLightOn;
uniform 	float _ES_CharacterAmbientBrightness;
uniform 	vec3 _ES_CharacterMainLightColor;
uniform 	float _ES_CharacterMainLightBrightness;
uniform 	vec3 _ES_CharacterAmbientLightColor;
uniform 	float _ES_CharacterMainLightRatio;
uniform 	float _ES_CharacterAmbientLightRatio;
uniform 	float _ES_CharacterColorTone;
uniform 	vec3 mhy_AvatarLightDir;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MTMap;
in mediump vec4 vs_COLOR0;
in highp vec2 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD5;
in highp vec3 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec3 u_xlat10_0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec4 u_xlat16_2;
lowp vec4 u_xlat10_2;
bool u_xlatb2;
lowp vec4 u_xlat10_3;
bvec2 u_xlatb3;
bvec2 u_xlatb4;
mediump float u_xlat16_5;
mediump float u_xlat16_6;
vec3 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
vec3 u_xlat11;
mediump vec3 u_xlat16_11;
bool u_xlatb11;
bool u_xlatb12;
vec3 u_xlat14;
bool u_xlatb14;
vec3 u_xlat15;
mediump vec3 u_xlat16_15;
mediump vec3 u_xlat16_17;
mediump vec3 u_xlat16_18;
mediump float u_xlat16_20;
float u_xlat26;
bool u_xlatb26;
float u_xlat36;
bool u_xlatb36;
mediump float u_xlat16_37;
float u_xlat38;
mediump float u_xlat16_38;
lowp float u_xlat10_38;
bool u_xlatb38;
void main()
{
    u_xlat10_0.xyz = texture(_BumpMap, vs_TEXCOORD0.xy, -1.0).xyz;
    u_xlat16_1.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_1.xy = u_xlat16_1.xy * vec2(vec2(_BumpScale, _BumpScale));
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, u_xlat16_1.xyz);
    u_xlat0.y = dot(vs_TEXCOORD5.xyz, u_xlat16_1.xyz);
    u_xlat0.z = dot(vs_TEXCOORD6.xyz, u_xlat16_1.xyz);
    u_xlat16_1.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat16_1.x = inversesqrt(u_xlat16_1.x);
    u_xlat16_1.xyz = u_xlat0.xyz * u_xlat16_1.xxx;
    u_xlat16_1.xyz = (uint((gl_FrontFacing ? 0xffffffffu : uint(0))) != uint(0u)) ? u_xlat16_1.xyz : (-u_xlat16_1.xyz);
    u_xlat0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat36 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat36 = inversesqrt(u_xlat36);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat36) + mhy_AvatarLightDir.xyz;
    u_xlat36 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat36 = inversesqrt(u_xlat36);
    u_xlat0.xyz = vec3(u_xlat36) * u_xlat0.xyz;
    u_xlat10_2 = texture(_MainTex, vs_TEXCOORD0.xy, -1.0);
    u_xlatb3.xy = equal(vec4(_MainTexAlphaUse), vec4(1.0, 2.0, 0.0, 0.0)).xy;
    u_xlat16_37 = u_xlat10_2.w + (-_MainTexAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb36 = !!(u_xlat16_37<0.0);
#else
    u_xlatb36 = u_xlat16_37<0.0;
#endif
    u_xlatb36 = u_xlatb3.x && u_xlatb36;
    if((int(u_xlatb36) * int(0xffffffffu))!=0){discard;}
    u_xlat10_3.xzw = texture(_LightMapTex, vs_TEXCOORD0.xy, -1.0).xyz;
    u_xlatb4.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseLightMapColorAO, _UseVertexColorAO, _UseLightMapColorAO, _UseLightMapColorAO)).xy;
    u_xlat16_5 = (u_xlatb4.x) ? u_xlat10_3.z : 0.5;
    u_xlat16_17.xyz = u_xlat10_2.xyz * _Color.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb36 = !!(0.00999999978<u_xlat10_2.w);
#else
    u_xlatb36 = 0.00999999978<u_xlat10_2.w;
#endif
    u_xlatb36 = u_xlatb36 && u_xlatb3.y;
    u_xlat16_6 = (u_xlatb36) ? u_xlat10_2.w : 0.0;
    u_xlat16_18.x = dot(u_xlat16_1.xyz, mhy_AvatarLightDir.xyz);
    u_xlat16_2.x = u_xlat16_18.x * 0.497500002 + 0.5;
    u_xlat16_18.x = u_xlat16_5 * vs_COLOR0.x;
    u_xlat16_18.x = (u_xlatb4.y) ? u_xlat16_18.x : u_xlat16_5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(u_xlat16_18.x<0.0500000007);
#else
    u_xlatb14 = u_xlat16_18.x<0.0500000007;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb26 = !!(0.949999988<u_xlat16_18.x);
#else
    u_xlatb26 = 0.949999988<u_xlat16_18.x;
#endif
    u_xlat16_2.x = u_xlat16_2.x + u_xlat16_18.x;
    u_xlat2.x = u_xlat16_2.x * 0.5;
    u_xlat16_18.x = (u_xlatb26) ? 1.0 : u_xlat2.x;
    u_xlat16_18.x = (u_xlatb14) ? 0.0 : u_xlat16_18.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat16_18.x<_LightArea);
#else
    u_xlatb2 = u_xlat16_18.x<_LightArea;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition));
#else
    u_xlatb14 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition);
#endif
    u_xlat16_18.x = (-u_xlat16_18.x) + _LightArea;
    u_xlat16_18.x = u_xlat16_18.x / _ShadowTransitionRange;
#ifdef UNITY_ADRENO_ES3
    u_xlatb26 = !!(u_xlat16_18.x>=1.0);
#else
    u_xlatb26 = u_xlat16_18.x>=1.0;
#endif
    u_xlat16_38 = u_xlat16_18.x + 0.00999999978;
    u_xlat16_38 = log2(u_xlat16_38);
    u_xlat38 = u_xlat16_38 * _ShadowTransitionSoftness;
    u_xlat38 = exp2(u_xlat38);
    u_xlat38 = min(u_xlat38, 1.0);
    u_xlat26 = (u_xlatb26) ? 1.0 : u_xlat38;
    u_xlat26 = (u_xlatb14) ? u_xlat26 : 1.0;
    u_xlat26 = u_xlatb2 ? u_xlat26 : float(0.0);
    u_xlat2.x = u_xlatb2 ? 1.0 : float(0.0);
    u_xlat2.x = ((gl_FrontFacing ? 0xffffffffu : uint(0)) != uint(0u)) ? u_xlat2.x : 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb38 = !!(0.899999976<u_xlat10_3.x);
#else
    u_xlatb38 = 0.899999976<u_xlat10_3.x;
#endif
    if(u_xlatb38){
        u_xlat15.xy = u_xlat16_1.yy * hlslcc_mtx4x4unity_WorldToCamera[1].xy;
        u_xlat15.xy = hlslcc_mtx4x4unity_WorldToCamera[0].xy * u_xlat16_1.xx + u_xlat15.xy;
        u_xlat7.yz = hlslcc_mtx4x4unity_WorldToCamera[2].xy * u_xlat16_1.zz + u_xlat15.xy;
        u_xlat7.x = u_xlat7.y * _MTMapTileScale;
        u_xlat16_18.xy = u_xlat7.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
        u_xlat10_38 = texture(_MTMap, u_xlat16_18.xy, -1.0).x;
        u_xlat16_18.x = u_xlat10_38 * _MTMapBrightness;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_18.x = min(max(u_xlat16_18.x, 0.0), 1.0);
#else
        u_xlat16_18.x = clamp(u_xlat16_18.x, 0.0, 1.0);
#endif
        u_xlat16_8.xyz = _MTMapLightColor.xyz + (-_MTMapDarkColor.xyz);
        u_xlat16_18.xyz = u_xlat16_18.xxx * u_xlat16_8.xyz + _MTMapDarkColor.xyz;
        u_xlat16_18.xyz = u_xlat16_17.xyz * u_xlat16_18.xyz;
        u_xlat16_8.x = dot(u_xlat16_1.xyz, u_xlat0.xyz);
        u_xlat16_8.x = max(u_xlat16_8.x, 0.00100000005);
        u_xlat16_8.x = log2(u_xlat16_8.x);
        u_xlat16_8.x = u_xlat16_8.x * _MTShininess;
        u_xlat16_8.x = exp2(u_xlat16_8.x);
        u_xlat16_8.x = u_xlat16_8.x * _MTSpecularScale;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_8.x = min(max(u_xlat16_8.x, 0.0), 1.0);
#else
        u_xlat16_8.x = clamp(u_xlat16_8.x, 0.0, 1.0);
#endif
        u_xlat16_8.xyz = u_xlat16_8.xxx * _MTSpecularColor.xyz;
        u_xlat16_8.xyz = u_xlat10_3.www * u_xlat16_8.xyz;
        u_xlat16_9.xyz = u_xlat16_18.xyz * _MTShadowMultiColor.xyz;
        u_xlat16_15.xyz = _MTShadowMultiColor.xyz + vec3(-1.0, -1.0, -1.0);
        u_xlat15.xyz = vec3(u_xlat26) * u_xlat16_15.xyz + vec3(1.0, 1.0, 1.0);
        u_xlat16_10.xyz = (bool(u_xlatb14)) ? u_xlat15.xyz : _MTShadowMultiColor.xyz;
#ifdef UNITY_ADRENO_ES3
        u_xlatb38 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(u_xlat2.x));
#else
        u_xlatb38 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(u_xlat2.x);
#endif
        u_xlat16_10.xyz = u_xlat16_18.xyz * u_xlat16_10.xyz;
        u_xlat15.xyz = u_xlat16_18.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
        u_xlat15.xyz = (bool(u_xlatb38)) ? u_xlat16_10.xyz : u_xlat15.xyz;
        u_xlat7.xyz = u_xlat16_8.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
        u_xlat16_15.xyz = u_xlat15.xyz;
        u_xlat16_7.xyz = u_xlat7.xyz;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb38 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex));
#else
        u_xlatb38 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex);
#endif
        u_xlat16_11.xyz = vec3(_FirstShadowMultColor.xxyz.y + (-_CoolShadowMultColor.x), _FirstShadowMultColor.xxyz.z + (-_CoolShadowMultColor.y), float(_FirstShadowMultColor.z) + (-_CoolShadowMultColor.z));
        u_xlat11.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_11.xyz + _CoolShadowMultColor.xyz;
        u_xlat16_18.xyz = (bool(u_xlatb38)) ? u_xlat11.xyz : vec3(_FirstShadowMultColor.x, _FirstShadowMultColor.y, _FirstShadowMultColor.z);
        u_xlat16_9.xyz = u_xlat16_17.xyz * u_xlat16_18.xyz;
        u_xlat16_11.xyz = u_xlat16_18.xyz + vec3(-1.0, -1.0, -1.0);
        u_xlat11.xyz = vec3(u_xlat26) * u_xlat16_11.xyz + vec3(1.0, 1.0, 1.0);
        u_xlat16_18.xyz = (bool(u_xlatb14)) ? u_xlat11.xyz : u_xlat16_18.xyz;
#ifdef UNITY_ADRENO_ES3
        u_xlatb2 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(u_xlat2.x));
#else
        u_xlatb2 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(u_xlat2.x);
#endif
        u_xlat16_18.xyz = u_xlat16_17.xyz * u_xlat16_18.xyz;
        u_xlat14.xyz = u_xlat16_17.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
        u_xlat15.xyz = (bool(u_xlatb2)) ? u_xlat16_18.xyz : u_xlat14.xyz;
        u_xlat16_18.x = dot(u_xlat16_1.xyz, u_xlat0.xyz);
        u_xlat16_18.x = max(u_xlat16_18.x, 0.00100000005);
        u_xlat16_18.x = log2(u_xlat16_18.x);
        u_xlat16_18.x = u_xlat16_18.x * _Shininess;
        u_xlat16_18.x = exp2(u_xlat16_18.x);
        u_xlat16_18.xyz = u_xlat16_18.xxx * _SpecularColor.xyz;
        u_xlat16_18.xyz = u_xlat16_18.xyz * vec3(_SpecMulti);
        u_xlat16_18.xyz = u_xlat10_3.xxx * u_xlat16_18.xyz;
        u_xlat7.xyz = u_xlat16_18.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
        u_xlat16_15.xyz = u_xlat15.xyz;
        u_xlat16_7.xyz = u_xlat7.xyz;
    //ENDIF
    }
    u_xlat16_18.xyz = u_xlat16_17.xyz * _EmissionColor_MHY.xyz;
    u_xlat16_8.xyz = u_xlat16_15.xyz + u_xlat16_7.xyz;
    u_xlat16_9.xyz = u_xlat16_7.xyz + u_xlat16_9.xyz;
    u_xlat16_10.xyz = u_xlat16_18.xyz * vec3(vec3(_EmissionScaler, _EmissionScaler, _EmissionScaler)) + (-u_xlat16_8.xyz);
    u_xlat16_10.xyz = vec3(u_xlat16_6) * u_xlat16_10.xyz + u_xlat16_8.xyz;
    u_xlat16_18.xyz = u_xlat16_18.xyz * vec3(vec3(_EmissionScaler, _EmissionScaler, _EmissionScaler)) + (-u_xlat16_9.xyz);
    u_xlat16_18.xyz = vec3(u_xlat16_6) * u_xlat16_18.xyz + u_xlat16_9.xyz;
    u_xlat16_8.xyz = (bool(u_xlatb36)) ? u_xlat16_10.xyz : u_xlat16_8.xyz;
    u_xlat16_18.xyz = (bool(u_xlatb36)) ? u_xlat16_18.xyz : u_xlat16_9.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.00999999978<u_xlat16_6);
#else
    u_xlatb0 = 0.00999999978<u_xlat16_6;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn));
#else
    u_xlatb12 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn);
#endif
    u_xlat2.xyz = u_xlat16_8.xyz * vec3(vec3(_ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness));
    u_xlat11.xyz = _ES_CharacterMainLightColor.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat11.xyz = vec3(vec3(_ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio)) * u_xlat11.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat2.xyz = u_xlat2.xyz * u_xlat11.xyz;
    u_xlat11.xyz = _ES_CharacterAmbientLightColor.xyz * vec3(_ES_CharacterAmbientLightRatio);
    u_xlat16_9.xyz = u_xlat2.xyz * vec3(10.0, 10.0, 10.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_9.xyz = min(max(u_xlat16_9.xyz, 0.0), 1.0);
#else
    u_xlat16_9.xyz = clamp(u_xlat16_9.xyz, 0.0, 1.0);
#endif
    u_xlat2.xyz = u_xlat11.xyz * u_xlat16_9.xyz + u_xlat2.xyz;
    u_xlat16_9.xyz = (bool(u_xlatb12)) ? u_xlat2.xyz : u_xlat16_8.xyz;
    u_xlat16_10.xyz = u_xlat16_8.xyz + (-u_xlat16_9.xyz);
    u_xlat16_10.xyz = vec3(u_xlat16_6) * u_xlat16_10.xyz + u_xlat16_9.xyz;
    u_xlat16_8.xyz = (-u_xlat16_18.xyz) + u_xlat16_8.xyz;
    u_xlat16_8.xyz = vec3(u_xlat16_6) * u_xlat16_8.xyz + u_xlat16_18.xyz;
    u_xlat16_2.xyz = (bool(u_xlatb0)) ? u_xlat16_10.xyz : u_xlat16_9.xyz;
    u_xlat16_18.xyz = (bool(u_xlatb0)) ? u_xlat16_8.xyz : u_xlat16_18.xyz;
    u_xlat16_8.x = max(u_xlat16_2.z, u_xlat16_2.y);
    u_xlat16_0.w = max(u_xlat16_2.x, u_xlat16_8.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb11 = !!(1.0<u_xlat16_0.w);
#else
    u_xlatb11 = 1.0<u_xlat16_0.w;
#endif
    u_xlat16_0.xyz = u_xlat16_2.xyz / u_xlat16_0.www;
    u_xlat16_2.w = 1.0;
    u_xlat16_0 = (bool(u_xlatb11)) ? u_xlat16_0 : u_xlat16_2;
    u_xlat16_8.x = min(u_xlat16_0.w, 1.10000002);
    u_xlat16_20 = u_xlat16_0.w + (-u_xlat16_8.x);
    u_xlat16_6 = u_xlat16_6 * u_xlat16_20 + u_xlat16_8.x;
    SV_Target1.w = u_xlat16_6 * 0.0500000007;
    SV_Target0.xyz = u_xlat16_1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb11 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb11 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_6 = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb11) ? u_xlat16_6 : u_xlat16_18.z;
    SV_Target0.w = 0.0470588244;
    SV_Target1.xyz = u_xlat16_0.xyz;
    SV_Target2.xy = u_xlat16_18.xy;
    SV_Target2.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "TOON_SPECULAR_ON" "TOON_LIGHTMAP_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec3 mhy_AvatarLightDir;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump float u_xlat16_4;
float u_xlat16;
void main()
{
    u_xlat0.x = hlslcc_mtx4x4unity_ObjectToWorld[0].y;
    u_xlat0.y = hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat0.z = hlslcc_mtx4x4unity_ObjectToWorld[2].y;
    u_xlat1.xyw = (-_WorldSpaceCameraPos.xyz) + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat0.w = u_xlat1.y;
    u_xlat2.xyz = in_POSITION0.xyz;
    u_xlat2.w = 1.0;
    u_xlat0.x = dot(u_xlat0, u_xlat2);
    u_xlat0 = u_xlat0.xxxx * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat3.w = u_xlat1.x;
    u_xlat3.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;
    u_xlat3.y = hlslcc_mtx4x4unity_ObjectToWorld[1].x;
    u_xlat3.z = hlslcc_mtx4x4unity_ObjectToWorld[2].x;
    u_xlat3.x = dot(u_xlat3, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat3.xxxx + u_xlat0;
    u_xlat1.x = hlslcc_mtx4x4unity_ObjectToWorld[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_ObjectToWorld[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_ObjectToWorld[2].z;
    u_xlat1.x = dot(u_xlat1, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat1.xxxx + u_xlat0;
    u_xlat1.x = hlslcc_mtx4x4unity_ObjectToWorld[0].w;
    u_xlat1.y = hlslcc_mtx4x4unity_ObjectToWorld[1].w;
    u_xlat1.z = hlslcc_mtx4x4unity_ObjectToWorld[2].w;
    u_xlat1.w = hlslcc_mtx4x4unity_ObjectToWorld[3].w;
    u_xlat1.x = dot(u_xlat1, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[3] * u_xlat1.xxxx + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat16 = inversesqrt(u_xlat16);
    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
    u_xlat16_4 = dot(u_xlat1.xyz, mhy_AvatarLightDir.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    vs_TEXCOORD1.w = u_xlat16_4 * 0.497500002 + 0.5;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.zw = u_xlat0.zw;
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD3.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD5.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	mediump vec4 _Color;
uniform 	float _MainTexAlphaUse;
uniform 	mediump float _MainTexAlphaCutoff;
uniform 	float _UseLightMapColorAO;
uniform 	float _UseVertexColorAO;
uniform 	mediump float _LightArea;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	float _UseCoolShadowColorOrTex;
uniform 	mediump vec3 _CoolShadowMultColor;
uniform 	float _UseShadowTransition;
uniform 	float _ShadowTransitionRange;
uniform 	float _ShadowTransitionSoftness;
uniform 	mediump vec3 _SpecularColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump float _EmissionScaler;
uniform 	mediump vec3 _EmissionColor_MHY;
uniform 	float _ES_CharacterAmbientLightOn;
uniform 	float _ES_CharacterAmbientBrightness;
uniform 	vec3 _ES_CharacterMainLightColor;
uniform 	float _ES_CharacterMainLightBrightness;
uniform 	vec3 _ES_CharacterAmbientLightColor;
uniform 	float _ES_CharacterMainLightRatio;
uniform 	float _ES_CharacterAmbientLightRatio;
uniform 	float _ES_CharacterColorTone;
uniform 	vec3 mhy_AvatarLightDir;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMapTex;
in mediump vec4 vs_COLOR0;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec4 u_xlat0;
lowp vec4 u_xlat10_0;
bvec4 u_xlatb0;
vec3 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
bool u_xlatb1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump vec4 u_xlat16_3;
vec3 u_xlat4;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
vec3 u_xlat9;
bool u_xlatb9;
mediump float u_xlat16_11;
float u_xlat18;
mediump float u_xlat16_18;
bool u_xlatb18;
float u_xlat27;
bool u_xlatb27;
mediump float u_xlat16_29;
bool u_xlatb30;
mediump float u_xlat16_32;
mediump float u_xlat16_33;
void main()
{
    u_xlatb0.xy = equal(vec4(_MainTexAlphaUse), vec4(1.0, 2.0, 0.0, 0.0)).xy;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy, -1.0);
    u_xlat16_2.x = u_xlat10_1.w + (-_MainTexAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(u_xlat16_2.x<0.0);
#else
    u_xlatb18 = u_xlat16_2.x<0.0;
#endif
    u_xlatb0.x = u_xlatb0.x && u_xlatb18;
    if((int(u_xlatb0.x) * int(0xffffffffu))!=0){discard;}
    SV_Target0.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0470588244;
    u_xlat0.xzw = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat0.xzw = u_xlat0.xzw * u_xlat3.xxx + mhy_AvatarLightDir.xyz;
    u_xlat3.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat0.xzw = u_xlat0.xzw * u_xlat3.xxx;
    u_xlat16_2.x = dot(vs_TEXCOORD1.xyz, u_xlat0.xzw);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.00100000005);
    u_xlat16_2.x = log2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * _Shininess;
    u_xlat16_2.x = exp2(u_xlat16_2.x);
    u_xlat10_0.xzw = texture(_LightMapTex, vs_TEXCOORD0.xy, -1.0).xyz;
    u_xlat27 = (-u_xlat10_0.w) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(u_xlat27<u_xlat16_2.x);
#else
    u_xlatb27 = u_xlat27<u_xlat16_2.x;
#endif
    u_xlat16_2.xyz = _SpecularColor.xyz * vec3(_SpecMulti);
    u_xlat16_2.xyz = u_xlat10_0.xxx * u_xlat16_2.xyz;
    u_xlat3.xyz = u_xlat16_2.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
    u_xlat3.xyz = mix(vec3(0.0, 0.0, 0.0), u_xlat3.xyz, vec3(bvec3(u_xlatb27)));
    u_xlatb0.xw = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseLightMapColorAO, _UseLightMapColorAO, _UseLightMapColorAO, _UseVertexColorAO)).xw;
    u_xlat16_2.x = (u_xlatb0.x) ? u_xlat10_0.z : 0.5;
    u_xlat16_11 = u_xlat16_2.x * vs_COLOR0.x;
    u_xlat16_2.x = (u_xlatb0.w) ? u_xlat16_11 : u_xlat16_2.x;
    u_xlat0.x = u_xlat16_2.x + vs_TEXCOORD1.w;
    u_xlat0.x = u_xlat0.x * 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(0.949999988<u_xlat16_2.x);
#else
    u_xlatb18 = 0.949999988<u_xlat16_2.x;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(u_xlat16_2.x<0.0500000007);
#else
    u_xlatb27 = u_xlat16_2.x<0.0500000007;
#endif
    u_xlat16_2.x = (u_xlatb18) ? 1.0 : u_xlat0.x;
    u_xlat16_2.x = (u_xlatb27) ? 0.0 : u_xlat16_2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(u_xlat16_2.x<_LightArea);
#else
    u_xlatb0.x = u_xlat16_2.x<_LightArea;
#endif
    u_xlat16_2.x = (-u_xlat16_2.x) + _LightArea;
    u_xlat16_2.x = u_xlat16_2.x / _ShadowTransitionRange;
    u_xlat16_18 = u_xlat16_2.x + 0.00999999978;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(u_xlat16_2.x>=1.0);
#else
    u_xlatb27 = u_xlat16_2.x>=1.0;
#endif
    u_xlat16_18 = log2(u_xlat16_18);
    u_xlat18 = u_xlat16_18 * _ShadowTransitionSoftness;
    u_xlat18 = exp2(u_xlat18);
    u_xlat18 = min(u_xlat18, 1.0);
    u_xlat18 = (u_xlatb27) ? 1.0 : u_xlat18;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition));
#else
    u_xlatb27 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition);
#endif
    u_xlat18 = (u_xlatb27) ? u_xlat18 : 1.0;
    u_xlat18 = u_xlatb0.x ? u_xlat18 : float(0.0);
    u_xlat16_4.xyz = vec3(_FirstShadowMultColor.xxyz.y + (-_CoolShadowMultColor.x), _FirstShadowMultColor.xxyz.z + (-_CoolShadowMultColor.y), float(_FirstShadowMultColor.z) + (-_CoolShadowMultColor.z));
    u_xlat4.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_4.xyz + _CoolShadowMultColor.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex));
#else
    u_xlatb30 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex);
#endif
    u_xlat16_2.xyz = (bool(u_xlatb30)) ? u_xlat4.xyz : vec3(_FirstShadowMultColor.x, _FirstShadowMultColor.y, _FirstShadowMultColor.z);
    u_xlat16_4.xyz = u_xlat16_2.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat4.xyz = vec3(u_xlat18) * u_xlat16_4.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_5.xyz = (bool(u_xlatb27)) ? u_xlat4.xyz : u_xlat16_2.xyz;
    u_xlat16_6.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_6.xyz;
    u_xlat1.xyz = u_xlat16_6.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
    u_xlat0.xzw = (u_xlatb0.x) ? u_xlat16_5.xyz : u_xlat1.xyz;
    u_xlat16_5.xyz = u_xlat3.xyz + u_xlat0.xzw;
    u_xlat16_2.xyz = u_xlat16_6.xyz * u_xlat16_2.xyz + u_xlat3.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * _EmissionColor_MHY.xyz;
    u_xlat16_7.xyz = u_xlat16_6.xyz * vec3(vec3(_EmissionScaler, _EmissionScaler, _EmissionScaler)) + (-u_xlat16_5.xyz);
    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(vec3(_EmissionScaler, _EmissionScaler, _EmissionScaler)) + (-u_xlat16_2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(0.00999999978<u_xlat10_1.w);
#else
    u_xlatb0.x = 0.00999999978<u_xlat10_1.w;
#endif
    u_xlatb0.x = u_xlatb0.x && u_xlatb0.y;
    u_xlat16_29 = (u_xlatb0.x) ? u_xlat10_1.w : 0.0;
    u_xlat16_7.xyz = vec3(u_xlat16_29) * u_xlat16_7.xyz + u_xlat16_5.xyz;
    u_xlat16_5.xyz = (u_xlatb0.x) ? u_xlat16_7.xyz : u_xlat16_5.xyz;
    u_xlat9.xyz = u_xlat16_5.xyz * vec3(vec3(_ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness));
    u_xlat1.xyz = _ES_CharacterMainLightColor.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat1.xyz = vec3(vec3(_ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio)) * u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat9.xyz = u_xlat9.xyz * u_xlat1.xyz;
    u_xlat16_7.xyz = u_xlat9.xyz * vec3(10.0, 10.0, 10.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.xyz = min(max(u_xlat16_7.xyz, 0.0), 1.0);
#else
    u_xlat16_7.xyz = clamp(u_xlat16_7.xyz, 0.0, 1.0);
#endif
    u_xlat1.xyz = _ES_CharacterAmbientLightColor.xyz * vec3(_ES_CharacterAmbientLightRatio);
    u_xlat9.xyz = u_xlat1.xyz * u_xlat16_7.xyz + u_xlat9.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn));
#else
    u_xlatb1 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn);
#endif
    u_xlat16_7.xyz = (bool(u_xlatb1)) ? u_xlat9.xyz : u_xlat16_5.xyz;
    u_xlat16_8.xyz = u_xlat16_5.xyz + (-u_xlat16_7.xyz);
    u_xlat16_8.xyz = vec3(u_xlat16_29) * u_xlat16_8.xyz + u_xlat16_7.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(0.00999999978<u_xlat16_29);
#else
    u_xlatb9 = 0.00999999978<u_xlat16_29;
#endif
    u_xlat16_1.xyz = (bool(u_xlatb9)) ? u_xlat16_8.xyz : u_xlat16_7.xyz;
    u_xlat16_32 = max(u_xlat16_1.z, u_xlat16_1.y);
    u_xlat16_3.w = max(u_xlat16_1.x, u_xlat16_32);
    u_xlat16_3.xyz = u_xlat16_1.xyz / u_xlat16_3.www;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(1.0<u_xlat16_3.w);
#else
    u_xlatb18 = 1.0<u_xlat16_3.w;
#endif
    u_xlat16_1.w = 1.0;
    u_xlat16_1 = (bool(u_xlatb18)) ? u_xlat16_3 : u_xlat16_1;
    u_xlat16_32 = min(u_xlat16_1.w, 1.10000002);
    u_xlat16_33 = u_xlat16_1.w + (-u_xlat16_32);
    SV_Target1.xyz = u_xlat16_1.xyz;
    u_xlat16_32 = u_xlat16_29 * u_xlat16_33 + u_xlat16_32;
    SV_Target1.w = u_xlat16_32 * 0.0500000007;
    u_xlat16_6.xyz = vec3(u_xlat16_29) * u_xlat16_6.xyz + u_xlat16_2.xyz;
    u_xlat16_2.xyz = (u_xlatb0.x) ? u_xlat16_6.xyz : u_xlat16_2.xyz;
    u_xlat16_5.xyz = (-u_xlat16_2.xyz) + u_xlat16_5.xyz;
    u_xlat16_5.xyz = vec3(u_xlat16_29) * u_xlat16_5.xyz + u_xlat16_2.xyz;
    u_xlat16_2.xyz = (bool(u_xlatb9)) ? u_xlat16_5.xyz : u_xlat16_2.xyz;
    SV_Target2.xy = u_xlat16_2.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_2.x = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb0.x) ? u_xlat16_2.x : u_xlat16_2.z;
    SV_Target2.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "MSAA_INTERPOLATION" "TOON_SPECULAR_ON" "TOON_LIGHTMAP_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec3 mhy_AvatarLightDir;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump float u_xlat16_4;
float u_xlat16;
void main()
{
    u_xlat0.x = hlslcc_mtx4x4unity_ObjectToWorld[0].y;
    u_xlat0.y = hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat0.z = hlslcc_mtx4x4unity_ObjectToWorld[2].y;
    u_xlat1.xyw = (-_WorldSpaceCameraPos.xyz) + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat0.w = u_xlat1.y;
    u_xlat2.xyz = in_POSITION0.xyz;
    u_xlat2.w = 1.0;
    u_xlat0.x = dot(u_xlat0, u_xlat2);
    u_xlat0 = u_xlat0.xxxx * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat3.w = u_xlat1.x;
    u_xlat3.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;
    u_xlat3.y = hlslcc_mtx4x4unity_ObjectToWorld[1].x;
    u_xlat3.z = hlslcc_mtx4x4unity_ObjectToWorld[2].x;
    u_xlat3.x = dot(u_xlat3, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat3.xxxx + u_xlat0;
    u_xlat1.x = hlslcc_mtx4x4unity_ObjectToWorld[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_ObjectToWorld[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_ObjectToWorld[2].z;
    u_xlat1.x = dot(u_xlat1, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat1.xxxx + u_xlat0;
    u_xlat1.x = hlslcc_mtx4x4unity_ObjectToWorld[0].w;
    u_xlat1.y = hlslcc_mtx4x4unity_ObjectToWorld[1].w;
    u_xlat1.z = hlslcc_mtx4x4unity_ObjectToWorld[2].w;
    u_xlat1.w = hlslcc_mtx4x4unity_ObjectToWorld[3].w;
    u_xlat1.x = dot(u_xlat1, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[3] * u_xlat1.xxxx + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat16 = inversesqrt(u_xlat16);
    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
    u_xlat16_4 = dot(u_xlat1.xyz, mhy_AvatarLightDir.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    vs_TEXCOORD1.w = u_xlat16_4 * 0.497500002 + 0.5;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.zw = u_xlat0.zw;
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD3.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD5.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	mediump vec4 _Color;
uniform 	float _MainTexAlphaUse;
uniform 	mediump float _MainTexAlphaCutoff;
uniform 	float _UseLightMapColorAO;
uniform 	float _UseVertexColorAO;
uniform 	mediump float _LightArea;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	float _UseCoolShadowColorOrTex;
uniform 	mediump vec3 _CoolShadowMultColor;
uniform 	float _UseShadowTransition;
uniform 	float _ShadowTransitionRange;
uniform 	float _ShadowTransitionSoftness;
uniform 	mediump vec3 _SpecularColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump float _EmissionScaler;
uniform 	mediump vec3 _EmissionColor_MHY;
uniform 	float _ES_CharacterAmbientLightOn;
uniform 	float _ES_CharacterAmbientBrightness;
uniform 	vec3 _ES_CharacterMainLightColor;
uniform 	float _ES_CharacterMainLightBrightness;
uniform 	vec3 _ES_CharacterAmbientLightColor;
uniform 	float _ES_CharacterMainLightRatio;
uniform 	float _ES_CharacterAmbientLightRatio;
uniform 	float _ES_CharacterColorTone;
uniform 	vec3 mhy_AvatarLightDir;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMapTex;
in mediump vec4 vs_COLOR0;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec4 u_xlat0;
lowp vec3 u_xlat10_0;
bool u_xlatb0;
vec3 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
bool u_xlatb1;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump vec4 u_xlat16_3;
bvec3 u_xlatb3;
vec3 u_xlat4;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
vec3 u_xlat9;
bool u_xlatb9;
mediump float u_xlat16_11;
vec2 u_xlat18;
bool u_xlatb18;
bool u_xlatb21;
float u_xlat27;
bool u_xlatb27;
mediump float u_xlat16_29;
bool u_xlatb30;
mediump float u_xlat16_32;
mediump float u_xlat16_33;
void main()
{
    u_xlat0.xy = dFdx(vs_TEXCOORD0.xy);
    u_xlat18.xy = dFdy(vs_TEXCOORD0.xy);
    u_xlat0.xy = u_xlat18.xy + u_xlat0.xy;
    u_xlat18.xy = (-u_xlat0.xy) * vec2(0.25, 0.25) + vs_TEXCOORD0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25) + vs_TEXCOORD0.xy;
    u_xlat0.xy = (int(gl_SampleID) != 0) ? u_xlat18.xy : u_xlat0.xy;
    u_xlat10_1 = textureLod(_MainTex, u_xlat0.xy, 0.0);
    u_xlat10_0.xyz = textureLod(_LightMapTex, u_xlat0.xy, 0.0).xyz;
    u_xlat16_2.x = u_xlat10_1.w + (-_MainTexAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(u_xlat16_2.x<0.0);
#else
    u_xlatb27 = u_xlat16_2.x<0.0;
#endif
    u_xlatb3.xy = equal(vec4(_MainTexAlphaUse), vec4(1.0, 2.0, 0.0, 0.0)).xy;
    u_xlatb27 = u_xlatb27 && u_xlatb3.x;
    if((int(u_xlatb27) * int(0xffffffffu))!=0){discard;}
    SV_Target0.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0470588244;
    u_xlat3.xzw = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat27 = dot(u_xlat3.xzw, u_xlat3.xzw);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat3.xzw = u_xlat3.xzw * vec3(u_xlat27) + mhy_AvatarLightDir.xyz;
    u_xlat27 = dot(u_xlat3.xzw, u_xlat3.xzw);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat3.xzw = vec3(u_xlat27) * u_xlat3.xzw;
    u_xlat16_2.x = dot(vs_TEXCOORD1.xyz, u_xlat3.xzw);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.00100000005);
    u_xlat16_2.x = log2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * _Shininess;
    u_xlat16_2.x = exp2(u_xlat16_2.x);
    u_xlat18.x = (-u_xlat10_0.z) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(u_xlat18.x<u_xlat16_2.x);
#else
    u_xlatb18 = u_xlat18.x<u_xlat16_2.x;
#endif
    u_xlat16_2.xyz = _SpecularColor.xyz * vec3(_SpecMulti);
    u_xlat16_2.xyz = u_xlat10_0.xxx * u_xlat16_2.xyz;
    u_xlat3.xzw = u_xlat16_2.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
    u_xlat0.xzw = mix(vec3(0.0, 0.0, 0.0), u_xlat3.xzw, vec3(bvec3(u_xlatb18)));
    u_xlatb3.xz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseLightMapColorAO, _UseLightMapColorAO, _UseVertexColorAO, _UseLightMapColorAO)).xz;
    u_xlat16_2.x = (u_xlatb3.x) ? u_xlat10_0.y : 0.5;
    u_xlat16_11 = u_xlat16_2.x * vs_COLOR0.x;
    u_xlat16_2.x = (u_xlatb3.z) ? u_xlat16_11 : u_xlat16_2.x;
    u_xlat9.x = u_xlat16_2.x + vs_TEXCOORD1.w;
    u_xlat9.x = u_xlat9.x * 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb3.x = !!(0.949999988<u_xlat16_2.x);
#else
    u_xlatb3.x = 0.949999988<u_xlat16_2.x;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(u_xlat16_2.x<0.0500000007);
#else
    u_xlatb21 = u_xlat16_2.x<0.0500000007;
#endif
    u_xlat16_2.x = (u_xlatb3.x) ? 1.0 : u_xlat9.x;
    u_xlat16_2.x = (u_xlatb21) ? 0.0 : u_xlat16_2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(u_xlat16_2.x<_LightArea);
#else
    u_xlatb9 = u_xlat16_2.x<_LightArea;
#endif
    u_xlat16_2.x = (-u_xlat16_2.x) + _LightArea;
    u_xlat16_2.x = u_xlat16_2.x / _ShadowTransitionRange;
    u_xlat16_3.x = u_xlat16_2.x + 0.00999999978;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(u_xlat16_2.x>=1.0);
#else
    u_xlatb21 = u_xlat16_2.x>=1.0;
#endif
    u_xlat16_3.x = log2(u_xlat16_3.x);
    u_xlat3.x = u_xlat16_3.x * _ShadowTransitionSoftness;
    u_xlat3.x = exp2(u_xlat3.x);
    u_xlat3.x = min(u_xlat3.x, 1.0);
    u_xlat3.x = (u_xlatb21) ? 1.0 : u_xlat3.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition));
#else
    u_xlatb21 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition);
#endif
    u_xlat3.x = (u_xlatb21) ? u_xlat3.x : 1.0;
    u_xlat3.x = u_xlatb9 ? u_xlat3.x : float(0.0);
    u_xlat16_4.xyz = vec3(_FirstShadowMultColor.xxyz.y + (-_CoolShadowMultColor.x), _FirstShadowMultColor.xxyz.z + (-_CoolShadowMultColor.y), float(_FirstShadowMultColor.z) + (-_CoolShadowMultColor.z));
    u_xlat4.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_4.xyz + _CoolShadowMultColor.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex));
#else
    u_xlatb30 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex);
#endif
    u_xlat16_2.xyz = (bool(u_xlatb30)) ? u_xlat4.xyz : vec3(_FirstShadowMultColor.x, _FirstShadowMultColor.y, _FirstShadowMultColor.z);
    u_xlat16_4.xyz = u_xlat16_2.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat4.xyz = u_xlat3.xxx * u_xlat16_4.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_5.xyz = (bool(u_xlatb21)) ? u_xlat4.xyz : u_xlat16_2.xyz;
    u_xlat16_6.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_6.xyz;
    u_xlat1.xyz = u_xlat16_6.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
    u_xlat1.xyz = (bool(u_xlatb9)) ? u_xlat16_5.xyz : u_xlat1.xyz;
    u_xlat16_5.xyz = u_xlat0.xzw + u_xlat1.xyz;
    u_xlat16_2.xyz = u_xlat16_6.xyz * u_xlat16_2.xyz + u_xlat0.xzw;
    u_xlat16_6.xyz = u_xlat16_6.xyz * _EmissionColor_MHY.xyz;
    u_xlat16_7.xyz = u_xlat16_6.xyz * vec3(vec3(_EmissionScaler, _EmissionScaler, _EmissionScaler)) + (-u_xlat16_5.xyz);
    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(vec3(_EmissionScaler, _EmissionScaler, _EmissionScaler)) + (-u_xlat16_2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.00999999978<u_xlat10_1.w);
#else
    u_xlatb0 = 0.00999999978<u_xlat10_1.w;
#endif
    u_xlatb0 = u_xlatb0 && u_xlatb3.y;
    u_xlat16_29 = (u_xlatb0) ? u_xlat10_1.w : 0.0;
    u_xlat16_7.xyz = vec3(u_xlat16_29) * u_xlat16_7.xyz + u_xlat16_5.xyz;
    u_xlat16_5.xyz = (bool(u_xlatb0)) ? u_xlat16_7.xyz : u_xlat16_5.xyz;
    u_xlat9.xyz = u_xlat16_5.xyz * vec3(vec3(_ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness));
    u_xlat1.xyz = _ES_CharacterMainLightColor.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat1.xyz = vec3(vec3(_ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio)) * u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat9.xyz = u_xlat9.xyz * u_xlat1.xyz;
    u_xlat16_7.xyz = u_xlat9.xyz * vec3(10.0, 10.0, 10.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.xyz = min(max(u_xlat16_7.xyz, 0.0), 1.0);
#else
    u_xlat16_7.xyz = clamp(u_xlat16_7.xyz, 0.0, 1.0);
#endif
    u_xlat1.xyz = _ES_CharacterAmbientLightColor.xyz * vec3(_ES_CharacterAmbientLightRatio);
    u_xlat9.xyz = u_xlat1.xyz * u_xlat16_7.xyz + u_xlat9.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn));
#else
    u_xlatb1 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn);
#endif
    u_xlat16_7.xyz = (bool(u_xlatb1)) ? u_xlat9.xyz : u_xlat16_5.xyz;
    u_xlat16_8.xyz = u_xlat16_5.xyz + (-u_xlat16_7.xyz);
    u_xlat16_8.xyz = vec3(u_xlat16_29) * u_xlat16_8.xyz + u_xlat16_7.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(0.00999999978<u_xlat16_29);
#else
    u_xlatb9 = 0.00999999978<u_xlat16_29;
#endif
    u_xlat16_1.xyz = (bool(u_xlatb9)) ? u_xlat16_8.xyz : u_xlat16_7.xyz;
    u_xlat16_32 = max(u_xlat16_1.z, u_xlat16_1.y);
    u_xlat16_3.w = max(u_xlat16_1.x, u_xlat16_32);
    u_xlat16_3.xyz = u_xlat16_1.xyz / u_xlat16_3.www;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(1.0<u_xlat16_3.w);
#else
    u_xlatb18 = 1.0<u_xlat16_3.w;
#endif
    u_xlat16_1.w = 1.0;
    u_xlat16_1 = (bool(u_xlatb18)) ? u_xlat16_3 : u_xlat16_1;
    u_xlat16_32 = min(u_xlat16_1.w, 1.10000002);
    u_xlat16_33 = u_xlat16_1.w + (-u_xlat16_32);
    SV_Target1.xyz = u_xlat16_1.xyz;
    u_xlat16_32 = u_xlat16_29 * u_xlat16_33 + u_xlat16_32;
    SV_Target1.w = u_xlat16_32 * 0.0500000007;
    u_xlat16_6.xyz = vec3(u_xlat16_29) * u_xlat16_6.xyz + u_xlat16_2.xyz;
    u_xlat16_2.xyz = (bool(u_xlatb0)) ? u_xlat16_6.xyz : u_xlat16_2.xyz;
    u_xlat16_5.xyz = (-u_xlat16_2.xyz) + u_xlat16_5.xyz;
    u_xlat16_5.xyz = vec3(u_xlat16_29) * u_xlat16_5.xyz + u_xlat16_2.xyz;
    u_xlat16_2.xyz = (bool(u_xlatb9)) ? u_xlat16_5.xyz : u_xlat16_2.xyz;
    SV_Target2.xy = u_xlat16_2.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_2.x = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb0) ? u_xlat16_2.x : u_xlat16_2.z;
    SV_Target2.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "LINE_INTERPOLATION" "TOON_SPECULAR_ON" "TOON_LIGHTMAP_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec3 mhy_AvatarLightDir;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump float u_xlat16_4;
float u_xlat16;
void main()
{
    u_xlat0.x = hlslcc_mtx4x4unity_ObjectToWorld[0].y;
    u_xlat0.y = hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat0.z = hlslcc_mtx4x4unity_ObjectToWorld[2].y;
    u_xlat1.xyw = (-_WorldSpaceCameraPos.xyz) + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat0.w = u_xlat1.y;
    u_xlat2.xyz = in_POSITION0.xyz;
    u_xlat2.w = 1.0;
    u_xlat0.x = dot(u_xlat0, u_xlat2);
    u_xlat0 = u_xlat0.xxxx * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat3.w = u_xlat1.x;
    u_xlat3.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;
    u_xlat3.y = hlslcc_mtx4x4unity_ObjectToWorld[1].x;
    u_xlat3.z = hlslcc_mtx4x4unity_ObjectToWorld[2].x;
    u_xlat3.x = dot(u_xlat3, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat3.xxxx + u_xlat0;
    u_xlat1.x = hlslcc_mtx4x4unity_ObjectToWorld[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_ObjectToWorld[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_ObjectToWorld[2].z;
    u_xlat1.x = dot(u_xlat1, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat1.xxxx + u_xlat0;
    u_xlat1.x = hlslcc_mtx4x4unity_ObjectToWorld[0].w;
    u_xlat1.y = hlslcc_mtx4x4unity_ObjectToWorld[1].w;
    u_xlat1.z = hlslcc_mtx4x4unity_ObjectToWorld[2].w;
    u_xlat1.w = hlslcc_mtx4x4unity_ObjectToWorld[3].w;
    u_xlat1.x = dot(u_xlat1, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[3] * u_xlat1.xxxx + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat16 = inversesqrt(u_xlat16);
    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
    u_xlat16_4 = dot(u_xlat1.xyz, mhy_AvatarLightDir.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    vs_TEXCOORD1.w = u_xlat16_4 * 0.497500002 + 0.5;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.zw = u_xlat0.zw;
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD3.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD5.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	mediump vec4 _Color;
uniform 	float _MainTexAlphaUse;
uniform 	mediump float _MainTexAlphaCutoff;
uniform 	float _UseLightMapColorAO;
uniform 	float _UseVertexColorAO;
uniform 	mediump float _LightArea;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	float _UseCoolShadowColorOrTex;
uniform 	mediump vec3 _CoolShadowMultColor;
uniform 	float _UseShadowTransition;
uniform 	float _ShadowTransitionRange;
uniform 	float _ShadowTransitionSoftness;
uniform 	mediump vec3 _SpecularColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump float _EmissionScaler;
uniform 	mediump vec3 _EmissionColor_MHY;
uniform 	float _ES_CharacterAmbientLightOn;
uniform 	float _ES_CharacterAmbientBrightness;
uniform 	vec3 _ES_CharacterMainLightColor;
uniform 	float _ES_CharacterMainLightBrightness;
uniform 	vec3 _ES_CharacterAmbientLightColor;
uniform 	float _ES_CharacterMainLightRatio;
uniform 	float _ES_CharacterAmbientLightRatio;
uniform 	float _ES_CharacterColorTone;
uniform 	vec3 mhy_AvatarLightDir;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMapTex;
in mediump vec4 vs_COLOR0;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec4 u_xlat0;
lowp vec4 u_xlat10_0;
bvec4 u_xlatb0;
vec3 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
bool u_xlatb1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump vec4 u_xlat16_3;
vec3 u_xlat4;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
vec3 u_xlat9;
bool u_xlatb9;
mediump float u_xlat16_11;
float u_xlat18;
mediump float u_xlat16_18;
bool u_xlatb18;
float u_xlat27;
bool u_xlatb27;
mediump float u_xlat16_29;
bool u_xlatb30;
mediump float u_xlat16_32;
mediump float u_xlat16_33;
void main()
{
    u_xlatb0.xy = equal(vec4(_MainTexAlphaUse), vec4(1.0, 2.0, 0.0, 0.0)).xy;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy, -1.0);
    u_xlat16_2.x = u_xlat10_1.w + (-_MainTexAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(u_xlat16_2.x<0.0);
#else
    u_xlatb18 = u_xlat16_2.x<0.0;
#endif
    u_xlatb0.x = u_xlatb0.x && u_xlatb18;
    if((int(u_xlatb0.x) * int(0xffffffffu))!=0){discard;}
    SV_Target0.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0470588244;
    u_xlat0.xzw = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat0.xzw = u_xlat0.xzw * u_xlat3.xxx + mhy_AvatarLightDir.xyz;
    u_xlat3.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat0.xzw = u_xlat0.xzw * u_xlat3.xxx;
    u_xlat16_2.x = dot(vs_TEXCOORD1.xyz, u_xlat0.xzw);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.00100000005);
    u_xlat16_2.x = log2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * _Shininess;
    u_xlat16_2.x = exp2(u_xlat16_2.x);
    u_xlat10_0.xzw = texture(_LightMapTex, vs_TEXCOORD0.xy, -1.0).xyz;
    u_xlat27 = (-u_xlat10_0.w) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(u_xlat27<u_xlat16_2.x);
#else
    u_xlatb27 = u_xlat27<u_xlat16_2.x;
#endif
    u_xlat16_2.xyz = _SpecularColor.xyz * vec3(_SpecMulti);
    u_xlat16_2.xyz = u_xlat10_0.xxx * u_xlat16_2.xyz;
    u_xlat3.xyz = u_xlat16_2.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
    u_xlat3.xyz = mix(vec3(0.0, 0.0, 0.0), u_xlat3.xyz, vec3(bvec3(u_xlatb27)));
    u_xlatb0.xw = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseLightMapColorAO, _UseLightMapColorAO, _UseLightMapColorAO, _UseVertexColorAO)).xw;
    u_xlat16_2.x = (u_xlatb0.x) ? u_xlat10_0.z : 0.5;
    u_xlat16_11 = u_xlat16_2.x * vs_COLOR0.x;
    u_xlat16_2.x = (u_xlatb0.w) ? u_xlat16_11 : u_xlat16_2.x;
    u_xlat0.x = u_xlat16_2.x + vs_TEXCOORD1.w;
    u_xlat0.x = u_xlat0.x * 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(0.949999988<u_xlat16_2.x);
#else
    u_xlatb18 = 0.949999988<u_xlat16_2.x;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(u_xlat16_2.x<0.0500000007);
#else
    u_xlatb27 = u_xlat16_2.x<0.0500000007;
#endif
    u_xlat16_2.x = (u_xlatb18) ? 1.0 : u_xlat0.x;
    u_xlat16_2.x = (u_xlatb27) ? 0.0 : u_xlat16_2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(u_xlat16_2.x<_LightArea);
#else
    u_xlatb0.x = u_xlat16_2.x<_LightArea;
#endif
    u_xlat16_2.x = (-u_xlat16_2.x) + _LightArea;
    u_xlat16_2.x = u_xlat16_2.x / _ShadowTransitionRange;
    u_xlat16_18 = u_xlat16_2.x + 0.00999999978;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(u_xlat16_2.x>=1.0);
#else
    u_xlatb27 = u_xlat16_2.x>=1.0;
#endif
    u_xlat16_18 = log2(u_xlat16_18);
    u_xlat18 = u_xlat16_18 * _ShadowTransitionSoftness;
    u_xlat18 = exp2(u_xlat18);
    u_xlat18 = min(u_xlat18, 1.0);
    u_xlat18 = (u_xlatb27) ? 1.0 : u_xlat18;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition));
#else
    u_xlatb27 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition);
#endif
    u_xlat18 = (u_xlatb27) ? u_xlat18 : 1.0;
    u_xlat18 = u_xlatb0.x ? u_xlat18 : float(0.0);
    u_xlat16_4.xyz = vec3(_FirstShadowMultColor.xxyz.y + (-_CoolShadowMultColor.x), _FirstShadowMultColor.xxyz.z + (-_CoolShadowMultColor.y), float(_FirstShadowMultColor.z) + (-_CoolShadowMultColor.z));
    u_xlat4.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_4.xyz + _CoolShadowMultColor.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex));
#else
    u_xlatb30 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex);
#endif
    u_xlat16_2.xyz = (bool(u_xlatb30)) ? u_xlat4.xyz : vec3(_FirstShadowMultColor.x, _FirstShadowMultColor.y, _FirstShadowMultColor.z);
    u_xlat16_4.xyz = u_xlat16_2.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat4.xyz = vec3(u_xlat18) * u_xlat16_4.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_5.xyz = (bool(u_xlatb27)) ? u_xlat4.xyz : u_xlat16_2.xyz;
    u_xlat16_6.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_6.xyz;
    u_xlat1.xyz = u_xlat16_6.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
    u_xlat0.xzw = (u_xlatb0.x) ? u_xlat16_5.xyz : u_xlat1.xyz;
    u_xlat16_5.xyz = u_xlat3.xyz + u_xlat0.xzw;
    u_xlat16_2.xyz = u_xlat16_6.xyz * u_xlat16_2.xyz + u_xlat3.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * _EmissionColor_MHY.xyz;
    u_xlat16_7.xyz = u_xlat16_6.xyz * vec3(vec3(_EmissionScaler, _EmissionScaler, _EmissionScaler)) + (-u_xlat16_5.xyz);
    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(vec3(_EmissionScaler, _EmissionScaler, _EmissionScaler)) + (-u_xlat16_2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(0.00999999978<u_xlat10_1.w);
#else
    u_xlatb0.x = 0.00999999978<u_xlat10_1.w;
#endif
    u_xlatb0.x = u_xlatb0.x && u_xlatb0.y;
    u_xlat16_29 = (u_xlatb0.x) ? u_xlat10_1.w : 0.0;
    u_xlat16_7.xyz = vec3(u_xlat16_29) * u_xlat16_7.xyz + u_xlat16_5.xyz;
    u_xlat16_5.xyz = (u_xlatb0.x) ? u_xlat16_7.xyz : u_xlat16_5.xyz;
    u_xlat9.xyz = u_xlat16_5.xyz * vec3(vec3(_ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness));
    u_xlat1.xyz = _ES_CharacterMainLightColor.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat1.xyz = vec3(vec3(_ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio)) * u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat9.xyz = u_xlat9.xyz * u_xlat1.xyz;
    u_xlat16_7.xyz = u_xlat9.xyz * vec3(10.0, 10.0, 10.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.xyz = min(max(u_xlat16_7.xyz, 0.0), 1.0);
#else
    u_xlat16_7.xyz = clamp(u_xlat16_7.xyz, 0.0, 1.0);
#endif
    u_xlat1.xyz = _ES_CharacterAmbientLightColor.xyz * vec3(_ES_CharacterAmbientLightRatio);
    u_xlat9.xyz = u_xlat1.xyz * u_xlat16_7.xyz + u_xlat9.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn));
#else
    u_xlatb1 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn);
#endif
    u_xlat16_7.xyz = (bool(u_xlatb1)) ? u_xlat9.xyz : u_xlat16_5.xyz;
    u_xlat16_8.xyz = u_xlat16_5.xyz + (-u_xlat16_7.xyz);
    u_xlat16_8.xyz = vec3(u_xlat16_29) * u_xlat16_8.xyz + u_xlat16_7.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(0.00999999978<u_xlat16_29);
#else
    u_xlatb9 = 0.00999999978<u_xlat16_29;
#endif
    u_xlat16_1.xyz = (bool(u_xlatb9)) ? u_xlat16_8.xyz : u_xlat16_7.xyz;
    u_xlat16_32 = max(u_xlat16_1.z, u_xlat16_1.y);
    u_xlat16_3.w = max(u_xlat16_1.x, u_xlat16_32);
    u_xlat16_3.xyz = u_xlat16_1.xyz / u_xlat16_3.www;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(1.0<u_xlat16_3.w);
#else
    u_xlatb18 = 1.0<u_xlat16_3.w;
#endif
    u_xlat16_1.w = 1.0;
    u_xlat16_1 = (bool(u_xlatb18)) ? u_xlat16_3 : u_xlat16_1;
    u_xlat16_32 = min(u_xlat16_1.w, 1.10000002);
    u_xlat16_33 = u_xlat16_1.w + (-u_xlat16_32);
    SV_Target1.xyz = u_xlat16_1.xyz;
    u_xlat16_32 = u_xlat16_29 * u_xlat16_33 + u_xlat16_32;
    SV_Target1.w = u_xlat16_32 * 0.0500000007;
    u_xlat16_6.xyz = vec3(u_xlat16_29) * u_xlat16_6.xyz + u_xlat16_2.xyz;
    u_xlat16_2.xyz = (u_xlatb0.x) ? u_xlat16_6.xyz : u_xlat16_2.xyz;
    u_xlat16_5.xyz = (-u_xlat16_2.xyz) + u_xlat16_5.xyz;
    u_xlat16_5.xyz = vec3(u_xlat16_29) * u_xlat16_5.xyz + u_xlat16_2.xyz;
    u_xlat16_2.xyz = (bool(u_xlatb9)) ? u_xlat16_5.xyz : u_xlat16_2.xyz;
    SV_Target2.xy = u_xlat16_2.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_2.x = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb0.x) ? u_xlat16_2.x : u_xlat16_2.z;
    SV_Target2.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "TOON_SPECULAR_ON" "TOON_LIGHTMAP_ON" "METAL_MAT" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec3 mhy_AvatarLightDir;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump float u_xlat16_4;
float u_xlat16;
void main()
{
    u_xlat0.x = hlslcc_mtx4x4unity_ObjectToWorld[0].y;
    u_xlat0.y = hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat0.z = hlslcc_mtx4x4unity_ObjectToWorld[2].y;
    u_xlat1.xyw = (-_WorldSpaceCameraPos.xyz) + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat0.w = u_xlat1.y;
    u_xlat2.xyz = in_POSITION0.xyz;
    u_xlat2.w = 1.0;
    u_xlat0.x = dot(u_xlat0, u_xlat2);
    u_xlat0 = u_xlat0.xxxx * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat3.w = u_xlat1.x;
    u_xlat3.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;
    u_xlat3.y = hlslcc_mtx4x4unity_ObjectToWorld[1].x;
    u_xlat3.z = hlslcc_mtx4x4unity_ObjectToWorld[2].x;
    u_xlat3.x = dot(u_xlat3, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat3.xxxx + u_xlat0;
    u_xlat1.x = hlslcc_mtx4x4unity_ObjectToWorld[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_ObjectToWorld[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_ObjectToWorld[2].z;
    u_xlat1.x = dot(u_xlat1, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat1.xxxx + u_xlat0;
    u_xlat1.x = hlslcc_mtx4x4unity_ObjectToWorld[0].w;
    u_xlat1.y = hlslcc_mtx4x4unity_ObjectToWorld[1].w;
    u_xlat1.z = hlslcc_mtx4x4unity_ObjectToWorld[2].w;
    u_xlat1.w = hlslcc_mtx4x4unity_ObjectToWorld[3].w;
    u_xlat1.x = dot(u_xlat1, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[3] * u_xlat1.xxxx + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat16 = inversesqrt(u_xlat16);
    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
    u_xlat16_4 = dot(u_xlat1.xyz, mhy_AvatarLightDir.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    vs_TEXCOORD1.w = u_xlat16_4 * 0.497500002 + 0.5;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.zw = u_xlat0.zw;
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD3.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD5.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToCamera[4];
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	mediump vec4 _Color;
uniform 	float _MainTexAlphaUse;
uniform 	mediump float _MainTexAlphaCutoff;
uniform 	float _UseLightMapColorAO;
uniform 	float _UseVertexColorAO;
uniform 	mediump float _LightArea;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	float _UseCoolShadowColorOrTex;
uniform 	mediump vec3 _CoolShadowMultColor;
uniform 	float _UseShadowTransition;
uniform 	float _ShadowTransitionRange;
uniform 	float _ShadowTransitionSoftness;
uniform 	mediump vec3 _SpecularColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump float _EmissionScaler;
uniform 	mediump vec3 _EmissionColor_MHY;
uniform 	mediump float _MTMapBrightness;
uniform 	float _MTMapTileScale;
uniform 	mediump vec3 _MTMapLightColor;
uniform 	mediump vec3 _MTMapDarkColor;
uniform 	mediump vec3 _MTShadowMultiColor;
uniform 	mediump float _MTShininess;
uniform 	mediump vec3 _MTSpecularColor;
uniform 	mediump float _MTSpecularScale;
uniform 	float _ES_CharacterAmbientLightOn;
uniform 	float _ES_CharacterAmbientBrightness;
uniform 	vec3 _ES_CharacterMainLightColor;
uniform 	float _ES_CharacterMainLightBrightness;
uniform 	vec3 _ES_CharacterAmbientLightColor;
uniform 	float _ES_CharacterMainLightRatio;
uniform 	float _ES_CharacterAmbientLightRatio;
uniform 	float _ES_CharacterColorTone;
uniform 	vec3 mhy_AvatarLightDir;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MTMap;
in mediump vec4 vs_COLOR0;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
bool u_xlatb0;
vec3 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
bool u_xlatb1;
vec3 u_xlat2;
lowp vec4 u_xlat10_2;
bvec2 u_xlatb2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
mediump vec3 u_xlat16_4;
bvec2 u_xlatb4;
mediump float u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
vec3 u_xlat9;
mediump vec3 u_xlat16_9;
vec3 u_xlat10;
mediump vec3 u_xlat16_10;
bool u_xlatb11;
vec3 u_xlat12;
bool u_xlatb12;
vec2 u_xlat13;
mediump vec3 u_xlat16_14;
mediump vec3 u_xlat16_16;
float u_xlat23;
bool u_xlatb23;
float u_xlat33;
bool u_xlatb33;
float u_xlat34;
mediump float u_xlat16_34;
lowp float u_xlat10_34;
bool u_xlatb34;
mediump float u_xlat16_36;
void main()
{
    u_xlat0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat33) + mhy_AvatarLightDir.xyz;
    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat0.xyz = vec3(u_xlat33) * u_xlat0.xyz;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy, -1.0);
    u_xlatb2.xy = equal(vec4(_MainTexAlphaUse), vec4(1.0, 2.0, 0.0, 0.0)).xy;
    u_xlat16_3.x = u_xlat10_1.w + (-_MainTexAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(u_xlat16_3.x<0.0);
#else
    u_xlatb33 = u_xlat16_3.x<0.0;
#endif
    u_xlatb33 = u_xlatb2.x && u_xlatb33;
    if((int(u_xlatb33) * int(0xffffffffu))!=0){discard;}
    u_xlat10_2.xzw = texture(_LightMapTex, vs_TEXCOORD0.xy, -1.0).xyz;
    u_xlatb4.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseLightMapColorAO, _UseVertexColorAO, _UseLightMapColorAO, _UseLightMapColorAO)).xy;
    u_xlat16_3.x = (u_xlatb4.x) ? u_xlat10_2.z : 0.5;
    u_xlat16_14.xyz = u_xlat10_1.xyz * _Color.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(0.00999999978<u_xlat10_1.w);
#else
    u_xlatb33 = 0.00999999978<u_xlat10_1.w;
#endif
    u_xlatb33 = u_xlatb33 && u_xlatb2.y;
    u_xlat16_5 = (u_xlatb33) ? u_xlat10_1.w : 0.0;
    u_xlat16_16.x = u_xlat16_3.x * vs_COLOR0.x;
    u_xlat16_3.x = (u_xlatb4.y) ? u_xlat16_16.x : u_xlat16_3.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(u_xlat16_3.x<0.0500000007);
#else
    u_xlatb1 = u_xlat16_3.x<0.0500000007;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(0.949999988<u_xlat16_3.x);
#else
    u_xlatb12 = 0.949999988<u_xlat16_3.x;
#endif
    u_xlat23 = u_xlat16_3.x + vs_TEXCOORD1.w;
    u_xlat23 = u_xlat23 * 0.5;
    u_xlat16_3.x = (u_xlatb12) ? 1.0 : u_xlat23;
    u_xlat16_3.x = (u_xlatb1) ? 0.0 : u_xlat16_3.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(u_xlat16_3.x<_LightArea);
#else
    u_xlatb1 = u_xlat16_3.x<_LightArea;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition));
#else
    u_xlatb12 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition);
#endif
    u_xlat16_3.x = (-u_xlat16_3.x) + _LightArea;
    u_xlat16_3.x = u_xlat16_3.x / _ShadowTransitionRange;
#ifdef UNITY_ADRENO_ES3
    u_xlatb23 = !!(u_xlat16_3.x>=1.0);
#else
    u_xlatb23 = u_xlat16_3.x>=1.0;
#endif
    u_xlat16_34 = u_xlat16_3.x + 0.00999999978;
    u_xlat16_34 = log2(u_xlat16_34);
    u_xlat34 = u_xlat16_34 * _ShadowTransitionSoftness;
    u_xlat34 = exp2(u_xlat34);
    u_xlat34 = min(u_xlat34, 1.0);
    u_xlat23 = (u_xlatb23) ? 1.0 : u_xlat34;
    u_xlat23 = (u_xlatb12) ? u_xlat23 : 1.0;
    u_xlat23 = u_xlatb1 ? u_xlat23 : float(0.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb34 = !!(0.899999976<u_xlat10_2.x);
#else
    u_xlatb34 = 0.899999976<u_xlat10_2.x;
#endif
    if(u_xlatb34){
        u_xlat13.xy = vs_TEXCOORD1.yy * hlslcc_mtx4x4unity_WorldToCamera[1].xy;
        u_xlat13.xy = hlslcc_mtx4x4unity_WorldToCamera[0].xy * vs_TEXCOORD1.xx + u_xlat13.xy;
        u_xlat4.yz = hlslcc_mtx4x4unity_WorldToCamera[2].xy * vs_TEXCOORD1.zz + u_xlat13.xy;
        u_xlat4.x = u_xlat4.y * _MTMapTileScale;
        u_xlat16_16.xy = u_xlat4.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
        u_xlat10_34 = texture(_MTMap, u_xlat16_16.xy).x;
        u_xlat16_3.x = u_xlat10_34 * _MTMapBrightness;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
        u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
        u_xlat16_16.xyz = _MTMapLightColor.xyz + (-_MTMapDarkColor.xyz);
        u_xlat16_16.xyz = u_xlat16_3.xxx * u_xlat16_16.xyz + _MTMapDarkColor.xyz;
        u_xlat16_16.xyz = u_xlat16_14.xyz * u_xlat16_16.xyz;
        u_xlat16_3.x = dot(vs_TEXCOORD1.xyz, u_xlat0.xyz);
        u_xlat16_3.x = max(u_xlat16_3.x, 0.00100000005);
        u_xlat16_3.x = log2(u_xlat16_3.x);
        u_xlat16_3.x = u_xlat16_3.x * _MTShininess;
        u_xlat16_3.x = exp2(u_xlat16_3.x);
        u_xlat16_3.x = u_xlat16_3.x * _MTSpecularScale;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
        u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
        u_xlat16_6.xyz = u_xlat16_3.xxx * _MTSpecularColor.xyz;
        u_xlat16_6.xyz = u_xlat10_2.www * u_xlat16_6.xyz;
        u_xlat16_7.xyz = u_xlat16_16.xyz * _MTShadowMultiColor.xyz;
        u_xlat16_4.xyz = _MTShadowMultiColor.xyz + vec3(-1.0, -1.0, -1.0);
        u_xlat4.xyz = vec3(u_xlat23) * u_xlat16_4.xyz + vec3(1.0, 1.0, 1.0);
        u_xlat16_8.xyz = (bool(u_xlatb12)) ? u_xlat4.xyz : _MTShadowMultiColor.xyz;
        u_xlat16_8.xyz = u_xlat16_16.xyz * u_xlat16_8.xyz;
        u_xlat4.xyz = u_xlat16_16.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
        u_xlat4.xyz = (bool(u_xlatb1)) ? u_xlat16_8.xyz : u_xlat4.xyz;
        u_xlat9.xyz = u_xlat16_6.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
        u_xlat16_4.xyz = u_xlat4.xyz;
        u_xlat16_9.xyz = u_xlat9.xyz;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb34 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex));
#else
        u_xlatb34 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex);
#endif
        u_xlat16_10.xyz = vec3(_FirstShadowMultColor.xxyz.y + (-_CoolShadowMultColor.x), _FirstShadowMultColor.xxyz.z + (-_CoolShadowMultColor.y), float(_FirstShadowMultColor.z) + (-_CoolShadowMultColor.z));
        u_xlat10.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_10.xyz + _CoolShadowMultColor.xyz;
        u_xlat16_16.xyz = (bool(u_xlatb34)) ? u_xlat10.xyz : vec3(_FirstShadowMultColor.x, _FirstShadowMultColor.y, _FirstShadowMultColor.z);
        u_xlat16_7.xyz = u_xlat16_14.xyz * u_xlat16_16.xyz;
        u_xlat16_10.xyz = u_xlat16_16.xyz + vec3(-1.0, -1.0, -1.0);
        u_xlat10.xyz = vec3(u_xlat23) * u_xlat16_10.xyz + vec3(1.0, 1.0, 1.0);
        u_xlat16_16.xyz = (bool(u_xlatb12)) ? u_xlat10.xyz : u_xlat16_16.xyz;
        u_xlat16_16.xyz = u_xlat16_14.xyz * u_xlat16_16.xyz;
        u_xlat12.xyz = u_xlat16_14.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
        u_xlat4.xyz = (bool(u_xlatb1)) ? u_xlat16_16.xyz : u_xlat12.xyz;
        u_xlat16_3.x = dot(vs_TEXCOORD1.xyz, u_xlat0.xyz);
        u_xlat16_3.x = max(u_xlat16_3.x, 0.00100000005);
        u_xlat16_3.x = log2(u_xlat16_3.x);
        u_xlat16_3.x = u_xlat16_3.x * _Shininess;
        u_xlat16_3.x = exp2(u_xlat16_3.x);
        u_xlat0.x = (-u_xlat10_2.w) + 1.0;
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<u_xlat16_3.x);
#else
        u_xlatb0 = u_xlat0.x<u_xlat16_3.x;
#endif
        u_xlat16_16.xyz = _SpecularColor.xyz * vec3(_SpecMulti);
        u_xlat16_16.xyz = u_xlat10_2.xxx * u_xlat16_16.xyz;
        u_xlat1.xyz = u_xlat16_16.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
        u_xlat9.xyz = mix(vec3(0.0, 0.0, 0.0), u_xlat1.xyz, vec3(bvec3(u_xlatb0)));
        u_xlat16_4.xyz = u_xlat4.xyz;
        u_xlat16_9.xyz = u_xlat9.xyz;
    //ENDIF
    }
    u_xlat16_3.xyz = u_xlat16_14.xyz * _EmissionColor_MHY.xyz;
    u_xlat16_16.xyz = u_xlat16_4.xyz + u_xlat16_9.xyz;
    u_xlat16_6.xyz = u_xlat16_7.xyz + u_xlat16_9.xyz;
    u_xlat16_7.xyz = u_xlat16_3.xyz * vec3(vec3(_EmissionScaler, _EmissionScaler, _EmissionScaler)) + (-u_xlat16_16.xyz);
    u_xlat16_7.xyz = vec3(u_xlat16_5) * u_xlat16_7.xyz + u_xlat16_16.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(vec3(_EmissionScaler, _EmissionScaler, _EmissionScaler)) + (-u_xlat16_6.xyz);
    u_xlat16_3.xyz = vec3(u_xlat16_5) * u_xlat16_3.xyz + u_xlat16_6.xyz;
    u_xlat16_16.xyz = (bool(u_xlatb33)) ? u_xlat16_7.xyz : u_xlat16_16.xyz;
    u_xlat16_3.xyz = (bool(u_xlatb33)) ? u_xlat16_3.xyz : u_xlat16_6.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.00999999978<u_xlat16_5);
#else
    u_xlatb0 = 0.00999999978<u_xlat16_5;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb11 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn));
#else
    u_xlatb11 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn);
#endif
    u_xlat1.xyz = u_xlat16_16.xyz * vec3(vec3(_ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness));
    u_xlat2.xyz = _ES_CharacterMainLightColor.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat2.xyz = vec3(vec3(_ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio)) * u_xlat2.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
    u_xlat2.xyz = _ES_CharacterAmbientLightColor.xyz * vec3(_ES_CharacterAmbientLightRatio);
    u_xlat16_6.xyz = u_xlat1.xyz * vec3(10.0, 10.0, 10.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.xyz = min(max(u_xlat16_6.xyz, 0.0), 1.0);
#else
    u_xlat16_6.xyz = clamp(u_xlat16_6.xyz, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat2.xyz * u_xlat16_6.xyz + u_xlat1.xyz;
    u_xlat16_6.xyz = (bool(u_xlatb11)) ? u_xlat1.xyz : u_xlat16_16.xyz;
    u_xlat16_7.xyz = u_xlat16_16.xyz + (-u_xlat16_6.xyz);
    u_xlat16_7.xyz = vec3(u_xlat16_5) * u_xlat16_7.xyz + u_xlat16_6.xyz;
    u_xlat16_16.xyz = (-u_xlat16_3.xyz) + u_xlat16_16.xyz;
    u_xlat16_16.xyz = vec3(u_xlat16_5) * u_xlat16_16.xyz + u_xlat16_3.xyz;
    u_xlat16_1.xyz = (bool(u_xlatb0)) ? u_xlat16_7.xyz : u_xlat16_6.xyz;
    u_xlat16_3.xyz = (bool(u_xlatb0)) ? u_xlat16_16.xyz : u_xlat16_3.xyz;
    u_xlat16_36 = max(u_xlat16_1.z, u_xlat16_1.y);
    u_xlat16_0.w = max(u_xlat16_1.x, u_xlat16_36);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(1.0<u_xlat16_0.w);
#else
    u_xlatb2.x = 1.0<u_xlat16_0.w;
#endif
    u_xlat16_0.xyz = u_xlat16_1.xyz / u_xlat16_0.www;
    u_xlat16_1.w = 1.0;
    u_xlat16_0 = (u_xlatb2.x) ? u_xlat16_0 : u_xlat16_1;
    u_xlat16_36 = min(u_xlat16_0.w, 1.10000002);
    u_xlat16_16.x = u_xlat16_0.w + (-u_xlat16_36);
    u_xlat16_36 = u_xlat16_5 * u_xlat16_16.x + u_xlat16_36;
    SV_Target1.w = u_xlat16_36 * 0.0500000007;
    SV_Target0.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb2.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_36 = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb2.x) ? u_xlat16_36 : u_xlat16_3.z;
    SV_Target0.w = 0.0470588244;
    SV_Target1.xyz = u_xlat16_0.xyz;
    SV_Target2.xy = u_xlat16_3.xy;
    SV_Target2.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "MSAA_INTERPOLATION" "TOON_SPECULAR_ON" "TOON_LIGHTMAP_ON" "METAL_MAT" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec3 mhy_AvatarLightDir;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump float u_xlat16_4;
float u_xlat16;
void main()
{
    u_xlat0.x = hlslcc_mtx4x4unity_ObjectToWorld[0].y;
    u_xlat0.y = hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat0.z = hlslcc_mtx4x4unity_ObjectToWorld[2].y;
    u_xlat1.xyw = (-_WorldSpaceCameraPos.xyz) + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat0.w = u_xlat1.y;
    u_xlat2.xyz = in_POSITION0.xyz;
    u_xlat2.w = 1.0;
    u_xlat0.x = dot(u_xlat0, u_xlat2);
    u_xlat0 = u_xlat0.xxxx * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat3.w = u_xlat1.x;
    u_xlat3.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;
    u_xlat3.y = hlslcc_mtx4x4unity_ObjectToWorld[1].x;
    u_xlat3.z = hlslcc_mtx4x4unity_ObjectToWorld[2].x;
    u_xlat3.x = dot(u_xlat3, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat3.xxxx + u_xlat0;
    u_xlat1.x = hlslcc_mtx4x4unity_ObjectToWorld[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_ObjectToWorld[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_ObjectToWorld[2].z;
    u_xlat1.x = dot(u_xlat1, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat1.xxxx + u_xlat0;
    u_xlat1.x = hlslcc_mtx4x4unity_ObjectToWorld[0].w;
    u_xlat1.y = hlslcc_mtx4x4unity_ObjectToWorld[1].w;
    u_xlat1.z = hlslcc_mtx4x4unity_ObjectToWorld[2].w;
    u_xlat1.w = hlslcc_mtx4x4unity_ObjectToWorld[3].w;
    u_xlat1.x = dot(u_xlat1, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[3] * u_xlat1.xxxx + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat16 = inversesqrt(u_xlat16);
    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
    u_xlat16_4 = dot(u_xlat1.xyz, mhy_AvatarLightDir.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    vs_TEXCOORD1.w = u_xlat16_4 * 0.497500002 + 0.5;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.zw = u_xlat0.zw;
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD3.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD5.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToCamera[4];
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	mediump vec4 _Color;
uniform 	float _MainTexAlphaUse;
uniform 	mediump float _MainTexAlphaCutoff;
uniform 	float _UseLightMapColorAO;
uniform 	float _UseVertexColorAO;
uniform 	mediump float _LightArea;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	float _UseCoolShadowColorOrTex;
uniform 	mediump vec3 _CoolShadowMultColor;
uniform 	float _UseShadowTransition;
uniform 	float _ShadowTransitionRange;
uniform 	float _ShadowTransitionSoftness;
uniform 	mediump vec3 _SpecularColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump float _EmissionScaler;
uniform 	mediump vec3 _EmissionColor_MHY;
uniform 	mediump float _MTMapBrightness;
uniform 	float _MTMapTileScale;
uniform 	mediump vec3 _MTMapLightColor;
uniform 	mediump vec3 _MTMapDarkColor;
uniform 	mediump vec3 _MTShadowMultiColor;
uniform 	mediump float _MTShininess;
uniform 	mediump vec3 _MTSpecularColor;
uniform 	mediump float _MTSpecularScale;
uniform 	float _ES_CharacterAmbientLightOn;
uniform 	float _ES_CharacterAmbientBrightness;
uniform 	vec3 _ES_CharacterMainLightColor;
uniform 	float _ES_CharacterMainLightBrightness;
uniform 	vec3 _ES_CharacterAmbientLightColor;
uniform 	float _ES_CharacterMainLightRatio;
uniform 	float _ES_CharacterAmbientLightRatio;
uniform 	float _ES_CharacterColorTone;
uniform 	vec3 mhy_AvatarLightDir;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MTMap;
in mediump vec4 vs_COLOR0;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec2 u_xlat0;
mediump vec4 u_xlat16_0;
vec3 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_2;
bool u_xlatb2;
mediump float u_xlat16_3;
lowp vec3 u_xlat10_4;
float u_xlat5;
bvec2 u_xlatb5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
mediump vec3 u_xlat16_11;
vec3 u_xlat12;
mediump vec3 u_xlat16_12;
vec3 u_xlat13;
mediump vec3 u_xlat16_13;
vec3 u_xlat14;
bool u_xlatb19;
vec3 u_xlat20;
bool u_xlatb20;
mediump vec3 u_xlat16_22;
vec2 u_xlat30;
bvec2 u_xlatb30;
float u_xlat35;
bool u_xlatb35;
bool u_xlatb46;
float u_xlat50;
mediump float u_xlat16_50;
lowp float u_xlat10_50;
bool u_xlatb50;
mediump float u_xlat16_51;
mediump float u_xlat16_52;
void main()
{
    u_xlat0.xy = dFdx(vs_TEXCOORD0.xy);
    u_xlat30.xy = dFdy(vs_TEXCOORD0.xy);
    u_xlat0.xy = u_xlat30.xy + u_xlat0.xy;
    u_xlat30.xy = (-u_xlat0.xy) * vec2(0.25, 0.25) + vs_TEXCOORD0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25) + vs_TEXCOORD0.xy;
    u_xlat0.xy = (int(gl_SampleID) != 0) ? u_xlat30.xy : u_xlat0.xy;
    u_xlat1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat30.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat30.x = inversesqrt(u_xlat30.x);
    u_xlat1.xyz = u_xlat1.xyz * u_xlat30.xxx + mhy_AvatarLightDir.xyz;
    u_xlat30.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat30.x = inversesqrt(u_xlat30.x);
    u_xlat1.xyz = u_xlat30.xxx * u_xlat1.xyz;
    u_xlat10_2 = textureLod(_MainTex, u_xlat0.xy, 0.0);
    u_xlatb30.xy = equal(vec4(_MainTexAlphaUse), vec4(1.0, 2.0, 1.0, 2.0)).xy;
    u_xlat16_3 = u_xlat10_2.w + (-_MainTexAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb46 = !!(u_xlat16_3<0.0);
#else
    u_xlatb46 = u_xlat16_3<0.0;
#endif
    u_xlatb30.x = u_xlatb30.x && u_xlatb46;
    if((int(u_xlatb30.x) * int(0xffffffffu))!=0){discard;}
    u_xlat10_4.xyz = textureLod(_LightMapTex, u_xlat0.xy, 0.0).xyz;
    u_xlatb5.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseLightMapColorAO, _UseVertexColorAO, _UseLightMapColorAO, _UseLightMapColorAO)).xy;
    u_xlat16_3 = (u_xlatb5.x) ? u_xlat10_4.y : 0.5;
    u_xlat16_6.xyz = u_xlat10_2.xyz * _Color.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(0.00999999978<u_xlat10_2.w);
#else
    u_xlatb2 = 0.00999999978<u_xlat10_2.w;
#endif
    u_xlatb19 = u_xlatb30.y && u_xlatb2;
    u_xlat16_51 = (u_xlatb19) ? u_xlat10_2.w : 0.0;
    u_xlat16_7.x = u_xlat16_3 * vs_COLOR0.x;
    u_xlat16_7.x = (u_xlatb5.y) ? u_xlat16_7.x : u_xlat16_3;
#ifdef UNITY_ADRENO_ES3
    u_xlatb5.x = !!(u_xlat16_7.x<0.0500000007);
#else
    u_xlatb5.x = u_xlat16_7.x<0.0500000007;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb20 = !!(0.949999988<u_xlat16_7.x);
#else
    u_xlatb20 = 0.949999988<u_xlat16_7.x;
#endif
    u_xlat35 = u_xlat16_7.x + vs_TEXCOORD1.w;
    u_xlat35 = u_xlat35 * 0.5;
    u_xlat16_7.x = (u_xlatb20) ? 1.0 : u_xlat35;
    u_xlat16_7.x = (u_xlatb5.x) ? 0.0 : u_xlat16_7.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb5.x = !!(u_xlat16_7.x<_LightArea);
#else
    u_xlatb5.x = u_xlat16_7.x<_LightArea;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb20 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition));
#else
    u_xlatb20 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition);
#endif
    u_xlat16_7.x = (-u_xlat16_7.x) + _LightArea;
    u_xlat16_7.x = u_xlat16_7.x / _ShadowTransitionRange;
#ifdef UNITY_ADRENO_ES3
    u_xlatb35 = !!(u_xlat16_7.x>=1.0);
#else
    u_xlatb35 = u_xlat16_7.x>=1.0;
#endif
    u_xlat16_50 = u_xlat16_7.x + 0.00999999978;
    u_xlat16_50 = log2(u_xlat16_50);
    u_xlat50 = u_xlat16_50 * _ShadowTransitionSoftness;
    u_xlat50 = exp2(u_xlat50);
    u_xlat50 = min(u_xlat50, 1.0);
    u_xlat35 = (u_xlatb35) ? 1.0 : u_xlat50;
    u_xlat35 = (u_xlatb20) ? u_xlat35 : 1.0;
    u_xlat35 = u_xlatb5.x ? u_xlat35 : float(0.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb50 = !!(0.899999976<u_xlat10_4.x);
#else
    u_xlatb50 = 0.899999976<u_xlat10_4.x;
#endif
    if(u_xlatb50){
        u_xlat8.xy = vs_TEXCOORD1.yy * hlslcc_mtx4x4unity_WorldToCamera[1].xy;
        u_xlat8.xy = hlslcc_mtx4x4unity_WorldToCamera[0].xy * vs_TEXCOORD1.xx + u_xlat8.xy;
        u_xlat8.yz = hlslcc_mtx4x4unity_WorldToCamera[2].xy * vs_TEXCOORD1.zz + u_xlat8.xy;
        u_xlat8.x = u_xlat8.y * _MTMapTileScale;
        u_xlat16_7.xy = u_xlat8.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
        u_xlat10_50 = texture(_MTMap, u_xlat16_7.xy, -1.0).x;
        u_xlat16_7.x = u_xlat10_50 * _MTMapBrightness;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
        u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
        u_xlat16_22.xyz = _MTMapLightColor.xyz + (-_MTMapDarkColor.xyz);
        u_xlat16_7.xyz = u_xlat16_7.xxx * u_xlat16_22.xyz + _MTMapDarkColor.xyz;
        u_xlat16_7.xyz = u_xlat16_6.xyz * u_xlat16_7.xyz;
        u_xlat16_52 = dot(vs_TEXCOORD1.xyz, u_xlat1.xyz);
        u_xlat16_52 = max(u_xlat16_52, 0.00100000005);
        u_xlat16_52 = log2(u_xlat16_52);
        u_xlat16_52 = u_xlat16_52 * _MTShininess;
        u_xlat16_52 = exp2(u_xlat16_52);
        u_xlat16_52 = u_xlat16_52 * _MTSpecularScale;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_52 = min(max(u_xlat16_52, 0.0), 1.0);
#else
        u_xlat16_52 = clamp(u_xlat16_52, 0.0, 1.0);
#endif
        u_xlat16_9.xyz = vec3(u_xlat16_52) * _MTSpecularColor.xyz;
        u_xlat16_9.xyz = u_xlat10_4.zzz * u_xlat16_9.xyz;
        u_xlat16_10.xyz = u_xlat16_7.xyz * _MTShadowMultiColor.xyz;
        u_xlat16_8.xyz = _MTShadowMultiColor.xyz + vec3(-1.0, -1.0, -1.0);
        u_xlat8.xyz = vec3(u_xlat35) * u_xlat16_8.xyz + vec3(1.0, 1.0, 1.0);
        u_xlat16_11.xyz = (bool(u_xlatb20)) ? u_xlat8.xyz : _MTShadowMultiColor.xyz;
        u_xlat16_11.xyz = u_xlat16_7.xyz * u_xlat16_11.xyz;
        u_xlat8.xyz = u_xlat16_7.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
        u_xlat8.xyz = (u_xlatb5.x) ? u_xlat16_11.xyz : u_xlat8.xyz;
        u_xlat12.xyz = u_xlat16_9.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
        u_xlat16_8.xyz = u_xlat8.xyz;
        u_xlat16_12.xyz = u_xlat12.xyz;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb50 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex));
#else
        u_xlatb50 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex);
#endif
        u_xlat16_13.xyz = vec3(_FirstShadowMultColor.xxyz.y + (-_CoolShadowMultColor.x), _FirstShadowMultColor.xxyz.z + (-_CoolShadowMultColor.y), float(_FirstShadowMultColor.z) + (-_CoolShadowMultColor.z));
        u_xlat13.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_13.xyz + _CoolShadowMultColor.xyz;
        u_xlat16_7.xyz = (bool(u_xlatb50)) ? u_xlat13.xyz : vec3(_FirstShadowMultColor.x, _FirstShadowMultColor.y, _FirstShadowMultColor.z);
        u_xlat16_10.xyz = u_xlat16_6.xyz * u_xlat16_7.xyz;
        u_xlat16_13.xyz = u_xlat16_7.xyz + vec3(-1.0, -1.0, -1.0);
        u_xlat13.xyz = vec3(u_xlat35) * u_xlat16_13.xyz + vec3(1.0, 1.0, 1.0);
        u_xlat16_7.xyz = (bool(u_xlatb20)) ? u_xlat13.xyz : u_xlat16_7.xyz;
        u_xlat16_7.xyz = u_xlat16_6.xyz * u_xlat16_7.xyz;
        u_xlat20.xyz = u_xlat16_6.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
        u_xlat8.xyz = (u_xlatb5.x) ? u_xlat16_7.xyz : u_xlat20.xyz;
        u_xlat16_7.x = dot(vs_TEXCOORD1.xyz, u_xlat1.xyz);
        u_xlat16_7.x = max(u_xlat16_7.x, 0.00100000005);
        u_xlat16_7.x = log2(u_xlat16_7.x);
        u_xlat16_7.x = u_xlat16_7.x * _Shininess;
        u_xlat16_7.x = exp2(u_xlat16_7.x);
        u_xlat5 = (-u_xlat10_4.z) + 1.0;
#ifdef UNITY_ADRENO_ES3
        u_xlatb5.x = !!(u_xlat5<u_xlat16_7.x);
#else
        u_xlatb5.x = u_xlat5<u_xlat16_7.x;
#endif
        u_xlat16_7.xyz = _SpecularColor.xyz * vec3(_SpecMulti);
        u_xlat16_7.xyz = u_xlat10_4.xxx * u_xlat16_7.xyz;
        u_xlat20.xyz = u_xlat16_7.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
        u_xlat12.xyz = mix(vec3(0.0, 0.0, 0.0), u_xlat20.xyz, vec3(u_xlatb5.xxx));
        u_xlat16_8.xyz = u_xlat8.xyz;
        u_xlat16_12.xyz = u_xlat12.xyz;
    //ENDIF
    }
    u_xlat16_6.xyz = u_xlat16_6.xyz * _EmissionColor_MHY.xyz;
    u_xlat16_7.xyz = u_xlat16_8.xyz + u_xlat16_12.xyz;
    u_xlat16_9.xyz = u_xlat16_10.xyz + u_xlat16_12.xyz;
    u_xlat16_10.xyz = u_xlat16_6.xyz * vec3(vec3(_EmissionScaler, _EmissionScaler, _EmissionScaler)) + (-u_xlat16_7.xyz);
    u_xlat16_10.xyz = vec3(u_xlat16_51) * u_xlat16_10.xyz + u_xlat16_7.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(vec3(_EmissionScaler, _EmissionScaler, _EmissionScaler)) + (-u_xlat16_9.xyz);
    u_xlat16_6.xyz = vec3(u_xlat16_51) * u_xlat16_6.xyz + u_xlat16_9.xyz;
    u_xlat16_7.xyz = (bool(u_xlatb19)) ? u_xlat16_10.xyz : u_xlat16_7.xyz;
    u_xlat16_6.xyz = (bool(u_xlatb19)) ? u_xlat16_6.xyz : u_xlat16_9.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb5.x = !!(0.00999999978<u_xlat16_51);
#else
    u_xlatb5.x = 0.00999999978<u_xlat16_51;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb20 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn));
#else
    u_xlatb20 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn);
#endif
    u_xlat13.xyz = u_xlat16_7.xyz * vec3(vec3(_ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness));
    u_xlat14.xyz = _ES_CharacterMainLightColor.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat14.xyz = vec3(vec3(_ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio)) * u_xlat14.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat13.xyz = u_xlat13.xyz * u_xlat14.xyz;
    u_xlat14.xyz = _ES_CharacterAmbientLightColor.xyz * vec3(_ES_CharacterAmbientLightRatio);
    u_xlat16_9.xyz = u_xlat13.xyz * vec3(10.0, 10.0, 10.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_9.xyz = min(max(u_xlat16_9.xyz, 0.0), 1.0);
#else
    u_xlat16_9.xyz = clamp(u_xlat16_9.xyz, 0.0, 1.0);
#endif
    u_xlat13.xyz = u_xlat14.xyz * u_xlat16_9.xyz + u_xlat13.xyz;
    u_xlat16_9.xyz = (bool(u_xlatb20)) ? u_xlat13.xyz : u_xlat16_7.xyz;
    u_xlat16_10.xyz = u_xlat16_7.xyz + (-u_xlat16_9.xyz);
    u_xlat16_10.xyz = vec3(u_xlat16_51) * u_xlat16_10.xyz + u_xlat16_9.xyz;
    u_xlat16_7.xyz = (-u_xlat16_6.xyz) + u_xlat16_7.xyz;
    u_xlat16_7.xyz = vec3(u_xlat16_51) * u_xlat16_7.xyz + u_xlat16_6.xyz;
    u_xlat16_0.xyz = (u_xlatb5.x) ? u_xlat16_10.xyz : u_xlat16_9.xyz;
    u_xlat16_6.xyz = (u_xlatb5.x) ? u_xlat16_7.xyz : u_xlat16_6.xyz;
    u_xlat16_7.x = max(u_xlat16_0.z, u_xlat16_0.y);
    u_xlat16_1.w = max(u_xlat16_0.x, u_xlat16_7.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb5.x = !!(1.0<u_xlat16_1.w);
#else
    u_xlatb5.x = 1.0<u_xlat16_1.w;
#endif
    u_xlat16_1.xyz = u_xlat16_0.xyz / u_xlat16_1.www;
    u_xlat16_0.w = 1.0;
    u_xlat16_0 = (u_xlatb5.x) ? u_xlat16_1 : u_xlat16_0;
    u_xlat16_7.x = min(u_xlat16_0.w, 1.10000002);
    u_xlat16_22.x = u_xlat16_0.w + (-u_xlat16_7.x);
    u_xlat16_51 = u_xlat16_51 * u_xlat16_22.x + u_xlat16_7.x;
    SV_Target1.w = u_xlat16_51 * 0.0500000007;
    SV_Target0.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb5.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb5.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_51 = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb5.x) ? u_xlat16_51 : u_xlat16_6.z;
    SV_Target0.w = 0.0470588244;
    SV_Target1.xyz = u_xlat16_0.xyz;
    SV_Target2.xy = u_xlat16_6.xy;
    SV_Target2.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "LINE_INTERPOLATION" "TOON_SPECULAR_ON" "TOON_LIGHTMAP_ON" "METAL_MAT" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec3 mhy_AvatarLightDir;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump float u_xlat16_4;
float u_xlat16;
void main()
{
    u_xlat0.x = hlslcc_mtx4x4unity_ObjectToWorld[0].y;
    u_xlat0.y = hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat0.z = hlslcc_mtx4x4unity_ObjectToWorld[2].y;
    u_xlat1.xyw = (-_WorldSpaceCameraPos.xyz) + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat0.w = u_xlat1.y;
    u_xlat2.xyz = in_POSITION0.xyz;
    u_xlat2.w = 1.0;
    u_xlat0.x = dot(u_xlat0, u_xlat2);
    u_xlat0 = u_xlat0.xxxx * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat3.w = u_xlat1.x;
    u_xlat3.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;
    u_xlat3.y = hlslcc_mtx4x4unity_ObjectToWorld[1].x;
    u_xlat3.z = hlslcc_mtx4x4unity_ObjectToWorld[2].x;
    u_xlat3.x = dot(u_xlat3, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat3.xxxx + u_xlat0;
    u_xlat1.x = hlslcc_mtx4x4unity_ObjectToWorld[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_ObjectToWorld[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_ObjectToWorld[2].z;
    u_xlat1.x = dot(u_xlat1, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat1.xxxx + u_xlat0;
    u_xlat1.x = hlslcc_mtx4x4unity_ObjectToWorld[0].w;
    u_xlat1.y = hlslcc_mtx4x4unity_ObjectToWorld[1].w;
    u_xlat1.z = hlslcc_mtx4x4unity_ObjectToWorld[2].w;
    u_xlat1.w = hlslcc_mtx4x4unity_ObjectToWorld[3].w;
    u_xlat1.x = dot(u_xlat1, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[3] * u_xlat1.xxxx + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat16 = inversesqrt(u_xlat16);
    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
    u_xlat16_4 = dot(u_xlat1.xyz, mhy_AvatarLightDir.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    vs_TEXCOORD1.w = u_xlat16_4 * 0.497500002 + 0.5;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.zw = u_xlat0.zw;
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD3.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD5.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToCamera[4];
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	mediump vec4 _Color;
uniform 	float _MainTexAlphaUse;
uniform 	mediump float _MainTexAlphaCutoff;
uniform 	float _UseLightMapColorAO;
uniform 	float _UseVertexColorAO;
uniform 	mediump float _LightArea;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	float _UseCoolShadowColorOrTex;
uniform 	mediump vec3 _CoolShadowMultColor;
uniform 	float _UseShadowTransition;
uniform 	float _ShadowTransitionRange;
uniform 	float _ShadowTransitionSoftness;
uniform 	mediump vec3 _SpecularColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump float _EmissionScaler;
uniform 	mediump vec3 _EmissionColor_MHY;
uniform 	mediump float _MTMapBrightness;
uniform 	float _MTMapTileScale;
uniform 	mediump vec3 _MTMapLightColor;
uniform 	mediump vec3 _MTMapDarkColor;
uniform 	mediump vec3 _MTShadowMultiColor;
uniform 	mediump float _MTShininess;
uniform 	mediump vec3 _MTSpecularColor;
uniform 	mediump float _MTSpecularScale;
uniform 	float _ES_CharacterAmbientLightOn;
uniform 	float _ES_CharacterAmbientBrightness;
uniform 	vec3 _ES_CharacterMainLightColor;
uniform 	float _ES_CharacterMainLightBrightness;
uniform 	vec3 _ES_CharacterAmbientLightColor;
uniform 	float _ES_CharacterMainLightRatio;
uniform 	float _ES_CharacterAmbientLightRatio;
uniform 	float _ES_CharacterColorTone;
uniform 	vec3 mhy_AvatarLightDir;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MTMap;
in mediump vec4 vs_COLOR0;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
bool u_xlatb0;
vec3 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
bool u_xlatb1;
vec3 u_xlat2;
lowp vec4 u_xlat10_2;
bvec2 u_xlatb2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
mediump vec3 u_xlat16_4;
bvec2 u_xlatb4;
mediump float u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
vec3 u_xlat9;
mediump vec3 u_xlat16_9;
vec3 u_xlat10;
mediump vec3 u_xlat16_10;
bool u_xlatb11;
vec3 u_xlat12;
bool u_xlatb12;
vec2 u_xlat13;
mediump vec3 u_xlat16_14;
mediump vec3 u_xlat16_16;
float u_xlat23;
bool u_xlatb23;
float u_xlat33;
bool u_xlatb33;
float u_xlat34;
mediump float u_xlat16_34;
lowp float u_xlat10_34;
bool u_xlatb34;
mediump float u_xlat16_36;
void main()
{
    u_xlat0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat33) + mhy_AvatarLightDir.xyz;
    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat0.xyz = vec3(u_xlat33) * u_xlat0.xyz;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy, -1.0);
    u_xlatb2.xy = equal(vec4(_MainTexAlphaUse), vec4(1.0, 2.0, 0.0, 0.0)).xy;
    u_xlat16_3.x = u_xlat10_1.w + (-_MainTexAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(u_xlat16_3.x<0.0);
#else
    u_xlatb33 = u_xlat16_3.x<0.0;
#endif
    u_xlatb33 = u_xlatb2.x && u_xlatb33;
    if((int(u_xlatb33) * int(0xffffffffu))!=0){discard;}
    u_xlat10_2.xzw = texture(_LightMapTex, vs_TEXCOORD0.xy, -1.0).xyz;
    u_xlatb4.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseLightMapColorAO, _UseVertexColorAO, _UseLightMapColorAO, _UseLightMapColorAO)).xy;
    u_xlat16_3.x = (u_xlatb4.x) ? u_xlat10_2.z : 0.5;
    u_xlat16_14.xyz = u_xlat10_1.xyz * _Color.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(0.00999999978<u_xlat10_1.w);
#else
    u_xlatb33 = 0.00999999978<u_xlat10_1.w;
#endif
    u_xlatb33 = u_xlatb33 && u_xlatb2.y;
    u_xlat16_5 = (u_xlatb33) ? u_xlat10_1.w : 0.0;
    u_xlat16_16.x = u_xlat16_3.x * vs_COLOR0.x;
    u_xlat16_3.x = (u_xlatb4.y) ? u_xlat16_16.x : u_xlat16_3.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(u_xlat16_3.x<0.0500000007);
#else
    u_xlatb1 = u_xlat16_3.x<0.0500000007;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(0.949999988<u_xlat16_3.x);
#else
    u_xlatb12 = 0.949999988<u_xlat16_3.x;
#endif
    u_xlat23 = u_xlat16_3.x + vs_TEXCOORD1.w;
    u_xlat23 = u_xlat23 * 0.5;
    u_xlat16_3.x = (u_xlatb12) ? 1.0 : u_xlat23;
    u_xlat16_3.x = (u_xlatb1) ? 0.0 : u_xlat16_3.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(u_xlat16_3.x<_LightArea);
#else
    u_xlatb1 = u_xlat16_3.x<_LightArea;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition));
#else
    u_xlatb12 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition);
#endif
    u_xlat16_3.x = (-u_xlat16_3.x) + _LightArea;
    u_xlat16_3.x = u_xlat16_3.x / _ShadowTransitionRange;
#ifdef UNITY_ADRENO_ES3
    u_xlatb23 = !!(u_xlat16_3.x>=1.0);
#else
    u_xlatb23 = u_xlat16_3.x>=1.0;
#endif
    u_xlat16_34 = u_xlat16_3.x + 0.00999999978;
    u_xlat16_34 = log2(u_xlat16_34);
    u_xlat34 = u_xlat16_34 * _ShadowTransitionSoftness;
    u_xlat34 = exp2(u_xlat34);
    u_xlat34 = min(u_xlat34, 1.0);
    u_xlat23 = (u_xlatb23) ? 1.0 : u_xlat34;
    u_xlat23 = (u_xlatb12) ? u_xlat23 : 1.0;
    u_xlat23 = u_xlatb1 ? u_xlat23 : float(0.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb34 = !!(0.899999976<u_xlat10_2.x);
#else
    u_xlatb34 = 0.899999976<u_xlat10_2.x;
#endif
    if(u_xlatb34){
        u_xlat13.xy = vs_TEXCOORD1.yy * hlslcc_mtx4x4unity_WorldToCamera[1].xy;
        u_xlat13.xy = hlslcc_mtx4x4unity_WorldToCamera[0].xy * vs_TEXCOORD1.xx + u_xlat13.xy;
        u_xlat4.yz = hlslcc_mtx4x4unity_WorldToCamera[2].xy * vs_TEXCOORD1.zz + u_xlat13.xy;
        u_xlat4.x = u_xlat4.y * _MTMapTileScale;
        u_xlat16_16.xy = u_xlat4.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
        u_xlat10_34 = texture(_MTMap, u_xlat16_16.xy, -1.0).x;
        u_xlat16_3.x = u_xlat10_34 * _MTMapBrightness;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
        u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
        u_xlat16_16.xyz = _MTMapLightColor.xyz + (-_MTMapDarkColor.xyz);
        u_xlat16_16.xyz = u_xlat16_3.xxx * u_xlat16_16.xyz + _MTMapDarkColor.xyz;
        u_xlat16_16.xyz = u_xlat16_14.xyz * u_xlat16_16.xyz;
        u_xlat16_3.x = dot(vs_TEXCOORD1.xyz, u_xlat0.xyz);
        u_xlat16_3.x = max(u_xlat16_3.x, 0.00100000005);
        u_xlat16_3.x = log2(u_xlat16_3.x);
        u_xlat16_3.x = u_xlat16_3.x * _MTShininess;
        u_xlat16_3.x = exp2(u_xlat16_3.x);
        u_xlat16_3.x = u_xlat16_3.x * _MTSpecularScale;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
        u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
        u_xlat16_6.xyz = u_xlat16_3.xxx * _MTSpecularColor.xyz;
        u_xlat16_6.xyz = u_xlat10_2.www * u_xlat16_6.xyz;
        u_xlat16_7.xyz = u_xlat16_16.xyz * _MTShadowMultiColor.xyz;
        u_xlat16_4.xyz = _MTShadowMultiColor.xyz + vec3(-1.0, -1.0, -1.0);
        u_xlat4.xyz = vec3(u_xlat23) * u_xlat16_4.xyz + vec3(1.0, 1.0, 1.0);
        u_xlat16_8.xyz = (bool(u_xlatb12)) ? u_xlat4.xyz : _MTShadowMultiColor.xyz;
        u_xlat16_8.xyz = u_xlat16_16.xyz * u_xlat16_8.xyz;
        u_xlat4.xyz = u_xlat16_16.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
        u_xlat4.xyz = (bool(u_xlatb1)) ? u_xlat16_8.xyz : u_xlat4.xyz;
        u_xlat9.xyz = u_xlat16_6.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
        u_xlat16_4.xyz = u_xlat4.xyz;
        u_xlat16_9.xyz = u_xlat9.xyz;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb34 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex));
#else
        u_xlatb34 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex);
#endif
        u_xlat16_10.xyz = vec3(_FirstShadowMultColor.xxyz.y + (-_CoolShadowMultColor.x), _FirstShadowMultColor.xxyz.z + (-_CoolShadowMultColor.y), float(_FirstShadowMultColor.z) + (-_CoolShadowMultColor.z));
        u_xlat10.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_10.xyz + _CoolShadowMultColor.xyz;
        u_xlat16_16.xyz = (bool(u_xlatb34)) ? u_xlat10.xyz : vec3(_FirstShadowMultColor.x, _FirstShadowMultColor.y, _FirstShadowMultColor.z);
        u_xlat16_7.xyz = u_xlat16_14.xyz * u_xlat16_16.xyz;
        u_xlat16_10.xyz = u_xlat16_16.xyz + vec3(-1.0, -1.0, -1.0);
        u_xlat10.xyz = vec3(u_xlat23) * u_xlat16_10.xyz + vec3(1.0, 1.0, 1.0);
        u_xlat16_16.xyz = (bool(u_xlatb12)) ? u_xlat10.xyz : u_xlat16_16.xyz;
        u_xlat16_16.xyz = u_xlat16_14.xyz * u_xlat16_16.xyz;
        u_xlat12.xyz = u_xlat16_14.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
        u_xlat4.xyz = (bool(u_xlatb1)) ? u_xlat16_16.xyz : u_xlat12.xyz;
        u_xlat16_3.x = dot(vs_TEXCOORD1.xyz, u_xlat0.xyz);
        u_xlat16_3.x = max(u_xlat16_3.x, 0.00100000005);
        u_xlat16_3.x = log2(u_xlat16_3.x);
        u_xlat16_3.x = u_xlat16_3.x * _Shininess;
        u_xlat16_3.x = exp2(u_xlat16_3.x);
        u_xlat0.x = (-u_xlat10_2.w) + 1.0;
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<u_xlat16_3.x);
#else
        u_xlatb0 = u_xlat0.x<u_xlat16_3.x;
#endif
        u_xlat16_16.xyz = _SpecularColor.xyz * vec3(_SpecMulti);
        u_xlat16_16.xyz = u_xlat10_2.xxx * u_xlat16_16.xyz;
        u_xlat1.xyz = u_xlat16_16.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
        u_xlat9.xyz = mix(vec3(0.0, 0.0, 0.0), u_xlat1.xyz, vec3(bvec3(u_xlatb0)));
        u_xlat16_4.xyz = u_xlat4.xyz;
        u_xlat16_9.xyz = u_xlat9.xyz;
    //ENDIF
    }
    u_xlat16_3.xyz = u_xlat16_14.xyz * _EmissionColor_MHY.xyz;
    u_xlat16_16.xyz = u_xlat16_4.xyz + u_xlat16_9.xyz;
    u_xlat16_6.xyz = u_xlat16_7.xyz + u_xlat16_9.xyz;
    u_xlat16_7.xyz = u_xlat16_3.xyz * vec3(vec3(_EmissionScaler, _EmissionScaler, _EmissionScaler)) + (-u_xlat16_16.xyz);
    u_xlat16_7.xyz = vec3(u_xlat16_5) * u_xlat16_7.xyz + u_xlat16_16.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(vec3(_EmissionScaler, _EmissionScaler, _EmissionScaler)) + (-u_xlat16_6.xyz);
    u_xlat16_3.xyz = vec3(u_xlat16_5) * u_xlat16_3.xyz + u_xlat16_6.xyz;
    u_xlat16_16.xyz = (bool(u_xlatb33)) ? u_xlat16_7.xyz : u_xlat16_16.xyz;
    u_xlat16_3.xyz = (bool(u_xlatb33)) ? u_xlat16_3.xyz : u_xlat16_6.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.00999999978<u_xlat16_5);
#else
    u_xlatb0 = 0.00999999978<u_xlat16_5;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb11 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn));
#else
    u_xlatb11 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn);
#endif
    u_xlat1.xyz = u_xlat16_16.xyz * vec3(vec3(_ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness));
    u_xlat2.xyz = _ES_CharacterMainLightColor.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat2.xyz = vec3(vec3(_ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio)) * u_xlat2.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
    u_xlat2.xyz = _ES_CharacterAmbientLightColor.xyz * vec3(_ES_CharacterAmbientLightRatio);
    u_xlat16_6.xyz = u_xlat1.xyz * vec3(10.0, 10.0, 10.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.xyz = min(max(u_xlat16_6.xyz, 0.0), 1.0);
#else
    u_xlat16_6.xyz = clamp(u_xlat16_6.xyz, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat2.xyz * u_xlat16_6.xyz + u_xlat1.xyz;
    u_xlat16_6.xyz = (bool(u_xlatb11)) ? u_xlat1.xyz : u_xlat16_16.xyz;
    u_xlat16_7.xyz = u_xlat16_16.xyz + (-u_xlat16_6.xyz);
    u_xlat16_7.xyz = vec3(u_xlat16_5) * u_xlat16_7.xyz + u_xlat16_6.xyz;
    u_xlat16_16.xyz = (-u_xlat16_3.xyz) + u_xlat16_16.xyz;
    u_xlat16_16.xyz = vec3(u_xlat16_5) * u_xlat16_16.xyz + u_xlat16_3.xyz;
    u_xlat16_1.xyz = (bool(u_xlatb0)) ? u_xlat16_7.xyz : u_xlat16_6.xyz;
    u_xlat16_3.xyz = (bool(u_xlatb0)) ? u_xlat16_16.xyz : u_xlat16_3.xyz;
    u_xlat16_36 = max(u_xlat16_1.z, u_xlat16_1.y);
    u_xlat16_0.w = max(u_xlat16_1.x, u_xlat16_36);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(1.0<u_xlat16_0.w);
#else
    u_xlatb2.x = 1.0<u_xlat16_0.w;
#endif
    u_xlat16_0.xyz = u_xlat16_1.xyz / u_xlat16_0.www;
    u_xlat16_1.w = 1.0;
    u_xlat16_0 = (u_xlatb2.x) ? u_xlat16_0 : u_xlat16_1;
    u_xlat16_36 = min(u_xlat16_0.w, 1.10000002);
    u_xlat16_16.x = u_xlat16_0.w + (-u_xlat16_36);
    u_xlat16_36 = u_xlat16_5 * u_xlat16_16.x + u_xlat16_36;
    SV_Target1.w = u_xlat16_36 * 0.0500000007;
    SV_Target0.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb2.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_36 = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb2.x) ? u_xlat16_36 : u_xlat16_3.z;
    SV_Target0.w = 0.0470588244;
    SV_Target1.xyz = u_xlat16_0.xyz;
    SV_Target2.xy = u_xlat16_3.xy;
    SV_Target2.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "TOON_SPECULAR_ON" "TOON_LIGHTMAP_ON" "BACK_FACE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec3 mhy_AvatarLightDir;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump float u_xlat16_4;
float u_xlat16;
void main()
{
    u_xlat0.x = hlslcc_mtx4x4unity_ObjectToWorld[0].y;
    u_xlat0.y = hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat0.z = hlslcc_mtx4x4unity_ObjectToWorld[2].y;
    u_xlat1.xyw = (-_WorldSpaceCameraPos.xyz) + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat0.w = u_xlat1.y;
    u_xlat2.xyz = in_POSITION0.xyz;
    u_xlat2.w = 1.0;
    u_xlat0.x = dot(u_xlat0, u_xlat2);
    u_xlat0 = u_xlat0.xxxx * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat3.w = u_xlat1.x;
    u_xlat3.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;
    u_xlat3.y = hlslcc_mtx4x4unity_ObjectToWorld[1].x;
    u_xlat3.z = hlslcc_mtx4x4unity_ObjectToWorld[2].x;
    u_xlat3.x = dot(u_xlat3, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat3.xxxx + u_xlat0;
    u_xlat1.x = hlslcc_mtx4x4unity_ObjectToWorld[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_ObjectToWorld[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_ObjectToWorld[2].z;
    u_xlat1.x = dot(u_xlat1, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat1.xxxx + u_xlat0;
    u_xlat1.x = hlslcc_mtx4x4unity_ObjectToWorld[0].w;
    u_xlat1.y = hlslcc_mtx4x4unity_ObjectToWorld[1].w;
    u_xlat1.z = hlslcc_mtx4x4unity_ObjectToWorld[2].w;
    u_xlat1.w = hlslcc_mtx4x4unity_ObjectToWorld[3].w;
    u_xlat1.x = dot(u_xlat1, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[3] * u_xlat1.xxxx + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat16 = inversesqrt(u_xlat16);
    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
    u_xlat16_4 = dot(u_xlat1.xyz, mhy_AvatarLightDir.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    vs_TEXCOORD1.w = u_xlat16_4 * 0.497500002 + 0.5;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.zw = u_xlat0.zw;
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD3.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD5.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	mediump vec4 _Color;
uniform 	float _MainTexAlphaUse;
uniform 	mediump float _MainTexAlphaCutoff;
uniform 	float _UseLightMapColorAO;
uniform 	float _UseVertexColorAO;
uniform 	mediump float _LightArea;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	float _UseCoolShadowColorOrTex;
uniform 	mediump vec3 _CoolShadowMultColor;
uniform 	float _UseShadowTransition;
uniform 	float _ShadowTransitionRange;
uniform 	float _ShadowTransitionSoftness;
uniform 	mediump vec3 _SpecularColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump float _EmissionScaler;
uniform 	mediump vec3 _EmissionColor_MHY;
uniform 	float _ES_CharacterAmbientLightOn;
uniform 	float _ES_CharacterAmbientBrightness;
uniform 	vec3 _ES_CharacterMainLightColor;
uniform 	float _ES_CharacterMainLightBrightness;
uniform 	vec3 _ES_CharacterAmbientLightColor;
uniform 	float _ES_CharacterMainLightRatio;
uniform 	float _ES_CharacterAmbientLightRatio;
uniform 	float _ES_CharacterColorTone;
uniform 	vec3 mhy_AvatarLightDir;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMapTex;
in mediump vec4 vs_COLOR0;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec4 u_xlat0;
lowp vec4 u_xlat10_0;
bvec4 u_xlatb0;
vec3 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
bool u_xlatb1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump vec4 u_xlat16_3;
vec3 u_xlat4;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
vec3 u_xlat9;
bool u_xlatb9;
mediump float u_xlat16_11;
bool u_xlatb18;
float u_xlat27;
mediump float u_xlat16_27;
bool u_xlatb27;
mediump float u_xlat16_29;
bool u_xlatb30;
mediump float u_xlat16_32;
mediump float u_xlat16_33;
void main()
{
    u_xlatb0.xy = equal(vec4(_MainTexAlphaUse), vec4(1.0, 2.0, 0.0, 0.0)).xy;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy, -1.0);
    u_xlat16_2.x = u_xlat10_1.w + (-_MainTexAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(u_xlat16_2.x<0.0);
#else
    u_xlatb18 = u_xlat16_2.x<0.0;
#endif
    u_xlatb0.x = u_xlatb0.x && u_xlatb18;
    if((int(u_xlatb0.x) * int(0xffffffffu))!=0){discard;}
    SV_Target0.w = 0.0470588244;
    u_xlat16_2.xyz = (uint((gl_FrontFacing ? 0xffffffffu : uint(0))) != uint(0u)) ? vs_TEXCOORD1.xyz : (-vs_TEXCOORD1.xyz);
    SV_Target0.xyz = u_xlat16_2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    u_xlat0.xzw = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat0.xzw = u_xlat0.xzw * u_xlat3.xxx + mhy_AvatarLightDir.xyz;
    u_xlat3.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat0.xzw = u_xlat0.xzw * u_xlat3.xxx;
    u_xlat16_2.x = dot(u_xlat16_2.xyz, u_xlat0.xzw);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.00100000005);
    u_xlat16_2.x = log2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * _Shininess;
    u_xlat16_2.x = exp2(u_xlat16_2.x);
    u_xlat10_0.xzw = texture(_LightMapTex, vs_TEXCOORD0.xy, -1.0).xyz;
    u_xlat27 = (-u_xlat10_0.w) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(u_xlat27<u_xlat16_2.x);
#else
    u_xlatb27 = u_xlat27<u_xlat16_2.x;
#endif
    u_xlat16_2.xyz = _SpecularColor.xyz * vec3(_SpecMulti);
    u_xlat16_2.xyz = u_xlat10_0.xxx * u_xlat16_2.xyz;
    u_xlat3.xyz = u_xlat16_2.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
    u_xlat3.xyz = mix(vec3(0.0, 0.0, 0.0), u_xlat3.xyz, vec3(bvec3(u_xlatb27)));
    u_xlatb0.xw = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseLightMapColorAO, _UseLightMapColorAO, _UseLightMapColorAO, _UseVertexColorAO)).xw;
    u_xlat16_2.x = (u_xlatb0.x) ? u_xlat10_0.z : 0.5;
    u_xlat16_11 = u_xlat16_2.x * vs_COLOR0.x;
    u_xlat16_2.x = (u_xlatb0.w) ? u_xlat16_11 : u_xlat16_2.x;
    u_xlat0.x = u_xlat16_2.x + vs_TEXCOORD1.w;
    u_xlat0.x = u_xlat0.x * 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(0.949999988<u_xlat16_2.x);
#else
    u_xlatb18 = 0.949999988<u_xlat16_2.x;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(u_xlat16_2.x<0.0500000007);
#else
    u_xlatb27 = u_xlat16_2.x<0.0500000007;
#endif
    u_xlat16_2.x = (u_xlatb18) ? 1.0 : u_xlat0.x;
    u_xlat16_2.x = (u_xlatb27) ? 0.0 : u_xlat16_2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(u_xlat16_2.x<_LightArea);
#else
    u_xlatb0.x = u_xlat16_2.x<_LightArea;
#endif
    u_xlat16_2.x = (-u_xlat16_2.x) + _LightArea;
    u_xlat16_2.x = u_xlat16_2.x / _ShadowTransitionRange;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(int((gl_FrontFacing ? 0xffffffffu : uint(0)))==0);
#else
    u_xlatb18 = int((gl_FrontFacing ? 0xffffffffu : uint(0)))==0;
#endif
    u_xlatb18 = u_xlatb0.x || u_xlatb18;
    u_xlat16_27 = u_xlat16_2.x + 0.00999999978;
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(u_xlat16_2.x>=1.0);
#else
    u_xlatb30 = u_xlat16_2.x>=1.0;
#endif
    u_xlat16_27 = log2(u_xlat16_27);
    u_xlat27 = u_xlat16_27 * _ShadowTransitionSoftness;
    u_xlat27 = exp2(u_xlat27);
    u_xlat27 = min(u_xlat27, 1.0);
    u_xlat27 = (u_xlatb30) ? 1.0 : u_xlat27;
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition));
#else
    u_xlatb30 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition);
#endif
    u_xlat27 = (u_xlatb30) ? u_xlat27 : 1.0;
    u_xlat0.x = u_xlatb0.x ? u_xlat27 : float(0.0);
    u_xlat16_4.xyz = vec3(_FirstShadowMultColor.xxyz.y + (-_CoolShadowMultColor.x), _FirstShadowMultColor.xxyz.z + (-_CoolShadowMultColor.y), float(_FirstShadowMultColor.z) + (-_CoolShadowMultColor.z));
    u_xlat4.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_4.xyz + _CoolShadowMultColor.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex));
#else
    u_xlatb27 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex);
#endif
    u_xlat16_2.xyz = (bool(u_xlatb27)) ? u_xlat4.xyz : vec3(_FirstShadowMultColor.x, _FirstShadowMultColor.y, _FirstShadowMultColor.z);
    u_xlat16_4.xyz = u_xlat16_2.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat4.xyz = u_xlat0.xxx * u_xlat16_4.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_5.xyz = (bool(u_xlatb30)) ? u_xlat4.xyz : u_xlat16_2.xyz;
    u_xlat16_6.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_6.xyz;
    u_xlat1.xyz = u_xlat16_6.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
    u_xlat0.xzw = (bool(u_xlatb18)) ? u_xlat16_5.xyz : u_xlat1.xyz;
    u_xlat16_5.xyz = u_xlat3.xyz + u_xlat0.xzw;
    u_xlat16_2.xyz = u_xlat16_6.xyz * u_xlat16_2.xyz + u_xlat3.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * _EmissionColor_MHY.xyz;
    u_xlat16_7.xyz = u_xlat16_6.xyz * vec3(vec3(_EmissionScaler, _EmissionScaler, _EmissionScaler)) + (-u_xlat16_5.xyz);
    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(vec3(_EmissionScaler, _EmissionScaler, _EmissionScaler)) + (-u_xlat16_2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(0.00999999978<u_xlat10_1.w);
#else
    u_xlatb0.x = 0.00999999978<u_xlat10_1.w;
#endif
    u_xlatb0.x = u_xlatb0.x && u_xlatb0.y;
    u_xlat16_29 = (u_xlatb0.x) ? u_xlat10_1.w : 0.0;
    u_xlat16_7.xyz = vec3(u_xlat16_29) * u_xlat16_7.xyz + u_xlat16_5.xyz;
    u_xlat16_5.xyz = (u_xlatb0.x) ? u_xlat16_7.xyz : u_xlat16_5.xyz;
    u_xlat9.xyz = u_xlat16_5.xyz * vec3(vec3(_ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness));
    u_xlat1.xyz = _ES_CharacterMainLightColor.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat1.xyz = vec3(vec3(_ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio)) * u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat9.xyz = u_xlat9.xyz * u_xlat1.xyz;
    u_xlat16_7.xyz = u_xlat9.xyz * vec3(10.0, 10.0, 10.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.xyz = min(max(u_xlat16_7.xyz, 0.0), 1.0);
#else
    u_xlat16_7.xyz = clamp(u_xlat16_7.xyz, 0.0, 1.0);
#endif
    u_xlat1.xyz = _ES_CharacterAmbientLightColor.xyz * vec3(_ES_CharacterAmbientLightRatio);
    u_xlat9.xyz = u_xlat1.xyz * u_xlat16_7.xyz + u_xlat9.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn));
#else
    u_xlatb1 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn);
#endif
    u_xlat16_7.xyz = (bool(u_xlatb1)) ? u_xlat9.xyz : u_xlat16_5.xyz;
    u_xlat16_8.xyz = u_xlat16_5.xyz + (-u_xlat16_7.xyz);
    u_xlat16_8.xyz = vec3(u_xlat16_29) * u_xlat16_8.xyz + u_xlat16_7.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(0.00999999978<u_xlat16_29);
#else
    u_xlatb9 = 0.00999999978<u_xlat16_29;
#endif
    u_xlat16_1.xyz = (bool(u_xlatb9)) ? u_xlat16_8.xyz : u_xlat16_7.xyz;
    u_xlat16_32 = max(u_xlat16_1.z, u_xlat16_1.y);
    u_xlat16_3.w = max(u_xlat16_1.x, u_xlat16_32);
    u_xlat16_3.xyz = u_xlat16_1.xyz / u_xlat16_3.www;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(1.0<u_xlat16_3.w);
#else
    u_xlatb18 = 1.0<u_xlat16_3.w;
#endif
    u_xlat16_1.w = 1.0;
    u_xlat16_1 = (bool(u_xlatb18)) ? u_xlat16_3 : u_xlat16_1;
    u_xlat16_32 = min(u_xlat16_1.w, 1.10000002);
    u_xlat16_33 = u_xlat16_1.w + (-u_xlat16_32);
    SV_Target1.xyz = u_xlat16_1.xyz;
    u_xlat16_32 = u_xlat16_29 * u_xlat16_33 + u_xlat16_32;
    SV_Target1.w = u_xlat16_32 * 0.0500000007;
    u_xlat16_6.xyz = vec3(u_xlat16_29) * u_xlat16_6.xyz + u_xlat16_2.xyz;
    u_xlat16_2.xyz = (u_xlatb0.x) ? u_xlat16_6.xyz : u_xlat16_2.xyz;
    u_xlat16_5.xyz = (-u_xlat16_2.xyz) + u_xlat16_5.xyz;
    u_xlat16_5.xyz = vec3(u_xlat16_29) * u_xlat16_5.xyz + u_xlat16_2.xyz;
    u_xlat16_2.xyz = (bool(u_xlatb9)) ? u_xlat16_5.xyz : u_xlat16_2.xyz;
    SV_Target2.xy = u_xlat16_2.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_2.x = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb0.x) ? u_xlat16_2.x : u_xlat16_2.z;
    SV_Target2.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "MSAA_INTERPOLATION" "TOON_SPECULAR_ON" "TOON_LIGHTMAP_ON" "BACK_FACE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec3 mhy_AvatarLightDir;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump float u_xlat16_4;
float u_xlat16;
void main()
{
    u_xlat0.x = hlslcc_mtx4x4unity_ObjectToWorld[0].y;
    u_xlat0.y = hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat0.z = hlslcc_mtx4x4unity_ObjectToWorld[2].y;
    u_xlat1.xyw = (-_WorldSpaceCameraPos.xyz) + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat0.w = u_xlat1.y;
    u_xlat2.xyz = in_POSITION0.xyz;
    u_xlat2.w = 1.0;
    u_xlat0.x = dot(u_xlat0, u_xlat2);
    u_xlat0 = u_xlat0.xxxx * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat3.w = u_xlat1.x;
    u_xlat3.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;
    u_xlat3.y = hlslcc_mtx4x4unity_ObjectToWorld[1].x;
    u_xlat3.z = hlslcc_mtx4x4unity_ObjectToWorld[2].x;
    u_xlat3.x = dot(u_xlat3, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat3.xxxx + u_xlat0;
    u_xlat1.x = hlslcc_mtx4x4unity_ObjectToWorld[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_ObjectToWorld[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_ObjectToWorld[2].z;
    u_xlat1.x = dot(u_xlat1, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat1.xxxx + u_xlat0;
    u_xlat1.x = hlslcc_mtx4x4unity_ObjectToWorld[0].w;
    u_xlat1.y = hlslcc_mtx4x4unity_ObjectToWorld[1].w;
    u_xlat1.z = hlslcc_mtx4x4unity_ObjectToWorld[2].w;
    u_xlat1.w = hlslcc_mtx4x4unity_ObjectToWorld[3].w;
    u_xlat1.x = dot(u_xlat1, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[3] * u_xlat1.xxxx + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat16 = inversesqrt(u_xlat16);
    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
    u_xlat16_4 = dot(u_xlat1.xyz, mhy_AvatarLightDir.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    vs_TEXCOORD1.w = u_xlat16_4 * 0.497500002 + 0.5;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.zw = u_xlat0.zw;
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD3.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD5.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	mediump vec4 _Color;
uniform 	float _MainTexAlphaUse;
uniform 	mediump float _MainTexAlphaCutoff;
uniform 	float _UseLightMapColorAO;
uniform 	float _UseVertexColorAO;
uniform 	mediump float _LightArea;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	float _UseCoolShadowColorOrTex;
uniform 	mediump vec3 _CoolShadowMultColor;
uniform 	float _UseShadowTransition;
uniform 	float _ShadowTransitionRange;
uniform 	float _ShadowTransitionSoftness;
uniform 	mediump vec3 _SpecularColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump float _EmissionScaler;
uniform 	mediump vec3 _EmissionColor_MHY;
uniform 	float _ES_CharacterAmbientLightOn;
uniform 	float _ES_CharacterAmbientBrightness;
uniform 	vec3 _ES_CharacterMainLightColor;
uniform 	float _ES_CharacterMainLightBrightness;
uniform 	vec3 _ES_CharacterAmbientLightColor;
uniform 	float _ES_CharacterMainLightRatio;
uniform 	float _ES_CharacterAmbientLightRatio;
uniform 	float _ES_CharacterColorTone;
uniform 	vec3 mhy_AvatarLightDir;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMapTex;
in mediump vec4 vs_COLOR0;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec4 u_xlat0;
lowp vec3 u_xlat10_0;
bool u_xlatb0;
vec3 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
bool u_xlatb1;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump vec4 u_xlat16_3;
bvec3 u_xlatb3;
vec3 u_xlat4;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
vec3 u_xlat9;
bool u_xlatb9;
mediump float u_xlat16_11;
vec2 u_xlat18;
bool u_xlatb18;
float u_xlat21;
mediump float u_xlat16_21;
bool u_xlatb21;
float u_xlat27;
bool u_xlatb27;
mediump float u_xlat16_29;
bool u_xlatb30;
mediump float u_xlat16_32;
mediump float u_xlat16_33;
void main()
{
    u_xlat0.xy = dFdx(vs_TEXCOORD0.xy);
    u_xlat18.xy = dFdy(vs_TEXCOORD0.xy);
    u_xlat0.xy = u_xlat18.xy + u_xlat0.xy;
    u_xlat18.xy = (-u_xlat0.xy) * vec2(0.25, 0.25) + vs_TEXCOORD0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25) + vs_TEXCOORD0.xy;
    u_xlat0.xy = (int(gl_SampleID) != 0) ? u_xlat18.xy : u_xlat0.xy;
    u_xlat10_1 = textureLod(_MainTex, u_xlat0.xy, 0.0);
    u_xlat10_0.xyz = textureLod(_LightMapTex, u_xlat0.xy, 0.0).xyz;
    u_xlat16_2.x = u_xlat10_1.w + (-_MainTexAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(u_xlat16_2.x<0.0);
#else
    u_xlatb27 = u_xlat16_2.x<0.0;
#endif
    u_xlatb3.xy = equal(vec4(_MainTexAlphaUse), vec4(1.0, 2.0, 0.0, 0.0)).xy;
    u_xlatb27 = u_xlatb27 && u_xlatb3.x;
    if((int(u_xlatb27) * int(0xffffffffu))!=0){discard;}
    SV_Target0.w = 0.0470588244;
    u_xlat16_2.xyz = (uint((gl_FrontFacing ? 0xffffffffu : uint(0))) != uint(0u)) ? vs_TEXCOORD1.xyz : (-vs_TEXCOORD1.xyz);
    SV_Target0.xyz = u_xlat16_2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    u_xlat3.xzw = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat27 = dot(u_xlat3.xzw, u_xlat3.xzw);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat3.xzw = u_xlat3.xzw * vec3(u_xlat27) + mhy_AvatarLightDir.xyz;
    u_xlat27 = dot(u_xlat3.xzw, u_xlat3.xzw);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat3.xzw = vec3(u_xlat27) * u_xlat3.xzw;
    u_xlat16_2.x = dot(u_xlat16_2.xyz, u_xlat3.xzw);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.00100000005);
    u_xlat16_2.x = log2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * _Shininess;
    u_xlat16_2.x = exp2(u_xlat16_2.x);
    u_xlat18.x = (-u_xlat10_0.z) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(u_xlat18.x<u_xlat16_2.x);
#else
    u_xlatb18 = u_xlat18.x<u_xlat16_2.x;
#endif
    u_xlat16_2.xyz = _SpecularColor.xyz * vec3(_SpecMulti);
    u_xlat16_2.xyz = u_xlat10_0.xxx * u_xlat16_2.xyz;
    u_xlat3.xzw = u_xlat16_2.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
    u_xlat0.xzw = mix(vec3(0.0, 0.0, 0.0), u_xlat3.xzw, vec3(bvec3(u_xlatb18)));
    u_xlatb3.xz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseLightMapColorAO, _UseLightMapColorAO, _UseVertexColorAO, _UseLightMapColorAO)).xz;
    u_xlat16_2.x = (u_xlatb3.x) ? u_xlat10_0.y : 0.5;
    u_xlat16_11 = u_xlat16_2.x * vs_COLOR0.x;
    u_xlat16_2.x = (u_xlatb3.z) ? u_xlat16_11 : u_xlat16_2.x;
    u_xlat9.x = u_xlat16_2.x + vs_TEXCOORD1.w;
    u_xlat9.x = u_xlat9.x * 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb3.x = !!(0.949999988<u_xlat16_2.x);
#else
    u_xlatb3.x = 0.949999988<u_xlat16_2.x;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(u_xlat16_2.x<0.0500000007);
#else
    u_xlatb21 = u_xlat16_2.x<0.0500000007;
#endif
    u_xlat16_2.x = (u_xlatb3.x) ? 1.0 : u_xlat9.x;
    u_xlat16_2.x = (u_xlatb21) ? 0.0 : u_xlat16_2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(u_xlat16_2.x<_LightArea);
#else
    u_xlatb9 = u_xlat16_2.x<_LightArea;
#endif
    u_xlat16_2.x = (-u_xlat16_2.x) + _LightArea;
    u_xlat16_2.x = u_xlat16_2.x / _ShadowTransitionRange;
#ifdef UNITY_ADRENO_ES3
    u_xlatb3.x = !!(int((gl_FrontFacing ? 0xffffffffu : uint(0)))==0);
#else
    u_xlatb3.x = int((gl_FrontFacing ? 0xffffffffu : uint(0)))==0;
#endif
    u_xlatb3.x = u_xlatb9 || u_xlatb3.x;
    u_xlat16_21 = u_xlat16_2.x + 0.00999999978;
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(u_xlat16_2.x>=1.0);
#else
    u_xlatb30 = u_xlat16_2.x>=1.0;
#endif
    u_xlat16_21 = log2(u_xlat16_21);
    u_xlat21 = u_xlat16_21 * _ShadowTransitionSoftness;
    u_xlat21 = exp2(u_xlat21);
    u_xlat21 = min(u_xlat21, 1.0);
    u_xlat21 = (u_xlatb30) ? 1.0 : u_xlat21;
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition));
#else
    u_xlatb30 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition);
#endif
    u_xlat21 = (u_xlatb30) ? u_xlat21 : 1.0;
    u_xlat9.x = u_xlatb9 ? u_xlat21 : float(0.0);
    u_xlat16_4.xyz = vec3(_FirstShadowMultColor.xxyz.y + (-_CoolShadowMultColor.x), _FirstShadowMultColor.xxyz.z + (-_CoolShadowMultColor.y), float(_FirstShadowMultColor.z) + (-_CoolShadowMultColor.z));
    u_xlat4.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_4.xyz + _CoolShadowMultColor.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex));
#else
    u_xlatb21 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex);
#endif
    u_xlat16_2.xyz = (bool(u_xlatb21)) ? u_xlat4.xyz : vec3(_FirstShadowMultColor.x, _FirstShadowMultColor.y, _FirstShadowMultColor.z);
    u_xlat16_4.xyz = u_xlat16_2.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat4.xyz = u_xlat9.xxx * u_xlat16_4.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_5.xyz = (bool(u_xlatb30)) ? u_xlat4.xyz : u_xlat16_2.xyz;
    u_xlat16_6.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_6.xyz;
    u_xlat1.xyz = u_xlat16_6.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
    u_xlat1.xyz = (u_xlatb3.x) ? u_xlat16_5.xyz : u_xlat1.xyz;
    u_xlat16_5.xyz = u_xlat0.xzw + u_xlat1.xyz;
    u_xlat16_2.xyz = u_xlat16_6.xyz * u_xlat16_2.xyz + u_xlat0.xzw;
    u_xlat16_6.xyz = u_xlat16_6.xyz * _EmissionColor_MHY.xyz;
    u_xlat16_7.xyz = u_xlat16_6.xyz * vec3(vec3(_EmissionScaler, _EmissionScaler, _EmissionScaler)) + (-u_xlat16_5.xyz);
    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(vec3(_EmissionScaler, _EmissionScaler, _EmissionScaler)) + (-u_xlat16_2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.00999999978<u_xlat10_1.w);
#else
    u_xlatb0 = 0.00999999978<u_xlat10_1.w;
#endif
    u_xlatb0 = u_xlatb0 && u_xlatb3.y;
    u_xlat16_29 = (u_xlatb0) ? u_xlat10_1.w : 0.0;
    u_xlat16_7.xyz = vec3(u_xlat16_29) * u_xlat16_7.xyz + u_xlat16_5.xyz;
    u_xlat16_5.xyz = (bool(u_xlatb0)) ? u_xlat16_7.xyz : u_xlat16_5.xyz;
    u_xlat9.xyz = u_xlat16_5.xyz * vec3(vec3(_ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness));
    u_xlat1.xyz = _ES_CharacterMainLightColor.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat1.xyz = vec3(vec3(_ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio)) * u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat9.xyz = u_xlat9.xyz * u_xlat1.xyz;
    u_xlat16_7.xyz = u_xlat9.xyz * vec3(10.0, 10.0, 10.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.xyz = min(max(u_xlat16_7.xyz, 0.0), 1.0);
#else
    u_xlat16_7.xyz = clamp(u_xlat16_7.xyz, 0.0, 1.0);
#endif
    u_xlat1.xyz = _ES_CharacterAmbientLightColor.xyz * vec3(_ES_CharacterAmbientLightRatio);
    u_xlat9.xyz = u_xlat1.xyz * u_xlat16_7.xyz + u_xlat9.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn));
#else
    u_xlatb1 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn);
#endif
    u_xlat16_7.xyz = (bool(u_xlatb1)) ? u_xlat9.xyz : u_xlat16_5.xyz;
    u_xlat16_8.xyz = u_xlat16_5.xyz + (-u_xlat16_7.xyz);
    u_xlat16_8.xyz = vec3(u_xlat16_29) * u_xlat16_8.xyz + u_xlat16_7.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(0.00999999978<u_xlat16_29);
#else
    u_xlatb9 = 0.00999999978<u_xlat16_29;
#endif
    u_xlat16_1.xyz = (bool(u_xlatb9)) ? u_xlat16_8.xyz : u_xlat16_7.xyz;
    u_xlat16_32 = max(u_xlat16_1.z, u_xlat16_1.y);
    u_xlat16_3.w = max(u_xlat16_1.x, u_xlat16_32);
    u_xlat16_3.xyz = u_xlat16_1.xyz / u_xlat16_3.www;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(1.0<u_xlat16_3.w);
#else
    u_xlatb18 = 1.0<u_xlat16_3.w;
#endif
    u_xlat16_1.w = 1.0;
    u_xlat16_1 = (bool(u_xlatb18)) ? u_xlat16_3 : u_xlat16_1;
    u_xlat16_32 = min(u_xlat16_1.w, 1.10000002);
    u_xlat16_33 = u_xlat16_1.w + (-u_xlat16_32);
    SV_Target1.xyz = u_xlat16_1.xyz;
    u_xlat16_32 = u_xlat16_29 * u_xlat16_33 + u_xlat16_32;
    SV_Target1.w = u_xlat16_32 * 0.0500000007;
    u_xlat16_6.xyz = vec3(u_xlat16_29) * u_xlat16_6.xyz + u_xlat16_2.xyz;
    u_xlat16_2.xyz = (bool(u_xlatb0)) ? u_xlat16_6.xyz : u_xlat16_2.xyz;
    u_xlat16_5.xyz = (-u_xlat16_2.xyz) + u_xlat16_5.xyz;
    u_xlat16_5.xyz = vec3(u_xlat16_29) * u_xlat16_5.xyz + u_xlat16_2.xyz;
    u_xlat16_2.xyz = (bool(u_xlatb9)) ? u_xlat16_5.xyz : u_xlat16_2.xyz;
    SV_Target2.xy = u_xlat16_2.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_2.x = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb0) ? u_xlat16_2.x : u_xlat16_2.z;
    SV_Target2.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "LINE_INTERPOLATION" "TOON_SPECULAR_ON" "TOON_LIGHTMAP_ON" "BACK_FACE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec3 mhy_AvatarLightDir;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump float u_xlat16_4;
float u_xlat16;
void main()
{
    u_xlat0.x = hlslcc_mtx4x4unity_ObjectToWorld[0].y;
    u_xlat0.y = hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat0.z = hlslcc_mtx4x4unity_ObjectToWorld[2].y;
    u_xlat1.xyw = (-_WorldSpaceCameraPos.xyz) + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat0.w = u_xlat1.y;
    u_xlat2.xyz = in_POSITION0.xyz;
    u_xlat2.w = 1.0;
    u_xlat0.x = dot(u_xlat0, u_xlat2);
    u_xlat0 = u_xlat0.xxxx * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat3.w = u_xlat1.x;
    u_xlat3.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;
    u_xlat3.y = hlslcc_mtx4x4unity_ObjectToWorld[1].x;
    u_xlat3.z = hlslcc_mtx4x4unity_ObjectToWorld[2].x;
    u_xlat3.x = dot(u_xlat3, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat3.xxxx + u_xlat0;
    u_xlat1.x = hlslcc_mtx4x4unity_ObjectToWorld[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_ObjectToWorld[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_ObjectToWorld[2].z;
    u_xlat1.x = dot(u_xlat1, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat1.xxxx + u_xlat0;
    u_xlat1.x = hlslcc_mtx4x4unity_ObjectToWorld[0].w;
    u_xlat1.y = hlslcc_mtx4x4unity_ObjectToWorld[1].w;
    u_xlat1.z = hlslcc_mtx4x4unity_ObjectToWorld[2].w;
    u_xlat1.w = hlslcc_mtx4x4unity_ObjectToWorld[3].w;
    u_xlat1.x = dot(u_xlat1, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[3] * u_xlat1.xxxx + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat16 = inversesqrt(u_xlat16);
    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
    u_xlat16_4 = dot(u_xlat1.xyz, mhy_AvatarLightDir.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    vs_TEXCOORD1.w = u_xlat16_4 * 0.497500002 + 0.5;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.zw = u_xlat0.zw;
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD3.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD5.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	mediump vec4 _Color;
uniform 	float _MainTexAlphaUse;
uniform 	mediump float _MainTexAlphaCutoff;
uniform 	float _UseLightMapColorAO;
uniform 	float _UseVertexColorAO;
uniform 	mediump float _LightArea;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	float _UseCoolShadowColorOrTex;
uniform 	mediump vec3 _CoolShadowMultColor;
uniform 	float _UseShadowTransition;
uniform 	float _ShadowTransitionRange;
uniform 	float _ShadowTransitionSoftness;
uniform 	mediump vec3 _SpecularColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump float _EmissionScaler;
uniform 	mediump vec3 _EmissionColor_MHY;
uniform 	float _ES_CharacterAmbientLightOn;
uniform 	float _ES_CharacterAmbientBrightness;
uniform 	vec3 _ES_CharacterMainLightColor;
uniform 	float _ES_CharacterMainLightBrightness;
uniform 	vec3 _ES_CharacterAmbientLightColor;
uniform 	float _ES_CharacterMainLightRatio;
uniform 	float _ES_CharacterAmbientLightRatio;
uniform 	float _ES_CharacterColorTone;
uniform 	vec3 mhy_AvatarLightDir;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMapTex;
in mediump vec4 vs_COLOR0;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec4 u_xlat0;
lowp vec4 u_xlat10_0;
bvec4 u_xlatb0;
vec3 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
bool u_xlatb1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump vec4 u_xlat16_3;
vec3 u_xlat4;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
vec3 u_xlat9;
bool u_xlatb9;
mediump float u_xlat16_11;
bool u_xlatb18;
float u_xlat27;
mediump float u_xlat16_27;
bool u_xlatb27;
mediump float u_xlat16_29;
bool u_xlatb30;
mediump float u_xlat16_32;
mediump float u_xlat16_33;
void main()
{
    u_xlatb0.xy = equal(vec4(_MainTexAlphaUse), vec4(1.0, 2.0, 0.0, 0.0)).xy;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy, -1.0);
    u_xlat16_2.x = u_xlat10_1.w + (-_MainTexAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(u_xlat16_2.x<0.0);
#else
    u_xlatb18 = u_xlat16_2.x<0.0;
#endif
    u_xlatb0.x = u_xlatb0.x && u_xlatb18;
    if((int(u_xlatb0.x) * int(0xffffffffu))!=0){discard;}
    SV_Target0.w = 0.0470588244;
    u_xlat16_2.xyz = (uint((gl_FrontFacing ? 0xffffffffu : uint(0))) != uint(0u)) ? vs_TEXCOORD1.xyz : (-vs_TEXCOORD1.xyz);
    SV_Target0.xyz = u_xlat16_2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    u_xlat0.xzw = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat0.xzw = u_xlat0.xzw * u_xlat3.xxx + mhy_AvatarLightDir.xyz;
    u_xlat3.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat0.xzw = u_xlat0.xzw * u_xlat3.xxx;
    u_xlat16_2.x = dot(u_xlat16_2.xyz, u_xlat0.xzw);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.00100000005);
    u_xlat16_2.x = log2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * _Shininess;
    u_xlat16_2.x = exp2(u_xlat16_2.x);
    u_xlat10_0.xzw = texture(_LightMapTex, vs_TEXCOORD0.xy, -1.0).xyz;
    u_xlat27 = (-u_xlat10_0.w) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(u_xlat27<u_xlat16_2.x);
#else
    u_xlatb27 = u_xlat27<u_xlat16_2.x;
#endif
    u_xlat16_2.xyz = _SpecularColor.xyz * vec3(_SpecMulti);
    u_xlat16_2.xyz = u_xlat10_0.xxx * u_xlat16_2.xyz;
    u_xlat3.xyz = u_xlat16_2.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
    u_xlat3.xyz = mix(vec3(0.0, 0.0, 0.0), u_xlat3.xyz, vec3(bvec3(u_xlatb27)));
    u_xlatb0.xw = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseLightMapColorAO, _UseLightMapColorAO, _UseLightMapColorAO, _UseVertexColorAO)).xw;
    u_xlat16_2.x = (u_xlatb0.x) ? u_xlat10_0.z : 0.5;
    u_xlat16_11 = u_xlat16_2.x * vs_COLOR0.x;
    u_xlat16_2.x = (u_xlatb0.w) ? u_xlat16_11 : u_xlat16_2.x;
    u_xlat0.x = u_xlat16_2.x + vs_TEXCOORD1.w;
    u_xlat0.x = u_xlat0.x * 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(0.949999988<u_xlat16_2.x);
#else
    u_xlatb18 = 0.949999988<u_xlat16_2.x;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(u_xlat16_2.x<0.0500000007);
#else
    u_xlatb27 = u_xlat16_2.x<0.0500000007;
#endif
    u_xlat16_2.x = (u_xlatb18) ? 1.0 : u_xlat0.x;
    u_xlat16_2.x = (u_xlatb27) ? 0.0 : u_xlat16_2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(u_xlat16_2.x<_LightArea);
#else
    u_xlatb0.x = u_xlat16_2.x<_LightArea;
#endif
    u_xlat16_2.x = (-u_xlat16_2.x) + _LightArea;
    u_xlat16_2.x = u_xlat16_2.x / _ShadowTransitionRange;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(int((gl_FrontFacing ? 0xffffffffu : uint(0)))==0);
#else
    u_xlatb18 = int((gl_FrontFacing ? 0xffffffffu : uint(0)))==0;
#endif
    u_xlatb18 = u_xlatb0.x || u_xlatb18;
    u_xlat16_27 = u_xlat16_2.x + 0.00999999978;
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(u_xlat16_2.x>=1.0);
#else
    u_xlatb30 = u_xlat16_2.x>=1.0;
#endif
    u_xlat16_27 = log2(u_xlat16_27);
    u_xlat27 = u_xlat16_27 * _ShadowTransitionSoftness;
    u_xlat27 = exp2(u_xlat27);
    u_xlat27 = min(u_xlat27, 1.0);
    u_xlat27 = (u_xlatb30) ? 1.0 : u_xlat27;
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition));
#else
    u_xlatb30 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition);
#endif
    u_xlat27 = (u_xlatb30) ? u_xlat27 : 1.0;
    u_xlat0.x = u_xlatb0.x ? u_xlat27 : float(0.0);
    u_xlat16_4.xyz = vec3(_FirstShadowMultColor.xxyz.y + (-_CoolShadowMultColor.x), _FirstShadowMultColor.xxyz.z + (-_CoolShadowMultColor.y), float(_FirstShadowMultColor.z) + (-_CoolShadowMultColor.z));
    u_xlat4.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_4.xyz + _CoolShadowMultColor.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex));
#else
    u_xlatb27 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex);
#endif
    u_xlat16_2.xyz = (bool(u_xlatb27)) ? u_xlat4.xyz : vec3(_FirstShadowMultColor.x, _FirstShadowMultColor.y, _FirstShadowMultColor.z);
    u_xlat16_4.xyz = u_xlat16_2.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat4.xyz = u_xlat0.xxx * u_xlat16_4.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_5.xyz = (bool(u_xlatb30)) ? u_xlat4.xyz : u_xlat16_2.xyz;
    u_xlat16_6.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_6.xyz;
    u_xlat1.xyz = u_xlat16_6.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
    u_xlat0.xzw = (bool(u_xlatb18)) ? u_xlat16_5.xyz : u_xlat1.xyz;
    u_xlat16_5.xyz = u_xlat3.xyz + u_xlat0.xzw;
    u_xlat16_2.xyz = u_xlat16_6.xyz * u_xlat16_2.xyz + u_xlat3.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * _EmissionColor_MHY.xyz;
    u_xlat16_7.xyz = u_xlat16_6.xyz * vec3(vec3(_EmissionScaler, _EmissionScaler, _EmissionScaler)) + (-u_xlat16_5.xyz);
    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(vec3(_EmissionScaler, _EmissionScaler, _EmissionScaler)) + (-u_xlat16_2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(0.00999999978<u_xlat10_1.w);
#else
    u_xlatb0.x = 0.00999999978<u_xlat10_1.w;
#endif
    u_xlatb0.x = u_xlatb0.x && u_xlatb0.y;
    u_xlat16_29 = (u_xlatb0.x) ? u_xlat10_1.w : 0.0;
    u_xlat16_7.xyz = vec3(u_xlat16_29) * u_xlat16_7.xyz + u_xlat16_5.xyz;
    u_xlat16_5.xyz = (u_xlatb0.x) ? u_xlat16_7.xyz : u_xlat16_5.xyz;
    u_xlat9.xyz = u_xlat16_5.xyz * vec3(vec3(_ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness));
    u_xlat1.xyz = _ES_CharacterMainLightColor.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat1.xyz = vec3(vec3(_ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio)) * u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat9.xyz = u_xlat9.xyz * u_xlat1.xyz;
    u_xlat16_7.xyz = u_xlat9.xyz * vec3(10.0, 10.0, 10.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.xyz = min(max(u_xlat16_7.xyz, 0.0), 1.0);
#else
    u_xlat16_7.xyz = clamp(u_xlat16_7.xyz, 0.0, 1.0);
#endif
    u_xlat1.xyz = _ES_CharacterAmbientLightColor.xyz * vec3(_ES_CharacterAmbientLightRatio);
    u_xlat9.xyz = u_xlat1.xyz * u_xlat16_7.xyz + u_xlat9.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn));
#else
    u_xlatb1 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn);
#endif
    u_xlat16_7.xyz = (bool(u_xlatb1)) ? u_xlat9.xyz : u_xlat16_5.xyz;
    u_xlat16_8.xyz = u_xlat16_5.xyz + (-u_xlat16_7.xyz);
    u_xlat16_8.xyz = vec3(u_xlat16_29) * u_xlat16_8.xyz + u_xlat16_7.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(0.00999999978<u_xlat16_29);
#else
    u_xlatb9 = 0.00999999978<u_xlat16_29;
#endif
    u_xlat16_1.xyz = (bool(u_xlatb9)) ? u_xlat16_8.xyz : u_xlat16_7.xyz;
    u_xlat16_32 = max(u_xlat16_1.z, u_xlat16_1.y);
    u_xlat16_3.w = max(u_xlat16_1.x, u_xlat16_32);
    u_xlat16_3.xyz = u_xlat16_1.xyz / u_xlat16_3.www;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(1.0<u_xlat16_3.w);
#else
    u_xlatb18 = 1.0<u_xlat16_3.w;
#endif
    u_xlat16_1.w = 1.0;
    u_xlat16_1 = (bool(u_xlatb18)) ? u_xlat16_3 : u_xlat16_1;
    u_xlat16_32 = min(u_xlat16_1.w, 1.10000002);
    u_xlat16_33 = u_xlat16_1.w + (-u_xlat16_32);
    SV_Target1.xyz = u_xlat16_1.xyz;
    u_xlat16_32 = u_xlat16_29 * u_xlat16_33 + u_xlat16_32;
    SV_Target1.w = u_xlat16_32 * 0.0500000007;
    u_xlat16_6.xyz = vec3(u_xlat16_29) * u_xlat16_6.xyz + u_xlat16_2.xyz;
    u_xlat16_2.xyz = (u_xlatb0.x) ? u_xlat16_6.xyz : u_xlat16_2.xyz;
    u_xlat16_5.xyz = (-u_xlat16_2.xyz) + u_xlat16_5.xyz;
    u_xlat16_5.xyz = vec3(u_xlat16_29) * u_xlat16_5.xyz + u_xlat16_2.xyz;
    u_xlat16_2.xyz = (bool(u_xlatb9)) ? u_xlat16_5.xyz : u_xlat16_2.xyz;
    SV_Target2.xy = u_xlat16_2.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_2.x = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb0.x) ? u_xlat16_2.x : u_xlat16_2.z;
    SV_Target2.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "TOON_SPECULAR_ON" "TOON_LIGHTMAP_ON" "BACK_FACE_ON" "METAL_MAT" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec3 mhy_AvatarLightDir;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump float u_xlat16_4;
float u_xlat16;
void main()
{
    u_xlat0.x = hlslcc_mtx4x4unity_ObjectToWorld[0].y;
    u_xlat0.y = hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat0.z = hlslcc_mtx4x4unity_ObjectToWorld[2].y;
    u_xlat1.xyw = (-_WorldSpaceCameraPos.xyz) + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat0.w = u_xlat1.y;
    u_xlat2.xyz = in_POSITION0.xyz;
    u_xlat2.w = 1.0;
    u_xlat0.x = dot(u_xlat0, u_xlat2);
    u_xlat0 = u_xlat0.xxxx * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat3.w = u_xlat1.x;
    u_xlat3.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;
    u_xlat3.y = hlslcc_mtx4x4unity_ObjectToWorld[1].x;
    u_xlat3.z = hlslcc_mtx4x4unity_ObjectToWorld[2].x;
    u_xlat3.x = dot(u_xlat3, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat3.xxxx + u_xlat0;
    u_xlat1.x = hlslcc_mtx4x4unity_ObjectToWorld[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_ObjectToWorld[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_ObjectToWorld[2].z;
    u_xlat1.x = dot(u_xlat1, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat1.xxxx + u_xlat0;
    u_xlat1.x = hlslcc_mtx4x4unity_ObjectToWorld[0].w;
    u_xlat1.y = hlslcc_mtx4x4unity_ObjectToWorld[1].w;
    u_xlat1.z = hlslcc_mtx4x4unity_ObjectToWorld[2].w;
    u_xlat1.w = hlslcc_mtx4x4unity_ObjectToWorld[3].w;
    u_xlat1.x = dot(u_xlat1, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[3] * u_xlat1.xxxx + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat16 = inversesqrt(u_xlat16);
    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
    u_xlat16_4 = dot(u_xlat1.xyz, mhy_AvatarLightDir.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    vs_TEXCOORD1.w = u_xlat16_4 * 0.497500002 + 0.5;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.zw = u_xlat0.zw;
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD3.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD5.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToCamera[4];
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	mediump vec4 _Color;
uniform 	float _MainTexAlphaUse;
uniform 	mediump float _MainTexAlphaCutoff;
uniform 	float _UseLightMapColorAO;
uniform 	float _UseVertexColorAO;
uniform 	mediump float _LightArea;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	float _UseCoolShadowColorOrTex;
uniform 	mediump vec3 _CoolShadowMultColor;
uniform 	float _UseShadowTransition;
uniform 	float _ShadowTransitionRange;
uniform 	float _ShadowTransitionSoftness;
uniform 	mediump vec3 _SpecularColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump float _EmissionScaler;
uniform 	mediump vec3 _EmissionColor_MHY;
uniform 	mediump float _MTMapBrightness;
uniform 	float _MTMapTileScale;
uniform 	mediump vec3 _MTMapLightColor;
uniform 	mediump vec3 _MTMapDarkColor;
uniform 	mediump vec3 _MTShadowMultiColor;
uniform 	mediump float _MTShininess;
uniform 	mediump vec3 _MTSpecularColor;
uniform 	mediump float _MTSpecularScale;
uniform 	float _ES_CharacterAmbientLightOn;
uniform 	float _ES_CharacterAmbientBrightness;
uniform 	vec3 _ES_CharacterMainLightColor;
uniform 	float _ES_CharacterMainLightBrightness;
uniform 	vec3 _ES_CharacterAmbientLightColor;
uniform 	float _ES_CharacterMainLightRatio;
uniform 	float _ES_CharacterAmbientLightRatio;
uniform 	float _ES_CharacterColorTone;
uniform 	vec3 mhy_AvatarLightDir;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MTMap;
in mediump vec4 vs_COLOR0;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
mediump vec3 u_xlat16_0;
vec3 u_xlat1;
mediump vec4 u_xlat16_1;
bool u_xlatb1;
vec3 u_xlat2;
mediump vec4 u_xlat16_2;
lowp vec4 u_xlat10_2;
bool u_xlatb2;
vec3 u_xlat3;
lowp vec4 u_xlat10_3;
bvec2 u_xlatb3;
vec3 u_xlat4;
mediump vec3 u_xlat16_4;
bvec2 u_xlatb4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
vec3 u_xlat10;
mediump vec3 u_xlat16_10;
vec3 u_xlat11;
mediump vec3 u_xlat16_11;
bool u_xlatb13;
vec3 u_xlat14;
bool u_xlatb14;
vec2 u_xlat15;
float u_xlat26;
bool u_xlatb26;
mediump float u_xlat16_36;
float u_xlat37;
bool u_xlatb37;
float u_xlat38;
mediump float u_xlat16_38;
lowp float u_xlat10_38;
bool u_xlatb38;
mediump float u_xlat16_41;
void main()
{
    u_xlat16_0.xyz = (uint((gl_FrontFacing ? 0xffffffffu : uint(0))) != uint(0u)) ? vs_TEXCOORD1.xyz : (-vs_TEXCOORD1.xyz);
    u_xlat1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat37 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat37 = inversesqrt(u_xlat37);
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat37) + mhy_AvatarLightDir.xyz;
    u_xlat37 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat37 = inversesqrt(u_xlat37);
    u_xlat1.xyz = vec3(u_xlat37) * u_xlat1.xyz;
    u_xlat10_2 = texture(_MainTex, vs_TEXCOORD0.xy, -1.0);
    u_xlatb3.xy = equal(vec4(_MainTexAlphaUse), vec4(1.0, 2.0, 0.0, 0.0)).xy;
    u_xlat16_36 = u_xlat10_2.w + (-_MainTexAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb37 = !!(u_xlat16_36<0.0);
#else
    u_xlatb37 = u_xlat16_36<0.0;
#endif
    u_xlatb37 = u_xlatb3.x && u_xlatb37;
    if((int(u_xlatb37) * int(0xffffffffu))!=0){discard;}
    u_xlat10_3.xzw = texture(_LightMapTex, vs_TEXCOORD0.xy, -1.0).xyz;
    u_xlatb4.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseLightMapColorAO, _UseVertexColorAO, _UseLightMapColorAO, _UseLightMapColorAO)).xy;
    u_xlat16_36 = (u_xlatb4.x) ? u_xlat10_3.z : 0.5;
    u_xlat16_5.xyz = u_xlat10_2.xyz * _Color.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb37 = !!(0.00999999978<u_xlat10_2.w);
#else
    u_xlatb37 = 0.00999999978<u_xlat10_2.w;
#endif
    u_xlatb37 = u_xlatb37 && u_xlatb3.y;
    u_xlat16_41 = (u_xlatb37) ? u_xlat10_2.w : 0.0;
    u_xlat16_6.x = u_xlat16_36 * vs_COLOR0.x;
    u_xlat16_36 = (u_xlatb4.y) ? u_xlat16_6.x : u_xlat16_36;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat16_36<0.0500000007);
#else
    u_xlatb2 = u_xlat16_36<0.0500000007;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(0.949999988<u_xlat16_36);
#else
    u_xlatb14 = 0.949999988<u_xlat16_36;
#endif
    u_xlat26 = u_xlat16_36 + vs_TEXCOORD1.w;
    u_xlat26 = u_xlat26 * 0.5;
    u_xlat16_36 = (u_xlatb14) ? 1.0 : u_xlat26;
    u_xlat16_36 = (u_xlatb2) ? 0.0 : u_xlat16_36;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat16_36<_LightArea);
#else
    u_xlatb2 = u_xlat16_36<_LightArea;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition));
#else
    u_xlatb14 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition);
#endif
    u_xlat16_36 = (-u_xlat16_36) + _LightArea;
    u_xlat16_36 = u_xlat16_36 / _ShadowTransitionRange;
#ifdef UNITY_ADRENO_ES3
    u_xlatb26 = !!(u_xlat16_36>=1.0);
#else
    u_xlatb26 = u_xlat16_36>=1.0;
#endif
    u_xlat16_38 = u_xlat16_36 + 0.00999999978;
    u_xlat16_38 = log2(u_xlat16_38);
    u_xlat38 = u_xlat16_38 * _ShadowTransitionSoftness;
    u_xlat38 = exp2(u_xlat38);
    u_xlat38 = min(u_xlat38, 1.0);
    u_xlat26 = (u_xlatb26) ? 1.0 : u_xlat38;
    u_xlat26 = (u_xlatb14) ? u_xlat26 : 1.0;
    u_xlat26 = u_xlatb2 ? u_xlat26 : float(0.0);
    u_xlat2.x = u_xlatb2 ? 1.0 : float(0.0);
    u_xlat2.x = ((gl_FrontFacing ? 0xffffffffu : uint(0)) != uint(0u)) ? u_xlat2.x : 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb38 = !!(0.899999976<u_xlat10_3.x);
#else
    u_xlatb38 = 0.899999976<u_xlat10_3.x;
#endif
    if(u_xlatb38){
        u_xlat15.xy = u_xlat16_0.yy * hlslcc_mtx4x4unity_WorldToCamera[1].xy;
        u_xlat15.xy = hlslcc_mtx4x4unity_WorldToCamera[0].xy * u_xlat16_0.xx + u_xlat15.xy;
        u_xlat4.yz = hlslcc_mtx4x4unity_WorldToCamera[2].xy * u_xlat16_0.zz + u_xlat15.xy;
        u_xlat4.x = u_xlat4.y * _MTMapTileScale;
        u_xlat16_6.xy = u_xlat4.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
        u_xlat10_38 = texture(_MTMap, u_xlat16_6.xy).x;
        u_xlat16_36 = u_xlat10_38 * _MTMapBrightness;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_36 = min(max(u_xlat16_36, 0.0), 1.0);
#else
        u_xlat16_36 = clamp(u_xlat16_36, 0.0, 1.0);
#endif
        u_xlat16_6.xyz = _MTMapLightColor.xyz + (-_MTMapDarkColor.xyz);
        u_xlat16_6.xyz = vec3(u_xlat16_36) * u_xlat16_6.xyz + _MTMapDarkColor.xyz;
        u_xlat16_6.xyz = u_xlat16_5.xyz * u_xlat16_6.xyz;
        u_xlat16_36 = dot(u_xlat16_0.xyz, u_xlat1.xyz);
        u_xlat16_36 = max(u_xlat16_36, 0.00100000005);
        u_xlat16_36 = log2(u_xlat16_36);
        u_xlat16_36 = u_xlat16_36 * _MTShininess;
        u_xlat16_36 = exp2(u_xlat16_36);
        u_xlat16_36 = u_xlat16_36 * _MTSpecularScale;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_36 = min(max(u_xlat16_36, 0.0), 1.0);
#else
        u_xlat16_36 = clamp(u_xlat16_36, 0.0, 1.0);
#endif
        u_xlat16_7.xyz = vec3(u_xlat16_36) * _MTSpecularColor.xyz;
        u_xlat16_7.xyz = u_xlat10_3.www * u_xlat16_7.xyz;
        u_xlat16_8.xyz = u_xlat16_6.xyz * _MTShadowMultiColor.xyz;
        u_xlat16_4.xyz = _MTShadowMultiColor.xyz + vec3(-1.0, -1.0, -1.0);
        u_xlat4.xyz = vec3(u_xlat26) * u_xlat16_4.xyz + vec3(1.0, 1.0, 1.0);
        u_xlat16_9.xyz = (bool(u_xlatb14)) ? u_xlat4.xyz : _MTShadowMultiColor.xyz;
#ifdef UNITY_ADRENO_ES3
        u_xlatb38 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(u_xlat2.x));
#else
        u_xlatb38 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(u_xlat2.x);
#endif
        u_xlat16_9.xyz = u_xlat16_6.xyz * u_xlat16_9.xyz;
        u_xlat4.xyz = u_xlat16_6.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
        u_xlat4.xyz = (bool(u_xlatb38)) ? u_xlat16_9.xyz : u_xlat4.xyz;
        u_xlat10.xyz = u_xlat16_7.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
        u_xlat16_4.xyz = u_xlat4.xyz;
        u_xlat16_10.xyz = u_xlat10.xyz;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb38 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex));
#else
        u_xlatb38 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex);
#endif
        u_xlat16_11.xyz = vec3(_FirstShadowMultColor.xxyz.y + (-_CoolShadowMultColor.x), _FirstShadowMultColor.xxyz.z + (-_CoolShadowMultColor.y), float(_FirstShadowMultColor.z) + (-_CoolShadowMultColor.z));
        u_xlat11.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_11.xyz + _CoolShadowMultColor.xyz;
        u_xlat16_6.xyz = (bool(u_xlatb38)) ? u_xlat11.xyz : vec3(_FirstShadowMultColor.x, _FirstShadowMultColor.y, _FirstShadowMultColor.z);
        u_xlat16_8.xyz = u_xlat16_5.xyz * u_xlat16_6.xyz;
        u_xlat16_11.xyz = u_xlat16_6.xyz + vec3(-1.0, -1.0, -1.0);
        u_xlat11.xyz = vec3(u_xlat26) * u_xlat16_11.xyz + vec3(1.0, 1.0, 1.0);
        u_xlat16_6.xyz = (bool(u_xlatb14)) ? u_xlat11.xyz : u_xlat16_6.xyz;
#ifdef UNITY_ADRENO_ES3
        u_xlatb2 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(u_xlat2.x));
#else
        u_xlatb2 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(u_xlat2.x);
#endif
        u_xlat16_6.xyz = u_xlat16_5.xyz * u_xlat16_6.xyz;
        u_xlat14.xyz = u_xlat16_5.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
        u_xlat4.xyz = (bool(u_xlatb2)) ? u_xlat16_6.xyz : u_xlat14.xyz;
        u_xlat16_36 = dot(u_xlat16_0.xyz, u_xlat1.xyz);
        u_xlat16_36 = max(u_xlat16_36, 0.00100000005);
        u_xlat16_36 = log2(u_xlat16_36);
        u_xlat16_36 = u_xlat16_36 * _Shininess;
        u_xlat16_36 = exp2(u_xlat16_36);
        u_xlat1.x = (-u_xlat10_3.w) + 1.0;
#ifdef UNITY_ADRENO_ES3
        u_xlatb1 = !!(u_xlat1.x<u_xlat16_36);
#else
        u_xlatb1 = u_xlat1.x<u_xlat16_36;
#endif
        u_xlat16_6.xyz = _SpecularColor.xyz * vec3(_SpecMulti);
        u_xlat16_6.xyz = u_xlat10_3.xxx * u_xlat16_6.xyz;
        u_xlat2.xyz = u_xlat16_6.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
        u_xlat10.xyz = mix(vec3(0.0, 0.0, 0.0), u_xlat2.xyz, vec3(bvec3(u_xlatb1)));
        u_xlat16_4.xyz = u_xlat4.xyz;
        u_xlat16_10.xyz = u_xlat10.xyz;
    //ENDIF
    }
    u_xlat16_5.xyz = u_xlat16_5.xyz * _EmissionColor_MHY.xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz + u_xlat16_10.xyz;
    u_xlat16_7.xyz = u_xlat16_8.xyz + u_xlat16_10.xyz;
    u_xlat16_8.xyz = u_xlat16_5.xyz * vec3(vec3(_EmissionScaler, _EmissionScaler, _EmissionScaler)) + (-u_xlat16_6.xyz);
    u_xlat16_8.xyz = vec3(u_xlat16_41) * u_xlat16_8.xyz + u_xlat16_6.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(vec3(_EmissionScaler, _EmissionScaler, _EmissionScaler)) + (-u_xlat16_7.xyz);
    u_xlat16_5.xyz = vec3(u_xlat16_41) * u_xlat16_5.xyz + u_xlat16_7.xyz;
    u_xlat16_6.xyz = (bool(u_xlatb37)) ? u_xlat16_8.xyz : u_xlat16_6.xyz;
    u_xlat16_5.xyz = (bool(u_xlatb37)) ? u_xlat16_5.xyz : u_xlat16_7.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(0.00999999978<u_xlat16_41);
#else
    u_xlatb1 = 0.00999999978<u_xlat16_41;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb13 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn));
#else
    u_xlatb13 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn);
#endif
    u_xlat2.xyz = u_xlat16_6.xyz * vec3(vec3(_ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness));
    u_xlat3.xyz = _ES_CharacterMainLightColor.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat3.xyz = vec3(vec3(_ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio)) * u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat2.xyz = u_xlat2.xyz * u_xlat3.xyz;
    u_xlat3.xyz = _ES_CharacterAmbientLightColor.xyz * vec3(_ES_CharacterAmbientLightRatio);
    u_xlat16_7.xyz = u_xlat2.xyz * vec3(10.0, 10.0, 10.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.xyz = min(max(u_xlat16_7.xyz, 0.0), 1.0);
#else
    u_xlat16_7.xyz = clamp(u_xlat16_7.xyz, 0.0, 1.0);
#endif
    u_xlat2.xyz = u_xlat3.xyz * u_xlat16_7.xyz + u_xlat2.xyz;
    u_xlat16_7.xyz = (bool(u_xlatb13)) ? u_xlat2.xyz : u_xlat16_6.xyz;
    u_xlat16_8.xyz = u_xlat16_6.xyz + (-u_xlat16_7.xyz);
    u_xlat16_8.xyz = vec3(u_xlat16_41) * u_xlat16_8.xyz + u_xlat16_7.xyz;
    u_xlat16_6.xyz = (-u_xlat16_5.xyz) + u_xlat16_6.xyz;
    u_xlat16_6.xyz = vec3(u_xlat16_41) * u_xlat16_6.xyz + u_xlat16_5.xyz;
    u_xlat16_2.xyz = (bool(u_xlatb1)) ? u_xlat16_8.xyz : u_xlat16_7.xyz;
    u_xlat16_5.xyz = (bool(u_xlatb1)) ? u_xlat16_6.xyz : u_xlat16_5.xyz;
    u_xlat16_36 = max(u_xlat16_2.z, u_xlat16_2.y);
    u_xlat16_1.w = max(u_xlat16_36, u_xlat16_2.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb3.x = !!(1.0<u_xlat16_1.w);
#else
    u_xlatb3.x = 1.0<u_xlat16_1.w;
#endif
    u_xlat16_1.xyz = u_xlat16_2.xyz / u_xlat16_1.www;
    u_xlat16_2.w = 1.0;
    u_xlat16_1 = (u_xlatb3.x) ? u_xlat16_1 : u_xlat16_2;
    u_xlat16_36 = min(u_xlat16_1.w, 1.10000002);
    u_xlat16_6.x = (-u_xlat16_36) + u_xlat16_1.w;
    u_xlat16_36 = u_xlat16_41 * u_xlat16_6.x + u_xlat16_36;
    SV_Target1.w = u_xlat16_36 * 0.0500000007;
    SV_Target0.xyz = u_xlat16_0.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb3.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb3.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_0.x = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb3.x) ? u_xlat16_0.x : u_xlat16_5.z;
    SV_Target0.w = 0.0470588244;
    SV_Target1.xyz = u_xlat16_1.xyz;
    SV_Target2.xy = u_xlat16_5.xy;
    SV_Target2.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "MSAA_INTERPOLATION" "TOON_SPECULAR_ON" "TOON_LIGHTMAP_ON" "BACK_FACE_ON" "METAL_MAT" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec3 mhy_AvatarLightDir;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump float u_xlat16_4;
float u_xlat16;
void main()
{
    u_xlat0.x = hlslcc_mtx4x4unity_ObjectToWorld[0].y;
    u_xlat0.y = hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat0.z = hlslcc_mtx4x4unity_ObjectToWorld[2].y;
    u_xlat1.xyw = (-_WorldSpaceCameraPos.xyz) + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat0.w = u_xlat1.y;
    u_xlat2.xyz = in_POSITION0.xyz;
    u_xlat2.w = 1.0;
    u_xlat0.x = dot(u_xlat0, u_xlat2);
    u_xlat0 = u_xlat0.xxxx * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat3.w = u_xlat1.x;
    u_xlat3.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;
    u_xlat3.y = hlslcc_mtx4x4unity_ObjectToWorld[1].x;
    u_xlat3.z = hlslcc_mtx4x4unity_ObjectToWorld[2].x;
    u_xlat3.x = dot(u_xlat3, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat3.xxxx + u_xlat0;
    u_xlat1.x = hlslcc_mtx4x4unity_ObjectToWorld[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_ObjectToWorld[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_ObjectToWorld[2].z;
    u_xlat1.x = dot(u_xlat1, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat1.xxxx + u_xlat0;
    u_xlat1.x = hlslcc_mtx4x4unity_ObjectToWorld[0].w;
    u_xlat1.y = hlslcc_mtx4x4unity_ObjectToWorld[1].w;
    u_xlat1.z = hlslcc_mtx4x4unity_ObjectToWorld[2].w;
    u_xlat1.w = hlslcc_mtx4x4unity_ObjectToWorld[3].w;
    u_xlat1.x = dot(u_xlat1, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[3] * u_xlat1.xxxx + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat16 = inversesqrt(u_xlat16);
    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
    u_xlat16_4 = dot(u_xlat1.xyz, mhy_AvatarLightDir.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    vs_TEXCOORD1.w = u_xlat16_4 * 0.497500002 + 0.5;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.zw = u_xlat0.zw;
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD3.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD5.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToCamera[4];
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	mediump vec4 _Color;
uniform 	float _MainTexAlphaUse;
uniform 	mediump float _MainTexAlphaCutoff;
uniform 	float _UseLightMapColorAO;
uniform 	float _UseVertexColorAO;
uniform 	mediump float _LightArea;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	float _UseCoolShadowColorOrTex;
uniform 	mediump vec3 _CoolShadowMultColor;
uniform 	float _UseShadowTransition;
uniform 	float _ShadowTransitionRange;
uniform 	float _ShadowTransitionSoftness;
uniform 	mediump vec3 _SpecularColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump float _EmissionScaler;
uniform 	mediump vec3 _EmissionColor_MHY;
uniform 	mediump float _MTMapBrightness;
uniform 	float _MTMapTileScale;
uniform 	mediump vec3 _MTMapLightColor;
uniform 	mediump vec3 _MTMapDarkColor;
uniform 	mediump vec3 _MTShadowMultiColor;
uniform 	mediump float _MTShininess;
uniform 	mediump vec3 _MTSpecularColor;
uniform 	mediump float _MTSpecularScale;
uniform 	float _ES_CharacterAmbientLightOn;
uniform 	float _ES_CharacterAmbientBrightness;
uniform 	vec3 _ES_CharacterMainLightColor;
uniform 	float _ES_CharacterMainLightBrightness;
uniform 	vec3 _ES_CharacterAmbientLightColor;
uniform 	float _ES_CharacterMainLightRatio;
uniform 	float _ES_CharacterAmbientLightRatio;
uniform 	float _ES_CharacterColorTone;
uniform 	vec3 mhy_AvatarLightDir;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MTMap;
in mediump vec4 vs_COLOR0;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec2 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec3 u_xlat10_0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec4 u_xlat16_2;
lowp vec4 u_xlat10_3;
bool u_xlatb3;
vec3 u_xlat4;
mediump vec3 u_xlat16_4;
lowp float u_xlat10_4;
bvec2 u_xlatb4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
vec3 u_xlat10;
mediump vec3 u_xlat16_10;
vec3 u_xlat11;
mediump vec3 u_xlat16_11;
bool u_xlatb11;
vec3 u_xlat12;
bool u_xlatb13;
float u_xlat16;
bool u_xlatb16;
vec3 u_xlat17;
mediump vec3 u_xlat16_19;
vec3 u_xlat24;
mediump vec3 u_xlat16_24;
vec2 u_xlat26;
bvec2 u_xlatb26;
bool u_xlatb29;
mediump float u_xlat16_40;
bool u_xlatb41;
float u_xlat42;
bool u_xlatb42;
mediump float u_xlat16_44;
mediump float u_xlat16_45;
void main()
{
    u_xlat0.xy = dFdx(vs_TEXCOORD0.xy);
    u_xlat26.xy = dFdy(vs_TEXCOORD0.xy);
    u_xlat0.xy = u_xlat26.xy + u_xlat0.xy;
    u_xlat26.xy = (-u_xlat0.xy) * vec2(0.25, 0.25) + vs_TEXCOORD0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25) + vs_TEXCOORD0.xy;
    u_xlat0.xy = (int(gl_SampleID) != 0) ? u_xlat26.xy : u_xlat0.xy;
    u_xlat16_1.xyz = (uint((gl_FrontFacing ? 0xffffffffu : uint(0))) != uint(0u)) ? vs_TEXCOORD1.xyz : (-vs_TEXCOORD1.xyz);
    u_xlat2.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat26.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat26.x = inversesqrt(u_xlat26.x);
    u_xlat2.xyz = u_xlat2.xyz * u_xlat26.xxx + mhy_AvatarLightDir.xyz;
    u_xlat26.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat26.x = inversesqrt(u_xlat26.x);
    u_xlat2.xyz = u_xlat26.xxx * u_xlat2.xyz;
    u_xlat10_3 = textureLod(_MainTex, u_xlat0.xy, 0.0);
    u_xlatb26.xy = equal(vec4(_MainTexAlphaUse), vec4(1.0, 2.0, 1.0, 2.0)).xy;
    u_xlat16_40 = u_xlat10_3.w + (-_MainTexAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb41 = !!(u_xlat16_40<0.0);
#else
    u_xlatb41 = u_xlat16_40<0.0;
#endif
    u_xlatb26.x = u_xlatb26.x && u_xlatb41;
    if((int(u_xlatb26.x) * int(0xffffffffu))!=0){discard;}
    u_xlat10_0.xyz = textureLod(_LightMapTex, u_xlat0.xy, 0.0).xyz;
    u_xlatb4.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseLightMapColorAO, _UseVertexColorAO, _UseLightMapColorAO, _UseLightMapColorAO)).xy;
    u_xlat16_40 = (u_xlatb4.x) ? u_xlat10_0.y : 0.5;
    u_xlat16_5.xyz = u_xlat10_3.xyz * _Color.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb13 = !!(0.00999999978<u_xlat10_3.w);
#else
    u_xlatb13 = 0.00999999978<u_xlat10_3.w;
#endif
    u_xlatb3 = u_xlatb13 && u_xlatb26.y;
    u_xlat16_44 = (u_xlatb3) ? u_xlat10_3.w : 0.0;
    u_xlat16_6.x = u_xlat16_40 * vs_COLOR0.x;
    u_xlat16_6.x = (u_xlatb4.y) ? u_xlat16_6.x : u_xlat16_40;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(u_xlat16_6.x<0.0500000007);
#else
    u_xlatb16 = u_xlat16_6.x<0.0500000007;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb29 = !!(0.949999988<u_xlat16_6.x);
#else
    u_xlatb29 = 0.949999988<u_xlat16_6.x;
#endif
    u_xlat42 = u_xlat16_6.x + vs_TEXCOORD1.w;
    u_xlat42 = u_xlat42 * 0.5;
    u_xlat16_6.x = (u_xlatb29) ? 1.0 : u_xlat42;
    u_xlat16_6.x = (u_xlatb16) ? 0.0 : u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(u_xlat16_6.x<_LightArea);
#else
    u_xlatb16 = u_xlat16_6.x<_LightArea;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb29 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition));
#else
    u_xlatb29 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition);
#endif
    u_xlat16_6.x = (-u_xlat16_6.x) + _LightArea;
    u_xlat16_6.x = u_xlat16_6.x / _ShadowTransitionRange;
#ifdef UNITY_ADRENO_ES3
    u_xlatb42 = !!(u_xlat16_6.x>=1.0);
#else
    u_xlatb42 = u_xlat16_6.x>=1.0;
#endif
    u_xlat16_4.x = u_xlat16_6.x + 0.00999999978;
    u_xlat16_4.x = log2(u_xlat16_4.x);
    u_xlat4.x = u_xlat16_4.x * _ShadowTransitionSoftness;
    u_xlat4.x = exp2(u_xlat4.x);
    u_xlat4.x = min(u_xlat4.x, 1.0);
    u_xlat42 = (u_xlatb42) ? 1.0 : u_xlat4.x;
    u_xlat42 = (u_xlatb29) ? u_xlat42 : 1.0;
    u_xlat42 = u_xlatb16 ? u_xlat42 : float(0.0);
    u_xlat16 = u_xlatb16 ? 1.0 : float(0.0);
    u_xlat16 = ((gl_FrontFacing ? 0xffffffffu : uint(0)) != uint(0u)) ? u_xlat16 : 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4.x = !!(0.899999976<u_xlat10_0.x);
#else
    u_xlatb4.x = 0.899999976<u_xlat10_0.x;
#endif
    if(u_xlatb4.x){
        u_xlat4.xy = u_xlat16_1.yy * hlslcc_mtx4x4unity_WorldToCamera[1].xy;
        u_xlat4.xy = hlslcc_mtx4x4unity_WorldToCamera[0].xy * u_xlat16_1.xx + u_xlat4.xy;
        u_xlat4.yz = hlslcc_mtx4x4unity_WorldToCamera[2].xy * u_xlat16_1.zz + u_xlat4.xy;
        u_xlat4.x = u_xlat4.y * _MTMapTileScale;
        u_xlat16_6.xy = u_xlat4.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
        u_xlat10_4 = texture(_MTMap, u_xlat16_6.xy, -1.0).x;
        u_xlat16_6.x = u_xlat10_4 * _MTMapBrightness;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
        u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
        u_xlat16_19.xyz = _MTMapLightColor.xyz + (-_MTMapDarkColor.xyz);
        u_xlat16_6.xyz = u_xlat16_6.xxx * u_xlat16_19.xyz + _MTMapDarkColor.xyz;
        u_xlat16_6.xyz = u_xlat16_5.xyz * u_xlat16_6.xyz;
        u_xlat16_45 = dot(u_xlat16_1.xyz, u_xlat2.xyz);
        u_xlat16_45 = max(u_xlat16_45, 0.00100000005);
        u_xlat16_45 = log2(u_xlat16_45);
        u_xlat16_45 = u_xlat16_45 * _MTShininess;
        u_xlat16_45 = exp2(u_xlat16_45);
        u_xlat16_45 = u_xlat16_45 * _MTSpecularScale;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_45 = min(max(u_xlat16_45, 0.0), 1.0);
#else
        u_xlat16_45 = clamp(u_xlat16_45, 0.0, 1.0);
#endif
        u_xlat16_7.xyz = vec3(u_xlat16_45) * _MTSpecularColor.xyz;
        u_xlat16_7.xyz = u_xlat10_0.zzz * u_xlat16_7.xyz;
        u_xlat16_8.xyz = u_xlat16_6.xyz * _MTShadowMultiColor.xyz;
        u_xlat16_4.xyz = _MTShadowMultiColor.xyz + vec3(-1.0, -1.0, -1.0);
        u_xlat4.xyz = vec3(u_xlat42) * u_xlat16_4.xyz + vec3(1.0, 1.0, 1.0);
        u_xlat16_9.xyz = (bool(u_xlatb29)) ? u_xlat4.xyz : _MTShadowMultiColor.xyz;
#ifdef UNITY_ADRENO_ES3
        u_xlatb4.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(u_xlat16));
#else
        u_xlatb4.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(u_xlat16);
#endif
        u_xlat16_9.xyz = u_xlat16_6.xyz * u_xlat16_9.xyz;
        u_xlat17.xyz = u_xlat16_6.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
        u_xlat4.xyz = (u_xlatb4.x) ? u_xlat16_9.xyz : u_xlat17.xyz;
        u_xlat10.xyz = u_xlat16_7.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
        u_xlat16_4.xyz = u_xlat4.xyz;
        u_xlat16_10.xyz = u_xlat10.xyz;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb11 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex));
#else
        u_xlatb11 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex);
#endif
        u_xlat16_24.xyz = vec3(_FirstShadowMultColor.xxyz.y + (-_CoolShadowMultColor.x), _FirstShadowMultColor.xxyz.z + (-_CoolShadowMultColor.y), float(_FirstShadowMultColor.z) + (-_CoolShadowMultColor.z));
        u_xlat24.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_24.xyz + _CoolShadowMultColor.xyz;
        u_xlat16_6.xyz = (bool(u_xlatb11)) ? u_xlat24.xyz : vec3(_FirstShadowMultColor.x, _FirstShadowMultColor.y, _FirstShadowMultColor.z);
        u_xlat16_8.xyz = u_xlat16_5.xyz * u_xlat16_6.xyz;
        u_xlat16_11.xyz = u_xlat16_6.xyz + vec3(-1.0, -1.0, -1.0);
        u_xlat11.xyz = vec3(u_xlat42) * u_xlat16_11.xyz + vec3(1.0, 1.0, 1.0);
        u_xlat16_6.xyz = (bool(u_xlatb29)) ? u_xlat11.xyz : u_xlat16_6.xyz;
#ifdef UNITY_ADRENO_ES3
        u_xlatb16 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(u_xlat16));
#else
        u_xlatb16 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(u_xlat16);
#endif
        u_xlat16_6.xyz = u_xlat16_5.xyz * u_xlat16_6.xyz;
        u_xlat11.xyz = u_xlat16_5.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
        u_xlat4.xyz = (bool(u_xlatb16)) ? u_xlat16_6.xyz : u_xlat11.xyz;
        u_xlat16_6.x = dot(u_xlat16_1.xyz, u_xlat2.xyz);
        u_xlat16_6.x = max(u_xlat16_6.x, 0.00100000005);
        u_xlat16_6.x = log2(u_xlat16_6.x);
        u_xlat16_6.x = u_xlat16_6.x * _Shininess;
        u_xlat16_6.x = exp2(u_xlat16_6.x);
        u_xlat16 = (-u_xlat10_0.z) + 1.0;
#ifdef UNITY_ADRENO_ES3
        u_xlatb16 = !!(u_xlat16<u_xlat16_6.x);
#else
        u_xlatb16 = u_xlat16<u_xlat16_6.x;
#endif
        u_xlat16_6.xyz = _SpecularColor.xyz * vec3(_SpecMulti);
        u_xlat16_6.xyz = u_xlat10_0.xxx * u_xlat16_6.xyz;
        u_xlat11.xyz = u_xlat16_6.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
        u_xlat10.xyz = mix(vec3(0.0, 0.0, 0.0), u_xlat11.xyz, vec3(bvec3(u_xlatb16)));
        u_xlat16_4.xyz = u_xlat4.xyz;
        u_xlat16_10.xyz = u_xlat10.xyz;
    //ENDIF
    }
    u_xlat16_5.xyz = u_xlat16_5.xyz * _EmissionColor_MHY.xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz + u_xlat16_10.xyz;
    u_xlat16_7.xyz = u_xlat16_8.xyz + u_xlat16_10.xyz;
    u_xlat16_8.xyz = u_xlat16_5.xyz * vec3(vec3(_EmissionScaler, _EmissionScaler, _EmissionScaler)) + (-u_xlat16_6.xyz);
    u_xlat16_8.xyz = vec3(u_xlat16_44) * u_xlat16_8.xyz + u_xlat16_6.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(vec3(_EmissionScaler, _EmissionScaler, _EmissionScaler)) + (-u_xlat16_7.xyz);
    u_xlat16_5.xyz = vec3(u_xlat16_44) * u_xlat16_5.xyz + u_xlat16_7.xyz;
    u_xlat16_6.xyz = (bool(u_xlatb3)) ? u_xlat16_8.xyz : u_xlat16_6.xyz;
    u_xlat16_5.xyz = (bool(u_xlatb3)) ? u_xlat16_5.xyz : u_xlat16_7.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(0.00999999978<u_xlat16_44);
#else
    u_xlatb3 = 0.00999999978<u_xlat16_44;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn));
#else
    u_xlatb16 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn);
#endif
    u_xlat11.xyz = u_xlat16_6.xyz * vec3(vec3(_ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness));
    u_xlat12.xyz = _ES_CharacterMainLightColor.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat12.xyz = vec3(vec3(_ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio)) * u_xlat12.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat11.xyz = u_xlat11.xyz * u_xlat12.xyz;
    u_xlat12.xyz = _ES_CharacterAmbientLightColor.xyz * vec3(_ES_CharacterAmbientLightRatio);
    u_xlat16_7.xyz = u_xlat11.xyz * vec3(10.0, 10.0, 10.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.xyz = min(max(u_xlat16_7.xyz, 0.0), 1.0);
#else
    u_xlat16_7.xyz = clamp(u_xlat16_7.xyz, 0.0, 1.0);
#endif
    u_xlat11.xyz = u_xlat12.xyz * u_xlat16_7.xyz + u_xlat11.xyz;
    u_xlat16_7.xyz = (bool(u_xlatb16)) ? u_xlat11.xyz : u_xlat16_6.xyz;
    u_xlat16_8.xyz = u_xlat16_6.xyz + (-u_xlat16_7.xyz);
    u_xlat16_8.xyz = vec3(u_xlat16_44) * u_xlat16_8.xyz + u_xlat16_7.xyz;
    u_xlat16_6.xyz = (-u_xlat16_5.xyz) + u_xlat16_6.xyz;
    u_xlat16_6.xyz = vec3(u_xlat16_44) * u_xlat16_6.xyz + u_xlat16_5.xyz;
    u_xlat16_0.xyz = (bool(u_xlatb3)) ? u_xlat16_8.xyz : u_xlat16_7.xyz;
    u_xlat16_5.xyz = (bool(u_xlatb3)) ? u_xlat16_6.xyz : u_xlat16_5.xyz;
    u_xlat16_6.x = max(u_xlat16_0.z, u_xlat16_0.y);
    u_xlat16_2.w = max(u_xlat16_0.x, u_xlat16_6.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(1.0<u_xlat16_2.w);
#else
    u_xlatb3 = 1.0<u_xlat16_2.w;
#endif
    u_xlat16_2.xyz = u_xlat16_0.xyz / u_xlat16_2.www;
    u_xlat16_0.w = 1.0;
    u_xlat16_0 = (bool(u_xlatb3)) ? u_xlat16_2 : u_xlat16_0;
    u_xlat16_6.x = min(u_xlat16_0.w, 1.10000002);
    u_xlat16_19.x = u_xlat16_0.w + (-u_xlat16_6.x);
    u_xlat16_44 = u_xlat16_44 * u_xlat16_19.x + u_xlat16_6.x;
    SV_Target1.w = u_xlat16_44 * 0.0500000007;
    SV_Target0.xyz = u_xlat16_1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb3 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_44 = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb3) ? u_xlat16_44 : u_xlat16_5.z;
    SV_Target0.w = 0.0470588244;
    SV_Target1.xyz = u_xlat16_0.xyz;
    SV_Target2.xy = u_xlat16_5.xy;
    SV_Target2.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "LINE_INTERPOLATION" "TOON_SPECULAR_ON" "TOON_LIGHTMAP_ON" "BACK_FACE_ON" "METAL_MAT" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec3 mhy_AvatarLightDir;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump float u_xlat16_4;
float u_xlat16;
void main()
{
    u_xlat0.x = hlslcc_mtx4x4unity_ObjectToWorld[0].y;
    u_xlat0.y = hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat0.z = hlslcc_mtx4x4unity_ObjectToWorld[2].y;
    u_xlat1.xyw = (-_WorldSpaceCameraPos.xyz) + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat0.w = u_xlat1.y;
    u_xlat2.xyz = in_POSITION0.xyz;
    u_xlat2.w = 1.0;
    u_xlat0.x = dot(u_xlat0, u_xlat2);
    u_xlat0 = u_xlat0.xxxx * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat3.w = u_xlat1.x;
    u_xlat3.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;
    u_xlat3.y = hlslcc_mtx4x4unity_ObjectToWorld[1].x;
    u_xlat3.z = hlslcc_mtx4x4unity_ObjectToWorld[2].x;
    u_xlat3.x = dot(u_xlat3, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat3.xxxx + u_xlat0;
    u_xlat1.x = hlslcc_mtx4x4unity_ObjectToWorld[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_ObjectToWorld[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_ObjectToWorld[2].z;
    u_xlat1.x = dot(u_xlat1, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat1.xxxx + u_xlat0;
    u_xlat1.x = hlslcc_mtx4x4unity_ObjectToWorld[0].w;
    u_xlat1.y = hlslcc_mtx4x4unity_ObjectToWorld[1].w;
    u_xlat1.z = hlslcc_mtx4x4unity_ObjectToWorld[2].w;
    u_xlat1.w = hlslcc_mtx4x4unity_ObjectToWorld[3].w;
    u_xlat1.x = dot(u_xlat1, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[3] * u_xlat1.xxxx + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat16 = inversesqrt(u_xlat16);
    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
    u_xlat16_4 = dot(u_xlat1.xyz, mhy_AvatarLightDir.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    vs_TEXCOORD1.w = u_xlat16_4 * 0.497500002 + 0.5;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.zw = u_xlat0.zw;
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD3.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD5.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToCamera[4];
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	mediump vec4 _Color;
uniform 	float _MainTexAlphaUse;
uniform 	mediump float _MainTexAlphaCutoff;
uniform 	float _UseLightMapColorAO;
uniform 	float _UseVertexColorAO;
uniform 	mediump float _LightArea;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	float _UseCoolShadowColorOrTex;
uniform 	mediump vec3 _CoolShadowMultColor;
uniform 	float _UseShadowTransition;
uniform 	float _ShadowTransitionRange;
uniform 	float _ShadowTransitionSoftness;
uniform 	mediump vec3 _SpecularColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump float _EmissionScaler;
uniform 	mediump vec3 _EmissionColor_MHY;
uniform 	mediump float _MTMapBrightness;
uniform 	float _MTMapTileScale;
uniform 	mediump vec3 _MTMapLightColor;
uniform 	mediump vec3 _MTMapDarkColor;
uniform 	mediump vec3 _MTShadowMultiColor;
uniform 	mediump float _MTShininess;
uniform 	mediump vec3 _MTSpecularColor;
uniform 	mediump float _MTSpecularScale;
uniform 	float _ES_CharacterAmbientLightOn;
uniform 	float _ES_CharacterAmbientBrightness;
uniform 	vec3 _ES_CharacterMainLightColor;
uniform 	float _ES_CharacterMainLightBrightness;
uniform 	vec3 _ES_CharacterAmbientLightColor;
uniform 	float _ES_CharacterMainLightRatio;
uniform 	float _ES_CharacterAmbientLightRatio;
uniform 	float _ES_CharacterColorTone;
uniform 	vec3 mhy_AvatarLightDir;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MTMap;
in mediump vec4 vs_COLOR0;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
mediump vec3 u_xlat16_0;
vec3 u_xlat1;
mediump vec4 u_xlat16_1;
bool u_xlatb1;
vec3 u_xlat2;
mediump vec4 u_xlat16_2;
lowp vec4 u_xlat10_2;
bool u_xlatb2;
vec3 u_xlat3;
lowp vec4 u_xlat10_3;
bvec2 u_xlatb3;
vec3 u_xlat4;
mediump vec3 u_xlat16_4;
bvec2 u_xlatb4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
vec3 u_xlat10;
mediump vec3 u_xlat16_10;
vec3 u_xlat11;
mediump vec3 u_xlat16_11;
bool u_xlatb13;
vec3 u_xlat14;
bool u_xlatb14;
vec2 u_xlat15;
float u_xlat26;
bool u_xlatb26;
mediump float u_xlat16_36;
float u_xlat37;
bool u_xlatb37;
float u_xlat38;
mediump float u_xlat16_38;
lowp float u_xlat10_38;
bool u_xlatb38;
mediump float u_xlat16_41;
void main()
{
    u_xlat16_0.xyz = (uint((gl_FrontFacing ? 0xffffffffu : uint(0))) != uint(0u)) ? vs_TEXCOORD1.xyz : (-vs_TEXCOORD1.xyz);
    u_xlat1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat37 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat37 = inversesqrt(u_xlat37);
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat37) + mhy_AvatarLightDir.xyz;
    u_xlat37 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat37 = inversesqrt(u_xlat37);
    u_xlat1.xyz = vec3(u_xlat37) * u_xlat1.xyz;
    u_xlat10_2 = texture(_MainTex, vs_TEXCOORD0.xy, -1.0);
    u_xlatb3.xy = equal(vec4(_MainTexAlphaUse), vec4(1.0, 2.0, 0.0, 0.0)).xy;
    u_xlat16_36 = u_xlat10_2.w + (-_MainTexAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb37 = !!(u_xlat16_36<0.0);
#else
    u_xlatb37 = u_xlat16_36<0.0;
#endif
    u_xlatb37 = u_xlatb3.x && u_xlatb37;
    if((int(u_xlatb37) * int(0xffffffffu))!=0){discard;}
    u_xlat10_3.xzw = texture(_LightMapTex, vs_TEXCOORD0.xy, -1.0).xyz;
    u_xlatb4.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseLightMapColorAO, _UseVertexColorAO, _UseLightMapColorAO, _UseLightMapColorAO)).xy;
    u_xlat16_36 = (u_xlatb4.x) ? u_xlat10_3.z : 0.5;
    u_xlat16_5.xyz = u_xlat10_2.xyz * _Color.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb37 = !!(0.00999999978<u_xlat10_2.w);
#else
    u_xlatb37 = 0.00999999978<u_xlat10_2.w;
#endif
    u_xlatb37 = u_xlatb37 && u_xlatb3.y;
    u_xlat16_41 = (u_xlatb37) ? u_xlat10_2.w : 0.0;
    u_xlat16_6.x = u_xlat16_36 * vs_COLOR0.x;
    u_xlat16_36 = (u_xlatb4.y) ? u_xlat16_6.x : u_xlat16_36;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat16_36<0.0500000007);
#else
    u_xlatb2 = u_xlat16_36<0.0500000007;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(0.949999988<u_xlat16_36);
#else
    u_xlatb14 = 0.949999988<u_xlat16_36;
#endif
    u_xlat26 = u_xlat16_36 + vs_TEXCOORD1.w;
    u_xlat26 = u_xlat26 * 0.5;
    u_xlat16_36 = (u_xlatb14) ? 1.0 : u_xlat26;
    u_xlat16_36 = (u_xlatb2) ? 0.0 : u_xlat16_36;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat16_36<_LightArea);
#else
    u_xlatb2 = u_xlat16_36<_LightArea;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition));
#else
    u_xlatb14 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition);
#endif
    u_xlat16_36 = (-u_xlat16_36) + _LightArea;
    u_xlat16_36 = u_xlat16_36 / _ShadowTransitionRange;
#ifdef UNITY_ADRENO_ES3
    u_xlatb26 = !!(u_xlat16_36>=1.0);
#else
    u_xlatb26 = u_xlat16_36>=1.0;
#endif
    u_xlat16_38 = u_xlat16_36 + 0.00999999978;
    u_xlat16_38 = log2(u_xlat16_38);
    u_xlat38 = u_xlat16_38 * _ShadowTransitionSoftness;
    u_xlat38 = exp2(u_xlat38);
    u_xlat38 = min(u_xlat38, 1.0);
    u_xlat26 = (u_xlatb26) ? 1.0 : u_xlat38;
    u_xlat26 = (u_xlatb14) ? u_xlat26 : 1.0;
    u_xlat26 = u_xlatb2 ? u_xlat26 : float(0.0);
    u_xlat2.x = u_xlatb2 ? 1.0 : float(0.0);
    u_xlat2.x = ((gl_FrontFacing ? 0xffffffffu : uint(0)) != uint(0u)) ? u_xlat2.x : 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb38 = !!(0.899999976<u_xlat10_3.x);
#else
    u_xlatb38 = 0.899999976<u_xlat10_3.x;
#endif
    if(u_xlatb38){
        u_xlat15.xy = u_xlat16_0.yy * hlslcc_mtx4x4unity_WorldToCamera[1].xy;
        u_xlat15.xy = hlslcc_mtx4x4unity_WorldToCamera[0].xy * u_xlat16_0.xx + u_xlat15.xy;
        u_xlat4.yz = hlslcc_mtx4x4unity_WorldToCamera[2].xy * u_xlat16_0.zz + u_xlat15.xy;
        u_xlat4.x = u_xlat4.y * _MTMapTileScale;
        u_xlat16_6.xy = u_xlat4.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
        u_xlat10_38 = texture(_MTMap, u_xlat16_6.xy, -1.0).x;
        u_xlat16_36 = u_xlat10_38 * _MTMapBrightness;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_36 = min(max(u_xlat16_36, 0.0), 1.0);
#else
        u_xlat16_36 = clamp(u_xlat16_36, 0.0, 1.0);
#endif
        u_xlat16_6.xyz = _MTMapLightColor.xyz + (-_MTMapDarkColor.xyz);
        u_xlat16_6.xyz = vec3(u_xlat16_36) * u_xlat16_6.xyz + _MTMapDarkColor.xyz;
        u_xlat16_6.xyz = u_xlat16_5.xyz * u_xlat16_6.xyz;
        u_xlat16_36 = dot(u_xlat16_0.xyz, u_xlat1.xyz);
        u_xlat16_36 = max(u_xlat16_36, 0.00100000005);
        u_xlat16_36 = log2(u_xlat16_36);
        u_xlat16_36 = u_xlat16_36 * _MTShininess;
        u_xlat16_36 = exp2(u_xlat16_36);
        u_xlat16_36 = u_xlat16_36 * _MTSpecularScale;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_36 = min(max(u_xlat16_36, 0.0), 1.0);
#else
        u_xlat16_36 = clamp(u_xlat16_36, 0.0, 1.0);
#endif
        u_xlat16_7.xyz = vec3(u_xlat16_36) * _MTSpecularColor.xyz;
        u_xlat16_7.xyz = u_xlat10_3.www * u_xlat16_7.xyz;
        u_xlat16_8.xyz = u_xlat16_6.xyz * _MTShadowMultiColor.xyz;
        u_xlat16_4.xyz = _MTShadowMultiColor.xyz + vec3(-1.0, -1.0, -1.0);
        u_xlat4.xyz = vec3(u_xlat26) * u_xlat16_4.xyz + vec3(1.0, 1.0, 1.0);
        u_xlat16_9.xyz = (bool(u_xlatb14)) ? u_xlat4.xyz : _MTShadowMultiColor.xyz;
#ifdef UNITY_ADRENO_ES3
        u_xlatb38 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(u_xlat2.x));
#else
        u_xlatb38 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(u_xlat2.x);
#endif
        u_xlat16_9.xyz = u_xlat16_6.xyz * u_xlat16_9.xyz;
        u_xlat4.xyz = u_xlat16_6.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
        u_xlat4.xyz = (bool(u_xlatb38)) ? u_xlat16_9.xyz : u_xlat4.xyz;
        u_xlat10.xyz = u_xlat16_7.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
        u_xlat16_4.xyz = u_xlat4.xyz;
        u_xlat16_10.xyz = u_xlat10.xyz;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb38 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex));
#else
        u_xlatb38 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex);
#endif
        u_xlat16_11.xyz = vec3(_FirstShadowMultColor.xxyz.y + (-_CoolShadowMultColor.x), _FirstShadowMultColor.xxyz.z + (-_CoolShadowMultColor.y), float(_FirstShadowMultColor.z) + (-_CoolShadowMultColor.z));
        u_xlat11.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_11.xyz + _CoolShadowMultColor.xyz;
        u_xlat16_6.xyz = (bool(u_xlatb38)) ? u_xlat11.xyz : vec3(_FirstShadowMultColor.x, _FirstShadowMultColor.y, _FirstShadowMultColor.z);
        u_xlat16_8.xyz = u_xlat16_5.xyz * u_xlat16_6.xyz;
        u_xlat16_11.xyz = u_xlat16_6.xyz + vec3(-1.0, -1.0, -1.0);
        u_xlat11.xyz = vec3(u_xlat26) * u_xlat16_11.xyz + vec3(1.0, 1.0, 1.0);
        u_xlat16_6.xyz = (bool(u_xlatb14)) ? u_xlat11.xyz : u_xlat16_6.xyz;
#ifdef UNITY_ADRENO_ES3
        u_xlatb2 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(u_xlat2.x));
#else
        u_xlatb2 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(u_xlat2.x);
#endif
        u_xlat16_6.xyz = u_xlat16_5.xyz * u_xlat16_6.xyz;
        u_xlat14.xyz = u_xlat16_5.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
        u_xlat4.xyz = (bool(u_xlatb2)) ? u_xlat16_6.xyz : u_xlat14.xyz;
        u_xlat16_36 = dot(u_xlat16_0.xyz, u_xlat1.xyz);
        u_xlat16_36 = max(u_xlat16_36, 0.00100000005);
        u_xlat16_36 = log2(u_xlat16_36);
        u_xlat16_36 = u_xlat16_36 * _Shininess;
        u_xlat16_36 = exp2(u_xlat16_36);
        u_xlat1.x = (-u_xlat10_3.w) + 1.0;
#ifdef UNITY_ADRENO_ES3
        u_xlatb1 = !!(u_xlat1.x<u_xlat16_36);
#else
        u_xlatb1 = u_xlat1.x<u_xlat16_36;
#endif
        u_xlat16_6.xyz = _SpecularColor.xyz * vec3(_SpecMulti);
        u_xlat16_6.xyz = u_xlat10_3.xxx * u_xlat16_6.xyz;
        u_xlat2.xyz = u_xlat16_6.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
        u_xlat10.xyz = mix(vec3(0.0, 0.0, 0.0), u_xlat2.xyz, vec3(bvec3(u_xlatb1)));
        u_xlat16_4.xyz = u_xlat4.xyz;
        u_xlat16_10.xyz = u_xlat10.xyz;
    //ENDIF
    }
    u_xlat16_5.xyz = u_xlat16_5.xyz * _EmissionColor_MHY.xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz + u_xlat16_10.xyz;
    u_xlat16_7.xyz = u_xlat16_8.xyz + u_xlat16_10.xyz;
    u_xlat16_8.xyz = u_xlat16_5.xyz * vec3(vec3(_EmissionScaler, _EmissionScaler, _EmissionScaler)) + (-u_xlat16_6.xyz);
    u_xlat16_8.xyz = vec3(u_xlat16_41) * u_xlat16_8.xyz + u_xlat16_6.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(vec3(_EmissionScaler, _EmissionScaler, _EmissionScaler)) + (-u_xlat16_7.xyz);
    u_xlat16_5.xyz = vec3(u_xlat16_41) * u_xlat16_5.xyz + u_xlat16_7.xyz;
    u_xlat16_6.xyz = (bool(u_xlatb37)) ? u_xlat16_8.xyz : u_xlat16_6.xyz;
    u_xlat16_5.xyz = (bool(u_xlatb37)) ? u_xlat16_5.xyz : u_xlat16_7.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(0.00999999978<u_xlat16_41);
#else
    u_xlatb1 = 0.00999999978<u_xlat16_41;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb13 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn));
#else
    u_xlatb13 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn);
#endif
    u_xlat2.xyz = u_xlat16_6.xyz * vec3(vec3(_ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness));
    u_xlat3.xyz = _ES_CharacterMainLightColor.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat3.xyz = vec3(vec3(_ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio)) * u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat2.xyz = u_xlat2.xyz * u_xlat3.xyz;
    u_xlat3.xyz = _ES_CharacterAmbientLightColor.xyz * vec3(_ES_CharacterAmbientLightRatio);
    u_xlat16_7.xyz = u_xlat2.xyz * vec3(10.0, 10.0, 10.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.xyz = min(max(u_xlat16_7.xyz, 0.0), 1.0);
#else
    u_xlat16_7.xyz = clamp(u_xlat16_7.xyz, 0.0, 1.0);
#endif
    u_xlat2.xyz = u_xlat3.xyz * u_xlat16_7.xyz + u_xlat2.xyz;
    u_xlat16_7.xyz = (bool(u_xlatb13)) ? u_xlat2.xyz : u_xlat16_6.xyz;
    u_xlat16_8.xyz = u_xlat16_6.xyz + (-u_xlat16_7.xyz);
    u_xlat16_8.xyz = vec3(u_xlat16_41) * u_xlat16_8.xyz + u_xlat16_7.xyz;
    u_xlat16_6.xyz = (-u_xlat16_5.xyz) + u_xlat16_6.xyz;
    u_xlat16_6.xyz = vec3(u_xlat16_41) * u_xlat16_6.xyz + u_xlat16_5.xyz;
    u_xlat16_2.xyz = (bool(u_xlatb1)) ? u_xlat16_8.xyz : u_xlat16_7.xyz;
    u_xlat16_5.xyz = (bool(u_xlatb1)) ? u_xlat16_6.xyz : u_xlat16_5.xyz;
    u_xlat16_36 = max(u_xlat16_2.z, u_xlat16_2.y);
    u_xlat16_1.w = max(u_xlat16_36, u_xlat16_2.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb3.x = !!(1.0<u_xlat16_1.w);
#else
    u_xlatb3.x = 1.0<u_xlat16_1.w;
#endif
    u_xlat16_1.xyz = u_xlat16_2.xyz / u_xlat16_1.www;
    u_xlat16_2.w = 1.0;
    u_xlat16_1 = (u_xlatb3.x) ? u_xlat16_1 : u_xlat16_2;
    u_xlat16_36 = min(u_xlat16_1.w, 1.10000002);
    u_xlat16_6.x = (-u_xlat16_36) + u_xlat16_1.w;
    u_xlat16_36 = u_xlat16_41 * u_xlat16_6.x + u_xlat16_36;
    SV_Target1.w = u_xlat16_36 * 0.0500000007;
    SV_Target0.xyz = u_xlat16_0.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb3.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb3.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_0.x = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb3.x) ? u_xlat16_0.x : u_xlat16_5.z;
    SV_Target0.w = 0.0470588244;
    SV_Target1.xyz = u_xlat16_1.xyz;
    SV_Target2.xy = u_xlat16_5.xy;
    SV_Target2.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "TOON_SPECULAR_ON" "TOON_LIGHTMAP_ON" "NORMAL_MAP_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
float u_xlat12;
void main()
{
    u_xlat0.x = hlslcc_mtx4x4unity_ObjectToWorld[0].y;
    u_xlat0.y = hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat0.z = hlslcc_mtx4x4unity_ObjectToWorld[2].y;
    u_xlat1.xyw = (-_WorldSpaceCameraPos.xyz) + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat0.w = u_xlat1.y;
    u_xlat2.xyz = in_POSITION0.xyz;
    u_xlat2.w = 1.0;
    u_xlat0.x = dot(u_xlat0, u_xlat2);
    u_xlat0 = u_xlat0.xxxx * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat3.w = u_xlat1.x;
    u_xlat3.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;
    u_xlat3.y = hlslcc_mtx4x4unity_ObjectToWorld[1].x;
    u_xlat3.z = hlslcc_mtx4x4unity_ObjectToWorld[2].x;
    u_xlat3.x = dot(u_xlat3, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat3.xxxx + u_xlat0;
    u_xlat1.x = hlslcc_mtx4x4unity_ObjectToWorld[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_ObjectToWorld[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_ObjectToWorld[2].z;
    u_xlat1.x = dot(u_xlat1, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat1.xxxx + u_xlat0;
    u_xlat1.x = hlslcc_mtx4x4unity_ObjectToWorld[0].w;
    u_xlat1.y = hlslcc_mtx4x4unity_ObjectToWorld[1].w;
    u_xlat1.z = hlslcc_mtx4x4unity_ObjectToWorld[2].w;
    u_xlat1.w = hlslcc_mtx4x4unity_ObjectToWorld[3].w;
    u_xlat1.x = dot(u_xlat1, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[3] * u_xlat1.xxxx + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD1 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.zw = u_xlat0.zw;
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD3.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
    u_xlat12 = in_TANGENT0.w * unity_WorldTransformParams.w;
    u_xlat2.xyz = vec3(u_xlat12) * u_xlat2.xyz;
    vs_TEXCOORD4.y = u_xlat2.x;
    vs_TEXCOORD4.x = u_xlat1.z;
    vs_TEXCOORD4.z = u_xlat0.y;
    vs_TEXCOORD5.x = u_xlat1.x;
    vs_TEXCOORD6.x = u_xlat1.y;
    vs_TEXCOORD5.z = u_xlat0.z;
    vs_TEXCOORD6.z = u_xlat0.x;
    vs_TEXCOORD5.y = u_xlat2.y;
    vs_TEXCOORD6.y = u_xlat2.z;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	mediump vec4 _Color;
uniform 	float _MainTexAlphaUse;
uniform 	mediump float _MainTexAlphaCutoff;
uniform 	mediump float _BumpScale;
uniform 	float _UseLightMapColorAO;
uniform 	float _UseVertexColorAO;
uniform 	mediump float _LightArea;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	float _UseCoolShadowColorOrTex;
uniform 	mediump vec3 _CoolShadowMultColor;
uniform 	float _UseShadowTransition;
uniform 	float _ShadowTransitionRange;
uniform 	float _ShadowTransitionSoftness;
uniform 	mediump vec3 _SpecularColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump float _EmissionScaler;
uniform 	mediump vec3 _EmissionColor_MHY;
uniform 	float _ES_CharacterAmbientLightOn;
uniform 	float _ES_CharacterAmbientBrightness;
uniform 	vec3 _ES_CharacterMainLightColor;
uniform 	float _ES_CharacterMainLightBrightness;
uniform 	vec3 _ES_CharacterAmbientLightColor;
uniform 	float _ES_CharacterMainLightRatio;
uniform 	float _ES_CharacterAmbientLightRatio;
uniform 	float _ES_CharacterColorTone;
uniform 	vec3 mhy_AvatarLightDir;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMapTex;
in mediump vec4 vs_COLOR0;
in highp vec2 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD5;
in highp vec3 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec4 u_xlat0;
mediump float u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
vec3 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
bool u_xlatb1;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump vec4 u_xlat16_3;
lowp vec3 u_xlat10_3;
vec3 u_xlat4;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
vec3 u_xlat9;
bool u_xlatb9;
mediump float u_xlat16_11;
bool u_xlatb12;
float u_xlat18;
mediump float u_xlat16_18;
bvec2 u_xlatb18;
bool u_xlatb27;
mediump float u_xlat16_29;
mediump float u_xlat16_32;
mediump float u_xlat16_33;
void main()
{
    u_xlatb0.xy = equal(vec4(_MainTexAlphaUse), vec4(1.0, 2.0, 0.0, 0.0)).xy;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy, -1.0);
    u_xlat16_2.x = u_xlat10_1.w + (-_MainTexAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb18.x = !!(u_xlat16_2.x<0.0);
#else
    u_xlatb18.x = u_xlat16_2.x<0.0;
#endif
    u_xlatb0.x = u_xlatb0.x && u_xlatb18.x;
    if((int(u_xlatb0.x) * int(0xffffffffu))!=0){discard;}
    u_xlat10_0.xzw = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xzw * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_2.xy = u_xlat16_2.xy * vec2(vec2(_BumpScale, _BumpScale));
    u_xlat3.x = dot(vs_TEXCOORD4.xyz, u_xlat16_2.xyz);
    u_xlat3.y = dot(vs_TEXCOORD5.xyz, u_xlat16_2.xyz);
    u_xlat3.z = dot(vs_TEXCOORD6.xyz, u_xlat16_2.xyz);
    u_xlat16_2.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat16_2.x = inversesqrt(u_xlat16_2.x);
    u_xlat16_2.xyz = u_xlat16_2.xxx * u_xlat3.xyz;
    SV_Target0.xyz = u_xlat16_2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0470588244;
    u_xlat0.xzw = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat0.xzw = u_xlat0.xzw * u_xlat3.xxx + mhy_AvatarLightDir.xyz;
    u_xlat3.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat0.xzw = u_xlat0.xzw * u_xlat3.xxx;
    u_xlat16_29 = dot(u_xlat16_2.xyz, u_xlat0.xzw);
    u_xlat16_2.x = dot(u_xlat16_2.xyz, mhy_AvatarLightDir.xyz);
    u_xlat16_0 = u_xlat16_2.x * 0.497500002 + 0.5;
    u_xlat16_2.x = max(u_xlat16_29, 0.00100000005);
    u_xlat16_2.x = log2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * _Shininess;
    u_xlat16_2.x = exp2(u_xlat16_2.x);
    u_xlat10_3.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy, -1.0).xyz;
    u_xlat18 = (-u_xlat10_3.z) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18.x = !!(u_xlat18<u_xlat16_2.x);
#else
    u_xlatb18.x = u_xlat18<u_xlat16_2.x;
#endif
    u_xlat16_2.xyz = _SpecularColor.xyz * vec3(_SpecMulti);
    u_xlat16_2.xyz = u_xlat10_3.xxx * u_xlat16_2.xyz;
    u_xlat3.xzw = u_xlat16_2.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
    u_xlat3.xzw = mix(vec3(0.0, 0.0, 0.0), u_xlat3.xzw, vec3(u_xlatb18.xxx));
    u_xlatb18.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseLightMapColorAO, _UseVertexColorAO, _UseLightMapColorAO, _UseVertexColorAO)).xy;
    u_xlat16_2.x = (u_xlatb18.x) ? u_xlat10_3.y : 0.5;
    u_xlat16_11 = u_xlat16_2.x * vs_COLOR0.x;
    u_xlat16_2.x = (u_xlatb18.y) ? u_xlat16_11 : u_xlat16_2.x;
    u_xlat16_0 = u_xlat16_0 + u_xlat16_2.x;
    u_xlat0.x = u_xlat16_0 * 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18.x = !!(0.949999988<u_xlat16_2.x);
#else
    u_xlatb18.x = 0.949999988<u_xlat16_2.x;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(u_xlat16_2.x<0.0500000007);
#else
    u_xlatb27 = u_xlat16_2.x<0.0500000007;
#endif
    u_xlat16_2.x = (u_xlatb18.x) ? 1.0 : u_xlat0.x;
    u_xlat16_2.x = (u_xlatb27) ? 0.0 : u_xlat16_2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(u_xlat16_2.x<_LightArea);
#else
    u_xlatb0.x = u_xlat16_2.x<_LightArea;
#endif
    u_xlat16_2.x = (-u_xlat16_2.x) + _LightArea;
    u_xlat16_2.x = u_xlat16_2.x / _ShadowTransitionRange;
    u_xlat16_18 = u_xlat16_2.x + 0.00999999978;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(u_xlat16_2.x>=1.0);
#else
    u_xlatb27 = u_xlat16_2.x>=1.0;
#endif
    u_xlat16_18 = log2(u_xlat16_18);
    u_xlat18 = u_xlat16_18 * _ShadowTransitionSoftness;
    u_xlat18 = exp2(u_xlat18);
    u_xlat18 = min(u_xlat18, 1.0);
    u_xlat18 = (u_xlatb27) ? 1.0 : u_xlat18;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition));
#else
    u_xlatb27 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition);
#endif
    u_xlat18 = (u_xlatb27) ? u_xlat18 : 1.0;
    u_xlat18 = u_xlatb0.x ? u_xlat18 : float(0.0);
    u_xlat16_4.xyz = vec3(_FirstShadowMultColor.xxyz.y + (-_CoolShadowMultColor.x), _FirstShadowMultColor.xxyz.z + (-_CoolShadowMultColor.y), float(_FirstShadowMultColor.z) + (-_CoolShadowMultColor.z));
    u_xlat4.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_4.xyz + _CoolShadowMultColor.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex));
#else
    u_xlatb12 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex);
#endif
    u_xlat16_2.xyz = (bool(u_xlatb12)) ? u_xlat4.xyz : vec3(_FirstShadowMultColor.x, _FirstShadowMultColor.y, _FirstShadowMultColor.z);
    u_xlat16_4.xyz = u_xlat16_2.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat4.xyz = vec3(u_xlat18) * u_xlat16_4.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_5.xyz = (bool(u_xlatb27)) ? u_xlat4.xyz : u_xlat16_2.xyz;
    u_xlat16_6.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_6.xyz;
    u_xlat1.xyz = u_xlat16_6.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
    u_xlat0.xzw = (u_xlatb0.x) ? u_xlat16_5.xyz : u_xlat1.xyz;
    u_xlat16_5.xyz = u_xlat3.xzw + u_xlat0.xzw;
    u_xlat16_2.xyz = u_xlat16_6.xyz * u_xlat16_2.xyz + u_xlat3.xzw;
    u_xlat16_6.xyz = u_xlat16_6.xyz * _EmissionColor_MHY.xyz;
    u_xlat16_7.xyz = u_xlat16_6.xyz * vec3(vec3(_EmissionScaler, _EmissionScaler, _EmissionScaler)) + (-u_xlat16_5.xyz);
    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(vec3(_EmissionScaler, _EmissionScaler, _EmissionScaler)) + (-u_xlat16_2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(0.00999999978<u_xlat10_1.w);
#else
    u_xlatb0.x = 0.00999999978<u_xlat10_1.w;
#endif
    u_xlatb0.x = u_xlatb0.x && u_xlatb0.y;
    u_xlat16_29 = (u_xlatb0.x) ? u_xlat10_1.w : 0.0;
    u_xlat16_7.xyz = vec3(u_xlat16_29) * u_xlat16_7.xyz + u_xlat16_5.xyz;
    u_xlat16_5.xyz = (u_xlatb0.x) ? u_xlat16_7.xyz : u_xlat16_5.xyz;
    u_xlat9.xyz = u_xlat16_5.xyz * vec3(vec3(_ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness));
    u_xlat1.xyz = _ES_CharacterMainLightColor.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat1.xyz = vec3(vec3(_ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio)) * u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat9.xyz = u_xlat9.xyz * u_xlat1.xyz;
    u_xlat16_7.xyz = u_xlat9.xyz * vec3(10.0, 10.0, 10.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.xyz = min(max(u_xlat16_7.xyz, 0.0), 1.0);
#else
    u_xlat16_7.xyz = clamp(u_xlat16_7.xyz, 0.0, 1.0);
#endif
    u_xlat1.xyz = _ES_CharacterAmbientLightColor.xyz * vec3(_ES_CharacterAmbientLightRatio);
    u_xlat9.xyz = u_xlat1.xyz * u_xlat16_7.xyz + u_xlat9.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn));
#else
    u_xlatb1 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn);
#endif
    u_xlat16_7.xyz = (bool(u_xlatb1)) ? u_xlat9.xyz : u_xlat16_5.xyz;
    u_xlat16_8.xyz = u_xlat16_5.xyz + (-u_xlat16_7.xyz);
    u_xlat16_8.xyz = vec3(u_xlat16_29) * u_xlat16_8.xyz + u_xlat16_7.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(0.00999999978<u_xlat16_29);
#else
    u_xlatb9 = 0.00999999978<u_xlat16_29;
#endif
    u_xlat16_1.xyz = (bool(u_xlatb9)) ? u_xlat16_8.xyz : u_xlat16_7.xyz;
    u_xlat16_32 = max(u_xlat16_1.z, u_xlat16_1.y);
    u_xlat16_3.w = max(u_xlat16_1.x, u_xlat16_32);
    u_xlat16_3.xyz = u_xlat16_1.xyz / u_xlat16_3.www;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18.x = !!(1.0<u_xlat16_3.w);
#else
    u_xlatb18.x = 1.0<u_xlat16_3.w;
#endif
    u_xlat16_1.w = 1.0;
    u_xlat16_1 = (u_xlatb18.x) ? u_xlat16_3 : u_xlat16_1;
    u_xlat16_32 = min(u_xlat16_1.w, 1.10000002);
    u_xlat16_33 = u_xlat16_1.w + (-u_xlat16_32);
    SV_Target1.xyz = u_xlat16_1.xyz;
    u_xlat16_32 = u_xlat16_29 * u_xlat16_33 + u_xlat16_32;
    SV_Target1.w = u_xlat16_32 * 0.0500000007;
    u_xlat16_6.xyz = vec3(u_xlat16_29) * u_xlat16_6.xyz + u_xlat16_2.xyz;
    u_xlat16_2.xyz = (u_xlatb0.x) ? u_xlat16_6.xyz : u_xlat16_2.xyz;
    u_xlat16_5.xyz = (-u_xlat16_2.xyz) + u_xlat16_5.xyz;
    u_xlat16_5.xyz = vec3(u_xlat16_29) * u_xlat16_5.xyz + u_xlat16_2.xyz;
    u_xlat16_2.xyz = (bool(u_xlatb9)) ? u_xlat16_5.xyz : u_xlat16_2.xyz;
    SV_Target2.xy = u_xlat16_2.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_2.x = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb0.x) ? u_xlat16_2.x : u_xlat16_2.z;
    SV_Target2.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "MSAA_INTERPOLATION" "TOON_SPECULAR_ON" "TOON_LIGHTMAP_ON" "NORMAL_MAP_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
float u_xlat12;
void main()
{
    u_xlat0.x = hlslcc_mtx4x4unity_ObjectToWorld[0].y;
    u_xlat0.y = hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat0.z = hlslcc_mtx4x4unity_ObjectToWorld[2].y;
    u_xlat1.xyw = (-_WorldSpaceCameraPos.xyz) + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat0.w = u_xlat1.y;
    u_xlat2.xyz = in_POSITION0.xyz;
    u_xlat2.w = 1.0;
    u_xlat0.x = dot(u_xlat0, u_xlat2);
    u_xlat0 = u_xlat0.xxxx * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat3.w = u_xlat1.x;
    u_xlat3.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;
    u_xlat3.y = hlslcc_mtx4x4unity_ObjectToWorld[1].x;
    u_xlat3.z = hlslcc_mtx4x4unity_ObjectToWorld[2].x;
    u_xlat3.x = dot(u_xlat3, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat3.xxxx + u_xlat0;
    u_xlat1.x = hlslcc_mtx4x4unity_ObjectToWorld[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_ObjectToWorld[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_ObjectToWorld[2].z;
    u_xlat1.x = dot(u_xlat1, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat1.xxxx + u_xlat0;
    u_xlat1.x = hlslcc_mtx4x4unity_ObjectToWorld[0].w;
    u_xlat1.y = hlslcc_mtx4x4unity_ObjectToWorld[1].w;
    u_xlat1.z = hlslcc_mtx4x4unity_ObjectToWorld[2].w;
    u_xlat1.w = hlslcc_mtx4x4unity_ObjectToWorld[3].w;
    u_xlat1.x = dot(u_xlat1, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[3] * u_xlat1.xxxx + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD1 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.zw = u_xlat0.zw;
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD3.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
    u_xlat12 = in_TANGENT0.w * unity_WorldTransformParams.w;
    u_xlat2.xyz = vec3(u_xlat12) * u_xlat2.xyz;
    vs_TEXCOORD4.y = u_xlat2.x;
    vs_TEXCOORD4.x = u_xlat1.z;
    vs_TEXCOORD4.z = u_xlat0.y;
    vs_TEXCOORD5.x = u_xlat1.x;
    vs_TEXCOORD6.x = u_xlat1.y;
    vs_TEXCOORD5.z = u_xlat0.z;
    vs_TEXCOORD6.z = u_xlat0.x;
    vs_TEXCOORD5.y = u_xlat2.y;
    vs_TEXCOORD6.y = u_xlat2.z;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	mediump vec4 _Color;
uniform 	float _MainTexAlphaUse;
uniform 	mediump float _MainTexAlphaCutoff;
uniform 	mediump float _BumpScale;
uniform 	float _UseLightMapColorAO;
uniform 	float _UseVertexColorAO;
uniform 	mediump float _LightArea;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	float _UseCoolShadowColorOrTex;
uniform 	mediump vec3 _CoolShadowMultColor;
uniform 	float _UseShadowTransition;
uniform 	float _ShadowTransitionRange;
uniform 	float _ShadowTransitionSoftness;
uniform 	mediump vec3 _SpecularColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump float _EmissionScaler;
uniform 	mediump vec3 _EmissionColor_MHY;
uniform 	float _ES_CharacterAmbientLightOn;
uniform 	float _ES_CharacterAmbientBrightness;
uniform 	vec3 _ES_CharacterMainLightColor;
uniform 	float _ES_CharacterMainLightBrightness;
uniform 	vec3 _ES_CharacterAmbientLightColor;
uniform 	float _ES_CharacterMainLightRatio;
uniform 	float _ES_CharacterAmbientLightRatio;
uniform 	float _ES_CharacterColorTone;
uniform 	vec3 mhy_AvatarLightDir;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMapTex;
in mediump vec4 vs_COLOR0;
in highp vec2 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD5;
in highp vec3 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec3 u_xlat0;
mediump float u_xlat16_0;
lowp vec3 u_xlat10_0;
bvec3 u_xlatb0;
vec3 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
bool u_xlatb1;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump vec4 u_xlat16_3;
lowp vec4 u_xlat10_3;
bvec2 u_xlatb3;
vec3 u_xlat4;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
vec3 u_xlat9;
mediump float u_xlat16_9;
bool u_xlatb9;
mediump float u_xlat16_11;
vec2 u_xlat18;
bool u_xlatb18;
float u_xlat27;
mediump float u_xlat16_27;
bool u_xlatb27;
mediump float u_xlat16_29;
mediump float u_xlat16_32;
mediump float u_xlat16_33;
void main()
{
    u_xlat0.xy = dFdx(vs_TEXCOORD0.xy);
    u_xlat18.xy = dFdy(vs_TEXCOORD0.xy);
    u_xlat0.xy = u_xlat18.xy + u_xlat0.xy;
    u_xlat18.xy = (-u_xlat0.xy) * vec2(0.25, 0.25) + vs_TEXCOORD0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25) + vs_TEXCOORD0.xy;
    u_xlat0.xy = (int(gl_SampleID) != 0) ? u_xlat18.xy : u_xlat0.xy;
    u_xlat10_1 = textureLod(_MainTex, u_xlat0.xy, 0.0);
    u_xlat16_2.x = u_xlat10_1.w + (-_MainTexAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(u_xlat16_2.x<0.0);
#else
    u_xlatb18 = u_xlat16_2.x<0.0;
#endif
    u_xlatb3.xy = equal(vec4(_MainTexAlphaUse), vec4(1.0, 2.0, 0.0, 0.0)).xy;
    u_xlatb18 = u_xlatb18 && u_xlatb3.x;
    if((int(u_xlatb18) * int(0xffffffffu))!=0){discard;}
    u_xlat10_3.xzw = textureLod(_BumpMap, u_xlat0.xy, 0.0).xyz;
    u_xlat10_0.xyz = textureLod(_LightMapTex, u_xlat0.xy, 0.0).xyz;
    u_xlat16_2.xyz = u_xlat10_3.xzw * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_2.xy = u_xlat16_2.xy * vec2(vec2(_BumpScale, _BumpScale));
    u_xlat4.x = dot(vs_TEXCOORD4.xyz, u_xlat16_2.xyz);
    u_xlat4.y = dot(vs_TEXCOORD5.xyz, u_xlat16_2.xyz);
    u_xlat4.z = dot(vs_TEXCOORD6.xyz, u_xlat16_2.xyz);
    u_xlat16_2.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat16_2.x = inversesqrt(u_xlat16_2.x);
    u_xlat16_2.xyz = u_xlat16_2.xxx * u_xlat4.xyz;
    SV_Target0.xyz = u_xlat16_2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0470588244;
    u_xlat3.xzw = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat27 = dot(u_xlat3.xzw, u_xlat3.xzw);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat3.xzw = u_xlat3.xzw * vec3(u_xlat27) + mhy_AvatarLightDir.xyz;
    u_xlat27 = dot(u_xlat3.xzw, u_xlat3.xzw);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat3.xzw = vec3(u_xlat27) * u_xlat3.xzw;
    u_xlat16_29 = dot(u_xlat16_2.xyz, u_xlat3.xzw);
    u_xlat16_2.x = dot(u_xlat16_2.xyz, mhy_AvatarLightDir.xyz);
    u_xlat16_27 = u_xlat16_2.x * 0.497500002 + 0.5;
    u_xlat16_2.x = max(u_xlat16_29, 0.00100000005);
    u_xlat16_2.x = log2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * _Shininess;
    u_xlat16_2.x = exp2(u_xlat16_2.x);
    u_xlat18.x = (-u_xlat10_0.z) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(u_xlat18.x<u_xlat16_2.x);
#else
    u_xlatb18 = u_xlat18.x<u_xlat16_2.x;
#endif
    u_xlat16_2.xyz = _SpecularColor.xyz * vec3(_SpecMulti);
    u_xlat16_2.xyz = u_xlat10_0.xxx * u_xlat16_2.xyz;
    u_xlat3.xzw = u_xlat16_2.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
    u_xlat3.xzw = mix(vec3(0.0, 0.0, 0.0), u_xlat3.xzw, vec3(bvec3(u_xlatb18)));
    u_xlatb0.xz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseLightMapColorAO, _UseLightMapColorAO, _UseVertexColorAO, _UseLightMapColorAO)).xz;
    u_xlat16_2.x = (u_xlatb0.x) ? u_xlat10_0.y : 0.5;
    u_xlat16_11 = u_xlat16_2.x * vs_COLOR0.x;
    u_xlat16_2.x = (u_xlatb0.z) ? u_xlat16_11 : u_xlat16_2.x;
    u_xlat16_0 = u_xlat16_27 + u_xlat16_2.x;
    u_xlat0.x = u_xlat16_0 * 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(0.949999988<u_xlat16_2.x);
#else
    u_xlatb9 = 0.949999988<u_xlat16_2.x;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(u_xlat16_2.x<0.0500000007);
#else
    u_xlatb18 = u_xlat16_2.x<0.0500000007;
#endif
    u_xlat16_2.x = (u_xlatb9) ? 1.0 : u_xlat0.x;
    u_xlat16_2.x = (u_xlatb18) ? 0.0 : u_xlat16_2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(u_xlat16_2.x<_LightArea);
#else
    u_xlatb0.x = u_xlat16_2.x<_LightArea;
#endif
    u_xlat16_2.x = (-u_xlat16_2.x) + _LightArea;
    u_xlat16_2.x = u_xlat16_2.x / _ShadowTransitionRange;
    u_xlat16_9 = u_xlat16_2.x + 0.00999999978;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(u_xlat16_2.x>=1.0);
#else
    u_xlatb18 = u_xlat16_2.x>=1.0;
#endif
    u_xlat16_9 = log2(u_xlat16_9);
    u_xlat9.x = u_xlat16_9 * _ShadowTransitionSoftness;
    u_xlat9.x = exp2(u_xlat9.x);
    u_xlat9.x = min(u_xlat9.x, 1.0);
    u_xlat9.x = (u_xlatb18) ? 1.0 : u_xlat9.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition));
#else
    u_xlatb18 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition);
#endif
    u_xlat9.x = (u_xlatb18) ? u_xlat9.x : 1.0;
    u_xlat9.x = u_xlatb0.x ? u_xlat9.x : float(0.0);
    u_xlat16_4.xyz = vec3(_FirstShadowMultColor.xxyz.y + (-_CoolShadowMultColor.x), _FirstShadowMultColor.xxyz.z + (-_CoolShadowMultColor.y), float(_FirstShadowMultColor.z) + (-_CoolShadowMultColor.z));
    u_xlat4.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_4.xyz + _CoolShadowMultColor.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex));
#else
    u_xlatb27 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex);
#endif
    u_xlat16_2.xyz = (bool(u_xlatb27)) ? u_xlat4.xyz : vec3(_FirstShadowMultColor.x, _FirstShadowMultColor.y, _FirstShadowMultColor.z);
    u_xlat16_4.xyz = u_xlat16_2.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat4.xyz = u_xlat9.xxx * u_xlat16_4.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_5.xyz = (bool(u_xlatb18)) ? u_xlat4.xyz : u_xlat16_2.xyz;
    u_xlat16_6.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_6.xyz;
    u_xlat9.xyz = u_xlat16_6.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
    u_xlat0.xyz = (u_xlatb0.x) ? u_xlat16_5.xyz : u_xlat9.xyz;
    u_xlat16_5.xyz = u_xlat3.xzw + u_xlat0.xyz;
    u_xlat16_2.xyz = u_xlat16_6.xyz * u_xlat16_2.xyz + u_xlat3.xzw;
    u_xlat16_6.xyz = u_xlat16_6.xyz * _EmissionColor_MHY.xyz;
    u_xlat16_7.xyz = u_xlat16_6.xyz * vec3(vec3(_EmissionScaler, _EmissionScaler, _EmissionScaler)) + (-u_xlat16_5.xyz);
    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(vec3(_EmissionScaler, _EmissionScaler, _EmissionScaler)) + (-u_xlat16_2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(0.00999999978<u_xlat10_1.w);
#else
    u_xlatb0.x = 0.00999999978<u_xlat10_1.w;
#endif
    u_xlatb0.x = u_xlatb0.x && u_xlatb3.y;
    u_xlat16_29 = (u_xlatb0.x) ? u_xlat10_1.w : 0.0;
    u_xlat16_7.xyz = vec3(u_xlat16_29) * u_xlat16_7.xyz + u_xlat16_5.xyz;
    u_xlat16_5.xyz = (u_xlatb0.x) ? u_xlat16_7.xyz : u_xlat16_5.xyz;
    u_xlat9.xyz = u_xlat16_5.xyz * vec3(vec3(_ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness));
    u_xlat1.xyz = _ES_CharacterMainLightColor.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat1.xyz = vec3(vec3(_ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio)) * u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat9.xyz = u_xlat9.xyz * u_xlat1.xyz;
    u_xlat16_7.xyz = u_xlat9.xyz * vec3(10.0, 10.0, 10.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.xyz = min(max(u_xlat16_7.xyz, 0.0), 1.0);
#else
    u_xlat16_7.xyz = clamp(u_xlat16_7.xyz, 0.0, 1.0);
#endif
    u_xlat1.xyz = _ES_CharacterAmbientLightColor.xyz * vec3(_ES_CharacterAmbientLightRatio);
    u_xlat9.xyz = u_xlat1.xyz * u_xlat16_7.xyz + u_xlat9.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn));
#else
    u_xlatb1 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn);
#endif
    u_xlat16_7.xyz = (bool(u_xlatb1)) ? u_xlat9.xyz : u_xlat16_5.xyz;
    u_xlat16_8.xyz = u_xlat16_5.xyz + (-u_xlat16_7.xyz);
    u_xlat16_8.xyz = vec3(u_xlat16_29) * u_xlat16_8.xyz + u_xlat16_7.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(0.00999999978<u_xlat16_29);
#else
    u_xlatb9 = 0.00999999978<u_xlat16_29;
#endif
    u_xlat16_1.xyz = (bool(u_xlatb9)) ? u_xlat16_8.xyz : u_xlat16_7.xyz;
    u_xlat16_32 = max(u_xlat16_1.z, u_xlat16_1.y);
    u_xlat16_3.w = max(u_xlat16_1.x, u_xlat16_32);
    u_xlat16_3.xyz = u_xlat16_1.xyz / u_xlat16_3.www;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(1.0<u_xlat16_3.w);
#else
    u_xlatb18 = 1.0<u_xlat16_3.w;
#endif
    u_xlat16_1.w = 1.0;
    u_xlat16_1 = (bool(u_xlatb18)) ? u_xlat16_3 : u_xlat16_1;
    u_xlat16_32 = min(u_xlat16_1.w, 1.10000002);
    u_xlat16_33 = u_xlat16_1.w + (-u_xlat16_32);
    SV_Target1.xyz = u_xlat16_1.xyz;
    u_xlat16_32 = u_xlat16_29 * u_xlat16_33 + u_xlat16_32;
    SV_Target1.w = u_xlat16_32 * 0.0500000007;
    u_xlat16_6.xyz = vec3(u_xlat16_29) * u_xlat16_6.xyz + u_xlat16_2.xyz;
    u_xlat16_2.xyz = (u_xlatb0.x) ? u_xlat16_6.xyz : u_xlat16_2.xyz;
    u_xlat16_5.xyz = (-u_xlat16_2.xyz) + u_xlat16_5.xyz;
    u_xlat16_5.xyz = vec3(u_xlat16_29) * u_xlat16_5.xyz + u_xlat16_2.xyz;
    u_xlat16_2.xyz = (bool(u_xlatb9)) ? u_xlat16_5.xyz : u_xlat16_2.xyz;
    SV_Target2.xy = u_xlat16_2.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_2.x = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb0.x) ? u_xlat16_2.x : u_xlat16_2.z;
    SV_Target2.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "LINE_INTERPOLATION" "TOON_SPECULAR_ON" "TOON_LIGHTMAP_ON" "NORMAL_MAP_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
float u_xlat12;
void main()
{
    u_xlat0.x = hlslcc_mtx4x4unity_ObjectToWorld[0].y;
    u_xlat0.y = hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat0.z = hlslcc_mtx4x4unity_ObjectToWorld[2].y;
    u_xlat1.xyw = (-_WorldSpaceCameraPos.xyz) + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat0.w = u_xlat1.y;
    u_xlat2.xyz = in_POSITION0.xyz;
    u_xlat2.w = 1.0;
    u_xlat0.x = dot(u_xlat0, u_xlat2);
    u_xlat0 = u_xlat0.xxxx * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat3.w = u_xlat1.x;
    u_xlat3.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;
    u_xlat3.y = hlslcc_mtx4x4unity_ObjectToWorld[1].x;
    u_xlat3.z = hlslcc_mtx4x4unity_ObjectToWorld[2].x;
    u_xlat3.x = dot(u_xlat3, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat3.xxxx + u_xlat0;
    u_xlat1.x = hlslcc_mtx4x4unity_ObjectToWorld[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_ObjectToWorld[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_ObjectToWorld[2].z;
    u_xlat1.x = dot(u_xlat1, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat1.xxxx + u_xlat0;
    u_xlat1.x = hlslcc_mtx4x4unity_ObjectToWorld[0].w;
    u_xlat1.y = hlslcc_mtx4x4unity_ObjectToWorld[1].w;
    u_xlat1.z = hlslcc_mtx4x4unity_ObjectToWorld[2].w;
    u_xlat1.w = hlslcc_mtx4x4unity_ObjectToWorld[3].w;
    u_xlat1.x = dot(u_xlat1, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[3] * u_xlat1.xxxx + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD1 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.zw = u_xlat0.zw;
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD3.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
    u_xlat12 = in_TANGENT0.w * unity_WorldTransformParams.w;
    u_xlat2.xyz = vec3(u_xlat12) * u_xlat2.xyz;
    vs_TEXCOORD4.y = u_xlat2.x;
    vs_TEXCOORD4.x = u_xlat1.z;
    vs_TEXCOORD4.z = u_xlat0.y;
    vs_TEXCOORD5.x = u_xlat1.x;
    vs_TEXCOORD6.x = u_xlat1.y;
    vs_TEXCOORD5.z = u_xlat0.z;
    vs_TEXCOORD6.z = u_xlat0.x;
    vs_TEXCOORD5.y = u_xlat2.y;
    vs_TEXCOORD6.y = u_xlat2.z;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	mediump vec4 _Color;
uniform 	float _MainTexAlphaUse;
uniform 	mediump float _MainTexAlphaCutoff;
uniform 	mediump float _BumpScale;
uniform 	float _UseLightMapColorAO;
uniform 	float _UseVertexColorAO;
uniform 	mediump float _LightArea;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	float _UseCoolShadowColorOrTex;
uniform 	mediump vec3 _CoolShadowMultColor;
uniform 	float _UseShadowTransition;
uniform 	float _ShadowTransitionRange;
uniform 	float _ShadowTransitionSoftness;
uniform 	mediump vec3 _SpecularColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump float _EmissionScaler;
uniform 	mediump vec3 _EmissionColor_MHY;
uniform 	float _ES_CharacterAmbientLightOn;
uniform 	float _ES_CharacterAmbientBrightness;
uniform 	vec3 _ES_CharacterMainLightColor;
uniform 	float _ES_CharacterMainLightBrightness;
uniform 	vec3 _ES_CharacterAmbientLightColor;
uniform 	float _ES_CharacterMainLightRatio;
uniform 	float _ES_CharacterAmbientLightRatio;
uniform 	float _ES_CharacterColorTone;
uniform 	vec3 mhy_AvatarLightDir;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMapTex;
in mediump vec4 vs_COLOR0;
in highp vec2 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD5;
in highp vec3 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec4 u_xlat0;
mediump float u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
vec3 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
bool u_xlatb1;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump vec4 u_xlat16_3;
lowp vec3 u_xlat10_3;
vec3 u_xlat4;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
vec3 u_xlat9;
bool u_xlatb9;
mediump float u_xlat16_11;
bool u_xlatb12;
float u_xlat18;
mediump float u_xlat16_18;
bvec2 u_xlatb18;
bool u_xlatb27;
mediump float u_xlat16_29;
mediump float u_xlat16_32;
mediump float u_xlat16_33;
void main()
{
    u_xlatb0.xy = equal(vec4(_MainTexAlphaUse), vec4(1.0, 2.0, 0.0, 0.0)).xy;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy, -1.0);
    u_xlat16_2.x = u_xlat10_1.w + (-_MainTexAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb18.x = !!(u_xlat16_2.x<0.0);
#else
    u_xlatb18.x = u_xlat16_2.x<0.0;
#endif
    u_xlatb0.x = u_xlatb0.x && u_xlatb18.x;
    if((int(u_xlatb0.x) * int(0xffffffffu))!=0){discard;}
    u_xlat10_0.xzw = texture(_BumpMap, vs_TEXCOORD0.xy, -1.0).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xzw * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_2.xy = u_xlat16_2.xy * vec2(vec2(_BumpScale, _BumpScale));
    u_xlat3.x = dot(vs_TEXCOORD4.xyz, u_xlat16_2.xyz);
    u_xlat3.y = dot(vs_TEXCOORD5.xyz, u_xlat16_2.xyz);
    u_xlat3.z = dot(vs_TEXCOORD6.xyz, u_xlat16_2.xyz);
    u_xlat16_2.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat16_2.x = inversesqrt(u_xlat16_2.x);
    u_xlat16_2.xyz = u_xlat16_2.xxx * u_xlat3.xyz;
    SV_Target0.xyz = u_xlat16_2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0470588244;
    u_xlat0.xzw = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat0.xzw = u_xlat0.xzw * u_xlat3.xxx + mhy_AvatarLightDir.xyz;
    u_xlat3.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat0.xzw = u_xlat0.xzw * u_xlat3.xxx;
    u_xlat16_29 = dot(u_xlat16_2.xyz, u_xlat0.xzw);
    u_xlat16_2.x = dot(u_xlat16_2.xyz, mhy_AvatarLightDir.xyz);
    u_xlat16_0 = u_xlat16_2.x * 0.497500002 + 0.5;
    u_xlat16_2.x = max(u_xlat16_29, 0.00100000005);
    u_xlat16_2.x = log2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * _Shininess;
    u_xlat16_2.x = exp2(u_xlat16_2.x);
    u_xlat10_3.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy, -1.0).xyz;
    u_xlat18 = (-u_xlat10_3.z) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18.x = !!(u_xlat18<u_xlat16_2.x);
#else
    u_xlatb18.x = u_xlat18<u_xlat16_2.x;
#endif
    u_xlat16_2.xyz = _SpecularColor.xyz * vec3(_SpecMulti);
    u_xlat16_2.xyz = u_xlat10_3.xxx * u_xlat16_2.xyz;
    u_xlat3.xzw = u_xlat16_2.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
    u_xlat3.xzw = mix(vec3(0.0, 0.0, 0.0), u_xlat3.xzw, vec3(u_xlatb18.xxx));
    u_xlatb18.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseLightMapColorAO, _UseVertexColorAO, _UseLightMapColorAO, _UseVertexColorAO)).xy;
    u_xlat16_2.x = (u_xlatb18.x) ? u_xlat10_3.y : 0.5;
    u_xlat16_11 = u_xlat16_2.x * vs_COLOR0.x;
    u_xlat16_2.x = (u_xlatb18.y) ? u_xlat16_11 : u_xlat16_2.x;
    u_xlat16_0 = u_xlat16_0 + u_xlat16_2.x;
    u_xlat0.x = u_xlat16_0 * 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18.x = !!(0.949999988<u_xlat16_2.x);
#else
    u_xlatb18.x = 0.949999988<u_xlat16_2.x;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(u_xlat16_2.x<0.0500000007);
#else
    u_xlatb27 = u_xlat16_2.x<0.0500000007;
#endif
    u_xlat16_2.x = (u_xlatb18.x) ? 1.0 : u_xlat0.x;
    u_xlat16_2.x = (u_xlatb27) ? 0.0 : u_xlat16_2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(u_xlat16_2.x<_LightArea);
#else
    u_xlatb0.x = u_xlat16_2.x<_LightArea;
#endif
    u_xlat16_2.x = (-u_xlat16_2.x) + _LightArea;
    u_xlat16_2.x = u_xlat16_2.x / _ShadowTransitionRange;
    u_xlat16_18 = u_xlat16_2.x + 0.00999999978;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(u_xlat16_2.x>=1.0);
#else
    u_xlatb27 = u_xlat16_2.x>=1.0;
#endif
    u_xlat16_18 = log2(u_xlat16_18);
    u_xlat18 = u_xlat16_18 * _ShadowTransitionSoftness;
    u_xlat18 = exp2(u_xlat18);
    u_xlat18 = min(u_xlat18, 1.0);
    u_xlat18 = (u_xlatb27) ? 1.0 : u_xlat18;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition));
#else
    u_xlatb27 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition);
#endif
    u_xlat18 = (u_xlatb27) ? u_xlat18 : 1.0;
    u_xlat18 = u_xlatb0.x ? u_xlat18 : float(0.0);
    u_xlat16_4.xyz = vec3(_FirstShadowMultColor.xxyz.y + (-_CoolShadowMultColor.x), _FirstShadowMultColor.xxyz.z + (-_CoolShadowMultColor.y), float(_FirstShadowMultColor.z) + (-_CoolShadowMultColor.z));
    u_xlat4.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_4.xyz + _CoolShadowMultColor.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex));
#else
    u_xlatb12 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex);
#endif
    u_xlat16_2.xyz = (bool(u_xlatb12)) ? u_xlat4.xyz : vec3(_FirstShadowMultColor.x, _FirstShadowMultColor.y, _FirstShadowMultColor.z);
    u_xlat16_4.xyz = u_xlat16_2.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat4.xyz = vec3(u_xlat18) * u_xlat16_4.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_5.xyz = (bool(u_xlatb27)) ? u_xlat4.xyz : u_xlat16_2.xyz;
    u_xlat16_6.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_6.xyz;
    u_xlat1.xyz = u_xlat16_6.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
    u_xlat0.xzw = (u_xlatb0.x) ? u_xlat16_5.xyz : u_xlat1.xyz;
    u_xlat16_5.xyz = u_xlat3.xzw + u_xlat0.xzw;
    u_xlat16_2.xyz = u_xlat16_6.xyz * u_xlat16_2.xyz + u_xlat3.xzw;
    u_xlat16_6.xyz = u_xlat16_6.xyz * _EmissionColor_MHY.xyz;
    u_xlat16_7.xyz = u_xlat16_6.xyz * vec3(vec3(_EmissionScaler, _EmissionScaler, _EmissionScaler)) + (-u_xlat16_5.xyz);
    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(vec3(_EmissionScaler, _EmissionScaler, _EmissionScaler)) + (-u_xlat16_2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(0.00999999978<u_xlat10_1.w);
#else
    u_xlatb0.x = 0.00999999978<u_xlat10_1.w;
#endif
    u_xlatb0.x = u_xlatb0.x && u_xlatb0.y;
    u_xlat16_29 = (u_xlatb0.x) ? u_xlat10_1.w : 0.0;
    u_xlat16_7.xyz = vec3(u_xlat16_29) * u_xlat16_7.xyz + u_xlat16_5.xyz;
    u_xlat16_5.xyz = (u_xlatb0.x) ? u_xlat16_7.xyz : u_xlat16_5.xyz;
    u_xlat9.xyz = u_xlat16_5.xyz * vec3(vec3(_ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness));
    u_xlat1.xyz = _ES_CharacterMainLightColor.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat1.xyz = vec3(vec3(_ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio)) * u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat9.xyz = u_xlat9.xyz * u_xlat1.xyz;
    u_xlat16_7.xyz = u_xlat9.xyz * vec3(10.0, 10.0, 10.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.xyz = min(max(u_xlat16_7.xyz, 0.0), 1.0);
#else
    u_xlat16_7.xyz = clamp(u_xlat16_7.xyz, 0.0, 1.0);
#endif
    u_xlat1.xyz = _ES_CharacterAmbientLightColor.xyz * vec3(_ES_CharacterAmbientLightRatio);
    u_xlat9.xyz = u_xlat1.xyz * u_xlat16_7.xyz + u_xlat9.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn));
#else
    u_xlatb1 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn);
#endif
    u_xlat16_7.xyz = (bool(u_xlatb1)) ? u_xlat9.xyz : u_xlat16_5.xyz;
    u_xlat16_8.xyz = u_xlat16_5.xyz + (-u_xlat16_7.xyz);
    u_xlat16_8.xyz = vec3(u_xlat16_29) * u_xlat16_8.xyz + u_xlat16_7.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(0.00999999978<u_xlat16_29);
#else
    u_xlatb9 = 0.00999999978<u_xlat16_29;
#endif
    u_xlat16_1.xyz = (bool(u_xlatb9)) ? u_xlat16_8.xyz : u_xlat16_7.xyz;
    u_xlat16_32 = max(u_xlat16_1.z, u_xlat16_1.y);
    u_xlat16_3.w = max(u_xlat16_1.x, u_xlat16_32);
    u_xlat16_3.xyz = u_xlat16_1.xyz / u_xlat16_3.www;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18.x = !!(1.0<u_xlat16_3.w);
#else
    u_xlatb18.x = 1.0<u_xlat16_3.w;
#endif
    u_xlat16_1.w = 1.0;
    u_xlat16_1 = (u_xlatb18.x) ? u_xlat16_3 : u_xlat16_1;
    u_xlat16_32 = min(u_xlat16_1.w, 1.10000002);
    u_xlat16_33 = u_xlat16_1.w + (-u_xlat16_32);
    SV_Target1.xyz = u_xlat16_1.xyz;
    u_xlat16_32 = u_xlat16_29 * u_xlat16_33 + u_xlat16_32;
    SV_Target1.w = u_xlat16_32 * 0.0500000007;
    u_xlat16_6.xyz = vec3(u_xlat16_29) * u_xlat16_6.xyz + u_xlat16_2.xyz;
    u_xlat16_2.xyz = (u_xlatb0.x) ? u_xlat16_6.xyz : u_xlat16_2.xyz;
    u_xlat16_5.xyz = (-u_xlat16_2.xyz) + u_xlat16_5.xyz;
    u_xlat16_5.xyz = vec3(u_xlat16_29) * u_xlat16_5.xyz + u_xlat16_2.xyz;
    u_xlat16_2.xyz = (bool(u_xlatb9)) ? u_xlat16_5.xyz : u_xlat16_2.xyz;
    SV_Target2.xy = u_xlat16_2.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_2.x = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb0.x) ? u_xlat16_2.x : u_xlat16_2.z;
    SV_Target2.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "TOON_SPECULAR_ON" "TOON_LIGHTMAP_ON" "METAL_MAT" "NORMAL_MAP_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
float u_xlat12;
void main()
{
    u_xlat0.x = hlslcc_mtx4x4unity_ObjectToWorld[0].y;
    u_xlat0.y = hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat0.z = hlslcc_mtx4x4unity_ObjectToWorld[2].y;
    u_xlat1.xyw = (-_WorldSpaceCameraPos.xyz) + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat0.w = u_xlat1.y;
    u_xlat2.xyz = in_POSITION0.xyz;
    u_xlat2.w = 1.0;
    u_xlat0.x = dot(u_xlat0, u_xlat2);
    u_xlat0 = u_xlat0.xxxx * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat3.w = u_xlat1.x;
    u_xlat3.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;
    u_xlat3.y = hlslcc_mtx4x4unity_ObjectToWorld[1].x;
    u_xlat3.z = hlslcc_mtx4x4unity_ObjectToWorld[2].x;
    u_xlat3.x = dot(u_xlat3, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat3.xxxx + u_xlat0;
    u_xlat1.x = hlslcc_mtx4x4unity_ObjectToWorld[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_ObjectToWorld[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_ObjectToWorld[2].z;
    u_xlat1.x = dot(u_xlat1, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat1.xxxx + u_xlat0;
    u_xlat1.x = hlslcc_mtx4x4unity_ObjectToWorld[0].w;
    u_xlat1.y = hlslcc_mtx4x4unity_ObjectToWorld[1].w;
    u_xlat1.z = hlslcc_mtx4x4unity_ObjectToWorld[2].w;
    u_xlat1.w = hlslcc_mtx4x4unity_ObjectToWorld[3].w;
    u_xlat1.x = dot(u_xlat1, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[3] * u_xlat1.xxxx + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD1 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.zw = u_xlat0.zw;
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD3.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
    u_xlat12 = in_TANGENT0.w * unity_WorldTransformParams.w;
    u_xlat2.xyz = vec3(u_xlat12) * u_xlat2.xyz;
    vs_TEXCOORD4.y = u_xlat2.x;
    vs_TEXCOORD4.x = u_xlat1.z;
    vs_TEXCOORD4.z = u_xlat0.y;
    vs_TEXCOORD5.x = u_xlat1.x;
    vs_TEXCOORD6.x = u_xlat1.y;
    vs_TEXCOORD5.z = u_xlat0.z;
    vs_TEXCOORD6.z = u_xlat0.x;
    vs_TEXCOORD5.y = u_xlat2.y;
    vs_TEXCOORD6.y = u_xlat2.z;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToCamera[4];
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	mediump vec4 _Color;
uniform 	float _MainTexAlphaUse;
uniform 	mediump float _MainTexAlphaCutoff;
uniform 	mediump float _BumpScale;
uniform 	float _UseLightMapColorAO;
uniform 	float _UseVertexColorAO;
uniform 	mediump float _LightArea;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	float _UseCoolShadowColorOrTex;
uniform 	mediump vec3 _CoolShadowMultColor;
uniform 	float _UseShadowTransition;
uniform 	float _ShadowTransitionRange;
uniform 	float _ShadowTransitionSoftness;
uniform 	mediump vec3 _SpecularColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump float _EmissionScaler;
uniform 	mediump vec3 _EmissionColor_MHY;
uniform 	mediump float _MTMapBrightness;
uniform 	float _MTMapTileScale;
uniform 	mediump vec3 _MTMapLightColor;
uniform 	mediump vec3 _MTMapDarkColor;
uniform 	mediump vec3 _MTShadowMultiColor;
uniform 	mediump float _MTShininess;
uniform 	mediump vec3 _MTSpecularColor;
uniform 	mediump float _MTSpecularScale;
uniform 	float _ES_CharacterAmbientLightOn;
uniform 	float _ES_CharacterAmbientBrightness;
uniform 	vec3 _ES_CharacterMainLightColor;
uniform 	float _ES_CharacterMainLightBrightness;
uniform 	vec3 _ES_CharacterAmbientLightColor;
uniform 	float _ES_CharacterMainLightRatio;
uniform 	float _ES_CharacterAmbientLightRatio;
uniform 	float _ES_CharacterColorTone;
uniform 	vec3 mhy_AvatarLightDir;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MTMap;
in mediump vec4 vs_COLOR0;
in highp vec2 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD5;
in highp vec3 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec3 u_xlat10_0;
mediump vec3 u_xlat16_1;
float u_xlat2;
mediump vec4 u_xlat16_2;
lowp vec4 u_xlat10_2;
bool u_xlatb2;
vec3 u_xlat3;
lowp vec4 u_xlat10_3;
bvec2 u_xlatb3;
vec3 u_xlat4;
mediump vec3 u_xlat16_4;
bvec2 u_xlatb4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
vec3 u_xlat10;
mediump vec3 u_xlat16_10;
vec3 u_xlat11;
mediump vec3 u_xlat16_11;
vec3 u_xlat14;
bool u_xlatb14;
vec2 u_xlat15;
float u_xlat26;
bool u_xlatb26;
float u_xlat36;
bool u_xlatb36;
mediump float u_xlat16_37;
float u_xlat38;
mediump float u_xlat16_38;
lowp float u_xlat10_38;
bool u_xlatb38;
mediump float u_xlat16_41;
void main()
{
    u_xlat10_0.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_1.xy = u_xlat16_1.xy * vec2(vec2(_BumpScale, _BumpScale));
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, u_xlat16_1.xyz);
    u_xlat0.y = dot(vs_TEXCOORD5.xyz, u_xlat16_1.xyz);
    u_xlat0.z = dot(vs_TEXCOORD6.xyz, u_xlat16_1.xyz);
    u_xlat16_1.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat16_1.x = inversesqrt(u_xlat16_1.x);
    u_xlat16_1.xyz = u_xlat0.xyz * u_xlat16_1.xxx;
    u_xlat0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat36 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat36 = inversesqrt(u_xlat36);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat36) + mhy_AvatarLightDir.xyz;
    u_xlat36 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat36 = inversesqrt(u_xlat36);
    u_xlat0.xyz = vec3(u_xlat36) * u_xlat0.xyz;
    u_xlat10_2 = texture(_MainTex, vs_TEXCOORD0.xy, -1.0);
    u_xlatb3.xy = equal(vec4(_MainTexAlphaUse), vec4(1.0, 2.0, 0.0, 0.0)).xy;
    u_xlat16_37 = u_xlat10_2.w + (-_MainTexAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb36 = !!(u_xlat16_37<0.0);
#else
    u_xlatb36 = u_xlat16_37<0.0;
#endif
    u_xlatb36 = u_xlatb3.x && u_xlatb36;
    if((int(u_xlatb36) * int(0xffffffffu))!=0){discard;}
    u_xlat10_3.xzw = texture(_LightMapTex, vs_TEXCOORD0.xy, -1.0).xyz;
    u_xlatb4.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseLightMapColorAO, _UseVertexColorAO, _UseLightMapColorAO, _UseLightMapColorAO)).xy;
    u_xlat16_37 = (u_xlatb4.x) ? u_xlat10_3.z : 0.5;
    u_xlat16_5.xyz = u_xlat10_2.xyz * _Color.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb36 = !!(0.00999999978<u_xlat10_2.w);
#else
    u_xlatb36 = 0.00999999978<u_xlat10_2.w;
#endif
    u_xlatb36 = u_xlatb36 && u_xlatb3.y;
    u_xlat16_41 = (u_xlatb36) ? u_xlat10_2.w : 0.0;
    u_xlat16_6.x = dot(u_xlat16_1.xyz, mhy_AvatarLightDir.xyz);
    u_xlat16_2.x = u_xlat16_6.x * 0.497500002 + 0.5;
    u_xlat16_6.x = u_xlat16_37 * vs_COLOR0.x;
    u_xlat16_37 = (u_xlatb4.y) ? u_xlat16_6.x : u_xlat16_37;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(u_xlat16_37<0.0500000007);
#else
    u_xlatb14 = u_xlat16_37<0.0500000007;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb26 = !!(0.949999988<u_xlat16_37);
#else
    u_xlatb26 = 0.949999988<u_xlat16_37;
#endif
    u_xlat16_2.x = u_xlat16_37 + u_xlat16_2.x;
    u_xlat2 = u_xlat16_2.x * 0.5;
    u_xlat16_37 = (u_xlatb26) ? 1.0 : u_xlat2;
    u_xlat16_37 = (u_xlatb14) ? 0.0 : u_xlat16_37;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat16_37<_LightArea);
#else
    u_xlatb2 = u_xlat16_37<_LightArea;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition));
#else
    u_xlatb14 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition);
#endif
    u_xlat16_37 = (-u_xlat16_37) + _LightArea;
    u_xlat16_37 = u_xlat16_37 / _ShadowTransitionRange;
#ifdef UNITY_ADRENO_ES3
    u_xlatb26 = !!(u_xlat16_37>=1.0);
#else
    u_xlatb26 = u_xlat16_37>=1.0;
#endif
    u_xlat16_38 = u_xlat16_37 + 0.00999999978;
    u_xlat16_38 = log2(u_xlat16_38);
    u_xlat38 = u_xlat16_38 * _ShadowTransitionSoftness;
    u_xlat38 = exp2(u_xlat38);
    u_xlat38 = min(u_xlat38, 1.0);
    u_xlat26 = (u_xlatb26) ? 1.0 : u_xlat38;
    u_xlat26 = (u_xlatb14) ? u_xlat26 : 1.0;
    u_xlat26 = u_xlatb2 ? u_xlat26 : float(0.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb38 = !!(0.899999976<u_xlat10_3.x);
#else
    u_xlatb38 = 0.899999976<u_xlat10_3.x;
#endif
    if(u_xlatb38){
        u_xlat15.xy = u_xlat16_1.yy * hlslcc_mtx4x4unity_WorldToCamera[1].xy;
        u_xlat15.xy = hlslcc_mtx4x4unity_WorldToCamera[0].xy * u_xlat16_1.xx + u_xlat15.xy;
        u_xlat4.yz = hlslcc_mtx4x4unity_WorldToCamera[2].xy * u_xlat16_1.zz + u_xlat15.xy;
        u_xlat4.x = u_xlat4.y * _MTMapTileScale;
        u_xlat16_6.xy = u_xlat4.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
        u_xlat10_38 = texture(_MTMap, u_xlat16_6.xy).x;
        u_xlat16_37 = u_xlat10_38 * _MTMapBrightness;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_37 = min(max(u_xlat16_37, 0.0), 1.0);
#else
        u_xlat16_37 = clamp(u_xlat16_37, 0.0, 1.0);
#endif
        u_xlat16_6.xyz = _MTMapLightColor.xyz + (-_MTMapDarkColor.xyz);
        u_xlat16_6.xyz = vec3(u_xlat16_37) * u_xlat16_6.xyz + _MTMapDarkColor.xyz;
        u_xlat16_6.xyz = u_xlat16_5.xyz * u_xlat16_6.xyz;
        u_xlat16_37 = dot(u_xlat16_1.xyz, u_xlat0.xyz);
        u_xlat16_37 = max(u_xlat16_37, 0.00100000005);
        u_xlat16_37 = log2(u_xlat16_37);
        u_xlat16_37 = u_xlat16_37 * _MTShininess;
        u_xlat16_37 = exp2(u_xlat16_37);
        u_xlat16_37 = u_xlat16_37 * _MTSpecularScale;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_37 = min(max(u_xlat16_37, 0.0), 1.0);
#else
        u_xlat16_37 = clamp(u_xlat16_37, 0.0, 1.0);
#endif
        u_xlat16_7.xyz = vec3(u_xlat16_37) * _MTSpecularColor.xyz;
        u_xlat16_7.xyz = u_xlat10_3.www * u_xlat16_7.xyz;
        u_xlat16_8.xyz = u_xlat16_6.xyz * _MTShadowMultiColor.xyz;
        u_xlat16_4.xyz = _MTShadowMultiColor.xyz + vec3(-1.0, -1.0, -1.0);
        u_xlat4.xyz = vec3(u_xlat26) * u_xlat16_4.xyz + vec3(1.0, 1.0, 1.0);
        u_xlat16_9.xyz = (bool(u_xlatb14)) ? u_xlat4.xyz : _MTShadowMultiColor.xyz;
        u_xlat16_9.xyz = u_xlat16_6.xyz * u_xlat16_9.xyz;
        u_xlat4.xyz = u_xlat16_6.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
        u_xlat4.xyz = (bool(u_xlatb2)) ? u_xlat16_9.xyz : u_xlat4.xyz;
        u_xlat10.xyz = u_xlat16_7.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
        u_xlat16_4.xyz = u_xlat4.xyz;
        u_xlat16_10.xyz = u_xlat10.xyz;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb38 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex));
#else
        u_xlatb38 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex);
#endif
        u_xlat16_11.xyz = vec3(_FirstShadowMultColor.xxyz.y + (-_CoolShadowMultColor.x), _FirstShadowMultColor.xxyz.z + (-_CoolShadowMultColor.y), float(_FirstShadowMultColor.z) + (-_CoolShadowMultColor.z));
        u_xlat11.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_11.xyz + _CoolShadowMultColor.xyz;
        u_xlat16_6.xyz = (bool(u_xlatb38)) ? u_xlat11.xyz : vec3(_FirstShadowMultColor.x, _FirstShadowMultColor.y, _FirstShadowMultColor.z);
        u_xlat16_8.xyz = u_xlat16_5.xyz * u_xlat16_6.xyz;
        u_xlat16_11.xyz = u_xlat16_6.xyz + vec3(-1.0, -1.0, -1.0);
        u_xlat11.xyz = vec3(u_xlat26) * u_xlat16_11.xyz + vec3(1.0, 1.0, 1.0);
        u_xlat16_6.xyz = (bool(u_xlatb14)) ? u_xlat11.xyz : u_xlat16_6.xyz;
        u_xlat16_6.xyz = u_xlat16_5.xyz * u_xlat16_6.xyz;
        u_xlat14.xyz = u_xlat16_5.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
        u_xlat4.xyz = (bool(u_xlatb2)) ? u_xlat16_6.xyz : u_xlat14.xyz;
        u_xlat16_37 = dot(u_xlat16_1.xyz, u_xlat0.xyz);
        u_xlat16_37 = max(u_xlat16_37, 0.00100000005);
        u_xlat16_37 = log2(u_xlat16_37);
        u_xlat16_37 = u_xlat16_37 * _Shininess;
        u_xlat16_37 = exp2(u_xlat16_37);
        u_xlat2 = (-u_xlat10_3.w) + 1.0;
#ifdef UNITY_ADRENO_ES3
        u_xlatb2 = !!(u_xlat2<u_xlat16_37);
#else
        u_xlatb2 = u_xlat2<u_xlat16_37;
#endif
        u_xlat16_6.xyz = _SpecularColor.xyz * vec3(_SpecMulti);
        u_xlat16_6.xyz = u_xlat10_3.xxx * u_xlat16_6.xyz;
        u_xlat14.xyz = u_xlat16_6.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
        u_xlat10.xyz = mix(vec3(0.0, 0.0, 0.0), u_xlat14.xyz, vec3(bvec3(u_xlatb2)));
        u_xlat16_4.xyz = u_xlat4.xyz;
        u_xlat16_10.xyz = u_xlat10.xyz;
    //ENDIF
    }
    u_xlat16_5.xyz = u_xlat16_5.xyz * _EmissionColor_MHY.xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz + u_xlat16_10.xyz;
    u_xlat16_7.xyz = u_xlat16_8.xyz + u_xlat16_10.xyz;
    u_xlat16_8.xyz = u_xlat16_5.xyz * vec3(vec3(_EmissionScaler, _EmissionScaler, _EmissionScaler)) + (-u_xlat16_6.xyz);
    u_xlat16_8.xyz = vec3(u_xlat16_41) * u_xlat16_8.xyz + u_xlat16_6.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(vec3(_EmissionScaler, _EmissionScaler, _EmissionScaler)) + (-u_xlat16_7.xyz);
    u_xlat16_5.xyz = vec3(u_xlat16_41) * u_xlat16_5.xyz + u_xlat16_7.xyz;
    u_xlat16_6.xyz = (bool(u_xlatb36)) ? u_xlat16_8.xyz : u_xlat16_6.xyz;
    u_xlat16_5.xyz = (bool(u_xlatb36)) ? u_xlat16_5.xyz : u_xlat16_7.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(0.00999999978<u_xlat16_41);
#else
    u_xlatb2 = 0.00999999978<u_xlat16_41;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn));
#else
    u_xlatb14 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn);
#endif
    u_xlat3.xyz = u_xlat16_6.xyz * vec3(vec3(_ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness));
    u_xlat11.xyz = _ES_CharacterMainLightColor.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat11.xyz = vec3(vec3(_ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio)) * u_xlat11.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat3.xyz = u_xlat3.xyz * u_xlat11.xyz;
    u_xlat11.xyz = _ES_CharacterAmbientLightColor.xyz * vec3(_ES_CharacterAmbientLightRatio);
    u_xlat16_7.xyz = u_xlat3.xyz * vec3(10.0, 10.0, 10.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.xyz = min(max(u_xlat16_7.xyz, 0.0), 1.0);
#else
    u_xlat16_7.xyz = clamp(u_xlat16_7.xyz, 0.0, 1.0);
#endif
    u_xlat3.xyz = u_xlat11.xyz * u_xlat16_7.xyz + u_xlat3.xyz;
    u_xlat16_7.xyz = (bool(u_xlatb14)) ? u_xlat3.xyz : u_xlat16_6.xyz;
    u_xlat16_8.xyz = u_xlat16_6.xyz + (-u_xlat16_7.xyz);
    u_xlat16_8.xyz = vec3(u_xlat16_41) * u_xlat16_8.xyz + u_xlat16_7.xyz;
    u_xlat16_6.xyz = (-u_xlat16_5.xyz) + u_xlat16_6.xyz;
    u_xlat16_6.xyz = vec3(u_xlat16_41) * u_xlat16_6.xyz + u_xlat16_5.xyz;
    u_xlat16_0.xyz = (bool(u_xlatb2)) ? u_xlat16_8.xyz : u_xlat16_7.xyz;
    u_xlat16_5.xyz = (bool(u_xlatb2)) ? u_xlat16_6.xyz : u_xlat16_5.xyz;
    u_xlat16_37 = max(u_xlat16_0.z, u_xlat16_0.y);
    u_xlat16_2.w = max(u_xlat16_0.x, u_xlat16_37);
#ifdef UNITY_ADRENO_ES3
    u_xlatb3.x = !!(1.0<u_xlat16_2.w);
#else
    u_xlatb3.x = 1.0<u_xlat16_2.w;
#endif
    u_xlat16_2.xyz = u_xlat16_0.xyz / u_xlat16_2.www;
    u_xlat16_0.w = 1.0;
    u_xlat16_0 = (u_xlatb3.x) ? u_xlat16_2 : u_xlat16_0;
    u_xlat16_37 = min(u_xlat16_0.w, 1.10000002);
    u_xlat16_6.x = u_xlat16_0.w + (-u_xlat16_37);
    u_xlat16_37 = u_xlat16_41 * u_xlat16_6.x + u_xlat16_37;
    SV_Target1.w = u_xlat16_37 * 0.0500000007;
    SV_Target0.xyz = u_xlat16_1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb3.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb3.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_1.x = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb3.x) ? u_xlat16_1.x : u_xlat16_5.z;
    SV_Target0.w = 0.0470588244;
    SV_Target1.xyz = u_xlat16_0.xyz;
    SV_Target2.xy = u_xlat16_5.xy;
    SV_Target2.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "MSAA_INTERPOLATION" "TOON_SPECULAR_ON" "TOON_LIGHTMAP_ON" "METAL_MAT" "NORMAL_MAP_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
float u_xlat12;
void main()
{
    u_xlat0.x = hlslcc_mtx4x4unity_ObjectToWorld[0].y;
    u_xlat0.y = hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat0.z = hlslcc_mtx4x4unity_ObjectToWorld[2].y;
    u_xlat1.xyw = (-_WorldSpaceCameraPos.xyz) + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat0.w = u_xlat1.y;
    u_xlat2.xyz = in_POSITION0.xyz;
    u_xlat2.w = 1.0;
    u_xlat0.x = dot(u_xlat0, u_xlat2);
    u_xlat0 = u_xlat0.xxxx * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat3.w = u_xlat1.x;
    u_xlat3.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;
    u_xlat3.y = hlslcc_mtx4x4unity_ObjectToWorld[1].x;
    u_xlat3.z = hlslcc_mtx4x4unity_ObjectToWorld[2].x;
    u_xlat3.x = dot(u_xlat3, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat3.xxxx + u_xlat0;
    u_xlat1.x = hlslcc_mtx4x4unity_ObjectToWorld[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_ObjectToWorld[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_ObjectToWorld[2].z;
    u_xlat1.x = dot(u_xlat1, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat1.xxxx + u_xlat0;
    u_xlat1.x = hlslcc_mtx4x4unity_ObjectToWorld[0].w;
    u_xlat1.y = hlslcc_mtx4x4unity_ObjectToWorld[1].w;
    u_xlat1.z = hlslcc_mtx4x4unity_ObjectToWorld[2].w;
    u_xlat1.w = hlslcc_mtx4x4unity_ObjectToWorld[3].w;
    u_xlat1.x = dot(u_xlat1, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[3] * u_xlat1.xxxx + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD1 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.zw = u_xlat0.zw;
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD3.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
    u_xlat12 = in_TANGENT0.w * unity_WorldTransformParams.w;
    u_xlat2.xyz = vec3(u_xlat12) * u_xlat2.xyz;
    vs_TEXCOORD4.y = u_xlat2.x;
    vs_TEXCOORD4.x = u_xlat1.z;
    vs_TEXCOORD4.z = u_xlat0.y;
    vs_TEXCOORD5.x = u_xlat1.x;
    vs_TEXCOORD6.x = u_xlat1.y;
    vs_TEXCOORD5.z = u_xlat0.z;
    vs_TEXCOORD6.z = u_xlat0.x;
    vs_TEXCOORD5.y = u_xlat2.y;
    vs_TEXCOORD6.y = u_xlat2.z;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToCamera[4];
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	mediump vec4 _Color;
uniform 	float _MainTexAlphaUse;
uniform 	mediump float _MainTexAlphaCutoff;
uniform 	mediump float _BumpScale;
uniform 	float _UseLightMapColorAO;
uniform 	float _UseVertexColorAO;
uniform 	mediump float _LightArea;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	float _UseCoolShadowColorOrTex;
uniform 	mediump vec3 _CoolShadowMultColor;
uniform 	float _UseShadowTransition;
uniform 	float _ShadowTransitionRange;
uniform 	float _ShadowTransitionSoftness;
uniform 	mediump vec3 _SpecularColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump float _EmissionScaler;
uniform 	mediump vec3 _EmissionColor_MHY;
uniform 	mediump float _MTMapBrightness;
uniform 	float _MTMapTileScale;
uniform 	mediump vec3 _MTMapLightColor;
uniform 	mediump vec3 _MTMapDarkColor;
uniform 	mediump vec3 _MTShadowMultiColor;
uniform 	mediump float _MTShininess;
uniform 	mediump vec3 _MTSpecularColor;
uniform 	mediump float _MTSpecularScale;
uniform 	float _ES_CharacterAmbientLightOn;
uniform 	float _ES_CharacterAmbientBrightness;
uniform 	vec3 _ES_CharacterMainLightColor;
uniform 	float _ES_CharacterMainLightBrightness;
uniform 	vec3 _ES_CharacterAmbientLightColor;
uniform 	float _ES_CharacterMainLightRatio;
uniform 	float _ES_CharacterAmbientLightRatio;
uniform 	float _ES_CharacterColorTone;
uniform 	vec3 mhy_AvatarLightDir;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MTMap;
in mediump vec4 vs_COLOR0;
in highp vec2 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD5;
in highp vec3 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec2 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec3 u_xlat10_0;
bool u_xlatb0;
vec3 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
float u_xlat3;
lowp vec4 u_xlat10_3;
bool u_xlatb3;
vec3 u_xlat4;
mediump vec3 u_xlat16_4;
bvec2 u_xlatb4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
vec3 u_xlat10;
mediump vec3 u_xlat16_10;
bool u_xlatb10;
bool u_xlatb11;
vec3 u_xlat14;
mediump vec3 u_xlat16_14;
lowp float u_xlat10_14;
bool u_xlatb14;
vec3 u_xlat21;
mediump vec3 u_xlat16_21;
vec2 u_xlat22;
bvec2 u_xlatb22;
float u_xlat33;
mediump float u_xlat16_33;
bool u_xlatb33;
bool u_xlatb34;
mediump float u_xlat16_35;
mediump float u_xlat16_38;
void main()
{
    u_xlat0.xy = dFdx(vs_TEXCOORD0.xy);
    u_xlat22.xy = dFdy(vs_TEXCOORD0.xy);
    u_xlat0.xy = u_xlat22.xy + u_xlat0.xy;
    u_xlat22.xy = (-u_xlat0.xy) * vec2(0.25, 0.25) + vs_TEXCOORD0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25) + vs_TEXCOORD0.xy;
    u_xlat0.xy = (int(gl_SampleID) != 0) ? u_xlat22.xy : u_xlat0.xy;
    u_xlat10_1.xyz = textureLod(_BumpMap, u_xlat0.xy, 0.0).xyz;
    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_2.xy = u_xlat16_2.xy * vec2(vec2(_BumpScale, _BumpScale));
    u_xlat1.x = dot(vs_TEXCOORD4.xyz, u_xlat16_2.xyz);
    u_xlat1.y = dot(vs_TEXCOORD5.xyz, u_xlat16_2.xyz);
    u_xlat1.z = dot(vs_TEXCOORD6.xyz, u_xlat16_2.xyz);
    u_xlat16_2.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat16_2.x = inversesqrt(u_xlat16_2.x);
    u_xlat16_2.xyz = u_xlat1.xyz * u_xlat16_2.xxx;
    u_xlat1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat22.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat22.x = inversesqrt(u_xlat22.x);
    u_xlat1.xyz = u_xlat1.xyz * u_xlat22.xxx + mhy_AvatarLightDir.xyz;
    u_xlat22.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat22.x = inversesqrt(u_xlat22.x);
    u_xlat1.xyz = u_xlat22.xxx * u_xlat1.xyz;
    u_xlat10_3 = textureLod(_MainTex, u_xlat0.xy, 0.0);
    u_xlatb22.xy = equal(vec4(_MainTexAlphaUse), vec4(1.0, 2.0, 1.0, 2.0)).xy;
    u_xlat16_35 = u_xlat10_3.w + (-_MainTexAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb34 = !!(u_xlat16_35<0.0);
#else
    u_xlatb34 = u_xlat16_35<0.0;
#endif
    u_xlatb22.x = u_xlatb22.x && u_xlatb34;
    if((int(u_xlatb22.x) * int(0xffffffffu))!=0){discard;}
    u_xlat10_0.xyz = textureLod(_LightMapTex, u_xlat0.xy, 0.0).xyz;
    u_xlatb4.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseLightMapColorAO, _UseVertexColorAO, _UseLightMapColorAO, _UseLightMapColorAO)).xy;
    u_xlat16_35 = (u_xlatb4.x) ? u_xlat10_0.y : 0.5;
    u_xlat16_5.xyz = u_xlat10_3.xyz * _Color.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb11 = !!(0.00999999978<u_xlat10_3.w);
#else
    u_xlatb11 = 0.00999999978<u_xlat10_3.w;
#endif
    u_xlatb11 = u_xlatb11 && u_xlatb22.y;
    u_xlat16_38 = (u_xlatb11) ? u_xlat10_3.w : 0.0;
    u_xlat16_6.x = dot(u_xlat16_2.xyz, mhy_AvatarLightDir.xyz);
    u_xlat16_33 = u_xlat16_6.x * 0.497500002 + 0.5;
    u_xlat16_6.x = u_xlat16_35 * vs_COLOR0.x;
    u_xlat16_35 = (u_xlatb4.y) ? u_xlat16_6.x : u_xlat16_35;
#ifdef UNITY_ADRENO_ES3
    u_xlatb34 = !!(u_xlat16_35<0.0500000007);
#else
    u_xlatb34 = u_xlat16_35<0.0500000007;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(0.949999988<u_xlat16_35);
#else
    u_xlatb3 = 0.949999988<u_xlat16_35;
#endif
    u_xlat16_33 = u_xlat16_33 + u_xlat16_35;
    u_xlat33 = u_xlat16_33 * 0.5;
    u_xlat16_35 = (u_xlatb3) ? 1.0 : u_xlat33;
    u_xlat16_35 = (u_xlatb34) ? 0.0 : u_xlat16_35;
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(u_xlat16_35<_LightArea);
#else
    u_xlatb33 = u_xlat16_35<_LightArea;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb34 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition));
#else
    u_xlatb34 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition);
#endif
    u_xlat16_35 = (-u_xlat16_35) + _LightArea;
    u_xlat16_35 = u_xlat16_35 / _ShadowTransitionRange;
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(u_xlat16_35>=1.0);
#else
    u_xlatb3 = u_xlat16_35>=1.0;
#endif
    u_xlat16_14.x = u_xlat16_35 + 0.00999999978;
    u_xlat16_14.x = log2(u_xlat16_14.x);
    u_xlat14.x = u_xlat16_14.x * _ShadowTransitionSoftness;
    u_xlat14.x = exp2(u_xlat14.x);
    u_xlat14.x = min(u_xlat14.x, 1.0);
    u_xlat3 = (u_xlatb3) ? 1.0 : u_xlat14.x;
    u_xlat3 = (u_xlatb34) ? u_xlat3 : 1.0;
    u_xlat3 = u_xlatb33 ? u_xlat3 : float(0.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(0.899999976<u_xlat10_0.x);
#else
    u_xlatb14 = 0.899999976<u_xlat10_0.x;
#endif
    if(u_xlatb14){
        u_xlat14.xy = u_xlat16_2.yy * hlslcc_mtx4x4unity_WorldToCamera[1].xy;
        u_xlat14.xy = hlslcc_mtx4x4unity_WorldToCamera[0].xy * u_xlat16_2.xx + u_xlat14.xy;
        u_xlat4.yz = hlslcc_mtx4x4unity_WorldToCamera[2].xy * u_xlat16_2.zz + u_xlat14.xy;
        u_xlat4.x = u_xlat4.y * _MTMapTileScale;
        u_xlat16_6.xy = u_xlat4.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
        u_xlat10_14 = texture(_MTMap, u_xlat16_6.xy, -1.0).x;
        u_xlat16_35 = u_xlat10_14 * _MTMapBrightness;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_35 = min(max(u_xlat16_35, 0.0), 1.0);
#else
        u_xlat16_35 = clamp(u_xlat16_35, 0.0, 1.0);
#endif
        u_xlat16_6.xyz = _MTMapLightColor.xyz + (-_MTMapDarkColor.xyz);
        u_xlat16_6.xyz = vec3(u_xlat16_35) * u_xlat16_6.xyz + _MTMapDarkColor.xyz;
        u_xlat16_6.xyz = u_xlat16_5.xyz * u_xlat16_6.xyz;
        u_xlat16_35 = dot(u_xlat16_2.xyz, u_xlat1.xyz);
        u_xlat16_35 = max(u_xlat16_35, 0.00100000005);
        u_xlat16_35 = log2(u_xlat16_35);
        u_xlat16_35 = u_xlat16_35 * _MTShininess;
        u_xlat16_35 = exp2(u_xlat16_35);
        u_xlat16_35 = u_xlat16_35 * _MTSpecularScale;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_35 = min(max(u_xlat16_35, 0.0), 1.0);
#else
        u_xlat16_35 = clamp(u_xlat16_35, 0.0, 1.0);
#endif
        u_xlat16_7.xyz = vec3(u_xlat16_35) * _MTSpecularColor.xyz;
        u_xlat16_7.xyz = u_xlat10_0.zzz * u_xlat16_7.xyz;
        u_xlat16_8.xyz = u_xlat16_6.xyz * _MTShadowMultiColor.xyz;
        u_xlat16_14.xyz = _MTShadowMultiColor.xyz + vec3(-1.0, -1.0, -1.0);
        u_xlat14.xyz = vec3(u_xlat3) * u_xlat16_14.xyz + vec3(1.0, 1.0, 1.0);
        u_xlat16_9.xyz = (bool(u_xlatb34)) ? u_xlat14.xyz : _MTShadowMultiColor.xyz;
        u_xlat16_9.xyz = u_xlat16_6.xyz * u_xlat16_9.xyz;
        u_xlat14.xyz = u_xlat16_6.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
        u_xlat14.xyz = (bool(u_xlatb33)) ? u_xlat16_9.xyz : u_xlat14.xyz;
        u_xlat4.xyz = u_xlat16_7.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
        u_xlat16_14.xyz = u_xlat14.xyz;
        u_xlat16_4.xyz = u_xlat4.xyz;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb10 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex));
#else
        u_xlatb10 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex);
#endif
        u_xlat16_21.xyz = vec3(_FirstShadowMultColor.xxyz.y + (-_CoolShadowMultColor.x), _FirstShadowMultColor.xxyz.z + (-_CoolShadowMultColor.y), float(_FirstShadowMultColor.z) + (-_CoolShadowMultColor.z));
        u_xlat21.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_21.xyz + _CoolShadowMultColor.xyz;
        u_xlat16_6.xyz = (bool(u_xlatb10)) ? u_xlat21.xyz : vec3(_FirstShadowMultColor.x, _FirstShadowMultColor.y, _FirstShadowMultColor.z);
        u_xlat16_8.xyz = u_xlat16_5.xyz * u_xlat16_6.xyz;
        u_xlat16_10.xyz = u_xlat16_6.xyz + vec3(-1.0, -1.0, -1.0);
        u_xlat10.xyz = vec3(u_xlat3) * u_xlat16_10.xyz + vec3(1.0, 1.0, 1.0);
        u_xlat16_6.xyz = (bool(u_xlatb34)) ? u_xlat10.xyz : u_xlat16_6.xyz;
        u_xlat16_6.xyz = u_xlat16_5.xyz * u_xlat16_6.xyz;
        u_xlat10.xyz = u_xlat16_5.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
        u_xlat14.xyz = (bool(u_xlatb33)) ? u_xlat16_6.xyz : u_xlat10.xyz;
        u_xlat16_35 = dot(u_xlat16_2.xyz, u_xlat1.xyz);
        u_xlat16_35 = max(u_xlat16_35, 0.00100000005);
        u_xlat16_35 = log2(u_xlat16_35);
        u_xlat16_35 = u_xlat16_35 * _Shininess;
        u_xlat16_35 = exp2(u_xlat16_35);
        u_xlat22.x = (-u_xlat10_0.z) + 1.0;
#ifdef UNITY_ADRENO_ES3
        u_xlatb22.x = !!(u_xlat22.x<u_xlat16_35);
#else
        u_xlatb22.x = u_xlat22.x<u_xlat16_35;
#endif
        u_xlat16_6.xyz = _SpecularColor.xyz * vec3(_SpecMulti);
        u_xlat16_6.xyz = u_xlat10_0.xxx * u_xlat16_6.xyz;
        u_xlat1.xyz = u_xlat16_6.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
        u_xlat4.xyz = mix(vec3(0.0, 0.0, 0.0), u_xlat1.xyz, vec3(u_xlatb22.xxx));
        u_xlat16_14.xyz = u_xlat14.xyz;
        u_xlat16_4.xyz = u_xlat4.xyz;
    //ENDIF
    }
    u_xlat16_5.xyz = u_xlat16_5.xyz * _EmissionColor_MHY.xyz;
    u_xlat16_6.xyz = u_xlat16_14.xyz + u_xlat16_4.xyz;
    u_xlat16_7.xyz = u_xlat16_4.xyz + u_xlat16_8.xyz;
    u_xlat16_8.xyz = u_xlat16_5.xyz * vec3(vec3(_EmissionScaler, _EmissionScaler, _EmissionScaler)) + (-u_xlat16_6.xyz);
    u_xlat16_8.xyz = vec3(u_xlat16_38) * u_xlat16_8.xyz + u_xlat16_6.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(vec3(_EmissionScaler, _EmissionScaler, _EmissionScaler)) + (-u_xlat16_7.xyz);
    u_xlat16_5.xyz = vec3(u_xlat16_38) * u_xlat16_5.xyz + u_xlat16_7.xyz;
    u_xlat16_6.xyz = (bool(u_xlatb11)) ? u_xlat16_8.xyz : u_xlat16_6.xyz;
    u_xlat16_5.xyz = (bool(u_xlatb11)) ? u_xlat16_5.xyz : u_xlat16_7.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.00999999978<u_xlat16_38);
#else
    u_xlatb0 = 0.00999999978<u_xlat16_38;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb11 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn));
#else
    u_xlatb11 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn);
#endif
    u_xlat1.xyz = u_xlat16_6.xyz * vec3(vec3(_ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness));
    u_xlat10.xyz = _ES_CharacterMainLightColor.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat10.xyz = vec3(vec3(_ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio)) * u_xlat10.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat1.xyz = u_xlat1.xyz * u_xlat10.xyz;
    u_xlat10.xyz = _ES_CharacterAmbientLightColor.xyz * vec3(_ES_CharacterAmbientLightRatio);
    u_xlat16_7.xyz = u_xlat1.xyz * vec3(10.0, 10.0, 10.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.xyz = min(max(u_xlat16_7.xyz, 0.0), 1.0);
#else
    u_xlat16_7.xyz = clamp(u_xlat16_7.xyz, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat10.xyz * u_xlat16_7.xyz + u_xlat1.xyz;
    u_xlat16_7.xyz = (bool(u_xlatb11)) ? u_xlat1.xyz : u_xlat16_6.xyz;
    u_xlat16_8.xyz = u_xlat16_6.xyz + (-u_xlat16_7.xyz);
    u_xlat16_8.xyz = vec3(u_xlat16_38) * u_xlat16_8.xyz + u_xlat16_7.xyz;
    u_xlat16_6.xyz = (-u_xlat16_5.xyz) + u_xlat16_6.xyz;
    u_xlat16_6.xyz = vec3(u_xlat16_38) * u_xlat16_6.xyz + u_xlat16_5.xyz;
    u_xlat16_1.xyz = (bool(u_xlatb0)) ? u_xlat16_8.xyz : u_xlat16_7.xyz;
    u_xlat16_5.xyz = (bool(u_xlatb0)) ? u_xlat16_6.xyz : u_xlat16_5.xyz;
    u_xlat16_35 = max(u_xlat16_1.z, u_xlat16_1.y);
    u_xlat16_0.w = max(u_xlat16_1.x, u_xlat16_35);
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(1.0<u_xlat16_0.w);
#else
    u_xlatb10 = 1.0<u_xlat16_0.w;
#endif
    u_xlat16_0.xyz = u_xlat16_1.xyz / u_xlat16_0.www;
    u_xlat16_1.w = 1.0;
    u_xlat16_0 = (bool(u_xlatb10)) ? u_xlat16_0 : u_xlat16_1;
    u_xlat16_35 = min(u_xlat16_0.w, 1.10000002);
    u_xlat16_6.x = u_xlat16_0.w + (-u_xlat16_35);
    u_xlat16_35 = u_xlat16_38 * u_xlat16_6.x + u_xlat16_35;
    SV_Target1.w = u_xlat16_35 * 0.0500000007;
    SV_Target0.xyz = u_xlat16_2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb10 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_2.x = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb10) ? u_xlat16_2.x : u_xlat16_5.z;
    SV_Target0.w = 0.0470588244;
    SV_Target1.xyz = u_xlat16_0.xyz;
    SV_Target2.xy = u_xlat16_5.xy;
    SV_Target2.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "LINE_INTERPOLATION" "TOON_SPECULAR_ON" "TOON_LIGHTMAP_ON" "METAL_MAT" "NORMAL_MAP_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
float u_xlat12;
void main()
{
    u_xlat0.x = hlslcc_mtx4x4unity_ObjectToWorld[0].y;
    u_xlat0.y = hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat0.z = hlslcc_mtx4x4unity_ObjectToWorld[2].y;
    u_xlat1.xyw = (-_WorldSpaceCameraPos.xyz) + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat0.w = u_xlat1.y;
    u_xlat2.xyz = in_POSITION0.xyz;
    u_xlat2.w = 1.0;
    u_xlat0.x = dot(u_xlat0, u_xlat2);
    u_xlat0 = u_xlat0.xxxx * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat3.w = u_xlat1.x;
    u_xlat3.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;
    u_xlat3.y = hlslcc_mtx4x4unity_ObjectToWorld[1].x;
    u_xlat3.z = hlslcc_mtx4x4unity_ObjectToWorld[2].x;
    u_xlat3.x = dot(u_xlat3, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat3.xxxx + u_xlat0;
    u_xlat1.x = hlslcc_mtx4x4unity_ObjectToWorld[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_ObjectToWorld[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_ObjectToWorld[2].z;
    u_xlat1.x = dot(u_xlat1, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat1.xxxx + u_xlat0;
    u_xlat1.x = hlslcc_mtx4x4unity_ObjectToWorld[0].w;
    u_xlat1.y = hlslcc_mtx4x4unity_ObjectToWorld[1].w;
    u_xlat1.z = hlslcc_mtx4x4unity_ObjectToWorld[2].w;
    u_xlat1.w = hlslcc_mtx4x4unity_ObjectToWorld[3].w;
    u_xlat1.x = dot(u_xlat1, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[3] * u_xlat1.xxxx + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD1 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.zw = u_xlat0.zw;
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD3.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
    u_xlat12 = in_TANGENT0.w * unity_WorldTransformParams.w;
    u_xlat2.xyz = vec3(u_xlat12) * u_xlat2.xyz;
    vs_TEXCOORD4.y = u_xlat2.x;
    vs_TEXCOORD4.x = u_xlat1.z;
    vs_TEXCOORD4.z = u_xlat0.y;
    vs_TEXCOORD5.x = u_xlat1.x;
    vs_TEXCOORD6.x = u_xlat1.y;
    vs_TEXCOORD5.z = u_xlat0.z;
    vs_TEXCOORD6.z = u_xlat0.x;
    vs_TEXCOORD5.y = u_xlat2.y;
    vs_TEXCOORD6.y = u_xlat2.z;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToCamera[4];
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	mediump vec4 _Color;
uniform 	float _MainTexAlphaUse;
uniform 	mediump float _MainTexAlphaCutoff;
uniform 	mediump float _BumpScale;
uniform 	float _UseLightMapColorAO;
uniform 	float _UseVertexColorAO;
uniform 	mediump float _LightArea;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	float _UseCoolShadowColorOrTex;
uniform 	mediump vec3 _CoolShadowMultColor;
uniform 	float _UseShadowTransition;
uniform 	float _ShadowTransitionRange;
uniform 	float _ShadowTransitionSoftness;
uniform 	mediump vec3 _SpecularColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump float _EmissionScaler;
uniform 	mediump vec3 _EmissionColor_MHY;
uniform 	mediump float _MTMapBrightness;
uniform 	float _MTMapTileScale;
uniform 	mediump vec3 _MTMapLightColor;
uniform 	mediump vec3 _MTMapDarkColor;
uniform 	mediump vec3 _MTShadowMultiColor;
uniform 	mediump float _MTShininess;
uniform 	mediump vec3 _MTSpecularColor;
uniform 	mediump float _MTSpecularScale;
uniform 	float _ES_CharacterAmbientLightOn;
uniform 	float _ES_CharacterAmbientBrightness;
uniform 	vec3 _ES_CharacterMainLightColor;
uniform 	float _ES_CharacterMainLightBrightness;
uniform 	vec3 _ES_CharacterAmbientLightColor;
uniform 	float _ES_CharacterMainLightRatio;
uniform 	float _ES_CharacterAmbientLightRatio;
uniform 	float _ES_CharacterColorTone;
uniform 	vec3 mhy_AvatarLightDir;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MTMap;
in mediump vec4 vs_COLOR0;
in highp vec2 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD5;
in highp vec3 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec3 u_xlat10_0;
mediump vec3 u_xlat16_1;
float u_xlat2;
mediump vec4 u_xlat16_2;
lowp vec4 u_xlat10_2;
bool u_xlatb2;
vec3 u_xlat3;
lowp vec4 u_xlat10_3;
bvec2 u_xlatb3;
vec3 u_xlat4;
mediump vec3 u_xlat16_4;
bvec2 u_xlatb4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
vec3 u_xlat10;
mediump vec3 u_xlat16_10;
vec3 u_xlat11;
mediump vec3 u_xlat16_11;
vec3 u_xlat14;
bool u_xlatb14;
vec2 u_xlat15;
float u_xlat26;
bool u_xlatb26;
float u_xlat36;
bool u_xlatb36;
mediump float u_xlat16_37;
float u_xlat38;
mediump float u_xlat16_38;
lowp float u_xlat10_38;
bool u_xlatb38;
mediump float u_xlat16_41;
void main()
{
    u_xlat10_0.xyz = texture(_BumpMap, vs_TEXCOORD0.xy, -1.0).xyz;
    u_xlat16_1.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_1.xy = u_xlat16_1.xy * vec2(vec2(_BumpScale, _BumpScale));
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, u_xlat16_1.xyz);
    u_xlat0.y = dot(vs_TEXCOORD5.xyz, u_xlat16_1.xyz);
    u_xlat0.z = dot(vs_TEXCOORD6.xyz, u_xlat16_1.xyz);
    u_xlat16_1.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat16_1.x = inversesqrt(u_xlat16_1.x);
    u_xlat16_1.xyz = u_xlat0.xyz * u_xlat16_1.xxx;
    u_xlat0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat36 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat36 = inversesqrt(u_xlat36);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat36) + mhy_AvatarLightDir.xyz;
    u_xlat36 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat36 = inversesqrt(u_xlat36);
    u_xlat0.xyz = vec3(u_xlat36) * u_xlat0.xyz;
    u_xlat10_2 = texture(_MainTex, vs_TEXCOORD0.xy, -1.0);
    u_xlatb3.xy = equal(vec4(_MainTexAlphaUse), vec4(1.0, 2.0, 0.0, 0.0)).xy;
    u_xlat16_37 = u_xlat10_2.w + (-_MainTexAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb36 = !!(u_xlat16_37<0.0);
#else
    u_xlatb36 = u_xlat16_37<0.0;
#endif
    u_xlatb36 = u_xlatb3.x && u_xlatb36;
    if((int(u_xlatb36) * int(0xffffffffu))!=0){discard;}
    u_xlat10_3.xzw = texture(_LightMapTex, vs_TEXCOORD0.xy, -1.0).xyz;
    u_xlatb4.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseLightMapColorAO, _UseVertexColorAO, _UseLightMapColorAO, _UseLightMapColorAO)).xy;
    u_xlat16_37 = (u_xlatb4.x) ? u_xlat10_3.z : 0.5;
    u_xlat16_5.xyz = u_xlat10_2.xyz * _Color.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb36 = !!(0.00999999978<u_xlat10_2.w);
#else
    u_xlatb36 = 0.00999999978<u_xlat10_2.w;
#endif
    u_xlatb36 = u_xlatb36 && u_xlatb3.y;
    u_xlat16_41 = (u_xlatb36) ? u_xlat10_2.w : 0.0;
    u_xlat16_6.x = dot(u_xlat16_1.xyz, mhy_AvatarLightDir.xyz);
    u_xlat16_2.x = u_xlat16_6.x * 0.497500002 + 0.5;
    u_xlat16_6.x = u_xlat16_37 * vs_COLOR0.x;
    u_xlat16_37 = (u_xlatb4.y) ? u_xlat16_6.x : u_xlat16_37;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(u_xlat16_37<0.0500000007);
#else
    u_xlatb14 = u_xlat16_37<0.0500000007;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb26 = !!(0.949999988<u_xlat16_37);
#else
    u_xlatb26 = 0.949999988<u_xlat16_37;
#endif
    u_xlat16_2.x = u_xlat16_37 + u_xlat16_2.x;
    u_xlat2 = u_xlat16_2.x * 0.5;
    u_xlat16_37 = (u_xlatb26) ? 1.0 : u_xlat2;
    u_xlat16_37 = (u_xlatb14) ? 0.0 : u_xlat16_37;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat16_37<_LightArea);
#else
    u_xlatb2 = u_xlat16_37<_LightArea;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition));
#else
    u_xlatb14 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition);
#endif
    u_xlat16_37 = (-u_xlat16_37) + _LightArea;
    u_xlat16_37 = u_xlat16_37 / _ShadowTransitionRange;
#ifdef UNITY_ADRENO_ES3
    u_xlatb26 = !!(u_xlat16_37>=1.0);
#else
    u_xlatb26 = u_xlat16_37>=1.0;
#endif
    u_xlat16_38 = u_xlat16_37 + 0.00999999978;
    u_xlat16_38 = log2(u_xlat16_38);
    u_xlat38 = u_xlat16_38 * _ShadowTransitionSoftness;
    u_xlat38 = exp2(u_xlat38);
    u_xlat38 = min(u_xlat38, 1.0);
    u_xlat26 = (u_xlatb26) ? 1.0 : u_xlat38;
    u_xlat26 = (u_xlatb14) ? u_xlat26 : 1.0;
    u_xlat26 = u_xlatb2 ? u_xlat26 : float(0.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb38 = !!(0.899999976<u_xlat10_3.x);
#else
    u_xlatb38 = 0.899999976<u_xlat10_3.x;
#endif
    if(u_xlatb38){
        u_xlat15.xy = u_xlat16_1.yy * hlslcc_mtx4x4unity_WorldToCamera[1].xy;
        u_xlat15.xy = hlslcc_mtx4x4unity_WorldToCamera[0].xy * u_xlat16_1.xx + u_xlat15.xy;
        u_xlat4.yz = hlslcc_mtx4x4unity_WorldToCamera[2].xy * u_xlat16_1.zz + u_xlat15.xy;
        u_xlat4.x = u_xlat4.y * _MTMapTileScale;
        u_xlat16_6.xy = u_xlat4.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
        u_xlat10_38 = texture(_MTMap, u_xlat16_6.xy, -1.0).x;
        u_xlat16_37 = u_xlat10_38 * _MTMapBrightness;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_37 = min(max(u_xlat16_37, 0.0), 1.0);
#else
        u_xlat16_37 = clamp(u_xlat16_37, 0.0, 1.0);
#endif
        u_xlat16_6.xyz = _MTMapLightColor.xyz + (-_MTMapDarkColor.xyz);
        u_xlat16_6.xyz = vec3(u_xlat16_37) * u_xlat16_6.xyz + _MTMapDarkColor.xyz;
        u_xlat16_6.xyz = u_xlat16_5.xyz * u_xlat16_6.xyz;
        u_xlat16_37 = dot(u_xlat16_1.xyz, u_xlat0.xyz);
        u_xlat16_37 = max(u_xlat16_37, 0.00100000005);
        u_xlat16_37 = log2(u_xlat16_37);
        u_xlat16_37 = u_xlat16_37 * _MTShininess;
        u_xlat16_37 = exp2(u_xlat16_37);
        u_xlat16_37 = u_xlat16_37 * _MTSpecularScale;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_37 = min(max(u_xlat16_37, 0.0), 1.0);
#else
        u_xlat16_37 = clamp(u_xlat16_37, 0.0, 1.0);
#endif
        u_xlat16_7.xyz = vec3(u_xlat16_37) * _MTSpecularColor.xyz;
        u_xlat16_7.xyz = u_xlat10_3.www * u_xlat16_7.xyz;
        u_xlat16_8.xyz = u_xlat16_6.xyz * _MTShadowMultiColor.xyz;
        u_xlat16_4.xyz = _MTShadowMultiColor.xyz + vec3(-1.0, -1.0, -1.0);
        u_xlat4.xyz = vec3(u_xlat26) * u_xlat16_4.xyz + vec3(1.0, 1.0, 1.0);
        u_xlat16_9.xyz = (bool(u_xlatb14)) ? u_xlat4.xyz : _MTShadowMultiColor.xyz;
        u_xlat16_9.xyz = u_xlat16_6.xyz * u_xlat16_9.xyz;
        u_xlat4.xyz = u_xlat16_6.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
        u_xlat4.xyz = (bool(u_xlatb2)) ? u_xlat16_9.xyz : u_xlat4.xyz;
        u_xlat10.xyz = u_xlat16_7.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
        u_xlat16_4.xyz = u_xlat4.xyz;
        u_xlat16_10.xyz = u_xlat10.xyz;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb38 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex));
#else
        u_xlatb38 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex);
#endif
        u_xlat16_11.xyz = vec3(_FirstShadowMultColor.xxyz.y + (-_CoolShadowMultColor.x), _FirstShadowMultColor.xxyz.z + (-_CoolShadowMultColor.y), float(_FirstShadowMultColor.z) + (-_CoolShadowMultColor.z));
        u_xlat11.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_11.xyz + _CoolShadowMultColor.xyz;
        u_xlat16_6.xyz = (bool(u_xlatb38)) ? u_xlat11.xyz : vec3(_FirstShadowMultColor.x, _FirstShadowMultColor.y, _FirstShadowMultColor.z);
        u_xlat16_8.xyz = u_xlat16_5.xyz * u_xlat16_6.xyz;
        u_xlat16_11.xyz = u_xlat16_6.xyz + vec3(-1.0, -1.0, -1.0);
        u_xlat11.xyz = vec3(u_xlat26) * u_xlat16_11.xyz + vec3(1.0, 1.0, 1.0);
        u_xlat16_6.xyz = (bool(u_xlatb14)) ? u_xlat11.xyz : u_xlat16_6.xyz;
        u_xlat16_6.xyz = u_xlat16_5.xyz * u_xlat16_6.xyz;
        u_xlat14.xyz = u_xlat16_5.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
        u_xlat4.xyz = (bool(u_xlatb2)) ? u_xlat16_6.xyz : u_xlat14.xyz;
        u_xlat16_37 = dot(u_xlat16_1.xyz, u_xlat0.xyz);
        u_xlat16_37 = max(u_xlat16_37, 0.00100000005);
        u_xlat16_37 = log2(u_xlat16_37);
        u_xlat16_37 = u_xlat16_37 * _Shininess;
        u_xlat16_37 = exp2(u_xlat16_37);
        u_xlat2 = (-u_xlat10_3.w) + 1.0;
#ifdef UNITY_ADRENO_ES3
        u_xlatb2 = !!(u_xlat2<u_xlat16_37);
#else
        u_xlatb2 = u_xlat2<u_xlat16_37;
#endif
        u_xlat16_6.xyz = _SpecularColor.xyz * vec3(_SpecMulti);
        u_xlat16_6.xyz = u_xlat10_3.xxx * u_xlat16_6.xyz;
        u_xlat14.xyz = u_xlat16_6.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
        u_xlat10.xyz = mix(vec3(0.0, 0.0, 0.0), u_xlat14.xyz, vec3(bvec3(u_xlatb2)));
        u_xlat16_4.xyz = u_xlat4.xyz;
        u_xlat16_10.xyz = u_xlat10.xyz;
    //ENDIF
    }
    u_xlat16_5.xyz = u_xlat16_5.xyz * _EmissionColor_MHY.xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz + u_xlat16_10.xyz;
    u_xlat16_7.xyz = u_xlat16_8.xyz + u_xlat16_10.xyz;
    u_xlat16_8.xyz = u_xlat16_5.xyz * vec3(vec3(_EmissionScaler, _EmissionScaler, _EmissionScaler)) + (-u_xlat16_6.xyz);
    u_xlat16_8.xyz = vec3(u_xlat16_41) * u_xlat16_8.xyz + u_xlat16_6.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(vec3(_EmissionScaler, _EmissionScaler, _EmissionScaler)) + (-u_xlat16_7.xyz);
    u_xlat16_5.xyz = vec3(u_xlat16_41) * u_xlat16_5.xyz + u_xlat16_7.xyz;
    u_xlat16_6.xyz = (bool(u_xlatb36)) ? u_xlat16_8.xyz : u_xlat16_6.xyz;
    u_xlat16_5.xyz = (bool(u_xlatb36)) ? u_xlat16_5.xyz : u_xlat16_7.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(0.00999999978<u_xlat16_41);
#else
    u_xlatb2 = 0.00999999978<u_xlat16_41;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn));
#else
    u_xlatb14 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn);
#endif
    u_xlat3.xyz = u_xlat16_6.xyz * vec3(vec3(_ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness));
    u_xlat11.xyz = _ES_CharacterMainLightColor.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat11.xyz = vec3(vec3(_ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio)) * u_xlat11.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat3.xyz = u_xlat3.xyz * u_xlat11.xyz;
    u_xlat11.xyz = _ES_CharacterAmbientLightColor.xyz * vec3(_ES_CharacterAmbientLightRatio);
    u_xlat16_7.xyz = u_xlat3.xyz * vec3(10.0, 10.0, 10.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.xyz = min(max(u_xlat16_7.xyz, 0.0), 1.0);
#else
    u_xlat16_7.xyz = clamp(u_xlat16_7.xyz, 0.0, 1.0);
#endif
    u_xlat3.xyz = u_xlat11.xyz * u_xlat16_7.xyz + u_xlat3.xyz;
    u_xlat16_7.xyz = (bool(u_xlatb14)) ? u_xlat3.xyz : u_xlat16_6.xyz;
    u_xlat16_8.xyz = u_xlat16_6.xyz + (-u_xlat16_7.xyz);
    u_xlat16_8.xyz = vec3(u_xlat16_41) * u_xlat16_8.xyz + u_xlat16_7.xyz;
    u_xlat16_6.xyz = (-u_xlat16_5.xyz) + u_xlat16_6.xyz;
    u_xlat16_6.xyz = vec3(u_xlat16_41) * u_xlat16_6.xyz + u_xlat16_5.xyz;
    u_xlat16_0.xyz = (bool(u_xlatb2)) ? u_xlat16_8.xyz : u_xlat16_7.xyz;
    u_xlat16_5.xyz = (bool(u_xlatb2)) ? u_xlat16_6.xyz : u_xlat16_5.xyz;
    u_xlat16_37 = max(u_xlat16_0.z, u_xlat16_0.y);
    u_xlat16_2.w = max(u_xlat16_0.x, u_xlat16_37);
#ifdef UNITY_ADRENO_ES3
    u_xlatb3.x = !!(1.0<u_xlat16_2.w);
#else
    u_xlatb3.x = 1.0<u_xlat16_2.w;
#endif
    u_xlat16_2.xyz = u_xlat16_0.xyz / u_xlat16_2.www;
    u_xlat16_0.w = 1.0;
    u_xlat16_0 = (u_xlatb3.x) ? u_xlat16_2 : u_xlat16_0;
    u_xlat16_37 = min(u_xlat16_0.w, 1.10000002);
    u_xlat16_6.x = u_xlat16_0.w + (-u_xlat16_37);
    u_xlat16_37 = u_xlat16_41 * u_xlat16_6.x + u_xlat16_37;
    SV_Target1.w = u_xlat16_37 * 0.0500000007;
    SV_Target0.xyz = u_xlat16_1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb3.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb3.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_1.x = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb3.x) ? u_xlat16_1.x : u_xlat16_5.z;
    SV_Target0.w = 0.0470588244;
    SV_Target1.xyz = u_xlat16_0.xyz;
    SV_Target2.xy = u_xlat16_5.xy;
    SV_Target2.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "TOON_SPECULAR_ON" "TOON_LIGHTMAP_ON" "BACK_FACE_ON" "NORMAL_MAP_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
float u_xlat12;
void main()
{
    u_xlat0.x = hlslcc_mtx4x4unity_ObjectToWorld[0].y;
    u_xlat0.y = hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat0.z = hlslcc_mtx4x4unity_ObjectToWorld[2].y;
    u_xlat1.xyw = (-_WorldSpaceCameraPos.xyz) + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat0.w = u_xlat1.y;
    u_xlat2.xyz = in_POSITION0.xyz;
    u_xlat2.w = 1.0;
    u_xlat0.x = dot(u_xlat0, u_xlat2);
    u_xlat0 = u_xlat0.xxxx * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat3.w = u_xlat1.x;
    u_xlat3.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;
    u_xlat3.y = hlslcc_mtx4x4unity_ObjectToWorld[1].x;
    u_xlat3.z = hlslcc_mtx4x4unity_ObjectToWorld[2].x;
    u_xlat3.x = dot(u_xlat3, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat3.xxxx + u_xlat0;
    u_xlat1.x = hlslcc_mtx4x4unity_ObjectToWorld[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_ObjectToWorld[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_ObjectToWorld[2].z;
    u_xlat1.x = dot(u_xlat1, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat1.xxxx + u_xlat0;
    u_xlat1.x = hlslcc_mtx4x4unity_ObjectToWorld[0].w;
    u_xlat1.y = hlslcc_mtx4x4unity_ObjectToWorld[1].w;
    u_xlat1.z = hlslcc_mtx4x4unity_ObjectToWorld[2].w;
    u_xlat1.w = hlslcc_mtx4x4unity_ObjectToWorld[3].w;
    u_xlat1.x = dot(u_xlat1, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[3] * u_xlat1.xxxx + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD1 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.zw = u_xlat0.zw;
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD3.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
    u_xlat12 = in_TANGENT0.w * unity_WorldTransformParams.w;
    u_xlat2.xyz = vec3(u_xlat12) * u_xlat2.xyz;
    vs_TEXCOORD4.y = u_xlat2.x;
    vs_TEXCOORD4.x = u_xlat1.z;
    vs_TEXCOORD4.z = u_xlat0.y;
    vs_TEXCOORD5.x = u_xlat1.x;
    vs_TEXCOORD6.x = u_xlat1.y;
    vs_TEXCOORD5.z = u_xlat0.z;
    vs_TEXCOORD6.z = u_xlat0.x;
    vs_TEXCOORD5.y = u_xlat2.y;
    vs_TEXCOORD6.y = u_xlat2.z;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	mediump vec4 _Color;
uniform 	float _MainTexAlphaUse;
uniform 	mediump float _MainTexAlphaCutoff;
uniform 	mediump float _BumpScale;
uniform 	float _UseLightMapColorAO;
uniform 	float _UseVertexColorAO;
uniform 	mediump float _LightArea;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	float _UseCoolShadowColorOrTex;
uniform 	mediump vec3 _CoolShadowMultColor;
uniform 	float _UseShadowTransition;
uniform 	float _ShadowTransitionRange;
uniform 	float _ShadowTransitionSoftness;
uniform 	mediump vec3 _SpecularColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump float _EmissionScaler;
uniform 	mediump vec3 _EmissionColor_MHY;
uniform 	float _ES_CharacterAmbientLightOn;
uniform 	float _ES_CharacterAmbientBrightness;
uniform 	vec3 _ES_CharacterMainLightColor;
uniform 	float _ES_CharacterMainLightBrightness;
uniform 	vec3 _ES_CharacterAmbientLightColor;
uniform 	float _ES_CharacterMainLightRatio;
uniform 	float _ES_CharacterAmbientLightRatio;
uniform 	float _ES_CharacterColorTone;
uniform 	vec3 mhy_AvatarLightDir;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMapTex;
in mediump vec4 vs_COLOR0;
in highp vec2 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD5;
in highp vec3 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec4 u_xlat0;
mediump float u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
vec3 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
bool u_xlatb1;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump vec4 u_xlat16_3;
lowp vec3 u_xlat10_3;
vec3 u_xlat4;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
vec3 u_xlat9;
bool u_xlatb9;
mediump float u_xlat16_11;
bool u_xlatb12;
float u_xlat18;
bvec2 u_xlatb18;
float u_xlat27;
mediump float u_xlat16_27;
bool u_xlatb27;
mediump float u_xlat16_29;
mediump float u_xlat16_32;
mediump float u_xlat16_33;
void main()
{
    u_xlatb0.xy = equal(vec4(_MainTexAlphaUse), vec4(1.0, 2.0, 0.0, 0.0)).xy;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy, -1.0);
    u_xlat16_2.x = u_xlat10_1.w + (-_MainTexAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb18.x = !!(u_xlat16_2.x<0.0);
#else
    u_xlatb18.x = u_xlat16_2.x<0.0;
#endif
    u_xlatb0.x = u_xlatb0.x && u_xlatb18.x;
    if((int(u_xlatb0.x) * int(0xffffffffu))!=0){discard;}
    u_xlat10_0.xzw = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xzw * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_2.xy = u_xlat16_2.xy * vec2(vec2(_BumpScale, _BumpScale));
    u_xlat3.x = dot(vs_TEXCOORD4.xyz, u_xlat16_2.xyz);
    u_xlat3.y = dot(vs_TEXCOORD5.xyz, u_xlat16_2.xyz);
    u_xlat3.z = dot(vs_TEXCOORD6.xyz, u_xlat16_2.xyz);
    u_xlat16_2.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat16_2.x = inversesqrt(u_xlat16_2.x);
    u_xlat16_2.xyz = u_xlat16_2.xxx * u_xlat3.xyz;
    u_xlat16_2.xyz = (uint((gl_FrontFacing ? 0xffffffffu : uint(0))) != uint(0u)) ? u_xlat16_2.xyz : (-u_xlat16_2.xyz);
    SV_Target0.xyz = u_xlat16_2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0470588244;
    u_xlat0.xzw = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat0.xzw = u_xlat0.xzw * u_xlat3.xxx + mhy_AvatarLightDir.xyz;
    u_xlat3.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat0.xzw = u_xlat0.xzw * u_xlat3.xxx;
    u_xlat16_29 = dot(u_xlat16_2.xyz, u_xlat0.xzw);
    u_xlat16_2.x = dot(u_xlat16_2.xyz, mhy_AvatarLightDir.xyz);
    u_xlat16_0 = u_xlat16_2.x * 0.497500002 + 0.5;
    u_xlat16_2.x = max(u_xlat16_29, 0.00100000005);
    u_xlat16_2.x = log2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * _Shininess;
    u_xlat16_2.x = exp2(u_xlat16_2.x);
    u_xlat10_3.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy, -1.0).xyz;
    u_xlat18 = (-u_xlat10_3.z) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18.x = !!(u_xlat18<u_xlat16_2.x);
#else
    u_xlatb18.x = u_xlat18<u_xlat16_2.x;
#endif
    u_xlat16_2.xyz = _SpecularColor.xyz * vec3(_SpecMulti);
    u_xlat16_2.xyz = u_xlat10_3.xxx * u_xlat16_2.xyz;
    u_xlat3.xzw = u_xlat16_2.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
    u_xlat3.xzw = mix(vec3(0.0, 0.0, 0.0), u_xlat3.xzw, vec3(u_xlatb18.xxx));
    u_xlatb18.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseLightMapColorAO, _UseVertexColorAO, _UseLightMapColorAO, _UseVertexColorAO)).xy;
    u_xlat16_2.x = (u_xlatb18.x) ? u_xlat10_3.y : 0.5;
    u_xlat16_11 = u_xlat16_2.x * vs_COLOR0.x;
    u_xlat16_2.x = (u_xlatb18.y) ? u_xlat16_11 : u_xlat16_2.x;
    u_xlat16_0 = u_xlat16_0 + u_xlat16_2.x;
    u_xlat0.x = u_xlat16_0 * 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18.x = !!(0.949999988<u_xlat16_2.x);
#else
    u_xlatb18.x = 0.949999988<u_xlat16_2.x;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(u_xlat16_2.x<0.0500000007);
#else
    u_xlatb27 = u_xlat16_2.x<0.0500000007;
#endif
    u_xlat16_2.x = (u_xlatb18.x) ? 1.0 : u_xlat0.x;
    u_xlat16_2.x = (u_xlatb27) ? 0.0 : u_xlat16_2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(u_xlat16_2.x<_LightArea);
#else
    u_xlatb0.x = u_xlat16_2.x<_LightArea;
#endif
    u_xlat16_2.x = (-u_xlat16_2.x) + _LightArea;
    u_xlat16_2.x = u_xlat16_2.x / _ShadowTransitionRange;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18.x = !!(int((gl_FrontFacing ? 0xffffffffu : uint(0)))==0);
#else
    u_xlatb18.x = int((gl_FrontFacing ? 0xffffffffu : uint(0)))==0;
#endif
    u_xlatb18.x = u_xlatb0.x || u_xlatb18.x;
    u_xlat16_27 = u_xlat16_2.x + 0.00999999978;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat16_2.x>=1.0);
#else
    u_xlatb12 = u_xlat16_2.x>=1.0;
#endif
    u_xlat16_27 = log2(u_xlat16_27);
    u_xlat27 = u_xlat16_27 * _ShadowTransitionSoftness;
    u_xlat27 = exp2(u_xlat27);
    u_xlat27 = min(u_xlat27, 1.0);
    u_xlat27 = (u_xlatb12) ? 1.0 : u_xlat27;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition));
#else
    u_xlatb12 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition);
#endif
    u_xlat27 = (u_xlatb12) ? u_xlat27 : 1.0;
    u_xlat0.x = u_xlatb0.x ? u_xlat27 : float(0.0);
    u_xlat16_4.xyz = vec3(_FirstShadowMultColor.xxyz.y + (-_CoolShadowMultColor.x), _FirstShadowMultColor.xxyz.z + (-_CoolShadowMultColor.y), float(_FirstShadowMultColor.z) + (-_CoolShadowMultColor.z));
    u_xlat4.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_4.xyz + _CoolShadowMultColor.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex));
#else
    u_xlatb27 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex);
#endif
    u_xlat16_2.xyz = (bool(u_xlatb27)) ? u_xlat4.xyz : vec3(_FirstShadowMultColor.x, _FirstShadowMultColor.y, _FirstShadowMultColor.z);
    u_xlat16_4.xyz = u_xlat16_2.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat4.xyz = u_xlat0.xxx * u_xlat16_4.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_5.xyz = (bool(u_xlatb12)) ? u_xlat4.xyz : u_xlat16_2.xyz;
    u_xlat16_6.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_6.xyz;
    u_xlat1.xyz = u_xlat16_6.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
    u_xlat0.xzw = (u_xlatb18.x) ? u_xlat16_5.xyz : u_xlat1.xyz;
    u_xlat16_5.xyz = u_xlat3.xzw + u_xlat0.xzw;
    u_xlat16_2.xyz = u_xlat16_6.xyz * u_xlat16_2.xyz + u_xlat3.xzw;
    u_xlat16_6.xyz = u_xlat16_6.xyz * _EmissionColor_MHY.xyz;
    u_xlat16_7.xyz = u_xlat16_6.xyz * vec3(vec3(_EmissionScaler, _EmissionScaler, _EmissionScaler)) + (-u_xlat16_5.xyz);
    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(vec3(_EmissionScaler, _EmissionScaler, _EmissionScaler)) + (-u_xlat16_2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(0.00999999978<u_xlat10_1.w);
#else
    u_xlatb0.x = 0.00999999978<u_xlat10_1.w;
#endif
    u_xlatb0.x = u_xlatb0.x && u_xlatb0.y;
    u_xlat16_29 = (u_xlatb0.x) ? u_xlat10_1.w : 0.0;
    u_xlat16_7.xyz = vec3(u_xlat16_29) * u_xlat16_7.xyz + u_xlat16_5.xyz;
    u_xlat16_5.xyz = (u_xlatb0.x) ? u_xlat16_7.xyz : u_xlat16_5.xyz;
    u_xlat9.xyz = u_xlat16_5.xyz * vec3(vec3(_ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness));
    u_xlat1.xyz = _ES_CharacterMainLightColor.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat1.xyz = vec3(vec3(_ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio)) * u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat9.xyz = u_xlat9.xyz * u_xlat1.xyz;
    u_xlat16_7.xyz = u_xlat9.xyz * vec3(10.0, 10.0, 10.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.xyz = min(max(u_xlat16_7.xyz, 0.0), 1.0);
#else
    u_xlat16_7.xyz = clamp(u_xlat16_7.xyz, 0.0, 1.0);
#endif
    u_xlat1.xyz = _ES_CharacterAmbientLightColor.xyz * vec3(_ES_CharacterAmbientLightRatio);
    u_xlat9.xyz = u_xlat1.xyz * u_xlat16_7.xyz + u_xlat9.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn));
#else
    u_xlatb1 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn);
#endif
    u_xlat16_7.xyz = (bool(u_xlatb1)) ? u_xlat9.xyz : u_xlat16_5.xyz;
    u_xlat16_8.xyz = u_xlat16_5.xyz + (-u_xlat16_7.xyz);
    u_xlat16_8.xyz = vec3(u_xlat16_29) * u_xlat16_8.xyz + u_xlat16_7.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(0.00999999978<u_xlat16_29);
#else
    u_xlatb9 = 0.00999999978<u_xlat16_29;
#endif
    u_xlat16_1.xyz = (bool(u_xlatb9)) ? u_xlat16_8.xyz : u_xlat16_7.xyz;
    u_xlat16_32 = max(u_xlat16_1.z, u_xlat16_1.y);
    u_xlat16_3.w = max(u_xlat16_1.x, u_xlat16_32);
    u_xlat16_3.xyz = u_xlat16_1.xyz / u_xlat16_3.www;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18.x = !!(1.0<u_xlat16_3.w);
#else
    u_xlatb18.x = 1.0<u_xlat16_3.w;
#endif
    u_xlat16_1.w = 1.0;
    u_xlat16_1 = (u_xlatb18.x) ? u_xlat16_3 : u_xlat16_1;
    u_xlat16_32 = min(u_xlat16_1.w, 1.10000002);
    u_xlat16_33 = u_xlat16_1.w + (-u_xlat16_32);
    SV_Target1.xyz = u_xlat16_1.xyz;
    u_xlat16_32 = u_xlat16_29 * u_xlat16_33 + u_xlat16_32;
    SV_Target1.w = u_xlat16_32 * 0.0500000007;
    u_xlat16_6.xyz = vec3(u_xlat16_29) * u_xlat16_6.xyz + u_xlat16_2.xyz;
    u_xlat16_2.xyz = (u_xlatb0.x) ? u_xlat16_6.xyz : u_xlat16_2.xyz;
    u_xlat16_5.xyz = (-u_xlat16_2.xyz) + u_xlat16_5.xyz;
    u_xlat16_5.xyz = vec3(u_xlat16_29) * u_xlat16_5.xyz + u_xlat16_2.xyz;
    u_xlat16_2.xyz = (bool(u_xlatb9)) ? u_xlat16_5.xyz : u_xlat16_2.xyz;
    SV_Target2.xy = u_xlat16_2.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_2.x = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb0.x) ? u_xlat16_2.x : u_xlat16_2.z;
    SV_Target2.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "MSAA_INTERPOLATION" "TOON_SPECULAR_ON" "TOON_LIGHTMAP_ON" "BACK_FACE_ON" "NORMAL_MAP_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
float u_xlat12;
void main()
{
    u_xlat0.x = hlslcc_mtx4x4unity_ObjectToWorld[0].y;
    u_xlat0.y = hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat0.z = hlslcc_mtx4x4unity_ObjectToWorld[2].y;
    u_xlat1.xyw = (-_WorldSpaceCameraPos.xyz) + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat0.w = u_xlat1.y;
    u_xlat2.xyz = in_POSITION0.xyz;
    u_xlat2.w = 1.0;
    u_xlat0.x = dot(u_xlat0, u_xlat2);
    u_xlat0 = u_xlat0.xxxx * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat3.w = u_xlat1.x;
    u_xlat3.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;
    u_xlat3.y = hlslcc_mtx4x4unity_ObjectToWorld[1].x;
    u_xlat3.z = hlslcc_mtx4x4unity_ObjectToWorld[2].x;
    u_xlat3.x = dot(u_xlat3, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat3.xxxx + u_xlat0;
    u_xlat1.x = hlslcc_mtx4x4unity_ObjectToWorld[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_ObjectToWorld[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_ObjectToWorld[2].z;
    u_xlat1.x = dot(u_xlat1, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat1.xxxx + u_xlat0;
    u_xlat1.x = hlslcc_mtx4x4unity_ObjectToWorld[0].w;
    u_xlat1.y = hlslcc_mtx4x4unity_ObjectToWorld[1].w;
    u_xlat1.z = hlslcc_mtx4x4unity_ObjectToWorld[2].w;
    u_xlat1.w = hlslcc_mtx4x4unity_ObjectToWorld[3].w;
    u_xlat1.x = dot(u_xlat1, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[3] * u_xlat1.xxxx + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD1 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.zw = u_xlat0.zw;
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD3.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
    u_xlat12 = in_TANGENT0.w * unity_WorldTransformParams.w;
    u_xlat2.xyz = vec3(u_xlat12) * u_xlat2.xyz;
    vs_TEXCOORD4.y = u_xlat2.x;
    vs_TEXCOORD4.x = u_xlat1.z;
    vs_TEXCOORD4.z = u_xlat0.y;
    vs_TEXCOORD5.x = u_xlat1.x;
    vs_TEXCOORD6.x = u_xlat1.y;
    vs_TEXCOORD5.z = u_xlat0.z;
    vs_TEXCOORD6.z = u_xlat0.x;
    vs_TEXCOORD5.y = u_xlat2.y;
    vs_TEXCOORD6.y = u_xlat2.z;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	mediump vec4 _Color;
uniform 	float _MainTexAlphaUse;
uniform 	mediump float _MainTexAlphaCutoff;
uniform 	mediump float _BumpScale;
uniform 	float _UseLightMapColorAO;
uniform 	float _UseVertexColorAO;
uniform 	mediump float _LightArea;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	float _UseCoolShadowColorOrTex;
uniform 	mediump vec3 _CoolShadowMultColor;
uniform 	float _UseShadowTransition;
uniform 	float _ShadowTransitionRange;
uniform 	float _ShadowTransitionSoftness;
uniform 	mediump vec3 _SpecularColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump float _EmissionScaler;
uniform 	mediump vec3 _EmissionColor_MHY;
uniform 	float _ES_CharacterAmbientLightOn;
uniform 	float _ES_CharacterAmbientBrightness;
uniform 	vec3 _ES_CharacterMainLightColor;
uniform 	float _ES_CharacterMainLightBrightness;
uniform 	vec3 _ES_CharacterAmbientLightColor;
uniform 	float _ES_CharacterMainLightRatio;
uniform 	float _ES_CharacterAmbientLightRatio;
uniform 	float _ES_CharacterColorTone;
uniform 	vec3 mhy_AvatarLightDir;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMapTex;
in mediump vec4 vs_COLOR0;
in highp vec2 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD5;
in highp vec3 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec4 u_xlat0;
mediump float u_xlat16_0;
lowp vec3 u_xlat10_0;
bvec3 u_xlatb0;
vec3 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
bool u_xlatb1;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump vec4 u_xlat16_3;
lowp vec4 u_xlat10_3;
bvec2 u_xlatb3;
vec3 u_xlat4;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
vec3 u_xlat9;
bool u_xlatb9;
mediump float u_xlat16_11;
vec2 u_xlat18;
mediump float u_xlat16_18;
bool u_xlatb18;
float u_xlat27;
mediump float u_xlat16_27;
bool u_xlatb27;
mediump float u_xlat16_29;
mediump float u_xlat16_32;
mediump float u_xlat16_33;
void main()
{
    u_xlat0.xy = dFdx(vs_TEXCOORD0.xy);
    u_xlat18.xy = dFdy(vs_TEXCOORD0.xy);
    u_xlat0.xy = u_xlat18.xy + u_xlat0.xy;
    u_xlat18.xy = (-u_xlat0.xy) * vec2(0.25, 0.25) + vs_TEXCOORD0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25) + vs_TEXCOORD0.xy;
    u_xlat0.xy = (int(gl_SampleID) != 0) ? u_xlat18.xy : u_xlat0.xy;
    u_xlat10_1 = textureLod(_MainTex, u_xlat0.xy, 0.0);
    u_xlat16_2.x = u_xlat10_1.w + (-_MainTexAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(u_xlat16_2.x<0.0);
#else
    u_xlatb18 = u_xlat16_2.x<0.0;
#endif
    u_xlatb3.xy = equal(vec4(_MainTexAlphaUse), vec4(1.0, 2.0, 0.0, 0.0)).xy;
    u_xlatb18 = u_xlatb18 && u_xlatb3.x;
    if((int(u_xlatb18) * int(0xffffffffu))!=0){discard;}
    u_xlat10_3.xzw = textureLod(_BumpMap, u_xlat0.xy, 0.0).xyz;
    u_xlat10_0.xyz = textureLod(_LightMapTex, u_xlat0.xy, 0.0).xyz;
    u_xlat16_2.xyz = u_xlat10_3.xzw * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_2.xy = u_xlat16_2.xy * vec2(vec2(_BumpScale, _BumpScale));
    u_xlat4.x = dot(vs_TEXCOORD4.xyz, u_xlat16_2.xyz);
    u_xlat4.y = dot(vs_TEXCOORD5.xyz, u_xlat16_2.xyz);
    u_xlat4.z = dot(vs_TEXCOORD6.xyz, u_xlat16_2.xyz);
    u_xlat16_2.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat16_2.x = inversesqrt(u_xlat16_2.x);
    u_xlat16_2.xyz = u_xlat16_2.xxx * u_xlat4.xyz;
    u_xlat16_2.xyz = (uint((gl_FrontFacing ? 0xffffffffu : uint(0))) != uint(0u)) ? u_xlat16_2.xyz : (-u_xlat16_2.xyz);
    SV_Target0.xyz = u_xlat16_2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0470588244;
    u_xlat3.xzw = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat27 = dot(u_xlat3.xzw, u_xlat3.xzw);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat3.xzw = u_xlat3.xzw * vec3(u_xlat27) + mhy_AvatarLightDir.xyz;
    u_xlat27 = dot(u_xlat3.xzw, u_xlat3.xzw);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat3.xzw = vec3(u_xlat27) * u_xlat3.xzw;
    u_xlat16_29 = dot(u_xlat16_2.xyz, u_xlat3.xzw);
    u_xlat16_2.x = dot(u_xlat16_2.xyz, mhy_AvatarLightDir.xyz);
    u_xlat16_27 = u_xlat16_2.x * 0.497500002 + 0.5;
    u_xlat16_2.x = max(u_xlat16_29, 0.00100000005);
    u_xlat16_2.x = log2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * _Shininess;
    u_xlat16_2.x = exp2(u_xlat16_2.x);
    u_xlat18.x = (-u_xlat10_0.z) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(u_xlat18.x<u_xlat16_2.x);
#else
    u_xlatb18 = u_xlat18.x<u_xlat16_2.x;
#endif
    u_xlat16_2.xyz = _SpecularColor.xyz * vec3(_SpecMulti);
    u_xlat16_2.xyz = u_xlat10_0.xxx * u_xlat16_2.xyz;
    u_xlat3.xzw = u_xlat16_2.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
    u_xlat3.xzw = mix(vec3(0.0, 0.0, 0.0), u_xlat3.xzw, vec3(bvec3(u_xlatb18)));
    u_xlatb0.xz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseLightMapColorAO, _UseLightMapColorAO, _UseVertexColorAO, _UseLightMapColorAO)).xz;
    u_xlat16_2.x = (u_xlatb0.x) ? u_xlat10_0.y : 0.5;
    u_xlat16_11 = u_xlat16_2.x * vs_COLOR0.x;
    u_xlat16_2.x = (u_xlatb0.z) ? u_xlat16_11 : u_xlat16_2.x;
    u_xlat16_0 = u_xlat16_27 + u_xlat16_2.x;
    u_xlat0.x = u_xlat16_0 * 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(0.949999988<u_xlat16_2.x);
#else
    u_xlatb9 = 0.949999988<u_xlat16_2.x;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(u_xlat16_2.x<0.0500000007);
#else
    u_xlatb18 = u_xlat16_2.x<0.0500000007;
#endif
    u_xlat16_2.x = (u_xlatb9) ? 1.0 : u_xlat0.x;
    u_xlat16_2.x = (u_xlatb18) ? 0.0 : u_xlat16_2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(u_xlat16_2.x<_LightArea);
#else
    u_xlatb0.x = u_xlat16_2.x<_LightArea;
#endif
    u_xlat16_2.x = (-u_xlat16_2.x) + _LightArea;
    u_xlat16_2.x = u_xlat16_2.x / _ShadowTransitionRange;
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(int((gl_FrontFacing ? 0xffffffffu : uint(0)))==0);
#else
    u_xlatb9 = int((gl_FrontFacing ? 0xffffffffu : uint(0)))==0;
#endif
    u_xlatb9 = u_xlatb0.x || u_xlatb9;
    u_xlat16_18 = u_xlat16_2.x + 0.00999999978;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(u_xlat16_2.x>=1.0);
#else
    u_xlatb27 = u_xlat16_2.x>=1.0;
#endif
    u_xlat16_18 = log2(u_xlat16_18);
    u_xlat18.x = u_xlat16_18 * _ShadowTransitionSoftness;
    u_xlat18.x = exp2(u_xlat18.x);
    u_xlat18.x = min(u_xlat18.x, 1.0);
    u_xlat18.x = (u_xlatb27) ? 1.0 : u_xlat18.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition));
#else
    u_xlatb27 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition);
#endif
    u_xlat18.x = (u_xlatb27) ? u_xlat18.x : 1.0;
    u_xlat0.x = u_xlatb0.x ? u_xlat18.x : float(0.0);
    u_xlat16_4.xyz = vec3(_FirstShadowMultColor.xxyz.y + (-_CoolShadowMultColor.x), _FirstShadowMultColor.xxyz.z + (-_CoolShadowMultColor.y), float(_FirstShadowMultColor.z) + (-_CoolShadowMultColor.z));
    u_xlat4.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_4.xyz + _CoolShadowMultColor.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex));
#else
    u_xlatb18 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex);
#endif
    u_xlat16_2.xyz = (bool(u_xlatb18)) ? u_xlat4.xyz : vec3(_FirstShadowMultColor.x, _FirstShadowMultColor.y, _FirstShadowMultColor.z);
    u_xlat16_4.xyz = u_xlat16_2.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat4.xyz = u_xlat0.xxx * u_xlat16_4.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_5.xyz = (bool(u_xlatb27)) ? u_xlat4.xyz : u_xlat16_2.xyz;
    u_xlat16_6.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_6.xyz;
    u_xlat0.xzw = u_xlat16_6.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
    u_xlat0.xyz = (bool(u_xlatb9)) ? u_xlat16_5.xyz : u_xlat0.xzw;
    u_xlat16_5.xyz = u_xlat3.xzw + u_xlat0.xyz;
    u_xlat16_2.xyz = u_xlat16_6.xyz * u_xlat16_2.xyz + u_xlat3.xzw;
    u_xlat16_6.xyz = u_xlat16_6.xyz * _EmissionColor_MHY.xyz;
    u_xlat16_7.xyz = u_xlat16_6.xyz * vec3(vec3(_EmissionScaler, _EmissionScaler, _EmissionScaler)) + (-u_xlat16_5.xyz);
    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(vec3(_EmissionScaler, _EmissionScaler, _EmissionScaler)) + (-u_xlat16_2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(0.00999999978<u_xlat10_1.w);
#else
    u_xlatb0.x = 0.00999999978<u_xlat10_1.w;
#endif
    u_xlatb0.x = u_xlatb0.x && u_xlatb3.y;
    u_xlat16_29 = (u_xlatb0.x) ? u_xlat10_1.w : 0.0;
    u_xlat16_7.xyz = vec3(u_xlat16_29) * u_xlat16_7.xyz + u_xlat16_5.xyz;
    u_xlat16_5.xyz = (u_xlatb0.x) ? u_xlat16_7.xyz : u_xlat16_5.xyz;
    u_xlat9.xyz = u_xlat16_5.xyz * vec3(vec3(_ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness));
    u_xlat1.xyz = _ES_CharacterMainLightColor.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat1.xyz = vec3(vec3(_ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio)) * u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat9.xyz = u_xlat9.xyz * u_xlat1.xyz;
    u_xlat16_7.xyz = u_xlat9.xyz * vec3(10.0, 10.0, 10.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.xyz = min(max(u_xlat16_7.xyz, 0.0), 1.0);
#else
    u_xlat16_7.xyz = clamp(u_xlat16_7.xyz, 0.0, 1.0);
#endif
    u_xlat1.xyz = _ES_CharacterAmbientLightColor.xyz * vec3(_ES_CharacterAmbientLightRatio);
    u_xlat9.xyz = u_xlat1.xyz * u_xlat16_7.xyz + u_xlat9.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn));
#else
    u_xlatb1 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn);
#endif
    u_xlat16_7.xyz = (bool(u_xlatb1)) ? u_xlat9.xyz : u_xlat16_5.xyz;
    u_xlat16_8.xyz = u_xlat16_5.xyz + (-u_xlat16_7.xyz);
    u_xlat16_8.xyz = vec3(u_xlat16_29) * u_xlat16_8.xyz + u_xlat16_7.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(0.00999999978<u_xlat16_29);
#else
    u_xlatb9 = 0.00999999978<u_xlat16_29;
#endif
    u_xlat16_1.xyz = (bool(u_xlatb9)) ? u_xlat16_8.xyz : u_xlat16_7.xyz;
    u_xlat16_32 = max(u_xlat16_1.z, u_xlat16_1.y);
    u_xlat16_3.w = max(u_xlat16_1.x, u_xlat16_32);
    u_xlat16_3.xyz = u_xlat16_1.xyz / u_xlat16_3.www;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(1.0<u_xlat16_3.w);
#else
    u_xlatb18 = 1.0<u_xlat16_3.w;
#endif
    u_xlat16_1.w = 1.0;
    u_xlat16_1 = (bool(u_xlatb18)) ? u_xlat16_3 : u_xlat16_1;
    u_xlat16_32 = min(u_xlat16_1.w, 1.10000002);
    u_xlat16_33 = u_xlat16_1.w + (-u_xlat16_32);
    SV_Target1.xyz = u_xlat16_1.xyz;
    u_xlat16_32 = u_xlat16_29 * u_xlat16_33 + u_xlat16_32;
    SV_Target1.w = u_xlat16_32 * 0.0500000007;
    u_xlat16_6.xyz = vec3(u_xlat16_29) * u_xlat16_6.xyz + u_xlat16_2.xyz;
    u_xlat16_2.xyz = (u_xlatb0.x) ? u_xlat16_6.xyz : u_xlat16_2.xyz;
    u_xlat16_5.xyz = (-u_xlat16_2.xyz) + u_xlat16_5.xyz;
    u_xlat16_5.xyz = vec3(u_xlat16_29) * u_xlat16_5.xyz + u_xlat16_2.xyz;
    u_xlat16_2.xyz = (bool(u_xlatb9)) ? u_xlat16_5.xyz : u_xlat16_2.xyz;
    SV_Target2.xy = u_xlat16_2.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_2.x = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb0.x) ? u_xlat16_2.x : u_xlat16_2.z;
    SV_Target2.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "LINE_INTERPOLATION" "TOON_SPECULAR_ON" "TOON_LIGHTMAP_ON" "BACK_FACE_ON" "NORMAL_MAP_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
float u_xlat12;
void main()
{
    u_xlat0.x = hlslcc_mtx4x4unity_ObjectToWorld[0].y;
    u_xlat0.y = hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat0.z = hlslcc_mtx4x4unity_ObjectToWorld[2].y;
    u_xlat1.xyw = (-_WorldSpaceCameraPos.xyz) + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat0.w = u_xlat1.y;
    u_xlat2.xyz = in_POSITION0.xyz;
    u_xlat2.w = 1.0;
    u_xlat0.x = dot(u_xlat0, u_xlat2);
    u_xlat0 = u_xlat0.xxxx * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat3.w = u_xlat1.x;
    u_xlat3.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;
    u_xlat3.y = hlslcc_mtx4x4unity_ObjectToWorld[1].x;
    u_xlat3.z = hlslcc_mtx4x4unity_ObjectToWorld[2].x;
    u_xlat3.x = dot(u_xlat3, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat3.xxxx + u_xlat0;
    u_xlat1.x = hlslcc_mtx4x4unity_ObjectToWorld[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_ObjectToWorld[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_ObjectToWorld[2].z;
    u_xlat1.x = dot(u_xlat1, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat1.xxxx + u_xlat0;
    u_xlat1.x = hlslcc_mtx4x4unity_ObjectToWorld[0].w;
    u_xlat1.y = hlslcc_mtx4x4unity_ObjectToWorld[1].w;
    u_xlat1.z = hlslcc_mtx4x4unity_ObjectToWorld[2].w;
    u_xlat1.w = hlslcc_mtx4x4unity_ObjectToWorld[3].w;
    u_xlat1.x = dot(u_xlat1, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[3] * u_xlat1.xxxx + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD1 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.zw = u_xlat0.zw;
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD3.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
    u_xlat12 = in_TANGENT0.w * unity_WorldTransformParams.w;
    u_xlat2.xyz = vec3(u_xlat12) * u_xlat2.xyz;
    vs_TEXCOORD4.y = u_xlat2.x;
    vs_TEXCOORD4.x = u_xlat1.z;
    vs_TEXCOORD4.z = u_xlat0.y;
    vs_TEXCOORD5.x = u_xlat1.x;
    vs_TEXCOORD6.x = u_xlat1.y;
    vs_TEXCOORD5.z = u_xlat0.z;
    vs_TEXCOORD6.z = u_xlat0.x;
    vs_TEXCOORD5.y = u_xlat2.y;
    vs_TEXCOORD6.y = u_xlat2.z;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	mediump vec4 _Color;
uniform 	float _MainTexAlphaUse;
uniform 	mediump float _MainTexAlphaCutoff;
uniform 	mediump float _BumpScale;
uniform 	float _UseLightMapColorAO;
uniform 	float _UseVertexColorAO;
uniform 	mediump float _LightArea;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	float _UseCoolShadowColorOrTex;
uniform 	mediump vec3 _CoolShadowMultColor;
uniform 	float _UseShadowTransition;
uniform 	float _ShadowTransitionRange;
uniform 	float _ShadowTransitionSoftness;
uniform 	mediump vec3 _SpecularColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump float _EmissionScaler;
uniform 	mediump vec3 _EmissionColor_MHY;
uniform 	float _ES_CharacterAmbientLightOn;
uniform 	float _ES_CharacterAmbientBrightness;
uniform 	vec3 _ES_CharacterMainLightColor;
uniform 	float _ES_CharacterMainLightBrightness;
uniform 	vec3 _ES_CharacterAmbientLightColor;
uniform 	float _ES_CharacterMainLightRatio;
uniform 	float _ES_CharacterAmbientLightRatio;
uniform 	float _ES_CharacterColorTone;
uniform 	vec3 mhy_AvatarLightDir;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMapTex;
in mediump vec4 vs_COLOR0;
in highp vec2 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD5;
in highp vec3 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec4 u_xlat0;
mediump float u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
vec3 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
bool u_xlatb1;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump vec4 u_xlat16_3;
lowp vec3 u_xlat10_3;
vec3 u_xlat4;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
vec3 u_xlat9;
bool u_xlatb9;
mediump float u_xlat16_11;
bool u_xlatb12;
float u_xlat18;
bvec2 u_xlatb18;
float u_xlat27;
mediump float u_xlat16_27;
bool u_xlatb27;
mediump float u_xlat16_29;
mediump float u_xlat16_32;
mediump float u_xlat16_33;
void main()
{
    u_xlatb0.xy = equal(vec4(_MainTexAlphaUse), vec4(1.0, 2.0, 0.0, 0.0)).xy;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy, -1.0);
    u_xlat16_2.x = u_xlat10_1.w + (-_MainTexAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb18.x = !!(u_xlat16_2.x<0.0);
#else
    u_xlatb18.x = u_xlat16_2.x<0.0;
#endif
    u_xlatb0.x = u_xlatb0.x && u_xlatb18.x;
    if((int(u_xlatb0.x) * int(0xffffffffu))!=0){discard;}
    u_xlat10_0.xzw = texture(_BumpMap, vs_TEXCOORD0.xy, -1.0).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xzw * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_2.xy = u_xlat16_2.xy * vec2(vec2(_BumpScale, _BumpScale));
    u_xlat3.x = dot(vs_TEXCOORD4.xyz, u_xlat16_2.xyz);
    u_xlat3.y = dot(vs_TEXCOORD5.xyz, u_xlat16_2.xyz);
    u_xlat3.z = dot(vs_TEXCOORD6.xyz, u_xlat16_2.xyz);
    u_xlat16_2.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat16_2.x = inversesqrt(u_xlat16_2.x);
    u_xlat16_2.xyz = u_xlat16_2.xxx * u_xlat3.xyz;
    u_xlat16_2.xyz = (uint((gl_FrontFacing ? 0xffffffffu : uint(0))) != uint(0u)) ? u_xlat16_2.xyz : (-u_xlat16_2.xyz);
    SV_Target0.xyz = u_xlat16_2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0470588244;
    u_xlat0.xzw = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat0.xzw = u_xlat0.xzw * u_xlat3.xxx + mhy_AvatarLightDir.xyz;
    u_xlat3.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat0.xzw = u_xlat0.xzw * u_xlat3.xxx;
    u_xlat16_29 = dot(u_xlat16_2.xyz, u_xlat0.xzw);
    u_xlat16_2.x = dot(u_xlat16_2.xyz, mhy_AvatarLightDir.xyz);
    u_xlat16_0 = u_xlat16_2.x * 0.497500002 + 0.5;
    u_xlat16_2.x = max(u_xlat16_29, 0.00100000005);
    u_xlat16_2.x = log2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * _Shininess;
    u_xlat16_2.x = exp2(u_xlat16_2.x);
    u_xlat10_3.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy, -1.0).xyz;
    u_xlat18 = (-u_xlat10_3.z) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18.x = !!(u_xlat18<u_xlat16_2.x);
#else
    u_xlatb18.x = u_xlat18<u_xlat16_2.x;
#endif
    u_xlat16_2.xyz = _SpecularColor.xyz * vec3(_SpecMulti);
    u_xlat16_2.xyz = u_xlat10_3.xxx * u_xlat16_2.xyz;
    u_xlat3.xzw = u_xlat16_2.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
    u_xlat3.xzw = mix(vec3(0.0, 0.0, 0.0), u_xlat3.xzw, vec3(u_xlatb18.xxx));
    u_xlatb18.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseLightMapColorAO, _UseVertexColorAO, _UseLightMapColorAO, _UseVertexColorAO)).xy;
    u_xlat16_2.x = (u_xlatb18.x) ? u_xlat10_3.y : 0.5;
    u_xlat16_11 = u_xlat16_2.x * vs_COLOR0.x;
    u_xlat16_2.x = (u_xlatb18.y) ? u_xlat16_11 : u_xlat16_2.x;
    u_xlat16_0 = u_xlat16_0 + u_xlat16_2.x;
    u_xlat0.x = u_xlat16_0 * 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18.x = !!(0.949999988<u_xlat16_2.x);
#else
    u_xlatb18.x = 0.949999988<u_xlat16_2.x;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(u_xlat16_2.x<0.0500000007);
#else
    u_xlatb27 = u_xlat16_2.x<0.0500000007;
#endif
    u_xlat16_2.x = (u_xlatb18.x) ? 1.0 : u_xlat0.x;
    u_xlat16_2.x = (u_xlatb27) ? 0.0 : u_xlat16_2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(u_xlat16_2.x<_LightArea);
#else
    u_xlatb0.x = u_xlat16_2.x<_LightArea;
#endif
    u_xlat16_2.x = (-u_xlat16_2.x) + _LightArea;
    u_xlat16_2.x = u_xlat16_2.x / _ShadowTransitionRange;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18.x = !!(int((gl_FrontFacing ? 0xffffffffu : uint(0)))==0);
#else
    u_xlatb18.x = int((gl_FrontFacing ? 0xffffffffu : uint(0)))==0;
#endif
    u_xlatb18.x = u_xlatb0.x || u_xlatb18.x;
    u_xlat16_27 = u_xlat16_2.x + 0.00999999978;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat16_2.x>=1.0);
#else
    u_xlatb12 = u_xlat16_2.x>=1.0;
#endif
    u_xlat16_27 = log2(u_xlat16_27);
    u_xlat27 = u_xlat16_27 * _ShadowTransitionSoftness;
    u_xlat27 = exp2(u_xlat27);
    u_xlat27 = min(u_xlat27, 1.0);
    u_xlat27 = (u_xlatb12) ? 1.0 : u_xlat27;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition));
#else
    u_xlatb12 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition);
#endif
    u_xlat27 = (u_xlatb12) ? u_xlat27 : 1.0;
    u_xlat0.x = u_xlatb0.x ? u_xlat27 : float(0.0);
    u_xlat16_4.xyz = vec3(_FirstShadowMultColor.xxyz.y + (-_CoolShadowMultColor.x), _FirstShadowMultColor.xxyz.z + (-_CoolShadowMultColor.y), float(_FirstShadowMultColor.z) + (-_CoolShadowMultColor.z));
    u_xlat4.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_4.xyz + _CoolShadowMultColor.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex));
#else
    u_xlatb27 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex);
#endif
    u_xlat16_2.xyz = (bool(u_xlatb27)) ? u_xlat4.xyz : vec3(_FirstShadowMultColor.x, _FirstShadowMultColor.y, _FirstShadowMultColor.z);
    u_xlat16_4.xyz = u_xlat16_2.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat4.xyz = u_xlat0.xxx * u_xlat16_4.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_5.xyz = (bool(u_xlatb12)) ? u_xlat4.xyz : u_xlat16_2.xyz;
    u_xlat16_6.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_6.xyz;
    u_xlat1.xyz = u_xlat16_6.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
    u_xlat0.xzw = (u_xlatb18.x) ? u_xlat16_5.xyz : u_xlat1.xyz;
    u_xlat16_5.xyz = u_xlat3.xzw + u_xlat0.xzw;
    u_xlat16_2.xyz = u_xlat16_6.xyz * u_xlat16_2.xyz + u_xlat3.xzw;
    u_xlat16_6.xyz = u_xlat16_6.xyz * _EmissionColor_MHY.xyz;
    u_xlat16_7.xyz = u_xlat16_6.xyz * vec3(vec3(_EmissionScaler, _EmissionScaler, _EmissionScaler)) + (-u_xlat16_5.xyz);
    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(vec3(_EmissionScaler, _EmissionScaler, _EmissionScaler)) + (-u_xlat16_2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(0.00999999978<u_xlat10_1.w);
#else
    u_xlatb0.x = 0.00999999978<u_xlat10_1.w;
#endif
    u_xlatb0.x = u_xlatb0.x && u_xlatb0.y;
    u_xlat16_29 = (u_xlatb0.x) ? u_xlat10_1.w : 0.0;
    u_xlat16_7.xyz = vec3(u_xlat16_29) * u_xlat16_7.xyz + u_xlat16_5.xyz;
    u_xlat16_5.xyz = (u_xlatb0.x) ? u_xlat16_7.xyz : u_xlat16_5.xyz;
    u_xlat9.xyz = u_xlat16_5.xyz * vec3(vec3(_ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness));
    u_xlat1.xyz = _ES_CharacterMainLightColor.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat1.xyz = vec3(vec3(_ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio)) * u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat9.xyz = u_xlat9.xyz * u_xlat1.xyz;
    u_xlat16_7.xyz = u_xlat9.xyz * vec3(10.0, 10.0, 10.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.xyz = min(max(u_xlat16_7.xyz, 0.0), 1.0);
#else
    u_xlat16_7.xyz = clamp(u_xlat16_7.xyz, 0.0, 1.0);
#endif
    u_xlat1.xyz = _ES_CharacterAmbientLightColor.xyz * vec3(_ES_CharacterAmbientLightRatio);
    u_xlat9.xyz = u_xlat1.xyz * u_xlat16_7.xyz + u_xlat9.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn));
#else
    u_xlatb1 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn);
#endif
    u_xlat16_7.xyz = (bool(u_xlatb1)) ? u_xlat9.xyz : u_xlat16_5.xyz;
    u_xlat16_8.xyz = u_xlat16_5.xyz + (-u_xlat16_7.xyz);
    u_xlat16_8.xyz = vec3(u_xlat16_29) * u_xlat16_8.xyz + u_xlat16_7.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(0.00999999978<u_xlat16_29);
#else
    u_xlatb9 = 0.00999999978<u_xlat16_29;
#endif
    u_xlat16_1.xyz = (bool(u_xlatb9)) ? u_xlat16_8.xyz : u_xlat16_7.xyz;
    u_xlat16_32 = max(u_xlat16_1.z, u_xlat16_1.y);
    u_xlat16_3.w = max(u_xlat16_1.x, u_xlat16_32);
    u_xlat16_3.xyz = u_xlat16_1.xyz / u_xlat16_3.www;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18.x = !!(1.0<u_xlat16_3.w);
#else
    u_xlatb18.x = 1.0<u_xlat16_3.w;
#endif
    u_xlat16_1.w = 1.0;
    u_xlat16_1 = (u_xlatb18.x) ? u_xlat16_3 : u_xlat16_1;
    u_xlat16_32 = min(u_xlat16_1.w, 1.10000002);
    u_xlat16_33 = u_xlat16_1.w + (-u_xlat16_32);
    SV_Target1.xyz = u_xlat16_1.xyz;
    u_xlat16_32 = u_xlat16_29 * u_xlat16_33 + u_xlat16_32;
    SV_Target1.w = u_xlat16_32 * 0.0500000007;
    u_xlat16_6.xyz = vec3(u_xlat16_29) * u_xlat16_6.xyz + u_xlat16_2.xyz;
    u_xlat16_2.xyz = (u_xlatb0.x) ? u_xlat16_6.xyz : u_xlat16_2.xyz;
    u_xlat16_5.xyz = (-u_xlat16_2.xyz) + u_xlat16_5.xyz;
    u_xlat16_5.xyz = vec3(u_xlat16_29) * u_xlat16_5.xyz + u_xlat16_2.xyz;
    u_xlat16_2.xyz = (bool(u_xlatb9)) ? u_xlat16_5.xyz : u_xlat16_2.xyz;
    SV_Target2.xy = u_xlat16_2.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_2.x = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb0.x) ? u_xlat16_2.x : u_xlat16_2.z;
    SV_Target2.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "TOON_SPECULAR_ON" "TOON_LIGHTMAP_ON" "BACK_FACE_ON" "METAL_MAT" "NORMAL_MAP_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
float u_xlat12;
void main()
{
    u_xlat0.x = hlslcc_mtx4x4unity_ObjectToWorld[0].y;
    u_xlat0.y = hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat0.z = hlslcc_mtx4x4unity_ObjectToWorld[2].y;
    u_xlat1.xyw = (-_WorldSpaceCameraPos.xyz) + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat0.w = u_xlat1.y;
    u_xlat2.xyz = in_POSITION0.xyz;
    u_xlat2.w = 1.0;
    u_xlat0.x = dot(u_xlat0, u_xlat2);
    u_xlat0 = u_xlat0.xxxx * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat3.w = u_xlat1.x;
    u_xlat3.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;
    u_xlat3.y = hlslcc_mtx4x4unity_ObjectToWorld[1].x;
    u_xlat3.z = hlslcc_mtx4x4unity_ObjectToWorld[2].x;
    u_xlat3.x = dot(u_xlat3, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat3.xxxx + u_xlat0;
    u_xlat1.x = hlslcc_mtx4x4unity_ObjectToWorld[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_ObjectToWorld[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_ObjectToWorld[2].z;
    u_xlat1.x = dot(u_xlat1, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat1.xxxx + u_xlat0;
    u_xlat1.x = hlslcc_mtx4x4unity_ObjectToWorld[0].w;
    u_xlat1.y = hlslcc_mtx4x4unity_ObjectToWorld[1].w;
    u_xlat1.z = hlslcc_mtx4x4unity_ObjectToWorld[2].w;
    u_xlat1.w = hlslcc_mtx4x4unity_ObjectToWorld[3].w;
    u_xlat1.x = dot(u_xlat1, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[3] * u_xlat1.xxxx + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD1 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.zw = u_xlat0.zw;
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD3.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
    u_xlat12 = in_TANGENT0.w * unity_WorldTransformParams.w;
    u_xlat2.xyz = vec3(u_xlat12) * u_xlat2.xyz;
    vs_TEXCOORD4.y = u_xlat2.x;
    vs_TEXCOORD4.x = u_xlat1.z;
    vs_TEXCOORD4.z = u_xlat0.y;
    vs_TEXCOORD5.x = u_xlat1.x;
    vs_TEXCOORD6.x = u_xlat1.y;
    vs_TEXCOORD5.z = u_xlat0.z;
    vs_TEXCOORD6.z = u_xlat0.x;
    vs_TEXCOORD5.y = u_xlat2.y;
    vs_TEXCOORD6.y = u_xlat2.z;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToCamera[4];
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	mediump vec4 _Color;
uniform 	float _MainTexAlphaUse;
uniform 	mediump float _MainTexAlphaCutoff;
uniform 	mediump float _BumpScale;
uniform 	float _UseLightMapColorAO;
uniform 	float _UseVertexColorAO;
uniform 	mediump float _LightArea;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	float _UseCoolShadowColorOrTex;
uniform 	mediump vec3 _CoolShadowMultColor;
uniform 	float _UseShadowTransition;
uniform 	float _ShadowTransitionRange;
uniform 	float _ShadowTransitionSoftness;
uniform 	mediump vec3 _SpecularColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump float _EmissionScaler;
uniform 	mediump vec3 _EmissionColor_MHY;
uniform 	mediump float _MTMapBrightness;
uniform 	float _MTMapTileScale;
uniform 	mediump vec3 _MTMapLightColor;
uniform 	mediump vec3 _MTMapDarkColor;
uniform 	mediump vec3 _MTShadowMultiColor;
uniform 	mediump float _MTShininess;
uniform 	mediump vec3 _MTSpecularColor;
uniform 	mediump float _MTSpecularScale;
uniform 	float _ES_CharacterAmbientLightOn;
uniform 	float _ES_CharacterAmbientBrightness;
uniform 	vec3 _ES_CharacterMainLightColor;
uniform 	float _ES_CharacterMainLightBrightness;
uniform 	vec3 _ES_CharacterAmbientLightColor;
uniform 	float _ES_CharacterMainLightRatio;
uniform 	float _ES_CharacterAmbientLightRatio;
uniform 	float _ES_CharacterColorTone;
uniform 	vec3 mhy_AvatarLightDir;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MTMap;
in mediump vec4 vs_COLOR0;
in highp vec2 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD5;
in highp vec3 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec3 u_xlat10_0;
mediump vec3 u_xlat16_1;
mediump vec4 u_xlat16_2;
lowp vec4 u_xlat10_2;
bool u_xlatb2;
vec3 u_xlat3;
lowp vec4 u_xlat10_3;
bvec2 u_xlatb3;
bvec2 u_xlatb4;
mediump vec3 u_xlat16_5;
mediump float u_xlat16_6;
vec3 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
vec3 u_xlat11;
mediump vec3 u_xlat16_11;
vec3 u_xlat12;
mediump vec3 u_xlat16_12;
float u_xlat15;
mediump float u_xlat16_15;
bool u_xlatb15;
vec2 u_xlat16;
mediump float u_xlat16_16;
lowp float u_xlat10_16;
bool u_xlatb16;
mediump vec3 u_xlat16_18;
mediump vec3 u_xlat16_19;
bool u_xlatb28;
float u_xlat39;
bool u_xlatb39;
mediump float u_xlat16_40;
float u_xlat41;
bool u_xlatb41;
mediump float u_xlat16_44;
void main()
{
    u_xlat10_0.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_1.xy = u_xlat16_1.xy * vec2(vec2(_BumpScale, _BumpScale));
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, u_xlat16_1.xyz);
    u_xlat0.y = dot(vs_TEXCOORD5.xyz, u_xlat16_1.xyz);
    u_xlat0.z = dot(vs_TEXCOORD6.xyz, u_xlat16_1.xyz);
    u_xlat16_1.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat16_1.x = inversesqrt(u_xlat16_1.x);
    u_xlat16_1.xyz = u_xlat0.xyz * u_xlat16_1.xxx;
    u_xlat16_1.xyz = (uint((gl_FrontFacing ? 0xffffffffu : uint(0))) != uint(0u)) ? u_xlat16_1.xyz : (-u_xlat16_1.xyz);
    u_xlat0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat39 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat39 = inversesqrt(u_xlat39);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat39) + mhy_AvatarLightDir.xyz;
    u_xlat39 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat39 = inversesqrt(u_xlat39);
    u_xlat0.xyz = vec3(u_xlat39) * u_xlat0.xyz;
    u_xlat10_2 = texture(_MainTex, vs_TEXCOORD0.xy, -1.0);
    u_xlatb3.xy = equal(vec4(_MainTexAlphaUse), vec4(1.0, 2.0, 0.0, 0.0)).xy;
    u_xlat16_40 = u_xlat10_2.w + (-_MainTexAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb39 = !!(u_xlat16_40<0.0);
#else
    u_xlatb39 = u_xlat16_40<0.0;
#endif
    u_xlatb39 = u_xlatb3.x && u_xlatb39;
    if((int(u_xlatb39) * int(0xffffffffu))!=0){discard;}
    u_xlat10_3.xzw = texture(_LightMapTex, vs_TEXCOORD0.xy, -1.0).xyz;
    u_xlatb4.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseLightMapColorAO, _UseVertexColorAO, _UseLightMapColorAO, _UseLightMapColorAO)).xy;
    u_xlat16_5.x = (u_xlatb4.x) ? u_xlat10_3.z : 0.5;
    u_xlat16_18.xyz = u_xlat10_2.xyz * _Color.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb39 = !!(0.00999999978<u_xlat10_2.w);
#else
    u_xlatb39 = 0.00999999978<u_xlat10_2.w;
#endif
    u_xlatb2 = u_xlatb39 && u_xlatb3.y;
    u_xlat16_6 = (u_xlatb2) ? u_xlat10_2.w : 0.0;
    u_xlat16_19.x = dot(u_xlat16_1.xyz, mhy_AvatarLightDir.xyz);
    u_xlat16_15 = u_xlat16_19.x * 0.497500002 + 0.5;
    u_xlat16_19.x = u_xlat16_5.x * vs_COLOR0.x;
    u_xlat16_5.x = (u_xlatb4.y) ? u_xlat16_19.x : u_xlat16_5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb28 = !!(u_xlat16_5.x<0.0500000007);
#else
    u_xlatb28 = u_xlat16_5.x<0.0500000007;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb41 = !!(0.949999988<u_xlat16_5.x);
#else
    u_xlatb41 = 0.949999988<u_xlat16_5.x;
#endif
    u_xlat16_15 = u_xlat16_15 + u_xlat16_5.x;
    u_xlat15 = u_xlat16_15 * 0.5;
    u_xlat16_5.x = (u_xlatb41) ? 1.0 : u_xlat15;
    u_xlat16_5.x = (u_xlatb28) ? 0.0 : u_xlat16_5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(u_xlat16_5.x<_LightArea);
#else
    u_xlatb15 = u_xlat16_5.x<_LightArea;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb28 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition));
#else
    u_xlatb28 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition);
#endif
    u_xlat16_5.x = (-u_xlat16_5.x) + _LightArea;
    u_xlat16_5.x = u_xlat16_5.x / _ShadowTransitionRange;
#ifdef UNITY_ADRENO_ES3
    u_xlatb41 = !!(u_xlat16_5.x>=1.0);
#else
    u_xlatb41 = u_xlat16_5.x>=1.0;
#endif
    u_xlat16_16 = u_xlat16_5.x + 0.00999999978;
    u_xlat16_16 = log2(u_xlat16_16);
    u_xlat16.x = u_xlat16_16 * _ShadowTransitionSoftness;
    u_xlat16.x = exp2(u_xlat16.x);
    u_xlat16.x = min(u_xlat16.x, 1.0);
    u_xlat41 = (u_xlatb41) ? 1.0 : u_xlat16.x;
    u_xlat41 = (u_xlatb28) ? u_xlat41 : 1.0;
    u_xlat41 = u_xlatb15 ? u_xlat41 : float(0.0);
    u_xlat15 = u_xlatb15 ? 1.0 : float(0.0);
    u_xlat15 = ((gl_FrontFacing ? 0xffffffffu : uint(0)) != uint(0u)) ? u_xlat15 : 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(0.899999976<u_xlat10_3.x);
#else
    u_xlatb16 = 0.899999976<u_xlat10_3.x;
#endif
    if(u_xlatb16){
        u_xlat16.xy = u_xlat16_1.yy * hlslcc_mtx4x4unity_WorldToCamera[1].xy;
        u_xlat16.xy = hlslcc_mtx4x4unity_WorldToCamera[0].xy * u_xlat16_1.xx + u_xlat16.xy;
        u_xlat7.yz = hlslcc_mtx4x4unity_WorldToCamera[2].xy * u_xlat16_1.zz + u_xlat16.xy;
        u_xlat7.x = u_xlat7.y * _MTMapTileScale;
        u_xlat16_19.xy = u_xlat7.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
        u_xlat10_16 = texture(_MTMap, u_xlat16_19.xy).x;
        u_xlat16_5.x = u_xlat10_16 * _MTMapBrightness;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
        u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
        u_xlat16_19.xyz = _MTMapLightColor.xyz + (-_MTMapDarkColor.xyz);
        u_xlat16_19.xyz = u_xlat16_5.xxx * u_xlat16_19.xyz + _MTMapDarkColor.xyz;
        u_xlat16_19.xyz = u_xlat16_18.xyz * u_xlat16_19.xyz;
        u_xlat16_5.x = dot(u_xlat16_1.xyz, u_xlat0.xyz);
        u_xlat16_5.x = max(u_xlat16_5.x, 0.00100000005);
        u_xlat16_5.x = log2(u_xlat16_5.x);
        u_xlat16_5.x = u_xlat16_5.x * _MTShininess;
        u_xlat16_5.x = exp2(u_xlat16_5.x);
        u_xlat16_5.x = u_xlat16_5.x * _MTSpecularScale;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
        u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
        u_xlat16_8.xyz = u_xlat16_5.xxx * _MTSpecularColor.xyz;
        u_xlat16_8.xyz = u_xlat10_3.www * u_xlat16_8.xyz;
        u_xlat16_9.xyz = u_xlat16_19.xyz * _MTShadowMultiColor.xyz;
        u_xlat16_7.xyz = _MTShadowMultiColor.xyz + vec3(-1.0, -1.0, -1.0);
        u_xlat7.xyz = vec3(u_xlat41) * u_xlat16_7.xyz + vec3(1.0, 1.0, 1.0);
        u_xlat16_10.xyz = (bool(u_xlatb28)) ? u_xlat7.xyz : _MTShadowMultiColor.xyz;
#ifdef UNITY_ADRENO_ES3
        u_xlatb16 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(u_xlat15));
#else
        u_xlatb16 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(u_xlat15);
#endif
        u_xlat16_10.xyz = u_xlat16_19.xyz * u_xlat16_10.xyz;
        u_xlat7.xyz = u_xlat16_19.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
        u_xlat7.xyz = (bool(u_xlatb16)) ? u_xlat16_10.xyz : u_xlat7.xyz;
        u_xlat11.xyz = u_xlat16_8.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
        u_xlat16_7.xyz = u_xlat7.xyz;
        u_xlat16_11.xyz = u_xlat11.xyz;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb16 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex));
#else
        u_xlatb16 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex);
#endif
        u_xlat16_12.xyz = vec3(_FirstShadowMultColor.xxyz.y + (-_CoolShadowMultColor.x), _FirstShadowMultColor.xxyz.z + (-_CoolShadowMultColor.y), float(_FirstShadowMultColor.z) + (-_CoolShadowMultColor.z));
        u_xlat12.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_12.xyz + _CoolShadowMultColor.xyz;
        u_xlat16_19.xyz = (bool(u_xlatb16)) ? u_xlat12.xyz : vec3(_FirstShadowMultColor.x, _FirstShadowMultColor.y, _FirstShadowMultColor.z);
        u_xlat16_9.xyz = u_xlat16_18.xyz * u_xlat16_19.xyz;
        u_xlat16_12.xyz = u_xlat16_19.xyz + vec3(-1.0, -1.0, -1.0);
        u_xlat12.xyz = vec3(u_xlat41) * u_xlat16_12.xyz + vec3(1.0, 1.0, 1.0);
        u_xlat16_19.xyz = (bool(u_xlatb28)) ? u_xlat12.xyz : u_xlat16_19.xyz;
#ifdef UNITY_ADRENO_ES3
        u_xlatb15 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(u_xlat15));
#else
        u_xlatb15 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(u_xlat15);
#endif
        u_xlat16_19.xyz = u_xlat16_18.xyz * u_xlat16_19.xyz;
        u_xlat12.xyz = u_xlat16_18.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
        u_xlat7.xyz = (bool(u_xlatb15)) ? u_xlat16_19.xyz : u_xlat12.xyz;
        u_xlat16_5.x = dot(u_xlat16_1.xyz, u_xlat0.xyz);
        u_xlat16_5.x = max(u_xlat16_5.x, 0.00100000005);
        u_xlat16_5.x = log2(u_xlat16_5.x);
        u_xlat16_5.x = u_xlat16_5.x * _Shininess;
        u_xlat16_5.x = exp2(u_xlat16_5.x);
        u_xlat15 = (-u_xlat10_3.w) + 1.0;
#ifdef UNITY_ADRENO_ES3
        u_xlatb15 = !!(u_xlat15<u_xlat16_5.x);
#else
        u_xlatb15 = u_xlat15<u_xlat16_5.x;
#endif
        u_xlat16_19.xyz = _SpecularColor.xyz * vec3(_SpecMulti);
        u_xlat16_19.xyz = u_xlat10_3.xxx * u_xlat16_19.xyz;
        u_xlat3.xyz = u_xlat16_19.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
        u_xlat11.xyz = mix(vec3(0.0, 0.0, 0.0), u_xlat3.xyz, vec3(bvec3(u_xlatb15)));
        u_xlat16_7.xyz = u_xlat7.xyz;
        u_xlat16_11.xyz = u_xlat11.xyz;
    //ENDIF
    }
    u_xlat16_5.xyz = u_xlat16_18.xyz * _EmissionColor_MHY.xyz;
    u_xlat16_19.xyz = u_xlat16_7.xyz + u_xlat16_11.xyz;
    u_xlat16_8.xyz = u_xlat16_9.xyz + u_xlat16_11.xyz;
    u_xlat16_9.xyz = u_xlat16_5.xyz * vec3(vec3(_EmissionScaler, _EmissionScaler, _EmissionScaler)) + (-u_xlat16_19.xyz);
    u_xlat16_9.xyz = vec3(u_xlat16_6) * u_xlat16_9.xyz + u_xlat16_19.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(vec3(_EmissionScaler, _EmissionScaler, _EmissionScaler)) + (-u_xlat16_8.xyz);
    u_xlat16_5.xyz = vec3(u_xlat16_6) * u_xlat16_5.xyz + u_xlat16_8.xyz;
    u_xlat16_19.xyz = (bool(u_xlatb2)) ? u_xlat16_9.xyz : u_xlat16_19.xyz;
    u_xlat16_5.xyz = (bool(u_xlatb2)) ? u_xlat16_5.xyz : u_xlat16_8.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(0.00999999978<u_xlat16_6);
#else
    u_xlatb2 = 0.00999999978<u_xlat16_6;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn));
#else
    u_xlatb15 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn);
#endif
    u_xlat3.xyz = u_xlat16_19.xyz * vec3(vec3(_ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness));
    u_xlat12.xyz = _ES_CharacterMainLightColor.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat12.xyz = vec3(vec3(_ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio)) * u_xlat12.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat3.xyz = u_xlat3.xyz * u_xlat12.xyz;
    u_xlat12.xyz = _ES_CharacterAmbientLightColor.xyz * vec3(_ES_CharacterAmbientLightRatio);
    u_xlat16_8.xyz = u_xlat3.xyz * vec3(10.0, 10.0, 10.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_8.xyz = min(max(u_xlat16_8.xyz, 0.0), 1.0);
#else
    u_xlat16_8.xyz = clamp(u_xlat16_8.xyz, 0.0, 1.0);
#endif
    u_xlat3.xyz = u_xlat12.xyz * u_xlat16_8.xyz + u_xlat3.xyz;
    u_xlat16_8.xyz = (bool(u_xlatb15)) ? u_xlat3.xyz : u_xlat16_19.xyz;
    u_xlat16_9.xyz = u_xlat16_19.xyz + (-u_xlat16_8.xyz);
    u_xlat16_9.xyz = vec3(u_xlat16_6) * u_xlat16_9.xyz + u_xlat16_8.xyz;
    u_xlat16_19.xyz = (-u_xlat16_5.xyz) + u_xlat16_19.xyz;
    u_xlat16_19.xyz = vec3(u_xlat16_6) * u_xlat16_19.xyz + u_xlat16_5.xyz;
    u_xlat16_0.xyz = (bool(u_xlatb2)) ? u_xlat16_9.xyz : u_xlat16_8.xyz;
    u_xlat16_5.xyz = (bool(u_xlatb2)) ? u_xlat16_19.xyz : u_xlat16_5.xyz;
    u_xlat16_44 = max(u_xlat16_0.z, u_xlat16_0.y);
    u_xlat16_2.w = max(u_xlat16_0.x, u_xlat16_44);
#ifdef UNITY_ADRENO_ES3
    u_xlatb3.x = !!(1.0<u_xlat16_2.w);
#else
    u_xlatb3.x = 1.0<u_xlat16_2.w;
#endif
    u_xlat16_2.xyz = u_xlat16_0.xyz / u_xlat16_2.www;
    u_xlat16_0.w = 1.0;
    u_xlat16_0 = (u_xlatb3.x) ? u_xlat16_2 : u_xlat16_0;
    u_xlat16_44 = min(u_xlat16_0.w, 1.10000002);
    u_xlat16_19.x = u_xlat16_0.w + (-u_xlat16_44);
    u_xlat16_44 = u_xlat16_6 * u_xlat16_19.x + u_xlat16_44;
    SV_Target1.w = u_xlat16_44 * 0.0500000007;
    SV_Target0.xyz = u_xlat16_1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb3.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb3.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_44 = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb3.x) ? u_xlat16_44 : u_xlat16_5.z;
    SV_Target0.w = 0.0470588244;
    SV_Target1.xyz = u_xlat16_0.xyz;
    SV_Target2.xy = u_xlat16_5.xy;
    SV_Target2.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "MSAA_INTERPOLATION" "TOON_SPECULAR_ON" "TOON_LIGHTMAP_ON" "BACK_FACE_ON" "METAL_MAT" "NORMAL_MAP_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
float u_xlat12;
void main()
{
    u_xlat0.x = hlslcc_mtx4x4unity_ObjectToWorld[0].y;
    u_xlat0.y = hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat0.z = hlslcc_mtx4x4unity_ObjectToWorld[2].y;
    u_xlat1.xyw = (-_WorldSpaceCameraPos.xyz) + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat0.w = u_xlat1.y;
    u_xlat2.xyz = in_POSITION0.xyz;
    u_xlat2.w = 1.0;
    u_xlat0.x = dot(u_xlat0, u_xlat2);
    u_xlat0 = u_xlat0.xxxx * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat3.w = u_xlat1.x;
    u_xlat3.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;
    u_xlat3.y = hlslcc_mtx4x4unity_ObjectToWorld[1].x;
    u_xlat3.z = hlslcc_mtx4x4unity_ObjectToWorld[2].x;
    u_xlat3.x = dot(u_xlat3, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat3.xxxx + u_xlat0;
    u_xlat1.x = hlslcc_mtx4x4unity_ObjectToWorld[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_ObjectToWorld[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_ObjectToWorld[2].z;
    u_xlat1.x = dot(u_xlat1, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat1.xxxx + u_xlat0;
    u_xlat1.x = hlslcc_mtx4x4unity_ObjectToWorld[0].w;
    u_xlat1.y = hlslcc_mtx4x4unity_ObjectToWorld[1].w;
    u_xlat1.z = hlslcc_mtx4x4unity_ObjectToWorld[2].w;
    u_xlat1.w = hlslcc_mtx4x4unity_ObjectToWorld[3].w;
    u_xlat1.x = dot(u_xlat1, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[3] * u_xlat1.xxxx + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD1 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.zw = u_xlat0.zw;
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD3.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
    u_xlat12 = in_TANGENT0.w * unity_WorldTransformParams.w;
    u_xlat2.xyz = vec3(u_xlat12) * u_xlat2.xyz;
    vs_TEXCOORD4.y = u_xlat2.x;
    vs_TEXCOORD4.x = u_xlat1.z;
    vs_TEXCOORD4.z = u_xlat0.y;
    vs_TEXCOORD5.x = u_xlat1.x;
    vs_TEXCOORD6.x = u_xlat1.y;
    vs_TEXCOORD5.z = u_xlat0.z;
    vs_TEXCOORD6.z = u_xlat0.x;
    vs_TEXCOORD5.y = u_xlat2.y;
    vs_TEXCOORD6.y = u_xlat2.z;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToCamera[4];
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	mediump vec4 _Color;
uniform 	float _MainTexAlphaUse;
uniform 	mediump float _MainTexAlphaCutoff;
uniform 	mediump float _BumpScale;
uniform 	float _UseLightMapColorAO;
uniform 	float _UseVertexColorAO;
uniform 	mediump float _LightArea;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	float _UseCoolShadowColorOrTex;
uniform 	mediump vec3 _CoolShadowMultColor;
uniform 	float _UseShadowTransition;
uniform 	float _ShadowTransitionRange;
uniform 	float _ShadowTransitionSoftness;
uniform 	mediump vec3 _SpecularColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump float _EmissionScaler;
uniform 	mediump vec3 _EmissionColor_MHY;
uniform 	mediump float _MTMapBrightness;
uniform 	float _MTMapTileScale;
uniform 	mediump vec3 _MTMapLightColor;
uniform 	mediump vec3 _MTMapDarkColor;
uniform 	mediump vec3 _MTShadowMultiColor;
uniform 	mediump float _MTShininess;
uniform 	mediump vec3 _MTSpecularColor;
uniform 	mediump float _MTSpecularScale;
uniform 	float _ES_CharacterAmbientLightOn;
uniform 	float _ES_CharacterAmbientBrightness;
uniform 	vec3 _ES_CharacterMainLightColor;
uniform 	float _ES_CharacterMainLightBrightness;
uniform 	vec3 _ES_CharacterAmbientLightColor;
uniform 	float _ES_CharacterMainLightRatio;
uniform 	float _ES_CharacterAmbientLightRatio;
uniform 	float _ES_CharacterColorTone;
uniform 	vec3 mhy_AvatarLightDir;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MTMap;
in mediump vec4 vs_COLOR0;
in highp vec2 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD5;
in highp vec3 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec2 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec3 u_xlat10_0;
bool u_xlatb0;
vec3 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
float u_xlat3;
lowp vec4 u_xlat10_3;
bool u_xlatb3;
vec3 u_xlat4;
mediump vec3 u_xlat16_4;
bvec2 u_xlatb4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
vec3 u_xlat10;
mediump vec3 u_xlat16_10;
bool u_xlatb10;
bool u_xlatb11;
vec3 u_xlat14;
mediump vec3 u_xlat16_14;
lowp float u_xlat10_14;
bool u_xlatb14;
vec3 u_xlat21;
mediump vec3 u_xlat16_21;
vec2 u_xlat22;
bvec2 u_xlatb22;
float u_xlat33;
mediump float u_xlat16_33;
bool u_xlatb33;
bool u_xlatb34;
mediump float u_xlat16_35;
mediump float u_xlat16_38;
void main()
{
    u_xlat0.xy = dFdx(vs_TEXCOORD0.xy);
    u_xlat22.xy = dFdy(vs_TEXCOORD0.xy);
    u_xlat0.xy = u_xlat22.xy + u_xlat0.xy;
    u_xlat22.xy = (-u_xlat0.xy) * vec2(0.25, 0.25) + vs_TEXCOORD0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25) + vs_TEXCOORD0.xy;
    u_xlat0.xy = (int(gl_SampleID) != 0) ? u_xlat22.xy : u_xlat0.xy;
    u_xlat10_1.xyz = textureLod(_BumpMap, u_xlat0.xy, 0.0).xyz;
    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_2.xy = u_xlat16_2.xy * vec2(vec2(_BumpScale, _BumpScale));
    u_xlat1.x = dot(vs_TEXCOORD4.xyz, u_xlat16_2.xyz);
    u_xlat1.y = dot(vs_TEXCOORD5.xyz, u_xlat16_2.xyz);
    u_xlat1.z = dot(vs_TEXCOORD6.xyz, u_xlat16_2.xyz);
    u_xlat16_2.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat16_2.x = inversesqrt(u_xlat16_2.x);
    u_xlat16_2.xyz = u_xlat1.xyz * u_xlat16_2.xxx;
    u_xlat16_2.xyz = (uint((gl_FrontFacing ? 0xffffffffu : uint(0))) != uint(0u)) ? u_xlat16_2.xyz : (-u_xlat16_2.xyz);
    u_xlat1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat22.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat22.x = inversesqrt(u_xlat22.x);
    u_xlat1.xyz = u_xlat1.xyz * u_xlat22.xxx + mhy_AvatarLightDir.xyz;
    u_xlat22.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat22.x = inversesqrt(u_xlat22.x);
    u_xlat1.xyz = u_xlat22.xxx * u_xlat1.xyz;
    u_xlat10_3 = textureLod(_MainTex, u_xlat0.xy, 0.0);
    u_xlatb22.xy = equal(vec4(_MainTexAlphaUse), vec4(1.0, 2.0, 1.0, 2.0)).xy;
    u_xlat16_35 = u_xlat10_3.w + (-_MainTexAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb34 = !!(u_xlat16_35<0.0);
#else
    u_xlatb34 = u_xlat16_35<0.0;
#endif
    u_xlatb22.x = u_xlatb22.x && u_xlatb34;
    if((int(u_xlatb22.x) * int(0xffffffffu))!=0){discard;}
    u_xlat10_0.xyz = textureLod(_LightMapTex, u_xlat0.xy, 0.0).xyz;
    u_xlatb4.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseLightMapColorAO, _UseVertexColorAO, _UseLightMapColorAO, _UseLightMapColorAO)).xy;
    u_xlat16_35 = (u_xlatb4.x) ? u_xlat10_0.y : 0.5;
    u_xlat16_5.xyz = u_xlat10_3.xyz * _Color.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb11 = !!(0.00999999978<u_xlat10_3.w);
#else
    u_xlatb11 = 0.00999999978<u_xlat10_3.w;
#endif
    u_xlatb11 = u_xlatb11 && u_xlatb22.y;
    u_xlat16_38 = (u_xlatb11) ? u_xlat10_3.w : 0.0;
    u_xlat16_6.x = dot(u_xlat16_2.xyz, mhy_AvatarLightDir.xyz);
    u_xlat16_33 = u_xlat16_6.x * 0.497500002 + 0.5;
    u_xlat16_6.x = u_xlat16_35 * vs_COLOR0.x;
    u_xlat16_35 = (u_xlatb4.y) ? u_xlat16_6.x : u_xlat16_35;
#ifdef UNITY_ADRENO_ES3
    u_xlatb34 = !!(u_xlat16_35<0.0500000007);
#else
    u_xlatb34 = u_xlat16_35<0.0500000007;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(0.949999988<u_xlat16_35);
#else
    u_xlatb3 = 0.949999988<u_xlat16_35;
#endif
    u_xlat16_33 = u_xlat16_33 + u_xlat16_35;
    u_xlat33 = u_xlat16_33 * 0.5;
    u_xlat16_35 = (u_xlatb3) ? 1.0 : u_xlat33;
    u_xlat16_35 = (u_xlatb34) ? 0.0 : u_xlat16_35;
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(u_xlat16_35<_LightArea);
#else
    u_xlatb33 = u_xlat16_35<_LightArea;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb34 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition));
#else
    u_xlatb34 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition);
#endif
    u_xlat16_35 = (-u_xlat16_35) + _LightArea;
    u_xlat16_35 = u_xlat16_35 / _ShadowTransitionRange;
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(u_xlat16_35>=1.0);
#else
    u_xlatb3 = u_xlat16_35>=1.0;
#endif
    u_xlat16_14.x = u_xlat16_35 + 0.00999999978;
    u_xlat16_14.x = log2(u_xlat16_14.x);
    u_xlat14.x = u_xlat16_14.x * _ShadowTransitionSoftness;
    u_xlat14.x = exp2(u_xlat14.x);
    u_xlat14.x = min(u_xlat14.x, 1.0);
    u_xlat3 = (u_xlatb3) ? 1.0 : u_xlat14.x;
    u_xlat3 = (u_xlatb34) ? u_xlat3 : 1.0;
    u_xlat3 = u_xlatb33 ? u_xlat3 : float(0.0);
    u_xlat33 = u_xlatb33 ? 1.0 : float(0.0);
    u_xlat33 = ((gl_FrontFacing ? 0xffffffffu : uint(0)) != uint(0u)) ? u_xlat33 : 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(0.899999976<u_xlat10_0.x);
#else
    u_xlatb14 = 0.899999976<u_xlat10_0.x;
#endif
    if(u_xlatb14){
        u_xlat14.xy = u_xlat16_2.yy * hlslcc_mtx4x4unity_WorldToCamera[1].xy;
        u_xlat14.xy = hlslcc_mtx4x4unity_WorldToCamera[0].xy * u_xlat16_2.xx + u_xlat14.xy;
        u_xlat4.yz = hlslcc_mtx4x4unity_WorldToCamera[2].xy * u_xlat16_2.zz + u_xlat14.xy;
        u_xlat4.x = u_xlat4.y * _MTMapTileScale;
        u_xlat16_6.xy = u_xlat4.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
        u_xlat10_14 = texture(_MTMap, u_xlat16_6.xy, -1.0).x;
        u_xlat16_35 = u_xlat10_14 * _MTMapBrightness;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_35 = min(max(u_xlat16_35, 0.0), 1.0);
#else
        u_xlat16_35 = clamp(u_xlat16_35, 0.0, 1.0);
#endif
        u_xlat16_6.xyz = _MTMapLightColor.xyz + (-_MTMapDarkColor.xyz);
        u_xlat16_6.xyz = vec3(u_xlat16_35) * u_xlat16_6.xyz + _MTMapDarkColor.xyz;
        u_xlat16_6.xyz = u_xlat16_5.xyz * u_xlat16_6.xyz;
        u_xlat16_35 = dot(u_xlat16_2.xyz, u_xlat1.xyz);
        u_xlat16_35 = max(u_xlat16_35, 0.00100000005);
        u_xlat16_35 = log2(u_xlat16_35);
        u_xlat16_35 = u_xlat16_35 * _MTShininess;
        u_xlat16_35 = exp2(u_xlat16_35);
        u_xlat16_35 = u_xlat16_35 * _MTSpecularScale;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_35 = min(max(u_xlat16_35, 0.0), 1.0);
#else
        u_xlat16_35 = clamp(u_xlat16_35, 0.0, 1.0);
#endif
        u_xlat16_7.xyz = vec3(u_xlat16_35) * _MTSpecularColor.xyz;
        u_xlat16_7.xyz = u_xlat10_0.zzz * u_xlat16_7.xyz;
        u_xlat16_8.xyz = u_xlat16_6.xyz * _MTShadowMultiColor.xyz;
        u_xlat16_14.xyz = _MTShadowMultiColor.xyz + vec3(-1.0, -1.0, -1.0);
        u_xlat14.xyz = vec3(u_xlat3) * u_xlat16_14.xyz + vec3(1.0, 1.0, 1.0);
        u_xlat16_9.xyz = (bool(u_xlatb34)) ? u_xlat14.xyz : _MTShadowMultiColor.xyz;
#ifdef UNITY_ADRENO_ES3
        u_xlatb14 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(u_xlat33));
#else
        u_xlatb14 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(u_xlat33);
#endif
        u_xlat16_9.xyz = u_xlat16_6.xyz * u_xlat16_9.xyz;
        u_xlat4.xyz = u_xlat16_6.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
        u_xlat14.xyz = (bool(u_xlatb14)) ? u_xlat16_9.xyz : u_xlat4.xyz;
        u_xlat4.xyz = u_xlat16_7.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
        u_xlat16_14.xyz = u_xlat14.xyz;
        u_xlat16_4.xyz = u_xlat4.xyz;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb10 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex));
#else
        u_xlatb10 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex);
#endif
        u_xlat16_21.xyz = vec3(_FirstShadowMultColor.xxyz.y + (-_CoolShadowMultColor.x), _FirstShadowMultColor.xxyz.z + (-_CoolShadowMultColor.y), float(_FirstShadowMultColor.z) + (-_CoolShadowMultColor.z));
        u_xlat21.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_21.xyz + _CoolShadowMultColor.xyz;
        u_xlat16_6.xyz = (bool(u_xlatb10)) ? u_xlat21.xyz : vec3(_FirstShadowMultColor.x, _FirstShadowMultColor.y, _FirstShadowMultColor.z);
        u_xlat16_8.xyz = u_xlat16_5.xyz * u_xlat16_6.xyz;
        u_xlat16_10.xyz = u_xlat16_6.xyz + vec3(-1.0, -1.0, -1.0);
        u_xlat10.xyz = vec3(u_xlat3) * u_xlat16_10.xyz + vec3(1.0, 1.0, 1.0);
        u_xlat16_6.xyz = (bool(u_xlatb34)) ? u_xlat10.xyz : u_xlat16_6.xyz;
#ifdef UNITY_ADRENO_ES3
        u_xlatb33 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(u_xlat33));
#else
        u_xlatb33 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(u_xlat33);
#endif
        u_xlat16_6.xyz = u_xlat16_5.xyz * u_xlat16_6.xyz;
        u_xlat10.xyz = u_xlat16_5.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
        u_xlat14.xyz = (bool(u_xlatb33)) ? u_xlat16_6.xyz : u_xlat10.xyz;
        u_xlat16_35 = dot(u_xlat16_2.xyz, u_xlat1.xyz);
        u_xlat16_35 = max(u_xlat16_35, 0.00100000005);
        u_xlat16_35 = log2(u_xlat16_35);
        u_xlat16_35 = u_xlat16_35 * _Shininess;
        u_xlat16_35 = exp2(u_xlat16_35);
        u_xlat22.x = (-u_xlat10_0.z) + 1.0;
#ifdef UNITY_ADRENO_ES3
        u_xlatb22.x = !!(u_xlat22.x<u_xlat16_35);
#else
        u_xlatb22.x = u_xlat22.x<u_xlat16_35;
#endif
        u_xlat16_6.xyz = _SpecularColor.xyz * vec3(_SpecMulti);
        u_xlat16_6.xyz = u_xlat10_0.xxx * u_xlat16_6.xyz;
        u_xlat1.xyz = u_xlat16_6.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
        u_xlat4.xyz = mix(vec3(0.0, 0.0, 0.0), u_xlat1.xyz, vec3(u_xlatb22.xxx));
        u_xlat16_14.xyz = u_xlat14.xyz;
        u_xlat16_4.xyz = u_xlat4.xyz;
    //ENDIF
    }
    u_xlat16_5.xyz = u_xlat16_5.xyz * _EmissionColor_MHY.xyz;
    u_xlat16_6.xyz = u_xlat16_14.xyz + u_xlat16_4.xyz;
    u_xlat16_7.xyz = u_xlat16_4.xyz + u_xlat16_8.xyz;
    u_xlat16_8.xyz = u_xlat16_5.xyz * vec3(vec3(_EmissionScaler, _EmissionScaler, _EmissionScaler)) + (-u_xlat16_6.xyz);
    u_xlat16_8.xyz = vec3(u_xlat16_38) * u_xlat16_8.xyz + u_xlat16_6.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(vec3(_EmissionScaler, _EmissionScaler, _EmissionScaler)) + (-u_xlat16_7.xyz);
    u_xlat16_5.xyz = vec3(u_xlat16_38) * u_xlat16_5.xyz + u_xlat16_7.xyz;
    u_xlat16_6.xyz = (bool(u_xlatb11)) ? u_xlat16_8.xyz : u_xlat16_6.xyz;
    u_xlat16_5.xyz = (bool(u_xlatb11)) ? u_xlat16_5.xyz : u_xlat16_7.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.00999999978<u_xlat16_38);
#else
    u_xlatb0 = 0.00999999978<u_xlat16_38;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb11 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn));
#else
    u_xlatb11 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn);
#endif
    u_xlat1.xyz = u_xlat16_6.xyz * vec3(vec3(_ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness));
    u_xlat10.xyz = _ES_CharacterMainLightColor.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat10.xyz = vec3(vec3(_ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio)) * u_xlat10.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat1.xyz = u_xlat1.xyz * u_xlat10.xyz;
    u_xlat10.xyz = _ES_CharacterAmbientLightColor.xyz * vec3(_ES_CharacterAmbientLightRatio);
    u_xlat16_7.xyz = u_xlat1.xyz * vec3(10.0, 10.0, 10.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.xyz = min(max(u_xlat16_7.xyz, 0.0), 1.0);
#else
    u_xlat16_7.xyz = clamp(u_xlat16_7.xyz, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat10.xyz * u_xlat16_7.xyz + u_xlat1.xyz;
    u_xlat16_7.xyz = (bool(u_xlatb11)) ? u_xlat1.xyz : u_xlat16_6.xyz;
    u_xlat16_8.xyz = u_xlat16_6.xyz + (-u_xlat16_7.xyz);
    u_xlat16_8.xyz = vec3(u_xlat16_38) * u_xlat16_8.xyz + u_xlat16_7.xyz;
    u_xlat16_6.xyz = (-u_xlat16_5.xyz) + u_xlat16_6.xyz;
    u_xlat16_6.xyz = vec3(u_xlat16_38) * u_xlat16_6.xyz + u_xlat16_5.xyz;
    u_xlat16_1.xyz = (bool(u_xlatb0)) ? u_xlat16_8.xyz : u_xlat16_7.xyz;
    u_xlat16_5.xyz = (bool(u_xlatb0)) ? u_xlat16_6.xyz : u_xlat16_5.xyz;
    u_xlat16_35 = max(u_xlat16_1.z, u_xlat16_1.y);
    u_xlat16_0.w = max(u_xlat16_1.x, u_xlat16_35);
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(1.0<u_xlat16_0.w);
#else
    u_xlatb10 = 1.0<u_xlat16_0.w;
#endif
    u_xlat16_0.xyz = u_xlat16_1.xyz / u_xlat16_0.www;
    u_xlat16_1.w = 1.0;
    u_xlat16_0 = (bool(u_xlatb10)) ? u_xlat16_0 : u_xlat16_1;
    u_xlat16_35 = min(u_xlat16_0.w, 1.10000002);
    u_xlat16_6.x = u_xlat16_0.w + (-u_xlat16_35);
    u_xlat16_35 = u_xlat16_38 * u_xlat16_6.x + u_xlat16_35;
    SV_Target1.w = u_xlat16_35 * 0.0500000007;
    SV_Target0.xyz = u_xlat16_2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb10 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_2.x = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb10) ? u_xlat16_2.x : u_xlat16_5.z;
    SV_Target0.w = 0.0470588244;
    SV_Target1.xyz = u_xlat16_0.xyz;
    SV_Target2.xy = u_xlat16_5.xy;
    SV_Target2.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "LINE_INTERPOLATION" "TOON_SPECULAR_ON" "TOON_LIGHTMAP_ON" "BACK_FACE_ON" "METAL_MAT" "NORMAL_MAP_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
float u_xlat12;
void main()
{
    u_xlat0.x = hlslcc_mtx4x4unity_ObjectToWorld[0].y;
    u_xlat0.y = hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat0.z = hlslcc_mtx4x4unity_ObjectToWorld[2].y;
    u_xlat1.xyw = (-_WorldSpaceCameraPos.xyz) + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat0.w = u_xlat1.y;
    u_xlat2.xyz = in_POSITION0.xyz;
    u_xlat2.w = 1.0;
    u_xlat0.x = dot(u_xlat0, u_xlat2);
    u_xlat0 = u_xlat0.xxxx * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat3.w = u_xlat1.x;
    u_xlat3.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;
    u_xlat3.y = hlslcc_mtx4x4unity_ObjectToWorld[1].x;
    u_xlat3.z = hlslcc_mtx4x4unity_ObjectToWorld[2].x;
    u_xlat3.x = dot(u_xlat3, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat3.xxxx + u_xlat0;
    u_xlat1.x = hlslcc_mtx4x4unity_ObjectToWorld[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_ObjectToWorld[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_ObjectToWorld[2].z;
    u_xlat1.x = dot(u_xlat1, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat1.xxxx + u_xlat0;
    u_xlat1.x = hlslcc_mtx4x4unity_ObjectToWorld[0].w;
    u_xlat1.y = hlslcc_mtx4x4unity_ObjectToWorld[1].w;
    u_xlat1.z = hlslcc_mtx4x4unity_ObjectToWorld[2].w;
    u_xlat1.w = hlslcc_mtx4x4unity_ObjectToWorld[3].w;
    u_xlat1.x = dot(u_xlat1, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[3] * u_xlat1.xxxx + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD1 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.zw = u_xlat0.zw;
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD3.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
    u_xlat12 = in_TANGENT0.w * unity_WorldTransformParams.w;
    u_xlat2.xyz = vec3(u_xlat12) * u_xlat2.xyz;
    vs_TEXCOORD4.y = u_xlat2.x;
    vs_TEXCOORD4.x = u_xlat1.z;
    vs_TEXCOORD4.z = u_xlat0.y;
    vs_TEXCOORD5.x = u_xlat1.x;
    vs_TEXCOORD6.x = u_xlat1.y;
    vs_TEXCOORD5.z = u_xlat0.z;
    vs_TEXCOORD6.z = u_xlat0.x;
    vs_TEXCOORD5.y = u_xlat2.y;
    vs_TEXCOORD6.y = u_xlat2.z;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToCamera[4];
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	mediump vec4 _Color;
uniform 	float _MainTexAlphaUse;
uniform 	mediump float _MainTexAlphaCutoff;
uniform 	mediump float _BumpScale;
uniform 	float _UseLightMapColorAO;
uniform 	float _UseVertexColorAO;
uniform 	mediump float _LightArea;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	float _UseCoolShadowColorOrTex;
uniform 	mediump vec3 _CoolShadowMultColor;
uniform 	float _UseShadowTransition;
uniform 	float _ShadowTransitionRange;
uniform 	float _ShadowTransitionSoftness;
uniform 	mediump vec3 _SpecularColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump float _EmissionScaler;
uniform 	mediump vec3 _EmissionColor_MHY;
uniform 	mediump float _MTMapBrightness;
uniform 	float _MTMapTileScale;
uniform 	mediump vec3 _MTMapLightColor;
uniform 	mediump vec3 _MTMapDarkColor;
uniform 	mediump vec3 _MTShadowMultiColor;
uniform 	mediump float _MTShininess;
uniform 	mediump vec3 _MTSpecularColor;
uniform 	mediump float _MTSpecularScale;
uniform 	float _ES_CharacterAmbientLightOn;
uniform 	float _ES_CharacterAmbientBrightness;
uniform 	vec3 _ES_CharacterMainLightColor;
uniform 	float _ES_CharacterMainLightBrightness;
uniform 	vec3 _ES_CharacterAmbientLightColor;
uniform 	float _ES_CharacterMainLightRatio;
uniform 	float _ES_CharacterAmbientLightRatio;
uniform 	float _ES_CharacterColorTone;
uniform 	vec3 mhy_AvatarLightDir;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MTMap;
in mediump vec4 vs_COLOR0;
in highp vec2 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD5;
in highp vec3 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec3 u_xlat10_0;
mediump vec3 u_xlat16_1;
mediump vec4 u_xlat16_2;
lowp vec4 u_xlat10_2;
bool u_xlatb2;
vec3 u_xlat3;
lowp vec4 u_xlat10_3;
bvec2 u_xlatb3;
bvec2 u_xlatb4;
mediump vec3 u_xlat16_5;
mediump float u_xlat16_6;
vec3 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
vec3 u_xlat11;
mediump vec3 u_xlat16_11;
vec3 u_xlat12;
mediump vec3 u_xlat16_12;
float u_xlat15;
mediump float u_xlat16_15;
bool u_xlatb15;
vec2 u_xlat16;
mediump float u_xlat16_16;
lowp float u_xlat10_16;
bool u_xlatb16;
mediump vec3 u_xlat16_18;
mediump vec3 u_xlat16_19;
bool u_xlatb28;
float u_xlat39;
bool u_xlatb39;
mediump float u_xlat16_40;
float u_xlat41;
bool u_xlatb41;
mediump float u_xlat16_44;
void main()
{
    u_xlat10_0.xyz = texture(_BumpMap, vs_TEXCOORD0.xy, -1.0).xyz;
    u_xlat16_1.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_1.xy = u_xlat16_1.xy * vec2(vec2(_BumpScale, _BumpScale));
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, u_xlat16_1.xyz);
    u_xlat0.y = dot(vs_TEXCOORD5.xyz, u_xlat16_1.xyz);
    u_xlat0.z = dot(vs_TEXCOORD6.xyz, u_xlat16_1.xyz);
    u_xlat16_1.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat16_1.x = inversesqrt(u_xlat16_1.x);
    u_xlat16_1.xyz = u_xlat0.xyz * u_xlat16_1.xxx;
    u_xlat16_1.xyz = (uint((gl_FrontFacing ? 0xffffffffu : uint(0))) != uint(0u)) ? u_xlat16_1.xyz : (-u_xlat16_1.xyz);
    u_xlat0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat39 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat39 = inversesqrt(u_xlat39);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat39) + mhy_AvatarLightDir.xyz;
    u_xlat39 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat39 = inversesqrt(u_xlat39);
    u_xlat0.xyz = vec3(u_xlat39) * u_xlat0.xyz;
    u_xlat10_2 = texture(_MainTex, vs_TEXCOORD0.xy, -1.0);
    u_xlatb3.xy = equal(vec4(_MainTexAlphaUse), vec4(1.0, 2.0, 0.0, 0.0)).xy;
    u_xlat16_40 = u_xlat10_2.w + (-_MainTexAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb39 = !!(u_xlat16_40<0.0);
#else
    u_xlatb39 = u_xlat16_40<0.0;
#endif
    u_xlatb39 = u_xlatb3.x && u_xlatb39;
    if((int(u_xlatb39) * int(0xffffffffu))!=0){discard;}
    u_xlat10_3.xzw = texture(_LightMapTex, vs_TEXCOORD0.xy, -1.0).xyz;
    u_xlatb4.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UseLightMapColorAO, _UseVertexColorAO, _UseLightMapColorAO, _UseLightMapColorAO)).xy;
    u_xlat16_5.x = (u_xlatb4.x) ? u_xlat10_3.z : 0.5;
    u_xlat16_18.xyz = u_xlat10_2.xyz * _Color.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb39 = !!(0.00999999978<u_xlat10_2.w);
#else
    u_xlatb39 = 0.00999999978<u_xlat10_2.w;
#endif
    u_xlatb2 = u_xlatb39 && u_xlatb3.y;
    u_xlat16_6 = (u_xlatb2) ? u_xlat10_2.w : 0.0;
    u_xlat16_19.x = dot(u_xlat16_1.xyz, mhy_AvatarLightDir.xyz);
    u_xlat16_15 = u_xlat16_19.x * 0.497500002 + 0.5;
    u_xlat16_19.x = u_xlat16_5.x * vs_COLOR0.x;
    u_xlat16_5.x = (u_xlatb4.y) ? u_xlat16_19.x : u_xlat16_5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb28 = !!(u_xlat16_5.x<0.0500000007);
#else
    u_xlatb28 = u_xlat16_5.x<0.0500000007;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb41 = !!(0.949999988<u_xlat16_5.x);
#else
    u_xlatb41 = 0.949999988<u_xlat16_5.x;
#endif
    u_xlat16_15 = u_xlat16_15 + u_xlat16_5.x;
    u_xlat15 = u_xlat16_15 * 0.5;
    u_xlat16_5.x = (u_xlatb41) ? 1.0 : u_xlat15;
    u_xlat16_5.x = (u_xlatb28) ? 0.0 : u_xlat16_5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(u_xlat16_5.x<_LightArea);
#else
    u_xlatb15 = u_xlat16_5.x<_LightArea;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb28 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition));
#else
    u_xlatb28 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseShadowTransition);
#endif
    u_xlat16_5.x = (-u_xlat16_5.x) + _LightArea;
    u_xlat16_5.x = u_xlat16_5.x / _ShadowTransitionRange;
#ifdef UNITY_ADRENO_ES3
    u_xlatb41 = !!(u_xlat16_5.x>=1.0);
#else
    u_xlatb41 = u_xlat16_5.x>=1.0;
#endif
    u_xlat16_16 = u_xlat16_5.x + 0.00999999978;
    u_xlat16_16 = log2(u_xlat16_16);
    u_xlat16.x = u_xlat16_16 * _ShadowTransitionSoftness;
    u_xlat16.x = exp2(u_xlat16.x);
    u_xlat16.x = min(u_xlat16.x, 1.0);
    u_xlat41 = (u_xlatb41) ? 1.0 : u_xlat16.x;
    u_xlat41 = (u_xlatb28) ? u_xlat41 : 1.0;
    u_xlat41 = u_xlatb15 ? u_xlat41 : float(0.0);
    u_xlat15 = u_xlatb15 ? 1.0 : float(0.0);
    u_xlat15 = ((gl_FrontFacing ? 0xffffffffu : uint(0)) != uint(0u)) ? u_xlat15 : 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(0.899999976<u_xlat10_3.x);
#else
    u_xlatb16 = 0.899999976<u_xlat10_3.x;
#endif
    if(u_xlatb16){
        u_xlat16.xy = u_xlat16_1.yy * hlslcc_mtx4x4unity_WorldToCamera[1].xy;
        u_xlat16.xy = hlslcc_mtx4x4unity_WorldToCamera[0].xy * u_xlat16_1.xx + u_xlat16.xy;
        u_xlat7.yz = hlslcc_mtx4x4unity_WorldToCamera[2].xy * u_xlat16_1.zz + u_xlat16.xy;
        u_xlat7.x = u_xlat7.y * _MTMapTileScale;
        u_xlat16_19.xy = u_xlat7.xz * vec2(0.5, 0.5) + vec2(0.5, 0.5);
        u_xlat10_16 = texture(_MTMap, u_xlat16_19.xy, -1.0).x;
        u_xlat16_5.x = u_xlat10_16 * _MTMapBrightness;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
        u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
        u_xlat16_19.xyz = _MTMapLightColor.xyz + (-_MTMapDarkColor.xyz);
        u_xlat16_19.xyz = u_xlat16_5.xxx * u_xlat16_19.xyz + _MTMapDarkColor.xyz;
        u_xlat16_19.xyz = u_xlat16_18.xyz * u_xlat16_19.xyz;
        u_xlat16_5.x = dot(u_xlat16_1.xyz, u_xlat0.xyz);
        u_xlat16_5.x = max(u_xlat16_5.x, 0.00100000005);
        u_xlat16_5.x = log2(u_xlat16_5.x);
        u_xlat16_5.x = u_xlat16_5.x * _MTShininess;
        u_xlat16_5.x = exp2(u_xlat16_5.x);
        u_xlat16_5.x = u_xlat16_5.x * _MTSpecularScale;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
        u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
        u_xlat16_8.xyz = u_xlat16_5.xxx * _MTSpecularColor.xyz;
        u_xlat16_8.xyz = u_xlat10_3.www * u_xlat16_8.xyz;
        u_xlat16_9.xyz = u_xlat16_19.xyz * _MTShadowMultiColor.xyz;
        u_xlat16_7.xyz = _MTShadowMultiColor.xyz + vec3(-1.0, -1.0, -1.0);
        u_xlat7.xyz = vec3(u_xlat41) * u_xlat16_7.xyz + vec3(1.0, 1.0, 1.0);
        u_xlat16_10.xyz = (bool(u_xlatb28)) ? u_xlat7.xyz : _MTShadowMultiColor.xyz;
#ifdef UNITY_ADRENO_ES3
        u_xlatb16 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(u_xlat15));
#else
        u_xlatb16 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(u_xlat15);
#endif
        u_xlat16_10.xyz = u_xlat16_19.xyz * u_xlat16_10.xyz;
        u_xlat7.xyz = u_xlat16_19.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
        u_xlat7.xyz = (bool(u_xlatb16)) ? u_xlat16_10.xyz : u_xlat7.xyz;
        u_xlat11.xyz = u_xlat16_8.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
        u_xlat16_7.xyz = u_xlat7.xyz;
        u_xlat16_11.xyz = u_xlat11.xyz;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb16 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex));
#else
        u_xlatb16 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseCoolShadowColorOrTex);
#endif
        u_xlat16_12.xyz = vec3(_FirstShadowMultColor.xxyz.y + (-_CoolShadowMultColor.x), _FirstShadowMultColor.xxyz.z + (-_CoolShadowMultColor.y), float(_FirstShadowMultColor.z) + (-_CoolShadowMultColor.z));
        u_xlat12.xyz = vec3(vec3(_ES_CharacterColorTone, _ES_CharacterColorTone, _ES_CharacterColorTone)) * u_xlat16_12.xyz + _CoolShadowMultColor.xyz;
        u_xlat16_19.xyz = (bool(u_xlatb16)) ? u_xlat12.xyz : vec3(_FirstShadowMultColor.x, _FirstShadowMultColor.y, _FirstShadowMultColor.z);
        u_xlat16_9.xyz = u_xlat16_18.xyz * u_xlat16_19.xyz;
        u_xlat16_12.xyz = u_xlat16_19.xyz + vec3(-1.0, -1.0, -1.0);
        u_xlat12.xyz = vec3(u_xlat41) * u_xlat16_12.xyz + vec3(1.0, 1.0, 1.0);
        u_xlat16_19.xyz = (bool(u_xlatb28)) ? u_xlat12.xyz : u_xlat16_19.xyz;
#ifdef UNITY_ADRENO_ES3
        u_xlatb15 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(u_xlat15));
#else
        u_xlatb15 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(u_xlat15);
#endif
        u_xlat16_19.xyz = u_xlat16_18.xyz * u_xlat16_19.xyz;
        u_xlat12.xyz = u_xlat16_18.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
        u_xlat7.xyz = (bool(u_xlatb15)) ? u_xlat16_19.xyz : u_xlat12.xyz;
        u_xlat16_5.x = dot(u_xlat16_1.xyz, u_xlat0.xyz);
        u_xlat16_5.x = max(u_xlat16_5.x, 0.00100000005);
        u_xlat16_5.x = log2(u_xlat16_5.x);
        u_xlat16_5.x = u_xlat16_5.x * _Shininess;
        u_xlat16_5.x = exp2(u_xlat16_5.x);
        u_xlat15 = (-u_xlat10_3.w) + 1.0;
#ifdef UNITY_ADRENO_ES3
        u_xlatb15 = !!(u_xlat15<u_xlat16_5.x);
#else
        u_xlatb15 = u_xlat15<u_xlat16_5.x;
#endif
        u_xlat16_19.xyz = _SpecularColor.xyz * vec3(_SpecMulti);
        u_xlat16_19.xyz = u_xlat10_3.xxx * u_xlat16_19.xyz;
        u_xlat3.xyz = u_xlat16_19.xyz * vec3(vec3(_ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness, _ES_CharacterMainLightBrightness));
        u_xlat11.xyz = mix(vec3(0.0, 0.0, 0.0), u_xlat3.xyz, vec3(bvec3(u_xlatb15)));
        u_xlat16_7.xyz = u_xlat7.xyz;
        u_xlat16_11.xyz = u_xlat11.xyz;
    //ENDIF
    }
    u_xlat16_5.xyz = u_xlat16_18.xyz * _EmissionColor_MHY.xyz;
    u_xlat16_19.xyz = u_xlat16_7.xyz + u_xlat16_11.xyz;
    u_xlat16_8.xyz = u_xlat16_9.xyz + u_xlat16_11.xyz;
    u_xlat16_9.xyz = u_xlat16_5.xyz * vec3(vec3(_EmissionScaler, _EmissionScaler, _EmissionScaler)) + (-u_xlat16_19.xyz);
    u_xlat16_9.xyz = vec3(u_xlat16_6) * u_xlat16_9.xyz + u_xlat16_19.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(vec3(_EmissionScaler, _EmissionScaler, _EmissionScaler)) + (-u_xlat16_8.xyz);
    u_xlat16_5.xyz = vec3(u_xlat16_6) * u_xlat16_5.xyz + u_xlat16_8.xyz;
    u_xlat16_19.xyz = (bool(u_xlatb2)) ? u_xlat16_9.xyz : u_xlat16_19.xyz;
    u_xlat16_5.xyz = (bool(u_xlatb2)) ? u_xlat16_5.xyz : u_xlat16_8.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(0.00999999978<u_xlat16_6);
#else
    u_xlatb2 = 0.00999999978<u_xlat16_6;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn));
#else
    u_xlatb15 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ES_CharacterAmbientLightOn);
#endif
    u_xlat3.xyz = u_xlat16_19.xyz * vec3(vec3(_ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness, _ES_CharacterAmbientBrightness));
    u_xlat12.xyz = _ES_CharacterMainLightColor.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat12.xyz = vec3(vec3(_ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio, _ES_CharacterMainLightRatio)) * u_xlat12.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat3.xyz = u_xlat3.xyz * u_xlat12.xyz;
    u_xlat12.xyz = _ES_CharacterAmbientLightColor.xyz * vec3(_ES_CharacterAmbientLightRatio);
    u_xlat16_8.xyz = u_xlat3.xyz * vec3(10.0, 10.0, 10.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_8.xyz = min(max(u_xlat16_8.xyz, 0.0), 1.0);
#else
    u_xlat16_8.xyz = clamp(u_xlat16_8.xyz, 0.0, 1.0);
#endif
    u_xlat3.xyz = u_xlat12.xyz * u_xlat16_8.xyz + u_xlat3.xyz;
    u_xlat16_8.xyz = (bool(u_xlatb15)) ? u_xlat3.xyz : u_xlat16_19.xyz;
    u_xlat16_9.xyz = u_xlat16_19.xyz + (-u_xlat16_8.xyz);
    u_xlat16_9.xyz = vec3(u_xlat16_6) * u_xlat16_9.xyz + u_xlat16_8.xyz;
    u_xlat16_19.xyz = (-u_xlat16_5.xyz) + u_xlat16_19.xyz;
    u_xlat16_19.xyz = vec3(u_xlat16_6) * u_xlat16_19.xyz + u_xlat16_5.xyz;
    u_xlat16_0.xyz = (bool(u_xlatb2)) ? u_xlat16_9.xyz : u_xlat16_8.xyz;
    u_xlat16_5.xyz = (bool(u_xlatb2)) ? u_xlat16_19.xyz : u_xlat16_5.xyz;
    u_xlat16_44 = max(u_xlat16_0.z, u_xlat16_0.y);
    u_xlat16_2.w = max(u_xlat16_0.x, u_xlat16_44);
#ifdef UNITY_ADRENO_ES3
    u_xlatb3.x = !!(1.0<u_xlat16_2.w);
#else
    u_xlatb3.x = 1.0<u_xlat16_2.w;
#endif
    u_xlat16_2.xyz = u_xlat16_0.xyz / u_xlat16_2.www;
    u_xlat16_0.w = 1.0;
    u_xlat16_0 = (u_xlatb3.x) ? u_xlat16_2 : u_xlat16_0;
    u_xlat16_44 = min(u_xlat16_0.w, 1.10000002);
    u_xlat16_19.x = u_xlat16_0.w + (-u_xlat16_44);
    u_xlat16_44 = u_xlat16_6 * u_xlat16_19.x + u_xlat16_44;
    SV_Target1.w = u_xlat16_44 * 0.0500000007;
    SV_Target0.xyz = u_xlat16_1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb3.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb3.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_44 = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb3.x) ? u_xlat16_44 : u_xlat16_5.z;
    SV_Target0.w = 0.0470588244;
    SV_Target1.xyz = u_xlat16_0.xyz;
    SV_Target2.xy = u_xlat16_5.xy;
    SV_Target2.w = 0.0;
    return;
}

#endif
"
}
}
Program "fp" {
SubProgram "gles3 " {
""
}
SubProgram "gles3 " {
Keywords { "MSAA_INTERPOLATION" }
""
}
SubProgram "gles3 " {
Keywords { "LINE_INTERPOLATION" }
""
}
SubProgram "gles3 " {
Keywords { "METAL_MAT" }
""
}
SubProgram "gles3 " {
Keywords { "MSAA_INTERPOLATION" "METAL_MAT" }
""
}
SubProgram "gles3 " {
Keywords { "LINE_INTERPOLATION" "METAL_MAT" }
""
}
SubProgram "gles3 " {
Keywords { "BACK_FACE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "MSAA_INTERPOLATION" "BACK_FACE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "LINE_INTERPOLATION" "BACK_FACE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "BACK_FACE_ON" "METAL_MAT" }
""
}
SubProgram "gles3 " {
Keywords { "MSAA_INTERPOLATION" "BACK_FACE_ON" "METAL_MAT" }
""
}
SubProgram "gles3 " {
Keywords { "LINE_INTERPOLATION" "BACK_FACE_ON" "METAL_MAT" }
""
}
SubProgram "gles3 " {
Keywords { "NORMAL_MAP_ON" }
""
}
SubProgram "gles3 " {
Keywords { "MSAA_INTERPOLATION" "NORMAL_MAP_ON" }
""
}
SubProgram "gles3 " {
Keywords { "LINE_INTERPOLATION" "NORMAL_MAP_ON" }
""
}
SubProgram "gles3 " {
Keywords { "METAL_MAT" "NORMAL_MAP_ON" }
""
}
SubProgram "gles3 " {
Keywords { "MSAA_INTERPOLATION" "METAL_MAT" "NORMAL_MAP_ON" }
""
}
SubProgram "gles3 " {
Keywords { "LINE_INTERPOLATION" "METAL_MAT" "NORMAL_MAP_ON" }
""
}
SubProgram "gles3 " {
Keywords { "BACK_FACE_ON" "NORMAL_MAP_ON" }
""
}
SubProgram "gles3 " {
Keywords { "MSAA_INTERPOLATION" "BACK_FACE_ON" "NORMAL_MAP_ON" }
""
}
SubProgram "gles3 " {
Keywords { "LINE_INTERPOLATION" "BACK_FACE_ON" "NORMAL_MAP_ON" }
""
}
SubProgram "gles3 " {
Keywords { "BACK_FACE_ON" "METAL_MAT" "NORMAL_MAP_ON" }
""
}
SubProgram "gles3 " {
Keywords { "MSAA_INTERPOLATION" "BACK_FACE_ON" "METAL_MAT" "NORMAL_MAP_ON" }
""
}
SubProgram "gles3 " {
Keywords { "LINE_INTERPOLATION" "BACK_FACE_ON" "METAL_MAT" "NORMAL_MAP_ON" }
""
}
SubProgram "gles3 " {
Keywords { "TOON_SPECULAR_ON" }
""
}
SubProgram "gles3 " {
Keywords { "MSAA_INTERPOLATION" "TOON_SPECULAR_ON" }
""
}
SubProgram "gles3 " {
Keywords { "LINE_INTERPOLATION" "TOON_SPECULAR_ON" }
""
}
SubProgram "gles3 " {
Keywords { "TOON_SPECULAR_ON" "METAL_MAT" }
""
}
SubProgram "gles3 " {
Keywords { "MSAA_INTERPOLATION" "TOON_SPECULAR_ON" "METAL_MAT" }
""
}
SubProgram "gles3 " {
Keywords { "LINE_INTERPOLATION" "TOON_SPECULAR_ON" "METAL_MAT" }
""
}
SubProgram "gles3 " {
Keywords { "TOON_SPECULAR_ON" "BACK_FACE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "MSAA_INTERPOLATION" "TOON_SPECULAR_ON" "BACK_FACE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "LINE_INTERPOLATION" "TOON_SPECULAR_ON" "BACK_FACE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "TOON_SPECULAR_ON" "BACK_FACE_ON" "METAL_MAT" }
""
}
SubProgram "gles3 " {
Keywords { "MSAA_INTERPOLATION" "TOON_SPECULAR_ON" "BACK_FACE_ON" "METAL_MAT" }
""
}
SubProgram "gles3 " {
Keywords { "LINE_INTERPOLATION" "TOON_SPECULAR_ON" "BACK_FACE_ON" "METAL_MAT" }
""
}
SubProgram "gles3 " {
Keywords { "TOON_SPECULAR_ON" "NORMAL_MAP_ON" }
""
}
SubProgram "gles3 " {
Keywords { "MSAA_INTERPOLATION" "TOON_SPECULAR_ON" "NORMAL_MAP_ON" }
""
}
SubProgram "gles3 " {
Keywords { "LINE_INTERPOLATION" "TOON_SPECULAR_ON" "NORMAL_MAP_ON" }
""
}
SubProgram "gles3 " {
Keywords { "TOON_SPECULAR_ON" "METAL_MAT" "NORMAL_MAP_ON" }
""
}
SubProgram "gles3 " {
Keywords { "MSAA_INTERPOLATION" "TOON_SPECULAR_ON" "METAL_MAT" "NORMAL_MAP_ON" }
""
}
SubProgram "gles3 " {
Keywords { "LINE_INTERPOLATION" "TOON_SPECULAR_ON" "METAL_MAT" "NORMAL_MAP_ON" }
""
}
SubProgram "gles3 " {
Keywords { "TOON_SPECULAR_ON" "BACK_FACE_ON" "NORMAL_MAP_ON" }
""
}
SubProgram "gles3 " {
Keywords { "MSAA_INTERPOLATION" "TOON_SPECULAR_ON" "BACK_FACE_ON" "NORMAL_MAP_ON" }
""
}
SubProgram "gles3 " {
Keywords { "LINE_INTERPOLATION" "TOON_SPECULAR_ON" "BACK_FACE_ON" "NORMAL_MAP_ON" }
""
}
SubProgram "gles3 " {
Keywords { "TOON_SPECULAR_ON" "BACK_FACE_ON" "METAL_MAT" "NORMAL_MAP_ON" }
""
}
SubProgram "gles3 " {
Keywords { "MSAA_INTERPOLATION" "TOON_SPECULAR_ON" "BACK_FACE_ON" "METAL_MAT" "NORMAL_MAP_ON" }
""
}
SubProgram "gles3 " {
Keywords { "LINE_INTERPOLATION" "TOON_SPECULAR_ON" "BACK_FACE_ON" "METAL_MAT" "NORMAL_MAP_ON" }
""
}
SubProgram "gles3 " {
Keywords { "TOON_LIGHTMAP_ON" }
""
}
SubProgram "gles3 " {
Keywords { "MSAA_INTERPOLATION" "TOON_LIGHTMAP_ON" }
""
}
SubProgram "gles3 " {
Keywords { "LINE_INTERPOLATION" "TOON_LIGHTMAP_ON" }
""
}
SubProgram "gles3 " {
Keywords { "TOON_LIGHTMAP_ON" "METAL_MAT" }
""
}
SubProgram "gles3 " {
Keywords { "MSAA_INTERPOLATION" "TOON_LIGHTMAP_ON" "METAL_MAT" }
""
}
SubProgram "gles3 " {
Keywords { "LINE_INTERPOLATION" "TOON_LIGHTMAP_ON" "METAL_MAT" }
""
}
SubProgram "gles3 " {
Keywords { "TOON_LIGHTMAP_ON" "BACK_FACE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "MSAA_INTERPOLATION" "TOON_LIGHTMAP_ON" "BACK_FACE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "LINE_INTERPOLATION" "TOON_LIGHTMAP_ON" "BACK_FACE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "TOON_LIGHTMAP_ON" "BACK_FACE_ON" "METAL_MAT" }
""
}
SubProgram "gles3 " {
Keywords { "MSAA_INTERPOLATION" "TOON_LIGHTMAP_ON" "BACK_FACE_ON" "METAL_MAT" }
""
}
SubProgram "gles3 " {
Keywords { "LINE_INTERPOLATION" "TOON_LIGHTMAP_ON" "BACK_FACE_ON" "METAL_MAT" }
""
}
SubProgram "gles3 " {
Keywords { "TOON_LIGHTMAP_ON" "NORMAL_MAP_ON" }
""
}
SubProgram "gles3 " {
Keywords { "MSAA_INTERPOLATION" "TOON_LIGHTMAP_ON" "NORMAL_MAP_ON" }
""
}
SubProgram "gles3 " {
Keywords { "LINE_INTERPOLATION" "TOON_LIGHTMAP_ON" "NORMAL_MAP_ON" }
""
}
SubProgram "gles3 " {
Keywords { "TOON_LIGHTMAP_ON" "METAL_MAT" "NORMAL_MAP_ON" }
""
}
SubProgram "gles3 " {
Keywords { "MSAA_INTERPOLATION" "TOON_LIGHTMAP_ON" "METAL_MAT" "NORMAL_MAP_ON" }
""
}
SubProgram "gles3 " {
Keywords { "LINE_INTERPOLATION" "TOON_LIGHTMAP_ON" "METAL_MAT" "NORMAL_MAP_ON" }
""
}
SubProgram "gles3 " {
Keywords { "TOON_LIGHTMAP_ON" "BACK_FACE_ON" "NORMAL_MAP_ON" }
""
}
SubProgram "gles3 " {
Keywords { "MSAA_INTERPOLATION" "TOON_LIGHTMAP_ON" "BACK_FACE_ON" "NORMAL_MAP_ON" }
""
}
SubProgram "gles3 " {
Keywords { "LINE_INTERPOLATION" "TOON_LIGHTMAP_ON" "BACK_FACE_ON" "NORMAL_MAP_ON" }
""
}
SubProgram "gles3 " {
Keywords { "TOON_LIGHTMAP_ON" "BACK_FACE_ON" "METAL_MAT" "NORMAL_MAP_ON" }
""
}
SubProgram "gles3 " {
Keywords { "MSAA_INTERPOLATION" "TOON_LIGHTMAP_ON" "BACK_FACE_ON" "METAL_MAT" "NORMAL_MAP_ON" }
""
}
SubProgram "gles3 " {
Keywords { "LINE_INTERPOLATION" "TOON_LIGHTMAP_ON" "BACK_FACE_ON" "METAL_MAT" "NORMAL_MAP_ON" }
""
}
SubProgram "gles3 " {
Keywords { "TOON_SPECULAR_ON" "TOON_LIGHTMAP_ON" }
""
}
SubProgram "gles3 " {
Keywords { "MSAA_INTERPOLATION" "TOON_SPECULAR_ON" "TOON_LIGHTMAP_ON" }
""
}
SubProgram "gles3 " {
Keywords { "LINE_INTERPOLATION" "TOON_SPECULAR_ON" "TOON_LIGHTMAP_ON" }
""
}
SubProgram "gles3 " {
Keywords { "TOON_SPECULAR_ON" "TOON_LIGHTMAP_ON" "METAL_MAT" }
""
}
SubProgram "gles3 " {
Keywords { "MSAA_INTERPOLATION" "TOON_SPECULAR_ON" "TOON_LIGHTMAP_ON" "METAL_MAT" }
""
}
SubProgram "gles3 " {
Keywords { "LINE_INTERPOLATION" "TOON_SPECULAR_ON" "TOON_LIGHTMAP_ON" "METAL_MAT" }
""
}
SubProgram "gles3 " {
Keywords { "TOON_SPECULAR_ON" "TOON_LIGHTMAP_ON" "BACK_FACE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "MSAA_INTERPOLATION" "TOON_SPECULAR_ON" "TOON_LIGHTMAP_ON" "BACK_FACE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "LINE_INTERPOLATION" "TOON_SPECULAR_ON" "TOON_LIGHTMAP_ON" "BACK_FACE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "TOON_SPECULAR_ON" "TOON_LIGHTMAP_ON" "BACK_FACE_ON" "METAL_MAT" }
""
}
SubProgram "gles3 " {
Keywords { "MSAA_INTERPOLATION" "TOON_SPECULAR_ON" "TOON_LIGHTMAP_ON" "BACK_FACE_ON" "METAL_MAT" }
""
}
SubProgram "gles3 " {
Keywords { "LINE_INTERPOLATION" "TOON_SPECULAR_ON" "TOON_LIGHTMAP_ON" "BACK_FACE_ON" "METAL_MAT" }
""
}
SubProgram "gles3 " {
Keywords { "TOON_SPECULAR_ON" "TOON_LIGHTMAP_ON" "NORMAL_MAP_ON" }
""
}
SubProgram "gles3 " {
Keywords { "MSAA_INTERPOLATION" "TOON_SPECULAR_ON" "TOON_LIGHTMAP_ON" "NORMAL_MAP_ON" }
""
}
SubProgram "gles3 " {
Keywords { "LINE_INTERPOLATION" "TOON_SPECULAR_ON" "TOON_LIGHTMAP_ON" "NORMAL_MAP_ON" }
""
}
SubProgram "gles3 " {
Keywords { "TOON_SPECULAR_ON" "TOON_LIGHTMAP_ON" "METAL_MAT" "NORMAL_MAP_ON" }
""
}
SubProgram "gles3 " {
Keywords { "MSAA_INTERPOLATION" "TOON_SPECULAR_ON" "TOON_LIGHTMAP_ON" "METAL_MAT" "NORMAL_MAP_ON" }
""
}
SubProgram "gles3 " {
Keywords { "LINE_INTERPOLATION" "TOON_SPECULAR_ON" "TOON_LIGHTMAP_ON" "METAL_MAT" "NORMAL_MAP_ON" }
""
}
SubProgram "gles3 " {
Keywords { "TOON_SPECULAR_ON" "TOON_LIGHTMAP_ON" "BACK_FACE_ON" "NORMAL_MAP_ON" }
""
}
SubProgram "gles3 " {
Keywords { "MSAA_INTERPOLATION" "TOON_SPECULAR_ON" "TOON_LIGHTMAP_ON" "BACK_FACE_ON" "NORMAL_MAP_ON" }
""
}
SubProgram "gles3 " {
Keywords { "LINE_INTERPOLATION" "TOON_SPECULAR_ON" "TOON_LIGHTMAP_ON" "BACK_FACE_ON" "NORMAL_MAP_ON" }
""
}
SubProgram "gles3 " {
Keywords { "TOON_SPECULAR_ON" "TOON_LIGHTMAP_ON" "BACK_FACE_ON" "METAL_MAT" "NORMAL_MAP_ON" }
""
}
SubProgram "gles3 " {
Keywords { "MSAA_INTERPOLATION" "TOON_SPECULAR_ON" "TOON_LIGHTMAP_ON" "BACK_FACE_ON" "METAL_MAT" "NORMAL_MAP_ON" }
""
}
SubProgram "gles3 " {
Keywords { "LINE_INTERPOLATION" "TOON_SPECULAR_ON" "TOON_LIGHTMAP_ON" "BACK_FACE_ON" "METAL_MAT" "NORMAL_MAP_ON" }
""
}
}
}
 Pass {
  Name "SHADOWCASTER"
  Tags { "ComplexCaster" = "true" "IGNOREPROJECTOR" = "False" "LIGHTMODE" = "SHADOWCASTER" "QUEUE" = "Geometry" "RenderType" = "Opaque" "SHADOWSUPPORT" = "true" }
  GpuProgramID 88025
Program "vp" {
SubProgram "gles3 " {
Keywords { "SHADOWS_DEPTH" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	float mhy_avatar_normal_bias;
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec4 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
float u_xlat12;
bool u_xlatb12;
void main()
{
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat1.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;
    u_xlat1.y = hlslcc_mtx4x4unity_ObjectToWorld[1].x;
    u_xlat1.z = hlslcc_mtx4x4unity_ObjectToWorld[2].x;
    u_xlat2.xyw = (-_WorldSpaceCameraPos.xyz) + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1.w = u_xlat2.x;
    u_xlat1.x = dot(u_xlat1, in_POSITION0);
    u_xlat3.w = u_xlat2.y;
    u_xlat3.x = hlslcc_mtx4x4unity_ObjectToWorld[0].y;
    u_xlat3.y = hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat3.z = hlslcc_mtx4x4unity_ObjectToWorld[2].y;
    u_xlat1.y = dot(u_xlat3, in_POSITION0);
    u_xlat2.x = hlslcc_mtx4x4unity_ObjectToWorld[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_ObjectToWorld[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_ObjectToWorld[2].z;
    u_xlat1.z = dot(u_xlat2, in_POSITION0);
    u_xlat2.xyz = (-u_xlat1.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat12 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat2.xyz = vec3(u_xlat12) * u_xlat2.xyz;
    u_xlat12 = dot(u_xlat0.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat12 = (-u_xlat12) * u_xlat12 + 1.0;
    u_xlat12 = sqrt(u_xlat12);
    u_xlat12 = u_xlat12 * mhy_avatar_normal_bias;
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(u_xlat12) + u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(mhy_avatar_normal_bias!=0.0);
#else
    u_xlatb12 = mhy_avatar_normal_bias!=0.0;
#endif
    u_xlat0.xyz = (bool(u_xlatb12)) ? u_xlat0.xyz : u_xlat1.xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1.x = hlslcc_mtx4x4unity_ObjectToWorld[0].w;
    u_xlat1.y = hlslcc_mtx4x4unity_ObjectToWorld[1].w;
    u_xlat1.z = hlslcc_mtx4x4unity_ObjectToWorld[2].w;
    u_xlat1.w = hlslcc_mtx4x4unity_ObjectToWorld[3].w;
    u_xlat1.x = dot(u_xlat1, in_POSITION0);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[3] * u_xlat1.xxxx + u_xlat0;
    gl_Position.z = u_xlat0.w * 0.000500000024 + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	float _MainTexAlphaUse;
uniform 	mediump float _MainTexAlphaCutoff;
uniform lowp sampler2D _MainTex;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
float u_xlat0;
lowp float u_xlat10_0;
bool u_xlatb0;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_MainTexAlphaUse==1.0);
#else
    u_xlatb0 = _MainTexAlphaUse==1.0;
#endif
    if(u_xlatb0){
        u_xlat10_0 = texture(_MainTex, vs_TEXCOORD1.xy).w;
        u_xlat0 = u_xlat10_0 + (-_MainTexAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0<0.0);
#else
        u_xlatb0 = u_xlat0<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "SHADOWS_CUBE" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	float mhy_avatar_normal_bias;
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec4 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
float u_xlat12;
bool u_xlatb12;
void main()
{
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat1.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;
    u_xlat1.y = hlslcc_mtx4x4unity_ObjectToWorld[1].x;
    u_xlat1.z = hlslcc_mtx4x4unity_ObjectToWorld[2].x;
    u_xlat2.xyw = (-_WorldSpaceCameraPos.xyz) + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1.w = u_xlat2.x;
    u_xlat1.x = dot(u_xlat1, in_POSITION0);
    u_xlat3.w = u_xlat2.y;
    u_xlat3.x = hlslcc_mtx4x4unity_ObjectToWorld[0].y;
    u_xlat3.y = hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat3.z = hlslcc_mtx4x4unity_ObjectToWorld[2].y;
    u_xlat1.y = dot(u_xlat3, in_POSITION0);
    u_xlat2.x = hlslcc_mtx4x4unity_ObjectToWorld[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_ObjectToWorld[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_ObjectToWorld[2].z;
    u_xlat1.z = dot(u_xlat2, in_POSITION0);
    u_xlat2.xyz = (-u_xlat1.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat12 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat2.xyz = vec3(u_xlat12) * u_xlat2.xyz;
    u_xlat12 = dot(u_xlat0.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat12 = (-u_xlat12) * u_xlat12 + 1.0;
    u_xlat12 = sqrt(u_xlat12);
    u_xlat12 = u_xlat12 * mhy_avatar_normal_bias;
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(u_xlat12) + u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(mhy_avatar_normal_bias!=0.0);
#else
    u_xlatb12 = mhy_avatar_normal_bias!=0.0;
#endif
    u_xlat0.xyz = (bool(u_xlatb12)) ? u_xlat0.xyz : u_xlat1.xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1.x = hlslcc_mtx4x4unity_ObjectToWorld[0].w;
    u_xlat1.y = hlslcc_mtx4x4unity_ObjectToWorld[1].w;
    u_xlat1.z = hlslcc_mtx4x4unity_ObjectToWorld[2].w;
    u_xlat1.w = hlslcc_mtx4x4unity_ObjectToWorld[3].w;
    u_xlat1.x = dot(u_xlat1, in_POSITION0);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[3] * u_xlat1.xxxx + u_xlat0;
    gl_Position.z = u_xlat0.w * 0.000500000024 + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_LightShadowBias;
uniform 	float _MainTexAlphaUse;
uniform 	mediump float _MainTexAlphaCutoff;
uniform lowp sampler2D _MainTex;
in highp vec3 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec4 u_xlat0;
lowp float u_xlat10_0;
bool u_xlatb0;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_MainTexAlphaUse==1.0);
#else
    u_xlatb0 = _MainTexAlphaUse==1.0;
#endif
    if(u_xlatb0){
        u_xlat10_0 = texture(_MainTex, vs_TEXCOORD1.xy).w;
        u_xlat0.x = u_xlat10_0 + (-_MainTexAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat0.x = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = u_xlat0.x + unity_LightShadowBias.x;
    u_xlat0.x = u_xlat0.x * _LightPositionRange.w;
    u_xlat0.x = min(u_xlat0.x, 0.999000013);
    u_xlat0 = u_xlat0.xxxx * vec4(1.0, 255.0, 65025.0, 16581375.0);
    u_xlat0 = fract(u_xlat0);
    SV_Target0 = (-u_xlat0.yzww) * vec4(0.00392156886, 0.00392156886, 0.00392156886, 0.00392156886) + u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "SHADOWS_DEPTH" "INSTANCING_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	int unity_BaseInstanceID;
uniform 	float mhy_avatar_normal_bias;
uniform 	vec4 _MainTex_ST;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
bool u_xlatb4;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1.xyw = (-_WorldSpaceCameraPos.xyz) + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat2.x = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].x;
    u_xlat2.y = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].x;
    u_xlat2.z = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].x;
    u_xlat2.w = u_xlat1.x;
    u_xlat3.x = dot(u_xlat2, in_POSITION0);
    u_xlat2.x = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].y;
    u_xlat2.y = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].y;
    u_xlat2.z = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].y;
    u_xlat2.w = u_xlat1.y;
    u_xlat3.y = dot(u_xlat2, in_POSITION0);
    u_xlat1.x = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].z;
    u_xlat1.y = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].z;
    u_xlat1.z = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].z;
    u_xlat3.z = dot(u_xlat1, in_POSITION0);
    u_xlat1.x = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].w;
    u_xlat1.y = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].w;
    u_xlat1.z = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].w;
    u_xlat1.w = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].w;
    u_xlat1.x = dot(u_xlat1, in_POSITION0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(mhy_avatar_normal_bias!=0.0);
#else
    u_xlatb4 = mhy_avatar_normal_bias!=0.0;
#endif
    if(u_xlatb4){
        u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
        u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
        u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
        u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
        u_xlat0.x = inversesqrt(u_xlat0.x);
        u_xlat4.xyz = u_xlat0.xxx * u_xlat2.xyz;
        u_xlat2.xyz = (-u_xlat3.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
        u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
        u_xlat0.x = inversesqrt(u_xlat0.x);
        u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
        u_xlat0.x = dot(u_xlat4.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
        u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
        u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
        u_xlat0.x = (-u_xlat0.x) * u_xlat0.x + 1.0;
        u_xlat0.x = sqrt(u_xlat0.x);
        u_xlat0.x = u_xlat0.x * mhy_avatar_normal_bias;
        u_xlat3.xyz = (-u_xlat4.xyz) * u_xlat0.xxx + u_xlat3.xyz;
    //ENDIF
    }
    u_xlat2 = u_xlat3.yyyy * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat3.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat3.zzzz + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[3] * u_xlat1.xxxx + u_xlat0;
    gl_Position.z = u_xlat0.w * 0.000500000024 + u_xlat0.z;
    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    gl_Position.xyw = u_xlat0.xyw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	float _MainTexAlphaUse;
uniform 	mediump float _MainTexAlphaCutoff;
uniform lowp sampler2D _MainTex;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
float u_xlat0;
lowp float u_xlat10_0;
bool u_xlatb0;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_MainTexAlphaUse==1.0);
#else
    u_xlatb0 = _MainTexAlphaUse==1.0;
#endif
    if(u_xlatb0){
        u_xlat10_0 = texture(_MainTex, vs_TEXCOORD1.xy).w;
        u_xlat0 = u_xlat10_0 + (-_MainTexAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0<0.0);
#else
        u_xlatb0 = u_xlat0<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "SHADOWS_CUBE" "INSTANCING_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	int unity_BaseInstanceID;
uniform 	float mhy_avatar_normal_bias;
uniform 	vec4 _MainTex_ST;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
bool u_xlatb4;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1.xyw = (-_WorldSpaceCameraPos.xyz) + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat2.x = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].x;
    u_xlat2.y = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].x;
    u_xlat2.z = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].x;
    u_xlat2.w = u_xlat1.x;
    u_xlat3.x = dot(u_xlat2, in_POSITION0);
    u_xlat2.x = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].y;
    u_xlat2.y = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].y;
    u_xlat2.z = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].y;
    u_xlat2.w = u_xlat1.y;
    u_xlat3.y = dot(u_xlat2, in_POSITION0);
    u_xlat1.x = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].z;
    u_xlat1.y = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].z;
    u_xlat1.z = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].z;
    u_xlat3.z = dot(u_xlat1, in_POSITION0);
    u_xlat1.x = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].w;
    u_xlat1.y = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].w;
    u_xlat1.z = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].w;
    u_xlat1.w = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].w;
    u_xlat1.x = dot(u_xlat1, in_POSITION0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(mhy_avatar_normal_bias!=0.0);
#else
    u_xlatb4 = mhy_avatar_normal_bias!=0.0;
#endif
    if(u_xlatb4){
        u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
        u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
        u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
        u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
        u_xlat0.x = inversesqrt(u_xlat0.x);
        u_xlat4.xyz = u_xlat0.xxx * u_xlat2.xyz;
        u_xlat2.xyz = (-u_xlat3.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
        u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
        u_xlat0.x = inversesqrt(u_xlat0.x);
        u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
        u_xlat0.x = dot(u_xlat4.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
        u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
        u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
        u_xlat0.x = (-u_xlat0.x) * u_xlat0.x + 1.0;
        u_xlat0.x = sqrt(u_xlat0.x);
        u_xlat0.x = u_xlat0.x * mhy_avatar_normal_bias;
        u_xlat3.xyz = (-u_xlat4.xyz) * u_xlat0.xxx + u_xlat3.xyz;
    //ENDIF
    }
    u_xlat2 = u_xlat3.yyyy * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat3.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat3.zzzz + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[3] * u_xlat1.xxxx + u_xlat0;
    gl_Position.z = u_xlat0.w * 0.000500000024 + u_xlat0.z;
    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    gl_Position.xyw = u_xlat0.xyw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_LightShadowBias;
uniform 	float _MainTexAlphaUse;
uniform 	mediump float _MainTexAlphaCutoff;
uniform lowp sampler2D _MainTex;
in highp vec3 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec4 u_xlat0;
lowp float u_xlat10_0;
bool u_xlatb0;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_MainTexAlphaUse==1.0);
#else
    u_xlatb0 = _MainTexAlphaUse==1.0;
#endif
    if(u_xlatb0){
        u_xlat10_0 = texture(_MainTex, vs_TEXCOORD1.xy).w;
        u_xlat0.x = u_xlat10_0 + (-_MainTexAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat0.x = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = u_xlat0.x + unity_LightShadowBias.x;
    u_xlat0.x = u_xlat0.x * _LightPositionRange.w;
    u_xlat0.x = min(u_xlat0.x, 0.999000013);
    u_xlat0 = u_xlat0.xxxx * vec4(1.0, 255.0, 65025.0, 16581375.0);
    u_xlat0 = fract(u_xlat0);
    SV_Target0 = (-u_xlat0.yzww) * vec4(0.00392156886, 0.00392156886, 0.00392156886, 0.00392156886) + u_xlat0;
    return;
}

#endif
"
}
}
Program "fp" {
SubProgram "gles3 " {
Keywords { "SHADOWS_DEPTH" }
""
}
SubProgram "gles3 " {
Keywords { "SHADOWS_CUBE" }
""
}
SubProgram "gles3 " {
Keywords { "SHADOWS_DEPTH" "INSTANCING_ON" }
""
}
SubProgram "gles3 " {
Keywords { "SHADOWS_CUBE" "INSTANCING_ON" }
""
}
}
}
 Pass {
  Name "FORWARDBASEBODY"
  Tags { "IGNOREPROJECTOR" = "False" "LIGHTMODE" = "FORWARDBASE" "QUEUE" = "Geometry" "RenderType" = "Opaque" }
  Cull Off
  GpuProgramID 151693
Program "vp" {
SubProgram "gles3 " {
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out highp vec2 vs_TEXCOORD0;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
void main()
{
    u_xlat0.x = hlslcc_mtx4x4unity_ObjectToWorld[0].y;
    u_xlat0.y = hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat0.z = hlslcc_mtx4x4unity_ObjectToWorld[2].y;
    u_xlat1.xyw = (-_WorldSpaceCameraPos.xyz) + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat0.w = u_xlat1.y;
    u_xlat2.xyz = in_POSITION0.xyz;
    u_xlat2.w = 1.0;
    u_xlat0.x = dot(u_xlat0, u_xlat2);
    u_xlat0 = u_xlat0.xxxx * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat3.w = u_xlat1.x;
    u_xlat3.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;
    u_xlat3.y = hlslcc_mtx4x4unity_ObjectToWorld[1].x;
    u_xlat3.z = hlslcc_mtx4x4unity_ObjectToWorld[2].x;
    u_xlat3.x = dot(u_xlat3, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat3.xxxx + u_xlat0;
    u_xlat1.x = hlslcc_mtx4x4unity_ObjectToWorld[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_ObjectToWorld[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_ObjectToWorld[2].z;
    u_xlat1.x = dot(u_xlat1, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat1.xxxx + u_xlat0;
    u_xlat1.x = hlslcc_mtx4x4unity_ObjectToWorld[0].w;
    u_xlat1.y = hlslcc_mtx4x4unity_ObjectToWorld[1].w;
    u_xlat1.z = hlslcc_mtx4x4unity_ObjectToWorld[2].w;
    u_xlat1.w = hlslcc_mtx4x4unity_ObjectToWorld[3].w;
    u_xlat1.x = dot(u_xlat1, u_xlat2);
    gl_Position = hlslcc_mtx4x4unity_MatrixVPZero[3] * u_xlat1.xxxx + u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	float _MainTexAlphaUse;
uniform 	mediump float _MainTexAlphaCutoff;
uniform lowp sampler2D _MainTex;
in highp vec2 vs_TEXCOORD0;
layout(location = 0) out mediump vec4 SV_Target0;
bool u_xlatb0;
lowp vec4 u_xlat10_1;
mediump float u_xlat16_2;
bool u_xlatb3;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_MainTexAlphaUse==1.0);
#else
    u_xlatb0 = _MainTexAlphaUse==1.0;
#endif
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_2 = u_xlat10_1.w + (-_MainTexAlphaCutoff);
    SV_Target0.xyz = u_xlat10_1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(u_xlat16_2<0.0);
#else
    u_xlatb3 = u_xlat16_2<0.0;
#endif
    u_xlatb0 = u_xlatb0 && u_xlatb3;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
}
Program "fp" {
SubProgram "gles3 " {
""
}
}
}
 Pass {
  Name "DEPTHONLY"
  Tags { "IGNOREPROJECTOR" = "False" "LIGHTMODE" = "DepthOnly" "QUEUE" = "Geometry" "RenderType" = "Opaque" }
  GpuProgramID 223331
Program "vp" {
SubProgram "gles3 " {
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
out highp vec4 vs_TEXCOORD5;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
bool u_xlatb8;
void main()
{
    u_xlat0.x = hlslcc_mtx4x4unity_ObjectToWorld[0].y;
    u_xlat0.y = hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat0.z = hlslcc_mtx4x4unity_ObjectToWorld[2].y;
    u_xlat1.xyw = (-_WorldSpaceCameraPos.xyz) + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat0.w = u_xlat1.y;
    u_xlat2.xyz = in_POSITION0.xyz;
    u_xlat2.w = 1.0;
    u_xlat0.x = dot(u_xlat0, u_xlat2);
    u_xlat0 = u_xlat0.xxxx * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat3.w = u_xlat1.x;
    u_xlat3.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;
    u_xlat3.y = hlslcc_mtx4x4unity_ObjectToWorld[1].x;
    u_xlat3.z = hlslcc_mtx4x4unity_ObjectToWorld[2].x;
    u_xlat3.x = dot(u_xlat3, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat3.xxxx + u_xlat0;
    u_xlat1.x = hlslcc_mtx4x4unity_ObjectToWorld[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_ObjectToWorld[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_ObjectToWorld[2].z;
    u_xlat1.x = dot(u_xlat1, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat1.xxxx + u_xlat0;
    u_xlat1.x = hlslcc_mtx4x4unity_ObjectToWorld[0].w;
    u_xlat1.y = hlslcc_mtx4x4unity_ObjectToWorld[1].w;
    u_xlat1.z = hlslcc_mtx4x4unity_ObjectToWorld[2].w;
    u_xlat1.w = hlslcc_mtx4x4unity_ObjectToWorld[3].w;
    u_xlat1.x = dot(u_xlat1, u_xlat2);
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVPZero[3] * u_xlat1.xxxx + u_xlat0;
    gl_Position = u_xlat0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb8 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD5.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb8)));
    vs_TEXCOORD5.z = u_xlatb8 ? _DitherAlpha : float(0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	float _UsingDitherAlpha;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_TARGET0;
vec2 u_xlat0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
bvec2 u_xlatb4;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD5.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD5.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD5.yx / vs_TEXCOORD5.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb4.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb4.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb4.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD5.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + -0.00999999978;
#ifdef UNITY_ADRENO_ES3
            u_xlatb0 = !!(u_xlat0.x<0.0);
#else
            u_xlatb0 = u_xlat0.x<0.0;
#endif
            if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    SV_TARGET0 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
"
}
}
Program "fp" {
SubProgram "gles3 " {
""
}
}
}
}
Fallback "Unlit/Texture"
CustomEditor "MoleMole.ASESceneObjectShaderEditorBase"
}