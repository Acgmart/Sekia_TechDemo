//////////////////////////////////////////
//
// NOTE: This is *not* a valid shader file
//
///////////////////////////////////////////
Shader "MiHoYo/Vegetation/Flower" {
Properties {
[Header(Element View)] _ElementViewEleID ("Element ID", Float) = 9
[Header(Albedo)] _MainTex ("Main Texture", 2D) = "white" { }
_BurnedColor ("Burned Color", Color) = (0.01,0.01,0.01,1)
_GrassShininess ("Shininess", Range(0.03, 0.97)) = 0.2
_CutOff ("Cut Off", Range(0, 1)) = 0.001
_RootColorScale ("Root Color Scale", Range(0.01, 10)) = 0.01
_RootColorOffset ("Root Color Offset", Range(-1, 1)) = 0
[Header(Depth Blend)] [Toggle(ENABLE_DEPTH_BLEND_ON)] _EnableDepthBlend ("Enable Depth Blend", Float) = 0
_DepthBiasScaled ("Depth bias scaled", Range(0, 16)) = 1
[Header(Motion)] _Noisemap ("Noisemap", 2D) = "black" { }
_NoiseScale ("Noise Scale", Float) = 20
_VegetationMoveScale ("Move scale", Range(0, 2)) = 1
_VegetationStiffness ("Stiffness", Range(0, 4)) = 0.5
[MHYToggle] _Billboard ("Billboard", Float) = 0
_WorldOffsetRange ("Heightmap World Offset and Range", Vector) = (0,0,128,128)
_Heightmap ("Heightmap", 2D) = "black" { }
_HeightScale ("Height Scale", Float) = 100
}
SubShader {
 LOD 100
 Tags { "QUEUE" = "AlphaTest-1" "RenderType" = "Opaque" }
 Pass {
  LOD 100
  Tags { "LIGHTMODE" = "HYBRIDDEFERRED" "QUEUE" = "AlphaTest-1" "RenderType" = "Opaque" }
  Cull Off
  GpuProgramID 7177
Program "vp" {
SubProgram "gles3 " {
Keywords { "MHY_SHADER_HIGH" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	float _NoiseScale;
uniform 	vec4 _WorldOffsetRange;
uniform 	float _HeightScale;
uniform 	float _Billboard;
uniform 	float _VegetationMoveScale;
uniform 	float _VegetationStiffness;
uniform 	vec4 _LocalWindsMapSize;
uniform 	vec4 _LargeWindParam;
uniform 	vec4 _SmallWindParam;
uniform 	vec4 _GlobalWind;
uniform 	vec4 _LocalWindsMapCameraInfo;
uniform 	float _GrassTipLighting;
uniform 	vec4 _MainTex_ST;
uniform 	float _RootColorScale;
uniform 	float _RootColorOffset;
uniform highp sampler2D _Heightmap;
uniform lowp sampler2D _Noisemap;
uniform lowp sampler2D _LocalWindsMap;
in highp vec4 in_POSITION0;
in highp vec4 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec2 in_TEXCOORD2;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp float vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec3 u_xlat1;
int u_xlati1;
vec4 u_xlat2;
bool u_xlatb2;
vec3 u_xlat3;
vec4 u_xlat4;
vec3 u_xlat5;
vec4 u_xlat6;
vec4 u_xlat7;
vec4 u_xlat8;
vec3 u_xlat9;
vec3 u_xlat10;
bool u_xlatb10;
vec2 u_xlat12;
vec3 u_xlat16;
vec2 u_xlat20;
vec2 u_xlat22;
float u_xlat30;
int u_xlati30;
float u_xlat31;
float u_xlat33;
float u_xlat34;
void main()
{
    u_xlat0.z = 0.0;
    u_xlat1.xyz = in_TEXCOORD0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[2].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TEXCOORD0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat10.xz = u_xlat1.xz + (-_LocalWindsMapSize.xy);
    u_xlat10.xz = vec2(u_xlat10.x / _LocalWindsMapSize.z, u_xlat10.z / _LocalWindsMapSize.w);
    u_xlat10.xz = u_xlat10.xz + vec2(0.5, 0.5);
    u_xlat2 = textureLod(_LocalWindsMap, u_xlat10.xz, 0.0);
    u_xlat10.x = dot(u_xlat2.xy, u_xlat2.xy);
    u_xlat10.x = sqrt(u_xlat10.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(9.99999975e-05>=u_xlat10.x);
#else
    u_xlatb10 = 9.99999975e-05>=u_xlat10.x;
#endif
    u_xlat10.x = u_xlatb10 ? 1.0 : float(0.0);
    u_xlat3.xy = (-u_xlat2.xy) + vec2(0.5, 0.5);
    u_xlat10.xz = u_xlat10.xx * u_xlat3.xy + u_xlat2.xy;
    u_xlat10.xz = u_xlat10.xz * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat31 = dot(u_xlat10.xz, u_xlat10.xz);
    u_xlat31 = max(u_xlat31, 0.00100000005);
    u_xlat3.x = inversesqrt(u_xlat31);
    u_xlat3.yz = u_xlat10.xz * u_xlat3.xx;
    u_xlat0.x = u_xlat3.z;
    u_xlat0.xz = (-u_xlat3.xy) * vec2(0.0, 1.0) + u_xlat0.xz;
    u_xlat31 = (-in_TEXCOORD1.x) + hlslcc_mtx4x4unity_ObjectToWorld[1].x;
    u_xlat2.x = u_xlat31 * 3.0;
    u_xlat2.x = _Time.y * 3.0 + u_xlat2.x;
    u_xlat2.x = u_xlat2.x + 0.5;
    u_xlat2.x = fract(u_xlat2.x);
    u_xlat2.x = u_xlat2.x * 2.0 + -1.0;
    u_xlat12.x = abs(u_xlat2.x) * abs(u_xlat2.x);
    u_xlat2.x = -abs(u_xlat2.x) * 2.0 + 3.0;
    u_xlat2.x = u_xlat2.x * u_xlat12.x;
    u_xlat12.x = u_xlat2.z * 1.5;
    u_xlat2.x = u_xlat12.x * u_xlat2.x;
    u_xlat0.xz = u_xlat0.xz * u_xlat2.xx;
    u_xlat0.xz = u_xlat0.xz * vec2(0.150000006, 0.150000006);
    u_xlat0.xz = u_xlat3.yz * u_xlat2.xx + u_xlat0.xz;
    u_xlat0.xz = u_xlat0.xz + u_xlat10.xz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(0.00199999986<u_xlat2.z);
#else
    u_xlatb2 = 0.00199999986<u_xlat2.z;
#endif
    u_xlat12.x = (-u_xlat2.w) * _LocalWindsMapCameraInfo.y + _LocalWindsMapCameraInfo.x;
    u_xlat0.xy = (bool(u_xlatb2)) ? u_xlat0.xz : u_xlat10.xz;
    u_xlat20.xy = vec2(_WorldOffsetRange.z + float(2.0), _WorldOffsetRange.w + float(2.0));
    u_xlat2.xz = u_xlat1.xz + (-_WorldOffsetRange.xy);
    u_xlat2.xz = u_xlat2.xz + vec2(1.0, 1.0);
    u_xlat20.xy = u_xlat2.xz / u_xlat20.xy;
    u_xlat20.x = textureLod(_Heightmap, u_xlat20.xy, 0.0).x;
    u_xlat30 = u_xlat20.x * _HeightScale + u_xlat1.y;
    u_xlat30 = (-u_xlat30) + u_xlat12.x;
    u_xlat30 = u_xlat30 * 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
#else
    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
#endif
    u_xlat30 = (-u_xlat30) + 1.0;
    u_xlat2.x = fract(u_xlat31);
    u_xlat31 = u_xlat31 + hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat12.xy = vec2(u_xlat31) * vec2(22.0, 33.0);
    u_xlat12.xy = fract(u_xlat12.xy);
    u_xlat12.xy = u_xlat12.xy + vec2(-0.5, -0.5);
    u_xlat3.xz = u_xlat12.xy * vec2(0.200000003, 0.200000003);
    u_xlat31 = u_xlat2.x + -0.5;
    u_xlat2.x = u_xlat2.x * _SmallWindParam.x;
    u_xlat2.x = sin(u_xlat2.x);
    u_xlat12.x = u_xlat31 * 0.333000004;
    u_xlat4.y = u_xlat31 * 0.333000004 + -1.0;
    u_xlat31 = in_TEXCOORD1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat31 = min(max(u_xlat31, 0.0), 1.0);
#else
    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat12.x * u_xlat31;
    u_xlat30 = u_xlat30 * u_xlat12.x;
    u_xlat0.xy = vec2(u_xlat30) * u_xlat0.xy;
    u_xlat5.xz = u_xlat0.xy * vec2(vec2(_VegetationMoveScale, _VegetationMoveScale));
    u_xlat0.x = dot(_GlobalWind.xyz, _GlobalWind.xyz);
    u_xlat0.x = max(u_xlat0.x, 0.00100000005);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat6 = u_xlat0.xxxx * _GlobalWind.xzxz;
    u_xlat0.xy = vec2(u_xlat6.z * _LargeWindParam.z, u_xlat6.w * _LargeWindParam.z);
    u_xlat22.xy = u_xlat1.xz / vec2(_NoiseScale);
    u_xlat22.xy = _LargeWindParam.xx * u_xlat6.xy + u_xlat22.xy;
    u_xlat22.xy = textureLod(_Noisemap, u_xlat22.xy, 0.0).xy;
    u_xlat22.xy = u_xlat22.xy + vec2(-0.5, -0.5);
    u_xlat22.xy = u_xlat22.xy * _LargeWindParam.yy + vec2(0.5, 0.5);
    u_xlat22.xy = u_xlat12.xx * u_xlat22.xy;
    u_xlat6.xz = u_xlat0.xy * u_xlat22.xy;
    u_xlat6.y = 0.0;
    u_xlat0.x = _VegetationStiffness * _SmallWindParam.y;
    u_xlat0.x = u_xlat12.x * u_xlat0.x;
    u_xlat7.x = u_xlat0.x * u_xlat2.x;
    u_xlat0.xyw = in_NORMAL0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyw = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_NORMAL0.xxx + u_xlat0.xyw;
    u_xlat0.xyw = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_NORMAL0.zzz + u_xlat0.xyw;
    u_xlat2.x = dot(u_xlat0.xyw, u_xlat0.xyw);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat0.xyw = u_xlat0.xyw * u_xlat2.xxx;
    u_xlat7.y = float(1.0);
    u_xlat7.z = float(0.349999994);
    u_xlat2.xzw = u_xlat0.xyw * u_xlat7.yxy;
    u_xlat8.xyz = u_xlat2.xzw * u_xlat7.xzx + u_xlat6.xyz;
    u_xlat2.xzw = u_xlat7.xzx * u_xlat2.xzw;
    u_xlat5.y = 0.0;
    u_xlat7.xyz = u_xlat5.xyz + u_xlat8.xyz;
    u_xlat8.y = hlslcc_mtx4x4unity_MatrixV[0].x;
    u_xlat8.x = hlslcc_mtx4x4unity_MatrixV[2].x;
    u_xlat33 = dot(u_xlat8.xy, u_xlat8.xy);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat16.xz = vec2(u_xlat33) * u_xlat8.xy;
    u_xlat8.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;
    u_xlat8.y = hlslcc_mtx4x4unity_ObjectToWorld[2].x;
    u_xlat33 = dot(u_xlat8.xy, u_xlat8.xy);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat8.xy = vec2(u_xlat33) * u_xlat8.xy;
    u_xlat9.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat9.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat9.xyz;
    u_xlat9.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat9.xyz;
    u_xlat9.xyz = u_xlat9.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat9.xyz = (-u_xlat1.xyz) + u_xlat9.xyz;
    u_xlat33 = u_xlat8.y * u_xlat9.z;
    u_xlat33 = u_xlat9.x * u_xlat8.x + (-u_xlat33);
    u_xlat34 = dot(u_xlat9.zx, u_xlat8.xy);
    u_xlat8.xy = u_xlat16.xz * vec2(u_xlat34);
    u_xlat34 = u_xlat33 * u_xlat16.z + (-u_xlat8.x);
    u_xlat33 = u_xlat33 * u_xlat16.x + u_xlat8.y;
    u_xlat33 = u_xlat9.z + u_xlat33;
    u_xlat9.z = (-u_xlat33) * _Billboard + u_xlat9.z;
    u_xlat33 = u_xlat9.x + u_xlat34;
    u_xlat9.x = (-u_xlat33) * _Billboard + u_xlat9.x;
    u_xlat33 = u_xlat12.x * u_xlat9.y;
    u_xlat12.x = max(u_xlat12.x, 9.99999972e-10);
    u_xlat7.xyz = u_xlat9.xyz * vec3(0.100000001, 1.0, 0.100000001) + u_xlat7.xyz;
    u_xlat34 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat34 = max(u_xlat34, 0.00100000005);
    u_xlat34 = inversesqrt(u_xlat34);
    u_xlat7.xyz = vec3(u_xlat34) * u_xlat7.xyz;
    u_xlat34 = dot(u_xlat9.xyz, u_xlat9.xyz);
    u_xlat34 = sqrt(u_xlat34);
    u_xlat8.xyz = u_xlat9.xyz * vec3(0.100000001, 1.0, 0.100000001);
    u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat34) + (-u_xlat8.xyz);
    u_xlat8.xyz = u_xlat1.xyz + u_xlat9.xyz;
    u_xlat8.w = u_xlat20.x * _HeightScale + u_xlat8.y;
    u_xlat1.xyz = u_xlat7.xyz + u_xlat8.xwz;
    u_xlat1.xyz = vec3(u_xlat33) * vec3(-0.5, 0.0, -0.5) + u_xlat1.xyz;
    u_xlat4.xz = u_xlat4.yy * (-u_xlat4.yy);
    u_xlat1.xyz = u_xlat4.xyz * u_xlat9.xyz + u_xlat1.xyz;
    u_xlat4.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat7 = u_xlat4.yyyy * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat7 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat4.xxxx + u_xlat7;
    u_xlat4 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat4.zzzz + u_xlat7;
    gl_Position = u_xlat4 + hlslcc_mtx4x4unity_MatrixVPZero[3];
    u_xlat3.y = 0.0;
    vs_TEXCOORD0.xyz = u_xlat3.xyz + vec3(-1.0, 0.0, -1.0);
    vs_TEXCOORD0.w = 0.0;
    u_xlat3.xyz = u_xlat5.yzx / u_xlat12.xxx;
    u_xlat4.yz = u_xlat6.zx / u_xlat12.xx;
    u_xlat2.xyz = u_xlat2.zwx / u_xlat12.xxx;
    u_xlat4.x = 0.0;
    u_xlat2.xyz = u_xlat2.xyz + u_xlat4.xyz;
    u_xlat2.xyz = u_xlat3.xyz + u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz + vec3(0.0, -1.0, -1.0);
    u_xlat20.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat20.x = inversesqrt(u_xlat20.x);
    u_xlat2.xyz = u_xlat20.xxx * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat0.xyw * u_xlat2.xyz;
    u_xlat0.xyz = u_xlat2.zxy * u_xlat0.ywx + (-u_xlat3.xyz);
    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.xyz * u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
    u_xlat30 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat1.xyz = vec3(u_xlat30) * u_xlat1.xyz;
    u_xlat30 = dot(u_xlat1.xyz, u_xlat0.xyz);
#ifdef UNITY_ADRENO_ES3
    { bool cond = 0.0<u_xlat30; u_xlati1 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati1 = int((0.0<u_xlat30) ? 0xFFFFFFFFu : uint(0u));
#endif
#ifdef UNITY_ADRENO_ES3
    { bool cond = u_xlat30<0.0; u_xlati30 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati30 = int((u_xlat30<0.0) ? 0xFFFFFFFFu : uint(0u));
#endif
    u_xlati30 = (-u_xlati1) + u_xlati30;
    u_xlat30 = float(u_xlati30);
    vs_TEXCOORD1.xyz = vec3(u_xlat30) * u_xlat0.xyz;
    vs_TEXCOORD1.w = 0.0;
    u_xlat0.x = u_xlat31 / _RootColorScale;
    u_xlat0.x = u_xlat0.x + _RootColorOffset;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xxx * vec3(-0.501960814, 0.0, 0.0) + vec3(0.501960814, 0.0, 0.0);
    u_xlat30 = u_xlat31 + -0.600000024;
    vs_TEXCOORD3 = u_xlat31;
    u_xlat30 = max(u_xlat30, 0.0);
    u_xlat30 = _GrassTipLighting * u_xlat30 + 1.0;
    vs_TEXCOORD2.xyz = vec3(u_xlat30) * u_xlat0.xyz;
    vs_TEXCOORD2.w = 0.0;
    vs_TEXCOORD4.xy = in_TEXCOORD2.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	float _GrassShininess;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	float _CutOff;
uniform 	vec4 _BurnedColor;
uniform lowp sampler2D _MainTex;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp float vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec4 u_xlat0;
lowp vec4 u_xlat10_0;
bool u_xlatb0;
vec3 u_xlat1;
mediump float u_xlat16_2;
float u_xlat9;
bool u_xlatb9;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD4.xy);
    u_xlat9 = u_xlat10_0.w + (-_CutOff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(u_xlat9<0.0);
#else
    u_xlatb9 = u_xlat9<0.0;
#endif
    if((int(u_xlatb9) * int(0xffffffffu))!=0){discard;}
    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
    SV_Target0.xyz = u_xlat1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0;
    u_xlat1.xyz = _BurnedColor.xyz * u_xlat10_0.xyz + (-u_xlat10_0.xyz);
    u_xlat0.xyz = vs_TEXCOORD2.www * u_xlat1.xyz + u_xlat10_0.xyz;
    u_xlat0.w = vs_TEXCOORD3;
    SV_Target1 = u_xlat0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_2 = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb0) ? u_xlat16_2 : 0.0399999991;
    u_xlat0.x = (-vs_TEXCOORD2.w) + 1.0;
    u_xlat0.x = u_xlat0.x * _GrassShininess;
    SV_Target2.w = u_xlat0.x;
    SV_Target2.xy = vec2(0.0399999991, 0.0399999991);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MHY_SHADER_HIGH" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	int unity_BaseInstanceID;
uniform 	float _NoiseScale;
uniform 	vec4 _WorldOffsetRange;
uniform 	float _HeightScale;
uniform 	float _Billboard;
uniform 	float _VegetationMoveScale;
uniform 	float _VegetationStiffness;
uniform 	vec4 _LocalWindsMapSize;
uniform 	vec4 _LargeWindParam;
uniform 	vec4 _SmallWindParam;
uniform 	vec4 _GlobalWind;
uniform 	vec4 _LocalWindsMapCameraInfo;
uniform 	float _GrassTipLighting;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BurnedColor;
uniform 	float _RootColorScale;
uniform 	float _RootColorOffset;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _Heightmap;
uniform lowp sampler2D _Noisemap;
uniform lowp sampler2D _LocalWindsMap;
in highp vec4 in_POSITION0;
in highp vec4 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec2 in_TEXCOORD2;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp float vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec3 u_xlat0;
int u_xlati0;
uvec3 u_xlatu0;
vec3 u_xlat1;
uvec3 u_xlatu1;
vec4 u_xlat2;
uvec3 u_xlatu2;
vec3 u_xlat3;
vec4 u_xlat4;
vec3 u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
vec3 u_xlat8;
vec4 u_xlat9;
vec4 u_xlat10;
float u_xlat11;
int u_xlati11;
float u_xlat13;
uint u_xlatu13;
vec3 u_xlat17;
vec3 u_xlat18;
float u_xlat22;
int u_xlati22;
bool u_xlatb22;
float u_xlat24;
float u_xlat33;
bool u_xlatb33;
float u_xlat34;
bool u_xlatb34;
float u_xlat36;
void main()
{
    u_xlat0.z = 0.0;
    u_xlati11 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati11 = u_xlati11 << 2;
    u_xlat1.xyz = in_TEXCOORD0.yyy * unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_TEXCOORD0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat2.xy = u_xlat1.xz + (-_LocalWindsMapSize.xy);
    u_xlat2.xy = vec2(u_xlat2.x / _LocalWindsMapSize.z, u_xlat2.y / _LocalWindsMapSize.w);
    u_xlat2.xy = u_xlat2.xy + vec2(0.5, 0.5);
    u_xlat2 = textureLod(_LocalWindsMap, u_xlat2.xy, 0.0);
    u_xlat33 = dot(u_xlat2.xy, u_xlat2.xy);
    u_xlat33 = sqrt(u_xlat33);
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(9.99999975e-05>=u_xlat33);
#else
    u_xlatb33 = 9.99999975e-05>=u_xlat33;
#endif
    u_xlat33 = u_xlatb33 ? 1.0 : float(0.0);
    u_xlat3.xy = (-u_xlat2.xy) + vec2(0.5, 0.5);
    u_xlat2.xy = vec2(u_xlat33) * u_xlat3.xy + u_xlat2.xy;
    u_xlat2.xy = u_xlat2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat33 = dot(u_xlat2.xy, u_xlat2.xy);
    u_xlat33 = max(u_xlat33, 0.00100000005);
    u_xlat3.x = inversesqrt(u_xlat33);
    u_xlat3.yz = u_xlat2.xy * u_xlat3.xx;
    u_xlat0.x = u_xlat3.z;
    u_xlat0.xz = (-u_xlat3.xy) * vec2(0.0, 1.0) + u_xlat0.xz;
    u_xlat33 = (-in_TEXCOORD1.x) + unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].x;
    u_xlat34 = u_xlat33 * 3.0;
    u_xlat34 = _Time.y * 3.0 + u_xlat34;
    u_xlat34 = u_xlat34 + 0.5;
    u_xlat34 = fract(u_xlat34);
    u_xlat34 = u_xlat34 * 2.0 + -1.0;
    u_xlat3.x = abs(u_xlat34) * abs(u_xlat34);
    u_xlat34 = -abs(u_xlat34) * 2.0 + 3.0;
    u_xlat34 = u_xlat34 * u_xlat3.x;
    u_xlat3.x = u_xlat2.z * 1.5;
    u_xlat34 = u_xlat34 * u_xlat3.x;
    u_xlat0.xz = u_xlat0.xz * vec2(u_xlat34);
    u_xlat0.xz = u_xlat0.xz * vec2(0.150000006, 0.150000006);
    u_xlat0.xz = u_xlat3.yz * vec2(u_xlat34) + u_xlat0.xz;
    u_xlat0.xz = u_xlat0.xz + u_xlat2.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlatb34 = !!(0.00199999986<u_xlat2.z);
#else
    u_xlatb34 = 0.00199999986<u_xlat2.z;
#endif
    u_xlat24 = (-u_xlat2.w) * _LocalWindsMapCameraInfo.y + _LocalWindsMapCameraInfo.x;
    u_xlat0.xz = (bool(u_xlatb34)) ? u_xlat0.xz : u_xlat2.xy;
    u_xlat2.xy = vec2(_WorldOffsetRange.z + float(2.0), _WorldOffsetRange.w + float(2.0));
    u_xlat3.xy = u_xlat1.xz + (-_WorldOffsetRange.xy);
    u_xlat3.xy = u_xlat3.xy + vec2(1.0, 1.0);
    u_xlat2.xy = u_xlat3.xy / u_xlat2.xy;
    u_xlat34 = textureLod(_Heightmap, u_xlat2.xy, 0.0).x;
    u_xlat2.x = u_xlat34 * _HeightScale + u_xlat1.y;
    u_xlat2.x = (-u_xlat2.x) + u_xlat24;
    u_xlat2.x = u_xlat2.x * 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat2.x = (-u_xlat2.x) + 1.0;
    u_xlat13 = float(floatBitsToUint(unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2]).w);
    u_xlat13 = u_xlat13 * 5.96046448e-08;
    u_xlatu13 = uint(u_xlat13);
    u_xlatu13 = u_xlatu13 & 3u;
    u_xlat13 = float(u_xlatu13);
    u_xlat24 = fract(u_xlat33);
    u_xlat33 = u_xlat33 + unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].y;
    u_xlat3.xy = vec2(u_xlat33) * vec2(22.0, 33.0);
    u_xlat3.xy = fract(u_xlat3.xy);
    u_xlat3.xy = u_xlat3.xy + vec2(-0.5, -0.5);
    u_xlat3.xz = u_xlat3.xy * vec2(0.200000003, 0.200000003);
    u_xlat33 = u_xlat13 + u_xlat24;
    u_xlat13 = u_xlat24 * _SmallWindParam.x;
    u_xlat13 = sin(u_xlat13);
    u_xlat33 = u_xlat33 + -0.5;
    u_xlat24 = u_xlat33 * 0.333000004;
    u_xlat4.y = u_xlat33 * 0.333000004 + -1.0;
    u_xlat33 = in_TEXCOORD1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat33 = min(max(u_xlat33, 0.0), 1.0);
#else
    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
#endif
    u_xlat24 = u_xlat24 * u_xlat33;
    u_xlat2.x = u_xlat24 * u_xlat2.x;
    u_xlat0.xz = u_xlat0.xz * u_xlat2.xx;
    u_xlat5.xz = u_xlat0.xz * vec2(vec2(_VegetationMoveScale, _VegetationMoveScale));
    u_xlat6.y = 0.0;
    u_xlat0.x = _VegetationStiffness * _SmallWindParam.y;
    u_xlat0.x = u_xlat24 * u_xlat0.x;
    u_xlat7.x = u_xlat0.x * u_xlat13;
    u_xlat2.xyw = in_NORMAL0.yyy * unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat2.xyw = unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_NORMAL0.xxx + u_xlat2.xyw;
    u_xlat2.xyw = unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_NORMAL0.zzz + u_xlat2.xyw;
    u_xlat0.x = dot(u_xlat2.xyw, u_xlat2.xyw);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat2.xyw = u_xlat0.xxx * u_xlat2.xyw;
    u_xlat7.y = float(1.0);
    u_xlat7.z = float(0.349999994);
    u_xlat8.xyz = u_xlat2.xyw * u_xlat7.yxy;
    u_xlat0.x = dot(_GlobalWind.xyz, _GlobalWind.xyz);
    u_xlat0.x = max(u_xlat0.x, 0.00100000005);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat9 = u_xlat0.xxxx * _GlobalWind.xzxz;
    u_xlat0.xz = vec2(u_xlat9.z * _LargeWindParam.z, u_xlat9.w * _LargeWindParam.z);
    u_xlat18.xz = u_xlat1.xz / vec2(_NoiseScale);
    u_xlat18.xz = _LargeWindParam.xx * u_xlat9.xy + u_xlat18.xz;
    u_xlat18.xz = textureLod(_Noisemap, u_xlat18.xz, 0.0).xy;
    u_xlat18.xz = u_xlat18.xz + vec2(-0.5, -0.5);
    u_xlat18.xz = u_xlat18.xz * _LargeWindParam.yy + vec2(0.5, 0.5);
    u_xlat18.xz = vec2(u_xlat24) * u_xlat18.xz;
    u_xlat6.xz = u_xlat0.xz * u_xlat18.xz;
    u_xlat9.xyz = u_xlat8.xyz * u_xlat7.xzx + u_xlat6.xyz;
    u_xlat7.xyz = u_xlat7.xzx * u_xlat8.xyz;
    u_xlat5.y = 0.0;
    u_xlat8.xyz = u_xlat5.xyz + u_xlat9.xyz;
    u_xlat9.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat9.xyz = unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat9.xyz;
    u_xlat9.xyz = unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat9.xyz;
    u_xlat9.xyz = u_xlat9.xyz + unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat9.xyz = (-u_xlat1.xyz) + u_xlat9.xyz;
    u_xlat10.x = unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].x;
    u_xlat10.y = unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].x;
    u_xlat0.x = dot(u_xlat10.xy, u_xlat10.xy);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xz = u_xlat0.xx * u_xlat10.xy;
    u_xlat36 = u_xlat0.z * u_xlat9.z;
    u_xlat36 = u_xlat9.x * u_xlat0.x + (-u_xlat36);
    u_xlat0.x = dot(u_xlat9.zx, u_xlat0.xz);
    u_xlat10.y = hlslcc_mtx4x4unity_MatrixV[0].x;
    u_xlat10.x = hlslcc_mtx4x4unity_MatrixV[2].x;
    u_xlat22 = dot(u_xlat10.xy, u_xlat10.xy);
    u_xlat22 = inversesqrt(u_xlat22);
    u_xlat17.xz = vec2(u_xlat22) * u_xlat10.xy;
    u_xlat0.xz = u_xlat0.xx * u_xlat17.xz;
    u_xlat0.x = u_xlat36 * u_xlat17.z + (-u_xlat0.x);
    u_xlat0.z = u_xlat36 * u_xlat17.x + u_xlat0.z;
    u_xlat0.xz = u_xlat9.xz + u_xlat0.xz;
    u_xlat9.z = (-u_xlat0.z) * _Billboard + u_xlat9.z;
    u_xlat9.x = (-u_xlat0.x) * _Billboard + u_xlat9.x;
    u_xlat8.xyz = u_xlat9.xyz * vec3(0.100000001, 1.0, 0.100000001) + u_xlat8.xyz;
    u_xlat0.x = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat0.x = max(u_xlat0.x, 0.00100000005);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat8.xyz = u_xlat0.xxx * u_xlat8.xyz;
    u_xlat0.x = dot(u_xlat9.xyz, u_xlat9.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat10.xyz = u_xlat9.xyz * vec3(0.100000001, 1.0, 0.100000001);
    u_xlat8.xyz = u_xlat8.xyz * u_xlat0.xxx + (-u_xlat10.xyz);
    u_xlat10.xyz = u_xlat1.xyz + u_xlat9.xyz;
    u_xlat10.w = u_xlat34 * _HeightScale + u_xlat10.y;
    u_xlat1.xyz = u_xlat8.xyz + u_xlat10.xwz;
    u_xlatu0.xz = uvec2(65280u, 255u) & floatBitsToUint(unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1]).ww;
    u_xlat0.xz = vec2(u_xlatu0.xz);
    u_xlat0.x = u_xlat0.x * 0.00390625;
    u_xlatu0.x = uint(u_xlat0.x);
    u_xlat0.x = float(u_xlatu0.x);
    u_xlat8.xz = u_xlat0.xz + vec2(-127.0, -127.0);
    u_xlat0.xz = u_xlat8.xz * vec2(0.00787401572, 0.00787401572);
    u_xlat0.xz = u_xlat0.xz * u_xlat0.xz;
    u_xlat0.x = u_xlat0.z + u_xlat0.x;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(0.0<u_xlat0.x);
#else
    u_xlatb22 = 0.0<u_xlat0.x;
#endif
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat8.y = u_xlatb22 ? u_xlat0.x : float(0.0);
    u_xlat10.xyz = u_xlat8.xyz * u_xlat9.yyy;
    u_xlat10.xyz = vec3(u_xlat24) * u_xlat10.xyz;
    u_xlat0.x = max(u_xlat24, 9.99999972e-10);
    u_xlat1.xyz = u_xlat10.xyz * vec3(0.00393700786, 0.0, 0.00393700786) + u_xlat1.xyz;
    u_xlat4.xz = u_xlat4.yy * (-u_xlat4.yy);
    u_xlat1.xyz = u_xlat4.xyz * u_xlat9.xyz + u_xlat1.xyz;
    u_xlat4.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat9 = u_xlat4.yyyy * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat9 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat4.xxxx + u_xlat9;
    u_xlat4 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat4.zzzz + u_xlat9;
    gl_Position = u_xlat4 + hlslcc_mtx4x4unity_MatrixVPZero[3];
    u_xlat3.y = 0.0;
    vs_TEXCOORD0.xyz = u_xlat8.xyz * vec3(0.00787401572, 1.0, 0.00787401572) + u_xlat3.xyz;
    vs_TEXCOORD0.w = 0.0;
    u_xlat3.xyz = u_xlat5.yzx / u_xlat0.xxx;
    u_xlat4.yz = u_xlat6.zx / u_xlat0.xx;
    u_xlat5.xyz = u_xlat7.yzx / u_xlat0.xxx;
    u_xlat4.x = 0.0;
    u_xlat4.xyz = u_xlat4.xyz + u_xlat5.xyz;
    u_xlat3.xyz = u_xlat3.xyz + u_xlat4.xyz;
    u_xlat3.xyz = u_xlat8.yzx * vec3(1.0, 0.00787401572, 0.00787401572) + u_xlat3.xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.xyw * u_xlat3.xyz;
    u_xlat2.xyz = u_xlat3.zxy * u_xlat2.ywx + (-u_xlat4.xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat4.xyz = u_xlat3.xyz * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
    { bool cond = 0.0<u_xlat0.x; u_xlati22 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati22 = int((0.0<u_xlat0.x) ? 0xFFFFFFFFu : uint(0u));
#endif
#ifdef UNITY_ADRENO_ES3
    { bool cond = u_xlat0.x<0.0; u_xlati0 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati0 = int((u_xlat0.x<0.0) ? 0xFFFFFFFFu : uint(0u));
#endif
    u_xlati0 = (-u_xlati22) + u_xlati0;
    u_xlat0.x = float(u_xlati0);
    vs_TEXCOORD1.xyz = u_xlat0.xxx * u_xlat2.xyz;
    vs_TEXCOORD1.w = 0.0;
    u_xlatu1.xyz = uvec3(16711680u, 65280u, 255u) & floatBitsToUint(unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2]).www;
    u_xlat1.xyz = vec3(u_xlatu1.xyz);
    u_xlatu2.xyz = uvec3(16711680u, 65280u, 255u) & floatBitsToUint(unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3]).www;
    u_xlat0.x = max(1.0, unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].w);
    u_xlat0.x = min(u_xlat0.x, 2.0);
    u_xlat0.x = u_xlat0.x + -1.0;
    u_xlat2.xyz = vec3(u_xlatu2.xyz);
    u_xlat2.xyz = u_xlat2.xyz * vec3(5.9838392e-08, 1.53186284e-05, 0.00392156886);
    u_xlat1.xyz = u_xlat1.xyz * vec3(5.9838392e-08, 1.53186284e-05, 0.00392156886) + (-u_xlat2.xyz);
    u_xlat11 = u_xlat33 / _RootColorScale;
    u_xlat11 = u_xlat11 + _RootColorOffset;
#ifdef UNITY_ADRENO_ES3
    u_xlat11 = min(max(u_xlat11, 0.0), 1.0);
#else
    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat11) * u_xlat1.xyz + u_xlat2.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _BurnedColor.xyz;
    u_xlat1.xyz = u_xlat0.xxx * u_xlat2.xyz + u_xlat1.xyz;
    vs_TEXCOORD2.w = u_xlat0.x;
    u_xlat0.x = u_xlat33 + -0.600000024;
    vs_TEXCOORD3 = u_xlat33;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = _GrassTipLighting * u_xlat0.x + 1.0;
    vs_TEXCOORD2.xyz = u_xlat0.xxx * u_xlat1.xyz;
    vs_TEXCOORD4.xy = in_TEXCOORD2.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	float _GrassShininess;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	float _CutOff;
uniform 	vec4 _BurnedColor;
uniform lowp sampler2D _MainTex;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp float vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec4 u_xlat0;
lowp vec4 u_xlat10_0;
bool u_xlatb0;
vec3 u_xlat1;
mediump float u_xlat16_2;
float u_xlat9;
bool u_xlatb9;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD4.xy);
    u_xlat9 = u_xlat10_0.w + (-_CutOff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(u_xlat9<0.0);
#else
    u_xlatb9 = u_xlat9<0.0;
#endif
    if((int(u_xlatb9) * int(0xffffffffu))!=0){discard;}
    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
    SV_Target0.xyz = u_xlat1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0;
    u_xlat1.xyz = _BurnedColor.xyz * u_xlat10_0.xyz + (-u_xlat10_0.xyz);
    u_xlat0.xyz = vs_TEXCOORD2.www * u_xlat1.xyz + u_xlat10_0.xyz;
    u_xlat0.w = vs_TEXCOORD3;
    SV_Target1 = u_xlat0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_2 = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb0) ? u_xlat16_2 : 0.0399999991;
    u_xlat0.x = (-vs_TEXCOORD2.w) + 1.0;
    u_xlat0.x = u_xlat0.x * _GrassShininess;
    SV_Target2.w = u_xlat0.x;
    SV_Target2.xy = vec2(0.0399999991, 0.0399999991);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "MHY_SHADER_HIGH" "DITHER_FADE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	float _NoiseScale;
uniform 	vec4 _WorldOffsetRange;
uniform 	float _HeightScale;
uniform 	float _Billboard;
uniform 	float _VegetationMoveScale;
uniform 	float _VegetationStiffness;
uniform 	vec4 _LocalWindsMapSize;
uniform 	vec4 _LargeWindParam;
uniform 	vec4 _SmallWindParam;
uniform 	vec4 _GlobalWind;
uniform 	vec4 _LocalWindsMapCameraInfo;
uniform 	float _GrassTipLighting;
uniform 	vec4 _MainTex_ST;
uniform 	float _RootColorScale;
uniform 	float _RootColorOffset;
uniform highp sampler2D _Heightmap;
uniform lowp sampler2D _Noisemap;
uniform lowp sampler2D _LocalWindsMap;
in highp vec4 in_POSITION0;
in highp vec4 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec2 in_TEXCOORD2;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp float vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
vec4 u_xlat0;
vec3 u_xlat1;
int u_xlati1;
vec4 u_xlat2;
bool u_xlatb2;
vec3 u_xlat3;
vec4 u_xlat4;
vec3 u_xlat5;
vec4 u_xlat6;
vec4 u_xlat7;
vec4 u_xlat8;
vec3 u_xlat9;
vec3 u_xlat10;
bool u_xlatb10;
vec2 u_xlat12;
vec3 u_xlat16;
vec2 u_xlat20;
vec2 u_xlat22;
float u_xlat30;
int u_xlati30;
float u_xlat31;
float u_xlat33;
float u_xlat34;
void main()
{
    u_xlat0.z = 0.0;
    u_xlat1.xyz = in_TEXCOORD0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[2].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TEXCOORD0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat10.xz = u_xlat1.xz + (-_LocalWindsMapSize.xy);
    u_xlat10.xz = vec2(u_xlat10.x / _LocalWindsMapSize.z, u_xlat10.z / _LocalWindsMapSize.w);
    u_xlat10.xz = u_xlat10.xz + vec2(0.5, 0.5);
    u_xlat2 = textureLod(_LocalWindsMap, u_xlat10.xz, 0.0);
    u_xlat10.x = dot(u_xlat2.xy, u_xlat2.xy);
    u_xlat10.x = sqrt(u_xlat10.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(9.99999975e-05>=u_xlat10.x);
#else
    u_xlatb10 = 9.99999975e-05>=u_xlat10.x;
#endif
    u_xlat10.x = u_xlatb10 ? 1.0 : float(0.0);
    u_xlat3.xy = (-u_xlat2.xy) + vec2(0.5, 0.5);
    u_xlat10.xz = u_xlat10.xx * u_xlat3.xy + u_xlat2.xy;
    u_xlat10.xz = u_xlat10.xz * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat31 = dot(u_xlat10.xz, u_xlat10.xz);
    u_xlat31 = max(u_xlat31, 0.00100000005);
    u_xlat3.x = inversesqrt(u_xlat31);
    u_xlat3.yz = u_xlat10.xz * u_xlat3.xx;
    u_xlat0.x = u_xlat3.z;
    u_xlat0.xz = (-u_xlat3.xy) * vec2(0.0, 1.0) + u_xlat0.xz;
    u_xlat31 = (-in_TEXCOORD1.x) + hlslcc_mtx4x4unity_ObjectToWorld[1].x;
    u_xlat2.x = u_xlat31 * 3.0;
    u_xlat2.x = _Time.y * 3.0 + u_xlat2.x;
    u_xlat2.x = u_xlat2.x + 0.5;
    u_xlat2.x = fract(u_xlat2.x);
    u_xlat2.x = u_xlat2.x * 2.0 + -1.0;
    u_xlat12.x = abs(u_xlat2.x) * abs(u_xlat2.x);
    u_xlat2.x = -abs(u_xlat2.x) * 2.0 + 3.0;
    u_xlat2.x = u_xlat2.x * u_xlat12.x;
    u_xlat12.x = u_xlat2.z * 1.5;
    u_xlat2.x = u_xlat12.x * u_xlat2.x;
    u_xlat0.xz = u_xlat0.xz * u_xlat2.xx;
    u_xlat0.xz = u_xlat0.xz * vec2(0.150000006, 0.150000006);
    u_xlat0.xz = u_xlat3.yz * u_xlat2.xx + u_xlat0.xz;
    u_xlat0.xz = u_xlat0.xz + u_xlat10.xz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(0.00199999986<u_xlat2.z);
#else
    u_xlatb2 = 0.00199999986<u_xlat2.z;
#endif
    u_xlat12.x = (-u_xlat2.w) * _LocalWindsMapCameraInfo.y + _LocalWindsMapCameraInfo.x;
    u_xlat0.xy = (bool(u_xlatb2)) ? u_xlat0.xz : u_xlat10.xz;
    u_xlat20.xy = vec2(_WorldOffsetRange.z + float(2.0), _WorldOffsetRange.w + float(2.0));
    u_xlat2.xz = u_xlat1.xz + (-_WorldOffsetRange.xy);
    u_xlat2.xz = u_xlat2.xz + vec2(1.0, 1.0);
    u_xlat20.xy = u_xlat2.xz / u_xlat20.xy;
    u_xlat20.x = textureLod(_Heightmap, u_xlat20.xy, 0.0).x;
    u_xlat30 = u_xlat20.x * _HeightScale + u_xlat1.y;
    u_xlat30 = (-u_xlat30) + u_xlat12.x;
    u_xlat30 = u_xlat30 * 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
#else
    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
#endif
    u_xlat30 = (-u_xlat30) + 1.0;
    u_xlat2.x = fract(u_xlat31);
    u_xlat31 = u_xlat31 + hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat12.xy = vec2(u_xlat31) * vec2(22.0, 33.0);
    u_xlat12.xy = fract(u_xlat12.xy);
    u_xlat12.xy = u_xlat12.xy + vec2(-0.5, -0.5);
    u_xlat3.xz = u_xlat12.xy * vec2(0.200000003, 0.200000003);
    u_xlat31 = u_xlat2.x + -0.5;
    u_xlat2.x = u_xlat2.x * _SmallWindParam.x;
    u_xlat2.x = sin(u_xlat2.x);
    u_xlat12.x = u_xlat31 * 0.333000004;
    u_xlat4.y = u_xlat31 * 0.333000004 + -1.0;
    u_xlat31 = in_TEXCOORD1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat31 = min(max(u_xlat31, 0.0), 1.0);
#else
    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat12.x * u_xlat31;
    u_xlat30 = u_xlat30 * u_xlat12.x;
    u_xlat0.xy = vec2(u_xlat30) * u_xlat0.xy;
    u_xlat5.xz = u_xlat0.xy * vec2(vec2(_VegetationMoveScale, _VegetationMoveScale));
    u_xlat0.x = dot(_GlobalWind.xyz, _GlobalWind.xyz);
    u_xlat0.x = max(u_xlat0.x, 0.00100000005);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat6 = u_xlat0.xxxx * _GlobalWind.xzxz;
    u_xlat0.xy = vec2(u_xlat6.z * _LargeWindParam.z, u_xlat6.w * _LargeWindParam.z);
    u_xlat22.xy = u_xlat1.xz / vec2(_NoiseScale);
    u_xlat22.xy = _LargeWindParam.xx * u_xlat6.xy + u_xlat22.xy;
    u_xlat22.xy = textureLod(_Noisemap, u_xlat22.xy, 0.0).xy;
    u_xlat22.xy = u_xlat22.xy + vec2(-0.5, -0.5);
    u_xlat22.xy = u_xlat22.xy * _LargeWindParam.yy + vec2(0.5, 0.5);
    u_xlat22.xy = u_xlat12.xx * u_xlat22.xy;
    u_xlat6.xz = u_xlat0.xy * u_xlat22.xy;
    u_xlat6.y = 0.0;
    u_xlat0.x = _VegetationStiffness * _SmallWindParam.y;
    u_xlat0.x = u_xlat12.x * u_xlat0.x;
    u_xlat7.x = u_xlat0.x * u_xlat2.x;
    u_xlat0.xyw = in_NORMAL0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyw = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_NORMAL0.xxx + u_xlat0.xyw;
    u_xlat0.xyw = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_NORMAL0.zzz + u_xlat0.xyw;
    u_xlat2.x = dot(u_xlat0.xyw, u_xlat0.xyw);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat0.xyw = u_xlat0.xyw * u_xlat2.xxx;
    u_xlat7.y = float(1.0);
    u_xlat7.z = float(0.349999994);
    u_xlat2.xzw = u_xlat0.xyw * u_xlat7.yxy;
    u_xlat8.xyz = u_xlat2.xzw * u_xlat7.xzx + u_xlat6.xyz;
    u_xlat2.xzw = u_xlat7.xzx * u_xlat2.xzw;
    u_xlat5.y = 0.0;
    u_xlat7.xyz = u_xlat5.xyz + u_xlat8.xyz;
    u_xlat8.y = hlslcc_mtx4x4unity_MatrixV[0].x;
    u_xlat8.x = hlslcc_mtx4x4unity_MatrixV[2].x;
    u_xlat33 = dot(u_xlat8.xy, u_xlat8.xy);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat16.xz = vec2(u_xlat33) * u_xlat8.xy;
    u_xlat8.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;
    u_xlat8.y = hlslcc_mtx4x4unity_ObjectToWorld[2].x;
    u_xlat33 = dot(u_xlat8.xy, u_xlat8.xy);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat8.xy = vec2(u_xlat33) * u_xlat8.xy;
    u_xlat9.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat9.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat9.xyz;
    u_xlat9.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat9.xyz;
    u_xlat9.xyz = u_xlat9.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat9.xyz = (-u_xlat1.xyz) + u_xlat9.xyz;
    u_xlat33 = u_xlat8.y * u_xlat9.z;
    u_xlat33 = u_xlat9.x * u_xlat8.x + (-u_xlat33);
    u_xlat34 = dot(u_xlat9.zx, u_xlat8.xy);
    u_xlat8.xy = u_xlat16.xz * vec2(u_xlat34);
    u_xlat34 = u_xlat33 * u_xlat16.z + (-u_xlat8.x);
    u_xlat33 = u_xlat33 * u_xlat16.x + u_xlat8.y;
    u_xlat33 = u_xlat9.z + u_xlat33;
    u_xlat9.z = (-u_xlat33) * _Billboard + u_xlat9.z;
    u_xlat33 = u_xlat9.x + u_xlat34;
    u_xlat9.x = (-u_xlat33) * _Billboard + u_xlat9.x;
    u_xlat33 = u_xlat12.x * u_xlat9.y;
    u_xlat12.x = max(u_xlat12.x, 9.99999972e-10);
    u_xlat7.xyz = u_xlat9.xyz * vec3(0.100000001, 1.0, 0.100000001) + u_xlat7.xyz;
    u_xlat34 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat34 = max(u_xlat34, 0.00100000005);
    u_xlat34 = inversesqrt(u_xlat34);
    u_xlat7.xyz = vec3(u_xlat34) * u_xlat7.xyz;
    u_xlat34 = dot(u_xlat9.xyz, u_xlat9.xyz);
    u_xlat34 = sqrt(u_xlat34);
    u_xlat8.xyz = u_xlat9.xyz * vec3(0.100000001, 1.0, 0.100000001);
    u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat34) + (-u_xlat8.xyz);
    u_xlat8.xyz = u_xlat1.xyz + u_xlat9.xyz;
    u_xlat8.w = u_xlat20.x * _HeightScale + u_xlat8.y;
    u_xlat1.xyz = u_xlat7.xyz + u_xlat8.xwz;
    u_xlat1.xyz = vec3(u_xlat33) * vec3(-0.5, 0.0, -0.5) + u_xlat1.xyz;
    u_xlat4.xz = u_xlat4.yy * (-u_xlat4.yy);
    u_xlat1.xyz = u_xlat4.xyz * u_xlat9.xyz + u_xlat1.xyz;
    u_xlat4.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat7 = u_xlat4.yyyy * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat7 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat4.xxxx + u_xlat7;
    u_xlat4 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat4.zzzz + u_xlat7;
    u_xlat4 = u_xlat4 + hlslcc_mtx4x4unity_MatrixVPZero[3];
    gl_Position = u_xlat4;
    u_xlat3.y = 0.0;
    vs_TEXCOORD0.xyz = u_xlat3.xyz + vec3(-1.0, 0.0, -1.0);
    vs_TEXCOORD0.w = 0.0;
    u_xlat3.xyz = u_xlat5.yzx / u_xlat12.xxx;
    u_xlat5.yz = u_xlat6.zx / u_xlat12.xx;
    u_xlat2.xyz = u_xlat2.zwx / u_xlat12.xxx;
    u_xlat5.x = 0.0;
    u_xlat2.xyz = u_xlat2.xyz + u_xlat5.xyz;
    u_xlat2.xyz = u_xlat3.xyz + u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz + vec3(0.0, -1.0, -1.0);
    u_xlat20.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat20.x = inversesqrt(u_xlat20.x);
    u_xlat2.xyz = u_xlat20.xxx * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat0.xyw * u_xlat2.xyz;
    u_xlat0.xyz = u_xlat2.zxy * u_xlat0.ywx + (-u_xlat3.xyz);
    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.xyz * u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
    u_xlat30 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat1.xyz = vec3(u_xlat30) * u_xlat1.xyz;
    u_xlat30 = dot(u_xlat1.xyz, u_xlat0.xyz);
#ifdef UNITY_ADRENO_ES3
    { bool cond = 0.0<u_xlat30; u_xlati1 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati1 = int((0.0<u_xlat30) ? 0xFFFFFFFFu : uint(0u));
#endif
#ifdef UNITY_ADRENO_ES3
    { bool cond = u_xlat30<0.0; u_xlati30 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati30 = int((u_xlat30<0.0) ? 0xFFFFFFFFu : uint(0u));
#endif
    u_xlati30 = (-u_xlati1) + u_xlati30;
    u_xlat30 = float(u_xlati30);
    vs_TEXCOORD1.xyz = vec3(u_xlat30) * u_xlat0.xyz;
    vs_TEXCOORD1.w = 0.0;
    u_xlat0.x = u_xlat31 / _RootColorScale;
    u_xlat0.x = u_xlat0.x + _RootColorOffset;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xxx * vec3(-0.501960814, 0.0, 0.0) + vec3(0.501960814, 0.0, 0.0);
    u_xlat30 = u_xlat31 + -0.600000024;
    vs_TEXCOORD3 = u_xlat31;
    u_xlat30 = max(u_xlat30, 0.0);
    u_xlat30 = _GrassTipLighting * u_xlat30 + 1.0;
    vs_TEXCOORD2.xyz = vec3(u_xlat30) * u_xlat0.xyz;
    vs_TEXCOORD2.w = 0.0;
    vs_TEXCOORD4.xy = in_TEXCOORD2.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
    u_xlat0.x = u_xlat4.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat4.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.w = u_xlat4.w;
    vs_TEXCOORD5.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD5.z = 0.247058824;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
float ImmCB_0_0_0[64];
uniform 	vec4 _ScreenParams;
uniform 	float _GrassShininess;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	float _CutOff;
uniform 	vec4 _BurnedColor;
uniform lowp sampler2D _MainTex;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp float vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec3 u_xlat0;
int u_xlati0;
bool u_xlatb0;
lowp vec4 u_xlat10_1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat12;
bool u_xlatb12;
void main()
{
	ImmCB_0_0_0[0] = 1.0;
	ImmCB_0_0_0[1] = 49.0;
	ImmCB_0_0_0[2] = 13.0;
	ImmCB_0_0_0[3] = 61.0;
	ImmCB_0_0_0[4] = 4.0;
	ImmCB_0_0_0[5] = 52.0;
	ImmCB_0_0_0[6] = 16.0;
	ImmCB_0_0_0[7] = 64.0;
	ImmCB_0_0_0[8] = 33.0;
	ImmCB_0_0_0[9] = 17.0;
	ImmCB_0_0_0[10] = 45.0;
	ImmCB_0_0_0[11] = 29.0;
	ImmCB_0_0_0[12] = 36.0;
	ImmCB_0_0_0[13] = 20.0;
	ImmCB_0_0_0[14] = 48.0;
	ImmCB_0_0_0[15] = 32.0;
	ImmCB_0_0_0[16] = 9.0;
	ImmCB_0_0_0[17] = 57.0;
	ImmCB_0_0_0[18] = 5.0;
	ImmCB_0_0_0[19] = 53.0;
	ImmCB_0_0_0[20] = 12.0;
	ImmCB_0_0_0[21] = 60.0;
	ImmCB_0_0_0[22] = 8.0;
	ImmCB_0_0_0[23] = 56.0;
	ImmCB_0_0_0[24] = 41.0;
	ImmCB_0_0_0[25] = 25.0;
	ImmCB_0_0_0[26] = 37.0;
	ImmCB_0_0_0[27] = 21.0;
	ImmCB_0_0_0[28] = 44.0;
	ImmCB_0_0_0[29] = 28.0;
	ImmCB_0_0_0[30] = 40.0;
	ImmCB_0_0_0[31] = 24.0;
	ImmCB_0_0_0[32] = 3.0;
	ImmCB_0_0_0[33] = 51.0;
	ImmCB_0_0_0[34] = 15.0;
	ImmCB_0_0_0[35] = 63.0;
	ImmCB_0_0_0[36] = 2.0;
	ImmCB_0_0_0[37] = 50.0;
	ImmCB_0_0_0[38] = 14.0;
	ImmCB_0_0_0[39] = 62.0;
	ImmCB_0_0_0[40] = 35.0;
	ImmCB_0_0_0[41] = 19.0;
	ImmCB_0_0_0[42] = 47.0;
	ImmCB_0_0_0[43] = 31.0;
	ImmCB_0_0_0[44] = 34.0;
	ImmCB_0_0_0[45] = 18.0;
	ImmCB_0_0_0[46] = 46.0;
	ImmCB_0_0_0[47] = 30.0;
	ImmCB_0_0_0[48] = 11.0;
	ImmCB_0_0_0[49] = 59.0;
	ImmCB_0_0_0[50] = 7.0;
	ImmCB_0_0_0[51] = 55.0;
	ImmCB_0_0_0[52] = 10.0;
	ImmCB_0_0_0[53] = 58.0;
	ImmCB_0_0_0[54] = 6.0;
	ImmCB_0_0_0[55] = 54.0;
	ImmCB_0_0_0[56] = 43.0;
	ImmCB_0_0_0[57] = 27.0;
	ImmCB_0_0_0[58] = 39.0;
	ImmCB_0_0_0[59] = 23.0;
	ImmCB_0_0_0[60] = 42.0;
	ImmCB_0_0_0[61] = 26.0;
	ImmCB_0_0_0[62] = 38.0;
	ImmCB_0_0_0[63] = 22.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vs_TEXCOORD5.z<0.949999988);
#else
    u_xlatb0 = vs_TEXCOORD5.z<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD5.yx / vs_TEXCOORD5.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
        u_xlat0.xy = u_xlat0.xy * vec2(0.125, 0.125);
        u_xlat0.xy = fract(u_xlat0.xy);
        u_xlat0.xy = u_xlat0.xy * vec2(7.99900007, 7.99900007);
        u_xlat0.xy = trunc(u_xlat0.xy);
        u_xlat0.x = u_xlat0.x * 8.0 + u_xlat0.y;
        u_xlati0 = int(u_xlat0.x);
        u_xlat0.x = (-ImmCB_0_0_0[u_xlati0]) * 0.015625 + vs_TEXCOORD5.z;
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat0.x = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD0.xyz;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD4.xy);
    u_xlat2.xyz = _BurnedColor.xyz * u_xlat10_1.xyz + (-u_xlat10_1.xyz);
    u_xlat2.xyz = vs_TEXCOORD2.www * u_xlat2.xyz + u_xlat10_1.xyz;
    u_xlat12 = u_xlat10_1.w + (-_CutOff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat12<0.0);
#else
    u_xlatb12 = u_xlat12<0.0;
#endif
    if((int(u_xlatb12) * int(0xffffffffu))!=0){discard;}
    u_xlat12 = (-vs_TEXCOORD2.w) + 1.0;
    u_xlat12 = u_xlat12 * _GrassShininess;
    SV_Target0.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_3 = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb0) ? u_xlat16_3 : 0.0399999991;
    SV_Target0.w = 0.0;
    u_xlat2.w = vs_TEXCOORD3;
    SV_Target1 = u_xlat2;
    SV_Target2.xy = vec2(0.0399999991, 0.0399999991);
    SV_Target2.w = u_xlat12;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MHY_SHADER_HIGH" "DITHER_FADE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	int unity_BaseInstanceID;
uniform 	float _NoiseScale;
uniform 	vec4 _WorldOffsetRange;
uniform 	float _HeightScale;
uniform 	float _Billboard;
uniform 	float _VegetationMoveScale;
uniform 	float _VegetationStiffness;
uniform 	vec4 _LocalWindsMapSize;
uniform 	vec4 _LargeWindParam;
uniform 	vec4 _SmallWindParam;
uniform 	vec4 _GlobalWind;
uniform 	vec4 _LocalWindsMapCameraInfo;
uniform 	float _GrassTipLighting;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BurnedColor;
uniform 	float _RootColorScale;
uniform 	float _RootColorOffset;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _Heightmap;
uniform lowp sampler2D _Noisemap;
uniform lowp sampler2D _LocalWindsMap;
in highp vec4 in_POSITION0;
in highp vec4 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec2 in_TEXCOORD2;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp float vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
vec4 u_xlat0;
int u_xlati0;
uvec3 u_xlatu0;
vec3 u_xlat1;
uvec3 u_xlatu1;
vec4 u_xlat2;
uvec4 u_xlatu2;
vec3 u_xlat3;
vec4 u_xlat4;
vec3 u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
vec3 u_xlat8;
vec4 u_xlat9;
vec4 u_xlat10;
float u_xlat11;
int u_xlati11;
float u_xlat13;
uint u_xlatu13;
vec3 u_xlat17;
vec3 u_xlat18;
float u_xlat22;
int u_xlati22;
bool u_xlatb22;
float u_xlat24;
float u_xlat33;
bool u_xlatb33;
float u_xlat34;
bool u_xlatb34;
float u_xlat36;
void main()
{
    u_xlat0.z = 0.0;
    u_xlati11 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati11 = u_xlati11 << 2;
    u_xlat1.xyz = in_TEXCOORD0.yyy * unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_TEXCOORD0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat2.xy = u_xlat1.xz + (-_LocalWindsMapSize.xy);
    u_xlat2.xy = vec2(u_xlat2.x / _LocalWindsMapSize.z, u_xlat2.y / _LocalWindsMapSize.w);
    u_xlat2.xy = u_xlat2.xy + vec2(0.5, 0.5);
    u_xlat2 = textureLod(_LocalWindsMap, u_xlat2.xy, 0.0);
    u_xlat33 = dot(u_xlat2.xy, u_xlat2.xy);
    u_xlat33 = sqrt(u_xlat33);
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(9.99999975e-05>=u_xlat33);
#else
    u_xlatb33 = 9.99999975e-05>=u_xlat33;
#endif
    u_xlat33 = u_xlatb33 ? 1.0 : float(0.0);
    u_xlat3.xy = (-u_xlat2.xy) + vec2(0.5, 0.5);
    u_xlat2.xy = vec2(u_xlat33) * u_xlat3.xy + u_xlat2.xy;
    u_xlat2.xy = u_xlat2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat33 = dot(u_xlat2.xy, u_xlat2.xy);
    u_xlat33 = max(u_xlat33, 0.00100000005);
    u_xlat3.x = inversesqrt(u_xlat33);
    u_xlat3.yz = u_xlat2.xy * u_xlat3.xx;
    u_xlat0.x = u_xlat3.z;
    u_xlat0.xz = (-u_xlat3.xy) * vec2(0.0, 1.0) + u_xlat0.xz;
    u_xlat33 = (-in_TEXCOORD1.x) + unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].x;
    u_xlat34 = u_xlat33 * 3.0;
    u_xlat34 = _Time.y * 3.0 + u_xlat34;
    u_xlat34 = u_xlat34 + 0.5;
    u_xlat34 = fract(u_xlat34);
    u_xlat34 = u_xlat34 * 2.0 + -1.0;
    u_xlat3.x = abs(u_xlat34) * abs(u_xlat34);
    u_xlat34 = -abs(u_xlat34) * 2.0 + 3.0;
    u_xlat34 = u_xlat34 * u_xlat3.x;
    u_xlat3.x = u_xlat2.z * 1.5;
    u_xlat34 = u_xlat34 * u_xlat3.x;
    u_xlat0.xz = u_xlat0.xz * vec2(u_xlat34);
    u_xlat0.xz = u_xlat0.xz * vec2(0.150000006, 0.150000006);
    u_xlat0.xz = u_xlat3.yz * vec2(u_xlat34) + u_xlat0.xz;
    u_xlat0.xz = u_xlat0.xz + u_xlat2.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlatb34 = !!(0.00199999986<u_xlat2.z);
#else
    u_xlatb34 = 0.00199999986<u_xlat2.z;
#endif
    u_xlat24 = (-u_xlat2.w) * _LocalWindsMapCameraInfo.y + _LocalWindsMapCameraInfo.x;
    u_xlat0.xz = (bool(u_xlatb34)) ? u_xlat0.xz : u_xlat2.xy;
    u_xlat2.xy = vec2(_WorldOffsetRange.z + float(2.0), _WorldOffsetRange.w + float(2.0));
    u_xlat3.xy = u_xlat1.xz + (-_WorldOffsetRange.xy);
    u_xlat3.xy = u_xlat3.xy + vec2(1.0, 1.0);
    u_xlat2.xy = u_xlat3.xy / u_xlat2.xy;
    u_xlat34 = textureLod(_Heightmap, u_xlat2.xy, 0.0).x;
    u_xlat2.x = u_xlat34 * _HeightScale + u_xlat1.y;
    u_xlat2.x = (-u_xlat2.x) + u_xlat24;
    u_xlat2.x = u_xlat2.x * 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat2.x = (-u_xlat2.x) + 1.0;
    u_xlat13 = float(floatBitsToUint(unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2]).w);
    u_xlat13 = u_xlat13 * 5.96046448e-08;
    u_xlatu13 = uint(u_xlat13);
    u_xlatu13 = u_xlatu13 & 3u;
    u_xlat13 = float(u_xlatu13);
    u_xlat24 = fract(u_xlat33);
    u_xlat33 = u_xlat33 + unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].y;
    u_xlat3.xy = vec2(u_xlat33) * vec2(22.0, 33.0);
    u_xlat3.xy = fract(u_xlat3.xy);
    u_xlat3.xy = u_xlat3.xy + vec2(-0.5, -0.5);
    u_xlat3.xz = u_xlat3.xy * vec2(0.200000003, 0.200000003);
    u_xlat33 = u_xlat13 + u_xlat24;
    u_xlat13 = u_xlat24 * _SmallWindParam.x;
    u_xlat13 = sin(u_xlat13);
    u_xlat33 = u_xlat33 + -0.5;
    u_xlat24 = u_xlat33 * 0.333000004;
    u_xlat4.y = u_xlat33 * 0.333000004 + -1.0;
    u_xlat33 = in_TEXCOORD1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat33 = min(max(u_xlat33, 0.0), 1.0);
#else
    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
#endif
    u_xlat24 = u_xlat24 * u_xlat33;
    u_xlat2.x = u_xlat24 * u_xlat2.x;
    u_xlat0.xz = u_xlat0.xz * u_xlat2.xx;
    u_xlat5.xz = u_xlat0.xz * vec2(vec2(_VegetationMoveScale, _VegetationMoveScale));
    u_xlat6.y = 0.0;
    u_xlat0.x = _VegetationStiffness * _SmallWindParam.y;
    u_xlat0.x = u_xlat24 * u_xlat0.x;
    u_xlat7.x = u_xlat0.x * u_xlat13;
    u_xlat2.xyw = in_NORMAL0.yyy * unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat2.xyw = unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_NORMAL0.xxx + u_xlat2.xyw;
    u_xlat2.xyw = unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_NORMAL0.zzz + u_xlat2.xyw;
    u_xlat0.x = dot(u_xlat2.xyw, u_xlat2.xyw);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat2.xyw = u_xlat0.xxx * u_xlat2.xyw;
    u_xlat7.y = float(1.0);
    u_xlat7.z = float(0.349999994);
    u_xlat8.xyz = u_xlat2.xyw * u_xlat7.yxy;
    u_xlat0.x = dot(_GlobalWind.xyz, _GlobalWind.xyz);
    u_xlat0.x = max(u_xlat0.x, 0.00100000005);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat9 = u_xlat0.xxxx * _GlobalWind.xzxz;
    u_xlat0.xz = vec2(u_xlat9.z * _LargeWindParam.z, u_xlat9.w * _LargeWindParam.z);
    u_xlat18.xz = u_xlat1.xz / vec2(_NoiseScale);
    u_xlat18.xz = _LargeWindParam.xx * u_xlat9.xy + u_xlat18.xz;
    u_xlat18.xz = textureLod(_Noisemap, u_xlat18.xz, 0.0).xy;
    u_xlat18.xz = u_xlat18.xz + vec2(-0.5, -0.5);
    u_xlat18.xz = u_xlat18.xz * _LargeWindParam.yy + vec2(0.5, 0.5);
    u_xlat18.xz = vec2(u_xlat24) * u_xlat18.xz;
    u_xlat6.xz = u_xlat0.xz * u_xlat18.xz;
    u_xlat9.xyz = u_xlat8.xyz * u_xlat7.xzx + u_xlat6.xyz;
    u_xlat7.xyz = u_xlat7.xzx * u_xlat8.xyz;
    u_xlat5.y = 0.0;
    u_xlat8.xyz = u_xlat5.xyz + u_xlat9.xyz;
    u_xlat9.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat9.xyz = unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat9.xyz;
    u_xlat9.xyz = unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat9.xyz;
    u_xlat9.xyz = u_xlat9.xyz + unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat9.xyz = (-u_xlat1.xyz) + u_xlat9.xyz;
    u_xlat10.x = unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].x;
    u_xlat10.y = unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].x;
    u_xlat0.x = dot(u_xlat10.xy, u_xlat10.xy);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xz = u_xlat0.xx * u_xlat10.xy;
    u_xlat36 = u_xlat0.z * u_xlat9.z;
    u_xlat36 = u_xlat9.x * u_xlat0.x + (-u_xlat36);
    u_xlat0.x = dot(u_xlat9.zx, u_xlat0.xz);
    u_xlat10.y = hlslcc_mtx4x4unity_MatrixV[0].x;
    u_xlat10.x = hlslcc_mtx4x4unity_MatrixV[2].x;
    u_xlat22 = dot(u_xlat10.xy, u_xlat10.xy);
    u_xlat22 = inversesqrt(u_xlat22);
    u_xlat17.xz = vec2(u_xlat22) * u_xlat10.xy;
    u_xlat0.xz = u_xlat0.xx * u_xlat17.xz;
    u_xlat0.x = u_xlat36 * u_xlat17.z + (-u_xlat0.x);
    u_xlat0.z = u_xlat36 * u_xlat17.x + u_xlat0.z;
    u_xlat0.xz = u_xlat9.xz + u_xlat0.xz;
    u_xlat9.z = (-u_xlat0.z) * _Billboard + u_xlat9.z;
    u_xlat9.x = (-u_xlat0.x) * _Billboard + u_xlat9.x;
    u_xlat8.xyz = u_xlat9.xyz * vec3(0.100000001, 1.0, 0.100000001) + u_xlat8.xyz;
    u_xlat0.x = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat0.x = max(u_xlat0.x, 0.00100000005);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat8.xyz = u_xlat0.xxx * u_xlat8.xyz;
    u_xlat0.x = dot(u_xlat9.xyz, u_xlat9.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat10.xyz = u_xlat9.xyz * vec3(0.100000001, 1.0, 0.100000001);
    u_xlat8.xyz = u_xlat8.xyz * u_xlat0.xxx + (-u_xlat10.xyz);
    u_xlat10.xyz = u_xlat1.xyz + u_xlat9.xyz;
    u_xlat10.w = u_xlat34 * _HeightScale + u_xlat10.y;
    u_xlat1.xyz = u_xlat8.xyz + u_xlat10.xwz;
    u_xlatu0.xz = uvec2(65280u, 255u) & floatBitsToUint(unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1]).ww;
    u_xlat0.xz = vec2(u_xlatu0.xz);
    u_xlat0.x = u_xlat0.x * 0.00390625;
    u_xlatu0.x = uint(u_xlat0.x);
    u_xlat0.x = float(u_xlatu0.x);
    u_xlat8.xz = u_xlat0.xz + vec2(-127.0, -127.0);
    u_xlat0.xz = u_xlat8.xz * vec2(0.00787401572, 0.00787401572);
    u_xlat0.xz = u_xlat0.xz * u_xlat0.xz;
    u_xlat0.x = u_xlat0.z + u_xlat0.x;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(0.0<u_xlat0.x);
#else
    u_xlatb22 = 0.0<u_xlat0.x;
#endif
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat8.y = u_xlatb22 ? u_xlat0.x : float(0.0);
    u_xlat10.xyz = u_xlat8.xyz * u_xlat9.yyy;
    u_xlat10.xyz = vec3(u_xlat24) * u_xlat10.xyz;
    u_xlat0.x = max(u_xlat24, 9.99999972e-10);
    u_xlat1.xyz = u_xlat10.xyz * vec3(0.00393700786, 0.0, 0.00393700786) + u_xlat1.xyz;
    u_xlat4.xz = u_xlat4.yy * (-u_xlat4.yy);
    u_xlat1.xyz = u_xlat4.xyz * u_xlat9.xyz + u_xlat1.xyz;
    u_xlat4.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat9 = u_xlat4.yyyy * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat9 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat4.xxxx + u_xlat9;
    u_xlat4 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat4.zzzz + u_xlat9;
    u_xlat4 = u_xlat4 + hlslcc_mtx4x4unity_MatrixVPZero[3];
    gl_Position = u_xlat4;
    u_xlat3.y = 0.0;
    vs_TEXCOORD0.xyz = u_xlat8.xyz * vec3(0.00787401572, 1.0, 0.00787401572) + u_xlat3.xyz;
    vs_TEXCOORD0.w = 0.0;
    u_xlat3.xyz = u_xlat5.yzx / u_xlat0.xxx;
    u_xlat5.yz = u_xlat6.zx / u_xlat0.xx;
    u_xlat6.xyz = u_xlat7.yzx / u_xlat0.xxx;
    u_xlat5.x = 0.0;
    u_xlat5.xyz = u_xlat5.xyz + u_xlat6.xyz;
    u_xlat3.xyz = u_xlat3.xyz + u_xlat5.xyz;
    u_xlat3.xyz = u_xlat8.yzx * vec3(1.0, 0.00787401572, 0.00787401572) + u_xlat3.xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat5.xyz = u_xlat2.xyw * u_xlat3.xyz;
    u_xlat2.xyz = u_xlat3.zxy * u_xlat2.ywx + (-u_xlat5.xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat5.xyz = u_xlat3.xyz * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat5.xyz);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
    { bool cond = 0.0<u_xlat0.x; u_xlati22 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati22 = int((0.0<u_xlat0.x) ? 0xFFFFFFFFu : uint(0u));
#endif
#ifdef UNITY_ADRENO_ES3
    { bool cond = u_xlat0.x<0.0; u_xlati0 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati0 = int((u_xlat0.x<0.0) ? 0xFFFFFFFFu : uint(0u));
#endif
    u_xlati0 = (-u_xlati22) + u_xlati0;
    u_xlat0.x = float(u_xlati0);
    vs_TEXCOORD1.xyz = u_xlat0.xxx * u_xlat2.xyz;
    vs_TEXCOORD1.w = 0.0;
    u_xlatu1.xyz = uvec3(16711680u, 65280u, 255u) & floatBitsToUint(unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2]).www;
    u_xlat1.xyz = vec3(u_xlatu1.xyz);
    u_xlatu2 = uvec4(4278190080u, 16711680u, 65280u, 255u) & floatBitsToUint(unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3]).wwww;
    u_xlat0.x = max(1.0, unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].w);
    u_xlat0.x = min(u_xlat0.x, 2.0);
    u_xlat0.x = u_xlat0.x + -1.0;
    u_xlat2 = vec4(u_xlatu2);
    u_xlat2 = u_xlat2 * vec4(2.33743719e-10, 5.9838392e-08, 1.53186284e-05, 0.00392156886);
    u_xlat1.xyz = u_xlat1.xyz * vec3(5.9838392e-08, 1.53186284e-05, 0.00392156886) + (-u_xlat2.yzw);
    u_xlat11 = u_xlat33 / _RootColorScale;
    u_xlat11 = u_xlat11 + _RootColorOffset;
#ifdef UNITY_ADRENO_ES3
    u_xlat11 = min(max(u_xlat11, 0.0), 1.0);
#else
    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat11) * u_xlat1.xyz + u_xlat2.yzw;
    vs_TEXCOORD5.z = u_xlat2.x;
    u_xlat2.xyz = (-u_xlat1.xyz) + _BurnedColor.xyz;
    u_xlat1.xyz = u_xlat0.xxx * u_xlat2.xyz + u_xlat1.xyz;
    vs_TEXCOORD2.w = u_xlat0.x;
    u_xlat0.x = u_xlat33 + -0.600000024;
    vs_TEXCOORD3 = u_xlat33;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = _GrassTipLighting * u_xlat0.x + 1.0;
    vs_TEXCOORD2.xyz = u_xlat0.xxx * u_xlat1.xyz;
    vs_TEXCOORD4.xy = in_TEXCOORD2.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
    u_xlat0.x = u_xlat4.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat4.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.w = u_xlat4.w;
    vs_TEXCOORD5.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
float ImmCB_0_0_0[64];
uniform 	vec4 _ScreenParams;
uniform 	float _GrassShininess;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	float _CutOff;
uniform 	vec4 _BurnedColor;
uniform lowp sampler2D _MainTex;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp float vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec3 u_xlat0;
int u_xlati0;
bool u_xlatb0;
lowp vec4 u_xlat10_1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat12;
bool u_xlatb12;
void main()
{
	ImmCB_0_0_0[0] = 1.0;
	ImmCB_0_0_0[1] = 49.0;
	ImmCB_0_0_0[2] = 13.0;
	ImmCB_0_0_0[3] = 61.0;
	ImmCB_0_0_0[4] = 4.0;
	ImmCB_0_0_0[5] = 52.0;
	ImmCB_0_0_0[6] = 16.0;
	ImmCB_0_0_0[7] = 64.0;
	ImmCB_0_0_0[8] = 33.0;
	ImmCB_0_0_0[9] = 17.0;
	ImmCB_0_0_0[10] = 45.0;
	ImmCB_0_0_0[11] = 29.0;
	ImmCB_0_0_0[12] = 36.0;
	ImmCB_0_0_0[13] = 20.0;
	ImmCB_0_0_0[14] = 48.0;
	ImmCB_0_0_0[15] = 32.0;
	ImmCB_0_0_0[16] = 9.0;
	ImmCB_0_0_0[17] = 57.0;
	ImmCB_0_0_0[18] = 5.0;
	ImmCB_0_0_0[19] = 53.0;
	ImmCB_0_0_0[20] = 12.0;
	ImmCB_0_0_0[21] = 60.0;
	ImmCB_0_0_0[22] = 8.0;
	ImmCB_0_0_0[23] = 56.0;
	ImmCB_0_0_0[24] = 41.0;
	ImmCB_0_0_0[25] = 25.0;
	ImmCB_0_0_0[26] = 37.0;
	ImmCB_0_0_0[27] = 21.0;
	ImmCB_0_0_0[28] = 44.0;
	ImmCB_0_0_0[29] = 28.0;
	ImmCB_0_0_0[30] = 40.0;
	ImmCB_0_0_0[31] = 24.0;
	ImmCB_0_0_0[32] = 3.0;
	ImmCB_0_0_0[33] = 51.0;
	ImmCB_0_0_0[34] = 15.0;
	ImmCB_0_0_0[35] = 63.0;
	ImmCB_0_0_0[36] = 2.0;
	ImmCB_0_0_0[37] = 50.0;
	ImmCB_0_0_0[38] = 14.0;
	ImmCB_0_0_0[39] = 62.0;
	ImmCB_0_0_0[40] = 35.0;
	ImmCB_0_0_0[41] = 19.0;
	ImmCB_0_0_0[42] = 47.0;
	ImmCB_0_0_0[43] = 31.0;
	ImmCB_0_0_0[44] = 34.0;
	ImmCB_0_0_0[45] = 18.0;
	ImmCB_0_0_0[46] = 46.0;
	ImmCB_0_0_0[47] = 30.0;
	ImmCB_0_0_0[48] = 11.0;
	ImmCB_0_0_0[49] = 59.0;
	ImmCB_0_0_0[50] = 7.0;
	ImmCB_0_0_0[51] = 55.0;
	ImmCB_0_0_0[52] = 10.0;
	ImmCB_0_0_0[53] = 58.0;
	ImmCB_0_0_0[54] = 6.0;
	ImmCB_0_0_0[55] = 54.0;
	ImmCB_0_0_0[56] = 43.0;
	ImmCB_0_0_0[57] = 27.0;
	ImmCB_0_0_0[58] = 39.0;
	ImmCB_0_0_0[59] = 23.0;
	ImmCB_0_0_0[60] = 42.0;
	ImmCB_0_0_0[61] = 26.0;
	ImmCB_0_0_0[62] = 38.0;
	ImmCB_0_0_0[63] = 22.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vs_TEXCOORD5.z<0.949999988);
#else
    u_xlatb0 = vs_TEXCOORD5.z<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD5.yx / vs_TEXCOORD5.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
        u_xlat0.xy = u_xlat0.xy * vec2(0.125, 0.125);
        u_xlat0.xy = fract(u_xlat0.xy);
        u_xlat0.xy = u_xlat0.xy * vec2(7.99900007, 7.99900007);
        u_xlat0.xy = trunc(u_xlat0.xy);
        u_xlat0.x = u_xlat0.x * 8.0 + u_xlat0.y;
        u_xlati0 = int(u_xlat0.x);
        u_xlat0.x = (-ImmCB_0_0_0[u_xlati0]) * 0.015625 + vs_TEXCOORD5.z;
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat0.x = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD0.xyz;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD4.xy);
    u_xlat2.xyz = _BurnedColor.xyz * u_xlat10_1.xyz + (-u_xlat10_1.xyz);
    u_xlat2.xyz = vs_TEXCOORD2.www * u_xlat2.xyz + u_xlat10_1.xyz;
    u_xlat12 = u_xlat10_1.w + (-_CutOff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat12<0.0);
#else
    u_xlatb12 = u_xlat12<0.0;
#endif
    if((int(u_xlatb12) * int(0xffffffffu))!=0){discard;}
    u_xlat12 = (-vs_TEXCOORD2.w) + 1.0;
    u_xlat12 = u_xlat12 * _GrassShininess;
    SV_Target0.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_3 = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb0) ? u_xlat16_3 : 0.0399999991;
    SV_Target0.w = 0.0;
    u_xlat2.w = vs_TEXCOORD3;
    SV_Target1 = u_xlat2;
    SV_Target2.xy = vec2(0.0399999991, 0.0399999991);
    SV_Target2.w = u_xlat12;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "MHY_SHADER_HIGH" "SOFT_SAMPLE_HEIGHT_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	float _NoiseScale;
uniform 	vec4 _WorldOffsetRange;
uniform 	float _HeightScale;
uniform 	float _Billboard;
uniform 	float _VegetationMoveScale;
uniform 	float _VegetationStiffness;
uniform 	vec4 _LocalWindsMapSize;
uniform 	vec4 _LargeWindParam;
uniform 	vec4 _SmallWindParam;
uniform 	vec4 _GlobalWind;
uniform 	vec4 _LocalWindsMapCameraInfo;
uniform 	float _GrassTipLighting;
uniform 	vec4 _MainTex_ST;
uniform 	float _RootColorScale;
uniform 	float _RootColorOffset;
uniform highp sampler2D _Heightmap;
uniform lowp sampler2D _Noisemap;
uniform lowp sampler2D _LocalWindsMap;
in highp vec4 in_POSITION0;
in highp vec4 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec2 in_TEXCOORD2;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp float vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec3 u_xlat1;
int u_xlati1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
vec4 u_xlat4;
vec3 u_xlat5;
vec4 u_xlat6;
vec4 u_xlat7;
vec4 u_xlat8;
vec3 u_xlat9;
vec3 u_xlat10;
bool u_xlatb10;
vec2 u_xlat12;
vec3 u_xlat16;
vec2 u_xlat20;
vec2 u_xlat22;
float u_xlat30;
int u_xlati30;
float u_xlat31;
float u_xlat32;
float u_xlat33;
float u_xlat34;
void main()
{
    u_xlat0.z = 0.0;
    u_xlat1.xyz = in_TEXCOORD0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[2].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TEXCOORD0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat10.xz = u_xlat1.xz + (-_LocalWindsMapSize.xy);
    u_xlat10.xz = vec2(u_xlat10.x / _LocalWindsMapSize.z, u_xlat10.z / _LocalWindsMapSize.w);
    u_xlat10.xz = u_xlat10.xz + vec2(0.5, 0.5);
    u_xlat2 = textureLod(_LocalWindsMap, u_xlat10.xz, 0.0);
    u_xlat10.x = dot(u_xlat2.xy, u_xlat2.xy);
    u_xlat10.x = sqrt(u_xlat10.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(9.99999975e-05>=u_xlat10.x);
#else
    u_xlatb10 = 9.99999975e-05>=u_xlat10.x;
#endif
    u_xlat10.x = u_xlatb10 ? 1.0 : float(0.0);
    u_xlat3.xy = (-u_xlat2.xy) + vec2(0.5, 0.5);
    u_xlat10.xz = u_xlat10.xx * u_xlat3.xy + u_xlat2.xy;
    u_xlat10.xz = u_xlat10.xz * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat31 = dot(u_xlat10.xz, u_xlat10.xz);
    u_xlat31 = max(u_xlat31, 0.00100000005);
    u_xlat3.x = inversesqrt(u_xlat31);
    u_xlat3.yz = u_xlat10.xz * u_xlat3.xx;
    u_xlat0.x = u_xlat3.z;
    u_xlat0.xz = (-u_xlat3.xy) * vec2(0.0, 1.0) + u_xlat0.xz;
    u_xlat31 = (-in_TEXCOORD1.x) + hlslcc_mtx4x4unity_ObjectToWorld[1].x;
    u_xlat2.x = u_xlat31 * 3.0;
    u_xlat2.x = _Time.y * 3.0 + u_xlat2.x;
    u_xlat2.x = u_xlat2.x + 0.5;
    u_xlat2.x = fract(u_xlat2.x);
    u_xlat2.x = u_xlat2.x * 2.0 + -1.0;
    u_xlat12.x = abs(u_xlat2.x) * abs(u_xlat2.x);
    u_xlat2.x = -abs(u_xlat2.x) * 2.0 + 3.0;
    u_xlat2.x = u_xlat2.x * u_xlat12.x;
    u_xlat12.x = u_xlat2.z * 1.5;
    u_xlat2.x = u_xlat12.x * u_xlat2.x;
    u_xlat0.xz = u_xlat0.xz * u_xlat2.xx;
    u_xlat0.xz = u_xlat0.xz * vec2(0.150000006, 0.150000006);
    u_xlat0.xz = u_xlat3.yz * u_xlat2.xx + u_xlat0.xz;
    u_xlat0.xz = u_xlat0.xz + u_xlat10.xz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(0.00199999986<u_xlat2.z);
#else
    u_xlatb2 = 0.00199999986<u_xlat2.z;
#endif
    u_xlat12.x = (-u_xlat2.w) * _LocalWindsMapCameraInfo.y + _LocalWindsMapCameraInfo.x;
    u_xlat0.xy = (bool(u_xlatb2)) ? u_xlat0.xz : u_xlat10.xz;
    u_xlat20.xy = vec2(_WorldOffsetRange.z + float(2.0), _WorldOffsetRange.w + float(2.0));
    u_xlat2.xz = u_xlat1.xz + (-_WorldOffsetRange.xy);
    u_xlat2.xz = u_xlat2.xz + vec2(1.0, 1.0);
    u_xlat20.xy = u_xlat2.xz / u_xlat20.xy;
    u_xlat20.xy = u_xlat20.xy * _WorldOffsetRange.zw + vec2(-0.5, -0.5);
    u_xlat2.xz = floor(u_xlat20.xy);
    u_xlat20.xy = u_xlat20.xy + (-u_xlat2.xz);
    u_xlat3 = u_xlat2.xzxz + vec4(0.5, 1.5, 1.5, 1.5);
    u_xlat4 = u_xlat2.xzxz + vec4(1.5, 0.5, 0.5, 0.5);
    u_xlat4 = vec4(u_xlat4.x / _WorldOffsetRange.z, u_xlat4.y / _WorldOffsetRange.w, u_xlat4.z / _WorldOffsetRange.z, u_xlat4.w / _WorldOffsetRange.w);
    u_xlat3 = vec4(u_xlat3.x / _WorldOffsetRange.z, u_xlat3.y / _WorldOffsetRange.w, u_xlat3.z / _WorldOffsetRange.z, u_xlat3.w / _WorldOffsetRange.w);
    u_xlat2.x = textureLod(_Heightmap, u_xlat3.zw, 0.0).x;
    u_xlat22.x = textureLod(_Heightmap, u_xlat3.xy, 0.0).x;
    u_xlat2.x = (-u_xlat22.x) + u_xlat2.x;
    u_xlat2.x = u_xlat20.x * u_xlat2.x + u_xlat22.x;
    u_xlat22.x = textureLod(_Heightmap, u_xlat4.xy, 0.0).x;
    u_xlat32 = textureLod(_Heightmap, u_xlat4.zw, 0.0).x;
    u_xlat22.x = (-u_xlat32) + u_xlat22.x;
    u_xlat20.x = u_xlat20.x * u_xlat22.x + u_xlat32;
    u_xlat2.x = (-u_xlat20.x) + u_xlat2.x;
    u_xlat20.x = u_xlat20.y * u_xlat2.x + u_xlat20.x;
    u_xlat30 = u_xlat20.x * _HeightScale + u_xlat1.y;
    u_xlat30 = (-u_xlat30) + u_xlat12.x;
    u_xlat30 = u_xlat30 * 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
#else
    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
#endif
    u_xlat30 = (-u_xlat30) + 1.0;
    u_xlat2.x = fract(u_xlat31);
    u_xlat31 = u_xlat31 + hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat12.xy = vec2(u_xlat31) * vec2(22.0, 33.0);
    u_xlat12.xy = fract(u_xlat12.xy);
    u_xlat12.xy = u_xlat12.xy + vec2(-0.5, -0.5);
    u_xlat3.xz = u_xlat12.xy * vec2(0.200000003, 0.200000003);
    u_xlat31 = u_xlat2.x + -0.5;
    u_xlat2.x = u_xlat2.x * _SmallWindParam.x;
    u_xlat2.x = sin(u_xlat2.x);
    u_xlat12.x = u_xlat31 * 0.333000004;
    u_xlat4.y = u_xlat31 * 0.333000004 + -1.0;
    u_xlat31 = in_TEXCOORD1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat31 = min(max(u_xlat31, 0.0), 1.0);
#else
    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat12.x * u_xlat31;
    u_xlat30 = u_xlat30 * u_xlat12.x;
    u_xlat0.xy = vec2(u_xlat30) * u_xlat0.xy;
    u_xlat5.xz = u_xlat0.xy * vec2(vec2(_VegetationMoveScale, _VegetationMoveScale));
    u_xlat0.x = dot(_GlobalWind.xyz, _GlobalWind.xyz);
    u_xlat0.x = max(u_xlat0.x, 0.00100000005);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat6 = u_xlat0.xxxx * _GlobalWind.xzxz;
    u_xlat0.xy = vec2(u_xlat6.z * _LargeWindParam.z, u_xlat6.w * _LargeWindParam.z);
    u_xlat22.xy = u_xlat1.xz / vec2(_NoiseScale);
    u_xlat22.xy = _LargeWindParam.xx * u_xlat6.xy + u_xlat22.xy;
    u_xlat22.xy = textureLod(_Noisemap, u_xlat22.xy, 0.0).xy;
    u_xlat22.xy = u_xlat22.xy + vec2(-0.5, -0.5);
    u_xlat22.xy = u_xlat22.xy * _LargeWindParam.yy + vec2(0.5, 0.5);
    u_xlat22.xy = u_xlat12.xx * u_xlat22.xy;
    u_xlat6.xz = u_xlat0.xy * u_xlat22.xy;
    u_xlat6.y = 0.0;
    u_xlat0.x = _VegetationStiffness * _SmallWindParam.y;
    u_xlat0.x = u_xlat12.x * u_xlat0.x;
    u_xlat7.x = u_xlat0.x * u_xlat2.x;
    u_xlat0.xyw = in_NORMAL0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyw = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_NORMAL0.xxx + u_xlat0.xyw;
    u_xlat0.xyw = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_NORMAL0.zzz + u_xlat0.xyw;
    u_xlat2.x = dot(u_xlat0.xyw, u_xlat0.xyw);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat0.xyw = u_xlat0.xyw * u_xlat2.xxx;
    u_xlat7.y = float(1.0);
    u_xlat7.z = float(0.349999994);
    u_xlat2.xzw = u_xlat0.xyw * u_xlat7.yxy;
    u_xlat8.xyz = u_xlat2.xzw * u_xlat7.xzx + u_xlat6.xyz;
    u_xlat2.xzw = u_xlat7.xzx * u_xlat2.xzw;
    u_xlat5.y = 0.0;
    u_xlat7.xyz = u_xlat5.xyz + u_xlat8.xyz;
    u_xlat8.y = hlslcc_mtx4x4unity_MatrixV[0].x;
    u_xlat8.x = hlslcc_mtx4x4unity_MatrixV[2].x;
    u_xlat33 = dot(u_xlat8.xy, u_xlat8.xy);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat16.xz = vec2(u_xlat33) * u_xlat8.xy;
    u_xlat8.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;
    u_xlat8.y = hlslcc_mtx4x4unity_ObjectToWorld[2].x;
    u_xlat33 = dot(u_xlat8.xy, u_xlat8.xy);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat8.xy = vec2(u_xlat33) * u_xlat8.xy;
    u_xlat9.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat9.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat9.xyz;
    u_xlat9.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat9.xyz;
    u_xlat9.xyz = u_xlat9.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat9.xyz = (-u_xlat1.xyz) + u_xlat9.xyz;
    u_xlat33 = u_xlat8.y * u_xlat9.z;
    u_xlat33 = u_xlat9.x * u_xlat8.x + (-u_xlat33);
    u_xlat34 = dot(u_xlat9.zx, u_xlat8.xy);
    u_xlat8.xy = u_xlat16.xz * vec2(u_xlat34);
    u_xlat34 = u_xlat33 * u_xlat16.z + (-u_xlat8.x);
    u_xlat33 = u_xlat33 * u_xlat16.x + u_xlat8.y;
    u_xlat33 = u_xlat9.z + u_xlat33;
    u_xlat9.z = (-u_xlat33) * _Billboard + u_xlat9.z;
    u_xlat33 = u_xlat9.x + u_xlat34;
    u_xlat9.x = (-u_xlat33) * _Billboard + u_xlat9.x;
    u_xlat33 = u_xlat12.x * u_xlat9.y;
    u_xlat12.x = max(u_xlat12.x, 9.99999972e-10);
    u_xlat7.xyz = u_xlat9.xyz * vec3(0.100000001, 1.0, 0.100000001) + u_xlat7.xyz;
    u_xlat34 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat34 = max(u_xlat34, 0.00100000005);
    u_xlat34 = inversesqrt(u_xlat34);
    u_xlat7.xyz = vec3(u_xlat34) * u_xlat7.xyz;
    u_xlat34 = dot(u_xlat9.xyz, u_xlat9.xyz);
    u_xlat34 = sqrt(u_xlat34);
    u_xlat8.xyz = u_xlat9.xyz * vec3(0.100000001, 1.0, 0.100000001);
    u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat34) + (-u_xlat8.xyz);
    u_xlat8.xyz = u_xlat1.xyz + u_xlat9.xyz;
    u_xlat8.w = u_xlat20.x * _HeightScale + u_xlat8.y;
    u_xlat1.xyz = u_xlat7.xyz + u_xlat8.xwz;
    u_xlat1.xyz = vec3(u_xlat33) * vec3(-0.5, 0.0, -0.5) + u_xlat1.xyz;
    u_xlat4.xz = u_xlat4.yy * (-u_xlat4.yy);
    u_xlat1.xyz = u_xlat4.xyz * u_xlat9.xyz + u_xlat1.xyz;
    u_xlat4.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat7 = u_xlat4.yyyy * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat7 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat4.xxxx + u_xlat7;
    u_xlat4 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat4.zzzz + u_xlat7;
    gl_Position = u_xlat4 + hlslcc_mtx4x4unity_MatrixVPZero[3];
    u_xlat3.y = 0.0;
    vs_TEXCOORD0.xyz = u_xlat3.xyz + vec3(-1.0, 0.0, -1.0);
    vs_TEXCOORD0.w = 0.0;
    u_xlat3.xyz = u_xlat5.yzx / u_xlat12.xxx;
    u_xlat4.yz = u_xlat6.zx / u_xlat12.xx;
    u_xlat2.xyz = u_xlat2.zwx / u_xlat12.xxx;
    u_xlat4.x = 0.0;
    u_xlat2.xyz = u_xlat2.xyz + u_xlat4.xyz;
    u_xlat2.xyz = u_xlat3.xyz + u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz + vec3(0.0, -1.0, -1.0);
    u_xlat20.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat20.x = inversesqrt(u_xlat20.x);
    u_xlat2.xyz = u_xlat20.xxx * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat0.xyw * u_xlat2.xyz;
    u_xlat0.xyz = u_xlat2.zxy * u_xlat0.ywx + (-u_xlat3.xyz);
    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.xyz * u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
    u_xlat30 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat1.xyz = vec3(u_xlat30) * u_xlat1.xyz;
    u_xlat30 = dot(u_xlat1.xyz, u_xlat0.xyz);
#ifdef UNITY_ADRENO_ES3
    { bool cond = 0.0<u_xlat30; u_xlati1 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati1 = int((0.0<u_xlat30) ? 0xFFFFFFFFu : uint(0u));
#endif
#ifdef UNITY_ADRENO_ES3
    { bool cond = u_xlat30<0.0; u_xlati30 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati30 = int((u_xlat30<0.0) ? 0xFFFFFFFFu : uint(0u));
#endif
    u_xlati30 = (-u_xlati1) + u_xlati30;
    u_xlat30 = float(u_xlati30);
    vs_TEXCOORD1.xyz = vec3(u_xlat30) * u_xlat0.xyz;
    vs_TEXCOORD1.w = 0.0;
    u_xlat0.x = u_xlat31 / _RootColorScale;
    u_xlat0.x = u_xlat0.x + _RootColorOffset;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xxx * vec3(-0.501960814, 0.0, 0.0) + vec3(0.501960814, 0.0, 0.0);
    u_xlat30 = u_xlat31 + -0.600000024;
    vs_TEXCOORD3 = u_xlat31;
    u_xlat30 = max(u_xlat30, 0.0);
    u_xlat30 = _GrassTipLighting * u_xlat30 + 1.0;
    vs_TEXCOORD2.xyz = vec3(u_xlat30) * u_xlat0.xyz;
    vs_TEXCOORD2.w = 0.0;
    vs_TEXCOORD4.xy = in_TEXCOORD2.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	float _GrassShininess;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	float _CutOff;
uniform 	vec4 _BurnedColor;
uniform lowp sampler2D _MainTex;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp float vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec4 u_xlat0;
lowp vec4 u_xlat10_0;
bool u_xlatb0;
vec3 u_xlat1;
mediump float u_xlat16_2;
float u_xlat9;
bool u_xlatb9;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD4.xy);
    u_xlat9 = u_xlat10_0.w + (-_CutOff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(u_xlat9<0.0);
#else
    u_xlatb9 = u_xlat9<0.0;
#endif
    if((int(u_xlatb9) * int(0xffffffffu))!=0){discard;}
    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
    SV_Target0.xyz = u_xlat1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0;
    u_xlat1.xyz = _BurnedColor.xyz * u_xlat10_0.xyz + (-u_xlat10_0.xyz);
    u_xlat0.xyz = vs_TEXCOORD2.www * u_xlat1.xyz + u_xlat10_0.xyz;
    u_xlat0.w = vs_TEXCOORD3;
    SV_Target1 = u_xlat0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_2 = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb0) ? u_xlat16_2 : 0.0399999991;
    u_xlat0.x = (-vs_TEXCOORD2.w) + 1.0;
    u_xlat0.x = u_xlat0.x * _GrassShininess;
    SV_Target2.w = u_xlat0.x;
    SV_Target2.xy = vec2(0.0399999991, 0.0399999991);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MHY_SHADER_HIGH" "SOFT_SAMPLE_HEIGHT_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	int unity_BaseInstanceID;
uniform 	float _NoiseScale;
uniform 	vec4 _WorldOffsetRange;
uniform 	float _HeightScale;
uniform 	float _Billboard;
uniform 	float _VegetationMoveScale;
uniform 	float _VegetationStiffness;
uniform 	vec4 _LocalWindsMapSize;
uniform 	vec4 _LargeWindParam;
uniform 	vec4 _SmallWindParam;
uniform 	vec4 _GlobalWind;
uniform 	vec4 _LocalWindsMapCameraInfo;
uniform 	float _GrassTipLighting;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BurnedColor;
uniform 	float _RootColorScale;
uniform 	float _RootColorOffset;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _Heightmap;
uniform lowp sampler2D _Noisemap;
uniform lowp sampler2D _LocalWindsMap;
in highp vec4 in_POSITION0;
in highp vec4 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec2 in_TEXCOORD2;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp float vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec3 u_xlat0;
int u_xlati0;
uvec3 u_xlatu0;
vec3 u_xlat1;
uvec3 u_xlatu1;
vec4 u_xlat2;
uvec3 u_xlatu2;
vec4 u_xlat3;
vec4 u_xlat4;
vec3 u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
vec3 u_xlat8;
vec4 u_xlat9;
vec4 u_xlat10;
float u_xlat11;
int u_xlati11;
float u_xlat13;
uint u_xlatu13;
vec3 u_xlat17;
vec3 u_xlat18;
float u_xlat22;
int u_xlati22;
bool u_xlatb22;
float u_xlat24;
float u_xlat33;
bool u_xlatb33;
float u_xlat34;
bool u_xlatb34;
float u_xlat35;
float u_xlat36;
void main()
{
    u_xlat0.z = 0.0;
    u_xlati11 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati11 = u_xlati11 << 2;
    u_xlat1.xyz = in_TEXCOORD0.yyy * unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_TEXCOORD0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat2.xy = u_xlat1.xz + (-_LocalWindsMapSize.xy);
    u_xlat2.xy = vec2(u_xlat2.x / _LocalWindsMapSize.z, u_xlat2.y / _LocalWindsMapSize.w);
    u_xlat2.xy = u_xlat2.xy + vec2(0.5, 0.5);
    u_xlat2 = textureLod(_LocalWindsMap, u_xlat2.xy, 0.0);
    u_xlat33 = dot(u_xlat2.xy, u_xlat2.xy);
    u_xlat33 = sqrt(u_xlat33);
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(9.99999975e-05>=u_xlat33);
#else
    u_xlatb33 = 9.99999975e-05>=u_xlat33;
#endif
    u_xlat33 = u_xlatb33 ? 1.0 : float(0.0);
    u_xlat3.xy = (-u_xlat2.xy) + vec2(0.5, 0.5);
    u_xlat2.xy = vec2(u_xlat33) * u_xlat3.xy + u_xlat2.xy;
    u_xlat2.xy = u_xlat2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat33 = dot(u_xlat2.xy, u_xlat2.xy);
    u_xlat33 = max(u_xlat33, 0.00100000005);
    u_xlat3.x = inversesqrt(u_xlat33);
    u_xlat3.yz = u_xlat2.xy * u_xlat3.xx;
    u_xlat0.x = u_xlat3.z;
    u_xlat0.xz = (-u_xlat3.xy) * vec2(0.0, 1.0) + u_xlat0.xz;
    u_xlat33 = (-in_TEXCOORD1.x) + unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].x;
    u_xlat34 = u_xlat33 * 3.0;
    u_xlat34 = _Time.y * 3.0 + u_xlat34;
    u_xlat34 = u_xlat34 + 0.5;
    u_xlat34 = fract(u_xlat34);
    u_xlat34 = u_xlat34 * 2.0 + -1.0;
    u_xlat3.x = abs(u_xlat34) * abs(u_xlat34);
    u_xlat34 = -abs(u_xlat34) * 2.0 + 3.0;
    u_xlat34 = u_xlat34 * u_xlat3.x;
    u_xlat3.x = u_xlat2.z * 1.5;
    u_xlat34 = u_xlat34 * u_xlat3.x;
    u_xlat0.xz = u_xlat0.xz * vec2(u_xlat34);
    u_xlat0.xz = u_xlat0.xz * vec2(0.150000006, 0.150000006);
    u_xlat0.xz = u_xlat3.yz * vec2(u_xlat34) + u_xlat0.xz;
    u_xlat0.xz = u_xlat0.xz + u_xlat2.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlatb34 = !!(0.00199999986<u_xlat2.z);
#else
    u_xlatb34 = 0.00199999986<u_xlat2.z;
#endif
    u_xlat24 = (-u_xlat2.w) * _LocalWindsMapCameraInfo.y + _LocalWindsMapCameraInfo.x;
    u_xlat0.xz = (bool(u_xlatb34)) ? u_xlat0.xz : u_xlat2.xy;
    u_xlat2.xy = vec2(_WorldOffsetRange.z + float(2.0), _WorldOffsetRange.w + float(2.0));
    u_xlat3.xy = u_xlat1.xz + (-_WorldOffsetRange.xy);
    u_xlat3.xy = u_xlat3.xy + vec2(1.0, 1.0);
    u_xlat2.xy = u_xlat3.xy / u_xlat2.xy;
    u_xlat2.xy = u_xlat2.xy * _WorldOffsetRange.zw + vec2(-0.5, -0.5);
    u_xlat3.xy = floor(u_xlat2.xy);
    u_xlat2.xy = u_xlat2.xy + (-u_xlat3.xy);
    u_xlat4 = u_xlat3.xyxy + vec4(0.5, 1.5, 1.5, 1.5);
    u_xlat3 = u_xlat3.xyxy + vec4(1.5, 0.5, 0.5, 0.5);
    u_xlat3 = vec4(u_xlat3.x / _WorldOffsetRange.z, u_xlat3.y / _WorldOffsetRange.w, u_xlat3.z / _WorldOffsetRange.z, u_xlat3.w / _WorldOffsetRange.w);
    u_xlat4 = vec4(u_xlat4.x / _WorldOffsetRange.z, u_xlat4.y / _WorldOffsetRange.w, u_xlat4.z / _WorldOffsetRange.z, u_xlat4.w / _WorldOffsetRange.w);
    u_xlat34 = textureLod(_Heightmap, u_xlat4.zw, 0.0).x;
    u_xlat35 = textureLod(_Heightmap, u_xlat4.xy, 0.0).x;
    u_xlat34 = u_xlat34 + (-u_xlat35);
    u_xlat34 = u_xlat2.x * u_xlat34 + u_xlat35;
    u_xlat35 = textureLod(_Heightmap, u_xlat3.xy, 0.0).x;
    u_xlat3.x = textureLod(_Heightmap, u_xlat3.zw, 0.0).x;
    u_xlat35 = u_xlat35 + (-u_xlat3.x);
    u_xlat2.x = u_xlat2.x * u_xlat35 + u_xlat3.x;
    u_xlat34 = u_xlat34 + (-u_xlat2.x);
    u_xlat34 = u_xlat2.y * u_xlat34 + u_xlat2.x;
    u_xlat2.x = u_xlat34 * _HeightScale + u_xlat1.y;
    u_xlat2.x = (-u_xlat2.x) + u_xlat24;
    u_xlat2.x = u_xlat2.x * 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat2.x = (-u_xlat2.x) + 1.0;
    u_xlat13 = float(floatBitsToUint(unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2]).w);
    u_xlat13 = u_xlat13 * 5.96046448e-08;
    u_xlatu13 = uint(u_xlat13);
    u_xlatu13 = u_xlatu13 & 3u;
    u_xlat13 = float(u_xlatu13);
    u_xlat24 = fract(u_xlat33);
    u_xlat33 = u_xlat33 + unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].y;
    u_xlat3.xy = vec2(u_xlat33) * vec2(22.0, 33.0);
    u_xlat3.xy = fract(u_xlat3.xy);
    u_xlat3.xy = u_xlat3.xy + vec2(-0.5, -0.5);
    u_xlat3.xz = u_xlat3.xy * vec2(0.200000003, 0.200000003);
    u_xlat33 = u_xlat13 + u_xlat24;
    u_xlat13 = u_xlat24 * _SmallWindParam.x;
    u_xlat13 = sin(u_xlat13);
    u_xlat33 = u_xlat33 + -0.5;
    u_xlat24 = u_xlat33 * 0.333000004;
    u_xlat4.y = u_xlat33 * 0.333000004 + -1.0;
    u_xlat33 = in_TEXCOORD1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat33 = min(max(u_xlat33, 0.0), 1.0);
#else
    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
#endif
    u_xlat24 = u_xlat24 * u_xlat33;
    u_xlat2.x = u_xlat24 * u_xlat2.x;
    u_xlat0.xz = u_xlat0.xz * u_xlat2.xx;
    u_xlat5.xz = u_xlat0.xz * vec2(vec2(_VegetationMoveScale, _VegetationMoveScale));
    u_xlat6.y = 0.0;
    u_xlat0.x = _VegetationStiffness * _SmallWindParam.y;
    u_xlat0.x = u_xlat24 * u_xlat0.x;
    u_xlat7.x = u_xlat0.x * u_xlat13;
    u_xlat2.xyw = in_NORMAL0.yyy * unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat2.xyw = unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_NORMAL0.xxx + u_xlat2.xyw;
    u_xlat2.xyw = unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_NORMAL0.zzz + u_xlat2.xyw;
    u_xlat0.x = dot(u_xlat2.xyw, u_xlat2.xyw);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat2.xyw = u_xlat0.xxx * u_xlat2.xyw;
    u_xlat7.y = float(1.0);
    u_xlat7.z = float(0.349999994);
    u_xlat8.xyz = u_xlat2.xyw * u_xlat7.yxy;
    u_xlat0.x = dot(_GlobalWind.xyz, _GlobalWind.xyz);
    u_xlat0.x = max(u_xlat0.x, 0.00100000005);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat9 = u_xlat0.xxxx * _GlobalWind.xzxz;
    u_xlat0.xz = vec2(u_xlat9.z * _LargeWindParam.z, u_xlat9.w * _LargeWindParam.z);
    u_xlat18.xz = u_xlat1.xz / vec2(_NoiseScale);
    u_xlat18.xz = _LargeWindParam.xx * u_xlat9.xy + u_xlat18.xz;
    u_xlat18.xz = textureLod(_Noisemap, u_xlat18.xz, 0.0).xy;
    u_xlat18.xz = u_xlat18.xz + vec2(-0.5, -0.5);
    u_xlat18.xz = u_xlat18.xz * _LargeWindParam.yy + vec2(0.5, 0.5);
    u_xlat18.xz = vec2(u_xlat24) * u_xlat18.xz;
    u_xlat6.xz = u_xlat0.xz * u_xlat18.xz;
    u_xlat9.xyz = u_xlat8.xyz * u_xlat7.xzx + u_xlat6.xyz;
    u_xlat7.xyz = u_xlat7.xzx * u_xlat8.xyz;
    u_xlat5.y = 0.0;
    u_xlat8.xyz = u_xlat5.xyz + u_xlat9.xyz;
    u_xlat9.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat9.xyz = unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat9.xyz;
    u_xlat9.xyz = unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat9.xyz;
    u_xlat9.xyz = u_xlat9.xyz + unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat9.xyz = (-u_xlat1.xyz) + u_xlat9.xyz;
    u_xlat10.x = unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].x;
    u_xlat10.y = unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].x;
    u_xlat0.x = dot(u_xlat10.xy, u_xlat10.xy);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xz = u_xlat0.xx * u_xlat10.xy;
    u_xlat36 = u_xlat0.z * u_xlat9.z;
    u_xlat36 = u_xlat9.x * u_xlat0.x + (-u_xlat36);
    u_xlat0.x = dot(u_xlat9.zx, u_xlat0.xz);
    u_xlat10.y = hlslcc_mtx4x4unity_MatrixV[0].x;
    u_xlat10.x = hlslcc_mtx4x4unity_MatrixV[2].x;
    u_xlat22 = dot(u_xlat10.xy, u_xlat10.xy);
    u_xlat22 = inversesqrt(u_xlat22);
    u_xlat17.xz = vec2(u_xlat22) * u_xlat10.xy;
    u_xlat0.xz = u_xlat0.xx * u_xlat17.xz;
    u_xlat0.x = u_xlat36 * u_xlat17.z + (-u_xlat0.x);
    u_xlat0.z = u_xlat36 * u_xlat17.x + u_xlat0.z;
    u_xlat0.xz = u_xlat9.xz + u_xlat0.xz;
    u_xlat9.z = (-u_xlat0.z) * _Billboard + u_xlat9.z;
    u_xlat9.x = (-u_xlat0.x) * _Billboard + u_xlat9.x;
    u_xlat8.xyz = u_xlat9.xyz * vec3(0.100000001, 1.0, 0.100000001) + u_xlat8.xyz;
    u_xlat0.x = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat0.x = max(u_xlat0.x, 0.00100000005);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat8.xyz = u_xlat0.xxx * u_xlat8.xyz;
    u_xlat0.x = dot(u_xlat9.xyz, u_xlat9.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat10.xyz = u_xlat9.xyz * vec3(0.100000001, 1.0, 0.100000001);
    u_xlat8.xyz = u_xlat8.xyz * u_xlat0.xxx + (-u_xlat10.xyz);
    u_xlat10.xyz = u_xlat1.xyz + u_xlat9.xyz;
    u_xlat10.w = u_xlat34 * _HeightScale + u_xlat10.y;
    u_xlat1.xyz = u_xlat8.xyz + u_xlat10.xwz;
    u_xlatu0.xz = uvec2(65280u, 255u) & floatBitsToUint(unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1]).ww;
    u_xlat0.xz = vec2(u_xlatu0.xz);
    u_xlat0.x = u_xlat0.x * 0.00390625;
    u_xlatu0.x = uint(u_xlat0.x);
    u_xlat0.x = float(u_xlatu0.x);
    u_xlat8.xz = u_xlat0.xz + vec2(-127.0, -127.0);
    u_xlat0.xz = u_xlat8.xz * vec2(0.00787401572, 0.00787401572);
    u_xlat0.xz = u_xlat0.xz * u_xlat0.xz;
    u_xlat0.x = u_xlat0.z + u_xlat0.x;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(0.0<u_xlat0.x);
#else
    u_xlatb22 = 0.0<u_xlat0.x;
#endif
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat8.y = u_xlatb22 ? u_xlat0.x : float(0.0);
    u_xlat10.xyz = u_xlat8.xyz * u_xlat9.yyy;
    u_xlat10.xyz = vec3(u_xlat24) * u_xlat10.xyz;
    u_xlat0.x = max(u_xlat24, 9.99999972e-10);
    u_xlat1.xyz = u_xlat10.xyz * vec3(0.00393700786, 0.0, 0.00393700786) + u_xlat1.xyz;
    u_xlat4.xz = u_xlat4.yy * (-u_xlat4.yy);
    u_xlat1.xyz = u_xlat4.xyz * u_xlat9.xyz + u_xlat1.xyz;
    u_xlat4.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat9 = u_xlat4.yyyy * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat9 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat4.xxxx + u_xlat9;
    u_xlat4 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat4.zzzz + u_xlat9;
    gl_Position = u_xlat4 + hlslcc_mtx4x4unity_MatrixVPZero[3];
    u_xlat3.y = 0.0;
    vs_TEXCOORD0.xyz = u_xlat8.xyz * vec3(0.00787401572, 1.0, 0.00787401572) + u_xlat3.xyz;
    vs_TEXCOORD0.w = 0.0;
    u_xlat3.xyz = u_xlat5.yzx / u_xlat0.xxx;
    u_xlat4.yz = u_xlat6.zx / u_xlat0.xx;
    u_xlat5.xyz = u_xlat7.yzx / u_xlat0.xxx;
    u_xlat4.x = 0.0;
    u_xlat4.xyz = u_xlat4.xyz + u_xlat5.xyz;
    u_xlat3.xyz = u_xlat3.xyz + u_xlat4.xyz;
    u_xlat3.xyz = u_xlat8.yzx * vec3(1.0, 0.00787401572, 0.00787401572) + u_xlat3.xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.xyw * u_xlat3.xyz;
    u_xlat2.xyz = u_xlat3.zxy * u_xlat2.ywx + (-u_xlat4.xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat4.xyz = u_xlat3.xyz * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
    { bool cond = 0.0<u_xlat0.x; u_xlati22 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati22 = int((0.0<u_xlat0.x) ? 0xFFFFFFFFu : uint(0u));
#endif
#ifdef UNITY_ADRENO_ES3
    { bool cond = u_xlat0.x<0.0; u_xlati0 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati0 = int((u_xlat0.x<0.0) ? 0xFFFFFFFFu : uint(0u));
#endif
    u_xlati0 = (-u_xlati22) + u_xlati0;
    u_xlat0.x = float(u_xlati0);
    vs_TEXCOORD1.xyz = u_xlat0.xxx * u_xlat2.xyz;
    vs_TEXCOORD1.w = 0.0;
    u_xlatu1.xyz = uvec3(16711680u, 65280u, 255u) & floatBitsToUint(unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2]).www;
    u_xlat1.xyz = vec3(u_xlatu1.xyz);
    u_xlatu2.xyz = uvec3(16711680u, 65280u, 255u) & floatBitsToUint(unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3]).www;
    u_xlat0.x = max(1.0, unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].w);
    u_xlat0.x = min(u_xlat0.x, 2.0);
    u_xlat0.x = u_xlat0.x + -1.0;
    u_xlat2.xyz = vec3(u_xlatu2.xyz);
    u_xlat2.xyz = u_xlat2.xyz * vec3(5.9838392e-08, 1.53186284e-05, 0.00392156886);
    u_xlat1.xyz = u_xlat1.xyz * vec3(5.9838392e-08, 1.53186284e-05, 0.00392156886) + (-u_xlat2.xyz);
    u_xlat11 = u_xlat33 / _RootColorScale;
    u_xlat11 = u_xlat11 + _RootColorOffset;
#ifdef UNITY_ADRENO_ES3
    u_xlat11 = min(max(u_xlat11, 0.0), 1.0);
#else
    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat11) * u_xlat1.xyz + u_xlat2.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _BurnedColor.xyz;
    u_xlat1.xyz = u_xlat0.xxx * u_xlat2.xyz + u_xlat1.xyz;
    vs_TEXCOORD2.w = u_xlat0.x;
    u_xlat0.x = u_xlat33 + -0.600000024;
    vs_TEXCOORD3 = u_xlat33;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = _GrassTipLighting * u_xlat0.x + 1.0;
    vs_TEXCOORD2.xyz = u_xlat0.xxx * u_xlat1.xyz;
    vs_TEXCOORD4.xy = in_TEXCOORD2.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	float _GrassShininess;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	float _CutOff;
uniform 	vec4 _BurnedColor;
uniform lowp sampler2D _MainTex;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp float vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec4 u_xlat0;
lowp vec4 u_xlat10_0;
bool u_xlatb0;
vec3 u_xlat1;
mediump float u_xlat16_2;
float u_xlat9;
bool u_xlatb9;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD4.xy);
    u_xlat9 = u_xlat10_0.w + (-_CutOff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(u_xlat9<0.0);
#else
    u_xlatb9 = u_xlat9<0.0;
#endif
    if((int(u_xlatb9) * int(0xffffffffu))!=0){discard;}
    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
    SV_Target0.xyz = u_xlat1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0;
    u_xlat1.xyz = _BurnedColor.xyz * u_xlat10_0.xyz + (-u_xlat10_0.xyz);
    u_xlat0.xyz = vs_TEXCOORD2.www * u_xlat1.xyz + u_xlat10_0.xyz;
    u_xlat0.w = vs_TEXCOORD3;
    SV_Target1 = u_xlat0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_2 = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb0) ? u_xlat16_2 : 0.0399999991;
    u_xlat0.x = (-vs_TEXCOORD2.w) + 1.0;
    u_xlat0.x = u_xlat0.x * _GrassShininess;
    SV_Target2.w = u_xlat0.x;
    SV_Target2.xy = vec2(0.0399999991, 0.0399999991);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "MHY_SHADER_HIGH" "SOFT_SAMPLE_HEIGHT_ON" "DITHER_FADE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	float _NoiseScale;
uniform 	vec4 _WorldOffsetRange;
uniform 	float _HeightScale;
uniform 	float _Billboard;
uniform 	float _VegetationMoveScale;
uniform 	float _VegetationStiffness;
uniform 	vec4 _LocalWindsMapSize;
uniform 	vec4 _LargeWindParam;
uniform 	vec4 _SmallWindParam;
uniform 	vec4 _GlobalWind;
uniform 	vec4 _LocalWindsMapCameraInfo;
uniform 	float _GrassTipLighting;
uniform 	vec4 _MainTex_ST;
uniform 	float _RootColorScale;
uniform 	float _RootColorOffset;
uniform highp sampler2D _Heightmap;
uniform lowp sampler2D _Noisemap;
uniform lowp sampler2D _LocalWindsMap;
in highp vec4 in_POSITION0;
in highp vec4 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec2 in_TEXCOORD2;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp float vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
vec4 u_xlat0;
vec3 u_xlat1;
int u_xlati1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
vec4 u_xlat4;
vec3 u_xlat5;
vec4 u_xlat6;
vec4 u_xlat7;
vec4 u_xlat8;
vec3 u_xlat9;
vec3 u_xlat10;
bool u_xlatb10;
vec2 u_xlat12;
vec3 u_xlat16;
vec2 u_xlat20;
vec2 u_xlat22;
float u_xlat30;
int u_xlati30;
float u_xlat31;
float u_xlat32;
float u_xlat33;
float u_xlat34;
void main()
{
    u_xlat0.z = 0.0;
    u_xlat1.xyz = in_TEXCOORD0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[2].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TEXCOORD0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat10.xz = u_xlat1.xz + (-_LocalWindsMapSize.xy);
    u_xlat10.xz = vec2(u_xlat10.x / _LocalWindsMapSize.z, u_xlat10.z / _LocalWindsMapSize.w);
    u_xlat10.xz = u_xlat10.xz + vec2(0.5, 0.5);
    u_xlat2 = textureLod(_LocalWindsMap, u_xlat10.xz, 0.0);
    u_xlat10.x = dot(u_xlat2.xy, u_xlat2.xy);
    u_xlat10.x = sqrt(u_xlat10.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(9.99999975e-05>=u_xlat10.x);
#else
    u_xlatb10 = 9.99999975e-05>=u_xlat10.x;
#endif
    u_xlat10.x = u_xlatb10 ? 1.0 : float(0.0);
    u_xlat3.xy = (-u_xlat2.xy) + vec2(0.5, 0.5);
    u_xlat10.xz = u_xlat10.xx * u_xlat3.xy + u_xlat2.xy;
    u_xlat10.xz = u_xlat10.xz * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat31 = dot(u_xlat10.xz, u_xlat10.xz);
    u_xlat31 = max(u_xlat31, 0.00100000005);
    u_xlat3.x = inversesqrt(u_xlat31);
    u_xlat3.yz = u_xlat10.xz * u_xlat3.xx;
    u_xlat0.x = u_xlat3.z;
    u_xlat0.xz = (-u_xlat3.xy) * vec2(0.0, 1.0) + u_xlat0.xz;
    u_xlat31 = (-in_TEXCOORD1.x) + hlslcc_mtx4x4unity_ObjectToWorld[1].x;
    u_xlat2.x = u_xlat31 * 3.0;
    u_xlat2.x = _Time.y * 3.0 + u_xlat2.x;
    u_xlat2.x = u_xlat2.x + 0.5;
    u_xlat2.x = fract(u_xlat2.x);
    u_xlat2.x = u_xlat2.x * 2.0 + -1.0;
    u_xlat12.x = abs(u_xlat2.x) * abs(u_xlat2.x);
    u_xlat2.x = -abs(u_xlat2.x) * 2.0 + 3.0;
    u_xlat2.x = u_xlat2.x * u_xlat12.x;
    u_xlat12.x = u_xlat2.z * 1.5;
    u_xlat2.x = u_xlat12.x * u_xlat2.x;
    u_xlat0.xz = u_xlat0.xz * u_xlat2.xx;
    u_xlat0.xz = u_xlat0.xz * vec2(0.150000006, 0.150000006);
    u_xlat0.xz = u_xlat3.yz * u_xlat2.xx + u_xlat0.xz;
    u_xlat0.xz = u_xlat0.xz + u_xlat10.xz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(0.00199999986<u_xlat2.z);
#else
    u_xlatb2 = 0.00199999986<u_xlat2.z;
#endif
    u_xlat12.x = (-u_xlat2.w) * _LocalWindsMapCameraInfo.y + _LocalWindsMapCameraInfo.x;
    u_xlat0.xy = (bool(u_xlatb2)) ? u_xlat0.xz : u_xlat10.xz;
    u_xlat20.xy = vec2(_WorldOffsetRange.z + float(2.0), _WorldOffsetRange.w + float(2.0));
    u_xlat2.xz = u_xlat1.xz + (-_WorldOffsetRange.xy);
    u_xlat2.xz = u_xlat2.xz + vec2(1.0, 1.0);
    u_xlat20.xy = u_xlat2.xz / u_xlat20.xy;
    u_xlat20.xy = u_xlat20.xy * _WorldOffsetRange.zw + vec2(-0.5, -0.5);
    u_xlat2.xz = floor(u_xlat20.xy);
    u_xlat20.xy = u_xlat20.xy + (-u_xlat2.xz);
    u_xlat3 = u_xlat2.xzxz + vec4(0.5, 1.5, 1.5, 1.5);
    u_xlat4 = u_xlat2.xzxz + vec4(1.5, 0.5, 0.5, 0.5);
    u_xlat4 = vec4(u_xlat4.x / _WorldOffsetRange.z, u_xlat4.y / _WorldOffsetRange.w, u_xlat4.z / _WorldOffsetRange.z, u_xlat4.w / _WorldOffsetRange.w);
    u_xlat3 = vec4(u_xlat3.x / _WorldOffsetRange.z, u_xlat3.y / _WorldOffsetRange.w, u_xlat3.z / _WorldOffsetRange.z, u_xlat3.w / _WorldOffsetRange.w);
    u_xlat2.x = textureLod(_Heightmap, u_xlat3.zw, 0.0).x;
    u_xlat22.x = textureLod(_Heightmap, u_xlat3.xy, 0.0).x;
    u_xlat2.x = (-u_xlat22.x) + u_xlat2.x;
    u_xlat2.x = u_xlat20.x * u_xlat2.x + u_xlat22.x;
    u_xlat22.x = textureLod(_Heightmap, u_xlat4.xy, 0.0).x;
    u_xlat32 = textureLod(_Heightmap, u_xlat4.zw, 0.0).x;
    u_xlat22.x = (-u_xlat32) + u_xlat22.x;
    u_xlat20.x = u_xlat20.x * u_xlat22.x + u_xlat32;
    u_xlat2.x = (-u_xlat20.x) + u_xlat2.x;
    u_xlat20.x = u_xlat20.y * u_xlat2.x + u_xlat20.x;
    u_xlat30 = u_xlat20.x * _HeightScale + u_xlat1.y;
    u_xlat30 = (-u_xlat30) + u_xlat12.x;
    u_xlat30 = u_xlat30 * 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
#else
    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
#endif
    u_xlat30 = (-u_xlat30) + 1.0;
    u_xlat2.x = fract(u_xlat31);
    u_xlat31 = u_xlat31 + hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat12.xy = vec2(u_xlat31) * vec2(22.0, 33.0);
    u_xlat12.xy = fract(u_xlat12.xy);
    u_xlat12.xy = u_xlat12.xy + vec2(-0.5, -0.5);
    u_xlat3.xz = u_xlat12.xy * vec2(0.200000003, 0.200000003);
    u_xlat31 = u_xlat2.x + -0.5;
    u_xlat2.x = u_xlat2.x * _SmallWindParam.x;
    u_xlat2.x = sin(u_xlat2.x);
    u_xlat12.x = u_xlat31 * 0.333000004;
    u_xlat4.y = u_xlat31 * 0.333000004 + -1.0;
    u_xlat31 = in_TEXCOORD1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat31 = min(max(u_xlat31, 0.0), 1.0);
#else
    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat12.x * u_xlat31;
    u_xlat30 = u_xlat30 * u_xlat12.x;
    u_xlat0.xy = vec2(u_xlat30) * u_xlat0.xy;
    u_xlat5.xz = u_xlat0.xy * vec2(vec2(_VegetationMoveScale, _VegetationMoveScale));
    u_xlat0.x = dot(_GlobalWind.xyz, _GlobalWind.xyz);
    u_xlat0.x = max(u_xlat0.x, 0.00100000005);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat6 = u_xlat0.xxxx * _GlobalWind.xzxz;
    u_xlat0.xy = vec2(u_xlat6.z * _LargeWindParam.z, u_xlat6.w * _LargeWindParam.z);
    u_xlat22.xy = u_xlat1.xz / vec2(_NoiseScale);
    u_xlat22.xy = _LargeWindParam.xx * u_xlat6.xy + u_xlat22.xy;
    u_xlat22.xy = textureLod(_Noisemap, u_xlat22.xy, 0.0).xy;
    u_xlat22.xy = u_xlat22.xy + vec2(-0.5, -0.5);
    u_xlat22.xy = u_xlat22.xy * _LargeWindParam.yy + vec2(0.5, 0.5);
    u_xlat22.xy = u_xlat12.xx * u_xlat22.xy;
    u_xlat6.xz = u_xlat0.xy * u_xlat22.xy;
    u_xlat6.y = 0.0;
    u_xlat0.x = _VegetationStiffness * _SmallWindParam.y;
    u_xlat0.x = u_xlat12.x * u_xlat0.x;
    u_xlat7.x = u_xlat0.x * u_xlat2.x;
    u_xlat0.xyw = in_NORMAL0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyw = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_NORMAL0.xxx + u_xlat0.xyw;
    u_xlat0.xyw = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_NORMAL0.zzz + u_xlat0.xyw;
    u_xlat2.x = dot(u_xlat0.xyw, u_xlat0.xyw);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat0.xyw = u_xlat0.xyw * u_xlat2.xxx;
    u_xlat7.y = float(1.0);
    u_xlat7.z = float(0.349999994);
    u_xlat2.xzw = u_xlat0.xyw * u_xlat7.yxy;
    u_xlat8.xyz = u_xlat2.xzw * u_xlat7.xzx + u_xlat6.xyz;
    u_xlat2.xzw = u_xlat7.xzx * u_xlat2.xzw;
    u_xlat5.y = 0.0;
    u_xlat7.xyz = u_xlat5.xyz + u_xlat8.xyz;
    u_xlat8.y = hlslcc_mtx4x4unity_MatrixV[0].x;
    u_xlat8.x = hlslcc_mtx4x4unity_MatrixV[2].x;
    u_xlat33 = dot(u_xlat8.xy, u_xlat8.xy);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat16.xz = vec2(u_xlat33) * u_xlat8.xy;
    u_xlat8.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;
    u_xlat8.y = hlslcc_mtx4x4unity_ObjectToWorld[2].x;
    u_xlat33 = dot(u_xlat8.xy, u_xlat8.xy);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat8.xy = vec2(u_xlat33) * u_xlat8.xy;
    u_xlat9.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat9.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat9.xyz;
    u_xlat9.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat9.xyz;
    u_xlat9.xyz = u_xlat9.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat9.xyz = (-u_xlat1.xyz) + u_xlat9.xyz;
    u_xlat33 = u_xlat8.y * u_xlat9.z;
    u_xlat33 = u_xlat9.x * u_xlat8.x + (-u_xlat33);
    u_xlat34 = dot(u_xlat9.zx, u_xlat8.xy);
    u_xlat8.xy = u_xlat16.xz * vec2(u_xlat34);
    u_xlat34 = u_xlat33 * u_xlat16.z + (-u_xlat8.x);
    u_xlat33 = u_xlat33 * u_xlat16.x + u_xlat8.y;
    u_xlat33 = u_xlat9.z + u_xlat33;
    u_xlat9.z = (-u_xlat33) * _Billboard + u_xlat9.z;
    u_xlat33 = u_xlat9.x + u_xlat34;
    u_xlat9.x = (-u_xlat33) * _Billboard + u_xlat9.x;
    u_xlat33 = u_xlat12.x * u_xlat9.y;
    u_xlat12.x = max(u_xlat12.x, 9.99999972e-10);
    u_xlat7.xyz = u_xlat9.xyz * vec3(0.100000001, 1.0, 0.100000001) + u_xlat7.xyz;
    u_xlat34 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat34 = max(u_xlat34, 0.00100000005);
    u_xlat34 = inversesqrt(u_xlat34);
    u_xlat7.xyz = vec3(u_xlat34) * u_xlat7.xyz;
    u_xlat34 = dot(u_xlat9.xyz, u_xlat9.xyz);
    u_xlat34 = sqrt(u_xlat34);
    u_xlat8.xyz = u_xlat9.xyz * vec3(0.100000001, 1.0, 0.100000001);
    u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat34) + (-u_xlat8.xyz);
    u_xlat8.xyz = u_xlat1.xyz + u_xlat9.xyz;
    u_xlat8.w = u_xlat20.x * _HeightScale + u_xlat8.y;
    u_xlat1.xyz = u_xlat7.xyz + u_xlat8.xwz;
    u_xlat1.xyz = vec3(u_xlat33) * vec3(-0.5, 0.0, -0.5) + u_xlat1.xyz;
    u_xlat4.xz = u_xlat4.yy * (-u_xlat4.yy);
    u_xlat1.xyz = u_xlat4.xyz * u_xlat9.xyz + u_xlat1.xyz;
    u_xlat4.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat7 = u_xlat4.yyyy * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat7 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat4.xxxx + u_xlat7;
    u_xlat4 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat4.zzzz + u_xlat7;
    u_xlat4 = u_xlat4 + hlslcc_mtx4x4unity_MatrixVPZero[3];
    gl_Position = u_xlat4;
    u_xlat3.y = 0.0;
    vs_TEXCOORD0.xyz = u_xlat3.xyz + vec3(-1.0, 0.0, -1.0);
    vs_TEXCOORD0.w = 0.0;
    u_xlat3.xyz = u_xlat5.yzx / u_xlat12.xxx;
    u_xlat5.yz = u_xlat6.zx / u_xlat12.xx;
    u_xlat2.xyz = u_xlat2.zwx / u_xlat12.xxx;
    u_xlat5.x = 0.0;
    u_xlat2.xyz = u_xlat2.xyz + u_xlat5.xyz;
    u_xlat2.xyz = u_xlat3.xyz + u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz + vec3(0.0, -1.0, -1.0);
    u_xlat20.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat20.x = inversesqrt(u_xlat20.x);
    u_xlat2.xyz = u_xlat20.xxx * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat0.xyw * u_xlat2.xyz;
    u_xlat0.xyz = u_xlat2.zxy * u_xlat0.ywx + (-u_xlat3.xyz);
    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.xyz * u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
    u_xlat30 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat1.xyz = vec3(u_xlat30) * u_xlat1.xyz;
    u_xlat30 = dot(u_xlat1.xyz, u_xlat0.xyz);
#ifdef UNITY_ADRENO_ES3
    { bool cond = 0.0<u_xlat30; u_xlati1 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati1 = int((0.0<u_xlat30) ? 0xFFFFFFFFu : uint(0u));
#endif
#ifdef UNITY_ADRENO_ES3
    { bool cond = u_xlat30<0.0; u_xlati30 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati30 = int((u_xlat30<0.0) ? 0xFFFFFFFFu : uint(0u));
#endif
    u_xlati30 = (-u_xlati1) + u_xlati30;
    u_xlat30 = float(u_xlati30);
    vs_TEXCOORD1.xyz = vec3(u_xlat30) * u_xlat0.xyz;
    vs_TEXCOORD1.w = 0.0;
    u_xlat0.x = u_xlat31 / _RootColorScale;
    u_xlat0.x = u_xlat0.x + _RootColorOffset;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xxx * vec3(-0.501960814, 0.0, 0.0) + vec3(0.501960814, 0.0, 0.0);
    u_xlat30 = u_xlat31 + -0.600000024;
    vs_TEXCOORD3 = u_xlat31;
    u_xlat30 = max(u_xlat30, 0.0);
    u_xlat30 = _GrassTipLighting * u_xlat30 + 1.0;
    vs_TEXCOORD2.xyz = vec3(u_xlat30) * u_xlat0.xyz;
    vs_TEXCOORD2.w = 0.0;
    vs_TEXCOORD4.xy = in_TEXCOORD2.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
    u_xlat0.x = u_xlat4.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat4.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.w = u_xlat4.w;
    vs_TEXCOORD5.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD5.z = 0.247058824;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
float ImmCB_0_0_0[64];
uniform 	vec4 _ScreenParams;
uniform 	float _GrassShininess;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	float _CutOff;
uniform 	vec4 _BurnedColor;
uniform lowp sampler2D _MainTex;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp float vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec3 u_xlat0;
int u_xlati0;
bool u_xlatb0;
lowp vec4 u_xlat10_1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat12;
bool u_xlatb12;
void main()
{
	ImmCB_0_0_0[0] = 1.0;
	ImmCB_0_0_0[1] = 49.0;
	ImmCB_0_0_0[2] = 13.0;
	ImmCB_0_0_0[3] = 61.0;
	ImmCB_0_0_0[4] = 4.0;
	ImmCB_0_0_0[5] = 52.0;
	ImmCB_0_0_0[6] = 16.0;
	ImmCB_0_0_0[7] = 64.0;
	ImmCB_0_0_0[8] = 33.0;
	ImmCB_0_0_0[9] = 17.0;
	ImmCB_0_0_0[10] = 45.0;
	ImmCB_0_0_0[11] = 29.0;
	ImmCB_0_0_0[12] = 36.0;
	ImmCB_0_0_0[13] = 20.0;
	ImmCB_0_0_0[14] = 48.0;
	ImmCB_0_0_0[15] = 32.0;
	ImmCB_0_0_0[16] = 9.0;
	ImmCB_0_0_0[17] = 57.0;
	ImmCB_0_0_0[18] = 5.0;
	ImmCB_0_0_0[19] = 53.0;
	ImmCB_0_0_0[20] = 12.0;
	ImmCB_0_0_0[21] = 60.0;
	ImmCB_0_0_0[22] = 8.0;
	ImmCB_0_0_0[23] = 56.0;
	ImmCB_0_0_0[24] = 41.0;
	ImmCB_0_0_0[25] = 25.0;
	ImmCB_0_0_0[26] = 37.0;
	ImmCB_0_0_0[27] = 21.0;
	ImmCB_0_0_0[28] = 44.0;
	ImmCB_0_0_0[29] = 28.0;
	ImmCB_0_0_0[30] = 40.0;
	ImmCB_0_0_0[31] = 24.0;
	ImmCB_0_0_0[32] = 3.0;
	ImmCB_0_0_0[33] = 51.0;
	ImmCB_0_0_0[34] = 15.0;
	ImmCB_0_0_0[35] = 63.0;
	ImmCB_0_0_0[36] = 2.0;
	ImmCB_0_0_0[37] = 50.0;
	ImmCB_0_0_0[38] = 14.0;
	ImmCB_0_0_0[39] = 62.0;
	ImmCB_0_0_0[40] = 35.0;
	ImmCB_0_0_0[41] = 19.0;
	ImmCB_0_0_0[42] = 47.0;
	ImmCB_0_0_0[43] = 31.0;
	ImmCB_0_0_0[44] = 34.0;
	ImmCB_0_0_0[45] = 18.0;
	ImmCB_0_0_0[46] = 46.0;
	ImmCB_0_0_0[47] = 30.0;
	ImmCB_0_0_0[48] = 11.0;
	ImmCB_0_0_0[49] = 59.0;
	ImmCB_0_0_0[50] = 7.0;
	ImmCB_0_0_0[51] = 55.0;
	ImmCB_0_0_0[52] = 10.0;
	ImmCB_0_0_0[53] = 58.0;
	ImmCB_0_0_0[54] = 6.0;
	ImmCB_0_0_0[55] = 54.0;
	ImmCB_0_0_0[56] = 43.0;
	ImmCB_0_0_0[57] = 27.0;
	ImmCB_0_0_0[58] = 39.0;
	ImmCB_0_0_0[59] = 23.0;
	ImmCB_0_0_0[60] = 42.0;
	ImmCB_0_0_0[61] = 26.0;
	ImmCB_0_0_0[62] = 38.0;
	ImmCB_0_0_0[63] = 22.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vs_TEXCOORD5.z<0.949999988);
#else
    u_xlatb0 = vs_TEXCOORD5.z<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD5.yx / vs_TEXCOORD5.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
        u_xlat0.xy = u_xlat0.xy * vec2(0.125, 0.125);
        u_xlat0.xy = fract(u_xlat0.xy);
        u_xlat0.xy = u_xlat0.xy * vec2(7.99900007, 7.99900007);
        u_xlat0.xy = trunc(u_xlat0.xy);
        u_xlat0.x = u_xlat0.x * 8.0 + u_xlat0.y;
        u_xlati0 = int(u_xlat0.x);
        u_xlat0.x = (-ImmCB_0_0_0[u_xlati0]) * 0.015625 + vs_TEXCOORD5.z;
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat0.x = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD0.xyz;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD4.xy);
    u_xlat2.xyz = _BurnedColor.xyz * u_xlat10_1.xyz + (-u_xlat10_1.xyz);
    u_xlat2.xyz = vs_TEXCOORD2.www * u_xlat2.xyz + u_xlat10_1.xyz;
    u_xlat12 = u_xlat10_1.w + (-_CutOff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat12<0.0);
#else
    u_xlatb12 = u_xlat12<0.0;
#endif
    if((int(u_xlatb12) * int(0xffffffffu))!=0){discard;}
    u_xlat12 = (-vs_TEXCOORD2.w) + 1.0;
    u_xlat12 = u_xlat12 * _GrassShininess;
    SV_Target0.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_3 = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb0) ? u_xlat16_3 : 0.0399999991;
    SV_Target0.w = 0.0;
    u_xlat2.w = vs_TEXCOORD3;
    SV_Target1 = u_xlat2;
    SV_Target2.xy = vec2(0.0399999991, 0.0399999991);
    SV_Target2.w = u_xlat12;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MHY_SHADER_HIGH" "SOFT_SAMPLE_HEIGHT_ON" "DITHER_FADE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	int unity_BaseInstanceID;
uniform 	float _NoiseScale;
uniform 	vec4 _WorldOffsetRange;
uniform 	float _HeightScale;
uniform 	float _Billboard;
uniform 	float _VegetationMoveScale;
uniform 	float _VegetationStiffness;
uniform 	vec4 _LocalWindsMapSize;
uniform 	vec4 _LargeWindParam;
uniform 	vec4 _SmallWindParam;
uniform 	vec4 _GlobalWind;
uniform 	vec4 _LocalWindsMapCameraInfo;
uniform 	float _GrassTipLighting;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BurnedColor;
uniform 	float _RootColorScale;
uniform 	float _RootColorOffset;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _Heightmap;
uniform lowp sampler2D _Noisemap;
uniform lowp sampler2D _LocalWindsMap;
in highp vec4 in_POSITION0;
in highp vec4 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec2 in_TEXCOORD2;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp float vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
vec4 u_xlat0;
int u_xlati0;
uvec3 u_xlatu0;
vec3 u_xlat1;
uvec3 u_xlatu1;
vec4 u_xlat2;
uvec4 u_xlatu2;
vec4 u_xlat3;
vec4 u_xlat4;
vec3 u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
vec3 u_xlat8;
vec4 u_xlat9;
vec4 u_xlat10;
float u_xlat11;
int u_xlati11;
float u_xlat13;
uint u_xlatu13;
vec3 u_xlat17;
vec3 u_xlat18;
float u_xlat22;
int u_xlati22;
bool u_xlatb22;
float u_xlat24;
float u_xlat33;
bool u_xlatb33;
float u_xlat34;
bool u_xlatb34;
float u_xlat35;
float u_xlat36;
void main()
{
    u_xlat0.z = 0.0;
    u_xlati11 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati11 = u_xlati11 << 2;
    u_xlat1.xyz = in_TEXCOORD0.yyy * unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_TEXCOORD0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat2.xy = u_xlat1.xz + (-_LocalWindsMapSize.xy);
    u_xlat2.xy = vec2(u_xlat2.x / _LocalWindsMapSize.z, u_xlat2.y / _LocalWindsMapSize.w);
    u_xlat2.xy = u_xlat2.xy + vec2(0.5, 0.5);
    u_xlat2 = textureLod(_LocalWindsMap, u_xlat2.xy, 0.0);
    u_xlat33 = dot(u_xlat2.xy, u_xlat2.xy);
    u_xlat33 = sqrt(u_xlat33);
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(9.99999975e-05>=u_xlat33);
#else
    u_xlatb33 = 9.99999975e-05>=u_xlat33;
#endif
    u_xlat33 = u_xlatb33 ? 1.0 : float(0.0);
    u_xlat3.xy = (-u_xlat2.xy) + vec2(0.5, 0.5);
    u_xlat2.xy = vec2(u_xlat33) * u_xlat3.xy + u_xlat2.xy;
    u_xlat2.xy = u_xlat2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat33 = dot(u_xlat2.xy, u_xlat2.xy);
    u_xlat33 = max(u_xlat33, 0.00100000005);
    u_xlat3.x = inversesqrt(u_xlat33);
    u_xlat3.yz = u_xlat2.xy * u_xlat3.xx;
    u_xlat0.x = u_xlat3.z;
    u_xlat0.xz = (-u_xlat3.xy) * vec2(0.0, 1.0) + u_xlat0.xz;
    u_xlat33 = (-in_TEXCOORD1.x) + unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].x;
    u_xlat34 = u_xlat33 * 3.0;
    u_xlat34 = _Time.y * 3.0 + u_xlat34;
    u_xlat34 = u_xlat34 + 0.5;
    u_xlat34 = fract(u_xlat34);
    u_xlat34 = u_xlat34 * 2.0 + -1.0;
    u_xlat3.x = abs(u_xlat34) * abs(u_xlat34);
    u_xlat34 = -abs(u_xlat34) * 2.0 + 3.0;
    u_xlat34 = u_xlat34 * u_xlat3.x;
    u_xlat3.x = u_xlat2.z * 1.5;
    u_xlat34 = u_xlat34 * u_xlat3.x;
    u_xlat0.xz = u_xlat0.xz * vec2(u_xlat34);
    u_xlat0.xz = u_xlat0.xz * vec2(0.150000006, 0.150000006);
    u_xlat0.xz = u_xlat3.yz * vec2(u_xlat34) + u_xlat0.xz;
    u_xlat0.xz = u_xlat0.xz + u_xlat2.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlatb34 = !!(0.00199999986<u_xlat2.z);
#else
    u_xlatb34 = 0.00199999986<u_xlat2.z;
#endif
    u_xlat24 = (-u_xlat2.w) * _LocalWindsMapCameraInfo.y + _LocalWindsMapCameraInfo.x;
    u_xlat0.xz = (bool(u_xlatb34)) ? u_xlat0.xz : u_xlat2.xy;
    u_xlat2.xy = vec2(_WorldOffsetRange.z + float(2.0), _WorldOffsetRange.w + float(2.0));
    u_xlat3.xy = u_xlat1.xz + (-_WorldOffsetRange.xy);
    u_xlat3.xy = u_xlat3.xy + vec2(1.0, 1.0);
    u_xlat2.xy = u_xlat3.xy / u_xlat2.xy;
    u_xlat2.xy = u_xlat2.xy * _WorldOffsetRange.zw + vec2(-0.5, -0.5);
    u_xlat3.xy = floor(u_xlat2.xy);
    u_xlat2.xy = u_xlat2.xy + (-u_xlat3.xy);
    u_xlat4 = u_xlat3.xyxy + vec4(0.5, 1.5, 1.5, 1.5);
    u_xlat3 = u_xlat3.xyxy + vec4(1.5, 0.5, 0.5, 0.5);
    u_xlat3 = vec4(u_xlat3.x / _WorldOffsetRange.z, u_xlat3.y / _WorldOffsetRange.w, u_xlat3.z / _WorldOffsetRange.z, u_xlat3.w / _WorldOffsetRange.w);
    u_xlat4 = vec4(u_xlat4.x / _WorldOffsetRange.z, u_xlat4.y / _WorldOffsetRange.w, u_xlat4.z / _WorldOffsetRange.z, u_xlat4.w / _WorldOffsetRange.w);
    u_xlat34 = textureLod(_Heightmap, u_xlat4.zw, 0.0).x;
    u_xlat35 = textureLod(_Heightmap, u_xlat4.xy, 0.0).x;
    u_xlat34 = u_xlat34 + (-u_xlat35);
    u_xlat34 = u_xlat2.x * u_xlat34 + u_xlat35;
    u_xlat35 = textureLod(_Heightmap, u_xlat3.xy, 0.0).x;
    u_xlat3.x = textureLod(_Heightmap, u_xlat3.zw, 0.0).x;
    u_xlat35 = u_xlat35 + (-u_xlat3.x);
    u_xlat2.x = u_xlat2.x * u_xlat35 + u_xlat3.x;
    u_xlat34 = u_xlat34 + (-u_xlat2.x);
    u_xlat34 = u_xlat2.y * u_xlat34 + u_xlat2.x;
    u_xlat2.x = u_xlat34 * _HeightScale + u_xlat1.y;
    u_xlat2.x = (-u_xlat2.x) + u_xlat24;
    u_xlat2.x = u_xlat2.x * 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat2.x = (-u_xlat2.x) + 1.0;
    u_xlat13 = float(floatBitsToUint(unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2]).w);
    u_xlat13 = u_xlat13 * 5.96046448e-08;
    u_xlatu13 = uint(u_xlat13);
    u_xlatu13 = u_xlatu13 & 3u;
    u_xlat13 = float(u_xlatu13);
    u_xlat24 = fract(u_xlat33);
    u_xlat33 = u_xlat33 + unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].y;
    u_xlat3.xy = vec2(u_xlat33) * vec2(22.0, 33.0);
    u_xlat3.xy = fract(u_xlat3.xy);
    u_xlat3.xy = u_xlat3.xy + vec2(-0.5, -0.5);
    u_xlat3.xz = u_xlat3.xy * vec2(0.200000003, 0.200000003);
    u_xlat33 = u_xlat13 + u_xlat24;
    u_xlat13 = u_xlat24 * _SmallWindParam.x;
    u_xlat13 = sin(u_xlat13);
    u_xlat33 = u_xlat33 + -0.5;
    u_xlat24 = u_xlat33 * 0.333000004;
    u_xlat4.y = u_xlat33 * 0.333000004 + -1.0;
    u_xlat33 = in_TEXCOORD1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat33 = min(max(u_xlat33, 0.0), 1.0);
#else
    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
#endif
    u_xlat24 = u_xlat24 * u_xlat33;
    u_xlat2.x = u_xlat24 * u_xlat2.x;
    u_xlat0.xz = u_xlat0.xz * u_xlat2.xx;
    u_xlat5.xz = u_xlat0.xz * vec2(vec2(_VegetationMoveScale, _VegetationMoveScale));
    u_xlat6.y = 0.0;
    u_xlat0.x = _VegetationStiffness * _SmallWindParam.y;
    u_xlat0.x = u_xlat24 * u_xlat0.x;
    u_xlat7.x = u_xlat0.x * u_xlat13;
    u_xlat2.xyw = in_NORMAL0.yyy * unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat2.xyw = unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_NORMAL0.xxx + u_xlat2.xyw;
    u_xlat2.xyw = unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_NORMAL0.zzz + u_xlat2.xyw;
    u_xlat0.x = dot(u_xlat2.xyw, u_xlat2.xyw);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat2.xyw = u_xlat0.xxx * u_xlat2.xyw;
    u_xlat7.y = float(1.0);
    u_xlat7.z = float(0.349999994);
    u_xlat8.xyz = u_xlat2.xyw * u_xlat7.yxy;
    u_xlat0.x = dot(_GlobalWind.xyz, _GlobalWind.xyz);
    u_xlat0.x = max(u_xlat0.x, 0.00100000005);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat9 = u_xlat0.xxxx * _GlobalWind.xzxz;
    u_xlat0.xz = vec2(u_xlat9.z * _LargeWindParam.z, u_xlat9.w * _LargeWindParam.z);
    u_xlat18.xz = u_xlat1.xz / vec2(_NoiseScale);
    u_xlat18.xz = _LargeWindParam.xx * u_xlat9.xy + u_xlat18.xz;
    u_xlat18.xz = textureLod(_Noisemap, u_xlat18.xz, 0.0).xy;
    u_xlat18.xz = u_xlat18.xz + vec2(-0.5, -0.5);
    u_xlat18.xz = u_xlat18.xz * _LargeWindParam.yy + vec2(0.5, 0.5);
    u_xlat18.xz = vec2(u_xlat24) * u_xlat18.xz;
    u_xlat6.xz = u_xlat0.xz * u_xlat18.xz;
    u_xlat9.xyz = u_xlat8.xyz * u_xlat7.xzx + u_xlat6.xyz;
    u_xlat7.xyz = u_xlat7.xzx * u_xlat8.xyz;
    u_xlat5.y = 0.0;
    u_xlat8.xyz = u_xlat5.xyz + u_xlat9.xyz;
    u_xlat9.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat9.xyz = unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat9.xyz;
    u_xlat9.xyz = unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat9.xyz;
    u_xlat9.xyz = u_xlat9.xyz + unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat9.xyz = (-u_xlat1.xyz) + u_xlat9.xyz;
    u_xlat10.x = unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].x;
    u_xlat10.y = unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].x;
    u_xlat0.x = dot(u_xlat10.xy, u_xlat10.xy);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xz = u_xlat0.xx * u_xlat10.xy;
    u_xlat36 = u_xlat0.z * u_xlat9.z;
    u_xlat36 = u_xlat9.x * u_xlat0.x + (-u_xlat36);
    u_xlat0.x = dot(u_xlat9.zx, u_xlat0.xz);
    u_xlat10.y = hlslcc_mtx4x4unity_MatrixV[0].x;
    u_xlat10.x = hlslcc_mtx4x4unity_MatrixV[2].x;
    u_xlat22 = dot(u_xlat10.xy, u_xlat10.xy);
    u_xlat22 = inversesqrt(u_xlat22);
    u_xlat17.xz = vec2(u_xlat22) * u_xlat10.xy;
    u_xlat0.xz = u_xlat0.xx * u_xlat17.xz;
    u_xlat0.x = u_xlat36 * u_xlat17.z + (-u_xlat0.x);
    u_xlat0.z = u_xlat36 * u_xlat17.x + u_xlat0.z;
    u_xlat0.xz = u_xlat9.xz + u_xlat0.xz;
    u_xlat9.z = (-u_xlat0.z) * _Billboard + u_xlat9.z;
    u_xlat9.x = (-u_xlat0.x) * _Billboard + u_xlat9.x;
    u_xlat8.xyz = u_xlat9.xyz * vec3(0.100000001, 1.0, 0.100000001) + u_xlat8.xyz;
    u_xlat0.x = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat0.x = max(u_xlat0.x, 0.00100000005);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat8.xyz = u_xlat0.xxx * u_xlat8.xyz;
    u_xlat0.x = dot(u_xlat9.xyz, u_xlat9.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat10.xyz = u_xlat9.xyz * vec3(0.100000001, 1.0, 0.100000001);
    u_xlat8.xyz = u_xlat8.xyz * u_xlat0.xxx + (-u_xlat10.xyz);
    u_xlat10.xyz = u_xlat1.xyz + u_xlat9.xyz;
    u_xlat10.w = u_xlat34 * _HeightScale + u_xlat10.y;
    u_xlat1.xyz = u_xlat8.xyz + u_xlat10.xwz;
    u_xlatu0.xz = uvec2(65280u, 255u) & floatBitsToUint(unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1]).ww;
    u_xlat0.xz = vec2(u_xlatu0.xz);
    u_xlat0.x = u_xlat0.x * 0.00390625;
    u_xlatu0.x = uint(u_xlat0.x);
    u_xlat0.x = float(u_xlatu0.x);
    u_xlat8.xz = u_xlat0.xz + vec2(-127.0, -127.0);
    u_xlat0.xz = u_xlat8.xz * vec2(0.00787401572, 0.00787401572);
    u_xlat0.xz = u_xlat0.xz * u_xlat0.xz;
    u_xlat0.x = u_xlat0.z + u_xlat0.x;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(0.0<u_xlat0.x);
#else
    u_xlatb22 = 0.0<u_xlat0.x;
#endif
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat8.y = u_xlatb22 ? u_xlat0.x : float(0.0);
    u_xlat10.xyz = u_xlat8.xyz * u_xlat9.yyy;
    u_xlat10.xyz = vec3(u_xlat24) * u_xlat10.xyz;
    u_xlat0.x = max(u_xlat24, 9.99999972e-10);
    u_xlat1.xyz = u_xlat10.xyz * vec3(0.00393700786, 0.0, 0.00393700786) + u_xlat1.xyz;
    u_xlat4.xz = u_xlat4.yy * (-u_xlat4.yy);
    u_xlat1.xyz = u_xlat4.xyz * u_xlat9.xyz + u_xlat1.xyz;
    u_xlat4.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat9 = u_xlat4.yyyy * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat9 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat4.xxxx + u_xlat9;
    u_xlat4 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat4.zzzz + u_xlat9;
    u_xlat4 = u_xlat4 + hlslcc_mtx4x4unity_MatrixVPZero[3];
    gl_Position = u_xlat4;
    u_xlat3.y = 0.0;
    vs_TEXCOORD0.xyz = u_xlat8.xyz * vec3(0.00787401572, 1.0, 0.00787401572) + u_xlat3.xyz;
    vs_TEXCOORD0.w = 0.0;
    u_xlat3.xyz = u_xlat5.yzx / u_xlat0.xxx;
    u_xlat5.yz = u_xlat6.zx / u_xlat0.xx;
    u_xlat6.xyz = u_xlat7.yzx / u_xlat0.xxx;
    u_xlat5.x = 0.0;
    u_xlat5.xyz = u_xlat5.xyz + u_xlat6.xyz;
    u_xlat3.xyz = u_xlat3.xyz + u_xlat5.xyz;
    u_xlat3.xyz = u_xlat8.yzx * vec3(1.0, 0.00787401572, 0.00787401572) + u_xlat3.xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat5.xyz = u_xlat2.xyw * u_xlat3.xyz;
    u_xlat2.xyz = u_xlat3.zxy * u_xlat2.ywx + (-u_xlat5.xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat5.xyz = u_xlat3.xyz * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat5.xyz);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
    { bool cond = 0.0<u_xlat0.x; u_xlati22 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati22 = int((0.0<u_xlat0.x) ? 0xFFFFFFFFu : uint(0u));
#endif
#ifdef UNITY_ADRENO_ES3
    { bool cond = u_xlat0.x<0.0; u_xlati0 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati0 = int((u_xlat0.x<0.0) ? 0xFFFFFFFFu : uint(0u));
#endif
    u_xlati0 = (-u_xlati22) + u_xlati0;
    u_xlat0.x = float(u_xlati0);
    vs_TEXCOORD1.xyz = u_xlat0.xxx * u_xlat2.xyz;
    vs_TEXCOORD1.w = 0.0;
    u_xlatu1.xyz = uvec3(16711680u, 65280u, 255u) & floatBitsToUint(unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2]).www;
    u_xlat1.xyz = vec3(u_xlatu1.xyz);
    u_xlatu2 = uvec4(4278190080u, 16711680u, 65280u, 255u) & floatBitsToUint(unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3]).wwww;
    u_xlat0.x = max(1.0, unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].w);
    u_xlat0.x = min(u_xlat0.x, 2.0);
    u_xlat0.x = u_xlat0.x + -1.0;
    u_xlat2 = vec4(u_xlatu2);
    u_xlat2 = u_xlat2 * vec4(2.33743719e-10, 5.9838392e-08, 1.53186284e-05, 0.00392156886);
    u_xlat1.xyz = u_xlat1.xyz * vec3(5.9838392e-08, 1.53186284e-05, 0.00392156886) + (-u_xlat2.yzw);
    u_xlat11 = u_xlat33 / _RootColorScale;
    u_xlat11 = u_xlat11 + _RootColorOffset;
#ifdef UNITY_ADRENO_ES3
    u_xlat11 = min(max(u_xlat11, 0.0), 1.0);
#else
    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat11) * u_xlat1.xyz + u_xlat2.yzw;
    vs_TEXCOORD5.z = u_xlat2.x;
    u_xlat2.xyz = (-u_xlat1.xyz) + _BurnedColor.xyz;
    u_xlat1.xyz = u_xlat0.xxx * u_xlat2.xyz + u_xlat1.xyz;
    vs_TEXCOORD2.w = u_xlat0.x;
    u_xlat0.x = u_xlat33 + -0.600000024;
    vs_TEXCOORD3 = u_xlat33;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = _GrassTipLighting * u_xlat0.x + 1.0;
    vs_TEXCOORD2.xyz = u_xlat0.xxx * u_xlat1.xyz;
    vs_TEXCOORD4.xy = in_TEXCOORD2.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
    u_xlat0.x = u_xlat4.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat4.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.w = u_xlat4.w;
    vs_TEXCOORD5.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
float ImmCB_0_0_0[64];
uniform 	vec4 _ScreenParams;
uniform 	float _GrassShininess;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	float _CutOff;
uniform 	vec4 _BurnedColor;
uniform lowp sampler2D _MainTex;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp float vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec3 u_xlat0;
int u_xlati0;
bool u_xlatb0;
lowp vec4 u_xlat10_1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat12;
bool u_xlatb12;
void main()
{
	ImmCB_0_0_0[0] = 1.0;
	ImmCB_0_0_0[1] = 49.0;
	ImmCB_0_0_0[2] = 13.0;
	ImmCB_0_0_0[3] = 61.0;
	ImmCB_0_0_0[4] = 4.0;
	ImmCB_0_0_0[5] = 52.0;
	ImmCB_0_0_0[6] = 16.0;
	ImmCB_0_0_0[7] = 64.0;
	ImmCB_0_0_0[8] = 33.0;
	ImmCB_0_0_0[9] = 17.0;
	ImmCB_0_0_0[10] = 45.0;
	ImmCB_0_0_0[11] = 29.0;
	ImmCB_0_0_0[12] = 36.0;
	ImmCB_0_0_0[13] = 20.0;
	ImmCB_0_0_0[14] = 48.0;
	ImmCB_0_0_0[15] = 32.0;
	ImmCB_0_0_0[16] = 9.0;
	ImmCB_0_0_0[17] = 57.0;
	ImmCB_0_0_0[18] = 5.0;
	ImmCB_0_0_0[19] = 53.0;
	ImmCB_0_0_0[20] = 12.0;
	ImmCB_0_0_0[21] = 60.0;
	ImmCB_0_0_0[22] = 8.0;
	ImmCB_0_0_0[23] = 56.0;
	ImmCB_0_0_0[24] = 41.0;
	ImmCB_0_0_0[25] = 25.0;
	ImmCB_0_0_0[26] = 37.0;
	ImmCB_0_0_0[27] = 21.0;
	ImmCB_0_0_0[28] = 44.0;
	ImmCB_0_0_0[29] = 28.0;
	ImmCB_0_0_0[30] = 40.0;
	ImmCB_0_0_0[31] = 24.0;
	ImmCB_0_0_0[32] = 3.0;
	ImmCB_0_0_0[33] = 51.0;
	ImmCB_0_0_0[34] = 15.0;
	ImmCB_0_0_0[35] = 63.0;
	ImmCB_0_0_0[36] = 2.0;
	ImmCB_0_0_0[37] = 50.0;
	ImmCB_0_0_0[38] = 14.0;
	ImmCB_0_0_0[39] = 62.0;
	ImmCB_0_0_0[40] = 35.0;
	ImmCB_0_0_0[41] = 19.0;
	ImmCB_0_0_0[42] = 47.0;
	ImmCB_0_0_0[43] = 31.0;
	ImmCB_0_0_0[44] = 34.0;
	ImmCB_0_0_0[45] = 18.0;
	ImmCB_0_0_0[46] = 46.0;
	ImmCB_0_0_0[47] = 30.0;
	ImmCB_0_0_0[48] = 11.0;
	ImmCB_0_0_0[49] = 59.0;
	ImmCB_0_0_0[50] = 7.0;
	ImmCB_0_0_0[51] = 55.0;
	ImmCB_0_0_0[52] = 10.0;
	ImmCB_0_0_0[53] = 58.0;
	ImmCB_0_0_0[54] = 6.0;
	ImmCB_0_0_0[55] = 54.0;
	ImmCB_0_0_0[56] = 43.0;
	ImmCB_0_0_0[57] = 27.0;
	ImmCB_0_0_0[58] = 39.0;
	ImmCB_0_0_0[59] = 23.0;
	ImmCB_0_0_0[60] = 42.0;
	ImmCB_0_0_0[61] = 26.0;
	ImmCB_0_0_0[62] = 38.0;
	ImmCB_0_0_0[63] = 22.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vs_TEXCOORD5.z<0.949999988);
#else
    u_xlatb0 = vs_TEXCOORD5.z<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD5.yx / vs_TEXCOORD5.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
        u_xlat0.xy = u_xlat0.xy * vec2(0.125, 0.125);
        u_xlat0.xy = fract(u_xlat0.xy);
        u_xlat0.xy = u_xlat0.xy * vec2(7.99900007, 7.99900007);
        u_xlat0.xy = trunc(u_xlat0.xy);
        u_xlat0.x = u_xlat0.x * 8.0 + u_xlat0.y;
        u_xlati0 = int(u_xlat0.x);
        u_xlat0.x = (-ImmCB_0_0_0[u_xlati0]) * 0.015625 + vs_TEXCOORD5.z;
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat0.x = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD0.xyz;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD4.xy);
    u_xlat2.xyz = _BurnedColor.xyz * u_xlat10_1.xyz + (-u_xlat10_1.xyz);
    u_xlat2.xyz = vs_TEXCOORD2.www * u_xlat2.xyz + u_xlat10_1.xyz;
    u_xlat12 = u_xlat10_1.w + (-_CutOff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat12<0.0);
#else
    u_xlatb12 = u_xlat12<0.0;
#endif
    if((int(u_xlatb12) * int(0xffffffffu))!=0){discard;}
    u_xlat12 = (-vs_TEXCOORD2.w) + 1.0;
    u_xlat12 = u_xlat12 * _GrassShininess;
    SV_Target0.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_3 = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb0) ? u_xlat16_3 : 0.0399999991;
    SV_Target0.w = 0.0;
    u_xlat2.w = vs_TEXCOORD3;
    SV_Target1 = u_xlat2;
    SV_Target2.xy = vec2(0.0399999991, 0.0399999991);
    SV_Target2.w = u_xlat12;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "MHY_SHADER_MIDDLE" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	float _NoiseScale;
uniform 	vec4 _WorldOffsetRange;
uniform 	float _HeightScale;
uniform 	float _Billboard;
uniform 	float _VegetationMoveScale;
uniform 	vec4 _LocalWindsMapSize;
uniform 	vec4 _LargeWindParam;
uniform 	vec4 _GlobalWind;
uniform 	vec4 _LocalWindsMapCameraInfo;
uniform 	float _GrassTipLighting;
uniform 	vec4 _MainTex_ST;
uniform 	float _RootColorScale;
uniform 	float _RootColorOffset;
uniform highp sampler2D _Heightmap;
uniform lowp sampler2D _Noisemap;
uniform lowp sampler2D _LocalWindsMap;
in highp vec4 in_POSITION0;
in highp vec4 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec2 in_TEXCOORD2;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp float vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec3 u_xlat0;
vec3 u_xlat1;
int u_xlati1;
vec4 u_xlat2;
bool u_xlatb2;
vec3 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
vec4 u_xlat6;
vec3 u_xlat7;
vec3 u_xlat8;
bool u_xlatb8;
vec2 u_xlat10;
vec2 u_xlat16;
vec2 u_xlat21;
float u_xlat24;
int u_xlati24;
float u_xlat25;
float u_xlat26;
void main()
{
    u_xlat0.z = 0.0;
    u_xlat1.xyz = in_TEXCOORD0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[2].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TEXCOORD0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat8.xz = u_xlat1.xz + (-_LocalWindsMapSize.xy);
    u_xlat8.xz = vec2(u_xlat8.x / _LocalWindsMapSize.z, u_xlat8.z / _LocalWindsMapSize.w);
    u_xlat8.xz = u_xlat8.xz + vec2(0.5, 0.5);
    u_xlat2 = textureLod(_LocalWindsMap, u_xlat8.xz, 0.0);
    u_xlat8.x = dot(u_xlat2.xy, u_xlat2.xy);
    u_xlat8.x = sqrt(u_xlat8.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(9.99999975e-05>=u_xlat8.x);
#else
    u_xlatb8 = 9.99999975e-05>=u_xlat8.x;
#endif
    u_xlat8.x = u_xlatb8 ? 1.0 : float(0.0);
    u_xlat3.xy = (-u_xlat2.xy) + vec2(0.5, 0.5);
    u_xlat8.xz = u_xlat8.xx * u_xlat3.xy + u_xlat2.xy;
    u_xlat8.xz = u_xlat8.xz * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat25 = dot(u_xlat8.xz, u_xlat8.xz);
    u_xlat25 = max(u_xlat25, 0.00100000005);
    u_xlat3.x = inversesqrt(u_xlat25);
    u_xlat3.yz = u_xlat8.xz * u_xlat3.xx;
    u_xlat0.x = u_xlat3.z;
    u_xlat0.xz = (-u_xlat3.xy) * vec2(0.0, 1.0) + u_xlat0.xz;
    u_xlat25 = (-in_TEXCOORD1.x) + hlslcc_mtx4x4unity_ObjectToWorld[1].x;
    u_xlat2.x = u_xlat25 * 3.0;
    u_xlat2.x = _Time.y * 3.0 + u_xlat2.x;
    u_xlat2.x = u_xlat2.x + 0.5;
    u_xlat2.x = fract(u_xlat2.x);
    u_xlat2.x = u_xlat2.x * 2.0 + -1.0;
    u_xlat10.x = abs(u_xlat2.x) * abs(u_xlat2.x);
    u_xlat2.x = -abs(u_xlat2.x) * 2.0 + 3.0;
    u_xlat2.x = u_xlat2.x * u_xlat10.x;
    u_xlat10.x = u_xlat2.z * 1.5;
    u_xlat2.x = u_xlat10.x * u_xlat2.x;
    u_xlat0.xz = u_xlat0.xz * u_xlat2.xx;
    u_xlat0.xz = u_xlat0.xz * vec2(0.150000006, 0.150000006);
    u_xlat0.xz = u_xlat3.yz * u_xlat2.xx + u_xlat0.xz;
    u_xlat0.xz = u_xlat0.xz + u_xlat8.xz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(0.00199999986<u_xlat2.z);
#else
    u_xlatb2 = 0.00199999986<u_xlat2.z;
#endif
    u_xlat10.x = (-u_xlat2.w) * _LocalWindsMapCameraInfo.y + _LocalWindsMapCameraInfo.x;
    u_xlat0.xy = (bool(u_xlatb2)) ? u_xlat0.xz : u_xlat8.xz;
    u_xlat16.xy = vec2(_WorldOffsetRange.z + float(2.0), _WorldOffsetRange.w + float(2.0));
    u_xlat2.xz = u_xlat1.xz + (-_WorldOffsetRange.xy);
    u_xlat2.xz = u_xlat2.xz + vec2(1.0, 1.0);
    u_xlat16.xy = u_xlat2.xz / u_xlat16.xy;
    u_xlat16.x = textureLod(_Heightmap, u_xlat16.xy, 0.0).x;
    u_xlat24 = u_xlat16.x * _HeightScale + u_xlat1.y;
    u_xlat24 = (-u_xlat24) + u_xlat10.x;
    u_xlat24 = u_xlat24 * 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat24 = (-u_xlat24) + 1.0;
    u_xlat2.x = fract(u_xlat25);
    u_xlat25 = u_xlat25 + hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat10.xy = vec2(u_xlat25) * vec2(22.0, 33.0);
    u_xlat10.xy = fract(u_xlat10.xy);
    u_xlat10.xy = u_xlat10.xy + vec2(-0.5, -0.5);
    u_xlat3.xz = u_xlat10.xy * vec2(0.200000003, 0.200000003);
    u_xlat25 = u_xlat2.x + -0.5;
    u_xlat2.x = u_xlat25 * 0.333000004;
    u_xlat4.y = u_xlat25 * 0.333000004 + -1.0;
    u_xlat25 = in_TEXCOORD1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat25 = min(max(u_xlat25, 0.0), 1.0);
#else
    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
#endif
    u_xlat2.x = u_xlat2.x * u_xlat25;
    u_xlat24 = u_xlat24 * u_xlat2.x;
    u_xlat0.xy = vec2(u_xlat24) * u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(vec2(_VegetationMoveScale, _VegetationMoveScale));
    u_xlat24 = dot(_GlobalWind.xyz, _GlobalWind.xyz);
    u_xlat24 = max(u_xlat24, 0.00100000005);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat5 = vec4(u_xlat24) * _GlobalWind.xzxz;
    u_xlat10.xy = vec2(u_xlat5.z * _LargeWindParam.z, u_xlat5.w * _LargeWindParam.z);
    u_xlat21.xy = u_xlat1.xz / vec2(_NoiseScale);
    u_xlat5.xy = _LargeWindParam.xx * u_xlat5.xy + u_xlat21.xy;
    u_xlat5.xy = textureLod(_Noisemap, u_xlat5.xy, 0.0).xy;
    u_xlat5.xy = u_xlat5.xy + vec2(-0.5, -0.5);
    u_xlat5.xy = u_xlat5.xy * _LargeWindParam.yy + vec2(0.5, 0.5);
    u_xlat5.xy = u_xlat2.xx * u_xlat5.xy;
    u_xlat6.xz = u_xlat5.xy * u_xlat10.xy + u_xlat0.xy;
    u_xlat10.xy = u_xlat10.xy * u_xlat5.xy;
    u_xlat6.y = 0.0;
    u_xlat5.y = hlslcc_mtx4x4unity_MatrixV[0].x;
    u_xlat5.x = hlslcc_mtx4x4unity_MatrixV[2].x;
    u_xlat24 = dot(u_xlat5.xy, u_xlat5.xy);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat5.xy = vec2(u_xlat24) * u_xlat5.xy;
    u_xlat7.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;
    u_xlat7.y = hlslcc_mtx4x4unity_ObjectToWorld[2].x;
    u_xlat24 = dot(u_xlat7.xy, u_xlat7.xy);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat21.xy = vec2(u_xlat24) * u_xlat7.xy;
    u_xlat7.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat7.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat7.xyz;
    u_xlat7.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat7.xyz;
    u_xlat7.xyz = u_xlat7.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat7.xyz = (-u_xlat1.xyz) + u_xlat7.xyz;
    u_xlat24 = u_xlat21.y * u_xlat7.z;
    u_xlat24 = u_xlat7.x * u_xlat21.x + (-u_xlat24);
    u_xlat26 = dot(u_xlat7.zx, u_xlat21.xy);
    u_xlat21.xy = u_xlat5.xy * vec2(u_xlat26);
    u_xlat26 = u_xlat24 * u_xlat5.y + (-u_xlat21.x);
    u_xlat24 = u_xlat24 * u_xlat5.x + u_xlat21.y;
    u_xlat24 = u_xlat7.z + u_xlat24;
    u_xlat7.z = (-u_xlat24) * _Billboard + u_xlat7.z;
    u_xlat24 = u_xlat7.x + u_xlat26;
    u_xlat7.x = (-u_xlat24) * _Billboard + u_xlat7.x;
    u_xlat24 = u_xlat2.x * u_xlat7.y;
    u_xlat2.x = max(u_xlat2.x, 9.99999972e-10);
    u_xlat5.xyz = u_xlat7.xyz * vec3(0.100000001, 1.0, 0.100000001) + u_xlat6.xyz;
    u_xlat26 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat26 = max(u_xlat26, 0.00100000005);
    u_xlat26 = inversesqrt(u_xlat26);
    u_xlat5.xyz = vec3(u_xlat26) * u_xlat5.xyz;
    u_xlat26 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat26 = sqrt(u_xlat26);
    u_xlat6.xyz = u_xlat7.xyz * vec3(0.100000001, 1.0, 0.100000001);
    u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat26) + (-u_xlat6.xyz);
    u_xlat6.xyz = u_xlat1.xyz + u_xlat7.xyz;
    u_xlat6.w = u_xlat16.x * _HeightScale + u_xlat6.y;
    u_xlat1.xyz = u_xlat5.xyz + u_xlat6.xwz;
    u_xlat1.xyz = vec3(u_xlat24) * vec3(-0.5, 0.0, -0.5) + u_xlat1.xyz;
    u_xlat4.xz = u_xlat4.yy * (-u_xlat4.yy);
    u_xlat1.xyz = u_xlat4.xyz * u_xlat7.xyz + u_xlat1.xyz;
    u_xlat4.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat5 = u_xlat4.yyyy * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat5 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat4.xxxx + u_xlat5;
    u_xlat4 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat4.zzzz + u_xlat5;
    gl_Position = u_xlat4 + hlslcc_mtx4x4unity_MatrixVPZero[3];
    u_xlat3.y = 0.0;
    vs_TEXCOORD0.xyz = u_xlat3.xyz + vec3(-1.0, 0.0, -1.0);
    vs_TEXCOORD0.w = 0.0;
    u_xlat0.xy = u_xlat0.yx / u_xlat2.xx;
    u_xlat16.xy = u_xlat10.yx / u_xlat2.xx;
    u_xlat0.xy = u_xlat0.xy + u_xlat16.xy;
    u_xlat0.yz = u_xlat0.xy + vec2(-1.0, -1.0);
    u_xlat24 = dot(u_xlat0.yz, u_xlat0.yz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat0.x = 0.0;
    u_xlat0.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    u_xlat2.xyz = in_NORMAL0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_NORMAL0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_NORMAL0.zzz + u_xlat2.xyz;
    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat0.xyz * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat0.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat0.xyz * u_xlat2.xyz;
    u_xlat0.xyz = u_xlat2.zxy * u_xlat0.yzx + (-u_xlat3.xyz);
    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
    u_xlat24 = dot(u_xlat1.xyz, u_xlat0.xyz);
#ifdef UNITY_ADRENO_ES3
    { bool cond = 0.0<u_xlat24; u_xlati1 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati1 = int((0.0<u_xlat24) ? 0xFFFFFFFFu : uint(0u));
#endif
#ifdef UNITY_ADRENO_ES3
    { bool cond = u_xlat24<0.0; u_xlati24 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati24 = int((u_xlat24<0.0) ? 0xFFFFFFFFu : uint(0u));
#endif
    u_xlati24 = (-u_xlati1) + u_xlati24;
    u_xlat24 = float(u_xlati24);
    vs_TEXCOORD1.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    vs_TEXCOORD1.w = 0.0;
    u_xlat0.x = u_xlat25 / _RootColorScale;
    u_xlat0.x = u_xlat0.x + _RootColorOffset;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xxx * vec3(-0.501960814, 0.0, 0.0) + vec3(0.501960814, 0.0, 0.0);
    u_xlat24 = u_xlat25 + -0.600000024;
    vs_TEXCOORD3 = u_xlat25;
    u_xlat24 = max(u_xlat24, 0.0);
    u_xlat24 = _GrassTipLighting * u_xlat24 + 1.0;
    vs_TEXCOORD2.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    vs_TEXCOORD2.w = 0.0;
    vs_TEXCOORD4.xy = in_TEXCOORD2.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	float _GrassShininess;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	float _CutOff;
uniform 	vec4 _BurnedColor;
uniform lowp sampler2D _MainTex;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp float vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec4 u_xlat0;
lowp vec4 u_xlat10_0;
bool u_xlatb0;
vec3 u_xlat1;
mediump float u_xlat16_2;
float u_xlat9;
bool u_xlatb9;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD4.xy);
    u_xlat9 = u_xlat10_0.w + (-_CutOff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(u_xlat9<0.0);
#else
    u_xlatb9 = u_xlat9<0.0;
#endif
    if((int(u_xlatb9) * int(0xffffffffu))!=0){discard;}
    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
    SV_Target0.xyz = u_xlat1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0;
    u_xlat1.xyz = _BurnedColor.xyz * u_xlat10_0.xyz + (-u_xlat10_0.xyz);
    u_xlat0.xyz = vs_TEXCOORD2.www * u_xlat1.xyz + u_xlat10_0.xyz;
    u_xlat0.w = vs_TEXCOORD3;
    SV_Target1 = u_xlat0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_2 = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb0) ? u_xlat16_2 : 0.0399999991;
    u_xlat0.x = (-vs_TEXCOORD2.w) + 1.0;
    u_xlat0.x = u_xlat0.x * _GrassShininess;
    SV_Target2.w = u_xlat0.x;
    SV_Target2.xy = vec2(0.0399999991, 0.0399999991);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MHY_SHADER_MIDDLE" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	int unity_BaseInstanceID;
uniform 	float _NoiseScale;
uniform 	vec4 _WorldOffsetRange;
uniform 	float _HeightScale;
uniform 	float _Billboard;
uniform 	float _VegetationMoveScale;
uniform 	vec4 _LocalWindsMapSize;
uniform 	vec4 _LargeWindParam;
uniform 	vec4 _GlobalWind;
uniform 	vec4 _LocalWindsMapCameraInfo;
uniform 	float _GrassTipLighting;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BurnedColor;
uniform 	float _RootColorScale;
uniform 	float _RootColorOffset;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _Heightmap;
uniform lowp sampler2D _Noisemap;
uniform lowp sampler2D _LocalWindsMap;
in highp vec4 in_POSITION0;
in highp vec4 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec2 in_TEXCOORD2;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp float vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec3 u_xlat0;
int u_xlati0;
vec3 u_xlat1;
uvec3 u_xlatu1;
vec4 u_xlat2;
uvec3 u_xlatu2;
vec3 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
uvec2 u_xlatu5;
vec4 u_xlat6;
vec3 u_xlat7;
vec2 u_xlat8;
float u_xlat9;
int u_xlati9;
float u_xlat11;
uint u_xlatu11;
int u_xlati18;
float u_xlat20;
vec2 u_xlat23;
float u_xlat27;
bool u_xlatb27;
float u_xlat28;
uint u_xlatu28;
bool u_xlatb28;
float u_xlat29;
bool u_xlatb29;
float u_xlat30;
void main()
{
    u_xlat0.z = 0.0;
    u_xlati9 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati9 = u_xlati9 << 2;
    u_xlat1.xyz = in_TEXCOORD0.yyy * unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_TEXCOORD0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat2.xy = u_xlat1.xz + (-_LocalWindsMapSize.xy);
    u_xlat2.xy = vec2(u_xlat2.x / _LocalWindsMapSize.z, u_xlat2.y / _LocalWindsMapSize.w);
    u_xlat2.xy = u_xlat2.xy + vec2(0.5, 0.5);
    u_xlat2 = textureLod(_LocalWindsMap, u_xlat2.xy, 0.0);
    u_xlat27 = dot(u_xlat2.xy, u_xlat2.xy);
    u_xlat27 = sqrt(u_xlat27);
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(9.99999975e-05>=u_xlat27);
#else
    u_xlatb27 = 9.99999975e-05>=u_xlat27;
#endif
    u_xlat27 = u_xlatb27 ? 1.0 : float(0.0);
    u_xlat3.xy = (-u_xlat2.xy) + vec2(0.5, 0.5);
    u_xlat2.xy = vec2(u_xlat27) * u_xlat3.xy + u_xlat2.xy;
    u_xlat2.xy = u_xlat2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat27 = dot(u_xlat2.xy, u_xlat2.xy);
    u_xlat27 = max(u_xlat27, 0.00100000005);
    u_xlat3.x = inversesqrt(u_xlat27);
    u_xlat3.yz = u_xlat2.xy * u_xlat3.xx;
    u_xlat0.x = u_xlat3.z;
    u_xlat0.xz = (-u_xlat3.xy) * vec2(0.0, 1.0) + u_xlat0.xz;
    u_xlat27 = (-in_TEXCOORD1.x) + unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].x;
    u_xlat28 = u_xlat27 * 3.0;
    u_xlat28 = _Time.y * 3.0 + u_xlat28;
    u_xlat28 = u_xlat28 + 0.5;
    u_xlat28 = fract(u_xlat28);
    u_xlat28 = u_xlat28 * 2.0 + -1.0;
    u_xlat3.x = abs(u_xlat28) * abs(u_xlat28);
    u_xlat28 = -abs(u_xlat28) * 2.0 + 3.0;
    u_xlat28 = u_xlat28 * u_xlat3.x;
    u_xlat3.x = u_xlat2.z * 1.5;
    u_xlat28 = u_xlat28 * u_xlat3.x;
    u_xlat0.xz = u_xlat0.xz * vec2(u_xlat28);
    u_xlat0.xz = u_xlat0.xz * vec2(0.150000006, 0.150000006);
    u_xlat0.xz = u_xlat3.yz * vec2(u_xlat28) + u_xlat0.xz;
    u_xlat0.xz = u_xlat0.xz + u_xlat2.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlatb28 = !!(0.00199999986<u_xlat2.z);
#else
    u_xlatb28 = 0.00199999986<u_xlat2.z;
#endif
    u_xlat20 = (-u_xlat2.w) * _LocalWindsMapCameraInfo.y + _LocalWindsMapCameraInfo.x;
    u_xlat0.xz = (bool(u_xlatb28)) ? u_xlat0.xz : u_xlat2.xy;
    u_xlat2.xy = vec2(_WorldOffsetRange.z + float(2.0), _WorldOffsetRange.w + float(2.0));
    u_xlat3.xy = u_xlat1.xz + (-_WorldOffsetRange.xy);
    u_xlat3.xy = u_xlat3.xy + vec2(1.0, 1.0);
    u_xlat2.xy = u_xlat3.xy / u_xlat2.xy;
    u_xlat28 = textureLod(_Heightmap, u_xlat2.xy, 0.0).x;
    u_xlat2.x = u_xlat28 * _HeightScale + u_xlat1.y;
    u_xlat2.x = (-u_xlat2.x) + u_xlat20;
    u_xlat2.x = u_xlat2.x * 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat2.x = (-u_xlat2.x) + 1.0;
    u_xlat11 = float(floatBitsToUint(unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2]).w);
    u_xlat11 = u_xlat11 * 5.96046448e-08;
    u_xlatu11 = uint(u_xlat11);
    u_xlatu11 = u_xlatu11 & 3u;
    u_xlat11 = float(u_xlatu11);
    u_xlat20 = fract(u_xlat27);
    u_xlat27 = u_xlat27 + unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].y;
    u_xlat3.xy = vec2(u_xlat27) * vec2(22.0, 33.0);
    u_xlat3.xy = fract(u_xlat3.xy);
    u_xlat3.xy = u_xlat3.xy + vec2(-0.5, -0.5);
    u_xlat3.xz = u_xlat3.xy * vec2(0.200000003, 0.200000003);
    u_xlat27 = u_xlat11 + u_xlat20;
    u_xlat27 = u_xlat27 + -0.5;
    u_xlat11 = u_xlat27 * 0.333000004;
    u_xlat4.y = u_xlat27 * 0.333000004 + -1.0;
    u_xlat27 = in_TEXCOORD1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
    u_xlat11 = u_xlat11 * u_xlat27;
    u_xlat2.x = u_xlat11 * u_xlat2.x;
    u_xlat0.xz = u_xlat0.xz * u_xlat2.xx;
    u_xlat0.xz = u_xlat0.xz * vec2(vec2(_VegetationMoveScale, _VegetationMoveScale));
    u_xlat2.x = dot(_GlobalWind.xyz, _GlobalWind.xyz);
    u_xlat2.x = max(u_xlat2.x, 0.00100000005);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat5 = u_xlat2.xxxx * _GlobalWind.xzxz;
    u_xlat2.xz = vec2(u_xlat5.z * _LargeWindParam.z, u_xlat5.w * _LargeWindParam.z);
    u_xlat23.xy = u_xlat1.xz / vec2(_NoiseScale);
    u_xlat5.xy = _LargeWindParam.xx * u_xlat5.xy + u_xlat23.xy;
    u_xlat5.xy = textureLod(_Noisemap, u_xlat5.xy, 0.0).xy;
    u_xlat5.xy = u_xlat5.xy + vec2(-0.5, -0.5);
    u_xlat5.xy = u_xlat5.xy * _LargeWindParam.yy + vec2(0.5, 0.5);
    u_xlat5.xy = vec2(u_xlat11) * u_xlat5.xy;
    u_xlat6.xz = u_xlat5.xy * u_xlat2.xz + u_xlat0.xz;
    u_xlat2.xz = u_xlat2.xz * u_xlat5.xy;
    u_xlat6.y = 0.0;
    u_xlat5.y = hlslcc_mtx4x4unity_MatrixV[0].x;
    u_xlat5.x = hlslcc_mtx4x4unity_MatrixV[2].x;
    u_xlat29 = dot(u_xlat5.xy, u_xlat5.xy);
    u_xlat29 = inversesqrt(u_xlat29);
    u_xlat5.xy = vec2(u_xlat29) * u_xlat5.xy;
    u_xlat7.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat7.xyz = unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat7.xyz;
    u_xlat7.xyz = unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat7.xyz;
    u_xlat7.xyz = u_xlat7.xyz + unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat7.xyz = (-u_xlat1.xyz) + u_xlat7.xyz;
    u_xlat8.x = unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].x;
    u_xlat8.y = unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].x;
    u_xlat29 = dot(u_xlat8.xy, u_xlat8.xy);
    u_xlat29 = inversesqrt(u_xlat29);
    u_xlat23.xy = vec2(u_xlat29) * u_xlat8.xy;
    u_xlat29 = u_xlat23.y * u_xlat7.z;
    u_xlat29 = u_xlat7.x * u_xlat23.x + (-u_xlat29);
    u_xlat30 = dot(u_xlat7.zx, u_xlat23.xy);
    u_xlat23.xy = u_xlat5.xy * vec2(u_xlat30);
    u_xlat30 = u_xlat29 * u_xlat5.y + (-u_xlat23.x);
    u_xlat29 = u_xlat29 * u_xlat5.x + u_xlat23.y;
    u_xlat29 = u_xlat7.z + u_xlat29;
    u_xlat7.z = (-u_xlat29) * _Billboard + u_xlat7.z;
    u_xlat29 = u_xlat7.x + u_xlat30;
    u_xlat7.x = (-u_xlat29) * _Billboard + u_xlat7.x;
    u_xlat5.xyz = u_xlat7.xyz * vec3(0.100000001, 1.0, 0.100000001) + u_xlat6.xyz;
    u_xlat29 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat29 = max(u_xlat29, 0.00100000005);
    u_xlat29 = inversesqrt(u_xlat29);
    u_xlat5.xyz = vec3(u_xlat29) * u_xlat5.xyz;
    u_xlat29 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat29 = sqrt(u_xlat29);
    u_xlat6.xyz = u_xlat7.xyz * vec3(0.100000001, 1.0, 0.100000001);
    u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat29) + (-u_xlat6.xyz);
    u_xlat6.xyz = u_xlat1.xyz + u_xlat7.xyz;
    u_xlat6.w = u_xlat28 * _HeightScale + u_xlat6.y;
    u_xlat1.xyz = u_xlat5.xyz + u_xlat6.xwz;
    u_xlatu5.xy = uvec2(65280u, 255u) & floatBitsToUint(unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1]).ww;
    u_xlat5.xy = vec2(u_xlatu5.xy);
    u_xlat28 = u_xlat5.x * 0.00390625;
    u_xlat5.z = u_xlat5.y + -127.0;
    u_xlatu28 = uint(u_xlat28);
    u_xlat28 = float(u_xlatu28);
    u_xlat5.x = u_xlat28 + -127.0;
    u_xlat6.xy = u_xlat5.xz * vec2(0.00787401572, 0.00787401572);
    u_xlat6.xy = u_xlat6.xy * u_xlat6.xy;
    u_xlat28 = u_xlat6.y + u_xlat6.x;
    u_xlat28 = (-u_xlat28) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb29 = !!(0.0<u_xlat28);
#else
    u_xlatb29 = 0.0<u_xlat28;
#endif
    u_xlat28 = sqrt(u_xlat28);
    u_xlat5.y = u_xlatb29 ? u_xlat28 : float(0.0);
    u_xlat6.xyz = u_xlat5.xyz * u_xlat7.yyy;
    u_xlat6.xyz = vec3(u_xlat11) * u_xlat6.xyz;
    u_xlat28 = max(u_xlat11, 9.99999972e-10);
    u_xlat1.xyz = u_xlat6.xyz * vec3(0.00393700786, 0.0, 0.00393700786) + u_xlat1.xyz;
    u_xlat4.xz = u_xlat4.yy * (-u_xlat4.yy);
    u_xlat1.xyz = u_xlat4.xyz * u_xlat7.xyz + u_xlat1.xyz;
    u_xlat4.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat6 = u_xlat4.yyyy * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat6 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat4.xxxx + u_xlat6;
    u_xlat4 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat4.zzzz + u_xlat6;
    gl_Position = u_xlat4 + hlslcc_mtx4x4unity_MatrixVPZero[3];
    u_xlat3.y = 0.0;
    vs_TEXCOORD0.xyz = u_xlat5.xyz * vec3(0.00787401572, 1.0, 0.00787401572) + u_xlat3.xyz;
    vs_TEXCOORD0.w = 0.0;
    u_xlat0.xz = u_xlat0.zx / vec2(u_xlat28);
    u_xlat2.xy = u_xlat2.zx / vec2(u_xlat28);
    u_xlat2.yz = u_xlat0.xz + u_xlat2.xy;
    u_xlat2.x = 0.0;
    u_xlat2.xyz = u_xlat5.yzx * vec3(1.0, 0.00787401572, 0.00787401572) + u_xlat2.xyz;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat3.xyz = in_NORMAL0.yyy * unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_NORMAL0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_NORMAL0.zzz + u_xlat3.xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
    u_xlat3.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
    u_xlat2.xyz = u_xlat3.zxy * u_xlat2.yzx + (-u_xlat4.xyz);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
    { bool cond = 0.0<u_xlat0.x; u_xlati18 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati18 = int((0.0<u_xlat0.x) ? 0xFFFFFFFFu : uint(0u));
#endif
#ifdef UNITY_ADRENO_ES3
    { bool cond = u_xlat0.x<0.0; u_xlati0 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati0 = int((u_xlat0.x<0.0) ? 0xFFFFFFFFu : uint(0u));
#endif
    u_xlati0 = (-u_xlati18) + u_xlati0;
    u_xlat0.x = float(u_xlati0);
    vs_TEXCOORD1.xyz = u_xlat0.xxx * u_xlat2.xyz;
    vs_TEXCOORD1.w = 0.0;
    u_xlatu1.xyz = uvec3(16711680u, 65280u, 255u) & floatBitsToUint(unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2]).www;
    u_xlat1.xyz = vec3(u_xlatu1.xyz);
    u_xlatu2.xyz = uvec3(16711680u, 65280u, 255u) & floatBitsToUint(unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3]).www;
    u_xlat0.x = max(1.0, unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].w);
    u_xlat0.x = min(u_xlat0.x, 2.0);
    u_xlat0.x = u_xlat0.x + -1.0;
    u_xlat2.xyz = vec3(u_xlatu2.xyz);
    u_xlat2.xyz = u_xlat2.xyz * vec3(5.9838392e-08, 1.53186284e-05, 0.00392156886);
    u_xlat1.xyz = u_xlat1.xyz * vec3(5.9838392e-08, 1.53186284e-05, 0.00392156886) + (-u_xlat2.xyz);
    u_xlat9 = u_xlat27 / _RootColorScale;
    u_xlat9 = u_xlat9 + _RootColorOffset;
#ifdef UNITY_ADRENO_ES3
    u_xlat9 = min(max(u_xlat9, 0.0), 1.0);
#else
    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz + u_xlat2.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _BurnedColor.xyz;
    u_xlat1.xyz = u_xlat0.xxx * u_xlat2.xyz + u_xlat1.xyz;
    vs_TEXCOORD2.w = u_xlat0.x;
    u_xlat0.x = u_xlat27 + -0.600000024;
    vs_TEXCOORD3 = u_xlat27;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = _GrassTipLighting * u_xlat0.x + 1.0;
    vs_TEXCOORD2.xyz = u_xlat0.xxx * u_xlat1.xyz;
    vs_TEXCOORD4.xy = in_TEXCOORD2.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	float _GrassShininess;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	float _CutOff;
uniform 	vec4 _BurnedColor;
uniform lowp sampler2D _MainTex;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp float vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec4 u_xlat0;
lowp vec4 u_xlat10_0;
bool u_xlatb0;
vec3 u_xlat1;
mediump float u_xlat16_2;
float u_xlat9;
bool u_xlatb9;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD4.xy);
    u_xlat9 = u_xlat10_0.w + (-_CutOff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(u_xlat9<0.0);
#else
    u_xlatb9 = u_xlat9<0.0;
#endif
    if((int(u_xlatb9) * int(0xffffffffu))!=0){discard;}
    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
    SV_Target0.xyz = u_xlat1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0;
    u_xlat1.xyz = _BurnedColor.xyz * u_xlat10_0.xyz + (-u_xlat10_0.xyz);
    u_xlat0.xyz = vs_TEXCOORD2.www * u_xlat1.xyz + u_xlat10_0.xyz;
    u_xlat0.w = vs_TEXCOORD3;
    SV_Target1 = u_xlat0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_2 = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb0) ? u_xlat16_2 : 0.0399999991;
    u_xlat0.x = (-vs_TEXCOORD2.w) + 1.0;
    u_xlat0.x = u_xlat0.x * _GrassShininess;
    SV_Target2.w = u_xlat0.x;
    SV_Target2.xy = vec2(0.0399999991, 0.0399999991);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "MHY_SHADER_MIDDLE" "DITHER_FADE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	float _NoiseScale;
uniform 	vec4 _WorldOffsetRange;
uniform 	float _HeightScale;
uniform 	float _Billboard;
uniform 	float _VegetationMoveScale;
uniform 	vec4 _LocalWindsMapSize;
uniform 	vec4 _LargeWindParam;
uniform 	vec4 _GlobalWind;
uniform 	vec4 _LocalWindsMapCameraInfo;
uniform 	float _GrassTipLighting;
uniform 	vec4 _MainTex_ST;
uniform 	float _RootColorScale;
uniform 	float _RootColorOffset;
uniform highp sampler2D _Heightmap;
uniform lowp sampler2D _Noisemap;
uniform lowp sampler2D _LocalWindsMap;
in highp vec4 in_POSITION0;
in highp vec4 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec2 in_TEXCOORD2;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp float vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec3 u_xlat0;
vec3 u_xlat1;
int u_xlati1;
vec4 u_xlat2;
bool u_xlatb2;
vec3 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
vec4 u_xlat6;
vec3 u_xlat7;
vec3 u_xlat8;
bool u_xlatb8;
vec2 u_xlat10;
vec2 u_xlat16;
vec2 u_xlat21;
float u_xlat24;
int u_xlati24;
float u_xlat25;
float u_xlat26;
void main()
{
    u_xlat0.z = 0.0;
    u_xlat1.xyz = in_TEXCOORD0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[2].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TEXCOORD0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat8.xz = u_xlat1.xz + (-_LocalWindsMapSize.xy);
    u_xlat8.xz = vec2(u_xlat8.x / _LocalWindsMapSize.z, u_xlat8.z / _LocalWindsMapSize.w);
    u_xlat8.xz = u_xlat8.xz + vec2(0.5, 0.5);
    u_xlat2 = textureLod(_LocalWindsMap, u_xlat8.xz, 0.0);
    u_xlat8.x = dot(u_xlat2.xy, u_xlat2.xy);
    u_xlat8.x = sqrt(u_xlat8.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(9.99999975e-05>=u_xlat8.x);
#else
    u_xlatb8 = 9.99999975e-05>=u_xlat8.x;
#endif
    u_xlat8.x = u_xlatb8 ? 1.0 : float(0.0);
    u_xlat3.xy = (-u_xlat2.xy) + vec2(0.5, 0.5);
    u_xlat8.xz = u_xlat8.xx * u_xlat3.xy + u_xlat2.xy;
    u_xlat8.xz = u_xlat8.xz * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat25 = dot(u_xlat8.xz, u_xlat8.xz);
    u_xlat25 = max(u_xlat25, 0.00100000005);
    u_xlat3.x = inversesqrt(u_xlat25);
    u_xlat3.yz = u_xlat8.xz * u_xlat3.xx;
    u_xlat0.x = u_xlat3.z;
    u_xlat0.xz = (-u_xlat3.xy) * vec2(0.0, 1.0) + u_xlat0.xz;
    u_xlat25 = (-in_TEXCOORD1.x) + hlslcc_mtx4x4unity_ObjectToWorld[1].x;
    u_xlat2.x = u_xlat25 * 3.0;
    u_xlat2.x = _Time.y * 3.0 + u_xlat2.x;
    u_xlat2.x = u_xlat2.x + 0.5;
    u_xlat2.x = fract(u_xlat2.x);
    u_xlat2.x = u_xlat2.x * 2.0 + -1.0;
    u_xlat10.x = abs(u_xlat2.x) * abs(u_xlat2.x);
    u_xlat2.x = -abs(u_xlat2.x) * 2.0 + 3.0;
    u_xlat2.x = u_xlat2.x * u_xlat10.x;
    u_xlat10.x = u_xlat2.z * 1.5;
    u_xlat2.x = u_xlat10.x * u_xlat2.x;
    u_xlat0.xz = u_xlat0.xz * u_xlat2.xx;
    u_xlat0.xz = u_xlat0.xz * vec2(0.150000006, 0.150000006);
    u_xlat0.xz = u_xlat3.yz * u_xlat2.xx + u_xlat0.xz;
    u_xlat0.xz = u_xlat0.xz + u_xlat8.xz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(0.00199999986<u_xlat2.z);
#else
    u_xlatb2 = 0.00199999986<u_xlat2.z;
#endif
    u_xlat10.x = (-u_xlat2.w) * _LocalWindsMapCameraInfo.y + _LocalWindsMapCameraInfo.x;
    u_xlat0.xy = (bool(u_xlatb2)) ? u_xlat0.xz : u_xlat8.xz;
    u_xlat16.xy = vec2(_WorldOffsetRange.z + float(2.0), _WorldOffsetRange.w + float(2.0));
    u_xlat2.xz = u_xlat1.xz + (-_WorldOffsetRange.xy);
    u_xlat2.xz = u_xlat2.xz + vec2(1.0, 1.0);
    u_xlat16.xy = u_xlat2.xz / u_xlat16.xy;
    u_xlat16.x = textureLod(_Heightmap, u_xlat16.xy, 0.0).x;
    u_xlat24 = u_xlat16.x * _HeightScale + u_xlat1.y;
    u_xlat24 = (-u_xlat24) + u_xlat10.x;
    u_xlat24 = u_xlat24 * 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat24 = (-u_xlat24) + 1.0;
    u_xlat2.x = fract(u_xlat25);
    u_xlat25 = u_xlat25 + hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat10.xy = vec2(u_xlat25) * vec2(22.0, 33.0);
    u_xlat10.xy = fract(u_xlat10.xy);
    u_xlat10.xy = u_xlat10.xy + vec2(-0.5, -0.5);
    u_xlat3.xz = u_xlat10.xy * vec2(0.200000003, 0.200000003);
    u_xlat25 = u_xlat2.x + -0.5;
    u_xlat2.x = u_xlat25 * 0.333000004;
    u_xlat4.y = u_xlat25 * 0.333000004 + -1.0;
    u_xlat25 = in_TEXCOORD1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat25 = min(max(u_xlat25, 0.0), 1.0);
#else
    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
#endif
    u_xlat2.x = u_xlat2.x * u_xlat25;
    u_xlat24 = u_xlat24 * u_xlat2.x;
    u_xlat0.xy = vec2(u_xlat24) * u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(vec2(_VegetationMoveScale, _VegetationMoveScale));
    u_xlat24 = dot(_GlobalWind.xyz, _GlobalWind.xyz);
    u_xlat24 = max(u_xlat24, 0.00100000005);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat5 = vec4(u_xlat24) * _GlobalWind.xzxz;
    u_xlat10.xy = vec2(u_xlat5.z * _LargeWindParam.z, u_xlat5.w * _LargeWindParam.z);
    u_xlat21.xy = u_xlat1.xz / vec2(_NoiseScale);
    u_xlat5.xy = _LargeWindParam.xx * u_xlat5.xy + u_xlat21.xy;
    u_xlat5.xy = textureLod(_Noisemap, u_xlat5.xy, 0.0).xy;
    u_xlat5.xy = u_xlat5.xy + vec2(-0.5, -0.5);
    u_xlat5.xy = u_xlat5.xy * _LargeWindParam.yy + vec2(0.5, 0.5);
    u_xlat5.xy = u_xlat2.xx * u_xlat5.xy;
    u_xlat6.xz = u_xlat5.xy * u_xlat10.xy + u_xlat0.xy;
    u_xlat10.xy = u_xlat10.xy * u_xlat5.xy;
    u_xlat6.y = 0.0;
    u_xlat5.y = hlslcc_mtx4x4unity_MatrixV[0].x;
    u_xlat5.x = hlslcc_mtx4x4unity_MatrixV[2].x;
    u_xlat24 = dot(u_xlat5.xy, u_xlat5.xy);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat5.xy = vec2(u_xlat24) * u_xlat5.xy;
    u_xlat7.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;
    u_xlat7.y = hlslcc_mtx4x4unity_ObjectToWorld[2].x;
    u_xlat24 = dot(u_xlat7.xy, u_xlat7.xy);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat21.xy = vec2(u_xlat24) * u_xlat7.xy;
    u_xlat7.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat7.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat7.xyz;
    u_xlat7.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat7.xyz;
    u_xlat7.xyz = u_xlat7.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat7.xyz = (-u_xlat1.xyz) + u_xlat7.xyz;
    u_xlat24 = u_xlat21.y * u_xlat7.z;
    u_xlat24 = u_xlat7.x * u_xlat21.x + (-u_xlat24);
    u_xlat26 = dot(u_xlat7.zx, u_xlat21.xy);
    u_xlat21.xy = u_xlat5.xy * vec2(u_xlat26);
    u_xlat26 = u_xlat24 * u_xlat5.y + (-u_xlat21.x);
    u_xlat24 = u_xlat24 * u_xlat5.x + u_xlat21.y;
    u_xlat24 = u_xlat7.z + u_xlat24;
    u_xlat7.z = (-u_xlat24) * _Billboard + u_xlat7.z;
    u_xlat24 = u_xlat7.x + u_xlat26;
    u_xlat7.x = (-u_xlat24) * _Billboard + u_xlat7.x;
    u_xlat24 = u_xlat2.x * u_xlat7.y;
    u_xlat2.x = max(u_xlat2.x, 9.99999972e-10);
    u_xlat5.xyz = u_xlat7.xyz * vec3(0.100000001, 1.0, 0.100000001) + u_xlat6.xyz;
    u_xlat26 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat26 = max(u_xlat26, 0.00100000005);
    u_xlat26 = inversesqrt(u_xlat26);
    u_xlat5.xyz = vec3(u_xlat26) * u_xlat5.xyz;
    u_xlat26 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat26 = sqrt(u_xlat26);
    u_xlat6.xyz = u_xlat7.xyz * vec3(0.100000001, 1.0, 0.100000001);
    u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat26) + (-u_xlat6.xyz);
    u_xlat6.xyz = u_xlat1.xyz + u_xlat7.xyz;
    u_xlat6.w = u_xlat16.x * _HeightScale + u_xlat6.y;
    u_xlat1.xyz = u_xlat5.xyz + u_xlat6.xwz;
    u_xlat1.xyz = vec3(u_xlat24) * vec3(-0.5, 0.0, -0.5) + u_xlat1.xyz;
    u_xlat4.xz = u_xlat4.yy * (-u_xlat4.yy);
    u_xlat1.xyz = u_xlat4.xyz * u_xlat7.xyz + u_xlat1.xyz;
    u_xlat4.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat5 = u_xlat4.yyyy * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat5 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat4.xxxx + u_xlat5;
    u_xlat4 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat4.zzzz + u_xlat5;
    gl_Position = u_xlat4 + hlslcc_mtx4x4unity_MatrixVPZero[3];
    u_xlat3.y = 0.0;
    vs_TEXCOORD0.xyz = u_xlat3.xyz + vec3(-1.0, 0.0, -1.0);
    vs_TEXCOORD0.w = 0.0;
    u_xlat0.xy = u_xlat0.yx / u_xlat2.xx;
    u_xlat16.xy = u_xlat10.yx / u_xlat2.xx;
    u_xlat0.xy = u_xlat0.xy + u_xlat16.xy;
    u_xlat0.yz = u_xlat0.xy + vec2(-1.0, -1.0);
    u_xlat24 = dot(u_xlat0.yz, u_xlat0.yz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat0.x = 0.0;
    u_xlat0.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    u_xlat2.xyz = in_NORMAL0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_NORMAL0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_NORMAL0.zzz + u_xlat2.xyz;
    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat0.xyz * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat0.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat0.xyz * u_xlat2.xyz;
    u_xlat0.xyz = u_xlat2.zxy * u_xlat0.yzx + (-u_xlat3.xyz);
    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
    u_xlat24 = dot(u_xlat1.xyz, u_xlat0.xyz);
#ifdef UNITY_ADRENO_ES3
    { bool cond = 0.0<u_xlat24; u_xlati1 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati1 = int((0.0<u_xlat24) ? 0xFFFFFFFFu : uint(0u));
#endif
#ifdef UNITY_ADRENO_ES3
    { bool cond = u_xlat24<0.0; u_xlati24 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati24 = int((u_xlat24<0.0) ? 0xFFFFFFFFu : uint(0u));
#endif
    u_xlati24 = (-u_xlati1) + u_xlati24;
    u_xlat24 = float(u_xlati24);
    vs_TEXCOORD1.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    vs_TEXCOORD1.w = 0.0;
    u_xlat0.x = u_xlat25 / _RootColorScale;
    u_xlat0.x = u_xlat0.x + _RootColorOffset;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xxx * vec3(-0.501960814, 0.0, 0.0) + vec3(0.501960814, 0.0, 0.0);
    u_xlat24 = u_xlat25 + -0.600000024;
    vs_TEXCOORD3 = u_xlat25;
    u_xlat24 = max(u_xlat24, 0.0);
    u_xlat24 = _GrassTipLighting * u_xlat24 + 1.0;
    vs_TEXCOORD2.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    vs_TEXCOORD2.w = 0.0;
    vs_TEXCOORD4.xy = in_TEXCOORD2.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	float _GrassShininess;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	float _CutOff;
uniform 	vec4 _BurnedColor;
uniform lowp sampler2D _MainTex;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp float vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec4 u_xlat0;
lowp vec4 u_xlat10_0;
bool u_xlatb0;
vec3 u_xlat1;
mediump float u_xlat16_2;
float u_xlat9;
bool u_xlatb9;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD4.xy);
    u_xlat9 = u_xlat10_0.w + (-_CutOff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(u_xlat9<0.0);
#else
    u_xlatb9 = u_xlat9<0.0;
#endif
    if((int(u_xlatb9) * int(0xffffffffu))!=0){discard;}
    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
    SV_Target0.xyz = u_xlat1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0;
    u_xlat1.xyz = _BurnedColor.xyz * u_xlat10_0.xyz + (-u_xlat10_0.xyz);
    u_xlat0.xyz = vs_TEXCOORD2.www * u_xlat1.xyz + u_xlat10_0.xyz;
    u_xlat0.w = vs_TEXCOORD3;
    SV_Target1 = u_xlat0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_2 = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb0) ? u_xlat16_2 : 0.0399999991;
    u_xlat0.x = (-vs_TEXCOORD2.w) + 1.0;
    u_xlat0.x = u_xlat0.x * _GrassShininess;
    SV_Target2.w = u_xlat0.x;
    SV_Target2.xy = vec2(0.0399999991, 0.0399999991);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MHY_SHADER_MIDDLE" "DITHER_FADE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	int unity_BaseInstanceID;
uniform 	float _NoiseScale;
uniform 	vec4 _WorldOffsetRange;
uniform 	float _HeightScale;
uniform 	float _Billboard;
uniform 	float _VegetationMoveScale;
uniform 	vec4 _LocalWindsMapSize;
uniform 	vec4 _LargeWindParam;
uniform 	vec4 _GlobalWind;
uniform 	vec4 _LocalWindsMapCameraInfo;
uniform 	float _GrassTipLighting;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BurnedColor;
uniform 	float _RootColorScale;
uniform 	float _RootColorOffset;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _Heightmap;
uniform lowp sampler2D _Noisemap;
uniform lowp sampler2D _LocalWindsMap;
in highp vec4 in_POSITION0;
in highp vec4 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec2 in_TEXCOORD2;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp float vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec3 u_xlat0;
int u_xlati0;
vec3 u_xlat1;
uvec3 u_xlatu1;
vec4 u_xlat2;
uvec3 u_xlatu2;
vec3 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
uvec2 u_xlatu5;
vec4 u_xlat6;
vec3 u_xlat7;
vec2 u_xlat8;
float u_xlat9;
int u_xlati9;
float u_xlat11;
uint u_xlatu11;
int u_xlati18;
float u_xlat20;
vec2 u_xlat23;
float u_xlat27;
bool u_xlatb27;
float u_xlat28;
uint u_xlatu28;
bool u_xlatb28;
float u_xlat29;
bool u_xlatb29;
float u_xlat30;
void main()
{
    u_xlat0.z = 0.0;
    u_xlati9 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati9 = u_xlati9 << 2;
    u_xlat1.xyz = in_TEXCOORD0.yyy * unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_TEXCOORD0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat2.xy = u_xlat1.xz + (-_LocalWindsMapSize.xy);
    u_xlat2.xy = vec2(u_xlat2.x / _LocalWindsMapSize.z, u_xlat2.y / _LocalWindsMapSize.w);
    u_xlat2.xy = u_xlat2.xy + vec2(0.5, 0.5);
    u_xlat2 = textureLod(_LocalWindsMap, u_xlat2.xy, 0.0);
    u_xlat27 = dot(u_xlat2.xy, u_xlat2.xy);
    u_xlat27 = sqrt(u_xlat27);
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(9.99999975e-05>=u_xlat27);
#else
    u_xlatb27 = 9.99999975e-05>=u_xlat27;
#endif
    u_xlat27 = u_xlatb27 ? 1.0 : float(0.0);
    u_xlat3.xy = (-u_xlat2.xy) + vec2(0.5, 0.5);
    u_xlat2.xy = vec2(u_xlat27) * u_xlat3.xy + u_xlat2.xy;
    u_xlat2.xy = u_xlat2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat27 = dot(u_xlat2.xy, u_xlat2.xy);
    u_xlat27 = max(u_xlat27, 0.00100000005);
    u_xlat3.x = inversesqrt(u_xlat27);
    u_xlat3.yz = u_xlat2.xy * u_xlat3.xx;
    u_xlat0.x = u_xlat3.z;
    u_xlat0.xz = (-u_xlat3.xy) * vec2(0.0, 1.0) + u_xlat0.xz;
    u_xlat27 = (-in_TEXCOORD1.x) + unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].x;
    u_xlat28 = u_xlat27 * 3.0;
    u_xlat28 = _Time.y * 3.0 + u_xlat28;
    u_xlat28 = u_xlat28 + 0.5;
    u_xlat28 = fract(u_xlat28);
    u_xlat28 = u_xlat28 * 2.0 + -1.0;
    u_xlat3.x = abs(u_xlat28) * abs(u_xlat28);
    u_xlat28 = -abs(u_xlat28) * 2.0 + 3.0;
    u_xlat28 = u_xlat28 * u_xlat3.x;
    u_xlat3.x = u_xlat2.z * 1.5;
    u_xlat28 = u_xlat28 * u_xlat3.x;
    u_xlat0.xz = u_xlat0.xz * vec2(u_xlat28);
    u_xlat0.xz = u_xlat0.xz * vec2(0.150000006, 0.150000006);
    u_xlat0.xz = u_xlat3.yz * vec2(u_xlat28) + u_xlat0.xz;
    u_xlat0.xz = u_xlat0.xz + u_xlat2.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlatb28 = !!(0.00199999986<u_xlat2.z);
#else
    u_xlatb28 = 0.00199999986<u_xlat2.z;
#endif
    u_xlat20 = (-u_xlat2.w) * _LocalWindsMapCameraInfo.y + _LocalWindsMapCameraInfo.x;
    u_xlat0.xz = (bool(u_xlatb28)) ? u_xlat0.xz : u_xlat2.xy;
    u_xlat2.xy = vec2(_WorldOffsetRange.z + float(2.0), _WorldOffsetRange.w + float(2.0));
    u_xlat3.xy = u_xlat1.xz + (-_WorldOffsetRange.xy);
    u_xlat3.xy = u_xlat3.xy + vec2(1.0, 1.0);
    u_xlat2.xy = u_xlat3.xy / u_xlat2.xy;
    u_xlat28 = textureLod(_Heightmap, u_xlat2.xy, 0.0).x;
    u_xlat2.x = u_xlat28 * _HeightScale + u_xlat1.y;
    u_xlat2.x = (-u_xlat2.x) + u_xlat20;
    u_xlat2.x = u_xlat2.x * 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat2.x = (-u_xlat2.x) + 1.0;
    u_xlat11 = float(floatBitsToUint(unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2]).w);
    u_xlat11 = u_xlat11 * 5.96046448e-08;
    u_xlatu11 = uint(u_xlat11);
    u_xlatu11 = u_xlatu11 & 3u;
    u_xlat11 = float(u_xlatu11);
    u_xlat20 = fract(u_xlat27);
    u_xlat27 = u_xlat27 + unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].y;
    u_xlat3.xy = vec2(u_xlat27) * vec2(22.0, 33.0);
    u_xlat3.xy = fract(u_xlat3.xy);
    u_xlat3.xy = u_xlat3.xy + vec2(-0.5, -0.5);
    u_xlat3.xz = u_xlat3.xy * vec2(0.200000003, 0.200000003);
    u_xlat27 = u_xlat11 + u_xlat20;
    u_xlat27 = u_xlat27 + -0.5;
    u_xlat11 = u_xlat27 * 0.333000004;
    u_xlat4.y = u_xlat27 * 0.333000004 + -1.0;
    u_xlat27 = in_TEXCOORD1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
    u_xlat11 = u_xlat11 * u_xlat27;
    u_xlat2.x = u_xlat11 * u_xlat2.x;
    u_xlat0.xz = u_xlat0.xz * u_xlat2.xx;
    u_xlat0.xz = u_xlat0.xz * vec2(vec2(_VegetationMoveScale, _VegetationMoveScale));
    u_xlat2.x = dot(_GlobalWind.xyz, _GlobalWind.xyz);
    u_xlat2.x = max(u_xlat2.x, 0.00100000005);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat5 = u_xlat2.xxxx * _GlobalWind.xzxz;
    u_xlat2.xz = vec2(u_xlat5.z * _LargeWindParam.z, u_xlat5.w * _LargeWindParam.z);
    u_xlat23.xy = u_xlat1.xz / vec2(_NoiseScale);
    u_xlat5.xy = _LargeWindParam.xx * u_xlat5.xy + u_xlat23.xy;
    u_xlat5.xy = textureLod(_Noisemap, u_xlat5.xy, 0.0).xy;
    u_xlat5.xy = u_xlat5.xy + vec2(-0.5, -0.5);
    u_xlat5.xy = u_xlat5.xy * _LargeWindParam.yy + vec2(0.5, 0.5);
    u_xlat5.xy = vec2(u_xlat11) * u_xlat5.xy;
    u_xlat6.xz = u_xlat5.xy * u_xlat2.xz + u_xlat0.xz;
    u_xlat2.xz = u_xlat2.xz * u_xlat5.xy;
    u_xlat6.y = 0.0;
    u_xlat5.y = hlslcc_mtx4x4unity_MatrixV[0].x;
    u_xlat5.x = hlslcc_mtx4x4unity_MatrixV[2].x;
    u_xlat29 = dot(u_xlat5.xy, u_xlat5.xy);
    u_xlat29 = inversesqrt(u_xlat29);
    u_xlat5.xy = vec2(u_xlat29) * u_xlat5.xy;
    u_xlat7.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat7.xyz = unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat7.xyz;
    u_xlat7.xyz = unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat7.xyz;
    u_xlat7.xyz = u_xlat7.xyz + unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat7.xyz = (-u_xlat1.xyz) + u_xlat7.xyz;
    u_xlat8.x = unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].x;
    u_xlat8.y = unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].x;
    u_xlat29 = dot(u_xlat8.xy, u_xlat8.xy);
    u_xlat29 = inversesqrt(u_xlat29);
    u_xlat23.xy = vec2(u_xlat29) * u_xlat8.xy;
    u_xlat29 = u_xlat23.y * u_xlat7.z;
    u_xlat29 = u_xlat7.x * u_xlat23.x + (-u_xlat29);
    u_xlat30 = dot(u_xlat7.zx, u_xlat23.xy);
    u_xlat23.xy = u_xlat5.xy * vec2(u_xlat30);
    u_xlat30 = u_xlat29 * u_xlat5.y + (-u_xlat23.x);
    u_xlat29 = u_xlat29 * u_xlat5.x + u_xlat23.y;
    u_xlat29 = u_xlat7.z + u_xlat29;
    u_xlat7.z = (-u_xlat29) * _Billboard + u_xlat7.z;
    u_xlat29 = u_xlat7.x + u_xlat30;
    u_xlat7.x = (-u_xlat29) * _Billboard + u_xlat7.x;
    u_xlat5.xyz = u_xlat7.xyz * vec3(0.100000001, 1.0, 0.100000001) + u_xlat6.xyz;
    u_xlat29 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat29 = max(u_xlat29, 0.00100000005);
    u_xlat29 = inversesqrt(u_xlat29);
    u_xlat5.xyz = vec3(u_xlat29) * u_xlat5.xyz;
    u_xlat29 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat29 = sqrt(u_xlat29);
    u_xlat6.xyz = u_xlat7.xyz * vec3(0.100000001, 1.0, 0.100000001);
    u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat29) + (-u_xlat6.xyz);
    u_xlat6.xyz = u_xlat1.xyz + u_xlat7.xyz;
    u_xlat6.w = u_xlat28 * _HeightScale + u_xlat6.y;
    u_xlat1.xyz = u_xlat5.xyz + u_xlat6.xwz;
    u_xlatu5.xy = uvec2(65280u, 255u) & floatBitsToUint(unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1]).ww;
    u_xlat5.xy = vec2(u_xlatu5.xy);
    u_xlat28 = u_xlat5.x * 0.00390625;
    u_xlat5.z = u_xlat5.y + -127.0;
    u_xlatu28 = uint(u_xlat28);
    u_xlat28 = float(u_xlatu28);
    u_xlat5.x = u_xlat28 + -127.0;
    u_xlat6.xy = u_xlat5.xz * vec2(0.00787401572, 0.00787401572);
    u_xlat6.xy = u_xlat6.xy * u_xlat6.xy;
    u_xlat28 = u_xlat6.y + u_xlat6.x;
    u_xlat28 = (-u_xlat28) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb29 = !!(0.0<u_xlat28);
#else
    u_xlatb29 = 0.0<u_xlat28;
#endif
    u_xlat28 = sqrt(u_xlat28);
    u_xlat5.y = u_xlatb29 ? u_xlat28 : float(0.0);
    u_xlat6.xyz = u_xlat5.xyz * u_xlat7.yyy;
    u_xlat6.xyz = vec3(u_xlat11) * u_xlat6.xyz;
    u_xlat28 = max(u_xlat11, 9.99999972e-10);
    u_xlat1.xyz = u_xlat6.xyz * vec3(0.00393700786, 0.0, 0.00393700786) + u_xlat1.xyz;
    u_xlat4.xz = u_xlat4.yy * (-u_xlat4.yy);
    u_xlat1.xyz = u_xlat4.xyz * u_xlat7.xyz + u_xlat1.xyz;
    u_xlat4.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat6 = u_xlat4.yyyy * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat6 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat4.xxxx + u_xlat6;
    u_xlat4 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat4.zzzz + u_xlat6;
    gl_Position = u_xlat4 + hlslcc_mtx4x4unity_MatrixVPZero[3];
    u_xlat3.y = 0.0;
    vs_TEXCOORD0.xyz = u_xlat5.xyz * vec3(0.00787401572, 1.0, 0.00787401572) + u_xlat3.xyz;
    vs_TEXCOORD0.w = 0.0;
    u_xlat0.xz = u_xlat0.zx / vec2(u_xlat28);
    u_xlat2.xy = u_xlat2.zx / vec2(u_xlat28);
    u_xlat2.yz = u_xlat0.xz + u_xlat2.xy;
    u_xlat2.x = 0.0;
    u_xlat2.xyz = u_xlat5.yzx * vec3(1.0, 0.00787401572, 0.00787401572) + u_xlat2.xyz;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat3.xyz = in_NORMAL0.yyy * unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_NORMAL0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_NORMAL0.zzz + u_xlat3.xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
    u_xlat3.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
    u_xlat2.xyz = u_xlat3.zxy * u_xlat2.yzx + (-u_xlat4.xyz);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
    { bool cond = 0.0<u_xlat0.x; u_xlati18 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati18 = int((0.0<u_xlat0.x) ? 0xFFFFFFFFu : uint(0u));
#endif
#ifdef UNITY_ADRENO_ES3
    { bool cond = u_xlat0.x<0.0; u_xlati0 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati0 = int((u_xlat0.x<0.0) ? 0xFFFFFFFFu : uint(0u));
#endif
    u_xlati0 = (-u_xlati18) + u_xlati0;
    u_xlat0.x = float(u_xlati0);
    vs_TEXCOORD1.xyz = u_xlat0.xxx * u_xlat2.xyz;
    vs_TEXCOORD1.w = 0.0;
    u_xlatu1.xyz = uvec3(16711680u, 65280u, 255u) & floatBitsToUint(unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2]).www;
    u_xlat1.xyz = vec3(u_xlatu1.xyz);
    u_xlatu2.xyz = uvec3(16711680u, 65280u, 255u) & floatBitsToUint(unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3]).www;
    u_xlat0.x = max(1.0, unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].w);
    u_xlat0.x = min(u_xlat0.x, 2.0);
    u_xlat0.x = u_xlat0.x + -1.0;
    u_xlat2.xyz = vec3(u_xlatu2.xyz);
    u_xlat2.xyz = u_xlat2.xyz * vec3(5.9838392e-08, 1.53186284e-05, 0.00392156886);
    u_xlat1.xyz = u_xlat1.xyz * vec3(5.9838392e-08, 1.53186284e-05, 0.00392156886) + (-u_xlat2.xyz);
    u_xlat9 = u_xlat27 / _RootColorScale;
    u_xlat9 = u_xlat9 + _RootColorOffset;
#ifdef UNITY_ADRENO_ES3
    u_xlat9 = min(max(u_xlat9, 0.0), 1.0);
#else
    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz + u_xlat2.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _BurnedColor.xyz;
    u_xlat1.xyz = u_xlat0.xxx * u_xlat2.xyz + u_xlat1.xyz;
    vs_TEXCOORD2.w = u_xlat0.x;
    u_xlat0.x = u_xlat27 + -0.600000024;
    vs_TEXCOORD3 = u_xlat27;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = _GrassTipLighting * u_xlat0.x + 1.0;
    vs_TEXCOORD2.xyz = u_xlat0.xxx * u_xlat1.xyz;
    vs_TEXCOORD4.xy = in_TEXCOORD2.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	float _GrassShininess;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	float _CutOff;
uniform 	vec4 _BurnedColor;
uniform lowp sampler2D _MainTex;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp float vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec4 u_xlat0;
lowp vec4 u_xlat10_0;
bool u_xlatb0;
vec3 u_xlat1;
mediump float u_xlat16_2;
float u_xlat9;
bool u_xlatb9;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD4.xy);
    u_xlat9 = u_xlat10_0.w + (-_CutOff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(u_xlat9<0.0);
#else
    u_xlatb9 = u_xlat9<0.0;
#endif
    if((int(u_xlatb9) * int(0xffffffffu))!=0){discard;}
    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
    SV_Target0.xyz = u_xlat1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0;
    u_xlat1.xyz = _BurnedColor.xyz * u_xlat10_0.xyz + (-u_xlat10_0.xyz);
    u_xlat0.xyz = vs_TEXCOORD2.www * u_xlat1.xyz + u_xlat10_0.xyz;
    u_xlat0.w = vs_TEXCOORD3;
    SV_Target1 = u_xlat0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_2 = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb0) ? u_xlat16_2 : 0.0399999991;
    u_xlat0.x = (-vs_TEXCOORD2.w) + 1.0;
    u_xlat0.x = u_xlat0.x * _GrassShininess;
    SV_Target2.w = u_xlat0.x;
    SV_Target2.xy = vec2(0.0399999991, 0.0399999991);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "MHY_SHADER_MIDDLE" "SOFT_SAMPLE_HEIGHT_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	float _NoiseScale;
uniform 	vec4 _WorldOffsetRange;
uniform 	float _HeightScale;
uniform 	float _Billboard;
uniform 	float _VegetationMoveScale;
uniform 	vec4 _LocalWindsMapSize;
uniform 	vec4 _LargeWindParam;
uniform 	vec4 _GlobalWind;
uniform 	vec4 _LocalWindsMapCameraInfo;
uniform 	float _GrassTipLighting;
uniform 	vec4 _MainTex_ST;
uniform 	float _RootColorScale;
uniform 	float _RootColorOffset;
uniform highp sampler2D _Heightmap;
uniform lowp sampler2D _Noisemap;
uniform lowp sampler2D _LocalWindsMap;
in highp vec4 in_POSITION0;
in highp vec4 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec2 in_TEXCOORD2;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp float vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec3 u_xlat0;
vec3 u_xlat1;
int u_xlati1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
vec4 u_xlat6;
vec3 u_xlat7;
vec3 u_xlat8;
bool u_xlatb8;
vec2 u_xlat10;
vec2 u_xlat16;
float u_xlat18;
vec2 u_xlat21;
float u_xlat24;
int u_xlati24;
float u_xlat25;
float u_xlat26;
void main()
{
    u_xlat0.z = 0.0;
    u_xlat1.xyz = in_TEXCOORD0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[2].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TEXCOORD0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat8.xz = u_xlat1.xz + (-_LocalWindsMapSize.xy);
    u_xlat8.xz = vec2(u_xlat8.x / _LocalWindsMapSize.z, u_xlat8.z / _LocalWindsMapSize.w);
    u_xlat8.xz = u_xlat8.xz + vec2(0.5, 0.5);
    u_xlat2 = textureLod(_LocalWindsMap, u_xlat8.xz, 0.0);
    u_xlat8.x = dot(u_xlat2.xy, u_xlat2.xy);
    u_xlat8.x = sqrt(u_xlat8.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(9.99999975e-05>=u_xlat8.x);
#else
    u_xlatb8 = 9.99999975e-05>=u_xlat8.x;
#endif
    u_xlat8.x = u_xlatb8 ? 1.0 : float(0.0);
    u_xlat3.xy = (-u_xlat2.xy) + vec2(0.5, 0.5);
    u_xlat8.xz = u_xlat8.xx * u_xlat3.xy + u_xlat2.xy;
    u_xlat8.xz = u_xlat8.xz * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat25 = dot(u_xlat8.xz, u_xlat8.xz);
    u_xlat25 = max(u_xlat25, 0.00100000005);
    u_xlat3.x = inversesqrt(u_xlat25);
    u_xlat3.yz = u_xlat8.xz * u_xlat3.xx;
    u_xlat0.x = u_xlat3.z;
    u_xlat0.xz = (-u_xlat3.xy) * vec2(0.0, 1.0) + u_xlat0.xz;
    u_xlat25 = (-in_TEXCOORD1.x) + hlslcc_mtx4x4unity_ObjectToWorld[1].x;
    u_xlat2.x = u_xlat25 * 3.0;
    u_xlat2.x = _Time.y * 3.0 + u_xlat2.x;
    u_xlat2.x = u_xlat2.x + 0.5;
    u_xlat2.x = fract(u_xlat2.x);
    u_xlat2.x = u_xlat2.x * 2.0 + -1.0;
    u_xlat10.x = abs(u_xlat2.x) * abs(u_xlat2.x);
    u_xlat2.x = -abs(u_xlat2.x) * 2.0 + 3.0;
    u_xlat2.x = u_xlat2.x * u_xlat10.x;
    u_xlat10.x = u_xlat2.z * 1.5;
    u_xlat2.x = u_xlat10.x * u_xlat2.x;
    u_xlat0.xz = u_xlat0.xz * u_xlat2.xx;
    u_xlat0.xz = u_xlat0.xz * vec2(0.150000006, 0.150000006);
    u_xlat0.xz = u_xlat3.yz * u_xlat2.xx + u_xlat0.xz;
    u_xlat0.xz = u_xlat0.xz + u_xlat8.xz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(0.00199999986<u_xlat2.z);
#else
    u_xlatb2 = 0.00199999986<u_xlat2.z;
#endif
    u_xlat10.x = (-u_xlat2.w) * _LocalWindsMapCameraInfo.y + _LocalWindsMapCameraInfo.x;
    u_xlat0.xy = (bool(u_xlatb2)) ? u_xlat0.xz : u_xlat8.xz;
    u_xlat16.xy = vec2(_WorldOffsetRange.z + float(2.0), _WorldOffsetRange.w + float(2.0));
    u_xlat2.xz = u_xlat1.xz + (-_WorldOffsetRange.xy);
    u_xlat2.xz = u_xlat2.xz + vec2(1.0, 1.0);
    u_xlat16.xy = u_xlat2.xz / u_xlat16.xy;
    u_xlat16.xy = u_xlat16.xy * _WorldOffsetRange.zw + vec2(-0.5, -0.5);
    u_xlat2.xz = floor(u_xlat16.xy);
    u_xlat16.xy = u_xlat16.xy + (-u_xlat2.xz);
    u_xlat3 = u_xlat2.xzxz + vec4(0.5, 1.5, 1.5, 1.5);
    u_xlat4 = u_xlat2.xzxz + vec4(1.5, 0.5, 0.5, 0.5);
    u_xlat4 = vec4(u_xlat4.x / _WorldOffsetRange.z, u_xlat4.y / _WorldOffsetRange.w, u_xlat4.z / _WorldOffsetRange.z, u_xlat4.w / _WorldOffsetRange.w);
    u_xlat3 = vec4(u_xlat3.x / _WorldOffsetRange.z, u_xlat3.y / _WorldOffsetRange.w, u_xlat3.z / _WorldOffsetRange.z, u_xlat3.w / _WorldOffsetRange.w);
    u_xlat2.x = textureLod(_Heightmap, u_xlat3.zw, 0.0).x;
    u_xlat18 = textureLod(_Heightmap, u_xlat3.xy, 0.0).x;
    u_xlat2.x = (-u_xlat18) + u_xlat2.x;
    u_xlat2.x = u_xlat16.x * u_xlat2.x + u_xlat18;
    u_xlat18 = textureLod(_Heightmap, u_xlat4.xy, 0.0).x;
    u_xlat26 = textureLod(_Heightmap, u_xlat4.zw, 0.0).x;
    u_xlat18 = (-u_xlat26) + u_xlat18;
    u_xlat16.x = u_xlat16.x * u_xlat18 + u_xlat26;
    u_xlat2.x = (-u_xlat16.x) + u_xlat2.x;
    u_xlat16.x = u_xlat16.y * u_xlat2.x + u_xlat16.x;
    u_xlat24 = u_xlat16.x * _HeightScale + u_xlat1.y;
    u_xlat24 = (-u_xlat24) + u_xlat10.x;
    u_xlat24 = u_xlat24 * 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat24 = (-u_xlat24) + 1.0;
    u_xlat2.x = fract(u_xlat25);
    u_xlat25 = u_xlat25 + hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat10.xy = vec2(u_xlat25) * vec2(22.0, 33.0);
    u_xlat10.xy = fract(u_xlat10.xy);
    u_xlat10.xy = u_xlat10.xy + vec2(-0.5, -0.5);
    u_xlat3.xz = u_xlat10.xy * vec2(0.200000003, 0.200000003);
    u_xlat25 = u_xlat2.x + -0.5;
    u_xlat2.x = u_xlat25 * 0.333000004;
    u_xlat4.y = u_xlat25 * 0.333000004 + -1.0;
    u_xlat25 = in_TEXCOORD1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat25 = min(max(u_xlat25, 0.0), 1.0);
#else
    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
#endif
    u_xlat2.x = u_xlat2.x * u_xlat25;
    u_xlat24 = u_xlat24 * u_xlat2.x;
    u_xlat0.xy = vec2(u_xlat24) * u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(vec2(_VegetationMoveScale, _VegetationMoveScale));
    u_xlat24 = dot(_GlobalWind.xyz, _GlobalWind.xyz);
    u_xlat24 = max(u_xlat24, 0.00100000005);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat5 = vec4(u_xlat24) * _GlobalWind.xzxz;
    u_xlat10.xy = vec2(u_xlat5.z * _LargeWindParam.z, u_xlat5.w * _LargeWindParam.z);
    u_xlat21.xy = u_xlat1.xz / vec2(_NoiseScale);
    u_xlat5.xy = _LargeWindParam.xx * u_xlat5.xy + u_xlat21.xy;
    u_xlat5.xy = textureLod(_Noisemap, u_xlat5.xy, 0.0).xy;
    u_xlat5.xy = u_xlat5.xy + vec2(-0.5, -0.5);
    u_xlat5.xy = u_xlat5.xy * _LargeWindParam.yy + vec2(0.5, 0.5);
    u_xlat5.xy = u_xlat2.xx * u_xlat5.xy;
    u_xlat6.xz = u_xlat5.xy * u_xlat10.xy + u_xlat0.xy;
    u_xlat10.xy = u_xlat10.xy * u_xlat5.xy;
    u_xlat6.y = 0.0;
    u_xlat5.y = hlslcc_mtx4x4unity_MatrixV[0].x;
    u_xlat5.x = hlslcc_mtx4x4unity_MatrixV[2].x;
    u_xlat24 = dot(u_xlat5.xy, u_xlat5.xy);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat5.xy = vec2(u_xlat24) * u_xlat5.xy;
    u_xlat7.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;
    u_xlat7.y = hlslcc_mtx4x4unity_ObjectToWorld[2].x;
    u_xlat24 = dot(u_xlat7.xy, u_xlat7.xy);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat21.xy = vec2(u_xlat24) * u_xlat7.xy;
    u_xlat7.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat7.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat7.xyz;
    u_xlat7.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat7.xyz;
    u_xlat7.xyz = u_xlat7.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat7.xyz = (-u_xlat1.xyz) + u_xlat7.xyz;
    u_xlat24 = u_xlat21.y * u_xlat7.z;
    u_xlat24 = u_xlat7.x * u_xlat21.x + (-u_xlat24);
    u_xlat26 = dot(u_xlat7.zx, u_xlat21.xy);
    u_xlat21.xy = u_xlat5.xy * vec2(u_xlat26);
    u_xlat26 = u_xlat24 * u_xlat5.y + (-u_xlat21.x);
    u_xlat24 = u_xlat24 * u_xlat5.x + u_xlat21.y;
    u_xlat24 = u_xlat7.z + u_xlat24;
    u_xlat7.z = (-u_xlat24) * _Billboard + u_xlat7.z;
    u_xlat24 = u_xlat7.x + u_xlat26;
    u_xlat7.x = (-u_xlat24) * _Billboard + u_xlat7.x;
    u_xlat24 = u_xlat2.x * u_xlat7.y;
    u_xlat2.x = max(u_xlat2.x, 9.99999972e-10);
    u_xlat5.xyz = u_xlat7.xyz * vec3(0.100000001, 1.0, 0.100000001) + u_xlat6.xyz;
    u_xlat26 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat26 = max(u_xlat26, 0.00100000005);
    u_xlat26 = inversesqrt(u_xlat26);
    u_xlat5.xyz = vec3(u_xlat26) * u_xlat5.xyz;
    u_xlat26 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat26 = sqrt(u_xlat26);
    u_xlat6.xyz = u_xlat7.xyz * vec3(0.100000001, 1.0, 0.100000001);
    u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat26) + (-u_xlat6.xyz);
    u_xlat6.xyz = u_xlat1.xyz + u_xlat7.xyz;
    u_xlat6.w = u_xlat16.x * _HeightScale + u_xlat6.y;
    u_xlat1.xyz = u_xlat5.xyz + u_xlat6.xwz;
    u_xlat1.xyz = vec3(u_xlat24) * vec3(-0.5, 0.0, -0.5) + u_xlat1.xyz;
    u_xlat4.xz = u_xlat4.yy * (-u_xlat4.yy);
    u_xlat1.xyz = u_xlat4.xyz * u_xlat7.xyz + u_xlat1.xyz;
    u_xlat4.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat5 = u_xlat4.yyyy * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat5 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat4.xxxx + u_xlat5;
    u_xlat4 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat4.zzzz + u_xlat5;
    gl_Position = u_xlat4 + hlslcc_mtx4x4unity_MatrixVPZero[3];
    u_xlat3.y = 0.0;
    vs_TEXCOORD0.xyz = u_xlat3.xyz + vec3(-1.0, 0.0, -1.0);
    vs_TEXCOORD0.w = 0.0;
    u_xlat0.xy = u_xlat0.yx / u_xlat2.xx;
    u_xlat16.xy = u_xlat10.yx / u_xlat2.xx;
    u_xlat0.xy = u_xlat0.xy + u_xlat16.xy;
    u_xlat0.yz = u_xlat0.xy + vec2(-1.0, -1.0);
    u_xlat24 = dot(u_xlat0.yz, u_xlat0.yz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat0.x = 0.0;
    u_xlat0.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    u_xlat2.xyz = in_NORMAL0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_NORMAL0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_NORMAL0.zzz + u_xlat2.xyz;
    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat0.xyz * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat0.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat0.xyz * u_xlat2.xyz;
    u_xlat0.xyz = u_xlat2.zxy * u_xlat0.yzx + (-u_xlat3.xyz);
    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
    u_xlat24 = dot(u_xlat1.xyz, u_xlat0.xyz);
#ifdef UNITY_ADRENO_ES3
    { bool cond = 0.0<u_xlat24; u_xlati1 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati1 = int((0.0<u_xlat24) ? 0xFFFFFFFFu : uint(0u));
#endif
#ifdef UNITY_ADRENO_ES3
    { bool cond = u_xlat24<0.0; u_xlati24 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati24 = int((u_xlat24<0.0) ? 0xFFFFFFFFu : uint(0u));
#endif
    u_xlati24 = (-u_xlati1) + u_xlati24;
    u_xlat24 = float(u_xlati24);
    vs_TEXCOORD1.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    vs_TEXCOORD1.w = 0.0;
    u_xlat0.x = u_xlat25 / _RootColorScale;
    u_xlat0.x = u_xlat0.x + _RootColorOffset;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xxx * vec3(-0.501960814, 0.0, 0.0) + vec3(0.501960814, 0.0, 0.0);
    u_xlat24 = u_xlat25 + -0.600000024;
    vs_TEXCOORD3 = u_xlat25;
    u_xlat24 = max(u_xlat24, 0.0);
    u_xlat24 = _GrassTipLighting * u_xlat24 + 1.0;
    vs_TEXCOORD2.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    vs_TEXCOORD2.w = 0.0;
    vs_TEXCOORD4.xy = in_TEXCOORD2.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	float _GrassShininess;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	float _CutOff;
uniform 	vec4 _BurnedColor;
uniform lowp sampler2D _MainTex;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp float vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec4 u_xlat0;
lowp vec4 u_xlat10_0;
bool u_xlatb0;
vec3 u_xlat1;
mediump float u_xlat16_2;
float u_xlat9;
bool u_xlatb9;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD4.xy);
    u_xlat9 = u_xlat10_0.w + (-_CutOff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(u_xlat9<0.0);
#else
    u_xlatb9 = u_xlat9<0.0;
#endif
    if((int(u_xlatb9) * int(0xffffffffu))!=0){discard;}
    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
    SV_Target0.xyz = u_xlat1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0;
    u_xlat1.xyz = _BurnedColor.xyz * u_xlat10_0.xyz + (-u_xlat10_0.xyz);
    u_xlat0.xyz = vs_TEXCOORD2.www * u_xlat1.xyz + u_xlat10_0.xyz;
    u_xlat0.w = vs_TEXCOORD3;
    SV_Target1 = u_xlat0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_2 = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb0) ? u_xlat16_2 : 0.0399999991;
    u_xlat0.x = (-vs_TEXCOORD2.w) + 1.0;
    u_xlat0.x = u_xlat0.x * _GrassShininess;
    SV_Target2.w = u_xlat0.x;
    SV_Target2.xy = vec2(0.0399999991, 0.0399999991);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MHY_SHADER_MIDDLE" "SOFT_SAMPLE_HEIGHT_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	int unity_BaseInstanceID;
uniform 	float _NoiseScale;
uniform 	vec4 _WorldOffsetRange;
uniform 	float _HeightScale;
uniform 	float _Billboard;
uniform 	float _VegetationMoveScale;
uniform 	vec4 _LocalWindsMapSize;
uniform 	vec4 _LargeWindParam;
uniform 	vec4 _GlobalWind;
uniform 	vec4 _LocalWindsMapCameraInfo;
uniform 	float _GrassTipLighting;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BurnedColor;
uniform 	float _RootColorScale;
uniform 	float _RootColorOffset;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _Heightmap;
uniform lowp sampler2D _Noisemap;
uniform lowp sampler2D _LocalWindsMap;
in highp vec4 in_POSITION0;
in highp vec4 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec2 in_TEXCOORD2;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp float vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec3 u_xlat0;
int u_xlati0;
vec3 u_xlat1;
uvec3 u_xlatu1;
vec4 u_xlat2;
uvec3 u_xlatu2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
uvec2 u_xlatu5;
vec4 u_xlat6;
vec3 u_xlat7;
vec2 u_xlat8;
float u_xlat9;
int u_xlati9;
float u_xlat11;
uint u_xlatu11;
int u_xlati18;
float u_xlat20;
vec2 u_xlat23;
float u_xlat27;
bool u_xlatb27;
float u_xlat28;
uint u_xlatu28;
bool u_xlatb28;
float u_xlat29;
bool u_xlatb29;
float u_xlat30;
void main()
{
    u_xlat0.z = 0.0;
    u_xlati9 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati9 = u_xlati9 << 2;
    u_xlat1.xyz = in_TEXCOORD0.yyy * unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_TEXCOORD0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat2.xy = u_xlat1.xz + (-_LocalWindsMapSize.xy);
    u_xlat2.xy = vec2(u_xlat2.x / _LocalWindsMapSize.z, u_xlat2.y / _LocalWindsMapSize.w);
    u_xlat2.xy = u_xlat2.xy + vec2(0.5, 0.5);
    u_xlat2 = textureLod(_LocalWindsMap, u_xlat2.xy, 0.0);
    u_xlat27 = dot(u_xlat2.xy, u_xlat2.xy);
    u_xlat27 = sqrt(u_xlat27);
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(9.99999975e-05>=u_xlat27);
#else
    u_xlatb27 = 9.99999975e-05>=u_xlat27;
#endif
    u_xlat27 = u_xlatb27 ? 1.0 : float(0.0);
    u_xlat3.xy = (-u_xlat2.xy) + vec2(0.5, 0.5);
    u_xlat2.xy = vec2(u_xlat27) * u_xlat3.xy + u_xlat2.xy;
    u_xlat2.xy = u_xlat2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat27 = dot(u_xlat2.xy, u_xlat2.xy);
    u_xlat27 = max(u_xlat27, 0.00100000005);
    u_xlat3.x = inversesqrt(u_xlat27);
    u_xlat3.yz = u_xlat2.xy * u_xlat3.xx;
    u_xlat0.x = u_xlat3.z;
    u_xlat0.xz = (-u_xlat3.xy) * vec2(0.0, 1.0) + u_xlat0.xz;
    u_xlat27 = (-in_TEXCOORD1.x) + unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].x;
    u_xlat28 = u_xlat27 * 3.0;
    u_xlat28 = _Time.y * 3.0 + u_xlat28;
    u_xlat28 = u_xlat28 + 0.5;
    u_xlat28 = fract(u_xlat28);
    u_xlat28 = u_xlat28 * 2.0 + -1.0;
    u_xlat3.x = abs(u_xlat28) * abs(u_xlat28);
    u_xlat28 = -abs(u_xlat28) * 2.0 + 3.0;
    u_xlat28 = u_xlat28 * u_xlat3.x;
    u_xlat3.x = u_xlat2.z * 1.5;
    u_xlat28 = u_xlat28 * u_xlat3.x;
    u_xlat0.xz = u_xlat0.xz * vec2(u_xlat28);
    u_xlat0.xz = u_xlat0.xz * vec2(0.150000006, 0.150000006);
    u_xlat0.xz = u_xlat3.yz * vec2(u_xlat28) + u_xlat0.xz;
    u_xlat0.xz = u_xlat0.xz + u_xlat2.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlatb28 = !!(0.00199999986<u_xlat2.z);
#else
    u_xlatb28 = 0.00199999986<u_xlat2.z;
#endif
    u_xlat20 = (-u_xlat2.w) * _LocalWindsMapCameraInfo.y + _LocalWindsMapCameraInfo.x;
    u_xlat0.xz = (bool(u_xlatb28)) ? u_xlat0.xz : u_xlat2.xy;
    u_xlat2.xy = vec2(_WorldOffsetRange.z + float(2.0), _WorldOffsetRange.w + float(2.0));
    u_xlat3.xy = u_xlat1.xz + (-_WorldOffsetRange.xy);
    u_xlat3.xy = u_xlat3.xy + vec2(1.0, 1.0);
    u_xlat2.xy = u_xlat3.xy / u_xlat2.xy;
    u_xlat2.xy = u_xlat2.xy * _WorldOffsetRange.zw + vec2(-0.5, -0.5);
    u_xlat3.xy = floor(u_xlat2.xy);
    u_xlat2.xy = u_xlat2.xy + (-u_xlat3.xy);
    u_xlat4 = u_xlat3.xyxy + vec4(0.5, 1.5, 1.5, 1.5);
    u_xlat3 = u_xlat3.xyxy + vec4(1.5, 0.5, 0.5, 0.5);
    u_xlat3 = vec4(u_xlat3.x / _WorldOffsetRange.z, u_xlat3.y / _WorldOffsetRange.w, u_xlat3.z / _WorldOffsetRange.z, u_xlat3.w / _WorldOffsetRange.w);
    u_xlat4 = vec4(u_xlat4.x / _WorldOffsetRange.z, u_xlat4.y / _WorldOffsetRange.w, u_xlat4.z / _WorldOffsetRange.z, u_xlat4.w / _WorldOffsetRange.w);
    u_xlat28 = textureLod(_Heightmap, u_xlat4.zw, 0.0).x;
    u_xlat29 = textureLod(_Heightmap, u_xlat4.xy, 0.0).x;
    u_xlat28 = u_xlat28 + (-u_xlat29);
    u_xlat28 = u_xlat2.x * u_xlat28 + u_xlat29;
    u_xlat29 = textureLod(_Heightmap, u_xlat3.xy, 0.0).x;
    u_xlat3.x = textureLod(_Heightmap, u_xlat3.zw, 0.0).x;
    u_xlat29 = u_xlat29 + (-u_xlat3.x);
    u_xlat2.x = u_xlat2.x * u_xlat29 + u_xlat3.x;
    u_xlat28 = u_xlat28 + (-u_xlat2.x);
    u_xlat28 = u_xlat2.y * u_xlat28 + u_xlat2.x;
    u_xlat2.x = u_xlat28 * _HeightScale + u_xlat1.y;
    u_xlat2.x = (-u_xlat2.x) + u_xlat20;
    u_xlat2.x = u_xlat2.x * 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat2.x = (-u_xlat2.x) + 1.0;
    u_xlat11 = float(floatBitsToUint(unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2]).w);
    u_xlat11 = u_xlat11 * 5.96046448e-08;
    u_xlatu11 = uint(u_xlat11);
    u_xlatu11 = u_xlatu11 & 3u;
    u_xlat11 = float(u_xlatu11);
    u_xlat20 = fract(u_xlat27);
    u_xlat27 = u_xlat27 + unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].y;
    u_xlat3.xy = vec2(u_xlat27) * vec2(22.0, 33.0);
    u_xlat3.xy = fract(u_xlat3.xy);
    u_xlat3.xy = u_xlat3.xy + vec2(-0.5, -0.5);
    u_xlat3.xz = u_xlat3.xy * vec2(0.200000003, 0.200000003);
    u_xlat27 = u_xlat11 + u_xlat20;
    u_xlat27 = u_xlat27 + -0.5;
    u_xlat11 = u_xlat27 * 0.333000004;
    u_xlat4.y = u_xlat27 * 0.333000004 + -1.0;
    u_xlat27 = in_TEXCOORD1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
    u_xlat11 = u_xlat11 * u_xlat27;
    u_xlat2.x = u_xlat11 * u_xlat2.x;
    u_xlat0.xz = u_xlat0.xz * u_xlat2.xx;
    u_xlat0.xz = u_xlat0.xz * vec2(vec2(_VegetationMoveScale, _VegetationMoveScale));
    u_xlat2.x = dot(_GlobalWind.xyz, _GlobalWind.xyz);
    u_xlat2.x = max(u_xlat2.x, 0.00100000005);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat5 = u_xlat2.xxxx * _GlobalWind.xzxz;
    u_xlat2.xz = vec2(u_xlat5.z * _LargeWindParam.z, u_xlat5.w * _LargeWindParam.z);
    u_xlat23.xy = u_xlat1.xz / vec2(_NoiseScale);
    u_xlat5.xy = _LargeWindParam.xx * u_xlat5.xy + u_xlat23.xy;
    u_xlat5.xy = textureLod(_Noisemap, u_xlat5.xy, 0.0).xy;
    u_xlat5.xy = u_xlat5.xy + vec2(-0.5, -0.5);
    u_xlat5.xy = u_xlat5.xy * _LargeWindParam.yy + vec2(0.5, 0.5);
    u_xlat5.xy = vec2(u_xlat11) * u_xlat5.xy;
    u_xlat6.xz = u_xlat5.xy * u_xlat2.xz + u_xlat0.xz;
    u_xlat2.xz = u_xlat2.xz * u_xlat5.xy;
    u_xlat6.y = 0.0;
    u_xlat5.y = hlslcc_mtx4x4unity_MatrixV[0].x;
    u_xlat5.x = hlslcc_mtx4x4unity_MatrixV[2].x;
    u_xlat29 = dot(u_xlat5.xy, u_xlat5.xy);
    u_xlat29 = inversesqrt(u_xlat29);
    u_xlat5.xy = vec2(u_xlat29) * u_xlat5.xy;
    u_xlat7.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat7.xyz = unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat7.xyz;
    u_xlat7.xyz = unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat7.xyz;
    u_xlat7.xyz = u_xlat7.xyz + unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat7.xyz = (-u_xlat1.xyz) + u_xlat7.xyz;
    u_xlat8.x = unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].x;
    u_xlat8.y = unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].x;
    u_xlat29 = dot(u_xlat8.xy, u_xlat8.xy);
    u_xlat29 = inversesqrt(u_xlat29);
    u_xlat23.xy = vec2(u_xlat29) * u_xlat8.xy;
    u_xlat29 = u_xlat23.y * u_xlat7.z;
    u_xlat29 = u_xlat7.x * u_xlat23.x + (-u_xlat29);
    u_xlat30 = dot(u_xlat7.zx, u_xlat23.xy);
    u_xlat23.xy = u_xlat5.xy * vec2(u_xlat30);
    u_xlat30 = u_xlat29 * u_xlat5.y + (-u_xlat23.x);
    u_xlat29 = u_xlat29 * u_xlat5.x + u_xlat23.y;
    u_xlat29 = u_xlat7.z + u_xlat29;
    u_xlat7.z = (-u_xlat29) * _Billboard + u_xlat7.z;
    u_xlat29 = u_xlat7.x + u_xlat30;
    u_xlat7.x = (-u_xlat29) * _Billboard + u_xlat7.x;
    u_xlat5.xyz = u_xlat7.xyz * vec3(0.100000001, 1.0, 0.100000001) + u_xlat6.xyz;
    u_xlat29 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat29 = max(u_xlat29, 0.00100000005);
    u_xlat29 = inversesqrt(u_xlat29);
    u_xlat5.xyz = vec3(u_xlat29) * u_xlat5.xyz;
    u_xlat29 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat29 = sqrt(u_xlat29);
    u_xlat6.xyz = u_xlat7.xyz * vec3(0.100000001, 1.0, 0.100000001);
    u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat29) + (-u_xlat6.xyz);
    u_xlat6.xyz = u_xlat1.xyz + u_xlat7.xyz;
    u_xlat6.w = u_xlat28 * _HeightScale + u_xlat6.y;
    u_xlat1.xyz = u_xlat5.xyz + u_xlat6.xwz;
    u_xlatu5.xy = uvec2(65280u, 255u) & floatBitsToUint(unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1]).ww;
    u_xlat5.xy = vec2(u_xlatu5.xy);
    u_xlat28 = u_xlat5.x * 0.00390625;
    u_xlat5.z = u_xlat5.y + -127.0;
    u_xlatu28 = uint(u_xlat28);
    u_xlat28 = float(u_xlatu28);
    u_xlat5.x = u_xlat28 + -127.0;
    u_xlat6.xy = u_xlat5.xz * vec2(0.00787401572, 0.00787401572);
    u_xlat6.xy = u_xlat6.xy * u_xlat6.xy;
    u_xlat28 = u_xlat6.y + u_xlat6.x;
    u_xlat28 = (-u_xlat28) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb29 = !!(0.0<u_xlat28);
#else
    u_xlatb29 = 0.0<u_xlat28;
#endif
    u_xlat28 = sqrt(u_xlat28);
    u_xlat5.y = u_xlatb29 ? u_xlat28 : float(0.0);
    u_xlat6.xyz = u_xlat5.xyz * u_xlat7.yyy;
    u_xlat6.xyz = vec3(u_xlat11) * u_xlat6.xyz;
    u_xlat28 = max(u_xlat11, 9.99999972e-10);
    u_xlat1.xyz = u_xlat6.xyz * vec3(0.00393700786, 0.0, 0.00393700786) + u_xlat1.xyz;
    u_xlat4.xz = u_xlat4.yy * (-u_xlat4.yy);
    u_xlat1.xyz = u_xlat4.xyz * u_xlat7.xyz + u_xlat1.xyz;
    u_xlat4.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat6 = u_xlat4.yyyy * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat6 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat4.xxxx + u_xlat6;
    u_xlat4 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat4.zzzz + u_xlat6;
    gl_Position = u_xlat4 + hlslcc_mtx4x4unity_MatrixVPZero[3];
    u_xlat3.y = 0.0;
    vs_TEXCOORD0.xyz = u_xlat5.xyz * vec3(0.00787401572, 1.0, 0.00787401572) + u_xlat3.xyz;
    vs_TEXCOORD0.w = 0.0;
    u_xlat0.xz = u_xlat0.zx / vec2(u_xlat28);
    u_xlat2.xy = u_xlat2.zx / vec2(u_xlat28);
    u_xlat2.yz = u_xlat0.xz + u_xlat2.xy;
    u_xlat2.x = 0.0;
    u_xlat2.xyz = u_xlat5.yzx * vec3(1.0, 0.00787401572, 0.00787401572) + u_xlat2.xyz;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat3.xyz = in_NORMAL0.yyy * unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_NORMAL0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_NORMAL0.zzz + u_xlat3.xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
    u_xlat3.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
    u_xlat2.xyz = u_xlat3.zxy * u_xlat2.yzx + (-u_xlat4.xyz);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
    { bool cond = 0.0<u_xlat0.x; u_xlati18 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati18 = int((0.0<u_xlat0.x) ? 0xFFFFFFFFu : uint(0u));
#endif
#ifdef UNITY_ADRENO_ES3
    { bool cond = u_xlat0.x<0.0; u_xlati0 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati0 = int((u_xlat0.x<0.0) ? 0xFFFFFFFFu : uint(0u));
#endif
    u_xlati0 = (-u_xlati18) + u_xlati0;
    u_xlat0.x = float(u_xlati0);
    vs_TEXCOORD1.xyz = u_xlat0.xxx * u_xlat2.xyz;
    vs_TEXCOORD1.w = 0.0;
    u_xlatu1.xyz = uvec3(16711680u, 65280u, 255u) & floatBitsToUint(unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2]).www;
    u_xlat1.xyz = vec3(u_xlatu1.xyz);
    u_xlatu2.xyz = uvec3(16711680u, 65280u, 255u) & floatBitsToUint(unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3]).www;
    u_xlat0.x = max(1.0, unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].w);
    u_xlat0.x = min(u_xlat0.x, 2.0);
    u_xlat0.x = u_xlat0.x + -1.0;
    u_xlat2.xyz = vec3(u_xlatu2.xyz);
    u_xlat2.xyz = u_xlat2.xyz * vec3(5.9838392e-08, 1.53186284e-05, 0.00392156886);
    u_xlat1.xyz = u_xlat1.xyz * vec3(5.9838392e-08, 1.53186284e-05, 0.00392156886) + (-u_xlat2.xyz);
    u_xlat9 = u_xlat27 / _RootColorScale;
    u_xlat9 = u_xlat9 + _RootColorOffset;
#ifdef UNITY_ADRENO_ES3
    u_xlat9 = min(max(u_xlat9, 0.0), 1.0);
#else
    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz + u_xlat2.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _BurnedColor.xyz;
    u_xlat1.xyz = u_xlat0.xxx * u_xlat2.xyz + u_xlat1.xyz;
    vs_TEXCOORD2.w = u_xlat0.x;
    u_xlat0.x = u_xlat27 + -0.600000024;
    vs_TEXCOORD3 = u_xlat27;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = _GrassTipLighting * u_xlat0.x + 1.0;
    vs_TEXCOORD2.xyz = u_xlat0.xxx * u_xlat1.xyz;
    vs_TEXCOORD4.xy = in_TEXCOORD2.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	float _GrassShininess;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	float _CutOff;
uniform 	vec4 _BurnedColor;
uniform lowp sampler2D _MainTex;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp float vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec4 u_xlat0;
lowp vec4 u_xlat10_0;
bool u_xlatb0;
vec3 u_xlat1;
mediump float u_xlat16_2;
float u_xlat9;
bool u_xlatb9;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD4.xy);
    u_xlat9 = u_xlat10_0.w + (-_CutOff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(u_xlat9<0.0);
#else
    u_xlatb9 = u_xlat9<0.0;
#endif
    if((int(u_xlatb9) * int(0xffffffffu))!=0){discard;}
    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
    SV_Target0.xyz = u_xlat1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0;
    u_xlat1.xyz = _BurnedColor.xyz * u_xlat10_0.xyz + (-u_xlat10_0.xyz);
    u_xlat0.xyz = vs_TEXCOORD2.www * u_xlat1.xyz + u_xlat10_0.xyz;
    u_xlat0.w = vs_TEXCOORD3;
    SV_Target1 = u_xlat0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_2 = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb0) ? u_xlat16_2 : 0.0399999991;
    u_xlat0.x = (-vs_TEXCOORD2.w) + 1.0;
    u_xlat0.x = u_xlat0.x * _GrassShininess;
    SV_Target2.w = u_xlat0.x;
    SV_Target2.xy = vec2(0.0399999991, 0.0399999991);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "MHY_SHADER_MIDDLE" "SOFT_SAMPLE_HEIGHT_ON" "DITHER_FADE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	float _NoiseScale;
uniform 	vec4 _WorldOffsetRange;
uniform 	float _HeightScale;
uniform 	float _Billboard;
uniform 	float _VegetationMoveScale;
uniform 	vec4 _LocalWindsMapSize;
uniform 	vec4 _LargeWindParam;
uniform 	vec4 _GlobalWind;
uniform 	vec4 _LocalWindsMapCameraInfo;
uniform 	float _GrassTipLighting;
uniform 	vec4 _MainTex_ST;
uniform 	float _RootColorScale;
uniform 	float _RootColorOffset;
uniform highp sampler2D _Heightmap;
uniform lowp sampler2D _Noisemap;
uniform lowp sampler2D _LocalWindsMap;
in highp vec4 in_POSITION0;
in highp vec4 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec2 in_TEXCOORD2;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp float vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec3 u_xlat0;
vec3 u_xlat1;
int u_xlati1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
vec4 u_xlat6;
vec3 u_xlat7;
vec3 u_xlat8;
bool u_xlatb8;
vec2 u_xlat10;
vec2 u_xlat16;
float u_xlat18;
vec2 u_xlat21;
float u_xlat24;
int u_xlati24;
float u_xlat25;
float u_xlat26;
void main()
{
    u_xlat0.z = 0.0;
    u_xlat1.xyz = in_TEXCOORD0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[2].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TEXCOORD0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat8.xz = u_xlat1.xz + (-_LocalWindsMapSize.xy);
    u_xlat8.xz = vec2(u_xlat8.x / _LocalWindsMapSize.z, u_xlat8.z / _LocalWindsMapSize.w);
    u_xlat8.xz = u_xlat8.xz + vec2(0.5, 0.5);
    u_xlat2 = textureLod(_LocalWindsMap, u_xlat8.xz, 0.0);
    u_xlat8.x = dot(u_xlat2.xy, u_xlat2.xy);
    u_xlat8.x = sqrt(u_xlat8.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(9.99999975e-05>=u_xlat8.x);
#else
    u_xlatb8 = 9.99999975e-05>=u_xlat8.x;
#endif
    u_xlat8.x = u_xlatb8 ? 1.0 : float(0.0);
    u_xlat3.xy = (-u_xlat2.xy) + vec2(0.5, 0.5);
    u_xlat8.xz = u_xlat8.xx * u_xlat3.xy + u_xlat2.xy;
    u_xlat8.xz = u_xlat8.xz * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat25 = dot(u_xlat8.xz, u_xlat8.xz);
    u_xlat25 = max(u_xlat25, 0.00100000005);
    u_xlat3.x = inversesqrt(u_xlat25);
    u_xlat3.yz = u_xlat8.xz * u_xlat3.xx;
    u_xlat0.x = u_xlat3.z;
    u_xlat0.xz = (-u_xlat3.xy) * vec2(0.0, 1.0) + u_xlat0.xz;
    u_xlat25 = (-in_TEXCOORD1.x) + hlslcc_mtx4x4unity_ObjectToWorld[1].x;
    u_xlat2.x = u_xlat25 * 3.0;
    u_xlat2.x = _Time.y * 3.0 + u_xlat2.x;
    u_xlat2.x = u_xlat2.x + 0.5;
    u_xlat2.x = fract(u_xlat2.x);
    u_xlat2.x = u_xlat2.x * 2.0 + -1.0;
    u_xlat10.x = abs(u_xlat2.x) * abs(u_xlat2.x);
    u_xlat2.x = -abs(u_xlat2.x) * 2.0 + 3.0;
    u_xlat2.x = u_xlat2.x * u_xlat10.x;
    u_xlat10.x = u_xlat2.z * 1.5;
    u_xlat2.x = u_xlat10.x * u_xlat2.x;
    u_xlat0.xz = u_xlat0.xz * u_xlat2.xx;
    u_xlat0.xz = u_xlat0.xz * vec2(0.150000006, 0.150000006);
    u_xlat0.xz = u_xlat3.yz * u_xlat2.xx + u_xlat0.xz;
    u_xlat0.xz = u_xlat0.xz + u_xlat8.xz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(0.00199999986<u_xlat2.z);
#else
    u_xlatb2 = 0.00199999986<u_xlat2.z;
#endif
    u_xlat10.x = (-u_xlat2.w) * _LocalWindsMapCameraInfo.y + _LocalWindsMapCameraInfo.x;
    u_xlat0.xy = (bool(u_xlatb2)) ? u_xlat0.xz : u_xlat8.xz;
    u_xlat16.xy = vec2(_WorldOffsetRange.z + float(2.0), _WorldOffsetRange.w + float(2.0));
    u_xlat2.xz = u_xlat1.xz + (-_WorldOffsetRange.xy);
    u_xlat2.xz = u_xlat2.xz + vec2(1.0, 1.0);
    u_xlat16.xy = u_xlat2.xz / u_xlat16.xy;
    u_xlat16.xy = u_xlat16.xy * _WorldOffsetRange.zw + vec2(-0.5, -0.5);
    u_xlat2.xz = floor(u_xlat16.xy);
    u_xlat16.xy = u_xlat16.xy + (-u_xlat2.xz);
    u_xlat3 = u_xlat2.xzxz + vec4(0.5, 1.5, 1.5, 1.5);
    u_xlat4 = u_xlat2.xzxz + vec4(1.5, 0.5, 0.5, 0.5);
    u_xlat4 = vec4(u_xlat4.x / _WorldOffsetRange.z, u_xlat4.y / _WorldOffsetRange.w, u_xlat4.z / _WorldOffsetRange.z, u_xlat4.w / _WorldOffsetRange.w);
    u_xlat3 = vec4(u_xlat3.x / _WorldOffsetRange.z, u_xlat3.y / _WorldOffsetRange.w, u_xlat3.z / _WorldOffsetRange.z, u_xlat3.w / _WorldOffsetRange.w);
    u_xlat2.x = textureLod(_Heightmap, u_xlat3.zw, 0.0).x;
    u_xlat18 = textureLod(_Heightmap, u_xlat3.xy, 0.0).x;
    u_xlat2.x = (-u_xlat18) + u_xlat2.x;
    u_xlat2.x = u_xlat16.x * u_xlat2.x + u_xlat18;
    u_xlat18 = textureLod(_Heightmap, u_xlat4.xy, 0.0).x;
    u_xlat26 = textureLod(_Heightmap, u_xlat4.zw, 0.0).x;
    u_xlat18 = (-u_xlat26) + u_xlat18;
    u_xlat16.x = u_xlat16.x * u_xlat18 + u_xlat26;
    u_xlat2.x = (-u_xlat16.x) + u_xlat2.x;
    u_xlat16.x = u_xlat16.y * u_xlat2.x + u_xlat16.x;
    u_xlat24 = u_xlat16.x * _HeightScale + u_xlat1.y;
    u_xlat24 = (-u_xlat24) + u_xlat10.x;
    u_xlat24 = u_xlat24 * 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat24 = (-u_xlat24) + 1.0;
    u_xlat2.x = fract(u_xlat25);
    u_xlat25 = u_xlat25 + hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat10.xy = vec2(u_xlat25) * vec2(22.0, 33.0);
    u_xlat10.xy = fract(u_xlat10.xy);
    u_xlat10.xy = u_xlat10.xy + vec2(-0.5, -0.5);
    u_xlat3.xz = u_xlat10.xy * vec2(0.200000003, 0.200000003);
    u_xlat25 = u_xlat2.x + -0.5;
    u_xlat2.x = u_xlat25 * 0.333000004;
    u_xlat4.y = u_xlat25 * 0.333000004 + -1.0;
    u_xlat25 = in_TEXCOORD1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat25 = min(max(u_xlat25, 0.0), 1.0);
#else
    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
#endif
    u_xlat2.x = u_xlat2.x * u_xlat25;
    u_xlat24 = u_xlat24 * u_xlat2.x;
    u_xlat0.xy = vec2(u_xlat24) * u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(vec2(_VegetationMoveScale, _VegetationMoveScale));
    u_xlat24 = dot(_GlobalWind.xyz, _GlobalWind.xyz);
    u_xlat24 = max(u_xlat24, 0.00100000005);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat5 = vec4(u_xlat24) * _GlobalWind.xzxz;
    u_xlat10.xy = vec2(u_xlat5.z * _LargeWindParam.z, u_xlat5.w * _LargeWindParam.z);
    u_xlat21.xy = u_xlat1.xz / vec2(_NoiseScale);
    u_xlat5.xy = _LargeWindParam.xx * u_xlat5.xy + u_xlat21.xy;
    u_xlat5.xy = textureLod(_Noisemap, u_xlat5.xy, 0.0).xy;
    u_xlat5.xy = u_xlat5.xy + vec2(-0.5, -0.5);
    u_xlat5.xy = u_xlat5.xy * _LargeWindParam.yy + vec2(0.5, 0.5);
    u_xlat5.xy = u_xlat2.xx * u_xlat5.xy;
    u_xlat6.xz = u_xlat5.xy * u_xlat10.xy + u_xlat0.xy;
    u_xlat10.xy = u_xlat10.xy * u_xlat5.xy;
    u_xlat6.y = 0.0;
    u_xlat5.y = hlslcc_mtx4x4unity_MatrixV[0].x;
    u_xlat5.x = hlslcc_mtx4x4unity_MatrixV[2].x;
    u_xlat24 = dot(u_xlat5.xy, u_xlat5.xy);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat5.xy = vec2(u_xlat24) * u_xlat5.xy;
    u_xlat7.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;
    u_xlat7.y = hlslcc_mtx4x4unity_ObjectToWorld[2].x;
    u_xlat24 = dot(u_xlat7.xy, u_xlat7.xy);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat21.xy = vec2(u_xlat24) * u_xlat7.xy;
    u_xlat7.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat7.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat7.xyz;
    u_xlat7.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat7.xyz;
    u_xlat7.xyz = u_xlat7.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat7.xyz = (-u_xlat1.xyz) + u_xlat7.xyz;
    u_xlat24 = u_xlat21.y * u_xlat7.z;
    u_xlat24 = u_xlat7.x * u_xlat21.x + (-u_xlat24);
    u_xlat26 = dot(u_xlat7.zx, u_xlat21.xy);
    u_xlat21.xy = u_xlat5.xy * vec2(u_xlat26);
    u_xlat26 = u_xlat24 * u_xlat5.y + (-u_xlat21.x);
    u_xlat24 = u_xlat24 * u_xlat5.x + u_xlat21.y;
    u_xlat24 = u_xlat7.z + u_xlat24;
    u_xlat7.z = (-u_xlat24) * _Billboard + u_xlat7.z;
    u_xlat24 = u_xlat7.x + u_xlat26;
    u_xlat7.x = (-u_xlat24) * _Billboard + u_xlat7.x;
    u_xlat24 = u_xlat2.x * u_xlat7.y;
    u_xlat2.x = max(u_xlat2.x, 9.99999972e-10);
    u_xlat5.xyz = u_xlat7.xyz * vec3(0.100000001, 1.0, 0.100000001) + u_xlat6.xyz;
    u_xlat26 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat26 = max(u_xlat26, 0.00100000005);
    u_xlat26 = inversesqrt(u_xlat26);
    u_xlat5.xyz = vec3(u_xlat26) * u_xlat5.xyz;
    u_xlat26 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat26 = sqrt(u_xlat26);
    u_xlat6.xyz = u_xlat7.xyz * vec3(0.100000001, 1.0, 0.100000001);
    u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat26) + (-u_xlat6.xyz);
    u_xlat6.xyz = u_xlat1.xyz + u_xlat7.xyz;
    u_xlat6.w = u_xlat16.x * _HeightScale + u_xlat6.y;
    u_xlat1.xyz = u_xlat5.xyz + u_xlat6.xwz;
    u_xlat1.xyz = vec3(u_xlat24) * vec3(-0.5, 0.0, -0.5) + u_xlat1.xyz;
    u_xlat4.xz = u_xlat4.yy * (-u_xlat4.yy);
    u_xlat1.xyz = u_xlat4.xyz * u_xlat7.xyz + u_xlat1.xyz;
    u_xlat4.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat5 = u_xlat4.yyyy * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat5 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat4.xxxx + u_xlat5;
    u_xlat4 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat4.zzzz + u_xlat5;
    gl_Position = u_xlat4 + hlslcc_mtx4x4unity_MatrixVPZero[3];
    u_xlat3.y = 0.0;
    vs_TEXCOORD0.xyz = u_xlat3.xyz + vec3(-1.0, 0.0, -1.0);
    vs_TEXCOORD0.w = 0.0;
    u_xlat0.xy = u_xlat0.yx / u_xlat2.xx;
    u_xlat16.xy = u_xlat10.yx / u_xlat2.xx;
    u_xlat0.xy = u_xlat0.xy + u_xlat16.xy;
    u_xlat0.yz = u_xlat0.xy + vec2(-1.0, -1.0);
    u_xlat24 = dot(u_xlat0.yz, u_xlat0.yz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat0.x = 0.0;
    u_xlat0.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    u_xlat2.xyz = in_NORMAL0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_NORMAL0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_NORMAL0.zzz + u_xlat2.xyz;
    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat0.xyz * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat0.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat0.xyz * u_xlat2.xyz;
    u_xlat0.xyz = u_xlat2.zxy * u_xlat0.yzx + (-u_xlat3.xyz);
    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
    u_xlat24 = dot(u_xlat1.xyz, u_xlat0.xyz);
#ifdef UNITY_ADRENO_ES3
    { bool cond = 0.0<u_xlat24; u_xlati1 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati1 = int((0.0<u_xlat24) ? 0xFFFFFFFFu : uint(0u));
#endif
#ifdef UNITY_ADRENO_ES3
    { bool cond = u_xlat24<0.0; u_xlati24 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati24 = int((u_xlat24<0.0) ? 0xFFFFFFFFu : uint(0u));
#endif
    u_xlati24 = (-u_xlati1) + u_xlati24;
    u_xlat24 = float(u_xlati24);
    vs_TEXCOORD1.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    vs_TEXCOORD1.w = 0.0;
    u_xlat0.x = u_xlat25 / _RootColorScale;
    u_xlat0.x = u_xlat0.x + _RootColorOffset;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xxx * vec3(-0.501960814, 0.0, 0.0) + vec3(0.501960814, 0.0, 0.0);
    u_xlat24 = u_xlat25 + -0.600000024;
    vs_TEXCOORD3 = u_xlat25;
    u_xlat24 = max(u_xlat24, 0.0);
    u_xlat24 = _GrassTipLighting * u_xlat24 + 1.0;
    vs_TEXCOORD2.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    vs_TEXCOORD2.w = 0.0;
    vs_TEXCOORD4.xy = in_TEXCOORD2.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	float _GrassShininess;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	float _CutOff;
uniform 	vec4 _BurnedColor;
uniform lowp sampler2D _MainTex;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp float vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec4 u_xlat0;
lowp vec4 u_xlat10_0;
bool u_xlatb0;
vec3 u_xlat1;
mediump float u_xlat16_2;
float u_xlat9;
bool u_xlatb9;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD4.xy);
    u_xlat9 = u_xlat10_0.w + (-_CutOff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(u_xlat9<0.0);
#else
    u_xlatb9 = u_xlat9<0.0;
#endif
    if((int(u_xlatb9) * int(0xffffffffu))!=0){discard;}
    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
    SV_Target0.xyz = u_xlat1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0;
    u_xlat1.xyz = _BurnedColor.xyz * u_xlat10_0.xyz + (-u_xlat10_0.xyz);
    u_xlat0.xyz = vs_TEXCOORD2.www * u_xlat1.xyz + u_xlat10_0.xyz;
    u_xlat0.w = vs_TEXCOORD3;
    SV_Target1 = u_xlat0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_2 = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb0) ? u_xlat16_2 : 0.0399999991;
    u_xlat0.x = (-vs_TEXCOORD2.w) + 1.0;
    u_xlat0.x = u_xlat0.x * _GrassShininess;
    SV_Target2.w = u_xlat0.x;
    SV_Target2.xy = vec2(0.0399999991, 0.0399999991);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MHY_SHADER_MIDDLE" "SOFT_SAMPLE_HEIGHT_ON" "DITHER_FADE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	int unity_BaseInstanceID;
uniform 	float _NoiseScale;
uniform 	vec4 _WorldOffsetRange;
uniform 	float _HeightScale;
uniform 	float _Billboard;
uniform 	float _VegetationMoveScale;
uniform 	vec4 _LocalWindsMapSize;
uniform 	vec4 _LargeWindParam;
uniform 	vec4 _GlobalWind;
uniform 	vec4 _LocalWindsMapCameraInfo;
uniform 	float _GrassTipLighting;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BurnedColor;
uniform 	float _RootColorScale;
uniform 	float _RootColorOffset;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _Heightmap;
uniform lowp sampler2D _Noisemap;
uniform lowp sampler2D _LocalWindsMap;
in highp vec4 in_POSITION0;
in highp vec4 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec2 in_TEXCOORD2;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp float vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec3 u_xlat0;
int u_xlati0;
vec3 u_xlat1;
uvec3 u_xlatu1;
vec4 u_xlat2;
uvec3 u_xlatu2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
uvec2 u_xlatu5;
vec4 u_xlat6;
vec3 u_xlat7;
vec2 u_xlat8;
float u_xlat9;
int u_xlati9;
float u_xlat11;
uint u_xlatu11;
int u_xlati18;
float u_xlat20;
vec2 u_xlat23;
float u_xlat27;
bool u_xlatb27;
float u_xlat28;
uint u_xlatu28;
bool u_xlatb28;
float u_xlat29;
bool u_xlatb29;
float u_xlat30;
void main()
{
    u_xlat0.z = 0.0;
    u_xlati9 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati9 = u_xlati9 << 2;
    u_xlat1.xyz = in_TEXCOORD0.yyy * unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_TEXCOORD0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat2.xy = u_xlat1.xz + (-_LocalWindsMapSize.xy);
    u_xlat2.xy = vec2(u_xlat2.x / _LocalWindsMapSize.z, u_xlat2.y / _LocalWindsMapSize.w);
    u_xlat2.xy = u_xlat2.xy + vec2(0.5, 0.5);
    u_xlat2 = textureLod(_LocalWindsMap, u_xlat2.xy, 0.0);
    u_xlat27 = dot(u_xlat2.xy, u_xlat2.xy);
    u_xlat27 = sqrt(u_xlat27);
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(9.99999975e-05>=u_xlat27);
#else
    u_xlatb27 = 9.99999975e-05>=u_xlat27;
#endif
    u_xlat27 = u_xlatb27 ? 1.0 : float(0.0);
    u_xlat3.xy = (-u_xlat2.xy) + vec2(0.5, 0.5);
    u_xlat2.xy = vec2(u_xlat27) * u_xlat3.xy + u_xlat2.xy;
    u_xlat2.xy = u_xlat2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat27 = dot(u_xlat2.xy, u_xlat2.xy);
    u_xlat27 = max(u_xlat27, 0.00100000005);
    u_xlat3.x = inversesqrt(u_xlat27);
    u_xlat3.yz = u_xlat2.xy * u_xlat3.xx;
    u_xlat0.x = u_xlat3.z;
    u_xlat0.xz = (-u_xlat3.xy) * vec2(0.0, 1.0) + u_xlat0.xz;
    u_xlat27 = (-in_TEXCOORD1.x) + unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].x;
    u_xlat28 = u_xlat27 * 3.0;
    u_xlat28 = _Time.y * 3.0 + u_xlat28;
    u_xlat28 = u_xlat28 + 0.5;
    u_xlat28 = fract(u_xlat28);
    u_xlat28 = u_xlat28 * 2.0 + -1.0;
    u_xlat3.x = abs(u_xlat28) * abs(u_xlat28);
    u_xlat28 = -abs(u_xlat28) * 2.0 + 3.0;
    u_xlat28 = u_xlat28 * u_xlat3.x;
    u_xlat3.x = u_xlat2.z * 1.5;
    u_xlat28 = u_xlat28 * u_xlat3.x;
    u_xlat0.xz = u_xlat0.xz * vec2(u_xlat28);
    u_xlat0.xz = u_xlat0.xz * vec2(0.150000006, 0.150000006);
    u_xlat0.xz = u_xlat3.yz * vec2(u_xlat28) + u_xlat0.xz;
    u_xlat0.xz = u_xlat0.xz + u_xlat2.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlatb28 = !!(0.00199999986<u_xlat2.z);
#else
    u_xlatb28 = 0.00199999986<u_xlat2.z;
#endif
    u_xlat20 = (-u_xlat2.w) * _LocalWindsMapCameraInfo.y + _LocalWindsMapCameraInfo.x;
    u_xlat0.xz = (bool(u_xlatb28)) ? u_xlat0.xz : u_xlat2.xy;
    u_xlat2.xy = vec2(_WorldOffsetRange.z + float(2.0), _WorldOffsetRange.w + float(2.0));
    u_xlat3.xy = u_xlat1.xz + (-_WorldOffsetRange.xy);
    u_xlat3.xy = u_xlat3.xy + vec2(1.0, 1.0);
    u_xlat2.xy = u_xlat3.xy / u_xlat2.xy;
    u_xlat2.xy = u_xlat2.xy * _WorldOffsetRange.zw + vec2(-0.5, -0.5);
    u_xlat3.xy = floor(u_xlat2.xy);
    u_xlat2.xy = u_xlat2.xy + (-u_xlat3.xy);
    u_xlat4 = u_xlat3.xyxy + vec4(0.5, 1.5, 1.5, 1.5);
    u_xlat3 = u_xlat3.xyxy + vec4(1.5, 0.5, 0.5, 0.5);
    u_xlat3 = vec4(u_xlat3.x / _WorldOffsetRange.z, u_xlat3.y / _WorldOffsetRange.w, u_xlat3.z / _WorldOffsetRange.z, u_xlat3.w / _WorldOffsetRange.w);
    u_xlat4 = vec4(u_xlat4.x / _WorldOffsetRange.z, u_xlat4.y / _WorldOffsetRange.w, u_xlat4.z / _WorldOffsetRange.z, u_xlat4.w / _WorldOffsetRange.w);
    u_xlat28 = textureLod(_Heightmap, u_xlat4.zw, 0.0).x;
    u_xlat29 = textureLod(_Heightmap, u_xlat4.xy, 0.0).x;
    u_xlat28 = u_xlat28 + (-u_xlat29);
    u_xlat28 = u_xlat2.x * u_xlat28 + u_xlat29;
    u_xlat29 = textureLod(_Heightmap, u_xlat3.xy, 0.0).x;
    u_xlat3.x = textureLod(_Heightmap, u_xlat3.zw, 0.0).x;
    u_xlat29 = u_xlat29 + (-u_xlat3.x);
    u_xlat2.x = u_xlat2.x * u_xlat29 + u_xlat3.x;
    u_xlat28 = u_xlat28 + (-u_xlat2.x);
    u_xlat28 = u_xlat2.y * u_xlat28 + u_xlat2.x;
    u_xlat2.x = u_xlat28 * _HeightScale + u_xlat1.y;
    u_xlat2.x = (-u_xlat2.x) + u_xlat20;
    u_xlat2.x = u_xlat2.x * 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat2.x = (-u_xlat2.x) + 1.0;
    u_xlat11 = float(floatBitsToUint(unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2]).w);
    u_xlat11 = u_xlat11 * 5.96046448e-08;
    u_xlatu11 = uint(u_xlat11);
    u_xlatu11 = u_xlatu11 & 3u;
    u_xlat11 = float(u_xlatu11);
    u_xlat20 = fract(u_xlat27);
    u_xlat27 = u_xlat27 + unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].y;
    u_xlat3.xy = vec2(u_xlat27) * vec2(22.0, 33.0);
    u_xlat3.xy = fract(u_xlat3.xy);
    u_xlat3.xy = u_xlat3.xy + vec2(-0.5, -0.5);
    u_xlat3.xz = u_xlat3.xy * vec2(0.200000003, 0.200000003);
    u_xlat27 = u_xlat11 + u_xlat20;
    u_xlat27 = u_xlat27 + -0.5;
    u_xlat11 = u_xlat27 * 0.333000004;
    u_xlat4.y = u_xlat27 * 0.333000004 + -1.0;
    u_xlat27 = in_TEXCOORD1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
    u_xlat11 = u_xlat11 * u_xlat27;
    u_xlat2.x = u_xlat11 * u_xlat2.x;
    u_xlat0.xz = u_xlat0.xz * u_xlat2.xx;
    u_xlat0.xz = u_xlat0.xz * vec2(vec2(_VegetationMoveScale, _VegetationMoveScale));
    u_xlat2.x = dot(_GlobalWind.xyz, _GlobalWind.xyz);
    u_xlat2.x = max(u_xlat2.x, 0.00100000005);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat5 = u_xlat2.xxxx * _GlobalWind.xzxz;
    u_xlat2.xz = vec2(u_xlat5.z * _LargeWindParam.z, u_xlat5.w * _LargeWindParam.z);
    u_xlat23.xy = u_xlat1.xz / vec2(_NoiseScale);
    u_xlat5.xy = _LargeWindParam.xx * u_xlat5.xy + u_xlat23.xy;
    u_xlat5.xy = textureLod(_Noisemap, u_xlat5.xy, 0.0).xy;
    u_xlat5.xy = u_xlat5.xy + vec2(-0.5, -0.5);
    u_xlat5.xy = u_xlat5.xy * _LargeWindParam.yy + vec2(0.5, 0.5);
    u_xlat5.xy = vec2(u_xlat11) * u_xlat5.xy;
    u_xlat6.xz = u_xlat5.xy * u_xlat2.xz + u_xlat0.xz;
    u_xlat2.xz = u_xlat2.xz * u_xlat5.xy;
    u_xlat6.y = 0.0;
    u_xlat5.y = hlslcc_mtx4x4unity_MatrixV[0].x;
    u_xlat5.x = hlslcc_mtx4x4unity_MatrixV[2].x;
    u_xlat29 = dot(u_xlat5.xy, u_xlat5.xy);
    u_xlat29 = inversesqrt(u_xlat29);
    u_xlat5.xy = vec2(u_xlat29) * u_xlat5.xy;
    u_xlat7.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat7.xyz = unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat7.xyz;
    u_xlat7.xyz = unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat7.xyz;
    u_xlat7.xyz = u_xlat7.xyz + unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat7.xyz = (-u_xlat1.xyz) + u_xlat7.xyz;
    u_xlat8.x = unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].x;
    u_xlat8.y = unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].x;
    u_xlat29 = dot(u_xlat8.xy, u_xlat8.xy);
    u_xlat29 = inversesqrt(u_xlat29);
    u_xlat23.xy = vec2(u_xlat29) * u_xlat8.xy;
    u_xlat29 = u_xlat23.y * u_xlat7.z;
    u_xlat29 = u_xlat7.x * u_xlat23.x + (-u_xlat29);
    u_xlat30 = dot(u_xlat7.zx, u_xlat23.xy);
    u_xlat23.xy = u_xlat5.xy * vec2(u_xlat30);
    u_xlat30 = u_xlat29 * u_xlat5.y + (-u_xlat23.x);
    u_xlat29 = u_xlat29 * u_xlat5.x + u_xlat23.y;
    u_xlat29 = u_xlat7.z + u_xlat29;
    u_xlat7.z = (-u_xlat29) * _Billboard + u_xlat7.z;
    u_xlat29 = u_xlat7.x + u_xlat30;
    u_xlat7.x = (-u_xlat29) * _Billboard + u_xlat7.x;
    u_xlat5.xyz = u_xlat7.xyz * vec3(0.100000001, 1.0, 0.100000001) + u_xlat6.xyz;
    u_xlat29 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat29 = max(u_xlat29, 0.00100000005);
    u_xlat29 = inversesqrt(u_xlat29);
    u_xlat5.xyz = vec3(u_xlat29) * u_xlat5.xyz;
    u_xlat29 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat29 = sqrt(u_xlat29);
    u_xlat6.xyz = u_xlat7.xyz * vec3(0.100000001, 1.0, 0.100000001);
    u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat29) + (-u_xlat6.xyz);
    u_xlat6.xyz = u_xlat1.xyz + u_xlat7.xyz;
    u_xlat6.w = u_xlat28 * _HeightScale + u_xlat6.y;
    u_xlat1.xyz = u_xlat5.xyz + u_xlat6.xwz;
    u_xlatu5.xy = uvec2(65280u, 255u) & floatBitsToUint(unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1]).ww;
    u_xlat5.xy = vec2(u_xlatu5.xy);
    u_xlat28 = u_xlat5.x * 0.00390625;
    u_xlat5.z = u_xlat5.y + -127.0;
    u_xlatu28 = uint(u_xlat28);
    u_xlat28 = float(u_xlatu28);
    u_xlat5.x = u_xlat28 + -127.0;
    u_xlat6.xy = u_xlat5.xz * vec2(0.00787401572, 0.00787401572);
    u_xlat6.xy = u_xlat6.xy * u_xlat6.xy;
    u_xlat28 = u_xlat6.y + u_xlat6.x;
    u_xlat28 = (-u_xlat28) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb29 = !!(0.0<u_xlat28);
#else
    u_xlatb29 = 0.0<u_xlat28;
#endif
    u_xlat28 = sqrt(u_xlat28);
    u_xlat5.y = u_xlatb29 ? u_xlat28 : float(0.0);
    u_xlat6.xyz = u_xlat5.xyz * u_xlat7.yyy;
    u_xlat6.xyz = vec3(u_xlat11) * u_xlat6.xyz;
    u_xlat28 = max(u_xlat11, 9.99999972e-10);
    u_xlat1.xyz = u_xlat6.xyz * vec3(0.00393700786, 0.0, 0.00393700786) + u_xlat1.xyz;
    u_xlat4.xz = u_xlat4.yy * (-u_xlat4.yy);
    u_xlat1.xyz = u_xlat4.xyz * u_xlat7.xyz + u_xlat1.xyz;
    u_xlat4.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat6 = u_xlat4.yyyy * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat6 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat4.xxxx + u_xlat6;
    u_xlat4 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat4.zzzz + u_xlat6;
    gl_Position = u_xlat4 + hlslcc_mtx4x4unity_MatrixVPZero[3];
    u_xlat3.y = 0.0;
    vs_TEXCOORD0.xyz = u_xlat5.xyz * vec3(0.00787401572, 1.0, 0.00787401572) + u_xlat3.xyz;
    vs_TEXCOORD0.w = 0.0;
    u_xlat0.xz = u_xlat0.zx / vec2(u_xlat28);
    u_xlat2.xy = u_xlat2.zx / vec2(u_xlat28);
    u_xlat2.yz = u_xlat0.xz + u_xlat2.xy;
    u_xlat2.x = 0.0;
    u_xlat2.xyz = u_xlat5.yzx * vec3(1.0, 0.00787401572, 0.00787401572) + u_xlat2.xyz;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat3.xyz = in_NORMAL0.yyy * unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_NORMAL0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_NORMAL0.zzz + u_xlat3.xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
    u_xlat3.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
    u_xlat2.xyz = u_xlat3.zxy * u_xlat2.yzx + (-u_xlat4.xyz);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
    { bool cond = 0.0<u_xlat0.x; u_xlati18 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati18 = int((0.0<u_xlat0.x) ? 0xFFFFFFFFu : uint(0u));
#endif
#ifdef UNITY_ADRENO_ES3
    { bool cond = u_xlat0.x<0.0; u_xlati0 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati0 = int((u_xlat0.x<0.0) ? 0xFFFFFFFFu : uint(0u));
#endif
    u_xlati0 = (-u_xlati18) + u_xlati0;
    u_xlat0.x = float(u_xlati0);
    vs_TEXCOORD1.xyz = u_xlat0.xxx * u_xlat2.xyz;
    vs_TEXCOORD1.w = 0.0;
    u_xlatu1.xyz = uvec3(16711680u, 65280u, 255u) & floatBitsToUint(unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2]).www;
    u_xlat1.xyz = vec3(u_xlatu1.xyz);
    u_xlatu2.xyz = uvec3(16711680u, 65280u, 255u) & floatBitsToUint(unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3]).www;
    u_xlat0.x = max(1.0, unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].w);
    u_xlat0.x = min(u_xlat0.x, 2.0);
    u_xlat0.x = u_xlat0.x + -1.0;
    u_xlat2.xyz = vec3(u_xlatu2.xyz);
    u_xlat2.xyz = u_xlat2.xyz * vec3(5.9838392e-08, 1.53186284e-05, 0.00392156886);
    u_xlat1.xyz = u_xlat1.xyz * vec3(5.9838392e-08, 1.53186284e-05, 0.00392156886) + (-u_xlat2.xyz);
    u_xlat9 = u_xlat27 / _RootColorScale;
    u_xlat9 = u_xlat9 + _RootColorOffset;
#ifdef UNITY_ADRENO_ES3
    u_xlat9 = min(max(u_xlat9, 0.0), 1.0);
#else
    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz + u_xlat2.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _BurnedColor.xyz;
    u_xlat1.xyz = u_xlat0.xxx * u_xlat2.xyz + u_xlat1.xyz;
    vs_TEXCOORD2.w = u_xlat0.x;
    u_xlat0.x = u_xlat27 + -0.600000024;
    vs_TEXCOORD3 = u_xlat27;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = _GrassTipLighting * u_xlat0.x + 1.0;
    vs_TEXCOORD2.xyz = u_xlat0.xxx * u_xlat1.xyz;
    vs_TEXCOORD4.xy = in_TEXCOORD2.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	float _GrassShininess;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	float _CutOff;
uniform 	vec4 _BurnedColor;
uniform lowp sampler2D _MainTex;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp float vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec4 u_xlat0;
lowp vec4 u_xlat10_0;
bool u_xlatb0;
vec3 u_xlat1;
mediump float u_xlat16_2;
float u_xlat9;
bool u_xlatb9;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD4.xy);
    u_xlat9 = u_xlat10_0.w + (-_CutOff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(u_xlat9<0.0);
#else
    u_xlatb9 = u_xlat9<0.0;
#endif
    if((int(u_xlatb9) * int(0xffffffffu))!=0){discard;}
    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
    SV_Target0.xyz = u_xlat1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0;
    u_xlat1.xyz = _BurnedColor.xyz * u_xlat10_0.xyz + (-u_xlat10_0.xyz);
    u_xlat0.xyz = vs_TEXCOORD2.www * u_xlat1.xyz + u_xlat10_0.xyz;
    u_xlat0.w = vs_TEXCOORD3;
    SV_Target1 = u_xlat0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_2 = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb0) ? u_xlat16_2 : 0.0399999991;
    u_xlat0.x = (-vs_TEXCOORD2.w) + 1.0;
    u_xlat0.x = u_xlat0.x * _GrassShininess;
    SV_Target2.w = u_xlat0.x;
    SV_Target2.xy = vec2(0.0399999991, 0.0399999991);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "MHY_SHADER_LOW" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	float _NoiseScale;
uniform 	vec4 _WorldOffsetRange;
uniform 	float _HeightScale;
uniform 	float _Billboard;
uniform 	vec4 _LargeWindParam;
uniform 	vec4 _GlobalWind;
uniform 	float _GrassTipLighting;
uniform 	vec4 _MainTex_ST;
uniform 	float _RootColorScale;
uniform 	float _RootColorOffset;
uniform highp sampler2D _Heightmap;
uniform lowp sampler2D _Noisemap;
in highp vec4 in_POSITION0;
in highp vec4 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec2 in_TEXCOORD2;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp float vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec3 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
vec3 u_xlat5;
vec3 u_xlat6;
vec4 u_xlat7;
int u_xlati8;
vec2 u_xlat9;
vec2 u_xlat17;
float u_xlat24;
float u_xlat25;
float u_xlat26;
float u_xlat27;
void main()
{
    u_xlat0.y = 0.0;
    u_xlat24 = dot(_GlobalWind.xyz, _GlobalWind.xyz);
    u_xlat24 = max(u_xlat24, 0.00100000005);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat1 = vec4(u_xlat24) * _GlobalWind.xzxz;
    u_xlat17.xy = vec2(u_xlat1.z * _LargeWindParam.z, u_xlat1.w * _LargeWindParam.z);
    u_xlat2.xyz = in_TEXCOORD0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[2].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TEXCOORD0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat3.xy = u_xlat2.xz / vec2(_NoiseScale);
    u_xlat1.xy = _LargeWindParam.xx * u_xlat1.xy + u_xlat3.xy;
    u_xlat1.xy = textureLod(_Noisemap, u_xlat1.xy, 0.0).xy;
    u_xlat1.xy = u_xlat1.xy + vec2(-0.5, -0.5);
    u_xlat1.xy = u_xlat1.xy * _LargeWindParam.yy + vec2(0.5, 0.5);
    u_xlat24 = (-in_TEXCOORD1.x) + hlslcc_mtx4x4unity_ObjectToWorld[1].x;
    u_xlat26 = fract(u_xlat24);
    u_xlat24 = u_xlat24 + hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat3.xy = vec2(u_xlat24) * vec2(22.0, 33.0);
    u_xlat3.xy = fract(u_xlat3.xy);
    u_xlat3.xy = u_xlat3.xy + vec2(-0.5, -0.5);
    u_xlat3.xz = u_xlat3.xy * vec2(0.200000003, 0.200000003);
    u_xlat24 = u_xlat26 + -0.5;
    u_xlat26 = u_xlat24 * 0.333000004;
    u_xlat4.y = u_xlat24 * 0.333000004 + -1.0;
    u_xlat24 = in_TEXCOORD1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat26 = u_xlat26 * u_xlat24;
    u_xlat1.xy = u_xlat1.xy * vec2(u_xlat26);
    u_xlat0.xz = u_xlat17.xy * u_xlat1.xy;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[0].x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[2].x;
    u_xlat17.x = dot(u_xlat1.xy, u_xlat1.xy);
    u_xlat17.x = inversesqrt(u_xlat17.x);
    u_xlat1.xy = u_xlat17.xx * u_xlat1.xy;
    u_xlat5.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;
    u_xlat5.y = hlslcc_mtx4x4unity_ObjectToWorld[2].x;
    u_xlat17.x = dot(u_xlat5.xy, u_xlat5.xy);
    u_xlat17.x = inversesqrt(u_xlat17.x);
    u_xlat17.xy = u_xlat17.xx * u_xlat5.xy;
    u_xlat5.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat5.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat5.xyz;
    u_xlat5.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat5.xyz;
    u_xlat5.xyz = u_xlat5.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat5.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
    u_xlat27 = u_xlat17.y * u_xlat5.z;
    u_xlat27 = u_xlat5.x * u_xlat17.x + (-u_xlat27);
    u_xlat17.x = dot(u_xlat5.zx, u_xlat17.xy);
    u_xlat17.xy = u_xlat1.xy * u_xlat17.xx;
    u_xlat9.x = u_xlat27 * u_xlat1.y + (-u_xlat17.x);
    u_xlat1.x = u_xlat27 * u_xlat1.x + u_xlat17.y;
    u_xlat1.x = u_xlat5.z + u_xlat1.x;
    u_xlat5.z = (-u_xlat1.x) * _Billboard + u_xlat5.z;
    u_xlat1.x = u_xlat5.x + u_xlat9.x;
    u_xlat5.x = (-u_xlat1.x) * _Billboard + u_xlat5.x;
    u_xlat1.x = u_xlat26 * u_xlat5.y;
    u_xlat9.x = max(u_xlat26, 9.99999972e-10);
    u_xlat9.xy = u_xlat0.zx / u_xlat9.xx;
    u_xlat0.xyz = u_xlat5.xyz * vec3(0.100000001, 1.0, 0.100000001) + u_xlat0.xyz;
    u_xlat6.yz = u_xlat9.xy + vec2(-1.0, -1.0);
    u_xlat9.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9.x = max(u_xlat9.x, 0.00100000005);
    u_xlat9.x = inversesqrt(u_xlat9.x);
    u_xlat0.xyz = u_xlat0.xyz * u_xlat9.xxx;
    u_xlat9.x = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat9.x = sqrt(u_xlat9.x);
    u_xlat7.xyz = u_xlat5.xyz * vec3(0.100000001, 1.0, 0.100000001);
    u_xlat0.xyz = u_xlat0.xyz * u_xlat9.xxx + (-u_xlat7.xyz);
    u_xlat7.xyz = u_xlat2.xyz + u_xlat5.xyz;
    u_xlat9.xy = u_xlat2.xz + (-_WorldOffsetRange.xy);
    u_xlat9.xy = u_xlat9.xy + vec2(1.0, 1.0);
    u_xlat2.xy = vec2(_WorldOffsetRange.z + float(2.0), _WorldOffsetRange.w + float(2.0));
    u_xlat9.xy = u_xlat9.xy / u_xlat2.xy;
    u_xlat9.x = textureLod(_Heightmap, u_xlat9.xy, 0.0).x;
    u_xlat7.w = u_xlat9.x * _HeightScale + u_xlat7.y;
    u_xlat0.xyz = u_xlat0.xyz + u_xlat7.xwz;
    u_xlat0.xyz = u_xlat1.xxx * vec3(-0.5, 0.0, -0.5) + u_xlat0.xyz;
    u_xlat4.xz = u_xlat4.yy * (-u_xlat4.yy);
    u_xlat0.xyz = u_xlat4.xyz * u_xlat5.xyz + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVPZero[3];
    u_xlat3.y = 0.0;
    vs_TEXCOORD0.xyz = u_xlat3.xyz + vec3(-1.0, 0.0, -1.0);
    vs_TEXCOORD0.w = 0.0;
    u_xlat1.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xxx;
    u_xlat1.x = dot(u_xlat6.yz, u_xlat6.yz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat6.x = 0.0;
    u_xlat1.xyz = u_xlat1.xxx * u_xlat6.xyz;
    u_xlat2.xyz = in_NORMAL0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_NORMAL0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_NORMAL0.zzz + u_xlat2.xyz;
    u_xlat25 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat25 = inversesqrt(u_xlat25);
    u_xlat2.xyz = vec3(u_xlat25) * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
    u_xlat25 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat25 = inversesqrt(u_xlat25);
    u_xlat2.xyz = vec3(u_xlat25) * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.zxy * u_xlat1.yzx + (-u_xlat3.xyz);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
#ifdef UNITY_ADRENO_ES3
    { bool cond = 0.0<u_xlat0.x; u_xlati8 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati8 = int((0.0<u_xlat0.x) ? 0xFFFFFFFFu : uint(0u));
#endif
#ifdef UNITY_ADRENO_ES3
    { bool cond = u_xlat0.x<0.0; u_xlati0 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati0 = int((u_xlat0.x<0.0) ? 0xFFFFFFFFu : uint(0u));
#endif
    u_xlati0 = (-u_xlati8) + u_xlati0;
    u_xlat0.x = float(u_xlati0);
    vs_TEXCOORD1.xyz = u_xlat0.xxx * u_xlat1.xyz;
    vs_TEXCOORD1.w = 0.0;
    u_xlat0.x = u_xlat24 / _RootColorScale;
    u_xlat0.x = u_xlat0.x + _RootColorOffset;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xxx * vec3(-0.501960814, 0.0, 0.0) + vec3(0.501960814, 0.0, 0.0);
    u_xlat1.x = u_xlat24 + -0.600000024;
    vs_TEXCOORD3 = u_xlat24;
    u_xlat24 = max(u_xlat1.x, 0.0);
    u_xlat24 = _GrassTipLighting * u_xlat24 + 1.0;
    vs_TEXCOORD2.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    vs_TEXCOORD2.w = 0.0;
    vs_TEXCOORD4.xy = in_TEXCOORD2.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	float _GrassShininess;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	float _CutOff;
uniform 	vec4 _BurnedColor;
uniform lowp sampler2D _MainTex;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp float vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec4 u_xlat0;
lowp vec4 u_xlat10_0;
bool u_xlatb0;
vec3 u_xlat1;
mediump float u_xlat16_2;
float u_xlat9;
bool u_xlatb9;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD4.xy);
    u_xlat9 = u_xlat10_0.w + (-_CutOff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(u_xlat9<0.0);
#else
    u_xlatb9 = u_xlat9<0.0;
#endif
    if((int(u_xlatb9) * int(0xffffffffu))!=0){discard;}
    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
    SV_Target0.xyz = u_xlat1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0;
    u_xlat1.xyz = _BurnedColor.xyz * u_xlat10_0.xyz + (-u_xlat10_0.xyz);
    u_xlat0.xyz = vs_TEXCOORD2.www * u_xlat1.xyz + u_xlat10_0.xyz;
    u_xlat0.w = vs_TEXCOORD3;
    SV_Target1 = u_xlat0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_2 = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb0) ? u_xlat16_2 : 0.0399999991;
    u_xlat0.x = (-vs_TEXCOORD2.w) + 1.0;
    u_xlat0.x = u_xlat0.x * _GrassShininess;
    SV_Target2.w = u_xlat0.x;
    SV_Target2.xy = vec2(0.0399999991, 0.0399999991);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MHY_SHADER_LOW" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	int unity_BaseInstanceID;
uniform 	float _NoiseScale;
uniform 	vec4 _WorldOffsetRange;
uniform 	float _HeightScale;
uniform 	float _Billboard;
uniform 	vec4 _LargeWindParam;
uniform 	vec4 _GlobalWind;
uniform 	float _GrassTipLighting;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BurnedColor;
uniform 	float _RootColorScale;
uniform 	float _RootColorOffset;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _Heightmap;
uniform lowp sampler2D _Noisemap;
in highp vec4 in_POSITION0;
in highp vec4 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec2 in_TEXCOORD2;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp float vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec3 u_xlat0;
uvec3 u_xlatu0;
vec4 u_xlat1;
int u_xlati1;
uvec3 u_xlatu1;
vec3 u_xlat2;
uvec2 u_xlatu2;
vec4 u_xlat3;
vec3 u_xlat4;
vec4 u_xlat5;
vec4 u_xlat6;
vec2 u_xlat7;
float u_xlat8;
uint u_xlatu8;
float u_xlat9;
int u_xlati9;
vec3 u_xlat11;
vec2 u_xlat17;
float u_xlat24;
int u_xlati24;
float u_xlat25;
bool u_xlatb25;
float u_xlat26;
uint u_xlatu26;
float u_xlat28;
void main()
{
    u_xlat0.y = 0.0;
    u_xlat24 = dot(_GlobalWind.xyz, _GlobalWind.xyz);
    u_xlat24 = max(u_xlat24, 0.00100000005);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat1 = vec4(u_xlat24) * _GlobalWind.xzxz;
    u_xlat17.xy = vec2(u_xlat1.z * _LargeWindParam.z, u_xlat1.w * _LargeWindParam.z);
    u_xlati24 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati24 = u_xlati24 << 2;
    u_xlat2.xyz = in_TEXCOORD0.yyy * unity_Builtins0Array[u_xlati24 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz;
    u_xlat2.xyz = unity_Builtins0Array[u_xlati24 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_TEXCOORD0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz + unity_Builtins0Array[u_xlati24 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat3.xy = u_xlat2.xz / vec2(_NoiseScale);
    u_xlat1.xy = _LargeWindParam.xx * u_xlat1.xy + u_xlat3.xy;
    u_xlat1.xy = textureLod(_Noisemap, u_xlat1.xy, 0.0).xy;
    u_xlat1.xy = u_xlat1.xy + vec2(-0.5, -0.5);
    u_xlat1.xy = u_xlat1.xy * _LargeWindParam.yy + vec2(0.5, 0.5);
    u_xlat26 = float(floatBitsToUint(unity_Builtins0Array[u_xlati24 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2]).w);
    u_xlat26 = u_xlat26 * 5.96046448e-08;
    u_xlatu26 = uint(u_xlat26);
    u_xlatu26 = u_xlatu26 & 3u;
    u_xlat26 = float(u_xlatu26);
    u_xlat3.x = (-in_TEXCOORD1.x) + unity_Builtins0Array[u_xlati24 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].x;
    u_xlat11.x = fract(u_xlat3.x);
    u_xlat3.x = u_xlat3.x + unity_Builtins0Array[u_xlati24 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].y;
    u_xlat3.xz = u_xlat3.xx * vec2(22.0, 33.0);
    u_xlat3.xz = fract(u_xlat3.xz);
    u_xlat3.xz = u_xlat3.xz + vec2(-0.5, -0.5);
    u_xlat4.xz = u_xlat3.xz * vec2(0.200000003, 0.200000003);
    u_xlat26 = u_xlat26 + u_xlat11.x;
    u_xlat26 = u_xlat26 + -0.5;
    u_xlat3.x = u_xlat26 * 0.333000004;
    u_xlat5.y = u_xlat26 * 0.333000004 + -1.0;
    u_xlat26 = in_TEXCOORD1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat26 = min(max(u_xlat26, 0.0), 1.0);
#else
    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);
#endif
    u_xlat3.x = u_xlat3.x * u_xlat26;
    u_xlat1.xy = u_xlat1.xy * u_xlat3.xx;
    u_xlat0.xz = u_xlat17.xy * u_xlat1.xy;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[0].x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[2].x;
    u_xlat17.x = dot(u_xlat1.xy, u_xlat1.xy);
    u_xlat17.x = inversesqrt(u_xlat17.x);
    u_xlat1.xy = u_xlat17.xx * u_xlat1.xy;
    u_xlat11.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati24 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat11.xyz = unity_Builtins0Array[u_xlati24 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat11.xyz;
    u_xlat11.xyz = unity_Builtins0Array[u_xlati24 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat11.xyz;
    u_xlat11.xyz = u_xlat11.xyz + unity_Builtins0Array[u_xlati24 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat11.xyz = (-u_xlat2.xyz) + u_xlat11.xyz;
    u_xlat6.x = unity_Builtins0Array[u_xlati24 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].x;
    u_xlat6.y = unity_Builtins0Array[u_xlati24 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].x;
    u_xlat17.x = dot(u_xlat6.xy, u_xlat6.xy);
    u_xlat17.x = inversesqrt(u_xlat17.x);
    u_xlat17.xy = u_xlat17.xx * u_xlat6.xy;
    u_xlat28 = u_xlat17.y * u_xlat11.z;
    u_xlat28 = u_xlat11.x * u_xlat17.x + (-u_xlat28);
    u_xlat17.x = dot(u_xlat11.zx, u_xlat17.xy);
    u_xlat17.xy = u_xlat1.xy * u_xlat17.xx;
    u_xlat9 = u_xlat28 * u_xlat1.y + (-u_xlat17.x);
    u_xlat1.x = u_xlat28 * u_xlat1.x + u_xlat17.y;
    u_xlat1.x = u_xlat11.z + u_xlat1.x;
    u_xlat11.z = (-u_xlat1.x) * _Billboard + u_xlat11.z;
    u_xlat1.x = u_xlat11.x + u_xlat9;
    u_xlat11.x = (-u_xlat1.x) * _Billboard + u_xlat11.x;
    u_xlat1.xyz = u_xlat11.xyz * vec3(0.100000001, 1.0, 0.100000001) + u_xlat0.xyz;
    u_xlat8 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat8 = max(u_xlat8, 0.00100000005);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat1.xyz = vec3(u_xlat8) * u_xlat1.xyz;
    u_xlat8 = dot(u_xlat11.xyz, u_xlat11.xyz);
    u_xlat8 = sqrt(u_xlat8);
    u_xlat6.xyz = u_xlat11.xyz * vec3(0.100000001, 1.0, 0.100000001);
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat8) + (-u_xlat6.xyz);
    u_xlat6.xyz = u_xlat2.xyz + u_xlat11.xyz;
    u_xlat2.xy = u_xlat2.xz + (-_WorldOffsetRange.xy);
    u_xlat2.xy = u_xlat2.xy + vec2(1.0, 1.0);
    u_xlat7.xy = vec2(_WorldOffsetRange.z + float(2.0), _WorldOffsetRange.w + float(2.0));
    u_xlat2.xy = u_xlat2.xy / u_xlat7.xy;
    u_xlat8 = textureLod(_Heightmap, u_xlat2.xy, 0.0).x;
    u_xlat6.w = u_xlat8 * _HeightScale + u_xlat6.y;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat6.xwz;
    u_xlatu2.xy = uvec2(65280u, 255u) & floatBitsToUint(unity_Builtins0Array[u_xlati24 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1]).ww;
    u_xlat2.xy = vec2(u_xlatu2.xy);
    u_xlat8 = u_xlat2.x * 0.00390625;
    u_xlat2.z = u_xlat2.y + -127.0;
    u_xlatu8 = uint(u_xlat8);
    u_xlat8 = float(u_xlatu8);
    u_xlat2.x = u_xlat8 + -127.0;
    u_xlat6.xy = u_xlat2.xz * vec2(0.00787401572, 0.00787401572);
    u_xlat6.xy = u_xlat6.xy * u_xlat6.xy;
    u_xlat8 = u_xlat6.y + u_xlat6.x;
    u_xlat8 = (-u_xlat8) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb25 = !!(0.0<u_xlat8);
#else
    u_xlatb25 = 0.0<u_xlat8;
#endif
    u_xlat8 = sqrt(u_xlat8);
    u_xlat2.y = u_xlatb25 ? u_xlat8 : float(0.0);
    u_xlat6.xyz = u_xlat2.xyz * u_xlat11.yyy;
    u_xlat6.xyz = u_xlat3.xxx * u_xlat6.xyz;
    u_xlat8 = max(u_xlat3.x, 9.99999972e-10);
    u_xlat0.yz = u_xlat0.zx / vec2(u_xlat8);
    u_xlat1.xyz = u_xlat6.xyz * vec3(0.00393700786, 0.0, 0.00393700786) + u_xlat1.xyz;
    u_xlat5.xz = u_xlat5.yy * (-u_xlat5.yy);
    u_xlat1.xyz = u_xlat5.xyz * u_xlat11.xyz + u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat5 = u_xlat3.yyyy * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat5 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat3.xxxx + u_xlat5;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat3.zzzz + u_xlat5;
    gl_Position = u_xlat3 + hlslcc_mtx4x4unity_MatrixVPZero[3];
    u_xlat4.y = 0.0;
    vs_TEXCOORD0.xyz = u_xlat2.xyz * vec3(0.00787401572, 1.0, 0.00787401572) + u_xlat4.xyz;
    vs_TEXCOORD0.w = 0.0;
    u_xlat0.x = 0.0;
    u_xlat0.xyz = u_xlat2.yzx * vec3(1.0, 0.00787401572, 0.00787401572) + u_xlat0.xyz;
    u_xlat25 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat25 = inversesqrt(u_xlat25);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat25);
    u_xlat2.xyz = in_NORMAL0.yyy * unity_Builtins0Array[u_xlati24 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat2.xyz = unity_Builtins0Array[u_xlati24 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_NORMAL0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = unity_Builtins0Array[u_xlati24 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_NORMAL0.zzz + u_xlat2.xyz;
    u_xlat25 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat25 = inversesqrt(u_xlat25);
    u_xlat2.xyz = vec3(u_xlat25) * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat0.xyz * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat0.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
    u_xlat25 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat25 = inversesqrt(u_xlat25);
    u_xlat2.xyz = vec3(u_xlat25) * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat0.xyz * u_xlat2.xyz;
    u_xlat0.xyz = u_xlat2.zxy * u_xlat0.yzx + (-u_xlat3.xyz);
    u_xlat25 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat25 = inversesqrt(u_xlat25);
    u_xlat1.xyz = vec3(u_xlat25) * u_xlat1.xyz;
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat0.xyz);
#ifdef UNITY_ADRENO_ES3
    { bool cond = 0.0<u_xlat1.x; u_xlati9 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati9 = int((0.0<u_xlat1.x) ? 0xFFFFFFFFu : uint(0u));
#endif
#ifdef UNITY_ADRENO_ES3
    { bool cond = u_xlat1.x<0.0; u_xlati1 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati1 = int((u_xlat1.x<0.0) ? 0xFFFFFFFFu : uint(0u));
#endif
    u_xlati1 = (-u_xlati9) + u_xlati1;
    u_xlat1.x = float(u_xlati1);
    vs_TEXCOORD1.xyz = u_xlat0.xyz * u_xlat1.xxx;
    vs_TEXCOORD1.w = 0.0;
    u_xlatu0.xyz = uvec3(16711680u, 65280u, 255u) & floatBitsToUint(unity_Builtins0Array[u_xlati24 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2]).www;
    u_xlat0.xyz = vec3(u_xlatu0.xyz);
    u_xlatu1.xyz = uvec3(16711680u, 65280u, 255u) & floatBitsToUint(unity_Builtins0Array[u_xlati24 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3]).www;
    u_xlat24 = max(1.0, unity_Builtins0Array[u_xlati24 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].w);
    u_xlat24 = min(u_xlat24, 2.0);
    u_xlat24 = u_xlat24 + -1.0;
    u_xlat1.xyz = vec3(u_xlatu1.xyz);
    u_xlat1.xyz = u_xlat1.xyz * vec3(5.9838392e-08, 1.53186284e-05, 0.00392156886);
    u_xlat0.xyz = u_xlat0.xyz * vec3(5.9838392e-08, 1.53186284e-05, 0.00392156886) + (-u_xlat1.xyz);
    u_xlat25 = u_xlat26 / _RootColorScale;
    u_xlat25 = u_xlat25 + _RootColorOffset;
#ifdef UNITY_ADRENO_ES3
    u_xlat25 = min(max(u_xlat25, 0.0), 1.0);
#else
    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
#endif
    u_xlat0.xyz = vec3(u_xlat25) * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat1.xyz = (-u_xlat0.xyz) + _BurnedColor.xyz;
    u_xlat0.xyz = vec3(u_xlat24) * u_xlat1.xyz + u_xlat0.xyz;
    vs_TEXCOORD2.w = u_xlat24;
    u_xlat24 = u_xlat26 + -0.600000024;
    vs_TEXCOORD3 = u_xlat26;
    u_xlat24 = max(u_xlat24, 0.0);
    u_xlat24 = _GrassTipLighting * u_xlat24 + 1.0;
    vs_TEXCOORD2.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    vs_TEXCOORD4.xy = in_TEXCOORD2.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	float _GrassShininess;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	float _CutOff;
uniform 	vec4 _BurnedColor;
uniform lowp sampler2D _MainTex;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp float vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec4 u_xlat0;
lowp vec4 u_xlat10_0;
bool u_xlatb0;
vec3 u_xlat1;
mediump float u_xlat16_2;
float u_xlat9;
bool u_xlatb9;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD4.xy);
    u_xlat9 = u_xlat10_0.w + (-_CutOff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(u_xlat9<0.0);
#else
    u_xlatb9 = u_xlat9<0.0;
#endif
    if((int(u_xlatb9) * int(0xffffffffu))!=0){discard;}
    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
    SV_Target0.xyz = u_xlat1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0;
    u_xlat1.xyz = _BurnedColor.xyz * u_xlat10_0.xyz + (-u_xlat10_0.xyz);
    u_xlat0.xyz = vs_TEXCOORD2.www * u_xlat1.xyz + u_xlat10_0.xyz;
    u_xlat0.w = vs_TEXCOORD3;
    SV_Target1 = u_xlat0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_2 = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb0) ? u_xlat16_2 : 0.0399999991;
    u_xlat0.x = (-vs_TEXCOORD2.w) + 1.0;
    u_xlat0.x = u_xlat0.x * _GrassShininess;
    SV_Target2.w = u_xlat0.x;
    SV_Target2.xy = vec2(0.0399999991, 0.0399999991);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "MHY_SHADER_LOW" "DITHER_FADE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	float _NoiseScale;
uniform 	vec4 _WorldOffsetRange;
uniform 	float _HeightScale;
uniform 	float _Billboard;
uniform 	vec4 _LargeWindParam;
uniform 	vec4 _GlobalWind;
uniform 	float _GrassTipLighting;
uniform 	vec4 _MainTex_ST;
uniform 	float _RootColorScale;
uniform 	float _RootColorOffset;
uniform highp sampler2D _Heightmap;
uniform lowp sampler2D _Noisemap;
in highp vec4 in_POSITION0;
in highp vec4 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec2 in_TEXCOORD2;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp float vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec3 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
vec3 u_xlat5;
vec3 u_xlat6;
vec4 u_xlat7;
int u_xlati8;
vec2 u_xlat9;
vec2 u_xlat17;
float u_xlat24;
float u_xlat25;
float u_xlat26;
float u_xlat27;
void main()
{
    u_xlat0.y = 0.0;
    u_xlat24 = dot(_GlobalWind.xyz, _GlobalWind.xyz);
    u_xlat24 = max(u_xlat24, 0.00100000005);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat1 = vec4(u_xlat24) * _GlobalWind.xzxz;
    u_xlat17.xy = vec2(u_xlat1.z * _LargeWindParam.z, u_xlat1.w * _LargeWindParam.z);
    u_xlat2.xyz = in_TEXCOORD0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[2].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TEXCOORD0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat3.xy = u_xlat2.xz / vec2(_NoiseScale);
    u_xlat1.xy = _LargeWindParam.xx * u_xlat1.xy + u_xlat3.xy;
    u_xlat1.xy = textureLod(_Noisemap, u_xlat1.xy, 0.0).xy;
    u_xlat1.xy = u_xlat1.xy + vec2(-0.5, -0.5);
    u_xlat1.xy = u_xlat1.xy * _LargeWindParam.yy + vec2(0.5, 0.5);
    u_xlat24 = (-in_TEXCOORD1.x) + hlslcc_mtx4x4unity_ObjectToWorld[1].x;
    u_xlat26 = fract(u_xlat24);
    u_xlat24 = u_xlat24 + hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat3.xy = vec2(u_xlat24) * vec2(22.0, 33.0);
    u_xlat3.xy = fract(u_xlat3.xy);
    u_xlat3.xy = u_xlat3.xy + vec2(-0.5, -0.5);
    u_xlat3.xz = u_xlat3.xy * vec2(0.200000003, 0.200000003);
    u_xlat24 = u_xlat26 + -0.5;
    u_xlat26 = u_xlat24 * 0.333000004;
    u_xlat4.y = u_xlat24 * 0.333000004 + -1.0;
    u_xlat24 = in_TEXCOORD1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat26 = u_xlat26 * u_xlat24;
    u_xlat1.xy = u_xlat1.xy * vec2(u_xlat26);
    u_xlat0.xz = u_xlat17.xy * u_xlat1.xy;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[0].x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[2].x;
    u_xlat17.x = dot(u_xlat1.xy, u_xlat1.xy);
    u_xlat17.x = inversesqrt(u_xlat17.x);
    u_xlat1.xy = u_xlat17.xx * u_xlat1.xy;
    u_xlat5.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;
    u_xlat5.y = hlslcc_mtx4x4unity_ObjectToWorld[2].x;
    u_xlat17.x = dot(u_xlat5.xy, u_xlat5.xy);
    u_xlat17.x = inversesqrt(u_xlat17.x);
    u_xlat17.xy = u_xlat17.xx * u_xlat5.xy;
    u_xlat5.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat5.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat5.xyz;
    u_xlat5.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat5.xyz;
    u_xlat5.xyz = u_xlat5.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat5.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
    u_xlat27 = u_xlat17.y * u_xlat5.z;
    u_xlat27 = u_xlat5.x * u_xlat17.x + (-u_xlat27);
    u_xlat17.x = dot(u_xlat5.zx, u_xlat17.xy);
    u_xlat17.xy = u_xlat1.xy * u_xlat17.xx;
    u_xlat9.x = u_xlat27 * u_xlat1.y + (-u_xlat17.x);
    u_xlat1.x = u_xlat27 * u_xlat1.x + u_xlat17.y;
    u_xlat1.x = u_xlat5.z + u_xlat1.x;
    u_xlat5.z = (-u_xlat1.x) * _Billboard + u_xlat5.z;
    u_xlat1.x = u_xlat5.x + u_xlat9.x;
    u_xlat5.x = (-u_xlat1.x) * _Billboard + u_xlat5.x;
    u_xlat1.x = u_xlat26 * u_xlat5.y;
    u_xlat9.x = max(u_xlat26, 9.99999972e-10);
    u_xlat9.xy = u_xlat0.zx / u_xlat9.xx;
    u_xlat0.xyz = u_xlat5.xyz * vec3(0.100000001, 1.0, 0.100000001) + u_xlat0.xyz;
    u_xlat6.yz = u_xlat9.xy + vec2(-1.0, -1.0);
    u_xlat9.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9.x = max(u_xlat9.x, 0.00100000005);
    u_xlat9.x = inversesqrt(u_xlat9.x);
    u_xlat0.xyz = u_xlat0.xyz * u_xlat9.xxx;
    u_xlat9.x = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat9.x = sqrt(u_xlat9.x);
    u_xlat7.xyz = u_xlat5.xyz * vec3(0.100000001, 1.0, 0.100000001);
    u_xlat0.xyz = u_xlat0.xyz * u_xlat9.xxx + (-u_xlat7.xyz);
    u_xlat7.xyz = u_xlat2.xyz + u_xlat5.xyz;
    u_xlat9.xy = u_xlat2.xz + (-_WorldOffsetRange.xy);
    u_xlat9.xy = u_xlat9.xy + vec2(1.0, 1.0);
    u_xlat2.xy = vec2(_WorldOffsetRange.z + float(2.0), _WorldOffsetRange.w + float(2.0));
    u_xlat9.xy = u_xlat9.xy / u_xlat2.xy;
    u_xlat9.x = textureLod(_Heightmap, u_xlat9.xy, 0.0).x;
    u_xlat7.w = u_xlat9.x * _HeightScale + u_xlat7.y;
    u_xlat0.xyz = u_xlat0.xyz + u_xlat7.xwz;
    u_xlat0.xyz = u_xlat1.xxx * vec3(-0.5, 0.0, -0.5) + u_xlat0.xyz;
    u_xlat4.xz = u_xlat4.yy * (-u_xlat4.yy);
    u_xlat0.xyz = u_xlat4.xyz * u_xlat5.xyz + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVPZero[3];
    u_xlat3.y = 0.0;
    vs_TEXCOORD0.xyz = u_xlat3.xyz + vec3(-1.0, 0.0, -1.0);
    vs_TEXCOORD0.w = 0.0;
    u_xlat1.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xxx;
    u_xlat1.x = dot(u_xlat6.yz, u_xlat6.yz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat6.x = 0.0;
    u_xlat1.xyz = u_xlat1.xxx * u_xlat6.xyz;
    u_xlat2.xyz = in_NORMAL0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_NORMAL0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_NORMAL0.zzz + u_xlat2.xyz;
    u_xlat25 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat25 = inversesqrt(u_xlat25);
    u_xlat2.xyz = vec3(u_xlat25) * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
    u_xlat25 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat25 = inversesqrt(u_xlat25);
    u_xlat2.xyz = vec3(u_xlat25) * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.zxy * u_xlat1.yzx + (-u_xlat3.xyz);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
#ifdef UNITY_ADRENO_ES3
    { bool cond = 0.0<u_xlat0.x; u_xlati8 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati8 = int((0.0<u_xlat0.x) ? 0xFFFFFFFFu : uint(0u));
#endif
#ifdef UNITY_ADRENO_ES3
    { bool cond = u_xlat0.x<0.0; u_xlati0 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati0 = int((u_xlat0.x<0.0) ? 0xFFFFFFFFu : uint(0u));
#endif
    u_xlati0 = (-u_xlati8) + u_xlati0;
    u_xlat0.x = float(u_xlati0);
    vs_TEXCOORD1.xyz = u_xlat0.xxx * u_xlat1.xyz;
    vs_TEXCOORD1.w = 0.0;
    u_xlat0.x = u_xlat24 / _RootColorScale;
    u_xlat0.x = u_xlat0.x + _RootColorOffset;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xxx * vec3(-0.501960814, 0.0, 0.0) + vec3(0.501960814, 0.0, 0.0);
    u_xlat1.x = u_xlat24 + -0.600000024;
    vs_TEXCOORD3 = u_xlat24;
    u_xlat24 = max(u_xlat1.x, 0.0);
    u_xlat24 = _GrassTipLighting * u_xlat24 + 1.0;
    vs_TEXCOORD2.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    vs_TEXCOORD2.w = 0.0;
    vs_TEXCOORD4.xy = in_TEXCOORD2.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	float _GrassShininess;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	float _CutOff;
uniform 	vec4 _BurnedColor;
uniform lowp sampler2D _MainTex;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp float vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec4 u_xlat0;
lowp vec4 u_xlat10_0;
bool u_xlatb0;
vec3 u_xlat1;
mediump float u_xlat16_2;
float u_xlat9;
bool u_xlatb9;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD4.xy);
    u_xlat9 = u_xlat10_0.w + (-_CutOff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(u_xlat9<0.0);
#else
    u_xlatb9 = u_xlat9<0.0;
#endif
    if((int(u_xlatb9) * int(0xffffffffu))!=0){discard;}
    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
    SV_Target0.xyz = u_xlat1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0;
    u_xlat1.xyz = _BurnedColor.xyz * u_xlat10_0.xyz + (-u_xlat10_0.xyz);
    u_xlat0.xyz = vs_TEXCOORD2.www * u_xlat1.xyz + u_xlat10_0.xyz;
    u_xlat0.w = vs_TEXCOORD3;
    SV_Target1 = u_xlat0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_2 = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb0) ? u_xlat16_2 : 0.0399999991;
    u_xlat0.x = (-vs_TEXCOORD2.w) + 1.0;
    u_xlat0.x = u_xlat0.x * _GrassShininess;
    SV_Target2.w = u_xlat0.x;
    SV_Target2.xy = vec2(0.0399999991, 0.0399999991);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MHY_SHADER_LOW" "DITHER_FADE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	int unity_BaseInstanceID;
uniform 	float _NoiseScale;
uniform 	vec4 _WorldOffsetRange;
uniform 	float _HeightScale;
uniform 	float _Billboard;
uniform 	vec4 _LargeWindParam;
uniform 	vec4 _GlobalWind;
uniform 	float _GrassTipLighting;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BurnedColor;
uniform 	float _RootColorScale;
uniform 	float _RootColorOffset;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _Heightmap;
uniform lowp sampler2D _Noisemap;
in highp vec4 in_POSITION0;
in highp vec4 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec2 in_TEXCOORD2;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp float vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec3 u_xlat0;
uvec3 u_xlatu0;
vec4 u_xlat1;
int u_xlati1;
uvec3 u_xlatu1;
vec3 u_xlat2;
uvec2 u_xlatu2;
vec4 u_xlat3;
vec3 u_xlat4;
vec4 u_xlat5;
vec4 u_xlat6;
vec2 u_xlat7;
float u_xlat8;
uint u_xlatu8;
float u_xlat9;
int u_xlati9;
vec3 u_xlat11;
vec2 u_xlat17;
float u_xlat24;
int u_xlati24;
float u_xlat25;
bool u_xlatb25;
float u_xlat26;
uint u_xlatu26;
float u_xlat28;
void main()
{
    u_xlat0.y = 0.0;
    u_xlat24 = dot(_GlobalWind.xyz, _GlobalWind.xyz);
    u_xlat24 = max(u_xlat24, 0.00100000005);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat1 = vec4(u_xlat24) * _GlobalWind.xzxz;
    u_xlat17.xy = vec2(u_xlat1.z * _LargeWindParam.z, u_xlat1.w * _LargeWindParam.z);
    u_xlati24 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati24 = u_xlati24 << 2;
    u_xlat2.xyz = in_TEXCOORD0.yyy * unity_Builtins0Array[u_xlati24 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz;
    u_xlat2.xyz = unity_Builtins0Array[u_xlati24 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_TEXCOORD0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz + unity_Builtins0Array[u_xlati24 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat3.xy = u_xlat2.xz / vec2(_NoiseScale);
    u_xlat1.xy = _LargeWindParam.xx * u_xlat1.xy + u_xlat3.xy;
    u_xlat1.xy = textureLod(_Noisemap, u_xlat1.xy, 0.0).xy;
    u_xlat1.xy = u_xlat1.xy + vec2(-0.5, -0.5);
    u_xlat1.xy = u_xlat1.xy * _LargeWindParam.yy + vec2(0.5, 0.5);
    u_xlat26 = float(floatBitsToUint(unity_Builtins0Array[u_xlati24 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2]).w);
    u_xlat26 = u_xlat26 * 5.96046448e-08;
    u_xlatu26 = uint(u_xlat26);
    u_xlatu26 = u_xlatu26 & 3u;
    u_xlat26 = float(u_xlatu26);
    u_xlat3.x = (-in_TEXCOORD1.x) + unity_Builtins0Array[u_xlati24 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].x;
    u_xlat11.x = fract(u_xlat3.x);
    u_xlat3.x = u_xlat3.x + unity_Builtins0Array[u_xlati24 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].y;
    u_xlat3.xz = u_xlat3.xx * vec2(22.0, 33.0);
    u_xlat3.xz = fract(u_xlat3.xz);
    u_xlat3.xz = u_xlat3.xz + vec2(-0.5, -0.5);
    u_xlat4.xz = u_xlat3.xz * vec2(0.200000003, 0.200000003);
    u_xlat26 = u_xlat26 + u_xlat11.x;
    u_xlat26 = u_xlat26 + -0.5;
    u_xlat3.x = u_xlat26 * 0.333000004;
    u_xlat5.y = u_xlat26 * 0.333000004 + -1.0;
    u_xlat26 = in_TEXCOORD1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat26 = min(max(u_xlat26, 0.0), 1.0);
#else
    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);
#endif
    u_xlat3.x = u_xlat3.x * u_xlat26;
    u_xlat1.xy = u_xlat1.xy * u_xlat3.xx;
    u_xlat0.xz = u_xlat17.xy * u_xlat1.xy;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[0].x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[2].x;
    u_xlat17.x = dot(u_xlat1.xy, u_xlat1.xy);
    u_xlat17.x = inversesqrt(u_xlat17.x);
    u_xlat1.xy = u_xlat17.xx * u_xlat1.xy;
    u_xlat11.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati24 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat11.xyz = unity_Builtins0Array[u_xlati24 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat11.xyz;
    u_xlat11.xyz = unity_Builtins0Array[u_xlati24 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat11.xyz;
    u_xlat11.xyz = u_xlat11.xyz + unity_Builtins0Array[u_xlati24 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat11.xyz = (-u_xlat2.xyz) + u_xlat11.xyz;
    u_xlat6.x = unity_Builtins0Array[u_xlati24 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].x;
    u_xlat6.y = unity_Builtins0Array[u_xlati24 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].x;
    u_xlat17.x = dot(u_xlat6.xy, u_xlat6.xy);
    u_xlat17.x = inversesqrt(u_xlat17.x);
    u_xlat17.xy = u_xlat17.xx * u_xlat6.xy;
    u_xlat28 = u_xlat17.y * u_xlat11.z;
    u_xlat28 = u_xlat11.x * u_xlat17.x + (-u_xlat28);
    u_xlat17.x = dot(u_xlat11.zx, u_xlat17.xy);
    u_xlat17.xy = u_xlat1.xy * u_xlat17.xx;
    u_xlat9 = u_xlat28 * u_xlat1.y + (-u_xlat17.x);
    u_xlat1.x = u_xlat28 * u_xlat1.x + u_xlat17.y;
    u_xlat1.x = u_xlat11.z + u_xlat1.x;
    u_xlat11.z = (-u_xlat1.x) * _Billboard + u_xlat11.z;
    u_xlat1.x = u_xlat11.x + u_xlat9;
    u_xlat11.x = (-u_xlat1.x) * _Billboard + u_xlat11.x;
    u_xlat1.xyz = u_xlat11.xyz * vec3(0.100000001, 1.0, 0.100000001) + u_xlat0.xyz;
    u_xlat8 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat8 = max(u_xlat8, 0.00100000005);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat1.xyz = vec3(u_xlat8) * u_xlat1.xyz;
    u_xlat8 = dot(u_xlat11.xyz, u_xlat11.xyz);
    u_xlat8 = sqrt(u_xlat8);
    u_xlat6.xyz = u_xlat11.xyz * vec3(0.100000001, 1.0, 0.100000001);
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat8) + (-u_xlat6.xyz);
    u_xlat6.xyz = u_xlat2.xyz + u_xlat11.xyz;
    u_xlat2.xy = u_xlat2.xz + (-_WorldOffsetRange.xy);
    u_xlat2.xy = u_xlat2.xy + vec2(1.0, 1.0);
    u_xlat7.xy = vec2(_WorldOffsetRange.z + float(2.0), _WorldOffsetRange.w + float(2.0));
    u_xlat2.xy = u_xlat2.xy / u_xlat7.xy;
    u_xlat8 = textureLod(_Heightmap, u_xlat2.xy, 0.0).x;
    u_xlat6.w = u_xlat8 * _HeightScale + u_xlat6.y;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat6.xwz;
    u_xlatu2.xy = uvec2(65280u, 255u) & floatBitsToUint(unity_Builtins0Array[u_xlati24 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1]).ww;
    u_xlat2.xy = vec2(u_xlatu2.xy);
    u_xlat8 = u_xlat2.x * 0.00390625;
    u_xlat2.z = u_xlat2.y + -127.0;
    u_xlatu8 = uint(u_xlat8);
    u_xlat8 = float(u_xlatu8);
    u_xlat2.x = u_xlat8 + -127.0;
    u_xlat6.xy = u_xlat2.xz * vec2(0.00787401572, 0.00787401572);
    u_xlat6.xy = u_xlat6.xy * u_xlat6.xy;
    u_xlat8 = u_xlat6.y + u_xlat6.x;
    u_xlat8 = (-u_xlat8) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb25 = !!(0.0<u_xlat8);
#else
    u_xlatb25 = 0.0<u_xlat8;
#endif
    u_xlat8 = sqrt(u_xlat8);
    u_xlat2.y = u_xlatb25 ? u_xlat8 : float(0.0);
    u_xlat6.xyz = u_xlat2.xyz * u_xlat11.yyy;
    u_xlat6.xyz = u_xlat3.xxx * u_xlat6.xyz;
    u_xlat8 = max(u_xlat3.x, 9.99999972e-10);
    u_xlat0.yz = u_xlat0.zx / vec2(u_xlat8);
    u_xlat1.xyz = u_xlat6.xyz * vec3(0.00393700786, 0.0, 0.00393700786) + u_xlat1.xyz;
    u_xlat5.xz = u_xlat5.yy * (-u_xlat5.yy);
    u_xlat1.xyz = u_xlat5.xyz * u_xlat11.xyz + u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat5 = u_xlat3.yyyy * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat5 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat3.xxxx + u_xlat5;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat3.zzzz + u_xlat5;
    gl_Position = u_xlat3 + hlslcc_mtx4x4unity_MatrixVPZero[3];
    u_xlat4.y = 0.0;
    vs_TEXCOORD0.xyz = u_xlat2.xyz * vec3(0.00787401572, 1.0, 0.00787401572) + u_xlat4.xyz;
    vs_TEXCOORD0.w = 0.0;
    u_xlat0.x = 0.0;
    u_xlat0.xyz = u_xlat2.yzx * vec3(1.0, 0.00787401572, 0.00787401572) + u_xlat0.xyz;
    u_xlat25 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat25 = inversesqrt(u_xlat25);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat25);
    u_xlat2.xyz = in_NORMAL0.yyy * unity_Builtins0Array[u_xlati24 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat2.xyz = unity_Builtins0Array[u_xlati24 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_NORMAL0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = unity_Builtins0Array[u_xlati24 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_NORMAL0.zzz + u_xlat2.xyz;
    u_xlat25 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat25 = inversesqrt(u_xlat25);
    u_xlat2.xyz = vec3(u_xlat25) * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat0.xyz * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat0.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
    u_xlat25 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat25 = inversesqrt(u_xlat25);
    u_xlat2.xyz = vec3(u_xlat25) * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat0.xyz * u_xlat2.xyz;
    u_xlat0.xyz = u_xlat2.zxy * u_xlat0.yzx + (-u_xlat3.xyz);
    u_xlat25 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat25 = inversesqrt(u_xlat25);
    u_xlat1.xyz = vec3(u_xlat25) * u_xlat1.xyz;
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat0.xyz);
#ifdef UNITY_ADRENO_ES3
    { bool cond = 0.0<u_xlat1.x; u_xlati9 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati9 = int((0.0<u_xlat1.x) ? 0xFFFFFFFFu : uint(0u));
#endif
#ifdef UNITY_ADRENO_ES3
    { bool cond = u_xlat1.x<0.0; u_xlati1 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati1 = int((u_xlat1.x<0.0) ? 0xFFFFFFFFu : uint(0u));
#endif
    u_xlati1 = (-u_xlati9) + u_xlati1;
    u_xlat1.x = float(u_xlati1);
    vs_TEXCOORD1.xyz = u_xlat0.xyz * u_xlat1.xxx;
    vs_TEXCOORD1.w = 0.0;
    u_xlatu0.xyz = uvec3(16711680u, 65280u, 255u) & floatBitsToUint(unity_Builtins0Array[u_xlati24 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2]).www;
    u_xlat0.xyz = vec3(u_xlatu0.xyz);
    u_xlatu1.xyz = uvec3(16711680u, 65280u, 255u) & floatBitsToUint(unity_Builtins0Array[u_xlati24 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3]).www;
    u_xlat24 = max(1.0, unity_Builtins0Array[u_xlati24 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].w);
    u_xlat24 = min(u_xlat24, 2.0);
    u_xlat24 = u_xlat24 + -1.0;
    u_xlat1.xyz = vec3(u_xlatu1.xyz);
    u_xlat1.xyz = u_xlat1.xyz * vec3(5.9838392e-08, 1.53186284e-05, 0.00392156886);
    u_xlat0.xyz = u_xlat0.xyz * vec3(5.9838392e-08, 1.53186284e-05, 0.00392156886) + (-u_xlat1.xyz);
    u_xlat25 = u_xlat26 / _RootColorScale;
    u_xlat25 = u_xlat25 + _RootColorOffset;
#ifdef UNITY_ADRENO_ES3
    u_xlat25 = min(max(u_xlat25, 0.0), 1.0);
#else
    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
#endif
    u_xlat0.xyz = vec3(u_xlat25) * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat1.xyz = (-u_xlat0.xyz) + _BurnedColor.xyz;
    u_xlat0.xyz = vec3(u_xlat24) * u_xlat1.xyz + u_xlat0.xyz;
    vs_TEXCOORD2.w = u_xlat24;
    u_xlat24 = u_xlat26 + -0.600000024;
    vs_TEXCOORD3 = u_xlat26;
    u_xlat24 = max(u_xlat24, 0.0);
    u_xlat24 = _GrassTipLighting * u_xlat24 + 1.0;
    vs_TEXCOORD2.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    vs_TEXCOORD4.xy = in_TEXCOORD2.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	float _GrassShininess;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	float _CutOff;
uniform 	vec4 _BurnedColor;
uniform lowp sampler2D _MainTex;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp float vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec4 u_xlat0;
lowp vec4 u_xlat10_0;
bool u_xlatb0;
vec3 u_xlat1;
mediump float u_xlat16_2;
float u_xlat9;
bool u_xlatb9;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD4.xy);
    u_xlat9 = u_xlat10_0.w + (-_CutOff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(u_xlat9<0.0);
#else
    u_xlatb9 = u_xlat9<0.0;
#endif
    if((int(u_xlatb9) * int(0xffffffffu))!=0){discard;}
    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
    SV_Target0.xyz = u_xlat1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0;
    u_xlat1.xyz = _BurnedColor.xyz * u_xlat10_0.xyz + (-u_xlat10_0.xyz);
    u_xlat0.xyz = vs_TEXCOORD2.www * u_xlat1.xyz + u_xlat10_0.xyz;
    u_xlat0.w = vs_TEXCOORD3;
    SV_Target1 = u_xlat0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_2 = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb0) ? u_xlat16_2 : 0.0399999991;
    u_xlat0.x = (-vs_TEXCOORD2.w) + 1.0;
    u_xlat0.x = u_xlat0.x * _GrassShininess;
    SV_Target2.w = u_xlat0.x;
    SV_Target2.xy = vec2(0.0399999991, 0.0399999991);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "MHY_SHADER_LOW" "SOFT_SAMPLE_HEIGHT_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	float _NoiseScale;
uniform 	vec4 _WorldOffsetRange;
uniform 	float _HeightScale;
uniform 	float _Billboard;
uniform 	vec4 _LargeWindParam;
uniform 	vec4 _GlobalWind;
uniform 	float _GrassTipLighting;
uniform 	vec4 _MainTex_ST;
uniform 	float _RootColorScale;
uniform 	float _RootColorOffset;
uniform highp sampler2D _Heightmap;
uniform lowp sampler2D _Noisemap;
in highp vec4 in_POSITION0;
in highp vec4 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec2 in_TEXCOORD2;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp float vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec3 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
vec3 u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
vec2 u_xlat8;
int u_xlati8;
vec2 u_xlat9;
vec2 u_xlat16;
vec2 u_xlat20;
float u_xlat24;
float u_xlat25;
void main()
{
    u_xlat0.xy = vec2(_WorldOffsetRange.z + float(2.0), _WorldOffsetRange.w + float(2.0));
    u_xlat1.xyz = in_TEXCOORD0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[2].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TEXCOORD0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat16.xy = u_xlat1.xz + (-_WorldOffsetRange.xy);
    u_xlat16.xy = u_xlat16.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat16.xy / u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * _WorldOffsetRange.zw + vec2(-0.5, -0.5);
    u_xlat16.xy = floor(u_xlat0.xy);
    u_xlat0.xy = (-u_xlat16.xy) + u_xlat0.xy;
    u_xlat2 = u_xlat16.xyxy + vec4(0.5, 1.5, 1.5, 1.5);
    u_xlat3 = u_xlat16.xyxy + vec4(1.5, 0.5, 0.5, 0.5);
    u_xlat3 = vec4(u_xlat3.x / _WorldOffsetRange.z, u_xlat3.y / _WorldOffsetRange.w, u_xlat3.z / _WorldOffsetRange.z, u_xlat3.w / _WorldOffsetRange.w);
    u_xlat2 = vec4(u_xlat2.x / _WorldOffsetRange.z, u_xlat2.y / _WorldOffsetRange.w, u_xlat2.z / _WorldOffsetRange.z, u_xlat2.w / _WorldOffsetRange.w);
    u_xlat16.x = textureLod(_Heightmap, u_xlat2.zw, 0.0).x;
    u_xlat24 = textureLod(_Heightmap, u_xlat2.xy, 0.0).x;
    u_xlat16.x = (-u_xlat24) + u_xlat16.x;
    u_xlat16.x = u_xlat0.x * u_xlat16.x + u_xlat24;
    u_xlat24 = textureLod(_Heightmap, u_xlat3.xy, 0.0).x;
    u_xlat25 = textureLod(_Heightmap, u_xlat3.zw, 0.0).x;
    u_xlat24 = u_xlat24 + (-u_xlat25);
    u_xlat0.x = u_xlat0.x * u_xlat24 + u_xlat25;
    u_xlat16.x = (-u_xlat0.x) + u_xlat16.x;
    u_xlat0.x = u_xlat0.y * u_xlat16.x + u_xlat0.x;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[0].x;
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[2].x;
    u_xlat8.x = dot(u_xlat2.xy, u_xlat2.xy);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat8.xy = u_xlat8.xx * u_xlat2.xy;
    u_xlat2.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;
    u_xlat2.y = hlslcc_mtx4x4unity_ObjectToWorld[2].x;
    u_xlat24 = dot(u_xlat2.xy, u_xlat2.xy);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat2.xy = vec2(u_xlat24) * u_xlat2.xy;
    u_xlat3.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat3.xyz = (-u_xlat1.xyz) + u_xlat3.xyz;
    u_xlat24 = u_xlat2.y * u_xlat3.z;
    u_xlat24 = u_xlat3.x * u_xlat2.x + (-u_xlat24);
    u_xlat25 = dot(u_xlat3.zx, u_xlat2.xy);
    u_xlat2.xy = u_xlat8.xy * vec2(u_xlat25);
    u_xlat16.x = u_xlat24 * u_xlat8.y + (-u_xlat2.x);
    u_xlat8.x = u_xlat24 * u_xlat8.x + u_xlat2.y;
    u_xlat8.x = u_xlat3.z + u_xlat8.x;
    u_xlat3.z = (-u_xlat8.x) * _Billboard + u_xlat3.z;
    u_xlat8.x = u_xlat3.x + u_xlat16.x;
    u_xlat3.x = (-u_xlat8.x) * _Billboard + u_xlat3.x;
    u_xlat2.xyz = u_xlat1.xyz + u_xlat3.xyz;
    u_xlat8.xy = u_xlat1.xz / vec2(_NoiseScale);
    u_xlat2.w = u_xlat0.x * _HeightScale + u_xlat2.y;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat1.xyz = u_xlat3.xyz * vec3(0.100000001, 1.0, 0.100000001);
    u_xlat24 = dot(_GlobalWind.xyz, _GlobalWind.xyz);
    u_xlat24 = max(u_xlat24, 0.00100000005);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat4 = vec4(u_xlat24) * _GlobalWind.xzxz;
    u_xlat20.xy = vec2(u_xlat4.z * _LargeWindParam.z, u_xlat4.w * _LargeWindParam.z);
    u_xlat8.xy = _LargeWindParam.xx * u_xlat4.xy + u_xlat8.xy;
    u_xlat8.xy = textureLod(_Noisemap, u_xlat8.xy, 0.0).xy;
    u_xlat8.xy = u_xlat8.xy + vec2(-0.5, -0.5);
    u_xlat8.xy = u_xlat8.xy * _LargeWindParam.yy + vec2(0.5, 0.5);
    u_xlat24 = (-in_TEXCOORD1.x) + hlslcc_mtx4x4unity_ObjectToWorld[1].x;
    u_xlat25 = fract(u_xlat24);
    u_xlat24 = u_xlat24 + hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat4.xy = vec2(u_xlat24) * vec2(22.0, 33.0);
    u_xlat4.xy = fract(u_xlat4.xy);
    u_xlat4.xy = u_xlat4.xy + vec2(-0.5, -0.5);
    u_xlat5.xz = u_xlat4.xy * vec2(0.200000003, 0.200000003);
    u_xlat24 = u_xlat25 + -0.5;
    u_xlat25 = u_xlat24 * 0.333000004;
    u_xlat6.y = u_xlat24 * 0.333000004 + -1.0;
    u_xlat24 = in_TEXCOORD1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat25 = u_xlat25 * u_xlat24;
    u_xlat8.xy = u_xlat8.xy * vec2(u_xlat25);
    u_xlat4.xz = u_xlat20.xy * u_xlat8.xy;
    u_xlat4.y = 0.0;
    u_xlat7.xyz = u_xlat3.xyz * vec3(0.100000001, 1.0, 0.100000001) + u_xlat4.xyz;
    u_xlat8.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat8.x = max(u_xlat8.x, 0.00100000005);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat7.xyz = u_xlat8.xxx * u_xlat7.xyz;
    u_xlat0.xyz = u_xlat7.xyz * u_xlat0.xxx + (-u_xlat1.xyz);
    u_xlat0.xyz = u_xlat0.xyz + u_xlat2.xwz;
    u_xlat1.x = u_xlat3.y * u_xlat25;
    u_xlat9.x = max(u_xlat25, 9.99999972e-10);
    u_xlat9.xy = u_xlat4.zx / u_xlat9.xx;
    u_xlat2.yz = u_xlat9.xy + vec2(-1.0, -1.0);
    u_xlat0.xyz = u_xlat1.xxx * vec3(-0.5, 0.0, -0.5) + u_xlat0.xyz;
    u_xlat6.xz = u_xlat6.yy * (-u_xlat6.yy);
    u_xlat0.xyz = u_xlat6.xyz * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat1.xxxx + u_xlat3;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat1.zzzz + u_xlat3;
    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVPZero[3];
    u_xlat5.y = 0.0;
    vs_TEXCOORD0.xyz = u_xlat5.xyz + vec3(-1.0, 0.0, -1.0);
    vs_TEXCOORD0.w = 0.0;
    u_xlat1.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xxx;
    u_xlat1.x = dot(u_xlat2.yz, u_xlat2.yz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat2.x = 0.0;
    u_xlat1.xyz = u_xlat1.xxx * u_xlat2.xyz;
    u_xlat2.xyz = in_NORMAL0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_NORMAL0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_NORMAL0.zzz + u_xlat2.xyz;
    u_xlat25 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat25 = inversesqrt(u_xlat25);
    u_xlat2.xyz = vec3(u_xlat25) * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
    u_xlat25 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat25 = inversesqrt(u_xlat25);
    u_xlat2.xyz = vec3(u_xlat25) * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.zxy * u_xlat1.yzx + (-u_xlat3.xyz);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
#ifdef UNITY_ADRENO_ES3
    { bool cond = 0.0<u_xlat0.x; u_xlati8 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati8 = int((0.0<u_xlat0.x) ? 0xFFFFFFFFu : uint(0u));
#endif
#ifdef UNITY_ADRENO_ES3
    { bool cond = u_xlat0.x<0.0; u_xlati0 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati0 = int((u_xlat0.x<0.0) ? 0xFFFFFFFFu : uint(0u));
#endif
    u_xlati0 = (-u_xlati8) + u_xlati0;
    u_xlat0.x = float(u_xlati0);
    vs_TEXCOORD1.xyz = u_xlat0.xxx * u_xlat1.xyz;
    vs_TEXCOORD1.w = 0.0;
    u_xlat0.x = u_xlat24 / _RootColorScale;
    u_xlat0.x = u_xlat0.x + _RootColorOffset;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xxx * vec3(-0.501960814, 0.0, 0.0) + vec3(0.501960814, 0.0, 0.0);
    u_xlat1.x = u_xlat24 + -0.600000024;
    vs_TEXCOORD3 = u_xlat24;
    u_xlat24 = max(u_xlat1.x, 0.0);
    u_xlat24 = _GrassTipLighting * u_xlat24 + 1.0;
    vs_TEXCOORD2.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    vs_TEXCOORD2.w = 0.0;
    vs_TEXCOORD4.xy = in_TEXCOORD2.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	float _GrassShininess;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	float _CutOff;
uniform 	vec4 _BurnedColor;
uniform lowp sampler2D _MainTex;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp float vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec4 u_xlat0;
lowp vec4 u_xlat10_0;
bool u_xlatb0;
vec3 u_xlat1;
mediump float u_xlat16_2;
float u_xlat9;
bool u_xlatb9;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD4.xy);
    u_xlat9 = u_xlat10_0.w + (-_CutOff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(u_xlat9<0.0);
#else
    u_xlatb9 = u_xlat9<0.0;
#endif
    if((int(u_xlatb9) * int(0xffffffffu))!=0){discard;}
    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
    SV_Target0.xyz = u_xlat1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0;
    u_xlat1.xyz = _BurnedColor.xyz * u_xlat10_0.xyz + (-u_xlat10_0.xyz);
    u_xlat0.xyz = vs_TEXCOORD2.www * u_xlat1.xyz + u_xlat10_0.xyz;
    u_xlat0.w = vs_TEXCOORD3;
    SV_Target1 = u_xlat0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_2 = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb0) ? u_xlat16_2 : 0.0399999991;
    u_xlat0.x = (-vs_TEXCOORD2.w) + 1.0;
    u_xlat0.x = u_xlat0.x * _GrassShininess;
    SV_Target2.w = u_xlat0.x;
    SV_Target2.xy = vec2(0.0399999991, 0.0399999991);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MHY_SHADER_LOW" "SOFT_SAMPLE_HEIGHT_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	int unity_BaseInstanceID;
uniform 	float _NoiseScale;
uniform 	vec4 _WorldOffsetRange;
uniform 	float _HeightScale;
uniform 	float _Billboard;
uniform 	vec4 _LargeWindParam;
uniform 	vec4 _GlobalWind;
uniform 	float _GrassTipLighting;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BurnedColor;
uniform 	float _RootColorScale;
uniform 	float _RootColorOffset;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _Heightmap;
uniform lowp sampler2D _Noisemap;
in highp vec4 in_POSITION0;
in highp vec4 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec2 in_TEXCOORD2;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp float vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec3 u_xlat0;
uvec3 u_xlatu0;
vec4 u_xlat1;
int u_xlati1;
uvec3 u_xlatu1;
vec3 u_xlat2;
uvec2 u_xlatu2;
vec4 u_xlat3;
vec3 u_xlat4;
vec4 u_xlat5;
vec4 u_xlat6;
vec4 u_xlat7;
vec4 u_xlat8;
float u_xlat9;
uint u_xlatu9;
float u_xlat10;
int u_xlati10;
vec3 u_xlat12;
vec2 u_xlat19;
float u_xlat20;
vec2 u_xlat24;
float u_xlat27;
int u_xlati27;
float u_xlat28;
bool u_xlatb28;
float u_xlat29;
uint u_xlatu29;
float u_xlat31;
void main()
{
    u_xlat0.y = 0.0;
    u_xlat27 = dot(_GlobalWind.xyz, _GlobalWind.xyz);
    u_xlat27 = max(u_xlat27, 0.00100000005);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat1 = vec4(u_xlat27) * _GlobalWind.xzxz;
    u_xlat19.xy = vec2(u_xlat1.z * _LargeWindParam.z, u_xlat1.w * _LargeWindParam.z);
    u_xlati27 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati27 = u_xlati27 << 2;
    u_xlat2.xyz = in_TEXCOORD0.yyy * unity_Builtins0Array[u_xlati27 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz;
    u_xlat2.xyz = unity_Builtins0Array[u_xlati27 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_TEXCOORD0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz + unity_Builtins0Array[u_xlati27 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat3.xy = u_xlat2.xz / vec2(_NoiseScale);
    u_xlat1.xy = _LargeWindParam.xx * u_xlat1.xy + u_xlat3.xy;
    u_xlat1.xy = textureLod(_Noisemap, u_xlat1.xy, 0.0).xy;
    u_xlat1.xy = u_xlat1.xy + vec2(-0.5, -0.5);
    u_xlat1.xy = u_xlat1.xy * _LargeWindParam.yy + vec2(0.5, 0.5);
    u_xlat29 = float(floatBitsToUint(unity_Builtins0Array[u_xlati27 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2]).w);
    u_xlat29 = u_xlat29 * 5.96046448e-08;
    u_xlatu29 = uint(u_xlat29);
    u_xlatu29 = u_xlatu29 & 3u;
    u_xlat29 = float(u_xlatu29);
    u_xlat3.x = (-in_TEXCOORD1.x) + unity_Builtins0Array[u_xlati27 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].x;
    u_xlat12.x = fract(u_xlat3.x);
    u_xlat3.x = u_xlat3.x + unity_Builtins0Array[u_xlati27 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].y;
    u_xlat3.xz = u_xlat3.xx * vec2(22.0, 33.0);
    u_xlat3.xz = fract(u_xlat3.xz);
    u_xlat3.xz = u_xlat3.xz + vec2(-0.5, -0.5);
    u_xlat4.xz = u_xlat3.xz * vec2(0.200000003, 0.200000003);
    u_xlat29 = u_xlat29 + u_xlat12.x;
    u_xlat29 = u_xlat29 + -0.5;
    u_xlat3.x = u_xlat29 * 0.333000004;
    u_xlat5.y = u_xlat29 * 0.333000004 + -1.0;
    u_xlat29 = in_TEXCOORD1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat29 = min(max(u_xlat29, 0.0), 1.0);
#else
    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
#endif
    u_xlat3.x = u_xlat3.x * u_xlat29;
    u_xlat1.xy = u_xlat1.xy * u_xlat3.xx;
    u_xlat0.xz = u_xlat19.xy * u_xlat1.xy;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[0].x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[2].x;
    u_xlat19.x = dot(u_xlat1.xy, u_xlat1.xy);
    u_xlat19.x = inversesqrt(u_xlat19.x);
    u_xlat1.xy = u_xlat19.xx * u_xlat1.xy;
    u_xlat12.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati27 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat12.xyz = unity_Builtins0Array[u_xlati27 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat12.xyz;
    u_xlat12.xyz = unity_Builtins0Array[u_xlati27 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat12.xyz;
    u_xlat12.xyz = u_xlat12.xyz + unity_Builtins0Array[u_xlati27 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat12.xyz = (-u_xlat2.xyz) + u_xlat12.xyz;
    u_xlat6.x = unity_Builtins0Array[u_xlati27 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].x;
    u_xlat6.y = unity_Builtins0Array[u_xlati27 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].x;
    u_xlat19.x = dot(u_xlat6.xy, u_xlat6.xy);
    u_xlat19.x = inversesqrt(u_xlat19.x);
    u_xlat19.xy = u_xlat19.xx * u_xlat6.xy;
    u_xlat31 = u_xlat19.y * u_xlat12.z;
    u_xlat31 = u_xlat12.x * u_xlat19.x + (-u_xlat31);
    u_xlat19.x = dot(u_xlat12.zx, u_xlat19.xy);
    u_xlat19.xy = u_xlat1.xy * u_xlat19.xx;
    u_xlat10 = u_xlat31 * u_xlat1.y + (-u_xlat19.x);
    u_xlat1.x = u_xlat31 * u_xlat1.x + u_xlat19.y;
    u_xlat1.x = u_xlat12.z + u_xlat1.x;
    u_xlat12.z = (-u_xlat1.x) * _Billboard + u_xlat12.z;
    u_xlat1.x = u_xlat12.x + u_xlat10;
    u_xlat12.x = (-u_xlat1.x) * _Billboard + u_xlat12.x;
    u_xlat1.xyz = u_xlat12.xyz * vec3(0.100000001, 1.0, 0.100000001) + u_xlat0.xyz;
    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat9 = max(u_xlat9, 0.00100000005);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
    u_xlat9 = dot(u_xlat12.xyz, u_xlat12.xyz);
    u_xlat9 = sqrt(u_xlat9);
    u_xlat6.xyz = u_xlat12.xyz * vec3(0.100000001, 1.0, 0.100000001);
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat9) + (-u_xlat6.xyz);
    u_xlat6.xy = vec2(_WorldOffsetRange.z + float(2.0), _WorldOffsetRange.w + float(2.0));
    u_xlat24.xy = u_xlat2.xz + (-_WorldOffsetRange.xy);
    u_xlat7.xyz = u_xlat2.xyz + u_xlat12.xyz;
    u_xlat2.xy = u_xlat24.xy + vec2(1.0, 1.0);
    u_xlat2.xy = u_xlat2.xy / u_xlat6.xy;
    u_xlat2.xy = u_xlat2.xy * _WorldOffsetRange.zw + vec2(-0.5, -0.5);
    u_xlat6.xy = floor(u_xlat2.xy);
    u_xlat2.xy = u_xlat2.xy + (-u_xlat6.xy);
    u_xlat8 = u_xlat6.xyxy + vec4(0.5, 1.5, 1.5, 1.5);
    u_xlat6 = u_xlat6.xyxy + vec4(1.5, 0.5, 0.5, 0.5);
    u_xlat6 = vec4(u_xlat6.x / _WorldOffsetRange.z, u_xlat6.y / _WorldOffsetRange.w, u_xlat6.z / _WorldOffsetRange.z, u_xlat6.w / _WorldOffsetRange.w);
    u_xlat8 = vec4(u_xlat8.x / _WorldOffsetRange.z, u_xlat8.y / _WorldOffsetRange.w, u_xlat8.z / _WorldOffsetRange.z, u_xlat8.w / _WorldOffsetRange.w);
    u_xlat9 = textureLod(_Heightmap, u_xlat8.zw, 0.0).x;
    u_xlat28 = textureLod(_Heightmap, u_xlat8.xy, 0.0).x;
    u_xlat9 = u_xlat9 + (-u_xlat28);
    u_xlat9 = u_xlat2.x * u_xlat9 + u_xlat28;
    u_xlat28 = textureLod(_Heightmap, u_xlat6.xy, 0.0).x;
    u_xlat20 = textureLod(_Heightmap, u_xlat6.zw, 0.0).x;
    u_xlat28 = u_xlat28 + (-u_xlat20);
    u_xlat28 = u_xlat2.x * u_xlat28 + u_xlat20;
    u_xlat9 = u_xlat9 + (-u_xlat28);
    u_xlat9 = u_xlat2.y * u_xlat9 + u_xlat28;
    u_xlat7.w = u_xlat9 * _HeightScale + u_xlat7.y;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat7.xwz;
    u_xlatu2.xy = uvec2(65280u, 255u) & floatBitsToUint(unity_Builtins0Array[u_xlati27 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1]).ww;
    u_xlat2.xy = vec2(u_xlatu2.xy);
    u_xlat9 = u_xlat2.x * 0.00390625;
    u_xlat2.z = u_xlat2.y + -127.0;
    u_xlatu9 = uint(u_xlat9);
    u_xlat9 = float(u_xlatu9);
    u_xlat2.x = u_xlat9 + -127.0;
    u_xlat6.xy = u_xlat2.xz * vec2(0.00787401572, 0.00787401572);
    u_xlat6.xy = u_xlat6.xy * u_xlat6.xy;
    u_xlat9 = u_xlat6.y + u_xlat6.x;
    u_xlat9 = (-u_xlat9) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb28 = !!(0.0<u_xlat9);
#else
    u_xlatb28 = 0.0<u_xlat9;
#endif
    u_xlat9 = sqrt(u_xlat9);
    u_xlat2.y = u_xlatb28 ? u_xlat9 : float(0.0);
    u_xlat6.xyz = u_xlat2.xyz * u_xlat12.yyy;
    u_xlat6.xyz = u_xlat3.xxx * u_xlat6.xyz;
    u_xlat9 = max(u_xlat3.x, 9.99999972e-10);
    u_xlat0.yz = u_xlat0.zx / vec2(u_xlat9);
    u_xlat1.xyz = u_xlat6.xyz * vec3(0.00393700786, 0.0, 0.00393700786) + u_xlat1.xyz;
    u_xlat5.xz = u_xlat5.yy * (-u_xlat5.yy);
    u_xlat1.xyz = u_xlat5.xyz * u_xlat12.xyz + u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat5 = u_xlat3.yyyy * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat5 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat3.xxxx + u_xlat5;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat3.zzzz + u_xlat5;
    gl_Position = u_xlat3 + hlslcc_mtx4x4unity_MatrixVPZero[3];
    u_xlat4.y = 0.0;
    vs_TEXCOORD0.xyz = u_xlat2.xyz * vec3(0.00787401572, 1.0, 0.00787401572) + u_xlat4.xyz;
    vs_TEXCOORD0.w = 0.0;
    u_xlat0.x = 0.0;
    u_xlat0.xyz = u_xlat2.yzx * vec3(1.0, 0.00787401572, 0.00787401572) + u_xlat0.xyz;
    u_xlat28 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat28 = inversesqrt(u_xlat28);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat28);
    u_xlat2.xyz = in_NORMAL0.yyy * unity_Builtins0Array[u_xlati27 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat2.xyz = unity_Builtins0Array[u_xlati27 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_NORMAL0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = unity_Builtins0Array[u_xlati27 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_NORMAL0.zzz + u_xlat2.xyz;
    u_xlat28 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat28 = inversesqrt(u_xlat28);
    u_xlat2.xyz = vec3(u_xlat28) * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat0.xyz * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat0.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
    u_xlat28 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat28 = inversesqrt(u_xlat28);
    u_xlat2.xyz = vec3(u_xlat28) * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat0.xyz * u_xlat2.xyz;
    u_xlat0.xyz = u_xlat2.zxy * u_xlat0.yzx + (-u_xlat3.xyz);
    u_xlat28 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat28 = inversesqrt(u_xlat28);
    u_xlat1.xyz = vec3(u_xlat28) * u_xlat1.xyz;
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat0.xyz);
#ifdef UNITY_ADRENO_ES3
    { bool cond = 0.0<u_xlat1.x; u_xlati10 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati10 = int((0.0<u_xlat1.x) ? 0xFFFFFFFFu : uint(0u));
#endif
#ifdef UNITY_ADRENO_ES3
    { bool cond = u_xlat1.x<0.0; u_xlati1 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati1 = int((u_xlat1.x<0.0) ? 0xFFFFFFFFu : uint(0u));
#endif
    u_xlati1 = (-u_xlati10) + u_xlati1;
    u_xlat1.x = float(u_xlati1);
    vs_TEXCOORD1.xyz = u_xlat0.xyz * u_xlat1.xxx;
    vs_TEXCOORD1.w = 0.0;
    u_xlatu0.xyz = uvec3(16711680u, 65280u, 255u) & floatBitsToUint(unity_Builtins0Array[u_xlati27 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2]).www;
    u_xlat0.xyz = vec3(u_xlatu0.xyz);
    u_xlatu1.xyz = uvec3(16711680u, 65280u, 255u) & floatBitsToUint(unity_Builtins0Array[u_xlati27 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3]).www;
    u_xlat27 = max(1.0, unity_Builtins0Array[u_xlati27 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].w);
    u_xlat27 = min(u_xlat27, 2.0);
    u_xlat27 = u_xlat27 + -1.0;
    u_xlat1.xyz = vec3(u_xlatu1.xyz);
    u_xlat1.xyz = u_xlat1.xyz * vec3(5.9838392e-08, 1.53186284e-05, 0.00392156886);
    u_xlat0.xyz = u_xlat0.xyz * vec3(5.9838392e-08, 1.53186284e-05, 0.00392156886) + (-u_xlat1.xyz);
    u_xlat28 = u_xlat29 / _RootColorScale;
    u_xlat28 = u_xlat28 + _RootColorOffset;
#ifdef UNITY_ADRENO_ES3
    u_xlat28 = min(max(u_xlat28, 0.0), 1.0);
#else
    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
#endif
    u_xlat0.xyz = vec3(u_xlat28) * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat1.xyz = (-u_xlat0.xyz) + _BurnedColor.xyz;
    u_xlat0.xyz = vec3(u_xlat27) * u_xlat1.xyz + u_xlat0.xyz;
    vs_TEXCOORD2.w = u_xlat27;
    u_xlat27 = u_xlat29 + -0.600000024;
    vs_TEXCOORD3 = u_xlat29;
    u_xlat27 = max(u_xlat27, 0.0);
    u_xlat27 = _GrassTipLighting * u_xlat27 + 1.0;
    vs_TEXCOORD2.xyz = vec3(u_xlat27) * u_xlat0.xyz;
    vs_TEXCOORD4.xy = in_TEXCOORD2.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	float _GrassShininess;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	float _CutOff;
uniform 	vec4 _BurnedColor;
uniform lowp sampler2D _MainTex;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp float vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec4 u_xlat0;
lowp vec4 u_xlat10_0;
bool u_xlatb0;
vec3 u_xlat1;
mediump float u_xlat16_2;
float u_xlat9;
bool u_xlatb9;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD4.xy);
    u_xlat9 = u_xlat10_0.w + (-_CutOff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(u_xlat9<0.0);
#else
    u_xlatb9 = u_xlat9<0.0;
#endif
    if((int(u_xlatb9) * int(0xffffffffu))!=0){discard;}
    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
    SV_Target0.xyz = u_xlat1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0;
    u_xlat1.xyz = _BurnedColor.xyz * u_xlat10_0.xyz + (-u_xlat10_0.xyz);
    u_xlat0.xyz = vs_TEXCOORD2.www * u_xlat1.xyz + u_xlat10_0.xyz;
    u_xlat0.w = vs_TEXCOORD3;
    SV_Target1 = u_xlat0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_2 = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb0) ? u_xlat16_2 : 0.0399999991;
    u_xlat0.x = (-vs_TEXCOORD2.w) + 1.0;
    u_xlat0.x = u_xlat0.x * _GrassShininess;
    SV_Target2.w = u_xlat0.x;
    SV_Target2.xy = vec2(0.0399999991, 0.0399999991);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "MHY_SHADER_LOW" "SOFT_SAMPLE_HEIGHT_ON" "DITHER_FADE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	float _NoiseScale;
uniform 	vec4 _WorldOffsetRange;
uniform 	float _HeightScale;
uniform 	float _Billboard;
uniform 	vec4 _LargeWindParam;
uniform 	vec4 _GlobalWind;
uniform 	float _GrassTipLighting;
uniform 	vec4 _MainTex_ST;
uniform 	float _RootColorScale;
uniform 	float _RootColorOffset;
uniform highp sampler2D _Heightmap;
uniform lowp sampler2D _Noisemap;
in highp vec4 in_POSITION0;
in highp vec4 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec2 in_TEXCOORD2;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp float vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec3 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
vec3 u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
vec2 u_xlat8;
int u_xlati8;
vec2 u_xlat9;
vec2 u_xlat16;
vec2 u_xlat20;
float u_xlat24;
float u_xlat25;
void main()
{
    u_xlat0.xy = vec2(_WorldOffsetRange.z + float(2.0), _WorldOffsetRange.w + float(2.0));
    u_xlat1.xyz = in_TEXCOORD0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[2].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TEXCOORD0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat16.xy = u_xlat1.xz + (-_WorldOffsetRange.xy);
    u_xlat16.xy = u_xlat16.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat16.xy / u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * _WorldOffsetRange.zw + vec2(-0.5, -0.5);
    u_xlat16.xy = floor(u_xlat0.xy);
    u_xlat0.xy = (-u_xlat16.xy) + u_xlat0.xy;
    u_xlat2 = u_xlat16.xyxy + vec4(0.5, 1.5, 1.5, 1.5);
    u_xlat3 = u_xlat16.xyxy + vec4(1.5, 0.5, 0.5, 0.5);
    u_xlat3 = vec4(u_xlat3.x / _WorldOffsetRange.z, u_xlat3.y / _WorldOffsetRange.w, u_xlat3.z / _WorldOffsetRange.z, u_xlat3.w / _WorldOffsetRange.w);
    u_xlat2 = vec4(u_xlat2.x / _WorldOffsetRange.z, u_xlat2.y / _WorldOffsetRange.w, u_xlat2.z / _WorldOffsetRange.z, u_xlat2.w / _WorldOffsetRange.w);
    u_xlat16.x = textureLod(_Heightmap, u_xlat2.zw, 0.0).x;
    u_xlat24 = textureLod(_Heightmap, u_xlat2.xy, 0.0).x;
    u_xlat16.x = (-u_xlat24) + u_xlat16.x;
    u_xlat16.x = u_xlat0.x * u_xlat16.x + u_xlat24;
    u_xlat24 = textureLod(_Heightmap, u_xlat3.xy, 0.0).x;
    u_xlat25 = textureLod(_Heightmap, u_xlat3.zw, 0.0).x;
    u_xlat24 = u_xlat24 + (-u_xlat25);
    u_xlat0.x = u_xlat0.x * u_xlat24 + u_xlat25;
    u_xlat16.x = (-u_xlat0.x) + u_xlat16.x;
    u_xlat0.x = u_xlat0.y * u_xlat16.x + u_xlat0.x;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[0].x;
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[2].x;
    u_xlat8.x = dot(u_xlat2.xy, u_xlat2.xy);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat8.xy = u_xlat8.xx * u_xlat2.xy;
    u_xlat2.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;
    u_xlat2.y = hlslcc_mtx4x4unity_ObjectToWorld[2].x;
    u_xlat24 = dot(u_xlat2.xy, u_xlat2.xy);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat2.xy = vec2(u_xlat24) * u_xlat2.xy;
    u_xlat3.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat3.xyz = (-u_xlat1.xyz) + u_xlat3.xyz;
    u_xlat24 = u_xlat2.y * u_xlat3.z;
    u_xlat24 = u_xlat3.x * u_xlat2.x + (-u_xlat24);
    u_xlat25 = dot(u_xlat3.zx, u_xlat2.xy);
    u_xlat2.xy = u_xlat8.xy * vec2(u_xlat25);
    u_xlat16.x = u_xlat24 * u_xlat8.y + (-u_xlat2.x);
    u_xlat8.x = u_xlat24 * u_xlat8.x + u_xlat2.y;
    u_xlat8.x = u_xlat3.z + u_xlat8.x;
    u_xlat3.z = (-u_xlat8.x) * _Billboard + u_xlat3.z;
    u_xlat8.x = u_xlat3.x + u_xlat16.x;
    u_xlat3.x = (-u_xlat8.x) * _Billboard + u_xlat3.x;
    u_xlat2.xyz = u_xlat1.xyz + u_xlat3.xyz;
    u_xlat8.xy = u_xlat1.xz / vec2(_NoiseScale);
    u_xlat2.w = u_xlat0.x * _HeightScale + u_xlat2.y;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat1.xyz = u_xlat3.xyz * vec3(0.100000001, 1.0, 0.100000001);
    u_xlat24 = dot(_GlobalWind.xyz, _GlobalWind.xyz);
    u_xlat24 = max(u_xlat24, 0.00100000005);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat4 = vec4(u_xlat24) * _GlobalWind.xzxz;
    u_xlat20.xy = vec2(u_xlat4.z * _LargeWindParam.z, u_xlat4.w * _LargeWindParam.z);
    u_xlat8.xy = _LargeWindParam.xx * u_xlat4.xy + u_xlat8.xy;
    u_xlat8.xy = textureLod(_Noisemap, u_xlat8.xy, 0.0).xy;
    u_xlat8.xy = u_xlat8.xy + vec2(-0.5, -0.5);
    u_xlat8.xy = u_xlat8.xy * _LargeWindParam.yy + vec2(0.5, 0.5);
    u_xlat24 = (-in_TEXCOORD1.x) + hlslcc_mtx4x4unity_ObjectToWorld[1].x;
    u_xlat25 = fract(u_xlat24);
    u_xlat24 = u_xlat24 + hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat4.xy = vec2(u_xlat24) * vec2(22.0, 33.0);
    u_xlat4.xy = fract(u_xlat4.xy);
    u_xlat4.xy = u_xlat4.xy + vec2(-0.5, -0.5);
    u_xlat5.xz = u_xlat4.xy * vec2(0.200000003, 0.200000003);
    u_xlat24 = u_xlat25 + -0.5;
    u_xlat25 = u_xlat24 * 0.333000004;
    u_xlat6.y = u_xlat24 * 0.333000004 + -1.0;
    u_xlat24 = in_TEXCOORD1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat25 = u_xlat25 * u_xlat24;
    u_xlat8.xy = u_xlat8.xy * vec2(u_xlat25);
    u_xlat4.xz = u_xlat20.xy * u_xlat8.xy;
    u_xlat4.y = 0.0;
    u_xlat7.xyz = u_xlat3.xyz * vec3(0.100000001, 1.0, 0.100000001) + u_xlat4.xyz;
    u_xlat8.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat8.x = max(u_xlat8.x, 0.00100000005);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat7.xyz = u_xlat8.xxx * u_xlat7.xyz;
    u_xlat0.xyz = u_xlat7.xyz * u_xlat0.xxx + (-u_xlat1.xyz);
    u_xlat0.xyz = u_xlat0.xyz + u_xlat2.xwz;
    u_xlat1.x = u_xlat3.y * u_xlat25;
    u_xlat9.x = max(u_xlat25, 9.99999972e-10);
    u_xlat9.xy = u_xlat4.zx / u_xlat9.xx;
    u_xlat2.yz = u_xlat9.xy + vec2(-1.0, -1.0);
    u_xlat0.xyz = u_xlat1.xxx * vec3(-0.5, 0.0, -0.5) + u_xlat0.xyz;
    u_xlat6.xz = u_xlat6.yy * (-u_xlat6.yy);
    u_xlat0.xyz = u_xlat6.xyz * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat1.xxxx + u_xlat3;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat1.zzzz + u_xlat3;
    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVPZero[3];
    u_xlat5.y = 0.0;
    vs_TEXCOORD0.xyz = u_xlat5.xyz + vec3(-1.0, 0.0, -1.0);
    vs_TEXCOORD0.w = 0.0;
    u_xlat1.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xxx;
    u_xlat1.x = dot(u_xlat2.yz, u_xlat2.yz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat2.x = 0.0;
    u_xlat1.xyz = u_xlat1.xxx * u_xlat2.xyz;
    u_xlat2.xyz = in_NORMAL0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_NORMAL0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_NORMAL0.zzz + u_xlat2.xyz;
    u_xlat25 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat25 = inversesqrt(u_xlat25);
    u_xlat2.xyz = vec3(u_xlat25) * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
    u_xlat25 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat25 = inversesqrt(u_xlat25);
    u_xlat2.xyz = vec3(u_xlat25) * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.zxy * u_xlat1.yzx + (-u_xlat3.xyz);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
#ifdef UNITY_ADRENO_ES3
    { bool cond = 0.0<u_xlat0.x; u_xlati8 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati8 = int((0.0<u_xlat0.x) ? 0xFFFFFFFFu : uint(0u));
#endif
#ifdef UNITY_ADRENO_ES3
    { bool cond = u_xlat0.x<0.0; u_xlati0 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati0 = int((u_xlat0.x<0.0) ? 0xFFFFFFFFu : uint(0u));
#endif
    u_xlati0 = (-u_xlati8) + u_xlati0;
    u_xlat0.x = float(u_xlati0);
    vs_TEXCOORD1.xyz = u_xlat0.xxx * u_xlat1.xyz;
    vs_TEXCOORD1.w = 0.0;
    u_xlat0.x = u_xlat24 / _RootColorScale;
    u_xlat0.x = u_xlat0.x + _RootColorOffset;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xxx * vec3(-0.501960814, 0.0, 0.0) + vec3(0.501960814, 0.0, 0.0);
    u_xlat1.x = u_xlat24 + -0.600000024;
    vs_TEXCOORD3 = u_xlat24;
    u_xlat24 = max(u_xlat1.x, 0.0);
    u_xlat24 = _GrassTipLighting * u_xlat24 + 1.0;
    vs_TEXCOORD2.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    vs_TEXCOORD2.w = 0.0;
    vs_TEXCOORD4.xy = in_TEXCOORD2.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	float _GrassShininess;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	float _CutOff;
uniform 	vec4 _BurnedColor;
uniform lowp sampler2D _MainTex;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp float vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec4 u_xlat0;
lowp vec4 u_xlat10_0;
bool u_xlatb0;
vec3 u_xlat1;
mediump float u_xlat16_2;
float u_xlat9;
bool u_xlatb9;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD4.xy);
    u_xlat9 = u_xlat10_0.w + (-_CutOff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(u_xlat9<0.0);
#else
    u_xlatb9 = u_xlat9<0.0;
#endif
    if((int(u_xlatb9) * int(0xffffffffu))!=0){discard;}
    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
    SV_Target0.xyz = u_xlat1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0;
    u_xlat1.xyz = _BurnedColor.xyz * u_xlat10_0.xyz + (-u_xlat10_0.xyz);
    u_xlat0.xyz = vs_TEXCOORD2.www * u_xlat1.xyz + u_xlat10_0.xyz;
    u_xlat0.w = vs_TEXCOORD3;
    SV_Target1 = u_xlat0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_2 = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb0) ? u_xlat16_2 : 0.0399999991;
    u_xlat0.x = (-vs_TEXCOORD2.w) + 1.0;
    u_xlat0.x = u_xlat0.x * _GrassShininess;
    SV_Target2.w = u_xlat0.x;
    SV_Target2.xy = vec2(0.0399999991, 0.0399999991);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MHY_SHADER_LOW" "SOFT_SAMPLE_HEIGHT_ON" "DITHER_FADE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	int unity_BaseInstanceID;
uniform 	float _NoiseScale;
uniform 	vec4 _WorldOffsetRange;
uniform 	float _HeightScale;
uniform 	float _Billboard;
uniform 	vec4 _LargeWindParam;
uniform 	vec4 _GlobalWind;
uniform 	float _GrassTipLighting;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BurnedColor;
uniform 	float _RootColorScale;
uniform 	float _RootColorOffset;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _Heightmap;
uniform lowp sampler2D _Noisemap;
in highp vec4 in_POSITION0;
in highp vec4 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec2 in_TEXCOORD2;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp float vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec3 u_xlat0;
uvec3 u_xlatu0;
vec4 u_xlat1;
int u_xlati1;
uvec3 u_xlatu1;
vec3 u_xlat2;
uvec2 u_xlatu2;
vec4 u_xlat3;
vec3 u_xlat4;
vec4 u_xlat5;
vec4 u_xlat6;
vec4 u_xlat7;
vec4 u_xlat8;
float u_xlat9;
uint u_xlatu9;
float u_xlat10;
int u_xlati10;
vec3 u_xlat12;
vec2 u_xlat19;
float u_xlat20;
vec2 u_xlat24;
float u_xlat27;
int u_xlati27;
float u_xlat28;
bool u_xlatb28;
float u_xlat29;
uint u_xlatu29;
float u_xlat31;
void main()
{
    u_xlat0.y = 0.0;
    u_xlat27 = dot(_GlobalWind.xyz, _GlobalWind.xyz);
    u_xlat27 = max(u_xlat27, 0.00100000005);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat1 = vec4(u_xlat27) * _GlobalWind.xzxz;
    u_xlat19.xy = vec2(u_xlat1.z * _LargeWindParam.z, u_xlat1.w * _LargeWindParam.z);
    u_xlati27 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati27 = u_xlati27 << 2;
    u_xlat2.xyz = in_TEXCOORD0.yyy * unity_Builtins0Array[u_xlati27 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz;
    u_xlat2.xyz = unity_Builtins0Array[u_xlati27 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_TEXCOORD0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz + unity_Builtins0Array[u_xlati27 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat3.xy = u_xlat2.xz / vec2(_NoiseScale);
    u_xlat1.xy = _LargeWindParam.xx * u_xlat1.xy + u_xlat3.xy;
    u_xlat1.xy = textureLod(_Noisemap, u_xlat1.xy, 0.0).xy;
    u_xlat1.xy = u_xlat1.xy + vec2(-0.5, -0.5);
    u_xlat1.xy = u_xlat1.xy * _LargeWindParam.yy + vec2(0.5, 0.5);
    u_xlat29 = float(floatBitsToUint(unity_Builtins0Array[u_xlati27 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2]).w);
    u_xlat29 = u_xlat29 * 5.96046448e-08;
    u_xlatu29 = uint(u_xlat29);
    u_xlatu29 = u_xlatu29 & 3u;
    u_xlat29 = float(u_xlatu29);
    u_xlat3.x = (-in_TEXCOORD1.x) + unity_Builtins0Array[u_xlati27 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].x;
    u_xlat12.x = fract(u_xlat3.x);
    u_xlat3.x = u_xlat3.x + unity_Builtins0Array[u_xlati27 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].y;
    u_xlat3.xz = u_xlat3.xx * vec2(22.0, 33.0);
    u_xlat3.xz = fract(u_xlat3.xz);
    u_xlat3.xz = u_xlat3.xz + vec2(-0.5, -0.5);
    u_xlat4.xz = u_xlat3.xz * vec2(0.200000003, 0.200000003);
    u_xlat29 = u_xlat29 + u_xlat12.x;
    u_xlat29 = u_xlat29 + -0.5;
    u_xlat3.x = u_xlat29 * 0.333000004;
    u_xlat5.y = u_xlat29 * 0.333000004 + -1.0;
    u_xlat29 = in_TEXCOORD1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat29 = min(max(u_xlat29, 0.0), 1.0);
#else
    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
#endif
    u_xlat3.x = u_xlat3.x * u_xlat29;
    u_xlat1.xy = u_xlat1.xy * u_xlat3.xx;
    u_xlat0.xz = u_xlat19.xy * u_xlat1.xy;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[0].x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[2].x;
    u_xlat19.x = dot(u_xlat1.xy, u_xlat1.xy);
    u_xlat19.x = inversesqrt(u_xlat19.x);
    u_xlat1.xy = u_xlat19.xx * u_xlat1.xy;
    u_xlat12.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati27 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat12.xyz = unity_Builtins0Array[u_xlati27 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat12.xyz;
    u_xlat12.xyz = unity_Builtins0Array[u_xlati27 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat12.xyz;
    u_xlat12.xyz = u_xlat12.xyz + unity_Builtins0Array[u_xlati27 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat12.xyz = (-u_xlat2.xyz) + u_xlat12.xyz;
    u_xlat6.x = unity_Builtins0Array[u_xlati27 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].x;
    u_xlat6.y = unity_Builtins0Array[u_xlati27 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].x;
    u_xlat19.x = dot(u_xlat6.xy, u_xlat6.xy);
    u_xlat19.x = inversesqrt(u_xlat19.x);
    u_xlat19.xy = u_xlat19.xx * u_xlat6.xy;
    u_xlat31 = u_xlat19.y * u_xlat12.z;
    u_xlat31 = u_xlat12.x * u_xlat19.x + (-u_xlat31);
    u_xlat19.x = dot(u_xlat12.zx, u_xlat19.xy);
    u_xlat19.xy = u_xlat1.xy * u_xlat19.xx;
    u_xlat10 = u_xlat31 * u_xlat1.y + (-u_xlat19.x);
    u_xlat1.x = u_xlat31 * u_xlat1.x + u_xlat19.y;
    u_xlat1.x = u_xlat12.z + u_xlat1.x;
    u_xlat12.z = (-u_xlat1.x) * _Billboard + u_xlat12.z;
    u_xlat1.x = u_xlat12.x + u_xlat10;
    u_xlat12.x = (-u_xlat1.x) * _Billboard + u_xlat12.x;
    u_xlat1.xyz = u_xlat12.xyz * vec3(0.100000001, 1.0, 0.100000001) + u_xlat0.xyz;
    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat9 = max(u_xlat9, 0.00100000005);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
    u_xlat9 = dot(u_xlat12.xyz, u_xlat12.xyz);
    u_xlat9 = sqrt(u_xlat9);
    u_xlat6.xyz = u_xlat12.xyz * vec3(0.100000001, 1.0, 0.100000001);
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat9) + (-u_xlat6.xyz);
    u_xlat6.xy = vec2(_WorldOffsetRange.z + float(2.0), _WorldOffsetRange.w + float(2.0));
    u_xlat24.xy = u_xlat2.xz + (-_WorldOffsetRange.xy);
    u_xlat7.xyz = u_xlat2.xyz + u_xlat12.xyz;
    u_xlat2.xy = u_xlat24.xy + vec2(1.0, 1.0);
    u_xlat2.xy = u_xlat2.xy / u_xlat6.xy;
    u_xlat2.xy = u_xlat2.xy * _WorldOffsetRange.zw + vec2(-0.5, -0.5);
    u_xlat6.xy = floor(u_xlat2.xy);
    u_xlat2.xy = u_xlat2.xy + (-u_xlat6.xy);
    u_xlat8 = u_xlat6.xyxy + vec4(0.5, 1.5, 1.5, 1.5);
    u_xlat6 = u_xlat6.xyxy + vec4(1.5, 0.5, 0.5, 0.5);
    u_xlat6 = vec4(u_xlat6.x / _WorldOffsetRange.z, u_xlat6.y / _WorldOffsetRange.w, u_xlat6.z / _WorldOffsetRange.z, u_xlat6.w / _WorldOffsetRange.w);
    u_xlat8 = vec4(u_xlat8.x / _WorldOffsetRange.z, u_xlat8.y / _WorldOffsetRange.w, u_xlat8.z / _WorldOffsetRange.z, u_xlat8.w / _WorldOffsetRange.w);
    u_xlat9 = textureLod(_Heightmap, u_xlat8.zw, 0.0).x;
    u_xlat28 = textureLod(_Heightmap, u_xlat8.xy, 0.0).x;
    u_xlat9 = u_xlat9 + (-u_xlat28);
    u_xlat9 = u_xlat2.x * u_xlat9 + u_xlat28;
    u_xlat28 = textureLod(_Heightmap, u_xlat6.xy, 0.0).x;
    u_xlat20 = textureLod(_Heightmap, u_xlat6.zw, 0.0).x;
    u_xlat28 = u_xlat28 + (-u_xlat20);
    u_xlat28 = u_xlat2.x * u_xlat28 + u_xlat20;
    u_xlat9 = u_xlat9 + (-u_xlat28);
    u_xlat9 = u_xlat2.y * u_xlat9 + u_xlat28;
    u_xlat7.w = u_xlat9 * _HeightScale + u_xlat7.y;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat7.xwz;
    u_xlatu2.xy = uvec2(65280u, 255u) & floatBitsToUint(unity_Builtins0Array[u_xlati27 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1]).ww;
    u_xlat2.xy = vec2(u_xlatu2.xy);
    u_xlat9 = u_xlat2.x * 0.00390625;
    u_xlat2.z = u_xlat2.y + -127.0;
    u_xlatu9 = uint(u_xlat9);
    u_xlat9 = float(u_xlatu9);
    u_xlat2.x = u_xlat9 + -127.0;
    u_xlat6.xy = u_xlat2.xz * vec2(0.00787401572, 0.00787401572);
    u_xlat6.xy = u_xlat6.xy * u_xlat6.xy;
    u_xlat9 = u_xlat6.y + u_xlat6.x;
    u_xlat9 = (-u_xlat9) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb28 = !!(0.0<u_xlat9);
#else
    u_xlatb28 = 0.0<u_xlat9;
#endif
    u_xlat9 = sqrt(u_xlat9);
    u_xlat2.y = u_xlatb28 ? u_xlat9 : float(0.0);
    u_xlat6.xyz = u_xlat2.xyz * u_xlat12.yyy;
    u_xlat6.xyz = u_xlat3.xxx * u_xlat6.xyz;
    u_xlat9 = max(u_xlat3.x, 9.99999972e-10);
    u_xlat0.yz = u_xlat0.zx / vec2(u_xlat9);
    u_xlat1.xyz = u_xlat6.xyz * vec3(0.00393700786, 0.0, 0.00393700786) + u_xlat1.xyz;
    u_xlat5.xz = u_xlat5.yy * (-u_xlat5.yy);
    u_xlat1.xyz = u_xlat5.xyz * u_xlat12.xyz + u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat5 = u_xlat3.yyyy * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat5 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat3.xxxx + u_xlat5;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat3.zzzz + u_xlat5;
    gl_Position = u_xlat3 + hlslcc_mtx4x4unity_MatrixVPZero[3];
    u_xlat4.y = 0.0;
    vs_TEXCOORD0.xyz = u_xlat2.xyz * vec3(0.00787401572, 1.0, 0.00787401572) + u_xlat4.xyz;
    vs_TEXCOORD0.w = 0.0;
    u_xlat0.x = 0.0;
    u_xlat0.xyz = u_xlat2.yzx * vec3(1.0, 0.00787401572, 0.00787401572) + u_xlat0.xyz;
    u_xlat28 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat28 = inversesqrt(u_xlat28);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat28);
    u_xlat2.xyz = in_NORMAL0.yyy * unity_Builtins0Array[u_xlati27 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat2.xyz = unity_Builtins0Array[u_xlati27 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_NORMAL0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = unity_Builtins0Array[u_xlati27 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_NORMAL0.zzz + u_xlat2.xyz;
    u_xlat28 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat28 = inversesqrt(u_xlat28);
    u_xlat2.xyz = vec3(u_xlat28) * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat0.xyz * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat0.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
    u_xlat28 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat28 = inversesqrt(u_xlat28);
    u_xlat2.xyz = vec3(u_xlat28) * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat0.xyz * u_xlat2.xyz;
    u_xlat0.xyz = u_xlat2.zxy * u_xlat0.yzx + (-u_xlat3.xyz);
    u_xlat28 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat28 = inversesqrt(u_xlat28);
    u_xlat1.xyz = vec3(u_xlat28) * u_xlat1.xyz;
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat0.xyz);
#ifdef UNITY_ADRENO_ES3
    { bool cond = 0.0<u_xlat1.x; u_xlati10 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati10 = int((0.0<u_xlat1.x) ? 0xFFFFFFFFu : uint(0u));
#endif
#ifdef UNITY_ADRENO_ES3
    { bool cond = u_xlat1.x<0.0; u_xlati1 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati1 = int((u_xlat1.x<0.0) ? 0xFFFFFFFFu : uint(0u));
#endif
    u_xlati1 = (-u_xlati10) + u_xlati1;
    u_xlat1.x = float(u_xlati1);
    vs_TEXCOORD1.xyz = u_xlat0.xyz * u_xlat1.xxx;
    vs_TEXCOORD1.w = 0.0;
    u_xlatu0.xyz = uvec3(16711680u, 65280u, 255u) & floatBitsToUint(unity_Builtins0Array[u_xlati27 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2]).www;
    u_xlat0.xyz = vec3(u_xlatu0.xyz);
    u_xlatu1.xyz = uvec3(16711680u, 65280u, 255u) & floatBitsToUint(unity_Builtins0Array[u_xlati27 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3]).www;
    u_xlat27 = max(1.0, unity_Builtins0Array[u_xlati27 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].w);
    u_xlat27 = min(u_xlat27, 2.0);
    u_xlat27 = u_xlat27 + -1.0;
    u_xlat1.xyz = vec3(u_xlatu1.xyz);
    u_xlat1.xyz = u_xlat1.xyz * vec3(5.9838392e-08, 1.53186284e-05, 0.00392156886);
    u_xlat0.xyz = u_xlat0.xyz * vec3(5.9838392e-08, 1.53186284e-05, 0.00392156886) + (-u_xlat1.xyz);
    u_xlat28 = u_xlat29 / _RootColorScale;
    u_xlat28 = u_xlat28 + _RootColorOffset;
#ifdef UNITY_ADRENO_ES3
    u_xlat28 = min(max(u_xlat28, 0.0), 1.0);
#else
    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
#endif
    u_xlat0.xyz = vec3(u_xlat28) * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat1.xyz = (-u_xlat0.xyz) + _BurnedColor.xyz;
    u_xlat0.xyz = vec3(u_xlat27) * u_xlat1.xyz + u_xlat0.xyz;
    vs_TEXCOORD2.w = u_xlat27;
    u_xlat27 = u_xlat29 + -0.600000024;
    vs_TEXCOORD3 = u_xlat29;
    u_xlat27 = max(u_xlat27, 0.0);
    u_xlat27 = _GrassTipLighting * u_xlat27 + 1.0;
    vs_TEXCOORD2.xyz = vec3(u_xlat27) * u_xlat0.xyz;
    vs_TEXCOORD4.xy = in_TEXCOORD2.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	float _GrassShininess;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	float _CutOff;
uniform 	vec4 _BurnedColor;
uniform lowp sampler2D _MainTex;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp float vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec4 u_xlat0;
lowp vec4 u_xlat10_0;
bool u_xlatb0;
vec3 u_xlat1;
mediump float u_xlat16_2;
float u_xlat9;
bool u_xlatb9;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD4.xy);
    u_xlat9 = u_xlat10_0.w + (-_CutOff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(u_xlat9<0.0);
#else
    u_xlatb9 = u_xlat9<0.0;
#endif
    if((int(u_xlatb9) * int(0xffffffffu))!=0){discard;}
    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
    SV_Target0.xyz = u_xlat1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0;
    u_xlat1.xyz = _BurnedColor.xyz * u_xlat10_0.xyz + (-u_xlat10_0.xyz);
    u_xlat0.xyz = vs_TEXCOORD2.www * u_xlat1.xyz + u_xlat10_0.xyz;
    u_xlat0.w = vs_TEXCOORD3;
    SV_Target1 = u_xlat0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_2 = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb0) ? u_xlat16_2 : 0.0399999991;
    u_xlat0.x = (-vs_TEXCOORD2.w) + 1.0;
    u_xlat0.x = u_xlat0.x * _GrassShininess;
    SV_Target2.w = u_xlat0.x;
    SV_Target2.xy = vec2(0.0399999991, 0.0399999991);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "MHY_SHADER_HIGH" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	float _NoiseScale;
uniform 	vec4 _WorldOffsetRange;
uniform 	float _HeightScale;
uniform 	float _Billboard;
uniform 	float _VegetationMoveScale;
uniform 	float _VegetationStiffness;
uniform 	vec4 _LocalWindsMapSize;
uniform 	vec4 _LargeWindParam;
uniform 	vec4 _SmallWindParam;
uniform 	vec4 _GlobalWind;
uniform 	vec4 _LocalWindsMapCameraInfo;
uniform 	float _GrassTipLighting;
uniform 	vec4 _MainTex_ST;
uniform 	float _RootColorScale;
uniform 	float _RootColorOffset;
uniform highp sampler2D _Heightmap;
uniform lowp sampler2D _Noisemap;
uniform lowp sampler2D _LocalWindsMap;
in highp vec4 in_POSITION0;
in highp vec4 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec2 in_TEXCOORD2;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp float vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec3 u_xlat1;
int u_xlati1;
vec4 u_xlat2;
bool u_xlatb2;
vec3 u_xlat3;
vec4 u_xlat4;
vec3 u_xlat5;
vec4 u_xlat6;
vec4 u_xlat7;
vec4 u_xlat8;
vec3 u_xlat9;
vec3 u_xlat10;
bool u_xlatb10;
vec2 u_xlat12;
vec3 u_xlat16;
vec2 u_xlat20;
vec2 u_xlat22;
float u_xlat30;
int u_xlati30;
float u_xlat31;
float u_xlat33;
float u_xlat34;
void main()
{
    u_xlat0.z = 0.0;
    u_xlat1.xyz = in_TEXCOORD0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[2].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TEXCOORD0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat10.xz = u_xlat1.xz + (-_LocalWindsMapSize.xy);
    u_xlat10.xz = vec2(u_xlat10.x / _LocalWindsMapSize.z, u_xlat10.z / _LocalWindsMapSize.w);
    u_xlat10.xz = u_xlat10.xz + vec2(0.5, 0.5);
    u_xlat2 = textureLod(_LocalWindsMap, u_xlat10.xz, 0.0);
    u_xlat10.x = dot(u_xlat2.xy, u_xlat2.xy);
    u_xlat10.x = sqrt(u_xlat10.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(9.99999975e-05>=u_xlat10.x);
#else
    u_xlatb10 = 9.99999975e-05>=u_xlat10.x;
#endif
    u_xlat10.x = u_xlatb10 ? 1.0 : float(0.0);
    u_xlat3.xy = (-u_xlat2.xy) + vec2(0.5, 0.5);
    u_xlat10.xz = u_xlat10.xx * u_xlat3.xy + u_xlat2.xy;
    u_xlat10.xz = u_xlat10.xz * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat31 = dot(u_xlat10.xz, u_xlat10.xz);
    u_xlat31 = max(u_xlat31, 0.00100000005);
    u_xlat3.x = inversesqrt(u_xlat31);
    u_xlat3.yz = u_xlat10.xz * u_xlat3.xx;
    u_xlat0.x = u_xlat3.z;
    u_xlat0.xz = (-u_xlat3.xy) * vec2(0.0, 1.0) + u_xlat0.xz;
    u_xlat31 = (-in_TEXCOORD1.x) + hlslcc_mtx4x4unity_ObjectToWorld[1].x;
    u_xlat2.x = u_xlat31 * 3.0;
    u_xlat2.x = _Time.y * 3.0 + u_xlat2.x;
    u_xlat2.x = u_xlat2.x + 0.5;
    u_xlat2.x = fract(u_xlat2.x);
    u_xlat2.x = u_xlat2.x * 2.0 + -1.0;
    u_xlat12.x = abs(u_xlat2.x) * abs(u_xlat2.x);
    u_xlat2.x = -abs(u_xlat2.x) * 2.0 + 3.0;
    u_xlat2.x = u_xlat2.x * u_xlat12.x;
    u_xlat12.x = u_xlat2.z * 1.5;
    u_xlat2.x = u_xlat12.x * u_xlat2.x;
    u_xlat0.xz = u_xlat0.xz * u_xlat2.xx;
    u_xlat0.xz = u_xlat0.xz * vec2(0.150000006, 0.150000006);
    u_xlat0.xz = u_xlat3.yz * u_xlat2.xx + u_xlat0.xz;
    u_xlat0.xz = u_xlat0.xz + u_xlat10.xz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(0.00199999986<u_xlat2.z);
#else
    u_xlatb2 = 0.00199999986<u_xlat2.z;
#endif
    u_xlat12.x = (-u_xlat2.w) * _LocalWindsMapCameraInfo.y + _LocalWindsMapCameraInfo.x;
    u_xlat0.xy = (bool(u_xlatb2)) ? u_xlat0.xz : u_xlat10.xz;
    u_xlat20.xy = vec2(_WorldOffsetRange.z + float(2.0), _WorldOffsetRange.w + float(2.0));
    u_xlat2.xz = u_xlat1.xz + (-_WorldOffsetRange.xy);
    u_xlat2.xz = u_xlat2.xz + vec2(1.0, 1.0);
    u_xlat20.xy = u_xlat2.xz / u_xlat20.xy;
    u_xlat20.x = textureLod(_Heightmap, u_xlat20.xy, 0.0).x;
    u_xlat30 = u_xlat20.x * _HeightScale + u_xlat1.y;
    u_xlat30 = (-u_xlat30) + u_xlat12.x;
    u_xlat30 = u_xlat30 * 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
#else
    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
#endif
    u_xlat30 = (-u_xlat30) + 1.0;
    u_xlat2.x = fract(u_xlat31);
    u_xlat31 = u_xlat31 + hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat12.xy = vec2(u_xlat31) * vec2(22.0, 33.0);
    u_xlat12.xy = fract(u_xlat12.xy);
    u_xlat12.xy = u_xlat12.xy + vec2(-0.5, -0.5);
    u_xlat3.xz = u_xlat12.xy * vec2(0.200000003, 0.200000003);
    u_xlat31 = u_xlat2.x + -0.5;
    u_xlat2.x = u_xlat2.x * _SmallWindParam.x;
    u_xlat2.x = sin(u_xlat2.x);
    u_xlat12.x = u_xlat31 * 0.333000004;
    u_xlat4.y = u_xlat31 * 0.333000004 + -1.0;
    u_xlat31 = in_TEXCOORD1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat31 = min(max(u_xlat31, 0.0), 1.0);
#else
    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat12.x * u_xlat31;
    u_xlat30 = u_xlat30 * u_xlat12.x;
    u_xlat0.xy = vec2(u_xlat30) * u_xlat0.xy;
    u_xlat5.xz = u_xlat0.xy * vec2(vec2(_VegetationMoveScale, _VegetationMoveScale));
    u_xlat0.x = dot(_GlobalWind.xyz, _GlobalWind.xyz);
    u_xlat0.x = max(u_xlat0.x, 0.00100000005);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat6 = u_xlat0.xxxx * _GlobalWind.xzxz;
    u_xlat0.xy = vec2(u_xlat6.z * _LargeWindParam.z, u_xlat6.w * _LargeWindParam.z);
    u_xlat22.xy = u_xlat1.xz / vec2(_NoiseScale);
    u_xlat22.xy = _LargeWindParam.xx * u_xlat6.xy + u_xlat22.xy;
    u_xlat22.xy = textureLod(_Noisemap, u_xlat22.xy, 0.0).xy;
    u_xlat22.xy = u_xlat22.xy + vec2(-0.5, -0.5);
    u_xlat22.xy = u_xlat22.xy * _LargeWindParam.yy + vec2(0.5, 0.5);
    u_xlat22.xy = u_xlat12.xx * u_xlat22.xy;
    u_xlat6.xz = u_xlat0.xy * u_xlat22.xy;
    u_xlat6.y = 0.0;
    u_xlat0.x = _VegetationStiffness * _SmallWindParam.y;
    u_xlat0.x = u_xlat12.x * u_xlat0.x;
    u_xlat7.x = u_xlat0.x * u_xlat2.x;
    u_xlat0.xyw = in_NORMAL0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyw = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_NORMAL0.xxx + u_xlat0.xyw;
    u_xlat0.xyw = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_NORMAL0.zzz + u_xlat0.xyw;
    u_xlat2.x = dot(u_xlat0.xyw, u_xlat0.xyw);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat0.xyw = u_xlat0.xyw * u_xlat2.xxx;
    u_xlat7.y = float(1.0);
    u_xlat7.z = float(0.349999994);
    u_xlat2.xzw = u_xlat0.xyw * u_xlat7.yxy;
    u_xlat8.xyz = u_xlat2.xzw * u_xlat7.xzx + u_xlat6.xyz;
    u_xlat2.xzw = u_xlat7.xzx * u_xlat2.xzw;
    u_xlat5.y = 0.0;
    u_xlat7.xyz = u_xlat5.xyz + u_xlat8.xyz;
    u_xlat8.y = hlslcc_mtx4x4unity_MatrixV[0].x;
    u_xlat8.x = hlslcc_mtx4x4unity_MatrixV[2].x;
    u_xlat33 = dot(u_xlat8.xy, u_xlat8.xy);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat16.xz = vec2(u_xlat33) * u_xlat8.xy;
    u_xlat8.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;
    u_xlat8.y = hlslcc_mtx4x4unity_ObjectToWorld[2].x;
    u_xlat33 = dot(u_xlat8.xy, u_xlat8.xy);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat8.xy = vec2(u_xlat33) * u_xlat8.xy;
    u_xlat9.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat9.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat9.xyz;
    u_xlat9.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat9.xyz;
    u_xlat9.xyz = u_xlat9.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat9.xyz = (-u_xlat1.xyz) + u_xlat9.xyz;
    u_xlat33 = u_xlat8.y * u_xlat9.z;
    u_xlat33 = u_xlat9.x * u_xlat8.x + (-u_xlat33);
    u_xlat34 = dot(u_xlat9.zx, u_xlat8.xy);
    u_xlat8.xy = u_xlat16.xz * vec2(u_xlat34);
    u_xlat34 = u_xlat33 * u_xlat16.z + (-u_xlat8.x);
    u_xlat33 = u_xlat33 * u_xlat16.x + u_xlat8.y;
    u_xlat33 = u_xlat9.z + u_xlat33;
    u_xlat9.z = (-u_xlat33) * _Billboard + u_xlat9.z;
    u_xlat33 = u_xlat9.x + u_xlat34;
    u_xlat9.x = (-u_xlat33) * _Billboard + u_xlat9.x;
    u_xlat33 = u_xlat12.x * u_xlat9.y;
    u_xlat12.x = max(u_xlat12.x, 9.99999972e-10);
    u_xlat7.xyz = u_xlat9.xyz * vec3(0.100000001, 1.0, 0.100000001) + u_xlat7.xyz;
    u_xlat34 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat34 = max(u_xlat34, 0.00100000005);
    u_xlat34 = inversesqrt(u_xlat34);
    u_xlat7.xyz = vec3(u_xlat34) * u_xlat7.xyz;
    u_xlat34 = dot(u_xlat9.xyz, u_xlat9.xyz);
    u_xlat34 = sqrt(u_xlat34);
    u_xlat8.xyz = u_xlat9.xyz * vec3(0.100000001, 1.0, 0.100000001);
    u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat34) + (-u_xlat8.xyz);
    u_xlat8.xyz = u_xlat1.xyz + u_xlat9.xyz;
    u_xlat8.w = u_xlat20.x * _HeightScale + u_xlat8.y;
    u_xlat1.xyz = u_xlat7.xyz + u_xlat8.xwz;
    u_xlat1.xyz = vec3(u_xlat33) * vec3(-0.5, 0.0, -0.5) + u_xlat1.xyz;
    u_xlat4.xz = u_xlat4.yy * (-u_xlat4.yy);
    u_xlat1.xyz = u_xlat4.xyz * u_xlat9.xyz + u_xlat1.xyz;
    u_xlat4.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat7 = u_xlat4.yyyy * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat7 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat4.xxxx + u_xlat7;
    u_xlat4 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat4.zzzz + u_xlat7;
    gl_Position = u_xlat4 + hlslcc_mtx4x4unity_MatrixVPZero[3];
    u_xlat3.y = 0.0;
    vs_TEXCOORD0.xyz = u_xlat3.xyz + vec3(-1.0, 0.0, -1.0);
    vs_TEXCOORD0.w = 0.0;
    u_xlat3.xyz = u_xlat5.yzx / u_xlat12.xxx;
    u_xlat4.yz = u_xlat6.zx / u_xlat12.xx;
    u_xlat2.xyz = u_xlat2.zwx / u_xlat12.xxx;
    u_xlat4.x = 0.0;
    u_xlat2.xyz = u_xlat2.xyz + u_xlat4.xyz;
    u_xlat2.xyz = u_xlat3.xyz + u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz + vec3(0.0, -1.0, -1.0);
    u_xlat20.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat20.x = inversesqrt(u_xlat20.x);
    u_xlat2.xyz = u_xlat20.xxx * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat0.xyw * u_xlat2.xyz;
    u_xlat0.xyz = u_xlat2.zxy * u_xlat0.ywx + (-u_xlat3.xyz);
    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.xyz * u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
    u_xlat30 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat1.xyz = vec3(u_xlat30) * u_xlat1.xyz;
    u_xlat30 = dot(u_xlat1.xyz, u_xlat0.xyz);
#ifdef UNITY_ADRENO_ES3
    { bool cond = 0.0<u_xlat30; u_xlati1 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati1 = int((0.0<u_xlat30) ? 0xFFFFFFFFu : uint(0u));
#endif
#ifdef UNITY_ADRENO_ES3
    { bool cond = u_xlat30<0.0; u_xlati30 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati30 = int((u_xlat30<0.0) ? 0xFFFFFFFFu : uint(0u));
#endif
    u_xlati30 = (-u_xlati1) + u_xlati30;
    u_xlat30 = float(u_xlati30);
    vs_TEXCOORD1.xyz = vec3(u_xlat30) * u_xlat0.xyz;
    vs_TEXCOORD1.w = 0.0;
    u_xlat0.x = u_xlat31 / _RootColorScale;
    u_xlat0.x = u_xlat0.x + _RootColorOffset;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xxx * vec3(-0.501960814, 0.0, 0.0) + vec3(0.501960814, 0.0, 0.0);
    u_xlat30 = u_xlat31 + -0.600000024;
    vs_TEXCOORD3 = u_xlat31;
    u_xlat30 = max(u_xlat30, 0.0);
    u_xlat30 = _GrassTipLighting * u_xlat30 + 1.0;
    vs_TEXCOORD2.xyz = vec3(u_xlat30) * u_xlat0.xyz;
    vs_TEXCOORD2.w = 0.0;
    vs_TEXCOORD4.xy = in_TEXCOORD2.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	float _GrassShininess;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	float _CutOff;
uniform 	vec4 _BurnedColor;
uniform lowp sampler2D _MainTex;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp float vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec4 u_xlat0;
lowp vec4 u_xlat10_0;
bool u_xlatb0;
vec3 u_xlat1;
mediump float u_xlat16_2;
float u_xlat9;
bool u_xlatb9;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD4.xy);
    u_xlat9 = u_xlat10_0.w + (-_CutOff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(u_xlat9<0.0);
#else
    u_xlatb9 = u_xlat9<0.0;
#endif
    if((int(u_xlatb9) * int(0xffffffffu))!=0){discard;}
    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
    SV_Target0.xyz = u_xlat1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0;
    u_xlat1.xyz = _BurnedColor.xyz * u_xlat10_0.xyz + (-u_xlat10_0.xyz);
    u_xlat0.xyz = vs_TEXCOORD2.www * u_xlat1.xyz + u_xlat10_0.xyz;
    u_xlat0.w = vs_TEXCOORD3;
    SV_Target1 = u_xlat0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_2 = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb0) ? u_xlat16_2 : 0.0399999991;
    u_xlat0.x = (-vs_TEXCOORD2.w) + 1.0;
    u_xlat0.x = u_xlat0.x * _GrassShininess;
    SV_Target2.w = u_xlat0.x;
    SV_Target2.xy = vec2(0.0399999991, 0.0399999991);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "MHY_SHADER_HIGH" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	int unity_BaseInstanceID;
uniform 	float _NoiseScale;
uniform 	vec4 _WorldOffsetRange;
uniform 	float _HeightScale;
uniform 	float _Billboard;
uniform 	float _VegetationMoveScale;
uniform 	float _VegetationStiffness;
uniform 	vec4 _LocalWindsMapSize;
uniform 	vec4 _LargeWindParam;
uniform 	vec4 _SmallWindParam;
uniform 	vec4 _GlobalWind;
uniform 	vec4 _LocalWindsMapCameraInfo;
uniform 	float _GrassTipLighting;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BurnedColor;
uniform 	float _RootColorScale;
uniform 	float _RootColorOffset;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _Heightmap;
uniform lowp sampler2D _Noisemap;
uniform lowp sampler2D _LocalWindsMap;
in highp vec4 in_POSITION0;
in highp vec4 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec2 in_TEXCOORD2;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp float vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec3 u_xlat0;
int u_xlati0;
uvec3 u_xlatu0;
vec3 u_xlat1;
uvec3 u_xlatu1;
vec4 u_xlat2;
uvec3 u_xlatu2;
vec3 u_xlat3;
vec4 u_xlat4;
vec3 u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
vec3 u_xlat8;
vec4 u_xlat9;
vec4 u_xlat10;
float u_xlat11;
int u_xlati11;
float u_xlat13;
uint u_xlatu13;
vec3 u_xlat17;
vec3 u_xlat18;
float u_xlat22;
int u_xlati22;
bool u_xlatb22;
float u_xlat24;
float u_xlat33;
bool u_xlatb33;
float u_xlat34;
bool u_xlatb34;
float u_xlat36;
void main()
{
    u_xlat0.z = 0.0;
    u_xlati11 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati11 = u_xlati11 << 2;
    u_xlat1.xyz = in_TEXCOORD0.yyy * unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_TEXCOORD0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat2.xy = u_xlat1.xz + (-_LocalWindsMapSize.xy);
    u_xlat2.xy = vec2(u_xlat2.x / _LocalWindsMapSize.z, u_xlat2.y / _LocalWindsMapSize.w);
    u_xlat2.xy = u_xlat2.xy + vec2(0.5, 0.5);
    u_xlat2 = textureLod(_LocalWindsMap, u_xlat2.xy, 0.0);
    u_xlat33 = dot(u_xlat2.xy, u_xlat2.xy);
    u_xlat33 = sqrt(u_xlat33);
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(9.99999975e-05>=u_xlat33);
#else
    u_xlatb33 = 9.99999975e-05>=u_xlat33;
#endif
    u_xlat33 = u_xlatb33 ? 1.0 : float(0.0);
    u_xlat3.xy = (-u_xlat2.xy) + vec2(0.5, 0.5);
    u_xlat2.xy = vec2(u_xlat33) * u_xlat3.xy + u_xlat2.xy;
    u_xlat2.xy = u_xlat2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat33 = dot(u_xlat2.xy, u_xlat2.xy);
    u_xlat33 = max(u_xlat33, 0.00100000005);
    u_xlat3.x = inversesqrt(u_xlat33);
    u_xlat3.yz = u_xlat2.xy * u_xlat3.xx;
    u_xlat0.x = u_xlat3.z;
    u_xlat0.xz = (-u_xlat3.xy) * vec2(0.0, 1.0) + u_xlat0.xz;
    u_xlat33 = (-in_TEXCOORD1.x) + unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].x;
    u_xlat34 = u_xlat33 * 3.0;
    u_xlat34 = _Time.y * 3.0 + u_xlat34;
    u_xlat34 = u_xlat34 + 0.5;
    u_xlat34 = fract(u_xlat34);
    u_xlat34 = u_xlat34 * 2.0 + -1.0;
    u_xlat3.x = abs(u_xlat34) * abs(u_xlat34);
    u_xlat34 = -abs(u_xlat34) * 2.0 + 3.0;
    u_xlat34 = u_xlat34 * u_xlat3.x;
    u_xlat3.x = u_xlat2.z * 1.5;
    u_xlat34 = u_xlat34 * u_xlat3.x;
    u_xlat0.xz = u_xlat0.xz * vec2(u_xlat34);
    u_xlat0.xz = u_xlat0.xz * vec2(0.150000006, 0.150000006);
    u_xlat0.xz = u_xlat3.yz * vec2(u_xlat34) + u_xlat0.xz;
    u_xlat0.xz = u_xlat0.xz + u_xlat2.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlatb34 = !!(0.00199999986<u_xlat2.z);
#else
    u_xlatb34 = 0.00199999986<u_xlat2.z;
#endif
    u_xlat24 = (-u_xlat2.w) * _LocalWindsMapCameraInfo.y + _LocalWindsMapCameraInfo.x;
    u_xlat0.xz = (bool(u_xlatb34)) ? u_xlat0.xz : u_xlat2.xy;
    u_xlat2.xy = vec2(_WorldOffsetRange.z + float(2.0), _WorldOffsetRange.w + float(2.0));
    u_xlat3.xy = u_xlat1.xz + (-_WorldOffsetRange.xy);
    u_xlat3.xy = u_xlat3.xy + vec2(1.0, 1.0);
    u_xlat2.xy = u_xlat3.xy / u_xlat2.xy;
    u_xlat34 = textureLod(_Heightmap, u_xlat2.xy, 0.0).x;
    u_xlat2.x = u_xlat34 * _HeightScale + u_xlat1.y;
    u_xlat2.x = (-u_xlat2.x) + u_xlat24;
    u_xlat2.x = u_xlat2.x * 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat2.x = (-u_xlat2.x) + 1.0;
    u_xlat13 = float(floatBitsToUint(unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2]).w);
    u_xlat13 = u_xlat13 * 5.96046448e-08;
    u_xlatu13 = uint(u_xlat13);
    u_xlatu13 = u_xlatu13 & 3u;
    u_xlat13 = float(u_xlatu13);
    u_xlat24 = fract(u_xlat33);
    u_xlat33 = u_xlat33 + unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].y;
    u_xlat3.xy = vec2(u_xlat33) * vec2(22.0, 33.0);
    u_xlat3.xy = fract(u_xlat3.xy);
    u_xlat3.xy = u_xlat3.xy + vec2(-0.5, -0.5);
    u_xlat3.xz = u_xlat3.xy * vec2(0.200000003, 0.200000003);
    u_xlat33 = u_xlat13 + u_xlat24;
    u_xlat13 = u_xlat24 * _SmallWindParam.x;
    u_xlat13 = sin(u_xlat13);
    u_xlat33 = u_xlat33 + -0.5;
    u_xlat24 = u_xlat33 * 0.333000004;
    u_xlat4.y = u_xlat33 * 0.333000004 + -1.0;
    u_xlat33 = in_TEXCOORD1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat33 = min(max(u_xlat33, 0.0), 1.0);
#else
    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
#endif
    u_xlat24 = u_xlat24 * u_xlat33;
    u_xlat2.x = u_xlat24 * u_xlat2.x;
    u_xlat0.xz = u_xlat0.xz * u_xlat2.xx;
    u_xlat5.xz = u_xlat0.xz * vec2(vec2(_VegetationMoveScale, _VegetationMoveScale));
    u_xlat6.y = 0.0;
    u_xlat0.x = _VegetationStiffness * _SmallWindParam.y;
    u_xlat0.x = u_xlat24 * u_xlat0.x;
    u_xlat7.x = u_xlat0.x * u_xlat13;
    u_xlat2.xyw = in_NORMAL0.yyy * unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat2.xyw = unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_NORMAL0.xxx + u_xlat2.xyw;
    u_xlat2.xyw = unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_NORMAL0.zzz + u_xlat2.xyw;
    u_xlat0.x = dot(u_xlat2.xyw, u_xlat2.xyw);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat2.xyw = u_xlat0.xxx * u_xlat2.xyw;
    u_xlat7.y = float(1.0);
    u_xlat7.z = float(0.349999994);
    u_xlat8.xyz = u_xlat2.xyw * u_xlat7.yxy;
    u_xlat0.x = dot(_GlobalWind.xyz, _GlobalWind.xyz);
    u_xlat0.x = max(u_xlat0.x, 0.00100000005);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat9 = u_xlat0.xxxx * _GlobalWind.xzxz;
    u_xlat0.xz = vec2(u_xlat9.z * _LargeWindParam.z, u_xlat9.w * _LargeWindParam.z);
    u_xlat18.xz = u_xlat1.xz / vec2(_NoiseScale);
    u_xlat18.xz = _LargeWindParam.xx * u_xlat9.xy + u_xlat18.xz;
    u_xlat18.xz = textureLod(_Noisemap, u_xlat18.xz, 0.0).xy;
    u_xlat18.xz = u_xlat18.xz + vec2(-0.5, -0.5);
    u_xlat18.xz = u_xlat18.xz * _LargeWindParam.yy + vec2(0.5, 0.5);
    u_xlat18.xz = vec2(u_xlat24) * u_xlat18.xz;
    u_xlat6.xz = u_xlat0.xz * u_xlat18.xz;
    u_xlat9.xyz = u_xlat8.xyz * u_xlat7.xzx + u_xlat6.xyz;
    u_xlat7.xyz = u_xlat7.xzx * u_xlat8.xyz;
    u_xlat5.y = 0.0;
    u_xlat8.xyz = u_xlat5.xyz + u_xlat9.xyz;
    u_xlat9.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat9.xyz = unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat9.xyz;
    u_xlat9.xyz = unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat9.xyz;
    u_xlat9.xyz = u_xlat9.xyz + unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat9.xyz = (-u_xlat1.xyz) + u_xlat9.xyz;
    u_xlat10.x = unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].x;
    u_xlat10.y = unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].x;
    u_xlat0.x = dot(u_xlat10.xy, u_xlat10.xy);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xz = u_xlat0.xx * u_xlat10.xy;
    u_xlat36 = u_xlat0.z * u_xlat9.z;
    u_xlat36 = u_xlat9.x * u_xlat0.x + (-u_xlat36);
    u_xlat0.x = dot(u_xlat9.zx, u_xlat0.xz);
    u_xlat10.y = hlslcc_mtx4x4unity_MatrixV[0].x;
    u_xlat10.x = hlslcc_mtx4x4unity_MatrixV[2].x;
    u_xlat22 = dot(u_xlat10.xy, u_xlat10.xy);
    u_xlat22 = inversesqrt(u_xlat22);
    u_xlat17.xz = vec2(u_xlat22) * u_xlat10.xy;
    u_xlat0.xz = u_xlat0.xx * u_xlat17.xz;
    u_xlat0.x = u_xlat36 * u_xlat17.z + (-u_xlat0.x);
    u_xlat0.z = u_xlat36 * u_xlat17.x + u_xlat0.z;
    u_xlat0.xz = u_xlat9.xz + u_xlat0.xz;
    u_xlat9.z = (-u_xlat0.z) * _Billboard + u_xlat9.z;
    u_xlat9.x = (-u_xlat0.x) * _Billboard + u_xlat9.x;
    u_xlat8.xyz = u_xlat9.xyz * vec3(0.100000001, 1.0, 0.100000001) + u_xlat8.xyz;
    u_xlat0.x = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat0.x = max(u_xlat0.x, 0.00100000005);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat8.xyz = u_xlat0.xxx * u_xlat8.xyz;
    u_xlat0.x = dot(u_xlat9.xyz, u_xlat9.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat10.xyz = u_xlat9.xyz * vec3(0.100000001, 1.0, 0.100000001);
    u_xlat8.xyz = u_xlat8.xyz * u_xlat0.xxx + (-u_xlat10.xyz);
    u_xlat10.xyz = u_xlat1.xyz + u_xlat9.xyz;
    u_xlat10.w = u_xlat34 * _HeightScale + u_xlat10.y;
    u_xlat1.xyz = u_xlat8.xyz + u_xlat10.xwz;
    u_xlatu0.xz = uvec2(65280u, 255u) & floatBitsToUint(unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1]).ww;
    u_xlat0.xz = vec2(u_xlatu0.xz);
    u_xlat0.x = u_xlat0.x * 0.00390625;
    u_xlatu0.x = uint(u_xlat0.x);
    u_xlat0.x = float(u_xlatu0.x);
    u_xlat8.xz = u_xlat0.xz + vec2(-127.0, -127.0);
    u_xlat0.xz = u_xlat8.xz * vec2(0.00787401572, 0.00787401572);
    u_xlat0.xz = u_xlat0.xz * u_xlat0.xz;
    u_xlat0.x = u_xlat0.z + u_xlat0.x;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(0.0<u_xlat0.x);
#else
    u_xlatb22 = 0.0<u_xlat0.x;
#endif
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat8.y = u_xlatb22 ? u_xlat0.x : float(0.0);
    u_xlat10.xyz = u_xlat8.xyz * u_xlat9.yyy;
    u_xlat10.xyz = vec3(u_xlat24) * u_xlat10.xyz;
    u_xlat0.x = max(u_xlat24, 9.99999972e-10);
    u_xlat1.xyz = u_xlat10.xyz * vec3(0.00393700786, 0.0, 0.00393700786) + u_xlat1.xyz;
    u_xlat4.xz = u_xlat4.yy * (-u_xlat4.yy);
    u_xlat1.xyz = u_xlat4.xyz * u_xlat9.xyz + u_xlat1.xyz;
    u_xlat4.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat9 = u_xlat4.yyyy * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat9 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat4.xxxx + u_xlat9;
    u_xlat4 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat4.zzzz + u_xlat9;
    gl_Position = u_xlat4 + hlslcc_mtx4x4unity_MatrixVPZero[3];
    u_xlat3.y = 0.0;
    vs_TEXCOORD0.xyz = u_xlat8.xyz * vec3(0.00787401572, 1.0, 0.00787401572) + u_xlat3.xyz;
    vs_TEXCOORD0.w = 0.0;
    u_xlat3.xyz = u_xlat5.yzx / u_xlat0.xxx;
    u_xlat4.yz = u_xlat6.zx / u_xlat0.xx;
    u_xlat5.xyz = u_xlat7.yzx / u_xlat0.xxx;
    u_xlat4.x = 0.0;
    u_xlat4.xyz = u_xlat4.xyz + u_xlat5.xyz;
    u_xlat3.xyz = u_xlat3.xyz + u_xlat4.xyz;
    u_xlat3.xyz = u_xlat8.yzx * vec3(1.0, 0.00787401572, 0.00787401572) + u_xlat3.xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.xyw * u_xlat3.xyz;
    u_xlat2.xyz = u_xlat3.zxy * u_xlat2.ywx + (-u_xlat4.xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat4.xyz = u_xlat3.xyz * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
    { bool cond = 0.0<u_xlat0.x; u_xlati22 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati22 = int((0.0<u_xlat0.x) ? 0xFFFFFFFFu : uint(0u));
#endif
#ifdef UNITY_ADRENO_ES3
    { bool cond = u_xlat0.x<0.0; u_xlati0 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati0 = int((u_xlat0.x<0.0) ? 0xFFFFFFFFu : uint(0u));
#endif
    u_xlati0 = (-u_xlati22) + u_xlati0;
    u_xlat0.x = float(u_xlati0);
    vs_TEXCOORD1.xyz = u_xlat0.xxx * u_xlat2.xyz;
    vs_TEXCOORD1.w = 0.0;
    u_xlatu1.xyz = uvec3(16711680u, 65280u, 255u) & floatBitsToUint(unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2]).www;
    u_xlat1.xyz = vec3(u_xlatu1.xyz);
    u_xlatu2.xyz = uvec3(16711680u, 65280u, 255u) & floatBitsToUint(unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3]).www;
    u_xlat0.x = max(1.0, unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].w);
    u_xlat0.x = min(u_xlat0.x, 2.0);
    u_xlat0.x = u_xlat0.x + -1.0;
    u_xlat2.xyz = vec3(u_xlatu2.xyz);
    u_xlat2.xyz = u_xlat2.xyz * vec3(5.9838392e-08, 1.53186284e-05, 0.00392156886);
    u_xlat1.xyz = u_xlat1.xyz * vec3(5.9838392e-08, 1.53186284e-05, 0.00392156886) + (-u_xlat2.xyz);
    u_xlat11 = u_xlat33 / _RootColorScale;
    u_xlat11 = u_xlat11 + _RootColorOffset;
#ifdef UNITY_ADRENO_ES3
    u_xlat11 = min(max(u_xlat11, 0.0), 1.0);
#else
    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat11) * u_xlat1.xyz + u_xlat2.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _BurnedColor.xyz;
    u_xlat1.xyz = u_xlat0.xxx * u_xlat2.xyz + u_xlat1.xyz;
    vs_TEXCOORD2.w = u_xlat0.x;
    u_xlat0.x = u_xlat33 + -0.600000024;
    vs_TEXCOORD3 = u_xlat33;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = _GrassTipLighting * u_xlat0.x + 1.0;
    vs_TEXCOORD2.xyz = u_xlat0.xxx * u_xlat1.xyz;
    vs_TEXCOORD4.xy = in_TEXCOORD2.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	float _GrassShininess;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	float _CutOff;
uniform 	vec4 _BurnedColor;
uniform lowp sampler2D _MainTex;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp float vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec4 u_xlat0;
lowp vec4 u_xlat10_0;
bool u_xlatb0;
vec3 u_xlat1;
mediump float u_xlat16_2;
float u_xlat9;
bool u_xlatb9;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD4.xy);
    u_xlat9 = u_xlat10_0.w + (-_CutOff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(u_xlat9<0.0);
#else
    u_xlatb9 = u_xlat9<0.0;
#endif
    if((int(u_xlatb9) * int(0xffffffffu))!=0){discard;}
    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
    SV_Target0.xyz = u_xlat1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0;
    u_xlat1.xyz = _BurnedColor.xyz * u_xlat10_0.xyz + (-u_xlat10_0.xyz);
    u_xlat0.xyz = vs_TEXCOORD2.www * u_xlat1.xyz + u_xlat10_0.xyz;
    u_xlat0.w = vs_TEXCOORD3;
    SV_Target1 = u_xlat0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_2 = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb0) ? u_xlat16_2 : 0.0399999991;
    u_xlat0.x = (-vs_TEXCOORD2.w) + 1.0;
    u_xlat0.x = u_xlat0.x * _GrassShininess;
    SV_Target2.w = u_xlat0.x;
    SV_Target2.xy = vec2(0.0399999991, 0.0399999991);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "MHY_SHADER_HIGH" "DITHER_FADE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	float _NoiseScale;
uniform 	vec4 _WorldOffsetRange;
uniform 	float _HeightScale;
uniform 	float _Billboard;
uniform 	float _VegetationMoveScale;
uniform 	float _VegetationStiffness;
uniform 	vec4 _LocalWindsMapSize;
uniform 	vec4 _LargeWindParam;
uniform 	vec4 _SmallWindParam;
uniform 	vec4 _GlobalWind;
uniform 	vec4 _LocalWindsMapCameraInfo;
uniform 	float _GrassTipLighting;
uniform 	vec4 _MainTex_ST;
uniform 	float _RootColorScale;
uniform 	float _RootColorOffset;
uniform highp sampler2D _Heightmap;
uniform lowp sampler2D _Noisemap;
uniform lowp sampler2D _LocalWindsMap;
in highp vec4 in_POSITION0;
in highp vec4 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec2 in_TEXCOORD2;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp float vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
vec4 u_xlat0;
vec3 u_xlat1;
int u_xlati1;
vec4 u_xlat2;
bool u_xlatb2;
vec3 u_xlat3;
vec4 u_xlat4;
vec3 u_xlat5;
vec4 u_xlat6;
vec4 u_xlat7;
vec4 u_xlat8;
vec3 u_xlat9;
vec3 u_xlat10;
bool u_xlatb10;
vec2 u_xlat12;
vec3 u_xlat16;
vec2 u_xlat20;
vec2 u_xlat22;
float u_xlat30;
int u_xlati30;
float u_xlat31;
float u_xlat33;
float u_xlat34;
void main()
{
    u_xlat0.z = 0.0;
    u_xlat1.xyz = in_TEXCOORD0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[2].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TEXCOORD0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat10.xz = u_xlat1.xz + (-_LocalWindsMapSize.xy);
    u_xlat10.xz = vec2(u_xlat10.x / _LocalWindsMapSize.z, u_xlat10.z / _LocalWindsMapSize.w);
    u_xlat10.xz = u_xlat10.xz + vec2(0.5, 0.5);
    u_xlat2 = textureLod(_LocalWindsMap, u_xlat10.xz, 0.0);
    u_xlat10.x = dot(u_xlat2.xy, u_xlat2.xy);
    u_xlat10.x = sqrt(u_xlat10.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(9.99999975e-05>=u_xlat10.x);
#else
    u_xlatb10 = 9.99999975e-05>=u_xlat10.x;
#endif
    u_xlat10.x = u_xlatb10 ? 1.0 : float(0.0);
    u_xlat3.xy = (-u_xlat2.xy) + vec2(0.5, 0.5);
    u_xlat10.xz = u_xlat10.xx * u_xlat3.xy + u_xlat2.xy;
    u_xlat10.xz = u_xlat10.xz * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat31 = dot(u_xlat10.xz, u_xlat10.xz);
    u_xlat31 = max(u_xlat31, 0.00100000005);
    u_xlat3.x = inversesqrt(u_xlat31);
    u_xlat3.yz = u_xlat10.xz * u_xlat3.xx;
    u_xlat0.x = u_xlat3.z;
    u_xlat0.xz = (-u_xlat3.xy) * vec2(0.0, 1.0) + u_xlat0.xz;
    u_xlat31 = (-in_TEXCOORD1.x) + hlslcc_mtx4x4unity_ObjectToWorld[1].x;
    u_xlat2.x = u_xlat31 * 3.0;
    u_xlat2.x = _Time.y * 3.0 + u_xlat2.x;
    u_xlat2.x = u_xlat2.x + 0.5;
    u_xlat2.x = fract(u_xlat2.x);
    u_xlat2.x = u_xlat2.x * 2.0 + -1.0;
    u_xlat12.x = abs(u_xlat2.x) * abs(u_xlat2.x);
    u_xlat2.x = -abs(u_xlat2.x) * 2.0 + 3.0;
    u_xlat2.x = u_xlat2.x * u_xlat12.x;
    u_xlat12.x = u_xlat2.z * 1.5;
    u_xlat2.x = u_xlat12.x * u_xlat2.x;
    u_xlat0.xz = u_xlat0.xz * u_xlat2.xx;
    u_xlat0.xz = u_xlat0.xz * vec2(0.150000006, 0.150000006);
    u_xlat0.xz = u_xlat3.yz * u_xlat2.xx + u_xlat0.xz;
    u_xlat0.xz = u_xlat0.xz + u_xlat10.xz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(0.00199999986<u_xlat2.z);
#else
    u_xlatb2 = 0.00199999986<u_xlat2.z;
#endif
    u_xlat12.x = (-u_xlat2.w) * _LocalWindsMapCameraInfo.y + _LocalWindsMapCameraInfo.x;
    u_xlat0.xy = (bool(u_xlatb2)) ? u_xlat0.xz : u_xlat10.xz;
    u_xlat20.xy = vec2(_WorldOffsetRange.z + float(2.0), _WorldOffsetRange.w + float(2.0));
    u_xlat2.xz = u_xlat1.xz + (-_WorldOffsetRange.xy);
    u_xlat2.xz = u_xlat2.xz + vec2(1.0, 1.0);
    u_xlat20.xy = u_xlat2.xz / u_xlat20.xy;
    u_xlat20.x = textureLod(_Heightmap, u_xlat20.xy, 0.0).x;
    u_xlat30 = u_xlat20.x * _HeightScale + u_xlat1.y;
    u_xlat30 = (-u_xlat30) + u_xlat12.x;
    u_xlat30 = u_xlat30 * 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
#else
    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
#endif
    u_xlat30 = (-u_xlat30) + 1.0;
    u_xlat2.x = fract(u_xlat31);
    u_xlat31 = u_xlat31 + hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat12.xy = vec2(u_xlat31) * vec2(22.0, 33.0);
    u_xlat12.xy = fract(u_xlat12.xy);
    u_xlat12.xy = u_xlat12.xy + vec2(-0.5, -0.5);
    u_xlat3.xz = u_xlat12.xy * vec2(0.200000003, 0.200000003);
    u_xlat31 = u_xlat2.x + -0.5;
    u_xlat2.x = u_xlat2.x * _SmallWindParam.x;
    u_xlat2.x = sin(u_xlat2.x);
    u_xlat12.x = u_xlat31 * 0.333000004;
    u_xlat4.y = u_xlat31 * 0.333000004 + -1.0;
    u_xlat31 = in_TEXCOORD1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat31 = min(max(u_xlat31, 0.0), 1.0);
#else
    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat12.x * u_xlat31;
    u_xlat30 = u_xlat30 * u_xlat12.x;
    u_xlat0.xy = vec2(u_xlat30) * u_xlat0.xy;
    u_xlat5.xz = u_xlat0.xy * vec2(vec2(_VegetationMoveScale, _VegetationMoveScale));
    u_xlat0.x = dot(_GlobalWind.xyz, _GlobalWind.xyz);
    u_xlat0.x = max(u_xlat0.x, 0.00100000005);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat6 = u_xlat0.xxxx * _GlobalWind.xzxz;
    u_xlat0.xy = vec2(u_xlat6.z * _LargeWindParam.z, u_xlat6.w * _LargeWindParam.z);
    u_xlat22.xy = u_xlat1.xz / vec2(_NoiseScale);
    u_xlat22.xy = _LargeWindParam.xx * u_xlat6.xy + u_xlat22.xy;
    u_xlat22.xy = textureLod(_Noisemap, u_xlat22.xy, 0.0).xy;
    u_xlat22.xy = u_xlat22.xy + vec2(-0.5, -0.5);
    u_xlat22.xy = u_xlat22.xy * _LargeWindParam.yy + vec2(0.5, 0.5);
    u_xlat22.xy = u_xlat12.xx * u_xlat22.xy;
    u_xlat6.xz = u_xlat0.xy * u_xlat22.xy;
    u_xlat6.y = 0.0;
    u_xlat0.x = _VegetationStiffness * _SmallWindParam.y;
    u_xlat0.x = u_xlat12.x * u_xlat0.x;
    u_xlat7.x = u_xlat0.x * u_xlat2.x;
    u_xlat0.xyw = in_NORMAL0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyw = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_NORMAL0.xxx + u_xlat0.xyw;
    u_xlat0.xyw = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_NORMAL0.zzz + u_xlat0.xyw;
    u_xlat2.x = dot(u_xlat0.xyw, u_xlat0.xyw);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat0.xyw = u_xlat0.xyw * u_xlat2.xxx;
    u_xlat7.y = float(1.0);
    u_xlat7.z = float(0.349999994);
    u_xlat2.xzw = u_xlat0.xyw * u_xlat7.yxy;
    u_xlat8.xyz = u_xlat2.xzw * u_xlat7.xzx + u_xlat6.xyz;
    u_xlat2.xzw = u_xlat7.xzx * u_xlat2.xzw;
    u_xlat5.y = 0.0;
    u_xlat7.xyz = u_xlat5.xyz + u_xlat8.xyz;
    u_xlat8.y = hlslcc_mtx4x4unity_MatrixV[0].x;
    u_xlat8.x = hlslcc_mtx4x4unity_MatrixV[2].x;
    u_xlat33 = dot(u_xlat8.xy, u_xlat8.xy);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat16.xz = vec2(u_xlat33) * u_xlat8.xy;
    u_xlat8.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;
    u_xlat8.y = hlslcc_mtx4x4unity_ObjectToWorld[2].x;
    u_xlat33 = dot(u_xlat8.xy, u_xlat8.xy);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat8.xy = vec2(u_xlat33) * u_xlat8.xy;
    u_xlat9.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat9.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat9.xyz;
    u_xlat9.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat9.xyz;
    u_xlat9.xyz = u_xlat9.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat9.xyz = (-u_xlat1.xyz) + u_xlat9.xyz;
    u_xlat33 = u_xlat8.y * u_xlat9.z;
    u_xlat33 = u_xlat9.x * u_xlat8.x + (-u_xlat33);
    u_xlat34 = dot(u_xlat9.zx, u_xlat8.xy);
    u_xlat8.xy = u_xlat16.xz * vec2(u_xlat34);
    u_xlat34 = u_xlat33 * u_xlat16.z + (-u_xlat8.x);
    u_xlat33 = u_xlat33 * u_xlat16.x + u_xlat8.y;
    u_xlat33 = u_xlat9.z + u_xlat33;
    u_xlat9.z = (-u_xlat33) * _Billboard + u_xlat9.z;
    u_xlat33 = u_xlat9.x + u_xlat34;
    u_xlat9.x = (-u_xlat33) * _Billboard + u_xlat9.x;
    u_xlat33 = u_xlat12.x * u_xlat9.y;
    u_xlat12.x = max(u_xlat12.x, 9.99999972e-10);
    u_xlat7.xyz = u_xlat9.xyz * vec3(0.100000001, 1.0, 0.100000001) + u_xlat7.xyz;
    u_xlat34 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat34 = max(u_xlat34, 0.00100000005);
    u_xlat34 = inversesqrt(u_xlat34);
    u_xlat7.xyz = vec3(u_xlat34) * u_xlat7.xyz;
    u_xlat34 = dot(u_xlat9.xyz, u_xlat9.xyz);
    u_xlat34 = sqrt(u_xlat34);
    u_xlat8.xyz = u_xlat9.xyz * vec3(0.100000001, 1.0, 0.100000001);
    u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat34) + (-u_xlat8.xyz);
    u_xlat8.xyz = u_xlat1.xyz + u_xlat9.xyz;
    u_xlat8.w = u_xlat20.x * _HeightScale + u_xlat8.y;
    u_xlat1.xyz = u_xlat7.xyz + u_xlat8.xwz;
    u_xlat1.xyz = vec3(u_xlat33) * vec3(-0.5, 0.0, -0.5) + u_xlat1.xyz;
    u_xlat4.xz = u_xlat4.yy * (-u_xlat4.yy);
    u_xlat1.xyz = u_xlat4.xyz * u_xlat9.xyz + u_xlat1.xyz;
    u_xlat4.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat7 = u_xlat4.yyyy * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat7 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat4.xxxx + u_xlat7;
    u_xlat4 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat4.zzzz + u_xlat7;
    u_xlat4 = u_xlat4 + hlslcc_mtx4x4unity_MatrixVPZero[3];
    gl_Position = u_xlat4;
    u_xlat3.y = 0.0;
    vs_TEXCOORD0.xyz = u_xlat3.xyz + vec3(-1.0, 0.0, -1.0);
    vs_TEXCOORD0.w = 0.0;
    u_xlat3.xyz = u_xlat5.yzx / u_xlat12.xxx;
    u_xlat5.yz = u_xlat6.zx / u_xlat12.xx;
    u_xlat2.xyz = u_xlat2.zwx / u_xlat12.xxx;
    u_xlat5.x = 0.0;
    u_xlat2.xyz = u_xlat2.xyz + u_xlat5.xyz;
    u_xlat2.xyz = u_xlat3.xyz + u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz + vec3(0.0, -1.0, -1.0);
    u_xlat20.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat20.x = inversesqrt(u_xlat20.x);
    u_xlat2.xyz = u_xlat20.xxx * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat0.xyw * u_xlat2.xyz;
    u_xlat0.xyz = u_xlat2.zxy * u_xlat0.ywx + (-u_xlat3.xyz);
    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.xyz * u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
    u_xlat30 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat1.xyz = vec3(u_xlat30) * u_xlat1.xyz;
    u_xlat30 = dot(u_xlat1.xyz, u_xlat0.xyz);
#ifdef UNITY_ADRENO_ES3
    { bool cond = 0.0<u_xlat30; u_xlati1 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati1 = int((0.0<u_xlat30) ? 0xFFFFFFFFu : uint(0u));
#endif
#ifdef UNITY_ADRENO_ES3
    { bool cond = u_xlat30<0.0; u_xlati30 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati30 = int((u_xlat30<0.0) ? 0xFFFFFFFFu : uint(0u));
#endif
    u_xlati30 = (-u_xlati1) + u_xlati30;
    u_xlat30 = float(u_xlati30);
    vs_TEXCOORD1.xyz = vec3(u_xlat30) * u_xlat0.xyz;
    vs_TEXCOORD1.w = 0.0;
    u_xlat0.x = u_xlat31 / _RootColorScale;
    u_xlat0.x = u_xlat0.x + _RootColorOffset;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xxx * vec3(-0.501960814, 0.0, 0.0) + vec3(0.501960814, 0.0, 0.0);
    u_xlat30 = u_xlat31 + -0.600000024;
    vs_TEXCOORD3 = u_xlat31;
    u_xlat30 = max(u_xlat30, 0.0);
    u_xlat30 = _GrassTipLighting * u_xlat30 + 1.0;
    vs_TEXCOORD2.xyz = vec3(u_xlat30) * u_xlat0.xyz;
    vs_TEXCOORD2.w = 0.0;
    vs_TEXCOORD4.xy = in_TEXCOORD2.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
    u_xlat0.x = u_xlat4.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat4.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.w = u_xlat4.w;
    vs_TEXCOORD5.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD5.z = 0.247058824;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
float ImmCB_0_0_0[64];
uniform 	vec4 _ScreenParams;
uniform 	float _GrassShininess;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	float _CutOff;
uniform 	vec4 _BurnedColor;
uniform lowp sampler2D _MainTex;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp float vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec3 u_xlat0;
int u_xlati0;
bool u_xlatb0;
lowp vec4 u_xlat10_1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat12;
bool u_xlatb12;
void main()
{
	ImmCB_0_0_0[0] = 1.0;
	ImmCB_0_0_0[1] = 49.0;
	ImmCB_0_0_0[2] = 13.0;
	ImmCB_0_0_0[3] = 61.0;
	ImmCB_0_0_0[4] = 4.0;
	ImmCB_0_0_0[5] = 52.0;
	ImmCB_0_0_0[6] = 16.0;
	ImmCB_0_0_0[7] = 64.0;
	ImmCB_0_0_0[8] = 33.0;
	ImmCB_0_0_0[9] = 17.0;
	ImmCB_0_0_0[10] = 45.0;
	ImmCB_0_0_0[11] = 29.0;
	ImmCB_0_0_0[12] = 36.0;
	ImmCB_0_0_0[13] = 20.0;
	ImmCB_0_0_0[14] = 48.0;
	ImmCB_0_0_0[15] = 32.0;
	ImmCB_0_0_0[16] = 9.0;
	ImmCB_0_0_0[17] = 57.0;
	ImmCB_0_0_0[18] = 5.0;
	ImmCB_0_0_0[19] = 53.0;
	ImmCB_0_0_0[20] = 12.0;
	ImmCB_0_0_0[21] = 60.0;
	ImmCB_0_0_0[22] = 8.0;
	ImmCB_0_0_0[23] = 56.0;
	ImmCB_0_0_0[24] = 41.0;
	ImmCB_0_0_0[25] = 25.0;
	ImmCB_0_0_0[26] = 37.0;
	ImmCB_0_0_0[27] = 21.0;
	ImmCB_0_0_0[28] = 44.0;
	ImmCB_0_0_0[29] = 28.0;
	ImmCB_0_0_0[30] = 40.0;
	ImmCB_0_0_0[31] = 24.0;
	ImmCB_0_0_0[32] = 3.0;
	ImmCB_0_0_0[33] = 51.0;
	ImmCB_0_0_0[34] = 15.0;
	ImmCB_0_0_0[35] = 63.0;
	ImmCB_0_0_0[36] = 2.0;
	ImmCB_0_0_0[37] = 50.0;
	ImmCB_0_0_0[38] = 14.0;
	ImmCB_0_0_0[39] = 62.0;
	ImmCB_0_0_0[40] = 35.0;
	ImmCB_0_0_0[41] = 19.0;
	ImmCB_0_0_0[42] = 47.0;
	ImmCB_0_0_0[43] = 31.0;
	ImmCB_0_0_0[44] = 34.0;
	ImmCB_0_0_0[45] = 18.0;
	ImmCB_0_0_0[46] = 46.0;
	ImmCB_0_0_0[47] = 30.0;
	ImmCB_0_0_0[48] = 11.0;
	ImmCB_0_0_0[49] = 59.0;
	ImmCB_0_0_0[50] = 7.0;
	ImmCB_0_0_0[51] = 55.0;
	ImmCB_0_0_0[52] = 10.0;
	ImmCB_0_0_0[53] = 58.0;
	ImmCB_0_0_0[54] = 6.0;
	ImmCB_0_0_0[55] = 54.0;
	ImmCB_0_0_0[56] = 43.0;
	ImmCB_0_0_0[57] = 27.0;
	ImmCB_0_0_0[58] = 39.0;
	ImmCB_0_0_0[59] = 23.0;
	ImmCB_0_0_0[60] = 42.0;
	ImmCB_0_0_0[61] = 26.0;
	ImmCB_0_0_0[62] = 38.0;
	ImmCB_0_0_0[63] = 22.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vs_TEXCOORD5.z<0.949999988);
#else
    u_xlatb0 = vs_TEXCOORD5.z<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD5.yx / vs_TEXCOORD5.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
        u_xlat0.xy = u_xlat0.xy * vec2(0.125, 0.125);
        u_xlat0.xy = fract(u_xlat0.xy);
        u_xlat0.xy = u_xlat0.xy * vec2(7.99900007, 7.99900007);
        u_xlat0.xy = trunc(u_xlat0.xy);
        u_xlat0.x = u_xlat0.x * 8.0 + u_xlat0.y;
        u_xlati0 = int(u_xlat0.x);
        u_xlat0.x = (-ImmCB_0_0_0[u_xlati0]) * 0.015625 + vs_TEXCOORD5.z;
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat0.x = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD0.xyz;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD4.xy);
    u_xlat2.xyz = _BurnedColor.xyz * u_xlat10_1.xyz + (-u_xlat10_1.xyz);
    u_xlat2.xyz = vs_TEXCOORD2.www * u_xlat2.xyz + u_xlat10_1.xyz;
    u_xlat12 = u_xlat10_1.w + (-_CutOff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat12<0.0);
#else
    u_xlatb12 = u_xlat12<0.0;
#endif
    if((int(u_xlatb12) * int(0xffffffffu))!=0){discard;}
    u_xlat12 = (-vs_TEXCOORD2.w) + 1.0;
    u_xlat12 = u_xlat12 * _GrassShininess;
    SV_Target0.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_3 = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb0) ? u_xlat16_3 : 0.0399999991;
    SV_Target0.w = 0.0;
    u_xlat2.w = vs_TEXCOORD3;
    SV_Target1 = u_xlat2;
    SV_Target2.xy = vec2(0.0399999991, 0.0399999991);
    SV_Target2.w = u_xlat12;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "MHY_SHADER_HIGH" "DITHER_FADE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	int unity_BaseInstanceID;
uniform 	float _NoiseScale;
uniform 	vec4 _WorldOffsetRange;
uniform 	float _HeightScale;
uniform 	float _Billboard;
uniform 	float _VegetationMoveScale;
uniform 	float _VegetationStiffness;
uniform 	vec4 _LocalWindsMapSize;
uniform 	vec4 _LargeWindParam;
uniform 	vec4 _SmallWindParam;
uniform 	vec4 _GlobalWind;
uniform 	vec4 _LocalWindsMapCameraInfo;
uniform 	float _GrassTipLighting;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BurnedColor;
uniform 	float _RootColorScale;
uniform 	float _RootColorOffset;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _Heightmap;
uniform lowp sampler2D _Noisemap;
uniform lowp sampler2D _LocalWindsMap;
in highp vec4 in_POSITION0;
in highp vec4 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec2 in_TEXCOORD2;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp float vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
vec4 u_xlat0;
int u_xlati0;
uvec3 u_xlatu0;
vec3 u_xlat1;
uvec3 u_xlatu1;
vec4 u_xlat2;
uvec4 u_xlatu2;
vec3 u_xlat3;
vec4 u_xlat4;
vec3 u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
vec3 u_xlat8;
vec4 u_xlat9;
vec4 u_xlat10;
float u_xlat11;
int u_xlati11;
float u_xlat13;
uint u_xlatu13;
vec3 u_xlat17;
vec3 u_xlat18;
float u_xlat22;
int u_xlati22;
bool u_xlatb22;
float u_xlat24;
float u_xlat33;
bool u_xlatb33;
float u_xlat34;
bool u_xlatb34;
float u_xlat36;
void main()
{
    u_xlat0.z = 0.0;
    u_xlati11 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati11 = u_xlati11 << 2;
    u_xlat1.xyz = in_TEXCOORD0.yyy * unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_TEXCOORD0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat2.xy = u_xlat1.xz + (-_LocalWindsMapSize.xy);
    u_xlat2.xy = vec2(u_xlat2.x / _LocalWindsMapSize.z, u_xlat2.y / _LocalWindsMapSize.w);
    u_xlat2.xy = u_xlat2.xy + vec2(0.5, 0.5);
    u_xlat2 = textureLod(_LocalWindsMap, u_xlat2.xy, 0.0);
    u_xlat33 = dot(u_xlat2.xy, u_xlat2.xy);
    u_xlat33 = sqrt(u_xlat33);
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(9.99999975e-05>=u_xlat33);
#else
    u_xlatb33 = 9.99999975e-05>=u_xlat33;
#endif
    u_xlat33 = u_xlatb33 ? 1.0 : float(0.0);
    u_xlat3.xy = (-u_xlat2.xy) + vec2(0.5, 0.5);
    u_xlat2.xy = vec2(u_xlat33) * u_xlat3.xy + u_xlat2.xy;
    u_xlat2.xy = u_xlat2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat33 = dot(u_xlat2.xy, u_xlat2.xy);
    u_xlat33 = max(u_xlat33, 0.00100000005);
    u_xlat3.x = inversesqrt(u_xlat33);
    u_xlat3.yz = u_xlat2.xy * u_xlat3.xx;
    u_xlat0.x = u_xlat3.z;
    u_xlat0.xz = (-u_xlat3.xy) * vec2(0.0, 1.0) + u_xlat0.xz;
    u_xlat33 = (-in_TEXCOORD1.x) + unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].x;
    u_xlat34 = u_xlat33 * 3.0;
    u_xlat34 = _Time.y * 3.0 + u_xlat34;
    u_xlat34 = u_xlat34 + 0.5;
    u_xlat34 = fract(u_xlat34);
    u_xlat34 = u_xlat34 * 2.0 + -1.0;
    u_xlat3.x = abs(u_xlat34) * abs(u_xlat34);
    u_xlat34 = -abs(u_xlat34) * 2.0 + 3.0;
    u_xlat34 = u_xlat34 * u_xlat3.x;
    u_xlat3.x = u_xlat2.z * 1.5;
    u_xlat34 = u_xlat34 * u_xlat3.x;
    u_xlat0.xz = u_xlat0.xz * vec2(u_xlat34);
    u_xlat0.xz = u_xlat0.xz * vec2(0.150000006, 0.150000006);
    u_xlat0.xz = u_xlat3.yz * vec2(u_xlat34) + u_xlat0.xz;
    u_xlat0.xz = u_xlat0.xz + u_xlat2.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlatb34 = !!(0.00199999986<u_xlat2.z);
#else
    u_xlatb34 = 0.00199999986<u_xlat2.z;
#endif
    u_xlat24 = (-u_xlat2.w) * _LocalWindsMapCameraInfo.y + _LocalWindsMapCameraInfo.x;
    u_xlat0.xz = (bool(u_xlatb34)) ? u_xlat0.xz : u_xlat2.xy;
    u_xlat2.xy = vec2(_WorldOffsetRange.z + float(2.0), _WorldOffsetRange.w + float(2.0));
    u_xlat3.xy = u_xlat1.xz + (-_WorldOffsetRange.xy);
    u_xlat3.xy = u_xlat3.xy + vec2(1.0, 1.0);
    u_xlat2.xy = u_xlat3.xy / u_xlat2.xy;
    u_xlat34 = textureLod(_Heightmap, u_xlat2.xy, 0.0).x;
    u_xlat2.x = u_xlat34 * _HeightScale + u_xlat1.y;
    u_xlat2.x = (-u_xlat2.x) + u_xlat24;
    u_xlat2.x = u_xlat2.x * 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat2.x = (-u_xlat2.x) + 1.0;
    u_xlat13 = float(floatBitsToUint(unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2]).w);
    u_xlat13 = u_xlat13 * 5.96046448e-08;
    u_xlatu13 = uint(u_xlat13);
    u_xlatu13 = u_xlatu13 & 3u;
    u_xlat13 = float(u_xlatu13);
    u_xlat24 = fract(u_xlat33);
    u_xlat33 = u_xlat33 + unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].y;
    u_xlat3.xy = vec2(u_xlat33) * vec2(22.0, 33.0);
    u_xlat3.xy = fract(u_xlat3.xy);
    u_xlat3.xy = u_xlat3.xy + vec2(-0.5, -0.5);
    u_xlat3.xz = u_xlat3.xy * vec2(0.200000003, 0.200000003);
    u_xlat33 = u_xlat13 + u_xlat24;
    u_xlat13 = u_xlat24 * _SmallWindParam.x;
    u_xlat13 = sin(u_xlat13);
    u_xlat33 = u_xlat33 + -0.5;
    u_xlat24 = u_xlat33 * 0.333000004;
    u_xlat4.y = u_xlat33 * 0.333000004 + -1.0;
    u_xlat33 = in_TEXCOORD1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat33 = min(max(u_xlat33, 0.0), 1.0);
#else
    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
#endif
    u_xlat24 = u_xlat24 * u_xlat33;
    u_xlat2.x = u_xlat24 * u_xlat2.x;
    u_xlat0.xz = u_xlat0.xz * u_xlat2.xx;
    u_xlat5.xz = u_xlat0.xz * vec2(vec2(_VegetationMoveScale, _VegetationMoveScale));
    u_xlat6.y = 0.0;
    u_xlat0.x = _VegetationStiffness * _SmallWindParam.y;
    u_xlat0.x = u_xlat24 * u_xlat0.x;
    u_xlat7.x = u_xlat0.x * u_xlat13;
    u_xlat2.xyw = in_NORMAL0.yyy * unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat2.xyw = unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_NORMAL0.xxx + u_xlat2.xyw;
    u_xlat2.xyw = unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_NORMAL0.zzz + u_xlat2.xyw;
    u_xlat0.x = dot(u_xlat2.xyw, u_xlat2.xyw);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat2.xyw = u_xlat0.xxx * u_xlat2.xyw;
    u_xlat7.y = float(1.0);
    u_xlat7.z = float(0.349999994);
    u_xlat8.xyz = u_xlat2.xyw * u_xlat7.yxy;
    u_xlat0.x = dot(_GlobalWind.xyz, _GlobalWind.xyz);
    u_xlat0.x = max(u_xlat0.x, 0.00100000005);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat9 = u_xlat0.xxxx * _GlobalWind.xzxz;
    u_xlat0.xz = vec2(u_xlat9.z * _LargeWindParam.z, u_xlat9.w * _LargeWindParam.z);
    u_xlat18.xz = u_xlat1.xz / vec2(_NoiseScale);
    u_xlat18.xz = _LargeWindParam.xx * u_xlat9.xy + u_xlat18.xz;
    u_xlat18.xz = textureLod(_Noisemap, u_xlat18.xz, 0.0).xy;
    u_xlat18.xz = u_xlat18.xz + vec2(-0.5, -0.5);
    u_xlat18.xz = u_xlat18.xz * _LargeWindParam.yy + vec2(0.5, 0.5);
    u_xlat18.xz = vec2(u_xlat24) * u_xlat18.xz;
    u_xlat6.xz = u_xlat0.xz * u_xlat18.xz;
    u_xlat9.xyz = u_xlat8.xyz * u_xlat7.xzx + u_xlat6.xyz;
    u_xlat7.xyz = u_xlat7.xzx * u_xlat8.xyz;
    u_xlat5.y = 0.0;
    u_xlat8.xyz = u_xlat5.xyz + u_xlat9.xyz;
    u_xlat9.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat9.xyz = unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat9.xyz;
    u_xlat9.xyz = unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat9.xyz;
    u_xlat9.xyz = u_xlat9.xyz + unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat9.xyz = (-u_xlat1.xyz) + u_xlat9.xyz;
    u_xlat10.x = unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].x;
    u_xlat10.y = unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].x;
    u_xlat0.x = dot(u_xlat10.xy, u_xlat10.xy);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xz = u_xlat0.xx * u_xlat10.xy;
    u_xlat36 = u_xlat0.z * u_xlat9.z;
    u_xlat36 = u_xlat9.x * u_xlat0.x + (-u_xlat36);
    u_xlat0.x = dot(u_xlat9.zx, u_xlat0.xz);
    u_xlat10.y = hlslcc_mtx4x4unity_MatrixV[0].x;
    u_xlat10.x = hlslcc_mtx4x4unity_MatrixV[2].x;
    u_xlat22 = dot(u_xlat10.xy, u_xlat10.xy);
    u_xlat22 = inversesqrt(u_xlat22);
    u_xlat17.xz = vec2(u_xlat22) * u_xlat10.xy;
    u_xlat0.xz = u_xlat0.xx * u_xlat17.xz;
    u_xlat0.x = u_xlat36 * u_xlat17.z + (-u_xlat0.x);
    u_xlat0.z = u_xlat36 * u_xlat17.x + u_xlat0.z;
    u_xlat0.xz = u_xlat9.xz + u_xlat0.xz;
    u_xlat9.z = (-u_xlat0.z) * _Billboard + u_xlat9.z;
    u_xlat9.x = (-u_xlat0.x) * _Billboard + u_xlat9.x;
    u_xlat8.xyz = u_xlat9.xyz * vec3(0.100000001, 1.0, 0.100000001) + u_xlat8.xyz;
    u_xlat0.x = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat0.x = max(u_xlat0.x, 0.00100000005);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat8.xyz = u_xlat0.xxx * u_xlat8.xyz;
    u_xlat0.x = dot(u_xlat9.xyz, u_xlat9.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat10.xyz = u_xlat9.xyz * vec3(0.100000001, 1.0, 0.100000001);
    u_xlat8.xyz = u_xlat8.xyz * u_xlat0.xxx + (-u_xlat10.xyz);
    u_xlat10.xyz = u_xlat1.xyz + u_xlat9.xyz;
    u_xlat10.w = u_xlat34 * _HeightScale + u_xlat10.y;
    u_xlat1.xyz = u_xlat8.xyz + u_xlat10.xwz;
    u_xlatu0.xz = uvec2(65280u, 255u) & floatBitsToUint(unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1]).ww;
    u_xlat0.xz = vec2(u_xlatu0.xz);
    u_xlat0.x = u_xlat0.x * 0.00390625;
    u_xlatu0.x = uint(u_xlat0.x);
    u_xlat0.x = float(u_xlatu0.x);
    u_xlat8.xz = u_xlat0.xz + vec2(-127.0, -127.0);
    u_xlat0.xz = u_xlat8.xz * vec2(0.00787401572, 0.00787401572);
    u_xlat0.xz = u_xlat0.xz * u_xlat0.xz;
    u_xlat0.x = u_xlat0.z + u_xlat0.x;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(0.0<u_xlat0.x);
#else
    u_xlatb22 = 0.0<u_xlat0.x;
#endif
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat8.y = u_xlatb22 ? u_xlat0.x : float(0.0);
    u_xlat10.xyz = u_xlat8.xyz * u_xlat9.yyy;
    u_xlat10.xyz = vec3(u_xlat24) * u_xlat10.xyz;
    u_xlat0.x = max(u_xlat24, 9.99999972e-10);
    u_xlat1.xyz = u_xlat10.xyz * vec3(0.00393700786, 0.0, 0.00393700786) + u_xlat1.xyz;
    u_xlat4.xz = u_xlat4.yy * (-u_xlat4.yy);
    u_xlat1.xyz = u_xlat4.xyz * u_xlat9.xyz + u_xlat1.xyz;
    u_xlat4.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat9 = u_xlat4.yyyy * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat9 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat4.xxxx + u_xlat9;
    u_xlat4 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat4.zzzz + u_xlat9;
    u_xlat4 = u_xlat4 + hlslcc_mtx4x4unity_MatrixVPZero[3];
    gl_Position = u_xlat4;
    u_xlat3.y = 0.0;
    vs_TEXCOORD0.xyz = u_xlat8.xyz * vec3(0.00787401572, 1.0, 0.00787401572) + u_xlat3.xyz;
    vs_TEXCOORD0.w = 0.0;
    u_xlat3.xyz = u_xlat5.yzx / u_xlat0.xxx;
    u_xlat5.yz = u_xlat6.zx / u_xlat0.xx;
    u_xlat6.xyz = u_xlat7.yzx / u_xlat0.xxx;
    u_xlat5.x = 0.0;
    u_xlat5.xyz = u_xlat5.xyz + u_xlat6.xyz;
    u_xlat3.xyz = u_xlat3.xyz + u_xlat5.xyz;
    u_xlat3.xyz = u_xlat8.yzx * vec3(1.0, 0.00787401572, 0.00787401572) + u_xlat3.xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat5.xyz = u_xlat2.xyw * u_xlat3.xyz;
    u_xlat2.xyz = u_xlat3.zxy * u_xlat2.ywx + (-u_xlat5.xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat5.xyz = u_xlat3.xyz * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat5.xyz);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
    { bool cond = 0.0<u_xlat0.x; u_xlati22 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati22 = int((0.0<u_xlat0.x) ? 0xFFFFFFFFu : uint(0u));
#endif
#ifdef UNITY_ADRENO_ES3
    { bool cond = u_xlat0.x<0.0; u_xlati0 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati0 = int((u_xlat0.x<0.0) ? 0xFFFFFFFFu : uint(0u));
#endif
    u_xlati0 = (-u_xlati22) + u_xlati0;
    u_xlat0.x = float(u_xlati0);
    vs_TEXCOORD1.xyz = u_xlat0.xxx * u_xlat2.xyz;
    vs_TEXCOORD1.w = 0.0;
    u_xlatu1.xyz = uvec3(16711680u, 65280u, 255u) & floatBitsToUint(unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2]).www;
    u_xlat1.xyz = vec3(u_xlatu1.xyz);
    u_xlatu2 = uvec4(4278190080u, 16711680u, 65280u, 255u) & floatBitsToUint(unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3]).wwww;
    u_xlat0.x = max(1.0, unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].w);
    u_xlat0.x = min(u_xlat0.x, 2.0);
    u_xlat0.x = u_xlat0.x + -1.0;
    u_xlat2 = vec4(u_xlatu2);
    u_xlat2 = u_xlat2 * vec4(2.33743719e-10, 5.9838392e-08, 1.53186284e-05, 0.00392156886);
    u_xlat1.xyz = u_xlat1.xyz * vec3(5.9838392e-08, 1.53186284e-05, 0.00392156886) + (-u_xlat2.yzw);
    u_xlat11 = u_xlat33 / _RootColorScale;
    u_xlat11 = u_xlat11 + _RootColorOffset;
#ifdef UNITY_ADRENO_ES3
    u_xlat11 = min(max(u_xlat11, 0.0), 1.0);
#else
    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat11) * u_xlat1.xyz + u_xlat2.yzw;
    vs_TEXCOORD5.z = u_xlat2.x;
    u_xlat2.xyz = (-u_xlat1.xyz) + _BurnedColor.xyz;
    u_xlat1.xyz = u_xlat0.xxx * u_xlat2.xyz + u_xlat1.xyz;
    vs_TEXCOORD2.w = u_xlat0.x;
    u_xlat0.x = u_xlat33 + -0.600000024;
    vs_TEXCOORD3 = u_xlat33;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = _GrassTipLighting * u_xlat0.x + 1.0;
    vs_TEXCOORD2.xyz = u_xlat0.xxx * u_xlat1.xyz;
    vs_TEXCOORD4.xy = in_TEXCOORD2.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
    u_xlat0.x = u_xlat4.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat4.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.w = u_xlat4.w;
    vs_TEXCOORD5.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
float ImmCB_0_0_0[64];
uniform 	vec4 _ScreenParams;
uniform 	float _GrassShininess;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	float _CutOff;
uniform 	vec4 _BurnedColor;
uniform lowp sampler2D _MainTex;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp float vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec3 u_xlat0;
int u_xlati0;
bool u_xlatb0;
lowp vec4 u_xlat10_1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat12;
bool u_xlatb12;
void main()
{
	ImmCB_0_0_0[0] = 1.0;
	ImmCB_0_0_0[1] = 49.0;
	ImmCB_0_0_0[2] = 13.0;
	ImmCB_0_0_0[3] = 61.0;
	ImmCB_0_0_0[4] = 4.0;
	ImmCB_0_0_0[5] = 52.0;
	ImmCB_0_0_0[6] = 16.0;
	ImmCB_0_0_0[7] = 64.0;
	ImmCB_0_0_0[8] = 33.0;
	ImmCB_0_0_0[9] = 17.0;
	ImmCB_0_0_0[10] = 45.0;
	ImmCB_0_0_0[11] = 29.0;
	ImmCB_0_0_0[12] = 36.0;
	ImmCB_0_0_0[13] = 20.0;
	ImmCB_0_0_0[14] = 48.0;
	ImmCB_0_0_0[15] = 32.0;
	ImmCB_0_0_0[16] = 9.0;
	ImmCB_0_0_0[17] = 57.0;
	ImmCB_0_0_0[18] = 5.0;
	ImmCB_0_0_0[19] = 53.0;
	ImmCB_0_0_0[20] = 12.0;
	ImmCB_0_0_0[21] = 60.0;
	ImmCB_0_0_0[22] = 8.0;
	ImmCB_0_0_0[23] = 56.0;
	ImmCB_0_0_0[24] = 41.0;
	ImmCB_0_0_0[25] = 25.0;
	ImmCB_0_0_0[26] = 37.0;
	ImmCB_0_0_0[27] = 21.0;
	ImmCB_0_0_0[28] = 44.0;
	ImmCB_0_0_0[29] = 28.0;
	ImmCB_0_0_0[30] = 40.0;
	ImmCB_0_0_0[31] = 24.0;
	ImmCB_0_0_0[32] = 3.0;
	ImmCB_0_0_0[33] = 51.0;
	ImmCB_0_0_0[34] = 15.0;
	ImmCB_0_0_0[35] = 63.0;
	ImmCB_0_0_0[36] = 2.0;
	ImmCB_0_0_0[37] = 50.0;
	ImmCB_0_0_0[38] = 14.0;
	ImmCB_0_0_0[39] = 62.0;
	ImmCB_0_0_0[40] = 35.0;
	ImmCB_0_0_0[41] = 19.0;
	ImmCB_0_0_0[42] = 47.0;
	ImmCB_0_0_0[43] = 31.0;
	ImmCB_0_0_0[44] = 34.0;
	ImmCB_0_0_0[45] = 18.0;
	ImmCB_0_0_0[46] = 46.0;
	ImmCB_0_0_0[47] = 30.0;
	ImmCB_0_0_0[48] = 11.0;
	ImmCB_0_0_0[49] = 59.0;
	ImmCB_0_0_0[50] = 7.0;
	ImmCB_0_0_0[51] = 55.0;
	ImmCB_0_0_0[52] = 10.0;
	ImmCB_0_0_0[53] = 58.0;
	ImmCB_0_0_0[54] = 6.0;
	ImmCB_0_0_0[55] = 54.0;
	ImmCB_0_0_0[56] = 43.0;
	ImmCB_0_0_0[57] = 27.0;
	ImmCB_0_0_0[58] = 39.0;
	ImmCB_0_0_0[59] = 23.0;
	ImmCB_0_0_0[60] = 42.0;
	ImmCB_0_0_0[61] = 26.0;
	ImmCB_0_0_0[62] = 38.0;
	ImmCB_0_0_0[63] = 22.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vs_TEXCOORD5.z<0.949999988);
#else
    u_xlatb0 = vs_TEXCOORD5.z<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD5.yx / vs_TEXCOORD5.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
        u_xlat0.xy = u_xlat0.xy * vec2(0.125, 0.125);
        u_xlat0.xy = fract(u_xlat0.xy);
        u_xlat0.xy = u_xlat0.xy * vec2(7.99900007, 7.99900007);
        u_xlat0.xy = trunc(u_xlat0.xy);
        u_xlat0.x = u_xlat0.x * 8.0 + u_xlat0.y;
        u_xlati0 = int(u_xlat0.x);
        u_xlat0.x = (-ImmCB_0_0_0[u_xlati0]) * 0.015625 + vs_TEXCOORD5.z;
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat0.x = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD0.xyz;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD4.xy);
    u_xlat2.xyz = _BurnedColor.xyz * u_xlat10_1.xyz + (-u_xlat10_1.xyz);
    u_xlat2.xyz = vs_TEXCOORD2.www * u_xlat2.xyz + u_xlat10_1.xyz;
    u_xlat12 = u_xlat10_1.w + (-_CutOff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat12<0.0);
#else
    u_xlatb12 = u_xlat12<0.0;
#endif
    if((int(u_xlatb12) * int(0xffffffffu))!=0){discard;}
    u_xlat12 = (-vs_TEXCOORD2.w) + 1.0;
    u_xlat12 = u_xlat12 * _GrassShininess;
    SV_Target0.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_3 = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb0) ? u_xlat16_3 : 0.0399999991;
    SV_Target0.w = 0.0;
    u_xlat2.w = vs_TEXCOORD3;
    SV_Target1 = u_xlat2;
    SV_Target2.xy = vec2(0.0399999991, 0.0399999991);
    SV_Target2.w = u_xlat12;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "MHY_SHADER_HIGH" "SOFT_SAMPLE_HEIGHT_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	float _NoiseScale;
uniform 	vec4 _WorldOffsetRange;
uniform 	float _HeightScale;
uniform 	float _Billboard;
uniform 	float _VegetationMoveScale;
uniform 	float _VegetationStiffness;
uniform 	vec4 _LocalWindsMapSize;
uniform 	vec4 _LargeWindParam;
uniform 	vec4 _SmallWindParam;
uniform 	vec4 _GlobalWind;
uniform 	vec4 _LocalWindsMapCameraInfo;
uniform 	float _GrassTipLighting;
uniform 	vec4 _MainTex_ST;
uniform 	float _RootColorScale;
uniform 	float _RootColorOffset;
uniform highp sampler2D _Heightmap;
uniform lowp sampler2D _Noisemap;
uniform lowp sampler2D _LocalWindsMap;
in highp vec4 in_POSITION0;
in highp vec4 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec2 in_TEXCOORD2;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp float vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec3 u_xlat1;
int u_xlati1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
vec4 u_xlat4;
vec3 u_xlat5;
vec4 u_xlat6;
vec4 u_xlat7;
vec4 u_xlat8;
vec3 u_xlat9;
vec3 u_xlat10;
bool u_xlatb10;
vec2 u_xlat12;
vec3 u_xlat16;
vec2 u_xlat20;
vec2 u_xlat22;
float u_xlat30;
int u_xlati30;
float u_xlat31;
float u_xlat32;
float u_xlat33;
float u_xlat34;
void main()
{
    u_xlat0.z = 0.0;
    u_xlat1.xyz = in_TEXCOORD0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[2].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TEXCOORD0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat10.xz = u_xlat1.xz + (-_LocalWindsMapSize.xy);
    u_xlat10.xz = vec2(u_xlat10.x / _LocalWindsMapSize.z, u_xlat10.z / _LocalWindsMapSize.w);
    u_xlat10.xz = u_xlat10.xz + vec2(0.5, 0.5);
    u_xlat2 = textureLod(_LocalWindsMap, u_xlat10.xz, 0.0);
    u_xlat10.x = dot(u_xlat2.xy, u_xlat2.xy);
    u_xlat10.x = sqrt(u_xlat10.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(9.99999975e-05>=u_xlat10.x);
#else
    u_xlatb10 = 9.99999975e-05>=u_xlat10.x;
#endif
    u_xlat10.x = u_xlatb10 ? 1.0 : float(0.0);
    u_xlat3.xy = (-u_xlat2.xy) + vec2(0.5, 0.5);
    u_xlat10.xz = u_xlat10.xx * u_xlat3.xy + u_xlat2.xy;
    u_xlat10.xz = u_xlat10.xz * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat31 = dot(u_xlat10.xz, u_xlat10.xz);
    u_xlat31 = max(u_xlat31, 0.00100000005);
    u_xlat3.x = inversesqrt(u_xlat31);
    u_xlat3.yz = u_xlat10.xz * u_xlat3.xx;
    u_xlat0.x = u_xlat3.z;
    u_xlat0.xz = (-u_xlat3.xy) * vec2(0.0, 1.0) + u_xlat0.xz;
    u_xlat31 = (-in_TEXCOORD1.x) + hlslcc_mtx4x4unity_ObjectToWorld[1].x;
    u_xlat2.x = u_xlat31 * 3.0;
    u_xlat2.x = _Time.y * 3.0 + u_xlat2.x;
    u_xlat2.x = u_xlat2.x + 0.5;
    u_xlat2.x = fract(u_xlat2.x);
    u_xlat2.x = u_xlat2.x * 2.0 + -1.0;
    u_xlat12.x = abs(u_xlat2.x) * abs(u_xlat2.x);
    u_xlat2.x = -abs(u_xlat2.x) * 2.0 + 3.0;
    u_xlat2.x = u_xlat2.x * u_xlat12.x;
    u_xlat12.x = u_xlat2.z * 1.5;
    u_xlat2.x = u_xlat12.x * u_xlat2.x;
    u_xlat0.xz = u_xlat0.xz * u_xlat2.xx;
    u_xlat0.xz = u_xlat0.xz * vec2(0.150000006, 0.150000006);
    u_xlat0.xz = u_xlat3.yz * u_xlat2.xx + u_xlat0.xz;
    u_xlat0.xz = u_xlat0.xz + u_xlat10.xz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(0.00199999986<u_xlat2.z);
#else
    u_xlatb2 = 0.00199999986<u_xlat2.z;
#endif
    u_xlat12.x = (-u_xlat2.w) * _LocalWindsMapCameraInfo.y + _LocalWindsMapCameraInfo.x;
    u_xlat0.xy = (bool(u_xlatb2)) ? u_xlat0.xz : u_xlat10.xz;
    u_xlat20.xy = vec2(_WorldOffsetRange.z + float(2.0), _WorldOffsetRange.w + float(2.0));
    u_xlat2.xz = u_xlat1.xz + (-_WorldOffsetRange.xy);
    u_xlat2.xz = u_xlat2.xz + vec2(1.0, 1.0);
    u_xlat20.xy = u_xlat2.xz / u_xlat20.xy;
    u_xlat20.xy = u_xlat20.xy * _WorldOffsetRange.zw + vec2(-0.5, -0.5);
    u_xlat2.xz = floor(u_xlat20.xy);
    u_xlat20.xy = u_xlat20.xy + (-u_xlat2.xz);
    u_xlat3 = u_xlat2.xzxz + vec4(0.5, 1.5, 1.5, 1.5);
    u_xlat4 = u_xlat2.xzxz + vec4(1.5, 0.5, 0.5, 0.5);
    u_xlat4 = vec4(u_xlat4.x / _WorldOffsetRange.z, u_xlat4.y / _WorldOffsetRange.w, u_xlat4.z / _WorldOffsetRange.z, u_xlat4.w / _WorldOffsetRange.w);
    u_xlat3 = vec4(u_xlat3.x / _WorldOffsetRange.z, u_xlat3.y / _WorldOffsetRange.w, u_xlat3.z / _WorldOffsetRange.z, u_xlat3.w / _WorldOffsetRange.w);
    u_xlat2.x = textureLod(_Heightmap, u_xlat3.zw, 0.0).x;
    u_xlat22.x = textureLod(_Heightmap, u_xlat3.xy, 0.0).x;
    u_xlat2.x = (-u_xlat22.x) + u_xlat2.x;
    u_xlat2.x = u_xlat20.x * u_xlat2.x + u_xlat22.x;
    u_xlat22.x = textureLod(_Heightmap, u_xlat4.xy, 0.0).x;
    u_xlat32 = textureLod(_Heightmap, u_xlat4.zw, 0.0).x;
    u_xlat22.x = (-u_xlat32) + u_xlat22.x;
    u_xlat20.x = u_xlat20.x * u_xlat22.x + u_xlat32;
    u_xlat2.x = (-u_xlat20.x) + u_xlat2.x;
    u_xlat20.x = u_xlat20.y * u_xlat2.x + u_xlat20.x;
    u_xlat30 = u_xlat20.x * _HeightScale + u_xlat1.y;
    u_xlat30 = (-u_xlat30) + u_xlat12.x;
    u_xlat30 = u_xlat30 * 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
#else
    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
#endif
    u_xlat30 = (-u_xlat30) + 1.0;
    u_xlat2.x = fract(u_xlat31);
    u_xlat31 = u_xlat31 + hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat12.xy = vec2(u_xlat31) * vec2(22.0, 33.0);
    u_xlat12.xy = fract(u_xlat12.xy);
    u_xlat12.xy = u_xlat12.xy + vec2(-0.5, -0.5);
    u_xlat3.xz = u_xlat12.xy * vec2(0.200000003, 0.200000003);
    u_xlat31 = u_xlat2.x + -0.5;
    u_xlat2.x = u_xlat2.x * _SmallWindParam.x;
    u_xlat2.x = sin(u_xlat2.x);
    u_xlat12.x = u_xlat31 * 0.333000004;
    u_xlat4.y = u_xlat31 * 0.333000004 + -1.0;
    u_xlat31 = in_TEXCOORD1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat31 = min(max(u_xlat31, 0.0), 1.0);
#else
    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat12.x * u_xlat31;
    u_xlat30 = u_xlat30 * u_xlat12.x;
    u_xlat0.xy = vec2(u_xlat30) * u_xlat0.xy;
    u_xlat5.xz = u_xlat0.xy * vec2(vec2(_VegetationMoveScale, _VegetationMoveScale));
    u_xlat0.x = dot(_GlobalWind.xyz, _GlobalWind.xyz);
    u_xlat0.x = max(u_xlat0.x, 0.00100000005);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat6 = u_xlat0.xxxx * _GlobalWind.xzxz;
    u_xlat0.xy = vec2(u_xlat6.z * _LargeWindParam.z, u_xlat6.w * _LargeWindParam.z);
    u_xlat22.xy = u_xlat1.xz / vec2(_NoiseScale);
    u_xlat22.xy = _LargeWindParam.xx * u_xlat6.xy + u_xlat22.xy;
    u_xlat22.xy = textureLod(_Noisemap, u_xlat22.xy, 0.0).xy;
    u_xlat22.xy = u_xlat22.xy + vec2(-0.5, -0.5);
    u_xlat22.xy = u_xlat22.xy * _LargeWindParam.yy + vec2(0.5, 0.5);
    u_xlat22.xy = u_xlat12.xx * u_xlat22.xy;
    u_xlat6.xz = u_xlat0.xy * u_xlat22.xy;
    u_xlat6.y = 0.0;
    u_xlat0.x = _VegetationStiffness * _SmallWindParam.y;
    u_xlat0.x = u_xlat12.x * u_xlat0.x;
    u_xlat7.x = u_xlat0.x * u_xlat2.x;
    u_xlat0.xyw = in_NORMAL0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyw = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_NORMAL0.xxx + u_xlat0.xyw;
    u_xlat0.xyw = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_NORMAL0.zzz + u_xlat0.xyw;
    u_xlat2.x = dot(u_xlat0.xyw, u_xlat0.xyw);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat0.xyw = u_xlat0.xyw * u_xlat2.xxx;
    u_xlat7.y = float(1.0);
    u_xlat7.z = float(0.349999994);
    u_xlat2.xzw = u_xlat0.xyw * u_xlat7.yxy;
    u_xlat8.xyz = u_xlat2.xzw * u_xlat7.xzx + u_xlat6.xyz;
    u_xlat2.xzw = u_xlat7.xzx * u_xlat2.xzw;
    u_xlat5.y = 0.0;
    u_xlat7.xyz = u_xlat5.xyz + u_xlat8.xyz;
    u_xlat8.y = hlslcc_mtx4x4unity_MatrixV[0].x;
    u_xlat8.x = hlslcc_mtx4x4unity_MatrixV[2].x;
    u_xlat33 = dot(u_xlat8.xy, u_xlat8.xy);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat16.xz = vec2(u_xlat33) * u_xlat8.xy;
    u_xlat8.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;
    u_xlat8.y = hlslcc_mtx4x4unity_ObjectToWorld[2].x;
    u_xlat33 = dot(u_xlat8.xy, u_xlat8.xy);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat8.xy = vec2(u_xlat33) * u_xlat8.xy;
    u_xlat9.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat9.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat9.xyz;
    u_xlat9.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat9.xyz;
    u_xlat9.xyz = u_xlat9.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat9.xyz = (-u_xlat1.xyz) + u_xlat9.xyz;
    u_xlat33 = u_xlat8.y * u_xlat9.z;
    u_xlat33 = u_xlat9.x * u_xlat8.x + (-u_xlat33);
    u_xlat34 = dot(u_xlat9.zx, u_xlat8.xy);
    u_xlat8.xy = u_xlat16.xz * vec2(u_xlat34);
    u_xlat34 = u_xlat33 * u_xlat16.z + (-u_xlat8.x);
    u_xlat33 = u_xlat33 * u_xlat16.x + u_xlat8.y;
    u_xlat33 = u_xlat9.z + u_xlat33;
    u_xlat9.z = (-u_xlat33) * _Billboard + u_xlat9.z;
    u_xlat33 = u_xlat9.x + u_xlat34;
    u_xlat9.x = (-u_xlat33) * _Billboard + u_xlat9.x;
    u_xlat33 = u_xlat12.x * u_xlat9.y;
    u_xlat12.x = max(u_xlat12.x, 9.99999972e-10);
    u_xlat7.xyz = u_xlat9.xyz * vec3(0.100000001, 1.0, 0.100000001) + u_xlat7.xyz;
    u_xlat34 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat34 = max(u_xlat34, 0.00100000005);
    u_xlat34 = inversesqrt(u_xlat34);
    u_xlat7.xyz = vec3(u_xlat34) * u_xlat7.xyz;
    u_xlat34 = dot(u_xlat9.xyz, u_xlat9.xyz);
    u_xlat34 = sqrt(u_xlat34);
    u_xlat8.xyz = u_xlat9.xyz * vec3(0.100000001, 1.0, 0.100000001);
    u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat34) + (-u_xlat8.xyz);
    u_xlat8.xyz = u_xlat1.xyz + u_xlat9.xyz;
    u_xlat8.w = u_xlat20.x * _HeightScale + u_xlat8.y;
    u_xlat1.xyz = u_xlat7.xyz + u_xlat8.xwz;
    u_xlat1.xyz = vec3(u_xlat33) * vec3(-0.5, 0.0, -0.5) + u_xlat1.xyz;
    u_xlat4.xz = u_xlat4.yy * (-u_xlat4.yy);
    u_xlat1.xyz = u_xlat4.xyz * u_xlat9.xyz + u_xlat1.xyz;
    u_xlat4.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat7 = u_xlat4.yyyy * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat7 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat4.xxxx + u_xlat7;
    u_xlat4 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat4.zzzz + u_xlat7;
    gl_Position = u_xlat4 + hlslcc_mtx4x4unity_MatrixVPZero[3];
    u_xlat3.y = 0.0;
    vs_TEXCOORD0.xyz = u_xlat3.xyz + vec3(-1.0, 0.0, -1.0);
    vs_TEXCOORD0.w = 0.0;
    u_xlat3.xyz = u_xlat5.yzx / u_xlat12.xxx;
    u_xlat4.yz = u_xlat6.zx / u_xlat12.xx;
    u_xlat2.xyz = u_xlat2.zwx / u_xlat12.xxx;
    u_xlat4.x = 0.0;
    u_xlat2.xyz = u_xlat2.xyz + u_xlat4.xyz;
    u_xlat2.xyz = u_xlat3.xyz + u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz + vec3(0.0, -1.0, -1.0);
    u_xlat20.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat20.x = inversesqrt(u_xlat20.x);
    u_xlat2.xyz = u_xlat20.xxx * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat0.xyw * u_xlat2.xyz;
    u_xlat0.xyz = u_xlat2.zxy * u_xlat0.ywx + (-u_xlat3.xyz);
    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.xyz * u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
    u_xlat30 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat1.xyz = vec3(u_xlat30) * u_xlat1.xyz;
    u_xlat30 = dot(u_xlat1.xyz, u_xlat0.xyz);
#ifdef UNITY_ADRENO_ES3
    { bool cond = 0.0<u_xlat30; u_xlati1 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati1 = int((0.0<u_xlat30) ? 0xFFFFFFFFu : uint(0u));
#endif
#ifdef UNITY_ADRENO_ES3
    { bool cond = u_xlat30<0.0; u_xlati30 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati30 = int((u_xlat30<0.0) ? 0xFFFFFFFFu : uint(0u));
#endif
    u_xlati30 = (-u_xlati1) + u_xlati30;
    u_xlat30 = float(u_xlati30);
    vs_TEXCOORD1.xyz = vec3(u_xlat30) * u_xlat0.xyz;
    vs_TEXCOORD1.w = 0.0;
    u_xlat0.x = u_xlat31 / _RootColorScale;
    u_xlat0.x = u_xlat0.x + _RootColorOffset;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xxx * vec3(-0.501960814, 0.0, 0.0) + vec3(0.501960814, 0.0, 0.0);
    u_xlat30 = u_xlat31 + -0.600000024;
    vs_TEXCOORD3 = u_xlat31;
    u_xlat30 = max(u_xlat30, 0.0);
    u_xlat30 = _GrassTipLighting * u_xlat30 + 1.0;
    vs_TEXCOORD2.xyz = vec3(u_xlat30) * u_xlat0.xyz;
    vs_TEXCOORD2.w = 0.0;
    vs_TEXCOORD4.xy = in_TEXCOORD2.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	float _GrassShininess;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	float _CutOff;
uniform 	vec4 _BurnedColor;
uniform lowp sampler2D _MainTex;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp float vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec4 u_xlat0;
lowp vec4 u_xlat10_0;
bool u_xlatb0;
vec3 u_xlat1;
mediump float u_xlat16_2;
float u_xlat9;
bool u_xlatb9;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD4.xy);
    u_xlat9 = u_xlat10_0.w + (-_CutOff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(u_xlat9<0.0);
#else
    u_xlatb9 = u_xlat9<0.0;
#endif
    if((int(u_xlatb9) * int(0xffffffffu))!=0){discard;}
    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
    SV_Target0.xyz = u_xlat1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0;
    u_xlat1.xyz = _BurnedColor.xyz * u_xlat10_0.xyz + (-u_xlat10_0.xyz);
    u_xlat0.xyz = vs_TEXCOORD2.www * u_xlat1.xyz + u_xlat10_0.xyz;
    u_xlat0.w = vs_TEXCOORD3;
    SV_Target1 = u_xlat0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_2 = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb0) ? u_xlat16_2 : 0.0399999991;
    u_xlat0.x = (-vs_TEXCOORD2.w) + 1.0;
    u_xlat0.x = u_xlat0.x * _GrassShininess;
    SV_Target2.w = u_xlat0.x;
    SV_Target2.xy = vec2(0.0399999991, 0.0399999991);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "MHY_SHADER_HIGH" "SOFT_SAMPLE_HEIGHT_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	int unity_BaseInstanceID;
uniform 	float _NoiseScale;
uniform 	vec4 _WorldOffsetRange;
uniform 	float _HeightScale;
uniform 	float _Billboard;
uniform 	float _VegetationMoveScale;
uniform 	float _VegetationStiffness;
uniform 	vec4 _LocalWindsMapSize;
uniform 	vec4 _LargeWindParam;
uniform 	vec4 _SmallWindParam;
uniform 	vec4 _GlobalWind;
uniform 	vec4 _LocalWindsMapCameraInfo;
uniform 	float _GrassTipLighting;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BurnedColor;
uniform 	float _RootColorScale;
uniform 	float _RootColorOffset;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _Heightmap;
uniform lowp sampler2D _Noisemap;
uniform lowp sampler2D _LocalWindsMap;
in highp vec4 in_POSITION0;
in highp vec4 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec2 in_TEXCOORD2;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp float vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec3 u_xlat0;
int u_xlati0;
uvec3 u_xlatu0;
vec3 u_xlat1;
uvec3 u_xlatu1;
vec4 u_xlat2;
uvec3 u_xlatu2;
vec4 u_xlat3;
vec4 u_xlat4;
vec3 u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
vec3 u_xlat8;
vec4 u_xlat9;
vec4 u_xlat10;
float u_xlat11;
int u_xlati11;
float u_xlat13;
uint u_xlatu13;
vec3 u_xlat17;
vec3 u_xlat18;
float u_xlat22;
int u_xlati22;
bool u_xlatb22;
float u_xlat24;
float u_xlat33;
bool u_xlatb33;
float u_xlat34;
bool u_xlatb34;
float u_xlat35;
float u_xlat36;
void main()
{
    u_xlat0.z = 0.0;
    u_xlati11 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati11 = u_xlati11 << 2;
    u_xlat1.xyz = in_TEXCOORD0.yyy * unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_TEXCOORD0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat2.xy = u_xlat1.xz + (-_LocalWindsMapSize.xy);
    u_xlat2.xy = vec2(u_xlat2.x / _LocalWindsMapSize.z, u_xlat2.y / _LocalWindsMapSize.w);
    u_xlat2.xy = u_xlat2.xy + vec2(0.5, 0.5);
    u_xlat2 = textureLod(_LocalWindsMap, u_xlat2.xy, 0.0);
    u_xlat33 = dot(u_xlat2.xy, u_xlat2.xy);
    u_xlat33 = sqrt(u_xlat33);
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(9.99999975e-05>=u_xlat33);
#else
    u_xlatb33 = 9.99999975e-05>=u_xlat33;
#endif
    u_xlat33 = u_xlatb33 ? 1.0 : float(0.0);
    u_xlat3.xy = (-u_xlat2.xy) + vec2(0.5, 0.5);
    u_xlat2.xy = vec2(u_xlat33) * u_xlat3.xy + u_xlat2.xy;
    u_xlat2.xy = u_xlat2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat33 = dot(u_xlat2.xy, u_xlat2.xy);
    u_xlat33 = max(u_xlat33, 0.00100000005);
    u_xlat3.x = inversesqrt(u_xlat33);
    u_xlat3.yz = u_xlat2.xy * u_xlat3.xx;
    u_xlat0.x = u_xlat3.z;
    u_xlat0.xz = (-u_xlat3.xy) * vec2(0.0, 1.0) + u_xlat0.xz;
    u_xlat33 = (-in_TEXCOORD1.x) + unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].x;
    u_xlat34 = u_xlat33 * 3.0;
    u_xlat34 = _Time.y * 3.0 + u_xlat34;
    u_xlat34 = u_xlat34 + 0.5;
    u_xlat34 = fract(u_xlat34);
    u_xlat34 = u_xlat34 * 2.0 + -1.0;
    u_xlat3.x = abs(u_xlat34) * abs(u_xlat34);
    u_xlat34 = -abs(u_xlat34) * 2.0 + 3.0;
    u_xlat34 = u_xlat34 * u_xlat3.x;
    u_xlat3.x = u_xlat2.z * 1.5;
    u_xlat34 = u_xlat34 * u_xlat3.x;
    u_xlat0.xz = u_xlat0.xz * vec2(u_xlat34);
    u_xlat0.xz = u_xlat0.xz * vec2(0.150000006, 0.150000006);
    u_xlat0.xz = u_xlat3.yz * vec2(u_xlat34) + u_xlat0.xz;
    u_xlat0.xz = u_xlat0.xz + u_xlat2.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlatb34 = !!(0.00199999986<u_xlat2.z);
#else
    u_xlatb34 = 0.00199999986<u_xlat2.z;
#endif
    u_xlat24 = (-u_xlat2.w) * _LocalWindsMapCameraInfo.y + _LocalWindsMapCameraInfo.x;
    u_xlat0.xz = (bool(u_xlatb34)) ? u_xlat0.xz : u_xlat2.xy;
    u_xlat2.xy = vec2(_WorldOffsetRange.z + float(2.0), _WorldOffsetRange.w + float(2.0));
    u_xlat3.xy = u_xlat1.xz + (-_WorldOffsetRange.xy);
    u_xlat3.xy = u_xlat3.xy + vec2(1.0, 1.0);
    u_xlat2.xy = u_xlat3.xy / u_xlat2.xy;
    u_xlat2.xy = u_xlat2.xy * _WorldOffsetRange.zw + vec2(-0.5, -0.5);
    u_xlat3.xy = floor(u_xlat2.xy);
    u_xlat2.xy = u_xlat2.xy + (-u_xlat3.xy);
    u_xlat4 = u_xlat3.xyxy + vec4(0.5, 1.5, 1.5, 1.5);
    u_xlat3 = u_xlat3.xyxy + vec4(1.5, 0.5, 0.5, 0.5);
    u_xlat3 = vec4(u_xlat3.x / _WorldOffsetRange.z, u_xlat3.y / _WorldOffsetRange.w, u_xlat3.z / _WorldOffsetRange.z, u_xlat3.w / _WorldOffsetRange.w);
    u_xlat4 = vec4(u_xlat4.x / _WorldOffsetRange.z, u_xlat4.y / _WorldOffsetRange.w, u_xlat4.z / _WorldOffsetRange.z, u_xlat4.w / _WorldOffsetRange.w);
    u_xlat34 = textureLod(_Heightmap, u_xlat4.zw, 0.0).x;
    u_xlat35 = textureLod(_Heightmap, u_xlat4.xy, 0.0).x;
    u_xlat34 = u_xlat34 + (-u_xlat35);
    u_xlat34 = u_xlat2.x * u_xlat34 + u_xlat35;
    u_xlat35 = textureLod(_Heightmap, u_xlat3.xy, 0.0).x;
    u_xlat3.x = textureLod(_Heightmap, u_xlat3.zw, 0.0).x;
    u_xlat35 = u_xlat35 + (-u_xlat3.x);
    u_xlat2.x = u_xlat2.x * u_xlat35 + u_xlat3.x;
    u_xlat34 = u_xlat34 + (-u_xlat2.x);
    u_xlat34 = u_xlat2.y * u_xlat34 + u_xlat2.x;
    u_xlat2.x = u_xlat34 * _HeightScale + u_xlat1.y;
    u_xlat2.x = (-u_xlat2.x) + u_xlat24;
    u_xlat2.x = u_xlat2.x * 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat2.x = (-u_xlat2.x) + 1.0;
    u_xlat13 = float(floatBitsToUint(unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2]).w);
    u_xlat13 = u_xlat13 * 5.96046448e-08;
    u_xlatu13 = uint(u_xlat13);
    u_xlatu13 = u_xlatu13 & 3u;
    u_xlat13 = float(u_xlatu13);
    u_xlat24 = fract(u_xlat33);
    u_xlat33 = u_xlat33 + unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].y;
    u_xlat3.xy = vec2(u_xlat33) * vec2(22.0, 33.0);
    u_xlat3.xy = fract(u_xlat3.xy);
    u_xlat3.xy = u_xlat3.xy + vec2(-0.5, -0.5);
    u_xlat3.xz = u_xlat3.xy * vec2(0.200000003, 0.200000003);
    u_xlat33 = u_xlat13 + u_xlat24;
    u_xlat13 = u_xlat24 * _SmallWindParam.x;
    u_xlat13 = sin(u_xlat13);
    u_xlat33 = u_xlat33 + -0.5;
    u_xlat24 = u_xlat33 * 0.333000004;
    u_xlat4.y = u_xlat33 * 0.333000004 + -1.0;
    u_xlat33 = in_TEXCOORD1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat33 = min(max(u_xlat33, 0.0), 1.0);
#else
    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
#endif
    u_xlat24 = u_xlat24 * u_xlat33;
    u_xlat2.x = u_xlat24 * u_xlat2.x;
    u_xlat0.xz = u_xlat0.xz * u_xlat2.xx;
    u_xlat5.xz = u_xlat0.xz * vec2(vec2(_VegetationMoveScale, _VegetationMoveScale));
    u_xlat6.y = 0.0;
    u_xlat0.x = _VegetationStiffness * _SmallWindParam.y;
    u_xlat0.x = u_xlat24 * u_xlat0.x;
    u_xlat7.x = u_xlat0.x * u_xlat13;
    u_xlat2.xyw = in_NORMAL0.yyy * unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat2.xyw = unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_NORMAL0.xxx + u_xlat2.xyw;
    u_xlat2.xyw = unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_NORMAL0.zzz + u_xlat2.xyw;
    u_xlat0.x = dot(u_xlat2.xyw, u_xlat2.xyw);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat2.xyw = u_xlat0.xxx * u_xlat2.xyw;
    u_xlat7.y = float(1.0);
    u_xlat7.z = float(0.349999994);
    u_xlat8.xyz = u_xlat2.xyw * u_xlat7.yxy;
    u_xlat0.x = dot(_GlobalWind.xyz, _GlobalWind.xyz);
    u_xlat0.x = max(u_xlat0.x, 0.00100000005);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat9 = u_xlat0.xxxx * _GlobalWind.xzxz;
    u_xlat0.xz = vec2(u_xlat9.z * _LargeWindParam.z, u_xlat9.w * _LargeWindParam.z);
    u_xlat18.xz = u_xlat1.xz / vec2(_NoiseScale);
    u_xlat18.xz = _LargeWindParam.xx * u_xlat9.xy + u_xlat18.xz;
    u_xlat18.xz = textureLod(_Noisemap, u_xlat18.xz, 0.0).xy;
    u_xlat18.xz = u_xlat18.xz + vec2(-0.5, -0.5);
    u_xlat18.xz = u_xlat18.xz * _LargeWindParam.yy + vec2(0.5, 0.5);
    u_xlat18.xz = vec2(u_xlat24) * u_xlat18.xz;
    u_xlat6.xz = u_xlat0.xz * u_xlat18.xz;
    u_xlat9.xyz = u_xlat8.xyz * u_xlat7.xzx + u_xlat6.xyz;
    u_xlat7.xyz = u_xlat7.xzx * u_xlat8.xyz;
    u_xlat5.y = 0.0;
    u_xlat8.xyz = u_xlat5.xyz + u_xlat9.xyz;
    u_xlat9.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat9.xyz = unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat9.xyz;
    u_xlat9.xyz = unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat9.xyz;
    u_xlat9.xyz = u_xlat9.xyz + unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat9.xyz = (-u_xlat1.xyz) + u_xlat9.xyz;
    u_xlat10.x = unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].x;
    u_xlat10.y = unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].x;
    u_xlat0.x = dot(u_xlat10.xy, u_xlat10.xy);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xz = u_xlat0.xx * u_xlat10.xy;
    u_xlat36 = u_xlat0.z * u_xlat9.z;
    u_xlat36 = u_xlat9.x * u_xlat0.x + (-u_xlat36);
    u_xlat0.x = dot(u_xlat9.zx, u_xlat0.xz);
    u_xlat10.y = hlslcc_mtx4x4unity_MatrixV[0].x;
    u_xlat10.x = hlslcc_mtx4x4unity_MatrixV[2].x;
    u_xlat22 = dot(u_xlat10.xy, u_xlat10.xy);
    u_xlat22 = inversesqrt(u_xlat22);
    u_xlat17.xz = vec2(u_xlat22) * u_xlat10.xy;
    u_xlat0.xz = u_xlat0.xx * u_xlat17.xz;
    u_xlat0.x = u_xlat36 * u_xlat17.z + (-u_xlat0.x);
    u_xlat0.z = u_xlat36 * u_xlat17.x + u_xlat0.z;
    u_xlat0.xz = u_xlat9.xz + u_xlat0.xz;
    u_xlat9.z = (-u_xlat0.z) * _Billboard + u_xlat9.z;
    u_xlat9.x = (-u_xlat0.x) * _Billboard + u_xlat9.x;
    u_xlat8.xyz = u_xlat9.xyz * vec3(0.100000001, 1.0, 0.100000001) + u_xlat8.xyz;
    u_xlat0.x = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat0.x = max(u_xlat0.x, 0.00100000005);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat8.xyz = u_xlat0.xxx * u_xlat8.xyz;
    u_xlat0.x = dot(u_xlat9.xyz, u_xlat9.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat10.xyz = u_xlat9.xyz * vec3(0.100000001, 1.0, 0.100000001);
    u_xlat8.xyz = u_xlat8.xyz * u_xlat0.xxx + (-u_xlat10.xyz);
    u_xlat10.xyz = u_xlat1.xyz + u_xlat9.xyz;
    u_xlat10.w = u_xlat34 * _HeightScale + u_xlat10.y;
    u_xlat1.xyz = u_xlat8.xyz + u_xlat10.xwz;
    u_xlatu0.xz = uvec2(65280u, 255u) & floatBitsToUint(unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1]).ww;
    u_xlat0.xz = vec2(u_xlatu0.xz);
    u_xlat0.x = u_xlat0.x * 0.00390625;
    u_xlatu0.x = uint(u_xlat0.x);
    u_xlat0.x = float(u_xlatu0.x);
    u_xlat8.xz = u_xlat0.xz + vec2(-127.0, -127.0);
    u_xlat0.xz = u_xlat8.xz * vec2(0.00787401572, 0.00787401572);
    u_xlat0.xz = u_xlat0.xz * u_xlat0.xz;
    u_xlat0.x = u_xlat0.z + u_xlat0.x;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(0.0<u_xlat0.x);
#else
    u_xlatb22 = 0.0<u_xlat0.x;
#endif
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat8.y = u_xlatb22 ? u_xlat0.x : float(0.0);
    u_xlat10.xyz = u_xlat8.xyz * u_xlat9.yyy;
    u_xlat10.xyz = vec3(u_xlat24) * u_xlat10.xyz;
    u_xlat0.x = max(u_xlat24, 9.99999972e-10);
    u_xlat1.xyz = u_xlat10.xyz * vec3(0.00393700786, 0.0, 0.00393700786) + u_xlat1.xyz;
    u_xlat4.xz = u_xlat4.yy * (-u_xlat4.yy);
    u_xlat1.xyz = u_xlat4.xyz * u_xlat9.xyz + u_xlat1.xyz;
    u_xlat4.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat9 = u_xlat4.yyyy * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat9 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat4.xxxx + u_xlat9;
    u_xlat4 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat4.zzzz + u_xlat9;
    gl_Position = u_xlat4 + hlslcc_mtx4x4unity_MatrixVPZero[3];
    u_xlat3.y = 0.0;
    vs_TEXCOORD0.xyz = u_xlat8.xyz * vec3(0.00787401572, 1.0, 0.00787401572) + u_xlat3.xyz;
    vs_TEXCOORD0.w = 0.0;
    u_xlat3.xyz = u_xlat5.yzx / u_xlat0.xxx;
    u_xlat4.yz = u_xlat6.zx / u_xlat0.xx;
    u_xlat5.xyz = u_xlat7.yzx / u_xlat0.xxx;
    u_xlat4.x = 0.0;
    u_xlat4.xyz = u_xlat4.xyz + u_xlat5.xyz;
    u_xlat3.xyz = u_xlat3.xyz + u_xlat4.xyz;
    u_xlat3.xyz = u_xlat8.yzx * vec3(1.0, 0.00787401572, 0.00787401572) + u_xlat3.xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.xyw * u_xlat3.xyz;
    u_xlat2.xyz = u_xlat3.zxy * u_xlat2.ywx + (-u_xlat4.xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat4.xyz = u_xlat3.xyz * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
    { bool cond = 0.0<u_xlat0.x; u_xlati22 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati22 = int((0.0<u_xlat0.x) ? 0xFFFFFFFFu : uint(0u));
#endif
#ifdef UNITY_ADRENO_ES3
    { bool cond = u_xlat0.x<0.0; u_xlati0 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati0 = int((u_xlat0.x<0.0) ? 0xFFFFFFFFu : uint(0u));
#endif
    u_xlati0 = (-u_xlati22) + u_xlati0;
    u_xlat0.x = float(u_xlati0);
    vs_TEXCOORD1.xyz = u_xlat0.xxx * u_xlat2.xyz;
    vs_TEXCOORD1.w = 0.0;
    u_xlatu1.xyz = uvec3(16711680u, 65280u, 255u) & floatBitsToUint(unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2]).www;
    u_xlat1.xyz = vec3(u_xlatu1.xyz);
    u_xlatu2.xyz = uvec3(16711680u, 65280u, 255u) & floatBitsToUint(unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3]).www;
    u_xlat0.x = max(1.0, unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].w);
    u_xlat0.x = min(u_xlat0.x, 2.0);
    u_xlat0.x = u_xlat0.x + -1.0;
    u_xlat2.xyz = vec3(u_xlatu2.xyz);
    u_xlat2.xyz = u_xlat2.xyz * vec3(5.9838392e-08, 1.53186284e-05, 0.00392156886);
    u_xlat1.xyz = u_xlat1.xyz * vec3(5.9838392e-08, 1.53186284e-05, 0.00392156886) + (-u_xlat2.xyz);
    u_xlat11 = u_xlat33 / _RootColorScale;
    u_xlat11 = u_xlat11 + _RootColorOffset;
#ifdef UNITY_ADRENO_ES3
    u_xlat11 = min(max(u_xlat11, 0.0), 1.0);
#else
    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat11) * u_xlat1.xyz + u_xlat2.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _BurnedColor.xyz;
    u_xlat1.xyz = u_xlat0.xxx * u_xlat2.xyz + u_xlat1.xyz;
    vs_TEXCOORD2.w = u_xlat0.x;
    u_xlat0.x = u_xlat33 + -0.600000024;
    vs_TEXCOORD3 = u_xlat33;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = _GrassTipLighting * u_xlat0.x + 1.0;
    vs_TEXCOORD2.xyz = u_xlat0.xxx * u_xlat1.xyz;
    vs_TEXCOORD4.xy = in_TEXCOORD2.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	float _GrassShininess;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	float _CutOff;
uniform 	vec4 _BurnedColor;
uniform lowp sampler2D _MainTex;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp float vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec4 u_xlat0;
lowp vec4 u_xlat10_0;
bool u_xlatb0;
vec3 u_xlat1;
mediump float u_xlat16_2;
float u_xlat9;
bool u_xlatb9;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD4.xy);
    u_xlat9 = u_xlat10_0.w + (-_CutOff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(u_xlat9<0.0);
#else
    u_xlatb9 = u_xlat9<0.0;
#endif
    if((int(u_xlatb9) * int(0xffffffffu))!=0){discard;}
    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
    SV_Target0.xyz = u_xlat1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0;
    u_xlat1.xyz = _BurnedColor.xyz * u_xlat10_0.xyz + (-u_xlat10_0.xyz);
    u_xlat0.xyz = vs_TEXCOORD2.www * u_xlat1.xyz + u_xlat10_0.xyz;
    u_xlat0.w = vs_TEXCOORD3;
    SV_Target1 = u_xlat0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_2 = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb0) ? u_xlat16_2 : 0.0399999991;
    u_xlat0.x = (-vs_TEXCOORD2.w) + 1.0;
    u_xlat0.x = u_xlat0.x * _GrassShininess;
    SV_Target2.w = u_xlat0.x;
    SV_Target2.xy = vec2(0.0399999991, 0.0399999991);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "MHY_SHADER_HIGH" "SOFT_SAMPLE_HEIGHT_ON" "DITHER_FADE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	float _NoiseScale;
uniform 	vec4 _WorldOffsetRange;
uniform 	float _HeightScale;
uniform 	float _Billboard;
uniform 	float _VegetationMoveScale;
uniform 	float _VegetationStiffness;
uniform 	vec4 _LocalWindsMapSize;
uniform 	vec4 _LargeWindParam;
uniform 	vec4 _SmallWindParam;
uniform 	vec4 _GlobalWind;
uniform 	vec4 _LocalWindsMapCameraInfo;
uniform 	float _GrassTipLighting;
uniform 	vec4 _MainTex_ST;
uniform 	float _RootColorScale;
uniform 	float _RootColorOffset;
uniform highp sampler2D _Heightmap;
uniform lowp sampler2D _Noisemap;
uniform lowp sampler2D _LocalWindsMap;
in highp vec4 in_POSITION0;
in highp vec4 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec2 in_TEXCOORD2;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp float vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
vec4 u_xlat0;
vec3 u_xlat1;
int u_xlati1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
vec4 u_xlat4;
vec3 u_xlat5;
vec4 u_xlat6;
vec4 u_xlat7;
vec4 u_xlat8;
vec3 u_xlat9;
vec3 u_xlat10;
bool u_xlatb10;
vec2 u_xlat12;
vec3 u_xlat16;
vec2 u_xlat20;
vec2 u_xlat22;
float u_xlat30;
int u_xlati30;
float u_xlat31;
float u_xlat32;
float u_xlat33;
float u_xlat34;
void main()
{
    u_xlat0.z = 0.0;
    u_xlat1.xyz = in_TEXCOORD0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[2].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TEXCOORD0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat10.xz = u_xlat1.xz + (-_LocalWindsMapSize.xy);
    u_xlat10.xz = vec2(u_xlat10.x / _LocalWindsMapSize.z, u_xlat10.z / _LocalWindsMapSize.w);
    u_xlat10.xz = u_xlat10.xz + vec2(0.5, 0.5);
    u_xlat2 = textureLod(_LocalWindsMap, u_xlat10.xz, 0.0);
    u_xlat10.x = dot(u_xlat2.xy, u_xlat2.xy);
    u_xlat10.x = sqrt(u_xlat10.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(9.99999975e-05>=u_xlat10.x);
#else
    u_xlatb10 = 9.99999975e-05>=u_xlat10.x;
#endif
    u_xlat10.x = u_xlatb10 ? 1.0 : float(0.0);
    u_xlat3.xy = (-u_xlat2.xy) + vec2(0.5, 0.5);
    u_xlat10.xz = u_xlat10.xx * u_xlat3.xy + u_xlat2.xy;
    u_xlat10.xz = u_xlat10.xz * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat31 = dot(u_xlat10.xz, u_xlat10.xz);
    u_xlat31 = max(u_xlat31, 0.00100000005);
    u_xlat3.x = inversesqrt(u_xlat31);
    u_xlat3.yz = u_xlat10.xz * u_xlat3.xx;
    u_xlat0.x = u_xlat3.z;
    u_xlat0.xz = (-u_xlat3.xy) * vec2(0.0, 1.0) + u_xlat0.xz;
    u_xlat31 = (-in_TEXCOORD1.x) + hlslcc_mtx4x4unity_ObjectToWorld[1].x;
    u_xlat2.x = u_xlat31 * 3.0;
    u_xlat2.x = _Time.y * 3.0 + u_xlat2.x;
    u_xlat2.x = u_xlat2.x + 0.5;
    u_xlat2.x = fract(u_xlat2.x);
    u_xlat2.x = u_xlat2.x * 2.0 + -1.0;
    u_xlat12.x = abs(u_xlat2.x) * abs(u_xlat2.x);
    u_xlat2.x = -abs(u_xlat2.x) * 2.0 + 3.0;
    u_xlat2.x = u_xlat2.x * u_xlat12.x;
    u_xlat12.x = u_xlat2.z * 1.5;
    u_xlat2.x = u_xlat12.x * u_xlat2.x;
    u_xlat0.xz = u_xlat0.xz * u_xlat2.xx;
    u_xlat0.xz = u_xlat0.xz * vec2(0.150000006, 0.150000006);
    u_xlat0.xz = u_xlat3.yz * u_xlat2.xx + u_xlat0.xz;
    u_xlat0.xz = u_xlat0.xz + u_xlat10.xz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(0.00199999986<u_xlat2.z);
#else
    u_xlatb2 = 0.00199999986<u_xlat2.z;
#endif
    u_xlat12.x = (-u_xlat2.w) * _LocalWindsMapCameraInfo.y + _LocalWindsMapCameraInfo.x;
    u_xlat0.xy = (bool(u_xlatb2)) ? u_xlat0.xz : u_xlat10.xz;
    u_xlat20.xy = vec2(_WorldOffsetRange.z + float(2.0), _WorldOffsetRange.w + float(2.0));
    u_xlat2.xz = u_xlat1.xz + (-_WorldOffsetRange.xy);
    u_xlat2.xz = u_xlat2.xz + vec2(1.0, 1.0);
    u_xlat20.xy = u_xlat2.xz / u_xlat20.xy;
    u_xlat20.xy = u_xlat20.xy * _WorldOffsetRange.zw + vec2(-0.5, -0.5);
    u_xlat2.xz = floor(u_xlat20.xy);
    u_xlat20.xy = u_xlat20.xy + (-u_xlat2.xz);
    u_xlat3 = u_xlat2.xzxz + vec4(0.5, 1.5, 1.5, 1.5);
    u_xlat4 = u_xlat2.xzxz + vec4(1.5, 0.5, 0.5, 0.5);
    u_xlat4 = vec4(u_xlat4.x / _WorldOffsetRange.z, u_xlat4.y / _WorldOffsetRange.w, u_xlat4.z / _WorldOffsetRange.z, u_xlat4.w / _WorldOffsetRange.w);
    u_xlat3 = vec4(u_xlat3.x / _WorldOffsetRange.z, u_xlat3.y / _WorldOffsetRange.w, u_xlat3.z / _WorldOffsetRange.z, u_xlat3.w / _WorldOffsetRange.w);
    u_xlat2.x = textureLod(_Heightmap, u_xlat3.zw, 0.0).x;
    u_xlat22.x = textureLod(_Heightmap, u_xlat3.xy, 0.0).x;
    u_xlat2.x = (-u_xlat22.x) + u_xlat2.x;
    u_xlat2.x = u_xlat20.x * u_xlat2.x + u_xlat22.x;
    u_xlat22.x = textureLod(_Heightmap, u_xlat4.xy, 0.0).x;
    u_xlat32 = textureLod(_Heightmap, u_xlat4.zw, 0.0).x;
    u_xlat22.x = (-u_xlat32) + u_xlat22.x;
    u_xlat20.x = u_xlat20.x * u_xlat22.x + u_xlat32;
    u_xlat2.x = (-u_xlat20.x) + u_xlat2.x;
    u_xlat20.x = u_xlat20.y * u_xlat2.x + u_xlat20.x;
    u_xlat30 = u_xlat20.x * _HeightScale + u_xlat1.y;
    u_xlat30 = (-u_xlat30) + u_xlat12.x;
    u_xlat30 = u_xlat30 * 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
#else
    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
#endif
    u_xlat30 = (-u_xlat30) + 1.0;
    u_xlat2.x = fract(u_xlat31);
    u_xlat31 = u_xlat31 + hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat12.xy = vec2(u_xlat31) * vec2(22.0, 33.0);
    u_xlat12.xy = fract(u_xlat12.xy);
    u_xlat12.xy = u_xlat12.xy + vec2(-0.5, -0.5);
    u_xlat3.xz = u_xlat12.xy * vec2(0.200000003, 0.200000003);
    u_xlat31 = u_xlat2.x + -0.5;
    u_xlat2.x = u_xlat2.x * _SmallWindParam.x;
    u_xlat2.x = sin(u_xlat2.x);
    u_xlat12.x = u_xlat31 * 0.333000004;
    u_xlat4.y = u_xlat31 * 0.333000004 + -1.0;
    u_xlat31 = in_TEXCOORD1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat31 = min(max(u_xlat31, 0.0), 1.0);
#else
    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat12.x * u_xlat31;
    u_xlat30 = u_xlat30 * u_xlat12.x;
    u_xlat0.xy = vec2(u_xlat30) * u_xlat0.xy;
    u_xlat5.xz = u_xlat0.xy * vec2(vec2(_VegetationMoveScale, _VegetationMoveScale));
    u_xlat0.x = dot(_GlobalWind.xyz, _GlobalWind.xyz);
    u_xlat0.x = max(u_xlat0.x, 0.00100000005);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat6 = u_xlat0.xxxx * _GlobalWind.xzxz;
    u_xlat0.xy = vec2(u_xlat6.z * _LargeWindParam.z, u_xlat6.w * _LargeWindParam.z);
    u_xlat22.xy = u_xlat1.xz / vec2(_NoiseScale);
    u_xlat22.xy = _LargeWindParam.xx * u_xlat6.xy + u_xlat22.xy;
    u_xlat22.xy = textureLod(_Noisemap, u_xlat22.xy, 0.0).xy;
    u_xlat22.xy = u_xlat22.xy + vec2(-0.5, -0.5);
    u_xlat22.xy = u_xlat22.xy * _LargeWindParam.yy + vec2(0.5, 0.5);
    u_xlat22.xy = u_xlat12.xx * u_xlat22.xy;
    u_xlat6.xz = u_xlat0.xy * u_xlat22.xy;
    u_xlat6.y = 0.0;
    u_xlat0.x = _VegetationStiffness * _SmallWindParam.y;
    u_xlat0.x = u_xlat12.x * u_xlat0.x;
    u_xlat7.x = u_xlat0.x * u_xlat2.x;
    u_xlat0.xyw = in_NORMAL0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyw = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_NORMAL0.xxx + u_xlat0.xyw;
    u_xlat0.xyw = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_NORMAL0.zzz + u_xlat0.xyw;
    u_xlat2.x = dot(u_xlat0.xyw, u_xlat0.xyw);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat0.xyw = u_xlat0.xyw * u_xlat2.xxx;
    u_xlat7.y = float(1.0);
    u_xlat7.z = float(0.349999994);
    u_xlat2.xzw = u_xlat0.xyw * u_xlat7.yxy;
    u_xlat8.xyz = u_xlat2.xzw * u_xlat7.xzx + u_xlat6.xyz;
    u_xlat2.xzw = u_xlat7.xzx * u_xlat2.xzw;
    u_xlat5.y = 0.0;
    u_xlat7.xyz = u_xlat5.xyz + u_xlat8.xyz;
    u_xlat8.y = hlslcc_mtx4x4unity_MatrixV[0].x;
    u_xlat8.x = hlslcc_mtx4x4unity_MatrixV[2].x;
    u_xlat33 = dot(u_xlat8.xy, u_xlat8.xy);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat16.xz = vec2(u_xlat33) * u_xlat8.xy;
    u_xlat8.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;
    u_xlat8.y = hlslcc_mtx4x4unity_ObjectToWorld[2].x;
    u_xlat33 = dot(u_xlat8.xy, u_xlat8.xy);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat8.xy = vec2(u_xlat33) * u_xlat8.xy;
    u_xlat9.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat9.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat9.xyz;
    u_xlat9.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat9.xyz;
    u_xlat9.xyz = u_xlat9.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat9.xyz = (-u_xlat1.xyz) + u_xlat9.xyz;
    u_xlat33 = u_xlat8.y * u_xlat9.z;
    u_xlat33 = u_xlat9.x * u_xlat8.x + (-u_xlat33);
    u_xlat34 = dot(u_xlat9.zx, u_xlat8.xy);
    u_xlat8.xy = u_xlat16.xz * vec2(u_xlat34);
    u_xlat34 = u_xlat33 * u_xlat16.z + (-u_xlat8.x);
    u_xlat33 = u_xlat33 * u_xlat16.x + u_xlat8.y;
    u_xlat33 = u_xlat9.z + u_xlat33;
    u_xlat9.z = (-u_xlat33) * _Billboard + u_xlat9.z;
    u_xlat33 = u_xlat9.x + u_xlat34;
    u_xlat9.x = (-u_xlat33) * _Billboard + u_xlat9.x;
    u_xlat33 = u_xlat12.x * u_xlat9.y;
    u_xlat12.x = max(u_xlat12.x, 9.99999972e-10);
    u_xlat7.xyz = u_xlat9.xyz * vec3(0.100000001, 1.0, 0.100000001) + u_xlat7.xyz;
    u_xlat34 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat34 = max(u_xlat34, 0.00100000005);
    u_xlat34 = inversesqrt(u_xlat34);
    u_xlat7.xyz = vec3(u_xlat34) * u_xlat7.xyz;
    u_xlat34 = dot(u_xlat9.xyz, u_xlat9.xyz);
    u_xlat34 = sqrt(u_xlat34);
    u_xlat8.xyz = u_xlat9.xyz * vec3(0.100000001, 1.0, 0.100000001);
    u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat34) + (-u_xlat8.xyz);
    u_xlat8.xyz = u_xlat1.xyz + u_xlat9.xyz;
    u_xlat8.w = u_xlat20.x * _HeightScale + u_xlat8.y;
    u_xlat1.xyz = u_xlat7.xyz + u_xlat8.xwz;
    u_xlat1.xyz = vec3(u_xlat33) * vec3(-0.5, 0.0, -0.5) + u_xlat1.xyz;
    u_xlat4.xz = u_xlat4.yy * (-u_xlat4.yy);
    u_xlat1.xyz = u_xlat4.xyz * u_xlat9.xyz + u_xlat1.xyz;
    u_xlat4.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat7 = u_xlat4.yyyy * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat7 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat4.xxxx + u_xlat7;
    u_xlat4 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat4.zzzz + u_xlat7;
    u_xlat4 = u_xlat4 + hlslcc_mtx4x4unity_MatrixVPZero[3];
    gl_Position = u_xlat4;
    u_xlat3.y = 0.0;
    vs_TEXCOORD0.xyz = u_xlat3.xyz + vec3(-1.0, 0.0, -1.0);
    vs_TEXCOORD0.w = 0.0;
    u_xlat3.xyz = u_xlat5.yzx / u_xlat12.xxx;
    u_xlat5.yz = u_xlat6.zx / u_xlat12.xx;
    u_xlat2.xyz = u_xlat2.zwx / u_xlat12.xxx;
    u_xlat5.x = 0.0;
    u_xlat2.xyz = u_xlat2.xyz + u_xlat5.xyz;
    u_xlat2.xyz = u_xlat3.xyz + u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz + vec3(0.0, -1.0, -1.0);
    u_xlat20.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat20.x = inversesqrt(u_xlat20.x);
    u_xlat2.xyz = u_xlat20.xxx * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat0.xyw * u_xlat2.xyz;
    u_xlat0.xyz = u_xlat2.zxy * u_xlat0.ywx + (-u_xlat3.xyz);
    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.xyz * u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
    u_xlat30 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat1.xyz = vec3(u_xlat30) * u_xlat1.xyz;
    u_xlat30 = dot(u_xlat1.xyz, u_xlat0.xyz);
#ifdef UNITY_ADRENO_ES3
    { bool cond = 0.0<u_xlat30; u_xlati1 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati1 = int((0.0<u_xlat30) ? 0xFFFFFFFFu : uint(0u));
#endif
#ifdef UNITY_ADRENO_ES3
    { bool cond = u_xlat30<0.0; u_xlati30 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati30 = int((u_xlat30<0.0) ? 0xFFFFFFFFu : uint(0u));
#endif
    u_xlati30 = (-u_xlati1) + u_xlati30;
    u_xlat30 = float(u_xlati30);
    vs_TEXCOORD1.xyz = vec3(u_xlat30) * u_xlat0.xyz;
    vs_TEXCOORD1.w = 0.0;
    u_xlat0.x = u_xlat31 / _RootColorScale;
    u_xlat0.x = u_xlat0.x + _RootColorOffset;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xxx * vec3(-0.501960814, 0.0, 0.0) + vec3(0.501960814, 0.0, 0.0);
    u_xlat30 = u_xlat31 + -0.600000024;
    vs_TEXCOORD3 = u_xlat31;
    u_xlat30 = max(u_xlat30, 0.0);
    u_xlat30 = _GrassTipLighting * u_xlat30 + 1.0;
    vs_TEXCOORD2.xyz = vec3(u_xlat30) * u_xlat0.xyz;
    vs_TEXCOORD2.w = 0.0;
    vs_TEXCOORD4.xy = in_TEXCOORD2.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
    u_xlat0.x = u_xlat4.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat4.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.w = u_xlat4.w;
    vs_TEXCOORD5.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD5.z = 0.247058824;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
float ImmCB_0_0_0[64];
uniform 	vec4 _ScreenParams;
uniform 	float _GrassShininess;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	float _CutOff;
uniform 	vec4 _BurnedColor;
uniform lowp sampler2D _MainTex;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp float vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec3 u_xlat0;
int u_xlati0;
bool u_xlatb0;
lowp vec4 u_xlat10_1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat12;
bool u_xlatb12;
void main()
{
	ImmCB_0_0_0[0] = 1.0;
	ImmCB_0_0_0[1] = 49.0;
	ImmCB_0_0_0[2] = 13.0;
	ImmCB_0_0_0[3] = 61.0;
	ImmCB_0_0_0[4] = 4.0;
	ImmCB_0_0_0[5] = 52.0;
	ImmCB_0_0_0[6] = 16.0;
	ImmCB_0_0_0[7] = 64.0;
	ImmCB_0_0_0[8] = 33.0;
	ImmCB_0_0_0[9] = 17.0;
	ImmCB_0_0_0[10] = 45.0;
	ImmCB_0_0_0[11] = 29.0;
	ImmCB_0_0_0[12] = 36.0;
	ImmCB_0_0_0[13] = 20.0;
	ImmCB_0_0_0[14] = 48.0;
	ImmCB_0_0_0[15] = 32.0;
	ImmCB_0_0_0[16] = 9.0;
	ImmCB_0_0_0[17] = 57.0;
	ImmCB_0_0_0[18] = 5.0;
	ImmCB_0_0_0[19] = 53.0;
	ImmCB_0_0_0[20] = 12.0;
	ImmCB_0_0_0[21] = 60.0;
	ImmCB_0_0_0[22] = 8.0;
	ImmCB_0_0_0[23] = 56.0;
	ImmCB_0_0_0[24] = 41.0;
	ImmCB_0_0_0[25] = 25.0;
	ImmCB_0_0_0[26] = 37.0;
	ImmCB_0_0_0[27] = 21.0;
	ImmCB_0_0_0[28] = 44.0;
	ImmCB_0_0_0[29] = 28.0;
	ImmCB_0_0_0[30] = 40.0;
	ImmCB_0_0_0[31] = 24.0;
	ImmCB_0_0_0[32] = 3.0;
	ImmCB_0_0_0[33] = 51.0;
	ImmCB_0_0_0[34] = 15.0;
	ImmCB_0_0_0[35] = 63.0;
	ImmCB_0_0_0[36] = 2.0;
	ImmCB_0_0_0[37] = 50.0;
	ImmCB_0_0_0[38] = 14.0;
	ImmCB_0_0_0[39] = 62.0;
	ImmCB_0_0_0[40] = 35.0;
	ImmCB_0_0_0[41] = 19.0;
	ImmCB_0_0_0[42] = 47.0;
	ImmCB_0_0_0[43] = 31.0;
	ImmCB_0_0_0[44] = 34.0;
	ImmCB_0_0_0[45] = 18.0;
	ImmCB_0_0_0[46] = 46.0;
	ImmCB_0_0_0[47] = 30.0;
	ImmCB_0_0_0[48] = 11.0;
	ImmCB_0_0_0[49] = 59.0;
	ImmCB_0_0_0[50] = 7.0;
	ImmCB_0_0_0[51] = 55.0;
	ImmCB_0_0_0[52] = 10.0;
	ImmCB_0_0_0[53] = 58.0;
	ImmCB_0_0_0[54] = 6.0;
	ImmCB_0_0_0[55] = 54.0;
	ImmCB_0_0_0[56] = 43.0;
	ImmCB_0_0_0[57] = 27.0;
	ImmCB_0_0_0[58] = 39.0;
	ImmCB_0_0_0[59] = 23.0;
	ImmCB_0_0_0[60] = 42.0;
	ImmCB_0_0_0[61] = 26.0;
	ImmCB_0_0_0[62] = 38.0;
	ImmCB_0_0_0[63] = 22.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vs_TEXCOORD5.z<0.949999988);
#else
    u_xlatb0 = vs_TEXCOORD5.z<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD5.yx / vs_TEXCOORD5.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
        u_xlat0.xy = u_xlat0.xy * vec2(0.125, 0.125);
        u_xlat0.xy = fract(u_xlat0.xy);
        u_xlat0.xy = u_xlat0.xy * vec2(7.99900007, 7.99900007);
        u_xlat0.xy = trunc(u_xlat0.xy);
        u_xlat0.x = u_xlat0.x * 8.0 + u_xlat0.y;
        u_xlati0 = int(u_xlat0.x);
        u_xlat0.x = (-ImmCB_0_0_0[u_xlati0]) * 0.015625 + vs_TEXCOORD5.z;
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat0.x = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD0.xyz;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD4.xy);
    u_xlat2.xyz = _BurnedColor.xyz * u_xlat10_1.xyz + (-u_xlat10_1.xyz);
    u_xlat2.xyz = vs_TEXCOORD2.www * u_xlat2.xyz + u_xlat10_1.xyz;
    u_xlat12 = u_xlat10_1.w + (-_CutOff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat12<0.0);
#else
    u_xlatb12 = u_xlat12<0.0;
#endif
    if((int(u_xlatb12) * int(0xffffffffu))!=0){discard;}
    u_xlat12 = (-vs_TEXCOORD2.w) + 1.0;
    u_xlat12 = u_xlat12 * _GrassShininess;
    SV_Target0.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_3 = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb0) ? u_xlat16_3 : 0.0399999991;
    SV_Target0.w = 0.0;
    u_xlat2.w = vs_TEXCOORD3;
    SV_Target1 = u_xlat2;
    SV_Target2.xy = vec2(0.0399999991, 0.0399999991);
    SV_Target2.w = u_xlat12;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "MHY_SHADER_HIGH" "SOFT_SAMPLE_HEIGHT_ON" "DITHER_FADE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	int unity_BaseInstanceID;
uniform 	float _NoiseScale;
uniform 	vec4 _WorldOffsetRange;
uniform 	float _HeightScale;
uniform 	float _Billboard;
uniform 	float _VegetationMoveScale;
uniform 	float _VegetationStiffness;
uniform 	vec4 _LocalWindsMapSize;
uniform 	vec4 _LargeWindParam;
uniform 	vec4 _SmallWindParam;
uniform 	vec4 _GlobalWind;
uniform 	vec4 _LocalWindsMapCameraInfo;
uniform 	float _GrassTipLighting;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BurnedColor;
uniform 	float _RootColorScale;
uniform 	float _RootColorOffset;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _Heightmap;
uniform lowp sampler2D _Noisemap;
uniform lowp sampler2D _LocalWindsMap;
in highp vec4 in_POSITION0;
in highp vec4 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec2 in_TEXCOORD2;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp float vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
vec4 u_xlat0;
int u_xlati0;
uvec3 u_xlatu0;
vec3 u_xlat1;
uvec3 u_xlatu1;
vec4 u_xlat2;
uvec4 u_xlatu2;
vec4 u_xlat3;
vec4 u_xlat4;
vec3 u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
vec3 u_xlat8;
vec4 u_xlat9;
vec4 u_xlat10;
float u_xlat11;
int u_xlati11;
float u_xlat13;
uint u_xlatu13;
vec3 u_xlat17;
vec3 u_xlat18;
float u_xlat22;
int u_xlati22;
bool u_xlatb22;
float u_xlat24;
float u_xlat33;
bool u_xlatb33;
float u_xlat34;
bool u_xlatb34;
float u_xlat35;
float u_xlat36;
void main()
{
    u_xlat0.z = 0.0;
    u_xlati11 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati11 = u_xlati11 << 2;
    u_xlat1.xyz = in_TEXCOORD0.yyy * unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_TEXCOORD0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat2.xy = u_xlat1.xz + (-_LocalWindsMapSize.xy);
    u_xlat2.xy = vec2(u_xlat2.x / _LocalWindsMapSize.z, u_xlat2.y / _LocalWindsMapSize.w);
    u_xlat2.xy = u_xlat2.xy + vec2(0.5, 0.5);
    u_xlat2 = textureLod(_LocalWindsMap, u_xlat2.xy, 0.0);
    u_xlat33 = dot(u_xlat2.xy, u_xlat2.xy);
    u_xlat33 = sqrt(u_xlat33);
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(9.99999975e-05>=u_xlat33);
#else
    u_xlatb33 = 9.99999975e-05>=u_xlat33;
#endif
    u_xlat33 = u_xlatb33 ? 1.0 : float(0.0);
    u_xlat3.xy = (-u_xlat2.xy) + vec2(0.5, 0.5);
    u_xlat2.xy = vec2(u_xlat33) * u_xlat3.xy + u_xlat2.xy;
    u_xlat2.xy = u_xlat2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat33 = dot(u_xlat2.xy, u_xlat2.xy);
    u_xlat33 = max(u_xlat33, 0.00100000005);
    u_xlat3.x = inversesqrt(u_xlat33);
    u_xlat3.yz = u_xlat2.xy * u_xlat3.xx;
    u_xlat0.x = u_xlat3.z;
    u_xlat0.xz = (-u_xlat3.xy) * vec2(0.0, 1.0) + u_xlat0.xz;
    u_xlat33 = (-in_TEXCOORD1.x) + unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].x;
    u_xlat34 = u_xlat33 * 3.0;
    u_xlat34 = _Time.y * 3.0 + u_xlat34;
    u_xlat34 = u_xlat34 + 0.5;
    u_xlat34 = fract(u_xlat34);
    u_xlat34 = u_xlat34 * 2.0 + -1.0;
    u_xlat3.x = abs(u_xlat34) * abs(u_xlat34);
    u_xlat34 = -abs(u_xlat34) * 2.0 + 3.0;
    u_xlat34 = u_xlat34 * u_xlat3.x;
    u_xlat3.x = u_xlat2.z * 1.5;
    u_xlat34 = u_xlat34 * u_xlat3.x;
    u_xlat0.xz = u_xlat0.xz * vec2(u_xlat34);
    u_xlat0.xz = u_xlat0.xz * vec2(0.150000006, 0.150000006);
    u_xlat0.xz = u_xlat3.yz * vec2(u_xlat34) + u_xlat0.xz;
    u_xlat0.xz = u_xlat0.xz + u_xlat2.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlatb34 = !!(0.00199999986<u_xlat2.z);
#else
    u_xlatb34 = 0.00199999986<u_xlat2.z;
#endif
    u_xlat24 = (-u_xlat2.w) * _LocalWindsMapCameraInfo.y + _LocalWindsMapCameraInfo.x;
    u_xlat0.xz = (bool(u_xlatb34)) ? u_xlat0.xz : u_xlat2.xy;
    u_xlat2.xy = vec2(_WorldOffsetRange.z + float(2.0), _WorldOffsetRange.w + float(2.0));
    u_xlat3.xy = u_xlat1.xz + (-_WorldOffsetRange.xy);
    u_xlat3.xy = u_xlat3.xy + vec2(1.0, 1.0);
    u_xlat2.xy = u_xlat3.xy / u_xlat2.xy;
    u_xlat2.xy = u_xlat2.xy * _WorldOffsetRange.zw + vec2(-0.5, -0.5);
    u_xlat3.xy = floor(u_xlat2.xy);
    u_xlat2.xy = u_xlat2.xy + (-u_xlat3.xy);
    u_xlat4 = u_xlat3.xyxy + vec4(0.5, 1.5, 1.5, 1.5);
    u_xlat3 = u_xlat3.xyxy + vec4(1.5, 0.5, 0.5, 0.5);
    u_xlat3 = vec4(u_xlat3.x / _WorldOffsetRange.z, u_xlat3.y / _WorldOffsetRange.w, u_xlat3.z / _WorldOffsetRange.z, u_xlat3.w / _WorldOffsetRange.w);
    u_xlat4 = vec4(u_xlat4.x / _WorldOffsetRange.z, u_xlat4.y / _WorldOffsetRange.w, u_xlat4.z / _WorldOffsetRange.z, u_xlat4.w / _WorldOffsetRange.w);
    u_xlat34 = textureLod(_Heightmap, u_xlat4.zw, 0.0).x;
    u_xlat35 = textureLod(_Heightmap, u_xlat4.xy, 0.0).x;
    u_xlat34 = u_xlat34 + (-u_xlat35);
    u_xlat34 = u_xlat2.x * u_xlat34 + u_xlat35;
    u_xlat35 = textureLod(_Heightmap, u_xlat3.xy, 0.0).x;
    u_xlat3.x = textureLod(_Heightmap, u_xlat3.zw, 0.0).x;
    u_xlat35 = u_xlat35 + (-u_xlat3.x);
    u_xlat2.x = u_xlat2.x * u_xlat35 + u_xlat3.x;
    u_xlat34 = u_xlat34 + (-u_xlat2.x);
    u_xlat34 = u_xlat2.y * u_xlat34 + u_xlat2.x;
    u_xlat2.x = u_xlat34 * _HeightScale + u_xlat1.y;
    u_xlat2.x = (-u_xlat2.x) + u_xlat24;
    u_xlat2.x = u_xlat2.x * 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat2.x = (-u_xlat2.x) + 1.0;
    u_xlat13 = float(floatBitsToUint(unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2]).w);
    u_xlat13 = u_xlat13 * 5.96046448e-08;
    u_xlatu13 = uint(u_xlat13);
    u_xlatu13 = u_xlatu13 & 3u;
    u_xlat13 = float(u_xlatu13);
    u_xlat24 = fract(u_xlat33);
    u_xlat33 = u_xlat33 + unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].y;
    u_xlat3.xy = vec2(u_xlat33) * vec2(22.0, 33.0);
    u_xlat3.xy = fract(u_xlat3.xy);
    u_xlat3.xy = u_xlat3.xy + vec2(-0.5, -0.5);
    u_xlat3.xz = u_xlat3.xy * vec2(0.200000003, 0.200000003);
    u_xlat33 = u_xlat13 + u_xlat24;
    u_xlat13 = u_xlat24 * _SmallWindParam.x;
    u_xlat13 = sin(u_xlat13);
    u_xlat33 = u_xlat33 + -0.5;
    u_xlat24 = u_xlat33 * 0.333000004;
    u_xlat4.y = u_xlat33 * 0.333000004 + -1.0;
    u_xlat33 = in_TEXCOORD1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat33 = min(max(u_xlat33, 0.0), 1.0);
#else
    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
#endif
    u_xlat24 = u_xlat24 * u_xlat33;
    u_xlat2.x = u_xlat24 * u_xlat2.x;
    u_xlat0.xz = u_xlat0.xz * u_xlat2.xx;
    u_xlat5.xz = u_xlat0.xz * vec2(vec2(_VegetationMoveScale, _VegetationMoveScale));
    u_xlat6.y = 0.0;
    u_xlat0.x = _VegetationStiffness * _SmallWindParam.y;
    u_xlat0.x = u_xlat24 * u_xlat0.x;
    u_xlat7.x = u_xlat0.x * u_xlat13;
    u_xlat2.xyw = in_NORMAL0.yyy * unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat2.xyw = unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_NORMAL0.xxx + u_xlat2.xyw;
    u_xlat2.xyw = unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_NORMAL0.zzz + u_xlat2.xyw;
    u_xlat0.x = dot(u_xlat2.xyw, u_xlat2.xyw);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat2.xyw = u_xlat0.xxx * u_xlat2.xyw;
    u_xlat7.y = float(1.0);
    u_xlat7.z = float(0.349999994);
    u_xlat8.xyz = u_xlat2.xyw * u_xlat7.yxy;
    u_xlat0.x = dot(_GlobalWind.xyz, _GlobalWind.xyz);
    u_xlat0.x = max(u_xlat0.x, 0.00100000005);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat9 = u_xlat0.xxxx * _GlobalWind.xzxz;
    u_xlat0.xz = vec2(u_xlat9.z * _LargeWindParam.z, u_xlat9.w * _LargeWindParam.z);
    u_xlat18.xz = u_xlat1.xz / vec2(_NoiseScale);
    u_xlat18.xz = _LargeWindParam.xx * u_xlat9.xy + u_xlat18.xz;
    u_xlat18.xz = textureLod(_Noisemap, u_xlat18.xz, 0.0).xy;
    u_xlat18.xz = u_xlat18.xz + vec2(-0.5, -0.5);
    u_xlat18.xz = u_xlat18.xz * _LargeWindParam.yy + vec2(0.5, 0.5);
    u_xlat18.xz = vec2(u_xlat24) * u_xlat18.xz;
    u_xlat6.xz = u_xlat0.xz * u_xlat18.xz;
    u_xlat9.xyz = u_xlat8.xyz * u_xlat7.xzx + u_xlat6.xyz;
    u_xlat7.xyz = u_xlat7.xzx * u_xlat8.xyz;
    u_xlat5.y = 0.0;
    u_xlat8.xyz = u_xlat5.xyz + u_xlat9.xyz;
    u_xlat9.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat9.xyz = unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat9.xyz;
    u_xlat9.xyz = unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat9.xyz;
    u_xlat9.xyz = u_xlat9.xyz + unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat9.xyz = (-u_xlat1.xyz) + u_xlat9.xyz;
    u_xlat10.x = unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].x;
    u_xlat10.y = unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].x;
    u_xlat0.x = dot(u_xlat10.xy, u_xlat10.xy);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xz = u_xlat0.xx * u_xlat10.xy;
    u_xlat36 = u_xlat0.z * u_xlat9.z;
    u_xlat36 = u_xlat9.x * u_xlat0.x + (-u_xlat36);
    u_xlat0.x = dot(u_xlat9.zx, u_xlat0.xz);
    u_xlat10.y = hlslcc_mtx4x4unity_MatrixV[0].x;
    u_xlat10.x = hlslcc_mtx4x4unity_MatrixV[2].x;
    u_xlat22 = dot(u_xlat10.xy, u_xlat10.xy);
    u_xlat22 = inversesqrt(u_xlat22);
    u_xlat17.xz = vec2(u_xlat22) * u_xlat10.xy;
    u_xlat0.xz = u_xlat0.xx * u_xlat17.xz;
    u_xlat0.x = u_xlat36 * u_xlat17.z + (-u_xlat0.x);
    u_xlat0.z = u_xlat36 * u_xlat17.x + u_xlat0.z;
    u_xlat0.xz = u_xlat9.xz + u_xlat0.xz;
    u_xlat9.z = (-u_xlat0.z) * _Billboard + u_xlat9.z;
    u_xlat9.x = (-u_xlat0.x) * _Billboard + u_xlat9.x;
    u_xlat8.xyz = u_xlat9.xyz * vec3(0.100000001, 1.0, 0.100000001) + u_xlat8.xyz;
    u_xlat0.x = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat0.x = max(u_xlat0.x, 0.00100000005);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat8.xyz = u_xlat0.xxx * u_xlat8.xyz;
    u_xlat0.x = dot(u_xlat9.xyz, u_xlat9.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat10.xyz = u_xlat9.xyz * vec3(0.100000001, 1.0, 0.100000001);
    u_xlat8.xyz = u_xlat8.xyz * u_xlat0.xxx + (-u_xlat10.xyz);
    u_xlat10.xyz = u_xlat1.xyz + u_xlat9.xyz;
    u_xlat10.w = u_xlat34 * _HeightScale + u_xlat10.y;
    u_xlat1.xyz = u_xlat8.xyz + u_xlat10.xwz;
    u_xlatu0.xz = uvec2(65280u, 255u) & floatBitsToUint(unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1]).ww;
    u_xlat0.xz = vec2(u_xlatu0.xz);
    u_xlat0.x = u_xlat0.x * 0.00390625;
    u_xlatu0.x = uint(u_xlat0.x);
    u_xlat0.x = float(u_xlatu0.x);
    u_xlat8.xz = u_xlat0.xz + vec2(-127.0, -127.0);
    u_xlat0.xz = u_xlat8.xz * vec2(0.00787401572, 0.00787401572);
    u_xlat0.xz = u_xlat0.xz * u_xlat0.xz;
    u_xlat0.x = u_xlat0.z + u_xlat0.x;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(0.0<u_xlat0.x);
#else
    u_xlatb22 = 0.0<u_xlat0.x;
#endif
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat8.y = u_xlatb22 ? u_xlat0.x : float(0.0);
    u_xlat10.xyz = u_xlat8.xyz * u_xlat9.yyy;
    u_xlat10.xyz = vec3(u_xlat24) * u_xlat10.xyz;
    u_xlat0.x = max(u_xlat24, 9.99999972e-10);
    u_xlat1.xyz = u_xlat10.xyz * vec3(0.00393700786, 0.0, 0.00393700786) + u_xlat1.xyz;
    u_xlat4.xz = u_xlat4.yy * (-u_xlat4.yy);
    u_xlat1.xyz = u_xlat4.xyz * u_xlat9.xyz + u_xlat1.xyz;
    u_xlat4.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat9 = u_xlat4.yyyy * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat9 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat4.xxxx + u_xlat9;
    u_xlat4 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat4.zzzz + u_xlat9;
    u_xlat4 = u_xlat4 + hlslcc_mtx4x4unity_MatrixVPZero[3];
    gl_Position = u_xlat4;
    u_xlat3.y = 0.0;
    vs_TEXCOORD0.xyz = u_xlat8.xyz * vec3(0.00787401572, 1.0, 0.00787401572) + u_xlat3.xyz;
    vs_TEXCOORD0.w = 0.0;
    u_xlat3.xyz = u_xlat5.yzx / u_xlat0.xxx;
    u_xlat5.yz = u_xlat6.zx / u_xlat0.xx;
    u_xlat6.xyz = u_xlat7.yzx / u_xlat0.xxx;
    u_xlat5.x = 0.0;
    u_xlat5.xyz = u_xlat5.xyz + u_xlat6.xyz;
    u_xlat3.xyz = u_xlat3.xyz + u_xlat5.xyz;
    u_xlat3.xyz = u_xlat8.yzx * vec3(1.0, 0.00787401572, 0.00787401572) + u_xlat3.xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat5.xyz = u_xlat2.xyw * u_xlat3.xyz;
    u_xlat2.xyz = u_xlat3.zxy * u_xlat2.ywx + (-u_xlat5.xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat5.xyz = u_xlat3.xyz * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat5.xyz);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
    { bool cond = 0.0<u_xlat0.x; u_xlati22 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati22 = int((0.0<u_xlat0.x) ? 0xFFFFFFFFu : uint(0u));
#endif
#ifdef UNITY_ADRENO_ES3
    { bool cond = u_xlat0.x<0.0; u_xlati0 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati0 = int((u_xlat0.x<0.0) ? 0xFFFFFFFFu : uint(0u));
#endif
    u_xlati0 = (-u_xlati22) + u_xlati0;
    u_xlat0.x = float(u_xlati0);
    vs_TEXCOORD1.xyz = u_xlat0.xxx * u_xlat2.xyz;
    vs_TEXCOORD1.w = 0.0;
    u_xlatu1.xyz = uvec3(16711680u, 65280u, 255u) & floatBitsToUint(unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2]).www;
    u_xlat1.xyz = vec3(u_xlatu1.xyz);
    u_xlatu2 = uvec4(4278190080u, 16711680u, 65280u, 255u) & floatBitsToUint(unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3]).wwww;
    u_xlat0.x = max(1.0, unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].w);
    u_xlat0.x = min(u_xlat0.x, 2.0);
    u_xlat0.x = u_xlat0.x + -1.0;
    u_xlat2 = vec4(u_xlatu2);
    u_xlat2 = u_xlat2 * vec4(2.33743719e-10, 5.9838392e-08, 1.53186284e-05, 0.00392156886);
    u_xlat1.xyz = u_xlat1.xyz * vec3(5.9838392e-08, 1.53186284e-05, 0.00392156886) + (-u_xlat2.yzw);
    u_xlat11 = u_xlat33 / _RootColorScale;
    u_xlat11 = u_xlat11 + _RootColorOffset;
#ifdef UNITY_ADRENO_ES3
    u_xlat11 = min(max(u_xlat11, 0.0), 1.0);
#else
    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat11) * u_xlat1.xyz + u_xlat2.yzw;
    vs_TEXCOORD5.z = u_xlat2.x;
    u_xlat2.xyz = (-u_xlat1.xyz) + _BurnedColor.xyz;
    u_xlat1.xyz = u_xlat0.xxx * u_xlat2.xyz + u_xlat1.xyz;
    vs_TEXCOORD2.w = u_xlat0.x;
    u_xlat0.x = u_xlat33 + -0.600000024;
    vs_TEXCOORD3 = u_xlat33;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = _GrassTipLighting * u_xlat0.x + 1.0;
    vs_TEXCOORD2.xyz = u_xlat0.xxx * u_xlat1.xyz;
    vs_TEXCOORD4.xy = in_TEXCOORD2.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
    u_xlat0.x = u_xlat4.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat4.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.w = u_xlat4.w;
    vs_TEXCOORD5.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
float ImmCB_0_0_0[64];
uniform 	vec4 _ScreenParams;
uniform 	float _GrassShininess;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	float _CutOff;
uniform 	vec4 _BurnedColor;
uniform lowp sampler2D _MainTex;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp float vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec3 u_xlat0;
int u_xlati0;
bool u_xlatb0;
lowp vec4 u_xlat10_1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat12;
bool u_xlatb12;
void main()
{
	ImmCB_0_0_0[0] = 1.0;
	ImmCB_0_0_0[1] = 49.0;
	ImmCB_0_0_0[2] = 13.0;
	ImmCB_0_0_0[3] = 61.0;
	ImmCB_0_0_0[4] = 4.0;
	ImmCB_0_0_0[5] = 52.0;
	ImmCB_0_0_0[6] = 16.0;
	ImmCB_0_0_0[7] = 64.0;
	ImmCB_0_0_0[8] = 33.0;
	ImmCB_0_0_0[9] = 17.0;
	ImmCB_0_0_0[10] = 45.0;
	ImmCB_0_0_0[11] = 29.0;
	ImmCB_0_0_0[12] = 36.0;
	ImmCB_0_0_0[13] = 20.0;
	ImmCB_0_0_0[14] = 48.0;
	ImmCB_0_0_0[15] = 32.0;
	ImmCB_0_0_0[16] = 9.0;
	ImmCB_0_0_0[17] = 57.0;
	ImmCB_0_0_0[18] = 5.0;
	ImmCB_0_0_0[19] = 53.0;
	ImmCB_0_0_0[20] = 12.0;
	ImmCB_0_0_0[21] = 60.0;
	ImmCB_0_0_0[22] = 8.0;
	ImmCB_0_0_0[23] = 56.0;
	ImmCB_0_0_0[24] = 41.0;
	ImmCB_0_0_0[25] = 25.0;
	ImmCB_0_0_0[26] = 37.0;
	ImmCB_0_0_0[27] = 21.0;
	ImmCB_0_0_0[28] = 44.0;
	ImmCB_0_0_0[29] = 28.0;
	ImmCB_0_0_0[30] = 40.0;
	ImmCB_0_0_0[31] = 24.0;
	ImmCB_0_0_0[32] = 3.0;
	ImmCB_0_0_0[33] = 51.0;
	ImmCB_0_0_0[34] = 15.0;
	ImmCB_0_0_0[35] = 63.0;
	ImmCB_0_0_0[36] = 2.0;
	ImmCB_0_0_0[37] = 50.0;
	ImmCB_0_0_0[38] = 14.0;
	ImmCB_0_0_0[39] = 62.0;
	ImmCB_0_0_0[40] = 35.0;
	ImmCB_0_0_0[41] = 19.0;
	ImmCB_0_0_0[42] = 47.0;
	ImmCB_0_0_0[43] = 31.0;
	ImmCB_0_0_0[44] = 34.0;
	ImmCB_0_0_0[45] = 18.0;
	ImmCB_0_0_0[46] = 46.0;
	ImmCB_0_0_0[47] = 30.0;
	ImmCB_0_0_0[48] = 11.0;
	ImmCB_0_0_0[49] = 59.0;
	ImmCB_0_0_0[50] = 7.0;
	ImmCB_0_0_0[51] = 55.0;
	ImmCB_0_0_0[52] = 10.0;
	ImmCB_0_0_0[53] = 58.0;
	ImmCB_0_0_0[54] = 6.0;
	ImmCB_0_0_0[55] = 54.0;
	ImmCB_0_0_0[56] = 43.0;
	ImmCB_0_0_0[57] = 27.0;
	ImmCB_0_0_0[58] = 39.0;
	ImmCB_0_0_0[59] = 23.0;
	ImmCB_0_0_0[60] = 42.0;
	ImmCB_0_0_0[61] = 26.0;
	ImmCB_0_0_0[62] = 38.0;
	ImmCB_0_0_0[63] = 22.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vs_TEXCOORD5.z<0.949999988);
#else
    u_xlatb0 = vs_TEXCOORD5.z<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD5.yx / vs_TEXCOORD5.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
        u_xlat0.xy = u_xlat0.xy * vec2(0.125, 0.125);
        u_xlat0.xy = fract(u_xlat0.xy);
        u_xlat0.xy = u_xlat0.xy * vec2(7.99900007, 7.99900007);
        u_xlat0.xy = trunc(u_xlat0.xy);
        u_xlat0.x = u_xlat0.x * 8.0 + u_xlat0.y;
        u_xlati0 = int(u_xlat0.x);
        u_xlat0.x = (-ImmCB_0_0_0[u_xlati0]) * 0.015625 + vs_TEXCOORD5.z;
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat0.x = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD0.xyz;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD4.xy);
    u_xlat2.xyz = _BurnedColor.xyz * u_xlat10_1.xyz + (-u_xlat10_1.xyz);
    u_xlat2.xyz = vs_TEXCOORD2.www * u_xlat2.xyz + u_xlat10_1.xyz;
    u_xlat12 = u_xlat10_1.w + (-_CutOff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat12<0.0);
#else
    u_xlatb12 = u_xlat12<0.0;
#endif
    if((int(u_xlatb12) * int(0xffffffffu))!=0){discard;}
    u_xlat12 = (-vs_TEXCOORD2.w) + 1.0;
    u_xlat12 = u_xlat12 * _GrassShininess;
    SV_Target0.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_3 = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb0) ? u_xlat16_3 : 0.0399999991;
    SV_Target0.w = 0.0;
    u_xlat2.w = vs_TEXCOORD3;
    SV_Target1 = u_xlat2;
    SV_Target2.xy = vec2(0.0399999991, 0.0399999991);
    SV_Target2.w = u_xlat12;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "MHY_SHADER_MIDDLE" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	float _NoiseScale;
uniform 	vec4 _WorldOffsetRange;
uniform 	float _HeightScale;
uniform 	float _Billboard;
uniform 	float _VegetationMoveScale;
uniform 	vec4 _LocalWindsMapSize;
uniform 	vec4 _LargeWindParam;
uniform 	vec4 _GlobalWind;
uniform 	vec4 _LocalWindsMapCameraInfo;
uniform 	float _GrassTipLighting;
uniform 	vec4 _MainTex_ST;
uniform 	float _RootColorScale;
uniform 	float _RootColorOffset;
uniform highp sampler2D _Heightmap;
uniform lowp sampler2D _Noisemap;
uniform lowp sampler2D _LocalWindsMap;
in highp vec4 in_POSITION0;
in highp vec4 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec2 in_TEXCOORD2;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp float vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec3 u_xlat0;
vec3 u_xlat1;
int u_xlati1;
vec4 u_xlat2;
bool u_xlatb2;
vec3 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
vec4 u_xlat6;
vec3 u_xlat7;
vec3 u_xlat8;
bool u_xlatb8;
vec2 u_xlat10;
vec2 u_xlat16;
vec2 u_xlat21;
float u_xlat24;
int u_xlati24;
float u_xlat25;
float u_xlat26;
void main()
{
    u_xlat0.z = 0.0;
    u_xlat1.xyz = in_TEXCOORD0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[2].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TEXCOORD0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat8.xz = u_xlat1.xz + (-_LocalWindsMapSize.xy);
    u_xlat8.xz = vec2(u_xlat8.x / _LocalWindsMapSize.z, u_xlat8.z / _LocalWindsMapSize.w);
    u_xlat8.xz = u_xlat8.xz + vec2(0.5, 0.5);
    u_xlat2 = textureLod(_LocalWindsMap, u_xlat8.xz, 0.0);
    u_xlat8.x = dot(u_xlat2.xy, u_xlat2.xy);
    u_xlat8.x = sqrt(u_xlat8.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(9.99999975e-05>=u_xlat8.x);
#else
    u_xlatb8 = 9.99999975e-05>=u_xlat8.x;
#endif
    u_xlat8.x = u_xlatb8 ? 1.0 : float(0.0);
    u_xlat3.xy = (-u_xlat2.xy) + vec2(0.5, 0.5);
    u_xlat8.xz = u_xlat8.xx * u_xlat3.xy + u_xlat2.xy;
    u_xlat8.xz = u_xlat8.xz * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat25 = dot(u_xlat8.xz, u_xlat8.xz);
    u_xlat25 = max(u_xlat25, 0.00100000005);
    u_xlat3.x = inversesqrt(u_xlat25);
    u_xlat3.yz = u_xlat8.xz * u_xlat3.xx;
    u_xlat0.x = u_xlat3.z;
    u_xlat0.xz = (-u_xlat3.xy) * vec2(0.0, 1.0) + u_xlat0.xz;
    u_xlat25 = (-in_TEXCOORD1.x) + hlslcc_mtx4x4unity_ObjectToWorld[1].x;
    u_xlat2.x = u_xlat25 * 3.0;
    u_xlat2.x = _Time.y * 3.0 + u_xlat2.x;
    u_xlat2.x = u_xlat2.x + 0.5;
    u_xlat2.x = fract(u_xlat2.x);
    u_xlat2.x = u_xlat2.x * 2.0 + -1.0;
    u_xlat10.x = abs(u_xlat2.x) * abs(u_xlat2.x);
    u_xlat2.x = -abs(u_xlat2.x) * 2.0 + 3.0;
    u_xlat2.x = u_xlat2.x * u_xlat10.x;
    u_xlat10.x = u_xlat2.z * 1.5;
    u_xlat2.x = u_xlat10.x * u_xlat2.x;
    u_xlat0.xz = u_xlat0.xz * u_xlat2.xx;
    u_xlat0.xz = u_xlat0.xz * vec2(0.150000006, 0.150000006);
    u_xlat0.xz = u_xlat3.yz * u_xlat2.xx + u_xlat0.xz;
    u_xlat0.xz = u_xlat0.xz + u_xlat8.xz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(0.00199999986<u_xlat2.z);
#else
    u_xlatb2 = 0.00199999986<u_xlat2.z;
#endif
    u_xlat10.x = (-u_xlat2.w) * _LocalWindsMapCameraInfo.y + _LocalWindsMapCameraInfo.x;
    u_xlat0.xy = (bool(u_xlatb2)) ? u_xlat0.xz : u_xlat8.xz;
    u_xlat16.xy = vec2(_WorldOffsetRange.z + float(2.0), _WorldOffsetRange.w + float(2.0));
    u_xlat2.xz = u_xlat1.xz + (-_WorldOffsetRange.xy);
    u_xlat2.xz = u_xlat2.xz + vec2(1.0, 1.0);
    u_xlat16.xy = u_xlat2.xz / u_xlat16.xy;
    u_xlat16.x = textureLod(_Heightmap, u_xlat16.xy, 0.0).x;
    u_xlat24 = u_xlat16.x * _HeightScale + u_xlat1.y;
    u_xlat24 = (-u_xlat24) + u_xlat10.x;
    u_xlat24 = u_xlat24 * 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat24 = (-u_xlat24) + 1.0;
    u_xlat2.x = fract(u_xlat25);
    u_xlat25 = u_xlat25 + hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat10.xy = vec2(u_xlat25) * vec2(22.0, 33.0);
    u_xlat10.xy = fract(u_xlat10.xy);
    u_xlat10.xy = u_xlat10.xy + vec2(-0.5, -0.5);
    u_xlat3.xz = u_xlat10.xy * vec2(0.200000003, 0.200000003);
    u_xlat25 = u_xlat2.x + -0.5;
    u_xlat2.x = u_xlat25 * 0.333000004;
    u_xlat4.y = u_xlat25 * 0.333000004 + -1.0;
    u_xlat25 = in_TEXCOORD1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat25 = min(max(u_xlat25, 0.0), 1.0);
#else
    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
#endif
    u_xlat2.x = u_xlat2.x * u_xlat25;
    u_xlat24 = u_xlat24 * u_xlat2.x;
    u_xlat0.xy = vec2(u_xlat24) * u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(vec2(_VegetationMoveScale, _VegetationMoveScale));
    u_xlat24 = dot(_GlobalWind.xyz, _GlobalWind.xyz);
    u_xlat24 = max(u_xlat24, 0.00100000005);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat5 = vec4(u_xlat24) * _GlobalWind.xzxz;
    u_xlat10.xy = vec2(u_xlat5.z * _LargeWindParam.z, u_xlat5.w * _LargeWindParam.z);
    u_xlat21.xy = u_xlat1.xz / vec2(_NoiseScale);
    u_xlat5.xy = _LargeWindParam.xx * u_xlat5.xy + u_xlat21.xy;
    u_xlat5.xy = textureLod(_Noisemap, u_xlat5.xy, 0.0).xy;
    u_xlat5.xy = u_xlat5.xy + vec2(-0.5, -0.5);
    u_xlat5.xy = u_xlat5.xy * _LargeWindParam.yy + vec2(0.5, 0.5);
    u_xlat5.xy = u_xlat2.xx * u_xlat5.xy;
    u_xlat6.xz = u_xlat5.xy * u_xlat10.xy + u_xlat0.xy;
    u_xlat10.xy = u_xlat10.xy * u_xlat5.xy;
    u_xlat6.y = 0.0;
    u_xlat5.y = hlslcc_mtx4x4unity_MatrixV[0].x;
    u_xlat5.x = hlslcc_mtx4x4unity_MatrixV[2].x;
    u_xlat24 = dot(u_xlat5.xy, u_xlat5.xy);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat5.xy = vec2(u_xlat24) * u_xlat5.xy;
    u_xlat7.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;
    u_xlat7.y = hlslcc_mtx4x4unity_ObjectToWorld[2].x;
    u_xlat24 = dot(u_xlat7.xy, u_xlat7.xy);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat21.xy = vec2(u_xlat24) * u_xlat7.xy;
    u_xlat7.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat7.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat7.xyz;
    u_xlat7.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat7.xyz;
    u_xlat7.xyz = u_xlat7.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat7.xyz = (-u_xlat1.xyz) + u_xlat7.xyz;
    u_xlat24 = u_xlat21.y * u_xlat7.z;
    u_xlat24 = u_xlat7.x * u_xlat21.x + (-u_xlat24);
    u_xlat26 = dot(u_xlat7.zx, u_xlat21.xy);
    u_xlat21.xy = u_xlat5.xy * vec2(u_xlat26);
    u_xlat26 = u_xlat24 * u_xlat5.y + (-u_xlat21.x);
    u_xlat24 = u_xlat24 * u_xlat5.x + u_xlat21.y;
    u_xlat24 = u_xlat7.z + u_xlat24;
    u_xlat7.z = (-u_xlat24) * _Billboard + u_xlat7.z;
    u_xlat24 = u_xlat7.x + u_xlat26;
    u_xlat7.x = (-u_xlat24) * _Billboard + u_xlat7.x;
    u_xlat24 = u_xlat2.x * u_xlat7.y;
    u_xlat2.x = max(u_xlat2.x, 9.99999972e-10);
    u_xlat5.xyz = u_xlat7.xyz * vec3(0.100000001, 1.0, 0.100000001) + u_xlat6.xyz;
    u_xlat26 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat26 = max(u_xlat26, 0.00100000005);
    u_xlat26 = inversesqrt(u_xlat26);
    u_xlat5.xyz = vec3(u_xlat26) * u_xlat5.xyz;
    u_xlat26 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat26 = sqrt(u_xlat26);
    u_xlat6.xyz = u_xlat7.xyz * vec3(0.100000001, 1.0, 0.100000001);
    u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat26) + (-u_xlat6.xyz);
    u_xlat6.xyz = u_xlat1.xyz + u_xlat7.xyz;
    u_xlat6.w = u_xlat16.x * _HeightScale + u_xlat6.y;
    u_xlat1.xyz = u_xlat5.xyz + u_xlat6.xwz;
    u_xlat1.xyz = vec3(u_xlat24) * vec3(-0.5, 0.0, -0.5) + u_xlat1.xyz;
    u_xlat4.xz = u_xlat4.yy * (-u_xlat4.yy);
    u_xlat1.xyz = u_xlat4.xyz * u_xlat7.xyz + u_xlat1.xyz;
    u_xlat4.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat5 = u_xlat4.yyyy * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat5 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat4.xxxx + u_xlat5;
    u_xlat4 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat4.zzzz + u_xlat5;
    gl_Position = u_xlat4 + hlslcc_mtx4x4unity_MatrixVPZero[3];
    u_xlat3.y = 0.0;
    vs_TEXCOORD0.xyz = u_xlat3.xyz + vec3(-1.0, 0.0, -1.0);
    vs_TEXCOORD0.w = 0.0;
    u_xlat0.xy = u_xlat0.yx / u_xlat2.xx;
    u_xlat16.xy = u_xlat10.yx / u_xlat2.xx;
    u_xlat0.xy = u_xlat0.xy + u_xlat16.xy;
    u_xlat0.yz = u_xlat0.xy + vec2(-1.0, -1.0);
    u_xlat24 = dot(u_xlat0.yz, u_xlat0.yz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat0.x = 0.0;
    u_xlat0.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    u_xlat2.xyz = in_NORMAL0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_NORMAL0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_NORMAL0.zzz + u_xlat2.xyz;
    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat0.xyz * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat0.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat0.xyz * u_xlat2.xyz;
    u_xlat0.xyz = u_xlat2.zxy * u_xlat0.yzx + (-u_xlat3.xyz);
    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
    u_xlat24 = dot(u_xlat1.xyz, u_xlat0.xyz);
#ifdef UNITY_ADRENO_ES3
    { bool cond = 0.0<u_xlat24; u_xlati1 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati1 = int((0.0<u_xlat24) ? 0xFFFFFFFFu : uint(0u));
#endif
#ifdef UNITY_ADRENO_ES3
    { bool cond = u_xlat24<0.0; u_xlati24 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati24 = int((u_xlat24<0.0) ? 0xFFFFFFFFu : uint(0u));
#endif
    u_xlati24 = (-u_xlati1) + u_xlati24;
    u_xlat24 = float(u_xlati24);
    vs_TEXCOORD1.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    vs_TEXCOORD1.w = 0.0;
    u_xlat0.x = u_xlat25 / _RootColorScale;
    u_xlat0.x = u_xlat0.x + _RootColorOffset;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xxx * vec3(-0.501960814, 0.0, 0.0) + vec3(0.501960814, 0.0, 0.0);
    u_xlat24 = u_xlat25 + -0.600000024;
    vs_TEXCOORD3 = u_xlat25;
    u_xlat24 = max(u_xlat24, 0.0);
    u_xlat24 = _GrassTipLighting * u_xlat24 + 1.0;
    vs_TEXCOORD2.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    vs_TEXCOORD2.w = 0.0;
    vs_TEXCOORD4.xy = in_TEXCOORD2.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	float _GrassShininess;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	float _CutOff;
uniform 	vec4 _BurnedColor;
uniform lowp sampler2D _MainTex;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp float vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec4 u_xlat0;
lowp vec4 u_xlat10_0;
bool u_xlatb0;
vec3 u_xlat1;
mediump float u_xlat16_2;
float u_xlat9;
bool u_xlatb9;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD4.xy);
    u_xlat9 = u_xlat10_0.w + (-_CutOff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(u_xlat9<0.0);
#else
    u_xlatb9 = u_xlat9<0.0;
#endif
    if((int(u_xlatb9) * int(0xffffffffu))!=0){discard;}
    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
    SV_Target0.xyz = u_xlat1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0;
    u_xlat1.xyz = _BurnedColor.xyz * u_xlat10_0.xyz + (-u_xlat10_0.xyz);
    u_xlat0.xyz = vs_TEXCOORD2.www * u_xlat1.xyz + u_xlat10_0.xyz;
    u_xlat0.w = vs_TEXCOORD3;
    SV_Target1 = u_xlat0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_2 = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb0) ? u_xlat16_2 : 0.0399999991;
    u_xlat0.x = (-vs_TEXCOORD2.w) + 1.0;
    u_xlat0.x = u_xlat0.x * _GrassShininess;
    SV_Target2.w = u_xlat0.x;
    SV_Target2.xy = vec2(0.0399999991, 0.0399999991);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "MHY_SHADER_MIDDLE" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	int unity_BaseInstanceID;
uniform 	float _NoiseScale;
uniform 	vec4 _WorldOffsetRange;
uniform 	float _HeightScale;
uniform 	float _Billboard;
uniform 	float _VegetationMoveScale;
uniform 	vec4 _LocalWindsMapSize;
uniform 	vec4 _LargeWindParam;
uniform 	vec4 _GlobalWind;
uniform 	vec4 _LocalWindsMapCameraInfo;
uniform 	float _GrassTipLighting;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BurnedColor;
uniform 	float _RootColorScale;
uniform 	float _RootColorOffset;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _Heightmap;
uniform lowp sampler2D _Noisemap;
uniform lowp sampler2D _LocalWindsMap;
in highp vec4 in_POSITION0;
in highp vec4 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec2 in_TEXCOORD2;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp float vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec3 u_xlat0;
int u_xlati0;
vec3 u_xlat1;
uvec3 u_xlatu1;
vec4 u_xlat2;
uvec3 u_xlatu2;
vec3 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
uvec2 u_xlatu5;
vec4 u_xlat6;
vec3 u_xlat7;
vec2 u_xlat8;
float u_xlat9;
int u_xlati9;
float u_xlat11;
uint u_xlatu11;
int u_xlati18;
float u_xlat20;
vec2 u_xlat23;
float u_xlat27;
bool u_xlatb27;
float u_xlat28;
uint u_xlatu28;
bool u_xlatb28;
float u_xlat29;
bool u_xlatb29;
float u_xlat30;
void main()
{
    u_xlat0.z = 0.0;
    u_xlati9 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati9 = u_xlati9 << 2;
    u_xlat1.xyz = in_TEXCOORD0.yyy * unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_TEXCOORD0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat2.xy = u_xlat1.xz + (-_LocalWindsMapSize.xy);
    u_xlat2.xy = vec2(u_xlat2.x / _LocalWindsMapSize.z, u_xlat2.y / _LocalWindsMapSize.w);
    u_xlat2.xy = u_xlat2.xy + vec2(0.5, 0.5);
    u_xlat2 = textureLod(_LocalWindsMap, u_xlat2.xy, 0.0);
    u_xlat27 = dot(u_xlat2.xy, u_xlat2.xy);
    u_xlat27 = sqrt(u_xlat27);
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(9.99999975e-05>=u_xlat27);
#else
    u_xlatb27 = 9.99999975e-05>=u_xlat27;
#endif
    u_xlat27 = u_xlatb27 ? 1.0 : float(0.0);
    u_xlat3.xy = (-u_xlat2.xy) + vec2(0.5, 0.5);
    u_xlat2.xy = vec2(u_xlat27) * u_xlat3.xy + u_xlat2.xy;
    u_xlat2.xy = u_xlat2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat27 = dot(u_xlat2.xy, u_xlat2.xy);
    u_xlat27 = max(u_xlat27, 0.00100000005);
    u_xlat3.x = inversesqrt(u_xlat27);
    u_xlat3.yz = u_xlat2.xy * u_xlat3.xx;
    u_xlat0.x = u_xlat3.z;
    u_xlat0.xz = (-u_xlat3.xy) * vec2(0.0, 1.0) + u_xlat0.xz;
    u_xlat27 = (-in_TEXCOORD1.x) + unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].x;
    u_xlat28 = u_xlat27 * 3.0;
    u_xlat28 = _Time.y * 3.0 + u_xlat28;
    u_xlat28 = u_xlat28 + 0.5;
    u_xlat28 = fract(u_xlat28);
    u_xlat28 = u_xlat28 * 2.0 + -1.0;
    u_xlat3.x = abs(u_xlat28) * abs(u_xlat28);
    u_xlat28 = -abs(u_xlat28) * 2.0 + 3.0;
    u_xlat28 = u_xlat28 * u_xlat3.x;
    u_xlat3.x = u_xlat2.z * 1.5;
    u_xlat28 = u_xlat28 * u_xlat3.x;
    u_xlat0.xz = u_xlat0.xz * vec2(u_xlat28);
    u_xlat0.xz = u_xlat0.xz * vec2(0.150000006, 0.150000006);
    u_xlat0.xz = u_xlat3.yz * vec2(u_xlat28) + u_xlat0.xz;
    u_xlat0.xz = u_xlat0.xz + u_xlat2.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlatb28 = !!(0.00199999986<u_xlat2.z);
#else
    u_xlatb28 = 0.00199999986<u_xlat2.z;
#endif
    u_xlat20 = (-u_xlat2.w) * _LocalWindsMapCameraInfo.y + _LocalWindsMapCameraInfo.x;
    u_xlat0.xz = (bool(u_xlatb28)) ? u_xlat0.xz : u_xlat2.xy;
    u_xlat2.xy = vec2(_WorldOffsetRange.z + float(2.0), _WorldOffsetRange.w + float(2.0));
    u_xlat3.xy = u_xlat1.xz + (-_WorldOffsetRange.xy);
    u_xlat3.xy = u_xlat3.xy + vec2(1.0, 1.0);
    u_xlat2.xy = u_xlat3.xy / u_xlat2.xy;
    u_xlat28 = textureLod(_Heightmap, u_xlat2.xy, 0.0).x;
    u_xlat2.x = u_xlat28 * _HeightScale + u_xlat1.y;
    u_xlat2.x = (-u_xlat2.x) + u_xlat20;
    u_xlat2.x = u_xlat2.x * 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat2.x = (-u_xlat2.x) + 1.0;
    u_xlat11 = float(floatBitsToUint(unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2]).w);
    u_xlat11 = u_xlat11 * 5.96046448e-08;
    u_xlatu11 = uint(u_xlat11);
    u_xlatu11 = u_xlatu11 & 3u;
    u_xlat11 = float(u_xlatu11);
    u_xlat20 = fract(u_xlat27);
    u_xlat27 = u_xlat27 + unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].y;
    u_xlat3.xy = vec2(u_xlat27) * vec2(22.0, 33.0);
    u_xlat3.xy = fract(u_xlat3.xy);
    u_xlat3.xy = u_xlat3.xy + vec2(-0.5, -0.5);
    u_xlat3.xz = u_xlat3.xy * vec2(0.200000003, 0.200000003);
    u_xlat27 = u_xlat11 + u_xlat20;
    u_xlat27 = u_xlat27 + -0.5;
    u_xlat11 = u_xlat27 * 0.333000004;
    u_xlat4.y = u_xlat27 * 0.333000004 + -1.0;
    u_xlat27 = in_TEXCOORD1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
    u_xlat11 = u_xlat11 * u_xlat27;
    u_xlat2.x = u_xlat11 * u_xlat2.x;
    u_xlat0.xz = u_xlat0.xz * u_xlat2.xx;
    u_xlat0.xz = u_xlat0.xz * vec2(vec2(_VegetationMoveScale, _VegetationMoveScale));
    u_xlat2.x = dot(_GlobalWind.xyz, _GlobalWind.xyz);
    u_xlat2.x = max(u_xlat2.x, 0.00100000005);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat5 = u_xlat2.xxxx * _GlobalWind.xzxz;
    u_xlat2.xz = vec2(u_xlat5.z * _LargeWindParam.z, u_xlat5.w * _LargeWindParam.z);
    u_xlat23.xy = u_xlat1.xz / vec2(_NoiseScale);
    u_xlat5.xy = _LargeWindParam.xx * u_xlat5.xy + u_xlat23.xy;
    u_xlat5.xy = textureLod(_Noisemap, u_xlat5.xy, 0.0).xy;
    u_xlat5.xy = u_xlat5.xy + vec2(-0.5, -0.5);
    u_xlat5.xy = u_xlat5.xy * _LargeWindParam.yy + vec2(0.5, 0.5);
    u_xlat5.xy = vec2(u_xlat11) * u_xlat5.xy;
    u_xlat6.xz = u_xlat5.xy * u_xlat2.xz + u_xlat0.xz;
    u_xlat2.xz = u_xlat2.xz * u_xlat5.xy;
    u_xlat6.y = 0.0;
    u_xlat5.y = hlslcc_mtx4x4unity_MatrixV[0].x;
    u_xlat5.x = hlslcc_mtx4x4unity_MatrixV[2].x;
    u_xlat29 = dot(u_xlat5.xy, u_xlat5.xy);
    u_xlat29 = inversesqrt(u_xlat29);
    u_xlat5.xy = vec2(u_xlat29) * u_xlat5.xy;
    u_xlat7.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat7.xyz = unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat7.xyz;
    u_xlat7.xyz = unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat7.xyz;
    u_xlat7.xyz = u_xlat7.xyz + unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat7.xyz = (-u_xlat1.xyz) + u_xlat7.xyz;
    u_xlat8.x = unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].x;
    u_xlat8.y = unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].x;
    u_xlat29 = dot(u_xlat8.xy, u_xlat8.xy);
    u_xlat29 = inversesqrt(u_xlat29);
    u_xlat23.xy = vec2(u_xlat29) * u_xlat8.xy;
    u_xlat29 = u_xlat23.y * u_xlat7.z;
    u_xlat29 = u_xlat7.x * u_xlat23.x + (-u_xlat29);
    u_xlat30 = dot(u_xlat7.zx, u_xlat23.xy);
    u_xlat23.xy = u_xlat5.xy * vec2(u_xlat30);
    u_xlat30 = u_xlat29 * u_xlat5.y + (-u_xlat23.x);
    u_xlat29 = u_xlat29 * u_xlat5.x + u_xlat23.y;
    u_xlat29 = u_xlat7.z + u_xlat29;
    u_xlat7.z = (-u_xlat29) * _Billboard + u_xlat7.z;
    u_xlat29 = u_xlat7.x + u_xlat30;
    u_xlat7.x = (-u_xlat29) * _Billboard + u_xlat7.x;
    u_xlat5.xyz = u_xlat7.xyz * vec3(0.100000001, 1.0, 0.100000001) + u_xlat6.xyz;
    u_xlat29 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat29 = max(u_xlat29, 0.00100000005);
    u_xlat29 = inversesqrt(u_xlat29);
    u_xlat5.xyz = vec3(u_xlat29) * u_xlat5.xyz;
    u_xlat29 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat29 = sqrt(u_xlat29);
    u_xlat6.xyz = u_xlat7.xyz * vec3(0.100000001, 1.0, 0.100000001);
    u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat29) + (-u_xlat6.xyz);
    u_xlat6.xyz = u_xlat1.xyz + u_xlat7.xyz;
    u_xlat6.w = u_xlat28 * _HeightScale + u_xlat6.y;
    u_xlat1.xyz = u_xlat5.xyz + u_xlat6.xwz;
    u_xlatu5.xy = uvec2(65280u, 255u) & floatBitsToUint(unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1]).ww;
    u_xlat5.xy = vec2(u_xlatu5.xy);
    u_xlat28 = u_xlat5.x * 0.00390625;
    u_xlat5.z = u_xlat5.y + -127.0;
    u_xlatu28 = uint(u_xlat28);
    u_xlat28 = float(u_xlatu28);
    u_xlat5.x = u_xlat28 + -127.0;
    u_xlat6.xy = u_xlat5.xz * vec2(0.00787401572, 0.00787401572);
    u_xlat6.xy = u_xlat6.xy * u_xlat6.xy;
    u_xlat28 = u_xlat6.y + u_xlat6.x;
    u_xlat28 = (-u_xlat28) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb29 = !!(0.0<u_xlat28);
#else
    u_xlatb29 = 0.0<u_xlat28;
#endif
    u_xlat28 = sqrt(u_xlat28);
    u_xlat5.y = u_xlatb29 ? u_xlat28 : float(0.0);
    u_xlat6.xyz = u_xlat5.xyz * u_xlat7.yyy;
    u_xlat6.xyz = vec3(u_xlat11) * u_xlat6.xyz;
    u_xlat28 = max(u_xlat11, 9.99999972e-10);
    u_xlat1.xyz = u_xlat6.xyz * vec3(0.00393700786, 0.0, 0.00393700786) + u_xlat1.xyz;
    u_xlat4.xz = u_xlat4.yy * (-u_xlat4.yy);
    u_xlat1.xyz = u_xlat4.xyz * u_xlat7.xyz + u_xlat1.xyz;
    u_xlat4.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat6 = u_xlat4.yyyy * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat6 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat4.xxxx + u_xlat6;
    u_xlat4 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat4.zzzz + u_xlat6;
    gl_Position = u_xlat4 + hlslcc_mtx4x4unity_MatrixVPZero[3];
    u_xlat3.y = 0.0;
    vs_TEXCOORD0.xyz = u_xlat5.xyz * vec3(0.00787401572, 1.0, 0.00787401572) + u_xlat3.xyz;
    vs_TEXCOORD0.w = 0.0;
    u_xlat0.xz = u_xlat0.zx / vec2(u_xlat28);
    u_xlat2.xy = u_xlat2.zx / vec2(u_xlat28);
    u_xlat2.yz = u_xlat0.xz + u_xlat2.xy;
    u_xlat2.x = 0.0;
    u_xlat2.xyz = u_xlat5.yzx * vec3(1.0, 0.00787401572, 0.00787401572) + u_xlat2.xyz;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat3.xyz = in_NORMAL0.yyy * unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_NORMAL0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_NORMAL0.zzz + u_xlat3.xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
    u_xlat3.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
    u_xlat2.xyz = u_xlat3.zxy * u_xlat2.yzx + (-u_xlat4.xyz);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
    { bool cond = 0.0<u_xlat0.x; u_xlati18 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati18 = int((0.0<u_xlat0.x) ? 0xFFFFFFFFu : uint(0u));
#endif
#ifdef UNITY_ADRENO_ES3
    { bool cond = u_xlat0.x<0.0; u_xlati0 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati0 = int((u_xlat0.x<0.0) ? 0xFFFFFFFFu : uint(0u));
#endif
    u_xlati0 = (-u_xlati18) + u_xlati0;
    u_xlat0.x = float(u_xlati0);
    vs_TEXCOORD1.xyz = u_xlat0.xxx * u_xlat2.xyz;
    vs_TEXCOORD1.w = 0.0;
    u_xlatu1.xyz = uvec3(16711680u, 65280u, 255u) & floatBitsToUint(unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2]).www;
    u_xlat1.xyz = vec3(u_xlatu1.xyz);
    u_xlatu2.xyz = uvec3(16711680u, 65280u, 255u) & floatBitsToUint(unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3]).www;
    u_xlat0.x = max(1.0, unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].w);
    u_xlat0.x = min(u_xlat0.x, 2.0);
    u_xlat0.x = u_xlat0.x + -1.0;
    u_xlat2.xyz = vec3(u_xlatu2.xyz);
    u_xlat2.xyz = u_xlat2.xyz * vec3(5.9838392e-08, 1.53186284e-05, 0.00392156886);
    u_xlat1.xyz = u_xlat1.xyz * vec3(5.9838392e-08, 1.53186284e-05, 0.00392156886) + (-u_xlat2.xyz);
    u_xlat9 = u_xlat27 / _RootColorScale;
    u_xlat9 = u_xlat9 + _RootColorOffset;
#ifdef UNITY_ADRENO_ES3
    u_xlat9 = min(max(u_xlat9, 0.0), 1.0);
#else
    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz + u_xlat2.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _BurnedColor.xyz;
    u_xlat1.xyz = u_xlat0.xxx * u_xlat2.xyz + u_xlat1.xyz;
    vs_TEXCOORD2.w = u_xlat0.x;
    u_xlat0.x = u_xlat27 + -0.600000024;
    vs_TEXCOORD3 = u_xlat27;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = _GrassTipLighting * u_xlat0.x + 1.0;
    vs_TEXCOORD2.xyz = u_xlat0.xxx * u_xlat1.xyz;
    vs_TEXCOORD4.xy = in_TEXCOORD2.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	float _GrassShininess;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	float _CutOff;
uniform 	vec4 _BurnedColor;
uniform lowp sampler2D _MainTex;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp float vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec4 u_xlat0;
lowp vec4 u_xlat10_0;
bool u_xlatb0;
vec3 u_xlat1;
mediump float u_xlat16_2;
float u_xlat9;
bool u_xlatb9;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD4.xy);
    u_xlat9 = u_xlat10_0.w + (-_CutOff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(u_xlat9<0.0);
#else
    u_xlatb9 = u_xlat9<0.0;
#endif
    if((int(u_xlatb9) * int(0xffffffffu))!=0){discard;}
    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
    SV_Target0.xyz = u_xlat1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0;
    u_xlat1.xyz = _BurnedColor.xyz * u_xlat10_0.xyz + (-u_xlat10_0.xyz);
    u_xlat0.xyz = vs_TEXCOORD2.www * u_xlat1.xyz + u_xlat10_0.xyz;
    u_xlat0.w = vs_TEXCOORD3;
    SV_Target1 = u_xlat0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_2 = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb0) ? u_xlat16_2 : 0.0399999991;
    u_xlat0.x = (-vs_TEXCOORD2.w) + 1.0;
    u_xlat0.x = u_xlat0.x * _GrassShininess;
    SV_Target2.w = u_xlat0.x;
    SV_Target2.xy = vec2(0.0399999991, 0.0399999991);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "MHY_SHADER_MIDDLE" "DITHER_FADE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	float _NoiseScale;
uniform 	vec4 _WorldOffsetRange;
uniform 	float _HeightScale;
uniform 	float _Billboard;
uniform 	float _VegetationMoveScale;
uniform 	vec4 _LocalWindsMapSize;
uniform 	vec4 _LargeWindParam;
uniform 	vec4 _GlobalWind;
uniform 	vec4 _LocalWindsMapCameraInfo;
uniform 	float _GrassTipLighting;
uniform 	vec4 _MainTex_ST;
uniform 	float _RootColorScale;
uniform 	float _RootColorOffset;
uniform highp sampler2D _Heightmap;
uniform lowp sampler2D _Noisemap;
uniform lowp sampler2D _LocalWindsMap;
in highp vec4 in_POSITION0;
in highp vec4 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec2 in_TEXCOORD2;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp float vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec3 u_xlat0;
vec3 u_xlat1;
int u_xlati1;
vec4 u_xlat2;
bool u_xlatb2;
vec3 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
vec4 u_xlat6;
vec3 u_xlat7;
vec3 u_xlat8;
bool u_xlatb8;
vec2 u_xlat10;
vec2 u_xlat16;
vec2 u_xlat21;
float u_xlat24;
int u_xlati24;
float u_xlat25;
float u_xlat26;
void main()
{
    u_xlat0.z = 0.0;
    u_xlat1.xyz = in_TEXCOORD0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[2].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TEXCOORD0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat8.xz = u_xlat1.xz + (-_LocalWindsMapSize.xy);
    u_xlat8.xz = vec2(u_xlat8.x / _LocalWindsMapSize.z, u_xlat8.z / _LocalWindsMapSize.w);
    u_xlat8.xz = u_xlat8.xz + vec2(0.5, 0.5);
    u_xlat2 = textureLod(_LocalWindsMap, u_xlat8.xz, 0.0);
    u_xlat8.x = dot(u_xlat2.xy, u_xlat2.xy);
    u_xlat8.x = sqrt(u_xlat8.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(9.99999975e-05>=u_xlat8.x);
#else
    u_xlatb8 = 9.99999975e-05>=u_xlat8.x;
#endif
    u_xlat8.x = u_xlatb8 ? 1.0 : float(0.0);
    u_xlat3.xy = (-u_xlat2.xy) + vec2(0.5, 0.5);
    u_xlat8.xz = u_xlat8.xx * u_xlat3.xy + u_xlat2.xy;
    u_xlat8.xz = u_xlat8.xz * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat25 = dot(u_xlat8.xz, u_xlat8.xz);
    u_xlat25 = max(u_xlat25, 0.00100000005);
    u_xlat3.x = inversesqrt(u_xlat25);
    u_xlat3.yz = u_xlat8.xz * u_xlat3.xx;
    u_xlat0.x = u_xlat3.z;
    u_xlat0.xz = (-u_xlat3.xy) * vec2(0.0, 1.0) + u_xlat0.xz;
    u_xlat25 = (-in_TEXCOORD1.x) + hlslcc_mtx4x4unity_ObjectToWorld[1].x;
    u_xlat2.x = u_xlat25 * 3.0;
    u_xlat2.x = _Time.y * 3.0 + u_xlat2.x;
    u_xlat2.x = u_xlat2.x + 0.5;
    u_xlat2.x = fract(u_xlat2.x);
    u_xlat2.x = u_xlat2.x * 2.0 + -1.0;
    u_xlat10.x = abs(u_xlat2.x) * abs(u_xlat2.x);
    u_xlat2.x = -abs(u_xlat2.x) * 2.0 + 3.0;
    u_xlat2.x = u_xlat2.x * u_xlat10.x;
    u_xlat10.x = u_xlat2.z * 1.5;
    u_xlat2.x = u_xlat10.x * u_xlat2.x;
    u_xlat0.xz = u_xlat0.xz * u_xlat2.xx;
    u_xlat0.xz = u_xlat0.xz * vec2(0.150000006, 0.150000006);
    u_xlat0.xz = u_xlat3.yz * u_xlat2.xx + u_xlat0.xz;
    u_xlat0.xz = u_xlat0.xz + u_xlat8.xz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(0.00199999986<u_xlat2.z);
#else
    u_xlatb2 = 0.00199999986<u_xlat2.z;
#endif
    u_xlat10.x = (-u_xlat2.w) * _LocalWindsMapCameraInfo.y + _LocalWindsMapCameraInfo.x;
    u_xlat0.xy = (bool(u_xlatb2)) ? u_xlat0.xz : u_xlat8.xz;
    u_xlat16.xy = vec2(_WorldOffsetRange.z + float(2.0), _WorldOffsetRange.w + float(2.0));
    u_xlat2.xz = u_xlat1.xz + (-_WorldOffsetRange.xy);
    u_xlat2.xz = u_xlat2.xz + vec2(1.0, 1.0);
    u_xlat16.xy = u_xlat2.xz / u_xlat16.xy;
    u_xlat16.x = textureLod(_Heightmap, u_xlat16.xy, 0.0).x;
    u_xlat24 = u_xlat16.x * _HeightScale + u_xlat1.y;
    u_xlat24 = (-u_xlat24) + u_xlat10.x;
    u_xlat24 = u_xlat24 * 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat24 = (-u_xlat24) + 1.0;
    u_xlat2.x = fract(u_xlat25);
    u_xlat25 = u_xlat25 + hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat10.xy = vec2(u_xlat25) * vec2(22.0, 33.0);
    u_xlat10.xy = fract(u_xlat10.xy);
    u_xlat10.xy = u_xlat10.xy + vec2(-0.5, -0.5);
    u_xlat3.xz = u_xlat10.xy * vec2(0.200000003, 0.200000003);
    u_xlat25 = u_xlat2.x + -0.5;
    u_xlat2.x = u_xlat25 * 0.333000004;
    u_xlat4.y = u_xlat25 * 0.333000004 + -1.0;
    u_xlat25 = in_TEXCOORD1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat25 = min(max(u_xlat25, 0.0), 1.0);
#else
    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
#endif
    u_xlat2.x = u_xlat2.x * u_xlat25;
    u_xlat24 = u_xlat24 * u_xlat2.x;
    u_xlat0.xy = vec2(u_xlat24) * u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(vec2(_VegetationMoveScale, _VegetationMoveScale));
    u_xlat24 = dot(_GlobalWind.xyz, _GlobalWind.xyz);
    u_xlat24 = max(u_xlat24, 0.00100000005);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat5 = vec4(u_xlat24) * _GlobalWind.xzxz;
    u_xlat10.xy = vec2(u_xlat5.z * _LargeWindParam.z, u_xlat5.w * _LargeWindParam.z);
    u_xlat21.xy = u_xlat1.xz / vec2(_NoiseScale);
    u_xlat5.xy = _LargeWindParam.xx * u_xlat5.xy + u_xlat21.xy;
    u_xlat5.xy = textureLod(_Noisemap, u_xlat5.xy, 0.0).xy;
    u_xlat5.xy = u_xlat5.xy + vec2(-0.5, -0.5);
    u_xlat5.xy = u_xlat5.xy * _LargeWindParam.yy + vec2(0.5, 0.5);
    u_xlat5.xy = u_xlat2.xx * u_xlat5.xy;
    u_xlat6.xz = u_xlat5.xy * u_xlat10.xy + u_xlat0.xy;
    u_xlat10.xy = u_xlat10.xy * u_xlat5.xy;
    u_xlat6.y = 0.0;
    u_xlat5.y = hlslcc_mtx4x4unity_MatrixV[0].x;
    u_xlat5.x = hlslcc_mtx4x4unity_MatrixV[2].x;
    u_xlat24 = dot(u_xlat5.xy, u_xlat5.xy);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat5.xy = vec2(u_xlat24) * u_xlat5.xy;
    u_xlat7.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;
    u_xlat7.y = hlslcc_mtx4x4unity_ObjectToWorld[2].x;
    u_xlat24 = dot(u_xlat7.xy, u_xlat7.xy);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat21.xy = vec2(u_xlat24) * u_xlat7.xy;
    u_xlat7.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat7.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat7.xyz;
    u_xlat7.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat7.xyz;
    u_xlat7.xyz = u_xlat7.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat7.xyz = (-u_xlat1.xyz) + u_xlat7.xyz;
    u_xlat24 = u_xlat21.y * u_xlat7.z;
    u_xlat24 = u_xlat7.x * u_xlat21.x + (-u_xlat24);
    u_xlat26 = dot(u_xlat7.zx, u_xlat21.xy);
    u_xlat21.xy = u_xlat5.xy * vec2(u_xlat26);
    u_xlat26 = u_xlat24 * u_xlat5.y + (-u_xlat21.x);
    u_xlat24 = u_xlat24 * u_xlat5.x + u_xlat21.y;
    u_xlat24 = u_xlat7.z + u_xlat24;
    u_xlat7.z = (-u_xlat24) * _Billboard + u_xlat7.z;
    u_xlat24 = u_xlat7.x + u_xlat26;
    u_xlat7.x = (-u_xlat24) * _Billboard + u_xlat7.x;
    u_xlat24 = u_xlat2.x * u_xlat7.y;
    u_xlat2.x = max(u_xlat2.x, 9.99999972e-10);
    u_xlat5.xyz = u_xlat7.xyz * vec3(0.100000001, 1.0, 0.100000001) + u_xlat6.xyz;
    u_xlat26 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat26 = max(u_xlat26, 0.00100000005);
    u_xlat26 = inversesqrt(u_xlat26);
    u_xlat5.xyz = vec3(u_xlat26) * u_xlat5.xyz;
    u_xlat26 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat26 = sqrt(u_xlat26);
    u_xlat6.xyz = u_xlat7.xyz * vec3(0.100000001, 1.0, 0.100000001);
    u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat26) + (-u_xlat6.xyz);
    u_xlat6.xyz = u_xlat1.xyz + u_xlat7.xyz;
    u_xlat6.w = u_xlat16.x * _HeightScale + u_xlat6.y;
    u_xlat1.xyz = u_xlat5.xyz + u_xlat6.xwz;
    u_xlat1.xyz = vec3(u_xlat24) * vec3(-0.5, 0.0, -0.5) + u_xlat1.xyz;
    u_xlat4.xz = u_xlat4.yy * (-u_xlat4.yy);
    u_xlat1.xyz = u_xlat4.xyz * u_xlat7.xyz + u_xlat1.xyz;
    u_xlat4.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat5 = u_xlat4.yyyy * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat5 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat4.xxxx + u_xlat5;
    u_xlat4 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat4.zzzz + u_xlat5;
    gl_Position = u_xlat4 + hlslcc_mtx4x4unity_MatrixVPZero[3];
    u_xlat3.y = 0.0;
    vs_TEXCOORD0.xyz = u_xlat3.xyz + vec3(-1.0, 0.0, -1.0);
    vs_TEXCOORD0.w = 0.0;
    u_xlat0.xy = u_xlat0.yx / u_xlat2.xx;
    u_xlat16.xy = u_xlat10.yx / u_xlat2.xx;
    u_xlat0.xy = u_xlat0.xy + u_xlat16.xy;
    u_xlat0.yz = u_xlat0.xy + vec2(-1.0, -1.0);
    u_xlat24 = dot(u_xlat0.yz, u_xlat0.yz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat0.x = 0.0;
    u_xlat0.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    u_xlat2.xyz = in_NORMAL0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_NORMAL0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_NORMAL0.zzz + u_xlat2.xyz;
    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat0.xyz * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat0.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat0.xyz * u_xlat2.xyz;
    u_xlat0.xyz = u_xlat2.zxy * u_xlat0.yzx + (-u_xlat3.xyz);
    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
    u_xlat24 = dot(u_xlat1.xyz, u_xlat0.xyz);
#ifdef UNITY_ADRENO_ES3
    { bool cond = 0.0<u_xlat24; u_xlati1 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati1 = int((0.0<u_xlat24) ? 0xFFFFFFFFu : uint(0u));
#endif
#ifdef UNITY_ADRENO_ES3
    { bool cond = u_xlat24<0.0; u_xlati24 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati24 = int((u_xlat24<0.0) ? 0xFFFFFFFFu : uint(0u));
#endif
    u_xlati24 = (-u_xlati1) + u_xlati24;
    u_xlat24 = float(u_xlati24);
    vs_TEXCOORD1.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    vs_TEXCOORD1.w = 0.0;
    u_xlat0.x = u_xlat25 / _RootColorScale;
    u_xlat0.x = u_xlat0.x + _RootColorOffset;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xxx * vec3(-0.501960814, 0.0, 0.0) + vec3(0.501960814, 0.0, 0.0);
    u_xlat24 = u_xlat25 + -0.600000024;
    vs_TEXCOORD3 = u_xlat25;
    u_xlat24 = max(u_xlat24, 0.0);
    u_xlat24 = _GrassTipLighting * u_xlat24 + 1.0;
    vs_TEXCOORD2.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    vs_TEXCOORD2.w = 0.0;
    vs_TEXCOORD4.xy = in_TEXCOORD2.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	float _GrassShininess;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	float _CutOff;
uniform 	vec4 _BurnedColor;
uniform lowp sampler2D _MainTex;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp float vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec4 u_xlat0;
lowp vec4 u_xlat10_0;
bool u_xlatb0;
vec3 u_xlat1;
mediump float u_xlat16_2;
float u_xlat9;
bool u_xlatb9;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD4.xy);
    u_xlat9 = u_xlat10_0.w + (-_CutOff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(u_xlat9<0.0);
#else
    u_xlatb9 = u_xlat9<0.0;
#endif
    if((int(u_xlatb9) * int(0xffffffffu))!=0){discard;}
    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
    SV_Target0.xyz = u_xlat1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0;
    u_xlat1.xyz = _BurnedColor.xyz * u_xlat10_0.xyz + (-u_xlat10_0.xyz);
    u_xlat0.xyz = vs_TEXCOORD2.www * u_xlat1.xyz + u_xlat10_0.xyz;
    u_xlat0.w = vs_TEXCOORD3;
    SV_Target1 = u_xlat0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_2 = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb0) ? u_xlat16_2 : 0.0399999991;
    u_xlat0.x = (-vs_TEXCOORD2.w) + 1.0;
    u_xlat0.x = u_xlat0.x * _GrassShininess;
    SV_Target2.w = u_xlat0.x;
    SV_Target2.xy = vec2(0.0399999991, 0.0399999991);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "MHY_SHADER_MIDDLE" "DITHER_FADE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	int unity_BaseInstanceID;
uniform 	float _NoiseScale;
uniform 	vec4 _WorldOffsetRange;
uniform 	float _HeightScale;
uniform 	float _Billboard;
uniform 	float _VegetationMoveScale;
uniform 	vec4 _LocalWindsMapSize;
uniform 	vec4 _LargeWindParam;
uniform 	vec4 _GlobalWind;
uniform 	vec4 _LocalWindsMapCameraInfo;
uniform 	float _GrassTipLighting;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BurnedColor;
uniform 	float _RootColorScale;
uniform 	float _RootColorOffset;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _Heightmap;
uniform lowp sampler2D _Noisemap;
uniform lowp sampler2D _LocalWindsMap;
in highp vec4 in_POSITION0;
in highp vec4 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec2 in_TEXCOORD2;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp float vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec3 u_xlat0;
int u_xlati0;
vec3 u_xlat1;
uvec3 u_xlatu1;
vec4 u_xlat2;
uvec3 u_xlatu2;
vec3 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
uvec2 u_xlatu5;
vec4 u_xlat6;
vec3 u_xlat7;
vec2 u_xlat8;
float u_xlat9;
int u_xlati9;
float u_xlat11;
uint u_xlatu11;
int u_xlati18;
float u_xlat20;
vec2 u_xlat23;
float u_xlat27;
bool u_xlatb27;
float u_xlat28;
uint u_xlatu28;
bool u_xlatb28;
float u_xlat29;
bool u_xlatb29;
float u_xlat30;
void main()
{
    u_xlat0.z = 0.0;
    u_xlati9 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati9 = u_xlati9 << 2;
    u_xlat1.xyz = in_TEXCOORD0.yyy * unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_TEXCOORD0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat2.xy = u_xlat1.xz + (-_LocalWindsMapSize.xy);
    u_xlat2.xy = vec2(u_xlat2.x / _LocalWindsMapSize.z, u_xlat2.y / _LocalWindsMapSize.w);
    u_xlat2.xy = u_xlat2.xy + vec2(0.5, 0.5);
    u_xlat2 = textureLod(_LocalWindsMap, u_xlat2.xy, 0.0);
    u_xlat27 = dot(u_xlat2.xy, u_xlat2.xy);
    u_xlat27 = sqrt(u_xlat27);
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(9.99999975e-05>=u_xlat27);
#else
    u_xlatb27 = 9.99999975e-05>=u_xlat27;
#endif
    u_xlat27 = u_xlatb27 ? 1.0 : float(0.0);
    u_xlat3.xy = (-u_xlat2.xy) + vec2(0.5, 0.5);
    u_xlat2.xy = vec2(u_xlat27) * u_xlat3.xy + u_xlat2.xy;
    u_xlat2.xy = u_xlat2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat27 = dot(u_xlat2.xy, u_xlat2.xy);
    u_xlat27 = max(u_xlat27, 0.00100000005);
    u_xlat3.x = inversesqrt(u_xlat27);
    u_xlat3.yz = u_xlat2.xy * u_xlat3.xx;
    u_xlat0.x = u_xlat3.z;
    u_xlat0.xz = (-u_xlat3.xy) * vec2(0.0, 1.0) + u_xlat0.xz;
    u_xlat27 = (-in_TEXCOORD1.x) + unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].x;
    u_xlat28 = u_xlat27 * 3.0;
    u_xlat28 = _Time.y * 3.0 + u_xlat28;
    u_xlat28 = u_xlat28 + 0.5;
    u_xlat28 = fract(u_xlat28);
    u_xlat28 = u_xlat28 * 2.0 + -1.0;
    u_xlat3.x = abs(u_xlat28) * abs(u_xlat28);
    u_xlat28 = -abs(u_xlat28) * 2.0 + 3.0;
    u_xlat28 = u_xlat28 * u_xlat3.x;
    u_xlat3.x = u_xlat2.z * 1.5;
    u_xlat28 = u_xlat28 * u_xlat3.x;
    u_xlat0.xz = u_xlat0.xz * vec2(u_xlat28);
    u_xlat0.xz = u_xlat0.xz * vec2(0.150000006, 0.150000006);
    u_xlat0.xz = u_xlat3.yz * vec2(u_xlat28) + u_xlat0.xz;
    u_xlat0.xz = u_xlat0.xz + u_xlat2.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlatb28 = !!(0.00199999986<u_xlat2.z);
#else
    u_xlatb28 = 0.00199999986<u_xlat2.z;
#endif
    u_xlat20 = (-u_xlat2.w) * _LocalWindsMapCameraInfo.y + _LocalWindsMapCameraInfo.x;
    u_xlat0.xz = (bool(u_xlatb28)) ? u_xlat0.xz : u_xlat2.xy;
    u_xlat2.xy = vec2(_WorldOffsetRange.z + float(2.0), _WorldOffsetRange.w + float(2.0));
    u_xlat3.xy = u_xlat1.xz + (-_WorldOffsetRange.xy);
    u_xlat3.xy = u_xlat3.xy + vec2(1.0, 1.0);
    u_xlat2.xy = u_xlat3.xy / u_xlat2.xy;
    u_xlat28 = textureLod(_Heightmap, u_xlat2.xy, 0.0).x;
    u_xlat2.x = u_xlat28 * _HeightScale + u_xlat1.y;
    u_xlat2.x = (-u_xlat2.x) + u_xlat20;
    u_xlat2.x = u_xlat2.x * 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat2.x = (-u_xlat2.x) + 1.0;
    u_xlat11 = float(floatBitsToUint(unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2]).w);
    u_xlat11 = u_xlat11 * 5.96046448e-08;
    u_xlatu11 = uint(u_xlat11);
    u_xlatu11 = u_xlatu11 & 3u;
    u_xlat11 = float(u_xlatu11);
    u_xlat20 = fract(u_xlat27);
    u_xlat27 = u_xlat27 + unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].y;
    u_xlat3.xy = vec2(u_xlat27) * vec2(22.0, 33.0);
    u_xlat3.xy = fract(u_xlat3.xy);
    u_xlat3.xy = u_xlat3.xy + vec2(-0.5, -0.5);
    u_xlat3.xz = u_xlat3.xy * vec2(0.200000003, 0.200000003);
    u_xlat27 = u_xlat11 + u_xlat20;
    u_xlat27 = u_xlat27 + -0.5;
    u_xlat11 = u_xlat27 * 0.333000004;
    u_xlat4.y = u_xlat27 * 0.333000004 + -1.0;
    u_xlat27 = in_TEXCOORD1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
    u_xlat11 = u_xlat11 * u_xlat27;
    u_xlat2.x = u_xlat11 * u_xlat2.x;
    u_xlat0.xz = u_xlat0.xz * u_xlat2.xx;
    u_xlat0.xz = u_xlat0.xz * vec2(vec2(_VegetationMoveScale, _VegetationMoveScale));
    u_xlat2.x = dot(_GlobalWind.xyz, _GlobalWind.xyz);
    u_xlat2.x = max(u_xlat2.x, 0.00100000005);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat5 = u_xlat2.xxxx * _GlobalWind.xzxz;
    u_xlat2.xz = vec2(u_xlat5.z * _LargeWindParam.z, u_xlat5.w * _LargeWindParam.z);
    u_xlat23.xy = u_xlat1.xz / vec2(_NoiseScale);
    u_xlat5.xy = _LargeWindParam.xx * u_xlat5.xy + u_xlat23.xy;
    u_xlat5.xy = textureLod(_Noisemap, u_xlat5.xy, 0.0).xy;
    u_xlat5.xy = u_xlat5.xy + vec2(-0.5, -0.5);
    u_xlat5.xy = u_xlat5.xy * _LargeWindParam.yy + vec2(0.5, 0.5);
    u_xlat5.xy = vec2(u_xlat11) * u_xlat5.xy;
    u_xlat6.xz = u_xlat5.xy * u_xlat2.xz + u_xlat0.xz;
    u_xlat2.xz = u_xlat2.xz * u_xlat5.xy;
    u_xlat6.y = 0.0;
    u_xlat5.y = hlslcc_mtx4x4unity_MatrixV[0].x;
    u_xlat5.x = hlslcc_mtx4x4unity_MatrixV[2].x;
    u_xlat29 = dot(u_xlat5.xy, u_xlat5.xy);
    u_xlat29 = inversesqrt(u_xlat29);
    u_xlat5.xy = vec2(u_xlat29) * u_xlat5.xy;
    u_xlat7.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat7.xyz = unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat7.xyz;
    u_xlat7.xyz = unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat7.xyz;
    u_xlat7.xyz = u_xlat7.xyz + unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat7.xyz = (-u_xlat1.xyz) + u_xlat7.xyz;
    u_xlat8.x = unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].x;
    u_xlat8.y = unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].x;
    u_xlat29 = dot(u_xlat8.xy, u_xlat8.xy);
    u_xlat29 = inversesqrt(u_xlat29);
    u_xlat23.xy = vec2(u_xlat29) * u_xlat8.xy;
    u_xlat29 = u_xlat23.y * u_xlat7.z;
    u_xlat29 = u_xlat7.x * u_xlat23.x + (-u_xlat29);
    u_xlat30 = dot(u_xlat7.zx, u_xlat23.xy);
    u_xlat23.xy = u_xlat5.xy * vec2(u_xlat30);
    u_xlat30 = u_xlat29 * u_xlat5.y + (-u_xlat23.x);
    u_xlat29 = u_xlat29 * u_xlat5.x + u_xlat23.y;
    u_xlat29 = u_xlat7.z + u_xlat29;
    u_xlat7.z = (-u_xlat29) * _Billboard + u_xlat7.z;
    u_xlat29 = u_xlat7.x + u_xlat30;
    u_xlat7.x = (-u_xlat29) * _Billboard + u_xlat7.x;
    u_xlat5.xyz = u_xlat7.xyz * vec3(0.100000001, 1.0, 0.100000001) + u_xlat6.xyz;
    u_xlat29 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat29 = max(u_xlat29, 0.00100000005);
    u_xlat29 = inversesqrt(u_xlat29);
    u_xlat5.xyz = vec3(u_xlat29) * u_xlat5.xyz;
    u_xlat29 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat29 = sqrt(u_xlat29);
    u_xlat6.xyz = u_xlat7.xyz * vec3(0.100000001, 1.0, 0.100000001);
    u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat29) + (-u_xlat6.xyz);
    u_xlat6.xyz = u_xlat1.xyz + u_xlat7.xyz;
    u_xlat6.w = u_xlat28 * _HeightScale + u_xlat6.y;
    u_xlat1.xyz = u_xlat5.xyz + u_xlat6.xwz;
    u_xlatu5.xy = uvec2(65280u, 255u) & floatBitsToUint(unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1]).ww;
    u_xlat5.xy = vec2(u_xlatu5.xy);
    u_xlat28 = u_xlat5.x * 0.00390625;
    u_xlat5.z = u_xlat5.y + -127.0;
    u_xlatu28 = uint(u_xlat28);
    u_xlat28 = float(u_xlatu28);
    u_xlat5.x = u_xlat28 + -127.0;
    u_xlat6.xy = u_xlat5.xz * vec2(0.00787401572, 0.00787401572);
    u_xlat6.xy = u_xlat6.xy * u_xlat6.xy;
    u_xlat28 = u_xlat6.y + u_xlat6.x;
    u_xlat28 = (-u_xlat28) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb29 = !!(0.0<u_xlat28);
#else
    u_xlatb29 = 0.0<u_xlat28;
#endif
    u_xlat28 = sqrt(u_xlat28);
    u_xlat5.y = u_xlatb29 ? u_xlat28 : float(0.0);
    u_xlat6.xyz = u_xlat5.xyz * u_xlat7.yyy;
    u_xlat6.xyz = vec3(u_xlat11) * u_xlat6.xyz;
    u_xlat28 = max(u_xlat11, 9.99999972e-10);
    u_xlat1.xyz = u_xlat6.xyz * vec3(0.00393700786, 0.0, 0.00393700786) + u_xlat1.xyz;
    u_xlat4.xz = u_xlat4.yy * (-u_xlat4.yy);
    u_xlat1.xyz = u_xlat4.xyz * u_xlat7.xyz + u_xlat1.xyz;
    u_xlat4.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat6 = u_xlat4.yyyy * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat6 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat4.xxxx + u_xlat6;
    u_xlat4 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat4.zzzz + u_xlat6;
    gl_Position = u_xlat4 + hlslcc_mtx4x4unity_MatrixVPZero[3];
    u_xlat3.y = 0.0;
    vs_TEXCOORD0.xyz = u_xlat5.xyz * vec3(0.00787401572, 1.0, 0.00787401572) + u_xlat3.xyz;
    vs_TEXCOORD0.w = 0.0;
    u_xlat0.xz = u_xlat0.zx / vec2(u_xlat28);
    u_xlat2.xy = u_xlat2.zx / vec2(u_xlat28);
    u_xlat2.yz = u_xlat0.xz + u_xlat2.xy;
    u_xlat2.x = 0.0;
    u_xlat2.xyz = u_xlat5.yzx * vec3(1.0, 0.00787401572, 0.00787401572) + u_xlat2.xyz;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat3.xyz = in_NORMAL0.yyy * unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_NORMAL0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_NORMAL0.zzz + u_xlat3.xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
    u_xlat3.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
    u_xlat2.xyz = u_xlat3.zxy * u_xlat2.yzx + (-u_xlat4.xyz);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
    { bool cond = 0.0<u_xlat0.x; u_xlati18 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati18 = int((0.0<u_xlat0.x) ? 0xFFFFFFFFu : uint(0u));
#endif
#ifdef UNITY_ADRENO_ES3
    { bool cond = u_xlat0.x<0.0; u_xlati0 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati0 = int((u_xlat0.x<0.0) ? 0xFFFFFFFFu : uint(0u));
#endif
    u_xlati0 = (-u_xlati18) + u_xlati0;
    u_xlat0.x = float(u_xlati0);
    vs_TEXCOORD1.xyz = u_xlat0.xxx * u_xlat2.xyz;
    vs_TEXCOORD1.w = 0.0;
    u_xlatu1.xyz = uvec3(16711680u, 65280u, 255u) & floatBitsToUint(unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2]).www;
    u_xlat1.xyz = vec3(u_xlatu1.xyz);
    u_xlatu2.xyz = uvec3(16711680u, 65280u, 255u) & floatBitsToUint(unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3]).www;
    u_xlat0.x = max(1.0, unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].w);
    u_xlat0.x = min(u_xlat0.x, 2.0);
    u_xlat0.x = u_xlat0.x + -1.0;
    u_xlat2.xyz = vec3(u_xlatu2.xyz);
    u_xlat2.xyz = u_xlat2.xyz * vec3(5.9838392e-08, 1.53186284e-05, 0.00392156886);
    u_xlat1.xyz = u_xlat1.xyz * vec3(5.9838392e-08, 1.53186284e-05, 0.00392156886) + (-u_xlat2.xyz);
    u_xlat9 = u_xlat27 / _RootColorScale;
    u_xlat9 = u_xlat9 + _RootColorOffset;
#ifdef UNITY_ADRENO_ES3
    u_xlat9 = min(max(u_xlat9, 0.0), 1.0);
#else
    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz + u_xlat2.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _BurnedColor.xyz;
    u_xlat1.xyz = u_xlat0.xxx * u_xlat2.xyz + u_xlat1.xyz;
    vs_TEXCOORD2.w = u_xlat0.x;
    u_xlat0.x = u_xlat27 + -0.600000024;
    vs_TEXCOORD3 = u_xlat27;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = _GrassTipLighting * u_xlat0.x + 1.0;
    vs_TEXCOORD2.xyz = u_xlat0.xxx * u_xlat1.xyz;
    vs_TEXCOORD4.xy = in_TEXCOORD2.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	float _GrassShininess;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	float _CutOff;
uniform 	vec4 _BurnedColor;
uniform lowp sampler2D _MainTex;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp float vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec4 u_xlat0;
lowp vec4 u_xlat10_0;
bool u_xlatb0;
vec3 u_xlat1;
mediump float u_xlat16_2;
float u_xlat9;
bool u_xlatb9;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD4.xy);
    u_xlat9 = u_xlat10_0.w + (-_CutOff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(u_xlat9<0.0);
#else
    u_xlatb9 = u_xlat9<0.0;
#endif
    if((int(u_xlatb9) * int(0xffffffffu))!=0){discard;}
    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
    SV_Target0.xyz = u_xlat1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0;
    u_xlat1.xyz = _BurnedColor.xyz * u_xlat10_0.xyz + (-u_xlat10_0.xyz);
    u_xlat0.xyz = vs_TEXCOORD2.www * u_xlat1.xyz + u_xlat10_0.xyz;
    u_xlat0.w = vs_TEXCOORD3;
    SV_Target1 = u_xlat0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_2 = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb0) ? u_xlat16_2 : 0.0399999991;
    u_xlat0.x = (-vs_TEXCOORD2.w) + 1.0;
    u_xlat0.x = u_xlat0.x * _GrassShininess;
    SV_Target2.w = u_xlat0.x;
    SV_Target2.xy = vec2(0.0399999991, 0.0399999991);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "MHY_SHADER_MIDDLE" "SOFT_SAMPLE_HEIGHT_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	float _NoiseScale;
uniform 	vec4 _WorldOffsetRange;
uniform 	float _HeightScale;
uniform 	float _Billboard;
uniform 	float _VegetationMoveScale;
uniform 	vec4 _LocalWindsMapSize;
uniform 	vec4 _LargeWindParam;
uniform 	vec4 _GlobalWind;
uniform 	vec4 _LocalWindsMapCameraInfo;
uniform 	float _GrassTipLighting;
uniform 	vec4 _MainTex_ST;
uniform 	float _RootColorScale;
uniform 	float _RootColorOffset;
uniform highp sampler2D _Heightmap;
uniform lowp sampler2D _Noisemap;
uniform lowp sampler2D _LocalWindsMap;
in highp vec4 in_POSITION0;
in highp vec4 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec2 in_TEXCOORD2;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp float vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec3 u_xlat0;
vec3 u_xlat1;
int u_xlati1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
vec4 u_xlat6;
vec3 u_xlat7;
vec3 u_xlat8;
bool u_xlatb8;
vec2 u_xlat10;
vec2 u_xlat16;
float u_xlat18;
vec2 u_xlat21;
float u_xlat24;
int u_xlati24;
float u_xlat25;
float u_xlat26;
void main()
{
    u_xlat0.z = 0.0;
    u_xlat1.xyz = in_TEXCOORD0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[2].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TEXCOORD0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat8.xz = u_xlat1.xz + (-_LocalWindsMapSize.xy);
    u_xlat8.xz = vec2(u_xlat8.x / _LocalWindsMapSize.z, u_xlat8.z / _LocalWindsMapSize.w);
    u_xlat8.xz = u_xlat8.xz + vec2(0.5, 0.5);
    u_xlat2 = textureLod(_LocalWindsMap, u_xlat8.xz, 0.0);
    u_xlat8.x = dot(u_xlat2.xy, u_xlat2.xy);
    u_xlat8.x = sqrt(u_xlat8.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(9.99999975e-05>=u_xlat8.x);
#else
    u_xlatb8 = 9.99999975e-05>=u_xlat8.x;
#endif
    u_xlat8.x = u_xlatb8 ? 1.0 : float(0.0);
    u_xlat3.xy = (-u_xlat2.xy) + vec2(0.5, 0.5);
    u_xlat8.xz = u_xlat8.xx * u_xlat3.xy + u_xlat2.xy;
    u_xlat8.xz = u_xlat8.xz * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat25 = dot(u_xlat8.xz, u_xlat8.xz);
    u_xlat25 = max(u_xlat25, 0.00100000005);
    u_xlat3.x = inversesqrt(u_xlat25);
    u_xlat3.yz = u_xlat8.xz * u_xlat3.xx;
    u_xlat0.x = u_xlat3.z;
    u_xlat0.xz = (-u_xlat3.xy) * vec2(0.0, 1.0) + u_xlat0.xz;
    u_xlat25 = (-in_TEXCOORD1.x) + hlslcc_mtx4x4unity_ObjectToWorld[1].x;
    u_xlat2.x = u_xlat25 * 3.0;
    u_xlat2.x = _Time.y * 3.0 + u_xlat2.x;
    u_xlat2.x = u_xlat2.x + 0.5;
    u_xlat2.x = fract(u_xlat2.x);
    u_xlat2.x = u_xlat2.x * 2.0 + -1.0;
    u_xlat10.x = abs(u_xlat2.x) * abs(u_xlat2.x);
    u_xlat2.x = -abs(u_xlat2.x) * 2.0 + 3.0;
    u_xlat2.x = u_xlat2.x * u_xlat10.x;
    u_xlat10.x = u_xlat2.z * 1.5;
    u_xlat2.x = u_xlat10.x * u_xlat2.x;
    u_xlat0.xz = u_xlat0.xz * u_xlat2.xx;
    u_xlat0.xz = u_xlat0.xz * vec2(0.150000006, 0.150000006);
    u_xlat0.xz = u_xlat3.yz * u_xlat2.xx + u_xlat0.xz;
    u_xlat0.xz = u_xlat0.xz + u_xlat8.xz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(0.00199999986<u_xlat2.z);
#else
    u_xlatb2 = 0.00199999986<u_xlat2.z;
#endif
    u_xlat10.x = (-u_xlat2.w) * _LocalWindsMapCameraInfo.y + _LocalWindsMapCameraInfo.x;
    u_xlat0.xy = (bool(u_xlatb2)) ? u_xlat0.xz : u_xlat8.xz;
    u_xlat16.xy = vec2(_WorldOffsetRange.z + float(2.0), _WorldOffsetRange.w + float(2.0));
    u_xlat2.xz = u_xlat1.xz + (-_WorldOffsetRange.xy);
    u_xlat2.xz = u_xlat2.xz + vec2(1.0, 1.0);
    u_xlat16.xy = u_xlat2.xz / u_xlat16.xy;
    u_xlat16.xy = u_xlat16.xy * _WorldOffsetRange.zw + vec2(-0.5, -0.5);
    u_xlat2.xz = floor(u_xlat16.xy);
    u_xlat16.xy = u_xlat16.xy + (-u_xlat2.xz);
    u_xlat3 = u_xlat2.xzxz + vec4(0.5, 1.5, 1.5, 1.5);
    u_xlat4 = u_xlat2.xzxz + vec4(1.5, 0.5, 0.5, 0.5);
    u_xlat4 = vec4(u_xlat4.x / _WorldOffsetRange.z, u_xlat4.y / _WorldOffsetRange.w, u_xlat4.z / _WorldOffsetRange.z, u_xlat4.w / _WorldOffsetRange.w);
    u_xlat3 = vec4(u_xlat3.x / _WorldOffsetRange.z, u_xlat3.y / _WorldOffsetRange.w, u_xlat3.z / _WorldOffsetRange.z, u_xlat3.w / _WorldOffsetRange.w);
    u_xlat2.x = textureLod(_Heightmap, u_xlat3.zw, 0.0).x;
    u_xlat18 = textureLod(_Heightmap, u_xlat3.xy, 0.0).x;
    u_xlat2.x = (-u_xlat18) + u_xlat2.x;
    u_xlat2.x = u_xlat16.x * u_xlat2.x + u_xlat18;
    u_xlat18 = textureLod(_Heightmap, u_xlat4.xy, 0.0).x;
    u_xlat26 = textureLod(_Heightmap, u_xlat4.zw, 0.0).x;
    u_xlat18 = (-u_xlat26) + u_xlat18;
    u_xlat16.x = u_xlat16.x * u_xlat18 + u_xlat26;
    u_xlat2.x = (-u_xlat16.x) + u_xlat2.x;
    u_xlat16.x = u_xlat16.y * u_xlat2.x + u_xlat16.x;
    u_xlat24 = u_xlat16.x * _HeightScale + u_xlat1.y;
    u_xlat24 = (-u_xlat24) + u_xlat10.x;
    u_xlat24 = u_xlat24 * 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat24 = (-u_xlat24) + 1.0;
    u_xlat2.x = fract(u_xlat25);
    u_xlat25 = u_xlat25 + hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat10.xy = vec2(u_xlat25) * vec2(22.0, 33.0);
    u_xlat10.xy = fract(u_xlat10.xy);
    u_xlat10.xy = u_xlat10.xy + vec2(-0.5, -0.5);
    u_xlat3.xz = u_xlat10.xy * vec2(0.200000003, 0.200000003);
    u_xlat25 = u_xlat2.x + -0.5;
    u_xlat2.x = u_xlat25 * 0.333000004;
    u_xlat4.y = u_xlat25 * 0.333000004 + -1.0;
    u_xlat25 = in_TEXCOORD1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat25 = min(max(u_xlat25, 0.0), 1.0);
#else
    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
#endif
    u_xlat2.x = u_xlat2.x * u_xlat25;
    u_xlat24 = u_xlat24 * u_xlat2.x;
    u_xlat0.xy = vec2(u_xlat24) * u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(vec2(_VegetationMoveScale, _VegetationMoveScale));
    u_xlat24 = dot(_GlobalWind.xyz, _GlobalWind.xyz);
    u_xlat24 = max(u_xlat24, 0.00100000005);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat5 = vec4(u_xlat24) * _GlobalWind.xzxz;
    u_xlat10.xy = vec2(u_xlat5.z * _LargeWindParam.z, u_xlat5.w * _LargeWindParam.z);
    u_xlat21.xy = u_xlat1.xz / vec2(_NoiseScale);
    u_xlat5.xy = _LargeWindParam.xx * u_xlat5.xy + u_xlat21.xy;
    u_xlat5.xy = textureLod(_Noisemap, u_xlat5.xy, 0.0).xy;
    u_xlat5.xy = u_xlat5.xy + vec2(-0.5, -0.5);
    u_xlat5.xy = u_xlat5.xy * _LargeWindParam.yy + vec2(0.5, 0.5);
    u_xlat5.xy = u_xlat2.xx * u_xlat5.xy;
    u_xlat6.xz = u_xlat5.xy * u_xlat10.xy + u_xlat0.xy;
    u_xlat10.xy = u_xlat10.xy * u_xlat5.xy;
    u_xlat6.y = 0.0;
    u_xlat5.y = hlslcc_mtx4x4unity_MatrixV[0].x;
    u_xlat5.x = hlslcc_mtx4x4unity_MatrixV[2].x;
    u_xlat24 = dot(u_xlat5.xy, u_xlat5.xy);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat5.xy = vec2(u_xlat24) * u_xlat5.xy;
    u_xlat7.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;
    u_xlat7.y = hlslcc_mtx4x4unity_ObjectToWorld[2].x;
    u_xlat24 = dot(u_xlat7.xy, u_xlat7.xy);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat21.xy = vec2(u_xlat24) * u_xlat7.xy;
    u_xlat7.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat7.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat7.xyz;
    u_xlat7.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat7.xyz;
    u_xlat7.xyz = u_xlat7.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat7.xyz = (-u_xlat1.xyz) + u_xlat7.xyz;
    u_xlat24 = u_xlat21.y * u_xlat7.z;
    u_xlat24 = u_xlat7.x * u_xlat21.x + (-u_xlat24);
    u_xlat26 = dot(u_xlat7.zx, u_xlat21.xy);
    u_xlat21.xy = u_xlat5.xy * vec2(u_xlat26);
    u_xlat26 = u_xlat24 * u_xlat5.y + (-u_xlat21.x);
    u_xlat24 = u_xlat24 * u_xlat5.x + u_xlat21.y;
    u_xlat24 = u_xlat7.z + u_xlat24;
    u_xlat7.z = (-u_xlat24) * _Billboard + u_xlat7.z;
    u_xlat24 = u_xlat7.x + u_xlat26;
    u_xlat7.x = (-u_xlat24) * _Billboard + u_xlat7.x;
    u_xlat24 = u_xlat2.x * u_xlat7.y;
    u_xlat2.x = max(u_xlat2.x, 9.99999972e-10);
    u_xlat5.xyz = u_xlat7.xyz * vec3(0.100000001, 1.0, 0.100000001) + u_xlat6.xyz;
    u_xlat26 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat26 = max(u_xlat26, 0.00100000005);
    u_xlat26 = inversesqrt(u_xlat26);
    u_xlat5.xyz = vec3(u_xlat26) * u_xlat5.xyz;
    u_xlat26 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat26 = sqrt(u_xlat26);
    u_xlat6.xyz = u_xlat7.xyz * vec3(0.100000001, 1.0, 0.100000001);
    u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat26) + (-u_xlat6.xyz);
    u_xlat6.xyz = u_xlat1.xyz + u_xlat7.xyz;
    u_xlat6.w = u_xlat16.x * _HeightScale + u_xlat6.y;
    u_xlat1.xyz = u_xlat5.xyz + u_xlat6.xwz;
    u_xlat1.xyz = vec3(u_xlat24) * vec3(-0.5, 0.0, -0.5) + u_xlat1.xyz;
    u_xlat4.xz = u_xlat4.yy * (-u_xlat4.yy);
    u_xlat1.xyz = u_xlat4.xyz * u_xlat7.xyz + u_xlat1.xyz;
    u_xlat4.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat5 = u_xlat4.yyyy * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat5 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat4.xxxx + u_xlat5;
    u_xlat4 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat4.zzzz + u_xlat5;
    gl_Position = u_xlat4 + hlslcc_mtx4x4unity_MatrixVPZero[3];
    u_xlat3.y = 0.0;
    vs_TEXCOORD0.xyz = u_xlat3.xyz + vec3(-1.0, 0.0, -1.0);
    vs_TEXCOORD0.w = 0.0;
    u_xlat0.xy = u_xlat0.yx / u_xlat2.xx;
    u_xlat16.xy = u_xlat10.yx / u_xlat2.xx;
    u_xlat0.xy = u_xlat0.xy + u_xlat16.xy;
    u_xlat0.yz = u_xlat0.xy + vec2(-1.0, -1.0);
    u_xlat24 = dot(u_xlat0.yz, u_xlat0.yz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat0.x = 0.0;
    u_xlat0.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    u_xlat2.xyz = in_NORMAL0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_NORMAL0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_NORMAL0.zzz + u_xlat2.xyz;
    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat0.xyz * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat0.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat0.xyz * u_xlat2.xyz;
    u_xlat0.xyz = u_xlat2.zxy * u_xlat0.yzx + (-u_xlat3.xyz);
    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
    u_xlat24 = dot(u_xlat1.xyz, u_xlat0.xyz);
#ifdef UNITY_ADRENO_ES3
    { bool cond = 0.0<u_xlat24; u_xlati1 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati1 = int((0.0<u_xlat24) ? 0xFFFFFFFFu : uint(0u));
#endif
#ifdef UNITY_ADRENO_ES3
    { bool cond = u_xlat24<0.0; u_xlati24 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati24 = int((u_xlat24<0.0) ? 0xFFFFFFFFu : uint(0u));
#endif
    u_xlati24 = (-u_xlati1) + u_xlati24;
    u_xlat24 = float(u_xlati24);
    vs_TEXCOORD1.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    vs_TEXCOORD1.w = 0.0;
    u_xlat0.x = u_xlat25 / _RootColorScale;
    u_xlat0.x = u_xlat0.x + _RootColorOffset;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xxx * vec3(-0.501960814, 0.0, 0.0) + vec3(0.501960814, 0.0, 0.0);
    u_xlat24 = u_xlat25 + -0.600000024;
    vs_TEXCOORD3 = u_xlat25;
    u_xlat24 = max(u_xlat24, 0.0);
    u_xlat24 = _GrassTipLighting * u_xlat24 + 1.0;
    vs_TEXCOORD2.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    vs_TEXCOORD2.w = 0.0;
    vs_TEXCOORD4.xy = in_TEXCOORD2.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	float _GrassShininess;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	float _CutOff;
uniform 	vec4 _BurnedColor;
uniform lowp sampler2D _MainTex;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp float vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec4 u_xlat0;
lowp vec4 u_xlat10_0;
bool u_xlatb0;
vec3 u_xlat1;
mediump float u_xlat16_2;
float u_xlat9;
bool u_xlatb9;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD4.xy);
    u_xlat9 = u_xlat10_0.w + (-_CutOff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(u_xlat9<0.0);
#else
    u_xlatb9 = u_xlat9<0.0;
#endif
    if((int(u_xlatb9) * int(0xffffffffu))!=0){discard;}
    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
    SV_Target0.xyz = u_xlat1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0;
    u_xlat1.xyz = _BurnedColor.xyz * u_xlat10_0.xyz + (-u_xlat10_0.xyz);
    u_xlat0.xyz = vs_TEXCOORD2.www * u_xlat1.xyz + u_xlat10_0.xyz;
    u_xlat0.w = vs_TEXCOORD3;
    SV_Target1 = u_xlat0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_2 = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb0) ? u_xlat16_2 : 0.0399999991;
    u_xlat0.x = (-vs_TEXCOORD2.w) + 1.0;
    u_xlat0.x = u_xlat0.x * _GrassShininess;
    SV_Target2.w = u_xlat0.x;
    SV_Target2.xy = vec2(0.0399999991, 0.0399999991);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "MHY_SHADER_MIDDLE" "SOFT_SAMPLE_HEIGHT_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	int unity_BaseInstanceID;
uniform 	float _NoiseScale;
uniform 	vec4 _WorldOffsetRange;
uniform 	float _HeightScale;
uniform 	float _Billboard;
uniform 	float _VegetationMoveScale;
uniform 	vec4 _LocalWindsMapSize;
uniform 	vec4 _LargeWindParam;
uniform 	vec4 _GlobalWind;
uniform 	vec4 _LocalWindsMapCameraInfo;
uniform 	float _GrassTipLighting;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BurnedColor;
uniform 	float _RootColorScale;
uniform 	float _RootColorOffset;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _Heightmap;
uniform lowp sampler2D _Noisemap;
uniform lowp sampler2D _LocalWindsMap;
in highp vec4 in_POSITION0;
in highp vec4 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec2 in_TEXCOORD2;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp float vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec3 u_xlat0;
int u_xlati0;
vec3 u_xlat1;
uvec3 u_xlatu1;
vec4 u_xlat2;
uvec3 u_xlatu2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
uvec2 u_xlatu5;
vec4 u_xlat6;
vec3 u_xlat7;
vec2 u_xlat8;
float u_xlat9;
int u_xlati9;
float u_xlat11;
uint u_xlatu11;
int u_xlati18;
float u_xlat20;
vec2 u_xlat23;
float u_xlat27;
bool u_xlatb27;
float u_xlat28;
uint u_xlatu28;
bool u_xlatb28;
float u_xlat29;
bool u_xlatb29;
float u_xlat30;
void main()
{
    u_xlat0.z = 0.0;
    u_xlati9 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati9 = u_xlati9 << 2;
    u_xlat1.xyz = in_TEXCOORD0.yyy * unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_TEXCOORD0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat2.xy = u_xlat1.xz + (-_LocalWindsMapSize.xy);
    u_xlat2.xy = vec2(u_xlat2.x / _LocalWindsMapSize.z, u_xlat2.y / _LocalWindsMapSize.w);
    u_xlat2.xy = u_xlat2.xy + vec2(0.5, 0.5);
    u_xlat2 = textureLod(_LocalWindsMap, u_xlat2.xy, 0.0);
    u_xlat27 = dot(u_xlat2.xy, u_xlat2.xy);
    u_xlat27 = sqrt(u_xlat27);
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(9.99999975e-05>=u_xlat27);
#else
    u_xlatb27 = 9.99999975e-05>=u_xlat27;
#endif
    u_xlat27 = u_xlatb27 ? 1.0 : float(0.0);
    u_xlat3.xy = (-u_xlat2.xy) + vec2(0.5, 0.5);
    u_xlat2.xy = vec2(u_xlat27) * u_xlat3.xy + u_xlat2.xy;
    u_xlat2.xy = u_xlat2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat27 = dot(u_xlat2.xy, u_xlat2.xy);
    u_xlat27 = max(u_xlat27, 0.00100000005);
    u_xlat3.x = inversesqrt(u_xlat27);
    u_xlat3.yz = u_xlat2.xy * u_xlat3.xx;
    u_xlat0.x = u_xlat3.z;
    u_xlat0.xz = (-u_xlat3.xy) * vec2(0.0, 1.0) + u_xlat0.xz;
    u_xlat27 = (-in_TEXCOORD1.x) + unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].x;
    u_xlat28 = u_xlat27 * 3.0;
    u_xlat28 = _Time.y * 3.0 + u_xlat28;
    u_xlat28 = u_xlat28 + 0.5;
    u_xlat28 = fract(u_xlat28);
    u_xlat28 = u_xlat28 * 2.0 + -1.0;
    u_xlat3.x = abs(u_xlat28) * abs(u_xlat28);
    u_xlat28 = -abs(u_xlat28) * 2.0 + 3.0;
    u_xlat28 = u_xlat28 * u_xlat3.x;
    u_xlat3.x = u_xlat2.z * 1.5;
    u_xlat28 = u_xlat28 * u_xlat3.x;
    u_xlat0.xz = u_xlat0.xz * vec2(u_xlat28);
    u_xlat0.xz = u_xlat0.xz * vec2(0.150000006, 0.150000006);
    u_xlat0.xz = u_xlat3.yz * vec2(u_xlat28) + u_xlat0.xz;
    u_xlat0.xz = u_xlat0.xz + u_xlat2.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlatb28 = !!(0.00199999986<u_xlat2.z);
#else
    u_xlatb28 = 0.00199999986<u_xlat2.z;
#endif
    u_xlat20 = (-u_xlat2.w) * _LocalWindsMapCameraInfo.y + _LocalWindsMapCameraInfo.x;
    u_xlat0.xz = (bool(u_xlatb28)) ? u_xlat0.xz : u_xlat2.xy;
    u_xlat2.xy = vec2(_WorldOffsetRange.z + float(2.0), _WorldOffsetRange.w + float(2.0));
    u_xlat3.xy = u_xlat1.xz + (-_WorldOffsetRange.xy);
    u_xlat3.xy = u_xlat3.xy + vec2(1.0, 1.0);
    u_xlat2.xy = u_xlat3.xy / u_xlat2.xy;
    u_xlat2.xy = u_xlat2.xy * _WorldOffsetRange.zw + vec2(-0.5, -0.5);
    u_xlat3.xy = floor(u_xlat2.xy);
    u_xlat2.xy = u_xlat2.xy + (-u_xlat3.xy);
    u_xlat4 = u_xlat3.xyxy + vec4(0.5, 1.5, 1.5, 1.5);
    u_xlat3 = u_xlat3.xyxy + vec4(1.5, 0.5, 0.5, 0.5);
    u_xlat3 = vec4(u_xlat3.x / _WorldOffsetRange.z, u_xlat3.y / _WorldOffsetRange.w, u_xlat3.z / _WorldOffsetRange.z, u_xlat3.w / _WorldOffsetRange.w);
    u_xlat4 = vec4(u_xlat4.x / _WorldOffsetRange.z, u_xlat4.y / _WorldOffsetRange.w, u_xlat4.z / _WorldOffsetRange.z, u_xlat4.w / _WorldOffsetRange.w);
    u_xlat28 = textureLod(_Heightmap, u_xlat4.zw, 0.0).x;
    u_xlat29 = textureLod(_Heightmap, u_xlat4.xy, 0.0).x;
    u_xlat28 = u_xlat28 + (-u_xlat29);
    u_xlat28 = u_xlat2.x * u_xlat28 + u_xlat29;
    u_xlat29 = textureLod(_Heightmap, u_xlat3.xy, 0.0).x;
    u_xlat3.x = textureLod(_Heightmap, u_xlat3.zw, 0.0).x;
    u_xlat29 = u_xlat29 + (-u_xlat3.x);
    u_xlat2.x = u_xlat2.x * u_xlat29 + u_xlat3.x;
    u_xlat28 = u_xlat28 + (-u_xlat2.x);
    u_xlat28 = u_xlat2.y * u_xlat28 + u_xlat2.x;
    u_xlat2.x = u_xlat28 * _HeightScale + u_xlat1.y;
    u_xlat2.x = (-u_xlat2.x) + u_xlat20;
    u_xlat2.x = u_xlat2.x * 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat2.x = (-u_xlat2.x) + 1.0;
    u_xlat11 = float(floatBitsToUint(unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2]).w);
    u_xlat11 = u_xlat11 * 5.96046448e-08;
    u_xlatu11 = uint(u_xlat11);
    u_xlatu11 = u_xlatu11 & 3u;
    u_xlat11 = float(u_xlatu11);
    u_xlat20 = fract(u_xlat27);
    u_xlat27 = u_xlat27 + unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].y;
    u_xlat3.xy = vec2(u_xlat27) * vec2(22.0, 33.0);
    u_xlat3.xy = fract(u_xlat3.xy);
    u_xlat3.xy = u_xlat3.xy + vec2(-0.5, -0.5);
    u_xlat3.xz = u_xlat3.xy * vec2(0.200000003, 0.200000003);
    u_xlat27 = u_xlat11 + u_xlat20;
    u_xlat27 = u_xlat27 + -0.5;
    u_xlat11 = u_xlat27 * 0.333000004;
    u_xlat4.y = u_xlat27 * 0.333000004 + -1.0;
    u_xlat27 = in_TEXCOORD1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
    u_xlat11 = u_xlat11 * u_xlat27;
    u_xlat2.x = u_xlat11 * u_xlat2.x;
    u_xlat0.xz = u_xlat0.xz * u_xlat2.xx;
    u_xlat0.xz = u_xlat0.xz * vec2(vec2(_VegetationMoveScale, _VegetationMoveScale));
    u_xlat2.x = dot(_GlobalWind.xyz, _GlobalWind.xyz);
    u_xlat2.x = max(u_xlat2.x, 0.00100000005);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat5 = u_xlat2.xxxx * _GlobalWind.xzxz;
    u_xlat2.xz = vec2(u_xlat5.z * _LargeWindParam.z, u_xlat5.w * _LargeWindParam.z);
    u_xlat23.xy = u_xlat1.xz / vec2(_NoiseScale);
    u_xlat5.xy = _LargeWindParam.xx * u_xlat5.xy + u_xlat23.xy;
    u_xlat5.xy = textureLod(_Noisemap, u_xlat5.xy, 0.0).xy;
    u_xlat5.xy = u_xlat5.xy + vec2(-0.5, -0.5);
    u_xlat5.xy = u_xlat5.xy * _LargeWindParam.yy + vec2(0.5, 0.5);
    u_xlat5.xy = vec2(u_xlat11) * u_xlat5.xy;
    u_xlat6.xz = u_xlat5.xy * u_xlat2.xz + u_xlat0.xz;
    u_xlat2.xz = u_xlat2.xz * u_xlat5.xy;
    u_xlat6.y = 0.0;
    u_xlat5.y = hlslcc_mtx4x4unity_MatrixV[0].x;
    u_xlat5.x = hlslcc_mtx4x4unity_MatrixV[2].x;
    u_xlat29 = dot(u_xlat5.xy, u_xlat5.xy);
    u_xlat29 = inversesqrt(u_xlat29);
    u_xlat5.xy = vec2(u_xlat29) * u_xlat5.xy;
    u_xlat7.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat7.xyz = unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat7.xyz;
    u_xlat7.xyz = unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat7.xyz;
    u_xlat7.xyz = u_xlat7.xyz + unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat7.xyz = (-u_xlat1.xyz) + u_xlat7.xyz;
    u_xlat8.x = unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].x;
    u_xlat8.y = unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].x;
    u_xlat29 = dot(u_xlat8.xy, u_xlat8.xy);
    u_xlat29 = inversesqrt(u_xlat29);
    u_xlat23.xy = vec2(u_xlat29) * u_xlat8.xy;
    u_xlat29 = u_xlat23.y * u_xlat7.z;
    u_xlat29 = u_xlat7.x * u_xlat23.x + (-u_xlat29);
    u_xlat30 = dot(u_xlat7.zx, u_xlat23.xy);
    u_xlat23.xy = u_xlat5.xy * vec2(u_xlat30);
    u_xlat30 = u_xlat29 * u_xlat5.y + (-u_xlat23.x);
    u_xlat29 = u_xlat29 * u_xlat5.x + u_xlat23.y;
    u_xlat29 = u_xlat7.z + u_xlat29;
    u_xlat7.z = (-u_xlat29) * _Billboard + u_xlat7.z;
    u_xlat29 = u_xlat7.x + u_xlat30;
    u_xlat7.x = (-u_xlat29) * _Billboard + u_xlat7.x;
    u_xlat5.xyz = u_xlat7.xyz * vec3(0.100000001, 1.0, 0.100000001) + u_xlat6.xyz;
    u_xlat29 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat29 = max(u_xlat29, 0.00100000005);
    u_xlat29 = inversesqrt(u_xlat29);
    u_xlat5.xyz = vec3(u_xlat29) * u_xlat5.xyz;
    u_xlat29 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat29 = sqrt(u_xlat29);
    u_xlat6.xyz = u_xlat7.xyz * vec3(0.100000001, 1.0, 0.100000001);
    u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat29) + (-u_xlat6.xyz);
    u_xlat6.xyz = u_xlat1.xyz + u_xlat7.xyz;
    u_xlat6.w = u_xlat28 * _HeightScale + u_xlat6.y;
    u_xlat1.xyz = u_xlat5.xyz + u_xlat6.xwz;
    u_xlatu5.xy = uvec2(65280u, 255u) & floatBitsToUint(unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1]).ww;
    u_xlat5.xy = vec2(u_xlatu5.xy);
    u_xlat28 = u_xlat5.x * 0.00390625;
    u_xlat5.z = u_xlat5.y + -127.0;
    u_xlatu28 = uint(u_xlat28);
    u_xlat28 = float(u_xlatu28);
    u_xlat5.x = u_xlat28 + -127.0;
    u_xlat6.xy = u_xlat5.xz * vec2(0.00787401572, 0.00787401572);
    u_xlat6.xy = u_xlat6.xy * u_xlat6.xy;
    u_xlat28 = u_xlat6.y + u_xlat6.x;
    u_xlat28 = (-u_xlat28) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb29 = !!(0.0<u_xlat28);
#else
    u_xlatb29 = 0.0<u_xlat28;
#endif
    u_xlat28 = sqrt(u_xlat28);
    u_xlat5.y = u_xlatb29 ? u_xlat28 : float(0.0);
    u_xlat6.xyz = u_xlat5.xyz * u_xlat7.yyy;
    u_xlat6.xyz = vec3(u_xlat11) * u_xlat6.xyz;
    u_xlat28 = max(u_xlat11, 9.99999972e-10);
    u_xlat1.xyz = u_xlat6.xyz * vec3(0.00393700786, 0.0, 0.00393700786) + u_xlat1.xyz;
    u_xlat4.xz = u_xlat4.yy * (-u_xlat4.yy);
    u_xlat1.xyz = u_xlat4.xyz * u_xlat7.xyz + u_xlat1.xyz;
    u_xlat4.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat6 = u_xlat4.yyyy * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat6 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat4.xxxx + u_xlat6;
    u_xlat4 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat4.zzzz + u_xlat6;
    gl_Position = u_xlat4 + hlslcc_mtx4x4unity_MatrixVPZero[3];
    u_xlat3.y = 0.0;
    vs_TEXCOORD0.xyz = u_xlat5.xyz * vec3(0.00787401572, 1.0, 0.00787401572) + u_xlat3.xyz;
    vs_TEXCOORD0.w = 0.0;
    u_xlat0.xz = u_xlat0.zx / vec2(u_xlat28);
    u_xlat2.xy = u_xlat2.zx / vec2(u_xlat28);
    u_xlat2.yz = u_xlat0.xz + u_xlat2.xy;
    u_xlat2.x = 0.0;
    u_xlat2.xyz = u_xlat5.yzx * vec3(1.0, 0.00787401572, 0.00787401572) + u_xlat2.xyz;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat3.xyz = in_NORMAL0.yyy * unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_NORMAL0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_NORMAL0.zzz + u_xlat3.xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
    u_xlat3.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
    u_xlat2.xyz = u_xlat3.zxy * u_xlat2.yzx + (-u_xlat4.xyz);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
    { bool cond = 0.0<u_xlat0.x; u_xlati18 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati18 = int((0.0<u_xlat0.x) ? 0xFFFFFFFFu : uint(0u));
#endif
#ifdef UNITY_ADRENO_ES3
    { bool cond = u_xlat0.x<0.0; u_xlati0 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati0 = int((u_xlat0.x<0.0) ? 0xFFFFFFFFu : uint(0u));
#endif
    u_xlati0 = (-u_xlati18) + u_xlati0;
    u_xlat0.x = float(u_xlati0);
    vs_TEXCOORD1.xyz = u_xlat0.xxx * u_xlat2.xyz;
    vs_TEXCOORD1.w = 0.0;
    u_xlatu1.xyz = uvec3(16711680u, 65280u, 255u) & floatBitsToUint(unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2]).www;
    u_xlat1.xyz = vec3(u_xlatu1.xyz);
    u_xlatu2.xyz = uvec3(16711680u, 65280u, 255u) & floatBitsToUint(unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3]).www;
    u_xlat0.x = max(1.0, unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].w);
    u_xlat0.x = min(u_xlat0.x, 2.0);
    u_xlat0.x = u_xlat0.x + -1.0;
    u_xlat2.xyz = vec3(u_xlatu2.xyz);
    u_xlat2.xyz = u_xlat2.xyz * vec3(5.9838392e-08, 1.53186284e-05, 0.00392156886);
    u_xlat1.xyz = u_xlat1.xyz * vec3(5.9838392e-08, 1.53186284e-05, 0.00392156886) + (-u_xlat2.xyz);
    u_xlat9 = u_xlat27 / _RootColorScale;
    u_xlat9 = u_xlat9 + _RootColorOffset;
#ifdef UNITY_ADRENO_ES3
    u_xlat9 = min(max(u_xlat9, 0.0), 1.0);
#else
    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz + u_xlat2.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _BurnedColor.xyz;
    u_xlat1.xyz = u_xlat0.xxx * u_xlat2.xyz + u_xlat1.xyz;
    vs_TEXCOORD2.w = u_xlat0.x;
    u_xlat0.x = u_xlat27 + -0.600000024;
    vs_TEXCOORD3 = u_xlat27;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = _GrassTipLighting * u_xlat0.x + 1.0;
    vs_TEXCOORD2.xyz = u_xlat0.xxx * u_xlat1.xyz;
    vs_TEXCOORD4.xy = in_TEXCOORD2.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	float _GrassShininess;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	float _CutOff;
uniform 	vec4 _BurnedColor;
uniform lowp sampler2D _MainTex;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp float vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec4 u_xlat0;
lowp vec4 u_xlat10_0;
bool u_xlatb0;
vec3 u_xlat1;
mediump float u_xlat16_2;
float u_xlat9;
bool u_xlatb9;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD4.xy);
    u_xlat9 = u_xlat10_0.w + (-_CutOff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(u_xlat9<0.0);
#else
    u_xlatb9 = u_xlat9<0.0;
#endif
    if((int(u_xlatb9) * int(0xffffffffu))!=0){discard;}
    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
    SV_Target0.xyz = u_xlat1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0;
    u_xlat1.xyz = _BurnedColor.xyz * u_xlat10_0.xyz + (-u_xlat10_0.xyz);
    u_xlat0.xyz = vs_TEXCOORD2.www * u_xlat1.xyz + u_xlat10_0.xyz;
    u_xlat0.w = vs_TEXCOORD3;
    SV_Target1 = u_xlat0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_2 = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb0) ? u_xlat16_2 : 0.0399999991;
    u_xlat0.x = (-vs_TEXCOORD2.w) + 1.0;
    u_xlat0.x = u_xlat0.x * _GrassShininess;
    SV_Target2.w = u_xlat0.x;
    SV_Target2.xy = vec2(0.0399999991, 0.0399999991);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "MHY_SHADER_MIDDLE" "SOFT_SAMPLE_HEIGHT_ON" "DITHER_FADE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	float _NoiseScale;
uniform 	vec4 _WorldOffsetRange;
uniform 	float _HeightScale;
uniform 	float _Billboard;
uniform 	float _VegetationMoveScale;
uniform 	vec4 _LocalWindsMapSize;
uniform 	vec4 _LargeWindParam;
uniform 	vec4 _GlobalWind;
uniform 	vec4 _LocalWindsMapCameraInfo;
uniform 	float _GrassTipLighting;
uniform 	vec4 _MainTex_ST;
uniform 	float _RootColorScale;
uniform 	float _RootColorOffset;
uniform highp sampler2D _Heightmap;
uniform lowp sampler2D _Noisemap;
uniform lowp sampler2D _LocalWindsMap;
in highp vec4 in_POSITION0;
in highp vec4 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec2 in_TEXCOORD2;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp float vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec3 u_xlat0;
vec3 u_xlat1;
int u_xlati1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
vec4 u_xlat6;
vec3 u_xlat7;
vec3 u_xlat8;
bool u_xlatb8;
vec2 u_xlat10;
vec2 u_xlat16;
float u_xlat18;
vec2 u_xlat21;
float u_xlat24;
int u_xlati24;
float u_xlat25;
float u_xlat26;
void main()
{
    u_xlat0.z = 0.0;
    u_xlat1.xyz = in_TEXCOORD0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[2].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TEXCOORD0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat8.xz = u_xlat1.xz + (-_LocalWindsMapSize.xy);
    u_xlat8.xz = vec2(u_xlat8.x / _LocalWindsMapSize.z, u_xlat8.z / _LocalWindsMapSize.w);
    u_xlat8.xz = u_xlat8.xz + vec2(0.5, 0.5);
    u_xlat2 = textureLod(_LocalWindsMap, u_xlat8.xz, 0.0);
    u_xlat8.x = dot(u_xlat2.xy, u_xlat2.xy);
    u_xlat8.x = sqrt(u_xlat8.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(9.99999975e-05>=u_xlat8.x);
#else
    u_xlatb8 = 9.99999975e-05>=u_xlat8.x;
#endif
    u_xlat8.x = u_xlatb8 ? 1.0 : float(0.0);
    u_xlat3.xy = (-u_xlat2.xy) + vec2(0.5, 0.5);
    u_xlat8.xz = u_xlat8.xx * u_xlat3.xy + u_xlat2.xy;
    u_xlat8.xz = u_xlat8.xz * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat25 = dot(u_xlat8.xz, u_xlat8.xz);
    u_xlat25 = max(u_xlat25, 0.00100000005);
    u_xlat3.x = inversesqrt(u_xlat25);
    u_xlat3.yz = u_xlat8.xz * u_xlat3.xx;
    u_xlat0.x = u_xlat3.z;
    u_xlat0.xz = (-u_xlat3.xy) * vec2(0.0, 1.0) + u_xlat0.xz;
    u_xlat25 = (-in_TEXCOORD1.x) + hlslcc_mtx4x4unity_ObjectToWorld[1].x;
    u_xlat2.x = u_xlat25 * 3.0;
    u_xlat2.x = _Time.y * 3.0 + u_xlat2.x;
    u_xlat2.x = u_xlat2.x + 0.5;
    u_xlat2.x = fract(u_xlat2.x);
    u_xlat2.x = u_xlat2.x * 2.0 + -1.0;
    u_xlat10.x = abs(u_xlat2.x) * abs(u_xlat2.x);
    u_xlat2.x = -abs(u_xlat2.x) * 2.0 + 3.0;
    u_xlat2.x = u_xlat2.x * u_xlat10.x;
    u_xlat10.x = u_xlat2.z * 1.5;
    u_xlat2.x = u_xlat10.x * u_xlat2.x;
    u_xlat0.xz = u_xlat0.xz * u_xlat2.xx;
    u_xlat0.xz = u_xlat0.xz * vec2(0.150000006, 0.150000006);
    u_xlat0.xz = u_xlat3.yz * u_xlat2.xx + u_xlat0.xz;
    u_xlat0.xz = u_xlat0.xz + u_xlat8.xz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(0.00199999986<u_xlat2.z);
#else
    u_xlatb2 = 0.00199999986<u_xlat2.z;
#endif
    u_xlat10.x = (-u_xlat2.w) * _LocalWindsMapCameraInfo.y + _LocalWindsMapCameraInfo.x;
    u_xlat0.xy = (bool(u_xlatb2)) ? u_xlat0.xz : u_xlat8.xz;
    u_xlat16.xy = vec2(_WorldOffsetRange.z + float(2.0), _WorldOffsetRange.w + float(2.0));
    u_xlat2.xz = u_xlat1.xz + (-_WorldOffsetRange.xy);
    u_xlat2.xz = u_xlat2.xz + vec2(1.0, 1.0);
    u_xlat16.xy = u_xlat2.xz / u_xlat16.xy;
    u_xlat16.xy = u_xlat16.xy * _WorldOffsetRange.zw + vec2(-0.5, -0.5);
    u_xlat2.xz = floor(u_xlat16.xy);
    u_xlat16.xy = u_xlat16.xy + (-u_xlat2.xz);
    u_xlat3 = u_xlat2.xzxz + vec4(0.5, 1.5, 1.5, 1.5);
    u_xlat4 = u_xlat2.xzxz + vec4(1.5, 0.5, 0.5, 0.5);
    u_xlat4 = vec4(u_xlat4.x / _WorldOffsetRange.z, u_xlat4.y / _WorldOffsetRange.w, u_xlat4.z / _WorldOffsetRange.z, u_xlat4.w / _WorldOffsetRange.w);
    u_xlat3 = vec4(u_xlat3.x / _WorldOffsetRange.z, u_xlat3.y / _WorldOffsetRange.w, u_xlat3.z / _WorldOffsetRange.z, u_xlat3.w / _WorldOffsetRange.w);
    u_xlat2.x = textureLod(_Heightmap, u_xlat3.zw, 0.0).x;
    u_xlat18 = textureLod(_Heightmap, u_xlat3.xy, 0.0).x;
    u_xlat2.x = (-u_xlat18) + u_xlat2.x;
    u_xlat2.x = u_xlat16.x * u_xlat2.x + u_xlat18;
    u_xlat18 = textureLod(_Heightmap, u_xlat4.xy, 0.0).x;
    u_xlat26 = textureLod(_Heightmap, u_xlat4.zw, 0.0).x;
    u_xlat18 = (-u_xlat26) + u_xlat18;
    u_xlat16.x = u_xlat16.x * u_xlat18 + u_xlat26;
    u_xlat2.x = (-u_xlat16.x) + u_xlat2.x;
    u_xlat16.x = u_xlat16.y * u_xlat2.x + u_xlat16.x;
    u_xlat24 = u_xlat16.x * _HeightScale + u_xlat1.y;
    u_xlat24 = (-u_xlat24) + u_xlat10.x;
    u_xlat24 = u_xlat24 * 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat24 = (-u_xlat24) + 1.0;
    u_xlat2.x = fract(u_xlat25);
    u_xlat25 = u_xlat25 + hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat10.xy = vec2(u_xlat25) * vec2(22.0, 33.0);
    u_xlat10.xy = fract(u_xlat10.xy);
    u_xlat10.xy = u_xlat10.xy + vec2(-0.5, -0.5);
    u_xlat3.xz = u_xlat10.xy * vec2(0.200000003, 0.200000003);
    u_xlat25 = u_xlat2.x + -0.5;
    u_xlat2.x = u_xlat25 * 0.333000004;
    u_xlat4.y = u_xlat25 * 0.333000004 + -1.0;
    u_xlat25 = in_TEXCOORD1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat25 = min(max(u_xlat25, 0.0), 1.0);
#else
    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
#endif
    u_xlat2.x = u_xlat2.x * u_xlat25;
    u_xlat24 = u_xlat24 * u_xlat2.x;
    u_xlat0.xy = vec2(u_xlat24) * u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(vec2(_VegetationMoveScale, _VegetationMoveScale));
    u_xlat24 = dot(_GlobalWind.xyz, _GlobalWind.xyz);
    u_xlat24 = max(u_xlat24, 0.00100000005);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat5 = vec4(u_xlat24) * _GlobalWind.xzxz;
    u_xlat10.xy = vec2(u_xlat5.z * _LargeWindParam.z, u_xlat5.w * _LargeWindParam.z);
    u_xlat21.xy = u_xlat1.xz / vec2(_NoiseScale);
    u_xlat5.xy = _LargeWindParam.xx * u_xlat5.xy + u_xlat21.xy;
    u_xlat5.xy = textureLod(_Noisemap, u_xlat5.xy, 0.0).xy;
    u_xlat5.xy = u_xlat5.xy + vec2(-0.5, -0.5);
    u_xlat5.xy = u_xlat5.xy * _LargeWindParam.yy + vec2(0.5, 0.5);
    u_xlat5.xy = u_xlat2.xx * u_xlat5.xy;
    u_xlat6.xz = u_xlat5.xy * u_xlat10.xy + u_xlat0.xy;
    u_xlat10.xy = u_xlat10.xy * u_xlat5.xy;
    u_xlat6.y = 0.0;
    u_xlat5.y = hlslcc_mtx4x4unity_MatrixV[0].x;
    u_xlat5.x = hlslcc_mtx4x4unity_MatrixV[2].x;
    u_xlat24 = dot(u_xlat5.xy, u_xlat5.xy);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat5.xy = vec2(u_xlat24) * u_xlat5.xy;
    u_xlat7.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;
    u_xlat7.y = hlslcc_mtx4x4unity_ObjectToWorld[2].x;
    u_xlat24 = dot(u_xlat7.xy, u_xlat7.xy);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat21.xy = vec2(u_xlat24) * u_xlat7.xy;
    u_xlat7.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat7.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat7.xyz;
    u_xlat7.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat7.xyz;
    u_xlat7.xyz = u_xlat7.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat7.xyz = (-u_xlat1.xyz) + u_xlat7.xyz;
    u_xlat24 = u_xlat21.y * u_xlat7.z;
    u_xlat24 = u_xlat7.x * u_xlat21.x + (-u_xlat24);
    u_xlat26 = dot(u_xlat7.zx, u_xlat21.xy);
    u_xlat21.xy = u_xlat5.xy * vec2(u_xlat26);
    u_xlat26 = u_xlat24 * u_xlat5.y + (-u_xlat21.x);
    u_xlat24 = u_xlat24 * u_xlat5.x + u_xlat21.y;
    u_xlat24 = u_xlat7.z + u_xlat24;
    u_xlat7.z = (-u_xlat24) * _Billboard + u_xlat7.z;
    u_xlat24 = u_xlat7.x + u_xlat26;
    u_xlat7.x = (-u_xlat24) * _Billboard + u_xlat7.x;
    u_xlat24 = u_xlat2.x * u_xlat7.y;
    u_xlat2.x = max(u_xlat2.x, 9.99999972e-10);
    u_xlat5.xyz = u_xlat7.xyz * vec3(0.100000001, 1.0, 0.100000001) + u_xlat6.xyz;
    u_xlat26 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat26 = max(u_xlat26, 0.00100000005);
    u_xlat26 = inversesqrt(u_xlat26);
    u_xlat5.xyz = vec3(u_xlat26) * u_xlat5.xyz;
    u_xlat26 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat26 = sqrt(u_xlat26);
    u_xlat6.xyz = u_xlat7.xyz * vec3(0.100000001, 1.0, 0.100000001);
    u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat26) + (-u_xlat6.xyz);
    u_xlat6.xyz = u_xlat1.xyz + u_xlat7.xyz;
    u_xlat6.w = u_xlat16.x * _HeightScale + u_xlat6.y;
    u_xlat1.xyz = u_xlat5.xyz + u_xlat6.xwz;
    u_xlat1.xyz = vec3(u_xlat24) * vec3(-0.5, 0.0, -0.5) + u_xlat1.xyz;
    u_xlat4.xz = u_xlat4.yy * (-u_xlat4.yy);
    u_xlat1.xyz = u_xlat4.xyz * u_xlat7.xyz + u_xlat1.xyz;
    u_xlat4.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat5 = u_xlat4.yyyy * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat5 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat4.xxxx + u_xlat5;
    u_xlat4 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat4.zzzz + u_xlat5;
    gl_Position = u_xlat4 + hlslcc_mtx4x4unity_MatrixVPZero[3];
    u_xlat3.y = 0.0;
    vs_TEXCOORD0.xyz = u_xlat3.xyz + vec3(-1.0, 0.0, -1.0);
    vs_TEXCOORD0.w = 0.0;
    u_xlat0.xy = u_xlat0.yx / u_xlat2.xx;
    u_xlat16.xy = u_xlat10.yx / u_xlat2.xx;
    u_xlat0.xy = u_xlat0.xy + u_xlat16.xy;
    u_xlat0.yz = u_xlat0.xy + vec2(-1.0, -1.0);
    u_xlat24 = dot(u_xlat0.yz, u_xlat0.yz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat0.x = 0.0;
    u_xlat0.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    u_xlat2.xyz = in_NORMAL0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_NORMAL0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_NORMAL0.zzz + u_xlat2.xyz;
    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat0.xyz * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat0.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat0.xyz * u_xlat2.xyz;
    u_xlat0.xyz = u_xlat2.zxy * u_xlat0.yzx + (-u_xlat3.xyz);
    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
    u_xlat24 = dot(u_xlat1.xyz, u_xlat0.xyz);
#ifdef UNITY_ADRENO_ES3
    { bool cond = 0.0<u_xlat24; u_xlati1 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati1 = int((0.0<u_xlat24) ? 0xFFFFFFFFu : uint(0u));
#endif
#ifdef UNITY_ADRENO_ES3
    { bool cond = u_xlat24<0.0; u_xlati24 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati24 = int((u_xlat24<0.0) ? 0xFFFFFFFFu : uint(0u));
#endif
    u_xlati24 = (-u_xlati1) + u_xlati24;
    u_xlat24 = float(u_xlati24);
    vs_TEXCOORD1.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    vs_TEXCOORD1.w = 0.0;
    u_xlat0.x = u_xlat25 / _RootColorScale;
    u_xlat0.x = u_xlat0.x + _RootColorOffset;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xxx * vec3(-0.501960814, 0.0, 0.0) + vec3(0.501960814, 0.0, 0.0);
    u_xlat24 = u_xlat25 + -0.600000024;
    vs_TEXCOORD3 = u_xlat25;
    u_xlat24 = max(u_xlat24, 0.0);
    u_xlat24 = _GrassTipLighting * u_xlat24 + 1.0;
    vs_TEXCOORD2.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    vs_TEXCOORD2.w = 0.0;
    vs_TEXCOORD4.xy = in_TEXCOORD2.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	float _GrassShininess;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	float _CutOff;
uniform 	vec4 _BurnedColor;
uniform lowp sampler2D _MainTex;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp float vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec4 u_xlat0;
lowp vec4 u_xlat10_0;
bool u_xlatb0;
vec3 u_xlat1;
mediump float u_xlat16_2;
float u_xlat9;
bool u_xlatb9;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD4.xy);
    u_xlat9 = u_xlat10_0.w + (-_CutOff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(u_xlat9<0.0);
#else
    u_xlatb9 = u_xlat9<0.0;
#endif
    if((int(u_xlatb9) * int(0xffffffffu))!=0){discard;}
    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
    SV_Target0.xyz = u_xlat1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0;
    u_xlat1.xyz = _BurnedColor.xyz * u_xlat10_0.xyz + (-u_xlat10_0.xyz);
    u_xlat0.xyz = vs_TEXCOORD2.www * u_xlat1.xyz + u_xlat10_0.xyz;
    u_xlat0.w = vs_TEXCOORD3;
    SV_Target1 = u_xlat0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_2 = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb0) ? u_xlat16_2 : 0.0399999991;
    u_xlat0.x = (-vs_TEXCOORD2.w) + 1.0;
    u_xlat0.x = u_xlat0.x * _GrassShininess;
    SV_Target2.w = u_xlat0.x;
    SV_Target2.xy = vec2(0.0399999991, 0.0399999991);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "MHY_SHADER_MIDDLE" "SOFT_SAMPLE_HEIGHT_ON" "DITHER_FADE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	int unity_BaseInstanceID;
uniform 	float _NoiseScale;
uniform 	vec4 _WorldOffsetRange;
uniform 	float _HeightScale;
uniform 	float _Billboard;
uniform 	float _VegetationMoveScale;
uniform 	vec4 _LocalWindsMapSize;
uniform 	vec4 _LargeWindParam;
uniform 	vec4 _GlobalWind;
uniform 	vec4 _LocalWindsMapCameraInfo;
uniform 	float _GrassTipLighting;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BurnedColor;
uniform 	float _RootColorScale;
uniform 	float _RootColorOffset;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _Heightmap;
uniform lowp sampler2D _Noisemap;
uniform lowp sampler2D _LocalWindsMap;
in highp vec4 in_POSITION0;
in highp vec4 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec2 in_TEXCOORD2;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp float vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec3 u_xlat0;
int u_xlati0;
vec3 u_xlat1;
uvec3 u_xlatu1;
vec4 u_xlat2;
uvec3 u_xlatu2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
uvec2 u_xlatu5;
vec4 u_xlat6;
vec3 u_xlat7;
vec2 u_xlat8;
float u_xlat9;
int u_xlati9;
float u_xlat11;
uint u_xlatu11;
int u_xlati18;
float u_xlat20;
vec2 u_xlat23;
float u_xlat27;
bool u_xlatb27;
float u_xlat28;
uint u_xlatu28;
bool u_xlatb28;
float u_xlat29;
bool u_xlatb29;
float u_xlat30;
void main()
{
    u_xlat0.z = 0.0;
    u_xlati9 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati9 = u_xlati9 << 2;
    u_xlat1.xyz = in_TEXCOORD0.yyy * unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_TEXCOORD0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat2.xy = u_xlat1.xz + (-_LocalWindsMapSize.xy);
    u_xlat2.xy = vec2(u_xlat2.x / _LocalWindsMapSize.z, u_xlat2.y / _LocalWindsMapSize.w);
    u_xlat2.xy = u_xlat2.xy + vec2(0.5, 0.5);
    u_xlat2 = textureLod(_LocalWindsMap, u_xlat2.xy, 0.0);
    u_xlat27 = dot(u_xlat2.xy, u_xlat2.xy);
    u_xlat27 = sqrt(u_xlat27);
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(9.99999975e-05>=u_xlat27);
#else
    u_xlatb27 = 9.99999975e-05>=u_xlat27;
#endif
    u_xlat27 = u_xlatb27 ? 1.0 : float(0.0);
    u_xlat3.xy = (-u_xlat2.xy) + vec2(0.5, 0.5);
    u_xlat2.xy = vec2(u_xlat27) * u_xlat3.xy + u_xlat2.xy;
    u_xlat2.xy = u_xlat2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat27 = dot(u_xlat2.xy, u_xlat2.xy);
    u_xlat27 = max(u_xlat27, 0.00100000005);
    u_xlat3.x = inversesqrt(u_xlat27);
    u_xlat3.yz = u_xlat2.xy * u_xlat3.xx;
    u_xlat0.x = u_xlat3.z;
    u_xlat0.xz = (-u_xlat3.xy) * vec2(0.0, 1.0) + u_xlat0.xz;
    u_xlat27 = (-in_TEXCOORD1.x) + unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].x;
    u_xlat28 = u_xlat27 * 3.0;
    u_xlat28 = _Time.y * 3.0 + u_xlat28;
    u_xlat28 = u_xlat28 + 0.5;
    u_xlat28 = fract(u_xlat28);
    u_xlat28 = u_xlat28 * 2.0 + -1.0;
    u_xlat3.x = abs(u_xlat28) * abs(u_xlat28);
    u_xlat28 = -abs(u_xlat28) * 2.0 + 3.0;
    u_xlat28 = u_xlat28 * u_xlat3.x;
    u_xlat3.x = u_xlat2.z * 1.5;
    u_xlat28 = u_xlat28 * u_xlat3.x;
    u_xlat0.xz = u_xlat0.xz * vec2(u_xlat28);
    u_xlat0.xz = u_xlat0.xz * vec2(0.150000006, 0.150000006);
    u_xlat0.xz = u_xlat3.yz * vec2(u_xlat28) + u_xlat0.xz;
    u_xlat0.xz = u_xlat0.xz + u_xlat2.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlatb28 = !!(0.00199999986<u_xlat2.z);
#else
    u_xlatb28 = 0.00199999986<u_xlat2.z;
#endif
    u_xlat20 = (-u_xlat2.w) * _LocalWindsMapCameraInfo.y + _LocalWindsMapCameraInfo.x;
    u_xlat0.xz = (bool(u_xlatb28)) ? u_xlat0.xz : u_xlat2.xy;
    u_xlat2.xy = vec2(_WorldOffsetRange.z + float(2.0), _WorldOffsetRange.w + float(2.0));
    u_xlat3.xy = u_xlat1.xz + (-_WorldOffsetRange.xy);
    u_xlat3.xy = u_xlat3.xy + vec2(1.0, 1.0);
    u_xlat2.xy = u_xlat3.xy / u_xlat2.xy;
    u_xlat2.xy = u_xlat2.xy * _WorldOffsetRange.zw + vec2(-0.5, -0.5);
    u_xlat3.xy = floor(u_xlat2.xy);
    u_xlat2.xy = u_xlat2.xy + (-u_xlat3.xy);
    u_xlat4 = u_xlat3.xyxy + vec4(0.5, 1.5, 1.5, 1.5);
    u_xlat3 = u_xlat3.xyxy + vec4(1.5, 0.5, 0.5, 0.5);
    u_xlat3 = vec4(u_xlat3.x / _WorldOffsetRange.z, u_xlat3.y / _WorldOffsetRange.w, u_xlat3.z / _WorldOffsetRange.z, u_xlat3.w / _WorldOffsetRange.w);
    u_xlat4 = vec4(u_xlat4.x / _WorldOffsetRange.z, u_xlat4.y / _WorldOffsetRange.w, u_xlat4.z / _WorldOffsetRange.z, u_xlat4.w / _WorldOffsetRange.w);
    u_xlat28 = textureLod(_Heightmap, u_xlat4.zw, 0.0).x;
    u_xlat29 = textureLod(_Heightmap, u_xlat4.xy, 0.0).x;
    u_xlat28 = u_xlat28 + (-u_xlat29);
    u_xlat28 = u_xlat2.x * u_xlat28 + u_xlat29;
    u_xlat29 = textureLod(_Heightmap, u_xlat3.xy, 0.0).x;
    u_xlat3.x = textureLod(_Heightmap, u_xlat3.zw, 0.0).x;
    u_xlat29 = u_xlat29 + (-u_xlat3.x);
    u_xlat2.x = u_xlat2.x * u_xlat29 + u_xlat3.x;
    u_xlat28 = u_xlat28 + (-u_xlat2.x);
    u_xlat28 = u_xlat2.y * u_xlat28 + u_xlat2.x;
    u_xlat2.x = u_xlat28 * _HeightScale + u_xlat1.y;
    u_xlat2.x = (-u_xlat2.x) + u_xlat20;
    u_xlat2.x = u_xlat2.x * 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat2.x = (-u_xlat2.x) + 1.0;
    u_xlat11 = float(floatBitsToUint(unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2]).w);
    u_xlat11 = u_xlat11 * 5.96046448e-08;
    u_xlatu11 = uint(u_xlat11);
    u_xlatu11 = u_xlatu11 & 3u;
    u_xlat11 = float(u_xlatu11);
    u_xlat20 = fract(u_xlat27);
    u_xlat27 = u_xlat27 + unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].y;
    u_xlat3.xy = vec2(u_xlat27) * vec2(22.0, 33.0);
    u_xlat3.xy = fract(u_xlat3.xy);
    u_xlat3.xy = u_xlat3.xy + vec2(-0.5, -0.5);
    u_xlat3.xz = u_xlat3.xy * vec2(0.200000003, 0.200000003);
    u_xlat27 = u_xlat11 + u_xlat20;
    u_xlat27 = u_xlat27 + -0.5;
    u_xlat11 = u_xlat27 * 0.333000004;
    u_xlat4.y = u_xlat27 * 0.333000004 + -1.0;
    u_xlat27 = in_TEXCOORD1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
    u_xlat11 = u_xlat11 * u_xlat27;
    u_xlat2.x = u_xlat11 * u_xlat2.x;
    u_xlat0.xz = u_xlat0.xz * u_xlat2.xx;
    u_xlat0.xz = u_xlat0.xz * vec2(vec2(_VegetationMoveScale, _VegetationMoveScale));
    u_xlat2.x = dot(_GlobalWind.xyz, _GlobalWind.xyz);
    u_xlat2.x = max(u_xlat2.x, 0.00100000005);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat5 = u_xlat2.xxxx * _GlobalWind.xzxz;
    u_xlat2.xz = vec2(u_xlat5.z * _LargeWindParam.z, u_xlat5.w * _LargeWindParam.z);
    u_xlat23.xy = u_xlat1.xz / vec2(_NoiseScale);
    u_xlat5.xy = _LargeWindParam.xx * u_xlat5.xy + u_xlat23.xy;
    u_xlat5.xy = textureLod(_Noisemap, u_xlat5.xy, 0.0).xy;
    u_xlat5.xy = u_xlat5.xy + vec2(-0.5, -0.5);
    u_xlat5.xy = u_xlat5.xy * _LargeWindParam.yy + vec2(0.5, 0.5);
    u_xlat5.xy = vec2(u_xlat11) * u_xlat5.xy;
    u_xlat6.xz = u_xlat5.xy * u_xlat2.xz + u_xlat0.xz;
    u_xlat2.xz = u_xlat2.xz * u_xlat5.xy;
    u_xlat6.y = 0.0;
    u_xlat5.y = hlslcc_mtx4x4unity_MatrixV[0].x;
    u_xlat5.x = hlslcc_mtx4x4unity_MatrixV[2].x;
    u_xlat29 = dot(u_xlat5.xy, u_xlat5.xy);
    u_xlat29 = inversesqrt(u_xlat29);
    u_xlat5.xy = vec2(u_xlat29) * u_xlat5.xy;
    u_xlat7.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat7.xyz = unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat7.xyz;
    u_xlat7.xyz = unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat7.xyz;
    u_xlat7.xyz = u_xlat7.xyz + unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat7.xyz = (-u_xlat1.xyz) + u_xlat7.xyz;
    u_xlat8.x = unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].x;
    u_xlat8.y = unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].x;
    u_xlat29 = dot(u_xlat8.xy, u_xlat8.xy);
    u_xlat29 = inversesqrt(u_xlat29);
    u_xlat23.xy = vec2(u_xlat29) * u_xlat8.xy;
    u_xlat29 = u_xlat23.y * u_xlat7.z;
    u_xlat29 = u_xlat7.x * u_xlat23.x + (-u_xlat29);
    u_xlat30 = dot(u_xlat7.zx, u_xlat23.xy);
    u_xlat23.xy = u_xlat5.xy * vec2(u_xlat30);
    u_xlat30 = u_xlat29 * u_xlat5.y + (-u_xlat23.x);
    u_xlat29 = u_xlat29 * u_xlat5.x + u_xlat23.y;
    u_xlat29 = u_xlat7.z + u_xlat29;
    u_xlat7.z = (-u_xlat29) * _Billboard + u_xlat7.z;
    u_xlat29 = u_xlat7.x + u_xlat30;
    u_xlat7.x = (-u_xlat29) * _Billboard + u_xlat7.x;
    u_xlat5.xyz = u_xlat7.xyz * vec3(0.100000001, 1.0, 0.100000001) + u_xlat6.xyz;
    u_xlat29 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat29 = max(u_xlat29, 0.00100000005);
    u_xlat29 = inversesqrt(u_xlat29);
    u_xlat5.xyz = vec3(u_xlat29) * u_xlat5.xyz;
    u_xlat29 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat29 = sqrt(u_xlat29);
    u_xlat6.xyz = u_xlat7.xyz * vec3(0.100000001, 1.0, 0.100000001);
    u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat29) + (-u_xlat6.xyz);
    u_xlat6.xyz = u_xlat1.xyz + u_xlat7.xyz;
    u_xlat6.w = u_xlat28 * _HeightScale + u_xlat6.y;
    u_xlat1.xyz = u_xlat5.xyz + u_xlat6.xwz;
    u_xlatu5.xy = uvec2(65280u, 255u) & floatBitsToUint(unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1]).ww;
    u_xlat5.xy = vec2(u_xlatu5.xy);
    u_xlat28 = u_xlat5.x * 0.00390625;
    u_xlat5.z = u_xlat5.y + -127.0;
    u_xlatu28 = uint(u_xlat28);
    u_xlat28 = float(u_xlatu28);
    u_xlat5.x = u_xlat28 + -127.0;
    u_xlat6.xy = u_xlat5.xz * vec2(0.00787401572, 0.00787401572);
    u_xlat6.xy = u_xlat6.xy * u_xlat6.xy;
    u_xlat28 = u_xlat6.y + u_xlat6.x;
    u_xlat28 = (-u_xlat28) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb29 = !!(0.0<u_xlat28);
#else
    u_xlatb29 = 0.0<u_xlat28;
#endif
    u_xlat28 = sqrt(u_xlat28);
    u_xlat5.y = u_xlatb29 ? u_xlat28 : float(0.0);
    u_xlat6.xyz = u_xlat5.xyz * u_xlat7.yyy;
    u_xlat6.xyz = vec3(u_xlat11) * u_xlat6.xyz;
    u_xlat28 = max(u_xlat11, 9.99999972e-10);
    u_xlat1.xyz = u_xlat6.xyz * vec3(0.00393700786, 0.0, 0.00393700786) + u_xlat1.xyz;
    u_xlat4.xz = u_xlat4.yy * (-u_xlat4.yy);
    u_xlat1.xyz = u_xlat4.xyz * u_xlat7.xyz + u_xlat1.xyz;
    u_xlat4.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat6 = u_xlat4.yyyy * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat6 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat4.xxxx + u_xlat6;
    u_xlat4 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat4.zzzz + u_xlat6;
    gl_Position = u_xlat4 + hlslcc_mtx4x4unity_MatrixVPZero[3];
    u_xlat3.y = 0.0;
    vs_TEXCOORD0.xyz = u_xlat5.xyz * vec3(0.00787401572, 1.0, 0.00787401572) + u_xlat3.xyz;
    vs_TEXCOORD0.w = 0.0;
    u_xlat0.xz = u_xlat0.zx / vec2(u_xlat28);
    u_xlat2.xy = u_xlat2.zx / vec2(u_xlat28);
    u_xlat2.yz = u_xlat0.xz + u_xlat2.xy;
    u_xlat2.x = 0.0;
    u_xlat2.xyz = u_xlat5.yzx * vec3(1.0, 0.00787401572, 0.00787401572) + u_xlat2.xyz;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat3.xyz = in_NORMAL0.yyy * unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_NORMAL0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_NORMAL0.zzz + u_xlat3.xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
    u_xlat3.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
    u_xlat2.xyz = u_xlat3.zxy * u_xlat2.yzx + (-u_xlat4.xyz);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
    { bool cond = 0.0<u_xlat0.x; u_xlati18 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati18 = int((0.0<u_xlat0.x) ? 0xFFFFFFFFu : uint(0u));
#endif
#ifdef UNITY_ADRENO_ES3
    { bool cond = u_xlat0.x<0.0; u_xlati0 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati0 = int((u_xlat0.x<0.0) ? 0xFFFFFFFFu : uint(0u));
#endif
    u_xlati0 = (-u_xlati18) + u_xlati0;
    u_xlat0.x = float(u_xlati0);
    vs_TEXCOORD1.xyz = u_xlat0.xxx * u_xlat2.xyz;
    vs_TEXCOORD1.w = 0.0;
    u_xlatu1.xyz = uvec3(16711680u, 65280u, 255u) & floatBitsToUint(unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2]).www;
    u_xlat1.xyz = vec3(u_xlatu1.xyz);
    u_xlatu2.xyz = uvec3(16711680u, 65280u, 255u) & floatBitsToUint(unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3]).www;
    u_xlat0.x = max(1.0, unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].w);
    u_xlat0.x = min(u_xlat0.x, 2.0);
    u_xlat0.x = u_xlat0.x + -1.0;
    u_xlat2.xyz = vec3(u_xlatu2.xyz);
    u_xlat2.xyz = u_xlat2.xyz * vec3(5.9838392e-08, 1.53186284e-05, 0.00392156886);
    u_xlat1.xyz = u_xlat1.xyz * vec3(5.9838392e-08, 1.53186284e-05, 0.00392156886) + (-u_xlat2.xyz);
    u_xlat9 = u_xlat27 / _RootColorScale;
    u_xlat9 = u_xlat9 + _RootColorOffset;
#ifdef UNITY_ADRENO_ES3
    u_xlat9 = min(max(u_xlat9, 0.0), 1.0);
#else
    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz + u_xlat2.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _BurnedColor.xyz;
    u_xlat1.xyz = u_xlat0.xxx * u_xlat2.xyz + u_xlat1.xyz;
    vs_TEXCOORD2.w = u_xlat0.x;
    u_xlat0.x = u_xlat27 + -0.600000024;
    vs_TEXCOORD3 = u_xlat27;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = _GrassTipLighting * u_xlat0.x + 1.0;
    vs_TEXCOORD2.xyz = u_xlat0.xxx * u_xlat1.xyz;
    vs_TEXCOORD4.xy = in_TEXCOORD2.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	float _GrassShininess;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	float _CutOff;
uniform 	vec4 _BurnedColor;
uniform lowp sampler2D _MainTex;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp float vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec4 u_xlat0;
lowp vec4 u_xlat10_0;
bool u_xlatb0;
vec3 u_xlat1;
mediump float u_xlat16_2;
float u_xlat9;
bool u_xlatb9;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD4.xy);
    u_xlat9 = u_xlat10_0.w + (-_CutOff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(u_xlat9<0.0);
#else
    u_xlatb9 = u_xlat9<0.0;
#endif
    if((int(u_xlatb9) * int(0xffffffffu))!=0){discard;}
    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
    SV_Target0.xyz = u_xlat1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0;
    u_xlat1.xyz = _BurnedColor.xyz * u_xlat10_0.xyz + (-u_xlat10_0.xyz);
    u_xlat0.xyz = vs_TEXCOORD2.www * u_xlat1.xyz + u_xlat10_0.xyz;
    u_xlat0.w = vs_TEXCOORD3;
    SV_Target1 = u_xlat0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_2 = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb0) ? u_xlat16_2 : 0.0399999991;
    u_xlat0.x = (-vs_TEXCOORD2.w) + 1.0;
    u_xlat0.x = u_xlat0.x * _GrassShininess;
    SV_Target2.w = u_xlat0.x;
    SV_Target2.xy = vec2(0.0399999991, 0.0399999991);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "MHY_SHADER_LOW" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	float _NoiseScale;
uniform 	vec4 _WorldOffsetRange;
uniform 	float _HeightScale;
uniform 	float _Billboard;
uniform 	vec4 _LargeWindParam;
uniform 	vec4 _GlobalWind;
uniform 	float _GrassTipLighting;
uniform 	vec4 _MainTex_ST;
uniform 	float _RootColorScale;
uniform 	float _RootColorOffset;
uniform highp sampler2D _Heightmap;
uniform lowp sampler2D _Noisemap;
in highp vec4 in_POSITION0;
in highp vec4 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec2 in_TEXCOORD2;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp float vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec3 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
vec3 u_xlat5;
vec3 u_xlat6;
vec4 u_xlat7;
int u_xlati8;
vec2 u_xlat9;
vec2 u_xlat17;
float u_xlat24;
float u_xlat25;
float u_xlat26;
float u_xlat27;
void main()
{
    u_xlat0.y = 0.0;
    u_xlat24 = dot(_GlobalWind.xyz, _GlobalWind.xyz);
    u_xlat24 = max(u_xlat24, 0.00100000005);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat1 = vec4(u_xlat24) * _GlobalWind.xzxz;
    u_xlat17.xy = vec2(u_xlat1.z * _LargeWindParam.z, u_xlat1.w * _LargeWindParam.z);
    u_xlat2.xyz = in_TEXCOORD0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[2].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TEXCOORD0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat3.xy = u_xlat2.xz / vec2(_NoiseScale);
    u_xlat1.xy = _LargeWindParam.xx * u_xlat1.xy + u_xlat3.xy;
    u_xlat1.xy = textureLod(_Noisemap, u_xlat1.xy, 0.0).xy;
    u_xlat1.xy = u_xlat1.xy + vec2(-0.5, -0.5);
    u_xlat1.xy = u_xlat1.xy * _LargeWindParam.yy + vec2(0.5, 0.5);
    u_xlat24 = (-in_TEXCOORD1.x) + hlslcc_mtx4x4unity_ObjectToWorld[1].x;
    u_xlat26 = fract(u_xlat24);
    u_xlat24 = u_xlat24 + hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat3.xy = vec2(u_xlat24) * vec2(22.0, 33.0);
    u_xlat3.xy = fract(u_xlat3.xy);
    u_xlat3.xy = u_xlat3.xy + vec2(-0.5, -0.5);
    u_xlat3.xz = u_xlat3.xy * vec2(0.200000003, 0.200000003);
    u_xlat24 = u_xlat26 + -0.5;
    u_xlat26 = u_xlat24 * 0.333000004;
    u_xlat4.y = u_xlat24 * 0.333000004 + -1.0;
    u_xlat24 = in_TEXCOORD1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat26 = u_xlat26 * u_xlat24;
    u_xlat1.xy = u_xlat1.xy * vec2(u_xlat26);
    u_xlat0.xz = u_xlat17.xy * u_xlat1.xy;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[0].x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[2].x;
    u_xlat17.x = dot(u_xlat1.xy, u_xlat1.xy);
    u_xlat17.x = inversesqrt(u_xlat17.x);
    u_xlat1.xy = u_xlat17.xx * u_xlat1.xy;
    u_xlat5.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;
    u_xlat5.y = hlslcc_mtx4x4unity_ObjectToWorld[2].x;
    u_xlat17.x = dot(u_xlat5.xy, u_xlat5.xy);
    u_xlat17.x = inversesqrt(u_xlat17.x);
    u_xlat17.xy = u_xlat17.xx * u_xlat5.xy;
    u_xlat5.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat5.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat5.xyz;
    u_xlat5.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat5.xyz;
    u_xlat5.xyz = u_xlat5.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat5.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
    u_xlat27 = u_xlat17.y * u_xlat5.z;
    u_xlat27 = u_xlat5.x * u_xlat17.x + (-u_xlat27);
    u_xlat17.x = dot(u_xlat5.zx, u_xlat17.xy);
    u_xlat17.xy = u_xlat1.xy * u_xlat17.xx;
    u_xlat9.x = u_xlat27 * u_xlat1.y + (-u_xlat17.x);
    u_xlat1.x = u_xlat27 * u_xlat1.x + u_xlat17.y;
    u_xlat1.x = u_xlat5.z + u_xlat1.x;
    u_xlat5.z = (-u_xlat1.x) * _Billboard + u_xlat5.z;
    u_xlat1.x = u_xlat5.x + u_xlat9.x;
    u_xlat5.x = (-u_xlat1.x) * _Billboard + u_xlat5.x;
    u_xlat1.x = u_xlat26 * u_xlat5.y;
    u_xlat9.x = max(u_xlat26, 9.99999972e-10);
    u_xlat9.xy = u_xlat0.zx / u_xlat9.xx;
    u_xlat0.xyz = u_xlat5.xyz * vec3(0.100000001, 1.0, 0.100000001) + u_xlat0.xyz;
    u_xlat6.yz = u_xlat9.xy + vec2(-1.0, -1.0);
    u_xlat9.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9.x = max(u_xlat9.x, 0.00100000005);
    u_xlat9.x = inversesqrt(u_xlat9.x);
    u_xlat0.xyz = u_xlat0.xyz * u_xlat9.xxx;
    u_xlat9.x = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat9.x = sqrt(u_xlat9.x);
    u_xlat7.xyz = u_xlat5.xyz * vec3(0.100000001, 1.0, 0.100000001);
    u_xlat0.xyz = u_xlat0.xyz * u_xlat9.xxx + (-u_xlat7.xyz);
    u_xlat7.xyz = u_xlat2.xyz + u_xlat5.xyz;
    u_xlat9.xy = u_xlat2.xz + (-_WorldOffsetRange.xy);
    u_xlat9.xy = u_xlat9.xy + vec2(1.0, 1.0);
    u_xlat2.xy = vec2(_WorldOffsetRange.z + float(2.0), _WorldOffsetRange.w + float(2.0));
    u_xlat9.xy = u_xlat9.xy / u_xlat2.xy;
    u_xlat9.x = textureLod(_Heightmap, u_xlat9.xy, 0.0).x;
    u_xlat7.w = u_xlat9.x * _HeightScale + u_xlat7.y;
    u_xlat0.xyz = u_xlat0.xyz + u_xlat7.xwz;
    u_xlat0.xyz = u_xlat1.xxx * vec3(-0.5, 0.0, -0.5) + u_xlat0.xyz;
    u_xlat4.xz = u_xlat4.yy * (-u_xlat4.yy);
    u_xlat0.xyz = u_xlat4.xyz * u_xlat5.xyz + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVPZero[3];
    u_xlat3.y = 0.0;
    vs_TEXCOORD0.xyz = u_xlat3.xyz + vec3(-1.0, 0.0, -1.0);
    vs_TEXCOORD0.w = 0.0;
    u_xlat1.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xxx;
    u_xlat1.x = dot(u_xlat6.yz, u_xlat6.yz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat6.x = 0.0;
    u_xlat1.xyz = u_xlat1.xxx * u_xlat6.xyz;
    u_xlat2.xyz = in_NORMAL0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_NORMAL0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_NORMAL0.zzz + u_xlat2.xyz;
    u_xlat25 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat25 = inversesqrt(u_xlat25);
    u_xlat2.xyz = vec3(u_xlat25) * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
    u_xlat25 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat25 = inversesqrt(u_xlat25);
    u_xlat2.xyz = vec3(u_xlat25) * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.zxy * u_xlat1.yzx + (-u_xlat3.xyz);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
#ifdef UNITY_ADRENO_ES3
    { bool cond = 0.0<u_xlat0.x; u_xlati8 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati8 = int((0.0<u_xlat0.x) ? 0xFFFFFFFFu : uint(0u));
#endif
#ifdef UNITY_ADRENO_ES3
    { bool cond = u_xlat0.x<0.0; u_xlati0 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati0 = int((u_xlat0.x<0.0) ? 0xFFFFFFFFu : uint(0u));
#endif
    u_xlati0 = (-u_xlati8) + u_xlati0;
    u_xlat0.x = float(u_xlati0);
    vs_TEXCOORD1.xyz = u_xlat0.xxx * u_xlat1.xyz;
    vs_TEXCOORD1.w = 0.0;
    u_xlat0.x = u_xlat24 / _RootColorScale;
    u_xlat0.x = u_xlat0.x + _RootColorOffset;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xxx * vec3(-0.501960814, 0.0, 0.0) + vec3(0.501960814, 0.0, 0.0);
    u_xlat1.x = u_xlat24 + -0.600000024;
    vs_TEXCOORD3 = u_xlat24;
    u_xlat24 = max(u_xlat1.x, 0.0);
    u_xlat24 = _GrassTipLighting * u_xlat24 + 1.0;
    vs_TEXCOORD2.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    vs_TEXCOORD2.w = 0.0;
    vs_TEXCOORD4.xy = in_TEXCOORD2.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	float _GrassShininess;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	float _CutOff;
uniform 	vec4 _BurnedColor;
uniform lowp sampler2D _MainTex;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp float vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec4 u_xlat0;
lowp vec4 u_xlat10_0;
bool u_xlatb0;
vec3 u_xlat1;
mediump float u_xlat16_2;
float u_xlat9;
bool u_xlatb9;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD4.xy);
    u_xlat9 = u_xlat10_0.w + (-_CutOff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(u_xlat9<0.0);
#else
    u_xlatb9 = u_xlat9<0.0;
#endif
    if((int(u_xlatb9) * int(0xffffffffu))!=0){discard;}
    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
    SV_Target0.xyz = u_xlat1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0;
    u_xlat1.xyz = _BurnedColor.xyz * u_xlat10_0.xyz + (-u_xlat10_0.xyz);
    u_xlat0.xyz = vs_TEXCOORD2.www * u_xlat1.xyz + u_xlat10_0.xyz;
    u_xlat0.w = vs_TEXCOORD3;
    SV_Target1 = u_xlat0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_2 = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb0) ? u_xlat16_2 : 0.0399999991;
    u_xlat0.x = (-vs_TEXCOORD2.w) + 1.0;
    u_xlat0.x = u_xlat0.x * _GrassShininess;
    SV_Target2.w = u_xlat0.x;
    SV_Target2.xy = vec2(0.0399999991, 0.0399999991);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "MHY_SHADER_LOW" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	int unity_BaseInstanceID;
uniform 	float _NoiseScale;
uniform 	vec4 _WorldOffsetRange;
uniform 	float _HeightScale;
uniform 	float _Billboard;
uniform 	vec4 _LargeWindParam;
uniform 	vec4 _GlobalWind;
uniform 	float _GrassTipLighting;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BurnedColor;
uniform 	float _RootColorScale;
uniform 	float _RootColorOffset;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _Heightmap;
uniform lowp sampler2D _Noisemap;
in highp vec4 in_POSITION0;
in highp vec4 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec2 in_TEXCOORD2;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp float vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec3 u_xlat0;
uvec3 u_xlatu0;
vec4 u_xlat1;
int u_xlati1;
uvec3 u_xlatu1;
vec3 u_xlat2;
uvec2 u_xlatu2;
vec4 u_xlat3;
vec3 u_xlat4;
vec4 u_xlat5;
vec4 u_xlat6;
vec2 u_xlat7;
float u_xlat8;
uint u_xlatu8;
float u_xlat9;
int u_xlati9;
vec3 u_xlat11;
vec2 u_xlat17;
float u_xlat24;
int u_xlati24;
float u_xlat25;
bool u_xlatb25;
float u_xlat26;
uint u_xlatu26;
float u_xlat28;
void main()
{
    u_xlat0.y = 0.0;
    u_xlat24 = dot(_GlobalWind.xyz, _GlobalWind.xyz);
    u_xlat24 = max(u_xlat24, 0.00100000005);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat1 = vec4(u_xlat24) * _GlobalWind.xzxz;
    u_xlat17.xy = vec2(u_xlat1.z * _LargeWindParam.z, u_xlat1.w * _LargeWindParam.z);
    u_xlati24 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati24 = u_xlati24 << 2;
    u_xlat2.xyz = in_TEXCOORD0.yyy * unity_Builtins0Array[u_xlati24 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz;
    u_xlat2.xyz = unity_Builtins0Array[u_xlati24 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_TEXCOORD0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz + unity_Builtins0Array[u_xlati24 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat3.xy = u_xlat2.xz / vec2(_NoiseScale);
    u_xlat1.xy = _LargeWindParam.xx * u_xlat1.xy + u_xlat3.xy;
    u_xlat1.xy = textureLod(_Noisemap, u_xlat1.xy, 0.0).xy;
    u_xlat1.xy = u_xlat1.xy + vec2(-0.5, -0.5);
    u_xlat1.xy = u_xlat1.xy * _LargeWindParam.yy + vec2(0.5, 0.5);
    u_xlat26 = float(floatBitsToUint(unity_Builtins0Array[u_xlati24 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2]).w);
    u_xlat26 = u_xlat26 * 5.96046448e-08;
    u_xlatu26 = uint(u_xlat26);
    u_xlatu26 = u_xlatu26 & 3u;
    u_xlat26 = float(u_xlatu26);
    u_xlat3.x = (-in_TEXCOORD1.x) + unity_Builtins0Array[u_xlati24 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].x;
    u_xlat11.x = fract(u_xlat3.x);
    u_xlat3.x = u_xlat3.x + unity_Builtins0Array[u_xlati24 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].y;
    u_xlat3.xz = u_xlat3.xx * vec2(22.0, 33.0);
    u_xlat3.xz = fract(u_xlat3.xz);
    u_xlat3.xz = u_xlat3.xz + vec2(-0.5, -0.5);
    u_xlat4.xz = u_xlat3.xz * vec2(0.200000003, 0.200000003);
    u_xlat26 = u_xlat26 + u_xlat11.x;
    u_xlat26 = u_xlat26 + -0.5;
    u_xlat3.x = u_xlat26 * 0.333000004;
    u_xlat5.y = u_xlat26 * 0.333000004 + -1.0;
    u_xlat26 = in_TEXCOORD1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat26 = min(max(u_xlat26, 0.0), 1.0);
#else
    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);
#endif
    u_xlat3.x = u_xlat3.x * u_xlat26;
    u_xlat1.xy = u_xlat1.xy * u_xlat3.xx;
    u_xlat0.xz = u_xlat17.xy * u_xlat1.xy;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[0].x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[2].x;
    u_xlat17.x = dot(u_xlat1.xy, u_xlat1.xy);
    u_xlat17.x = inversesqrt(u_xlat17.x);
    u_xlat1.xy = u_xlat17.xx * u_xlat1.xy;
    u_xlat11.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati24 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat11.xyz = unity_Builtins0Array[u_xlati24 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat11.xyz;
    u_xlat11.xyz = unity_Builtins0Array[u_xlati24 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat11.xyz;
    u_xlat11.xyz = u_xlat11.xyz + unity_Builtins0Array[u_xlati24 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat11.xyz = (-u_xlat2.xyz) + u_xlat11.xyz;
    u_xlat6.x = unity_Builtins0Array[u_xlati24 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].x;
    u_xlat6.y = unity_Builtins0Array[u_xlati24 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].x;
    u_xlat17.x = dot(u_xlat6.xy, u_xlat6.xy);
    u_xlat17.x = inversesqrt(u_xlat17.x);
    u_xlat17.xy = u_xlat17.xx * u_xlat6.xy;
    u_xlat28 = u_xlat17.y * u_xlat11.z;
    u_xlat28 = u_xlat11.x * u_xlat17.x + (-u_xlat28);
    u_xlat17.x = dot(u_xlat11.zx, u_xlat17.xy);
    u_xlat17.xy = u_xlat1.xy * u_xlat17.xx;
    u_xlat9 = u_xlat28 * u_xlat1.y + (-u_xlat17.x);
    u_xlat1.x = u_xlat28 * u_xlat1.x + u_xlat17.y;
    u_xlat1.x = u_xlat11.z + u_xlat1.x;
    u_xlat11.z = (-u_xlat1.x) * _Billboard + u_xlat11.z;
    u_xlat1.x = u_xlat11.x + u_xlat9;
    u_xlat11.x = (-u_xlat1.x) * _Billboard + u_xlat11.x;
    u_xlat1.xyz = u_xlat11.xyz * vec3(0.100000001, 1.0, 0.100000001) + u_xlat0.xyz;
    u_xlat8 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat8 = max(u_xlat8, 0.00100000005);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat1.xyz = vec3(u_xlat8) * u_xlat1.xyz;
    u_xlat8 = dot(u_xlat11.xyz, u_xlat11.xyz);
    u_xlat8 = sqrt(u_xlat8);
    u_xlat6.xyz = u_xlat11.xyz * vec3(0.100000001, 1.0, 0.100000001);
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat8) + (-u_xlat6.xyz);
    u_xlat6.xyz = u_xlat2.xyz + u_xlat11.xyz;
    u_xlat2.xy = u_xlat2.xz + (-_WorldOffsetRange.xy);
    u_xlat2.xy = u_xlat2.xy + vec2(1.0, 1.0);
    u_xlat7.xy = vec2(_WorldOffsetRange.z + float(2.0), _WorldOffsetRange.w + float(2.0));
    u_xlat2.xy = u_xlat2.xy / u_xlat7.xy;
    u_xlat8 = textureLod(_Heightmap, u_xlat2.xy, 0.0).x;
    u_xlat6.w = u_xlat8 * _HeightScale + u_xlat6.y;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat6.xwz;
    u_xlatu2.xy = uvec2(65280u, 255u) & floatBitsToUint(unity_Builtins0Array[u_xlati24 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1]).ww;
    u_xlat2.xy = vec2(u_xlatu2.xy);
    u_xlat8 = u_xlat2.x * 0.00390625;
    u_xlat2.z = u_xlat2.y + -127.0;
    u_xlatu8 = uint(u_xlat8);
    u_xlat8 = float(u_xlatu8);
    u_xlat2.x = u_xlat8 + -127.0;
    u_xlat6.xy = u_xlat2.xz * vec2(0.00787401572, 0.00787401572);
    u_xlat6.xy = u_xlat6.xy * u_xlat6.xy;
    u_xlat8 = u_xlat6.y + u_xlat6.x;
    u_xlat8 = (-u_xlat8) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb25 = !!(0.0<u_xlat8);
#else
    u_xlatb25 = 0.0<u_xlat8;
#endif
    u_xlat8 = sqrt(u_xlat8);
    u_xlat2.y = u_xlatb25 ? u_xlat8 : float(0.0);
    u_xlat6.xyz = u_xlat2.xyz * u_xlat11.yyy;
    u_xlat6.xyz = u_xlat3.xxx * u_xlat6.xyz;
    u_xlat8 = max(u_xlat3.x, 9.99999972e-10);
    u_xlat0.yz = u_xlat0.zx / vec2(u_xlat8);
    u_xlat1.xyz = u_xlat6.xyz * vec3(0.00393700786, 0.0, 0.00393700786) + u_xlat1.xyz;
    u_xlat5.xz = u_xlat5.yy * (-u_xlat5.yy);
    u_xlat1.xyz = u_xlat5.xyz * u_xlat11.xyz + u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat5 = u_xlat3.yyyy * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat5 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat3.xxxx + u_xlat5;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat3.zzzz + u_xlat5;
    gl_Position = u_xlat3 + hlslcc_mtx4x4unity_MatrixVPZero[3];
    u_xlat4.y = 0.0;
    vs_TEXCOORD0.xyz = u_xlat2.xyz * vec3(0.00787401572, 1.0, 0.00787401572) + u_xlat4.xyz;
    vs_TEXCOORD0.w = 0.0;
    u_xlat0.x = 0.0;
    u_xlat0.xyz = u_xlat2.yzx * vec3(1.0, 0.00787401572, 0.00787401572) + u_xlat0.xyz;
    u_xlat25 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat25 = inversesqrt(u_xlat25);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat25);
    u_xlat2.xyz = in_NORMAL0.yyy * unity_Builtins0Array[u_xlati24 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat2.xyz = unity_Builtins0Array[u_xlati24 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_NORMAL0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = unity_Builtins0Array[u_xlati24 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_NORMAL0.zzz + u_xlat2.xyz;
    u_xlat25 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat25 = inversesqrt(u_xlat25);
    u_xlat2.xyz = vec3(u_xlat25) * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat0.xyz * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat0.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
    u_xlat25 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat25 = inversesqrt(u_xlat25);
    u_xlat2.xyz = vec3(u_xlat25) * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat0.xyz * u_xlat2.xyz;
    u_xlat0.xyz = u_xlat2.zxy * u_xlat0.yzx + (-u_xlat3.xyz);
    u_xlat25 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat25 = inversesqrt(u_xlat25);
    u_xlat1.xyz = vec3(u_xlat25) * u_xlat1.xyz;
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat0.xyz);
#ifdef UNITY_ADRENO_ES3
    { bool cond = 0.0<u_xlat1.x; u_xlati9 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati9 = int((0.0<u_xlat1.x) ? 0xFFFFFFFFu : uint(0u));
#endif
#ifdef UNITY_ADRENO_ES3
    { bool cond = u_xlat1.x<0.0; u_xlati1 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati1 = int((u_xlat1.x<0.0) ? 0xFFFFFFFFu : uint(0u));
#endif
    u_xlati1 = (-u_xlati9) + u_xlati1;
    u_xlat1.x = float(u_xlati1);
    vs_TEXCOORD1.xyz = u_xlat0.xyz * u_xlat1.xxx;
    vs_TEXCOORD1.w = 0.0;
    u_xlatu0.xyz = uvec3(16711680u, 65280u, 255u) & floatBitsToUint(unity_Builtins0Array[u_xlati24 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2]).www;
    u_xlat0.xyz = vec3(u_xlatu0.xyz);
    u_xlatu1.xyz = uvec3(16711680u, 65280u, 255u) & floatBitsToUint(unity_Builtins0Array[u_xlati24 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3]).www;
    u_xlat24 = max(1.0, unity_Builtins0Array[u_xlati24 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].w);
    u_xlat24 = min(u_xlat24, 2.0);
    u_xlat24 = u_xlat24 + -1.0;
    u_xlat1.xyz = vec3(u_xlatu1.xyz);
    u_xlat1.xyz = u_xlat1.xyz * vec3(5.9838392e-08, 1.53186284e-05, 0.00392156886);
    u_xlat0.xyz = u_xlat0.xyz * vec3(5.9838392e-08, 1.53186284e-05, 0.00392156886) + (-u_xlat1.xyz);
    u_xlat25 = u_xlat26 / _RootColorScale;
    u_xlat25 = u_xlat25 + _RootColorOffset;
#ifdef UNITY_ADRENO_ES3
    u_xlat25 = min(max(u_xlat25, 0.0), 1.0);
#else
    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
#endif
    u_xlat0.xyz = vec3(u_xlat25) * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat1.xyz = (-u_xlat0.xyz) + _BurnedColor.xyz;
    u_xlat0.xyz = vec3(u_xlat24) * u_xlat1.xyz + u_xlat0.xyz;
    vs_TEXCOORD2.w = u_xlat24;
    u_xlat24 = u_xlat26 + -0.600000024;
    vs_TEXCOORD3 = u_xlat26;
    u_xlat24 = max(u_xlat24, 0.0);
    u_xlat24 = _GrassTipLighting * u_xlat24 + 1.0;
    vs_TEXCOORD2.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    vs_TEXCOORD4.xy = in_TEXCOORD2.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	float _GrassShininess;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	float _CutOff;
uniform 	vec4 _BurnedColor;
uniform lowp sampler2D _MainTex;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp float vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec4 u_xlat0;
lowp vec4 u_xlat10_0;
bool u_xlatb0;
vec3 u_xlat1;
mediump float u_xlat16_2;
float u_xlat9;
bool u_xlatb9;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD4.xy);
    u_xlat9 = u_xlat10_0.w + (-_CutOff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(u_xlat9<0.0);
#else
    u_xlatb9 = u_xlat9<0.0;
#endif
    if((int(u_xlatb9) * int(0xffffffffu))!=0){discard;}
    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
    SV_Target0.xyz = u_xlat1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0;
    u_xlat1.xyz = _BurnedColor.xyz * u_xlat10_0.xyz + (-u_xlat10_0.xyz);
    u_xlat0.xyz = vs_TEXCOORD2.www * u_xlat1.xyz + u_xlat10_0.xyz;
    u_xlat0.w = vs_TEXCOORD3;
    SV_Target1 = u_xlat0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_2 = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb0) ? u_xlat16_2 : 0.0399999991;
    u_xlat0.x = (-vs_TEXCOORD2.w) + 1.0;
    u_xlat0.x = u_xlat0.x * _GrassShininess;
    SV_Target2.w = u_xlat0.x;
    SV_Target2.xy = vec2(0.0399999991, 0.0399999991);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "MHY_SHADER_LOW" "DITHER_FADE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	float _NoiseScale;
uniform 	vec4 _WorldOffsetRange;
uniform 	float _HeightScale;
uniform 	float _Billboard;
uniform 	vec4 _LargeWindParam;
uniform 	vec4 _GlobalWind;
uniform 	float _GrassTipLighting;
uniform 	vec4 _MainTex_ST;
uniform 	float _RootColorScale;
uniform 	float _RootColorOffset;
uniform highp sampler2D _Heightmap;
uniform lowp sampler2D _Noisemap;
in highp vec4 in_POSITION0;
in highp vec4 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec2 in_TEXCOORD2;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp float vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec3 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
vec3 u_xlat5;
vec3 u_xlat6;
vec4 u_xlat7;
int u_xlati8;
vec2 u_xlat9;
vec2 u_xlat17;
float u_xlat24;
float u_xlat25;
float u_xlat26;
float u_xlat27;
void main()
{
    u_xlat0.y = 0.0;
    u_xlat24 = dot(_GlobalWind.xyz, _GlobalWind.xyz);
    u_xlat24 = max(u_xlat24, 0.00100000005);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat1 = vec4(u_xlat24) * _GlobalWind.xzxz;
    u_xlat17.xy = vec2(u_xlat1.z * _LargeWindParam.z, u_xlat1.w * _LargeWindParam.z);
    u_xlat2.xyz = in_TEXCOORD0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[2].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TEXCOORD0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat3.xy = u_xlat2.xz / vec2(_NoiseScale);
    u_xlat1.xy = _LargeWindParam.xx * u_xlat1.xy + u_xlat3.xy;
    u_xlat1.xy = textureLod(_Noisemap, u_xlat1.xy, 0.0).xy;
    u_xlat1.xy = u_xlat1.xy + vec2(-0.5, -0.5);
    u_xlat1.xy = u_xlat1.xy * _LargeWindParam.yy + vec2(0.5, 0.5);
    u_xlat24 = (-in_TEXCOORD1.x) + hlslcc_mtx4x4unity_ObjectToWorld[1].x;
    u_xlat26 = fract(u_xlat24);
    u_xlat24 = u_xlat24 + hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat3.xy = vec2(u_xlat24) * vec2(22.0, 33.0);
    u_xlat3.xy = fract(u_xlat3.xy);
    u_xlat3.xy = u_xlat3.xy + vec2(-0.5, -0.5);
    u_xlat3.xz = u_xlat3.xy * vec2(0.200000003, 0.200000003);
    u_xlat24 = u_xlat26 + -0.5;
    u_xlat26 = u_xlat24 * 0.333000004;
    u_xlat4.y = u_xlat24 * 0.333000004 + -1.0;
    u_xlat24 = in_TEXCOORD1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat26 = u_xlat26 * u_xlat24;
    u_xlat1.xy = u_xlat1.xy * vec2(u_xlat26);
    u_xlat0.xz = u_xlat17.xy * u_xlat1.xy;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[0].x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[2].x;
    u_xlat17.x = dot(u_xlat1.xy, u_xlat1.xy);
    u_xlat17.x = inversesqrt(u_xlat17.x);
    u_xlat1.xy = u_xlat17.xx * u_xlat1.xy;
    u_xlat5.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;
    u_xlat5.y = hlslcc_mtx4x4unity_ObjectToWorld[2].x;
    u_xlat17.x = dot(u_xlat5.xy, u_xlat5.xy);
    u_xlat17.x = inversesqrt(u_xlat17.x);
    u_xlat17.xy = u_xlat17.xx * u_xlat5.xy;
    u_xlat5.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat5.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat5.xyz;
    u_xlat5.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat5.xyz;
    u_xlat5.xyz = u_xlat5.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat5.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
    u_xlat27 = u_xlat17.y * u_xlat5.z;
    u_xlat27 = u_xlat5.x * u_xlat17.x + (-u_xlat27);
    u_xlat17.x = dot(u_xlat5.zx, u_xlat17.xy);
    u_xlat17.xy = u_xlat1.xy * u_xlat17.xx;
    u_xlat9.x = u_xlat27 * u_xlat1.y + (-u_xlat17.x);
    u_xlat1.x = u_xlat27 * u_xlat1.x + u_xlat17.y;
    u_xlat1.x = u_xlat5.z + u_xlat1.x;
    u_xlat5.z = (-u_xlat1.x) * _Billboard + u_xlat5.z;
    u_xlat1.x = u_xlat5.x + u_xlat9.x;
    u_xlat5.x = (-u_xlat1.x) * _Billboard + u_xlat5.x;
    u_xlat1.x = u_xlat26 * u_xlat5.y;
    u_xlat9.x = max(u_xlat26, 9.99999972e-10);
    u_xlat9.xy = u_xlat0.zx / u_xlat9.xx;
    u_xlat0.xyz = u_xlat5.xyz * vec3(0.100000001, 1.0, 0.100000001) + u_xlat0.xyz;
    u_xlat6.yz = u_xlat9.xy + vec2(-1.0, -1.0);
    u_xlat9.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9.x = max(u_xlat9.x, 0.00100000005);
    u_xlat9.x = inversesqrt(u_xlat9.x);
    u_xlat0.xyz = u_xlat0.xyz * u_xlat9.xxx;
    u_xlat9.x = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat9.x = sqrt(u_xlat9.x);
    u_xlat7.xyz = u_xlat5.xyz * vec3(0.100000001, 1.0, 0.100000001);
    u_xlat0.xyz = u_xlat0.xyz * u_xlat9.xxx + (-u_xlat7.xyz);
    u_xlat7.xyz = u_xlat2.xyz + u_xlat5.xyz;
    u_xlat9.xy = u_xlat2.xz + (-_WorldOffsetRange.xy);
    u_xlat9.xy = u_xlat9.xy + vec2(1.0, 1.0);
    u_xlat2.xy = vec2(_WorldOffsetRange.z + float(2.0), _WorldOffsetRange.w + float(2.0));
    u_xlat9.xy = u_xlat9.xy / u_xlat2.xy;
    u_xlat9.x = textureLod(_Heightmap, u_xlat9.xy, 0.0).x;
    u_xlat7.w = u_xlat9.x * _HeightScale + u_xlat7.y;
    u_xlat0.xyz = u_xlat0.xyz + u_xlat7.xwz;
    u_xlat0.xyz = u_xlat1.xxx * vec3(-0.5, 0.0, -0.5) + u_xlat0.xyz;
    u_xlat4.xz = u_xlat4.yy * (-u_xlat4.yy);
    u_xlat0.xyz = u_xlat4.xyz * u_xlat5.xyz + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVPZero[3];
    u_xlat3.y = 0.0;
    vs_TEXCOORD0.xyz = u_xlat3.xyz + vec3(-1.0, 0.0, -1.0);
    vs_TEXCOORD0.w = 0.0;
    u_xlat1.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xxx;
    u_xlat1.x = dot(u_xlat6.yz, u_xlat6.yz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat6.x = 0.0;
    u_xlat1.xyz = u_xlat1.xxx * u_xlat6.xyz;
    u_xlat2.xyz = in_NORMAL0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_NORMAL0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_NORMAL0.zzz + u_xlat2.xyz;
    u_xlat25 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat25 = inversesqrt(u_xlat25);
    u_xlat2.xyz = vec3(u_xlat25) * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
    u_xlat25 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat25 = inversesqrt(u_xlat25);
    u_xlat2.xyz = vec3(u_xlat25) * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.zxy * u_xlat1.yzx + (-u_xlat3.xyz);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
#ifdef UNITY_ADRENO_ES3
    { bool cond = 0.0<u_xlat0.x; u_xlati8 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati8 = int((0.0<u_xlat0.x) ? 0xFFFFFFFFu : uint(0u));
#endif
#ifdef UNITY_ADRENO_ES3
    { bool cond = u_xlat0.x<0.0; u_xlati0 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati0 = int((u_xlat0.x<0.0) ? 0xFFFFFFFFu : uint(0u));
#endif
    u_xlati0 = (-u_xlati8) + u_xlati0;
    u_xlat0.x = float(u_xlati0);
    vs_TEXCOORD1.xyz = u_xlat0.xxx * u_xlat1.xyz;
    vs_TEXCOORD1.w = 0.0;
    u_xlat0.x = u_xlat24 / _RootColorScale;
    u_xlat0.x = u_xlat0.x + _RootColorOffset;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xxx * vec3(-0.501960814, 0.0, 0.0) + vec3(0.501960814, 0.0, 0.0);
    u_xlat1.x = u_xlat24 + -0.600000024;
    vs_TEXCOORD3 = u_xlat24;
    u_xlat24 = max(u_xlat1.x, 0.0);
    u_xlat24 = _GrassTipLighting * u_xlat24 + 1.0;
    vs_TEXCOORD2.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    vs_TEXCOORD2.w = 0.0;
    vs_TEXCOORD4.xy = in_TEXCOORD2.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	float _GrassShininess;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	float _CutOff;
uniform 	vec4 _BurnedColor;
uniform lowp sampler2D _MainTex;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp float vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec4 u_xlat0;
lowp vec4 u_xlat10_0;
bool u_xlatb0;
vec3 u_xlat1;
mediump float u_xlat16_2;
float u_xlat9;
bool u_xlatb9;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD4.xy);
    u_xlat9 = u_xlat10_0.w + (-_CutOff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(u_xlat9<0.0);
#else
    u_xlatb9 = u_xlat9<0.0;
#endif
    if((int(u_xlatb9) * int(0xffffffffu))!=0){discard;}
    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
    SV_Target0.xyz = u_xlat1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0;
    u_xlat1.xyz = _BurnedColor.xyz * u_xlat10_0.xyz + (-u_xlat10_0.xyz);
    u_xlat0.xyz = vs_TEXCOORD2.www * u_xlat1.xyz + u_xlat10_0.xyz;
    u_xlat0.w = vs_TEXCOORD3;
    SV_Target1 = u_xlat0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_2 = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb0) ? u_xlat16_2 : 0.0399999991;
    u_xlat0.x = (-vs_TEXCOORD2.w) + 1.0;
    u_xlat0.x = u_xlat0.x * _GrassShininess;
    SV_Target2.w = u_xlat0.x;
    SV_Target2.xy = vec2(0.0399999991, 0.0399999991);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "MHY_SHADER_LOW" "DITHER_FADE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	int unity_BaseInstanceID;
uniform 	float _NoiseScale;
uniform 	vec4 _WorldOffsetRange;
uniform 	float _HeightScale;
uniform 	float _Billboard;
uniform 	vec4 _LargeWindParam;
uniform 	vec4 _GlobalWind;
uniform 	float _GrassTipLighting;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BurnedColor;
uniform 	float _RootColorScale;
uniform 	float _RootColorOffset;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _Heightmap;
uniform lowp sampler2D _Noisemap;
in highp vec4 in_POSITION0;
in highp vec4 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec2 in_TEXCOORD2;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp float vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec3 u_xlat0;
uvec3 u_xlatu0;
vec4 u_xlat1;
int u_xlati1;
uvec3 u_xlatu1;
vec3 u_xlat2;
uvec2 u_xlatu2;
vec4 u_xlat3;
vec3 u_xlat4;
vec4 u_xlat5;
vec4 u_xlat6;
vec2 u_xlat7;
float u_xlat8;
uint u_xlatu8;
float u_xlat9;
int u_xlati9;
vec3 u_xlat11;
vec2 u_xlat17;
float u_xlat24;
int u_xlati24;
float u_xlat25;
bool u_xlatb25;
float u_xlat26;
uint u_xlatu26;
float u_xlat28;
void main()
{
    u_xlat0.y = 0.0;
    u_xlat24 = dot(_GlobalWind.xyz, _GlobalWind.xyz);
    u_xlat24 = max(u_xlat24, 0.00100000005);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat1 = vec4(u_xlat24) * _GlobalWind.xzxz;
    u_xlat17.xy = vec2(u_xlat1.z * _LargeWindParam.z, u_xlat1.w * _LargeWindParam.z);
    u_xlati24 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati24 = u_xlati24 << 2;
    u_xlat2.xyz = in_TEXCOORD0.yyy * unity_Builtins0Array[u_xlati24 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz;
    u_xlat2.xyz = unity_Builtins0Array[u_xlati24 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_TEXCOORD0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz + unity_Builtins0Array[u_xlati24 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat3.xy = u_xlat2.xz / vec2(_NoiseScale);
    u_xlat1.xy = _LargeWindParam.xx * u_xlat1.xy + u_xlat3.xy;
    u_xlat1.xy = textureLod(_Noisemap, u_xlat1.xy, 0.0).xy;
    u_xlat1.xy = u_xlat1.xy + vec2(-0.5, -0.5);
    u_xlat1.xy = u_xlat1.xy * _LargeWindParam.yy + vec2(0.5, 0.5);
    u_xlat26 = float(floatBitsToUint(unity_Builtins0Array[u_xlati24 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2]).w);
    u_xlat26 = u_xlat26 * 5.96046448e-08;
    u_xlatu26 = uint(u_xlat26);
    u_xlatu26 = u_xlatu26 & 3u;
    u_xlat26 = float(u_xlatu26);
    u_xlat3.x = (-in_TEXCOORD1.x) + unity_Builtins0Array[u_xlati24 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].x;
    u_xlat11.x = fract(u_xlat3.x);
    u_xlat3.x = u_xlat3.x + unity_Builtins0Array[u_xlati24 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].y;
    u_xlat3.xz = u_xlat3.xx * vec2(22.0, 33.0);
    u_xlat3.xz = fract(u_xlat3.xz);
    u_xlat3.xz = u_xlat3.xz + vec2(-0.5, -0.5);
    u_xlat4.xz = u_xlat3.xz * vec2(0.200000003, 0.200000003);
    u_xlat26 = u_xlat26 + u_xlat11.x;
    u_xlat26 = u_xlat26 + -0.5;
    u_xlat3.x = u_xlat26 * 0.333000004;
    u_xlat5.y = u_xlat26 * 0.333000004 + -1.0;
    u_xlat26 = in_TEXCOORD1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat26 = min(max(u_xlat26, 0.0), 1.0);
#else
    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);
#endif
    u_xlat3.x = u_xlat3.x * u_xlat26;
    u_xlat1.xy = u_xlat1.xy * u_xlat3.xx;
    u_xlat0.xz = u_xlat17.xy * u_xlat1.xy;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[0].x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[2].x;
    u_xlat17.x = dot(u_xlat1.xy, u_xlat1.xy);
    u_xlat17.x = inversesqrt(u_xlat17.x);
    u_xlat1.xy = u_xlat17.xx * u_xlat1.xy;
    u_xlat11.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati24 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat11.xyz = unity_Builtins0Array[u_xlati24 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat11.xyz;
    u_xlat11.xyz = unity_Builtins0Array[u_xlati24 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat11.xyz;
    u_xlat11.xyz = u_xlat11.xyz + unity_Builtins0Array[u_xlati24 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat11.xyz = (-u_xlat2.xyz) + u_xlat11.xyz;
    u_xlat6.x = unity_Builtins0Array[u_xlati24 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].x;
    u_xlat6.y = unity_Builtins0Array[u_xlati24 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].x;
    u_xlat17.x = dot(u_xlat6.xy, u_xlat6.xy);
    u_xlat17.x = inversesqrt(u_xlat17.x);
    u_xlat17.xy = u_xlat17.xx * u_xlat6.xy;
    u_xlat28 = u_xlat17.y * u_xlat11.z;
    u_xlat28 = u_xlat11.x * u_xlat17.x + (-u_xlat28);
    u_xlat17.x = dot(u_xlat11.zx, u_xlat17.xy);
    u_xlat17.xy = u_xlat1.xy * u_xlat17.xx;
    u_xlat9 = u_xlat28 * u_xlat1.y + (-u_xlat17.x);
    u_xlat1.x = u_xlat28 * u_xlat1.x + u_xlat17.y;
    u_xlat1.x = u_xlat11.z + u_xlat1.x;
    u_xlat11.z = (-u_xlat1.x) * _Billboard + u_xlat11.z;
    u_xlat1.x = u_xlat11.x + u_xlat9;
    u_xlat11.x = (-u_xlat1.x) * _Billboard + u_xlat11.x;
    u_xlat1.xyz = u_xlat11.xyz * vec3(0.100000001, 1.0, 0.100000001) + u_xlat0.xyz;
    u_xlat8 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat8 = max(u_xlat8, 0.00100000005);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat1.xyz = vec3(u_xlat8) * u_xlat1.xyz;
    u_xlat8 = dot(u_xlat11.xyz, u_xlat11.xyz);
    u_xlat8 = sqrt(u_xlat8);
    u_xlat6.xyz = u_xlat11.xyz * vec3(0.100000001, 1.0, 0.100000001);
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat8) + (-u_xlat6.xyz);
    u_xlat6.xyz = u_xlat2.xyz + u_xlat11.xyz;
    u_xlat2.xy = u_xlat2.xz + (-_WorldOffsetRange.xy);
    u_xlat2.xy = u_xlat2.xy + vec2(1.0, 1.0);
    u_xlat7.xy = vec2(_WorldOffsetRange.z + float(2.0), _WorldOffsetRange.w + float(2.0));
    u_xlat2.xy = u_xlat2.xy / u_xlat7.xy;
    u_xlat8 = textureLod(_Heightmap, u_xlat2.xy, 0.0).x;
    u_xlat6.w = u_xlat8 * _HeightScale + u_xlat6.y;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat6.xwz;
    u_xlatu2.xy = uvec2(65280u, 255u) & floatBitsToUint(unity_Builtins0Array[u_xlati24 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1]).ww;
    u_xlat2.xy = vec2(u_xlatu2.xy);
    u_xlat8 = u_xlat2.x * 0.00390625;
    u_xlat2.z = u_xlat2.y + -127.0;
    u_xlatu8 = uint(u_xlat8);
    u_xlat8 = float(u_xlatu8);
    u_xlat2.x = u_xlat8 + -127.0;
    u_xlat6.xy = u_xlat2.xz * vec2(0.00787401572, 0.00787401572);
    u_xlat6.xy = u_xlat6.xy * u_xlat6.xy;
    u_xlat8 = u_xlat6.y + u_xlat6.x;
    u_xlat8 = (-u_xlat8) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb25 = !!(0.0<u_xlat8);
#else
    u_xlatb25 = 0.0<u_xlat8;
#endif
    u_xlat8 = sqrt(u_xlat8);
    u_xlat2.y = u_xlatb25 ? u_xlat8 : float(0.0);
    u_xlat6.xyz = u_xlat2.xyz * u_xlat11.yyy;
    u_xlat6.xyz = u_xlat3.xxx * u_xlat6.xyz;
    u_xlat8 = max(u_xlat3.x, 9.99999972e-10);
    u_xlat0.yz = u_xlat0.zx / vec2(u_xlat8);
    u_xlat1.xyz = u_xlat6.xyz * vec3(0.00393700786, 0.0, 0.00393700786) + u_xlat1.xyz;
    u_xlat5.xz = u_xlat5.yy * (-u_xlat5.yy);
    u_xlat1.xyz = u_xlat5.xyz * u_xlat11.xyz + u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat5 = u_xlat3.yyyy * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat5 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat3.xxxx + u_xlat5;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat3.zzzz + u_xlat5;
    gl_Position = u_xlat3 + hlslcc_mtx4x4unity_MatrixVPZero[3];
    u_xlat4.y = 0.0;
    vs_TEXCOORD0.xyz = u_xlat2.xyz * vec3(0.00787401572, 1.0, 0.00787401572) + u_xlat4.xyz;
    vs_TEXCOORD0.w = 0.0;
    u_xlat0.x = 0.0;
    u_xlat0.xyz = u_xlat2.yzx * vec3(1.0, 0.00787401572, 0.00787401572) + u_xlat0.xyz;
    u_xlat25 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat25 = inversesqrt(u_xlat25);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat25);
    u_xlat2.xyz = in_NORMAL0.yyy * unity_Builtins0Array[u_xlati24 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat2.xyz = unity_Builtins0Array[u_xlati24 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_NORMAL0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = unity_Builtins0Array[u_xlati24 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_NORMAL0.zzz + u_xlat2.xyz;
    u_xlat25 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat25 = inversesqrt(u_xlat25);
    u_xlat2.xyz = vec3(u_xlat25) * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat0.xyz * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat0.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
    u_xlat25 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat25 = inversesqrt(u_xlat25);
    u_xlat2.xyz = vec3(u_xlat25) * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat0.xyz * u_xlat2.xyz;
    u_xlat0.xyz = u_xlat2.zxy * u_xlat0.yzx + (-u_xlat3.xyz);
    u_xlat25 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat25 = inversesqrt(u_xlat25);
    u_xlat1.xyz = vec3(u_xlat25) * u_xlat1.xyz;
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat0.xyz);
#ifdef UNITY_ADRENO_ES3
    { bool cond = 0.0<u_xlat1.x; u_xlati9 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati9 = int((0.0<u_xlat1.x) ? 0xFFFFFFFFu : uint(0u));
#endif
#ifdef UNITY_ADRENO_ES3
    { bool cond = u_xlat1.x<0.0; u_xlati1 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati1 = int((u_xlat1.x<0.0) ? 0xFFFFFFFFu : uint(0u));
#endif
    u_xlati1 = (-u_xlati9) + u_xlati1;
    u_xlat1.x = float(u_xlati1);
    vs_TEXCOORD1.xyz = u_xlat0.xyz * u_xlat1.xxx;
    vs_TEXCOORD1.w = 0.0;
    u_xlatu0.xyz = uvec3(16711680u, 65280u, 255u) & floatBitsToUint(unity_Builtins0Array[u_xlati24 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2]).www;
    u_xlat0.xyz = vec3(u_xlatu0.xyz);
    u_xlatu1.xyz = uvec3(16711680u, 65280u, 255u) & floatBitsToUint(unity_Builtins0Array[u_xlati24 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3]).www;
    u_xlat24 = max(1.0, unity_Builtins0Array[u_xlati24 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].w);
    u_xlat24 = min(u_xlat24, 2.0);
    u_xlat24 = u_xlat24 + -1.0;
    u_xlat1.xyz = vec3(u_xlatu1.xyz);
    u_xlat1.xyz = u_xlat1.xyz * vec3(5.9838392e-08, 1.53186284e-05, 0.00392156886);
    u_xlat0.xyz = u_xlat0.xyz * vec3(5.9838392e-08, 1.53186284e-05, 0.00392156886) + (-u_xlat1.xyz);
    u_xlat25 = u_xlat26 / _RootColorScale;
    u_xlat25 = u_xlat25 + _RootColorOffset;
#ifdef UNITY_ADRENO_ES3
    u_xlat25 = min(max(u_xlat25, 0.0), 1.0);
#else
    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
#endif
    u_xlat0.xyz = vec3(u_xlat25) * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat1.xyz = (-u_xlat0.xyz) + _BurnedColor.xyz;
    u_xlat0.xyz = vec3(u_xlat24) * u_xlat1.xyz + u_xlat0.xyz;
    vs_TEXCOORD2.w = u_xlat24;
    u_xlat24 = u_xlat26 + -0.600000024;
    vs_TEXCOORD3 = u_xlat26;
    u_xlat24 = max(u_xlat24, 0.0);
    u_xlat24 = _GrassTipLighting * u_xlat24 + 1.0;
    vs_TEXCOORD2.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    vs_TEXCOORD4.xy = in_TEXCOORD2.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	float _GrassShininess;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	float _CutOff;
uniform 	vec4 _BurnedColor;
uniform lowp sampler2D _MainTex;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp float vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec4 u_xlat0;
lowp vec4 u_xlat10_0;
bool u_xlatb0;
vec3 u_xlat1;
mediump float u_xlat16_2;
float u_xlat9;
bool u_xlatb9;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD4.xy);
    u_xlat9 = u_xlat10_0.w + (-_CutOff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(u_xlat9<0.0);
#else
    u_xlatb9 = u_xlat9<0.0;
#endif
    if((int(u_xlatb9) * int(0xffffffffu))!=0){discard;}
    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
    SV_Target0.xyz = u_xlat1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0;
    u_xlat1.xyz = _BurnedColor.xyz * u_xlat10_0.xyz + (-u_xlat10_0.xyz);
    u_xlat0.xyz = vs_TEXCOORD2.www * u_xlat1.xyz + u_xlat10_0.xyz;
    u_xlat0.w = vs_TEXCOORD3;
    SV_Target1 = u_xlat0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_2 = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb0) ? u_xlat16_2 : 0.0399999991;
    u_xlat0.x = (-vs_TEXCOORD2.w) + 1.0;
    u_xlat0.x = u_xlat0.x * _GrassShininess;
    SV_Target2.w = u_xlat0.x;
    SV_Target2.xy = vec2(0.0399999991, 0.0399999991);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "MHY_SHADER_LOW" "SOFT_SAMPLE_HEIGHT_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	float _NoiseScale;
uniform 	vec4 _WorldOffsetRange;
uniform 	float _HeightScale;
uniform 	float _Billboard;
uniform 	vec4 _LargeWindParam;
uniform 	vec4 _GlobalWind;
uniform 	float _GrassTipLighting;
uniform 	vec4 _MainTex_ST;
uniform 	float _RootColorScale;
uniform 	float _RootColorOffset;
uniform highp sampler2D _Heightmap;
uniform lowp sampler2D _Noisemap;
in highp vec4 in_POSITION0;
in highp vec4 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec2 in_TEXCOORD2;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp float vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec3 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
vec3 u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
vec2 u_xlat8;
int u_xlati8;
vec2 u_xlat9;
vec2 u_xlat16;
vec2 u_xlat20;
float u_xlat24;
float u_xlat25;
void main()
{
    u_xlat0.xy = vec2(_WorldOffsetRange.z + float(2.0), _WorldOffsetRange.w + float(2.0));
    u_xlat1.xyz = in_TEXCOORD0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[2].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TEXCOORD0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat16.xy = u_xlat1.xz + (-_WorldOffsetRange.xy);
    u_xlat16.xy = u_xlat16.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat16.xy / u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * _WorldOffsetRange.zw + vec2(-0.5, -0.5);
    u_xlat16.xy = floor(u_xlat0.xy);
    u_xlat0.xy = (-u_xlat16.xy) + u_xlat0.xy;
    u_xlat2 = u_xlat16.xyxy + vec4(0.5, 1.5, 1.5, 1.5);
    u_xlat3 = u_xlat16.xyxy + vec4(1.5, 0.5, 0.5, 0.5);
    u_xlat3 = vec4(u_xlat3.x / _WorldOffsetRange.z, u_xlat3.y / _WorldOffsetRange.w, u_xlat3.z / _WorldOffsetRange.z, u_xlat3.w / _WorldOffsetRange.w);
    u_xlat2 = vec4(u_xlat2.x / _WorldOffsetRange.z, u_xlat2.y / _WorldOffsetRange.w, u_xlat2.z / _WorldOffsetRange.z, u_xlat2.w / _WorldOffsetRange.w);
    u_xlat16.x = textureLod(_Heightmap, u_xlat2.zw, 0.0).x;
    u_xlat24 = textureLod(_Heightmap, u_xlat2.xy, 0.0).x;
    u_xlat16.x = (-u_xlat24) + u_xlat16.x;
    u_xlat16.x = u_xlat0.x * u_xlat16.x + u_xlat24;
    u_xlat24 = textureLod(_Heightmap, u_xlat3.xy, 0.0).x;
    u_xlat25 = textureLod(_Heightmap, u_xlat3.zw, 0.0).x;
    u_xlat24 = u_xlat24 + (-u_xlat25);
    u_xlat0.x = u_xlat0.x * u_xlat24 + u_xlat25;
    u_xlat16.x = (-u_xlat0.x) + u_xlat16.x;
    u_xlat0.x = u_xlat0.y * u_xlat16.x + u_xlat0.x;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[0].x;
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[2].x;
    u_xlat8.x = dot(u_xlat2.xy, u_xlat2.xy);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat8.xy = u_xlat8.xx * u_xlat2.xy;
    u_xlat2.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;
    u_xlat2.y = hlslcc_mtx4x4unity_ObjectToWorld[2].x;
    u_xlat24 = dot(u_xlat2.xy, u_xlat2.xy);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat2.xy = vec2(u_xlat24) * u_xlat2.xy;
    u_xlat3.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat3.xyz = (-u_xlat1.xyz) + u_xlat3.xyz;
    u_xlat24 = u_xlat2.y * u_xlat3.z;
    u_xlat24 = u_xlat3.x * u_xlat2.x + (-u_xlat24);
    u_xlat25 = dot(u_xlat3.zx, u_xlat2.xy);
    u_xlat2.xy = u_xlat8.xy * vec2(u_xlat25);
    u_xlat16.x = u_xlat24 * u_xlat8.y + (-u_xlat2.x);
    u_xlat8.x = u_xlat24 * u_xlat8.x + u_xlat2.y;
    u_xlat8.x = u_xlat3.z + u_xlat8.x;
    u_xlat3.z = (-u_xlat8.x) * _Billboard + u_xlat3.z;
    u_xlat8.x = u_xlat3.x + u_xlat16.x;
    u_xlat3.x = (-u_xlat8.x) * _Billboard + u_xlat3.x;
    u_xlat2.xyz = u_xlat1.xyz + u_xlat3.xyz;
    u_xlat8.xy = u_xlat1.xz / vec2(_NoiseScale);
    u_xlat2.w = u_xlat0.x * _HeightScale + u_xlat2.y;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat1.xyz = u_xlat3.xyz * vec3(0.100000001, 1.0, 0.100000001);
    u_xlat24 = dot(_GlobalWind.xyz, _GlobalWind.xyz);
    u_xlat24 = max(u_xlat24, 0.00100000005);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat4 = vec4(u_xlat24) * _GlobalWind.xzxz;
    u_xlat20.xy = vec2(u_xlat4.z * _LargeWindParam.z, u_xlat4.w * _LargeWindParam.z);
    u_xlat8.xy = _LargeWindParam.xx * u_xlat4.xy + u_xlat8.xy;
    u_xlat8.xy = textureLod(_Noisemap, u_xlat8.xy, 0.0).xy;
    u_xlat8.xy = u_xlat8.xy + vec2(-0.5, -0.5);
    u_xlat8.xy = u_xlat8.xy * _LargeWindParam.yy + vec2(0.5, 0.5);
    u_xlat24 = (-in_TEXCOORD1.x) + hlslcc_mtx4x4unity_ObjectToWorld[1].x;
    u_xlat25 = fract(u_xlat24);
    u_xlat24 = u_xlat24 + hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat4.xy = vec2(u_xlat24) * vec2(22.0, 33.0);
    u_xlat4.xy = fract(u_xlat4.xy);
    u_xlat4.xy = u_xlat4.xy + vec2(-0.5, -0.5);
    u_xlat5.xz = u_xlat4.xy * vec2(0.200000003, 0.200000003);
    u_xlat24 = u_xlat25 + -0.5;
    u_xlat25 = u_xlat24 * 0.333000004;
    u_xlat6.y = u_xlat24 * 0.333000004 + -1.0;
    u_xlat24 = in_TEXCOORD1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat25 = u_xlat25 * u_xlat24;
    u_xlat8.xy = u_xlat8.xy * vec2(u_xlat25);
    u_xlat4.xz = u_xlat20.xy * u_xlat8.xy;
    u_xlat4.y = 0.0;
    u_xlat7.xyz = u_xlat3.xyz * vec3(0.100000001, 1.0, 0.100000001) + u_xlat4.xyz;
    u_xlat8.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat8.x = max(u_xlat8.x, 0.00100000005);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat7.xyz = u_xlat8.xxx * u_xlat7.xyz;
    u_xlat0.xyz = u_xlat7.xyz * u_xlat0.xxx + (-u_xlat1.xyz);
    u_xlat0.xyz = u_xlat0.xyz + u_xlat2.xwz;
    u_xlat1.x = u_xlat3.y * u_xlat25;
    u_xlat9.x = max(u_xlat25, 9.99999972e-10);
    u_xlat9.xy = u_xlat4.zx / u_xlat9.xx;
    u_xlat2.yz = u_xlat9.xy + vec2(-1.0, -1.0);
    u_xlat0.xyz = u_xlat1.xxx * vec3(-0.5, 0.0, -0.5) + u_xlat0.xyz;
    u_xlat6.xz = u_xlat6.yy * (-u_xlat6.yy);
    u_xlat0.xyz = u_xlat6.xyz * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat1.xxxx + u_xlat3;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat1.zzzz + u_xlat3;
    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVPZero[3];
    u_xlat5.y = 0.0;
    vs_TEXCOORD0.xyz = u_xlat5.xyz + vec3(-1.0, 0.0, -1.0);
    vs_TEXCOORD0.w = 0.0;
    u_xlat1.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xxx;
    u_xlat1.x = dot(u_xlat2.yz, u_xlat2.yz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat2.x = 0.0;
    u_xlat1.xyz = u_xlat1.xxx * u_xlat2.xyz;
    u_xlat2.xyz = in_NORMAL0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_NORMAL0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_NORMAL0.zzz + u_xlat2.xyz;
    u_xlat25 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat25 = inversesqrt(u_xlat25);
    u_xlat2.xyz = vec3(u_xlat25) * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
    u_xlat25 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat25 = inversesqrt(u_xlat25);
    u_xlat2.xyz = vec3(u_xlat25) * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.zxy * u_xlat1.yzx + (-u_xlat3.xyz);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
#ifdef UNITY_ADRENO_ES3
    { bool cond = 0.0<u_xlat0.x; u_xlati8 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati8 = int((0.0<u_xlat0.x) ? 0xFFFFFFFFu : uint(0u));
#endif
#ifdef UNITY_ADRENO_ES3
    { bool cond = u_xlat0.x<0.0; u_xlati0 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati0 = int((u_xlat0.x<0.0) ? 0xFFFFFFFFu : uint(0u));
#endif
    u_xlati0 = (-u_xlati8) + u_xlati0;
    u_xlat0.x = float(u_xlati0);
    vs_TEXCOORD1.xyz = u_xlat0.xxx * u_xlat1.xyz;
    vs_TEXCOORD1.w = 0.0;
    u_xlat0.x = u_xlat24 / _RootColorScale;
    u_xlat0.x = u_xlat0.x + _RootColorOffset;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xxx * vec3(-0.501960814, 0.0, 0.0) + vec3(0.501960814, 0.0, 0.0);
    u_xlat1.x = u_xlat24 + -0.600000024;
    vs_TEXCOORD3 = u_xlat24;
    u_xlat24 = max(u_xlat1.x, 0.0);
    u_xlat24 = _GrassTipLighting * u_xlat24 + 1.0;
    vs_TEXCOORD2.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    vs_TEXCOORD2.w = 0.0;
    vs_TEXCOORD4.xy = in_TEXCOORD2.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	float _GrassShininess;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	float _CutOff;
uniform 	vec4 _BurnedColor;
uniform lowp sampler2D _MainTex;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp float vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec4 u_xlat0;
lowp vec4 u_xlat10_0;
bool u_xlatb0;
vec3 u_xlat1;
mediump float u_xlat16_2;
float u_xlat9;
bool u_xlatb9;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD4.xy);
    u_xlat9 = u_xlat10_0.w + (-_CutOff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(u_xlat9<0.0);
#else
    u_xlatb9 = u_xlat9<0.0;
#endif
    if((int(u_xlatb9) * int(0xffffffffu))!=0){discard;}
    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
    SV_Target0.xyz = u_xlat1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0;
    u_xlat1.xyz = _BurnedColor.xyz * u_xlat10_0.xyz + (-u_xlat10_0.xyz);
    u_xlat0.xyz = vs_TEXCOORD2.www * u_xlat1.xyz + u_xlat10_0.xyz;
    u_xlat0.w = vs_TEXCOORD3;
    SV_Target1 = u_xlat0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_2 = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb0) ? u_xlat16_2 : 0.0399999991;
    u_xlat0.x = (-vs_TEXCOORD2.w) + 1.0;
    u_xlat0.x = u_xlat0.x * _GrassShininess;
    SV_Target2.w = u_xlat0.x;
    SV_Target2.xy = vec2(0.0399999991, 0.0399999991);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "MHY_SHADER_LOW" "SOFT_SAMPLE_HEIGHT_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	int unity_BaseInstanceID;
uniform 	float _NoiseScale;
uniform 	vec4 _WorldOffsetRange;
uniform 	float _HeightScale;
uniform 	float _Billboard;
uniform 	vec4 _LargeWindParam;
uniform 	vec4 _GlobalWind;
uniform 	float _GrassTipLighting;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BurnedColor;
uniform 	float _RootColorScale;
uniform 	float _RootColorOffset;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _Heightmap;
uniform lowp sampler2D _Noisemap;
in highp vec4 in_POSITION0;
in highp vec4 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec2 in_TEXCOORD2;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp float vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec3 u_xlat0;
uvec3 u_xlatu0;
vec4 u_xlat1;
int u_xlati1;
uvec3 u_xlatu1;
vec3 u_xlat2;
uvec2 u_xlatu2;
vec4 u_xlat3;
vec3 u_xlat4;
vec4 u_xlat5;
vec4 u_xlat6;
vec4 u_xlat7;
vec4 u_xlat8;
float u_xlat9;
uint u_xlatu9;
float u_xlat10;
int u_xlati10;
vec3 u_xlat12;
vec2 u_xlat19;
float u_xlat20;
vec2 u_xlat24;
float u_xlat27;
int u_xlati27;
float u_xlat28;
bool u_xlatb28;
float u_xlat29;
uint u_xlatu29;
float u_xlat31;
void main()
{
    u_xlat0.y = 0.0;
    u_xlat27 = dot(_GlobalWind.xyz, _GlobalWind.xyz);
    u_xlat27 = max(u_xlat27, 0.00100000005);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat1 = vec4(u_xlat27) * _GlobalWind.xzxz;
    u_xlat19.xy = vec2(u_xlat1.z * _LargeWindParam.z, u_xlat1.w * _LargeWindParam.z);
    u_xlati27 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati27 = u_xlati27 << 2;
    u_xlat2.xyz = in_TEXCOORD0.yyy * unity_Builtins0Array[u_xlati27 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz;
    u_xlat2.xyz = unity_Builtins0Array[u_xlati27 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_TEXCOORD0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz + unity_Builtins0Array[u_xlati27 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat3.xy = u_xlat2.xz / vec2(_NoiseScale);
    u_xlat1.xy = _LargeWindParam.xx * u_xlat1.xy + u_xlat3.xy;
    u_xlat1.xy = textureLod(_Noisemap, u_xlat1.xy, 0.0).xy;
    u_xlat1.xy = u_xlat1.xy + vec2(-0.5, -0.5);
    u_xlat1.xy = u_xlat1.xy * _LargeWindParam.yy + vec2(0.5, 0.5);
    u_xlat29 = float(floatBitsToUint(unity_Builtins0Array[u_xlati27 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2]).w);
    u_xlat29 = u_xlat29 * 5.96046448e-08;
    u_xlatu29 = uint(u_xlat29);
    u_xlatu29 = u_xlatu29 & 3u;
    u_xlat29 = float(u_xlatu29);
    u_xlat3.x = (-in_TEXCOORD1.x) + unity_Builtins0Array[u_xlati27 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].x;
    u_xlat12.x = fract(u_xlat3.x);
    u_xlat3.x = u_xlat3.x + unity_Builtins0Array[u_xlati27 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].y;
    u_xlat3.xz = u_xlat3.xx * vec2(22.0, 33.0);
    u_xlat3.xz = fract(u_xlat3.xz);
    u_xlat3.xz = u_xlat3.xz + vec2(-0.5, -0.5);
    u_xlat4.xz = u_xlat3.xz * vec2(0.200000003, 0.200000003);
    u_xlat29 = u_xlat29 + u_xlat12.x;
    u_xlat29 = u_xlat29 + -0.5;
    u_xlat3.x = u_xlat29 * 0.333000004;
    u_xlat5.y = u_xlat29 * 0.333000004 + -1.0;
    u_xlat29 = in_TEXCOORD1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat29 = min(max(u_xlat29, 0.0), 1.0);
#else
    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
#endif
    u_xlat3.x = u_xlat3.x * u_xlat29;
    u_xlat1.xy = u_xlat1.xy * u_xlat3.xx;
    u_xlat0.xz = u_xlat19.xy * u_xlat1.xy;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[0].x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[2].x;
    u_xlat19.x = dot(u_xlat1.xy, u_xlat1.xy);
    u_xlat19.x = inversesqrt(u_xlat19.x);
    u_xlat1.xy = u_xlat19.xx * u_xlat1.xy;
    u_xlat12.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati27 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat12.xyz = unity_Builtins0Array[u_xlati27 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat12.xyz;
    u_xlat12.xyz = unity_Builtins0Array[u_xlati27 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat12.xyz;
    u_xlat12.xyz = u_xlat12.xyz + unity_Builtins0Array[u_xlati27 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat12.xyz = (-u_xlat2.xyz) + u_xlat12.xyz;
    u_xlat6.x = unity_Builtins0Array[u_xlati27 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].x;
    u_xlat6.y = unity_Builtins0Array[u_xlati27 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].x;
    u_xlat19.x = dot(u_xlat6.xy, u_xlat6.xy);
    u_xlat19.x = inversesqrt(u_xlat19.x);
    u_xlat19.xy = u_xlat19.xx * u_xlat6.xy;
    u_xlat31 = u_xlat19.y * u_xlat12.z;
    u_xlat31 = u_xlat12.x * u_xlat19.x + (-u_xlat31);
    u_xlat19.x = dot(u_xlat12.zx, u_xlat19.xy);
    u_xlat19.xy = u_xlat1.xy * u_xlat19.xx;
    u_xlat10 = u_xlat31 * u_xlat1.y + (-u_xlat19.x);
    u_xlat1.x = u_xlat31 * u_xlat1.x + u_xlat19.y;
    u_xlat1.x = u_xlat12.z + u_xlat1.x;
    u_xlat12.z = (-u_xlat1.x) * _Billboard + u_xlat12.z;
    u_xlat1.x = u_xlat12.x + u_xlat10;
    u_xlat12.x = (-u_xlat1.x) * _Billboard + u_xlat12.x;
    u_xlat1.xyz = u_xlat12.xyz * vec3(0.100000001, 1.0, 0.100000001) + u_xlat0.xyz;
    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat9 = max(u_xlat9, 0.00100000005);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
    u_xlat9 = dot(u_xlat12.xyz, u_xlat12.xyz);
    u_xlat9 = sqrt(u_xlat9);
    u_xlat6.xyz = u_xlat12.xyz * vec3(0.100000001, 1.0, 0.100000001);
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat9) + (-u_xlat6.xyz);
    u_xlat6.xy = vec2(_WorldOffsetRange.z + float(2.0), _WorldOffsetRange.w + float(2.0));
    u_xlat24.xy = u_xlat2.xz + (-_WorldOffsetRange.xy);
    u_xlat7.xyz = u_xlat2.xyz + u_xlat12.xyz;
    u_xlat2.xy = u_xlat24.xy + vec2(1.0, 1.0);
    u_xlat2.xy = u_xlat2.xy / u_xlat6.xy;
    u_xlat2.xy = u_xlat2.xy * _WorldOffsetRange.zw + vec2(-0.5, -0.5);
    u_xlat6.xy = floor(u_xlat2.xy);
    u_xlat2.xy = u_xlat2.xy + (-u_xlat6.xy);
    u_xlat8 = u_xlat6.xyxy + vec4(0.5, 1.5, 1.5, 1.5);
    u_xlat6 = u_xlat6.xyxy + vec4(1.5, 0.5, 0.5, 0.5);
    u_xlat6 = vec4(u_xlat6.x / _WorldOffsetRange.z, u_xlat6.y / _WorldOffsetRange.w, u_xlat6.z / _WorldOffsetRange.z, u_xlat6.w / _WorldOffsetRange.w);
    u_xlat8 = vec4(u_xlat8.x / _WorldOffsetRange.z, u_xlat8.y / _WorldOffsetRange.w, u_xlat8.z / _WorldOffsetRange.z, u_xlat8.w / _WorldOffsetRange.w);
    u_xlat9 = textureLod(_Heightmap, u_xlat8.zw, 0.0).x;
    u_xlat28 = textureLod(_Heightmap, u_xlat8.xy, 0.0).x;
    u_xlat9 = u_xlat9 + (-u_xlat28);
    u_xlat9 = u_xlat2.x * u_xlat9 + u_xlat28;
    u_xlat28 = textureLod(_Heightmap, u_xlat6.xy, 0.0).x;
    u_xlat20 = textureLod(_Heightmap, u_xlat6.zw, 0.0).x;
    u_xlat28 = u_xlat28 + (-u_xlat20);
    u_xlat28 = u_xlat2.x * u_xlat28 + u_xlat20;
    u_xlat9 = u_xlat9 + (-u_xlat28);
    u_xlat9 = u_xlat2.y * u_xlat9 + u_xlat28;
    u_xlat7.w = u_xlat9 * _HeightScale + u_xlat7.y;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat7.xwz;
    u_xlatu2.xy = uvec2(65280u, 255u) & floatBitsToUint(unity_Builtins0Array[u_xlati27 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1]).ww;
    u_xlat2.xy = vec2(u_xlatu2.xy);
    u_xlat9 = u_xlat2.x * 0.00390625;
    u_xlat2.z = u_xlat2.y + -127.0;
    u_xlatu9 = uint(u_xlat9);
    u_xlat9 = float(u_xlatu9);
    u_xlat2.x = u_xlat9 + -127.0;
    u_xlat6.xy = u_xlat2.xz * vec2(0.00787401572, 0.00787401572);
    u_xlat6.xy = u_xlat6.xy * u_xlat6.xy;
    u_xlat9 = u_xlat6.y + u_xlat6.x;
    u_xlat9 = (-u_xlat9) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb28 = !!(0.0<u_xlat9);
#else
    u_xlatb28 = 0.0<u_xlat9;
#endif
    u_xlat9 = sqrt(u_xlat9);
    u_xlat2.y = u_xlatb28 ? u_xlat9 : float(0.0);
    u_xlat6.xyz = u_xlat2.xyz * u_xlat12.yyy;
    u_xlat6.xyz = u_xlat3.xxx * u_xlat6.xyz;
    u_xlat9 = max(u_xlat3.x, 9.99999972e-10);
    u_xlat0.yz = u_xlat0.zx / vec2(u_xlat9);
    u_xlat1.xyz = u_xlat6.xyz * vec3(0.00393700786, 0.0, 0.00393700786) + u_xlat1.xyz;
    u_xlat5.xz = u_xlat5.yy * (-u_xlat5.yy);
    u_xlat1.xyz = u_xlat5.xyz * u_xlat12.xyz + u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat5 = u_xlat3.yyyy * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat5 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat3.xxxx + u_xlat5;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat3.zzzz + u_xlat5;
    gl_Position = u_xlat3 + hlslcc_mtx4x4unity_MatrixVPZero[3];
    u_xlat4.y = 0.0;
    vs_TEXCOORD0.xyz = u_xlat2.xyz * vec3(0.00787401572, 1.0, 0.00787401572) + u_xlat4.xyz;
    vs_TEXCOORD0.w = 0.0;
    u_xlat0.x = 0.0;
    u_xlat0.xyz = u_xlat2.yzx * vec3(1.0, 0.00787401572, 0.00787401572) + u_xlat0.xyz;
    u_xlat28 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat28 = inversesqrt(u_xlat28);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat28);
    u_xlat2.xyz = in_NORMAL0.yyy * unity_Builtins0Array[u_xlati27 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat2.xyz = unity_Builtins0Array[u_xlati27 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_NORMAL0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = unity_Builtins0Array[u_xlati27 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_NORMAL0.zzz + u_xlat2.xyz;
    u_xlat28 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat28 = inversesqrt(u_xlat28);
    u_xlat2.xyz = vec3(u_xlat28) * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat0.xyz * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat0.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
    u_xlat28 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat28 = inversesqrt(u_xlat28);
    u_xlat2.xyz = vec3(u_xlat28) * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat0.xyz * u_xlat2.xyz;
    u_xlat0.xyz = u_xlat2.zxy * u_xlat0.yzx + (-u_xlat3.xyz);
    u_xlat28 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat28 = inversesqrt(u_xlat28);
    u_xlat1.xyz = vec3(u_xlat28) * u_xlat1.xyz;
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat0.xyz);
#ifdef UNITY_ADRENO_ES3
    { bool cond = 0.0<u_xlat1.x; u_xlati10 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati10 = int((0.0<u_xlat1.x) ? 0xFFFFFFFFu : uint(0u));
#endif
#ifdef UNITY_ADRENO_ES3
    { bool cond = u_xlat1.x<0.0; u_xlati1 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati1 = int((u_xlat1.x<0.0) ? 0xFFFFFFFFu : uint(0u));
#endif
    u_xlati1 = (-u_xlati10) + u_xlati1;
    u_xlat1.x = float(u_xlati1);
    vs_TEXCOORD1.xyz = u_xlat0.xyz * u_xlat1.xxx;
    vs_TEXCOORD1.w = 0.0;
    u_xlatu0.xyz = uvec3(16711680u, 65280u, 255u) & floatBitsToUint(unity_Builtins0Array[u_xlati27 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2]).www;
    u_xlat0.xyz = vec3(u_xlatu0.xyz);
    u_xlatu1.xyz = uvec3(16711680u, 65280u, 255u) & floatBitsToUint(unity_Builtins0Array[u_xlati27 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3]).www;
    u_xlat27 = max(1.0, unity_Builtins0Array[u_xlati27 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].w);
    u_xlat27 = min(u_xlat27, 2.0);
    u_xlat27 = u_xlat27 + -1.0;
    u_xlat1.xyz = vec3(u_xlatu1.xyz);
    u_xlat1.xyz = u_xlat1.xyz * vec3(5.9838392e-08, 1.53186284e-05, 0.00392156886);
    u_xlat0.xyz = u_xlat0.xyz * vec3(5.9838392e-08, 1.53186284e-05, 0.00392156886) + (-u_xlat1.xyz);
    u_xlat28 = u_xlat29 / _RootColorScale;
    u_xlat28 = u_xlat28 + _RootColorOffset;
#ifdef UNITY_ADRENO_ES3
    u_xlat28 = min(max(u_xlat28, 0.0), 1.0);
#else
    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
#endif
    u_xlat0.xyz = vec3(u_xlat28) * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat1.xyz = (-u_xlat0.xyz) + _BurnedColor.xyz;
    u_xlat0.xyz = vec3(u_xlat27) * u_xlat1.xyz + u_xlat0.xyz;
    vs_TEXCOORD2.w = u_xlat27;
    u_xlat27 = u_xlat29 + -0.600000024;
    vs_TEXCOORD3 = u_xlat29;
    u_xlat27 = max(u_xlat27, 0.0);
    u_xlat27 = _GrassTipLighting * u_xlat27 + 1.0;
    vs_TEXCOORD2.xyz = vec3(u_xlat27) * u_xlat0.xyz;
    vs_TEXCOORD4.xy = in_TEXCOORD2.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	float _GrassShininess;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	float _CutOff;
uniform 	vec4 _BurnedColor;
uniform lowp sampler2D _MainTex;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp float vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec4 u_xlat0;
lowp vec4 u_xlat10_0;
bool u_xlatb0;
vec3 u_xlat1;
mediump float u_xlat16_2;
float u_xlat9;
bool u_xlatb9;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD4.xy);
    u_xlat9 = u_xlat10_0.w + (-_CutOff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(u_xlat9<0.0);
#else
    u_xlatb9 = u_xlat9<0.0;
#endif
    if((int(u_xlatb9) * int(0xffffffffu))!=0){discard;}
    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
    SV_Target0.xyz = u_xlat1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0;
    u_xlat1.xyz = _BurnedColor.xyz * u_xlat10_0.xyz + (-u_xlat10_0.xyz);
    u_xlat0.xyz = vs_TEXCOORD2.www * u_xlat1.xyz + u_xlat10_0.xyz;
    u_xlat0.w = vs_TEXCOORD3;
    SV_Target1 = u_xlat0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_2 = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb0) ? u_xlat16_2 : 0.0399999991;
    u_xlat0.x = (-vs_TEXCOORD2.w) + 1.0;
    u_xlat0.x = u_xlat0.x * _GrassShininess;
    SV_Target2.w = u_xlat0.x;
    SV_Target2.xy = vec2(0.0399999991, 0.0399999991);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "MHY_SHADER_LOW" "SOFT_SAMPLE_HEIGHT_ON" "DITHER_FADE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	float _NoiseScale;
uniform 	vec4 _WorldOffsetRange;
uniform 	float _HeightScale;
uniform 	float _Billboard;
uniform 	vec4 _LargeWindParam;
uniform 	vec4 _GlobalWind;
uniform 	float _GrassTipLighting;
uniform 	vec4 _MainTex_ST;
uniform 	float _RootColorScale;
uniform 	float _RootColorOffset;
uniform highp sampler2D _Heightmap;
uniform lowp sampler2D _Noisemap;
in highp vec4 in_POSITION0;
in highp vec4 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec2 in_TEXCOORD2;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp float vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec3 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
vec3 u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
vec2 u_xlat8;
int u_xlati8;
vec2 u_xlat9;
vec2 u_xlat16;
vec2 u_xlat20;
float u_xlat24;
float u_xlat25;
void main()
{
    u_xlat0.xy = vec2(_WorldOffsetRange.z + float(2.0), _WorldOffsetRange.w + float(2.0));
    u_xlat1.xyz = in_TEXCOORD0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[2].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TEXCOORD0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat16.xy = u_xlat1.xz + (-_WorldOffsetRange.xy);
    u_xlat16.xy = u_xlat16.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat16.xy / u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * _WorldOffsetRange.zw + vec2(-0.5, -0.5);
    u_xlat16.xy = floor(u_xlat0.xy);
    u_xlat0.xy = (-u_xlat16.xy) + u_xlat0.xy;
    u_xlat2 = u_xlat16.xyxy + vec4(0.5, 1.5, 1.5, 1.5);
    u_xlat3 = u_xlat16.xyxy + vec4(1.5, 0.5, 0.5, 0.5);
    u_xlat3 = vec4(u_xlat3.x / _WorldOffsetRange.z, u_xlat3.y / _WorldOffsetRange.w, u_xlat3.z / _WorldOffsetRange.z, u_xlat3.w / _WorldOffsetRange.w);
    u_xlat2 = vec4(u_xlat2.x / _WorldOffsetRange.z, u_xlat2.y / _WorldOffsetRange.w, u_xlat2.z / _WorldOffsetRange.z, u_xlat2.w / _WorldOffsetRange.w);
    u_xlat16.x = textureLod(_Heightmap, u_xlat2.zw, 0.0).x;
    u_xlat24 = textureLod(_Heightmap, u_xlat2.xy, 0.0).x;
    u_xlat16.x = (-u_xlat24) + u_xlat16.x;
    u_xlat16.x = u_xlat0.x * u_xlat16.x + u_xlat24;
    u_xlat24 = textureLod(_Heightmap, u_xlat3.xy, 0.0).x;
    u_xlat25 = textureLod(_Heightmap, u_xlat3.zw, 0.0).x;
    u_xlat24 = u_xlat24 + (-u_xlat25);
    u_xlat0.x = u_xlat0.x * u_xlat24 + u_xlat25;
    u_xlat16.x = (-u_xlat0.x) + u_xlat16.x;
    u_xlat0.x = u_xlat0.y * u_xlat16.x + u_xlat0.x;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[0].x;
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[2].x;
    u_xlat8.x = dot(u_xlat2.xy, u_xlat2.xy);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat8.xy = u_xlat8.xx * u_xlat2.xy;
    u_xlat2.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;
    u_xlat2.y = hlslcc_mtx4x4unity_ObjectToWorld[2].x;
    u_xlat24 = dot(u_xlat2.xy, u_xlat2.xy);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat2.xy = vec2(u_xlat24) * u_xlat2.xy;
    u_xlat3.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat3.xyz = (-u_xlat1.xyz) + u_xlat3.xyz;
    u_xlat24 = u_xlat2.y * u_xlat3.z;
    u_xlat24 = u_xlat3.x * u_xlat2.x + (-u_xlat24);
    u_xlat25 = dot(u_xlat3.zx, u_xlat2.xy);
    u_xlat2.xy = u_xlat8.xy * vec2(u_xlat25);
    u_xlat16.x = u_xlat24 * u_xlat8.y + (-u_xlat2.x);
    u_xlat8.x = u_xlat24 * u_xlat8.x + u_xlat2.y;
    u_xlat8.x = u_xlat3.z + u_xlat8.x;
    u_xlat3.z = (-u_xlat8.x) * _Billboard + u_xlat3.z;
    u_xlat8.x = u_xlat3.x + u_xlat16.x;
    u_xlat3.x = (-u_xlat8.x) * _Billboard + u_xlat3.x;
    u_xlat2.xyz = u_xlat1.xyz + u_xlat3.xyz;
    u_xlat8.xy = u_xlat1.xz / vec2(_NoiseScale);
    u_xlat2.w = u_xlat0.x * _HeightScale + u_xlat2.y;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat1.xyz = u_xlat3.xyz * vec3(0.100000001, 1.0, 0.100000001);
    u_xlat24 = dot(_GlobalWind.xyz, _GlobalWind.xyz);
    u_xlat24 = max(u_xlat24, 0.00100000005);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat4 = vec4(u_xlat24) * _GlobalWind.xzxz;
    u_xlat20.xy = vec2(u_xlat4.z * _LargeWindParam.z, u_xlat4.w * _LargeWindParam.z);
    u_xlat8.xy = _LargeWindParam.xx * u_xlat4.xy + u_xlat8.xy;
    u_xlat8.xy = textureLod(_Noisemap, u_xlat8.xy, 0.0).xy;
    u_xlat8.xy = u_xlat8.xy + vec2(-0.5, -0.5);
    u_xlat8.xy = u_xlat8.xy * _LargeWindParam.yy + vec2(0.5, 0.5);
    u_xlat24 = (-in_TEXCOORD1.x) + hlslcc_mtx4x4unity_ObjectToWorld[1].x;
    u_xlat25 = fract(u_xlat24);
    u_xlat24 = u_xlat24 + hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat4.xy = vec2(u_xlat24) * vec2(22.0, 33.0);
    u_xlat4.xy = fract(u_xlat4.xy);
    u_xlat4.xy = u_xlat4.xy + vec2(-0.5, -0.5);
    u_xlat5.xz = u_xlat4.xy * vec2(0.200000003, 0.200000003);
    u_xlat24 = u_xlat25 + -0.5;
    u_xlat25 = u_xlat24 * 0.333000004;
    u_xlat6.y = u_xlat24 * 0.333000004 + -1.0;
    u_xlat24 = in_TEXCOORD1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat25 = u_xlat25 * u_xlat24;
    u_xlat8.xy = u_xlat8.xy * vec2(u_xlat25);
    u_xlat4.xz = u_xlat20.xy * u_xlat8.xy;
    u_xlat4.y = 0.0;
    u_xlat7.xyz = u_xlat3.xyz * vec3(0.100000001, 1.0, 0.100000001) + u_xlat4.xyz;
    u_xlat8.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat8.x = max(u_xlat8.x, 0.00100000005);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat7.xyz = u_xlat8.xxx * u_xlat7.xyz;
    u_xlat0.xyz = u_xlat7.xyz * u_xlat0.xxx + (-u_xlat1.xyz);
    u_xlat0.xyz = u_xlat0.xyz + u_xlat2.xwz;
    u_xlat1.x = u_xlat3.y * u_xlat25;
    u_xlat9.x = max(u_xlat25, 9.99999972e-10);
    u_xlat9.xy = u_xlat4.zx / u_xlat9.xx;
    u_xlat2.yz = u_xlat9.xy + vec2(-1.0, -1.0);
    u_xlat0.xyz = u_xlat1.xxx * vec3(-0.5, 0.0, -0.5) + u_xlat0.xyz;
    u_xlat6.xz = u_xlat6.yy * (-u_xlat6.yy);
    u_xlat0.xyz = u_xlat6.xyz * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat1.xxxx + u_xlat3;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat1.zzzz + u_xlat3;
    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVPZero[3];
    u_xlat5.y = 0.0;
    vs_TEXCOORD0.xyz = u_xlat5.xyz + vec3(-1.0, 0.0, -1.0);
    vs_TEXCOORD0.w = 0.0;
    u_xlat1.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xxx;
    u_xlat1.x = dot(u_xlat2.yz, u_xlat2.yz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat2.x = 0.0;
    u_xlat1.xyz = u_xlat1.xxx * u_xlat2.xyz;
    u_xlat2.xyz = in_NORMAL0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_NORMAL0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_NORMAL0.zzz + u_xlat2.xyz;
    u_xlat25 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat25 = inversesqrt(u_xlat25);
    u_xlat2.xyz = vec3(u_xlat25) * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
    u_xlat25 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat25 = inversesqrt(u_xlat25);
    u_xlat2.xyz = vec3(u_xlat25) * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.zxy * u_xlat1.yzx + (-u_xlat3.xyz);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
#ifdef UNITY_ADRENO_ES3
    { bool cond = 0.0<u_xlat0.x; u_xlati8 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati8 = int((0.0<u_xlat0.x) ? 0xFFFFFFFFu : uint(0u));
#endif
#ifdef UNITY_ADRENO_ES3
    { bool cond = u_xlat0.x<0.0; u_xlati0 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati0 = int((u_xlat0.x<0.0) ? 0xFFFFFFFFu : uint(0u));
#endif
    u_xlati0 = (-u_xlati8) + u_xlati0;
    u_xlat0.x = float(u_xlati0);
    vs_TEXCOORD1.xyz = u_xlat0.xxx * u_xlat1.xyz;
    vs_TEXCOORD1.w = 0.0;
    u_xlat0.x = u_xlat24 / _RootColorScale;
    u_xlat0.x = u_xlat0.x + _RootColorOffset;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xxx * vec3(-0.501960814, 0.0, 0.0) + vec3(0.501960814, 0.0, 0.0);
    u_xlat1.x = u_xlat24 + -0.600000024;
    vs_TEXCOORD3 = u_xlat24;
    u_xlat24 = max(u_xlat1.x, 0.0);
    u_xlat24 = _GrassTipLighting * u_xlat24 + 1.0;
    vs_TEXCOORD2.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    vs_TEXCOORD2.w = 0.0;
    vs_TEXCOORD4.xy = in_TEXCOORD2.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	float _GrassShininess;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	float _CutOff;
uniform 	vec4 _BurnedColor;
uniform lowp sampler2D _MainTex;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp float vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec4 u_xlat0;
lowp vec4 u_xlat10_0;
bool u_xlatb0;
vec3 u_xlat1;
mediump float u_xlat16_2;
float u_xlat9;
bool u_xlatb9;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD4.xy);
    u_xlat9 = u_xlat10_0.w + (-_CutOff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(u_xlat9<0.0);
#else
    u_xlatb9 = u_xlat9<0.0;
#endif
    if((int(u_xlatb9) * int(0xffffffffu))!=0){discard;}
    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
    SV_Target0.xyz = u_xlat1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0;
    u_xlat1.xyz = _BurnedColor.xyz * u_xlat10_0.xyz + (-u_xlat10_0.xyz);
    u_xlat0.xyz = vs_TEXCOORD2.www * u_xlat1.xyz + u_xlat10_0.xyz;
    u_xlat0.w = vs_TEXCOORD3;
    SV_Target1 = u_xlat0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_2 = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb0) ? u_xlat16_2 : 0.0399999991;
    u_xlat0.x = (-vs_TEXCOORD2.w) + 1.0;
    u_xlat0.x = u_xlat0.x * _GrassShininess;
    SV_Target2.w = u_xlat0.x;
    SV_Target2.xy = vec2(0.0399999991, 0.0399999991);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "MHY_SHADER_LOW" "SOFT_SAMPLE_HEIGHT_ON" "DITHER_FADE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	int unity_BaseInstanceID;
uniform 	float _NoiseScale;
uniform 	vec4 _WorldOffsetRange;
uniform 	float _HeightScale;
uniform 	float _Billboard;
uniform 	vec4 _LargeWindParam;
uniform 	vec4 _GlobalWind;
uniform 	float _GrassTipLighting;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BurnedColor;
uniform 	float _RootColorScale;
uniform 	float _RootColorOffset;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _Heightmap;
uniform lowp sampler2D _Noisemap;
in highp vec4 in_POSITION0;
in highp vec4 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec2 in_TEXCOORD2;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp float vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec3 u_xlat0;
uvec3 u_xlatu0;
vec4 u_xlat1;
int u_xlati1;
uvec3 u_xlatu1;
vec3 u_xlat2;
uvec2 u_xlatu2;
vec4 u_xlat3;
vec3 u_xlat4;
vec4 u_xlat5;
vec4 u_xlat6;
vec4 u_xlat7;
vec4 u_xlat8;
float u_xlat9;
uint u_xlatu9;
float u_xlat10;
int u_xlati10;
vec3 u_xlat12;
vec2 u_xlat19;
float u_xlat20;
vec2 u_xlat24;
float u_xlat27;
int u_xlati27;
float u_xlat28;
bool u_xlatb28;
float u_xlat29;
uint u_xlatu29;
float u_xlat31;
void main()
{
    u_xlat0.y = 0.0;
    u_xlat27 = dot(_GlobalWind.xyz, _GlobalWind.xyz);
    u_xlat27 = max(u_xlat27, 0.00100000005);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat1 = vec4(u_xlat27) * _GlobalWind.xzxz;
    u_xlat19.xy = vec2(u_xlat1.z * _LargeWindParam.z, u_xlat1.w * _LargeWindParam.z);
    u_xlati27 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati27 = u_xlati27 << 2;
    u_xlat2.xyz = in_TEXCOORD0.yyy * unity_Builtins0Array[u_xlati27 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz;
    u_xlat2.xyz = unity_Builtins0Array[u_xlati27 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_TEXCOORD0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz + unity_Builtins0Array[u_xlati27 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat3.xy = u_xlat2.xz / vec2(_NoiseScale);
    u_xlat1.xy = _LargeWindParam.xx * u_xlat1.xy + u_xlat3.xy;
    u_xlat1.xy = textureLod(_Noisemap, u_xlat1.xy, 0.0).xy;
    u_xlat1.xy = u_xlat1.xy + vec2(-0.5, -0.5);
    u_xlat1.xy = u_xlat1.xy * _LargeWindParam.yy + vec2(0.5, 0.5);
    u_xlat29 = float(floatBitsToUint(unity_Builtins0Array[u_xlati27 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2]).w);
    u_xlat29 = u_xlat29 * 5.96046448e-08;
    u_xlatu29 = uint(u_xlat29);
    u_xlatu29 = u_xlatu29 & 3u;
    u_xlat29 = float(u_xlatu29);
    u_xlat3.x = (-in_TEXCOORD1.x) + unity_Builtins0Array[u_xlati27 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].x;
    u_xlat12.x = fract(u_xlat3.x);
    u_xlat3.x = u_xlat3.x + unity_Builtins0Array[u_xlati27 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].y;
    u_xlat3.xz = u_xlat3.xx * vec2(22.0, 33.0);
    u_xlat3.xz = fract(u_xlat3.xz);
    u_xlat3.xz = u_xlat3.xz + vec2(-0.5, -0.5);
    u_xlat4.xz = u_xlat3.xz * vec2(0.200000003, 0.200000003);
    u_xlat29 = u_xlat29 + u_xlat12.x;
    u_xlat29 = u_xlat29 + -0.5;
    u_xlat3.x = u_xlat29 * 0.333000004;
    u_xlat5.y = u_xlat29 * 0.333000004 + -1.0;
    u_xlat29 = in_TEXCOORD1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat29 = min(max(u_xlat29, 0.0), 1.0);
#else
    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
#endif
    u_xlat3.x = u_xlat3.x * u_xlat29;
    u_xlat1.xy = u_xlat1.xy * u_xlat3.xx;
    u_xlat0.xz = u_xlat19.xy * u_xlat1.xy;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[0].x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[2].x;
    u_xlat19.x = dot(u_xlat1.xy, u_xlat1.xy);
    u_xlat19.x = inversesqrt(u_xlat19.x);
    u_xlat1.xy = u_xlat19.xx * u_xlat1.xy;
    u_xlat12.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati27 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat12.xyz = unity_Builtins0Array[u_xlati27 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat12.xyz;
    u_xlat12.xyz = unity_Builtins0Array[u_xlati27 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat12.xyz;
    u_xlat12.xyz = u_xlat12.xyz + unity_Builtins0Array[u_xlati27 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat12.xyz = (-u_xlat2.xyz) + u_xlat12.xyz;
    u_xlat6.x = unity_Builtins0Array[u_xlati27 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].x;
    u_xlat6.y = unity_Builtins0Array[u_xlati27 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].x;
    u_xlat19.x = dot(u_xlat6.xy, u_xlat6.xy);
    u_xlat19.x = inversesqrt(u_xlat19.x);
    u_xlat19.xy = u_xlat19.xx * u_xlat6.xy;
    u_xlat31 = u_xlat19.y * u_xlat12.z;
    u_xlat31 = u_xlat12.x * u_xlat19.x + (-u_xlat31);
    u_xlat19.x = dot(u_xlat12.zx, u_xlat19.xy);
    u_xlat19.xy = u_xlat1.xy * u_xlat19.xx;
    u_xlat10 = u_xlat31 * u_xlat1.y + (-u_xlat19.x);
    u_xlat1.x = u_xlat31 * u_xlat1.x + u_xlat19.y;
    u_xlat1.x = u_xlat12.z + u_xlat1.x;
    u_xlat12.z = (-u_xlat1.x) * _Billboard + u_xlat12.z;
    u_xlat1.x = u_xlat12.x + u_xlat10;
    u_xlat12.x = (-u_xlat1.x) * _Billboard + u_xlat12.x;
    u_xlat1.xyz = u_xlat12.xyz * vec3(0.100000001, 1.0, 0.100000001) + u_xlat0.xyz;
    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat9 = max(u_xlat9, 0.00100000005);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
    u_xlat9 = dot(u_xlat12.xyz, u_xlat12.xyz);
    u_xlat9 = sqrt(u_xlat9);
    u_xlat6.xyz = u_xlat12.xyz * vec3(0.100000001, 1.0, 0.100000001);
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat9) + (-u_xlat6.xyz);
    u_xlat6.xy = vec2(_WorldOffsetRange.z + float(2.0), _WorldOffsetRange.w + float(2.0));
    u_xlat24.xy = u_xlat2.xz + (-_WorldOffsetRange.xy);
    u_xlat7.xyz = u_xlat2.xyz + u_xlat12.xyz;
    u_xlat2.xy = u_xlat24.xy + vec2(1.0, 1.0);
    u_xlat2.xy = u_xlat2.xy / u_xlat6.xy;
    u_xlat2.xy = u_xlat2.xy * _WorldOffsetRange.zw + vec2(-0.5, -0.5);
    u_xlat6.xy = floor(u_xlat2.xy);
    u_xlat2.xy = u_xlat2.xy + (-u_xlat6.xy);
    u_xlat8 = u_xlat6.xyxy + vec4(0.5, 1.5, 1.5, 1.5);
    u_xlat6 = u_xlat6.xyxy + vec4(1.5, 0.5, 0.5, 0.5);
    u_xlat6 = vec4(u_xlat6.x / _WorldOffsetRange.z, u_xlat6.y / _WorldOffsetRange.w, u_xlat6.z / _WorldOffsetRange.z, u_xlat6.w / _WorldOffsetRange.w);
    u_xlat8 = vec4(u_xlat8.x / _WorldOffsetRange.z, u_xlat8.y / _WorldOffsetRange.w, u_xlat8.z / _WorldOffsetRange.z, u_xlat8.w / _WorldOffsetRange.w);
    u_xlat9 = textureLod(_Heightmap, u_xlat8.zw, 0.0).x;
    u_xlat28 = textureLod(_Heightmap, u_xlat8.xy, 0.0).x;
    u_xlat9 = u_xlat9 + (-u_xlat28);
    u_xlat9 = u_xlat2.x * u_xlat9 + u_xlat28;
    u_xlat28 = textureLod(_Heightmap, u_xlat6.xy, 0.0).x;
    u_xlat20 = textureLod(_Heightmap, u_xlat6.zw, 0.0).x;
    u_xlat28 = u_xlat28 + (-u_xlat20);
    u_xlat28 = u_xlat2.x * u_xlat28 + u_xlat20;
    u_xlat9 = u_xlat9 + (-u_xlat28);
    u_xlat9 = u_xlat2.y * u_xlat9 + u_xlat28;
    u_xlat7.w = u_xlat9 * _HeightScale + u_xlat7.y;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat7.xwz;
    u_xlatu2.xy = uvec2(65280u, 255u) & floatBitsToUint(unity_Builtins0Array[u_xlati27 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1]).ww;
    u_xlat2.xy = vec2(u_xlatu2.xy);
    u_xlat9 = u_xlat2.x * 0.00390625;
    u_xlat2.z = u_xlat2.y + -127.0;
    u_xlatu9 = uint(u_xlat9);
    u_xlat9 = float(u_xlatu9);
    u_xlat2.x = u_xlat9 + -127.0;
    u_xlat6.xy = u_xlat2.xz * vec2(0.00787401572, 0.00787401572);
    u_xlat6.xy = u_xlat6.xy * u_xlat6.xy;
    u_xlat9 = u_xlat6.y + u_xlat6.x;
    u_xlat9 = (-u_xlat9) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb28 = !!(0.0<u_xlat9);
#else
    u_xlatb28 = 0.0<u_xlat9;
#endif
    u_xlat9 = sqrt(u_xlat9);
    u_xlat2.y = u_xlatb28 ? u_xlat9 : float(0.0);
    u_xlat6.xyz = u_xlat2.xyz * u_xlat12.yyy;
    u_xlat6.xyz = u_xlat3.xxx * u_xlat6.xyz;
    u_xlat9 = max(u_xlat3.x, 9.99999972e-10);
    u_xlat0.yz = u_xlat0.zx / vec2(u_xlat9);
    u_xlat1.xyz = u_xlat6.xyz * vec3(0.00393700786, 0.0, 0.00393700786) + u_xlat1.xyz;
    u_xlat5.xz = u_xlat5.yy * (-u_xlat5.yy);
    u_xlat1.xyz = u_xlat5.xyz * u_xlat12.xyz + u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat5 = u_xlat3.yyyy * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat5 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat3.xxxx + u_xlat5;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat3.zzzz + u_xlat5;
    gl_Position = u_xlat3 + hlslcc_mtx4x4unity_MatrixVPZero[3];
    u_xlat4.y = 0.0;
    vs_TEXCOORD0.xyz = u_xlat2.xyz * vec3(0.00787401572, 1.0, 0.00787401572) + u_xlat4.xyz;
    vs_TEXCOORD0.w = 0.0;
    u_xlat0.x = 0.0;
    u_xlat0.xyz = u_xlat2.yzx * vec3(1.0, 0.00787401572, 0.00787401572) + u_xlat0.xyz;
    u_xlat28 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat28 = inversesqrt(u_xlat28);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat28);
    u_xlat2.xyz = in_NORMAL0.yyy * unity_Builtins0Array[u_xlati27 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat2.xyz = unity_Builtins0Array[u_xlati27 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_NORMAL0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = unity_Builtins0Array[u_xlati27 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_NORMAL0.zzz + u_xlat2.xyz;
    u_xlat28 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat28 = inversesqrt(u_xlat28);
    u_xlat2.xyz = vec3(u_xlat28) * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat0.xyz * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat0.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
    u_xlat28 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat28 = inversesqrt(u_xlat28);
    u_xlat2.xyz = vec3(u_xlat28) * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat0.xyz * u_xlat2.xyz;
    u_xlat0.xyz = u_xlat2.zxy * u_xlat0.yzx + (-u_xlat3.xyz);
    u_xlat28 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat28 = inversesqrt(u_xlat28);
    u_xlat1.xyz = vec3(u_xlat28) * u_xlat1.xyz;
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat0.xyz);
#ifdef UNITY_ADRENO_ES3
    { bool cond = 0.0<u_xlat1.x; u_xlati10 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati10 = int((0.0<u_xlat1.x) ? 0xFFFFFFFFu : uint(0u));
#endif
#ifdef UNITY_ADRENO_ES3
    { bool cond = u_xlat1.x<0.0; u_xlati1 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati1 = int((u_xlat1.x<0.0) ? 0xFFFFFFFFu : uint(0u));
#endif
    u_xlati1 = (-u_xlati10) + u_xlati1;
    u_xlat1.x = float(u_xlati1);
    vs_TEXCOORD1.xyz = u_xlat0.xyz * u_xlat1.xxx;
    vs_TEXCOORD1.w = 0.0;
    u_xlatu0.xyz = uvec3(16711680u, 65280u, 255u) & floatBitsToUint(unity_Builtins0Array[u_xlati27 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2]).www;
    u_xlat0.xyz = vec3(u_xlatu0.xyz);
    u_xlatu1.xyz = uvec3(16711680u, 65280u, 255u) & floatBitsToUint(unity_Builtins0Array[u_xlati27 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3]).www;
    u_xlat27 = max(1.0, unity_Builtins0Array[u_xlati27 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].w);
    u_xlat27 = min(u_xlat27, 2.0);
    u_xlat27 = u_xlat27 + -1.0;
    u_xlat1.xyz = vec3(u_xlatu1.xyz);
    u_xlat1.xyz = u_xlat1.xyz * vec3(5.9838392e-08, 1.53186284e-05, 0.00392156886);
    u_xlat0.xyz = u_xlat0.xyz * vec3(5.9838392e-08, 1.53186284e-05, 0.00392156886) + (-u_xlat1.xyz);
    u_xlat28 = u_xlat29 / _RootColorScale;
    u_xlat28 = u_xlat28 + _RootColorOffset;
#ifdef UNITY_ADRENO_ES3
    u_xlat28 = min(max(u_xlat28, 0.0), 1.0);
#else
    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
#endif
    u_xlat0.xyz = vec3(u_xlat28) * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat1.xyz = (-u_xlat0.xyz) + _BurnedColor.xyz;
    u_xlat0.xyz = vec3(u_xlat27) * u_xlat1.xyz + u_xlat0.xyz;
    vs_TEXCOORD2.w = u_xlat27;
    u_xlat27 = u_xlat29 + -0.600000024;
    vs_TEXCOORD3 = u_xlat29;
    u_xlat27 = max(u_xlat27, 0.0);
    u_xlat27 = _GrassTipLighting * u_xlat27 + 1.0;
    vs_TEXCOORD2.xyz = vec3(u_xlat27) * u_xlat0.xyz;
    vs_TEXCOORD4.xy = in_TEXCOORD2.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	float _GrassShininess;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	float _CutOff;
uniform 	vec4 _BurnedColor;
uniform lowp sampler2D _MainTex;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp float vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec4 u_xlat0;
lowp vec4 u_xlat10_0;
bool u_xlatb0;
vec3 u_xlat1;
mediump float u_xlat16_2;
float u_xlat9;
bool u_xlatb9;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD4.xy);
    u_xlat9 = u_xlat10_0.w + (-_CutOff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(u_xlat9<0.0);
#else
    u_xlatb9 = u_xlat9<0.0;
#endif
    if((int(u_xlatb9) * int(0xffffffffu))!=0){discard;}
    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
    SV_Target0.xyz = u_xlat1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0;
    u_xlat1.xyz = _BurnedColor.xyz * u_xlat10_0.xyz + (-u_xlat10_0.xyz);
    u_xlat0.xyz = vs_TEXCOORD2.www * u_xlat1.xyz + u_xlat10_0.xyz;
    u_xlat0.w = vs_TEXCOORD3;
    SV_Target1 = u_xlat0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_2 = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb0) ? u_xlat16_2 : 0.0399999991;
    u_xlat0.x = (-vs_TEXCOORD2.w) + 1.0;
    u_xlat0.x = u_xlat0.x * _GrassShininess;
    SV_Target2.w = u_xlat0.x;
    SV_Target2.xy = vec2(0.0399999991, 0.0399999991);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_HDR_ON" "MHY_SHADER_HIGH" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	float _NoiseScale;
uniform 	vec4 _WorldOffsetRange;
uniform 	float _HeightScale;
uniform 	float _Billboard;
uniform 	float _VegetationMoveScale;
uniform 	float _VegetationStiffness;
uniform 	vec4 _LocalWindsMapSize;
uniform 	vec4 _LargeWindParam;
uniform 	vec4 _SmallWindParam;
uniform 	vec4 _GlobalWind;
uniform 	vec4 _LocalWindsMapCameraInfo;
uniform 	float _GrassTipLighting;
uniform 	vec4 _MainTex_ST;
uniform 	float _RootColorScale;
uniform 	float _RootColorOffset;
uniform highp sampler2D _Heightmap;
uniform lowp sampler2D _Noisemap;
uniform lowp sampler2D _LocalWindsMap;
in highp vec4 in_POSITION0;
in highp vec4 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec2 in_TEXCOORD2;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp float vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec3 u_xlat1;
int u_xlati1;
vec4 u_xlat2;
bool u_xlatb2;
vec3 u_xlat3;
vec4 u_xlat4;
vec3 u_xlat5;
vec4 u_xlat6;
vec4 u_xlat7;
vec4 u_xlat8;
vec3 u_xlat9;
vec3 u_xlat10;
bool u_xlatb10;
vec2 u_xlat12;
vec3 u_xlat16;
vec2 u_xlat20;
vec2 u_xlat22;
float u_xlat30;
int u_xlati30;
float u_xlat31;
float u_xlat33;
float u_xlat34;
void main()
{
    u_xlat0.z = 0.0;
    u_xlat1.xyz = in_TEXCOORD0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[2].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TEXCOORD0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat10.xz = u_xlat1.xz + (-_LocalWindsMapSize.xy);
    u_xlat10.xz = vec2(u_xlat10.x / _LocalWindsMapSize.z, u_xlat10.z / _LocalWindsMapSize.w);
    u_xlat10.xz = u_xlat10.xz + vec2(0.5, 0.5);
    u_xlat2 = textureLod(_LocalWindsMap, u_xlat10.xz, 0.0);
    u_xlat10.x = dot(u_xlat2.xy, u_xlat2.xy);
    u_xlat10.x = sqrt(u_xlat10.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(9.99999975e-05>=u_xlat10.x);
#else
    u_xlatb10 = 9.99999975e-05>=u_xlat10.x;
#endif
    u_xlat10.x = u_xlatb10 ? 1.0 : float(0.0);
    u_xlat3.xy = (-u_xlat2.xy) + vec2(0.5, 0.5);
    u_xlat10.xz = u_xlat10.xx * u_xlat3.xy + u_xlat2.xy;
    u_xlat10.xz = u_xlat10.xz * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat31 = dot(u_xlat10.xz, u_xlat10.xz);
    u_xlat31 = max(u_xlat31, 0.00100000005);
    u_xlat3.x = inversesqrt(u_xlat31);
    u_xlat3.yz = u_xlat10.xz * u_xlat3.xx;
    u_xlat0.x = u_xlat3.z;
    u_xlat0.xz = (-u_xlat3.xy) * vec2(0.0, 1.0) + u_xlat0.xz;
    u_xlat31 = (-in_TEXCOORD1.x) + hlslcc_mtx4x4unity_ObjectToWorld[1].x;
    u_xlat2.x = u_xlat31 * 3.0;
    u_xlat2.x = _Time.y * 3.0 + u_xlat2.x;
    u_xlat2.x = u_xlat2.x + 0.5;
    u_xlat2.x = fract(u_xlat2.x);
    u_xlat2.x = u_xlat2.x * 2.0 + -1.0;
    u_xlat12.x = abs(u_xlat2.x) * abs(u_xlat2.x);
    u_xlat2.x = -abs(u_xlat2.x) * 2.0 + 3.0;
    u_xlat2.x = u_xlat2.x * u_xlat12.x;
    u_xlat12.x = u_xlat2.z * 1.5;
    u_xlat2.x = u_xlat12.x * u_xlat2.x;
    u_xlat0.xz = u_xlat0.xz * u_xlat2.xx;
    u_xlat0.xz = u_xlat0.xz * vec2(0.150000006, 0.150000006);
    u_xlat0.xz = u_xlat3.yz * u_xlat2.xx + u_xlat0.xz;
    u_xlat0.xz = u_xlat0.xz + u_xlat10.xz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(0.00199999986<u_xlat2.z);
#else
    u_xlatb2 = 0.00199999986<u_xlat2.z;
#endif
    u_xlat12.x = (-u_xlat2.w) * _LocalWindsMapCameraInfo.y + _LocalWindsMapCameraInfo.x;
    u_xlat0.xy = (bool(u_xlatb2)) ? u_xlat0.xz : u_xlat10.xz;
    u_xlat20.xy = vec2(_WorldOffsetRange.z + float(2.0), _WorldOffsetRange.w + float(2.0));
    u_xlat2.xz = u_xlat1.xz + (-_WorldOffsetRange.xy);
    u_xlat2.xz = u_xlat2.xz + vec2(1.0, 1.0);
    u_xlat20.xy = u_xlat2.xz / u_xlat20.xy;
    u_xlat20.x = textureLod(_Heightmap, u_xlat20.xy, 0.0).x;
    u_xlat30 = u_xlat20.x * _HeightScale + u_xlat1.y;
    u_xlat30 = (-u_xlat30) + u_xlat12.x;
    u_xlat30 = u_xlat30 * 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
#else
    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
#endif
    u_xlat30 = (-u_xlat30) + 1.0;
    u_xlat2.x = fract(u_xlat31);
    u_xlat31 = u_xlat31 + hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat12.xy = vec2(u_xlat31) * vec2(22.0, 33.0);
    u_xlat12.xy = fract(u_xlat12.xy);
    u_xlat12.xy = u_xlat12.xy + vec2(-0.5, -0.5);
    u_xlat3.xz = u_xlat12.xy * vec2(0.200000003, 0.200000003);
    u_xlat31 = u_xlat2.x + -0.5;
    u_xlat2.x = u_xlat2.x * _SmallWindParam.x;
    u_xlat2.x = sin(u_xlat2.x);
    u_xlat12.x = u_xlat31 * 0.333000004;
    u_xlat4.y = u_xlat31 * 0.333000004 + -1.0;
    u_xlat31 = in_TEXCOORD1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat31 = min(max(u_xlat31, 0.0), 1.0);
#else
    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat12.x * u_xlat31;
    u_xlat30 = u_xlat30 * u_xlat12.x;
    u_xlat0.xy = vec2(u_xlat30) * u_xlat0.xy;
    u_xlat5.xz = u_xlat0.xy * vec2(vec2(_VegetationMoveScale, _VegetationMoveScale));
    u_xlat0.x = dot(_GlobalWind.xyz, _GlobalWind.xyz);
    u_xlat0.x = max(u_xlat0.x, 0.00100000005);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat6 = u_xlat0.xxxx * _GlobalWind.xzxz;
    u_xlat0.xy = vec2(u_xlat6.z * _LargeWindParam.z, u_xlat6.w * _LargeWindParam.z);
    u_xlat22.xy = u_xlat1.xz / vec2(_NoiseScale);
    u_xlat22.xy = _LargeWindParam.xx * u_xlat6.xy + u_xlat22.xy;
    u_xlat22.xy = textureLod(_Noisemap, u_xlat22.xy, 0.0).xy;
    u_xlat22.xy = u_xlat22.xy + vec2(-0.5, -0.5);
    u_xlat22.xy = u_xlat22.xy * _LargeWindParam.yy + vec2(0.5, 0.5);
    u_xlat22.xy = u_xlat12.xx * u_xlat22.xy;
    u_xlat6.xz = u_xlat0.xy * u_xlat22.xy;
    u_xlat6.y = 0.0;
    u_xlat0.x = _VegetationStiffness * _SmallWindParam.y;
    u_xlat0.x = u_xlat12.x * u_xlat0.x;
    u_xlat7.x = u_xlat0.x * u_xlat2.x;
    u_xlat0.xyw = in_NORMAL0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyw = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_NORMAL0.xxx + u_xlat0.xyw;
    u_xlat0.xyw = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_NORMAL0.zzz + u_xlat0.xyw;
    u_xlat2.x = dot(u_xlat0.xyw, u_xlat0.xyw);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat0.xyw = u_xlat0.xyw * u_xlat2.xxx;
    u_xlat7.y = float(1.0);
    u_xlat7.z = float(0.349999994);
    u_xlat2.xzw = u_xlat0.xyw * u_xlat7.yxy;
    u_xlat8.xyz = u_xlat2.xzw * u_xlat7.xzx + u_xlat6.xyz;
    u_xlat2.xzw = u_xlat7.xzx * u_xlat2.xzw;
    u_xlat5.y = 0.0;
    u_xlat7.xyz = u_xlat5.xyz + u_xlat8.xyz;
    u_xlat8.y = hlslcc_mtx4x4unity_MatrixV[0].x;
    u_xlat8.x = hlslcc_mtx4x4unity_MatrixV[2].x;
    u_xlat33 = dot(u_xlat8.xy, u_xlat8.xy);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat16.xz = vec2(u_xlat33) * u_xlat8.xy;
    u_xlat8.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;
    u_xlat8.y = hlslcc_mtx4x4unity_ObjectToWorld[2].x;
    u_xlat33 = dot(u_xlat8.xy, u_xlat8.xy);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat8.xy = vec2(u_xlat33) * u_xlat8.xy;
    u_xlat9.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat9.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat9.xyz;
    u_xlat9.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat9.xyz;
    u_xlat9.xyz = u_xlat9.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat9.xyz = (-u_xlat1.xyz) + u_xlat9.xyz;
    u_xlat33 = u_xlat8.y * u_xlat9.z;
    u_xlat33 = u_xlat9.x * u_xlat8.x + (-u_xlat33);
    u_xlat34 = dot(u_xlat9.zx, u_xlat8.xy);
    u_xlat8.xy = u_xlat16.xz * vec2(u_xlat34);
    u_xlat34 = u_xlat33 * u_xlat16.z + (-u_xlat8.x);
    u_xlat33 = u_xlat33 * u_xlat16.x + u_xlat8.y;
    u_xlat33 = u_xlat9.z + u_xlat33;
    u_xlat9.z = (-u_xlat33) * _Billboard + u_xlat9.z;
    u_xlat33 = u_xlat9.x + u_xlat34;
    u_xlat9.x = (-u_xlat33) * _Billboard + u_xlat9.x;
    u_xlat33 = u_xlat12.x * u_xlat9.y;
    u_xlat12.x = max(u_xlat12.x, 9.99999972e-10);
    u_xlat7.xyz = u_xlat9.xyz * vec3(0.100000001, 1.0, 0.100000001) + u_xlat7.xyz;
    u_xlat34 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat34 = max(u_xlat34, 0.00100000005);
    u_xlat34 = inversesqrt(u_xlat34);
    u_xlat7.xyz = vec3(u_xlat34) * u_xlat7.xyz;
    u_xlat34 = dot(u_xlat9.xyz, u_xlat9.xyz);
    u_xlat34 = sqrt(u_xlat34);
    u_xlat8.xyz = u_xlat9.xyz * vec3(0.100000001, 1.0, 0.100000001);
    u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat34) + (-u_xlat8.xyz);
    u_xlat8.xyz = u_xlat1.xyz + u_xlat9.xyz;
    u_xlat8.w = u_xlat20.x * _HeightScale + u_xlat8.y;
    u_xlat1.xyz = u_xlat7.xyz + u_xlat8.xwz;
    u_xlat1.xyz = vec3(u_xlat33) * vec3(-0.5, 0.0, -0.5) + u_xlat1.xyz;
    u_xlat4.xz = u_xlat4.yy * (-u_xlat4.yy);
    u_xlat1.xyz = u_xlat4.xyz * u_xlat9.xyz + u_xlat1.xyz;
    u_xlat4.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat7 = u_xlat4.yyyy * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat7 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat4.xxxx + u_xlat7;
    u_xlat4 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat4.zzzz + u_xlat7;
    gl_Position = u_xlat4 + hlslcc_mtx4x4unity_MatrixVPZero[3];
    u_xlat3.y = 0.0;
    vs_TEXCOORD0.xyz = u_xlat3.xyz + vec3(-1.0, 0.0, -1.0);
    vs_TEXCOORD0.w = 0.0;
    u_xlat3.xyz = u_xlat5.yzx / u_xlat12.xxx;
    u_xlat4.yz = u_xlat6.zx / u_xlat12.xx;
    u_xlat2.xyz = u_xlat2.zwx / u_xlat12.xxx;
    u_xlat4.x = 0.0;
    u_xlat2.xyz = u_xlat2.xyz + u_xlat4.xyz;
    u_xlat2.xyz = u_xlat3.xyz + u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz + vec3(0.0, -1.0, -1.0);
    u_xlat20.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat20.x = inversesqrt(u_xlat20.x);
    u_xlat2.xyz = u_xlat20.xxx * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat0.xyw * u_xlat2.xyz;
    u_xlat0.xyz = u_xlat2.zxy * u_xlat0.ywx + (-u_xlat3.xyz);
    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.xyz * u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
    u_xlat30 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat1.xyz = vec3(u_xlat30) * u_xlat1.xyz;
    u_xlat30 = dot(u_xlat1.xyz, u_xlat0.xyz);
#ifdef UNITY_ADRENO_ES3
    { bool cond = 0.0<u_xlat30; u_xlati1 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati1 = int((0.0<u_xlat30) ? 0xFFFFFFFFu : uint(0u));
#endif
#ifdef UNITY_ADRENO_ES3
    { bool cond = u_xlat30<0.0; u_xlati30 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati30 = int((u_xlat30<0.0) ? 0xFFFFFFFFu : uint(0u));
#endif
    u_xlati30 = (-u_xlati1) + u_xlati30;
    u_xlat30 = float(u_xlati30);
    vs_TEXCOORD1.xyz = vec3(u_xlat30) * u_xlat0.xyz;
    vs_TEXCOORD1.w = 0.0;
    u_xlat0.x = u_xlat31 / _RootColorScale;
    u_xlat0.x = u_xlat0.x + _RootColorOffset;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xxx * vec3(-0.501960814, 0.0, 0.0) + vec3(0.501960814, 0.0, 0.0);
    u_xlat30 = u_xlat31 + -0.600000024;
    vs_TEXCOORD3 = u_xlat31;
    u_xlat30 = max(u_xlat30, 0.0);
    u_xlat30 = _GrassTipLighting * u_xlat30 + 1.0;
    vs_TEXCOORD2.xyz = vec3(u_xlat30) * u_xlat0.xyz;
    vs_TEXCOORD2.w = 0.0;
    vs_TEXCOORD4.xy = in_TEXCOORD2.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	float _GrassShininess;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	float _CutOff;
uniform 	vec4 _BurnedColor;
uniform lowp sampler2D _MainTex;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp float vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec4 u_xlat0;
lowp vec4 u_xlat10_0;
bool u_xlatb0;
vec3 u_xlat1;
mediump float u_xlat16_2;
float u_xlat9;
bool u_xlatb9;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD4.xy);
    u_xlat9 = u_xlat10_0.w + (-_CutOff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(u_xlat9<0.0);
#else
    u_xlatb9 = u_xlat9<0.0;
#endif
    if((int(u_xlatb9) * int(0xffffffffu))!=0){discard;}
    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
    SV_Target0.xyz = u_xlat1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0;
    u_xlat1.xyz = _BurnedColor.xyz * u_xlat10_0.xyz + (-u_xlat10_0.xyz);
    u_xlat0.xyz = vs_TEXCOORD2.www * u_xlat1.xyz + u_xlat10_0.xyz;
    u_xlat0.w = vs_TEXCOORD3;
    SV_Target1 = u_xlat0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_2 = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb0) ? u_xlat16_2 : 0.0399999991;
    u_xlat0.x = (-vs_TEXCOORD2.w) + 1.0;
    u_xlat0.x = u_xlat0.x * _GrassShininess;
    SV_Target2.w = u_xlat0.x;
    SV_Target2.xy = vec2(0.0399999991, 0.0399999991);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_HDR_ON" "INSTANCING_ON" "MHY_SHADER_HIGH" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	int unity_BaseInstanceID;
uniform 	float _NoiseScale;
uniform 	vec4 _WorldOffsetRange;
uniform 	float _HeightScale;
uniform 	float _Billboard;
uniform 	float _VegetationMoveScale;
uniform 	float _VegetationStiffness;
uniform 	vec4 _LocalWindsMapSize;
uniform 	vec4 _LargeWindParam;
uniform 	vec4 _SmallWindParam;
uniform 	vec4 _GlobalWind;
uniform 	vec4 _LocalWindsMapCameraInfo;
uniform 	float _GrassTipLighting;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BurnedColor;
uniform 	float _RootColorScale;
uniform 	float _RootColorOffset;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _Heightmap;
uniform lowp sampler2D _Noisemap;
uniform lowp sampler2D _LocalWindsMap;
in highp vec4 in_POSITION0;
in highp vec4 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec2 in_TEXCOORD2;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp float vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec3 u_xlat0;
int u_xlati0;
uvec3 u_xlatu0;
vec3 u_xlat1;
uvec3 u_xlatu1;
vec4 u_xlat2;
uvec3 u_xlatu2;
vec3 u_xlat3;
vec4 u_xlat4;
vec3 u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
vec3 u_xlat8;
vec4 u_xlat9;
vec4 u_xlat10;
float u_xlat11;
int u_xlati11;
float u_xlat13;
uint u_xlatu13;
vec3 u_xlat17;
vec3 u_xlat18;
float u_xlat22;
int u_xlati22;
bool u_xlatb22;
float u_xlat24;
float u_xlat33;
bool u_xlatb33;
float u_xlat34;
bool u_xlatb34;
float u_xlat36;
void main()
{
    u_xlat0.z = 0.0;
    u_xlati11 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati11 = u_xlati11 << 2;
    u_xlat1.xyz = in_TEXCOORD0.yyy * unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_TEXCOORD0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat2.xy = u_xlat1.xz + (-_LocalWindsMapSize.xy);
    u_xlat2.xy = vec2(u_xlat2.x / _LocalWindsMapSize.z, u_xlat2.y / _LocalWindsMapSize.w);
    u_xlat2.xy = u_xlat2.xy + vec2(0.5, 0.5);
    u_xlat2 = textureLod(_LocalWindsMap, u_xlat2.xy, 0.0);
    u_xlat33 = dot(u_xlat2.xy, u_xlat2.xy);
    u_xlat33 = sqrt(u_xlat33);
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(9.99999975e-05>=u_xlat33);
#else
    u_xlatb33 = 9.99999975e-05>=u_xlat33;
#endif
    u_xlat33 = u_xlatb33 ? 1.0 : float(0.0);
    u_xlat3.xy = (-u_xlat2.xy) + vec2(0.5, 0.5);
    u_xlat2.xy = vec2(u_xlat33) * u_xlat3.xy + u_xlat2.xy;
    u_xlat2.xy = u_xlat2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat33 = dot(u_xlat2.xy, u_xlat2.xy);
    u_xlat33 = max(u_xlat33, 0.00100000005);
    u_xlat3.x = inversesqrt(u_xlat33);
    u_xlat3.yz = u_xlat2.xy * u_xlat3.xx;
    u_xlat0.x = u_xlat3.z;
    u_xlat0.xz = (-u_xlat3.xy) * vec2(0.0, 1.0) + u_xlat0.xz;
    u_xlat33 = (-in_TEXCOORD1.x) + unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].x;
    u_xlat34 = u_xlat33 * 3.0;
    u_xlat34 = _Time.y * 3.0 + u_xlat34;
    u_xlat34 = u_xlat34 + 0.5;
    u_xlat34 = fract(u_xlat34);
    u_xlat34 = u_xlat34 * 2.0 + -1.0;
    u_xlat3.x = abs(u_xlat34) * abs(u_xlat34);
    u_xlat34 = -abs(u_xlat34) * 2.0 + 3.0;
    u_xlat34 = u_xlat34 * u_xlat3.x;
    u_xlat3.x = u_xlat2.z * 1.5;
    u_xlat34 = u_xlat34 * u_xlat3.x;
    u_xlat0.xz = u_xlat0.xz * vec2(u_xlat34);
    u_xlat0.xz = u_xlat0.xz * vec2(0.150000006, 0.150000006);
    u_xlat0.xz = u_xlat3.yz * vec2(u_xlat34) + u_xlat0.xz;
    u_xlat0.xz = u_xlat0.xz + u_xlat2.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlatb34 = !!(0.00199999986<u_xlat2.z);
#else
    u_xlatb34 = 0.00199999986<u_xlat2.z;
#endif
    u_xlat24 = (-u_xlat2.w) * _LocalWindsMapCameraInfo.y + _LocalWindsMapCameraInfo.x;
    u_xlat0.xz = (bool(u_xlatb34)) ? u_xlat0.xz : u_xlat2.xy;
    u_xlat2.xy = vec2(_WorldOffsetRange.z + float(2.0), _WorldOffsetRange.w + float(2.0));
    u_xlat3.xy = u_xlat1.xz + (-_WorldOffsetRange.xy);
    u_xlat3.xy = u_xlat3.xy + vec2(1.0, 1.0);
    u_xlat2.xy = u_xlat3.xy / u_xlat2.xy;
    u_xlat34 = textureLod(_Heightmap, u_xlat2.xy, 0.0).x;
    u_xlat2.x = u_xlat34 * _HeightScale + u_xlat1.y;
    u_xlat2.x = (-u_xlat2.x) + u_xlat24;
    u_xlat2.x = u_xlat2.x * 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat2.x = (-u_xlat2.x) + 1.0;
    u_xlat13 = float(floatBitsToUint(unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2]).w);
    u_xlat13 = u_xlat13 * 5.96046448e-08;
    u_xlatu13 = uint(u_xlat13);
    u_xlatu13 = u_xlatu13 & 3u;
    u_xlat13 = float(u_xlatu13);
    u_xlat24 = fract(u_xlat33);
    u_xlat33 = u_xlat33 + unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].y;
    u_xlat3.xy = vec2(u_xlat33) * vec2(22.0, 33.0);
    u_xlat3.xy = fract(u_xlat3.xy);
    u_xlat3.xy = u_xlat3.xy + vec2(-0.5, -0.5);
    u_xlat3.xz = u_xlat3.xy * vec2(0.200000003, 0.200000003);
    u_xlat33 = u_xlat13 + u_xlat24;
    u_xlat13 = u_xlat24 * _SmallWindParam.x;
    u_xlat13 = sin(u_xlat13);
    u_xlat33 = u_xlat33 + -0.5;
    u_xlat24 = u_xlat33 * 0.333000004;
    u_xlat4.y = u_xlat33 * 0.333000004 + -1.0;
    u_xlat33 = in_TEXCOORD1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat33 = min(max(u_xlat33, 0.0), 1.0);
#else
    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
#endif
    u_xlat24 = u_xlat24 * u_xlat33;
    u_xlat2.x = u_xlat24 * u_xlat2.x;
    u_xlat0.xz = u_xlat0.xz * u_xlat2.xx;
    u_xlat5.xz = u_xlat0.xz * vec2(vec2(_VegetationMoveScale, _VegetationMoveScale));
    u_xlat6.y = 0.0;
    u_xlat0.x = _VegetationStiffness * _SmallWindParam.y;
    u_xlat0.x = u_xlat24 * u_xlat0.x;
    u_xlat7.x = u_xlat0.x * u_xlat13;
    u_xlat2.xyw = in_NORMAL0.yyy * unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat2.xyw = unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_NORMAL0.xxx + u_xlat2.xyw;
    u_xlat2.xyw = unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_NORMAL0.zzz + u_xlat2.xyw;
    u_xlat0.x = dot(u_xlat2.xyw, u_xlat2.xyw);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat2.xyw = u_xlat0.xxx * u_xlat2.xyw;
    u_xlat7.y = float(1.0);
    u_xlat7.z = float(0.349999994);
    u_xlat8.xyz = u_xlat2.xyw * u_xlat7.yxy;
    u_xlat0.x = dot(_GlobalWind.xyz, _GlobalWind.xyz);
    u_xlat0.x = max(u_xlat0.x, 0.00100000005);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat9 = u_xlat0.xxxx * _GlobalWind.xzxz;
    u_xlat0.xz = vec2(u_xlat9.z * _LargeWindParam.z, u_xlat9.w * _LargeWindParam.z);
    u_xlat18.xz = u_xlat1.xz / vec2(_NoiseScale);
    u_xlat18.xz = _LargeWindParam.xx * u_xlat9.xy + u_xlat18.xz;
    u_xlat18.xz = textureLod(_Noisemap, u_xlat18.xz, 0.0).xy;
    u_xlat18.xz = u_xlat18.xz + vec2(-0.5, -0.5);
    u_xlat18.xz = u_xlat18.xz * _LargeWindParam.yy + vec2(0.5, 0.5);
    u_xlat18.xz = vec2(u_xlat24) * u_xlat18.xz;
    u_xlat6.xz = u_xlat0.xz * u_xlat18.xz;
    u_xlat9.xyz = u_xlat8.xyz * u_xlat7.xzx + u_xlat6.xyz;
    u_xlat7.xyz = u_xlat7.xzx * u_xlat8.xyz;
    u_xlat5.y = 0.0;
    u_xlat8.xyz = u_xlat5.xyz + u_xlat9.xyz;
    u_xlat9.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat9.xyz = unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat9.xyz;
    u_xlat9.xyz = unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat9.xyz;
    u_xlat9.xyz = u_xlat9.xyz + unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat9.xyz = (-u_xlat1.xyz) + u_xlat9.xyz;
    u_xlat10.x = unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].x;
    u_xlat10.y = unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].x;
    u_xlat0.x = dot(u_xlat10.xy, u_xlat10.xy);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xz = u_xlat0.xx * u_xlat10.xy;
    u_xlat36 = u_xlat0.z * u_xlat9.z;
    u_xlat36 = u_xlat9.x * u_xlat0.x + (-u_xlat36);
    u_xlat0.x = dot(u_xlat9.zx, u_xlat0.xz);
    u_xlat10.y = hlslcc_mtx4x4unity_MatrixV[0].x;
    u_xlat10.x = hlslcc_mtx4x4unity_MatrixV[2].x;
    u_xlat22 = dot(u_xlat10.xy, u_xlat10.xy);
    u_xlat22 = inversesqrt(u_xlat22);
    u_xlat17.xz = vec2(u_xlat22) * u_xlat10.xy;
    u_xlat0.xz = u_xlat0.xx * u_xlat17.xz;
    u_xlat0.x = u_xlat36 * u_xlat17.z + (-u_xlat0.x);
    u_xlat0.z = u_xlat36 * u_xlat17.x + u_xlat0.z;
    u_xlat0.xz = u_xlat9.xz + u_xlat0.xz;
    u_xlat9.z = (-u_xlat0.z) * _Billboard + u_xlat9.z;
    u_xlat9.x = (-u_xlat0.x) * _Billboard + u_xlat9.x;
    u_xlat8.xyz = u_xlat9.xyz * vec3(0.100000001, 1.0, 0.100000001) + u_xlat8.xyz;
    u_xlat0.x = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat0.x = max(u_xlat0.x, 0.00100000005);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat8.xyz = u_xlat0.xxx * u_xlat8.xyz;
    u_xlat0.x = dot(u_xlat9.xyz, u_xlat9.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat10.xyz = u_xlat9.xyz * vec3(0.100000001, 1.0, 0.100000001);
    u_xlat8.xyz = u_xlat8.xyz * u_xlat0.xxx + (-u_xlat10.xyz);
    u_xlat10.xyz = u_xlat1.xyz + u_xlat9.xyz;
    u_xlat10.w = u_xlat34 * _HeightScale + u_xlat10.y;
    u_xlat1.xyz = u_xlat8.xyz + u_xlat10.xwz;
    u_xlatu0.xz = uvec2(65280u, 255u) & floatBitsToUint(unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1]).ww;
    u_xlat0.xz = vec2(u_xlatu0.xz);
    u_xlat0.x = u_xlat0.x * 0.00390625;
    u_xlatu0.x = uint(u_xlat0.x);
    u_xlat0.x = float(u_xlatu0.x);
    u_xlat8.xz = u_xlat0.xz + vec2(-127.0, -127.0);
    u_xlat0.xz = u_xlat8.xz * vec2(0.00787401572, 0.00787401572);
    u_xlat0.xz = u_xlat0.xz * u_xlat0.xz;
    u_xlat0.x = u_xlat0.z + u_xlat0.x;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(0.0<u_xlat0.x);
#else
    u_xlatb22 = 0.0<u_xlat0.x;
#endif
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat8.y = u_xlatb22 ? u_xlat0.x : float(0.0);
    u_xlat10.xyz = u_xlat8.xyz * u_xlat9.yyy;
    u_xlat10.xyz = vec3(u_xlat24) * u_xlat10.xyz;
    u_xlat0.x = max(u_xlat24, 9.99999972e-10);
    u_xlat1.xyz = u_xlat10.xyz * vec3(0.00393700786, 0.0, 0.00393700786) + u_xlat1.xyz;
    u_xlat4.xz = u_xlat4.yy * (-u_xlat4.yy);
    u_xlat1.xyz = u_xlat4.xyz * u_xlat9.xyz + u_xlat1.xyz;
    u_xlat4.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat9 = u_xlat4.yyyy * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat9 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat4.xxxx + u_xlat9;
    u_xlat4 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat4.zzzz + u_xlat9;
    gl_Position = u_xlat4 + hlslcc_mtx4x4unity_MatrixVPZero[3];
    u_xlat3.y = 0.0;
    vs_TEXCOORD0.xyz = u_xlat8.xyz * vec3(0.00787401572, 1.0, 0.00787401572) + u_xlat3.xyz;
    vs_TEXCOORD0.w = 0.0;
    u_xlat3.xyz = u_xlat5.yzx / u_xlat0.xxx;
    u_xlat4.yz = u_xlat6.zx / u_xlat0.xx;
    u_xlat5.xyz = u_xlat7.yzx / u_xlat0.xxx;
    u_xlat4.x = 0.0;
    u_xlat4.xyz = u_xlat4.xyz + u_xlat5.xyz;
    u_xlat3.xyz = u_xlat3.xyz + u_xlat4.xyz;
    u_xlat3.xyz = u_xlat8.yzx * vec3(1.0, 0.00787401572, 0.00787401572) + u_xlat3.xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.xyw * u_xlat3.xyz;
    u_xlat2.xyz = u_xlat3.zxy * u_xlat2.ywx + (-u_xlat4.xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat4.xyz = u_xlat3.xyz * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
    { bool cond = 0.0<u_xlat0.x; u_xlati22 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati22 = int((0.0<u_xlat0.x) ? 0xFFFFFFFFu : uint(0u));
#endif
#ifdef UNITY_ADRENO_ES3
    { bool cond = u_xlat0.x<0.0; u_xlati0 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati0 = int((u_xlat0.x<0.0) ? 0xFFFFFFFFu : uint(0u));
#endif
    u_xlati0 = (-u_xlati22) + u_xlati0;
    u_xlat0.x = float(u_xlati0);
    vs_TEXCOORD1.xyz = u_xlat0.xxx * u_xlat2.xyz;
    vs_TEXCOORD1.w = 0.0;
    u_xlatu1.xyz = uvec3(16711680u, 65280u, 255u) & floatBitsToUint(unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2]).www;
    u_xlat1.xyz = vec3(u_xlatu1.xyz);
    u_xlatu2.xyz = uvec3(16711680u, 65280u, 255u) & floatBitsToUint(unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3]).www;
    u_xlat0.x = max(1.0, unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].w);
    u_xlat0.x = min(u_xlat0.x, 2.0);
    u_xlat0.x = u_xlat0.x + -1.0;
    u_xlat2.xyz = vec3(u_xlatu2.xyz);
    u_xlat2.xyz = u_xlat2.xyz * vec3(5.9838392e-08, 1.53186284e-05, 0.00392156886);
    u_xlat1.xyz = u_xlat1.xyz * vec3(5.9838392e-08, 1.53186284e-05, 0.00392156886) + (-u_xlat2.xyz);
    u_xlat11 = u_xlat33 / _RootColorScale;
    u_xlat11 = u_xlat11 + _RootColorOffset;
#ifdef UNITY_ADRENO_ES3
    u_xlat11 = min(max(u_xlat11, 0.0), 1.0);
#else
    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat11) * u_xlat1.xyz + u_xlat2.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _BurnedColor.xyz;
    u_xlat1.xyz = u_xlat0.xxx * u_xlat2.xyz + u_xlat1.xyz;
    vs_TEXCOORD2.w = u_xlat0.x;
    u_xlat0.x = u_xlat33 + -0.600000024;
    vs_TEXCOORD3 = u_xlat33;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = _GrassTipLighting * u_xlat0.x + 1.0;
    vs_TEXCOORD2.xyz = u_xlat0.xxx * u_xlat1.xyz;
    vs_TEXCOORD4.xy = in_TEXCOORD2.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	float _GrassShininess;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	float _CutOff;
uniform 	vec4 _BurnedColor;
uniform lowp sampler2D _MainTex;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp float vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec4 u_xlat0;
lowp vec4 u_xlat10_0;
bool u_xlatb0;
vec3 u_xlat1;
mediump float u_xlat16_2;
float u_xlat9;
bool u_xlatb9;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD4.xy);
    u_xlat9 = u_xlat10_0.w + (-_CutOff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(u_xlat9<0.0);
#else
    u_xlatb9 = u_xlat9<0.0;
#endif
    if((int(u_xlatb9) * int(0xffffffffu))!=0){discard;}
    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
    SV_Target0.xyz = u_xlat1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0;
    u_xlat1.xyz = _BurnedColor.xyz * u_xlat10_0.xyz + (-u_xlat10_0.xyz);
    u_xlat0.xyz = vs_TEXCOORD2.www * u_xlat1.xyz + u_xlat10_0.xyz;
    u_xlat0.w = vs_TEXCOORD3;
    SV_Target1 = u_xlat0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_2 = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb0) ? u_xlat16_2 : 0.0399999991;
    u_xlat0.x = (-vs_TEXCOORD2.w) + 1.0;
    u_xlat0.x = u_xlat0.x * _GrassShininess;
    SV_Target2.w = u_xlat0.x;
    SV_Target2.xy = vec2(0.0399999991, 0.0399999991);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_HDR_ON" "MHY_SHADER_HIGH" "DITHER_FADE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	float _NoiseScale;
uniform 	vec4 _WorldOffsetRange;
uniform 	float _HeightScale;
uniform 	float _Billboard;
uniform 	float _VegetationMoveScale;
uniform 	float _VegetationStiffness;
uniform 	vec4 _LocalWindsMapSize;
uniform 	vec4 _LargeWindParam;
uniform 	vec4 _SmallWindParam;
uniform 	vec4 _GlobalWind;
uniform 	vec4 _LocalWindsMapCameraInfo;
uniform 	float _GrassTipLighting;
uniform 	vec4 _MainTex_ST;
uniform 	float _RootColorScale;
uniform 	float _RootColorOffset;
uniform highp sampler2D _Heightmap;
uniform lowp sampler2D _Noisemap;
uniform lowp sampler2D _LocalWindsMap;
in highp vec4 in_POSITION0;
in highp vec4 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec2 in_TEXCOORD2;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp float vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
vec4 u_xlat0;
vec3 u_xlat1;
int u_xlati1;
vec4 u_xlat2;
bool u_xlatb2;
vec3 u_xlat3;
vec4 u_xlat4;
vec3 u_xlat5;
vec4 u_xlat6;
vec4 u_xlat7;
vec4 u_xlat8;
vec3 u_xlat9;
vec3 u_xlat10;
bool u_xlatb10;
vec2 u_xlat12;
vec3 u_xlat16;
vec2 u_xlat20;
vec2 u_xlat22;
float u_xlat30;
int u_xlati30;
float u_xlat31;
float u_xlat33;
float u_xlat34;
void main()
{
    u_xlat0.z = 0.0;
    u_xlat1.xyz = in_TEXCOORD0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[2].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TEXCOORD0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat10.xz = u_xlat1.xz + (-_LocalWindsMapSize.xy);
    u_xlat10.xz = vec2(u_xlat10.x / _LocalWindsMapSize.z, u_xlat10.z / _LocalWindsMapSize.w);
    u_xlat10.xz = u_xlat10.xz + vec2(0.5, 0.5);
    u_xlat2 = textureLod(_LocalWindsMap, u_xlat10.xz, 0.0);
    u_xlat10.x = dot(u_xlat2.xy, u_xlat2.xy);
    u_xlat10.x = sqrt(u_xlat10.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(9.99999975e-05>=u_xlat10.x);
#else
    u_xlatb10 = 9.99999975e-05>=u_xlat10.x;
#endif
    u_xlat10.x = u_xlatb10 ? 1.0 : float(0.0);
    u_xlat3.xy = (-u_xlat2.xy) + vec2(0.5, 0.5);
    u_xlat10.xz = u_xlat10.xx * u_xlat3.xy + u_xlat2.xy;
    u_xlat10.xz = u_xlat10.xz * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat31 = dot(u_xlat10.xz, u_xlat10.xz);
    u_xlat31 = max(u_xlat31, 0.00100000005);
    u_xlat3.x = inversesqrt(u_xlat31);
    u_xlat3.yz = u_xlat10.xz * u_xlat3.xx;
    u_xlat0.x = u_xlat3.z;
    u_xlat0.xz = (-u_xlat3.xy) * vec2(0.0, 1.0) + u_xlat0.xz;
    u_xlat31 = (-in_TEXCOORD1.x) + hlslcc_mtx4x4unity_ObjectToWorld[1].x;
    u_xlat2.x = u_xlat31 * 3.0;
    u_xlat2.x = _Time.y * 3.0 + u_xlat2.x;
    u_xlat2.x = u_xlat2.x + 0.5;
    u_xlat2.x = fract(u_xlat2.x);
    u_xlat2.x = u_xlat2.x * 2.0 + -1.0;
    u_xlat12.x = abs(u_xlat2.x) * abs(u_xlat2.x);
    u_xlat2.x = -abs(u_xlat2.x) * 2.0 + 3.0;
    u_xlat2.x = u_xlat2.x * u_xlat12.x;
    u_xlat12.x = u_xlat2.z * 1.5;
    u_xlat2.x = u_xlat12.x * u_xlat2.x;
    u_xlat0.xz = u_xlat0.xz * u_xlat2.xx;
    u_xlat0.xz = u_xlat0.xz * vec2(0.150000006, 0.150000006);
    u_xlat0.xz = u_xlat3.yz * u_xlat2.xx + u_xlat0.xz;
    u_xlat0.xz = u_xlat0.xz + u_xlat10.xz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(0.00199999986<u_xlat2.z);
#else
    u_xlatb2 = 0.00199999986<u_xlat2.z;
#endif
    u_xlat12.x = (-u_xlat2.w) * _LocalWindsMapCameraInfo.y + _LocalWindsMapCameraInfo.x;
    u_xlat0.xy = (bool(u_xlatb2)) ? u_xlat0.xz : u_xlat10.xz;
    u_xlat20.xy = vec2(_WorldOffsetRange.z + float(2.0), _WorldOffsetRange.w + float(2.0));
    u_xlat2.xz = u_xlat1.xz + (-_WorldOffsetRange.xy);
    u_xlat2.xz = u_xlat2.xz + vec2(1.0, 1.0);
    u_xlat20.xy = u_xlat2.xz / u_xlat20.xy;
    u_xlat20.x = textureLod(_Heightmap, u_xlat20.xy, 0.0).x;
    u_xlat30 = u_xlat20.x * _HeightScale + u_xlat1.y;
    u_xlat30 = (-u_xlat30) + u_xlat12.x;
    u_xlat30 = u_xlat30 * 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
#else
    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
#endif
    u_xlat30 = (-u_xlat30) + 1.0;
    u_xlat2.x = fract(u_xlat31);
    u_xlat31 = u_xlat31 + hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat12.xy = vec2(u_xlat31) * vec2(22.0, 33.0);
    u_xlat12.xy = fract(u_xlat12.xy);
    u_xlat12.xy = u_xlat12.xy + vec2(-0.5, -0.5);
    u_xlat3.xz = u_xlat12.xy * vec2(0.200000003, 0.200000003);
    u_xlat31 = u_xlat2.x + -0.5;
    u_xlat2.x = u_xlat2.x * _SmallWindParam.x;
    u_xlat2.x = sin(u_xlat2.x);
    u_xlat12.x = u_xlat31 * 0.333000004;
    u_xlat4.y = u_xlat31 * 0.333000004 + -1.0;
    u_xlat31 = in_TEXCOORD1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat31 = min(max(u_xlat31, 0.0), 1.0);
#else
    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat12.x * u_xlat31;
    u_xlat30 = u_xlat30 * u_xlat12.x;
    u_xlat0.xy = vec2(u_xlat30) * u_xlat0.xy;
    u_xlat5.xz = u_xlat0.xy * vec2(vec2(_VegetationMoveScale, _VegetationMoveScale));
    u_xlat0.x = dot(_GlobalWind.xyz, _GlobalWind.xyz);
    u_xlat0.x = max(u_xlat0.x, 0.00100000005);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat6 = u_xlat0.xxxx * _GlobalWind.xzxz;
    u_xlat0.xy = vec2(u_xlat6.z * _LargeWindParam.z, u_xlat6.w * _LargeWindParam.z);
    u_xlat22.xy = u_xlat1.xz / vec2(_NoiseScale);
    u_xlat22.xy = _LargeWindParam.xx * u_xlat6.xy + u_xlat22.xy;
    u_xlat22.xy = textureLod(_Noisemap, u_xlat22.xy, 0.0).xy;
    u_xlat22.xy = u_xlat22.xy + vec2(-0.5, -0.5);
    u_xlat22.xy = u_xlat22.xy * _LargeWindParam.yy + vec2(0.5, 0.5);
    u_xlat22.xy = u_xlat12.xx * u_xlat22.xy;
    u_xlat6.xz = u_xlat0.xy * u_xlat22.xy;
    u_xlat6.y = 0.0;
    u_xlat0.x = _VegetationStiffness * _SmallWindParam.y;
    u_xlat0.x = u_xlat12.x * u_xlat0.x;
    u_xlat7.x = u_xlat0.x * u_xlat2.x;
    u_xlat0.xyw = in_NORMAL0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyw = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_NORMAL0.xxx + u_xlat0.xyw;
    u_xlat0.xyw = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_NORMAL0.zzz + u_xlat0.xyw;
    u_xlat2.x = dot(u_xlat0.xyw, u_xlat0.xyw);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat0.xyw = u_xlat0.xyw * u_xlat2.xxx;
    u_xlat7.y = float(1.0);
    u_xlat7.z = float(0.349999994);
    u_xlat2.xzw = u_xlat0.xyw * u_xlat7.yxy;
    u_xlat8.xyz = u_xlat2.xzw * u_xlat7.xzx + u_xlat6.xyz;
    u_xlat2.xzw = u_xlat7.xzx * u_xlat2.xzw;
    u_xlat5.y = 0.0;
    u_xlat7.xyz = u_xlat5.xyz + u_xlat8.xyz;
    u_xlat8.y = hlslcc_mtx4x4unity_MatrixV[0].x;
    u_xlat8.x = hlslcc_mtx4x4unity_MatrixV[2].x;
    u_xlat33 = dot(u_xlat8.xy, u_xlat8.xy);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat16.xz = vec2(u_xlat33) * u_xlat8.xy;
    u_xlat8.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;
    u_xlat8.y = hlslcc_mtx4x4unity_ObjectToWorld[2].x;
    u_xlat33 = dot(u_xlat8.xy, u_xlat8.xy);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat8.xy = vec2(u_xlat33) * u_xlat8.xy;
    u_xlat9.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat9.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat9.xyz;
    u_xlat9.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat9.xyz;
    u_xlat9.xyz = u_xlat9.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat9.xyz = (-u_xlat1.xyz) + u_xlat9.xyz;
    u_xlat33 = u_xlat8.y * u_xlat9.z;
    u_xlat33 = u_xlat9.x * u_xlat8.x + (-u_xlat33);
    u_xlat34 = dot(u_xlat9.zx, u_xlat8.xy);
    u_xlat8.xy = u_xlat16.xz * vec2(u_xlat34);
    u_xlat34 = u_xlat33 * u_xlat16.z + (-u_xlat8.x);
    u_xlat33 = u_xlat33 * u_xlat16.x + u_xlat8.y;
    u_xlat33 = u_xlat9.z + u_xlat33;
    u_xlat9.z = (-u_xlat33) * _Billboard + u_xlat9.z;
    u_xlat33 = u_xlat9.x + u_xlat34;
    u_xlat9.x = (-u_xlat33) * _Billboard + u_xlat9.x;
    u_xlat33 = u_xlat12.x * u_xlat9.y;
    u_xlat12.x = max(u_xlat12.x, 9.99999972e-10);
    u_xlat7.xyz = u_xlat9.xyz * vec3(0.100000001, 1.0, 0.100000001) + u_xlat7.xyz;
    u_xlat34 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat34 = max(u_xlat34, 0.00100000005);
    u_xlat34 = inversesqrt(u_xlat34);
    u_xlat7.xyz = vec3(u_xlat34) * u_xlat7.xyz;
    u_xlat34 = dot(u_xlat9.xyz, u_xlat9.xyz);
    u_xlat34 = sqrt(u_xlat34);
    u_xlat8.xyz = u_xlat9.xyz * vec3(0.100000001, 1.0, 0.100000001);
    u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat34) + (-u_xlat8.xyz);
    u_xlat8.xyz = u_xlat1.xyz + u_xlat9.xyz;
    u_xlat8.w = u_xlat20.x * _HeightScale + u_xlat8.y;
    u_xlat1.xyz = u_xlat7.xyz + u_xlat8.xwz;
    u_xlat1.xyz = vec3(u_xlat33) * vec3(-0.5, 0.0, -0.5) + u_xlat1.xyz;
    u_xlat4.xz = u_xlat4.yy * (-u_xlat4.yy);
    u_xlat1.xyz = u_xlat4.xyz * u_xlat9.xyz + u_xlat1.xyz;
    u_xlat4.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat7 = u_xlat4.yyyy * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat7 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat4.xxxx + u_xlat7;
    u_xlat4 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat4.zzzz + u_xlat7;
    u_xlat4 = u_xlat4 + hlslcc_mtx4x4unity_MatrixVPZero[3];
    gl_Position = u_xlat4;
    u_xlat3.y = 0.0;
    vs_TEXCOORD0.xyz = u_xlat3.xyz + vec3(-1.0, 0.0, -1.0);
    vs_TEXCOORD0.w = 0.0;
    u_xlat3.xyz = u_xlat5.yzx / u_xlat12.xxx;
    u_xlat5.yz = u_xlat6.zx / u_xlat12.xx;
    u_xlat2.xyz = u_xlat2.zwx / u_xlat12.xxx;
    u_xlat5.x = 0.0;
    u_xlat2.xyz = u_xlat2.xyz + u_xlat5.xyz;
    u_xlat2.xyz = u_xlat3.xyz + u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz + vec3(0.0, -1.0, -1.0);
    u_xlat20.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat20.x = inversesqrt(u_xlat20.x);
    u_xlat2.xyz = u_xlat20.xxx * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat0.xyw * u_xlat2.xyz;
    u_xlat0.xyz = u_xlat2.zxy * u_xlat0.ywx + (-u_xlat3.xyz);
    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.xyz * u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
    u_xlat30 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat1.xyz = vec3(u_xlat30) * u_xlat1.xyz;
    u_xlat30 = dot(u_xlat1.xyz, u_xlat0.xyz);
#ifdef UNITY_ADRENO_ES3
    { bool cond = 0.0<u_xlat30; u_xlati1 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati1 = int((0.0<u_xlat30) ? 0xFFFFFFFFu : uint(0u));
#endif
#ifdef UNITY_ADRENO_ES3
    { bool cond = u_xlat30<0.0; u_xlati30 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati30 = int((u_xlat30<0.0) ? 0xFFFFFFFFu : uint(0u));
#endif
    u_xlati30 = (-u_xlati1) + u_xlati30;
    u_xlat30 = float(u_xlati30);
    vs_TEXCOORD1.xyz = vec3(u_xlat30) * u_xlat0.xyz;
    vs_TEXCOORD1.w = 0.0;
    u_xlat0.x = u_xlat31 / _RootColorScale;
    u_xlat0.x = u_xlat0.x + _RootColorOffset;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xxx * vec3(-0.501960814, 0.0, 0.0) + vec3(0.501960814, 0.0, 0.0);
    u_xlat30 = u_xlat31 + -0.600000024;
    vs_TEXCOORD3 = u_xlat31;
    u_xlat30 = max(u_xlat30, 0.0);
    u_xlat30 = _GrassTipLighting * u_xlat30 + 1.0;
    vs_TEXCOORD2.xyz = vec3(u_xlat30) * u_xlat0.xyz;
    vs_TEXCOORD2.w = 0.0;
    vs_TEXCOORD4.xy = in_TEXCOORD2.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
    u_xlat0.x = u_xlat4.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat4.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.w = u_xlat4.w;
    vs_TEXCOORD5.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD5.z = 0.247058824;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
float ImmCB_0_0_0[64];
uniform 	vec4 _ScreenParams;
uniform 	float _GrassShininess;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	float _CutOff;
uniform 	vec4 _BurnedColor;
uniform lowp sampler2D _MainTex;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp float vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec3 u_xlat0;
int u_xlati0;
bool u_xlatb0;
lowp vec4 u_xlat10_1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat12;
bool u_xlatb12;
void main()
{
	ImmCB_0_0_0[0] = 1.0;
	ImmCB_0_0_0[1] = 49.0;
	ImmCB_0_0_0[2] = 13.0;
	ImmCB_0_0_0[3] = 61.0;
	ImmCB_0_0_0[4] = 4.0;
	ImmCB_0_0_0[5] = 52.0;
	ImmCB_0_0_0[6] = 16.0;
	ImmCB_0_0_0[7] = 64.0;
	ImmCB_0_0_0[8] = 33.0;
	ImmCB_0_0_0[9] = 17.0;
	ImmCB_0_0_0[10] = 45.0;
	ImmCB_0_0_0[11] = 29.0;
	ImmCB_0_0_0[12] = 36.0;
	ImmCB_0_0_0[13] = 20.0;
	ImmCB_0_0_0[14] = 48.0;
	ImmCB_0_0_0[15] = 32.0;
	ImmCB_0_0_0[16] = 9.0;
	ImmCB_0_0_0[17] = 57.0;
	ImmCB_0_0_0[18] = 5.0;
	ImmCB_0_0_0[19] = 53.0;
	ImmCB_0_0_0[20] = 12.0;
	ImmCB_0_0_0[21] = 60.0;
	ImmCB_0_0_0[22] = 8.0;
	ImmCB_0_0_0[23] = 56.0;
	ImmCB_0_0_0[24] = 41.0;
	ImmCB_0_0_0[25] = 25.0;
	ImmCB_0_0_0[26] = 37.0;
	ImmCB_0_0_0[27] = 21.0;
	ImmCB_0_0_0[28] = 44.0;
	ImmCB_0_0_0[29] = 28.0;
	ImmCB_0_0_0[30] = 40.0;
	ImmCB_0_0_0[31] = 24.0;
	ImmCB_0_0_0[32] = 3.0;
	ImmCB_0_0_0[33] = 51.0;
	ImmCB_0_0_0[34] = 15.0;
	ImmCB_0_0_0[35] = 63.0;
	ImmCB_0_0_0[36] = 2.0;
	ImmCB_0_0_0[37] = 50.0;
	ImmCB_0_0_0[38] = 14.0;
	ImmCB_0_0_0[39] = 62.0;
	ImmCB_0_0_0[40] = 35.0;
	ImmCB_0_0_0[41] = 19.0;
	ImmCB_0_0_0[42] = 47.0;
	ImmCB_0_0_0[43] = 31.0;
	ImmCB_0_0_0[44] = 34.0;
	ImmCB_0_0_0[45] = 18.0;
	ImmCB_0_0_0[46] = 46.0;
	ImmCB_0_0_0[47] = 30.0;
	ImmCB_0_0_0[48] = 11.0;
	ImmCB_0_0_0[49] = 59.0;
	ImmCB_0_0_0[50] = 7.0;
	ImmCB_0_0_0[51] = 55.0;
	ImmCB_0_0_0[52] = 10.0;
	ImmCB_0_0_0[53] = 58.0;
	ImmCB_0_0_0[54] = 6.0;
	ImmCB_0_0_0[55] = 54.0;
	ImmCB_0_0_0[56] = 43.0;
	ImmCB_0_0_0[57] = 27.0;
	ImmCB_0_0_0[58] = 39.0;
	ImmCB_0_0_0[59] = 23.0;
	ImmCB_0_0_0[60] = 42.0;
	ImmCB_0_0_0[61] = 26.0;
	ImmCB_0_0_0[62] = 38.0;
	ImmCB_0_0_0[63] = 22.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vs_TEXCOORD5.z<0.949999988);
#else
    u_xlatb0 = vs_TEXCOORD5.z<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD5.yx / vs_TEXCOORD5.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
        u_xlat0.xy = u_xlat0.xy * vec2(0.125, 0.125);
        u_xlat0.xy = fract(u_xlat0.xy);
        u_xlat0.xy = u_xlat0.xy * vec2(7.99900007, 7.99900007);
        u_xlat0.xy = trunc(u_xlat0.xy);
        u_xlat0.x = u_xlat0.x * 8.0 + u_xlat0.y;
        u_xlati0 = int(u_xlat0.x);
        u_xlat0.x = (-ImmCB_0_0_0[u_xlati0]) * 0.015625 + vs_TEXCOORD5.z;
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat0.x = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD0.xyz;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD4.xy);
    u_xlat2.xyz = _BurnedColor.xyz * u_xlat10_1.xyz + (-u_xlat10_1.xyz);
    u_xlat2.xyz = vs_TEXCOORD2.www * u_xlat2.xyz + u_xlat10_1.xyz;
    u_xlat12 = u_xlat10_1.w + (-_CutOff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat12<0.0);
#else
    u_xlatb12 = u_xlat12<0.0;
#endif
    if((int(u_xlatb12) * int(0xffffffffu))!=0){discard;}
    u_xlat12 = (-vs_TEXCOORD2.w) + 1.0;
    u_xlat12 = u_xlat12 * _GrassShininess;
    SV_Target0.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_3 = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb0) ? u_xlat16_3 : 0.0399999991;
    SV_Target0.w = 0.0;
    u_xlat2.w = vs_TEXCOORD3;
    SV_Target1 = u_xlat2;
    SV_Target2.xy = vec2(0.0399999991, 0.0399999991);
    SV_Target2.w = u_xlat12;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_HDR_ON" "INSTANCING_ON" "MHY_SHADER_HIGH" "DITHER_FADE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	int unity_BaseInstanceID;
uniform 	float _NoiseScale;
uniform 	vec4 _WorldOffsetRange;
uniform 	float _HeightScale;
uniform 	float _Billboard;
uniform 	float _VegetationMoveScale;
uniform 	float _VegetationStiffness;
uniform 	vec4 _LocalWindsMapSize;
uniform 	vec4 _LargeWindParam;
uniform 	vec4 _SmallWindParam;
uniform 	vec4 _GlobalWind;
uniform 	vec4 _LocalWindsMapCameraInfo;
uniform 	float _GrassTipLighting;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BurnedColor;
uniform 	float _RootColorScale;
uniform 	float _RootColorOffset;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _Heightmap;
uniform lowp sampler2D _Noisemap;
uniform lowp sampler2D _LocalWindsMap;
in highp vec4 in_POSITION0;
in highp vec4 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec2 in_TEXCOORD2;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp float vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
vec4 u_xlat0;
int u_xlati0;
uvec3 u_xlatu0;
vec3 u_xlat1;
uvec3 u_xlatu1;
vec4 u_xlat2;
uvec4 u_xlatu2;
vec3 u_xlat3;
vec4 u_xlat4;
vec3 u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
vec3 u_xlat8;
vec4 u_xlat9;
vec4 u_xlat10;
float u_xlat11;
int u_xlati11;
float u_xlat13;
uint u_xlatu13;
vec3 u_xlat17;
vec3 u_xlat18;
float u_xlat22;
int u_xlati22;
bool u_xlatb22;
float u_xlat24;
float u_xlat33;
bool u_xlatb33;
float u_xlat34;
bool u_xlatb34;
float u_xlat36;
void main()
{
    u_xlat0.z = 0.0;
    u_xlati11 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati11 = u_xlati11 << 2;
    u_xlat1.xyz = in_TEXCOORD0.yyy * unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_TEXCOORD0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat2.xy = u_xlat1.xz + (-_LocalWindsMapSize.xy);
    u_xlat2.xy = vec2(u_xlat2.x / _LocalWindsMapSize.z, u_xlat2.y / _LocalWindsMapSize.w);
    u_xlat2.xy = u_xlat2.xy + vec2(0.5, 0.5);
    u_xlat2 = textureLod(_LocalWindsMap, u_xlat2.xy, 0.0);
    u_xlat33 = dot(u_xlat2.xy, u_xlat2.xy);
    u_xlat33 = sqrt(u_xlat33);
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(9.99999975e-05>=u_xlat33);
#else
    u_xlatb33 = 9.99999975e-05>=u_xlat33;
#endif
    u_xlat33 = u_xlatb33 ? 1.0 : float(0.0);
    u_xlat3.xy = (-u_xlat2.xy) + vec2(0.5, 0.5);
    u_xlat2.xy = vec2(u_xlat33) * u_xlat3.xy + u_xlat2.xy;
    u_xlat2.xy = u_xlat2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat33 = dot(u_xlat2.xy, u_xlat2.xy);
    u_xlat33 = max(u_xlat33, 0.00100000005);
    u_xlat3.x = inversesqrt(u_xlat33);
    u_xlat3.yz = u_xlat2.xy * u_xlat3.xx;
    u_xlat0.x = u_xlat3.z;
    u_xlat0.xz = (-u_xlat3.xy) * vec2(0.0, 1.0) + u_xlat0.xz;
    u_xlat33 = (-in_TEXCOORD1.x) + unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].x;
    u_xlat34 = u_xlat33 * 3.0;
    u_xlat34 = _Time.y * 3.0 + u_xlat34;
    u_xlat34 = u_xlat34 + 0.5;
    u_xlat34 = fract(u_xlat34);
    u_xlat34 = u_xlat34 * 2.0 + -1.0;
    u_xlat3.x = abs(u_xlat34) * abs(u_xlat34);
    u_xlat34 = -abs(u_xlat34) * 2.0 + 3.0;
    u_xlat34 = u_xlat34 * u_xlat3.x;
    u_xlat3.x = u_xlat2.z * 1.5;
    u_xlat34 = u_xlat34 * u_xlat3.x;
    u_xlat0.xz = u_xlat0.xz * vec2(u_xlat34);
    u_xlat0.xz = u_xlat0.xz * vec2(0.150000006, 0.150000006);
    u_xlat0.xz = u_xlat3.yz * vec2(u_xlat34) + u_xlat0.xz;
    u_xlat0.xz = u_xlat0.xz + u_xlat2.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlatb34 = !!(0.00199999986<u_xlat2.z);
#else
    u_xlatb34 = 0.00199999986<u_xlat2.z;
#endif
    u_xlat24 = (-u_xlat2.w) * _LocalWindsMapCameraInfo.y + _LocalWindsMapCameraInfo.x;
    u_xlat0.xz = (bool(u_xlatb34)) ? u_xlat0.xz : u_xlat2.xy;
    u_xlat2.xy = vec2(_WorldOffsetRange.z + float(2.0), _WorldOffsetRange.w + float(2.0));
    u_xlat3.xy = u_xlat1.xz + (-_WorldOffsetRange.xy);
    u_xlat3.xy = u_xlat3.xy + vec2(1.0, 1.0);
    u_xlat2.xy = u_xlat3.xy / u_xlat2.xy;
    u_xlat34 = textureLod(_Heightmap, u_xlat2.xy, 0.0).x;
    u_xlat2.x = u_xlat34 * _HeightScale + u_xlat1.y;
    u_xlat2.x = (-u_xlat2.x) + u_xlat24;
    u_xlat2.x = u_xlat2.x * 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat2.x = (-u_xlat2.x) + 1.0;
    u_xlat13 = float(floatBitsToUint(unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2]).w);
    u_xlat13 = u_xlat13 * 5.96046448e-08;
    u_xlatu13 = uint(u_xlat13);
    u_xlatu13 = u_xlatu13 & 3u;
    u_xlat13 = float(u_xlatu13);
    u_xlat24 = fract(u_xlat33);
    u_xlat33 = u_xlat33 + unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].y;
    u_xlat3.xy = vec2(u_xlat33) * vec2(22.0, 33.0);
    u_xlat3.xy = fract(u_xlat3.xy);
    u_xlat3.xy = u_xlat3.xy + vec2(-0.5, -0.5);
    u_xlat3.xz = u_xlat3.xy * vec2(0.200000003, 0.200000003);
    u_xlat33 = u_xlat13 + u_xlat24;
    u_xlat13 = u_xlat24 * _SmallWindParam.x;
    u_xlat13 = sin(u_xlat13);
    u_xlat33 = u_xlat33 + -0.5;
    u_xlat24 = u_xlat33 * 0.333000004;
    u_xlat4.y = u_xlat33 * 0.333000004 + -1.0;
    u_xlat33 = in_TEXCOORD1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat33 = min(max(u_xlat33, 0.0), 1.0);
#else
    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
#endif
    u_xlat24 = u_xlat24 * u_xlat33;
    u_xlat2.x = u_xlat24 * u_xlat2.x;
    u_xlat0.xz = u_xlat0.xz * u_xlat2.xx;
    u_xlat5.xz = u_xlat0.xz * vec2(vec2(_VegetationMoveScale, _VegetationMoveScale));
    u_xlat6.y = 0.0;
    u_xlat0.x = _VegetationStiffness * _SmallWindParam.y;
    u_xlat0.x = u_xlat24 * u_xlat0.x;
    u_xlat7.x = u_xlat0.x * u_xlat13;
    u_xlat2.xyw = in_NORMAL0.yyy * unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat2.xyw = unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_NORMAL0.xxx + u_xlat2.xyw;
    u_xlat2.xyw = unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_NORMAL0.zzz + u_xlat2.xyw;
    u_xlat0.x = dot(u_xlat2.xyw, u_xlat2.xyw);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat2.xyw = u_xlat0.xxx * u_xlat2.xyw;
    u_xlat7.y = float(1.0);
    u_xlat7.z = float(0.349999994);
    u_xlat8.xyz = u_xlat2.xyw * u_xlat7.yxy;
    u_xlat0.x = dot(_GlobalWind.xyz, _GlobalWind.xyz);
    u_xlat0.x = max(u_xlat0.x, 0.00100000005);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat9 = u_xlat0.xxxx * _GlobalWind.xzxz;
    u_xlat0.xz = vec2(u_xlat9.z * _LargeWindParam.z, u_xlat9.w * _LargeWindParam.z);
    u_xlat18.xz = u_xlat1.xz / vec2(_NoiseScale);
    u_xlat18.xz = _LargeWindParam.xx * u_xlat9.xy + u_xlat18.xz;
    u_xlat18.xz = textureLod(_Noisemap, u_xlat18.xz, 0.0).xy;
    u_xlat18.xz = u_xlat18.xz + vec2(-0.5, -0.5);
    u_xlat18.xz = u_xlat18.xz * _LargeWindParam.yy + vec2(0.5, 0.5);
    u_xlat18.xz = vec2(u_xlat24) * u_xlat18.xz;
    u_xlat6.xz = u_xlat0.xz * u_xlat18.xz;
    u_xlat9.xyz = u_xlat8.xyz * u_xlat7.xzx + u_xlat6.xyz;
    u_xlat7.xyz = u_xlat7.xzx * u_xlat8.xyz;
    u_xlat5.y = 0.0;
    u_xlat8.xyz = u_xlat5.xyz + u_xlat9.xyz;
    u_xlat9.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat9.xyz = unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat9.xyz;
    u_xlat9.xyz = unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat9.xyz;
    u_xlat9.xyz = u_xlat9.xyz + unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat9.xyz = (-u_xlat1.xyz) + u_xlat9.xyz;
    u_xlat10.x = unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].x;
    u_xlat10.y = unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].x;
    u_xlat0.x = dot(u_xlat10.xy, u_xlat10.xy);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xz = u_xlat0.xx * u_xlat10.xy;
    u_xlat36 = u_xlat0.z * u_xlat9.z;
    u_xlat36 = u_xlat9.x * u_xlat0.x + (-u_xlat36);
    u_xlat0.x = dot(u_xlat9.zx, u_xlat0.xz);
    u_xlat10.y = hlslcc_mtx4x4unity_MatrixV[0].x;
    u_xlat10.x = hlslcc_mtx4x4unity_MatrixV[2].x;
    u_xlat22 = dot(u_xlat10.xy, u_xlat10.xy);
    u_xlat22 = inversesqrt(u_xlat22);
    u_xlat17.xz = vec2(u_xlat22) * u_xlat10.xy;
    u_xlat0.xz = u_xlat0.xx * u_xlat17.xz;
    u_xlat0.x = u_xlat36 * u_xlat17.z + (-u_xlat0.x);
    u_xlat0.z = u_xlat36 * u_xlat17.x + u_xlat0.z;
    u_xlat0.xz = u_xlat9.xz + u_xlat0.xz;
    u_xlat9.z = (-u_xlat0.z) * _Billboard + u_xlat9.z;
    u_xlat9.x = (-u_xlat0.x) * _Billboard + u_xlat9.x;
    u_xlat8.xyz = u_xlat9.xyz * vec3(0.100000001, 1.0, 0.100000001) + u_xlat8.xyz;
    u_xlat0.x = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat0.x = max(u_xlat0.x, 0.00100000005);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat8.xyz = u_xlat0.xxx * u_xlat8.xyz;
    u_xlat0.x = dot(u_xlat9.xyz, u_xlat9.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat10.xyz = u_xlat9.xyz * vec3(0.100000001, 1.0, 0.100000001);
    u_xlat8.xyz = u_xlat8.xyz * u_xlat0.xxx + (-u_xlat10.xyz);
    u_xlat10.xyz = u_xlat1.xyz + u_xlat9.xyz;
    u_xlat10.w = u_xlat34 * _HeightScale + u_xlat10.y;
    u_xlat1.xyz = u_xlat8.xyz + u_xlat10.xwz;
    u_xlatu0.xz = uvec2(65280u, 255u) & floatBitsToUint(unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1]).ww;
    u_xlat0.xz = vec2(u_xlatu0.xz);
    u_xlat0.x = u_xlat0.x * 0.00390625;
    u_xlatu0.x = uint(u_xlat0.x);
    u_xlat0.x = float(u_xlatu0.x);
    u_xlat8.xz = u_xlat0.xz + vec2(-127.0, -127.0);
    u_xlat0.xz = u_xlat8.xz * vec2(0.00787401572, 0.00787401572);
    u_xlat0.xz = u_xlat0.xz * u_xlat0.xz;
    u_xlat0.x = u_xlat0.z + u_xlat0.x;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(0.0<u_xlat0.x);
#else
    u_xlatb22 = 0.0<u_xlat0.x;
#endif
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat8.y = u_xlatb22 ? u_xlat0.x : float(0.0);
    u_xlat10.xyz = u_xlat8.xyz * u_xlat9.yyy;
    u_xlat10.xyz = vec3(u_xlat24) * u_xlat10.xyz;
    u_xlat0.x = max(u_xlat24, 9.99999972e-10);
    u_xlat1.xyz = u_xlat10.xyz * vec3(0.00393700786, 0.0, 0.00393700786) + u_xlat1.xyz;
    u_xlat4.xz = u_xlat4.yy * (-u_xlat4.yy);
    u_xlat1.xyz = u_xlat4.xyz * u_xlat9.xyz + u_xlat1.xyz;
    u_xlat4.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat9 = u_xlat4.yyyy * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat9 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat4.xxxx + u_xlat9;
    u_xlat4 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat4.zzzz + u_xlat9;
    u_xlat4 = u_xlat4 + hlslcc_mtx4x4unity_MatrixVPZero[3];
    gl_Position = u_xlat4;
    u_xlat3.y = 0.0;
    vs_TEXCOORD0.xyz = u_xlat8.xyz * vec3(0.00787401572, 1.0, 0.00787401572) + u_xlat3.xyz;
    vs_TEXCOORD0.w = 0.0;
    u_xlat3.xyz = u_xlat5.yzx / u_xlat0.xxx;
    u_xlat5.yz = u_xlat6.zx / u_xlat0.xx;
    u_xlat6.xyz = u_xlat7.yzx / u_xlat0.xxx;
    u_xlat5.x = 0.0;
    u_xlat5.xyz = u_xlat5.xyz + u_xlat6.xyz;
    u_xlat3.xyz = u_xlat3.xyz + u_xlat5.xyz;
    u_xlat3.xyz = u_xlat8.yzx * vec3(1.0, 0.00787401572, 0.00787401572) + u_xlat3.xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat5.xyz = u_xlat2.xyw * u_xlat3.xyz;
    u_xlat2.xyz = u_xlat3.zxy * u_xlat2.ywx + (-u_xlat5.xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat5.xyz = u_xlat3.xyz * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat5.xyz);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
    { bool cond = 0.0<u_xlat0.x; u_xlati22 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati22 = int((0.0<u_xlat0.x) ? 0xFFFFFFFFu : uint(0u));
#endif
#ifdef UNITY_ADRENO_ES3
    { bool cond = u_xlat0.x<0.0; u_xlati0 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati0 = int((u_xlat0.x<0.0) ? 0xFFFFFFFFu : uint(0u));
#endif
    u_xlati0 = (-u_xlati22) + u_xlati0;
    u_xlat0.x = float(u_xlati0);
    vs_TEXCOORD1.xyz = u_xlat0.xxx * u_xlat2.xyz;
    vs_TEXCOORD1.w = 0.0;
    u_xlatu1.xyz = uvec3(16711680u, 65280u, 255u) & floatBitsToUint(unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2]).www;
    u_xlat1.xyz = vec3(u_xlatu1.xyz);
    u_xlatu2 = uvec4(4278190080u, 16711680u, 65280u, 255u) & floatBitsToUint(unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3]).wwww;
    u_xlat0.x = max(1.0, unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].w);
    u_xlat0.x = min(u_xlat0.x, 2.0);
    u_xlat0.x = u_xlat0.x + -1.0;
    u_xlat2 = vec4(u_xlatu2);
    u_xlat2 = u_xlat2 * vec4(2.33743719e-10, 5.9838392e-08, 1.53186284e-05, 0.00392156886);
    u_xlat1.xyz = u_xlat1.xyz * vec3(5.9838392e-08, 1.53186284e-05, 0.00392156886) + (-u_xlat2.yzw);
    u_xlat11 = u_xlat33 / _RootColorScale;
    u_xlat11 = u_xlat11 + _RootColorOffset;
#ifdef UNITY_ADRENO_ES3
    u_xlat11 = min(max(u_xlat11, 0.0), 1.0);
#else
    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat11) * u_xlat1.xyz + u_xlat2.yzw;
    vs_TEXCOORD5.z = u_xlat2.x;
    u_xlat2.xyz = (-u_xlat1.xyz) + _BurnedColor.xyz;
    u_xlat1.xyz = u_xlat0.xxx * u_xlat2.xyz + u_xlat1.xyz;
    vs_TEXCOORD2.w = u_xlat0.x;
    u_xlat0.x = u_xlat33 + -0.600000024;
    vs_TEXCOORD3 = u_xlat33;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = _GrassTipLighting * u_xlat0.x + 1.0;
    vs_TEXCOORD2.xyz = u_xlat0.xxx * u_xlat1.xyz;
    vs_TEXCOORD4.xy = in_TEXCOORD2.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
    u_xlat0.x = u_xlat4.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat4.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.w = u_xlat4.w;
    vs_TEXCOORD5.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
float ImmCB_0_0_0[64];
uniform 	vec4 _ScreenParams;
uniform 	float _GrassShininess;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	float _CutOff;
uniform 	vec4 _BurnedColor;
uniform lowp sampler2D _MainTex;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp float vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec3 u_xlat0;
int u_xlati0;
bool u_xlatb0;
lowp vec4 u_xlat10_1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat12;
bool u_xlatb12;
void main()
{
	ImmCB_0_0_0[0] = 1.0;
	ImmCB_0_0_0[1] = 49.0;
	ImmCB_0_0_0[2] = 13.0;
	ImmCB_0_0_0[3] = 61.0;
	ImmCB_0_0_0[4] = 4.0;
	ImmCB_0_0_0[5] = 52.0;
	ImmCB_0_0_0[6] = 16.0;
	ImmCB_0_0_0[7] = 64.0;
	ImmCB_0_0_0[8] = 33.0;
	ImmCB_0_0_0[9] = 17.0;
	ImmCB_0_0_0[10] = 45.0;
	ImmCB_0_0_0[11] = 29.0;
	ImmCB_0_0_0[12] = 36.0;
	ImmCB_0_0_0[13] = 20.0;
	ImmCB_0_0_0[14] = 48.0;
	ImmCB_0_0_0[15] = 32.0;
	ImmCB_0_0_0[16] = 9.0;
	ImmCB_0_0_0[17] = 57.0;
	ImmCB_0_0_0[18] = 5.0;
	ImmCB_0_0_0[19] = 53.0;
	ImmCB_0_0_0[20] = 12.0;
	ImmCB_0_0_0[21] = 60.0;
	ImmCB_0_0_0[22] = 8.0;
	ImmCB_0_0_0[23] = 56.0;
	ImmCB_0_0_0[24] = 41.0;
	ImmCB_0_0_0[25] = 25.0;
	ImmCB_0_0_0[26] = 37.0;
	ImmCB_0_0_0[27] = 21.0;
	ImmCB_0_0_0[28] = 44.0;
	ImmCB_0_0_0[29] = 28.0;
	ImmCB_0_0_0[30] = 40.0;
	ImmCB_0_0_0[31] = 24.0;
	ImmCB_0_0_0[32] = 3.0;
	ImmCB_0_0_0[33] = 51.0;
	ImmCB_0_0_0[34] = 15.0;
	ImmCB_0_0_0[35] = 63.0;
	ImmCB_0_0_0[36] = 2.0;
	ImmCB_0_0_0[37] = 50.0;
	ImmCB_0_0_0[38] = 14.0;
	ImmCB_0_0_0[39] = 62.0;
	ImmCB_0_0_0[40] = 35.0;
	ImmCB_0_0_0[41] = 19.0;
	ImmCB_0_0_0[42] = 47.0;
	ImmCB_0_0_0[43] = 31.0;
	ImmCB_0_0_0[44] = 34.0;
	ImmCB_0_0_0[45] = 18.0;
	ImmCB_0_0_0[46] = 46.0;
	ImmCB_0_0_0[47] = 30.0;
	ImmCB_0_0_0[48] = 11.0;
	ImmCB_0_0_0[49] = 59.0;
	ImmCB_0_0_0[50] = 7.0;
	ImmCB_0_0_0[51] = 55.0;
	ImmCB_0_0_0[52] = 10.0;
	ImmCB_0_0_0[53] = 58.0;
	ImmCB_0_0_0[54] = 6.0;
	ImmCB_0_0_0[55] = 54.0;
	ImmCB_0_0_0[56] = 43.0;
	ImmCB_0_0_0[57] = 27.0;
	ImmCB_0_0_0[58] = 39.0;
	ImmCB_0_0_0[59] = 23.0;
	ImmCB_0_0_0[60] = 42.0;
	ImmCB_0_0_0[61] = 26.0;
	ImmCB_0_0_0[62] = 38.0;
	ImmCB_0_0_0[63] = 22.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vs_TEXCOORD5.z<0.949999988);
#else
    u_xlatb0 = vs_TEXCOORD5.z<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD5.yx / vs_TEXCOORD5.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
        u_xlat0.xy = u_xlat0.xy * vec2(0.125, 0.125);
        u_xlat0.xy = fract(u_xlat0.xy);
        u_xlat0.xy = u_xlat0.xy * vec2(7.99900007, 7.99900007);
        u_xlat0.xy = trunc(u_xlat0.xy);
        u_xlat0.x = u_xlat0.x * 8.0 + u_xlat0.y;
        u_xlati0 = int(u_xlat0.x);
        u_xlat0.x = (-ImmCB_0_0_0[u_xlati0]) * 0.015625 + vs_TEXCOORD5.z;
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat0.x = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD0.xyz;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD4.xy);
    u_xlat2.xyz = _BurnedColor.xyz * u_xlat10_1.xyz + (-u_xlat10_1.xyz);
    u_xlat2.xyz = vs_TEXCOORD2.www * u_xlat2.xyz + u_xlat10_1.xyz;
    u_xlat12 = u_xlat10_1.w + (-_CutOff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat12<0.0);
#else
    u_xlatb12 = u_xlat12<0.0;
#endif
    if((int(u_xlatb12) * int(0xffffffffu))!=0){discard;}
    u_xlat12 = (-vs_TEXCOORD2.w) + 1.0;
    u_xlat12 = u_xlat12 * _GrassShininess;
    SV_Target0.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_3 = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb0) ? u_xlat16_3 : 0.0399999991;
    SV_Target0.w = 0.0;
    u_xlat2.w = vs_TEXCOORD3;
    SV_Target1 = u_xlat2;
    SV_Target2.xy = vec2(0.0399999991, 0.0399999991);
    SV_Target2.w = u_xlat12;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_HDR_ON" "MHY_SHADER_HIGH" "SOFT_SAMPLE_HEIGHT_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	float _NoiseScale;
uniform 	vec4 _WorldOffsetRange;
uniform 	float _HeightScale;
uniform 	float _Billboard;
uniform 	float _VegetationMoveScale;
uniform 	float _VegetationStiffness;
uniform 	vec4 _LocalWindsMapSize;
uniform 	vec4 _LargeWindParam;
uniform 	vec4 _SmallWindParam;
uniform 	vec4 _GlobalWind;
uniform 	vec4 _LocalWindsMapCameraInfo;
uniform 	float _GrassTipLighting;
uniform 	vec4 _MainTex_ST;
uniform 	float _RootColorScale;
uniform 	float _RootColorOffset;
uniform highp sampler2D _Heightmap;
uniform lowp sampler2D _Noisemap;
uniform lowp sampler2D _LocalWindsMap;
in highp vec4 in_POSITION0;
in highp vec4 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec2 in_TEXCOORD2;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp float vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec3 u_xlat1;
int u_xlati1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
vec4 u_xlat4;
vec3 u_xlat5;
vec4 u_xlat6;
vec4 u_xlat7;
vec4 u_xlat8;
vec3 u_xlat9;
vec3 u_xlat10;
bool u_xlatb10;
vec2 u_xlat12;
vec3 u_xlat16;
vec2 u_xlat20;
vec2 u_xlat22;
float u_xlat30;
int u_xlati30;
float u_xlat31;
float u_xlat32;
float u_xlat33;
float u_xlat34;
void main()
{
    u_xlat0.z = 0.0;
    u_xlat1.xyz = in_TEXCOORD0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[2].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TEXCOORD0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat10.xz = u_xlat1.xz + (-_LocalWindsMapSize.xy);
    u_xlat10.xz = vec2(u_xlat10.x / _LocalWindsMapSize.z, u_xlat10.z / _LocalWindsMapSize.w);
    u_xlat10.xz = u_xlat10.xz + vec2(0.5, 0.5);
    u_xlat2 = textureLod(_LocalWindsMap, u_xlat10.xz, 0.0);
    u_xlat10.x = dot(u_xlat2.xy, u_xlat2.xy);
    u_xlat10.x = sqrt(u_xlat10.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(9.99999975e-05>=u_xlat10.x);
#else
    u_xlatb10 = 9.99999975e-05>=u_xlat10.x;
#endif
    u_xlat10.x = u_xlatb10 ? 1.0 : float(0.0);
    u_xlat3.xy = (-u_xlat2.xy) + vec2(0.5, 0.5);
    u_xlat10.xz = u_xlat10.xx * u_xlat3.xy + u_xlat2.xy;
    u_xlat10.xz = u_xlat10.xz * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat31 = dot(u_xlat10.xz, u_xlat10.xz);
    u_xlat31 = max(u_xlat31, 0.00100000005);
    u_xlat3.x = inversesqrt(u_xlat31);
    u_xlat3.yz = u_xlat10.xz * u_xlat3.xx;
    u_xlat0.x = u_xlat3.z;
    u_xlat0.xz = (-u_xlat3.xy) * vec2(0.0, 1.0) + u_xlat0.xz;
    u_xlat31 = (-in_TEXCOORD1.x) + hlslcc_mtx4x4unity_ObjectToWorld[1].x;
    u_xlat2.x = u_xlat31 * 3.0;
    u_xlat2.x = _Time.y * 3.0 + u_xlat2.x;
    u_xlat2.x = u_xlat2.x + 0.5;
    u_xlat2.x = fract(u_xlat2.x);
    u_xlat2.x = u_xlat2.x * 2.0 + -1.0;
    u_xlat12.x = abs(u_xlat2.x) * abs(u_xlat2.x);
    u_xlat2.x = -abs(u_xlat2.x) * 2.0 + 3.0;
    u_xlat2.x = u_xlat2.x * u_xlat12.x;
    u_xlat12.x = u_xlat2.z * 1.5;
    u_xlat2.x = u_xlat12.x * u_xlat2.x;
    u_xlat0.xz = u_xlat0.xz * u_xlat2.xx;
    u_xlat0.xz = u_xlat0.xz * vec2(0.150000006, 0.150000006);
    u_xlat0.xz = u_xlat3.yz * u_xlat2.xx + u_xlat0.xz;
    u_xlat0.xz = u_xlat0.xz + u_xlat10.xz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(0.00199999986<u_xlat2.z);
#else
    u_xlatb2 = 0.00199999986<u_xlat2.z;
#endif
    u_xlat12.x = (-u_xlat2.w) * _LocalWindsMapCameraInfo.y + _LocalWindsMapCameraInfo.x;
    u_xlat0.xy = (bool(u_xlatb2)) ? u_xlat0.xz : u_xlat10.xz;
    u_xlat20.xy = vec2(_WorldOffsetRange.z + float(2.0), _WorldOffsetRange.w + float(2.0));
    u_xlat2.xz = u_xlat1.xz + (-_WorldOffsetRange.xy);
    u_xlat2.xz = u_xlat2.xz + vec2(1.0, 1.0);
    u_xlat20.xy = u_xlat2.xz / u_xlat20.xy;
    u_xlat20.xy = u_xlat20.xy * _WorldOffsetRange.zw + vec2(-0.5, -0.5);
    u_xlat2.xz = floor(u_xlat20.xy);
    u_xlat20.xy = u_xlat20.xy + (-u_xlat2.xz);
    u_xlat3 = u_xlat2.xzxz + vec4(0.5, 1.5, 1.5, 1.5);
    u_xlat4 = u_xlat2.xzxz + vec4(1.5, 0.5, 0.5, 0.5);
    u_xlat4 = vec4(u_xlat4.x / _WorldOffsetRange.z, u_xlat4.y / _WorldOffsetRange.w, u_xlat4.z / _WorldOffsetRange.z, u_xlat4.w / _WorldOffsetRange.w);
    u_xlat3 = vec4(u_xlat3.x / _WorldOffsetRange.z, u_xlat3.y / _WorldOffsetRange.w, u_xlat3.z / _WorldOffsetRange.z, u_xlat3.w / _WorldOffsetRange.w);
    u_xlat2.x = textureLod(_Heightmap, u_xlat3.zw, 0.0).x;
    u_xlat22.x = textureLod(_Heightmap, u_xlat3.xy, 0.0).x;
    u_xlat2.x = (-u_xlat22.x) + u_xlat2.x;
    u_xlat2.x = u_xlat20.x * u_xlat2.x + u_xlat22.x;
    u_xlat22.x = textureLod(_Heightmap, u_xlat4.xy, 0.0).x;
    u_xlat32 = textureLod(_Heightmap, u_xlat4.zw, 0.0).x;
    u_xlat22.x = (-u_xlat32) + u_xlat22.x;
    u_xlat20.x = u_xlat20.x * u_xlat22.x + u_xlat32;
    u_xlat2.x = (-u_xlat20.x) + u_xlat2.x;
    u_xlat20.x = u_xlat20.y * u_xlat2.x + u_xlat20.x;
    u_xlat30 = u_xlat20.x * _HeightScale + u_xlat1.y;
    u_xlat30 = (-u_xlat30) + u_xlat12.x;
    u_xlat30 = u_xlat30 * 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
#else
    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
#endif
    u_xlat30 = (-u_xlat30) + 1.0;
    u_xlat2.x = fract(u_xlat31);
    u_xlat31 = u_xlat31 + hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat12.xy = vec2(u_xlat31) * vec2(22.0, 33.0);
    u_xlat12.xy = fract(u_xlat12.xy);
    u_xlat12.xy = u_xlat12.xy + vec2(-0.5, -0.5);
    u_xlat3.xz = u_xlat12.xy * vec2(0.200000003, 0.200000003);
    u_xlat31 = u_xlat2.x + -0.5;
    u_xlat2.x = u_xlat2.x * _SmallWindParam.x;
    u_xlat2.x = sin(u_xlat2.x);
    u_xlat12.x = u_xlat31 * 0.333000004;
    u_xlat4.y = u_xlat31 * 0.333000004 + -1.0;
    u_xlat31 = in_TEXCOORD1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat31 = min(max(u_xlat31, 0.0), 1.0);
#else
    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat12.x * u_xlat31;
    u_xlat30 = u_xlat30 * u_xlat12.x;
    u_xlat0.xy = vec2(u_xlat30) * u_xlat0.xy;
    u_xlat5.xz = u_xlat0.xy * vec2(vec2(_VegetationMoveScale, _VegetationMoveScale));
    u_xlat0.x = dot(_GlobalWind.xyz, _GlobalWind.xyz);
    u_xlat0.x = max(u_xlat0.x, 0.00100000005);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat6 = u_xlat0.xxxx * _GlobalWind.xzxz;
    u_xlat0.xy = vec2(u_xlat6.z * _LargeWindParam.z, u_xlat6.w * _LargeWindParam.z);
    u_xlat22.xy = u_xlat1.xz / vec2(_NoiseScale);
    u_xlat22.xy = _LargeWindParam.xx * u_xlat6.xy + u_xlat22.xy;
    u_xlat22.xy = textureLod(_Noisemap, u_xlat22.xy, 0.0).xy;
    u_xlat22.xy = u_xlat22.xy + vec2(-0.5, -0.5);
    u_xlat22.xy = u_xlat22.xy * _LargeWindParam.yy + vec2(0.5, 0.5);
    u_xlat22.xy = u_xlat12.xx * u_xlat22.xy;
    u_xlat6.xz = u_xlat0.xy * u_xlat22.xy;
    u_xlat6.y = 0.0;
    u_xlat0.x = _VegetationStiffness * _SmallWindParam.y;
    u_xlat0.x = u_xlat12.x * u_xlat0.x;
    u_xlat7.x = u_xlat0.x * u_xlat2.x;
    u_xlat0.xyw = in_NORMAL0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyw = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_NORMAL0.xxx + u_xlat0.xyw;
    u_xlat0.xyw = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_NORMAL0.zzz + u_xlat0.xyw;
    u_xlat2.x = dot(u_xlat0.xyw, u_xlat0.xyw);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat0.xyw = u_xlat0.xyw * u_xlat2.xxx;
    u_xlat7.y = float(1.0);
    u_xlat7.z = float(0.349999994);
    u_xlat2.xzw = u_xlat0.xyw * u_xlat7.yxy;
    u_xlat8.xyz = u_xlat2.xzw * u_xlat7.xzx + u_xlat6.xyz;
    u_xlat2.xzw = u_xlat7.xzx * u_xlat2.xzw;
    u_xlat5.y = 0.0;
    u_xlat7.xyz = u_xlat5.xyz + u_xlat8.xyz;
    u_xlat8.y = hlslcc_mtx4x4unity_MatrixV[0].x;
    u_xlat8.x = hlslcc_mtx4x4unity_MatrixV[2].x;
    u_xlat33 = dot(u_xlat8.xy, u_xlat8.xy);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat16.xz = vec2(u_xlat33) * u_xlat8.xy;
    u_xlat8.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;
    u_xlat8.y = hlslcc_mtx4x4unity_ObjectToWorld[2].x;
    u_xlat33 = dot(u_xlat8.xy, u_xlat8.xy);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat8.xy = vec2(u_xlat33) * u_xlat8.xy;
    u_xlat9.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat9.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat9.xyz;
    u_xlat9.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat9.xyz;
    u_xlat9.xyz = u_xlat9.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat9.xyz = (-u_xlat1.xyz) + u_xlat9.xyz;
    u_xlat33 = u_xlat8.y * u_xlat9.z;
    u_xlat33 = u_xlat9.x * u_xlat8.x + (-u_xlat33);
    u_xlat34 = dot(u_xlat9.zx, u_xlat8.xy);
    u_xlat8.xy = u_xlat16.xz * vec2(u_xlat34);
    u_xlat34 = u_xlat33 * u_xlat16.z + (-u_xlat8.x);
    u_xlat33 = u_xlat33 * u_xlat16.x + u_xlat8.y;
    u_xlat33 = u_xlat9.z + u_xlat33;
    u_xlat9.z = (-u_xlat33) * _Billboard + u_xlat9.z;
    u_xlat33 = u_xlat9.x + u_xlat34;
    u_xlat9.x = (-u_xlat33) * _Billboard + u_xlat9.x;
    u_xlat33 = u_xlat12.x * u_xlat9.y;
    u_xlat12.x = max(u_xlat12.x, 9.99999972e-10);
    u_xlat7.xyz = u_xlat9.xyz * vec3(0.100000001, 1.0, 0.100000001) + u_xlat7.xyz;
    u_xlat34 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat34 = max(u_xlat34, 0.00100000005);
    u_xlat34 = inversesqrt(u_xlat34);
    u_xlat7.xyz = vec3(u_xlat34) * u_xlat7.xyz;
    u_xlat34 = dot(u_xlat9.xyz, u_xlat9.xyz);
    u_xlat34 = sqrt(u_xlat34);
    u_xlat8.xyz = u_xlat9.xyz * vec3(0.100000001, 1.0, 0.100000001);
    u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat34) + (-u_xlat8.xyz);
    u_xlat8.xyz = u_xlat1.xyz + u_xlat9.xyz;
    u_xlat8.w = u_xlat20.x * _HeightScale + u_xlat8.y;
    u_xlat1.xyz = u_xlat7.xyz + u_xlat8.xwz;
    u_xlat1.xyz = vec3(u_xlat33) * vec3(-0.5, 0.0, -0.5) + u_xlat1.xyz;
    u_xlat4.xz = u_xlat4.yy * (-u_xlat4.yy);
    u_xlat1.xyz = u_xlat4.xyz * u_xlat9.xyz + u_xlat1.xyz;
    u_xlat4.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat7 = u_xlat4.yyyy * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat7 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat4.xxxx + u_xlat7;
    u_xlat4 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat4.zzzz + u_xlat7;
    gl_Position = u_xlat4 + hlslcc_mtx4x4unity_MatrixVPZero[3];
    u_xlat3.y = 0.0;
    vs_TEXCOORD0.xyz = u_xlat3.xyz + vec3(-1.0, 0.0, -1.0);
    vs_TEXCOORD0.w = 0.0;
    u_xlat3.xyz = u_xlat5.yzx / u_xlat12.xxx;
    u_xlat4.yz = u_xlat6.zx / u_xlat12.xx;
    u_xlat2.xyz = u_xlat2.zwx / u_xlat12.xxx;
    u_xlat4.x = 0.0;
    u_xlat2.xyz = u_xlat2.xyz + u_xlat4.xyz;
    u_xlat2.xyz = u_xlat3.xyz + u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz + vec3(0.0, -1.0, -1.0);
    u_xlat20.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat20.x = inversesqrt(u_xlat20.x);
    u_xlat2.xyz = u_xlat20.xxx * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat0.xyw * u_xlat2.xyz;
    u_xlat0.xyz = u_xlat2.zxy * u_xlat0.ywx + (-u_xlat3.xyz);
    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.xyz * u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
    u_xlat30 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat1.xyz = vec3(u_xlat30) * u_xlat1.xyz;
    u_xlat30 = dot(u_xlat1.xyz, u_xlat0.xyz);
#ifdef UNITY_ADRENO_ES3
    { bool cond = 0.0<u_xlat30; u_xlati1 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati1 = int((0.0<u_xlat30) ? 0xFFFFFFFFu : uint(0u));
#endif
#ifdef UNITY_ADRENO_ES3
    { bool cond = u_xlat30<0.0; u_xlati30 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati30 = int((u_xlat30<0.0) ? 0xFFFFFFFFu : uint(0u));
#endif
    u_xlati30 = (-u_xlati1) + u_xlati30;
    u_xlat30 = float(u_xlati30);
    vs_TEXCOORD1.xyz = vec3(u_xlat30) * u_xlat0.xyz;
    vs_TEXCOORD1.w = 0.0;
    u_xlat0.x = u_xlat31 / _RootColorScale;
    u_xlat0.x = u_xlat0.x + _RootColorOffset;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xxx * vec3(-0.501960814, 0.0, 0.0) + vec3(0.501960814, 0.0, 0.0);
    u_xlat30 = u_xlat31 + -0.600000024;
    vs_TEXCOORD3 = u_xlat31;
    u_xlat30 = max(u_xlat30, 0.0);
    u_xlat30 = _GrassTipLighting * u_xlat30 + 1.0;
    vs_TEXCOORD2.xyz = vec3(u_xlat30) * u_xlat0.xyz;
    vs_TEXCOORD2.w = 0.0;
    vs_TEXCOORD4.xy = in_TEXCOORD2.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	float _GrassShininess;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	float _CutOff;
uniform 	vec4 _BurnedColor;
uniform lowp sampler2D _MainTex;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp float vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec4 u_xlat0;
lowp vec4 u_xlat10_0;
bool u_xlatb0;
vec3 u_xlat1;
mediump float u_xlat16_2;
float u_xlat9;
bool u_xlatb9;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD4.xy);
    u_xlat9 = u_xlat10_0.w + (-_CutOff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(u_xlat9<0.0);
#else
    u_xlatb9 = u_xlat9<0.0;
#endif
    if((int(u_xlatb9) * int(0xffffffffu))!=0){discard;}
    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
    SV_Target0.xyz = u_xlat1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0;
    u_xlat1.xyz = _BurnedColor.xyz * u_xlat10_0.xyz + (-u_xlat10_0.xyz);
    u_xlat0.xyz = vs_TEXCOORD2.www * u_xlat1.xyz + u_xlat10_0.xyz;
    u_xlat0.w = vs_TEXCOORD3;
    SV_Target1 = u_xlat0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_2 = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb0) ? u_xlat16_2 : 0.0399999991;
    u_xlat0.x = (-vs_TEXCOORD2.w) + 1.0;
    u_xlat0.x = u_xlat0.x * _GrassShininess;
    SV_Target2.w = u_xlat0.x;
    SV_Target2.xy = vec2(0.0399999991, 0.0399999991);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_HDR_ON" "INSTANCING_ON" "MHY_SHADER_HIGH" "SOFT_SAMPLE_HEIGHT_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	int unity_BaseInstanceID;
uniform 	float _NoiseScale;
uniform 	vec4 _WorldOffsetRange;
uniform 	float _HeightScale;
uniform 	float _Billboard;
uniform 	float _VegetationMoveScale;
uniform 	float _VegetationStiffness;
uniform 	vec4 _LocalWindsMapSize;
uniform 	vec4 _LargeWindParam;
uniform 	vec4 _SmallWindParam;
uniform 	vec4 _GlobalWind;
uniform 	vec4 _LocalWindsMapCameraInfo;
uniform 	float _GrassTipLighting;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BurnedColor;
uniform 	float _RootColorScale;
uniform 	float _RootColorOffset;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _Heightmap;
uniform lowp sampler2D _Noisemap;
uniform lowp sampler2D _LocalWindsMap;
in highp vec4 in_POSITION0;
in highp vec4 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec2 in_TEXCOORD2;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp float vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec3 u_xlat0;
int u_xlati0;
uvec3 u_xlatu0;
vec3 u_xlat1;
uvec3 u_xlatu1;
vec4 u_xlat2;
uvec3 u_xlatu2;
vec4 u_xlat3;
vec4 u_xlat4;
vec3 u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
vec3 u_xlat8;
vec4 u_xlat9;
vec4 u_xlat10;
float u_xlat11;
int u_xlati11;
float u_xlat13;
uint u_xlatu13;
vec3 u_xlat17;
vec3 u_xlat18;
float u_xlat22;
int u_xlati22;
bool u_xlatb22;
float u_xlat24;
float u_xlat33;
bool u_xlatb33;
float u_xlat34;
bool u_xlatb34;
float u_xlat35;
float u_xlat36;
void main()
{
    u_xlat0.z = 0.0;
    u_xlati11 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati11 = u_xlati11 << 2;
    u_xlat1.xyz = in_TEXCOORD0.yyy * unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_TEXCOORD0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat2.xy = u_xlat1.xz + (-_LocalWindsMapSize.xy);
    u_xlat2.xy = vec2(u_xlat2.x / _LocalWindsMapSize.z, u_xlat2.y / _LocalWindsMapSize.w);
    u_xlat2.xy = u_xlat2.xy + vec2(0.5, 0.5);
    u_xlat2 = textureLod(_LocalWindsMap, u_xlat2.xy, 0.0);
    u_xlat33 = dot(u_xlat2.xy, u_xlat2.xy);
    u_xlat33 = sqrt(u_xlat33);
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(9.99999975e-05>=u_xlat33);
#else
    u_xlatb33 = 9.99999975e-05>=u_xlat33;
#endif
    u_xlat33 = u_xlatb33 ? 1.0 : float(0.0);
    u_xlat3.xy = (-u_xlat2.xy) + vec2(0.5, 0.5);
    u_xlat2.xy = vec2(u_xlat33) * u_xlat3.xy + u_xlat2.xy;
    u_xlat2.xy = u_xlat2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat33 = dot(u_xlat2.xy, u_xlat2.xy);
    u_xlat33 = max(u_xlat33, 0.00100000005);
    u_xlat3.x = inversesqrt(u_xlat33);
    u_xlat3.yz = u_xlat2.xy * u_xlat3.xx;
    u_xlat0.x = u_xlat3.z;
    u_xlat0.xz = (-u_xlat3.xy) * vec2(0.0, 1.0) + u_xlat0.xz;
    u_xlat33 = (-in_TEXCOORD1.x) + unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].x;
    u_xlat34 = u_xlat33 * 3.0;
    u_xlat34 = _Time.y * 3.0 + u_xlat34;
    u_xlat34 = u_xlat34 + 0.5;
    u_xlat34 = fract(u_xlat34);
    u_xlat34 = u_xlat34 * 2.0 + -1.0;
    u_xlat3.x = abs(u_xlat34) * abs(u_xlat34);
    u_xlat34 = -abs(u_xlat34) * 2.0 + 3.0;
    u_xlat34 = u_xlat34 * u_xlat3.x;
    u_xlat3.x = u_xlat2.z * 1.5;
    u_xlat34 = u_xlat34 * u_xlat3.x;
    u_xlat0.xz = u_xlat0.xz * vec2(u_xlat34);
    u_xlat0.xz = u_xlat0.xz * vec2(0.150000006, 0.150000006);
    u_xlat0.xz = u_xlat3.yz * vec2(u_xlat34) + u_xlat0.xz;
    u_xlat0.xz = u_xlat0.xz + u_xlat2.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlatb34 = !!(0.00199999986<u_xlat2.z);
#else
    u_xlatb34 = 0.00199999986<u_xlat2.z;
#endif
    u_xlat24 = (-u_xlat2.w) * _LocalWindsMapCameraInfo.y + _LocalWindsMapCameraInfo.x;
    u_xlat0.xz = (bool(u_xlatb34)) ? u_xlat0.xz : u_xlat2.xy;
    u_xlat2.xy = vec2(_WorldOffsetRange.z + float(2.0), _WorldOffsetRange.w + float(2.0));
    u_xlat3.xy = u_xlat1.xz + (-_WorldOffsetRange.xy);
    u_xlat3.xy = u_xlat3.xy + vec2(1.0, 1.0);
    u_xlat2.xy = u_xlat3.xy / u_xlat2.xy;
    u_xlat2.xy = u_xlat2.xy * _WorldOffsetRange.zw + vec2(-0.5, -0.5);
    u_xlat3.xy = floor(u_xlat2.xy);
    u_xlat2.xy = u_xlat2.xy + (-u_xlat3.xy);
    u_xlat4 = u_xlat3.xyxy + vec4(0.5, 1.5, 1.5, 1.5);
    u_xlat3 = u_xlat3.xyxy + vec4(1.5, 0.5, 0.5, 0.5);
    u_xlat3 = vec4(u_xlat3.x / _WorldOffsetRange.z, u_xlat3.y / _WorldOffsetRange.w, u_xlat3.z / _WorldOffsetRange.z, u_xlat3.w / _WorldOffsetRange.w);
    u_xlat4 = vec4(u_xlat4.x / _WorldOffsetRange.z, u_xlat4.y / _WorldOffsetRange.w, u_xlat4.z / _WorldOffsetRange.z, u_xlat4.w / _WorldOffsetRange.w);
    u_xlat34 = textureLod(_Heightmap, u_xlat4.zw, 0.0).x;
    u_xlat35 = textureLod(_Heightmap, u_xlat4.xy, 0.0).x;
    u_xlat34 = u_xlat34 + (-u_xlat35);
    u_xlat34 = u_xlat2.x * u_xlat34 + u_xlat35;
    u_xlat35 = textureLod(_Heightmap, u_xlat3.xy, 0.0).x;
    u_xlat3.x = textureLod(_Heightmap, u_xlat3.zw, 0.0).x;
    u_xlat35 = u_xlat35 + (-u_xlat3.x);
    u_xlat2.x = u_xlat2.x * u_xlat35 + u_xlat3.x;
    u_xlat34 = u_xlat34 + (-u_xlat2.x);
    u_xlat34 = u_xlat2.y * u_xlat34 + u_xlat2.x;
    u_xlat2.x = u_xlat34 * _HeightScale + u_xlat1.y;
    u_xlat2.x = (-u_xlat2.x) + u_xlat24;
    u_xlat2.x = u_xlat2.x * 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat2.x = (-u_xlat2.x) + 1.0;
    u_xlat13 = float(floatBitsToUint(unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2]).w);
    u_xlat13 = u_xlat13 * 5.96046448e-08;
    u_xlatu13 = uint(u_xlat13);
    u_xlatu13 = u_xlatu13 & 3u;
    u_xlat13 = float(u_xlatu13);
    u_xlat24 = fract(u_xlat33);
    u_xlat33 = u_xlat33 + unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].y;
    u_xlat3.xy = vec2(u_xlat33) * vec2(22.0, 33.0);
    u_xlat3.xy = fract(u_xlat3.xy);
    u_xlat3.xy = u_xlat3.xy + vec2(-0.5, -0.5);
    u_xlat3.xz = u_xlat3.xy * vec2(0.200000003, 0.200000003);
    u_xlat33 = u_xlat13 + u_xlat24;
    u_xlat13 = u_xlat24 * _SmallWindParam.x;
    u_xlat13 = sin(u_xlat13);
    u_xlat33 = u_xlat33 + -0.5;
    u_xlat24 = u_xlat33 * 0.333000004;
    u_xlat4.y = u_xlat33 * 0.333000004 + -1.0;
    u_xlat33 = in_TEXCOORD1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat33 = min(max(u_xlat33, 0.0), 1.0);
#else
    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
#endif
    u_xlat24 = u_xlat24 * u_xlat33;
    u_xlat2.x = u_xlat24 * u_xlat2.x;
    u_xlat0.xz = u_xlat0.xz * u_xlat2.xx;
    u_xlat5.xz = u_xlat0.xz * vec2(vec2(_VegetationMoveScale, _VegetationMoveScale));
    u_xlat6.y = 0.0;
    u_xlat0.x = _VegetationStiffness * _SmallWindParam.y;
    u_xlat0.x = u_xlat24 * u_xlat0.x;
    u_xlat7.x = u_xlat0.x * u_xlat13;
    u_xlat2.xyw = in_NORMAL0.yyy * unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat2.xyw = unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_NORMAL0.xxx + u_xlat2.xyw;
    u_xlat2.xyw = unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_NORMAL0.zzz + u_xlat2.xyw;
    u_xlat0.x = dot(u_xlat2.xyw, u_xlat2.xyw);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat2.xyw = u_xlat0.xxx * u_xlat2.xyw;
    u_xlat7.y = float(1.0);
    u_xlat7.z = float(0.349999994);
    u_xlat8.xyz = u_xlat2.xyw * u_xlat7.yxy;
    u_xlat0.x = dot(_GlobalWind.xyz, _GlobalWind.xyz);
    u_xlat0.x = max(u_xlat0.x, 0.00100000005);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat9 = u_xlat0.xxxx * _GlobalWind.xzxz;
    u_xlat0.xz = vec2(u_xlat9.z * _LargeWindParam.z, u_xlat9.w * _LargeWindParam.z);
    u_xlat18.xz = u_xlat1.xz / vec2(_NoiseScale);
    u_xlat18.xz = _LargeWindParam.xx * u_xlat9.xy + u_xlat18.xz;
    u_xlat18.xz = textureLod(_Noisemap, u_xlat18.xz, 0.0).xy;
    u_xlat18.xz = u_xlat18.xz + vec2(-0.5, -0.5);
    u_xlat18.xz = u_xlat18.xz * _LargeWindParam.yy + vec2(0.5, 0.5);
    u_xlat18.xz = vec2(u_xlat24) * u_xlat18.xz;
    u_xlat6.xz = u_xlat0.xz * u_xlat18.xz;
    u_xlat9.xyz = u_xlat8.xyz * u_xlat7.xzx + u_xlat6.xyz;
    u_xlat7.xyz = u_xlat7.xzx * u_xlat8.xyz;
    u_xlat5.y = 0.0;
    u_xlat8.xyz = u_xlat5.xyz + u_xlat9.xyz;
    u_xlat9.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat9.xyz = unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat9.xyz;
    u_xlat9.xyz = unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat9.xyz;
    u_xlat9.xyz = u_xlat9.xyz + unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat9.xyz = (-u_xlat1.xyz) + u_xlat9.xyz;
    u_xlat10.x = unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].x;
    u_xlat10.y = unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].x;
    u_xlat0.x = dot(u_xlat10.xy, u_xlat10.xy);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xz = u_xlat0.xx * u_xlat10.xy;
    u_xlat36 = u_xlat0.z * u_xlat9.z;
    u_xlat36 = u_xlat9.x * u_xlat0.x + (-u_xlat36);
    u_xlat0.x = dot(u_xlat9.zx, u_xlat0.xz);
    u_xlat10.y = hlslcc_mtx4x4unity_MatrixV[0].x;
    u_xlat10.x = hlslcc_mtx4x4unity_MatrixV[2].x;
    u_xlat22 = dot(u_xlat10.xy, u_xlat10.xy);
    u_xlat22 = inversesqrt(u_xlat22);
    u_xlat17.xz = vec2(u_xlat22) * u_xlat10.xy;
    u_xlat0.xz = u_xlat0.xx * u_xlat17.xz;
    u_xlat0.x = u_xlat36 * u_xlat17.z + (-u_xlat0.x);
    u_xlat0.z = u_xlat36 * u_xlat17.x + u_xlat0.z;
    u_xlat0.xz = u_xlat9.xz + u_xlat0.xz;
    u_xlat9.z = (-u_xlat0.z) * _Billboard + u_xlat9.z;
    u_xlat9.x = (-u_xlat0.x) * _Billboard + u_xlat9.x;
    u_xlat8.xyz = u_xlat9.xyz * vec3(0.100000001, 1.0, 0.100000001) + u_xlat8.xyz;
    u_xlat0.x = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat0.x = max(u_xlat0.x, 0.00100000005);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat8.xyz = u_xlat0.xxx * u_xlat8.xyz;
    u_xlat0.x = dot(u_xlat9.xyz, u_xlat9.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat10.xyz = u_xlat9.xyz * vec3(0.100000001, 1.0, 0.100000001);
    u_xlat8.xyz = u_xlat8.xyz * u_xlat0.xxx + (-u_xlat10.xyz);
    u_xlat10.xyz = u_xlat1.xyz + u_xlat9.xyz;
    u_xlat10.w = u_xlat34 * _HeightScale + u_xlat10.y;
    u_xlat1.xyz = u_xlat8.xyz + u_xlat10.xwz;
    u_xlatu0.xz = uvec2(65280u, 255u) & floatBitsToUint(unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1]).ww;
    u_xlat0.xz = vec2(u_xlatu0.xz);
    u_xlat0.x = u_xlat0.x * 0.00390625;
    u_xlatu0.x = uint(u_xlat0.x);
    u_xlat0.x = float(u_xlatu0.x);
    u_xlat8.xz = u_xlat0.xz + vec2(-127.0, -127.0);
    u_xlat0.xz = u_xlat8.xz * vec2(0.00787401572, 0.00787401572);
    u_xlat0.xz = u_xlat0.xz * u_xlat0.xz;
    u_xlat0.x = u_xlat0.z + u_xlat0.x;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(0.0<u_xlat0.x);
#else
    u_xlatb22 = 0.0<u_xlat0.x;
#endif
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat8.y = u_xlatb22 ? u_xlat0.x : float(0.0);
    u_xlat10.xyz = u_xlat8.xyz * u_xlat9.yyy;
    u_xlat10.xyz = vec3(u_xlat24) * u_xlat10.xyz;
    u_xlat0.x = max(u_xlat24, 9.99999972e-10);
    u_xlat1.xyz = u_xlat10.xyz * vec3(0.00393700786, 0.0, 0.00393700786) + u_xlat1.xyz;
    u_xlat4.xz = u_xlat4.yy * (-u_xlat4.yy);
    u_xlat1.xyz = u_xlat4.xyz * u_xlat9.xyz + u_xlat1.xyz;
    u_xlat4.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat9 = u_xlat4.yyyy * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat9 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat4.xxxx + u_xlat9;
    u_xlat4 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat4.zzzz + u_xlat9;
    gl_Position = u_xlat4 + hlslcc_mtx4x4unity_MatrixVPZero[3];
    u_xlat3.y = 0.0;
    vs_TEXCOORD0.xyz = u_xlat8.xyz * vec3(0.00787401572, 1.0, 0.00787401572) + u_xlat3.xyz;
    vs_TEXCOORD0.w = 0.0;
    u_xlat3.xyz = u_xlat5.yzx / u_xlat0.xxx;
    u_xlat4.yz = u_xlat6.zx / u_xlat0.xx;
    u_xlat5.xyz = u_xlat7.yzx / u_xlat0.xxx;
    u_xlat4.x = 0.0;
    u_xlat4.xyz = u_xlat4.xyz + u_xlat5.xyz;
    u_xlat3.xyz = u_xlat3.xyz + u_xlat4.xyz;
    u_xlat3.xyz = u_xlat8.yzx * vec3(1.0, 0.00787401572, 0.00787401572) + u_xlat3.xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.xyw * u_xlat3.xyz;
    u_xlat2.xyz = u_xlat3.zxy * u_xlat2.ywx + (-u_xlat4.xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat4.xyz = u_xlat3.xyz * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
    { bool cond = 0.0<u_xlat0.x; u_xlati22 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati22 = int((0.0<u_xlat0.x) ? 0xFFFFFFFFu : uint(0u));
#endif
#ifdef UNITY_ADRENO_ES3
    { bool cond = u_xlat0.x<0.0; u_xlati0 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati0 = int((u_xlat0.x<0.0) ? 0xFFFFFFFFu : uint(0u));
#endif
    u_xlati0 = (-u_xlati22) + u_xlati0;
    u_xlat0.x = float(u_xlati0);
    vs_TEXCOORD1.xyz = u_xlat0.xxx * u_xlat2.xyz;
    vs_TEXCOORD1.w = 0.0;
    u_xlatu1.xyz = uvec3(16711680u, 65280u, 255u) & floatBitsToUint(unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2]).www;
    u_xlat1.xyz = vec3(u_xlatu1.xyz);
    u_xlatu2.xyz = uvec3(16711680u, 65280u, 255u) & floatBitsToUint(unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3]).www;
    u_xlat0.x = max(1.0, unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].w);
    u_xlat0.x = min(u_xlat0.x, 2.0);
    u_xlat0.x = u_xlat0.x + -1.0;
    u_xlat2.xyz = vec3(u_xlatu2.xyz);
    u_xlat2.xyz = u_xlat2.xyz * vec3(5.9838392e-08, 1.53186284e-05, 0.00392156886);
    u_xlat1.xyz = u_xlat1.xyz * vec3(5.9838392e-08, 1.53186284e-05, 0.00392156886) + (-u_xlat2.xyz);
    u_xlat11 = u_xlat33 / _RootColorScale;
    u_xlat11 = u_xlat11 + _RootColorOffset;
#ifdef UNITY_ADRENO_ES3
    u_xlat11 = min(max(u_xlat11, 0.0), 1.0);
#else
    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat11) * u_xlat1.xyz + u_xlat2.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _BurnedColor.xyz;
    u_xlat1.xyz = u_xlat0.xxx * u_xlat2.xyz + u_xlat1.xyz;
    vs_TEXCOORD2.w = u_xlat0.x;
    u_xlat0.x = u_xlat33 + -0.600000024;
    vs_TEXCOORD3 = u_xlat33;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = _GrassTipLighting * u_xlat0.x + 1.0;
    vs_TEXCOORD2.xyz = u_xlat0.xxx * u_xlat1.xyz;
    vs_TEXCOORD4.xy = in_TEXCOORD2.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	float _GrassShininess;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	float _CutOff;
uniform 	vec4 _BurnedColor;
uniform lowp sampler2D _MainTex;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp float vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec4 u_xlat0;
lowp vec4 u_xlat10_0;
bool u_xlatb0;
vec3 u_xlat1;
mediump float u_xlat16_2;
float u_xlat9;
bool u_xlatb9;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD4.xy);
    u_xlat9 = u_xlat10_0.w + (-_CutOff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(u_xlat9<0.0);
#else
    u_xlatb9 = u_xlat9<0.0;
#endif
    if((int(u_xlatb9) * int(0xffffffffu))!=0){discard;}
    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
    SV_Target0.xyz = u_xlat1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0;
    u_xlat1.xyz = _BurnedColor.xyz * u_xlat10_0.xyz + (-u_xlat10_0.xyz);
    u_xlat0.xyz = vs_TEXCOORD2.www * u_xlat1.xyz + u_xlat10_0.xyz;
    u_xlat0.w = vs_TEXCOORD3;
    SV_Target1 = u_xlat0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_2 = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb0) ? u_xlat16_2 : 0.0399999991;
    u_xlat0.x = (-vs_TEXCOORD2.w) + 1.0;
    u_xlat0.x = u_xlat0.x * _GrassShininess;
    SV_Target2.w = u_xlat0.x;
    SV_Target2.xy = vec2(0.0399999991, 0.0399999991);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_HDR_ON" "MHY_SHADER_HIGH" "SOFT_SAMPLE_HEIGHT_ON" "DITHER_FADE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	float _NoiseScale;
uniform 	vec4 _WorldOffsetRange;
uniform 	float _HeightScale;
uniform 	float _Billboard;
uniform 	float _VegetationMoveScale;
uniform 	float _VegetationStiffness;
uniform 	vec4 _LocalWindsMapSize;
uniform 	vec4 _LargeWindParam;
uniform 	vec4 _SmallWindParam;
uniform 	vec4 _GlobalWind;
uniform 	vec4 _LocalWindsMapCameraInfo;
uniform 	float _GrassTipLighting;
uniform 	vec4 _MainTex_ST;
uniform 	float _RootColorScale;
uniform 	float _RootColorOffset;
uniform highp sampler2D _Heightmap;
uniform lowp sampler2D _Noisemap;
uniform lowp sampler2D _LocalWindsMap;
in highp vec4 in_POSITION0;
in highp vec4 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec2 in_TEXCOORD2;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp float vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
vec4 u_xlat0;
vec3 u_xlat1;
int u_xlati1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
vec4 u_xlat4;
vec3 u_xlat5;
vec4 u_xlat6;
vec4 u_xlat7;
vec4 u_xlat8;
vec3 u_xlat9;
vec3 u_xlat10;
bool u_xlatb10;
vec2 u_xlat12;
vec3 u_xlat16;
vec2 u_xlat20;
vec2 u_xlat22;
float u_xlat30;
int u_xlati30;
float u_xlat31;
float u_xlat32;
float u_xlat33;
float u_xlat34;
void main()
{
    u_xlat0.z = 0.0;
    u_xlat1.xyz = in_TEXCOORD0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[2].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TEXCOORD0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat10.xz = u_xlat1.xz + (-_LocalWindsMapSize.xy);
    u_xlat10.xz = vec2(u_xlat10.x / _LocalWindsMapSize.z, u_xlat10.z / _LocalWindsMapSize.w);
    u_xlat10.xz = u_xlat10.xz + vec2(0.5, 0.5);
    u_xlat2 = textureLod(_LocalWindsMap, u_xlat10.xz, 0.0);
    u_xlat10.x = dot(u_xlat2.xy, u_xlat2.xy);
    u_xlat10.x = sqrt(u_xlat10.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(9.99999975e-05>=u_xlat10.x);
#else
    u_xlatb10 = 9.99999975e-05>=u_xlat10.x;
#endif
    u_xlat10.x = u_xlatb10 ? 1.0 : float(0.0);
    u_xlat3.xy = (-u_xlat2.xy) + vec2(0.5, 0.5);
    u_xlat10.xz = u_xlat10.xx * u_xlat3.xy + u_xlat2.xy;
    u_xlat10.xz = u_xlat10.xz * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat31 = dot(u_xlat10.xz, u_xlat10.xz);
    u_xlat31 = max(u_xlat31, 0.00100000005);
    u_xlat3.x = inversesqrt(u_xlat31);
    u_xlat3.yz = u_xlat10.xz * u_xlat3.xx;
    u_xlat0.x = u_xlat3.z;
    u_xlat0.xz = (-u_xlat3.xy) * vec2(0.0, 1.0) + u_xlat0.xz;
    u_xlat31 = (-in_TEXCOORD1.x) + hlslcc_mtx4x4unity_ObjectToWorld[1].x;
    u_xlat2.x = u_xlat31 * 3.0;
    u_xlat2.x = _Time.y * 3.0 + u_xlat2.x;
    u_xlat2.x = u_xlat2.x + 0.5;
    u_xlat2.x = fract(u_xlat2.x);
    u_xlat2.x = u_xlat2.x * 2.0 + -1.0;
    u_xlat12.x = abs(u_xlat2.x) * abs(u_xlat2.x);
    u_xlat2.x = -abs(u_xlat2.x) * 2.0 + 3.0;
    u_xlat2.x = u_xlat2.x * u_xlat12.x;
    u_xlat12.x = u_xlat2.z * 1.5;
    u_xlat2.x = u_xlat12.x * u_xlat2.x;
    u_xlat0.xz = u_xlat0.xz * u_xlat2.xx;
    u_xlat0.xz = u_xlat0.xz * vec2(0.150000006, 0.150000006);
    u_xlat0.xz = u_xlat3.yz * u_xlat2.xx + u_xlat0.xz;
    u_xlat0.xz = u_xlat0.xz + u_xlat10.xz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(0.00199999986<u_xlat2.z);
#else
    u_xlatb2 = 0.00199999986<u_xlat2.z;
#endif
    u_xlat12.x = (-u_xlat2.w) * _LocalWindsMapCameraInfo.y + _LocalWindsMapCameraInfo.x;
    u_xlat0.xy = (bool(u_xlatb2)) ? u_xlat0.xz : u_xlat10.xz;
    u_xlat20.xy = vec2(_WorldOffsetRange.z + float(2.0), _WorldOffsetRange.w + float(2.0));
    u_xlat2.xz = u_xlat1.xz + (-_WorldOffsetRange.xy);
    u_xlat2.xz = u_xlat2.xz + vec2(1.0, 1.0);
    u_xlat20.xy = u_xlat2.xz / u_xlat20.xy;
    u_xlat20.xy = u_xlat20.xy * _WorldOffsetRange.zw + vec2(-0.5, -0.5);
    u_xlat2.xz = floor(u_xlat20.xy);
    u_xlat20.xy = u_xlat20.xy + (-u_xlat2.xz);
    u_xlat3 = u_xlat2.xzxz + vec4(0.5, 1.5, 1.5, 1.5);
    u_xlat4 = u_xlat2.xzxz + vec4(1.5, 0.5, 0.5, 0.5);
    u_xlat4 = vec4(u_xlat4.x / _WorldOffsetRange.z, u_xlat4.y / _WorldOffsetRange.w, u_xlat4.z / _WorldOffsetRange.z, u_xlat4.w / _WorldOffsetRange.w);
    u_xlat3 = vec4(u_xlat3.x / _WorldOffsetRange.z, u_xlat3.y / _WorldOffsetRange.w, u_xlat3.z / _WorldOffsetRange.z, u_xlat3.w / _WorldOffsetRange.w);
    u_xlat2.x = textureLod(_Heightmap, u_xlat3.zw, 0.0).x;
    u_xlat22.x = textureLod(_Heightmap, u_xlat3.xy, 0.0).x;
    u_xlat2.x = (-u_xlat22.x) + u_xlat2.x;
    u_xlat2.x = u_xlat20.x * u_xlat2.x + u_xlat22.x;
    u_xlat22.x = textureLod(_Heightmap, u_xlat4.xy, 0.0).x;
    u_xlat32 = textureLod(_Heightmap, u_xlat4.zw, 0.0).x;
    u_xlat22.x = (-u_xlat32) + u_xlat22.x;
    u_xlat20.x = u_xlat20.x * u_xlat22.x + u_xlat32;
    u_xlat2.x = (-u_xlat20.x) + u_xlat2.x;
    u_xlat20.x = u_xlat20.y * u_xlat2.x + u_xlat20.x;
    u_xlat30 = u_xlat20.x * _HeightScale + u_xlat1.y;
    u_xlat30 = (-u_xlat30) + u_xlat12.x;
    u_xlat30 = u_xlat30 * 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
#else
    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
#endif
    u_xlat30 = (-u_xlat30) + 1.0;
    u_xlat2.x = fract(u_xlat31);
    u_xlat31 = u_xlat31 + hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat12.xy = vec2(u_xlat31) * vec2(22.0, 33.0);
    u_xlat12.xy = fract(u_xlat12.xy);
    u_xlat12.xy = u_xlat12.xy + vec2(-0.5, -0.5);
    u_xlat3.xz = u_xlat12.xy * vec2(0.200000003, 0.200000003);
    u_xlat31 = u_xlat2.x + -0.5;
    u_xlat2.x = u_xlat2.x * _SmallWindParam.x;
    u_xlat2.x = sin(u_xlat2.x);
    u_xlat12.x = u_xlat31 * 0.333000004;
    u_xlat4.y = u_xlat31 * 0.333000004 + -1.0;
    u_xlat31 = in_TEXCOORD1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat31 = min(max(u_xlat31, 0.0), 1.0);
#else
    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat12.x * u_xlat31;
    u_xlat30 = u_xlat30 * u_xlat12.x;
    u_xlat0.xy = vec2(u_xlat30) * u_xlat0.xy;
    u_xlat5.xz = u_xlat0.xy * vec2(vec2(_VegetationMoveScale, _VegetationMoveScale));
    u_xlat0.x = dot(_GlobalWind.xyz, _GlobalWind.xyz);
    u_xlat0.x = max(u_xlat0.x, 0.00100000005);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat6 = u_xlat0.xxxx * _GlobalWind.xzxz;
    u_xlat0.xy = vec2(u_xlat6.z * _LargeWindParam.z, u_xlat6.w * _LargeWindParam.z);
    u_xlat22.xy = u_xlat1.xz / vec2(_NoiseScale);
    u_xlat22.xy = _LargeWindParam.xx * u_xlat6.xy + u_xlat22.xy;
    u_xlat22.xy = textureLod(_Noisemap, u_xlat22.xy, 0.0).xy;
    u_xlat22.xy = u_xlat22.xy + vec2(-0.5, -0.5);
    u_xlat22.xy = u_xlat22.xy * _LargeWindParam.yy + vec2(0.5, 0.5);
    u_xlat22.xy = u_xlat12.xx * u_xlat22.xy;
    u_xlat6.xz = u_xlat0.xy * u_xlat22.xy;
    u_xlat6.y = 0.0;
    u_xlat0.x = _VegetationStiffness * _SmallWindParam.y;
    u_xlat0.x = u_xlat12.x * u_xlat0.x;
    u_xlat7.x = u_xlat0.x * u_xlat2.x;
    u_xlat0.xyw = in_NORMAL0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyw = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_NORMAL0.xxx + u_xlat0.xyw;
    u_xlat0.xyw = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_NORMAL0.zzz + u_xlat0.xyw;
    u_xlat2.x = dot(u_xlat0.xyw, u_xlat0.xyw);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat0.xyw = u_xlat0.xyw * u_xlat2.xxx;
    u_xlat7.y = float(1.0);
    u_xlat7.z = float(0.349999994);
    u_xlat2.xzw = u_xlat0.xyw * u_xlat7.yxy;
    u_xlat8.xyz = u_xlat2.xzw * u_xlat7.xzx + u_xlat6.xyz;
    u_xlat2.xzw = u_xlat7.xzx * u_xlat2.xzw;
    u_xlat5.y = 0.0;
    u_xlat7.xyz = u_xlat5.xyz + u_xlat8.xyz;
    u_xlat8.y = hlslcc_mtx4x4unity_MatrixV[0].x;
    u_xlat8.x = hlslcc_mtx4x4unity_MatrixV[2].x;
    u_xlat33 = dot(u_xlat8.xy, u_xlat8.xy);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat16.xz = vec2(u_xlat33) * u_xlat8.xy;
    u_xlat8.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;
    u_xlat8.y = hlslcc_mtx4x4unity_ObjectToWorld[2].x;
    u_xlat33 = dot(u_xlat8.xy, u_xlat8.xy);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat8.xy = vec2(u_xlat33) * u_xlat8.xy;
    u_xlat9.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat9.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat9.xyz;
    u_xlat9.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat9.xyz;
    u_xlat9.xyz = u_xlat9.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat9.xyz = (-u_xlat1.xyz) + u_xlat9.xyz;
    u_xlat33 = u_xlat8.y * u_xlat9.z;
    u_xlat33 = u_xlat9.x * u_xlat8.x + (-u_xlat33);
    u_xlat34 = dot(u_xlat9.zx, u_xlat8.xy);
    u_xlat8.xy = u_xlat16.xz * vec2(u_xlat34);
    u_xlat34 = u_xlat33 * u_xlat16.z + (-u_xlat8.x);
    u_xlat33 = u_xlat33 * u_xlat16.x + u_xlat8.y;
    u_xlat33 = u_xlat9.z + u_xlat33;
    u_xlat9.z = (-u_xlat33) * _Billboard + u_xlat9.z;
    u_xlat33 = u_xlat9.x + u_xlat34;
    u_xlat9.x = (-u_xlat33) * _Billboard + u_xlat9.x;
    u_xlat33 = u_xlat12.x * u_xlat9.y;
    u_xlat12.x = max(u_xlat12.x, 9.99999972e-10);
    u_xlat7.xyz = u_xlat9.xyz * vec3(0.100000001, 1.0, 0.100000001) + u_xlat7.xyz;
    u_xlat34 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat34 = max(u_xlat34, 0.00100000005);
    u_xlat34 = inversesqrt(u_xlat34);
    u_xlat7.xyz = vec3(u_xlat34) * u_xlat7.xyz;
    u_xlat34 = dot(u_xlat9.xyz, u_xlat9.xyz);
    u_xlat34 = sqrt(u_xlat34);
    u_xlat8.xyz = u_xlat9.xyz * vec3(0.100000001, 1.0, 0.100000001);
    u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat34) + (-u_xlat8.xyz);
    u_xlat8.xyz = u_xlat1.xyz + u_xlat9.xyz;
    u_xlat8.w = u_xlat20.x * _HeightScale + u_xlat8.y;
    u_xlat1.xyz = u_xlat7.xyz + u_xlat8.xwz;
    u_xlat1.xyz = vec3(u_xlat33) * vec3(-0.5, 0.0, -0.5) + u_xlat1.xyz;
    u_xlat4.xz = u_xlat4.yy * (-u_xlat4.yy);
    u_xlat1.xyz = u_xlat4.xyz * u_xlat9.xyz + u_xlat1.xyz;
    u_xlat4.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat7 = u_xlat4.yyyy * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat7 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat4.xxxx + u_xlat7;
    u_xlat4 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat4.zzzz + u_xlat7;
    u_xlat4 = u_xlat4 + hlslcc_mtx4x4unity_MatrixVPZero[3];
    gl_Position = u_xlat4;
    u_xlat3.y = 0.0;
    vs_TEXCOORD0.xyz = u_xlat3.xyz + vec3(-1.0, 0.0, -1.0);
    vs_TEXCOORD0.w = 0.0;
    u_xlat3.xyz = u_xlat5.yzx / u_xlat12.xxx;
    u_xlat5.yz = u_xlat6.zx / u_xlat12.xx;
    u_xlat2.xyz = u_xlat2.zwx / u_xlat12.xxx;
    u_xlat5.x = 0.0;
    u_xlat2.xyz = u_xlat2.xyz + u_xlat5.xyz;
    u_xlat2.xyz = u_xlat3.xyz + u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz + vec3(0.0, -1.0, -1.0);
    u_xlat20.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat20.x = inversesqrt(u_xlat20.x);
    u_xlat2.xyz = u_xlat20.xxx * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat0.xyw * u_xlat2.xyz;
    u_xlat0.xyz = u_xlat2.zxy * u_xlat0.ywx + (-u_xlat3.xyz);
    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.xyz * u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
    u_xlat30 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat1.xyz = vec3(u_xlat30) * u_xlat1.xyz;
    u_xlat30 = dot(u_xlat1.xyz, u_xlat0.xyz);
#ifdef UNITY_ADRENO_ES3
    { bool cond = 0.0<u_xlat30; u_xlati1 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati1 = int((0.0<u_xlat30) ? 0xFFFFFFFFu : uint(0u));
#endif
#ifdef UNITY_ADRENO_ES3
    { bool cond = u_xlat30<0.0; u_xlati30 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati30 = int((u_xlat30<0.0) ? 0xFFFFFFFFu : uint(0u));
#endif
    u_xlati30 = (-u_xlati1) + u_xlati30;
    u_xlat30 = float(u_xlati30);
    vs_TEXCOORD1.xyz = vec3(u_xlat30) * u_xlat0.xyz;
    vs_TEXCOORD1.w = 0.0;
    u_xlat0.x = u_xlat31 / _RootColorScale;
    u_xlat0.x = u_xlat0.x + _RootColorOffset;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xxx * vec3(-0.501960814, 0.0, 0.0) + vec3(0.501960814, 0.0, 0.0);
    u_xlat30 = u_xlat31 + -0.600000024;
    vs_TEXCOORD3 = u_xlat31;
    u_xlat30 = max(u_xlat30, 0.0);
    u_xlat30 = _GrassTipLighting * u_xlat30 + 1.0;
    vs_TEXCOORD2.xyz = vec3(u_xlat30) * u_xlat0.xyz;
    vs_TEXCOORD2.w = 0.0;
    vs_TEXCOORD4.xy = in_TEXCOORD2.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
    u_xlat0.x = u_xlat4.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat4.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.w = u_xlat4.w;
    vs_TEXCOORD5.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD5.z = 0.247058824;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
float ImmCB_0_0_0[64];
uniform 	vec4 _ScreenParams;
uniform 	float _GrassShininess;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	float _CutOff;
uniform 	vec4 _BurnedColor;
uniform lowp sampler2D _MainTex;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp float vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec3 u_xlat0;
int u_xlati0;
bool u_xlatb0;
lowp vec4 u_xlat10_1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat12;
bool u_xlatb12;
void main()
{
	ImmCB_0_0_0[0] = 1.0;
	ImmCB_0_0_0[1] = 49.0;
	ImmCB_0_0_0[2] = 13.0;
	ImmCB_0_0_0[3] = 61.0;
	ImmCB_0_0_0[4] = 4.0;
	ImmCB_0_0_0[5] = 52.0;
	ImmCB_0_0_0[6] = 16.0;
	ImmCB_0_0_0[7] = 64.0;
	ImmCB_0_0_0[8] = 33.0;
	ImmCB_0_0_0[9] = 17.0;
	ImmCB_0_0_0[10] = 45.0;
	ImmCB_0_0_0[11] = 29.0;
	ImmCB_0_0_0[12] = 36.0;
	ImmCB_0_0_0[13] = 20.0;
	ImmCB_0_0_0[14] = 48.0;
	ImmCB_0_0_0[15] = 32.0;
	ImmCB_0_0_0[16] = 9.0;
	ImmCB_0_0_0[17] = 57.0;
	ImmCB_0_0_0[18] = 5.0;
	ImmCB_0_0_0[19] = 53.0;
	ImmCB_0_0_0[20] = 12.0;
	ImmCB_0_0_0[21] = 60.0;
	ImmCB_0_0_0[22] = 8.0;
	ImmCB_0_0_0[23] = 56.0;
	ImmCB_0_0_0[24] = 41.0;
	ImmCB_0_0_0[25] = 25.0;
	ImmCB_0_0_0[26] = 37.0;
	ImmCB_0_0_0[27] = 21.0;
	ImmCB_0_0_0[28] = 44.0;
	ImmCB_0_0_0[29] = 28.0;
	ImmCB_0_0_0[30] = 40.0;
	ImmCB_0_0_0[31] = 24.0;
	ImmCB_0_0_0[32] = 3.0;
	ImmCB_0_0_0[33] = 51.0;
	ImmCB_0_0_0[34] = 15.0;
	ImmCB_0_0_0[35] = 63.0;
	ImmCB_0_0_0[36] = 2.0;
	ImmCB_0_0_0[37] = 50.0;
	ImmCB_0_0_0[38] = 14.0;
	ImmCB_0_0_0[39] = 62.0;
	ImmCB_0_0_0[40] = 35.0;
	ImmCB_0_0_0[41] = 19.0;
	ImmCB_0_0_0[42] = 47.0;
	ImmCB_0_0_0[43] = 31.0;
	ImmCB_0_0_0[44] = 34.0;
	ImmCB_0_0_0[45] = 18.0;
	ImmCB_0_0_0[46] = 46.0;
	ImmCB_0_0_0[47] = 30.0;
	ImmCB_0_0_0[48] = 11.0;
	ImmCB_0_0_0[49] = 59.0;
	ImmCB_0_0_0[50] = 7.0;
	ImmCB_0_0_0[51] = 55.0;
	ImmCB_0_0_0[52] = 10.0;
	ImmCB_0_0_0[53] = 58.0;
	ImmCB_0_0_0[54] = 6.0;
	ImmCB_0_0_0[55] = 54.0;
	ImmCB_0_0_0[56] = 43.0;
	ImmCB_0_0_0[57] = 27.0;
	ImmCB_0_0_0[58] = 39.0;
	ImmCB_0_0_0[59] = 23.0;
	ImmCB_0_0_0[60] = 42.0;
	ImmCB_0_0_0[61] = 26.0;
	ImmCB_0_0_0[62] = 38.0;
	ImmCB_0_0_0[63] = 22.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vs_TEXCOORD5.z<0.949999988);
#else
    u_xlatb0 = vs_TEXCOORD5.z<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD5.yx / vs_TEXCOORD5.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
        u_xlat0.xy = u_xlat0.xy * vec2(0.125, 0.125);
        u_xlat0.xy = fract(u_xlat0.xy);
        u_xlat0.xy = u_xlat0.xy * vec2(7.99900007, 7.99900007);
        u_xlat0.xy = trunc(u_xlat0.xy);
        u_xlat0.x = u_xlat0.x * 8.0 + u_xlat0.y;
        u_xlati0 = int(u_xlat0.x);
        u_xlat0.x = (-ImmCB_0_0_0[u_xlati0]) * 0.015625 + vs_TEXCOORD5.z;
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat0.x = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD0.xyz;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD4.xy);
    u_xlat2.xyz = _BurnedColor.xyz * u_xlat10_1.xyz + (-u_xlat10_1.xyz);
    u_xlat2.xyz = vs_TEXCOORD2.www * u_xlat2.xyz + u_xlat10_1.xyz;
    u_xlat12 = u_xlat10_1.w + (-_CutOff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat12<0.0);
#else
    u_xlatb12 = u_xlat12<0.0;
#endif
    if((int(u_xlatb12) * int(0xffffffffu))!=0){discard;}
    u_xlat12 = (-vs_TEXCOORD2.w) + 1.0;
    u_xlat12 = u_xlat12 * _GrassShininess;
    SV_Target0.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_3 = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb0) ? u_xlat16_3 : 0.0399999991;
    SV_Target0.w = 0.0;
    u_xlat2.w = vs_TEXCOORD3;
    SV_Target1 = u_xlat2;
    SV_Target2.xy = vec2(0.0399999991, 0.0399999991);
    SV_Target2.w = u_xlat12;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_HDR_ON" "INSTANCING_ON" "MHY_SHADER_HIGH" "SOFT_SAMPLE_HEIGHT_ON" "DITHER_FADE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	int unity_BaseInstanceID;
uniform 	float _NoiseScale;
uniform 	vec4 _WorldOffsetRange;
uniform 	float _HeightScale;
uniform 	float _Billboard;
uniform 	float _VegetationMoveScale;
uniform 	float _VegetationStiffness;
uniform 	vec4 _LocalWindsMapSize;
uniform 	vec4 _LargeWindParam;
uniform 	vec4 _SmallWindParam;
uniform 	vec4 _GlobalWind;
uniform 	vec4 _LocalWindsMapCameraInfo;
uniform 	float _GrassTipLighting;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BurnedColor;
uniform 	float _RootColorScale;
uniform 	float _RootColorOffset;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _Heightmap;
uniform lowp sampler2D _Noisemap;
uniform lowp sampler2D _LocalWindsMap;
in highp vec4 in_POSITION0;
in highp vec4 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec2 in_TEXCOORD2;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp float vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
vec4 u_xlat0;
int u_xlati0;
uvec3 u_xlatu0;
vec3 u_xlat1;
uvec3 u_xlatu1;
vec4 u_xlat2;
uvec4 u_xlatu2;
vec4 u_xlat3;
vec4 u_xlat4;
vec3 u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
vec3 u_xlat8;
vec4 u_xlat9;
vec4 u_xlat10;
float u_xlat11;
int u_xlati11;
float u_xlat13;
uint u_xlatu13;
vec3 u_xlat17;
vec3 u_xlat18;
float u_xlat22;
int u_xlati22;
bool u_xlatb22;
float u_xlat24;
float u_xlat33;
bool u_xlatb33;
float u_xlat34;
bool u_xlatb34;
float u_xlat35;
float u_xlat36;
void main()
{
    u_xlat0.z = 0.0;
    u_xlati11 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati11 = u_xlati11 << 2;
    u_xlat1.xyz = in_TEXCOORD0.yyy * unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_TEXCOORD0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat2.xy = u_xlat1.xz + (-_LocalWindsMapSize.xy);
    u_xlat2.xy = vec2(u_xlat2.x / _LocalWindsMapSize.z, u_xlat2.y / _LocalWindsMapSize.w);
    u_xlat2.xy = u_xlat2.xy + vec2(0.5, 0.5);
    u_xlat2 = textureLod(_LocalWindsMap, u_xlat2.xy, 0.0);
    u_xlat33 = dot(u_xlat2.xy, u_xlat2.xy);
    u_xlat33 = sqrt(u_xlat33);
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(9.99999975e-05>=u_xlat33);
#else
    u_xlatb33 = 9.99999975e-05>=u_xlat33;
#endif
    u_xlat33 = u_xlatb33 ? 1.0 : float(0.0);
    u_xlat3.xy = (-u_xlat2.xy) + vec2(0.5, 0.5);
    u_xlat2.xy = vec2(u_xlat33) * u_xlat3.xy + u_xlat2.xy;
    u_xlat2.xy = u_xlat2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat33 = dot(u_xlat2.xy, u_xlat2.xy);
    u_xlat33 = max(u_xlat33, 0.00100000005);
    u_xlat3.x = inversesqrt(u_xlat33);
    u_xlat3.yz = u_xlat2.xy * u_xlat3.xx;
    u_xlat0.x = u_xlat3.z;
    u_xlat0.xz = (-u_xlat3.xy) * vec2(0.0, 1.0) + u_xlat0.xz;
    u_xlat33 = (-in_TEXCOORD1.x) + unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].x;
    u_xlat34 = u_xlat33 * 3.0;
    u_xlat34 = _Time.y * 3.0 + u_xlat34;
    u_xlat34 = u_xlat34 + 0.5;
    u_xlat34 = fract(u_xlat34);
    u_xlat34 = u_xlat34 * 2.0 + -1.0;
    u_xlat3.x = abs(u_xlat34) * abs(u_xlat34);
    u_xlat34 = -abs(u_xlat34) * 2.0 + 3.0;
    u_xlat34 = u_xlat34 * u_xlat3.x;
    u_xlat3.x = u_xlat2.z * 1.5;
    u_xlat34 = u_xlat34 * u_xlat3.x;
    u_xlat0.xz = u_xlat0.xz * vec2(u_xlat34);
    u_xlat0.xz = u_xlat0.xz * vec2(0.150000006, 0.150000006);
    u_xlat0.xz = u_xlat3.yz * vec2(u_xlat34) + u_xlat0.xz;
    u_xlat0.xz = u_xlat0.xz + u_xlat2.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlatb34 = !!(0.00199999986<u_xlat2.z);
#else
    u_xlatb34 = 0.00199999986<u_xlat2.z;
#endif
    u_xlat24 = (-u_xlat2.w) * _LocalWindsMapCameraInfo.y + _LocalWindsMapCameraInfo.x;
    u_xlat0.xz = (bool(u_xlatb34)) ? u_xlat0.xz : u_xlat2.xy;
    u_xlat2.xy = vec2(_WorldOffsetRange.z + float(2.0), _WorldOffsetRange.w + float(2.0));
    u_xlat3.xy = u_xlat1.xz + (-_WorldOffsetRange.xy);
    u_xlat3.xy = u_xlat3.xy + vec2(1.0, 1.0);
    u_xlat2.xy = u_xlat3.xy / u_xlat2.xy;
    u_xlat2.xy = u_xlat2.xy * _WorldOffsetRange.zw + vec2(-0.5, -0.5);
    u_xlat3.xy = floor(u_xlat2.xy);
    u_xlat2.xy = u_xlat2.xy + (-u_xlat3.xy);
    u_xlat4 = u_xlat3.xyxy + vec4(0.5, 1.5, 1.5, 1.5);
    u_xlat3 = u_xlat3.xyxy + vec4(1.5, 0.5, 0.5, 0.5);
    u_xlat3 = vec4(u_xlat3.x / _WorldOffsetRange.z, u_xlat3.y / _WorldOffsetRange.w, u_xlat3.z / _WorldOffsetRange.z, u_xlat3.w / _WorldOffsetRange.w);
    u_xlat4 = vec4(u_xlat4.x / _WorldOffsetRange.z, u_xlat4.y / _WorldOffsetRange.w, u_xlat4.z / _WorldOffsetRange.z, u_xlat4.w / _WorldOffsetRange.w);
    u_xlat34 = textureLod(_Heightmap, u_xlat4.zw, 0.0).x;
    u_xlat35 = textureLod(_Heightmap, u_xlat4.xy, 0.0).x;
    u_xlat34 = u_xlat34 + (-u_xlat35);
    u_xlat34 = u_xlat2.x * u_xlat34 + u_xlat35;
    u_xlat35 = textureLod(_Heightmap, u_xlat3.xy, 0.0).x;
    u_xlat3.x = textureLod(_Heightmap, u_xlat3.zw, 0.0).x;
    u_xlat35 = u_xlat35 + (-u_xlat3.x);
    u_xlat2.x = u_xlat2.x * u_xlat35 + u_xlat3.x;
    u_xlat34 = u_xlat34 + (-u_xlat2.x);
    u_xlat34 = u_xlat2.y * u_xlat34 + u_xlat2.x;
    u_xlat2.x = u_xlat34 * _HeightScale + u_xlat1.y;
    u_xlat2.x = (-u_xlat2.x) + u_xlat24;
    u_xlat2.x = u_xlat2.x * 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat2.x = (-u_xlat2.x) + 1.0;
    u_xlat13 = float(floatBitsToUint(unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2]).w);
    u_xlat13 = u_xlat13 * 5.96046448e-08;
    u_xlatu13 = uint(u_xlat13);
    u_xlatu13 = u_xlatu13 & 3u;
    u_xlat13 = float(u_xlatu13);
    u_xlat24 = fract(u_xlat33);
    u_xlat33 = u_xlat33 + unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].y;
    u_xlat3.xy = vec2(u_xlat33) * vec2(22.0, 33.0);
    u_xlat3.xy = fract(u_xlat3.xy);
    u_xlat3.xy = u_xlat3.xy + vec2(-0.5, -0.5);
    u_xlat3.xz = u_xlat3.xy * vec2(0.200000003, 0.200000003);
    u_xlat33 = u_xlat13 + u_xlat24;
    u_xlat13 = u_xlat24 * _SmallWindParam.x;
    u_xlat13 = sin(u_xlat13);
    u_xlat33 = u_xlat33 + -0.5;
    u_xlat24 = u_xlat33 * 0.333000004;
    u_xlat4.y = u_xlat33 * 0.333000004 + -1.0;
    u_xlat33 = in_TEXCOORD1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat33 = min(max(u_xlat33, 0.0), 1.0);
#else
    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
#endif
    u_xlat24 = u_xlat24 * u_xlat33;
    u_xlat2.x = u_xlat24 * u_xlat2.x;
    u_xlat0.xz = u_xlat0.xz * u_xlat2.xx;
    u_xlat5.xz = u_xlat0.xz * vec2(vec2(_VegetationMoveScale, _VegetationMoveScale));
    u_xlat6.y = 0.0;
    u_xlat0.x = _VegetationStiffness * _SmallWindParam.y;
    u_xlat0.x = u_xlat24 * u_xlat0.x;
    u_xlat7.x = u_xlat0.x * u_xlat13;
    u_xlat2.xyw = in_NORMAL0.yyy * unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat2.xyw = unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_NORMAL0.xxx + u_xlat2.xyw;
    u_xlat2.xyw = unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_NORMAL0.zzz + u_xlat2.xyw;
    u_xlat0.x = dot(u_xlat2.xyw, u_xlat2.xyw);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat2.xyw = u_xlat0.xxx * u_xlat2.xyw;
    u_xlat7.y = float(1.0);
    u_xlat7.z = float(0.349999994);
    u_xlat8.xyz = u_xlat2.xyw * u_xlat7.yxy;
    u_xlat0.x = dot(_GlobalWind.xyz, _GlobalWind.xyz);
    u_xlat0.x = max(u_xlat0.x, 0.00100000005);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat9 = u_xlat0.xxxx * _GlobalWind.xzxz;
    u_xlat0.xz = vec2(u_xlat9.z * _LargeWindParam.z, u_xlat9.w * _LargeWindParam.z);
    u_xlat18.xz = u_xlat1.xz / vec2(_NoiseScale);
    u_xlat18.xz = _LargeWindParam.xx * u_xlat9.xy + u_xlat18.xz;
    u_xlat18.xz = textureLod(_Noisemap, u_xlat18.xz, 0.0).xy;
    u_xlat18.xz = u_xlat18.xz + vec2(-0.5, -0.5);
    u_xlat18.xz = u_xlat18.xz * _LargeWindParam.yy + vec2(0.5, 0.5);
    u_xlat18.xz = vec2(u_xlat24) * u_xlat18.xz;
    u_xlat6.xz = u_xlat0.xz * u_xlat18.xz;
    u_xlat9.xyz = u_xlat8.xyz * u_xlat7.xzx + u_xlat6.xyz;
    u_xlat7.xyz = u_xlat7.xzx * u_xlat8.xyz;
    u_xlat5.y = 0.0;
    u_xlat8.xyz = u_xlat5.xyz + u_xlat9.xyz;
    u_xlat9.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat9.xyz = unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat9.xyz;
    u_xlat9.xyz = unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat9.xyz;
    u_xlat9.xyz = u_xlat9.xyz + unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat9.xyz = (-u_xlat1.xyz) + u_xlat9.xyz;
    u_xlat10.x = unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].x;
    u_xlat10.y = unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].x;
    u_xlat0.x = dot(u_xlat10.xy, u_xlat10.xy);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xz = u_xlat0.xx * u_xlat10.xy;
    u_xlat36 = u_xlat0.z * u_xlat9.z;
    u_xlat36 = u_xlat9.x * u_xlat0.x + (-u_xlat36);
    u_xlat0.x = dot(u_xlat9.zx, u_xlat0.xz);
    u_xlat10.y = hlslcc_mtx4x4unity_MatrixV[0].x;
    u_xlat10.x = hlslcc_mtx4x4unity_MatrixV[2].x;
    u_xlat22 = dot(u_xlat10.xy, u_xlat10.xy);
    u_xlat22 = inversesqrt(u_xlat22);
    u_xlat17.xz = vec2(u_xlat22) * u_xlat10.xy;
    u_xlat0.xz = u_xlat0.xx * u_xlat17.xz;
    u_xlat0.x = u_xlat36 * u_xlat17.z + (-u_xlat0.x);
    u_xlat0.z = u_xlat36 * u_xlat17.x + u_xlat0.z;
    u_xlat0.xz = u_xlat9.xz + u_xlat0.xz;
    u_xlat9.z = (-u_xlat0.z) * _Billboard + u_xlat9.z;
    u_xlat9.x = (-u_xlat0.x) * _Billboard + u_xlat9.x;
    u_xlat8.xyz = u_xlat9.xyz * vec3(0.100000001, 1.0, 0.100000001) + u_xlat8.xyz;
    u_xlat0.x = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat0.x = max(u_xlat0.x, 0.00100000005);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat8.xyz = u_xlat0.xxx * u_xlat8.xyz;
    u_xlat0.x = dot(u_xlat9.xyz, u_xlat9.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat10.xyz = u_xlat9.xyz * vec3(0.100000001, 1.0, 0.100000001);
    u_xlat8.xyz = u_xlat8.xyz * u_xlat0.xxx + (-u_xlat10.xyz);
    u_xlat10.xyz = u_xlat1.xyz + u_xlat9.xyz;
    u_xlat10.w = u_xlat34 * _HeightScale + u_xlat10.y;
    u_xlat1.xyz = u_xlat8.xyz + u_xlat10.xwz;
    u_xlatu0.xz = uvec2(65280u, 255u) & floatBitsToUint(unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1]).ww;
    u_xlat0.xz = vec2(u_xlatu0.xz);
    u_xlat0.x = u_xlat0.x * 0.00390625;
    u_xlatu0.x = uint(u_xlat0.x);
    u_xlat0.x = float(u_xlatu0.x);
    u_xlat8.xz = u_xlat0.xz + vec2(-127.0, -127.0);
    u_xlat0.xz = u_xlat8.xz * vec2(0.00787401572, 0.00787401572);
    u_xlat0.xz = u_xlat0.xz * u_xlat0.xz;
    u_xlat0.x = u_xlat0.z + u_xlat0.x;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(0.0<u_xlat0.x);
#else
    u_xlatb22 = 0.0<u_xlat0.x;
#endif
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat8.y = u_xlatb22 ? u_xlat0.x : float(0.0);
    u_xlat10.xyz = u_xlat8.xyz * u_xlat9.yyy;
    u_xlat10.xyz = vec3(u_xlat24) * u_xlat10.xyz;
    u_xlat0.x = max(u_xlat24, 9.99999972e-10);
    u_xlat1.xyz = u_xlat10.xyz * vec3(0.00393700786, 0.0, 0.00393700786) + u_xlat1.xyz;
    u_xlat4.xz = u_xlat4.yy * (-u_xlat4.yy);
    u_xlat1.xyz = u_xlat4.xyz * u_xlat9.xyz + u_xlat1.xyz;
    u_xlat4.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat9 = u_xlat4.yyyy * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat9 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat4.xxxx + u_xlat9;
    u_xlat4 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat4.zzzz + u_xlat9;
    u_xlat4 = u_xlat4 + hlslcc_mtx4x4unity_MatrixVPZero[3];
    gl_Position = u_xlat4;
    u_xlat3.y = 0.0;
    vs_TEXCOORD0.xyz = u_xlat8.xyz * vec3(0.00787401572, 1.0, 0.00787401572) + u_xlat3.xyz;
    vs_TEXCOORD0.w = 0.0;
    u_xlat3.xyz = u_xlat5.yzx / u_xlat0.xxx;
    u_xlat5.yz = u_xlat6.zx / u_xlat0.xx;
    u_xlat6.xyz = u_xlat7.yzx / u_xlat0.xxx;
    u_xlat5.x = 0.0;
    u_xlat5.xyz = u_xlat5.xyz + u_xlat6.xyz;
    u_xlat3.xyz = u_xlat3.xyz + u_xlat5.xyz;
    u_xlat3.xyz = u_xlat8.yzx * vec3(1.0, 0.00787401572, 0.00787401572) + u_xlat3.xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat5.xyz = u_xlat2.xyw * u_xlat3.xyz;
    u_xlat2.xyz = u_xlat3.zxy * u_xlat2.ywx + (-u_xlat5.xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat5.xyz = u_xlat3.xyz * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat5.xyz);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
    { bool cond = 0.0<u_xlat0.x; u_xlati22 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati22 = int((0.0<u_xlat0.x) ? 0xFFFFFFFFu : uint(0u));
#endif
#ifdef UNITY_ADRENO_ES3
    { bool cond = u_xlat0.x<0.0; u_xlati0 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati0 = int((u_xlat0.x<0.0) ? 0xFFFFFFFFu : uint(0u));
#endif
    u_xlati0 = (-u_xlati22) + u_xlati0;
    u_xlat0.x = float(u_xlati0);
    vs_TEXCOORD1.xyz = u_xlat0.xxx * u_xlat2.xyz;
    vs_TEXCOORD1.w = 0.0;
    u_xlatu1.xyz = uvec3(16711680u, 65280u, 255u) & floatBitsToUint(unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2]).www;
    u_xlat1.xyz = vec3(u_xlatu1.xyz);
    u_xlatu2 = uvec4(4278190080u, 16711680u, 65280u, 255u) & floatBitsToUint(unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3]).wwww;
    u_xlat0.x = max(1.0, unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].w);
    u_xlat0.x = min(u_xlat0.x, 2.0);
    u_xlat0.x = u_xlat0.x + -1.0;
    u_xlat2 = vec4(u_xlatu2);
    u_xlat2 = u_xlat2 * vec4(2.33743719e-10, 5.9838392e-08, 1.53186284e-05, 0.00392156886);
    u_xlat1.xyz = u_xlat1.xyz * vec3(5.9838392e-08, 1.53186284e-05, 0.00392156886) + (-u_xlat2.yzw);
    u_xlat11 = u_xlat33 / _RootColorScale;
    u_xlat11 = u_xlat11 + _RootColorOffset;
#ifdef UNITY_ADRENO_ES3
    u_xlat11 = min(max(u_xlat11, 0.0), 1.0);
#else
    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat11) * u_xlat1.xyz + u_xlat2.yzw;
    vs_TEXCOORD5.z = u_xlat2.x;
    u_xlat2.xyz = (-u_xlat1.xyz) + _BurnedColor.xyz;
    u_xlat1.xyz = u_xlat0.xxx * u_xlat2.xyz + u_xlat1.xyz;
    vs_TEXCOORD2.w = u_xlat0.x;
    u_xlat0.x = u_xlat33 + -0.600000024;
    vs_TEXCOORD3 = u_xlat33;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = _GrassTipLighting * u_xlat0.x + 1.0;
    vs_TEXCOORD2.xyz = u_xlat0.xxx * u_xlat1.xyz;
    vs_TEXCOORD4.xy = in_TEXCOORD2.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
    u_xlat0.x = u_xlat4.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat4.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.w = u_xlat4.w;
    vs_TEXCOORD5.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
float ImmCB_0_0_0[64];
uniform 	vec4 _ScreenParams;
uniform 	float _GrassShininess;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	float _CutOff;
uniform 	vec4 _BurnedColor;
uniform lowp sampler2D _MainTex;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp float vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec3 u_xlat0;
int u_xlati0;
bool u_xlatb0;
lowp vec4 u_xlat10_1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat12;
bool u_xlatb12;
void main()
{
	ImmCB_0_0_0[0] = 1.0;
	ImmCB_0_0_0[1] = 49.0;
	ImmCB_0_0_0[2] = 13.0;
	ImmCB_0_0_0[3] = 61.0;
	ImmCB_0_0_0[4] = 4.0;
	ImmCB_0_0_0[5] = 52.0;
	ImmCB_0_0_0[6] = 16.0;
	ImmCB_0_0_0[7] = 64.0;
	ImmCB_0_0_0[8] = 33.0;
	ImmCB_0_0_0[9] = 17.0;
	ImmCB_0_0_0[10] = 45.0;
	ImmCB_0_0_0[11] = 29.0;
	ImmCB_0_0_0[12] = 36.0;
	ImmCB_0_0_0[13] = 20.0;
	ImmCB_0_0_0[14] = 48.0;
	ImmCB_0_0_0[15] = 32.0;
	ImmCB_0_0_0[16] = 9.0;
	ImmCB_0_0_0[17] = 57.0;
	ImmCB_0_0_0[18] = 5.0;
	ImmCB_0_0_0[19] = 53.0;
	ImmCB_0_0_0[20] = 12.0;
	ImmCB_0_0_0[21] = 60.0;
	ImmCB_0_0_0[22] = 8.0;
	ImmCB_0_0_0[23] = 56.0;
	ImmCB_0_0_0[24] = 41.0;
	ImmCB_0_0_0[25] = 25.0;
	ImmCB_0_0_0[26] = 37.0;
	ImmCB_0_0_0[27] = 21.0;
	ImmCB_0_0_0[28] = 44.0;
	ImmCB_0_0_0[29] = 28.0;
	ImmCB_0_0_0[30] = 40.0;
	ImmCB_0_0_0[31] = 24.0;
	ImmCB_0_0_0[32] = 3.0;
	ImmCB_0_0_0[33] = 51.0;
	ImmCB_0_0_0[34] = 15.0;
	ImmCB_0_0_0[35] = 63.0;
	ImmCB_0_0_0[36] = 2.0;
	ImmCB_0_0_0[37] = 50.0;
	ImmCB_0_0_0[38] = 14.0;
	ImmCB_0_0_0[39] = 62.0;
	ImmCB_0_0_0[40] = 35.0;
	ImmCB_0_0_0[41] = 19.0;
	ImmCB_0_0_0[42] = 47.0;
	ImmCB_0_0_0[43] = 31.0;
	ImmCB_0_0_0[44] = 34.0;
	ImmCB_0_0_0[45] = 18.0;
	ImmCB_0_0_0[46] = 46.0;
	ImmCB_0_0_0[47] = 30.0;
	ImmCB_0_0_0[48] = 11.0;
	ImmCB_0_0_0[49] = 59.0;
	ImmCB_0_0_0[50] = 7.0;
	ImmCB_0_0_0[51] = 55.0;
	ImmCB_0_0_0[52] = 10.0;
	ImmCB_0_0_0[53] = 58.0;
	ImmCB_0_0_0[54] = 6.0;
	ImmCB_0_0_0[55] = 54.0;
	ImmCB_0_0_0[56] = 43.0;
	ImmCB_0_0_0[57] = 27.0;
	ImmCB_0_0_0[58] = 39.0;
	ImmCB_0_0_0[59] = 23.0;
	ImmCB_0_0_0[60] = 42.0;
	ImmCB_0_0_0[61] = 26.0;
	ImmCB_0_0_0[62] = 38.0;
	ImmCB_0_0_0[63] = 22.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vs_TEXCOORD5.z<0.949999988);
#else
    u_xlatb0 = vs_TEXCOORD5.z<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD5.yx / vs_TEXCOORD5.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
        u_xlat0.xy = u_xlat0.xy * vec2(0.125, 0.125);
        u_xlat0.xy = fract(u_xlat0.xy);
        u_xlat0.xy = u_xlat0.xy * vec2(7.99900007, 7.99900007);
        u_xlat0.xy = trunc(u_xlat0.xy);
        u_xlat0.x = u_xlat0.x * 8.0 + u_xlat0.y;
        u_xlati0 = int(u_xlat0.x);
        u_xlat0.x = (-ImmCB_0_0_0[u_xlati0]) * 0.015625 + vs_TEXCOORD5.z;
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat0.x = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD0.xyz;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD4.xy);
    u_xlat2.xyz = _BurnedColor.xyz * u_xlat10_1.xyz + (-u_xlat10_1.xyz);
    u_xlat2.xyz = vs_TEXCOORD2.www * u_xlat2.xyz + u_xlat10_1.xyz;
    u_xlat12 = u_xlat10_1.w + (-_CutOff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat12<0.0);
#else
    u_xlatb12 = u_xlat12<0.0;
#endif
    if((int(u_xlatb12) * int(0xffffffffu))!=0){discard;}
    u_xlat12 = (-vs_TEXCOORD2.w) + 1.0;
    u_xlat12 = u_xlat12 * _GrassShininess;
    SV_Target0.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_3 = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb0) ? u_xlat16_3 : 0.0399999991;
    SV_Target0.w = 0.0;
    u_xlat2.w = vs_TEXCOORD3;
    SV_Target1 = u_xlat2;
    SV_Target2.xy = vec2(0.0399999991, 0.0399999991);
    SV_Target2.w = u_xlat12;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_HDR_ON" "MHY_SHADER_MIDDLE" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	float _NoiseScale;
uniform 	vec4 _WorldOffsetRange;
uniform 	float _HeightScale;
uniform 	float _Billboard;
uniform 	float _VegetationMoveScale;
uniform 	vec4 _LocalWindsMapSize;
uniform 	vec4 _LargeWindParam;
uniform 	vec4 _GlobalWind;
uniform 	vec4 _LocalWindsMapCameraInfo;
uniform 	float _GrassTipLighting;
uniform 	vec4 _MainTex_ST;
uniform 	float _RootColorScale;
uniform 	float _RootColorOffset;
uniform highp sampler2D _Heightmap;
uniform lowp sampler2D _Noisemap;
uniform lowp sampler2D _LocalWindsMap;
in highp vec4 in_POSITION0;
in highp vec4 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec2 in_TEXCOORD2;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp float vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec3 u_xlat0;
vec3 u_xlat1;
int u_xlati1;
vec4 u_xlat2;
bool u_xlatb2;
vec3 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
vec4 u_xlat6;
vec3 u_xlat7;
vec3 u_xlat8;
bool u_xlatb8;
vec2 u_xlat10;
vec2 u_xlat16;
vec2 u_xlat21;
float u_xlat24;
int u_xlati24;
float u_xlat25;
float u_xlat26;
void main()
{
    u_xlat0.z = 0.0;
    u_xlat1.xyz = in_TEXCOORD0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[2].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TEXCOORD0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat8.xz = u_xlat1.xz + (-_LocalWindsMapSize.xy);
    u_xlat8.xz = vec2(u_xlat8.x / _LocalWindsMapSize.z, u_xlat8.z / _LocalWindsMapSize.w);
    u_xlat8.xz = u_xlat8.xz + vec2(0.5, 0.5);
    u_xlat2 = textureLod(_LocalWindsMap, u_xlat8.xz, 0.0);
    u_xlat8.x = dot(u_xlat2.xy, u_xlat2.xy);
    u_xlat8.x = sqrt(u_xlat8.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(9.99999975e-05>=u_xlat8.x);
#else
    u_xlatb8 = 9.99999975e-05>=u_xlat8.x;
#endif
    u_xlat8.x = u_xlatb8 ? 1.0 : float(0.0);
    u_xlat3.xy = (-u_xlat2.xy) + vec2(0.5, 0.5);
    u_xlat8.xz = u_xlat8.xx * u_xlat3.xy + u_xlat2.xy;
    u_xlat8.xz = u_xlat8.xz * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat25 = dot(u_xlat8.xz, u_xlat8.xz);
    u_xlat25 = max(u_xlat25, 0.00100000005);
    u_xlat3.x = inversesqrt(u_xlat25);
    u_xlat3.yz = u_xlat8.xz * u_xlat3.xx;
    u_xlat0.x = u_xlat3.z;
    u_xlat0.xz = (-u_xlat3.xy) * vec2(0.0, 1.0) + u_xlat0.xz;
    u_xlat25 = (-in_TEXCOORD1.x) + hlslcc_mtx4x4unity_ObjectToWorld[1].x;
    u_xlat2.x = u_xlat25 * 3.0;
    u_xlat2.x = _Time.y * 3.0 + u_xlat2.x;
    u_xlat2.x = u_xlat2.x + 0.5;
    u_xlat2.x = fract(u_xlat2.x);
    u_xlat2.x = u_xlat2.x * 2.0 + -1.0;
    u_xlat10.x = abs(u_xlat2.x) * abs(u_xlat2.x);
    u_xlat2.x = -abs(u_xlat2.x) * 2.0 + 3.0;
    u_xlat2.x = u_xlat2.x * u_xlat10.x;
    u_xlat10.x = u_xlat2.z * 1.5;
    u_xlat2.x = u_xlat10.x * u_xlat2.x;
    u_xlat0.xz = u_xlat0.xz * u_xlat2.xx;
    u_xlat0.xz = u_xlat0.xz * vec2(0.150000006, 0.150000006);
    u_xlat0.xz = u_xlat3.yz * u_xlat2.xx + u_xlat0.xz;
    u_xlat0.xz = u_xlat0.xz + u_xlat8.xz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(0.00199999986<u_xlat2.z);
#else
    u_xlatb2 = 0.00199999986<u_xlat2.z;
#endif
    u_xlat10.x = (-u_xlat2.w) * _LocalWindsMapCameraInfo.y + _LocalWindsMapCameraInfo.x;
    u_xlat0.xy = (bool(u_xlatb2)) ? u_xlat0.xz : u_xlat8.xz;
    u_xlat16.xy = vec2(_WorldOffsetRange.z + float(2.0), _WorldOffsetRange.w + float(2.0));
    u_xlat2.xz = u_xlat1.xz + (-_WorldOffsetRange.xy);
    u_xlat2.xz = u_xlat2.xz + vec2(1.0, 1.0);
    u_xlat16.xy = u_xlat2.xz / u_xlat16.xy;
    u_xlat16.x = textureLod(_Heightmap, u_xlat16.xy, 0.0).x;
    u_xlat24 = u_xlat16.x * _HeightScale + u_xlat1.y;
    u_xlat24 = (-u_xlat24) + u_xlat10.x;
    u_xlat24 = u_xlat24 * 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat24 = (-u_xlat24) + 1.0;
    u_xlat2.x = fract(u_xlat25);
    u_xlat25 = u_xlat25 + hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat10.xy = vec2(u_xlat25) * vec2(22.0, 33.0);
    u_xlat10.xy = fract(u_xlat10.xy);
    u_xlat10.xy = u_xlat10.xy + vec2(-0.5, -0.5);
    u_xlat3.xz = u_xlat10.xy * vec2(0.200000003, 0.200000003);
    u_xlat25 = u_xlat2.x + -0.5;
    u_xlat2.x = u_xlat25 * 0.333000004;
    u_xlat4.y = u_xlat25 * 0.333000004 + -1.0;
    u_xlat25 = in_TEXCOORD1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat25 = min(max(u_xlat25, 0.0), 1.0);
#else
    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
#endif
    u_xlat2.x = u_xlat2.x * u_xlat25;
    u_xlat24 = u_xlat24 * u_xlat2.x;
    u_xlat0.xy = vec2(u_xlat24) * u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(vec2(_VegetationMoveScale, _VegetationMoveScale));
    u_xlat24 = dot(_GlobalWind.xyz, _GlobalWind.xyz);
    u_xlat24 = max(u_xlat24, 0.00100000005);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat5 = vec4(u_xlat24) * _GlobalWind.xzxz;
    u_xlat10.xy = vec2(u_xlat5.z * _LargeWindParam.z, u_xlat5.w * _LargeWindParam.z);
    u_xlat21.xy = u_xlat1.xz / vec2(_NoiseScale);
    u_xlat5.xy = _LargeWindParam.xx * u_xlat5.xy + u_xlat21.xy;
    u_xlat5.xy = textureLod(_Noisemap, u_xlat5.xy, 0.0).xy;
    u_xlat5.xy = u_xlat5.xy + vec2(-0.5, -0.5);
    u_xlat5.xy = u_xlat5.xy * _LargeWindParam.yy + vec2(0.5, 0.5);
    u_xlat5.xy = u_xlat2.xx * u_xlat5.xy;
    u_xlat6.xz = u_xlat5.xy * u_xlat10.xy + u_xlat0.xy;
    u_xlat10.xy = u_xlat10.xy * u_xlat5.xy;
    u_xlat6.y = 0.0;
    u_xlat5.y = hlslcc_mtx4x4unity_MatrixV[0].x;
    u_xlat5.x = hlslcc_mtx4x4unity_MatrixV[2].x;
    u_xlat24 = dot(u_xlat5.xy, u_xlat5.xy);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat5.xy = vec2(u_xlat24) * u_xlat5.xy;
    u_xlat7.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;
    u_xlat7.y = hlslcc_mtx4x4unity_ObjectToWorld[2].x;
    u_xlat24 = dot(u_xlat7.xy, u_xlat7.xy);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat21.xy = vec2(u_xlat24) * u_xlat7.xy;
    u_xlat7.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat7.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat7.xyz;
    u_xlat7.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat7.xyz;
    u_xlat7.xyz = u_xlat7.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat7.xyz = (-u_xlat1.xyz) + u_xlat7.xyz;
    u_xlat24 = u_xlat21.y * u_xlat7.z;
    u_xlat24 = u_xlat7.x * u_xlat21.x + (-u_xlat24);
    u_xlat26 = dot(u_xlat7.zx, u_xlat21.xy);
    u_xlat21.xy = u_xlat5.xy * vec2(u_xlat26);
    u_xlat26 = u_xlat24 * u_xlat5.y + (-u_xlat21.x);
    u_xlat24 = u_xlat24 * u_xlat5.x + u_xlat21.y;
    u_xlat24 = u_xlat7.z + u_xlat24;
    u_xlat7.z = (-u_xlat24) * _Billboard + u_xlat7.z;
    u_xlat24 = u_xlat7.x + u_xlat26;
    u_xlat7.x = (-u_xlat24) * _Billboard + u_xlat7.x;
    u_xlat24 = u_xlat2.x * u_xlat7.y;
    u_xlat2.x = max(u_xlat2.x, 9.99999972e-10);
    u_xlat5.xyz = u_xlat7.xyz * vec3(0.100000001, 1.0, 0.100000001) + u_xlat6.xyz;
    u_xlat26 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat26 = max(u_xlat26, 0.00100000005);
    u_xlat26 = inversesqrt(u_xlat26);
    u_xlat5.xyz = vec3(u_xlat26) * u_xlat5.xyz;
    u_xlat26 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat26 = sqrt(u_xlat26);
    u_xlat6.xyz = u_xlat7.xyz * vec3(0.100000001, 1.0, 0.100000001);
    u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat26) + (-u_xlat6.xyz);
    u_xlat6.xyz = u_xlat1.xyz + u_xlat7.xyz;
    u_xlat6.w = u_xlat16.x * _HeightScale + u_xlat6.y;
    u_xlat1.xyz = u_xlat5.xyz + u_xlat6.xwz;
    u_xlat1.xyz = vec3(u_xlat24) * vec3(-0.5, 0.0, -0.5) + u_xlat1.xyz;
    u_xlat4.xz = u_xlat4.yy * (-u_xlat4.yy);
    u_xlat1.xyz = u_xlat4.xyz * u_xlat7.xyz + u_xlat1.xyz;
    u_xlat4.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat5 = u_xlat4.yyyy * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat5 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat4.xxxx + u_xlat5;
    u_xlat4 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat4.zzzz + u_xlat5;
    gl_Position = u_xlat4 + hlslcc_mtx4x4unity_MatrixVPZero[3];
    u_xlat3.y = 0.0;
    vs_TEXCOORD0.xyz = u_xlat3.xyz + vec3(-1.0, 0.0, -1.0);
    vs_TEXCOORD0.w = 0.0;
    u_xlat0.xy = u_xlat0.yx / u_xlat2.xx;
    u_xlat16.xy = u_xlat10.yx / u_xlat2.xx;
    u_xlat0.xy = u_xlat0.xy + u_xlat16.xy;
    u_xlat0.yz = u_xlat0.xy + vec2(-1.0, -1.0);
    u_xlat24 = dot(u_xlat0.yz, u_xlat0.yz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat0.x = 0.0;
    u_xlat0.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    u_xlat2.xyz = in_NORMAL0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_NORMAL0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_NORMAL0.zzz + u_xlat2.xyz;
    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat0.xyz * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat0.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat0.xyz * u_xlat2.xyz;
    u_xlat0.xyz = u_xlat2.zxy * u_xlat0.yzx + (-u_xlat3.xyz);
    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
    u_xlat24 = dot(u_xlat1.xyz, u_xlat0.xyz);
#ifdef UNITY_ADRENO_ES3
    { bool cond = 0.0<u_xlat24; u_xlati1 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati1 = int((0.0<u_xlat24) ? 0xFFFFFFFFu : uint(0u));
#endif
#ifdef UNITY_ADRENO_ES3
    { bool cond = u_xlat24<0.0; u_xlati24 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati24 = int((u_xlat24<0.0) ? 0xFFFFFFFFu : uint(0u));
#endif
    u_xlati24 = (-u_xlati1) + u_xlati24;
    u_xlat24 = float(u_xlati24);
    vs_TEXCOORD1.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    vs_TEXCOORD1.w = 0.0;
    u_xlat0.x = u_xlat25 / _RootColorScale;
    u_xlat0.x = u_xlat0.x + _RootColorOffset;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xxx * vec3(-0.501960814, 0.0, 0.0) + vec3(0.501960814, 0.0, 0.0);
    u_xlat24 = u_xlat25 + -0.600000024;
    vs_TEXCOORD3 = u_xlat25;
    u_xlat24 = max(u_xlat24, 0.0);
    u_xlat24 = _GrassTipLighting * u_xlat24 + 1.0;
    vs_TEXCOORD2.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    vs_TEXCOORD2.w = 0.0;
    vs_TEXCOORD4.xy = in_TEXCOORD2.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	float _GrassShininess;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	float _CutOff;
uniform 	vec4 _BurnedColor;
uniform lowp sampler2D _MainTex;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp float vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec4 u_xlat0;
lowp vec4 u_xlat10_0;
bool u_xlatb0;
vec3 u_xlat1;
mediump float u_xlat16_2;
float u_xlat9;
bool u_xlatb9;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD4.xy);
    u_xlat9 = u_xlat10_0.w + (-_CutOff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(u_xlat9<0.0);
#else
    u_xlatb9 = u_xlat9<0.0;
#endif
    if((int(u_xlatb9) * int(0xffffffffu))!=0){discard;}
    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
    SV_Target0.xyz = u_xlat1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0;
    u_xlat1.xyz = _BurnedColor.xyz * u_xlat10_0.xyz + (-u_xlat10_0.xyz);
    u_xlat0.xyz = vs_TEXCOORD2.www * u_xlat1.xyz + u_xlat10_0.xyz;
    u_xlat0.w = vs_TEXCOORD3;
    SV_Target1 = u_xlat0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_2 = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb0) ? u_xlat16_2 : 0.0399999991;
    u_xlat0.x = (-vs_TEXCOORD2.w) + 1.0;
    u_xlat0.x = u_xlat0.x * _GrassShininess;
    SV_Target2.w = u_xlat0.x;
    SV_Target2.xy = vec2(0.0399999991, 0.0399999991);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_HDR_ON" "INSTANCING_ON" "MHY_SHADER_MIDDLE" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	int unity_BaseInstanceID;
uniform 	float _NoiseScale;
uniform 	vec4 _WorldOffsetRange;
uniform 	float _HeightScale;
uniform 	float _Billboard;
uniform 	float _VegetationMoveScale;
uniform 	vec4 _LocalWindsMapSize;
uniform 	vec4 _LargeWindParam;
uniform 	vec4 _GlobalWind;
uniform 	vec4 _LocalWindsMapCameraInfo;
uniform 	float _GrassTipLighting;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BurnedColor;
uniform 	float _RootColorScale;
uniform 	float _RootColorOffset;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _Heightmap;
uniform lowp sampler2D _Noisemap;
uniform lowp sampler2D _LocalWindsMap;
in highp vec4 in_POSITION0;
in highp vec4 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec2 in_TEXCOORD2;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp float vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec3 u_xlat0;
int u_xlati0;
vec3 u_xlat1;
uvec3 u_xlatu1;
vec4 u_xlat2;
uvec3 u_xlatu2;
vec3 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
uvec2 u_xlatu5;
vec4 u_xlat6;
vec3 u_xlat7;
vec2 u_xlat8;
float u_xlat9;
int u_xlati9;
float u_xlat11;
uint u_xlatu11;
int u_xlati18;
float u_xlat20;
vec2 u_xlat23;
float u_xlat27;
bool u_xlatb27;
float u_xlat28;
uint u_xlatu28;
bool u_xlatb28;
float u_xlat29;
bool u_xlatb29;
float u_xlat30;
void main()
{
    u_xlat0.z = 0.0;
    u_xlati9 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati9 = u_xlati9 << 2;
    u_xlat1.xyz = in_TEXCOORD0.yyy * unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_TEXCOORD0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat2.xy = u_xlat1.xz + (-_LocalWindsMapSize.xy);
    u_xlat2.xy = vec2(u_xlat2.x / _LocalWindsMapSize.z, u_xlat2.y / _LocalWindsMapSize.w);
    u_xlat2.xy = u_xlat2.xy + vec2(0.5, 0.5);
    u_xlat2 = textureLod(_LocalWindsMap, u_xlat2.xy, 0.0);
    u_xlat27 = dot(u_xlat2.xy, u_xlat2.xy);
    u_xlat27 = sqrt(u_xlat27);
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(9.99999975e-05>=u_xlat27);
#else
    u_xlatb27 = 9.99999975e-05>=u_xlat27;
#endif
    u_xlat27 = u_xlatb27 ? 1.0 : float(0.0);
    u_xlat3.xy = (-u_xlat2.xy) + vec2(0.5, 0.5);
    u_xlat2.xy = vec2(u_xlat27) * u_xlat3.xy + u_xlat2.xy;
    u_xlat2.xy = u_xlat2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat27 = dot(u_xlat2.xy, u_xlat2.xy);
    u_xlat27 = max(u_xlat27, 0.00100000005);
    u_xlat3.x = inversesqrt(u_xlat27);
    u_xlat3.yz = u_xlat2.xy * u_xlat3.xx;
    u_xlat0.x = u_xlat3.z;
    u_xlat0.xz = (-u_xlat3.xy) * vec2(0.0, 1.0) + u_xlat0.xz;
    u_xlat27 = (-in_TEXCOORD1.x) + unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].x;
    u_xlat28 = u_xlat27 * 3.0;
    u_xlat28 = _Time.y * 3.0 + u_xlat28;
    u_xlat28 = u_xlat28 + 0.5;
    u_xlat28 = fract(u_xlat28);
    u_xlat28 = u_xlat28 * 2.0 + -1.0;
    u_xlat3.x = abs(u_xlat28) * abs(u_xlat28);
    u_xlat28 = -abs(u_xlat28) * 2.0 + 3.0;
    u_xlat28 = u_xlat28 * u_xlat3.x;
    u_xlat3.x = u_xlat2.z * 1.5;
    u_xlat28 = u_xlat28 * u_xlat3.x;
    u_xlat0.xz = u_xlat0.xz * vec2(u_xlat28);
    u_xlat0.xz = u_xlat0.xz * vec2(0.150000006, 0.150000006);
    u_xlat0.xz = u_xlat3.yz * vec2(u_xlat28) + u_xlat0.xz;
    u_xlat0.xz = u_xlat0.xz + u_xlat2.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlatb28 = !!(0.00199999986<u_xlat2.z);
#else
    u_xlatb28 = 0.00199999986<u_xlat2.z;
#endif
    u_xlat20 = (-u_xlat2.w) * _LocalWindsMapCameraInfo.y + _LocalWindsMapCameraInfo.x;
    u_xlat0.xz = (bool(u_xlatb28)) ? u_xlat0.xz : u_xlat2.xy;
    u_xlat2.xy = vec2(_WorldOffsetRange.z + float(2.0), _WorldOffsetRange.w + float(2.0));
    u_xlat3.xy = u_xlat1.xz + (-_WorldOffsetRange.xy);
    u_xlat3.xy = u_xlat3.xy + vec2(1.0, 1.0);
    u_xlat2.xy = u_xlat3.xy / u_xlat2.xy;
    u_xlat28 = textureLod(_Heightmap, u_xlat2.xy, 0.0).x;
    u_xlat2.x = u_xlat28 * _HeightScale + u_xlat1.y;
    u_xlat2.x = (-u_xlat2.x) + u_xlat20;
    u_xlat2.x = u_xlat2.x * 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat2.x = (-u_xlat2.x) + 1.0;
    u_xlat11 = float(floatBitsToUint(unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2]).w);
    u_xlat11 = u_xlat11 * 5.96046448e-08;
    u_xlatu11 = uint(u_xlat11);
    u_xlatu11 = u_xlatu11 & 3u;
    u_xlat11 = float(u_xlatu11);
    u_xlat20 = fract(u_xlat27);
    u_xlat27 = u_xlat27 + unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].y;
    u_xlat3.xy = vec2(u_xlat27) * vec2(22.0, 33.0);
    u_xlat3.xy = fract(u_xlat3.xy);
    u_xlat3.xy = u_xlat3.xy + vec2(-0.5, -0.5);
    u_xlat3.xz = u_xlat3.xy * vec2(0.200000003, 0.200000003);
    u_xlat27 = u_xlat11 + u_xlat20;
    u_xlat27 = u_xlat27 + -0.5;
    u_xlat11 = u_xlat27 * 0.333000004;
    u_xlat4.y = u_xlat27 * 0.333000004 + -1.0;
    u_xlat27 = in_TEXCOORD1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
    u_xlat11 = u_xlat11 * u_xlat27;
    u_xlat2.x = u_xlat11 * u_xlat2.x;
    u_xlat0.xz = u_xlat0.xz * u_xlat2.xx;
    u_xlat0.xz = u_xlat0.xz * vec2(vec2(_VegetationMoveScale, _VegetationMoveScale));
    u_xlat2.x = dot(_GlobalWind.xyz, _GlobalWind.xyz);
    u_xlat2.x = max(u_xlat2.x, 0.00100000005);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat5 = u_xlat2.xxxx * _GlobalWind.xzxz;
    u_xlat2.xz = vec2(u_xlat5.z * _LargeWindParam.z, u_xlat5.w * _LargeWindParam.z);
    u_xlat23.xy = u_xlat1.xz / vec2(_NoiseScale);
    u_xlat5.xy = _LargeWindParam.xx * u_xlat5.xy + u_xlat23.xy;
    u_xlat5.xy = textureLod(_Noisemap, u_xlat5.xy, 0.0).xy;
    u_xlat5.xy = u_xlat5.xy + vec2(-0.5, -0.5);
    u_xlat5.xy = u_xlat5.xy * _LargeWindParam.yy + vec2(0.5, 0.5);
    u_xlat5.xy = vec2(u_xlat11) * u_xlat5.xy;
    u_xlat6.xz = u_xlat5.xy * u_xlat2.xz + u_xlat0.xz;
    u_xlat2.xz = u_xlat2.xz * u_xlat5.xy;
    u_xlat6.y = 0.0;
    u_xlat5.y = hlslcc_mtx4x4unity_MatrixV[0].x;
    u_xlat5.x = hlslcc_mtx4x4unity_MatrixV[2].x;
    u_xlat29 = dot(u_xlat5.xy, u_xlat5.xy);
    u_xlat29 = inversesqrt(u_xlat29);
    u_xlat5.xy = vec2(u_xlat29) * u_xlat5.xy;
    u_xlat7.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat7.xyz = unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat7.xyz;
    u_xlat7.xyz = unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat7.xyz;
    u_xlat7.xyz = u_xlat7.xyz + unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat7.xyz = (-u_xlat1.xyz) + u_xlat7.xyz;
    u_xlat8.x = unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].x;
    u_xlat8.y = unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].x;
    u_xlat29 = dot(u_xlat8.xy, u_xlat8.xy);
    u_xlat29 = inversesqrt(u_xlat29);
    u_xlat23.xy = vec2(u_xlat29) * u_xlat8.xy;
    u_xlat29 = u_xlat23.y * u_xlat7.z;
    u_xlat29 = u_xlat7.x * u_xlat23.x + (-u_xlat29);
    u_xlat30 = dot(u_xlat7.zx, u_xlat23.xy);
    u_xlat23.xy = u_xlat5.xy * vec2(u_xlat30);
    u_xlat30 = u_xlat29 * u_xlat5.y + (-u_xlat23.x);
    u_xlat29 = u_xlat29 * u_xlat5.x + u_xlat23.y;
    u_xlat29 = u_xlat7.z + u_xlat29;
    u_xlat7.z = (-u_xlat29) * _Billboard + u_xlat7.z;
    u_xlat29 = u_xlat7.x + u_xlat30;
    u_xlat7.x = (-u_xlat29) * _Billboard + u_xlat7.x;
    u_xlat5.xyz = u_xlat7.xyz * vec3(0.100000001, 1.0, 0.100000001) + u_xlat6.xyz;
    u_xlat29 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat29 = max(u_xlat29, 0.00100000005);
    u_xlat29 = inversesqrt(u_xlat29);
    u_xlat5.xyz = vec3(u_xlat29) * u_xlat5.xyz;
    u_xlat29 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat29 = sqrt(u_xlat29);
    u_xlat6.xyz = u_xlat7.xyz * vec3(0.100000001, 1.0, 0.100000001);
    u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat29) + (-u_xlat6.xyz);
    u_xlat6.xyz = u_xlat1.xyz + u_xlat7.xyz;
    u_xlat6.w = u_xlat28 * _HeightScale + u_xlat6.y;
    u_xlat1.xyz = u_xlat5.xyz + u_xlat6.xwz;
    u_xlatu5.xy = uvec2(65280u, 255u) & floatBitsToUint(unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1]).ww;
    u_xlat5.xy = vec2(u_xlatu5.xy);
    u_xlat28 = u_xlat5.x * 0.00390625;
    u_xlat5.z = u_xlat5.y + -127.0;
    u_xlatu28 = uint(u_xlat28);
    u_xlat28 = float(u_xlatu28);
    u_xlat5.x = u_xlat28 + -127.0;
    u_xlat6.xy = u_xlat5.xz * vec2(0.00787401572, 0.00787401572);
    u_xlat6.xy = u_xlat6.xy * u_xlat6.xy;
    u_xlat28 = u_xlat6.y + u_xlat6.x;
    u_xlat28 = (-u_xlat28) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb29 = !!(0.0<u_xlat28);
#else
    u_xlatb29 = 0.0<u_xlat28;
#endif
    u_xlat28 = sqrt(u_xlat28);
    u_xlat5.y = u_xlatb29 ? u_xlat28 : float(0.0);
    u_xlat6.xyz = u_xlat5.xyz * u_xlat7.yyy;
    u_xlat6.xyz = vec3(u_xlat11) * u_xlat6.xyz;
    u_xlat28 = max(u_xlat11, 9.99999972e-10);
    u_xlat1.xyz = u_xlat6.xyz * vec3(0.00393700786, 0.0, 0.00393700786) + u_xlat1.xyz;
    u_xlat4.xz = u_xlat4.yy * (-u_xlat4.yy);
    u_xlat1.xyz = u_xlat4.xyz * u_xlat7.xyz + u_xlat1.xyz;
    u_xlat4.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat6 = u_xlat4.yyyy * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat6 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat4.xxxx + u_xlat6;
    u_xlat4 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat4.zzzz + u_xlat6;
    gl_Position = u_xlat4 + hlslcc_mtx4x4unity_MatrixVPZero[3];
    u_xlat3.y = 0.0;
    vs_TEXCOORD0.xyz = u_xlat5.xyz * vec3(0.00787401572, 1.0, 0.00787401572) + u_xlat3.xyz;
    vs_TEXCOORD0.w = 0.0;
    u_xlat0.xz = u_xlat0.zx / vec2(u_xlat28);
    u_xlat2.xy = u_xlat2.zx / vec2(u_xlat28);
    u_xlat2.yz = u_xlat0.xz + u_xlat2.xy;
    u_xlat2.x = 0.0;
    u_xlat2.xyz = u_xlat5.yzx * vec3(1.0, 0.00787401572, 0.00787401572) + u_xlat2.xyz;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat3.xyz = in_NORMAL0.yyy * unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_NORMAL0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_NORMAL0.zzz + u_xlat3.xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
    u_xlat3.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
    u_xlat2.xyz = u_xlat3.zxy * u_xlat2.yzx + (-u_xlat4.xyz);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
    { bool cond = 0.0<u_xlat0.x; u_xlati18 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati18 = int((0.0<u_xlat0.x) ? 0xFFFFFFFFu : uint(0u));
#endif
#ifdef UNITY_ADRENO_ES3
    { bool cond = u_xlat0.x<0.0; u_xlati0 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati0 = int((u_xlat0.x<0.0) ? 0xFFFFFFFFu : uint(0u));
#endif
    u_xlati0 = (-u_xlati18) + u_xlati0;
    u_xlat0.x = float(u_xlati0);
    vs_TEXCOORD1.xyz = u_xlat0.xxx * u_xlat2.xyz;
    vs_TEXCOORD1.w = 0.0;
    u_xlatu1.xyz = uvec3(16711680u, 65280u, 255u) & floatBitsToUint(unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2]).www;
    u_xlat1.xyz = vec3(u_xlatu1.xyz);
    u_xlatu2.xyz = uvec3(16711680u, 65280u, 255u) & floatBitsToUint(unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3]).www;
    u_xlat0.x = max(1.0, unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].w);
    u_xlat0.x = min(u_xlat0.x, 2.0);
    u_xlat0.x = u_xlat0.x + -1.0;
    u_xlat2.xyz = vec3(u_xlatu2.xyz);
    u_xlat2.xyz = u_xlat2.xyz * vec3(5.9838392e-08, 1.53186284e-05, 0.00392156886);
    u_xlat1.xyz = u_xlat1.xyz * vec3(5.9838392e-08, 1.53186284e-05, 0.00392156886) + (-u_xlat2.xyz);
    u_xlat9 = u_xlat27 / _RootColorScale;
    u_xlat9 = u_xlat9 + _RootColorOffset;
#ifdef UNITY_ADRENO_ES3
    u_xlat9 = min(max(u_xlat9, 0.0), 1.0);
#else
    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz + u_xlat2.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _BurnedColor.xyz;
    u_xlat1.xyz = u_xlat0.xxx * u_xlat2.xyz + u_xlat1.xyz;
    vs_TEXCOORD2.w = u_xlat0.x;
    u_xlat0.x = u_xlat27 + -0.600000024;
    vs_TEXCOORD3 = u_xlat27;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = _GrassTipLighting * u_xlat0.x + 1.0;
    vs_TEXCOORD2.xyz = u_xlat0.xxx * u_xlat1.xyz;
    vs_TEXCOORD4.xy = in_TEXCOORD2.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	float _GrassShininess;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	float _CutOff;
uniform 	vec4 _BurnedColor;
uniform lowp sampler2D _MainTex;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp float vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec4 u_xlat0;
lowp vec4 u_xlat10_0;
bool u_xlatb0;
vec3 u_xlat1;
mediump float u_xlat16_2;
float u_xlat9;
bool u_xlatb9;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD4.xy);
    u_xlat9 = u_xlat10_0.w + (-_CutOff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(u_xlat9<0.0);
#else
    u_xlatb9 = u_xlat9<0.0;
#endif
    if((int(u_xlatb9) * int(0xffffffffu))!=0){discard;}
    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
    SV_Target0.xyz = u_xlat1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0;
    u_xlat1.xyz = _BurnedColor.xyz * u_xlat10_0.xyz + (-u_xlat10_0.xyz);
    u_xlat0.xyz = vs_TEXCOORD2.www * u_xlat1.xyz + u_xlat10_0.xyz;
    u_xlat0.w = vs_TEXCOORD3;
    SV_Target1 = u_xlat0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_2 = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb0) ? u_xlat16_2 : 0.0399999991;
    u_xlat0.x = (-vs_TEXCOORD2.w) + 1.0;
    u_xlat0.x = u_xlat0.x * _GrassShininess;
    SV_Target2.w = u_xlat0.x;
    SV_Target2.xy = vec2(0.0399999991, 0.0399999991);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_HDR_ON" "MHY_SHADER_MIDDLE" "DITHER_FADE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	float _NoiseScale;
uniform 	vec4 _WorldOffsetRange;
uniform 	float _HeightScale;
uniform 	float _Billboard;
uniform 	float _VegetationMoveScale;
uniform 	vec4 _LocalWindsMapSize;
uniform 	vec4 _LargeWindParam;
uniform 	vec4 _GlobalWind;
uniform 	vec4 _LocalWindsMapCameraInfo;
uniform 	float _GrassTipLighting;
uniform 	vec4 _MainTex_ST;
uniform 	float _RootColorScale;
uniform 	float _RootColorOffset;
uniform highp sampler2D _Heightmap;
uniform lowp sampler2D _Noisemap;
uniform lowp sampler2D _LocalWindsMap;
in highp vec4 in_POSITION0;
in highp vec4 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec2 in_TEXCOORD2;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp float vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec3 u_xlat0;
vec3 u_xlat1;
int u_xlati1;
vec4 u_xlat2;
bool u_xlatb2;
vec3 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
vec4 u_xlat6;
vec3 u_xlat7;
vec3 u_xlat8;
bool u_xlatb8;
vec2 u_xlat10;
vec2 u_xlat16;
vec2 u_xlat21;
float u_xlat24;
int u_xlati24;
float u_xlat25;
float u_xlat26;
void main()
{
    u_xlat0.z = 0.0;
    u_xlat1.xyz = in_TEXCOORD0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[2].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TEXCOORD0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat8.xz = u_xlat1.xz + (-_LocalWindsMapSize.xy);
    u_xlat8.xz = vec2(u_xlat8.x / _LocalWindsMapSize.z, u_xlat8.z / _LocalWindsMapSize.w);
    u_xlat8.xz = u_xlat8.xz + vec2(0.5, 0.5);
    u_xlat2 = textureLod(_LocalWindsMap, u_xlat8.xz, 0.0);
    u_xlat8.x = dot(u_xlat2.xy, u_xlat2.xy);
    u_xlat8.x = sqrt(u_xlat8.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(9.99999975e-05>=u_xlat8.x);
#else
    u_xlatb8 = 9.99999975e-05>=u_xlat8.x;
#endif
    u_xlat8.x = u_xlatb8 ? 1.0 : float(0.0);
    u_xlat3.xy = (-u_xlat2.xy) + vec2(0.5, 0.5);
    u_xlat8.xz = u_xlat8.xx * u_xlat3.xy + u_xlat2.xy;
    u_xlat8.xz = u_xlat8.xz * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat25 = dot(u_xlat8.xz, u_xlat8.xz);
    u_xlat25 = max(u_xlat25, 0.00100000005);
    u_xlat3.x = inversesqrt(u_xlat25);
    u_xlat3.yz = u_xlat8.xz * u_xlat3.xx;
    u_xlat0.x = u_xlat3.z;
    u_xlat0.xz = (-u_xlat3.xy) * vec2(0.0, 1.0) + u_xlat0.xz;
    u_xlat25 = (-in_TEXCOORD1.x) + hlslcc_mtx4x4unity_ObjectToWorld[1].x;
    u_xlat2.x = u_xlat25 * 3.0;
    u_xlat2.x = _Time.y * 3.0 + u_xlat2.x;
    u_xlat2.x = u_xlat2.x + 0.5;
    u_xlat2.x = fract(u_xlat2.x);
    u_xlat2.x = u_xlat2.x * 2.0 + -1.0;
    u_xlat10.x = abs(u_xlat2.x) * abs(u_xlat2.x);
    u_xlat2.x = -abs(u_xlat2.x) * 2.0 + 3.0;
    u_xlat2.x = u_xlat2.x * u_xlat10.x;
    u_xlat10.x = u_xlat2.z * 1.5;
    u_xlat2.x = u_xlat10.x * u_xlat2.x;
    u_xlat0.xz = u_xlat0.xz * u_xlat2.xx;
    u_xlat0.xz = u_xlat0.xz * vec2(0.150000006, 0.150000006);
    u_xlat0.xz = u_xlat3.yz * u_xlat2.xx + u_xlat0.xz;
    u_xlat0.xz = u_xlat0.xz + u_xlat8.xz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(0.00199999986<u_xlat2.z);
#else
    u_xlatb2 = 0.00199999986<u_xlat2.z;
#endif
    u_xlat10.x = (-u_xlat2.w) * _LocalWindsMapCameraInfo.y + _LocalWindsMapCameraInfo.x;
    u_xlat0.xy = (bool(u_xlatb2)) ? u_xlat0.xz : u_xlat8.xz;
    u_xlat16.xy = vec2(_WorldOffsetRange.z + float(2.0), _WorldOffsetRange.w + float(2.0));
    u_xlat2.xz = u_xlat1.xz + (-_WorldOffsetRange.xy);
    u_xlat2.xz = u_xlat2.xz + vec2(1.0, 1.0);
    u_xlat16.xy = u_xlat2.xz / u_xlat16.xy;
    u_xlat16.x = textureLod(_Heightmap, u_xlat16.xy, 0.0).x;
    u_xlat24 = u_xlat16.x * _HeightScale + u_xlat1.y;
    u_xlat24 = (-u_xlat24) + u_xlat10.x;
    u_xlat24 = u_xlat24 * 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat24 = (-u_xlat24) + 1.0;
    u_xlat2.x = fract(u_xlat25);
    u_xlat25 = u_xlat25 + hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat10.xy = vec2(u_xlat25) * vec2(22.0, 33.0);
    u_xlat10.xy = fract(u_xlat10.xy);
    u_xlat10.xy = u_xlat10.xy + vec2(-0.5, -0.5);
    u_xlat3.xz = u_xlat10.xy * vec2(0.200000003, 0.200000003);
    u_xlat25 = u_xlat2.x + -0.5;
    u_xlat2.x = u_xlat25 * 0.333000004;
    u_xlat4.y = u_xlat25 * 0.333000004 + -1.0;
    u_xlat25 = in_TEXCOORD1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat25 = min(max(u_xlat25, 0.0), 1.0);
#else
    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
#endif
    u_xlat2.x = u_xlat2.x * u_xlat25;
    u_xlat24 = u_xlat24 * u_xlat2.x;
    u_xlat0.xy = vec2(u_xlat24) * u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(vec2(_VegetationMoveScale, _VegetationMoveScale));
    u_xlat24 = dot(_GlobalWind.xyz, _GlobalWind.xyz);
    u_xlat24 = max(u_xlat24, 0.00100000005);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat5 = vec4(u_xlat24) * _GlobalWind.xzxz;
    u_xlat10.xy = vec2(u_xlat5.z * _LargeWindParam.z, u_xlat5.w * _LargeWindParam.z);
    u_xlat21.xy = u_xlat1.xz / vec2(_NoiseScale);
    u_xlat5.xy = _LargeWindParam.xx * u_xlat5.xy + u_xlat21.xy;
    u_xlat5.xy = textureLod(_Noisemap, u_xlat5.xy, 0.0).xy;
    u_xlat5.xy = u_xlat5.xy + vec2(-0.5, -0.5);
    u_xlat5.xy = u_xlat5.xy * _LargeWindParam.yy + vec2(0.5, 0.5);
    u_xlat5.xy = u_xlat2.xx * u_xlat5.xy;
    u_xlat6.xz = u_xlat5.xy * u_xlat10.xy + u_xlat0.xy;
    u_xlat10.xy = u_xlat10.xy * u_xlat5.xy;
    u_xlat6.y = 0.0;
    u_xlat5.y = hlslcc_mtx4x4unity_MatrixV[0].x;
    u_xlat5.x = hlslcc_mtx4x4unity_MatrixV[2].x;
    u_xlat24 = dot(u_xlat5.xy, u_xlat5.xy);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat5.xy = vec2(u_xlat24) * u_xlat5.xy;
    u_xlat7.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;
    u_xlat7.y = hlslcc_mtx4x4unity_ObjectToWorld[2].x;
    u_xlat24 = dot(u_xlat7.xy, u_xlat7.xy);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat21.xy = vec2(u_xlat24) * u_xlat7.xy;
    u_xlat7.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat7.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat7.xyz;
    u_xlat7.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat7.xyz;
    u_xlat7.xyz = u_xlat7.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat7.xyz = (-u_xlat1.xyz) + u_xlat7.xyz;
    u_xlat24 = u_xlat21.y * u_xlat7.z;
    u_xlat24 = u_xlat7.x * u_xlat21.x + (-u_xlat24);
    u_xlat26 = dot(u_xlat7.zx, u_xlat21.xy);
    u_xlat21.xy = u_xlat5.xy * vec2(u_xlat26);
    u_xlat26 = u_xlat24 * u_xlat5.y + (-u_xlat21.x);
    u_xlat24 = u_xlat24 * u_xlat5.x + u_xlat21.y;
    u_xlat24 = u_xlat7.z + u_xlat24;
    u_xlat7.z = (-u_xlat24) * _Billboard + u_xlat7.z;
    u_xlat24 = u_xlat7.x + u_xlat26;
    u_xlat7.x = (-u_xlat24) * _Billboard + u_xlat7.x;
    u_xlat24 = u_xlat2.x * u_xlat7.y;
    u_xlat2.x = max(u_xlat2.x, 9.99999972e-10);
    u_xlat5.xyz = u_xlat7.xyz * vec3(0.100000001, 1.0, 0.100000001) + u_xlat6.xyz;
    u_xlat26 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat26 = max(u_xlat26, 0.00100000005);
    u_xlat26 = inversesqrt(u_xlat26);
    u_xlat5.xyz = vec3(u_xlat26) * u_xlat5.xyz;
    u_xlat26 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat26 = sqrt(u_xlat26);
    u_xlat6.xyz = u_xlat7.xyz * vec3(0.100000001, 1.0, 0.100000001);
    u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat26) + (-u_xlat6.xyz);
    u_xlat6.xyz = u_xlat1.xyz + u_xlat7.xyz;
    u_xlat6.w = u_xlat16.x * _HeightScale + u_xlat6.y;
    u_xlat1.xyz = u_xlat5.xyz + u_xlat6.xwz;
    u_xlat1.xyz = vec3(u_xlat24) * vec3(-0.5, 0.0, -0.5) + u_xlat1.xyz;
    u_xlat4.xz = u_xlat4.yy * (-u_xlat4.yy);
    u_xlat1.xyz = u_xlat4.xyz * u_xlat7.xyz + u_xlat1.xyz;
    u_xlat4.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat5 = u_xlat4.yyyy * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat5 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat4.xxxx + u_xlat5;
    u_xlat4 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat4.zzzz + u_xlat5;
    gl_Position = u_xlat4 + hlslcc_mtx4x4unity_MatrixVPZero[3];
    u_xlat3.y = 0.0;
    vs_TEXCOORD0.xyz = u_xlat3.xyz + vec3(-1.0, 0.0, -1.0);
    vs_TEXCOORD0.w = 0.0;
    u_xlat0.xy = u_xlat0.yx / u_xlat2.xx;
    u_xlat16.xy = u_xlat10.yx / u_xlat2.xx;
    u_xlat0.xy = u_xlat0.xy + u_xlat16.xy;
    u_xlat0.yz = u_xlat0.xy + vec2(-1.0, -1.0);
    u_xlat24 = dot(u_xlat0.yz, u_xlat0.yz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat0.x = 0.0;
    u_xlat0.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    u_xlat2.xyz = in_NORMAL0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_NORMAL0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_NORMAL0.zzz + u_xlat2.xyz;
    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat0.xyz * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat0.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat0.xyz * u_xlat2.xyz;
    u_xlat0.xyz = u_xlat2.zxy * u_xlat0.yzx + (-u_xlat3.xyz);
    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
    u_xlat24 = dot(u_xlat1.xyz, u_xlat0.xyz);
#ifdef UNITY_ADRENO_ES3
    { bool cond = 0.0<u_xlat24; u_xlati1 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati1 = int((0.0<u_xlat24) ? 0xFFFFFFFFu : uint(0u));
#endif
#ifdef UNITY_ADRENO_ES3
    { bool cond = u_xlat24<0.0; u_xlati24 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati24 = int((u_xlat24<0.0) ? 0xFFFFFFFFu : uint(0u));
#endif
    u_xlati24 = (-u_xlati1) + u_xlati24;
    u_xlat24 = float(u_xlati24);
    vs_TEXCOORD1.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    vs_TEXCOORD1.w = 0.0;
    u_xlat0.x = u_xlat25 / _RootColorScale;
    u_xlat0.x = u_xlat0.x + _RootColorOffset;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xxx * vec3(-0.501960814, 0.0, 0.0) + vec3(0.501960814, 0.0, 0.0);
    u_xlat24 = u_xlat25 + -0.600000024;
    vs_TEXCOORD3 = u_xlat25;
    u_xlat24 = max(u_xlat24, 0.0);
    u_xlat24 = _GrassTipLighting * u_xlat24 + 1.0;
    vs_TEXCOORD2.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    vs_TEXCOORD2.w = 0.0;
    vs_TEXCOORD4.xy = in_TEXCOORD2.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	float _GrassShininess;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	float _CutOff;
uniform 	vec4 _BurnedColor;
uniform lowp sampler2D _MainTex;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp float vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec4 u_xlat0;
lowp vec4 u_xlat10_0;
bool u_xlatb0;
vec3 u_xlat1;
mediump float u_xlat16_2;
float u_xlat9;
bool u_xlatb9;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD4.xy);
    u_xlat9 = u_xlat10_0.w + (-_CutOff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(u_xlat9<0.0);
#else
    u_xlatb9 = u_xlat9<0.0;
#endif
    if((int(u_xlatb9) * int(0xffffffffu))!=0){discard;}
    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
    SV_Target0.xyz = u_xlat1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0;
    u_xlat1.xyz = _BurnedColor.xyz * u_xlat10_0.xyz + (-u_xlat10_0.xyz);
    u_xlat0.xyz = vs_TEXCOORD2.www * u_xlat1.xyz + u_xlat10_0.xyz;
    u_xlat0.w = vs_TEXCOORD3;
    SV_Target1 = u_xlat0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_2 = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb0) ? u_xlat16_2 : 0.0399999991;
    u_xlat0.x = (-vs_TEXCOORD2.w) + 1.0;
    u_xlat0.x = u_xlat0.x * _GrassShininess;
    SV_Target2.w = u_xlat0.x;
    SV_Target2.xy = vec2(0.0399999991, 0.0399999991);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_HDR_ON" "INSTANCING_ON" "MHY_SHADER_MIDDLE" "DITHER_FADE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	int unity_BaseInstanceID;
uniform 	float _NoiseScale;
uniform 	vec4 _WorldOffsetRange;
uniform 	float _HeightScale;
uniform 	float _Billboard;
uniform 	float _VegetationMoveScale;
uniform 	vec4 _LocalWindsMapSize;
uniform 	vec4 _LargeWindParam;
uniform 	vec4 _GlobalWind;
uniform 	vec4 _LocalWindsMapCameraInfo;
uniform 	float _GrassTipLighting;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BurnedColor;
uniform 	float _RootColorScale;
uniform 	float _RootColorOffset;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _Heightmap;
uniform lowp sampler2D _Noisemap;
uniform lowp sampler2D _LocalWindsMap;
in highp vec4 in_POSITION0;
in highp vec4 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec2 in_TEXCOORD2;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp float vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec3 u_xlat0;
int u_xlati0;
vec3 u_xlat1;
uvec3 u_xlatu1;
vec4 u_xlat2;
uvec3 u_xlatu2;
vec3 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
uvec2 u_xlatu5;
vec4 u_xlat6;
vec3 u_xlat7;
vec2 u_xlat8;
float u_xlat9;
int u_xlati9;
float u_xlat11;
uint u_xlatu11;
int u_xlati18;
float u_xlat20;
vec2 u_xlat23;
float u_xlat27;
bool u_xlatb27;
float u_xlat28;
uint u_xlatu28;
bool u_xlatb28;
float u_xlat29;
bool u_xlatb29;
float u_xlat30;
void main()
{
    u_xlat0.z = 0.0;
    u_xlati9 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati9 = u_xlati9 << 2;
    u_xlat1.xyz = in_TEXCOORD0.yyy * unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_TEXCOORD0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat2.xy = u_xlat1.xz + (-_LocalWindsMapSize.xy);
    u_xlat2.xy = vec2(u_xlat2.x / _LocalWindsMapSize.z, u_xlat2.y / _LocalWindsMapSize.w);
    u_xlat2.xy = u_xlat2.xy + vec2(0.5, 0.5);
    u_xlat2 = textureLod(_LocalWindsMap, u_xlat2.xy, 0.0);
    u_xlat27 = dot(u_xlat2.xy, u_xlat2.xy);
    u_xlat27 = sqrt(u_xlat27);
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(9.99999975e-05>=u_xlat27);
#else
    u_xlatb27 = 9.99999975e-05>=u_xlat27;
#endif
    u_xlat27 = u_xlatb27 ? 1.0 : float(0.0);
    u_xlat3.xy = (-u_xlat2.xy) + vec2(0.5, 0.5);
    u_xlat2.xy = vec2(u_xlat27) * u_xlat3.xy + u_xlat2.xy;
    u_xlat2.xy = u_xlat2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat27 = dot(u_xlat2.xy, u_xlat2.xy);
    u_xlat27 = max(u_xlat27, 0.00100000005);
    u_xlat3.x = inversesqrt(u_xlat27);
    u_xlat3.yz = u_xlat2.xy * u_xlat3.xx;
    u_xlat0.x = u_xlat3.z;
    u_xlat0.xz = (-u_xlat3.xy) * vec2(0.0, 1.0) + u_xlat0.xz;
    u_xlat27 = (-in_TEXCOORD1.x) + unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].x;
    u_xlat28 = u_xlat27 * 3.0;
    u_xlat28 = _Time.y * 3.0 + u_xlat28;
    u_xlat28 = u_xlat28 + 0.5;
    u_xlat28 = fract(u_xlat28);
    u_xlat28 = u_xlat28 * 2.0 + -1.0;
    u_xlat3.x = abs(u_xlat28) * abs(u_xlat28);
    u_xlat28 = -abs(u_xlat28) * 2.0 + 3.0;
    u_xlat28 = u_xlat28 * u_xlat3.x;
    u_xlat3.x = u_xlat2.z * 1.5;
    u_xlat28 = u_xlat28 * u_xlat3.x;
    u_xlat0.xz = u_xlat0.xz * vec2(u_xlat28);
    u_xlat0.xz = u_xlat0.xz * vec2(0.150000006, 0.150000006);
    u_xlat0.xz = u_xlat3.yz * vec2(u_xlat28) + u_xlat0.xz;
    u_xlat0.xz = u_xlat0.xz + u_xlat2.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlatb28 = !!(0.00199999986<u_xlat2.z);
#else
    u_xlatb28 = 0.00199999986<u_xlat2.z;
#endif
    u_xlat20 = (-u_xlat2.w) * _LocalWindsMapCameraInfo.y + _LocalWindsMapCameraInfo.x;
    u_xlat0.xz = (bool(u_xlatb28)) ? u_xlat0.xz : u_xlat2.xy;
    u_xlat2.xy = vec2(_WorldOffsetRange.z + float(2.0), _WorldOffsetRange.w + float(2.0));
    u_xlat3.xy = u_xlat1.xz + (-_WorldOffsetRange.xy);
    u_xlat3.xy = u_xlat3.xy + vec2(1.0, 1.0);
    u_xlat2.xy = u_xlat3.xy / u_xlat2.xy;
    u_xlat28 = textureLod(_Heightmap, u_xlat2.xy, 0.0).x;
    u_xlat2.x = u_xlat28 * _HeightScale + u_xlat1.y;
    u_xlat2.x = (-u_xlat2.x) + u_xlat20;
    u_xlat2.x = u_xlat2.x * 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat2.x = (-u_xlat2.x) + 1.0;
    u_xlat11 = float(floatBitsToUint(unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2]).w);
    u_xlat11 = u_xlat11 * 5.96046448e-08;
    u_xlatu11 = uint(u_xlat11);
    u_xlatu11 = u_xlatu11 & 3u;
    u_xlat11 = float(u_xlatu11);
    u_xlat20 = fract(u_xlat27);
    u_xlat27 = u_xlat27 + unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].y;
    u_xlat3.xy = vec2(u_xlat27) * vec2(22.0, 33.0);
    u_xlat3.xy = fract(u_xlat3.xy);
    u_xlat3.xy = u_xlat3.xy + vec2(-0.5, -0.5);
    u_xlat3.xz = u_xlat3.xy * vec2(0.200000003, 0.200000003);
    u_xlat27 = u_xlat11 + u_xlat20;
    u_xlat27 = u_xlat27 + -0.5;
    u_xlat11 = u_xlat27 * 0.333000004;
    u_xlat4.y = u_xlat27 * 0.333000004 + -1.0;
    u_xlat27 = in_TEXCOORD1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
    u_xlat11 = u_xlat11 * u_xlat27;
    u_xlat2.x = u_xlat11 * u_xlat2.x;
    u_xlat0.xz = u_xlat0.xz * u_xlat2.xx;
    u_xlat0.xz = u_xlat0.xz * vec2(vec2(_VegetationMoveScale, _VegetationMoveScale));
    u_xlat2.x = dot(_GlobalWind.xyz, _GlobalWind.xyz);
    u_xlat2.x = max(u_xlat2.x, 0.00100000005);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat5 = u_xlat2.xxxx * _GlobalWind.xzxz;
    u_xlat2.xz = vec2(u_xlat5.z * _LargeWindParam.z, u_xlat5.w * _LargeWindParam.z);
    u_xlat23.xy = u_xlat1.xz / vec2(_NoiseScale);
    u_xlat5.xy = _LargeWindParam.xx * u_xlat5.xy + u_xlat23.xy;
    u_xlat5.xy = textureLod(_Noisemap, u_xlat5.xy, 0.0).xy;
    u_xlat5.xy = u_xlat5.xy + vec2(-0.5, -0.5);
    u_xlat5.xy = u_xlat5.xy * _LargeWindParam.yy + vec2(0.5, 0.5);
    u_xlat5.xy = vec2(u_xlat11) * u_xlat5.xy;
    u_xlat6.xz = u_xlat5.xy * u_xlat2.xz + u_xlat0.xz;
    u_xlat2.xz = u_xlat2.xz * u_xlat5.xy;
    u_xlat6.y = 0.0;
    u_xlat5.y = hlslcc_mtx4x4unity_MatrixV[0].x;
    u_xlat5.x = hlslcc_mtx4x4unity_MatrixV[2].x;
    u_xlat29 = dot(u_xlat5.xy, u_xlat5.xy);
    u_xlat29 = inversesqrt(u_xlat29);
    u_xlat5.xy = vec2(u_xlat29) * u_xlat5.xy;
    u_xlat7.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat7.xyz = unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat7.xyz;
    u_xlat7.xyz = unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat7.xyz;
    u_xlat7.xyz = u_xlat7.xyz + unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat7.xyz = (-u_xlat1.xyz) + u_xlat7.xyz;
    u_xlat8.x = unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].x;
    u_xlat8.y = unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].x;
    u_xlat29 = dot(u_xlat8.xy, u_xlat8.xy);
    u_xlat29 = inversesqrt(u_xlat29);
    u_xlat23.xy = vec2(u_xlat29) * u_xlat8.xy;
    u_xlat29 = u_xlat23.y * u_xlat7.z;
    u_xlat29 = u_xlat7.x * u_xlat23.x + (-u_xlat29);
    u_xlat30 = dot(u_xlat7.zx, u_xlat23.xy);
    u_xlat23.xy = u_xlat5.xy * vec2(u_xlat30);
    u_xlat30 = u_xlat29 * u_xlat5.y + (-u_xlat23.x);
    u_xlat29 = u_xlat29 * u_xlat5.x + u_xlat23.y;
    u_xlat29 = u_xlat7.z + u_xlat29;
    u_xlat7.z = (-u_xlat29) * _Billboard + u_xlat7.z;
    u_xlat29 = u_xlat7.x + u_xlat30;
    u_xlat7.x = (-u_xlat29) * _Billboard + u_xlat7.x;
    u_xlat5.xyz = u_xlat7.xyz * vec3(0.100000001, 1.0, 0.100000001) + u_xlat6.xyz;
    u_xlat29 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat29 = max(u_xlat29, 0.00100000005);
    u_xlat29 = inversesqrt(u_xlat29);
    u_xlat5.xyz = vec3(u_xlat29) * u_xlat5.xyz;
    u_xlat29 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat29 = sqrt(u_xlat29);
    u_xlat6.xyz = u_xlat7.xyz * vec3(0.100000001, 1.0, 0.100000001);
    u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat29) + (-u_xlat6.xyz);
    u_xlat6.xyz = u_xlat1.xyz + u_xlat7.xyz;
    u_xlat6.w = u_xlat28 * _HeightScale + u_xlat6.y;
    u_xlat1.xyz = u_xlat5.xyz + u_xlat6.xwz;
    u_xlatu5.xy = uvec2(65280u, 255u) & floatBitsToUint(unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1]).ww;
    u_xlat5.xy = vec2(u_xlatu5.xy);
    u_xlat28 = u_xlat5.x * 0.00390625;
    u_xlat5.z = u_xlat5.y + -127.0;
    u_xlatu28 = uint(u_xlat28);
    u_xlat28 = float(u_xlatu28);
    u_xlat5.x = u_xlat28 + -127.0;
    u_xlat6.xy = u_xlat5.xz * vec2(0.00787401572, 0.00787401572);
    u_xlat6.xy = u_xlat6.xy * u_xlat6.xy;
    u_xlat28 = u_xlat6.y + u_xlat6.x;
    u_xlat28 = (-u_xlat28) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb29 = !!(0.0<u_xlat28);
#else
    u_xlatb29 = 0.0<u_xlat28;
#endif
    u_xlat28 = sqrt(u_xlat28);
    u_xlat5.y = u_xlatb29 ? u_xlat28 : float(0.0);
    u_xlat6.xyz = u_xlat5.xyz * u_xlat7.yyy;
    u_xlat6.xyz = vec3(u_xlat11) * u_xlat6.xyz;
    u_xlat28 = max(u_xlat11, 9.99999972e-10);
    u_xlat1.xyz = u_xlat6.xyz * vec3(0.00393700786, 0.0, 0.00393700786) + u_xlat1.xyz;
    u_xlat4.xz = u_xlat4.yy * (-u_xlat4.yy);
    u_xlat1.xyz = u_xlat4.xyz * u_xlat7.xyz + u_xlat1.xyz;
    u_xlat4.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat6 = u_xlat4.yyyy * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat6 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat4.xxxx + u_xlat6;
    u_xlat4 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat4.zzzz + u_xlat6;
    gl_Position = u_xlat4 + hlslcc_mtx4x4unity_MatrixVPZero[3];
    u_xlat3.y = 0.0;
    vs_TEXCOORD0.xyz = u_xlat5.xyz * vec3(0.00787401572, 1.0, 0.00787401572) + u_xlat3.xyz;
    vs_TEXCOORD0.w = 0.0;
    u_xlat0.xz = u_xlat0.zx / vec2(u_xlat28);
    u_xlat2.xy = u_xlat2.zx / vec2(u_xlat28);
    u_xlat2.yz = u_xlat0.xz + u_xlat2.xy;
    u_xlat2.x = 0.0;
    u_xlat2.xyz = u_xlat5.yzx * vec3(1.0, 0.00787401572, 0.00787401572) + u_xlat2.xyz;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat3.xyz = in_NORMAL0.yyy * unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_NORMAL0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_NORMAL0.zzz + u_xlat3.xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
    u_xlat3.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
    u_xlat2.xyz = u_xlat3.zxy * u_xlat2.yzx + (-u_xlat4.xyz);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
    { bool cond = 0.0<u_xlat0.x; u_xlati18 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati18 = int((0.0<u_xlat0.x) ? 0xFFFFFFFFu : uint(0u));
#endif
#ifdef UNITY_ADRENO_ES3
    { bool cond = u_xlat0.x<0.0; u_xlati0 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati0 = int((u_xlat0.x<0.0) ? 0xFFFFFFFFu : uint(0u));
#endif
    u_xlati0 = (-u_xlati18) + u_xlati0;
    u_xlat0.x = float(u_xlati0);
    vs_TEXCOORD1.xyz = u_xlat0.xxx * u_xlat2.xyz;
    vs_TEXCOORD1.w = 0.0;
    u_xlatu1.xyz = uvec3(16711680u, 65280u, 255u) & floatBitsToUint(unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2]).www;
    u_xlat1.xyz = vec3(u_xlatu1.xyz);
    u_xlatu2.xyz = uvec3(16711680u, 65280u, 255u) & floatBitsToUint(unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3]).www;
    u_xlat0.x = max(1.0, unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].w);
    u_xlat0.x = min(u_xlat0.x, 2.0);
    u_xlat0.x = u_xlat0.x + -1.0;
    u_xlat2.xyz = vec3(u_xlatu2.xyz);
    u_xlat2.xyz = u_xlat2.xyz * vec3(5.9838392e-08, 1.53186284e-05, 0.00392156886);
    u_xlat1.xyz = u_xlat1.xyz * vec3(5.9838392e-08, 1.53186284e-05, 0.00392156886) + (-u_xlat2.xyz);
    u_xlat9 = u_xlat27 / _RootColorScale;
    u_xlat9 = u_xlat9 + _RootColorOffset;
#ifdef UNITY_ADRENO_ES3
    u_xlat9 = min(max(u_xlat9, 0.0), 1.0);
#else
    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz + u_xlat2.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _BurnedColor.xyz;
    u_xlat1.xyz = u_xlat0.xxx * u_xlat2.xyz + u_xlat1.xyz;
    vs_TEXCOORD2.w = u_xlat0.x;
    u_xlat0.x = u_xlat27 + -0.600000024;
    vs_TEXCOORD3 = u_xlat27;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = _GrassTipLighting * u_xlat0.x + 1.0;
    vs_TEXCOORD2.xyz = u_xlat0.xxx * u_xlat1.xyz;
    vs_TEXCOORD4.xy = in_TEXCOORD2.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	float _GrassShininess;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	float _CutOff;
uniform 	vec4 _BurnedColor;
uniform lowp sampler2D _MainTex;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp float vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec4 u_xlat0;
lowp vec4 u_xlat10_0;
bool u_xlatb0;
vec3 u_xlat1;
mediump float u_xlat16_2;
float u_xlat9;
bool u_xlatb9;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD4.xy);
    u_xlat9 = u_xlat10_0.w + (-_CutOff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(u_xlat9<0.0);
#else
    u_xlatb9 = u_xlat9<0.0;
#endif
    if((int(u_xlatb9) * int(0xffffffffu))!=0){discard;}
    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
    SV_Target0.xyz = u_xlat1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0;
    u_xlat1.xyz = _BurnedColor.xyz * u_xlat10_0.xyz + (-u_xlat10_0.xyz);
    u_xlat0.xyz = vs_TEXCOORD2.www * u_xlat1.xyz + u_xlat10_0.xyz;
    u_xlat0.w = vs_TEXCOORD3;
    SV_Target1 = u_xlat0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_2 = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb0) ? u_xlat16_2 : 0.0399999991;
    u_xlat0.x = (-vs_TEXCOORD2.w) + 1.0;
    u_xlat0.x = u_xlat0.x * _GrassShininess;
    SV_Target2.w = u_xlat0.x;
    SV_Target2.xy = vec2(0.0399999991, 0.0399999991);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_HDR_ON" "MHY_SHADER_MIDDLE" "SOFT_SAMPLE_HEIGHT_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	float _NoiseScale;
uniform 	vec4 _WorldOffsetRange;
uniform 	float _HeightScale;
uniform 	float _Billboard;
uniform 	float _VegetationMoveScale;
uniform 	vec4 _LocalWindsMapSize;
uniform 	vec4 _LargeWindParam;
uniform 	vec4 _GlobalWind;
uniform 	vec4 _LocalWindsMapCameraInfo;
uniform 	float _GrassTipLighting;
uniform 	vec4 _MainTex_ST;
uniform 	float _RootColorScale;
uniform 	float _RootColorOffset;
uniform highp sampler2D _Heightmap;
uniform lowp sampler2D _Noisemap;
uniform lowp sampler2D _LocalWindsMap;
in highp vec4 in_POSITION0;
in highp vec4 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec2 in_TEXCOORD2;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp float vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec3 u_xlat0;
vec3 u_xlat1;
int u_xlati1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
vec4 u_xlat6;
vec3 u_xlat7;
vec3 u_xlat8;
bool u_xlatb8;
vec2 u_xlat10;
vec2 u_xlat16;
float u_xlat18;
vec2 u_xlat21;
float u_xlat24;
int u_xlati24;
float u_xlat25;
float u_xlat26;
void main()
{
    u_xlat0.z = 0.0;
    u_xlat1.xyz = in_TEXCOORD0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[2].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TEXCOORD0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat8.xz = u_xlat1.xz + (-_LocalWindsMapSize.xy);
    u_xlat8.xz = vec2(u_xlat8.x / _LocalWindsMapSize.z, u_xlat8.z / _LocalWindsMapSize.w);
    u_xlat8.xz = u_xlat8.xz + vec2(0.5, 0.5);
    u_xlat2 = textureLod(_LocalWindsMap, u_xlat8.xz, 0.0);
    u_xlat8.x = dot(u_xlat2.xy, u_xlat2.xy);
    u_xlat8.x = sqrt(u_xlat8.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(9.99999975e-05>=u_xlat8.x);
#else
    u_xlatb8 = 9.99999975e-05>=u_xlat8.x;
#endif
    u_xlat8.x = u_xlatb8 ? 1.0 : float(0.0);
    u_xlat3.xy = (-u_xlat2.xy) + vec2(0.5, 0.5);
    u_xlat8.xz = u_xlat8.xx * u_xlat3.xy + u_xlat2.xy;
    u_xlat8.xz = u_xlat8.xz * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat25 = dot(u_xlat8.xz, u_xlat8.xz);
    u_xlat25 = max(u_xlat25, 0.00100000005);
    u_xlat3.x = inversesqrt(u_xlat25);
    u_xlat3.yz = u_xlat8.xz * u_xlat3.xx;
    u_xlat0.x = u_xlat3.z;
    u_xlat0.xz = (-u_xlat3.xy) * vec2(0.0, 1.0) + u_xlat0.xz;
    u_xlat25 = (-in_TEXCOORD1.x) + hlslcc_mtx4x4unity_ObjectToWorld[1].x;
    u_xlat2.x = u_xlat25 * 3.0;
    u_xlat2.x = _Time.y * 3.0 + u_xlat2.x;
    u_xlat2.x = u_xlat2.x + 0.5;
    u_xlat2.x = fract(u_xlat2.x);
    u_xlat2.x = u_xlat2.x * 2.0 + -1.0;
    u_xlat10.x = abs(u_xlat2.x) * abs(u_xlat2.x);
    u_xlat2.x = -abs(u_xlat2.x) * 2.0 + 3.0;
    u_xlat2.x = u_xlat2.x * u_xlat10.x;
    u_xlat10.x = u_xlat2.z * 1.5;
    u_xlat2.x = u_xlat10.x * u_xlat2.x;
    u_xlat0.xz = u_xlat0.xz * u_xlat2.xx;
    u_xlat0.xz = u_xlat0.xz * vec2(0.150000006, 0.150000006);
    u_xlat0.xz = u_xlat3.yz * u_xlat2.xx + u_xlat0.xz;
    u_xlat0.xz = u_xlat0.xz + u_xlat8.xz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(0.00199999986<u_xlat2.z);
#else
    u_xlatb2 = 0.00199999986<u_xlat2.z;
#endif
    u_xlat10.x = (-u_xlat2.w) * _LocalWindsMapCameraInfo.y + _LocalWindsMapCameraInfo.x;
    u_xlat0.xy = (bool(u_xlatb2)) ? u_xlat0.xz : u_xlat8.xz;
    u_xlat16.xy = vec2(_WorldOffsetRange.z + float(2.0), _WorldOffsetRange.w + float(2.0));
    u_xlat2.xz = u_xlat1.xz + (-_WorldOffsetRange.xy);
    u_xlat2.xz = u_xlat2.xz + vec2(1.0, 1.0);
    u_xlat16.xy = u_xlat2.xz / u_xlat16.xy;
    u_xlat16.xy = u_xlat16.xy * _WorldOffsetRange.zw + vec2(-0.5, -0.5);
    u_xlat2.xz = floor(u_xlat16.xy);
    u_xlat16.xy = u_xlat16.xy + (-u_xlat2.xz);
    u_xlat3 = u_xlat2.xzxz + vec4(0.5, 1.5, 1.5, 1.5);
    u_xlat4 = u_xlat2.xzxz + vec4(1.5, 0.5, 0.5, 0.5);
    u_xlat4 = vec4(u_xlat4.x / _WorldOffsetRange.z, u_xlat4.y / _WorldOffsetRange.w, u_xlat4.z / _WorldOffsetRange.z, u_xlat4.w / _WorldOffsetRange.w);
    u_xlat3 = vec4(u_xlat3.x / _WorldOffsetRange.z, u_xlat3.y / _WorldOffsetRange.w, u_xlat3.z / _WorldOffsetRange.z, u_xlat3.w / _WorldOffsetRange.w);
    u_xlat2.x = textureLod(_Heightmap, u_xlat3.zw, 0.0).x;
    u_xlat18 = textureLod(_Heightmap, u_xlat3.xy, 0.0).x;
    u_xlat2.x = (-u_xlat18) + u_xlat2.x;
    u_xlat2.x = u_xlat16.x * u_xlat2.x + u_xlat18;
    u_xlat18 = textureLod(_Heightmap, u_xlat4.xy, 0.0).x;
    u_xlat26 = textureLod(_Heightmap, u_xlat4.zw, 0.0).x;
    u_xlat18 = (-u_xlat26) + u_xlat18;
    u_xlat16.x = u_xlat16.x * u_xlat18 + u_xlat26;
    u_xlat2.x = (-u_xlat16.x) + u_xlat2.x;
    u_xlat16.x = u_xlat16.y * u_xlat2.x + u_xlat16.x;
    u_xlat24 = u_xlat16.x * _HeightScale + u_xlat1.y;
    u_xlat24 = (-u_xlat24) + u_xlat10.x;
    u_xlat24 = u_xlat24 * 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat24 = (-u_xlat24) + 1.0;
    u_xlat2.x = fract(u_xlat25);
    u_xlat25 = u_xlat25 + hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat10.xy = vec2(u_xlat25) * vec2(22.0, 33.0);
    u_xlat10.xy = fract(u_xlat10.xy);
    u_xlat10.xy = u_xlat10.xy + vec2(-0.5, -0.5);
    u_xlat3.xz = u_xlat10.xy * vec2(0.200000003, 0.200000003);
    u_xlat25 = u_xlat2.x + -0.5;
    u_xlat2.x = u_xlat25 * 0.333000004;
    u_xlat4.y = u_xlat25 * 0.333000004 + -1.0;
    u_xlat25 = in_TEXCOORD1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat25 = min(max(u_xlat25, 0.0), 1.0);
#else
    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
#endif
    u_xlat2.x = u_xlat2.x * u_xlat25;
    u_xlat24 = u_xlat24 * u_xlat2.x;
    u_xlat0.xy = vec2(u_xlat24) * u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(vec2(_VegetationMoveScale, _VegetationMoveScale));
    u_xlat24 = dot(_GlobalWind.xyz, _GlobalWind.xyz);
    u_xlat24 = max(u_xlat24, 0.00100000005);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat5 = vec4(u_xlat24) * _GlobalWind.xzxz;
    u_xlat10.xy = vec2(u_xlat5.z * _LargeWindParam.z, u_xlat5.w * _LargeWindParam.z);
    u_xlat21.xy = u_xlat1.xz / vec2(_NoiseScale);
    u_xlat5.xy = _LargeWindParam.xx * u_xlat5.xy + u_xlat21.xy;
    u_xlat5.xy = textureLod(_Noisemap, u_xlat5.xy, 0.0).xy;
    u_xlat5.xy = u_xlat5.xy + vec2(-0.5, -0.5);
    u_xlat5.xy = u_xlat5.xy * _LargeWindParam.yy + vec2(0.5, 0.5);
    u_xlat5.xy = u_xlat2.xx * u_xlat5.xy;
    u_xlat6.xz = u_xlat5.xy * u_xlat10.xy + u_xlat0.xy;
    u_xlat10.xy = u_xlat10.xy * u_xlat5.xy;
    u_xlat6.y = 0.0;
    u_xlat5.y = hlslcc_mtx4x4unity_MatrixV[0].x;
    u_xlat5.x = hlslcc_mtx4x4unity_MatrixV[2].x;
    u_xlat24 = dot(u_xlat5.xy, u_xlat5.xy);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat5.xy = vec2(u_xlat24) * u_xlat5.xy;
    u_xlat7.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;
    u_xlat7.y = hlslcc_mtx4x4unity_ObjectToWorld[2].x;
    u_xlat24 = dot(u_xlat7.xy, u_xlat7.xy);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat21.xy = vec2(u_xlat24) * u_xlat7.xy;
    u_xlat7.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat7.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat7.xyz;
    u_xlat7.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat7.xyz;
    u_xlat7.xyz = u_xlat7.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat7.xyz = (-u_xlat1.xyz) + u_xlat7.xyz;
    u_xlat24 = u_xlat21.y * u_xlat7.z;
    u_xlat24 = u_xlat7.x * u_xlat21.x + (-u_xlat24);
    u_xlat26 = dot(u_xlat7.zx, u_xlat21.xy);
    u_xlat21.xy = u_xlat5.xy * vec2(u_xlat26);
    u_xlat26 = u_xlat24 * u_xlat5.y + (-u_xlat21.x);
    u_xlat24 = u_xlat24 * u_xlat5.x + u_xlat21.y;
    u_xlat24 = u_xlat7.z + u_xlat24;
    u_xlat7.z = (-u_xlat24) * _Billboard + u_xlat7.z;
    u_xlat24 = u_xlat7.x + u_xlat26;
    u_xlat7.x = (-u_xlat24) * _Billboard + u_xlat7.x;
    u_xlat24 = u_xlat2.x * u_xlat7.y;
    u_xlat2.x = max(u_xlat2.x, 9.99999972e-10);
    u_xlat5.xyz = u_xlat7.xyz * vec3(0.100000001, 1.0, 0.100000001) + u_xlat6.xyz;
    u_xlat26 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat26 = max(u_xlat26, 0.00100000005);
    u_xlat26 = inversesqrt(u_xlat26);
    u_xlat5.xyz = vec3(u_xlat26) * u_xlat5.xyz;
    u_xlat26 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat26 = sqrt(u_xlat26);
    u_xlat6.xyz = u_xlat7.xyz * vec3(0.100000001, 1.0, 0.100000001);
    u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat26) + (-u_xlat6.xyz);
    u_xlat6.xyz = u_xlat1.xyz + u_xlat7.xyz;
    u_xlat6.w = u_xlat16.x * _HeightScale + u_xlat6.y;
    u_xlat1.xyz = u_xlat5.xyz + u_xlat6.xwz;
    u_xlat1.xyz = vec3(u_xlat24) * vec3(-0.5, 0.0, -0.5) + u_xlat1.xyz;
    u_xlat4.xz = u_xlat4.yy * (-u_xlat4.yy);
    u_xlat1.xyz = u_xlat4.xyz * u_xlat7.xyz + u_xlat1.xyz;
    u_xlat4.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat5 = u_xlat4.yyyy * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat5 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat4.xxxx + u_xlat5;
    u_xlat4 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat4.zzzz + u_xlat5;
    gl_Position = u_xlat4 + hlslcc_mtx4x4unity_MatrixVPZero[3];
    u_xlat3.y = 0.0;
    vs_TEXCOORD0.xyz = u_xlat3.xyz + vec3(-1.0, 0.0, -1.0);
    vs_TEXCOORD0.w = 0.0;
    u_xlat0.xy = u_xlat0.yx / u_xlat2.xx;
    u_xlat16.xy = u_xlat10.yx / u_xlat2.xx;
    u_xlat0.xy = u_xlat0.xy + u_xlat16.xy;
    u_xlat0.yz = u_xlat0.xy + vec2(-1.0, -1.0);
    u_xlat24 = dot(u_xlat0.yz, u_xlat0.yz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat0.x = 0.0;
    u_xlat0.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    u_xlat2.xyz = in_NORMAL0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_NORMAL0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_NORMAL0.zzz + u_xlat2.xyz;
    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat0.xyz * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat0.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat0.xyz * u_xlat2.xyz;
    u_xlat0.xyz = u_xlat2.zxy * u_xlat0.yzx + (-u_xlat3.xyz);
    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
    u_xlat24 = dot(u_xlat1.xyz, u_xlat0.xyz);
#ifdef UNITY_ADRENO_ES3
    { bool cond = 0.0<u_xlat24; u_xlati1 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati1 = int((0.0<u_xlat24) ? 0xFFFFFFFFu : uint(0u));
#endif
#ifdef UNITY_ADRENO_ES3
    { bool cond = u_xlat24<0.0; u_xlati24 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati24 = int((u_xlat24<0.0) ? 0xFFFFFFFFu : uint(0u));
#endif
    u_xlati24 = (-u_xlati1) + u_xlati24;
    u_xlat24 = float(u_xlati24);
    vs_TEXCOORD1.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    vs_TEXCOORD1.w = 0.0;
    u_xlat0.x = u_xlat25 / _RootColorScale;
    u_xlat0.x = u_xlat0.x + _RootColorOffset;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xxx * vec3(-0.501960814, 0.0, 0.0) + vec3(0.501960814, 0.0, 0.0);
    u_xlat24 = u_xlat25 + -0.600000024;
    vs_TEXCOORD3 = u_xlat25;
    u_xlat24 = max(u_xlat24, 0.0);
    u_xlat24 = _GrassTipLighting * u_xlat24 + 1.0;
    vs_TEXCOORD2.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    vs_TEXCOORD2.w = 0.0;
    vs_TEXCOORD4.xy = in_TEXCOORD2.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	float _GrassShininess;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	float _CutOff;
uniform 	vec4 _BurnedColor;
uniform lowp sampler2D _MainTex;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp float vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec4 u_xlat0;
lowp vec4 u_xlat10_0;
bool u_xlatb0;
vec3 u_xlat1;
mediump float u_xlat16_2;
float u_xlat9;
bool u_xlatb9;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD4.xy);
    u_xlat9 = u_xlat10_0.w + (-_CutOff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(u_xlat9<0.0);
#else
    u_xlatb9 = u_xlat9<0.0;
#endif
    if((int(u_xlatb9) * int(0xffffffffu))!=0){discard;}
    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
    SV_Target0.xyz = u_xlat1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0;
    u_xlat1.xyz = _BurnedColor.xyz * u_xlat10_0.xyz + (-u_xlat10_0.xyz);
    u_xlat0.xyz = vs_TEXCOORD2.www * u_xlat1.xyz + u_xlat10_0.xyz;
    u_xlat0.w = vs_TEXCOORD3;
    SV_Target1 = u_xlat0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_2 = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb0) ? u_xlat16_2 : 0.0399999991;
    u_xlat0.x = (-vs_TEXCOORD2.w) + 1.0;
    u_xlat0.x = u_xlat0.x * _GrassShininess;
    SV_Target2.w = u_xlat0.x;
    SV_Target2.xy = vec2(0.0399999991, 0.0399999991);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_HDR_ON" "INSTANCING_ON" "MHY_SHADER_MIDDLE" "SOFT_SAMPLE_HEIGHT_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	int unity_BaseInstanceID;
uniform 	float _NoiseScale;
uniform 	vec4 _WorldOffsetRange;
uniform 	float _HeightScale;
uniform 	float _Billboard;
uniform 	float _VegetationMoveScale;
uniform 	vec4 _LocalWindsMapSize;
uniform 	vec4 _LargeWindParam;
uniform 	vec4 _GlobalWind;
uniform 	vec4 _LocalWindsMapCameraInfo;
uniform 	float _GrassTipLighting;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BurnedColor;
uniform 	float _RootColorScale;
uniform 	float _RootColorOffset;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _Heightmap;
uniform lowp sampler2D _Noisemap;
uniform lowp sampler2D _LocalWindsMap;
in highp vec4 in_POSITION0;
in highp vec4 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec2 in_TEXCOORD2;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp float vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec3 u_xlat0;
int u_xlati0;
vec3 u_xlat1;
uvec3 u_xlatu1;
vec4 u_xlat2;
uvec3 u_xlatu2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
uvec2 u_xlatu5;
vec4 u_xlat6;
vec3 u_xlat7;
vec2 u_xlat8;
float u_xlat9;
int u_xlati9;
float u_xlat11;
uint u_xlatu11;
int u_xlati18;
float u_xlat20;
vec2 u_xlat23;
float u_xlat27;
bool u_xlatb27;
float u_xlat28;
uint u_xlatu28;
bool u_xlatb28;
float u_xlat29;
bool u_xlatb29;
float u_xlat30;
void main()
{
    u_xlat0.z = 0.0;
    u_xlati9 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati9 = u_xlati9 << 2;
    u_xlat1.xyz = in_TEXCOORD0.yyy * unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_TEXCOORD0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat2.xy = u_xlat1.xz + (-_LocalWindsMapSize.xy);
    u_xlat2.xy = vec2(u_xlat2.x / _LocalWindsMapSize.z, u_xlat2.y / _LocalWindsMapSize.w);
    u_xlat2.xy = u_xlat2.xy + vec2(0.5, 0.5);
    u_xlat2 = textureLod(_LocalWindsMap, u_xlat2.xy, 0.0);
    u_xlat27 = dot(u_xlat2.xy, u_xlat2.xy);
    u_xlat27 = sqrt(u_xlat27);
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(9.99999975e-05>=u_xlat27);
#else
    u_xlatb27 = 9.99999975e-05>=u_xlat27;
#endif
    u_xlat27 = u_xlatb27 ? 1.0 : float(0.0);
    u_xlat3.xy = (-u_xlat2.xy) + vec2(0.5, 0.5);
    u_xlat2.xy = vec2(u_xlat27) * u_xlat3.xy + u_xlat2.xy;
    u_xlat2.xy = u_xlat2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat27 = dot(u_xlat2.xy, u_xlat2.xy);
    u_xlat27 = max(u_xlat27, 0.00100000005);
    u_xlat3.x = inversesqrt(u_xlat27);
    u_xlat3.yz = u_xlat2.xy * u_xlat3.xx;
    u_xlat0.x = u_xlat3.z;
    u_xlat0.xz = (-u_xlat3.xy) * vec2(0.0, 1.0) + u_xlat0.xz;
    u_xlat27 = (-in_TEXCOORD1.x) + unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].x;
    u_xlat28 = u_xlat27 * 3.0;
    u_xlat28 = _Time.y * 3.0 + u_xlat28;
    u_xlat28 = u_xlat28 + 0.5;
    u_xlat28 = fract(u_xlat28);
    u_xlat28 = u_xlat28 * 2.0 + -1.0;
    u_xlat3.x = abs(u_xlat28) * abs(u_xlat28);
    u_xlat28 = -abs(u_xlat28) * 2.0 + 3.0;
    u_xlat28 = u_xlat28 * u_xlat3.x;
    u_xlat3.x = u_xlat2.z * 1.5;
    u_xlat28 = u_xlat28 * u_xlat3.x;
    u_xlat0.xz = u_xlat0.xz * vec2(u_xlat28);
    u_xlat0.xz = u_xlat0.xz * vec2(0.150000006, 0.150000006);
    u_xlat0.xz = u_xlat3.yz * vec2(u_xlat28) + u_xlat0.xz;
    u_xlat0.xz = u_xlat0.xz + u_xlat2.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlatb28 = !!(0.00199999986<u_xlat2.z);
#else
    u_xlatb28 = 0.00199999986<u_xlat2.z;
#endif
    u_xlat20 = (-u_xlat2.w) * _LocalWindsMapCameraInfo.y + _LocalWindsMapCameraInfo.x;
    u_xlat0.xz = (bool(u_xlatb28)) ? u_xlat0.xz : u_xlat2.xy;
    u_xlat2.xy = vec2(_WorldOffsetRange.z + float(2.0), _WorldOffsetRange.w + float(2.0));
    u_xlat3.xy = u_xlat1.xz + (-_WorldOffsetRange.xy);
    u_xlat3.xy = u_xlat3.xy + vec2(1.0, 1.0);
    u_xlat2.xy = u_xlat3.xy / u_xlat2.xy;
    u_xlat2.xy = u_xlat2.xy * _WorldOffsetRange.zw + vec2(-0.5, -0.5);
    u_xlat3.xy = floor(u_xlat2.xy);
    u_xlat2.xy = u_xlat2.xy + (-u_xlat3.xy);
    u_xlat4 = u_xlat3.xyxy + vec4(0.5, 1.5, 1.5, 1.5);
    u_xlat3 = u_xlat3.xyxy + vec4(1.5, 0.5, 0.5, 0.5);
    u_xlat3 = vec4(u_xlat3.x / _WorldOffsetRange.z, u_xlat3.y / _WorldOffsetRange.w, u_xlat3.z / _WorldOffsetRange.z, u_xlat3.w / _WorldOffsetRange.w);
    u_xlat4 = vec4(u_xlat4.x / _WorldOffsetRange.z, u_xlat4.y / _WorldOffsetRange.w, u_xlat4.z / _WorldOffsetRange.z, u_xlat4.w / _WorldOffsetRange.w);
    u_xlat28 = textureLod(_Heightmap, u_xlat4.zw, 0.0).x;
    u_xlat29 = textureLod(_Heightmap, u_xlat4.xy, 0.0).x;
    u_xlat28 = u_xlat28 + (-u_xlat29);
    u_xlat28 = u_xlat2.x * u_xlat28 + u_xlat29;
    u_xlat29 = textureLod(_Heightmap, u_xlat3.xy, 0.0).x;
    u_xlat3.x = textureLod(_Heightmap, u_xlat3.zw, 0.0).x;
    u_xlat29 = u_xlat29 + (-u_xlat3.x);
    u_xlat2.x = u_xlat2.x * u_xlat29 + u_xlat3.x;
    u_xlat28 = u_xlat28 + (-u_xlat2.x);
    u_xlat28 = u_xlat2.y * u_xlat28 + u_xlat2.x;
    u_xlat2.x = u_xlat28 * _HeightScale + u_xlat1.y;
    u_xlat2.x = (-u_xlat2.x) + u_xlat20;
    u_xlat2.x = u_xlat2.x * 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat2.x = (-u_xlat2.x) + 1.0;
    u_xlat11 = float(floatBitsToUint(unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2]).w);
    u_xlat11 = u_xlat11 * 5.96046448e-08;
    u_xlatu11 = uint(u_xlat11);
    u_xlatu11 = u_xlatu11 & 3u;
    u_xlat11 = float(u_xlatu11);
    u_xlat20 = fract(u_xlat27);
    u_xlat27 = u_xlat27 + unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].y;
    u_xlat3.xy = vec2(u_xlat27) * vec2(22.0, 33.0);
    u_xlat3.xy = fract(u_xlat3.xy);
    u_xlat3.xy = u_xlat3.xy + vec2(-0.5, -0.5);
    u_xlat3.xz = u_xlat3.xy * vec2(0.200000003, 0.200000003);
    u_xlat27 = u_xlat11 + u_xlat20;
    u_xlat27 = u_xlat27 + -0.5;
    u_xlat11 = u_xlat27 * 0.333000004;
    u_xlat4.y = u_xlat27 * 0.333000004 + -1.0;
    u_xlat27 = in_TEXCOORD1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
    u_xlat11 = u_xlat11 * u_xlat27;
    u_xlat2.x = u_xlat11 * u_xlat2.x;
    u_xlat0.xz = u_xlat0.xz * u_xlat2.xx;
    u_xlat0.xz = u_xlat0.xz * vec2(vec2(_VegetationMoveScale, _VegetationMoveScale));
    u_xlat2.x = dot(_GlobalWind.xyz, _GlobalWind.xyz);
    u_xlat2.x = max(u_xlat2.x, 0.00100000005);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat5 = u_xlat2.xxxx * _GlobalWind.xzxz;
    u_xlat2.xz = vec2(u_xlat5.z * _LargeWindParam.z, u_xlat5.w * _LargeWindParam.z);
    u_xlat23.xy = u_xlat1.xz / vec2(_NoiseScale);
    u_xlat5.xy = _LargeWindParam.xx * u_xlat5.xy + u_xlat23.xy;
    u_xlat5.xy = textureLod(_Noisemap, u_xlat5.xy, 0.0).xy;
    u_xlat5.xy = u_xlat5.xy + vec2(-0.5, -0.5);
    u_xlat5.xy = u_xlat5.xy * _LargeWindParam.yy + vec2(0.5, 0.5);
    u_xlat5.xy = vec2(u_xlat11) * u_xlat5.xy;
    u_xlat6.xz = u_xlat5.xy * u_xlat2.xz + u_xlat0.xz;
    u_xlat2.xz = u_xlat2.xz * u_xlat5.xy;
    u_xlat6.y = 0.0;
    u_xlat5.y = hlslcc_mtx4x4unity_MatrixV[0].x;
    u_xlat5.x = hlslcc_mtx4x4unity_MatrixV[2].x;
    u_xlat29 = dot(u_xlat5.xy, u_xlat5.xy);
    u_xlat29 = inversesqrt(u_xlat29);
    u_xlat5.xy = vec2(u_xlat29) * u_xlat5.xy;
    u_xlat7.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat7.xyz = unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat7.xyz;
    u_xlat7.xyz = unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat7.xyz;
    u_xlat7.xyz = u_xlat7.xyz + unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat7.xyz = (-u_xlat1.xyz) + u_xlat7.xyz;
    u_xlat8.x = unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].x;
    u_xlat8.y = unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].x;
    u_xlat29 = dot(u_xlat8.xy, u_xlat8.xy);
    u_xlat29 = inversesqrt(u_xlat29);
    u_xlat23.xy = vec2(u_xlat29) * u_xlat8.xy;
    u_xlat29 = u_xlat23.y * u_xlat7.z;
    u_xlat29 = u_xlat7.x * u_xlat23.x + (-u_xlat29);
    u_xlat30 = dot(u_xlat7.zx, u_xlat23.xy);
    u_xlat23.xy = u_xlat5.xy * vec2(u_xlat30);
    u_xlat30 = u_xlat29 * u_xlat5.y + (-u_xlat23.x);
    u_xlat29 = u_xlat29 * u_xlat5.x + u_xlat23.y;
    u_xlat29 = u_xlat7.z + u_xlat29;
    u_xlat7.z = (-u_xlat29) * _Billboard + u_xlat7.z;
    u_xlat29 = u_xlat7.x + u_xlat30;
    u_xlat7.x = (-u_xlat29) * _Billboard + u_xlat7.x;
    u_xlat5.xyz = u_xlat7.xyz * vec3(0.100000001, 1.0, 0.100000001) + u_xlat6.xyz;
    u_xlat29 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat29 = max(u_xlat29, 0.00100000005);
    u_xlat29 = inversesqrt(u_xlat29);
    u_xlat5.xyz = vec3(u_xlat29) * u_xlat5.xyz;
    u_xlat29 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat29 = sqrt(u_xlat29);
    u_xlat6.xyz = u_xlat7.xyz * vec3(0.100000001, 1.0, 0.100000001);
    u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat29) + (-u_xlat6.xyz);
    u_xlat6.xyz = u_xlat1.xyz + u_xlat7.xyz;
    u_xlat6.w = u_xlat28 * _HeightScale + u_xlat6.y;
    u_xlat1.xyz = u_xlat5.xyz + u_xlat6.xwz;
    u_xlatu5.xy = uvec2(65280u, 255u) & floatBitsToUint(unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1]).ww;
    u_xlat5.xy = vec2(u_xlatu5.xy);
    u_xlat28 = u_xlat5.x * 0.00390625;
    u_xlat5.z = u_xlat5.y + -127.0;
    u_xlatu28 = uint(u_xlat28);
    u_xlat28 = float(u_xlatu28);
    u_xlat5.x = u_xlat28 + -127.0;
    u_xlat6.xy = u_xlat5.xz * vec2(0.00787401572, 0.00787401572);
    u_xlat6.xy = u_xlat6.xy * u_xlat6.xy;
    u_xlat28 = u_xlat6.y + u_xlat6.x;
    u_xlat28 = (-u_xlat28) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb29 = !!(0.0<u_xlat28);
#else
    u_xlatb29 = 0.0<u_xlat28;
#endif
    u_xlat28 = sqrt(u_xlat28);
    u_xlat5.y = u_xlatb29 ? u_xlat28 : float(0.0);
    u_xlat6.xyz = u_xlat5.xyz * u_xlat7.yyy;
    u_xlat6.xyz = vec3(u_xlat11) * u_xlat6.xyz;
    u_xlat28 = max(u_xlat11, 9.99999972e-10);
    u_xlat1.xyz = u_xlat6.xyz * vec3(0.00393700786, 0.0, 0.00393700786) + u_xlat1.xyz;
    u_xlat4.xz = u_xlat4.yy * (-u_xlat4.yy);
    u_xlat1.xyz = u_xlat4.xyz * u_xlat7.xyz + u_xlat1.xyz;
    u_xlat4.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat6 = u_xlat4.yyyy * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat6 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat4.xxxx + u_xlat6;
    u_xlat4 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat4.zzzz + u_xlat6;
    gl_Position = u_xlat4 + hlslcc_mtx4x4unity_MatrixVPZero[3];
    u_xlat3.y = 0.0;
    vs_TEXCOORD0.xyz = u_xlat5.xyz * vec3(0.00787401572, 1.0, 0.00787401572) + u_xlat3.xyz;
    vs_TEXCOORD0.w = 0.0;
    u_xlat0.xz = u_xlat0.zx / vec2(u_xlat28);
    u_xlat2.xy = u_xlat2.zx / vec2(u_xlat28);
    u_xlat2.yz = u_xlat0.xz + u_xlat2.xy;
    u_xlat2.x = 0.0;
    u_xlat2.xyz = u_xlat5.yzx * vec3(1.0, 0.00787401572, 0.00787401572) + u_xlat2.xyz;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat3.xyz = in_NORMAL0.yyy * unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_NORMAL0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_NORMAL0.zzz + u_xlat3.xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
    u_xlat3.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
    u_xlat2.xyz = u_xlat3.zxy * u_xlat2.yzx + (-u_xlat4.xyz);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
    { bool cond = 0.0<u_xlat0.x; u_xlati18 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati18 = int((0.0<u_xlat0.x) ? 0xFFFFFFFFu : uint(0u));
#endif
#ifdef UNITY_ADRENO_ES3
    { bool cond = u_xlat0.x<0.0; u_xlati0 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati0 = int((u_xlat0.x<0.0) ? 0xFFFFFFFFu : uint(0u));
#endif
    u_xlati0 = (-u_xlati18) + u_xlati0;
    u_xlat0.x = float(u_xlati0);
    vs_TEXCOORD1.xyz = u_xlat0.xxx * u_xlat2.xyz;
    vs_TEXCOORD1.w = 0.0;
    u_xlatu1.xyz = uvec3(16711680u, 65280u, 255u) & floatBitsToUint(unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2]).www;
    u_xlat1.xyz = vec3(u_xlatu1.xyz);
    u_xlatu2.xyz = uvec3(16711680u, 65280u, 255u) & floatBitsToUint(unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3]).www;
    u_xlat0.x = max(1.0, unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].w);
    u_xlat0.x = min(u_xlat0.x, 2.0);
    u_xlat0.x = u_xlat0.x + -1.0;
    u_xlat2.xyz = vec3(u_xlatu2.xyz);
    u_xlat2.xyz = u_xlat2.xyz * vec3(5.9838392e-08, 1.53186284e-05, 0.00392156886);
    u_xlat1.xyz = u_xlat1.xyz * vec3(5.9838392e-08, 1.53186284e-05, 0.00392156886) + (-u_xlat2.xyz);
    u_xlat9 = u_xlat27 / _RootColorScale;
    u_xlat9 = u_xlat9 + _RootColorOffset;
#ifdef UNITY_ADRENO_ES3
    u_xlat9 = min(max(u_xlat9, 0.0), 1.0);
#else
    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz + u_xlat2.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _BurnedColor.xyz;
    u_xlat1.xyz = u_xlat0.xxx * u_xlat2.xyz + u_xlat1.xyz;
    vs_TEXCOORD2.w = u_xlat0.x;
    u_xlat0.x = u_xlat27 + -0.600000024;
    vs_TEXCOORD3 = u_xlat27;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = _GrassTipLighting * u_xlat0.x + 1.0;
    vs_TEXCOORD2.xyz = u_xlat0.xxx * u_xlat1.xyz;
    vs_TEXCOORD4.xy = in_TEXCOORD2.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	float _GrassShininess;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	float _CutOff;
uniform 	vec4 _BurnedColor;
uniform lowp sampler2D _MainTex;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp float vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec4 u_xlat0;
lowp vec4 u_xlat10_0;
bool u_xlatb0;
vec3 u_xlat1;
mediump float u_xlat16_2;
float u_xlat9;
bool u_xlatb9;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD4.xy);
    u_xlat9 = u_xlat10_0.w + (-_CutOff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(u_xlat9<0.0);
#else
    u_xlatb9 = u_xlat9<0.0;
#endif
    if((int(u_xlatb9) * int(0xffffffffu))!=0){discard;}
    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
    SV_Target0.xyz = u_xlat1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0;
    u_xlat1.xyz = _BurnedColor.xyz * u_xlat10_0.xyz + (-u_xlat10_0.xyz);
    u_xlat0.xyz = vs_TEXCOORD2.www * u_xlat1.xyz + u_xlat10_0.xyz;
    u_xlat0.w = vs_TEXCOORD3;
    SV_Target1 = u_xlat0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_2 = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb0) ? u_xlat16_2 : 0.0399999991;
    u_xlat0.x = (-vs_TEXCOORD2.w) + 1.0;
    u_xlat0.x = u_xlat0.x * _GrassShininess;
    SV_Target2.w = u_xlat0.x;
    SV_Target2.xy = vec2(0.0399999991, 0.0399999991);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_HDR_ON" "MHY_SHADER_MIDDLE" "SOFT_SAMPLE_HEIGHT_ON" "DITHER_FADE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	float _NoiseScale;
uniform 	vec4 _WorldOffsetRange;
uniform 	float _HeightScale;
uniform 	float _Billboard;
uniform 	float _VegetationMoveScale;
uniform 	vec4 _LocalWindsMapSize;
uniform 	vec4 _LargeWindParam;
uniform 	vec4 _GlobalWind;
uniform 	vec4 _LocalWindsMapCameraInfo;
uniform 	float _GrassTipLighting;
uniform 	vec4 _MainTex_ST;
uniform 	float _RootColorScale;
uniform 	float _RootColorOffset;
uniform highp sampler2D _Heightmap;
uniform lowp sampler2D _Noisemap;
uniform lowp sampler2D _LocalWindsMap;
in highp vec4 in_POSITION0;
in highp vec4 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec2 in_TEXCOORD2;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp float vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec3 u_xlat0;
vec3 u_xlat1;
int u_xlati1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
vec4 u_xlat6;
vec3 u_xlat7;
vec3 u_xlat8;
bool u_xlatb8;
vec2 u_xlat10;
vec2 u_xlat16;
float u_xlat18;
vec2 u_xlat21;
float u_xlat24;
int u_xlati24;
float u_xlat25;
float u_xlat26;
void main()
{
    u_xlat0.z = 0.0;
    u_xlat1.xyz = in_TEXCOORD0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[2].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TEXCOORD0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat8.xz = u_xlat1.xz + (-_LocalWindsMapSize.xy);
    u_xlat8.xz = vec2(u_xlat8.x / _LocalWindsMapSize.z, u_xlat8.z / _LocalWindsMapSize.w);
    u_xlat8.xz = u_xlat8.xz + vec2(0.5, 0.5);
    u_xlat2 = textureLod(_LocalWindsMap, u_xlat8.xz, 0.0);
    u_xlat8.x = dot(u_xlat2.xy, u_xlat2.xy);
    u_xlat8.x = sqrt(u_xlat8.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(9.99999975e-05>=u_xlat8.x);
#else
    u_xlatb8 = 9.99999975e-05>=u_xlat8.x;
#endif
    u_xlat8.x = u_xlatb8 ? 1.0 : float(0.0);
    u_xlat3.xy = (-u_xlat2.xy) + vec2(0.5, 0.5);
    u_xlat8.xz = u_xlat8.xx * u_xlat3.xy + u_xlat2.xy;
    u_xlat8.xz = u_xlat8.xz * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat25 = dot(u_xlat8.xz, u_xlat8.xz);
    u_xlat25 = max(u_xlat25, 0.00100000005);
    u_xlat3.x = inversesqrt(u_xlat25);
    u_xlat3.yz = u_xlat8.xz * u_xlat3.xx;
    u_xlat0.x = u_xlat3.z;
    u_xlat0.xz = (-u_xlat3.xy) * vec2(0.0, 1.0) + u_xlat0.xz;
    u_xlat25 = (-in_TEXCOORD1.x) + hlslcc_mtx4x4unity_ObjectToWorld[1].x;
    u_xlat2.x = u_xlat25 * 3.0;
    u_xlat2.x = _Time.y * 3.0 + u_xlat2.x;
    u_xlat2.x = u_xlat2.x + 0.5;
    u_xlat2.x = fract(u_xlat2.x);
    u_xlat2.x = u_xlat2.x * 2.0 + -1.0;
    u_xlat10.x = abs(u_xlat2.x) * abs(u_xlat2.x);
    u_xlat2.x = -abs(u_xlat2.x) * 2.0 + 3.0;
    u_xlat2.x = u_xlat2.x * u_xlat10.x;
    u_xlat10.x = u_xlat2.z * 1.5;
    u_xlat2.x = u_xlat10.x * u_xlat2.x;
    u_xlat0.xz = u_xlat0.xz * u_xlat2.xx;
    u_xlat0.xz = u_xlat0.xz * vec2(0.150000006, 0.150000006);
    u_xlat0.xz = u_xlat3.yz * u_xlat2.xx + u_xlat0.xz;
    u_xlat0.xz = u_xlat0.xz + u_xlat8.xz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(0.00199999986<u_xlat2.z);
#else
    u_xlatb2 = 0.00199999986<u_xlat2.z;
#endif
    u_xlat10.x = (-u_xlat2.w) * _LocalWindsMapCameraInfo.y + _LocalWindsMapCameraInfo.x;
    u_xlat0.xy = (bool(u_xlatb2)) ? u_xlat0.xz : u_xlat8.xz;
    u_xlat16.xy = vec2(_WorldOffsetRange.z + float(2.0), _WorldOffsetRange.w + float(2.0));
    u_xlat2.xz = u_xlat1.xz + (-_WorldOffsetRange.xy);
    u_xlat2.xz = u_xlat2.xz + vec2(1.0, 1.0);
    u_xlat16.xy = u_xlat2.xz / u_xlat16.xy;
    u_xlat16.xy = u_xlat16.xy * _WorldOffsetRange.zw + vec2(-0.5, -0.5);
    u_xlat2.xz = floor(u_xlat16.xy);
    u_xlat16.xy = u_xlat16.xy + (-u_xlat2.xz);
    u_xlat3 = u_xlat2.xzxz + vec4(0.5, 1.5, 1.5, 1.5);
    u_xlat4 = u_xlat2.xzxz + vec4(1.5, 0.5, 0.5, 0.5);
    u_xlat4 = vec4(u_xlat4.x / _WorldOffsetRange.z, u_xlat4.y / _WorldOffsetRange.w, u_xlat4.z / _WorldOffsetRange.z, u_xlat4.w / _WorldOffsetRange.w);
    u_xlat3 = vec4(u_xlat3.x / _WorldOffsetRange.z, u_xlat3.y / _WorldOffsetRange.w, u_xlat3.z / _WorldOffsetRange.z, u_xlat3.w / _WorldOffsetRange.w);
    u_xlat2.x = textureLod(_Heightmap, u_xlat3.zw, 0.0).x;
    u_xlat18 = textureLod(_Heightmap, u_xlat3.xy, 0.0).x;
    u_xlat2.x = (-u_xlat18) + u_xlat2.x;
    u_xlat2.x = u_xlat16.x * u_xlat2.x + u_xlat18;
    u_xlat18 = textureLod(_Heightmap, u_xlat4.xy, 0.0).x;
    u_xlat26 = textureLod(_Heightmap, u_xlat4.zw, 0.0).x;
    u_xlat18 = (-u_xlat26) + u_xlat18;
    u_xlat16.x = u_xlat16.x * u_xlat18 + u_xlat26;
    u_xlat2.x = (-u_xlat16.x) + u_xlat2.x;
    u_xlat16.x = u_xlat16.y * u_xlat2.x + u_xlat16.x;
    u_xlat24 = u_xlat16.x * _HeightScale + u_xlat1.y;
    u_xlat24 = (-u_xlat24) + u_xlat10.x;
    u_xlat24 = u_xlat24 * 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat24 = (-u_xlat24) + 1.0;
    u_xlat2.x = fract(u_xlat25);
    u_xlat25 = u_xlat25 + hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat10.xy = vec2(u_xlat25) * vec2(22.0, 33.0);
    u_xlat10.xy = fract(u_xlat10.xy);
    u_xlat10.xy = u_xlat10.xy + vec2(-0.5, -0.5);
    u_xlat3.xz = u_xlat10.xy * vec2(0.200000003, 0.200000003);
    u_xlat25 = u_xlat2.x + -0.5;
    u_xlat2.x = u_xlat25 * 0.333000004;
    u_xlat4.y = u_xlat25 * 0.333000004 + -1.0;
    u_xlat25 = in_TEXCOORD1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat25 = min(max(u_xlat25, 0.0), 1.0);
#else
    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
#endif
    u_xlat2.x = u_xlat2.x * u_xlat25;
    u_xlat24 = u_xlat24 * u_xlat2.x;
    u_xlat0.xy = vec2(u_xlat24) * u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(vec2(_VegetationMoveScale, _VegetationMoveScale));
    u_xlat24 = dot(_GlobalWind.xyz, _GlobalWind.xyz);
    u_xlat24 = max(u_xlat24, 0.00100000005);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat5 = vec4(u_xlat24) * _GlobalWind.xzxz;
    u_xlat10.xy = vec2(u_xlat5.z * _LargeWindParam.z, u_xlat5.w * _LargeWindParam.z);
    u_xlat21.xy = u_xlat1.xz / vec2(_NoiseScale);
    u_xlat5.xy = _LargeWindParam.xx * u_xlat5.xy + u_xlat21.xy;
    u_xlat5.xy = textureLod(_Noisemap, u_xlat5.xy, 0.0).xy;
    u_xlat5.xy = u_xlat5.xy + vec2(-0.5, -0.5);
    u_xlat5.xy = u_xlat5.xy * _LargeWindParam.yy + vec2(0.5, 0.5);
    u_xlat5.xy = u_xlat2.xx * u_xlat5.xy;
    u_xlat6.xz = u_xlat5.xy * u_xlat10.xy + u_xlat0.xy;
    u_xlat10.xy = u_xlat10.xy * u_xlat5.xy;
    u_xlat6.y = 0.0;
    u_xlat5.y = hlslcc_mtx4x4unity_MatrixV[0].x;
    u_xlat5.x = hlslcc_mtx4x4unity_MatrixV[2].x;
    u_xlat24 = dot(u_xlat5.xy, u_xlat5.xy);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat5.xy = vec2(u_xlat24) * u_xlat5.xy;
    u_xlat7.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;
    u_xlat7.y = hlslcc_mtx4x4unity_ObjectToWorld[2].x;
    u_xlat24 = dot(u_xlat7.xy, u_xlat7.xy);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat21.xy = vec2(u_xlat24) * u_xlat7.xy;
    u_xlat7.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat7.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat7.xyz;
    u_xlat7.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat7.xyz;
    u_xlat7.xyz = u_xlat7.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat7.xyz = (-u_xlat1.xyz) + u_xlat7.xyz;
    u_xlat24 = u_xlat21.y * u_xlat7.z;
    u_xlat24 = u_xlat7.x * u_xlat21.x + (-u_xlat24);
    u_xlat26 = dot(u_xlat7.zx, u_xlat21.xy);
    u_xlat21.xy = u_xlat5.xy * vec2(u_xlat26);
    u_xlat26 = u_xlat24 * u_xlat5.y + (-u_xlat21.x);
    u_xlat24 = u_xlat24 * u_xlat5.x + u_xlat21.y;
    u_xlat24 = u_xlat7.z + u_xlat24;
    u_xlat7.z = (-u_xlat24) * _Billboard + u_xlat7.z;
    u_xlat24 = u_xlat7.x + u_xlat26;
    u_xlat7.x = (-u_xlat24) * _Billboard + u_xlat7.x;
    u_xlat24 = u_xlat2.x * u_xlat7.y;
    u_xlat2.x = max(u_xlat2.x, 9.99999972e-10);
    u_xlat5.xyz = u_xlat7.xyz * vec3(0.100000001, 1.0, 0.100000001) + u_xlat6.xyz;
    u_xlat26 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat26 = max(u_xlat26, 0.00100000005);
    u_xlat26 = inversesqrt(u_xlat26);
    u_xlat5.xyz = vec3(u_xlat26) * u_xlat5.xyz;
    u_xlat26 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat26 = sqrt(u_xlat26);
    u_xlat6.xyz = u_xlat7.xyz * vec3(0.100000001, 1.0, 0.100000001);
    u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat26) + (-u_xlat6.xyz);
    u_xlat6.xyz = u_xlat1.xyz + u_xlat7.xyz;
    u_xlat6.w = u_xlat16.x * _HeightScale + u_xlat6.y;
    u_xlat1.xyz = u_xlat5.xyz + u_xlat6.xwz;
    u_xlat1.xyz = vec3(u_xlat24) * vec3(-0.5, 0.0, -0.5) + u_xlat1.xyz;
    u_xlat4.xz = u_xlat4.yy * (-u_xlat4.yy);
    u_xlat1.xyz = u_xlat4.xyz * u_xlat7.xyz + u_xlat1.xyz;
    u_xlat4.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat5 = u_xlat4.yyyy * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat5 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat4.xxxx + u_xlat5;
    u_xlat4 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat4.zzzz + u_xlat5;
    gl_Position = u_xlat4 + hlslcc_mtx4x4unity_MatrixVPZero[3];
    u_xlat3.y = 0.0;
    vs_TEXCOORD0.xyz = u_xlat3.xyz + vec3(-1.0, 0.0, -1.0);
    vs_TEXCOORD0.w = 0.0;
    u_xlat0.xy = u_xlat0.yx / u_xlat2.xx;
    u_xlat16.xy = u_xlat10.yx / u_xlat2.xx;
    u_xlat0.xy = u_xlat0.xy + u_xlat16.xy;
    u_xlat0.yz = u_xlat0.xy + vec2(-1.0, -1.0);
    u_xlat24 = dot(u_xlat0.yz, u_xlat0.yz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat0.x = 0.0;
    u_xlat0.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    u_xlat2.xyz = in_NORMAL0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_NORMAL0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_NORMAL0.zzz + u_xlat2.xyz;
    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat0.xyz * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat0.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat0.xyz * u_xlat2.xyz;
    u_xlat0.xyz = u_xlat2.zxy * u_xlat0.yzx + (-u_xlat3.xyz);
    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
    u_xlat24 = dot(u_xlat1.xyz, u_xlat0.xyz);
#ifdef UNITY_ADRENO_ES3
    { bool cond = 0.0<u_xlat24; u_xlati1 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati1 = int((0.0<u_xlat24) ? 0xFFFFFFFFu : uint(0u));
#endif
#ifdef UNITY_ADRENO_ES3
    { bool cond = u_xlat24<0.0; u_xlati24 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati24 = int((u_xlat24<0.0) ? 0xFFFFFFFFu : uint(0u));
#endif
    u_xlati24 = (-u_xlati1) + u_xlati24;
    u_xlat24 = float(u_xlati24);
    vs_TEXCOORD1.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    vs_TEXCOORD1.w = 0.0;
    u_xlat0.x = u_xlat25 / _RootColorScale;
    u_xlat0.x = u_xlat0.x + _RootColorOffset;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xxx * vec3(-0.501960814, 0.0, 0.0) + vec3(0.501960814, 0.0, 0.0);
    u_xlat24 = u_xlat25 + -0.600000024;
    vs_TEXCOORD3 = u_xlat25;
    u_xlat24 = max(u_xlat24, 0.0);
    u_xlat24 = _GrassTipLighting * u_xlat24 + 1.0;
    vs_TEXCOORD2.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    vs_TEXCOORD2.w = 0.0;
    vs_TEXCOORD4.xy = in_TEXCOORD2.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	float _GrassShininess;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	float _CutOff;
uniform 	vec4 _BurnedColor;
uniform lowp sampler2D _MainTex;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp float vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec4 u_xlat0;
lowp vec4 u_xlat10_0;
bool u_xlatb0;
vec3 u_xlat1;
mediump float u_xlat16_2;
float u_xlat9;
bool u_xlatb9;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD4.xy);
    u_xlat9 = u_xlat10_0.w + (-_CutOff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(u_xlat9<0.0);
#else
    u_xlatb9 = u_xlat9<0.0;
#endif
    if((int(u_xlatb9) * int(0xffffffffu))!=0){discard;}
    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
    SV_Target0.xyz = u_xlat1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0;
    u_xlat1.xyz = _BurnedColor.xyz * u_xlat10_0.xyz + (-u_xlat10_0.xyz);
    u_xlat0.xyz = vs_TEXCOORD2.www * u_xlat1.xyz + u_xlat10_0.xyz;
    u_xlat0.w = vs_TEXCOORD3;
    SV_Target1 = u_xlat0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_2 = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb0) ? u_xlat16_2 : 0.0399999991;
    u_xlat0.x = (-vs_TEXCOORD2.w) + 1.0;
    u_xlat0.x = u_xlat0.x * _GrassShininess;
    SV_Target2.w = u_xlat0.x;
    SV_Target2.xy = vec2(0.0399999991, 0.0399999991);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_HDR_ON" "INSTANCING_ON" "MHY_SHADER_MIDDLE" "SOFT_SAMPLE_HEIGHT_ON" "DITHER_FADE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	int unity_BaseInstanceID;
uniform 	float _NoiseScale;
uniform 	vec4 _WorldOffsetRange;
uniform 	float _HeightScale;
uniform 	float _Billboard;
uniform 	float _VegetationMoveScale;
uniform 	vec4 _LocalWindsMapSize;
uniform 	vec4 _LargeWindParam;
uniform 	vec4 _GlobalWind;
uniform 	vec4 _LocalWindsMapCameraInfo;
uniform 	float _GrassTipLighting;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BurnedColor;
uniform 	float _RootColorScale;
uniform 	float _RootColorOffset;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _Heightmap;
uniform lowp sampler2D _Noisemap;
uniform lowp sampler2D _LocalWindsMap;
in highp vec4 in_POSITION0;
in highp vec4 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec2 in_TEXCOORD2;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp float vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec3 u_xlat0;
int u_xlati0;
vec3 u_xlat1;
uvec3 u_xlatu1;
vec4 u_xlat2;
uvec3 u_xlatu2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
uvec2 u_xlatu5;
vec4 u_xlat6;
vec3 u_xlat7;
vec2 u_xlat8;
float u_xlat9;
int u_xlati9;
float u_xlat11;
uint u_xlatu11;
int u_xlati18;
float u_xlat20;
vec2 u_xlat23;
float u_xlat27;
bool u_xlatb27;
float u_xlat28;
uint u_xlatu28;
bool u_xlatb28;
float u_xlat29;
bool u_xlatb29;
float u_xlat30;
void main()
{
    u_xlat0.z = 0.0;
    u_xlati9 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati9 = u_xlati9 << 2;
    u_xlat1.xyz = in_TEXCOORD0.yyy * unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_TEXCOORD0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat2.xy = u_xlat1.xz + (-_LocalWindsMapSize.xy);
    u_xlat2.xy = vec2(u_xlat2.x / _LocalWindsMapSize.z, u_xlat2.y / _LocalWindsMapSize.w);
    u_xlat2.xy = u_xlat2.xy + vec2(0.5, 0.5);
    u_xlat2 = textureLod(_LocalWindsMap, u_xlat2.xy, 0.0);
    u_xlat27 = dot(u_xlat2.xy, u_xlat2.xy);
    u_xlat27 = sqrt(u_xlat27);
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(9.99999975e-05>=u_xlat27);
#else
    u_xlatb27 = 9.99999975e-05>=u_xlat27;
#endif
    u_xlat27 = u_xlatb27 ? 1.0 : float(0.0);
    u_xlat3.xy = (-u_xlat2.xy) + vec2(0.5, 0.5);
    u_xlat2.xy = vec2(u_xlat27) * u_xlat3.xy + u_xlat2.xy;
    u_xlat2.xy = u_xlat2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat27 = dot(u_xlat2.xy, u_xlat2.xy);
    u_xlat27 = max(u_xlat27, 0.00100000005);
    u_xlat3.x = inversesqrt(u_xlat27);
    u_xlat3.yz = u_xlat2.xy * u_xlat3.xx;
    u_xlat0.x = u_xlat3.z;
    u_xlat0.xz = (-u_xlat3.xy) * vec2(0.0, 1.0) + u_xlat0.xz;
    u_xlat27 = (-in_TEXCOORD1.x) + unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].x;
    u_xlat28 = u_xlat27 * 3.0;
    u_xlat28 = _Time.y * 3.0 + u_xlat28;
    u_xlat28 = u_xlat28 + 0.5;
    u_xlat28 = fract(u_xlat28);
    u_xlat28 = u_xlat28 * 2.0 + -1.0;
    u_xlat3.x = abs(u_xlat28) * abs(u_xlat28);
    u_xlat28 = -abs(u_xlat28) * 2.0 + 3.0;
    u_xlat28 = u_xlat28 * u_xlat3.x;
    u_xlat3.x = u_xlat2.z * 1.5;
    u_xlat28 = u_xlat28 * u_xlat3.x;
    u_xlat0.xz = u_xlat0.xz * vec2(u_xlat28);
    u_xlat0.xz = u_xlat0.xz * vec2(0.150000006, 0.150000006);
    u_xlat0.xz = u_xlat3.yz * vec2(u_xlat28) + u_xlat0.xz;
    u_xlat0.xz = u_xlat0.xz + u_xlat2.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlatb28 = !!(0.00199999986<u_xlat2.z);
#else
    u_xlatb28 = 0.00199999986<u_xlat2.z;
#endif
    u_xlat20 = (-u_xlat2.w) * _LocalWindsMapCameraInfo.y + _LocalWindsMapCameraInfo.x;
    u_xlat0.xz = (bool(u_xlatb28)) ? u_xlat0.xz : u_xlat2.xy;
    u_xlat2.xy = vec2(_WorldOffsetRange.z + float(2.0), _WorldOffsetRange.w + float(2.0));
    u_xlat3.xy = u_xlat1.xz + (-_WorldOffsetRange.xy);
    u_xlat3.xy = u_xlat3.xy + vec2(1.0, 1.0);
    u_xlat2.xy = u_xlat3.xy / u_xlat2.xy;
    u_xlat2.xy = u_xlat2.xy * _WorldOffsetRange.zw + vec2(-0.5, -0.5);
    u_xlat3.xy = floor(u_xlat2.xy);
    u_xlat2.xy = u_xlat2.xy + (-u_xlat3.xy);
    u_xlat4 = u_xlat3.xyxy + vec4(0.5, 1.5, 1.5, 1.5);
    u_xlat3 = u_xlat3.xyxy + vec4(1.5, 0.5, 0.5, 0.5);
    u_xlat3 = vec4(u_xlat3.x / _WorldOffsetRange.z, u_xlat3.y / _WorldOffsetRange.w, u_xlat3.z / _WorldOffsetRange.z, u_xlat3.w / _WorldOffsetRange.w);
    u_xlat4 = vec4(u_xlat4.x / _WorldOffsetRange.z, u_xlat4.y / _WorldOffsetRange.w, u_xlat4.z / _WorldOffsetRange.z, u_xlat4.w / _WorldOffsetRange.w);
    u_xlat28 = textureLod(_Heightmap, u_xlat4.zw, 0.0).x;
    u_xlat29 = textureLod(_Heightmap, u_xlat4.xy, 0.0).x;
    u_xlat28 = u_xlat28 + (-u_xlat29);
    u_xlat28 = u_xlat2.x * u_xlat28 + u_xlat29;
    u_xlat29 = textureLod(_Heightmap, u_xlat3.xy, 0.0).x;
    u_xlat3.x = textureLod(_Heightmap, u_xlat3.zw, 0.0).x;
    u_xlat29 = u_xlat29 + (-u_xlat3.x);
    u_xlat2.x = u_xlat2.x * u_xlat29 + u_xlat3.x;
    u_xlat28 = u_xlat28 + (-u_xlat2.x);
    u_xlat28 = u_xlat2.y * u_xlat28 + u_xlat2.x;
    u_xlat2.x = u_xlat28 * _HeightScale + u_xlat1.y;
    u_xlat2.x = (-u_xlat2.x) + u_xlat20;
    u_xlat2.x = u_xlat2.x * 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat2.x = (-u_xlat2.x) + 1.0;
    u_xlat11 = float(floatBitsToUint(unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2]).w);
    u_xlat11 = u_xlat11 * 5.96046448e-08;
    u_xlatu11 = uint(u_xlat11);
    u_xlatu11 = u_xlatu11 & 3u;
    u_xlat11 = float(u_xlatu11);
    u_xlat20 = fract(u_xlat27);
    u_xlat27 = u_xlat27 + unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].y;
    u_xlat3.xy = vec2(u_xlat27) * vec2(22.0, 33.0);
    u_xlat3.xy = fract(u_xlat3.xy);
    u_xlat3.xy = u_xlat3.xy + vec2(-0.5, -0.5);
    u_xlat3.xz = u_xlat3.xy * vec2(0.200000003, 0.200000003);
    u_xlat27 = u_xlat11 + u_xlat20;
    u_xlat27 = u_xlat27 + -0.5;
    u_xlat11 = u_xlat27 * 0.333000004;
    u_xlat4.y = u_xlat27 * 0.333000004 + -1.0;
    u_xlat27 = in_TEXCOORD1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
    u_xlat11 = u_xlat11 * u_xlat27;
    u_xlat2.x = u_xlat11 * u_xlat2.x;
    u_xlat0.xz = u_xlat0.xz * u_xlat2.xx;
    u_xlat0.xz = u_xlat0.xz * vec2(vec2(_VegetationMoveScale, _VegetationMoveScale));
    u_xlat2.x = dot(_GlobalWind.xyz, _GlobalWind.xyz);
    u_xlat2.x = max(u_xlat2.x, 0.00100000005);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat5 = u_xlat2.xxxx * _GlobalWind.xzxz;
    u_xlat2.xz = vec2(u_xlat5.z * _LargeWindParam.z, u_xlat5.w * _LargeWindParam.z);
    u_xlat23.xy = u_xlat1.xz / vec2(_NoiseScale);
    u_xlat5.xy = _LargeWindParam.xx * u_xlat5.xy + u_xlat23.xy;
    u_xlat5.xy = textureLod(_Noisemap, u_xlat5.xy, 0.0).xy;
    u_xlat5.xy = u_xlat5.xy + vec2(-0.5, -0.5);
    u_xlat5.xy = u_xlat5.xy * _LargeWindParam.yy + vec2(0.5, 0.5);
    u_xlat5.xy = vec2(u_xlat11) * u_xlat5.xy;
    u_xlat6.xz = u_xlat5.xy * u_xlat2.xz + u_xlat0.xz;
    u_xlat2.xz = u_xlat2.xz * u_xlat5.xy;
    u_xlat6.y = 0.0;
    u_xlat5.y = hlslcc_mtx4x4unity_MatrixV[0].x;
    u_xlat5.x = hlslcc_mtx4x4unity_MatrixV[2].x;
    u_xlat29 = dot(u_xlat5.xy, u_xlat5.xy);
    u_xlat29 = inversesqrt(u_xlat29);
    u_xlat5.xy = vec2(u_xlat29) * u_xlat5.xy;
    u_xlat7.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat7.xyz = unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat7.xyz;
    u_xlat7.xyz = unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat7.xyz;
    u_xlat7.xyz = u_xlat7.xyz + unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat7.xyz = (-u_xlat1.xyz) + u_xlat7.xyz;
    u_xlat8.x = unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].x;
    u_xlat8.y = unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].x;
    u_xlat29 = dot(u_xlat8.xy, u_xlat8.xy);
    u_xlat29 = inversesqrt(u_xlat29);
    u_xlat23.xy = vec2(u_xlat29) * u_xlat8.xy;
    u_xlat29 = u_xlat23.y * u_xlat7.z;
    u_xlat29 = u_xlat7.x * u_xlat23.x + (-u_xlat29);
    u_xlat30 = dot(u_xlat7.zx, u_xlat23.xy);
    u_xlat23.xy = u_xlat5.xy * vec2(u_xlat30);
    u_xlat30 = u_xlat29 * u_xlat5.y + (-u_xlat23.x);
    u_xlat29 = u_xlat29 * u_xlat5.x + u_xlat23.y;
    u_xlat29 = u_xlat7.z + u_xlat29;
    u_xlat7.z = (-u_xlat29) * _Billboard + u_xlat7.z;
    u_xlat29 = u_xlat7.x + u_xlat30;
    u_xlat7.x = (-u_xlat29) * _Billboard + u_xlat7.x;
    u_xlat5.xyz = u_xlat7.xyz * vec3(0.100000001, 1.0, 0.100000001) + u_xlat6.xyz;
    u_xlat29 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat29 = max(u_xlat29, 0.00100000005);
    u_xlat29 = inversesqrt(u_xlat29);
    u_xlat5.xyz = vec3(u_xlat29) * u_xlat5.xyz;
    u_xlat29 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat29 = sqrt(u_xlat29);
    u_xlat6.xyz = u_xlat7.xyz * vec3(0.100000001, 1.0, 0.100000001);
    u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat29) + (-u_xlat6.xyz);
    u_xlat6.xyz = u_xlat1.xyz + u_xlat7.xyz;
    u_xlat6.w = u_xlat28 * _HeightScale + u_xlat6.y;
    u_xlat1.xyz = u_xlat5.xyz + u_xlat6.xwz;
    u_xlatu5.xy = uvec2(65280u, 255u) & floatBitsToUint(unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1]).ww;
    u_xlat5.xy = vec2(u_xlatu5.xy);
    u_xlat28 = u_xlat5.x * 0.00390625;
    u_xlat5.z = u_xlat5.y + -127.0;
    u_xlatu28 = uint(u_xlat28);
    u_xlat28 = float(u_xlatu28);
    u_xlat5.x = u_xlat28 + -127.0;
    u_xlat6.xy = u_xlat5.xz * vec2(0.00787401572, 0.00787401572);
    u_xlat6.xy = u_xlat6.xy * u_xlat6.xy;
    u_xlat28 = u_xlat6.y + u_xlat6.x;
    u_xlat28 = (-u_xlat28) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb29 = !!(0.0<u_xlat28);
#else
    u_xlatb29 = 0.0<u_xlat28;
#endif
    u_xlat28 = sqrt(u_xlat28);
    u_xlat5.y = u_xlatb29 ? u_xlat28 : float(0.0);
    u_xlat6.xyz = u_xlat5.xyz * u_xlat7.yyy;
    u_xlat6.xyz = vec3(u_xlat11) * u_xlat6.xyz;
    u_xlat28 = max(u_xlat11, 9.99999972e-10);
    u_xlat1.xyz = u_xlat6.xyz * vec3(0.00393700786, 0.0, 0.00393700786) + u_xlat1.xyz;
    u_xlat4.xz = u_xlat4.yy * (-u_xlat4.yy);
    u_xlat1.xyz = u_xlat4.xyz * u_xlat7.xyz + u_xlat1.xyz;
    u_xlat4.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat6 = u_xlat4.yyyy * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat6 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat4.xxxx + u_xlat6;
    u_xlat4 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat4.zzzz + u_xlat6;
    gl_Position = u_xlat4 + hlslcc_mtx4x4unity_MatrixVPZero[3];
    u_xlat3.y = 0.0;
    vs_TEXCOORD0.xyz = u_xlat5.xyz * vec3(0.00787401572, 1.0, 0.00787401572) + u_xlat3.xyz;
    vs_TEXCOORD0.w = 0.0;
    u_xlat0.xz = u_xlat0.zx / vec2(u_xlat28);
    u_xlat2.xy = u_xlat2.zx / vec2(u_xlat28);
    u_xlat2.yz = u_xlat0.xz + u_xlat2.xy;
    u_xlat2.x = 0.0;
    u_xlat2.xyz = u_xlat5.yzx * vec3(1.0, 0.00787401572, 0.00787401572) + u_xlat2.xyz;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat3.xyz = in_NORMAL0.yyy * unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_NORMAL0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_NORMAL0.zzz + u_xlat3.xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
    u_xlat3.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
    u_xlat2.xyz = u_xlat3.zxy * u_xlat2.yzx + (-u_xlat4.xyz);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
    { bool cond = 0.0<u_xlat0.x; u_xlati18 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati18 = int((0.0<u_xlat0.x) ? 0xFFFFFFFFu : uint(0u));
#endif
#ifdef UNITY_ADRENO_ES3
    { bool cond = u_xlat0.x<0.0; u_xlati0 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati0 = int((u_xlat0.x<0.0) ? 0xFFFFFFFFu : uint(0u));
#endif
    u_xlati0 = (-u_xlati18) + u_xlati0;
    u_xlat0.x = float(u_xlati0);
    vs_TEXCOORD1.xyz = u_xlat0.xxx * u_xlat2.xyz;
    vs_TEXCOORD1.w = 0.0;
    u_xlatu1.xyz = uvec3(16711680u, 65280u, 255u) & floatBitsToUint(unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2]).www;
    u_xlat1.xyz = vec3(u_xlatu1.xyz);
    u_xlatu2.xyz = uvec3(16711680u, 65280u, 255u) & floatBitsToUint(unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3]).www;
    u_xlat0.x = max(1.0, unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].w);
    u_xlat0.x = min(u_xlat0.x, 2.0);
    u_xlat0.x = u_xlat0.x + -1.0;
    u_xlat2.xyz = vec3(u_xlatu2.xyz);
    u_xlat2.xyz = u_xlat2.xyz * vec3(5.9838392e-08, 1.53186284e-05, 0.00392156886);
    u_xlat1.xyz = u_xlat1.xyz * vec3(5.9838392e-08, 1.53186284e-05, 0.00392156886) + (-u_xlat2.xyz);
    u_xlat9 = u_xlat27 / _RootColorScale;
    u_xlat9 = u_xlat9 + _RootColorOffset;
#ifdef UNITY_ADRENO_ES3
    u_xlat9 = min(max(u_xlat9, 0.0), 1.0);
#else
    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz + u_xlat2.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _BurnedColor.xyz;
    u_xlat1.xyz = u_xlat0.xxx * u_xlat2.xyz + u_xlat1.xyz;
    vs_TEXCOORD2.w = u_xlat0.x;
    u_xlat0.x = u_xlat27 + -0.600000024;
    vs_TEXCOORD3 = u_xlat27;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = _GrassTipLighting * u_xlat0.x + 1.0;
    vs_TEXCOORD2.xyz = u_xlat0.xxx * u_xlat1.xyz;
    vs_TEXCOORD4.xy = in_TEXCOORD2.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	float _GrassShininess;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	float _CutOff;
uniform 	vec4 _BurnedColor;
uniform lowp sampler2D _MainTex;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp float vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec4 u_xlat0;
lowp vec4 u_xlat10_0;
bool u_xlatb0;
vec3 u_xlat1;
mediump float u_xlat16_2;
float u_xlat9;
bool u_xlatb9;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD4.xy);
    u_xlat9 = u_xlat10_0.w + (-_CutOff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(u_xlat9<0.0);
#else
    u_xlatb9 = u_xlat9<0.0;
#endif
    if((int(u_xlatb9) * int(0xffffffffu))!=0){discard;}
    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
    SV_Target0.xyz = u_xlat1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0;
    u_xlat1.xyz = _BurnedColor.xyz * u_xlat10_0.xyz + (-u_xlat10_0.xyz);
    u_xlat0.xyz = vs_TEXCOORD2.www * u_xlat1.xyz + u_xlat10_0.xyz;
    u_xlat0.w = vs_TEXCOORD3;
    SV_Target1 = u_xlat0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_2 = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb0) ? u_xlat16_2 : 0.0399999991;
    u_xlat0.x = (-vs_TEXCOORD2.w) + 1.0;
    u_xlat0.x = u_xlat0.x * _GrassShininess;
    SV_Target2.w = u_xlat0.x;
    SV_Target2.xy = vec2(0.0399999991, 0.0399999991);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_HDR_ON" "MHY_SHADER_LOW" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	float _NoiseScale;
uniform 	vec4 _WorldOffsetRange;
uniform 	float _HeightScale;
uniform 	float _Billboard;
uniform 	vec4 _LargeWindParam;
uniform 	vec4 _GlobalWind;
uniform 	float _GrassTipLighting;
uniform 	vec4 _MainTex_ST;
uniform 	float _RootColorScale;
uniform 	float _RootColorOffset;
uniform highp sampler2D _Heightmap;
uniform lowp sampler2D _Noisemap;
in highp vec4 in_POSITION0;
in highp vec4 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec2 in_TEXCOORD2;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp float vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec3 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
vec3 u_xlat5;
vec3 u_xlat6;
vec4 u_xlat7;
int u_xlati8;
vec2 u_xlat9;
vec2 u_xlat17;
float u_xlat24;
float u_xlat25;
float u_xlat26;
float u_xlat27;
void main()
{
    u_xlat0.y = 0.0;
    u_xlat24 = dot(_GlobalWind.xyz, _GlobalWind.xyz);
    u_xlat24 = max(u_xlat24, 0.00100000005);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat1 = vec4(u_xlat24) * _GlobalWind.xzxz;
    u_xlat17.xy = vec2(u_xlat1.z * _LargeWindParam.z, u_xlat1.w * _LargeWindParam.z);
    u_xlat2.xyz = in_TEXCOORD0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[2].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TEXCOORD0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat3.xy = u_xlat2.xz / vec2(_NoiseScale);
    u_xlat1.xy = _LargeWindParam.xx * u_xlat1.xy + u_xlat3.xy;
    u_xlat1.xy = textureLod(_Noisemap, u_xlat1.xy, 0.0).xy;
    u_xlat1.xy = u_xlat1.xy + vec2(-0.5, -0.5);
    u_xlat1.xy = u_xlat1.xy * _LargeWindParam.yy + vec2(0.5, 0.5);
    u_xlat24 = (-in_TEXCOORD1.x) + hlslcc_mtx4x4unity_ObjectToWorld[1].x;
    u_xlat26 = fract(u_xlat24);
    u_xlat24 = u_xlat24 + hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat3.xy = vec2(u_xlat24) * vec2(22.0, 33.0);
    u_xlat3.xy = fract(u_xlat3.xy);
    u_xlat3.xy = u_xlat3.xy + vec2(-0.5, -0.5);
    u_xlat3.xz = u_xlat3.xy * vec2(0.200000003, 0.200000003);
    u_xlat24 = u_xlat26 + -0.5;
    u_xlat26 = u_xlat24 * 0.333000004;
    u_xlat4.y = u_xlat24 * 0.333000004 + -1.0;
    u_xlat24 = in_TEXCOORD1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat26 = u_xlat26 * u_xlat24;
    u_xlat1.xy = u_xlat1.xy * vec2(u_xlat26);
    u_xlat0.xz = u_xlat17.xy * u_xlat1.xy;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[0].x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[2].x;
    u_xlat17.x = dot(u_xlat1.xy, u_xlat1.xy);
    u_xlat17.x = inversesqrt(u_xlat17.x);
    u_xlat1.xy = u_xlat17.xx * u_xlat1.xy;
    u_xlat5.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;
    u_xlat5.y = hlslcc_mtx4x4unity_ObjectToWorld[2].x;
    u_xlat17.x = dot(u_xlat5.xy, u_xlat5.xy);
    u_xlat17.x = inversesqrt(u_xlat17.x);
    u_xlat17.xy = u_xlat17.xx * u_xlat5.xy;
    u_xlat5.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat5.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat5.xyz;
    u_xlat5.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat5.xyz;
    u_xlat5.xyz = u_xlat5.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat5.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
    u_xlat27 = u_xlat17.y * u_xlat5.z;
    u_xlat27 = u_xlat5.x * u_xlat17.x + (-u_xlat27);
    u_xlat17.x = dot(u_xlat5.zx, u_xlat17.xy);
    u_xlat17.xy = u_xlat1.xy * u_xlat17.xx;
    u_xlat9.x = u_xlat27 * u_xlat1.y + (-u_xlat17.x);
    u_xlat1.x = u_xlat27 * u_xlat1.x + u_xlat17.y;
    u_xlat1.x = u_xlat5.z + u_xlat1.x;
    u_xlat5.z = (-u_xlat1.x) * _Billboard + u_xlat5.z;
    u_xlat1.x = u_xlat5.x + u_xlat9.x;
    u_xlat5.x = (-u_xlat1.x) * _Billboard + u_xlat5.x;
    u_xlat1.x = u_xlat26 * u_xlat5.y;
    u_xlat9.x = max(u_xlat26, 9.99999972e-10);
    u_xlat9.xy = u_xlat0.zx / u_xlat9.xx;
    u_xlat0.xyz = u_xlat5.xyz * vec3(0.100000001, 1.0, 0.100000001) + u_xlat0.xyz;
    u_xlat6.yz = u_xlat9.xy + vec2(-1.0, -1.0);
    u_xlat9.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9.x = max(u_xlat9.x, 0.00100000005);
    u_xlat9.x = inversesqrt(u_xlat9.x);
    u_xlat0.xyz = u_xlat0.xyz * u_xlat9.xxx;
    u_xlat9.x = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat9.x = sqrt(u_xlat9.x);
    u_xlat7.xyz = u_xlat5.xyz * vec3(0.100000001, 1.0, 0.100000001);
    u_xlat0.xyz = u_xlat0.xyz * u_xlat9.xxx + (-u_xlat7.xyz);
    u_xlat7.xyz = u_xlat2.xyz + u_xlat5.xyz;
    u_xlat9.xy = u_xlat2.xz + (-_WorldOffsetRange.xy);
    u_xlat9.xy = u_xlat9.xy + vec2(1.0, 1.0);
    u_xlat2.xy = vec2(_WorldOffsetRange.z + float(2.0), _WorldOffsetRange.w + float(2.0));
    u_xlat9.xy = u_xlat9.xy / u_xlat2.xy;
    u_xlat9.x = textureLod(_Heightmap, u_xlat9.xy, 0.0).x;
    u_xlat7.w = u_xlat9.x * _HeightScale + u_xlat7.y;
    u_xlat0.xyz = u_xlat0.xyz + u_xlat7.xwz;
    u_xlat0.xyz = u_xlat1.xxx * vec3(-0.5, 0.0, -0.5) + u_xlat0.xyz;
    u_xlat4.xz = u_xlat4.yy * (-u_xlat4.yy);
    u_xlat0.xyz = u_xlat4.xyz * u_xlat5.xyz + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVPZero[3];
    u_xlat3.y = 0.0;
    vs_TEXCOORD0.xyz = u_xlat3.xyz + vec3(-1.0, 0.0, -1.0);
    vs_TEXCOORD0.w = 0.0;
    u_xlat1.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xxx;
    u_xlat1.x = dot(u_xlat6.yz, u_xlat6.yz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat6.x = 0.0;
    u_xlat1.xyz = u_xlat1.xxx * u_xlat6.xyz;
    u_xlat2.xyz = in_NORMAL0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_NORMAL0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_NORMAL0.zzz + u_xlat2.xyz;
    u_xlat25 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat25 = inversesqrt(u_xlat25);
    u_xlat2.xyz = vec3(u_xlat25) * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
    u_xlat25 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat25 = inversesqrt(u_xlat25);
    u_xlat2.xyz = vec3(u_xlat25) * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.zxy * u_xlat1.yzx + (-u_xlat3.xyz);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
#ifdef UNITY_ADRENO_ES3
    { bool cond = 0.0<u_xlat0.x; u_xlati8 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati8 = int((0.0<u_xlat0.x) ? 0xFFFFFFFFu : uint(0u));
#endif
#ifdef UNITY_ADRENO_ES3
    { bool cond = u_xlat0.x<0.0; u_xlati0 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati0 = int((u_xlat0.x<0.0) ? 0xFFFFFFFFu : uint(0u));
#endif
    u_xlati0 = (-u_xlati8) + u_xlati0;
    u_xlat0.x = float(u_xlati0);
    vs_TEXCOORD1.xyz = u_xlat0.xxx * u_xlat1.xyz;
    vs_TEXCOORD1.w = 0.0;
    u_xlat0.x = u_xlat24 / _RootColorScale;
    u_xlat0.x = u_xlat0.x + _RootColorOffset;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xxx * vec3(-0.501960814, 0.0, 0.0) + vec3(0.501960814, 0.0, 0.0);
    u_xlat1.x = u_xlat24 + -0.600000024;
    vs_TEXCOORD3 = u_xlat24;
    u_xlat24 = max(u_xlat1.x, 0.0);
    u_xlat24 = _GrassTipLighting * u_xlat24 + 1.0;
    vs_TEXCOORD2.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    vs_TEXCOORD2.w = 0.0;
    vs_TEXCOORD4.xy = in_TEXCOORD2.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	float _GrassShininess;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	float _CutOff;
uniform 	vec4 _BurnedColor;
uniform lowp sampler2D _MainTex;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp float vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec4 u_xlat0;
lowp vec4 u_xlat10_0;
bool u_xlatb0;
vec3 u_xlat1;
mediump float u_xlat16_2;
float u_xlat9;
bool u_xlatb9;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD4.xy);
    u_xlat9 = u_xlat10_0.w + (-_CutOff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(u_xlat9<0.0);
#else
    u_xlatb9 = u_xlat9<0.0;
#endif
    if((int(u_xlatb9) * int(0xffffffffu))!=0){discard;}
    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
    SV_Target0.xyz = u_xlat1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0;
    u_xlat1.xyz = _BurnedColor.xyz * u_xlat10_0.xyz + (-u_xlat10_0.xyz);
    u_xlat0.xyz = vs_TEXCOORD2.www * u_xlat1.xyz + u_xlat10_0.xyz;
    u_xlat0.w = vs_TEXCOORD3;
    SV_Target1 = u_xlat0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_2 = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb0) ? u_xlat16_2 : 0.0399999991;
    u_xlat0.x = (-vs_TEXCOORD2.w) + 1.0;
    u_xlat0.x = u_xlat0.x * _GrassShininess;
    SV_Target2.w = u_xlat0.x;
    SV_Target2.xy = vec2(0.0399999991, 0.0399999991);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_HDR_ON" "INSTANCING_ON" "MHY_SHADER_LOW" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	int unity_BaseInstanceID;
uniform 	float _NoiseScale;
uniform 	vec4 _WorldOffsetRange;
uniform 	float _HeightScale;
uniform 	float _Billboard;
uniform 	vec4 _LargeWindParam;
uniform 	vec4 _GlobalWind;
uniform 	float _GrassTipLighting;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BurnedColor;
uniform 	float _RootColorScale;
uniform 	float _RootColorOffset;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _Heightmap;
uniform lowp sampler2D _Noisemap;
in highp vec4 in_POSITION0;
in highp vec4 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec2 in_TEXCOORD2;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp float vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec3 u_xlat0;
uvec3 u_xlatu0;
vec4 u_xlat1;
int u_xlati1;
uvec3 u_xlatu1;
vec3 u_xlat2;
uvec2 u_xlatu2;
vec4 u_xlat3;
vec3 u_xlat4;
vec4 u_xlat5;
vec4 u_xlat6;
vec2 u_xlat7;
float u_xlat8;
uint u_xlatu8;
float u_xlat9;
int u_xlati9;
vec3 u_xlat11;
vec2 u_xlat17;
float u_xlat24;
int u_xlati24;
float u_xlat25;
bool u_xlatb25;
float u_xlat26;
uint u_xlatu26;
float u_xlat28;
void main()
{
    u_xlat0.y = 0.0;
    u_xlat24 = dot(_GlobalWind.xyz, _GlobalWind.xyz);
    u_xlat24 = max(u_xlat24, 0.00100000005);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat1 = vec4(u_xlat24) * _GlobalWind.xzxz;
    u_xlat17.xy = vec2(u_xlat1.z * _LargeWindParam.z, u_xlat1.w * _LargeWindParam.z);
    u_xlati24 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati24 = u_xlati24 << 2;
    u_xlat2.xyz = in_TEXCOORD0.yyy * unity_Builtins0Array[u_xlati24 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz;
    u_xlat2.xyz = unity_Builtins0Array[u_xlati24 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_TEXCOORD0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz + unity_Builtins0Array[u_xlati24 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat3.xy = u_xlat2.xz / vec2(_NoiseScale);
    u_xlat1.xy = _LargeWindParam.xx * u_xlat1.xy + u_xlat3.xy;
    u_xlat1.xy = textureLod(_Noisemap, u_xlat1.xy, 0.0).xy;
    u_xlat1.xy = u_xlat1.xy + vec2(-0.5, -0.5);
    u_xlat1.xy = u_xlat1.xy * _LargeWindParam.yy + vec2(0.5, 0.5);
    u_xlat26 = float(floatBitsToUint(unity_Builtins0Array[u_xlati24 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2]).w);
    u_xlat26 = u_xlat26 * 5.96046448e-08;
    u_xlatu26 = uint(u_xlat26);
    u_xlatu26 = u_xlatu26 & 3u;
    u_xlat26 = float(u_xlatu26);
    u_xlat3.x = (-in_TEXCOORD1.x) + unity_Builtins0Array[u_xlati24 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].x;
    u_xlat11.x = fract(u_xlat3.x);
    u_xlat3.x = u_xlat3.x + unity_Builtins0Array[u_xlati24 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].y;
    u_xlat3.xz = u_xlat3.xx * vec2(22.0, 33.0);
    u_xlat3.xz = fract(u_xlat3.xz);
    u_xlat3.xz = u_xlat3.xz + vec2(-0.5, -0.5);
    u_xlat4.xz = u_xlat3.xz * vec2(0.200000003, 0.200000003);
    u_xlat26 = u_xlat26 + u_xlat11.x;
    u_xlat26 = u_xlat26 + -0.5;
    u_xlat3.x = u_xlat26 * 0.333000004;
    u_xlat5.y = u_xlat26 * 0.333000004 + -1.0;
    u_xlat26 = in_TEXCOORD1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat26 = min(max(u_xlat26, 0.0), 1.0);
#else
    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);
#endif
    u_xlat3.x = u_xlat3.x * u_xlat26;
    u_xlat1.xy = u_xlat1.xy * u_xlat3.xx;
    u_xlat0.xz = u_xlat17.xy * u_xlat1.xy;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[0].x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[2].x;
    u_xlat17.x = dot(u_xlat1.xy, u_xlat1.xy);
    u_xlat17.x = inversesqrt(u_xlat17.x);
    u_xlat1.xy = u_xlat17.xx * u_xlat1.xy;
    u_xlat11.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati24 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat11.xyz = unity_Builtins0Array[u_xlati24 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat11.xyz;
    u_xlat11.xyz = unity_Builtins0Array[u_xlati24 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat11.xyz;
    u_xlat11.xyz = u_xlat11.xyz + unity_Builtins0Array[u_xlati24 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat11.xyz = (-u_xlat2.xyz) + u_xlat11.xyz;
    u_xlat6.x = unity_Builtins0Array[u_xlati24 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].x;
    u_xlat6.y = unity_Builtins0Array[u_xlati24 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].x;
    u_xlat17.x = dot(u_xlat6.xy, u_xlat6.xy);
    u_xlat17.x = inversesqrt(u_xlat17.x);
    u_xlat17.xy = u_xlat17.xx * u_xlat6.xy;
    u_xlat28 = u_xlat17.y * u_xlat11.z;
    u_xlat28 = u_xlat11.x * u_xlat17.x + (-u_xlat28);
    u_xlat17.x = dot(u_xlat11.zx, u_xlat17.xy);
    u_xlat17.xy = u_xlat1.xy * u_xlat17.xx;
    u_xlat9 = u_xlat28 * u_xlat1.y + (-u_xlat17.x);
    u_xlat1.x = u_xlat28 * u_xlat1.x + u_xlat17.y;
    u_xlat1.x = u_xlat11.z + u_xlat1.x;
    u_xlat11.z = (-u_xlat1.x) * _Billboard + u_xlat11.z;
    u_xlat1.x = u_xlat11.x + u_xlat9;
    u_xlat11.x = (-u_xlat1.x) * _Billboard + u_xlat11.x;
    u_xlat1.xyz = u_xlat11.xyz * vec3(0.100000001, 1.0, 0.100000001) + u_xlat0.xyz;
    u_xlat8 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat8 = max(u_xlat8, 0.00100000005);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat1.xyz = vec3(u_xlat8) * u_xlat1.xyz;
    u_xlat8 = dot(u_xlat11.xyz, u_xlat11.xyz);
    u_xlat8 = sqrt(u_xlat8);
    u_xlat6.xyz = u_xlat11.xyz * vec3(0.100000001, 1.0, 0.100000001);
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat8) + (-u_xlat6.xyz);
    u_xlat6.xyz = u_xlat2.xyz + u_xlat11.xyz;
    u_xlat2.xy = u_xlat2.xz + (-_WorldOffsetRange.xy);
    u_xlat2.xy = u_xlat2.xy + vec2(1.0, 1.0);
    u_xlat7.xy = vec2(_WorldOffsetRange.z + float(2.0), _WorldOffsetRange.w + float(2.0));
    u_xlat2.xy = u_xlat2.xy / u_xlat7.xy;
    u_xlat8 = textureLod(_Heightmap, u_xlat2.xy, 0.0).x;
    u_xlat6.w = u_xlat8 * _HeightScale + u_xlat6.y;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat6.xwz;
    u_xlatu2.xy = uvec2(65280u, 255u) & floatBitsToUint(unity_Builtins0Array[u_xlati24 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1]).ww;
    u_xlat2.xy = vec2(u_xlatu2.xy);
    u_xlat8 = u_xlat2.x * 0.00390625;
    u_xlat2.z = u_xlat2.y + -127.0;
    u_xlatu8 = uint(u_xlat8);
    u_xlat8 = float(u_xlatu8);
    u_xlat2.x = u_xlat8 + -127.0;
    u_xlat6.xy = u_xlat2.xz * vec2(0.00787401572, 0.00787401572);
    u_xlat6.xy = u_xlat6.xy * u_xlat6.xy;
    u_xlat8 = u_xlat6.y + u_xlat6.x;
    u_xlat8 = (-u_xlat8) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb25 = !!(0.0<u_xlat8);
#else
    u_xlatb25 = 0.0<u_xlat8;
#endif
    u_xlat8 = sqrt(u_xlat8);
    u_xlat2.y = u_xlatb25 ? u_xlat8 : float(0.0);
    u_xlat6.xyz = u_xlat2.xyz * u_xlat11.yyy;
    u_xlat6.xyz = u_xlat3.xxx * u_xlat6.xyz;
    u_xlat8 = max(u_xlat3.x, 9.99999972e-10);
    u_xlat0.yz = u_xlat0.zx / vec2(u_xlat8);
    u_xlat1.xyz = u_xlat6.xyz * vec3(0.00393700786, 0.0, 0.00393700786) + u_xlat1.xyz;
    u_xlat5.xz = u_xlat5.yy * (-u_xlat5.yy);
    u_xlat1.xyz = u_xlat5.xyz * u_xlat11.xyz + u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat5 = u_xlat3.yyyy * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat5 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat3.xxxx + u_xlat5;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat3.zzzz + u_xlat5;
    gl_Position = u_xlat3 + hlslcc_mtx4x4unity_MatrixVPZero[3];
    u_xlat4.y = 0.0;
    vs_TEXCOORD0.xyz = u_xlat2.xyz * vec3(0.00787401572, 1.0, 0.00787401572) + u_xlat4.xyz;
    vs_TEXCOORD0.w = 0.0;
    u_xlat0.x = 0.0;
    u_xlat0.xyz = u_xlat2.yzx * vec3(1.0, 0.00787401572, 0.00787401572) + u_xlat0.xyz;
    u_xlat25 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat25 = inversesqrt(u_xlat25);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat25);
    u_xlat2.xyz = in_NORMAL0.yyy * unity_Builtins0Array[u_xlati24 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat2.xyz = unity_Builtins0Array[u_xlati24 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_NORMAL0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = unity_Builtins0Array[u_xlati24 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_NORMAL0.zzz + u_xlat2.xyz;
    u_xlat25 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat25 = inversesqrt(u_xlat25);
    u_xlat2.xyz = vec3(u_xlat25) * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat0.xyz * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat0.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
    u_xlat25 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat25 = inversesqrt(u_xlat25);
    u_xlat2.xyz = vec3(u_xlat25) * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat0.xyz * u_xlat2.xyz;
    u_xlat0.xyz = u_xlat2.zxy * u_xlat0.yzx + (-u_xlat3.xyz);
    u_xlat25 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat25 = inversesqrt(u_xlat25);
    u_xlat1.xyz = vec3(u_xlat25) * u_xlat1.xyz;
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat0.xyz);
#ifdef UNITY_ADRENO_ES3
    { bool cond = 0.0<u_xlat1.x; u_xlati9 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati9 = int((0.0<u_xlat1.x) ? 0xFFFFFFFFu : uint(0u));
#endif
#ifdef UNITY_ADRENO_ES3
    { bool cond = u_xlat1.x<0.0; u_xlati1 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati1 = int((u_xlat1.x<0.0) ? 0xFFFFFFFFu : uint(0u));
#endif
    u_xlati1 = (-u_xlati9) + u_xlati1;
    u_xlat1.x = float(u_xlati1);
    vs_TEXCOORD1.xyz = u_xlat0.xyz * u_xlat1.xxx;
    vs_TEXCOORD1.w = 0.0;
    u_xlatu0.xyz = uvec3(16711680u, 65280u, 255u) & floatBitsToUint(unity_Builtins0Array[u_xlati24 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2]).www;
    u_xlat0.xyz = vec3(u_xlatu0.xyz);
    u_xlatu1.xyz = uvec3(16711680u, 65280u, 255u) & floatBitsToUint(unity_Builtins0Array[u_xlati24 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3]).www;
    u_xlat24 = max(1.0, unity_Builtins0Array[u_xlati24 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].w);
    u_xlat24 = min(u_xlat24, 2.0);
    u_xlat24 = u_xlat24 + -1.0;
    u_xlat1.xyz = vec3(u_xlatu1.xyz);
    u_xlat1.xyz = u_xlat1.xyz * vec3(5.9838392e-08, 1.53186284e-05, 0.00392156886);
    u_xlat0.xyz = u_xlat0.xyz * vec3(5.9838392e-08, 1.53186284e-05, 0.00392156886) + (-u_xlat1.xyz);
    u_xlat25 = u_xlat26 / _RootColorScale;
    u_xlat25 = u_xlat25 + _RootColorOffset;
#ifdef UNITY_ADRENO_ES3
    u_xlat25 = min(max(u_xlat25, 0.0), 1.0);
#else
    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
#endif
    u_xlat0.xyz = vec3(u_xlat25) * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat1.xyz = (-u_xlat0.xyz) + _BurnedColor.xyz;
    u_xlat0.xyz = vec3(u_xlat24) * u_xlat1.xyz + u_xlat0.xyz;
    vs_TEXCOORD2.w = u_xlat24;
    u_xlat24 = u_xlat26 + -0.600000024;
    vs_TEXCOORD3 = u_xlat26;
    u_xlat24 = max(u_xlat24, 0.0);
    u_xlat24 = _GrassTipLighting * u_xlat24 + 1.0;
    vs_TEXCOORD2.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    vs_TEXCOORD4.xy = in_TEXCOORD2.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	float _GrassShininess;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	float _CutOff;
uniform 	vec4 _BurnedColor;
uniform lowp sampler2D _MainTex;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp float vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec4 u_xlat0;
lowp vec4 u_xlat10_0;
bool u_xlatb0;
vec3 u_xlat1;
mediump float u_xlat16_2;
float u_xlat9;
bool u_xlatb9;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD4.xy);
    u_xlat9 = u_xlat10_0.w + (-_CutOff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(u_xlat9<0.0);
#else
    u_xlatb9 = u_xlat9<0.0;
#endif
    if((int(u_xlatb9) * int(0xffffffffu))!=0){discard;}
    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
    SV_Target0.xyz = u_xlat1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0;
    u_xlat1.xyz = _BurnedColor.xyz * u_xlat10_0.xyz + (-u_xlat10_0.xyz);
    u_xlat0.xyz = vs_TEXCOORD2.www * u_xlat1.xyz + u_xlat10_0.xyz;
    u_xlat0.w = vs_TEXCOORD3;
    SV_Target1 = u_xlat0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_2 = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb0) ? u_xlat16_2 : 0.0399999991;
    u_xlat0.x = (-vs_TEXCOORD2.w) + 1.0;
    u_xlat0.x = u_xlat0.x * _GrassShininess;
    SV_Target2.w = u_xlat0.x;
    SV_Target2.xy = vec2(0.0399999991, 0.0399999991);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_HDR_ON" "MHY_SHADER_LOW" "DITHER_FADE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	float _NoiseScale;
uniform 	vec4 _WorldOffsetRange;
uniform 	float _HeightScale;
uniform 	float _Billboard;
uniform 	vec4 _LargeWindParam;
uniform 	vec4 _GlobalWind;
uniform 	float _GrassTipLighting;
uniform 	vec4 _MainTex_ST;
uniform 	float _RootColorScale;
uniform 	float _RootColorOffset;
uniform highp sampler2D _Heightmap;
uniform lowp sampler2D _Noisemap;
in highp vec4 in_POSITION0;
in highp vec4 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec2 in_TEXCOORD2;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp float vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec3 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
vec3 u_xlat5;
vec3 u_xlat6;
vec4 u_xlat7;
int u_xlati8;
vec2 u_xlat9;
vec2 u_xlat17;
float u_xlat24;
float u_xlat25;
float u_xlat26;
float u_xlat27;
void main()
{
    u_xlat0.y = 0.0;
    u_xlat24 = dot(_GlobalWind.xyz, _GlobalWind.xyz);
    u_xlat24 = max(u_xlat24, 0.00100000005);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat1 = vec4(u_xlat24) * _GlobalWind.xzxz;
    u_xlat17.xy = vec2(u_xlat1.z * _LargeWindParam.z, u_xlat1.w * _LargeWindParam.z);
    u_xlat2.xyz = in_TEXCOORD0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[2].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TEXCOORD0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat3.xy = u_xlat2.xz / vec2(_NoiseScale);
    u_xlat1.xy = _LargeWindParam.xx * u_xlat1.xy + u_xlat3.xy;
    u_xlat1.xy = textureLod(_Noisemap, u_xlat1.xy, 0.0).xy;
    u_xlat1.xy = u_xlat1.xy + vec2(-0.5, -0.5);
    u_xlat1.xy = u_xlat1.xy * _LargeWindParam.yy + vec2(0.5, 0.5);
    u_xlat24 = (-in_TEXCOORD1.x) + hlslcc_mtx4x4unity_ObjectToWorld[1].x;
    u_xlat26 = fract(u_xlat24);
    u_xlat24 = u_xlat24 + hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat3.xy = vec2(u_xlat24) * vec2(22.0, 33.0);
    u_xlat3.xy = fract(u_xlat3.xy);
    u_xlat3.xy = u_xlat3.xy + vec2(-0.5, -0.5);
    u_xlat3.xz = u_xlat3.xy * vec2(0.200000003, 0.200000003);
    u_xlat24 = u_xlat26 + -0.5;
    u_xlat26 = u_xlat24 * 0.333000004;
    u_xlat4.y = u_xlat24 * 0.333000004 + -1.0;
    u_xlat24 = in_TEXCOORD1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat26 = u_xlat26 * u_xlat24;
    u_xlat1.xy = u_xlat1.xy * vec2(u_xlat26);
    u_xlat0.xz = u_xlat17.xy * u_xlat1.xy;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[0].x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[2].x;
    u_xlat17.x = dot(u_xlat1.xy, u_xlat1.xy);
    u_xlat17.x = inversesqrt(u_xlat17.x);
    u_xlat1.xy = u_xlat17.xx * u_xlat1.xy;
    u_xlat5.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;
    u_xlat5.y = hlslcc_mtx4x4unity_ObjectToWorld[2].x;
    u_xlat17.x = dot(u_xlat5.xy, u_xlat5.xy);
    u_xlat17.x = inversesqrt(u_xlat17.x);
    u_xlat17.xy = u_xlat17.xx * u_xlat5.xy;
    u_xlat5.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat5.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat5.xyz;
    u_xlat5.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat5.xyz;
    u_xlat5.xyz = u_xlat5.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat5.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
    u_xlat27 = u_xlat17.y * u_xlat5.z;
    u_xlat27 = u_xlat5.x * u_xlat17.x + (-u_xlat27);
    u_xlat17.x = dot(u_xlat5.zx, u_xlat17.xy);
    u_xlat17.xy = u_xlat1.xy * u_xlat17.xx;
    u_xlat9.x = u_xlat27 * u_xlat1.y + (-u_xlat17.x);
    u_xlat1.x = u_xlat27 * u_xlat1.x + u_xlat17.y;
    u_xlat1.x = u_xlat5.z + u_xlat1.x;
    u_xlat5.z = (-u_xlat1.x) * _Billboard + u_xlat5.z;
    u_xlat1.x = u_xlat5.x + u_xlat9.x;
    u_xlat5.x = (-u_xlat1.x) * _Billboard + u_xlat5.x;
    u_xlat1.x = u_xlat26 * u_xlat5.y;
    u_xlat9.x = max(u_xlat26, 9.99999972e-10);
    u_xlat9.xy = u_xlat0.zx / u_xlat9.xx;
    u_xlat0.xyz = u_xlat5.xyz * vec3(0.100000001, 1.0, 0.100000001) + u_xlat0.xyz;
    u_xlat6.yz = u_xlat9.xy + vec2(-1.0, -1.0);
    u_xlat9.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9.x = max(u_xlat9.x, 0.00100000005);
    u_xlat9.x = inversesqrt(u_xlat9.x);
    u_xlat0.xyz = u_xlat0.xyz * u_xlat9.xxx;
    u_xlat9.x = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat9.x = sqrt(u_xlat9.x);
    u_xlat7.xyz = u_xlat5.xyz * vec3(0.100000001, 1.0, 0.100000001);
    u_xlat0.xyz = u_xlat0.xyz * u_xlat9.xxx + (-u_xlat7.xyz);
    u_xlat7.xyz = u_xlat2.xyz + u_xlat5.xyz;
    u_xlat9.xy = u_xlat2.xz + (-_WorldOffsetRange.xy);
    u_xlat9.xy = u_xlat9.xy + vec2(1.0, 1.0);
    u_xlat2.xy = vec2(_WorldOffsetRange.z + float(2.0), _WorldOffsetRange.w + float(2.0));
    u_xlat9.xy = u_xlat9.xy / u_xlat2.xy;
    u_xlat9.x = textureLod(_Heightmap, u_xlat9.xy, 0.0).x;
    u_xlat7.w = u_xlat9.x * _HeightScale + u_xlat7.y;
    u_xlat0.xyz = u_xlat0.xyz + u_xlat7.xwz;
    u_xlat0.xyz = u_xlat1.xxx * vec3(-0.5, 0.0, -0.5) + u_xlat0.xyz;
    u_xlat4.xz = u_xlat4.yy * (-u_xlat4.yy);
    u_xlat0.xyz = u_xlat4.xyz * u_xlat5.xyz + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVPZero[3];
    u_xlat3.y = 0.0;
    vs_TEXCOORD0.xyz = u_xlat3.xyz + vec3(-1.0, 0.0, -1.0);
    vs_TEXCOORD0.w = 0.0;
    u_xlat1.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xxx;
    u_xlat1.x = dot(u_xlat6.yz, u_xlat6.yz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat6.x = 0.0;
    u_xlat1.xyz = u_xlat1.xxx * u_xlat6.xyz;
    u_xlat2.xyz = in_NORMAL0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_NORMAL0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_NORMAL0.zzz + u_xlat2.xyz;
    u_xlat25 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat25 = inversesqrt(u_xlat25);
    u_xlat2.xyz = vec3(u_xlat25) * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
    u_xlat25 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat25 = inversesqrt(u_xlat25);
    u_xlat2.xyz = vec3(u_xlat25) * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.zxy * u_xlat1.yzx + (-u_xlat3.xyz);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
#ifdef UNITY_ADRENO_ES3
    { bool cond = 0.0<u_xlat0.x; u_xlati8 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati8 = int((0.0<u_xlat0.x) ? 0xFFFFFFFFu : uint(0u));
#endif
#ifdef UNITY_ADRENO_ES3
    { bool cond = u_xlat0.x<0.0; u_xlati0 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati0 = int((u_xlat0.x<0.0) ? 0xFFFFFFFFu : uint(0u));
#endif
    u_xlati0 = (-u_xlati8) + u_xlati0;
    u_xlat0.x = float(u_xlati0);
    vs_TEXCOORD1.xyz = u_xlat0.xxx * u_xlat1.xyz;
    vs_TEXCOORD1.w = 0.0;
    u_xlat0.x = u_xlat24 / _RootColorScale;
    u_xlat0.x = u_xlat0.x + _RootColorOffset;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xxx * vec3(-0.501960814, 0.0, 0.0) + vec3(0.501960814, 0.0, 0.0);
    u_xlat1.x = u_xlat24 + -0.600000024;
    vs_TEXCOORD3 = u_xlat24;
    u_xlat24 = max(u_xlat1.x, 0.0);
    u_xlat24 = _GrassTipLighting * u_xlat24 + 1.0;
    vs_TEXCOORD2.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    vs_TEXCOORD2.w = 0.0;
    vs_TEXCOORD4.xy = in_TEXCOORD2.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	float _GrassShininess;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	float _CutOff;
uniform 	vec4 _BurnedColor;
uniform lowp sampler2D _MainTex;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp float vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec4 u_xlat0;
lowp vec4 u_xlat10_0;
bool u_xlatb0;
vec3 u_xlat1;
mediump float u_xlat16_2;
float u_xlat9;
bool u_xlatb9;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD4.xy);
    u_xlat9 = u_xlat10_0.w + (-_CutOff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(u_xlat9<0.0);
#else
    u_xlatb9 = u_xlat9<0.0;
#endif
    if((int(u_xlatb9) * int(0xffffffffu))!=0){discard;}
    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
    SV_Target0.xyz = u_xlat1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0;
    u_xlat1.xyz = _BurnedColor.xyz * u_xlat10_0.xyz + (-u_xlat10_0.xyz);
    u_xlat0.xyz = vs_TEXCOORD2.www * u_xlat1.xyz + u_xlat10_0.xyz;
    u_xlat0.w = vs_TEXCOORD3;
    SV_Target1 = u_xlat0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_2 = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb0) ? u_xlat16_2 : 0.0399999991;
    u_xlat0.x = (-vs_TEXCOORD2.w) + 1.0;
    u_xlat0.x = u_xlat0.x * _GrassShininess;
    SV_Target2.w = u_xlat0.x;
    SV_Target2.xy = vec2(0.0399999991, 0.0399999991);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_HDR_ON" "INSTANCING_ON" "MHY_SHADER_LOW" "DITHER_FADE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	int unity_BaseInstanceID;
uniform 	float _NoiseScale;
uniform 	vec4 _WorldOffsetRange;
uniform 	float _HeightScale;
uniform 	float _Billboard;
uniform 	vec4 _LargeWindParam;
uniform 	vec4 _GlobalWind;
uniform 	float _GrassTipLighting;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BurnedColor;
uniform 	float _RootColorScale;
uniform 	float _RootColorOffset;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _Heightmap;
uniform lowp sampler2D _Noisemap;
in highp vec4 in_POSITION0;
in highp vec4 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec2 in_TEXCOORD2;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp float vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec3 u_xlat0;
uvec3 u_xlatu0;
vec4 u_xlat1;
int u_xlati1;
uvec3 u_xlatu1;
vec3 u_xlat2;
uvec2 u_xlatu2;
vec4 u_xlat3;
vec3 u_xlat4;
vec4 u_xlat5;
vec4 u_xlat6;
vec2 u_xlat7;
float u_xlat8;
uint u_xlatu8;
float u_xlat9;
int u_xlati9;
vec3 u_xlat11;
vec2 u_xlat17;
float u_xlat24;
int u_xlati24;
float u_xlat25;
bool u_xlatb25;
float u_xlat26;
uint u_xlatu26;
float u_xlat28;
void main()
{
    u_xlat0.y = 0.0;
    u_xlat24 = dot(_GlobalWind.xyz, _GlobalWind.xyz);
    u_xlat24 = max(u_xlat24, 0.00100000005);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat1 = vec4(u_xlat24) * _GlobalWind.xzxz;
    u_xlat17.xy = vec2(u_xlat1.z * _LargeWindParam.z, u_xlat1.w * _LargeWindParam.z);
    u_xlati24 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati24 = u_xlati24 << 2;
    u_xlat2.xyz = in_TEXCOORD0.yyy * unity_Builtins0Array[u_xlati24 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz;
    u_xlat2.xyz = unity_Builtins0Array[u_xlati24 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_TEXCOORD0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz + unity_Builtins0Array[u_xlati24 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat3.xy = u_xlat2.xz / vec2(_NoiseScale);
    u_xlat1.xy = _LargeWindParam.xx * u_xlat1.xy + u_xlat3.xy;
    u_xlat1.xy = textureLod(_Noisemap, u_xlat1.xy, 0.0).xy;
    u_xlat1.xy = u_xlat1.xy + vec2(-0.5, -0.5);
    u_xlat1.xy = u_xlat1.xy * _LargeWindParam.yy + vec2(0.5, 0.5);
    u_xlat26 = float(floatBitsToUint(unity_Builtins0Array[u_xlati24 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2]).w);
    u_xlat26 = u_xlat26 * 5.96046448e-08;
    u_xlatu26 = uint(u_xlat26);
    u_xlatu26 = u_xlatu26 & 3u;
    u_xlat26 = float(u_xlatu26);
    u_xlat3.x = (-in_TEXCOORD1.x) + unity_Builtins0Array[u_xlati24 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].x;
    u_xlat11.x = fract(u_xlat3.x);
    u_xlat3.x = u_xlat3.x + unity_Builtins0Array[u_xlati24 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].y;
    u_xlat3.xz = u_xlat3.xx * vec2(22.0, 33.0);
    u_xlat3.xz = fract(u_xlat3.xz);
    u_xlat3.xz = u_xlat3.xz + vec2(-0.5, -0.5);
    u_xlat4.xz = u_xlat3.xz * vec2(0.200000003, 0.200000003);
    u_xlat26 = u_xlat26 + u_xlat11.x;
    u_xlat26 = u_xlat26 + -0.5;
    u_xlat3.x = u_xlat26 * 0.333000004;
    u_xlat5.y = u_xlat26 * 0.333000004 + -1.0;
    u_xlat26 = in_TEXCOORD1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat26 = min(max(u_xlat26, 0.0), 1.0);
#else
    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);
#endif
    u_xlat3.x = u_xlat3.x * u_xlat26;
    u_xlat1.xy = u_xlat1.xy * u_xlat3.xx;
    u_xlat0.xz = u_xlat17.xy * u_xlat1.xy;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[0].x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[2].x;
    u_xlat17.x = dot(u_xlat1.xy, u_xlat1.xy);
    u_xlat17.x = inversesqrt(u_xlat17.x);
    u_xlat1.xy = u_xlat17.xx * u_xlat1.xy;
    u_xlat11.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati24 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat11.xyz = unity_Builtins0Array[u_xlati24 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat11.xyz;
    u_xlat11.xyz = unity_Builtins0Array[u_xlati24 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat11.xyz;
    u_xlat11.xyz = u_xlat11.xyz + unity_Builtins0Array[u_xlati24 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat11.xyz = (-u_xlat2.xyz) + u_xlat11.xyz;
    u_xlat6.x = unity_Builtins0Array[u_xlati24 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].x;
    u_xlat6.y = unity_Builtins0Array[u_xlati24 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].x;
    u_xlat17.x = dot(u_xlat6.xy, u_xlat6.xy);
    u_xlat17.x = inversesqrt(u_xlat17.x);
    u_xlat17.xy = u_xlat17.xx * u_xlat6.xy;
    u_xlat28 = u_xlat17.y * u_xlat11.z;
    u_xlat28 = u_xlat11.x * u_xlat17.x + (-u_xlat28);
    u_xlat17.x = dot(u_xlat11.zx, u_xlat17.xy);
    u_xlat17.xy = u_xlat1.xy * u_xlat17.xx;
    u_xlat9 = u_xlat28 * u_xlat1.y + (-u_xlat17.x);
    u_xlat1.x = u_xlat28 * u_xlat1.x + u_xlat17.y;
    u_xlat1.x = u_xlat11.z + u_xlat1.x;
    u_xlat11.z = (-u_xlat1.x) * _Billboard + u_xlat11.z;
    u_xlat1.x = u_xlat11.x + u_xlat9;
    u_xlat11.x = (-u_xlat1.x) * _Billboard + u_xlat11.x;
    u_xlat1.xyz = u_xlat11.xyz * vec3(0.100000001, 1.0, 0.100000001) + u_xlat0.xyz;
    u_xlat8 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat8 = max(u_xlat8, 0.00100000005);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat1.xyz = vec3(u_xlat8) * u_xlat1.xyz;
    u_xlat8 = dot(u_xlat11.xyz, u_xlat11.xyz);
    u_xlat8 = sqrt(u_xlat8);
    u_xlat6.xyz = u_xlat11.xyz * vec3(0.100000001, 1.0, 0.100000001);
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat8) + (-u_xlat6.xyz);
    u_xlat6.xyz = u_xlat2.xyz + u_xlat11.xyz;
    u_xlat2.xy = u_xlat2.xz + (-_WorldOffsetRange.xy);
    u_xlat2.xy = u_xlat2.xy + vec2(1.0, 1.0);
    u_xlat7.xy = vec2(_WorldOffsetRange.z + float(2.0), _WorldOffsetRange.w + float(2.0));
    u_xlat2.xy = u_xlat2.xy / u_xlat7.xy;
    u_xlat8 = textureLod(_Heightmap, u_xlat2.xy, 0.0).x;
    u_xlat6.w = u_xlat8 * _HeightScale + u_xlat6.y;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat6.xwz;
    u_xlatu2.xy = uvec2(65280u, 255u) & floatBitsToUint(unity_Builtins0Array[u_xlati24 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1]).ww;
    u_xlat2.xy = vec2(u_xlatu2.xy);
    u_xlat8 = u_xlat2.x * 0.00390625;
    u_xlat2.z = u_xlat2.y + -127.0;
    u_xlatu8 = uint(u_xlat8);
    u_xlat8 = float(u_xlatu8);
    u_xlat2.x = u_xlat8 + -127.0;
    u_xlat6.xy = u_xlat2.xz * vec2(0.00787401572, 0.00787401572);
    u_xlat6.xy = u_xlat6.xy * u_xlat6.xy;
    u_xlat8 = u_xlat6.y + u_xlat6.x;
    u_xlat8 = (-u_xlat8) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb25 = !!(0.0<u_xlat8);
#else
    u_xlatb25 = 0.0<u_xlat8;
#endif
    u_xlat8 = sqrt(u_xlat8);
    u_xlat2.y = u_xlatb25 ? u_xlat8 : float(0.0);
    u_xlat6.xyz = u_xlat2.xyz * u_xlat11.yyy;
    u_xlat6.xyz = u_xlat3.xxx * u_xlat6.xyz;
    u_xlat8 = max(u_xlat3.x, 9.99999972e-10);
    u_xlat0.yz = u_xlat0.zx / vec2(u_xlat8);
    u_xlat1.xyz = u_xlat6.xyz * vec3(0.00393700786, 0.0, 0.00393700786) + u_xlat1.xyz;
    u_xlat5.xz = u_xlat5.yy * (-u_xlat5.yy);
    u_xlat1.xyz = u_xlat5.xyz * u_xlat11.xyz + u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat5 = u_xlat3.yyyy * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat5 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat3.xxxx + u_xlat5;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat3.zzzz + u_xlat5;
    gl_Position = u_xlat3 + hlslcc_mtx4x4unity_MatrixVPZero[3];
    u_xlat4.y = 0.0;
    vs_TEXCOORD0.xyz = u_xlat2.xyz * vec3(0.00787401572, 1.0, 0.00787401572) + u_xlat4.xyz;
    vs_TEXCOORD0.w = 0.0;
    u_xlat0.x = 0.0;
    u_xlat0.xyz = u_xlat2.yzx * vec3(1.0, 0.00787401572, 0.00787401572) + u_xlat0.xyz;
    u_xlat25 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat25 = inversesqrt(u_xlat25);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat25);
    u_xlat2.xyz = in_NORMAL0.yyy * unity_Builtins0Array[u_xlati24 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat2.xyz = unity_Builtins0Array[u_xlati24 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_NORMAL0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = unity_Builtins0Array[u_xlati24 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_NORMAL0.zzz + u_xlat2.xyz;
    u_xlat25 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat25 = inversesqrt(u_xlat25);
    u_xlat2.xyz = vec3(u_xlat25) * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat0.xyz * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat0.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
    u_xlat25 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat25 = inversesqrt(u_xlat25);
    u_xlat2.xyz = vec3(u_xlat25) * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat0.xyz * u_xlat2.xyz;
    u_xlat0.xyz = u_xlat2.zxy * u_xlat0.yzx + (-u_xlat3.xyz);
    u_xlat25 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat25 = inversesqrt(u_xlat25);
    u_xlat1.xyz = vec3(u_xlat25) * u_xlat1.xyz;
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat0.xyz);
#ifdef UNITY_ADRENO_ES3
    { bool cond = 0.0<u_xlat1.x; u_xlati9 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati9 = int((0.0<u_xlat1.x) ? 0xFFFFFFFFu : uint(0u));
#endif
#ifdef UNITY_ADRENO_ES3
    { bool cond = u_xlat1.x<0.0; u_xlati1 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati1 = int((u_xlat1.x<0.0) ? 0xFFFFFFFFu : uint(0u));
#endif
    u_xlati1 = (-u_xlati9) + u_xlati1;
    u_xlat1.x = float(u_xlati1);
    vs_TEXCOORD1.xyz = u_xlat0.xyz * u_xlat1.xxx;
    vs_TEXCOORD1.w = 0.0;
    u_xlatu0.xyz = uvec3(16711680u, 65280u, 255u) & floatBitsToUint(unity_Builtins0Array[u_xlati24 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2]).www;
    u_xlat0.xyz = vec3(u_xlatu0.xyz);
    u_xlatu1.xyz = uvec3(16711680u, 65280u, 255u) & floatBitsToUint(unity_Builtins0Array[u_xlati24 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3]).www;
    u_xlat24 = max(1.0, unity_Builtins0Array[u_xlati24 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].w);
    u_xlat24 = min(u_xlat24, 2.0);
    u_xlat24 = u_xlat24 + -1.0;
    u_xlat1.xyz = vec3(u_xlatu1.xyz);
    u_xlat1.xyz = u_xlat1.xyz * vec3(5.9838392e-08, 1.53186284e-05, 0.00392156886);
    u_xlat0.xyz = u_xlat0.xyz * vec3(5.9838392e-08, 1.53186284e-05, 0.00392156886) + (-u_xlat1.xyz);
    u_xlat25 = u_xlat26 / _RootColorScale;
    u_xlat25 = u_xlat25 + _RootColorOffset;
#ifdef UNITY_ADRENO_ES3
    u_xlat25 = min(max(u_xlat25, 0.0), 1.0);
#else
    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
#endif
    u_xlat0.xyz = vec3(u_xlat25) * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat1.xyz = (-u_xlat0.xyz) + _BurnedColor.xyz;
    u_xlat0.xyz = vec3(u_xlat24) * u_xlat1.xyz + u_xlat0.xyz;
    vs_TEXCOORD2.w = u_xlat24;
    u_xlat24 = u_xlat26 + -0.600000024;
    vs_TEXCOORD3 = u_xlat26;
    u_xlat24 = max(u_xlat24, 0.0);
    u_xlat24 = _GrassTipLighting * u_xlat24 + 1.0;
    vs_TEXCOORD2.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    vs_TEXCOORD4.xy = in_TEXCOORD2.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	float _GrassShininess;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	float _CutOff;
uniform 	vec4 _BurnedColor;
uniform lowp sampler2D _MainTex;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp float vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec4 u_xlat0;
lowp vec4 u_xlat10_0;
bool u_xlatb0;
vec3 u_xlat1;
mediump float u_xlat16_2;
float u_xlat9;
bool u_xlatb9;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD4.xy);
    u_xlat9 = u_xlat10_0.w + (-_CutOff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(u_xlat9<0.0);
#else
    u_xlatb9 = u_xlat9<0.0;
#endif
    if((int(u_xlatb9) * int(0xffffffffu))!=0){discard;}
    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
    SV_Target0.xyz = u_xlat1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0;
    u_xlat1.xyz = _BurnedColor.xyz * u_xlat10_0.xyz + (-u_xlat10_0.xyz);
    u_xlat0.xyz = vs_TEXCOORD2.www * u_xlat1.xyz + u_xlat10_0.xyz;
    u_xlat0.w = vs_TEXCOORD3;
    SV_Target1 = u_xlat0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_2 = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb0) ? u_xlat16_2 : 0.0399999991;
    u_xlat0.x = (-vs_TEXCOORD2.w) + 1.0;
    u_xlat0.x = u_xlat0.x * _GrassShininess;
    SV_Target2.w = u_xlat0.x;
    SV_Target2.xy = vec2(0.0399999991, 0.0399999991);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_HDR_ON" "MHY_SHADER_LOW" "SOFT_SAMPLE_HEIGHT_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	float _NoiseScale;
uniform 	vec4 _WorldOffsetRange;
uniform 	float _HeightScale;
uniform 	float _Billboard;
uniform 	vec4 _LargeWindParam;
uniform 	vec4 _GlobalWind;
uniform 	float _GrassTipLighting;
uniform 	vec4 _MainTex_ST;
uniform 	float _RootColorScale;
uniform 	float _RootColorOffset;
uniform highp sampler2D _Heightmap;
uniform lowp sampler2D _Noisemap;
in highp vec4 in_POSITION0;
in highp vec4 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec2 in_TEXCOORD2;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp float vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec3 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
vec3 u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
vec2 u_xlat8;
int u_xlati8;
vec2 u_xlat9;
vec2 u_xlat16;
vec2 u_xlat20;
float u_xlat24;
float u_xlat25;
void main()
{
    u_xlat0.xy = vec2(_WorldOffsetRange.z + float(2.0), _WorldOffsetRange.w + float(2.0));
    u_xlat1.xyz = in_TEXCOORD0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[2].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TEXCOORD0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat16.xy = u_xlat1.xz + (-_WorldOffsetRange.xy);
    u_xlat16.xy = u_xlat16.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat16.xy / u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * _WorldOffsetRange.zw + vec2(-0.5, -0.5);
    u_xlat16.xy = floor(u_xlat0.xy);
    u_xlat0.xy = (-u_xlat16.xy) + u_xlat0.xy;
    u_xlat2 = u_xlat16.xyxy + vec4(0.5, 1.5, 1.5, 1.5);
    u_xlat3 = u_xlat16.xyxy + vec4(1.5, 0.5, 0.5, 0.5);
    u_xlat3 = vec4(u_xlat3.x / _WorldOffsetRange.z, u_xlat3.y / _WorldOffsetRange.w, u_xlat3.z / _WorldOffsetRange.z, u_xlat3.w / _WorldOffsetRange.w);
    u_xlat2 = vec4(u_xlat2.x / _WorldOffsetRange.z, u_xlat2.y / _WorldOffsetRange.w, u_xlat2.z / _WorldOffsetRange.z, u_xlat2.w / _WorldOffsetRange.w);
    u_xlat16.x = textureLod(_Heightmap, u_xlat2.zw, 0.0).x;
    u_xlat24 = textureLod(_Heightmap, u_xlat2.xy, 0.0).x;
    u_xlat16.x = (-u_xlat24) + u_xlat16.x;
    u_xlat16.x = u_xlat0.x * u_xlat16.x + u_xlat24;
    u_xlat24 = textureLod(_Heightmap, u_xlat3.xy, 0.0).x;
    u_xlat25 = textureLod(_Heightmap, u_xlat3.zw, 0.0).x;
    u_xlat24 = u_xlat24 + (-u_xlat25);
    u_xlat0.x = u_xlat0.x * u_xlat24 + u_xlat25;
    u_xlat16.x = (-u_xlat0.x) + u_xlat16.x;
    u_xlat0.x = u_xlat0.y * u_xlat16.x + u_xlat0.x;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[0].x;
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[2].x;
    u_xlat8.x = dot(u_xlat2.xy, u_xlat2.xy);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat8.xy = u_xlat8.xx * u_xlat2.xy;
    u_xlat2.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;
    u_xlat2.y = hlslcc_mtx4x4unity_ObjectToWorld[2].x;
    u_xlat24 = dot(u_xlat2.xy, u_xlat2.xy);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat2.xy = vec2(u_xlat24) * u_xlat2.xy;
    u_xlat3.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat3.xyz = (-u_xlat1.xyz) + u_xlat3.xyz;
    u_xlat24 = u_xlat2.y * u_xlat3.z;
    u_xlat24 = u_xlat3.x * u_xlat2.x + (-u_xlat24);
    u_xlat25 = dot(u_xlat3.zx, u_xlat2.xy);
    u_xlat2.xy = u_xlat8.xy * vec2(u_xlat25);
    u_xlat16.x = u_xlat24 * u_xlat8.y + (-u_xlat2.x);
    u_xlat8.x = u_xlat24 * u_xlat8.x + u_xlat2.y;
    u_xlat8.x = u_xlat3.z + u_xlat8.x;
    u_xlat3.z = (-u_xlat8.x) * _Billboard + u_xlat3.z;
    u_xlat8.x = u_xlat3.x + u_xlat16.x;
    u_xlat3.x = (-u_xlat8.x) * _Billboard + u_xlat3.x;
    u_xlat2.xyz = u_xlat1.xyz + u_xlat3.xyz;
    u_xlat8.xy = u_xlat1.xz / vec2(_NoiseScale);
    u_xlat2.w = u_xlat0.x * _HeightScale + u_xlat2.y;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat1.xyz = u_xlat3.xyz * vec3(0.100000001, 1.0, 0.100000001);
    u_xlat24 = dot(_GlobalWind.xyz, _GlobalWind.xyz);
    u_xlat24 = max(u_xlat24, 0.00100000005);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat4 = vec4(u_xlat24) * _GlobalWind.xzxz;
    u_xlat20.xy = vec2(u_xlat4.z * _LargeWindParam.z, u_xlat4.w * _LargeWindParam.z);
    u_xlat8.xy = _LargeWindParam.xx * u_xlat4.xy + u_xlat8.xy;
    u_xlat8.xy = textureLod(_Noisemap, u_xlat8.xy, 0.0).xy;
    u_xlat8.xy = u_xlat8.xy + vec2(-0.5, -0.5);
    u_xlat8.xy = u_xlat8.xy * _LargeWindParam.yy + vec2(0.5, 0.5);
    u_xlat24 = (-in_TEXCOORD1.x) + hlslcc_mtx4x4unity_ObjectToWorld[1].x;
    u_xlat25 = fract(u_xlat24);
    u_xlat24 = u_xlat24 + hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat4.xy = vec2(u_xlat24) * vec2(22.0, 33.0);
    u_xlat4.xy = fract(u_xlat4.xy);
    u_xlat4.xy = u_xlat4.xy + vec2(-0.5, -0.5);
    u_xlat5.xz = u_xlat4.xy * vec2(0.200000003, 0.200000003);
    u_xlat24 = u_xlat25 + -0.5;
    u_xlat25 = u_xlat24 * 0.333000004;
    u_xlat6.y = u_xlat24 * 0.333000004 + -1.0;
    u_xlat24 = in_TEXCOORD1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat25 = u_xlat25 * u_xlat24;
    u_xlat8.xy = u_xlat8.xy * vec2(u_xlat25);
    u_xlat4.xz = u_xlat20.xy * u_xlat8.xy;
    u_xlat4.y = 0.0;
    u_xlat7.xyz = u_xlat3.xyz * vec3(0.100000001, 1.0, 0.100000001) + u_xlat4.xyz;
    u_xlat8.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat8.x = max(u_xlat8.x, 0.00100000005);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat7.xyz = u_xlat8.xxx * u_xlat7.xyz;
    u_xlat0.xyz = u_xlat7.xyz * u_xlat0.xxx + (-u_xlat1.xyz);
    u_xlat0.xyz = u_xlat0.xyz + u_xlat2.xwz;
    u_xlat1.x = u_xlat3.y * u_xlat25;
    u_xlat9.x = max(u_xlat25, 9.99999972e-10);
    u_xlat9.xy = u_xlat4.zx / u_xlat9.xx;
    u_xlat2.yz = u_xlat9.xy + vec2(-1.0, -1.0);
    u_xlat0.xyz = u_xlat1.xxx * vec3(-0.5, 0.0, -0.5) + u_xlat0.xyz;
    u_xlat6.xz = u_xlat6.yy * (-u_xlat6.yy);
    u_xlat0.xyz = u_xlat6.xyz * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat1.xxxx + u_xlat3;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat1.zzzz + u_xlat3;
    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVPZero[3];
    u_xlat5.y = 0.0;
    vs_TEXCOORD0.xyz = u_xlat5.xyz + vec3(-1.0, 0.0, -1.0);
    vs_TEXCOORD0.w = 0.0;
    u_xlat1.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xxx;
    u_xlat1.x = dot(u_xlat2.yz, u_xlat2.yz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat2.x = 0.0;
    u_xlat1.xyz = u_xlat1.xxx * u_xlat2.xyz;
    u_xlat2.xyz = in_NORMAL0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_NORMAL0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_NORMAL0.zzz + u_xlat2.xyz;
    u_xlat25 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat25 = inversesqrt(u_xlat25);
    u_xlat2.xyz = vec3(u_xlat25) * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
    u_xlat25 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat25 = inversesqrt(u_xlat25);
    u_xlat2.xyz = vec3(u_xlat25) * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.zxy * u_xlat1.yzx + (-u_xlat3.xyz);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
#ifdef UNITY_ADRENO_ES3
    { bool cond = 0.0<u_xlat0.x; u_xlati8 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati8 = int((0.0<u_xlat0.x) ? 0xFFFFFFFFu : uint(0u));
#endif
#ifdef UNITY_ADRENO_ES3
    { bool cond = u_xlat0.x<0.0; u_xlati0 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati0 = int((u_xlat0.x<0.0) ? 0xFFFFFFFFu : uint(0u));
#endif
    u_xlati0 = (-u_xlati8) + u_xlati0;
    u_xlat0.x = float(u_xlati0);
    vs_TEXCOORD1.xyz = u_xlat0.xxx * u_xlat1.xyz;
    vs_TEXCOORD1.w = 0.0;
    u_xlat0.x = u_xlat24 / _RootColorScale;
    u_xlat0.x = u_xlat0.x + _RootColorOffset;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xxx * vec3(-0.501960814, 0.0, 0.0) + vec3(0.501960814, 0.0, 0.0);
    u_xlat1.x = u_xlat24 + -0.600000024;
    vs_TEXCOORD3 = u_xlat24;
    u_xlat24 = max(u_xlat1.x, 0.0);
    u_xlat24 = _GrassTipLighting * u_xlat24 + 1.0;
    vs_TEXCOORD2.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    vs_TEXCOORD2.w = 0.0;
    vs_TEXCOORD4.xy = in_TEXCOORD2.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	float _GrassShininess;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	float _CutOff;
uniform 	vec4 _BurnedColor;
uniform lowp sampler2D _MainTex;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp float vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec4 u_xlat0;
lowp vec4 u_xlat10_0;
bool u_xlatb0;
vec3 u_xlat1;
mediump float u_xlat16_2;
float u_xlat9;
bool u_xlatb9;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD4.xy);
    u_xlat9 = u_xlat10_0.w + (-_CutOff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(u_xlat9<0.0);
#else
    u_xlatb9 = u_xlat9<0.0;
#endif
    if((int(u_xlatb9) * int(0xffffffffu))!=0){discard;}
    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
    SV_Target0.xyz = u_xlat1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0;
    u_xlat1.xyz = _BurnedColor.xyz * u_xlat10_0.xyz + (-u_xlat10_0.xyz);
    u_xlat0.xyz = vs_TEXCOORD2.www * u_xlat1.xyz + u_xlat10_0.xyz;
    u_xlat0.w = vs_TEXCOORD3;
    SV_Target1 = u_xlat0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_2 = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb0) ? u_xlat16_2 : 0.0399999991;
    u_xlat0.x = (-vs_TEXCOORD2.w) + 1.0;
    u_xlat0.x = u_xlat0.x * _GrassShininess;
    SV_Target2.w = u_xlat0.x;
    SV_Target2.xy = vec2(0.0399999991, 0.0399999991);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_HDR_ON" "INSTANCING_ON" "MHY_SHADER_LOW" "SOFT_SAMPLE_HEIGHT_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	int unity_BaseInstanceID;
uniform 	float _NoiseScale;
uniform 	vec4 _WorldOffsetRange;
uniform 	float _HeightScale;
uniform 	float _Billboard;
uniform 	vec4 _LargeWindParam;
uniform 	vec4 _GlobalWind;
uniform 	float _GrassTipLighting;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BurnedColor;
uniform 	float _RootColorScale;
uniform 	float _RootColorOffset;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _Heightmap;
uniform lowp sampler2D _Noisemap;
in highp vec4 in_POSITION0;
in highp vec4 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec2 in_TEXCOORD2;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp float vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec3 u_xlat0;
uvec3 u_xlatu0;
vec4 u_xlat1;
int u_xlati1;
uvec3 u_xlatu1;
vec3 u_xlat2;
uvec2 u_xlatu2;
vec4 u_xlat3;
vec3 u_xlat4;
vec4 u_xlat5;
vec4 u_xlat6;
vec4 u_xlat7;
vec4 u_xlat8;
float u_xlat9;
uint u_xlatu9;
float u_xlat10;
int u_xlati10;
vec3 u_xlat12;
vec2 u_xlat19;
float u_xlat20;
vec2 u_xlat24;
float u_xlat27;
int u_xlati27;
float u_xlat28;
bool u_xlatb28;
float u_xlat29;
uint u_xlatu29;
float u_xlat31;
void main()
{
    u_xlat0.y = 0.0;
    u_xlat27 = dot(_GlobalWind.xyz, _GlobalWind.xyz);
    u_xlat27 = max(u_xlat27, 0.00100000005);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat1 = vec4(u_xlat27) * _GlobalWind.xzxz;
    u_xlat19.xy = vec2(u_xlat1.z * _LargeWindParam.z, u_xlat1.w * _LargeWindParam.z);
    u_xlati27 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati27 = u_xlati27 << 2;
    u_xlat2.xyz = in_TEXCOORD0.yyy * unity_Builtins0Array[u_xlati27 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz;
    u_xlat2.xyz = unity_Builtins0Array[u_xlati27 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_TEXCOORD0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz + unity_Builtins0Array[u_xlati27 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat3.xy = u_xlat2.xz / vec2(_NoiseScale);
    u_xlat1.xy = _LargeWindParam.xx * u_xlat1.xy + u_xlat3.xy;
    u_xlat1.xy = textureLod(_Noisemap, u_xlat1.xy, 0.0).xy;
    u_xlat1.xy = u_xlat1.xy + vec2(-0.5, -0.5);
    u_xlat1.xy = u_xlat1.xy * _LargeWindParam.yy + vec2(0.5, 0.5);
    u_xlat29 = float(floatBitsToUint(unity_Builtins0Array[u_xlati27 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2]).w);
    u_xlat29 = u_xlat29 * 5.96046448e-08;
    u_xlatu29 = uint(u_xlat29);
    u_xlatu29 = u_xlatu29 & 3u;
    u_xlat29 = float(u_xlatu29);
    u_xlat3.x = (-in_TEXCOORD1.x) + unity_Builtins0Array[u_xlati27 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].x;
    u_xlat12.x = fract(u_xlat3.x);
    u_xlat3.x = u_xlat3.x + unity_Builtins0Array[u_xlati27 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].y;
    u_xlat3.xz = u_xlat3.xx * vec2(22.0, 33.0);
    u_xlat3.xz = fract(u_xlat3.xz);
    u_xlat3.xz = u_xlat3.xz + vec2(-0.5, -0.5);
    u_xlat4.xz = u_xlat3.xz * vec2(0.200000003, 0.200000003);
    u_xlat29 = u_xlat29 + u_xlat12.x;
    u_xlat29 = u_xlat29 + -0.5;
    u_xlat3.x = u_xlat29 * 0.333000004;
    u_xlat5.y = u_xlat29 * 0.333000004 + -1.0;
    u_xlat29 = in_TEXCOORD1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat29 = min(max(u_xlat29, 0.0), 1.0);
#else
    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
#endif
    u_xlat3.x = u_xlat3.x * u_xlat29;
    u_xlat1.xy = u_xlat1.xy * u_xlat3.xx;
    u_xlat0.xz = u_xlat19.xy * u_xlat1.xy;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[0].x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[2].x;
    u_xlat19.x = dot(u_xlat1.xy, u_xlat1.xy);
    u_xlat19.x = inversesqrt(u_xlat19.x);
    u_xlat1.xy = u_xlat19.xx * u_xlat1.xy;
    u_xlat12.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati27 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat12.xyz = unity_Builtins0Array[u_xlati27 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat12.xyz;
    u_xlat12.xyz = unity_Builtins0Array[u_xlati27 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat12.xyz;
    u_xlat12.xyz = u_xlat12.xyz + unity_Builtins0Array[u_xlati27 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat12.xyz = (-u_xlat2.xyz) + u_xlat12.xyz;
    u_xlat6.x = unity_Builtins0Array[u_xlati27 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].x;
    u_xlat6.y = unity_Builtins0Array[u_xlati27 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].x;
    u_xlat19.x = dot(u_xlat6.xy, u_xlat6.xy);
    u_xlat19.x = inversesqrt(u_xlat19.x);
    u_xlat19.xy = u_xlat19.xx * u_xlat6.xy;
    u_xlat31 = u_xlat19.y * u_xlat12.z;
    u_xlat31 = u_xlat12.x * u_xlat19.x + (-u_xlat31);
    u_xlat19.x = dot(u_xlat12.zx, u_xlat19.xy);
    u_xlat19.xy = u_xlat1.xy * u_xlat19.xx;
    u_xlat10 = u_xlat31 * u_xlat1.y + (-u_xlat19.x);
    u_xlat1.x = u_xlat31 * u_xlat1.x + u_xlat19.y;
    u_xlat1.x = u_xlat12.z + u_xlat1.x;
    u_xlat12.z = (-u_xlat1.x) * _Billboard + u_xlat12.z;
    u_xlat1.x = u_xlat12.x + u_xlat10;
    u_xlat12.x = (-u_xlat1.x) * _Billboard + u_xlat12.x;
    u_xlat1.xyz = u_xlat12.xyz * vec3(0.100000001, 1.0, 0.100000001) + u_xlat0.xyz;
    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat9 = max(u_xlat9, 0.00100000005);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
    u_xlat9 = dot(u_xlat12.xyz, u_xlat12.xyz);
    u_xlat9 = sqrt(u_xlat9);
    u_xlat6.xyz = u_xlat12.xyz * vec3(0.100000001, 1.0, 0.100000001);
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat9) + (-u_xlat6.xyz);
    u_xlat6.xy = vec2(_WorldOffsetRange.z + float(2.0), _WorldOffsetRange.w + float(2.0));
    u_xlat24.xy = u_xlat2.xz + (-_WorldOffsetRange.xy);
    u_xlat7.xyz = u_xlat2.xyz + u_xlat12.xyz;
    u_xlat2.xy = u_xlat24.xy + vec2(1.0, 1.0);
    u_xlat2.xy = u_xlat2.xy / u_xlat6.xy;
    u_xlat2.xy = u_xlat2.xy * _WorldOffsetRange.zw + vec2(-0.5, -0.5);
    u_xlat6.xy = floor(u_xlat2.xy);
    u_xlat2.xy = u_xlat2.xy + (-u_xlat6.xy);
    u_xlat8 = u_xlat6.xyxy + vec4(0.5, 1.5, 1.5, 1.5);
    u_xlat6 = u_xlat6.xyxy + vec4(1.5, 0.5, 0.5, 0.5);
    u_xlat6 = vec4(u_xlat6.x / _WorldOffsetRange.z, u_xlat6.y / _WorldOffsetRange.w, u_xlat6.z / _WorldOffsetRange.z, u_xlat6.w / _WorldOffsetRange.w);
    u_xlat8 = vec4(u_xlat8.x / _WorldOffsetRange.z, u_xlat8.y / _WorldOffsetRange.w, u_xlat8.z / _WorldOffsetRange.z, u_xlat8.w / _WorldOffsetRange.w);
    u_xlat9 = textureLod(_Heightmap, u_xlat8.zw, 0.0).x;
    u_xlat28 = textureLod(_Heightmap, u_xlat8.xy, 0.0).x;
    u_xlat9 = u_xlat9 + (-u_xlat28);
    u_xlat9 = u_xlat2.x * u_xlat9 + u_xlat28;
    u_xlat28 = textureLod(_Heightmap, u_xlat6.xy, 0.0).x;
    u_xlat20 = textureLod(_Heightmap, u_xlat6.zw, 0.0).x;
    u_xlat28 = u_xlat28 + (-u_xlat20);
    u_xlat28 = u_xlat2.x * u_xlat28 + u_xlat20;
    u_xlat9 = u_xlat9 + (-u_xlat28);
    u_xlat9 = u_xlat2.y * u_xlat9 + u_xlat28;
    u_xlat7.w = u_xlat9 * _HeightScale + u_xlat7.y;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat7.xwz;
    u_xlatu2.xy = uvec2(65280u, 255u) & floatBitsToUint(unity_Builtins0Array[u_xlati27 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1]).ww;
    u_xlat2.xy = vec2(u_xlatu2.xy);
    u_xlat9 = u_xlat2.x * 0.00390625;
    u_xlat2.z = u_xlat2.y + -127.0;
    u_xlatu9 = uint(u_xlat9);
    u_xlat9 = float(u_xlatu9);
    u_xlat2.x = u_xlat9 + -127.0;
    u_xlat6.xy = u_xlat2.xz * vec2(0.00787401572, 0.00787401572);
    u_xlat6.xy = u_xlat6.xy * u_xlat6.xy;
    u_xlat9 = u_xlat6.y + u_xlat6.x;
    u_xlat9 = (-u_xlat9) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb28 = !!(0.0<u_xlat9);
#else
    u_xlatb28 = 0.0<u_xlat9;
#endif
    u_xlat9 = sqrt(u_xlat9);
    u_xlat2.y = u_xlatb28 ? u_xlat9 : float(0.0);
    u_xlat6.xyz = u_xlat2.xyz * u_xlat12.yyy;
    u_xlat6.xyz = u_xlat3.xxx * u_xlat6.xyz;
    u_xlat9 = max(u_xlat3.x, 9.99999972e-10);
    u_xlat0.yz = u_xlat0.zx / vec2(u_xlat9);
    u_xlat1.xyz = u_xlat6.xyz * vec3(0.00393700786, 0.0, 0.00393700786) + u_xlat1.xyz;
    u_xlat5.xz = u_xlat5.yy * (-u_xlat5.yy);
    u_xlat1.xyz = u_xlat5.xyz * u_xlat12.xyz + u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat5 = u_xlat3.yyyy * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat5 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat3.xxxx + u_xlat5;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat3.zzzz + u_xlat5;
    gl_Position = u_xlat3 + hlslcc_mtx4x4unity_MatrixVPZero[3];
    u_xlat4.y = 0.0;
    vs_TEXCOORD0.xyz = u_xlat2.xyz * vec3(0.00787401572, 1.0, 0.00787401572) + u_xlat4.xyz;
    vs_TEXCOORD0.w = 0.0;
    u_xlat0.x = 0.0;
    u_xlat0.xyz = u_xlat2.yzx * vec3(1.0, 0.00787401572, 0.00787401572) + u_xlat0.xyz;
    u_xlat28 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat28 = inversesqrt(u_xlat28);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat28);
    u_xlat2.xyz = in_NORMAL0.yyy * unity_Builtins0Array[u_xlati27 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat2.xyz = unity_Builtins0Array[u_xlati27 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_NORMAL0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = unity_Builtins0Array[u_xlati27 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_NORMAL0.zzz + u_xlat2.xyz;
    u_xlat28 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat28 = inversesqrt(u_xlat28);
    u_xlat2.xyz = vec3(u_xlat28) * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat0.xyz * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat0.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
    u_xlat28 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat28 = inversesqrt(u_xlat28);
    u_xlat2.xyz = vec3(u_xlat28) * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat0.xyz * u_xlat2.xyz;
    u_xlat0.xyz = u_xlat2.zxy * u_xlat0.yzx + (-u_xlat3.xyz);
    u_xlat28 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat28 = inversesqrt(u_xlat28);
    u_xlat1.xyz = vec3(u_xlat28) * u_xlat1.xyz;
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat0.xyz);
#ifdef UNITY_ADRENO_ES3
    { bool cond = 0.0<u_xlat1.x; u_xlati10 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati10 = int((0.0<u_xlat1.x) ? 0xFFFFFFFFu : uint(0u));
#endif
#ifdef UNITY_ADRENO_ES3
    { bool cond = u_xlat1.x<0.0; u_xlati1 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati1 = int((u_xlat1.x<0.0) ? 0xFFFFFFFFu : uint(0u));
#endif
    u_xlati1 = (-u_xlati10) + u_xlati1;
    u_xlat1.x = float(u_xlati1);
    vs_TEXCOORD1.xyz = u_xlat0.xyz * u_xlat1.xxx;
    vs_TEXCOORD1.w = 0.0;
    u_xlatu0.xyz = uvec3(16711680u, 65280u, 255u) & floatBitsToUint(unity_Builtins0Array[u_xlati27 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2]).www;
    u_xlat0.xyz = vec3(u_xlatu0.xyz);
    u_xlatu1.xyz = uvec3(16711680u, 65280u, 255u) & floatBitsToUint(unity_Builtins0Array[u_xlati27 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3]).www;
    u_xlat27 = max(1.0, unity_Builtins0Array[u_xlati27 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].w);
    u_xlat27 = min(u_xlat27, 2.0);
    u_xlat27 = u_xlat27 + -1.0;
    u_xlat1.xyz = vec3(u_xlatu1.xyz);
    u_xlat1.xyz = u_xlat1.xyz * vec3(5.9838392e-08, 1.53186284e-05, 0.00392156886);
    u_xlat0.xyz = u_xlat0.xyz * vec3(5.9838392e-08, 1.53186284e-05, 0.00392156886) + (-u_xlat1.xyz);
    u_xlat28 = u_xlat29 / _RootColorScale;
    u_xlat28 = u_xlat28 + _RootColorOffset;
#ifdef UNITY_ADRENO_ES3
    u_xlat28 = min(max(u_xlat28, 0.0), 1.0);
#else
    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
#endif
    u_xlat0.xyz = vec3(u_xlat28) * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat1.xyz = (-u_xlat0.xyz) + _BurnedColor.xyz;
    u_xlat0.xyz = vec3(u_xlat27) * u_xlat1.xyz + u_xlat0.xyz;
    vs_TEXCOORD2.w = u_xlat27;
    u_xlat27 = u_xlat29 + -0.600000024;
    vs_TEXCOORD3 = u_xlat29;
    u_xlat27 = max(u_xlat27, 0.0);
    u_xlat27 = _GrassTipLighting * u_xlat27 + 1.0;
    vs_TEXCOORD2.xyz = vec3(u_xlat27) * u_xlat0.xyz;
    vs_TEXCOORD4.xy = in_TEXCOORD2.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	float _GrassShininess;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	float _CutOff;
uniform 	vec4 _BurnedColor;
uniform lowp sampler2D _MainTex;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp float vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec4 u_xlat0;
lowp vec4 u_xlat10_0;
bool u_xlatb0;
vec3 u_xlat1;
mediump float u_xlat16_2;
float u_xlat9;
bool u_xlatb9;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD4.xy);
    u_xlat9 = u_xlat10_0.w + (-_CutOff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(u_xlat9<0.0);
#else
    u_xlatb9 = u_xlat9<0.0;
#endif
    if((int(u_xlatb9) * int(0xffffffffu))!=0){discard;}
    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
    SV_Target0.xyz = u_xlat1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0;
    u_xlat1.xyz = _BurnedColor.xyz * u_xlat10_0.xyz + (-u_xlat10_0.xyz);
    u_xlat0.xyz = vs_TEXCOORD2.www * u_xlat1.xyz + u_xlat10_0.xyz;
    u_xlat0.w = vs_TEXCOORD3;
    SV_Target1 = u_xlat0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_2 = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb0) ? u_xlat16_2 : 0.0399999991;
    u_xlat0.x = (-vs_TEXCOORD2.w) + 1.0;
    u_xlat0.x = u_xlat0.x * _GrassShininess;
    SV_Target2.w = u_xlat0.x;
    SV_Target2.xy = vec2(0.0399999991, 0.0399999991);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_HDR_ON" "MHY_SHADER_LOW" "SOFT_SAMPLE_HEIGHT_ON" "DITHER_FADE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	float _NoiseScale;
uniform 	vec4 _WorldOffsetRange;
uniform 	float _HeightScale;
uniform 	float _Billboard;
uniform 	vec4 _LargeWindParam;
uniform 	vec4 _GlobalWind;
uniform 	float _GrassTipLighting;
uniform 	vec4 _MainTex_ST;
uniform 	float _RootColorScale;
uniform 	float _RootColorOffset;
uniform highp sampler2D _Heightmap;
uniform lowp sampler2D _Noisemap;
in highp vec4 in_POSITION0;
in highp vec4 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec2 in_TEXCOORD2;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp float vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec3 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
vec3 u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
vec2 u_xlat8;
int u_xlati8;
vec2 u_xlat9;
vec2 u_xlat16;
vec2 u_xlat20;
float u_xlat24;
float u_xlat25;
void main()
{
    u_xlat0.xy = vec2(_WorldOffsetRange.z + float(2.0), _WorldOffsetRange.w + float(2.0));
    u_xlat1.xyz = in_TEXCOORD0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[2].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TEXCOORD0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat16.xy = u_xlat1.xz + (-_WorldOffsetRange.xy);
    u_xlat16.xy = u_xlat16.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat16.xy / u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * _WorldOffsetRange.zw + vec2(-0.5, -0.5);
    u_xlat16.xy = floor(u_xlat0.xy);
    u_xlat0.xy = (-u_xlat16.xy) + u_xlat0.xy;
    u_xlat2 = u_xlat16.xyxy + vec4(0.5, 1.5, 1.5, 1.5);
    u_xlat3 = u_xlat16.xyxy + vec4(1.5, 0.5, 0.5, 0.5);
    u_xlat3 = vec4(u_xlat3.x / _WorldOffsetRange.z, u_xlat3.y / _WorldOffsetRange.w, u_xlat3.z / _WorldOffsetRange.z, u_xlat3.w / _WorldOffsetRange.w);
    u_xlat2 = vec4(u_xlat2.x / _WorldOffsetRange.z, u_xlat2.y / _WorldOffsetRange.w, u_xlat2.z / _WorldOffsetRange.z, u_xlat2.w / _WorldOffsetRange.w);
    u_xlat16.x = textureLod(_Heightmap, u_xlat2.zw, 0.0).x;
    u_xlat24 = textureLod(_Heightmap, u_xlat2.xy, 0.0).x;
    u_xlat16.x = (-u_xlat24) + u_xlat16.x;
    u_xlat16.x = u_xlat0.x * u_xlat16.x + u_xlat24;
    u_xlat24 = textureLod(_Heightmap, u_xlat3.xy, 0.0).x;
    u_xlat25 = textureLod(_Heightmap, u_xlat3.zw, 0.0).x;
    u_xlat24 = u_xlat24 + (-u_xlat25);
    u_xlat0.x = u_xlat0.x * u_xlat24 + u_xlat25;
    u_xlat16.x = (-u_xlat0.x) + u_xlat16.x;
    u_xlat0.x = u_xlat0.y * u_xlat16.x + u_xlat0.x;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[0].x;
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[2].x;
    u_xlat8.x = dot(u_xlat2.xy, u_xlat2.xy);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat8.xy = u_xlat8.xx * u_xlat2.xy;
    u_xlat2.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;
    u_xlat2.y = hlslcc_mtx4x4unity_ObjectToWorld[2].x;
    u_xlat24 = dot(u_xlat2.xy, u_xlat2.xy);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat2.xy = vec2(u_xlat24) * u_xlat2.xy;
    u_xlat3.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat3.xyz = (-u_xlat1.xyz) + u_xlat3.xyz;
    u_xlat24 = u_xlat2.y * u_xlat3.z;
    u_xlat24 = u_xlat3.x * u_xlat2.x + (-u_xlat24);
    u_xlat25 = dot(u_xlat3.zx, u_xlat2.xy);
    u_xlat2.xy = u_xlat8.xy * vec2(u_xlat25);
    u_xlat16.x = u_xlat24 * u_xlat8.y + (-u_xlat2.x);
    u_xlat8.x = u_xlat24 * u_xlat8.x + u_xlat2.y;
    u_xlat8.x = u_xlat3.z + u_xlat8.x;
    u_xlat3.z = (-u_xlat8.x) * _Billboard + u_xlat3.z;
    u_xlat8.x = u_xlat3.x + u_xlat16.x;
    u_xlat3.x = (-u_xlat8.x) * _Billboard + u_xlat3.x;
    u_xlat2.xyz = u_xlat1.xyz + u_xlat3.xyz;
    u_xlat8.xy = u_xlat1.xz / vec2(_NoiseScale);
    u_xlat2.w = u_xlat0.x * _HeightScale + u_xlat2.y;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat1.xyz = u_xlat3.xyz * vec3(0.100000001, 1.0, 0.100000001);
    u_xlat24 = dot(_GlobalWind.xyz, _GlobalWind.xyz);
    u_xlat24 = max(u_xlat24, 0.00100000005);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat4 = vec4(u_xlat24) * _GlobalWind.xzxz;
    u_xlat20.xy = vec2(u_xlat4.z * _LargeWindParam.z, u_xlat4.w * _LargeWindParam.z);
    u_xlat8.xy = _LargeWindParam.xx * u_xlat4.xy + u_xlat8.xy;
    u_xlat8.xy = textureLod(_Noisemap, u_xlat8.xy, 0.0).xy;
    u_xlat8.xy = u_xlat8.xy + vec2(-0.5, -0.5);
    u_xlat8.xy = u_xlat8.xy * _LargeWindParam.yy + vec2(0.5, 0.5);
    u_xlat24 = (-in_TEXCOORD1.x) + hlslcc_mtx4x4unity_ObjectToWorld[1].x;
    u_xlat25 = fract(u_xlat24);
    u_xlat24 = u_xlat24 + hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat4.xy = vec2(u_xlat24) * vec2(22.0, 33.0);
    u_xlat4.xy = fract(u_xlat4.xy);
    u_xlat4.xy = u_xlat4.xy + vec2(-0.5, -0.5);
    u_xlat5.xz = u_xlat4.xy * vec2(0.200000003, 0.200000003);
    u_xlat24 = u_xlat25 + -0.5;
    u_xlat25 = u_xlat24 * 0.333000004;
    u_xlat6.y = u_xlat24 * 0.333000004 + -1.0;
    u_xlat24 = in_TEXCOORD1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat25 = u_xlat25 * u_xlat24;
    u_xlat8.xy = u_xlat8.xy * vec2(u_xlat25);
    u_xlat4.xz = u_xlat20.xy * u_xlat8.xy;
    u_xlat4.y = 0.0;
    u_xlat7.xyz = u_xlat3.xyz * vec3(0.100000001, 1.0, 0.100000001) + u_xlat4.xyz;
    u_xlat8.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat8.x = max(u_xlat8.x, 0.00100000005);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat7.xyz = u_xlat8.xxx * u_xlat7.xyz;
    u_xlat0.xyz = u_xlat7.xyz * u_xlat0.xxx + (-u_xlat1.xyz);
    u_xlat0.xyz = u_xlat0.xyz + u_xlat2.xwz;
    u_xlat1.x = u_xlat3.y * u_xlat25;
    u_xlat9.x = max(u_xlat25, 9.99999972e-10);
    u_xlat9.xy = u_xlat4.zx / u_xlat9.xx;
    u_xlat2.yz = u_xlat9.xy + vec2(-1.0, -1.0);
    u_xlat0.xyz = u_xlat1.xxx * vec3(-0.5, 0.0, -0.5) + u_xlat0.xyz;
    u_xlat6.xz = u_xlat6.yy * (-u_xlat6.yy);
    u_xlat0.xyz = u_xlat6.xyz * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat1.xxxx + u_xlat3;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat1.zzzz + u_xlat3;
    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVPZero[3];
    u_xlat5.y = 0.0;
    vs_TEXCOORD0.xyz = u_xlat5.xyz + vec3(-1.0, 0.0, -1.0);
    vs_TEXCOORD0.w = 0.0;
    u_xlat1.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xxx;
    u_xlat1.x = dot(u_xlat2.yz, u_xlat2.yz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat2.x = 0.0;
    u_xlat1.xyz = u_xlat1.xxx * u_xlat2.xyz;
    u_xlat2.xyz = in_NORMAL0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_NORMAL0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_NORMAL0.zzz + u_xlat2.xyz;
    u_xlat25 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat25 = inversesqrt(u_xlat25);
    u_xlat2.xyz = vec3(u_xlat25) * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
    u_xlat25 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat25 = inversesqrt(u_xlat25);
    u_xlat2.xyz = vec3(u_xlat25) * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.zxy * u_xlat1.yzx + (-u_xlat3.xyz);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
#ifdef UNITY_ADRENO_ES3
    { bool cond = 0.0<u_xlat0.x; u_xlati8 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati8 = int((0.0<u_xlat0.x) ? 0xFFFFFFFFu : uint(0u));
#endif
#ifdef UNITY_ADRENO_ES3
    { bool cond = u_xlat0.x<0.0; u_xlati0 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati0 = int((u_xlat0.x<0.0) ? 0xFFFFFFFFu : uint(0u));
#endif
    u_xlati0 = (-u_xlati8) + u_xlati0;
    u_xlat0.x = float(u_xlati0);
    vs_TEXCOORD1.xyz = u_xlat0.xxx * u_xlat1.xyz;
    vs_TEXCOORD1.w = 0.0;
    u_xlat0.x = u_xlat24 / _RootColorScale;
    u_xlat0.x = u_xlat0.x + _RootColorOffset;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xxx * vec3(-0.501960814, 0.0, 0.0) + vec3(0.501960814, 0.0, 0.0);
    u_xlat1.x = u_xlat24 + -0.600000024;
    vs_TEXCOORD3 = u_xlat24;
    u_xlat24 = max(u_xlat1.x, 0.0);
    u_xlat24 = _GrassTipLighting * u_xlat24 + 1.0;
    vs_TEXCOORD2.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    vs_TEXCOORD2.w = 0.0;
    vs_TEXCOORD4.xy = in_TEXCOORD2.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	float _GrassShininess;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	float _CutOff;
uniform 	vec4 _BurnedColor;
uniform lowp sampler2D _MainTex;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp float vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec4 u_xlat0;
lowp vec4 u_xlat10_0;
bool u_xlatb0;
vec3 u_xlat1;
mediump float u_xlat16_2;
float u_xlat9;
bool u_xlatb9;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD4.xy);
    u_xlat9 = u_xlat10_0.w + (-_CutOff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(u_xlat9<0.0);
#else
    u_xlatb9 = u_xlat9<0.0;
#endif
    if((int(u_xlatb9) * int(0xffffffffu))!=0){discard;}
    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
    SV_Target0.xyz = u_xlat1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0;
    u_xlat1.xyz = _BurnedColor.xyz * u_xlat10_0.xyz + (-u_xlat10_0.xyz);
    u_xlat0.xyz = vs_TEXCOORD2.www * u_xlat1.xyz + u_xlat10_0.xyz;
    u_xlat0.w = vs_TEXCOORD3;
    SV_Target1 = u_xlat0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_2 = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb0) ? u_xlat16_2 : 0.0399999991;
    u_xlat0.x = (-vs_TEXCOORD2.w) + 1.0;
    u_xlat0.x = u_xlat0.x * _GrassShininess;
    SV_Target2.w = u_xlat0.x;
    SV_Target2.xy = vec2(0.0399999991, 0.0399999991);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_HDR_ON" "INSTANCING_ON" "MHY_SHADER_LOW" "SOFT_SAMPLE_HEIGHT_ON" "DITHER_FADE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	int unity_BaseInstanceID;
uniform 	float _NoiseScale;
uniform 	vec4 _WorldOffsetRange;
uniform 	float _HeightScale;
uniform 	float _Billboard;
uniform 	vec4 _LargeWindParam;
uniform 	vec4 _GlobalWind;
uniform 	float _GrassTipLighting;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BurnedColor;
uniform 	float _RootColorScale;
uniform 	float _RootColorOffset;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _Heightmap;
uniform lowp sampler2D _Noisemap;
in highp vec4 in_POSITION0;
in highp vec4 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec2 in_TEXCOORD2;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp float vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec3 u_xlat0;
uvec3 u_xlatu0;
vec4 u_xlat1;
int u_xlati1;
uvec3 u_xlatu1;
vec3 u_xlat2;
uvec2 u_xlatu2;
vec4 u_xlat3;
vec3 u_xlat4;
vec4 u_xlat5;
vec4 u_xlat6;
vec4 u_xlat7;
vec4 u_xlat8;
float u_xlat9;
uint u_xlatu9;
float u_xlat10;
int u_xlati10;
vec3 u_xlat12;
vec2 u_xlat19;
float u_xlat20;
vec2 u_xlat24;
float u_xlat27;
int u_xlati27;
float u_xlat28;
bool u_xlatb28;
float u_xlat29;
uint u_xlatu29;
float u_xlat31;
void main()
{
    u_xlat0.y = 0.0;
    u_xlat27 = dot(_GlobalWind.xyz, _GlobalWind.xyz);
    u_xlat27 = max(u_xlat27, 0.00100000005);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat1 = vec4(u_xlat27) * _GlobalWind.xzxz;
    u_xlat19.xy = vec2(u_xlat1.z * _LargeWindParam.z, u_xlat1.w * _LargeWindParam.z);
    u_xlati27 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati27 = u_xlati27 << 2;
    u_xlat2.xyz = in_TEXCOORD0.yyy * unity_Builtins0Array[u_xlati27 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz;
    u_xlat2.xyz = unity_Builtins0Array[u_xlati27 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_TEXCOORD0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz + unity_Builtins0Array[u_xlati27 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat3.xy = u_xlat2.xz / vec2(_NoiseScale);
    u_xlat1.xy = _LargeWindParam.xx * u_xlat1.xy + u_xlat3.xy;
    u_xlat1.xy = textureLod(_Noisemap, u_xlat1.xy, 0.0).xy;
    u_xlat1.xy = u_xlat1.xy + vec2(-0.5, -0.5);
    u_xlat1.xy = u_xlat1.xy * _LargeWindParam.yy + vec2(0.5, 0.5);
    u_xlat29 = float(floatBitsToUint(unity_Builtins0Array[u_xlati27 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2]).w);
    u_xlat29 = u_xlat29 * 5.96046448e-08;
    u_xlatu29 = uint(u_xlat29);
    u_xlatu29 = u_xlatu29 & 3u;
    u_xlat29 = float(u_xlatu29);
    u_xlat3.x = (-in_TEXCOORD1.x) + unity_Builtins0Array[u_xlati27 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].x;
    u_xlat12.x = fract(u_xlat3.x);
    u_xlat3.x = u_xlat3.x + unity_Builtins0Array[u_xlati27 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].y;
    u_xlat3.xz = u_xlat3.xx * vec2(22.0, 33.0);
    u_xlat3.xz = fract(u_xlat3.xz);
    u_xlat3.xz = u_xlat3.xz + vec2(-0.5, -0.5);
    u_xlat4.xz = u_xlat3.xz * vec2(0.200000003, 0.200000003);
    u_xlat29 = u_xlat29 + u_xlat12.x;
    u_xlat29 = u_xlat29 + -0.5;
    u_xlat3.x = u_xlat29 * 0.333000004;
    u_xlat5.y = u_xlat29 * 0.333000004 + -1.0;
    u_xlat29 = in_TEXCOORD1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat29 = min(max(u_xlat29, 0.0), 1.0);
#else
    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
#endif
    u_xlat3.x = u_xlat3.x * u_xlat29;
    u_xlat1.xy = u_xlat1.xy * u_xlat3.xx;
    u_xlat0.xz = u_xlat19.xy * u_xlat1.xy;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[0].x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[2].x;
    u_xlat19.x = dot(u_xlat1.xy, u_xlat1.xy);
    u_xlat19.x = inversesqrt(u_xlat19.x);
    u_xlat1.xy = u_xlat19.xx * u_xlat1.xy;
    u_xlat12.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati27 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat12.xyz = unity_Builtins0Array[u_xlati27 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat12.xyz;
    u_xlat12.xyz = unity_Builtins0Array[u_xlati27 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat12.xyz;
    u_xlat12.xyz = u_xlat12.xyz + unity_Builtins0Array[u_xlati27 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat12.xyz = (-u_xlat2.xyz) + u_xlat12.xyz;
    u_xlat6.x = unity_Builtins0Array[u_xlati27 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].x;
    u_xlat6.y = unity_Builtins0Array[u_xlati27 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].x;
    u_xlat19.x = dot(u_xlat6.xy, u_xlat6.xy);
    u_xlat19.x = inversesqrt(u_xlat19.x);
    u_xlat19.xy = u_xlat19.xx * u_xlat6.xy;
    u_xlat31 = u_xlat19.y * u_xlat12.z;
    u_xlat31 = u_xlat12.x * u_xlat19.x + (-u_xlat31);
    u_xlat19.x = dot(u_xlat12.zx, u_xlat19.xy);
    u_xlat19.xy = u_xlat1.xy * u_xlat19.xx;
    u_xlat10 = u_xlat31 * u_xlat1.y + (-u_xlat19.x);
    u_xlat1.x = u_xlat31 * u_xlat1.x + u_xlat19.y;
    u_xlat1.x = u_xlat12.z + u_xlat1.x;
    u_xlat12.z = (-u_xlat1.x) * _Billboard + u_xlat12.z;
    u_xlat1.x = u_xlat12.x + u_xlat10;
    u_xlat12.x = (-u_xlat1.x) * _Billboard + u_xlat12.x;
    u_xlat1.xyz = u_xlat12.xyz * vec3(0.100000001, 1.0, 0.100000001) + u_xlat0.xyz;
    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat9 = max(u_xlat9, 0.00100000005);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
    u_xlat9 = dot(u_xlat12.xyz, u_xlat12.xyz);
    u_xlat9 = sqrt(u_xlat9);
    u_xlat6.xyz = u_xlat12.xyz * vec3(0.100000001, 1.0, 0.100000001);
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat9) + (-u_xlat6.xyz);
    u_xlat6.xy = vec2(_WorldOffsetRange.z + float(2.0), _WorldOffsetRange.w + float(2.0));
    u_xlat24.xy = u_xlat2.xz + (-_WorldOffsetRange.xy);
    u_xlat7.xyz = u_xlat2.xyz + u_xlat12.xyz;
    u_xlat2.xy = u_xlat24.xy + vec2(1.0, 1.0);
    u_xlat2.xy = u_xlat2.xy / u_xlat6.xy;
    u_xlat2.xy = u_xlat2.xy * _WorldOffsetRange.zw + vec2(-0.5, -0.5);
    u_xlat6.xy = floor(u_xlat2.xy);
    u_xlat2.xy = u_xlat2.xy + (-u_xlat6.xy);
    u_xlat8 = u_xlat6.xyxy + vec4(0.5, 1.5, 1.5, 1.5);
    u_xlat6 = u_xlat6.xyxy + vec4(1.5, 0.5, 0.5, 0.5);
    u_xlat6 = vec4(u_xlat6.x / _WorldOffsetRange.z, u_xlat6.y / _WorldOffsetRange.w, u_xlat6.z / _WorldOffsetRange.z, u_xlat6.w / _WorldOffsetRange.w);
    u_xlat8 = vec4(u_xlat8.x / _WorldOffsetRange.z, u_xlat8.y / _WorldOffsetRange.w, u_xlat8.z / _WorldOffsetRange.z, u_xlat8.w / _WorldOffsetRange.w);
    u_xlat9 = textureLod(_Heightmap, u_xlat8.zw, 0.0).x;
    u_xlat28 = textureLod(_Heightmap, u_xlat8.xy, 0.0).x;
    u_xlat9 = u_xlat9 + (-u_xlat28);
    u_xlat9 = u_xlat2.x * u_xlat9 + u_xlat28;
    u_xlat28 = textureLod(_Heightmap, u_xlat6.xy, 0.0).x;
    u_xlat20 = textureLod(_Heightmap, u_xlat6.zw, 0.0).x;
    u_xlat28 = u_xlat28 + (-u_xlat20);
    u_xlat28 = u_xlat2.x * u_xlat28 + u_xlat20;
    u_xlat9 = u_xlat9 + (-u_xlat28);
    u_xlat9 = u_xlat2.y * u_xlat9 + u_xlat28;
    u_xlat7.w = u_xlat9 * _HeightScale + u_xlat7.y;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat7.xwz;
    u_xlatu2.xy = uvec2(65280u, 255u) & floatBitsToUint(unity_Builtins0Array[u_xlati27 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1]).ww;
    u_xlat2.xy = vec2(u_xlatu2.xy);
    u_xlat9 = u_xlat2.x * 0.00390625;
    u_xlat2.z = u_xlat2.y + -127.0;
    u_xlatu9 = uint(u_xlat9);
    u_xlat9 = float(u_xlatu9);
    u_xlat2.x = u_xlat9 + -127.0;
    u_xlat6.xy = u_xlat2.xz * vec2(0.00787401572, 0.00787401572);
    u_xlat6.xy = u_xlat6.xy * u_xlat6.xy;
    u_xlat9 = u_xlat6.y + u_xlat6.x;
    u_xlat9 = (-u_xlat9) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb28 = !!(0.0<u_xlat9);
#else
    u_xlatb28 = 0.0<u_xlat9;
#endif
    u_xlat9 = sqrt(u_xlat9);
    u_xlat2.y = u_xlatb28 ? u_xlat9 : float(0.0);
    u_xlat6.xyz = u_xlat2.xyz * u_xlat12.yyy;
    u_xlat6.xyz = u_xlat3.xxx * u_xlat6.xyz;
    u_xlat9 = max(u_xlat3.x, 9.99999972e-10);
    u_xlat0.yz = u_xlat0.zx / vec2(u_xlat9);
    u_xlat1.xyz = u_xlat6.xyz * vec3(0.00393700786, 0.0, 0.00393700786) + u_xlat1.xyz;
    u_xlat5.xz = u_xlat5.yy * (-u_xlat5.yy);
    u_xlat1.xyz = u_xlat5.xyz * u_xlat12.xyz + u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat5 = u_xlat3.yyyy * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat5 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat3.xxxx + u_xlat5;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat3.zzzz + u_xlat5;
    gl_Position = u_xlat3 + hlslcc_mtx4x4unity_MatrixVPZero[3];
    u_xlat4.y = 0.0;
    vs_TEXCOORD0.xyz = u_xlat2.xyz * vec3(0.00787401572, 1.0, 0.00787401572) + u_xlat4.xyz;
    vs_TEXCOORD0.w = 0.0;
    u_xlat0.x = 0.0;
    u_xlat0.xyz = u_xlat2.yzx * vec3(1.0, 0.00787401572, 0.00787401572) + u_xlat0.xyz;
    u_xlat28 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat28 = inversesqrt(u_xlat28);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat28);
    u_xlat2.xyz = in_NORMAL0.yyy * unity_Builtins0Array[u_xlati27 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat2.xyz = unity_Builtins0Array[u_xlati27 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_NORMAL0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = unity_Builtins0Array[u_xlati27 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_NORMAL0.zzz + u_xlat2.xyz;
    u_xlat28 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat28 = inversesqrt(u_xlat28);
    u_xlat2.xyz = vec3(u_xlat28) * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat0.xyz * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat0.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
    u_xlat28 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat28 = inversesqrt(u_xlat28);
    u_xlat2.xyz = vec3(u_xlat28) * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat0.xyz * u_xlat2.xyz;
    u_xlat0.xyz = u_xlat2.zxy * u_xlat0.yzx + (-u_xlat3.xyz);
    u_xlat28 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat28 = inversesqrt(u_xlat28);
    u_xlat1.xyz = vec3(u_xlat28) * u_xlat1.xyz;
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat0.xyz);
#ifdef UNITY_ADRENO_ES3
    { bool cond = 0.0<u_xlat1.x; u_xlati10 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati10 = int((0.0<u_xlat1.x) ? 0xFFFFFFFFu : uint(0u));
#endif
#ifdef UNITY_ADRENO_ES3
    { bool cond = u_xlat1.x<0.0; u_xlati1 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati1 = int((u_xlat1.x<0.0) ? 0xFFFFFFFFu : uint(0u));
#endif
    u_xlati1 = (-u_xlati10) + u_xlati1;
    u_xlat1.x = float(u_xlati1);
    vs_TEXCOORD1.xyz = u_xlat0.xyz * u_xlat1.xxx;
    vs_TEXCOORD1.w = 0.0;
    u_xlatu0.xyz = uvec3(16711680u, 65280u, 255u) & floatBitsToUint(unity_Builtins0Array[u_xlati27 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2]).www;
    u_xlat0.xyz = vec3(u_xlatu0.xyz);
    u_xlatu1.xyz = uvec3(16711680u, 65280u, 255u) & floatBitsToUint(unity_Builtins0Array[u_xlati27 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3]).www;
    u_xlat27 = max(1.0, unity_Builtins0Array[u_xlati27 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].w);
    u_xlat27 = min(u_xlat27, 2.0);
    u_xlat27 = u_xlat27 + -1.0;
    u_xlat1.xyz = vec3(u_xlatu1.xyz);
    u_xlat1.xyz = u_xlat1.xyz * vec3(5.9838392e-08, 1.53186284e-05, 0.00392156886);
    u_xlat0.xyz = u_xlat0.xyz * vec3(5.9838392e-08, 1.53186284e-05, 0.00392156886) + (-u_xlat1.xyz);
    u_xlat28 = u_xlat29 / _RootColorScale;
    u_xlat28 = u_xlat28 + _RootColorOffset;
#ifdef UNITY_ADRENO_ES3
    u_xlat28 = min(max(u_xlat28, 0.0), 1.0);
#else
    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
#endif
    u_xlat0.xyz = vec3(u_xlat28) * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat1.xyz = (-u_xlat0.xyz) + _BurnedColor.xyz;
    u_xlat0.xyz = vec3(u_xlat27) * u_xlat1.xyz + u_xlat0.xyz;
    vs_TEXCOORD2.w = u_xlat27;
    u_xlat27 = u_xlat29 + -0.600000024;
    vs_TEXCOORD3 = u_xlat29;
    u_xlat27 = max(u_xlat27, 0.0);
    u_xlat27 = _GrassTipLighting * u_xlat27 + 1.0;
    vs_TEXCOORD2.xyz = vec3(u_xlat27) * u_xlat0.xyz;
    vs_TEXCOORD4.xy = in_TEXCOORD2.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	float _GrassShininess;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	float _CutOff;
uniform 	vec4 _BurnedColor;
uniform lowp sampler2D _MainTex;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp float vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec4 u_xlat0;
lowp vec4 u_xlat10_0;
bool u_xlatb0;
vec3 u_xlat1;
mediump float u_xlat16_2;
float u_xlat9;
bool u_xlatb9;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD4.xy);
    u_xlat9 = u_xlat10_0.w + (-_CutOff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(u_xlat9<0.0);
#else
    u_xlatb9 = u_xlat9<0.0;
#endif
    if((int(u_xlatb9) * int(0xffffffffu))!=0){discard;}
    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
    SV_Target0.xyz = u_xlat1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0;
    u_xlat1.xyz = _BurnedColor.xyz * u_xlat10_0.xyz + (-u_xlat10_0.xyz);
    u_xlat0.xyz = vs_TEXCOORD2.www * u_xlat1.xyz + u_xlat10_0.xyz;
    u_xlat0.w = vs_TEXCOORD3;
    SV_Target1 = u_xlat0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_2 = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb0) ? u_xlat16_2 : 0.0399999991;
    u_xlat0.x = (-vs_TEXCOORD2.w) + 1.0;
    u_xlat0.x = u_xlat0.x * _GrassShininess;
    SV_Target2.w = u_xlat0.x;
    SV_Target2.xy = vec2(0.0399999991, 0.0399999991);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_HDR_ON" "UNITY_DEBUG_VIEW_ON" "MHY_SHADER_HIGH" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	float _NoiseScale;
uniform 	vec4 _WorldOffsetRange;
uniform 	float _HeightScale;
uniform 	float _Billboard;
uniform 	float _VegetationMoveScale;
uniform 	float _VegetationStiffness;
uniform 	vec4 _LocalWindsMapSize;
uniform 	vec4 _LargeWindParam;
uniform 	vec4 _SmallWindParam;
uniform 	vec4 _GlobalWind;
uniform 	vec4 _LocalWindsMapCameraInfo;
uniform 	float _GrassTipLighting;
uniform 	vec4 _MainTex_ST;
uniform 	float _RootColorScale;
uniform 	float _RootColorOffset;
uniform highp sampler2D _Heightmap;
uniform lowp sampler2D _Noisemap;
uniform lowp sampler2D _LocalWindsMap;
in highp vec4 in_POSITION0;
in highp vec4 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec2 in_TEXCOORD2;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp float vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec3 u_xlat1;
int u_xlati1;
vec4 u_xlat2;
bool u_xlatb2;
vec3 u_xlat3;
vec4 u_xlat4;
vec3 u_xlat5;
vec4 u_xlat6;
vec4 u_xlat7;
vec4 u_xlat8;
vec3 u_xlat9;
vec3 u_xlat10;
bool u_xlatb10;
vec2 u_xlat12;
vec3 u_xlat16;
vec2 u_xlat20;
vec2 u_xlat22;
float u_xlat30;
int u_xlati30;
float u_xlat31;
float u_xlat33;
float u_xlat34;
void main()
{
    u_xlat0.z = 0.0;
    u_xlat1.xyz = in_TEXCOORD0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[2].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TEXCOORD0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat10.xz = u_xlat1.xz + (-_LocalWindsMapSize.xy);
    u_xlat10.xz = vec2(u_xlat10.x / _LocalWindsMapSize.z, u_xlat10.z / _LocalWindsMapSize.w);
    u_xlat10.xz = u_xlat10.xz + vec2(0.5, 0.5);
    u_xlat2 = textureLod(_LocalWindsMap, u_xlat10.xz, 0.0);
    u_xlat10.x = dot(u_xlat2.xy, u_xlat2.xy);
    u_xlat10.x = sqrt(u_xlat10.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(9.99999975e-05>=u_xlat10.x);
#else
    u_xlatb10 = 9.99999975e-05>=u_xlat10.x;
#endif
    u_xlat10.x = u_xlatb10 ? 1.0 : float(0.0);
    u_xlat3.xy = (-u_xlat2.xy) + vec2(0.5, 0.5);
    u_xlat10.xz = u_xlat10.xx * u_xlat3.xy + u_xlat2.xy;
    u_xlat10.xz = u_xlat10.xz * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat31 = dot(u_xlat10.xz, u_xlat10.xz);
    u_xlat31 = max(u_xlat31, 0.00100000005);
    u_xlat3.x = inversesqrt(u_xlat31);
    u_xlat3.yz = u_xlat10.xz * u_xlat3.xx;
    u_xlat0.x = u_xlat3.z;
    u_xlat0.xz = (-u_xlat3.xy) * vec2(0.0, 1.0) + u_xlat0.xz;
    u_xlat31 = (-in_TEXCOORD1.x) + hlslcc_mtx4x4unity_ObjectToWorld[1].x;
    u_xlat2.x = u_xlat31 * 3.0;
    u_xlat2.x = _Time.y * 3.0 + u_xlat2.x;
    u_xlat2.x = u_xlat2.x + 0.5;
    u_xlat2.x = fract(u_xlat2.x);
    u_xlat2.x = u_xlat2.x * 2.0 + -1.0;
    u_xlat12.x = abs(u_xlat2.x) * abs(u_xlat2.x);
    u_xlat2.x = -abs(u_xlat2.x) * 2.0 + 3.0;
    u_xlat2.x = u_xlat2.x * u_xlat12.x;
    u_xlat12.x = u_xlat2.z * 1.5;
    u_xlat2.x = u_xlat12.x * u_xlat2.x;
    u_xlat0.xz = u_xlat0.xz * u_xlat2.xx;
    u_xlat0.xz = u_xlat0.xz * vec2(0.150000006, 0.150000006);
    u_xlat0.xz = u_xlat3.yz * u_xlat2.xx + u_xlat0.xz;
    u_xlat0.xz = u_xlat0.xz + u_xlat10.xz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(0.00199999986<u_xlat2.z);
#else
    u_xlatb2 = 0.00199999986<u_xlat2.z;
#endif
    u_xlat12.x = (-u_xlat2.w) * _LocalWindsMapCameraInfo.y + _LocalWindsMapCameraInfo.x;
    u_xlat0.xy = (bool(u_xlatb2)) ? u_xlat0.xz : u_xlat10.xz;
    u_xlat20.xy = vec2(_WorldOffsetRange.z + float(2.0), _WorldOffsetRange.w + float(2.0));
    u_xlat2.xz = u_xlat1.xz + (-_WorldOffsetRange.xy);
    u_xlat2.xz = u_xlat2.xz + vec2(1.0, 1.0);
    u_xlat20.xy = u_xlat2.xz / u_xlat20.xy;
    u_xlat20.x = textureLod(_Heightmap, u_xlat20.xy, 0.0).x;
    u_xlat30 = u_xlat20.x * _HeightScale + u_xlat1.y;
    u_xlat30 = (-u_xlat30) + u_xlat12.x;
    u_xlat30 = u_xlat30 * 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
#else
    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
#endif
    u_xlat30 = (-u_xlat30) + 1.0;
    u_xlat2.x = fract(u_xlat31);
    u_xlat31 = u_xlat31 + hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat12.xy = vec2(u_xlat31) * vec2(22.0, 33.0);
    u_xlat12.xy = fract(u_xlat12.xy);
    u_xlat12.xy = u_xlat12.xy + vec2(-0.5, -0.5);
    u_xlat3.xz = u_xlat12.xy * vec2(0.200000003, 0.200000003);
    u_xlat31 = u_xlat2.x + -0.5;
    u_xlat2.x = u_xlat2.x * _SmallWindParam.x;
    u_xlat2.x = sin(u_xlat2.x);
    u_xlat12.x = u_xlat31 * 0.333000004;
    u_xlat4.y = u_xlat31 * 0.333000004 + -1.0;
    u_xlat31 = in_TEXCOORD1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat31 = min(max(u_xlat31, 0.0), 1.0);
#else
    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat12.x * u_xlat31;
    u_xlat30 = u_xlat30 * u_xlat12.x;
    u_xlat0.xy = vec2(u_xlat30) * u_xlat0.xy;
    u_xlat5.xz = u_xlat0.xy * vec2(vec2(_VegetationMoveScale, _VegetationMoveScale));
    u_xlat0.x = dot(_GlobalWind.xyz, _GlobalWind.xyz);
    u_xlat0.x = max(u_xlat0.x, 0.00100000005);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat6 = u_xlat0.xxxx * _GlobalWind.xzxz;
    u_xlat0.xy = vec2(u_xlat6.z * _LargeWindParam.z, u_xlat6.w * _LargeWindParam.z);
    u_xlat22.xy = u_xlat1.xz / vec2(_NoiseScale);
    u_xlat22.xy = _LargeWindParam.xx * u_xlat6.xy + u_xlat22.xy;
    u_xlat22.xy = textureLod(_Noisemap, u_xlat22.xy, 0.0).xy;
    u_xlat22.xy = u_xlat22.xy + vec2(-0.5, -0.5);
    u_xlat22.xy = u_xlat22.xy * _LargeWindParam.yy + vec2(0.5, 0.5);
    u_xlat22.xy = u_xlat12.xx * u_xlat22.xy;
    u_xlat6.xz = u_xlat0.xy * u_xlat22.xy;
    u_xlat6.y = 0.0;
    u_xlat0.x = _VegetationStiffness * _SmallWindParam.y;
    u_xlat0.x = u_xlat12.x * u_xlat0.x;
    u_xlat7.x = u_xlat0.x * u_xlat2.x;
    u_xlat0.xyw = in_NORMAL0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyw = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_NORMAL0.xxx + u_xlat0.xyw;
    u_xlat0.xyw = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_NORMAL0.zzz + u_xlat0.xyw;
    u_xlat2.x = dot(u_xlat0.xyw, u_xlat0.xyw);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat0.xyw = u_xlat0.xyw * u_xlat2.xxx;
    u_xlat7.y = float(1.0);
    u_xlat7.z = float(0.349999994);
    u_xlat2.xzw = u_xlat0.xyw * u_xlat7.yxy;
    u_xlat8.xyz = u_xlat2.xzw * u_xlat7.xzx + u_xlat6.xyz;
    u_xlat2.xzw = u_xlat7.xzx * u_xlat2.xzw;
    u_xlat5.y = 0.0;
    u_xlat7.xyz = u_xlat5.xyz + u_xlat8.xyz;
    u_xlat8.y = hlslcc_mtx4x4unity_MatrixV[0].x;
    u_xlat8.x = hlslcc_mtx4x4unity_MatrixV[2].x;
    u_xlat33 = dot(u_xlat8.xy, u_xlat8.xy);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat16.xz = vec2(u_xlat33) * u_xlat8.xy;
    u_xlat8.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;
    u_xlat8.y = hlslcc_mtx4x4unity_ObjectToWorld[2].x;
    u_xlat33 = dot(u_xlat8.xy, u_xlat8.xy);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat8.xy = vec2(u_xlat33) * u_xlat8.xy;
    u_xlat9.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat9.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat9.xyz;
    u_xlat9.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat9.xyz;
    u_xlat9.xyz = u_xlat9.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat9.xyz = (-u_xlat1.xyz) + u_xlat9.xyz;
    u_xlat33 = u_xlat8.y * u_xlat9.z;
    u_xlat33 = u_xlat9.x * u_xlat8.x + (-u_xlat33);
    u_xlat34 = dot(u_xlat9.zx, u_xlat8.xy);
    u_xlat8.xy = u_xlat16.xz * vec2(u_xlat34);
    u_xlat34 = u_xlat33 * u_xlat16.z + (-u_xlat8.x);
    u_xlat33 = u_xlat33 * u_xlat16.x + u_xlat8.y;
    u_xlat33 = u_xlat9.z + u_xlat33;
    u_xlat9.z = (-u_xlat33) * _Billboard + u_xlat9.z;
    u_xlat33 = u_xlat9.x + u_xlat34;
    u_xlat9.x = (-u_xlat33) * _Billboard + u_xlat9.x;
    u_xlat33 = u_xlat12.x * u_xlat9.y;
    u_xlat12.x = max(u_xlat12.x, 9.99999972e-10);
    u_xlat7.xyz = u_xlat9.xyz * vec3(0.100000001, 1.0, 0.100000001) + u_xlat7.xyz;
    u_xlat34 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat34 = max(u_xlat34, 0.00100000005);
    u_xlat34 = inversesqrt(u_xlat34);
    u_xlat7.xyz = vec3(u_xlat34) * u_xlat7.xyz;
    u_xlat34 = dot(u_xlat9.xyz, u_xlat9.xyz);
    u_xlat34 = sqrt(u_xlat34);
    u_xlat8.xyz = u_xlat9.xyz * vec3(0.100000001, 1.0, 0.100000001);
    u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat34) + (-u_xlat8.xyz);
    u_xlat8.xyz = u_xlat1.xyz + u_xlat9.xyz;
    u_xlat8.w = u_xlat20.x * _HeightScale + u_xlat8.y;
    u_xlat1.xyz = u_xlat7.xyz + u_xlat8.xwz;
    u_xlat1.xyz = vec3(u_xlat33) * vec3(-0.5, 0.0, -0.5) + u_xlat1.xyz;
    u_xlat4.xz = u_xlat4.yy * (-u_xlat4.yy);
    u_xlat1.xyz = u_xlat4.xyz * u_xlat9.xyz + u_xlat1.xyz;
    u_xlat4.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat7 = u_xlat4.yyyy * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat7 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat4.xxxx + u_xlat7;
    u_xlat4 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat4.zzzz + u_xlat7;
    gl_Position = u_xlat4 + hlslcc_mtx4x4unity_MatrixVPZero[3];
    u_xlat3.y = 0.0;
    vs_TEXCOORD0.xyz = u_xlat3.xyz + vec3(-1.0, 0.0, -1.0);
    vs_TEXCOORD0.w = 0.0;
    u_xlat3.xyz = u_xlat5.yzx / u_xlat12.xxx;
    u_xlat4.yz = u_xlat6.zx / u_xlat12.xx;
    u_xlat2.xyz = u_xlat2.zwx / u_xlat12.xxx;
    u_xlat4.x = 0.0;
    u_xlat2.xyz = u_xlat2.xyz + u_xlat4.xyz;
    u_xlat2.xyz = u_xlat3.xyz + u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz + vec3(0.0, -1.0, -1.0);
    u_xlat20.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat20.x = inversesqrt(u_xlat20.x);
    u_xlat2.xyz = u_xlat20.xxx * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat0.xyw * u_xlat2.xyz;
    u_xlat0.xyz = u_xlat2.zxy * u_xlat0.ywx + (-u_xlat3.xyz);
    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.xyz * u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
    u_xlat30 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat1.xyz = vec3(u_xlat30) * u_xlat1.xyz;
    u_xlat30 = dot(u_xlat1.xyz, u_xlat0.xyz);
#ifdef UNITY_ADRENO_ES3
    { bool cond = 0.0<u_xlat30; u_xlati1 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati1 = int((0.0<u_xlat30) ? 0xFFFFFFFFu : uint(0u));
#endif
#ifdef UNITY_ADRENO_ES3
    { bool cond = u_xlat30<0.0; u_xlati30 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati30 = int((u_xlat30<0.0) ? 0xFFFFFFFFu : uint(0u));
#endif
    u_xlati30 = (-u_xlati1) + u_xlati30;
    u_xlat30 = float(u_xlati30);
    vs_TEXCOORD1.xyz = vec3(u_xlat30) * u_xlat0.xyz;
    vs_TEXCOORD1.w = 0.0;
    u_xlat0.x = u_xlat31 / _RootColorScale;
    u_xlat0.x = u_xlat0.x + _RootColorOffset;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xxx * vec3(-0.501960814, 0.0, 0.0) + vec3(0.501960814, 0.0, 0.0);
    u_xlat30 = u_xlat31 + -0.600000024;
    vs_TEXCOORD3 = u_xlat31;
    u_xlat30 = max(u_xlat30, 0.0);
    u_xlat30 = _GrassTipLighting * u_xlat30 + 1.0;
    vs_TEXCOORD2.xyz = vec3(u_xlat30) * u_xlat0.xyz;
    vs_TEXCOORD2.w = 0.0;
    vs_TEXCOORD4.xy = in_TEXCOORD2.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	float _GrassShininess;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	float _CutOff;
uniform 	vec4 _BurnedColor;
uniform lowp sampler2D _MainTex;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp float vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec4 u_xlat0;
lowp vec4 u_xlat10_0;
bool u_xlatb0;
vec3 u_xlat1;
mediump float u_xlat16_2;
float u_xlat9;
bool u_xlatb9;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD4.xy);
    u_xlat9 = u_xlat10_0.w + (-_CutOff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(u_xlat9<0.0);
#else
    u_xlatb9 = u_xlat9<0.0;
#endif
    if((int(u_xlatb9) * int(0xffffffffu))!=0){discard;}
    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
    SV_Target0.xyz = u_xlat1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0;
    u_xlat1.xyz = _BurnedColor.xyz * u_xlat10_0.xyz + (-u_xlat10_0.xyz);
    u_xlat0.xyz = vs_TEXCOORD2.www * u_xlat1.xyz + u_xlat10_0.xyz;
    u_xlat0.w = vs_TEXCOORD3;
    SV_Target1 = u_xlat0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_2 = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb0) ? u_xlat16_2 : 0.0399999991;
    u_xlat0.x = (-vs_TEXCOORD2.w) + 1.0;
    u_xlat0.x = u_xlat0.x * _GrassShininess;
    SV_Target2.w = u_xlat0.x;
    SV_Target2.xy = vec2(0.0399999991, 0.0399999991);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_HDR_ON" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "MHY_SHADER_HIGH" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	int unity_BaseInstanceID;
uniform 	float _NoiseScale;
uniform 	vec4 _WorldOffsetRange;
uniform 	float _HeightScale;
uniform 	float _Billboard;
uniform 	float _VegetationMoveScale;
uniform 	float _VegetationStiffness;
uniform 	vec4 _LocalWindsMapSize;
uniform 	vec4 _LargeWindParam;
uniform 	vec4 _SmallWindParam;
uniform 	vec4 _GlobalWind;
uniform 	vec4 _LocalWindsMapCameraInfo;
uniform 	float _GrassTipLighting;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BurnedColor;
uniform 	float _RootColorScale;
uniform 	float _RootColorOffset;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _Heightmap;
uniform lowp sampler2D _Noisemap;
uniform lowp sampler2D _LocalWindsMap;
in highp vec4 in_POSITION0;
in highp vec4 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec2 in_TEXCOORD2;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp float vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec3 u_xlat0;
int u_xlati0;
uvec3 u_xlatu0;
vec3 u_xlat1;
uvec3 u_xlatu1;
vec4 u_xlat2;
uvec3 u_xlatu2;
vec3 u_xlat3;
vec4 u_xlat4;
vec3 u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
vec3 u_xlat8;
vec4 u_xlat9;
vec4 u_xlat10;
float u_xlat11;
int u_xlati11;
float u_xlat13;
uint u_xlatu13;
vec3 u_xlat17;
vec3 u_xlat18;
float u_xlat22;
int u_xlati22;
bool u_xlatb22;
float u_xlat24;
float u_xlat33;
bool u_xlatb33;
float u_xlat34;
bool u_xlatb34;
float u_xlat36;
void main()
{
    u_xlat0.z = 0.0;
    u_xlati11 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati11 = u_xlati11 << 2;
    u_xlat1.xyz = in_TEXCOORD0.yyy * unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_TEXCOORD0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat2.xy = u_xlat1.xz + (-_LocalWindsMapSize.xy);
    u_xlat2.xy = vec2(u_xlat2.x / _LocalWindsMapSize.z, u_xlat2.y / _LocalWindsMapSize.w);
    u_xlat2.xy = u_xlat2.xy + vec2(0.5, 0.5);
    u_xlat2 = textureLod(_LocalWindsMap, u_xlat2.xy, 0.0);
    u_xlat33 = dot(u_xlat2.xy, u_xlat2.xy);
    u_xlat33 = sqrt(u_xlat33);
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(9.99999975e-05>=u_xlat33);
#else
    u_xlatb33 = 9.99999975e-05>=u_xlat33;
#endif
    u_xlat33 = u_xlatb33 ? 1.0 : float(0.0);
    u_xlat3.xy = (-u_xlat2.xy) + vec2(0.5, 0.5);
    u_xlat2.xy = vec2(u_xlat33) * u_xlat3.xy + u_xlat2.xy;
    u_xlat2.xy = u_xlat2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat33 = dot(u_xlat2.xy, u_xlat2.xy);
    u_xlat33 = max(u_xlat33, 0.00100000005);
    u_xlat3.x = inversesqrt(u_xlat33);
    u_xlat3.yz = u_xlat2.xy * u_xlat3.xx;
    u_xlat0.x = u_xlat3.z;
    u_xlat0.xz = (-u_xlat3.xy) * vec2(0.0, 1.0) + u_xlat0.xz;
    u_xlat33 = (-in_TEXCOORD1.x) + unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].x;
    u_xlat34 = u_xlat33 * 3.0;
    u_xlat34 = _Time.y * 3.0 + u_xlat34;
    u_xlat34 = u_xlat34 + 0.5;
    u_xlat34 = fract(u_xlat34);
    u_xlat34 = u_xlat34 * 2.0 + -1.0;
    u_xlat3.x = abs(u_xlat34) * abs(u_xlat34);
    u_xlat34 = -abs(u_xlat34) * 2.0 + 3.0;
    u_xlat34 = u_xlat34 * u_xlat3.x;
    u_xlat3.x = u_xlat2.z * 1.5;
    u_xlat34 = u_xlat34 * u_xlat3.x;
    u_xlat0.xz = u_xlat0.xz * vec2(u_xlat34);
    u_xlat0.xz = u_xlat0.xz * vec2(0.150000006, 0.150000006);
    u_xlat0.xz = u_xlat3.yz * vec2(u_xlat34) + u_xlat0.xz;
    u_xlat0.xz = u_xlat0.xz + u_xlat2.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlatb34 = !!(0.00199999986<u_xlat2.z);
#else
    u_xlatb34 = 0.00199999986<u_xlat2.z;
#endif
    u_xlat24 = (-u_xlat2.w) * _LocalWindsMapCameraInfo.y + _LocalWindsMapCameraInfo.x;
    u_xlat0.xz = (bool(u_xlatb34)) ? u_xlat0.xz : u_xlat2.xy;
    u_xlat2.xy = vec2(_WorldOffsetRange.z + float(2.0), _WorldOffsetRange.w + float(2.0));
    u_xlat3.xy = u_xlat1.xz + (-_WorldOffsetRange.xy);
    u_xlat3.xy = u_xlat3.xy + vec2(1.0, 1.0);
    u_xlat2.xy = u_xlat3.xy / u_xlat2.xy;
    u_xlat34 = textureLod(_Heightmap, u_xlat2.xy, 0.0).x;
    u_xlat2.x = u_xlat34 * _HeightScale + u_xlat1.y;
    u_xlat2.x = (-u_xlat2.x) + u_xlat24;
    u_xlat2.x = u_xlat2.x * 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat2.x = (-u_xlat2.x) + 1.0;
    u_xlat13 = float(floatBitsToUint(unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2]).w);
    u_xlat13 = u_xlat13 * 5.96046448e-08;
    u_xlatu13 = uint(u_xlat13);
    u_xlatu13 = u_xlatu13 & 3u;
    u_xlat13 = float(u_xlatu13);
    u_xlat24 = fract(u_xlat33);
    u_xlat33 = u_xlat33 + unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].y;
    u_xlat3.xy = vec2(u_xlat33) * vec2(22.0, 33.0);
    u_xlat3.xy = fract(u_xlat3.xy);
    u_xlat3.xy = u_xlat3.xy + vec2(-0.5, -0.5);
    u_xlat3.xz = u_xlat3.xy * vec2(0.200000003, 0.200000003);
    u_xlat33 = u_xlat13 + u_xlat24;
    u_xlat13 = u_xlat24 * _SmallWindParam.x;
    u_xlat13 = sin(u_xlat13);
    u_xlat33 = u_xlat33 + -0.5;
    u_xlat24 = u_xlat33 * 0.333000004;
    u_xlat4.y = u_xlat33 * 0.333000004 + -1.0;
    u_xlat33 = in_TEXCOORD1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat33 = min(max(u_xlat33, 0.0), 1.0);
#else
    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
#endif
    u_xlat24 = u_xlat24 * u_xlat33;
    u_xlat2.x = u_xlat24 * u_xlat2.x;
    u_xlat0.xz = u_xlat0.xz * u_xlat2.xx;
    u_xlat5.xz = u_xlat0.xz * vec2(vec2(_VegetationMoveScale, _VegetationMoveScale));
    u_xlat6.y = 0.0;
    u_xlat0.x = _VegetationStiffness * _SmallWindParam.y;
    u_xlat0.x = u_xlat24 * u_xlat0.x;
    u_xlat7.x = u_xlat0.x * u_xlat13;
    u_xlat2.xyw = in_NORMAL0.yyy * unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat2.xyw = unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_NORMAL0.xxx + u_xlat2.xyw;
    u_xlat2.xyw = unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_NORMAL0.zzz + u_xlat2.xyw;
    u_xlat0.x = dot(u_xlat2.xyw, u_xlat2.xyw);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat2.xyw = u_xlat0.xxx * u_xlat2.xyw;
    u_xlat7.y = float(1.0);
    u_xlat7.z = float(0.349999994);
    u_xlat8.xyz = u_xlat2.xyw * u_xlat7.yxy;
    u_xlat0.x = dot(_GlobalWind.xyz, _GlobalWind.xyz);
    u_xlat0.x = max(u_xlat0.x, 0.00100000005);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat9 = u_xlat0.xxxx * _GlobalWind.xzxz;
    u_xlat0.xz = vec2(u_xlat9.z * _LargeWindParam.z, u_xlat9.w * _LargeWindParam.z);
    u_xlat18.xz = u_xlat1.xz / vec2(_NoiseScale);
    u_xlat18.xz = _LargeWindParam.xx * u_xlat9.xy + u_xlat18.xz;
    u_xlat18.xz = textureLod(_Noisemap, u_xlat18.xz, 0.0).xy;
    u_xlat18.xz = u_xlat18.xz + vec2(-0.5, -0.5);
    u_xlat18.xz = u_xlat18.xz * _LargeWindParam.yy + vec2(0.5, 0.5);
    u_xlat18.xz = vec2(u_xlat24) * u_xlat18.xz;
    u_xlat6.xz = u_xlat0.xz * u_xlat18.xz;
    u_xlat9.xyz = u_xlat8.xyz * u_xlat7.xzx + u_xlat6.xyz;
    u_xlat7.xyz = u_xlat7.xzx * u_xlat8.xyz;
    u_xlat5.y = 0.0;
    u_xlat8.xyz = u_xlat5.xyz + u_xlat9.xyz;
    u_xlat9.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat9.xyz = unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat9.xyz;
    u_xlat9.xyz = unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat9.xyz;
    u_xlat9.xyz = u_xlat9.xyz + unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat9.xyz = (-u_xlat1.xyz) + u_xlat9.xyz;
    u_xlat10.x = unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].x;
    u_xlat10.y = unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].x;
    u_xlat0.x = dot(u_xlat10.xy, u_xlat10.xy);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xz = u_xlat0.xx * u_xlat10.xy;
    u_xlat36 = u_xlat0.z * u_xlat9.z;
    u_xlat36 = u_xlat9.x * u_xlat0.x + (-u_xlat36);
    u_xlat0.x = dot(u_xlat9.zx, u_xlat0.xz);
    u_xlat10.y = hlslcc_mtx4x4unity_MatrixV[0].x;
    u_xlat10.x = hlslcc_mtx4x4unity_MatrixV[2].x;
    u_xlat22 = dot(u_xlat10.xy, u_xlat10.xy);
    u_xlat22 = inversesqrt(u_xlat22);
    u_xlat17.xz = vec2(u_xlat22) * u_xlat10.xy;
    u_xlat0.xz = u_xlat0.xx * u_xlat17.xz;
    u_xlat0.x = u_xlat36 * u_xlat17.z + (-u_xlat0.x);
    u_xlat0.z = u_xlat36 * u_xlat17.x + u_xlat0.z;
    u_xlat0.xz = u_xlat9.xz + u_xlat0.xz;
    u_xlat9.z = (-u_xlat0.z) * _Billboard + u_xlat9.z;
    u_xlat9.x = (-u_xlat0.x) * _Billboard + u_xlat9.x;
    u_xlat8.xyz = u_xlat9.xyz * vec3(0.100000001, 1.0, 0.100000001) + u_xlat8.xyz;
    u_xlat0.x = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat0.x = max(u_xlat0.x, 0.00100000005);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat8.xyz = u_xlat0.xxx * u_xlat8.xyz;
    u_xlat0.x = dot(u_xlat9.xyz, u_xlat9.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat10.xyz = u_xlat9.xyz * vec3(0.100000001, 1.0, 0.100000001);
    u_xlat8.xyz = u_xlat8.xyz * u_xlat0.xxx + (-u_xlat10.xyz);
    u_xlat10.xyz = u_xlat1.xyz + u_xlat9.xyz;
    u_xlat10.w = u_xlat34 * _HeightScale + u_xlat10.y;
    u_xlat1.xyz = u_xlat8.xyz + u_xlat10.xwz;
    u_xlatu0.xz = uvec2(65280u, 255u) & floatBitsToUint(unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1]).ww;
    u_xlat0.xz = vec2(u_xlatu0.xz);
    u_xlat0.x = u_xlat0.x * 0.00390625;
    u_xlatu0.x = uint(u_xlat0.x);
    u_xlat0.x = float(u_xlatu0.x);
    u_xlat8.xz = u_xlat0.xz + vec2(-127.0, -127.0);
    u_xlat0.xz = u_xlat8.xz * vec2(0.00787401572, 0.00787401572);
    u_xlat0.xz = u_xlat0.xz * u_xlat0.xz;
    u_xlat0.x = u_xlat0.z + u_xlat0.x;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(0.0<u_xlat0.x);
#else
    u_xlatb22 = 0.0<u_xlat0.x;
#endif
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat8.y = u_xlatb22 ? u_xlat0.x : float(0.0);
    u_xlat10.xyz = u_xlat8.xyz * u_xlat9.yyy;
    u_xlat10.xyz = vec3(u_xlat24) * u_xlat10.xyz;
    u_xlat0.x = max(u_xlat24, 9.99999972e-10);
    u_xlat1.xyz = u_xlat10.xyz * vec3(0.00393700786, 0.0, 0.00393700786) + u_xlat1.xyz;
    u_xlat4.xz = u_xlat4.yy * (-u_xlat4.yy);
    u_xlat1.xyz = u_xlat4.xyz * u_xlat9.xyz + u_xlat1.xyz;
    u_xlat4.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat9 = u_xlat4.yyyy * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat9 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat4.xxxx + u_xlat9;
    u_xlat4 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat4.zzzz + u_xlat9;
    gl_Position = u_xlat4 + hlslcc_mtx4x4unity_MatrixVPZero[3];
    u_xlat3.y = 0.0;
    vs_TEXCOORD0.xyz = u_xlat8.xyz * vec3(0.00787401572, 1.0, 0.00787401572) + u_xlat3.xyz;
    vs_TEXCOORD0.w = 0.0;
    u_xlat3.xyz = u_xlat5.yzx / u_xlat0.xxx;
    u_xlat4.yz = u_xlat6.zx / u_xlat0.xx;
    u_xlat5.xyz = u_xlat7.yzx / u_xlat0.xxx;
    u_xlat4.x = 0.0;
    u_xlat4.xyz = u_xlat4.xyz + u_xlat5.xyz;
    u_xlat3.xyz = u_xlat3.xyz + u_xlat4.xyz;
    u_xlat3.xyz = u_xlat8.yzx * vec3(1.0, 0.00787401572, 0.00787401572) + u_xlat3.xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.xyw * u_xlat3.xyz;
    u_xlat2.xyz = u_xlat3.zxy * u_xlat2.ywx + (-u_xlat4.xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat4.xyz = u_xlat3.xyz * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
    { bool cond = 0.0<u_xlat0.x; u_xlati22 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati22 = int((0.0<u_xlat0.x) ? 0xFFFFFFFFu : uint(0u));
#endif
#ifdef UNITY_ADRENO_ES3
    { bool cond = u_xlat0.x<0.0; u_xlati0 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati0 = int((u_xlat0.x<0.0) ? 0xFFFFFFFFu : uint(0u));
#endif
    u_xlati0 = (-u_xlati22) + u_xlati0;
    u_xlat0.x = float(u_xlati0);
    vs_TEXCOORD1.xyz = u_xlat0.xxx * u_xlat2.xyz;
    vs_TEXCOORD1.w = 0.0;
    u_xlatu1.xyz = uvec3(16711680u, 65280u, 255u) & floatBitsToUint(unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2]).www;
    u_xlat1.xyz = vec3(u_xlatu1.xyz);
    u_xlatu2.xyz = uvec3(16711680u, 65280u, 255u) & floatBitsToUint(unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3]).www;
    u_xlat0.x = max(1.0, unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].w);
    u_xlat0.x = min(u_xlat0.x, 2.0);
    u_xlat0.x = u_xlat0.x + -1.0;
    u_xlat2.xyz = vec3(u_xlatu2.xyz);
    u_xlat2.xyz = u_xlat2.xyz * vec3(5.9838392e-08, 1.53186284e-05, 0.00392156886);
    u_xlat1.xyz = u_xlat1.xyz * vec3(5.9838392e-08, 1.53186284e-05, 0.00392156886) + (-u_xlat2.xyz);
    u_xlat11 = u_xlat33 / _RootColorScale;
    u_xlat11 = u_xlat11 + _RootColorOffset;
#ifdef UNITY_ADRENO_ES3
    u_xlat11 = min(max(u_xlat11, 0.0), 1.0);
#else
    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat11) * u_xlat1.xyz + u_xlat2.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _BurnedColor.xyz;
    u_xlat1.xyz = u_xlat0.xxx * u_xlat2.xyz + u_xlat1.xyz;
    vs_TEXCOORD2.w = u_xlat0.x;
    u_xlat0.x = u_xlat33 + -0.600000024;
    vs_TEXCOORD3 = u_xlat33;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = _GrassTipLighting * u_xlat0.x + 1.0;
    vs_TEXCOORD2.xyz = u_xlat0.xxx * u_xlat1.xyz;
    vs_TEXCOORD4.xy = in_TEXCOORD2.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	float _GrassShininess;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	float _CutOff;
uniform 	vec4 _BurnedColor;
uniform lowp sampler2D _MainTex;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp float vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec4 u_xlat0;
lowp vec4 u_xlat10_0;
bool u_xlatb0;
vec3 u_xlat1;
mediump float u_xlat16_2;
float u_xlat9;
bool u_xlatb9;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD4.xy);
    u_xlat9 = u_xlat10_0.w + (-_CutOff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(u_xlat9<0.0);
#else
    u_xlatb9 = u_xlat9<0.0;
#endif
    if((int(u_xlatb9) * int(0xffffffffu))!=0){discard;}
    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
    SV_Target0.xyz = u_xlat1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0;
    u_xlat1.xyz = _BurnedColor.xyz * u_xlat10_0.xyz + (-u_xlat10_0.xyz);
    u_xlat0.xyz = vs_TEXCOORD2.www * u_xlat1.xyz + u_xlat10_0.xyz;
    u_xlat0.w = vs_TEXCOORD3;
    SV_Target1 = u_xlat0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_2 = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb0) ? u_xlat16_2 : 0.0399999991;
    u_xlat0.x = (-vs_TEXCOORD2.w) + 1.0;
    u_xlat0.x = u_xlat0.x * _GrassShininess;
    SV_Target2.w = u_xlat0.x;
    SV_Target2.xy = vec2(0.0399999991, 0.0399999991);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_HDR_ON" "UNITY_DEBUG_VIEW_ON" "MHY_SHADER_HIGH" "DITHER_FADE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	float _NoiseScale;
uniform 	vec4 _WorldOffsetRange;
uniform 	float _HeightScale;
uniform 	float _Billboard;
uniform 	float _VegetationMoveScale;
uniform 	float _VegetationStiffness;
uniform 	vec4 _LocalWindsMapSize;
uniform 	vec4 _LargeWindParam;
uniform 	vec4 _SmallWindParam;
uniform 	vec4 _GlobalWind;
uniform 	vec4 _LocalWindsMapCameraInfo;
uniform 	float _GrassTipLighting;
uniform 	vec4 _MainTex_ST;
uniform 	float _RootColorScale;
uniform 	float _RootColorOffset;
uniform highp sampler2D _Heightmap;
uniform lowp sampler2D _Noisemap;
uniform lowp sampler2D _LocalWindsMap;
in highp vec4 in_POSITION0;
in highp vec4 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec2 in_TEXCOORD2;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp float vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
vec4 u_xlat0;
vec3 u_xlat1;
int u_xlati1;
vec4 u_xlat2;
bool u_xlatb2;
vec3 u_xlat3;
vec4 u_xlat4;
vec3 u_xlat5;
vec4 u_xlat6;
vec4 u_xlat7;
vec4 u_xlat8;
vec3 u_xlat9;
vec3 u_xlat10;
bool u_xlatb10;
vec2 u_xlat12;
vec3 u_xlat16;
vec2 u_xlat20;
vec2 u_xlat22;
float u_xlat30;
int u_xlati30;
float u_xlat31;
float u_xlat33;
float u_xlat34;
void main()
{
    u_xlat0.z = 0.0;
    u_xlat1.xyz = in_TEXCOORD0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[2].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TEXCOORD0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat10.xz = u_xlat1.xz + (-_LocalWindsMapSize.xy);
    u_xlat10.xz = vec2(u_xlat10.x / _LocalWindsMapSize.z, u_xlat10.z / _LocalWindsMapSize.w);
    u_xlat10.xz = u_xlat10.xz + vec2(0.5, 0.5);
    u_xlat2 = textureLod(_LocalWindsMap, u_xlat10.xz, 0.0);
    u_xlat10.x = dot(u_xlat2.xy, u_xlat2.xy);
    u_xlat10.x = sqrt(u_xlat10.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(9.99999975e-05>=u_xlat10.x);
#else
    u_xlatb10 = 9.99999975e-05>=u_xlat10.x;
#endif
    u_xlat10.x = u_xlatb10 ? 1.0 : float(0.0);
    u_xlat3.xy = (-u_xlat2.xy) + vec2(0.5, 0.5);
    u_xlat10.xz = u_xlat10.xx * u_xlat3.xy + u_xlat2.xy;
    u_xlat10.xz = u_xlat10.xz * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat31 = dot(u_xlat10.xz, u_xlat10.xz);
    u_xlat31 = max(u_xlat31, 0.00100000005);
    u_xlat3.x = inversesqrt(u_xlat31);
    u_xlat3.yz = u_xlat10.xz * u_xlat3.xx;
    u_xlat0.x = u_xlat3.z;
    u_xlat0.xz = (-u_xlat3.xy) * vec2(0.0, 1.0) + u_xlat0.xz;
    u_xlat31 = (-in_TEXCOORD1.x) + hlslcc_mtx4x4unity_ObjectToWorld[1].x;
    u_xlat2.x = u_xlat31 * 3.0;
    u_xlat2.x = _Time.y * 3.0 + u_xlat2.x;
    u_xlat2.x = u_xlat2.x + 0.5;
    u_xlat2.x = fract(u_xlat2.x);
    u_xlat2.x = u_xlat2.x * 2.0 + -1.0;
    u_xlat12.x = abs(u_xlat2.x) * abs(u_xlat2.x);
    u_xlat2.x = -abs(u_xlat2.x) * 2.0 + 3.0;
    u_xlat2.x = u_xlat2.x * u_xlat12.x;
    u_xlat12.x = u_xlat2.z * 1.5;
    u_xlat2.x = u_xlat12.x * u_xlat2.x;
    u_xlat0.xz = u_xlat0.xz * u_xlat2.xx;
    u_xlat0.xz = u_xlat0.xz * vec2(0.150000006, 0.150000006);
    u_xlat0.xz = u_xlat3.yz * u_xlat2.xx + u_xlat0.xz;
    u_xlat0.xz = u_xlat0.xz + u_xlat10.xz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(0.00199999986<u_xlat2.z);
#else
    u_xlatb2 = 0.00199999986<u_xlat2.z;
#endif
    u_xlat12.x = (-u_xlat2.w) * _LocalWindsMapCameraInfo.y + _LocalWindsMapCameraInfo.x;
    u_xlat0.xy = (bool(u_xlatb2)) ? u_xlat0.xz : u_xlat10.xz;
    u_xlat20.xy = vec2(_WorldOffsetRange.z + float(2.0), _WorldOffsetRange.w + float(2.0));
    u_xlat2.xz = u_xlat1.xz + (-_WorldOffsetRange.xy);
    u_xlat2.xz = u_xlat2.xz + vec2(1.0, 1.0);
    u_xlat20.xy = u_xlat2.xz / u_xlat20.xy;
    u_xlat20.x = textureLod(_Heightmap, u_xlat20.xy, 0.0).x;
    u_xlat30 = u_xlat20.x * _HeightScale + u_xlat1.y;
    u_xlat30 = (-u_xlat30) + u_xlat12.x;
    u_xlat30 = u_xlat30 * 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
#else
    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
#endif
    u_xlat30 = (-u_xlat30) + 1.0;
    u_xlat2.x = fract(u_xlat31);
    u_xlat31 = u_xlat31 + hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat12.xy = vec2(u_xlat31) * vec2(22.0, 33.0);
    u_xlat12.xy = fract(u_xlat12.xy);
    u_xlat12.xy = u_xlat12.xy + vec2(-0.5, -0.5);
    u_xlat3.xz = u_xlat12.xy * vec2(0.200000003, 0.200000003);
    u_xlat31 = u_xlat2.x + -0.5;
    u_xlat2.x = u_xlat2.x * _SmallWindParam.x;
    u_xlat2.x = sin(u_xlat2.x);
    u_xlat12.x = u_xlat31 * 0.333000004;
    u_xlat4.y = u_xlat31 * 0.333000004 + -1.0;
    u_xlat31 = in_TEXCOORD1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat31 = min(max(u_xlat31, 0.0), 1.0);
#else
    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat12.x * u_xlat31;
    u_xlat30 = u_xlat30 * u_xlat12.x;
    u_xlat0.xy = vec2(u_xlat30) * u_xlat0.xy;
    u_xlat5.xz = u_xlat0.xy * vec2(vec2(_VegetationMoveScale, _VegetationMoveScale));
    u_xlat0.x = dot(_GlobalWind.xyz, _GlobalWind.xyz);
    u_xlat0.x = max(u_xlat0.x, 0.00100000005);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat6 = u_xlat0.xxxx * _GlobalWind.xzxz;
    u_xlat0.xy = vec2(u_xlat6.z * _LargeWindParam.z, u_xlat6.w * _LargeWindParam.z);
    u_xlat22.xy = u_xlat1.xz / vec2(_NoiseScale);
    u_xlat22.xy = _LargeWindParam.xx * u_xlat6.xy + u_xlat22.xy;
    u_xlat22.xy = textureLod(_Noisemap, u_xlat22.xy, 0.0).xy;
    u_xlat22.xy = u_xlat22.xy + vec2(-0.5, -0.5);
    u_xlat22.xy = u_xlat22.xy * _LargeWindParam.yy + vec2(0.5, 0.5);
    u_xlat22.xy = u_xlat12.xx * u_xlat22.xy;
    u_xlat6.xz = u_xlat0.xy * u_xlat22.xy;
    u_xlat6.y = 0.0;
    u_xlat0.x = _VegetationStiffness * _SmallWindParam.y;
    u_xlat0.x = u_xlat12.x * u_xlat0.x;
    u_xlat7.x = u_xlat0.x * u_xlat2.x;
    u_xlat0.xyw = in_NORMAL0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyw = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_NORMAL0.xxx + u_xlat0.xyw;
    u_xlat0.xyw = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_NORMAL0.zzz + u_xlat0.xyw;
    u_xlat2.x = dot(u_xlat0.xyw, u_xlat0.xyw);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat0.xyw = u_xlat0.xyw * u_xlat2.xxx;
    u_xlat7.y = float(1.0);
    u_xlat7.z = float(0.349999994);
    u_xlat2.xzw = u_xlat0.xyw * u_xlat7.yxy;
    u_xlat8.xyz = u_xlat2.xzw * u_xlat7.xzx + u_xlat6.xyz;
    u_xlat2.xzw = u_xlat7.xzx * u_xlat2.xzw;
    u_xlat5.y = 0.0;
    u_xlat7.xyz = u_xlat5.xyz + u_xlat8.xyz;
    u_xlat8.y = hlslcc_mtx4x4unity_MatrixV[0].x;
    u_xlat8.x = hlslcc_mtx4x4unity_MatrixV[2].x;
    u_xlat33 = dot(u_xlat8.xy, u_xlat8.xy);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat16.xz = vec2(u_xlat33) * u_xlat8.xy;
    u_xlat8.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;
    u_xlat8.y = hlslcc_mtx4x4unity_ObjectToWorld[2].x;
    u_xlat33 = dot(u_xlat8.xy, u_xlat8.xy);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat8.xy = vec2(u_xlat33) * u_xlat8.xy;
    u_xlat9.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat9.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat9.xyz;
    u_xlat9.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat9.xyz;
    u_xlat9.xyz = u_xlat9.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat9.xyz = (-u_xlat1.xyz) + u_xlat9.xyz;
    u_xlat33 = u_xlat8.y * u_xlat9.z;
    u_xlat33 = u_xlat9.x * u_xlat8.x + (-u_xlat33);
    u_xlat34 = dot(u_xlat9.zx, u_xlat8.xy);
    u_xlat8.xy = u_xlat16.xz * vec2(u_xlat34);
    u_xlat34 = u_xlat33 * u_xlat16.z + (-u_xlat8.x);
    u_xlat33 = u_xlat33 * u_xlat16.x + u_xlat8.y;
    u_xlat33 = u_xlat9.z + u_xlat33;
    u_xlat9.z = (-u_xlat33) * _Billboard + u_xlat9.z;
    u_xlat33 = u_xlat9.x + u_xlat34;
    u_xlat9.x = (-u_xlat33) * _Billboard + u_xlat9.x;
    u_xlat33 = u_xlat12.x * u_xlat9.y;
    u_xlat12.x = max(u_xlat12.x, 9.99999972e-10);
    u_xlat7.xyz = u_xlat9.xyz * vec3(0.100000001, 1.0, 0.100000001) + u_xlat7.xyz;
    u_xlat34 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat34 = max(u_xlat34, 0.00100000005);
    u_xlat34 = inversesqrt(u_xlat34);
    u_xlat7.xyz = vec3(u_xlat34) * u_xlat7.xyz;
    u_xlat34 = dot(u_xlat9.xyz, u_xlat9.xyz);
    u_xlat34 = sqrt(u_xlat34);
    u_xlat8.xyz = u_xlat9.xyz * vec3(0.100000001, 1.0, 0.100000001);
    u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat34) + (-u_xlat8.xyz);
    u_xlat8.xyz = u_xlat1.xyz + u_xlat9.xyz;
    u_xlat8.w = u_xlat20.x * _HeightScale + u_xlat8.y;
    u_xlat1.xyz = u_xlat7.xyz + u_xlat8.xwz;
    u_xlat1.xyz = vec3(u_xlat33) * vec3(-0.5, 0.0, -0.5) + u_xlat1.xyz;
    u_xlat4.xz = u_xlat4.yy * (-u_xlat4.yy);
    u_xlat1.xyz = u_xlat4.xyz * u_xlat9.xyz + u_xlat1.xyz;
    u_xlat4.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat7 = u_xlat4.yyyy * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat7 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat4.xxxx + u_xlat7;
    u_xlat4 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat4.zzzz + u_xlat7;
    u_xlat4 = u_xlat4 + hlslcc_mtx4x4unity_MatrixVPZero[3];
    gl_Position = u_xlat4;
    u_xlat3.y = 0.0;
    vs_TEXCOORD0.xyz = u_xlat3.xyz + vec3(-1.0, 0.0, -1.0);
    vs_TEXCOORD0.w = 0.0;
    u_xlat3.xyz = u_xlat5.yzx / u_xlat12.xxx;
    u_xlat5.yz = u_xlat6.zx / u_xlat12.xx;
    u_xlat2.xyz = u_xlat2.zwx / u_xlat12.xxx;
    u_xlat5.x = 0.0;
    u_xlat2.xyz = u_xlat2.xyz + u_xlat5.xyz;
    u_xlat2.xyz = u_xlat3.xyz + u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz + vec3(0.0, -1.0, -1.0);
    u_xlat20.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat20.x = inversesqrt(u_xlat20.x);
    u_xlat2.xyz = u_xlat20.xxx * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat0.xyw * u_xlat2.xyz;
    u_xlat0.xyz = u_xlat2.zxy * u_xlat0.ywx + (-u_xlat3.xyz);
    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.xyz * u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
    u_xlat30 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat1.xyz = vec3(u_xlat30) * u_xlat1.xyz;
    u_xlat30 = dot(u_xlat1.xyz, u_xlat0.xyz);
#ifdef UNITY_ADRENO_ES3
    { bool cond = 0.0<u_xlat30; u_xlati1 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati1 = int((0.0<u_xlat30) ? 0xFFFFFFFFu : uint(0u));
#endif
#ifdef UNITY_ADRENO_ES3
    { bool cond = u_xlat30<0.0; u_xlati30 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati30 = int((u_xlat30<0.0) ? 0xFFFFFFFFu : uint(0u));
#endif
    u_xlati30 = (-u_xlati1) + u_xlati30;
    u_xlat30 = float(u_xlati30);
    vs_TEXCOORD1.xyz = vec3(u_xlat30) * u_xlat0.xyz;
    vs_TEXCOORD1.w = 0.0;
    u_xlat0.x = u_xlat31 / _RootColorScale;
    u_xlat0.x = u_xlat0.x + _RootColorOffset;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xxx * vec3(-0.501960814, 0.0, 0.0) + vec3(0.501960814, 0.0, 0.0);
    u_xlat30 = u_xlat31 + -0.600000024;
    vs_TEXCOORD3 = u_xlat31;
    u_xlat30 = max(u_xlat30, 0.0);
    u_xlat30 = _GrassTipLighting * u_xlat30 + 1.0;
    vs_TEXCOORD2.xyz = vec3(u_xlat30) * u_xlat0.xyz;
    vs_TEXCOORD2.w = 0.0;
    vs_TEXCOORD4.xy = in_TEXCOORD2.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
    u_xlat0.x = u_xlat4.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat4.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.w = u_xlat4.w;
    vs_TEXCOORD5.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD5.z = 0.247058824;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
float ImmCB_0_0_0[64];
uniform 	vec4 _ScreenParams;
uniform 	float _GrassShininess;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	float _CutOff;
uniform 	vec4 _BurnedColor;
uniform lowp sampler2D _MainTex;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp float vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec3 u_xlat0;
int u_xlati0;
bool u_xlatb0;
lowp vec4 u_xlat10_1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat12;
bool u_xlatb12;
void main()
{
	ImmCB_0_0_0[0] = 1.0;
	ImmCB_0_0_0[1] = 49.0;
	ImmCB_0_0_0[2] = 13.0;
	ImmCB_0_0_0[3] = 61.0;
	ImmCB_0_0_0[4] = 4.0;
	ImmCB_0_0_0[5] = 52.0;
	ImmCB_0_0_0[6] = 16.0;
	ImmCB_0_0_0[7] = 64.0;
	ImmCB_0_0_0[8] = 33.0;
	ImmCB_0_0_0[9] = 17.0;
	ImmCB_0_0_0[10] = 45.0;
	ImmCB_0_0_0[11] = 29.0;
	ImmCB_0_0_0[12] = 36.0;
	ImmCB_0_0_0[13] = 20.0;
	ImmCB_0_0_0[14] = 48.0;
	ImmCB_0_0_0[15] = 32.0;
	ImmCB_0_0_0[16] = 9.0;
	ImmCB_0_0_0[17] = 57.0;
	ImmCB_0_0_0[18] = 5.0;
	ImmCB_0_0_0[19] = 53.0;
	ImmCB_0_0_0[20] = 12.0;
	ImmCB_0_0_0[21] = 60.0;
	ImmCB_0_0_0[22] = 8.0;
	ImmCB_0_0_0[23] = 56.0;
	ImmCB_0_0_0[24] = 41.0;
	ImmCB_0_0_0[25] = 25.0;
	ImmCB_0_0_0[26] = 37.0;
	ImmCB_0_0_0[27] = 21.0;
	ImmCB_0_0_0[28] = 44.0;
	ImmCB_0_0_0[29] = 28.0;
	ImmCB_0_0_0[30] = 40.0;
	ImmCB_0_0_0[31] = 24.0;
	ImmCB_0_0_0[32] = 3.0;
	ImmCB_0_0_0[33] = 51.0;
	ImmCB_0_0_0[34] = 15.0;
	ImmCB_0_0_0[35] = 63.0;
	ImmCB_0_0_0[36] = 2.0;
	ImmCB_0_0_0[37] = 50.0;
	ImmCB_0_0_0[38] = 14.0;
	ImmCB_0_0_0[39] = 62.0;
	ImmCB_0_0_0[40] = 35.0;
	ImmCB_0_0_0[41] = 19.0;
	ImmCB_0_0_0[42] = 47.0;
	ImmCB_0_0_0[43] = 31.0;
	ImmCB_0_0_0[44] = 34.0;
	ImmCB_0_0_0[45] = 18.0;
	ImmCB_0_0_0[46] = 46.0;
	ImmCB_0_0_0[47] = 30.0;
	ImmCB_0_0_0[48] = 11.0;
	ImmCB_0_0_0[49] = 59.0;
	ImmCB_0_0_0[50] = 7.0;
	ImmCB_0_0_0[51] = 55.0;
	ImmCB_0_0_0[52] = 10.0;
	ImmCB_0_0_0[53] = 58.0;
	ImmCB_0_0_0[54] = 6.0;
	ImmCB_0_0_0[55] = 54.0;
	ImmCB_0_0_0[56] = 43.0;
	ImmCB_0_0_0[57] = 27.0;
	ImmCB_0_0_0[58] = 39.0;
	ImmCB_0_0_0[59] = 23.0;
	ImmCB_0_0_0[60] = 42.0;
	ImmCB_0_0_0[61] = 26.0;
	ImmCB_0_0_0[62] = 38.0;
	ImmCB_0_0_0[63] = 22.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vs_TEXCOORD5.z<0.949999988);
#else
    u_xlatb0 = vs_TEXCOORD5.z<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD5.yx / vs_TEXCOORD5.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
        u_xlat0.xy = u_xlat0.xy * vec2(0.125, 0.125);
        u_xlat0.xy = fract(u_xlat0.xy);
        u_xlat0.xy = u_xlat0.xy * vec2(7.99900007, 7.99900007);
        u_xlat0.xy = trunc(u_xlat0.xy);
        u_xlat0.x = u_xlat0.x * 8.0 + u_xlat0.y;
        u_xlati0 = int(u_xlat0.x);
        u_xlat0.x = (-ImmCB_0_0_0[u_xlati0]) * 0.015625 + vs_TEXCOORD5.z;
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat0.x = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD0.xyz;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD4.xy);
    u_xlat2.xyz = _BurnedColor.xyz * u_xlat10_1.xyz + (-u_xlat10_1.xyz);
    u_xlat2.xyz = vs_TEXCOORD2.www * u_xlat2.xyz + u_xlat10_1.xyz;
    u_xlat12 = u_xlat10_1.w + (-_CutOff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat12<0.0);
#else
    u_xlatb12 = u_xlat12<0.0;
#endif
    if((int(u_xlatb12) * int(0xffffffffu))!=0){discard;}
    u_xlat12 = (-vs_TEXCOORD2.w) + 1.0;
    u_xlat12 = u_xlat12 * _GrassShininess;
    SV_Target0.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_3 = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb0) ? u_xlat16_3 : 0.0399999991;
    SV_Target0.w = 0.0;
    u_xlat2.w = vs_TEXCOORD3;
    SV_Target1 = u_xlat2;
    SV_Target2.xy = vec2(0.0399999991, 0.0399999991);
    SV_Target2.w = u_xlat12;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_HDR_ON" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "MHY_SHADER_HIGH" "DITHER_FADE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	int unity_BaseInstanceID;
uniform 	float _NoiseScale;
uniform 	vec4 _WorldOffsetRange;
uniform 	float _HeightScale;
uniform 	float _Billboard;
uniform 	float _VegetationMoveScale;
uniform 	float _VegetationStiffness;
uniform 	vec4 _LocalWindsMapSize;
uniform 	vec4 _LargeWindParam;
uniform 	vec4 _SmallWindParam;
uniform 	vec4 _GlobalWind;
uniform 	vec4 _LocalWindsMapCameraInfo;
uniform 	float _GrassTipLighting;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BurnedColor;
uniform 	float _RootColorScale;
uniform 	float _RootColorOffset;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _Heightmap;
uniform lowp sampler2D _Noisemap;
uniform lowp sampler2D _LocalWindsMap;
in highp vec4 in_POSITION0;
in highp vec4 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec2 in_TEXCOORD2;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp float vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
vec4 u_xlat0;
int u_xlati0;
uvec3 u_xlatu0;
vec3 u_xlat1;
uvec3 u_xlatu1;
vec4 u_xlat2;
uvec4 u_xlatu2;
vec3 u_xlat3;
vec4 u_xlat4;
vec3 u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
vec3 u_xlat8;
vec4 u_xlat9;
vec4 u_xlat10;
float u_xlat11;
int u_xlati11;
float u_xlat13;
uint u_xlatu13;
vec3 u_xlat17;
vec3 u_xlat18;
float u_xlat22;
int u_xlati22;
bool u_xlatb22;
float u_xlat24;
float u_xlat33;
bool u_xlatb33;
float u_xlat34;
bool u_xlatb34;
float u_xlat36;
void main()
{
    u_xlat0.z = 0.0;
    u_xlati11 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati11 = u_xlati11 << 2;
    u_xlat1.xyz = in_TEXCOORD0.yyy * unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_TEXCOORD0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat2.xy = u_xlat1.xz + (-_LocalWindsMapSize.xy);
    u_xlat2.xy = vec2(u_xlat2.x / _LocalWindsMapSize.z, u_xlat2.y / _LocalWindsMapSize.w);
    u_xlat2.xy = u_xlat2.xy + vec2(0.5, 0.5);
    u_xlat2 = textureLod(_LocalWindsMap, u_xlat2.xy, 0.0);
    u_xlat33 = dot(u_xlat2.xy, u_xlat2.xy);
    u_xlat33 = sqrt(u_xlat33);
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(9.99999975e-05>=u_xlat33);
#else
    u_xlatb33 = 9.99999975e-05>=u_xlat33;
#endif
    u_xlat33 = u_xlatb33 ? 1.0 : float(0.0);
    u_xlat3.xy = (-u_xlat2.xy) + vec2(0.5, 0.5);
    u_xlat2.xy = vec2(u_xlat33) * u_xlat3.xy + u_xlat2.xy;
    u_xlat2.xy = u_xlat2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat33 = dot(u_xlat2.xy, u_xlat2.xy);
    u_xlat33 = max(u_xlat33, 0.00100000005);
    u_xlat3.x = inversesqrt(u_xlat33);
    u_xlat3.yz = u_xlat2.xy * u_xlat3.xx;
    u_xlat0.x = u_xlat3.z;
    u_xlat0.xz = (-u_xlat3.xy) * vec2(0.0, 1.0) + u_xlat0.xz;
    u_xlat33 = (-in_TEXCOORD1.x) + unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].x;
    u_xlat34 = u_xlat33 * 3.0;
    u_xlat34 = _Time.y * 3.0 + u_xlat34;
    u_xlat34 = u_xlat34 + 0.5;
    u_xlat34 = fract(u_xlat34);
    u_xlat34 = u_xlat34 * 2.0 + -1.0;
    u_xlat3.x = abs(u_xlat34) * abs(u_xlat34);
    u_xlat34 = -abs(u_xlat34) * 2.0 + 3.0;
    u_xlat34 = u_xlat34 * u_xlat3.x;
    u_xlat3.x = u_xlat2.z * 1.5;
    u_xlat34 = u_xlat34 * u_xlat3.x;
    u_xlat0.xz = u_xlat0.xz * vec2(u_xlat34);
    u_xlat0.xz = u_xlat0.xz * vec2(0.150000006, 0.150000006);
    u_xlat0.xz = u_xlat3.yz * vec2(u_xlat34) + u_xlat0.xz;
    u_xlat0.xz = u_xlat0.xz + u_xlat2.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlatb34 = !!(0.00199999986<u_xlat2.z);
#else
    u_xlatb34 = 0.00199999986<u_xlat2.z;
#endif
    u_xlat24 = (-u_xlat2.w) * _LocalWindsMapCameraInfo.y + _LocalWindsMapCameraInfo.x;
    u_xlat0.xz = (bool(u_xlatb34)) ? u_xlat0.xz : u_xlat2.xy;
    u_xlat2.xy = vec2(_WorldOffsetRange.z + float(2.0), _WorldOffsetRange.w + float(2.0));
    u_xlat3.xy = u_xlat1.xz + (-_WorldOffsetRange.xy);
    u_xlat3.xy = u_xlat3.xy + vec2(1.0, 1.0);
    u_xlat2.xy = u_xlat3.xy / u_xlat2.xy;
    u_xlat34 = textureLod(_Heightmap, u_xlat2.xy, 0.0).x;
    u_xlat2.x = u_xlat34 * _HeightScale + u_xlat1.y;
    u_xlat2.x = (-u_xlat2.x) + u_xlat24;
    u_xlat2.x = u_xlat2.x * 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat2.x = (-u_xlat2.x) + 1.0;
    u_xlat13 = float(floatBitsToUint(unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2]).w);
    u_xlat13 = u_xlat13 * 5.96046448e-08;
    u_xlatu13 = uint(u_xlat13);
    u_xlatu13 = u_xlatu13 & 3u;
    u_xlat13 = float(u_xlatu13);
    u_xlat24 = fract(u_xlat33);
    u_xlat33 = u_xlat33 + unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].y;
    u_xlat3.xy = vec2(u_xlat33) * vec2(22.0, 33.0);
    u_xlat3.xy = fract(u_xlat3.xy);
    u_xlat3.xy = u_xlat3.xy + vec2(-0.5, -0.5);
    u_xlat3.xz = u_xlat3.xy * vec2(0.200000003, 0.200000003);
    u_xlat33 = u_xlat13 + u_xlat24;
    u_xlat13 = u_xlat24 * _SmallWindParam.x;
    u_xlat13 = sin(u_xlat13);
    u_xlat33 = u_xlat33 + -0.5;
    u_xlat24 = u_xlat33 * 0.333000004;
    u_xlat4.y = u_xlat33 * 0.333000004 + -1.0;
    u_xlat33 = in_TEXCOORD1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat33 = min(max(u_xlat33, 0.0), 1.0);
#else
    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
#endif
    u_xlat24 = u_xlat24 * u_xlat33;
    u_xlat2.x = u_xlat24 * u_xlat2.x;
    u_xlat0.xz = u_xlat0.xz * u_xlat2.xx;
    u_xlat5.xz = u_xlat0.xz * vec2(vec2(_VegetationMoveScale, _VegetationMoveScale));
    u_xlat6.y = 0.0;
    u_xlat0.x = _VegetationStiffness * _SmallWindParam.y;
    u_xlat0.x = u_xlat24 * u_xlat0.x;
    u_xlat7.x = u_xlat0.x * u_xlat13;
    u_xlat2.xyw = in_NORMAL0.yyy * unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat2.xyw = unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_NORMAL0.xxx + u_xlat2.xyw;
    u_xlat2.xyw = unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_NORMAL0.zzz + u_xlat2.xyw;
    u_xlat0.x = dot(u_xlat2.xyw, u_xlat2.xyw);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat2.xyw = u_xlat0.xxx * u_xlat2.xyw;
    u_xlat7.y = float(1.0);
    u_xlat7.z = float(0.349999994);
    u_xlat8.xyz = u_xlat2.xyw * u_xlat7.yxy;
    u_xlat0.x = dot(_GlobalWind.xyz, _GlobalWind.xyz);
    u_xlat0.x = max(u_xlat0.x, 0.00100000005);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat9 = u_xlat0.xxxx * _GlobalWind.xzxz;
    u_xlat0.xz = vec2(u_xlat9.z * _LargeWindParam.z, u_xlat9.w * _LargeWindParam.z);
    u_xlat18.xz = u_xlat1.xz / vec2(_NoiseScale);
    u_xlat18.xz = _LargeWindParam.xx * u_xlat9.xy + u_xlat18.xz;
    u_xlat18.xz = textureLod(_Noisemap, u_xlat18.xz, 0.0).xy;
    u_xlat18.xz = u_xlat18.xz + vec2(-0.5, -0.5);
    u_xlat18.xz = u_xlat18.xz * _LargeWindParam.yy + vec2(0.5, 0.5);
    u_xlat18.xz = vec2(u_xlat24) * u_xlat18.xz;
    u_xlat6.xz = u_xlat0.xz * u_xlat18.xz;
    u_xlat9.xyz = u_xlat8.xyz * u_xlat7.xzx + u_xlat6.xyz;
    u_xlat7.xyz = u_xlat7.xzx * u_xlat8.xyz;
    u_xlat5.y = 0.0;
    u_xlat8.xyz = u_xlat5.xyz + u_xlat9.xyz;
    u_xlat9.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat9.xyz = unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat9.xyz;
    u_xlat9.xyz = unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat9.xyz;
    u_xlat9.xyz = u_xlat9.xyz + unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat9.xyz = (-u_xlat1.xyz) + u_xlat9.xyz;
    u_xlat10.x = unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].x;
    u_xlat10.y = unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].x;
    u_xlat0.x = dot(u_xlat10.xy, u_xlat10.xy);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xz = u_xlat0.xx * u_xlat10.xy;
    u_xlat36 = u_xlat0.z * u_xlat9.z;
    u_xlat36 = u_xlat9.x * u_xlat0.x + (-u_xlat36);
    u_xlat0.x = dot(u_xlat9.zx, u_xlat0.xz);
    u_xlat10.y = hlslcc_mtx4x4unity_MatrixV[0].x;
    u_xlat10.x = hlslcc_mtx4x4unity_MatrixV[2].x;
    u_xlat22 = dot(u_xlat10.xy, u_xlat10.xy);
    u_xlat22 = inversesqrt(u_xlat22);
    u_xlat17.xz = vec2(u_xlat22) * u_xlat10.xy;
    u_xlat0.xz = u_xlat0.xx * u_xlat17.xz;
    u_xlat0.x = u_xlat36 * u_xlat17.z + (-u_xlat0.x);
    u_xlat0.z = u_xlat36 * u_xlat17.x + u_xlat0.z;
    u_xlat0.xz = u_xlat9.xz + u_xlat0.xz;
    u_xlat9.z = (-u_xlat0.z) * _Billboard + u_xlat9.z;
    u_xlat9.x = (-u_xlat0.x) * _Billboard + u_xlat9.x;
    u_xlat8.xyz = u_xlat9.xyz * vec3(0.100000001, 1.0, 0.100000001) + u_xlat8.xyz;
    u_xlat0.x = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat0.x = max(u_xlat0.x, 0.00100000005);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat8.xyz = u_xlat0.xxx * u_xlat8.xyz;
    u_xlat0.x = dot(u_xlat9.xyz, u_xlat9.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat10.xyz = u_xlat9.xyz * vec3(0.100000001, 1.0, 0.100000001);
    u_xlat8.xyz = u_xlat8.xyz * u_xlat0.xxx + (-u_xlat10.xyz);
    u_xlat10.xyz = u_xlat1.xyz + u_xlat9.xyz;
    u_xlat10.w = u_xlat34 * _HeightScale + u_xlat10.y;
    u_xlat1.xyz = u_xlat8.xyz + u_xlat10.xwz;
    u_xlatu0.xz = uvec2(65280u, 255u) & floatBitsToUint(unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1]).ww;
    u_xlat0.xz = vec2(u_xlatu0.xz);
    u_xlat0.x = u_xlat0.x * 0.00390625;
    u_xlatu0.x = uint(u_xlat0.x);
    u_xlat0.x = float(u_xlatu0.x);
    u_xlat8.xz = u_xlat0.xz + vec2(-127.0, -127.0);
    u_xlat0.xz = u_xlat8.xz * vec2(0.00787401572, 0.00787401572);
    u_xlat0.xz = u_xlat0.xz * u_xlat0.xz;
    u_xlat0.x = u_xlat0.z + u_xlat0.x;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(0.0<u_xlat0.x);
#else
    u_xlatb22 = 0.0<u_xlat0.x;
#endif
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat8.y = u_xlatb22 ? u_xlat0.x : float(0.0);
    u_xlat10.xyz = u_xlat8.xyz * u_xlat9.yyy;
    u_xlat10.xyz = vec3(u_xlat24) * u_xlat10.xyz;
    u_xlat0.x = max(u_xlat24, 9.99999972e-10);
    u_xlat1.xyz = u_xlat10.xyz * vec3(0.00393700786, 0.0, 0.00393700786) + u_xlat1.xyz;
    u_xlat4.xz = u_xlat4.yy * (-u_xlat4.yy);
    u_xlat1.xyz = u_xlat4.xyz * u_xlat9.xyz + u_xlat1.xyz;
    u_xlat4.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat9 = u_xlat4.yyyy * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat9 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat4.xxxx + u_xlat9;
    u_xlat4 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat4.zzzz + u_xlat9;
    u_xlat4 = u_xlat4 + hlslcc_mtx4x4unity_MatrixVPZero[3];
    gl_Position = u_xlat4;
    u_xlat3.y = 0.0;
    vs_TEXCOORD0.xyz = u_xlat8.xyz * vec3(0.00787401572, 1.0, 0.00787401572) + u_xlat3.xyz;
    vs_TEXCOORD0.w = 0.0;
    u_xlat3.xyz = u_xlat5.yzx / u_xlat0.xxx;
    u_xlat5.yz = u_xlat6.zx / u_xlat0.xx;
    u_xlat6.xyz = u_xlat7.yzx / u_xlat0.xxx;
    u_xlat5.x = 0.0;
    u_xlat5.xyz = u_xlat5.xyz + u_xlat6.xyz;
    u_xlat3.xyz = u_xlat3.xyz + u_xlat5.xyz;
    u_xlat3.xyz = u_xlat8.yzx * vec3(1.0, 0.00787401572, 0.00787401572) + u_xlat3.xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat5.xyz = u_xlat2.xyw * u_xlat3.xyz;
    u_xlat2.xyz = u_xlat3.zxy * u_xlat2.ywx + (-u_xlat5.xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat5.xyz = u_xlat3.xyz * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat5.xyz);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
    { bool cond = 0.0<u_xlat0.x; u_xlati22 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati22 = int((0.0<u_xlat0.x) ? 0xFFFFFFFFu : uint(0u));
#endif
#ifdef UNITY_ADRENO_ES3
    { bool cond = u_xlat0.x<0.0; u_xlati0 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati0 = int((u_xlat0.x<0.0) ? 0xFFFFFFFFu : uint(0u));
#endif
    u_xlati0 = (-u_xlati22) + u_xlati0;
    u_xlat0.x = float(u_xlati0);
    vs_TEXCOORD1.xyz = u_xlat0.xxx * u_xlat2.xyz;
    vs_TEXCOORD1.w = 0.0;
    u_xlatu1.xyz = uvec3(16711680u, 65280u, 255u) & floatBitsToUint(unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2]).www;
    u_xlat1.xyz = vec3(u_xlatu1.xyz);
    u_xlatu2 = uvec4(4278190080u, 16711680u, 65280u, 255u) & floatBitsToUint(unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3]).wwww;
    u_xlat0.x = max(1.0, unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].w);
    u_xlat0.x = min(u_xlat0.x, 2.0);
    u_xlat0.x = u_xlat0.x + -1.0;
    u_xlat2 = vec4(u_xlatu2);
    u_xlat2 = u_xlat2 * vec4(2.33743719e-10, 5.9838392e-08, 1.53186284e-05, 0.00392156886);
    u_xlat1.xyz = u_xlat1.xyz * vec3(5.9838392e-08, 1.53186284e-05, 0.00392156886) + (-u_xlat2.yzw);
    u_xlat11 = u_xlat33 / _RootColorScale;
    u_xlat11 = u_xlat11 + _RootColorOffset;
#ifdef UNITY_ADRENO_ES3
    u_xlat11 = min(max(u_xlat11, 0.0), 1.0);
#else
    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat11) * u_xlat1.xyz + u_xlat2.yzw;
    vs_TEXCOORD5.z = u_xlat2.x;
    u_xlat2.xyz = (-u_xlat1.xyz) + _BurnedColor.xyz;
    u_xlat1.xyz = u_xlat0.xxx * u_xlat2.xyz + u_xlat1.xyz;
    vs_TEXCOORD2.w = u_xlat0.x;
    u_xlat0.x = u_xlat33 + -0.600000024;
    vs_TEXCOORD3 = u_xlat33;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = _GrassTipLighting * u_xlat0.x + 1.0;
    vs_TEXCOORD2.xyz = u_xlat0.xxx * u_xlat1.xyz;
    vs_TEXCOORD4.xy = in_TEXCOORD2.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
    u_xlat0.x = u_xlat4.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat4.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.w = u_xlat4.w;
    vs_TEXCOORD5.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
float ImmCB_0_0_0[64];
uniform 	vec4 _ScreenParams;
uniform 	float _GrassShininess;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	float _CutOff;
uniform 	vec4 _BurnedColor;
uniform lowp sampler2D _MainTex;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp float vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec3 u_xlat0;
int u_xlati0;
bool u_xlatb0;
lowp vec4 u_xlat10_1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat12;
bool u_xlatb12;
void main()
{
	ImmCB_0_0_0[0] = 1.0;
	ImmCB_0_0_0[1] = 49.0;
	ImmCB_0_0_0[2] = 13.0;
	ImmCB_0_0_0[3] = 61.0;
	ImmCB_0_0_0[4] = 4.0;
	ImmCB_0_0_0[5] = 52.0;
	ImmCB_0_0_0[6] = 16.0;
	ImmCB_0_0_0[7] = 64.0;
	ImmCB_0_0_0[8] = 33.0;
	ImmCB_0_0_0[9] = 17.0;
	ImmCB_0_0_0[10] = 45.0;
	ImmCB_0_0_0[11] = 29.0;
	ImmCB_0_0_0[12] = 36.0;
	ImmCB_0_0_0[13] = 20.0;
	ImmCB_0_0_0[14] = 48.0;
	ImmCB_0_0_0[15] = 32.0;
	ImmCB_0_0_0[16] = 9.0;
	ImmCB_0_0_0[17] = 57.0;
	ImmCB_0_0_0[18] = 5.0;
	ImmCB_0_0_0[19] = 53.0;
	ImmCB_0_0_0[20] = 12.0;
	ImmCB_0_0_0[21] = 60.0;
	ImmCB_0_0_0[22] = 8.0;
	ImmCB_0_0_0[23] = 56.0;
	ImmCB_0_0_0[24] = 41.0;
	ImmCB_0_0_0[25] = 25.0;
	ImmCB_0_0_0[26] = 37.0;
	ImmCB_0_0_0[27] = 21.0;
	ImmCB_0_0_0[28] = 44.0;
	ImmCB_0_0_0[29] = 28.0;
	ImmCB_0_0_0[30] = 40.0;
	ImmCB_0_0_0[31] = 24.0;
	ImmCB_0_0_0[32] = 3.0;
	ImmCB_0_0_0[33] = 51.0;
	ImmCB_0_0_0[34] = 15.0;
	ImmCB_0_0_0[35] = 63.0;
	ImmCB_0_0_0[36] = 2.0;
	ImmCB_0_0_0[37] = 50.0;
	ImmCB_0_0_0[38] = 14.0;
	ImmCB_0_0_0[39] = 62.0;
	ImmCB_0_0_0[40] = 35.0;
	ImmCB_0_0_0[41] = 19.0;
	ImmCB_0_0_0[42] = 47.0;
	ImmCB_0_0_0[43] = 31.0;
	ImmCB_0_0_0[44] = 34.0;
	ImmCB_0_0_0[45] = 18.0;
	ImmCB_0_0_0[46] = 46.0;
	ImmCB_0_0_0[47] = 30.0;
	ImmCB_0_0_0[48] = 11.0;
	ImmCB_0_0_0[49] = 59.0;
	ImmCB_0_0_0[50] = 7.0;
	ImmCB_0_0_0[51] = 55.0;
	ImmCB_0_0_0[52] = 10.0;
	ImmCB_0_0_0[53] = 58.0;
	ImmCB_0_0_0[54] = 6.0;
	ImmCB_0_0_0[55] = 54.0;
	ImmCB_0_0_0[56] = 43.0;
	ImmCB_0_0_0[57] = 27.0;
	ImmCB_0_0_0[58] = 39.0;
	ImmCB_0_0_0[59] = 23.0;
	ImmCB_0_0_0[60] = 42.0;
	ImmCB_0_0_0[61] = 26.0;
	ImmCB_0_0_0[62] = 38.0;
	ImmCB_0_0_0[63] = 22.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vs_TEXCOORD5.z<0.949999988);
#else
    u_xlatb0 = vs_TEXCOORD5.z<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD5.yx / vs_TEXCOORD5.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
        u_xlat0.xy = u_xlat0.xy * vec2(0.125, 0.125);
        u_xlat0.xy = fract(u_xlat0.xy);
        u_xlat0.xy = u_xlat0.xy * vec2(7.99900007, 7.99900007);
        u_xlat0.xy = trunc(u_xlat0.xy);
        u_xlat0.x = u_xlat0.x * 8.0 + u_xlat0.y;
        u_xlati0 = int(u_xlat0.x);
        u_xlat0.x = (-ImmCB_0_0_0[u_xlati0]) * 0.015625 + vs_TEXCOORD5.z;
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat0.x = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD0.xyz;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD4.xy);
    u_xlat2.xyz = _BurnedColor.xyz * u_xlat10_1.xyz + (-u_xlat10_1.xyz);
    u_xlat2.xyz = vs_TEXCOORD2.www * u_xlat2.xyz + u_xlat10_1.xyz;
    u_xlat12 = u_xlat10_1.w + (-_CutOff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat12<0.0);
#else
    u_xlatb12 = u_xlat12<0.0;
#endif
    if((int(u_xlatb12) * int(0xffffffffu))!=0){discard;}
    u_xlat12 = (-vs_TEXCOORD2.w) + 1.0;
    u_xlat12 = u_xlat12 * _GrassShininess;
    SV_Target0.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_3 = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb0) ? u_xlat16_3 : 0.0399999991;
    SV_Target0.w = 0.0;
    u_xlat2.w = vs_TEXCOORD3;
    SV_Target1 = u_xlat2;
    SV_Target2.xy = vec2(0.0399999991, 0.0399999991);
    SV_Target2.w = u_xlat12;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_HDR_ON" "UNITY_DEBUG_VIEW_ON" "MHY_SHADER_HIGH" "SOFT_SAMPLE_HEIGHT_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	float _NoiseScale;
uniform 	vec4 _WorldOffsetRange;
uniform 	float _HeightScale;
uniform 	float _Billboard;
uniform 	float _VegetationMoveScale;
uniform 	float _VegetationStiffness;
uniform 	vec4 _LocalWindsMapSize;
uniform 	vec4 _LargeWindParam;
uniform 	vec4 _SmallWindParam;
uniform 	vec4 _GlobalWind;
uniform 	vec4 _LocalWindsMapCameraInfo;
uniform 	float _GrassTipLighting;
uniform 	vec4 _MainTex_ST;
uniform 	float _RootColorScale;
uniform 	float _RootColorOffset;
uniform highp sampler2D _Heightmap;
uniform lowp sampler2D _Noisemap;
uniform lowp sampler2D _LocalWindsMap;
in highp vec4 in_POSITION0;
in highp vec4 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec2 in_TEXCOORD2;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp float vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec3 u_xlat1;
int u_xlati1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
vec4 u_xlat4;
vec3 u_xlat5;
vec4 u_xlat6;
vec4 u_xlat7;
vec4 u_xlat8;
vec3 u_xlat9;
vec3 u_xlat10;
bool u_xlatb10;
vec2 u_xlat12;
vec3 u_xlat16;
vec2 u_xlat20;
vec2 u_xlat22;
float u_xlat30;
int u_xlati30;
float u_xlat31;
float u_xlat32;
float u_xlat33;
float u_xlat34;
void main()
{
    u_xlat0.z = 0.0;
    u_xlat1.xyz = in_TEXCOORD0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[2].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TEXCOORD0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat10.xz = u_xlat1.xz + (-_LocalWindsMapSize.xy);
    u_xlat10.xz = vec2(u_xlat10.x / _LocalWindsMapSize.z, u_xlat10.z / _LocalWindsMapSize.w);
    u_xlat10.xz = u_xlat10.xz + vec2(0.5, 0.5);
    u_xlat2 = textureLod(_LocalWindsMap, u_xlat10.xz, 0.0);
    u_xlat10.x = dot(u_xlat2.xy, u_xlat2.xy);
    u_xlat10.x = sqrt(u_xlat10.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(9.99999975e-05>=u_xlat10.x);
#else
    u_xlatb10 = 9.99999975e-05>=u_xlat10.x;
#endif
    u_xlat10.x = u_xlatb10 ? 1.0 : float(0.0);
    u_xlat3.xy = (-u_xlat2.xy) + vec2(0.5, 0.5);
    u_xlat10.xz = u_xlat10.xx * u_xlat3.xy + u_xlat2.xy;
    u_xlat10.xz = u_xlat10.xz * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat31 = dot(u_xlat10.xz, u_xlat10.xz);
    u_xlat31 = max(u_xlat31, 0.00100000005);
    u_xlat3.x = inversesqrt(u_xlat31);
    u_xlat3.yz = u_xlat10.xz * u_xlat3.xx;
    u_xlat0.x = u_xlat3.z;
    u_xlat0.xz = (-u_xlat3.xy) * vec2(0.0, 1.0) + u_xlat0.xz;
    u_xlat31 = (-in_TEXCOORD1.x) + hlslcc_mtx4x4unity_ObjectToWorld[1].x;
    u_xlat2.x = u_xlat31 * 3.0;
    u_xlat2.x = _Time.y * 3.0 + u_xlat2.x;
    u_xlat2.x = u_xlat2.x + 0.5;
    u_xlat2.x = fract(u_xlat2.x);
    u_xlat2.x = u_xlat2.x * 2.0 + -1.0;
    u_xlat12.x = abs(u_xlat2.x) * abs(u_xlat2.x);
    u_xlat2.x = -abs(u_xlat2.x) * 2.0 + 3.0;
    u_xlat2.x = u_xlat2.x * u_xlat12.x;
    u_xlat12.x = u_xlat2.z * 1.5;
    u_xlat2.x = u_xlat12.x * u_xlat2.x;
    u_xlat0.xz = u_xlat0.xz * u_xlat2.xx;
    u_xlat0.xz = u_xlat0.xz * vec2(0.150000006, 0.150000006);
    u_xlat0.xz = u_xlat3.yz * u_xlat2.xx + u_xlat0.xz;
    u_xlat0.xz = u_xlat0.xz + u_xlat10.xz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(0.00199999986<u_xlat2.z);
#else
    u_xlatb2 = 0.00199999986<u_xlat2.z;
#endif
    u_xlat12.x = (-u_xlat2.w) * _LocalWindsMapCameraInfo.y + _LocalWindsMapCameraInfo.x;
    u_xlat0.xy = (bool(u_xlatb2)) ? u_xlat0.xz : u_xlat10.xz;
    u_xlat20.xy = vec2(_WorldOffsetRange.z + float(2.0), _WorldOffsetRange.w + float(2.0));
    u_xlat2.xz = u_xlat1.xz + (-_WorldOffsetRange.xy);
    u_xlat2.xz = u_xlat2.xz + vec2(1.0, 1.0);
    u_xlat20.xy = u_xlat2.xz / u_xlat20.xy;
    u_xlat20.xy = u_xlat20.xy * _WorldOffsetRange.zw + vec2(-0.5, -0.5);
    u_xlat2.xz = floor(u_xlat20.xy);
    u_xlat20.xy = u_xlat20.xy + (-u_xlat2.xz);
    u_xlat3 = u_xlat2.xzxz + vec4(0.5, 1.5, 1.5, 1.5);
    u_xlat4 = u_xlat2.xzxz + vec4(1.5, 0.5, 0.5, 0.5);
    u_xlat4 = vec4(u_xlat4.x / _WorldOffsetRange.z, u_xlat4.y / _WorldOffsetRange.w, u_xlat4.z / _WorldOffsetRange.z, u_xlat4.w / _WorldOffsetRange.w);
    u_xlat3 = vec4(u_xlat3.x / _WorldOffsetRange.z, u_xlat3.y / _WorldOffsetRange.w, u_xlat3.z / _WorldOffsetRange.z, u_xlat3.w / _WorldOffsetRange.w);
    u_xlat2.x = textureLod(_Heightmap, u_xlat3.zw, 0.0).x;
    u_xlat22.x = textureLod(_Heightmap, u_xlat3.xy, 0.0).x;
    u_xlat2.x = (-u_xlat22.x) + u_xlat2.x;
    u_xlat2.x = u_xlat20.x * u_xlat2.x + u_xlat22.x;
    u_xlat22.x = textureLod(_Heightmap, u_xlat4.xy, 0.0).x;
    u_xlat32 = textureLod(_Heightmap, u_xlat4.zw, 0.0).x;
    u_xlat22.x = (-u_xlat32) + u_xlat22.x;
    u_xlat20.x = u_xlat20.x * u_xlat22.x + u_xlat32;
    u_xlat2.x = (-u_xlat20.x) + u_xlat2.x;
    u_xlat20.x = u_xlat20.y * u_xlat2.x + u_xlat20.x;
    u_xlat30 = u_xlat20.x * _HeightScale + u_xlat1.y;
    u_xlat30 = (-u_xlat30) + u_xlat12.x;
    u_xlat30 = u_xlat30 * 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
#else
    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
#endif
    u_xlat30 = (-u_xlat30) + 1.0;
    u_xlat2.x = fract(u_xlat31);
    u_xlat31 = u_xlat31 + hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat12.xy = vec2(u_xlat31) * vec2(22.0, 33.0);
    u_xlat12.xy = fract(u_xlat12.xy);
    u_xlat12.xy = u_xlat12.xy + vec2(-0.5, -0.5);
    u_xlat3.xz = u_xlat12.xy * vec2(0.200000003, 0.200000003);
    u_xlat31 = u_xlat2.x + -0.5;
    u_xlat2.x = u_xlat2.x * _SmallWindParam.x;
    u_xlat2.x = sin(u_xlat2.x);
    u_xlat12.x = u_xlat31 * 0.333000004;
    u_xlat4.y = u_xlat31 * 0.333000004 + -1.0;
    u_xlat31 = in_TEXCOORD1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat31 = min(max(u_xlat31, 0.0), 1.0);
#else
    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat12.x * u_xlat31;
    u_xlat30 = u_xlat30 * u_xlat12.x;
    u_xlat0.xy = vec2(u_xlat30) * u_xlat0.xy;
    u_xlat5.xz = u_xlat0.xy * vec2(vec2(_VegetationMoveScale, _VegetationMoveScale));
    u_xlat0.x = dot(_GlobalWind.xyz, _GlobalWind.xyz);
    u_xlat0.x = max(u_xlat0.x, 0.00100000005);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat6 = u_xlat0.xxxx * _GlobalWind.xzxz;
    u_xlat0.xy = vec2(u_xlat6.z * _LargeWindParam.z, u_xlat6.w * _LargeWindParam.z);
    u_xlat22.xy = u_xlat1.xz / vec2(_NoiseScale);
    u_xlat22.xy = _LargeWindParam.xx * u_xlat6.xy + u_xlat22.xy;
    u_xlat22.xy = textureLod(_Noisemap, u_xlat22.xy, 0.0).xy;
    u_xlat22.xy = u_xlat22.xy + vec2(-0.5, -0.5);
    u_xlat22.xy = u_xlat22.xy * _LargeWindParam.yy + vec2(0.5, 0.5);
    u_xlat22.xy = u_xlat12.xx * u_xlat22.xy;
    u_xlat6.xz = u_xlat0.xy * u_xlat22.xy;
    u_xlat6.y = 0.0;
    u_xlat0.x = _VegetationStiffness * _SmallWindParam.y;
    u_xlat0.x = u_xlat12.x * u_xlat0.x;
    u_xlat7.x = u_xlat0.x * u_xlat2.x;
    u_xlat0.xyw = in_NORMAL0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyw = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_NORMAL0.xxx + u_xlat0.xyw;
    u_xlat0.xyw = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_NORMAL0.zzz + u_xlat0.xyw;
    u_xlat2.x = dot(u_xlat0.xyw, u_xlat0.xyw);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat0.xyw = u_xlat0.xyw * u_xlat2.xxx;
    u_xlat7.y = float(1.0);
    u_xlat7.z = float(0.349999994);
    u_xlat2.xzw = u_xlat0.xyw * u_xlat7.yxy;
    u_xlat8.xyz = u_xlat2.xzw * u_xlat7.xzx + u_xlat6.xyz;
    u_xlat2.xzw = u_xlat7.xzx * u_xlat2.xzw;
    u_xlat5.y = 0.0;
    u_xlat7.xyz = u_xlat5.xyz + u_xlat8.xyz;
    u_xlat8.y = hlslcc_mtx4x4unity_MatrixV[0].x;
    u_xlat8.x = hlslcc_mtx4x4unity_MatrixV[2].x;
    u_xlat33 = dot(u_xlat8.xy, u_xlat8.xy);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat16.xz = vec2(u_xlat33) * u_xlat8.xy;
    u_xlat8.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;
    u_xlat8.y = hlslcc_mtx4x4unity_ObjectToWorld[2].x;
    u_xlat33 = dot(u_xlat8.xy, u_xlat8.xy);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat8.xy = vec2(u_xlat33) * u_xlat8.xy;
    u_xlat9.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat9.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat9.xyz;
    u_xlat9.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat9.xyz;
    u_xlat9.xyz = u_xlat9.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat9.xyz = (-u_xlat1.xyz) + u_xlat9.xyz;
    u_xlat33 = u_xlat8.y * u_xlat9.z;
    u_xlat33 = u_xlat9.x * u_xlat8.x + (-u_xlat33);
    u_xlat34 = dot(u_xlat9.zx, u_xlat8.xy);
    u_xlat8.xy = u_xlat16.xz * vec2(u_xlat34);
    u_xlat34 = u_xlat33 * u_xlat16.z + (-u_xlat8.x);
    u_xlat33 = u_xlat33 * u_xlat16.x + u_xlat8.y;
    u_xlat33 = u_xlat9.z + u_xlat33;
    u_xlat9.z = (-u_xlat33) * _Billboard + u_xlat9.z;
    u_xlat33 = u_xlat9.x + u_xlat34;
    u_xlat9.x = (-u_xlat33) * _Billboard + u_xlat9.x;
    u_xlat33 = u_xlat12.x * u_xlat9.y;
    u_xlat12.x = max(u_xlat12.x, 9.99999972e-10);
    u_xlat7.xyz = u_xlat9.xyz * vec3(0.100000001, 1.0, 0.100000001) + u_xlat7.xyz;
    u_xlat34 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat34 = max(u_xlat34, 0.00100000005);
    u_xlat34 = inversesqrt(u_xlat34);
    u_xlat7.xyz = vec3(u_xlat34) * u_xlat7.xyz;
    u_xlat34 = dot(u_xlat9.xyz, u_xlat9.xyz);
    u_xlat34 = sqrt(u_xlat34);
    u_xlat8.xyz = u_xlat9.xyz * vec3(0.100000001, 1.0, 0.100000001);
    u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat34) + (-u_xlat8.xyz);
    u_xlat8.xyz = u_xlat1.xyz + u_xlat9.xyz;
    u_xlat8.w = u_xlat20.x * _HeightScale + u_xlat8.y;
    u_xlat1.xyz = u_xlat7.xyz + u_xlat8.xwz;
    u_xlat1.xyz = vec3(u_xlat33) * vec3(-0.5, 0.0, -0.5) + u_xlat1.xyz;
    u_xlat4.xz = u_xlat4.yy * (-u_xlat4.yy);
    u_xlat1.xyz = u_xlat4.xyz * u_xlat9.xyz + u_xlat1.xyz;
    u_xlat4.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat7 = u_xlat4.yyyy * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat7 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat4.xxxx + u_xlat7;
    u_xlat4 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat4.zzzz + u_xlat7;
    gl_Position = u_xlat4 + hlslcc_mtx4x4unity_MatrixVPZero[3];
    u_xlat3.y = 0.0;
    vs_TEXCOORD0.xyz = u_xlat3.xyz + vec3(-1.0, 0.0, -1.0);
    vs_TEXCOORD0.w = 0.0;
    u_xlat3.xyz = u_xlat5.yzx / u_xlat12.xxx;
    u_xlat4.yz = u_xlat6.zx / u_xlat12.xx;
    u_xlat2.xyz = u_xlat2.zwx / u_xlat12.xxx;
    u_xlat4.x = 0.0;
    u_xlat2.xyz = u_xlat2.xyz + u_xlat4.xyz;
    u_xlat2.xyz = u_xlat3.xyz + u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz + vec3(0.0, -1.0, -1.0);
    u_xlat20.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat20.x = inversesqrt(u_xlat20.x);
    u_xlat2.xyz = u_xlat20.xxx * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat0.xyw * u_xlat2.xyz;
    u_xlat0.xyz = u_xlat2.zxy * u_xlat0.ywx + (-u_xlat3.xyz);
    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.xyz * u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
    u_xlat30 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat1.xyz = vec3(u_xlat30) * u_xlat1.xyz;
    u_xlat30 = dot(u_xlat1.xyz, u_xlat0.xyz);
#ifdef UNITY_ADRENO_ES3
    { bool cond = 0.0<u_xlat30; u_xlati1 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati1 = int((0.0<u_xlat30) ? 0xFFFFFFFFu : uint(0u));
#endif
#ifdef UNITY_ADRENO_ES3
    { bool cond = u_xlat30<0.0; u_xlati30 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati30 = int((u_xlat30<0.0) ? 0xFFFFFFFFu : uint(0u));
#endif
    u_xlati30 = (-u_xlati1) + u_xlati30;
    u_xlat30 = float(u_xlati30);
    vs_TEXCOORD1.xyz = vec3(u_xlat30) * u_xlat0.xyz;
    vs_TEXCOORD1.w = 0.0;
    u_xlat0.x = u_xlat31 / _RootColorScale;
    u_xlat0.x = u_xlat0.x + _RootColorOffset;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xxx * vec3(-0.501960814, 0.0, 0.0) + vec3(0.501960814, 0.0, 0.0);
    u_xlat30 = u_xlat31 + -0.600000024;
    vs_TEXCOORD3 = u_xlat31;
    u_xlat30 = max(u_xlat30, 0.0);
    u_xlat30 = _GrassTipLighting * u_xlat30 + 1.0;
    vs_TEXCOORD2.xyz = vec3(u_xlat30) * u_xlat0.xyz;
    vs_TEXCOORD2.w = 0.0;
    vs_TEXCOORD4.xy = in_TEXCOORD2.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	float _GrassShininess;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	float _CutOff;
uniform 	vec4 _BurnedColor;
uniform lowp sampler2D _MainTex;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp float vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec4 u_xlat0;
lowp vec4 u_xlat10_0;
bool u_xlatb0;
vec3 u_xlat1;
mediump float u_xlat16_2;
float u_xlat9;
bool u_xlatb9;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD4.xy);
    u_xlat9 = u_xlat10_0.w + (-_CutOff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(u_xlat9<0.0);
#else
    u_xlatb9 = u_xlat9<0.0;
#endif
    if((int(u_xlatb9) * int(0xffffffffu))!=0){discard;}
    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
    SV_Target0.xyz = u_xlat1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0;
    u_xlat1.xyz = _BurnedColor.xyz * u_xlat10_0.xyz + (-u_xlat10_0.xyz);
    u_xlat0.xyz = vs_TEXCOORD2.www * u_xlat1.xyz + u_xlat10_0.xyz;
    u_xlat0.w = vs_TEXCOORD3;
    SV_Target1 = u_xlat0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_2 = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb0) ? u_xlat16_2 : 0.0399999991;
    u_xlat0.x = (-vs_TEXCOORD2.w) + 1.0;
    u_xlat0.x = u_xlat0.x * _GrassShininess;
    SV_Target2.w = u_xlat0.x;
    SV_Target2.xy = vec2(0.0399999991, 0.0399999991);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_HDR_ON" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "MHY_SHADER_HIGH" "SOFT_SAMPLE_HEIGHT_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	int unity_BaseInstanceID;
uniform 	float _NoiseScale;
uniform 	vec4 _WorldOffsetRange;
uniform 	float _HeightScale;
uniform 	float _Billboard;
uniform 	float _VegetationMoveScale;
uniform 	float _VegetationStiffness;
uniform 	vec4 _LocalWindsMapSize;
uniform 	vec4 _LargeWindParam;
uniform 	vec4 _SmallWindParam;
uniform 	vec4 _GlobalWind;
uniform 	vec4 _LocalWindsMapCameraInfo;
uniform 	float _GrassTipLighting;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BurnedColor;
uniform 	float _RootColorScale;
uniform 	float _RootColorOffset;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _Heightmap;
uniform lowp sampler2D _Noisemap;
uniform lowp sampler2D _LocalWindsMap;
in highp vec4 in_POSITION0;
in highp vec4 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec2 in_TEXCOORD2;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp float vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec3 u_xlat0;
int u_xlati0;
uvec3 u_xlatu0;
vec3 u_xlat1;
uvec3 u_xlatu1;
vec4 u_xlat2;
uvec3 u_xlatu2;
vec4 u_xlat3;
vec4 u_xlat4;
vec3 u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
vec3 u_xlat8;
vec4 u_xlat9;
vec4 u_xlat10;
float u_xlat11;
int u_xlati11;
float u_xlat13;
uint u_xlatu13;
vec3 u_xlat17;
vec3 u_xlat18;
float u_xlat22;
int u_xlati22;
bool u_xlatb22;
float u_xlat24;
float u_xlat33;
bool u_xlatb33;
float u_xlat34;
bool u_xlatb34;
float u_xlat35;
float u_xlat36;
void main()
{
    u_xlat0.z = 0.0;
    u_xlati11 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati11 = u_xlati11 << 2;
    u_xlat1.xyz = in_TEXCOORD0.yyy * unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_TEXCOORD0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat2.xy = u_xlat1.xz + (-_LocalWindsMapSize.xy);
    u_xlat2.xy = vec2(u_xlat2.x / _LocalWindsMapSize.z, u_xlat2.y / _LocalWindsMapSize.w);
    u_xlat2.xy = u_xlat2.xy + vec2(0.5, 0.5);
    u_xlat2 = textureLod(_LocalWindsMap, u_xlat2.xy, 0.0);
    u_xlat33 = dot(u_xlat2.xy, u_xlat2.xy);
    u_xlat33 = sqrt(u_xlat33);
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(9.99999975e-05>=u_xlat33);
#else
    u_xlatb33 = 9.99999975e-05>=u_xlat33;
#endif
    u_xlat33 = u_xlatb33 ? 1.0 : float(0.0);
    u_xlat3.xy = (-u_xlat2.xy) + vec2(0.5, 0.5);
    u_xlat2.xy = vec2(u_xlat33) * u_xlat3.xy + u_xlat2.xy;
    u_xlat2.xy = u_xlat2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat33 = dot(u_xlat2.xy, u_xlat2.xy);
    u_xlat33 = max(u_xlat33, 0.00100000005);
    u_xlat3.x = inversesqrt(u_xlat33);
    u_xlat3.yz = u_xlat2.xy * u_xlat3.xx;
    u_xlat0.x = u_xlat3.z;
    u_xlat0.xz = (-u_xlat3.xy) * vec2(0.0, 1.0) + u_xlat0.xz;
    u_xlat33 = (-in_TEXCOORD1.x) + unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].x;
    u_xlat34 = u_xlat33 * 3.0;
    u_xlat34 = _Time.y * 3.0 + u_xlat34;
    u_xlat34 = u_xlat34 + 0.5;
    u_xlat34 = fract(u_xlat34);
    u_xlat34 = u_xlat34 * 2.0 + -1.0;
    u_xlat3.x = abs(u_xlat34) * abs(u_xlat34);
    u_xlat34 = -abs(u_xlat34) * 2.0 + 3.0;
    u_xlat34 = u_xlat34 * u_xlat3.x;
    u_xlat3.x = u_xlat2.z * 1.5;
    u_xlat34 = u_xlat34 * u_xlat3.x;
    u_xlat0.xz = u_xlat0.xz * vec2(u_xlat34);
    u_xlat0.xz = u_xlat0.xz * vec2(0.150000006, 0.150000006);
    u_xlat0.xz = u_xlat3.yz * vec2(u_xlat34) + u_xlat0.xz;
    u_xlat0.xz = u_xlat0.xz + u_xlat2.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlatb34 = !!(0.00199999986<u_xlat2.z);
#else
    u_xlatb34 = 0.00199999986<u_xlat2.z;
#endif
    u_xlat24 = (-u_xlat2.w) * _LocalWindsMapCameraInfo.y + _LocalWindsMapCameraInfo.x;
    u_xlat0.xz = (bool(u_xlatb34)) ? u_xlat0.xz : u_xlat2.xy;
    u_xlat2.xy = vec2(_WorldOffsetRange.z + float(2.0), _WorldOffsetRange.w + float(2.0));
    u_xlat3.xy = u_xlat1.xz + (-_WorldOffsetRange.xy);
    u_xlat3.xy = u_xlat3.xy + vec2(1.0, 1.0);
    u_xlat2.xy = u_xlat3.xy / u_xlat2.xy;
    u_xlat2.xy = u_xlat2.xy * _WorldOffsetRange.zw + vec2(-0.5, -0.5);
    u_xlat3.xy = floor(u_xlat2.xy);
    u_xlat2.xy = u_xlat2.xy + (-u_xlat3.xy);
    u_xlat4 = u_xlat3.xyxy + vec4(0.5, 1.5, 1.5, 1.5);
    u_xlat3 = u_xlat3.xyxy + vec4(1.5, 0.5, 0.5, 0.5);
    u_xlat3 = vec4(u_xlat3.x / _WorldOffsetRange.z, u_xlat3.y / _WorldOffsetRange.w, u_xlat3.z / _WorldOffsetRange.z, u_xlat3.w / _WorldOffsetRange.w);
    u_xlat4 = vec4(u_xlat4.x / _WorldOffsetRange.z, u_xlat4.y / _WorldOffsetRange.w, u_xlat4.z / _WorldOffsetRange.z, u_xlat4.w / _WorldOffsetRange.w);
    u_xlat34 = textureLod(_Heightmap, u_xlat4.zw, 0.0).x;
    u_xlat35 = textureLod(_Heightmap, u_xlat4.xy, 0.0).x;
    u_xlat34 = u_xlat34 + (-u_xlat35);
    u_xlat34 = u_xlat2.x * u_xlat34 + u_xlat35;
    u_xlat35 = textureLod(_Heightmap, u_xlat3.xy, 0.0).x;
    u_xlat3.x = textureLod(_Heightmap, u_xlat3.zw, 0.0).x;
    u_xlat35 = u_xlat35 + (-u_xlat3.x);
    u_xlat2.x = u_xlat2.x * u_xlat35 + u_xlat3.x;
    u_xlat34 = u_xlat34 + (-u_xlat2.x);
    u_xlat34 = u_xlat2.y * u_xlat34 + u_xlat2.x;
    u_xlat2.x = u_xlat34 * _HeightScale + u_xlat1.y;
    u_xlat2.x = (-u_xlat2.x) + u_xlat24;
    u_xlat2.x = u_xlat2.x * 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat2.x = (-u_xlat2.x) + 1.0;
    u_xlat13 = float(floatBitsToUint(unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2]).w);
    u_xlat13 = u_xlat13 * 5.96046448e-08;
    u_xlatu13 = uint(u_xlat13);
    u_xlatu13 = u_xlatu13 & 3u;
    u_xlat13 = float(u_xlatu13);
    u_xlat24 = fract(u_xlat33);
    u_xlat33 = u_xlat33 + unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].y;
    u_xlat3.xy = vec2(u_xlat33) * vec2(22.0, 33.0);
    u_xlat3.xy = fract(u_xlat3.xy);
    u_xlat3.xy = u_xlat3.xy + vec2(-0.5, -0.5);
    u_xlat3.xz = u_xlat3.xy * vec2(0.200000003, 0.200000003);
    u_xlat33 = u_xlat13 + u_xlat24;
    u_xlat13 = u_xlat24 * _SmallWindParam.x;
    u_xlat13 = sin(u_xlat13);
    u_xlat33 = u_xlat33 + -0.5;
    u_xlat24 = u_xlat33 * 0.333000004;
    u_xlat4.y = u_xlat33 * 0.333000004 + -1.0;
    u_xlat33 = in_TEXCOORD1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat33 = min(max(u_xlat33, 0.0), 1.0);
#else
    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
#endif
    u_xlat24 = u_xlat24 * u_xlat33;
    u_xlat2.x = u_xlat24 * u_xlat2.x;
    u_xlat0.xz = u_xlat0.xz * u_xlat2.xx;
    u_xlat5.xz = u_xlat0.xz * vec2(vec2(_VegetationMoveScale, _VegetationMoveScale));
    u_xlat6.y = 0.0;
    u_xlat0.x = _VegetationStiffness * _SmallWindParam.y;
    u_xlat0.x = u_xlat24 * u_xlat0.x;
    u_xlat7.x = u_xlat0.x * u_xlat13;
    u_xlat2.xyw = in_NORMAL0.yyy * unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat2.xyw = unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_NORMAL0.xxx + u_xlat2.xyw;
    u_xlat2.xyw = unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_NORMAL0.zzz + u_xlat2.xyw;
    u_xlat0.x = dot(u_xlat2.xyw, u_xlat2.xyw);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat2.xyw = u_xlat0.xxx * u_xlat2.xyw;
    u_xlat7.y = float(1.0);
    u_xlat7.z = float(0.349999994);
    u_xlat8.xyz = u_xlat2.xyw * u_xlat7.yxy;
    u_xlat0.x = dot(_GlobalWind.xyz, _GlobalWind.xyz);
    u_xlat0.x = max(u_xlat0.x, 0.00100000005);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat9 = u_xlat0.xxxx * _GlobalWind.xzxz;
    u_xlat0.xz = vec2(u_xlat9.z * _LargeWindParam.z, u_xlat9.w * _LargeWindParam.z);
    u_xlat18.xz = u_xlat1.xz / vec2(_NoiseScale);
    u_xlat18.xz = _LargeWindParam.xx * u_xlat9.xy + u_xlat18.xz;
    u_xlat18.xz = textureLod(_Noisemap, u_xlat18.xz, 0.0).xy;
    u_xlat18.xz = u_xlat18.xz + vec2(-0.5, -0.5);
    u_xlat18.xz = u_xlat18.xz * _LargeWindParam.yy + vec2(0.5, 0.5);
    u_xlat18.xz = vec2(u_xlat24) * u_xlat18.xz;
    u_xlat6.xz = u_xlat0.xz * u_xlat18.xz;
    u_xlat9.xyz = u_xlat8.xyz * u_xlat7.xzx + u_xlat6.xyz;
    u_xlat7.xyz = u_xlat7.xzx * u_xlat8.xyz;
    u_xlat5.y = 0.0;
    u_xlat8.xyz = u_xlat5.xyz + u_xlat9.xyz;
    u_xlat9.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat9.xyz = unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat9.xyz;
    u_xlat9.xyz = unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat9.xyz;
    u_xlat9.xyz = u_xlat9.xyz + unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat9.xyz = (-u_xlat1.xyz) + u_xlat9.xyz;
    u_xlat10.x = unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].x;
    u_xlat10.y = unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].x;
    u_xlat0.x = dot(u_xlat10.xy, u_xlat10.xy);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xz = u_xlat0.xx * u_xlat10.xy;
    u_xlat36 = u_xlat0.z * u_xlat9.z;
    u_xlat36 = u_xlat9.x * u_xlat0.x + (-u_xlat36);
    u_xlat0.x = dot(u_xlat9.zx, u_xlat0.xz);
    u_xlat10.y = hlslcc_mtx4x4unity_MatrixV[0].x;
    u_xlat10.x = hlslcc_mtx4x4unity_MatrixV[2].x;
    u_xlat22 = dot(u_xlat10.xy, u_xlat10.xy);
    u_xlat22 = inversesqrt(u_xlat22);
    u_xlat17.xz = vec2(u_xlat22) * u_xlat10.xy;
    u_xlat0.xz = u_xlat0.xx * u_xlat17.xz;
    u_xlat0.x = u_xlat36 * u_xlat17.z + (-u_xlat0.x);
    u_xlat0.z = u_xlat36 * u_xlat17.x + u_xlat0.z;
    u_xlat0.xz = u_xlat9.xz + u_xlat0.xz;
    u_xlat9.z = (-u_xlat0.z) * _Billboard + u_xlat9.z;
    u_xlat9.x = (-u_xlat0.x) * _Billboard + u_xlat9.x;
    u_xlat8.xyz = u_xlat9.xyz * vec3(0.100000001, 1.0, 0.100000001) + u_xlat8.xyz;
    u_xlat0.x = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat0.x = max(u_xlat0.x, 0.00100000005);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat8.xyz = u_xlat0.xxx * u_xlat8.xyz;
    u_xlat0.x = dot(u_xlat9.xyz, u_xlat9.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat10.xyz = u_xlat9.xyz * vec3(0.100000001, 1.0, 0.100000001);
    u_xlat8.xyz = u_xlat8.xyz * u_xlat0.xxx + (-u_xlat10.xyz);
    u_xlat10.xyz = u_xlat1.xyz + u_xlat9.xyz;
    u_xlat10.w = u_xlat34 * _HeightScale + u_xlat10.y;
    u_xlat1.xyz = u_xlat8.xyz + u_xlat10.xwz;
    u_xlatu0.xz = uvec2(65280u, 255u) & floatBitsToUint(unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1]).ww;
    u_xlat0.xz = vec2(u_xlatu0.xz);
    u_xlat0.x = u_xlat0.x * 0.00390625;
    u_xlatu0.x = uint(u_xlat0.x);
    u_xlat0.x = float(u_xlatu0.x);
    u_xlat8.xz = u_xlat0.xz + vec2(-127.0, -127.0);
    u_xlat0.xz = u_xlat8.xz * vec2(0.00787401572, 0.00787401572);
    u_xlat0.xz = u_xlat0.xz * u_xlat0.xz;
    u_xlat0.x = u_xlat0.z + u_xlat0.x;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(0.0<u_xlat0.x);
#else
    u_xlatb22 = 0.0<u_xlat0.x;
#endif
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat8.y = u_xlatb22 ? u_xlat0.x : float(0.0);
    u_xlat10.xyz = u_xlat8.xyz * u_xlat9.yyy;
    u_xlat10.xyz = vec3(u_xlat24) * u_xlat10.xyz;
    u_xlat0.x = max(u_xlat24, 9.99999972e-10);
    u_xlat1.xyz = u_xlat10.xyz * vec3(0.00393700786, 0.0, 0.00393700786) + u_xlat1.xyz;
    u_xlat4.xz = u_xlat4.yy * (-u_xlat4.yy);
    u_xlat1.xyz = u_xlat4.xyz * u_xlat9.xyz + u_xlat1.xyz;
    u_xlat4.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat9 = u_xlat4.yyyy * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat9 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat4.xxxx + u_xlat9;
    u_xlat4 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat4.zzzz + u_xlat9;
    gl_Position = u_xlat4 + hlslcc_mtx4x4unity_MatrixVPZero[3];
    u_xlat3.y = 0.0;
    vs_TEXCOORD0.xyz = u_xlat8.xyz * vec3(0.00787401572, 1.0, 0.00787401572) + u_xlat3.xyz;
    vs_TEXCOORD0.w = 0.0;
    u_xlat3.xyz = u_xlat5.yzx / u_xlat0.xxx;
    u_xlat4.yz = u_xlat6.zx / u_xlat0.xx;
    u_xlat5.xyz = u_xlat7.yzx / u_xlat0.xxx;
    u_xlat4.x = 0.0;
    u_xlat4.xyz = u_xlat4.xyz + u_xlat5.xyz;
    u_xlat3.xyz = u_xlat3.xyz + u_xlat4.xyz;
    u_xlat3.xyz = u_xlat8.yzx * vec3(1.0, 0.00787401572, 0.00787401572) + u_xlat3.xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.xyw * u_xlat3.xyz;
    u_xlat2.xyz = u_xlat3.zxy * u_xlat2.ywx + (-u_xlat4.xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat4.xyz = u_xlat3.xyz * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
    { bool cond = 0.0<u_xlat0.x; u_xlati22 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati22 = int((0.0<u_xlat0.x) ? 0xFFFFFFFFu : uint(0u));
#endif
#ifdef UNITY_ADRENO_ES3
    { bool cond = u_xlat0.x<0.0; u_xlati0 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati0 = int((u_xlat0.x<0.0) ? 0xFFFFFFFFu : uint(0u));
#endif
    u_xlati0 = (-u_xlati22) + u_xlati0;
    u_xlat0.x = float(u_xlati0);
    vs_TEXCOORD1.xyz = u_xlat0.xxx * u_xlat2.xyz;
    vs_TEXCOORD1.w = 0.0;
    u_xlatu1.xyz = uvec3(16711680u, 65280u, 255u) & floatBitsToUint(unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2]).www;
    u_xlat1.xyz = vec3(u_xlatu1.xyz);
    u_xlatu2.xyz = uvec3(16711680u, 65280u, 255u) & floatBitsToUint(unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3]).www;
    u_xlat0.x = max(1.0, unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].w);
    u_xlat0.x = min(u_xlat0.x, 2.0);
    u_xlat0.x = u_xlat0.x + -1.0;
    u_xlat2.xyz = vec3(u_xlatu2.xyz);
    u_xlat2.xyz = u_xlat2.xyz * vec3(5.9838392e-08, 1.53186284e-05, 0.00392156886);
    u_xlat1.xyz = u_xlat1.xyz * vec3(5.9838392e-08, 1.53186284e-05, 0.00392156886) + (-u_xlat2.xyz);
    u_xlat11 = u_xlat33 / _RootColorScale;
    u_xlat11 = u_xlat11 + _RootColorOffset;
#ifdef UNITY_ADRENO_ES3
    u_xlat11 = min(max(u_xlat11, 0.0), 1.0);
#else
    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat11) * u_xlat1.xyz + u_xlat2.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _BurnedColor.xyz;
    u_xlat1.xyz = u_xlat0.xxx * u_xlat2.xyz + u_xlat1.xyz;
    vs_TEXCOORD2.w = u_xlat0.x;
    u_xlat0.x = u_xlat33 + -0.600000024;
    vs_TEXCOORD3 = u_xlat33;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = _GrassTipLighting * u_xlat0.x + 1.0;
    vs_TEXCOORD2.xyz = u_xlat0.xxx * u_xlat1.xyz;
    vs_TEXCOORD4.xy = in_TEXCOORD2.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	float _GrassShininess;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	float _CutOff;
uniform 	vec4 _BurnedColor;
uniform lowp sampler2D _MainTex;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp float vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec4 u_xlat0;
lowp vec4 u_xlat10_0;
bool u_xlatb0;
vec3 u_xlat1;
mediump float u_xlat16_2;
float u_xlat9;
bool u_xlatb9;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD4.xy);
    u_xlat9 = u_xlat10_0.w + (-_CutOff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(u_xlat9<0.0);
#else
    u_xlatb9 = u_xlat9<0.0;
#endif
    if((int(u_xlatb9) * int(0xffffffffu))!=0){discard;}
    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
    SV_Target0.xyz = u_xlat1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0;
    u_xlat1.xyz = _BurnedColor.xyz * u_xlat10_0.xyz + (-u_xlat10_0.xyz);
    u_xlat0.xyz = vs_TEXCOORD2.www * u_xlat1.xyz + u_xlat10_0.xyz;
    u_xlat0.w = vs_TEXCOORD3;
    SV_Target1 = u_xlat0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_2 = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb0) ? u_xlat16_2 : 0.0399999991;
    u_xlat0.x = (-vs_TEXCOORD2.w) + 1.0;
    u_xlat0.x = u_xlat0.x * _GrassShininess;
    SV_Target2.w = u_xlat0.x;
    SV_Target2.xy = vec2(0.0399999991, 0.0399999991);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_HDR_ON" "UNITY_DEBUG_VIEW_ON" "MHY_SHADER_HIGH" "SOFT_SAMPLE_HEIGHT_ON" "DITHER_FADE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	float _NoiseScale;
uniform 	vec4 _WorldOffsetRange;
uniform 	float _HeightScale;
uniform 	float _Billboard;
uniform 	float _VegetationMoveScale;
uniform 	float _VegetationStiffness;
uniform 	vec4 _LocalWindsMapSize;
uniform 	vec4 _LargeWindParam;
uniform 	vec4 _SmallWindParam;
uniform 	vec4 _GlobalWind;
uniform 	vec4 _LocalWindsMapCameraInfo;
uniform 	float _GrassTipLighting;
uniform 	vec4 _MainTex_ST;
uniform 	float _RootColorScale;
uniform 	float _RootColorOffset;
uniform highp sampler2D _Heightmap;
uniform lowp sampler2D _Noisemap;
uniform lowp sampler2D _LocalWindsMap;
in highp vec4 in_POSITION0;
in highp vec4 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec2 in_TEXCOORD2;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp float vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
vec4 u_xlat0;
vec3 u_xlat1;
int u_xlati1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
vec4 u_xlat4;
vec3 u_xlat5;
vec4 u_xlat6;
vec4 u_xlat7;
vec4 u_xlat8;
vec3 u_xlat9;
vec3 u_xlat10;
bool u_xlatb10;
vec2 u_xlat12;
vec3 u_xlat16;
vec2 u_xlat20;
vec2 u_xlat22;
float u_xlat30;
int u_xlati30;
float u_xlat31;
float u_xlat32;
float u_xlat33;
float u_xlat34;
void main()
{
    u_xlat0.z = 0.0;
    u_xlat1.xyz = in_TEXCOORD0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[2].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TEXCOORD0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat10.xz = u_xlat1.xz + (-_LocalWindsMapSize.xy);
    u_xlat10.xz = vec2(u_xlat10.x / _LocalWindsMapSize.z, u_xlat10.z / _LocalWindsMapSize.w);
    u_xlat10.xz = u_xlat10.xz + vec2(0.5, 0.5);
    u_xlat2 = textureLod(_LocalWindsMap, u_xlat10.xz, 0.0);
    u_xlat10.x = dot(u_xlat2.xy, u_xlat2.xy);
    u_xlat10.x = sqrt(u_xlat10.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(9.99999975e-05>=u_xlat10.x);
#else
    u_xlatb10 = 9.99999975e-05>=u_xlat10.x;
#endif
    u_xlat10.x = u_xlatb10 ? 1.0 : float(0.0);
    u_xlat3.xy = (-u_xlat2.xy) + vec2(0.5, 0.5);
    u_xlat10.xz = u_xlat10.xx * u_xlat3.xy + u_xlat2.xy;
    u_xlat10.xz = u_xlat10.xz * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat31 = dot(u_xlat10.xz, u_xlat10.xz);
    u_xlat31 = max(u_xlat31, 0.00100000005);
    u_xlat3.x = inversesqrt(u_xlat31);
    u_xlat3.yz = u_xlat10.xz * u_xlat3.xx;
    u_xlat0.x = u_xlat3.z;
    u_xlat0.xz = (-u_xlat3.xy) * vec2(0.0, 1.0) + u_xlat0.xz;
    u_xlat31 = (-in_TEXCOORD1.x) + hlslcc_mtx4x4unity_ObjectToWorld[1].x;
    u_xlat2.x = u_xlat31 * 3.0;
    u_xlat2.x = _Time.y * 3.0 + u_xlat2.x;
    u_xlat2.x = u_xlat2.x + 0.5;
    u_xlat2.x = fract(u_xlat2.x);
    u_xlat2.x = u_xlat2.x * 2.0 + -1.0;
    u_xlat12.x = abs(u_xlat2.x) * abs(u_xlat2.x);
    u_xlat2.x = -abs(u_xlat2.x) * 2.0 + 3.0;
    u_xlat2.x = u_xlat2.x * u_xlat12.x;
    u_xlat12.x = u_xlat2.z * 1.5;
    u_xlat2.x = u_xlat12.x * u_xlat2.x;
    u_xlat0.xz = u_xlat0.xz * u_xlat2.xx;
    u_xlat0.xz = u_xlat0.xz * vec2(0.150000006, 0.150000006);
    u_xlat0.xz = u_xlat3.yz * u_xlat2.xx + u_xlat0.xz;
    u_xlat0.xz = u_xlat0.xz + u_xlat10.xz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(0.00199999986<u_xlat2.z);
#else
    u_xlatb2 = 0.00199999986<u_xlat2.z;
#endif
    u_xlat12.x = (-u_xlat2.w) * _LocalWindsMapCameraInfo.y + _LocalWindsMapCameraInfo.x;
    u_xlat0.xy = (bool(u_xlatb2)) ? u_xlat0.xz : u_xlat10.xz;
    u_xlat20.xy = vec2(_WorldOffsetRange.z + float(2.0), _WorldOffsetRange.w + float(2.0));
    u_xlat2.xz = u_xlat1.xz + (-_WorldOffsetRange.xy);
    u_xlat2.xz = u_xlat2.xz + vec2(1.0, 1.0);
    u_xlat20.xy = u_xlat2.xz / u_xlat20.xy;
    u_xlat20.xy = u_xlat20.xy * _WorldOffsetRange.zw + vec2(-0.5, -0.5);
    u_xlat2.xz = floor(u_xlat20.xy);
    u_xlat20.xy = u_xlat20.xy + (-u_xlat2.xz);
    u_xlat3 = u_xlat2.xzxz + vec4(0.5, 1.5, 1.5, 1.5);
    u_xlat4 = u_xlat2.xzxz + vec4(1.5, 0.5, 0.5, 0.5);
    u_xlat4 = vec4(u_xlat4.x / _WorldOffsetRange.z, u_xlat4.y / _WorldOffsetRange.w, u_xlat4.z / _WorldOffsetRange.z, u_xlat4.w / _WorldOffsetRange.w);
    u_xlat3 = vec4(u_xlat3.x / _WorldOffsetRange.z, u_xlat3.y / _WorldOffsetRange.w, u_xlat3.z / _WorldOffsetRange.z, u_xlat3.w / _WorldOffsetRange.w);
    u_xlat2.x = textureLod(_Heightmap, u_xlat3.zw, 0.0).x;
    u_xlat22.x = textureLod(_Heightmap, u_xlat3.xy, 0.0).x;
    u_xlat2.x = (-u_xlat22.x) + u_xlat2.x;
    u_xlat2.x = u_xlat20.x * u_xlat2.x + u_xlat22.x;
    u_xlat22.x = textureLod(_Heightmap, u_xlat4.xy, 0.0).x;
    u_xlat32 = textureLod(_Heightmap, u_xlat4.zw, 0.0).x;
    u_xlat22.x = (-u_xlat32) + u_xlat22.x;
    u_xlat20.x = u_xlat20.x * u_xlat22.x + u_xlat32;
    u_xlat2.x = (-u_xlat20.x) + u_xlat2.x;
    u_xlat20.x = u_xlat20.y * u_xlat2.x + u_xlat20.x;
    u_xlat30 = u_xlat20.x * _HeightScale + u_xlat1.y;
    u_xlat30 = (-u_xlat30) + u_xlat12.x;
    u_xlat30 = u_xlat30 * 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
#else
    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
#endif
    u_xlat30 = (-u_xlat30) + 1.0;
    u_xlat2.x = fract(u_xlat31);
    u_xlat31 = u_xlat31 + hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat12.xy = vec2(u_xlat31) * vec2(22.0, 33.0);
    u_xlat12.xy = fract(u_xlat12.xy);
    u_xlat12.xy = u_xlat12.xy + vec2(-0.5, -0.5);
    u_xlat3.xz = u_xlat12.xy * vec2(0.200000003, 0.200000003);
    u_xlat31 = u_xlat2.x + -0.5;
    u_xlat2.x = u_xlat2.x * _SmallWindParam.x;
    u_xlat2.x = sin(u_xlat2.x);
    u_xlat12.x = u_xlat31 * 0.333000004;
    u_xlat4.y = u_xlat31 * 0.333000004 + -1.0;
    u_xlat31 = in_TEXCOORD1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat31 = min(max(u_xlat31, 0.0), 1.0);
#else
    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat12.x * u_xlat31;
    u_xlat30 = u_xlat30 * u_xlat12.x;
    u_xlat0.xy = vec2(u_xlat30) * u_xlat0.xy;
    u_xlat5.xz = u_xlat0.xy * vec2(vec2(_VegetationMoveScale, _VegetationMoveScale));
    u_xlat0.x = dot(_GlobalWind.xyz, _GlobalWind.xyz);
    u_xlat0.x = max(u_xlat0.x, 0.00100000005);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat6 = u_xlat0.xxxx * _GlobalWind.xzxz;
    u_xlat0.xy = vec2(u_xlat6.z * _LargeWindParam.z, u_xlat6.w * _LargeWindParam.z);
    u_xlat22.xy = u_xlat1.xz / vec2(_NoiseScale);
    u_xlat22.xy = _LargeWindParam.xx * u_xlat6.xy + u_xlat22.xy;
    u_xlat22.xy = textureLod(_Noisemap, u_xlat22.xy, 0.0).xy;
    u_xlat22.xy = u_xlat22.xy + vec2(-0.5, -0.5);
    u_xlat22.xy = u_xlat22.xy * _LargeWindParam.yy + vec2(0.5, 0.5);
    u_xlat22.xy = u_xlat12.xx * u_xlat22.xy;
    u_xlat6.xz = u_xlat0.xy * u_xlat22.xy;
    u_xlat6.y = 0.0;
    u_xlat0.x = _VegetationStiffness * _SmallWindParam.y;
    u_xlat0.x = u_xlat12.x * u_xlat0.x;
    u_xlat7.x = u_xlat0.x * u_xlat2.x;
    u_xlat0.xyw = in_NORMAL0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyw = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_NORMAL0.xxx + u_xlat0.xyw;
    u_xlat0.xyw = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_NORMAL0.zzz + u_xlat0.xyw;
    u_xlat2.x = dot(u_xlat0.xyw, u_xlat0.xyw);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat0.xyw = u_xlat0.xyw * u_xlat2.xxx;
    u_xlat7.y = float(1.0);
    u_xlat7.z = float(0.349999994);
    u_xlat2.xzw = u_xlat0.xyw * u_xlat7.yxy;
    u_xlat8.xyz = u_xlat2.xzw * u_xlat7.xzx + u_xlat6.xyz;
    u_xlat2.xzw = u_xlat7.xzx * u_xlat2.xzw;
    u_xlat5.y = 0.0;
    u_xlat7.xyz = u_xlat5.xyz + u_xlat8.xyz;
    u_xlat8.y = hlslcc_mtx4x4unity_MatrixV[0].x;
    u_xlat8.x = hlslcc_mtx4x4unity_MatrixV[2].x;
    u_xlat33 = dot(u_xlat8.xy, u_xlat8.xy);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat16.xz = vec2(u_xlat33) * u_xlat8.xy;
    u_xlat8.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;
    u_xlat8.y = hlslcc_mtx4x4unity_ObjectToWorld[2].x;
    u_xlat33 = dot(u_xlat8.xy, u_xlat8.xy);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat8.xy = vec2(u_xlat33) * u_xlat8.xy;
    u_xlat9.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat9.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat9.xyz;
    u_xlat9.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat9.xyz;
    u_xlat9.xyz = u_xlat9.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat9.xyz = (-u_xlat1.xyz) + u_xlat9.xyz;
    u_xlat33 = u_xlat8.y * u_xlat9.z;
    u_xlat33 = u_xlat9.x * u_xlat8.x + (-u_xlat33);
    u_xlat34 = dot(u_xlat9.zx, u_xlat8.xy);
    u_xlat8.xy = u_xlat16.xz * vec2(u_xlat34);
    u_xlat34 = u_xlat33 * u_xlat16.z + (-u_xlat8.x);
    u_xlat33 = u_xlat33 * u_xlat16.x + u_xlat8.y;
    u_xlat33 = u_xlat9.z + u_xlat33;
    u_xlat9.z = (-u_xlat33) * _Billboard + u_xlat9.z;
    u_xlat33 = u_xlat9.x + u_xlat34;
    u_xlat9.x = (-u_xlat33) * _Billboard + u_xlat9.x;
    u_xlat33 = u_xlat12.x * u_xlat9.y;
    u_xlat12.x = max(u_xlat12.x, 9.99999972e-10);
    u_xlat7.xyz = u_xlat9.xyz * vec3(0.100000001, 1.0, 0.100000001) + u_xlat7.xyz;
    u_xlat34 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat34 = max(u_xlat34, 0.00100000005);
    u_xlat34 = inversesqrt(u_xlat34);
    u_xlat7.xyz = vec3(u_xlat34) * u_xlat7.xyz;
    u_xlat34 = dot(u_xlat9.xyz, u_xlat9.xyz);
    u_xlat34 = sqrt(u_xlat34);
    u_xlat8.xyz = u_xlat9.xyz * vec3(0.100000001, 1.0, 0.100000001);
    u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat34) + (-u_xlat8.xyz);
    u_xlat8.xyz = u_xlat1.xyz + u_xlat9.xyz;
    u_xlat8.w = u_xlat20.x * _HeightScale + u_xlat8.y;
    u_xlat1.xyz = u_xlat7.xyz + u_xlat8.xwz;
    u_xlat1.xyz = vec3(u_xlat33) * vec3(-0.5, 0.0, -0.5) + u_xlat1.xyz;
    u_xlat4.xz = u_xlat4.yy * (-u_xlat4.yy);
    u_xlat1.xyz = u_xlat4.xyz * u_xlat9.xyz + u_xlat1.xyz;
    u_xlat4.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat7 = u_xlat4.yyyy * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat7 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat4.xxxx + u_xlat7;
    u_xlat4 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat4.zzzz + u_xlat7;
    u_xlat4 = u_xlat4 + hlslcc_mtx4x4unity_MatrixVPZero[3];
    gl_Position = u_xlat4;
    u_xlat3.y = 0.0;
    vs_TEXCOORD0.xyz = u_xlat3.xyz + vec3(-1.0, 0.0, -1.0);
    vs_TEXCOORD0.w = 0.0;
    u_xlat3.xyz = u_xlat5.yzx / u_xlat12.xxx;
    u_xlat5.yz = u_xlat6.zx / u_xlat12.xx;
    u_xlat2.xyz = u_xlat2.zwx / u_xlat12.xxx;
    u_xlat5.x = 0.0;
    u_xlat2.xyz = u_xlat2.xyz + u_xlat5.xyz;
    u_xlat2.xyz = u_xlat3.xyz + u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz + vec3(0.0, -1.0, -1.0);
    u_xlat20.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat20.x = inversesqrt(u_xlat20.x);
    u_xlat2.xyz = u_xlat20.xxx * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat0.xyw * u_xlat2.xyz;
    u_xlat0.xyz = u_xlat2.zxy * u_xlat0.ywx + (-u_xlat3.xyz);
    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.xyz * u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
    u_xlat30 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat1.xyz = vec3(u_xlat30) * u_xlat1.xyz;
    u_xlat30 = dot(u_xlat1.xyz, u_xlat0.xyz);
#ifdef UNITY_ADRENO_ES3
    { bool cond = 0.0<u_xlat30; u_xlati1 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati1 = int((0.0<u_xlat30) ? 0xFFFFFFFFu : uint(0u));
#endif
#ifdef UNITY_ADRENO_ES3
    { bool cond = u_xlat30<0.0; u_xlati30 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati30 = int((u_xlat30<0.0) ? 0xFFFFFFFFu : uint(0u));
#endif
    u_xlati30 = (-u_xlati1) + u_xlati30;
    u_xlat30 = float(u_xlati30);
    vs_TEXCOORD1.xyz = vec3(u_xlat30) * u_xlat0.xyz;
    vs_TEXCOORD1.w = 0.0;
    u_xlat0.x = u_xlat31 / _RootColorScale;
    u_xlat0.x = u_xlat0.x + _RootColorOffset;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xxx * vec3(-0.501960814, 0.0, 0.0) + vec3(0.501960814, 0.0, 0.0);
    u_xlat30 = u_xlat31 + -0.600000024;
    vs_TEXCOORD3 = u_xlat31;
    u_xlat30 = max(u_xlat30, 0.0);
    u_xlat30 = _GrassTipLighting * u_xlat30 + 1.0;
    vs_TEXCOORD2.xyz = vec3(u_xlat30) * u_xlat0.xyz;
    vs_TEXCOORD2.w = 0.0;
    vs_TEXCOORD4.xy = in_TEXCOORD2.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
    u_xlat0.x = u_xlat4.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat4.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.w = u_xlat4.w;
    vs_TEXCOORD5.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD5.z = 0.247058824;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
float ImmCB_0_0_0[64];
uniform 	vec4 _ScreenParams;
uniform 	float _GrassShininess;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	float _CutOff;
uniform 	vec4 _BurnedColor;
uniform lowp sampler2D _MainTex;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp float vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec3 u_xlat0;
int u_xlati0;
bool u_xlatb0;
lowp vec4 u_xlat10_1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat12;
bool u_xlatb12;
void main()
{
	ImmCB_0_0_0[0] = 1.0;
	ImmCB_0_0_0[1] = 49.0;
	ImmCB_0_0_0[2] = 13.0;
	ImmCB_0_0_0[3] = 61.0;
	ImmCB_0_0_0[4] = 4.0;
	ImmCB_0_0_0[5] = 52.0;
	ImmCB_0_0_0[6] = 16.0;
	ImmCB_0_0_0[7] = 64.0;
	ImmCB_0_0_0[8] = 33.0;
	ImmCB_0_0_0[9] = 17.0;
	ImmCB_0_0_0[10] = 45.0;
	ImmCB_0_0_0[11] = 29.0;
	ImmCB_0_0_0[12] = 36.0;
	ImmCB_0_0_0[13] = 20.0;
	ImmCB_0_0_0[14] = 48.0;
	ImmCB_0_0_0[15] = 32.0;
	ImmCB_0_0_0[16] = 9.0;
	ImmCB_0_0_0[17] = 57.0;
	ImmCB_0_0_0[18] = 5.0;
	ImmCB_0_0_0[19] = 53.0;
	ImmCB_0_0_0[20] = 12.0;
	ImmCB_0_0_0[21] = 60.0;
	ImmCB_0_0_0[22] = 8.0;
	ImmCB_0_0_0[23] = 56.0;
	ImmCB_0_0_0[24] = 41.0;
	ImmCB_0_0_0[25] = 25.0;
	ImmCB_0_0_0[26] = 37.0;
	ImmCB_0_0_0[27] = 21.0;
	ImmCB_0_0_0[28] = 44.0;
	ImmCB_0_0_0[29] = 28.0;
	ImmCB_0_0_0[30] = 40.0;
	ImmCB_0_0_0[31] = 24.0;
	ImmCB_0_0_0[32] = 3.0;
	ImmCB_0_0_0[33] = 51.0;
	ImmCB_0_0_0[34] = 15.0;
	ImmCB_0_0_0[35] = 63.0;
	ImmCB_0_0_0[36] = 2.0;
	ImmCB_0_0_0[37] = 50.0;
	ImmCB_0_0_0[38] = 14.0;
	ImmCB_0_0_0[39] = 62.0;
	ImmCB_0_0_0[40] = 35.0;
	ImmCB_0_0_0[41] = 19.0;
	ImmCB_0_0_0[42] = 47.0;
	ImmCB_0_0_0[43] = 31.0;
	ImmCB_0_0_0[44] = 34.0;
	ImmCB_0_0_0[45] = 18.0;
	ImmCB_0_0_0[46] = 46.0;
	ImmCB_0_0_0[47] = 30.0;
	ImmCB_0_0_0[48] = 11.0;
	ImmCB_0_0_0[49] = 59.0;
	ImmCB_0_0_0[50] = 7.0;
	ImmCB_0_0_0[51] = 55.0;
	ImmCB_0_0_0[52] = 10.0;
	ImmCB_0_0_0[53] = 58.0;
	ImmCB_0_0_0[54] = 6.0;
	ImmCB_0_0_0[55] = 54.0;
	ImmCB_0_0_0[56] = 43.0;
	ImmCB_0_0_0[57] = 27.0;
	ImmCB_0_0_0[58] = 39.0;
	ImmCB_0_0_0[59] = 23.0;
	ImmCB_0_0_0[60] = 42.0;
	ImmCB_0_0_0[61] = 26.0;
	ImmCB_0_0_0[62] = 38.0;
	ImmCB_0_0_0[63] = 22.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vs_TEXCOORD5.z<0.949999988);
#else
    u_xlatb0 = vs_TEXCOORD5.z<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD5.yx / vs_TEXCOORD5.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
        u_xlat0.xy = u_xlat0.xy * vec2(0.125, 0.125);
        u_xlat0.xy = fract(u_xlat0.xy);
        u_xlat0.xy = u_xlat0.xy * vec2(7.99900007, 7.99900007);
        u_xlat0.xy = trunc(u_xlat0.xy);
        u_xlat0.x = u_xlat0.x * 8.0 + u_xlat0.y;
        u_xlati0 = int(u_xlat0.x);
        u_xlat0.x = (-ImmCB_0_0_0[u_xlati0]) * 0.015625 + vs_TEXCOORD5.z;
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat0.x = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD0.xyz;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD4.xy);
    u_xlat2.xyz = _BurnedColor.xyz * u_xlat10_1.xyz + (-u_xlat10_1.xyz);
    u_xlat2.xyz = vs_TEXCOORD2.www * u_xlat2.xyz + u_xlat10_1.xyz;
    u_xlat12 = u_xlat10_1.w + (-_CutOff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat12<0.0);
#else
    u_xlatb12 = u_xlat12<0.0;
#endif
    if((int(u_xlatb12) * int(0xffffffffu))!=0){discard;}
    u_xlat12 = (-vs_TEXCOORD2.w) + 1.0;
    u_xlat12 = u_xlat12 * _GrassShininess;
    SV_Target0.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_3 = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb0) ? u_xlat16_3 : 0.0399999991;
    SV_Target0.w = 0.0;
    u_xlat2.w = vs_TEXCOORD3;
    SV_Target1 = u_xlat2;
    SV_Target2.xy = vec2(0.0399999991, 0.0399999991);
    SV_Target2.w = u_xlat12;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_HDR_ON" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "MHY_SHADER_HIGH" "SOFT_SAMPLE_HEIGHT_ON" "DITHER_FADE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	int unity_BaseInstanceID;
uniform 	float _NoiseScale;
uniform 	vec4 _WorldOffsetRange;
uniform 	float _HeightScale;
uniform 	float _Billboard;
uniform 	float _VegetationMoveScale;
uniform 	float _VegetationStiffness;
uniform 	vec4 _LocalWindsMapSize;
uniform 	vec4 _LargeWindParam;
uniform 	vec4 _SmallWindParam;
uniform 	vec4 _GlobalWind;
uniform 	vec4 _LocalWindsMapCameraInfo;
uniform 	float _GrassTipLighting;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BurnedColor;
uniform 	float _RootColorScale;
uniform 	float _RootColorOffset;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _Heightmap;
uniform lowp sampler2D _Noisemap;
uniform lowp sampler2D _LocalWindsMap;
in highp vec4 in_POSITION0;
in highp vec4 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec2 in_TEXCOORD2;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp float vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
vec4 u_xlat0;
int u_xlati0;
uvec3 u_xlatu0;
vec3 u_xlat1;
uvec3 u_xlatu1;
vec4 u_xlat2;
uvec4 u_xlatu2;
vec4 u_xlat3;
vec4 u_xlat4;
vec3 u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
vec3 u_xlat8;
vec4 u_xlat9;
vec4 u_xlat10;
float u_xlat11;
int u_xlati11;
float u_xlat13;
uint u_xlatu13;
vec3 u_xlat17;
vec3 u_xlat18;
float u_xlat22;
int u_xlati22;
bool u_xlatb22;
float u_xlat24;
float u_xlat33;
bool u_xlatb33;
float u_xlat34;
bool u_xlatb34;
float u_xlat35;
float u_xlat36;
void main()
{
    u_xlat0.z = 0.0;
    u_xlati11 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati11 = u_xlati11 << 2;
    u_xlat1.xyz = in_TEXCOORD0.yyy * unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_TEXCOORD0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat2.xy = u_xlat1.xz + (-_LocalWindsMapSize.xy);
    u_xlat2.xy = vec2(u_xlat2.x / _LocalWindsMapSize.z, u_xlat2.y / _LocalWindsMapSize.w);
    u_xlat2.xy = u_xlat2.xy + vec2(0.5, 0.5);
    u_xlat2 = textureLod(_LocalWindsMap, u_xlat2.xy, 0.0);
    u_xlat33 = dot(u_xlat2.xy, u_xlat2.xy);
    u_xlat33 = sqrt(u_xlat33);
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(9.99999975e-05>=u_xlat33);
#else
    u_xlatb33 = 9.99999975e-05>=u_xlat33;
#endif
    u_xlat33 = u_xlatb33 ? 1.0 : float(0.0);
    u_xlat3.xy = (-u_xlat2.xy) + vec2(0.5, 0.5);
    u_xlat2.xy = vec2(u_xlat33) * u_xlat3.xy + u_xlat2.xy;
    u_xlat2.xy = u_xlat2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat33 = dot(u_xlat2.xy, u_xlat2.xy);
    u_xlat33 = max(u_xlat33, 0.00100000005);
    u_xlat3.x = inversesqrt(u_xlat33);
    u_xlat3.yz = u_xlat2.xy * u_xlat3.xx;
    u_xlat0.x = u_xlat3.z;
    u_xlat0.xz = (-u_xlat3.xy) * vec2(0.0, 1.0) + u_xlat0.xz;
    u_xlat33 = (-in_TEXCOORD1.x) + unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].x;
    u_xlat34 = u_xlat33 * 3.0;
    u_xlat34 = _Time.y * 3.0 + u_xlat34;
    u_xlat34 = u_xlat34 + 0.5;
    u_xlat34 = fract(u_xlat34);
    u_xlat34 = u_xlat34 * 2.0 + -1.0;
    u_xlat3.x = abs(u_xlat34) * abs(u_xlat34);
    u_xlat34 = -abs(u_xlat34) * 2.0 + 3.0;
    u_xlat34 = u_xlat34 * u_xlat3.x;
    u_xlat3.x = u_xlat2.z * 1.5;
    u_xlat34 = u_xlat34 * u_xlat3.x;
    u_xlat0.xz = u_xlat0.xz * vec2(u_xlat34);
    u_xlat0.xz = u_xlat0.xz * vec2(0.150000006, 0.150000006);
    u_xlat0.xz = u_xlat3.yz * vec2(u_xlat34) + u_xlat0.xz;
    u_xlat0.xz = u_xlat0.xz + u_xlat2.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlatb34 = !!(0.00199999986<u_xlat2.z);
#else
    u_xlatb34 = 0.00199999986<u_xlat2.z;
#endif
    u_xlat24 = (-u_xlat2.w) * _LocalWindsMapCameraInfo.y + _LocalWindsMapCameraInfo.x;
    u_xlat0.xz = (bool(u_xlatb34)) ? u_xlat0.xz : u_xlat2.xy;
    u_xlat2.xy = vec2(_WorldOffsetRange.z + float(2.0), _WorldOffsetRange.w + float(2.0));
    u_xlat3.xy = u_xlat1.xz + (-_WorldOffsetRange.xy);
    u_xlat3.xy = u_xlat3.xy + vec2(1.0, 1.0);
    u_xlat2.xy = u_xlat3.xy / u_xlat2.xy;
    u_xlat2.xy = u_xlat2.xy * _WorldOffsetRange.zw + vec2(-0.5, -0.5);
    u_xlat3.xy = floor(u_xlat2.xy);
    u_xlat2.xy = u_xlat2.xy + (-u_xlat3.xy);
    u_xlat4 = u_xlat3.xyxy + vec4(0.5, 1.5, 1.5, 1.5);
    u_xlat3 = u_xlat3.xyxy + vec4(1.5, 0.5, 0.5, 0.5);
    u_xlat3 = vec4(u_xlat3.x / _WorldOffsetRange.z, u_xlat3.y / _WorldOffsetRange.w, u_xlat3.z / _WorldOffsetRange.z, u_xlat3.w / _WorldOffsetRange.w);
    u_xlat4 = vec4(u_xlat4.x / _WorldOffsetRange.z, u_xlat4.y / _WorldOffsetRange.w, u_xlat4.z / _WorldOffsetRange.z, u_xlat4.w / _WorldOffsetRange.w);
    u_xlat34 = textureLod(_Heightmap, u_xlat4.zw, 0.0).x;
    u_xlat35 = textureLod(_Heightmap, u_xlat4.xy, 0.0).x;
    u_xlat34 = u_xlat34 + (-u_xlat35);
    u_xlat34 = u_xlat2.x * u_xlat34 + u_xlat35;
    u_xlat35 = textureLod(_Heightmap, u_xlat3.xy, 0.0).x;
    u_xlat3.x = textureLod(_Heightmap, u_xlat3.zw, 0.0).x;
    u_xlat35 = u_xlat35 + (-u_xlat3.x);
    u_xlat2.x = u_xlat2.x * u_xlat35 + u_xlat3.x;
    u_xlat34 = u_xlat34 + (-u_xlat2.x);
    u_xlat34 = u_xlat2.y * u_xlat34 + u_xlat2.x;
    u_xlat2.x = u_xlat34 * _HeightScale + u_xlat1.y;
    u_xlat2.x = (-u_xlat2.x) + u_xlat24;
    u_xlat2.x = u_xlat2.x * 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat2.x = (-u_xlat2.x) + 1.0;
    u_xlat13 = float(floatBitsToUint(unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2]).w);
    u_xlat13 = u_xlat13 * 5.96046448e-08;
    u_xlatu13 = uint(u_xlat13);
    u_xlatu13 = u_xlatu13 & 3u;
    u_xlat13 = float(u_xlatu13);
    u_xlat24 = fract(u_xlat33);
    u_xlat33 = u_xlat33 + unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].y;
    u_xlat3.xy = vec2(u_xlat33) * vec2(22.0, 33.0);
    u_xlat3.xy = fract(u_xlat3.xy);
    u_xlat3.xy = u_xlat3.xy + vec2(-0.5, -0.5);
    u_xlat3.xz = u_xlat3.xy * vec2(0.200000003, 0.200000003);
    u_xlat33 = u_xlat13 + u_xlat24;
    u_xlat13 = u_xlat24 * _SmallWindParam.x;
    u_xlat13 = sin(u_xlat13);
    u_xlat33 = u_xlat33 + -0.5;
    u_xlat24 = u_xlat33 * 0.333000004;
    u_xlat4.y = u_xlat33 * 0.333000004 + -1.0;
    u_xlat33 = in_TEXCOORD1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat33 = min(max(u_xlat33, 0.0), 1.0);
#else
    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
#endif
    u_xlat24 = u_xlat24 * u_xlat33;
    u_xlat2.x = u_xlat24 * u_xlat2.x;
    u_xlat0.xz = u_xlat0.xz * u_xlat2.xx;
    u_xlat5.xz = u_xlat0.xz * vec2(vec2(_VegetationMoveScale, _VegetationMoveScale));
    u_xlat6.y = 0.0;
    u_xlat0.x = _VegetationStiffness * _SmallWindParam.y;
    u_xlat0.x = u_xlat24 * u_xlat0.x;
    u_xlat7.x = u_xlat0.x * u_xlat13;
    u_xlat2.xyw = in_NORMAL0.yyy * unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat2.xyw = unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_NORMAL0.xxx + u_xlat2.xyw;
    u_xlat2.xyw = unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_NORMAL0.zzz + u_xlat2.xyw;
    u_xlat0.x = dot(u_xlat2.xyw, u_xlat2.xyw);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat2.xyw = u_xlat0.xxx * u_xlat2.xyw;
    u_xlat7.y = float(1.0);
    u_xlat7.z = float(0.349999994);
    u_xlat8.xyz = u_xlat2.xyw * u_xlat7.yxy;
    u_xlat0.x = dot(_GlobalWind.xyz, _GlobalWind.xyz);
    u_xlat0.x = max(u_xlat0.x, 0.00100000005);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat9 = u_xlat0.xxxx * _GlobalWind.xzxz;
    u_xlat0.xz = vec2(u_xlat9.z * _LargeWindParam.z, u_xlat9.w * _LargeWindParam.z);
    u_xlat18.xz = u_xlat1.xz / vec2(_NoiseScale);
    u_xlat18.xz = _LargeWindParam.xx * u_xlat9.xy + u_xlat18.xz;
    u_xlat18.xz = textureLod(_Noisemap, u_xlat18.xz, 0.0).xy;
    u_xlat18.xz = u_xlat18.xz + vec2(-0.5, -0.5);
    u_xlat18.xz = u_xlat18.xz * _LargeWindParam.yy + vec2(0.5, 0.5);
    u_xlat18.xz = vec2(u_xlat24) * u_xlat18.xz;
    u_xlat6.xz = u_xlat0.xz * u_xlat18.xz;
    u_xlat9.xyz = u_xlat8.xyz * u_xlat7.xzx + u_xlat6.xyz;
    u_xlat7.xyz = u_xlat7.xzx * u_xlat8.xyz;
    u_xlat5.y = 0.0;
    u_xlat8.xyz = u_xlat5.xyz + u_xlat9.xyz;
    u_xlat9.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat9.xyz = unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat9.xyz;
    u_xlat9.xyz = unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat9.xyz;
    u_xlat9.xyz = u_xlat9.xyz + unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat9.xyz = (-u_xlat1.xyz) + u_xlat9.xyz;
    u_xlat10.x = unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].x;
    u_xlat10.y = unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].x;
    u_xlat0.x = dot(u_xlat10.xy, u_xlat10.xy);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xz = u_xlat0.xx * u_xlat10.xy;
    u_xlat36 = u_xlat0.z * u_xlat9.z;
    u_xlat36 = u_xlat9.x * u_xlat0.x + (-u_xlat36);
    u_xlat0.x = dot(u_xlat9.zx, u_xlat0.xz);
    u_xlat10.y = hlslcc_mtx4x4unity_MatrixV[0].x;
    u_xlat10.x = hlslcc_mtx4x4unity_MatrixV[2].x;
    u_xlat22 = dot(u_xlat10.xy, u_xlat10.xy);
    u_xlat22 = inversesqrt(u_xlat22);
    u_xlat17.xz = vec2(u_xlat22) * u_xlat10.xy;
    u_xlat0.xz = u_xlat0.xx * u_xlat17.xz;
    u_xlat0.x = u_xlat36 * u_xlat17.z + (-u_xlat0.x);
    u_xlat0.z = u_xlat36 * u_xlat17.x + u_xlat0.z;
    u_xlat0.xz = u_xlat9.xz + u_xlat0.xz;
    u_xlat9.z = (-u_xlat0.z) * _Billboard + u_xlat9.z;
    u_xlat9.x = (-u_xlat0.x) * _Billboard + u_xlat9.x;
    u_xlat8.xyz = u_xlat9.xyz * vec3(0.100000001, 1.0, 0.100000001) + u_xlat8.xyz;
    u_xlat0.x = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat0.x = max(u_xlat0.x, 0.00100000005);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat8.xyz = u_xlat0.xxx * u_xlat8.xyz;
    u_xlat0.x = dot(u_xlat9.xyz, u_xlat9.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat10.xyz = u_xlat9.xyz * vec3(0.100000001, 1.0, 0.100000001);
    u_xlat8.xyz = u_xlat8.xyz * u_xlat0.xxx + (-u_xlat10.xyz);
    u_xlat10.xyz = u_xlat1.xyz + u_xlat9.xyz;
    u_xlat10.w = u_xlat34 * _HeightScale + u_xlat10.y;
    u_xlat1.xyz = u_xlat8.xyz + u_xlat10.xwz;
    u_xlatu0.xz = uvec2(65280u, 255u) & floatBitsToUint(unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1]).ww;
    u_xlat0.xz = vec2(u_xlatu0.xz);
    u_xlat0.x = u_xlat0.x * 0.00390625;
    u_xlatu0.x = uint(u_xlat0.x);
    u_xlat0.x = float(u_xlatu0.x);
    u_xlat8.xz = u_xlat0.xz + vec2(-127.0, -127.0);
    u_xlat0.xz = u_xlat8.xz * vec2(0.00787401572, 0.00787401572);
    u_xlat0.xz = u_xlat0.xz * u_xlat0.xz;
    u_xlat0.x = u_xlat0.z + u_xlat0.x;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(0.0<u_xlat0.x);
#else
    u_xlatb22 = 0.0<u_xlat0.x;
#endif
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat8.y = u_xlatb22 ? u_xlat0.x : float(0.0);
    u_xlat10.xyz = u_xlat8.xyz * u_xlat9.yyy;
    u_xlat10.xyz = vec3(u_xlat24) * u_xlat10.xyz;
    u_xlat0.x = max(u_xlat24, 9.99999972e-10);
    u_xlat1.xyz = u_xlat10.xyz * vec3(0.00393700786, 0.0, 0.00393700786) + u_xlat1.xyz;
    u_xlat4.xz = u_xlat4.yy * (-u_xlat4.yy);
    u_xlat1.xyz = u_xlat4.xyz * u_xlat9.xyz + u_xlat1.xyz;
    u_xlat4.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat9 = u_xlat4.yyyy * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat9 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat4.xxxx + u_xlat9;
    u_xlat4 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat4.zzzz + u_xlat9;
    u_xlat4 = u_xlat4 + hlslcc_mtx4x4unity_MatrixVPZero[3];
    gl_Position = u_xlat4;
    u_xlat3.y = 0.0;
    vs_TEXCOORD0.xyz = u_xlat8.xyz * vec3(0.00787401572, 1.0, 0.00787401572) + u_xlat3.xyz;
    vs_TEXCOORD0.w = 0.0;
    u_xlat3.xyz = u_xlat5.yzx / u_xlat0.xxx;
    u_xlat5.yz = u_xlat6.zx / u_xlat0.xx;
    u_xlat6.xyz = u_xlat7.yzx / u_xlat0.xxx;
    u_xlat5.x = 0.0;
    u_xlat5.xyz = u_xlat5.xyz + u_xlat6.xyz;
    u_xlat3.xyz = u_xlat3.xyz + u_xlat5.xyz;
    u_xlat3.xyz = u_xlat8.yzx * vec3(1.0, 0.00787401572, 0.00787401572) + u_xlat3.xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat5.xyz = u_xlat2.xyw * u_xlat3.xyz;
    u_xlat2.xyz = u_xlat3.zxy * u_xlat2.ywx + (-u_xlat5.xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat5.xyz = u_xlat3.xyz * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat5.xyz);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
    { bool cond = 0.0<u_xlat0.x; u_xlati22 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati22 = int((0.0<u_xlat0.x) ? 0xFFFFFFFFu : uint(0u));
#endif
#ifdef UNITY_ADRENO_ES3
    { bool cond = u_xlat0.x<0.0; u_xlati0 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati0 = int((u_xlat0.x<0.0) ? 0xFFFFFFFFu : uint(0u));
#endif
    u_xlati0 = (-u_xlati22) + u_xlati0;
    u_xlat0.x = float(u_xlati0);
    vs_TEXCOORD1.xyz = u_xlat0.xxx * u_xlat2.xyz;
    vs_TEXCOORD1.w = 0.0;
    u_xlatu1.xyz = uvec3(16711680u, 65280u, 255u) & floatBitsToUint(unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2]).www;
    u_xlat1.xyz = vec3(u_xlatu1.xyz);
    u_xlatu2 = uvec4(4278190080u, 16711680u, 65280u, 255u) & floatBitsToUint(unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3]).wwww;
    u_xlat0.x = max(1.0, unity_Builtins0Array[u_xlati11 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].w);
    u_xlat0.x = min(u_xlat0.x, 2.0);
    u_xlat0.x = u_xlat0.x + -1.0;
    u_xlat2 = vec4(u_xlatu2);
    u_xlat2 = u_xlat2 * vec4(2.33743719e-10, 5.9838392e-08, 1.53186284e-05, 0.00392156886);
    u_xlat1.xyz = u_xlat1.xyz * vec3(5.9838392e-08, 1.53186284e-05, 0.00392156886) + (-u_xlat2.yzw);
    u_xlat11 = u_xlat33 / _RootColorScale;
    u_xlat11 = u_xlat11 + _RootColorOffset;
#ifdef UNITY_ADRENO_ES3
    u_xlat11 = min(max(u_xlat11, 0.0), 1.0);
#else
    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat11) * u_xlat1.xyz + u_xlat2.yzw;
    vs_TEXCOORD5.z = u_xlat2.x;
    u_xlat2.xyz = (-u_xlat1.xyz) + _BurnedColor.xyz;
    u_xlat1.xyz = u_xlat0.xxx * u_xlat2.xyz + u_xlat1.xyz;
    vs_TEXCOORD2.w = u_xlat0.x;
    u_xlat0.x = u_xlat33 + -0.600000024;
    vs_TEXCOORD3 = u_xlat33;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = _GrassTipLighting * u_xlat0.x + 1.0;
    vs_TEXCOORD2.xyz = u_xlat0.xxx * u_xlat1.xyz;
    vs_TEXCOORD4.xy = in_TEXCOORD2.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
    u_xlat0.x = u_xlat4.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat4.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.w = u_xlat4.w;
    vs_TEXCOORD5.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
float ImmCB_0_0_0[64];
uniform 	vec4 _ScreenParams;
uniform 	float _GrassShininess;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	float _CutOff;
uniform 	vec4 _BurnedColor;
uniform lowp sampler2D _MainTex;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp float vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec3 u_xlat0;
int u_xlati0;
bool u_xlatb0;
lowp vec4 u_xlat10_1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat12;
bool u_xlatb12;
void main()
{
	ImmCB_0_0_0[0] = 1.0;
	ImmCB_0_0_0[1] = 49.0;
	ImmCB_0_0_0[2] = 13.0;
	ImmCB_0_0_0[3] = 61.0;
	ImmCB_0_0_0[4] = 4.0;
	ImmCB_0_0_0[5] = 52.0;
	ImmCB_0_0_0[6] = 16.0;
	ImmCB_0_0_0[7] = 64.0;
	ImmCB_0_0_0[8] = 33.0;
	ImmCB_0_0_0[9] = 17.0;
	ImmCB_0_0_0[10] = 45.0;
	ImmCB_0_0_0[11] = 29.0;
	ImmCB_0_0_0[12] = 36.0;
	ImmCB_0_0_0[13] = 20.0;
	ImmCB_0_0_0[14] = 48.0;
	ImmCB_0_0_0[15] = 32.0;
	ImmCB_0_0_0[16] = 9.0;
	ImmCB_0_0_0[17] = 57.0;
	ImmCB_0_0_0[18] = 5.0;
	ImmCB_0_0_0[19] = 53.0;
	ImmCB_0_0_0[20] = 12.0;
	ImmCB_0_0_0[21] = 60.0;
	ImmCB_0_0_0[22] = 8.0;
	ImmCB_0_0_0[23] = 56.0;
	ImmCB_0_0_0[24] = 41.0;
	ImmCB_0_0_0[25] = 25.0;
	ImmCB_0_0_0[26] = 37.0;
	ImmCB_0_0_0[27] = 21.0;
	ImmCB_0_0_0[28] = 44.0;
	ImmCB_0_0_0[29] = 28.0;
	ImmCB_0_0_0[30] = 40.0;
	ImmCB_0_0_0[31] = 24.0;
	ImmCB_0_0_0[32] = 3.0;
	ImmCB_0_0_0[33] = 51.0;
	ImmCB_0_0_0[34] = 15.0;
	ImmCB_0_0_0[35] = 63.0;
	ImmCB_0_0_0[36] = 2.0;
	ImmCB_0_0_0[37] = 50.0;
	ImmCB_0_0_0[38] = 14.0;
	ImmCB_0_0_0[39] = 62.0;
	ImmCB_0_0_0[40] = 35.0;
	ImmCB_0_0_0[41] = 19.0;
	ImmCB_0_0_0[42] = 47.0;
	ImmCB_0_0_0[43] = 31.0;
	ImmCB_0_0_0[44] = 34.0;
	ImmCB_0_0_0[45] = 18.0;
	ImmCB_0_0_0[46] = 46.0;
	ImmCB_0_0_0[47] = 30.0;
	ImmCB_0_0_0[48] = 11.0;
	ImmCB_0_0_0[49] = 59.0;
	ImmCB_0_0_0[50] = 7.0;
	ImmCB_0_0_0[51] = 55.0;
	ImmCB_0_0_0[52] = 10.0;
	ImmCB_0_0_0[53] = 58.0;
	ImmCB_0_0_0[54] = 6.0;
	ImmCB_0_0_0[55] = 54.0;
	ImmCB_0_0_0[56] = 43.0;
	ImmCB_0_0_0[57] = 27.0;
	ImmCB_0_0_0[58] = 39.0;
	ImmCB_0_0_0[59] = 23.0;
	ImmCB_0_0_0[60] = 42.0;
	ImmCB_0_0_0[61] = 26.0;
	ImmCB_0_0_0[62] = 38.0;
	ImmCB_0_0_0[63] = 22.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vs_TEXCOORD5.z<0.949999988);
#else
    u_xlatb0 = vs_TEXCOORD5.z<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD5.yx / vs_TEXCOORD5.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
        u_xlat0.xy = u_xlat0.xy * vec2(0.125, 0.125);
        u_xlat0.xy = fract(u_xlat0.xy);
        u_xlat0.xy = u_xlat0.xy * vec2(7.99900007, 7.99900007);
        u_xlat0.xy = trunc(u_xlat0.xy);
        u_xlat0.x = u_xlat0.x * 8.0 + u_xlat0.y;
        u_xlati0 = int(u_xlat0.x);
        u_xlat0.x = (-ImmCB_0_0_0[u_xlati0]) * 0.015625 + vs_TEXCOORD5.z;
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat0.x = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD0.xyz;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD4.xy);
    u_xlat2.xyz = _BurnedColor.xyz * u_xlat10_1.xyz + (-u_xlat10_1.xyz);
    u_xlat2.xyz = vs_TEXCOORD2.www * u_xlat2.xyz + u_xlat10_1.xyz;
    u_xlat12 = u_xlat10_1.w + (-_CutOff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat12<0.0);
#else
    u_xlatb12 = u_xlat12<0.0;
#endif
    if((int(u_xlatb12) * int(0xffffffffu))!=0){discard;}
    u_xlat12 = (-vs_TEXCOORD2.w) + 1.0;
    u_xlat12 = u_xlat12 * _GrassShininess;
    SV_Target0.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_3 = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb0) ? u_xlat16_3 : 0.0399999991;
    SV_Target0.w = 0.0;
    u_xlat2.w = vs_TEXCOORD3;
    SV_Target1 = u_xlat2;
    SV_Target2.xy = vec2(0.0399999991, 0.0399999991);
    SV_Target2.w = u_xlat12;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_HDR_ON" "UNITY_DEBUG_VIEW_ON" "MHY_SHADER_MIDDLE" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	float _NoiseScale;
uniform 	vec4 _WorldOffsetRange;
uniform 	float _HeightScale;
uniform 	float _Billboard;
uniform 	float _VegetationMoveScale;
uniform 	vec4 _LocalWindsMapSize;
uniform 	vec4 _LargeWindParam;
uniform 	vec4 _GlobalWind;
uniform 	vec4 _LocalWindsMapCameraInfo;
uniform 	float _GrassTipLighting;
uniform 	vec4 _MainTex_ST;
uniform 	float _RootColorScale;
uniform 	float _RootColorOffset;
uniform highp sampler2D _Heightmap;
uniform lowp sampler2D _Noisemap;
uniform lowp sampler2D _LocalWindsMap;
in highp vec4 in_POSITION0;
in highp vec4 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec2 in_TEXCOORD2;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp float vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec3 u_xlat0;
vec3 u_xlat1;
int u_xlati1;
vec4 u_xlat2;
bool u_xlatb2;
vec3 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
vec4 u_xlat6;
vec3 u_xlat7;
vec3 u_xlat8;
bool u_xlatb8;
vec2 u_xlat10;
vec2 u_xlat16;
vec2 u_xlat21;
float u_xlat24;
int u_xlati24;
float u_xlat25;
float u_xlat26;
void main()
{
    u_xlat0.z = 0.0;
    u_xlat1.xyz = in_TEXCOORD0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[2].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TEXCOORD0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat8.xz = u_xlat1.xz + (-_LocalWindsMapSize.xy);
    u_xlat8.xz = vec2(u_xlat8.x / _LocalWindsMapSize.z, u_xlat8.z / _LocalWindsMapSize.w);
    u_xlat8.xz = u_xlat8.xz + vec2(0.5, 0.5);
    u_xlat2 = textureLod(_LocalWindsMap, u_xlat8.xz, 0.0);
    u_xlat8.x = dot(u_xlat2.xy, u_xlat2.xy);
    u_xlat8.x = sqrt(u_xlat8.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(9.99999975e-05>=u_xlat8.x);
#else
    u_xlatb8 = 9.99999975e-05>=u_xlat8.x;
#endif
    u_xlat8.x = u_xlatb8 ? 1.0 : float(0.0);
    u_xlat3.xy = (-u_xlat2.xy) + vec2(0.5, 0.5);
    u_xlat8.xz = u_xlat8.xx * u_xlat3.xy + u_xlat2.xy;
    u_xlat8.xz = u_xlat8.xz * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat25 = dot(u_xlat8.xz, u_xlat8.xz);
    u_xlat25 = max(u_xlat25, 0.00100000005);
    u_xlat3.x = inversesqrt(u_xlat25);
    u_xlat3.yz = u_xlat8.xz * u_xlat3.xx;
    u_xlat0.x = u_xlat3.z;
    u_xlat0.xz = (-u_xlat3.xy) * vec2(0.0, 1.0) + u_xlat0.xz;
    u_xlat25 = (-in_TEXCOORD1.x) + hlslcc_mtx4x4unity_ObjectToWorld[1].x;
    u_xlat2.x = u_xlat25 * 3.0;
    u_xlat2.x = _Time.y * 3.0 + u_xlat2.x;
    u_xlat2.x = u_xlat2.x + 0.5;
    u_xlat2.x = fract(u_xlat2.x);
    u_xlat2.x = u_xlat2.x * 2.0 + -1.0;
    u_xlat10.x = abs(u_xlat2.x) * abs(u_xlat2.x);
    u_xlat2.x = -abs(u_xlat2.x) * 2.0 + 3.0;
    u_xlat2.x = u_xlat2.x * u_xlat10.x;
    u_xlat10.x = u_xlat2.z * 1.5;
    u_xlat2.x = u_xlat10.x * u_xlat2.x;
    u_xlat0.xz = u_xlat0.xz * u_xlat2.xx;
    u_xlat0.xz = u_xlat0.xz * vec2(0.150000006, 0.150000006);
    u_xlat0.xz = u_xlat3.yz * u_xlat2.xx + u_xlat0.xz;
    u_xlat0.xz = u_xlat0.xz + u_xlat8.xz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(0.00199999986<u_xlat2.z);
#else
    u_xlatb2 = 0.00199999986<u_xlat2.z;
#endif
    u_xlat10.x = (-u_xlat2.w) * _LocalWindsMapCameraInfo.y + _LocalWindsMapCameraInfo.x;
    u_xlat0.xy = (bool(u_xlatb2)) ? u_xlat0.xz : u_xlat8.xz;
    u_xlat16.xy = vec2(_WorldOffsetRange.z + float(2.0), _WorldOffsetRange.w + float(2.0));
    u_xlat2.xz = u_xlat1.xz + (-_WorldOffsetRange.xy);
    u_xlat2.xz = u_xlat2.xz + vec2(1.0, 1.0);
    u_xlat16.xy = u_xlat2.xz / u_xlat16.xy;
    u_xlat16.x = textureLod(_Heightmap, u_xlat16.xy, 0.0).x;
    u_xlat24 = u_xlat16.x * _HeightScale + u_xlat1.y;
    u_xlat24 = (-u_xlat24) + u_xlat10.x;
    u_xlat24 = u_xlat24 * 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat24 = (-u_xlat24) + 1.0;
    u_xlat2.x = fract(u_xlat25);
    u_xlat25 = u_xlat25 + hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat10.xy = vec2(u_xlat25) * vec2(22.0, 33.0);
    u_xlat10.xy = fract(u_xlat10.xy);
    u_xlat10.xy = u_xlat10.xy + vec2(-0.5, -0.5);
    u_xlat3.xz = u_xlat10.xy * vec2(0.200000003, 0.200000003);
    u_xlat25 = u_xlat2.x + -0.5;
    u_xlat2.x = u_xlat25 * 0.333000004;
    u_xlat4.y = u_xlat25 * 0.333000004 + -1.0;
    u_xlat25 = in_TEXCOORD1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat25 = min(max(u_xlat25, 0.0), 1.0);
#else
    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
#endif
    u_xlat2.x = u_xlat2.x * u_xlat25;
    u_xlat24 = u_xlat24 * u_xlat2.x;
    u_xlat0.xy = vec2(u_xlat24) * u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(vec2(_VegetationMoveScale, _VegetationMoveScale));
    u_xlat24 = dot(_GlobalWind.xyz, _GlobalWind.xyz);
    u_xlat24 = max(u_xlat24, 0.00100000005);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat5 = vec4(u_xlat24) * _GlobalWind.xzxz;
    u_xlat10.xy = vec2(u_xlat5.z * _LargeWindParam.z, u_xlat5.w * _LargeWindParam.z);
    u_xlat21.xy = u_xlat1.xz / vec2(_NoiseScale);
    u_xlat5.xy = _LargeWindParam.xx * u_xlat5.xy + u_xlat21.xy;
    u_xlat5.xy = textureLod(_Noisemap, u_xlat5.xy, 0.0).xy;
    u_xlat5.xy = u_xlat5.xy + vec2(-0.5, -0.5);
    u_xlat5.xy = u_xlat5.xy * _LargeWindParam.yy + vec2(0.5, 0.5);
    u_xlat5.xy = u_xlat2.xx * u_xlat5.xy;
    u_xlat6.xz = u_xlat5.xy * u_xlat10.xy + u_xlat0.xy;
    u_xlat10.xy = u_xlat10.xy * u_xlat5.xy;
    u_xlat6.y = 0.0;
    u_xlat5.y = hlslcc_mtx4x4unity_MatrixV[0].x;
    u_xlat5.x = hlslcc_mtx4x4unity_MatrixV[2].x;
    u_xlat24 = dot(u_xlat5.xy, u_xlat5.xy);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat5.xy = vec2(u_xlat24) * u_xlat5.xy;
    u_xlat7.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;
    u_xlat7.y = hlslcc_mtx4x4unity_ObjectToWorld[2].x;
    u_xlat24 = dot(u_xlat7.xy, u_xlat7.xy);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat21.xy = vec2(u_xlat24) * u_xlat7.xy;
    u_xlat7.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat7.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat7.xyz;
    u_xlat7.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat7.xyz;
    u_xlat7.xyz = u_xlat7.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat7.xyz = (-u_xlat1.xyz) + u_xlat7.xyz;
    u_xlat24 = u_xlat21.y * u_xlat7.z;
    u_xlat24 = u_xlat7.x * u_xlat21.x + (-u_xlat24);
    u_xlat26 = dot(u_xlat7.zx, u_xlat21.xy);
    u_xlat21.xy = u_xlat5.xy * vec2(u_xlat26);
    u_xlat26 = u_xlat24 * u_xlat5.y + (-u_xlat21.x);
    u_xlat24 = u_xlat24 * u_xlat5.x + u_xlat21.y;
    u_xlat24 = u_xlat7.z + u_xlat24;
    u_xlat7.z = (-u_xlat24) * _Billboard + u_xlat7.z;
    u_xlat24 = u_xlat7.x + u_xlat26;
    u_xlat7.x = (-u_xlat24) * _Billboard + u_xlat7.x;
    u_xlat24 = u_xlat2.x * u_xlat7.y;
    u_xlat2.x = max(u_xlat2.x, 9.99999972e-10);
    u_xlat5.xyz = u_xlat7.xyz * vec3(0.100000001, 1.0, 0.100000001) + u_xlat6.xyz;
    u_xlat26 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat26 = max(u_xlat26, 0.00100000005);
    u_xlat26 = inversesqrt(u_xlat26);
    u_xlat5.xyz = vec3(u_xlat26) * u_xlat5.xyz;
    u_xlat26 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat26 = sqrt(u_xlat26);
    u_xlat6.xyz = u_xlat7.xyz * vec3(0.100000001, 1.0, 0.100000001);
    u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat26) + (-u_xlat6.xyz);
    u_xlat6.xyz = u_xlat1.xyz + u_xlat7.xyz;
    u_xlat6.w = u_xlat16.x * _HeightScale + u_xlat6.y;
    u_xlat1.xyz = u_xlat5.xyz + u_xlat6.xwz;
    u_xlat1.xyz = vec3(u_xlat24) * vec3(-0.5, 0.0, -0.5) + u_xlat1.xyz;
    u_xlat4.xz = u_xlat4.yy * (-u_xlat4.yy);
    u_xlat1.xyz = u_xlat4.xyz * u_xlat7.xyz + u_xlat1.xyz;
    u_xlat4.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat5 = u_xlat4.yyyy * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat5 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat4.xxxx + u_xlat5;
    u_xlat4 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat4.zzzz + u_xlat5;
    gl_Position = u_xlat4 + hlslcc_mtx4x4unity_MatrixVPZero[3];
    u_xlat3.y = 0.0;
    vs_TEXCOORD0.xyz = u_xlat3.xyz + vec3(-1.0, 0.0, -1.0);
    vs_TEXCOORD0.w = 0.0;
    u_xlat0.xy = u_xlat0.yx / u_xlat2.xx;
    u_xlat16.xy = u_xlat10.yx / u_xlat2.xx;
    u_xlat0.xy = u_xlat0.xy + u_xlat16.xy;
    u_xlat0.yz = u_xlat0.xy + vec2(-1.0, -1.0);
    u_xlat24 = dot(u_xlat0.yz, u_xlat0.yz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat0.x = 0.0;
    u_xlat0.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    u_xlat2.xyz = in_NORMAL0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_NORMAL0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_NORMAL0.zzz + u_xlat2.xyz;
    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat0.xyz * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat0.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat0.xyz * u_xlat2.xyz;
    u_xlat0.xyz = u_xlat2.zxy * u_xlat0.yzx + (-u_xlat3.xyz);
    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
    u_xlat24 = dot(u_xlat1.xyz, u_xlat0.xyz);
#ifdef UNITY_ADRENO_ES3
    { bool cond = 0.0<u_xlat24; u_xlati1 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati1 = int((0.0<u_xlat24) ? 0xFFFFFFFFu : uint(0u));
#endif
#ifdef UNITY_ADRENO_ES3
    { bool cond = u_xlat24<0.0; u_xlati24 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati24 = int((u_xlat24<0.0) ? 0xFFFFFFFFu : uint(0u));
#endif
    u_xlati24 = (-u_xlati1) + u_xlati24;
    u_xlat24 = float(u_xlati24);
    vs_TEXCOORD1.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    vs_TEXCOORD1.w = 0.0;
    u_xlat0.x = u_xlat25 / _RootColorScale;
    u_xlat0.x = u_xlat0.x + _RootColorOffset;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xxx * vec3(-0.501960814, 0.0, 0.0) + vec3(0.501960814, 0.0, 0.0);
    u_xlat24 = u_xlat25 + -0.600000024;
    vs_TEXCOORD3 = u_xlat25;
    u_xlat24 = max(u_xlat24, 0.0);
    u_xlat24 = _GrassTipLighting * u_xlat24 + 1.0;
    vs_TEXCOORD2.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    vs_TEXCOORD2.w = 0.0;
    vs_TEXCOORD4.xy = in_TEXCOORD2.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	float _GrassShininess;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	float _CutOff;
uniform 	vec4 _BurnedColor;
uniform lowp sampler2D _MainTex;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp float vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec4 u_xlat0;
lowp vec4 u_xlat10_0;
bool u_xlatb0;
vec3 u_xlat1;
mediump float u_xlat16_2;
float u_xlat9;
bool u_xlatb9;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD4.xy);
    u_xlat9 = u_xlat10_0.w + (-_CutOff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(u_xlat9<0.0);
#else
    u_xlatb9 = u_xlat9<0.0;
#endif
    if((int(u_xlatb9) * int(0xffffffffu))!=0){discard;}
    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
    SV_Target0.xyz = u_xlat1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0;
    u_xlat1.xyz = _BurnedColor.xyz * u_xlat10_0.xyz + (-u_xlat10_0.xyz);
    u_xlat0.xyz = vs_TEXCOORD2.www * u_xlat1.xyz + u_xlat10_0.xyz;
    u_xlat0.w = vs_TEXCOORD3;
    SV_Target1 = u_xlat0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_2 = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb0) ? u_xlat16_2 : 0.0399999991;
    u_xlat0.x = (-vs_TEXCOORD2.w) + 1.0;
    u_xlat0.x = u_xlat0.x * _GrassShininess;
    SV_Target2.w = u_xlat0.x;
    SV_Target2.xy = vec2(0.0399999991, 0.0399999991);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_HDR_ON" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "MHY_SHADER_MIDDLE" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	int unity_BaseInstanceID;
uniform 	float _NoiseScale;
uniform 	vec4 _WorldOffsetRange;
uniform 	float _HeightScale;
uniform 	float _Billboard;
uniform 	float _VegetationMoveScale;
uniform 	vec4 _LocalWindsMapSize;
uniform 	vec4 _LargeWindParam;
uniform 	vec4 _GlobalWind;
uniform 	vec4 _LocalWindsMapCameraInfo;
uniform 	float _GrassTipLighting;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BurnedColor;
uniform 	float _RootColorScale;
uniform 	float _RootColorOffset;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _Heightmap;
uniform lowp sampler2D _Noisemap;
uniform lowp sampler2D _LocalWindsMap;
in highp vec4 in_POSITION0;
in highp vec4 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec2 in_TEXCOORD2;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp float vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec3 u_xlat0;
int u_xlati0;
vec3 u_xlat1;
uvec3 u_xlatu1;
vec4 u_xlat2;
uvec3 u_xlatu2;
vec3 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
uvec2 u_xlatu5;
vec4 u_xlat6;
vec3 u_xlat7;
vec2 u_xlat8;
float u_xlat9;
int u_xlati9;
float u_xlat11;
uint u_xlatu11;
int u_xlati18;
float u_xlat20;
vec2 u_xlat23;
float u_xlat27;
bool u_xlatb27;
float u_xlat28;
uint u_xlatu28;
bool u_xlatb28;
float u_xlat29;
bool u_xlatb29;
float u_xlat30;
void main()
{
    u_xlat0.z = 0.0;
    u_xlati9 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati9 = u_xlati9 << 2;
    u_xlat1.xyz = in_TEXCOORD0.yyy * unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_TEXCOORD0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat2.xy = u_xlat1.xz + (-_LocalWindsMapSize.xy);
    u_xlat2.xy = vec2(u_xlat2.x / _LocalWindsMapSize.z, u_xlat2.y / _LocalWindsMapSize.w);
    u_xlat2.xy = u_xlat2.xy + vec2(0.5, 0.5);
    u_xlat2 = textureLod(_LocalWindsMap, u_xlat2.xy, 0.0);
    u_xlat27 = dot(u_xlat2.xy, u_xlat2.xy);
    u_xlat27 = sqrt(u_xlat27);
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(9.99999975e-05>=u_xlat27);
#else
    u_xlatb27 = 9.99999975e-05>=u_xlat27;
#endif
    u_xlat27 = u_xlatb27 ? 1.0 : float(0.0);
    u_xlat3.xy = (-u_xlat2.xy) + vec2(0.5, 0.5);
    u_xlat2.xy = vec2(u_xlat27) * u_xlat3.xy + u_xlat2.xy;
    u_xlat2.xy = u_xlat2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat27 = dot(u_xlat2.xy, u_xlat2.xy);
    u_xlat27 = max(u_xlat27, 0.00100000005);
    u_xlat3.x = inversesqrt(u_xlat27);
    u_xlat3.yz = u_xlat2.xy * u_xlat3.xx;
    u_xlat0.x = u_xlat3.z;
    u_xlat0.xz = (-u_xlat3.xy) * vec2(0.0, 1.0) + u_xlat0.xz;
    u_xlat27 = (-in_TEXCOORD1.x) + unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].x;
    u_xlat28 = u_xlat27 * 3.0;
    u_xlat28 = _Time.y * 3.0 + u_xlat28;
    u_xlat28 = u_xlat28 + 0.5;
    u_xlat28 = fract(u_xlat28);
    u_xlat28 = u_xlat28 * 2.0 + -1.0;
    u_xlat3.x = abs(u_xlat28) * abs(u_xlat28);
    u_xlat28 = -abs(u_xlat28) * 2.0 + 3.0;
    u_xlat28 = u_xlat28 * u_xlat3.x;
    u_xlat3.x = u_xlat2.z * 1.5;
    u_xlat28 = u_xlat28 * u_xlat3.x;
    u_xlat0.xz = u_xlat0.xz * vec2(u_xlat28);
    u_xlat0.xz = u_xlat0.xz * vec2(0.150000006, 0.150000006);
    u_xlat0.xz = u_xlat3.yz * vec2(u_xlat28) + u_xlat0.xz;
    u_xlat0.xz = u_xlat0.xz + u_xlat2.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlatb28 = !!(0.00199999986<u_xlat2.z);
#else
    u_xlatb28 = 0.00199999986<u_xlat2.z;
#endif
    u_xlat20 = (-u_xlat2.w) * _LocalWindsMapCameraInfo.y + _LocalWindsMapCameraInfo.x;
    u_xlat0.xz = (bool(u_xlatb28)) ? u_xlat0.xz : u_xlat2.xy;
    u_xlat2.xy = vec2(_WorldOffsetRange.z + float(2.0), _WorldOffsetRange.w + float(2.0));
    u_xlat3.xy = u_xlat1.xz + (-_WorldOffsetRange.xy);
    u_xlat3.xy = u_xlat3.xy + vec2(1.0, 1.0);
    u_xlat2.xy = u_xlat3.xy / u_xlat2.xy;
    u_xlat28 = textureLod(_Heightmap, u_xlat2.xy, 0.0).x;
    u_xlat2.x = u_xlat28 * _HeightScale + u_xlat1.y;
    u_xlat2.x = (-u_xlat2.x) + u_xlat20;
    u_xlat2.x = u_xlat2.x * 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat2.x = (-u_xlat2.x) + 1.0;
    u_xlat11 = float(floatBitsToUint(unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2]).w);
    u_xlat11 = u_xlat11 * 5.96046448e-08;
    u_xlatu11 = uint(u_xlat11);
    u_xlatu11 = u_xlatu11 & 3u;
    u_xlat11 = float(u_xlatu11);
    u_xlat20 = fract(u_xlat27);
    u_xlat27 = u_xlat27 + unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].y;
    u_xlat3.xy = vec2(u_xlat27) * vec2(22.0, 33.0);
    u_xlat3.xy = fract(u_xlat3.xy);
    u_xlat3.xy = u_xlat3.xy + vec2(-0.5, -0.5);
    u_xlat3.xz = u_xlat3.xy * vec2(0.200000003, 0.200000003);
    u_xlat27 = u_xlat11 + u_xlat20;
    u_xlat27 = u_xlat27 + -0.5;
    u_xlat11 = u_xlat27 * 0.333000004;
    u_xlat4.y = u_xlat27 * 0.333000004 + -1.0;
    u_xlat27 = in_TEXCOORD1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
    u_xlat11 = u_xlat11 * u_xlat27;
    u_xlat2.x = u_xlat11 * u_xlat2.x;
    u_xlat0.xz = u_xlat0.xz * u_xlat2.xx;
    u_xlat0.xz = u_xlat0.xz * vec2(vec2(_VegetationMoveScale, _VegetationMoveScale));
    u_xlat2.x = dot(_GlobalWind.xyz, _GlobalWind.xyz);
    u_xlat2.x = max(u_xlat2.x, 0.00100000005);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat5 = u_xlat2.xxxx * _GlobalWind.xzxz;
    u_xlat2.xz = vec2(u_xlat5.z * _LargeWindParam.z, u_xlat5.w * _LargeWindParam.z);
    u_xlat23.xy = u_xlat1.xz / vec2(_NoiseScale);
    u_xlat5.xy = _LargeWindParam.xx * u_xlat5.xy + u_xlat23.xy;
    u_xlat5.xy = textureLod(_Noisemap, u_xlat5.xy, 0.0).xy;
    u_xlat5.xy = u_xlat5.xy + vec2(-0.5, -0.5);
    u_xlat5.xy = u_xlat5.xy * _LargeWindParam.yy + vec2(0.5, 0.5);
    u_xlat5.xy = vec2(u_xlat11) * u_xlat5.xy;
    u_xlat6.xz = u_xlat5.xy * u_xlat2.xz + u_xlat0.xz;
    u_xlat2.xz = u_xlat2.xz * u_xlat5.xy;
    u_xlat6.y = 0.0;
    u_xlat5.y = hlslcc_mtx4x4unity_MatrixV[0].x;
    u_xlat5.x = hlslcc_mtx4x4unity_MatrixV[2].x;
    u_xlat29 = dot(u_xlat5.xy, u_xlat5.xy);
    u_xlat29 = inversesqrt(u_xlat29);
    u_xlat5.xy = vec2(u_xlat29) * u_xlat5.xy;
    u_xlat7.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat7.xyz = unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat7.xyz;
    u_xlat7.xyz = unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat7.xyz;
    u_xlat7.xyz = u_xlat7.xyz + unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat7.xyz = (-u_xlat1.xyz) + u_xlat7.xyz;
    u_xlat8.x = unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].x;
    u_xlat8.y = unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].x;
    u_xlat29 = dot(u_xlat8.xy, u_xlat8.xy);
    u_xlat29 = inversesqrt(u_xlat29);
    u_xlat23.xy = vec2(u_xlat29) * u_xlat8.xy;
    u_xlat29 = u_xlat23.y * u_xlat7.z;
    u_xlat29 = u_xlat7.x * u_xlat23.x + (-u_xlat29);
    u_xlat30 = dot(u_xlat7.zx, u_xlat23.xy);
    u_xlat23.xy = u_xlat5.xy * vec2(u_xlat30);
    u_xlat30 = u_xlat29 * u_xlat5.y + (-u_xlat23.x);
    u_xlat29 = u_xlat29 * u_xlat5.x + u_xlat23.y;
    u_xlat29 = u_xlat7.z + u_xlat29;
    u_xlat7.z = (-u_xlat29) * _Billboard + u_xlat7.z;
    u_xlat29 = u_xlat7.x + u_xlat30;
    u_xlat7.x = (-u_xlat29) * _Billboard + u_xlat7.x;
    u_xlat5.xyz = u_xlat7.xyz * vec3(0.100000001, 1.0, 0.100000001) + u_xlat6.xyz;
    u_xlat29 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat29 = max(u_xlat29, 0.00100000005);
    u_xlat29 = inversesqrt(u_xlat29);
    u_xlat5.xyz = vec3(u_xlat29) * u_xlat5.xyz;
    u_xlat29 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat29 = sqrt(u_xlat29);
    u_xlat6.xyz = u_xlat7.xyz * vec3(0.100000001, 1.0, 0.100000001);
    u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat29) + (-u_xlat6.xyz);
    u_xlat6.xyz = u_xlat1.xyz + u_xlat7.xyz;
    u_xlat6.w = u_xlat28 * _HeightScale + u_xlat6.y;
    u_xlat1.xyz = u_xlat5.xyz + u_xlat6.xwz;
    u_xlatu5.xy = uvec2(65280u, 255u) & floatBitsToUint(unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1]).ww;
    u_xlat5.xy = vec2(u_xlatu5.xy);
    u_xlat28 = u_xlat5.x * 0.00390625;
    u_xlat5.z = u_xlat5.y + -127.0;
    u_xlatu28 = uint(u_xlat28);
    u_xlat28 = float(u_xlatu28);
    u_xlat5.x = u_xlat28 + -127.0;
    u_xlat6.xy = u_xlat5.xz * vec2(0.00787401572, 0.00787401572);
    u_xlat6.xy = u_xlat6.xy * u_xlat6.xy;
    u_xlat28 = u_xlat6.y + u_xlat6.x;
    u_xlat28 = (-u_xlat28) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb29 = !!(0.0<u_xlat28);
#else
    u_xlatb29 = 0.0<u_xlat28;
#endif
    u_xlat28 = sqrt(u_xlat28);
    u_xlat5.y = u_xlatb29 ? u_xlat28 : float(0.0);
    u_xlat6.xyz = u_xlat5.xyz * u_xlat7.yyy;
    u_xlat6.xyz = vec3(u_xlat11) * u_xlat6.xyz;
    u_xlat28 = max(u_xlat11, 9.99999972e-10);
    u_xlat1.xyz = u_xlat6.xyz * vec3(0.00393700786, 0.0, 0.00393700786) + u_xlat1.xyz;
    u_xlat4.xz = u_xlat4.yy * (-u_xlat4.yy);
    u_xlat1.xyz = u_xlat4.xyz * u_xlat7.xyz + u_xlat1.xyz;
    u_xlat4.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat6 = u_xlat4.yyyy * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat6 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat4.xxxx + u_xlat6;
    u_xlat4 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat4.zzzz + u_xlat6;
    gl_Position = u_xlat4 + hlslcc_mtx4x4unity_MatrixVPZero[3];
    u_xlat3.y = 0.0;
    vs_TEXCOORD0.xyz = u_xlat5.xyz * vec3(0.00787401572, 1.0, 0.00787401572) + u_xlat3.xyz;
    vs_TEXCOORD0.w = 0.0;
    u_xlat0.xz = u_xlat0.zx / vec2(u_xlat28);
    u_xlat2.xy = u_xlat2.zx / vec2(u_xlat28);
    u_xlat2.yz = u_xlat0.xz + u_xlat2.xy;
    u_xlat2.x = 0.0;
    u_xlat2.xyz = u_xlat5.yzx * vec3(1.0, 0.00787401572, 0.00787401572) + u_xlat2.xyz;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat3.xyz = in_NORMAL0.yyy * unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_NORMAL0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_NORMAL0.zzz + u_xlat3.xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
    u_xlat3.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
    u_xlat2.xyz = u_xlat3.zxy * u_xlat2.yzx + (-u_xlat4.xyz);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
    { bool cond = 0.0<u_xlat0.x; u_xlati18 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati18 = int((0.0<u_xlat0.x) ? 0xFFFFFFFFu : uint(0u));
#endif
#ifdef UNITY_ADRENO_ES3
    { bool cond = u_xlat0.x<0.0; u_xlati0 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati0 = int((u_xlat0.x<0.0) ? 0xFFFFFFFFu : uint(0u));
#endif
    u_xlati0 = (-u_xlati18) + u_xlati0;
    u_xlat0.x = float(u_xlati0);
    vs_TEXCOORD1.xyz = u_xlat0.xxx * u_xlat2.xyz;
    vs_TEXCOORD1.w = 0.0;
    u_xlatu1.xyz = uvec3(16711680u, 65280u, 255u) & floatBitsToUint(unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2]).www;
    u_xlat1.xyz = vec3(u_xlatu1.xyz);
    u_xlatu2.xyz = uvec3(16711680u, 65280u, 255u) & floatBitsToUint(unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3]).www;
    u_xlat0.x = max(1.0, unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].w);
    u_xlat0.x = min(u_xlat0.x, 2.0);
    u_xlat0.x = u_xlat0.x + -1.0;
    u_xlat2.xyz = vec3(u_xlatu2.xyz);
    u_xlat2.xyz = u_xlat2.xyz * vec3(5.9838392e-08, 1.53186284e-05, 0.00392156886);
    u_xlat1.xyz = u_xlat1.xyz * vec3(5.9838392e-08, 1.53186284e-05, 0.00392156886) + (-u_xlat2.xyz);
    u_xlat9 = u_xlat27 / _RootColorScale;
    u_xlat9 = u_xlat9 + _RootColorOffset;
#ifdef UNITY_ADRENO_ES3
    u_xlat9 = min(max(u_xlat9, 0.0), 1.0);
#else
    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz + u_xlat2.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _BurnedColor.xyz;
    u_xlat1.xyz = u_xlat0.xxx * u_xlat2.xyz + u_xlat1.xyz;
    vs_TEXCOORD2.w = u_xlat0.x;
    u_xlat0.x = u_xlat27 + -0.600000024;
    vs_TEXCOORD3 = u_xlat27;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = _GrassTipLighting * u_xlat0.x + 1.0;
    vs_TEXCOORD2.xyz = u_xlat0.xxx * u_xlat1.xyz;
    vs_TEXCOORD4.xy = in_TEXCOORD2.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	float _GrassShininess;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	float _CutOff;
uniform 	vec4 _BurnedColor;
uniform lowp sampler2D _MainTex;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp float vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec4 u_xlat0;
lowp vec4 u_xlat10_0;
bool u_xlatb0;
vec3 u_xlat1;
mediump float u_xlat16_2;
float u_xlat9;
bool u_xlatb9;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD4.xy);
    u_xlat9 = u_xlat10_0.w + (-_CutOff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(u_xlat9<0.0);
#else
    u_xlatb9 = u_xlat9<0.0;
#endif
    if((int(u_xlatb9) * int(0xffffffffu))!=0){discard;}
    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
    SV_Target0.xyz = u_xlat1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0;
    u_xlat1.xyz = _BurnedColor.xyz * u_xlat10_0.xyz + (-u_xlat10_0.xyz);
    u_xlat0.xyz = vs_TEXCOORD2.www * u_xlat1.xyz + u_xlat10_0.xyz;
    u_xlat0.w = vs_TEXCOORD3;
    SV_Target1 = u_xlat0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_2 = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb0) ? u_xlat16_2 : 0.0399999991;
    u_xlat0.x = (-vs_TEXCOORD2.w) + 1.0;
    u_xlat0.x = u_xlat0.x * _GrassShininess;
    SV_Target2.w = u_xlat0.x;
    SV_Target2.xy = vec2(0.0399999991, 0.0399999991);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_HDR_ON" "UNITY_DEBUG_VIEW_ON" "MHY_SHADER_MIDDLE" "DITHER_FADE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	float _NoiseScale;
uniform 	vec4 _WorldOffsetRange;
uniform 	float _HeightScale;
uniform 	float _Billboard;
uniform 	float _VegetationMoveScale;
uniform 	vec4 _LocalWindsMapSize;
uniform 	vec4 _LargeWindParam;
uniform 	vec4 _GlobalWind;
uniform 	vec4 _LocalWindsMapCameraInfo;
uniform 	float _GrassTipLighting;
uniform 	vec4 _MainTex_ST;
uniform 	float _RootColorScale;
uniform 	float _RootColorOffset;
uniform highp sampler2D _Heightmap;
uniform lowp sampler2D _Noisemap;
uniform lowp sampler2D _LocalWindsMap;
in highp vec4 in_POSITION0;
in highp vec4 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec2 in_TEXCOORD2;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp float vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec3 u_xlat0;
vec3 u_xlat1;
int u_xlati1;
vec4 u_xlat2;
bool u_xlatb2;
vec3 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
vec4 u_xlat6;
vec3 u_xlat7;
vec3 u_xlat8;
bool u_xlatb8;
vec2 u_xlat10;
vec2 u_xlat16;
vec2 u_xlat21;
float u_xlat24;
int u_xlati24;
float u_xlat25;
float u_xlat26;
void main()
{
    u_xlat0.z = 0.0;
    u_xlat1.xyz = in_TEXCOORD0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[2].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TEXCOORD0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat8.xz = u_xlat1.xz + (-_LocalWindsMapSize.xy);
    u_xlat8.xz = vec2(u_xlat8.x / _LocalWindsMapSize.z, u_xlat8.z / _LocalWindsMapSize.w);
    u_xlat8.xz = u_xlat8.xz + vec2(0.5, 0.5);
    u_xlat2 = textureLod(_LocalWindsMap, u_xlat8.xz, 0.0);
    u_xlat8.x = dot(u_xlat2.xy, u_xlat2.xy);
    u_xlat8.x = sqrt(u_xlat8.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(9.99999975e-05>=u_xlat8.x);
#else
    u_xlatb8 = 9.99999975e-05>=u_xlat8.x;
#endif
    u_xlat8.x = u_xlatb8 ? 1.0 : float(0.0);
    u_xlat3.xy = (-u_xlat2.xy) + vec2(0.5, 0.5);
    u_xlat8.xz = u_xlat8.xx * u_xlat3.xy + u_xlat2.xy;
    u_xlat8.xz = u_xlat8.xz * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat25 = dot(u_xlat8.xz, u_xlat8.xz);
    u_xlat25 = max(u_xlat25, 0.00100000005);
    u_xlat3.x = inversesqrt(u_xlat25);
    u_xlat3.yz = u_xlat8.xz * u_xlat3.xx;
    u_xlat0.x = u_xlat3.z;
    u_xlat0.xz = (-u_xlat3.xy) * vec2(0.0, 1.0) + u_xlat0.xz;
    u_xlat25 = (-in_TEXCOORD1.x) + hlslcc_mtx4x4unity_ObjectToWorld[1].x;
    u_xlat2.x = u_xlat25 * 3.0;
    u_xlat2.x = _Time.y * 3.0 + u_xlat2.x;
    u_xlat2.x = u_xlat2.x + 0.5;
    u_xlat2.x = fract(u_xlat2.x);
    u_xlat2.x = u_xlat2.x * 2.0 + -1.0;
    u_xlat10.x = abs(u_xlat2.x) * abs(u_xlat2.x);
    u_xlat2.x = -abs(u_xlat2.x) * 2.0 + 3.0;
    u_xlat2.x = u_xlat2.x * u_xlat10.x;
    u_xlat10.x = u_xlat2.z * 1.5;
    u_xlat2.x = u_xlat10.x * u_xlat2.x;
    u_xlat0.xz = u_xlat0.xz * u_xlat2.xx;
    u_xlat0.xz = u_xlat0.xz * vec2(0.150000006, 0.150000006);
    u_xlat0.xz = u_xlat3.yz * u_xlat2.xx + u_xlat0.xz;
    u_xlat0.xz = u_xlat0.xz + u_xlat8.xz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(0.00199999986<u_xlat2.z);
#else
    u_xlatb2 = 0.00199999986<u_xlat2.z;
#endif
    u_xlat10.x = (-u_xlat2.w) * _LocalWindsMapCameraInfo.y + _LocalWindsMapCameraInfo.x;
    u_xlat0.xy = (bool(u_xlatb2)) ? u_xlat0.xz : u_xlat8.xz;
    u_xlat16.xy = vec2(_WorldOffsetRange.z + float(2.0), _WorldOffsetRange.w + float(2.0));
    u_xlat2.xz = u_xlat1.xz + (-_WorldOffsetRange.xy);
    u_xlat2.xz = u_xlat2.xz + vec2(1.0, 1.0);
    u_xlat16.xy = u_xlat2.xz / u_xlat16.xy;
    u_xlat16.x = textureLod(_Heightmap, u_xlat16.xy, 0.0).x;
    u_xlat24 = u_xlat16.x * _HeightScale + u_xlat1.y;
    u_xlat24 = (-u_xlat24) + u_xlat10.x;
    u_xlat24 = u_xlat24 * 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat24 = (-u_xlat24) + 1.0;
    u_xlat2.x = fract(u_xlat25);
    u_xlat25 = u_xlat25 + hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat10.xy = vec2(u_xlat25) * vec2(22.0, 33.0);
    u_xlat10.xy = fract(u_xlat10.xy);
    u_xlat10.xy = u_xlat10.xy + vec2(-0.5, -0.5);
    u_xlat3.xz = u_xlat10.xy * vec2(0.200000003, 0.200000003);
    u_xlat25 = u_xlat2.x + -0.5;
    u_xlat2.x = u_xlat25 * 0.333000004;
    u_xlat4.y = u_xlat25 * 0.333000004 + -1.0;
    u_xlat25 = in_TEXCOORD1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat25 = min(max(u_xlat25, 0.0), 1.0);
#else
    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
#endif
    u_xlat2.x = u_xlat2.x * u_xlat25;
    u_xlat24 = u_xlat24 * u_xlat2.x;
    u_xlat0.xy = vec2(u_xlat24) * u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(vec2(_VegetationMoveScale, _VegetationMoveScale));
    u_xlat24 = dot(_GlobalWind.xyz, _GlobalWind.xyz);
    u_xlat24 = max(u_xlat24, 0.00100000005);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat5 = vec4(u_xlat24) * _GlobalWind.xzxz;
    u_xlat10.xy = vec2(u_xlat5.z * _LargeWindParam.z, u_xlat5.w * _LargeWindParam.z);
    u_xlat21.xy = u_xlat1.xz / vec2(_NoiseScale);
    u_xlat5.xy = _LargeWindParam.xx * u_xlat5.xy + u_xlat21.xy;
    u_xlat5.xy = textureLod(_Noisemap, u_xlat5.xy, 0.0).xy;
    u_xlat5.xy = u_xlat5.xy + vec2(-0.5, -0.5);
    u_xlat5.xy = u_xlat5.xy * _LargeWindParam.yy + vec2(0.5, 0.5);
    u_xlat5.xy = u_xlat2.xx * u_xlat5.xy;
    u_xlat6.xz = u_xlat5.xy * u_xlat10.xy + u_xlat0.xy;
    u_xlat10.xy = u_xlat10.xy * u_xlat5.xy;
    u_xlat6.y = 0.0;
    u_xlat5.y = hlslcc_mtx4x4unity_MatrixV[0].x;
    u_xlat5.x = hlslcc_mtx4x4unity_MatrixV[2].x;
    u_xlat24 = dot(u_xlat5.xy, u_xlat5.xy);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat5.xy = vec2(u_xlat24) * u_xlat5.xy;
    u_xlat7.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;
    u_xlat7.y = hlslcc_mtx4x4unity_ObjectToWorld[2].x;
    u_xlat24 = dot(u_xlat7.xy, u_xlat7.xy);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat21.xy = vec2(u_xlat24) * u_xlat7.xy;
    u_xlat7.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat7.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat7.xyz;
    u_xlat7.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat7.xyz;
    u_xlat7.xyz = u_xlat7.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat7.xyz = (-u_xlat1.xyz) + u_xlat7.xyz;
    u_xlat24 = u_xlat21.y * u_xlat7.z;
    u_xlat24 = u_xlat7.x * u_xlat21.x + (-u_xlat24);
    u_xlat26 = dot(u_xlat7.zx, u_xlat21.xy);
    u_xlat21.xy = u_xlat5.xy * vec2(u_xlat26);
    u_xlat26 = u_xlat24 * u_xlat5.y + (-u_xlat21.x);
    u_xlat24 = u_xlat24 * u_xlat5.x + u_xlat21.y;
    u_xlat24 = u_xlat7.z + u_xlat24;
    u_xlat7.z = (-u_xlat24) * _Billboard + u_xlat7.z;
    u_xlat24 = u_xlat7.x + u_xlat26;
    u_xlat7.x = (-u_xlat24) * _Billboard + u_xlat7.x;
    u_xlat24 = u_xlat2.x * u_xlat7.y;
    u_xlat2.x = max(u_xlat2.x, 9.99999972e-10);
    u_xlat5.xyz = u_xlat7.xyz * vec3(0.100000001, 1.0, 0.100000001) + u_xlat6.xyz;
    u_xlat26 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat26 = max(u_xlat26, 0.00100000005);
    u_xlat26 = inversesqrt(u_xlat26);
    u_xlat5.xyz = vec3(u_xlat26) * u_xlat5.xyz;
    u_xlat26 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat26 = sqrt(u_xlat26);
    u_xlat6.xyz = u_xlat7.xyz * vec3(0.100000001, 1.0, 0.100000001);
    u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat26) + (-u_xlat6.xyz);
    u_xlat6.xyz = u_xlat1.xyz + u_xlat7.xyz;
    u_xlat6.w = u_xlat16.x * _HeightScale + u_xlat6.y;
    u_xlat1.xyz = u_xlat5.xyz + u_xlat6.xwz;
    u_xlat1.xyz = vec3(u_xlat24) * vec3(-0.5, 0.0, -0.5) + u_xlat1.xyz;
    u_xlat4.xz = u_xlat4.yy * (-u_xlat4.yy);
    u_xlat1.xyz = u_xlat4.xyz * u_xlat7.xyz + u_xlat1.xyz;
    u_xlat4.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat5 = u_xlat4.yyyy * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat5 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat4.xxxx + u_xlat5;
    u_xlat4 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat4.zzzz + u_xlat5;
    gl_Position = u_xlat4 + hlslcc_mtx4x4unity_MatrixVPZero[3];
    u_xlat3.y = 0.0;
    vs_TEXCOORD0.xyz = u_xlat3.xyz + vec3(-1.0, 0.0, -1.0);
    vs_TEXCOORD0.w = 0.0;
    u_xlat0.xy = u_xlat0.yx / u_xlat2.xx;
    u_xlat16.xy = u_xlat10.yx / u_xlat2.xx;
    u_xlat0.xy = u_xlat0.xy + u_xlat16.xy;
    u_xlat0.yz = u_xlat0.xy + vec2(-1.0, -1.0);
    u_xlat24 = dot(u_xlat0.yz, u_xlat0.yz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat0.x = 0.0;
    u_xlat0.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    u_xlat2.xyz = in_NORMAL0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_NORMAL0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_NORMAL0.zzz + u_xlat2.xyz;
    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat0.xyz * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat0.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat0.xyz * u_xlat2.xyz;
    u_xlat0.xyz = u_xlat2.zxy * u_xlat0.yzx + (-u_xlat3.xyz);
    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
    u_xlat24 = dot(u_xlat1.xyz, u_xlat0.xyz);
#ifdef UNITY_ADRENO_ES3
    { bool cond = 0.0<u_xlat24; u_xlati1 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati1 = int((0.0<u_xlat24) ? 0xFFFFFFFFu : uint(0u));
#endif
#ifdef UNITY_ADRENO_ES3
    { bool cond = u_xlat24<0.0; u_xlati24 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati24 = int((u_xlat24<0.0) ? 0xFFFFFFFFu : uint(0u));
#endif
    u_xlati24 = (-u_xlati1) + u_xlati24;
    u_xlat24 = float(u_xlati24);
    vs_TEXCOORD1.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    vs_TEXCOORD1.w = 0.0;
    u_xlat0.x = u_xlat25 / _RootColorScale;
    u_xlat0.x = u_xlat0.x + _RootColorOffset;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xxx * vec3(-0.501960814, 0.0, 0.0) + vec3(0.501960814, 0.0, 0.0);
    u_xlat24 = u_xlat25 + -0.600000024;
    vs_TEXCOORD3 = u_xlat25;
    u_xlat24 = max(u_xlat24, 0.0);
    u_xlat24 = _GrassTipLighting * u_xlat24 + 1.0;
    vs_TEXCOORD2.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    vs_TEXCOORD2.w = 0.0;
    vs_TEXCOORD4.xy = in_TEXCOORD2.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	float _GrassShininess;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	float _CutOff;
uniform 	vec4 _BurnedColor;
uniform lowp sampler2D _MainTex;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp float vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec4 u_xlat0;
lowp vec4 u_xlat10_0;
bool u_xlatb0;
vec3 u_xlat1;
mediump float u_xlat16_2;
float u_xlat9;
bool u_xlatb9;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD4.xy);
    u_xlat9 = u_xlat10_0.w + (-_CutOff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(u_xlat9<0.0);
#else
    u_xlatb9 = u_xlat9<0.0;
#endif
    if((int(u_xlatb9) * int(0xffffffffu))!=0){discard;}
    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
    SV_Target0.xyz = u_xlat1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0;
    u_xlat1.xyz = _BurnedColor.xyz * u_xlat10_0.xyz + (-u_xlat10_0.xyz);
    u_xlat0.xyz = vs_TEXCOORD2.www * u_xlat1.xyz + u_xlat10_0.xyz;
    u_xlat0.w = vs_TEXCOORD3;
    SV_Target1 = u_xlat0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_2 = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb0) ? u_xlat16_2 : 0.0399999991;
    u_xlat0.x = (-vs_TEXCOORD2.w) + 1.0;
    u_xlat0.x = u_xlat0.x * _GrassShininess;
    SV_Target2.w = u_xlat0.x;
    SV_Target2.xy = vec2(0.0399999991, 0.0399999991);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_HDR_ON" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "MHY_SHADER_MIDDLE" "DITHER_FADE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	int unity_BaseInstanceID;
uniform 	float _NoiseScale;
uniform 	vec4 _WorldOffsetRange;
uniform 	float _HeightScale;
uniform 	float _Billboard;
uniform 	float _VegetationMoveScale;
uniform 	vec4 _LocalWindsMapSize;
uniform 	vec4 _LargeWindParam;
uniform 	vec4 _GlobalWind;
uniform 	vec4 _LocalWindsMapCameraInfo;
uniform 	float _GrassTipLighting;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BurnedColor;
uniform 	float _RootColorScale;
uniform 	float _RootColorOffset;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _Heightmap;
uniform lowp sampler2D _Noisemap;
uniform lowp sampler2D _LocalWindsMap;
in highp vec4 in_POSITION0;
in highp vec4 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec2 in_TEXCOORD2;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp float vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec3 u_xlat0;
int u_xlati0;
vec3 u_xlat1;
uvec3 u_xlatu1;
vec4 u_xlat2;
uvec3 u_xlatu2;
vec3 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
uvec2 u_xlatu5;
vec4 u_xlat6;
vec3 u_xlat7;
vec2 u_xlat8;
float u_xlat9;
int u_xlati9;
float u_xlat11;
uint u_xlatu11;
int u_xlati18;
float u_xlat20;
vec2 u_xlat23;
float u_xlat27;
bool u_xlatb27;
float u_xlat28;
uint u_xlatu28;
bool u_xlatb28;
float u_xlat29;
bool u_xlatb29;
float u_xlat30;
void main()
{
    u_xlat0.z = 0.0;
    u_xlati9 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati9 = u_xlati9 << 2;
    u_xlat1.xyz = in_TEXCOORD0.yyy * unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_TEXCOORD0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat2.xy = u_xlat1.xz + (-_LocalWindsMapSize.xy);
    u_xlat2.xy = vec2(u_xlat2.x / _LocalWindsMapSize.z, u_xlat2.y / _LocalWindsMapSize.w);
    u_xlat2.xy = u_xlat2.xy + vec2(0.5, 0.5);
    u_xlat2 = textureLod(_LocalWindsMap, u_xlat2.xy, 0.0);
    u_xlat27 = dot(u_xlat2.xy, u_xlat2.xy);
    u_xlat27 = sqrt(u_xlat27);
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(9.99999975e-05>=u_xlat27);
#else
    u_xlatb27 = 9.99999975e-05>=u_xlat27;
#endif
    u_xlat27 = u_xlatb27 ? 1.0 : float(0.0);
    u_xlat3.xy = (-u_xlat2.xy) + vec2(0.5, 0.5);
    u_xlat2.xy = vec2(u_xlat27) * u_xlat3.xy + u_xlat2.xy;
    u_xlat2.xy = u_xlat2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat27 = dot(u_xlat2.xy, u_xlat2.xy);
    u_xlat27 = max(u_xlat27, 0.00100000005);
    u_xlat3.x = inversesqrt(u_xlat27);
    u_xlat3.yz = u_xlat2.xy * u_xlat3.xx;
    u_xlat0.x = u_xlat3.z;
    u_xlat0.xz = (-u_xlat3.xy) * vec2(0.0, 1.0) + u_xlat0.xz;
    u_xlat27 = (-in_TEXCOORD1.x) + unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].x;
    u_xlat28 = u_xlat27 * 3.0;
    u_xlat28 = _Time.y * 3.0 + u_xlat28;
    u_xlat28 = u_xlat28 + 0.5;
    u_xlat28 = fract(u_xlat28);
    u_xlat28 = u_xlat28 * 2.0 + -1.0;
    u_xlat3.x = abs(u_xlat28) * abs(u_xlat28);
    u_xlat28 = -abs(u_xlat28) * 2.0 + 3.0;
    u_xlat28 = u_xlat28 * u_xlat3.x;
    u_xlat3.x = u_xlat2.z * 1.5;
    u_xlat28 = u_xlat28 * u_xlat3.x;
    u_xlat0.xz = u_xlat0.xz * vec2(u_xlat28);
    u_xlat0.xz = u_xlat0.xz * vec2(0.150000006, 0.150000006);
    u_xlat0.xz = u_xlat3.yz * vec2(u_xlat28) + u_xlat0.xz;
    u_xlat0.xz = u_xlat0.xz + u_xlat2.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlatb28 = !!(0.00199999986<u_xlat2.z);
#else
    u_xlatb28 = 0.00199999986<u_xlat2.z;
#endif
    u_xlat20 = (-u_xlat2.w) * _LocalWindsMapCameraInfo.y + _LocalWindsMapCameraInfo.x;
    u_xlat0.xz = (bool(u_xlatb28)) ? u_xlat0.xz : u_xlat2.xy;
    u_xlat2.xy = vec2(_WorldOffsetRange.z + float(2.0), _WorldOffsetRange.w + float(2.0));
    u_xlat3.xy = u_xlat1.xz + (-_WorldOffsetRange.xy);
    u_xlat3.xy = u_xlat3.xy + vec2(1.0, 1.0);
    u_xlat2.xy = u_xlat3.xy / u_xlat2.xy;
    u_xlat28 = textureLod(_Heightmap, u_xlat2.xy, 0.0).x;
    u_xlat2.x = u_xlat28 * _HeightScale + u_xlat1.y;
    u_xlat2.x = (-u_xlat2.x) + u_xlat20;
    u_xlat2.x = u_xlat2.x * 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat2.x = (-u_xlat2.x) + 1.0;
    u_xlat11 = float(floatBitsToUint(unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2]).w);
    u_xlat11 = u_xlat11 * 5.96046448e-08;
    u_xlatu11 = uint(u_xlat11);
    u_xlatu11 = u_xlatu11 & 3u;
    u_xlat11 = float(u_xlatu11);
    u_xlat20 = fract(u_xlat27);
    u_xlat27 = u_xlat27 + unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].y;
    u_xlat3.xy = vec2(u_xlat27) * vec2(22.0, 33.0);
    u_xlat3.xy = fract(u_xlat3.xy);
    u_xlat3.xy = u_xlat3.xy + vec2(-0.5, -0.5);
    u_xlat3.xz = u_xlat3.xy * vec2(0.200000003, 0.200000003);
    u_xlat27 = u_xlat11 + u_xlat20;
    u_xlat27 = u_xlat27 + -0.5;
    u_xlat11 = u_xlat27 * 0.333000004;
    u_xlat4.y = u_xlat27 * 0.333000004 + -1.0;
    u_xlat27 = in_TEXCOORD1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
    u_xlat11 = u_xlat11 * u_xlat27;
    u_xlat2.x = u_xlat11 * u_xlat2.x;
    u_xlat0.xz = u_xlat0.xz * u_xlat2.xx;
    u_xlat0.xz = u_xlat0.xz * vec2(vec2(_VegetationMoveScale, _VegetationMoveScale));
    u_xlat2.x = dot(_GlobalWind.xyz, _GlobalWind.xyz);
    u_xlat2.x = max(u_xlat2.x, 0.00100000005);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat5 = u_xlat2.xxxx * _GlobalWind.xzxz;
    u_xlat2.xz = vec2(u_xlat5.z * _LargeWindParam.z, u_xlat5.w * _LargeWindParam.z);
    u_xlat23.xy = u_xlat1.xz / vec2(_NoiseScale);
    u_xlat5.xy = _LargeWindParam.xx * u_xlat5.xy + u_xlat23.xy;
    u_xlat5.xy = textureLod(_Noisemap, u_xlat5.xy, 0.0).xy;
    u_xlat5.xy = u_xlat5.xy + vec2(-0.5, -0.5);
    u_xlat5.xy = u_xlat5.xy * _LargeWindParam.yy + vec2(0.5, 0.5);
    u_xlat5.xy = vec2(u_xlat11) * u_xlat5.xy;
    u_xlat6.xz = u_xlat5.xy * u_xlat2.xz + u_xlat0.xz;
    u_xlat2.xz = u_xlat2.xz * u_xlat5.xy;
    u_xlat6.y = 0.0;
    u_xlat5.y = hlslcc_mtx4x4unity_MatrixV[0].x;
    u_xlat5.x = hlslcc_mtx4x4unity_MatrixV[2].x;
    u_xlat29 = dot(u_xlat5.xy, u_xlat5.xy);
    u_xlat29 = inversesqrt(u_xlat29);
    u_xlat5.xy = vec2(u_xlat29) * u_xlat5.xy;
    u_xlat7.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat7.xyz = unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat7.xyz;
    u_xlat7.xyz = unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat7.xyz;
    u_xlat7.xyz = u_xlat7.xyz + unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat7.xyz = (-u_xlat1.xyz) + u_xlat7.xyz;
    u_xlat8.x = unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].x;
    u_xlat8.y = unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].x;
    u_xlat29 = dot(u_xlat8.xy, u_xlat8.xy);
    u_xlat29 = inversesqrt(u_xlat29);
    u_xlat23.xy = vec2(u_xlat29) * u_xlat8.xy;
    u_xlat29 = u_xlat23.y * u_xlat7.z;
    u_xlat29 = u_xlat7.x * u_xlat23.x + (-u_xlat29);
    u_xlat30 = dot(u_xlat7.zx, u_xlat23.xy);
    u_xlat23.xy = u_xlat5.xy * vec2(u_xlat30);
    u_xlat30 = u_xlat29 * u_xlat5.y + (-u_xlat23.x);
    u_xlat29 = u_xlat29 * u_xlat5.x + u_xlat23.y;
    u_xlat29 = u_xlat7.z + u_xlat29;
    u_xlat7.z = (-u_xlat29) * _Billboard + u_xlat7.z;
    u_xlat29 = u_xlat7.x + u_xlat30;
    u_xlat7.x = (-u_xlat29) * _Billboard + u_xlat7.x;
    u_xlat5.xyz = u_xlat7.xyz * vec3(0.100000001, 1.0, 0.100000001) + u_xlat6.xyz;
    u_xlat29 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat29 = max(u_xlat29, 0.00100000005);
    u_xlat29 = inversesqrt(u_xlat29);
    u_xlat5.xyz = vec3(u_xlat29) * u_xlat5.xyz;
    u_xlat29 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat29 = sqrt(u_xlat29);
    u_xlat6.xyz = u_xlat7.xyz * vec3(0.100000001, 1.0, 0.100000001);
    u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat29) + (-u_xlat6.xyz);
    u_xlat6.xyz = u_xlat1.xyz + u_xlat7.xyz;
    u_xlat6.w = u_xlat28 * _HeightScale + u_xlat6.y;
    u_xlat1.xyz = u_xlat5.xyz + u_xlat6.xwz;
    u_xlatu5.xy = uvec2(65280u, 255u) & floatBitsToUint(unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1]).ww;
    u_xlat5.xy = vec2(u_xlatu5.xy);
    u_xlat28 = u_xlat5.x * 0.00390625;
    u_xlat5.z = u_xlat5.y + -127.0;
    u_xlatu28 = uint(u_xlat28);
    u_xlat28 = float(u_xlatu28);
    u_xlat5.x = u_xlat28 + -127.0;
    u_xlat6.xy = u_xlat5.xz * vec2(0.00787401572, 0.00787401572);
    u_xlat6.xy = u_xlat6.xy * u_xlat6.xy;
    u_xlat28 = u_xlat6.y + u_xlat6.x;
    u_xlat28 = (-u_xlat28) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb29 = !!(0.0<u_xlat28);
#else
    u_xlatb29 = 0.0<u_xlat28;
#endif
    u_xlat28 = sqrt(u_xlat28);
    u_xlat5.y = u_xlatb29 ? u_xlat28 : float(0.0);
    u_xlat6.xyz = u_xlat5.xyz * u_xlat7.yyy;
    u_xlat6.xyz = vec3(u_xlat11) * u_xlat6.xyz;
    u_xlat28 = max(u_xlat11, 9.99999972e-10);
    u_xlat1.xyz = u_xlat6.xyz * vec3(0.00393700786, 0.0, 0.00393700786) + u_xlat1.xyz;
    u_xlat4.xz = u_xlat4.yy * (-u_xlat4.yy);
    u_xlat1.xyz = u_xlat4.xyz * u_xlat7.xyz + u_xlat1.xyz;
    u_xlat4.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat6 = u_xlat4.yyyy * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat6 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat4.xxxx + u_xlat6;
    u_xlat4 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat4.zzzz + u_xlat6;
    gl_Position = u_xlat4 + hlslcc_mtx4x4unity_MatrixVPZero[3];
    u_xlat3.y = 0.0;
    vs_TEXCOORD0.xyz = u_xlat5.xyz * vec3(0.00787401572, 1.0, 0.00787401572) + u_xlat3.xyz;
    vs_TEXCOORD0.w = 0.0;
    u_xlat0.xz = u_xlat0.zx / vec2(u_xlat28);
    u_xlat2.xy = u_xlat2.zx / vec2(u_xlat28);
    u_xlat2.yz = u_xlat0.xz + u_xlat2.xy;
    u_xlat2.x = 0.0;
    u_xlat2.xyz = u_xlat5.yzx * vec3(1.0, 0.00787401572, 0.00787401572) + u_xlat2.xyz;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat3.xyz = in_NORMAL0.yyy * unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_NORMAL0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_NORMAL0.zzz + u_xlat3.xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
    u_xlat3.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
    u_xlat2.xyz = u_xlat3.zxy * u_xlat2.yzx + (-u_xlat4.xyz);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
    { bool cond = 0.0<u_xlat0.x; u_xlati18 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati18 = int((0.0<u_xlat0.x) ? 0xFFFFFFFFu : uint(0u));
#endif
#ifdef UNITY_ADRENO_ES3
    { bool cond = u_xlat0.x<0.0; u_xlati0 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati0 = int((u_xlat0.x<0.0) ? 0xFFFFFFFFu : uint(0u));
#endif
    u_xlati0 = (-u_xlati18) + u_xlati0;
    u_xlat0.x = float(u_xlati0);
    vs_TEXCOORD1.xyz = u_xlat0.xxx * u_xlat2.xyz;
    vs_TEXCOORD1.w = 0.0;
    u_xlatu1.xyz = uvec3(16711680u, 65280u, 255u) & floatBitsToUint(unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2]).www;
    u_xlat1.xyz = vec3(u_xlatu1.xyz);
    u_xlatu2.xyz = uvec3(16711680u, 65280u, 255u) & floatBitsToUint(unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3]).www;
    u_xlat0.x = max(1.0, unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].w);
    u_xlat0.x = min(u_xlat0.x, 2.0);
    u_xlat0.x = u_xlat0.x + -1.0;
    u_xlat2.xyz = vec3(u_xlatu2.xyz);
    u_xlat2.xyz = u_xlat2.xyz * vec3(5.9838392e-08, 1.53186284e-05, 0.00392156886);
    u_xlat1.xyz = u_xlat1.xyz * vec3(5.9838392e-08, 1.53186284e-05, 0.00392156886) + (-u_xlat2.xyz);
    u_xlat9 = u_xlat27 / _RootColorScale;
    u_xlat9 = u_xlat9 + _RootColorOffset;
#ifdef UNITY_ADRENO_ES3
    u_xlat9 = min(max(u_xlat9, 0.0), 1.0);
#else
    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz + u_xlat2.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _BurnedColor.xyz;
    u_xlat1.xyz = u_xlat0.xxx * u_xlat2.xyz + u_xlat1.xyz;
    vs_TEXCOORD2.w = u_xlat0.x;
    u_xlat0.x = u_xlat27 + -0.600000024;
    vs_TEXCOORD3 = u_xlat27;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = _GrassTipLighting * u_xlat0.x + 1.0;
    vs_TEXCOORD2.xyz = u_xlat0.xxx * u_xlat1.xyz;
    vs_TEXCOORD4.xy = in_TEXCOORD2.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	float _GrassShininess;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	float _CutOff;
uniform 	vec4 _BurnedColor;
uniform lowp sampler2D _MainTex;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp float vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec4 u_xlat0;
lowp vec4 u_xlat10_0;
bool u_xlatb0;
vec3 u_xlat1;
mediump float u_xlat16_2;
float u_xlat9;
bool u_xlatb9;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD4.xy);
    u_xlat9 = u_xlat10_0.w + (-_CutOff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(u_xlat9<0.0);
#else
    u_xlatb9 = u_xlat9<0.0;
#endif
    if((int(u_xlatb9) * int(0xffffffffu))!=0){discard;}
    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
    SV_Target0.xyz = u_xlat1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0;
    u_xlat1.xyz = _BurnedColor.xyz * u_xlat10_0.xyz + (-u_xlat10_0.xyz);
    u_xlat0.xyz = vs_TEXCOORD2.www * u_xlat1.xyz + u_xlat10_0.xyz;
    u_xlat0.w = vs_TEXCOORD3;
    SV_Target1 = u_xlat0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_2 = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb0) ? u_xlat16_2 : 0.0399999991;
    u_xlat0.x = (-vs_TEXCOORD2.w) + 1.0;
    u_xlat0.x = u_xlat0.x * _GrassShininess;
    SV_Target2.w = u_xlat0.x;
    SV_Target2.xy = vec2(0.0399999991, 0.0399999991);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_HDR_ON" "UNITY_DEBUG_VIEW_ON" "MHY_SHADER_MIDDLE" "SOFT_SAMPLE_HEIGHT_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	float _NoiseScale;
uniform 	vec4 _WorldOffsetRange;
uniform 	float _HeightScale;
uniform 	float _Billboard;
uniform 	float _VegetationMoveScale;
uniform 	vec4 _LocalWindsMapSize;
uniform 	vec4 _LargeWindParam;
uniform 	vec4 _GlobalWind;
uniform 	vec4 _LocalWindsMapCameraInfo;
uniform 	float _GrassTipLighting;
uniform 	vec4 _MainTex_ST;
uniform 	float _RootColorScale;
uniform 	float _RootColorOffset;
uniform highp sampler2D _Heightmap;
uniform lowp sampler2D _Noisemap;
uniform lowp sampler2D _LocalWindsMap;
in highp vec4 in_POSITION0;
in highp vec4 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec2 in_TEXCOORD2;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp float vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec3 u_xlat0;
vec3 u_xlat1;
int u_xlati1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
vec4 u_xlat6;
vec3 u_xlat7;
vec3 u_xlat8;
bool u_xlatb8;
vec2 u_xlat10;
vec2 u_xlat16;
float u_xlat18;
vec2 u_xlat21;
float u_xlat24;
int u_xlati24;
float u_xlat25;
float u_xlat26;
void main()
{
    u_xlat0.z = 0.0;
    u_xlat1.xyz = in_TEXCOORD0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[2].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TEXCOORD0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat8.xz = u_xlat1.xz + (-_LocalWindsMapSize.xy);
    u_xlat8.xz = vec2(u_xlat8.x / _LocalWindsMapSize.z, u_xlat8.z / _LocalWindsMapSize.w);
    u_xlat8.xz = u_xlat8.xz + vec2(0.5, 0.5);
    u_xlat2 = textureLod(_LocalWindsMap, u_xlat8.xz, 0.0);
    u_xlat8.x = dot(u_xlat2.xy, u_xlat2.xy);
    u_xlat8.x = sqrt(u_xlat8.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(9.99999975e-05>=u_xlat8.x);
#else
    u_xlatb8 = 9.99999975e-05>=u_xlat8.x;
#endif
    u_xlat8.x = u_xlatb8 ? 1.0 : float(0.0);
    u_xlat3.xy = (-u_xlat2.xy) + vec2(0.5, 0.5);
    u_xlat8.xz = u_xlat8.xx * u_xlat3.xy + u_xlat2.xy;
    u_xlat8.xz = u_xlat8.xz * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat25 = dot(u_xlat8.xz, u_xlat8.xz);
    u_xlat25 = max(u_xlat25, 0.00100000005);
    u_xlat3.x = inversesqrt(u_xlat25);
    u_xlat3.yz = u_xlat8.xz * u_xlat3.xx;
    u_xlat0.x = u_xlat3.z;
    u_xlat0.xz = (-u_xlat3.xy) * vec2(0.0, 1.0) + u_xlat0.xz;
    u_xlat25 = (-in_TEXCOORD1.x) + hlslcc_mtx4x4unity_ObjectToWorld[1].x;
    u_xlat2.x = u_xlat25 * 3.0;
    u_xlat2.x = _Time.y * 3.0 + u_xlat2.x;
    u_xlat2.x = u_xlat2.x + 0.5;
    u_xlat2.x = fract(u_xlat2.x);
    u_xlat2.x = u_xlat2.x * 2.0 + -1.0;
    u_xlat10.x = abs(u_xlat2.x) * abs(u_xlat2.x);
    u_xlat2.x = -abs(u_xlat2.x) * 2.0 + 3.0;
    u_xlat2.x = u_xlat2.x * u_xlat10.x;
    u_xlat10.x = u_xlat2.z * 1.5;
    u_xlat2.x = u_xlat10.x * u_xlat2.x;
    u_xlat0.xz = u_xlat0.xz * u_xlat2.xx;
    u_xlat0.xz = u_xlat0.xz * vec2(0.150000006, 0.150000006);
    u_xlat0.xz = u_xlat3.yz * u_xlat2.xx + u_xlat0.xz;
    u_xlat0.xz = u_xlat0.xz + u_xlat8.xz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(0.00199999986<u_xlat2.z);
#else
    u_xlatb2 = 0.00199999986<u_xlat2.z;
#endif
    u_xlat10.x = (-u_xlat2.w) * _LocalWindsMapCameraInfo.y + _LocalWindsMapCameraInfo.x;
    u_xlat0.xy = (bool(u_xlatb2)) ? u_xlat0.xz : u_xlat8.xz;
    u_xlat16.xy = vec2(_WorldOffsetRange.z + float(2.0), _WorldOffsetRange.w + float(2.0));
    u_xlat2.xz = u_xlat1.xz + (-_WorldOffsetRange.xy);
    u_xlat2.xz = u_xlat2.xz + vec2(1.0, 1.0);
    u_xlat16.xy = u_xlat2.xz / u_xlat16.xy;
    u_xlat16.xy = u_xlat16.xy * _WorldOffsetRange.zw + vec2(-0.5, -0.5);
    u_xlat2.xz = floor(u_xlat16.xy);
    u_xlat16.xy = u_xlat16.xy + (-u_xlat2.xz);
    u_xlat3 = u_xlat2.xzxz + vec4(0.5, 1.5, 1.5, 1.5);
    u_xlat4 = u_xlat2.xzxz + vec4(1.5, 0.5, 0.5, 0.5);
    u_xlat4 = vec4(u_xlat4.x / _WorldOffsetRange.z, u_xlat4.y / _WorldOffsetRange.w, u_xlat4.z / _WorldOffsetRange.z, u_xlat4.w / _WorldOffsetRange.w);
    u_xlat3 = vec4(u_xlat3.x / _WorldOffsetRange.z, u_xlat3.y / _WorldOffsetRange.w, u_xlat3.z / _WorldOffsetRange.z, u_xlat3.w / _WorldOffsetRange.w);
    u_xlat2.x = textureLod(_Heightmap, u_xlat3.zw, 0.0).x;
    u_xlat18 = textureLod(_Heightmap, u_xlat3.xy, 0.0).x;
    u_xlat2.x = (-u_xlat18) + u_xlat2.x;
    u_xlat2.x = u_xlat16.x * u_xlat2.x + u_xlat18;
    u_xlat18 = textureLod(_Heightmap, u_xlat4.xy, 0.0).x;
    u_xlat26 = textureLod(_Heightmap, u_xlat4.zw, 0.0).x;
    u_xlat18 = (-u_xlat26) + u_xlat18;
    u_xlat16.x = u_xlat16.x * u_xlat18 + u_xlat26;
    u_xlat2.x = (-u_xlat16.x) + u_xlat2.x;
    u_xlat16.x = u_xlat16.y * u_xlat2.x + u_xlat16.x;
    u_xlat24 = u_xlat16.x * _HeightScale + u_xlat1.y;
    u_xlat24 = (-u_xlat24) + u_xlat10.x;
    u_xlat24 = u_xlat24 * 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat24 = (-u_xlat24) + 1.0;
    u_xlat2.x = fract(u_xlat25);
    u_xlat25 = u_xlat25 + hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat10.xy = vec2(u_xlat25) * vec2(22.0, 33.0);
    u_xlat10.xy = fract(u_xlat10.xy);
    u_xlat10.xy = u_xlat10.xy + vec2(-0.5, -0.5);
    u_xlat3.xz = u_xlat10.xy * vec2(0.200000003, 0.200000003);
    u_xlat25 = u_xlat2.x + -0.5;
    u_xlat2.x = u_xlat25 * 0.333000004;
    u_xlat4.y = u_xlat25 * 0.333000004 + -1.0;
    u_xlat25 = in_TEXCOORD1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat25 = min(max(u_xlat25, 0.0), 1.0);
#else
    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
#endif
    u_xlat2.x = u_xlat2.x * u_xlat25;
    u_xlat24 = u_xlat24 * u_xlat2.x;
    u_xlat0.xy = vec2(u_xlat24) * u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(vec2(_VegetationMoveScale, _VegetationMoveScale));
    u_xlat24 = dot(_GlobalWind.xyz, _GlobalWind.xyz);
    u_xlat24 = max(u_xlat24, 0.00100000005);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat5 = vec4(u_xlat24) * _GlobalWind.xzxz;
    u_xlat10.xy = vec2(u_xlat5.z * _LargeWindParam.z, u_xlat5.w * _LargeWindParam.z);
    u_xlat21.xy = u_xlat1.xz / vec2(_NoiseScale);
    u_xlat5.xy = _LargeWindParam.xx * u_xlat5.xy + u_xlat21.xy;
    u_xlat5.xy = textureLod(_Noisemap, u_xlat5.xy, 0.0).xy;
    u_xlat5.xy = u_xlat5.xy + vec2(-0.5, -0.5);
    u_xlat5.xy = u_xlat5.xy * _LargeWindParam.yy + vec2(0.5, 0.5);
    u_xlat5.xy = u_xlat2.xx * u_xlat5.xy;
    u_xlat6.xz = u_xlat5.xy * u_xlat10.xy + u_xlat0.xy;
    u_xlat10.xy = u_xlat10.xy * u_xlat5.xy;
    u_xlat6.y = 0.0;
    u_xlat5.y = hlslcc_mtx4x4unity_MatrixV[0].x;
    u_xlat5.x = hlslcc_mtx4x4unity_MatrixV[2].x;
    u_xlat24 = dot(u_xlat5.xy, u_xlat5.xy);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat5.xy = vec2(u_xlat24) * u_xlat5.xy;
    u_xlat7.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;
    u_xlat7.y = hlslcc_mtx4x4unity_ObjectToWorld[2].x;
    u_xlat24 = dot(u_xlat7.xy, u_xlat7.xy);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat21.xy = vec2(u_xlat24) * u_xlat7.xy;
    u_xlat7.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat7.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat7.xyz;
    u_xlat7.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat7.xyz;
    u_xlat7.xyz = u_xlat7.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat7.xyz = (-u_xlat1.xyz) + u_xlat7.xyz;
    u_xlat24 = u_xlat21.y * u_xlat7.z;
    u_xlat24 = u_xlat7.x * u_xlat21.x + (-u_xlat24);
    u_xlat26 = dot(u_xlat7.zx, u_xlat21.xy);
    u_xlat21.xy = u_xlat5.xy * vec2(u_xlat26);
    u_xlat26 = u_xlat24 * u_xlat5.y + (-u_xlat21.x);
    u_xlat24 = u_xlat24 * u_xlat5.x + u_xlat21.y;
    u_xlat24 = u_xlat7.z + u_xlat24;
    u_xlat7.z = (-u_xlat24) * _Billboard + u_xlat7.z;
    u_xlat24 = u_xlat7.x + u_xlat26;
    u_xlat7.x = (-u_xlat24) * _Billboard + u_xlat7.x;
    u_xlat24 = u_xlat2.x * u_xlat7.y;
    u_xlat2.x = max(u_xlat2.x, 9.99999972e-10);
    u_xlat5.xyz = u_xlat7.xyz * vec3(0.100000001, 1.0, 0.100000001) + u_xlat6.xyz;
    u_xlat26 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat26 = max(u_xlat26, 0.00100000005);
    u_xlat26 = inversesqrt(u_xlat26);
    u_xlat5.xyz = vec3(u_xlat26) * u_xlat5.xyz;
    u_xlat26 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat26 = sqrt(u_xlat26);
    u_xlat6.xyz = u_xlat7.xyz * vec3(0.100000001, 1.0, 0.100000001);
    u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat26) + (-u_xlat6.xyz);
    u_xlat6.xyz = u_xlat1.xyz + u_xlat7.xyz;
    u_xlat6.w = u_xlat16.x * _HeightScale + u_xlat6.y;
    u_xlat1.xyz = u_xlat5.xyz + u_xlat6.xwz;
    u_xlat1.xyz = vec3(u_xlat24) * vec3(-0.5, 0.0, -0.5) + u_xlat1.xyz;
    u_xlat4.xz = u_xlat4.yy * (-u_xlat4.yy);
    u_xlat1.xyz = u_xlat4.xyz * u_xlat7.xyz + u_xlat1.xyz;
    u_xlat4.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat5 = u_xlat4.yyyy * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat5 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat4.xxxx + u_xlat5;
    u_xlat4 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat4.zzzz + u_xlat5;
    gl_Position = u_xlat4 + hlslcc_mtx4x4unity_MatrixVPZero[3];
    u_xlat3.y = 0.0;
    vs_TEXCOORD0.xyz = u_xlat3.xyz + vec3(-1.0, 0.0, -1.0);
    vs_TEXCOORD0.w = 0.0;
    u_xlat0.xy = u_xlat0.yx / u_xlat2.xx;
    u_xlat16.xy = u_xlat10.yx / u_xlat2.xx;
    u_xlat0.xy = u_xlat0.xy + u_xlat16.xy;
    u_xlat0.yz = u_xlat0.xy + vec2(-1.0, -1.0);
    u_xlat24 = dot(u_xlat0.yz, u_xlat0.yz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat0.x = 0.0;
    u_xlat0.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    u_xlat2.xyz = in_NORMAL0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_NORMAL0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_NORMAL0.zzz + u_xlat2.xyz;
    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat0.xyz * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat0.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat0.xyz * u_xlat2.xyz;
    u_xlat0.xyz = u_xlat2.zxy * u_xlat0.yzx + (-u_xlat3.xyz);
    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
    u_xlat24 = dot(u_xlat1.xyz, u_xlat0.xyz);
#ifdef UNITY_ADRENO_ES3
    { bool cond = 0.0<u_xlat24; u_xlati1 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati1 = int((0.0<u_xlat24) ? 0xFFFFFFFFu : uint(0u));
#endif
#ifdef UNITY_ADRENO_ES3
    { bool cond = u_xlat24<0.0; u_xlati24 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati24 = int((u_xlat24<0.0) ? 0xFFFFFFFFu : uint(0u));
#endif
    u_xlati24 = (-u_xlati1) + u_xlati24;
    u_xlat24 = float(u_xlati24);
    vs_TEXCOORD1.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    vs_TEXCOORD1.w = 0.0;
    u_xlat0.x = u_xlat25 / _RootColorScale;
    u_xlat0.x = u_xlat0.x + _RootColorOffset;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xxx * vec3(-0.501960814, 0.0, 0.0) + vec3(0.501960814, 0.0, 0.0);
    u_xlat24 = u_xlat25 + -0.600000024;
    vs_TEXCOORD3 = u_xlat25;
    u_xlat24 = max(u_xlat24, 0.0);
    u_xlat24 = _GrassTipLighting * u_xlat24 + 1.0;
    vs_TEXCOORD2.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    vs_TEXCOORD2.w = 0.0;
    vs_TEXCOORD4.xy = in_TEXCOORD2.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	float _GrassShininess;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	float _CutOff;
uniform 	vec4 _BurnedColor;
uniform lowp sampler2D _MainTex;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp float vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec4 u_xlat0;
lowp vec4 u_xlat10_0;
bool u_xlatb0;
vec3 u_xlat1;
mediump float u_xlat16_2;
float u_xlat9;
bool u_xlatb9;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD4.xy);
    u_xlat9 = u_xlat10_0.w + (-_CutOff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(u_xlat9<0.0);
#else
    u_xlatb9 = u_xlat9<0.0;
#endif
    if((int(u_xlatb9) * int(0xffffffffu))!=0){discard;}
    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
    SV_Target0.xyz = u_xlat1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0;
    u_xlat1.xyz = _BurnedColor.xyz * u_xlat10_0.xyz + (-u_xlat10_0.xyz);
    u_xlat0.xyz = vs_TEXCOORD2.www * u_xlat1.xyz + u_xlat10_0.xyz;
    u_xlat0.w = vs_TEXCOORD3;
    SV_Target1 = u_xlat0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_2 = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb0) ? u_xlat16_2 : 0.0399999991;
    u_xlat0.x = (-vs_TEXCOORD2.w) + 1.0;
    u_xlat0.x = u_xlat0.x * _GrassShininess;
    SV_Target2.w = u_xlat0.x;
    SV_Target2.xy = vec2(0.0399999991, 0.0399999991);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_HDR_ON" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "MHY_SHADER_MIDDLE" "SOFT_SAMPLE_HEIGHT_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	int unity_BaseInstanceID;
uniform 	float _NoiseScale;
uniform 	vec4 _WorldOffsetRange;
uniform 	float _HeightScale;
uniform 	float _Billboard;
uniform 	float _VegetationMoveScale;
uniform 	vec4 _LocalWindsMapSize;
uniform 	vec4 _LargeWindParam;
uniform 	vec4 _GlobalWind;
uniform 	vec4 _LocalWindsMapCameraInfo;
uniform 	float _GrassTipLighting;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BurnedColor;
uniform 	float _RootColorScale;
uniform 	float _RootColorOffset;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _Heightmap;
uniform lowp sampler2D _Noisemap;
uniform lowp sampler2D _LocalWindsMap;
in highp vec4 in_POSITION0;
in highp vec4 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec2 in_TEXCOORD2;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp float vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec3 u_xlat0;
int u_xlati0;
vec3 u_xlat1;
uvec3 u_xlatu1;
vec4 u_xlat2;
uvec3 u_xlatu2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
uvec2 u_xlatu5;
vec4 u_xlat6;
vec3 u_xlat7;
vec2 u_xlat8;
float u_xlat9;
int u_xlati9;
float u_xlat11;
uint u_xlatu11;
int u_xlati18;
float u_xlat20;
vec2 u_xlat23;
float u_xlat27;
bool u_xlatb27;
float u_xlat28;
uint u_xlatu28;
bool u_xlatb28;
float u_xlat29;
bool u_xlatb29;
float u_xlat30;
void main()
{
    u_xlat0.z = 0.0;
    u_xlati9 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati9 = u_xlati9 << 2;
    u_xlat1.xyz = in_TEXCOORD0.yyy * unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_TEXCOORD0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat2.xy = u_xlat1.xz + (-_LocalWindsMapSize.xy);
    u_xlat2.xy = vec2(u_xlat2.x / _LocalWindsMapSize.z, u_xlat2.y / _LocalWindsMapSize.w);
    u_xlat2.xy = u_xlat2.xy + vec2(0.5, 0.5);
    u_xlat2 = textureLod(_LocalWindsMap, u_xlat2.xy, 0.0);
    u_xlat27 = dot(u_xlat2.xy, u_xlat2.xy);
    u_xlat27 = sqrt(u_xlat27);
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(9.99999975e-05>=u_xlat27);
#else
    u_xlatb27 = 9.99999975e-05>=u_xlat27;
#endif
    u_xlat27 = u_xlatb27 ? 1.0 : float(0.0);
    u_xlat3.xy = (-u_xlat2.xy) + vec2(0.5, 0.5);
    u_xlat2.xy = vec2(u_xlat27) * u_xlat3.xy + u_xlat2.xy;
    u_xlat2.xy = u_xlat2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat27 = dot(u_xlat2.xy, u_xlat2.xy);
    u_xlat27 = max(u_xlat27, 0.00100000005);
    u_xlat3.x = inversesqrt(u_xlat27);
    u_xlat3.yz = u_xlat2.xy * u_xlat3.xx;
    u_xlat0.x = u_xlat3.z;
    u_xlat0.xz = (-u_xlat3.xy) * vec2(0.0, 1.0) + u_xlat0.xz;
    u_xlat27 = (-in_TEXCOORD1.x) + unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].x;
    u_xlat28 = u_xlat27 * 3.0;
    u_xlat28 = _Time.y * 3.0 + u_xlat28;
    u_xlat28 = u_xlat28 + 0.5;
    u_xlat28 = fract(u_xlat28);
    u_xlat28 = u_xlat28 * 2.0 + -1.0;
    u_xlat3.x = abs(u_xlat28) * abs(u_xlat28);
    u_xlat28 = -abs(u_xlat28) * 2.0 + 3.0;
    u_xlat28 = u_xlat28 * u_xlat3.x;
    u_xlat3.x = u_xlat2.z * 1.5;
    u_xlat28 = u_xlat28 * u_xlat3.x;
    u_xlat0.xz = u_xlat0.xz * vec2(u_xlat28);
    u_xlat0.xz = u_xlat0.xz * vec2(0.150000006, 0.150000006);
    u_xlat0.xz = u_xlat3.yz * vec2(u_xlat28) + u_xlat0.xz;
    u_xlat0.xz = u_xlat0.xz + u_xlat2.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlatb28 = !!(0.00199999986<u_xlat2.z);
#else
    u_xlatb28 = 0.00199999986<u_xlat2.z;
#endif
    u_xlat20 = (-u_xlat2.w) * _LocalWindsMapCameraInfo.y + _LocalWindsMapCameraInfo.x;
    u_xlat0.xz = (bool(u_xlatb28)) ? u_xlat0.xz : u_xlat2.xy;
    u_xlat2.xy = vec2(_WorldOffsetRange.z + float(2.0), _WorldOffsetRange.w + float(2.0));
    u_xlat3.xy = u_xlat1.xz + (-_WorldOffsetRange.xy);
    u_xlat3.xy = u_xlat3.xy + vec2(1.0, 1.0);
    u_xlat2.xy = u_xlat3.xy / u_xlat2.xy;
    u_xlat2.xy = u_xlat2.xy * _WorldOffsetRange.zw + vec2(-0.5, -0.5);
    u_xlat3.xy = floor(u_xlat2.xy);
    u_xlat2.xy = u_xlat2.xy + (-u_xlat3.xy);
    u_xlat4 = u_xlat3.xyxy + vec4(0.5, 1.5, 1.5, 1.5);
    u_xlat3 = u_xlat3.xyxy + vec4(1.5, 0.5, 0.5, 0.5);
    u_xlat3 = vec4(u_xlat3.x / _WorldOffsetRange.z, u_xlat3.y / _WorldOffsetRange.w, u_xlat3.z / _WorldOffsetRange.z, u_xlat3.w / _WorldOffsetRange.w);
    u_xlat4 = vec4(u_xlat4.x / _WorldOffsetRange.z, u_xlat4.y / _WorldOffsetRange.w, u_xlat4.z / _WorldOffsetRange.z, u_xlat4.w / _WorldOffsetRange.w);
    u_xlat28 = textureLod(_Heightmap, u_xlat4.zw, 0.0).x;
    u_xlat29 = textureLod(_Heightmap, u_xlat4.xy, 0.0).x;
    u_xlat28 = u_xlat28 + (-u_xlat29);
    u_xlat28 = u_xlat2.x * u_xlat28 + u_xlat29;
    u_xlat29 = textureLod(_Heightmap, u_xlat3.xy, 0.0).x;
    u_xlat3.x = textureLod(_Heightmap, u_xlat3.zw, 0.0).x;
    u_xlat29 = u_xlat29 + (-u_xlat3.x);
    u_xlat2.x = u_xlat2.x * u_xlat29 + u_xlat3.x;
    u_xlat28 = u_xlat28 + (-u_xlat2.x);
    u_xlat28 = u_xlat2.y * u_xlat28 + u_xlat2.x;
    u_xlat2.x = u_xlat28 * _HeightScale + u_xlat1.y;
    u_xlat2.x = (-u_xlat2.x) + u_xlat20;
    u_xlat2.x = u_xlat2.x * 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat2.x = (-u_xlat2.x) + 1.0;
    u_xlat11 = float(floatBitsToUint(unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2]).w);
    u_xlat11 = u_xlat11 * 5.96046448e-08;
    u_xlatu11 = uint(u_xlat11);
    u_xlatu11 = u_xlatu11 & 3u;
    u_xlat11 = float(u_xlatu11);
    u_xlat20 = fract(u_xlat27);
    u_xlat27 = u_xlat27 + unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].y;
    u_xlat3.xy = vec2(u_xlat27) * vec2(22.0, 33.0);
    u_xlat3.xy = fract(u_xlat3.xy);
    u_xlat3.xy = u_xlat3.xy + vec2(-0.5, -0.5);
    u_xlat3.xz = u_xlat3.xy * vec2(0.200000003, 0.200000003);
    u_xlat27 = u_xlat11 + u_xlat20;
    u_xlat27 = u_xlat27 + -0.5;
    u_xlat11 = u_xlat27 * 0.333000004;
    u_xlat4.y = u_xlat27 * 0.333000004 + -1.0;
    u_xlat27 = in_TEXCOORD1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
    u_xlat11 = u_xlat11 * u_xlat27;
    u_xlat2.x = u_xlat11 * u_xlat2.x;
    u_xlat0.xz = u_xlat0.xz * u_xlat2.xx;
    u_xlat0.xz = u_xlat0.xz * vec2(vec2(_VegetationMoveScale, _VegetationMoveScale));
    u_xlat2.x = dot(_GlobalWind.xyz, _GlobalWind.xyz);
    u_xlat2.x = max(u_xlat2.x, 0.00100000005);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat5 = u_xlat2.xxxx * _GlobalWind.xzxz;
    u_xlat2.xz = vec2(u_xlat5.z * _LargeWindParam.z, u_xlat5.w * _LargeWindParam.z);
    u_xlat23.xy = u_xlat1.xz / vec2(_NoiseScale);
    u_xlat5.xy = _LargeWindParam.xx * u_xlat5.xy + u_xlat23.xy;
    u_xlat5.xy = textureLod(_Noisemap, u_xlat5.xy, 0.0).xy;
    u_xlat5.xy = u_xlat5.xy + vec2(-0.5, -0.5);
    u_xlat5.xy = u_xlat5.xy * _LargeWindParam.yy + vec2(0.5, 0.5);
    u_xlat5.xy = vec2(u_xlat11) * u_xlat5.xy;
    u_xlat6.xz = u_xlat5.xy * u_xlat2.xz + u_xlat0.xz;
    u_xlat2.xz = u_xlat2.xz * u_xlat5.xy;
    u_xlat6.y = 0.0;
    u_xlat5.y = hlslcc_mtx4x4unity_MatrixV[0].x;
    u_xlat5.x = hlslcc_mtx4x4unity_MatrixV[2].x;
    u_xlat29 = dot(u_xlat5.xy, u_xlat5.xy);
    u_xlat29 = inversesqrt(u_xlat29);
    u_xlat5.xy = vec2(u_xlat29) * u_xlat5.xy;
    u_xlat7.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat7.xyz = unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat7.xyz;
    u_xlat7.xyz = unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat7.xyz;
    u_xlat7.xyz = u_xlat7.xyz + unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat7.xyz = (-u_xlat1.xyz) + u_xlat7.xyz;
    u_xlat8.x = unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].x;
    u_xlat8.y = unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].x;
    u_xlat29 = dot(u_xlat8.xy, u_xlat8.xy);
    u_xlat29 = inversesqrt(u_xlat29);
    u_xlat23.xy = vec2(u_xlat29) * u_xlat8.xy;
    u_xlat29 = u_xlat23.y * u_xlat7.z;
    u_xlat29 = u_xlat7.x * u_xlat23.x + (-u_xlat29);
    u_xlat30 = dot(u_xlat7.zx, u_xlat23.xy);
    u_xlat23.xy = u_xlat5.xy * vec2(u_xlat30);
    u_xlat30 = u_xlat29 * u_xlat5.y + (-u_xlat23.x);
    u_xlat29 = u_xlat29 * u_xlat5.x + u_xlat23.y;
    u_xlat29 = u_xlat7.z + u_xlat29;
    u_xlat7.z = (-u_xlat29) * _Billboard + u_xlat7.z;
    u_xlat29 = u_xlat7.x + u_xlat30;
    u_xlat7.x = (-u_xlat29) * _Billboard + u_xlat7.x;
    u_xlat5.xyz = u_xlat7.xyz * vec3(0.100000001, 1.0, 0.100000001) + u_xlat6.xyz;
    u_xlat29 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat29 = max(u_xlat29, 0.00100000005);
    u_xlat29 = inversesqrt(u_xlat29);
    u_xlat5.xyz = vec3(u_xlat29) * u_xlat5.xyz;
    u_xlat29 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat29 = sqrt(u_xlat29);
    u_xlat6.xyz = u_xlat7.xyz * vec3(0.100000001, 1.0, 0.100000001);
    u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat29) + (-u_xlat6.xyz);
    u_xlat6.xyz = u_xlat1.xyz + u_xlat7.xyz;
    u_xlat6.w = u_xlat28 * _HeightScale + u_xlat6.y;
    u_xlat1.xyz = u_xlat5.xyz + u_xlat6.xwz;
    u_xlatu5.xy = uvec2(65280u, 255u) & floatBitsToUint(unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1]).ww;
    u_xlat5.xy = vec2(u_xlatu5.xy);
    u_xlat28 = u_xlat5.x * 0.00390625;
    u_xlat5.z = u_xlat5.y + -127.0;
    u_xlatu28 = uint(u_xlat28);
    u_xlat28 = float(u_xlatu28);
    u_xlat5.x = u_xlat28 + -127.0;
    u_xlat6.xy = u_xlat5.xz * vec2(0.00787401572, 0.00787401572);
    u_xlat6.xy = u_xlat6.xy * u_xlat6.xy;
    u_xlat28 = u_xlat6.y + u_xlat6.x;
    u_xlat28 = (-u_xlat28) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb29 = !!(0.0<u_xlat28);
#else
    u_xlatb29 = 0.0<u_xlat28;
#endif
    u_xlat28 = sqrt(u_xlat28);
    u_xlat5.y = u_xlatb29 ? u_xlat28 : float(0.0);
    u_xlat6.xyz = u_xlat5.xyz * u_xlat7.yyy;
    u_xlat6.xyz = vec3(u_xlat11) * u_xlat6.xyz;
    u_xlat28 = max(u_xlat11, 9.99999972e-10);
    u_xlat1.xyz = u_xlat6.xyz * vec3(0.00393700786, 0.0, 0.00393700786) + u_xlat1.xyz;
    u_xlat4.xz = u_xlat4.yy * (-u_xlat4.yy);
    u_xlat1.xyz = u_xlat4.xyz * u_xlat7.xyz + u_xlat1.xyz;
    u_xlat4.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat6 = u_xlat4.yyyy * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat6 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat4.xxxx + u_xlat6;
    u_xlat4 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat4.zzzz + u_xlat6;
    gl_Position = u_xlat4 + hlslcc_mtx4x4unity_MatrixVPZero[3];
    u_xlat3.y = 0.0;
    vs_TEXCOORD0.xyz = u_xlat5.xyz * vec3(0.00787401572, 1.0, 0.00787401572) + u_xlat3.xyz;
    vs_TEXCOORD0.w = 0.0;
    u_xlat0.xz = u_xlat0.zx / vec2(u_xlat28);
    u_xlat2.xy = u_xlat2.zx / vec2(u_xlat28);
    u_xlat2.yz = u_xlat0.xz + u_xlat2.xy;
    u_xlat2.x = 0.0;
    u_xlat2.xyz = u_xlat5.yzx * vec3(1.0, 0.00787401572, 0.00787401572) + u_xlat2.xyz;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat3.xyz = in_NORMAL0.yyy * unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_NORMAL0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_NORMAL0.zzz + u_xlat3.xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
    u_xlat3.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
    u_xlat2.xyz = u_xlat3.zxy * u_xlat2.yzx + (-u_xlat4.xyz);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
    { bool cond = 0.0<u_xlat0.x; u_xlati18 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati18 = int((0.0<u_xlat0.x) ? 0xFFFFFFFFu : uint(0u));
#endif
#ifdef UNITY_ADRENO_ES3
    { bool cond = u_xlat0.x<0.0; u_xlati0 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati0 = int((u_xlat0.x<0.0) ? 0xFFFFFFFFu : uint(0u));
#endif
    u_xlati0 = (-u_xlati18) + u_xlati0;
    u_xlat0.x = float(u_xlati0);
    vs_TEXCOORD1.xyz = u_xlat0.xxx * u_xlat2.xyz;
    vs_TEXCOORD1.w = 0.0;
    u_xlatu1.xyz = uvec3(16711680u, 65280u, 255u) & floatBitsToUint(unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2]).www;
    u_xlat1.xyz = vec3(u_xlatu1.xyz);
    u_xlatu2.xyz = uvec3(16711680u, 65280u, 255u) & floatBitsToUint(unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3]).www;
    u_xlat0.x = max(1.0, unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].w);
    u_xlat0.x = min(u_xlat0.x, 2.0);
    u_xlat0.x = u_xlat0.x + -1.0;
    u_xlat2.xyz = vec3(u_xlatu2.xyz);
    u_xlat2.xyz = u_xlat2.xyz * vec3(5.9838392e-08, 1.53186284e-05, 0.00392156886);
    u_xlat1.xyz = u_xlat1.xyz * vec3(5.9838392e-08, 1.53186284e-05, 0.00392156886) + (-u_xlat2.xyz);
    u_xlat9 = u_xlat27 / _RootColorScale;
    u_xlat9 = u_xlat9 + _RootColorOffset;
#ifdef UNITY_ADRENO_ES3
    u_xlat9 = min(max(u_xlat9, 0.0), 1.0);
#else
    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz + u_xlat2.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _BurnedColor.xyz;
    u_xlat1.xyz = u_xlat0.xxx * u_xlat2.xyz + u_xlat1.xyz;
    vs_TEXCOORD2.w = u_xlat0.x;
    u_xlat0.x = u_xlat27 + -0.600000024;
    vs_TEXCOORD3 = u_xlat27;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = _GrassTipLighting * u_xlat0.x + 1.0;
    vs_TEXCOORD2.xyz = u_xlat0.xxx * u_xlat1.xyz;
    vs_TEXCOORD4.xy = in_TEXCOORD2.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	float _GrassShininess;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	float _CutOff;
uniform 	vec4 _BurnedColor;
uniform lowp sampler2D _MainTex;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp float vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec4 u_xlat0;
lowp vec4 u_xlat10_0;
bool u_xlatb0;
vec3 u_xlat1;
mediump float u_xlat16_2;
float u_xlat9;
bool u_xlatb9;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD4.xy);
    u_xlat9 = u_xlat10_0.w + (-_CutOff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(u_xlat9<0.0);
#else
    u_xlatb9 = u_xlat9<0.0;
#endif
    if((int(u_xlatb9) * int(0xffffffffu))!=0){discard;}
    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
    SV_Target0.xyz = u_xlat1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0;
    u_xlat1.xyz = _BurnedColor.xyz * u_xlat10_0.xyz + (-u_xlat10_0.xyz);
    u_xlat0.xyz = vs_TEXCOORD2.www * u_xlat1.xyz + u_xlat10_0.xyz;
    u_xlat0.w = vs_TEXCOORD3;
    SV_Target1 = u_xlat0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_2 = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb0) ? u_xlat16_2 : 0.0399999991;
    u_xlat0.x = (-vs_TEXCOORD2.w) + 1.0;
    u_xlat0.x = u_xlat0.x * _GrassShininess;
    SV_Target2.w = u_xlat0.x;
    SV_Target2.xy = vec2(0.0399999991, 0.0399999991);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_HDR_ON" "UNITY_DEBUG_VIEW_ON" "MHY_SHADER_MIDDLE" "SOFT_SAMPLE_HEIGHT_ON" "DITHER_FADE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	float _NoiseScale;
uniform 	vec4 _WorldOffsetRange;
uniform 	float _HeightScale;
uniform 	float _Billboard;
uniform 	float _VegetationMoveScale;
uniform 	vec4 _LocalWindsMapSize;
uniform 	vec4 _LargeWindParam;
uniform 	vec4 _GlobalWind;
uniform 	vec4 _LocalWindsMapCameraInfo;
uniform 	float _GrassTipLighting;
uniform 	vec4 _MainTex_ST;
uniform 	float _RootColorScale;
uniform 	float _RootColorOffset;
uniform highp sampler2D _Heightmap;
uniform lowp sampler2D _Noisemap;
uniform lowp sampler2D _LocalWindsMap;
in highp vec4 in_POSITION0;
in highp vec4 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec2 in_TEXCOORD2;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp float vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec3 u_xlat0;
vec3 u_xlat1;
int u_xlati1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
vec4 u_xlat6;
vec3 u_xlat7;
vec3 u_xlat8;
bool u_xlatb8;
vec2 u_xlat10;
vec2 u_xlat16;
float u_xlat18;
vec2 u_xlat21;
float u_xlat24;
int u_xlati24;
float u_xlat25;
float u_xlat26;
void main()
{
    u_xlat0.z = 0.0;
    u_xlat1.xyz = in_TEXCOORD0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[2].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TEXCOORD0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat8.xz = u_xlat1.xz + (-_LocalWindsMapSize.xy);
    u_xlat8.xz = vec2(u_xlat8.x / _LocalWindsMapSize.z, u_xlat8.z / _LocalWindsMapSize.w);
    u_xlat8.xz = u_xlat8.xz + vec2(0.5, 0.5);
    u_xlat2 = textureLod(_LocalWindsMap, u_xlat8.xz, 0.0);
    u_xlat8.x = dot(u_xlat2.xy, u_xlat2.xy);
    u_xlat8.x = sqrt(u_xlat8.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(9.99999975e-05>=u_xlat8.x);
#else
    u_xlatb8 = 9.99999975e-05>=u_xlat8.x;
#endif
    u_xlat8.x = u_xlatb8 ? 1.0 : float(0.0);
    u_xlat3.xy = (-u_xlat2.xy) + vec2(0.5, 0.5);
    u_xlat8.xz = u_xlat8.xx * u_xlat3.xy + u_xlat2.xy;
    u_xlat8.xz = u_xlat8.xz * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat25 = dot(u_xlat8.xz, u_xlat8.xz);
    u_xlat25 = max(u_xlat25, 0.00100000005);
    u_xlat3.x = inversesqrt(u_xlat25);
    u_xlat3.yz = u_xlat8.xz * u_xlat3.xx;
    u_xlat0.x = u_xlat3.z;
    u_xlat0.xz = (-u_xlat3.xy) * vec2(0.0, 1.0) + u_xlat0.xz;
    u_xlat25 = (-in_TEXCOORD1.x) + hlslcc_mtx4x4unity_ObjectToWorld[1].x;
    u_xlat2.x = u_xlat25 * 3.0;
    u_xlat2.x = _Time.y * 3.0 + u_xlat2.x;
    u_xlat2.x = u_xlat2.x + 0.5;
    u_xlat2.x = fract(u_xlat2.x);
    u_xlat2.x = u_xlat2.x * 2.0 + -1.0;
    u_xlat10.x = abs(u_xlat2.x) * abs(u_xlat2.x);
    u_xlat2.x = -abs(u_xlat2.x) * 2.0 + 3.0;
    u_xlat2.x = u_xlat2.x * u_xlat10.x;
    u_xlat10.x = u_xlat2.z * 1.5;
    u_xlat2.x = u_xlat10.x * u_xlat2.x;
    u_xlat0.xz = u_xlat0.xz * u_xlat2.xx;
    u_xlat0.xz = u_xlat0.xz * vec2(0.150000006, 0.150000006);
    u_xlat0.xz = u_xlat3.yz * u_xlat2.xx + u_xlat0.xz;
    u_xlat0.xz = u_xlat0.xz + u_xlat8.xz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(0.00199999986<u_xlat2.z);
#else
    u_xlatb2 = 0.00199999986<u_xlat2.z;
#endif
    u_xlat10.x = (-u_xlat2.w) * _LocalWindsMapCameraInfo.y + _LocalWindsMapCameraInfo.x;
    u_xlat0.xy = (bool(u_xlatb2)) ? u_xlat0.xz : u_xlat8.xz;
    u_xlat16.xy = vec2(_WorldOffsetRange.z + float(2.0), _WorldOffsetRange.w + float(2.0));
    u_xlat2.xz = u_xlat1.xz + (-_WorldOffsetRange.xy);
    u_xlat2.xz = u_xlat2.xz + vec2(1.0, 1.0);
    u_xlat16.xy = u_xlat2.xz / u_xlat16.xy;
    u_xlat16.xy = u_xlat16.xy * _WorldOffsetRange.zw + vec2(-0.5, -0.5);
    u_xlat2.xz = floor(u_xlat16.xy);
    u_xlat16.xy = u_xlat16.xy + (-u_xlat2.xz);
    u_xlat3 = u_xlat2.xzxz + vec4(0.5, 1.5, 1.5, 1.5);
    u_xlat4 = u_xlat2.xzxz + vec4(1.5, 0.5, 0.5, 0.5);
    u_xlat4 = vec4(u_xlat4.x / _WorldOffsetRange.z, u_xlat4.y / _WorldOffsetRange.w, u_xlat4.z / _WorldOffsetRange.z, u_xlat4.w / _WorldOffsetRange.w);
    u_xlat3 = vec4(u_xlat3.x / _WorldOffsetRange.z, u_xlat3.y / _WorldOffsetRange.w, u_xlat3.z / _WorldOffsetRange.z, u_xlat3.w / _WorldOffsetRange.w);
    u_xlat2.x = textureLod(_Heightmap, u_xlat3.zw, 0.0).x;
    u_xlat18 = textureLod(_Heightmap, u_xlat3.xy, 0.0).x;
    u_xlat2.x = (-u_xlat18) + u_xlat2.x;
    u_xlat2.x = u_xlat16.x * u_xlat2.x + u_xlat18;
    u_xlat18 = textureLod(_Heightmap, u_xlat4.xy, 0.0).x;
    u_xlat26 = textureLod(_Heightmap, u_xlat4.zw, 0.0).x;
    u_xlat18 = (-u_xlat26) + u_xlat18;
    u_xlat16.x = u_xlat16.x * u_xlat18 + u_xlat26;
    u_xlat2.x = (-u_xlat16.x) + u_xlat2.x;
    u_xlat16.x = u_xlat16.y * u_xlat2.x + u_xlat16.x;
    u_xlat24 = u_xlat16.x * _HeightScale + u_xlat1.y;
    u_xlat24 = (-u_xlat24) + u_xlat10.x;
    u_xlat24 = u_xlat24 * 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat24 = (-u_xlat24) + 1.0;
    u_xlat2.x = fract(u_xlat25);
    u_xlat25 = u_xlat25 + hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat10.xy = vec2(u_xlat25) * vec2(22.0, 33.0);
    u_xlat10.xy = fract(u_xlat10.xy);
    u_xlat10.xy = u_xlat10.xy + vec2(-0.5, -0.5);
    u_xlat3.xz = u_xlat10.xy * vec2(0.200000003, 0.200000003);
    u_xlat25 = u_xlat2.x + -0.5;
    u_xlat2.x = u_xlat25 * 0.333000004;
    u_xlat4.y = u_xlat25 * 0.333000004 + -1.0;
    u_xlat25 = in_TEXCOORD1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat25 = min(max(u_xlat25, 0.0), 1.0);
#else
    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
#endif
    u_xlat2.x = u_xlat2.x * u_xlat25;
    u_xlat24 = u_xlat24 * u_xlat2.x;
    u_xlat0.xy = vec2(u_xlat24) * u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(vec2(_VegetationMoveScale, _VegetationMoveScale));
    u_xlat24 = dot(_GlobalWind.xyz, _GlobalWind.xyz);
    u_xlat24 = max(u_xlat24, 0.00100000005);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat5 = vec4(u_xlat24) * _GlobalWind.xzxz;
    u_xlat10.xy = vec2(u_xlat5.z * _LargeWindParam.z, u_xlat5.w * _LargeWindParam.z);
    u_xlat21.xy = u_xlat1.xz / vec2(_NoiseScale);
    u_xlat5.xy = _LargeWindParam.xx * u_xlat5.xy + u_xlat21.xy;
    u_xlat5.xy = textureLod(_Noisemap, u_xlat5.xy, 0.0).xy;
    u_xlat5.xy = u_xlat5.xy + vec2(-0.5, -0.5);
    u_xlat5.xy = u_xlat5.xy * _LargeWindParam.yy + vec2(0.5, 0.5);
    u_xlat5.xy = u_xlat2.xx * u_xlat5.xy;
    u_xlat6.xz = u_xlat5.xy * u_xlat10.xy + u_xlat0.xy;
    u_xlat10.xy = u_xlat10.xy * u_xlat5.xy;
    u_xlat6.y = 0.0;
    u_xlat5.y = hlslcc_mtx4x4unity_MatrixV[0].x;
    u_xlat5.x = hlslcc_mtx4x4unity_MatrixV[2].x;
    u_xlat24 = dot(u_xlat5.xy, u_xlat5.xy);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat5.xy = vec2(u_xlat24) * u_xlat5.xy;
    u_xlat7.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;
    u_xlat7.y = hlslcc_mtx4x4unity_ObjectToWorld[2].x;
    u_xlat24 = dot(u_xlat7.xy, u_xlat7.xy);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat21.xy = vec2(u_xlat24) * u_xlat7.xy;
    u_xlat7.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat7.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat7.xyz;
    u_xlat7.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat7.xyz;
    u_xlat7.xyz = u_xlat7.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat7.xyz = (-u_xlat1.xyz) + u_xlat7.xyz;
    u_xlat24 = u_xlat21.y * u_xlat7.z;
    u_xlat24 = u_xlat7.x * u_xlat21.x + (-u_xlat24);
    u_xlat26 = dot(u_xlat7.zx, u_xlat21.xy);
    u_xlat21.xy = u_xlat5.xy * vec2(u_xlat26);
    u_xlat26 = u_xlat24 * u_xlat5.y + (-u_xlat21.x);
    u_xlat24 = u_xlat24 * u_xlat5.x + u_xlat21.y;
    u_xlat24 = u_xlat7.z + u_xlat24;
    u_xlat7.z = (-u_xlat24) * _Billboard + u_xlat7.z;
    u_xlat24 = u_xlat7.x + u_xlat26;
    u_xlat7.x = (-u_xlat24) * _Billboard + u_xlat7.x;
    u_xlat24 = u_xlat2.x * u_xlat7.y;
    u_xlat2.x = max(u_xlat2.x, 9.99999972e-10);
    u_xlat5.xyz = u_xlat7.xyz * vec3(0.100000001, 1.0, 0.100000001) + u_xlat6.xyz;
    u_xlat26 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat26 = max(u_xlat26, 0.00100000005);
    u_xlat26 = inversesqrt(u_xlat26);
    u_xlat5.xyz = vec3(u_xlat26) * u_xlat5.xyz;
    u_xlat26 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat26 = sqrt(u_xlat26);
    u_xlat6.xyz = u_xlat7.xyz * vec3(0.100000001, 1.0, 0.100000001);
    u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat26) + (-u_xlat6.xyz);
    u_xlat6.xyz = u_xlat1.xyz + u_xlat7.xyz;
    u_xlat6.w = u_xlat16.x * _HeightScale + u_xlat6.y;
    u_xlat1.xyz = u_xlat5.xyz + u_xlat6.xwz;
    u_xlat1.xyz = vec3(u_xlat24) * vec3(-0.5, 0.0, -0.5) + u_xlat1.xyz;
    u_xlat4.xz = u_xlat4.yy * (-u_xlat4.yy);
    u_xlat1.xyz = u_xlat4.xyz * u_xlat7.xyz + u_xlat1.xyz;
    u_xlat4.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat5 = u_xlat4.yyyy * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat5 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat4.xxxx + u_xlat5;
    u_xlat4 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat4.zzzz + u_xlat5;
    gl_Position = u_xlat4 + hlslcc_mtx4x4unity_MatrixVPZero[3];
    u_xlat3.y = 0.0;
    vs_TEXCOORD0.xyz = u_xlat3.xyz + vec3(-1.0, 0.0, -1.0);
    vs_TEXCOORD0.w = 0.0;
    u_xlat0.xy = u_xlat0.yx / u_xlat2.xx;
    u_xlat16.xy = u_xlat10.yx / u_xlat2.xx;
    u_xlat0.xy = u_xlat0.xy + u_xlat16.xy;
    u_xlat0.yz = u_xlat0.xy + vec2(-1.0, -1.0);
    u_xlat24 = dot(u_xlat0.yz, u_xlat0.yz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat0.x = 0.0;
    u_xlat0.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    u_xlat2.xyz = in_NORMAL0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_NORMAL0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_NORMAL0.zzz + u_xlat2.xyz;
    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat0.xyz * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat0.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat0.xyz * u_xlat2.xyz;
    u_xlat0.xyz = u_xlat2.zxy * u_xlat0.yzx + (-u_xlat3.xyz);
    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
    u_xlat24 = dot(u_xlat1.xyz, u_xlat0.xyz);
#ifdef UNITY_ADRENO_ES3
    { bool cond = 0.0<u_xlat24; u_xlati1 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati1 = int((0.0<u_xlat24) ? 0xFFFFFFFFu : uint(0u));
#endif
#ifdef UNITY_ADRENO_ES3
    { bool cond = u_xlat24<0.0; u_xlati24 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati24 = int((u_xlat24<0.0) ? 0xFFFFFFFFu : uint(0u));
#endif
    u_xlati24 = (-u_xlati1) + u_xlati24;
    u_xlat24 = float(u_xlati24);
    vs_TEXCOORD1.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    vs_TEXCOORD1.w = 0.0;
    u_xlat0.x = u_xlat25 / _RootColorScale;
    u_xlat0.x = u_xlat0.x + _RootColorOffset;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xxx * vec3(-0.501960814, 0.0, 0.0) + vec3(0.501960814, 0.0, 0.0);
    u_xlat24 = u_xlat25 + -0.600000024;
    vs_TEXCOORD3 = u_xlat25;
    u_xlat24 = max(u_xlat24, 0.0);
    u_xlat24 = _GrassTipLighting * u_xlat24 + 1.0;
    vs_TEXCOORD2.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    vs_TEXCOORD2.w = 0.0;
    vs_TEXCOORD4.xy = in_TEXCOORD2.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	float _GrassShininess;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	float _CutOff;
uniform 	vec4 _BurnedColor;
uniform lowp sampler2D _MainTex;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp float vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec4 u_xlat0;
lowp vec4 u_xlat10_0;
bool u_xlatb0;
vec3 u_xlat1;
mediump float u_xlat16_2;
float u_xlat9;
bool u_xlatb9;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD4.xy);
    u_xlat9 = u_xlat10_0.w + (-_CutOff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(u_xlat9<0.0);
#else
    u_xlatb9 = u_xlat9<0.0;
#endif
    if((int(u_xlatb9) * int(0xffffffffu))!=0){discard;}
    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
    SV_Target0.xyz = u_xlat1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0;
    u_xlat1.xyz = _BurnedColor.xyz * u_xlat10_0.xyz + (-u_xlat10_0.xyz);
    u_xlat0.xyz = vs_TEXCOORD2.www * u_xlat1.xyz + u_xlat10_0.xyz;
    u_xlat0.w = vs_TEXCOORD3;
    SV_Target1 = u_xlat0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_2 = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb0) ? u_xlat16_2 : 0.0399999991;
    u_xlat0.x = (-vs_TEXCOORD2.w) + 1.0;
    u_xlat0.x = u_xlat0.x * _GrassShininess;
    SV_Target2.w = u_xlat0.x;
    SV_Target2.xy = vec2(0.0399999991, 0.0399999991);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_HDR_ON" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "MHY_SHADER_MIDDLE" "SOFT_SAMPLE_HEIGHT_ON" "DITHER_FADE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	int unity_BaseInstanceID;
uniform 	float _NoiseScale;
uniform 	vec4 _WorldOffsetRange;
uniform 	float _HeightScale;
uniform 	float _Billboard;
uniform 	float _VegetationMoveScale;
uniform 	vec4 _LocalWindsMapSize;
uniform 	vec4 _LargeWindParam;
uniform 	vec4 _GlobalWind;
uniform 	vec4 _LocalWindsMapCameraInfo;
uniform 	float _GrassTipLighting;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BurnedColor;
uniform 	float _RootColorScale;
uniform 	float _RootColorOffset;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _Heightmap;
uniform lowp sampler2D _Noisemap;
uniform lowp sampler2D _LocalWindsMap;
in highp vec4 in_POSITION0;
in highp vec4 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec2 in_TEXCOORD2;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp float vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec3 u_xlat0;
int u_xlati0;
vec3 u_xlat1;
uvec3 u_xlatu1;
vec4 u_xlat2;
uvec3 u_xlatu2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
uvec2 u_xlatu5;
vec4 u_xlat6;
vec3 u_xlat7;
vec2 u_xlat8;
float u_xlat9;
int u_xlati9;
float u_xlat11;
uint u_xlatu11;
int u_xlati18;
float u_xlat20;
vec2 u_xlat23;
float u_xlat27;
bool u_xlatb27;
float u_xlat28;
uint u_xlatu28;
bool u_xlatb28;
float u_xlat29;
bool u_xlatb29;
float u_xlat30;
void main()
{
    u_xlat0.z = 0.0;
    u_xlati9 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati9 = u_xlati9 << 2;
    u_xlat1.xyz = in_TEXCOORD0.yyy * unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_TEXCOORD0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat2.xy = u_xlat1.xz + (-_LocalWindsMapSize.xy);
    u_xlat2.xy = vec2(u_xlat2.x / _LocalWindsMapSize.z, u_xlat2.y / _LocalWindsMapSize.w);
    u_xlat2.xy = u_xlat2.xy + vec2(0.5, 0.5);
    u_xlat2 = textureLod(_LocalWindsMap, u_xlat2.xy, 0.0);
    u_xlat27 = dot(u_xlat2.xy, u_xlat2.xy);
    u_xlat27 = sqrt(u_xlat27);
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(9.99999975e-05>=u_xlat27);
#else
    u_xlatb27 = 9.99999975e-05>=u_xlat27;
#endif
    u_xlat27 = u_xlatb27 ? 1.0 : float(0.0);
    u_xlat3.xy = (-u_xlat2.xy) + vec2(0.5, 0.5);
    u_xlat2.xy = vec2(u_xlat27) * u_xlat3.xy + u_xlat2.xy;
    u_xlat2.xy = u_xlat2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat27 = dot(u_xlat2.xy, u_xlat2.xy);
    u_xlat27 = max(u_xlat27, 0.00100000005);
    u_xlat3.x = inversesqrt(u_xlat27);
    u_xlat3.yz = u_xlat2.xy * u_xlat3.xx;
    u_xlat0.x = u_xlat3.z;
    u_xlat0.xz = (-u_xlat3.xy) * vec2(0.0, 1.0) + u_xlat0.xz;
    u_xlat27 = (-in_TEXCOORD1.x) + unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].x;
    u_xlat28 = u_xlat27 * 3.0;
    u_xlat28 = _Time.y * 3.0 + u_xlat28;
    u_xlat28 = u_xlat28 + 0.5;
    u_xlat28 = fract(u_xlat28);
    u_xlat28 = u_xlat28 * 2.0 + -1.0;
    u_xlat3.x = abs(u_xlat28) * abs(u_xlat28);
    u_xlat28 = -abs(u_xlat28) * 2.0 + 3.0;
    u_xlat28 = u_xlat28 * u_xlat3.x;
    u_xlat3.x = u_xlat2.z * 1.5;
    u_xlat28 = u_xlat28 * u_xlat3.x;
    u_xlat0.xz = u_xlat0.xz * vec2(u_xlat28);
    u_xlat0.xz = u_xlat0.xz * vec2(0.150000006, 0.150000006);
    u_xlat0.xz = u_xlat3.yz * vec2(u_xlat28) + u_xlat0.xz;
    u_xlat0.xz = u_xlat0.xz + u_xlat2.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlatb28 = !!(0.00199999986<u_xlat2.z);
#else
    u_xlatb28 = 0.00199999986<u_xlat2.z;
#endif
    u_xlat20 = (-u_xlat2.w) * _LocalWindsMapCameraInfo.y + _LocalWindsMapCameraInfo.x;
    u_xlat0.xz = (bool(u_xlatb28)) ? u_xlat0.xz : u_xlat2.xy;
    u_xlat2.xy = vec2(_WorldOffsetRange.z + float(2.0), _WorldOffsetRange.w + float(2.0));
    u_xlat3.xy = u_xlat1.xz + (-_WorldOffsetRange.xy);
    u_xlat3.xy = u_xlat3.xy + vec2(1.0, 1.0);
    u_xlat2.xy = u_xlat3.xy / u_xlat2.xy;
    u_xlat2.xy = u_xlat2.xy * _WorldOffsetRange.zw + vec2(-0.5, -0.5);
    u_xlat3.xy = floor(u_xlat2.xy);
    u_xlat2.xy = u_xlat2.xy + (-u_xlat3.xy);
    u_xlat4 = u_xlat3.xyxy + vec4(0.5, 1.5, 1.5, 1.5);
    u_xlat3 = u_xlat3.xyxy + vec4(1.5, 0.5, 0.5, 0.5);
    u_xlat3 = vec4(u_xlat3.x / _WorldOffsetRange.z, u_xlat3.y / _WorldOffsetRange.w, u_xlat3.z / _WorldOffsetRange.z, u_xlat3.w / _WorldOffsetRange.w);
    u_xlat4 = vec4(u_xlat4.x / _WorldOffsetRange.z, u_xlat4.y / _WorldOffsetRange.w, u_xlat4.z / _WorldOffsetRange.z, u_xlat4.w / _WorldOffsetRange.w);
    u_xlat28 = textureLod(_Heightmap, u_xlat4.zw, 0.0).x;
    u_xlat29 = textureLod(_Heightmap, u_xlat4.xy, 0.0).x;
    u_xlat28 = u_xlat28 + (-u_xlat29);
    u_xlat28 = u_xlat2.x * u_xlat28 + u_xlat29;
    u_xlat29 = textureLod(_Heightmap, u_xlat3.xy, 0.0).x;
    u_xlat3.x = textureLod(_Heightmap, u_xlat3.zw, 0.0).x;
    u_xlat29 = u_xlat29 + (-u_xlat3.x);
    u_xlat2.x = u_xlat2.x * u_xlat29 + u_xlat3.x;
    u_xlat28 = u_xlat28 + (-u_xlat2.x);
    u_xlat28 = u_xlat2.y * u_xlat28 + u_xlat2.x;
    u_xlat2.x = u_xlat28 * _HeightScale + u_xlat1.y;
    u_xlat2.x = (-u_xlat2.x) + u_xlat20;
    u_xlat2.x = u_xlat2.x * 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat2.x = (-u_xlat2.x) + 1.0;
    u_xlat11 = float(floatBitsToUint(unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2]).w);
    u_xlat11 = u_xlat11 * 5.96046448e-08;
    u_xlatu11 = uint(u_xlat11);
    u_xlatu11 = u_xlatu11 & 3u;
    u_xlat11 = float(u_xlatu11);
    u_xlat20 = fract(u_xlat27);
    u_xlat27 = u_xlat27 + unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].y;
    u_xlat3.xy = vec2(u_xlat27) * vec2(22.0, 33.0);
    u_xlat3.xy = fract(u_xlat3.xy);
    u_xlat3.xy = u_xlat3.xy + vec2(-0.5, -0.5);
    u_xlat3.xz = u_xlat3.xy * vec2(0.200000003, 0.200000003);
    u_xlat27 = u_xlat11 + u_xlat20;
    u_xlat27 = u_xlat27 + -0.5;
    u_xlat11 = u_xlat27 * 0.333000004;
    u_xlat4.y = u_xlat27 * 0.333000004 + -1.0;
    u_xlat27 = in_TEXCOORD1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
    u_xlat11 = u_xlat11 * u_xlat27;
    u_xlat2.x = u_xlat11 * u_xlat2.x;
    u_xlat0.xz = u_xlat0.xz * u_xlat2.xx;
    u_xlat0.xz = u_xlat0.xz * vec2(vec2(_VegetationMoveScale, _VegetationMoveScale));
    u_xlat2.x = dot(_GlobalWind.xyz, _GlobalWind.xyz);
    u_xlat2.x = max(u_xlat2.x, 0.00100000005);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat5 = u_xlat2.xxxx * _GlobalWind.xzxz;
    u_xlat2.xz = vec2(u_xlat5.z * _LargeWindParam.z, u_xlat5.w * _LargeWindParam.z);
    u_xlat23.xy = u_xlat1.xz / vec2(_NoiseScale);
    u_xlat5.xy = _LargeWindParam.xx * u_xlat5.xy + u_xlat23.xy;
    u_xlat5.xy = textureLod(_Noisemap, u_xlat5.xy, 0.0).xy;
    u_xlat5.xy = u_xlat5.xy + vec2(-0.5, -0.5);
    u_xlat5.xy = u_xlat5.xy * _LargeWindParam.yy + vec2(0.5, 0.5);
    u_xlat5.xy = vec2(u_xlat11) * u_xlat5.xy;
    u_xlat6.xz = u_xlat5.xy * u_xlat2.xz + u_xlat0.xz;
    u_xlat2.xz = u_xlat2.xz * u_xlat5.xy;
    u_xlat6.y = 0.0;
    u_xlat5.y = hlslcc_mtx4x4unity_MatrixV[0].x;
    u_xlat5.x = hlslcc_mtx4x4unity_MatrixV[2].x;
    u_xlat29 = dot(u_xlat5.xy, u_xlat5.xy);
    u_xlat29 = inversesqrt(u_xlat29);
    u_xlat5.xy = vec2(u_xlat29) * u_xlat5.xy;
    u_xlat7.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat7.xyz = unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat7.xyz;
    u_xlat7.xyz = unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat7.xyz;
    u_xlat7.xyz = u_xlat7.xyz + unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat7.xyz = (-u_xlat1.xyz) + u_xlat7.xyz;
    u_xlat8.x = unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].x;
    u_xlat8.y = unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].x;
    u_xlat29 = dot(u_xlat8.xy, u_xlat8.xy);
    u_xlat29 = inversesqrt(u_xlat29);
    u_xlat23.xy = vec2(u_xlat29) * u_xlat8.xy;
    u_xlat29 = u_xlat23.y * u_xlat7.z;
    u_xlat29 = u_xlat7.x * u_xlat23.x + (-u_xlat29);
    u_xlat30 = dot(u_xlat7.zx, u_xlat23.xy);
    u_xlat23.xy = u_xlat5.xy * vec2(u_xlat30);
    u_xlat30 = u_xlat29 * u_xlat5.y + (-u_xlat23.x);
    u_xlat29 = u_xlat29 * u_xlat5.x + u_xlat23.y;
    u_xlat29 = u_xlat7.z + u_xlat29;
    u_xlat7.z = (-u_xlat29) * _Billboard + u_xlat7.z;
    u_xlat29 = u_xlat7.x + u_xlat30;
    u_xlat7.x = (-u_xlat29) * _Billboard + u_xlat7.x;
    u_xlat5.xyz = u_xlat7.xyz * vec3(0.100000001, 1.0, 0.100000001) + u_xlat6.xyz;
    u_xlat29 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat29 = max(u_xlat29, 0.00100000005);
    u_xlat29 = inversesqrt(u_xlat29);
    u_xlat5.xyz = vec3(u_xlat29) * u_xlat5.xyz;
    u_xlat29 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat29 = sqrt(u_xlat29);
    u_xlat6.xyz = u_xlat7.xyz * vec3(0.100000001, 1.0, 0.100000001);
    u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat29) + (-u_xlat6.xyz);
    u_xlat6.xyz = u_xlat1.xyz + u_xlat7.xyz;
    u_xlat6.w = u_xlat28 * _HeightScale + u_xlat6.y;
    u_xlat1.xyz = u_xlat5.xyz + u_xlat6.xwz;
    u_xlatu5.xy = uvec2(65280u, 255u) & floatBitsToUint(unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1]).ww;
    u_xlat5.xy = vec2(u_xlatu5.xy);
    u_xlat28 = u_xlat5.x * 0.00390625;
    u_xlat5.z = u_xlat5.y + -127.0;
    u_xlatu28 = uint(u_xlat28);
    u_xlat28 = float(u_xlatu28);
    u_xlat5.x = u_xlat28 + -127.0;
    u_xlat6.xy = u_xlat5.xz * vec2(0.00787401572, 0.00787401572);
    u_xlat6.xy = u_xlat6.xy * u_xlat6.xy;
    u_xlat28 = u_xlat6.y + u_xlat6.x;
    u_xlat28 = (-u_xlat28) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb29 = !!(0.0<u_xlat28);
#else
    u_xlatb29 = 0.0<u_xlat28;
#endif
    u_xlat28 = sqrt(u_xlat28);
    u_xlat5.y = u_xlatb29 ? u_xlat28 : float(0.0);
    u_xlat6.xyz = u_xlat5.xyz * u_xlat7.yyy;
    u_xlat6.xyz = vec3(u_xlat11) * u_xlat6.xyz;
    u_xlat28 = max(u_xlat11, 9.99999972e-10);
    u_xlat1.xyz = u_xlat6.xyz * vec3(0.00393700786, 0.0, 0.00393700786) + u_xlat1.xyz;
    u_xlat4.xz = u_xlat4.yy * (-u_xlat4.yy);
    u_xlat1.xyz = u_xlat4.xyz * u_xlat7.xyz + u_xlat1.xyz;
    u_xlat4.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat6 = u_xlat4.yyyy * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat6 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat4.xxxx + u_xlat6;
    u_xlat4 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat4.zzzz + u_xlat6;
    gl_Position = u_xlat4 + hlslcc_mtx4x4unity_MatrixVPZero[3];
    u_xlat3.y = 0.0;
    vs_TEXCOORD0.xyz = u_xlat5.xyz * vec3(0.00787401572, 1.0, 0.00787401572) + u_xlat3.xyz;
    vs_TEXCOORD0.w = 0.0;
    u_xlat0.xz = u_xlat0.zx / vec2(u_xlat28);
    u_xlat2.xy = u_xlat2.zx / vec2(u_xlat28);
    u_xlat2.yz = u_xlat0.xz + u_xlat2.xy;
    u_xlat2.x = 0.0;
    u_xlat2.xyz = u_xlat5.yzx * vec3(1.0, 0.00787401572, 0.00787401572) + u_xlat2.xyz;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat3.xyz = in_NORMAL0.yyy * unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_NORMAL0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_NORMAL0.zzz + u_xlat3.xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
    u_xlat3.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
    u_xlat2.xyz = u_xlat3.zxy * u_xlat2.yzx + (-u_xlat4.xyz);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
    { bool cond = 0.0<u_xlat0.x; u_xlati18 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati18 = int((0.0<u_xlat0.x) ? 0xFFFFFFFFu : uint(0u));
#endif
#ifdef UNITY_ADRENO_ES3
    { bool cond = u_xlat0.x<0.0; u_xlati0 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati0 = int((u_xlat0.x<0.0) ? 0xFFFFFFFFu : uint(0u));
#endif
    u_xlati0 = (-u_xlati18) + u_xlati0;
    u_xlat0.x = float(u_xlati0);
    vs_TEXCOORD1.xyz = u_xlat0.xxx * u_xlat2.xyz;
    vs_TEXCOORD1.w = 0.0;
    u_xlatu1.xyz = uvec3(16711680u, 65280u, 255u) & floatBitsToUint(unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2]).www;
    u_xlat1.xyz = vec3(u_xlatu1.xyz);
    u_xlatu2.xyz = uvec3(16711680u, 65280u, 255u) & floatBitsToUint(unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3]).www;
    u_xlat0.x = max(1.0, unity_Builtins0Array[u_xlati9 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].w);
    u_xlat0.x = min(u_xlat0.x, 2.0);
    u_xlat0.x = u_xlat0.x + -1.0;
    u_xlat2.xyz = vec3(u_xlatu2.xyz);
    u_xlat2.xyz = u_xlat2.xyz * vec3(5.9838392e-08, 1.53186284e-05, 0.00392156886);
    u_xlat1.xyz = u_xlat1.xyz * vec3(5.9838392e-08, 1.53186284e-05, 0.00392156886) + (-u_xlat2.xyz);
    u_xlat9 = u_xlat27 / _RootColorScale;
    u_xlat9 = u_xlat9 + _RootColorOffset;
#ifdef UNITY_ADRENO_ES3
    u_xlat9 = min(max(u_xlat9, 0.0), 1.0);
#else
    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz + u_xlat2.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _BurnedColor.xyz;
    u_xlat1.xyz = u_xlat0.xxx * u_xlat2.xyz + u_xlat1.xyz;
    vs_TEXCOORD2.w = u_xlat0.x;
    u_xlat0.x = u_xlat27 + -0.600000024;
    vs_TEXCOORD3 = u_xlat27;
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = _GrassTipLighting * u_xlat0.x + 1.0;
    vs_TEXCOORD2.xyz = u_xlat0.xxx * u_xlat1.xyz;
    vs_TEXCOORD4.xy = in_TEXCOORD2.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	float _GrassShininess;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	float _CutOff;
uniform 	vec4 _BurnedColor;
uniform lowp sampler2D _MainTex;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp float vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec4 u_xlat0;
lowp vec4 u_xlat10_0;
bool u_xlatb0;
vec3 u_xlat1;
mediump float u_xlat16_2;
float u_xlat9;
bool u_xlatb9;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD4.xy);
    u_xlat9 = u_xlat10_0.w + (-_CutOff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(u_xlat9<0.0);
#else
    u_xlatb9 = u_xlat9<0.0;
#endif
    if((int(u_xlatb9) * int(0xffffffffu))!=0){discard;}
    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
    SV_Target0.xyz = u_xlat1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0;
    u_xlat1.xyz = _BurnedColor.xyz * u_xlat10_0.xyz + (-u_xlat10_0.xyz);
    u_xlat0.xyz = vs_TEXCOORD2.www * u_xlat1.xyz + u_xlat10_0.xyz;
    u_xlat0.w = vs_TEXCOORD3;
    SV_Target1 = u_xlat0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_2 = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb0) ? u_xlat16_2 : 0.0399999991;
    u_xlat0.x = (-vs_TEXCOORD2.w) + 1.0;
    u_xlat0.x = u_xlat0.x * _GrassShininess;
    SV_Target2.w = u_xlat0.x;
    SV_Target2.xy = vec2(0.0399999991, 0.0399999991);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_HDR_ON" "UNITY_DEBUG_VIEW_ON" "MHY_SHADER_LOW" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	float _NoiseScale;
uniform 	vec4 _WorldOffsetRange;
uniform 	float _HeightScale;
uniform 	float _Billboard;
uniform 	vec4 _LargeWindParam;
uniform 	vec4 _GlobalWind;
uniform 	float _GrassTipLighting;
uniform 	vec4 _MainTex_ST;
uniform 	float _RootColorScale;
uniform 	float _RootColorOffset;
uniform highp sampler2D _Heightmap;
uniform lowp sampler2D _Noisemap;
in highp vec4 in_POSITION0;
in highp vec4 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec2 in_TEXCOORD2;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp float vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec3 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
vec3 u_xlat5;
vec3 u_xlat6;
vec4 u_xlat7;
int u_xlati8;
vec2 u_xlat9;
vec2 u_xlat17;
float u_xlat24;
float u_xlat25;
float u_xlat26;
float u_xlat27;
void main()
{
    u_xlat0.y = 0.0;
    u_xlat24 = dot(_GlobalWind.xyz, _GlobalWind.xyz);
    u_xlat24 = max(u_xlat24, 0.00100000005);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat1 = vec4(u_xlat24) * _GlobalWind.xzxz;
    u_xlat17.xy = vec2(u_xlat1.z * _LargeWindParam.z, u_xlat1.w * _LargeWindParam.z);
    u_xlat2.xyz = in_TEXCOORD0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[2].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TEXCOORD0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat3.xy = u_xlat2.xz / vec2(_NoiseScale);
    u_xlat1.xy = _LargeWindParam.xx * u_xlat1.xy + u_xlat3.xy;
    u_xlat1.xy = textureLod(_Noisemap, u_xlat1.xy, 0.0).xy;
    u_xlat1.xy = u_xlat1.xy + vec2(-0.5, -0.5);
    u_xlat1.xy = u_xlat1.xy * _LargeWindParam.yy + vec2(0.5, 0.5);
    u_xlat24 = (-in_TEXCOORD1.x) + hlslcc_mtx4x4unity_ObjectToWorld[1].x;
    u_xlat26 = fract(u_xlat24);
    u_xlat24 = u_xlat24 + hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat3.xy = vec2(u_xlat24) * vec2(22.0, 33.0);
    u_xlat3.xy = fract(u_xlat3.xy);
    u_xlat3.xy = u_xlat3.xy + vec2(-0.5, -0.5);
    u_xlat3.xz = u_xlat3.xy * vec2(0.200000003, 0.200000003);
    u_xlat24 = u_xlat26 + -0.5;
    u_xlat26 = u_xlat24 * 0.333000004;
    u_xlat4.y = u_xlat24 * 0.333000004 + -1.0;
    u_xlat24 = in_TEXCOORD1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat26 = u_xlat26 * u_xlat24;
    u_xlat1.xy = u_xlat1.xy * vec2(u_xlat26);
    u_xlat0.xz = u_xlat17.xy * u_xlat1.xy;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[0].x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[2].x;
    u_xlat17.x = dot(u_xlat1.xy, u_xlat1.xy);
    u_xlat17.x = inversesqrt(u_xlat17.x);
    u_xlat1.xy = u_xlat17.xx * u_xlat1.xy;
    u_xlat5.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;
    u_xlat5.y = hlslcc_mtx4x4unity_ObjectToWorld[2].x;
    u_xlat17.x = dot(u_xlat5.xy, u_xlat5.xy);
    u_xlat17.x = inversesqrt(u_xlat17.x);
    u_xlat17.xy = u_xlat17.xx * u_xlat5.xy;
    u_xlat5.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat5.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat5.xyz;
    u_xlat5.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat5.xyz;
    u_xlat5.xyz = u_xlat5.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat5.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
    u_xlat27 = u_xlat17.y * u_xlat5.z;
    u_xlat27 = u_xlat5.x * u_xlat17.x + (-u_xlat27);
    u_xlat17.x = dot(u_xlat5.zx, u_xlat17.xy);
    u_xlat17.xy = u_xlat1.xy * u_xlat17.xx;
    u_xlat9.x = u_xlat27 * u_xlat1.y + (-u_xlat17.x);
    u_xlat1.x = u_xlat27 * u_xlat1.x + u_xlat17.y;
    u_xlat1.x = u_xlat5.z + u_xlat1.x;
    u_xlat5.z = (-u_xlat1.x) * _Billboard + u_xlat5.z;
    u_xlat1.x = u_xlat5.x + u_xlat9.x;
    u_xlat5.x = (-u_xlat1.x) * _Billboard + u_xlat5.x;
    u_xlat1.x = u_xlat26 * u_xlat5.y;
    u_xlat9.x = max(u_xlat26, 9.99999972e-10);
    u_xlat9.xy = u_xlat0.zx / u_xlat9.xx;
    u_xlat0.xyz = u_xlat5.xyz * vec3(0.100000001, 1.0, 0.100000001) + u_xlat0.xyz;
    u_xlat6.yz = u_xlat9.xy + vec2(-1.0, -1.0);
    u_xlat9.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9.x = max(u_xlat9.x, 0.00100000005);
    u_xlat9.x = inversesqrt(u_xlat9.x);
    u_xlat0.xyz = u_xlat0.xyz * u_xlat9.xxx;
    u_xlat9.x = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat9.x = sqrt(u_xlat9.x);
    u_xlat7.xyz = u_xlat5.xyz * vec3(0.100000001, 1.0, 0.100000001);
    u_xlat0.xyz = u_xlat0.xyz * u_xlat9.xxx + (-u_xlat7.xyz);
    u_xlat7.xyz = u_xlat2.xyz + u_xlat5.xyz;
    u_xlat9.xy = u_xlat2.xz + (-_WorldOffsetRange.xy);
    u_xlat9.xy = u_xlat9.xy + vec2(1.0, 1.0);
    u_xlat2.xy = vec2(_WorldOffsetRange.z + float(2.0), _WorldOffsetRange.w + float(2.0));
    u_xlat9.xy = u_xlat9.xy / u_xlat2.xy;
    u_xlat9.x = textureLod(_Heightmap, u_xlat9.xy, 0.0).x;
    u_xlat7.w = u_xlat9.x * _HeightScale + u_xlat7.y;
    u_xlat0.xyz = u_xlat0.xyz + u_xlat7.xwz;
    u_xlat0.xyz = u_xlat1.xxx * vec3(-0.5, 0.0, -0.5) + u_xlat0.xyz;
    u_xlat4.xz = u_xlat4.yy * (-u_xlat4.yy);
    u_xlat0.xyz = u_xlat4.xyz * u_xlat5.xyz + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVPZero[3];
    u_xlat3.y = 0.0;
    vs_TEXCOORD0.xyz = u_xlat3.xyz + vec3(-1.0, 0.0, -1.0);
    vs_TEXCOORD0.w = 0.0;
    u_xlat1.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xxx;
    u_xlat1.x = dot(u_xlat6.yz, u_xlat6.yz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat6.x = 0.0;
    u_xlat1.xyz = u_xlat1.xxx * u_xlat6.xyz;
    u_xlat2.xyz = in_NORMAL0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_NORMAL0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_NORMAL0.zzz + u_xlat2.xyz;
    u_xlat25 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat25 = inversesqrt(u_xlat25);
    u_xlat2.xyz = vec3(u_xlat25) * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
    u_xlat25 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat25 = inversesqrt(u_xlat25);
    u_xlat2.xyz = vec3(u_xlat25) * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.zxy * u_xlat1.yzx + (-u_xlat3.xyz);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
#ifdef UNITY_ADRENO_ES3
    { bool cond = 0.0<u_xlat0.x; u_xlati8 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati8 = int((0.0<u_xlat0.x) ? 0xFFFFFFFFu : uint(0u));
#endif
#ifdef UNITY_ADRENO_ES3
    { bool cond = u_xlat0.x<0.0; u_xlati0 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati0 = int((u_xlat0.x<0.0) ? 0xFFFFFFFFu : uint(0u));
#endif
    u_xlati0 = (-u_xlati8) + u_xlati0;
    u_xlat0.x = float(u_xlati0);
    vs_TEXCOORD1.xyz = u_xlat0.xxx * u_xlat1.xyz;
    vs_TEXCOORD1.w = 0.0;
    u_xlat0.x = u_xlat24 / _RootColorScale;
    u_xlat0.x = u_xlat0.x + _RootColorOffset;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xxx * vec3(-0.501960814, 0.0, 0.0) + vec3(0.501960814, 0.0, 0.0);
    u_xlat1.x = u_xlat24 + -0.600000024;
    vs_TEXCOORD3 = u_xlat24;
    u_xlat24 = max(u_xlat1.x, 0.0);
    u_xlat24 = _GrassTipLighting * u_xlat24 + 1.0;
    vs_TEXCOORD2.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    vs_TEXCOORD2.w = 0.0;
    vs_TEXCOORD4.xy = in_TEXCOORD2.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	float _GrassShininess;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	float _CutOff;
uniform 	vec4 _BurnedColor;
uniform lowp sampler2D _MainTex;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp float vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec4 u_xlat0;
lowp vec4 u_xlat10_0;
bool u_xlatb0;
vec3 u_xlat1;
mediump float u_xlat16_2;
float u_xlat9;
bool u_xlatb9;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD4.xy);
    u_xlat9 = u_xlat10_0.w + (-_CutOff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(u_xlat9<0.0);
#else
    u_xlatb9 = u_xlat9<0.0;
#endif
    if((int(u_xlatb9) * int(0xffffffffu))!=0){discard;}
    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
    SV_Target0.xyz = u_xlat1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0;
    u_xlat1.xyz = _BurnedColor.xyz * u_xlat10_0.xyz + (-u_xlat10_0.xyz);
    u_xlat0.xyz = vs_TEXCOORD2.www * u_xlat1.xyz + u_xlat10_0.xyz;
    u_xlat0.w = vs_TEXCOORD3;
    SV_Target1 = u_xlat0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_2 = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb0) ? u_xlat16_2 : 0.0399999991;
    u_xlat0.x = (-vs_TEXCOORD2.w) + 1.0;
    u_xlat0.x = u_xlat0.x * _GrassShininess;
    SV_Target2.w = u_xlat0.x;
    SV_Target2.xy = vec2(0.0399999991, 0.0399999991);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_HDR_ON" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "MHY_SHADER_LOW" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	int unity_BaseInstanceID;
uniform 	float _NoiseScale;
uniform 	vec4 _WorldOffsetRange;
uniform 	float _HeightScale;
uniform 	float _Billboard;
uniform 	vec4 _LargeWindParam;
uniform 	vec4 _GlobalWind;
uniform 	float _GrassTipLighting;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BurnedColor;
uniform 	float _RootColorScale;
uniform 	float _RootColorOffset;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _Heightmap;
uniform lowp sampler2D _Noisemap;
in highp vec4 in_POSITION0;
in highp vec4 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec2 in_TEXCOORD2;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp float vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec3 u_xlat0;
uvec3 u_xlatu0;
vec4 u_xlat1;
int u_xlati1;
uvec3 u_xlatu1;
vec3 u_xlat2;
uvec2 u_xlatu2;
vec4 u_xlat3;
vec3 u_xlat4;
vec4 u_xlat5;
vec4 u_xlat6;
vec2 u_xlat7;
float u_xlat8;
uint u_xlatu8;
float u_xlat9;
int u_xlati9;
vec3 u_xlat11;
vec2 u_xlat17;
float u_xlat24;
int u_xlati24;
float u_xlat25;
bool u_xlatb25;
float u_xlat26;
uint u_xlatu26;
float u_xlat28;
void main()
{
    u_xlat0.y = 0.0;
    u_xlat24 = dot(_GlobalWind.xyz, _GlobalWind.xyz);
    u_xlat24 = max(u_xlat24, 0.00100000005);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat1 = vec4(u_xlat24) * _GlobalWind.xzxz;
    u_xlat17.xy = vec2(u_xlat1.z * _LargeWindParam.z, u_xlat1.w * _LargeWindParam.z);
    u_xlati24 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati24 = u_xlati24 << 2;
    u_xlat2.xyz = in_TEXCOORD0.yyy * unity_Builtins0Array[u_xlati24 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz;
    u_xlat2.xyz = unity_Builtins0Array[u_xlati24 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_TEXCOORD0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz + unity_Builtins0Array[u_xlati24 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat3.xy = u_xlat2.xz / vec2(_NoiseScale);
    u_xlat1.xy = _LargeWindParam.xx * u_xlat1.xy + u_xlat3.xy;
    u_xlat1.xy = textureLod(_Noisemap, u_xlat1.xy, 0.0).xy;
    u_xlat1.xy = u_xlat1.xy + vec2(-0.5, -0.5);
    u_xlat1.xy = u_xlat1.xy * _LargeWindParam.yy + vec2(0.5, 0.5);
    u_xlat26 = float(floatBitsToUint(unity_Builtins0Array[u_xlati24 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2]).w);
    u_xlat26 = u_xlat26 * 5.96046448e-08;
    u_xlatu26 = uint(u_xlat26);
    u_xlatu26 = u_xlatu26 & 3u;
    u_xlat26 = float(u_xlatu26);
    u_xlat3.x = (-in_TEXCOORD1.x) + unity_Builtins0Array[u_xlati24 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].x;
    u_xlat11.x = fract(u_xlat3.x);
    u_xlat3.x = u_xlat3.x + unity_Builtins0Array[u_xlati24 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].y;
    u_xlat3.xz = u_xlat3.xx * vec2(22.0, 33.0);
    u_xlat3.xz = fract(u_xlat3.xz);
    u_xlat3.xz = u_xlat3.xz + vec2(-0.5, -0.5);
    u_xlat4.xz = u_xlat3.xz * vec2(0.200000003, 0.200000003);
    u_xlat26 = u_xlat26 + u_xlat11.x;
    u_xlat26 = u_xlat26 + -0.5;
    u_xlat3.x = u_xlat26 * 0.333000004;
    u_xlat5.y = u_xlat26 * 0.333000004 + -1.0;
    u_xlat26 = in_TEXCOORD1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat26 = min(max(u_xlat26, 0.0), 1.0);
#else
    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);
#endif
    u_xlat3.x = u_xlat3.x * u_xlat26;
    u_xlat1.xy = u_xlat1.xy * u_xlat3.xx;
    u_xlat0.xz = u_xlat17.xy * u_xlat1.xy;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[0].x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[2].x;
    u_xlat17.x = dot(u_xlat1.xy, u_xlat1.xy);
    u_xlat17.x = inversesqrt(u_xlat17.x);
    u_xlat1.xy = u_xlat17.xx * u_xlat1.xy;
    u_xlat11.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati24 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat11.xyz = unity_Builtins0Array[u_xlati24 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat11.xyz;
    u_xlat11.xyz = unity_Builtins0Array[u_xlati24 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat11.xyz;
    u_xlat11.xyz = u_xlat11.xyz + unity_Builtins0Array[u_xlati24 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat11.xyz = (-u_xlat2.xyz) + u_xlat11.xyz;
    u_xlat6.x = unity_Builtins0Array[u_xlati24 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].x;
    u_xlat6.y = unity_Builtins0Array[u_xlati24 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].x;
    u_xlat17.x = dot(u_xlat6.xy, u_xlat6.xy);
    u_xlat17.x = inversesqrt(u_xlat17.x);
    u_xlat17.xy = u_xlat17.xx * u_xlat6.xy;
    u_xlat28 = u_xlat17.y * u_xlat11.z;
    u_xlat28 = u_xlat11.x * u_xlat17.x + (-u_xlat28);
    u_xlat17.x = dot(u_xlat11.zx, u_xlat17.xy);
    u_xlat17.xy = u_xlat1.xy * u_xlat17.xx;
    u_xlat9 = u_xlat28 * u_xlat1.y + (-u_xlat17.x);
    u_xlat1.x = u_xlat28 * u_xlat1.x + u_xlat17.y;
    u_xlat1.x = u_xlat11.z + u_xlat1.x;
    u_xlat11.z = (-u_xlat1.x) * _Billboard + u_xlat11.z;
    u_xlat1.x = u_xlat11.x + u_xlat9;
    u_xlat11.x = (-u_xlat1.x) * _Billboard + u_xlat11.x;
    u_xlat1.xyz = u_xlat11.xyz * vec3(0.100000001, 1.0, 0.100000001) + u_xlat0.xyz;
    u_xlat8 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat8 = max(u_xlat8, 0.00100000005);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat1.xyz = vec3(u_xlat8) * u_xlat1.xyz;
    u_xlat8 = dot(u_xlat11.xyz, u_xlat11.xyz);
    u_xlat8 = sqrt(u_xlat8);
    u_xlat6.xyz = u_xlat11.xyz * vec3(0.100000001, 1.0, 0.100000001);
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat8) + (-u_xlat6.xyz);
    u_xlat6.xyz = u_xlat2.xyz + u_xlat11.xyz;
    u_xlat2.xy = u_xlat2.xz + (-_WorldOffsetRange.xy);
    u_xlat2.xy = u_xlat2.xy + vec2(1.0, 1.0);
    u_xlat7.xy = vec2(_WorldOffsetRange.z + float(2.0), _WorldOffsetRange.w + float(2.0));
    u_xlat2.xy = u_xlat2.xy / u_xlat7.xy;
    u_xlat8 = textureLod(_Heightmap, u_xlat2.xy, 0.0).x;
    u_xlat6.w = u_xlat8 * _HeightScale + u_xlat6.y;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat6.xwz;
    u_xlatu2.xy = uvec2(65280u, 255u) & floatBitsToUint(unity_Builtins0Array[u_xlati24 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1]).ww;
    u_xlat2.xy = vec2(u_xlatu2.xy);
    u_xlat8 = u_xlat2.x * 0.00390625;
    u_xlat2.z = u_xlat2.y + -127.0;
    u_xlatu8 = uint(u_xlat8);
    u_xlat8 = float(u_xlatu8);
    u_xlat2.x = u_xlat8 + -127.0;
    u_xlat6.xy = u_xlat2.xz * vec2(0.00787401572, 0.00787401572);
    u_xlat6.xy = u_xlat6.xy * u_xlat6.xy;
    u_xlat8 = u_xlat6.y + u_xlat6.x;
    u_xlat8 = (-u_xlat8) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb25 = !!(0.0<u_xlat8);
#else
    u_xlatb25 = 0.0<u_xlat8;
#endif
    u_xlat8 = sqrt(u_xlat8);
    u_xlat2.y = u_xlatb25 ? u_xlat8 : float(0.0);
    u_xlat6.xyz = u_xlat2.xyz * u_xlat11.yyy;
    u_xlat6.xyz = u_xlat3.xxx * u_xlat6.xyz;
    u_xlat8 = max(u_xlat3.x, 9.99999972e-10);
    u_xlat0.yz = u_xlat0.zx / vec2(u_xlat8);
    u_xlat1.xyz = u_xlat6.xyz * vec3(0.00393700786, 0.0, 0.00393700786) + u_xlat1.xyz;
    u_xlat5.xz = u_xlat5.yy * (-u_xlat5.yy);
    u_xlat1.xyz = u_xlat5.xyz * u_xlat11.xyz + u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat5 = u_xlat3.yyyy * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat5 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat3.xxxx + u_xlat5;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat3.zzzz + u_xlat5;
    gl_Position = u_xlat3 + hlslcc_mtx4x4unity_MatrixVPZero[3];
    u_xlat4.y = 0.0;
    vs_TEXCOORD0.xyz = u_xlat2.xyz * vec3(0.00787401572, 1.0, 0.00787401572) + u_xlat4.xyz;
    vs_TEXCOORD0.w = 0.0;
    u_xlat0.x = 0.0;
    u_xlat0.xyz = u_xlat2.yzx * vec3(1.0, 0.00787401572, 0.00787401572) + u_xlat0.xyz;
    u_xlat25 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat25 = inversesqrt(u_xlat25);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat25);
    u_xlat2.xyz = in_NORMAL0.yyy * unity_Builtins0Array[u_xlati24 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat2.xyz = unity_Builtins0Array[u_xlati24 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_NORMAL0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = unity_Builtins0Array[u_xlati24 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_NORMAL0.zzz + u_xlat2.xyz;
    u_xlat25 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat25 = inversesqrt(u_xlat25);
    u_xlat2.xyz = vec3(u_xlat25) * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat0.xyz * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat0.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
    u_xlat25 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat25 = inversesqrt(u_xlat25);
    u_xlat2.xyz = vec3(u_xlat25) * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat0.xyz * u_xlat2.xyz;
    u_xlat0.xyz = u_xlat2.zxy * u_xlat0.yzx + (-u_xlat3.xyz);
    u_xlat25 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat25 = inversesqrt(u_xlat25);
    u_xlat1.xyz = vec3(u_xlat25) * u_xlat1.xyz;
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat0.xyz);
#ifdef UNITY_ADRENO_ES3
    { bool cond = 0.0<u_xlat1.x; u_xlati9 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati9 = int((0.0<u_xlat1.x) ? 0xFFFFFFFFu : uint(0u));
#endif
#ifdef UNITY_ADRENO_ES3
    { bool cond = u_xlat1.x<0.0; u_xlati1 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati1 = int((u_xlat1.x<0.0) ? 0xFFFFFFFFu : uint(0u));
#endif
    u_xlati1 = (-u_xlati9) + u_xlati1;
    u_xlat1.x = float(u_xlati1);
    vs_TEXCOORD1.xyz = u_xlat0.xyz * u_xlat1.xxx;
    vs_TEXCOORD1.w = 0.0;
    u_xlatu0.xyz = uvec3(16711680u, 65280u, 255u) & floatBitsToUint(unity_Builtins0Array[u_xlati24 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2]).www;
    u_xlat0.xyz = vec3(u_xlatu0.xyz);
    u_xlatu1.xyz = uvec3(16711680u, 65280u, 255u) & floatBitsToUint(unity_Builtins0Array[u_xlati24 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3]).www;
    u_xlat24 = max(1.0, unity_Builtins0Array[u_xlati24 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].w);
    u_xlat24 = min(u_xlat24, 2.0);
    u_xlat24 = u_xlat24 + -1.0;
    u_xlat1.xyz = vec3(u_xlatu1.xyz);
    u_xlat1.xyz = u_xlat1.xyz * vec3(5.9838392e-08, 1.53186284e-05, 0.00392156886);
    u_xlat0.xyz = u_xlat0.xyz * vec3(5.9838392e-08, 1.53186284e-05, 0.00392156886) + (-u_xlat1.xyz);
    u_xlat25 = u_xlat26 / _RootColorScale;
    u_xlat25 = u_xlat25 + _RootColorOffset;
#ifdef UNITY_ADRENO_ES3
    u_xlat25 = min(max(u_xlat25, 0.0), 1.0);
#else
    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
#endif
    u_xlat0.xyz = vec3(u_xlat25) * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat1.xyz = (-u_xlat0.xyz) + _BurnedColor.xyz;
    u_xlat0.xyz = vec3(u_xlat24) * u_xlat1.xyz + u_xlat0.xyz;
    vs_TEXCOORD2.w = u_xlat24;
    u_xlat24 = u_xlat26 + -0.600000024;
    vs_TEXCOORD3 = u_xlat26;
    u_xlat24 = max(u_xlat24, 0.0);
    u_xlat24 = _GrassTipLighting * u_xlat24 + 1.0;
    vs_TEXCOORD2.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    vs_TEXCOORD4.xy = in_TEXCOORD2.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	float _GrassShininess;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	float _CutOff;
uniform 	vec4 _BurnedColor;
uniform lowp sampler2D _MainTex;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp float vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec4 u_xlat0;
lowp vec4 u_xlat10_0;
bool u_xlatb0;
vec3 u_xlat1;
mediump float u_xlat16_2;
float u_xlat9;
bool u_xlatb9;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD4.xy);
    u_xlat9 = u_xlat10_0.w + (-_CutOff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(u_xlat9<0.0);
#else
    u_xlatb9 = u_xlat9<0.0;
#endif
    if((int(u_xlatb9) * int(0xffffffffu))!=0){discard;}
    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
    SV_Target0.xyz = u_xlat1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0;
    u_xlat1.xyz = _BurnedColor.xyz * u_xlat10_0.xyz + (-u_xlat10_0.xyz);
    u_xlat0.xyz = vs_TEXCOORD2.www * u_xlat1.xyz + u_xlat10_0.xyz;
    u_xlat0.w = vs_TEXCOORD3;
    SV_Target1 = u_xlat0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_2 = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb0) ? u_xlat16_2 : 0.0399999991;
    u_xlat0.x = (-vs_TEXCOORD2.w) + 1.0;
    u_xlat0.x = u_xlat0.x * _GrassShininess;
    SV_Target2.w = u_xlat0.x;
    SV_Target2.xy = vec2(0.0399999991, 0.0399999991);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_HDR_ON" "UNITY_DEBUG_VIEW_ON" "MHY_SHADER_LOW" "DITHER_FADE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	float _NoiseScale;
uniform 	vec4 _WorldOffsetRange;
uniform 	float _HeightScale;
uniform 	float _Billboard;
uniform 	vec4 _LargeWindParam;
uniform 	vec4 _GlobalWind;
uniform 	float _GrassTipLighting;
uniform 	vec4 _MainTex_ST;
uniform 	float _RootColorScale;
uniform 	float _RootColorOffset;
uniform highp sampler2D _Heightmap;
uniform lowp sampler2D _Noisemap;
in highp vec4 in_POSITION0;
in highp vec4 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec2 in_TEXCOORD2;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp float vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec3 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
vec3 u_xlat5;
vec3 u_xlat6;
vec4 u_xlat7;
int u_xlati8;
vec2 u_xlat9;
vec2 u_xlat17;
float u_xlat24;
float u_xlat25;
float u_xlat26;
float u_xlat27;
void main()
{
    u_xlat0.y = 0.0;
    u_xlat24 = dot(_GlobalWind.xyz, _GlobalWind.xyz);
    u_xlat24 = max(u_xlat24, 0.00100000005);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat1 = vec4(u_xlat24) * _GlobalWind.xzxz;
    u_xlat17.xy = vec2(u_xlat1.z * _LargeWindParam.z, u_xlat1.w * _LargeWindParam.z);
    u_xlat2.xyz = in_TEXCOORD0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[2].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TEXCOORD0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat3.xy = u_xlat2.xz / vec2(_NoiseScale);
    u_xlat1.xy = _LargeWindParam.xx * u_xlat1.xy + u_xlat3.xy;
    u_xlat1.xy = textureLod(_Noisemap, u_xlat1.xy, 0.0).xy;
    u_xlat1.xy = u_xlat1.xy + vec2(-0.5, -0.5);
    u_xlat1.xy = u_xlat1.xy * _LargeWindParam.yy + vec2(0.5, 0.5);
    u_xlat24 = (-in_TEXCOORD1.x) + hlslcc_mtx4x4unity_ObjectToWorld[1].x;
    u_xlat26 = fract(u_xlat24);
    u_xlat24 = u_xlat24 + hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat3.xy = vec2(u_xlat24) * vec2(22.0, 33.0);
    u_xlat3.xy = fract(u_xlat3.xy);
    u_xlat3.xy = u_xlat3.xy + vec2(-0.5, -0.5);
    u_xlat3.xz = u_xlat3.xy * vec2(0.200000003, 0.200000003);
    u_xlat24 = u_xlat26 + -0.5;
    u_xlat26 = u_xlat24 * 0.333000004;
    u_xlat4.y = u_xlat24 * 0.333000004 + -1.0;
    u_xlat24 = in_TEXCOORD1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat26 = u_xlat26 * u_xlat24;
    u_xlat1.xy = u_xlat1.xy * vec2(u_xlat26);
    u_xlat0.xz = u_xlat17.xy * u_xlat1.xy;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[0].x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[2].x;
    u_xlat17.x = dot(u_xlat1.xy, u_xlat1.xy);
    u_xlat17.x = inversesqrt(u_xlat17.x);
    u_xlat1.xy = u_xlat17.xx * u_xlat1.xy;
    u_xlat5.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;
    u_xlat5.y = hlslcc_mtx4x4unity_ObjectToWorld[2].x;
    u_xlat17.x = dot(u_xlat5.xy, u_xlat5.xy);
    u_xlat17.x = inversesqrt(u_xlat17.x);
    u_xlat17.xy = u_xlat17.xx * u_xlat5.xy;
    u_xlat5.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat5.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat5.xyz;
    u_xlat5.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat5.xyz;
    u_xlat5.xyz = u_xlat5.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat5.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
    u_xlat27 = u_xlat17.y * u_xlat5.z;
    u_xlat27 = u_xlat5.x * u_xlat17.x + (-u_xlat27);
    u_xlat17.x = dot(u_xlat5.zx, u_xlat17.xy);
    u_xlat17.xy = u_xlat1.xy * u_xlat17.xx;
    u_xlat9.x = u_xlat27 * u_xlat1.y + (-u_xlat17.x);
    u_xlat1.x = u_xlat27 * u_xlat1.x + u_xlat17.y;
    u_xlat1.x = u_xlat5.z + u_xlat1.x;
    u_xlat5.z = (-u_xlat1.x) * _Billboard + u_xlat5.z;
    u_xlat1.x = u_xlat5.x + u_xlat9.x;
    u_xlat5.x = (-u_xlat1.x) * _Billboard + u_xlat5.x;
    u_xlat1.x = u_xlat26 * u_xlat5.y;
    u_xlat9.x = max(u_xlat26, 9.99999972e-10);
    u_xlat9.xy = u_xlat0.zx / u_xlat9.xx;
    u_xlat0.xyz = u_xlat5.xyz * vec3(0.100000001, 1.0, 0.100000001) + u_xlat0.xyz;
    u_xlat6.yz = u_xlat9.xy + vec2(-1.0, -1.0);
    u_xlat9.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9.x = max(u_xlat9.x, 0.00100000005);
    u_xlat9.x = inversesqrt(u_xlat9.x);
    u_xlat0.xyz = u_xlat0.xyz * u_xlat9.xxx;
    u_xlat9.x = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat9.x = sqrt(u_xlat9.x);
    u_xlat7.xyz = u_xlat5.xyz * vec3(0.100000001, 1.0, 0.100000001);
    u_xlat0.xyz = u_xlat0.xyz * u_xlat9.xxx + (-u_xlat7.xyz);
    u_xlat7.xyz = u_xlat2.xyz + u_xlat5.xyz;
    u_xlat9.xy = u_xlat2.xz + (-_WorldOffsetRange.xy);
    u_xlat9.xy = u_xlat9.xy + vec2(1.0, 1.0);
    u_xlat2.xy = vec2(_WorldOffsetRange.z + float(2.0), _WorldOffsetRange.w + float(2.0));
    u_xlat9.xy = u_xlat9.xy / u_xlat2.xy;
    u_xlat9.x = textureLod(_Heightmap, u_xlat9.xy, 0.0).x;
    u_xlat7.w = u_xlat9.x * _HeightScale + u_xlat7.y;
    u_xlat0.xyz = u_xlat0.xyz + u_xlat7.xwz;
    u_xlat0.xyz = u_xlat1.xxx * vec3(-0.5, 0.0, -0.5) + u_xlat0.xyz;
    u_xlat4.xz = u_xlat4.yy * (-u_xlat4.yy);
    u_xlat0.xyz = u_xlat4.xyz * u_xlat5.xyz + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVPZero[3];
    u_xlat3.y = 0.0;
    vs_TEXCOORD0.xyz = u_xlat3.xyz + vec3(-1.0, 0.0, -1.0);
    vs_TEXCOORD0.w = 0.0;
    u_xlat1.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xxx;
    u_xlat1.x = dot(u_xlat6.yz, u_xlat6.yz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat6.x = 0.0;
    u_xlat1.xyz = u_xlat1.xxx * u_xlat6.xyz;
    u_xlat2.xyz = in_NORMAL0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_NORMAL0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_NORMAL0.zzz + u_xlat2.xyz;
    u_xlat25 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat25 = inversesqrt(u_xlat25);
    u_xlat2.xyz = vec3(u_xlat25) * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
    u_xlat25 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat25 = inversesqrt(u_xlat25);
    u_xlat2.xyz = vec3(u_xlat25) * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.zxy * u_xlat1.yzx + (-u_xlat3.xyz);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
#ifdef UNITY_ADRENO_ES3
    { bool cond = 0.0<u_xlat0.x; u_xlati8 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati8 = int((0.0<u_xlat0.x) ? 0xFFFFFFFFu : uint(0u));
#endif
#ifdef UNITY_ADRENO_ES3
    { bool cond = u_xlat0.x<0.0; u_xlati0 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati0 = int((u_xlat0.x<0.0) ? 0xFFFFFFFFu : uint(0u));
#endif
    u_xlati0 = (-u_xlati8) + u_xlati0;
    u_xlat0.x = float(u_xlati0);
    vs_TEXCOORD1.xyz = u_xlat0.xxx * u_xlat1.xyz;
    vs_TEXCOORD1.w = 0.0;
    u_xlat0.x = u_xlat24 / _RootColorScale;
    u_xlat0.x = u_xlat0.x + _RootColorOffset;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xxx * vec3(-0.501960814, 0.0, 0.0) + vec3(0.501960814, 0.0, 0.0);
    u_xlat1.x = u_xlat24 + -0.600000024;
    vs_TEXCOORD3 = u_xlat24;
    u_xlat24 = max(u_xlat1.x, 0.0);
    u_xlat24 = _GrassTipLighting * u_xlat24 + 1.0;
    vs_TEXCOORD2.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    vs_TEXCOORD2.w = 0.0;
    vs_TEXCOORD4.xy = in_TEXCOORD2.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	float _GrassShininess;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	float _CutOff;
uniform 	vec4 _BurnedColor;
uniform lowp sampler2D _MainTex;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp float vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec4 u_xlat0;
lowp vec4 u_xlat10_0;
bool u_xlatb0;
vec3 u_xlat1;
mediump float u_xlat16_2;
float u_xlat9;
bool u_xlatb9;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD4.xy);
    u_xlat9 = u_xlat10_0.w + (-_CutOff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(u_xlat9<0.0);
#else
    u_xlatb9 = u_xlat9<0.0;
#endif
    if((int(u_xlatb9) * int(0xffffffffu))!=0){discard;}
    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
    SV_Target0.xyz = u_xlat1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0;
    u_xlat1.xyz = _BurnedColor.xyz * u_xlat10_0.xyz + (-u_xlat10_0.xyz);
    u_xlat0.xyz = vs_TEXCOORD2.www * u_xlat1.xyz + u_xlat10_0.xyz;
    u_xlat0.w = vs_TEXCOORD3;
    SV_Target1 = u_xlat0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_2 = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb0) ? u_xlat16_2 : 0.0399999991;
    u_xlat0.x = (-vs_TEXCOORD2.w) + 1.0;
    u_xlat0.x = u_xlat0.x * _GrassShininess;
    SV_Target2.w = u_xlat0.x;
    SV_Target2.xy = vec2(0.0399999991, 0.0399999991);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_HDR_ON" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "MHY_SHADER_LOW" "DITHER_FADE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	int unity_BaseInstanceID;
uniform 	float _NoiseScale;
uniform 	vec4 _WorldOffsetRange;
uniform 	float _HeightScale;
uniform 	float _Billboard;
uniform 	vec4 _LargeWindParam;
uniform 	vec4 _GlobalWind;
uniform 	float _GrassTipLighting;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BurnedColor;
uniform 	float _RootColorScale;
uniform 	float _RootColorOffset;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _Heightmap;
uniform lowp sampler2D _Noisemap;
in highp vec4 in_POSITION0;
in highp vec4 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec2 in_TEXCOORD2;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp float vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec3 u_xlat0;
uvec3 u_xlatu0;
vec4 u_xlat1;
int u_xlati1;
uvec3 u_xlatu1;
vec3 u_xlat2;
uvec2 u_xlatu2;
vec4 u_xlat3;
vec3 u_xlat4;
vec4 u_xlat5;
vec4 u_xlat6;
vec2 u_xlat7;
float u_xlat8;
uint u_xlatu8;
float u_xlat9;
int u_xlati9;
vec3 u_xlat11;
vec2 u_xlat17;
float u_xlat24;
int u_xlati24;
float u_xlat25;
bool u_xlatb25;
float u_xlat26;
uint u_xlatu26;
float u_xlat28;
void main()
{
    u_xlat0.y = 0.0;
    u_xlat24 = dot(_GlobalWind.xyz, _GlobalWind.xyz);
    u_xlat24 = max(u_xlat24, 0.00100000005);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat1 = vec4(u_xlat24) * _GlobalWind.xzxz;
    u_xlat17.xy = vec2(u_xlat1.z * _LargeWindParam.z, u_xlat1.w * _LargeWindParam.z);
    u_xlati24 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati24 = u_xlati24 << 2;
    u_xlat2.xyz = in_TEXCOORD0.yyy * unity_Builtins0Array[u_xlati24 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz;
    u_xlat2.xyz = unity_Builtins0Array[u_xlati24 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_TEXCOORD0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz + unity_Builtins0Array[u_xlati24 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat3.xy = u_xlat2.xz / vec2(_NoiseScale);
    u_xlat1.xy = _LargeWindParam.xx * u_xlat1.xy + u_xlat3.xy;
    u_xlat1.xy = textureLod(_Noisemap, u_xlat1.xy, 0.0).xy;
    u_xlat1.xy = u_xlat1.xy + vec2(-0.5, -0.5);
    u_xlat1.xy = u_xlat1.xy * _LargeWindParam.yy + vec2(0.5, 0.5);
    u_xlat26 = float(floatBitsToUint(unity_Builtins0Array[u_xlati24 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2]).w);
    u_xlat26 = u_xlat26 * 5.96046448e-08;
    u_xlatu26 = uint(u_xlat26);
    u_xlatu26 = u_xlatu26 & 3u;
    u_xlat26 = float(u_xlatu26);
    u_xlat3.x = (-in_TEXCOORD1.x) + unity_Builtins0Array[u_xlati24 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].x;
    u_xlat11.x = fract(u_xlat3.x);
    u_xlat3.x = u_xlat3.x + unity_Builtins0Array[u_xlati24 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].y;
    u_xlat3.xz = u_xlat3.xx * vec2(22.0, 33.0);
    u_xlat3.xz = fract(u_xlat3.xz);
    u_xlat3.xz = u_xlat3.xz + vec2(-0.5, -0.5);
    u_xlat4.xz = u_xlat3.xz * vec2(0.200000003, 0.200000003);
    u_xlat26 = u_xlat26 + u_xlat11.x;
    u_xlat26 = u_xlat26 + -0.5;
    u_xlat3.x = u_xlat26 * 0.333000004;
    u_xlat5.y = u_xlat26 * 0.333000004 + -1.0;
    u_xlat26 = in_TEXCOORD1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat26 = min(max(u_xlat26, 0.0), 1.0);
#else
    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);
#endif
    u_xlat3.x = u_xlat3.x * u_xlat26;
    u_xlat1.xy = u_xlat1.xy * u_xlat3.xx;
    u_xlat0.xz = u_xlat17.xy * u_xlat1.xy;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[0].x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[2].x;
    u_xlat17.x = dot(u_xlat1.xy, u_xlat1.xy);
    u_xlat17.x = inversesqrt(u_xlat17.x);
    u_xlat1.xy = u_xlat17.xx * u_xlat1.xy;
    u_xlat11.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati24 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat11.xyz = unity_Builtins0Array[u_xlati24 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat11.xyz;
    u_xlat11.xyz = unity_Builtins0Array[u_xlati24 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat11.xyz;
    u_xlat11.xyz = u_xlat11.xyz + unity_Builtins0Array[u_xlati24 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat11.xyz = (-u_xlat2.xyz) + u_xlat11.xyz;
    u_xlat6.x = unity_Builtins0Array[u_xlati24 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].x;
    u_xlat6.y = unity_Builtins0Array[u_xlati24 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].x;
    u_xlat17.x = dot(u_xlat6.xy, u_xlat6.xy);
    u_xlat17.x = inversesqrt(u_xlat17.x);
    u_xlat17.xy = u_xlat17.xx * u_xlat6.xy;
    u_xlat28 = u_xlat17.y * u_xlat11.z;
    u_xlat28 = u_xlat11.x * u_xlat17.x + (-u_xlat28);
    u_xlat17.x = dot(u_xlat11.zx, u_xlat17.xy);
    u_xlat17.xy = u_xlat1.xy * u_xlat17.xx;
    u_xlat9 = u_xlat28 * u_xlat1.y + (-u_xlat17.x);
    u_xlat1.x = u_xlat28 * u_xlat1.x + u_xlat17.y;
    u_xlat1.x = u_xlat11.z + u_xlat1.x;
    u_xlat11.z = (-u_xlat1.x) * _Billboard + u_xlat11.z;
    u_xlat1.x = u_xlat11.x + u_xlat9;
    u_xlat11.x = (-u_xlat1.x) * _Billboard + u_xlat11.x;
    u_xlat1.xyz = u_xlat11.xyz * vec3(0.100000001, 1.0, 0.100000001) + u_xlat0.xyz;
    u_xlat8 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat8 = max(u_xlat8, 0.00100000005);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat1.xyz = vec3(u_xlat8) * u_xlat1.xyz;
    u_xlat8 = dot(u_xlat11.xyz, u_xlat11.xyz);
    u_xlat8 = sqrt(u_xlat8);
    u_xlat6.xyz = u_xlat11.xyz * vec3(0.100000001, 1.0, 0.100000001);
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat8) + (-u_xlat6.xyz);
    u_xlat6.xyz = u_xlat2.xyz + u_xlat11.xyz;
    u_xlat2.xy = u_xlat2.xz + (-_WorldOffsetRange.xy);
    u_xlat2.xy = u_xlat2.xy + vec2(1.0, 1.0);
    u_xlat7.xy = vec2(_WorldOffsetRange.z + float(2.0), _WorldOffsetRange.w + float(2.0));
    u_xlat2.xy = u_xlat2.xy / u_xlat7.xy;
    u_xlat8 = textureLod(_Heightmap, u_xlat2.xy, 0.0).x;
    u_xlat6.w = u_xlat8 * _HeightScale + u_xlat6.y;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat6.xwz;
    u_xlatu2.xy = uvec2(65280u, 255u) & floatBitsToUint(unity_Builtins0Array[u_xlati24 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1]).ww;
    u_xlat2.xy = vec2(u_xlatu2.xy);
    u_xlat8 = u_xlat2.x * 0.00390625;
    u_xlat2.z = u_xlat2.y + -127.0;
    u_xlatu8 = uint(u_xlat8);
    u_xlat8 = float(u_xlatu8);
    u_xlat2.x = u_xlat8 + -127.0;
    u_xlat6.xy = u_xlat2.xz * vec2(0.00787401572, 0.00787401572);
    u_xlat6.xy = u_xlat6.xy * u_xlat6.xy;
    u_xlat8 = u_xlat6.y + u_xlat6.x;
    u_xlat8 = (-u_xlat8) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb25 = !!(0.0<u_xlat8);
#else
    u_xlatb25 = 0.0<u_xlat8;
#endif
    u_xlat8 = sqrt(u_xlat8);
    u_xlat2.y = u_xlatb25 ? u_xlat8 : float(0.0);
    u_xlat6.xyz = u_xlat2.xyz * u_xlat11.yyy;
    u_xlat6.xyz = u_xlat3.xxx * u_xlat6.xyz;
    u_xlat8 = max(u_xlat3.x, 9.99999972e-10);
    u_xlat0.yz = u_xlat0.zx / vec2(u_xlat8);
    u_xlat1.xyz = u_xlat6.xyz * vec3(0.00393700786, 0.0, 0.00393700786) + u_xlat1.xyz;
    u_xlat5.xz = u_xlat5.yy * (-u_xlat5.yy);
    u_xlat1.xyz = u_xlat5.xyz * u_xlat11.xyz + u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat5 = u_xlat3.yyyy * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat5 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat3.xxxx + u_xlat5;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat3.zzzz + u_xlat5;
    gl_Position = u_xlat3 + hlslcc_mtx4x4unity_MatrixVPZero[3];
    u_xlat4.y = 0.0;
    vs_TEXCOORD0.xyz = u_xlat2.xyz * vec3(0.00787401572, 1.0, 0.00787401572) + u_xlat4.xyz;
    vs_TEXCOORD0.w = 0.0;
    u_xlat0.x = 0.0;
    u_xlat0.xyz = u_xlat2.yzx * vec3(1.0, 0.00787401572, 0.00787401572) + u_xlat0.xyz;
    u_xlat25 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat25 = inversesqrt(u_xlat25);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat25);
    u_xlat2.xyz = in_NORMAL0.yyy * unity_Builtins0Array[u_xlati24 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat2.xyz = unity_Builtins0Array[u_xlati24 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_NORMAL0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = unity_Builtins0Array[u_xlati24 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_NORMAL0.zzz + u_xlat2.xyz;
    u_xlat25 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat25 = inversesqrt(u_xlat25);
    u_xlat2.xyz = vec3(u_xlat25) * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat0.xyz * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat0.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
    u_xlat25 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat25 = inversesqrt(u_xlat25);
    u_xlat2.xyz = vec3(u_xlat25) * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat0.xyz * u_xlat2.xyz;
    u_xlat0.xyz = u_xlat2.zxy * u_xlat0.yzx + (-u_xlat3.xyz);
    u_xlat25 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat25 = inversesqrt(u_xlat25);
    u_xlat1.xyz = vec3(u_xlat25) * u_xlat1.xyz;
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat0.xyz);
#ifdef UNITY_ADRENO_ES3
    { bool cond = 0.0<u_xlat1.x; u_xlati9 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati9 = int((0.0<u_xlat1.x) ? 0xFFFFFFFFu : uint(0u));
#endif
#ifdef UNITY_ADRENO_ES3
    { bool cond = u_xlat1.x<0.0; u_xlati1 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati1 = int((u_xlat1.x<0.0) ? 0xFFFFFFFFu : uint(0u));
#endif
    u_xlati1 = (-u_xlati9) + u_xlati1;
    u_xlat1.x = float(u_xlati1);
    vs_TEXCOORD1.xyz = u_xlat0.xyz * u_xlat1.xxx;
    vs_TEXCOORD1.w = 0.0;
    u_xlatu0.xyz = uvec3(16711680u, 65280u, 255u) & floatBitsToUint(unity_Builtins0Array[u_xlati24 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2]).www;
    u_xlat0.xyz = vec3(u_xlatu0.xyz);
    u_xlatu1.xyz = uvec3(16711680u, 65280u, 255u) & floatBitsToUint(unity_Builtins0Array[u_xlati24 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3]).www;
    u_xlat24 = max(1.0, unity_Builtins0Array[u_xlati24 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].w);
    u_xlat24 = min(u_xlat24, 2.0);
    u_xlat24 = u_xlat24 + -1.0;
    u_xlat1.xyz = vec3(u_xlatu1.xyz);
    u_xlat1.xyz = u_xlat1.xyz * vec3(5.9838392e-08, 1.53186284e-05, 0.00392156886);
    u_xlat0.xyz = u_xlat0.xyz * vec3(5.9838392e-08, 1.53186284e-05, 0.00392156886) + (-u_xlat1.xyz);
    u_xlat25 = u_xlat26 / _RootColorScale;
    u_xlat25 = u_xlat25 + _RootColorOffset;
#ifdef UNITY_ADRENO_ES3
    u_xlat25 = min(max(u_xlat25, 0.0), 1.0);
#else
    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
#endif
    u_xlat0.xyz = vec3(u_xlat25) * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat1.xyz = (-u_xlat0.xyz) + _BurnedColor.xyz;
    u_xlat0.xyz = vec3(u_xlat24) * u_xlat1.xyz + u_xlat0.xyz;
    vs_TEXCOORD2.w = u_xlat24;
    u_xlat24 = u_xlat26 + -0.600000024;
    vs_TEXCOORD3 = u_xlat26;
    u_xlat24 = max(u_xlat24, 0.0);
    u_xlat24 = _GrassTipLighting * u_xlat24 + 1.0;
    vs_TEXCOORD2.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    vs_TEXCOORD4.xy = in_TEXCOORD2.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	float _GrassShininess;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	float _CutOff;
uniform 	vec4 _BurnedColor;
uniform lowp sampler2D _MainTex;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp float vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec4 u_xlat0;
lowp vec4 u_xlat10_0;
bool u_xlatb0;
vec3 u_xlat1;
mediump float u_xlat16_2;
float u_xlat9;
bool u_xlatb9;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD4.xy);
    u_xlat9 = u_xlat10_0.w + (-_CutOff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(u_xlat9<0.0);
#else
    u_xlatb9 = u_xlat9<0.0;
#endif
    if((int(u_xlatb9) * int(0xffffffffu))!=0){discard;}
    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
    SV_Target0.xyz = u_xlat1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0;
    u_xlat1.xyz = _BurnedColor.xyz * u_xlat10_0.xyz + (-u_xlat10_0.xyz);
    u_xlat0.xyz = vs_TEXCOORD2.www * u_xlat1.xyz + u_xlat10_0.xyz;
    u_xlat0.w = vs_TEXCOORD3;
    SV_Target1 = u_xlat0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_2 = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb0) ? u_xlat16_2 : 0.0399999991;
    u_xlat0.x = (-vs_TEXCOORD2.w) + 1.0;
    u_xlat0.x = u_xlat0.x * _GrassShininess;
    SV_Target2.w = u_xlat0.x;
    SV_Target2.xy = vec2(0.0399999991, 0.0399999991);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_HDR_ON" "UNITY_DEBUG_VIEW_ON" "MHY_SHADER_LOW" "SOFT_SAMPLE_HEIGHT_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	float _NoiseScale;
uniform 	vec4 _WorldOffsetRange;
uniform 	float _HeightScale;
uniform 	float _Billboard;
uniform 	vec4 _LargeWindParam;
uniform 	vec4 _GlobalWind;
uniform 	float _GrassTipLighting;
uniform 	vec4 _MainTex_ST;
uniform 	float _RootColorScale;
uniform 	float _RootColorOffset;
uniform highp sampler2D _Heightmap;
uniform lowp sampler2D _Noisemap;
in highp vec4 in_POSITION0;
in highp vec4 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec2 in_TEXCOORD2;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp float vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec3 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
vec3 u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
vec2 u_xlat8;
int u_xlati8;
vec2 u_xlat9;
vec2 u_xlat16;
vec2 u_xlat20;
float u_xlat24;
float u_xlat25;
void main()
{
    u_xlat0.xy = vec2(_WorldOffsetRange.z + float(2.0), _WorldOffsetRange.w + float(2.0));
    u_xlat1.xyz = in_TEXCOORD0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[2].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TEXCOORD0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat16.xy = u_xlat1.xz + (-_WorldOffsetRange.xy);
    u_xlat16.xy = u_xlat16.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat16.xy / u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * _WorldOffsetRange.zw + vec2(-0.5, -0.5);
    u_xlat16.xy = floor(u_xlat0.xy);
    u_xlat0.xy = (-u_xlat16.xy) + u_xlat0.xy;
    u_xlat2 = u_xlat16.xyxy + vec4(0.5, 1.5, 1.5, 1.5);
    u_xlat3 = u_xlat16.xyxy + vec4(1.5, 0.5, 0.5, 0.5);
    u_xlat3 = vec4(u_xlat3.x / _WorldOffsetRange.z, u_xlat3.y / _WorldOffsetRange.w, u_xlat3.z / _WorldOffsetRange.z, u_xlat3.w / _WorldOffsetRange.w);
    u_xlat2 = vec4(u_xlat2.x / _WorldOffsetRange.z, u_xlat2.y / _WorldOffsetRange.w, u_xlat2.z / _WorldOffsetRange.z, u_xlat2.w / _WorldOffsetRange.w);
    u_xlat16.x = textureLod(_Heightmap, u_xlat2.zw, 0.0).x;
    u_xlat24 = textureLod(_Heightmap, u_xlat2.xy, 0.0).x;
    u_xlat16.x = (-u_xlat24) + u_xlat16.x;
    u_xlat16.x = u_xlat0.x * u_xlat16.x + u_xlat24;
    u_xlat24 = textureLod(_Heightmap, u_xlat3.xy, 0.0).x;
    u_xlat25 = textureLod(_Heightmap, u_xlat3.zw, 0.0).x;
    u_xlat24 = u_xlat24 + (-u_xlat25);
    u_xlat0.x = u_xlat0.x * u_xlat24 + u_xlat25;
    u_xlat16.x = (-u_xlat0.x) + u_xlat16.x;
    u_xlat0.x = u_xlat0.y * u_xlat16.x + u_xlat0.x;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[0].x;
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[2].x;
    u_xlat8.x = dot(u_xlat2.xy, u_xlat2.xy);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat8.xy = u_xlat8.xx * u_xlat2.xy;
    u_xlat2.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;
    u_xlat2.y = hlslcc_mtx4x4unity_ObjectToWorld[2].x;
    u_xlat24 = dot(u_xlat2.xy, u_xlat2.xy);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat2.xy = vec2(u_xlat24) * u_xlat2.xy;
    u_xlat3.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat3.xyz = (-u_xlat1.xyz) + u_xlat3.xyz;
    u_xlat24 = u_xlat2.y * u_xlat3.z;
    u_xlat24 = u_xlat3.x * u_xlat2.x + (-u_xlat24);
    u_xlat25 = dot(u_xlat3.zx, u_xlat2.xy);
    u_xlat2.xy = u_xlat8.xy * vec2(u_xlat25);
    u_xlat16.x = u_xlat24 * u_xlat8.y + (-u_xlat2.x);
    u_xlat8.x = u_xlat24 * u_xlat8.x + u_xlat2.y;
    u_xlat8.x = u_xlat3.z + u_xlat8.x;
    u_xlat3.z = (-u_xlat8.x) * _Billboard + u_xlat3.z;
    u_xlat8.x = u_xlat3.x + u_xlat16.x;
    u_xlat3.x = (-u_xlat8.x) * _Billboard + u_xlat3.x;
    u_xlat2.xyz = u_xlat1.xyz + u_xlat3.xyz;
    u_xlat8.xy = u_xlat1.xz / vec2(_NoiseScale);
    u_xlat2.w = u_xlat0.x * _HeightScale + u_xlat2.y;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat1.xyz = u_xlat3.xyz * vec3(0.100000001, 1.0, 0.100000001);
    u_xlat24 = dot(_GlobalWind.xyz, _GlobalWind.xyz);
    u_xlat24 = max(u_xlat24, 0.00100000005);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat4 = vec4(u_xlat24) * _GlobalWind.xzxz;
    u_xlat20.xy = vec2(u_xlat4.z * _LargeWindParam.z, u_xlat4.w * _LargeWindParam.z);
    u_xlat8.xy = _LargeWindParam.xx * u_xlat4.xy + u_xlat8.xy;
    u_xlat8.xy = textureLod(_Noisemap, u_xlat8.xy, 0.0).xy;
    u_xlat8.xy = u_xlat8.xy + vec2(-0.5, -0.5);
    u_xlat8.xy = u_xlat8.xy * _LargeWindParam.yy + vec2(0.5, 0.5);
    u_xlat24 = (-in_TEXCOORD1.x) + hlslcc_mtx4x4unity_ObjectToWorld[1].x;
    u_xlat25 = fract(u_xlat24);
    u_xlat24 = u_xlat24 + hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat4.xy = vec2(u_xlat24) * vec2(22.0, 33.0);
    u_xlat4.xy = fract(u_xlat4.xy);
    u_xlat4.xy = u_xlat4.xy + vec2(-0.5, -0.5);
    u_xlat5.xz = u_xlat4.xy * vec2(0.200000003, 0.200000003);
    u_xlat24 = u_xlat25 + -0.5;
    u_xlat25 = u_xlat24 * 0.333000004;
    u_xlat6.y = u_xlat24 * 0.333000004 + -1.0;
    u_xlat24 = in_TEXCOORD1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat25 = u_xlat25 * u_xlat24;
    u_xlat8.xy = u_xlat8.xy * vec2(u_xlat25);
    u_xlat4.xz = u_xlat20.xy * u_xlat8.xy;
    u_xlat4.y = 0.0;
    u_xlat7.xyz = u_xlat3.xyz * vec3(0.100000001, 1.0, 0.100000001) + u_xlat4.xyz;
    u_xlat8.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat8.x = max(u_xlat8.x, 0.00100000005);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat7.xyz = u_xlat8.xxx * u_xlat7.xyz;
    u_xlat0.xyz = u_xlat7.xyz * u_xlat0.xxx + (-u_xlat1.xyz);
    u_xlat0.xyz = u_xlat0.xyz + u_xlat2.xwz;
    u_xlat1.x = u_xlat3.y * u_xlat25;
    u_xlat9.x = max(u_xlat25, 9.99999972e-10);
    u_xlat9.xy = u_xlat4.zx / u_xlat9.xx;
    u_xlat2.yz = u_xlat9.xy + vec2(-1.0, -1.0);
    u_xlat0.xyz = u_xlat1.xxx * vec3(-0.5, 0.0, -0.5) + u_xlat0.xyz;
    u_xlat6.xz = u_xlat6.yy * (-u_xlat6.yy);
    u_xlat0.xyz = u_xlat6.xyz * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat1.xxxx + u_xlat3;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat1.zzzz + u_xlat3;
    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVPZero[3];
    u_xlat5.y = 0.0;
    vs_TEXCOORD0.xyz = u_xlat5.xyz + vec3(-1.0, 0.0, -1.0);
    vs_TEXCOORD0.w = 0.0;
    u_xlat1.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xxx;
    u_xlat1.x = dot(u_xlat2.yz, u_xlat2.yz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat2.x = 0.0;
    u_xlat1.xyz = u_xlat1.xxx * u_xlat2.xyz;
    u_xlat2.xyz = in_NORMAL0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_NORMAL0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_NORMAL0.zzz + u_xlat2.xyz;
    u_xlat25 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat25 = inversesqrt(u_xlat25);
    u_xlat2.xyz = vec3(u_xlat25) * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
    u_xlat25 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat25 = inversesqrt(u_xlat25);
    u_xlat2.xyz = vec3(u_xlat25) * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.zxy * u_xlat1.yzx + (-u_xlat3.xyz);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
#ifdef UNITY_ADRENO_ES3
    { bool cond = 0.0<u_xlat0.x; u_xlati8 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati8 = int((0.0<u_xlat0.x) ? 0xFFFFFFFFu : uint(0u));
#endif
#ifdef UNITY_ADRENO_ES3
    { bool cond = u_xlat0.x<0.0; u_xlati0 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati0 = int((u_xlat0.x<0.0) ? 0xFFFFFFFFu : uint(0u));
#endif
    u_xlati0 = (-u_xlati8) + u_xlati0;
    u_xlat0.x = float(u_xlati0);
    vs_TEXCOORD1.xyz = u_xlat0.xxx * u_xlat1.xyz;
    vs_TEXCOORD1.w = 0.0;
    u_xlat0.x = u_xlat24 / _RootColorScale;
    u_xlat0.x = u_xlat0.x + _RootColorOffset;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xxx * vec3(-0.501960814, 0.0, 0.0) + vec3(0.501960814, 0.0, 0.0);
    u_xlat1.x = u_xlat24 + -0.600000024;
    vs_TEXCOORD3 = u_xlat24;
    u_xlat24 = max(u_xlat1.x, 0.0);
    u_xlat24 = _GrassTipLighting * u_xlat24 + 1.0;
    vs_TEXCOORD2.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    vs_TEXCOORD2.w = 0.0;
    vs_TEXCOORD4.xy = in_TEXCOORD2.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	float _GrassShininess;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	float _CutOff;
uniform 	vec4 _BurnedColor;
uniform lowp sampler2D _MainTex;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp float vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec4 u_xlat0;
lowp vec4 u_xlat10_0;
bool u_xlatb0;
vec3 u_xlat1;
mediump float u_xlat16_2;
float u_xlat9;
bool u_xlatb9;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD4.xy);
    u_xlat9 = u_xlat10_0.w + (-_CutOff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(u_xlat9<0.0);
#else
    u_xlatb9 = u_xlat9<0.0;
#endif
    if((int(u_xlatb9) * int(0xffffffffu))!=0){discard;}
    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
    SV_Target0.xyz = u_xlat1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0;
    u_xlat1.xyz = _BurnedColor.xyz * u_xlat10_0.xyz + (-u_xlat10_0.xyz);
    u_xlat0.xyz = vs_TEXCOORD2.www * u_xlat1.xyz + u_xlat10_0.xyz;
    u_xlat0.w = vs_TEXCOORD3;
    SV_Target1 = u_xlat0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_2 = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb0) ? u_xlat16_2 : 0.0399999991;
    u_xlat0.x = (-vs_TEXCOORD2.w) + 1.0;
    u_xlat0.x = u_xlat0.x * _GrassShininess;
    SV_Target2.w = u_xlat0.x;
    SV_Target2.xy = vec2(0.0399999991, 0.0399999991);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_HDR_ON" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "MHY_SHADER_LOW" "SOFT_SAMPLE_HEIGHT_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	int unity_BaseInstanceID;
uniform 	float _NoiseScale;
uniform 	vec4 _WorldOffsetRange;
uniform 	float _HeightScale;
uniform 	float _Billboard;
uniform 	vec4 _LargeWindParam;
uniform 	vec4 _GlobalWind;
uniform 	float _GrassTipLighting;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BurnedColor;
uniform 	float _RootColorScale;
uniform 	float _RootColorOffset;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _Heightmap;
uniform lowp sampler2D _Noisemap;
in highp vec4 in_POSITION0;
in highp vec4 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec2 in_TEXCOORD2;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp float vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec3 u_xlat0;
uvec3 u_xlatu0;
vec4 u_xlat1;
int u_xlati1;
uvec3 u_xlatu1;
vec3 u_xlat2;
uvec2 u_xlatu2;
vec4 u_xlat3;
vec3 u_xlat4;
vec4 u_xlat5;
vec4 u_xlat6;
vec4 u_xlat7;
vec4 u_xlat8;
float u_xlat9;
uint u_xlatu9;
float u_xlat10;
int u_xlati10;
vec3 u_xlat12;
vec2 u_xlat19;
float u_xlat20;
vec2 u_xlat24;
float u_xlat27;
int u_xlati27;
float u_xlat28;
bool u_xlatb28;
float u_xlat29;
uint u_xlatu29;
float u_xlat31;
void main()
{
    u_xlat0.y = 0.0;
    u_xlat27 = dot(_GlobalWind.xyz, _GlobalWind.xyz);
    u_xlat27 = max(u_xlat27, 0.00100000005);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat1 = vec4(u_xlat27) * _GlobalWind.xzxz;
    u_xlat19.xy = vec2(u_xlat1.z * _LargeWindParam.z, u_xlat1.w * _LargeWindParam.z);
    u_xlati27 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati27 = u_xlati27 << 2;
    u_xlat2.xyz = in_TEXCOORD0.yyy * unity_Builtins0Array[u_xlati27 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz;
    u_xlat2.xyz = unity_Builtins0Array[u_xlati27 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_TEXCOORD0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz + unity_Builtins0Array[u_xlati27 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat3.xy = u_xlat2.xz / vec2(_NoiseScale);
    u_xlat1.xy = _LargeWindParam.xx * u_xlat1.xy + u_xlat3.xy;
    u_xlat1.xy = textureLod(_Noisemap, u_xlat1.xy, 0.0).xy;
    u_xlat1.xy = u_xlat1.xy + vec2(-0.5, -0.5);
    u_xlat1.xy = u_xlat1.xy * _LargeWindParam.yy + vec2(0.5, 0.5);
    u_xlat29 = float(floatBitsToUint(unity_Builtins0Array[u_xlati27 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2]).w);
    u_xlat29 = u_xlat29 * 5.96046448e-08;
    u_xlatu29 = uint(u_xlat29);
    u_xlatu29 = u_xlatu29 & 3u;
    u_xlat29 = float(u_xlatu29);
    u_xlat3.x = (-in_TEXCOORD1.x) + unity_Builtins0Array[u_xlati27 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].x;
    u_xlat12.x = fract(u_xlat3.x);
    u_xlat3.x = u_xlat3.x + unity_Builtins0Array[u_xlati27 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].y;
    u_xlat3.xz = u_xlat3.xx * vec2(22.0, 33.0);
    u_xlat3.xz = fract(u_xlat3.xz);
    u_xlat3.xz = u_xlat3.xz + vec2(-0.5, -0.5);
    u_xlat4.xz = u_xlat3.xz * vec2(0.200000003, 0.200000003);
    u_xlat29 = u_xlat29 + u_xlat12.x;
    u_xlat29 = u_xlat29 + -0.5;
    u_xlat3.x = u_xlat29 * 0.333000004;
    u_xlat5.y = u_xlat29 * 0.333000004 + -1.0;
    u_xlat29 = in_TEXCOORD1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat29 = min(max(u_xlat29, 0.0), 1.0);
#else
    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
#endif
    u_xlat3.x = u_xlat3.x * u_xlat29;
    u_xlat1.xy = u_xlat1.xy * u_xlat3.xx;
    u_xlat0.xz = u_xlat19.xy * u_xlat1.xy;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[0].x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[2].x;
    u_xlat19.x = dot(u_xlat1.xy, u_xlat1.xy);
    u_xlat19.x = inversesqrt(u_xlat19.x);
    u_xlat1.xy = u_xlat19.xx * u_xlat1.xy;
    u_xlat12.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati27 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat12.xyz = unity_Builtins0Array[u_xlati27 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat12.xyz;
    u_xlat12.xyz = unity_Builtins0Array[u_xlati27 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat12.xyz;
    u_xlat12.xyz = u_xlat12.xyz + unity_Builtins0Array[u_xlati27 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat12.xyz = (-u_xlat2.xyz) + u_xlat12.xyz;
    u_xlat6.x = unity_Builtins0Array[u_xlati27 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].x;
    u_xlat6.y = unity_Builtins0Array[u_xlati27 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].x;
    u_xlat19.x = dot(u_xlat6.xy, u_xlat6.xy);
    u_xlat19.x = inversesqrt(u_xlat19.x);
    u_xlat19.xy = u_xlat19.xx * u_xlat6.xy;
    u_xlat31 = u_xlat19.y * u_xlat12.z;
    u_xlat31 = u_xlat12.x * u_xlat19.x + (-u_xlat31);
    u_xlat19.x = dot(u_xlat12.zx, u_xlat19.xy);
    u_xlat19.xy = u_xlat1.xy * u_xlat19.xx;
    u_xlat10 = u_xlat31 * u_xlat1.y + (-u_xlat19.x);
    u_xlat1.x = u_xlat31 * u_xlat1.x + u_xlat19.y;
    u_xlat1.x = u_xlat12.z + u_xlat1.x;
    u_xlat12.z = (-u_xlat1.x) * _Billboard + u_xlat12.z;
    u_xlat1.x = u_xlat12.x + u_xlat10;
    u_xlat12.x = (-u_xlat1.x) * _Billboard + u_xlat12.x;
    u_xlat1.xyz = u_xlat12.xyz * vec3(0.100000001, 1.0, 0.100000001) + u_xlat0.xyz;
    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat9 = max(u_xlat9, 0.00100000005);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
    u_xlat9 = dot(u_xlat12.xyz, u_xlat12.xyz);
    u_xlat9 = sqrt(u_xlat9);
    u_xlat6.xyz = u_xlat12.xyz * vec3(0.100000001, 1.0, 0.100000001);
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat9) + (-u_xlat6.xyz);
    u_xlat6.xy = vec2(_WorldOffsetRange.z + float(2.0), _WorldOffsetRange.w + float(2.0));
    u_xlat24.xy = u_xlat2.xz + (-_WorldOffsetRange.xy);
    u_xlat7.xyz = u_xlat2.xyz + u_xlat12.xyz;
    u_xlat2.xy = u_xlat24.xy + vec2(1.0, 1.0);
    u_xlat2.xy = u_xlat2.xy / u_xlat6.xy;
    u_xlat2.xy = u_xlat2.xy * _WorldOffsetRange.zw + vec2(-0.5, -0.5);
    u_xlat6.xy = floor(u_xlat2.xy);
    u_xlat2.xy = u_xlat2.xy + (-u_xlat6.xy);
    u_xlat8 = u_xlat6.xyxy + vec4(0.5, 1.5, 1.5, 1.5);
    u_xlat6 = u_xlat6.xyxy + vec4(1.5, 0.5, 0.5, 0.5);
    u_xlat6 = vec4(u_xlat6.x / _WorldOffsetRange.z, u_xlat6.y / _WorldOffsetRange.w, u_xlat6.z / _WorldOffsetRange.z, u_xlat6.w / _WorldOffsetRange.w);
    u_xlat8 = vec4(u_xlat8.x / _WorldOffsetRange.z, u_xlat8.y / _WorldOffsetRange.w, u_xlat8.z / _WorldOffsetRange.z, u_xlat8.w / _WorldOffsetRange.w);
    u_xlat9 = textureLod(_Heightmap, u_xlat8.zw, 0.0).x;
    u_xlat28 = textureLod(_Heightmap, u_xlat8.xy, 0.0).x;
    u_xlat9 = u_xlat9 + (-u_xlat28);
    u_xlat9 = u_xlat2.x * u_xlat9 + u_xlat28;
    u_xlat28 = textureLod(_Heightmap, u_xlat6.xy, 0.0).x;
    u_xlat20 = textureLod(_Heightmap, u_xlat6.zw, 0.0).x;
    u_xlat28 = u_xlat28 + (-u_xlat20);
    u_xlat28 = u_xlat2.x * u_xlat28 + u_xlat20;
    u_xlat9 = u_xlat9 + (-u_xlat28);
    u_xlat9 = u_xlat2.y * u_xlat9 + u_xlat28;
    u_xlat7.w = u_xlat9 * _HeightScale + u_xlat7.y;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat7.xwz;
    u_xlatu2.xy = uvec2(65280u, 255u) & floatBitsToUint(unity_Builtins0Array[u_xlati27 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1]).ww;
    u_xlat2.xy = vec2(u_xlatu2.xy);
    u_xlat9 = u_xlat2.x * 0.00390625;
    u_xlat2.z = u_xlat2.y + -127.0;
    u_xlatu9 = uint(u_xlat9);
    u_xlat9 = float(u_xlatu9);
    u_xlat2.x = u_xlat9 + -127.0;
    u_xlat6.xy = u_xlat2.xz * vec2(0.00787401572, 0.00787401572);
    u_xlat6.xy = u_xlat6.xy * u_xlat6.xy;
    u_xlat9 = u_xlat6.y + u_xlat6.x;
    u_xlat9 = (-u_xlat9) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb28 = !!(0.0<u_xlat9);
#else
    u_xlatb28 = 0.0<u_xlat9;
#endif
    u_xlat9 = sqrt(u_xlat9);
    u_xlat2.y = u_xlatb28 ? u_xlat9 : float(0.0);
    u_xlat6.xyz = u_xlat2.xyz * u_xlat12.yyy;
    u_xlat6.xyz = u_xlat3.xxx * u_xlat6.xyz;
    u_xlat9 = max(u_xlat3.x, 9.99999972e-10);
    u_xlat0.yz = u_xlat0.zx / vec2(u_xlat9);
    u_xlat1.xyz = u_xlat6.xyz * vec3(0.00393700786, 0.0, 0.00393700786) + u_xlat1.xyz;
    u_xlat5.xz = u_xlat5.yy * (-u_xlat5.yy);
    u_xlat1.xyz = u_xlat5.xyz * u_xlat12.xyz + u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat5 = u_xlat3.yyyy * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat5 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat3.xxxx + u_xlat5;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat3.zzzz + u_xlat5;
    gl_Position = u_xlat3 + hlslcc_mtx4x4unity_MatrixVPZero[3];
    u_xlat4.y = 0.0;
    vs_TEXCOORD0.xyz = u_xlat2.xyz * vec3(0.00787401572, 1.0, 0.00787401572) + u_xlat4.xyz;
    vs_TEXCOORD0.w = 0.0;
    u_xlat0.x = 0.0;
    u_xlat0.xyz = u_xlat2.yzx * vec3(1.0, 0.00787401572, 0.00787401572) + u_xlat0.xyz;
    u_xlat28 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat28 = inversesqrt(u_xlat28);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat28);
    u_xlat2.xyz = in_NORMAL0.yyy * unity_Builtins0Array[u_xlati27 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat2.xyz = unity_Builtins0Array[u_xlati27 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_NORMAL0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = unity_Builtins0Array[u_xlati27 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_NORMAL0.zzz + u_xlat2.xyz;
    u_xlat28 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat28 = inversesqrt(u_xlat28);
    u_xlat2.xyz = vec3(u_xlat28) * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat0.xyz * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat0.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
    u_xlat28 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat28 = inversesqrt(u_xlat28);
    u_xlat2.xyz = vec3(u_xlat28) * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat0.xyz * u_xlat2.xyz;
    u_xlat0.xyz = u_xlat2.zxy * u_xlat0.yzx + (-u_xlat3.xyz);
    u_xlat28 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat28 = inversesqrt(u_xlat28);
    u_xlat1.xyz = vec3(u_xlat28) * u_xlat1.xyz;
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat0.xyz);
#ifdef UNITY_ADRENO_ES3
    { bool cond = 0.0<u_xlat1.x; u_xlati10 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati10 = int((0.0<u_xlat1.x) ? 0xFFFFFFFFu : uint(0u));
#endif
#ifdef UNITY_ADRENO_ES3
    { bool cond = u_xlat1.x<0.0; u_xlati1 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati1 = int((u_xlat1.x<0.0) ? 0xFFFFFFFFu : uint(0u));
#endif
    u_xlati1 = (-u_xlati10) + u_xlati1;
    u_xlat1.x = float(u_xlati1);
    vs_TEXCOORD1.xyz = u_xlat0.xyz * u_xlat1.xxx;
    vs_TEXCOORD1.w = 0.0;
    u_xlatu0.xyz = uvec3(16711680u, 65280u, 255u) & floatBitsToUint(unity_Builtins0Array[u_xlati27 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2]).www;
    u_xlat0.xyz = vec3(u_xlatu0.xyz);
    u_xlatu1.xyz = uvec3(16711680u, 65280u, 255u) & floatBitsToUint(unity_Builtins0Array[u_xlati27 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3]).www;
    u_xlat27 = max(1.0, unity_Builtins0Array[u_xlati27 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].w);
    u_xlat27 = min(u_xlat27, 2.0);
    u_xlat27 = u_xlat27 + -1.0;
    u_xlat1.xyz = vec3(u_xlatu1.xyz);
    u_xlat1.xyz = u_xlat1.xyz * vec3(5.9838392e-08, 1.53186284e-05, 0.00392156886);
    u_xlat0.xyz = u_xlat0.xyz * vec3(5.9838392e-08, 1.53186284e-05, 0.00392156886) + (-u_xlat1.xyz);
    u_xlat28 = u_xlat29 / _RootColorScale;
    u_xlat28 = u_xlat28 + _RootColorOffset;
#ifdef UNITY_ADRENO_ES3
    u_xlat28 = min(max(u_xlat28, 0.0), 1.0);
#else
    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
#endif
    u_xlat0.xyz = vec3(u_xlat28) * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat1.xyz = (-u_xlat0.xyz) + _BurnedColor.xyz;
    u_xlat0.xyz = vec3(u_xlat27) * u_xlat1.xyz + u_xlat0.xyz;
    vs_TEXCOORD2.w = u_xlat27;
    u_xlat27 = u_xlat29 + -0.600000024;
    vs_TEXCOORD3 = u_xlat29;
    u_xlat27 = max(u_xlat27, 0.0);
    u_xlat27 = _GrassTipLighting * u_xlat27 + 1.0;
    vs_TEXCOORD2.xyz = vec3(u_xlat27) * u_xlat0.xyz;
    vs_TEXCOORD4.xy = in_TEXCOORD2.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	float _GrassShininess;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	float _CutOff;
uniform 	vec4 _BurnedColor;
uniform lowp sampler2D _MainTex;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp float vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec4 u_xlat0;
lowp vec4 u_xlat10_0;
bool u_xlatb0;
vec3 u_xlat1;
mediump float u_xlat16_2;
float u_xlat9;
bool u_xlatb9;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD4.xy);
    u_xlat9 = u_xlat10_0.w + (-_CutOff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(u_xlat9<0.0);
#else
    u_xlatb9 = u_xlat9<0.0;
#endif
    if((int(u_xlatb9) * int(0xffffffffu))!=0){discard;}
    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
    SV_Target0.xyz = u_xlat1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0;
    u_xlat1.xyz = _BurnedColor.xyz * u_xlat10_0.xyz + (-u_xlat10_0.xyz);
    u_xlat0.xyz = vs_TEXCOORD2.www * u_xlat1.xyz + u_xlat10_0.xyz;
    u_xlat0.w = vs_TEXCOORD3;
    SV_Target1 = u_xlat0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_2 = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb0) ? u_xlat16_2 : 0.0399999991;
    u_xlat0.x = (-vs_TEXCOORD2.w) + 1.0;
    u_xlat0.x = u_xlat0.x * _GrassShininess;
    SV_Target2.w = u_xlat0.x;
    SV_Target2.xy = vec2(0.0399999991, 0.0399999991);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_HDR_ON" "UNITY_DEBUG_VIEW_ON" "MHY_SHADER_LOW" "SOFT_SAMPLE_HEIGHT_ON" "DITHER_FADE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	float _NoiseScale;
uniform 	vec4 _WorldOffsetRange;
uniform 	float _HeightScale;
uniform 	float _Billboard;
uniform 	vec4 _LargeWindParam;
uniform 	vec4 _GlobalWind;
uniform 	float _GrassTipLighting;
uniform 	vec4 _MainTex_ST;
uniform 	float _RootColorScale;
uniform 	float _RootColorOffset;
uniform highp sampler2D _Heightmap;
uniform lowp sampler2D _Noisemap;
in highp vec4 in_POSITION0;
in highp vec4 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec2 in_TEXCOORD2;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp float vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec3 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
vec3 u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
vec2 u_xlat8;
int u_xlati8;
vec2 u_xlat9;
vec2 u_xlat16;
vec2 u_xlat20;
float u_xlat24;
float u_xlat25;
void main()
{
    u_xlat0.xy = vec2(_WorldOffsetRange.z + float(2.0), _WorldOffsetRange.w + float(2.0));
    u_xlat1.xyz = in_TEXCOORD0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[2].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TEXCOORD0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat16.xy = u_xlat1.xz + (-_WorldOffsetRange.xy);
    u_xlat16.xy = u_xlat16.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat16.xy / u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * _WorldOffsetRange.zw + vec2(-0.5, -0.5);
    u_xlat16.xy = floor(u_xlat0.xy);
    u_xlat0.xy = (-u_xlat16.xy) + u_xlat0.xy;
    u_xlat2 = u_xlat16.xyxy + vec4(0.5, 1.5, 1.5, 1.5);
    u_xlat3 = u_xlat16.xyxy + vec4(1.5, 0.5, 0.5, 0.5);
    u_xlat3 = vec4(u_xlat3.x / _WorldOffsetRange.z, u_xlat3.y / _WorldOffsetRange.w, u_xlat3.z / _WorldOffsetRange.z, u_xlat3.w / _WorldOffsetRange.w);
    u_xlat2 = vec4(u_xlat2.x / _WorldOffsetRange.z, u_xlat2.y / _WorldOffsetRange.w, u_xlat2.z / _WorldOffsetRange.z, u_xlat2.w / _WorldOffsetRange.w);
    u_xlat16.x = textureLod(_Heightmap, u_xlat2.zw, 0.0).x;
    u_xlat24 = textureLod(_Heightmap, u_xlat2.xy, 0.0).x;
    u_xlat16.x = (-u_xlat24) + u_xlat16.x;
    u_xlat16.x = u_xlat0.x * u_xlat16.x + u_xlat24;
    u_xlat24 = textureLod(_Heightmap, u_xlat3.xy, 0.0).x;
    u_xlat25 = textureLod(_Heightmap, u_xlat3.zw, 0.0).x;
    u_xlat24 = u_xlat24 + (-u_xlat25);
    u_xlat0.x = u_xlat0.x * u_xlat24 + u_xlat25;
    u_xlat16.x = (-u_xlat0.x) + u_xlat16.x;
    u_xlat0.x = u_xlat0.y * u_xlat16.x + u_xlat0.x;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[0].x;
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[2].x;
    u_xlat8.x = dot(u_xlat2.xy, u_xlat2.xy);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat8.xy = u_xlat8.xx * u_xlat2.xy;
    u_xlat2.x = hlslcc_mtx4x4unity_ObjectToWorld[0].x;
    u_xlat2.y = hlslcc_mtx4x4unity_ObjectToWorld[2].x;
    u_xlat24 = dot(u_xlat2.xy, u_xlat2.xy);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat2.xy = vec2(u_xlat24) * u_xlat2.xy;
    u_xlat3.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat3.xyz = (-u_xlat1.xyz) + u_xlat3.xyz;
    u_xlat24 = u_xlat2.y * u_xlat3.z;
    u_xlat24 = u_xlat3.x * u_xlat2.x + (-u_xlat24);
    u_xlat25 = dot(u_xlat3.zx, u_xlat2.xy);
    u_xlat2.xy = u_xlat8.xy * vec2(u_xlat25);
    u_xlat16.x = u_xlat24 * u_xlat8.y + (-u_xlat2.x);
    u_xlat8.x = u_xlat24 * u_xlat8.x + u_xlat2.y;
    u_xlat8.x = u_xlat3.z + u_xlat8.x;
    u_xlat3.z = (-u_xlat8.x) * _Billboard + u_xlat3.z;
    u_xlat8.x = u_xlat3.x + u_xlat16.x;
    u_xlat3.x = (-u_xlat8.x) * _Billboard + u_xlat3.x;
    u_xlat2.xyz = u_xlat1.xyz + u_xlat3.xyz;
    u_xlat8.xy = u_xlat1.xz / vec2(_NoiseScale);
    u_xlat2.w = u_xlat0.x * _HeightScale + u_xlat2.y;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat1.xyz = u_xlat3.xyz * vec3(0.100000001, 1.0, 0.100000001);
    u_xlat24 = dot(_GlobalWind.xyz, _GlobalWind.xyz);
    u_xlat24 = max(u_xlat24, 0.00100000005);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat4 = vec4(u_xlat24) * _GlobalWind.xzxz;
    u_xlat20.xy = vec2(u_xlat4.z * _LargeWindParam.z, u_xlat4.w * _LargeWindParam.z);
    u_xlat8.xy = _LargeWindParam.xx * u_xlat4.xy + u_xlat8.xy;
    u_xlat8.xy = textureLod(_Noisemap, u_xlat8.xy, 0.0).xy;
    u_xlat8.xy = u_xlat8.xy + vec2(-0.5, -0.5);
    u_xlat8.xy = u_xlat8.xy * _LargeWindParam.yy + vec2(0.5, 0.5);
    u_xlat24 = (-in_TEXCOORD1.x) + hlslcc_mtx4x4unity_ObjectToWorld[1].x;
    u_xlat25 = fract(u_xlat24);
    u_xlat24 = u_xlat24 + hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat4.xy = vec2(u_xlat24) * vec2(22.0, 33.0);
    u_xlat4.xy = fract(u_xlat4.xy);
    u_xlat4.xy = u_xlat4.xy + vec2(-0.5, -0.5);
    u_xlat5.xz = u_xlat4.xy * vec2(0.200000003, 0.200000003);
    u_xlat24 = u_xlat25 + -0.5;
    u_xlat25 = u_xlat24 * 0.333000004;
    u_xlat6.y = u_xlat24 * 0.333000004 + -1.0;
    u_xlat24 = in_TEXCOORD1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat25 = u_xlat25 * u_xlat24;
    u_xlat8.xy = u_xlat8.xy * vec2(u_xlat25);
    u_xlat4.xz = u_xlat20.xy * u_xlat8.xy;
    u_xlat4.y = 0.0;
    u_xlat7.xyz = u_xlat3.xyz * vec3(0.100000001, 1.0, 0.100000001) + u_xlat4.xyz;
    u_xlat8.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat8.x = max(u_xlat8.x, 0.00100000005);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat7.xyz = u_xlat8.xxx * u_xlat7.xyz;
    u_xlat0.xyz = u_xlat7.xyz * u_xlat0.xxx + (-u_xlat1.xyz);
    u_xlat0.xyz = u_xlat0.xyz + u_xlat2.xwz;
    u_xlat1.x = u_xlat3.y * u_xlat25;
    u_xlat9.x = max(u_xlat25, 9.99999972e-10);
    u_xlat9.xy = u_xlat4.zx / u_xlat9.xx;
    u_xlat2.yz = u_xlat9.xy + vec2(-1.0, -1.0);
    u_xlat0.xyz = u_xlat1.xxx * vec3(-0.5, 0.0, -0.5) + u_xlat0.xyz;
    u_xlat6.xz = u_xlat6.yy * (-u_xlat6.yy);
    u_xlat0.xyz = u_xlat6.xyz * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat1.xxxx + u_xlat3;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat1.zzzz + u_xlat3;
    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVPZero[3];
    u_xlat5.y = 0.0;
    vs_TEXCOORD0.xyz = u_xlat5.xyz + vec3(-1.0, 0.0, -1.0);
    vs_TEXCOORD0.w = 0.0;
    u_xlat1.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xxx;
    u_xlat1.x = dot(u_xlat2.yz, u_xlat2.yz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat2.x = 0.0;
    u_xlat1.xyz = u_xlat1.xxx * u_xlat2.xyz;
    u_xlat2.xyz = in_NORMAL0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_NORMAL0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_NORMAL0.zzz + u_xlat2.xyz;
    u_xlat25 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat25 = inversesqrt(u_xlat25);
    u_xlat2.xyz = vec3(u_xlat25) * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
    u_xlat25 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat25 = inversesqrt(u_xlat25);
    u_xlat2.xyz = vec3(u_xlat25) * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.zxy * u_xlat1.yzx + (-u_xlat3.xyz);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
#ifdef UNITY_ADRENO_ES3
    { bool cond = 0.0<u_xlat0.x; u_xlati8 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati8 = int((0.0<u_xlat0.x) ? 0xFFFFFFFFu : uint(0u));
#endif
#ifdef UNITY_ADRENO_ES3
    { bool cond = u_xlat0.x<0.0; u_xlati0 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati0 = int((u_xlat0.x<0.0) ? 0xFFFFFFFFu : uint(0u));
#endif
    u_xlati0 = (-u_xlati8) + u_xlati0;
    u_xlat0.x = float(u_xlati0);
    vs_TEXCOORD1.xyz = u_xlat0.xxx * u_xlat1.xyz;
    vs_TEXCOORD1.w = 0.0;
    u_xlat0.x = u_xlat24 / _RootColorScale;
    u_xlat0.x = u_xlat0.x + _RootColorOffset;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xxx * vec3(-0.501960814, 0.0, 0.0) + vec3(0.501960814, 0.0, 0.0);
    u_xlat1.x = u_xlat24 + -0.600000024;
    vs_TEXCOORD3 = u_xlat24;
    u_xlat24 = max(u_xlat1.x, 0.0);
    u_xlat24 = _GrassTipLighting * u_xlat24 + 1.0;
    vs_TEXCOORD2.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    vs_TEXCOORD2.w = 0.0;
    vs_TEXCOORD4.xy = in_TEXCOORD2.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	float _GrassShininess;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	float _CutOff;
uniform 	vec4 _BurnedColor;
uniform lowp sampler2D _MainTex;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp float vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec4 u_xlat0;
lowp vec4 u_xlat10_0;
bool u_xlatb0;
vec3 u_xlat1;
mediump float u_xlat16_2;
float u_xlat9;
bool u_xlatb9;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD4.xy);
    u_xlat9 = u_xlat10_0.w + (-_CutOff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(u_xlat9<0.0);
#else
    u_xlatb9 = u_xlat9<0.0;
#endif
    if((int(u_xlatb9) * int(0xffffffffu))!=0){discard;}
    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
    SV_Target0.xyz = u_xlat1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0;
    u_xlat1.xyz = _BurnedColor.xyz * u_xlat10_0.xyz + (-u_xlat10_0.xyz);
    u_xlat0.xyz = vs_TEXCOORD2.www * u_xlat1.xyz + u_xlat10_0.xyz;
    u_xlat0.w = vs_TEXCOORD3;
    SV_Target1 = u_xlat0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_2 = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb0) ? u_xlat16_2 : 0.0399999991;
    u_xlat0.x = (-vs_TEXCOORD2.w) + 1.0;
    u_xlat0.x = u_xlat0.x * _GrassShininess;
    SV_Target2.w = u_xlat0.x;
    SV_Target2.xy = vec2(0.0399999991, 0.0399999991);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_HDR_ON" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "MHY_SHADER_LOW" "SOFT_SAMPLE_HEIGHT_ON" "DITHER_FADE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVPZero[4];
uniform 	int unity_BaseInstanceID;
uniform 	float _NoiseScale;
uniform 	vec4 _WorldOffsetRange;
uniform 	float _HeightScale;
uniform 	float _Billboard;
uniform 	vec4 _LargeWindParam;
uniform 	vec4 _GlobalWind;
uniform 	float _GrassTipLighting;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BurnedColor;
uniform 	float _RootColorScale;
uniform 	float _RootColorOffset;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _Heightmap;
uniform lowp sampler2D _Noisemap;
in highp vec4 in_POSITION0;
in highp vec4 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec2 in_TEXCOORD2;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp float vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec3 u_xlat0;
uvec3 u_xlatu0;
vec4 u_xlat1;
int u_xlati1;
uvec3 u_xlatu1;
vec3 u_xlat2;
uvec2 u_xlatu2;
vec4 u_xlat3;
vec3 u_xlat4;
vec4 u_xlat5;
vec4 u_xlat6;
vec4 u_xlat7;
vec4 u_xlat8;
float u_xlat9;
uint u_xlatu9;
float u_xlat10;
int u_xlati10;
vec3 u_xlat12;
vec2 u_xlat19;
float u_xlat20;
vec2 u_xlat24;
float u_xlat27;
int u_xlati27;
float u_xlat28;
bool u_xlatb28;
float u_xlat29;
uint u_xlatu29;
float u_xlat31;
void main()
{
    u_xlat0.y = 0.0;
    u_xlat27 = dot(_GlobalWind.xyz, _GlobalWind.xyz);
    u_xlat27 = max(u_xlat27, 0.00100000005);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat1 = vec4(u_xlat27) * _GlobalWind.xzxz;
    u_xlat19.xy = vec2(u_xlat1.z * _LargeWindParam.z, u_xlat1.w * _LargeWindParam.z);
    u_xlati27 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati27 = u_xlati27 << 2;
    u_xlat2.xyz = in_TEXCOORD0.yyy * unity_Builtins0Array[u_xlati27 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz;
    u_xlat2.xyz = unity_Builtins0Array[u_xlati27 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_TEXCOORD0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz + unity_Builtins0Array[u_xlati27 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat3.xy = u_xlat2.xz / vec2(_NoiseScale);
    u_xlat1.xy = _LargeWindParam.xx * u_xlat1.xy + u_xlat3.xy;
    u_xlat1.xy = textureLod(_Noisemap, u_xlat1.xy, 0.0).xy;
    u_xlat1.xy = u_xlat1.xy + vec2(-0.5, -0.5);
    u_xlat1.xy = u_xlat1.xy * _LargeWindParam.yy + vec2(0.5, 0.5);
    u_xlat29 = float(floatBitsToUint(unity_Builtins0Array[u_xlati27 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2]).w);
    u_xlat29 = u_xlat29 * 5.96046448e-08;
    u_xlatu29 = uint(u_xlat29);
    u_xlatu29 = u_xlatu29 & 3u;
    u_xlat29 = float(u_xlatu29);
    u_xlat3.x = (-in_TEXCOORD1.x) + unity_Builtins0Array[u_xlati27 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].x;
    u_xlat12.x = fract(u_xlat3.x);
    u_xlat3.x = u_xlat3.x + unity_Builtins0Array[u_xlati27 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].y;
    u_xlat3.xz = u_xlat3.xx * vec2(22.0, 33.0);
    u_xlat3.xz = fract(u_xlat3.xz);
    u_xlat3.xz = u_xlat3.xz + vec2(-0.5, -0.5);
    u_xlat4.xz = u_xlat3.xz * vec2(0.200000003, 0.200000003);
    u_xlat29 = u_xlat29 + u_xlat12.x;
    u_xlat29 = u_xlat29 + -0.5;
    u_xlat3.x = u_xlat29 * 0.333000004;
    u_xlat5.y = u_xlat29 * 0.333000004 + -1.0;
    u_xlat29 = in_TEXCOORD1.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat29 = min(max(u_xlat29, 0.0), 1.0);
#else
    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
#endif
    u_xlat3.x = u_xlat3.x * u_xlat29;
    u_xlat1.xy = u_xlat1.xy * u_xlat3.xx;
    u_xlat0.xz = u_xlat19.xy * u_xlat1.xy;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[0].x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[2].x;
    u_xlat19.x = dot(u_xlat1.xy, u_xlat1.xy);
    u_xlat19.x = inversesqrt(u_xlat19.x);
    u_xlat1.xy = u_xlat19.xx * u_xlat1.xy;
    u_xlat12.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati27 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat12.xyz = unity_Builtins0Array[u_xlati27 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat12.xyz;
    u_xlat12.xyz = unity_Builtins0Array[u_xlati27 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat12.xyz;
    u_xlat12.xyz = u_xlat12.xyz + unity_Builtins0Array[u_xlati27 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat12.xyz = (-u_xlat2.xyz) + u_xlat12.xyz;
    u_xlat6.x = unity_Builtins0Array[u_xlati27 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].x;
    u_xlat6.y = unity_Builtins0Array[u_xlati27 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].x;
    u_xlat19.x = dot(u_xlat6.xy, u_xlat6.xy);
    u_xlat19.x = inversesqrt(u_xlat19.x);
    u_xlat19.xy = u_xlat19.xx * u_xlat6.xy;
    u_xlat31 = u_xlat19.y * u_xlat12.z;
    u_xlat31 = u_xlat12.x * u_xlat19.x + (-u_xlat31);
    u_xlat19.x = dot(u_xlat12.zx, u_xlat19.xy);
    u_xlat19.xy = u_xlat1.xy * u_xlat19.xx;
    u_xlat10 = u_xlat31 * u_xlat1.y + (-u_xlat19.x);
    u_xlat1.x = u_xlat31 * u_xlat1.x + u_xlat19.y;
    u_xlat1.x = u_xlat12.z + u_xlat1.x;
    u_xlat12.z = (-u_xlat1.x) * _Billboard + u_xlat12.z;
    u_xlat1.x = u_xlat12.x + u_xlat10;
    u_xlat12.x = (-u_xlat1.x) * _Billboard + u_xlat12.x;
    u_xlat1.xyz = u_xlat12.xyz * vec3(0.100000001, 1.0, 0.100000001) + u_xlat0.xyz;
    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat9 = max(u_xlat9, 0.00100000005);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
    u_xlat9 = dot(u_xlat12.xyz, u_xlat12.xyz);
    u_xlat9 = sqrt(u_xlat9);
    u_xlat6.xyz = u_xlat12.xyz * vec3(0.100000001, 1.0, 0.100000001);
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat9) + (-u_xlat6.xyz);
    u_xlat6.xy = vec2(_WorldOffsetRange.z + float(2.0), _WorldOffsetRange.w + float(2.0));
    u_xlat24.xy = u_xlat2.xz + (-_WorldOffsetRange.xy);
    u_xlat7.xyz = u_xlat2.xyz + u_xlat12.xyz;
    u_xlat2.xy = u_xlat24.xy + vec2(1.0, 1.0);
    u_xlat2.xy = u_xlat2.xy / u_xlat6.xy;
    u_xlat2.xy = u_xlat2.xy * _WorldOffsetRange.zw + vec2(-0.5, -0.5);
    u_xlat6.xy = floor(u_xlat2.xy);
    u_xlat2.xy = u_xlat2.xy + (-u_xlat6.xy);
    u_xlat8 = u_xlat6.xyxy + vec4(0.5, 1.5, 1.5, 1.5);
    u_xlat6 = u_xlat6.xyxy + vec4(1.5, 0.5, 0.5, 0.5);
    u_xlat6 = vec4(u_xlat6.x / _WorldOffsetRange.z, u_xlat6.y / _WorldOffsetRange.w, u_xlat6.z / _WorldOffsetRange.z, u_xlat6.w / _WorldOffsetRange.w);
    u_xlat8 = vec4(u_xlat8.x / _WorldOffsetRange.z, u_xlat8.y / _WorldOffsetRange.w, u_xlat8.z / _WorldOffsetRange.z, u_xlat8.w / _WorldOffsetRange.w);
    u_xlat9 = textureLod(_Heightmap, u_xlat8.zw, 0.0).x;
    u_xlat28 = textureLod(_Heightmap, u_xlat8.xy, 0.0).x;
    u_xlat9 = u_xlat9 + (-u_xlat28);
    u_xlat9 = u_xlat2.x * u_xlat9 + u_xlat28;
    u_xlat28 = textureLod(_Heightmap, u_xlat6.xy, 0.0).x;
    u_xlat20 = textureLod(_Heightmap, u_xlat6.zw, 0.0).x;
    u_xlat28 = u_xlat28 + (-u_xlat20);
    u_xlat28 = u_xlat2.x * u_xlat28 + u_xlat20;
    u_xlat9 = u_xlat9 + (-u_xlat28);
    u_xlat9 = u_xlat2.y * u_xlat9 + u_xlat28;
    u_xlat7.w = u_xlat9 * _HeightScale + u_xlat7.y;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat7.xwz;
    u_xlatu2.xy = uvec2(65280u, 255u) & floatBitsToUint(unity_Builtins0Array[u_xlati27 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1]).ww;
    u_xlat2.xy = vec2(u_xlatu2.xy);
    u_xlat9 = u_xlat2.x * 0.00390625;
    u_xlat2.z = u_xlat2.y + -127.0;
    u_xlatu9 = uint(u_xlat9);
    u_xlat9 = float(u_xlatu9);
    u_xlat2.x = u_xlat9 + -127.0;
    u_xlat6.xy = u_xlat2.xz * vec2(0.00787401572, 0.00787401572);
    u_xlat6.xy = u_xlat6.xy * u_xlat6.xy;
    u_xlat9 = u_xlat6.y + u_xlat6.x;
    u_xlat9 = (-u_xlat9) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb28 = !!(0.0<u_xlat9);
#else
    u_xlatb28 = 0.0<u_xlat9;
#endif
    u_xlat9 = sqrt(u_xlat9);
    u_xlat2.y = u_xlatb28 ? u_xlat9 : float(0.0);
    u_xlat6.xyz = u_xlat2.xyz * u_xlat12.yyy;
    u_xlat6.xyz = u_xlat3.xxx * u_xlat6.xyz;
    u_xlat9 = max(u_xlat3.x, 9.99999972e-10);
    u_xlat0.yz = u_xlat0.zx / vec2(u_xlat9);
    u_xlat1.xyz = u_xlat6.xyz * vec3(0.00393700786, 0.0, 0.00393700786) + u_xlat1.xyz;
    u_xlat5.xz = u_xlat5.yy * (-u_xlat5.yy);
    u_xlat1.xyz = u_xlat5.xyz * u_xlat12.xyz + u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat5 = u_xlat3.yyyy * hlslcc_mtx4x4unity_MatrixVPZero[1];
    u_xlat5 = hlslcc_mtx4x4unity_MatrixVPZero[0] * u_xlat3.xxxx + u_xlat5;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVPZero[2] * u_xlat3.zzzz + u_xlat5;
    gl_Position = u_xlat3 + hlslcc_mtx4x4unity_MatrixVPZero[3];
    u_xlat4.y = 0.0;
    vs_TEXCOORD0.xyz = u_xlat2.xyz * vec3(0.00787401572, 1.0, 0.00787401572) + u_xlat4.xyz;
    vs_TEXCOORD0.w = 0.0;
    u_xlat0.x = 0.0;
    u_xlat0.xyz = u_xlat2.yzx * vec3(1.0, 0.00787401572, 0.00787401572) + u_xlat0.xyz;
    u_xlat28 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat28 = inversesqrt(u_xlat28);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat28);
    u_xlat2.xyz = in_NORMAL0.yyy * unity_Builtins0Array[u_xlati27 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat2.xyz = unity_Builtins0Array[u_xlati27 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_NORMAL0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = unity_Builtins0Array[u_xlati27 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_NORMAL0.zzz + u_xlat2.xyz;
    u_xlat28 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat28 = inversesqrt(u_xlat28);
    u_xlat2.xyz = vec3(u_xlat28) * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat0.xyz * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat0.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
    u_xlat28 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat28 = inversesqrt(u_xlat28);
    u_xlat2.xyz = vec3(u_xlat28) * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat0.xyz * u_xlat2.xyz;
    u_xlat0.xyz = u_xlat2.zxy * u_xlat0.yzx + (-u_xlat3.xyz);
    u_xlat28 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat28 = inversesqrt(u_xlat28);
    u_xlat1.xyz = vec3(u_xlat28) * u_xlat1.xyz;
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat0.xyz);
#ifdef UNITY_ADRENO_ES3
    { bool cond = 0.0<u_xlat1.x; u_xlati10 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati10 = int((0.0<u_xlat1.x) ? 0xFFFFFFFFu : uint(0u));
#endif
#ifdef UNITY_ADRENO_ES3
    { bool cond = u_xlat1.x<0.0; u_xlati1 = int(!!cond ? 0xFFFFFFFFu : uint(0u)); }
#else
    u_xlati1 = int((u_xlat1.x<0.0) ? 0xFFFFFFFFu : uint(0u));
#endif
    u_xlati1 = (-u_xlati10) + u_xlati1;
    u_xlat1.x = float(u_xlati1);
    vs_TEXCOORD1.xyz = u_xlat0.xyz * u_xlat1.xxx;
    vs_TEXCOORD1.w = 0.0;
    u_xlatu0.xyz = uvec3(16711680u, 65280u, 255u) & floatBitsToUint(unity_Builtins0Array[u_xlati27 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[2]).www;
    u_xlat0.xyz = vec3(u_xlatu0.xyz);
    u_xlatu1.xyz = uvec3(16711680u, 65280u, 255u) & floatBitsToUint(unity_Builtins0Array[u_xlati27 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[3]).www;
    u_xlat27 = max(1.0, unity_Builtins0Array[u_xlati27 / 4].hlslcc_mtx4x4unity_ObjectToWorldArray[0].w);
    u_xlat27 = min(u_xlat27, 2.0);
    u_xlat27 = u_xlat27 + -1.0;
    u_xlat1.xyz = vec3(u_xlatu1.xyz);
    u_xlat1.xyz = u_xlat1.xyz * vec3(5.9838392e-08, 1.53186284e-05, 0.00392156886);
    u_xlat0.xyz = u_xlat0.xyz * vec3(5.9838392e-08, 1.53186284e-05, 0.00392156886) + (-u_xlat1.xyz);
    u_xlat28 = u_xlat29 / _RootColorScale;
    u_xlat28 = u_xlat28 + _RootColorOffset;
#ifdef UNITY_ADRENO_ES3
    u_xlat28 = min(max(u_xlat28, 0.0), 1.0);
#else
    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
#endif
    u_xlat0.xyz = vec3(u_xlat28) * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat1.xyz = (-u_xlat0.xyz) + _BurnedColor.xyz;
    u_xlat0.xyz = vec3(u_xlat27) * u_xlat1.xyz + u_xlat0.xyz;
    vs_TEXCOORD2.w = u_xlat27;
    u_xlat27 = u_xlat29 + -0.600000024;
    vs_TEXCOORD3 = u_xlat29;
    u_xlat27 = max(u_xlat27, 0.0);
    u_xlat27 = _GrassTipLighting * u_xlat27 + 1.0;
    vs_TEXCOORD2.xyz = vec3(u_xlat27) * u_xlat0.xyz;
    vs_TEXCOORD4.xy = in_TEXCOORD2.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	float _GrassShininess;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	float _CutOff;
uniform 	vec4 _BurnedColor;
uniform lowp sampler2D _MainTex;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp float vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec4 u_xlat0;
lowp vec4 u_xlat10_0;
bool u_xlatb0;
vec3 u_xlat1;
mediump float u_xlat16_2;
float u_xlat9;
bool u_xlatb9;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD4.xy);
    u_xlat9 = u_xlat10_0.w + (-_CutOff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(u_xlat9<0.0);
#else
    u_xlatb9 = u_xlat9<0.0;
#endif
    if((int(u_xlatb9) * int(0xffffffffu))!=0){discard;}
    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
    SV_Target0.xyz = u_xlat1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0;
    u_xlat1.xyz = _BurnedColor.xyz * u_xlat10_0.xyz + (-u_xlat10_0.xyz);
    u_xlat0.xyz = vs_TEXCOORD2.www * u_xlat1.xyz + u_xlat10_0.xyz;
    u_xlat0.w = vs_TEXCOORD3;
    SV_Target1 = u_xlat0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_2 = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb0) ? u_xlat16_2 : 0.0399999991;
    u_xlat0.x = (-vs_TEXCOORD2.w) + 1.0;
    u_xlat0.x = u_xlat0.x * _GrassShininess;
    SV_Target2.w = u_xlat0.x;
    SV_Target2.xy = vec2(0.0399999991, 0.0399999991);
    return;
}

#endif
"
}
}
Program "fp" {
SubProgram "gles3 " {
Keywords { "MHY_SHADER_HIGH" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MHY_SHADER_HIGH" }
""
}
SubProgram "gles3 " {
Keywords { "MHY_SHADER_HIGH" "DITHER_FADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MHY_SHADER_HIGH" "DITHER_FADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "MHY_SHADER_HIGH" "SOFT_SAMPLE_HEIGHT_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MHY_SHADER_HIGH" "SOFT_SAMPLE_HEIGHT_ON" }
""
}
SubProgram "gles3 " {
Keywords { "MHY_SHADER_HIGH" "SOFT_SAMPLE_HEIGHT_ON" "DITHER_FADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MHY_SHADER_HIGH" "SOFT_SAMPLE_HEIGHT_ON" "DITHER_FADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "MHY_SHADER_MIDDLE" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MHY_SHADER_MIDDLE" }
""
}
SubProgram "gles3 " {
Keywords { "MHY_SHADER_MIDDLE" "DITHER_FADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MHY_SHADER_MIDDLE" "DITHER_FADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "MHY_SHADER_MIDDLE" "SOFT_SAMPLE_HEIGHT_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MHY_SHADER_MIDDLE" "SOFT_SAMPLE_HEIGHT_ON" }
""
}
SubProgram "gles3 " {
Keywords { "MHY_SHADER_MIDDLE" "SOFT_SAMPLE_HEIGHT_ON" "DITHER_FADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MHY_SHADER_MIDDLE" "SOFT_SAMPLE_HEIGHT_ON" "DITHER_FADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "MHY_SHADER_LOW" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MHY_SHADER_LOW" }
""
}
SubProgram "gles3 " {
Keywords { "MHY_SHADER_LOW" "DITHER_FADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MHY_SHADER_LOW" "DITHER_FADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "MHY_SHADER_LOW" "SOFT_SAMPLE_HEIGHT_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MHY_SHADER_LOW" "SOFT_SAMPLE_HEIGHT_ON" }
""
}
SubProgram "gles3 " {
Keywords { "MHY_SHADER_LOW" "SOFT_SAMPLE_HEIGHT_ON" "DITHER_FADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MHY_SHADER_LOW" "SOFT_SAMPLE_HEIGHT_ON" "DITHER_FADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "MHY_SHADER_HIGH" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "MHY_SHADER_HIGH" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "MHY_SHADER_HIGH" "DITHER_FADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "MHY_SHADER_HIGH" "DITHER_FADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "MHY_SHADER_HIGH" "SOFT_SAMPLE_HEIGHT_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "MHY_SHADER_HIGH" "SOFT_SAMPLE_HEIGHT_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "MHY_SHADER_HIGH" "SOFT_SAMPLE_HEIGHT_ON" "DITHER_FADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "MHY_SHADER_HIGH" "SOFT_SAMPLE_HEIGHT_ON" "DITHER_FADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "MHY_SHADER_MIDDLE" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "MHY_SHADER_MIDDLE" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "MHY_SHADER_MIDDLE" "DITHER_FADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "MHY_SHADER_MIDDLE" "DITHER_FADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "MHY_SHADER_MIDDLE" "SOFT_SAMPLE_HEIGHT_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "MHY_SHADER_MIDDLE" "SOFT_SAMPLE_HEIGHT_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "MHY_SHADER_MIDDLE" "SOFT_SAMPLE_HEIGHT_ON" "DITHER_FADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "MHY_SHADER_MIDDLE" "SOFT_SAMPLE_HEIGHT_ON" "DITHER_FADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "MHY_SHADER_LOW" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "MHY_SHADER_LOW" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "MHY_SHADER_LOW" "DITHER_FADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "MHY_SHADER_LOW" "DITHER_FADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "MHY_SHADER_LOW" "SOFT_SAMPLE_HEIGHT_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "MHY_SHADER_LOW" "SOFT_SAMPLE_HEIGHT_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "MHY_SHADER_LOW" "SOFT_SAMPLE_HEIGHT_ON" "DITHER_FADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "MHY_SHADER_LOW" "SOFT_SAMPLE_HEIGHT_ON" "DITHER_FADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_HDR_ON" "MHY_SHADER_HIGH" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_HDR_ON" "INSTANCING_ON" "MHY_SHADER_HIGH" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_HDR_ON" "MHY_SHADER_HIGH" "DITHER_FADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_HDR_ON" "INSTANCING_ON" "MHY_SHADER_HIGH" "DITHER_FADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_HDR_ON" "MHY_SHADER_HIGH" "SOFT_SAMPLE_HEIGHT_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_HDR_ON" "INSTANCING_ON" "MHY_SHADER_HIGH" "SOFT_SAMPLE_HEIGHT_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_HDR_ON" "MHY_SHADER_HIGH" "SOFT_SAMPLE_HEIGHT_ON" "DITHER_FADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_HDR_ON" "INSTANCING_ON" "MHY_SHADER_HIGH" "SOFT_SAMPLE_HEIGHT_ON" "DITHER_FADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_HDR_ON" "MHY_SHADER_MIDDLE" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_HDR_ON" "INSTANCING_ON" "MHY_SHADER_MIDDLE" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_HDR_ON" "MHY_SHADER_MIDDLE" "DITHER_FADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_HDR_ON" "INSTANCING_ON" "MHY_SHADER_MIDDLE" "DITHER_FADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_HDR_ON" "MHY_SHADER_MIDDLE" "SOFT_SAMPLE_HEIGHT_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_HDR_ON" "INSTANCING_ON" "MHY_SHADER_MIDDLE" "SOFT_SAMPLE_HEIGHT_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_HDR_ON" "MHY_SHADER_MIDDLE" "SOFT_SAMPLE_HEIGHT_ON" "DITHER_FADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_HDR_ON" "INSTANCING_ON" "MHY_SHADER_MIDDLE" "SOFT_SAMPLE_HEIGHT_ON" "DITHER_FADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_HDR_ON" "MHY_SHADER_LOW" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_HDR_ON" "INSTANCING_ON" "MHY_SHADER_LOW" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_HDR_ON" "MHY_SHADER_LOW" "DITHER_FADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_HDR_ON" "INSTANCING_ON" "MHY_SHADER_LOW" "DITHER_FADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_HDR_ON" "MHY_SHADER_LOW" "SOFT_SAMPLE_HEIGHT_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_HDR_ON" "INSTANCING_ON" "MHY_SHADER_LOW" "SOFT_SAMPLE_HEIGHT_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_HDR_ON" "MHY_SHADER_LOW" "SOFT_SAMPLE_HEIGHT_ON" "DITHER_FADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_HDR_ON" "INSTANCING_ON" "MHY_SHADER_LOW" "SOFT_SAMPLE_HEIGHT_ON" "DITHER_FADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_HDR_ON" "UNITY_DEBUG_VIEW_ON" "MHY_SHADER_HIGH" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_HDR_ON" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "MHY_SHADER_HIGH" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_HDR_ON" "UNITY_DEBUG_VIEW_ON" "MHY_SHADER_HIGH" "DITHER_FADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_HDR_ON" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "MHY_SHADER_HIGH" "DITHER_FADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_HDR_ON" "UNITY_DEBUG_VIEW_ON" "MHY_SHADER_HIGH" "SOFT_SAMPLE_HEIGHT_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_HDR_ON" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "MHY_SHADER_HIGH" "SOFT_SAMPLE_HEIGHT_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_HDR_ON" "UNITY_DEBUG_VIEW_ON" "MHY_SHADER_HIGH" "SOFT_SAMPLE_HEIGHT_ON" "DITHER_FADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_HDR_ON" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "MHY_SHADER_HIGH" "SOFT_SAMPLE_HEIGHT_ON" "DITHER_FADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_HDR_ON" "UNITY_DEBUG_VIEW_ON" "MHY_SHADER_MIDDLE" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_HDR_ON" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "MHY_SHADER_MIDDLE" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_HDR_ON" "UNITY_DEBUG_VIEW_ON" "MHY_SHADER_MIDDLE" "DITHER_FADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_HDR_ON" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "MHY_SHADER_MIDDLE" "DITHER_FADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_HDR_ON" "UNITY_DEBUG_VIEW_ON" "MHY_SHADER_MIDDLE" "SOFT_SAMPLE_HEIGHT_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_HDR_ON" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "MHY_SHADER_MIDDLE" "SOFT_SAMPLE_HEIGHT_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_HDR_ON" "UNITY_DEBUG_VIEW_ON" "MHY_SHADER_MIDDLE" "SOFT_SAMPLE_HEIGHT_ON" "DITHER_FADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_HDR_ON" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "MHY_SHADER_MIDDLE" "SOFT_SAMPLE_HEIGHT_ON" "DITHER_FADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_HDR_ON" "UNITY_DEBUG_VIEW_ON" "MHY_SHADER_LOW" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_HDR_ON" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "MHY_SHADER_LOW" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_HDR_ON" "UNITY_DEBUG_VIEW_ON" "MHY_SHADER_LOW" "DITHER_FADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_HDR_ON" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "MHY_SHADER_LOW" "DITHER_FADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_HDR_ON" "UNITY_DEBUG_VIEW_ON" "MHY_SHADER_LOW" "SOFT_SAMPLE_HEIGHT_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_HDR_ON" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "MHY_SHADER_LOW" "SOFT_SAMPLE_HEIGHT_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_HDR_ON" "UNITY_DEBUG_VIEW_ON" "MHY_SHADER_LOW" "SOFT_SAMPLE_HEIGHT_ON" "DITHER_FADE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_HDR_ON" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "MHY_SHADER_LOW" "SOFT_SAMPLE_HEIGHT_ON" "DITHER_FADE_ON" }
""
}
}
}
}
}