//////////////////////////////////////////
//
// NOTE: This is *not* a valid shader file
//
///////////////////////////////////////////
Shader "miHoYo/Effects/Waterfall_Transparent_BigWorld" {
Properties {
[Header(MiHoYoDepthFade)] [Toggle(_SOFTPARTICLES_ON)] _SOFTPARTICLES ("SOFTPARTICLES", Float) = 0
_DepthThresh ("DepthThresh", Range(0.001, 20)) = 1
_DepthFade ("DepthFade", Range(0.001, 20)) = 1
_AlphaRange ("AlphaRange", Float) = 6.82
_AlphaOffset ("AlphaOffset", Float) = -5.85
_TopColor ("TopColor", Color) = (0.470588,0.765923,0.9411765,1)
_BottomColor ("BottomColor", Color) = (1,1,1,1)
_ColorGradientRange ("ColorGradientRange", Float) = 3
_ColorGradientOffset ("ColorGradientOffset", Float) = 0.02
_Normal01 ("Normal01", 2D) = "white" { }
_Normal01_U_Speed ("Normal01_U_Speed", Float) = -0.1
_Normal01_VSpeed ("Normal01_V-Speed", Float) = 0.5
_Normal02 ("Normal02", 2D) = "bump" { }
_Normal02_U_Speed ("Normal02_U_Speed", Float) = 0.1
_Normal02_V_Speed ("Normal02_V_Speed", Float) = 0.4
_ReflectionColor_Dark ("ReflectionColor_Dark", Color) = (0.1801469,0.5416834,0.7205882,1)
_ReflectionColor_Light ("ReflectionColor_Light", Color) = (0.9117647,0.9890466,1,1)
_Reflection ("Reflection", Cube) = "black" { }
_ReflectionBrightness ("ReflectionBrightness", Float) = 1
_DistortionIntensity ("DistortionIntensity", Color) = (0.4339998,0.4815517,0.6589999,0)
_ReflectionIntensity ("ReflectionIntensity", Range(0, 1)) = 0.498
_WaterfallPatternColor ("WaterfallPatternColor", Color) = (0.7573529,0.9297161,1,1)
_WaterfallTex01 ("WaterfallTex01", 2D) = "white" { }
_Waterfall01Brightness ("Waterfall01Brightness", Float) = 0.5
_WaterFall01_Speed ("WaterFall01_Speed", Float) = 0.3
_Waterfall02Brightness ("Waterfall02Brightness", Float) = 1
_Waterfall02_Speed ("Waterfall02_Speed", Float) = 0.4
_WaterfallSpecColor ("WaterfallSpecColor", Color) = (0.6020761,0.7387544,0.8529412,1)
_WaterfallSpecTex ("WaterfallSpecTex", 2D) = "white" { }
_NoiseTex ("NoiseTex", 2D) = "black" { }
_Detail01_U_Speed ("Detail01_U_Speed", Float) = 0.02
_Detail01_V_Speed ("Detail01_V_Speed", Float) = 0.3
_NoiselDistortionValue ("NoiselDistortionValue", Float) = 0.15
_Opacity ("Opacity", Float) = 1
_SprayRange ("SprayRange", Float) = 3.2
_SprayOffset ("SprayOffset", Float) = -1.01
_ShadowStrength ("ShadowStrength", Float) = 1
[MHYToggle] _BottomAlphaToggle ("BottomAlphaToggle", Float) = 0
_AlphaBottomRange ("AlphaBottomRange", Float) = 20
_AlphaBottomOffset ("AlphaBottomOffset", Float) = -0.49
_FoamUVCoord01 ("FoamUVCoord01", Vector) = (0.3,0.5,-0.02,0.3)
_FoamUVCoord02 ("FoamUVCoord02", Vector) = (0.3,0.7,0.01,0.4)
_FoamColor ("FoamColor", Color) = (0.7654087,0.8210312,0.8602941,1)
_FoamRange ("FoamRange", Float) = 3.2
_FoamOffset ("FoamOffset", Float) = 1
_DayColor ("DayColor", Color) = (1,1,1,0)
[Header(Cull Mode)] [Enum(UnityEngine.Rendering.CullMode)] _Cull ("Cull Mode", Float) = 2
_MHYZBias ("Z Bias", Float) = 0
_PolygonOffsetUnit ("Polygon Offset Unit", Float) = 0
_PolygonOffsetFactor ("Polygon Offset Factor", Float) = 0
[Header(Blend Mode)] [Enum(UnityEngine.Rendering.BlendMode)] _SrcBlendMode ("Src Blend Mode", Float) = 1
[Enum(UnityEngine.Rendering.BlendMode)] _DstBlendMode ("Dst Blend Mode", Float) = 0
[Enum(UnityEngine.Rendering.BlendOp)] _BlendOP ("BlendOp Mode", Float) = 0
[Header(Depth Mode)] [Enum(Off, 0, On, 1)] _Zwrite ("ZWrite Mode", Float) = 1
[Enum(UnityEngine.Rendering.CompareFunction)] _Ztest ("ZTest Mode", Float) = 4
}
SubShader {
 Tags { "IGNOREPROJECTOR" = "true" "PreviewType" = "Plane" "QUEUE" = "Transparent" "RenderType" = "Transparent" }
 Pass {
  Name "SUBSHADER 0 PASS 0"
  Tags { "DebugView" = "On" "IGNOREPROJECTOR" = "true" "LIGHTMODE" = "FORWARDBASE" "PreviewType" = "Plane" "QUEUE" = "Transparent" "RenderType" = "Transparent" }
  ZTest Off
  ZWrite Off
  Cull Off
  GpuProgramID 60341
Program "vp" {
SubProgram "gles3 " {
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
uniform 	vec4 hlslcc_mtx4x4_mhyJitteredVP[4];
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec4 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
float u_xlat14;
float u_xlat21;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD5.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat0.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position = u_xlat0;
    vs_TEXCOORD2.zw = u_xlat0.zw;
    vs_COLOR0 = in_COLOR0;
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat14 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat14 = inversesqrt(u_xlat14);
    u_xlat2.xyz = vec3(u_xlat14) * u_xlat2.xyz;
    u_xlat16_3.x = u_xlat2.y * u_xlat2.y;
    u_xlat16_3.x = u_xlat2.x * u_xlat2.x + (-u_xlat16_3.x);
    u_xlat16_4 = u_xlat2.yzzx * u_xlat2.xyzz;
    u_xlat16_5.x = dot(unity_SHBr, u_xlat16_4);
    u_xlat16_5.y = dot(unity_SHBg, u_xlat16_4);
    u_xlat16_5.z = dot(unity_SHBb, u_xlat16_4);
    u_xlat16_3.xyz = unity_SHC.xyz * u_xlat16_3.xxx + u_xlat16_5.xyz;
    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat2.w = 1.0;
    u_xlat16_4.x = dot(unity_SHAr, u_xlat2);
    u_xlat16_4.y = dot(unity_SHAg, u_xlat2);
    u_xlat16_4.z = dot(unity_SHAb, u_xlat2);
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
    vs_TEXCOORD1.xyz = u_xlat16_3.xyz;
    vs_TEXCOORD1.w = 1.0;
    u_xlat6.x = float(0.5);
    u_xlat6.z = float(0.5);
    u_xlat6.y = _ProjectionParams.x;
    u_xlat0.xyz = u_xlat0.xyw * u_xlat6.xyz;
    u_xlat0.w = u_xlat0.y * 0.5;
    vs_TEXCOORD2.xy = u_xlat0.zz + u_xlat0.xw;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_mhyJitteredVP[1];
    u_xlat0 = hlslcc_mtx4x4_mhyJitteredVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_mhyJitteredVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_mhyJitteredVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat1.xyz = vec3(u_xlat6.z * u_xlat0.x, u_xlat6.y * u_xlat0.y, u_xlat6.z * u_xlat0.w);
    vs_TEXCOORD3.zw = u_xlat0.zw;
    u_xlat1.w = u_xlat1.y * 0.5;
    vs_TEXCOORD3.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat0.x = dot(hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, hlslcc_mtx4x4unity_ObjectToWorld[0].xyz);
    vs_TEXCOORD4.z = sqrt(u_xlat0.x);
    u_xlat0.x = dot(hlslcc_mtx4x4unity_ObjectToWorld[1].xyz, hlslcc_mtx4x4unity_ObjectToWorld[1].xyz);
    vs_TEXCOORD4.w = sqrt(u_xlat0.x);
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD5.w = 0.0;
    u_xlat0.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat0.xyz;
    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    vs_TEXCOORD6.xyz = u_xlat0.xyz;
    vs_TEXCOORD6.w = 0.0;
    vs_TEXCOORD7.xyz = u_xlat2.xyz;
    vs_TEXCOORD7.w = 0.0;
    u_xlat1.xyz = u_xlat0.yzx * u_xlat2.zxy;
    u_xlat0.xyz = u_xlat2.yzx * u_xlat0.zxy + (-u_xlat1.xyz);
    u_xlat21 = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD8.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    vs_TEXCOORD8.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 _LightColor0;
uniform 	float _AlphaRange;
uniform 	float _AlphaOffset;
uniform 	float _Opacity;
uniform 	mediump float _BottomAlphaToggle;
uniform 	float _AlphaBottomRange;
uniform 	float _AlphaBottomOffset;
uniform 	vec4 _WaterfallTex01_ST;
uniform 	mediump vec4 _FoamUVCoord01;
uniform 	mediump vec4 _FoamUVCoord02;
uniform 	float _FoamRange;
uniform 	float _FoamOffset;
uniform 	vec4 _DayColor;
uniform 	vec4 _BottomColor;
uniform 	vec4 _TopColor;
uniform 	float _ColorGradientRange;
uniform 	float _ColorGradientOffset;
uniform 	vec4 _ReflectionColor_Dark;
uniform 	vec4 _ReflectionColor_Light;
uniform 	float _Normal01_U_Speed;
uniform 	vec4 _Normal01_ST;
uniform 	float _Normal01_VSpeed;
uniform 	float _Normal02_U_Speed;
uniform 	vec4 _Normal02_ST;
uniform 	float _Normal02_V_Speed;
uniform 	vec4 _DistortionIntensity;
uniform 	float _ReflectionBrightness;
uniform 	float _ReflectionIntensity;
uniform 	float _WaterFall01_Speed;
uniform 	float _Waterfall02_Speed;
uniform 	mediump vec4 _WaterfallPatternColor;
uniform 	float _Waterfall01Brightness;
uniform 	float _Waterfall02Brightness;
uniform 	float _SprayRange;
uniform 	float _SprayOffset;
uniform 	float _ShadowStrength;
uniform 	vec4 _WaterfallSpecTex_ST;
uniform 	float _Detail01_U_Speed;
uniform 	vec4 _NoiseTex_ST;
uniform 	float _Detail01_V_Speed;
uniform 	float _NoiselDistortionValue;
uniform 	mediump vec4 _WaterfallSpecColor;
uniform 	mediump vec4 _FoamColor;
uniform 	vec3 _ES_MainLightColor;
uniform lowp sampler2D _WaterfallTex01;
uniform lowp sampler2D _Normal01;
uniform lowp sampler2D _Normal02;
uniform lowp samplerCube _Reflection;
uniform lowp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _WaterfallSpecTex;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
in highp vec4 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
lowp vec3 u_xlat10_0;
vec4 u_xlat1;
mediump float u_xlat16_1;
lowp float u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
bool u_xlatb4;
vec2 u_xlat9;
lowp float u_xlat10_9;
float u_xlat12;
mediump float u_xlat16_12;
lowp float u_xlat10_12;
float u_xlat13;
void main()
{
    u_xlat0.xy = vs_TEXCOORD4.xy * _Normal01_ST.xy + _Normal01_ST.zw;
    u_xlat0.x = u_xlat0.x * vs_TEXCOORD4.z;
    u_xlat1.x = _Time.y * _Normal01_U_Speed + u_xlat0.x;
    u_xlat0.x = _Time.y * _Normal01_VSpeed;
    u_xlat1.y = u_xlat0.y * vs_TEXCOORD4.w + u_xlat0.x;
    u_xlat10_0.xyz = texture(_Normal01, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xy = vs_TEXCOORD4.xy * _Normal02_ST.xy + _Normal02_ST.zw;
    u_xlat0.xy = vec2(u_xlat0.x * vs_TEXCOORD4.z, u_xlat0.y * vs_TEXCOORD4.w);
    u_xlat1.x = _Time.y * _Normal02_U_Speed + u_xlat0.x;
    u_xlat1.y = _Time.y * _Normal02_V_Speed + u_xlat0.y;
    u_xlat10_0.xyz = texture(_Normal02, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_2.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = u_xlat16_2.xyz * _DistortionIntensity.xyz;
    u_xlat1.x = vs_TEXCOORD6.x;
    u_xlat1.y = vs_TEXCOORD8.x;
    u_xlat1.z = vs_TEXCOORD7.x;
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat3.x = vs_TEXCOORD6.y;
    u_xlat3.y = vs_TEXCOORD8.y;
    u_xlat3.z = vs_TEXCOORD7.y;
    u_xlat1.y = dot(u_xlat3.xyz, u_xlat0.xyz);
    u_xlat3.x = vs_TEXCOORD6.z;
    u_xlat3.y = vs_TEXCOORD8.z;
    u_xlat3.z = vs_TEXCOORD7.z;
    u_xlat1.z = dot(u_xlat3.xyz, u_xlat0.xyz);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
    u_xlat12 = dot((-u_xlat1.xyz), u_xlat0.xyz);
    u_xlat12 = u_xlat12 + u_xlat12;
    u_xlat0.xyz = u_xlat0.xyz * (-vec3(u_xlat12)) + (-u_xlat1.xyz);
    u_xlat10_0.x = texture(_Reflection, u_xlat0.xyz).x;
    u_xlat4.xyz = (-_ReflectionColor_Dark.xyz) + _ReflectionColor_Light.xyz;
    u_xlat0.xyz = u_xlat10_0.xxx * u_xlat4.xyz + _ReflectionColor_Dark.xyz;
    u_xlat12 = vs_TEXCOORD4.y * _ColorGradientRange + _ColorGradientOffset;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat1.xyz = (-_BottomColor.xyz) + _TopColor.xyz;
    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz + _BottomColor.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.200000003, 0.200000003, 0.200000003);
    u_xlat0.xyz = u_xlat0.xyz * vec3(_ReflectionBrightness) + (-u_xlat1.xyz);
    u_xlat0.xyz = vec3(vec3(_ReflectionIntensity, _ReflectionIntensity, _ReflectionIntensity)) * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat1.xy = vs_TEXCOORD4.xy * _WaterfallTex01_ST.xy + _WaterfallTex01_ST.zw;
    u_xlat1.xy = vec2(u_xlat1.x * vs_TEXCOORD4.z, u_xlat1.y * vs_TEXCOORD4.w);
    u_xlat1.zw = _Time.yy * vec2(_WaterFall01_Speed, _Waterfall02_Speed) + u_xlat1.yy;
    u_xlat10_12 = texture(_WaterfallTex01, u_xlat1.xz).x;
    u_xlat10_9 = texture(_WaterfallTex01, u_xlat1.xw).y;
    u_xlat16_2.x = (-u_xlat10_12) + u_xlat10_9;
    u_xlat16_2.x = u_xlat10_9 * u_xlat16_2.x + u_xlat10_12;
    u_xlat12 = u_xlat10_12 * _Waterfall01Brightness;
    u_xlat3.xyz = u_xlat16_2.xxx * _WaterfallPatternColor.xyz + (-u_xlat0.xyz);
    u_xlat13 = u_xlat10_9 * _Waterfall02Brightness + (-u_xlat12);
    u_xlat9.x = u_xlat10_9 * _Waterfall02Brightness;
    u_xlat12 = u_xlat9.x * u_xlat13 + u_xlat12;
    u_xlat9.x = vs_TEXCOORD4.y * _SprayRange + _SprayOffset;
    u_xlat9.x = (-u_xlat9.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat9.x = min(max(u_xlat9.x, 0.0), 1.0);
#else
    u_xlat9.x = clamp(u_xlat9.x, 0.0, 1.0);
#endif
    u_xlat12 = u_xlat12 * u_xlat9.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * _DayColor.xyz;
    u_xlat9.xy = vs_TEXCOORD4.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat3.x = _Time.y * _Detail01_U_Speed + u_xlat9.x;
    u_xlat3.y = _Time.y * _Detail01_V_Speed + u_xlat9.y;
    u_xlat10_12 = texture(_NoiseTex, u_xlat3.xy).x;
    u_xlat16_2.x = vs_TEXCOORD4.w * 0.5;
    u_xlat9.xy = vs_TEXCOORD4.xy * _WaterfallSpecTex_ST.xy + _WaterfallSpecTex_ST.zw;
    u_xlat16_2.x = vs_TEXCOORD4.w * u_xlat9.y + (-u_xlat16_2.x);
    u_xlat3.x = u_xlat10_12 * _NoiselDistortionValue + u_xlat9.x;
    u_xlat3.y = u_xlat10_12 * _NoiselDistortionValue + u_xlat16_2.x;
    u_xlat10_12 = texture(_WaterfallSpecTex, u_xlat3.xy).x;
    u_xlat16_3.xyz = vec3(u_xlat10_12) * _WaterfallSpecColor.xyz;
    u_xlat9.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat10_12 = texture(_ShadowMapTexture, u_xlat9.xy).x;
    u_xlat9.x = (-_ShadowStrength) + 1.0;
    u_xlat12 = u_xlat10_12 * u_xlat9.x + _ShadowStrength;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat12) + u_xlat16_3.xyz;
    u_xlat9.xy = vec2(_Time.y * _FoamUVCoord01.z, _Time.y * _FoamUVCoord01.w);
    u_xlat9.xy = u_xlat1.xy * _FoamUVCoord01.xy + u_xlat9.xy;
    u_xlat10_12 = texture(_WaterfallTex01, u_xlat9.xy).x;
    u_xlat9.xy = vec2(_Time.y * _FoamUVCoord02.z, _Time.y * _FoamUVCoord02.w);
    u_xlat1.xy = u_xlat1.xy * _FoamUVCoord02.xy + u_xlat9.xy;
    u_xlat10_1 = texture(_WaterfallTex01, u_xlat1.xy).y;
    u_xlat16_12 = u_xlat10_12 + u_xlat10_1;
    u_xlat1.x = vs_TEXCOORD4.y * _FoamRange + _FoamOffset;
    u_xlat12 = u_xlat16_12 + u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat1.x = (-u_xlat1.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat12 * u_xlat1.x;
    u_xlat0.xyz = u_xlat1.xxx * _FoamColor.xyz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * _ES_MainLightColor.xyz;
    u_xlat16_1 = max(_LightColor0.w, 1.0);
    u_xlat1.xyz = u_xlat0.xyz * vec3(u_xlat16_1);
    u_xlat0.x = vs_TEXCOORD4.y * _AlphaBottomRange + _AlphaBottomOffset;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(_BottomAlphaToggle==1.0);
#else
    u_xlatb4 = _BottomAlphaToggle==1.0;
#endif
    u_xlat0.x = (u_xlatb4) ? u_xlat0.x : 1.0;
    u_xlat4.x = vs_TEXCOORD4.y * _AlphaRange + _AlphaOffset;
    u_xlat4.x = (-u_xlat4.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat4.x = u_xlat4.x * _Opacity;
    u_xlat0.x = u_xlat0.x * u_xlat4.x;
    u_xlat1.w = u_xlat12 * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
uniform 	vec4 hlslcc_mtx4x4_mhyJitteredVP[4];
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec4 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
float u_xlat14;
float u_xlat21;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD5.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat0.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position = u_xlat0;
    vs_TEXCOORD2.zw = u_xlat0.zw;
    vs_COLOR0 = in_COLOR0;
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat14 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat14 = inversesqrt(u_xlat14);
    u_xlat2.xyz = vec3(u_xlat14) * u_xlat2.xyz;
    u_xlat16_3.x = u_xlat2.y * u_xlat2.y;
    u_xlat16_3.x = u_xlat2.x * u_xlat2.x + (-u_xlat16_3.x);
    u_xlat16_4 = u_xlat2.yzzx * u_xlat2.xyzz;
    u_xlat16_5.x = dot(unity_SHBr, u_xlat16_4);
    u_xlat16_5.y = dot(unity_SHBg, u_xlat16_4);
    u_xlat16_5.z = dot(unity_SHBb, u_xlat16_4);
    u_xlat16_3.xyz = unity_SHC.xyz * u_xlat16_3.xxx + u_xlat16_5.xyz;
    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat2.w = 1.0;
    u_xlat16_4.x = dot(unity_SHAr, u_xlat2);
    u_xlat16_4.y = dot(unity_SHAg, u_xlat2);
    u_xlat16_4.z = dot(unity_SHAb, u_xlat2);
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
    vs_TEXCOORD1.xyz = u_xlat16_3.xyz;
    vs_TEXCOORD1.w = 1.0;
    u_xlat6.x = float(0.5);
    u_xlat6.z = float(0.5);
    u_xlat6.y = _ProjectionParams.x;
    u_xlat0.xyz = u_xlat0.xyw * u_xlat6.xyz;
    u_xlat0.w = u_xlat0.y * 0.5;
    vs_TEXCOORD2.xy = u_xlat0.zz + u_xlat0.xw;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_mhyJitteredVP[1];
    u_xlat0 = hlslcc_mtx4x4_mhyJitteredVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_mhyJitteredVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_mhyJitteredVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat1.xyz = vec3(u_xlat6.z * u_xlat0.x, u_xlat6.y * u_xlat0.y, u_xlat6.z * u_xlat0.w);
    vs_TEXCOORD3.zw = u_xlat0.zw;
    u_xlat1.w = u_xlat1.y * 0.5;
    vs_TEXCOORD3.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat0.x = dot(hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, hlslcc_mtx4x4unity_ObjectToWorld[0].xyz);
    vs_TEXCOORD4.z = sqrt(u_xlat0.x);
    u_xlat0.x = dot(hlslcc_mtx4x4unity_ObjectToWorld[1].xyz, hlslcc_mtx4x4unity_ObjectToWorld[1].xyz);
    vs_TEXCOORD4.w = sqrt(u_xlat0.x);
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD5.w = 0.0;
    u_xlat0.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat0.xyz;
    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    vs_TEXCOORD6.xyz = u_xlat0.xyz;
    vs_TEXCOORD6.w = 0.0;
    vs_TEXCOORD7.xyz = u_xlat2.xyz;
    vs_TEXCOORD7.w = 0.0;
    u_xlat1.xyz = u_xlat0.yzx * u_xlat2.zxy;
    u_xlat0.xyz = u_xlat2.yzx * u_xlat0.zxy + (-u_xlat1.xyz);
    u_xlat21 = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD8.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    vs_TEXCOORD8.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ZBufferParams;
uniform 	mediump vec4 _LightColor0;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	float _AlphaRange;
uniform 	float _AlphaOffset;
uniform 	float _Opacity;
uniform 	mediump float _BottomAlphaToggle;
uniform 	float _AlphaBottomRange;
uniform 	float _AlphaBottomOffset;
uniform 	vec4 _WaterfallTex01_ST;
uniform 	mediump vec4 _FoamUVCoord01;
uniform 	mediump vec4 _FoamUVCoord02;
uniform 	float _FoamRange;
uniform 	float _FoamOffset;
uniform 	vec4 _DayColor;
uniform 	vec4 _BottomColor;
uniform 	vec4 _TopColor;
uniform 	float _ColorGradientRange;
uniform 	float _ColorGradientOffset;
uniform 	vec4 _ReflectionColor_Dark;
uniform 	vec4 _ReflectionColor_Light;
uniform 	float _Normal01_U_Speed;
uniform 	vec4 _Normal01_ST;
uniform 	float _Normal01_VSpeed;
uniform 	float _Normal02_U_Speed;
uniform 	vec4 _Normal02_ST;
uniform 	float _Normal02_V_Speed;
uniform 	vec4 _DistortionIntensity;
uniform 	float _ReflectionBrightness;
uniform 	float _ReflectionIntensity;
uniform 	float _WaterFall01_Speed;
uniform 	float _Waterfall02_Speed;
uniform 	mediump vec4 _WaterfallPatternColor;
uniform 	float _Waterfall01Brightness;
uniform 	float _Waterfall02Brightness;
uniform 	float _SprayRange;
uniform 	float _SprayOffset;
uniform 	float _ShadowStrength;
uniform 	vec4 _WaterfallSpecTex_ST;
uniform 	float _Detail01_U_Speed;
uniform 	vec4 _NoiseTex_ST;
uniform 	float _Detail01_V_Speed;
uniform 	float _NoiselDistortionValue;
uniform 	mediump vec4 _WaterfallSpecColor;
uniform 	mediump vec4 _FoamColor;
uniform 	vec3 _ES_MainLightColor;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _WaterfallTex01;
uniform lowp sampler2D _Normal01;
uniform lowp sampler2D _Normal02;
uniform lowp samplerCube _Reflection;
uniform lowp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _WaterfallSpecTex;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
in highp vec4 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
lowp vec3 u_xlat10_0;
vec4 u_xlat1;
mediump float u_xlat16_1;
lowp float u_xlat10_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
float u_xlat8;
bool u_xlatb8;
vec2 u_xlat9;
lowp float u_xlat10_9;
float u_xlat12;
mediump float u_xlat16_12;
lowp float u_xlat10_12;
float u_xlat13;
lowp float u_xlat10_15;
void main()
{
    u_xlat0.xy = vs_TEXCOORD4.xy * _Normal01_ST.xy + _Normal01_ST.zw;
    u_xlat0.x = u_xlat0.x * vs_TEXCOORD4.z;
    u_xlat1.x = _Time.y * _Normal01_U_Speed + u_xlat0.x;
    u_xlat0.x = _Time.y * _Normal01_VSpeed;
    u_xlat1.y = u_xlat0.y * vs_TEXCOORD4.w + u_xlat0.x;
    u_xlat10_0.xyz = texture(_Normal01, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xy = vs_TEXCOORD4.xy * _Normal02_ST.xy + _Normal02_ST.zw;
    u_xlat0.xy = vec2(u_xlat0.x * vs_TEXCOORD4.z, u_xlat0.y * vs_TEXCOORD4.w);
    u_xlat1.x = _Time.y * _Normal02_U_Speed + u_xlat0.x;
    u_xlat1.y = _Time.y * _Normal02_V_Speed + u_xlat0.y;
    u_xlat10_0.xyz = texture(_Normal02, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_2.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = u_xlat16_2.xyz * _DistortionIntensity.xyz;
    u_xlat1.x = vs_TEXCOORD6.x;
    u_xlat1.y = vs_TEXCOORD8.x;
    u_xlat1.z = vs_TEXCOORD7.x;
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat3.x = vs_TEXCOORD6.y;
    u_xlat3.y = vs_TEXCOORD8.y;
    u_xlat3.z = vs_TEXCOORD7.y;
    u_xlat1.y = dot(u_xlat3.xyz, u_xlat0.xyz);
    u_xlat3.x = vs_TEXCOORD6.z;
    u_xlat3.y = vs_TEXCOORD8.z;
    u_xlat3.z = vs_TEXCOORD7.z;
    u_xlat1.z = dot(u_xlat3.xyz, u_xlat0.xyz);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
    u_xlat12 = dot((-u_xlat1.xyz), u_xlat0.xyz);
    u_xlat12 = u_xlat12 + u_xlat12;
    u_xlat0.xyz = u_xlat0.xyz * (-vec3(u_xlat12)) + (-u_xlat1.xyz);
    u_xlat10_0.x = texture(_Reflection, u_xlat0.xyz).x;
    u_xlat4.xyz = (-_ReflectionColor_Dark.xyz) + _ReflectionColor_Light.xyz;
    u_xlat0.xyz = u_xlat10_0.xxx * u_xlat4.xyz + _ReflectionColor_Dark.xyz;
    u_xlat12 = vs_TEXCOORD4.y * _ColorGradientRange + _ColorGradientOffset;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat1.xyz = (-_BottomColor.xyz) + _TopColor.xyz;
    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz + _BottomColor.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.200000003, 0.200000003, 0.200000003);
    u_xlat0.xyz = u_xlat0.xyz * vec3(_ReflectionBrightness) + (-u_xlat1.xyz);
    u_xlat0.xyz = vec3(vec3(_ReflectionIntensity, _ReflectionIntensity, _ReflectionIntensity)) * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat1.xy = vs_TEXCOORD4.xy * _WaterfallTex01_ST.xy + _WaterfallTex01_ST.zw;
    u_xlat1.xy = vec2(u_xlat1.x * vs_TEXCOORD4.z, u_xlat1.y * vs_TEXCOORD4.w);
    u_xlat1.zw = _Time.yy * vec2(_WaterFall01_Speed, _Waterfall02_Speed) + u_xlat1.yy;
    u_xlat10_12 = texture(_WaterfallTex01, u_xlat1.xz).x;
    u_xlat10_9 = texture(_WaterfallTex01, u_xlat1.xw).y;
    u_xlat16_2.x = (-u_xlat10_12) + u_xlat10_9;
    u_xlat16_2.x = u_xlat10_9 * u_xlat16_2.x + u_xlat10_12;
    u_xlat12 = u_xlat10_12 * _Waterfall01Brightness;
    u_xlat3.xyz = u_xlat16_2.xxx * _WaterfallPatternColor.xyz + (-u_xlat0.xyz);
    u_xlat13 = u_xlat10_9 * _Waterfall02Brightness + (-u_xlat12);
    u_xlat9.x = u_xlat10_9 * _Waterfall02Brightness;
    u_xlat12 = u_xlat9.x * u_xlat13 + u_xlat12;
    u_xlat9.x = vs_TEXCOORD4.y * _SprayRange + _SprayOffset;
    u_xlat9.x = (-u_xlat9.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat9.x = min(max(u_xlat9.x, 0.0), 1.0);
#else
    u_xlat9.x = clamp(u_xlat9.x, 0.0, 1.0);
#endif
    u_xlat12 = u_xlat12 * u_xlat9.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * _DayColor.xyz;
    u_xlat9.xy = vs_TEXCOORD4.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat3.x = _Time.y * _Detail01_U_Speed + u_xlat9.x;
    u_xlat3.y = _Time.y * _Detail01_V_Speed + u_xlat9.y;
    u_xlat10_12 = texture(_NoiseTex, u_xlat3.xy).x;
    u_xlat16_2.x = vs_TEXCOORD4.w * 0.5;
    u_xlat9.xy = vs_TEXCOORD4.xy * _WaterfallSpecTex_ST.xy + _WaterfallSpecTex_ST.zw;
    u_xlat16_2.x = vs_TEXCOORD4.w * u_xlat9.y + (-u_xlat16_2.x);
    u_xlat3.x = u_xlat10_12 * _NoiselDistortionValue + u_xlat9.x;
    u_xlat3.y = u_xlat10_12 * _NoiselDistortionValue + u_xlat16_2.x;
    u_xlat10_12 = texture(_WaterfallSpecTex, u_xlat3.xy).x;
    u_xlat16_3.xyz = vec3(u_xlat10_12) * _WaterfallSpecColor.xyz;
    u_xlat12 = (-_ShadowStrength) + 1.0;
    u_xlat9.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat10_15 = texture(_ShadowMapTexture, u_xlat9.xy).x;
    u_xlat9.x = texture(_CameraDepthTexture, u_xlat9.xy).x;
    u_xlat9.x = _ZBufferParams.z * u_xlat9.x + _ZBufferParams.w;
    u_xlat9.x = float(1.0) / u_xlat9.x;
    u_xlat9.x = u_xlat9.x + (-vs_TEXCOORD3.w);
    u_xlat12 = u_xlat10_15 * u_xlat12 + _ShadowStrength;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat12) + u_xlat16_3.xyz;
    u_xlat3.xy = vec2(_Time.y * _FoamUVCoord01.z, _Time.y * _FoamUVCoord01.w);
    u_xlat3.xy = u_xlat1.xy * _FoamUVCoord01.xy + u_xlat3.xy;
    u_xlat10_12 = texture(_WaterfallTex01, u_xlat3.xy).x;
    u_xlat3.xy = vec2(_Time.y * _FoamUVCoord02.z, _Time.y * _FoamUVCoord02.w);
    u_xlat1.xy = u_xlat1.xy * _FoamUVCoord02.xy + u_xlat3.xy;
    u_xlat10_1 = texture(_WaterfallTex01, u_xlat1.xy).y;
    u_xlat16_12 = u_xlat10_12 + u_xlat10_1;
    u_xlat1.x = vs_TEXCOORD4.y * _FoamRange + _FoamOffset;
    u_xlat12 = u_xlat16_12 + u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat1.x = (-u_xlat1.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat12 * u_xlat1.x;
    u_xlat0.xyz = u_xlat1.xxx * _FoamColor.xyz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * _ES_MainLightColor.xyz;
    u_xlat16_1 = max(_LightColor0.w, 1.0);
    u_xlat2.xyz = u_xlat0.xyz * vec3(u_xlat16_1);
    u_xlat0.x = u_xlat9.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat4.x = u_xlat9.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat8 = (-u_xlat4.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat8 + u_xlat4.x;
    u_xlat4.x = vs_TEXCOORD4.y * _AlphaRange + _AlphaOffset;
    u_xlat4.x = (-u_xlat4.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat4.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _Opacity;
    u_xlat4.x = vs_TEXCOORD4.y * _AlphaBottomRange + _AlphaBottomOffset;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(_BottomAlphaToggle==1.0);
#else
    u_xlatb8 = _BottomAlphaToggle==1.0;
#endif
    u_xlat4.x = (u_xlatb8) ? u_xlat4.x : 1.0;
    u_xlat0.x = u_xlat4.x * u_xlat0.x;
    u_xlat2.w = u_xlat12 * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.w = min(max(u_xlat2.w, 0.0), 1.0);
#else
    u_xlat2.w = clamp(u_xlat2.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat2;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
uniform 	vec4 hlslcc_mtx4x4_mhyJitteredVP[4];
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
vec3 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump vec3 u_xlat16_4;
mediump vec4 u_xlat16_5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
vec3 u_xlat8;
float u_xlat24;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    vs_TEXCOORD5.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    u_xlat1.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position = u_xlat1;
    vs_TEXCOORD2.zw = u_xlat1.zw;
    vs_COLOR0 = in_COLOR0;
    u_xlat3.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat3.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat3.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat8.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat3.xyz = u_xlat8.xxx * u_xlat3.xyz;
    u_xlat16_4.x = u_xlat3.y * u_xlat3.y;
    u_xlat16_4.x = u_xlat3.x * u_xlat3.x + (-u_xlat16_4.x);
    u_xlat16_5 = u_xlat3.yzzx * u_xlat3.xyzz;
    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_5);
    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_5);
    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_5);
    u_xlat16_4.xyz = unity_SHC.xyz * u_xlat16_4.xxx + u_xlat16_6.xyz;
    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat3.w = 1.0;
    u_xlat16_5.x = dot(unity_SHAr, u_xlat3);
    u_xlat16_5.y = dot(unity_SHAg, u_xlat3);
    u_xlat16_5.z = dot(unity_SHAb, u_xlat3);
    u_xlat16_4.xyz = u_xlat16_4.xyz + u_xlat16_5.xyz;
    vs_TEXCOORD1.xyz = u_xlat16_4.xyz;
    vs_TEXCOORD1.w = 1.0;
    u_xlat7.x = float(0.5);
    u_xlat7.z = float(0.5);
    u_xlat7.y = _ProjectionParams.x;
    u_xlat1.xyz = u_xlat1.xyw * u_xlat7.xyz;
    u_xlat1.w = u_xlat1.y * 0.5;
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4_mhyJitteredVP[1];
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[3] * u_xlat2.wwww + u_xlat1;
    u_xlat2.xyz = vec3(u_xlat7.z * u_xlat1.x, u_xlat7.y * u_xlat1.y, u_xlat7.z * u_xlat1.w);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    u_xlat2.w = u_xlat2.y * 0.5;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy;
    u_xlat8.x = dot(unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz);
    vs_TEXCOORD4.z = sqrt(u_xlat8.x);
    u_xlat8.x = dot(unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz);
    vs_TEXCOORD4.w = sqrt(u_xlat8.x);
    vs_TEXCOORD5.w = 0.0;
    u_xlat8.xyz = in_TANGENT0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat8.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_TANGENT0.xxx + u_xlat8.xyz;
    u_xlat0.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_TANGENT0.zzz + u_xlat8.xyz;
    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat0.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    vs_TEXCOORD6.xyz = u_xlat0.xyz;
    vs_TEXCOORD6.w = 0.0;
    vs_TEXCOORD7.xyz = u_xlat3.xyz;
    vs_TEXCOORD7.w = 0.0;
    u_xlat1.xyz = u_xlat0.yzx * u_xlat3.zxy;
    u_xlat0.xyz = u_xlat3.yzx * u_xlat0.zxy + (-u_xlat1.xyz);
    u_xlat24 = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD8.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    vs_TEXCOORD8.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 _LightColor0;
uniform 	float _AlphaRange;
uniform 	float _AlphaOffset;
uniform 	float _Opacity;
uniform 	mediump float _BottomAlphaToggle;
uniform 	float _AlphaBottomRange;
uniform 	float _AlphaBottomOffset;
uniform 	vec4 _WaterfallTex01_ST;
uniform 	mediump vec4 _FoamUVCoord01;
uniform 	mediump vec4 _FoamUVCoord02;
uniform 	float _FoamRange;
uniform 	float _FoamOffset;
uniform 	vec4 _DayColor;
uniform 	vec4 _BottomColor;
uniform 	vec4 _TopColor;
uniform 	float _ColorGradientRange;
uniform 	float _ColorGradientOffset;
uniform 	vec4 _ReflectionColor_Dark;
uniform 	vec4 _ReflectionColor_Light;
uniform 	float _Normal01_U_Speed;
uniform 	vec4 _Normal01_ST;
uniform 	float _Normal01_VSpeed;
uniform 	float _Normal02_U_Speed;
uniform 	vec4 _Normal02_ST;
uniform 	float _Normal02_V_Speed;
uniform 	vec4 _DistortionIntensity;
uniform 	float _ReflectionBrightness;
uniform 	float _ReflectionIntensity;
uniform 	float _WaterFall01_Speed;
uniform 	float _Waterfall02_Speed;
uniform 	mediump vec4 _WaterfallPatternColor;
uniform 	float _Waterfall01Brightness;
uniform 	float _Waterfall02Brightness;
uniform 	float _SprayRange;
uniform 	float _SprayOffset;
uniform 	float _ShadowStrength;
uniform 	vec4 _WaterfallSpecTex_ST;
uniform 	float _Detail01_U_Speed;
uniform 	vec4 _NoiseTex_ST;
uniform 	float _Detail01_V_Speed;
uniform 	float _NoiselDistortionValue;
uniform 	mediump vec4 _WaterfallSpecColor;
uniform 	mediump vec4 _FoamColor;
uniform 	vec3 _ES_MainLightColor;
uniform lowp sampler2D _WaterfallTex01;
uniform lowp sampler2D _Normal01;
uniform lowp sampler2D _Normal02;
uniform lowp samplerCube _Reflection;
uniform lowp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _WaterfallSpecTex;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
in highp vec4 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
lowp vec3 u_xlat10_0;
vec4 u_xlat1;
mediump float u_xlat16_1;
lowp float u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
bool u_xlatb4;
vec2 u_xlat9;
lowp float u_xlat10_9;
float u_xlat12;
mediump float u_xlat16_12;
lowp float u_xlat10_12;
float u_xlat13;
void main()
{
    u_xlat0.xy = vs_TEXCOORD4.xy * _Normal01_ST.xy + _Normal01_ST.zw;
    u_xlat0.x = u_xlat0.x * vs_TEXCOORD4.z;
    u_xlat1.x = _Time.y * _Normal01_U_Speed + u_xlat0.x;
    u_xlat0.x = _Time.y * _Normal01_VSpeed;
    u_xlat1.y = u_xlat0.y * vs_TEXCOORD4.w + u_xlat0.x;
    u_xlat10_0.xyz = texture(_Normal01, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xy = vs_TEXCOORD4.xy * _Normal02_ST.xy + _Normal02_ST.zw;
    u_xlat0.xy = vec2(u_xlat0.x * vs_TEXCOORD4.z, u_xlat0.y * vs_TEXCOORD4.w);
    u_xlat1.x = _Time.y * _Normal02_U_Speed + u_xlat0.x;
    u_xlat1.y = _Time.y * _Normal02_V_Speed + u_xlat0.y;
    u_xlat10_0.xyz = texture(_Normal02, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_2.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = u_xlat16_2.xyz * _DistortionIntensity.xyz;
    u_xlat1.x = vs_TEXCOORD6.x;
    u_xlat1.y = vs_TEXCOORD8.x;
    u_xlat1.z = vs_TEXCOORD7.x;
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat3.x = vs_TEXCOORD6.y;
    u_xlat3.y = vs_TEXCOORD8.y;
    u_xlat3.z = vs_TEXCOORD7.y;
    u_xlat1.y = dot(u_xlat3.xyz, u_xlat0.xyz);
    u_xlat3.x = vs_TEXCOORD6.z;
    u_xlat3.y = vs_TEXCOORD8.z;
    u_xlat3.z = vs_TEXCOORD7.z;
    u_xlat1.z = dot(u_xlat3.xyz, u_xlat0.xyz);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
    u_xlat12 = dot((-u_xlat1.xyz), u_xlat0.xyz);
    u_xlat12 = u_xlat12 + u_xlat12;
    u_xlat0.xyz = u_xlat0.xyz * (-vec3(u_xlat12)) + (-u_xlat1.xyz);
    u_xlat10_0.x = texture(_Reflection, u_xlat0.xyz).x;
    u_xlat4.xyz = (-_ReflectionColor_Dark.xyz) + _ReflectionColor_Light.xyz;
    u_xlat0.xyz = u_xlat10_0.xxx * u_xlat4.xyz + _ReflectionColor_Dark.xyz;
    u_xlat12 = vs_TEXCOORD4.y * _ColorGradientRange + _ColorGradientOffset;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat1.xyz = (-_BottomColor.xyz) + _TopColor.xyz;
    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz + _BottomColor.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.200000003, 0.200000003, 0.200000003);
    u_xlat0.xyz = u_xlat0.xyz * vec3(_ReflectionBrightness) + (-u_xlat1.xyz);
    u_xlat0.xyz = vec3(vec3(_ReflectionIntensity, _ReflectionIntensity, _ReflectionIntensity)) * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat1.xy = vs_TEXCOORD4.xy * _WaterfallTex01_ST.xy + _WaterfallTex01_ST.zw;
    u_xlat1.xy = vec2(u_xlat1.x * vs_TEXCOORD4.z, u_xlat1.y * vs_TEXCOORD4.w);
    u_xlat1.zw = _Time.yy * vec2(_WaterFall01_Speed, _Waterfall02_Speed) + u_xlat1.yy;
    u_xlat10_12 = texture(_WaterfallTex01, u_xlat1.xz).x;
    u_xlat10_9 = texture(_WaterfallTex01, u_xlat1.xw).y;
    u_xlat16_2.x = (-u_xlat10_12) + u_xlat10_9;
    u_xlat16_2.x = u_xlat10_9 * u_xlat16_2.x + u_xlat10_12;
    u_xlat12 = u_xlat10_12 * _Waterfall01Brightness;
    u_xlat3.xyz = u_xlat16_2.xxx * _WaterfallPatternColor.xyz + (-u_xlat0.xyz);
    u_xlat13 = u_xlat10_9 * _Waterfall02Brightness + (-u_xlat12);
    u_xlat9.x = u_xlat10_9 * _Waterfall02Brightness;
    u_xlat12 = u_xlat9.x * u_xlat13 + u_xlat12;
    u_xlat9.x = vs_TEXCOORD4.y * _SprayRange + _SprayOffset;
    u_xlat9.x = (-u_xlat9.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat9.x = min(max(u_xlat9.x, 0.0), 1.0);
#else
    u_xlat9.x = clamp(u_xlat9.x, 0.0, 1.0);
#endif
    u_xlat12 = u_xlat12 * u_xlat9.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * _DayColor.xyz;
    u_xlat9.xy = vs_TEXCOORD4.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat3.x = _Time.y * _Detail01_U_Speed + u_xlat9.x;
    u_xlat3.y = _Time.y * _Detail01_V_Speed + u_xlat9.y;
    u_xlat10_12 = texture(_NoiseTex, u_xlat3.xy).x;
    u_xlat16_2.x = vs_TEXCOORD4.w * 0.5;
    u_xlat9.xy = vs_TEXCOORD4.xy * _WaterfallSpecTex_ST.xy + _WaterfallSpecTex_ST.zw;
    u_xlat16_2.x = vs_TEXCOORD4.w * u_xlat9.y + (-u_xlat16_2.x);
    u_xlat3.x = u_xlat10_12 * _NoiselDistortionValue + u_xlat9.x;
    u_xlat3.y = u_xlat10_12 * _NoiselDistortionValue + u_xlat16_2.x;
    u_xlat10_12 = texture(_WaterfallSpecTex, u_xlat3.xy).x;
    u_xlat16_3.xyz = vec3(u_xlat10_12) * _WaterfallSpecColor.xyz;
    u_xlat9.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat10_12 = texture(_ShadowMapTexture, u_xlat9.xy).x;
    u_xlat9.x = (-_ShadowStrength) + 1.0;
    u_xlat12 = u_xlat10_12 * u_xlat9.x + _ShadowStrength;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat12) + u_xlat16_3.xyz;
    u_xlat9.xy = vec2(_Time.y * _FoamUVCoord01.z, _Time.y * _FoamUVCoord01.w);
    u_xlat9.xy = u_xlat1.xy * _FoamUVCoord01.xy + u_xlat9.xy;
    u_xlat10_12 = texture(_WaterfallTex01, u_xlat9.xy).x;
    u_xlat9.xy = vec2(_Time.y * _FoamUVCoord02.z, _Time.y * _FoamUVCoord02.w);
    u_xlat1.xy = u_xlat1.xy * _FoamUVCoord02.xy + u_xlat9.xy;
    u_xlat10_1 = texture(_WaterfallTex01, u_xlat1.xy).y;
    u_xlat16_12 = u_xlat10_12 + u_xlat10_1;
    u_xlat1.x = vs_TEXCOORD4.y * _FoamRange + _FoamOffset;
    u_xlat12 = u_xlat16_12 + u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat1.x = (-u_xlat1.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat12 * u_xlat1.x;
    u_xlat0.xyz = u_xlat1.xxx * _FoamColor.xyz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * _ES_MainLightColor.xyz;
    u_xlat16_1 = max(_LightColor0.w, 1.0);
    u_xlat1.xyz = u_xlat0.xyz * vec3(u_xlat16_1);
    u_xlat0.x = vs_TEXCOORD4.y * _AlphaBottomRange + _AlphaBottomOffset;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(_BottomAlphaToggle==1.0);
#else
    u_xlatb4 = _BottomAlphaToggle==1.0;
#endif
    u_xlat0.x = (u_xlatb4) ? u_xlat0.x : 1.0;
    u_xlat4.x = vs_TEXCOORD4.y * _AlphaRange + _AlphaOffset;
    u_xlat4.x = (-u_xlat4.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat4.x = u_xlat4.x * _Opacity;
    u_xlat0.x = u_xlat0.x * u_xlat4.x;
    u_xlat1.w = u_xlat12 * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
uniform 	vec4 hlslcc_mtx4x4_mhyJitteredVP[4];
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
vec3 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump vec3 u_xlat16_4;
mediump vec4 u_xlat16_5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
vec3 u_xlat8;
float u_xlat24;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    vs_TEXCOORD5.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    u_xlat1.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position = u_xlat1;
    vs_TEXCOORD2.zw = u_xlat1.zw;
    vs_COLOR0 = in_COLOR0;
    u_xlat3.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat3.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat3.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat8.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat3.xyz = u_xlat8.xxx * u_xlat3.xyz;
    u_xlat16_4.x = u_xlat3.y * u_xlat3.y;
    u_xlat16_4.x = u_xlat3.x * u_xlat3.x + (-u_xlat16_4.x);
    u_xlat16_5 = u_xlat3.yzzx * u_xlat3.xyzz;
    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_5);
    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_5);
    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_5);
    u_xlat16_4.xyz = unity_SHC.xyz * u_xlat16_4.xxx + u_xlat16_6.xyz;
    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat3.w = 1.0;
    u_xlat16_5.x = dot(unity_SHAr, u_xlat3);
    u_xlat16_5.y = dot(unity_SHAg, u_xlat3);
    u_xlat16_5.z = dot(unity_SHAb, u_xlat3);
    u_xlat16_4.xyz = u_xlat16_4.xyz + u_xlat16_5.xyz;
    vs_TEXCOORD1.xyz = u_xlat16_4.xyz;
    vs_TEXCOORD1.w = 1.0;
    u_xlat7.x = float(0.5);
    u_xlat7.z = float(0.5);
    u_xlat7.y = _ProjectionParams.x;
    u_xlat1.xyz = u_xlat1.xyw * u_xlat7.xyz;
    u_xlat1.w = u_xlat1.y * 0.5;
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4_mhyJitteredVP[1];
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[3] * u_xlat2.wwww + u_xlat1;
    u_xlat2.xyz = vec3(u_xlat7.z * u_xlat1.x, u_xlat7.y * u_xlat1.y, u_xlat7.z * u_xlat1.w);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    u_xlat2.w = u_xlat2.y * 0.5;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy;
    u_xlat8.x = dot(unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz);
    vs_TEXCOORD4.z = sqrt(u_xlat8.x);
    u_xlat8.x = dot(unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz);
    vs_TEXCOORD4.w = sqrt(u_xlat8.x);
    vs_TEXCOORD5.w = 0.0;
    u_xlat8.xyz = in_TANGENT0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat8.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_TANGENT0.xxx + u_xlat8.xyz;
    u_xlat0.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_TANGENT0.zzz + u_xlat8.xyz;
    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat0.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    vs_TEXCOORD6.xyz = u_xlat0.xyz;
    vs_TEXCOORD6.w = 0.0;
    vs_TEXCOORD7.xyz = u_xlat3.xyz;
    vs_TEXCOORD7.w = 0.0;
    u_xlat1.xyz = u_xlat0.yzx * u_xlat3.zxy;
    u_xlat0.xyz = u_xlat3.yzx * u_xlat0.zxy + (-u_xlat1.xyz);
    u_xlat24 = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD8.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    vs_TEXCOORD8.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ZBufferParams;
uniform 	mediump vec4 _LightColor0;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	float _AlphaRange;
uniform 	float _AlphaOffset;
uniform 	float _Opacity;
uniform 	mediump float _BottomAlphaToggle;
uniform 	float _AlphaBottomRange;
uniform 	float _AlphaBottomOffset;
uniform 	vec4 _WaterfallTex01_ST;
uniform 	mediump vec4 _FoamUVCoord01;
uniform 	mediump vec4 _FoamUVCoord02;
uniform 	float _FoamRange;
uniform 	float _FoamOffset;
uniform 	vec4 _DayColor;
uniform 	vec4 _BottomColor;
uniform 	vec4 _TopColor;
uniform 	float _ColorGradientRange;
uniform 	float _ColorGradientOffset;
uniform 	vec4 _ReflectionColor_Dark;
uniform 	vec4 _ReflectionColor_Light;
uniform 	float _Normal01_U_Speed;
uniform 	vec4 _Normal01_ST;
uniform 	float _Normal01_VSpeed;
uniform 	float _Normal02_U_Speed;
uniform 	vec4 _Normal02_ST;
uniform 	float _Normal02_V_Speed;
uniform 	vec4 _DistortionIntensity;
uniform 	float _ReflectionBrightness;
uniform 	float _ReflectionIntensity;
uniform 	float _WaterFall01_Speed;
uniform 	float _Waterfall02_Speed;
uniform 	mediump vec4 _WaterfallPatternColor;
uniform 	float _Waterfall01Brightness;
uniform 	float _Waterfall02Brightness;
uniform 	float _SprayRange;
uniform 	float _SprayOffset;
uniform 	float _ShadowStrength;
uniform 	vec4 _WaterfallSpecTex_ST;
uniform 	float _Detail01_U_Speed;
uniform 	vec4 _NoiseTex_ST;
uniform 	float _Detail01_V_Speed;
uniform 	float _NoiselDistortionValue;
uniform 	mediump vec4 _WaterfallSpecColor;
uniform 	mediump vec4 _FoamColor;
uniform 	vec3 _ES_MainLightColor;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _WaterfallTex01;
uniform lowp sampler2D _Normal01;
uniform lowp sampler2D _Normal02;
uniform lowp samplerCube _Reflection;
uniform lowp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _WaterfallSpecTex;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
in highp vec4 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
lowp vec3 u_xlat10_0;
vec4 u_xlat1;
mediump float u_xlat16_1;
lowp float u_xlat10_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
float u_xlat8;
bool u_xlatb8;
vec2 u_xlat9;
lowp float u_xlat10_9;
float u_xlat12;
mediump float u_xlat16_12;
lowp float u_xlat10_12;
float u_xlat13;
lowp float u_xlat10_15;
void main()
{
    u_xlat0.xy = vs_TEXCOORD4.xy * _Normal01_ST.xy + _Normal01_ST.zw;
    u_xlat0.x = u_xlat0.x * vs_TEXCOORD4.z;
    u_xlat1.x = _Time.y * _Normal01_U_Speed + u_xlat0.x;
    u_xlat0.x = _Time.y * _Normal01_VSpeed;
    u_xlat1.y = u_xlat0.y * vs_TEXCOORD4.w + u_xlat0.x;
    u_xlat10_0.xyz = texture(_Normal01, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xy = vs_TEXCOORD4.xy * _Normal02_ST.xy + _Normal02_ST.zw;
    u_xlat0.xy = vec2(u_xlat0.x * vs_TEXCOORD4.z, u_xlat0.y * vs_TEXCOORD4.w);
    u_xlat1.x = _Time.y * _Normal02_U_Speed + u_xlat0.x;
    u_xlat1.y = _Time.y * _Normal02_V_Speed + u_xlat0.y;
    u_xlat10_0.xyz = texture(_Normal02, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_2.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = u_xlat16_2.xyz * _DistortionIntensity.xyz;
    u_xlat1.x = vs_TEXCOORD6.x;
    u_xlat1.y = vs_TEXCOORD8.x;
    u_xlat1.z = vs_TEXCOORD7.x;
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat3.x = vs_TEXCOORD6.y;
    u_xlat3.y = vs_TEXCOORD8.y;
    u_xlat3.z = vs_TEXCOORD7.y;
    u_xlat1.y = dot(u_xlat3.xyz, u_xlat0.xyz);
    u_xlat3.x = vs_TEXCOORD6.z;
    u_xlat3.y = vs_TEXCOORD8.z;
    u_xlat3.z = vs_TEXCOORD7.z;
    u_xlat1.z = dot(u_xlat3.xyz, u_xlat0.xyz);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
    u_xlat12 = dot((-u_xlat1.xyz), u_xlat0.xyz);
    u_xlat12 = u_xlat12 + u_xlat12;
    u_xlat0.xyz = u_xlat0.xyz * (-vec3(u_xlat12)) + (-u_xlat1.xyz);
    u_xlat10_0.x = texture(_Reflection, u_xlat0.xyz).x;
    u_xlat4.xyz = (-_ReflectionColor_Dark.xyz) + _ReflectionColor_Light.xyz;
    u_xlat0.xyz = u_xlat10_0.xxx * u_xlat4.xyz + _ReflectionColor_Dark.xyz;
    u_xlat12 = vs_TEXCOORD4.y * _ColorGradientRange + _ColorGradientOffset;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat1.xyz = (-_BottomColor.xyz) + _TopColor.xyz;
    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz + _BottomColor.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.200000003, 0.200000003, 0.200000003);
    u_xlat0.xyz = u_xlat0.xyz * vec3(_ReflectionBrightness) + (-u_xlat1.xyz);
    u_xlat0.xyz = vec3(vec3(_ReflectionIntensity, _ReflectionIntensity, _ReflectionIntensity)) * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat1.xy = vs_TEXCOORD4.xy * _WaterfallTex01_ST.xy + _WaterfallTex01_ST.zw;
    u_xlat1.xy = vec2(u_xlat1.x * vs_TEXCOORD4.z, u_xlat1.y * vs_TEXCOORD4.w);
    u_xlat1.zw = _Time.yy * vec2(_WaterFall01_Speed, _Waterfall02_Speed) + u_xlat1.yy;
    u_xlat10_12 = texture(_WaterfallTex01, u_xlat1.xz).x;
    u_xlat10_9 = texture(_WaterfallTex01, u_xlat1.xw).y;
    u_xlat16_2.x = (-u_xlat10_12) + u_xlat10_9;
    u_xlat16_2.x = u_xlat10_9 * u_xlat16_2.x + u_xlat10_12;
    u_xlat12 = u_xlat10_12 * _Waterfall01Brightness;
    u_xlat3.xyz = u_xlat16_2.xxx * _WaterfallPatternColor.xyz + (-u_xlat0.xyz);
    u_xlat13 = u_xlat10_9 * _Waterfall02Brightness + (-u_xlat12);
    u_xlat9.x = u_xlat10_9 * _Waterfall02Brightness;
    u_xlat12 = u_xlat9.x * u_xlat13 + u_xlat12;
    u_xlat9.x = vs_TEXCOORD4.y * _SprayRange + _SprayOffset;
    u_xlat9.x = (-u_xlat9.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat9.x = min(max(u_xlat9.x, 0.0), 1.0);
#else
    u_xlat9.x = clamp(u_xlat9.x, 0.0, 1.0);
#endif
    u_xlat12 = u_xlat12 * u_xlat9.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * _DayColor.xyz;
    u_xlat9.xy = vs_TEXCOORD4.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat3.x = _Time.y * _Detail01_U_Speed + u_xlat9.x;
    u_xlat3.y = _Time.y * _Detail01_V_Speed + u_xlat9.y;
    u_xlat10_12 = texture(_NoiseTex, u_xlat3.xy).x;
    u_xlat16_2.x = vs_TEXCOORD4.w * 0.5;
    u_xlat9.xy = vs_TEXCOORD4.xy * _WaterfallSpecTex_ST.xy + _WaterfallSpecTex_ST.zw;
    u_xlat16_2.x = vs_TEXCOORD4.w * u_xlat9.y + (-u_xlat16_2.x);
    u_xlat3.x = u_xlat10_12 * _NoiselDistortionValue + u_xlat9.x;
    u_xlat3.y = u_xlat10_12 * _NoiselDistortionValue + u_xlat16_2.x;
    u_xlat10_12 = texture(_WaterfallSpecTex, u_xlat3.xy).x;
    u_xlat16_3.xyz = vec3(u_xlat10_12) * _WaterfallSpecColor.xyz;
    u_xlat12 = (-_ShadowStrength) + 1.0;
    u_xlat9.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat10_15 = texture(_ShadowMapTexture, u_xlat9.xy).x;
    u_xlat9.x = texture(_CameraDepthTexture, u_xlat9.xy).x;
    u_xlat9.x = _ZBufferParams.z * u_xlat9.x + _ZBufferParams.w;
    u_xlat9.x = float(1.0) / u_xlat9.x;
    u_xlat9.x = u_xlat9.x + (-vs_TEXCOORD3.w);
    u_xlat12 = u_xlat10_15 * u_xlat12 + _ShadowStrength;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat12) + u_xlat16_3.xyz;
    u_xlat3.xy = vec2(_Time.y * _FoamUVCoord01.z, _Time.y * _FoamUVCoord01.w);
    u_xlat3.xy = u_xlat1.xy * _FoamUVCoord01.xy + u_xlat3.xy;
    u_xlat10_12 = texture(_WaterfallTex01, u_xlat3.xy).x;
    u_xlat3.xy = vec2(_Time.y * _FoamUVCoord02.z, _Time.y * _FoamUVCoord02.w);
    u_xlat1.xy = u_xlat1.xy * _FoamUVCoord02.xy + u_xlat3.xy;
    u_xlat10_1 = texture(_WaterfallTex01, u_xlat1.xy).y;
    u_xlat16_12 = u_xlat10_12 + u_xlat10_1;
    u_xlat1.x = vs_TEXCOORD4.y * _FoamRange + _FoamOffset;
    u_xlat12 = u_xlat16_12 + u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat1.x = (-u_xlat1.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat12 * u_xlat1.x;
    u_xlat0.xyz = u_xlat1.xxx * _FoamColor.xyz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * _ES_MainLightColor.xyz;
    u_xlat16_1 = max(_LightColor0.w, 1.0);
    u_xlat2.xyz = u_xlat0.xyz * vec3(u_xlat16_1);
    u_xlat0.x = u_xlat9.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat4.x = u_xlat9.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat8 = (-u_xlat4.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat8 + u_xlat4.x;
    u_xlat4.x = vs_TEXCOORD4.y * _AlphaRange + _AlphaOffset;
    u_xlat4.x = (-u_xlat4.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat4.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _Opacity;
    u_xlat4.x = vs_TEXCOORD4.y * _AlphaBottomRange + _AlphaBottomOffset;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(_BottomAlphaToggle==1.0);
#else
    u_xlatb8 = _BottomAlphaToggle==1.0;
#endif
    u_xlat4.x = (u_xlatb8) ? u_xlat4.x : 1.0;
    u_xlat0.x = u_xlat4.x * u_xlat0.x;
    u_xlat2.w = u_xlat12 * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.w = min(max(u_xlat2.w, 0.0), 1.0);
#else
    u_xlat2.w = clamp(u_xlat2.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat2;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "HALF_RESOLUTION_PARTICLE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
uniform 	vec4 hlslcc_mtx4x4_mhyJitteredVP[4];
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec4 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
float u_xlat14;
float u_xlat21;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD5.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat0.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position = u_xlat0;
    vs_TEXCOORD2.zw = u_xlat0.zw;
    vs_COLOR0 = in_COLOR0;
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat14 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat14 = inversesqrt(u_xlat14);
    u_xlat2.xyz = vec3(u_xlat14) * u_xlat2.xyz;
    u_xlat16_3.x = u_xlat2.y * u_xlat2.y;
    u_xlat16_3.x = u_xlat2.x * u_xlat2.x + (-u_xlat16_3.x);
    u_xlat16_4 = u_xlat2.yzzx * u_xlat2.xyzz;
    u_xlat16_5.x = dot(unity_SHBr, u_xlat16_4);
    u_xlat16_5.y = dot(unity_SHBg, u_xlat16_4);
    u_xlat16_5.z = dot(unity_SHBb, u_xlat16_4);
    u_xlat16_3.xyz = unity_SHC.xyz * u_xlat16_3.xxx + u_xlat16_5.xyz;
    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat2.w = 1.0;
    u_xlat16_4.x = dot(unity_SHAr, u_xlat2);
    u_xlat16_4.y = dot(unity_SHAg, u_xlat2);
    u_xlat16_4.z = dot(unity_SHAb, u_xlat2);
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
    vs_TEXCOORD1.xyz = u_xlat16_3.xyz;
    vs_TEXCOORD1.w = 1.0;
    u_xlat6.x = float(0.5);
    u_xlat6.z = float(0.5);
    u_xlat6.y = _ProjectionParams.x;
    u_xlat0.xyz = u_xlat0.xyw * u_xlat6.xyz;
    u_xlat0.w = u_xlat0.y * 0.5;
    vs_TEXCOORD2.xy = u_xlat0.zz + u_xlat0.xw;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_mhyJitteredVP[1];
    u_xlat0 = hlslcc_mtx4x4_mhyJitteredVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_mhyJitteredVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_mhyJitteredVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat1.xyz = vec3(u_xlat6.z * u_xlat0.x, u_xlat6.y * u_xlat0.y, u_xlat6.z * u_xlat0.w);
    vs_TEXCOORD3.zw = u_xlat0.zw;
    u_xlat1.w = u_xlat1.y * 0.5;
    vs_TEXCOORD3.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat0.x = dot(hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, hlslcc_mtx4x4unity_ObjectToWorld[0].xyz);
    vs_TEXCOORD4.z = sqrt(u_xlat0.x);
    u_xlat0.x = dot(hlslcc_mtx4x4unity_ObjectToWorld[1].xyz, hlslcc_mtx4x4unity_ObjectToWorld[1].xyz);
    vs_TEXCOORD4.w = sqrt(u_xlat0.x);
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD5.w = 0.0;
    u_xlat0.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat0.xyz;
    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    vs_TEXCOORD6.xyz = u_xlat0.xyz;
    vs_TEXCOORD6.w = 0.0;
    vs_TEXCOORD7.xyz = u_xlat2.xyz;
    vs_TEXCOORD7.w = 0.0;
    u_xlat1.xyz = u_xlat0.yzx * u_xlat2.zxy;
    u_xlat0.xyz = u_xlat2.yzx * u_xlat0.zxy + (-u_xlat1.xyz);
    u_xlat21 = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD8.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    vs_TEXCOORD8.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 _LightColor0;
uniform 	float _AlphaRange;
uniform 	float _AlphaOffset;
uniform 	float _Opacity;
uniform 	mediump float _BottomAlphaToggle;
uniform 	float _AlphaBottomRange;
uniform 	float _AlphaBottomOffset;
uniform 	vec4 _WaterfallTex01_ST;
uniform 	mediump vec4 _FoamUVCoord01;
uniform 	mediump vec4 _FoamUVCoord02;
uniform 	float _FoamRange;
uniform 	float _FoamOffset;
uniform 	vec4 _DayColor;
uniform 	vec4 _BottomColor;
uniform 	vec4 _TopColor;
uniform 	float _ColorGradientRange;
uniform 	float _ColorGradientOffset;
uniform 	vec4 _ReflectionColor_Dark;
uniform 	vec4 _ReflectionColor_Light;
uniform 	float _Normal01_U_Speed;
uniform 	vec4 _Normal01_ST;
uniform 	float _Normal01_VSpeed;
uniform 	float _Normal02_U_Speed;
uniform 	vec4 _Normal02_ST;
uniform 	float _Normal02_V_Speed;
uniform 	vec4 _DistortionIntensity;
uniform 	float _ReflectionBrightness;
uniform 	float _ReflectionIntensity;
uniform 	float _WaterFall01_Speed;
uniform 	float _Waterfall02_Speed;
uniform 	mediump vec4 _WaterfallPatternColor;
uniform 	float _Waterfall01Brightness;
uniform 	float _Waterfall02Brightness;
uniform 	float _SprayRange;
uniform 	float _SprayOffset;
uniform 	float _ShadowStrength;
uniform 	vec4 _WaterfallSpecTex_ST;
uniform 	float _Detail01_U_Speed;
uniform 	vec4 _NoiseTex_ST;
uniform 	float _Detail01_V_Speed;
uniform 	float _NoiselDistortionValue;
uniform 	mediump vec4 _WaterfallSpecColor;
uniform 	mediump vec4 _FoamColor;
uniform 	vec3 _ES_MainLightColor;
uniform lowp sampler2D _WaterfallTex01;
uniform lowp sampler2D _Normal01;
uniform lowp sampler2D _Normal02;
uniform lowp samplerCube _Reflection;
uniform lowp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _WaterfallSpecTex;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
in highp vec4 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
lowp vec3 u_xlat10_0;
vec4 u_xlat1;
mediump float u_xlat16_1;
lowp float u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
bool u_xlatb4;
vec2 u_xlat9;
lowp float u_xlat10_9;
float u_xlat12;
mediump float u_xlat16_12;
lowp float u_xlat10_12;
float u_xlat13;
void main()
{
    u_xlat0.xy = vs_TEXCOORD4.xy * _Normal01_ST.xy + _Normal01_ST.zw;
    u_xlat0.x = u_xlat0.x * vs_TEXCOORD4.z;
    u_xlat1.x = _Time.y * _Normal01_U_Speed + u_xlat0.x;
    u_xlat0.x = _Time.y * _Normal01_VSpeed;
    u_xlat1.y = u_xlat0.y * vs_TEXCOORD4.w + u_xlat0.x;
    u_xlat10_0.xyz = texture(_Normal01, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xy = vs_TEXCOORD4.xy * _Normal02_ST.xy + _Normal02_ST.zw;
    u_xlat0.xy = vec2(u_xlat0.x * vs_TEXCOORD4.z, u_xlat0.y * vs_TEXCOORD4.w);
    u_xlat1.x = _Time.y * _Normal02_U_Speed + u_xlat0.x;
    u_xlat1.y = _Time.y * _Normal02_V_Speed + u_xlat0.y;
    u_xlat10_0.xyz = texture(_Normal02, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_2.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = u_xlat16_2.xyz * _DistortionIntensity.xyz;
    u_xlat1.x = vs_TEXCOORD6.x;
    u_xlat1.y = vs_TEXCOORD8.x;
    u_xlat1.z = vs_TEXCOORD7.x;
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat3.x = vs_TEXCOORD6.y;
    u_xlat3.y = vs_TEXCOORD8.y;
    u_xlat3.z = vs_TEXCOORD7.y;
    u_xlat1.y = dot(u_xlat3.xyz, u_xlat0.xyz);
    u_xlat3.x = vs_TEXCOORD6.z;
    u_xlat3.y = vs_TEXCOORD8.z;
    u_xlat3.z = vs_TEXCOORD7.z;
    u_xlat1.z = dot(u_xlat3.xyz, u_xlat0.xyz);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
    u_xlat12 = dot((-u_xlat1.xyz), u_xlat0.xyz);
    u_xlat12 = u_xlat12 + u_xlat12;
    u_xlat0.xyz = u_xlat0.xyz * (-vec3(u_xlat12)) + (-u_xlat1.xyz);
    u_xlat10_0.x = texture(_Reflection, u_xlat0.xyz).x;
    u_xlat4.xyz = (-_ReflectionColor_Dark.xyz) + _ReflectionColor_Light.xyz;
    u_xlat0.xyz = u_xlat10_0.xxx * u_xlat4.xyz + _ReflectionColor_Dark.xyz;
    u_xlat12 = vs_TEXCOORD4.y * _ColorGradientRange + _ColorGradientOffset;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat1.xyz = (-_BottomColor.xyz) + _TopColor.xyz;
    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz + _BottomColor.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.200000003, 0.200000003, 0.200000003);
    u_xlat0.xyz = u_xlat0.xyz * vec3(_ReflectionBrightness) + (-u_xlat1.xyz);
    u_xlat0.xyz = vec3(vec3(_ReflectionIntensity, _ReflectionIntensity, _ReflectionIntensity)) * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat1.xy = vs_TEXCOORD4.xy * _WaterfallTex01_ST.xy + _WaterfallTex01_ST.zw;
    u_xlat1.xy = vec2(u_xlat1.x * vs_TEXCOORD4.z, u_xlat1.y * vs_TEXCOORD4.w);
    u_xlat1.zw = _Time.yy * vec2(_WaterFall01_Speed, _Waterfall02_Speed) + u_xlat1.yy;
    u_xlat10_12 = texture(_WaterfallTex01, u_xlat1.xz).x;
    u_xlat10_9 = texture(_WaterfallTex01, u_xlat1.xw).y;
    u_xlat16_2.x = (-u_xlat10_12) + u_xlat10_9;
    u_xlat16_2.x = u_xlat10_9 * u_xlat16_2.x + u_xlat10_12;
    u_xlat12 = u_xlat10_12 * _Waterfall01Brightness;
    u_xlat3.xyz = u_xlat16_2.xxx * _WaterfallPatternColor.xyz + (-u_xlat0.xyz);
    u_xlat13 = u_xlat10_9 * _Waterfall02Brightness + (-u_xlat12);
    u_xlat9.x = u_xlat10_9 * _Waterfall02Brightness;
    u_xlat12 = u_xlat9.x * u_xlat13 + u_xlat12;
    u_xlat9.x = vs_TEXCOORD4.y * _SprayRange + _SprayOffset;
    u_xlat9.x = (-u_xlat9.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat9.x = min(max(u_xlat9.x, 0.0), 1.0);
#else
    u_xlat9.x = clamp(u_xlat9.x, 0.0, 1.0);
#endif
    u_xlat12 = u_xlat12 * u_xlat9.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * _DayColor.xyz;
    u_xlat9.xy = vs_TEXCOORD4.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat3.x = _Time.y * _Detail01_U_Speed + u_xlat9.x;
    u_xlat3.y = _Time.y * _Detail01_V_Speed + u_xlat9.y;
    u_xlat10_12 = texture(_NoiseTex, u_xlat3.xy).x;
    u_xlat16_2.x = vs_TEXCOORD4.w * 0.5;
    u_xlat9.xy = vs_TEXCOORD4.xy * _WaterfallSpecTex_ST.xy + _WaterfallSpecTex_ST.zw;
    u_xlat16_2.x = vs_TEXCOORD4.w * u_xlat9.y + (-u_xlat16_2.x);
    u_xlat3.x = u_xlat10_12 * _NoiselDistortionValue + u_xlat9.x;
    u_xlat3.y = u_xlat10_12 * _NoiselDistortionValue + u_xlat16_2.x;
    u_xlat10_12 = texture(_WaterfallSpecTex, u_xlat3.xy).x;
    u_xlat16_3.xyz = vec3(u_xlat10_12) * _WaterfallSpecColor.xyz;
    u_xlat9.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat10_12 = texture(_ShadowMapTexture, u_xlat9.xy).x;
    u_xlat9.x = (-_ShadowStrength) + 1.0;
    u_xlat12 = u_xlat10_12 * u_xlat9.x + _ShadowStrength;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat12) + u_xlat16_3.xyz;
    u_xlat9.xy = vec2(_Time.y * _FoamUVCoord01.z, _Time.y * _FoamUVCoord01.w);
    u_xlat9.xy = u_xlat1.xy * _FoamUVCoord01.xy + u_xlat9.xy;
    u_xlat10_12 = texture(_WaterfallTex01, u_xlat9.xy).x;
    u_xlat9.xy = vec2(_Time.y * _FoamUVCoord02.z, _Time.y * _FoamUVCoord02.w);
    u_xlat1.xy = u_xlat1.xy * _FoamUVCoord02.xy + u_xlat9.xy;
    u_xlat10_1 = texture(_WaterfallTex01, u_xlat1.xy).y;
    u_xlat16_12 = u_xlat10_12 + u_xlat10_1;
    u_xlat1.x = vs_TEXCOORD4.y * _FoamRange + _FoamOffset;
    u_xlat12 = u_xlat16_12 + u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat1.x = (-u_xlat1.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat12 * u_xlat1.x;
    u_xlat0.xyz = u_xlat1.xxx * _FoamColor.xyz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * _ES_MainLightColor.xyz;
    u_xlat16_1 = max(_LightColor0.w, 1.0);
    u_xlat1.xyz = u_xlat0.xyz * vec3(u_xlat16_1);
    u_xlat0.x = vs_TEXCOORD4.y * _AlphaBottomRange + _AlphaBottomOffset;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(_BottomAlphaToggle==1.0);
#else
    u_xlatb4 = _BottomAlphaToggle==1.0;
#endif
    u_xlat0.x = (u_xlatb4) ? u_xlat0.x : 1.0;
    u_xlat4.x = vs_TEXCOORD4.y * _AlphaRange + _AlphaOffset;
    u_xlat4.x = (-u_xlat4.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat4.x = u_xlat4.x * _Opacity;
    u_xlat0.x = u_xlat0.x * u_xlat4.x;
    u_xlat1.w = u_xlat12 * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
uniform 	vec4 hlslcc_mtx4x4_mhyJitteredVP[4];
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec4 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
float u_xlat14;
float u_xlat21;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD5.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat0.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position = u_xlat0;
    vs_TEXCOORD2.zw = u_xlat0.zw;
    vs_COLOR0 = in_COLOR0;
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat14 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat14 = inversesqrt(u_xlat14);
    u_xlat2.xyz = vec3(u_xlat14) * u_xlat2.xyz;
    u_xlat16_3.x = u_xlat2.y * u_xlat2.y;
    u_xlat16_3.x = u_xlat2.x * u_xlat2.x + (-u_xlat16_3.x);
    u_xlat16_4 = u_xlat2.yzzx * u_xlat2.xyzz;
    u_xlat16_5.x = dot(unity_SHBr, u_xlat16_4);
    u_xlat16_5.y = dot(unity_SHBg, u_xlat16_4);
    u_xlat16_5.z = dot(unity_SHBb, u_xlat16_4);
    u_xlat16_3.xyz = unity_SHC.xyz * u_xlat16_3.xxx + u_xlat16_5.xyz;
    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat2.w = 1.0;
    u_xlat16_4.x = dot(unity_SHAr, u_xlat2);
    u_xlat16_4.y = dot(unity_SHAg, u_xlat2);
    u_xlat16_4.z = dot(unity_SHAb, u_xlat2);
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
    vs_TEXCOORD1.xyz = u_xlat16_3.xyz;
    vs_TEXCOORD1.w = 1.0;
    u_xlat6.x = float(0.5);
    u_xlat6.z = float(0.5);
    u_xlat6.y = _ProjectionParams.x;
    u_xlat0.xyz = u_xlat0.xyw * u_xlat6.xyz;
    u_xlat0.w = u_xlat0.y * 0.5;
    vs_TEXCOORD2.xy = u_xlat0.zz + u_xlat0.xw;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_mhyJitteredVP[1];
    u_xlat0 = hlslcc_mtx4x4_mhyJitteredVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_mhyJitteredVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_mhyJitteredVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat1.xyz = vec3(u_xlat6.z * u_xlat0.x, u_xlat6.y * u_xlat0.y, u_xlat6.z * u_xlat0.w);
    vs_TEXCOORD3.zw = u_xlat0.zw;
    u_xlat1.w = u_xlat1.y * 0.5;
    vs_TEXCOORD3.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat0.x = dot(hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, hlslcc_mtx4x4unity_ObjectToWorld[0].xyz);
    vs_TEXCOORD4.z = sqrt(u_xlat0.x);
    u_xlat0.x = dot(hlslcc_mtx4x4unity_ObjectToWorld[1].xyz, hlslcc_mtx4x4unity_ObjectToWorld[1].xyz);
    vs_TEXCOORD4.w = sqrt(u_xlat0.x);
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD5.w = 0.0;
    u_xlat0.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat0.xyz;
    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    vs_TEXCOORD6.xyz = u_xlat0.xyz;
    vs_TEXCOORD6.w = 0.0;
    vs_TEXCOORD7.xyz = u_xlat2.xyz;
    vs_TEXCOORD7.w = 0.0;
    u_xlat1.xyz = u_xlat0.yzx * u_xlat2.zxy;
    u_xlat0.xyz = u_xlat2.yzx * u_xlat0.zxy + (-u_xlat1.xyz);
    u_xlat21 = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD8.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    vs_TEXCOORD8.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 _LightColor0;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	float _AlphaRange;
uniform 	float _AlphaOffset;
uniform 	float _Opacity;
uniform 	mediump float _BottomAlphaToggle;
uniform 	float _AlphaBottomRange;
uniform 	float _AlphaBottomOffset;
uniform 	vec4 _WaterfallTex01_ST;
uniform 	mediump vec4 _FoamUVCoord01;
uniform 	mediump vec4 _FoamUVCoord02;
uniform 	float _FoamRange;
uniform 	float _FoamOffset;
uniform 	vec4 _DayColor;
uniform 	vec4 _BottomColor;
uniform 	vec4 _TopColor;
uniform 	float _ColorGradientRange;
uniform 	float _ColorGradientOffset;
uniform 	vec4 _ReflectionColor_Dark;
uniform 	vec4 _ReflectionColor_Light;
uniform 	float _Normal01_U_Speed;
uniform 	vec4 _Normal01_ST;
uniform 	float _Normal01_VSpeed;
uniform 	float _Normal02_U_Speed;
uniform 	vec4 _Normal02_ST;
uniform 	float _Normal02_V_Speed;
uniform 	vec4 _DistortionIntensity;
uniform 	float _ReflectionBrightness;
uniform 	float _ReflectionIntensity;
uniform 	float _WaterFall01_Speed;
uniform 	float _Waterfall02_Speed;
uniform 	mediump vec4 _WaterfallPatternColor;
uniform 	float _Waterfall01Brightness;
uniform 	float _Waterfall02Brightness;
uniform 	float _SprayRange;
uniform 	float _SprayOffset;
uniform 	float _ShadowStrength;
uniform 	vec4 _WaterfallSpecTex_ST;
uniform 	float _Detail01_U_Speed;
uniform 	vec4 _NoiseTex_ST;
uniform 	float _Detail01_V_Speed;
uniform 	float _NoiselDistortionValue;
uniform 	mediump vec4 _WaterfallSpecColor;
uniform 	mediump vec4 _FoamColor;
uniform 	vec3 _ES_MainLightColor;
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _WaterfallTex01;
uniform lowp sampler2D _Normal01;
uniform lowp sampler2D _Normal02;
uniform lowp samplerCube _Reflection;
uniform lowp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _WaterfallSpecTex;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
in highp vec4 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
lowp vec3 u_xlat10_0;
vec4 u_xlat1;
mediump float u_xlat16_1;
lowp float u_xlat10_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
float u_xlat8;
bool u_xlatb8;
vec2 u_xlat9;
lowp float u_xlat10_9;
float u_xlat12;
mediump float u_xlat16_12;
lowp float u_xlat10_12;
float u_xlat13;
lowp float u_xlat10_15;
void main()
{
    u_xlat0.xy = vs_TEXCOORD4.xy * _Normal01_ST.xy + _Normal01_ST.zw;
    u_xlat0.x = u_xlat0.x * vs_TEXCOORD4.z;
    u_xlat1.x = _Time.y * _Normal01_U_Speed + u_xlat0.x;
    u_xlat0.x = _Time.y * _Normal01_VSpeed;
    u_xlat1.y = u_xlat0.y * vs_TEXCOORD4.w + u_xlat0.x;
    u_xlat10_0.xyz = texture(_Normal01, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xy = vs_TEXCOORD4.xy * _Normal02_ST.xy + _Normal02_ST.zw;
    u_xlat0.xy = vec2(u_xlat0.x * vs_TEXCOORD4.z, u_xlat0.y * vs_TEXCOORD4.w);
    u_xlat1.x = _Time.y * _Normal02_U_Speed + u_xlat0.x;
    u_xlat1.y = _Time.y * _Normal02_V_Speed + u_xlat0.y;
    u_xlat10_0.xyz = texture(_Normal02, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_2.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = u_xlat16_2.xyz * _DistortionIntensity.xyz;
    u_xlat1.x = vs_TEXCOORD6.x;
    u_xlat1.y = vs_TEXCOORD8.x;
    u_xlat1.z = vs_TEXCOORD7.x;
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat3.x = vs_TEXCOORD6.y;
    u_xlat3.y = vs_TEXCOORD8.y;
    u_xlat3.z = vs_TEXCOORD7.y;
    u_xlat1.y = dot(u_xlat3.xyz, u_xlat0.xyz);
    u_xlat3.x = vs_TEXCOORD6.z;
    u_xlat3.y = vs_TEXCOORD8.z;
    u_xlat3.z = vs_TEXCOORD7.z;
    u_xlat1.z = dot(u_xlat3.xyz, u_xlat0.xyz);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
    u_xlat12 = dot((-u_xlat1.xyz), u_xlat0.xyz);
    u_xlat12 = u_xlat12 + u_xlat12;
    u_xlat0.xyz = u_xlat0.xyz * (-vec3(u_xlat12)) + (-u_xlat1.xyz);
    u_xlat10_0.x = texture(_Reflection, u_xlat0.xyz).x;
    u_xlat4.xyz = (-_ReflectionColor_Dark.xyz) + _ReflectionColor_Light.xyz;
    u_xlat0.xyz = u_xlat10_0.xxx * u_xlat4.xyz + _ReflectionColor_Dark.xyz;
    u_xlat12 = vs_TEXCOORD4.y * _ColorGradientRange + _ColorGradientOffset;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat1.xyz = (-_BottomColor.xyz) + _TopColor.xyz;
    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz + _BottomColor.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.200000003, 0.200000003, 0.200000003);
    u_xlat0.xyz = u_xlat0.xyz * vec3(_ReflectionBrightness) + (-u_xlat1.xyz);
    u_xlat0.xyz = vec3(vec3(_ReflectionIntensity, _ReflectionIntensity, _ReflectionIntensity)) * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat1.xy = vs_TEXCOORD4.xy * _WaterfallTex01_ST.xy + _WaterfallTex01_ST.zw;
    u_xlat1.xy = vec2(u_xlat1.x * vs_TEXCOORD4.z, u_xlat1.y * vs_TEXCOORD4.w);
    u_xlat1.zw = _Time.yy * vec2(_WaterFall01_Speed, _Waterfall02_Speed) + u_xlat1.yy;
    u_xlat10_12 = texture(_WaterfallTex01, u_xlat1.xz).x;
    u_xlat10_9 = texture(_WaterfallTex01, u_xlat1.xw).y;
    u_xlat16_2.x = (-u_xlat10_12) + u_xlat10_9;
    u_xlat16_2.x = u_xlat10_9 * u_xlat16_2.x + u_xlat10_12;
    u_xlat12 = u_xlat10_12 * _Waterfall01Brightness;
    u_xlat3.xyz = u_xlat16_2.xxx * _WaterfallPatternColor.xyz + (-u_xlat0.xyz);
    u_xlat13 = u_xlat10_9 * _Waterfall02Brightness + (-u_xlat12);
    u_xlat9.x = u_xlat10_9 * _Waterfall02Brightness;
    u_xlat12 = u_xlat9.x * u_xlat13 + u_xlat12;
    u_xlat9.x = vs_TEXCOORD4.y * _SprayRange + _SprayOffset;
    u_xlat9.x = (-u_xlat9.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat9.x = min(max(u_xlat9.x, 0.0), 1.0);
#else
    u_xlat9.x = clamp(u_xlat9.x, 0.0, 1.0);
#endif
    u_xlat12 = u_xlat12 * u_xlat9.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * _DayColor.xyz;
    u_xlat9.xy = vs_TEXCOORD4.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat3.x = _Time.y * _Detail01_U_Speed + u_xlat9.x;
    u_xlat3.y = _Time.y * _Detail01_V_Speed + u_xlat9.y;
    u_xlat10_12 = texture(_NoiseTex, u_xlat3.xy).x;
    u_xlat16_2.x = vs_TEXCOORD4.w * 0.5;
    u_xlat9.xy = vs_TEXCOORD4.xy * _WaterfallSpecTex_ST.xy + _WaterfallSpecTex_ST.zw;
    u_xlat16_2.x = vs_TEXCOORD4.w * u_xlat9.y + (-u_xlat16_2.x);
    u_xlat3.x = u_xlat10_12 * _NoiselDistortionValue + u_xlat9.x;
    u_xlat3.y = u_xlat10_12 * _NoiselDistortionValue + u_xlat16_2.x;
    u_xlat10_12 = texture(_WaterfallSpecTex, u_xlat3.xy).x;
    u_xlat16_3.xyz = vec3(u_xlat10_12) * _WaterfallSpecColor.xyz;
    u_xlat12 = (-_ShadowStrength) + 1.0;
    u_xlat9.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat10_15 = texture(_ShadowMapTexture, u_xlat9.xy).x;
    u_xlat9.x = texture(_CameraDepthTextureScaled, u_xlat9.xy).x;
    u_xlat9.x = u_xlat9.x * _ProjectionParams.z + (-vs_TEXCOORD3.w);
    u_xlat12 = u_xlat10_15 * u_xlat12 + _ShadowStrength;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat12) + u_xlat16_3.xyz;
    u_xlat3.xy = vec2(_Time.y * _FoamUVCoord01.z, _Time.y * _FoamUVCoord01.w);
    u_xlat3.xy = u_xlat1.xy * _FoamUVCoord01.xy + u_xlat3.xy;
    u_xlat10_12 = texture(_WaterfallTex01, u_xlat3.xy).x;
    u_xlat3.xy = vec2(_Time.y * _FoamUVCoord02.z, _Time.y * _FoamUVCoord02.w);
    u_xlat1.xy = u_xlat1.xy * _FoamUVCoord02.xy + u_xlat3.xy;
    u_xlat10_1 = texture(_WaterfallTex01, u_xlat1.xy).y;
    u_xlat16_12 = u_xlat10_12 + u_xlat10_1;
    u_xlat1.x = vs_TEXCOORD4.y * _FoamRange + _FoamOffset;
    u_xlat12 = u_xlat16_12 + u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat1.x = (-u_xlat1.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat12 * u_xlat1.x;
    u_xlat0.xyz = u_xlat1.xxx * _FoamColor.xyz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * _ES_MainLightColor.xyz;
    u_xlat16_1 = max(_LightColor0.w, 1.0);
    u_xlat2.xyz = u_xlat0.xyz * vec3(u_xlat16_1);
    u_xlat0.x = u_xlat9.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat4.x = u_xlat9.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat8 = (-u_xlat4.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat8 + u_xlat4.x;
    u_xlat4.x = vs_TEXCOORD4.y * _AlphaRange + _AlphaOffset;
    u_xlat4.x = (-u_xlat4.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat4.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _Opacity;
    u_xlat4.x = vs_TEXCOORD4.y * _AlphaBottomRange + _AlphaBottomOffset;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(_BottomAlphaToggle==1.0);
#else
    u_xlatb8 = _BottomAlphaToggle==1.0;
#endif
    u_xlat4.x = (u_xlatb8) ? u_xlat4.x : 1.0;
    u_xlat0.x = u_xlat4.x * u_xlat0.x;
    u_xlat2.w = u_xlat12 * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.w = min(max(u_xlat2.w, 0.0), 1.0);
#else
    u_xlat2.w = clamp(u_xlat2.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat2;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
uniform 	vec4 hlslcc_mtx4x4_mhyJitteredVP[4];
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
vec3 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump vec3 u_xlat16_4;
mediump vec4 u_xlat16_5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
vec3 u_xlat8;
float u_xlat24;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    vs_TEXCOORD5.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    u_xlat1.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position = u_xlat1;
    vs_TEXCOORD2.zw = u_xlat1.zw;
    vs_COLOR0 = in_COLOR0;
    u_xlat3.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat3.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat3.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat8.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat3.xyz = u_xlat8.xxx * u_xlat3.xyz;
    u_xlat16_4.x = u_xlat3.y * u_xlat3.y;
    u_xlat16_4.x = u_xlat3.x * u_xlat3.x + (-u_xlat16_4.x);
    u_xlat16_5 = u_xlat3.yzzx * u_xlat3.xyzz;
    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_5);
    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_5);
    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_5);
    u_xlat16_4.xyz = unity_SHC.xyz * u_xlat16_4.xxx + u_xlat16_6.xyz;
    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat3.w = 1.0;
    u_xlat16_5.x = dot(unity_SHAr, u_xlat3);
    u_xlat16_5.y = dot(unity_SHAg, u_xlat3);
    u_xlat16_5.z = dot(unity_SHAb, u_xlat3);
    u_xlat16_4.xyz = u_xlat16_4.xyz + u_xlat16_5.xyz;
    vs_TEXCOORD1.xyz = u_xlat16_4.xyz;
    vs_TEXCOORD1.w = 1.0;
    u_xlat7.x = float(0.5);
    u_xlat7.z = float(0.5);
    u_xlat7.y = _ProjectionParams.x;
    u_xlat1.xyz = u_xlat1.xyw * u_xlat7.xyz;
    u_xlat1.w = u_xlat1.y * 0.5;
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4_mhyJitteredVP[1];
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[3] * u_xlat2.wwww + u_xlat1;
    u_xlat2.xyz = vec3(u_xlat7.z * u_xlat1.x, u_xlat7.y * u_xlat1.y, u_xlat7.z * u_xlat1.w);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    u_xlat2.w = u_xlat2.y * 0.5;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy;
    u_xlat8.x = dot(unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz);
    vs_TEXCOORD4.z = sqrt(u_xlat8.x);
    u_xlat8.x = dot(unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz);
    vs_TEXCOORD4.w = sqrt(u_xlat8.x);
    vs_TEXCOORD5.w = 0.0;
    u_xlat8.xyz = in_TANGENT0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat8.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_TANGENT0.xxx + u_xlat8.xyz;
    u_xlat0.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_TANGENT0.zzz + u_xlat8.xyz;
    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat0.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    vs_TEXCOORD6.xyz = u_xlat0.xyz;
    vs_TEXCOORD6.w = 0.0;
    vs_TEXCOORD7.xyz = u_xlat3.xyz;
    vs_TEXCOORD7.w = 0.0;
    u_xlat1.xyz = u_xlat0.yzx * u_xlat3.zxy;
    u_xlat0.xyz = u_xlat3.yzx * u_xlat0.zxy + (-u_xlat1.xyz);
    u_xlat24 = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD8.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    vs_TEXCOORD8.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 _LightColor0;
uniform 	float _AlphaRange;
uniform 	float _AlphaOffset;
uniform 	float _Opacity;
uniform 	mediump float _BottomAlphaToggle;
uniform 	float _AlphaBottomRange;
uniform 	float _AlphaBottomOffset;
uniform 	vec4 _WaterfallTex01_ST;
uniform 	mediump vec4 _FoamUVCoord01;
uniform 	mediump vec4 _FoamUVCoord02;
uniform 	float _FoamRange;
uniform 	float _FoamOffset;
uniform 	vec4 _DayColor;
uniform 	vec4 _BottomColor;
uniform 	vec4 _TopColor;
uniform 	float _ColorGradientRange;
uniform 	float _ColorGradientOffset;
uniform 	vec4 _ReflectionColor_Dark;
uniform 	vec4 _ReflectionColor_Light;
uniform 	float _Normal01_U_Speed;
uniform 	vec4 _Normal01_ST;
uniform 	float _Normal01_VSpeed;
uniform 	float _Normal02_U_Speed;
uniform 	vec4 _Normal02_ST;
uniform 	float _Normal02_V_Speed;
uniform 	vec4 _DistortionIntensity;
uniform 	float _ReflectionBrightness;
uniform 	float _ReflectionIntensity;
uniform 	float _WaterFall01_Speed;
uniform 	float _Waterfall02_Speed;
uniform 	mediump vec4 _WaterfallPatternColor;
uniform 	float _Waterfall01Brightness;
uniform 	float _Waterfall02Brightness;
uniform 	float _SprayRange;
uniform 	float _SprayOffset;
uniform 	float _ShadowStrength;
uniform 	vec4 _WaterfallSpecTex_ST;
uniform 	float _Detail01_U_Speed;
uniform 	vec4 _NoiseTex_ST;
uniform 	float _Detail01_V_Speed;
uniform 	float _NoiselDistortionValue;
uniform 	mediump vec4 _WaterfallSpecColor;
uniform 	mediump vec4 _FoamColor;
uniform 	vec3 _ES_MainLightColor;
uniform lowp sampler2D _WaterfallTex01;
uniform lowp sampler2D _Normal01;
uniform lowp sampler2D _Normal02;
uniform lowp samplerCube _Reflection;
uniform lowp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _WaterfallSpecTex;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
in highp vec4 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
lowp vec3 u_xlat10_0;
vec4 u_xlat1;
mediump float u_xlat16_1;
lowp float u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
bool u_xlatb4;
vec2 u_xlat9;
lowp float u_xlat10_9;
float u_xlat12;
mediump float u_xlat16_12;
lowp float u_xlat10_12;
float u_xlat13;
void main()
{
    u_xlat0.xy = vs_TEXCOORD4.xy * _Normal01_ST.xy + _Normal01_ST.zw;
    u_xlat0.x = u_xlat0.x * vs_TEXCOORD4.z;
    u_xlat1.x = _Time.y * _Normal01_U_Speed + u_xlat0.x;
    u_xlat0.x = _Time.y * _Normal01_VSpeed;
    u_xlat1.y = u_xlat0.y * vs_TEXCOORD4.w + u_xlat0.x;
    u_xlat10_0.xyz = texture(_Normal01, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xy = vs_TEXCOORD4.xy * _Normal02_ST.xy + _Normal02_ST.zw;
    u_xlat0.xy = vec2(u_xlat0.x * vs_TEXCOORD4.z, u_xlat0.y * vs_TEXCOORD4.w);
    u_xlat1.x = _Time.y * _Normal02_U_Speed + u_xlat0.x;
    u_xlat1.y = _Time.y * _Normal02_V_Speed + u_xlat0.y;
    u_xlat10_0.xyz = texture(_Normal02, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_2.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = u_xlat16_2.xyz * _DistortionIntensity.xyz;
    u_xlat1.x = vs_TEXCOORD6.x;
    u_xlat1.y = vs_TEXCOORD8.x;
    u_xlat1.z = vs_TEXCOORD7.x;
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat3.x = vs_TEXCOORD6.y;
    u_xlat3.y = vs_TEXCOORD8.y;
    u_xlat3.z = vs_TEXCOORD7.y;
    u_xlat1.y = dot(u_xlat3.xyz, u_xlat0.xyz);
    u_xlat3.x = vs_TEXCOORD6.z;
    u_xlat3.y = vs_TEXCOORD8.z;
    u_xlat3.z = vs_TEXCOORD7.z;
    u_xlat1.z = dot(u_xlat3.xyz, u_xlat0.xyz);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
    u_xlat12 = dot((-u_xlat1.xyz), u_xlat0.xyz);
    u_xlat12 = u_xlat12 + u_xlat12;
    u_xlat0.xyz = u_xlat0.xyz * (-vec3(u_xlat12)) + (-u_xlat1.xyz);
    u_xlat10_0.x = texture(_Reflection, u_xlat0.xyz).x;
    u_xlat4.xyz = (-_ReflectionColor_Dark.xyz) + _ReflectionColor_Light.xyz;
    u_xlat0.xyz = u_xlat10_0.xxx * u_xlat4.xyz + _ReflectionColor_Dark.xyz;
    u_xlat12 = vs_TEXCOORD4.y * _ColorGradientRange + _ColorGradientOffset;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat1.xyz = (-_BottomColor.xyz) + _TopColor.xyz;
    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz + _BottomColor.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.200000003, 0.200000003, 0.200000003);
    u_xlat0.xyz = u_xlat0.xyz * vec3(_ReflectionBrightness) + (-u_xlat1.xyz);
    u_xlat0.xyz = vec3(vec3(_ReflectionIntensity, _ReflectionIntensity, _ReflectionIntensity)) * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat1.xy = vs_TEXCOORD4.xy * _WaterfallTex01_ST.xy + _WaterfallTex01_ST.zw;
    u_xlat1.xy = vec2(u_xlat1.x * vs_TEXCOORD4.z, u_xlat1.y * vs_TEXCOORD4.w);
    u_xlat1.zw = _Time.yy * vec2(_WaterFall01_Speed, _Waterfall02_Speed) + u_xlat1.yy;
    u_xlat10_12 = texture(_WaterfallTex01, u_xlat1.xz).x;
    u_xlat10_9 = texture(_WaterfallTex01, u_xlat1.xw).y;
    u_xlat16_2.x = (-u_xlat10_12) + u_xlat10_9;
    u_xlat16_2.x = u_xlat10_9 * u_xlat16_2.x + u_xlat10_12;
    u_xlat12 = u_xlat10_12 * _Waterfall01Brightness;
    u_xlat3.xyz = u_xlat16_2.xxx * _WaterfallPatternColor.xyz + (-u_xlat0.xyz);
    u_xlat13 = u_xlat10_9 * _Waterfall02Brightness + (-u_xlat12);
    u_xlat9.x = u_xlat10_9 * _Waterfall02Brightness;
    u_xlat12 = u_xlat9.x * u_xlat13 + u_xlat12;
    u_xlat9.x = vs_TEXCOORD4.y * _SprayRange + _SprayOffset;
    u_xlat9.x = (-u_xlat9.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat9.x = min(max(u_xlat9.x, 0.0), 1.0);
#else
    u_xlat9.x = clamp(u_xlat9.x, 0.0, 1.0);
#endif
    u_xlat12 = u_xlat12 * u_xlat9.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * _DayColor.xyz;
    u_xlat9.xy = vs_TEXCOORD4.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat3.x = _Time.y * _Detail01_U_Speed + u_xlat9.x;
    u_xlat3.y = _Time.y * _Detail01_V_Speed + u_xlat9.y;
    u_xlat10_12 = texture(_NoiseTex, u_xlat3.xy).x;
    u_xlat16_2.x = vs_TEXCOORD4.w * 0.5;
    u_xlat9.xy = vs_TEXCOORD4.xy * _WaterfallSpecTex_ST.xy + _WaterfallSpecTex_ST.zw;
    u_xlat16_2.x = vs_TEXCOORD4.w * u_xlat9.y + (-u_xlat16_2.x);
    u_xlat3.x = u_xlat10_12 * _NoiselDistortionValue + u_xlat9.x;
    u_xlat3.y = u_xlat10_12 * _NoiselDistortionValue + u_xlat16_2.x;
    u_xlat10_12 = texture(_WaterfallSpecTex, u_xlat3.xy).x;
    u_xlat16_3.xyz = vec3(u_xlat10_12) * _WaterfallSpecColor.xyz;
    u_xlat9.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat10_12 = texture(_ShadowMapTexture, u_xlat9.xy).x;
    u_xlat9.x = (-_ShadowStrength) + 1.0;
    u_xlat12 = u_xlat10_12 * u_xlat9.x + _ShadowStrength;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat12) + u_xlat16_3.xyz;
    u_xlat9.xy = vec2(_Time.y * _FoamUVCoord01.z, _Time.y * _FoamUVCoord01.w);
    u_xlat9.xy = u_xlat1.xy * _FoamUVCoord01.xy + u_xlat9.xy;
    u_xlat10_12 = texture(_WaterfallTex01, u_xlat9.xy).x;
    u_xlat9.xy = vec2(_Time.y * _FoamUVCoord02.z, _Time.y * _FoamUVCoord02.w);
    u_xlat1.xy = u_xlat1.xy * _FoamUVCoord02.xy + u_xlat9.xy;
    u_xlat10_1 = texture(_WaterfallTex01, u_xlat1.xy).y;
    u_xlat16_12 = u_xlat10_12 + u_xlat10_1;
    u_xlat1.x = vs_TEXCOORD4.y * _FoamRange + _FoamOffset;
    u_xlat12 = u_xlat16_12 + u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat1.x = (-u_xlat1.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat12 * u_xlat1.x;
    u_xlat0.xyz = u_xlat1.xxx * _FoamColor.xyz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * _ES_MainLightColor.xyz;
    u_xlat16_1 = max(_LightColor0.w, 1.0);
    u_xlat1.xyz = u_xlat0.xyz * vec3(u_xlat16_1);
    u_xlat0.x = vs_TEXCOORD4.y * _AlphaBottomRange + _AlphaBottomOffset;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(_BottomAlphaToggle==1.0);
#else
    u_xlatb4 = _BottomAlphaToggle==1.0;
#endif
    u_xlat0.x = (u_xlatb4) ? u_xlat0.x : 1.0;
    u_xlat4.x = vs_TEXCOORD4.y * _AlphaRange + _AlphaOffset;
    u_xlat4.x = (-u_xlat4.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat4.x = u_xlat4.x * _Opacity;
    u_xlat0.x = u_xlat0.x * u_xlat4.x;
    u_xlat1.w = u_xlat12 * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
uniform 	vec4 hlslcc_mtx4x4_mhyJitteredVP[4];
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
vec3 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump vec3 u_xlat16_4;
mediump vec4 u_xlat16_5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
vec3 u_xlat8;
float u_xlat24;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    vs_TEXCOORD5.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    u_xlat1.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position = u_xlat1;
    vs_TEXCOORD2.zw = u_xlat1.zw;
    vs_COLOR0 = in_COLOR0;
    u_xlat3.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat3.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat3.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat8.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat3.xyz = u_xlat8.xxx * u_xlat3.xyz;
    u_xlat16_4.x = u_xlat3.y * u_xlat3.y;
    u_xlat16_4.x = u_xlat3.x * u_xlat3.x + (-u_xlat16_4.x);
    u_xlat16_5 = u_xlat3.yzzx * u_xlat3.xyzz;
    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_5);
    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_5);
    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_5);
    u_xlat16_4.xyz = unity_SHC.xyz * u_xlat16_4.xxx + u_xlat16_6.xyz;
    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat3.w = 1.0;
    u_xlat16_5.x = dot(unity_SHAr, u_xlat3);
    u_xlat16_5.y = dot(unity_SHAg, u_xlat3);
    u_xlat16_5.z = dot(unity_SHAb, u_xlat3);
    u_xlat16_4.xyz = u_xlat16_4.xyz + u_xlat16_5.xyz;
    vs_TEXCOORD1.xyz = u_xlat16_4.xyz;
    vs_TEXCOORD1.w = 1.0;
    u_xlat7.x = float(0.5);
    u_xlat7.z = float(0.5);
    u_xlat7.y = _ProjectionParams.x;
    u_xlat1.xyz = u_xlat1.xyw * u_xlat7.xyz;
    u_xlat1.w = u_xlat1.y * 0.5;
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4_mhyJitteredVP[1];
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[3] * u_xlat2.wwww + u_xlat1;
    u_xlat2.xyz = vec3(u_xlat7.z * u_xlat1.x, u_xlat7.y * u_xlat1.y, u_xlat7.z * u_xlat1.w);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    u_xlat2.w = u_xlat2.y * 0.5;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy;
    u_xlat8.x = dot(unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz);
    vs_TEXCOORD4.z = sqrt(u_xlat8.x);
    u_xlat8.x = dot(unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz);
    vs_TEXCOORD4.w = sqrt(u_xlat8.x);
    vs_TEXCOORD5.w = 0.0;
    u_xlat8.xyz = in_TANGENT0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat8.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_TANGENT0.xxx + u_xlat8.xyz;
    u_xlat0.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_TANGENT0.zzz + u_xlat8.xyz;
    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat0.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    vs_TEXCOORD6.xyz = u_xlat0.xyz;
    vs_TEXCOORD6.w = 0.0;
    vs_TEXCOORD7.xyz = u_xlat3.xyz;
    vs_TEXCOORD7.w = 0.0;
    u_xlat1.xyz = u_xlat0.yzx * u_xlat3.zxy;
    u_xlat0.xyz = u_xlat3.yzx * u_xlat0.zxy + (-u_xlat1.xyz);
    u_xlat24 = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD8.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    vs_TEXCOORD8.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 _LightColor0;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	float _AlphaRange;
uniform 	float _AlphaOffset;
uniform 	float _Opacity;
uniform 	mediump float _BottomAlphaToggle;
uniform 	float _AlphaBottomRange;
uniform 	float _AlphaBottomOffset;
uniform 	vec4 _WaterfallTex01_ST;
uniform 	mediump vec4 _FoamUVCoord01;
uniform 	mediump vec4 _FoamUVCoord02;
uniform 	float _FoamRange;
uniform 	float _FoamOffset;
uniform 	vec4 _DayColor;
uniform 	vec4 _BottomColor;
uniform 	vec4 _TopColor;
uniform 	float _ColorGradientRange;
uniform 	float _ColorGradientOffset;
uniform 	vec4 _ReflectionColor_Dark;
uniform 	vec4 _ReflectionColor_Light;
uniform 	float _Normal01_U_Speed;
uniform 	vec4 _Normal01_ST;
uniform 	float _Normal01_VSpeed;
uniform 	float _Normal02_U_Speed;
uniform 	vec4 _Normal02_ST;
uniform 	float _Normal02_V_Speed;
uniform 	vec4 _DistortionIntensity;
uniform 	float _ReflectionBrightness;
uniform 	float _ReflectionIntensity;
uniform 	float _WaterFall01_Speed;
uniform 	float _Waterfall02_Speed;
uniform 	mediump vec4 _WaterfallPatternColor;
uniform 	float _Waterfall01Brightness;
uniform 	float _Waterfall02Brightness;
uniform 	float _SprayRange;
uniform 	float _SprayOffset;
uniform 	float _ShadowStrength;
uniform 	vec4 _WaterfallSpecTex_ST;
uniform 	float _Detail01_U_Speed;
uniform 	vec4 _NoiseTex_ST;
uniform 	float _Detail01_V_Speed;
uniform 	float _NoiselDistortionValue;
uniform 	mediump vec4 _WaterfallSpecColor;
uniform 	mediump vec4 _FoamColor;
uniform 	vec3 _ES_MainLightColor;
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _WaterfallTex01;
uniform lowp sampler2D _Normal01;
uniform lowp sampler2D _Normal02;
uniform lowp samplerCube _Reflection;
uniform lowp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _WaterfallSpecTex;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
in highp vec4 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
lowp vec3 u_xlat10_0;
vec4 u_xlat1;
mediump float u_xlat16_1;
lowp float u_xlat10_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
float u_xlat8;
bool u_xlatb8;
vec2 u_xlat9;
lowp float u_xlat10_9;
float u_xlat12;
mediump float u_xlat16_12;
lowp float u_xlat10_12;
float u_xlat13;
lowp float u_xlat10_15;
void main()
{
    u_xlat0.xy = vs_TEXCOORD4.xy * _Normal01_ST.xy + _Normal01_ST.zw;
    u_xlat0.x = u_xlat0.x * vs_TEXCOORD4.z;
    u_xlat1.x = _Time.y * _Normal01_U_Speed + u_xlat0.x;
    u_xlat0.x = _Time.y * _Normal01_VSpeed;
    u_xlat1.y = u_xlat0.y * vs_TEXCOORD4.w + u_xlat0.x;
    u_xlat10_0.xyz = texture(_Normal01, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xy = vs_TEXCOORD4.xy * _Normal02_ST.xy + _Normal02_ST.zw;
    u_xlat0.xy = vec2(u_xlat0.x * vs_TEXCOORD4.z, u_xlat0.y * vs_TEXCOORD4.w);
    u_xlat1.x = _Time.y * _Normal02_U_Speed + u_xlat0.x;
    u_xlat1.y = _Time.y * _Normal02_V_Speed + u_xlat0.y;
    u_xlat10_0.xyz = texture(_Normal02, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_2.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = u_xlat16_2.xyz * _DistortionIntensity.xyz;
    u_xlat1.x = vs_TEXCOORD6.x;
    u_xlat1.y = vs_TEXCOORD8.x;
    u_xlat1.z = vs_TEXCOORD7.x;
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat3.x = vs_TEXCOORD6.y;
    u_xlat3.y = vs_TEXCOORD8.y;
    u_xlat3.z = vs_TEXCOORD7.y;
    u_xlat1.y = dot(u_xlat3.xyz, u_xlat0.xyz);
    u_xlat3.x = vs_TEXCOORD6.z;
    u_xlat3.y = vs_TEXCOORD8.z;
    u_xlat3.z = vs_TEXCOORD7.z;
    u_xlat1.z = dot(u_xlat3.xyz, u_xlat0.xyz);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
    u_xlat12 = dot((-u_xlat1.xyz), u_xlat0.xyz);
    u_xlat12 = u_xlat12 + u_xlat12;
    u_xlat0.xyz = u_xlat0.xyz * (-vec3(u_xlat12)) + (-u_xlat1.xyz);
    u_xlat10_0.x = texture(_Reflection, u_xlat0.xyz).x;
    u_xlat4.xyz = (-_ReflectionColor_Dark.xyz) + _ReflectionColor_Light.xyz;
    u_xlat0.xyz = u_xlat10_0.xxx * u_xlat4.xyz + _ReflectionColor_Dark.xyz;
    u_xlat12 = vs_TEXCOORD4.y * _ColorGradientRange + _ColorGradientOffset;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat1.xyz = (-_BottomColor.xyz) + _TopColor.xyz;
    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz + _BottomColor.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.200000003, 0.200000003, 0.200000003);
    u_xlat0.xyz = u_xlat0.xyz * vec3(_ReflectionBrightness) + (-u_xlat1.xyz);
    u_xlat0.xyz = vec3(vec3(_ReflectionIntensity, _ReflectionIntensity, _ReflectionIntensity)) * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat1.xy = vs_TEXCOORD4.xy * _WaterfallTex01_ST.xy + _WaterfallTex01_ST.zw;
    u_xlat1.xy = vec2(u_xlat1.x * vs_TEXCOORD4.z, u_xlat1.y * vs_TEXCOORD4.w);
    u_xlat1.zw = _Time.yy * vec2(_WaterFall01_Speed, _Waterfall02_Speed) + u_xlat1.yy;
    u_xlat10_12 = texture(_WaterfallTex01, u_xlat1.xz).x;
    u_xlat10_9 = texture(_WaterfallTex01, u_xlat1.xw).y;
    u_xlat16_2.x = (-u_xlat10_12) + u_xlat10_9;
    u_xlat16_2.x = u_xlat10_9 * u_xlat16_2.x + u_xlat10_12;
    u_xlat12 = u_xlat10_12 * _Waterfall01Brightness;
    u_xlat3.xyz = u_xlat16_2.xxx * _WaterfallPatternColor.xyz + (-u_xlat0.xyz);
    u_xlat13 = u_xlat10_9 * _Waterfall02Brightness + (-u_xlat12);
    u_xlat9.x = u_xlat10_9 * _Waterfall02Brightness;
    u_xlat12 = u_xlat9.x * u_xlat13 + u_xlat12;
    u_xlat9.x = vs_TEXCOORD4.y * _SprayRange + _SprayOffset;
    u_xlat9.x = (-u_xlat9.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat9.x = min(max(u_xlat9.x, 0.0), 1.0);
#else
    u_xlat9.x = clamp(u_xlat9.x, 0.0, 1.0);
#endif
    u_xlat12 = u_xlat12 * u_xlat9.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * _DayColor.xyz;
    u_xlat9.xy = vs_TEXCOORD4.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat3.x = _Time.y * _Detail01_U_Speed + u_xlat9.x;
    u_xlat3.y = _Time.y * _Detail01_V_Speed + u_xlat9.y;
    u_xlat10_12 = texture(_NoiseTex, u_xlat3.xy).x;
    u_xlat16_2.x = vs_TEXCOORD4.w * 0.5;
    u_xlat9.xy = vs_TEXCOORD4.xy * _WaterfallSpecTex_ST.xy + _WaterfallSpecTex_ST.zw;
    u_xlat16_2.x = vs_TEXCOORD4.w * u_xlat9.y + (-u_xlat16_2.x);
    u_xlat3.x = u_xlat10_12 * _NoiselDistortionValue + u_xlat9.x;
    u_xlat3.y = u_xlat10_12 * _NoiselDistortionValue + u_xlat16_2.x;
    u_xlat10_12 = texture(_WaterfallSpecTex, u_xlat3.xy).x;
    u_xlat16_3.xyz = vec3(u_xlat10_12) * _WaterfallSpecColor.xyz;
    u_xlat12 = (-_ShadowStrength) + 1.0;
    u_xlat9.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat10_15 = texture(_ShadowMapTexture, u_xlat9.xy).x;
    u_xlat9.x = texture(_CameraDepthTextureScaled, u_xlat9.xy).x;
    u_xlat9.x = u_xlat9.x * _ProjectionParams.z + (-vs_TEXCOORD3.w);
    u_xlat12 = u_xlat10_15 * u_xlat12 + _ShadowStrength;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat12) + u_xlat16_3.xyz;
    u_xlat3.xy = vec2(_Time.y * _FoamUVCoord01.z, _Time.y * _FoamUVCoord01.w);
    u_xlat3.xy = u_xlat1.xy * _FoamUVCoord01.xy + u_xlat3.xy;
    u_xlat10_12 = texture(_WaterfallTex01, u_xlat3.xy).x;
    u_xlat3.xy = vec2(_Time.y * _FoamUVCoord02.z, _Time.y * _FoamUVCoord02.w);
    u_xlat1.xy = u_xlat1.xy * _FoamUVCoord02.xy + u_xlat3.xy;
    u_xlat10_1 = texture(_WaterfallTex01, u_xlat1.xy).y;
    u_xlat16_12 = u_xlat10_12 + u_xlat10_1;
    u_xlat1.x = vs_TEXCOORD4.y * _FoamRange + _FoamOffset;
    u_xlat12 = u_xlat16_12 + u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat1.x = (-u_xlat1.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat12 * u_xlat1.x;
    u_xlat0.xyz = u_xlat1.xxx * _FoamColor.xyz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * _ES_MainLightColor.xyz;
    u_xlat16_1 = max(_LightColor0.w, 1.0);
    u_xlat2.xyz = u_xlat0.xyz * vec3(u_xlat16_1);
    u_xlat0.x = u_xlat9.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat4.x = u_xlat9.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat8 = (-u_xlat4.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat8 + u_xlat4.x;
    u_xlat4.x = vs_TEXCOORD4.y * _AlphaRange + _AlphaOffset;
    u_xlat4.x = (-u_xlat4.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat4.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _Opacity;
    u_xlat4.x = vs_TEXCOORD4.y * _AlphaBottomRange + _AlphaBottomOffset;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(_BottomAlphaToggle==1.0);
#else
    u_xlatb8 = _BottomAlphaToggle==1.0;
#endif
    u_xlat4.x = (u_xlatb8) ? u_xlat4.x : 1.0;
    u_xlat0.x = u_xlat4.x * u_xlat0.x;
    u_xlat2.w = u_xlat12 * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.w = min(max(u_xlat2.w, 0.0), 1.0);
#else
    u_xlat2.w = clamp(u_xlat2.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat2;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
uniform 	vec4 hlslcc_mtx4x4_mhyJitteredVP[4];
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec4 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
float u_xlat14;
float u_xlat21;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD5.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat0.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position = u_xlat0;
    vs_TEXCOORD2.zw = u_xlat0.zw;
    vs_COLOR0 = in_COLOR0;
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat14 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat14 = inversesqrt(u_xlat14);
    u_xlat2.xyz = vec3(u_xlat14) * u_xlat2.xyz;
    u_xlat16_3.x = u_xlat2.y * u_xlat2.y;
    u_xlat16_3.x = u_xlat2.x * u_xlat2.x + (-u_xlat16_3.x);
    u_xlat16_4 = u_xlat2.yzzx * u_xlat2.xyzz;
    u_xlat16_5.x = dot(unity_SHBr, u_xlat16_4);
    u_xlat16_5.y = dot(unity_SHBg, u_xlat16_4);
    u_xlat16_5.z = dot(unity_SHBb, u_xlat16_4);
    u_xlat16_3.xyz = unity_SHC.xyz * u_xlat16_3.xxx + u_xlat16_5.xyz;
    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat2.w = 1.0;
    u_xlat16_4.x = dot(unity_SHAr, u_xlat2);
    u_xlat16_4.y = dot(unity_SHAg, u_xlat2);
    u_xlat16_4.z = dot(unity_SHAb, u_xlat2);
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
    vs_TEXCOORD1.xyz = u_xlat16_3.xyz;
    vs_TEXCOORD1.w = 1.0;
    u_xlat6.x = float(0.5);
    u_xlat6.z = float(0.5);
    u_xlat6.y = _ProjectionParams.x;
    u_xlat0.xyz = u_xlat0.xyw * u_xlat6.xyz;
    u_xlat0.w = u_xlat0.y * 0.5;
    vs_TEXCOORD2.xy = u_xlat0.zz + u_xlat0.xw;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_mhyJitteredVP[1];
    u_xlat0 = hlslcc_mtx4x4_mhyJitteredVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_mhyJitteredVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_mhyJitteredVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat1.xyz = vec3(u_xlat6.z * u_xlat0.x, u_xlat6.y * u_xlat0.y, u_xlat6.z * u_xlat0.w);
    vs_TEXCOORD3.zw = u_xlat0.zw;
    u_xlat1.w = u_xlat1.y * 0.5;
    vs_TEXCOORD3.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat0.x = dot(hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, hlslcc_mtx4x4unity_ObjectToWorld[0].xyz);
    vs_TEXCOORD4.z = sqrt(u_xlat0.x);
    u_xlat0.x = dot(hlslcc_mtx4x4unity_ObjectToWorld[1].xyz, hlslcc_mtx4x4unity_ObjectToWorld[1].xyz);
    vs_TEXCOORD4.w = sqrt(u_xlat0.x);
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD5.w = 0.0;
    u_xlat0.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat0.xyz;
    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    vs_TEXCOORD6.xyz = u_xlat0.xyz;
    vs_TEXCOORD6.w = 0.0;
    vs_TEXCOORD7.xyz = u_xlat2.xyz;
    vs_TEXCOORD7.w = 0.0;
    u_xlat1.xyz = u_xlat0.yzx * u_xlat2.zxy;
    u_xlat0.xyz = u_xlat2.yzx * u_xlat0.zxy + (-u_xlat1.xyz);
    u_xlat21 = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD8.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    vs_TEXCOORD8.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _LightColor0;
uniform 	float _AlphaRange;
uniform 	float _AlphaOffset;
uniform 	float _Opacity;
uniform 	mediump float _BottomAlphaToggle;
uniform 	float _AlphaBottomRange;
uniform 	float _AlphaBottomOffset;
uniform 	vec4 _WaterfallTex01_ST;
uniform 	mediump vec4 _FoamUVCoord01;
uniform 	mediump vec4 _FoamUVCoord02;
uniform 	float _FoamRange;
uniform 	float _FoamOffset;
uniform 	vec4 _DayColor;
uniform 	vec4 _BottomColor;
uniform 	vec4 _TopColor;
uniform 	float _ColorGradientRange;
uniform 	float _ColorGradientOffset;
uniform 	vec4 _ReflectionColor_Dark;
uniform 	vec4 _ReflectionColor_Light;
uniform 	float _Normal01_U_Speed;
uniform 	vec4 _Normal01_ST;
uniform 	float _Normal01_VSpeed;
uniform 	float _Normal02_U_Speed;
uniform 	vec4 _Normal02_ST;
uniform 	float _Normal02_V_Speed;
uniform 	vec4 _DistortionIntensity;
uniform 	float _ReflectionBrightness;
uniform 	float _ReflectionIntensity;
uniform 	float _WaterFall01_Speed;
uniform 	float _Waterfall02_Speed;
uniform 	mediump vec4 _WaterfallPatternColor;
uniform 	float _Waterfall01Brightness;
uniform 	float _Waterfall02Brightness;
uniform 	float _SprayRange;
uniform 	float _SprayOffset;
uniform 	float _ShadowStrength;
uniform 	vec4 _WaterfallSpecTex_ST;
uniform 	float _Detail01_U_Speed;
uniform 	vec4 _NoiseTex_ST;
uniform 	float _Detail01_V_Speed;
uniform 	float _NoiselDistortionValue;
uniform 	mediump vec4 _WaterfallSpecColor;
uniform 	mediump vec4 _FoamColor;
uniform 	vec3 _ES_MainLightColor;
uniform lowp sampler2D _WaterfallTex01;
uniform lowp sampler2D _Normal01;
uniform lowp sampler2D _Normal02;
uniform lowp samplerCube _Reflection;
uniform lowp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _WaterfallSpecTex;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
in highp vec4 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
bvec2 u_xlatb0;
vec4 u_xlat1;
lowp float u_xlat10_1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
vec4 u_xlat3;
vec3 u_xlat4;
lowp vec3 u_xlat10_4;
vec3 u_xlat5;
vec3 u_xlat6;
mediump vec3 u_xlat16_7;
float u_xlat8;
float u_xlat9;
vec3 u_xlat10;
vec2 u_xlat16;
mediump float u_xlat16_16;
lowp float u_xlat10_16;
bool u_xlatb16;
float u_xlat18;
float u_xlat24;
mediump float u_xlat16_24;
lowp float u_xlat10_24;
float u_xlat25;
lowp float u_xlat10_25;
float u_xlat27;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.x = vs_TEXCOORD4.y * _AlphaRange + _AlphaOffset;
    u_xlat8 = vs_TEXCOORD4.y * _AlphaBottomRange + _AlphaBottomOffset;
#ifdef UNITY_ADRENO_ES3
    u_xlat8 = min(max(u_xlat8, 0.0), 1.0);
#else
    u_xlat8 = clamp(u_xlat8, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(_BottomAlphaToggle==1.0);
#else
    u_xlatb16 = _BottomAlphaToggle==1.0;
#endif
    u_xlat8 = (u_xlatb16) ? u_xlat8 : 1.0;
    u_xlat16.xy = vs_TEXCOORD4.xy * _WaterfallTex01_ST.xy + _WaterfallTex01_ST.zw;
    u_xlat1.xy = vec2(u_xlat16.x * vs_TEXCOORD4.z, u_xlat16.y * vs_TEXCOORD4.w);
    u_xlat16.xy = vec2(_Time.y * _FoamUVCoord01.z, _Time.y * _FoamUVCoord01.w);
    u_xlat16.xy = u_xlat1.xy * _FoamUVCoord01.xy + u_xlat16.xy;
    u_xlat2.xy = vec2(_Time.y * _FoamUVCoord02.z, _Time.y * _FoamUVCoord02.w);
    u_xlat2.xy = u_xlat1.xy * _FoamUVCoord02.xy + u_xlat2.xy;
    u_xlat18 = vs_TEXCOORD4.y * _FoamRange + _FoamOffset;
    u_xlat10_16 = texture(_WaterfallTex01, u_xlat16.xy).x;
    u_xlat10_24 = texture(_WaterfallTex01, u_xlat2.xy).y;
    u_xlat16_16 = u_xlat10_24 + u_xlat10_16;
    u_xlat16.x = u_xlat18 + u_xlat16_16;
#ifdef UNITY_ADRENO_ES3
    u_xlat16.x = min(max(u_xlat16.x, 0.0), 1.0);
#else
    u_xlat16.x = clamp(u_xlat16.x, 0.0, 1.0);
#endif
    u_xlat24 = vs_TEXCOORD4.y * _ColorGradientRange + _ColorGradientOffset;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat2.xyw = (-_BottomColor.xyz) + _TopColor.xyz;
    u_xlat2.xyw = vec3(u_xlat24) * u_xlat2.xyw + _BottomColor.xyz;
    u_xlat3.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat24 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat3.xyz = vec3(u_xlat24) * u_xlat3.xyz;
    u_xlat4.xy = vs_TEXCOORD4.xy * _Normal01_ST.xy + _Normal01_ST.zw;
    u_xlat24 = _Time.y * _Normal01_VSpeed;
    u_xlat27 = u_xlat4.x * vs_TEXCOORD4.z;
    u_xlat5.x = _Time.y * _Normal01_U_Speed + u_xlat27;
    u_xlat5.y = u_xlat4.y * vs_TEXCOORD4.w + u_xlat24;
    u_xlat4.xy = vs_TEXCOORD4.xy * _Normal02_ST.xy + _Normal02_ST.zw;
    u_xlat4.xy = vec2(u_xlat4.x * vs_TEXCOORD4.z, u_xlat4.y * vs_TEXCOORD4.w);
    u_xlat6.x = _Time.y * _Normal02_U_Speed + u_xlat4.x;
    u_xlat6.y = _Time.y * _Normal02_V_Speed + u_xlat4.y;
    u_xlat10_4.xyz = texture(_Normal01, u_xlat5.xy).xyz;
    u_xlat16_7.xyz = u_xlat10_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat10_4.xyz = texture(_Normal02, u_xlat6.xy).xyz;
    u_xlat16_7.xyz = u_xlat10_4.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_7.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat4.xyz = u_xlat16_7.xyz * _DistortionIntensity.xyz;
    u_xlat5.x = vs_TEXCOORD6.x;
    u_xlat5.y = vs_TEXCOORD8.x;
    u_xlat5.z = vs_TEXCOORD7.x;
    u_xlat5.x = dot(u_xlat5.xyz, u_xlat4.xyz);
    u_xlat6.x = vs_TEXCOORD6.y;
    u_xlat6.y = vs_TEXCOORD8.y;
    u_xlat6.z = vs_TEXCOORD7.y;
    u_xlat5.y = dot(u_xlat6.xyz, u_xlat4.xyz);
    u_xlat6.x = vs_TEXCOORD6.z;
    u_xlat6.y = vs_TEXCOORD8.z;
    u_xlat6.z = vs_TEXCOORD7.z;
    u_xlat5.z = dot(u_xlat6.xyz, u_xlat4.xyz);
    u_xlat24 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat4.xyz = vec3(u_xlat24) * u_xlat5.xyz;
    u_xlat24 = dot((-u_xlat3.xyz), u_xlat4.xyz);
    u_xlat24 = u_xlat24 + u_xlat24;
    u_xlat3.xyz = u_xlat4.xyz * (-vec3(u_xlat24)) + (-u_xlat3.xyz);
    u_xlat10_24 = texture(_Reflection, u_xlat3.xyz).x;
    u_xlat3.xyz = (-_ReflectionColor_Dark.xyz) + _ReflectionColor_Light.xyz;
    u_xlat3.xyz = vec3(u_xlat10_24) * u_xlat3.xyz + _ReflectionColor_Dark.xyz;
    u_xlat4.xyz = u_xlat2.xyw * vec3(0.200000003, 0.200000003, 0.200000003);
    u_xlat2.xyw = u_xlat2.xyw * u_xlat3.xyz;
    u_xlat2.xyw = u_xlat2.xyw * vec3(_ReflectionBrightness) + (-u_xlat4.xyz);
    u_xlat2.xyw = vec3(vec3(_ReflectionIntensity, _ReflectionIntensity, _ReflectionIntensity)) * u_xlat2.xyw + u_xlat4.xyz;
    u_xlat1.zw = _Time.yy * vec2(_WaterFall01_Speed, _Waterfall02_Speed) + u_xlat1.yy;
    u_xlat10_24 = texture(_WaterfallTex01, u_xlat1.xz).x;
    u_xlat10_1 = texture(_WaterfallTex01, u_xlat1.xw).y;
    u_xlat16_7.x = (-u_xlat10_24) + u_xlat10_1;
    u_xlat16_7.x = u_xlat10_1 * u_xlat16_7.x + u_xlat10_24;
    u_xlat9 = u_xlat10_1 * _Waterfall02Brightness;
    u_xlat24 = u_xlat10_24 * _Waterfall01Brightness;
    u_xlat1.x = u_xlat10_1 * _Waterfall02Brightness + (-u_xlat24);
    u_xlat24 = u_xlat9 * u_xlat1.x + u_xlat24;
    u_xlat1.x = vs_TEXCOORD4.y * _SprayRange + _SprayOffset;
    u_xlat1.x = (-u_xlat1.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat24 = u_xlat24 * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat16_7.xxx * _WaterfallPatternColor.xyz + (-u_xlat2.xyw);
    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz + u_xlat2.xyw;
    u_xlat2.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat10_24 = texture(_ShadowMapTexture, u_xlat2.xy).x;
    u_xlat25 = (-_ShadowStrength) + 1.0;
    u_xlat24 = u_xlat10_24 * u_xlat25 + _ShadowStrength;
    u_xlat2.xy = vs_TEXCOORD4.xy * _WaterfallSpecTex_ST.xy + _WaterfallSpecTex_ST.zw;
    u_xlat16_7.x = vs_TEXCOORD4.w * 0.5;
    u_xlat16_7.x = vs_TEXCOORD4.w * u_xlat2.y + (-u_xlat16_7.x);
    u_xlat10.xz = vs_TEXCOORD4.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat3.x = _Time.y * _Detail01_U_Speed + u_xlat10.x;
    u_xlat3.y = _Time.y * _Detail01_V_Speed + u_xlat10.z;
    u_xlat10_25 = texture(_NoiseTex, u_xlat3.xy).x;
    u_xlat2.x = u_xlat10_25 * _NoiselDistortionValue + u_xlat2.x;
    u_xlat2.y = u_xlat10_25 * _NoiselDistortionValue + u_xlat16_7.x;
    u_xlat10_25 = texture(_WaterfallSpecTex, u_xlat2.xy).x;
    u_xlat16_2.xyw = vec3(u_xlat10_25) * _WaterfallSpecColor.xyz;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x * _Opacity;
    u_xlat0.x = u_xlat8 * u_xlat0.x;
    u_xlat3.w = u_xlat16.x * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat3.w = min(max(u_xlat3.w, 0.0), 1.0);
#else
    u_xlat3.w = clamp(u_xlat3.w, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat1.xyz * _DayColor.xyz;
    u_xlat0.xyw = u_xlat1.xyz * vec3(u_xlat24) + u_xlat16_2.xyw;
    u_xlat1.x = (-u_xlat18) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat16.x = u_xlat16.x * u_xlat1.x;
    u_xlat0.xyz = u_xlat16.xxx * _FoamColor.xyz + u_xlat0.xyw;
    u_xlat0.xyz = u_xlat0.xyz * _ES_MainLightColor.xyz;
    u_xlat16_24 = max(_LightColor0.w, 1.0);
    u_xlat3.xyz = vec3(u_xlat16_24) * u_xlat0.xyz;
    SV_Target0 = u_xlat3;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
uniform 	vec4 hlslcc_mtx4x4_mhyJitteredVP[4];
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec4 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
float u_xlat14;
float u_xlat21;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD5.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat0.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position = u_xlat0;
    vs_TEXCOORD2.zw = u_xlat0.zw;
    vs_COLOR0 = in_COLOR0;
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat14 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat14 = inversesqrt(u_xlat14);
    u_xlat2.xyz = vec3(u_xlat14) * u_xlat2.xyz;
    u_xlat16_3.x = u_xlat2.y * u_xlat2.y;
    u_xlat16_3.x = u_xlat2.x * u_xlat2.x + (-u_xlat16_3.x);
    u_xlat16_4 = u_xlat2.yzzx * u_xlat2.xyzz;
    u_xlat16_5.x = dot(unity_SHBr, u_xlat16_4);
    u_xlat16_5.y = dot(unity_SHBg, u_xlat16_4);
    u_xlat16_5.z = dot(unity_SHBb, u_xlat16_4);
    u_xlat16_3.xyz = unity_SHC.xyz * u_xlat16_3.xxx + u_xlat16_5.xyz;
    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat2.w = 1.0;
    u_xlat16_4.x = dot(unity_SHAr, u_xlat2);
    u_xlat16_4.y = dot(unity_SHAg, u_xlat2);
    u_xlat16_4.z = dot(unity_SHAb, u_xlat2);
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
    vs_TEXCOORD1.xyz = u_xlat16_3.xyz;
    vs_TEXCOORD1.w = 1.0;
    u_xlat6.x = float(0.5);
    u_xlat6.z = float(0.5);
    u_xlat6.y = _ProjectionParams.x;
    u_xlat0.xyz = u_xlat0.xyw * u_xlat6.xyz;
    u_xlat0.w = u_xlat0.y * 0.5;
    vs_TEXCOORD2.xy = u_xlat0.zz + u_xlat0.xw;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_mhyJitteredVP[1];
    u_xlat0 = hlslcc_mtx4x4_mhyJitteredVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_mhyJitteredVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_mhyJitteredVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat1.xyz = vec3(u_xlat6.z * u_xlat0.x, u_xlat6.y * u_xlat0.y, u_xlat6.z * u_xlat0.w);
    vs_TEXCOORD3.zw = u_xlat0.zw;
    u_xlat1.w = u_xlat1.y * 0.5;
    vs_TEXCOORD3.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat0.x = dot(hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, hlslcc_mtx4x4unity_ObjectToWorld[0].xyz);
    vs_TEXCOORD4.z = sqrt(u_xlat0.x);
    u_xlat0.x = dot(hlslcc_mtx4x4unity_ObjectToWorld[1].xyz, hlslcc_mtx4x4unity_ObjectToWorld[1].xyz);
    vs_TEXCOORD4.w = sqrt(u_xlat0.x);
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD5.w = 0.0;
    u_xlat0.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat0.xyz;
    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    vs_TEXCOORD6.xyz = u_xlat0.xyz;
    vs_TEXCOORD6.w = 0.0;
    vs_TEXCOORD7.xyz = u_xlat2.xyz;
    vs_TEXCOORD7.w = 0.0;
    u_xlat1.xyz = u_xlat0.yzx * u_xlat2.zxy;
    u_xlat0.xyz = u_xlat2.yzx * u_xlat0.zxy + (-u_xlat1.xyz);
    u_xlat21 = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD8.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    vs_TEXCOORD8.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _LightColor0;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	float _AlphaRange;
uniform 	float _AlphaOffset;
uniform 	float _Opacity;
uniform 	mediump float _BottomAlphaToggle;
uniform 	float _AlphaBottomRange;
uniform 	float _AlphaBottomOffset;
uniform 	vec4 _WaterfallTex01_ST;
uniform 	mediump vec4 _FoamUVCoord01;
uniform 	mediump vec4 _FoamUVCoord02;
uniform 	float _FoamRange;
uniform 	float _FoamOffset;
uniform 	vec4 _DayColor;
uniform 	vec4 _BottomColor;
uniform 	vec4 _TopColor;
uniform 	float _ColorGradientRange;
uniform 	float _ColorGradientOffset;
uniform 	vec4 _ReflectionColor_Dark;
uniform 	vec4 _ReflectionColor_Light;
uniform 	float _Normal01_U_Speed;
uniform 	vec4 _Normal01_ST;
uniform 	float _Normal01_VSpeed;
uniform 	float _Normal02_U_Speed;
uniform 	vec4 _Normal02_ST;
uniform 	float _Normal02_V_Speed;
uniform 	vec4 _DistortionIntensity;
uniform 	float _ReflectionBrightness;
uniform 	float _ReflectionIntensity;
uniform 	float _WaterFall01_Speed;
uniform 	float _Waterfall02_Speed;
uniform 	mediump vec4 _WaterfallPatternColor;
uniform 	float _Waterfall01Brightness;
uniform 	float _Waterfall02Brightness;
uniform 	float _SprayRange;
uniform 	float _SprayOffset;
uniform 	float _ShadowStrength;
uniform 	vec4 _WaterfallSpecTex_ST;
uniform 	float _Detail01_U_Speed;
uniform 	vec4 _NoiseTex_ST;
uniform 	float _Detail01_V_Speed;
uniform 	float _NoiselDistortionValue;
uniform 	mediump vec4 _WaterfallSpecColor;
uniform 	mediump vec4 _FoamColor;
uniform 	vec3 _ES_MainLightColor;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _WaterfallTex01;
uniform lowp sampler2D _Normal01;
uniform lowp sampler2D _Normal02;
uniform lowp samplerCube _Reflection;
uniform lowp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _WaterfallSpecTex;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
in highp vec4 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
lowp float u_xlat10_0;
bvec2 u_xlatb0;
float u_xlat1;
vec4 u_xlat2;
lowp float u_xlat10_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
vec4 u_xlat4;
vec3 u_xlat5;
lowp vec3 u_xlat10_5;
vec3 u_xlat6;
vec3 u_xlat7;
mediump vec3 u_xlat16_8;
vec3 u_xlat9;
lowp float u_xlat10_9;
vec2 u_xlat10;
mediump float u_xlat16_10;
lowp float u_xlat10_10;
bool u_xlatb10;
float u_xlat11;
vec2 u_xlat12;
float u_xlat18;
float u_xlat19;
lowp float u_xlat10_19;
float u_xlat27;
mediump float u_xlat16_27;
float u_xlat28;
float u_xlat30;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat18 = texture(_CameraDepthTexture, u_xlat0.xy).x;
    u_xlat18 = _ZBufferParams.z * u_xlat18 + _ZBufferParams.w;
    u_xlat18 = float(1.0) / u_xlat18;
    u_xlat18 = u_xlat18 + (-vs_TEXCOORD3.w);
    u_xlat27 = u_xlat18 * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
    u_xlat18 = u_xlat18 / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat1 = (-u_xlat27) + 1.0;
    u_xlat18 = u_xlat18 * u_xlat1 + u_xlat27;
    u_xlat27 = vs_TEXCOORD4.y * _AlphaRange + _AlphaOffset;
    u_xlat1 = vs_TEXCOORD4.y * _AlphaBottomRange + _AlphaBottomOffset;
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(_BottomAlphaToggle==1.0);
#else
    u_xlatb10 = _BottomAlphaToggle==1.0;
#endif
    u_xlat1 = (u_xlatb10) ? u_xlat1 : 1.0;
    u_xlat10.xy = vs_TEXCOORD4.xy * _WaterfallTex01_ST.xy + _WaterfallTex01_ST.zw;
    u_xlat2.xy = vec2(u_xlat10.x * vs_TEXCOORD4.z, u_xlat10.y * vs_TEXCOORD4.w);
    u_xlat10.xy = vec2(_Time.y * _FoamUVCoord01.z, _Time.y * _FoamUVCoord01.w);
    u_xlat10.xy = u_xlat2.xy * _FoamUVCoord01.xy + u_xlat10.xy;
    u_xlat3.xy = vec2(_Time.y * _FoamUVCoord02.z, _Time.y * _FoamUVCoord02.w);
    u_xlat3.xy = u_xlat2.xy * _FoamUVCoord02.xy + u_xlat3.xy;
    u_xlat28 = vs_TEXCOORD4.y * _FoamRange + _FoamOffset;
    u_xlat10_10 = texture(_WaterfallTex01, u_xlat10.xy).x;
    u_xlat10_19 = texture(_WaterfallTex01, u_xlat3.xy).y;
    u_xlat16_10 = u_xlat10_19 + u_xlat10_10;
    u_xlat10.x = u_xlat28 + u_xlat16_10;
#ifdef UNITY_ADRENO_ES3
    u_xlat10.x = min(max(u_xlat10.x, 0.0), 1.0);
#else
    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
#endif
    u_xlat19 = vs_TEXCOORD4.y * _ColorGradientRange + _ColorGradientOffset;
#ifdef UNITY_ADRENO_ES3
    u_xlat19 = min(max(u_xlat19, 0.0), 1.0);
#else
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
#endif
    u_xlat3.xyz = (-_BottomColor.xyz) + _TopColor.xyz;
    u_xlat3.xyz = vec3(u_xlat19) * u_xlat3.xyz + _BottomColor.xyz;
    u_xlat4.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat19 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat19 = inversesqrt(u_xlat19);
    u_xlat4.xyz = vec3(u_xlat19) * u_xlat4.xyz;
    u_xlat5.xy = vs_TEXCOORD4.xy * _Normal01_ST.xy + _Normal01_ST.zw;
    u_xlat19 = _Time.y * _Normal01_VSpeed;
    u_xlat30 = u_xlat5.x * vs_TEXCOORD4.z;
    u_xlat6.x = _Time.y * _Normal01_U_Speed + u_xlat30;
    u_xlat6.y = u_xlat5.y * vs_TEXCOORD4.w + u_xlat19;
    u_xlat5.xy = vs_TEXCOORD4.xy * _Normal02_ST.xy + _Normal02_ST.zw;
    u_xlat5.xy = vec2(u_xlat5.x * vs_TEXCOORD4.z, u_xlat5.y * vs_TEXCOORD4.w);
    u_xlat7.x = _Time.y * _Normal02_U_Speed + u_xlat5.x;
    u_xlat7.y = _Time.y * _Normal02_V_Speed + u_xlat5.y;
    u_xlat10_5.xyz = texture(_Normal01, u_xlat6.xy).xyz;
    u_xlat16_8.xyz = u_xlat10_5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat10_5.xyz = texture(_Normal02, u_xlat7.xy).xyz;
    u_xlat16_8.xyz = u_xlat10_5.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_8.xyz;
    u_xlat16_8.xyz = u_xlat16_8.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat5.xyz = u_xlat16_8.xyz * _DistortionIntensity.xyz;
    u_xlat6.x = vs_TEXCOORD6.x;
    u_xlat6.y = vs_TEXCOORD8.x;
    u_xlat6.z = vs_TEXCOORD7.x;
    u_xlat6.x = dot(u_xlat6.xyz, u_xlat5.xyz);
    u_xlat7.x = vs_TEXCOORD6.y;
    u_xlat7.y = vs_TEXCOORD8.y;
    u_xlat7.z = vs_TEXCOORD7.y;
    u_xlat6.y = dot(u_xlat7.xyz, u_xlat5.xyz);
    u_xlat7.x = vs_TEXCOORD6.z;
    u_xlat7.y = vs_TEXCOORD8.z;
    u_xlat7.z = vs_TEXCOORD7.z;
    u_xlat6.z = dot(u_xlat7.xyz, u_xlat5.xyz);
    u_xlat19 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat19 = inversesqrt(u_xlat19);
    u_xlat5.xyz = vec3(u_xlat19) * u_xlat6.xyz;
    u_xlat19 = dot((-u_xlat4.xyz), u_xlat5.xyz);
    u_xlat19 = u_xlat19 + u_xlat19;
    u_xlat4.xyz = u_xlat5.xyz * (-vec3(u_xlat19)) + (-u_xlat4.xyz);
    u_xlat10_19 = texture(_Reflection, u_xlat4.xyz).x;
    u_xlat4.xyz = (-_ReflectionColor_Dark.xyz) + _ReflectionColor_Light.xyz;
    u_xlat4.xyz = vec3(u_xlat10_19) * u_xlat4.xyz + _ReflectionColor_Dark.xyz;
    u_xlat5.xyz = u_xlat3.xyz * vec3(0.200000003, 0.200000003, 0.200000003);
    u_xlat3.xyz = u_xlat3.xyz * u_xlat4.xyz;
    u_xlat3.xyz = u_xlat3.xyz * vec3(_ReflectionBrightness) + (-u_xlat5.xyz);
    u_xlat3.xyz = vec3(vec3(_ReflectionIntensity, _ReflectionIntensity, _ReflectionIntensity)) * u_xlat3.xyz + u_xlat5.xyz;
    u_xlat2.zw = _Time.yy * vec2(_WaterFall01_Speed, _Waterfall02_Speed) + u_xlat2.yy;
    u_xlat10_19 = texture(_WaterfallTex01, u_xlat2.xz).x;
    u_xlat10_2 = texture(_WaterfallTex01, u_xlat2.xw).y;
    u_xlat16_8.x = (-u_xlat10_19) + u_xlat10_2;
    u_xlat16_8.x = u_xlat10_2 * u_xlat16_8.x + u_xlat10_19;
    u_xlat11 = u_xlat10_2 * _Waterfall02Brightness;
    u_xlat19 = u_xlat10_19 * _Waterfall01Brightness;
    u_xlat2.x = u_xlat10_2 * _Waterfall02Brightness + (-u_xlat19);
    u_xlat19 = u_xlat11 * u_xlat2.x + u_xlat19;
    u_xlat2.x = vs_TEXCOORD4.y * _SprayRange + _SprayOffset;
    u_xlat2.x = (-u_xlat2.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat19 = u_xlat19 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat19 = min(max(u_xlat19, 0.0), 1.0);
#else
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
#endif
    u_xlat2.xyz = u_xlat16_8.xxx * _WaterfallPatternColor.xyz + (-u_xlat3.xyz);
    u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz + u_xlat3.xyz;
    u_xlat10_0 = texture(_ShadowMapTexture, u_xlat0.xy).x;
    u_xlat9.x = (-_ShadowStrength) + 1.0;
    u_xlat0.x = u_xlat10_0 * u_xlat9.x + _ShadowStrength;
    u_xlat3.xy = vs_TEXCOORD4.xy * _WaterfallSpecTex_ST.xy + _WaterfallSpecTex_ST.zw;
    u_xlat16_8.x = vs_TEXCOORD4.w * 0.5;
    u_xlat16_8.x = vs_TEXCOORD4.w * u_xlat3.y + (-u_xlat16_8.x);
    u_xlat12.xy = vs_TEXCOORD4.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat4.x = _Time.y * _Detail01_U_Speed + u_xlat12.x;
    u_xlat4.y = _Time.y * _Detail01_V_Speed + u_xlat12.y;
    u_xlat10_9 = texture(_NoiseTex, u_xlat4.xy).x;
    u_xlat3.x = u_xlat10_9 * _NoiselDistortionValue + u_xlat3.x;
    u_xlat3.y = u_xlat10_9 * _NoiselDistortionValue + u_xlat16_8.x;
    u_xlat10_9 = texture(_WaterfallSpecTex, u_xlat3.xy).x;
    u_xlat16_3.xyz = vec3(u_xlat10_9) * _WaterfallSpecColor.xyz;
    u_xlat9.x = (-u_xlat27) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat9.x = min(max(u_xlat9.x, 0.0), 1.0);
#else
    u_xlat9.x = clamp(u_xlat9.x, 0.0, 1.0);
#endif
    u_xlat9.x = u_xlat9.x * u_xlat18;
    u_xlat9.x = u_xlat9.x * _Opacity;
    u_xlat9.x = u_xlat1 * u_xlat9.x;
    u_xlat4.w = u_xlat10.x * u_xlat9.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.w = min(max(u_xlat4.w, 0.0), 1.0);
#else
    u_xlat4.w = clamp(u_xlat4.w, 0.0, 1.0);
#endif
    u_xlat9.xyz = u_xlat2.xyz * _DayColor.xyz;
    u_xlat0.xyz = u_xlat9.xyz * u_xlat0.xxx + u_xlat16_3.xyz;
    u_xlat27 = (-u_xlat28) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
    u_xlat27 = u_xlat27 * u_xlat10.x;
    u_xlat0.xyz = vec3(u_xlat27) * _FoamColor.xyz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * _ES_MainLightColor.xyz;
    u_xlat16_27 = max(_LightColor0.w, 1.0);
    u_xlat4.xyz = vec3(u_xlat16_27) * u_xlat0.xyz;
    SV_Target0 = u_xlat4;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
uniform 	vec4 hlslcc_mtx4x4_mhyJitteredVP[4];
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
vec3 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump vec3 u_xlat16_4;
mediump vec4 u_xlat16_5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
vec3 u_xlat8;
float u_xlat24;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    vs_TEXCOORD5.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    u_xlat1.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position = u_xlat1;
    vs_TEXCOORD2.zw = u_xlat1.zw;
    vs_COLOR0 = in_COLOR0;
    u_xlat3.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat3.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat3.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat8.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat3.xyz = u_xlat8.xxx * u_xlat3.xyz;
    u_xlat16_4.x = u_xlat3.y * u_xlat3.y;
    u_xlat16_4.x = u_xlat3.x * u_xlat3.x + (-u_xlat16_4.x);
    u_xlat16_5 = u_xlat3.yzzx * u_xlat3.xyzz;
    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_5);
    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_5);
    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_5);
    u_xlat16_4.xyz = unity_SHC.xyz * u_xlat16_4.xxx + u_xlat16_6.xyz;
    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat3.w = 1.0;
    u_xlat16_5.x = dot(unity_SHAr, u_xlat3);
    u_xlat16_5.y = dot(unity_SHAg, u_xlat3);
    u_xlat16_5.z = dot(unity_SHAb, u_xlat3);
    u_xlat16_4.xyz = u_xlat16_4.xyz + u_xlat16_5.xyz;
    vs_TEXCOORD1.xyz = u_xlat16_4.xyz;
    vs_TEXCOORD1.w = 1.0;
    u_xlat7.x = float(0.5);
    u_xlat7.z = float(0.5);
    u_xlat7.y = _ProjectionParams.x;
    u_xlat1.xyz = u_xlat1.xyw * u_xlat7.xyz;
    u_xlat1.w = u_xlat1.y * 0.5;
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4_mhyJitteredVP[1];
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[3] * u_xlat2.wwww + u_xlat1;
    u_xlat2.xyz = vec3(u_xlat7.z * u_xlat1.x, u_xlat7.y * u_xlat1.y, u_xlat7.z * u_xlat1.w);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    u_xlat2.w = u_xlat2.y * 0.5;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy;
    u_xlat8.x = dot(unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz);
    vs_TEXCOORD4.z = sqrt(u_xlat8.x);
    u_xlat8.x = dot(unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz);
    vs_TEXCOORD4.w = sqrt(u_xlat8.x);
    vs_TEXCOORD5.w = 0.0;
    u_xlat8.xyz = in_TANGENT0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat8.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_TANGENT0.xxx + u_xlat8.xyz;
    u_xlat0.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_TANGENT0.zzz + u_xlat8.xyz;
    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat0.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    vs_TEXCOORD6.xyz = u_xlat0.xyz;
    vs_TEXCOORD6.w = 0.0;
    vs_TEXCOORD7.xyz = u_xlat3.xyz;
    vs_TEXCOORD7.w = 0.0;
    u_xlat1.xyz = u_xlat0.yzx * u_xlat3.zxy;
    u_xlat0.xyz = u_xlat3.yzx * u_xlat0.zxy + (-u_xlat1.xyz);
    u_xlat24 = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD8.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    vs_TEXCOORD8.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _LightColor0;
uniform 	float _AlphaRange;
uniform 	float _AlphaOffset;
uniform 	float _Opacity;
uniform 	mediump float _BottomAlphaToggle;
uniform 	float _AlphaBottomRange;
uniform 	float _AlphaBottomOffset;
uniform 	vec4 _WaterfallTex01_ST;
uniform 	mediump vec4 _FoamUVCoord01;
uniform 	mediump vec4 _FoamUVCoord02;
uniform 	float _FoamRange;
uniform 	float _FoamOffset;
uniform 	vec4 _DayColor;
uniform 	vec4 _BottomColor;
uniform 	vec4 _TopColor;
uniform 	float _ColorGradientRange;
uniform 	float _ColorGradientOffset;
uniform 	vec4 _ReflectionColor_Dark;
uniform 	vec4 _ReflectionColor_Light;
uniform 	float _Normal01_U_Speed;
uniform 	vec4 _Normal01_ST;
uniform 	float _Normal01_VSpeed;
uniform 	float _Normal02_U_Speed;
uniform 	vec4 _Normal02_ST;
uniform 	float _Normal02_V_Speed;
uniform 	vec4 _DistortionIntensity;
uniform 	float _ReflectionBrightness;
uniform 	float _ReflectionIntensity;
uniform 	float _WaterFall01_Speed;
uniform 	float _Waterfall02_Speed;
uniform 	mediump vec4 _WaterfallPatternColor;
uniform 	float _Waterfall01Brightness;
uniform 	float _Waterfall02Brightness;
uniform 	float _SprayRange;
uniform 	float _SprayOffset;
uniform 	float _ShadowStrength;
uniform 	vec4 _WaterfallSpecTex_ST;
uniform 	float _Detail01_U_Speed;
uniform 	vec4 _NoiseTex_ST;
uniform 	float _Detail01_V_Speed;
uniform 	float _NoiselDistortionValue;
uniform 	mediump vec4 _WaterfallSpecColor;
uniform 	mediump vec4 _FoamColor;
uniform 	vec3 _ES_MainLightColor;
uniform lowp sampler2D _WaterfallTex01;
uniform lowp sampler2D _Normal01;
uniform lowp sampler2D _Normal02;
uniform lowp samplerCube _Reflection;
uniform lowp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _WaterfallSpecTex;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
in highp vec4 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
bvec2 u_xlatb0;
vec4 u_xlat1;
lowp float u_xlat10_1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
vec4 u_xlat3;
vec3 u_xlat4;
lowp vec3 u_xlat10_4;
vec3 u_xlat5;
vec3 u_xlat6;
mediump vec3 u_xlat16_7;
float u_xlat8;
float u_xlat9;
vec3 u_xlat10;
vec2 u_xlat16;
mediump float u_xlat16_16;
lowp float u_xlat10_16;
bool u_xlatb16;
float u_xlat18;
float u_xlat24;
mediump float u_xlat16_24;
lowp float u_xlat10_24;
float u_xlat25;
lowp float u_xlat10_25;
float u_xlat27;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.x = vs_TEXCOORD4.y * _AlphaRange + _AlphaOffset;
    u_xlat8 = vs_TEXCOORD4.y * _AlphaBottomRange + _AlphaBottomOffset;
#ifdef UNITY_ADRENO_ES3
    u_xlat8 = min(max(u_xlat8, 0.0), 1.0);
#else
    u_xlat8 = clamp(u_xlat8, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(_BottomAlphaToggle==1.0);
#else
    u_xlatb16 = _BottomAlphaToggle==1.0;
#endif
    u_xlat8 = (u_xlatb16) ? u_xlat8 : 1.0;
    u_xlat16.xy = vs_TEXCOORD4.xy * _WaterfallTex01_ST.xy + _WaterfallTex01_ST.zw;
    u_xlat1.xy = vec2(u_xlat16.x * vs_TEXCOORD4.z, u_xlat16.y * vs_TEXCOORD4.w);
    u_xlat16.xy = vec2(_Time.y * _FoamUVCoord01.z, _Time.y * _FoamUVCoord01.w);
    u_xlat16.xy = u_xlat1.xy * _FoamUVCoord01.xy + u_xlat16.xy;
    u_xlat2.xy = vec2(_Time.y * _FoamUVCoord02.z, _Time.y * _FoamUVCoord02.w);
    u_xlat2.xy = u_xlat1.xy * _FoamUVCoord02.xy + u_xlat2.xy;
    u_xlat18 = vs_TEXCOORD4.y * _FoamRange + _FoamOffset;
    u_xlat10_16 = texture(_WaterfallTex01, u_xlat16.xy).x;
    u_xlat10_24 = texture(_WaterfallTex01, u_xlat2.xy).y;
    u_xlat16_16 = u_xlat10_24 + u_xlat10_16;
    u_xlat16.x = u_xlat18 + u_xlat16_16;
#ifdef UNITY_ADRENO_ES3
    u_xlat16.x = min(max(u_xlat16.x, 0.0), 1.0);
#else
    u_xlat16.x = clamp(u_xlat16.x, 0.0, 1.0);
#endif
    u_xlat24 = vs_TEXCOORD4.y * _ColorGradientRange + _ColorGradientOffset;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat2.xyw = (-_BottomColor.xyz) + _TopColor.xyz;
    u_xlat2.xyw = vec3(u_xlat24) * u_xlat2.xyw + _BottomColor.xyz;
    u_xlat3.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat24 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat3.xyz = vec3(u_xlat24) * u_xlat3.xyz;
    u_xlat4.xy = vs_TEXCOORD4.xy * _Normal01_ST.xy + _Normal01_ST.zw;
    u_xlat24 = _Time.y * _Normal01_VSpeed;
    u_xlat27 = u_xlat4.x * vs_TEXCOORD4.z;
    u_xlat5.x = _Time.y * _Normal01_U_Speed + u_xlat27;
    u_xlat5.y = u_xlat4.y * vs_TEXCOORD4.w + u_xlat24;
    u_xlat4.xy = vs_TEXCOORD4.xy * _Normal02_ST.xy + _Normal02_ST.zw;
    u_xlat4.xy = vec2(u_xlat4.x * vs_TEXCOORD4.z, u_xlat4.y * vs_TEXCOORD4.w);
    u_xlat6.x = _Time.y * _Normal02_U_Speed + u_xlat4.x;
    u_xlat6.y = _Time.y * _Normal02_V_Speed + u_xlat4.y;
    u_xlat10_4.xyz = texture(_Normal01, u_xlat5.xy).xyz;
    u_xlat16_7.xyz = u_xlat10_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat10_4.xyz = texture(_Normal02, u_xlat6.xy).xyz;
    u_xlat16_7.xyz = u_xlat10_4.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_7.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat4.xyz = u_xlat16_7.xyz * _DistortionIntensity.xyz;
    u_xlat5.x = vs_TEXCOORD6.x;
    u_xlat5.y = vs_TEXCOORD8.x;
    u_xlat5.z = vs_TEXCOORD7.x;
    u_xlat5.x = dot(u_xlat5.xyz, u_xlat4.xyz);
    u_xlat6.x = vs_TEXCOORD6.y;
    u_xlat6.y = vs_TEXCOORD8.y;
    u_xlat6.z = vs_TEXCOORD7.y;
    u_xlat5.y = dot(u_xlat6.xyz, u_xlat4.xyz);
    u_xlat6.x = vs_TEXCOORD6.z;
    u_xlat6.y = vs_TEXCOORD8.z;
    u_xlat6.z = vs_TEXCOORD7.z;
    u_xlat5.z = dot(u_xlat6.xyz, u_xlat4.xyz);
    u_xlat24 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat4.xyz = vec3(u_xlat24) * u_xlat5.xyz;
    u_xlat24 = dot((-u_xlat3.xyz), u_xlat4.xyz);
    u_xlat24 = u_xlat24 + u_xlat24;
    u_xlat3.xyz = u_xlat4.xyz * (-vec3(u_xlat24)) + (-u_xlat3.xyz);
    u_xlat10_24 = texture(_Reflection, u_xlat3.xyz).x;
    u_xlat3.xyz = (-_ReflectionColor_Dark.xyz) + _ReflectionColor_Light.xyz;
    u_xlat3.xyz = vec3(u_xlat10_24) * u_xlat3.xyz + _ReflectionColor_Dark.xyz;
    u_xlat4.xyz = u_xlat2.xyw * vec3(0.200000003, 0.200000003, 0.200000003);
    u_xlat2.xyw = u_xlat2.xyw * u_xlat3.xyz;
    u_xlat2.xyw = u_xlat2.xyw * vec3(_ReflectionBrightness) + (-u_xlat4.xyz);
    u_xlat2.xyw = vec3(vec3(_ReflectionIntensity, _ReflectionIntensity, _ReflectionIntensity)) * u_xlat2.xyw + u_xlat4.xyz;
    u_xlat1.zw = _Time.yy * vec2(_WaterFall01_Speed, _Waterfall02_Speed) + u_xlat1.yy;
    u_xlat10_24 = texture(_WaterfallTex01, u_xlat1.xz).x;
    u_xlat10_1 = texture(_WaterfallTex01, u_xlat1.xw).y;
    u_xlat16_7.x = (-u_xlat10_24) + u_xlat10_1;
    u_xlat16_7.x = u_xlat10_1 * u_xlat16_7.x + u_xlat10_24;
    u_xlat9 = u_xlat10_1 * _Waterfall02Brightness;
    u_xlat24 = u_xlat10_24 * _Waterfall01Brightness;
    u_xlat1.x = u_xlat10_1 * _Waterfall02Brightness + (-u_xlat24);
    u_xlat24 = u_xlat9 * u_xlat1.x + u_xlat24;
    u_xlat1.x = vs_TEXCOORD4.y * _SprayRange + _SprayOffset;
    u_xlat1.x = (-u_xlat1.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat24 = u_xlat24 * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat16_7.xxx * _WaterfallPatternColor.xyz + (-u_xlat2.xyw);
    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz + u_xlat2.xyw;
    u_xlat2.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat10_24 = texture(_ShadowMapTexture, u_xlat2.xy).x;
    u_xlat25 = (-_ShadowStrength) + 1.0;
    u_xlat24 = u_xlat10_24 * u_xlat25 + _ShadowStrength;
    u_xlat2.xy = vs_TEXCOORD4.xy * _WaterfallSpecTex_ST.xy + _WaterfallSpecTex_ST.zw;
    u_xlat16_7.x = vs_TEXCOORD4.w * 0.5;
    u_xlat16_7.x = vs_TEXCOORD4.w * u_xlat2.y + (-u_xlat16_7.x);
    u_xlat10.xz = vs_TEXCOORD4.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat3.x = _Time.y * _Detail01_U_Speed + u_xlat10.x;
    u_xlat3.y = _Time.y * _Detail01_V_Speed + u_xlat10.z;
    u_xlat10_25 = texture(_NoiseTex, u_xlat3.xy).x;
    u_xlat2.x = u_xlat10_25 * _NoiselDistortionValue + u_xlat2.x;
    u_xlat2.y = u_xlat10_25 * _NoiselDistortionValue + u_xlat16_7.x;
    u_xlat10_25 = texture(_WaterfallSpecTex, u_xlat2.xy).x;
    u_xlat16_2.xyw = vec3(u_xlat10_25) * _WaterfallSpecColor.xyz;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x * _Opacity;
    u_xlat0.x = u_xlat8 * u_xlat0.x;
    u_xlat3.w = u_xlat16.x * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat3.w = min(max(u_xlat3.w, 0.0), 1.0);
#else
    u_xlat3.w = clamp(u_xlat3.w, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat1.xyz * _DayColor.xyz;
    u_xlat0.xyw = u_xlat1.xyz * vec3(u_xlat24) + u_xlat16_2.xyw;
    u_xlat1.x = (-u_xlat18) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat16.x = u_xlat16.x * u_xlat1.x;
    u_xlat0.xyz = u_xlat16.xxx * _FoamColor.xyz + u_xlat0.xyw;
    u_xlat0.xyz = u_xlat0.xyz * _ES_MainLightColor.xyz;
    u_xlat16_24 = max(_LightColor0.w, 1.0);
    u_xlat3.xyz = vec3(u_xlat16_24) * u_xlat0.xyz;
    SV_Target0 = u_xlat3;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
uniform 	vec4 hlslcc_mtx4x4_mhyJitteredVP[4];
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
vec3 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump vec3 u_xlat16_4;
mediump vec4 u_xlat16_5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
vec3 u_xlat8;
float u_xlat24;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    vs_TEXCOORD5.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    u_xlat1.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position = u_xlat1;
    vs_TEXCOORD2.zw = u_xlat1.zw;
    vs_COLOR0 = in_COLOR0;
    u_xlat3.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat3.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat3.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat8.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat3.xyz = u_xlat8.xxx * u_xlat3.xyz;
    u_xlat16_4.x = u_xlat3.y * u_xlat3.y;
    u_xlat16_4.x = u_xlat3.x * u_xlat3.x + (-u_xlat16_4.x);
    u_xlat16_5 = u_xlat3.yzzx * u_xlat3.xyzz;
    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_5);
    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_5);
    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_5);
    u_xlat16_4.xyz = unity_SHC.xyz * u_xlat16_4.xxx + u_xlat16_6.xyz;
    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat3.w = 1.0;
    u_xlat16_5.x = dot(unity_SHAr, u_xlat3);
    u_xlat16_5.y = dot(unity_SHAg, u_xlat3);
    u_xlat16_5.z = dot(unity_SHAb, u_xlat3);
    u_xlat16_4.xyz = u_xlat16_4.xyz + u_xlat16_5.xyz;
    vs_TEXCOORD1.xyz = u_xlat16_4.xyz;
    vs_TEXCOORD1.w = 1.0;
    u_xlat7.x = float(0.5);
    u_xlat7.z = float(0.5);
    u_xlat7.y = _ProjectionParams.x;
    u_xlat1.xyz = u_xlat1.xyw * u_xlat7.xyz;
    u_xlat1.w = u_xlat1.y * 0.5;
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4_mhyJitteredVP[1];
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[3] * u_xlat2.wwww + u_xlat1;
    u_xlat2.xyz = vec3(u_xlat7.z * u_xlat1.x, u_xlat7.y * u_xlat1.y, u_xlat7.z * u_xlat1.w);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    u_xlat2.w = u_xlat2.y * 0.5;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy;
    u_xlat8.x = dot(unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz);
    vs_TEXCOORD4.z = sqrt(u_xlat8.x);
    u_xlat8.x = dot(unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz);
    vs_TEXCOORD4.w = sqrt(u_xlat8.x);
    vs_TEXCOORD5.w = 0.0;
    u_xlat8.xyz = in_TANGENT0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat8.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_TANGENT0.xxx + u_xlat8.xyz;
    u_xlat0.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_TANGENT0.zzz + u_xlat8.xyz;
    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat0.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    vs_TEXCOORD6.xyz = u_xlat0.xyz;
    vs_TEXCOORD6.w = 0.0;
    vs_TEXCOORD7.xyz = u_xlat3.xyz;
    vs_TEXCOORD7.w = 0.0;
    u_xlat1.xyz = u_xlat0.yzx * u_xlat3.zxy;
    u_xlat0.xyz = u_xlat3.yzx * u_xlat0.zxy + (-u_xlat1.xyz);
    u_xlat24 = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD8.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    vs_TEXCOORD8.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _LightColor0;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	float _AlphaRange;
uniform 	float _AlphaOffset;
uniform 	float _Opacity;
uniform 	mediump float _BottomAlphaToggle;
uniform 	float _AlphaBottomRange;
uniform 	float _AlphaBottomOffset;
uniform 	vec4 _WaterfallTex01_ST;
uniform 	mediump vec4 _FoamUVCoord01;
uniform 	mediump vec4 _FoamUVCoord02;
uniform 	float _FoamRange;
uniform 	float _FoamOffset;
uniform 	vec4 _DayColor;
uniform 	vec4 _BottomColor;
uniform 	vec4 _TopColor;
uniform 	float _ColorGradientRange;
uniform 	float _ColorGradientOffset;
uniform 	vec4 _ReflectionColor_Dark;
uniform 	vec4 _ReflectionColor_Light;
uniform 	float _Normal01_U_Speed;
uniform 	vec4 _Normal01_ST;
uniform 	float _Normal01_VSpeed;
uniform 	float _Normal02_U_Speed;
uniform 	vec4 _Normal02_ST;
uniform 	float _Normal02_V_Speed;
uniform 	vec4 _DistortionIntensity;
uniform 	float _ReflectionBrightness;
uniform 	float _ReflectionIntensity;
uniform 	float _WaterFall01_Speed;
uniform 	float _Waterfall02_Speed;
uniform 	mediump vec4 _WaterfallPatternColor;
uniform 	float _Waterfall01Brightness;
uniform 	float _Waterfall02Brightness;
uniform 	float _SprayRange;
uniform 	float _SprayOffset;
uniform 	float _ShadowStrength;
uniform 	vec4 _WaterfallSpecTex_ST;
uniform 	float _Detail01_U_Speed;
uniform 	vec4 _NoiseTex_ST;
uniform 	float _Detail01_V_Speed;
uniform 	float _NoiselDistortionValue;
uniform 	mediump vec4 _WaterfallSpecColor;
uniform 	mediump vec4 _FoamColor;
uniform 	vec3 _ES_MainLightColor;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _WaterfallTex01;
uniform lowp sampler2D _Normal01;
uniform lowp sampler2D _Normal02;
uniform lowp samplerCube _Reflection;
uniform lowp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _WaterfallSpecTex;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
in highp vec4 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
lowp float u_xlat10_0;
bvec2 u_xlatb0;
float u_xlat1;
vec4 u_xlat2;
lowp float u_xlat10_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
vec4 u_xlat4;
vec3 u_xlat5;
lowp vec3 u_xlat10_5;
vec3 u_xlat6;
vec3 u_xlat7;
mediump vec3 u_xlat16_8;
vec3 u_xlat9;
lowp float u_xlat10_9;
vec2 u_xlat10;
mediump float u_xlat16_10;
lowp float u_xlat10_10;
bool u_xlatb10;
float u_xlat11;
vec2 u_xlat12;
float u_xlat18;
float u_xlat19;
lowp float u_xlat10_19;
float u_xlat27;
mediump float u_xlat16_27;
float u_xlat28;
float u_xlat30;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat18 = texture(_CameraDepthTexture, u_xlat0.xy).x;
    u_xlat18 = _ZBufferParams.z * u_xlat18 + _ZBufferParams.w;
    u_xlat18 = float(1.0) / u_xlat18;
    u_xlat18 = u_xlat18 + (-vs_TEXCOORD3.w);
    u_xlat27 = u_xlat18 * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
    u_xlat18 = u_xlat18 / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat1 = (-u_xlat27) + 1.0;
    u_xlat18 = u_xlat18 * u_xlat1 + u_xlat27;
    u_xlat27 = vs_TEXCOORD4.y * _AlphaRange + _AlphaOffset;
    u_xlat1 = vs_TEXCOORD4.y * _AlphaBottomRange + _AlphaBottomOffset;
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(_BottomAlphaToggle==1.0);
#else
    u_xlatb10 = _BottomAlphaToggle==1.0;
#endif
    u_xlat1 = (u_xlatb10) ? u_xlat1 : 1.0;
    u_xlat10.xy = vs_TEXCOORD4.xy * _WaterfallTex01_ST.xy + _WaterfallTex01_ST.zw;
    u_xlat2.xy = vec2(u_xlat10.x * vs_TEXCOORD4.z, u_xlat10.y * vs_TEXCOORD4.w);
    u_xlat10.xy = vec2(_Time.y * _FoamUVCoord01.z, _Time.y * _FoamUVCoord01.w);
    u_xlat10.xy = u_xlat2.xy * _FoamUVCoord01.xy + u_xlat10.xy;
    u_xlat3.xy = vec2(_Time.y * _FoamUVCoord02.z, _Time.y * _FoamUVCoord02.w);
    u_xlat3.xy = u_xlat2.xy * _FoamUVCoord02.xy + u_xlat3.xy;
    u_xlat28 = vs_TEXCOORD4.y * _FoamRange + _FoamOffset;
    u_xlat10_10 = texture(_WaterfallTex01, u_xlat10.xy).x;
    u_xlat10_19 = texture(_WaterfallTex01, u_xlat3.xy).y;
    u_xlat16_10 = u_xlat10_19 + u_xlat10_10;
    u_xlat10.x = u_xlat28 + u_xlat16_10;
#ifdef UNITY_ADRENO_ES3
    u_xlat10.x = min(max(u_xlat10.x, 0.0), 1.0);
#else
    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
#endif
    u_xlat19 = vs_TEXCOORD4.y * _ColorGradientRange + _ColorGradientOffset;
#ifdef UNITY_ADRENO_ES3
    u_xlat19 = min(max(u_xlat19, 0.0), 1.0);
#else
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
#endif
    u_xlat3.xyz = (-_BottomColor.xyz) + _TopColor.xyz;
    u_xlat3.xyz = vec3(u_xlat19) * u_xlat3.xyz + _BottomColor.xyz;
    u_xlat4.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat19 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat19 = inversesqrt(u_xlat19);
    u_xlat4.xyz = vec3(u_xlat19) * u_xlat4.xyz;
    u_xlat5.xy = vs_TEXCOORD4.xy * _Normal01_ST.xy + _Normal01_ST.zw;
    u_xlat19 = _Time.y * _Normal01_VSpeed;
    u_xlat30 = u_xlat5.x * vs_TEXCOORD4.z;
    u_xlat6.x = _Time.y * _Normal01_U_Speed + u_xlat30;
    u_xlat6.y = u_xlat5.y * vs_TEXCOORD4.w + u_xlat19;
    u_xlat5.xy = vs_TEXCOORD4.xy * _Normal02_ST.xy + _Normal02_ST.zw;
    u_xlat5.xy = vec2(u_xlat5.x * vs_TEXCOORD4.z, u_xlat5.y * vs_TEXCOORD4.w);
    u_xlat7.x = _Time.y * _Normal02_U_Speed + u_xlat5.x;
    u_xlat7.y = _Time.y * _Normal02_V_Speed + u_xlat5.y;
    u_xlat10_5.xyz = texture(_Normal01, u_xlat6.xy).xyz;
    u_xlat16_8.xyz = u_xlat10_5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat10_5.xyz = texture(_Normal02, u_xlat7.xy).xyz;
    u_xlat16_8.xyz = u_xlat10_5.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_8.xyz;
    u_xlat16_8.xyz = u_xlat16_8.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat5.xyz = u_xlat16_8.xyz * _DistortionIntensity.xyz;
    u_xlat6.x = vs_TEXCOORD6.x;
    u_xlat6.y = vs_TEXCOORD8.x;
    u_xlat6.z = vs_TEXCOORD7.x;
    u_xlat6.x = dot(u_xlat6.xyz, u_xlat5.xyz);
    u_xlat7.x = vs_TEXCOORD6.y;
    u_xlat7.y = vs_TEXCOORD8.y;
    u_xlat7.z = vs_TEXCOORD7.y;
    u_xlat6.y = dot(u_xlat7.xyz, u_xlat5.xyz);
    u_xlat7.x = vs_TEXCOORD6.z;
    u_xlat7.y = vs_TEXCOORD8.z;
    u_xlat7.z = vs_TEXCOORD7.z;
    u_xlat6.z = dot(u_xlat7.xyz, u_xlat5.xyz);
    u_xlat19 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat19 = inversesqrt(u_xlat19);
    u_xlat5.xyz = vec3(u_xlat19) * u_xlat6.xyz;
    u_xlat19 = dot((-u_xlat4.xyz), u_xlat5.xyz);
    u_xlat19 = u_xlat19 + u_xlat19;
    u_xlat4.xyz = u_xlat5.xyz * (-vec3(u_xlat19)) + (-u_xlat4.xyz);
    u_xlat10_19 = texture(_Reflection, u_xlat4.xyz).x;
    u_xlat4.xyz = (-_ReflectionColor_Dark.xyz) + _ReflectionColor_Light.xyz;
    u_xlat4.xyz = vec3(u_xlat10_19) * u_xlat4.xyz + _ReflectionColor_Dark.xyz;
    u_xlat5.xyz = u_xlat3.xyz * vec3(0.200000003, 0.200000003, 0.200000003);
    u_xlat3.xyz = u_xlat3.xyz * u_xlat4.xyz;
    u_xlat3.xyz = u_xlat3.xyz * vec3(_ReflectionBrightness) + (-u_xlat5.xyz);
    u_xlat3.xyz = vec3(vec3(_ReflectionIntensity, _ReflectionIntensity, _ReflectionIntensity)) * u_xlat3.xyz + u_xlat5.xyz;
    u_xlat2.zw = _Time.yy * vec2(_WaterFall01_Speed, _Waterfall02_Speed) + u_xlat2.yy;
    u_xlat10_19 = texture(_WaterfallTex01, u_xlat2.xz).x;
    u_xlat10_2 = texture(_WaterfallTex01, u_xlat2.xw).y;
    u_xlat16_8.x = (-u_xlat10_19) + u_xlat10_2;
    u_xlat16_8.x = u_xlat10_2 * u_xlat16_8.x + u_xlat10_19;
    u_xlat11 = u_xlat10_2 * _Waterfall02Brightness;
    u_xlat19 = u_xlat10_19 * _Waterfall01Brightness;
    u_xlat2.x = u_xlat10_2 * _Waterfall02Brightness + (-u_xlat19);
    u_xlat19 = u_xlat11 * u_xlat2.x + u_xlat19;
    u_xlat2.x = vs_TEXCOORD4.y * _SprayRange + _SprayOffset;
    u_xlat2.x = (-u_xlat2.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat19 = u_xlat19 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat19 = min(max(u_xlat19, 0.0), 1.0);
#else
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
#endif
    u_xlat2.xyz = u_xlat16_8.xxx * _WaterfallPatternColor.xyz + (-u_xlat3.xyz);
    u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz + u_xlat3.xyz;
    u_xlat10_0 = texture(_ShadowMapTexture, u_xlat0.xy).x;
    u_xlat9.x = (-_ShadowStrength) + 1.0;
    u_xlat0.x = u_xlat10_0 * u_xlat9.x + _ShadowStrength;
    u_xlat3.xy = vs_TEXCOORD4.xy * _WaterfallSpecTex_ST.xy + _WaterfallSpecTex_ST.zw;
    u_xlat16_8.x = vs_TEXCOORD4.w * 0.5;
    u_xlat16_8.x = vs_TEXCOORD4.w * u_xlat3.y + (-u_xlat16_8.x);
    u_xlat12.xy = vs_TEXCOORD4.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat4.x = _Time.y * _Detail01_U_Speed + u_xlat12.x;
    u_xlat4.y = _Time.y * _Detail01_V_Speed + u_xlat12.y;
    u_xlat10_9 = texture(_NoiseTex, u_xlat4.xy).x;
    u_xlat3.x = u_xlat10_9 * _NoiselDistortionValue + u_xlat3.x;
    u_xlat3.y = u_xlat10_9 * _NoiselDistortionValue + u_xlat16_8.x;
    u_xlat10_9 = texture(_WaterfallSpecTex, u_xlat3.xy).x;
    u_xlat16_3.xyz = vec3(u_xlat10_9) * _WaterfallSpecColor.xyz;
    u_xlat9.x = (-u_xlat27) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat9.x = min(max(u_xlat9.x, 0.0), 1.0);
#else
    u_xlat9.x = clamp(u_xlat9.x, 0.0, 1.0);
#endif
    u_xlat9.x = u_xlat9.x * u_xlat18;
    u_xlat9.x = u_xlat9.x * _Opacity;
    u_xlat9.x = u_xlat1 * u_xlat9.x;
    u_xlat4.w = u_xlat10.x * u_xlat9.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.w = min(max(u_xlat4.w, 0.0), 1.0);
#else
    u_xlat4.w = clamp(u_xlat4.w, 0.0, 1.0);
#endif
    u_xlat9.xyz = u_xlat2.xyz * _DayColor.xyz;
    u_xlat0.xyz = u_xlat9.xyz * u_xlat0.xxx + u_xlat16_3.xyz;
    u_xlat27 = (-u_xlat28) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
    u_xlat27 = u_xlat27 * u_xlat10.x;
    u_xlat0.xyz = vec3(u_xlat27) * _FoamColor.xyz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * _ES_MainLightColor.xyz;
    u_xlat16_27 = max(_LightColor0.w, 1.0);
    u_xlat4.xyz = vec3(u_xlat16_27) * u_xlat0.xyz;
    SV_Target0 = u_xlat4;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "HALF_RESOLUTION_PARTICLE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
uniform 	vec4 hlslcc_mtx4x4_mhyJitteredVP[4];
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec4 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
float u_xlat14;
float u_xlat21;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD5.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat0.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position = u_xlat0;
    vs_TEXCOORD2.zw = u_xlat0.zw;
    vs_COLOR0 = in_COLOR0;
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat14 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat14 = inversesqrt(u_xlat14);
    u_xlat2.xyz = vec3(u_xlat14) * u_xlat2.xyz;
    u_xlat16_3.x = u_xlat2.y * u_xlat2.y;
    u_xlat16_3.x = u_xlat2.x * u_xlat2.x + (-u_xlat16_3.x);
    u_xlat16_4 = u_xlat2.yzzx * u_xlat2.xyzz;
    u_xlat16_5.x = dot(unity_SHBr, u_xlat16_4);
    u_xlat16_5.y = dot(unity_SHBg, u_xlat16_4);
    u_xlat16_5.z = dot(unity_SHBb, u_xlat16_4);
    u_xlat16_3.xyz = unity_SHC.xyz * u_xlat16_3.xxx + u_xlat16_5.xyz;
    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat2.w = 1.0;
    u_xlat16_4.x = dot(unity_SHAr, u_xlat2);
    u_xlat16_4.y = dot(unity_SHAg, u_xlat2);
    u_xlat16_4.z = dot(unity_SHAb, u_xlat2);
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
    vs_TEXCOORD1.xyz = u_xlat16_3.xyz;
    vs_TEXCOORD1.w = 1.0;
    u_xlat6.x = float(0.5);
    u_xlat6.z = float(0.5);
    u_xlat6.y = _ProjectionParams.x;
    u_xlat0.xyz = u_xlat0.xyw * u_xlat6.xyz;
    u_xlat0.w = u_xlat0.y * 0.5;
    vs_TEXCOORD2.xy = u_xlat0.zz + u_xlat0.xw;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_mhyJitteredVP[1];
    u_xlat0 = hlslcc_mtx4x4_mhyJitteredVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_mhyJitteredVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_mhyJitteredVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat1.xyz = vec3(u_xlat6.z * u_xlat0.x, u_xlat6.y * u_xlat0.y, u_xlat6.z * u_xlat0.w);
    vs_TEXCOORD3.zw = u_xlat0.zw;
    u_xlat1.w = u_xlat1.y * 0.5;
    vs_TEXCOORD3.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat0.x = dot(hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, hlslcc_mtx4x4unity_ObjectToWorld[0].xyz);
    vs_TEXCOORD4.z = sqrt(u_xlat0.x);
    u_xlat0.x = dot(hlslcc_mtx4x4unity_ObjectToWorld[1].xyz, hlslcc_mtx4x4unity_ObjectToWorld[1].xyz);
    vs_TEXCOORD4.w = sqrt(u_xlat0.x);
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD5.w = 0.0;
    u_xlat0.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat0.xyz;
    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    vs_TEXCOORD6.xyz = u_xlat0.xyz;
    vs_TEXCOORD6.w = 0.0;
    vs_TEXCOORD7.xyz = u_xlat2.xyz;
    vs_TEXCOORD7.w = 0.0;
    u_xlat1.xyz = u_xlat0.yzx * u_xlat2.zxy;
    u_xlat0.xyz = u_xlat2.yzx * u_xlat0.zxy + (-u_xlat1.xyz);
    u_xlat21 = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD8.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    vs_TEXCOORD8.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _LightColor0;
uniform 	float _AlphaRange;
uniform 	float _AlphaOffset;
uniform 	float _Opacity;
uniform 	mediump float _BottomAlphaToggle;
uniform 	float _AlphaBottomRange;
uniform 	float _AlphaBottomOffset;
uniform 	vec4 _WaterfallTex01_ST;
uniform 	mediump vec4 _FoamUVCoord01;
uniform 	mediump vec4 _FoamUVCoord02;
uniform 	float _FoamRange;
uniform 	float _FoamOffset;
uniform 	vec4 _DayColor;
uniform 	vec4 _BottomColor;
uniform 	vec4 _TopColor;
uniform 	float _ColorGradientRange;
uniform 	float _ColorGradientOffset;
uniform 	vec4 _ReflectionColor_Dark;
uniform 	vec4 _ReflectionColor_Light;
uniform 	float _Normal01_U_Speed;
uniform 	vec4 _Normal01_ST;
uniform 	float _Normal01_VSpeed;
uniform 	float _Normal02_U_Speed;
uniform 	vec4 _Normal02_ST;
uniform 	float _Normal02_V_Speed;
uniform 	vec4 _DistortionIntensity;
uniform 	float _ReflectionBrightness;
uniform 	float _ReflectionIntensity;
uniform 	float _WaterFall01_Speed;
uniform 	float _Waterfall02_Speed;
uniform 	mediump vec4 _WaterfallPatternColor;
uniform 	float _Waterfall01Brightness;
uniform 	float _Waterfall02Brightness;
uniform 	float _SprayRange;
uniform 	float _SprayOffset;
uniform 	float _ShadowStrength;
uniform 	vec4 _WaterfallSpecTex_ST;
uniform 	float _Detail01_U_Speed;
uniform 	vec4 _NoiseTex_ST;
uniform 	float _Detail01_V_Speed;
uniform 	float _NoiselDistortionValue;
uniform 	mediump vec4 _WaterfallSpecColor;
uniform 	mediump vec4 _FoamColor;
uniform 	vec3 _ES_MainLightColor;
uniform lowp sampler2D _WaterfallTex01;
uniform lowp sampler2D _Normal01;
uniform lowp sampler2D _Normal02;
uniform lowp samplerCube _Reflection;
uniform lowp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _WaterfallSpecTex;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
in highp vec4 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
bvec2 u_xlatb0;
vec4 u_xlat1;
lowp float u_xlat10_1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
vec4 u_xlat3;
vec3 u_xlat4;
lowp vec3 u_xlat10_4;
vec3 u_xlat5;
vec3 u_xlat6;
mediump vec3 u_xlat16_7;
float u_xlat8;
float u_xlat9;
vec3 u_xlat10;
vec2 u_xlat16;
mediump float u_xlat16_16;
lowp float u_xlat10_16;
bool u_xlatb16;
float u_xlat18;
float u_xlat24;
mediump float u_xlat16_24;
lowp float u_xlat10_24;
float u_xlat25;
lowp float u_xlat10_25;
float u_xlat27;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.x = vs_TEXCOORD4.y * _AlphaRange + _AlphaOffset;
    u_xlat8 = vs_TEXCOORD4.y * _AlphaBottomRange + _AlphaBottomOffset;
#ifdef UNITY_ADRENO_ES3
    u_xlat8 = min(max(u_xlat8, 0.0), 1.0);
#else
    u_xlat8 = clamp(u_xlat8, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(_BottomAlphaToggle==1.0);
#else
    u_xlatb16 = _BottomAlphaToggle==1.0;
#endif
    u_xlat8 = (u_xlatb16) ? u_xlat8 : 1.0;
    u_xlat16.xy = vs_TEXCOORD4.xy * _WaterfallTex01_ST.xy + _WaterfallTex01_ST.zw;
    u_xlat1.xy = vec2(u_xlat16.x * vs_TEXCOORD4.z, u_xlat16.y * vs_TEXCOORD4.w);
    u_xlat16.xy = vec2(_Time.y * _FoamUVCoord01.z, _Time.y * _FoamUVCoord01.w);
    u_xlat16.xy = u_xlat1.xy * _FoamUVCoord01.xy + u_xlat16.xy;
    u_xlat2.xy = vec2(_Time.y * _FoamUVCoord02.z, _Time.y * _FoamUVCoord02.w);
    u_xlat2.xy = u_xlat1.xy * _FoamUVCoord02.xy + u_xlat2.xy;
    u_xlat18 = vs_TEXCOORD4.y * _FoamRange + _FoamOffset;
    u_xlat10_16 = texture(_WaterfallTex01, u_xlat16.xy).x;
    u_xlat10_24 = texture(_WaterfallTex01, u_xlat2.xy).y;
    u_xlat16_16 = u_xlat10_24 + u_xlat10_16;
    u_xlat16.x = u_xlat18 + u_xlat16_16;
#ifdef UNITY_ADRENO_ES3
    u_xlat16.x = min(max(u_xlat16.x, 0.0), 1.0);
#else
    u_xlat16.x = clamp(u_xlat16.x, 0.0, 1.0);
#endif
    u_xlat24 = vs_TEXCOORD4.y * _ColorGradientRange + _ColorGradientOffset;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat2.xyw = (-_BottomColor.xyz) + _TopColor.xyz;
    u_xlat2.xyw = vec3(u_xlat24) * u_xlat2.xyw + _BottomColor.xyz;
    u_xlat3.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat24 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat3.xyz = vec3(u_xlat24) * u_xlat3.xyz;
    u_xlat4.xy = vs_TEXCOORD4.xy * _Normal01_ST.xy + _Normal01_ST.zw;
    u_xlat24 = _Time.y * _Normal01_VSpeed;
    u_xlat27 = u_xlat4.x * vs_TEXCOORD4.z;
    u_xlat5.x = _Time.y * _Normal01_U_Speed + u_xlat27;
    u_xlat5.y = u_xlat4.y * vs_TEXCOORD4.w + u_xlat24;
    u_xlat4.xy = vs_TEXCOORD4.xy * _Normal02_ST.xy + _Normal02_ST.zw;
    u_xlat4.xy = vec2(u_xlat4.x * vs_TEXCOORD4.z, u_xlat4.y * vs_TEXCOORD4.w);
    u_xlat6.x = _Time.y * _Normal02_U_Speed + u_xlat4.x;
    u_xlat6.y = _Time.y * _Normal02_V_Speed + u_xlat4.y;
    u_xlat10_4.xyz = texture(_Normal01, u_xlat5.xy).xyz;
    u_xlat16_7.xyz = u_xlat10_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat10_4.xyz = texture(_Normal02, u_xlat6.xy).xyz;
    u_xlat16_7.xyz = u_xlat10_4.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_7.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat4.xyz = u_xlat16_7.xyz * _DistortionIntensity.xyz;
    u_xlat5.x = vs_TEXCOORD6.x;
    u_xlat5.y = vs_TEXCOORD8.x;
    u_xlat5.z = vs_TEXCOORD7.x;
    u_xlat5.x = dot(u_xlat5.xyz, u_xlat4.xyz);
    u_xlat6.x = vs_TEXCOORD6.y;
    u_xlat6.y = vs_TEXCOORD8.y;
    u_xlat6.z = vs_TEXCOORD7.y;
    u_xlat5.y = dot(u_xlat6.xyz, u_xlat4.xyz);
    u_xlat6.x = vs_TEXCOORD6.z;
    u_xlat6.y = vs_TEXCOORD8.z;
    u_xlat6.z = vs_TEXCOORD7.z;
    u_xlat5.z = dot(u_xlat6.xyz, u_xlat4.xyz);
    u_xlat24 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat4.xyz = vec3(u_xlat24) * u_xlat5.xyz;
    u_xlat24 = dot((-u_xlat3.xyz), u_xlat4.xyz);
    u_xlat24 = u_xlat24 + u_xlat24;
    u_xlat3.xyz = u_xlat4.xyz * (-vec3(u_xlat24)) + (-u_xlat3.xyz);
    u_xlat10_24 = texture(_Reflection, u_xlat3.xyz).x;
    u_xlat3.xyz = (-_ReflectionColor_Dark.xyz) + _ReflectionColor_Light.xyz;
    u_xlat3.xyz = vec3(u_xlat10_24) * u_xlat3.xyz + _ReflectionColor_Dark.xyz;
    u_xlat4.xyz = u_xlat2.xyw * vec3(0.200000003, 0.200000003, 0.200000003);
    u_xlat2.xyw = u_xlat2.xyw * u_xlat3.xyz;
    u_xlat2.xyw = u_xlat2.xyw * vec3(_ReflectionBrightness) + (-u_xlat4.xyz);
    u_xlat2.xyw = vec3(vec3(_ReflectionIntensity, _ReflectionIntensity, _ReflectionIntensity)) * u_xlat2.xyw + u_xlat4.xyz;
    u_xlat1.zw = _Time.yy * vec2(_WaterFall01_Speed, _Waterfall02_Speed) + u_xlat1.yy;
    u_xlat10_24 = texture(_WaterfallTex01, u_xlat1.xz).x;
    u_xlat10_1 = texture(_WaterfallTex01, u_xlat1.xw).y;
    u_xlat16_7.x = (-u_xlat10_24) + u_xlat10_1;
    u_xlat16_7.x = u_xlat10_1 * u_xlat16_7.x + u_xlat10_24;
    u_xlat9 = u_xlat10_1 * _Waterfall02Brightness;
    u_xlat24 = u_xlat10_24 * _Waterfall01Brightness;
    u_xlat1.x = u_xlat10_1 * _Waterfall02Brightness + (-u_xlat24);
    u_xlat24 = u_xlat9 * u_xlat1.x + u_xlat24;
    u_xlat1.x = vs_TEXCOORD4.y * _SprayRange + _SprayOffset;
    u_xlat1.x = (-u_xlat1.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat24 = u_xlat24 * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat16_7.xxx * _WaterfallPatternColor.xyz + (-u_xlat2.xyw);
    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz + u_xlat2.xyw;
    u_xlat2.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat10_24 = texture(_ShadowMapTexture, u_xlat2.xy).x;
    u_xlat25 = (-_ShadowStrength) + 1.0;
    u_xlat24 = u_xlat10_24 * u_xlat25 + _ShadowStrength;
    u_xlat2.xy = vs_TEXCOORD4.xy * _WaterfallSpecTex_ST.xy + _WaterfallSpecTex_ST.zw;
    u_xlat16_7.x = vs_TEXCOORD4.w * 0.5;
    u_xlat16_7.x = vs_TEXCOORD4.w * u_xlat2.y + (-u_xlat16_7.x);
    u_xlat10.xz = vs_TEXCOORD4.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat3.x = _Time.y * _Detail01_U_Speed + u_xlat10.x;
    u_xlat3.y = _Time.y * _Detail01_V_Speed + u_xlat10.z;
    u_xlat10_25 = texture(_NoiseTex, u_xlat3.xy).x;
    u_xlat2.x = u_xlat10_25 * _NoiselDistortionValue + u_xlat2.x;
    u_xlat2.y = u_xlat10_25 * _NoiselDistortionValue + u_xlat16_7.x;
    u_xlat10_25 = texture(_WaterfallSpecTex, u_xlat2.xy).x;
    u_xlat16_2.xyw = vec3(u_xlat10_25) * _WaterfallSpecColor.xyz;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x * _Opacity;
    u_xlat0.x = u_xlat8 * u_xlat0.x;
    u_xlat3.w = u_xlat16.x * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat3.w = min(max(u_xlat3.w, 0.0), 1.0);
#else
    u_xlat3.w = clamp(u_xlat3.w, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat1.xyz * _DayColor.xyz;
    u_xlat0.xyw = u_xlat1.xyz * vec3(u_xlat24) + u_xlat16_2.xyw;
    u_xlat1.x = (-u_xlat18) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat16.x = u_xlat16.x * u_xlat1.x;
    u_xlat0.xyz = u_xlat16.xxx * _FoamColor.xyz + u_xlat0.xyw;
    u_xlat0.xyz = u_xlat0.xyz * _ES_MainLightColor.xyz;
    u_xlat16_24 = max(_LightColor0.w, 1.0);
    u_xlat3.xyz = vec3(u_xlat16_24) * u_xlat0.xyz;
    SV_Target0 = u_xlat3;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
uniform 	vec4 hlslcc_mtx4x4_mhyJitteredVP[4];
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec4 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
float u_xlat14;
float u_xlat21;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD5.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat0.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position = u_xlat0;
    vs_TEXCOORD2.zw = u_xlat0.zw;
    vs_COLOR0 = in_COLOR0;
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat14 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat14 = inversesqrt(u_xlat14);
    u_xlat2.xyz = vec3(u_xlat14) * u_xlat2.xyz;
    u_xlat16_3.x = u_xlat2.y * u_xlat2.y;
    u_xlat16_3.x = u_xlat2.x * u_xlat2.x + (-u_xlat16_3.x);
    u_xlat16_4 = u_xlat2.yzzx * u_xlat2.xyzz;
    u_xlat16_5.x = dot(unity_SHBr, u_xlat16_4);
    u_xlat16_5.y = dot(unity_SHBg, u_xlat16_4);
    u_xlat16_5.z = dot(unity_SHBb, u_xlat16_4);
    u_xlat16_3.xyz = unity_SHC.xyz * u_xlat16_3.xxx + u_xlat16_5.xyz;
    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat2.w = 1.0;
    u_xlat16_4.x = dot(unity_SHAr, u_xlat2);
    u_xlat16_4.y = dot(unity_SHAg, u_xlat2);
    u_xlat16_4.z = dot(unity_SHAb, u_xlat2);
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
    vs_TEXCOORD1.xyz = u_xlat16_3.xyz;
    vs_TEXCOORD1.w = 1.0;
    u_xlat6.x = float(0.5);
    u_xlat6.z = float(0.5);
    u_xlat6.y = _ProjectionParams.x;
    u_xlat0.xyz = u_xlat0.xyw * u_xlat6.xyz;
    u_xlat0.w = u_xlat0.y * 0.5;
    vs_TEXCOORD2.xy = u_xlat0.zz + u_xlat0.xw;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_mhyJitteredVP[1];
    u_xlat0 = hlslcc_mtx4x4_mhyJitteredVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_mhyJitteredVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_mhyJitteredVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat1.xyz = vec3(u_xlat6.z * u_xlat0.x, u_xlat6.y * u_xlat0.y, u_xlat6.z * u_xlat0.w);
    vs_TEXCOORD3.zw = u_xlat0.zw;
    u_xlat1.w = u_xlat1.y * 0.5;
    vs_TEXCOORD3.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat0.x = dot(hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, hlslcc_mtx4x4unity_ObjectToWorld[0].xyz);
    vs_TEXCOORD4.z = sqrt(u_xlat0.x);
    u_xlat0.x = dot(hlslcc_mtx4x4unity_ObjectToWorld[1].xyz, hlslcc_mtx4x4unity_ObjectToWorld[1].xyz);
    vs_TEXCOORD4.w = sqrt(u_xlat0.x);
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD5.w = 0.0;
    u_xlat0.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat0.xyz;
    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    vs_TEXCOORD6.xyz = u_xlat0.xyz;
    vs_TEXCOORD6.w = 0.0;
    vs_TEXCOORD7.xyz = u_xlat2.xyz;
    vs_TEXCOORD7.w = 0.0;
    u_xlat1.xyz = u_xlat0.yzx * u_xlat2.zxy;
    u_xlat0.xyz = u_xlat2.yzx * u_xlat0.zxy + (-u_xlat1.xyz);
    u_xlat21 = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD8.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    vs_TEXCOORD8.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _LightColor0;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	float _AlphaRange;
uniform 	float _AlphaOffset;
uniform 	float _Opacity;
uniform 	mediump float _BottomAlphaToggle;
uniform 	float _AlphaBottomRange;
uniform 	float _AlphaBottomOffset;
uniform 	vec4 _WaterfallTex01_ST;
uniform 	mediump vec4 _FoamUVCoord01;
uniform 	mediump vec4 _FoamUVCoord02;
uniform 	float _FoamRange;
uniform 	float _FoamOffset;
uniform 	vec4 _DayColor;
uniform 	vec4 _BottomColor;
uniform 	vec4 _TopColor;
uniform 	float _ColorGradientRange;
uniform 	float _ColorGradientOffset;
uniform 	vec4 _ReflectionColor_Dark;
uniform 	vec4 _ReflectionColor_Light;
uniform 	float _Normal01_U_Speed;
uniform 	vec4 _Normal01_ST;
uniform 	float _Normal01_VSpeed;
uniform 	float _Normal02_U_Speed;
uniform 	vec4 _Normal02_ST;
uniform 	float _Normal02_V_Speed;
uniform 	vec4 _DistortionIntensity;
uniform 	float _ReflectionBrightness;
uniform 	float _ReflectionIntensity;
uniform 	float _WaterFall01_Speed;
uniform 	float _Waterfall02_Speed;
uniform 	mediump vec4 _WaterfallPatternColor;
uniform 	float _Waterfall01Brightness;
uniform 	float _Waterfall02Brightness;
uniform 	float _SprayRange;
uniform 	float _SprayOffset;
uniform 	float _ShadowStrength;
uniform 	vec4 _WaterfallSpecTex_ST;
uniform 	float _Detail01_U_Speed;
uniform 	vec4 _NoiseTex_ST;
uniform 	float _Detail01_V_Speed;
uniform 	float _NoiselDistortionValue;
uniform 	mediump vec4 _WaterfallSpecColor;
uniform 	mediump vec4 _FoamColor;
uniform 	vec3 _ES_MainLightColor;
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _WaterfallTex01;
uniform lowp sampler2D _Normal01;
uniform lowp sampler2D _Normal02;
uniform lowp samplerCube _Reflection;
uniform lowp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _WaterfallSpecTex;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
in highp vec4 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
lowp float u_xlat10_0;
bvec2 u_xlatb0;
float u_xlat1;
vec4 u_xlat2;
lowp float u_xlat10_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
vec4 u_xlat4;
vec3 u_xlat5;
lowp vec3 u_xlat10_5;
vec3 u_xlat6;
vec3 u_xlat7;
mediump vec3 u_xlat16_8;
vec3 u_xlat9;
lowp float u_xlat10_9;
vec2 u_xlat10;
mediump float u_xlat16_10;
lowp float u_xlat10_10;
bool u_xlatb10;
float u_xlat11;
vec2 u_xlat12;
float u_xlat18;
float u_xlat19;
lowp float u_xlat10_19;
float u_xlat27;
mediump float u_xlat16_27;
float u_xlat28;
float u_xlat30;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat18 = texture(_CameraDepthTextureScaled, u_xlat0.xy).x;
    u_xlat18 = u_xlat18 * _ProjectionParams.z + (-vs_TEXCOORD3.w);
    u_xlat27 = u_xlat18 * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
    u_xlat18 = u_xlat18 / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat1 = (-u_xlat27) + 1.0;
    u_xlat18 = u_xlat18 * u_xlat1 + u_xlat27;
    u_xlat27 = vs_TEXCOORD4.y * _AlphaRange + _AlphaOffset;
    u_xlat1 = vs_TEXCOORD4.y * _AlphaBottomRange + _AlphaBottomOffset;
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(_BottomAlphaToggle==1.0);
#else
    u_xlatb10 = _BottomAlphaToggle==1.0;
#endif
    u_xlat1 = (u_xlatb10) ? u_xlat1 : 1.0;
    u_xlat10.xy = vs_TEXCOORD4.xy * _WaterfallTex01_ST.xy + _WaterfallTex01_ST.zw;
    u_xlat2.xy = vec2(u_xlat10.x * vs_TEXCOORD4.z, u_xlat10.y * vs_TEXCOORD4.w);
    u_xlat10.xy = vec2(_Time.y * _FoamUVCoord01.z, _Time.y * _FoamUVCoord01.w);
    u_xlat10.xy = u_xlat2.xy * _FoamUVCoord01.xy + u_xlat10.xy;
    u_xlat3.xy = vec2(_Time.y * _FoamUVCoord02.z, _Time.y * _FoamUVCoord02.w);
    u_xlat3.xy = u_xlat2.xy * _FoamUVCoord02.xy + u_xlat3.xy;
    u_xlat28 = vs_TEXCOORD4.y * _FoamRange + _FoamOffset;
    u_xlat10_10 = texture(_WaterfallTex01, u_xlat10.xy).x;
    u_xlat10_19 = texture(_WaterfallTex01, u_xlat3.xy).y;
    u_xlat16_10 = u_xlat10_19 + u_xlat10_10;
    u_xlat10.x = u_xlat28 + u_xlat16_10;
#ifdef UNITY_ADRENO_ES3
    u_xlat10.x = min(max(u_xlat10.x, 0.0), 1.0);
#else
    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
#endif
    u_xlat19 = vs_TEXCOORD4.y * _ColorGradientRange + _ColorGradientOffset;
#ifdef UNITY_ADRENO_ES3
    u_xlat19 = min(max(u_xlat19, 0.0), 1.0);
#else
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
#endif
    u_xlat3.xyz = (-_BottomColor.xyz) + _TopColor.xyz;
    u_xlat3.xyz = vec3(u_xlat19) * u_xlat3.xyz + _BottomColor.xyz;
    u_xlat4.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat19 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat19 = inversesqrt(u_xlat19);
    u_xlat4.xyz = vec3(u_xlat19) * u_xlat4.xyz;
    u_xlat5.xy = vs_TEXCOORD4.xy * _Normal01_ST.xy + _Normal01_ST.zw;
    u_xlat19 = _Time.y * _Normal01_VSpeed;
    u_xlat30 = u_xlat5.x * vs_TEXCOORD4.z;
    u_xlat6.x = _Time.y * _Normal01_U_Speed + u_xlat30;
    u_xlat6.y = u_xlat5.y * vs_TEXCOORD4.w + u_xlat19;
    u_xlat5.xy = vs_TEXCOORD4.xy * _Normal02_ST.xy + _Normal02_ST.zw;
    u_xlat5.xy = vec2(u_xlat5.x * vs_TEXCOORD4.z, u_xlat5.y * vs_TEXCOORD4.w);
    u_xlat7.x = _Time.y * _Normal02_U_Speed + u_xlat5.x;
    u_xlat7.y = _Time.y * _Normal02_V_Speed + u_xlat5.y;
    u_xlat10_5.xyz = texture(_Normal01, u_xlat6.xy).xyz;
    u_xlat16_8.xyz = u_xlat10_5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat10_5.xyz = texture(_Normal02, u_xlat7.xy).xyz;
    u_xlat16_8.xyz = u_xlat10_5.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_8.xyz;
    u_xlat16_8.xyz = u_xlat16_8.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat5.xyz = u_xlat16_8.xyz * _DistortionIntensity.xyz;
    u_xlat6.x = vs_TEXCOORD6.x;
    u_xlat6.y = vs_TEXCOORD8.x;
    u_xlat6.z = vs_TEXCOORD7.x;
    u_xlat6.x = dot(u_xlat6.xyz, u_xlat5.xyz);
    u_xlat7.x = vs_TEXCOORD6.y;
    u_xlat7.y = vs_TEXCOORD8.y;
    u_xlat7.z = vs_TEXCOORD7.y;
    u_xlat6.y = dot(u_xlat7.xyz, u_xlat5.xyz);
    u_xlat7.x = vs_TEXCOORD6.z;
    u_xlat7.y = vs_TEXCOORD8.z;
    u_xlat7.z = vs_TEXCOORD7.z;
    u_xlat6.z = dot(u_xlat7.xyz, u_xlat5.xyz);
    u_xlat19 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat19 = inversesqrt(u_xlat19);
    u_xlat5.xyz = vec3(u_xlat19) * u_xlat6.xyz;
    u_xlat19 = dot((-u_xlat4.xyz), u_xlat5.xyz);
    u_xlat19 = u_xlat19 + u_xlat19;
    u_xlat4.xyz = u_xlat5.xyz * (-vec3(u_xlat19)) + (-u_xlat4.xyz);
    u_xlat10_19 = texture(_Reflection, u_xlat4.xyz).x;
    u_xlat4.xyz = (-_ReflectionColor_Dark.xyz) + _ReflectionColor_Light.xyz;
    u_xlat4.xyz = vec3(u_xlat10_19) * u_xlat4.xyz + _ReflectionColor_Dark.xyz;
    u_xlat5.xyz = u_xlat3.xyz * vec3(0.200000003, 0.200000003, 0.200000003);
    u_xlat3.xyz = u_xlat3.xyz * u_xlat4.xyz;
    u_xlat3.xyz = u_xlat3.xyz * vec3(_ReflectionBrightness) + (-u_xlat5.xyz);
    u_xlat3.xyz = vec3(vec3(_ReflectionIntensity, _ReflectionIntensity, _ReflectionIntensity)) * u_xlat3.xyz + u_xlat5.xyz;
    u_xlat2.zw = _Time.yy * vec2(_WaterFall01_Speed, _Waterfall02_Speed) + u_xlat2.yy;
    u_xlat10_19 = texture(_WaterfallTex01, u_xlat2.xz).x;
    u_xlat10_2 = texture(_WaterfallTex01, u_xlat2.xw).y;
    u_xlat16_8.x = (-u_xlat10_19) + u_xlat10_2;
    u_xlat16_8.x = u_xlat10_2 * u_xlat16_8.x + u_xlat10_19;
    u_xlat11 = u_xlat10_2 * _Waterfall02Brightness;
    u_xlat19 = u_xlat10_19 * _Waterfall01Brightness;
    u_xlat2.x = u_xlat10_2 * _Waterfall02Brightness + (-u_xlat19);
    u_xlat19 = u_xlat11 * u_xlat2.x + u_xlat19;
    u_xlat2.x = vs_TEXCOORD4.y * _SprayRange + _SprayOffset;
    u_xlat2.x = (-u_xlat2.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat19 = u_xlat19 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat19 = min(max(u_xlat19, 0.0), 1.0);
#else
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
#endif
    u_xlat2.xyz = u_xlat16_8.xxx * _WaterfallPatternColor.xyz + (-u_xlat3.xyz);
    u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz + u_xlat3.xyz;
    u_xlat10_0 = texture(_ShadowMapTexture, u_xlat0.xy).x;
    u_xlat9.x = (-_ShadowStrength) + 1.0;
    u_xlat0.x = u_xlat10_0 * u_xlat9.x + _ShadowStrength;
    u_xlat3.xy = vs_TEXCOORD4.xy * _WaterfallSpecTex_ST.xy + _WaterfallSpecTex_ST.zw;
    u_xlat16_8.x = vs_TEXCOORD4.w * 0.5;
    u_xlat16_8.x = vs_TEXCOORD4.w * u_xlat3.y + (-u_xlat16_8.x);
    u_xlat12.xy = vs_TEXCOORD4.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat4.x = _Time.y * _Detail01_U_Speed + u_xlat12.x;
    u_xlat4.y = _Time.y * _Detail01_V_Speed + u_xlat12.y;
    u_xlat10_9 = texture(_NoiseTex, u_xlat4.xy).x;
    u_xlat3.x = u_xlat10_9 * _NoiselDistortionValue + u_xlat3.x;
    u_xlat3.y = u_xlat10_9 * _NoiselDistortionValue + u_xlat16_8.x;
    u_xlat10_9 = texture(_WaterfallSpecTex, u_xlat3.xy).x;
    u_xlat16_3.xyz = vec3(u_xlat10_9) * _WaterfallSpecColor.xyz;
    u_xlat9.x = (-u_xlat27) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat9.x = min(max(u_xlat9.x, 0.0), 1.0);
#else
    u_xlat9.x = clamp(u_xlat9.x, 0.0, 1.0);
#endif
    u_xlat9.x = u_xlat9.x * u_xlat18;
    u_xlat9.x = u_xlat9.x * _Opacity;
    u_xlat9.x = u_xlat1 * u_xlat9.x;
    u_xlat4.w = u_xlat10.x * u_xlat9.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.w = min(max(u_xlat4.w, 0.0), 1.0);
#else
    u_xlat4.w = clamp(u_xlat4.w, 0.0, 1.0);
#endif
    u_xlat9.xyz = u_xlat2.xyz * _DayColor.xyz;
    u_xlat0.xyz = u_xlat9.xyz * u_xlat0.xxx + u_xlat16_3.xyz;
    u_xlat27 = (-u_xlat28) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
    u_xlat27 = u_xlat27 * u_xlat10.x;
    u_xlat0.xyz = vec3(u_xlat27) * _FoamColor.xyz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * _ES_MainLightColor.xyz;
    u_xlat16_27 = max(_LightColor0.w, 1.0);
    u_xlat4.xyz = vec3(u_xlat16_27) * u_xlat0.xyz;
    SV_Target0 = u_xlat4;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
uniform 	vec4 hlslcc_mtx4x4_mhyJitteredVP[4];
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
vec3 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump vec3 u_xlat16_4;
mediump vec4 u_xlat16_5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
vec3 u_xlat8;
float u_xlat24;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    vs_TEXCOORD5.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    u_xlat1.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position = u_xlat1;
    vs_TEXCOORD2.zw = u_xlat1.zw;
    vs_COLOR0 = in_COLOR0;
    u_xlat3.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat3.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat3.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat8.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat3.xyz = u_xlat8.xxx * u_xlat3.xyz;
    u_xlat16_4.x = u_xlat3.y * u_xlat3.y;
    u_xlat16_4.x = u_xlat3.x * u_xlat3.x + (-u_xlat16_4.x);
    u_xlat16_5 = u_xlat3.yzzx * u_xlat3.xyzz;
    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_5);
    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_5);
    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_5);
    u_xlat16_4.xyz = unity_SHC.xyz * u_xlat16_4.xxx + u_xlat16_6.xyz;
    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat3.w = 1.0;
    u_xlat16_5.x = dot(unity_SHAr, u_xlat3);
    u_xlat16_5.y = dot(unity_SHAg, u_xlat3);
    u_xlat16_5.z = dot(unity_SHAb, u_xlat3);
    u_xlat16_4.xyz = u_xlat16_4.xyz + u_xlat16_5.xyz;
    vs_TEXCOORD1.xyz = u_xlat16_4.xyz;
    vs_TEXCOORD1.w = 1.0;
    u_xlat7.x = float(0.5);
    u_xlat7.z = float(0.5);
    u_xlat7.y = _ProjectionParams.x;
    u_xlat1.xyz = u_xlat1.xyw * u_xlat7.xyz;
    u_xlat1.w = u_xlat1.y * 0.5;
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4_mhyJitteredVP[1];
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[3] * u_xlat2.wwww + u_xlat1;
    u_xlat2.xyz = vec3(u_xlat7.z * u_xlat1.x, u_xlat7.y * u_xlat1.y, u_xlat7.z * u_xlat1.w);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    u_xlat2.w = u_xlat2.y * 0.5;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy;
    u_xlat8.x = dot(unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz);
    vs_TEXCOORD4.z = sqrt(u_xlat8.x);
    u_xlat8.x = dot(unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz);
    vs_TEXCOORD4.w = sqrt(u_xlat8.x);
    vs_TEXCOORD5.w = 0.0;
    u_xlat8.xyz = in_TANGENT0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat8.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_TANGENT0.xxx + u_xlat8.xyz;
    u_xlat0.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_TANGENT0.zzz + u_xlat8.xyz;
    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat0.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    vs_TEXCOORD6.xyz = u_xlat0.xyz;
    vs_TEXCOORD6.w = 0.0;
    vs_TEXCOORD7.xyz = u_xlat3.xyz;
    vs_TEXCOORD7.w = 0.0;
    u_xlat1.xyz = u_xlat0.yzx * u_xlat3.zxy;
    u_xlat0.xyz = u_xlat3.yzx * u_xlat0.zxy + (-u_xlat1.xyz);
    u_xlat24 = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD8.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    vs_TEXCOORD8.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _LightColor0;
uniform 	float _AlphaRange;
uniform 	float _AlphaOffset;
uniform 	float _Opacity;
uniform 	mediump float _BottomAlphaToggle;
uniform 	float _AlphaBottomRange;
uniform 	float _AlphaBottomOffset;
uniform 	vec4 _WaterfallTex01_ST;
uniform 	mediump vec4 _FoamUVCoord01;
uniform 	mediump vec4 _FoamUVCoord02;
uniform 	float _FoamRange;
uniform 	float _FoamOffset;
uniform 	vec4 _DayColor;
uniform 	vec4 _BottomColor;
uniform 	vec4 _TopColor;
uniform 	float _ColorGradientRange;
uniform 	float _ColorGradientOffset;
uniform 	vec4 _ReflectionColor_Dark;
uniform 	vec4 _ReflectionColor_Light;
uniform 	float _Normal01_U_Speed;
uniform 	vec4 _Normal01_ST;
uniform 	float _Normal01_VSpeed;
uniform 	float _Normal02_U_Speed;
uniform 	vec4 _Normal02_ST;
uniform 	float _Normal02_V_Speed;
uniform 	vec4 _DistortionIntensity;
uniform 	float _ReflectionBrightness;
uniform 	float _ReflectionIntensity;
uniform 	float _WaterFall01_Speed;
uniform 	float _Waterfall02_Speed;
uniform 	mediump vec4 _WaterfallPatternColor;
uniform 	float _Waterfall01Brightness;
uniform 	float _Waterfall02Brightness;
uniform 	float _SprayRange;
uniform 	float _SprayOffset;
uniform 	float _ShadowStrength;
uniform 	vec4 _WaterfallSpecTex_ST;
uniform 	float _Detail01_U_Speed;
uniform 	vec4 _NoiseTex_ST;
uniform 	float _Detail01_V_Speed;
uniform 	float _NoiselDistortionValue;
uniform 	mediump vec4 _WaterfallSpecColor;
uniform 	mediump vec4 _FoamColor;
uniform 	vec3 _ES_MainLightColor;
uniform lowp sampler2D _WaterfallTex01;
uniform lowp sampler2D _Normal01;
uniform lowp sampler2D _Normal02;
uniform lowp samplerCube _Reflection;
uniform lowp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _WaterfallSpecTex;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
in highp vec4 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
bvec2 u_xlatb0;
vec4 u_xlat1;
lowp float u_xlat10_1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
vec4 u_xlat3;
vec3 u_xlat4;
lowp vec3 u_xlat10_4;
vec3 u_xlat5;
vec3 u_xlat6;
mediump vec3 u_xlat16_7;
float u_xlat8;
float u_xlat9;
vec3 u_xlat10;
vec2 u_xlat16;
mediump float u_xlat16_16;
lowp float u_xlat10_16;
bool u_xlatb16;
float u_xlat18;
float u_xlat24;
mediump float u_xlat16_24;
lowp float u_xlat10_24;
float u_xlat25;
lowp float u_xlat10_25;
float u_xlat27;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.x = vs_TEXCOORD4.y * _AlphaRange + _AlphaOffset;
    u_xlat8 = vs_TEXCOORD4.y * _AlphaBottomRange + _AlphaBottomOffset;
#ifdef UNITY_ADRENO_ES3
    u_xlat8 = min(max(u_xlat8, 0.0), 1.0);
#else
    u_xlat8 = clamp(u_xlat8, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(_BottomAlphaToggle==1.0);
#else
    u_xlatb16 = _BottomAlphaToggle==1.0;
#endif
    u_xlat8 = (u_xlatb16) ? u_xlat8 : 1.0;
    u_xlat16.xy = vs_TEXCOORD4.xy * _WaterfallTex01_ST.xy + _WaterfallTex01_ST.zw;
    u_xlat1.xy = vec2(u_xlat16.x * vs_TEXCOORD4.z, u_xlat16.y * vs_TEXCOORD4.w);
    u_xlat16.xy = vec2(_Time.y * _FoamUVCoord01.z, _Time.y * _FoamUVCoord01.w);
    u_xlat16.xy = u_xlat1.xy * _FoamUVCoord01.xy + u_xlat16.xy;
    u_xlat2.xy = vec2(_Time.y * _FoamUVCoord02.z, _Time.y * _FoamUVCoord02.w);
    u_xlat2.xy = u_xlat1.xy * _FoamUVCoord02.xy + u_xlat2.xy;
    u_xlat18 = vs_TEXCOORD4.y * _FoamRange + _FoamOffset;
    u_xlat10_16 = texture(_WaterfallTex01, u_xlat16.xy).x;
    u_xlat10_24 = texture(_WaterfallTex01, u_xlat2.xy).y;
    u_xlat16_16 = u_xlat10_24 + u_xlat10_16;
    u_xlat16.x = u_xlat18 + u_xlat16_16;
#ifdef UNITY_ADRENO_ES3
    u_xlat16.x = min(max(u_xlat16.x, 0.0), 1.0);
#else
    u_xlat16.x = clamp(u_xlat16.x, 0.0, 1.0);
#endif
    u_xlat24 = vs_TEXCOORD4.y * _ColorGradientRange + _ColorGradientOffset;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat2.xyw = (-_BottomColor.xyz) + _TopColor.xyz;
    u_xlat2.xyw = vec3(u_xlat24) * u_xlat2.xyw + _BottomColor.xyz;
    u_xlat3.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat24 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat3.xyz = vec3(u_xlat24) * u_xlat3.xyz;
    u_xlat4.xy = vs_TEXCOORD4.xy * _Normal01_ST.xy + _Normal01_ST.zw;
    u_xlat24 = _Time.y * _Normal01_VSpeed;
    u_xlat27 = u_xlat4.x * vs_TEXCOORD4.z;
    u_xlat5.x = _Time.y * _Normal01_U_Speed + u_xlat27;
    u_xlat5.y = u_xlat4.y * vs_TEXCOORD4.w + u_xlat24;
    u_xlat4.xy = vs_TEXCOORD4.xy * _Normal02_ST.xy + _Normal02_ST.zw;
    u_xlat4.xy = vec2(u_xlat4.x * vs_TEXCOORD4.z, u_xlat4.y * vs_TEXCOORD4.w);
    u_xlat6.x = _Time.y * _Normal02_U_Speed + u_xlat4.x;
    u_xlat6.y = _Time.y * _Normal02_V_Speed + u_xlat4.y;
    u_xlat10_4.xyz = texture(_Normal01, u_xlat5.xy).xyz;
    u_xlat16_7.xyz = u_xlat10_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat10_4.xyz = texture(_Normal02, u_xlat6.xy).xyz;
    u_xlat16_7.xyz = u_xlat10_4.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_7.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat4.xyz = u_xlat16_7.xyz * _DistortionIntensity.xyz;
    u_xlat5.x = vs_TEXCOORD6.x;
    u_xlat5.y = vs_TEXCOORD8.x;
    u_xlat5.z = vs_TEXCOORD7.x;
    u_xlat5.x = dot(u_xlat5.xyz, u_xlat4.xyz);
    u_xlat6.x = vs_TEXCOORD6.y;
    u_xlat6.y = vs_TEXCOORD8.y;
    u_xlat6.z = vs_TEXCOORD7.y;
    u_xlat5.y = dot(u_xlat6.xyz, u_xlat4.xyz);
    u_xlat6.x = vs_TEXCOORD6.z;
    u_xlat6.y = vs_TEXCOORD8.z;
    u_xlat6.z = vs_TEXCOORD7.z;
    u_xlat5.z = dot(u_xlat6.xyz, u_xlat4.xyz);
    u_xlat24 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat4.xyz = vec3(u_xlat24) * u_xlat5.xyz;
    u_xlat24 = dot((-u_xlat3.xyz), u_xlat4.xyz);
    u_xlat24 = u_xlat24 + u_xlat24;
    u_xlat3.xyz = u_xlat4.xyz * (-vec3(u_xlat24)) + (-u_xlat3.xyz);
    u_xlat10_24 = texture(_Reflection, u_xlat3.xyz).x;
    u_xlat3.xyz = (-_ReflectionColor_Dark.xyz) + _ReflectionColor_Light.xyz;
    u_xlat3.xyz = vec3(u_xlat10_24) * u_xlat3.xyz + _ReflectionColor_Dark.xyz;
    u_xlat4.xyz = u_xlat2.xyw * vec3(0.200000003, 0.200000003, 0.200000003);
    u_xlat2.xyw = u_xlat2.xyw * u_xlat3.xyz;
    u_xlat2.xyw = u_xlat2.xyw * vec3(_ReflectionBrightness) + (-u_xlat4.xyz);
    u_xlat2.xyw = vec3(vec3(_ReflectionIntensity, _ReflectionIntensity, _ReflectionIntensity)) * u_xlat2.xyw + u_xlat4.xyz;
    u_xlat1.zw = _Time.yy * vec2(_WaterFall01_Speed, _Waterfall02_Speed) + u_xlat1.yy;
    u_xlat10_24 = texture(_WaterfallTex01, u_xlat1.xz).x;
    u_xlat10_1 = texture(_WaterfallTex01, u_xlat1.xw).y;
    u_xlat16_7.x = (-u_xlat10_24) + u_xlat10_1;
    u_xlat16_7.x = u_xlat10_1 * u_xlat16_7.x + u_xlat10_24;
    u_xlat9 = u_xlat10_1 * _Waterfall02Brightness;
    u_xlat24 = u_xlat10_24 * _Waterfall01Brightness;
    u_xlat1.x = u_xlat10_1 * _Waterfall02Brightness + (-u_xlat24);
    u_xlat24 = u_xlat9 * u_xlat1.x + u_xlat24;
    u_xlat1.x = vs_TEXCOORD4.y * _SprayRange + _SprayOffset;
    u_xlat1.x = (-u_xlat1.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat24 = u_xlat24 * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat16_7.xxx * _WaterfallPatternColor.xyz + (-u_xlat2.xyw);
    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz + u_xlat2.xyw;
    u_xlat2.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat10_24 = texture(_ShadowMapTexture, u_xlat2.xy).x;
    u_xlat25 = (-_ShadowStrength) + 1.0;
    u_xlat24 = u_xlat10_24 * u_xlat25 + _ShadowStrength;
    u_xlat2.xy = vs_TEXCOORD4.xy * _WaterfallSpecTex_ST.xy + _WaterfallSpecTex_ST.zw;
    u_xlat16_7.x = vs_TEXCOORD4.w * 0.5;
    u_xlat16_7.x = vs_TEXCOORD4.w * u_xlat2.y + (-u_xlat16_7.x);
    u_xlat10.xz = vs_TEXCOORD4.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat3.x = _Time.y * _Detail01_U_Speed + u_xlat10.x;
    u_xlat3.y = _Time.y * _Detail01_V_Speed + u_xlat10.z;
    u_xlat10_25 = texture(_NoiseTex, u_xlat3.xy).x;
    u_xlat2.x = u_xlat10_25 * _NoiselDistortionValue + u_xlat2.x;
    u_xlat2.y = u_xlat10_25 * _NoiselDistortionValue + u_xlat16_7.x;
    u_xlat10_25 = texture(_WaterfallSpecTex, u_xlat2.xy).x;
    u_xlat16_2.xyw = vec3(u_xlat10_25) * _WaterfallSpecColor.xyz;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x * _Opacity;
    u_xlat0.x = u_xlat8 * u_xlat0.x;
    u_xlat3.w = u_xlat16.x * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat3.w = min(max(u_xlat3.w, 0.0), 1.0);
#else
    u_xlat3.w = clamp(u_xlat3.w, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat1.xyz * _DayColor.xyz;
    u_xlat0.xyw = u_xlat1.xyz * vec3(u_xlat24) + u_xlat16_2.xyw;
    u_xlat1.x = (-u_xlat18) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat16.x = u_xlat16.x * u_xlat1.x;
    u_xlat0.xyz = u_xlat16.xxx * _FoamColor.xyz + u_xlat0.xyw;
    u_xlat0.xyz = u_xlat0.xyz * _ES_MainLightColor.xyz;
    u_xlat16_24 = max(_LightColor0.w, 1.0);
    u_xlat3.xyz = vec3(u_xlat16_24) * u_xlat0.xyz;
    SV_Target0 = u_xlat3;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
uniform 	vec4 hlslcc_mtx4x4_mhyJitteredVP[4];
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
vec3 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump vec3 u_xlat16_4;
mediump vec4 u_xlat16_5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
vec3 u_xlat8;
float u_xlat24;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    vs_TEXCOORD5.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    u_xlat1.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position = u_xlat1;
    vs_TEXCOORD2.zw = u_xlat1.zw;
    vs_COLOR0 = in_COLOR0;
    u_xlat3.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat3.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat3.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat8.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat3.xyz = u_xlat8.xxx * u_xlat3.xyz;
    u_xlat16_4.x = u_xlat3.y * u_xlat3.y;
    u_xlat16_4.x = u_xlat3.x * u_xlat3.x + (-u_xlat16_4.x);
    u_xlat16_5 = u_xlat3.yzzx * u_xlat3.xyzz;
    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_5);
    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_5);
    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_5);
    u_xlat16_4.xyz = unity_SHC.xyz * u_xlat16_4.xxx + u_xlat16_6.xyz;
    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat3.w = 1.0;
    u_xlat16_5.x = dot(unity_SHAr, u_xlat3);
    u_xlat16_5.y = dot(unity_SHAg, u_xlat3);
    u_xlat16_5.z = dot(unity_SHAb, u_xlat3);
    u_xlat16_4.xyz = u_xlat16_4.xyz + u_xlat16_5.xyz;
    vs_TEXCOORD1.xyz = u_xlat16_4.xyz;
    vs_TEXCOORD1.w = 1.0;
    u_xlat7.x = float(0.5);
    u_xlat7.z = float(0.5);
    u_xlat7.y = _ProjectionParams.x;
    u_xlat1.xyz = u_xlat1.xyw * u_xlat7.xyz;
    u_xlat1.w = u_xlat1.y * 0.5;
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4_mhyJitteredVP[1];
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[3] * u_xlat2.wwww + u_xlat1;
    u_xlat2.xyz = vec3(u_xlat7.z * u_xlat1.x, u_xlat7.y * u_xlat1.y, u_xlat7.z * u_xlat1.w);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    u_xlat2.w = u_xlat2.y * 0.5;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy;
    u_xlat8.x = dot(unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz);
    vs_TEXCOORD4.z = sqrt(u_xlat8.x);
    u_xlat8.x = dot(unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz);
    vs_TEXCOORD4.w = sqrt(u_xlat8.x);
    vs_TEXCOORD5.w = 0.0;
    u_xlat8.xyz = in_TANGENT0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat8.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_TANGENT0.xxx + u_xlat8.xyz;
    u_xlat0.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_TANGENT0.zzz + u_xlat8.xyz;
    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat0.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    vs_TEXCOORD6.xyz = u_xlat0.xyz;
    vs_TEXCOORD6.w = 0.0;
    vs_TEXCOORD7.xyz = u_xlat3.xyz;
    vs_TEXCOORD7.w = 0.0;
    u_xlat1.xyz = u_xlat0.yzx * u_xlat3.zxy;
    u_xlat0.xyz = u_xlat3.yzx * u_xlat0.zxy + (-u_xlat1.xyz);
    u_xlat24 = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD8.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    vs_TEXCOORD8.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _LightColor0;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	float _AlphaRange;
uniform 	float _AlphaOffset;
uniform 	float _Opacity;
uniform 	mediump float _BottomAlphaToggle;
uniform 	float _AlphaBottomRange;
uniform 	float _AlphaBottomOffset;
uniform 	vec4 _WaterfallTex01_ST;
uniform 	mediump vec4 _FoamUVCoord01;
uniform 	mediump vec4 _FoamUVCoord02;
uniform 	float _FoamRange;
uniform 	float _FoamOffset;
uniform 	vec4 _DayColor;
uniform 	vec4 _BottomColor;
uniform 	vec4 _TopColor;
uniform 	float _ColorGradientRange;
uniform 	float _ColorGradientOffset;
uniform 	vec4 _ReflectionColor_Dark;
uniform 	vec4 _ReflectionColor_Light;
uniform 	float _Normal01_U_Speed;
uniform 	vec4 _Normal01_ST;
uniform 	float _Normal01_VSpeed;
uniform 	float _Normal02_U_Speed;
uniform 	vec4 _Normal02_ST;
uniform 	float _Normal02_V_Speed;
uniform 	vec4 _DistortionIntensity;
uniform 	float _ReflectionBrightness;
uniform 	float _ReflectionIntensity;
uniform 	float _WaterFall01_Speed;
uniform 	float _Waterfall02_Speed;
uniform 	mediump vec4 _WaterfallPatternColor;
uniform 	float _Waterfall01Brightness;
uniform 	float _Waterfall02Brightness;
uniform 	float _SprayRange;
uniform 	float _SprayOffset;
uniform 	float _ShadowStrength;
uniform 	vec4 _WaterfallSpecTex_ST;
uniform 	float _Detail01_U_Speed;
uniform 	vec4 _NoiseTex_ST;
uniform 	float _Detail01_V_Speed;
uniform 	float _NoiselDistortionValue;
uniform 	mediump vec4 _WaterfallSpecColor;
uniform 	mediump vec4 _FoamColor;
uniform 	vec3 _ES_MainLightColor;
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _WaterfallTex01;
uniform lowp sampler2D _Normal01;
uniform lowp sampler2D _Normal02;
uniform lowp samplerCube _Reflection;
uniform lowp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _WaterfallSpecTex;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
in highp vec4 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
lowp float u_xlat10_0;
bvec2 u_xlatb0;
float u_xlat1;
vec4 u_xlat2;
lowp float u_xlat10_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
vec4 u_xlat4;
vec3 u_xlat5;
lowp vec3 u_xlat10_5;
vec3 u_xlat6;
vec3 u_xlat7;
mediump vec3 u_xlat16_8;
vec3 u_xlat9;
lowp float u_xlat10_9;
vec2 u_xlat10;
mediump float u_xlat16_10;
lowp float u_xlat10_10;
bool u_xlatb10;
float u_xlat11;
vec2 u_xlat12;
float u_xlat18;
float u_xlat19;
lowp float u_xlat10_19;
float u_xlat27;
mediump float u_xlat16_27;
float u_xlat28;
float u_xlat30;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat18 = texture(_CameraDepthTextureScaled, u_xlat0.xy).x;
    u_xlat18 = u_xlat18 * _ProjectionParams.z + (-vs_TEXCOORD3.w);
    u_xlat27 = u_xlat18 * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
    u_xlat18 = u_xlat18 / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat1 = (-u_xlat27) + 1.0;
    u_xlat18 = u_xlat18 * u_xlat1 + u_xlat27;
    u_xlat27 = vs_TEXCOORD4.y * _AlphaRange + _AlphaOffset;
    u_xlat1 = vs_TEXCOORD4.y * _AlphaBottomRange + _AlphaBottomOffset;
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(_BottomAlphaToggle==1.0);
#else
    u_xlatb10 = _BottomAlphaToggle==1.0;
#endif
    u_xlat1 = (u_xlatb10) ? u_xlat1 : 1.0;
    u_xlat10.xy = vs_TEXCOORD4.xy * _WaterfallTex01_ST.xy + _WaterfallTex01_ST.zw;
    u_xlat2.xy = vec2(u_xlat10.x * vs_TEXCOORD4.z, u_xlat10.y * vs_TEXCOORD4.w);
    u_xlat10.xy = vec2(_Time.y * _FoamUVCoord01.z, _Time.y * _FoamUVCoord01.w);
    u_xlat10.xy = u_xlat2.xy * _FoamUVCoord01.xy + u_xlat10.xy;
    u_xlat3.xy = vec2(_Time.y * _FoamUVCoord02.z, _Time.y * _FoamUVCoord02.w);
    u_xlat3.xy = u_xlat2.xy * _FoamUVCoord02.xy + u_xlat3.xy;
    u_xlat28 = vs_TEXCOORD4.y * _FoamRange + _FoamOffset;
    u_xlat10_10 = texture(_WaterfallTex01, u_xlat10.xy).x;
    u_xlat10_19 = texture(_WaterfallTex01, u_xlat3.xy).y;
    u_xlat16_10 = u_xlat10_19 + u_xlat10_10;
    u_xlat10.x = u_xlat28 + u_xlat16_10;
#ifdef UNITY_ADRENO_ES3
    u_xlat10.x = min(max(u_xlat10.x, 0.0), 1.0);
#else
    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
#endif
    u_xlat19 = vs_TEXCOORD4.y * _ColorGradientRange + _ColorGradientOffset;
#ifdef UNITY_ADRENO_ES3
    u_xlat19 = min(max(u_xlat19, 0.0), 1.0);
#else
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
#endif
    u_xlat3.xyz = (-_BottomColor.xyz) + _TopColor.xyz;
    u_xlat3.xyz = vec3(u_xlat19) * u_xlat3.xyz + _BottomColor.xyz;
    u_xlat4.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat19 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat19 = inversesqrt(u_xlat19);
    u_xlat4.xyz = vec3(u_xlat19) * u_xlat4.xyz;
    u_xlat5.xy = vs_TEXCOORD4.xy * _Normal01_ST.xy + _Normal01_ST.zw;
    u_xlat19 = _Time.y * _Normal01_VSpeed;
    u_xlat30 = u_xlat5.x * vs_TEXCOORD4.z;
    u_xlat6.x = _Time.y * _Normal01_U_Speed + u_xlat30;
    u_xlat6.y = u_xlat5.y * vs_TEXCOORD4.w + u_xlat19;
    u_xlat5.xy = vs_TEXCOORD4.xy * _Normal02_ST.xy + _Normal02_ST.zw;
    u_xlat5.xy = vec2(u_xlat5.x * vs_TEXCOORD4.z, u_xlat5.y * vs_TEXCOORD4.w);
    u_xlat7.x = _Time.y * _Normal02_U_Speed + u_xlat5.x;
    u_xlat7.y = _Time.y * _Normal02_V_Speed + u_xlat5.y;
    u_xlat10_5.xyz = texture(_Normal01, u_xlat6.xy).xyz;
    u_xlat16_8.xyz = u_xlat10_5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat10_5.xyz = texture(_Normal02, u_xlat7.xy).xyz;
    u_xlat16_8.xyz = u_xlat10_5.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_8.xyz;
    u_xlat16_8.xyz = u_xlat16_8.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat5.xyz = u_xlat16_8.xyz * _DistortionIntensity.xyz;
    u_xlat6.x = vs_TEXCOORD6.x;
    u_xlat6.y = vs_TEXCOORD8.x;
    u_xlat6.z = vs_TEXCOORD7.x;
    u_xlat6.x = dot(u_xlat6.xyz, u_xlat5.xyz);
    u_xlat7.x = vs_TEXCOORD6.y;
    u_xlat7.y = vs_TEXCOORD8.y;
    u_xlat7.z = vs_TEXCOORD7.y;
    u_xlat6.y = dot(u_xlat7.xyz, u_xlat5.xyz);
    u_xlat7.x = vs_TEXCOORD6.z;
    u_xlat7.y = vs_TEXCOORD8.z;
    u_xlat7.z = vs_TEXCOORD7.z;
    u_xlat6.z = dot(u_xlat7.xyz, u_xlat5.xyz);
    u_xlat19 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat19 = inversesqrt(u_xlat19);
    u_xlat5.xyz = vec3(u_xlat19) * u_xlat6.xyz;
    u_xlat19 = dot((-u_xlat4.xyz), u_xlat5.xyz);
    u_xlat19 = u_xlat19 + u_xlat19;
    u_xlat4.xyz = u_xlat5.xyz * (-vec3(u_xlat19)) + (-u_xlat4.xyz);
    u_xlat10_19 = texture(_Reflection, u_xlat4.xyz).x;
    u_xlat4.xyz = (-_ReflectionColor_Dark.xyz) + _ReflectionColor_Light.xyz;
    u_xlat4.xyz = vec3(u_xlat10_19) * u_xlat4.xyz + _ReflectionColor_Dark.xyz;
    u_xlat5.xyz = u_xlat3.xyz * vec3(0.200000003, 0.200000003, 0.200000003);
    u_xlat3.xyz = u_xlat3.xyz * u_xlat4.xyz;
    u_xlat3.xyz = u_xlat3.xyz * vec3(_ReflectionBrightness) + (-u_xlat5.xyz);
    u_xlat3.xyz = vec3(vec3(_ReflectionIntensity, _ReflectionIntensity, _ReflectionIntensity)) * u_xlat3.xyz + u_xlat5.xyz;
    u_xlat2.zw = _Time.yy * vec2(_WaterFall01_Speed, _Waterfall02_Speed) + u_xlat2.yy;
    u_xlat10_19 = texture(_WaterfallTex01, u_xlat2.xz).x;
    u_xlat10_2 = texture(_WaterfallTex01, u_xlat2.xw).y;
    u_xlat16_8.x = (-u_xlat10_19) + u_xlat10_2;
    u_xlat16_8.x = u_xlat10_2 * u_xlat16_8.x + u_xlat10_19;
    u_xlat11 = u_xlat10_2 * _Waterfall02Brightness;
    u_xlat19 = u_xlat10_19 * _Waterfall01Brightness;
    u_xlat2.x = u_xlat10_2 * _Waterfall02Brightness + (-u_xlat19);
    u_xlat19 = u_xlat11 * u_xlat2.x + u_xlat19;
    u_xlat2.x = vs_TEXCOORD4.y * _SprayRange + _SprayOffset;
    u_xlat2.x = (-u_xlat2.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat19 = u_xlat19 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat19 = min(max(u_xlat19, 0.0), 1.0);
#else
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
#endif
    u_xlat2.xyz = u_xlat16_8.xxx * _WaterfallPatternColor.xyz + (-u_xlat3.xyz);
    u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz + u_xlat3.xyz;
    u_xlat10_0 = texture(_ShadowMapTexture, u_xlat0.xy).x;
    u_xlat9.x = (-_ShadowStrength) + 1.0;
    u_xlat0.x = u_xlat10_0 * u_xlat9.x + _ShadowStrength;
    u_xlat3.xy = vs_TEXCOORD4.xy * _WaterfallSpecTex_ST.xy + _WaterfallSpecTex_ST.zw;
    u_xlat16_8.x = vs_TEXCOORD4.w * 0.5;
    u_xlat16_8.x = vs_TEXCOORD4.w * u_xlat3.y + (-u_xlat16_8.x);
    u_xlat12.xy = vs_TEXCOORD4.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat4.x = _Time.y * _Detail01_U_Speed + u_xlat12.x;
    u_xlat4.y = _Time.y * _Detail01_V_Speed + u_xlat12.y;
    u_xlat10_9 = texture(_NoiseTex, u_xlat4.xy).x;
    u_xlat3.x = u_xlat10_9 * _NoiselDistortionValue + u_xlat3.x;
    u_xlat3.y = u_xlat10_9 * _NoiselDistortionValue + u_xlat16_8.x;
    u_xlat10_9 = texture(_WaterfallSpecTex, u_xlat3.xy).x;
    u_xlat16_3.xyz = vec3(u_xlat10_9) * _WaterfallSpecColor.xyz;
    u_xlat9.x = (-u_xlat27) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat9.x = min(max(u_xlat9.x, 0.0), 1.0);
#else
    u_xlat9.x = clamp(u_xlat9.x, 0.0, 1.0);
#endif
    u_xlat9.x = u_xlat9.x * u_xlat18;
    u_xlat9.x = u_xlat9.x * _Opacity;
    u_xlat9.x = u_xlat1 * u_xlat9.x;
    u_xlat4.w = u_xlat10.x * u_xlat9.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.w = min(max(u_xlat4.w, 0.0), 1.0);
#else
    u_xlat4.w = clamp(u_xlat4.w, 0.0, 1.0);
#endif
    u_xlat9.xyz = u_xlat2.xyz * _DayColor.xyz;
    u_xlat0.xyz = u_xlat9.xyz * u_xlat0.xxx + u_xlat16_3.xyz;
    u_xlat27 = (-u_xlat28) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
    u_xlat27 = u_xlat27 * u_xlat10.x;
    u_xlat0.xyz = vec3(u_xlat27) * _FoamColor.xyz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * _ES_MainLightColor.xyz;
    u_xlat16_27 = max(_LightColor0.w, 1.0);
    u_xlat4.xyz = vec3(u_xlat16_27) * u_xlat0.xyz;
    SV_Target0 = u_xlat4;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "MSAA_INTERPOLATION" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
uniform 	vec4 hlslcc_mtx4x4_mhyJitteredVP[4];
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec4 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
float u_xlat14;
float u_xlat21;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD5.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat0.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position = u_xlat0;
    vs_TEXCOORD2.zw = u_xlat0.zw;
    vs_COLOR0 = in_COLOR0;
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat14 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat14 = inversesqrt(u_xlat14);
    u_xlat2.xyz = vec3(u_xlat14) * u_xlat2.xyz;
    u_xlat16_3.x = u_xlat2.y * u_xlat2.y;
    u_xlat16_3.x = u_xlat2.x * u_xlat2.x + (-u_xlat16_3.x);
    u_xlat16_4 = u_xlat2.yzzx * u_xlat2.xyzz;
    u_xlat16_5.x = dot(unity_SHBr, u_xlat16_4);
    u_xlat16_5.y = dot(unity_SHBg, u_xlat16_4);
    u_xlat16_5.z = dot(unity_SHBb, u_xlat16_4);
    u_xlat16_3.xyz = unity_SHC.xyz * u_xlat16_3.xxx + u_xlat16_5.xyz;
    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat2.w = 1.0;
    u_xlat16_4.x = dot(unity_SHAr, u_xlat2);
    u_xlat16_4.y = dot(unity_SHAg, u_xlat2);
    u_xlat16_4.z = dot(unity_SHAb, u_xlat2);
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
    vs_TEXCOORD1.xyz = u_xlat16_3.xyz;
    vs_TEXCOORD1.w = 1.0;
    u_xlat6.x = float(0.5);
    u_xlat6.z = float(0.5);
    u_xlat6.y = _ProjectionParams.x;
    u_xlat0.xyz = u_xlat0.xyw * u_xlat6.xyz;
    u_xlat0.w = u_xlat0.y * 0.5;
    vs_TEXCOORD2.xy = u_xlat0.zz + u_xlat0.xw;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_mhyJitteredVP[1];
    u_xlat0 = hlslcc_mtx4x4_mhyJitteredVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_mhyJitteredVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_mhyJitteredVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat1.xyz = vec3(u_xlat6.z * u_xlat0.x, u_xlat6.y * u_xlat0.y, u_xlat6.z * u_xlat0.w);
    vs_TEXCOORD3.zw = u_xlat0.zw;
    u_xlat1.w = u_xlat1.y * 0.5;
    vs_TEXCOORD3.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat0.x = dot(hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, hlslcc_mtx4x4unity_ObjectToWorld[0].xyz);
    vs_TEXCOORD4.z = sqrt(u_xlat0.x);
    u_xlat0.x = dot(hlslcc_mtx4x4unity_ObjectToWorld[1].xyz, hlslcc_mtx4x4unity_ObjectToWorld[1].xyz);
    vs_TEXCOORD4.w = sqrt(u_xlat0.x);
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD5.w = 0.0;
    u_xlat0.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat0.xyz;
    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    vs_TEXCOORD6.xyz = u_xlat0.xyz;
    vs_TEXCOORD6.w = 0.0;
    vs_TEXCOORD7.xyz = u_xlat2.xyz;
    vs_TEXCOORD7.w = 0.0;
    u_xlat1.xyz = u_xlat0.yzx * u_xlat2.zxy;
    u_xlat0.xyz = u_xlat2.yzx * u_xlat0.zxy + (-u_xlat1.xyz);
    u_xlat21 = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD8.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    vs_TEXCOORD8.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 _LightColor0;
uniform 	float _AlphaRange;
uniform 	float _AlphaOffset;
uniform 	float _Opacity;
uniform 	mediump float _BottomAlphaToggle;
uniform 	float _AlphaBottomRange;
uniform 	float _AlphaBottomOffset;
uniform 	vec4 _WaterfallTex01_ST;
uniform 	mediump vec4 _FoamUVCoord01;
uniform 	mediump vec4 _FoamUVCoord02;
uniform 	float _FoamRange;
uniform 	float _FoamOffset;
uniform 	vec4 _DayColor;
uniform 	vec4 _BottomColor;
uniform 	vec4 _TopColor;
uniform 	float _ColorGradientRange;
uniform 	float _ColorGradientOffset;
uniform 	vec4 _ReflectionColor_Dark;
uniform 	vec4 _ReflectionColor_Light;
uniform 	float _Normal01_U_Speed;
uniform 	vec4 _Normal01_ST;
uniform 	float _Normal01_VSpeed;
uniform 	float _Normal02_U_Speed;
uniform 	vec4 _Normal02_ST;
uniform 	float _Normal02_V_Speed;
uniform 	vec4 _DistortionIntensity;
uniform 	float _ReflectionBrightness;
uniform 	float _ReflectionIntensity;
uniform 	float _WaterFall01_Speed;
uniform 	float _Waterfall02_Speed;
uniform 	mediump vec4 _WaterfallPatternColor;
uniform 	float _Waterfall01Brightness;
uniform 	float _Waterfall02Brightness;
uniform 	float _SprayRange;
uniform 	float _SprayOffset;
uniform 	float _ShadowStrength;
uniform 	vec4 _WaterfallSpecTex_ST;
uniform 	float _Detail01_U_Speed;
uniform 	vec4 _NoiseTex_ST;
uniform 	float _Detail01_V_Speed;
uniform 	float _NoiselDistortionValue;
uniform 	mediump vec4 _WaterfallSpecColor;
uniform 	mediump vec4 _FoamColor;
uniform 	vec3 _ES_MainLightColor;
uniform lowp sampler2D _WaterfallTex01;
uniform lowp sampler2D _Normal01;
uniform lowp sampler2D _Normal02;
uniform lowp samplerCube _Reflection;
uniform lowp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _WaterfallSpecTex;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
in highp vec4 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
lowp vec3 u_xlat10_0;
vec4 u_xlat1;
mediump float u_xlat16_1;
lowp float u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
bool u_xlatb4;
vec2 u_xlat9;
lowp float u_xlat10_9;
float u_xlat12;
mediump float u_xlat16_12;
lowp float u_xlat10_12;
float u_xlat13;
void main()
{
    u_xlat0.xy = vs_TEXCOORD4.xy * _Normal01_ST.xy + _Normal01_ST.zw;
    u_xlat0.x = u_xlat0.x * vs_TEXCOORD4.z;
    u_xlat1.x = _Time.y * _Normal01_U_Speed + u_xlat0.x;
    u_xlat0.x = _Time.y * _Normal01_VSpeed;
    u_xlat1.y = u_xlat0.y * vs_TEXCOORD4.w + u_xlat0.x;
    u_xlat10_0.xyz = texture(_Normal01, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xy = vs_TEXCOORD4.xy * _Normal02_ST.xy + _Normal02_ST.zw;
    u_xlat0.xy = vec2(u_xlat0.x * vs_TEXCOORD4.z, u_xlat0.y * vs_TEXCOORD4.w);
    u_xlat1.x = _Time.y * _Normal02_U_Speed + u_xlat0.x;
    u_xlat1.y = _Time.y * _Normal02_V_Speed + u_xlat0.y;
    u_xlat10_0.xyz = texture(_Normal02, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_2.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = u_xlat16_2.xyz * _DistortionIntensity.xyz;
    u_xlat1.x = vs_TEXCOORD6.x;
    u_xlat1.y = vs_TEXCOORD8.x;
    u_xlat1.z = vs_TEXCOORD7.x;
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat3.x = vs_TEXCOORD6.y;
    u_xlat3.y = vs_TEXCOORD8.y;
    u_xlat3.z = vs_TEXCOORD7.y;
    u_xlat1.y = dot(u_xlat3.xyz, u_xlat0.xyz);
    u_xlat3.x = vs_TEXCOORD6.z;
    u_xlat3.y = vs_TEXCOORD8.z;
    u_xlat3.z = vs_TEXCOORD7.z;
    u_xlat1.z = dot(u_xlat3.xyz, u_xlat0.xyz);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
    u_xlat12 = dot((-u_xlat1.xyz), u_xlat0.xyz);
    u_xlat12 = u_xlat12 + u_xlat12;
    u_xlat0.xyz = u_xlat0.xyz * (-vec3(u_xlat12)) + (-u_xlat1.xyz);
    u_xlat10_0.x = texture(_Reflection, u_xlat0.xyz).x;
    u_xlat4.xyz = (-_ReflectionColor_Dark.xyz) + _ReflectionColor_Light.xyz;
    u_xlat0.xyz = u_xlat10_0.xxx * u_xlat4.xyz + _ReflectionColor_Dark.xyz;
    u_xlat12 = vs_TEXCOORD4.y * _ColorGradientRange + _ColorGradientOffset;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat1.xyz = (-_BottomColor.xyz) + _TopColor.xyz;
    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz + _BottomColor.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.200000003, 0.200000003, 0.200000003);
    u_xlat0.xyz = u_xlat0.xyz * vec3(_ReflectionBrightness) + (-u_xlat1.xyz);
    u_xlat0.xyz = vec3(vec3(_ReflectionIntensity, _ReflectionIntensity, _ReflectionIntensity)) * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat1.xy = vs_TEXCOORD4.xy * _WaterfallTex01_ST.xy + _WaterfallTex01_ST.zw;
    u_xlat1.xy = vec2(u_xlat1.x * vs_TEXCOORD4.z, u_xlat1.y * vs_TEXCOORD4.w);
    u_xlat1.zw = _Time.yy * vec2(_WaterFall01_Speed, _Waterfall02_Speed) + u_xlat1.yy;
    u_xlat10_12 = texture(_WaterfallTex01, u_xlat1.xz).x;
    u_xlat10_9 = texture(_WaterfallTex01, u_xlat1.xw).y;
    u_xlat16_2.x = (-u_xlat10_12) + u_xlat10_9;
    u_xlat16_2.x = u_xlat10_9 * u_xlat16_2.x + u_xlat10_12;
    u_xlat12 = u_xlat10_12 * _Waterfall01Brightness;
    u_xlat3.xyz = u_xlat16_2.xxx * _WaterfallPatternColor.xyz + (-u_xlat0.xyz);
    u_xlat13 = u_xlat10_9 * _Waterfall02Brightness + (-u_xlat12);
    u_xlat9.x = u_xlat10_9 * _Waterfall02Brightness;
    u_xlat12 = u_xlat9.x * u_xlat13 + u_xlat12;
    u_xlat9.x = vs_TEXCOORD4.y * _SprayRange + _SprayOffset;
    u_xlat9.x = (-u_xlat9.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat9.x = min(max(u_xlat9.x, 0.0), 1.0);
#else
    u_xlat9.x = clamp(u_xlat9.x, 0.0, 1.0);
#endif
    u_xlat12 = u_xlat12 * u_xlat9.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * _DayColor.xyz;
    u_xlat9.xy = vs_TEXCOORD4.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat3.x = _Time.y * _Detail01_U_Speed + u_xlat9.x;
    u_xlat3.y = _Time.y * _Detail01_V_Speed + u_xlat9.y;
    u_xlat10_12 = texture(_NoiseTex, u_xlat3.xy).x;
    u_xlat16_2.x = vs_TEXCOORD4.w * 0.5;
    u_xlat9.xy = vs_TEXCOORD4.xy * _WaterfallSpecTex_ST.xy + _WaterfallSpecTex_ST.zw;
    u_xlat16_2.x = vs_TEXCOORD4.w * u_xlat9.y + (-u_xlat16_2.x);
    u_xlat3.x = u_xlat10_12 * _NoiselDistortionValue + u_xlat9.x;
    u_xlat3.y = u_xlat10_12 * _NoiselDistortionValue + u_xlat16_2.x;
    u_xlat10_12 = texture(_WaterfallSpecTex, u_xlat3.xy).x;
    u_xlat16_3.xyz = vec3(u_xlat10_12) * _WaterfallSpecColor.xyz;
    u_xlat9.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat10_12 = texture(_ShadowMapTexture, u_xlat9.xy).x;
    u_xlat9.x = (-_ShadowStrength) + 1.0;
    u_xlat12 = u_xlat10_12 * u_xlat9.x + _ShadowStrength;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat12) + u_xlat16_3.xyz;
    u_xlat9.xy = vec2(_Time.y * _FoamUVCoord01.z, _Time.y * _FoamUVCoord01.w);
    u_xlat9.xy = u_xlat1.xy * _FoamUVCoord01.xy + u_xlat9.xy;
    u_xlat10_12 = texture(_WaterfallTex01, u_xlat9.xy).x;
    u_xlat9.xy = vec2(_Time.y * _FoamUVCoord02.z, _Time.y * _FoamUVCoord02.w);
    u_xlat1.xy = u_xlat1.xy * _FoamUVCoord02.xy + u_xlat9.xy;
    u_xlat10_1 = texture(_WaterfallTex01, u_xlat1.xy).y;
    u_xlat16_12 = u_xlat10_12 + u_xlat10_1;
    u_xlat1.x = vs_TEXCOORD4.y * _FoamRange + _FoamOffset;
    u_xlat12 = u_xlat16_12 + u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat1.x = (-u_xlat1.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat12 * u_xlat1.x;
    u_xlat0.xyz = u_xlat1.xxx * _FoamColor.xyz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * _ES_MainLightColor.xyz;
    u_xlat16_1 = max(_LightColor0.w, 1.0);
    u_xlat1.xyz = u_xlat0.xyz * vec3(u_xlat16_1);
    u_xlat0.x = vs_TEXCOORD4.y * _AlphaBottomRange + _AlphaBottomOffset;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(_BottomAlphaToggle==1.0);
#else
    u_xlatb4 = _BottomAlphaToggle==1.0;
#endif
    u_xlat0.x = (u_xlatb4) ? u_xlat0.x : 1.0;
    u_xlat4.x = vs_TEXCOORD4.y * _AlphaRange + _AlphaOffset;
    u_xlat4.x = (-u_xlat4.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat4.x = u_xlat4.x * _Opacity;
    u_xlat0.x = u_xlat0.x * u_xlat4.x;
    u_xlat1.w = u_xlat12 * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "MSAA_INTERPOLATION" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
uniform 	vec4 hlslcc_mtx4x4_mhyJitteredVP[4];
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec4 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
float u_xlat14;
float u_xlat21;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD5.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat0.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position = u_xlat0;
    vs_TEXCOORD2.zw = u_xlat0.zw;
    vs_COLOR0 = in_COLOR0;
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat14 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat14 = inversesqrt(u_xlat14);
    u_xlat2.xyz = vec3(u_xlat14) * u_xlat2.xyz;
    u_xlat16_3.x = u_xlat2.y * u_xlat2.y;
    u_xlat16_3.x = u_xlat2.x * u_xlat2.x + (-u_xlat16_3.x);
    u_xlat16_4 = u_xlat2.yzzx * u_xlat2.xyzz;
    u_xlat16_5.x = dot(unity_SHBr, u_xlat16_4);
    u_xlat16_5.y = dot(unity_SHBg, u_xlat16_4);
    u_xlat16_5.z = dot(unity_SHBb, u_xlat16_4);
    u_xlat16_3.xyz = unity_SHC.xyz * u_xlat16_3.xxx + u_xlat16_5.xyz;
    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat2.w = 1.0;
    u_xlat16_4.x = dot(unity_SHAr, u_xlat2);
    u_xlat16_4.y = dot(unity_SHAg, u_xlat2);
    u_xlat16_4.z = dot(unity_SHAb, u_xlat2);
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
    vs_TEXCOORD1.xyz = u_xlat16_3.xyz;
    vs_TEXCOORD1.w = 1.0;
    u_xlat6.x = float(0.5);
    u_xlat6.z = float(0.5);
    u_xlat6.y = _ProjectionParams.x;
    u_xlat0.xyz = u_xlat0.xyw * u_xlat6.xyz;
    u_xlat0.w = u_xlat0.y * 0.5;
    vs_TEXCOORD2.xy = u_xlat0.zz + u_xlat0.xw;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_mhyJitteredVP[1];
    u_xlat0 = hlslcc_mtx4x4_mhyJitteredVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_mhyJitteredVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_mhyJitteredVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat1.xyz = vec3(u_xlat6.z * u_xlat0.x, u_xlat6.y * u_xlat0.y, u_xlat6.z * u_xlat0.w);
    vs_TEXCOORD3.zw = u_xlat0.zw;
    u_xlat1.w = u_xlat1.y * 0.5;
    vs_TEXCOORD3.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat0.x = dot(hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, hlslcc_mtx4x4unity_ObjectToWorld[0].xyz);
    vs_TEXCOORD4.z = sqrt(u_xlat0.x);
    u_xlat0.x = dot(hlslcc_mtx4x4unity_ObjectToWorld[1].xyz, hlslcc_mtx4x4unity_ObjectToWorld[1].xyz);
    vs_TEXCOORD4.w = sqrt(u_xlat0.x);
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD5.w = 0.0;
    u_xlat0.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat0.xyz;
    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    vs_TEXCOORD6.xyz = u_xlat0.xyz;
    vs_TEXCOORD6.w = 0.0;
    vs_TEXCOORD7.xyz = u_xlat2.xyz;
    vs_TEXCOORD7.w = 0.0;
    u_xlat1.xyz = u_xlat0.yzx * u_xlat2.zxy;
    u_xlat0.xyz = u_xlat2.yzx * u_xlat0.zxy + (-u_xlat1.xyz);
    u_xlat21 = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD8.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    vs_TEXCOORD8.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ZBufferParams;
uniform 	mediump vec4 _LightColor0;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	float _AlphaRange;
uniform 	float _AlphaOffset;
uniform 	float _Opacity;
uniform 	mediump float _BottomAlphaToggle;
uniform 	float _AlphaBottomRange;
uniform 	float _AlphaBottomOffset;
uniform 	vec4 _WaterfallTex01_ST;
uniform 	mediump vec4 _FoamUVCoord01;
uniform 	mediump vec4 _FoamUVCoord02;
uniform 	float _FoamRange;
uniform 	float _FoamOffset;
uniform 	vec4 _DayColor;
uniform 	vec4 _BottomColor;
uniform 	vec4 _TopColor;
uniform 	float _ColorGradientRange;
uniform 	float _ColorGradientOffset;
uniform 	vec4 _ReflectionColor_Dark;
uniform 	vec4 _ReflectionColor_Light;
uniform 	float _Normal01_U_Speed;
uniform 	vec4 _Normal01_ST;
uniform 	float _Normal01_VSpeed;
uniform 	float _Normal02_U_Speed;
uniform 	vec4 _Normal02_ST;
uniform 	float _Normal02_V_Speed;
uniform 	vec4 _DistortionIntensity;
uniform 	float _ReflectionBrightness;
uniform 	float _ReflectionIntensity;
uniform 	float _WaterFall01_Speed;
uniform 	float _Waterfall02_Speed;
uniform 	mediump vec4 _WaterfallPatternColor;
uniform 	float _Waterfall01Brightness;
uniform 	float _Waterfall02Brightness;
uniform 	float _SprayRange;
uniform 	float _SprayOffset;
uniform 	float _ShadowStrength;
uniform 	vec4 _WaterfallSpecTex_ST;
uniform 	float _Detail01_U_Speed;
uniform 	vec4 _NoiseTex_ST;
uniform 	float _Detail01_V_Speed;
uniform 	float _NoiselDistortionValue;
uniform 	mediump vec4 _WaterfallSpecColor;
uniform 	mediump vec4 _FoamColor;
uniform 	vec3 _ES_MainLightColor;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _WaterfallTex01;
uniform lowp sampler2D _Normal01;
uniform lowp sampler2D _Normal02;
uniform lowp samplerCube _Reflection;
uniform lowp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _WaterfallSpecTex;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
in highp vec4 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
lowp vec3 u_xlat10_0;
vec4 u_xlat1;
mediump float u_xlat16_1;
lowp float u_xlat10_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
float u_xlat8;
bool u_xlatb8;
vec2 u_xlat9;
lowp float u_xlat10_9;
float u_xlat12;
mediump float u_xlat16_12;
lowp float u_xlat10_12;
float u_xlat13;
lowp float u_xlat10_15;
void main()
{
    u_xlat0.xy = vs_TEXCOORD4.xy * _Normal01_ST.xy + _Normal01_ST.zw;
    u_xlat0.x = u_xlat0.x * vs_TEXCOORD4.z;
    u_xlat1.x = _Time.y * _Normal01_U_Speed + u_xlat0.x;
    u_xlat0.x = _Time.y * _Normal01_VSpeed;
    u_xlat1.y = u_xlat0.y * vs_TEXCOORD4.w + u_xlat0.x;
    u_xlat10_0.xyz = texture(_Normal01, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xy = vs_TEXCOORD4.xy * _Normal02_ST.xy + _Normal02_ST.zw;
    u_xlat0.xy = vec2(u_xlat0.x * vs_TEXCOORD4.z, u_xlat0.y * vs_TEXCOORD4.w);
    u_xlat1.x = _Time.y * _Normal02_U_Speed + u_xlat0.x;
    u_xlat1.y = _Time.y * _Normal02_V_Speed + u_xlat0.y;
    u_xlat10_0.xyz = texture(_Normal02, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_2.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = u_xlat16_2.xyz * _DistortionIntensity.xyz;
    u_xlat1.x = vs_TEXCOORD6.x;
    u_xlat1.y = vs_TEXCOORD8.x;
    u_xlat1.z = vs_TEXCOORD7.x;
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat3.x = vs_TEXCOORD6.y;
    u_xlat3.y = vs_TEXCOORD8.y;
    u_xlat3.z = vs_TEXCOORD7.y;
    u_xlat1.y = dot(u_xlat3.xyz, u_xlat0.xyz);
    u_xlat3.x = vs_TEXCOORD6.z;
    u_xlat3.y = vs_TEXCOORD8.z;
    u_xlat3.z = vs_TEXCOORD7.z;
    u_xlat1.z = dot(u_xlat3.xyz, u_xlat0.xyz);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
    u_xlat12 = dot((-u_xlat1.xyz), u_xlat0.xyz);
    u_xlat12 = u_xlat12 + u_xlat12;
    u_xlat0.xyz = u_xlat0.xyz * (-vec3(u_xlat12)) + (-u_xlat1.xyz);
    u_xlat10_0.x = texture(_Reflection, u_xlat0.xyz).x;
    u_xlat4.xyz = (-_ReflectionColor_Dark.xyz) + _ReflectionColor_Light.xyz;
    u_xlat0.xyz = u_xlat10_0.xxx * u_xlat4.xyz + _ReflectionColor_Dark.xyz;
    u_xlat12 = vs_TEXCOORD4.y * _ColorGradientRange + _ColorGradientOffset;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat1.xyz = (-_BottomColor.xyz) + _TopColor.xyz;
    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz + _BottomColor.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.200000003, 0.200000003, 0.200000003);
    u_xlat0.xyz = u_xlat0.xyz * vec3(_ReflectionBrightness) + (-u_xlat1.xyz);
    u_xlat0.xyz = vec3(vec3(_ReflectionIntensity, _ReflectionIntensity, _ReflectionIntensity)) * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat1.xy = vs_TEXCOORD4.xy * _WaterfallTex01_ST.xy + _WaterfallTex01_ST.zw;
    u_xlat1.xy = vec2(u_xlat1.x * vs_TEXCOORD4.z, u_xlat1.y * vs_TEXCOORD4.w);
    u_xlat1.zw = _Time.yy * vec2(_WaterFall01_Speed, _Waterfall02_Speed) + u_xlat1.yy;
    u_xlat10_12 = texture(_WaterfallTex01, u_xlat1.xz).x;
    u_xlat10_9 = texture(_WaterfallTex01, u_xlat1.xw).y;
    u_xlat16_2.x = (-u_xlat10_12) + u_xlat10_9;
    u_xlat16_2.x = u_xlat10_9 * u_xlat16_2.x + u_xlat10_12;
    u_xlat12 = u_xlat10_12 * _Waterfall01Brightness;
    u_xlat3.xyz = u_xlat16_2.xxx * _WaterfallPatternColor.xyz + (-u_xlat0.xyz);
    u_xlat13 = u_xlat10_9 * _Waterfall02Brightness + (-u_xlat12);
    u_xlat9.x = u_xlat10_9 * _Waterfall02Brightness;
    u_xlat12 = u_xlat9.x * u_xlat13 + u_xlat12;
    u_xlat9.x = vs_TEXCOORD4.y * _SprayRange + _SprayOffset;
    u_xlat9.x = (-u_xlat9.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat9.x = min(max(u_xlat9.x, 0.0), 1.0);
#else
    u_xlat9.x = clamp(u_xlat9.x, 0.0, 1.0);
#endif
    u_xlat12 = u_xlat12 * u_xlat9.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * _DayColor.xyz;
    u_xlat9.xy = vs_TEXCOORD4.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat3.x = _Time.y * _Detail01_U_Speed + u_xlat9.x;
    u_xlat3.y = _Time.y * _Detail01_V_Speed + u_xlat9.y;
    u_xlat10_12 = texture(_NoiseTex, u_xlat3.xy).x;
    u_xlat16_2.x = vs_TEXCOORD4.w * 0.5;
    u_xlat9.xy = vs_TEXCOORD4.xy * _WaterfallSpecTex_ST.xy + _WaterfallSpecTex_ST.zw;
    u_xlat16_2.x = vs_TEXCOORD4.w * u_xlat9.y + (-u_xlat16_2.x);
    u_xlat3.x = u_xlat10_12 * _NoiselDistortionValue + u_xlat9.x;
    u_xlat3.y = u_xlat10_12 * _NoiselDistortionValue + u_xlat16_2.x;
    u_xlat10_12 = texture(_WaterfallSpecTex, u_xlat3.xy).x;
    u_xlat16_3.xyz = vec3(u_xlat10_12) * _WaterfallSpecColor.xyz;
    u_xlat12 = (-_ShadowStrength) + 1.0;
    u_xlat9.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat10_15 = texture(_ShadowMapTexture, u_xlat9.xy).x;
    u_xlat9.x = texture(_CameraDepthTexture, u_xlat9.xy).x;
    u_xlat9.x = _ZBufferParams.z * u_xlat9.x + _ZBufferParams.w;
    u_xlat9.x = float(1.0) / u_xlat9.x;
    u_xlat9.x = u_xlat9.x + (-vs_TEXCOORD3.w);
    u_xlat12 = u_xlat10_15 * u_xlat12 + _ShadowStrength;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat12) + u_xlat16_3.xyz;
    u_xlat3.xy = vec2(_Time.y * _FoamUVCoord01.z, _Time.y * _FoamUVCoord01.w);
    u_xlat3.xy = u_xlat1.xy * _FoamUVCoord01.xy + u_xlat3.xy;
    u_xlat10_12 = texture(_WaterfallTex01, u_xlat3.xy).x;
    u_xlat3.xy = vec2(_Time.y * _FoamUVCoord02.z, _Time.y * _FoamUVCoord02.w);
    u_xlat1.xy = u_xlat1.xy * _FoamUVCoord02.xy + u_xlat3.xy;
    u_xlat10_1 = texture(_WaterfallTex01, u_xlat1.xy).y;
    u_xlat16_12 = u_xlat10_12 + u_xlat10_1;
    u_xlat1.x = vs_TEXCOORD4.y * _FoamRange + _FoamOffset;
    u_xlat12 = u_xlat16_12 + u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat1.x = (-u_xlat1.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat12 * u_xlat1.x;
    u_xlat0.xyz = u_xlat1.xxx * _FoamColor.xyz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * _ES_MainLightColor.xyz;
    u_xlat16_1 = max(_LightColor0.w, 1.0);
    u_xlat2.xyz = u_xlat0.xyz * vec3(u_xlat16_1);
    u_xlat0.x = u_xlat9.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat4.x = u_xlat9.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat8 = (-u_xlat4.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat8 + u_xlat4.x;
    u_xlat4.x = vs_TEXCOORD4.y * _AlphaRange + _AlphaOffset;
    u_xlat4.x = (-u_xlat4.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat4.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _Opacity;
    u_xlat4.x = vs_TEXCOORD4.y * _AlphaBottomRange + _AlphaBottomOffset;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(_BottomAlphaToggle==1.0);
#else
    u_xlatb8 = _BottomAlphaToggle==1.0;
#endif
    u_xlat4.x = (u_xlatb8) ? u_xlat4.x : 1.0;
    u_xlat0.x = u_xlat4.x * u_xlat0.x;
    u_xlat2.w = u_xlat12 * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.w = min(max(u_xlat2.w, 0.0), 1.0);
#else
    u_xlat2.w = clamp(u_xlat2.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat2;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MSAA_INTERPOLATION" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
uniform 	vec4 hlslcc_mtx4x4_mhyJitteredVP[4];
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
vec3 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump vec3 u_xlat16_4;
mediump vec4 u_xlat16_5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
vec3 u_xlat8;
float u_xlat24;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    vs_TEXCOORD5.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    u_xlat1.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position = u_xlat1;
    vs_TEXCOORD2.zw = u_xlat1.zw;
    vs_COLOR0 = in_COLOR0;
    u_xlat3.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat3.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat3.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat8.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat3.xyz = u_xlat8.xxx * u_xlat3.xyz;
    u_xlat16_4.x = u_xlat3.y * u_xlat3.y;
    u_xlat16_4.x = u_xlat3.x * u_xlat3.x + (-u_xlat16_4.x);
    u_xlat16_5 = u_xlat3.yzzx * u_xlat3.xyzz;
    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_5);
    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_5);
    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_5);
    u_xlat16_4.xyz = unity_SHC.xyz * u_xlat16_4.xxx + u_xlat16_6.xyz;
    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat3.w = 1.0;
    u_xlat16_5.x = dot(unity_SHAr, u_xlat3);
    u_xlat16_5.y = dot(unity_SHAg, u_xlat3);
    u_xlat16_5.z = dot(unity_SHAb, u_xlat3);
    u_xlat16_4.xyz = u_xlat16_4.xyz + u_xlat16_5.xyz;
    vs_TEXCOORD1.xyz = u_xlat16_4.xyz;
    vs_TEXCOORD1.w = 1.0;
    u_xlat7.x = float(0.5);
    u_xlat7.z = float(0.5);
    u_xlat7.y = _ProjectionParams.x;
    u_xlat1.xyz = u_xlat1.xyw * u_xlat7.xyz;
    u_xlat1.w = u_xlat1.y * 0.5;
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4_mhyJitteredVP[1];
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[3] * u_xlat2.wwww + u_xlat1;
    u_xlat2.xyz = vec3(u_xlat7.z * u_xlat1.x, u_xlat7.y * u_xlat1.y, u_xlat7.z * u_xlat1.w);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    u_xlat2.w = u_xlat2.y * 0.5;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy;
    u_xlat8.x = dot(unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz);
    vs_TEXCOORD4.z = sqrt(u_xlat8.x);
    u_xlat8.x = dot(unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz);
    vs_TEXCOORD4.w = sqrt(u_xlat8.x);
    vs_TEXCOORD5.w = 0.0;
    u_xlat8.xyz = in_TANGENT0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat8.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_TANGENT0.xxx + u_xlat8.xyz;
    u_xlat0.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_TANGENT0.zzz + u_xlat8.xyz;
    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat0.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    vs_TEXCOORD6.xyz = u_xlat0.xyz;
    vs_TEXCOORD6.w = 0.0;
    vs_TEXCOORD7.xyz = u_xlat3.xyz;
    vs_TEXCOORD7.w = 0.0;
    u_xlat1.xyz = u_xlat0.yzx * u_xlat3.zxy;
    u_xlat0.xyz = u_xlat3.yzx * u_xlat0.zxy + (-u_xlat1.xyz);
    u_xlat24 = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD8.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    vs_TEXCOORD8.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 _LightColor0;
uniform 	float _AlphaRange;
uniform 	float _AlphaOffset;
uniform 	float _Opacity;
uniform 	mediump float _BottomAlphaToggle;
uniform 	float _AlphaBottomRange;
uniform 	float _AlphaBottomOffset;
uniform 	vec4 _WaterfallTex01_ST;
uniform 	mediump vec4 _FoamUVCoord01;
uniform 	mediump vec4 _FoamUVCoord02;
uniform 	float _FoamRange;
uniform 	float _FoamOffset;
uniform 	vec4 _DayColor;
uniform 	vec4 _BottomColor;
uniform 	vec4 _TopColor;
uniform 	float _ColorGradientRange;
uniform 	float _ColorGradientOffset;
uniform 	vec4 _ReflectionColor_Dark;
uniform 	vec4 _ReflectionColor_Light;
uniform 	float _Normal01_U_Speed;
uniform 	vec4 _Normal01_ST;
uniform 	float _Normal01_VSpeed;
uniform 	float _Normal02_U_Speed;
uniform 	vec4 _Normal02_ST;
uniform 	float _Normal02_V_Speed;
uniform 	vec4 _DistortionIntensity;
uniform 	float _ReflectionBrightness;
uniform 	float _ReflectionIntensity;
uniform 	float _WaterFall01_Speed;
uniform 	float _Waterfall02_Speed;
uniform 	mediump vec4 _WaterfallPatternColor;
uniform 	float _Waterfall01Brightness;
uniform 	float _Waterfall02Brightness;
uniform 	float _SprayRange;
uniform 	float _SprayOffset;
uniform 	float _ShadowStrength;
uniform 	vec4 _WaterfallSpecTex_ST;
uniform 	float _Detail01_U_Speed;
uniform 	vec4 _NoiseTex_ST;
uniform 	float _Detail01_V_Speed;
uniform 	float _NoiselDistortionValue;
uniform 	mediump vec4 _WaterfallSpecColor;
uniform 	mediump vec4 _FoamColor;
uniform 	vec3 _ES_MainLightColor;
uniform lowp sampler2D _WaterfallTex01;
uniform lowp sampler2D _Normal01;
uniform lowp sampler2D _Normal02;
uniform lowp samplerCube _Reflection;
uniform lowp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _WaterfallSpecTex;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
in highp vec4 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
lowp vec3 u_xlat10_0;
vec4 u_xlat1;
mediump float u_xlat16_1;
lowp float u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
bool u_xlatb4;
vec2 u_xlat9;
lowp float u_xlat10_9;
float u_xlat12;
mediump float u_xlat16_12;
lowp float u_xlat10_12;
float u_xlat13;
void main()
{
    u_xlat0.xy = vs_TEXCOORD4.xy * _Normal01_ST.xy + _Normal01_ST.zw;
    u_xlat0.x = u_xlat0.x * vs_TEXCOORD4.z;
    u_xlat1.x = _Time.y * _Normal01_U_Speed + u_xlat0.x;
    u_xlat0.x = _Time.y * _Normal01_VSpeed;
    u_xlat1.y = u_xlat0.y * vs_TEXCOORD4.w + u_xlat0.x;
    u_xlat10_0.xyz = texture(_Normal01, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xy = vs_TEXCOORD4.xy * _Normal02_ST.xy + _Normal02_ST.zw;
    u_xlat0.xy = vec2(u_xlat0.x * vs_TEXCOORD4.z, u_xlat0.y * vs_TEXCOORD4.w);
    u_xlat1.x = _Time.y * _Normal02_U_Speed + u_xlat0.x;
    u_xlat1.y = _Time.y * _Normal02_V_Speed + u_xlat0.y;
    u_xlat10_0.xyz = texture(_Normal02, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_2.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = u_xlat16_2.xyz * _DistortionIntensity.xyz;
    u_xlat1.x = vs_TEXCOORD6.x;
    u_xlat1.y = vs_TEXCOORD8.x;
    u_xlat1.z = vs_TEXCOORD7.x;
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat3.x = vs_TEXCOORD6.y;
    u_xlat3.y = vs_TEXCOORD8.y;
    u_xlat3.z = vs_TEXCOORD7.y;
    u_xlat1.y = dot(u_xlat3.xyz, u_xlat0.xyz);
    u_xlat3.x = vs_TEXCOORD6.z;
    u_xlat3.y = vs_TEXCOORD8.z;
    u_xlat3.z = vs_TEXCOORD7.z;
    u_xlat1.z = dot(u_xlat3.xyz, u_xlat0.xyz);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
    u_xlat12 = dot((-u_xlat1.xyz), u_xlat0.xyz);
    u_xlat12 = u_xlat12 + u_xlat12;
    u_xlat0.xyz = u_xlat0.xyz * (-vec3(u_xlat12)) + (-u_xlat1.xyz);
    u_xlat10_0.x = texture(_Reflection, u_xlat0.xyz).x;
    u_xlat4.xyz = (-_ReflectionColor_Dark.xyz) + _ReflectionColor_Light.xyz;
    u_xlat0.xyz = u_xlat10_0.xxx * u_xlat4.xyz + _ReflectionColor_Dark.xyz;
    u_xlat12 = vs_TEXCOORD4.y * _ColorGradientRange + _ColorGradientOffset;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat1.xyz = (-_BottomColor.xyz) + _TopColor.xyz;
    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz + _BottomColor.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.200000003, 0.200000003, 0.200000003);
    u_xlat0.xyz = u_xlat0.xyz * vec3(_ReflectionBrightness) + (-u_xlat1.xyz);
    u_xlat0.xyz = vec3(vec3(_ReflectionIntensity, _ReflectionIntensity, _ReflectionIntensity)) * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat1.xy = vs_TEXCOORD4.xy * _WaterfallTex01_ST.xy + _WaterfallTex01_ST.zw;
    u_xlat1.xy = vec2(u_xlat1.x * vs_TEXCOORD4.z, u_xlat1.y * vs_TEXCOORD4.w);
    u_xlat1.zw = _Time.yy * vec2(_WaterFall01_Speed, _Waterfall02_Speed) + u_xlat1.yy;
    u_xlat10_12 = texture(_WaterfallTex01, u_xlat1.xz).x;
    u_xlat10_9 = texture(_WaterfallTex01, u_xlat1.xw).y;
    u_xlat16_2.x = (-u_xlat10_12) + u_xlat10_9;
    u_xlat16_2.x = u_xlat10_9 * u_xlat16_2.x + u_xlat10_12;
    u_xlat12 = u_xlat10_12 * _Waterfall01Brightness;
    u_xlat3.xyz = u_xlat16_2.xxx * _WaterfallPatternColor.xyz + (-u_xlat0.xyz);
    u_xlat13 = u_xlat10_9 * _Waterfall02Brightness + (-u_xlat12);
    u_xlat9.x = u_xlat10_9 * _Waterfall02Brightness;
    u_xlat12 = u_xlat9.x * u_xlat13 + u_xlat12;
    u_xlat9.x = vs_TEXCOORD4.y * _SprayRange + _SprayOffset;
    u_xlat9.x = (-u_xlat9.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat9.x = min(max(u_xlat9.x, 0.0), 1.0);
#else
    u_xlat9.x = clamp(u_xlat9.x, 0.0, 1.0);
#endif
    u_xlat12 = u_xlat12 * u_xlat9.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * _DayColor.xyz;
    u_xlat9.xy = vs_TEXCOORD4.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat3.x = _Time.y * _Detail01_U_Speed + u_xlat9.x;
    u_xlat3.y = _Time.y * _Detail01_V_Speed + u_xlat9.y;
    u_xlat10_12 = texture(_NoiseTex, u_xlat3.xy).x;
    u_xlat16_2.x = vs_TEXCOORD4.w * 0.5;
    u_xlat9.xy = vs_TEXCOORD4.xy * _WaterfallSpecTex_ST.xy + _WaterfallSpecTex_ST.zw;
    u_xlat16_2.x = vs_TEXCOORD4.w * u_xlat9.y + (-u_xlat16_2.x);
    u_xlat3.x = u_xlat10_12 * _NoiselDistortionValue + u_xlat9.x;
    u_xlat3.y = u_xlat10_12 * _NoiselDistortionValue + u_xlat16_2.x;
    u_xlat10_12 = texture(_WaterfallSpecTex, u_xlat3.xy).x;
    u_xlat16_3.xyz = vec3(u_xlat10_12) * _WaterfallSpecColor.xyz;
    u_xlat9.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat10_12 = texture(_ShadowMapTexture, u_xlat9.xy).x;
    u_xlat9.x = (-_ShadowStrength) + 1.0;
    u_xlat12 = u_xlat10_12 * u_xlat9.x + _ShadowStrength;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat12) + u_xlat16_3.xyz;
    u_xlat9.xy = vec2(_Time.y * _FoamUVCoord01.z, _Time.y * _FoamUVCoord01.w);
    u_xlat9.xy = u_xlat1.xy * _FoamUVCoord01.xy + u_xlat9.xy;
    u_xlat10_12 = texture(_WaterfallTex01, u_xlat9.xy).x;
    u_xlat9.xy = vec2(_Time.y * _FoamUVCoord02.z, _Time.y * _FoamUVCoord02.w);
    u_xlat1.xy = u_xlat1.xy * _FoamUVCoord02.xy + u_xlat9.xy;
    u_xlat10_1 = texture(_WaterfallTex01, u_xlat1.xy).y;
    u_xlat16_12 = u_xlat10_12 + u_xlat10_1;
    u_xlat1.x = vs_TEXCOORD4.y * _FoamRange + _FoamOffset;
    u_xlat12 = u_xlat16_12 + u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat1.x = (-u_xlat1.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat12 * u_xlat1.x;
    u_xlat0.xyz = u_xlat1.xxx * _FoamColor.xyz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * _ES_MainLightColor.xyz;
    u_xlat16_1 = max(_LightColor0.w, 1.0);
    u_xlat1.xyz = u_xlat0.xyz * vec3(u_xlat16_1);
    u_xlat0.x = vs_TEXCOORD4.y * _AlphaBottomRange + _AlphaBottomOffset;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(_BottomAlphaToggle==1.0);
#else
    u_xlatb4 = _BottomAlphaToggle==1.0;
#endif
    u_xlat0.x = (u_xlatb4) ? u_xlat0.x : 1.0;
    u_xlat4.x = vs_TEXCOORD4.y * _AlphaRange + _AlphaOffset;
    u_xlat4.x = (-u_xlat4.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat4.x = u_xlat4.x * _Opacity;
    u_xlat0.x = u_xlat0.x * u_xlat4.x;
    u_xlat1.w = u_xlat12 * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MSAA_INTERPOLATION" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
uniform 	vec4 hlslcc_mtx4x4_mhyJitteredVP[4];
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
vec3 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump vec3 u_xlat16_4;
mediump vec4 u_xlat16_5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
vec3 u_xlat8;
float u_xlat24;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    vs_TEXCOORD5.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    u_xlat1.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position = u_xlat1;
    vs_TEXCOORD2.zw = u_xlat1.zw;
    vs_COLOR0 = in_COLOR0;
    u_xlat3.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat3.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat3.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat8.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat3.xyz = u_xlat8.xxx * u_xlat3.xyz;
    u_xlat16_4.x = u_xlat3.y * u_xlat3.y;
    u_xlat16_4.x = u_xlat3.x * u_xlat3.x + (-u_xlat16_4.x);
    u_xlat16_5 = u_xlat3.yzzx * u_xlat3.xyzz;
    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_5);
    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_5);
    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_5);
    u_xlat16_4.xyz = unity_SHC.xyz * u_xlat16_4.xxx + u_xlat16_6.xyz;
    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat3.w = 1.0;
    u_xlat16_5.x = dot(unity_SHAr, u_xlat3);
    u_xlat16_5.y = dot(unity_SHAg, u_xlat3);
    u_xlat16_5.z = dot(unity_SHAb, u_xlat3);
    u_xlat16_4.xyz = u_xlat16_4.xyz + u_xlat16_5.xyz;
    vs_TEXCOORD1.xyz = u_xlat16_4.xyz;
    vs_TEXCOORD1.w = 1.0;
    u_xlat7.x = float(0.5);
    u_xlat7.z = float(0.5);
    u_xlat7.y = _ProjectionParams.x;
    u_xlat1.xyz = u_xlat1.xyw * u_xlat7.xyz;
    u_xlat1.w = u_xlat1.y * 0.5;
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4_mhyJitteredVP[1];
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[3] * u_xlat2.wwww + u_xlat1;
    u_xlat2.xyz = vec3(u_xlat7.z * u_xlat1.x, u_xlat7.y * u_xlat1.y, u_xlat7.z * u_xlat1.w);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    u_xlat2.w = u_xlat2.y * 0.5;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy;
    u_xlat8.x = dot(unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz);
    vs_TEXCOORD4.z = sqrt(u_xlat8.x);
    u_xlat8.x = dot(unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz);
    vs_TEXCOORD4.w = sqrt(u_xlat8.x);
    vs_TEXCOORD5.w = 0.0;
    u_xlat8.xyz = in_TANGENT0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat8.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_TANGENT0.xxx + u_xlat8.xyz;
    u_xlat0.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_TANGENT0.zzz + u_xlat8.xyz;
    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat0.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    vs_TEXCOORD6.xyz = u_xlat0.xyz;
    vs_TEXCOORD6.w = 0.0;
    vs_TEXCOORD7.xyz = u_xlat3.xyz;
    vs_TEXCOORD7.w = 0.0;
    u_xlat1.xyz = u_xlat0.yzx * u_xlat3.zxy;
    u_xlat0.xyz = u_xlat3.yzx * u_xlat0.zxy + (-u_xlat1.xyz);
    u_xlat24 = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD8.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    vs_TEXCOORD8.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ZBufferParams;
uniform 	mediump vec4 _LightColor0;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	float _AlphaRange;
uniform 	float _AlphaOffset;
uniform 	float _Opacity;
uniform 	mediump float _BottomAlphaToggle;
uniform 	float _AlphaBottomRange;
uniform 	float _AlphaBottomOffset;
uniform 	vec4 _WaterfallTex01_ST;
uniform 	mediump vec4 _FoamUVCoord01;
uniform 	mediump vec4 _FoamUVCoord02;
uniform 	float _FoamRange;
uniform 	float _FoamOffset;
uniform 	vec4 _DayColor;
uniform 	vec4 _BottomColor;
uniform 	vec4 _TopColor;
uniform 	float _ColorGradientRange;
uniform 	float _ColorGradientOffset;
uniform 	vec4 _ReflectionColor_Dark;
uniform 	vec4 _ReflectionColor_Light;
uniform 	float _Normal01_U_Speed;
uniform 	vec4 _Normal01_ST;
uniform 	float _Normal01_VSpeed;
uniform 	float _Normal02_U_Speed;
uniform 	vec4 _Normal02_ST;
uniform 	float _Normal02_V_Speed;
uniform 	vec4 _DistortionIntensity;
uniform 	float _ReflectionBrightness;
uniform 	float _ReflectionIntensity;
uniform 	float _WaterFall01_Speed;
uniform 	float _Waterfall02_Speed;
uniform 	mediump vec4 _WaterfallPatternColor;
uniform 	float _Waterfall01Brightness;
uniform 	float _Waterfall02Brightness;
uniform 	float _SprayRange;
uniform 	float _SprayOffset;
uniform 	float _ShadowStrength;
uniform 	vec4 _WaterfallSpecTex_ST;
uniform 	float _Detail01_U_Speed;
uniform 	vec4 _NoiseTex_ST;
uniform 	float _Detail01_V_Speed;
uniform 	float _NoiselDistortionValue;
uniform 	mediump vec4 _WaterfallSpecColor;
uniform 	mediump vec4 _FoamColor;
uniform 	vec3 _ES_MainLightColor;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _WaterfallTex01;
uniform lowp sampler2D _Normal01;
uniform lowp sampler2D _Normal02;
uniform lowp samplerCube _Reflection;
uniform lowp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _WaterfallSpecTex;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
in highp vec4 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
lowp vec3 u_xlat10_0;
vec4 u_xlat1;
mediump float u_xlat16_1;
lowp float u_xlat10_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
float u_xlat8;
bool u_xlatb8;
vec2 u_xlat9;
lowp float u_xlat10_9;
float u_xlat12;
mediump float u_xlat16_12;
lowp float u_xlat10_12;
float u_xlat13;
lowp float u_xlat10_15;
void main()
{
    u_xlat0.xy = vs_TEXCOORD4.xy * _Normal01_ST.xy + _Normal01_ST.zw;
    u_xlat0.x = u_xlat0.x * vs_TEXCOORD4.z;
    u_xlat1.x = _Time.y * _Normal01_U_Speed + u_xlat0.x;
    u_xlat0.x = _Time.y * _Normal01_VSpeed;
    u_xlat1.y = u_xlat0.y * vs_TEXCOORD4.w + u_xlat0.x;
    u_xlat10_0.xyz = texture(_Normal01, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xy = vs_TEXCOORD4.xy * _Normal02_ST.xy + _Normal02_ST.zw;
    u_xlat0.xy = vec2(u_xlat0.x * vs_TEXCOORD4.z, u_xlat0.y * vs_TEXCOORD4.w);
    u_xlat1.x = _Time.y * _Normal02_U_Speed + u_xlat0.x;
    u_xlat1.y = _Time.y * _Normal02_V_Speed + u_xlat0.y;
    u_xlat10_0.xyz = texture(_Normal02, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_2.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = u_xlat16_2.xyz * _DistortionIntensity.xyz;
    u_xlat1.x = vs_TEXCOORD6.x;
    u_xlat1.y = vs_TEXCOORD8.x;
    u_xlat1.z = vs_TEXCOORD7.x;
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat3.x = vs_TEXCOORD6.y;
    u_xlat3.y = vs_TEXCOORD8.y;
    u_xlat3.z = vs_TEXCOORD7.y;
    u_xlat1.y = dot(u_xlat3.xyz, u_xlat0.xyz);
    u_xlat3.x = vs_TEXCOORD6.z;
    u_xlat3.y = vs_TEXCOORD8.z;
    u_xlat3.z = vs_TEXCOORD7.z;
    u_xlat1.z = dot(u_xlat3.xyz, u_xlat0.xyz);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
    u_xlat12 = dot((-u_xlat1.xyz), u_xlat0.xyz);
    u_xlat12 = u_xlat12 + u_xlat12;
    u_xlat0.xyz = u_xlat0.xyz * (-vec3(u_xlat12)) + (-u_xlat1.xyz);
    u_xlat10_0.x = texture(_Reflection, u_xlat0.xyz).x;
    u_xlat4.xyz = (-_ReflectionColor_Dark.xyz) + _ReflectionColor_Light.xyz;
    u_xlat0.xyz = u_xlat10_0.xxx * u_xlat4.xyz + _ReflectionColor_Dark.xyz;
    u_xlat12 = vs_TEXCOORD4.y * _ColorGradientRange + _ColorGradientOffset;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat1.xyz = (-_BottomColor.xyz) + _TopColor.xyz;
    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz + _BottomColor.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.200000003, 0.200000003, 0.200000003);
    u_xlat0.xyz = u_xlat0.xyz * vec3(_ReflectionBrightness) + (-u_xlat1.xyz);
    u_xlat0.xyz = vec3(vec3(_ReflectionIntensity, _ReflectionIntensity, _ReflectionIntensity)) * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat1.xy = vs_TEXCOORD4.xy * _WaterfallTex01_ST.xy + _WaterfallTex01_ST.zw;
    u_xlat1.xy = vec2(u_xlat1.x * vs_TEXCOORD4.z, u_xlat1.y * vs_TEXCOORD4.w);
    u_xlat1.zw = _Time.yy * vec2(_WaterFall01_Speed, _Waterfall02_Speed) + u_xlat1.yy;
    u_xlat10_12 = texture(_WaterfallTex01, u_xlat1.xz).x;
    u_xlat10_9 = texture(_WaterfallTex01, u_xlat1.xw).y;
    u_xlat16_2.x = (-u_xlat10_12) + u_xlat10_9;
    u_xlat16_2.x = u_xlat10_9 * u_xlat16_2.x + u_xlat10_12;
    u_xlat12 = u_xlat10_12 * _Waterfall01Brightness;
    u_xlat3.xyz = u_xlat16_2.xxx * _WaterfallPatternColor.xyz + (-u_xlat0.xyz);
    u_xlat13 = u_xlat10_9 * _Waterfall02Brightness + (-u_xlat12);
    u_xlat9.x = u_xlat10_9 * _Waterfall02Brightness;
    u_xlat12 = u_xlat9.x * u_xlat13 + u_xlat12;
    u_xlat9.x = vs_TEXCOORD4.y * _SprayRange + _SprayOffset;
    u_xlat9.x = (-u_xlat9.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat9.x = min(max(u_xlat9.x, 0.0), 1.0);
#else
    u_xlat9.x = clamp(u_xlat9.x, 0.0, 1.0);
#endif
    u_xlat12 = u_xlat12 * u_xlat9.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * _DayColor.xyz;
    u_xlat9.xy = vs_TEXCOORD4.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat3.x = _Time.y * _Detail01_U_Speed + u_xlat9.x;
    u_xlat3.y = _Time.y * _Detail01_V_Speed + u_xlat9.y;
    u_xlat10_12 = texture(_NoiseTex, u_xlat3.xy).x;
    u_xlat16_2.x = vs_TEXCOORD4.w * 0.5;
    u_xlat9.xy = vs_TEXCOORD4.xy * _WaterfallSpecTex_ST.xy + _WaterfallSpecTex_ST.zw;
    u_xlat16_2.x = vs_TEXCOORD4.w * u_xlat9.y + (-u_xlat16_2.x);
    u_xlat3.x = u_xlat10_12 * _NoiselDistortionValue + u_xlat9.x;
    u_xlat3.y = u_xlat10_12 * _NoiselDistortionValue + u_xlat16_2.x;
    u_xlat10_12 = texture(_WaterfallSpecTex, u_xlat3.xy).x;
    u_xlat16_3.xyz = vec3(u_xlat10_12) * _WaterfallSpecColor.xyz;
    u_xlat12 = (-_ShadowStrength) + 1.0;
    u_xlat9.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat10_15 = texture(_ShadowMapTexture, u_xlat9.xy).x;
    u_xlat9.x = texture(_CameraDepthTexture, u_xlat9.xy).x;
    u_xlat9.x = _ZBufferParams.z * u_xlat9.x + _ZBufferParams.w;
    u_xlat9.x = float(1.0) / u_xlat9.x;
    u_xlat9.x = u_xlat9.x + (-vs_TEXCOORD3.w);
    u_xlat12 = u_xlat10_15 * u_xlat12 + _ShadowStrength;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat12) + u_xlat16_3.xyz;
    u_xlat3.xy = vec2(_Time.y * _FoamUVCoord01.z, _Time.y * _FoamUVCoord01.w);
    u_xlat3.xy = u_xlat1.xy * _FoamUVCoord01.xy + u_xlat3.xy;
    u_xlat10_12 = texture(_WaterfallTex01, u_xlat3.xy).x;
    u_xlat3.xy = vec2(_Time.y * _FoamUVCoord02.z, _Time.y * _FoamUVCoord02.w);
    u_xlat1.xy = u_xlat1.xy * _FoamUVCoord02.xy + u_xlat3.xy;
    u_xlat10_1 = texture(_WaterfallTex01, u_xlat1.xy).y;
    u_xlat16_12 = u_xlat10_12 + u_xlat10_1;
    u_xlat1.x = vs_TEXCOORD4.y * _FoamRange + _FoamOffset;
    u_xlat12 = u_xlat16_12 + u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat1.x = (-u_xlat1.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat12 * u_xlat1.x;
    u_xlat0.xyz = u_xlat1.xxx * _FoamColor.xyz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * _ES_MainLightColor.xyz;
    u_xlat16_1 = max(_LightColor0.w, 1.0);
    u_xlat2.xyz = u_xlat0.xyz * vec3(u_xlat16_1);
    u_xlat0.x = u_xlat9.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat4.x = u_xlat9.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat8 = (-u_xlat4.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat8 + u_xlat4.x;
    u_xlat4.x = vs_TEXCOORD4.y * _AlphaRange + _AlphaOffset;
    u_xlat4.x = (-u_xlat4.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat4.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _Opacity;
    u_xlat4.x = vs_TEXCOORD4.y * _AlphaBottomRange + _AlphaBottomOffset;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(_BottomAlphaToggle==1.0);
#else
    u_xlatb8 = _BottomAlphaToggle==1.0;
#endif
    u_xlat4.x = (u_xlatb8) ? u_xlat4.x : 1.0;
    u_xlat0.x = u_xlat4.x * u_xlat0.x;
    u_xlat2.w = u_xlat12 * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.w = min(max(u_xlat2.w, 0.0), 1.0);
#else
    u_xlat2.w = clamp(u_xlat2.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat2;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "HALF_RESOLUTION_PARTICLE_ON" "MSAA_INTERPOLATION" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
uniform 	vec4 hlslcc_mtx4x4_mhyJitteredVP[4];
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec4 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
float u_xlat14;
float u_xlat21;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD5.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat0.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position = u_xlat0;
    vs_TEXCOORD2.zw = u_xlat0.zw;
    vs_COLOR0 = in_COLOR0;
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat14 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat14 = inversesqrt(u_xlat14);
    u_xlat2.xyz = vec3(u_xlat14) * u_xlat2.xyz;
    u_xlat16_3.x = u_xlat2.y * u_xlat2.y;
    u_xlat16_3.x = u_xlat2.x * u_xlat2.x + (-u_xlat16_3.x);
    u_xlat16_4 = u_xlat2.yzzx * u_xlat2.xyzz;
    u_xlat16_5.x = dot(unity_SHBr, u_xlat16_4);
    u_xlat16_5.y = dot(unity_SHBg, u_xlat16_4);
    u_xlat16_5.z = dot(unity_SHBb, u_xlat16_4);
    u_xlat16_3.xyz = unity_SHC.xyz * u_xlat16_3.xxx + u_xlat16_5.xyz;
    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat2.w = 1.0;
    u_xlat16_4.x = dot(unity_SHAr, u_xlat2);
    u_xlat16_4.y = dot(unity_SHAg, u_xlat2);
    u_xlat16_4.z = dot(unity_SHAb, u_xlat2);
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
    vs_TEXCOORD1.xyz = u_xlat16_3.xyz;
    vs_TEXCOORD1.w = 1.0;
    u_xlat6.x = float(0.5);
    u_xlat6.z = float(0.5);
    u_xlat6.y = _ProjectionParams.x;
    u_xlat0.xyz = u_xlat0.xyw * u_xlat6.xyz;
    u_xlat0.w = u_xlat0.y * 0.5;
    vs_TEXCOORD2.xy = u_xlat0.zz + u_xlat0.xw;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_mhyJitteredVP[1];
    u_xlat0 = hlslcc_mtx4x4_mhyJitteredVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_mhyJitteredVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_mhyJitteredVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat1.xyz = vec3(u_xlat6.z * u_xlat0.x, u_xlat6.y * u_xlat0.y, u_xlat6.z * u_xlat0.w);
    vs_TEXCOORD3.zw = u_xlat0.zw;
    u_xlat1.w = u_xlat1.y * 0.5;
    vs_TEXCOORD3.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat0.x = dot(hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, hlslcc_mtx4x4unity_ObjectToWorld[0].xyz);
    vs_TEXCOORD4.z = sqrt(u_xlat0.x);
    u_xlat0.x = dot(hlslcc_mtx4x4unity_ObjectToWorld[1].xyz, hlslcc_mtx4x4unity_ObjectToWorld[1].xyz);
    vs_TEXCOORD4.w = sqrt(u_xlat0.x);
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD5.w = 0.0;
    u_xlat0.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat0.xyz;
    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    vs_TEXCOORD6.xyz = u_xlat0.xyz;
    vs_TEXCOORD6.w = 0.0;
    vs_TEXCOORD7.xyz = u_xlat2.xyz;
    vs_TEXCOORD7.w = 0.0;
    u_xlat1.xyz = u_xlat0.yzx * u_xlat2.zxy;
    u_xlat0.xyz = u_xlat2.yzx * u_xlat0.zxy + (-u_xlat1.xyz);
    u_xlat21 = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD8.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    vs_TEXCOORD8.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 _LightColor0;
uniform 	float _AlphaRange;
uniform 	float _AlphaOffset;
uniform 	float _Opacity;
uniform 	mediump float _BottomAlphaToggle;
uniform 	float _AlphaBottomRange;
uniform 	float _AlphaBottomOffset;
uniform 	vec4 _WaterfallTex01_ST;
uniform 	mediump vec4 _FoamUVCoord01;
uniform 	mediump vec4 _FoamUVCoord02;
uniform 	float _FoamRange;
uniform 	float _FoamOffset;
uniform 	vec4 _DayColor;
uniform 	vec4 _BottomColor;
uniform 	vec4 _TopColor;
uniform 	float _ColorGradientRange;
uniform 	float _ColorGradientOffset;
uniform 	vec4 _ReflectionColor_Dark;
uniform 	vec4 _ReflectionColor_Light;
uniform 	float _Normal01_U_Speed;
uniform 	vec4 _Normal01_ST;
uniform 	float _Normal01_VSpeed;
uniform 	float _Normal02_U_Speed;
uniform 	vec4 _Normal02_ST;
uniform 	float _Normal02_V_Speed;
uniform 	vec4 _DistortionIntensity;
uniform 	float _ReflectionBrightness;
uniform 	float _ReflectionIntensity;
uniform 	float _WaterFall01_Speed;
uniform 	float _Waterfall02_Speed;
uniform 	mediump vec4 _WaterfallPatternColor;
uniform 	float _Waterfall01Brightness;
uniform 	float _Waterfall02Brightness;
uniform 	float _SprayRange;
uniform 	float _SprayOffset;
uniform 	float _ShadowStrength;
uniform 	vec4 _WaterfallSpecTex_ST;
uniform 	float _Detail01_U_Speed;
uniform 	vec4 _NoiseTex_ST;
uniform 	float _Detail01_V_Speed;
uniform 	float _NoiselDistortionValue;
uniform 	mediump vec4 _WaterfallSpecColor;
uniform 	mediump vec4 _FoamColor;
uniform 	vec3 _ES_MainLightColor;
uniform lowp sampler2D _WaterfallTex01;
uniform lowp sampler2D _Normal01;
uniform lowp sampler2D _Normal02;
uniform lowp samplerCube _Reflection;
uniform lowp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _WaterfallSpecTex;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
in highp vec4 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
lowp vec3 u_xlat10_0;
vec4 u_xlat1;
mediump float u_xlat16_1;
lowp float u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
bool u_xlatb4;
vec2 u_xlat9;
lowp float u_xlat10_9;
float u_xlat12;
mediump float u_xlat16_12;
lowp float u_xlat10_12;
float u_xlat13;
void main()
{
    u_xlat0.xy = vs_TEXCOORD4.xy * _Normal01_ST.xy + _Normal01_ST.zw;
    u_xlat0.x = u_xlat0.x * vs_TEXCOORD4.z;
    u_xlat1.x = _Time.y * _Normal01_U_Speed + u_xlat0.x;
    u_xlat0.x = _Time.y * _Normal01_VSpeed;
    u_xlat1.y = u_xlat0.y * vs_TEXCOORD4.w + u_xlat0.x;
    u_xlat10_0.xyz = texture(_Normal01, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xy = vs_TEXCOORD4.xy * _Normal02_ST.xy + _Normal02_ST.zw;
    u_xlat0.xy = vec2(u_xlat0.x * vs_TEXCOORD4.z, u_xlat0.y * vs_TEXCOORD4.w);
    u_xlat1.x = _Time.y * _Normal02_U_Speed + u_xlat0.x;
    u_xlat1.y = _Time.y * _Normal02_V_Speed + u_xlat0.y;
    u_xlat10_0.xyz = texture(_Normal02, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_2.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = u_xlat16_2.xyz * _DistortionIntensity.xyz;
    u_xlat1.x = vs_TEXCOORD6.x;
    u_xlat1.y = vs_TEXCOORD8.x;
    u_xlat1.z = vs_TEXCOORD7.x;
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat3.x = vs_TEXCOORD6.y;
    u_xlat3.y = vs_TEXCOORD8.y;
    u_xlat3.z = vs_TEXCOORD7.y;
    u_xlat1.y = dot(u_xlat3.xyz, u_xlat0.xyz);
    u_xlat3.x = vs_TEXCOORD6.z;
    u_xlat3.y = vs_TEXCOORD8.z;
    u_xlat3.z = vs_TEXCOORD7.z;
    u_xlat1.z = dot(u_xlat3.xyz, u_xlat0.xyz);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
    u_xlat12 = dot((-u_xlat1.xyz), u_xlat0.xyz);
    u_xlat12 = u_xlat12 + u_xlat12;
    u_xlat0.xyz = u_xlat0.xyz * (-vec3(u_xlat12)) + (-u_xlat1.xyz);
    u_xlat10_0.x = texture(_Reflection, u_xlat0.xyz).x;
    u_xlat4.xyz = (-_ReflectionColor_Dark.xyz) + _ReflectionColor_Light.xyz;
    u_xlat0.xyz = u_xlat10_0.xxx * u_xlat4.xyz + _ReflectionColor_Dark.xyz;
    u_xlat12 = vs_TEXCOORD4.y * _ColorGradientRange + _ColorGradientOffset;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat1.xyz = (-_BottomColor.xyz) + _TopColor.xyz;
    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz + _BottomColor.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.200000003, 0.200000003, 0.200000003);
    u_xlat0.xyz = u_xlat0.xyz * vec3(_ReflectionBrightness) + (-u_xlat1.xyz);
    u_xlat0.xyz = vec3(vec3(_ReflectionIntensity, _ReflectionIntensity, _ReflectionIntensity)) * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat1.xy = vs_TEXCOORD4.xy * _WaterfallTex01_ST.xy + _WaterfallTex01_ST.zw;
    u_xlat1.xy = vec2(u_xlat1.x * vs_TEXCOORD4.z, u_xlat1.y * vs_TEXCOORD4.w);
    u_xlat1.zw = _Time.yy * vec2(_WaterFall01_Speed, _Waterfall02_Speed) + u_xlat1.yy;
    u_xlat10_12 = texture(_WaterfallTex01, u_xlat1.xz).x;
    u_xlat10_9 = texture(_WaterfallTex01, u_xlat1.xw).y;
    u_xlat16_2.x = (-u_xlat10_12) + u_xlat10_9;
    u_xlat16_2.x = u_xlat10_9 * u_xlat16_2.x + u_xlat10_12;
    u_xlat12 = u_xlat10_12 * _Waterfall01Brightness;
    u_xlat3.xyz = u_xlat16_2.xxx * _WaterfallPatternColor.xyz + (-u_xlat0.xyz);
    u_xlat13 = u_xlat10_9 * _Waterfall02Brightness + (-u_xlat12);
    u_xlat9.x = u_xlat10_9 * _Waterfall02Brightness;
    u_xlat12 = u_xlat9.x * u_xlat13 + u_xlat12;
    u_xlat9.x = vs_TEXCOORD4.y * _SprayRange + _SprayOffset;
    u_xlat9.x = (-u_xlat9.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat9.x = min(max(u_xlat9.x, 0.0), 1.0);
#else
    u_xlat9.x = clamp(u_xlat9.x, 0.0, 1.0);
#endif
    u_xlat12 = u_xlat12 * u_xlat9.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * _DayColor.xyz;
    u_xlat9.xy = vs_TEXCOORD4.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat3.x = _Time.y * _Detail01_U_Speed + u_xlat9.x;
    u_xlat3.y = _Time.y * _Detail01_V_Speed + u_xlat9.y;
    u_xlat10_12 = texture(_NoiseTex, u_xlat3.xy).x;
    u_xlat16_2.x = vs_TEXCOORD4.w * 0.5;
    u_xlat9.xy = vs_TEXCOORD4.xy * _WaterfallSpecTex_ST.xy + _WaterfallSpecTex_ST.zw;
    u_xlat16_2.x = vs_TEXCOORD4.w * u_xlat9.y + (-u_xlat16_2.x);
    u_xlat3.x = u_xlat10_12 * _NoiselDistortionValue + u_xlat9.x;
    u_xlat3.y = u_xlat10_12 * _NoiselDistortionValue + u_xlat16_2.x;
    u_xlat10_12 = texture(_WaterfallSpecTex, u_xlat3.xy).x;
    u_xlat16_3.xyz = vec3(u_xlat10_12) * _WaterfallSpecColor.xyz;
    u_xlat9.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat10_12 = texture(_ShadowMapTexture, u_xlat9.xy).x;
    u_xlat9.x = (-_ShadowStrength) + 1.0;
    u_xlat12 = u_xlat10_12 * u_xlat9.x + _ShadowStrength;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat12) + u_xlat16_3.xyz;
    u_xlat9.xy = vec2(_Time.y * _FoamUVCoord01.z, _Time.y * _FoamUVCoord01.w);
    u_xlat9.xy = u_xlat1.xy * _FoamUVCoord01.xy + u_xlat9.xy;
    u_xlat10_12 = texture(_WaterfallTex01, u_xlat9.xy).x;
    u_xlat9.xy = vec2(_Time.y * _FoamUVCoord02.z, _Time.y * _FoamUVCoord02.w);
    u_xlat1.xy = u_xlat1.xy * _FoamUVCoord02.xy + u_xlat9.xy;
    u_xlat10_1 = texture(_WaterfallTex01, u_xlat1.xy).y;
    u_xlat16_12 = u_xlat10_12 + u_xlat10_1;
    u_xlat1.x = vs_TEXCOORD4.y * _FoamRange + _FoamOffset;
    u_xlat12 = u_xlat16_12 + u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat1.x = (-u_xlat1.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat12 * u_xlat1.x;
    u_xlat0.xyz = u_xlat1.xxx * _FoamColor.xyz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * _ES_MainLightColor.xyz;
    u_xlat16_1 = max(_LightColor0.w, 1.0);
    u_xlat1.xyz = u_xlat0.xyz * vec3(u_xlat16_1);
    u_xlat0.x = vs_TEXCOORD4.y * _AlphaBottomRange + _AlphaBottomOffset;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(_BottomAlphaToggle==1.0);
#else
    u_xlatb4 = _BottomAlphaToggle==1.0;
#endif
    u_xlat0.x = (u_xlatb4) ? u_xlat0.x : 1.0;
    u_xlat4.x = vs_TEXCOORD4.y * _AlphaRange + _AlphaOffset;
    u_xlat4.x = (-u_xlat4.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat4.x = u_xlat4.x * _Opacity;
    u_xlat0.x = u_xlat0.x * u_xlat4.x;
    u_xlat1.w = u_xlat12 * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "HALF_RESOLUTION_PARTICLE_ON" "MSAA_INTERPOLATION" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
uniform 	vec4 hlslcc_mtx4x4_mhyJitteredVP[4];
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec4 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
float u_xlat14;
float u_xlat21;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD5.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat0.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position = u_xlat0;
    vs_TEXCOORD2.zw = u_xlat0.zw;
    vs_COLOR0 = in_COLOR0;
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat14 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat14 = inversesqrt(u_xlat14);
    u_xlat2.xyz = vec3(u_xlat14) * u_xlat2.xyz;
    u_xlat16_3.x = u_xlat2.y * u_xlat2.y;
    u_xlat16_3.x = u_xlat2.x * u_xlat2.x + (-u_xlat16_3.x);
    u_xlat16_4 = u_xlat2.yzzx * u_xlat2.xyzz;
    u_xlat16_5.x = dot(unity_SHBr, u_xlat16_4);
    u_xlat16_5.y = dot(unity_SHBg, u_xlat16_4);
    u_xlat16_5.z = dot(unity_SHBb, u_xlat16_4);
    u_xlat16_3.xyz = unity_SHC.xyz * u_xlat16_3.xxx + u_xlat16_5.xyz;
    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat2.w = 1.0;
    u_xlat16_4.x = dot(unity_SHAr, u_xlat2);
    u_xlat16_4.y = dot(unity_SHAg, u_xlat2);
    u_xlat16_4.z = dot(unity_SHAb, u_xlat2);
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
    vs_TEXCOORD1.xyz = u_xlat16_3.xyz;
    vs_TEXCOORD1.w = 1.0;
    u_xlat6.x = float(0.5);
    u_xlat6.z = float(0.5);
    u_xlat6.y = _ProjectionParams.x;
    u_xlat0.xyz = u_xlat0.xyw * u_xlat6.xyz;
    u_xlat0.w = u_xlat0.y * 0.5;
    vs_TEXCOORD2.xy = u_xlat0.zz + u_xlat0.xw;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_mhyJitteredVP[1];
    u_xlat0 = hlslcc_mtx4x4_mhyJitteredVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_mhyJitteredVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_mhyJitteredVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat1.xyz = vec3(u_xlat6.z * u_xlat0.x, u_xlat6.y * u_xlat0.y, u_xlat6.z * u_xlat0.w);
    vs_TEXCOORD3.zw = u_xlat0.zw;
    u_xlat1.w = u_xlat1.y * 0.5;
    vs_TEXCOORD3.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat0.x = dot(hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, hlslcc_mtx4x4unity_ObjectToWorld[0].xyz);
    vs_TEXCOORD4.z = sqrt(u_xlat0.x);
    u_xlat0.x = dot(hlslcc_mtx4x4unity_ObjectToWorld[1].xyz, hlslcc_mtx4x4unity_ObjectToWorld[1].xyz);
    vs_TEXCOORD4.w = sqrt(u_xlat0.x);
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD5.w = 0.0;
    u_xlat0.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat0.xyz;
    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    vs_TEXCOORD6.xyz = u_xlat0.xyz;
    vs_TEXCOORD6.w = 0.0;
    vs_TEXCOORD7.xyz = u_xlat2.xyz;
    vs_TEXCOORD7.w = 0.0;
    u_xlat1.xyz = u_xlat0.yzx * u_xlat2.zxy;
    u_xlat0.xyz = u_xlat2.yzx * u_xlat0.zxy + (-u_xlat1.xyz);
    u_xlat21 = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD8.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    vs_TEXCOORD8.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 _LightColor0;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	float _AlphaRange;
uniform 	float _AlphaOffset;
uniform 	float _Opacity;
uniform 	mediump float _BottomAlphaToggle;
uniform 	float _AlphaBottomRange;
uniform 	float _AlphaBottomOffset;
uniform 	vec4 _WaterfallTex01_ST;
uniform 	mediump vec4 _FoamUVCoord01;
uniform 	mediump vec4 _FoamUVCoord02;
uniform 	float _FoamRange;
uniform 	float _FoamOffset;
uniform 	vec4 _DayColor;
uniform 	vec4 _BottomColor;
uniform 	vec4 _TopColor;
uniform 	float _ColorGradientRange;
uniform 	float _ColorGradientOffset;
uniform 	vec4 _ReflectionColor_Dark;
uniform 	vec4 _ReflectionColor_Light;
uniform 	float _Normal01_U_Speed;
uniform 	vec4 _Normal01_ST;
uniform 	float _Normal01_VSpeed;
uniform 	float _Normal02_U_Speed;
uniform 	vec4 _Normal02_ST;
uniform 	float _Normal02_V_Speed;
uniform 	vec4 _DistortionIntensity;
uniform 	float _ReflectionBrightness;
uniform 	float _ReflectionIntensity;
uniform 	float _WaterFall01_Speed;
uniform 	float _Waterfall02_Speed;
uniform 	mediump vec4 _WaterfallPatternColor;
uniform 	float _Waterfall01Brightness;
uniform 	float _Waterfall02Brightness;
uniform 	float _SprayRange;
uniform 	float _SprayOffset;
uniform 	float _ShadowStrength;
uniform 	vec4 _WaterfallSpecTex_ST;
uniform 	float _Detail01_U_Speed;
uniform 	vec4 _NoiseTex_ST;
uniform 	float _Detail01_V_Speed;
uniform 	float _NoiselDistortionValue;
uniform 	mediump vec4 _WaterfallSpecColor;
uniform 	mediump vec4 _FoamColor;
uniform 	vec3 _ES_MainLightColor;
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _WaterfallTex01;
uniform lowp sampler2D _Normal01;
uniform lowp sampler2D _Normal02;
uniform lowp samplerCube _Reflection;
uniform lowp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _WaterfallSpecTex;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
in highp vec4 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
lowp vec3 u_xlat10_0;
vec4 u_xlat1;
mediump float u_xlat16_1;
lowp float u_xlat10_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
float u_xlat8;
bool u_xlatb8;
vec2 u_xlat9;
lowp float u_xlat10_9;
float u_xlat12;
mediump float u_xlat16_12;
lowp float u_xlat10_12;
float u_xlat13;
lowp float u_xlat10_15;
void main()
{
    u_xlat0.xy = vs_TEXCOORD4.xy * _Normal01_ST.xy + _Normal01_ST.zw;
    u_xlat0.x = u_xlat0.x * vs_TEXCOORD4.z;
    u_xlat1.x = _Time.y * _Normal01_U_Speed + u_xlat0.x;
    u_xlat0.x = _Time.y * _Normal01_VSpeed;
    u_xlat1.y = u_xlat0.y * vs_TEXCOORD4.w + u_xlat0.x;
    u_xlat10_0.xyz = texture(_Normal01, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xy = vs_TEXCOORD4.xy * _Normal02_ST.xy + _Normal02_ST.zw;
    u_xlat0.xy = vec2(u_xlat0.x * vs_TEXCOORD4.z, u_xlat0.y * vs_TEXCOORD4.w);
    u_xlat1.x = _Time.y * _Normal02_U_Speed + u_xlat0.x;
    u_xlat1.y = _Time.y * _Normal02_V_Speed + u_xlat0.y;
    u_xlat10_0.xyz = texture(_Normal02, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_2.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = u_xlat16_2.xyz * _DistortionIntensity.xyz;
    u_xlat1.x = vs_TEXCOORD6.x;
    u_xlat1.y = vs_TEXCOORD8.x;
    u_xlat1.z = vs_TEXCOORD7.x;
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat3.x = vs_TEXCOORD6.y;
    u_xlat3.y = vs_TEXCOORD8.y;
    u_xlat3.z = vs_TEXCOORD7.y;
    u_xlat1.y = dot(u_xlat3.xyz, u_xlat0.xyz);
    u_xlat3.x = vs_TEXCOORD6.z;
    u_xlat3.y = vs_TEXCOORD8.z;
    u_xlat3.z = vs_TEXCOORD7.z;
    u_xlat1.z = dot(u_xlat3.xyz, u_xlat0.xyz);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
    u_xlat12 = dot((-u_xlat1.xyz), u_xlat0.xyz);
    u_xlat12 = u_xlat12 + u_xlat12;
    u_xlat0.xyz = u_xlat0.xyz * (-vec3(u_xlat12)) + (-u_xlat1.xyz);
    u_xlat10_0.x = texture(_Reflection, u_xlat0.xyz).x;
    u_xlat4.xyz = (-_ReflectionColor_Dark.xyz) + _ReflectionColor_Light.xyz;
    u_xlat0.xyz = u_xlat10_0.xxx * u_xlat4.xyz + _ReflectionColor_Dark.xyz;
    u_xlat12 = vs_TEXCOORD4.y * _ColorGradientRange + _ColorGradientOffset;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat1.xyz = (-_BottomColor.xyz) + _TopColor.xyz;
    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz + _BottomColor.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.200000003, 0.200000003, 0.200000003);
    u_xlat0.xyz = u_xlat0.xyz * vec3(_ReflectionBrightness) + (-u_xlat1.xyz);
    u_xlat0.xyz = vec3(vec3(_ReflectionIntensity, _ReflectionIntensity, _ReflectionIntensity)) * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat1.xy = vs_TEXCOORD4.xy * _WaterfallTex01_ST.xy + _WaterfallTex01_ST.zw;
    u_xlat1.xy = vec2(u_xlat1.x * vs_TEXCOORD4.z, u_xlat1.y * vs_TEXCOORD4.w);
    u_xlat1.zw = _Time.yy * vec2(_WaterFall01_Speed, _Waterfall02_Speed) + u_xlat1.yy;
    u_xlat10_12 = texture(_WaterfallTex01, u_xlat1.xz).x;
    u_xlat10_9 = texture(_WaterfallTex01, u_xlat1.xw).y;
    u_xlat16_2.x = (-u_xlat10_12) + u_xlat10_9;
    u_xlat16_2.x = u_xlat10_9 * u_xlat16_2.x + u_xlat10_12;
    u_xlat12 = u_xlat10_12 * _Waterfall01Brightness;
    u_xlat3.xyz = u_xlat16_2.xxx * _WaterfallPatternColor.xyz + (-u_xlat0.xyz);
    u_xlat13 = u_xlat10_9 * _Waterfall02Brightness + (-u_xlat12);
    u_xlat9.x = u_xlat10_9 * _Waterfall02Brightness;
    u_xlat12 = u_xlat9.x * u_xlat13 + u_xlat12;
    u_xlat9.x = vs_TEXCOORD4.y * _SprayRange + _SprayOffset;
    u_xlat9.x = (-u_xlat9.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat9.x = min(max(u_xlat9.x, 0.0), 1.0);
#else
    u_xlat9.x = clamp(u_xlat9.x, 0.0, 1.0);
#endif
    u_xlat12 = u_xlat12 * u_xlat9.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * _DayColor.xyz;
    u_xlat9.xy = vs_TEXCOORD4.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat3.x = _Time.y * _Detail01_U_Speed + u_xlat9.x;
    u_xlat3.y = _Time.y * _Detail01_V_Speed + u_xlat9.y;
    u_xlat10_12 = texture(_NoiseTex, u_xlat3.xy).x;
    u_xlat16_2.x = vs_TEXCOORD4.w * 0.5;
    u_xlat9.xy = vs_TEXCOORD4.xy * _WaterfallSpecTex_ST.xy + _WaterfallSpecTex_ST.zw;
    u_xlat16_2.x = vs_TEXCOORD4.w * u_xlat9.y + (-u_xlat16_2.x);
    u_xlat3.x = u_xlat10_12 * _NoiselDistortionValue + u_xlat9.x;
    u_xlat3.y = u_xlat10_12 * _NoiselDistortionValue + u_xlat16_2.x;
    u_xlat10_12 = texture(_WaterfallSpecTex, u_xlat3.xy).x;
    u_xlat16_3.xyz = vec3(u_xlat10_12) * _WaterfallSpecColor.xyz;
    u_xlat12 = (-_ShadowStrength) + 1.0;
    u_xlat9.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat10_15 = texture(_ShadowMapTexture, u_xlat9.xy).x;
    u_xlat9.x = texture(_CameraDepthTextureScaled, u_xlat9.xy).x;
    u_xlat9.x = u_xlat9.x * _ProjectionParams.z + (-vs_TEXCOORD3.w);
    u_xlat12 = u_xlat10_15 * u_xlat12 + _ShadowStrength;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat12) + u_xlat16_3.xyz;
    u_xlat3.xy = vec2(_Time.y * _FoamUVCoord01.z, _Time.y * _FoamUVCoord01.w);
    u_xlat3.xy = u_xlat1.xy * _FoamUVCoord01.xy + u_xlat3.xy;
    u_xlat10_12 = texture(_WaterfallTex01, u_xlat3.xy).x;
    u_xlat3.xy = vec2(_Time.y * _FoamUVCoord02.z, _Time.y * _FoamUVCoord02.w);
    u_xlat1.xy = u_xlat1.xy * _FoamUVCoord02.xy + u_xlat3.xy;
    u_xlat10_1 = texture(_WaterfallTex01, u_xlat1.xy).y;
    u_xlat16_12 = u_xlat10_12 + u_xlat10_1;
    u_xlat1.x = vs_TEXCOORD4.y * _FoamRange + _FoamOffset;
    u_xlat12 = u_xlat16_12 + u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat1.x = (-u_xlat1.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat12 * u_xlat1.x;
    u_xlat0.xyz = u_xlat1.xxx * _FoamColor.xyz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * _ES_MainLightColor.xyz;
    u_xlat16_1 = max(_LightColor0.w, 1.0);
    u_xlat2.xyz = u_xlat0.xyz * vec3(u_xlat16_1);
    u_xlat0.x = u_xlat9.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat4.x = u_xlat9.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat8 = (-u_xlat4.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat8 + u_xlat4.x;
    u_xlat4.x = vs_TEXCOORD4.y * _AlphaRange + _AlphaOffset;
    u_xlat4.x = (-u_xlat4.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat4.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _Opacity;
    u_xlat4.x = vs_TEXCOORD4.y * _AlphaBottomRange + _AlphaBottomOffset;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(_BottomAlphaToggle==1.0);
#else
    u_xlatb8 = _BottomAlphaToggle==1.0;
#endif
    u_xlat4.x = (u_xlatb8) ? u_xlat4.x : 1.0;
    u_xlat0.x = u_xlat4.x * u_xlat0.x;
    u_xlat2.w = u_xlat12 * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.w = min(max(u_xlat2.w, 0.0), 1.0);
#else
    u_xlat2.w = clamp(u_xlat2.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat2;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "MSAA_INTERPOLATION" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
uniform 	vec4 hlslcc_mtx4x4_mhyJitteredVP[4];
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
vec3 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump vec3 u_xlat16_4;
mediump vec4 u_xlat16_5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
vec3 u_xlat8;
float u_xlat24;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    vs_TEXCOORD5.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    u_xlat1.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position = u_xlat1;
    vs_TEXCOORD2.zw = u_xlat1.zw;
    vs_COLOR0 = in_COLOR0;
    u_xlat3.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat3.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat3.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat8.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat3.xyz = u_xlat8.xxx * u_xlat3.xyz;
    u_xlat16_4.x = u_xlat3.y * u_xlat3.y;
    u_xlat16_4.x = u_xlat3.x * u_xlat3.x + (-u_xlat16_4.x);
    u_xlat16_5 = u_xlat3.yzzx * u_xlat3.xyzz;
    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_5);
    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_5);
    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_5);
    u_xlat16_4.xyz = unity_SHC.xyz * u_xlat16_4.xxx + u_xlat16_6.xyz;
    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat3.w = 1.0;
    u_xlat16_5.x = dot(unity_SHAr, u_xlat3);
    u_xlat16_5.y = dot(unity_SHAg, u_xlat3);
    u_xlat16_5.z = dot(unity_SHAb, u_xlat3);
    u_xlat16_4.xyz = u_xlat16_4.xyz + u_xlat16_5.xyz;
    vs_TEXCOORD1.xyz = u_xlat16_4.xyz;
    vs_TEXCOORD1.w = 1.0;
    u_xlat7.x = float(0.5);
    u_xlat7.z = float(0.5);
    u_xlat7.y = _ProjectionParams.x;
    u_xlat1.xyz = u_xlat1.xyw * u_xlat7.xyz;
    u_xlat1.w = u_xlat1.y * 0.5;
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4_mhyJitteredVP[1];
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[3] * u_xlat2.wwww + u_xlat1;
    u_xlat2.xyz = vec3(u_xlat7.z * u_xlat1.x, u_xlat7.y * u_xlat1.y, u_xlat7.z * u_xlat1.w);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    u_xlat2.w = u_xlat2.y * 0.5;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy;
    u_xlat8.x = dot(unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz);
    vs_TEXCOORD4.z = sqrt(u_xlat8.x);
    u_xlat8.x = dot(unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz);
    vs_TEXCOORD4.w = sqrt(u_xlat8.x);
    vs_TEXCOORD5.w = 0.0;
    u_xlat8.xyz = in_TANGENT0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat8.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_TANGENT0.xxx + u_xlat8.xyz;
    u_xlat0.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_TANGENT0.zzz + u_xlat8.xyz;
    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat0.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    vs_TEXCOORD6.xyz = u_xlat0.xyz;
    vs_TEXCOORD6.w = 0.0;
    vs_TEXCOORD7.xyz = u_xlat3.xyz;
    vs_TEXCOORD7.w = 0.0;
    u_xlat1.xyz = u_xlat0.yzx * u_xlat3.zxy;
    u_xlat0.xyz = u_xlat3.yzx * u_xlat0.zxy + (-u_xlat1.xyz);
    u_xlat24 = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD8.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    vs_TEXCOORD8.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 _LightColor0;
uniform 	float _AlphaRange;
uniform 	float _AlphaOffset;
uniform 	float _Opacity;
uniform 	mediump float _BottomAlphaToggle;
uniform 	float _AlphaBottomRange;
uniform 	float _AlphaBottomOffset;
uniform 	vec4 _WaterfallTex01_ST;
uniform 	mediump vec4 _FoamUVCoord01;
uniform 	mediump vec4 _FoamUVCoord02;
uniform 	float _FoamRange;
uniform 	float _FoamOffset;
uniform 	vec4 _DayColor;
uniform 	vec4 _BottomColor;
uniform 	vec4 _TopColor;
uniform 	float _ColorGradientRange;
uniform 	float _ColorGradientOffset;
uniform 	vec4 _ReflectionColor_Dark;
uniform 	vec4 _ReflectionColor_Light;
uniform 	float _Normal01_U_Speed;
uniform 	vec4 _Normal01_ST;
uniform 	float _Normal01_VSpeed;
uniform 	float _Normal02_U_Speed;
uniform 	vec4 _Normal02_ST;
uniform 	float _Normal02_V_Speed;
uniform 	vec4 _DistortionIntensity;
uniform 	float _ReflectionBrightness;
uniform 	float _ReflectionIntensity;
uniform 	float _WaterFall01_Speed;
uniform 	float _Waterfall02_Speed;
uniform 	mediump vec4 _WaterfallPatternColor;
uniform 	float _Waterfall01Brightness;
uniform 	float _Waterfall02Brightness;
uniform 	float _SprayRange;
uniform 	float _SprayOffset;
uniform 	float _ShadowStrength;
uniform 	vec4 _WaterfallSpecTex_ST;
uniform 	float _Detail01_U_Speed;
uniform 	vec4 _NoiseTex_ST;
uniform 	float _Detail01_V_Speed;
uniform 	float _NoiselDistortionValue;
uniform 	mediump vec4 _WaterfallSpecColor;
uniform 	mediump vec4 _FoamColor;
uniform 	vec3 _ES_MainLightColor;
uniform lowp sampler2D _WaterfallTex01;
uniform lowp sampler2D _Normal01;
uniform lowp sampler2D _Normal02;
uniform lowp samplerCube _Reflection;
uniform lowp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _WaterfallSpecTex;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
in highp vec4 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
lowp vec3 u_xlat10_0;
vec4 u_xlat1;
mediump float u_xlat16_1;
lowp float u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
bool u_xlatb4;
vec2 u_xlat9;
lowp float u_xlat10_9;
float u_xlat12;
mediump float u_xlat16_12;
lowp float u_xlat10_12;
float u_xlat13;
void main()
{
    u_xlat0.xy = vs_TEXCOORD4.xy * _Normal01_ST.xy + _Normal01_ST.zw;
    u_xlat0.x = u_xlat0.x * vs_TEXCOORD4.z;
    u_xlat1.x = _Time.y * _Normal01_U_Speed + u_xlat0.x;
    u_xlat0.x = _Time.y * _Normal01_VSpeed;
    u_xlat1.y = u_xlat0.y * vs_TEXCOORD4.w + u_xlat0.x;
    u_xlat10_0.xyz = texture(_Normal01, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xy = vs_TEXCOORD4.xy * _Normal02_ST.xy + _Normal02_ST.zw;
    u_xlat0.xy = vec2(u_xlat0.x * vs_TEXCOORD4.z, u_xlat0.y * vs_TEXCOORD4.w);
    u_xlat1.x = _Time.y * _Normal02_U_Speed + u_xlat0.x;
    u_xlat1.y = _Time.y * _Normal02_V_Speed + u_xlat0.y;
    u_xlat10_0.xyz = texture(_Normal02, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_2.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = u_xlat16_2.xyz * _DistortionIntensity.xyz;
    u_xlat1.x = vs_TEXCOORD6.x;
    u_xlat1.y = vs_TEXCOORD8.x;
    u_xlat1.z = vs_TEXCOORD7.x;
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat3.x = vs_TEXCOORD6.y;
    u_xlat3.y = vs_TEXCOORD8.y;
    u_xlat3.z = vs_TEXCOORD7.y;
    u_xlat1.y = dot(u_xlat3.xyz, u_xlat0.xyz);
    u_xlat3.x = vs_TEXCOORD6.z;
    u_xlat3.y = vs_TEXCOORD8.z;
    u_xlat3.z = vs_TEXCOORD7.z;
    u_xlat1.z = dot(u_xlat3.xyz, u_xlat0.xyz);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
    u_xlat12 = dot((-u_xlat1.xyz), u_xlat0.xyz);
    u_xlat12 = u_xlat12 + u_xlat12;
    u_xlat0.xyz = u_xlat0.xyz * (-vec3(u_xlat12)) + (-u_xlat1.xyz);
    u_xlat10_0.x = texture(_Reflection, u_xlat0.xyz).x;
    u_xlat4.xyz = (-_ReflectionColor_Dark.xyz) + _ReflectionColor_Light.xyz;
    u_xlat0.xyz = u_xlat10_0.xxx * u_xlat4.xyz + _ReflectionColor_Dark.xyz;
    u_xlat12 = vs_TEXCOORD4.y * _ColorGradientRange + _ColorGradientOffset;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat1.xyz = (-_BottomColor.xyz) + _TopColor.xyz;
    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz + _BottomColor.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.200000003, 0.200000003, 0.200000003);
    u_xlat0.xyz = u_xlat0.xyz * vec3(_ReflectionBrightness) + (-u_xlat1.xyz);
    u_xlat0.xyz = vec3(vec3(_ReflectionIntensity, _ReflectionIntensity, _ReflectionIntensity)) * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat1.xy = vs_TEXCOORD4.xy * _WaterfallTex01_ST.xy + _WaterfallTex01_ST.zw;
    u_xlat1.xy = vec2(u_xlat1.x * vs_TEXCOORD4.z, u_xlat1.y * vs_TEXCOORD4.w);
    u_xlat1.zw = _Time.yy * vec2(_WaterFall01_Speed, _Waterfall02_Speed) + u_xlat1.yy;
    u_xlat10_12 = texture(_WaterfallTex01, u_xlat1.xz).x;
    u_xlat10_9 = texture(_WaterfallTex01, u_xlat1.xw).y;
    u_xlat16_2.x = (-u_xlat10_12) + u_xlat10_9;
    u_xlat16_2.x = u_xlat10_9 * u_xlat16_2.x + u_xlat10_12;
    u_xlat12 = u_xlat10_12 * _Waterfall01Brightness;
    u_xlat3.xyz = u_xlat16_2.xxx * _WaterfallPatternColor.xyz + (-u_xlat0.xyz);
    u_xlat13 = u_xlat10_9 * _Waterfall02Brightness + (-u_xlat12);
    u_xlat9.x = u_xlat10_9 * _Waterfall02Brightness;
    u_xlat12 = u_xlat9.x * u_xlat13 + u_xlat12;
    u_xlat9.x = vs_TEXCOORD4.y * _SprayRange + _SprayOffset;
    u_xlat9.x = (-u_xlat9.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat9.x = min(max(u_xlat9.x, 0.0), 1.0);
#else
    u_xlat9.x = clamp(u_xlat9.x, 0.0, 1.0);
#endif
    u_xlat12 = u_xlat12 * u_xlat9.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * _DayColor.xyz;
    u_xlat9.xy = vs_TEXCOORD4.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat3.x = _Time.y * _Detail01_U_Speed + u_xlat9.x;
    u_xlat3.y = _Time.y * _Detail01_V_Speed + u_xlat9.y;
    u_xlat10_12 = texture(_NoiseTex, u_xlat3.xy).x;
    u_xlat16_2.x = vs_TEXCOORD4.w * 0.5;
    u_xlat9.xy = vs_TEXCOORD4.xy * _WaterfallSpecTex_ST.xy + _WaterfallSpecTex_ST.zw;
    u_xlat16_2.x = vs_TEXCOORD4.w * u_xlat9.y + (-u_xlat16_2.x);
    u_xlat3.x = u_xlat10_12 * _NoiselDistortionValue + u_xlat9.x;
    u_xlat3.y = u_xlat10_12 * _NoiselDistortionValue + u_xlat16_2.x;
    u_xlat10_12 = texture(_WaterfallSpecTex, u_xlat3.xy).x;
    u_xlat16_3.xyz = vec3(u_xlat10_12) * _WaterfallSpecColor.xyz;
    u_xlat9.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat10_12 = texture(_ShadowMapTexture, u_xlat9.xy).x;
    u_xlat9.x = (-_ShadowStrength) + 1.0;
    u_xlat12 = u_xlat10_12 * u_xlat9.x + _ShadowStrength;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat12) + u_xlat16_3.xyz;
    u_xlat9.xy = vec2(_Time.y * _FoamUVCoord01.z, _Time.y * _FoamUVCoord01.w);
    u_xlat9.xy = u_xlat1.xy * _FoamUVCoord01.xy + u_xlat9.xy;
    u_xlat10_12 = texture(_WaterfallTex01, u_xlat9.xy).x;
    u_xlat9.xy = vec2(_Time.y * _FoamUVCoord02.z, _Time.y * _FoamUVCoord02.w);
    u_xlat1.xy = u_xlat1.xy * _FoamUVCoord02.xy + u_xlat9.xy;
    u_xlat10_1 = texture(_WaterfallTex01, u_xlat1.xy).y;
    u_xlat16_12 = u_xlat10_12 + u_xlat10_1;
    u_xlat1.x = vs_TEXCOORD4.y * _FoamRange + _FoamOffset;
    u_xlat12 = u_xlat16_12 + u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat1.x = (-u_xlat1.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat12 * u_xlat1.x;
    u_xlat0.xyz = u_xlat1.xxx * _FoamColor.xyz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * _ES_MainLightColor.xyz;
    u_xlat16_1 = max(_LightColor0.w, 1.0);
    u_xlat1.xyz = u_xlat0.xyz * vec3(u_xlat16_1);
    u_xlat0.x = vs_TEXCOORD4.y * _AlphaBottomRange + _AlphaBottomOffset;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(_BottomAlphaToggle==1.0);
#else
    u_xlatb4 = _BottomAlphaToggle==1.0;
#endif
    u_xlat0.x = (u_xlatb4) ? u_xlat0.x : 1.0;
    u_xlat4.x = vs_TEXCOORD4.y * _AlphaRange + _AlphaOffset;
    u_xlat4.x = (-u_xlat4.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat4.x = u_xlat4.x * _Opacity;
    u_xlat0.x = u_xlat0.x * u_xlat4.x;
    u_xlat1.w = u_xlat12 * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "MSAA_INTERPOLATION" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
uniform 	vec4 hlslcc_mtx4x4_mhyJitteredVP[4];
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
vec3 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump vec3 u_xlat16_4;
mediump vec4 u_xlat16_5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
vec3 u_xlat8;
float u_xlat24;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    vs_TEXCOORD5.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    u_xlat1.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position = u_xlat1;
    vs_TEXCOORD2.zw = u_xlat1.zw;
    vs_COLOR0 = in_COLOR0;
    u_xlat3.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat3.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat3.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat8.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat3.xyz = u_xlat8.xxx * u_xlat3.xyz;
    u_xlat16_4.x = u_xlat3.y * u_xlat3.y;
    u_xlat16_4.x = u_xlat3.x * u_xlat3.x + (-u_xlat16_4.x);
    u_xlat16_5 = u_xlat3.yzzx * u_xlat3.xyzz;
    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_5);
    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_5);
    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_5);
    u_xlat16_4.xyz = unity_SHC.xyz * u_xlat16_4.xxx + u_xlat16_6.xyz;
    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat3.w = 1.0;
    u_xlat16_5.x = dot(unity_SHAr, u_xlat3);
    u_xlat16_5.y = dot(unity_SHAg, u_xlat3);
    u_xlat16_5.z = dot(unity_SHAb, u_xlat3);
    u_xlat16_4.xyz = u_xlat16_4.xyz + u_xlat16_5.xyz;
    vs_TEXCOORD1.xyz = u_xlat16_4.xyz;
    vs_TEXCOORD1.w = 1.0;
    u_xlat7.x = float(0.5);
    u_xlat7.z = float(0.5);
    u_xlat7.y = _ProjectionParams.x;
    u_xlat1.xyz = u_xlat1.xyw * u_xlat7.xyz;
    u_xlat1.w = u_xlat1.y * 0.5;
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4_mhyJitteredVP[1];
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[3] * u_xlat2.wwww + u_xlat1;
    u_xlat2.xyz = vec3(u_xlat7.z * u_xlat1.x, u_xlat7.y * u_xlat1.y, u_xlat7.z * u_xlat1.w);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    u_xlat2.w = u_xlat2.y * 0.5;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy;
    u_xlat8.x = dot(unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz);
    vs_TEXCOORD4.z = sqrt(u_xlat8.x);
    u_xlat8.x = dot(unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz);
    vs_TEXCOORD4.w = sqrt(u_xlat8.x);
    vs_TEXCOORD5.w = 0.0;
    u_xlat8.xyz = in_TANGENT0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat8.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_TANGENT0.xxx + u_xlat8.xyz;
    u_xlat0.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_TANGENT0.zzz + u_xlat8.xyz;
    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat0.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    vs_TEXCOORD6.xyz = u_xlat0.xyz;
    vs_TEXCOORD6.w = 0.0;
    vs_TEXCOORD7.xyz = u_xlat3.xyz;
    vs_TEXCOORD7.w = 0.0;
    u_xlat1.xyz = u_xlat0.yzx * u_xlat3.zxy;
    u_xlat0.xyz = u_xlat3.yzx * u_xlat0.zxy + (-u_xlat1.xyz);
    u_xlat24 = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD8.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    vs_TEXCOORD8.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 _LightColor0;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	float _AlphaRange;
uniform 	float _AlphaOffset;
uniform 	float _Opacity;
uniform 	mediump float _BottomAlphaToggle;
uniform 	float _AlphaBottomRange;
uniform 	float _AlphaBottomOffset;
uniform 	vec4 _WaterfallTex01_ST;
uniform 	mediump vec4 _FoamUVCoord01;
uniform 	mediump vec4 _FoamUVCoord02;
uniform 	float _FoamRange;
uniform 	float _FoamOffset;
uniform 	vec4 _DayColor;
uniform 	vec4 _BottomColor;
uniform 	vec4 _TopColor;
uniform 	float _ColorGradientRange;
uniform 	float _ColorGradientOffset;
uniform 	vec4 _ReflectionColor_Dark;
uniform 	vec4 _ReflectionColor_Light;
uniform 	float _Normal01_U_Speed;
uniform 	vec4 _Normal01_ST;
uniform 	float _Normal01_VSpeed;
uniform 	float _Normal02_U_Speed;
uniform 	vec4 _Normal02_ST;
uniform 	float _Normal02_V_Speed;
uniform 	vec4 _DistortionIntensity;
uniform 	float _ReflectionBrightness;
uniform 	float _ReflectionIntensity;
uniform 	float _WaterFall01_Speed;
uniform 	float _Waterfall02_Speed;
uniform 	mediump vec4 _WaterfallPatternColor;
uniform 	float _Waterfall01Brightness;
uniform 	float _Waterfall02Brightness;
uniform 	float _SprayRange;
uniform 	float _SprayOffset;
uniform 	float _ShadowStrength;
uniform 	vec4 _WaterfallSpecTex_ST;
uniform 	float _Detail01_U_Speed;
uniform 	vec4 _NoiseTex_ST;
uniform 	float _Detail01_V_Speed;
uniform 	float _NoiselDistortionValue;
uniform 	mediump vec4 _WaterfallSpecColor;
uniform 	mediump vec4 _FoamColor;
uniform 	vec3 _ES_MainLightColor;
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _WaterfallTex01;
uniform lowp sampler2D _Normal01;
uniform lowp sampler2D _Normal02;
uniform lowp samplerCube _Reflection;
uniform lowp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _WaterfallSpecTex;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
in highp vec4 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
lowp vec3 u_xlat10_0;
vec4 u_xlat1;
mediump float u_xlat16_1;
lowp float u_xlat10_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
float u_xlat8;
bool u_xlatb8;
vec2 u_xlat9;
lowp float u_xlat10_9;
float u_xlat12;
mediump float u_xlat16_12;
lowp float u_xlat10_12;
float u_xlat13;
lowp float u_xlat10_15;
void main()
{
    u_xlat0.xy = vs_TEXCOORD4.xy * _Normal01_ST.xy + _Normal01_ST.zw;
    u_xlat0.x = u_xlat0.x * vs_TEXCOORD4.z;
    u_xlat1.x = _Time.y * _Normal01_U_Speed + u_xlat0.x;
    u_xlat0.x = _Time.y * _Normal01_VSpeed;
    u_xlat1.y = u_xlat0.y * vs_TEXCOORD4.w + u_xlat0.x;
    u_xlat10_0.xyz = texture(_Normal01, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xy = vs_TEXCOORD4.xy * _Normal02_ST.xy + _Normal02_ST.zw;
    u_xlat0.xy = vec2(u_xlat0.x * vs_TEXCOORD4.z, u_xlat0.y * vs_TEXCOORD4.w);
    u_xlat1.x = _Time.y * _Normal02_U_Speed + u_xlat0.x;
    u_xlat1.y = _Time.y * _Normal02_V_Speed + u_xlat0.y;
    u_xlat10_0.xyz = texture(_Normal02, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_2.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = u_xlat16_2.xyz * _DistortionIntensity.xyz;
    u_xlat1.x = vs_TEXCOORD6.x;
    u_xlat1.y = vs_TEXCOORD8.x;
    u_xlat1.z = vs_TEXCOORD7.x;
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat3.x = vs_TEXCOORD6.y;
    u_xlat3.y = vs_TEXCOORD8.y;
    u_xlat3.z = vs_TEXCOORD7.y;
    u_xlat1.y = dot(u_xlat3.xyz, u_xlat0.xyz);
    u_xlat3.x = vs_TEXCOORD6.z;
    u_xlat3.y = vs_TEXCOORD8.z;
    u_xlat3.z = vs_TEXCOORD7.z;
    u_xlat1.z = dot(u_xlat3.xyz, u_xlat0.xyz);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
    u_xlat12 = dot((-u_xlat1.xyz), u_xlat0.xyz);
    u_xlat12 = u_xlat12 + u_xlat12;
    u_xlat0.xyz = u_xlat0.xyz * (-vec3(u_xlat12)) + (-u_xlat1.xyz);
    u_xlat10_0.x = texture(_Reflection, u_xlat0.xyz).x;
    u_xlat4.xyz = (-_ReflectionColor_Dark.xyz) + _ReflectionColor_Light.xyz;
    u_xlat0.xyz = u_xlat10_0.xxx * u_xlat4.xyz + _ReflectionColor_Dark.xyz;
    u_xlat12 = vs_TEXCOORD4.y * _ColorGradientRange + _ColorGradientOffset;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat1.xyz = (-_BottomColor.xyz) + _TopColor.xyz;
    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz + _BottomColor.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.200000003, 0.200000003, 0.200000003);
    u_xlat0.xyz = u_xlat0.xyz * vec3(_ReflectionBrightness) + (-u_xlat1.xyz);
    u_xlat0.xyz = vec3(vec3(_ReflectionIntensity, _ReflectionIntensity, _ReflectionIntensity)) * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat1.xy = vs_TEXCOORD4.xy * _WaterfallTex01_ST.xy + _WaterfallTex01_ST.zw;
    u_xlat1.xy = vec2(u_xlat1.x * vs_TEXCOORD4.z, u_xlat1.y * vs_TEXCOORD4.w);
    u_xlat1.zw = _Time.yy * vec2(_WaterFall01_Speed, _Waterfall02_Speed) + u_xlat1.yy;
    u_xlat10_12 = texture(_WaterfallTex01, u_xlat1.xz).x;
    u_xlat10_9 = texture(_WaterfallTex01, u_xlat1.xw).y;
    u_xlat16_2.x = (-u_xlat10_12) + u_xlat10_9;
    u_xlat16_2.x = u_xlat10_9 * u_xlat16_2.x + u_xlat10_12;
    u_xlat12 = u_xlat10_12 * _Waterfall01Brightness;
    u_xlat3.xyz = u_xlat16_2.xxx * _WaterfallPatternColor.xyz + (-u_xlat0.xyz);
    u_xlat13 = u_xlat10_9 * _Waterfall02Brightness + (-u_xlat12);
    u_xlat9.x = u_xlat10_9 * _Waterfall02Brightness;
    u_xlat12 = u_xlat9.x * u_xlat13 + u_xlat12;
    u_xlat9.x = vs_TEXCOORD4.y * _SprayRange + _SprayOffset;
    u_xlat9.x = (-u_xlat9.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat9.x = min(max(u_xlat9.x, 0.0), 1.0);
#else
    u_xlat9.x = clamp(u_xlat9.x, 0.0, 1.0);
#endif
    u_xlat12 = u_xlat12 * u_xlat9.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * _DayColor.xyz;
    u_xlat9.xy = vs_TEXCOORD4.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat3.x = _Time.y * _Detail01_U_Speed + u_xlat9.x;
    u_xlat3.y = _Time.y * _Detail01_V_Speed + u_xlat9.y;
    u_xlat10_12 = texture(_NoiseTex, u_xlat3.xy).x;
    u_xlat16_2.x = vs_TEXCOORD4.w * 0.5;
    u_xlat9.xy = vs_TEXCOORD4.xy * _WaterfallSpecTex_ST.xy + _WaterfallSpecTex_ST.zw;
    u_xlat16_2.x = vs_TEXCOORD4.w * u_xlat9.y + (-u_xlat16_2.x);
    u_xlat3.x = u_xlat10_12 * _NoiselDistortionValue + u_xlat9.x;
    u_xlat3.y = u_xlat10_12 * _NoiselDistortionValue + u_xlat16_2.x;
    u_xlat10_12 = texture(_WaterfallSpecTex, u_xlat3.xy).x;
    u_xlat16_3.xyz = vec3(u_xlat10_12) * _WaterfallSpecColor.xyz;
    u_xlat12 = (-_ShadowStrength) + 1.0;
    u_xlat9.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat10_15 = texture(_ShadowMapTexture, u_xlat9.xy).x;
    u_xlat9.x = texture(_CameraDepthTextureScaled, u_xlat9.xy).x;
    u_xlat9.x = u_xlat9.x * _ProjectionParams.z + (-vs_TEXCOORD3.w);
    u_xlat12 = u_xlat10_15 * u_xlat12 + _ShadowStrength;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat12) + u_xlat16_3.xyz;
    u_xlat3.xy = vec2(_Time.y * _FoamUVCoord01.z, _Time.y * _FoamUVCoord01.w);
    u_xlat3.xy = u_xlat1.xy * _FoamUVCoord01.xy + u_xlat3.xy;
    u_xlat10_12 = texture(_WaterfallTex01, u_xlat3.xy).x;
    u_xlat3.xy = vec2(_Time.y * _FoamUVCoord02.z, _Time.y * _FoamUVCoord02.w);
    u_xlat1.xy = u_xlat1.xy * _FoamUVCoord02.xy + u_xlat3.xy;
    u_xlat10_1 = texture(_WaterfallTex01, u_xlat1.xy).y;
    u_xlat16_12 = u_xlat10_12 + u_xlat10_1;
    u_xlat1.x = vs_TEXCOORD4.y * _FoamRange + _FoamOffset;
    u_xlat12 = u_xlat16_12 + u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat1.x = (-u_xlat1.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat12 * u_xlat1.x;
    u_xlat0.xyz = u_xlat1.xxx * _FoamColor.xyz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * _ES_MainLightColor.xyz;
    u_xlat16_1 = max(_LightColor0.w, 1.0);
    u_xlat2.xyz = u_xlat0.xyz * vec3(u_xlat16_1);
    u_xlat0.x = u_xlat9.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat4.x = u_xlat9.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat8 = (-u_xlat4.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat8 + u_xlat4.x;
    u_xlat4.x = vs_TEXCOORD4.y * _AlphaRange + _AlphaOffset;
    u_xlat4.x = (-u_xlat4.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat4.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _Opacity;
    u_xlat4.x = vs_TEXCOORD4.y * _AlphaBottomRange + _AlphaBottomOffset;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(_BottomAlphaToggle==1.0);
#else
    u_xlatb8 = _BottomAlphaToggle==1.0;
#endif
    u_xlat4.x = (u_xlatb8) ? u_xlat4.x : 1.0;
    u_xlat0.x = u_xlat4.x * u_xlat0.x;
    u_xlat2.w = u_xlat12 * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.w = min(max(u_xlat2.w, 0.0), 1.0);
#else
    u_xlat2.w = clamp(u_xlat2.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat2;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "MSAA_INTERPOLATION" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
uniform 	vec4 hlslcc_mtx4x4_mhyJitteredVP[4];
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec4 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
float u_xlat14;
float u_xlat21;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD5.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat0.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position = u_xlat0;
    vs_TEXCOORD2.zw = u_xlat0.zw;
    vs_COLOR0 = in_COLOR0;
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat14 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat14 = inversesqrt(u_xlat14);
    u_xlat2.xyz = vec3(u_xlat14) * u_xlat2.xyz;
    u_xlat16_3.x = u_xlat2.y * u_xlat2.y;
    u_xlat16_3.x = u_xlat2.x * u_xlat2.x + (-u_xlat16_3.x);
    u_xlat16_4 = u_xlat2.yzzx * u_xlat2.xyzz;
    u_xlat16_5.x = dot(unity_SHBr, u_xlat16_4);
    u_xlat16_5.y = dot(unity_SHBg, u_xlat16_4);
    u_xlat16_5.z = dot(unity_SHBb, u_xlat16_4);
    u_xlat16_3.xyz = unity_SHC.xyz * u_xlat16_3.xxx + u_xlat16_5.xyz;
    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat2.w = 1.0;
    u_xlat16_4.x = dot(unity_SHAr, u_xlat2);
    u_xlat16_4.y = dot(unity_SHAg, u_xlat2);
    u_xlat16_4.z = dot(unity_SHAb, u_xlat2);
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
    vs_TEXCOORD1.xyz = u_xlat16_3.xyz;
    vs_TEXCOORD1.w = 1.0;
    u_xlat6.x = float(0.5);
    u_xlat6.z = float(0.5);
    u_xlat6.y = _ProjectionParams.x;
    u_xlat0.xyz = u_xlat0.xyw * u_xlat6.xyz;
    u_xlat0.w = u_xlat0.y * 0.5;
    vs_TEXCOORD2.xy = u_xlat0.zz + u_xlat0.xw;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_mhyJitteredVP[1];
    u_xlat0 = hlslcc_mtx4x4_mhyJitteredVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_mhyJitteredVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_mhyJitteredVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat1.xyz = vec3(u_xlat6.z * u_xlat0.x, u_xlat6.y * u_xlat0.y, u_xlat6.z * u_xlat0.w);
    vs_TEXCOORD3.zw = u_xlat0.zw;
    u_xlat1.w = u_xlat1.y * 0.5;
    vs_TEXCOORD3.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat0.x = dot(hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, hlslcc_mtx4x4unity_ObjectToWorld[0].xyz);
    vs_TEXCOORD4.z = sqrt(u_xlat0.x);
    u_xlat0.x = dot(hlslcc_mtx4x4unity_ObjectToWorld[1].xyz, hlslcc_mtx4x4unity_ObjectToWorld[1].xyz);
    vs_TEXCOORD4.w = sqrt(u_xlat0.x);
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD5.w = 0.0;
    u_xlat0.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat0.xyz;
    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    vs_TEXCOORD6.xyz = u_xlat0.xyz;
    vs_TEXCOORD6.w = 0.0;
    vs_TEXCOORD7.xyz = u_xlat2.xyz;
    vs_TEXCOORD7.w = 0.0;
    u_xlat1.xyz = u_xlat0.yzx * u_xlat2.zxy;
    u_xlat0.xyz = u_xlat2.yzx * u_xlat0.zxy + (-u_xlat1.xyz);
    u_xlat21 = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD8.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    vs_TEXCOORD8.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _LightColor0;
uniform 	float _AlphaRange;
uniform 	float _AlphaOffset;
uniform 	float _Opacity;
uniform 	mediump float _BottomAlphaToggle;
uniform 	float _AlphaBottomRange;
uniform 	float _AlphaBottomOffset;
uniform 	vec4 _WaterfallTex01_ST;
uniform 	mediump vec4 _FoamUVCoord01;
uniform 	mediump vec4 _FoamUVCoord02;
uniform 	float _FoamRange;
uniform 	float _FoamOffset;
uniform 	vec4 _DayColor;
uniform 	vec4 _BottomColor;
uniform 	vec4 _TopColor;
uniform 	float _ColorGradientRange;
uniform 	float _ColorGradientOffset;
uniform 	vec4 _ReflectionColor_Dark;
uniform 	vec4 _ReflectionColor_Light;
uniform 	float _Normal01_U_Speed;
uniform 	vec4 _Normal01_ST;
uniform 	float _Normal01_VSpeed;
uniform 	float _Normal02_U_Speed;
uniform 	vec4 _Normal02_ST;
uniform 	float _Normal02_V_Speed;
uniform 	vec4 _DistortionIntensity;
uniform 	float _ReflectionBrightness;
uniform 	float _ReflectionIntensity;
uniform 	float _WaterFall01_Speed;
uniform 	float _Waterfall02_Speed;
uniform 	mediump vec4 _WaterfallPatternColor;
uniform 	float _Waterfall01Brightness;
uniform 	float _Waterfall02Brightness;
uniform 	float _SprayRange;
uniform 	float _SprayOffset;
uniform 	float _ShadowStrength;
uniform 	vec4 _WaterfallSpecTex_ST;
uniform 	float _Detail01_U_Speed;
uniform 	vec4 _NoiseTex_ST;
uniform 	float _Detail01_V_Speed;
uniform 	float _NoiselDistortionValue;
uniform 	mediump vec4 _WaterfallSpecColor;
uniform 	mediump vec4 _FoamColor;
uniform 	vec3 _ES_MainLightColor;
uniform lowp sampler2D _WaterfallTex01;
uniform lowp sampler2D _Normal01;
uniform lowp sampler2D _Normal02;
uniform lowp samplerCube _Reflection;
uniform lowp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _WaterfallSpecTex;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
in highp vec4 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
bvec2 u_xlatb0;
vec4 u_xlat1;
lowp float u_xlat10_1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
vec4 u_xlat3;
vec3 u_xlat4;
lowp vec3 u_xlat10_4;
vec3 u_xlat5;
vec3 u_xlat6;
mediump vec3 u_xlat16_7;
float u_xlat8;
float u_xlat9;
vec3 u_xlat10;
vec2 u_xlat16;
mediump float u_xlat16_16;
lowp float u_xlat10_16;
bool u_xlatb16;
float u_xlat18;
float u_xlat24;
mediump float u_xlat16_24;
lowp float u_xlat10_24;
float u_xlat25;
lowp float u_xlat10_25;
float u_xlat27;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.x = vs_TEXCOORD4.y * _AlphaRange + _AlphaOffset;
    u_xlat8 = vs_TEXCOORD4.y * _AlphaBottomRange + _AlphaBottomOffset;
#ifdef UNITY_ADRENO_ES3
    u_xlat8 = min(max(u_xlat8, 0.0), 1.0);
#else
    u_xlat8 = clamp(u_xlat8, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(_BottomAlphaToggle==1.0);
#else
    u_xlatb16 = _BottomAlphaToggle==1.0;
#endif
    u_xlat8 = (u_xlatb16) ? u_xlat8 : 1.0;
    u_xlat16.xy = vs_TEXCOORD4.xy * _WaterfallTex01_ST.xy + _WaterfallTex01_ST.zw;
    u_xlat1.xy = vec2(u_xlat16.x * vs_TEXCOORD4.z, u_xlat16.y * vs_TEXCOORD4.w);
    u_xlat16.xy = vec2(_Time.y * _FoamUVCoord01.z, _Time.y * _FoamUVCoord01.w);
    u_xlat16.xy = u_xlat1.xy * _FoamUVCoord01.xy + u_xlat16.xy;
    u_xlat2.xy = vec2(_Time.y * _FoamUVCoord02.z, _Time.y * _FoamUVCoord02.w);
    u_xlat2.xy = u_xlat1.xy * _FoamUVCoord02.xy + u_xlat2.xy;
    u_xlat18 = vs_TEXCOORD4.y * _FoamRange + _FoamOffset;
    u_xlat10_16 = texture(_WaterfallTex01, u_xlat16.xy).x;
    u_xlat10_24 = texture(_WaterfallTex01, u_xlat2.xy).y;
    u_xlat16_16 = u_xlat10_24 + u_xlat10_16;
    u_xlat16.x = u_xlat18 + u_xlat16_16;
#ifdef UNITY_ADRENO_ES3
    u_xlat16.x = min(max(u_xlat16.x, 0.0), 1.0);
#else
    u_xlat16.x = clamp(u_xlat16.x, 0.0, 1.0);
#endif
    u_xlat24 = vs_TEXCOORD4.y * _ColorGradientRange + _ColorGradientOffset;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat2.xyw = (-_BottomColor.xyz) + _TopColor.xyz;
    u_xlat2.xyw = vec3(u_xlat24) * u_xlat2.xyw + _BottomColor.xyz;
    u_xlat3.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat24 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat3.xyz = vec3(u_xlat24) * u_xlat3.xyz;
    u_xlat4.xy = vs_TEXCOORD4.xy * _Normal01_ST.xy + _Normal01_ST.zw;
    u_xlat24 = _Time.y * _Normal01_VSpeed;
    u_xlat27 = u_xlat4.x * vs_TEXCOORD4.z;
    u_xlat5.x = _Time.y * _Normal01_U_Speed + u_xlat27;
    u_xlat5.y = u_xlat4.y * vs_TEXCOORD4.w + u_xlat24;
    u_xlat4.xy = vs_TEXCOORD4.xy * _Normal02_ST.xy + _Normal02_ST.zw;
    u_xlat4.xy = vec2(u_xlat4.x * vs_TEXCOORD4.z, u_xlat4.y * vs_TEXCOORD4.w);
    u_xlat6.x = _Time.y * _Normal02_U_Speed + u_xlat4.x;
    u_xlat6.y = _Time.y * _Normal02_V_Speed + u_xlat4.y;
    u_xlat10_4.xyz = texture(_Normal01, u_xlat5.xy).xyz;
    u_xlat16_7.xyz = u_xlat10_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat10_4.xyz = texture(_Normal02, u_xlat6.xy).xyz;
    u_xlat16_7.xyz = u_xlat10_4.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_7.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat4.xyz = u_xlat16_7.xyz * _DistortionIntensity.xyz;
    u_xlat5.x = vs_TEXCOORD6.x;
    u_xlat5.y = vs_TEXCOORD8.x;
    u_xlat5.z = vs_TEXCOORD7.x;
    u_xlat5.x = dot(u_xlat5.xyz, u_xlat4.xyz);
    u_xlat6.x = vs_TEXCOORD6.y;
    u_xlat6.y = vs_TEXCOORD8.y;
    u_xlat6.z = vs_TEXCOORD7.y;
    u_xlat5.y = dot(u_xlat6.xyz, u_xlat4.xyz);
    u_xlat6.x = vs_TEXCOORD6.z;
    u_xlat6.y = vs_TEXCOORD8.z;
    u_xlat6.z = vs_TEXCOORD7.z;
    u_xlat5.z = dot(u_xlat6.xyz, u_xlat4.xyz);
    u_xlat24 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat4.xyz = vec3(u_xlat24) * u_xlat5.xyz;
    u_xlat24 = dot((-u_xlat3.xyz), u_xlat4.xyz);
    u_xlat24 = u_xlat24 + u_xlat24;
    u_xlat3.xyz = u_xlat4.xyz * (-vec3(u_xlat24)) + (-u_xlat3.xyz);
    u_xlat10_24 = texture(_Reflection, u_xlat3.xyz).x;
    u_xlat3.xyz = (-_ReflectionColor_Dark.xyz) + _ReflectionColor_Light.xyz;
    u_xlat3.xyz = vec3(u_xlat10_24) * u_xlat3.xyz + _ReflectionColor_Dark.xyz;
    u_xlat4.xyz = u_xlat2.xyw * vec3(0.200000003, 0.200000003, 0.200000003);
    u_xlat2.xyw = u_xlat2.xyw * u_xlat3.xyz;
    u_xlat2.xyw = u_xlat2.xyw * vec3(_ReflectionBrightness) + (-u_xlat4.xyz);
    u_xlat2.xyw = vec3(vec3(_ReflectionIntensity, _ReflectionIntensity, _ReflectionIntensity)) * u_xlat2.xyw + u_xlat4.xyz;
    u_xlat1.zw = _Time.yy * vec2(_WaterFall01_Speed, _Waterfall02_Speed) + u_xlat1.yy;
    u_xlat10_24 = texture(_WaterfallTex01, u_xlat1.xz).x;
    u_xlat10_1 = texture(_WaterfallTex01, u_xlat1.xw).y;
    u_xlat16_7.x = (-u_xlat10_24) + u_xlat10_1;
    u_xlat16_7.x = u_xlat10_1 * u_xlat16_7.x + u_xlat10_24;
    u_xlat9 = u_xlat10_1 * _Waterfall02Brightness;
    u_xlat24 = u_xlat10_24 * _Waterfall01Brightness;
    u_xlat1.x = u_xlat10_1 * _Waterfall02Brightness + (-u_xlat24);
    u_xlat24 = u_xlat9 * u_xlat1.x + u_xlat24;
    u_xlat1.x = vs_TEXCOORD4.y * _SprayRange + _SprayOffset;
    u_xlat1.x = (-u_xlat1.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat24 = u_xlat24 * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat16_7.xxx * _WaterfallPatternColor.xyz + (-u_xlat2.xyw);
    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz + u_xlat2.xyw;
    u_xlat2.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat10_24 = texture(_ShadowMapTexture, u_xlat2.xy).x;
    u_xlat25 = (-_ShadowStrength) + 1.0;
    u_xlat24 = u_xlat10_24 * u_xlat25 + _ShadowStrength;
    u_xlat2.xy = vs_TEXCOORD4.xy * _WaterfallSpecTex_ST.xy + _WaterfallSpecTex_ST.zw;
    u_xlat16_7.x = vs_TEXCOORD4.w * 0.5;
    u_xlat16_7.x = vs_TEXCOORD4.w * u_xlat2.y + (-u_xlat16_7.x);
    u_xlat10.xz = vs_TEXCOORD4.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat3.x = _Time.y * _Detail01_U_Speed + u_xlat10.x;
    u_xlat3.y = _Time.y * _Detail01_V_Speed + u_xlat10.z;
    u_xlat10_25 = texture(_NoiseTex, u_xlat3.xy).x;
    u_xlat2.x = u_xlat10_25 * _NoiselDistortionValue + u_xlat2.x;
    u_xlat2.y = u_xlat10_25 * _NoiselDistortionValue + u_xlat16_7.x;
    u_xlat10_25 = texture(_WaterfallSpecTex, u_xlat2.xy).x;
    u_xlat16_2.xyw = vec3(u_xlat10_25) * _WaterfallSpecColor.xyz;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x * _Opacity;
    u_xlat0.x = u_xlat8 * u_xlat0.x;
    u_xlat3.w = u_xlat16.x * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat3.w = min(max(u_xlat3.w, 0.0), 1.0);
#else
    u_xlat3.w = clamp(u_xlat3.w, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat1.xyz * _DayColor.xyz;
    u_xlat0.xyw = u_xlat1.xyz * vec3(u_xlat24) + u_xlat16_2.xyw;
    u_xlat1.x = (-u_xlat18) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat16.x = u_xlat16.x * u_xlat1.x;
    u_xlat0.xyz = u_xlat16.xxx * _FoamColor.xyz + u_xlat0.xyw;
    u_xlat0.xyz = u_xlat0.xyz * _ES_MainLightColor.xyz;
    u_xlat16_24 = max(_LightColor0.w, 1.0);
    u_xlat3.xyz = vec3(u_xlat16_24) * u_xlat0.xyz;
    SV_Target0 = u_xlat3;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "MSAA_INTERPOLATION" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
uniform 	vec4 hlslcc_mtx4x4_mhyJitteredVP[4];
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec4 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
float u_xlat14;
float u_xlat21;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD5.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat0.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position = u_xlat0;
    vs_TEXCOORD2.zw = u_xlat0.zw;
    vs_COLOR0 = in_COLOR0;
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat14 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat14 = inversesqrt(u_xlat14);
    u_xlat2.xyz = vec3(u_xlat14) * u_xlat2.xyz;
    u_xlat16_3.x = u_xlat2.y * u_xlat2.y;
    u_xlat16_3.x = u_xlat2.x * u_xlat2.x + (-u_xlat16_3.x);
    u_xlat16_4 = u_xlat2.yzzx * u_xlat2.xyzz;
    u_xlat16_5.x = dot(unity_SHBr, u_xlat16_4);
    u_xlat16_5.y = dot(unity_SHBg, u_xlat16_4);
    u_xlat16_5.z = dot(unity_SHBb, u_xlat16_4);
    u_xlat16_3.xyz = unity_SHC.xyz * u_xlat16_3.xxx + u_xlat16_5.xyz;
    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat2.w = 1.0;
    u_xlat16_4.x = dot(unity_SHAr, u_xlat2);
    u_xlat16_4.y = dot(unity_SHAg, u_xlat2);
    u_xlat16_4.z = dot(unity_SHAb, u_xlat2);
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
    vs_TEXCOORD1.xyz = u_xlat16_3.xyz;
    vs_TEXCOORD1.w = 1.0;
    u_xlat6.x = float(0.5);
    u_xlat6.z = float(0.5);
    u_xlat6.y = _ProjectionParams.x;
    u_xlat0.xyz = u_xlat0.xyw * u_xlat6.xyz;
    u_xlat0.w = u_xlat0.y * 0.5;
    vs_TEXCOORD2.xy = u_xlat0.zz + u_xlat0.xw;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_mhyJitteredVP[1];
    u_xlat0 = hlslcc_mtx4x4_mhyJitteredVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_mhyJitteredVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_mhyJitteredVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat1.xyz = vec3(u_xlat6.z * u_xlat0.x, u_xlat6.y * u_xlat0.y, u_xlat6.z * u_xlat0.w);
    vs_TEXCOORD3.zw = u_xlat0.zw;
    u_xlat1.w = u_xlat1.y * 0.5;
    vs_TEXCOORD3.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat0.x = dot(hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, hlslcc_mtx4x4unity_ObjectToWorld[0].xyz);
    vs_TEXCOORD4.z = sqrt(u_xlat0.x);
    u_xlat0.x = dot(hlslcc_mtx4x4unity_ObjectToWorld[1].xyz, hlslcc_mtx4x4unity_ObjectToWorld[1].xyz);
    vs_TEXCOORD4.w = sqrt(u_xlat0.x);
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD5.w = 0.0;
    u_xlat0.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat0.xyz;
    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    vs_TEXCOORD6.xyz = u_xlat0.xyz;
    vs_TEXCOORD6.w = 0.0;
    vs_TEXCOORD7.xyz = u_xlat2.xyz;
    vs_TEXCOORD7.w = 0.0;
    u_xlat1.xyz = u_xlat0.yzx * u_xlat2.zxy;
    u_xlat0.xyz = u_xlat2.yzx * u_xlat0.zxy + (-u_xlat1.xyz);
    u_xlat21 = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD8.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    vs_TEXCOORD8.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _LightColor0;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	float _AlphaRange;
uniform 	float _AlphaOffset;
uniform 	float _Opacity;
uniform 	mediump float _BottomAlphaToggle;
uniform 	float _AlphaBottomRange;
uniform 	float _AlphaBottomOffset;
uniform 	vec4 _WaterfallTex01_ST;
uniform 	mediump vec4 _FoamUVCoord01;
uniform 	mediump vec4 _FoamUVCoord02;
uniform 	float _FoamRange;
uniform 	float _FoamOffset;
uniform 	vec4 _DayColor;
uniform 	vec4 _BottomColor;
uniform 	vec4 _TopColor;
uniform 	float _ColorGradientRange;
uniform 	float _ColorGradientOffset;
uniform 	vec4 _ReflectionColor_Dark;
uniform 	vec4 _ReflectionColor_Light;
uniform 	float _Normal01_U_Speed;
uniform 	vec4 _Normal01_ST;
uniform 	float _Normal01_VSpeed;
uniform 	float _Normal02_U_Speed;
uniform 	vec4 _Normal02_ST;
uniform 	float _Normal02_V_Speed;
uniform 	vec4 _DistortionIntensity;
uniform 	float _ReflectionBrightness;
uniform 	float _ReflectionIntensity;
uniform 	float _WaterFall01_Speed;
uniform 	float _Waterfall02_Speed;
uniform 	mediump vec4 _WaterfallPatternColor;
uniform 	float _Waterfall01Brightness;
uniform 	float _Waterfall02Brightness;
uniform 	float _SprayRange;
uniform 	float _SprayOffset;
uniform 	float _ShadowStrength;
uniform 	vec4 _WaterfallSpecTex_ST;
uniform 	float _Detail01_U_Speed;
uniform 	vec4 _NoiseTex_ST;
uniform 	float _Detail01_V_Speed;
uniform 	float _NoiselDistortionValue;
uniform 	mediump vec4 _WaterfallSpecColor;
uniform 	mediump vec4 _FoamColor;
uniform 	vec3 _ES_MainLightColor;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _WaterfallTex01;
uniform lowp sampler2D _Normal01;
uniform lowp sampler2D _Normal02;
uniform lowp samplerCube _Reflection;
uniform lowp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _WaterfallSpecTex;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
in highp vec4 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
lowp float u_xlat10_0;
bvec2 u_xlatb0;
float u_xlat1;
vec4 u_xlat2;
lowp float u_xlat10_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
vec4 u_xlat4;
vec3 u_xlat5;
lowp vec3 u_xlat10_5;
vec3 u_xlat6;
vec3 u_xlat7;
mediump vec3 u_xlat16_8;
vec3 u_xlat9;
lowp float u_xlat10_9;
vec2 u_xlat10;
mediump float u_xlat16_10;
lowp float u_xlat10_10;
bool u_xlatb10;
float u_xlat11;
vec2 u_xlat12;
float u_xlat18;
float u_xlat19;
lowp float u_xlat10_19;
float u_xlat27;
mediump float u_xlat16_27;
float u_xlat28;
float u_xlat30;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat18 = texture(_CameraDepthTexture, u_xlat0.xy).x;
    u_xlat18 = _ZBufferParams.z * u_xlat18 + _ZBufferParams.w;
    u_xlat18 = float(1.0) / u_xlat18;
    u_xlat18 = u_xlat18 + (-vs_TEXCOORD3.w);
    u_xlat27 = u_xlat18 * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
    u_xlat18 = u_xlat18 / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat1 = (-u_xlat27) + 1.0;
    u_xlat18 = u_xlat18 * u_xlat1 + u_xlat27;
    u_xlat27 = vs_TEXCOORD4.y * _AlphaRange + _AlphaOffset;
    u_xlat1 = vs_TEXCOORD4.y * _AlphaBottomRange + _AlphaBottomOffset;
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(_BottomAlphaToggle==1.0);
#else
    u_xlatb10 = _BottomAlphaToggle==1.0;
#endif
    u_xlat1 = (u_xlatb10) ? u_xlat1 : 1.0;
    u_xlat10.xy = vs_TEXCOORD4.xy * _WaterfallTex01_ST.xy + _WaterfallTex01_ST.zw;
    u_xlat2.xy = vec2(u_xlat10.x * vs_TEXCOORD4.z, u_xlat10.y * vs_TEXCOORD4.w);
    u_xlat10.xy = vec2(_Time.y * _FoamUVCoord01.z, _Time.y * _FoamUVCoord01.w);
    u_xlat10.xy = u_xlat2.xy * _FoamUVCoord01.xy + u_xlat10.xy;
    u_xlat3.xy = vec2(_Time.y * _FoamUVCoord02.z, _Time.y * _FoamUVCoord02.w);
    u_xlat3.xy = u_xlat2.xy * _FoamUVCoord02.xy + u_xlat3.xy;
    u_xlat28 = vs_TEXCOORD4.y * _FoamRange + _FoamOffset;
    u_xlat10_10 = texture(_WaterfallTex01, u_xlat10.xy).x;
    u_xlat10_19 = texture(_WaterfallTex01, u_xlat3.xy).y;
    u_xlat16_10 = u_xlat10_19 + u_xlat10_10;
    u_xlat10.x = u_xlat28 + u_xlat16_10;
#ifdef UNITY_ADRENO_ES3
    u_xlat10.x = min(max(u_xlat10.x, 0.0), 1.0);
#else
    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
#endif
    u_xlat19 = vs_TEXCOORD4.y * _ColorGradientRange + _ColorGradientOffset;
#ifdef UNITY_ADRENO_ES3
    u_xlat19 = min(max(u_xlat19, 0.0), 1.0);
#else
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
#endif
    u_xlat3.xyz = (-_BottomColor.xyz) + _TopColor.xyz;
    u_xlat3.xyz = vec3(u_xlat19) * u_xlat3.xyz + _BottomColor.xyz;
    u_xlat4.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat19 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat19 = inversesqrt(u_xlat19);
    u_xlat4.xyz = vec3(u_xlat19) * u_xlat4.xyz;
    u_xlat5.xy = vs_TEXCOORD4.xy * _Normal01_ST.xy + _Normal01_ST.zw;
    u_xlat19 = _Time.y * _Normal01_VSpeed;
    u_xlat30 = u_xlat5.x * vs_TEXCOORD4.z;
    u_xlat6.x = _Time.y * _Normal01_U_Speed + u_xlat30;
    u_xlat6.y = u_xlat5.y * vs_TEXCOORD4.w + u_xlat19;
    u_xlat5.xy = vs_TEXCOORD4.xy * _Normal02_ST.xy + _Normal02_ST.zw;
    u_xlat5.xy = vec2(u_xlat5.x * vs_TEXCOORD4.z, u_xlat5.y * vs_TEXCOORD4.w);
    u_xlat7.x = _Time.y * _Normal02_U_Speed + u_xlat5.x;
    u_xlat7.y = _Time.y * _Normal02_V_Speed + u_xlat5.y;
    u_xlat10_5.xyz = texture(_Normal01, u_xlat6.xy).xyz;
    u_xlat16_8.xyz = u_xlat10_5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat10_5.xyz = texture(_Normal02, u_xlat7.xy).xyz;
    u_xlat16_8.xyz = u_xlat10_5.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_8.xyz;
    u_xlat16_8.xyz = u_xlat16_8.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat5.xyz = u_xlat16_8.xyz * _DistortionIntensity.xyz;
    u_xlat6.x = vs_TEXCOORD6.x;
    u_xlat6.y = vs_TEXCOORD8.x;
    u_xlat6.z = vs_TEXCOORD7.x;
    u_xlat6.x = dot(u_xlat6.xyz, u_xlat5.xyz);
    u_xlat7.x = vs_TEXCOORD6.y;
    u_xlat7.y = vs_TEXCOORD8.y;
    u_xlat7.z = vs_TEXCOORD7.y;
    u_xlat6.y = dot(u_xlat7.xyz, u_xlat5.xyz);
    u_xlat7.x = vs_TEXCOORD6.z;
    u_xlat7.y = vs_TEXCOORD8.z;
    u_xlat7.z = vs_TEXCOORD7.z;
    u_xlat6.z = dot(u_xlat7.xyz, u_xlat5.xyz);
    u_xlat19 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat19 = inversesqrt(u_xlat19);
    u_xlat5.xyz = vec3(u_xlat19) * u_xlat6.xyz;
    u_xlat19 = dot((-u_xlat4.xyz), u_xlat5.xyz);
    u_xlat19 = u_xlat19 + u_xlat19;
    u_xlat4.xyz = u_xlat5.xyz * (-vec3(u_xlat19)) + (-u_xlat4.xyz);
    u_xlat10_19 = texture(_Reflection, u_xlat4.xyz).x;
    u_xlat4.xyz = (-_ReflectionColor_Dark.xyz) + _ReflectionColor_Light.xyz;
    u_xlat4.xyz = vec3(u_xlat10_19) * u_xlat4.xyz + _ReflectionColor_Dark.xyz;
    u_xlat5.xyz = u_xlat3.xyz * vec3(0.200000003, 0.200000003, 0.200000003);
    u_xlat3.xyz = u_xlat3.xyz * u_xlat4.xyz;
    u_xlat3.xyz = u_xlat3.xyz * vec3(_ReflectionBrightness) + (-u_xlat5.xyz);
    u_xlat3.xyz = vec3(vec3(_ReflectionIntensity, _ReflectionIntensity, _ReflectionIntensity)) * u_xlat3.xyz + u_xlat5.xyz;
    u_xlat2.zw = _Time.yy * vec2(_WaterFall01_Speed, _Waterfall02_Speed) + u_xlat2.yy;
    u_xlat10_19 = texture(_WaterfallTex01, u_xlat2.xz).x;
    u_xlat10_2 = texture(_WaterfallTex01, u_xlat2.xw).y;
    u_xlat16_8.x = (-u_xlat10_19) + u_xlat10_2;
    u_xlat16_8.x = u_xlat10_2 * u_xlat16_8.x + u_xlat10_19;
    u_xlat11 = u_xlat10_2 * _Waterfall02Brightness;
    u_xlat19 = u_xlat10_19 * _Waterfall01Brightness;
    u_xlat2.x = u_xlat10_2 * _Waterfall02Brightness + (-u_xlat19);
    u_xlat19 = u_xlat11 * u_xlat2.x + u_xlat19;
    u_xlat2.x = vs_TEXCOORD4.y * _SprayRange + _SprayOffset;
    u_xlat2.x = (-u_xlat2.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat19 = u_xlat19 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat19 = min(max(u_xlat19, 0.0), 1.0);
#else
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
#endif
    u_xlat2.xyz = u_xlat16_8.xxx * _WaterfallPatternColor.xyz + (-u_xlat3.xyz);
    u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz + u_xlat3.xyz;
    u_xlat10_0 = texture(_ShadowMapTexture, u_xlat0.xy).x;
    u_xlat9.x = (-_ShadowStrength) + 1.0;
    u_xlat0.x = u_xlat10_0 * u_xlat9.x + _ShadowStrength;
    u_xlat3.xy = vs_TEXCOORD4.xy * _WaterfallSpecTex_ST.xy + _WaterfallSpecTex_ST.zw;
    u_xlat16_8.x = vs_TEXCOORD4.w * 0.5;
    u_xlat16_8.x = vs_TEXCOORD4.w * u_xlat3.y + (-u_xlat16_8.x);
    u_xlat12.xy = vs_TEXCOORD4.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat4.x = _Time.y * _Detail01_U_Speed + u_xlat12.x;
    u_xlat4.y = _Time.y * _Detail01_V_Speed + u_xlat12.y;
    u_xlat10_9 = texture(_NoiseTex, u_xlat4.xy).x;
    u_xlat3.x = u_xlat10_9 * _NoiselDistortionValue + u_xlat3.x;
    u_xlat3.y = u_xlat10_9 * _NoiselDistortionValue + u_xlat16_8.x;
    u_xlat10_9 = texture(_WaterfallSpecTex, u_xlat3.xy).x;
    u_xlat16_3.xyz = vec3(u_xlat10_9) * _WaterfallSpecColor.xyz;
    u_xlat9.x = (-u_xlat27) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat9.x = min(max(u_xlat9.x, 0.0), 1.0);
#else
    u_xlat9.x = clamp(u_xlat9.x, 0.0, 1.0);
#endif
    u_xlat9.x = u_xlat9.x * u_xlat18;
    u_xlat9.x = u_xlat9.x * _Opacity;
    u_xlat9.x = u_xlat1 * u_xlat9.x;
    u_xlat4.w = u_xlat10.x * u_xlat9.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.w = min(max(u_xlat4.w, 0.0), 1.0);
#else
    u_xlat4.w = clamp(u_xlat4.w, 0.0, 1.0);
#endif
    u_xlat9.xyz = u_xlat2.xyz * _DayColor.xyz;
    u_xlat0.xyz = u_xlat9.xyz * u_xlat0.xxx + u_xlat16_3.xyz;
    u_xlat27 = (-u_xlat28) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
    u_xlat27 = u_xlat27 * u_xlat10.x;
    u_xlat0.xyz = vec3(u_xlat27) * _FoamColor.xyz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * _ES_MainLightColor.xyz;
    u_xlat16_27 = max(_LightColor0.w, 1.0);
    u_xlat4.xyz = vec3(u_xlat16_27) * u_xlat0.xyz;
    SV_Target0 = u_xlat4;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "MSAA_INTERPOLATION" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
uniform 	vec4 hlslcc_mtx4x4_mhyJitteredVP[4];
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
vec3 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump vec3 u_xlat16_4;
mediump vec4 u_xlat16_5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
vec3 u_xlat8;
float u_xlat24;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    vs_TEXCOORD5.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    u_xlat1.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position = u_xlat1;
    vs_TEXCOORD2.zw = u_xlat1.zw;
    vs_COLOR0 = in_COLOR0;
    u_xlat3.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat3.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat3.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat8.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat3.xyz = u_xlat8.xxx * u_xlat3.xyz;
    u_xlat16_4.x = u_xlat3.y * u_xlat3.y;
    u_xlat16_4.x = u_xlat3.x * u_xlat3.x + (-u_xlat16_4.x);
    u_xlat16_5 = u_xlat3.yzzx * u_xlat3.xyzz;
    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_5);
    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_5);
    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_5);
    u_xlat16_4.xyz = unity_SHC.xyz * u_xlat16_4.xxx + u_xlat16_6.xyz;
    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat3.w = 1.0;
    u_xlat16_5.x = dot(unity_SHAr, u_xlat3);
    u_xlat16_5.y = dot(unity_SHAg, u_xlat3);
    u_xlat16_5.z = dot(unity_SHAb, u_xlat3);
    u_xlat16_4.xyz = u_xlat16_4.xyz + u_xlat16_5.xyz;
    vs_TEXCOORD1.xyz = u_xlat16_4.xyz;
    vs_TEXCOORD1.w = 1.0;
    u_xlat7.x = float(0.5);
    u_xlat7.z = float(0.5);
    u_xlat7.y = _ProjectionParams.x;
    u_xlat1.xyz = u_xlat1.xyw * u_xlat7.xyz;
    u_xlat1.w = u_xlat1.y * 0.5;
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4_mhyJitteredVP[1];
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[3] * u_xlat2.wwww + u_xlat1;
    u_xlat2.xyz = vec3(u_xlat7.z * u_xlat1.x, u_xlat7.y * u_xlat1.y, u_xlat7.z * u_xlat1.w);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    u_xlat2.w = u_xlat2.y * 0.5;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy;
    u_xlat8.x = dot(unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz);
    vs_TEXCOORD4.z = sqrt(u_xlat8.x);
    u_xlat8.x = dot(unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz);
    vs_TEXCOORD4.w = sqrt(u_xlat8.x);
    vs_TEXCOORD5.w = 0.0;
    u_xlat8.xyz = in_TANGENT0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat8.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_TANGENT0.xxx + u_xlat8.xyz;
    u_xlat0.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_TANGENT0.zzz + u_xlat8.xyz;
    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat0.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    vs_TEXCOORD6.xyz = u_xlat0.xyz;
    vs_TEXCOORD6.w = 0.0;
    vs_TEXCOORD7.xyz = u_xlat3.xyz;
    vs_TEXCOORD7.w = 0.0;
    u_xlat1.xyz = u_xlat0.yzx * u_xlat3.zxy;
    u_xlat0.xyz = u_xlat3.yzx * u_xlat0.zxy + (-u_xlat1.xyz);
    u_xlat24 = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD8.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    vs_TEXCOORD8.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _LightColor0;
uniform 	float _AlphaRange;
uniform 	float _AlphaOffset;
uniform 	float _Opacity;
uniform 	mediump float _BottomAlphaToggle;
uniform 	float _AlphaBottomRange;
uniform 	float _AlphaBottomOffset;
uniform 	vec4 _WaterfallTex01_ST;
uniform 	mediump vec4 _FoamUVCoord01;
uniform 	mediump vec4 _FoamUVCoord02;
uniform 	float _FoamRange;
uniform 	float _FoamOffset;
uniform 	vec4 _DayColor;
uniform 	vec4 _BottomColor;
uniform 	vec4 _TopColor;
uniform 	float _ColorGradientRange;
uniform 	float _ColorGradientOffset;
uniform 	vec4 _ReflectionColor_Dark;
uniform 	vec4 _ReflectionColor_Light;
uniform 	float _Normal01_U_Speed;
uniform 	vec4 _Normal01_ST;
uniform 	float _Normal01_VSpeed;
uniform 	float _Normal02_U_Speed;
uniform 	vec4 _Normal02_ST;
uniform 	float _Normal02_V_Speed;
uniform 	vec4 _DistortionIntensity;
uniform 	float _ReflectionBrightness;
uniform 	float _ReflectionIntensity;
uniform 	float _WaterFall01_Speed;
uniform 	float _Waterfall02_Speed;
uniform 	mediump vec4 _WaterfallPatternColor;
uniform 	float _Waterfall01Brightness;
uniform 	float _Waterfall02Brightness;
uniform 	float _SprayRange;
uniform 	float _SprayOffset;
uniform 	float _ShadowStrength;
uniform 	vec4 _WaterfallSpecTex_ST;
uniform 	float _Detail01_U_Speed;
uniform 	vec4 _NoiseTex_ST;
uniform 	float _Detail01_V_Speed;
uniform 	float _NoiselDistortionValue;
uniform 	mediump vec4 _WaterfallSpecColor;
uniform 	mediump vec4 _FoamColor;
uniform 	vec3 _ES_MainLightColor;
uniform lowp sampler2D _WaterfallTex01;
uniform lowp sampler2D _Normal01;
uniform lowp sampler2D _Normal02;
uniform lowp samplerCube _Reflection;
uniform lowp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _WaterfallSpecTex;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
in highp vec4 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
bvec2 u_xlatb0;
vec4 u_xlat1;
lowp float u_xlat10_1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
vec4 u_xlat3;
vec3 u_xlat4;
lowp vec3 u_xlat10_4;
vec3 u_xlat5;
vec3 u_xlat6;
mediump vec3 u_xlat16_7;
float u_xlat8;
float u_xlat9;
vec3 u_xlat10;
vec2 u_xlat16;
mediump float u_xlat16_16;
lowp float u_xlat10_16;
bool u_xlatb16;
float u_xlat18;
float u_xlat24;
mediump float u_xlat16_24;
lowp float u_xlat10_24;
float u_xlat25;
lowp float u_xlat10_25;
float u_xlat27;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.x = vs_TEXCOORD4.y * _AlphaRange + _AlphaOffset;
    u_xlat8 = vs_TEXCOORD4.y * _AlphaBottomRange + _AlphaBottomOffset;
#ifdef UNITY_ADRENO_ES3
    u_xlat8 = min(max(u_xlat8, 0.0), 1.0);
#else
    u_xlat8 = clamp(u_xlat8, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(_BottomAlphaToggle==1.0);
#else
    u_xlatb16 = _BottomAlphaToggle==1.0;
#endif
    u_xlat8 = (u_xlatb16) ? u_xlat8 : 1.0;
    u_xlat16.xy = vs_TEXCOORD4.xy * _WaterfallTex01_ST.xy + _WaterfallTex01_ST.zw;
    u_xlat1.xy = vec2(u_xlat16.x * vs_TEXCOORD4.z, u_xlat16.y * vs_TEXCOORD4.w);
    u_xlat16.xy = vec2(_Time.y * _FoamUVCoord01.z, _Time.y * _FoamUVCoord01.w);
    u_xlat16.xy = u_xlat1.xy * _FoamUVCoord01.xy + u_xlat16.xy;
    u_xlat2.xy = vec2(_Time.y * _FoamUVCoord02.z, _Time.y * _FoamUVCoord02.w);
    u_xlat2.xy = u_xlat1.xy * _FoamUVCoord02.xy + u_xlat2.xy;
    u_xlat18 = vs_TEXCOORD4.y * _FoamRange + _FoamOffset;
    u_xlat10_16 = texture(_WaterfallTex01, u_xlat16.xy).x;
    u_xlat10_24 = texture(_WaterfallTex01, u_xlat2.xy).y;
    u_xlat16_16 = u_xlat10_24 + u_xlat10_16;
    u_xlat16.x = u_xlat18 + u_xlat16_16;
#ifdef UNITY_ADRENO_ES3
    u_xlat16.x = min(max(u_xlat16.x, 0.0), 1.0);
#else
    u_xlat16.x = clamp(u_xlat16.x, 0.0, 1.0);
#endif
    u_xlat24 = vs_TEXCOORD4.y * _ColorGradientRange + _ColorGradientOffset;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat2.xyw = (-_BottomColor.xyz) + _TopColor.xyz;
    u_xlat2.xyw = vec3(u_xlat24) * u_xlat2.xyw + _BottomColor.xyz;
    u_xlat3.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat24 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat3.xyz = vec3(u_xlat24) * u_xlat3.xyz;
    u_xlat4.xy = vs_TEXCOORD4.xy * _Normal01_ST.xy + _Normal01_ST.zw;
    u_xlat24 = _Time.y * _Normal01_VSpeed;
    u_xlat27 = u_xlat4.x * vs_TEXCOORD4.z;
    u_xlat5.x = _Time.y * _Normal01_U_Speed + u_xlat27;
    u_xlat5.y = u_xlat4.y * vs_TEXCOORD4.w + u_xlat24;
    u_xlat4.xy = vs_TEXCOORD4.xy * _Normal02_ST.xy + _Normal02_ST.zw;
    u_xlat4.xy = vec2(u_xlat4.x * vs_TEXCOORD4.z, u_xlat4.y * vs_TEXCOORD4.w);
    u_xlat6.x = _Time.y * _Normal02_U_Speed + u_xlat4.x;
    u_xlat6.y = _Time.y * _Normal02_V_Speed + u_xlat4.y;
    u_xlat10_4.xyz = texture(_Normal01, u_xlat5.xy).xyz;
    u_xlat16_7.xyz = u_xlat10_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat10_4.xyz = texture(_Normal02, u_xlat6.xy).xyz;
    u_xlat16_7.xyz = u_xlat10_4.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_7.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat4.xyz = u_xlat16_7.xyz * _DistortionIntensity.xyz;
    u_xlat5.x = vs_TEXCOORD6.x;
    u_xlat5.y = vs_TEXCOORD8.x;
    u_xlat5.z = vs_TEXCOORD7.x;
    u_xlat5.x = dot(u_xlat5.xyz, u_xlat4.xyz);
    u_xlat6.x = vs_TEXCOORD6.y;
    u_xlat6.y = vs_TEXCOORD8.y;
    u_xlat6.z = vs_TEXCOORD7.y;
    u_xlat5.y = dot(u_xlat6.xyz, u_xlat4.xyz);
    u_xlat6.x = vs_TEXCOORD6.z;
    u_xlat6.y = vs_TEXCOORD8.z;
    u_xlat6.z = vs_TEXCOORD7.z;
    u_xlat5.z = dot(u_xlat6.xyz, u_xlat4.xyz);
    u_xlat24 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat4.xyz = vec3(u_xlat24) * u_xlat5.xyz;
    u_xlat24 = dot((-u_xlat3.xyz), u_xlat4.xyz);
    u_xlat24 = u_xlat24 + u_xlat24;
    u_xlat3.xyz = u_xlat4.xyz * (-vec3(u_xlat24)) + (-u_xlat3.xyz);
    u_xlat10_24 = texture(_Reflection, u_xlat3.xyz).x;
    u_xlat3.xyz = (-_ReflectionColor_Dark.xyz) + _ReflectionColor_Light.xyz;
    u_xlat3.xyz = vec3(u_xlat10_24) * u_xlat3.xyz + _ReflectionColor_Dark.xyz;
    u_xlat4.xyz = u_xlat2.xyw * vec3(0.200000003, 0.200000003, 0.200000003);
    u_xlat2.xyw = u_xlat2.xyw * u_xlat3.xyz;
    u_xlat2.xyw = u_xlat2.xyw * vec3(_ReflectionBrightness) + (-u_xlat4.xyz);
    u_xlat2.xyw = vec3(vec3(_ReflectionIntensity, _ReflectionIntensity, _ReflectionIntensity)) * u_xlat2.xyw + u_xlat4.xyz;
    u_xlat1.zw = _Time.yy * vec2(_WaterFall01_Speed, _Waterfall02_Speed) + u_xlat1.yy;
    u_xlat10_24 = texture(_WaterfallTex01, u_xlat1.xz).x;
    u_xlat10_1 = texture(_WaterfallTex01, u_xlat1.xw).y;
    u_xlat16_7.x = (-u_xlat10_24) + u_xlat10_1;
    u_xlat16_7.x = u_xlat10_1 * u_xlat16_7.x + u_xlat10_24;
    u_xlat9 = u_xlat10_1 * _Waterfall02Brightness;
    u_xlat24 = u_xlat10_24 * _Waterfall01Brightness;
    u_xlat1.x = u_xlat10_1 * _Waterfall02Brightness + (-u_xlat24);
    u_xlat24 = u_xlat9 * u_xlat1.x + u_xlat24;
    u_xlat1.x = vs_TEXCOORD4.y * _SprayRange + _SprayOffset;
    u_xlat1.x = (-u_xlat1.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat24 = u_xlat24 * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat16_7.xxx * _WaterfallPatternColor.xyz + (-u_xlat2.xyw);
    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz + u_xlat2.xyw;
    u_xlat2.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat10_24 = texture(_ShadowMapTexture, u_xlat2.xy).x;
    u_xlat25 = (-_ShadowStrength) + 1.0;
    u_xlat24 = u_xlat10_24 * u_xlat25 + _ShadowStrength;
    u_xlat2.xy = vs_TEXCOORD4.xy * _WaterfallSpecTex_ST.xy + _WaterfallSpecTex_ST.zw;
    u_xlat16_7.x = vs_TEXCOORD4.w * 0.5;
    u_xlat16_7.x = vs_TEXCOORD4.w * u_xlat2.y + (-u_xlat16_7.x);
    u_xlat10.xz = vs_TEXCOORD4.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat3.x = _Time.y * _Detail01_U_Speed + u_xlat10.x;
    u_xlat3.y = _Time.y * _Detail01_V_Speed + u_xlat10.z;
    u_xlat10_25 = texture(_NoiseTex, u_xlat3.xy).x;
    u_xlat2.x = u_xlat10_25 * _NoiselDistortionValue + u_xlat2.x;
    u_xlat2.y = u_xlat10_25 * _NoiselDistortionValue + u_xlat16_7.x;
    u_xlat10_25 = texture(_WaterfallSpecTex, u_xlat2.xy).x;
    u_xlat16_2.xyw = vec3(u_xlat10_25) * _WaterfallSpecColor.xyz;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x * _Opacity;
    u_xlat0.x = u_xlat8 * u_xlat0.x;
    u_xlat3.w = u_xlat16.x * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat3.w = min(max(u_xlat3.w, 0.0), 1.0);
#else
    u_xlat3.w = clamp(u_xlat3.w, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat1.xyz * _DayColor.xyz;
    u_xlat0.xyw = u_xlat1.xyz * vec3(u_xlat24) + u_xlat16_2.xyw;
    u_xlat1.x = (-u_xlat18) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat16.x = u_xlat16.x * u_xlat1.x;
    u_xlat0.xyz = u_xlat16.xxx * _FoamColor.xyz + u_xlat0.xyw;
    u_xlat0.xyz = u_xlat0.xyz * _ES_MainLightColor.xyz;
    u_xlat16_24 = max(_LightColor0.w, 1.0);
    u_xlat3.xyz = vec3(u_xlat16_24) * u_xlat0.xyz;
    SV_Target0 = u_xlat3;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "MSAA_INTERPOLATION" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
uniform 	vec4 hlslcc_mtx4x4_mhyJitteredVP[4];
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
vec3 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump vec3 u_xlat16_4;
mediump vec4 u_xlat16_5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
vec3 u_xlat8;
float u_xlat24;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    vs_TEXCOORD5.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    u_xlat1.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position = u_xlat1;
    vs_TEXCOORD2.zw = u_xlat1.zw;
    vs_COLOR0 = in_COLOR0;
    u_xlat3.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat3.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat3.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat8.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat3.xyz = u_xlat8.xxx * u_xlat3.xyz;
    u_xlat16_4.x = u_xlat3.y * u_xlat3.y;
    u_xlat16_4.x = u_xlat3.x * u_xlat3.x + (-u_xlat16_4.x);
    u_xlat16_5 = u_xlat3.yzzx * u_xlat3.xyzz;
    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_5);
    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_5);
    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_5);
    u_xlat16_4.xyz = unity_SHC.xyz * u_xlat16_4.xxx + u_xlat16_6.xyz;
    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat3.w = 1.0;
    u_xlat16_5.x = dot(unity_SHAr, u_xlat3);
    u_xlat16_5.y = dot(unity_SHAg, u_xlat3);
    u_xlat16_5.z = dot(unity_SHAb, u_xlat3);
    u_xlat16_4.xyz = u_xlat16_4.xyz + u_xlat16_5.xyz;
    vs_TEXCOORD1.xyz = u_xlat16_4.xyz;
    vs_TEXCOORD1.w = 1.0;
    u_xlat7.x = float(0.5);
    u_xlat7.z = float(0.5);
    u_xlat7.y = _ProjectionParams.x;
    u_xlat1.xyz = u_xlat1.xyw * u_xlat7.xyz;
    u_xlat1.w = u_xlat1.y * 0.5;
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4_mhyJitteredVP[1];
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[3] * u_xlat2.wwww + u_xlat1;
    u_xlat2.xyz = vec3(u_xlat7.z * u_xlat1.x, u_xlat7.y * u_xlat1.y, u_xlat7.z * u_xlat1.w);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    u_xlat2.w = u_xlat2.y * 0.5;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy;
    u_xlat8.x = dot(unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz);
    vs_TEXCOORD4.z = sqrt(u_xlat8.x);
    u_xlat8.x = dot(unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz);
    vs_TEXCOORD4.w = sqrt(u_xlat8.x);
    vs_TEXCOORD5.w = 0.0;
    u_xlat8.xyz = in_TANGENT0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat8.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_TANGENT0.xxx + u_xlat8.xyz;
    u_xlat0.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_TANGENT0.zzz + u_xlat8.xyz;
    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat0.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    vs_TEXCOORD6.xyz = u_xlat0.xyz;
    vs_TEXCOORD6.w = 0.0;
    vs_TEXCOORD7.xyz = u_xlat3.xyz;
    vs_TEXCOORD7.w = 0.0;
    u_xlat1.xyz = u_xlat0.yzx * u_xlat3.zxy;
    u_xlat0.xyz = u_xlat3.yzx * u_xlat0.zxy + (-u_xlat1.xyz);
    u_xlat24 = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD8.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    vs_TEXCOORD8.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _LightColor0;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	float _AlphaRange;
uniform 	float _AlphaOffset;
uniform 	float _Opacity;
uniform 	mediump float _BottomAlphaToggle;
uniform 	float _AlphaBottomRange;
uniform 	float _AlphaBottomOffset;
uniform 	vec4 _WaterfallTex01_ST;
uniform 	mediump vec4 _FoamUVCoord01;
uniform 	mediump vec4 _FoamUVCoord02;
uniform 	float _FoamRange;
uniform 	float _FoamOffset;
uniform 	vec4 _DayColor;
uniform 	vec4 _BottomColor;
uniform 	vec4 _TopColor;
uniform 	float _ColorGradientRange;
uniform 	float _ColorGradientOffset;
uniform 	vec4 _ReflectionColor_Dark;
uniform 	vec4 _ReflectionColor_Light;
uniform 	float _Normal01_U_Speed;
uniform 	vec4 _Normal01_ST;
uniform 	float _Normal01_VSpeed;
uniform 	float _Normal02_U_Speed;
uniform 	vec4 _Normal02_ST;
uniform 	float _Normal02_V_Speed;
uniform 	vec4 _DistortionIntensity;
uniform 	float _ReflectionBrightness;
uniform 	float _ReflectionIntensity;
uniform 	float _WaterFall01_Speed;
uniform 	float _Waterfall02_Speed;
uniform 	mediump vec4 _WaterfallPatternColor;
uniform 	float _Waterfall01Brightness;
uniform 	float _Waterfall02Brightness;
uniform 	float _SprayRange;
uniform 	float _SprayOffset;
uniform 	float _ShadowStrength;
uniform 	vec4 _WaterfallSpecTex_ST;
uniform 	float _Detail01_U_Speed;
uniform 	vec4 _NoiseTex_ST;
uniform 	float _Detail01_V_Speed;
uniform 	float _NoiselDistortionValue;
uniform 	mediump vec4 _WaterfallSpecColor;
uniform 	mediump vec4 _FoamColor;
uniform 	vec3 _ES_MainLightColor;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _WaterfallTex01;
uniform lowp sampler2D _Normal01;
uniform lowp sampler2D _Normal02;
uniform lowp samplerCube _Reflection;
uniform lowp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _WaterfallSpecTex;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
in highp vec4 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
lowp float u_xlat10_0;
bvec2 u_xlatb0;
float u_xlat1;
vec4 u_xlat2;
lowp float u_xlat10_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
vec4 u_xlat4;
vec3 u_xlat5;
lowp vec3 u_xlat10_5;
vec3 u_xlat6;
vec3 u_xlat7;
mediump vec3 u_xlat16_8;
vec3 u_xlat9;
lowp float u_xlat10_9;
vec2 u_xlat10;
mediump float u_xlat16_10;
lowp float u_xlat10_10;
bool u_xlatb10;
float u_xlat11;
vec2 u_xlat12;
float u_xlat18;
float u_xlat19;
lowp float u_xlat10_19;
float u_xlat27;
mediump float u_xlat16_27;
float u_xlat28;
float u_xlat30;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat18 = texture(_CameraDepthTexture, u_xlat0.xy).x;
    u_xlat18 = _ZBufferParams.z * u_xlat18 + _ZBufferParams.w;
    u_xlat18 = float(1.0) / u_xlat18;
    u_xlat18 = u_xlat18 + (-vs_TEXCOORD3.w);
    u_xlat27 = u_xlat18 * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
    u_xlat18 = u_xlat18 / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat1 = (-u_xlat27) + 1.0;
    u_xlat18 = u_xlat18 * u_xlat1 + u_xlat27;
    u_xlat27 = vs_TEXCOORD4.y * _AlphaRange + _AlphaOffset;
    u_xlat1 = vs_TEXCOORD4.y * _AlphaBottomRange + _AlphaBottomOffset;
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(_BottomAlphaToggle==1.0);
#else
    u_xlatb10 = _BottomAlphaToggle==1.0;
#endif
    u_xlat1 = (u_xlatb10) ? u_xlat1 : 1.0;
    u_xlat10.xy = vs_TEXCOORD4.xy * _WaterfallTex01_ST.xy + _WaterfallTex01_ST.zw;
    u_xlat2.xy = vec2(u_xlat10.x * vs_TEXCOORD4.z, u_xlat10.y * vs_TEXCOORD4.w);
    u_xlat10.xy = vec2(_Time.y * _FoamUVCoord01.z, _Time.y * _FoamUVCoord01.w);
    u_xlat10.xy = u_xlat2.xy * _FoamUVCoord01.xy + u_xlat10.xy;
    u_xlat3.xy = vec2(_Time.y * _FoamUVCoord02.z, _Time.y * _FoamUVCoord02.w);
    u_xlat3.xy = u_xlat2.xy * _FoamUVCoord02.xy + u_xlat3.xy;
    u_xlat28 = vs_TEXCOORD4.y * _FoamRange + _FoamOffset;
    u_xlat10_10 = texture(_WaterfallTex01, u_xlat10.xy).x;
    u_xlat10_19 = texture(_WaterfallTex01, u_xlat3.xy).y;
    u_xlat16_10 = u_xlat10_19 + u_xlat10_10;
    u_xlat10.x = u_xlat28 + u_xlat16_10;
#ifdef UNITY_ADRENO_ES3
    u_xlat10.x = min(max(u_xlat10.x, 0.0), 1.0);
#else
    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
#endif
    u_xlat19 = vs_TEXCOORD4.y * _ColorGradientRange + _ColorGradientOffset;
#ifdef UNITY_ADRENO_ES3
    u_xlat19 = min(max(u_xlat19, 0.0), 1.0);
#else
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
#endif
    u_xlat3.xyz = (-_BottomColor.xyz) + _TopColor.xyz;
    u_xlat3.xyz = vec3(u_xlat19) * u_xlat3.xyz + _BottomColor.xyz;
    u_xlat4.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat19 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat19 = inversesqrt(u_xlat19);
    u_xlat4.xyz = vec3(u_xlat19) * u_xlat4.xyz;
    u_xlat5.xy = vs_TEXCOORD4.xy * _Normal01_ST.xy + _Normal01_ST.zw;
    u_xlat19 = _Time.y * _Normal01_VSpeed;
    u_xlat30 = u_xlat5.x * vs_TEXCOORD4.z;
    u_xlat6.x = _Time.y * _Normal01_U_Speed + u_xlat30;
    u_xlat6.y = u_xlat5.y * vs_TEXCOORD4.w + u_xlat19;
    u_xlat5.xy = vs_TEXCOORD4.xy * _Normal02_ST.xy + _Normal02_ST.zw;
    u_xlat5.xy = vec2(u_xlat5.x * vs_TEXCOORD4.z, u_xlat5.y * vs_TEXCOORD4.w);
    u_xlat7.x = _Time.y * _Normal02_U_Speed + u_xlat5.x;
    u_xlat7.y = _Time.y * _Normal02_V_Speed + u_xlat5.y;
    u_xlat10_5.xyz = texture(_Normal01, u_xlat6.xy).xyz;
    u_xlat16_8.xyz = u_xlat10_5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat10_5.xyz = texture(_Normal02, u_xlat7.xy).xyz;
    u_xlat16_8.xyz = u_xlat10_5.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_8.xyz;
    u_xlat16_8.xyz = u_xlat16_8.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat5.xyz = u_xlat16_8.xyz * _DistortionIntensity.xyz;
    u_xlat6.x = vs_TEXCOORD6.x;
    u_xlat6.y = vs_TEXCOORD8.x;
    u_xlat6.z = vs_TEXCOORD7.x;
    u_xlat6.x = dot(u_xlat6.xyz, u_xlat5.xyz);
    u_xlat7.x = vs_TEXCOORD6.y;
    u_xlat7.y = vs_TEXCOORD8.y;
    u_xlat7.z = vs_TEXCOORD7.y;
    u_xlat6.y = dot(u_xlat7.xyz, u_xlat5.xyz);
    u_xlat7.x = vs_TEXCOORD6.z;
    u_xlat7.y = vs_TEXCOORD8.z;
    u_xlat7.z = vs_TEXCOORD7.z;
    u_xlat6.z = dot(u_xlat7.xyz, u_xlat5.xyz);
    u_xlat19 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat19 = inversesqrt(u_xlat19);
    u_xlat5.xyz = vec3(u_xlat19) * u_xlat6.xyz;
    u_xlat19 = dot((-u_xlat4.xyz), u_xlat5.xyz);
    u_xlat19 = u_xlat19 + u_xlat19;
    u_xlat4.xyz = u_xlat5.xyz * (-vec3(u_xlat19)) + (-u_xlat4.xyz);
    u_xlat10_19 = texture(_Reflection, u_xlat4.xyz).x;
    u_xlat4.xyz = (-_ReflectionColor_Dark.xyz) + _ReflectionColor_Light.xyz;
    u_xlat4.xyz = vec3(u_xlat10_19) * u_xlat4.xyz + _ReflectionColor_Dark.xyz;
    u_xlat5.xyz = u_xlat3.xyz * vec3(0.200000003, 0.200000003, 0.200000003);
    u_xlat3.xyz = u_xlat3.xyz * u_xlat4.xyz;
    u_xlat3.xyz = u_xlat3.xyz * vec3(_ReflectionBrightness) + (-u_xlat5.xyz);
    u_xlat3.xyz = vec3(vec3(_ReflectionIntensity, _ReflectionIntensity, _ReflectionIntensity)) * u_xlat3.xyz + u_xlat5.xyz;
    u_xlat2.zw = _Time.yy * vec2(_WaterFall01_Speed, _Waterfall02_Speed) + u_xlat2.yy;
    u_xlat10_19 = texture(_WaterfallTex01, u_xlat2.xz).x;
    u_xlat10_2 = texture(_WaterfallTex01, u_xlat2.xw).y;
    u_xlat16_8.x = (-u_xlat10_19) + u_xlat10_2;
    u_xlat16_8.x = u_xlat10_2 * u_xlat16_8.x + u_xlat10_19;
    u_xlat11 = u_xlat10_2 * _Waterfall02Brightness;
    u_xlat19 = u_xlat10_19 * _Waterfall01Brightness;
    u_xlat2.x = u_xlat10_2 * _Waterfall02Brightness + (-u_xlat19);
    u_xlat19 = u_xlat11 * u_xlat2.x + u_xlat19;
    u_xlat2.x = vs_TEXCOORD4.y * _SprayRange + _SprayOffset;
    u_xlat2.x = (-u_xlat2.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat19 = u_xlat19 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat19 = min(max(u_xlat19, 0.0), 1.0);
#else
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
#endif
    u_xlat2.xyz = u_xlat16_8.xxx * _WaterfallPatternColor.xyz + (-u_xlat3.xyz);
    u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz + u_xlat3.xyz;
    u_xlat10_0 = texture(_ShadowMapTexture, u_xlat0.xy).x;
    u_xlat9.x = (-_ShadowStrength) + 1.0;
    u_xlat0.x = u_xlat10_0 * u_xlat9.x + _ShadowStrength;
    u_xlat3.xy = vs_TEXCOORD4.xy * _WaterfallSpecTex_ST.xy + _WaterfallSpecTex_ST.zw;
    u_xlat16_8.x = vs_TEXCOORD4.w * 0.5;
    u_xlat16_8.x = vs_TEXCOORD4.w * u_xlat3.y + (-u_xlat16_8.x);
    u_xlat12.xy = vs_TEXCOORD4.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat4.x = _Time.y * _Detail01_U_Speed + u_xlat12.x;
    u_xlat4.y = _Time.y * _Detail01_V_Speed + u_xlat12.y;
    u_xlat10_9 = texture(_NoiseTex, u_xlat4.xy).x;
    u_xlat3.x = u_xlat10_9 * _NoiselDistortionValue + u_xlat3.x;
    u_xlat3.y = u_xlat10_9 * _NoiselDistortionValue + u_xlat16_8.x;
    u_xlat10_9 = texture(_WaterfallSpecTex, u_xlat3.xy).x;
    u_xlat16_3.xyz = vec3(u_xlat10_9) * _WaterfallSpecColor.xyz;
    u_xlat9.x = (-u_xlat27) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat9.x = min(max(u_xlat9.x, 0.0), 1.0);
#else
    u_xlat9.x = clamp(u_xlat9.x, 0.0, 1.0);
#endif
    u_xlat9.x = u_xlat9.x * u_xlat18;
    u_xlat9.x = u_xlat9.x * _Opacity;
    u_xlat9.x = u_xlat1 * u_xlat9.x;
    u_xlat4.w = u_xlat10.x * u_xlat9.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.w = min(max(u_xlat4.w, 0.0), 1.0);
#else
    u_xlat4.w = clamp(u_xlat4.w, 0.0, 1.0);
#endif
    u_xlat9.xyz = u_xlat2.xyz * _DayColor.xyz;
    u_xlat0.xyz = u_xlat9.xyz * u_xlat0.xxx + u_xlat16_3.xyz;
    u_xlat27 = (-u_xlat28) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
    u_xlat27 = u_xlat27 * u_xlat10.x;
    u_xlat0.xyz = vec3(u_xlat27) * _FoamColor.xyz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * _ES_MainLightColor.xyz;
    u_xlat16_27 = max(_LightColor0.w, 1.0);
    u_xlat4.xyz = vec3(u_xlat16_27) * u_xlat0.xyz;
    SV_Target0 = u_xlat4;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "HALF_RESOLUTION_PARTICLE_ON" "MSAA_INTERPOLATION" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
uniform 	vec4 hlslcc_mtx4x4_mhyJitteredVP[4];
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec4 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
float u_xlat14;
float u_xlat21;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD5.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat0.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position = u_xlat0;
    vs_TEXCOORD2.zw = u_xlat0.zw;
    vs_COLOR0 = in_COLOR0;
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat14 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat14 = inversesqrt(u_xlat14);
    u_xlat2.xyz = vec3(u_xlat14) * u_xlat2.xyz;
    u_xlat16_3.x = u_xlat2.y * u_xlat2.y;
    u_xlat16_3.x = u_xlat2.x * u_xlat2.x + (-u_xlat16_3.x);
    u_xlat16_4 = u_xlat2.yzzx * u_xlat2.xyzz;
    u_xlat16_5.x = dot(unity_SHBr, u_xlat16_4);
    u_xlat16_5.y = dot(unity_SHBg, u_xlat16_4);
    u_xlat16_5.z = dot(unity_SHBb, u_xlat16_4);
    u_xlat16_3.xyz = unity_SHC.xyz * u_xlat16_3.xxx + u_xlat16_5.xyz;
    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat2.w = 1.0;
    u_xlat16_4.x = dot(unity_SHAr, u_xlat2);
    u_xlat16_4.y = dot(unity_SHAg, u_xlat2);
    u_xlat16_4.z = dot(unity_SHAb, u_xlat2);
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
    vs_TEXCOORD1.xyz = u_xlat16_3.xyz;
    vs_TEXCOORD1.w = 1.0;
    u_xlat6.x = float(0.5);
    u_xlat6.z = float(0.5);
    u_xlat6.y = _ProjectionParams.x;
    u_xlat0.xyz = u_xlat0.xyw * u_xlat6.xyz;
    u_xlat0.w = u_xlat0.y * 0.5;
    vs_TEXCOORD2.xy = u_xlat0.zz + u_xlat0.xw;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_mhyJitteredVP[1];
    u_xlat0 = hlslcc_mtx4x4_mhyJitteredVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_mhyJitteredVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_mhyJitteredVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat1.xyz = vec3(u_xlat6.z * u_xlat0.x, u_xlat6.y * u_xlat0.y, u_xlat6.z * u_xlat0.w);
    vs_TEXCOORD3.zw = u_xlat0.zw;
    u_xlat1.w = u_xlat1.y * 0.5;
    vs_TEXCOORD3.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat0.x = dot(hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, hlslcc_mtx4x4unity_ObjectToWorld[0].xyz);
    vs_TEXCOORD4.z = sqrt(u_xlat0.x);
    u_xlat0.x = dot(hlslcc_mtx4x4unity_ObjectToWorld[1].xyz, hlslcc_mtx4x4unity_ObjectToWorld[1].xyz);
    vs_TEXCOORD4.w = sqrt(u_xlat0.x);
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD5.w = 0.0;
    u_xlat0.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat0.xyz;
    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    vs_TEXCOORD6.xyz = u_xlat0.xyz;
    vs_TEXCOORD6.w = 0.0;
    vs_TEXCOORD7.xyz = u_xlat2.xyz;
    vs_TEXCOORD7.w = 0.0;
    u_xlat1.xyz = u_xlat0.yzx * u_xlat2.zxy;
    u_xlat0.xyz = u_xlat2.yzx * u_xlat0.zxy + (-u_xlat1.xyz);
    u_xlat21 = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD8.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    vs_TEXCOORD8.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _LightColor0;
uniform 	float _AlphaRange;
uniform 	float _AlphaOffset;
uniform 	float _Opacity;
uniform 	mediump float _BottomAlphaToggle;
uniform 	float _AlphaBottomRange;
uniform 	float _AlphaBottomOffset;
uniform 	vec4 _WaterfallTex01_ST;
uniform 	mediump vec4 _FoamUVCoord01;
uniform 	mediump vec4 _FoamUVCoord02;
uniform 	float _FoamRange;
uniform 	float _FoamOffset;
uniform 	vec4 _DayColor;
uniform 	vec4 _BottomColor;
uniform 	vec4 _TopColor;
uniform 	float _ColorGradientRange;
uniform 	float _ColorGradientOffset;
uniform 	vec4 _ReflectionColor_Dark;
uniform 	vec4 _ReflectionColor_Light;
uniform 	float _Normal01_U_Speed;
uniform 	vec4 _Normal01_ST;
uniform 	float _Normal01_VSpeed;
uniform 	float _Normal02_U_Speed;
uniform 	vec4 _Normal02_ST;
uniform 	float _Normal02_V_Speed;
uniform 	vec4 _DistortionIntensity;
uniform 	float _ReflectionBrightness;
uniform 	float _ReflectionIntensity;
uniform 	float _WaterFall01_Speed;
uniform 	float _Waterfall02_Speed;
uniform 	mediump vec4 _WaterfallPatternColor;
uniform 	float _Waterfall01Brightness;
uniform 	float _Waterfall02Brightness;
uniform 	float _SprayRange;
uniform 	float _SprayOffset;
uniform 	float _ShadowStrength;
uniform 	vec4 _WaterfallSpecTex_ST;
uniform 	float _Detail01_U_Speed;
uniform 	vec4 _NoiseTex_ST;
uniform 	float _Detail01_V_Speed;
uniform 	float _NoiselDistortionValue;
uniform 	mediump vec4 _WaterfallSpecColor;
uniform 	mediump vec4 _FoamColor;
uniform 	vec3 _ES_MainLightColor;
uniform lowp sampler2D _WaterfallTex01;
uniform lowp sampler2D _Normal01;
uniform lowp sampler2D _Normal02;
uniform lowp samplerCube _Reflection;
uniform lowp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _WaterfallSpecTex;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
in highp vec4 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
bvec2 u_xlatb0;
vec4 u_xlat1;
lowp float u_xlat10_1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
vec4 u_xlat3;
vec3 u_xlat4;
lowp vec3 u_xlat10_4;
vec3 u_xlat5;
vec3 u_xlat6;
mediump vec3 u_xlat16_7;
float u_xlat8;
float u_xlat9;
vec3 u_xlat10;
vec2 u_xlat16;
mediump float u_xlat16_16;
lowp float u_xlat10_16;
bool u_xlatb16;
float u_xlat18;
float u_xlat24;
mediump float u_xlat16_24;
lowp float u_xlat10_24;
float u_xlat25;
lowp float u_xlat10_25;
float u_xlat27;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.x = vs_TEXCOORD4.y * _AlphaRange + _AlphaOffset;
    u_xlat8 = vs_TEXCOORD4.y * _AlphaBottomRange + _AlphaBottomOffset;
#ifdef UNITY_ADRENO_ES3
    u_xlat8 = min(max(u_xlat8, 0.0), 1.0);
#else
    u_xlat8 = clamp(u_xlat8, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(_BottomAlphaToggle==1.0);
#else
    u_xlatb16 = _BottomAlphaToggle==1.0;
#endif
    u_xlat8 = (u_xlatb16) ? u_xlat8 : 1.0;
    u_xlat16.xy = vs_TEXCOORD4.xy * _WaterfallTex01_ST.xy + _WaterfallTex01_ST.zw;
    u_xlat1.xy = vec2(u_xlat16.x * vs_TEXCOORD4.z, u_xlat16.y * vs_TEXCOORD4.w);
    u_xlat16.xy = vec2(_Time.y * _FoamUVCoord01.z, _Time.y * _FoamUVCoord01.w);
    u_xlat16.xy = u_xlat1.xy * _FoamUVCoord01.xy + u_xlat16.xy;
    u_xlat2.xy = vec2(_Time.y * _FoamUVCoord02.z, _Time.y * _FoamUVCoord02.w);
    u_xlat2.xy = u_xlat1.xy * _FoamUVCoord02.xy + u_xlat2.xy;
    u_xlat18 = vs_TEXCOORD4.y * _FoamRange + _FoamOffset;
    u_xlat10_16 = texture(_WaterfallTex01, u_xlat16.xy).x;
    u_xlat10_24 = texture(_WaterfallTex01, u_xlat2.xy).y;
    u_xlat16_16 = u_xlat10_24 + u_xlat10_16;
    u_xlat16.x = u_xlat18 + u_xlat16_16;
#ifdef UNITY_ADRENO_ES3
    u_xlat16.x = min(max(u_xlat16.x, 0.0), 1.0);
#else
    u_xlat16.x = clamp(u_xlat16.x, 0.0, 1.0);
#endif
    u_xlat24 = vs_TEXCOORD4.y * _ColorGradientRange + _ColorGradientOffset;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat2.xyw = (-_BottomColor.xyz) + _TopColor.xyz;
    u_xlat2.xyw = vec3(u_xlat24) * u_xlat2.xyw + _BottomColor.xyz;
    u_xlat3.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat24 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat3.xyz = vec3(u_xlat24) * u_xlat3.xyz;
    u_xlat4.xy = vs_TEXCOORD4.xy * _Normal01_ST.xy + _Normal01_ST.zw;
    u_xlat24 = _Time.y * _Normal01_VSpeed;
    u_xlat27 = u_xlat4.x * vs_TEXCOORD4.z;
    u_xlat5.x = _Time.y * _Normal01_U_Speed + u_xlat27;
    u_xlat5.y = u_xlat4.y * vs_TEXCOORD4.w + u_xlat24;
    u_xlat4.xy = vs_TEXCOORD4.xy * _Normal02_ST.xy + _Normal02_ST.zw;
    u_xlat4.xy = vec2(u_xlat4.x * vs_TEXCOORD4.z, u_xlat4.y * vs_TEXCOORD4.w);
    u_xlat6.x = _Time.y * _Normal02_U_Speed + u_xlat4.x;
    u_xlat6.y = _Time.y * _Normal02_V_Speed + u_xlat4.y;
    u_xlat10_4.xyz = texture(_Normal01, u_xlat5.xy).xyz;
    u_xlat16_7.xyz = u_xlat10_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat10_4.xyz = texture(_Normal02, u_xlat6.xy).xyz;
    u_xlat16_7.xyz = u_xlat10_4.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_7.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat4.xyz = u_xlat16_7.xyz * _DistortionIntensity.xyz;
    u_xlat5.x = vs_TEXCOORD6.x;
    u_xlat5.y = vs_TEXCOORD8.x;
    u_xlat5.z = vs_TEXCOORD7.x;
    u_xlat5.x = dot(u_xlat5.xyz, u_xlat4.xyz);
    u_xlat6.x = vs_TEXCOORD6.y;
    u_xlat6.y = vs_TEXCOORD8.y;
    u_xlat6.z = vs_TEXCOORD7.y;
    u_xlat5.y = dot(u_xlat6.xyz, u_xlat4.xyz);
    u_xlat6.x = vs_TEXCOORD6.z;
    u_xlat6.y = vs_TEXCOORD8.z;
    u_xlat6.z = vs_TEXCOORD7.z;
    u_xlat5.z = dot(u_xlat6.xyz, u_xlat4.xyz);
    u_xlat24 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat4.xyz = vec3(u_xlat24) * u_xlat5.xyz;
    u_xlat24 = dot((-u_xlat3.xyz), u_xlat4.xyz);
    u_xlat24 = u_xlat24 + u_xlat24;
    u_xlat3.xyz = u_xlat4.xyz * (-vec3(u_xlat24)) + (-u_xlat3.xyz);
    u_xlat10_24 = texture(_Reflection, u_xlat3.xyz).x;
    u_xlat3.xyz = (-_ReflectionColor_Dark.xyz) + _ReflectionColor_Light.xyz;
    u_xlat3.xyz = vec3(u_xlat10_24) * u_xlat3.xyz + _ReflectionColor_Dark.xyz;
    u_xlat4.xyz = u_xlat2.xyw * vec3(0.200000003, 0.200000003, 0.200000003);
    u_xlat2.xyw = u_xlat2.xyw * u_xlat3.xyz;
    u_xlat2.xyw = u_xlat2.xyw * vec3(_ReflectionBrightness) + (-u_xlat4.xyz);
    u_xlat2.xyw = vec3(vec3(_ReflectionIntensity, _ReflectionIntensity, _ReflectionIntensity)) * u_xlat2.xyw + u_xlat4.xyz;
    u_xlat1.zw = _Time.yy * vec2(_WaterFall01_Speed, _Waterfall02_Speed) + u_xlat1.yy;
    u_xlat10_24 = texture(_WaterfallTex01, u_xlat1.xz).x;
    u_xlat10_1 = texture(_WaterfallTex01, u_xlat1.xw).y;
    u_xlat16_7.x = (-u_xlat10_24) + u_xlat10_1;
    u_xlat16_7.x = u_xlat10_1 * u_xlat16_7.x + u_xlat10_24;
    u_xlat9 = u_xlat10_1 * _Waterfall02Brightness;
    u_xlat24 = u_xlat10_24 * _Waterfall01Brightness;
    u_xlat1.x = u_xlat10_1 * _Waterfall02Brightness + (-u_xlat24);
    u_xlat24 = u_xlat9 * u_xlat1.x + u_xlat24;
    u_xlat1.x = vs_TEXCOORD4.y * _SprayRange + _SprayOffset;
    u_xlat1.x = (-u_xlat1.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat24 = u_xlat24 * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat16_7.xxx * _WaterfallPatternColor.xyz + (-u_xlat2.xyw);
    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz + u_xlat2.xyw;
    u_xlat2.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat10_24 = texture(_ShadowMapTexture, u_xlat2.xy).x;
    u_xlat25 = (-_ShadowStrength) + 1.0;
    u_xlat24 = u_xlat10_24 * u_xlat25 + _ShadowStrength;
    u_xlat2.xy = vs_TEXCOORD4.xy * _WaterfallSpecTex_ST.xy + _WaterfallSpecTex_ST.zw;
    u_xlat16_7.x = vs_TEXCOORD4.w * 0.5;
    u_xlat16_7.x = vs_TEXCOORD4.w * u_xlat2.y + (-u_xlat16_7.x);
    u_xlat10.xz = vs_TEXCOORD4.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat3.x = _Time.y * _Detail01_U_Speed + u_xlat10.x;
    u_xlat3.y = _Time.y * _Detail01_V_Speed + u_xlat10.z;
    u_xlat10_25 = texture(_NoiseTex, u_xlat3.xy).x;
    u_xlat2.x = u_xlat10_25 * _NoiselDistortionValue + u_xlat2.x;
    u_xlat2.y = u_xlat10_25 * _NoiselDistortionValue + u_xlat16_7.x;
    u_xlat10_25 = texture(_WaterfallSpecTex, u_xlat2.xy).x;
    u_xlat16_2.xyw = vec3(u_xlat10_25) * _WaterfallSpecColor.xyz;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x * _Opacity;
    u_xlat0.x = u_xlat8 * u_xlat0.x;
    u_xlat3.w = u_xlat16.x * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat3.w = min(max(u_xlat3.w, 0.0), 1.0);
#else
    u_xlat3.w = clamp(u_xlat3.w, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat1.xyz * _DayColor.xyz;
    u_xlat0.xyw = u_xlat1.xyz * vec3(u_xlat24) + u_xlat16_2.xyw;
    u_xlat1.x = (-u_xlat18) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat16.x = u_xlat16.x * u_xlat1.x;
    u_xlat0.xyz = u_xlat16.xxx * _FoamColor.xyz + u_xlat0.xyw;
    u_xlat0.xyz = u_xlat0.xyz * _ES_MainLightColor.xyz;
    u_xlat16_24 = max(_LightColor0.w, 1.0);
    u_xlat3.xyz = vec3(u_xlat16_24) * u_xlat0.xyz;
    SV_Target0 = u_xlat3;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "HALF_RESOLUTION_PARTICLE_ON" "MSAA_INTERPOLATION" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
uniform 	vec4 hlslcc_mtx4x4_mhyJitteredVP[4];
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec4 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
float u_xlat14;
float u_xlat21;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD5.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat0.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position = u_xlat0;
    vs_TEXCOORD2.zw = u_xlat0.zw;
    vs_COLOR0 = in_COLOR0;
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat14 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat14 = inversesqrt(u_xlat14);
    u_xlat2.xyz = vec3(u_xlat14) * u_xlat2.xyz;
    u_xlat16_3.x = u_xlat2.y * u_xlat2.y;
    u_xlat16_3.x = u_xlat2.x * u_xlat2.x + (-u_xlat16_3.x);
    u_xlat16_4 = u_xlat2.yzzx * u_xlat2.xyzz;
    u_xlat16_5.x = dot(unity_SHBr, u_xlat16_4);
    u_xlat16_5.y = dot(unity_SHBg, u_xlat16_4);
    u_xlat16_5.z = dot(unity_SHBb, u_xlat16_4);
    u_xlat16_3.xyz = unity_SHC.xyz * u_xlat16_3.xxx + u_xlat16_5.xyz;
    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat2.w = 1.0;
    u_xlat16_4.x = dot(unity_SHAr, u_xlat2);
    u_xlat16_4.y = dot(unity_SHAg, u_xlat2);
    u_xlat16_4.z = dot(unity_SHAb, u_xlat2);
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
    vs_TEXCOORD1.xyz = u_xlat16_3.xyz;
    vs_TEXCOORD1.w = 1.0;
    u_xlat6.x = float(0.5);
    u_xlat6.z = float(0.5);
    u_xlat6.y = _ProjectionParams.x;
    u_xlat0.xyz = u_xlat0.xyw * u_xlat6.xyz;
    u_xlat0.w = u_xlat0.y * 0.5;
    vs_TEXCOORD2.xy = u_xlat0.zz + u_xlat0.xw;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_mhyJitteredVP[1];
    u_xlat0 = hlslcc_mtx4x4_mhyJitteredVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_mhyJitteredVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_mhyJitteredVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat1.xyz = vec3(u_xlat6.z * u_xlat0.x, u_xlat6.y * u_xlat0.y, u_xlat6.z * u_xlat0.w);
    vs_TEXCOORD3.zw = u_xlat0.zw;
    u_xlat1.w = u_xlat1.y * 0.5;
    vs_TEXCOORD3.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat0.x = dot(hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, hlslcc_mtx4x4unity_ObjectToWorld[0].xyz);
    vs_TEXCOORD4.z = sqrt(u_xlat0.x);
    u_xlat0.x = dot(hlslcc_mtx4x4unity_ObjectToWorld[1].xyz, hlslcc_mtx4x4unity_ObjectToWorld[1].xyz);
    vs_TEXCOORD4.w = sqrt(u_xlat0.x);
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD5.w = 0.0;
    u_xlat0.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat0.xyz;
    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    vs_TEXCOORD6.xyz = u_xlat0.xyz;
    vs_TEXCOORD6.w = 0.0;
    vs_TEXCOORD7.xyz = u_xlat2.xyz;
    vs_TEXCOORD7.w = 0.0;
    u_xlat1.xyz = u_xlat0.yzx * u_xlat2.zxy;
    u_xlat0.xyz = u_xlat2.yzx * u_xlat0.zxy + (-u_xlat1.xyz);
    u_xlat21 = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD8.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    vs_TEXCOORD8.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _LightColor0;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	float _AlphaRange;
uniform 	float _AlphaOffset;
uniform 	float _Opacity;
uniform 	mediump float _BottomAlphaToggle;
uniform 	float _AlphaBottomRange;
uniform 	float _AlphaBottomOffset;
uniform 	vec4 _WaterfallTex01_ST;
uniform 	mediump vec4 _FoamUVCoord01;
uniform 	mediump vec4 _FoamUVCoord02;
uniform 	float _FoamRange;
uniform 	float _FoamOffset;
uniform 	vec4 _DayColor;
uniform 	vec4 _BottomColor;
uniform 	vec4 _TopColor;
uniform 	float _ColorGradientRange;
uniform 	float _ColorGradientOffset;
uniform 	vec4 _ReflectionColor_Dark;
uniform 	vec4 _ReflectionColor_Light;
uniform 	float _Normal01_U_Speed;
uniform 	vec4 _Normal01_ST;
uniform 	float _Normal01_VSpeed;
uniform 	float _Normal02_U_Speed;
uniform 	vec4 _Normal02_ST;
uniform 	float _Normal02_V_Speed;
uniform 	vec4 _DistortionIntensity;
uniform 	float _ReflectionBrightness;
uniform 	float _ReflectionIntensity;
uniform 	float _WaterFall01_Speed;
uniform 	float _Waterfall02_Speed;
uniform 	mediump vec4 _WaterfallPatternColor;
uniform 	float _Waterfall01Brightness;
uniform 	float _Waterfall02Brightness;
uniform 	float _SprayRange;
uniform 	float _SprayOffset;
uniform 	float _ShadowStrength;
uniform 	vec4 _WaterfallSpecTex_ST;
uniform 	float _Detail01_U_Speed;
uniform 	vec4 _NoiseTex_ST;
uniform 	float _Detail01_V_Speed;
uniform 	float _NoiselDistortionValue;
uniform 	mediump vec4 _WaterfallSpecColor;
uniform 	mediump vec4 _FoamColor;
uniform 	vec3 _ES_MainLightColor;
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _WaterfallTex01;
uniform lowp sampler2D _Normal01;
uniform lowp sampler2D _Normal02;
uniform lowp samplerCube _Reflection;
uniform lowp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _WaterfallSpecTex;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
in highp vec4 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
lowp float u_xlat10_0;
bvec2 u_xlatb0;
float u_xlat1;
vec4 u_xlat2;
lowp float u_xlat10_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
vec4 u_xlat4;
vec3 u_xlat5;
lowp vec3 u_xlat10_5;
vec3 u_xlat6;
vec3 u_xlat7;
mediump vec3 u_xlat16_8;
vec3 u_xlat9;
lowp float u_xlat10_9;
vec2 u_xlat10;
mediump float u_xlat16_10;
lowp float u_xlat10_10;
bool u_xlatb10;
float u_xlat11;
vec2 u_xlat12;
float u_xlat18;
float u_xlat19;
lowp float u_xlat10_19;
float u_xlat27;
mediump float u_xlat16_27;
float u_xlat28;
float u_xlat30;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat18 = texture(_CameraDepthTextureScaled, u_xlat0.xy).x;
    u_xlat18 = u_xlat18 * _ProjectionParams.z + (-vs_TEXCOORD3.w);
    u_xlat27 = u_xlat18 * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
    u_xlat18 = u_xlat18 / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat1 = (-u_xlat27) + 1.0;
    u_xlat18 = u_xlat18 * u_xlat1 + u_xlat27;
    u_xlat27 = vs_TEXCOORD4.y * _AlphaRange + _AlphaOffset;
    u_xlat1 = vs_TEXCOORD4.y * _AlphaBottomRange + _AlphaBottomOffset;
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(_BottomAlphaToggle==1.0);
#else
    u_xlatb10 = _BottomAlphaToggle==1.0;
#endif
    u_xlat1 = (u_xlatb10) ? u_xlat1 : 1.0;
    u_xlat10.xy = vs_TEXCOORD4.xy * _WaterfallTex01_ST.xy + _WaterfallTex01_ST.zw;
    u_xlat2.xy = vec2(u_xlat10.x * vs_TEXCOORD4.z, u_xlat10.y * vs_TEXCOORD4.w);
    u_xlat10.xy = vec2(_Time.y * _FoamUVCoord01.z, _Time.y * _FoamUVCoord01.w);
    u_xlat10.xy = u_xlat2.xy * _FoamUVCoord01.xy + u_xlat10.xy;
    u_xlat3.xy = vec2(_Time.y * _FoamUVCoord02.z, _Time.y * _FoamUVCoord02.w);
    u_xlat3.xy = u_xlat2.xy * _FoamUVCoord02.xy + u_xlat3.xy;
    u_xlat28 = vs_TEXCOORD4.y * _FoamRange + _FoamOffset;
    u_xlat10_10 = texture(_WaterfallTex01, u_xlat10.xy).x;
    u_xlat10_19 = texture(_WaterfallTex01, u_xlat3.xy).y;
    u_xlat16_10 = u_xlat10_19 + u_xlat10_10;
    u_xlat10.x = u_xlat28 + u_xlat16_10;
#ifdef UNITY_ADRENO_ES3
    u_xlat10.x = min(max(u_xlat10.x, 0.0), 1.0);
#else
    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
#endif
    u_xlat19 = vs_TEXCOORD4.y * _ColorGradientRange + _ColorGradientOffset;
#ifdef UNITY_ADRENO_ES3
    u_xlat19 = min(max(u_xlat19, 0.0), 1.0);
#else
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
#endif
    u_xlat3.xyz = (-_BottomColor.xyz) + _TopColor.xyz;
    u_xlat3.xyz = vec3(u_xlat19) * u_xlat3.xyz + _BottomColor.xyz;
    u_xlat4.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat19 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat19 = inversesqrt(u_xlat19);
    u_xlat4.xyz = vec3(u_xlat19) * u_xlat4.xyz;
    u_xlat5.xy = vs_TEXCOORD4.xy * _Normal01_ST.xy + _Normal01_ST.zw;
    u_xlat19 = _Time.y * _Normal01_VSpeed;
    u_xlat30 = u_xlat5.x * vs_TEXCOORD4.z;
    u_xlat6.x = _Time.y * _Normal01_U_Speed + u_xlat30;
    u_xlat6.y = u_xlat5.y * vs_TEXCOORD4.w + u_xlat19;
    u_xlat5.xy = vs_TEXCOORD4.xy * _Normal02_ST.xy + _Normal02_ST.zw;
    u_xlat5.xy = vec2(u_xlat5.x * vs_TEXCOORD4.z, u_xlat5.y * vs_TEXCOORD4.w);
    u_xlat7.x = _Time.y * _Normal02_U_Speed + u_xlat5.x;
    u_xlat7.y = _Time.y * _Normal02_V_Speed + u_xlat5.y;
    u_xlat10_5.xyz = texture(_Normal01, u_xlat6.xy).xyz;
    u_xlat16_8.xyz = u_xlat10_5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat10_5.xyz = texture(_Normal02, u_xlat7.xy).xyz;
    u_xlat16_8.xyz = u_xlat10_5.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_8.xyz;
    u_xlat16_8.xyz = u_xlat16_8.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat5.xyz = u_xlat16_8.xyz * _DistortionIntensity.xyz;
    u_xlat6.x = vs_TEXCOORD6.x;
    u_xlat6.y = vs_TEXCOORD8.x;
    u_xlat6.z = vs_TEXCOORD7.x;
    u_xlat6.x = dot(u_xlat6.xyz, u_xlat5.xyz);
    u_xlat7.x = vs_TEXCOORD6.y;
    u_xlat7.y = vs_TEXCOORD8.y;
    u_xlat7.z = vs_TEXCOORD7.y;
    u_xlat6.y = dot(u_xlat7.xyz, u_xlat5.xyz);
    u_xlat7.x = vs_TEXCOORD6.z;
    u_xlat7.y = vs_TEXCOORD8.z;
    u_xlat7.z = vs_TEXCOORD7.z;
    u_xlat6.z = dot(u_xlat7.xyz, u_xlat5.xyz);
    u_xlat19 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat19 = inversesqrt(u_xlat19);
    u_xlat5.xyz = vec3(u_xlat19) * u_xlat6.xyz;
    u_xlat19 = dot((-u_xlat4.xyz), u_xlat5.xyz);
    u_xlat19 = u_xlat19 + u_xlat19;
    u_xlat4.xyz = u_xlat5.xyz * (-vec3(u_xlat19)) + (-u_xlat4.xyz);
    u_xlat10_19 = texture(_Reflection, u_xlat4.xyz).x;
    u_xlat4.xyz = (-_ReflectionColor_Dark.xyz) + _ReflectionColor_Light.xyz;
    u_xlat4.xyz = vec3(u_xlat10_19) * u_xlat4.xyz + _ReflectionColor_Dark.xyz;
    u_xlat5.xyz = u_xlat3.xyz * vec3(0.200000003, 0.200000003, 0.200000003);
    u_xlat3.xyz = u_xlat3.xyz * u_xlat4.xyz;
    u_xlat3.xyz = u_xlat3.xyz * vec3(_ReflectionBrightness) + (-u_xlat5.xyz);
    u_xlat3.xyz = vec3(vec3(_ReflectionIntensity, _ReflectionIntensity, _ReflectionIntensity)) * u_xlat3.xyz + u_xlat5.xyz;
    u_xlat2.zw = _Time.yy * vec2(_WaterFall01_Speed, _Waterfall02_Speed) + u_xlat2.yy;
    u_xlat10_19 = texture(_WaterfallTex01, u_xlat2.xz).x;
    u_xlat10_2 = texture(_WaterfallTex01, u_xlat2.xw).y;
    u_xlat16_8.x = (-u_xlat10_19) + u_xlat10_2;
    u_xlat16_8.x = u_xlat10_2 * u_xlat16_8.x + u_xlat10_19;
    u_xlat11 = u_xlat10_2 * _Waterfall02Brightness;
    u_xlat19 = u_xlat10_19 * _Waterfall01Brightness;
    u_xlat2.x = u_xlat10_2 * _Waterfall02Brightness + (-u_xlat19);
    u_xlat19 = u_xlat11 * u_xlat2.x + u_xlat19;
    u_xlat2.x = vs_TEXCOORD4.y * _SprayRange + _SprayOffset;
    u_xlat2.x = (-u_xlat2.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat19 = u_xlat19 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat19 = min(max(u_xlat19, 0.0), 1.0);
#else
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
#endif
    u_xlat2.xyz = u_xlat16_8.xxx * _WaterfallPatternColor.xyz + (-u_xlat3.xyz);
    u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz + u_xlat3.xyz;
    u_xlat10_0 = texture(_ShadowMapTexture, u_xlat0.xy).x;
    u_xlat9.x = (-_ShadowStrength) + 1.0;
    u_xlat0.x = u_xlat10_0 * u_xlat9.x + _ShadowStrength;
    u_xlat3.xy = vs_TEXCOORD4.xy * _WaterfallSpecTex_ST.xy + _WaterfallSpecTex_ST.zw;
    u_xlat16_8.x = vs_TEXCOORD4.w * 0.5;
    u_xlat16_8.x = vs_TEXCOORD4.w * u_xlat3.y + (-u_xlat16_8.x);
    u_xlat12.xy = vs_TEXCOORD4.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat4.x = _Time.y * _Detail01_U_Speed + u_xlat12.x;
    u_xlat4.y = _Time.y * _Detail01_V_Speed + u_xlat12.y;
    u_xlat10_9 = texture(_NoiseTex, u_xlat4.xy).x;
    u_xlat3.x = u_xlat10_9 * _NoiselDistortionValue + u_xlat3.x;
    u_xlat3.y = u_xlat10_9 * _NoiselDistortionValue + u_xlat16_8.x;
    u_xlat10_9 = texture(_WaterfallSpecTex, u_xlat3.xy).x;
    u_xlat16_3.xyz = vec3(u_xlat10_9) * _WaterfallSpecColor.xyz;
    u_xlat9.x = (-u_xlat27) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat9.x = min(max(u_xlat9.x, 0.0), 1.0);
#else
    u_xlat9.x = clamp(u_xlat9.x, 0.0, 1.0);
#endif
    u_xlat9.x = u_xlat9.x * u_xlat18;
    u_xlat9.x = u_xlat9.x * _Opacity;
    u_xlat9.x = u_xlat1 * u_xlat9.x;
    u_xlat4.w = u_xlat10.x * u_xlat9.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.w = min(max(u_xlat4.w, 0.0), 1.0);
#else
    u_xlat4.w = clamp(u_xlat4.w, 0.0, 1.0);
#endif
    u_xlat9.xyz = u_xlat2.xyz * _DayColor.xyz;
    u_xlat0.xyz = u_xlat9.xyz * u_xlat0.xxx + u_xlat16_3.xyz;
    u_xlat27 = (-u_xlat28) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
    u_xlat27 = u_xlat27 * u_xlat10.x;
    u_xlat0.xyz = vec3(u_xlat27) * _FoamColor.xyz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * _ES_MainLightColor.xyz;
    u_xlat16_27 = max(_LightColor0.w, 1.0);
    u_xlat4.xyz = vec3(u_xlat16_27) * u_xlat0.xyz;
    SV_Target0 = u_xlat4;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "MSAA_INTERPOLATION" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
uniform 	vec4 hlslcc_mtx4x4_mhyJitteredVP[4];
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
vec3 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump vec3 u_xlat16_4;
mediump vec4 u_xlat16_5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
vec3 u_xlat8;
float u_xlat24;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    vs_TEXCOORD5.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    u_xlat1.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position = u_xlat1;
    vs_TEXCOORD2.zw = u_xlat1.zw;
    vs_COLOR0 = in_COLOR0;
    u_xlat3.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat3.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat3.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat8.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat3.xyz = u_xlat8.xxx * u_xlat3.xyz;
    u_xlat16_4.x = u_xlat3.y * u_xlat3.y;
    u_xlat16_4.x = u_xlat3.x * u_xlat3.x + (-u_xlat16_4.x);
    u_xlat16_5 = u_xlat3.yzzx * u_xlat3.xyzz;
    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_5);
    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_5);
    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_5);
    u_xlat16_4.xyz = unity_SHC.xyz * u_xlat16_4.xxx + u_xlat16_6.xyz;
    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat3.w = 1.0;
    u_xlat16_5.x = dot(unity_SHAr, u_xlat3);
    u_xlat16_5.y = dot(unity_SHAg, u_xlat3);
    u_xlat16_5.z = dot(unity_SHAb, u_xlat3);
    u_xlat16_4.xyz = u_xlat16_4.xyz + u_xlat16_5.xyz;
    vs_TEXCOORD1.xyz = u_xlat16_4.xyz;
    vs_TEXCOORD1.w = 1.0;
    u_xlat7.x = float(0.5);
    u_xlat7.z = float(0.5);
    u_xlat7.y = _ProjectionParams.x;
    u_xlat1.xyz = u_xlat1.xyw * u_xlat7.xyz;
    u_xlat1.w = u_xlat1.y * 0.5;
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4_mhyJitteredVP[1];
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[3] * u_xlat2.wwww + u_xlat1;
    u_xlat2.xyz = vec3(u_xlat7.z * u_xlat1.x, u_xlat7.y * u_xlat1.y, u_xlat7.z * u_xlat1.w);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    u_xlat2.w = u_xlat2.y * 0.5;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy;
    u_xlat8.x = dot(unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz);
    vs_TEXCOORD4.z = sqrt(u_xlat8.x);
    u_xlat8.x = dot(unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz);
    vs_TEXCOORD4.w = sqrt(u_xlat8.x);
    vs_TEXCOORD5.w = 0.0;
    u_xlat8.xyz = in_TANGENT0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat8.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_TANGENT0.xxx + u_xlat8.xyz;
    u_xlat0.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_TANGENT0.zzz + u_xlat8.xyz;
    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat0.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    vs_TEXCOORD6.xyz = u_xlat0.xyz;
    vs_TEXCOORD6.w = 0.0;
    vs_TEXCOORD7.xyz = u_xlat3.xyz;
    vs_TEXCOORD7.w = 0.0;
    u_xlat1.xyz = u_xlat0.yzx * u_xlat3.zxy;
    u_xlat0.xyz = u_xlat3.yzx * u_xlat0.zxy + (-u_xlat1.xyz);
    u_xlat24 = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD8.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    vs_TEXCOORD8.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _LightColor0;
uniform 	float _AlphaRange;
uniform 	float _AlphaOffset;
uniform 	float _Opacity;
uniform 	mediump float _BottomAlphaToggle;
uniform 	float _AlphaBottomRange;
uniform 	float _AlphaBottomOffset;
uniform 	vec4 _WaterfallTex01_ST;
uniform 	mediump vec4 _FoamUVCoord01;
uniform 	mediump vec4 _FoamUVCoord02;
uniform 	float _FoamRange;
uniform 	float _FoamOffset;
uniform 	vec4 _DayColor;
uniform 	vec4 _BottomColor;
uniform 	vec4 _TopColor;
uniform 	float _ColorGradientRange;
uniform 	float _ColorGradientOffset;
uniform 	vec4 _ReflectionColor_Dark;
uniform 	vec4 _ReflectionColor_Light;
uniform 	float _Normal01_U_Speed;
uniform 	vec4 _Normal01_ST;
uniform 	float _Normal01_VSpeed;
uniform 	float _Normal02_U_Speed;
uniform 	vec4 _Normal02_ST;
uniform 	float _Normal02_V_Speed;
uniform 	vec4 _DistortionIntensity;
uniform 	float _ReflectionBrightness;
uniform 	float _ReflectionIntensity;
uniform 	float _WaterFall01_Speed;
uniform 	float _Waterfall02_Speed;
uniform 	mediump vec4 _WaterfallPatternColor;
uniform 	float _Waterfall01Brightness;
uniform 	float _Waterfall02Brightness;
uniform 	float _SprayRange;
uniform 	float _SprayOffset;
uniform 	float _ShadowStrength;
uniform 	vec4 _WaterfallSpecTex_ST;
uniform 	float _Detail01_U_Speed;
uniform 	vec4 _NoiseTex_ST;
uniform 	float _Detail01_V_Speed;
uniform 	float _NoiselDistortionValue;
uniform 	mediump vec4 _WaterfallSpecColor;
uniform 	mediump vec4 _FoamColor;
uniform 	vec3 _ES_MainLightColor;
uniform lowp sampler2D _WaterfallTex01;
uniform lowp sampler2D _Normal01;
uniform lowp sampler2D _Normal02;
uniform lowp samplerCube _Reflection;
uniform lowp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _WaterfallSpecTex;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
in highp vec4 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
bvec2 u_xlatb0;
vec4 u_xlat1;
lowp float u_xlat10_1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
vec4 u_xlat3;
vec3 u_xlat4;
lowp vec3 u_xlat10_4;
vec3 u_xlat5;
vec3 u_xlat6;
mediump vec3 u_xlat16_7;
float u_xlat8;
float u_xlat9;
vec3 u_xlat10;
vec2 u_xlat16;
mediump float u_xlat16_16;
lowp float u_xlat10_16;
bool u_xlatb16;
float u_xlat18;
float u_xlat24;
mediump float u_xlat16_24;
lowp float u_xlat10_24;
float u_xlat25;
lowp float u_xlat10_25;
float u_xlat27;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.x = vs_TEXCOORD4.y * _AlphaRange + _AlphaOffset;
    u_xlat8 = vs_TEXCOORD4.y * _AlphaBottomRange + _AlphaBottomOffset;
#ifdef UNITY_ADRENO_ES3
    u_xlat8 = min(max(u_xlat8, 0.0), 1.0);
#else
    u_xlat8 = clamp(u_xlat8, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(_BottomAlphaToggle==1.0);
#else
    u_xlatb16 = _BottomAlphaToggle==1.0;
#endif
    u_xlat8 = (u_xlatb16) ? u_xlat8 : 1.0;
    u_xlat16.xy = vs_TEXCOORD4.xy * _WaterfallTex01_ST.xy + _WaterfallTex01_ST.zw;
    u_xlat1.xy = vec2(u_xlat16.x * vs_TEXCOORD4.z, u_xlat16.y * vs_TEXCOORD4.w);
    u_xlat16.xy = vec2(_Time.y * _FoamUVCoord01.z, _Time.y * _FoamUVCoord01.w);
    u_xlat16.xy = u_xlat1.xy * _FoamUVCoord01.xy + u_xlat16.xy;
    u_xlat2.xy = vec2(_Time.y * _FoamUVCoord02.z, _Time.y * _FoamUVCoord02.w);
    u_xlat2.xy = u_xlat1.xy * _FoamUVCoord02.xy + u_xlat2.xy;
    u_xlat18 = vs_TEXCOORD4.y * _FoamRange + _FoamOffset;
    u_xlat10_16 = texture(_WaterfallTex01, u_xlat16.xy).x;
    u_xlat10_24 = texture(_WaterfallTex01, u_xlat2.xy).y;
    u_xlat16_16 = u_xlat10_24 + u_xlat10_16;
    u_xlat16.x = u_xlat18 + u_xlat16_16;
#ifdef UNITY_ADRENO_ES3
    u_xlat16.x = min(max(u_xlat16.x, 0.0), 1.0);
#else
    u_xlat16.x = clamp(u_xlat16.x, 0.0, 1.0);
#endif
    u_xlat24 = vs_TEXCOORD4.y * _ColorGradientRange + _ColorGradientOffset;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat2.xyw = (-_BottomColor.xyz) + _TopColor.xyz;
    u_xlat2.xyw = vec3(u_xlat24) * u_xlat2.xyw + _BottomColor.xyz;
    u_xlat3.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat24 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat3.xyz = vec3(u_xlat24) * u_xlat3.xyz;
    u_xlat4.xy = vs_TEXCOORD4.xy * _Normal01_ST.xy + _Normal01_ST.zw;
    u_xlat24 = _Time.y * _Normal01_VSpeed;
    u_xlat27 = u_xlat4.x * vs_TEXCOORD4.z;
    u_xlat5.x = _Time.y * _Normal01_U_Speed + u_xlat27;
    u_xlat5.y = u_xlat4.y * vs_TEXCOORD4.w + u_xlat24;
    u_xlat4.xy = vs_TEXCOORD4.xy * _Normal02_ST.xy + _Normal02_ST.zw;
    u_xlat4.xy = vec2(u_xlat4.x * vs_TEXCOORD4.z, u_xlat4.y * vs_TEXCOORD4.w);
    u_xlat6.x = _Time.y * _Normal02_U_Speed + u_xlat4.x;
    u_xlat6.y = _Time.y * _Normal02_V_Speed + u_xlat4.y;
    u_xlat10_4.xyz = texture(_Normal01, u_xlat5.xy).xyz;
    u_xlat16_7.xyz = u_xlat10_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat10_4.xyz = texture(_Normal02, u_xlat6.xy).xyz;
    u_xlat16_7.xyz = u_xlat10_4.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_7.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat4.xyz = u_xlat16_7.xyz * _DistortionIntensity.xyz;
    u_xlat5.x = vs_TEXCOORD6.x;
    u_xlat5.y = vs_TEXCOORD8.x;
    u_xlat5.z = vs_TEXCOORD7.x;
    u_xlat5.x = dot(u_xlat5.xyz, u_xlat4.xyz);
    u_xlat6.x = vs_TEXCOORD6.y;
    u_xlat6.y = vs_TEXCOORD8.y;
    u_xlat6.z = vs_TEXCOORD7.y;
    u_xlat5.y = dot(u_xlat6.xyz, u_xlat4.xyz);
    u_xlat6.x = vs_TEXCOORD6.z;
    u_xlat6.y = vs_TEXCOORD8.z;
    u_xlat6.z = vs_TEXCOORD7.z;
    u_xlat5.z = dot(u_xlat6.xyz, u_xlat4.xyz);
    u_xlat24 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat4.xyz = vec3(u_xlat24) * u_xlat5.xyz;
    u_xlat24 = dot((-u_xlat3.xyz), u_xlat4.xyz);
    u_xlat24 = u_xlat24 + u_xlat24;
    u_xlat3.xyz = u_xlat4.xyz * (-vec3(u_xlat24)) + (-u_xlat3.xyz);
    u_xlat10_24 = texture(_Reflection, u_xlat3.xyz).x;
    u_xlat3.xyz = (-_ReflectionColor_Dark.xyz) + _ReflectionColor_Light.xyz;
    u_xlat3.xyz = vec3(u_xlat10_24) * u_xlat3.xyz + _ReflectionColor_Dark.xyz;
    u_xlat4.xyz = u_xlat2.xyw * vec3(0.200000003, 0.200000003, 0.200000003);
    u_xlat2.xyw = u_xlat2.xyw * u_xlat3.xyz;
    u_xlat2.xyw = u_xlat2.xyw * vec3(_ReflectionBrightness) + (-u_xlat4.xyz);
    u_xlat2.xyw = vec3(vec3(_ReflectionIntensity, _ReflectionIntensity, _ReflectionIntensity)) * u_xlat2.xyw + u_xlat4.xyz;
    u_xlat1.zw = _Time.yy * vec2(_WaterFall01_Speed, _Waterfall02_Speed) + u_xlat1.yy;
    u_xlat10_24 = texture(_WaterfallTex01, u_xlat1.xz).x;
    u_xlat10_1 = texture(_WaterfallTex01, u_xlat1.xw).y;
    u_xlat16_7.x = (-u_xlat10_24) + u_xlat10_1;
    u_xlat16_7.x = u_xlat10_1 * u_xlat16_7.x + u_xlat10_24;
    u_xlat9 = u_xlat10_1 * _Waterfall02Brightness;
    u_xlat24 = u_xlat10_24 * _Waterfall01Brightness;
    u_xlat1.x = u_xlat10_1 * _Waterfall02Brightness + (-u_xlat24);
    u_xlat24 = u_xlat9 * u_xlat1.x + u_xlat24;
    u_xlat1.x = vs_TEXCOORD4.y * _SprayRange + _SprayOffset;
    u_xlat1.x = (-u_xlat1.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat24 = u_xlat24 * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat16_7.xxx * _WaterfallPatternColor.xyz + (-u_xlat2.xyw);
    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz + u_xlat2.xyw;
    u_xlat2.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat10_24 = texture(_ShadowMapTexture, u_xlat2.xy).x;
    u_xlat25 = (-_ShadowStrength) + 1.0;
    u_xlat24 = u_xlat10_24 * u_xlat25 + _ShadowStrength;
    u_xlat2.xy = vs_TEXCOORD4.xy * _WaterfallSpecTex_ST.xy + _WaterfallSpecTex_ST.zw;
    u_xlat16_7.x = vs_TEXCOORD4.w * 0.5;
    u_xlat16_7.x = vs_TEXCOORD4.w * u_xlat2.y + (-u_xlat16_7.x);
    u_xlat10.xz = vs_TEXCOORD4.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat3.x = _Time.y * _Detail01_U_Speed + u_xlat10.x;
    u_xlat3.y = _Time.y * _Detail01_V_Speed + u_xlat10.z;
    u_xlat10_25 = texture(_NoiseTex, u_xlat3.xy).x;
    u_xlat2.x = u_xlat10_25 * _NoiselDistortionValue + u_xlat2.x;
    u_xlat2.y = u_xlat10_25 * _NoiselDistortionValue + u_xlat16_7.x;
    u_xlat10_25 = texture(_WaterfallSpecTex, u_xlat2.xy).x;
    u_xlat16_2.xyw = vec3(u_xlat10_25) * _WaterfallSpecColor.xyz;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x * _Opacity;
    u_xlat0.x = u_xlat8 * u_xlat0.x;
    u_xlat3.w = u_xlat16.x * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat3.w = min(max(u_xlat3.w, 0.0), 1.0);
#else
    u_xlat3.w = clamp(u_xlat3.w, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat1.xyz * _DayColor.xyz;
    u_xlat0.xyw = u_xlat1.xyz * vec3(u_xlat24) + u_xlat16_2.xyw;
    u_xlat1.x = (-u_xlat18) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat16.x = u_xlat16.x * u_xlat1.x;
    u_xlat0.xyz = u_xlat16.xxx * _FoamColor.xyz + u_xlat0.xyw;
    u_xlat0.xyz = u_xlat0.xyz * _ES_MainLightColor.xyz;
    u_xlat16_24 = max(_LightColor0.w, 1.0);
    u_xlat3.xyz = vec3(u_xlat16_24) * u_xlat0.xyz;
    SV_Target0 = u_xlat3;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "MSAA_INTERPOLATION" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
uniform 	vec4 hlslcc_mtx4x4_mhyJitteredVP[4];
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
vec3 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump vec3 u_xlat16_4;
mediump vec4 u_xlat16_5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
vec3 u_xlat8;
float u_xlat24;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    vs_TEXCOORD5.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    u_xlat1.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position = u_xlat1;
    vs_TEXCOORD2.zw = u_xlat1.zw;
    vs_COLOR0 = in_COLOR0;
    u_xlat3.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat3.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat3.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat8.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat3.xyz = u_xlat8.xxx * u_xlat3.xyz;
    u_xlat16_4.x = u_xlat3.y * u_xlat3.y;
    u_xlat16_4.x = u_xlat3.x * u_xlat3.x + (-u_xlat16_4.x);
    u_xlat16_5 = u_xlat3.yzzx * u_xlat3.xyzz;
    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_5);
    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_5);
    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_5);
    u_xlat16_4.xyz = unity_SHC.xyz * u_xlat16_4.xxx + u_xlat16_6.xyz;
    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat3.w = 1.0;
    u_xlat16_5.x = dot(unity_SHAr, u_xlat3);
    u_xlat16_5.y = dot(unity_SHAg, u_xlat3);
    u_xlat16_5.z = dot(unity_SHAb, u_xlat3);
    u_xlat16_4.xyz = u_xlat16_4.xyz + u_xlat16_5.xyz;
    vs_TEXCOORD1.xyz = u_xlat16_4.xyz;
    vs_TEXCOORD1.w = 1.0;
    u_xlat7.x = float(0.5);
    u_xlat7.z = float(0.5);
    u_xlat7.y = _ProjectionParams.x;
    u_xlat1.xyz = u_xlat1.xyw * u_xlat7.xyz;
    u_xlat1.w = u_xlat1.y * 0.5;
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4_mhyJitteredVP[1];
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[3] * u_xlat2.wwww + u_xlat1;
    u_xlat2.xyz = vec3(u_xlat7.z * u_xlat1.x, u_xlat7.y * u_xlat1.y, u_xlat7.z * u_xlat1.w);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    u_xlat2.w = u_xlat2.y * 0.5;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy;
    u_xlat8.x = dot(unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz);
    vs_TEXCOORD4.z = sqrt(u_xlat8.x);
    u_xlat8.x = dot(unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz);
    vs_TEXCOORD4.w = sqrt(u_xlat8.x);
    vs_TEXCOORD5.w = 0.0;
    u_xlat8.xyz = in_TANGENT0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat8.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_TANGENT0.xxx + u_xlat8.xyz;
    u_xlat0.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_TANGENT0.zzz + u_xlat8.xyz;
    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat0.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    vs_TEXCOORD6.xyz = u_xlat0.xyz;
    vs_TEXCOORD6.w = 0.0;
    vs_TEXCOORD7.xyz = u_xlat3.xyz;
    vs_TEXCOORD7.w = 0.0;
    u_xlat1.xyz = u_xlat0.yzx * u_xlat3.zxy;
    u_xlat0.xyz = u_xlat3.yzx * u_xlat0.zxy + (-u_xlat1.xyz);
    u_xlat24 = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD8.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    vs_TEXCOORD8.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _LightColor0;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	float _AlphaRange;
uniform 	float _AlphaOffset;
uniform 	float _Opacity;
uniform 	mediump float _BottomAlphaToggle;
uniform 	float _AlphaBottomRange;
uniform 	float _AlphaBottomOffset;
uniform 	vec4 _WaterfallTex01_ST;
uniform 	mediump vec4 _FoamUVCoord01;
uniform 	mediump vec4 _FoamUVCoord02;
uniform 	float _FoamRange;
uniform 	float _FoamOffset;
uniform 	vec4 _DayColor;
uniform 	vec4 _BottomColor;
uniform 	vec4 _TopColor;
uniform 	float _ColorGradientRange;
uniform 	float _ColorGradientOffset;
uniform 	vec4 _ReflectionColor_Dark;
uniform 	vec4 _ReflectionColor_Light;
uniform 	float _Normal01_U_Speed;
uniform 	vec4 _Normal01_ST;
uniform 	float _Normal01_VSpeed;
uniform 	float _Normal02_U_Speed;
uniform 	vec4 _Normal02_ST;
uniform 	float _Normal02_V_Speed;
uniform 	vec4 _DistortionIntensity;
uniform 	float _ReflectionBrightness;
uniform 	float _ReflectionIntensity;
uniform 	float _WaterFall01_Speed;
uniform 	float _Waterfall02_Speed;
uniform 	mediump vec4 _WaterfallPatternColor;
uniform 	float _Waterfall01Brightness;
uniform 	float _Waterfall02Brightness;
uniform 	float _SprayRange;
uniform 	float _SprayOffset;
uniform 	float _ShadowStrength;
uniform 	vec4 _WaterfallSpecTex_ST;
uniform 	float _Detail01_U_Speed;
uniform 	vec4 _NoiseTex_ST;
uniform 	float _Detail01_V_Speed;
uniform 	float _NoiselDistortionValue;
uniform 	mediump vec4 _WaterfallSpecColor;
uniform 	mediump vec4 _FoamColor;
uniform 	vec3 _ES_MainLightColor;
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _WaterfallTex01;
uniform lowp sampler2D _Normal01;
uniform lowp sampler2D _Normal02;
uniform lowp samplerCube _Reflection;
uniform lowp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _WaterfallSpecTex;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
in highp vec4 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
lowp float u_xlat10_0;
bvec2 u_xlatb0;
float u_xlat1;
vec4 u_xlat2;
lowp float u_xlat10_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
vec4 u_xlat4;
vec3 u_xlat5;
lowp vec3 u_xlat10_5;
vec3 u_xlat6;
vec3 u_xlat7;
mediump vec3 u_xlat16_8;
vec3 u_xlat9;
lowp float u_xlat10_9;
vec2 u_xlat10;
mediump float u_xlat16_10;
lowp float u_xlat10_10;
bool u_xlatb10;
float u_xlat11;
vec2 u_xlat12;
float u_xlat18;
float u_xlat19;
lowp float u_xlat10_19;
float u_xlat27;
mediump float u_xlat16_27;
float u_xlat28;
float u_xlat30;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat18 = texture(_CameraDepthTextureScaled, u_xlat0.xy).x;
    u_xlat18 = u_xlat18 * _ProjectionParams.z + (-vs_TEXCOORD3.w);
    u_xlat27 = u_xlat18 * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
    u_xlat18 = u_xlat18 / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat1 = (-u_xlat27) + 1.0;
    u_xlat18 = u_xlat18 * u_xlat1 + u_xlat27;
    u_xlat27 = vs_TEXCOORD4.y * _AlphaRange + _AlphaOffset;
    u_xlat1 = vs_TEXCOORD4.y * _AlphaBottomRange + _AlphaBottomOffset;
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(_BottomAlphaToggle==1.0);
#else
    u_xlatb10 = _BottomAlphaToggle==1.0;
#endif
    u_xlat1 = (u_xlatb10) ? u_xlat1 : 1.0;
    u_xlat10.xy = vs_TEXCOORD4.xy * _WaterfallTex01_ST.xy + _WaterfallTex01_ST.zw;
    u_xlat2.xy = vec2(u_xlat10.x * vs_TEXCOORD4.z, u_xlat10.y * vs_TEXCOORD4.w);
    u_xlat10.xy = vec2(_Time.y * _FoamUVCoord01.z, _Time.y * _FoamUVCoord01.w);
    u_xlat10.xy = u_xlat2.xy * _FoamUVCoord01.xy + u_xlat10.xy;
    u_xlat3.xy = vec2(_Time.y * _FoamUVCoord02.z, _Time.y * _FoamUVCoord02.w);
    u_xlat3.xy = u_xlat2.xy * _FoamUVCoord02.xy + u_xlat3.xy;
    u_xlat28 = vs_TEXCOORD4.y * _FoamRange + _FoamOffset;
    u_xlat10_10 = texture(_WaterfallTex01, u_xlat10.xy).x;
    u_xlat10_19 = texture(_WaterfallTex01, u_xlat3.xy).y;
    u_xlat16_10 = u_xlat10_19 + u_xlat10_10;
    u_xlat10.x = u_xlat28 + u_xlat16_10;
#ifdef UNITY_ADRENO_ES3
    u_xlat10.x = min(max(u_xlat10.x, 0.0), 1.0);
#else
    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
#endif
    u_xlat19 = vs_TEXCOORD4.y * _ColorGradientRange + _ColorGradientOffset;
#ifdef UNITY_ADRENO_ES3
    u_xlat19 = min(max(u_xlat19, 0.0), 1.0);
#else
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
#endif
    u_xlat3.xyz = (-_BottomColor.xyz) + _TopColor.xyz;
    u_xlat3.xyz = vec3(u_xlat19) * u_xlat3.xyz + _BottomColor.xyz;
    u_xlat4.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat19 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat19 = inversesqrt(u_xlat19);
    u_xlat4.xyz = vec3(u_xlat19) * u_xlat4.xyz;
    u_xlat5.xy = vs_TEXCOORD4.xy * _Normal01_ST.xy + _Normal01_ST.zw;
    u_xlat19 = _Time.y * _Normal01_VSpeed;
    u_xlat30 = u_xlat5.x * vs_TEXCOORD4.z;
    u_xlat6.x = _Time.y * _Normal01_U_Speed + u_xlat30;
    u_xlat6.y = u_xlat5.y * vs_TEXCOORD4.w + u_xlat19;
    u_xlat5.xy = vs_TEXCOORD4.xy * _Normal02_ST.xy + _Normal02_ST.zw;
    u_xlat5.xy = vec2(u_xlat5.x * vs_TEXCOORD4.z, u_xlat5.y * vs_TEXCOORD4.w);
    u_xlat7.x = _Time.y * _Normal02_U_Speed + u_xlat5.x;
    u_xlat7.y = _Time.y * _Normal02_V_Speed + u_xlat5.y;
    u_xlat10_5.xyz = texture(_Normal01, u_xlat6.xy).xyz;
    u_xlat16_8.xyz = u_xlat10_5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat10_5.xyz = texture(_Normal02, u_xlat7.xy).xyz;
    u_xlat16_8.xyz = u_xlat10_5.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_8.xyz;
    u_xlat16_8.xyz = u_xlat16_8.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat5.xyz = u_xlat16_8.xyz * _DistortionIntensity.xyz;
    u_xlat6.x = vs_TEXCOORD6.x;
    u_xlat6.y = vs_TEXCOORD8.x;
    u_xlat6.z = vs_TEXCOORD7.x;
    u_xlat6.x = dot(u_xlat6.xyz, u_xlat5.xyz);
    u_xlat7.x = vs_TEXCOORD6.y;
    u_xlat7.y = vs_TEXCOORD8.y;
    u_xlat7.z = vs_TEXCOORD7.y;
    u_xlat6.y = dot(u_xlat7.xyz, u_xlat5.xyz);
    u_xlat7.x = vs_TEXCOORD6.z;
    u_xlat7.y = vs_TEXCOORD8.z;
    u_xlat7.z = vs_TEXCOORD7.z;
    u_xlat6.z = dot(u_xlat7.xyz, u_xlat5.xyz);
    u_xlat19 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat19 = inversesqrt(u_xlat19);
    u_xlat5.xyz = vec3(u_xlat19) * u_xlat6.xyz;
    u_xlat19 = dot((-u_xlat4.xyz), u_xlat5.xyz);
    u_xlat19 = u_xlat19 + u_xlat19;
    u_xlat4.xyz = u_xlat5.xyz * (-vec3(u_xlat19)) + (-u_xlat4.xyz);
    u_xlat10_19 = texture(_Reflection, u_xlat4.xyz).x;
    u_xlat4.xyz = (-_ReflectionColor_Dark.xyz) + _ReflectionColor_Light.xyz;
    u_xlat4.xyz = vec3(u_xlat10_19) * u_xlat4.xyz + _ReflectionColor_Dark.xyz;
    u_xlat5.xyz = u_xlat3.xyz * vec3(0.200000003, 0.200000003, 0.200000003);
    u_xlat3.xyz = u_xlat3.xyz * u_xlat4.xyz;
    u_xlat3.xyz = u_xlat3.xyz * vec3(_ReflectionBrightness) + (-u_xlat5.xyz);
    u_xlat3.xyz = vec3(vec3(_ReflectionIntensity, _ReflectionIntensity, _ReflectionIntensity)) * u_xlat3.xyz + u_xlat5.xyz;
    u_xlat2.zw = _Time.yy * vec2(_WaterFall01_Speed, _Waterfall02_Speed) + u_xlat2.yy;
    u_xlat10_19 = texture(_WaterfallTex01, u_xlat2.xz).x;
    u_xlat10_2 = texture(_WaterfallTex01, u_xlat2.xw).y;
    u_xlat16_8.x = (-u_xlat10_19) + u_xlat10_2;
    u_xlat16_8.x = u_xlat10_2 * u_xlat16_8.x + u_xlat10_19;
    u_xlat11 = u_xlat10_2 * _Waterfall02Brightness;
    u_xlat19 = u_xlat10_19 * _Waterfall01Brightness;
    u_xlat2.x = u_xlat10_2 * _Waterfall02Brightness + (-u_xlat19);
    u_xlat19 = u_xlat11 * u_xlat2.x + u_xlat19;
    u_xlat2.x = vs_TEXCOORD4.y * _SprayRange + _SprayOffset;
    u_xlat2.x = (-u_xlat2.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat19 = u_xlat19 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat19 = min(max(u_xlat19, 0.0), 1.0);
#else
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
#endif
    u_xlat2.xyz = u_xlat16_8.xxx * _WaterfallPatternColor.xyz + (-u_xlat3.xyz);
    u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz + u_xlat3.xyz;
    u_xlat10_0 = texture(_ShadowMapTexture, u_xlat0.xy).x;
    u_xlat9.x = (-_ShadowStrength) + 1.0;
    u_xlat0.x = u_xlat10_0 * u_xlat9.x + _ShadowStrength;
    u_xlat3.xy = vs_TEXCOORD4.xy * _WaterfallSpecTex_ST.xy + _WaterfallSpecTex_ST.zw;
    u_xlat16_8.x = vs_TEXCOORD4.w * 0.5;
    u_xlat16_8.x = vs_TEXCOORD4.w * u_xlat3.y + (-u_xlat16_8.x);
    u_xlat12.xy = vs_TEXCOORD4.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat4.x = _Time.y * _Detail01_U_Speed + u_xlat12.x;
    u_xlat4.y = _Time.y * _Detail01_V_Speed + u_xlat12.y;
    u_xlat10_9 = texture(_NoiseTex, u_xlat4.xy).x;
    u_xlat3.x = u_xlat10_9 * _NoiselDistortionValue + u_xlat3.x;
    u_xlat3.y = u_xlat10_9 * _NoiselDistortionValue + u_xlat16_8.x;
    u_xlat10_9 = texture(_WaterfallSpecTex, u_xlat3.xy).x;
    u_xlat16_3.xyz = vec3(u_xlat10_9) * _WaterfallSpecColor.xyz;
    u_xlat9.x = (-u_xlat27) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat9.x = min(max(u_xlat9.x, 0.0), 1.0);
#else
    u_xlat9.x = clamp(u_xlat9.x, 0.0, 1.0);
#endif
    u_xlat9.x = u_xlat9.x * u_xlat18;
    u_xlat9.x = u_xlat9.x * _Opacity;
    u_xlat9.x = u_xlat1 * u_xlat9.x;
    u_xlat4.w = u_xlat10.x * u_xlat9.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.w = min(max(u_xlat4.w, 0.0), 1.0);
#else
    u_xlat4.w = clamp(u_xlat4.w, 0.0, 1.0);
#endif
    u_xlat9.xyz = u_xlat2.xyz * _DayColor.xyz;
    u_xlat0.xyz = u_xlat9.xyz * u_xlat0.xxx + u_xlat16_3.xyz;
    u_xlat27 = (-u_xlat28) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
    u_xlat27 = u_xlat27 * u_xlat10.x;
    u_xlat0.xyz = vec3(u_xlat27) * _FoamColor.xyz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * _ES_MainLightColor.xyz;
    u_xlat16_27 = max(_LightColor0.w, 1.0);
    u_xlat4.xyz = vec3(u_xlat16_27) * u_xlat0.xyz;
    SV_Target0 = u_xlat4;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	mediump float _MHYZBias;
uniform 	vec4 hlslcc_mtx4x4_mhyJitteredVP[4];
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
mediump vec4 u_xlat16_3;
bool u_xlatb3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat6;
mediump vec3 u_xlat16_7;
float u_xlat11;
mediump float u_xlat16_12;
float u_xlat18;
bool u_xlatb18;
float u_xlat19;
float u_xlat24;
bool u_xlatb24;
float u_xlat27;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat2.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    gl_Position = u_xlat2;
    vs_TEXCOORD2.zw = u_xlat2.zw;
    vs_COLOR0 = in_COLOR0;
    u_xlat3.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat24 = u_xlat3.y * _HeigtFogParams.x;
    u_xlat18 = u_xlat24 * -1.44269502;
    u_xlat18 = exp2(u_xlat18);
    u_xlat18 = (-u_xlat18) + 1.0;
    u_xlat18 = u_xlat18 / u_xlat24;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(0.00999999978<abs(u_xlat24));
#else
    u_xlatb24 = 0.00999999978<abs(u_xlat24);
#endif
    u_xlat16_4.x = (u_xlatb24) ? u_xlat18 : 1.0;
    u_xlat24 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat24 = sqrt(u_xlat24);
    u_xlat18 = u_xlat24 * _HeigtFogParams.y;
    u_xlat16_4.x = u_xlat18 * u_xlat16_4.x;
    u_xlat16_4.x = exp2((-u_xlat16_4.x));
    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
    u_xlat18 = u_xlat3.y * _HeigtFogParams2.x;
    u_xlat27 = u_xlat18 * -1.44269502;
    u_xlat27 = exp2(u_xlat27);
    u_xlat27 = (-u_xlat27) + 1.0;
    u_xlat27 = u_xlat27 / u_xlat18;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(0.00999999978<abs(u_xlat18));
#else
    u_xlatb18 = 0.00999999978<abs(u_xlat18);
#endif
    u_xlat16_12 = (u_xlatb18) ? u_xlat27 : 1.0;
    u_xlat18 = u_xlat24 * _HeigtFogParams2.y;
    u_xlat16_12 = u_xlat18 * u_xlat16_12;
    u_xlat16_12 = exp2((-u_xlat16_12));
    u_xlat16_4.y = (-u_xlat16_12) + 1.0;
    u_xlat16_4.xy = max(u_xlat16_4.xy, vec2(0.0, 0.0));
    u_xlat16_4.x = u_xlat16_4.y + u_xlat16_4.x;
    u_xlat18 = u_xlat24 * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat16_12 = (-u_xlat18) + 2.0;
    u_xlat16_12 = u_xlat18 * u_xlat16_12;
    u_xlat18 = u_xlat16_12 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat18 = u_xlat18 + 1.0;
    u_xlat16_4.x = u_xlat18 * u_xlat16_4.x;
    u_xlat18 = min(u_xlat16_4.x, _HeigtFogColBase.w);
    u_xlat27 = (-u_xlat18) + 1.0;
    u_xlat5.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat5.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat5.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat3.x = dot(u_xlat3.xyz, u_xlat5.xyz);
    u_xlat11 = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!((-u_xlat3.x)>=u_xlat11);
#else
    u_xlatb3 = (-u_xlat3.x)>=u_xlat11;
#endif
    u_xlat11 = u_xlat24 * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat11 = min(max(u_xlat11, 0.0), 1.0);
#else
    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
#endif
    u_xlat24 = u_xlat24 + (-_HeigtFogRamp.w);
    u_xlat24 = u_xlat24 * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat19 = (-u_xlat11) + 2.0;
    u_xlat11 = u_xlat19 * u_xlat11;
    u_xlat19 = u_xlat11 * _HeigtFogColDelta.w;
    u_xlat3.x = (u_xlatb3) ? u_xlat19 : u_xlat11;
    u_xlat3.x = log2(u_xlat3.x);
    u_xlat3.x = u_xlat3.x * unity_FogColor.w;
    u_xlat3.x = exp2(u_xlat3.x);
    u_xlat3.x = min(u_xlat3.x, _HeigtFogColBase.w);
    u_xlat11 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat11 = min(max(u_xlat11, 0.0), 1.0);
#else
    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
#endif
    u_xlat16_4.x = (-u_xlat11) + 2.0;
    u_xlat16_4.x = u_xlat11 * u_xlat16_4.x;
    u_xlat5.xyz = u_xlat16_4.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat6.xyz = (-u_xlat5.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat5.xyz = vec3(u_xlat24) * u_xlat6.xyz + u_xlat5.xyz;
    u_xlat5.xyz = u_xlat3.xxx * u_xlat5.xyz;
    u_xlat24 = (-u_xlat3.x) + 1.0;
    vs_TEXCOORD0.w = u_xlat27 * u_xlat24;
    u_xlat3.xyz = vec3(u_xlat27) * u_xlat5.xyz;
    u_xlat24 = u_xlat0.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    u_xlat0.xyz = vec3(u_xlat24) * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    vs_TEXCOORD0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat3.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat0.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    u_xlat16_4.x = u_xlat0.y * u_xlat0.y;
    u_xlat16_4.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_4.x);
    u_xlat16_3 = u_xlat0.yzzx * u_xlat0.xyzz;
    u_xlat16_7.x = dot(unity_SHBr, u_xlat16_3);
    u_xlat16_7.y = dot(unity_SHBg, u_xlat16_3);
    u_xlat16_7.z = dot(unity_SHBb, u_xlat16_3);
    u_xlat16_4.xyz = unity_SHC.xyz * u_xlat16_4.xxx + u_xlat16_7.xyz;
    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat0.w = 1.0;
    u_xlat16_7.x = dot(unity_SHAr, u_xlat0);
    u_xlat16_7.y = dot(unity_SHAg, u_xlat0);
    u_xlat16_7.z = dot(unity_SHAb, u_xlat0);
    u_xlat16_4.xyz = u_xlat16_4.xyz + u_xlat16_7.xyz;
    vs_TEXCOORD1.xyz = u_xlat16_4.xyz;
    vs_TEXCOORD1.w = 1.0;
    u_xlat5.x = float(0.5);
    u_xlat5.z = float(0.5);
    u_xlat5.y = _ProjectionParams.x;
    u_xlat2.xyz = u_xlat2.xyw * u_xlat5.xyz;
    u_xlat2.w = u_xlat2.y * 0.5;
    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4_mhyJitteredVP[1];
    u_xlat2 = hlslcc_mtx4x4_mhyJitteredVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4_mhyJitteredVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat2.xyz = vec3(u_xlat5.z * u_xlat1.x, u_xlat5.y * u_xlat1.y, u_xlat5.z * u_xlat1.w);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    u_xlat2.w = u_xlat2.y * 0.5;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat24 = dot(hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, hlslcc_mtx4x4unity_ObjectToWorld[0].xyz);
    vs_TEXCOORD4.z = sqrt(u_xlat24);
    u_xlat24 = dot(hlslcc_mtx4x4unity_ObjectToWorld[1].xyz, hlslcc_mtx4x4unity_ObjectToWorld[1].xyz);
    vs_TEXCOORD4.w = sqrt(u_xlat24);
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD5.w = 0.0;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
    vs_TEXCOORD6.xyz = u_xlat1.xyz;
    vs_TEXCOORD6.w = 0.0;
    vs_TEXCOORD7.xyz = u_xlat0.xyz;
    vs_TEXCOORD7.w = 0.0;
    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
    u_xlat24 = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD8.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    vs_TEXCOORD8.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	mediump vec4 _LightColor0;
uniform 	float _AlphaRange;
uniform 	float _AlphaOffset;
uniform 	float _Opacity;
uniform 	mediump float _BottomAlphaToggle;
uniform 	float _AlphaBottomRange;
uniform 	float _AlphaBottomOffset;
uniform 	vec4 _WaterfallTex01_ST;
uniform 	mediump vec4 _FoamUVCoord01;
uniform 	mediump vec4 _FoamUVCoord02;
uniform 	float _FoamRange;
uniform 	float _FoamOffset;
uniform 	vec4 _DayColor;
uniform 	vec4 _BottomColor;
uniform 	vec4 _TopColor;
uniform 	float _ColorGradientRange;
uniform 	float _ColorGradientOffset;
uniform 	vec4 _ReflectionColor_Dark;
uniform 	vec4 _ReflectionColor_Light;
uniform 	float _Normal01_U_Speed;
uniform 	vec4 _Normal01_ST;
uniform 	float _Normal01_VSpeed;
uniform 	float _Normal02_U_Speed;
uniform 	vec4 _Normal02_ST;
uniform 	float _Normal02_V_Speed;
uniform 	vec4 _DistortionIntensity;
uniform 	float _ReflectionBrightness;
uniform 	float _ReflectionIntensity;
uniform 	float _WaterFall01_Speed;
uniform 	float _Waterfall02_Speed;
uniform 	mediump vec4 _WaterfallPatternColor;
uniform 	float _Waterfall01Brightness;
uniform 	float _Waterfall02Brightness;
uniform 	float _SprayRange;
uniform 	float _SprayOffset;
uniform 	float _ShadowStrength;
uniform 	vec4 _WaterfallSpecTex_ST;
uniform 	float _Detail01_U_Speed;
uniform 	vec4 _NoiseTex_ST;
uniform 	float _Detail01_V_Speed;
uniform 	float _NoiselDistortionValue;
uniform 	mediump vec4 _WaterfallSpecColor;
uniform 	mediump vec4 _FoamColor;
uniform 	vec3 _ES_MainLightColor;
uniform lowp sampler2D _WaterfallTex01;
uniform lowp sampler2D _Normal01;
uniform lowp sampler2D _Normal02;
uniform lowp samplerCube _Reflection;
uniform lowp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _WaterfallSpecTex;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
in highp vec4 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
lowp vec3 u_xlat10_0;
vec4 u_xlat1;
mediump float u_xlat16_1;
lowp float u_xlat10_1;
bool u_xlatb1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
bool u_xlatb3;
vec3 u_xlat4;
vec3 u_xlat5;
vec3 u_xlat6;
bool u_xlatb6;
vec3 u_xlat7;
mediump float u_xlat16_8;
vec3 u_xlat9;
vec2 u_xlat13;
lowp float u_xlat10_13;
float u_xlat18;
mediump float u_xlat16_18;
lowp float u_xlat10_18;
float u_xlat19;
bool u_xlatb19;
void main()
{
    u_xlat0.xy = vs_TEXCOORD4.xy * _Normal01_ST.xy + _Normal01_ST.zw;
    u_xlat0.x = u_xlat0.x * vs_TEXCOORD4.z;
    u_xlat1.x = _Time.y * _Normal01_U_Speed + u_xlat0.x;
    u_xlat0.x = _Time.y * _Normal01_VSpeed;
    u_xlat1.y = u_xlat0.y * vs_TEXCOORD4.w + u_xlat0.x;
    u_xlat10_0.xyz = texture(_Normal01, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xy = vs_TEXCOORD4.xy * _Normal02_ST.xy + _Normal02_ST.zw;
    u_xlat0.xy = vec2(u_xlat0.x * vs_TEXCOORD4.z, u_xlat0.y * vs_TEXCOORD4.w);
    u_xlat1.x = _Time.y * _Normal02_U_Speed + u_xlat0.x;
    u_xlat1.y = _Time.y * _Normal02_V_Speed + u_xlat0.y;
    u_xlat10_0.xyz = texture(_Normal02, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_2.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = u_xlat16_2.xyz * _DistortionIntensity.xyz;
    u_xlat1.x = vs_TEXCOORD6.x;
    u_xlat1.y = vs_TEXCOORD8.x;
    u_xlat1.z = vs_TEXCOORD7.x;
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat3.x = vs_TEXCOORD6.y;
    u_xlat3.y = vs_TEXCOORD8.y;
    u_xlat3.z = vs_TEXCOORD7.y;
    u_xlat1.y = dot(u_xlat3.xyz, u_xlat0.xyz);
    u_xlat3.x = vs_TEXCOORD6.z;
    u_xlat3.y = vs_TEXCOORD8.z;
    u_xlat3.z = vs_TEXCOORD7.z;
    u_xlat1.z = dot(u_xlat3.xyz, u_xlat0.xyz);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
    u_xlat18 = dot((-u_xlat1.xyz), u_xlat0.xyz);
    u_xlat18 = u_xlat18 + u_xlat18;
    u_xlat0.xyz = u_xlat0.xyz * (-vec3(u_xlat18)) + (-u_xlat1.xyz);
    u_xlat10_0.x = texture(_Reflection, u_xlat0.xyz).x;
    u_xlat6.xyz = (-_ReflectionColor_Dark.xyz) + _ReflectionColor_Light.xyz;
    u_xlat0.xyz = u_xlat10_0.xxx * u_xlat6.xyz + _ReflectionColor_Dark.xyz;
    u_xlat18 = vs_TEXCOORD4.y * _ColorGradientRange + _ColorGradientOffset;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat1.xyz = (-_BottomColor.xyz) + _TopColor.xyz;
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz + _BottomColor.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.200000003, 0.200000003, 0.200000003);
    u_xlat0.xyz = u_xlat0.xyz * vec3(_ReflectionBrightness) + (-u_xlat1.xyz);
    u_xlat0.xyz = vec3(vec3(_ReflectionIntensity, _ReflectionIntensity, _ReflectionIntensity)) * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat1.xy = vs_TEXCOORD4.xy * _WaterfallTex01_ST.xy + _WaterfallTex01_ST.zw;
    u_xlat1.xy = vec2(u_xlat1.x * vs_TEXCOORD4.z, u_xlat1.y * vs_TEXCOORD4.w);
    u_xlat1.zw = _Time.yy * vec2(_WaterFall01_Speed, _Waterfall02_Speed) + u_xlat1.yy;
    u_xlat10_18 = texture(_WaterfallTex01, u_xlat1.xz).x;
    u_xlat10_13 = texture(_WaterfallTex01, u_xlat1.xw).y;
    u_xlat16_2.x = (-u_xlat10_18) + u_xlat10_13;
    u_xlat16_2.x = u_xlat10_13 * u_xlat16_2.x + u_xlat10_18;
    u_xlat18 = u_xlat10_18 * _Waterfall01Brightness;
    u_xlat3.xyz = u_xlat16_2.xxx * _WaterfallPatternColor.xyz + (-u_xlat0.xyz);
    u_xlat19 = u_xlat10_13 * _Waterfall02Brightness + (-u_xlat18);
    u_xlat13.x = u_xlat10_13 * _Waterfall02Brightness;
    u_xlat18 = u_xlat13.x * u_xlat19 + u_xlat18;
    u_xlat13.x = vs_TEXCOORD4.y * _SprayRange + _SprayOffset;
    u_xlat13.x = (-u_xlat13.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat13.x = min(max(u_xlat13.x, 0.0), 1.0);
#else
    u_xlat13.x = clamp(u_xlat13.x, 0.0, 1.0);
#endif
    u_xlat18 = u_xlat18 * u_xlat13.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * _DayColor.xyz;
    u_xlat13.xy = vs_TEXCOORD4.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat3.x = _Time.y * _Detail01_U_Speed + u_xlat13.x;
    u_xlat3.y = _Time.y * _Detail01_V_Speed + u_xlat13.y;
    u_xlat10_18 = texture(_NoiseTex, u_xlat3.xy).x;
    u_xlat16_2.x = vs_TEXCOORD4.w * 0.5;
    u_xlat13.xy = vs_TEXCOORD4.xy * _WaterfallSpecTex_ST.xy + _WaterfallSpecTex_ST.zw;
    u_xlat16_2.x = vs_TEXCOORD4.w * u_xlat13.y + (-u_xlat16_2.x);
    u_xlat3.x = u_xlat10_18 * _NoiselDistortionValue + u_xlat13.x;
    u_xlat3.y = u_xlat10_18 * _NoiselDistortionValue + u_xlat16_2.x;
    u_xlat10_18 = texture(_WaterfallSpecTex, u_xlat3.xy).x;
    u_xlat16_3.xyz = vec3(u_xlat10_18) * _WaterfallSpecColor.xyz;
    u_xlat13.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat10_18 = texture(_ShadowMapTexture, u_xlat13.xy).x;
    u_xlat13.x = (-_ShadowStrength) + 1.0;
    u_xlat18 = u_xlat10_18 * u_xlat13.x + _ShadowStrength;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat16_3.xyz;
    u_xlat13.xy = vec2(_Time.y * _FoamUVCoord01.z, _Time.y * _FoamUVCoord01.w);
    u_xlat13.xy = u_xlat1.xy * _FoamUVCoord01.xy + u_xlat13.xy;
    u_xlat10_18 = texture(_WaterfallTex01, u_xlat13.xy).x;
    u_xlat13.xy = vec2(_Time.y * _FoamUVCoord02.z, _Time.y * _FoamUVCoord02.w);
    u_xlat1.xy = u_xlat1.xy * _FoamUVCoord02.xy + u_xlat13.xy;
    u_xlat10_1 = texture(_WaterfallTex01, u_xlat1.xy).y;
    u_xlat16_18 = u_xlat10_18 + u_xlat10_1;
    u_xlat1.x = vs_TEXCOORD4.y * _FoamRange + _FoamOffset;
    u_xlat18 = u_xlat16_18 + u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat1.x = (-u_xlat1.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat18 * u_xlat1.x;
    u_xlat0.xyz = u_xlat1.xxx * _FoamColor.xyz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * _ES_MainLightColor.xyz;
    u_xlat16_1 = max(_LightColor0.w, 1.0);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16_1);
    u_xlat1.xyz = vs_TEXCOORD5.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat19 = u_xlat1.y * _HeigtFogParams.x;
    u_xlat3.x = u_xlat19 * -1.44269502;
    u_xlat3.x = exp2(u_xlat3.x);
    u_xlat3.x = (-u_xlat3.x) + 1.0;
    u_xlat3.x = u_xlat3.x / u_xlat19;
#ifdef UNITY_ADRENO_ES3
    u_xlatb19 = !!(0.00999999978<abs(u_xlat19));
#else
    u_xlatb19 = 0.00999999978<abs(u_xlat19);
#endif
    u_xlat16_2.x = (u_xlatb19) ? u_xlat3.x : 1.0;
    u_xlat19 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat19 = sqrt(u_xlat19);
    u_xlat3.x = u_xlat19 * _HeigtFogParams.y;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat3.x;
    u_xlat16_2.x = exp2((-u_xlat16_2.x));
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat3.x = u_xlat1.y * _HeigtFogParams2.x;
    u_xlat9.x = u_xlat3.x * -1.44269502;
    u_xlat9.x = exp2(u_xlat9.x);
    u_xlat9.x = (-u_xlat9.x) + 1.0;
    u_xlat9.x = u_xlat9.x / u_xlat3.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(0.00999999978<abs(u_xlat3.x));
#else
    u_xlatb3 = 0.00999999978<abs(u_xlat3.x);
#endif
    u_xlat16_8 = (u_xlatb3) ? u_xlat9.x : 1.0;
    u_xlat3.x = u_xlat19 * _HeigtFogParams2.y;
    u_xlat16_8 = u_xlat16_8 * u_xlat3.x;
    u_xlat16_8 = exp2((-u_xlat16_8));
    u_xlat16_2.y = (-u_xlat16_8) + 1.0;
    u_xlat16_2.xy = max(u_xlat16_2.xy, vec2(0.0, 0.0));
    u_xlat16_2.x = u_xlat16_2.y + u_xlat16_2.x;
    u_xlat3.x = u_xlat19 * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat3.x = min(max(u_xlat3.x, 0.0), 1.0);
#else
    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
#endif
    u_xlat16_8 = (-u_xlat3.x) + 2.0;
    u_xlat16_8 = u_xlat16_8 * u_xlat3.x;
    u_xlat3.x = u_xlat16_8 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat3.x = u_xlat3.x + 1.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat3.x;
    u_xlat3.x = min(u_xlat16_2.x, _HeigtFogColBase.w);
    u_xlat9.x = (-u_xlat3.x) + 1.0;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat4.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat4.xyz);
    u_xlat7.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!((-u_xlat1.x)>=u_xlat7.x);
#else
    u_xlatb1 = (-u_xlat1.x)>=u_xlat7.x;
#endif
    u_xlat7.x = u_xlat19 * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat13.x = u_xlat19 + (-_HeigtFogRamp.w);
    u_xlat13.x = u_xlat13.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat13.x = min(max(u_xlat13.x, 0.0), 1.0);
#else
    u_xlat13.x = clamp(u_xlat13.x, 0.0, 1.0);
#endif
    u_xlat19 = (-u_xlat7.x) + 2.0;
    u_xlat7.x = u_xlat19 * u_xlat7.x;
    u_xlat19 = u_xlat7.x * _HeigtFogColDelta.w;
    u_xlat1.x = (u_xlatb1) ? u_xlat19 : u_xlat7.x;
    u_xlat1.x = log2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * unity_FogColor.w;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat1.x = min(u_xlat1.x, _HeigtFogColBase.w);
    u_xlat7.x = vs_TEXCOORD5.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat16_2.x = (-u_xlat7.x) + 2.0;
    u_xlat16_2.x = u_xlat7.x * u_xlat16_2.x;
    u_xlat4.xyz = u_xlat16_2.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat5.xyz = (-u_xlat4.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat7.xyz = u_xlat13.xxx * u_xlat5.xyz + u_xlat4.xyz;
    u_xlat1.yzw = u_xlat1.xxx * u_xlat7.xyz;
    u_xlat1.x = (-u_xlat1.x) + 1.0;
    u_xlat1 = u_xlat9.xxxx * u_xlat1;
    u_xlat9.x = vs_TEXCOORD5.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat9.x = min(max(u_xlat9.x, 0.0), 1.0);
#else
    u_xlat9.x = clamp(u_xlat9.x, 0.0, 1.0);
#endif
    u_xlat9.xyz = u_xlat9.xxx * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    u_xlat7.xyz = u_xlat9.xyz * u_xlat3.xxx + u_xlat1.yzw;
    u_xlat1.xyz = u_xlat1.xxx * u_xlat0.xyz + u_xlat7.xyz;
    u_xlat0.x = vs_TEXCOORD4.y * _AlphaBottomRange + _AlphaBottomOffset;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(_BottomAlphaToggle==1.0);
#else
    u_xlatb6 = _BottomAlphaToggle==1.0;
#endif
    u_xlat0.x = (u_xlatb6) ? u_xlat0.x : 1.0;
    u_xlat6.x = vs_TEXCOORD4.y * _AlphaRange + _AlphaOffset;
    u_xlat6.x = (-u_xlat6.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat6.x = u_xlat6.x * _Opacity;
    u_xlat0.x = u_xlat0.x * u_xlat6.x;
    u_xlat1.w = u_xlat18 * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	mediump float _MHYZBias;
uniform 	vec4 hlslcc_mtx4x4_mhyJitteredVP[4];
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
mediump vec4 u_xlat16_3;
bool u_xlatb3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat6;
mediump vec3 u_xlat16_7;
float u_xlat11;
mediump float u_xlat16_12;
float u_xlat18;
bool u_xlatb18;
float u_xlat19;
float u_xlat24;
bool u_xlatb24;
float u_xlat27;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat2.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    gl_Position = u_xlat2;
    vs_TEXCOORD2.zw = u_xlat2.zw;
    vs_COLOR0 = in_COLOR0;
    u_xlat3.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat24 = u_xlat3.y * _HeigtFogParams.x;
    u_xlat18 = u_xlat24 * -1.44269502;
    u_xlat18 = exp2(u_xlat18);
    u_xlat18 = (-u_xlat18) + 1.0;
    u_xlat18 = u_xlat18 / u_xlat24;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(0.00999999978<abs(u_xlat24));
#else
    u_xlatb24 = 0.00999999978<abs(u_xlat24);
#endif
    u_xlat16_4.x = (u_xlatb24) ? u_xlat18 : 1.0;
    u_xlat24 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat24 = sqrt(u_xlat24);
    u_xlat18 = u_xlat24 * _HeigtFogParams.y;
    u_xlat16_4.x = u_xlat18 * u_xlat16_4.x;
    u_xlat16_4.x = exp2((-u_xlat16_4.x));
    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
    u_xlat18 = u_xlat3.y * _HeigtFogParams2.x;
    u_xlat27 = u_xlat18 * -1.44269502;
    u_xlat27 = exp2(u_xlat27);
    u_xlat27 = (-u_xlat27) + 1.0;
    u_xlat27 = u_xlat27 / u_xlat18;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(0.00999999978<abs(u_xlat18));
#else
    u_xlatb18 = 0.00999999978<abs(u_xlat18);
#endif
    u_xlat16_12 = (u_xlatb18) ? u_xlat27 : 1.0;
    u_xlat18 = u_xlat24 * _HeigtFogParams2.y;
    u_xlat16_12 = u_xlat18 * u_xlat16_12;
    u_xlat16_12 = exp2((-u_xlat16_12));
    u_xlat16_4.y = (-u_xlat16_12) + 1.0;
    u_xlat16_4.xy = max(u_xlat16_4.xy, vec2(0.0, 0.0));
    u_xlat16_4.x = u_xlat16_4.y + u_xlat16_4.x;
    u_xlat18 = u_xlat24 * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat16_12 = (-u_xlat18) + 2.0;
    u_xlat16_12 = u_xlat18 * u_xlat16_12;
    u_xlat18 = u_xlat16_12 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat18 = u_xlat18 + 1.0;
    u_xlat16_4.x = u_xlat18 * u_xlat16_4.x;
    u_xlat18 = min(u_xlat16_4.x, _HeigtFogColBase.w);
    u_xlat27 = (-u_xlat18) + 1.0;
    u_xlat5.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat5.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat5.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat3.x = dot(u_xlat3.xyz, u_xlat5.xyz);
    u_xlat11 = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!((-u_xlat3.x)>=u_xlat11);
#else
    u_xlatb3 = (-u_xlat3.x)>=u_xlat11;
#endif
    u_xlat11 = u_xlat24 * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat11 = min(max(u_xlat11, 0.0), 1.0);
#else
    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
#endif
    u_xlat24 = u_xlat24 + (-_HeigtFogRamp.w);
    u_xlat24 = u_xlat24 * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat19 = (-u_xlat11) + 2.0;
    u_xlat11 = u_xlat19 * u_xlat11;
    u_xlat19 = u_xlat11 * _HeigtFogColDelta.w;
    u_xlat3.x = (u_xlatb3) ? u_xlat19 : u_xlat11;
    u_xlat3.x = log2(u_xlat3.x);
    u_xlat3.x = u_xlat3.x * unity_FogColor.w;
    u_xlat3.x = exp2(u_xlat3.x);
    u_xlat3.x = min(u_xlat3.x, _HeigtFogColBase.w);
    u_xlat11 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat11 = min(max(u_xlat11, 0.0), 1.0);
#else
    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
#endif
    u_xlat16_4.x = (-u_xlat11) + 2.0;
    u_xlat16_4.x = u_xlat11 * u_xlat16_4.x;
    u_xlat5.xyz = u_xlat16_4.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat6.xyz = (-u_xlat5.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat5.xyz = vec3(u_xlat24) * u_xlat6.xyz + u_xlat5.xyz;
    u_xlat5.xyz = u_xlat3.xxx * u_xlat5.xyz;
    u_xlat24 = (-u_xlat3.x) + 1.0;
    vs_TEXCOORD0.w = u_xlat27 * u_xlat24;
    u_xlat3.xyz = vec3(u_xlat27) * u_xlat5.xyz;
    u_xlat24 = u_xlat0.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    u_xlat0.xyz = vec3(u_xlat24) * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    vs_TEXCOORD0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat3.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat0.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    u_xlat16_4.x = u_xlat0.y * u_xlat0.y;
    u_xlat16_4.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_4.x);
    u_xlat16_3 = u_xlat0.yzzx * u_xlat0.xyzz;
    u_xlat16_7.x = dot(unity_SHBr, u_xlat16_3);
    u_xlat16_7.y = dot(unity_SHBg, u_xlat16_3);
    u_xlat16_7.z = dot(unity_SHBb, u_xlat16_3);
    u_xlat16_4.xyz = unity_SHC.xyz * u_xlat16_4.xxx + u_xlat16_7.xyz;
    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat0.w = 1.0;
    u_xlat16_7.x = dot(unity_SHAr, u_xlat0);
    u_xlat16_7.y = dot(unity_SHAg, u_xlat0);
    u_xlat16_7.z = dot(unity_SHAb, u_xlat0);
    u_xlat16_4.xyz = u_xlat16_4.xyz + u_xlat16_7.xyz;
    vs_TEXCOORD1.xyz = u_xlat16_4.xyz;
    vs_TEXCOORD1.w = 1.0;
    u_xlat5.x = float(0.5);
    u_xlat5.z = float(0.5);
    u_xlat5.y = _ProjectionParams.x;
    u_xlat2.xyz = u_xlat2.xyw * u_xlat5.xyz;
    u_xlat2.w = u_xlat2.y * 0.5;
    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4_mhyJitteredVP[1];
    u_xlat2 = hlslcc_mtx4x4_mhyJitteredVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4_mhyJitteredVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat2.xyz = vec3(u_xlat5.z * u_xlat1.x, u_xlat5.y * u_xlat1.y, u_xlat5.z * u_xlat1.w);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    u_xlat2.w = u_xlat2.y * 0.5;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat24 = dot(hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, hlslcc_mtx4x4unity_ObjectToWorld[0].xyz);
    vs_TEXCOORD4.z = sqrt(u_xlat24);
    u_xlat24 = dot(hlslcc_mtx4x4unity_ObjectToWorld[1].xyz, hlslcc_mtx4x4unity_ObjectToWorld[1].xyz);
    vs_TEXCOORD4.w = sqrt(u_xlat24);
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD5.w = 0.0;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
    vs_TEXCOORD6.xyz = u_xlat1.xyz;
    vs_TEXCOORD6.w = 0.0;
    vs_TEXCOORD7.xyz = u_xlat0.xyz;
    vs_TEXCOORD7.w = 0.0;
    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
    u_xlat24 = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD8.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    vs_TEXCOORD8.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	mediump vec4 _LightColor0;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	float _AlphaRange;
uniform 	float _AlphaOffset;
uniform 	float _Opacity;
uniform 	mediump float _BottomAlphaToggle;
uniform 	float _AlphaBottomRange;
uniform 	float _AlphaBottomOffset;
uniform 	vec4 _WaterfallTex01_ST;
uniform 	mediump vec4 _FoamUVCoord01;
uniform 	mediump vec4 _FoamUVCoord02;
uniform 	float _FoamRange;
uniform 	float _FoamOffset;
uniform 	vec4 _DayColor;
uniform 	vec4 _BottomColor;
uniform 	vec4 _TopColor;
uniform 	float _ColorGradientRange;
uniform 	float _ColorGradientOffset;
uniform 	vec4 _ReflectionColor_Dark;
uniform 	vec4 _ReflectionColor_Light;
uniform 	float _Normal01_U_Speed;
uniform 	vec4 _Normal01_ST;
uniform 	float _Normal01_VSpeed;
uniform 	float _Normal02_U_Speed;
uniform 	vec4 _Normal02_ST;
uniform 	float _Normal02_V_Speed;
uniform 	vec4 _DistortionIntensity;
uniform 	float _ReflectionBrightness;
uniform 	float _ReflectionIntensity;
uniform 	float _WaterFall01_Speed;
uniform 	float _Waterfall02_Speed;
uniform 	mediump vec4 _WaterfallPatternColor;
uniform 	float _Waterfall01Brightness;
uniform 	float _Waterfall02Brightness;
uniform 	float _SprayRange;
uniform 	float _SprayOffset;
uniform 	float _ShadowStrength;
uniform 	vec4 _WaterfallSpecTex_ST;
uniform 	float _Detail01_U_Speed;
uniform 	vec4 _NoiseTex_ST;
uniform 	float _Detail01_V_Speed;
uniform 	float _NoiselDistortionValue;
uniform 	mediump vec4 _WaterfallSpecColor;
uniform 	mediump vec4 _FoamColor;
uniform 	vec3 _ES_MainLightColor;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _WaterfallTex01;
uniform lowp sampler2D _Normal01;
uniform lowp sampler2D _Normal02;
uniform lowp samplerCube _Reflection;
uniform lowp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _WaterfallSpecTex;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
in highp vec4 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
lowp vec3 u_xlat10_0;
vec4 u_xlat1;
mediump float u_xlat16_1;
lowp float u_xlat10_1;
bool u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
bool u_xlatb3;
vec3 u_xlat4;
vec3 u_xlat5;
vec3 u_xlat6;
float u_xlat7;
mediump float u_xlat16_8;
float u_xlat9;
bool u_xlatb9;
float u_xlat12;
bool u_xlatb12;
vec2 u_xlat13;
lowp float u_xlat10_13;
float u_xlat15;
float u_xlat18;
mediump float u_xlat16_18;
lowp float u_xlat10_18;
float u_xlat19;
lowp float u_xlat10_21;
void main()
{
    u_xlat0.xy = vs_TEXCOORD4.xy * _Normal01_ST.xy + _Normal01_ST.zw;
    u_xlat0.x = u_xlat0.x * vs_TEXCOORD4.z;
    u_xlat1.x = _Time.y * _Normal01_U_Speed + u_xlat0.x;
    u_xlat0.x = _Time.y * _Normal01_VSpeed;
    u_xlat1.y = u_xlat0.y * vs_TEXCOORD4.w + u_xlat0.x;
    u_xlat10_0.xyz = texture(_Normal01, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xy = vs_TEXCOORD4.xy * _Normal02_ST.xy + _Normal02_ST.zw;
    u_xlat0.xy = vec2(u_xlat0.x * vs_TEXCOORD4.z, u_xlat0.y * vs_TEXCOORD4.w);
    u_xlat1.x = _Time.y * _Normal02_U_Speed + u_xlat0.x;
    u_xlat1.y = _Time.y * _Normal02_V_Speed + u_xlat0.y;
    u_xlat10_0.xyz = texture(_Normal02, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_2.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = u_xlat16_2.xyz * _DistortionIntensity.xyz;
    u_xlat1.x = vs_TEXCOORD6.x;
    u_xlat1.y = vs_TEXCOORD8.x;
    u_xlat1.z = vs_TEXCOORD7.x;
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat3.x = vs_TEXCOORD6.y;
    u_xlat3.y = vs_TEXCOORD8.y;
    u_xlat3.z = vs_TEXCOORD7.y;
    u_xlat1.y = dot(u_xlat3.xyz, u_xlat0.xyz);
    u_xlat3.x = vs_TEXCOORD6.z;
    u_xlat3.y = vs_TEXCOORD8.z;
    u_xlat3.z = vs_TEXCOORD7.z;
    u_xlat1.z = dot(u_xlat3.xyz, u_xlat0.xyz);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
    u_xlat18 = dot((-u_xlat1.xyz), u_xlat0.xyz);
    u_xlat18 = u_xlat18 + u_xlat18;
    u_xlat0.xyz = u_xlat0.xyz * (-vec3(u_xlat18)) + (-u_xlat1.xyz);
    u_xlat10_0.x = texture(_Reflection, u_xlat0.xyz).x;
    u_xlat6.xyz = (-_ReflectionColor_Dark.xyz) + _ReflectionColor_Light.xyz;
    u_xlat0.xyz = u_xlat10_0.xxx * u_xlat6.xyz + _ReflectionColor_Dark.xyz;
    u_xlat18 = vs_TEXCOORD4.y * _ColorGradientRange + _ColorGradientOffset;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat1.xyz = (-_BottomColor.xyz) + _TopColor.xyz;
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz + _BottomColor.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.200000003, 0.200000003, 0.200000003);
    u_xlat0.xyz = u_xlat0.xyz * vec3(_ReflectionBrightness) + (-u_xlat1.xyz);
    u_xlat0.xyz = vec3(vec3(_ReflectionIntensity, _ReflectionIntensity, _ReflectionIntensity)) * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat1.xy = vs_TEXCOORD4.xy * _WaterfallTex01_ST.xy + _WaterfallTex01_ST.zw;
    u_xlat1.xy = vec2(u_xlat1.x * vs_TEXCOORD4.z, u_xlat1.y * vs_TEXCOORD4.w);
    u_xlat1.zw = _Time.yy * vec2(_WaterFall01_Speed, _Waterfall02_Speed) + u_xlat1.yy;
    u_xlat10_18 = texture(_WaterfallTex01, u_xlat1.xz).x;
    u_xlat10_13 = texture(_WaterfallTex01, u_xlat1.xw).y;
    u_xlat16_2.x = (-u_xlat10_18) + u_xlat10_13;
    u_xlat16_2.x = u_xlat10_13 * u_xlat16_2.x + u_xlat10_18;
    u_xlat18 = u_xlat10_18 * _Waterfall01Brightness;
    u_xlat3.xyz = u_xlat16_2.xxx * _WaterfallPatternColor.xyz + (-u_xlat0.xyz);
    u_xlat19 = u_xlat10_13 * _Waterfall02Brightness + (-u_xlat18);
    u_xlat13.x = u_xlat10_13 * _Waterfall02Brightness;
    u_xlat18 = u_xlat13.x * u_xlat19 + u_xlat18;
    u_xlat13.x = vs_TEXCOORD4.y * _SprayRange + _SprayOffset;
    u_xlat13.x = (-u_xlat13.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat13.x = min(max(u_xlat13.x, 0.0), 1.0);
#else
    u_xlat13.x = clamp(u_xlat13.x, 0.0, 1.0);
#endif
    u_xlat18 = u_xlat18 * u_xlat13.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * _DayColor.xyz;
    u_xlat13.xy = vs_TEXCOORD4.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat3.x = _Time.y * _Detail01_U_Speed + u_xlat13.x;
    u_xlat3.y = _Time.y * _Detail01_V_Speed + u_xlat13.y;
    u_xlat10_18 = texture(_NoiseTex, u_xlat3.xy).x;
    u_xlat16_2.x = vs_TEXCOORD4.w * 0.5;
    u_xlat13.xy = vs_TEXCOORD4.xy * _WaterfallSpecTex_ST.xy + _WaterfallSpecTex_ST.zw;
    u_xlat16_2.x = vs_TEXCOORD4.w * u_xlat13.y + (-u_xlat16_2.x);
    u_xlat3.x = u_xlat10_18 * _NoiselDistortionValue + u_xlat13.x;
    u_xlat3.y = u_xlat10_18 * _NoiselDistortionValue + u_xlat16_2.x;
    u_xlat10_18 = texture(_WaterfallSpecTex, u_xlat3.xy).x;
    u_xlat16_3.xyz = vec3(u_xlat10_18) * _WaterfallSpecColor.xyz;
    u_xlat18 = (-_ShadowStrength) + 1.0;
    u_xlat13.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat10_21 = texture(_ShadowMapTexture, u_xlat13.xy).x;
    u_xlat13.x = texture(_CameraDepthTexture, u_xlat13.xy).x;
    u_xlat13.x = _ZBufferParams.z * u_xlat13.x + _ZBufferParams.w;
    u_xlat13.x = float(1.0) / u_xlat13.x;
    u_xlat13.x = u_xlat13.x + (-vs_TEXCOORD3.w);
    u_xlat18 = u_xlat10_21 * u_xlat18 + _ShadowStrength;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat16_3.xyz;
    u_xlat3.xy = vec2(_Time.y * _FoamUVCoord01.z, _Time.y * _FoamUVCoord01.w);
    u_xlat3.xy = u_xlat1.xy * _FoamUVCoord01.xy + u_xlat3.xy;
    u_xlat10_18 = texture(_WaterfallTex01, u_xlat3.xy).x;
    u_xlat3.xy = vec2(_Time.y * _FoamUVCoord02.z, _Time.y * _FoamUVCoord02.w);
    u_xlat1.xy = u_xlat1.xy * _FoamUVCoord02.xy + u_xlat3.xy;
    u_xlat10_1 = texture(_WaterfallTex01, u_xlat1.xy).y;
    u_xlat16_18 = u_xlat10_18 + u_xlat10_1;
    u_xlat1.x = vs_TEXCOORD4.y * _FoamRange + _FoamOffset;
    u_xlat18 = u_xlat16_18 + u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat1.x = (-u_xlat1.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat18 * u_xlat1.x;
    u_xlat0.xyz = u_xlat1.xxx * _FoamColor.xyz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * _ES_MainLightColor.xyz;
    u_xlat16_1 = max(_LightColor0.w, 1.0);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16_1);
    u_xlat1.xyw = vs_TEXCOORD5.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat3.x = u_xlat1.y * _HeigtFogParams.x;
    u_xlat9 = u_xlat3.x * -1.44269502;
    u_xlat9 = exp2(u_xlat9);
    u_xlat9 = (-u_xlat9) + 1.0;
    u_xlat9 = u_xlat9 / u_xlat3.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(0.00999999978<abs(u_xlat3.x));
#else
    u_xlatb3 = 0.00999999978<abs(u_xlat3.x);
#endif
    u_xlat16_2.x = (u_xlatb3) ? u_xlat9 : 1.0;
    u_xlat3.x = dot(u_xlat1.xyw, u_xlat1.xyw);
    u_xlat3.x = sqrt(u_xlat3.x);
    u_xlat9 = u_xlat3.x * _HeigtFogParams.y;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat9;
    u_xlat16_2.x = exp2((-u_xlat16_2.x));
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat9 = u_xlat1.y * _HeigtFogParams2.x;
    u_xlat15 = u_xlat9 * -1.44269502;
    u_xlat15 = exp2(u_xlat15);
    u_xlat15 = (-u_xlat15) + 1.0;
    u_xlat15 = u_xlat15 / u_xlat9;
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(0.00999999978<abs(u_xlat9));
#else
    u_xlatb9 = 0.00999999978<abs(u_xlat9);
#endif
    u_xlat16_8 = (u_xlatb9) ? u_xlat15 : 1.0;
    u_xlat9 = u_xlat3.x * _HeigtFogParams2.y;
    u_xlat16_8 = u_xlat16_8 * u_xlat9;
    u_xlat16_8 = exp2((-u_xlat16_8));
    u_xlat16_2.y = (-u_xlat16_8) + 1.0;
    u_xlat16_2.xy = max(u_xlat16_2.xy, vec2(0.0, 0.0));
    u_xlat16_2.x = u_xlat16_2.y + u_xlat16_2.x;
    u_xlat9 = u_xlat3.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat9 = min(max(u_xlat9, 0.0), 1.0);
#else
    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
#endif
    u_xlat16_8 = (-u_xlat9) + 2.0;
    u_xlat16_8 = u_xlat16_8 * u_xlat9;
    u_xlat9 = u_xlat16_8 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat9 = u_xlat9 + 1.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat9;
    u_xlat9 = min(u_xlat16_2.x, _HeigtFogColBase.w);
    u_xlat15 = (-u_xlat9) + 1.0;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat4.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat1.x = dot(u_xlat1.xyw, u_xlat4.xyz);
    u_xlat7 = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!((-u_xlat1.x)>=u_xlat7);
#else
    u_xlatb1 = (-u_xlat1.x)>=u_xlat7;
#endif
    u_xlat7 = u_xlat3.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7 = min(max(u_xlat7, 0.0), 1.0);
#else
    u_xlat7 = clamp(u_xlat7, 0.0, 1.0);
#endif
    u_xlat19 = u_xlat3.x + (-_HeigtFogRamp.w);
    u_xlat19 = u_xlat19 * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat19 = min(max(u_xlat19, 0.0), 1.0);
#else
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
#endif
    u_xlat3.x = (-u_xlat7) + 2.0;
    u_xlat7 = u_xlat7 * u_xlat3.x;
    u_xlat3.x = u_xlat7 * _HeigtFogColDelta.w;
    u_xlat1.x = (u_xlatb1) ? u_xlat3.x : u_xlat7;
    u_xlat1.x = log2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * unity_FogColor.w;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat1.x = min(u_xlat1.x, _HeigtFogColBase.w);
    u_xlat7 = vs_TEXCOORD5.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat7 = min(max(u_xlat7, 0.0), 1.0);
#else
    u_xlat7 = clamp(u_xlat7, 0.0, 1.0);
#endif
    u_xlat16_2.x = (-u_xlat7) + 2.0;
    u_xlat16_2.x = u_xlat7 * u_xlat16_2.x;
    u_xlat4.xyz = u_xlat16_2.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat5.xyz = (-u_xlat4.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat4.xyz = vec3(u_xlat19) * u_xlat5.xyz + u_xlat4.xyz;
    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
    u_xlat1.x = (-u_xlat1.x) + 1.0;
    u_xlat1.x = u_xlat15 * u_xlat1.x;
    u_xlat3.xzw = vec3(u_xlat15) * u_xlat4.xyz;
    u_xlat7 = vs_TEXCOORD5.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat7 = min(max(u_xlat7, 0.0), 1.0);
#else
    u_xlat7 = clamp(u_xlat7, 0.0, 1.0);
#endif
    u_xlat4.xyz = vec3(u_xlat7) * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    u_xlat3.xyz = u_xlat4.xyz * vec3(u_xlat9) + u_xlat3.xzw;
    u_xlat2.xyz = u_xlat1.xxx * u_xlat0.xyz + u_xlat3.xyz;
    u_xlat0.x = u_xlat13.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat6.x = u_xlat13.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat12 = (-u_xlat6.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat12 + u_xlat6.x;
    u_xlat6.x = vs_TEXCOORD4.y * _AlphaRange + _AlphaOffset;
    u_xlat6.x = (-u_xlat6.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat6.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _Opacity;
    u_xlat6.x = vs_TEXCOORD4.y * _AlphaBottomRange + _AlphaBottomOffset;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_BottomAlphaToggle==1.0);
#else
    u_xlatb12 = _BottomAlphaToggle==1.0;
#endif
    u_xlat6.x = (u_xlatb12) ? u_xlat6.x : 1.0;
    u_xlat0.x = u_xlat6.x * u_xlat0.x;
    u_xlat2.w = u_xlat18 * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.w = min(max(u_xlat2.w, 0.0), 1.0);
#else
    u_xlat2.w = clamp(u_xlat2.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat2;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	mediump float _MHYZBias;
uniform 	vec4 hlslcc_mtx4x4_mhyJitteredVP[4];
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
vec3 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
bool u_xlatb3;
mediump vec3 u_xlat16_4;
float u_xlat5;
mediump vec4 u_xlat16_5;
vec3 u_xlat6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
float u_xlat11;
mediump float u_xlat16_12;
vec3 u_xlat13;
float u_xlat17;
bool u_xlatb17;
float u_xlat19;
float u_xlat24;
float u_xlat27;
bool u_xlatb27;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat8.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    u_xlat1.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position = u_xlat1;
    vs_TEXCOORD2.zw = u_xlat1.zw;
    vs_COLOR0 = in_COLOR0;
    u_xlat3.xyz = u_xlat8.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat17 = u_xlat3.y * _HeigtFogParams.x;
    u_xlat27 = u_xlat17 * -1.44269502;
    u_xlat27 = exp2(u_xlat27);
    u_xlat27 = (-u_xlat27) + 1.0;
    u_xlat27 = u_xlat27 / u_xlat17;
#ifdef UNITY_ADRENO_ES3
    u_xlatb17 = !!(0.00999999978<abs(u_xlat17));
#else
    u_xlatb17 = 0.00999999978<abs(u_xlat17);
#endif
    u_xlat16_4.x = (u_xlatb17) ? u_xlat27 : 1.0;
    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat17 = sqrt(u_xlat17);
    u_xlat27 = u_xlat17 * _HeigtFogParams.y;
    u_xlat16_4.x = u_xlat27 * u_xlat16_4.x;
    u_xlat16_4.x = exp2((-u_xlat16_4.x));
    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
    u_xlat27 = u_xlat3.y * _HeigtFogParams2.x;
    u_xlat5 = u_xlat27 * -1.44269502;
    u_xlat5 = exp2(u_xlat5);
    u_xlat5 = (-u_xlat5) + 1.0;
    u_xlat5 = u_xlat5 / u_xlat27;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(0.00999999978<abs(u_xlat27));
#else
    u_xlatb27 = 0.00999999978<abs(u_xlat27);
#endif
    u_xlat16_12 = (u_xlatb27) ? u_xlat5 : 1.0;
    u_xlat27 = u_xlat17 * _HeigtFogParams2.y;
    u_xlat16_12 = u_xlat27 * u_xlat16_12;
    u_xlat16_12 = exp2((-u_xlat16_12));
    u_xlat16_4.y = (-u_xlat16_12) + 1.0;
    u_xlat16_4.xy = max(u_xlat16_4.xy, vec2(0.0, 0.0));
    u_xlat16_4.x = u_xlat16_4.y + u_xlat16_4.x;
    u_xlat27 = u_xlat17 * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
    u_xlat16_12 = (-u_xlat27) + 2.0;
    u_xlat16_12 = u_xlat27 * u_xlat16_12;
    u_xlat27 = u_xlat16_12 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat27 = u_xlat27 + 1.0;
    u_xlat16_4.x = u_xlat27 * u_xlat16_4.x;
    u_xlat27 = min(u_xlat16_4.x, _HeigtFogColBase.w);
    u_xlat5 = (-u_xlat27) + 1.0;
    u_xlat13.x = _ProjectionParams.z * 0.999899983;
    u_xlat6.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat6.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat6.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat3.x = dot(u_xlat3.xyz, u_xlat6.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!((-u_xlat3.x)>=u_xlat13.x);
#else
    u_xlatb3 = (-u_xlat3.x)>=u_xlat13.x;
#endif
    u_xlat11 = u_xlat17 * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat11 = min(max(u_xlat11, 0.0), 1.0);
#else
    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
#endif
    u_xlat17 = u_xlat17 + (-_HeigtFogRamp.w);
    u_xlat17 = u_xlat17 * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat17 = min(max(u_xlat17, 0.0), 1.0);
#else
    u_xlat17 = clamp(u_xlat17, 0.0, 1.0);
#endif
    u_xlat19 = (-u_xlat11) + 2.0;
    u_xlat11 = u_xlat19 * u_xlat11;
    u_xlat19 = u_xlat11 * _HeigtFogColDelta.w;
    u_xlat3.x = (u_xlatb3) ? u_xlat19 : u_xlat11;
    u_xlat3.x = log2(u_xlat3.x);
    u_xlat3.x = u_xlat3.x * unity_FogColor.w;
    u_xlat3.x = exp2(u_xlat3.x);
    u_xlat3.x = min(u_xlat3.x, _HeigtFogColBase.w);
    u_xlat11 = u_xlat8.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat11 = min(max(u_xlat11, 0.0), 1.0);
#else
    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
#endif
    u_xlat16_4.x = (-u_xlat11) + 2.0;
    u_xlat16_4.x = u_xlat11 * u_xlat16_4.x;
    u_xlat13.xyz = u_xlat16_4.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat6.xyz = (-u_xlat13.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat13.xyz = vec3(u_xlat17) * u_xlat6.xyz + u_xlat13.xyz;
    u_xlat13.xyz = u_xlat3.xxx * u_xlat13.xyz;
    u_xlat17 = (-u_xlat3.x) + 1.0;
    vs_TEXCOORD0.w = u_xlat5 * u_xlat17;
    u_xlat3.xyz = vec3(u_xlat5) * u_xlat13.xyz;
    u_xlat17 = u_xlat8.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat17 = min(max(u_xlat17, 0.0), 1.0);
#else
    u_xlat17 = clamp(u_xlat17, 0.0, 1.0);
#endif
    vs_TEXCOORD5.xyz = u_xlat8.xyz;
    u_xlat8.xyz = vec3(u_xlat17) * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    vs_TEXCOORD0.xyz = u_xlat8.xyz * vec3(u_xlat27) + u_xlat3.xyz;
    u_xlat3.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat3.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat3.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat8.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat3.xyz = u_xlat8.xxx * u_xlat3.xyz;
    u_xlat16_4.x = u_xlat3.y * u_xlat3.y;
    u_xlat16_4.x = u_xlat3.x * u_xlat3.x + (-u_xlat16_4.x);
    u_xlat16_5 = u_xlat3.yzzx * u_xlat3.xyzz;
    u_xlat16_7.x = dot(unity_SHBr, u_xlat16_5);
    u_xlat16_7.y = dot(unity_SHBg, u_xlat16_5);
    u_xlat16_7.z = dot(unity_SHBb, u_xlat16_5);
    u_xlat16_4.xyz = unity_SHC.xyz * u_xlat16_4.xxx + u_xlat16_7.xyz;
    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat3.w = 1.0;
    u_xlat16_7.x = dot(unity_SHAr, u_xlat3);
    u_xlat16_7.y = dot(unity_SHAg, u_xlat3);
    u_xlat16_7.z = dot(unity_SHAb, u_xlat3);
    u_xlat16_4.xyz = u_xlat16_4.xyz + u_xlat16_7.xyz;
    vs_TEXCOORD1.xyz = u_xlat16_4.xyz;
    vs_TEXCOORD1.w = 1.0;
    u_xlat6.x = float(0.5);
    u_xlat6.z = float(0.5);
    u_xlat6.y = _ProjectionParams.x;
    u_xlat1.xyz = u_xlat1.xyw * u_xlat6.xyz;
    u_xlat1.w = u_xlat1.y * 0.5;
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4_mhyJitteredVP[1];
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[3] * u_xlat2.wwww + u_xlat1;
    u_xlat2.xyz = vec3(u_xlat6.z * u_xlat1.x, u_xlat6.y * u_xlat1.y, u_xlat6.z * u_xlat1.w);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    u_xlat2.w = u_xlat2.y * 0.5;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy;
    u_xlat8.x = dot(unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz);
    vs_TEXCOORD4.z = sqrt(u_xlat8.x);
    u_xlat8.x = dot(unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz);
    vs_TEXCOORD4.w = sqrt(u_xlat8.x);
    vs_TEXCOORD5.w = 0.0;
    u_xlat8.xyz = in_TANGENT0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat8.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_TANGENT0.xxx + u_xlat8.xyz;
    u_xlat0.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_TANGENT0.zzz + u_xlat8.xyz;
    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat0.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    vs_TEXCOORD6.xyz = u_xlat0.xyz;
    vs_TEXCOORD6.w = 0.0;
    vs_TEXCOORD7.xyz = u_xlat3.xyz;
    vs_TEXCOORD7.w = 0.0;
    u_xlat1.xyz = u_xlat0.yzx * u_xlat3.zxy;
    u_xlat0.xyz = u_xlat3.yzx * u_xlat0.zxy + (-u_xlat1.xyz);
    u_xlat24 = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD8.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    vs_TEXCOORD8.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	mediump vec4 _LightColor0;
uniform 	float _AlphaRange;
uniform 	float _AlphaOffset;
uniform 	float _Opacity;
uniform 	mediump float _BottomAlphaToggle;
uniform 	float _AlphaBottomRange;
uniform 	float _AlphaBottomOffset;
uniform 	vec4 _WaterfallTex01_ST;
uniform 	mediump vec4 _FoamUVCoord01;
uniform 	mediump vec4 _FoamUVCoord02;
uniform 	float _FoamRange;
uniform 	float _FoamOffset;
uniform 	vec4 _DayColor;
uniform 	vec4 _BottomColor;
uniform 	vec4 _TopColor;
uniform 	float _ColorGradientRange;
uniform 	float _ColorGradientOffset;
uniform 	vec4 _ReflectionColor_Dark;
uniform 	vec4 _ReflectionColor_Light;
uniform 	float _Normal01_U_Speed;
uniform 	vec4 _Normal01_ST;
uniform 	float _Normal01_VSpeed;
uniform 	float _Normal02_U_Speed;
uniform 	vec4 _Normal02_ST;
uniform 	float _Normal02_V_Speed;
uniform 	vec4 _DistortionIntensity;
uniform 	float _ReflectionBrightness;
uniform 	float _ReflectionIntensity;
uniform 	float _WaterFall01_Speed;
uniform 	float _Waterfall02_Speed;
uniform 	mediump vec4 _WaterfallPatternColor;
uniform 	float _Waterfall01Brightness;
uniform 	float _Waterfall02Brightness;
uniform 	float _SprayRange;
uniform 	float _SprayOffset;
uniform 	float _ShadowStrength;
uniform 	vec4 _WaterfallSpecTex_ST;
uniform 	float _Detail01_U_Speed;
uniform 	vec4 _NoiseTex_ST;
uniform 	float _Detail01_V_Speed;
uniform 	float _NoiselDistortionValue;
uniform 	mediump vec4 _WaterfallSpecColor;
uniform 	mediump vec4 _FoamColor;
uniform 	vec3 _ES_MainLightColor;
uniform lowp sampler2D _WaterfallTex01;
uniform lowp sampler2D _Normal01;
uniform lowp sampler2D _Normal02;
uniform lowp samplerCube _Reflection;
uniform lowp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _WaterfallSpecTex;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
in highp vec4 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
lowp vec3 u_xlat10_0;
vec4 u_xlat1;
mediump float u_xlat16_1;
lowp float u_xlat10_1;
bool u_xlatb1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
bool u_xlatb3;
vec3 u_xlat4;
vec3 u_xlat5;
vec3 u_xlat6;
bool u_xlatb6;
vec3 u_xlat7;
mediump float u_xlat16_8;
vec3 u_xlat9;
vec2 u_xlat13;
lowp float u_xlat10_13;
float u_xlat18;
mediump float u_xlat16_18;
lowp float u_xlat10_18;
float u_xlat19;
bool u_xlatb19;
void main()
{
    u_xlat0.xy = vs_TEXCOORD4.xy * _Normal01_ST.xy + _Normal01_ST.zw;
    u_xlat0.x = u_xlat0.x * vs_TEXCOORD4.z;
    u_xlat1.x = _Time.y * _Normal01_U_Speed + u_xlat0.x;
    u_xlat0.x = _Time.y * _Normal01_VSpeed;
    u_xlat1.y = u_xlat0.y * vs_TEXCOORD4.w + u_xlat0.x;
    u_xlat10_0.xyz = texture(_Normal01, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xy = vs_TEXCOORD4.xy * _Normal02_ST.xy + _Normal02_ST.zw;
    u_xlat0.xy = vec2(u_xlat0.x * vs_TEXCOORD4.z, u_xlat0.y * vs_TEXCOORD4.w);
    u_xlat1.x = _Time.y * _Normal02_U_Speed + u_xlat0.x;
    u_xlat1.y = _Time.y * _Normal02_V_Speed + u_xlat0.y;
    u_xlat10_0.xyz = texture(_Normal02, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_2.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = u_xlat16_2.xyz * _DistortionIntensity.xyz;
    u_xlat1.x = vs_TEXCOORD6.x;
    u_xlat1.y = vs_TEXCOORD8.x;
    u_xlat1.z = vs_TEXCOORD7.x;
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat3.x = vs_TEXCOORD6.y;
    u_xlat3.y = vs_TEXCOORD8.y;
    u_xlat3.z = vs_TEXCOORD7.y;
    u_xlat1.y = dot(u_xlat3.xyz, u_xlat0.xyz);
    u_xlat3.x = vs_TEXCOORD6.z;
    u_xlat3.y = vs_TEXCOORD8.z;
    u_xlat3.z = vs_TEXCOORD7.z;
    u_xlat1.z = dot(u_xlat3.xyz, u_xlat0.xyz);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
    u_xlat18 = dot((-u_xlat1.xyz), u_xlat0.xyz);
    u_xlat18 = u_xlat18 + u_xlat18;
    u_xlat0.xyz = u_xlat0.xyz * (-vec3(u_xlat18)) + (-u_xlat1.xyz);
    u_xlat10_0.x = texture(_Reflection, u_xlat0.xyz).x;
    u_xlat6.xyz = (-_ReflectionColor_Dark.xyz) + _ReflectionColor_Light.xyz;
    u_xlat0.xyz = u_xlat10_0.xxx * u_xlat6.xyz + _ReflectionColor_Dark.xyz;
    u_xlat18 = vs_TEXCOORD4.y * _ColorGradientRange + _ColorGradientOffset;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat1.xyz = (-_BottomColor.xyz) + _TopColor.xyz;
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz + _BottomColor.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.200000003, 0.200000003, 0.200000003);
    u_xlat0.xyz = u_xlat0.xyz * vec3(_ReflectionBrightness) + (-u_xlat1.xyz);
    u_xlat0.xyz = vec3(vec3(_ReflectionIntensity, _ReflectionIntensity, _ReflectionIntensity)) * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat1.xy = vs_TEXCOORD4.xy * _WaterfallTex01_ST.xy + _WaterfallTex01_ST.zw;
    u_xlat1.xy = vec2(u_xlat1.x * vs_TEXCOORD4.z, u_xlat1.y * vs_TEXCOORD4.w);
    u_xlat1.zw = _Time.yy * vec2(_WaterFall01_Speed, _Waterfall02_Speed) + u_xlat1.yy;
    u_xlat10_18 = texture(_WaterfallTex01, u_xlat1.xz).x;
    u_xlat10_13 = texture(_WaterfallTex01, u_xlat1.xw).y;
    u_xlat16_2.x = (-u_xlat10_18) + u_xlat10_13;
    u_xlat16_2.x = u_xlat10_13 * u_xlat16_2.x + u_xlat10_18;
    u_xlat18 = u_xlat10_18 * _Waterfall01Brightness;
    u_xlat3.xyz = u_xlat16_2.xxx * _WaterfallPatternColor.xyz + (-u_xlat0.xyz);
    u_xlat19 = u_xlat10_13 * _Waterfall02Brightness + (-u_xlat18);
    u_xlat13.x = u_xlat10_13 * _Waterfall02Brightness;
    u_xlat18 = u_xlat13.x * u_xlat19 + u_xlat18;
    u_xlat13.x = vs_TEXCOORD4.y * _SprayRange + _SprayOffset;
    u_xlat13.x = (-u_xlat13.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat13.x = min(max(u_xlat13.x, 0.0), 1.0);
#else
    u_xlat13.x = clamp(u_xlat13.x, 0.0, 1.0);
#endif
    u_xlat18 = u_xlat18 * u_xlat13.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * _DayColor.xyz;
    u_xlat13.xy = vs_TEXCOORD4.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat3.x = _Time.y * _Detail01_U_Speed + u_xlat13.x;
    u_xlat3.y = _Time.y * _Detail01_V_Speed + u_xlat13.y;
    u_xlat10_18 = texture(_NoiseTex, u_xlat3.xy).x;
    u_xlat16_2.x = vs_TEXCOORD4.w * 0.5;
    u_xlat13.xy = vs_TEXCOORD4.xy * _WaterfallSpecTex_ST.xy + _WaterfallSpecTex_ST.zw;
    u_xlat16_2.x = vs_TEXCOORD4.w * u_xlat13.y + (-u_xlat16_2.x);
    u_xlat3.x = u_xlat10_18 * _NoiselDistortionValue + u_xlat13.x;
    u_xlat3.y = u_xlat10_18 * _NoiselDistortionValue + u_xlat16_2.x;
    u_xlat10_18 = texture(_WaterfallSpecTex, u_xlat3.xy).x;
    u_xlat16_3.xyz = vec3(u_xlat10_18) * _WaterfallSpecColor.xyz;
    u_xlat13.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat10_18 = texture(_ShadowMapTexture, u_xlat13.xy).x;
    u_xlat13.x = (-_ShadowStrength) + 1.0;
    u_xlat18 = u_xlat10_18 * u_xlat13.x + _ShadowStrength;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat16_3.xyz;
    u_xlat13.xy = vec2(_Time.y * _FoamUVCoord01.z, _Time.y * _FoamUVCoord01.w);
    u_xlat13.xy = u_xlat1.xy * _FoamUVCoord01.xy + u_xlat13.xy;
    u_xlat10_18 = texture(_WaterfallTex01, u_xlat13.xy).x;
    u_xlat13.xy = vec2(_Time.y * _FoamUVCoord02.z, _Time.y * _FoamUVCoord02.w);
    u_xlat1.xy = u_xlat1.xy * _FoamUVCoord02.xy + u_xlat13.xy;
    u_xlat10_1 = texture(_WaterfallTex01, u_xlat1.xy).y;
    u_xlat16_18 = u_xlat10_18 + u_xlat10_1;
    u_xlat1.x = vs_TEXCOORD4.y * _FoamRange + _FoamOffset;
    u_xlat18 = u_xlat16_18 + u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat1.x = (-u_xlat1.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat18 * u_xlat1.x;
    u_xlat0.xyz = u_xlat1.xxx * _FoamColor.xyz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * _ES_MainLightColor.xyz;
    u_xlat16_1 = max(_LightColor0.w, 1.0);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16_1);
    u_xlat1.xyz = vs_TEXCOORD5.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat19 = u_xlat1.y * _HeigtFogParams.x;
    u_xlat3.x = u_xlat19 * -1.44269502;
    u_xlat3.x = exp2(u_xlat3.x);
    u_xlat3.x = (-u_xlat3.x) + 1.0;
    u_xlat3.x = u_xlat3.x / u_xlat19;
#ifdef UNITY_ADRENO_ES3
    u_xlatb19 = !!(0.00999999978<abs(u_xlat19));
#else
    u_xlatb19 = 0.00999999978<abs(u_xlat19);
#endif
    u_xlat16_2.x = (u_xlatb19) ? u_xlat3.x : 1.0;
    u_xlat19 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat19 = sqrt(u_xlat19);
    u_xlat3.x = u_xlat19 * _HeigtFogParams.y;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat3.x;
    u_xlat16_2.x = exp2((-u_xlat16_2.x));
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat3.x = u_xlat1.y * _HeigtFogParams2.x;
    u_xlat9.x = u_xlat3.x * -1.44269502;
    u_xlat9.x = exp2(u_xlat9.x);
    u_xlat9.x = (-u_xlat9.x) + 1.0;
    u_xlat9.x = u_xlat9.x / u_xlat3.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(0.00999999978<abs(u_xlat3.x));
#else
    u_xlatb3 = 0.00999999978<abs(u_xlat3.x);
#endif
    u_xlat16_8 = (u_xlatb3) ? u_xlat9.x : 1.0;
    u_xlat3.x = u_xlat19 * _HeigtFogParams2.y;
    u_xlat16_8 = u_xlat16_8 * u_xlat3.x;
    u_xlat16_8 = exp2((-u_xlat16_8));
    u_xlat16_2.y = (-u_xlat16_8) + 1.0;
    u_xlat16_2.xy = max(u_xlat16_2.xy, vec2(0.0, 0.0));
    u_xlat16_2.x = u_xlat16_2.y + u_xlat16_2.x;
    u_xlat3.x = u_xlat19 * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat3.x = min(max(u_xlat3.x, 0.0), 1.0);
#else
    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
#endif
    u_xlat16_8 = (-u_xlat3.x) + 2.0;
    u_xlat16_8 = u_xlat16_8 * u_xlat3.x;
    u_xlat3.x = u_xlat16_8 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat3.x = u_xlat3.x + 1.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat3.x;
    u_xlat3.x = min(u_xlat16_2.x, _HeigtFogColBase.w);
    u_xlat9.x = (-u_xlat3.x) + 1.0;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat4.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat4.xyz);
    u_xlat7.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!((-u_xlat1.x)>=u_xlat7.x);
#else
    u_xlatb1 = (-u_xlat1.x)>=u_xlat7.x;
#endif
    u_xlat7.x = u_xlat19 * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat13.x = u_xlat19 + (-_HeigtFogRamp.w);
    u_xlat13.x = u_xlat13.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat13.x = min(max(u_xlat13.x, 0.0), 1.0);
#else
    u_xlat13.x = clamp(u_xlat13.x, 0.0, 1.0);
#endif
    u_xlat19 = (-u_xlat7.x) + 2.0;
    u_xlat7.x = u_xlat19 * u_xlat7.x;
    u_xlat19 = u_xlat7.x * _HeigtFogColDelta.w;
    u_xlat1.x = (u_xlatb1) ? u_xlat19 : u_xlat7.x;
    u_xlat1.x = log2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * unity_FogColor.w;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat1.x = min(u_xlat1.x, _HeigtFogColBase.w);
    u_xlat7.x = vs_TEXCOORD5.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat16_2.x = (-u_xlat7.x) + 2.0;
    u_xlat16_2.x = u_xlat7.x * u_xlat16_2.x;
    u_xlat4.xyz = u_xlat16_2.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat5.xyz = (-u_xlat4.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat7.xyz = u_xlat13.xxx * u_xlat5.xyz + u_xlat4.xyz;
    u_xlat1.yzw = u_xlat1.xxx * u_xlat7.xyz;
    u_xlat1.x = (-u_xlat1.x) + 1.0;
    u_xlat1 = u_xlat9.xxxx * u_xlat1;
    u_xlat9.x = vs_TEXCOORD5.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat9.x = min(max(u_xlat9.x, 0.0), 1.0);
#else
    u_xlat9.x = clamp(u_xlat9.x, 0.0, 1.0);
#endif
    u_xlat9.xyz = u_xlat9.xxx * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    u_xlat7.xyz = u_xlat9.xyz * u_xlat3.xxx + u_xlat1.yzw;
    u_xlat1.xyz = u_xlat1.xxx * u_xlat0.xyz + u_xlat7.xyz;
    u_xlat0.x = vs_TEXCOORD4.y * _AlphaBottomRange + _AlphaBottomOffset;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(_BottomAlphaToggle==1.0);
#else
    u_xlatb6 = _BottomAlphaToggle==1.0;
#endif
    u_xlat0.x = (u_xlatb6) ? u_xlat0.x : 1.0;
    u_xlat6.x = vs_TEXCOORD4.y * _AlphaRange + _AlphaOffset;
    u_xlat6.x = (-u_xlat6.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat6.x = u_xlat6.x * _Opacity;
    u_xlat0.x = u_xlat0.x * u_xlat6.x;
    u_xlat1.w = u_xlat18 * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	mediump float _MHYZBias;
uniform 	vec4 hlslcc_mtx4x4_mhyJitteredVP[4];
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
vec3 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
bool u_xlatb3;
mediump vec3 u_xlat16_4;
float u_xlat5;
mediump vec4 u_xlat16_5;
vec3 u_xlat6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
float u_xlat11;
mediump float u_xlat16_12;
vec3 u_xlat13;
float u_xlat17;
bool u_xlatb17;
float u_xlat19;
float u_xlat24;
float u_xlat27;
bool u_xlatb27;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat8.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    u_xlat1.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position = u_xlat1;
    vs_TEXCOORD2.zw = u_xlat1.zw;
    vs_COLOR0 = in_COLOR0;
    u_xlat3.xyz = u_xlat8.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat17 = u_xlat3.y * _HeigtFogParams.x;
    u_xlat27 = u_xlat17 * -1.44269502;
    u_xlat27 = exp2(u_xlat27);
    u_xlat27 = (-u_xlat27) + 1.0;
    u_xlat27 = u_xlat27 / u_xlat17;
#ifdef UNITY_ADRENO_ES3
    u_xlatb17 = !!(0.00999999978<abs(u_xlat17));
#else
    u_xlatb17 = 0.00999999978<abs(u_xlat17);
#endif
    u_xlat16_4.x = (u_xlatb17) ? u_xlat27 : 1.0;
    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat17 = sqrt(u_xlat17);
    u_xlat27 = u_xlat17 * _HeigtFogParams.y;
    u_xlat16_4.x = u_xlat27 * u_xlat16_4.x;
    u_xlat16_4.x = exp2((-u_xlat16_4.x));
    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
    u_xlat27 = u_xlat3.y * _HeigtFogParams2.x;
    u_xlat5 = u_xlat27 * -1.44269502;
    u_xlat5 = exp2(u_xlat5);
    u_xlat5 = (-u_xlat5) + 1.0;
    u_xlat5 = u_xlat5 / u_xlat27;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(0.00999999978<abs(u_xlat27));
#else
    u_xlatb27 = 0.00999999978<abs(u_xlat27);
#endif
    u_xlat16_12 = (u_xlatb27) ? u_xlat5 : 1.0;
    u_xlat27 = u_xlat17 * _HeigtFogParams2.y;
    u_xlat16_12 = u_xlat27 * u_xlat16_12;
    u_xlat16_12 = exp2((-u_xlat16_12));
    u_xlat16_4.y = (-u_xlat16_12) + 1.0;
    u_xlat16_4.xy = max(u_xlat16_4.xy, vec2(0.0, 0.0));
    u_xlat16_4.x = u_xlat16_4.y + u_xlat16_4.x;
    u_xlat27 = u_xlat17 * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
    u_xlat16_12 = (-u_xlat27) + 2.0;
    u_xlat16_12 = u_xlat27 * u_xlat16_12;
    u_xlat27 = u_xlat16_12 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat27 = u_xlat27 + 1.0;
    u_xlat16_4.x = u_xlat27 * u_xlat16_4.x;
    u_xlat27 = min(u_xlat16_4.x, _HeigtFogColBase.w);
    u_xlat5 = (-u_xlat27) + 1.0;
    u_xlat13.x = _ProjectionParams.z * 0.999899983;
    u_xlat6.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat6.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat6.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat3.x = dot(u_xlat3.xyz, u_xlat6.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!((-u_xlat3.x)>=u_xlat13.x);
#else
    u_xlatb3 = (-u_xlat3.x)>=u_xlat13.x;
#endif
    u_xlat11 = u_xlat17 * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat11 = min(max(u_xlat11, 0.0), 1.0);
#else
    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
#endif
    u_xlat17 = u_xlat17 + (-_HeigtFogRamp.w);
    u_xlat17 = u_xlat17 * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat17 = min(max(u_xlat17, 0.0), 1.0);
#else
    u_xlat17 = clamp(u_xlat17, 0.0, 1.0);
#endif
    u_xlat19 = (-u_xlat11) + 2.0;
    u_xlat11 = u_xlat19 * u_xlat11;
    u_xlat19 = u_xlat11 * _HeigtFogColDelta.w;
    u_xlat3.x = (u_xlatb3) ? u_xlat19 : u_xlat11;
    u_xlat3.x = log2(u_xlat3.x);
    u_xlat3.x = u_xlat3.x * unity_FogColor.w;
    u_xlat3.x = exp2(u_xlat3.x);
    u_xlat3.x = min(u_xlat3.x, _HeigtFogColBase.w);
    u_xlat11 = u_xlat8.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat11 = min(max(u_xlat11, 0.0), 1.0);
#else
    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
#endif
    u_xlat16_4.x = (-u_xlat11) + 2.0;
    u_xlat16_4.x = u_xlat11 * u_xlat16_4.x;
    u_xlat13.xyz = u_xlat16_4.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat6.xyz = (-u_xlat13.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat13.xyz = vec3(u_xlat17) * u_xlat6.xyz + u_xlat13.xyz;
    u_xlat13.xyz = u_xlat3.xxx * u_xlat13.xyz;
    u_xlat17 = (-u_xlat3.x) + 1.0;
    vs_TEXCOORD0.w = u_xlat5 * u_xlat17;
    u_xlat3.xyz = vec3(u_xlat5) * u_xlat13.xyz;
    u_xlat17 = u_xlat8.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat17 = min(max(u_xlat17, 0.0), 1.0);
#else
    u_xlat17 = clamp(u_xlat17, 0.0, 1.0);
#endif
    vs_TEXCOORD5.xyz = u_xlat8.xyz;
    u_xlat8.xyz = vec3(u_xlat17) * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    vs_TEXCOORD0.xyz = u_xlat8.xyz * vec3(u_xlat27) + u_xlat3.xyz;
    u_xlat3.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat3.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat3.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat8.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat3.xyz = u_xlat8.xxx * u_xlat3.xyz;
    u_xlat16_4.x = u_xlat3.y * u_xlat3.y;
    u_xlat16_4.x = u_xlat3.x * u_xlat3.x + (-u_xlat16_4.x);
    u_xlat16_5 = u_xlat3.yzzx * u_xlat3.xyzz;
    u_xlat16_7.x = dot(unity_SHBr, u_xlat16_5);
    u_xlat16_7.y = dot(unity_SHBg, u_xlat16_5);
    u_xlat16_7.z = dot(unity_SHBb, u_xlat16_5);
    u_xlat16_4.xyz = unity_SHC.xyz * u_xlat16_4.xxx + u_xlat16_7.xyz;
    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat3.w = 1.0;
    u_xlat16_7.x = dot(unity_SHAr, u_xlat3);
    u_xlat16_7.y = dot(unity_SHAg, u_xlat3);
    u_xlat16_7.z = dot(unity_SHAb, u_xlat3);
    u_xlat16_4.xyz = u_xlat16_4.xyz + u_xlat16_7.xyz;
    vs_TEXCOORD1.xyz = u_xlat16_4.xyz;
    vs_TEXCOORD1.w = 1.0;
    u_xlat6.x = float(0.5);
    u_xlat6.z = float(0.5);
    u_xlat6.y = _ProjectionParams.x;
    u_xlat1.xyz = u_xlat1.xyw * u_xlat6.xyz;
    u_xlat1.w = u_xlat1.y * 0.5;
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4_mhyJitteredVP[1];
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[3] * u_xlat2.wwww + u_xlat1;
    u_xlat2.xyz = vec3(u_xlat6.z * u_xlat1.x, u_xlat6.y * u_xlat1.y, u_xlat6.z * u_xlat1.w);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    u_xlat2.w = u_xlat2.y * 0.5;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy;
    u_xlat8.x = dot(unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz);
    vs_TEXCOORD4.z = sqrt(u_xlat8.x);
    u_xlat8.x = dot(unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz);
    vs_TEXCOORD4.w = sqrt(u_xlat8.x);
    vs_TEXCOORD5.w = 0.0;
    u_xlat8.xyz = in_TANGENT0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat8.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_TANGENT0.xxx + u_xlat8.xyz;
    u_xlat0.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_TANGENT0.zzz + u_xlat8.xyz;
    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat0.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    vs_TEXCOORD6.xyz = u_xlat0.xyz;
    vs_TEXCOORD6.w = 0.0;
    vs_TEXCOORD7.xyz = u_xlat3.xyz;
    vs_TEXCOORD7.w = 0.0;
    u_xlat1.xyz = u_xlat0.yzx * u_xlat3.zxy;
    u_xlat0.xyz = u_xlat3.yzx * u_xlat0.zxy + (-u_xlat1.xyz);
    u_xlat24 = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD8.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    vs_TEXCOORD8.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	mediump vec4 _LightColor0;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	float _AlphaRange;
uniform 	float _AlphaOffset;
uniform 	float _Opacity;
uniform 	mediump float _BottomAlphaToggle;
uniform 	float _AlphaBottomRange;
uniform 	float _AlphaBottomOffset;
uniform 	vec4 _WaterfallTex01_ST;
uniform 	mediump vec4 _FoamUVCoord01;
uniform 	mediump vec4 _FoamUVCoord02;
uniform 	float _FoamRange;
uniform 	float _FoamOffset;
uniform 	vec4 _DayColor;
uniform 	vec4 _BottomColor;
uniform 	vec4 _TopColor;
uniform 	float _ColorGradientRange;
uniform 	float _ColorGradientOffset;
uniform 	vec4 _ReflectionColor_Dark;
uniform 	vec4 _ReflectionColor_Light;
uniform 	float _Normal01_U_Speed;
uniform 	vec4 _Normal01_ST;
uniform 	float _Normal01_VSpeed;
uniform 	float _Normal02_U_Speed;
uniform 	vec4 _Normal02_ST;
uniform 	float _Normal02_V_Speed;
uniform 	vec4 _DistortionIntensity;
uniform 	float _ReflectionBrightness;
uniform 	float _ReflectionIntensity;
uniform 	float _WaterFall01_Speed;
uniform 	float _Waterfall02_Speed;
uniform 	mediump vec4 _WaterfallPatternColor;
uniform 	float _Waterfall01Brightness;
uniform 	float _Waterfall02Brightness;
uniform 	float _SprayRange;
uniform 	float _SprayOffset;
uniform 	float _ShadowStrength;
uniform 	vec4 _WaterfallSpecTex_ST;
uniform 	float _Detail01_U_Speed;
uniform 	vec4 _NoiseTex_ST;
uniform 	float _Detail01_V_Speed;
uniform 	float _NoiselDistortionValue;
uniform 	mediump vec4 _WaterfallSpecColor;
uniform 	mediump vec4 _FoamColor;
uniform 	vec3 _ES_MainLightColor;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _WaterfallTex01;
uniform lowp sampler2D _Normal01;
uniform lowp sampler2D _Normal02;
uniform lowp samplerCube _Reflection;
uniform lowp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _WaterfallSpecTex;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
in highp vec4 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
lowp vec3 u_xlat10_0;
vec4 u_xlat1;
mediump float u_xlat16_1;
lowp float u_xlat10_1;
bool u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
bool u_xlatb3;
vec3 u_xlat4;
vec3 u_xlat5;
vec3 u_xlat6;
float u_xlat7;
mediump float u_xlat16_8;
float u_xlat9;
bool u_xlatb9;
float u_xlat12;
bool u_xlatb12;
vec2 u_xlat13;
lowp float u_xlat10_13;
float u_xlat15;
float u_xlat18;
mediump float u_xlat16_18;
lowp float u_xlat10_18;
float u_xlat19;
lowp float u_xlat10_21;
void main()
{
    u_xlat0.xy = vs_TEXCOORD4.xy * _Normal01_ST.xy + _Normal01_ST.zw;
    u_xlat0.x = u_xlat0.x * vs_TEXCOORD4.z;
    u_xlat1.x = _Time.y * _Normal01_U_Speed + u_xlat0.x;
    u_xlat0.x = _Time.y * _Normal01_VSpeed;
    u_xlat1.y = u_xlat0.y * vs_TEXCOORD4.w + u_xlat0.x;
    u_xlat10_0.xyz = texture(_Normal01, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xy = vs_TEXCOORD4.xy * _Normal02_ST.xy + _Normal02_ST.zw;
    u_xlat0.xy = vec2(u_xlat0.x * vs_TEXCOORD4.z, u_xlat0.y * vs_TEXCOORD4.w);
    u_xlat1.x = _Time.y * _Normal02_U_Speed + u_xlat0.x;
    u_xlat1.y = _Time.y * _Normal02_V_Speed + u_xlat0.y;
    u_xlat10_0.xyz = texture(_Normal02, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_2.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = u_xlat16_2.xyz * _DistortionIntensity.xyz;
    u_xlat1.x = vs_TEXCOORD6.x;
    u_xlat1.y = vs_TEXCOORD8.x;
    u_xlat1.z = vs_TEXCOORD7.x;
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat3.x = vs_TEXCOORD6.y;
    u_xlat3.y = vs_TEXCOORD8.y;
    u_xlat3.z = vs_TEXCOORD7.y;
    u_xlat1.y = dot(u_xlat3.xyz, u_xlat0.xyz);
    u_xlat3.x = vs_TEXCOORD6.z;
    u_xlat3.y = vs_TEXCOORD8.z;
    u_xlat3.z = vs_TEXCOORD7.z;
    u_xlat1.z = dot(u_xlat3.xyz, u_xlat0.xyz);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
    u_xlat18 = dot((-u_xlat1.xyz), u_xlat0.xyz);
    u_xlat18 = u_xlat18 + u_xlat18;
    u_xlat0.xyz = u_xlat0.xyz * (-vec3(u_xlat18)) + (-u_xlat1.xyz);
    u_xlat10_0.x = texture(_Reflection, u_xlat0.xyz).x;
    u_xlat6.xyz = (-_ReflectionColor_Dark.xyz) + _ReflectionColor_Light.xyz;
    u_xlat0.xyz = u_xlat10_0.xxx * u_xlat6.xyz + _ReflectionColor_Dark.xyz;
    u_xlat18 = vs_TEXCOORD4.y * _ColorGradientRange + _ColorGradientOffset;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat1.xyz = (-_BottomColor.xyz) + _TopColor.xyz;
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz + _BottomColor.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.200000003, 0.200000003, 0.200000003);
    u_xlat0.xyz = u_xlat0.xyz * vec3(_ReflectionBrightness) + (-u_xlat1.xyz);
    u_xlat0.xyz = vec3(vec3(_ReflectionIntensity, _ReflectionIntensity, _ReflectionIntensity)) * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat1.xy = vs_TEXCOORD4.xy * _WaterfallTex01_ST.xy + _WaterfallTex01_ST.zw;
    u_xlat1.xy = vec2(u_xlat1.x * vs_TEXCOORD4.z, u_xlat1.y * vs_TEXCOORD4.w);
    u_xlat1.zw = _Time.yy * vec2(_WaterFall01_Speed, _Waterfall02_Speed) + u_xlat1.yy;
    u_xlat10_18 = texture(_WaterfallTex01, u_xlat1.xz).x;
    u_xlat10_13 = texture(_WaterfallTex01, u_xlat1.xw).y;
    u_xlat16_2.x = (-u_xlat10_18) + u_xlat10_13;
    u_xlat16_2.x = u_xlat10_13 * u_xlat16_2.x + u_xlat10_18;
    u_xlat18 = u_xlat10_18 * _Waterfall01Brightness;
    u_xlat3.xyz = u_xlat16_2.xxx * _WaterfallPatternColor.xyz + (-u_xlat0.xyz);
    u_xlat19 = u_xlat10_13 * _Waterfall02Brightness + (-u_xlat18);
    u_xlat13.x = u_xlat10_13 * _Waterfall02Brightness;
    u_xlat18 = u_xlat13.x * u_xlat19 + u_xlat18;
    u_xlat13.x = vs_TEXCOORD4.y * _SprayRange + _SprayOffset;
    u_xlat13.x = (-u_xlat13.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat13.x = min(max(u_xlat13.x, 0.0), 1.0);
#else
    u_xlat13.x = clamp(u_xlat13.x, 0.0, 1.0);
#endif
    u_xlat18 = u_xlat18 * u_xlat13.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * _DayColor.xyz;
    u_xlat13.xy = vs_TEXCOORD4.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat3.x = _Time.y * _Detail01_U_Speed + u_xlat13.x;
    u_xlat3.y = _Time.y * _Detail01_V_Speed + u_xlat13.y;
    u_xlat10_18 = texture(_NoiseTex, u_xlat3.xy).x;
    u_xlat16_2.x = vs_TEXCOORD4.w * 0.5;
    u_xlat13.xy = vs_TEXCOORD4.xy * _WaterfallSpecTex_ST.xy + _WaterfallSpecTex_ST.zw;
    u_xlat16_2.x = vs_TEXCOORD4.w * u_xlat13.y + (-u_xlat16_2.x);
    u_xlat3.x = u_xlat10_18 * _NoiselDistortionValue + u_xlat13.x;
    u_xlat3.y = u_xlat10_18 * _NoiselDistortionValue + u_xlat16_2.x;
    u_xlat10_18 = texture(_WaterfallSpecTex, u_xlat3.xy).x;
    u_xlat16_3.xyz = vec3(u_xlat10_18) * _WaterfallSpecColor.xyz;
    u_xlat18 = (-_ShadowStrength) + 1.0;
    u_xlat13.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat10_21 = texture(_ShadowMapTexture, u_xlat13.xy).x;
    u_xlat13.x = texture(_CameraDepthTexture, u_xlat13.xy).x;
    u_xlat13.x = _ZBufferParams.z * u_xlat13.x + _ZBufferParams.w;
    u_xlat13.x = float(1.0) / u_xlat13.x;
    u_xlat13.x = u_xlat13.x + (-vs_TEXCOORD3.w);
    u_xlat18 = u_xlat10_21 * u_xlat18 + _ShadowStrength;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat16_3.xyz;
    u_xlat3.xy = vec2(_Time.y * _FoamUVCoord01.z, _Time.y * _FoamUVCoord01.w);
    u_xlat3.xy = u_xlat1.xy * _FoamUVCoord01.xy + u_xlat3.xy;
    u_xlat10_18 = texture(_WaterfallTex01, u_xlat3.xy).x;
    u_xlat3.xy = vec2(_Time.y * _FoamUVCoord02.z, _Time.y * _FoamUVCoord02.w);
    u_xlat1.xy = u_xlat1.xy * _FoamUVCoord02.xy + u_xlat3.xy;
    u_xlat10_1 = texture(_WaterfallTex01, u_xlat1.xy).y;
    u_xlat16_18 = u_xlat10_18 + u_xlat10_1;
    u_xlat1.x = vs_TEXCOORD4.y * _FoamRange + _FoamOffset;
    u_xlat18 = u_xlat16_18 + u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat1.x = (-u_xlat1.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat18 * u_xlat1.x;
    u_xlat0.xyz = u_xlat1.xxx * _FoamColor.xyz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * _ES_MainLightColor.xyz;
    u_xlat16_1 = max(_LightColor0.w, 1.0);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16_1);
    u_xlat1.xyw = vs_TEXCOORD5.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat3.x = u_xlat1.y * _HeigtFogParams.x;
    u_xlat9 = u_xlat3.x * -1.44269502;
    u_xlat9 = exp2(u_xlat9);
    u_xlat9 = (-u_xlat9) + 1.0;
    u_xlat9 = u_xlat9 / u_xlat3.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(0.00999999978<abs(u_xlat3.x));
#else
    u_xlatb3 = 0.00999999978<abs(u_xlat3.x);
#endif
    u_xlat16_2.x = (u_xlatb3) ? u_xlat9 : 1.0;
    u_xlat3.x = dot(u_xlat1.xyw, u_xlat1.xyw);
    u_xlat3.x = sqrt(u_xlat3.x);
    u_xlat9 = u_xlat3.x * _HeigtFogParams.y;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat9;
    u_xlat16_2.x = exp2((-u_xlat16_2.x));
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat9 = u_xlat1.y * _HeigtFogParams2.x;
    u_xlat15 = u_xlat9 * -1.44269502;
    u_xlat15 = exp2(u_xlat15);
    u_xlat15 = (-u_xlat15) + 1.0;
    u_xlat15 = u_xlat15 / u_xlat9;
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(0.00999999978<abs(u_xlat9));
#else
    u_xlatb9 = 0.00999999978<abs(u_xlat9);
#endif
    u_xlat16_8 = (u_xlatb9) ? u_xlat15 : 1.0;
    u_xlat9 = u_xlat3.x * _HeigtFogParams2.y;
    u_xlat16_8 = u_xlat16_8 * u_xlat9;
    u_xlat16_8 = exp2((-u_xlat16_8));
    u_xlat16_2.y = (-u_xlat16_8) + 1.0;
    u_xlat16_2.xy = max(u_xlat16_2.xy, vec2(0.0, 0.0));
    u_xlat16_2.x = u_xlat16_2.y + u_xlat16_2.x;
    u_xlat9 = u_xlat3.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat9 = min(max(u_xlat9, 0.0), 1.0);
#else
    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
#endif
    u_xlat16_8 = (-u_xlat9) + 2.0;
    u_xlat16_8 = u_xlat16_8 * u_xlat9;
    u_xlat9 = u_xlat16_8 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat9 = u_xlat9 + 1.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat9;
    u_xlat9 = min(u_xlat16_2.x, _HeigtFogColBase.w);
    u_xlat15 = (-u_xlat9) + 1.0;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat4.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat1.x = dot(u_xlat1.xyw, u_xlat4.xyz);
    u_xlat7 = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!((-u_xlat1.x)>=u_xlat7);
#else
    u_xlatb1 = (-u_xlat1.x)>=u_xlat7;
#endif
    u_xlat7 = u_xlat3.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7 = min(max(u_xlat7, 0.0), 1.0);
#else
    u_xlat7 = clamp(u_xlat7, 0.0, 1.0);
#endif
    u_xlat19 = u_xlat3.x + (-_HeigtFogRamp.w);
    u_xlat19 = u_xlat19 * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat19 = min(max(u_xlat19, 0.0), 1.0);
#else
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
#endif
    u_xlat3.x = (-u_xlat7) + 2.0;
    u_xlat7 = u_xlat7 * u_xlat3.x;
    u_xlat3.x = u_xlat7 * _HeigtFogColDelta.w;
    u_xlat1.x = (u_xlatb1) ? u_xlat3.x : u_xlat7;
    u_xlat1.x = log2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * unity_FogColor.w;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat1.x = min(u_xlat1.x, _HeigtFogColBase.w);
    u_xlat7 = vs_TEXCOORD5.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat7 = min(max(u_xlat7, 0.0), 1.0);
#else
    u_xlat7 = clamp(u_xlat7, 0.0, 1.0);
#endif
    u_xlat16_2.x = (-u_xlat7) + 2.0;
    u_xlat16_2.x = u_xlat7 * u_xlat16_2.x;
    u_xlat4.xyz = u_xlat16_2.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat5.xyz = (-u_xlat4.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat4.xyz = vec3(u_xlat19) * u_xlat5.xyz + u_xlat4.xyz;
    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
    u_xlat1.x = (-u_xlat1.x) + 1.0;
    u_xlat1.x = u_xlat15 * u_xlat1.x;
    u_xlat3.xzw = vec3(u_xlat15) * u_xlat4.xyz;
    u_xlat7 = vs_TEXCOORD5.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat7 = min(max(u_xlat7, 0.0), 1.0);
#else
    u_xlat7 = clamp(u_xlat7, 0.0, 1.0);
#endif
    u_xlat4.xyz = vec3(u_xlat7) * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    u_xlat3.xyz = u_xlat4.xyz * vec3(u_xlat9) + u_xlat3.xzw;
    u_xlat2.xyz = u_xlat1.xxx * u_xlat0.xyz + u_xlat3.xyz;
    u_xlat0.x = u_xlat13.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat6.x = u_xlat13.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat12 = (-u_xlat6.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat12 + u_xlat6.x;
    u_xlat6.x = vs_TEXCOORD4.y * _AlphaRange + _AlphaOffset;
    u_xlat6.x = (-u_xlat6.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat6.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _Opacity;
    u_xlat6.x = vs_TEXCOORD4.y * _AlphaBottomRange + _AlphaBottomOffset;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_BottomAlphaToggle==1.0);
#else
    u_xlatb12 = _BottomAlphaToggle==1.0;
#endif
    u_xlat6.x = (u_xlatb12) ? u_xlat6.x : 1.0;
    u_xlat0.x = u_xlat6.x * u_xlat0.x;
    u_xlat2.w = u_xlat18 * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.w = min(max(u_xlat2.w, 0.0), 1.0);
#else
    u_xlat2.w = clamp(u_xlat2.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat2;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "HALF_RESOLUTION_PARTICLE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	mediump float _MHYZBias;
uniform 	vec4 hlslcc_mtx4x4_mhyJitteredVP[4];
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
mediump vec4 u_xlat16_3;
bool u_xlatb3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat6;
mediump vec3 u_xlat16_7;
float u_xlat11;
mediump float u_xlat16_12;
float u_xlat18;
bool u_xlatb18;
float u_xlat19;
float u_xlat24;
bool u_xlatb24;
float u_xlat27;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat2.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    gl_Position = u_xlat2;
    vs_TEXCOORD2.zw = u_xlat2.zw;
    vs_COLOR0 = in_COLOR0;
    u_xlat3.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat24 = u_xlat3.y * _HeigtFogParams.x;
    u_xlat18 = u_xlat24 * -1.44269502;
    u_xlat18 = exp2(u_xlat18);
    u_xlat18 = (-u_xlat18) + 1.0;
    u_xlat18 = u_xlat18 / u_xlat24;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(0.00999999978<abs(u_xlat24));
#else
    u_xlatb24 = 0.00999999978<abs(u_xlat24);
#endif
    u_xlat16_4.x = (u_xlatb24) ? u_xlat18 : 1.0;
    u_xlat24 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat24 = sqrt(u_xlat24);
    u_xlat18 = u_xlat24 * _HeigtFogParams.y;
    u_xlat16_4.x = u_xlat18 * u_xlat16_4.x;
    u_xlat16_4.x = exp2((-u_xlat16_4.x));
    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
    u_xlat18 = u_xlat3.y * _HeigtFogParams2.x;
    u_xlat27 = u_xlat18 * -1.44269502;
    u_xlat27 = exp2(u_xlat27);
    u_xlat27 = (-u_xlat27) + 1.0;
    u_xlat27 = u_xlat27 / u_xlat18;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(0.00999999978<abs(u_xlat18));
#else
    u_xlatb18 = 0.00999999978<abs(u_xlat18);
#endif
    u_xlat16_12 = (u_xlatb18) ? u_xlat27 : 1.0;
    u_xlat18 = u_xlat24 * _HeigtFogParams2.y;
    u_xlat16_12 = u_xlat18 * u_xlat16_12;
    u_xlat16_12 = exp2((-u_xlat16_12));
    u_xlat16_4.y = (-u_xlat16_12) + 1.0;
    u_xlat16_4.xy = max(u_xlat16_4.xy, vec2(0.0, 0.0));
    u_xlat16_4.x = u_xlat16_4.y + u_xlat16_4.x;
    u_xlat18 = u_xlat24 * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat16_12 = (-u_xlat18) + 2.0;
    u_xlat16_12 = u_xlat18 * u_xlat16_12;
    u_xlat18 = u_xlat16_12 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat18 = u_xlat18 + 1.0;
    u_xlat16_4.x = u_xlat18 * u_xlat16_4.x;
    u_xlat18 = min(u_xlat16_4.x, _HeigtFogColBase.w);
    u_xlat27 = (-u_xlat18) + 1.0;
    u_xlat5.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat5.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat5.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat3.x = dot(u_xlat3.xyz, u_xlat5.xyz);
    u_xlat11 = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!((-u_xlat3.x)>=u_xlat11);
#else
    u_xlatb3 = (-u_xlat3.x)>=u_xlat11;
#endif
    u_xlat11 = u_xlat24 * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat11 = min(max(u_xlat11, 0.0), 1.0);
#else
    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
#endif
    u_xlat24 = u_xlat24 + (-_HeigtFogRamp.w);
    u_xlat24 = u_xlat24 * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat19 = (-u_xlat11) + 2.0;
    u_xlat11 = u_xlat19 * u_xlat11;
    u_xlat19 = u_xlat11 * _HeigtFogColDelta.w;
    u_xlat3.x = (u_xlatb3) ? u_xlat19 : u_xlat11;
    u_xlat3.x = log2(u_xlat3.x);
    u_xlat3.x = u_xlat3.x * unity_FogColor.w;
    u_xlat3.x = exp2(u_xlat3.x);
    u_xlat3.x = min(u_xlat3.x, _HeigtFogColBase.w);
    u_xlat11 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat11 = min(max(u_xlat11, 0.0), 1.0);
#else
    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
#endif
    u_xlat16_4.x = (-u_xlat11) + 2.0;
    u_xlat16_4.x = u_xlat11 * u_xlat16_4.x;
    u_xlat5.xyz = u_xlat16_4.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat6.xyz = (-u_xlat5.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat5.xyz = vec3(u_xlat24) * u_xlat6.xyz + u_xlat5.xyz;
    u_xlat5.xyz = u_xlat3.xxx * u_xlat5.xyz;
    u_xlat24 = (-u_xlat3.x) + 1.0;
    vs_TEXCOORD0.w = u_xlat27 * u_xlat24;
    u_xlat3.xyz = vec3(u_xlat27) * u_xlat5.xyz;
    u_xlat24 = u_xlat0.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    u_xlat0.xyz = vec3(u_xlat24) * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    vs_TEXCOORD0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat3.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat0.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    u_xlat16_4.x = u_xlat0.y * u_xlat0.y;
    u_xlat16_4.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_4.x);
    u_xlat16_3 = u_xlat0.yzzx * u_xlat0.xyzz;
    u_xlat16_7.x = dot(unity_SHBr, u_xlat16_3);
    u_xlat16_7.y = dot(unity_SHBg, u_xlat16_3);
    u_xlat16_7.z = dot(unity_SHBb, u_xlat16_3);
    u_xlat16_4.xyz = unity_SHC.xyz * u_xlat16_4.xxx + u_xlat16_7.xyz;
    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat0.w = 1.0;
    u_xlat16_7.x = dot(unity_SHAr, u_xlat0);
    u_xlat16_7.y = dot(unity_SHAg, u_xlat0);
    u_xlat16_7.z = dot(unity_SHAb, u_xlat0);
    u_xlat16_4.xyz = u_xlat16_4.xyz + u_xlat16_7.xyz;
    vs_TEXCOORD1.xyz = u_xlat16_4.xyz;
    vs_TEXCOORD1.w = 1.0;
    u_xlat5.x = float(0.5);
    u_xlat5.z = float(0.5);
    u_xlat5.y = _ProjectionParams.x;
    u_xlat2.xyz = u_xlat2.xyw * u_xlat5.xyz;
    u_xlat2.w = u_xlat2.y * 0.5;
    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4_mhyJitteredVP[1];
    u_xlat2 = hlslcc_mtx4x4_mhyJitteredVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4_mhyJitteredVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat2.xyz = vec3(u_xlat5.z * u_xlat1.x, u_xlat5.y * u_xlat1.y, u_xlat5.z * u_xlat1.w);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    u_xlat2.w = u_xlat2.y * 0.5;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat24 = dot(hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, hlslcc_mtx4x4unity_ObjectToWorld[0].xyz);
    vs_TEXCOORD4.z = sqrt(u_xlat24);
    u_xlat24 = dot(hlslcc_mtx4x4unity_ObjectToWorld[1].xyz, hlslcc_mtx4x4unity_ObjectToWorld[1].xyz);
    vs_TEXCOORD4.w = sqrt(u_xlat24);
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD5.w = 0.0;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
    vs_TEXCOORD6.xyz = u_xlat1.xyz;
    vs_TEXCOORD6.w = 0.0;
    vs_TEXCOORD7.xyz = u_xlat0.xyz;
    vs_TEXCOORD7.w = 0.0;
    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
    u_xlat24 = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD8.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    vs_TEXCOORD8.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	mediump vec4 _LightColor0;
uniform 	float _AlphaRange;
uniform 	float _AlphaOffset;
uniform 	float _Opacity;
uniform 	mediump float _BottomAlphaToggle;
uniform 	float _AlphaBottomRange;
uniform 	float _AlphaBottomOffset;
uniform 	vec4 _WaterfallTex01_ST;
uniform 	mediump vec4 _FoamUVCoord01;
uniform 	mediump vec4 _FoamUVCoord02;
uniform 	float _FoamRange;
uniform 	float _FoamOffset;
uniform 	vec4 _DayColor;
uniform 	vec4 _BottomColor;
uniform 	vec4 _TopColor;
uniform 	float _ColorGradientRange;
uniform 	float _ColorGradientOffset;
uniform 	vec4 _ReflectionColor_Dark;
uniform 	vec4 _ReflectionColor_Light;
uniform 	float _Normal01_U_Speed;
uniform 	vec4 _Normal01_ST;
uniform 	float _Normal01_VSpeed;
uniform 	float _Normal02_U_Speed;
uniform 	vec4 _Normal02_ST;
uniform 	float _Normal02_V_Speed;
uniform 	vec4 _DistortionIntensity;
uniform 	float _ReflectionBrightness;
uniform 	float _ReflectionIntensity;
uniform 	float _WaterFall01_Speed;
uniform 	float _Waterfall02_Speed;
uniform 	mediump vec4 _WaterfallPatternColor;
uniform 	float _Waterfall01Brightness;
uniform 	float _Waterfall02Brightness;
uniform 	float _SprayRange;
uniform 	float _SprayOffset;
uniform 	float _ShadowStrength;
uniform 	vec4 _WaterfallSpecTex_ST;
uniform 	float _Detail01_U_Speed;
uniform 	vec4 _NoiseTex_ST;
uniform 	float _Detail01_V_Speed;
uniform 	float _NoiselDistortionValue;
uniform 	mediump vec4 _WaterfallSpecColor;
uniform 	mediump vec4 _FoamColor;
uniform 	vec3 _ES_MainLightColor;
uniform lowp sampler2D _WaterfallTex01;
uniform lowp sampler2D _Normal01;
uniform lowp sampler2D _Normal02;
uniform lowp samplerCube _Reflection;
uniform lowp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _WaterfallSpecTex;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
in highp vec4 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
lowp vec3 u_xlat10_0;
vec4 u_xlat1;
mediump float u_xlat16_1;
lowp float u_xlat10_1;
bool u_xlatb1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
bool u_xlatb3;
vec3 u_xlat4;
vec3 u_xlat5;
vec3 u_xlat6;
bool u_xlatb6;
vec3 u_xlat7;
mediump float u_xlat16_8;
vec3 u_xlat9;
vec2 u_xlat13;
lowp float u_xlat10_13;
float u_xlat18;
mediump float u_xlat16_18;
lowp float u_xlat10_18;
float u_xlat19;
bool u_xlatb19;
void main()
{
    u_xlat0.xy = vs_TEXCOORD4.xy * _Normal01_ST.xy + _Normal01_ST.zw;
    u_xlat0.x = u_xlat0.x * vs_TEXCOORD4.z;
    u_xlat1.x = _Time.y * _Normal01_U_Speed + u_xlat0.x;
    u_xlat0.x = _Time.y * _Normal01_VSpeed;
    u_xlat1.y = u_xlat0.y * vs_TEXCOORD4.w + u_xlat0.x;
    u_xlat10_0.xyz = texture(_Normal01, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xy = vs_TEXCOORD4.xy * _Normal02_ST.xy + _Normal02_ST.zw;
    u_xlat0.xy = vec2(u_xlat0.x * vs_TEXCOORD4.z, u_xlat0.y * vs_TEXCOORD4.w);
    u_xlat1.x = _Time.y * _Normal02_U_Speed + u_xlat0.x;
    u_xlat1.y = _Time.y * _Normal02_V_Speed + u_xlat0.y;
    u_xlat10_0.xyz = texture(_Normal02, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_2.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = u_xlat16_2.xyz * _DistortionIntensity.xyz;
    u_xlat1.x = vs_TEXCOORD6.x;
    u_xlat1.y = vs_TEXCOORD8.x;
    u_xlat1.z = vs_TEXCOORD7.x;
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat3.x = vs_TEXCOORD6.y;
    u_xlat3.y = vs_TEXCOORD8.y;
    u_xlat3.z = vs_TEXCOORD7.y;
    u_xlat1.y = dot(u_xlat3.xyz, u_xlat0.xyz);
    u_xlat3.x = vs_TEXCOORD6.z;
    u_xlat3.y = vs_TEXCOORD8.z;
    u_xlat3.z = vs_TEXCOORD7.z;
    u_xlat1.z = dot(u_xlat3.xyz, u_xlat0.xyz);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
    u_xlat18 = dot((-u_xlat1.xyz), u_xlat0.xyz);
    u_xlat18 = u_xlat18 + u_xlat18;
    u_xlat0.xyz = u_xlat0.xyz * (-vec3(u_xlat18)) + (-u_xlat1.xyz);
    u_xlat10_0.x = texture(_Reflection, u_xlat0.xyz).x;
    u_xlat6.xyz = (-_ReflectionColor_Dark.xyz) + _ReflectionColor_Light.xyz;
    u_xlat0.xyz = u_xlat10_0.xxx * u_xlat6.xyz + _ReflectionColor_Dark.xyz;
    u_xlat18 = vs_TEXCOORD4.y * _ColorGradientRange + _ColorGradientOffset;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat1.xyz = (-_BottomColor.xyz) + _TopColor.xyz;
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz + _BottomColor.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.200000003, 0.200000003, 0.200000003);
    u_xlat0.xyz = u_xlat0.xyz * vec3(_ReflectionBrightness) + (-u_xlat1.xyz);
    u_xlat0.xyz = vec3(vec3(_ReflectionIntensity, _ReflectionIntensity, _ReflectionIntensity)) * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat1.xy = vs_TEXCOORD4.xy * _WaterfallTex01_ST.xy + _WaterfallTex01_ST.zw;
    u_xlat1.xy = vec2(u_xlat1.x * vs_TEXCOORD4.z, u_xlat1.y * vs_TEXCOORD4.w);
    u_xlat1.zw = _Time.yy * vec2(_WaterFall01_Speed, _Waterfall02_Speed) + u_xlat1.yy;
    u_xlat10_18 = texture(_WaterfallTex01, u_xlat1.xz).x;
    u_xlat10_13 = texture(_WaterfallTex01, u_xlat1.xw).y;
    u_xlat16_2.x = (-u_xlat10_18) + u_xlat10_13;
    u_xlat16_2.x = u_xlat10_13 * u_xlat16_2.x + u_xlat10_18;
    u_xlat18 = u_xlat10_18 * _Waterfall01Brightness;
    u_xlat3.xyz = u_xlat16_2.xxx * _WaterfallPatternColor.xyz + (-u_xlat0.xyz);
    u_xlat19 = u_xlat10_13 * _Waterfall02Brightness + (-u_xlat18);
    u_xlat13.x = u_xlat10_13 * _Waterfall02Brightness;
    u_xlat18 = u_xlat13.x * u_xlat19 + u_xlat18;
    u_xlat13.x = vs_TEXCOORD4.y * _SprayRange + _SprayOffset;
    u_xlat13.x = (-u_xlat13.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat13.x = min(max(u_xlat13.x, 0.0), 1.0);
#else
    u_xlat13.x = clamp(u_xlat13.x, 0.0, 1.0);
#endif
    u_xlat18 = u_xlat18 * u_xlat13.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * _DayColor.xyz;
    u_xlat13.xy = vs_TEXCOORD4.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat3.x = _Time.y * _Detail01_U_Speed + u_xlat13.x;
    u_xlat3.y = _Time.y * _Detail01_V_Speed + u_xlat13.y;
    u_xlat10_18 = texture(_NoiseTex, u_xlat3.xy).x;
    u_xlat16_2.x = vs_TEXCOORD4.w * 0.5;
    u_xlat13.xy = vs_TEXCOORD4.xy * _WaterfallSpecTex_ST.xy + _WaterfallSpecTex_ST.zw;
    u_xlat16_2.x = vs_TEXCOORD4.w * u_xlat13.y + (-u_xlat16_2.x);
    u_xlat3.x = u_xlat10_18 * _NoiselDistortionValue + u_xlat13.x;
    u_xlat3.y = u_xlat10_18 * _NoiselDistortionValue + u_xlat16_2.x;
    u_xlat10_18 = texture(_WaterfallSpecTex, u_xlat3.xy).x;
    u_xlat16_3.xyz = vec3(u_xlat10_18) * _WaterfallSpecColor.xyz;
    u_xlat13.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat10_18 = texture(_ShadowMapTexture, u_xlat13.xy).x;
    u_xlat13.x = (-_ShadowStrength) + 1.0;
    u_xlat18 = u_xlat10_18 * u_xlat13.x + _ShadowStrength;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat16_3.xyz;
    u_xlat13.xy = vec2(_Time.y * _FoamUVCoord01.z, _Time.y * _FoamUVCoord01.w);
    u_xlat13.xy = u_xlat1.xy * _FoamUVCoord01.xy + u_xlat13.xy;
    u_xlat10_18 = texture(_WaterfallTex01, u_xlat13.xy).x;
    u_xlat13.xy = vec2(_Time.y * _FoamUVCoord02.z, _Time.y * _FoamUVCoord02.w);
    u_xlat1.xy = u_xlat1.xy * _FoamUVCoord02.xy + u_xlat13.xy;
    u_xlat10_1 = texture(_WaterfallTex01, u_xlat1.xy).y;
    u_xlat16_18 = u_xlat10_18 + u_xlat10_1;
    u_xlat1.x = vs_TEXCOORD4.y * _FoamRange + _FoamOffset;
    u_xlat18 = u_xlat16_18 + u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat1.x = (-u_xlat1.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat18 * u_xlat1.x;
    u_xlat0.xyz = u_xlat1.xxx * _FoamColor.xyz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * _ES_MainLightColor.xyz;
    u_xlat16_1 = max(_LightColor0.w, 1.0);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16_1);
    u_xlat1.xyz = vs_TEXCOORD5.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat19 = u_xlat1.y * _HeigtFogParams.x;
    u_xlat3.x = u_xlat19 * -1.44269502;
    u_xlat3.x = exp2(u_xlat3.x);
    u_xlat3.x = (-u_xlat3.x) + 1.0;
    u_xlat3.x = u_xlat3.x / u_xlat19;
#ifdef UNITY_ADRENO_ES3
    u_xlatb19 = !!(0.00999999978<abs(u_xlat19));
#else
    u_xlatb19 = 0.00999999978<abs(u_xlat19);
#endif
    u_xlat16_2.x = (u_xlatb19) ? u_xlat3.x : 1.0;
    u_xlat19 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat19 = sqrt(u_xlat19);
    u_xlat3.x = u_xlat19 * _HeigtFogParams.y;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat3.x;
    u_xlat16_2.x = exp2((-u_xlat16_2.x));
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat3.x = u_xlat1.y * _HeigtFogParams2.x;
    u_xlat9.x = u_xlat3.x * -1.44269502;
    u_xlat9.x = exp2(u_xlat9.x);
    u_xlat9.x = (-u_xlat9.x) + 1.0;
    u_xlat9.x = u_xlat9.x / u_xlat3.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(0.00999999978<abs(u_xlat3.x));
#else
    u_xlatb3 = 0.00999999978<abs(u_xlat3.x);
#endif
    u_xlat16_8 = (u_xlatb3) ? u_xlat9.x : 1.0;
    u_xlat3.x = u_xlat19 * _HeigtFogParams2.y;
    u_xlat16_8 = u_xlat16_8 * u_xlat3.x;
    u_xlat16_8 = exp2((-u_xlat16_8));
    u_xlat16_2.y = (-u_xlat16_8) + 1.0;
    u_xlat16_2.xy = max(u_xlat16_2.xy, vec2(0.0, 0.0));
    u_xlat16_2.x = u_xlat16_2.y + u_xlat16_2.x;
    u_xlat3.x = u_xlat19 * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat3.x = min(max(u_xlat3.x, 0.0), 1.0);
#else
    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
#endif
    u_xlat16_8 = (-u_xlat3.x) + 2.0;
    u_xlat16_8 = u_xlat16_8 * u_xlat3.x;
    u_xlat3.x = u_xlat16_8 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat3.x = u_xlat3.x + 1.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat3.x;
    u_xlat3.x = min(u_xlat16_2.x, _HeigtFogColBase.w);
    u_xlat9.x = (-u_xlat3.x) + 1.0;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat4.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat4.xyz);
    u_xlat7.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!((-u_xlat1.x)>=u_xlat7.x);
#else
    u_xlatb1 = (-u_xlat1.x)>=u_xlat7.x;
#endif
    u_xlat7.x = u_xlat19 * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat13.x = u_xlat19 + (-_HeigtFogRamp.w);
    u_xlat13.x = u_xlat13.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat13.x = min(max(u_xlat13.x, 0.0), 1.0);
#else
    u_xlat13.x = clamp(u_xlat13.x, 0.0, 1.0);
#endif
    u_xlat19 = (-u_xlat7.x) + 2.0;
    u_xlat7.x = u_xlat19 * u_xlat7.x;
    u_xlat19 = u_xlat7.x * _HeigtFogColDelta.w;
    u_xlat1.x = (u_xlatb1) ? u_xlat19 : u_xlat7.x;
    u_xlat1.x = log2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * unity_FogColor.w;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat1.x = min(u_xlat1.x, _HeigtFogColBase.w);
    u_xlat7.x = vs_TEXCOORD5.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat16_2.x = (-u_xlat7.x) + 2.0;
    u_xlat16_2.x = u_xlat7.x * u_xlat16_2.x;
    u_xlat4.xyz = u_xlat16_2.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat5.xyz = (-u_xlat4.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat7.xyz = u_xlat13.xxx * u_xlat5.xyz + u_xlat4.xyz;
    u_xlat1.yzw = u_xlat1.xxx * u_xlat7.xyz;
    u_xlat1.x = (-u_xlat1.x) + 1.0;
    u_xlat1 = u_xlat9.xxxx * u_xlat1;
    u_xlat9.x = vs_TEXCOORD5.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat9.x = min(max(u_xlat9.x, 0.0), 1.0);
#else
    u_xlat9.x = clamp(u_xlat9.x, 0.0, 1.0);
#endif
    u_xlat9.xyz = u_xlat9.xxx * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    u_xlat7.xyz = u_xlat9.xyz * u_xlat3.xxx + u_xlat1.yzw;
    u_xlat1.xyz = u_xlat1.xxx * u_xlat0.xyz + u_xlat7.xyz;
    u_xlat0.x = vs_TEXCOORD4.y * _AlphaBottomRange + _AlphaBottomOffset;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(_BottomAlphaToggle==1.0);
#else
    u_xlatb6 = _BottomAlphaToggle==1.0;
#endif
    u_xlat0.x = (u_xlatb6) ? u_xlat0.x : 1.0;
    u_xlat6.x = vs_TEXCOORD4.y * _AlphaRange + _AlphaOffset;
    u_xlat6.x = (-u_xlat6.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat6.x = u_xlat6.x * _Opacity;
    u_xlat0.x = u_xlat0.x * u_xlat6.x;
    u_xlat1.w = u_xlat18 * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	mediump float _MHYZBias;
uniform 	vec4 hlslcc_mtx4x4_mhyJitteredVP[4];
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
mediump vec4 u_xlat16_3;
bool u_xlatb3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat6;
mediump vec3 u_xlat16_7;
float u_xlat11;
mediump float u_xlat16_12;
float u_xlat18;
bool u_xlatb18;
float u_xlat19;
float u_xlat24;
bool u_xlatb24;
float u_xlat27;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat2.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    gl_Position = u_xlat2;
    vs_TEXCOORD2.zw = u_xlat2.zw;
    vs_COLOR0 = in_COLOR0;
    u_xlat3.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat24 = u_xlat3.y * _HeigtFogParams.x;
    u_xlat18 = u_xlat24 * -1.44269502;
    u_xlat18 = exp2(u_xlat18);
    u_xlat18 = (-u_xlat18) + 1.0;
    u_xlat18 = u_xlat18 / u_xlat24;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(0.00999999978<abs(u_xlat24));
#else
    u_xlatb24 = 0.00999999978<abs(u_xlat24);
#endif
    u_xlat16_4.x = (u_xlatb24) ? u_xlat18 : 1.0;
    u_xlat24 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat24 = sqrt(u_xlat24);
    u_xlat18 = u_xlat24 * _HeigtFogParams.y;
    u_xlat16_4.x = u_xlat18 * u_xlat16_4.x;
    u_xlat16_4.x = exp2((-u_xlat16_4.x));
    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
    u_xlat18 = u_xlat3.y * _HeigtFogParams2.x;
    u_xlat27 = u_xlat18 * -1.44269502;
    u_xlat27 = exp2(u_xlat27);
    u_xlat27 = (-u_xlat27) + 1.0;
    u_xlat27 = u_xlat27 / u_xlat18;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(0.00999999978<abs(u_xlat18));
#else
    u_xlatb18 = 0.00999999978<abs(u_xlat18);
#endif
    u_xlat16_12 = (u_xlatb18) ? u_xlat27 : 1.0;
    u_xlat18 = u_xlat24 * _HeigtFogParams2.y;
    u_xlat16_12 = u_xlat18 * u_xlat16_12;
    u_xlat16_12 = exp2((-u_xlat16_12));
    u_xlat16_4.y = (-u_xlat16_12) + 1.0;
    u_xlat16_4.xy = max(u_xlat16_4.xy, vec2(0.0, 0.0));
    u_xlat16_4.x = u_xlat16_4.y + u_xlat16_4.x;
    u_xlat18 = u_xlat24 * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat16_12 = (-u_xlat18) + 2.0;
    u_xlat16_12 = u_xlat18 * u_xlat16_12;
    u_xlat18 = u_xlat16_12 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat18 = u_xlat18 + 1.0;
    u_xlat16_4.x = u_xlat18 * u_xlat16_4.x;
    u_xlat18 = min(u_xlat16_4.x, _HeigtFogColBase.w);
    u_xlat27 = (-u_xlat18) + 1.0;
    u_xlat5.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat5.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat5.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat3.x = dot(u_xlat3.xyz, u_xlat5.xyz);
    u_xlat11 = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!((-u_xlat3.x)>=u_xlat11);
#else
    u_xlatb3 = (-u_xlat3.x)>=u_xlat11;
#endif
    u_xlat11 = u_xlat24 * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat11 = min(max(u_xlat11, 0.0), 1.0);
#else
    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
#endif
    u_xlat24 = u_xlat24 + (-_HeigtFogRamp.w);
    u_xlat24 = u_xlat24 * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat19 = (-u_xlat11) + 2.0;
    u_xlat11 = u_xlat19 * u_xlat11;
    u_xlat19 = u_xlat11 * _HeigtFogColDelta.w;
    u_xlat3.x = (u_xlatb3) ? u_xlat19 : u_xlat11;
    u_xlat3.x = log2(u_xlat3.x);
    u_xlat3.x = u_xlat3.x * unity_FogColor.w;
    u_xlat3.x = exp2(u_xlat3.x);
    u_xlat3.x = min(u_xlat3.x, _HeigtFogColBase.w);
    u_xlat11 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat11 = min(max(u_xlat11, 0.0), 1.0);
#else
    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
#endif
    u_xlat16_4.x = (-u_xlat11) + 2.0;
    u_xlat16_4.x = u_xlat11 * u_xlat16_4.x;
    u_xlat5.xyz = u_xlat16_4.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat6.xyz = (-u_xlat5.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat5.xyz = vec3(u_xlat24) * u_xlat6.xyz + u_xlat5.xyz;
    u_xlat5.xyz = u_xlat3.xxx * u_xlat5.xyz;
    u_xlat24 = (-u_xlat3.x) + 1.0;
    vs_TEXCOORD0.w = u_xlat27 * u_xlat24;
    u_xlat3.xyz = vec3(u_xlat27) * u_xlat5.xyz;
    u_xlat24 = u_xlat0.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    u_xlat0.xyz = vec3(u_xlat24) * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    vs_TEXCOORD0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat3.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat0.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    u_xlat16_4.x = u_xlat0.y * u_xlat0.y;
    u_xlat16_4.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_4.x);
    u_xlat16_3 = u_xlat0.yzzx * u_xlat0.xyzz;
    u_xlat16_7.x = dot(unity_SHBr, u_xlat16_3);
    u_xlat16_7.y = dot(unity_SHBg, u_xlat16_3);
    u_xlat16_7.z = dot(unity_SHBb, u_xlat16_3);
    u_xlat16_4.xyz = unity_SHC.xyz * u_xlat16_4.xxx + u_xlat16_7.xyz;
    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat0.w = 1.0;
    u_xlat16_7.x = dot(unity_SHAr, u_xlat0);
    u_xlat16_7.y = dot(unity_SHAg, u_xlat0);
    u_xlat16_7.z = dot(unity_SHAb, u_xlat0);
    u_xlat16_4.xyz = u_xlat16_4.xyz + u_xlat16_7.xyz;
    vs_TEXCOORD1.xyz = u_xlat16_4.xyz;
    vs_TEXCOORD1.w = 1.0;
    u_xlat5.x = float(0.5);
    u_xlat5.z = float(0.5);
    u_xlat5.y = _ProjectionParams.x;
    u_xlat2.xyz = u_xlat2.xyw * u_xlat5.xyz;
    u_xlat2.w = u_xlat2.y * 0.5;
    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4_mhyJitteredVP[1];
    u_xlat2 = hlslcc_mtx4x4_mhyJitteredVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4_mhyJitteredVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat2.xyz = vec3(u_xlat5.z * u_xlat1.x, u_xlat5.y * u_xlat1.y, u_xlat5.z * u_xlat1.w);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    u_xlat2.w = u_xlat2.y * 0.5;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat24 = dot(hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, hlslcc_mtx4x4unity_ObjectToWorld[0].xyz);
    vs_TEXCOORD4.z = sqrt(u_xlat24);
    u_xlat24 = dot(hlslcc_mtx4x4unity_ObjectToWorld[1].xyz, hlslcc_mtx4x4unity_ObjectToWorld[1].xyz);
    vs_TEXCOORD4.w = sqrt(u_xlat24);
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD5.w = 0.0;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
    vs_TEXCOORD6.xyz = u_xlat1.xyz;
    vs_TEXCOORD6.w = 0.0;
    vs_TEXCOORD7.xyz = u_xlat0.xyz;
    vs_TEXCOORD7.w = 0.0;
    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
    u_xlat24 = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD8.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    vs_TEXCOORD8.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	mediump vec4 _LightColor0;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	float _AlphaRange;
uniform 	float _AlphaOffset;
uniform 	float _Opacity;
uniform 	mediump float _BottomAlphaToggle;
uniform 	float _AlphaBottomRange;
uniform 	float _AlphaBottomOffset;
uniform 	vec4 _WaterfallTex01_ST;
uniform 	mediump vec4 _FoamUVCoord01;
uniform 	mediump vec4 _FoamUVCoord02;
uniform 	float _FoamRange;
uniform 	float _FoamOffset;
uniform 	vec4 _DayColor;
uniform 	vec4 _BottomColor;
uniform 	vec4 _TopColor;
uniform 	float _ColorGradientRange;
uniform 	float _ColorGradientOffset;
uniform 	vec4 _ReflectionColor_Dark;
uniform 	vec4 _ReflectionColor_Light;
uniform 	float _Normal01_U_Speed;
uniform 	vec4 _Normal01_ST;
uniform 	float _Normal01_VSpeed;
uniform 	float _Normal02_U_Speed;
uniform 	vec4 _Normal02_ST;
uniform 	float _Normal02_V_Speed;
uniform 	vec4 _DistortionIntensity;
uniform 	float _ReflectionBrightness;
uniform 	float _ReflectionIntensity;
uniform 	float _WaterFall01_Speed;
uniform 	float _Waterfall02_Speed;
uniform 	mediump vec4 _WaterfallPatternColor;
uniform 	float _Waterfall01Brightness;
uniform 	float _Waterfall02Brightness;
uniform 	float _SprayRange;
uniform 	float _SprayOffset;
uniform 	float _ShadowStrength;
uniform 	vec4 _WaterfallSpecTex_ST;
uniform 	float _Detail01_U_Speed;
uniform 	vec4 _NoiseTex_ST;
uniform 	float _Detail01_V_Speed;
uniform 	float _NoiselDistortionValue;
uniform 	mediump vec4 _WaterfallSpecColor;
uniform 	mediump vec4 _FoamColor;
uniform 	vec3 _ES_MainLightColor;
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _WaterfallTex01;
uniform lowp sampler2D _Normal01;
uniform lowp sampler2D _Normal02;
uniform lowp samplerCube _Reflection;
uniform lowp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _WaterfallSpecTex;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
in highp vec4 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
lowp vec3 u_xlat10_0;
vec4 u_xlat1;
mediump float u_xlat16_1;
lowp float u_xlat10_1;
bool u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
bool u_xlatb3;
vec3 u_xlat4;
vec3 u_xlat5;
vec3 u_xlat6;
float u_xlat7;
mediump float u_xlat16_8;
float u_xlat9;
bool u_xlatb9;
float u_xlat12;
bool u_xlatb12;
vec2 u_xlat13;
lowp float u_xlat10_13;
float u_xlat15;
float u_xlat18;
mediump float u_xlat16_18;
lowp float u_xlat10_18;
float u_xlat19;
lowp float u_xlat10_21;
void main()
{
    u_xlat0.xy = vs_TEXCOORD4.xy * _Normal01_ST.xy + _Normal01_ST.zw;
    u_xlat0.x = u_xlat0.x * vs_TEXCOORD4.z;
    u_xlat1.x = _Time.y * _Normal01_U_Speed + u_xlat0.x;
    u_xlat0.x = _Time.y * _Normal01_VSpeed;
    u_xlat1.y = u_xlat0.y * vs_TEXCOORD4.w + u_xlat0.x;
    u_xlat10_0.xyz = texture(_Normal01, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xy = vs_TEXCOORD4.xy * _Normal02_ST.xy + _Normal02_ST.zw;
    u_xlat0.xy = vec2(u_xlat0.x * vs_TEXCOORD4.z, u_xlat0.y * vs_TEXCOORD4.w);
    u_xlat1.x = _Time.y * _Normal02_U_Speed + u_xlat0.x;
    u_xlat1.y = _Time.y * _Normal02_V_Speed + u_xlat0.y;
    u_xlat10_0.xyz = texture(_Normal02, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_2.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = u_xlat16_2.xyz * _DistortionIntensity.xyz;
    u_xlat1.x = vs_TEXCOORD6.x;
    u_xlat1.y = vs_TEXCOORD8.x;
    u_xlat1.z = vs_TEXCOORD7.x;
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat3.x = vs_TEXCOORD6.y;
    u_xlat3.y = vs_TEXCOORD8.y;
    u_xlat3.z = vs_TEXCOORD7.y;
    u_xlat1.y = dot(u_xlat3.xyz, u_xlat0.xyz);
    u_xlat3.x = vs_TEXCOORD6.z;
    u_xlat3.y = vs_TEXCOORD8.z;
    u_xlat3.z = vs_TEXCOORD7.z;
    u_xlat1.z = dot(u_xlat3.xyz, u_xlat0.xyz);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
    u_xlat18 = dot((-u_xlat1.xyz), u_xlat0.xyz);
    u_xlat18 = u_xlat18 + u_xlat18;
    u_xlat0.xyz = u_xlat0.xyz * (-vec3(u_xlat18)) + (-u_xlat1.xyz);
    u_xlat10_0.x = texture(_Reflection, u_xlat0.xyz).x;
    u_xlat6.xyz = (-_ReflectionColor_Dark.xyz) + _ReflectionColor_Light.xyz;
    u_xlat0.xyz = u_xlat10_0.xxx * u_xlat6.xyz + _ReflectionColor_Dark.xyz;
    u_xlat18 = vs_TEXCOORD4.y * _ColorGradientRange + _ColorGradientOffset;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat1.xyz = (-_BottomColor.xyz) + _TopColor.xyz;
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz + _BottomColor.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.200000003, 0.200000003, 0.200000003);
    u_xlat0.xyz = u_xlat0.xyz * vec3(_ReflectionBrightness) + (-u_xlat1.xyz);
    u_xlat0.xyz = vec3(vec3(_ReflectionIntensity, _ReflectionIntensity, _ReflectionIntensity)) * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat1.xy = vs_TEXCOORD4.xy * _WaterfallTex01_ST.xy + _WaterfallTex01_ST.zw;
    u_xlat1.xy = vec2(u_xlat1.x * vs_TEXCOORD4.z, u_xlat1.y * vs_TEXCOORD4.w);
    u_xlat1.zw = _Time.yy * vec2(_WaterFall01_Speed, _Waterfall02_Speed) + u_xlat1.yy;
    u_xlat10_18 = texture(_WaterfallTex01, u_xlat1.xz).x;
    u_xlat10_13 = texture(_WaterfallTex01, u_xlat1.xw).y;
    u_xlat16_2.x = (-u_xlat10_18) + u_xlat10_13;
    u_xlat16_2.x = u_xlat10_13 * u_xlat16_2.x + u_xlat10_18;
    u_xlat18 = u_xlat10_18 * _Waterfall01Brightness;
    u_xlat3.xyz = u_xlat16_2.xxx * _WaterfallPatternColor.xyz + (-u_xlat0.xyz);
    u_xlat19 = u_xlat10_13 * _Waterfall02Brightness + (-u_xlat18);
    u_xlat13.x = u_xlat10_13 * _Waterfall02Brightness;
    u_xlat18 = u_xlat13.x * u_xlat19 + u_xlat18;
    u_xlat13.x = vs_TEXCOORD4.y * _SprayRange + _SprayOffset;
    u_xlat13.x = (-u_xlat13.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat13.x = min(max(u_xlat13.x, 0.0), 1.0);
#else
    u_xlat13.x = clamp(u_xlat13.x, 0.0, 1.0);
#endif
    u_xlat18 = u_xlat18 * u_xlat13.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * _DayColor.xyz;
    u_xlat13.xy = vs_TEXCOORD4.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat3.x = _Time.y * _Detail01_U_Speed + u_xlat13.x;
    u_xlat3.y = _Time.y * _Detail01_V_Speed + u_xlat13.y;
    u_xlat10_18 = texture(_NoiseTex, u_xlat3.xy).x;
    u_xlat16_2.x = vs_TEXCOORD4.w * 0.5;
    u_xlat13.xy = vs_TEXCOORD4.xy * _WaterfallSpecTex_ST.xy + _WaterfallSpecTex_ST.zw;
    u_xlat16_2.x = vs_TEXCOORD4.w * u_xlat13.y + (-u_xlat16_2.x);
    u_xlat3.x = u_xlat10_18 * _NoiselDistortionValue + u_xlat13.x;
    u_xlat3.y = u_xlat10_18 * _NoiselDistortionValue + u_xlat16_2.x;
    u_xlat10_18 = texture(_WaterfallSpecTex, u_xlat3.xy).x;
    u_xlat16_3.xyz = vec3(u_xlat10_18) * _WaterfallSpecColor.xyz;
    u_xlat18 = (-_ShadowStrength) + 1.0;
    u_xlat13.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat10_21 = texture(_ShadowMapTexture, u_xlat13.xy).x;
    u_xlat13.x = texture(_CameraDepthTextureScaled, u_xlat13.xy).x;
    u_xlat13.x = u_xlat13.x * _ProjectionParams.z + (-vs_TEXCOORD3.w);
    u_xlat18 = u_xlat10_21 * u_xlat18 + _ShadowStrength;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat16_3.xyz;
    u_xlat3.xy = vec2(_Time.y * _FoamUVCoord01.z, _Time.y * _FoamUVCoord01.w);
    u_xlat3.xy = u_xlat1.xy * _FoamUVCoord01.xy + u_xlat3.xy;
    u_xlat10_18 = texture(_WaterfallTex01, u_xlat3.xy).x;
    u_xlat3.xy = vec2(_Time.y * _FoamUVCoord02.z, _Time.y * _FoamUVCoord02.w);
    u_xlat1.xy = u_xlat1.xy * _FoamUVCoord02.xy + u_xlat3.xy;
    u_xlat10_1 = texture(_WaterfallTex01, u_xlat1.xy).y;
    u_xlat16_18 = u_xlat10_18 + u_xlat10_1;
    u_xlat1.x = vs_TEXCOORD4.y * _FoamRange + _FoamOffset;
    u_xlat18 = u_xlat16_18 + u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat1.x = (-u_xlat1.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat18 * u_xlat1.x;
    u_xlat0.xyz = u_xlat1.xxx * _FoamColor.xyz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * _ES_MainLightColor.xyz;
    u_xlat16_1 = max(_LightColor0.w, 1.0);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16_1);
    u_xlat1.xyw = vs_TEXCOORD5.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat3.x = u_xlat1.y * _HeigtFogParams.x;
    u_xlat9 = u_xlat3.x * -1.44269502;
    u_xlat9 = exp2(u_xlat9);
    u_xlat9 = (-u_xlat9) + 1.0;
    u_xlat9 = u_xlat9 / u_xlat3.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(0.00999999978<abs(u_xlat3.x));
#else
    u_xlatb3 = 0.00999999978<abs(u_xlat3.x);
#endif
    u_xlat16_2.x = (u_xlatb3) ? u_xlat9 : 1.0;
    u_xlat3.x = dot(u_xlat1.xyw, u_xlat1.xyw);
    u_xlat3.x = sqrt(u_xlat3.x);
    u_xlat9 = u_xlat3.x * _HeigtFogParams.y;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat9;
    u_xlat16_2.x = exp2((-u_xlat16_2.x));
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat9 = u_xlat1.y * _HeigtFogParams2.x;
    u_xlat15 = u_xlat9 * -1.44269502;
    u_xlat15 = exp2(u_xlat15);
    u_xlat15 = (-u_xlat15) + 1.0;
    u_xlat15 = u_xlat15 / u_xlat9;
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(0.00999999978<abs(u_xlat9));
#else
    u_xlatb9 = 0.00999999978<abs(u_xlat9);
#endif
    u_xlat16_8 = (u_xlatb9) ? u_xlat15 : 1.0;
    u_xlat9 = u_xlat3.x * _HeigtFogParams2.y;
    u_xlat16_8 = u_xlat16_8 * u_xlat9;
    u_xlat16_8 = exp2((-u_xlat16_8));
    u_xlat16_2.y = (-u_xlat16_8) + 1.0;
    u_xlat16_2.xy = max(u_xlat16_2.xy, vec2(0.0, 0.0));
    u_xlat16_2.x = u_xlat16_2.y + u_xlat16_2.x;
    u_xlat9 = u_xlat3.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat9 = min(max(u_xlat9, 0.0), 1.0);
#else
    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
#endif
    u_xlat16_8 = (-u_xlat9) + 2.0;
    u_xlat16_8 = u_xlat16_8 * u_xlat9;
    u_xlat9 = u_xlat16_8 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat9 = u_xlat9 + 1.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat9;
    u_xlat9 = min(u_xlat16_2.x, _HeigtFogColBase.w);
    u_xlat15 = (-u_xlat9) + 1.0;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat4.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat1.x = dot(u_xlat1.xyw, u_xlat4.xyz);
    u_xlat7 = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!((-u_xlat1.x)>=u_xlat7);
#else
    u_xlatb1 = (-u_xlat1.x)>=u_xlat7;
#endif
    u_xlat7 = u_xlat3.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7 = min(max(u_xlat7, 0.0), 1.0);
#else
    u_xlat7 = clamp(u_xlat7, 0.0, 1.0);
#endif
    u_xlat19 = u_xlat3.x + (-_HeigtFogRamp.w);
    u_xlat19 = u_xlat19 * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat19 = min(max(u_xlat19, 0.0), 1.0);
#else
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
#endif
    u_xlat3.x = (-u_xlat7) + 2.0;
    u_xlat7 = u_xlat7 * u_xlat3.x;
    u_xlat3.x = u_xlat7 * _HeigtFogColDelta.w;
    u_xlat1.x = (u_xlatb1) ? u_xlat3.x : u_xlat7;
    u_xlat1.x = log2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * unity_FogColor.w;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat1.x = min(u_xlat1.x, _HeigtFogColBase.w);
    u_xlat7 = vs_TEXCOORD5.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat7 = min(max(u_xlat7, 0.0), 1.0);
#else
    u_xlat7 = clamp(u_xlat7, 0.0, 1.0);
#endif
    u_xlat16_2.x = (-u_xlat7) + 2.0;
    u_xlat16_2.x = u_xlat7 * u_xlat16_2.x;
    u_xlat4.xyz = u_xlat16_2.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat5.xyz = (-u_xlat4.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat4.xyz = vec3(u_xlat19) * u_xlat5.xyz + u_xlat4.xyz;
    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
    u_xlat1.x = (-u_xlat1.x) + 1.0;
    u_xlat1.x = u_xlat15 * u_xlat1.x;
    u_xlat3.xzw = vec3(u_xlat15) * u_xlat4.xyz;
    u_xlat7 = vs_TEXCOORD5.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat7 = min(max(u_xlat7, 0.0), 1.0);
#else
    u_xlat7 = clamp(u_xlat7, 0.0, 1.0);
#endif
    u_xlat4.xyz = vec3(u_xlat7) * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    u_xlat3.xyz = u_xlat4.xyz * vec3(u_xlat9) + u_xlat3.xzw;
    u_xlat2.xyz = u_xlat1.xxx * u_xlat0.xyz + u_xlat3.xyz;
    u_xlat0.x = u_xlat13.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat6.x = u_xlat13.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat12 = (-u_xlat6.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat12 + u_xlat6.x;
    u_xlat6.x = vs_TEXCOORD4.y * _AlphaRange + _AlphaOffset;
    u_xlat6.x = (-u_xlat6.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat6.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _Opacity;
    u_xlat6.x = vs_TEXCOORD4.y * _AlphaBottomRange + _AlphaBottomOffset;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_BottomAlphaToggle==1.0);
#else
    u_xlatb12 = _BottomAlphaToggle==1.0;
#endif
    u_xlat6.x = (u_xlatb12) ? u_xlat6.x : 1.0;
    u_xlat0.x = u_xlat6.x * u_xlat0.x;
    u_xlat2.w = u_xlat18 * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.w = min(max(u_xlat2.w, 0.0), 1.0);
#else
    u_xlat2.w = clamp(u_xlat2.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat2;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	mediump float _MHYZBias;
uniform 	vec4 hlslcc_mtx4x4_mhyJitteredVP[4];
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
vec3 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
bool u_xlatb3;
mediump vec3 u_xlat16_4;
float u_xlat5;
mediump vec4 u_xlat16_5;
vec3 u_xlat6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
float u_xlat11;
mediump float u_xlat16_12;
vec3 u_xlat13;
float u_xlat17;
bool u_xlatb17;
float u_xlat19;
float u_xlat24;
float u_xlat27;
bool u_xlatb27;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat8.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    u_xlat1.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position = u_xlat1;
    vs_TEXCOORD2.zw = u_xlat1.zw;
    vs_COLOR0 = in_COLOR0;
    u_xlat3.xyz = u_xlat8.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat17 = u_xlat3.y * _HeigtFogParams.x;
    u_xlat27 = u_xlat17 * -1.44269502;
    u_xlat27 = exp2(u_xlat27);
    u_xlat27 = (-u_xlat27) + 1.0;
    u_xlat27 = u_xlat27 / u_xlat17;
#ifdef UNITY_ADRENO_ES3
    u_xlatb17 = !!(0.00999999978<abs(u_xlat17));
#else
    u_xlatb17 = 0.00999999978<abs(u_xlat17);
#endif
    u_xlat16_4.x = (u_xlatb17) ? u_xlat27 : 1.0;
    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat17 = sqrt(u_xlat17);
    u_xlat27 = u_xlat17 * _HeigtFogParams.y;
    u_xlat16_4.x = u_xlat27 * u_xlat16_4.x;
    u_xlat16_4.x = exp2((-u_xlat16_4.x));
    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
    u_xlat27 = u_xlat3.y * _HeigtFogParams2.x;
    u_xlat5 = u_xlat27 * -1.44269502;
    u_xlat5 = exp2(u_xlat5);
    u_xlat5 = (-u_xlat5) + 1.0;
    u_xlat5 = u_xlat5 / u_xlat27;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(0.00999999978<abs(u_xlat27));
#else
    u_xlatb27 = 0.00999999978<abs(u_xlat27);
#endif
    u_xlat16_12 = (u_xlatb27) ? u_xlat5 : 1.0;
    u_xlat27 = u_xlat17 * _HeigtFogParams2.y;
    u_xlat16_12 = u_xlat27 * u_xlat16_12;
    u_xlat16_12 = exp2((-u_xlat16_12));
    u_xlat16_4.y = (-u_xlat16_12) + 1.0;
    u_xlat16_4.xy = max(u_xlat16_4.xy, vec2(0.0, 0.0));
    u_xlat16_4.x = u_xlat16_4.y + u_xlat16_4.x;
    u_xlat27 = u_xlat17 * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
    u_xlat16_12 = (-u_xlat27) + 2.0;
    u_xlat16_12 = u_xlat27 * u_xlat16_12;
    u_xlat27 = u_xlat16_12 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat27 = u_xlat27 + 1.0;
    u_xlat16_4.x = u_xlat27 * u_xlat16_4.x;
    u_xlat27 = min(u_xlat16_4.x, _HeigtFogColBase.w);
    u_xlat5 = (-u_xlat27) + 1.0;
    u_xlat13.x = _ProjectionParams.z * 0.999899983;
    u_xlat6.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat6.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat6.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat3.x = dot(u_xlat3.xyz, u_xlat6.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!((-u_xlat3.x)>=u_xlat13.x);
#else
    u_xlatb3 = (-u_xlat3.x)>=u_xlat13.x;
#endif
    u_xlat11 = u_xlat17 * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat11 = min(max(u_xlat11, 0.0), 1.0);
#else
    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
#endif
    u_xlat17 = u_xlat17 + (-_HeigtFogRamp.w);
    u_xlat17 = u_xlat17 * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat17 = min(max(u_xlat17, 0.0), 1.0);
#else
    u_xlat17 = clamp(u_xlat17, 0.0, 1.0);
#endif
    u_xlat19 = (-u_xlat11) + 2.0;
    u_xlat11 = u_xlat19 * u_xlat11;
    u_xlat19 = u_xlat11 * _HeigtFogColDelta.w;
    u_xlat3.x = (u_xlatb3) ? u_xlat19 : u_xlat11;
    u_xlat3.x = log2(u_xlat3.x);
    u_xlat3.x = u_xlat3.x * unity_FogColor.w;
    u_xlat3.x = exp2(u_xlat3.x);
    u_xlat3.x = min(u_xlat3.x, _HeigtFogColBase.w);
    u_xlat11 = u_xlat8.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat11 = min(max(u_xlat11, 0.0), 1.0);
#else
    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
#endif
    u_xlat16_4.x = (-u_xlat11) + 2.0;
    u_xlat16_4.x = u_xlat11 * u_xlat16_4.x;
    u_xlat13.xyz = u_xlat16_4.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat6.xyz = (-u_xlat13.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat13.xyz = vec3(u_xlat17) * u_xlat6.xyz + u_xlat13.xyz;
    u_xlat13.xyz = u_xlat3.xxx * u_xlat13.xyz;
    u_xlat17 = (-u_xlat3.x) + 1.0;
    vs_TEXCOORD0.w = u_xlat5 * u_xlat17;
    u_xlat3.xyz = vec3(u_xlat5) * u_xlat13.xyz;
    u_xlat17 = u_xlat8.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat17 = min(max(u_xlat17, 0.0), 1.0);
#else
    u_xlat17 = clamp(u_xlat17, 0.0, 1.0);
#endif
    vs_TEXCOORD5.xyz = u_xlat8.xyz;
    u_xlat8.xyz = vec3(u_xlat17) * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    vs_TEXCOORD0.xyz = u_xlat8.xyz * vec3(u_xlat27) + u_xlat3.xyz;
    u_xlat3.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat3.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat3.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat8.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat3.xyz = u_xlat8.xxx * u_xlat3.xyz;
    u_xlat16_4.x = u_xlat3.y * u_xlat3.y;
    u_xlat16_4.x = u_xlat3.x * u_xlat3.x + (-u_xlat16_4.x);
    u_xlat16_5 = u_xlat3.yzzx * u_xlat3.xyzz;
    u_xlat16_7.x = dot(unity_SHBr, u_xlat16_5);
    u_xlat16_7.y = dot(unity_SHBg, u_xlat16_5);
    u_xlat16_7.z = dot(unity_SHBb, u_xlat16_5);
    u_xlat16_4.xyz = unity_SHC.xyz * u_xlat16_4.xxx + u_xlat16_7.xyz;
    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat3.w = 1.0;
    u_xlat16_7.x = dot(unity_SHAr, u_xlat3);
    u_xlat16_7.y = dot(unity_SHAg, u_xlat3);
    u_xlat16_7.z = dot(unity_SHAb, u_xlat3);
    u_xlat16_4.xyz = u_xlat16_4.xyz + u_xlat16_7.xyz;
    vs_TEXCOORD1.xyz = u_xlat16_4.xyz;
    vs_TEXCOORD1.w = 1.0;
    u_xlat6.x = float(0.5);
    u_xlat6.z = float(0.5);
    u_xlat6.y = _ProjectionParams.x;
    u_xlat1.xyz = u_xlat1.xyw * u_xlat6.xyz;
    u_xlat1.w = u_xlat1.y * 0.5;
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4_mhyJitteredVP[1];
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[3] * u_xlat2.wwww + u_xlat1;
    u_xlat2.xyz = vec3(u_xlat6.z * u_xlat1.x, u_xlat6.y * u_xlat1.y, u_xlat6.z * u_xlat1.w);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    u_xlat2.w = u_xlat2.y * 0.5;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy;
    u_xlat8.x = dot(unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz);
    vs_TEXCOORD4.z = sqrt(u_xlat8.x);
    u_xlat8.x = dot(unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz);
    vs_TEXCOORD4.w = sqrt(u_xlat8.x);
    vs_TEXCOORD5.w = 0.0;
    u_xlat8.xyz = in_TANGENT0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat8.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_TANGENT0.xxx + u_xlat8.xyz;
    u_xlat0.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_TANGENT0.zzz + u_xlat8.xyz;
    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat0.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    vs_TEXCOORD6.xyz = u_xlat0.xyz;
    vs_TEXCOORD6.w = 0.0;
    vs_TEXCOORD7.xyz = u_xlat3.xyz;
    vs_TEXCOORD7.w = 0.0;
    u_xlat1.xyz = u_xlat0.yzx * u_xlat3.zxy;
    u_xlat0.xyz = u_xlat3.yzx * u_xlat0.zxy + (-u_xlat1.xyz);
    u_xlat24 = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD8.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    vs_TEXCOORD8.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	mediump vec4 _LightColor0;
uniform 	float _AlphaRange;
uniform 	float _AlphaOffset;
uniform 	float _Opacity;
uniform 	mediump float _BottomAlphaToggle;
uniform 	float _AlphaBottomRange;
uniform 	float _AlphaBottomOffset;
uniform 	vec4 _WaterfallTex01_ST;
uniform 	mediump vec4 _FoamUVCoord01;
uniform 	mediump vec4 _FoamUVCoord02;
uniform 	float _FoamRange;
uniform 	float _FoamOffset;
uniform 	vec4 _DayColor;
uniform 	vec4 _BottomColor;
uniform 	vec4 _TopColor;
uniform 	float _ColorGradientRange;
uniform 	float _ColorGradientOffset;
uniform 	vec4 _ReflectionColor_Dark;
uniform 	vec4 _ReflectionColor_Light;
uniform 	float _Normal01_U_Speed;
uniform 	vec4 _Normal01_ST;
uniform 	float _Normal01_VSpeed;
uniform 	float _Normal02_U_Speed;
uniform 	vec4 _Normal02_ST;
uniform 	float _Normal02_V_Speed;
uniform 	vec4 _DistortionIntensity;
uniform 	float _ReflectionBrightness;
uniform 	float _ReflectionIntensity;
uniform 	float _WaterFall01_Speed;
uniform 	float _Waterfall02_Speed;
uniform 	mediump vec4 _WaterfallPatternColor;
uniform 	float _Waterfall01Brightness;
uniform 	float _Waterfall02Brightness;
uniform 	float _SprayRange;
uniform 	float _SprayOffset;
uniform 	float _ShadowStrength;
uniform 	vec4 _WaterfallSpecTex_ST;
uniform 	float _Detail01_U_Speed;
uniform 	vec4 _NoiseTex_ST;
uniform 	float _Detail01_V_Speed;
uniform 	float _NoiselDistortionValue;
uniform 	mediump vec4 _WaterfallSpecColor;
uniform 	mediump vec4 _FoamColor;
uniform 	vec3 _ES_MainLightColor;
uniform lowp sampler2D _WaterfallTex01;
uniform lowp sampler2D _Normal01;
uniform lowp sampler2D _Normal02;
uniform lowp samplerCube _Reflection;
uniform lowp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _WaterfallSpecTex;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
in highp vec4 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
lowp vec3 u_xlat10_0;
vec4 u_xlat1;
mediump float u_xlat16_1;
lowp float u_xlat10_1;
bool u_xlatb1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
bool u_xlatb3;
vec3 u_xlat4;
vec3 u_xlat5;
vec3 u_xlat6;
bool u_xlatb6;
vec3 u_xlat7;
mediump float u_xlat16_8;
vec3 u_xlat9;
vec2 u_xlat13;
lowp float u_xlat10_13;
float u_xlat18;
mediump float u_xlat16_18;
lowp float u_xlat10_18;
float u_xlat19;
bool u_xlatb19;
void main()
{
    u_xlat0.xy = vs_TEXCOORD4.xy * _Normal01_ST.xy + _Normal01_ST.zw;
    u_xlat0.x = u_xlat0.x * vs_TEXCOORD4.z;
    u_xlat1.x = _Time.y * _Normal01_U_Speed + u_xlat0.x;
    u_xlat0.x = _Time.y * _Normal01_VSpeed;
    u_xlat1.y = u_xlat0.y * vs_TEXCOORD4.w + u_xlat0.x;
    u_xlat10_0.xyz = texture(_Normal01, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xy = vs_TEXCOORD4.xy * _Normal02_ST.xy + _Normal02_ST.zw;
    u_xlat0.xy = vec2(u_xlat0.x * vs_TEXCOORD4.z, u_xlat0.y * vs_TEXCOORD4.w);
    u_xlat1.x = _Time.y * _Normal02_U_Speed + u_xlat0.x;
    u_xlat1.y = _Time.y * _Normal02_V_Speed + u_xlat0.y;
    u_xlat10_0.xyz = texture(_Normal02, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_2.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = u_xlat16_2.xyz * _DistortionIntensity.xyz;
    u_xlat1.x = vs_TEXCOORD6.x;
    u_xlat1.y = vs_TEXCOORD8.x;
    u_xlat1.z = vs_TEXCOORD7.x;
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat3.x = vs_TEXCOORD6.y;
    u_xlat3.y = vs_TEXCOORD8.y;
    u_xlat3.z = vs_TEXCOORD7.y;
    u_xlat1.y = dot(u_xlat3.xyz, u_xlat0.xyz);
    u_xlat3.x = vs_TEXCOORD6.z;
    u_xlat3.y = vs_TEXCOORD8.z;
    u_xlat3.z = vs_TEXCOORD7.z;
    u_xlat1.z = dot(u_xlat3.xyz, u_xlat0.xyz);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
    u_xlat18 = dot((-u_xlat1.xyz), u_xlat0.xyz);
    u_xlat18 = u_xlat18 + u_xlat18;
    u_xlat0.xyz = u_xlat0.xyz * (-vec3(u_xlat18)) + (-u_xlat1.xyz);
    u_xlat10_0.x = texture(_Reflection, u_xlat0.xyz).x;
    u_xlat6.xyz = (-_ReflectionColor_Dark.xyz) + _ReflectionColor_Light.xyz;
    u_xlat0.xyz = u_xlat10_0.xxx * u_xlat6.xyz + _ReflectionColor_Dark.xyz;
    u_xlat18 = vs_TEXCOORD4.y * _ColorGradientRange + _ColorGradientOffset;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat1.xyz = (-_BottomColor.xyz) + _TopColor.xyz;
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz + _BottomColor.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.200000003, 0.200000003, 0.200000003);
    u_xlat0.xyz = u_xlat0.xyz * vec3(_ReflectionBrightness) + (-u_xlat1.xyz);
    u_xlat0.xyz = vec3(vec3(_ReflectionIntensity, _ReflectionIntensity, _ReflectionIntensity)) * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat1.xy = vs_TEXCOORD4.xy * _WaterfallTex01_ST.xy + _WaterfallTex01_ST.zw;
    u_xlat1.xy = vec2(u_xlat1.x * vs_TEXCOORD4.z, u_xlat1.y * vs_TEXCOORD4.w);
    u_xlat1.zw = _Time.yy * vec2(_WaterFall01_Speed, _Waterfall02_Speed) + u_xlat1.yy;
    u_xlat10_18 = texture(_WaterfallTex01, u_xlat1.xz).x;
    u_xlat10_13 = texture(_WaterfallTex01, u_xlat1.xw).y;
    u_xlat16_2.x = (-u_xlat10_18) + u_xlat10_13;
    u_xlat16_2.x = u_xlat10_13 * u_xlat16_2.x + u_xlat10_18;
    u_xlat18 = u_xlat10_18 * _Waterfall01Brightness;
    u_xlat3.xyz = u_xlat16_2.xxx * _WaterfallPatternColor.xyz + (-u_xlat0.xyz);
    u_xlat19 = u_xlat10_13 * _Waterfall02Brightness + (-u_xlat18);
    u_xlat13.x = u_xlat10_13 * _Waterfall02Brightness;
    u_xlat18 = u_xlat13.x * u_xlat19 + u_xlat18;
    u_xlat13.x = vs_TEXCOORD4.y * _SprayRange + _SprayOffset;
    u_xlat13.x = (-u_xlat13.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat13.x = min(max(u_xlat13.x, 0.0), 1.0);
#else
    u_xlat13.x = clamp(u_xlat13.x, 0.0, 1.0);
#endif
    u_xlat18 = u_xlat18 * u_xlat13.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * _DayColor.xyz;
    u_xlat13.xy = vs_TEXCOORD4.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat3.x = _Time.y * _Detail01_U_Speed + u_xlat13.x;
    u_xlat3.y = _Time.y * _Detail01_V_Speed + u_xlat13.y;
    u_xlat10_18 = texture(_NoiseTex, u_xlat3.xy).x;
    u_xlat16_2.x = vs_TEXCOORD4.w * 0.5;
    u_xlat13.xy = vs_TEXCOORD4.xy * _WaterfallSpecTex_ST.xy + _WaterfallSpecTex_ST.zw;
    u_xlat16_2.x = vs_TEXCOORD4.w * u_xlat13.y + (-u_xlat16_2.x);
    u_xlat3.x = u_xlat10_18 * _NoiselDistortionValue + u_xlat13.x;
    u_xlat3.y = u_xlat10_18 * _NoiselDistortionValue + u_xlat16_2.x;
    u_xlat10_18 = texture(_WaterfallSpecTex, u_xlat3.xy).x;
    u_xlat16_3.xyz = vec3(u_xlat10_18) * _WaterfallSpecColor.xyz;
    u_xlat13.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat10_18 = texture(_ShadowMapTexture, u_xlat13.xy).x;
    u_xlat13.x = (-_ShadowStrength) + 1.0;
    u_xlat18 = u_xlat10_18 * u_xlat13.x + _ShadowStrength;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat16_3.xyz;
    u_xlat13.xy = vec2(_Time.y * _FoamUVCoord01.z, _Time.y * _FoamUVCoord01.w);
    u_xlat13.xy = u_xlat1.xy * _FoamUVCoord01.xy + u_xlat13.xy;
    u_xlat10_18 = texture(_WaterfallTex01, u_xlat13.xy).x;
    u_xlat13.xy = vec2(_Time.y * _FoamUVCoord02.z, _Time.y * _FoamUVCoord02.w);
    u_xlat1.xy = u_xlat1.xy * _FoamUVCoord02.xy + u_xlat13.xy;
    u_xlat10_1 = texture(_WaterfallTex01, u_xlat1.xy).y;
    u_xlat16_18 = u_xlat10_18 + u_xlat10_1;
    u_xlat1.x = vs_TEXCOORD4.y * _FoamRange + _FoamOffset;
    u_xlat18 = u_xlat16_18 + u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat1.x = (-u_xlat1.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat18 * u_xlat1.x;
    u_xlat0.xyz = u_xlat1.xxx * _FoamColor.xyz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * _ES_MainLightColor.xyz;
    u_xlat16_1 = max(_LightColor0.w, 1.0);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16_1);
    u_xlat1.xyz = vs_TEXCOORD5.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat19 = u_xlat1.y * _HeigtFogParams.x;
    u_xlat3.x = u_xlat19 * -1.44269502;
    u_xlat3.x = exp2(u_xlat3.x);
    u_xlat3.x = (-u_xlat3.x) + 1.0;
    u_xlat3.x = u_xlat3.x / u_xlat19;
#ifdef UNITY_ADRENO_ES3
    u_xlatb19 = !!(0.00999999978<abs(u_xlat19));
#else
    u_xlatb19 = 0.00999999978<abs(u_xlat19);
#endif
    u_xlat16_2.x = (u_xlatb19) ? u_xlat3.x : 1.0;
    u_xlat19 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat19 = sqrt(u_xlat19);
    u_xlat3.x = u_xlat19 * _HeigtFogParams.y;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat3.x;
    u_xlat16_2.x = exp2((-u_xlat16_2.x));
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat3.x = u_xlat1.y * _HeigtFogParams2.x;
    u_xlat9.x = u_xlat3.x * -1.44269502;
    u_xlat9.x = exp2(u_xlat9.x);
    u_xlat9.x = (-u_xlat9.x) + 1.0;
    u_xlat9.x = u_xlat9.x / u_xlat3.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(0.00999999978<abs(u_xlat3.x));
#else
    u_xlatb3 = 0.00999999978<abs(u_xlat3.x);
#endif
    u_xlat16_8 = (u_xlatb3) ? u_xlat9.x : 1.0;
    u_xlat3.x = u_xlat19 * _HeigtFogParams2.y;
    u_xlat16_8 = u_xlat16_8 * u_xlat3.x;
    u_xlat16_8 = exp2((-u_xlat16_8));
    u_xlat16_2.y = (-u_xlat16_8) + 1.0;
    u_xlat16_2.xy = max(u_xlat16_2.xy, vec2(0.0, 0.0));
    u_xlat16_2.x = u_xlat16_2.y + u_xlat16_2.x;
    u_xlat3.x = u_xlat19 * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat3.x = min(max(u_xlat3.x, 0.0), 1.0);
#else
    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
#endif
    u_xlat16_8 = (-u_xlat3.x) + 2.0;
    u_xlat16_8 = u_xlat16_8 * u_xlat3.x;
    u_xlat3.x = u_xlat16_8 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat3.x = u_xlat3.x + 1.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat3.x;
    u_xlat3.x = min(u_xlat16_2.x, _HeigtFogColBase.w);
    u_xlat9.x = (-u_xlat3.x) + 1.0;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat4.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat4.xyz);
    u_xlat7.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!((-u_xlat1.x)>=u_xlat7.x);
#else
    u_xlatb1 = (-u_xlat1.x)>=u_xlat7.x;
#endif
    u_xlat7.x = u_xlat19 * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat13.x = u_xlat19 + (-_HeigtFogRamp.w);
    u_xlat13.x = u_xlat13.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat13.x = min(max(u_xlat13.x, 0.0), 1.0);
#else
    u_xlat13.x = clamp(u_xlat13.x, 0.0, 1.0);
#endif
    u_xlat19 = (-u_xlat7.x) + 2.0;
    u_xlat7.x = u_xlat19 * u_xlat7.x;
    u_xlat19 = u_xlat7.x * _HeigtFogColDelta.w;
    u_xlat1.x = (u_xlatb1) ? u_xlat19 : u_xlat7.x;
    u_xlat1.x = log2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * unity_FogColor.w;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat1.x = min(u_xlat1.x, _HeigtFogColBase.w);
    u_xlat7.x = vs_TEXCOORD5.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat16_2.x = (-u_xlat7.x) + 2.0;
    u_xlat16_2.x = u_xlat7.x * u_xlat16_2.x;
    u_xlat4.xyz = u_xlat16_2.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat5.xyz = (-u_xlat4.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat7.xyz = u_xlat13.xxx * u_xlat5.xyz + u_xlat4.xyz;
    u_xlat1.yzw = u_xlat1.xxx * u_xlat7.xyz;
    u_xlat1.x = (-u_xlat1.x) + 1.0;
    u_xlat1 = u_xlat9.xxxx * u_xlat1;
    u_xlat9.x = vs_TEXCOORD5.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat9.x = min(max(u_xlat9.x, 0.0), 1.0);
#else
    u_xlat9.x = clamp(u_xlat9.x, 0.0, 1.0);
#endif
    u_xlat9.xyz = u_xlat9.xxx * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    u_xlat7.xyz = u_xlat9.xyz * u_xlat3.xxx + u_xlat1.yzw;
    u_xlat1.xyz = u_xlat1.xxx * u_xlat0.xyz + u_xlat7.xyz;
    u_xlat0.x = vs_TEXCOORD4.y * _AlphaBottomRange + _AlphaBottomOffset;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(_BottomAlphaToggle==1.0);
#else
    u_xlatb6 = _BottomAlphaToggle==1.0;
#endif
    u_xlat0.x = (u_xlatb6) ? u_xlat0.x : 1.0;
    u_xlat6.x = vs_TEXCOORD4.y * _AlphaRange + _AlphaOffset;
    u_xlat6.x = (-u_xlat6.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat6.x = u_xlat6.x * _Opacity;
    u_xlat0.x = u_xlat0.x * u_xlat6.x;
    u_xlat1.w = u_xlat18 * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	mediump float _MHYZBias;
uniform 	vec4 hlslcc_mtx4x4_mhyJitteredVP[4];
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
vec3 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
bool u_xlatb3;
mediump vec3 u_xlat16_4;
float u_xlat5;
mediump vec4 u_xlat16_5;
vec3 u_xlat6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
float u_xlat11;
mediump float u_xlat16_12;
vec3 u_xlat13;
float u_xlat17;
bool u_xlatb17;
float u_xlat19;
float u_xlat24;
float u_xlat27;
bool u_xlatb27;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat8.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    u_xlat1.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position = u_xlat1;
    vs_TEXCOORD2.zw = u_xlat1.zw;
    vs_COLOR0 = in_COLOR0;
    u_xlat3.xyz = u_xlat8.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat17 = u_xlat3.y * _HeigtFogParams.x;
    u_xlat27 = u_xlat17 * -1.44269502;
    u_xlat27 = exp2(u_xlat27);
    u_xlat27 = (-u_xlat27) + 1.0;
    u_xlat27 = u_xlat27 / u_xlat17;
#ifdef UNITY_ADRENO_ES3
    u_xlatb17 = !!(0.00999999978<abs(u_xlat17));
#else
    u_xlatb17 = 0.00999999978<abs(u_xlat17);
#endif
    u_xlat16_4.x = (u_xlatb17) ? u_xlat27 : 1.0;
    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat17 = sqrt(u_xlat17);
    u_xlat27 = u_xlat17 * _HeigtFogParams.y;
    u_xlat16_4.x = u_xlat27 * u_xlat16_4.x;
    u_xlat16_4.x = exp2((-u_xlat16_4.x));
    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
    u_xlat27 = u_xlat3.y * _HeigtFogParams2.x;
    u_xlat5 = u_xlat27 * -1.44269502;
    u_xlat5 = exp2(u_xlat5);
    u_xlat5 = (-u_xlat5) + 1.0;
    u_xlat5 = u_xlat5 / u_xlat27;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(0.00999999978<abs(u_xlat27));
#else
    u_xlatb27 = 0.00999999978<abs(u_xlat27);
#endif
    u_xlat16_12 = (u_xlatb27) ? u_xlat5 : 1.0;
    u_xlat27 = u_xlat17 * _HeigtFogParams2.y;
    u_xlat16_12 = u_xlat27 * u_xlat16_12;
    u_xlat16_12 = exp2((-u_xlat16_12));
    u_xlat16_4.y = (-u_xlat16_12) + 1.0;
    u_xlat16_4.xy = max(u_xlat16_4.xy, vec2(0.0, 0.0));
    u_xlat16_4.x = u_xlat16_4.y + u_xlat16_4.x;
    u_xlat27 = u_xlat17 * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
    u_xlat16_12 = (-u_xlat27) + 2.0;
    u_xlat16_12 = u_xlat27 * u_xlat16_12;
    u_xlat27 = u_xlat16_12 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat27 = u_xlat27 + 1.0;
    u_xlat16_4.x = u_xlat27 * u_xlat16_4.x;
    u_xlat27 = min(u_xlat16_4.x, _HeigtFogColBase.w);
    u_xlat5 = (-u_xlat27) + 1.0;
    u_xlat13.x = _ProjectionParams.z * 0.999899983;
    u_xlat6.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat6.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat6.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat3.x = dot(u_xlat3.xyz, u_xlat6.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!((-u_xlat3.x)>=u_xlat13.x);
#else
    u_xlatb3 = (-u_xlat3.x)>=u_xlat13.x;
#endif
    u_xlat11 = u_xlat17 * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat11 = min(max(u_xlat11, 0.0), 1.0);
#else
    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
#endif
    u_xlat17 = u_xlat17 + (-_HeigtFogRamp.w);
    u_xlat17 = u_xlat17 * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat17 = min(max(u_xlat17, 0.0), 1.0);
#else
    u_xlat17 = clamp(u_xlat17, 0.0, 1.0);
#endif
    u_xlat19 = (-u_xlat11) + 2.0;
    u_xlat11 = u_xlat19 * u_xlat11;
    u_xlat19 = u_xlat11 * _HeigtFogColDelta.w;
    u_xlat3.x = (u_xlatb3) ? u_xlat19 : u_xlat11;
    u_xlat3.x = log2(u_xlat3.x);
    u_xlat3.x = u_xlat3.x * unity_FogColor.w;
    u_xlat3.x = exp2(u_xlat3.x);
    u_xlat3.x = min(u_xlat3.x, _HeigtFogColBase.w);
    u_xlat11 = u_xlat8.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat11 = min(max(u_xlat11, 0.0), 1.0);
#else
    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
#endif
    u_xlat16_4.x = (-u_xlat11) + 2.0;
    u_xlat16_4.x = u_xlat11 * u_xlat16_4.x;
    u_xlat13.xyz = u_xlat16_4.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat6.xyz = (-u_xlat13.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat13.xyz = vec3(u_xlat17) * u_xlat6.xyz + u_xlat13.xyz;
    u_xlat13.xyz = u_xlat3.xxx * u_xlat13.xyz;
    u_xlat17 = (-u_xlat3.x) + 1.0;
    vs_TEXCOORD0.w = u_xlat5 * u_xlat17;
    u_xlat3.xyz = vec3(u_xlat5) * u_xlat13.xyz;
    u_xlat17 = u_xlat8.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat17 = min(max(u_xlat17, 0.0), 1.0);
#else
    u_xlat17 = clamp(u_xlat17, 0.0, 1.0);
#endif
    vs_TEXCOORD5.xyz = u_xlat8.xyz;
    u_xlat8.xyz = vec3(u_xlat17) * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    vs_TEXCOORD0.xyz = u_xlat8.xyz * vec3(u_xlat27) + u_xlat3.xyz;
    u_xlat3.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat3.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat3.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat8.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat3.xyz = u_xlat8.xxx * u_xlat3.xyz;
    u_xlat16_4.x = u_xlat3.y * u_xlat3.y;
    u_xlat16_4.x = u_xlat3.x * u_xlat3.x + (-u_xlat16_4.x);
    u_xlat16_5 = u_xlat3.yzzx * u_xlat3.xyzz;
    u_xlat16_7.x = dot(unity_SHBr, u_xlat16_5);
    u_xlat16_7.y = dot(unity_SHBg, u_xlat16_5);
    u_xlat16_7.z = dot(unity_SHBb, u_xlat16_5);
    u_xlat16_4.xyz = unity_SHC.xyz * u_xlat16_4.xxx + u_xlat16_7.xyz;
    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat3.w = 1.0;
    u_xlat16_7.x = dot(unity_SHAr, u_xlat3);
    u_xlat16_7.y = dot(unity_SHAg, u_xlat3);
    u_xlat16_7.z = dot(unity_SHAb, u_xlat3);
    u_xlat16_4.xyz = u_xlat16_4.xyz + u_xlat16_7.xyz;
    vs_TEXCOORD1.xyz = u_xlat16_4.xyz;
    vs_TEXCOORD1.w = 1.0;
    u_xlat6.x = float(0.5);
    u_xlat6.z = float(0.5);
    u_xlat6.y = _ProjectionParams.x;
    u_xlat1.xyz = u_xlat1.xyw * u_xlat6.xyz;
    u_xlat1.w = u_xlat1.y * 0.5;
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4_mhyJitteredVP[1];
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[3] * u_xlat2.wwww + u_xlat1;
    u_xlat2.xyz = vec3(u_xlat6.z * u_xlat1.x, u_xlat6.y * u_xlat1.y, u_xlat6.z * u_xlat1.w);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    u_xlat2.w = u_xlat2.y * 0.5;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy;
    u_xlat8.x = dot(unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz);
    vs_TEXCOORD4.z = sqrt(u_xlat8.x);
    u_xlat8.x = dot(unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz);
    vs_TEXCOORD4.w = sqrt(u_xlat8.x);
    vs_TEXCOORD5.w = 0.0;
    u_xlat8.xyz = in_TANGENT0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat8.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_TANGENT0.xxx + u_xlat8.xyz;
    u_xlat0.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_TANGENT0.zzz + u_xlat8.xyz;
    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat0.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    vs_TEXCOORD6.xyz = u_xlat0.xyz;
    vs_TEXCOORD6.w = 0.0;
    vs_TEXCOORD7.xyz = u_xlat3.xyz;
    vs_TEXCOORD7.w = 0.0;
    u_xlat1.xyz = u_xlat0.yzx * u_xlat3.zxy;
    u_xlat0.xyz = u_xlat3.yzx * u_xlat0.zxy + (-u_xlat1.xyz);
    u_xlat24 = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD8.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    vs_TEXCOORD8.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	mediump vec4 _LightColor0;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	float _AlphaRange;
uniform 	float _AlphaOffset;
uniform 	float _Opacity;
uniform 	mediump float _BottomAlphaToggle;
uniform 	float _AlphaBottomRange;
uniform 	float _AlphaBottomOffset;
uniform 	vec4 _WaterfallTex01_ST;
uniform 	mediump vec4 _FoamUVCoord01;
uniform 	mediump vec4 _FoamUVCoord02;
uniform 	float _FoamRange;
uniform 	float _FoamOffset;
uniform 	vec4 _DayColor;
uniform 	vec4 _BottomColor;
uniform 	vec4 _TopColor;
uniform 	float _ColorGradientRange;
uniform 	float _ColorGradientOffset;
uniform 	vec4 _ReflectionColor_Dark;
uniform 	vec4 _ReflectionColor_Light;
uniform 	float _Normal01_U_Speed;
uniform 	vec4 _Normal01_ST;
uniform 	float _Normal01_VSpeed;
uniform 	float _Normal02_U_Speed;
uniform 	vec4 _Normal02_ST;
uniform 	float _Normal02_V_Speed;
uniform 	vec4 _DistortionIntensity;
uniform 	float _ReflectionBrightness;
uniform 	float _ReflectionIntensity;
uniform 	float _WaterFall01_Speed;
uniform 	float _Waterfall02_Speed;
uniform 	mediump vec4 _WaterfallPatternColor;
uniform 	float _Waterfall01Brightness;
uniform 	float _Waterfall02Brightness;
uniform 	float _SprayRange;
uniform 	float _SprayOffset;
uniform 	float _ShadowStrength;
uniform 	vec4 _WaterfallSpecTex_ST;
uniform 	float _Detail01_U_Speed;
uniform 	vec4 _NoiseTex_ST;
uniform 	float _Detail01_V_Speed;
uniform 	float _NoiselDistortionValue;
uniform 	mediump vec4 _WaterfallSpecColor;
uniform 	mediump vec4 _FoamColor;
uniform 	vec3 _ES_MainLightColor;
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _WaterfallTex01;
uniform lowp sampler2D _Normal01;
uniform lowp sampler2D _Normal02;
uniform lowp samplerCube _Reflection;
uniform lowp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _WaterfallSpecTex;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
in highp vec4 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
lowp vec3 u_xlat10_0;
vec4 u_xlat1;
mediump float u_xlat16_1;
lowp float u_xlat10_1;
bool u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
bool u_xlatb3;
vec3 u_xlat4;
vec3 u_xlat5;
vec3 u_xlat6;
float u_xlat7;
mediump float u_xlat16_8;
float u_xlat9;
bool u_xlatb9;
float u_xlat12;
bool u_xlatb12;
vec2 u_xlat13;
lowp float u_xlat10_13;
float u_xlat15;
float u_xlat18;
mediump float u_xlat16_18;
lowp float u_xlat10_18;
float u_xlat19;
lowp float u_xlat10_21;
void main()
{
    u_xlat0.xy = vs_TEXCOORD4.xy * _Normal01_ST.xy + _Normal01_ST.zw;
    u_xlat0.x = u_xlat0.x * vs_TEXCOORD4.z;
    u_xlat1.x = _Time.y * _Normal01_U_Speed + u_xlat0.x;
    u_xlat0.x = _Time.y * _Normal01_VSpeed;
    u_xlat1.y = u_xlat0.y * vs_TEXCOORD4.w + u_xlat0.x;
    u_xlat10_0.xyz = texture(_Normal01, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xy = vs_TEXCOORD4.xy * _Normal02_ST.xy + _Normal02_ST.zw;
    u_xlat0.xy = vec2(u_xlat0.x * vs_TEXCOORD4.z, u_xlat0.y * vs_TEXCOORD4.w);
    u_xlat1.x = _Time.y * _Normal02_U_Speed + u_xlat0.x;
    u_xlat1.y = _Time.y * _Normal02_V_Speed + u_xlat0.y;
    u_xlat10_0.xyz = texture(_Normal02, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_2.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = u_xlat16_2.xyz * _DistortionIntensity.xyz;
    u_xlat1.x = vs_TEXCOORD6.x;
    u_xlat1.y = vs_TEXCOORD8.x;
    u_xlat1.z = vs_TEXCOORD7.x;
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat3.x = vs_TEXCOORD6.y;
    u_xlat3.y = vs_TEXCOORD8.y;
    u_xlat3.z = vs_TEXCOORD7.y;
    u_xlat1.y = dot(u_xlat3.xyz, u_xlat0.xyz);
    u_xlat3.x = vs_TEXCOORD6.z;
    u_xlat3.y = vs_TEXCOORD8.z;
    u_xlat3.z = vs_TEXCOORD7.z;
    u_xlat1.z = dot(u_xlat3.xyz, u_xlat0.xyz);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
    u_xlat18 = dot((-u_xlat1.xyz), u_xlat0.xyz);
    u_xlat18 = u_xlat18 + u_xlat18;
    u_xlat0.xyz = u_xlat0.xyz * (-vec3(u_xlat18)) + (-u_xlat1.xyz);
    u_xlat10_0.x = texture(_Reflection, u_xlat0.xyz).x;
    u_xlat6.xyz = (-_ReflectionColor_Dark.xyz) + _ReflectionColor_Light.xyz;
    u_xlat0.xyz = u_xlat10_0.xxx * u_xlat6.xyz + _ReflectionColor_Dark.xyz;
    u_xlat18 = vs_TEXCOORD4.y * _ColorGradientRange + _ColorGradientOffset;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat1.xyz = (-_BottomColor.xyz) + _TopColor.xyz;
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz + _BottomColor.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.200000003, 0.200000003, 0.200000003);
    u_xlat0.xyz = u_xlat0.xyz * vec3(_ReflectionBrightness) + (-u_xlat1.xyz);
    u_xlat0.xyz = vec3(vec3(_ReflectionIntensity, _ReflectionIntensity, _ReflectionIntensity)) * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat1.xy = vs_TEXCOORD4.xy * _WaterfallTex01_ST.xy + _WaterfallTex01_ST.zw;
    u_xlat1.xy = vec2(u_xlat1.x * vs_TEXCOORD4.z, u_xlat1.y * vs_TEXCOORD4.w);
    u_xlat1.zw = _Time.yy * vec2(_WaterFall01_Speed, _Waterfall02_Speed) + u_xlat1.yy;
    u_xlat10_18 = texture(_WaterfallTex01, u_xlat1.xz).x;
    u_xlat10_13 = texture(_WaterfallTex01, u_xlat1.xw).y;
    u_xlat16_2.x = (-u_xlat10_18) + u_xlat10_13;
    u_xlat16_2.x = u_xlat10_13 * u_xlat16_2.x + u_xlat10_18;
    u_xlat18 = u_xlat10_18 * _Waterfall01Brightness;
    u_xlat3.xyz = u_xlat16_2.xxx * _WaterfallPatternColor.xyz + (-u_xlat0.xyz);
    u_xlat19 = u_xlat10_13 * _Waterfall02Brightness + (-u_xlat18);
    u_xlat13.x = u_xlat10_13 * _Waterfall02Brightness;
    u_xlat18 = u_xlat13.x * u_xlat19 + u_xlat18;
    u_xlat13.x = vs_TEXCOORD4.y * _SprayRange + _SprayOffset;
    u_xlat13.x = (-u_xlat13.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat13.x = min(max(u_xlat13.x, 0.0), 1.0);
#else
    u_xlat13.x = clamp(u_xlat13.x, 0.0, 1.0);
#endif
    u_xlat18 = u_xlat18 * u_xlat13.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * _DayColor.xyz;
    u_xlat13.xy = vs_TEXCOORD4.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat3.x = _Time.y * _Detail01_U_Speed + u_xlat13.x;
    u_xlat3.y = _Time.y * _Detail01_V_Speed + u_xlat13.y;
    u_xlat10_18 = texture(_NoiseTex, u_xlat3.xy).x;
    u_xlat16_2.x = vs_TEXCOORD4.w * 0.5;
    u_xlat13.xy = vs_TEXCOORD4.xy * _WaterfallSpecTex_ST.xy + _WaterfallSpecTex_ST.zw;
    u_xlat16_2.x = vs_TEXCOORD4.w * u_xlat13.y + (-u_xlat16_2.x);
    u_xlat3.x = u_xlat10_18 * _NoiselDistortionValue + u_xlat13.x;
    u_xlat3.y = u_xlat10_18 * _NoiselDistortionValue + u_xlat16_2.x;
    u_xlat10_18 = texture(_WaterfallSpecTex, u_xlat3.xy).x;
    u_xlat16_3.xyz = vec3(u_xlat10_18) * _WaterfallSpecColor.xyz;
    u_xlat18 = (-_ShadowStrength) + 1.0;
    u_xlat13.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat10_21 = texture(_ShadowMapTexture, u_xlat13.xy).x;
    u_xlat13.x = texture(_CameraDepthTextureScaled, u_xlat13.xy).x;
    u_xlat13.x = u_xlat13.x * _ProjectionParams.z + (-vs_TEXCOORD3.w);
    u_xlat18 = u_xlat10_21 * u_xlat18 + _ShadowStrength;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat16_3.xyz;
    u_xlat3.xy = vec2(_Time.y * _FoamUVCoord01.z, _Time.y * _FoamUVCoord01.w);
    u_xlat3.xy = u_xlat1.xy * _FoamUVCoord01.xy + u_xlat3.xy;
    u_xlat10_18 = texture(_WaterfallTex01, u_xlat3.xy).x;
    u_xlat3.xy = vec2(_Time.y * _FoamUVCoord02.z, _Time.y * _FoamUVCoord02.w);
    u_xlat1.xy = u_xlat1.xy * _FoamUVCoord02.xy + u_xlat3.xy;
    u_xlat10_1 = texture(_WaterfallTex01, u_xlat1.xy).y;
    u_xlat16_18 = u_xlat10_18 + u_xlat10_1;
    u_xlat1.x = vs_TEXCOORD4.y * _FoamRange + _FoamOffset;
    u_xlat18 = u_xlat16_18 + u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat1.x = (-u_xlat1.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat18 * u_xlat1.x;
    u_xlat0.xyz = u_xlat1.xxx * _FoamColor.xyz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * _ES_MainLightColor.xyz;
    u_xlat16_1 = max(_LightColor0.w, 1.0);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16_1);
    u_xlat1.xyw = vs_TEXCOORD5.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat3.x = u_xlat1.y * _HeigtFogParams.x;
    u_xlat9 = u_xlat3.x * -1.44269502;
    u_xlat9 = exp2(u_xlat9);
    u_xlat9 = (-u_xlat9) + 1.0;
    u_xlat9 = u_xlat9 / u_xlat3.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(0.00999999978<abs(u_xlat3.x));
#else
    u_xlatb3 = 0.00999999978<abs(u_xlat3.x);
#endif
    u_xlat16_2.x = (u_xlatb3) ? u_xlat9 : 1.0;
    u_xlat3.x = dot(u_xlat1.xyw, u_xlat1.xyw);
    u_xlat3.x = sqrt(u_xlat3.x);
    u_xlat9 = u_xlat3.x * _HeigtFogParams.y;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat9;
    u_xlat16_2.x = exp2((-u_xlat16_2.x));
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat9 = u_xlat1.y * _HeigtFogParams2.x;
    u_xlat15 = u_xlat9 * -1.44269502;
    u_xlat15 = exp2(u_xlat15);
    u_xlat15 = (-u_xlat15) + 1.0;
    u_xlat15 = u_xlat15 / u_xlat9;
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(0.00999999978<abs(u_xlat9));
#else
    u_xlatb9 = 0.00999999978<abs(u_xlat9);
#endif
    u_xlat16_8 = (u_xlatb9) ? u_xlat15 : 1.0;
    u_xlat9 = u_xlat3.x * _HeigtFogParams2.y;
    u_xlat16_8 = u_xlat16_8 * u_xlat9;
    u_xlat16_8 = exp2((-u_xlat16_8));
    u_xlat16_2.y = (-u_xlat16_8) + 1.0;
    u_xlat16_2.xy = max(u_xlat16_2.xy, vec2(0.0, 0.0));
    u_xlat16_2.x = u_xlat16_2.y + u_xlat16_2.x;
    u_xlat9 = u_xlat3.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat9 = min(max(u_xlat9, 0.0), 1.0);
#else
    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
#endif
    u_xlat16_8 = (-u_xlat9) + 2.0;
    u_xlat16_8 = u_xlat16_8 * u_xlat9;
    u_xlat9 = u_xlat16_8 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat9 = u_xlat9 + 1.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat9;
    u_xlat9 = min(u_xlat16_2.x, _HeigtFogColBase.w);
    u_xlat15 = (-u_xlat9) + 1.0;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat4.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat1.x = dot(u_xlat1.xyw, u_xlat4.xyz);
    u_xlat7 = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!((-u_xlat1.x)>=u_xlat7);
#else
    u_xlatb1 = (-u_xlat1.x)>=u_xlat7;
#endif
    u_xlat7 = u_xlat3.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7 = min(max(u_xlat7, 0.0), 1.0);
#else
    u_xlat7 = clamp(u_xlat7, 0.0, 1.0);
#endif
    u_xlat19 = u_xlat3.x + (-_HeigtFogRamp.w);
    u_xlat19 = u_xlat19 * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat19 = min(max(u_xlat19, 0.0), 1.0);
#else
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
#endif
    u_xlat3.x = (-u_xlat7) + 2.0;
    u_xlat7 = u_xlat7 * u_xlat3.x;
    u_xlat3.x = u_xlat7 * _HeigtFogColDelta.w;
    u_xlat1.x = (u_xlatb1) ? u_xlat3.x : u_xlat7;
    u_xlat1.x = log2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * unity_FogColor.w;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat1.x = min(u_xlat1.x, _HeigtFogColBase.w);
    u_xlat7 = vs_TEXCOORD5.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat7 = min(max(u_xlat7, 0.0), 1.0);
#else
    u_xlat7 = clamp(u_xlat7, 0.0, 1.0);
#endif
    u_xlat16_2.x = (-u_xlat7) + 2.0;
    u_xlat16_2.x = u_xlat7 * u_xlat16_2.x;
    u_xlat4.xyz = u_xlat16_2.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat5.xyz = (-u_xlat4.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat4.xyz = vec3(u_xlat19) * u_xlat5.xyz + u_xlat4.xyz;
    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
    u_xlat1.x = (-u_xlat1.x) + 1.0;
    u_xlat1.x = u_xlat15 * u_xlat1.x;
    u_xlat3.xzw = vec3(u_xlat15) * u_xlat4.xyz;
    u_xlat7 = vs_TEXCOORD5.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat7 = min(max(u_xlat7, 0.0), 1.0);
#else
    u_xlat7 = clamp(u_xlat7, 0.0, 1.0);
#endif
    u_xlat4.xyz = vec3(u_xlat7) * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    u_xlat3.xyz = u_xlat4.xyz * vec3(u_xlat9) + u_xlat3.xzw;
    u_xlat2.xyz = u_xlat1.xxx * u_xlat0.xyz + u_xlat3.xyz;
    u_xlat0.x = u_xlat13.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat6.x = u_xlat13.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat12 = (-u_xlat6.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat12 + u_xlat6.x;
    u_xlat6.x = vs_TEXCOORD4.y * _AlphaRange + _AlphaOffset;
    u_xlat6.x = (-u_xlat6.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat6.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _Opacity;
    u_xlat6.x = vs_TEXCOORD4.y * _AlphaBottomRange + _AlphaBottomOffset;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_BottomAlphaToggle==1.0);
#else
    u_xlatb12 = _BottomAlphaToggle==1.0;
#endif
    u_xlat6.x = (u_xlatb12) ? u_xlat6.x : 1.0;
    u_xlat0.x = u_xlat6.x * u_xlat0.x;
    u_xlat2.w = u_xlat18 * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.w = min(max(u_xlat2.w, 0.0), 1.0);
#else
    u_xlat2.w = clamp(u_xlat2.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat2;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	mediump float _MHYZBias;
uniform 	vec4 hlslcc_mtx4x4_mhyJitteredVP[4];
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
mediump vec4 u_xlat16_3;
bool u_xlatb3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat6;
mediump vec3 u_xlat16_7;
float u_xlat11;
mediump float u_xlat16_12;
float u_xlat18;
bool u_xlatb18;
float u_xlat19;
float u_xlat24;
bool u_xlatb24;
float u_xlat27;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat2.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    gl_Position = u_xlat2;
    vs_TEXCOORD2.zw = u_xlat2.zw;
    vs_COLOR0 = in_COLOR0;
    u_xlat3.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat24 = u_xlat3.y * _HeigtFogParams.x;
    u_xlat18 = u_xlat24 * -1.44269502;
    u_xlat18 = exp2(u_xlat18);
    u_xlat18 = (-u_xlat18) + 1.0;
    u_xlat18 = u_xlat18 / u_xlat24;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(0.00999999978<abs(u_xlat24));
#else
    u_xlatb24 = 0.00999999978<abs(u_xlat24);
#endif
    u_xlat16_4.x = (u_xlatb24) ? u_xlat18 : 1.0;
    u_xlat24 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat24 = sqrt(u_xlat24);
    u_xlat18 = u_xlat24 * _HeigtFogParams.y;
    u_xlat16_4.x = u_xlat18 * u_xlat16_4.x;
    u_xlat16_4.x = exp2((-u_xlat16_4.x));
    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
    u_xlat18 = u_xlat3.y * _HeigtFogParams2.x;
    u_xlat27 = u_xlat18 * -1.44269502;
    u_xlat27 = exp2(u_xlat27);
    u_xlat27 = (-u_xlat27) + 1.0;
    u_xlat27 = u_xlat27 / u_xlat18;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(0.00999999978<abs(u_xlat18));
#else
    u_xlatb18 = 0.00999999978<abs(u_xlat18);
#endif
    u_xlat16_12 = (u_xlatb18) ? u_xlat27 : 1.0;
    u_xlat18 = u_xlat24 * _HeigtFogParams2.y;
    u_xlat16_12 = u_xlat18 * u_xlat16_12;
    u_xlat16_12 = exp2((-u_xlat16_12));
    u_xlat16_4.y = (-u_xlat16_12) + 1.0;
    u_xlat16_4.xy = max(u_xlat16_4.xy, vec2(0.0, 0.0));
    u_xlat16_4.x = u_xlat16_4.y + u_xlat16_4.x;
    u_xlat18 = u_xlat24 * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat16_12 = (-u_xlat18) + 2.0;
    u_xlat16_12 = u_xlat18 * u_xlat16_12;
    u_xlat18 = u_xlat16_12 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat18 = u_xlat18 + 1.0;
    u_xlat16_4.x = u_xlat18 * u_xlat16_4.x;
    u_xlat18 = min(u_xlat16_4.x, _HeigtFogColBase.w);
    u_xlat27 = (-u_xlat18) + 1.0;
    u_xlat5.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat5.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat5.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat3.x = dot(u_xlat3.xyz, u_xlat5.xyz);
    u_xlat11 = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!((-u_xlat3.x)>=u_xlat11);
#else
    u_xlatb3 = (-u_xlat3.x)>=u_xlat11;
#endif
    u_xlat11 = u_xlat24 * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat11 = min(max(u_xlat11, 0.0), 1.0);
#else
    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
#endif
    u_xlat24 = u_xlat24 + (-_HeigtFogRamp.w);
    u_xlat24 = u_xlat24 * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat19 = (-u_xlat11) + 2.0;
    u_xlat11 = u_xlat19 * u_xlat11;
    u_xlat19 = u_xlat11 * _HeigtFogColDelta.w;
    u_xlat3.x = (u_xlatb3) ? u_xlat19 : u_xlat11;
    u_xlat3.x = log2(u_xlat3.x);
    u_xlat3.x = u_xlat3.x * unity_FogColor.w;
    u_xlat3.x = exp2(u_xlat3.x);
    u_xlat3.x = min(u_xlat3.x, _HeigtFogColBase.w);
    u_xlat11 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat11 = min(max(u_xlat11, 0.0), 1.0);
#else
    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
#endif
    u_xlat16_4.x = (-u_xlat11) + 2.0;
    u_xlat16_4.x = u_xlat11 * u_xlat16_4.x;
    u_xlat5.xyz = u_xlat16_4.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat6.xyz = (-u_xlat5.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat5.xyz = vec3(u_xlat24) * u_xlat6.xyz + u_xlat5.xyz;
    u_xlat5.xyz = u_xlat3.xxx * u_xlat5.xyz;
    u_xlat24 = (-u_xlat3.x) + 1.0;
    vs_TEXCOORD0.w = u_xlat27 * u_xlat24;
    u_xlat3.xyz = vec3(u_xlat27) * u_xlat5.xyz;
    u_xlat24 = u_xlat0.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    u_xlat0.xyz = vec3(u_xlat24) * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    vs_TEXCOORD0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat3.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat0.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    u_xlat16_4.x = u_xlat0.y * u_xlat0.y;
    u_xlat16_4.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_4.x);
    u_xlat16_3 = u_xlat0.yzzx * u_xlat0.xyzz;
    u_xlat16_7.x = dot(unity_SHBr, u_xlat16_3);
    u_xlat16_7.y = dot(unity_SHBg, u_xlat16_3);
    u_xlat16_7.z = dot(unity_SHBb, u_xlat16_3);
    u_xlat16_4.xyz = unity_SHC.xyz * u_xlat16_4.xxx + u_xlat16_7.xyz;
    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat0.w = 1.0;
    u_xlat16_7.x = dot(unity_SHAr, u_xlat0);
    u_xlat16_7.y = dot(unity_SHAg, u_xlat0);
    u_xlat16_7.z = dot(unity_SHAb, u_xlat0);
    u_xlat16_4.xyz = u_xlat16_4.xyz + u_xlat16_7.xyz;
    vs_TEXCOORD1.xyz = u_xlat16_4.xyz;
    vs_TEXCOORD1.w = 1.0;
    u_xlat5.x = float(0.5);
    u_xlat5.z = float(0.5);
    u_xlat5.y = _ProjectionParams.x;
    u_xlat2.xyz = u_xlat2.xyw * u_xlat5.xyz;
    u_xlat2.w = u_xlat2.y * 0.5;
    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4_mhyJitteredVP[1];
    u_xlat2 = hlslcc_mtx4x4_mhyJitteredVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4_mhyJitteredVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat2.xyz = vec3(u_xlat5.z * u_xlat1.x, u_xlat5.y * u_xlat1.y, u_xlat5.z * u_xlat1.w);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    u_xlat2.w = u_xlat2.y * 0.5;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat24 = dot(hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, hlslcc_mtx4x4unity_ObjectToWorld[0].xyz);
    vs_TEXCOORD4.z = sqrt(u_xlat24);
    u_xlat24 = dot(hlslcc_mtx4x4unity_ObjectToWorld[1].xyz, hlslcc_mtx4x4unity_ObjectToWorld[1].xyz);
    vs_TEXCOORD4.w = sqrt(u_xlat24);
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD5.w = 0.0;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
    vs_TEXCOORD6.xyz = u_xlat1.xyz;
    vs_TEXCOORD6.w = 0.0;
    vs_TEXCOORD7.xyz = u_xlat0.xyz;
    vs_TEXCOORD7.w = 0.0;
    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
    u_xlat24 = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD8.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    vs_TEXCOORD8.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _LightColor0;
uniform 	float _AlphaRange;
uniform 	float _AlphaOffset;
uniform 	float _Opacity;
uniform 	mediump float _BottomAlphaToggle;
uniform 	float _AlphaBottomRange;
uniform 	float _AlphaBottomOffset;
uniform 	vec4 _WaterfallTex01_ST;
uniform 	mediump vec4 _FoamUVCoord01;
uniform 	mediump vec4 _FoamUVCoord02;
uniform 	float _FoamRange;
uniform 	float _FoamOffset;
uniform 	vec4 _DayColor;
uniform 	vec4 _BottomColor;
uniform 	vec4 _TopColor;
uniform 	float _ColorGradientRange;
uniform 	float _ColorGradientOffset;
uniform 	vec4 _ReflectionColor_Dark;
uniform 	vec4 _ReflectionColor_Light;
uniform 	float _Normal01_U_Speed;
uniform 	vec4 _Normal01_ST;
uniform 	float _Normal01_VSpeed;
uniform 	float _Normal02_U_Speed;
uniform 	vec4 _Normal02_ST;
uniform 	float _Normal02_V_Speed;
uniform 	vec4 _DistortionIntensity;
uniform 	float _ReflectionBrightness;
uniform 	float _ReflectionIntensity;
uniform 	float _WaterFall01_Speed;
uniform 	float _Waterfall02_Speed;
uniform 	mediump vec4 _WaterfallPatternColor;
uniform 	float _Waterfall01Brightness;
uniform 	float _Waterfall02Brightness;
uniform 	float _SprayRange;
uniform 	float _SprayOffset;
uniform 	float _ShadowStrength;
uniform 	vec4 _WaterfallSpecTex_ST;
uniform 	float _Detail01_U_Speed;
uniform 	vec4 _NoiseTex_ST;
uniform 	float _Detail01_V_Speed;
uniform 	float _NoiselDistortionValue;
uniform 	mediump vec4 _WaterfallSpecColor;
uniform 	mediump vec4 _FoamColor;
uniform 	vec3 _ES_MainLightColor;
uniform lowp sampler2D _WaterfallTex01;
uniform lowp sampler2D _Normal01;
uniform lowp sampler2D _Normal02;
uniform lowp samplerCube _Reflection;
uniform lowp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _WaterfallSpecTex;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
in highp vec4 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
bvec2 u_xlatb0;
vec4 u_xlat1;
lowp float u_xlat10_1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
vec4 u_xlat3;
vec3 u_xlat4;
lowp vec3 u_xlat10_4;
vec3 u_xlat5;
vec3 u_xlat6;
mediump vec3 u_xlat16_7;
float u_xlat8;
vec3 u_xlat9;
vec3 u_xlat10;
mediump float u_xlat16_15;
vec2 u_xlat16;
mediump float u_xlat16_16;
lowp float u_xlat10_16;
bool u_xlatb16;
float u_xlat18;
float u_xlat24;
mediump float u_xlat16_24;
lowp float u_xlat10_24;
bool u_xlatb24;
float u_xlat25;
lowp float u_xlat10_25;
bool u_xlatb25;
float u_xlat26;
bool u_xlatb26;
float u_xlat27;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.x = vs_TEXCOORD4.y * _AlphaRange + _AlphaOffset;
    u_xlat8 = vs_TEXCOORD4.y * _AlphaBottomRange + _AlphaBottomOffset;
#ifdef UNITY_ADRENO_ES3
    u_xlat8 = min(max(u_xlat8, 0.0), 1.0);
#else
    u_xlat8 = clamp(u_xlat8, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(_BottomAlphaToggle==1.0);
#else
    u_xlatb16 = _BottomAlphaToggle==1.0;
#endif
    u_xlat8 = (u_xlatb16) ? u_xlat8 : 1.0;
    u_xlat16.xy = vs_TEXCOORD4.xy * _WaterfallTex01_ST.xy + _WaterfallTex01_ST.zw;
    u_xlat1.xy = vec2(u_xlat16.x * vs_TEXCOORD4.z, u_xlat16.y * vs_TEXCOORD4.w);
    u_xlat16.xy = vec2(_Time.y * _FoamUVCoord01.z, _Time.y * _FoamUVCoord01.w);
    u_xlat16.xy = u_xlat1.xy * _FoamUVCoord01.xy + u_xlat16.xy;
    u_xlat2.xy = vec2(_Time.y * _FoamUVCoord02.z, _Time.y * _FoamUVCoord02.w);
    u_xlat2.xy = u_xlat1.xy * _FoamUVCoord02.xy + u_xlat2.xy;
    u_xlat18 = vs_TEXCOORD4.y * _FoamRange + _FoamOffset;
    u_xlat10_16 = texture(_WaterfallTex01, u_xlat16.xy).x;
    u_xlat10_24 = texture(_WaterfallTex01, u_xlat2.xy).y;
    u_xlat16_16 = u_xlat10_24 + u_xlat10_16;
    u_xlat16.x = u_xlat18 + u_xlat16_16;
#ifdef UNITY_ADRENO_ES3
    u_xlat16.x = min(max(u_xlat16.x, 0.0), 1.0);
#else
    u_xlat16.x = clamp(u_xlat16.x, 0.0, 1.0);
#endif
    u_xlat24 = vs_TEXCOORD4.y * _ColorGradientRange + _ColorGradientOffset;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat2.xyw = (-_BottomColor.xyz) + _TopColor.xyz;
    u_xlat2.xyw = vec3(u_xlat24) * u_xlat2.xyw + _BottomColor.xyz;
    u_xlat3.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat24 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat3.xyz = vec3(u_xlat24) * u_xlat3.xyz;
    u_xlat4.xy = vs_TEXCOORD4.xy * _Normal01_ST.xy + _Normal01_ST.zw;
    u_xlat24 = _Time.y * _Normal01_VSpeed;
    u_xlat27 = u_xlat4.x * vs_TEXCOORD4.z;
    u_xlat5.x = _Time.y * _Normal01_U_Speed + u_xlat27;
    u_xlat5.y = u_xlat4.y * vs_TEXCOORD4.w + u_xlat24;
    u_xlat4.xy = vs_TEXCOORD4.xy * _Normal02_ST.xy + _Normal02_ST.zw;
    u_xlat4.xy = vec2(u_xlat4.x * vs_TEXCOORD4.z, u_xlat4.y * vs_TEXCOORD4.w);
    u_xlat6.x = _Time.y * _Normal02_U_Speed + u_xlat4.x;
    u_xlat6.y = _Time.y * _Normal02_V_Speed + u_xlat4.y;
    u_xlat10_4.xyz = texture(_Normal01, u_xlat5.xy).xyz;
    u_xlat16_7.xyz = u_xlat10_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat10_4.xyz = texture(_Normal02, u_xlat6.xy).xyz;
    u_xlat16_7.xyz = u_xlat10_4.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_7.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat4.xyz = u_xlat16_7.xyz * _DistortionIntensity.xyz;
    u_xlat5.x = vs_TEXCOORD6.x;
    u_xlat5.y = vs_TEXCOORD8.x;
    u_xlat5.z = vs_TEXCOORD7.x;
    u_xlat5.x = dot(u_xlat5.xyz, u_xlat4.xyz);
    u_xlat6.x = vs_TEXCOORD6.y;
    u_xlat6.y = vs_TEXCOORD8.y;
    u_xlat6.z = vs_TEXCOORD7.y;
    u_xlat5.y = dot(u_xlat6.xyz, u_xlat4.xyz);
    u_xlat6.x = vs_TEXCOORD6.z;
    u_xlat6.y = vs_TEXCOORD8.z;
    u_xlat6.z = vs_TEXCOORD7.z;
    u_xlat5.z = dot(u_xlat6.xyz, u_xlat4.xyz);
    u_xlat24 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat4.xyz = vec3(u_xlat24) * u_xlat5.xyz;
    u_xlat24 = dot((-u_xlat3.xyz), u_xlat4.xyz);
    u_xlat24 = u_xlat24 + u_xlat24;
    u_xlat3.xyz = u_xlat4.xyz * (-vec3(u_xlat24)) + (-u_xlat3.xyz);
    u_xlat10_24 = texture(_Reflection, u_xlat3.xyz).x;
    u_xlat3.xyz = (-_ReflectionColor_Dark.xyz) + _ReflectionColor_Light.xyz;
    u_xlat3.xyz = vec3(u_xlat10_24) * u_xlat3.xyz + _ReflectionColor_Dark.xyz;
    u_xlat4.xyz = u_xlat2.xyw * vec3(0.200000003, 0.200000003, 0.200000003);
    u_xlat2.xyw = u_xlat2.xyw * u_xlat3.xyz;
    u_xlat2.xyw = u_xlat2.xyw * vec3(_ReflectionBrightness) + (-u_xlat4.xyz);
    u_xlat2.xyw = vec3(vec3(_ReflectionIntensity, _ReflectionIntensity, _ReflectionIntensity)) * u_xlat2.xyw + u_xlat4.xyz;
    u_xlat1.zw = _Time.yy * vec2(_WaterFall01_Speed, _Waterfall02_Speed) + u_xlat1.yy;
    u_xlat10_24 = texture(_WaterfallTex01, u_xlat1.xz).x;
    u_xlat10_1 = texture(_WaterfallTex01, u_xlat1.xw).y;
    u_xlat16_7.x = (-u_xlat10_24) + u_xlat10_1;
    u_xlat16_7.x = u_xlat10_1 * u_xlat16_7.x + u_xlat10_24;
    u_xlat9.x = u_xlat10_1 * _Waterfall02Brightness;
    u_xlat24 = u_xlat10_24 * _Waterfall01Brightness;
    u_xlat1.x = u_xlat10_1 * _Waterfall02Brightness + (-u_xlat24);
    u_xlat24 = u_xlat9.x * u_xlat1.x + u_xlat24;
    u_xlat1.x = vs_TEXCOORD4.y * _SprayRange + _SprayOffset;
    u_xlat1.x = (-u_xlat1.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat24 = u_xlat24 * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat16_7.xxx * _WaterfallPatternColor.xyz + (-u_xlat2.xyw);
    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz + u_xlat2.xyw;
    u_xlat2.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat10_24 = texture(_ShadowMapTexture, u_xlat2.xy).x;
    u_xlat25 = (-_ShadowStrength) + 1.0;
    u_xlat24 = u_xlat10_24 * u_xlat25 + _ShadowStrength;
    u_xlat2.xy = vs_TEXCOORD4.xy * _WaterfallSpecTex_ST.xy + _WaterfallSpecTex_ST.zw;
    u_xlat16_7.x = vs_TEXCOORD4.w * 0.5;
    u_xlat16_7.x = vs_TEXCOORD4.w * u_xlat2.y + (-u_xlat16_7.x);
    u_xlat10.xz = vs_TEXCOORD4.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat3.x = _Time.y * _Detail01_U_Speed + u_xlat10.x;
    u_xlat3.y = _Time.y * _Detail01_V_Speed + u_xlat10.z;
    u_xlat10_25 = texture(_NoiseTex, u_xlat3.xy).x;
    u_xlat2.x = u_xlat10_25 * _NoiselDistortionValue + u_xlat2.x;
    u_xlat2.y = u_xlat10_25 * _NoiselDistortionValue + u_xlat16_7.x;
    u_xlat10_25 = texture(_WaterfallSpecTex, u_xlat2.xy).x;
    u_xlat16_2.xyw = vec3(u_xlat10_25) * _WaterfallSpecColor.xyz;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x * _Opacity;
    u_xlat0.x = u_xlat8 * u_xlat0.x;
    u_xlat3.w = u_xlat16.x * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat3.w = min(max(u_xlat3.w, 0.0), 1.0);
#else
    u_xlat3.w = clamp(u_xlat3.w, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat1.xyz * _DayColor.xyz;
    u_xlat0.xyw = u_xlat1.xyz * vec3(u_xlat24) + u_xlat16_2.xyw;
    u_xlat1.x = (-u_xlat18) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat16.x = u_xlat16.x * u_xlat1.x;
    u_xlat0.xyz = u_xlat16.xxx * _FoamColor.xyz + u_xlat0.xyw;
    u_xlat0.xyz = u_xlat0.xyz * _ES_MainLightColor.xyz;
    u_xlat16_24 = max(_LightColor0.w, 1.0);
    u_xlat0.xyz = vec3(u_xlat16_24) * u_xlat0.xyz;
    u_xlat1.xyz = vs_TEXCOORD5.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat24 = dot(u_xlat1.xyz, u_xlat2.xyz);
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlat9.y = u_xlat1.x * _HeigtFogParams.y;
    u_xlat25 = u_xlat1.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat25 = min(max(u_xlat25, 0.0), 1.0);
#else
    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
#endif
    u_xlat2.x = (-u_xlat25) + 2.0;
    u_xlat25 = u_xlat25 * u_xlat2.x;
    u_xlat2.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!((-u_xlat24)>=u_xlat2.x);
#else
    u_xlatb24 = (-u_xlat24)>=u_xlat2.x;
#endif
    u_xlat2.x = u_xlat25 * _HeigtFogColDelta.w;
    u_xlat24 = (u_xlatb24) ? u_xlat2.x : u_xlat25;
    u_xlat24 = log2(u_xlat24);
    u_xlat24 = u_xlat24 * unity_FogColor.w;
    u_xlat24 = exp2(u_xlat24);
    u_xlat24 = min(u_xlat24, _HeigtFogColBase.w);
    u_xlat25 = vs_TEXCOORD5.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat25 = min(max(u_xlat25, 0.0), 1.0);
#else
    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
#endif
    u_xlat16_7.x = (-u_xlat25) + 2.0;
    u_xlat16_7.x = u_xlat25 * u_xlat16_7.x;
    u_xlat2.xyz = u_xlat16_7.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat25 = u_xlat1.x + (-_HeigtFogRamp.w);
    u_xlat25 = u_xlat25 * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat25 = min(max(u_xlat25, 0.0), 1.0);
#else
    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
#endif
    u_xlat4.xyz = (-u_xlat2.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat2.xyz = vec3(u_xlat25) * u_xlat4.xyz + u_xlat2.xyz;
    u_xlat25 = u_xlat1.y * _HeigtFogParams.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb26 = !!(0.00999999978<abs(u_xlat25));
#else
    u_xlatb26 = 0.00999999978<abs(u_xlat25);
#endif
    u_xlat4.x = u_xlat25 * -1.44269502;
    u_xlat4.x = exp2(u_xlat4.x);
    u_xlat4.x = (-u_xlat4.x) + 1.0;
    u_xlat25 = u_xlat4.x / u_xlat25;
    u_xlat16_7.x = (u_xlatb26) ? u_xlat25 : 1.0;
    u_xlat9.x = u_xlat1.y * _HeigtFogParams2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb25 = !!(0.00999999978<abs(u_xlat9.x));
#else
    u_xlatb25 = 0.00999999978<abs(u_xlat9.x);
#endif
    u_xlat26 = u_xlat9.x * -1.44269502;
    u_xlat26 = exp2(u_xlat26);
    u_xlat26 = (-u_xlat26) + 1.0;
    u_xlat9.x = u_xlat26 / u_xlat9.x;
    u_xlat16_7.y = (u_xlatb25) ? u_xlat9.x : 1.0;
    u_xlat9.x = u_xlat1.x * _HeigtFogParams2.y;
    u_xlat16_7.xy = u_xlat9.yx * u_xlat16_7.xy;
    u_xlat16_7.x = exp2((-u_xlat16_7.x));
    u_xlat16_7.x = (-u_xlat16_7.x) + 1.0;
    u_xlat16_15 = exp2((-u_xlat16_7.y));
    u_xlat16_7.y = (-u_xlat16_15) + 1.0;
    u_xlat16_7.xy = max(u_xlat16_7.xy, vec2(0.0, 0.0));
    u_xlat16_7.x = u_xlat16_7.y + u_xlat16_7.x;
    u_xlat1.x = u_xlat1.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat16_15 = (-u_xlat1.x) + 2.0;
    u_xlat16_15 = u_xlat1.x * u_xlat16_15;
    u_xlat1.x = u_xlat16_15 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat1.x = u_xlat1.x + 1.0;
    u_xlat16_7.x = u_xlat1.x * u_xlat16_7.x;
    u_xlat1.x = min(u_xlat16_7.x, _HeigtFogColBase.w);
    u_xlat9.x = vs_TEXCOORD5.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat9.x = min(max(u_xlat9.x, 0.0), 1.0);
#else
    u_xlat9.x = clamp(u_xlat9.x, 0.0, 1.0);
#endif
    u_xlat9.xyz = u_xlat9.xxx * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz;
    u_xlat26 = (-u_xlat1.x) + 1.0;
    u_xlat2.xyz = vec3(u_xlat26) * u_xlat2.xyz;
    u_xlat1.xyz = u_xlat9.xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat24 = (-u_xlat24) + 1.0;
    u_xlat24 = u_xlat26 * u_xlat24;
    u_xlat3.xyz = vec3(u_xlat24) * u_xlat0.xyz + u_xlat1.xyz;
    SV_Target0 = u_xlat3;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	mediump float _MHYZBias;
uniform 	vec4 hlslcc_mtx4x4_mhyJitteredVP[4];
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
mediump vec4 u_xlat16_3;
bool u_xlatb3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat6;
mediump vec3 u_xlat16_7;
float u_xlat11;
mediump float u_xlat16_12;
float u_xlat18;
bool u_xlatb18;
float u_xlat19;
float u_xlat24;
bool u_xlatb24;
float u_xlat27;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat2.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    gl_Position = u_xlat2;
    vs_TEXCOORD2.zw = u_xlat2.zw;
    vs_COLOR0 = in_COLOR0;
    u_xlat3.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat24 = u_xlat3.y * _HeigtFogParams.x;
    u_xlat18 = u_xlat24 * -1.44269502;
    u_xlat18 = exp2(u_xlat18);
    u_xlat18 = (-u_xlat18) + 1.0;
    u_xlat18 = u_xlat18 / u_xlat24;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(0.00999999978<abs(u_xlat24));
#else
    u_xlatb24 = 0.00999999978<abs(u_xlat24);
#endif
    u_xlat16_4.x = (u_xlatb24) ? u_xlat18 : 1.0;
    u_xlat24 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat24 = sqrt(u_xlat24);
    u_xlat18 = u_xlat24 * _HeigtFogParams.y;
    u_xlat16_4.x = u_xlat18 * u_xlat16_4.x;
    u_xlat16_4.x = exp2((-u_xlat16_4.x));
    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
    u_xlat18 = u_xlat3.y * _HeigtFogParams2.x;
    u_xlat27 = u_xlat18 * -1.44269502;
    u_xlat27 = exp2(u_xlat27);
    u_xlat27 = (-u_xlat27) + 1.0;
    u_xlat27 = u_xlat27 / u_xlat18;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(0.00999999978<abs(u_xlat18));
#else
    u_xlatb18 = 0.00999999978<abs(u_xlat18);
#endif
    u_xlat16_12 = (u_xlatb18) ? u_xlat27 : 1.0;
    u_xlat18 = u_xlat24 * _HeigtFogParams2.y;
    u_xlat16_12 = u_xlat18 * u_xlat16_12;
    u_xlat16_12 = exp2((-u_xlat16_12));
    u_xlat16_4.y = (-u_xlat16_12) + 1.0;
    u_xlat16_4.xy = max(u_xlat16_4.xy, vec2(0.0, 0.0));
    u_xlat16_4.x = u_xlat16_4.y + u_xlat16_4.x;
    u_xlat18 = u_xlat24 * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat16_12 = (-u_xlat18) + 2.0;
    u_xlat16_12 = u_xlat18 * u_xlat16_12;
    u_xlat18 = u_xlat16_12 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat18 = u_xlat18 + 1.0;
    u_xlat16_4.x = u_xlat18 * u_xlat16_4.x;
    u_xlat18 = min(u_xlat16_4.x, _HeigtFogColBase.w);
    u_xlat27 = (-u_xlat18) + 1.0;
    u_xlat5.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat5.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat5.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat3.x = dot(u_xlat3.xyz, u_xlat5.xyz);
    u_xlat11 = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!((-u_xlat3.x)>=u_xlat11);
#else
    u_xlatb3 = (-u_xlat3.x)>=u_xlat11;
#endif
    u_xlat11 = u_xlat24 * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat11 = min(max(u_xlat11, 0.0), 1.0);
#else
    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
#endif
    u_xlat24 = u_xlat24 + (-_HeigtFogRamp.w);
    u_xlat24 = u_xlat24 * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat19 = (-u_xlat11) + 2.0;
    u_xlat11 = u_xlat19 * u_xlat11;
    u_xlat19 = u_xlat11 * _HeigtFogColDelta.w;
    u_xlat3.x = (u_xlatb3) ? u_xlat19 : u_xlat11;
    u_xlat3.x = log2(u_xlat3.x);
    u_xlat3.x = u_xlat3.x * unity_FogColor.w;
    u_xlat3.x = exp2(u_xlat3.x);
    u_xlat3.x = min(u_xlat3.x, _HeigtFogColBase.w);
    u_xlat11 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat11 = min(max(u_xlat11, 0.0), 1.0);
#else
    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
#endif
    u_xlat16_4.x = (-u_xlat11) + 2.0;
    u_xlat16_4.x = u_xlat11 * u_xlat16_4.x;
    u_xlat5.xyz = u_xlat16_4.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat6.xyz = (-u_xlat5.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat5.xyz = vec3(u_xlat24) * u_xlat6.xyz + u_xlat5.xyz;
    u_xlat5.xyz = u_xlat3.xxx * u_xlat5.xyz;
    u_xlat24 = (-u_xlat3.x) + 1.0;
    vs_TEXCOORD0.w = u_xlat27 * u_xlat24;
    u_xlat3.xyz = vec3(u_xlat27) * u_xlat5.xyz;
    u_xlat24 = u_xlat0.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    u_xlat0.xyz = vec3(u_xlat24) * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    vs_TEXCOORD0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat3.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat0.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    u_xlat16_4.x = u_xlat0.y * u_xlat0.y;
    u_xlat16_4.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_4.x);
    u_xlat16_3 = u_xlat0.yzzx * u_xlat0.xyzz;
    u_xlat16_7.x = dot(unity_SHBr, u_xlat16_3);
    u_xlat16_7.y = dot(unity_SHBg, u_xlat16_3);
    u_xlat16_7.z = dot(unity_SHBb, u_xlat16_3);
    u_xlat16_4.xyz = unity_SHC.xyz * u_xlat16_4.xxx + u_xlat16_7.xyz;
    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat0.w = 1.0;
    u_xlat16_7.x = dot(unity_SHAr, u_xlat0);
    u_xlat16_7.y = dot(unity_SHAg, u_xlat0);
    u_xlat16_7.z = dot(unity_SHAb, u_xlat0);
    u_xlat16_4.xyz = u_xlat16_4.xyz + u_xlat16_7.xyz;
    vs_TEXCOORD1.xyz = u_xlat16_4.xyz;
    vs_TEXCOORD1.w = 1.0;
    u_xlat5.x = float(0.5);
    u_xlat5.z = float(0.5);
    u_xlat5.y = _ProjectionParams.x;
    u_xlat2.xyz = u_xlat2.xyw * u_xlat5.xyz;
    u_xlat2.w = u_xlat2.y * 0.5;
    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4_mhyJitteredVP[1];
    u_xlat2 = hlslcc_mtx4x4_mhyJitteredVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4_mhyJitteredVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat2.xyz = vec3(u_xlat5.z * u_xlat1.x, u_xlat5.y * u_xlat1.y, u_xlat5.z * u_xlat1.w);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    u_xlat2.w = u_xlat2.y * 0.5;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat24 = dot(hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, hlslcc_mtx4x4unity_ObjectToWorld[0].xyz);
    vs_TEXCOORD4.z = sqrt(u_xlat24);
    u_xlat24 = dot(hlslcc_mtx4x4unity_ObjectToWorld[1].xyz, hlslcc_mtx4x4unity_ObjectToWorld[1].xyz);
    vs_TEXCOORD4.w = sqrt(u_xlat24);
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD5.w = 0.0;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
    vs_TEXCOORD6.xyz = u_xlat1.xyz;
    vs_TEXCOORD6.w = 0.0;
    vs_TEXCOORD7.xyz = u_xlat0.xyz;
    vs_TEXCOORD7.w = 0.0;
    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
    u_xlat24 = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD8.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    vs_TEXCOORD8.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _LightColor0;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	float _AlphaRange;
uniform 	float _AlphaOffset;
uniform 	float _Opacity;
uniform 	mediump float _BottomAlphaToggle;
uniform 	float _AlphaBottomRange;
uniform 	float _AlphaBottomOffset;
uniform 	vec4 _WaterfallTex01_ST;
uniform 	mediump vec4 _FoamUVCoord01;
uniform 	mediump vec4 _FoamUVCoord02;
uniform 	float _FoamRange;
uniform 	float _FoamOffset;
uniform 	vec4 _DayColor;
uniform 	vec4 _BottomColor;
uniform 	vec4 _TopColor;
uniform 	float _ColorGradientRange;
uniform 	float _ColorGradientOffset;
uniform 	vec4 _ReflectionColor_Dark;
uniform 	vec4 _ReflectionColor_Light;
uniform 	float _Normal01_U_Speed;
uniform 	vec4 _Normal01_ST;
uniform 	float _Normal01_VSpeed;
uniform 	float _Normal02_U_Speed;
uniform 	vec4 _Normal02_ST;
uniform 	float _Normal02_V_Speed;
uniform 	vec4 _DistortionIntensity;
uniform 	float _ReflectionBrightness;
uniform 	float _ReflectionIntensity;
uniform 	float _WaterFall01_Speed;
uniform 	float _Waterfall02_Speed;
uniform 	mediump vec4 _WaterfallPatternColor;
uniform 	float _Waterfall01Brightness;
uniform 	float _Waterfall02Brightness;
uniform 	float _SprayRange;
uniform 	float _SprayOffset;
uniform 	float _ShadowStrength;
uniform 	vec4 _WaterfallSpecTex_ST;
uniform 	float _Detail01_U_Speed;
uniform 	vec4 _NoiseTex_ST;
uniform 	float _Detail01_V_Speed;
uniform 	float _NoiselDistortionValue;
uniform 	mediump vec4 _WaterfallSpecColor;
uniform 	mediump vec4 _FoamColor;
uniform 	vec3 _ES_MainLightColor;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _WaterfallTex01;
uniform lowp sampler2D _Normal01;
uniform lowp sampler2D _Normal02;
uniform lowp samplerCube _Reflection;
uniform lowp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _WaterfallSpecTex;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
in highp vec4 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
lowp float u_xlat10_0;
bvec2 u_xlatb0;
vec3 u_xlat1;
vec4 u_xlat2;
lowp float u_xlat10_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
vec4 u_xlat4;
vec3 u_xlat5;
lowp vec3 u_xlat10_5;
vec3 u_xlat6;
vec3 u_xlat7;
mediump vec3 u_xlat16_8;
vec3 u_xlat9;
lowp float u_xlat10_9;
vec3 u_xlat10;
mediump float u_xlat16_10;
lowp float u_xlat10_10;
bool u_xlatb10;
float u_xlat11;
vec2 u_xlat12;
mediump float u_xlat16_17;
float u_xlat18;
float u_xlat19;
lowp float u_xlat10_19;
float u_xlat27;
mediump float u_xlat16_27;
bool u_xlatb27;
float u_xlat28;
bool u_xlatb28;
float u_xlat29;
bool u_xlatb29;
float u_xlat30;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat18 = texture(_CameraDepthTexture, u_xlat0.xy).x;
    u_xlat18 = _ZBufferParams.z * u_xlat18 + _ZBufferParams.w;
    u_xlat18 = float(1.0) / u_xlat18;
    u_xlat18 = u_xlat18 + (-vs_TEXCOORD3.w);
    u_xlat27 = u_xlat18 * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
    u_xlat18 = u_xlat18 / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat1.x = (-u_xlat27) + 1.0;
    u_xlat18 = u_xlat18 * u_xlat1.x + u_xlat27;
    u_xlat27 = vs_TEXCOORD4.y * _AlphaRange + _AlphaOffset;
    u_xlat1.x = vs_TEXCOORD4.y * _AlphaBottomRange + _AlphaBottomOffset;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(_BottomAlphaToggle==1.0);
#else
    u_xlatb10 = _BottomAlphaToggle==1.0;
#endif
    u_xlat1.x = (u_xlatb10) ? u_xlat1.x : 1.0;
    u_xlat10.xy = vs_TEXCOORD4.xy * _WaterfallTex01_ST.xy + _WaterfallTex01_ST.zw;
    u_xlat2.xy = vec2(u_xlat10.x * vs_TEXCOORD4.z, u_xlat10.y * vs_TEXCOORD4.w);
    u_xlat10.xy = vec2(_Time.y * _FoamUVCoord01.z, _Time.y * _FoamUVCoord01.w);
    u_xlat10.xy = u_xlat2.xy * _FoamUVCoord01.xy + u_xlat10.xy;
    u_xlat3.xy = vec2(_Time.y * _FoamUVCoord02.z, _Time.y * _FoamUVCoord02.w);
    u_xlat3.xy = u_xlat2.xy * _FoamUVCoord02.xy + u_xlat3.xy;
    u_xlat28 = vs_TEXCOORD4.y * _FoamRange + _FoamOffset;
    u_xlat10_10 = texture(_WaterfallTex01, u_xlat10.xy).x;
    u_xlat10_19 = texture(_WaterfallTex01, u_xlat3.xy).y;
    u_xlat16_10 = u_xlat10_19 + u_xlat10_10;
    u_xlat10.x = u_xlat28 + u_xlat16_10;
#ifdef UNITY_ADRENO_ES3
    u_xlat10.x = min(max(u_xlat10.x, 0.0), 1.0);
#else
    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
#endif
    u_xlat19 = vs_TEXCOORD4.y * _ColorGradientRange + _ColorGradientOffset;
#ifdef UNITY_ADRENO_ES3
    u_xlat19 = min(max(u_xlat19, 0.0), 1.0);
#else
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
#endif
    u_xlat3.xyz = (-_BottomColor.xyz) + _TopColor.xyz;
    u_xlat3.xyz = vec3(u_xlat19) * u_xlat3.xyz + _BottomColor.xyz;
    u_xlat4.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat19 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat19 = inversesqrt(u_xlat19);
    u_xlat4.xyz = vec3(u_xlat19) * u_xlat4.xyz;
    u_xlat5.xy = vs_TEXCOORD4.xy * _Normal01_ST.xy + _Normal01_ST.zw;
    u_xlat19 = _Time.y * _Normal01_VSpeed;
    u_xlat30 = u_xlat5.x * vs_TEXCOORD4.z;
    u_xlat6.x = _Time.y * _Normal01_U_Speed + u_xlat30;
    u_xlat6.y = u_xlat5.y * vs_TEXCOORD4.w + u_xlat19;
    u_xlat5.xy = vs_TEXCOORD4.xy * _Normal02_ST.xy + _Normal02_ST.zw;
    u_xlat5.xy = vec2(u_xlat5.x * vs_TEXCOORD4.z, u_xlat5.y * vs_TEXCOORD4.w);
    u_xlat7.x = _Time.y * _Normal02_U_Speed + u_xlat5.x;
    u_xlat7.y = _Time.y * _Normal02_V_Speed + u_xlat5.y;
    u_xlat10_5.xyz = texture(_Normal01, u_xlat6.xy).xyz;
    u_xlat16_8.xyz = u_xlat10_5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat10_5.xyz = texture(_Normal02, u_xlat7.xy).xyz;
    u_xlat16_8.xyz = u_xlat10_5.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_8.xyz;
    u_xlat16_8.xyz = u_xlat16_8.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat5.xyz = u_xlat16_8.xyz * _DistortionIntensity.xyz;
    u_xlat6.x = vs_TEXCOORD6.x;
    u_xlat6.y = vs_TEXCOORD8.x;
    u_xlat6.z = vs_TEXCOORD7.x;
    u_xlat6.x = dot(u_xlat6.xyz, u_xlat5.xyz);
    u_xlat7.x = vs_TEXCOORD6.y;
    u_xlat7.y = vs_TEXCOORD8.y;
    u_xlat7.z = vs_TEXCOORD7.y;
    u_xlat6.y = dot(u_xlat7.xyz, u_xlat5.xyz);
    u_xlat7.x = vs_TEXCOORD6.z;
    u_xlat7.y = vs_TEXCOORD8.z;
    u_xlat7.z = vs_TEXCOORD7.z;
    u_xlat6.z = dot(u_xlat7.xyz, u_xlat5.xyz);
    u_xlat19 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat19 = inversesqrt(u_xlat19);
    u_xlat5.xyz = vec3(u_xlat19) * u_xlat6.xyz;
    u_xlat19 = dot((-u_xlat4.xyz), u_xlat5.xyz);
    u_xlat19 = u_xlat19 + u_xlat19;
    u_xlat4.xyz = u_xlat5.xyz * (-vec3(u_xlat19)) + (-u_xlat4.xyz);
    u_xlat10_19 = texture(_Reflection, u_xlat4.xyz).x;
    u_xlat4.xyz = (-_ReflectionColor_Dark.xyz) + _ReflectionColor_Light.xyz;
    u_xlat4.xyz = vec3(u_xlat10_19) * u_xlat4.xyz + _ReflectionColor_Dark.xyz;
    u_xlat5.xyz = u_xlat3.xyz * vec3(0.200000003, 0.200000003, 0.200000003);
    u_xlat3.xyz = u_xlat3.xyz * u_xlat4.xyz;
    u_xlat3.xyz = u_xlat3.xyz * vec3(_ReflectionBrightness) + (-u_xlat5.xyz);
    u_xlat3.xyz = vec3(vec3(_ReflectionIntensity, _ReflectionIntensity, _ReflectionIntensity)) * u_xlat3.xyz + u_xlat5.xyz;
    u_xlat2.zw = _Time.yy * vec2(_WaterFall01_Speed, _Waterfall02_Speed) + u_xlat2.yy;
    u_xlat10_19 = texture(_WaterfallTex01, u_xlat2.xz).x;
    u_xlat10_2 = texture(_WaterfallTex01, u_xlat2.xw).y;
    u_xlat16_8.x = (-u_xlat10_19) + u_xlat10_2;
    u_xlat16_8.x = u_xlat10_2 * u_xlat16_8.x + u_xlat10_19;
    u_xlat11 = u_xlat10_2 * _Waterfall02Brightness;
    u_xlat19 = u_xlat10_19 * _Waterfall01Brightness;
    u_xlat2.x = u_xlat10_2 * _Waterfall02Brightness + (-u_xlat19);
    u_xlat19 = u_xlat11 * u_xlat2.x + u_xlat19;
    u_xlat2.x = vs_TEXCOORD4.y * _SprayRange + _SprayOffset;
    u_xlat2.x = (-u_xlat2.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat19 = u_xlat19 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat19 = min(max(u_xlat19, 0.0), 1.0);
#else
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
#endif
    u_xlat2.xyz = u_xlat16_8.xxx * _WaterfallPatternColor.xyz + (-u_xlat3.xyz);
    u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz + u_xlat3.xyz;
    u_xlat10_0 = texture(_ShadowMapTexture, u_xlat0.xy).x;
    u_xlat9.x = (-_ShadowStrength) + 1.0;
    u_xlat0.x = u_xlat10_0 * u_xlat9.x + _ShadowStrength;
    u_xlat3.xy = vs_TEXCOORD4.xy * _WaterfallSpecTex_ST.xy + _WaterfallSpecTex_ST.zw;
    u_xlat16_8.x = vs_TEXCOORD4.w * 0.5;
    u_xlat16_8.x = vs_TEXCOORD4.w * u_xlat3.y + (-u_xlat16_8.x);
    u_xlat12.xy = vs_TEXCOORD4.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat4.x = _Time.y * _Detail01_U_Speed + u_xlat12.x;
    u_xlat4.y = _Time.y * _Detail01_V_Speed + u_xlat12.y;
    u_xlat10_9 = texture(_NoiseTex, u_xlat4.xy).x;
    u_xlat3.x = u_xlat10_9 * _NoiselDistortionValue + u_xlat3.x;
    u_xlat3.y = u_xlat10_9 * _NoiselDistortionValue + u_xlat16_8.x;
    u_xlat10_9 = texture(_WaterfallSpecTex, u_xlat3.xy).x;
    u_xlat16_3.xyz = vec3(u_xlat10_9) * _WaterfallSpecColor.xyz;
    u_xlat9.x = (-u_xlat27) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat9.x = min(max(u_xlat9.x, 0.0), 1.0);
#else
    u_xlat9.x = clamp(u_xlat9.x, 0.0, 1.0);
#endif
    u_xlat9.x = u_xlat9.x * u_xlat18;
    u_xlat9.x = u_xlat9.x * _Opacity;
    u_xlat9.x = u_xlat1.x * u_xlat9.x;
    u_xlat4.w = u_xlat10.x * u_xlat9.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.w = min(max(u_xlat4.w, 0.0), 1.0);
#else
    u_xlat4.w = clamp(u_xlat4.w, 0.0, 1.0);
#endif
    u_xlat9.xyz = u_xlat2.xyz * _DayColor.xyz;
    u_xlat0.xyz = u_xlat9.xyz * u_xlat0.xxx + u_xlat16_3.xyz;
    u_xlat27 = (-u_xlat28) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
    u_xlat27 = u_xlat27 * u_xlat10.x;
    u_xlat0.xyz = vec3(u_xlat27) * _FoamColor.xyz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * _ES_MainLightColor.xyz;
    u_xlat16_27 = max(_LightColor0.w, 1.0);
    u_xlat0.xyz = vec3(u_xlat16_27) * u_xlat0.xyz;
    u_xlat1.xyz = vs_TEXCOORD5.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat27 = dot(u_xlat1.xyz, u_xlat2.xyz);
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlat10.y = u_xlat1.x * _HeigtFogParams.y;
    u_xlat28 = u_xlat1.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat28 = min(max(u_xlat28, 0.0), 1.0);
#else
    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
#endif
    u_xlat2.x = (-u_xlat28) + 2.0;
    u_xlat28 = u_xlat28 * u_xlat2.x;
    u_xlat2.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!((-u_xlat27)>=u_xlat2.x);
#else
    u_xlatb27 = (-u_xlat27)>=u_xlat2.x;
#endif
    u_xlat2.x = u_xlat28 * _HeigtFogColDelta.w;
    u_xlat27 = (u_xlatb27) ? u_xlat2.x : u_xlat28;
    u_xlat27 = log2(u_xlat27);
    u_xlat27 = u_xlat27 * unity_FogColor.w;
    u_xlat27 = exp2(u_xlat27);
    u_xlat27 = min(u_xlat27, _HeigtFogColBase.w);
    u_xlat28 = vs_TEXCOORD5.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat28 = min(max(u_xlat28, 0.0), 1.0);
#else
    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
#endif
    u_xlat16_8.x = (-u_xlat28) + 2.0;
    u_xlat16_8.x = u_xlat28 * u_xlat16_8.x;
    u_xlat2.xyz = u_xlat16_8.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat28 = u_xlat1.x + (-_HeigtFogRamp.w);
    u_xlat28 = u_xlat28 * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat28 = min(max(u_xlat28, 0.0), 1.0);
#else
    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
#endif
    u_xlat3.xyz = (-u_xlat2.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat2.xyz = vec3(u_xlat28) * u_xlat3.xyz + u_xlat2.xyz;
    u_xlat28 = u_xlat1.y * _HeigtFogParams.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb29 = !!(0.00999999978<abs(u_xlat28));
#else
    u_xlatb29 = 0.00999999978<abs(u_xlat28);
#endif
    u_xlat3.x = u_xlat28 * -1.44269502;
    u_xlat3.x = exp2(u_xlat3.x);
    u_xlat3.x = (-u_xlat3.x) + 1.0;
    u_xlat28 = u_xlat3.x / u_xlat28;
    u_xlat16_8.x = (u_xlatb29) ? u_xlat28 : 1.0;
    u_xlat10.x = u_xlat1.y * _HeigtFogParams2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb28 = !!(0.00999999978<abs(u_xlat10.x));
#else
    u_xlatb28 = 0.00999999978<abs(u_xlat10.x);
#endif
    u_xlat29 = u_xlat10.x * -1.44269502;
    u_xlat29 = exp2(u_xlat29);
    u_xlat29 = (-u_xlat29) + 1.0;
    u_xlat10.x = u_xlat29 / u_xlat10.x;
    u_xlat16_8.y = (u_xlatb28) ? u_xlat10.x : 1.0;
    u_xlat10.x = u_xlat1.x * _HeigtFogParams2.y;
    u_xlat16_8.xy = u_xlat10.yx * u_xlat16_8.xy;
    u_xlat16_8.x = exp2((-u_xlat16_8.x));
    u_xlat16_8.x = (-u_xlat16_8.x) + 1.0;
    u_xlat16_17 = exp2((-u_xlat16_8.y));
    u_xlat16_8.y = (-u_xlat16_17) + 1.0;
    u_xlat16_8.xy = max(u_xlat16_8.xy, vec2(0.0, 0.0));
    u_xlat16_8.x = u_xlat16_8.y + u_xlat16_8.x;
    u_xlat1.x = u_xlat1.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat16_17 = (-u_xlat1.x) + 2.0;
    u_xlat16_17 = u_xlat1.x * u_xlat16_17;
    u_xlat1.x = u_xlat16_17 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat1.x = u_xlat1.x + 1.0;
    u_xlat16_8.x = u_xlat1.x * u_xlat16_8.x;
    u_xlat1.x = min(u_xlat16_8.x, _HeigtFogColBase.w);
    u_xlat10.x = vs_TEXCOORD5.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat10.x = min(max(u_xlat10.x, 0.0), 1.0);
#else
    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
#endif
    u_xlat10.xyz = u_xlat10.xxx * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    u_xlat2.xyz = vec3(u_xlat27) * u_xlat2.xyz;
    u_xlat29 = (-u_xlat1.x) + 1.0;
    u_xlat2.xyz = vec3(u_xlat29) * u_xlat2.xyz;
    u_xlat1.xyz = u_xlat10.xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat27 = (-u_xlat27) + 1.0;
    u_xlat27 = u_xlat29 * u_xlat27;
    u_xlat4.xyz = vec3(u_xlat27) * u_xlat0.xyz + u_xlat1.xyz;
    SV_Target0 = u_xlat4;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	mediump float _MHYZBias;
uniform 	vec4 hlslcc_mtx4x4_mhyJitteredVP[4];
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
vec3 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
bool u_xlatb3;
mediump vec3 u_xlat16_4;
float u_xlat5;
mediump vec4 u_xlat16_5;
vec3 u_xlat6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
float u_xlat11;
mediump float u_xlat16_12;
vec3 u_xlat13;
float u_xlat17;
bool u_xlatb17;
float u_xlat19;
float u_xlat24;
float u_xlat27;
bool u_xlatb27;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat8.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    u_xlat1.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position = u_xlat1;
    vs_TEXCOORD2.zw = u_xlat1.zw;
    vs_COLOR0 = in_COLOR0;
    u_xlat3.xyz = u_xlat8.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat17 = u_xlat3.y * _HeigtFogParams.x;
    u_xlat27 = u_xlat17 * -1.44269502;
    u_xlat27 = exp2(u_xlat27);
    u_xlat27 = (-u_xlat27) + 1.0;
    u_xlat27 = u_xlat27 / u_xlat17;
#ifdef UNITY_ADRENO_ES3
    u_xlatb17 = !!(0.00999999978<abs(u_xlat17));
#else
    u_xlatb17 = 0.00999999978<abs(u_xlat17);
#endif
    u_xlat16_4.x = (u_xlatb17) ? u_xlat27 : 1.0;
    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat17 = sqrt(u_xlat17);
    u_xlat27 = u_xlat17 * _HeigtFogParams.y;
    u_xlat16_4.x = u_xlat27 * u_xlat16_4.x;
    u_xlat16_4.x = exp2((-u_xlat16_4.x));
    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
    u_xlat27 = u_xlat3.y * _HeigtFogParams2.x;
    u_xlat5 = u_xlat27 * -1.44269502;
    u_xlat5 = exp2(u_xlat5);
    u_xlat5 = (-u_xlat5) + 1.0;
    u_xlat5 = u_xlat5 / u_xlat27;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(0.00999999978<abs(u_xlat27));
#else
    u_xlatb27 = 0.00999999978<abs(u_xlat27);
#endif
    u_xlat16_12 = (u_xlatb27) ? u_xlat5 : 1.0;
    u_xlat27 = u_xlat17 * _HeigtFogParams2.y;
    u_xlat16_12 = u_xlat27 * u_xlat16_12;
    u_xlat16_12 = exp2((-u_xlat16_12));
    u_xlat16_4.y = (-u_xlat16_12) + 1.0;
    u_xlat16_4.xy = max(u_xlat16_4.xy, vec2(0.0, 0.0));
    u_xlat16_4.x = u_xlat16_4.y + u_xlat16_4.x;
    u_xlat27 = u_xlat17 * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
    u_xlat16_12 = (-u_xlat27) + 2.0;
    u_xlat16_12 = u_xlat27 * u_xlat16_12;
    u_xlat27 = u_xlat16_12 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat27 = u_xlat27 + 1.0;
    u_xlat16_4.x = u_xlat27 * u_xlat16_4.x;
    u_xlat27 = min(u_xlat16_4.x, _HeigtFogColBase.w);
    u_xlat5 = (-u_xlat27) + 1.0;
    u_xlat13.x = _ProjectionParams.z * 0.999899983;
    u_xlat6.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat6.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat6.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat3.x = dot(u_xlat3.xyz, u_xlat6.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!((-u_xlat3.x)>=u_xlat13.x);
#else
    u_xlatb3 = (-u_xlat3.x)>=u_xlat13.x;
#endif
    u_xlat11 = u_xlat17 * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat11 = min(max(u_xlat11, 0.0), 1.0);
#else
    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
#endif
    u_xlat17 = u_xlat17 + (-_HeigtFogRamp.w);
    u_xlat17 = u_xlat17 * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat17 = min(max(u_xlat17, 0.0), 1.0);
#else
    u_xlat17 = clamp(u_xlat17, 0.0, 1.0);
#endif
    u_xlat19 = (-u_xlat11) + 2.0;
    u_xlat11 = u_xlat19 * u_xlat11;
    u_xlat19 = u_xlat11 * _HeigtFogColDelta.w;
    u_xlat3.x = (u_xlatb3) ? u_xlat19 : u_xlat11;
    u_xlat3.x = log2(u_xlat3.x);
    u_xlat3.x = u_xlat3.x * unity_FogColor.w;
    u_xlat3.x = exp2(u_xlat3.x);
    u_xlat3.x = min(u_xlat3.x, _HeigtFogColBase.w);
    u_xlat11 = u_xlat8.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat11 = min(max(u_xlat11, 0.0), 1.0);
#else
    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
#endif
    u_xlat16_4.x = (-u_xlat11) + 2.0;
    u_xlat16_4.x = u_xlat11 * u_xlat16_4.x;
    u_xlat13.xyz = u_xlat16_4.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat6.xyz = (-u_xlat13.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat13.xyz = vec3(u_xlat17) * u_xlat6.xyz + u_xlat13.xyz;
    u_xlat13.xyz = u_xlat3.xxx * u_xlat13.xyz;
    u_xlat17 = (-u_xlat3.x) + 1.0;
    vs_TEXCOORD0.w = u_xlat5 * u_xlat17;
    u_xlat3.xyz = vec3(u_xlat5) * u_xlat13.xyz;
    u_xlat17 = u_xlat8.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat17 = min(max(u_xlat17, 0.0), 1.0);
#else
    u_xlat17 = clamp(u_xlat17, 0.0, 1.0);
#endif
    vs_TEXCOORD5.xyz = u_xlat8.xyz;
    u_xlat8.xyz = vec3(u_xlat17) * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    vs_TEXCOORD0.xyz = u_xlat8.xyz * vec3(u_xlat27) + u_xlat3.xyz;
    u_xlat3.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat3.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat3.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat8.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat3.xyz = u_xlat8.xxx * u_xlat3.xyz;
    u_xlat16_4.x = u_xlat3.y * u_xlat3.y;
    u_xlat16_4.x = u_xlat3.x * u_xlat3.x + (-u_xlat16_4.x);
    u_xlat16_5 = u_xlat3.yzzx * u_xlat3.xyzz;
    u_xlat16_7.x = dot(unity_SHBr, u_xlat16_5);
    u_xlat16_7.y = dot(unity_SHBg, u_xlat16_5);
    u_xlat16_7.z = dot(unity_SHBb, u_xlat16_5);
    u_xlat16_4.xyz = unity_SHC.xyz * u_xlat16_4.xxx + u_xlat16_7.xyz;
    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat3.w = 1.0;
    u_xlat16_7.x = dot(unity_SHAr, u_xlat3);
    u_xlat16_7.y = dot(unity_SHAg, u_xlat3);
    u_xlat16_7.z = dot(unity_SHAb, u_xlat3);
    u_xlat16_4.xyz = u_xlat16_4.xyz + u_xlat16_7.xyz;
    vs_TEXCOORD1.xyz = u_xlat16_4.xyz;
    vs_TEXCOORD1.w = 1.0;
    u_xlat6.x = float(0.5);
    u_xlat6.z = float(0.5);
    u_xlat6.y = _ProjectionParams.x;
    u_xlat1.xyz = u_xlat1.xyw * u_xlat6.xyz;
    u_xlat1.w = u_xlat1.y * 0.5;
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4_mhyJitteredVP[1];
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[3] * u_xlat2.wwww + u_xlat1;
    u_xlat2.xyz = vec3(u_xlat6.z * u_xlat1.x, u_xlat6.y * u_xlat1.y, u_xlat6.z * u_xlat1.w);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    u_xlat2.w = u_xlat2.y * 0.5;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy;
    u_xlat8.x = dot(unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz);
    vs_TEXCOORD4.z = sqrt(u_xlat8.x);
    u_xlat8.x = dot(unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz);
    vs_TEXCOORD4.w = sqrt(u_xlat8.x);
    vs_TEXCOORD5.w = 0.0;
    u_xlat8.xyz = in_TANGENT0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat8.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_TANGENT0.xxx + u_xlat8.xyz;
    u_xlat0.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_TANGENT0.zzz + u_xlat8.xyz;
    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat0.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    vs_TEXCOORD6.xyz = u_xlat0.xyz;
    vs_TEXCOORD6.w = 0.0;
    vs_TEXCOORD7.xyz = u_xlat3.xyz;
    vs_TEXCOORD7.w = 0.0;
    u_xlat1.xyz = u_xlat0.yzx * u_xlat3.zxy;
    u_xlat0.xyz = u_xlat3.yzx * u_xlat0.zxy + (-u_xlat1.xyz);
    u_xlat24 = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD8.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    vs_TEXCOORD8.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _LightColor0;
uniform 	float _AlphaRange;
uniform 	float _AlphaOffset;
uniform 	float _Opacity;
uniform 	mediump float _BottomAlphaToggle;
uniform 	float _AlphaBottomRange;
uniform 	float _AlphaBottomOffset;
uniform 	vec4 _WaterfallTex01_ST;
uniform 	mediump vec4 _FoamUVCoord01;
uniform 	mediump vec4 _FoamUVCoord02;
uniform 	float _FoamRange;
uniform 	float _FoamOffset;
uniform 	vec4 _DayColor;
uniform 	vec4 _BottomColor;
uniform 	vec4 _TopColor;
uniform 	float _ColorGradientRange;
uniform 	float _ColorGradientOffset;
uniform 	vec4 _ReflectionColor_Dark;
uniform 	vec4 _ReflectionColor_Light;
uniform 	float _Normal01_U_Speed;
uniform 	vec4 _Normal01_ST;
uniform 	float _Normal01_VSpeed;
uniform 	float _Normal02_U_Speed;
uniform 	vec4 _Normal02_ST;
uniform 	float _Normal02_V_Speed;
uniform 	vec4 _DistortionIntensity;
uniform 	float _ReflectionBrightness;
uniform 	float _ReflectionIntensity;
uniform 	float _WaterFall01_Speed;
uniform 	float _Waterfall02_Speed;
uniform 	mediump vec4 _WaterfallPatternColor;
uniform 	float _Waterfall01Brightness;
uniform 	float _Waterfall02Brightness;
uniform 	float _SprayRange;
uniform 	float _SprayOffset;
uniform 	float _ShadowStrength;
uniform 	vec4 _WaterfallSpecTex_ST;
uniform 	float _Detail01_U_Speed;
uniform 	vec4 _NoiseTex_ST;
uniform 	float _Detail01_V_Speed;
uniform 	float _NoiselDistortionValue;
uniform 	mediump vec4 _WaterfallSpecColor;
uniform 	mediump vec4 _FoamColor;
uniform 	vec3 _ES_MainLightColor;
uniform lowp sampler2D _WaterfallTex01;
uniform lowp sampler2D _Normal01;
uniform lowp sampler2D _Normal02;
uniform lowp samplerCube _Reflection;
uniform lowp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _WaterfallSpecTex;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
in highp vec4 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
bvec2 u_xlatb0;
vec4 u_xlat1;
lowp float u_xlat10_1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
vec4 u_xlat3;
vec3 u_xlat4;
lowp vec3 u_xlat10_4;
vec3 u_xlat5;
vec3 u_xlat6;
mediump vec3 u_xlat16_7;
float u_xlat8;
vec3 u_xlat9;
vec3 u_xlat10;
mediump float u_xlat16_15;
vec2 u_xlat16;
mediump float u_xlat16_16;
lowp float u_xlat10_16;
bool u_xlatb16;
float u_xlat18;
float u_xlat24;
mediump float u_xlat16_24;
lowp float u_xlat10_24;
bool u_xlatb24;
float u_xlat25;
lowp float u_xlat10_25;
bool u_xlatb25;
float u_xlat26;
bool u_xlatb26;
float u_xlat27;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.x = vs_TEXCOORD4.y * _AlphaRange + _AlphaOffset;
    u_xlat8 = vs_TEXCOORD4.y * _AlphaBottomRange + _AlphaBottomOffset;
#ifdef UNITY_ADRENO_ES3
    u_xlat8 = min(max(u_xlat8, 0.0), 1.0);
#else
    u_xlat8 = clamp(u_xlat8, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(_BottomAlphaToggle==1.0);
#else
    u_xlatb16 = _BottomAlphaToggle==1.0;
#endif
    u_xlat8 = (u_xlatb16) ? u_xlat8 : 1.0;
    u_xlat16.xy = vs_TEXCOORD4.xy * _WaterfallTex01_ST.xy + _WaterfallTex01_ST.zw;
    u_xlat1.xy = vec2(u_xlat16.x * vs_TEXCOORD4.z, u_xlat16.y * vs_TEXCOORD4.w);
    u_xlat16.xy = vec2(_Time.y * _FoamUVCoord01.z, _Time.y * _FoamUVCoord01.w);
    u_xlat16.xy = u_xlat1.xy * _FoamUVCoord01.xy + u_xlat16.xy;
    u_xlat2.xy = vec2(_Time.y * _FoamUVCoord02.z, _Time.y * _FoamUVCoord02.w);
    u_xlat2.xy = u_xlat1.xy * _FoamUVCoord02.xy + u_xlat2.xy;
    u_xlat18 = vs_TEXCOORD4.y * _FoamRange + _FoamOffset;
    u_xlat10_16 = texture(_WaterfallTex01, u_xlat16.xy).x;
    u_xlat10_24 = texture(_WaterfallTex01, u_xlat2.xy).y;
    u_xlat16_16 = u_xlat10_24 + u_xlat10_16;
    u_xlat16.x = u_xlat18 + u_xlat16_16;
#ifdef UNITY_ADRENO_ES3
    u_xlat16.x = min(max(u_xlat16.x, 0.0), 1.0);
#else
    u_xlat16.x = clamp(u_xlat16.x, 0.0, 1.0);
#endif
    u_xlat24 = vs_TEXCOORD4.y * _ColorGradientRange + _ColorGradientOffset;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat2.xyw = (-_BottomColor.xyz) + _TopColor.xyz;
    u_xlat2.xyw = vec3(u_xlat24) * u_xlat2.xyw + _BottomColor.xyz;
    u_xlat3.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat24 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat3.xyz = vec3(u_xlat24) * u_xlat3.xyz;
    u_xlat4.xy = vs_TEXCOORD4.xy * _Normal01_ST.xy + _Normal01_ST.zw;
    u_xlat24 = _Time.y * _Normal01_VSpeed;
    u_xlat27 = u_xlat4.x * vs_TEXCOORD4.z;
    u_xlat5.x = _Time.y * _Normal01_U_Speed + u_xlat27;
    u_xlat5.y = u_xlat4.y * vs_TEXCOORD4.w + u_xlat24;
    u_xlat4.xy = vs_TEXCOORD4.xy * _Normal02_ST.xy + _Normal02_ST.zw;
    u_xlat4.xy = vec2(u_xlat4.x * vs_TEXCOORD4.z, u_xlat4.y * vs_TEXCOORD4.w);
    u_xlat6.x = _Time.y * _Normal02_U_Speed + u_xlat4.x;
    u_xlat6.y = _Time.y * _Normal02_V_Speed + u_xlat4.y;
    u_xlat10_4.xyz = texture(_Normal01, u_xlat5.xy).xyz;
    u_xlat16_7.xyz = u_xlat10_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat10_4.xyz = texture(_Normal02, u_xlat6.xy).xyz;
    u_xlat16_7.xyz = u_xlat10_4.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_7.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat4.xyz = u_xlat16_7.xyz * _DistortionIntensity.xyz;
    u_xlat5.x = vs_TEXCOORD6.x;
    u_xlat5.y = vs_TEXCOORD8.x;
    u_xlat5.z = vs_TEXCOORD7.x;
    u_xlat5.x = dot(u_xlat5.xyz, u_xlat4.xyz);
    u_xlat6.x = vs_TEXCOORD6.y;
    u_xlat6.y = vs_TEXCOORD8.y;
    u_xlat6.z = vs_TEXCOORD7.y;
    u_xlat5.y = dot(u_xlat6.xyz, u_xlat4.xyz);
    u_xlat6.x = vs_TEXCOORD6.z;
    u_xlat6.y = vs_TEXCOORD8.z;
    u_xlat6.z = vs_TEXCOORD7.z;
    u_xlat5.z = dot(u_xlat6.xyz, u_xlat4.xyz);
    u_xlat24 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat4.xyz = vec3(u_xlat24) * u_xlat5.xyz;
    u_xlat24 = dot((-u_xlat3.xyz), u_xlat4.xyz);
    u_xlat24 = u_xlat24 + u_xlat24;
    u_xlat3.xyz = u_xlat4.xyz * (-vec3(u_xlat24)) + (-u_xlat3.xyz);
    u_xlat10_24 = texture(_Reflection, u_xlat3.xyz).x;
    u_xlat3.xyz = (-_ReflectionColor_Dark.xyz) + _ReflectionColor_Light.xyz;
    u_xlat3.xyz = vec3(u_xlat10_24) * u_xlat3.xyz + _ReflectionColor_Dark.xyz;
    u_xlat4.xyz = u_xlat2.xyw * vec3(0.200000003, 0.200000003, 0.200000003);
    u_xlat2.xyw = u_xlat2.xyw * u_xlat3.xyz;
    u_xlat2.xyw = u_xlat2.xyw * vec3(_ReflectionBrightness) + (-u_xlat4.xyz);
    u_xlat2.xyw = vec3(vec3(_ReflectionIntensity, _ReflectionIntensity, _ReflectionIntensity)) * u_xlat2.xyw + u_xlat4.xyz;
    u_xlat1.zw = _Time.yy * vec2(_WaterFall01_Speed, _Waterfall02_Speed) + u_xlat1.yy;
    u_xlat10_24 = texture(_WaterfallTex01, u_xlat1.xz).x;
    u_xlat10_1 = texture(_WaterfallTex01, u_xlat1.xw).y;
    u_xlat16_7.x = (-u_xlat10_24) + u_xlat10_1;
    u_xlat16_7.x = u_xlat10_1 * u_xlat16_7.x + u_xlat10_24;
    u_xlat9.x = u_xlat10_1 * _Waterfall02Brightness;
    u_xlat24 = u_xlat10_24 * _Waterfall01Brightness;
    u_xlat1.x = u_xlat10_1 * _Waterfall02Brightness + (-u_xlat24);
    u_xlat24 = u_xlat9.x * u_xlat1.x + u_xlat24;
    u_xlat1.x = vs_TEXCOORD4.y * _SprayRange + _SprayOffset;
    u_xlat1.x = (-u_xlat1.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat24 = u_xlat24 * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat16_7.xxx * _WaterfallPatternColor.xyz + (-u_xlat2.xyw);
    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz + u_xlat2.xyw;
    u_xlat2.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat10_24 = texture(_ShadowMapTexture, u_xlat2.xy).x;
    u_xlat25 = (-_ShadowStrength) + 1.0;
    u_xlat24 = u_xlat10_24 * u_xlat25 + _ShadowStrength;
    u_xlat2.xy = vs_TEXCOORD4.xy * _WaterfallSpecTex_ST.xy + _WaterfallSpecTex_ST.zw;
    u_xlat16_7.x = vs_TEXCOORD4.w * 0.5;
    u_xlat16_7.x = vs_TEXCOORD4.w * u_xlat2.y + (-u_xlat16_7.x);
    u_xlat10.xz = vs_TEXCOORD4.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat3.x = _Time.y * _Detail01_U_Speed + u_xlat10.x;
    u_xlat3.y = _Time.y * _Detail01_V_Speed + u_xlat10.z;
    u_xlat10_25 = texture(_NoiseTex, u_xlat3.xy).x;
    u_xlat2.x = u_xlat10_25 * _NoiselDistortionValue + u_xlat2.x;
    u_xlat2.y = u_xlat10_25 * _NoiselDistortionValue + u_xlat16_7.x;
    u_xlat10_25 = texture(_WaterfallSpecTex, u_xlat2.xy).x;
    u_xlat16_2.xyw = vec3(u_xlat10_25) * _WaterfallSpecColor.xyz;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x * _Opacity;
    u_xlat0.x = u_xlat8 * u_xlat0.x;
    u_xlat3.w = u_xlat16.x * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat3.w = min(max(u_xlat3.w, 0.0), 1.0);
#else
    u_xlat3.w = clamp(u_xlat3.w, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat1.xyz * _DayColor.xyz;
    u_xlat0.xyw = u_xlat1.xyz * vec3(u_xlat24) + u_xlat16_2.xyw;
    u_xlat1.x = (-u_xlat18) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat16.x = u_xlat16.x * u_xlat1.x;
    u_xlat0.xyz = u_xlat16.xxx * _FoamColor.xyz + u_xlat0.xyw;
    u_xlat0.xyz = u_xlat0.xyz * _ES_MainLightColor.xyz;
    u_xlat16_24 = max(_LightColor0.w, 1.0);
    u_xlat0.xyz = vec3(u_xlat16_24) * u_xlat0.xyz;
    u_xlat1.xyz = vs_TEXCOORD5.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat24 = dot(u_xlat1.xyz, u_xlat2.xyz);
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlat9.y = u_xlat1.x * _HeigtFogParams.y;
    u_xlat25 = u_xlat1.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat25 = min(max(u_xlat25, 0.0), 1.0);
#else
    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
#endif
    u_xlat2.x = (-u_xlat25) + 2.0;
    u_xlat25 = u_xlat25 * u_xlat2.x;
    u_xlat2.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!((-u_xlat24)>=u_xlat2.x);
#else
    u_xlatb24 = (-u_xlat24)>=u_xlat2.x;
#endif
    u_xlat2.x = u_xlat25 * _HeigtFogColDelta.w;
    u_xlat24 = (u_xlatb24) ? u_xlat2.x : u_xlat25;
    u_xlat24 = log2(u_xlat24);
    u_xlat24 = u_xlat24 * unity_FogColor.w;
    u_xlat24 = exp2(u_xlat24);
    u_xlat24 = min(u_xlat24, _HeigtFogColBase.w);
    u_xlat25 = vs_TEXCOORD5.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat25 = min(max(u_xlat25, 0.0), 1.0);
#else
    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
#endif
    u_xlat16_7.x = (-u_xlat25) + 2.0;
    u_xlat16_7.x = u_xlat25 * u_xlat16_7.x;
    u_xlat2.xyz = u_xlat16_7.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat25 = u_xlat1.x + (-_HeigtFogRamp.w);
    u_xlat25 = u_xlat25 * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat25 = min(max(u_xlat25, 0.0), 1.0);
#else
    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
#endif
    u_xlat4.xyz = (-u_xlat2.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat2.xyz = vec3(u_xlat25) * u_xlat4.xyz + u_xlat2.xyz;
    u_xlat25 = u_xlat1.y * _HeigtFogParams.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb26 = !!(0.00999999978<abs(u_xlat25));
#else
    u_xlatb26 = 0.00999999978<abs(u_xlat25);
#endif
    u_xlat4.x = u_xlat25 * -1.44269502;
    u_xlat4.x = exp2(u_xlat4.x);
    u_xlat4.x = (-u_xlat4.x) + 1.0;
    u_xlat25 = u_xlat4.x / u_xlat25;
    u_xlat16_7.x = (u_xlatb26) ? u_xlat25 : 1.0;
    u_xlat9.x = u_xlat1.y * _HeigtFogParams2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb25 = !!(0.00999999978<abs(u_xlat9.x));
#else
    u_xlatb25 = 0.00999999978<abs(u_xlat9.x);
#endif
    u_xlat26 = u_xlat9.x * -1.44269502;
    u_xlat26 = exp2(u_xlat26);
    u_xlat26 = (-u_xlat26) + 1.0;
    u_xlat9.x = u_xlat26 / u_xlat9.x;
    u_xlat16_7.y = (u_xlatb25) ? u_xlat9.x : 1.0;
    u_xlat9.x = u_xlat1.x * _HeigtFogParams2.y;
    u_xlat16_7.xy = u_xlat9.yx * u_xlat16_7.xy;
    u_xlat16_7.x = exp2((-u_xlat16_7.x));
    u_xlat16_7.x = (-u_xlat16_7.x) + 1.0;
    u_xlat16_15 = exp2((-u_xlat16_7.y));
    u_xlat16_7.y = (-u_xlat16_15) + 1.0;
    u_xlat16_7.xy = max(u_xlat16_7.xy, vec2(0.0, 0.0));
    u_xlat16_7.x = u_xlat16_7.y + u_xlat16_7.x;
    u_xlat1.x = u_xlat1.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat16_15 = (-u_xlat1.x) + 2.0;
    u_xlat16_15 = u_xlat1.x * u_xlat16_15;
    u_xlat1.x = u_xlat16_15 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat1.x = u_xlat1.x + 1.0;
    u_xlat16_7.x = u_xlat1.x * u_xlat16_7.x;
    u_xlat1.x = min(u_xlat16_7.x, _HeigtFogColBase.w);
    u_xlat9.x = vs_TEXCOORD5.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat9.x = min(max(u_xlat9.x, 0.0), 1.0);
#else
    u_xlat9.x = clamp(u_xlat9.x, 0.0, 1.0);
#endif
    u_xlat9.xyz = u_xlat9.xxx * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz;
    u_xlat26 = (-u_xlat1.x) + 1.0;
    u_xlat2.xyz = vec3(u_xlat26) * u_xlat2.xyz;
    u_xlat1.xyz = u_xlat9.xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat24 = (-u_xlat24) + 1.0;
    u_xlat24 = u_xlat26 * u_xlat24;
    u_xlat3.xyz = vec3(u_xlat24) * u_xlat0.xyz + u_xlat1.xyz;
    SV_Target0 = u_xlat3;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	mediump float _MHYZBias;
uniform 	vec4 hlslcc_mtx4x4_mhyJitteredVP[4];
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
vec3 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
bool u_xlatb3;
mediump vec3 u_xlat16_4;
float u_xlat5;
mediump vec4 u_xlat16_5;
vec3 u_xlat6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
float u_xlat11;
mediump float u_xlat16_12;
vec3 u_xlat13;
float u_xlat17;
bool u_xlatb17;
float u_xlat19;
float u_xlat24;
float u_xlat27;
bool u_xlatb27;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat8.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    u_xlat1.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position = u_xlat1;
    vs_TEXCOORD2.zw = u_xlat1.zw;
    vs_COLOR0 = in_COLOR0;
    u_xlat3.xyz = u_xlat8.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat17 = u_xlat3.y * _HeigtFogParams.x;
    u_xlat27 = u_xlat17 * -1.44269502;
    u_xlat27 = exp2(u_xlat27);
    u_xlat27 = (-u_xlat27) + 1.0;
    u_xlat27 = u_xlat27 / u_xlat17;
#ifdef UNITY_ADRENO_ES3
    u_xlatb17 = !!(0.00999999978<abs(u_xlat17));
#else
    u_xlatb17 = 0.00999999978<abs(u_xlat17);
#endif
    u_xlat16_4.x = (u_xlatb17) ? u_xlat27 : 1.0;
    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat17 = sqrt(u_xlat17);
    u_xlat27 = u_xlat17 * _HeigtFogParams.y;
    u_xlat16_4.x = u_xlat27 * u_xlat16_4.x;
    u_xlat16_4.x = exp2((-u_xlat16_4.x));
    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
    u_xlat27 = u_xlat3.y * _HeigtFogParams2.x;
    u_xlat5 = u_xlat27 * -1.44269502;
    u_xlat5 = exp2(u_xlat5);
    u_xlat5 = (-u_xlat5) + 1.0;
    u_xlat5 = u_xlat5 / u_xlat27;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(0.00999999978<abs(u_xlat27));
#else
    u_xlatb27 = 0.00999999978<abs(u_xlat27);
#endif
    u_xlat16_12 = (u_xlatb27) ? u_xlat5 : 1.0;
    u_xlat27 = u_xlat17 * _HeigtFogParams2.y;
    u_xlat16_12 = u_xlat27 * u_xlat16_12;
    u_xlat16_12 = exp2((-u_xlat16_12));
    u_xlat16_4.y = (-u_xlat16_12) + 1.0;
    u_xlat16_4.xy = max(u_xlat16_4.xy, vec2(0.0, 0.0));
    u_xlat16_4.x = u_xlat16_4.y + u_xlat16_4.x;
    u_xlat27 = u_xlat17 * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
    u_xlat16_12 = (-u_xlat27) + 2.0;
    u_xlat16_12 = u_xlat27 * u_xlat16_12;
    u_xlat27 = u_xlat16_12 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat27 = u_xlat27 + 1.0;
    u_xlat16_4.x = u_xlat27 * u_xlat16_4.x;
    u_xlat27 = min(u_xlat16_4.x, _HeigtFogColBase.w);
    u_xlat5 = (-u_xlat27) + 1.0;
    u_xlat13.x = _ProjectionParams.z * 0.999899983;
    u_xlat6.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat6.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat6.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat3.x = dot(u_xlat3.xyz, u_xlat6.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!((-u_xlat3.x)>=u_xlat13.x);
#else
    u_xlatb3 = (-u_xlat3.x)>=u_xlat13.x;
#endif
    u_xlat11 = u_xlat17 * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat11 = min(max(u_xlat11, 0.0), 1.0);
#else
    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
#endif
    u_xlat17 = u_xlat17 + (-_HeigtFogRamp.w);
    u_xlat17 = u_xlat17 * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat17 = min(max(u_xlat17, 0.0), 1.0);
#else
    u_xlat17 = clamp(u_xlat17, 0.0, 1.0);
#endif
    u_xlat19 = (-u_xlat11) + 2.0;
    u_xlat11 = u_xlat19 * u_xlat11;
    u_xlat19 = u_xlat11 * _HeigtFogColDelta.w;
    u_xlat3.x = (u_xlatb3) ? u_xlat19 : u_xlat11;
    u_xlat3.x = log2(u_xlat3.x);
    u_xlat3.x = u_xlat3.x * unity_FogColor.w;
    u_xlat3.x = exp2(u_xlat3.x);
    u_xlat3.x = min(u_xlat3.x, _HeigtFogColBase.w);
    u_xlat11 = u_xlat8.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat11 = min(max(u_xlat11, 0.0), 1.0);
#else
    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
#endif
    u_xlat16_4.x = (-u_xlat11) + 2.0;
    u_xlat16_4.x = u_xlat11 * u_xlat16_4.x;
    u_xlat13.xyz = u_xlat16_4.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat6.xyz = (-u_xlat13.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat13.xyz = vec3(u_xlat17) * u_xlat6.xyz + u_xlat13.xyz;
    u_xlat13.xyz = u_xlat3.xxx * u_xlat13.xyz;
    u_xlat17 = (-u_xlat3.x) + 1.0;
    vs_TEXCOORD0.w = u_xlat5 * u_xlat17;
    u_xlat3.xyz = vec3(u_xlat5) * u_xlat13.xyz;
    u_xlat17 = u_xlat8.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat17 = min(max(u_xlat17, 0.0), 1.0);
#else
    u_xlat17 = clamp(u_xlat17, 0.0, 1.0);
#endif
    vs_TEXCOORD5.xyz = u_xlat8.xyz;
    u_xlat8.xyz = vec3(u_xlat17) * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    vs_TEXCOORD0.xyz = u_xlat8.xyz * vec3(u_xlat27) + u_xlat3.xyz;
    u_xlat3.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat3.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat3.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat8.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat3.xyz = u_xlat8.xxx * u_xlat3.xyz;
    u_xlat16_4.x = u_xlat3.y * u_xlat3.y;
    u_xlat16_4.x = u_xlat3.x * u_xlat3.x + (-u_xlat16_4.x);
    u_xlat16_5 = u_xlat3.yzzx * u_xlat3.xyzz;
    u_xlat16_7.x = dot(unity_SHBr, u_xlat16_5);
    u_xlat16_7.y = dot(unity_SHBg, u_xlat16_5);
    u_xlat16_7.z = dot(unity_SHBb, u_xlat16_5);
    u_xlat16_4.xyz = unity_SHC.xyz * u_xlat16_4.xxx + u_xlat16_7.xyz;
    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat3.w = 1.0;
    u_xlat16_7.x = dot(unity_SHAr, u_xlat3);
    u_xlat16_7.y = dot(unity_SHAg, u_xlat3);
    u_xlat16_7.z = dot(unity_SHAb, u_xlat3);
    u_xlat16_4.xyz = u_xlat16_4.xyz + u_xlat16_7.xyz;
    vs_TEXCOORD1.xyz = u_xlat16_4.xyz;
    vs_TEXCOORD1.w = 1.0;
    u_xlat6.x = float(0.5);
    u_xlat6.z = float(0.5);
    u_xlat6.y = _ProjectionParams.x;
    u_xlat1.xyz = u_xlat1.xyw * u_xlat6.xyz;
    u_xlat1.w = u_xlat1.y * 0.5;
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4_mhyJitteredVP[1];
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[3] * u_xlat2.wwww + u_xlat1;
    u_xlat2.xyz = vec3(u_xlat6.z * u_xlat1.x, u_xlat6.y * u_xlat1.y, u_xlat6.z * u_xlat1.w);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    u_xlat2.w = u_xlat2.y * 0.5;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy;
    u_xlat8.x = dot(unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz);
    vs_TEXCOORD4.z = sqrt(u_xlat8.x);
    u_xlat8.x = dot(unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz);
    vs_TEXCOORD4.w = sqrt(u_xlat8.x);
    vs_TEXCOORD5.w = 0.0;
    u_xlat8.xyz = in_TANGENT0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat8.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_TANGENT0.xxx + u_xlat8.xyz;
    u_xlat0.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_TANGENT0.zzz + u_xlat8.xyz;
    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat0.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    vs_TEXCOORD6.xyz = u_xlat0.xyz;
    vs_TEXCOORD6.w = 0.0;
    vs_TEXCOORD7.xyz = u_xlat3.xyz;
    vs_TEXCOORD7.w = 0.0;
    u_xlat1.xyz = u_xlat0.yzx * u_xlat3.zxy;
    u_xlat0.xyz = u_xlat3.yzx * u_xlat0.zxy + (-u_xlat1.xyz);
    u_xlat24 = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD8.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    vs_TEXCOORD8.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _LightColor0;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	float _AlphaRange;
uniform 	float _AlphaOffset;
uniform 	float _Opacity;
uniform 	mediump float _BottomAlphaToggle;
uniform 	float _AlphaBottomRange;
uniform 	float _AlphaBottomOffset;
uniform 	vec4 _WaterfallTex01_ST;
uniform 	mediump vec4 _FoamUVCoord01;
uniform 	mediump vec4 _FoamUVCoord02;
uniform 	float _FoamRange;
uniform 	float _FoamOffset;
uniform 	vec4 _DayColor;
uniform 	vec4 _BottomColor;
uniform 	vec4 _TopColor;
uniform 	float _ColorGradientRange;
uniform 	float _ColorGradientOffset;
uniform 	vec4 _ReflectionColor_Dark;
uniform 	vec4 _ReflectionColor_Light;
uniform 	float _Normal01_U_Speed;
uniform 	vec4 _Normal01_ST;
uniform 	float _Normal01_VSpeed;
uniform 	float _Normal02_U_Speed;
uniform 	vec4 _Normal02_ST;
uniform 	float _Normal02_V_Speed;
uniform 	vec4 _DistortionIntensity;
uniform 	float _ReflectionBrightness;
uniform 	float _ReflectionIntensity;
uniform 	float _WaterFall01_Speed;
uniform 	float _Waterfall02_Speed;
uniform 	mediump vec4 _WaterfallPatternColor;
uniform 	float _Waterfall01Brightness;
uniform 	float _Waterfall02Brightness;
uniform 	float _SprayRange;
uniform 	float _SprayOffset;
uniform 	float _ShadowStrength;
uniform 	vec4 _WaterfallSpecTex_ST;
uniform 	float _Detail01_U_Speed;
uniform 	vec4 _NoiseTex_ST;
uniform 	float _Detail01_V_Speed;
uniform 	float _NoiselDistortionValue;
uniform 	mediump vec4 _WaterfallSpecColor;
uniform 	mediump vec4 _FoamColor;
uniform 	vec3 _ES_MainLightColor;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _WaterfallTex01;
uniform lowp sampler2D _Normal01;
uniform lowp sampler2D _Normal02;
uniform lowp samplerCube _Reflection;
uniform lowp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _WaterfallSpecTex;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
in highp vec4 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
lowp float u_xlat10_0;
bvec2 u_xlatb0;
vec3 u_xlat1;
vec4 u_xlat2;
lowp float u_xlat10_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
vec4 u_xlat4;
vec3 u_xlat5;
lowp vec3 u_xlat10_5;
vec3 u_xlat6;
vec3 u_xlat7;
mediump vec3 u_xlat16_8;
vec3 u_xlat9;
lowp float u_xlat10_9;
vec3 u_xlat10;
mediump float u_xlat16_10;
lowp float u_xlat10_10;
bool u_xlatb10;
float u_xlat11;
vec2 u_xlat12;
mediump float u_xlat16_17;
float u_xlat18;
float u_xlat19;
lowp float u_xlat10_19;
float u_xlat27;
mediump float u_xlat16_27;
bool u_xlatb27;
float u_xlat28;
bool u_xlatb28;
float u_xlat29;
bool u_xlatb29;
float u_xlat30;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat18 = texture(_CameraDepthTexture, u_xlat0.xy).x;
    u_xlat18 = _ZBufferParams.z * u_xlat18 + _ZBufferParams.w;
    u_xlat18 = float(1.0) / u_xlat18;
    u_xlat18 = u_xlat18 + (-vs_TEXCOORD3.w);
    u_xlat27 = u_xlat18 * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
    u_xlat18 = u_xlat18 / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat1.x = (-u_xlat27) + 1.0;
    u_xlat18 = u_xlat18 * u_xlat1.x + u_xlat27;
    u_xlat27 = vs_TEXCOORD4.y * _AlphaRange + _AlphaOffset;
    u_xlat1.x = vs_TEXCOORD4.y * _AlphaBottomRange + _AlphaBottomOffset;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(_BottomAlphaToggle==1.0);
#else
    u_xlatb10 = _BottomAlphaToggle==1.0;
#endif
    u_xlat1.x = (u_xlatb10) ? u_xlat1.x : 1.0;
    u_xlat10.xy = vs_TEXCOORD4.xy * _WaterfallTex01_ST.xy + _WaterfallTex01_ST.zw;
    u_xlat2.xy = vec2(u_xlat10.x * vs_TEXCOORD4.z, u_xlat10.y * vs_TEXCOORD4.w);
    u_xlat10.xy = vec2(_Time.y * _FoamUVCoord01.z, _Time.y * _FoamUVCoord01.w);
    u_xlat10.xy = u_xlat2.xy * _FoamUVCoord01.xy + u_xlat10.xy;
    u_xlat3.xy = vec2(_Time.y * _FoamUVCoord02.z, _Time.y * _FoamUVCoord02.w);
    u_xlat3.xy = u_xlat2.xy * _FoamUVCoord02.xy + u_xlat3.xy;
    u_xlat28 = vs_TEXCOORD4.y * _FoamRange + _FoamOffset;
    u_xlat10_10 = texture(_WaterfallTex01, u_xlat10.xy).x;
    u_xlat10_19 = texture(_WaterfallTex01, u_xlat3.xy).y;
    u_xlat16_10 = u_xlat10_19 + u_xlat10_10;
    u_xlat10.x = u_xlat28 + u_xlat16_10;
#ifdef UNITY_ADRENO_ES3
    u_xlat10.x = min(max(u_xlat10.x, 0.0), 1.0);
#else
    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
#endif
    u_xlat19 = vs_TEXCOORD4.y * _ColorGradientRange + _ColorGradientOffset;
#ifdef UNITY_ADRENO_ES3
    u_xlat19 = min(max(u_xlat19, 0.0), 1.0);
#else
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
#endif
    u_xlat3.xyz = (-_BottomColor.xyz) + _TopColor.xyz;
    u_xlat3.xyz = vec3(u_xlat19) * u_xlat3.xyz + _BottomColor.xyz;
    u_xlat4.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat19 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat19 = inversesqrt(u_xlat19);
    u_xlat4.xyz = vec3(u_xlat19) * u_xlat4.xyz;
    u_xlat5.xy = vs_TEXCOORD4.xy * _Normal01_ST.xy + _Normal01_ST.zw;
    u_xlat19 = _Time.y * _Normal01_VSpeed;
    u_xlat30 = u_xlat5.x * vs_TEXCOORD4.z;
    u_xlat6.x = _Time.y * _Normal01_U_Speed + u_xlat30;
    u_xlat6.y = u_xlat5.y * vs_TEXCOORD4.w + u_xlat19;
    u_xlat5.xy = vs_TEXCOORD4.xy * _Normal02_ST.xy + _Normal02_ST.zw;
    u_xlat5.xy = vec2(u_xlat5.x * vs_TEXCOORD4.z, u_xlat5.y * vs_TEXCOORD4.w);
    u_xlat7.x = _Time.y * _Normal02_U_Speed + u_xlat5.x;
    u_xlat7.y = _Time.y * _Normal02_V_Speed + u_xlat5.y;
    u_xlat10_5.xyz = texture(_Normal01, u_xlat6.xy).xyz;
    u_xlat16_8.xyz = u_xlat10_5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat10_5.xyz = texture(_Normal02, u_xlat7.xy).xyz;
    u_xlat16_8.xyz = u_xlat10_5.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_8.xyz;
    u_xlat16_8.xyz = u_xlat16_8.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat5.xyz = u_xlat16_8.xyz * _DistortionIntensity.xyz;
    u_xlat6.x = vs_TEXCOORD6.x;
    u_xlat6.y = vs_TEXCOORD8.x;
    u_xlat6.z = vs_TEXCOORD7.x;
    u_xlat6.x = dot(u_xlat6.xyz, u_xlat5.xyz);
    u_xlat7.x = vs_TEXCOORD6.y;
    u_xlat7.y = vs_TEXCOORD8.y;
    u_xlat7.z = vs_TEXCOORD7.y;
    u_xlat6.y = dot(u_xlat7.xyz, u_xlat5.xyz);
    u_xlat7.x = vs_TEXCOORD6.z;
    u_xlat7.y = vs_TEXCOORD8.z;
    u_xlat7.z = vs_TEXCOORD7.z;
    u_xlat6.z = dot(u_xlat7.xyz, u_xlat5.xyz);
    u_xlat19 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat19 = inversesqrt(u_xlat19);
    u_xlat5.xyz = vec3(u_xlat19) * u_xlat6.xyz;
    u_xlat19 = dot((-u_xlat4.xyz), u_xlat5.xyz);
    u_xlat19 = u_xlat19 + u_xlat19;
    u_xlat4.xyz = u_xlat5.xyz * (-vec3(u_xlat19)) + (-u_xlat4.xyz);
    u_xlat10_19 = texture(_Reflection, u_xlat4.xyz).x;
    u_xlat4.xyz = (-_ReflectionColor_Dark.xyz) + _ReflectionColor_Light.xyz;
    u_xlat4.xyz = vec3(u_xlat10_19) * u_xlat4.xyz + _ReflectionColor_Dark.xyz;
    u_xlat5.xyz = u_xlat3.xyz * vec3(0.200000003, 0.200000003, 0.200000003);
    u_xlat3.xyz = u_xlat3.xyz * u_xlat4.xyz;
    u_xlat3.xyz = u_xlat3.xyz * vec3(_ReflectionBrightness) + (-u_xlat5.xyz);
    u_xlat3.xyz = vec3(vec3(_ReflectionIntensity, _ReflectionIntensity, _ReflectionIntensity)) * u_xlat3.xyz + u_xlat5.xyz;
    u_xlat2.zw = _Time.yy * vec2(_WaterFall01_Speed, _Waterfall02_Speed) + u_xlat2.yy;
    u_xlat10_19 = texture(_WaterfallTex01, u_xlat2.xz).x;
    u_xlat10_2 = texture(_WaterfallTex01, u_xlat2.xw).y;
    u_xlat16_8.x = (-u_xlat10_19) + u_xlat10_2;
    u_xlat16_8.x = u_xlat10_2 * u_xlat16_8.x + u_xlat10_19;
    u_xlat11 = u_xlat10_2 * _Waterfall02Brightness;
    u_xlat19 = u_xlat10_19 * _Waterfall01Brightness;
    u_xlat2.x = u_xlat10_2 * _Waterfall02Brightness + (-u_xlat19);
    u_xlat19 = u_xlat11 * u_xlat2.x + u_xlat19;
    u_xlat2.x = vs_TEXCOORD4.y * _SprayRange + _SprayOffset;
    u_xlat2.x = (-u_xlat2.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat19 = u_xlat19 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat19 = min(max(u_xlat19, 0.0), 1.0);
#else
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
#endif
    u_xlat2.xyz = u_xlat16_8.xxx * _WaterfallPatternColor.xyz + (-u_xlat3.xyz);
    u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz + u_xlat3.xyz;
    u_xlat10_0 = texture(_ShadowMapTexture, u_xlat0.xy).x;
    u_xlat9.x = (-_ShadowStrength) + 1.0;
    u_xlat0.x = u_xlat10_0 * u_xlat9.x + _ShadowStrength;
    u_xlat3.xy = vs_TEXCOORD4.xy * _WaterfallSpecTex_ST.xy + _WaterfallSpecTex_ST.zw;
    u_xlat16_8.x = vs_TEXCOORD4.w * 0.5;
    u_xlat16_8.x = vs_TEXCOORD4.w * u_xlat3.y + (-u_xlat16_8.x);
    u_xlat12.xy = vs_TEXCOORD4.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat4.x = _Time.y * _Detail01_U_Speed + u_xlat12.x;
    u_xlat4.y = _Time.y * _Detail01_V_Speed + u_xlat12.y;
    u_xlat10_9 = texture(_NoiseTex, u_xlat4.xy).x;
    u_xlat3.x = u_xlat10_9 * _NoiselDistortionValue + u_xlat3.x;
    u_xlat3.y = u_xlat10_9 * _NoiselDistortionValue + u_xlat16_8.x;
    u_xlat10_9 = texture(_WaterfallSpecTex, u_xlat3.xy).x;
    u_xlat16_3.xyz = vec3(u_xlat10_9) * _WaterfallSpecColor.xyz;
    u_xlat9.x = (-u_xlat27) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat9.x = min(max(u_xlat9.x, 0.0), 1.0);
#else
    u_xlat9.x = clamp(u_xlat9.x, 0.0, 1.0);
#endif
    u_xlat9.x = u_xlat9.x * u_xlat18;
    u_xlat9.x = u_xlat9.x * _Opacity;
    u_xlat9.x = u_xlat1.x * u_xlat9.x;
    u_xlat4.w = u_xlat10.x * u_xlat9.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.w = min(max(u_xlat4.w, 0.0), 1.0);
#else
    u_xlat4.w = clamp(u_xlat4.w, 0.0, 1.0);
#endif
    u_xlat9.xyz = u_xlat2.xyz * _DayColor.xyz;
    u_xlat0.xyz = u_xlat9.xyz * u_xlat0.xxx + u_xlat16_3.xyz;
    u_xlat27 = (-u_xlat28) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
    u_xlat27 = u_xlat27 * u_xlat10.x;
    u_xlat0.xyz = vec3(u_xlat27) * _FoamColor.xyz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * _ES_MainLightColor.xyz;
    u_xlat16_27 = max(_LightColor0.w, 1.0);
    u_xlat0.xyz = vec3(u_xlat16_27) * u_xlat0.xyz;
    u_xlat1.xyz = vs_TEXCOORD5.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat27 = dot(u_xlat1.xyz, u_xlat2.xyz);
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlat10.y = u_xlat1.x * _HeigtFogParams.y;
    u_xlat28 = u_xlat1.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat28 = min(max(u_xlat28, 0.0), 1.0);
#else
    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
#endif
    u_xlat2.x = (-u_xlat28) + 2.0;
    u_xlat28 = u_xlat28 * u_xlat2.x;
    u_xlat2.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!((-u_xlat27)>=u_xlat2.x);
#else
    u_xlatb27 = (-u_xlat27)>=u_xlat2.x;
#endif
    u_xlat2.x = u_xlat28 * _HeigtFogColDelta.w;
    u_xlat27 = (u_xlatb27) ? u_xlat2.x : u_xlat28;
    u_xlat27 = log2(u_xlat27);
    u_xlat27 = u_xlat27 * unity_FogColor.w;
    u_xlat27 = exp2(u_xlat27);
    u_xlat27 = min(u_xlat27, _HeigtFogColBase.w);
    u_xlat28 = vs_TEXCOORD5.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat28 = min(max(u_xlat28, 0.0), 1.0);
#else
    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
#endif
    u_xlat16_8.x = (-u_xlat28) + 2.0;
    u_xlat16_8.x = u_xlat28 * u_xlat16_8.x;
    u_xlat2.xyz = u_xlat16_8.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat28 = u_xlat1.x + (-_HeigtFogRamp.w);
    u_xlat28 = u_xlat28 * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat28 = min(max(u_xlat28, 0.0), 1.0);
#else
    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
#endif
    u_xlat3.xyz = (-u_xlat2.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat2.xyz = vec3(u_xlat28) * u_xlat3.xyz + u_xlat2.xyz;
    u_xlat28 = u_xlat1.y * _HeigtFogParams.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb29 = !!(0.00999999978<abs(u_xlat28));
#else
    u_xlatb29 = 0.00999999978<abs(u_xlat28);
#endif
    u_xlat3.x = u_xlat28 * -1.44269502;
    u_xlat3.x = exp2(u_xlat3.x);
    u_xlat3.x = (-u_xlat3.x) + 1.0;
    u_xlat28 = u_xlat3.x / u_xlat28;
    u_xlat16_8.x = (u_xlatb29) ? u_xlat28 : 1.0;
    u_xlat10.x = u_xlat1.y * _HeigtFogParams2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb28 = !!(0.00999999978<abs(u_xlat10.x));
#else
    u_xlatb28 = 0.00999999978<abs(u_xlat10.x);
#endif
    u_xlat29 = u_xlat10.x * -1.44269502;
    u_xlat29 = exp2(u_xlat29);
    u_xlat29 = (-u_xlat29) + 1.0;
    u_xlat10.x = u_xlat29 / u_xlat10.x;
    u_xlat16_8.y = (u_xlatb28) ? u_xlat10.x : 1.0;
    u_xlat10.x = u_xlat1.x * _HeigtFogParams2.y;
    u_xlat16_8.xy = u_xlat10.yx * u_xlat16_8.xy;
    u_xlat16_8.x = exp2((-u_xlat16_8.x));
    u_xlat16_8.x = (-u_xlat16_8.x) + 1.0;
    u_xlat16_17 = exp2((-u_xlat16_8.y));
    u_xlat16_8.y = (-u_xlat16_17) + 1.0;
    u_xlat16_8.xy = max(u_xlat16_8.xy, vec2(0.0, 0.0));
    u_xlat16_8.x = u_xlat16_8.y + u_xlat16_8.x;
    u_xlat1.x = u_xlat1.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat16_17 = (-u_xlat1.x) + 2.0;
    u_xlat16_17 = u_xlat1.x * u_xlat16_17;
    u_xlat1.x = u_xlat16_17 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat1.x = u_xlat1.x + 1.0;
    u_xlat16_8.x = u_xlat1.x * u_xlat16_8.x;
    u_xlat1.x = min(u_xlat16_8.x, _HeigtFogColBase.w);
    u_xlat10.x = vs_TEXCOORD5.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat10.x = min(max(u_xlat10.x, 0.0), 1.0);
#else
    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
#endif
    u_xlat10.xyz = u_xlat10.xxx * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    u_xlat2.xyz = vec3(u_xlat27) * u_xlat2.xyz;
    u_xlat29 = (-u_xlat1.x) + 1.0;
    u_xlat2.xyz = vec3(u_xlat29) * u_xlat2.xyz;
    u_xlat1.xyz = u_xlat10.xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat27 = (-u_xlat27) + 1.0;
    u_xlat27 = u_xlat29 * u_xlat27;
    u_xlat4.xyz = vec3(u_xlat27) * u_xlat0.xyz + u_xlat1.xyz;
    SV_Target0 = u_xlat4;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "HALF_RESOLUTION_PARTICLE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	mediump float _MHYZBias;
uniform 	vec4 hlslcc_mtx4x4_mhyJitteredVP[4];
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
mediump vec4 u_xlat16_3;
bool u_xlatb3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat6;
mediump vec3 u_xlat16_7;
float u_xlat11;
mediump float u_xlat16_12;
float u_xlat18;
bool u_xlatb18;
float u_xlat19;
float u_xlat24;
bool u_xlatb24;
float u_xlat27;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat2.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    gl_Position = u_xlat2;
    vs_TEXCOORD2.zw = u_xlat2.zw;
    vs_COLOR0 = in_COLOR0;
    u_xlat3.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat24 = u_xlat3.y * _HeigtFogParams.x;
    u_xlat18 = u_xlat24 * -1.44269502;
    u_xlat18 = exp2(u_xlat18);
    u_xlat18 = (-u_xlat18) + 1.0;
    u_xlat18 = u_xlat18 / u_xlat24;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(0.00999999978<abs(u_xlat24));
#else
    u_xlatb24 = 0.00999999978<abs(u_xlat24);
#endif
    u_xlat16_4.x = (u_xlatb24) ? u_xlat18 : 1.0;
    u_xlat24 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat24 = sqrt(u_xlat24);
    u_xlat18 = u_xlat24 * _HeigtFogParams.y;
    u_xlat16_4.x = u_xlat18 * u_xlat16_4.x;
    u_xlat16_4.x = exp2((-u_xlat16_4.x));
    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
    u_xlat18 = u_xlat3.y * _HeigtFogParams2.x;
    u_xlat27 = u_xlat18 * -1.44269502;
    u_xlat27 = exp2(u_xlat27);
    u_xlat27 = (-u_xlat27) + 1.0;
    u_xlat27 = u_xlat27 / u_xlat18;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(0.00999999978<abs(u_xlat18));
#else
    u_xlatb18 = 0.00999999978<abs(u_xlat18);
#endif
    u_xlat16_12 = (u_xlatb18) ? u_xlat27 : 1.0;
    u_xlat18 = u_xlat24 * _HeigtFogParams2.y;
    u_xlat16_12 = u_xlat18 * u_xlat16_12;
    u_xlat16_12 = exp2((-u_xlat16_12));
    u_xlat16_4.y = (-u_xlat16_12) + 1.0;
    u_xlat16_4.xy = max(u_xlat16_4.xy, vec2(0.0, 0.0));
    u_xlat16_4.x = u_xlat16_4.y + u_xlat16_4.x;
    u_xlat18 = u_xlat24 * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat16_12 = (-u_xlat18) + 2.0;
    u_xlat16_12 = u_xlat18 * u_xlat16_12;
    u_xlat18 = u_xlat16_12 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat18 = u_xlat18 + 1.0;
    u_xlat16_4.x = u_xlat18 * u_xlat16_4.x;
    u_xlat18 = min(u_xlat16_4.x, _HeigtFogColBase.w);
    u_xlat27 = (-u_xlat18) + 1.0;
    u_xlat5.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat5.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat5.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat3.x = dot(u_xlat3.xyz, u_xlat5.xyz);
    u_xlat11 = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!((-u_xlat3.x)>=u_xlat11);
#else
    u_xlatb3 = (-u_xlat3.x)>=u_xlat11;
#endif
    u_xlat11 = u_xlat24 * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat11 = min(max(u_xlat11, 0.0), 1.0);
#else
    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
#endif
    u_xlat24 = u_xlat24 + (-_HeigtFogRamp.w);
    u_xlat24 = u_xlat24 * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat19 = (-u_xlat11) + 2.0;
    u_xlat11 = u_xlat19 * u_xlat11;
    u_xlat19 = u_xlat11 * _HeigtFogColDelta.w;
    u_xlat3.x = (u_xlatb3) ? u_xlat19 : u_xlat11;
    u_xlat3.x = log2(u_xlat3.x);
    u_xlat3.x = u_xlat3.x * unity_FogColor.w;
    u_xlat3.x = exp2(u_xlat3.x);
    u_xlat3.x = min(u_xlat3.x, _HeigtFogColBase.w);
    u_xlat11 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat11 = min(max(u_xlat11, 0.0), 1.0);
#else
    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
#endif
    u_xlat16_4.x = (-u_xlat11) + 2.0;
    u_xlat16_4.x = u_xlat11 * u_xlat16_4.x;
    u_xlat5.xyz = u_xlat16_4.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat6.xyz = (-u_xlat5.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat5.xyz = vec3(u_xlat24) * u_xlat6.xyz + u_xlat5.xyz;
    u_xlat5.xyz = u_xlat3.xxx * u_xlat5.xyz;
    u_xlat24 = (-u_xlat3.x) + 1.0;
    vs_TEXCOORD0.w = u_xlat27 * u_xlat24;
    u_xlat3.xyz = vec3(u_xlat27) * u_xlat5.xyz;
    u_xlat24 = u_xlat0.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    u_xlat0.xyz = vec3(u_xlat24) * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    vs_TEXCOORD0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat3.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat0.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    u_xlat16_4.x = u_xlat0.y * u_xlat0.y;
    u_xlat16_4.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_4.x);
    u_xlat16_3 = u_xlat0.yzzx * u_xlat0.xyzz;
    u_xlat16_7.x = dot(unity_SHBr, u_xlat16_3);
    u_xlat16_7.y = dot(unity_SHBg, u_xlat16_3);
    u_xlat16_7.z = dot(unity_SHBb, u_xlat16_3);
    u_xlat16_4.xyz = unity_SHC.xyz * u_xlat16_4.xxx + u_xlat16_7.xyz;
    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat0.w = 1.0;
    u_xlat16_7.x = dot(unity_SHAr, u_xlat0);
    u_xlat16_7.y = dot(unity_SHAg, u_xlat0);
    u_xlat16_7.z = dot(unity_SHAb, u_xlat0);
    u_xlat16_4.xyz = u_xlat16_4.xyz + u_xlat16_7.xyz;
    vs_TEXCOORD1.xyz = u_xlat16_4.xyz;
    vs_TEXCOORD1.w = 1.0;
    u_xlat5.x = float(0.5);
    u_xlat5.z = float(0.5);
    u_xlat5.y = _ProjectionParams.x;
    u_xlat2.xyz = u_xlat2.xyw * u_xlat5.xyz;
    u_xlat2.w = u_xlat2.y * 0.5;
    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4_mhyJitteredVP[1];
    u_xlat2 = hlslcc_mtx4x4_mhyJitteredVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4_mhyJitteredVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat2.xyz = vec3(u_xlat5.z * u_xlat1.x, u_xlat5.y * u_xlat1.y, u_xlat5.z * u_xlat1.w);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    u_xlat2.w = u_xlat2.y * 0.5;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat24 = dot(hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, hlslcc_mtx4x4unity_ObjectToWorld[0].xyz);
    vs_TEXCOORD4.z = sqrt(u_xlat24);
    u_xlat24 = dot(hlslcc_mtx4x4unity_ObjectToWorld[1].xyz, hlslcc_mtx4x4unity_ObjectToWorld[1].xyz);
    vs_TEXCOORD4.w = sqrt(u_xlat24);
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD5.w = 0.0;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
    vs_TEXCOORD6.xyz = u_xlat1.xyz;
    vs_TEXCOORD6.w = 0.0;
    vs_TEXCOORD7.xyz = u_xlat0.xyz;
    vs_TEXCOORD7.w = 0.0;
    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
    u_xlat24 = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD8.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    vs_TEXCOORD8.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _LightColor0;
uniform 	float _AlphaRange;
uniform 	float _AlphaOffset;
uniform 	float _Opacity;
uniform 	mediump float _BottomAlphaToggle;
uniform 	float _AlphaBottomRange;
uniform 	float _AlphaBottomOffset;
uniform 	vec4 _WaterfallTex01_ST;
uniform 	mediump vec4 _FoamUVCoord01;
uniform 	mediump vec4 _FoamUVCoord02;
uniform 	float _FoamRange;
uniform 	float _FoamOffset;
uniform 	vec4 _DayColor;
uniform 	vec4 _BottomColor;
uniform 	vec4 _TopColor;
uniform 	float _ColorGradientRange;
uniform 	float _ColorGradientOffset;
uniform 	vec4 _ReflectionColor_Dark;
uniform 	vec4 _ReflectionColor_Light;
uniform 	float _Normal01_U_Speed;
uniform 	vec4 _Normal01_ST;
uniform 	float _Normal01_VSpeed;
uniform 	float _Normal02_U_Speed;
uniform 	vec4 _Normal02_ST;
uniform 	float _Normal02_V_Speed;
uniform 	vec4 _DistortionIntensity;
uniform 	float _ReflectionBrightness;
uniform 	float _ReflectionIntensity;
uniform 	float _WaterFall01_Speed;
uniform 	float _Waterfall02_Speed;
uniform 	mediump vec4 _WaterfallPatternColor;
uniform 	float _Waterfall01Brightness;
uniform 	float _Waterfall02Brightness;
uniform 	float _SprayRange;
uniform 	float _SprayOffset;
uniform 	float _ShadowStrength;
uniform 	vec4 _WaterfallSpecTex_ST;
uniform 	float _Detail01_U_Speed;
uniform 	vec4 _NoiseTex_ST;
uniform 	float _Detail01_V_Speed;
uniform 	float _NoiselDistortionValue;
uniform 	mediump vec4 _WaterfallSpecColor;
uniform 	mediump vec4 _FoamColor;
uniform 	vec3 _ES_MainLightColor;
uniform lowp sampler2D _WaterfallTex01;
uniform lowp sampler2D _Normal01;
uniform lowp sampler2D _Normal02;
uniform lowp samplerCube _Reflection;
uniform lowp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _WaterfallSpecTex;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
in highp vec4 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
bvec2 u_xlatb0;
vec4 u_xlat1;
lowp float u_xlat10_1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
vec4 u_xlat3;
vec3 u_xlat4;
lowp vec3 u_xlat10_4;
vec3 u_xlat5;
vec3 u_xlat6;
mediump vec3 u_xlat16_7;
float u_xlat8;
vec3 u_xlat9;
vec3 u_xlat10;
mediump float u_xlat16_15;
vec2 u_xlat16;
mediump float u_xlat16_16;
lowp float u_xlat10_16;
bool u_xlatb16;
float u_xlat18;
float u_xlat24;
mediump float u_xlat16_24;
lowp float u_xlat10_24;
bool u_xlatb24;
float u_xlat25;
lowp float u_xlat10_25;
bool u_xlatb25;
float u_xlat26;
bool u_xlatb26;
float u_xlat27;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.x = vs_TEXCOORD4.y * _AlphaRange + _AlphaOffset;
    u_xlat8 = vs_TEXCOORD4.y * _AlphaBottomRange + _AlphaBottomOffset;
#ifdef UNITY_ADRENO_ES3
    u_xlat8 = min(max(u_xlat8, 0.0), 1.0);
#else
    u_xlat8 = clamp(u_xlat8, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(_BottomAlphaToggle==1.0);
#else
    u_xlatb16 = _BottomAlphaToggle==1.0;
#endif
    u_xlat8 = (u_xlatb16) ? u_xlat8 : 1.0;
    u_xlat16.xy = vs_TEXCOORD4.xy * _WaterfallTex01_ST.xy + _WaterfallTex01_ST.zw;
    u_xlat1.xy = vec2(u_xlat16.x * vs_TEXCOORD4.z, u_xlat16.y * vs_TEXCOORD4.w);
    u_xlat16.xy = vec2(_Time.y * _FoamUVCoord01.z, _Time.y * _FoamUVCoord01.w);
    u_xlat16.xy = u_xlat1.xy * _FoamUVCoord01.xy + u_xlat16.xy;
    u_xlat2.xy = vec2(_Time.y * _FoamUVCoord02.z, _Time.y * _FoamUVCoord02.w);
    u_xlat2.xy = u_xlat1.xy * _FoamUVCoord02.xy + u_xlat2.xy;
    u_xlat18 = vs_TEXCOORD4.y * _FoamRange + _FoamOffset;
    u_xlat10_16 = texture(_WaterfallTex01, u_xlat16.xy).x;
    u_xlat10_24 = texture(_WaterfallTex01, u_xlat2.xy).y;
    u_xlat16_16 = u_xlat10_24 + u_xlat10_16;
    u_xlat16.x = u_xlat18 + u_xlat16_16;
#ifdef UNITY_ADRENO_ES3
    u_xlat16.x = min(max(u_xlat16.x, 0.0), 1.0);
#else
    u_xlat16.x = clamp(u_xlat16.x, 0.0, 1.0);
#endif
    u_xlat24 = vs_TEXCOORD4.y * _ColorGradientRange + _ColorGradientOffset;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat2.xyw = (-_BottomColor.xyz) + _TopColor.xyz;
    u_xlat2.xyw = vec3(u_xlat24) * u_xlat2.xyw + _BottomColor.xyz;
    u_xlat3.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat24 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat3.xyz = vec3(u_xlat24) * u_xlat3.xyz;
    u_xlat4.xy = vs_TEXCOORD4.xy * _Normal01_ST.xy + _Normal01_ST.zw;
    u_xlat24 = _Time.y * _Normal01_VSpeed;
    u_xlat27 = u_xlat4.x * vs_TEXCOORD4.z;
    u_xlat5.x = _Time.y * _Normal01_U_Speed + u_xlat27;
    u_xlat5.y = u_xlat4.y * vs_TEXCOORD4.w + u_xlat24;
    u_xlat4.xy = vs_TEXCOORD4.xy * _Normal02_ST.xy + _Normal02_ST.zw;
    u_xlat4.xy = vec2(u_xlat4.x * vs_TEXCOORD4.z, u_xlat4.y * vs_TEXCOORD4.w);
    u_xlat6.x = _Time.y * _Normal02_U_Speed + u_xlat4.x;
    u_xlat6.y = _Time.y * _Normal02_V_Speed + u_xlat4.y;
    u_xlat10_4.xyz = texture(_Normal01, u_xlat5.xy).xyz;
    u_xlat16_7.xyz = u_xlat10_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat10_4.xyz = texture(_Normal02, u_xlat6.xy).xyz;
    u_xlat16_7.xyz = u_xlat10_4.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_7.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat4.xyz = u_xlat16_7.xyz * _DistortionIntensity.xyz;
    u_xlat5.x = vs_TEXCOORD6.x;
    u_xlat5.y = vs_TEXCOORD8.x;
    u_xlat5.z = vs_TEXCOORD7.x;
    u_xlat5.x = dot(u_xlat5.xyz, u_xlat4.xyz);
    u_xlat6.x = vs_TEXCOORD6.y;
    u_xlat6.y = vs_TEXCOORD8.y;
    u_xlat6.z = vs_TEXCOORD7.y;
    u_xlat5.y = dot(u_xlat6.xyz, u_xlat4.xyz);
    u_xlat6.x = vs_TEXCOORD6.z;
    u_xlat6.y = vs_TEXCOORD8.z;
    u_xlat6.z = vs_TEXCOORD7.z;
    u_xlat5.z = dot(u_xlat6.xyz, u_xlat4.xyz);
    u_xlat24 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat4.xyz = vec3(u_xlat24) * u_xlat5.xyz;
    u_xlat24 = dot((-u_xlat3.xyz), u_xlat4.xyz);
    u_xlat24 = u_xlat24 + u_xlat24;
    u_xlat3.xyz = u_xlat4.xyz * (-vec3(u_xlat24)) + (-u_xlat3.xyz);
    u_xlat10_24 = texture(_Reflection, u_xlat3.xyz).x;
    u_xlat3.xyz = (-_ReflectionColor_Dark.xyz) + _ReflectionColor_Light.xyz;
    u_xlat3.xyz = vec3(u_xlat10_24) * u_xlat3.xyz + _ReflectionColor_Dark.xyz;
    u_xlat4.xyz = u_xlat2.xyw * vec3(0.200000003, 0.200000003, 0.200000003);
    u_xlat2.xyw = u_xlat2.xyw * u_xlat3.xyz;
    u_xlat2.xyw = u_xlat2.xyw * vec3(_ReflectionBrightness) + (-u_xlat4.xyz);
    u_xlat2.xyw = vec3(vec3(_ReflectionIntensity, _ReflectionIntensity, _ReflectionIntensity)) * u_xlat2.xyw + u_xlat4.xyz;
    u_xlat1.zw = _Time.yy * vec2(_WaterFall01_Speed, _Waterfall02_Speed) + u_xlat1.yy;
    u_xlat10_24 = texture(_WaterfallTex01, u_xlat1.xz).x;
    u_xlat10_1 = texture(_WaterfallTex01, u_xlat1.xw).y;
    u_xlat16_7.x = (-u_xlat10_24) + u_xlat10_1;
    u_xlat16_7.x = u_xlat10_1 * u_xlat16_7.x + u_xlat10_24;
    u_xlat9.x = u_xlat10_1 * _Waterfall02Brightness;
    u_xlat24 = u_xlat10_24 * _Waterfall01Brightness;
    u_xlat1.x = u_xlat10_1 * _Waterfall02Brightness + (-u_xlat24);
    u_xlat24 = u_xlat9.x * u_xlat1.x + u_xlat24;
    u_xlat1.x = vs_TEXCOORD4.y * _SprayRange + _SprayOffset;
    u_xlat1.x = (-u_xlat1.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat24 = u_xlat24 * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat16_7.xxx * _WaterfallPatternColor.xyz + (-u_xlat2.xyw);
    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz + u_xlat2.xyw;
    u_xlat2.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat10_24 = texture(_ShadowMapTexture, u_xlat2.xy).x;
    u_xlat25 = (-_ShadowStrength) + 1.0;
    u_xlat24 = u_xlat10_24 * u_xlat25 + _ShadowStrength;
    u_xlat2.xy = vs_TEXCOORD4.xy * _WaterfallSpecTex_ST.xy + _WaterfallSpecTex_ST.zw;
    u_xlat16_7.x = vs_TEXCOORD4.w * 0.5;
    u_xlat16_7.x = vs_TEXCOORD4.w * u_xlat2.y + (-u_xlat16_7.x);
    u_xlat10.xz = vs_TEXCOORD4.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat3.x = _Time.y * _Detail01_U_Speed + u_xlat10.x;
    u_xlat3.y = _Time.y * _Detail01_V_Speed + u_xlat10.z;
    u_xlat10_25 = texture(_NoiseTex, u_xlat3.xy).x;
    u_xlat2.x = u_xlat10_25 * _NoiselDistortionValue + u_xlat2.x;
    u_xlat2.y = u_xlat10_25 * _NoiselDistortionValue + u_xlat16_7.x;
    u_xlat10_25 = texture(_WaterfallSpecTex, u_xlat2.xy).x;
    u_xlat16_2.xyw = vec3(u_xlat10_25) * _WaterfallSpecColor.xyz;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x * _Opacity;
    u_xlat0.x = u_xlat8 * u_xlat0.x;
    u_xlat3.w = u_xlat16.x * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat3.w = min(max(u_xlat3.w, 0.0), 1.0);
#else
    u_xlat3.w = clamp(u_xlat3.w, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat1.xyz * _DayColor.xyz;
    u_xlat0.xyw = u_xlat1.xyz * vec3(u_xlat24) + u_xlat16_2.xyw;
    u_xlat1.x = (-u_xlat18) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat16.x = u_xlat16.x * u_xlat1.x;
    u_xlat0.xyz = u_xlat16.xxx * _FoamColor.xyz + u_xlat0.xyw;
    u_xlat0.xyz = u_xlat0.xyz * _ES_MainLightColor.xyz;
    u_xlat16_24 = max(_LightColor0.w, 1.0);
    u_xlat0.xyz = vec3(u_xlat16_24) * u_xlat0.xyz;
    u_xlat1.xyz = vs_TEXCOORD5.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat24 = dot(u_xlat1.xyz, u_xlat2.xyz);
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlat9.y = u_xlat1.x * _HeigtFogParams.y;
    u_xlat25 = u_xlat1.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat25 = min(max(u_xlat25, 0.0), 1.0);
#else
    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
#endif
    u_xlat2.x = (-u_xlat25) + 2.0;
    u_xlat25 = u_xlat25 * u_xlat2.x;
    u_xlat2.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!((-u_xlat24)>=u_xlat2.x);
#else
    u_xlatb24 = (-u_xlat24)>=u_xlat2.x;
#endif
    u_xlat2.x = u_xlat25 * _HeigtFogColDelta.w;
    u_xlat24 = (u_xlatb24) ? u_xlat2.x : u_xlat25;
    u_xlat24 = log2(u_xlat24);
    u_xlat24 = u_xlat24 * unity_FogColor.w;
    u_xlat24 = exp2(u_xlat24);
    u_xlat24 = min(u_xlat24, _HeigtFogColBase.w);
    u_xlat25 = vs_TEXCOORD5.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat25 = min(max(u_xlat25, 0.0), 1.0);
#else
    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
#endif
    u_xlat16_7.x = (-u_xlat25) + 2.0;
    u_xlat16_7.x = u_xlat25 * u_xlat16_7.x;
    u_xlat2.xyz = u_xlat16_7.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat25 = u_xlat1.x + (-_HeigtFogRamp.w);
    u_xlat25 = u_xlat25 * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat25 = min(max(u_xlat25, 0.0), 1.0);
#else
    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
#endif
    u_xlat4.xyz = (-u_xlat2.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat2.xyz = vec3(u_xlat25) * u_xlat4.xyz + u_xlat2.xyz;
    u_xlat25 = u_xlat1.y * _HeigtFogParams.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb26 = !!(0.00999999978<abs(u_xlat25));
#else
    u_xlatb26 = 0.00999999978<abs(u_xlat25);
#endif
    u_xlat4.x = u_xlat25 * -1.44269502;
    u_xlat4.x = exp2(u_xlat4.x);
    u_xlat4.x = (-u_xlat4.x) + 1.0;
    u_xlat25 = u_xlat4.x / u_xlat25;
    u_xlat16_7.x = (u_xlatb26) ? u_xlat25 : 1.0;
    u_xlat9.x = u_xlat1.y * _HeigtFogParams2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb25 = !!(0.00999999978<abs(u_xlat9.x));
#else
    u_xlatb25 = 0.00999999978<abs(u_xlat9.x);
#endif
    u_xlat26 = u_xlat9.x * -1.44269502;
    u_xlat26 = exp2(u_xlat26);
    u_xlat26 = (-u_xlat26) + 1.0;
    u_xlat9.x = u_xlat26 / u_xlat9.x;
    u_xlat16_7.y = (u_xlatb25) ? u_xlat9.x : 1.0;
    u_xlat9.x = u_xlat1.x * _HeigtFogParams2.y;
    u_xlat16_7.xy = u_xlat9.yx * u_xlat16_7.xy;
    u_xlat16_7.x = exp2((-u_xlat16_7.x));
    u_xlat16_7.x = (-u_xlat16_7.x) + 1.0;
    u_xlat16_15 = exp2((-u_xlat16_7.y));
    u_xlat16_7.y = (-u_xlat16_15) + 1.0;
    u_xlat16_7.xy = max(u_xlat16_7.xy, vec2(0.0, 0.0));
    u_xlat16_7.x = u_xlat16_7.y + u_xlat16_7.x;
    u_xlat1.x = u_xlat1.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat16_15 = (-u_xlat1.x) + 2.0;
    u_xlat16_15 = u_xlat1.x * u_xlat16_15;
    u_xlat1.x = u_xlat16_15 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat1.x = u_xlat1.x + 1.0;
    u_xlat16_7.x = u_xlat1.x * u_xlat16_7.x;
    u_xlat1.x = min(u_xlat16_7.x, _HeigtFogColBase.w);
    u_xlat9.x = vs_TEXCOORD5.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat9.x = min(max(u_xlat9.x, 0.0), 1.0);
#else
    u_xlat9.x = clamp(u_xlat9.x, 0.0, 1.0);
#endif
    u_xlat9.xyz = u_xlat9.xxx * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz;
    u_xlat26 = (-u_xlat1.x) + 1.0;
    u_xlat2.xyz = vec3(u_xlat26) * u_xlat2.xyz;
    u_xlat1.xyz = u_xlat9.xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat24 = (-u_xlat24) + 1.0;
    u_xlat24 = u_xlat26 * u_xlat24;
    u_xlat3.xyz = vec3(u_xlat24) * u_xlat0.xyz + u_xlat1.xyz;
    SV_Target0 = u_xlat3;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	mediump float _MHYZBias;
uniform 	vec4 hlslcc_mtx4x4_mhyJitteredVP[4];
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
mediump vec4 u_xlat16_3;
bool u_xlatb3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat6;
mediump vec3 u_xlat16_7;
float u_xlat11;
mediump float u_xlat16_12;
float u_xlat18;
bool u_xlatb18;
float u_xlat19;
float u_xlat24;
bool u_xlatb24;
float u_xlat27;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat2.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    gl_Position = u_xlat2;
    vs_TEXCOORD2.zw = u_xlat2.zw;
    vs_COLOR0 = in_COLOR0;
    u_xlat3.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat24 = u_xlat3.y * _HeigtFogParams.x;
    u_xlat18 = u_xlat24 * -1.44269502;
    u_xlat18 = exp2(u_xlat18);
    u_xlat18 = (-u_xlat18) + 1.0;
    u_xlat18 = u_xlat18 / u_xlat24;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(0.00999999978<abs(u_xlat24));
#else
    u_xlatb24 = 0.00999999978<abs(u_xlat24);
#endif
    u_xlat16_4.x = (u_xlatb24) ? u_xlat18 : 1.0;
    u_xlat24 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat24 = sqrt(u_xlat24);
    u_xlat18 = u_xlat24 * _HeigtFogParams.y;
    u_xlat16_4.x = u_xlat18 * u_xlat16_4.x;
    u_xlat16_4.x = exp2((-u_xlat16_4.x));
    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
    u_xlat18 = u_xlat3.y * _HeigtFogParams2.x;
    u_xlat27 = u_xlat18 * -1.44269502;
    u_xlat27 = exp2(u_xlat27);
    u_xlat27 = (-u_xlat27) + 1.0;
    u_xlat27 = u_xlat27 / u_xlat18;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(0.00999999978<abs(u_xlat18));
#else
    u_xlatb18 = 0.00999999978<abs(u_xlat18);
#endif
    u_xlat16_12 = (u_xlatb18) ? u_xlat27 : 1.0;
    u_xlat18 = u_xlat24 * _HeigtFogParams2.y;
    u_xlat16_12 = u_xlat18 * u_xlat16_12;
    u_xlat16_12 = exp2((-u_xlat16_12));
    u_xlat16_4.y = (-u_xlat16_12) + 1.0;
    u_xlat16_4.xy = max(u_xlat16_4.xy, vec2(0.0, 0.0));
    u_xlat16_4.x = u_xlat16_4.y + u_xlat16_4.x;
    u_xlat18 = u_xlat24 * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat16_12 = (-u_xlat18) + 2.0;
    u_xlat16_12 = u_xlat18 * u_xlat16_12;
    u_xlat18 = u_xlat16_12 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat18 = u_xlat18 + 1.0;
    u_xlat16_4.x = u_xlat18 * u_xlat16_4.x;
    u_xlat18 = min(u_xlat16_4.x, _HeigtFogColBase.w);
    u_xlat27 = (-u_xlat18) + 1.0;
    u_xlat5.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat5.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat5.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat3.x = dot(u_xlat3.xyz, u_xlat5.xyz);
    u_xlat11 = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!((-u_xlat3.x)>=u_xlat11);
#else
    u_xlatb3 = (-u_xlat3.x)>=u_xlat11;
#endif
    u_xlat11 = u_xlat24 * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat11 = min(max(u_xlat11, 0.0), 1.0);
#else
    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
#endif
    u_xlat24 = u_xlat24 + (-_HeigtFogRamp.w);
    u_xlat24 = u_xlat24 * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat19 = (-u_xlat11) + 2.0;
    u_xlat11 = u_xlat19 * u_xlat11;
    u_xlat19 = u_xlat11 * _HeigtFogColDelta.w;
    u_xlat3.x = (u_xlatb3) ? u_xlat19 : u_xlat11;
    u_xlat3.x = log2(u_xlat3.x);
    u_xlat3.x = u_xlat3.x * unity_FogColor.w;
    u_xlat3.x = exp2(u_xlat3.x);
    u_xlat3.x = min(u_xlat3.x, _HeigtFogColBase.w);
    u_xlat11 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat11 = min(max(u_xlat11, 0.0), 1.0);
#else
    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
#endif
    u_xlat16_4.x = (-u_xlat11) + 2.0;
    u_xlat16_4.x = u_xlat11 * u_xlat16_4.x;
    u_xlat5.xyz = u_xlat16_4.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat6.xyz = (-u_xlat5.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat5.xyz = vec3(u_xlat24) * u_xlat6.xyz + u_xlat5.xyz;
    u_xlat5.xyz = u_xlat3.xxx * u_xlat5.xyz;
    u_xlat24 = (-u_xlat3.x) + 1.0;
    vs_TEXCOORD0.w = u_xlat27 * u_xlat24;
    u_xlat3.xyz = vec3(u_xlat27) * u_xlat5.xyz;
    u_xlat24 = u_xlat0.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    u_xlat0.xyz = vec3(u_xlat24) * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    vs_TEXCOORD0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat3.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat0.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    u_xlat16_4.x = u_xlat0.y * u_xlat0.y;
    u_xlat16_4.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_4.x);
    u_xlat16_3 = u_xlat0.yzzx * u_xlat0.xyzz;
    u_xlat16_7.x = dot(unity_SHBr, u_xlat16_3);
    u_xlat16_7.y = dot(unity_SHBg, u_xlat16_3);
    u_xlat16_7.z = dot(unity_SHBb, u_xlat16_3);
    u_xlat16_4.xyz = unity_SHC.xyz * u_xlat16_4.xxx + u_xlat16_7.xyz;
    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat0.w = 1.0;
    u_xlat16_7.x = dot(unity_SHAr, u_xlat0);
    u_xlat16_7.y = dot(unity_SHAg, u_xlat0);
    u_xlat16_7.z = dot(unity_SHAb, u_xlat0);
    u_xlat16_4.xyz = u_xlat16_4.xyz + u_xlat16_7.xyz;
    vs_TEXCOORD1.xyz = u_xlat16_4.xyz;
    vs_TEXCOORD1.w = 1.0;
    u_xlat5.x = float(0.5);
    u_xlat5.z = float(0.5);
    u_xlat5.y = _ProjectionParams.x;
    u_xlat2.xyz = u_xlat2.xyw * u_xlat5.xyz;
    u_xlat2.w = u_xlat2.y * 0.5;
    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4_mhyJitteredVP[1];
    u_xlat2 = hlslcc_mtx4x4_mhyJitteredVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4_mhyJitteredVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat2.xyz = vec3(u_xlat5.z * u_xlat1.x, u_xlat5.y * u_xlat1.y, u_xlat5.z * u_xlat1.w);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    u_xlat2.w = u_xlat2.y * 0.5;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat24 = dot(hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, hlslcc_mtx4x4unity_ObjectToWorld[0].xyz);
    vs_TEXCOORD4.z = sqrt(u_xlat24);
    u_xlat24 = dot(hlslcc_mtx4x4unity_ObjectToWorld[1].xyz, hlslcc_mtx4x4unity_ObjectToWorld[1].xyz);
    vs_TEXCOORD4.w = sqrt(u_xlat24);
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD5.w = 0.0;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
    vs_TEXCOORD6.xyz = u_xlat1.xyz;
    vs_TEXCOORD6.w = 0.0;
    vs_TEXCOORD7.xyz = u_xlat0.xyz;
    vs_TEXCOORD7.w = 0.0;
    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
    u_xlat24 = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD8.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    vs_TEXCOORD8.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _LightColor0;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	float _AlphaRange;
uniform 	float _AlphaOffset;
uniform 	float _Opacity;
uniform 	mediump float _BottomAlphaToggle;
uniform 	float _AlphaBottomRange;
uniform 	float _AlphaBottomOffset;
uniform 	vec4 _WaterfallTex01_ST;
uniform 	mediump vec4 _FoamUVCoord01;
uniform 	mediump vec4 _FoamUVCoord02;
uniform 	float _FoamRange;
uniform 	float _FoamOffset;
uniform 	vec4 _DayColor;
uniform 	vec4 _BottomColor;
uniform 	vec4 _TopColor;
uniform 	float _ColorGradientRange;
uniform 	float _ColorGradientOffset;
uniform 	vec4 _ReflectionColor_Dark;
uniform 	vec4 _ReflectionColor_Light;
uniform 	float _Normal01_U_Speed;
uniform 	vec4 _Normal01_ST;
uniform 	float _Normal01_VSpeed;
uniform 	float _Normal02_U_Speed;
uniform 	vec4 _Normal02_ST;
uniform 	float _Normal02_V_Speed;
uniform 	vec4 _DistortionIntensity;
uniform 	float _ReflectionBrightness;
uniform 	float _ReflectionIntensity;
uniform 	float _WaterFall01_Speed;
uniform 	float _Waterfall02_Speed;
uniform 	mediump vec4 _WaterfallPatternColor;
uniform 	float _Waterfall01Brightness;
uniform 	float _Waterfall02Brightness;
uniform 	float _SprayRange;
uniform 	float _SprayOffset;
uniform 	float _ShadowStrength;
uniform 	vec4 _WaterfallSpecTex_ST;
uniform 	float _Detail01_U_Speed;
uniform 	vec4 _NoiseTex_ST;
uniform 	float _Detail01_V_Speed;
uniform 	float _NoiselDistortionValue;
uniform 	mediump vec4 _WaterfallSpecColor;
uniform 	mediump vec4 _FoamColor;
uniform 	vec3 _ES_MainLightColor;
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _WaterfallTex01;
uniform lowp sampler2D _Normal01;
uniform lowp sampler2D _Normal02;
uniform lowp samplerCube _Reflection;
uniform lowp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _WaterfallSpecTex;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
in highp vec4 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
lowp float u_xlat10_0;
bvec2 u_xlatb0;
vec3 u_xlat1;
vec4 u_xlat2;
lowp float u_xlat10_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
vec4 u_xlat4;
vec3 u_xlat5;
lowp vec3 u_xlat10_5;
vec3 u_xlat6;
vec3 u_xlat7;
mediump vec3 u_xlat16_8;
vec3 u_xlat9;
lowp float u_xlat10_9;
vec3 u_xlat10;
mediump float u_xlat16_10;
lowp float u_xlat10_10;
bool u_xlatb10;
float u_xlat11;
vec2 u_xlat12;
mediump float u_xlat16_17;
float u_xlat18;
float u_xlat19;
lowp float u_xlat10_19;
float u_xlat27;
mediump float u_xlat16_27;
bool u_xlatb27;
float u_xlat28;
bool u_xlatb28;
float u_xlat29;
bool u_xlatb29;
float u_xlat30;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat18 = texture(_CameraDepthTextureScaled, u_xlat0.xy).x;
    u_xlat18 = u_xlat18 * _ProjectionParams.z + (-vs_TEXCOORD3.w);
    u_xlat27 = u_xlat18 * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
    u_xlat18 = u_xlat18 / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat1.x = (-u_xlat27) + 1.0;
    u_xlat18 = u_xlat18 * u_xlat1.x + u_xlat27;
    u_xlat27 = vs_TEXCOORD4.y * _AlphaRange + _AlphaOffset;
    u_xlat1.x = vs_TEXCOORD4.y * _AlphaBottomRange + _AlphaBottomOffset;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(_BottomAlphaToggle==1.0);
#else
    u_xlatb10 = _BottomAlphaToggle==1.0;
#endif
    u_xlat1.x = (u_xlatb10) ? u_xlat1.x : 1.0;
    u_xlat10.xy = vs_TEXCOORD4.xy * _WaterfallTex01_ST.xy + _WaterfallTex01_ST.zw;
    u_xlat2.xy = vec2(u_xlat10.x * vs_TEXCOORD4.z, u_xlat10.y * vs_TEXCOORD4.w);
    u_xlat10.xy = vec2(_Time.y * _FoamUVCoord01.z, _Time.y * _FoamUVCoord01.w);
    u_xlat10.xy = u_xlat2.xy * _FoamUVCoord01.xy + u_xlat10.xy;
    u_xlat3.xy = vec2(_Time.y * _FoamUVCoord02.z, _Time.y * _FoamUVCoord02.w);
    u_xlat3.xy = u_xlat2.xy * _FoamUVCoord02.xy + u_xlat3.xy;
    u_xlat28 = vs_TEXCOORD4.y * _FoamRange + _FoamOffset;
    u_xlat10_10 = texture(_WaterfallTex01, u_xlat10.xy).x;
    u_xlat10_19 = texture(_WaterfallTex01, u_xlat3.xy).y;
    u_xlat16_10 = u_xlat10_19 + u_xlat10_10;
    u_xlat10.x = u_xlat28 + u_xlat16_10;
#ifdef UNITY_ADRENO_ES3
    u_xlat10.x = min(max(u_xlat10.x, 0.0), 1.0);
#else
    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
#endif
    u_xlat19 = vs_TEXCOORD4.y * _ColorGradientRange + _ColorGradientOffset;
#ifdef UNITY_ADRENO_ES3
    u_xlat19 = min(max(u_xlat19, 0.0), 1.0);
#else
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
#endif
    u_xlat3.xyz = (-_BottomColor.xyz) + _TopColor.xyz;
    u_xlat3.xyz = vec3(u_xlat19) * u_xlat3.xyz + _BottomColor.xyz;
    u_xlat4.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat19 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat19 = inversesqrt(u_xlat19);
    u_xlat4.xyz = vec3(u_xlat19) * u_xlat4.xyz;
    u_xlat5.xy = vs_TEXCOORD4.xy * _Normal01_ST.xy + _Normal01_ST.zw;
    u_xlat19 = _Time.y * _Normal01_VSpeed;
    u_xlat30 = u_xlat5.x * vs_TEXCOORD4.z;
    u_xlat6.x = _Time.y * _Normal01_U_Speed + u_xlat30;
    u_xlat6.y = u_xlat5.y * vs_TEXCOORD4.w + u_xlat19;
    u_xlat5.xy = vs_TEXCOORD4.xy * _Normal02_ST.xy + _Normal02_ST.zw;
    u_xlat5.xy = vec2(u_xlat5.x * vs_TEXCOORD4.z, u_xlat5.y * vs_TEXCOORD4.w);
    u_xlat7.x = _Time.y * _Normal02_U_Speed + u_xlat5.x;
    u_xlat7.y = _Time.y * _Normal02_V_Speed + u_xlat5.y;
    u_xlat10_5.xyz = texture(_Normal01, u_xlat6.xy).xyz;
    u_xlat16_8.xyz = u_xlat10_5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat10_5.xyz = texture(_Normal02, u_xlat7.xy).xyz;
    u_xlat16_8.xyz = u_xlat10_5.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_8.xyz;
    u_xlat16_8.xyz = u_xlat16_8.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat5.xyz = u_xlat16_8.xyz * _DistortionIntensity.xyz;
    u_xlat6.x = vs_TEXCOORD6.x;
    u_xlat6.y = vs_TEXCOORD8.x;
    u_xlat6.z = vs_TEXCOORD7.x;
    u_xlat6.x = dot(u_xlat6.xyz, u_xlat5.xyz);
    u_xlat7.x = vs_TEXCOORD6.y;
    u_xlat7.y = vs_TEXCOORD8.y;
    u_xlat7.z = vs_TEXCOORD7.y;
    u_xlat6.y = dot(u_xlat7.xyz, u_xlat5.xyz);
    u_xlat7.x = vs_TEXCOORD6.z;
    u_xlat7.y = vs_TEXCOORD8.z;
    u_xlat7.z = vs_TEXCOORD7.z;
    u_xlat6.z = dot(u_xlat7.xyz, u_xlat5.xyz);
    u_xlat19 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat19 = inversesqrt(u_xlat19);
    u_xlat5.xyz = vec3(u_xlat19) * u_xlat6.xyz;
    u_xlat19 = dot((-u_xlat4.xyz), u_xlat5.xyz);
    u_xlat19 = u_xlat19 + u_xlat19;
    u_xlat4.xyz = u_xlat5.xyz * (-vec3(u_xlat19)) + (-u_xlat4.xyz);
    u_xlat10_19 = texture(_Reflection, u_xlat4.xyz).x;
    u_xlat4.xyz = (-_ReflectionColor_Dark.xyz) + _ReflectionColor_Light.xyz;
    u_xlat4.xyz = vec3(u_xlat10_19) * u_xlat4.xyz + _ReflectionColor_Dark.xyz;
    u_xlat5.xyz = u_xlat3.xyz * vec3(0.200000003, 0.200000003, 0.200000003);
    u_xlat3.xyz = u_xlat3.xyz * u_xlat4.xyz;
    u_xlat3.xyz = u_xlat3.xyz * vec3(_ReflectionBrightness) + (-u_xlat5.xyz);
    u_xlat3.xyz = vec3(vec3(_ReflectionIntensity, _ReflectionIntensity, _ReflectionIntensity)) * u_xlat3.xyz + u_xlat5.xyz;
    u_xlat2.zw = _Time.yy * vec2(_WaterFall01_Speed, _Waterfall02_Speed) + u_xlat2.yy;
    u_xlat10_19 = texture(_WaterfallTex01, u_xlat2.xz).x;
    u_xlat10_2 = texture(_WaterfallTex01, u_xlat2.xw).y;
    u_xlat16_8.x = (-u_xlat10_19) + u_xlat10_2;
    u_xlat16_8.x = u_xlat10_2 * u_xlat16_8.x + u_xlat10_19;
    u_xlat11 = u_xlat10_2 * _Waterfall02Brightness;
    u_xlat19 = u_xlat10_19 * _Waterfall01Brightness;
    u_xlat2.x = u_xlat10_2 * _Waterfall02Brightness + (-u_xlat19);
    u_xlat19 = u_xlat11 * u_xlat2.x + u_xlat19;
    u_xlat2.x = vs_TEXCOORD4.y * _SprayRange + _SprayOffset;
    u_xlat2.x = (-u_xlat2.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat19 = u_xlat19 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat19 = min(max(u_xlat19, 0.0), 1.0);
#else
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
#endif
    u_xlat2.xyz = u_xlat16_8.xxx * _WaterfallPatternColor.xyz + (-u_xlat3.xyz);
    u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz + u_xlat3.xyz;
    u_xlat10_0 = texture(_ShadowMapTexture, u_xlat0.xy).x;
    u_xlat9.x = (-_ShadowStrength) + 1.0;
    u_xlat0.x = u_xlat10_0 * u_xlat9.x + _ShadowStrength;
    u_xlat3.xy = vs_TEXCOORD4.xy * _WaterfallSpecTex_ST.xy + _WaterfallSpecTex_ST.zw;
    u_xlat16_8.x = vs_TEXCOORD4.w * 0.5;
    u_xlat16_8.x = vs_TEXCOORD4.w * u_xlat3.y + (-u_xlat16_8.x);
    u_xlat12.xy = vs_TEXCOORD4.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat4.x = _Time.y * _Detail01_U_Speed + u_xlat12.x;
    u_xlat4.y = _Time.y * _Detail01_V_Speed + u_xlat12.y;
    u_xlat10_9 = texture(_NoiseTex, u_xlat4.xy).x;
    u_xlat3.x = u_xlat10_9 * _NoiselDistortionValue + u_xlat3.x;
    u_xlat3.y = u_xlat10_9 * _NoiselDistortionValue + u_xlat16_8.x;
    u_xlat10_9 = texture(_WaterfallSpecTex, u_xlat3.xy).x;
    u_xlat16_3.xyz = vec3(u_xlat10_9) * _WaterfallSpecColor.xyz;
    u_xlat9.x = (-u_xlat27) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat9.x = min(max(u_xlat9.x, 0.0), 1.0);
#else
    u_xlat9.x = clamp(u_xlat9.x, 0.0, 1.0);
#endif
    u_xlat9.x = u_xlat9.x * u_xlat18;
    u_xlat9.x = u_xlat9.x * _Opacity;
    u_xlat9.x = u_xlat1.x * u_xlat9.x;
    u_xlat4.w = u_xlat10.x * u_xlat9.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.w = min(max(u_xlat4.w, 0.0), 1.0);
#else
    u_xlat4.w = clamp(u_xlat4.w, 0.0, 1.0);
#endif
    u_xlat9.xyz = u_xlat2.xyz * _DayColor.xyz;
    u_xlat0.xyz = u_xlat9.xyz * u_xlat0.xxx + u_xlat16_3.xyz;
    u_xlat27 = (-u_xlat28) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
    u_xlat27 = u_xlat27 * u_xlat10.x;
    u_xlat0.xyz = vec3(u_xlat27) * _FoamColor.xyz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * _ES_MainLightColor.xyz;
    u_xlat16_27 = max(_LightColor0.w, 1.0);
    u_xlat0.xyz = vec3(u_xlat16_27) * u_xlat0.xyz;
    u_xlat1.xyz = vs_TEXCOORD5.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat27 = dot(u_xlat1.xyz, u_xlat2.xyz);
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlat10.y = u_xlat1.x * _HeigtFogParams.y;
    u_xlat28 = u_xlat1.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat28 = min(max(u_xlat28, 0.0), 1.0);
#else
    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
#endif
    u_xlat2.x = (-u_xlat28) + 2.0;
    u_xlat28 = u_xlat28 * u_xlat2.x;
    u_xlat2.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!((-u_xlat27)>=u_xlat2.x);
#else
    u_xlatb27 = (-u_xlat27)>=u_xlat2.x;
#endif
    u_xlat2.x = u_xlat28 * _HeigtFogColDelta.w;
    u_xlat27 = (u_xlatb27) ? u_xlat2.x : u_xlat28;
    u_xlat27 = log2(u_xlat27);
    u_xlat27 = u_xlat27 * unity_FogColor.w;
    u_xlat27 = exp2(u_xlat27);
    u_xlat27 = min(u_xlat27, _HeigtFogColBase.w);
    u_xlat28 = vs_TEXCOORD5.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat28 = min(max(u_xlat28, 0.0), 1.0);
#else
    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
#endif
    u_xlat16_8.x = (-u_xlat28) + 2.0;
    u_xlat16_8.x = u_xlat28 * u_xlat16_8.x;
    u_xlat2.xyz = u_xlat16_8.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat28 = u_xlat1.x + (-_HeigtFogRamp.w);
    u_xlat28 = u_xlat28 * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat28 = min(max(u_xlat28, 0.0), 1.0);
#else
    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
#endif
    u_xlat3.xyz = (-u_xlat2.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat2.xyz = vec3(u_xlat28) * u_xlat3.xyz + u_xlat2.xyz;
    u_xlat28 = u_xlat1.y * _HeigtFogParams.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb29 = !!(0.00999999978<abs(u_xlat28));
#else
    u_xlatb29 = 0.00999999978<abs(u_xlat28);
#endif
    u_xlat3.x = u_xlat28 * -1.44269502;
    u_xlat3.x = exp2(u_xlat3.x);
    u_xlat3.x = (-u_xlat3.x) + 1.0;
    u_xlat28 = u_xlat3.x / u_xlat28;
    u_xlat16_8.x = (u_xlatb29) ? u_xlat28 : 1.0;
    u_xlat10.x = u_xlat1.y * _HeigtFogParams2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb28 = !!(0.00999999978<abs(u_xlat10.x));
#else
    u_xlatb28 = 0.00999999978<abs(u_xlat10.x);
#endif
    u_xlat29 = u_xlat10.x * -1.44269502;
    u_xlat29 = exp2(u_xlat29);
    u_xlat29 = (-u_xlat29) + 1.0;
    u_xlat10.x = u_xlat29 / u_xlat10.x;
    u_xlat16_8.y = (u_xlatb28) ? u_xlat10.x : 1.0;
    u_xlat10.x = u_xlat1.x * _HeigtFogParams2.y;
    u_xlat16_8.xy = u_xlat10.yx * u_xlat16_8.xy;
    u_xlat16_8.x = exp2((-u_xlat16_8.x));
    u_xlat16_8.x = (-u_xlat16_8.x) + 1.0;
    u_xlat16_17 = exp2((-u_xlat16_8.y));
    u_xlat16_8.y = (-u_xlat16_17) + 1.0;
    u_xlat16_8.xy = max(u_xlat16_8.xy, vec2(0.0, 0.0));
    u_xlat16_8.x = u_xlat16_8.y + u_xlat16_8.x;
    u_xlat1.x = u_xlat1.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat16_17 = (-u_xlat1.x) + 2.0;
    u_xlat16_17 = u_xlat1.x * u_xlat16_17;
    u_xlat1.x = u_xlat16_17 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat1.x = u_xlat1.x + 1.0;
    u_xlat16_8.x = u_xlat1.x * u_xlat16_8.x;
    u_xlat1.x = min(u_xlat16_8.x, _HeigtFogColBase.w);
    u_xlat10.x = vs_TEXCOORD5.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat10.x = min(max(u_xlat10.x, 0.0), 1.0);
#else
    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
#endif
    u_xlat10.xyz = u_xlat10.xxx * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    u_xlat2.xyz = vec3(u_xlat27) * u_xlat2.xyz;
    u_xlat29 = (-u_xlat1.x) + 1.0;
    u_xlat2.xyz = vec3(u_xlat29) * u_xlat2.xyz;
    u_xlat1.xyz = u_xlat10.xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat27 = (-u_xlat27) + 1.0;
    u_xlat27 = u_xlat29 * u_xlat27;
    u_xlat4.xyz = vec3(u_xlat27) * u_xlat0.xyz + u_xlat1.xyz;
    SV_Target0 = u_xlat4;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	mediump float _MHYZBias;
uniform 	vec4 hlslcc_mtx4x4_mhyJitteredVP[4];
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
vec3 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
bool u_xlatb3;
mediump vec3 u_xlat16_4;
float u_xlat5;
mediump vec4 u_xlat16_5;
vec3 u_xlat6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
float u_xlat11;
mediump float u_xlat16_12;
vec3 u_xlat13;
float u_xlat17;
bool u_xlatb17;
float u_xlat19;
float u_xlat24;
float u_xlat27;
bool u_xlatb27;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat8.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    u_xlat1.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position = u_xlat1;
    vs_TEXCOORD2.zw = u_xlat1.zw;
    vs_COLOR0 = in_COLOR0;
    u_xlat3.xyz = u_xlat8.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat17 = u_xlat3.y * _HeigtFogParams.x;
    u_xlat27 = u_xlat17 * -1.44269502;
    u_xlat27 = exp2(u_xlat27);
    u_xlat27 = (-u_xlat27) + 1.0;
    u_xlat27 = u_xlat27 / u_xlat17;
#ifdef UNITY_ADRENO_ES3
    u_xlatb17 = !!(0.00999999978<abs(u_xlat17));
#else
    u_xlatb17 = 0.00999999978<abs(u_xlat17);
#endif
    u_xlat16_4.x = (u_xlatb17) ? u_xlat27 : 1.0;
    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat17 = sqrt(u_xlat17);
    u_xlat27 = u_xlat17 * _HeigtFogParams.y;
    u_xlat16_4.x = u_xlat27 * u_xlat16_4.x;
    u_xlat16_4.x = exp2((-u_xlat16_4.x));
    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
    u_xlat27 = u_xlat3.y * _HeigtFogParams2.x;
    u_xlat5 = u_xlat27 * -1.44269502;
    u_xlat5 = exp2(u_xlat5);
    u_xlat5 = (-u_xlat5) + 1.0;
    u_xlat5 = u_xlat5 / u_xlat27;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(0.00999999978<abs(u_xlat27));
#else
    u_xlatb27 = 0.00999999978<abs(u_xlat27);
#endif
    u_xlat16_12 = (u_xlatb27) ? u_xlat5 : 1.0;
    u_xlat27 = u_xlat17 * _HeigtFogParams2.y;
    u_xlat16_12 = u_xlat27 * u_xlat16_12;
    u_xlat16_12 = exp2((-u_xlat16_12));
    u_xlat16_4.y = (-u_xlat16_12) + 1.0;
    u_xlat16_4.xy = max(u_xlat16_4.xy, vec2(0.0, 0.0));
    u_xlat16_4.x = u_xlat16_4.y + u_xlat16_4.x;
    u_xlat27 = u_xlat17 * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
    u_xlat16_12 = (-u_xlat27) + 2.0;
    u_xlat16_12 = u_xlat27 * u_xlat16_12;
    u_xlat27 = u_xlat16_12 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat27 = u_xlat27 + 1.0;
    u_xlat16_4.x = u_xlat27 * u_xlat16_4.x;
    u_xlat27 = min(u_xlat16_4.x, _HeigtFogColBase.w);
    u_xlat5 = (-u_xlat27) + 1.0;
    u_xlat13.x = _ProjectionParams.z * 0.999899983;
    u_xlat6.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat6.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat6.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat3.x = dot(u_xlat3.xyz, u_xlat6.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!((-u_xlat3.x)>=u_xlat13.x);
#else
    u_xlatb3 = (-u_xlat3.x)>=u_xlat13.x;
#endif
    u_xlat11 = u_xlat17 * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat11 = min(max(u_xlat11, 0.0), 1.0);
#else
    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
#endif
    u_xlat17 = u_xlat17 + (-_HeigtFogRamp.w);
    u_xlat17 = u_xlat17 * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat17 = min(max(u_xlat17, 0.0), 1.0);
#else
    u_xlat17 = clamp(u_xlat17, 0.0, 1.0);
#endif
    u_xlat19 = (-u_xlat11) + 2.0;
    u_xlat11 = u_xlat19 * u_xlat11;
    u_xlat19 = u_xlat11 * _HeigtFogColDelta.w;
    u_xlat3.x = (u_xlatb3) ? u_xlat19 : u_xlat11;
    u_xlat3.x = log2(u_xlat3.x);
    u_xlat3.x = u_xlat3.x * unity_FogColor.w;
    u_xlat3.x = exp2(u_xlat3.x);
    u_xlat3.x = min(u_xlat3.x, _HeigtFogColBase.w);
    u_xlat11 = u_xlat8.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat11 = min(max(u_xlat11, 0.0), 1.0);
#else
    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
#endif
    u_xlat16_4.x = (-u_xlat11) + 2.0;
    u_xlat16_4.x = u_xlat11 * u_xlat16_4.x;
    u_xlat13.xyz = u_xlat16_4.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat6.xyz = (-u_xlat13.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat13.xyz = vec3(u_xlat17) * u_xlat6.xyz + u_xlat13.xyz;
    u_xlat13.xyz = u_xlat3.xxx * u_xlat13.xyz;
    u_xlat17 = (-u_xlat3.x) + 1.0;
    vs_TEXCOORD0.w = u_xlat5 * u_xlat17;
    u_xlat3.xyz = vec3(u_xlat5) * u_xlat13.xyz;
    u_xlat17 = u_xlat8.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat17 = min(max(u_xlat17, 0.0), 1.0);
#else
    u_xlat17 = clamp(u_xlat17, 0.0, 1.0);
#endif
    vs_TEXCOORD5.xyz = u_xlat8.xyz;
    u_xlat8.xyz = vec3(u_xlat17) * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    vs_TEXCOORD0.xyz = u_xlat8.xyz * vec3(u_xlat27) + u_xlat3.xyz;
    u_xlat3.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat3.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat3.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat8.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat3.xyz = u_xlat8.xxx * u_xlat3.xyz;
    u_xlat16_4.x = u_xlat3.y * u_xlat3.y;
    u_xlat16_4.x = u_xlat3.x * u_xlat3.x + (-u_xlat16_4.x);
    u_xlat16_5 = u_xlat3.yzzx * u_xlat3.xyzz;
    u_xlat16_7.x = dot(unity_SHBr, u_xlat16_5);
    u_xlat16_7.y = dot(unity_SHBg, u_xlat16_5);
    u_xlat16_7.z = dot(unity_SHBb, u_xlat16_5);
    u_xlat16_4.xyz = unity_SHC.xyz * u_xlat16_4.xxx + u_xlat16_7.xyz;
    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat3.w = 1.0;
    u_xlat16_7.x = dot(unity_SHAr, u_xlat3);
    u_xlat16_7.y = dot(unity_SHAg, u_xlat3);
    u_xlat16_7.z = dot(unity_SHAb, u_xlat3);
    u_xlat16_4.xyz = u_xlat16_4.xyz + u_xlat16_7.xyz;
    vs_TEXCOORD1.xyz = u_xlat16_4.xyz;
    vs_TEXCOORD1.w = 1.0;
    u_xlat6.x = float(0.5);
    u_xlat6.z = float(0.5);
    u_xlat6.y = _ProjectionParams.x;
    u_xlat1.xyz = u_xlat1.xyw * u_xlat6.xyz;
    u_xlat1.w = u_xlat1.y * 0.5;
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4_mhyJitteredVP[1];
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[3] * u_xlat2.wwww + u_xlat1;
    u_xlat2.xyz = vec3(u_xlat6.z * u_xlat1.x, u_xlat6.y * u_xlat1.y, u_xlat6.z * u_xlat1.w);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    u_xlat2.w = u_xlat2.y * 0.5;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy;
    u_xlat8.x = dot(unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz);
    vs_TEXCOORD4.z = sqrt(u_xlat8.x);
    u_xlat8.x = dot(unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz);
    vs_TEXCOORD4.w = sqrt(u_xlat8.x);
    vs_TEXCOORD5.w = 0.0;
    u_xlat8.xyz = in_TANGENT0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat8.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_TANGENT0.xxx + u_xlat8.xyz;
    u_xlat0.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_TANGENT0.zzz + u_xlat8.xyz;
    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat0.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    vs_TEXCOORD6.xyz = u_xlat0.xyz;
    vs_TEXCOORD6.w = 0.0;
    vs_TEXCOORD7.xyz = u_xlat3.xyz;
    vs_TEXCOORD7.w = 0.0;
    u_xlat1.xyz = u_xlat0.yzx * u_xlat3.zxy;
    u_xlat0.xyz = u_xlat3.yzx * u_xlat0.zxy + (-u_xlat1.xyz);
    u_xlat24 = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD8.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    vs_TEXCOORD8.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _LightColor0;
uniform 	float _AlphaRange;
uniform 	float _AlphaOffset;
uniform 	float _Opacity;
uniform 	mediump float _BottomAlphaToggle;
uniform 	float _AlphaBottomRange;
uniform 	float _AlphaBottomOffset;
uniform 	vec4 _WaterfallTex01_ST;
uniform 	mediump vec4 _FoamUVCoord01;
uniform 	mediump vec4 _FoamUVCoord02;
uniform 	float _FoamRange;
uniform 	float _FoamOffset;
uniform 	vec4 _DayColor;
uniform 	vec4 _BottomColor;
uniform 	vec4 _TopColor;
uniform 	float _ColorGradientRange;
uniform 	float _ColorGradientOffset;
uniform 	vec4 _ReflectionColor_Dark;
uniform 	vec4 _ReflectionColor_Light;
uniform 	float _Normal01_U_Speed;
uniform 	vec4 _Normal01_ST;
uniform 	float _Normal01_VSpeed;
uniform 	float _Normal02_U_Speed;
uniform 	vec4 _Normal02_ST;
uniform 	float _Normal02_V_Speed;
uniform 	vec4 _DistortionIntensity;
uniform 	float _ReflectionBrightness;
uniform 	float _ReflectionIntensity;
uniform 	float _WaterFall01_Speed;
uniform 	float _Waterfall02_Speed;
uniform 	mediump vec4 _WaterfallPatternColor;
uniform 	float _Waterfall01Brightness;
uniform 	float _Waterfall02Brightness;
uniform 	float _SprayRange;
uniform 	float _SprayOffset;
uniform 	float _ShadowStrength;
uniform 	vec4 _WaterfallSpecTex_ST;
uniform 	float _Detail01_U_Speed;
uniform 	vec4 _NoiseTex_ST;
uniform 	float _Detail01_V_Speed;
uniform 	float _NoiselDistortionValue;
uniform 	mediump vec4 _WaterfallSpecColor;
uniform 	mediump vec4 _FoamColor;
uniform 	vec3 _ES_MainLightColor;
uniform lowp sampler2D _WaterfallTex01;
uniform lowp sampler2D _Normal01;
uniform lowp sampler2D _Normal02;
uniform lowp samplerCube _Reflection;
uniform lowp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _WaterfallSpecTex;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
in highp vec4 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
bvec2 u_xlatb0;
vec4 u_xlat1;
lowp float u_xlat10_1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
vec4 u_xlat3;
vec3 u_xlat4;
lowp vec3 u_xlat10_4;
vec3 u_xlat5;
vec3 u_xlat6;
mediump vec3 u_xlat16_7;
float u_xlat8;
vec3 u_xlat9;
vec3 u_xlat10;
mediump float u_xlat16_15;
vec2 u_xlat16;
mediump float u_xlat16_16;
lowp float u_xlat10_16;
bool u_xlatb16;
float u_xlat18;
float u_xlat24;
mediump float u_xlat16_24;
lowp float u_xlat10_24;
bool u_xlatb24;
float u_xlat25;
lowp float u_xlat10_25;
bool u_xlatb25;
float u_xlat26;
bool u_xlatb26;
float u_xlat27;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.x = vs_TEXCOORD4.y * _AlphaRange + _AlphaOffset;
    u_xlat8 = vs_TEXCOORD4.y * _AlphaBottomRange + _AlphaBottomOffset;
#ifdef UNITY_ADRENO_ES3
    u_xlat8 = min(max(u_xlat8, 0.0), 1.0);
#else
    u_xlat8 = clamp(u_xlat8, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(_BottomAlphaToggle==1.0);
#else
    u_xlatb16 = _BottomAlphaToggle==1.0;
#endif
    u_xlat8 = (u_xlatb16) ? u_xlat8 : 1.0;
    u_xlat16.xy = vs_TEXCOORD4.xy * _WaterfallTex01_ST.xy + _WaterfallTex01_ST.zw;
    u_xlat1.xy = vec2(u_xlat16.x * vs_TEXCOORD4.z, u_xlat16.y * vs_TEXCOORD4.w);
    u_xlat16.xy = vec2(_Time.y * _FoamUVCoord01.z, _Time.y * _FoamUVCoord01.w);
    u_xlat16.xy = u_xlat1.xy * _FoamUVCoord01.xy + u_xlat16.xy;
    u_xlat2.xy = vec2(_Time.y * _FoamUVCoord02.z, _Time.y * _FoamUVCoord02.w);
    u_xlat2.xy = u_xlat1.xy * _FoamUVCoord02.xy + u_xlat2.xy;
    u_xlat18 = vs_TEXCOORD4.y * _FoamRange + _FoamOffset;
    u_xlat10_16 = texture(_WaterfallTex01, u_xlat16.xy).x;
    u_xlat10_24 = texture(_WaterfallTex01, u_xlat2.xy).y;
    u_xlat16_16 = u_xlat10_24 + u_xlat10_16;
    u_xlat16.x = u_xlat18 + u_xlat16_16;
#ifdef UNITY_ADRENO_ES3
    u_xlat16.x = min(max(u_xlat16.x, 0.0), 1.0);
#else
    u_xlat16.x = clamp(u_xlat16.x, 0.0, 1.0);
#endif
    u_xlat24 = vs_TEXCOORD4.y * _ColorGradientRange + _ColorGradientOffset;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat2.xyw = (-_BottomColor.xyz) + _TopColor.xyz;
    u_xlat2.xyw = vec3(u_xlat24) * u_xlat2.xyw + _BottomColor.xyz;
    u_xlat3.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat24 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat3.xyz = vec3(u_xlat24) * u_xlat3.xyz;
    u_xlat4.xy = vs_TEXCOORD4.xy * _Normal01_ST.xy + _Normal01_ST.zw;
    u_xlat24 = _Time.y * _Normal01_VSpeed;
    u_xlat27 = u_xlat4.x * vs_TEXCOORD4.z;
    u_xlat5.x = _Time.y * _Normal01_U_Speed + u_xlat27;
    u_xlat5.y = u_xlat4.y * vs_TEXCOORD4.w + u_xlat24;
    u_xlat4.xy = vs_TEXCOORD4.xy * _Normal02_ST.xy + _Normal02_ST.zw;
    u_xlat4.xy = vec2(u_xlat4.x * vs_TEXCOORD4.z, u_xlat4.y * vs_TEXCOORD4.w);
    u_xlat6.x = _Time.y * _Normal02_U_Speed + u_xlat4.x;
    u_xlat6.y = _Time.y * _Normal02_V_Speed + u_xlat4.y;
    u_xlat10_4.xyz = texture(_Normal01, u_xlat5.xy).xyz;
    u_xlat16_7.xyz = u_xlat10_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat10_4.xyz = texture(_Normal02, u_xlat6.xy).xyz;
    u_xlat16_7.xyz = u_xlat10_4.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_7.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat4.xyz = u_xlat16_7.xyz * _DistortionIntensity.xyz;
    u_xlat5.x = vs_TEXCOORD6.x;
    u_xlat5.y = vs_TEXCOORD8.x;
    u_xlat5.z = vs_TEXCOORD7.x;
    u_xlat5.x = dot(u_xlat5.xyz, u_xlat4.xyz);
    u_xlat6.x = vs_TEXCOORD6.y;
    u_xlat6.y = vs_TEXCOORD8.y;
    u_xlat6.z = vs_TEXCOORD7.y;
    u_xlat5.y = dot(u_xlat6.xyz, u_xlat4.xyz);
    u_xlat6.x = vs_TEXCOORD6.z;
    u_xlat6.y = vs_TEXCOORD8.z;
    u_xlat6.z = vs_TEXCOORD7.z;
    u_xlat5.z = dot(u_xlat6.xyz, u_xlat4.xyz);
    u_xlat24 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat4.xyz = vec3(u_xlat24) * u_xlat5.xyz;
    u_xlat24 = dot((-u_xlat3.xyz), u_xlat4.xyz);
    u_xlat24 = u_xlat24 + u_xlat24;
    u_xlat3.xyz = u_xlat4.xyz * (-vec3(u_xlat24)) + (-u_xlat3.xyz);
    u_xlat10_24 = texture(_Reflection, u_xlat3.xyz).x;
    u_xlat3.xyz = (-_ReflectionColor_Dark.xyz) + _ReflectionColor_Light.xyz;
    u_xlat3.xyz = vec3(u_xlat10_24) * u_xlat3.xyz + _ReflectionColor_Dark.xyz;
    u_xlat4.xyz = u_xlat2.xyw * vec3(0.200000003, 0.200000003, 0.200000003);
    u_xlat2.xyw = u_xlat2.xyw * u_xlat3.xyz;
    u_xlat2.xyw = u_xlat2.xyw * vec3(_ReflectionBrightness) + (-u_xlat4.xyz);
    u_xlat2.xyw = vec3(vec3(_ReflectionIntensity, _ReflectionIntensity, _ReflectionIntensity)) * u_xlat2.xyw + u_xlat4.xyz;
    u_xlat1.zw = _Time.yy * vec2(_WaterFall01_Speed, _Waterfall02_Speed) + u_xlat1.yy;
    u_xlat10_24 = texture(_WaterfallTex01, u_xlat1.xz).x;
    u_xlat10_1 = texture(_WaterfallTex01, u_xlat1.xw).y;
    u_xlat16_7.x = (-u_xlat10_24) + u_xlat10_1;
    u_xlat16_7.x = u_xlat10_1 * u_xlat16_7.x + u_xlat10_24;
    u_xlat9.x = u_xlat10_1 * _Waterfall02Brightness;
    u_xlat24 = u_xlat10_24 * _Waterfall01Brightness;
    u_xlat1.x = u_xlat10_1 * _Waterfall02Brightness + (-u_xlat24);
    u_xlat24 = u_xlat9.x * u_xlat1.x + u_xlat24;
    u_xlat1.x = vs_TEXCOORD4.y * _SprayRange + _SprayOffset;
    u_xlat1.x = (-u_xlat1.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat24 = u_xlat24 * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat16_7.xxx * _WaterfallPatternColor.xyz + (-u_xlat2.xyw);
    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz + u_xlat2.xyw;
    u_xlat2.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat10_24 = texture(_ShadowMapTexture, u_xlat2.xy).x;
    u_xlat25 = (-_ShadowStrength) + 1.0;
    u_xlat24 = u_xlat10_24 * u_xlat25 + _ShadowStrength;
    u_xlat2.xy = vs_TEXCOORD4.xy * _WaterfallSpecTex_ST.xy + _WaterfallSpecTex_ST.zw;
    u_xlat16_7.x = vs_TEXCOORD4.w * 0.5;
    u_xlat16_7.x = vs_TEXCOORD4.w * u_xlat2.y + (-u_xlat16_7.x);
    u_xlat10.xz = vs_TEXCOORD4.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat3.x = _Time.y * _Detail01_U_Speed + u_xlat10.x;
    u_xlat3.y = _Time.y * _Detail01_V_Speed + u_xlat10.z;
    u_xlat10_25 = texture(_NoiseTex, u_xlat3.xy).x;
    u_xlat2.x = u_xlat10_25 * _NoiselDistortionValue + u_xlat2.x;
    u_xlat2.y = u_xlat10_25 * _NoiselDistortionValue + u_xlat16_7.x;
    u_xlat10_25 = texture(_WaterfallSpecTex, u_xlat2.xy).x;
    u_xlat16_2.xyw = vec3(u_xlat10_25) * _WaterfallSpecColor.xyz;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x * _Opacity;
    u_xlat0.x = u_xlat8 * u_xlat0.x;
    u_xlat3.w = u_xlat16.x * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat3.w = min(max(u_xlat3.w, 0.0), 1.0);
#else
    u_xlat3.w = clamp(u_xlat3.w, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat1.xyz * _DayColor.xyz;
    u_xlat0.xyw = u_xlat1.xyz * vec3(u_xlat24) + u_xlat16_2.xyw;
    u_xlat1.x = (-u_xlat18) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat16.x = u_xlat16.x * u_xlat1.x;
    u_xlat0.xyz = u_xlat16.xxx * _FoamColor.xyz + u_xlat0.xyw;
    u_xlat0.xyz = u_xlat0.xyz * _ES_MainLightColor.xyz;
    u_xlat16_24 = max(_LightColor0.w, 1.0);
    u_xlat0.xyz = vec3(u_xlat16_24) * u_xlat0.xyz;
    u_xlat1.xyz = vs_TEXCOORD5.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat24 = dot(u_xlat1.xyz, u_xlat2.xyz);
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlat9.y = u_xlat1.x * _HeigtFogParams.y;
    u_xlat25 = u_xlat1.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat25 = min(max(u_xlat25, 0.0), 1.0);
#else
    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
#endif
    u_xlat2.x = (-u_xlat25) + 2.0;
    u_xlat25 = u_xlat25 * u_xlat2.x;
    u_xlat2.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!((-u_xlat24)>=u_xlat2.x);
#else
    u_xlatb24 = (-u_xlat24)>=u_xlat2.x;
#endif
    u_xlat2.x = u_xlat25 * _HeigtFogColDelta.w;
    u_xlat24 = (u_xlatb24) ? u_xlat2.x : u_xlat25;
    u_xlat24 = log2(u_xlat24);
    u_xlat24 = u_xlat24 * unity_FogColor.w;
    u_xlat24 = exp2(u_xlat24);
    u_xlat24 = min(u_xlat24, _HeigtFogColBase.w);
    u_xlat25 = vs_TEXCOORD5.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat25 = min(max(u_xlat25, 0.0), 1.0);
#else
    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
#endif
    u_xlat16_7.x = (-u_xlat25) + 2.0;
    u_xlat16_7.x = u_xlat25 * u_xlat16_7.x;
    u_xlat2.xyz = u_xlat16_7.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat25 = u_xlat1.x + (-_HeigtFogRamp.w);
    u_xlat25 = u_xlat25 * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat25 = min(max(u_xlat25, 0.0), 1.0);
#else
    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
#endif
    u_xlat4.xyz = (-u_xlat2.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat2.xyz = vec3(u_xlat25) * u_xlat4.xyz + u_xlat2.xyz;
    u_xlat25 = u_xlat1.y * _HeigtFogParams.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb26 = !!(0.00999999978<abs(u_xlat25));
#else
    u_xlatb26 = 0.00999999978<abs(u_xlat25);
#endif
    u_xlat4.x = u_xlat25 * -1.44269502;
    u_xlat4.x = exp2(u_xlat4.x);
    u_xlat4.x = (-u_xlat4.x) + 1.0;
    u_xlat25 = u_xlat4.x / u_xlat25;
    u_xlat16_7.x = (u_xlatb26) ? u_xlat25 : 1.0;
    u_xlat9.x = u_xlat1.y * _HeigtFogParams2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb25 = !!(0.00999999978<abs(u_xlat9.x));
#else
    u_xlatb25 = 0.00999999978<abs(u_xlat9.x);
#endif
    u_xlat26 = u_xlat9.x * -1.44269502;
    u_xlat26 = exp2(u_xlat26);
    u_xlat26 = (-u_xlat26) + 1.0;
    u_xlat9.x = u_xlat26 / u_xlat9.x;
    u_xlat16_7.y = (u_xlatb25) ? u_xlat9.x : 1.0;
    u_xlat9.x = u_xlat1.x * _HeigtFogParams2.y;
    u_xlat16_7.xy = u_xlat9.yx * u_xlat16_7.xy;
    u_xlat16_7.x = exp2((-u_xlat16_7.x));
    u_xlat16_7.x = (-u_xlat16_7.x) + 1.0;
    u_xlat16_15 = exp2((-u_xlat16_7.y));
    u_xlat16_7.y = (-u_xlat16_15) + 1.0;
    u_xlat16_7.xy = max(u_xlat16_7.xy, vec2(0.0, 0.0));
    u_xlat16_7.x = u_xlat16_7.y + u_xlat16_7.x;
    u_xlat1.x = u_xlat1.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat16_15 = (-u_xlat1.x) + 2.0;
    u_xlat16_15 = u_xlat1.x * u_xlat16_15;
    u_xlat1.x = u_xlat16_15 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat1.x = u_xlat1.x + 1.0;
    u_xlat16_7.x = u_xlat1.x * u_xlat16_7.x;
    u_xlat1.x = min(u_xlat16_7.x, _HeigtFogColBase.w);
    u_xlat9.x = vs_TEXCOORD5.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat9.x = min(max(u_xlat9.x, 0.0), 1.0);
#else
    u_xlat9.x = clamp(u_xlat9.x, 0.0, 1.0);
#endif
    u_xlat9.xyz = u_xlat9.xxx * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz;
    u_xlat26 = (-u_xlat1.x) + 1.0;
    u_xlat2.xyz = vec3(u_xlat26) * u_xlat2.xyz;
    u_xlat1.xyz = u_xlat9.xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat24 = (-u_xlat24) + 1.0;
    u_xlat24 = u_xlat26 * u_xlat24;
    u_xlat3.xyz = vec3(u_xlat24) * u_xlat0.xyz + u_xlat1.xyz;
    SV_Target0 = u_xlat3;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	mediump float _MHYZBias;
uniform 	vec4 hlslcc_mtx4x4_mhyJitteredVP[4];
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
vec3 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
bool u_xlatb3;
mediump vec3 u_xlat16_4;
float u_xlat5;
mediump vec4 u_xlat16_5;
vec3 u_xlat6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
float u_xlat11;
mediump float u_xlat16_12;
vec3 u_xlat13;
float u_xlat17;
bool u_xlatb17;
float u_xlat19;
float u_xlat24;
float u_xlat27;
bool u_xlatb27;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat8.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    u_xlat1.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position = u_xlat1;
    vs_TEXCOORD2.zw = u_xlat1.zw;
    vs_COLOR0 = in_COLOR0;
    u_xlat3.xyz = u_xlat8.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat17 = u_xlat3.y * _HeigtFogParams.x;
    u_xlat27 = u_xlat17 * -1.44269502;
    u_xlat27 = exp2(u_xlat27);
    u_xlat27 = (-u_xlat27) + 1.0;
    u_xlat27 = u_xlat27 / u_xlat17;
#ifdef UNITY_ADRENO_ES3
    u_xlatb17 = !!(0.00999999978<abs(u_xlat17));
#else
    u_xlatb17 = 0.00999999978<abs(u_xlat17);
#endif
    u_xlat16_4.x = (u_xlatb17) ? u_xlat27 : 1.0;
    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat17 = sqrt(u_xlat17);
    u_xlat27 = u_xlat17 * _HeigtFogParams.y;
    u_xlat16_4.x = u_xlat27 * u_xlat16_4.x;
    u_xlat16_4.x = exp2((-u_xlat16_4.x));
    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
    u_xlat27 = u_xlat3.y * _HeigtFogParams2.x;
    u_xlat5 = u_xlat27 * -1.44269502;
    u_xlat5 = exp2(u_xlat5);
    u_xlat5 = (-u_xlat5) + 1.0;
    u_xlat5 = u_xlat5 / u_xlat27;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(0.00999999978<abs(u_xlat27));
#else
    u_xlatb27 = 0.00999999978<abs(u_xlat27);
#endif
    u_xlat16_12 = (u_xlatb27) ? u_xlat5 : 1.0;
    u_xlat27 = u_xlat17 * _HeigtFogParams2.y;
    u_xlat16_12 = u_xlat27 * u_xlat16_12;
    u_xlat16_12 = exp2((-u_xlat16_12));
    u_xlat16_4.y = (-u_xlat16_12) + 1.0;
    u_xlat16_4.xy = max(u_xlat16_4.xy, vec2(0.0, 0.0));
    u_xlat16_4.x = u_xlat16_4.y + u_xlat16_4.x;
    u_xlat27 = u_xlat17 * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
    u_xlat16_12 = (-u_xlat27) + 2.0;
    u_xlat16_12 = u_xlat27 * u_xlat16_12;
    u_xlat27 = u_xlat16_12 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat27 = u_xlat27 + 1.0;
    u_xlat16_4.x = u_xlat27 * u_xlat16_4.x;
    u_xlat27 = min(u_xlat16_4.x, _HeigtFogColBase.w);
    u_xlat5 = (-u_xlat27) + 1.0;
    u_xlat13.x = _ProjectionParams.z * 0.999899983;
    u_xlat6.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat6.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat6.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat3.x = dot(u_xlat3.xyz, u_xlat6.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!((-u_xlat3.x)>=u_xlat13.x);
#else
    u_xlatb3 = (-u_xlat3.x)>=u_xlat13.x;
#endif
    u_xlat11 = u_xlat17 * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat11 = min(max(u_xlat11, 0.0), 1.0);
#else
    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
#endif
    u_xlat17 = u_xlat17 + (-_HeigtFogRamp.w);
    u_xlat17 = u_xlat17 * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat17 = min(max(u_xlat17, 0.0), 1.0);
#else
    u_xlat17 = clamp(u_xlat17, 0.0, 1.0);
#endif
    u_xlat19 = (-u_xlat11) + 2.0;
    u_xlat11 = u_xlat19 * u_xlat11;
    u_xlat19 = u_xlat11 * _HeigtFogColDelta.w;
    u_xlat3.x = (u_xlatb3) ? u_xlat19 : u_xlat11;
    u_xlat3.x = log2(u_xlat3.x);
    u_xlat3.x = u_xlat3.x * unity_FogColor.w;
    u_xlat3.x = exp2(u_xlat3.x);
    u_xlat3.x = min(u_xlat3.x, _HeigtFogColBase.w);
    u_xlat11 = u_xlat8.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat11 = min(max(u_xlat11, 0.0), 1.0);
#else
    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
#endif
    u_xlat16_4.x = (-u_xlat11) + 2.0;
    u_xlat16_4.x = u_xlat11 * u_xlat16_4.x;
    u_xlat13.xyz = u_xlat16_4.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat6.xyz = (-u_xlat13.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat13.xyz = vec3(u_xlat17) * u_xlat6.xyz + u_xlat13.xyz;
    u_xlat13.xyz = u_xlat3.xxx * u_xlat13.xyz;
    u_xlat17 = (-u_xlat3.x) + 1.0;
    vs_TEXCOORD0.w = u_xlat5 * u_xlat17;
    u_xlat3.xyz = vec3(u_xlat5) * u_xlat13.xyz;
    u_xlat17 = u_xlat8.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat17 = min(max(u_xlat17, 0.0), 1.0);
#else
    u_xlat17 = clamp(u_xlat17, 0.0, 1.0);
#endif
    vs_TEXCOORD5.xyz = u_xlat8.xyz;
    u_xlat8.xyz = vec3(u_xlat17) * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    vs_TEXCOORD0.xyz = u_xlat8.xyz * vec3(u_xlat27) + u_xlat3.xyz;
    u_xlat3.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat3.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat3.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat8.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat3.xyz = u_xlat8.xxx * u_xlat3.xyz;
    u_xlat16_4.x = u_xlat3.y * u_xlat3.y;
    u_xlat16_4.x = u_xlat3.x * u_xlat3.x + (-u_xlat16_4.x);
    u_xlat16_5 = u_xlat3.yzzx * u_xlat3.xyzz;
    u_xlat16_7.x = dot(unity_SHBr, u_xlat16_5);
    u_xlat16_7.y = dot(unity_SHBg, u_xlat16_5);
    u_xlat16_7.z = dot(unity_SHBb, u_xlat16_5);
    u_xlat16_4.xyz = unity_SHC.xyz * u_xlat16_4.xxx + u_xlat16_7.xyz;
    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat3.w = 1.0;
    u_xlat16_7.x = dot(unity_SHAr, u_xlat3);
    u_xlat16_7.y = dot(unity_SHAg, u_xlat3);
    u_xlat16_7.z = dot(unity_SHAb, u_xlat3);
    u_xlat16_4.xyz = u_xlat16_4.xyz + u_xlat16_7.xyz;
    vs_TEXCOORD1.xyz = u_xlat16_4.xyz;
    vs_TEXCOORD1.w = 1.0;
    u_xlat6.x = float(0.5);
    u_xlat6.z = float(0.5);
    u_xlat6.y = _ProjectionParams.x;
    u_xlat1.xyz = u_xlat1.xyw * u_xlat6.xyz;
    u_xlat1.w = u_xlat1.y * 0.5;
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4_mhyJitteredVP[1];
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[3] * u_xlat2.wwww + u_xlat1;
    u_xlat2.xyz = vec3(u_xlat6.z * u_xlat1.x, u_xlat6.y * u_xlat1.y, u_xlat6.z * u_xlat1.w);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    u_xlat2.w = u_xlat2.y * 0.5;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy;
    u_xlat8.x = dot(unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz);
    vs_TEXCOORD4.z = sqrt(u_xlat8.x);
    u_xlat8.x = dot(unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz);
    vs_TEXCOORD4.w = sqrt(u_xlat8.x);
    vs_TEXCOORD5.w = 0.0;
    u_xlat8.xyz = in_TANGENT0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat8.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_TANGENT0.xxx + u_xlat8.xyz;
    u_xlat0.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_TANGENT0.zzz + u_xlat8.xyz;
    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat0.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    vs_TEXCOORD6.xyz = u_xlat0.xyz;
    vs_TEXCOORD6.w = 0.0;
    vs_TEXCOORD7.xyz = u_xlat3.xyz;
    vs_TEXCOORD7.w = 0.0;
    u_xlat1.xyz = u_xlat0.yzx * u_xlat3.zxy;
    u_xlat0.xyz = u_xlat3.yzx * u_xlat0.zxy + (-u_xlat1.xyz);
    u_xlat24 = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD8.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    vs_TEXCOORD8.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _LightColor0;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	float _AlphaRange;
uniform 	float _AlphaOffset;
uniform 	float _Opacity;
uniform 	mediump float _BottomAlphaToggle;
uniform 	float _AlphaBottomRange;
uniform 	float _AlphaBottomOffset;
uniform 	vec4 _WaterfallTex01_ST;
uniform 	mediump vec4 _FoamUVCoord01;
uniform 	mediump vec4 _FoamUVCoord02;
uniform 	float _FoamRange;
uniform 	float _FoamOffset;
uniform 	vec4 _DayColor;
uniform 	vec4 _BottomColor;
uniform 	vec4 _TopColor;
uniform 	float _ColorGradientRange;
uniform 	float _ColorGradientOffset;
uniform 	vec4 _ReflectionColor_Dark;
uniform 	vec4 _ReflectionColor_Light;
uniform 	float _Normal01_U_Speed;
uniform 	vec4 _Normal01_ST;
uniform 	float _Normal01_VSpeed;
uniform 	float _Normal02_U_Speed;
uniform 	vec4 _Normal02_ST;
uniform 	float _Normal02_V_Speed;
uniform 	vec4 _DistortionIntensity;
uniform 	float _ReflectionBrightness;
uniform 	float _ReflectionIntensity;
uniform 	float _WaterFall01_Speed;
uniform 	float _Waterfall02_Speed;
uniform 	mediump vec4 _WaterfallPatternColor;
uniform 	float _Waterfall01Brightness;
uniform 	float _Waterfall02Brightness;
uniform 	float _SprayRange;
uniform 	float _SprayOffset;
uniform 	float _ShadowStrength;
uniform 	vec4 _WaterfallSpecTex_ST;
uniform 	float _Detail01_U_Speed;
uniform 	vec4 _NoiseTex_ST;
uniform 	float _Detail01_V_Speed;
uniform 	float _NoiselDistortionValue;
uniform 	mediump vec4 _WaterfallSpecColor;
uniform 	mediump vec4 _FoamColor;
uniform 	vec3 _ES_MainLightColor;
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _WaterfallTex01;
uniform lowp sampler2D _Normal01;
uniform lowp sampler2D _Normal02;
uniform lowp samplerCube _Reflection;
uniform lowp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _WaterfallSpecTex;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
in highp vec4 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
lowp float u_xlat10_0;
bvec2 u_xlatb0;
vec3 u_xlat1;
vec4 u_xlat2;
lowp float u_xlat10_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
vec4 u_xlat4;
vec3 u_xlat5;
lowp vec3 u_xlat10_5;
vec3 u_xlat6;
vec3 u_xlat7;
mediump vec3 u_xlat16_8;
vec3 u_xlat9;
lowp float u_xlat10_9;
vec3 u_xlat10;
mediump float u_xlat16_10;
lowp float u_xlat10_10;
bool u_xlatb10;
float u_xlat11;
vec2 u_xlat12;
mediump float u_xlat16_17;
float u_xlat18;
float u_xlat19;
lowp float u_xlat10_19;
float u_xlat27;
mediump float u_xlat16_27;
bool u_xlatb27;
float u_xlat28;
bool u_xlatb28;
float u_xlat29;
bool u_xlatb29;
float u_xlat30;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat18 = texture(_CameraDepthTextureScaled, u_xlat0.xy).x;
    u_xlat18 = u_xlat18 * _ProjectionParams.z + (-vs_TEXCOORD3.w);
    u_xlat27 = u_xlat18 * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
    u_xlat18 = u_xlat18 / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat1.x = (-u_xlat27) + 1.0;
    u_xlat18 = u_xlat18 * u_xlat1.x + u_xlat27;
    u_xlat27 = vs_TEXCOORD4.y * _AlphaRange + _AlphaOffset;
    u_xlat1.x = vs_TEXCOORD4.y * _AlphaBottomRange + _AlphaBottomOffset;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(_BottomAlphaToggle==1.0);
#else
    u_xlatb10 = _BottomAlphaToggle==1.0;
#endif
    u_xlat1.x = (u_xlatb10) ? u_xlat1.x : 1.0;
    u_xlat10.xy = vs_TEXCOORD4.xy * _WaterfallTex01_ST.xy + _WaterfallTex01_ST.zw;
    u_xlat2.xy = vec2(u_xlat10.x * vs_TEXCOORD4.z, u_xlat10.y * vs_TEXCOORD4.w);
    u_xlat10.xy = vec2(_Time.y * _FoamUVCoord01.z, _Time.y * _FoamUVCoord01.w);
    u_xlat10.xy = u_xlat2.xy * _FoamUVCoord01.xy + u_xlat10.xy;
    u_xlat3.xy = vec2(_Time.y * _FoamUVCoord02.z, _Time.y * _FoamUVCoord02.w);
    u_xlat3.xy = u_xlat2.xy * _FoamUVCoord02.xy + u_xlat3.xy;
    u_xlat28 = vs_TEXCOORD4.y * _FoamRange + _FoamOffset;
    u_xlat10_10 = texture(_WaterfallTex01, u_xlat10.xy).x;
    u_xlat10_19 = texture(_WaterfallTex01, u_xlat3.xy).y;
    u_xlat16_10 = u_xlat10_19 + u_xlat10_10;
    u_xlat10.x = u_xlat28 + u_xlat16_10;
#ifdef UNITY_ADRENO_ES3
    u_xlat10.x = min(max(u_xlat10.x, 0.0), 1.0);
#else
    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
#endif
    u_xlat19 = vs_TEXCOORD4.y * _ColorGradientRange + _ColorGradientOffset;
#ifdef UNITY_ADRENO_ES3
    u_xlat19 = min(max(u_xlat19, 0.0), 1.0);
#else
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
#endif
    u_xlat3.xyz = (-_BottomColor.xyz) + _TopColor.xyz;
    u_xlat3.xyz = vec3(u_xlat19) * u_xlat3.xyz + _BottomColor.xyz;
    u_xlat4.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat19 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat19 = inversesqrt(u_xlat19);
    u_xlat4.xyz = vec3(u_xlat19) * u_xlat4.xyz;
    u_xlat5.xy = vs_TEXCOORD4.xy * _Normal01_ST.xy + _Normal01_ST.zw;
    u_xlat19 = _Time.y * _Normal01_VSpeed;
    u_xlat30 = u_xlat5.x * vs_TEXCOORD4.z;
    u_xlat6.x = _Time.y * _Normal01_U_Speed + u_xlat30;
    u_xlat6.y = u_xlat5.y * vs_TEXCOORD4.w + u_xlat19;
    u_xlat5.xy = vs_TEXCOORD4.xy * _Normal02_ST.xy + _Normal02_ST.zw;
    u_xlat5.xy = vec2(u_xlat5.x * vs_TEXCOORD4.z, u_xlat5.y * vs_TEXCOORD4.w);
    u_xlat7.x = _Time.y * _Normal02_U_Speed + u_xlat5.x;
    u_xlat7.y = _Time.y * _Normal02_V_Speed + u_xlat5.y;
    u_xlat10_5.xyz = texture(_Normal01, u_xlat6.xy).xyz;
    u_xlat16_8.xyz = u_xlat10_5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat10_5.xyz = texture(_Normal02, u_xlat7.xy).xyz;
    u_xlat16_8.xyz = u_xlat10_5.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_8.xyz;
    u_xlat16_8.xyz = u_xlat16_8.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat5.xyz = u_xlat16_8.xyz * _DistortionIntensity.xyz;
    u_xlat6.x = vs_TEXCOORD6.x;
    u_xlat6.y = vs_TEXCOORD8.x;
    u_xlat6.z = vs_TEXCOORD7.x;
    u_xlat6.x = dot(u_xlat6.xyz, u_xlat5.xyz);
    u_xlat7.x = vs_TEXCOORD6.y;
    u_xlat7.y = vs_TEXCOORD8.y;
    u_xlat7.z = vs_TEXCOORD7.y;
    u_xlat6.y = dot(u_xlat7.xyz, u_xlat5.xyz);
    u_xlat7.x = vs_TEXCOORD6.z;
    u_xlat7.y = vs_TEXCOORD8.z;
    u_xlat7.z = vs_TEXCOORD7.z;
    u_xlat6.z = dot(u_xlat7.xyz, u_xlat5.xyz);
    u_xlat19 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat19 = inversesqrt(u_xlat19);
    u_xlat5.xyz = vec3(u_xlat19) * u_xlat6.xyz;
    u_xlat19 = dot((-u_xlat4.xyz), u_xlat5.xyz);
    u_xlat19 = u_xlat19 + u_xlat19;
    u_xlat4.xyz = u_xlat5.xyz * (-vec3(u_xlat19)) + (-u_xlat4.xyz);
    u_xlat10_19 = texture(_Reflection, u_xlat4.xyz).x;
    u_xlat4.xyz = (-_ReflectionColor_Dark.xyz) + _ReflectionColor_Light.xyz;
    u_xlat4.xyz = vec3(u_xlat10_19) * u_xlat4.xyz + _ReflectionColor_Dark.xyz;
    u_xlat5.xyz = u_xlat3.xyz * vec3(0.200000003, 0.200000003, 0.200000003);
    u_xlat3.xyz = u_xlat3.xyz * u_xlat4.xyz;
    u_xlat3.xyz = u_xlat3.xyz * vec3(_ReflectionBrightness) + (-u_xlat5.xyz);
    u_xlat3.xyz = vec3(vec3(_ReflectionIntensity, _ReflectionIntensity, _ReflectionIntensity)) * u_xlat3.xyz + u_xlat5.xyz;
    u_xlat2.zw = _Time.yy * vec2(_WaterFall01_Speed, _Waterfall02_Speed) + u_xlat2.yy;
    u_xlat10_19 = texture(_WaterfallTex01, u_xlat2.xz).x;
    u_xlat10_2 = texture(_WaterfallTex01, u_xlat2.xw).y;
    u_xlat16_8.x = (-u_xlat10_19) + u_xlat10_2;
    u_xlat16_8.x = u_xlat10_2 * u_xlat16_8.x + u_xlat10_19;
    u_xlat11 = u_xlat10_2 * _Waterfall02Brightness;
    u_xlat19 = u_xlat10_19 * _Waterfall01Brightness;
    u_xlat2.x = u_xlat10_2 * _Waterfall02Brightness + (-u_xlat19);
    u_xlat19 = u_xlat11 * u_xlat2.x + u_xlat19;
    u_xlat2.x = vs_TEXCOORD4.y * _SprayRange + _SprayOffset;
    u_xlat2.x = (-u_xlat2.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat19 = u_xlat19 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat19 = min(max(u_xlat19, 0.0), 1.0);
#else
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
#endif
    u_xlat2.xyz = u_xlat16_8.xxx * _WaterfallPatternColor.xyz + (-u_xlat3.xyz);
    u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz + u_xlat3.xyz;
    u_xlat10_0 = texture(_ShadowMapTexture, u_xlat0.xy).x;
    u_xlat9.x = (-_ShadowStrength) + 1.0;
    u_xlat0.x = u_xlat10_0 * u_xlat9.x + _ShadowStrength;
    u_xlat3.xy = vs_TEXCOORD4.xy * _WaterfallSpecTex_ST.xy + _WaterfallSpecTex_ST.zw;
    u_xlat16_8.x = vs_TEXCOORD4.w * 0.5;
    u_xlat16_8.x = vs_TEXCOORD4.w * u_xlat3.y + (-u_xlat16_8.x);
    u_xlat12.xy = vs_TEXCOORD4.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat4.x = _Time.y * _Detail01_U_Speed + u_xlat12.x;
    u_xlat4.y = _Time.y * _Detail01_V_Speed + u_xlat12.y;
    u_xlat10_9 = texture(_NoiseTex, u_xlat4.xy).x;
    u_xlat3.x = u_xlat10_9 * _NoiselDistortionValue + u_xlat3.x;
    u_xlat3.y = u_xlat10_9 * _NoiselDistortionValue + u_xlat16_8.x;
    u_xlat10_9 = texture(_WaterfallSpecTex, u_xlat3.xy).x;
    u_xlat16_3.xyz = vec3(u_xlat10_9) * _WaterfallSpecColor.xyz;
    u_xlat9.x = (-u_xlat27) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat9.x = min(max(u_xlat9.x, 0.0), 1.0);
#else
    u_xlat9.x = clamp(u_xlat9.x, 0.0, 1.0);
#endif
    u_xlat9.x = u_xlat9.x * u_xlat18;
    u_xlat9.x = u_xlat9.x * _Opacity;
    u_xlat9.x = u_xlat1.x * u_xlat9.x;
    u_xlat4.w = u_xlat10.x * u_xlat9.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.w = min(max(u_xlat4.w, 0.0), 1.0);
#else
    u_xlat4.w = clamp(u_xlat4.w, 0.0, 1.0);
#endif
    u_xlat9.xyz = u_xlat2.xyz * _DayColor.xyz;
    u_xlat0.xyz = u_xlat9.xyz * u_xlat0.xxx + u_xlat16_3.xyz;
    u_xlat27 = (-u_xlat28) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
    u_xlat27 = u_xlat27 * u_xlat10.x;
    u_xlat0.xyz = vec3(u_xlat27) * _FoamColor.xyz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * _ES_MainLightColor.xyz;
    u_xlat16_27 = max(_LightColor0.w, 1.0);
    u_xlat0.xyz = vec3(u_xlat16_27) * u_xlat0.xyz;
    u_xlat1.xyz = vs_TEXCOORD5.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat27 = dot(u_xlat1.xyz, u_xlat2.xyz);
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlat10.y = u_xlat1.x * _HeigtFogParams.y;
    u_xlat28 = u_xlat1.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat28 = min(max(u_xlat28, 0.0), 1.0);
#else
    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
#endif
    u_xlat2.x = (-u_xlat28) + 2.0;
    u_xlat28 = u_xlat28 * u_xlat2.x;
    u_xlat2.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!((-u_xlat27)>=u_xlat2.x);
#else
    u_xlatb27 = (-u_xlat27)>=u_xlat2.x;
#endif
    u_xlat2.x = u_xlat28 * _HeigtFogColDelta.w;
    u_xlat27 = (u_xlatb27) ? u_xlat2.x : u_xlat28;
    u_xlat27 = log2(u_xlat27);
    u_xlat27 = u_xlat27 * unity_FogColor.w;
    u_xlat27 = exp2(u_xlat27);
    u_xlat27 = min(u_xlat27, _HeigtFogColBase.w);
    u_xlat28 = vs_TEXCOORD5.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat28 = min(max(u_xlat28, 0.0), 1.0);
#else
    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
#endif
    u_xlat16_8.x = (-u_xlat28) + 2.0;
    u_xlat16_8.x = u_xlat28 * u_xlat16_8.x;
    u_xlat2.xyz = u_xlat16_8.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat28 = u_xlat1.x + (-_HeigtFogRamp.w);
    u_xlat28 = u_xlat28 * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat28 = min(max(u_xlat28, 0.0), 1.0);
#else
    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
#endif
    u_xlat3.xyz = (-u_xlat2.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat2.xyz = vec3(u_xlat28) * u_xlat3.xyz + u_xlat2.xyz;
    u_xlat28 = u_xlat1.y * _HeigtFogParams.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb29 = !!(0.00999999978<abs(u_xlat28));
#else
    u_xlatb29 = 0.00999999978<abs(u_xlat28);
#endif
    u_xlat3.x = u_xlat28 * -1.44269502;
    u_xlat3.x = exp2(u_xlat3.x);
    u_xlat3.x = (-u_xlat3.x) + 1.0;
    u_xlat28 = u_xlat3.x / u_xlat28;
    u_xlat16_8.x = (u_xlatb29) ? u_xlat28 : 1.0;
    u_xlat10.x = u_xlat1.y * _HeigtFogParams2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb28 = !!(0.00999999978<abs(u_xlat10.x));
#else
    u_xlatb28 = 0.00999999978<abs(u_xlat10.x);
#endif
    u_xlat29 = u_xlat10.x * -1.44269502;
    u_xlat29 = exp2(u_xlat29);
    u_xlat29 = (-u_xlat29) + 1.0;
    u_xlat10.x = u_xlat29 / u_xlat10.x;
    u_xlat16_8.y = (u_xlatb28) ? u_xlat10.x : 1.0;
    u_xlat10.x = u_xlat1.x * _HeigtFogParams2.y;
    u_xlat16_8.xy = u_xlat10.yx * u_xlat16_8.xy;
    u_xlat16_8.x = exp2((-u_xlat16_8.x));
    u_xlat16_8.x = (-u_xlat16_8.x) + 1.0;
    u_xlat16_17 = exp2((-u_xlat16_8.y));
    u_xlat16_8.y = (-u_xlat16_17) + 1.0;
    u_xlat16_8.xy = max(u_xlat16_8.xy, vec2(0.0, 0.0));
    u_xlat16_8.x = u_xlat16_8.y + u_xlat16_8.x;
    u_xlat1.x = u_xlat1.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat16_17 = (-u_xlat1.x) + 2.0;
    u_xlat16_17 = u_xlat1.x * u_xlat16_17;
    u_xlat1.x = u_xlat16_17 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat1.x = u_xlat1.x + 1.0;
    u_xlat16_8.x = u_xlat1.x * u_xlat16_8.x;
    u_xlat1.x = min(u_xlat16_8.x, _HeigtFogColBase.w);
    u_xlat10.x = vs_TEXCOORD5.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat10.x = min(max(u_xlat10.x, 0.0), 1.0);
#else
    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
#endif
    u_xlat10.xyz = u_xlat10.xxx * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    u_xlat2.xyz = vec3(u_xlat27) * u_xlat2.xyz;
    u_xlat29 = (-u_xlat1.x) + 1.0;
    u_xlat2.xyz = vec3(u_xlat29) * u_xlat2.xyz;
    u_xlat1.xyz = u_xlat10.xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat27 = (-u_xlat27) + 1.0;
    u_xlat27 = u_xlat29 * u_xlat27;
    u_xlat4.xyz = vec3(u_xlat27) * u_xlat0.xyz + u_xlat1.xyz;
    SV_Target0 = u_xlat4;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "MSAA_INTERPOLATION" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	mediump float _MHYZBias;
uniform 	vec4 hlslcc_mtx4x4_mhyJitteredVP[4];
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
mediump vec4 u_xlat16_3;
bool u_xlatb3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat6;
mediump vec3 u_xlat16_7;
float u_xlat11;
mediump float u_xlat16_12;
float u_xlat18;
bool u_xlatb18;
float u_xlat19;
float u_xlat24;
bool u_xlatb24;
float u_xlat27;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat2.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    gl_Position = u_xlat2;
    vs_TEXCOORD2.zw = u_xlat2.zw;
    vs_COLOR0 = in_COLOR0;
    u_xlat3.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat24 = u_xlat3.y * _HeigtFogParams.x;
    u_xlat18 = u_xlat24 * -1.44269502;
    u_xlat18 = exp2(u_xlat18);
    u_xlat18 = (-u_xlat18) + 1.0;
    u_xlat18 = u_xlat18 / u_xlat24;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(0.00999999978<abs(u_xlat24));
#else
    u_xlatb24 = 0.00999999978<abs(u_xlat24);
#endif
    u_xlat16_4.x = (u_xlatb24) ? u_xlat18 : 1.0;
    u_xlat24 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat24 = sqrt(u_xlat24);
    u_xlat18 = u_xlat24 * _HeigtFogParams.y;
    u_xlat16_4.x = u_xlat18 * u_xlat16_4.x;
    u_xlat16_4.x = exp2((-u_xlat16_4.x));
    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
    u_xlat18 = u_xlat3.y * _HeigtFogParams2.x;
    u_xlat27 = u_xlat18 * -1.44269502;
    u_xlat27 = exp2(u_xlat27);
    u_xlat27 = (-u_xlat27) + 1.0;
    u_xlat27 = u_xlat27 / u_xlat18;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(0.00999999978<abs(u_xlat18));
#else
    u_xlatb18 = 0.00999999978<abs(u_xlat18);
#endif
    u_xlat16_12 = (u_xlatb18) ? u_xlat27 : 1.0;
    u_xlat18 = u_xlat24 * _HeigtFogParams2.y;
    u_xlat16_12 = u_xlat18 * u_xlat16_12;
    u_xlat16_12 = exp2((-u_xlat16_12));
    u_xlat16_4.y = (-u_xlat16_12) + 1.0;
    u_xlat16_4.xy = max(u_xlat16_4.xy, vec2(0.0, 0.0));
    u_xlat16_4.x = u_xlat16_4.y + u_xlat16_4.x;
    u_xlat18 = u_xlat24 * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat16_12 = (-u_xlat18) + 2.0;
    u_xlat16_12 = u_xlat18 * u_xlat16_12;
    u_xlat18 = u_xlat16_12 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat18 = u_xlat18 + 1.0;
    u_xlat16_4.x = u_xlat18 * u_xlat16_4.x;
    u_xlat18 = min(u_xlat16_4.x, _HeigtFogColBase.w);
    u_xlat27 = (-u_xlat18) + 1.0;
    u_xlat5.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat5.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat5.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat3.x = dot(u_xlat3.xyz, u_xlat5.xyz);
    u_xlat11 = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!((-u_xlat3.x)>=u_xlat11);
#else
    u_xlatb3 = (-u_xlat3.x)>=u_xlat11;
#endif
    u_xlat11 = u_xlat24 * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat11 = min(max(u_xlat11, 0.0), 1.0);
#else
    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
#endif
    u_xlat24 = u_xlat24 + (-_HeigtFogRamp.w);
    u_xlat24 = u_xlat24 * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat19 = (-u_xlat11) + 2.0;
    u_xlat11 = u_xlat19 * u_xlat11;
    u_xlat19 = u_xlat11 * _HeigtFogColDelta.w;
    u_xlat3.x = (u_xlatb3) ? u_xlat19 : u_xlat11;
    u_xlat3.x = log2(u_xlat3.x);
    u_xlat3.x = u_xlat3.x * unity_FogColor.w;
    u_xlat3.x = exp2(u_xlat3.x);
    u_xlat3.x = min(u_xlat3.x, _HeigtFogColBase.w);
    u_xlat11 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat11 = min(max(u_xlat11, 0.0), 1.0);
#else
    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
#endif
    u_xlat16_4.x = (-u_xlat11) + 2.0;
    u_xlat16_4.x = u_xlat11 * u_xlat16_4.x;
    u_xlat5.xyz = u_xlat16_4.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat6.xyz = (-u_xlat5.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat5.xyz = vec3(u_xlat24) * u_xlat6.xyz + u_xlat5.xyz;
    u_xlat5.xyz = u_xlat3.xxx * u_xlat5.xyz;
    u_xlat24 = (-u_xlat3.x) + 1.0;
    vs_TEXCOORD0.w = u_xlat27 * u_xlat24;
    u_xlat3.xyz = vec3(u_xlat27) * u_xlat5.xyz;
    u_xlat24 = u_xlat0.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    u_xlat0.xyz = vec3(u_xlat24) * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    vs_TEXCOORD0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat3.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat0.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    u_xlat16_4.x = u_xlat0.y * u_xlat0.y;
    u_xlat16_4.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_4.x);
    u_xlat16_3 = u_xlat0.yzzx * u_xlat0.xyzz;
    u_xlat16_7.x = dot(unity_SHBr, u_xlat16_3);
    u_xlat16_7.y = dot(unity_SHBg, u_xlat16_3);
    u_xlat16_7.z = dot(unity_SHBb, u_xlat16_3);
    u_xlat16_4.xyz = unity_SHC.xyz * u_xlat16_4.xxx + u_xlat16_7.xyz;
    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat0.w = 1.0;
    u_xlat16_7.x = dot(unity_SHAr, u_xlat0);
    u_xlat16_7.y = dot(unity_SHAg, u_xlat0);
    u_xlat16_7.z = dot(unity_SHAb, u_xlat0);
    u_xlat16_4.xyz = u_xlat16_4.xyz + u_xlat16_7.xyz;
    vs_TEXCOORD1.xyz = u_xlat16_4.xyz;
    vs_TEXCOORD1.w = 1.0;
    u_xlat5.x = float(0.5);
    u_xlat5.z = float(0.5);
    u_xlat5.y = _ProjectionParams.x;
    u_xlat2.xyz = u_xlat2.xyw * u_xlat5.xyz;
    u_xlat2.w = u_xlat2.y * 0.5;
    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4_mhyJitteredVP[1];
    u_xlat2 = hlslcc_mtx4x4_mhyJitteredVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4_mhyJitteredVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat2.xyz = vec3(u_xlat5.z * u_xlat1.x, u_xlat5.y * u_xlat1.y, u_xlat5.z * u_xlat1.w);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    u_xlat2.w = u_xlat2.y * 0.5;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat24 = dot(hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, hlslcc_mtx4x4unity_ObjectToWorld[0].xyz);
    vs_TEXCOORD4.z = sqrt(u_xlat24);
    u_xlat24 = dot(hlslcc_mtx4x4unity_ObjectToWorld[1].xyz, hlslcc_mtx4x4unity_ObjectToWorld[1].xyz);
    vs_TEXCOORD4.w = sqrt(u_xlat24);
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD5.w = 0.0;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
    vs_TEXCOORD6.xyz = u_xlat1.xyz;
    vs_TEXCOORD6.w = 0.0;
    vs_TEXCOORD7.xyz = u_xlat0.xyz;
    vs_TEXCOORD7.w = 0.0;
    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
    u_xlat24 = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD8.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    vs_TEXCOORD8.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	mediump vec4 _LightColor0;
uniform 	float _AlphaRange;
uniform 	float _AlphaOffset;
uniform 	float _Opacity;
uniform 	mediump float _BottomAlphaToggle;
uniform 	float _AlphaBottomRange;
uniform 	float _AlphaBottomOffset;
uniform 	vec4 _WaterfallTex01_ST;
uniform 	mediump vec4 _FoamUVCoord01;
uniform 	mediump vec4 _FoamUVCoord02;
uniform 	float _FoamRange;
uniform 	float _FoamOffset;
uniform 	vec4 _DayColor;
uniform 	vec4 _BottomColor;
uniform 	vec4 _TopColor;
uniform 	float _ColorGradientRange;
uniform 	float _ColorGradientOffset;
uniform 	vec4 _ReflectionColor_Dark;
uniform 	vec4 _ReflectionColor_Light;
uniform 	float _Normal01_U_Speed;
uniform 	vec4 _Normal01_ST;
uniform 	float _Normal01_VSpeed;
uniform 	float _Normal02_U_Speed;
uniform 	vec4 _Normal02_ST;
uniform 	float _Normal02_V_Speed;
uniform 	vec4 _DistortionIntensity;
uniform 	float _ReflectionBrightness;
uniform 	float _ReflectionIntensity;
uniform 	float _WaterFall01_Speed;
uniform 	float _Waterfall02_Speed;
uniform 	mediump vec4 _WaterfallPatternColor;
uniform 	float _Waterfall01Brightness;
uniform 	float _Waterfall02Brightness;
uniform 	float _SprayRange;
uniform 	float _SprayOffset;
uniform 	float _ShadowStrength;
uniform 	vec4 _WaterfallSpecTex_ST;
uniform 	float _Detail01_U_Speed;
uniform 	vec4 _NoiseTex_ST;
uniform 	float _Detail01_V_Speed;
uniform 	float _NoiselDistortionValue;
uniform 	mediump vec4 _WaterfallSpecColor;
uniform 	mediump vec4 _FoamColor;
uniform 	vec3 _ES_MainLightColor;
uniform lowp sampler2D _WaterfallTex01;
uniform lowp sampler2D _Normal01;
uniform lowp sampler2D _Normal02;
uniform lowp samplerCube _Reflection;
uniform lowp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _WaterfallSpecTex;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
in highp vec4 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
lowp vec3 u_xlat10_0;
vec4 u_xlat1;
mediump float u_xlat16_1;
lowp float u_xlat10_1;
bool u_xlatb1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
bool u_xlatb3;
vec3 u_xlat4;
vec3 u_xlat5;
vec3 u_xlat6;
bool u_xlatb6;
vec3 u_xlat7;
mediump float u_xlat16_8;
vec3 u_xlat9;
vec2 u_xlat13;
lowp float u_xlat10_13;
float u_xlat18;
mediump float u_xlat16_18;
lowp float u_xlat10_18;
float u_xlat19;
bool u_xlatb19;
void main()
{
    u_xlat0.xy = vs_TEXCOORD4.xy * _Normal01_ST.xy + _Normal01_ST.zw;
    u_xlat0.x = u_xlat0.x * vs_TEXCOORD4.z;
    u_xlat1.x = _Time.y * _Normal01_U_Speed + u_xlat0.x;
    u_xlat0.x = _Time.y * _Normal01_VSpeed;
    u_xlat1.y = u_xlat0.y * vs_TEXCOORD4.w + u_xlat0.x;
    u_xlat10_0.xyz = texture(_Normal01, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xy = vs_TEXCOORD4.xy * _Normal02_ST.xy + _Normal02_ST.zw;
    u_xlat0.xy = vec2(u_xlat0.x * vs_TEXCOORD4.z, u_xlat0.y * vs_TEXCOORD4.w);
    u_xlat1.x = _Time.y * _Normal02_U_Speed + u_xlat0.x;
    u_xlat1.y = _Time.y * _Normal02_V_Speed + u_xlat0.y;
    u_xlat10_0.xyz = texture(_Normal02, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_2.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = u_xlat16_2.xyz * _DistortionIntensity.xyz;
    u_xlat1.x = vs_TEXCOORD6.x;
    u_xlat1.y = vs_TEXCOORD8.x;
    u_xlat1.z = vs_TEXCOORD7.x;
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat3.x = vs_TEXCOORD6.y;
    u_xlat3.y = vs_TEXCOORD8.y;
    u_xlat3.z = vs_TEXCOORD7.y;
    u_xlat1.y = dot(u_xlat3.xyz, u_xlat0.xyz);
    u_xlat3.x = vs_TEXCOORD6.z;
    u_xlat3.y = vs_TEXCOORD8.z;
    u_xlat3.z = vs_TEXCOORD7.z;
    u_xlat1.z = dot(u_xlat3.xyz, u_xlat0.xyz);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
    u_xlat18 = dot((-u_xlat1.xyz), u_xlat0.xyz);
    u_xlat18 = u_xlat18 + u_xlat18;
    u_xlat0.xyz = u_xlat0.xyz * (-vec3(u_xlat18)) + (-u_xlat1.xyz);
    u_xlat10_0.x = texture(_Reflection, u_xlat0.xyz).x;
    u_xlat6.xyz = (-_ReflectionColor_Dark.xyz) + _ReflectionColor_Light.xyz;
    u_xlat0.xyz = u_xlat10_0.xxx * u_xlat6.xyz + _ReflectionColor_Dark.xyz;
    u_xlat18 = vs_TEXCOORD4.y * _ColorGradientRange + _ColorGradientOffset;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat1.xyz = (-_BottomColor.xyz) + _TopColor.xyz;
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz + _BottomColor.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.200000003, 0.200000003, 0.200000003);
    u_xlat0.xyz = u_xlat0.xyz * vec3(_ReflectionBrightness) + (-u_xlat1.xyz);
    u_xlat0.xyz = vec3(vec3(_ReflectionIntensity, _ReflectionIntensity, _ReflectionIntensity)) * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat1.xy = vs_TEXCOORD4.xy * _WaterfallTex01_ST.xy + _WaterfallTex01_ST.zw;
    u_xlat1.xy = vec2(u_xlat1.x * vs_TEXCOORD4.z, u_xlat1.y * vs_TEXCOORD4.w);
    u_xlat1.zw = _Time.yy * vec2(_WaterFall01_Speed, _Waterfall02_Speed) + u_xlat1.yy;
    u_xlat10_18 = texture(_WaterfallTex01, u_xlat1.xz).x;
    u_xlat10_13 = texture(_WaterfallTex01, u_xlat1.xw).y;
    u_xlat16_2.x = (-u_xlat10_18) + u_xlat10_13;
    u_xlat16_2.x = u_xlat10_13 * u_xlat16_2.x + u_xlat10_18;
    u_xlat18 = u_xlat10_18 * _Waterfall01Brightness;
    u_xlat3.xyz = u_xlat16_2.xxx * _WaterfallPatternColor.xyz + (-u_xlat0.xyz);
    u_xlat19 = u_xlat10_13 * _Waterfall02Brightness + (-u_xlat18);
    u_xlat13.x = u_xlat10_13 * _Waterfall02Brightness;
    u_xlat18 = u_xlat13.x * u_xlat19 + u_xlat18;
    u_xlat13.x = vs_TEXCOORD4.y * _SprayRange + _SprayOffset;
    u_xlat13.x = (-u_xlat13.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat13.x = min(max(u_xlat13.x, 0.0), 1.0);
#else
    u_xlat13.x = clamp(u_xlat13.x, 0.0, 1.0);
#endif
    u_xlat18 = u_xlat18 * u_xlat13.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * _DayColor.xyz;
    u_xlat13.xy = vs_TEXCOORD4.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat3.x = _Time.y * _Detail01_U_Speed + u_xlat13.x;
    u_xlat3.y = _Time.y * _Detail01_V_Speed + u_xlat13.y;
    u_xlat10_18 = texture(_NoiseTex, u_xlat3.xy).x;
    u_xlat16_2.x = vs_TEXCOORD4.w * 0.5;
    u_xlat13.xy = vs_TEXCOORD4.xy * _WaterfallSpecTex_ST.xy + _WaterfallSpecTex_ST.zw;
    u_xlat16_2.x = vs_TEXCOORD4.w * u_xlat13.y + (-u_xlat16_2.x);
    u_xlat3.x = u_xlat10_18 * _NoiselDistortionValue + u_xlat13.x;
    u_xlat3.y = u_xlat10_18 * _NoiselDistortionValue + u_xlat16_2.x;
    u_xlat10_18 = texture(_WaterfallSpecTex, u_xlat3.xy).x;
    u_xlat16_3.xyz = vec3(u_xlat10_18) * _WaterfallSpecColor.xyz;
    u_xlat13.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat10_18 = texture(_ShadowMapTexture, u_xlat13.xy).x;
    u_xlat13.x = (-_ShadowStrength) + 1.0;
    u_xlat18 = u_xlat10_18 * u_xlat13.x + _ShadowStrength;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat16_3.xyz;
    u_xlat13.xy = vec2(_Time.y * _FoamUVCoord01.z, _Time.y * _FoamUVCoord01.w);
    u_xlat13.xy = u_xlat1.xy * _FoamUVCoord01.xy + u_xlat13.xy;
    u_xlat10_18 = texture(_WaterfallTex01, u_xlat13.xy).x;
    u_xlat13.xy = vec2(_Time.y * _FoamUVCoord02.z, _Time.y * _FoamUVCoord02.w);
    u_xlat1.xy = u_xlat1.xy * _FoamUVCoord02.xy + u_xlat13.xy;
    u_xlat10_1 = texture(_WaterfallTex01, u_xlat1.xy).y;
    u_xlat16_18 = u_xlat10_18 + u_xlat10_1;
    u_xlat1.x = vs_TEXCOORD4.y * _FoamRange + _FoamOffset;
    u_xlat18 = u_xlat16_18 + u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat1.x = (-u_xlat1.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat18 * u_xlat1.x;
    u_xlat0.xyz = u_xlat1.xxx * _FoamColor.xyz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * _ES_MainLightColor.xyz;
    u_xlat16_1 = max(_LightColor0.w, 1.0);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16_1);
    u_xlat1.xyz = vs_TEXCOORD5.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat19 = u_xlat1.y * _HeigtFogParams.x;
    u_xlat3.x = u_xlat19 * -1.44269502;
    u_xlat3.x = exp2(u_xlat3.x);
    u_xlat3.x = (-u_xlat3.x) + 1.0;
    u_xlat3.x = u_xlat3.x / u_xlat19;
#ifdef UNITY_ADRENO_ES3
    u_xlatb19 = !!(0.00999999978<abs(u_xlat19));
#else
    u_xlatb19 = 0.00999999978<abs(u_xlat19);
#endif
    u_xlat16_2.x = (u_xlatb19) ? u_xlat3.x : 1.0;
    u_xlat19 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat19 = sqrt(u_xlat19);
    u_xlat3.x = u_xlat19 * _HeigtFogParams.y;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat3.x;
    u_xlat16_2.x = exp2((-u_xlat16_2.x));
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat3.x = u_xlat1.y * _HeigtFogParams2.x;
    u_xlat9.x = u_xlat3.x * -1.44269502;
    u_xlat9.x = exp2(u_xlat9.x);
    u_xlat9.x = (-u_xlat9.x) + 1.0;
    u_xlat9.x = u_xlat9.x / u_xlat3.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(0.00999999978<abs(u_xlat3.x));
#else
    u_xlatb3 = 0.00999999978<abs(u_xlat3.x);
#endif
    u_xlat16_8 = (u_xlatb3) ? u_xlat9.x : 1.0;
    u_xlat3.x = u_xlat19 * _HeigtFogParams2.y;
    u_xlat16_8 = u_xlat16_8 * u_xlat3.x;
    u_xlat16_8 = exp2((-u_xlat16_8));
    u_xlat16_2.y = (-u_xlat16_8) + 1.0;
    u_xlat16_2.xy = max(u_xlat16_2.xy, vec2(0.0, 0.0));
    u_xlat16_2.x = u_xlat16_2.y + u_xlat16_2.x;
    u_xlat3.x = u_xlat19 * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat3.x = min(max(u_xlat3.x, 0.0), 1.0);
#else
    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
#endif
    u_xlat16_8 = (-u_xlat3.x) + 2.0;
    u_xlat16_8 = u_xlat16_8 * u_xlat3.x;
    u_xlat3.x = u_xlat16_8 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat3.x = u_xlat3.x + 1.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat3.x;
    u_xlat3.x = min(u_xlat16_2.x, _HeigtFogColBase.w);
    u_xlat9.x = (-u_xlat3.x) + 1.0;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat4.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat4.xyz);
    u_xlat7.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!((-u_xlat1.x)>=u_xlat7.x);
#else
    u_xlatb1 = (-u_xlat1.x)>=u_xlat7.x;
#endif
    u_xlat7.x = u_xlat19 * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat13.x = u_xlat19 + (-_HeigtFogRamp.w);
    u_xlat13.x = u_xlat13.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat13.x = min(max(u_xlat13.x, 0.0), 1.0);
#else
    u_xlat13.x = clamp(u_xlat13.x, 0.0, 1.0);
#endif
    u_xlat19 = (-u_xlat7.x) + 2.0;
    u_xlat7.x = u_xlat19 * u_xlat7.x;
    u_xlat19 = u_xlat7.x * _HeigtFogColDelta.w;
    u_xlat1.x = (u_xlatb1) ? u_xlat19 : u_xlat7.x;
    u_xlat1.x = log2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * unity_FogColor.w;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat1.x = min(u_xlat1.x, _HeigtFogColBase.w);
    u_xlat7.x = vs_TEXCOORD5.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat16_2.x = (-u_xlat7.x) + 2.0;
    u_xlat16_2.x = u_xlat7.x * u_xlat16_2.x;
    u_xlat4.xyz = u_xlat16_2.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat5.xyz = (-u_xlat4.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat7.xyz = u_xlat13.xxx * u_xlat5.xyz + u_xlat4.xyz;
    u_xlat1.yzw = u_xlat1.xxx * u_xlat7.xyz;
    u_xlat1.x = (-u_xlat1.x) + 1.0;
    u_xlat1 = u_xlat9.xxxx * u_xlat1;
    u_xlat9.x = vs_TEXCOORD5.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat9.x = min(max(u_xlat9.x, 0.0), 1.0);
#else
    u_xlat9.x = clamp(u_xlat9.x, 0.0, 1.0);
#endif
    u_xlat9.xyz = u_xlat9.xxx * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    u_xlat7.xyz = u_xlat9.xyz * u_xlat3.xxx + u_xlat1.yzw;
    u_xlat1.xyz = u_xlat1.xxx * u_xlat0.xyz + u_xlat7.xyz;
    u_xlat0.x = vs_TEXCOORD4.y * _AlphaBottomRange + _AlphaBottomOffset;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(_BottomAlphaToggle==1.0);
#else
    u_xlatb6 = _BottomAlphaToggle==1.0;
#endif
    u_xlat0.x = (u_xlatb6) ? u_xlat0.x : 1.0;
    u_xlat6.x = vs_TEXCOORD4.y * _AlphaRange + _AlphaOffset;
    u_xlat6.x = (-u_xlat6.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat6.x = u_xlat6.x * _Opacity;
    u_xlat0.x = u_xlat0.x * u_xlat6.x;
    u_xlat1.w = u_xlat18 * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "MSAA_INTERPOLATION" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	mediump float _MHYZBias;
uniform 	vec4 hlslcc_mtx4x4_mhyJitteredVP[4];
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
mediump vec4 u_xlat16_3;
bool u_xlatb3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat6;
mediump vec3 u_xlat16_7;
float u_xlat11;
mediump float u_xlat16_12;
float u_xlat18;
bool u_xlatb18;
float u_xlat19;
float u_xlat24;
bool u_xlatb24;
float u_xlat27;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat2.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    gl_Position = u_xlat2;
    vs_TEXCOORD2.zw = u_xlat2.zw;
    vs_COLOR0 = in_COLOR0;
    u_xlat3.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat24 = u_xlat3.y * _HeigtFogParams.x;
    u_xlat18 = u_xlat24 * -1.44269502;
    u_xlat18 = exp2(u_xlat18);
    u_xlat18 = (-u_xlat18) + 1.0;
    u_xlat18 = u_xlat18 / u_xlat24;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(0.00999999978<abs(u_xlat24));
#else
    u_xlatb24 = 0.00999999978<abs(u_xlat24);
#endif
    u_xlat16_4.x = (u_xlatb24) ? u_xlat18 : 1.0;
    u_xlat24 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat24 = sqrt(u_xlat24);
    u_xlat18 = u_xlat24 * _HeigtFogParams.y;
    u_xlat16_4.x = u_xlat18 * u_xlat16_4.x;
    u_xlat16_4.x = exp2((-u_xlat16_4.x));
    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
    u_xlat18 = u_xlat3.y * _HeigtFogParams2.x;
    u_xlat27 = u_xlat18 * -1.44269502;
    u_xlat27 = exp2(u_xlat27);
    u_xlat27 = (-u_xlat27) + 1.0;
    u_xlat27 = u_xlat27 / u_xlat18;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(0.00999999978<abs(u_xlat18));
#else
    u_xlatb18 = 0.00999999978<abs(u_xlat18);
#endif
    u_xlat16_12 = (u_xlatb18) ? u_xlat27 : 1.0;
    u_xlat18 = u_xlat24 * _HeigtFogParams2.y;
    u_xlat16_12 = u_xlat18 * u_xlat16_12;
    u_xlat16_12 = exp2((-u_xlat16_12));
    u_xlat16_4.y = (-u_xlat16_12) + 1.0;
    u_xlat16_4.xy = max(u_xlat16_4.xy, vec2(0.0, 0.0));
    u_xlat16_4.x = u_xlat16_4.y + u_xlat16_4.x;
    u_xlat18 = u_xlat24 * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat16_12 = (-u_xlat18) + 2.0;
    u_xlat16_12 = u_xlat18 * u_xlat16_12;
    u_xlat18 = u_xlat16_12 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat18 = u_xlat18 + 1.0;
    u_xlat16_4.x = u_xlat18 * u_xlat16_4.x;
    u_xlat18 = min(u_xlat16_4.x, _HeigtFogColBase.w);
    u_xlat27 = (-u_xlat18) + 1.0;
    u_xlat5.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat5.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat5.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat3.x = dot(u_xlat3.xyz, u_xlat5.xyz);
    u_xlat11 = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!((-u_xlat3.x)>=u_xlat11);
#else
    u_xlatb3 = (-u_xlat3.x)>=u_xlat11;
#endif
    u_xlat11 = u_xlat24 * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat11 = min(max(u_xlat11, 0.0), 1.0);
#else
    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
#endif
    u_xlat24 = u_xlat24 + (-_HeigtFogRamp.w);
    u_xlat24 = u_xlat24 * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat19 = (-u_xlat11) + 2.0;
    u_xlat11 = u_xlat19 * u_xlat11;
    u_xlat19 = u_xlat11 * _HeigtFogColDelta.w;
    u_xlat3.x = (u_xlatb3) ? u_xlat19 : u_xlat11;
    u_xlat3.x = log2(u_xlat3.x);
    u_xlat3.x = u_xlat3.x * unity_FogColor.w;
    u_xlat3.x = exp2(u_xlat3.x);
    u_xlat3.x = min(u_xlat3.x, _HeigtFogColBase.w);
    u_xlat11 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat11 = min(max(u_xlat11, 0.0), 1.0);
#else
    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
#endif
    u_xlat16_4.x = (-u_xlat11) + 2.0;
    u_xlat16_4.x = u_xlat11 * u_xlat16_4.x;
    u_xlat5.xyz = u_xlat16_4.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat6.xyz = (-u_xlat5.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat5.xyz = vec3(u_xlat24) * u_xlat6.xyz + u_xlat5.xyz;
    u_xlat5.xyz = u_xlat3.xxx * u_xlat5.xyz;
    u_xlat24 = (-u_xlat3.x) + 1.0;
    vs_TEXCOORD0.w = u_xlat27 * u_xlat24;
    u_xlat3.xyz = vec3(u_xlat27) * u_xlat5.xyz;
    u_xlat24 = u_xlat0.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    u_xlat0.xyz = vec3(u_xlat24) * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    vs_TEXCOORD0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat3.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat0.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    u_xlat16_4.x = u_xlat0.y * u_xlat0.y;
    u_xlat16_4.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_4.x);
    u_xlat16_3 = u_xlat0.yzzx * u_xlat0.xyzz;
    u_xlat16_7.x = dot(unity_SHBr, u_xlat16_3);
    u_xlat16_7.y = dot(unity_SHBg, u_xlat16_3);
    u_xlat16_7.z = dot(unity_SHBb, u_xlat16_3);
    u_xlat16_4.xyz = unity_SHC.xyz * u_xlat16_4.xxx + u_xlat16_7.xyz;
    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat0.w = 1.0;
    u_xlat16_7.x = dot(unity_SHAr, u_xlat0);
    u_xlat16_7.y = dot(unity_SHAg, u_xlat0);
    u_xlat16_7.z = dot(unity_SHAb, u_xlat0);
    u_xlat16_4.xyz = u_xlat16_4.xyz + u_xlat16_7.xyz;
    vs_TEXCOORD1.xyz = u_xlat16_4.xyz;
    vs_TEXCOORD1.w = 1.0;
    u_xlat5.x = float(0.5);
    u_xlat5.z = float(0.5);
    u_xlat5.y = _ProjectionParams.x;
    u_xlat2.xyz = u_xlat2.xyw * u_xlat5.xyz;
    u_xlat2.w = u_xlat2.y * 0.5;
    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4_mhyJitteredVP[1];
    u_xlat2 = hlslcc_mtx4x4_mhyJitteredVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4_mhyJitteredVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat2.xyz = vec3(u_xlat5.z * u_xlat1.x, u_xlat5.y * u_xlat1.y, u_xlat5.z * u_xlat1.w);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    u_xlat2.w = u_xlat2.y * 0.5;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat24 = dot(hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, hlslcc_mtx4x4unity_ObjectToWorld[0].xyz);
    vs_TEXCOORD4.z = sqrt(u_xlat24);
    u_xlat24 = dot(hlslcc_mtx4x4unity_ObjectToWorld[1].xyz, hlslcc_mtx4x4unity_ObjectToWorld[1].xyz);
    vs_TEXCOORD4.w = sqrt(u_xlat24);
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD5.w = 0.0;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
    vs_TEXCOORD6.xyz = u_xlat1.xyz;
    vs_TEXCOORD6.w = 0.0;
    vs_TEXCOORD7.xyz = u_xlat0.xyz;
    vs_TEXCOORD7.w = 0.0;
    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
    u_xlat24 = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD8.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    vs_TEXCOORD8.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	mediump vec4 _LightColor0;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	float _AlphaRange;
uniform 	float _AlphaOffset;
uniform 	float _Opacity;
uniform 	mediump float _BottomAlphaToggle;
uniform 	float _AlphaBottomRange;
uniform 	float _AlphaBottomOffset;
uniform 	vec4 _WaterfallTex01_ST;
uniform 	mediump vec4 _FoamUVCoord01;
uniform 	mediump vec4 _FoamUVCoord02;
uniform 	float _FoamRange;
uniform 	float _FoamOffset;
uniform 	vec4 _DayColor;
uniform 	vec4 _BottomColor;
uniform 	vec4 _TopColor;
uniform 	float _ColorGradientRange;
uniform 	float _ColorGradientOffset;
uniform 	vec4 _ReflectionColor_Dark;
uniform 	vec4 _ReflectionColor_Light;
uniform 	float _Normal01_U_Speed;
uniform 	vec4 _Normal01_ST;
uniform 	float _Normal01_VSpeed;
uniform 	float _Normal02_U_Speed;
uniform 	vec4 _Normal02_ST;
uniform 	float _Normal02_V_Speed;
uniform 	vec4 _DistortionIntensity;
uniform 	float _ReflectionBrightness;
uniform 	float _ReflectionIntensity;
uniform 	float _WaterFall01_Speed;
uniform 	float _Waterfall02_Speed;
uniform 	mediump vec4 _WaterfallPatternColor;
uniform 	float _Waterfall01Brightness;
uniform 	float _Waterfall02Brightness;
uniform 	float _SprayRange;
uniform 	float _SprayOffset;
uniform 	float _ShadowStrength;
uniform 	vec4 _WaterfallSpecTex_ST;
uniform 	float _Detail01_U_Speed;
uniform 	vec4 _NoiseTex_ST;
uniform 	float _Detail01_V_Speed;
uniform 	float _NoiselDistortionValue;
uniform 	mediump vec4 _WaterfallSpecColor;
uniform 	mediump vec4 _FoamColor;
uniform 	vec3 _ES_MainLightColor;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _WaterfallTex01;
uniform lowp sampler2D _Normal01;
uniform lowp sampler2D _Normal02;
uniform lowp samplerCube _Reflection;
uniform lowp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _WaterfallSpecTex;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
in highp vec4 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
lowp vec3 u_xlat10_0;
vec4 u_xlat1;
mediump float u_xlat16_1;
lowp float u_xlat10_1;
bool u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
bool u_xlatb3;
vec3 u_xlat4;
vec3 u_xlat5;
vec3 u_xlat6;
float u_xlat7;
mediump float u_xlat16_8;
float u_xlat9;
bool u_xlatb9;
float u_xlat12;
bool u_xlatb12;
vec2 u_xlat13;
lowp float u_xlat10_13;
float u_xlat15;
float u_xlat18;
mediump float u_xlat16_18;
lowp float u_xlat10_18;
float u_xlat19;
lowp float u_xlat10_21;
void main()
{
    u_xlat0.xy = vs_TEXCOORD4.xy * _Normal01_ST.xy + _Normal01_ST.zw;
    u_xlat0.x = u_xlat0.x * vs_TEXCOORD4.z;
    u_xlat1.x = _Time.y * _Normal01_U_Speed + u_xlat0.x;
    u_xlat0.x = _Time.y * _Normal01_VSpeed;
    u_xlat1.y = u_xlat0.y * vs_TEXCOORD4.w + u_xlat0.x;
    u_xlat10_0.xyz = texture(_Normal01, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xy = vs_TEXCOORD4.xy * _Normal02_ST.xy + _Normal02_ST.zw;
    u_xlat0.xy = vec2(u_xlat0.x * vs_TEXCOORD4.z, u_xlat0.y * vs_TEXCOORD4.w);
    u_xlat1.x = _Time.y * _Normal02_U_Speed + u_xlat0.x;
    u_xlat1.y = _Time.y * _Normal02_V_Speed + u_xlat0.y;
    u_xlat10_0.xyz = texture(_Normal02, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_2.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = u_xlat16_2.xyz * _DistortionIntensity.xyz;
    u_xlat1.x = vs_TEXCOORD6.x;
    u_xlat1.y = vs_TEXCOORD8.x;
    u_xlat1.z = vs_TEXCOORD7.x;
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat3.x = vs_TEXCOORD6.y;
    u_xlat3.y = vs_TEXCOORD8.y;
    u_xlat3.z = vs_TEXCOORD7.y;
    u_xlat1.y = dot(u_xlat3.xyz, u_xlat0.xyz);
    u_xlat3.x = vs_TEXCOORD6.z;
    u_xlat3.y = vs_TEXCOORD8.z;
    u_xlat3.z = vs_TEXCOORD7.z;
    u_xlat1.z = dot(u_xlat3.xyz, u_xlat0.xyz);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
    u_xlat18 = dot((-u_xlat1.xyz), u_xlat0.xyz);
    u_xlat18 = u_xlat18 + u_xlat18;
    u_xlat0.xyz = u_xlat0.xyz * (-vec3(u_xlat18)) + (-u_xlat1.xyz);
    u_xlat10_0.x = texture(_Reflection, u_xlat0.xyz).x;
    u_xlat6.xyz = (-_ReflectionColor_Dark.xyz) + _ReflectionColor_Light.xyz;
    u_xlat0.xyz = u_xlat10_0.xxx * u_xlat6.xyz + _ReflectionColor_Dark.xyz;
    u_xlat18 = vs_TEXCOORD4.y * _ColorGradientRange + _ColorGradientOffset;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat1.xyz = (-_BottomColor.xyz) + _TopColor.xyz;
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz + _BottomColor.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.200000003, 0.200000003, 0.200000003);
    u_xlat0.xyz = u_xlat0.xyz * vec3(_ReflectionBrightness) + (-u_xlat1.xyz);
    u_xlat0.xyz = vec3(vec3(_ReflectionIntensity, _ReflectionIntensity, _ReflectionIntensity)) * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat1.xy = vs_TEXCOORD4.xy * _WaterfallTex01_ST.xy + _WaterfallTex01_ST.zw;
    u_xlat1.xy = vec2(u_xlat1.x * vs_TEXCOORD4.z, u_xlat1.y * vs_TEXCOORD4.w);
    u_xlat1.zw = _Time.yy * vec2(_WaterFall01_Speed, _Waterfall02_Speed) + u_xlat1.yy;
    u_xlat10_18 = texture(_WaterfallTex01, u_xlat1.xz).x;
    u_xlat10_13 = texture(_WaterfallTex01, u_xlat1.xw).y;
    u_xlat16_2.x = (-u_xlat10_18) + u_xlat10_13;
    u_xlat16_2.x = u_xlat10_13 * u_xlat16_2.x + u_xlat10_18;
    u_xlat18 = u_xlat10_18 * _Waterfall01Brightness;
    u_xlat3.xyz = u_xlat16_2.xxx * _WaterfallPatternColor.xyz + (-u_xlat0.xyz);
    u_xlat19 = u_xlat10_13 * _Waterfall02Brightness + (-u_xlat18);
    u_xlat13.x = u_xlat10_13 * _Waterfall02Brightness;
    u_xlat18 = u_xlat13.x * u_xlat19 + u_xlat18;
    u_xlat13.x = vs_TEXCOORD4.y * _SprayRange + _SprayOffset;
    u_xlat13.x = (-u_xlat13.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat13.x = min(max(u_xlat13.x, 0.0), 1.0);
#else
    u_xlat13.x = clamp(u_xlat13.x, 0.0, 1.0);
#endif
    u_xlat18 = u_xlat18 * u_xlat13.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * _DayColor.xyz;
    u_xlat13.xy = vs_TEXCOORD4.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat3.x = _Time.y * _Detail01_U_Speed + u_xlat13.x;
    u_xlat3.y = _Time.y * _Detail01_V_Speed + u_xlat13.y;
    u_xlat10_18 = texture(_NoiseTex, u_xlat3.xy).x;
    u_xlat16_2.x = vs_TEXCOORD4.w * 0.5;
    u_xlat13.xy = vs_TEXCOORD4.xy * _WaterfallSpecTex_ST.xy + _WaterfallSpecTex_ST.zw;
    u_xlat16_2.x = vs_TEXCOORD4.w * u_xlat13.y + (-u_xlat16_2.x);
    u_xlat3.x = u_xlat10_18 * _NoiselDistortionValue + u_xlat13.x;
    u_xlat3.y = u_xlat10_18 * _NoiselDistortionValue + u_xlat16_2.x;
    u_xlat10_18 = texture(_WaterfallSpecTex, u_xlat3.xy).x;
    u_xlat16_3.xyz = vec3(u_xlat10_18) * _WaterfallSpecColor.xyz;
    u_xlat18 = (-_ShadowStrength) + 1.0;
    u_xlat13.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat10_21 = texture(_ShadowMapTexture, u_xlat13.xy).x;
    u_xlat13.x = texture(_CameraDepthTexture, u_xlat13.xy).x;
    u_xlat13.x = _ZBufferParams.z * u_xlat13.x + _ZBufferParams.w;
    u_xlat13.x = float(1.0) / u_xlat13.x;
    u_xlat13.x = u_xlat13.x + (-vs_TEXCOORD3.w);
    u_xlat18 = u_xlat10_21 * u_xlat18 + _ShadowStrength;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat16_3.xyz;
    u_xlat3.xy = vec2(_Time.y * _FoamUVCoord01.z, _Time.y * _FoamUVCoord01.w);
    u_xlat3.xy = u_xlat1.xy * _FoamUVCoord01.xy + u_xlat3.xy;
    u_xlat10_18 = texture(_WaterfallTex01, u_xlat3.xy).x;
    u_xlat3.xy = vec2(_Time.y * _FoamUVCoord02.z, _Time.y * _FoamUVCoord02.w);
    u_xlat1.xy = u_xlat1.xy * _FoamUVCoord02.xy + u_xlat3.xy;
    u_xlat10_1 = texture(_WaterfallTex01, u_xlat1.xy).y;
    u_xlat16_18 = u_xlat10_18 + u_xlat10_1;
    u_xlat1.x = vs_TEXCOORD4.y * _FoamRange + _FoamOffset;
    u_xlat18 = u_xlat16_18 + u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat1.x = (-u_xlat1.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat18 * u_xlat1.x;
    u_xlat0.xyz = u_xlat1.xxx * _FoamColor.xyz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * _ES_MainLightColor.xyz;
    u_xlat16_1 = max(_LightColor0.w, 1.0);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16_1);
    u_xlat1.xyw = vs_TEXCOORD5.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat3.x = u_xlat1.y * _HeigtFogParams.x;
    u_xlat9 = u_xlat3.x * -1.44269502;
    u_xlat9 = exp2(u_xlat9);
    u_xlat9 = (-u_xlat9) + 1.0;
    u_xlat9 = u_xlat9 / u_xlat3.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(0.00999999978<abs(u_xlat3.x));
#else
    u_xlatb3 = 0.00999999978<abs(u_xlat3.x);
#endif
    u_xlat16_2.x = (u_xlatb3) ? u_xlat9 : 1.0;
    u_xlat3.x = dot(u_xlat1.xyw, u_xlat1.xyw);
    u_xlat3.x = sqrt(u_xlat3.x);
    u_xlat9 = u_xlat3.x * _HeigtFogParams.y;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat9;
    u_xlat16_2.x = exp2((-u_xlat16_2.x));
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat9 = u_xlat1.y * _HeigtFogParams2.x;
    u_xlat15 = u_xlat9 * -1.44269502;
    u_xlat15 = exp2(u_xlat15);
    u_xlat15 = (-u_xlat15) + 1.0;
    u_xlat15 = u_xlat15 / u_xlat9;
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(0.00999999978<abs(u_xlat9));
#else
    u_xlatb9 = 0.00999999978<abs(u_xlat9);
#endif
    u_xlat16_8 = (u_xlatb9) ? u_xlat15 : 1.0;
    u_xlat9 = u_xlat3.x * _HeigtFogParams2.y;
    u_xlat16_8 = u_xlat16_8 * u_xlat9;
    u_xlat16_8 = exp2((-u_xlat16_8));
    u_xlat16_2.y = (-u_xlat16_8) + 1.0;
    u_xlat16_2.xy = max(u_xlat16_2.xy, vec2(0.0, 0.0));
    u_xlat16_2.x = u_xlat16_2.y + u_xlat16_2.x;
    u_xlat9 = u_xlat3.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat9 = min(max(u_xlat9, 0.0), 1.0);
#else
    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
#endif
    u_xlat16_8 = (-u_xlat9) + 2.0;
    u_xlat16_8 = u_xlat16_8 * u_xlat9;
    u_xlat9 = u_xlat16_8 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat9 = u_xlat9 + 1.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat9;
    u_xlat9 = min(u_xlat16_2.x, _HeigtFogColBase.w);
    u_xlat15 = (-u_xlat9) + 1.0;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat4.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat1.x = dot(u_xlat1.xyw, u_xlat4.xyz);
    u_xlat7 = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!((-u_xlat1.x)>=u_xlat7);
#else
    u_xlatb1 = (-u_xlat1.x)>=u_xlat7;
#endif
    u_xlat7 = u_xlat3.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7 = min(max(u_xlat7, 0.0), 1.0);
#else
    u_xlat7 = clamp(u_xlat7, 0.0, 1.0);
#endif
    u_xlat19 = u_xlat3.x + (-_HeigtFogRamp.w);
    u_xlat19 = u_xlat19 * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat19 = min(max(u_xlat19, 0.0), 1.0);
#else
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
#endif
    u_xlat3.x = (-u_xlat7) + 2.0;
    u_xlat7 = u_xlat7 * u_xlat3.x;
    u_xlat3.x = u_xlat7 * _HeigtFogColDelta.w;
    u_xlat1.x = (u_xlatb1) ? u_xlat3.x : u_xlat7;
    u_xlat1.x = log2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * unity_FogColor.w;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat1.x = min(u_xlat1.x, _HeigtFogColBase.w);
    u_xlat7 = vs_TEXCOORD5.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat7 = min(max(u_xlat7, 0.0), 1.0);
#else
    u_xlat7 = clamp(u_xlat7, 0.0, 1.0);
#endif
    u_xlat16_2.x = (-u_xlat7) + 2.0;
    u_xlat16_2.x = u_xlat7 * u_xlat16_2.x;
    u_xlat4.xyz = u_xlat16_2.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat5.xyz = (-u_xlat4.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat4.xyz = vec3(u_xlat19) * u_xlat5.xyz + u_xlat4.xyz;
    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
    u_xlat1.x = (-u_xlat1.x) + 1.0;
    u_xlat1.x = u_xlat15 * u_xlat1.x;
    u_xlat3.xzw = vec3(u_xlat15) * u_xlat4.xyz;
    u_xlat7 = vs_TEXCOORD5.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat7 = min(max(u_xlat7, 0.0), 1.0);
#else
    u_xlat7 = clamp(u_xlat7, 0.0, 1.0);
#endif
    u_xlat4.xyz = vec3(u_xlat7) * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    u_xlat3.xyz = u_xlat4.xyz * vec3(u_xlat9) + u_xlat3.xzw;
    u_xlat2.xyz = u_xlat1.xxx * u_xlat0.xyz + u_xlat3.xyz;
    u_xlat0.x = u_xlat13.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat6.x = u_xlat13.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat12 = (-u_xlat6.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat12 + u_xlat6.x;
    u_xlat6.x = vs_TEXCOORD4.y * _AlphaRange + _AlphaOffset;
    u_xlat6.x = (-u_xlat6.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat6.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _Opacity;
    u_xlat6.x = vs_TEXCOORD4.y * _AlphaBottomRange + _AlphaBottomOffset;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_BottomAlphaToggle==1.0);
#else
    u_xlatb12 = _BottomAlphaToggle==1.0;
#endif
    u_xlat6.x = (u_xlatb12) ? u_xlat6.x : 1.0;
    u_xlat0.x = u_xlat6.x * u_xlat0.x;
    u_xlat2.w = u_xlat18 * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.w = min(max(u_xlat2.w, 0.0), 1.0);
#else
    u_xlat2.w = clamp(u_xlat2.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat2;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" "MSAA_INTERPOLATION" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	mediump float _MHYZBias;
uniform 	vec4 hlslcc_mtx4x4_mhyJitteredVP[4];
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
vec3 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
bool u_xlatb3;
mediump vec3 u_xlat16_4;
float u_xlat5;
mediump vec4 u_xlat16_5;
vec3 u_xlat6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
float u_xlat11;
mediump float u_xlat16_12;
vec3 u_xlat13;
float u_xlat17;
bool u_xlatb17;
float u_xlat19;
float u_xlat24;
float u_xlat27;
bool u_xlatb27;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat8.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    u_xlat1.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position = u_xlat1;
    vs_TEXCOORD2.zw = u_xlat1.zw;
    vs_COLOR0 = in_COLOR0;
    u_xlat3.xyz = u_xlat8.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat17 = u_xlat3.y * _HeigtFogParams.x;
    u_xlat27 = u_xlat17 * -1.44269502;
    u_xlat27 = exp2(u_xlat27);
    u_xlat27 = (-u_xlat27) + 1.0;
    u_xlat27 = u_xlat27 / u_xlat17;
#ifdef UNITY_ADRENO_ES3
    u_xlatb17 = !!(0.00999999978<abs(u_xlat17));
#else
    u_xlatb17 = 0.00999999978<abs(u_xlat17);
#endif
    u_xlat16_4.x = (u_xlatb17) ? u_xlat27 : 1.0;
    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat17 = sqrt(u_xlat17);
    u_xlat27 = u_xlat17 * _HeigtFogParams.y;
    u_xlat16_4.x = u_xlat27 * u_xlat16_4.x;
    u_xlat16_4.x = exp2((-u_xlat16_4.x));
    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
    u_xlat27 = u_xlat3.y * _HeigtFogParams2.x;
    u_xlat5 = u_xlat27 * -1.44269502;
    u_xlat5 = exp2(u_xlat5);
    u_xlat5 = (-u_xlat5) + 1.0;
    u_xlat5 = u_xlat5 / u_xlat27;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(0.00999999978<abs(u_xlat27));
#else
    u_xlatb27 = 0.00999999978<abs(u_xlat27);
#endif
    u_xlat16_12 = (u_xlatb27) ? u_xlat5 : 1.0;
    u_xlat27 = u_xlat17 * _HeigtFogParams2.y;
    u_xlat16_12 = u_xlat27 * u_xlat16_12;
    u_xlat16_12 = exp2((-u_xlat16_12));
    u_xlat16_4.y = (-u_xlat16_12) + 1.0;
    u_xlat16_4.xy = max(u_xlat16_4.xy, vec2(0.0, 0.0));
    u_xlat16_4.x = u_xlat16_4.y + u_xlat16_4.x;
    u_xlat27 = u_xlat17 * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
    u_xlat16_12 = (-u_xlat27) + 2.0;
    u_xlat16_12 = u_xlat27 * u_xlat16_12;
    u_xlat27 = u_xlat16_12 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat27 = u_xlat27 + 1.0;
    u_xlat16_4.x = u_xlat27 * u_xlat16_4.x;
    u_xlat27 = min(u_xlat16_4.x, _HeigtFogColBase.w);
    u_xlat5 = (-u_xlat27) + 1.0;
    u_xlat13.x = _ProjectionParams.z * 0.999899983;
    u_xlat6.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat6.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat6.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat3.x = dot(u_xlat3.xyz, u_xlat6.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!((-u_xlat3.x)>=u_xlat13.x);
#else
    u_xlatb3 = (-u_xlat3.x)>=u_xlat13.x;
#endif
    u_xlat11 = u_xlat17 * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat11 = min(max(u_xlat11, 0.0), 1.0);
#else
    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
#endif
    u_xlat17 = u_xlat17 + (-_HeigtFogRamp.w);
    u_xlat17 = u_xlat17 * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat17 = min(max(u_xlat17, 0.0), 1.0);
#else
    u_xlat17 = clamp(u_xlat17, 0.0, 1.0);
#endif
    u_xlat19 = (-u_xlat11) + 2.0;
    u_xlat11 = u_xlat19 * u_xlat11;
    u_xlat19 = u_xlat11 * _HeigtFogColDelta.w;
    u_xlat3.x = (u_xlatb3) ? u_xlat19 : u_xlat11;
    u_xlat3.x = log2(u_xlat3.x);
    u_xlat3.x = u_xlat3.x * unity_FogColor.w;
    u_xlat3.x = exp2(u_xlat3.x);
    u_xlat3.x = min(u_xlat3.x, _HeigtFogColBase.w);
    u_xlat11 = u_xlat8.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat11 = min(max(u_xlat11, 0.0), 1.0);
#else
    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
#endif
    u_xlat16_4.x = (-u_xlat11) + 2.0;
    u_xlat16_4.x = u_xlat11 * u_xlat16_4.x;
    u_xlat13.xyz = u_xlat16_4.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat6.xyz = (-u_xlat13.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat13.xyz = vec3(u_xlat17) * u_xlat6.xyz + u_xlat13.xyz;
    u_xlat13.xyz = u_xlat3.xxx * u_xlat13.xyz;
    u_xlat17 = (-u_xlat3.x) + 1.0;
    vs_TEXCOORD0.w = u_xlat5 * u_xlat17;
    u_xlat3.xyz = vec3(u_xlat5) * u_xlat13.xyz;
    u_xlat17 = u_xlat8.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat17 = min(max(u_xlat17, 0.0), 1.0);
#else
    u_xlat17 = clamp(u_xlat17, 0.0, 1.0);
#endif
    vs_TEXCOORD5.xyz = u_xlat8.xyz;
    u_xlat8.xyz = vec3(u_xlat17) * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    vs_TEXCOORD0.xyz = u_xlat8.xyz * vec3(u_xlat27) + u_xlat3.xyz;
    u_xlat3.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat3.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat3.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat8.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat3.xyz = u_xlat8.xxx * u_xlat3.xyz;
    u_xlat16_4.x = u_xlat3.y * u_xlat3.y;
    u_xlat16_4.x = u_xlat3.x * u_xlat3.x + (-u_xlat16_4.x);
    u_xlat16_5 = u_xlat3.yzzx * u_xlat3.xyzz;
    u_xlat16_7.x = dot(unity_SHBr, u_xlat16_5);
    u_xlat16_7.y = dot(unity_SHBg, u_xlat16_5);
    u_xlat16_7.z = dot(unity_SHBb, u_xlat16_5);
    u_xlat16_4.xyz = unity_SHC.xyz * u_xlat16_4.xxx + u_xlat16_7.xyz;
    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat3.w = 1.0;
    u_xlat16_7.x = dot(unity_SHAr, u_xlat3);
    u_xlat16_7.y = dot(unity_SHAg, u_xlat3);
    u_xlat16_7.z = dot(unity_SHAb, u_xlat3);
    u_xlat16_4.xyz = u_xlat16_4.xyz + u_xlat16_7.xyz;
    vs_TEXCOORD1.xyz = u_xlat16_4.xyz;
    vs_TEXCOORD1.w = 1.0;
    u_xlat6.x = float(0.5);
    u_xlat6.z = float(0.5);
    u_xlat6.y = _ProjectionParams.x;
    u_xlat1.xyz = u_xlat1.xyw * u_xlat6.xyz;
    u_xlat1.w = u_xlat1.y * 0.5;
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4_mhyJitteredVP[1];
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[3] * u_xlat2.wwww + u_xlat1;
    u_xlat2.xyz = vec3(u_xlat6.z * u_xlat1.x, u_xlat6.y * u_xlat1.y, u_xlat6.z * u_xlat1.w);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    u_xlat2.w = u_xlat2.y * 0.5;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy;
    u_xlat8.x = dot(unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz);
    vs_TEXCOORD4.z = sqrt(u_xlat8.x);
    u_xlat8.x = dot(unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz);
    vs_TEXCOORD4.w = sqrt(u_xlat8.x);
    vs_TEXCOORD5.w = 0.0;
    u_xlat8.xyz = in_TANGENT0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat8.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_TANGENT0.xxx + u_xlat8.xyz;
    u_xlat0.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_TANGENT0.zzz + u_xlat8.xyz;
    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat0.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    vs_TEXCOORD6.xyz = u_xlat0.xyz;
    vs_TEXCOORD6.w = 0.0;
    vs_TEXCOORD7.xyz = u_xlat3.xyz;
    vs_TEXCOORD7.w = 0.0;
    u_xlat1.xyz = u_xlat0.yzx * u_xlat3.zxy;
    u_xlat0.xyz = u_xlat3.yzx * u_xlat0.zxy + (-u_xlat1.xyz);
    u_xlat24 = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD8.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    vs_TEXCOORD8.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	mediump vec4 _LightColor0;
uniform 	float _AlphaRange;
uniform 	float _AlphaOffset;
uniform 	float _Opacity;
uniform 	mediump float _BottomAlphaToggle;
uniform 	float _AlphaBottomRange;
uniform 	float _AlphaBottomOffset;
uniform 	vec4 _WaterfallTex01_ST;
uniform 	mediump vec4 _FoamUVCoord01;
uniform 	mediump vec4 _FoamUVCoord02;
uniform 	float _FoamRange;
uniform 	float _FoamOffset;
uniform 	vec4 _DayColor;
uniform 	vec4 _BottomColor;
uniform 	vec4 _TopColor;
uniform 	float _ColorGradientRange;
uniform 	float _ColorGradientOffset;
uniform 	vec4 _ReflectionColor_Dark;
uniform 	vec4 _ReflectionColor_Light;
uniform 	float _Normal01_U_Speed;
uniform 	vec4 _Normal01_ST;
uniform 	float _Normal01_VSpeed;
uniform 	float _Normal02_U_Speed;
uniform 	vec4 _Normal02_ST;
uniform 	float _Normal02_V_Speed;
uniform 	vec4 _DistortionIntensity;
uniform 	float _ReflectionBrightness;
uniform 	float _ReflectionIntensity;
uniform 	float _WaterFall01_Speed;
uniform 	float _Waterfall02_Speed;
uniform 	mediump vec4 _WaterfallPatternColor;
uniform 	float _Waterfall01Brightness;
uniform 	float _Waterfall02Brightness;
uniform 	float _SprayRange;
uniform 	float _SprayOffset;
uniform 	float _ShadowStrength;
uniform 	vec4 _WaterfallSpecTex_ST;
uniform 	float _Detail01_U_Speed;
uniform 	vec4 _NoiseTex_ST;
uniform 	float _Detail01_V_Speed;
uniform 	float _NoiselDistortionValue;
uniform 	mediump vec4 _WaterfallSpecColor;
uniform 	mediump vec4 _FoamColor;
uniform 	vec3 _ES_MainLightColor;
uniform lowp sampler2D _WaterfallTex01;
uniform lowp sampler2D _Normal01;
uniform lowp sampler2D _Normal02;
uniform lowp samplerCube _Reflection;
uniform lowp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _WaterfallSpecTex;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
in highp vec4 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
lowp vec3 u_xlat10_0;
vec4 u_xlat1;
mediump float u_xlat16_1;
lowp float u_xlat10_1;
bool u_xlatb1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
bool u_xlatb3;
vec3 u_xlat4;
vec3 u_xlat5;
vec3 u_xlat6;
bool u_xlatb6;
vec3 u_xlat7;
mediump float u_xlat16_8;
vec3 u_xlat9;
vec2 u_xlat13;
lowp float u_xlat10_13;
float u_xlat18;
mediump float u_xlat16_18;
lowp float u_xlat10_18;
float u_xlat19;
bool u_xlatb19;
void main()
{
    u_xlat0.xy = vs_TEXCOORD4.xy * _Normal01_ST.xy + _Normal01_ST.zw;
    u_xlat0.x = u_xlat0.x * vs_TEXCOORD4.z;
    u_xlat1.x = _Time.y * _Normal01_U_Speed + u_xlat0.x;
    u_xlat0.x = _Time.y * _Normal01_VSpeed;
    u_xlat1.y = u_xlat0.y * vs_TEXCOORD4.w + u_xlat0.x;
    u_xlat10_0.xyz = texture(_Normal01, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xy = vs_TEXCOORD4.xy * _Normal02_ST.xy + _Normal02_ST.zw;
    u_xlat0.xy = vec2(u_xlat0.x * vs_TEXCOORD4.z, u_xlat0.y * vs_TEXCOORD4.w);
    u_xlat1.x = _Time.y * _Normal02_U_Speed + u_xlat0.x;
    u_xlat1.y = _Time.y * _Normal02_V_Speed + u_xlat0.y;
    u_xlat10_0.xyz = texture(_Normal02, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_2.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = u_xlat16_2.xyz * _DistortionIntensity.xyz;
    u_xlat1.x = vs_TEXCOORD6.x;
    u_xlat1.y = vs_TEXCOORD8.x;
    u_xlat1.z = vs_TEXCOORD7.x;
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat3.x = vs_TEXCOORD6.y;
    u_xlat3.y = vs_TEXCOORD8.y;
    u_xlat3.z = vs_TEXCOORD7.y;
    u_xlat1.y = dot(u_xlat3.xyz, u_xlat0.xyz);
    u_xlat3.x = vs_TEXCOORD6.z;
    u_xlat3.y = vs_TEXCOORD8.z;
    u_xlat3.z = vs_TEXCOORD7.z;
    u_xlat1.z = dot(u_xlat3.xyz, u_xlat0.xyz);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
    u_xlat18 = dot((-u_xlat1.xyz), u_xlat0.xyz);
    u_xlat18 = u_xlat18 + u_xlat18;
    u_xlat0.xyz = u_xlat0.xyz * (-vec3(u_xlat18)) + (-u_xlat1.xyz);
    u_xlat10_0.x = texture(_Reflection, u_xlat0.xyz).x;
    u_xlat6.xyz = (-_ReflectionColor_Dark.xyz) + _ReflectionColor_Light.xyz;
    u_xlat0.xyz = u_xlat10_0.xxx * u_xlat6.xyz + _ReflectionColor_Dark.xyz;
    u_xlat18 = vs_TEXCOORD4.y * _ColorGradientRange + _ColorGradientOffset;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat1.xyz = (-_BottomColor.xyz) + _TopColor.xyz;
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz + _BottomColor.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.200000003, 0.200000003, 0.200000003);
    u_xlat0.xyz = u_xlat0.xyz * vec3(_ReflectionBrightness) + (-u_xlat1.xyz);
    u_xlat0.xyz = vec3(vec3(_ReflectionIntensity, _ReflectionIntensity, _ReflectionIntensity)) * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat1.xy = vs_TEXCOORD4.xy * _WaterfallTex01_ST.xy + _WaterfallTex01_ST.zw;
    u_xlat1.xy = vec2(u_xlat1.x * vs_TEXCOORD4.z, u_xlat1.y * vs_TEXCOORD4.w);
    u_xlat1.zw = _Time.yy * vec2(_WaterFall01_Speed, _Waterfall02_Speed) + u_xlat1.yy;
    u_xlat10_18 = texture(_WaterfallTex01, u_xlat1.xz).x;
    u_xlat10_13 = texture(_WaterfallTex01, u_xlat1.xw).y;
    u_xlat16_2.x = (-u_xlat10_18) + u_xlat10_13;
    u_xlat16_2.x = u_xlat10_13 * u_xlat16_2.x + u_xlat10_18;
    u_xlat18 = u_xlat10_18 * _Waterfall01Brightness;
    u_xlat3.xyz = u_xlat16_2.xxx * _WaterfallPatternColor.xyz + (-u_xlat0.xyz);
    u_xlat19 = u_xlat10_13 * _Waterfall02Brightness + (-u_xlat18);
    u_xlat13.x = u_xlat10_13 * _Waterfall02Brightness;
    u_xlat18 = u_xlat13.x * u_xlat19 + u_xlat18;
    u_xlat13.x = vs_TEXCOORD4.y * _SprayRange + _SprayOffset;
    u_xlat13.x = (-u_xlat13.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat13.x = min(max(u_xlat13.x, 0.0), 1.0);
#else
    u_xlat13.x = clamp(u_xlat13.x, 0.0, 1.0);
#endif
    u_xlat18 = u_xlat18 * u_xlat13.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * _DayColor.xyz;
    u_xlat13.xy = vs_TEXCOORD4.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat3.x = _Time.y * _Detail01_U_Speed + u_xlat13.x;
    u_xlat3.y = _Time.y * _Detail01_V_Speed + u_xlat13.y;
    u_xlat10_18 = texture(_NoiseTex, u_xlat3.xy).x;
    u_xlat16_2.x = vs_TEXCOORD4.w * 0.5;
    u_xlat13.xy = vs_TEXCOORD4.xy * _WaterfallSpecTex_ST.xy + _WaterfallSpecTex_ST.zw;
    u_xlat16_2.x = vs_TEXCOORD4.w * u_xlat13.y + (-u_xlat16_2.x);
    u_xlat3.x = u_xlat10_18 * _NoiselDistortionValue + u_xlat13.x;
    u_xlat3.y = u_xlat10_18 * _NoiselDistortionValue + u_xlat16_2.x;
    u_xlat10_18 = texture(_WaterfallSpecTex, u_xlat3.xy).x;
    u_xlat16_3.xyz = vec3(u_xlat10_18) * _WaterfallSpecColor.xyz;
    u_xlat13.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat10_18 = texture(_ShadowMapTexture, u_xlat13.xy).x;
    u_xlat13.x = (-_ShadowStrength) + 1.0;
    u_xlat18 = u_xlat10_18 * u_xlat13.x + _ShadowStrength;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat16_3.xyz;
    u_xlat13.xy = vec2(_Time.y * _FoamUVCoord01.z, _Time.y * _FoamUVCoord01.w);
    u_xlat13.xy = u_xlat1.xy * _FoamUVCoord01.xy + u_xlat13.xy;
    u_xlat10_18 = texture(_WaterfallTex01, u_xlat13.xy).x;
    u_xlat13.xy = vec2(_Time.y * _FoamUVCoord02.z, _Time.y * _FoamUVCoord02.w);
    u_xlat1.xy = u_xlat1.xy * _FoamUVCoord02.xy + u_xlat13.xy;
    u_xlat10_1 = texture(_WaterfallTex01, u_xlat1.xy).y;
    u_xlat16_18 = u_xlat10_18 + u_xlat10_1;
    u_xlat1.x = vs_TEXCOORD4.y * _FoamRange + _FoamOffset;
    u_xlat18 = u_xlat16_18 + u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat1.x = (-u_xlat1.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat18 * u_xlat1.x;
    u_xlat0.xyz = u_xlat1.xxx * _FoamColor.xyz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * _ES_MainLightColor.xyz;
    u_xlat16_1 = max(_LightColor0.w, 1.0);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16_1);
    u_xlat1.xyz = vs_TEXCOORD5.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat19 = u_xlat1.y * _HeigtFogParams.x;
    u_xlat3.x = u_xlat19 * -1.44269502;
    u_xlat3.x = exp2(u_xlat3.x);
    u_xlat3.x = (-u_xlat3.x) + 1.0;
    u_xlat3.x = u_xlat3.x / u_xlat19;
#ifdef UNITY_ADRENO_ES3
    u_xlatb19 = !!(0.00999999978<abs(u_xlat19));
#else
    u_xlatb19 = 0.00999999978<abs(u_xlat19);
#endif
    u_xlat16_2.x = (u_xlatb19) ? u_xlat3.x : 1.0;
    u_xlat19 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat19 = sqrt(u_xlat19);
    u_xlat3.x = u_xlat19 * _HeigtFogParams.y;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat3.x;
    u_xlat16_2.x = exp2((-u_xlat16_2.x));
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat3.x = u_xlat1.y * _HeigtFogParams2.x;
    u_xlat9.x = u_xlat3.x * -1.44269502;
    u_xlat9.x = exp2(u_xlat9.x);
    u_xlat9.x = (-u_xlat9.x) + 1.0;
    u_xlat9.x = u_xlat9.x / u_xlat3.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(0.00999999978<abs(u_xlat3.x));
#else
    u_xlatb3 = 0.00999999978<abs(u_xlat3.x);
#endif
    u_xlat16_8 = (u_xlatb3) ? u_xlat9.x : 1.0;
    u_xlat3.x = u_xlat19 * _HeigtFogParams2.y;
    u_xlat16_8 = u_xlat16_8 * u_xlat3.x;
    u_xlat16_8 = exp2((-u_xlat16_8));
    u_xlat16_2.y = (-u_xlat16_8) + 1.0;
    u_xlat16_2.xy = max(u_xlat16_2.xy, vec2(0.0, 0.0));
    u_xlat16_2.x = u_xlat16_2.y + u_xlat16_2.x;
    u_xlat3.x = u_xlat19 * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat3.x = min(max(u_xlat3.x, 0.0), 1.0);
#else
    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
#endif
    u_xlat16_8 = (-u_xlat3.x) + 2.0;
    u_xlat16_8 = u_xlat16_8 * u_xlat3.x;
    u_xlat3.x = u_xlat16_8 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat3.x = u_xlat3.x + 1.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat3.x;
    u_xlat3.x = min(u_xlat16_2.x, _HeigtFogColBase.w);
    u_xlat9.x = (-u_xlat3.x) + 1.0;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat4.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat4.xyz);
    u_xlat7.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!((-u_xlat1.x)>=u_xlat7.x);
#else
    u_xlatb1 = (-u_xlat1.x)>=u_xlat7.x;
#endif
    u_xlat7.x = u_xlat19 * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat13.x = u_xlat19 + (-_HeigtFogRamp.w);
    u_xlat13.x = u_xlat13.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat13.x = min(max(u_xlat13.x, 0.0), 1.0);
#else
    u_xlat13.x = clamp(u_xlat13.x, 0.0, 1.0);
#endif
    u_xlat19 = (-u_xlat7.x) + 2.0;
    u_xlat7.x = u_xlat19 * u_xlat7.x;
    u_xlat19 = u_xlat7.x * _HeigtFogColDelta.w;
    u_xlat1.x = (u_xlatb1) ? u_xlat19 : u_xlat7.x;
    u_xlat1.x = log2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * unity_FogColor.w;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat1.x = min(u_xlat1.x, _HeigtFogColBase.w);
    u_xlat7.x = vs_TEXCOORD5.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat16_2.x = (-u_xlat7.x) + 2.0;
    u_xlat16_2.x = u_xlat7.x * u_xlat16_2.x;
    u_xlat4.xyz = u_xlat16_2.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat5.xyz = (-u_xlat4.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat7.xyz = u_xlat13.xxx * u_xlat5.xyz + u_xlat4.xyz;
    u_xlat1.yzw = u_xlat1.xxx * u_xlat7.xyz;
    u_xlat1.x = (-u_xlat1.x) + 1.0;
    u_xlat1 = u_xlat9.xxxx * u_xlat1;
    u_xlat9.x = vs_TEXCOORD5.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat9.x = min(max(u_xlat9.x, 0.0), 1.0);
#else
    u_xlat9.x = clamp(u_xlat9.x, 0.0, 1.0);
#endif
    u_xlat9.xyz = u_xlat9.xxx * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    u_xlat7.xyz = u_xlat9.xyz * u_xlat3.xxx + u_xlat1.yzw;
    u_xlat1.xyz = u_xlat1.xxx * u_xlat0.xyz + u_xlat7.xyz;
    u_xlat0.x = vs_TEXCOORD4.y * _AlphaBottomRange + _AlphaBottomOffset;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(_BottomAlphaToggle==1.0);
#else
    u_xlatb6 = _BottomAlphaToggle==1.0;
#endif
    u_xlat0.x = (u_xlatb6) ? u_xlat0.x : 1.0;
    u_xlat6.x = vs_TEXCOORD4.y * _AlphaRange + _AlphaOffset;
    u_xlat6.x = (-u_xlat6.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat6.x = u_xlat6.x * _Opacity;
    u_xlat0.x = u_xlat0.x * u_xlat6.x;
    u_xlat1.w = u_xlat18 * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" "MSAA_INTERPOLATION" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	mediump float _MHYZBias;
uniform 	vec4 hlslcc_mtx4x4_mhyJitteredVP[4];
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
vec3 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
bool u_xlatb3;
mediump vec3 u_xlat16_4;
float u_xlat5;
mediump vec4 u_xlat16_5;
vec3 u_xlat6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
float u_xlat11;
mediump float u_xlat16_12;
vec3 u_xlat13;
float u_xlat17;
bool u_xlatb17;
float u_xlat19;
float u_xlat24;
float u_xlat27;
bool u_xlatb27;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat8.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    u_xlat1.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position = u_xlat1;
    vs_TEXCOORD2.zw = u_xlat1.zw;
    vs_COLOR0 = in_COLOR0;
    u_xlat3.xyz = u_xlat8.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat17 = u_xlat3.y * _HeigtFogParams.x;
    u_xlat27 = u_xlat17 * -1.44269502;
    u_xlat27 = exp2(u_xlat27);
    u_xlat27 = (-u_xlat27) + 1.0;
    u_xlat27 = u_xlat27 / u_xlat17;
#ifdef UNITY_ADRENO_ES3
    u_xlatb17 = !!(0.00999999978<abs(u_xlat17));
#else
    u_xlatb17 = 0.00999999978<abs(u_xlat17);
#endif
    u_xlat16_4.x = (u_xlatb17) ? u_xlat27 : 1.0;
    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat17 = sqrt(u_xlat17);
    u_xlat27 = u_xlat17 * _HeigtFogParams.y;
    u_xlat16_4.x = u_xlat27 * u_xlat16_4.x;
    u_xlat16_4.x = exp2((-u_xlat16_4.x));
    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
    u_xlat27 = u_xlat3.y * _HeigtFogParams2.x;
    u_xlat5 = u_xlat27 * -1.44269502;
    u_xlat5 = exp2(u_xlat5);
    u_xlat5 = (-u_xlat5) + 1.0;
    u_xlat5 = u_xlat5 / u_xlat27;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(0.00999999978<abs(u_xlat27));
#else
    u_xlatb27 = 0.00999999978<abs(u_xlat27);
#endif
    u_xlat16_12 = (u_xlatb27) ? u_xlat5 : 1.0;
    u_xlat27 = u_xlat17 * _HeigtFogParams2.y;
    u_xlat16_12 = u_xlat27 * u_xlat16_12;
    u_xlat16_12 = exp2((-u_xlat16_12));
    u_xlat16_4.y = (-u_xlat16_12) + 1.0;
    u_xlat16_4.xy = max(u_xlat16_4.xy, vec2(0.0, 0.0));
    u_xlat16_4.x = u_xlat16_4.y + u_xlat16_4.x;
    u_xlat27 = u_xlat17 * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
    u_xlat16_12 = (-u_xlat27) + 2.0;
    u_xlat16_12 = u_xlat27 * u_xlat16_12;
    u_xlat27 = u_xlat16_12 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat27 = u_xlat27 + 1.0;
    u_xlat16_4.x = u_xlat27 * u_xlat16_4.x;
    u_xlat27 = min(u_xlat16_4.x, _HeigtFogColBase.w);
    u_xlat5 = (-u_xlat27) + 1.0;
    u_xlat13.x = _ProjectionParams.z * 0.999899983;
    u_xlat6.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat6.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat6.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat3.x = dot(u_xlat3.xyz, u_xlat6.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!((-u_xlat3.x)>=u_xlat13.x);
#else
    u_xlatb3 = (-u_xlat3.x)>=u_xlat13.x;
#endif
    u_xlat11 = u_xlat17 * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat11 = min(max(u_xlat11, 0.0), 1.0);
#else
    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
#endif
    u_xlat17 = u_xlat17 + (-_HeigtFogRamp.w);
    u_xlat17 = u_xlat17 * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat17 = min(max(u_xlat17, 0.0), 1.0);
#else
    u_xlat17 = clamp(u_xlat17, 0.0, 1.0);
#endif
    u_xlat19 = (-u_xlat11) + 2.0;
    u_xlat11 = u_xlat19 * u_xlat11;
    u_xlat19 = u_xlat11 * _HeigtFogColDelta.w;
    u_xlat3.x = (u_xlatb3) ? u_xlat19 : u_xlat11;
    u_xlat3.x = log2(u_xlat3.x);
    u_xlat3.x = u_xlat3.x * unity_FogColor.w;
    u_xlat3.x = exp2(u_xlat3.x);
    u_xlat3.x = min(u_xlat3.x, _HeigtFogColBase.w);
    u_xlat11 = u_xlat8.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat11 = min(max(u_xlat11, 0.0), 1.0);
#else
    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
#endif
    u_xlat16_4.x = (-u_xlat11) + 2.0;
    u_xlat16_4.x = u_xlat11 * u_xlat16_4.x;
    u_xlat13.xyz = u_xlat16_4.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat6.xyz = (-u_xlat13.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat13.xyz = vec3(u_xlat17) * u_xlat6.xyz + u_xlat13.xyz;
    u_xlat13.xyz = u_xlat3.xxx * u_xlat13.xyz;
    u_xlat17 = (-u_xlat3.x) + 1.0;
    vs_TEXCOORD0.w = u_xlat5 * u_xlat17;
    u_xlat3.xyz = vec3(u_xlat5) * u_xlat13.xyz;
    u_xlat17 = u_xlat8.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat17 = min(max(u_xlat17, 0.0), 1.0);
#else
    u_xlat17 = clamp(u_xlat17, 0.0, 1.0);
#endif
    vs_TEXCOORD5.xyz = u_xlat8.xyz;
    u_xlat8.xyz = vec3(u_xlat17) * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    vs_TEXCOORD0.xyz = u_xlat8.xyz * vec3(u_xlat27) + u_xlat3.xyz;
    u_xlat3.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat3.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat3.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat8.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat3.xyz = u_xlat8.xxx * u_xlat3.xyz;
    u_xlat16_4.x = u_xlat3.y * u_xlat3.y;
    u_xlat16_4.x = u_xlat3.x * u_xlat3.x + (-u_xlat16_4.x);
    u_xlat16_5 = u_xlat3.yzzx * u_xlat3.xyzz;
    u_xlat16_7.x = dot(unity_SHBr, u_xlat16_5);
    u_xlat16_7.y = dot(unity_SHBg, u_xlat16_5);
    u_xlat16_7.z = dot(unity_SHBb, u_xlat16_5);
    u_xlat16_4.xyz = unity_SHC.xyz * u_xlat16_4.xxx + u_xlat16_7.xyz;
    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat3.w = 1.0;
    u_xlat16_7.x = dot(unity_SHAr, u_xlat3);
    u_xlat16_7.y = dot(unity_SHAg, u_xlat3);
    u_xlat16_7.z = dot(unity_SHAb, u_xlat3);
    u_xlat16_4.xyz = u_xlat16_4.xyz + u_xlat16_7.xyz;
    vs_TEXCOORD1.xyz = u_xlat16_4.xyz;
    vs_TEXCOORD1.w = 1.0;
    u_xlat6.x = float(0.5);
    u_xlat6.z = float(0.5);
    u_xlat6.y = _ProjectionParams.x;
    u_xlat1.xyz = u_xlat1.xyw * u_xlat6.xyz;
    u_xlat1.w = u_xlat1.y * 0.5;
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4_mhyJitteredVP[1];
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[3] * u_xlat2.wwww + u_xlat1;
    u_xlat2.xyz = vec3(u_xlat6.z * u_xlat1.x, u_xlat6.y * u_xlat1.y, u_xlat6.z * u_xlat1.w);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    u_xlat2.w = u_xlat2.y * 0.5;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy;
    u_xlat8.x = dot(unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz);
    vs_TEXCOORD4.z = sqrt(u_xlat8.x);
    u_xlat8.x = dot(unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz);
    vs_TEXCOORD4.w = sqrt(u_xlat8.x);
    vs_TEXCOORD5.w = 0.0;
    u_xlat8.xyz = in_TANGENT0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat8.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_TANGENT0.xxx + u_xlat8.xyz;
    u_xlat0.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_TANGENT0.zzz + u_xlat8.xyz;
    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat0.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    vs_TEXCOORD6.xyz = u_xlat0.xyz;
    vs_TEXCOORD6.w = 0.0;
    vs_TEXCOORD7.xyz = u_xlat3.xyz;
    vs_TEXCOORD7.w = 0.0;
    u_xlat1.xyz = u_xlat0.yzx * u_xlat3.zxy;
    u_xlat0.xyz = u_xlat3.yzx * u_xlat0.zxy + (-u_xlat1.xyz);
    u_xlat24 = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD8.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    vs_TEXCOORD8.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	mediump vec4 _LightColor0;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	float _AlphaRange;
uniform 	float _AlphaOffset;
uniform 	float _Opacity;
uniform 	mediump float _BottomAlphaToggle;
uniform 	float _AlphaBottomRange;
uniform 	float _AlphaBottomOffset;
uniform 	vec4 _WaterfallTex01_ST;
uniform 	mediump vec4 _FoamUVCoord01;
uniform 	mediump vec4 _FoamUVCoord02;
uniform 	float _FoamRange;
uniform 	float _FoamOffset;
uniform 	vec4 _DayColor;
uniform 	vec4 _BottomColor;
uniform 	vec4 _TopColor;
uniform 	float _ColorGradientRange;
uniform 	float _ColorGradientOffset;
uniform 	vec4 _ReflectionColor_Dark;
uniform 	vec4 _ReflectionColor_Light;
uniform 	float _Normal01_U_Speed;
uniform 	vec4 _Normal01_ST;
uniform 	float _Normal01_VSpeed;
uniform 	float _Normal02_U_Speed;
uniform 	vec4 _Normal02_ST;
uniform 	float _Normal02_V_Speed;
uniform 	vec4 _DistortionIntensity;
uniform 	float _ReflectionBrightness;
uniform 	float _ReflectionIntensity;
uniform 	float _WaterFall01_Speed;
uniform 	float _Waterfall02_Speed;
uniform 	mediump vec4 _WaterfallPatternColor;
uniform 	float _Waterfall01Brightness;
uniform 	float _Waterfall02Brightness;
uniform 	float _SprayRange;
uniform 	float _SprayOffset;
uniform 	float _ShadowStrength;
uniform 	vec4 _WaterfallSpecTex_ST;
uniform 	float _Detail01_U_Speed;
uniform 	vec4 _NoiseTex_ST;
uniform 	float _Detail01_V_Speed;
uniform 	float _NoiselDistortionValue;
uniform 	mediump vec4 _WaterfallSpecColor;
uniform 	mediump vec4 _FoamColor;
uniform 	vec3 _ES_MainLightColor;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _WaterfallTex01;
uniform lowp sampler2D _Normal01;
uniform lowp sampler2D _Normal02;
uniform lowp samplerCube _Reflection;
uniform lowp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _WaterfallSpecTex;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
in highp vec4 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
lowp vec3 u_xlat10_0;
vec4 u_xlat1;
mediump float u_xlat16_1;
lowp float u_xlat10_1;
bool u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
bool u_xlatb3;
vec3 u_xlat4;
vec3 u_xlat5;
vec3 u_xlat6;
float u_xlat7;
mediump float u_xlat16_8;
float u_xlat9;
bool u_xlatb9;
float u_xlat12;
bool u_xlatb12;
vec2 u_xlat13;
lowp float u_xlat10_13;
float u_xlat15;
float u_xlat18;
mediump float u_xlat16_18;
lowp float u_xlat10_18;
float u_xlat19;
lowp float u_xlat10_21;
void main()
{
    u_xlat0.xy = vs_TEXCOORD4.xy * _Normal01_ST.xy + _Normal01_ST.zw;
    u_xlat0.x = u_xlat0.x * vs_TEXCOORD4.z;
    u_xlat1.x = _Time.y * _Normal01_U_Speed + u_xlat0.x;
    u_xlat0.x = _Time.y * _Normal01_VSpeed;
    u_xlat1.y = u_xlat0.y * vs_TEXCOORD4.w + u_xlat0.x;
    u_xlat10_0.xyz = texture(_Normal01, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xy = vs_TEXCOORD4.xy * _Normal02_ST.xy + _Normal02_ST.zw;
    u_xlat0.xy = vec2(u_xlat0.x * vs_TEXCOORD4.z, u_xlat0.y * vs_TEXCOORD4.w);
    u_xlat1.x = _Time.y * _Normal02_U_Speed + u_xlat0.x;
    u_xlat1.y = _Time.y * _Normal02_V_Speed + u_xlat0.y;
    u_xlat10_0.xyz = texture(_Normal02, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_2.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = u_xlat16_2.xyz * _DistortionIntensity.xyz;
    u_xlat1.x = vs_TEXCOORD6.x;
    u_xlat1.y = vs_TEXCOORD8.x;
    u_xlat1.z = vs_TEXCOORD7.x;
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat3.x = vs_TEXCOORD6.y;
    u_xlat3.y = vs_TEXCOORD8.y;
    u_xlat3.z = vs_TEXCOORD7.y;
    u_xlat1.y = dot(u_xlat3.xyz, u_xlat0.xyz);
    u_xlat3.x = vs_TEXCOORD6.z;
    u_xlat3.y = vs_TEXCOORD8.z;
    u_xlat3.z = vs_TEXCOORD7.z;
    u_xlat1.z = dot(u_xlat3.xyz, u_xlat0.xyz);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
    u_xlat18 = dot((-u_xlat1.xyz), u_xlat0.xyz);
    u_xlat18 = u_xlat18 + u_xlat18;
    u_xlat0.xyz = u_xlat0.xyz * (-vec3(u_xlat18)) + (-u_xlat1.xyz);
    u_xlat10_0.x = texture(_Reflection, u_xlat0.xyz).x;
    u_xlat6.xyz = (-_ReflectionColor_Dark.xyz) + _ReflectionColor_Light.xyz;
    u_xlat0.xyz = u_xlat10_0.xxx * u_xlat6.xyz + _ReflectionColor_Dark.xyz;
    u_xlat18 = vs_TEXCOORD4.y * _ColorGradientRange + _ColorGradientOffset;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat1.xyz = (-_BottomColor.xyz) + _TopColor.xyz;
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz + _BottomColor.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.200000003, 0.200000003, 0.200000003);
    u_xlat0.xyz = u_xlat0.xyz * vec3(_ReflectionBrightness) + (-u_xlat1.xyz);
    u_xlat0.xyz = vec3(vec3(_ReflectionIntensity, _ReflectionIntensity, _ReflectionIntensity)) * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat1.xy = vs_TEXCOORD4.xy * _WaterfallTex01_ST.xy + _WaterfallTex01_ST.zw;
    u_xlat1.xy = vec2(u_xlat1.x * vs_TEXCOORD4.z, u_xlat1.y * vs_TEXCOORD4.w);
    u_xlat1.zw = _Time.yy * vec2(_WaterFall01_Speed, _Waterfall02_Speed) + u_xlat1.yy;
    u_xlat10_18 = texture(_WaterfallTex01, u_xlat1.xz).x;
    u_xlat10_13 = texture(_WaterfallTex01, u_xlat1.xw).y;
    u_xlat16_2.x = (-u_xlat10_18) + u_xlat10_13;
    u_xlat16_2.x = u_xlat10_13 * u_xlat16_2.x + u_xlat10_18;
    u_xlat18 = u_xlat10_18 * _Waterfall01Brightness;
    u_xlat3.xyz = u_xlat16_2.xxx * _WaterfallPatternColor.xyz + (-u_xlat0.xyz);
    u_xlat19 = u_xlat10_13 * _Waterfall02Brightness + (-u_xlat18);
    u_xlat13.x = u_xlat10_13 * _Waterfall02Brightness;
    u_xlat18 = u_xlat13.x * u_xlat19 + u_xlat18;
    u_xlat13.x = vs_TEXCOORD4.y * _SprayRange + _SprayOffset;
    u_xlat13.x = (-u_xlat13.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat13.x = min(max(u_xlat13.x, 0.0), 1.0);
#else
    u_xlat13.x = clamp(u_xlat13.x, 0.0, 1.0);
#endif
    u_xlat18 = u_xlat18 * u_xlat13.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * _DayColor.xyz;
    u_xlat13.xy = vs_TEXCOORD4.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat3.x = _Time.y * _Detail01_U_Speed + u_xlat13.x;
    u_xlat3.y = _Time.y * _Detail01_V_Speed + u_xlat13.y;
    u_xlat10_18 = texture(_NoiseTex, u_xlat3.xy).x;
    u_xlat16_2.x = vs_TEXCOORD4.w * 0.5;
    u_xlat13.xy = vs_TEXCOORD4.xy * _WaterfallSpecTex_ST.xy + _WaterfallSpecTex_ST.zw;
    u_xlat16_2.x = vs_TEXCOORD4.w * u_xlat13.y + (-u_xlat16_2.x);
    u_xlat3.x = u_xlat10_18 * _NoiselDistortionValue + u_xlat13.x;
    u_xlat3.y = u_xlat10_18 * _NoiselDistortionValue + u_xlat16_2.x;
    u_xlat10_18 = texture(_WaterfallSpecTex, u_xlat3.xy).x;
    u_xlat16_3.xyz = vec3(u_xlat10_18) * _WaterfallSpecColor.xyz;
    u_xlat18 = (-_ShadowStrength) + 1.0;
    u_xlat13.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat10_21 = texture(_ShadowMapTexture, u_xlat13.xy).x;
    u_xlat13.x = texture(_CameraDepthTexture, u_xlat13.xy).x;
    u_xlat13.x = _ZBufferParams.z * u_xlat13.x + _ZBufferParams.w;
    u_xlat13.x = float(1.0) / u_xlat13.x;
    u_xlat13.x = u_xlat13.x + (-vs_TEXCOORD3.w);
    u_xlat18 = u_xlat10_21 * u_xlat18 + _ShadowStrength;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat16_3.xyz;
    u_xlat3.xy = vec2(_Time.y * _FoamUVCoord01.z, _Time.y * _FoamUVCoord01.w);
    u_xlat3.xy = u_xlat1.xy * _FoamUVCoord01.xy + u_xlat3.xy;
    u_xlat10_18 = texture(_WaterfallTex01, u_xlat3.xy).x;
    u_xlat3.xy = vec2(_Time.y * _FoamUVCoord02.z, _Time.y * _FoamUVCoord02.w);
    u_xlat1.xy = u_xlat1.xy * _FoamUVCoord02.xy + u_xlat3.xy;
    u_xlat10_1 = texture(_WaterfallTex01, u_xlat1.xy).y;
    u_xlat16_18 = u_xlat10_18 + u_xlat10_1;
    u_xlat1.x = vs_TEXCOORD4.y * _FoamRange + _FoamOffset;
    u_xlat18 = u_xlat16_18 + u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat1.x = (-u_xlat1.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat18 * u_xlat1.x;
    u_xlat0.xyz = u_xlat1.xxx * _FoamColor.xyz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * _ES_MainLightColor.xyz;
    u_xlat16_1 = max(_LightColor0.w, 1.0);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16_1);
    u_xlat1.xyw = vs_TEXCOORD5.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat3.x = u_xlat1.y * _HeigtFogParams.x;
    u_xlat9 = u_xlat3.x * -1.44269502;
    u_xlat9 = exp2(u_xlat9);
    u_xlat9 = (-u_xlat9) + 1.0;
    u_xlat9 = u_xlat9 / u_xlat3.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(0.00999999978<abs(u_xlat3.x));
#else
    u_xlatb3 = 0.00999999978<abs(u_xlat3.x);
#endif
    u_xlat16_2.x = (u_xlatb3) ? u_xlat9 : 1.0;
    u_xlat3.x = dot(u_xlat1.xyw, u_xlat1.xyw);
    u_xlat3.x = sqrt(u_xlat3.x);
    u_xlat9 = u_xlat3.x * _HeigtFogParams.y;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat9;
    u_xlat16_2.x = exp2((-u_xlat16_2.x));
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat9 = u_xlat1.y * _HeigtFogParams2.x;
    u_xlat15 = u_xlat9 * -1.44269502;
    u_xlat15 = exp2(u_xlat15);
    u_xlat15 = (-u_xlat15) + 1.0;
    u_xlat15 = u_xlat15 / u_xlat9;
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(0.00999999978<abs(u_xlat9));
#else
    u_xlatb9 = 0.00999999978<abs(u_xlat9);
#endif
    u_xlat16_8 = (u_xlatb9) ? u_xlat15 : 1.0;
    u_xlat9 = u_xlat3.x * _HeigtFogParams2.y;
    u_xlat16_8 = u_xlat16_8 * u_xlat9;
    u_xlat16_8 = exp2((-u_xlat16_8));
    u_xlat16_2.y = (-u_xlat16_8) + 1.0;
    u_xlat16_2.xy = max(u_xlat16_2.xy, vec2(0.0, 0.0));
    u_xlat16_2.x = u_xlat16_2.y + u_xlat16_2.x;
    u_xlat9 = u_xlat3.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat9 = min(max(u_xlat9, 0.0), 1.0);
#else
    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
#endif
    u_xlat16_8 = (-u_xlat9) + 2.0;
    u_xlat16_8 = u_xlat16_8 * u_xlat9;
    u_xlat9 = u_xlat16_8 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat9 = u_xlat9 + 1.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat9;
    u_xlat9 = min(u_xlat16_2.x, _HeigtFogColBase.w);
    u_xlat15 = (-u_xlat9) + 1.0;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat4.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat1.x = dot(u_xlat1.xyw, u_xlat4.xyz);
    u_xlat7 = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!((-u_xlat1.x)>=u_xlat7);
#else
    u_xlatb1 = (-u_xlat1.x)>=u_xlat7;
#endif
    u_xlat7 = u_xlat3.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7 = min(max(u_xlat7, 0.0), 1.0);
#else
    u_xlat7 = clamp(u_xlat7, 0.0, 1.0);
#endif
    u_xlat19 = u_xlat3.x + (-_HeigtFogRamp.w);
    u_xlat19 = u_xlat19 * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat19 = min(max(u_xlat19, 0.0), 1.0);
#else
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
#endif
    u_xlat3.x = (-u_xlat7) + 2.0;
    u_xlat7 = u_xlat7 * u_xlat3.x;
    u_xlat3.x = u_xlat7 * _HeigtFogColDelta.w;
    u_xlat1.x = (u_xlatb1) ? u_xlat3.x : u_xlat7;
    u_xlat1.x = log2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * unity_FogColor.w;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat1.x = min(u_xlat1.x, _HeigtFogColBase.w);
    u_xlat7 = vs_TEXCOORD5.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat7 = min(max(u_xlat7, 0.0), 1.0);
#else
    u_xlat7 = clamp(u_xlat7, 0.0, 1.0);
#endif
    u_xlat16_2.x = (-u_xlat7) + 2.0;
    u_xlat16_2.x = u_xlat7 * u_xlat16_2.x;
    u_xlat4.xyz = u_xlat16_2.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat5.xyz = (-u_xlat4.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat4.xyz = vec3(u_xlat19) * u_xlat5.xyz + u_xlat4.xyz;
    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
    u_xlat1.x = (-u_xlat1.x) + 1.0;
    u_xlat1.x = u_xlat15 * u_xlat1.x;
    u_xlat3.xzw = vec3(u_xlat15) * u_xlat4.xyz;
    u_xlat7 = vs_TEXCOORD5.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat7 = min(max(u_xlat7, 0.0), 1.0);
#else
    u_xlat7 = clamp(u_xlat7, 0.0, 1.0);
#endif
    u_xlat4.xyz = vec3(u_xlat7) * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    u_xlat3.xyz = u_xlat4.xyz * vec3(u_xlat9) + u_xlat3.xzw;
    u_xlat2.xyz = u_xlat1.xxx * u_xlat0.xyz + u_xlat3.xyz;
    u_xlat0.x = u_xlat13.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat6.x = u_xlat13.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat12 = (-u_xlat6.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat12 + u_xlat6.x;
    u_xlat6.x = vs_TEXCOORD4.y * _AlphaRange + _AlphaOffset;
    u_xlat6.x = (-u_xlat6.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat6.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _Opacity;
    u_xlat6.x = vs_TEXCOORD4.y * _AlphaBottomRange + _AlphaBottomOffset;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_BottomAlphaToggle==1.0);
#else
    u_xlatb12 = _BottomAlphaToggle==1.0;
#endif
    u_xlat6.x = (u_xlatb12) ? u_xlat6.x : 1.0;
    u_xlat0.x = u_xlat6.x * u_xlat0.x;
    u_xlat2.w = u_xlat18 * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.w = min(max(u_xlat2.w, 0.0), 1.0);
#else
    u_xlat2.w = clamp(u_xlat2.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat2;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "HALF_RESOLUTION_PARTICLE_ON" "MSAA_INTERPOLATION" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	mediump float _MHYZBias;
uniform 	vec4 hlslcc_mtx4x4_mhyJitteredVP[4];
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
mediump vec4 u_xlat16_3;
bool u_xlatb3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat6;
mediump vec3 u_xlat16_7;
float u_xlat11;
mediump float u_xlat16_12;
float u_xlat18;
bool u_xlatb18;
float u_xlat19;
float u_xlat24;
bool u_xlatb24;
float u_xlat27;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat2.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    gl_Position = u_xlat2;
    vs_TEXCOORD2.zw = u_xlat2.zw;
    vs_COLOR0 = in_COLOR0;
    u_xlat3.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat24 = u_xlat3.y * _HeigtFogParams.x;
    u_xlat18 = u_xlat24 * -1.44269502;
    u_xlat18 = exp2(u_xlat18);
    u_xlat18 = (-u_xlat18) + 1.0;
    u_xlat18 = u_xlat18 / u_xlat24;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(0.00999999978<abs(u_xlat24));
#else
    u_xlatb24 = 0.00999999978<abs(u_xlat24);
#endif
    u_xlat16_4.x = (u_xlatb24) ? u_xlat18 : 1.0;
    u_xlat24 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat24 = sqrt(u_xlat24);
    u_xlat18 = u_xlat24 * _HeigtFogParams.y;
    u_xlat16_4.x = u_xlat18 * u_xlat16_4.x;
    u_xlat16_4.x = exp2((-u_xlat16_4.x));
    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
    u_xlat18 = u_xlat3.y * _HeigtFogParams2.x;
    u_xlat27 = u_xlat18 * -1.44269502;
    u_xlat27 = exp2(u_xlat27);
    u_xlat27 = (-u_xlat27) + 1.0;
    u_xlat27 = u_xlat27 / u_xlat18;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(0.00999999978<abs(u_xlat18));
#else
    u_xlatb18 = 0.00999999978<abs(u_xlat18);
#endif
    u_xlat16_12 = (u_xlatb18) ? u_xlat27 : 1.0;
    u_xlat18 = u_xlat24 * _HeigtFogParams2.y;
    u_xlat16_12 = u_xlat18 * u_xlat16_12;
    u_xlat16_12 = exp2((-u_xlat16_12));
    u_xlat16_4.y = (-u_xlat16_12) + 1.0;
    u_xlat16_4.xy = max(u_xlat16_4.xy, vec2(0.0, 0.0));
    u_xlat16_4.x = u_xlat16_4.y + u_xlat16_4.x;
    u_xlat18 = u_xlat24 * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat16_12 = (-u_xlat18) + 2.0;
    u_xlat16_12 = u_xlat18 * u_xlat16_12;
    u_xlat18 = u_xlat16_12 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat18 = u_xlat18 + 1.0;
    u_xlat16_4.x = u_xlat18 * u_xlat16_4.x;
    u_xlat18 = min(u_xlat16_4.x, _HeigtFogColBase.w);
    u_xlat27 = (-u_xlat18) + 1.0;
    u_xlat5.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat5.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat5.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat3.x = dot(u_xlat3.xyz, u_xlat5.xyz);
    u_xlat11 = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!((-u_xlat3.x)>=u_xlat11);
#else
    u_xlatb3 = (-u_xlat3.x)>=u_xlat11;
#endif
    u_xlat11 = u_xlat24 * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat11 = min(max(u_xlat11, 0.0), 1.0);
#else
    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
#endif
    u_xlat24 = u_xlat24 + (-_HeigtFogRamp.w);
    u_xlat24 = u_xlat24 * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat19 = (-u_xlat11) + 2.0;
    u_xlat11 = u_xlat19 * u_xlat11;
    u_xlat19 = u_xlat11 * _HeigtFogColDelta.w;
    u_xlat3.x = (u_xlatb3) ? u_xlat19 : u_xlat11;
    u_xlat3.x = log2(u_xlat3.x);
    u_xlat3.x = u_xlat3.x * unity_FogColor.w;
    u_xlat3.x = exp2(u_xlat3.x);
    u_xlat3.x = min(u_xlat3.x, _HeigtFogColBase.w);
    u_xlat11 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat11 = min(max(u_xlat11, 0.0), 1.0);
#else
    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
#endif
    u_xlat16_4.x = (-u_xlat11) + 2.0;
    u_xlat16_4.x = u_xlat11 * u_xlat16_4.x;
    u_xlat5.xyz = u_xlat16_4.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat6.xyz = (-u_xlat5.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat5.xyz = vec3(u_xlat24) * u_xlat6.xyz + u_xlat5.xyz;
    u_xlat5.xyz = u_xlat3.xxx * u_xlat5.xyz;
    u_xlat24 = (-u_xlat3.x) + 1.0;
    vs_TEXCOORD0.w = u_xlat27 * u_xlat24;
    u_xlat3.xyz = vec3(u_xlat27) * u_xlat5.xyz;
    u_xlat24 = u_xlat0.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    u_xlat0.xyz = vec3(u_xlat24) * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    vs_TEXCOORD0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat3.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat0.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    u_xlat16_4.x = u_xlat0.y * u_xlat0.y;
    u_xlat16_4.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_4.x);
    u_xlat16_3 = u_xlat0.yzzx * u_xlat0.xyzz;
    u_xlat16_7.x = dot(unity_SHBr, u_xlat16_3);
    u_xlat16_7.y = dot(unity_SHBg, u_xlat16_3);
    u_xlat16_7.z = dot(unity_SHBb, u_xlat16_3);
    u_xlat16_4.xyz = unity_SHC.xyz * u_xlat16_4.xxx + u_xlat16_7.xyz;
    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat0.w = 1.0;
    u_xlat16_7.x = dot(unity_SHAr, u_xlat0);
    u_xlat16_7.y = dot(unity_SHAg, u_xlat0);
    u_xlat16_7.z = dot(unity_SHAb, u_xlat0);
    u_xlat16_4.xyz = u_xlat16_4.xyz + u_xlat16_7.xyz;
    vs_TEXCOORD1.xyz = u_xlat16_4.xyz;
    vs_TEXCOORD1.w = 1.0;
    u_xlat5.x = float(0.5);
    u_xlat5.z = float(0.5);
    u_xlat5.y = _ProjectionParams.x;
    u_xlat2.xyz = u_xlat2.xyw * u_xlat5.xyz;
    u_xlat2.w = u_xlat2.y * 0.5;
    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4_mhyJitteredVP[1];
    u_xlat2 = hlslcc_mtx4x4_mhyJitteredVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4_mhyJitteredVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat2.xyz = vec3(u_xlat5.z * u_xlat1.x, u_xlat5.y * u_xlat1.y, u_xlat5.z * u_xlat1.w);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    u_xlat2.w = u_xlat2.y * 0.5;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat24 = dot(hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, hlslcc_mtx4x4unity_ObjectToWorld[0].xyz);
    vs_TEXCOORD4.z = sqrt(u_xlat24);
    u_xlat24 = dot(hlslcc_mtx4x4unity_ObjectToWorld[1].xyz, hlslcc_mtx4x4unity_ObjectToWorld[1].xyz);
    vs_TEXCOORD4.w = sqrt(u_xlat24);
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD5.w = 0.0;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
    vs_TEXCOORD6.xyz = u_xlat1.xyz;
    vs_TEXCOORD6.w = 0.0;
    vs_TEXCOORD7.xyz = u_xlat0.xyz;
    vs_TEXCOORD7.w = 0.0;
    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
    u_xlat24 = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD8.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    vs_TEXCOORD8.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	mediump vec4 _LightColor0;
uniform 	float _AlphaRange;
uniform 	float _AlphaOffset;
uniform 	float _Opacity;
uniform 	mediump float _BottomAlphaToggle;
uniform 	float _AlphaBottomRange;
uniform 	float _AlphaBottomOffset;
uniform 	vec4 _WaterfallTex01_ST;
uniform 	mediump vec4 _FoamUVCoord01;
uniform 	mediump vec4 _FoamUVCoord02;
uniform 	float _FoamRange;
uniform 	float _FoamOffset;
uniform 	vec4 _DayColor;
uniform 	vec4 _BottomColor;
uniform 	vec4 _TopColor;
uniform 	float _ColorGradientRange;
uniform 	float _ColorGradientOffset;
uniform 	vec4 _ReflectionColor_Dark;
uniform 	vec4 _ReflectionColor_Light;
uniform 	float _Normal01_U_Speed;
uniform 	vec4 _Normal01_ST;
uniform 	float _Normal01_VSpeed;
uniform 	float _Normal02_U_Speed;
uniform 	vec4 _Normal02_ST;
uniform 	float _Normal02_V_Speed;
uniform 	vec4 _DistortionIntensity;
uniform 	float _ReflectionBrightness;
uniform 	float _ReflectionIntensity;
uniform 	float _WaterFall01_Speed;
uniform 	float _Waterfall02_Speed;
uniform 	mediump vec4 _WaterfallPatternColor;
uniform 	float _Waterfall01Brightness;
uniform 	float _Waterfall02Brightness;
uniform 	float _SprayRange;
uniform 	float _SprayOffset;
uniform 	float _ShadowStrength;
uniform 	vec4 _WaterfallSpecTex_ST;
uniform 	float _Detail01_U_Speed;
uniform 	vec4 _NoiseTex_ST;
uniform 	float _Detail01_V_Speed;
uniform 	float _NoiselDistortionValue;
uniform 	mediump vec4 _WaterfallSpecColor;
uniform 	mediump vec4 _FoamColor;
uniform 	vec3 _ES_MainLightColor;
uniform lowp sampler2D _WaterfallTex01;
uniform lowp sampler2D _Normal01;
uniform lowp sampler2D _Normal02;
uniform lowp samplerCube _Reflection;
uniform lowp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _WaterfallSpecTex;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
in highp vec4 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
lowp vec3 u_xlat10_0;
vec4 u_xlat1;
mediump float u_xlat16_1;
lowp float u_xlat10_1;
bool u_xlatb1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
bool u_xlatb3;
vec3 u_xlat4;
vec3 u_xlat5;
vec3 u_xlat6;
bool u_xlatb6;
vec3 u_xlat7;
mediump float u_xlat16_8;
vec3 u_xlat9;
vec2 u_xlat13;
lowp float u_xlat10_13;
float u_xlat18;
mediump float u_xlat16_18;
lowp float u_xlat10_18;
float u_xlat19;
bool u_xlatb19;
void main()
{
    u_xlat0.xy = vs_TEXCOORD4.xy * _Normal01_ST.xy + _Normal01_ST.zw;
    u_xlat0.x = u_xlat0.x * vs_TEXCOORD4.z;
    u_xlat1.x = _Time.y * _Normal01_U_Speed + u_xlat0.x;
    u_xlat0.x = _Time.y * _Normal01_VSpeed;
    u_xlat1.y = u_xlat0.y * vs_TEXCOORD4.w + u_xlat0.x;
    u_xlat10_0.xyz = texture(_Normal01, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xy = vs_TEXCOORD4.xy * _Normal02_ST.xy + _Normal02_ST.zw;
    u_xlat0.xy = vec2(u_xlat0.x * vs_TEXCOORD4.z, u_xlat0.y * vs_TEXCOORD4.w);
    u_xlat1.x = _Time.y * _Normal02_U_Speed + u_xlat0.x;
    u_xlat1.y = _Time.y * _Normal02_V_Speed + u_xlat0.y;
    u_xlat10_0.xyz = texture(_Normal02, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_2.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = u_xlat16_2.xyz * _DistortionIntensity.xyz;
    u_xlat1.x = vs_TEXCOORD6.x;
    u_xlat1.y = vs_TEXCOORD8.x;
    u_xlat1.z = vs_TEXCOORD7.x;
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat3.x = vs_TEXCOORD6.y;
    u_xlat3.y = vs_TEXCOORD8.y;
    u_xlat3.z = vs_TEXCOORD7.y;
    u_xlat1.y = dot(u_xlat3.xyz, u_xlat0.xyz);
    u_xlat3.x = vs_TEXCOORD6.z;
    u_xlat3.y = vs_TEXCOORD8.z;
    u_xlat3.z = vs_TEXCOORD7.z;
    u_xlat1.z = dot(u_xlat3.xyz, u_xlat0.xyz);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
    u_xlat18 = dot((-u_xlat1.xyz), u_xlat0.xyz);
    u_xlat18 = u_xlat18 + u_xlat18;
    u_xlat0.xyz = u_xlat0.xyz * (-vec3(u_xlat18)) + (-u_xlat1.xyz);
    u_xlat10_0.x = texture(_Reflection, u_xlat0.xyz).x;
    u_xlat6.xyz = (-_ReflectionColor_Dark.xyz) + _ReflectionColor_Light.xyz;
    u_xlat0.xyz = u_xlat10_0.xxx * u_xlat6.xyz + _ReflectionColor_Dark.xyz;
    u_xlat18 = vs_TEXCOORD4.y * _ColorGradientRange + _ColorGradientOffset;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat1.xyz = (-_BottomColor.xyz) + _TopColor.xyz;
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz + _BottomColor.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.200000003, 0.200000003, 0.200000003);
    u_xlat0.xyz = u_xlat0.xyz * vec3(_ReflectionBrightness) + (-u_xlat1.xyz);
    u_xlat0.xyz = vec3(vec3(_ReflectionIntensity, _ReflectionIntensity, _ReflectionIntensity)) * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat1.xy = vs_TEXCOORD4.xy * _WaterfallTex01_ST.xy + _WaterfallTex01_ST.zw;
    u_xlat1.xy = vec2(u_xlat1.x * vs_TEXCOORD4.z, u_xlat1.y * vs_TEXCOORD4.w);
    u_xlat1.zw = _Time.yy * vec2(_WaterFall01_Speed, _Waterfall02_Speed) + u_xlat1.yy;
    u_xlat10_18 = texture(_WaterfallTex01, u_xlat1.xz).x;
    u_xlat10_13 = texture(_WaterfallTex01, u_xlat1.xw).y;
    u_xlat16_2.x = (-u_xlat10_18) + u_xlat10_13;
    u_xlat16_2.x = u_xlat10_13 * u_xlat16_2.x + u_xlat10_18;
    u_xlat18 = u_xlat10_18 * _Waterfall01Brightness;
    u_xlat3.xyz = u_xlat16_2.xxx * _WaterfallPatternColor.xyz + (-u_xlat0.xyz);
    u_xlat19 = u_xlat10_13 * _Waterfall02Brightness + (-u_xlat18);
    u_xlat13.x = u_xlat10_13 * _Waterfall02Brightness;
    u_xlat18 = u_xlat13.x * u_xlat19 + u_xlat18;
    u_xlat13.x = vs_TEXCOORD4.y * _SprayRange + _SprayOffset;
    u_xlat13.x = (-u_xlat13.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat13.x = min(max(u_xlat13.x, 0.0), 1.0);
#else
    u_xlat13.x = clamp(u_xlat13.x, 0.0, 1.0);
#endif
    u_xlat18 = u_xlat18 * u_xlat13.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * _DayColor.xyz;
    u_xlat13.xy = vs_TEXCOORD4.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat3.x = _Time.y * _Detail01_U_Speed + u_xlat13.x;
    u_xlat3.y = _Time.y * _Detail01_V_Speed + u_xlat13.y;
    u_xlat10_18 = texture(_NoiseTex, u_xlat3.xy).x;
    u_xlat16_2.x = vs_TEXCOORD4.w * 0.5;
    u_xlat13.xy = vs_TEXCOORD4.xy * _WaterfallSpecTex_ST.xy + _WaterfallSpecTex_ST.zw;
    u_xlat16_2.x = vs_TEXCOORD4.w * u_xlat13.y + (-u_xlat16_2.x);
    u_xlat3.x = u_xlat10_18 * _NoiselDistortionValue + u_xlat13.x;
    u_xlat3.y = u_xlat10_18 * _NoiselDistortionValue + u_xlat16_2.x;
    u_xlat10_18 = texture(_WaterfallSpecTex, u_xlat3.xy).x;
    u_xlat16_3.xyz = vec3(u_xlat10_18) * _WaterfallSpecColor.xyz;
    u_xlat13.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat10_18 = texture(_ShadowMapTexture, u_xlat13.xy).x;
    u_xlat13.x = (-_ShadowStrength) + 1.0;
    u_xlat18 = u_xlat10_18 * u_xlat13.x + _ShadowStrength;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat16_3.xyz;
    u_xlat13.xy = vec2(_Time.y * _FoamUVCoord01.z, _Time.y * _FoamUVCoord01.w);
    u_xlat13.xy = u_xlat1.xy * _FoamUVCoord01.xy + u_xlat13.xy;
    u_xlat10_18 = texture(_WaterfallTex01, u_xlat13.xy).x;
    u_xlat13.xy = vec2(_Time.y * _FoamUVCoord02.z, _Time.y * _FoamUVCoord02.w);
    u_xlat1.xy = u_xlat1.xy * _FoamUVCoord02.xy + u_xlat13.xy;
    u_xlat10_1 = texture(_WaterfallTex01, u_xlat1.xy).y;
    u_xlat16_18 = u_xlat10_18 + u_xlat10_1;
    u_xlat1.x = vs_TEXCOORD4.y * _FoamRange + _FoamOffset;
    u_xlat18 = u_xlat16_18 + u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat1.x = (-u_xlat1.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat18 * u_xlat1.x;
    u_xlat0.xyz = u_xlat1.xxx * _FoamColor.xyz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * _ES_MainLightColor.xyz;
    u_xlat16_1 = max(_LightColor0.w, 1.0);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16_1);
    u_xlat1.xyz = vs_TEXCOORD5.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat19 = u_xlat1.y * _HeigtFogParams.x;
    u_xlat3.x = u_xlat19 * -1.44269502;
    u_xlat3.x = exp2(u_xlat3.x);
    u_xlat3.x = (-u_xlat3.x) + 1.0;
    u_xlat3.x = u_xlat3.x / u_xlat19;
#ifdef UNITY_ADRENO_ES3
    u_xlatb19 = !!(0.00999999978<abs(u_xlat19));
#else
    u_xlatb19 = 0.00999999978<abs(u_xlat19);
#endif
    u_xlat16_2.x = (u_xlatb19) ? u_xlat3.x : 1.0;
    u_xlat19 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat19 = sqrt(u_xlat19);
    u_xlat3.x = u_xlat19 * _HeigtFogParams.y;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat3.x;
    u_xlat16_2.x = exp2((-u_xlat16_2.x));
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat3.x = u_xlat1.y * _HeigtFogParams2.x;
    u_xlat9.x = u_xlat3.x * -1.44269502;
    u_xlat9.x = exp2(u_xlat9.x);
    u_xlat9.x = (-u_xlat9.x) + 1.0;
    u_xlat9.x = u_xlat9.x / u_xlat3.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(0.00999999978<abs(u_xlat3.x));
#else
    u_xlatb3 = 0.00999999978<abs(u_xlat3.x);
#endif
    u_xlat16_8 = (u_xlatb3) ? u_xlat9.x : 1.0;
    u_xlat3.x = u_xlat19 * _HeigtFogParams2.y;
    u_xlat16_8 = u_xlat16_8 * u_xlat3.x;
    u_xlat16_8 = exp2((-u_xlat16_8));
    u_xlat16_2.y = (-u_xlat16_8) + 1.0;
    u_xlat16_2.xy = max(u_xlat16_2.xy, vec2(0.0, 0.0));
    u_xlat16_2.x = u_xlat16_2.y + u_xlat16_2.x;
    u_xlat3.x = u_xlat19 * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat3.x = min(max(u_xlat3.x, 0.0), 1.0);
#else
    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
#endif
    u_xlat16_8 = (-u_xlat3.x) + 2.0;
    u_xlat16_8 = u_xlat16_8 * u_xlat3.x;
    u_xlat3.x = u_xlat16_8 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat3.x = u_xlat3.x + 1.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat3.x;
    u_xlat3.x = min(u_xlat16_2.x, _HeigtFogColBase.w);
    u_xlat9.x = (-u_xlat3.x) + 1.0;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat4.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat4.xyz);
    u_xlat7.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!((-u_xlat1.x)>=u_xlat7.x);
#else
    u_xlatb1 = (-u_xlat1.x)>=u_xlat7.x;
#endif
    u_xlat7.x = u_xlat19 * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat13.x = u_xlat19 + (-_HeigtFogRamp.w);
    u_xlat13.x = u_xlat13.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat13.x = min(max(u_xlat13.x, 0.0), 1.0);
#else
    u_xlat13.x = clamp(u_xlat13.x, 0.0, 1.0);
#endif
    u_xlat19 = (-u_xlat7.x) + 2.0;
    u_xlat7.x = u_xlat19 * u_xlat7.x;
    u_xlat19 = u_xlat7.x * _HeigtFogColDelta.w;
    u_xlat1.x = (u_xlatb1) ? u_xlat19 : u_xlat7.x;
    u_xlat1.x = log2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * unity_FogColor.w;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat1.x = min(u_xlat1.x, _HeigtFogColBase.w);
    u_xlat7.x = vs_TEXCOORD5.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat16_2.x = (-u_xlat7.x) + 2.0;
    u_xlat16_2.x = u_xlat7.x * u_xlat16_2.x;
    u_xlat4.xyz = u_xlat16_2.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat5.xyz = (-u_xlat4.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat7.xyz = u_xlat13.xxx * u_xlat5.xyz + u_xlat4.xyz;
    u_xlat1.yzw = u_xlat1.xxx * u_xlat7.xyz;
    u_xlat1.x = (-u_xlat1.x) + 1.0;
    u_xlat1 = u_xlat9.xxxx * u_xlat1;
    u_xlat9.x = vs_TEXCOORD5.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat9.x = min(max(u_xlat9.x, 0.0), 1.0);
#else
    u_xlat9.x = clamp(u_xlat9.x, 0.0, 1.0);
#endif
    u_xlat9.xyz = u_xlat9.xxx * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    u_xlat7.xyz = u_xlat9.xyz * u_xlat3.xxx + u_xlat1.yzw;
    u_xlat1.xyz = u_xlat1.xxx * u_xlat0.xyz + u_xlat7.xyz;
    u_xlat0.x = vs_TEXCOORD4.y * _AlphaBottomRange + _AlphaBottomOffset;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(_BottomAlphaToggle==1.0);
#else
    u_xlatb6 = _BottomAlphaToggle==1.0;
#endif
    u_xlat0.x = (u_xlatb6) ? u_xlat0.x : 1.0;
    u_xlat6.x = vs_TEXCOORD4.y * _AlphaRange + _AlphaOffset;
    u_xlat6.x = (-u_xlat6.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat6.x = u_xlat6.x * _Opacity;
    u_xlat0.x = u_xlat0.x * u_xlat6.x;
    u_xlat1.w = u_xlat18 * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "HALF_RESOLUTION_PARTICLE_ON" "MSAA_INTERPOLATION" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	mediump float _MHYZBias;
uniform 	vec4 hlslcc_mtx4x4_mhyJitteredVP[4];
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
mediump vec4 u_xlat16_3;
bool u_xlatb3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat6;
mediump vec3 u_xlat16_7;
float u_xlat11;
mediump float u_xlat16_12;
float u_xlat18;
bool u_xlatb18;
float u_xlat19;
float u_xlat24;
bool u_xlatb24;
float u_xlat27;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat2.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    gl_Position = u_xlat2;
    vs_TEXCOORD2.zw = u_xlat2.zw;
    vs_COLOR0 = in_COLOR0;
    u_xlat3.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat24 = u_xlat3.y * _HeigtFogParams.x;
    u_xlat18 = u_xlat24 * -1.44269502;
    u_xlat18 = exp2(u_xlat18);
    u_xlat18 = (-u_xlat18) + 1.0;
    u_xlat18 = u_xlat18 / u_xlat24;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(0.00999999978<abs(u_xlat24));
#else
    u_xlatb24 = 0.00999999978<abs(u_xlat24);
#endif
    u_xlat16_4.x = (u_xlatb24) ? u_xlat18 : 1.0;
    u_xlat24 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat24 = sqrt(u_xlat24);
    u_xlat18 = u_xlat24 * _HeigtFogParams.y;
    u_xlat16_4.x = u_xlat18 * u_xlat16_4.x;
    u_xlat16_4.x = exp2((-u_xlat16_4.x));
    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
    u_xlat18 = u_xlat3.y * _HeigtFogParams2.x;
    u_xlat27 = u_xlat18 * -1.44269502;
    u_xlat27 = exp2(u_xlat27);
    u_xlat27 = (-u_xlat27) + 1.0;
    u_xlat27 = u_xlat27 / u_xlat18;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(0.00999999978<abs(u_xlat18));
#else
    u_xlatb18 = 0.00999999978<abs(u_xlat18);
#endif
    u_xlat16_12 = (u_xlatb18) ? u_xlat27 : 1.0;
    u_xlat18 = u_xlat24 * _HeigtFogParams2.y;
    u_xlat16_12 = u_xlat18 * u_xlat16_12;
    u_xlat16_12 = exp2((-u_xlat16_12));
    u_xlat16_4.y = (-u_xlat16_12) + 1.0;
    u_xlat16_4.xy = max(u_xlat16_4.xy, vec2(0.0, 0.0));
    u_xlat16_4.x = u_xlat16_4.y + u_xlat16_4.x;
    u_xlat18 = u_xlat24 * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat16_12 = (-u_xlat18) + 2.0;
    u_xlat16_12 = u_xlat18 * u_xlat16_12;
    u_xlat18 = u_xlat16_12 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat18 = u_xlat18 + 1.0;
    u_xlat16_4.x = u_xlat18 * u_xlat16_4.x;
    u_xlat18 = min(u_xlat16_4.x, _HeigtFogColBase.w);
    u_xlat27 = (-u_xlat18) + 1.0;
    u_xlat5.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat5.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat5.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat3.x = dot(u_xlat3.xyz, u_xlat5.xyz);
    u_xlat11 = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!((-u_xlat3.x)>=u_xlat11);
#else
    u_xlatb3 = (-u_xlat3.x)>=u_xlat11;
#endif
    u_xlat11 = u_xlat24 * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat11 = min(max(u_xlat11, 0.0), 1.0);
#else
    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
#endif
    u_xlat24 = u_xlat24 + (-_HeigtFogRamp.w);
    u_xlat24 = u_xlat24 * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat19 = (-u_xlat11) + 2.0;
    u_xlat11 = u_xlat19 * u_xlat11;
    u_xlat19 = u_xlat11 * _HeigtFogColDelta.w;
    u_xlat3.x = (u_xlatb3) ? u_xlat19 : u_xlat11;
    u_xlat3.x = log2(u_xlat3.x);
    u_xlat3.x = u_xlat3.x * unity_FogColor.w;
    u_xlat3.x = exp2(u_xlat3.x);
    u_xlat3.x = min(u_xlat3.x, _HeigtFogColBase.w);
    u_xlat11 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat11 = min(max(u_xlat11, 0.0), 1.0);
#else
    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
#endif
    u_xlat16_4.x = (-u_xlat11) + 2.0;
    u_xlat16_4.x = u_xlat11 * u_xlat16_4.x;
    u_xlat5.xyz = u_xlat16_4.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat6.xyz = (-u_xlat5.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat5.xyz = vec3(u_xlat24) * u_xlat6.xyz + u_xlat5.xyz;
    u_xlat5.xyz = u_xlat3.xxx * u_xlat5.xyz;
    u_xlat24 = (-u_xlat3.x) + 1.0;
    vs_TEXCOORD0.w = u_xlat27 * u_xlat24;
    u_xlat3.xyz = vec3(u_xlat27) * u_xlat5.xyz;
    u_xlat24 = u_xlat0.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    u_xlat0.xyz = vec3(u_xlat24) * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    vs_TEXCOORD0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat3.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat0.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    u_xlat16_4.x = u_xlat0.y * u_xlat0.y;
    u_xlat16_4.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_4.x);
    u_xlat16_3 = u_xlat0.yzzx * u_xlat0.xyzz;
    u_xlat16_7.x = dot(unity_SHBr, u_xlat16_3);
    u_xlat16_7.y = dot(unity_SHBg, u_xlat16_3);
    u_xlat16_7.z = dot(unity_SHBb, u_xlat16_3);
    u_xlat16_4.xyz = unity_SHC.xyz * u_xlat16_4.xxx + u_xlat16_7.xyz;
    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat0.w = 1.0;
    u_xlat16_7.x = dot(unity_SHAr, u_xlat0);
    u_xlat16_7.y = dot(unity_SHAg, u_xlat0);
    u_xlat16_7.z = dot(unity_SHAb, u_xlat0);
    u_xlat16_4.xyz = u_xlat16_4.xyz + u_xlat16_7.xyz;
    vs_TEXCOORD1.xyz = u_xlat16_4.xyz;
    vs_TEXCOORD1.w = 1.0;
    u_xlat5.x = float(0.5);
    u_xlat5.z = float(0.5);
    u_xlat5.y = _ProjectionParams.x;
    u_xlat2.xyz = u_xlat2.xyw * u_xlat5.xyz;
    u_xlat2.w = u_xlat2.y * 0.5;
    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4_mhyJitteredVP[1];
    u_xlat2 = hlslcc_mtx4x4_mhyJitteredVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4_mhyJitteredVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat2.xyz = vec3(u_xlat5.z * u_xlat1.x, u_xlat5.y * u_xlat1.y, u_xlat5.z * u_xlat1.w);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    u_xlat2.w = u_xlat2.y * 0.5;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat24 = dot(hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, hlslcc_mtx4x4unity_ObjectToWorld[0].xyz);
    vs_TEXCOORD4.z = sqrt(u_xlat24);
    u_xlat24 = dot(hlslcc_mtx4x4unity_ObjectToWorld[1].xyz, hlslcc_mtx4x4unity_ObjectToWorld[1].xyz);
    vs_TEXCOORD4.w = sqrt(u_xlat24);
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD5.w = 0.0;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
    vs_TEXCOORD6.xyz = u_xlat1.xyz;
    vs_TEXCOORD6.w = 0.0;
    vs_TEXCOORD7.xyz = u_xlat0.xyz;
    vs_TEXCOORD7.w = 0.0;
    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
    u_xlat24 = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD8.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    vs_TEXCOORD8.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	mediump vec4 _LightColor0;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	float _AlphaRange;
uniform 	float _AlphaOffset;
uniform 	float _Opacity;
uniform 	mediump float _BottomAlphaToggle;
uniform 	float _AlphaBottomRange;
uniform 	float _AlphaBottomOffset;
uniform 	vec4 _WaterfallTex01_ST;
uniform 	mediump vec4 _FoamUVCoord01;
uniform 	mediump vec4 _FoamUVCoord02;
uniform 	float _FoamRange;
uniform 	float _FoamOffset;
uniform 	vec4 _DayColor;
uniform 	vec4 _BottomColor;
uniform 	vec4 _TopColor;
uniform 	float _ColorGradientRange;
uniform 	float _ColorGradientOffset;
uniform 	vec4 _ReflectionColor_Dark;
uniform 	vec4 _ReflectionColor_Light;
uniform 	float _Normal01_U_Speed;
uniform 	vec4 _Normal01_ST;
uniform 	float _Normal01_VSpeed;
uniform 	float _Normal02_U_Speed;
uniform 	vec4 _Normal02_ST;
uniform 	float _Normal02_V_Speed;
uniform 	vec4 _DistortionIntensity;
uniform 	float _ReflectionBrightness;
uniform 	float _ReflectionIntensity;
uniform 	float _WaterFall01_Speed;
uniform 	float _Waterfall02_Speed;
uniform 	mediump vec4 _WaterfallPatternColor;
uniform 	float _Waterfall01Brightness;
uniform 	float _Waterfall02Brightness;
uniform 	float _SprayRange;
uniform 	float _SprayOffset;
uniform 	float _ShadowStrength;
uniform 	vec4 _WaterfallSpecTex_ST;
uniform 	float _Detail01_U_Speed;
uniform 	vec4 _NoiseTex_ST;
uniform 	float _Detail01_V_Speed;
uniform 	float _NoiselDistortionValue;
uniform 	mediump vec4 _WaterfallSpecColor;
uniform 	mediump vec4 _FoamColor;
uniform 	vec3 _ES_MainLightColor;
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _WaterfallTex01;
uniform lowp sampler2D _Normal01;
uniform lowp sampler2D _Normal02;
uniform lowp samplerCube _Reflection;
uniform lowp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _WaterfallSpecTex;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
in highp vec4 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
lowp vec3 u_xlat10_0;
vec4 u_xlat1;
mediump float u_xlat16_1;
lowp float u_xlat10_1;
bool u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
bool u_xlatb3;
vec3 u_xlat4;
vec3 u_xlat5;
vec3 u_xlat6;
float u_xlat7;
mediump float u_xlat16_8;
float u_xlat9;
bool u_xlatb9;
float u_xlat12;
bool u_xlatb12;
vec2 u_xlat13;
lowp float u_xlat10_13;
float u_xlat15;
float u_xlat18;
mediump float u_xlat16_18;
lowp float u_xlat10_18;
float u_xlat19;
lowp float u_xlat10_21;
void main()
{
    u_xlat0.xy = vs_TEXCOORD4.xy * _Normal01_ST.xy + _Normal01_ST.zw;
    u_xlat0.x = u_xlat0.x * vs_TEXCOORD4.z;
    u_xlat1.x = _Time.y * _Normal01_U_Speed + u_xlat0.x;
    u_xlat0.x = _Time.y * _Normal01_VSpeed;
    u_xlat1.y = u_xlat0.y * vs_TEXCOORD4.w + u_xlat0.x;
    u_xlat10_0.xyz = texture(_Normal01, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xy = vs_TEXCOORD4.xy * _Normal02_ST.xy + _Normal02_ST.zw;
    u_xlat0.xy = vec2(u_xlat0.x * vs_TEXCOORD4.z, u_xlat0.y * vs_TEXCOORD4.w);
    u_xlat1.x = _Time.y * _Normal02_U_Speed + u_xlat0.x;
    u_xlat1.y = _Time.y * _Normal02_V_Speed + u_xlat0.y;
    u_xlat10_0.xyz = texture(_Normal02, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_2.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = u_xlat16_2.xyz * _DistortionIntensity.xyz;
    u_xlat1.x = vs_TEXCOORD6.x;
    u_xlat1.y = vs_TEXCOORD8.x;
    u_xlat1.z = vs_TEXCOORD7.x;
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat3.x = vs_TEXCOORD6.y;
    u_xlat3.y = vs_TEXCOORD8.y;
    u_xlat3.z = vs_TEXCOORD7.y;
    u_xlat1.y = dot(u_xlat3.xyz, u_xlat0.xyz);
    u_xlat3.x = vs_TEXCOORD6.z;
    u_xlat3.y = vs_TEXCOORD8.z;
    u_xlat3.z = vs_TEXCOORD7.z;
    u_xlat1.z = dot(u_xlat3.xyz, u_xlat0.xyz);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
    u_xlat18 = dot((-u_xlat1.xyz), u_xlat0.xyz);
    u_xlat18 = u_xlat18 + u_xlat18;
    u_xlat0.xyz = u_xlat0.xyz * (-vec3(u_xlat18)) + (-u_xlat1.xyz);
    u_xlat10_0.x = texture(_Reflection, u_xlat0.xyz).x;
    u_xlat6.xyz = (-_ReflectionColor_Dark.xyz) + _ReflectionColor_Light.xyz;
    u_xlat0.xyz = u_xlat10_0.xxx * u_xlat6.xyz + _ReflectionColor_Dark.xyz;
    u_xlat18 = vs_TEXCOORD4.y * _ColorGradientRange + _ColorGradientOffset;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat1.xyz = (-_BottomColor.xyz) + _TopColor.xyz;
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz + _BottomColor.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.200000003, 0.200000003, 0.200000003);
    u_xlat0.xyz = u_xlat0.xyz * vec3(_ReflectionBrightness) + (-u_xlat1.xyz);
    u_xlat0.xyz = vec3(vec3(_ReflectionIntensity, _ReflectionIntensity, _ReflectionIntensity)) * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat1.xy = vs_TEXCOORD4.xy * _WaterfallTex01_ST.xy + _WaterfallTex01_ST.zw;
    u_xlat1.xy = vec2(u_xlat1.x * vs_TEXCOORD4.z, u_xlat1.y * vs_TEXCOORD4.w);
    u_xlat1.zw = _Time.yy * vec2(_WaterFall01_Speed, _Waterfall02_Speed) + u_xlat1.yy;
    u_xlat10_18 = texture(_WaterfallTex01, u_xlat1.xz).x;
    u_xlat10_13 = texture(_WaterfallTex01, u_xlat1.xw).y;
    u_xlat16_2.x = (-u_xlat10_18) + u_xlat10_13;
    u_xlat16_2.x = u_xlat10_13 * u_xlat16_2.x + u_xlat10_18;
    u_xlat18 = u_xlat10_18 * _Waterfall01Brightness;
    u_xlat3.xyz = u_xlat16_2.xxx * _WaterfallPatternColor.xyz + (-u_xlat0.xyz);
    u_xlat19 = u_xlat10_13 * _Waterfall02Brightness + (-u_xlat18);
    u_xlat13.x = u_xlat10_13 * _Waterfall02Brightness;
    u_xlat18 = u_xlat13.x * u_xlat19 + u_xlat18;
    u_xlat13.x = vs_TEXCOORD4.y * _SprayRange + _SprayOffset;
    u_xlat13.x = (-u_xlat13.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat13.x = min(max(u_xlat13.x, 0.0), 1.0);
#else
    u_xlat13.x = clamp(u_xlat13.x, 0.0, 1.0);
#endif
    u_xlat18 = u_xlat18 * u_xlat13.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * _DayColor.xyz;
    u_xlat13.xy = vs_TEXCOORD4.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat3.x = _Time.y * _Detail01_U_Speed + u_xlat13.x;
    u_xlat3.y = _Time.y * _Detail01_V_Speed + u_xlat13.y;
    u_xlat10_18 = texture(_NoiseTex, u_xlat3.xy).x;
    u_xlat16_2.x = vs_TEXCOORD4.w * 0.5;
    u_xlat13.xy = vs_TEXCOORD4.xy * _WaterfallSpecTex_ST.xy + _WaterfallSpecTex_ST.zw;
    u_xlat16_2.x = vs_TEXCOORD4.w * u_xlat13.y + (-u_xlat16_2.x);
    u_xlat3.x = u_xlat10_18 * _NoiselDistortionValue + u_xlat13.x;
    u_xlat3.y = u_xlat10_18 * _NoiselDistortionValue + u_xlat16_2.x;
    u_xlat10_18 = texture(_WaterfallSpecTex, u_xlat3.xy).x;
    u_xlat16_3.xyz = vec3(u_xlat10_18) * _WaterfallSpecColor.xyz;
    u_xlat18 = (-_ShadowStrength) + 1.0;
    u_xlat13.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat10_21 = texture(_ShadowMapTexture, u_xlat13.xy).x;
    u_xlat13.x = texture(_CameraDepthTextureScaled, u_xlat13.xy).x;
    u_xlat13.x = u_xlat13.x * _ProjectionParams.z + (-vs_TEXCOORD3.w);
    u_xlat18 = u_xlat10_21 * u_xlat18 + _ShadowStrength;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat16_3.xyz;
    u_xlat3.xy = vec2(_Time.y * _FoamUVCoord01.z, _Time.y * _FoamUVCoord01.w);
    u_xlat3.xy = u_xlat1.xy * _FoamUVCoord01.xy + u_xlat3.xy;
    u_xlat10_18 = texture(_WaterfallTex01, u_xlat3.xy).x;
    u_xlat3.xy = vec2(_Time.y * _FoamUVCoord02.z, _Time.y * _FoamUVCoord02.w);
    u_xlat1.xy = u_xlat1.xy * _FoamUVCoord02.xy + u_xlat3.xy;
    u_xlat10_1 = texture(_WaterfallTex01, u_xlat1.xy).y;
    u_xlat16_18 = u_xlat10_18 + u_xlat10_1;
    u_xlat1.x = vs_TEXCOORD4.y * _FoamRange + _FoamOffset;
    u_xlat18 = u_xlat16_18 + u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat1.x = (-u_xlat1.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat18 * u_xlat1.x;
    u_xlat0.xyz = u_xlat1.xxx * _FoamColor.xyz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * _ES_MainLightColor.xyz;
    u_xlat16_1 = max(_LightColor0.w, 1.0);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16_1);
    u_xlat1.xyw = vs_TEXCOORD5.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat3.x = u_xlat1.y * _HeigtFogParams.x;
    u_xlat9 = u_xlat3.x * -1.44269502;
    u_xlat9 = exp2(u_xlat9);
    u_xlat9 = (-u_xlat9) + 1.0;
    u_xlat9 = u_xlat9 / u_xlat3.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(0.00999999978<abs(u_xlat3.x));
#else
    u_xlatb3 = 0.00999999978<abs(u_xlat3.x);
#endif
    u_xlat16_2.x = (u_xlatb3) ? u_xlat9 : 1.0;
    u_xlat3.x = dot(u_xlat1.xyw, u_xlat1.xyw);
    u_xlat3.x = sqrt(u_xlat3.x);
    u_xlat9 = u_xlat3.x * _HeigtFogParams.y;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat9;
    u_xlat16_2.x = exp2((-u_xlat16_2.x));
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat9 = u_xlat1.y * _HeigtFogParams2.x;
    u_xlat15 = u_xlat9 * -1.44269502;
    u_xlat15 = exp2(u_xlat15);
    u_xlat15 = (-u_xlat15) + 1.0;
    u_xlat15 = u_xlat15 / u_xlat9;
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(0.00999999978<abs(u_xlat9));
#else
    u_xlatb9 = 0.00999999978<abs(u_xlat9);
#endif
    u_xlat16_8 = (u_xlatb9) ? u_xlat15 : 1.0;
    u_xlat9 = u_xlat3.x * _HeigtFogParams2.y;
    u_xlat16_8 = u_xlat16_8 * u_xlat9;
    u_xlat16_8 = exp2((-u_xlat16_8));
    u_xlat16_2.y = (-u_xlat16_8) + 1.0;
    u_xlat16_2.xy = max(u_xlat16_2.xy, vec2(0.0, 0.0));
    u_xlat16_2.x = u_xlat16_2.y + u_xlat16_2.x;
    u_xlat9 = u_xlat3.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat9 = min(max(u_xlat9, 0.0), 1.0);
#else
    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
#endif
    u_xlat16_8 = (-u_xlat9) + 2.0;
    u_xlat16_8 = u_xlat16_8 * u_xlat9;
    u_xlat9 = u_xlat16_8 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat9 = u_xlat9 + 1.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat9;
    u_xlat9 = min(u_xlat16_2.x, _HeigtFogColBase.w);
    u_xlat15 = (-u_xlat9) + 1.0;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat4.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat1.x = dot(u_xlat1.xyw, u_xlat4.xyz);
    u_xlat7 = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!((-u_xlat1.x)>=u_xlat7);
#else
    u_xlatb1 = (-u_xlat1.x)>=u_xlat7;
#endif
    u_xlat7 = u_xlat3.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7 = min(max(u_xlat7, 0.0), 1.0);
#else
    u_xlat7 = clamp(u_xlat7, 0.0, 1.0);
#endif
    u_xlat19 = u_xlat3.x + (-_HeigtFogRamp.w);
    u_xlat19 = u_xlat19 * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat19 = min(max(u_xlat19, 0.0), 1.0);
#else
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
#endif
    u_xlat3.x = (-u_xlat7) + 2.0;
    u_xlat7 = u_xlat7 * u_xlat3.x;
    u_xlat3.x = u_xlat7 * _HeigtFogColDelta.w;
    u_xlat1.x = (u_xlatb1) ? u_xlat3.x : u_xlat7;
    u_xlat1.x = log2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * unity_FogColor.w;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat1.x = min(u_xlat1.x, _HeigtFogColBase.w);
    u_xlat7 = vs_TEXCOORD5.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat7 = min(max(u_xlat7, 0.0), 1.0);
#else
    u_xlat7 = clamp(u_xlat7, 0.0, 1.0);
#endif
    u_xlat16_2.x = (-u_xlat7) + 2.0;
    u_xlat16_2.x = u_xlat7 * u_xlat16_2.x;
    u_xlat4.xyz = u_xlat16_2.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat5.xyz = (-u_xlat4.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat4.xyz = vec3(u_xlat19) * u_xlat5.xyz + u_xlat4.xyz;
    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
    u_xlat1.x = (-u_xlat1.x) + 1.0;
    u_xlat1.x = u_xlat15 * u_xlat1.x;
    u_xlat3.xzw = vec3(u_xlat15) * u_xlat4.xyz;
    u_xlat7 = vs_TEXCOORD5.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat7 = min(max(u_xlat7, 0.0), 1.0);
#else
    u_xlat7 = clamp(u_xlat7, 0.0, 1.0);
#endif
    u_xlat4.xyz = vec3(u_xlat7) * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    u_xlat3.xyz = u_xlat4.xyz * vec3(u_xlat9) + u_xlat3.xzw;
    u_xlat2.xyz = u_xlat1.xxx * u_xlat0.xyz + u_xlat3.xyz;
    u_xlat0.x = u_xlat13.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat6.x = u_xlat13.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat12 = (-u_xlat6.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat12 + u_xlat6.x;
    u_xlat6.x = vs_TEXCOORD4.y * _AlphaRange + _AlphaOffset;
    u_xlat6.x = (-u_xlat6.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat6.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _Opacity;
    u_xlat6.x = vs_TEXCOORD4.y * _AlphaBottomRange + _AlphaBottomOffset;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_BottomAlphaToggle==1.0);
#else
    u_xlatb12 = _BottomAlphaToggle==1.0;
#endif
    u_xlat6.x = (u_xlatb12) ? u_xlat6.x : 1.0;
    u_xlat0.x = u_xlat6.x * u_xlat0.x;
    u_xlat2.w = u_xlat18 * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.w = min(max(u_xlat2.w, 0.0), 1.0);
#else
    u_xlat2.w = clamp(u_xlat2.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat2;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "MSAA_INTERPOLATION" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	mediump float _MHYZBias;
uniform 	vec4 hlslcc_mtx4x4_mhyJitteredVP[4];
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
vec3 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
bool u_xlatb3;
mediump vec3 u_xlat16_4;
float u_xlat5;
mediump vec4 u_xlat16_5;
vec3 u_xlat6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
float u_xlat11;
mediump float u_xlat16_12;
vec3 u_xlat13;
float u_xlat17;
bool u_xlatb17;
float u_xlat19;
float u_xlat24;
float u_xlat27;
bool u_xlatb27;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat8.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    u_xlat1.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position = u_xlat1;
    vs_TEXCOORD2.zw = u_xlat1.zw;
    vs_COLOR0 = in_COLOR0;
    u_xlat3.xyz = u_xlat8.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat17 = u_xlat3.y * _HeigtFogParams.x;
    u_xlat27 = u_xlat17 * -1.44269502;
    u_xlat27 = exp2(u_xlat27);
    u_xlat27 = (-u_xlat27) + 1.0;
    u_xlat27 = u_xlat27 / u_xlat17;
#ifdef UNITY_ADRENO_ES3
    u_xlatb17 = !!(0.00999999978<abs(u_xlat17));
#else
    u_xlatb17 = 0.00999999978<abs(u_xlat17);
#endif
    u_xlat16_4.x = (u_xlatb17) ? u_xlat27 : 1.0;
    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat17 = sqrt(u_xlat17);
    u_xlat27 = u_xlat17 * _HeigtFogParams.y;
    u_xlat16_4.x = u_xlat27 * u_xlat16_4.x;
    u_xlat16_4.x = exp2((-u_xlat16_4.x));
    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
    u_xlat27 = u_xlat3.y * _HeigtFogParams2.x;
    u_xlat5 = u_xlat27 * -1.44269502;
    u_xlat5 = exp2(u_xlat5);
    u_xlat5 = (-u_xlat5) + 1.0;
    u_xlat5 = u_xlat5 / u_xlat27;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(0.00999999978<abs(u_xlat27));
#else
    u_xlatb27 = 0.00999999978<abs(u_xlat27);
#endif
    u_xlat16_12 = (u_xlatb27) ? u_xlat5 : 1.0;
    u_xlat27 = u_xlat17 * _HeigtFogParams2.y;
    u_xlat16_12 = u_xlat27 * u_xlat16_12;
    u_xlat16_12 = exp2((-u_xlat16_12));
    u_xlat16_4.y = (-u_xlat16_12) + 1.0;
    u_xlat16_4.xy = max(u_xlat16_4.xy, vec2(0.0, 0.0));
    u_xlat16_4.x = u_xlat16_4.y + u_xlat16_4.x;
    u_xlat27 = u_xlat17 * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
    u_xlat16_12 = (-u_xlat27) + 2.0;
    u_xlat16_12 = u_xlat27 * u_xlat16_12;
    u_xlat27 = u_xlat16_12 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat27 = u_xlat27 + 1.0;
    u_xlat16_4.x = u_xlat27 * u_xlat16_4.x;
    u_xlat27 = min(u_xlat16_4.x, _HeigtFogColBase.w);
    u_xlat5 = (-u_xlat27) + 1.0;
    u_xlat13.x = _ProjectionParams.z * 0.999899983;
    u_xlat6.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat6.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat6.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat3.x = dot(u_xlat3.xyz, u_xlat6.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!((-u_xlat3.x)>=u_xlat13.x);
#else
    u_xlatb3 = (-u_xlat3.x)>=u_xlat13.x;
#endif
    u_xlat11 = u_xlat17 * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat11 = min(max(u_xlat11, 0.0), 1.0);
#else
    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
#endif
    u_xlat17 = u_xlat17 + (-_HeigtFogRamp.w);
    u_xlat17 = u_xlat17 * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat17 = min(max(u_xlat17, 0.0), 1.0);
#else
    u_xlat17 = clamp(u_xlat17, 0.0, 1.0);
#endif
    u_xlat19 = (-u_xlat11) + 2.0;
    u_xlat11 = u_xlat19 * u_xlat11;
    u_xlat19 = u_xlat11 * _HeigtFogColDelta.w;
    u_xlat3.x = (u_xlatb3) ? u_xlat19 : u_xlat11;
    u_xlat3.x = log2(u_xlat3.x);
    u_xlat3.x = u_xlat3.x * unity_FogColor.w;
    u_xlat3.x = exp2(u_xlat3.x);
    u_xlat3.x = min(u_xlat3.x, _HeigtFogColBase.w);
    u_xlat11 = u_xlat8.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat11 = min(max(u_xlat11, 0.0), 1.0);
#else
    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
#endif
    u_xlat16_4.x = (-u_xlat11) + 2.0;
    u_xlat16_4.x = u_xlat11 * u_xlat16_4.x;
    u_xlat13.xyz = u_xlat16_4.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat6.xyz = (-u_xlat13.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat13.xyz = vec3(u_xlat17) * u_xlat6.xyz + u_xlat13.xyz;
    u_xlat13.xyz = u_xlat3.xxx * u_xlat13.xyz;
    u_xlat17 = (-u_xlat3.x) + 1.0;
    vs_TEXCOORD0.w = u_xlat5 * u_xlat17;
    u_xlat3.xyz = vec3(u_xlat5) * u_xlat13.xyz;
    u_xlat17 = u_xlat8.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat17 = min(max(u_xlat17, 0.0), 1.0);
#else
    u_xlat17 = clamp(u_xlat17, 0.0, 1.0);
#endif
    vs_TEXCOORD5.xyz = u_xlat8.xyz;
    u_xlat8.xyz = vec3(u_xlat17) * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    vs_TEXCOORD0.xyz = u_xlat8.xyz * vec3(u_xlat27) + u_xlat3.xyz;
    u_xlat3.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat3.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat3.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat8.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat3.xyz = u_xlat8.xxx * u_xlat3.xyz;
    u_xlat16_4.x = u_xlat3.y * u_xlat3.y;
    u_xlat16_4.x = u_xlat3.x * u_xlat3.x + (-u_xlat16_4.x);
    u_xlat16_5 = u_xlat3.yzzx * u_xlat3.xyzz;
    u_xlat16_7.x = dot(unity_SHBr, u_xlat16_5);
    u_xlat16_7.y = dot(unity_SHBg, u_xlat16_5);
    u_xlat16_7.z = dot(unity_SHBb, u_xlat16_5);
    u_xlat16_4.xyz = unity_SHC.xyz * u_xlat16_4.xxx + u_xlat16_7.xyz;
    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat3.w = 1.0;
    u_xlat16_7.x = dot(unity_SHAr, u_xlat3);
    u_xlat16_7.y = dot(unity_SHAg, u_xlat3);
    u_xlat16_7.z = dot(unity_SHAb, u_xlat3);
    u_xlat16_4.xyz = u_xlat16_4.xyz + u_xlat16_7.xyz;
    vs_TEXCOORD1.xyz = u_xlat16_4.xyz;
    vs_TEXCOORD1.w = 1.0;
    u_xlat6.x = float(0.5);
    u_xlat6.z = float(0.5);
    u_xlat6.y = _ProjectionParams.x;
    u_xlat1.xyz = u_xlat1.xyw * u_xlat6.xyz;
    u_xlat1.w = u_xlat1.y * 0.5;
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4_mhyJitteredVP[1];
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[3] * u_xlat2.wwww + u_xlat1;
    u_xlat2.xyz = vec3(u_xlat6.z * u_xlat1.x, u_xlat6.y * u_xlat1.y, u_xlat6.z * u_xlat1.w);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    u_xlat2.w = u_xlat2.y * 0.5;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy;
    u_xlat8.x = dot(unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz);
    vs_TEXCOORD4.z = sqrt(u_xlat8.x);
    u_xlat8.x = dot(unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz);
    vs_TEXCOORD4.w = sqrt(u_xlat8.x);
    vs_TEXCOORD5.w = 0.0;
    u_xlat8.xyz = in_TANGENT0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat8.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_TANGENT0.xxx + u_xlat8.xyz;
    u_xlat0.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_TANGENT0.zzz + u_xlat8.xyz;
    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat0.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    vs_TEXCOORD6.xyz = u_xlat0.xyz;
    vs_TEXCOORD6.w = 0.0;
    vs_TEXCOORD7.xyz = u_xlat3.xyz;
    vs_TEXCOORD7.w = 0.0;
    u_xlat1.xyz = u_xlat0.yzx * u_xlat3.zxy;
    u_xlat0.xyz = u_xlat3.yzx * u_xlat0.zxy + (-u_xlat1.xyz);
    u_xlat24 = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD8.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    vs_TEXCOORD8.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	mediump vec4 _LightColor0;
uniform 	float _AlphaRange;
uniform 	float _AlphaOffset;
uniform 	float _Opacity;
uniform 	mediump float _BottomAlphaToggle;
uniform 	float _AlphaBottomRange;
uniform 	float _AlphaBottomOffset;
uniform 	vec4 _WaterfallTex01_ST;
uniform 	mediump vec4 _FoamUVCoord01;
uniform 	mediump vec4 _FoamUVCoord02;
uniform 	float _FoamRange;
uniform 	float _FoamOffset;
uniform 	vec4 _DayColor;
uniform 	vec4 _BottomColor;
uniform 	vec4 _TopColor;
uniform 	float _ColorGradientRange;
uniform 	float _ColorGradientOffset;
uniform 	vec4 _ReflectionColor_Dark;
uniform 	vec4 _ReflectionColor_Light;
uniform 	float _Normal01_U_Speed;
uniform 	vec4 _Normal01_ST;
uniform 	float _Normal01_VSpeed;
uniform 	float _Normal02_U_Speed;
uniform 	vec4 _Normal02_ST;
uniform 	float _Normal02_V_Speed;
uniform 	vec4 _DistortionIntensity;
uniform 	float _ReflectionBrightness;
uniform 	float _ReflectionIntensity;
uniform 	float _WaterFall01_Speed;
uniform 	float _Waterfall02_Speed;
uniform 	mediump vec4 _WaterfallPatternColor;
uniform 	float _Waterfall01Brightness;
uniform 	float _Waterfall02Brightness;
uniform 	float _SprayRange;
uniform 	float _SprayOffset;
uniform 	float _ShadowStrength;
uniform 	vec4 _WaterfallSpecTex_ST;
uniform 	float _Detail01_U_Speed;
uniform 	vec4 _NoiseTex_ST;
uniform 	float _Detail01_V_Speed;
uniform 	float _NoiselDistortionValue;
uniform 	mediump vec4 _WaterfallSpecColor;
uniform 	mediump vec4 _FoamColor;
uniform 	vec3 _ES_MainLightColor;
uniform lowp sampler2D _WaterfallTex01;
uniform lowp sampler2D _Normal01;
uniform lowp sampler2D _Normal02;
uniform lowp samplerCube _Reflection;
uniform lowp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _WaterfallSpecTex;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
in highp vec4 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
lowp vec3 u_xlat10_0;
vec4 u_xlat1;
mediump float u_xlat16_1;
lowp float u_xlat10_1;
bool u_xlatb1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
bool u_xlatb3;
vec3 u_xlat4;
vec3 u_xlat5;
vec3 u_xlat6;
bool u_xlatb6;
vec3 u_xlat7;
mediump float u_xlat16_8;
vec3 u_xlat9;
vec2 u_xlat13;
lowp float u_xlat10_13;
float u_xlat18;
mediump float u_xlat16_18;
lowp float u_xlat10_18;
float u_xlat19;
bool u_xlatb19;
void main()
{
    u_xlat0.xy = vs_TEXCOORD4.xy * _Normal01_ST.xy + _Normal01_ST.zw;
    u_xlat0.x = u_xlat0.x * vs_TEXCOORD4.z;
    u_xlat1.x = _Time.y * _Normal01_U_Speed + u_xlat0.x;
    u_xlat0.x = _Time.y * _Normal01_VSpeed;
    u_xlat1.y = u_xlat0.y * vs_TEXCOORD4.w + u_xlat0.x;
    u_xlat10_0.xyz = texture(_Normal01, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xy = vs_TEXCOORD4.xy * _Normal02_ST.xy + _Normal02_ST.zw;
    u_xlat0.xy = vec2(u_xlat0.x * vs_TEXCOORD4.z, u_xlat0.y * vs_TEXCOORD4.w);
    u_xlat1.x = _Time.y * _Normal02_U_Speed + u_xlat0.x;
    u_xlat1.y = _Time.y * _Normal02_V_Speed + u_xlat0.y;
    u_xlat10_0.xyz = texture(_Normal02, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_2.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = u_xlat16_2.xyz * _DistortionIntensity.xyz;
    u_xlat1.x = vs_TEXCOORD6.x;
    u_xlat1.y = vs_TEXCOORD8.x;
    u_xlat1.z = vs_TEXCOORD7.x;
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat3.x = vs_TEXCOORD6.y;
    u_xlat3.y = vs_TEXCOORD8.y;
    u_xlat3.z = vs_TEXCOORD7.y;
    u_xlat1.y = dot(u_xlat3.xyz, u_xlat0.xyz);
    u_xlat3.x = vs_TEXCOORD6.z;
    u_xlat3.y = vs_TEXCOORD8.z;
    u_xlat3.z = vs_TEXCOORD7.z;
    u_xlat1.z = dot(u_xlat3.xyz, u_xlat0.xyz);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
    u_xlat18 = dot((-u_xlat1.xyz), u_xlat0.xyz);
    u_xlat18 = u_xlat18 + u_xlat18;
    u_xlat0.xyz = u_xlat0.xyz * (-vec3(u_xlat18)) + (-u_xlat1.xyz);
    u_xlat10_0.x = texture(_Reflection, u_xlat0.xyz).x;
    u_xlat6.xyz = (-_ReflectionColor_Dark.xyz) + _ReflectionColor_Light.xyz;
    u_xlat0.xyz = u_xlat10_0.xxx * u_xlat6.xyz + _ReflectionColor_Dark.xyz;
    u_xlat18 = vs_TEXCOORD4.y * _ColorGradientRange + _ColorGradientOffset;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat1.xyz = (-_BottomColor.xyz) + _TopColor.xyz;
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz + _BottomColor.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.200000003, 0.200000003, 0.200000003);
    u_xlat0.xyz = u_xlat0.xyz * vec3(_ReflectionBrightness) + (-u_xlat1.xyz);
    u_xlat0.xyz = vec3(vec3(_ReflectionIntensity, _ReflectionIntensity, _ReflectionIntensity)) * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat1.xy = vs_TEXCOORD4.xy * _WaterfallTex01_ST.xy + _WaterfallTex01_ST.zw;
    u_xlat1.xy = vec2(u_xlat1.x * vs_TEXCOORD4.z, u_xlat1.y * vs_TEXCOORD4.w);
    u_xlat1.zw = _Time.yy * vec2(_WaterFall01_Speed, _Waterfall02_Speed) + u_xlat1.yy;
    u_xlat10_18 = texture(_WaterfallTex01, u_xlat1.xz).x;
    u_xlat10_13 = texture(_WaterfallTex01, u_xlat1.xw).y;
    u_xlat16_2.x = (-u_xlat10_18) + u_xlat10_13;
    u_xlat16_2.x = u_xlat10_13 * u_xlat16_2.x + u_xlat10_18;
    u_xlat18 = u_xlat10_18 * _Waterfall01Brightness;
    u_xlat3.xyz = u_xlat16_2.xxx * _WaterfallPatternColor.xyz + (-u_xlat0.xyz);
    u_xlat19 = u_xlat10_13 * _Waterfall02Brightness + (-u_xlat18);
    u_xlat13.x = u_xlat10_13 * _Waterfall02Brightness;
    u_xlat18 = u_xlat13.x * u_xlat19 + u_xlat18;
    u_xlat13.x = vs_TEXCOORD4.y * _SprayRange + _SprayOffset;
    u_xlat13.x = (-u_xlat13.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat13.x = min(max(u_xlat13.x, 0.0), 1.0);
#else
    u_xlat13.x = clamp(u_xlat13.x, 0.0, 1.0);
#endif
    u_xlat18 = u_xlat18 * u_xlat13.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * _DayColor.xyz;
    u_xlat13.xy = vs_TEXCOORD4.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat3.x = _Time.y * _Detail01_U_Speed + u_xlat13.x;
    u_xlat3.y = _Time.y * _Detail01_V_Speed + u_xlat13.y;
    u_xlat10_18 = texture(_NoiseTex, u_xlat3.xy).x;
    u_xlat16_2.x = vs_TEXCOORD4.w * 0.5;
    u_xlat13.xy = vs_TEXCOORD4.xy * _WaterfallSpecTex_ST.xy + _WaterfallSpecTex_ST.zw;
    u_xlat16_2.x = vs_TEXCOORD4.w * u_xlat13.y + (-u_xlat16_2.x);
    u_xlat3.x = u_xlat10_18 * _NoiselDistortionValue + u_xlat13.x;
    u_xlat3.y = u_xlat10_18 * _NoiselDistortionValue + u_xlat16_2.x;
    u_xlat10_18 = texture(_WaterfallSpecTex, u_xlat3.xy).x;
    u_xlat16_3.xyz = vec3(u_xlat10_18) * _WaterfallSpecColor.xyz;
    u_xlat13.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat10_18 = texture(_ShadowMapTexture, u_xlat13.xy).x;
    u_xlat13.x = (-_ShadowStrength) + 1.0;
    u_xlat18 = u_xlat10_18 * u_xlat13.x + _ShadowStrength;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat16_3.xyz;
    u_xlat13.xy = vec2(_Time.y * _FoamUVCoord01.z, _Time.y * _FoamUVCoord01.w);
    u_xlat13.xy = u_xlat1.xy * _FoamUVCoord01.xy + u_xlat13.xy;
    u_xlat10_18 = texture(_WaterfallTex01, u_xlat13.xy).x;
    u_xlat13.xy = vec2(_Time.y * _FoamUVCoord02.z, _Time.y * _FoamUVCoord02.w);
    u_xlat1.xy = u_xlat1.xy * _FoamUVCoord02.xy + u_xlat13.xy;
    u_xlat10_1 = texture(_WaterfallTex01, u_xlat1.xy).y;
    u_xlat16_18 = u_xlat10_18 + u_xlat10_1;
    u_xlat1.x = vs_TEXCOORD4.y * _FoamRange + _FoamOffset;
    u_xlat18 = u_xlat16_18 + u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat1.x = (-u_xlat1.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat18 * u_xlat1.x;
    u_xlat0.xyz = u_xlat1.xxx * _FoamColor.xyz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * _ES_MainLightColor.xyz;
    u_xlat16_1 = max(_LightColor0.w, 1.0);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16_1);
    u_xlat1.xyz = vs_TEXCOORD5.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat19 = u_xlat1.y * _HeigtFogParams.x;
    u_xlat3.x = u_xlat19 * -1.44269502;
    u_xlat3.x = exp2(u_xlat3.x);
    u_xlat3.x = (-u_xlat3.x) + 1.0;
    u_xlat3.x = u_xlat3.x / u_xlat19;
#ifdef UNITY_ADRENO_ES3
    u_xlatb19 = !!(0.00999999978<abs(u_xlat19));
#else
    u_xlatb19 = 0.00999999978<abs(u_xlat19);
#endif
    u_xlat16_2.x = (u_xlatb19) ? u_xlat3.x : 1.0;
    u_xlat19 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat19 = sqrt(u_xlat19);
    u_xlat3.x = u_xlat19 * _HeigtFogParams.y;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat3.x;
    u_xlat16_2.x = exp2((-u_xlat16_2.x));
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat3.x = u_xlat1.y * _HeigtFogParams2.x;
    u_xlat9.x = u_xlat3.x * -1.44269502;
    u_xlat9.x = exp2(u_xlat9.x);
    u_xlat9.x = (-u_xlat9.x) + 1.0;
    u_xlat9.x = u_xlat9.x / u_xlat3.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(0.00999999978<abs(u_xlat3.x));
#else
    u_xlatb3 = 0.00999999978<abs(u_xlat3.x);
#endif
    u_xlat16_8 = (u_xlatb3) ? u_xlat9.x : 1.0;
    u_xlat3.x = u_xlat19 * _HeigtFogParams2.y;
    u_xlat16_8 = u_xlat16_8 * u_xlat3.x;
    u_xlat16_8 = exp2((-u_xlat16_8));
    u_xlat16_2.y = (-u_xlat16_8) + 1.0;
    u_xlat16_2.xy = max(u_xlat16_2.xy, vec2(0.0, 0.0));
    u_xlat16_2.x = u_xlat16_2.y + u_xlat16_2.x;
    u_xlat3.x = u_xlat19 * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat3.x = min(max(u_xlat3.x, 0.0), 1.0);
#else
    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
#endif
    u_xlat16_8 = (-u_xlat3.x) + 2.0;
    u_xlat16_8 = u_xlat16_8 * u_xlat3.x;
    u_xlat3.x = u_xlat16_8 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat3.x = u_xlat3.x + 1.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat3.x;
    u_xlat3.x = min(u_xlat16_2.x, _HeigtFogColBase.w);
    u_xlat9.x = (-u_xlat3.x) + 1.0;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat4.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat4.xyz);
    u_xlat7.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!((-u_xlat1.x)>=u_xlat7.x);
#else
    u_xlatb1 = (-u_xlat1.x)>=u_xlat7.x;
#endif
    u_xlat7.x = u_xlat19 * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat13.x = u_xlat19 + (-_HeigtFogRamp.w);
    u_xlat13.x = u_xlat13.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat13.x = min(max(u_xlat13.x, 0.0), 1.0);
#else
    u_xlat13.x = clamp(u_xlat13.x, 0.0, 1.0);
#endif
    u_xlat19 = (-u_xlat7.x) + 2.0;
    u_xlat7.x = u_xlat19 * u_xlat7.x;
    u_xlat19 = u_xlat7.x * _HeigtFogColDelta.w;
    u_xlat1.x = (u_xlatb1) ? u_xlat19 : u_xlat7.x;
    u_xlat1.x = log2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * unity_FogColor.w;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat1.x = min(u_xlat1.x, _HeigtFogColBase.w);
    u_xlat7.x = vs_TEXCOORD5.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat16_2.x = (-u_xlat7.x) + 2.0;
    u_xlat16_2.x = u_xlat7.x * u_xlat16_2.x;
    u_xlat4.xyz = u_xlat16_2.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat5.xyz = (-u_xlat4.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat7.xyz = u_xlat13.xxx * u_xlat5.xyz + u_xlat4.xyz;
    u_xlat1.yzw = u_xlat1.xxx * u_xlat7.xyz;
    u_xlat1.x = (-u_xlat1.x) + 1.0;
    u_xlat1 = u_xlat9.xxxx * u_xlat1;
    u_xlat9.x = vs_TEXCOORD5.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat9.x = min(max(u_xlat9.x, 0.0), 1.0);
#else
    u_xlat9.x = clamp(u_xlat9.x, 0.0, 1.0);
#endif
    u_xlat9.xyz = u_xlat9.xxx * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    u_xlat7.xyz = u_xlat9.xyz * u_xlat3.xxx + u_xlat1.yzw;
    u_xlat1.xyz = u_xlat1.xxx * u_xlat0.xyz + u_xlat7.xyz;
    u_xlat0.x = vs_TEXCOORD4.y * _AlphaBottomRange + _AlphaBottomOffset;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(_BottomAlphaToggle==1.0);
#else
    u_xlatb6 = _BottomAlphaToggle==1.0;
#endif
    u_xlat0.x = (u_xlatb6) ? u_xlat0.x : 1.0;
    u_xlat6.x = vs_TEXCOORD4.y * _AlphaRange + _AlphaOffset;
    u_xlat6.x = (-u_xlat6.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat6.x = u_xlat6.x * _Opacity;
    u_xlat0.x = u_xlat0.x * u_xlat6.x;
    u_xlat1.w = u_xlat18 * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "MSAA_INTERPOLATION" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	mediump float _MHYZBias;
uniform 	vec4 hlslcc_mtx4x4_mhyJitteredVP[4];
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
vec3 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
bool u_xlatb3;
mediump vec3 u_xlat16_4;
float u_xlat5;
mediump vec4 u_xlat16_5;
vec3 u_xlat6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
float u_xlat11;
mediump float u_xlat16_12;
vec3 u_xlat13;
float u_xlat17;
bool u_xlatb17;
float u_xlat19;
float u_xlat24;
float u_xlat27;
bool u_xlatb27;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat8.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    u_xlat1.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position = u_xlat1;
    vs_TEXCOORD2.zw = u_xlat1.zw;
    vs_COLOR0 = in_COLOR0;
    u_xlat3.xyz = u_xlat8.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat17 = u_xlat3.y * _HeigtFogParams.x;
    u_xlat27 = u_xlat17 * -1.44269502;
    u_xlat27 = exp2(u_xlat27);
    u_xlat27 = (-u_xlat27) + 1.0;
    u_xlat27 = u_xlat27 / u_xlat17;
#ifdef UNITY_ADRENO_ES3
    u_xlatb17 = !!(0.00999999978<abs(u_xlat17));
#else
    u_xlatb17 = 0.00999999978<abs(u_xlat17);
#endif
    u_xlat16_4.x = (u_xlatb17) ? u_xlat27 : 1.0;
    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat17 = sqrt(u_xlat17);
    u_xlat27 = u_xlat17 * _HeigtFogParams.y;
    u_xlat16_4.x = u_xlat27 * u_xlat16_4.x;
    u_xlat16_4.x = exp2((-u_xlat16_4.x));
    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
    u_xlat27 = u_xlat3.y * _HeigtFogParams2.x;
    u_xlat5 = u_xlat27 * -1.44269502;
    u_xlat5 = exp2(u_xlat5);
    u_xlat5 = (-u_xlat5) + 1.0;
    u_xlat5 = u_xlat5 / u_xlat27;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(0.00999999978<abs(u_xlat27));
#else
    u_xlatb27 = 0.00999999978<abs(u_xlat27);
#endif
    u_xlat16_12 = (u_xlatb27) ? u_xlat5 : 1.0;
    u_xlat27 = u_xlat17 * _HeigtFogParams2.y;
    u_xlat16_12 = u_xlat27 * u_xlat16_12;
    u_xlat16_12 = exp2((-u_xlat16_12));
    u_xlat16_4.y = (-u_xlat16_12) + 1.0;
    u_xlat16_4.xy = max(u_xlat16_4.xy, vec2(0.0, 0.0));
    u_xlat16_4.x = u_xlat16_4.y + u_xlat16_4.x;
    u_xlat27 = u_xlat17 * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
    u_xlat16_12 = (-u_xlat27) + 2.0;
    u_xlat16_12 = u_xlat27 * u_xlat16_12;
    u_xlat27 = u_xlat16_12 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat27 = u_xlat27 + 1.0;
    u_xlat16_4.x = u_xlat27 * u_xlat16_4.x;
    u_xlat27 = min(u_xlat16_4.x, _HeigtFogColBase.w);
    u_xlat5 = (-u_xlat27) + 1.0;
    u_xlat13.x = _ProjectionParams.z * 0.999899983;
    u_xlat6.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat6.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat6.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat3.x = dot(u_xlat3.xyz, u_xlat6.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!((-u_xlat3.x)>=u_xlat13.x);
#else
    u_xlatb3 = (-u_xlat3.x)>=u_xlat13.x;
#endif
    u_xlat11 = u_xlat17 * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat11 = min(max(u_xlat11, 0.0), 1.0);
#else
    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
#endif
    u_xlat17 = u_xlat17 + (-_HeigtFogRamp.w);
    u_xlat17 = u_xlat17 * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat17 = min(max(u_xlat17, 0.0), 1.0);
#else
    u_xlat17 = clamp(u_xlat17, 0.0, 1.0);
#endif
    u_xlat19 = (-u_xlat11) + 2.0;
    u_xlat11 = u_xlat19 * u_xlat11;
    u_xlat19 = u_xlat11 * _HeigtFogColDelta.w;
    u_xlat3.x = (u_xlatb3) ? u_xlat19 : u_xlat11;
    u_xlat3.x = log2(u_xlat3.x);
    u_xlat3.x = u_xlat3.x * unity_FogColor.w;
    u_xlat3.x = exp2(u_xlat3.x);
    u_xlat3.x = min(u_xlat3.x, _HeigtFogColBase.w);
    u_xlat11 = u_xlat8.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat11 = min(max(u_xlat11, 0.0), 1.0);
#else
    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
#endif
    u_xlat16_4.x = (-u_xlat11) + 2.0;
    u_xlat16_4.x = u_xlat11 * u_xlat16_4.x;
    u_xlat13.xyz = u_xlat16_4.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat6.xyz = (-u_xlat13.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat13.xyz = vec3(u_xlat17) * u_xlat6.xyz + u_xlat13.xyz;
    u_xlat13.xyz = u_xlat3.xxx * u_xlat13.xyz;
    u_xlat17 = (-u_xlat3.x) + 1.0;
    vs_TEXCOORD0.w = u_xlat5 * u_xlat17;
    u_xlat3.xyz = vec3(u_xlat5) * u_xlat13.xyz;
    u_xlat17 = u_xlat8.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat17 = min(max(u_xlat17, 0.0), 1.0);
#else
    u_xlat17 = clamp(u_xlat17, 0.0, 1.0);
#endif
    vs_TEXCOORD5.xyz = u_xlat8.xyz;
    u_xlat8.xyz = vec3(u_xlat17) * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    vs_TEXCOORD0.xyz = u_xlat8.xyz * vec3(u_xlat27) + u_xlat3.xyz;
    u_xlat3.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat3.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat3.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat8.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat3.xyz = u_xlat8.xxx * u_xlat3.xyz;
    u_xlat16_4.x = u_xlat3.y * u_xlat3.y;
    u_xlat16_4.x = u_xlat3.x * u_xlat3.x + (-u_xlat16_4.x);
    u_xlat16_5 = u_xlat3.yzzx * u_xlat3.xyzz;
    u_xlat16_7.x = dot(unity_SHBr, u_xlat16_5);
    u_xlat16_7.y = dot(unity_SHBg, u_xlat16_5);
    u_xlat16_7.z = dot(unity_SHBb, u_xlat16_5);
    u_xlat16_4.xyz = unity_SHC.xyz * u_xlat16_4.xxx + u_xlat16_7.xyz;
    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat3.w = 1.0;
    u_xlat16_7.x = dot(unity_SHAr, u_xlat3);
    u_xlat16_7.y = dot(unity_SHAg, u_xlat3);
    u_xlat16_7.z = dot(unity_SHAb, u_xlat3);
    u_xlat16_4.xyz = u_xlat16_4.xyz + u_xlat16_7.xyz;
    vs_TEXCOORD1.xyz = u_xlat16_4.xyz;
    vs_TEXCOORD1.w = 1.0;
    u_xlat6.x = float(0.5);
    u_xlat6.z = float(0.5);
    u_xlat6.y = _ProjectionParams.x;
    u_xlat1.xyz = u_xlat1.xyw * u_xlat6.xyz;
    u_xlat1.w = u_xlat1.y * 0.5;
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4_mhyJitteredVP[1];
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[3] * u_xlat2.wwww + u_xlat1;
    u_xlat2.xyz = vec3(u_xlat6.z * u_xlat1.x, u_xlat6.y * u_xlat1.y, u_xlat6.z * u_xlat1.w);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    u_xlat2.w = u_xlat2.y * 0.5;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy;
    u_xlat8.x = dot(unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz);
    vs_TEXCOORD4.z = sqrt(u_xlat8.x);
    u_xlat8.x = dot(unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz);
    vs_TEXCOORD4.w = sqrt(u_xlat8.x);
    vs_TEXCOORD5.w = 0.0;
    u_xlat8.xyz = in_TANGENT0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat8.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_TANGENT0.xxx + u_xlat8.xyz;
    u_xlat0.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_TANGENT0.zzz + u_xlat8.xyz;
    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat0.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    vs_TEXCOORD6.xyz = u_xlat0.xyz;
    vs_TEXCOORD6.w = 0.0;
    vs_TEXCOORD7.xyz = u_xlat3.xyz;
    vs_TEXCOORD7.w = 0.0;
    u_xlat1.xyz = u_xlat0.yzx * u_xlat3.zxy;
    u_xlat0.xyz = u_xlat3.yzx * u_xlat0.zxy + (-u_xlat1.xyz);
    u_xlat24 = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD8.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    vs_TEXCOORD8.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	mediump vec4 _LightColor0;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	float _AlphaRange;
uniform 	float _AlphaOffset;
uniform 	float _Opacity;
uniform 	mediump float _BottomAlphaToggle;
uniform 	float _AlphaBottomRange;
uniform 	float _AlphaBottomOffset;
uniform 	vec4 _WaterfallTex01_ST;
uniform 	mediump vec4 _FoamUVCoord01;
uniform 	mediump vec4 _FoamUVCoord02;
uniform 	float _FoamRange;
uniform 	float _FoamOffset;
uniform 	vec4 _DayColor;
uniform 	vec4 _BottomColor;
uniform 	vec4 _TopColor;
uniform 	float _ColorGradientRange;
uniform 	float _ColorGradientOffset;
uniform 	vec4 _ReflectionColor_Dark;
uniform 	vec4 _ReflectionColor_Light;
uniform 	float _Normal01_U_Speed;
uniform 	vec4 _Normal01_ST;
uniform 	float _Normal01_VSpeed;
uniform 	float _Normal02_U_Speed;
uniform 	vec4 _Normal02_ST;
uniform 	float _Normal02_V_Speed;
uniform 	vec4 _DistortionIntensity;
uniform 	float _ReflectionBrightness;
uniform 	float _ReflectionIntensity;
uniform 	float _WaterFall01_Speed;
uniform 	float _Waterfall02_Speed;
uniform 	mediump vec4 _WaterfallPatternColor;
uniform 	float _Waterfall01Brightness;
uniform 	float _Waterfall02Brightness;
uniform 	float _SprayRange;
uniform 	float _SprayOffset;
uniform 	float _ShadowStrength;
uniform 	vec4 _WaterfallSpecTex_ST;
uniform 	float _Detail01_U_Speed;
uniform 	vec4 _NoiseTex_ST;
uniform 	float _Detail01_V_Speed;
uniform 	float _NoiselDistortionValue;
uniform 	mediump vec4 _WaterfallSpecColor;
uniform 	mediump vec4 _FoamColor;
uniform 	vec3 _ES_MainLightColor;
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _WaterfallTex01;
uniform lowp sampler2D _Normal01;
uniform lowp sampler2D _Normal02;
uniform lowp samplerCube _Reflection;
uniform lowp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _WaterfallSpecTex;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
in highp vec4 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
lowp vec3 u_xlat10_0;
vec4 u_xlat1;
mediump float u_xlat16_1;
lowp float u_xlat10_1;
bool u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
bool u_xlatb3;
vec3 u_xlat4;
vec3 u_xlat5;
vec3 u_xlat6;
float u_xlat7;
mediump float u_xlat16_8;
float u_xlat9;
bool u_xlatb9;
float u_xlat12;
bool u_xlatb12;
vec2 u_xlat13;
lowp float u_xlat10_13;
float u_xlat15;
float u_xlat18;
mediump float u_xlat16_18;
lowp float u_xlat10_18;
float u_xlat19;
lowp float u_xlat10_21;
void main()
{
    u_xlat0.xy = vs_TEXCOORD4.xy * _Normal01_ST.xy + _Normal01_ST.zw;
    u_xlat0.x = u_xlat0.x * vs_TEXCOORD4.z;
    u_xlat1.x = _Time.y * _Normal01_U_Speed + u_xlat0.x;
    u_xlat0.x = _Time.y * _Normal01_VSpeed;
    u_xlat1.y = u_xlat0.y * vs_TEXCOORD4.w + u_xlat0.x;
    u_xlat10_0.xyz = texture(_Normal01, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xy = vs_TEXCOORD4.xy * _Normal02_ST.xy + _Normal02_ST.zw;
    u_xlat0.xy = vec2(u_xlat0.x * vs_TEXCOORD4.z, u_xlat0.y * vs_TEXCOORD4.w);
    u_xlat1.x = _Time.y * _Normal02_U_Speed + u_xlat0.x;
    u_xlat1.y = _Time.y * _Normal02_V_Speed + u_xlat0.y;
    u_xlat10_0.xyz = texture(_Normal02, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_2.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = u_xlat16_2.xyz * _DistortionIntensity.xyz;
    u_xlat1.x = vs_TEXCOORD6.x;
    u_xlat1.y = vs_TEXCOORD8.x;
    u_xlat1.z = vs_TEXCOORD7.x;
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat3.x = vs_TEXCOORD6.y;
    u_xlat3.y = vs_TEXCOORD8.y;
    u_xlat3.z = vs_TEXCOORD7.y;
    u_xlat1.y = dot(u_xlat3.xyz, u_xlat0.xyz);
    u_xlat3.x = vs_TEXCOORD6.z;
    u_xlat3.y = vs_TEXCOORD8.z;
    u_xlat3.z = vs_TEXCOORD7.z;
    u_xlat1.z = dot(u_xlat3.xyz, u_xlat0.xyz);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
    u_xlat18 = dot((-u_xlat1.xyz), u_xlat0.xyz);
    u_xlat18 = u_xlat18 + u_xlat18;
    u_xlat0.xyz = u_xlat0.xyz * (-vec3(u_xlat18)) + (-u_xlat1.xyz);
    u_xlat10_0.x = texture(_Reflection, u_xlat0.xyz).x;
    u_xlat6.xyz = (-_ReflectionColor_Dark.xyz) + _ReflectionColor_Light.xyz;
    u_xlat0.xyz = u_xlat10_0.xxx * u_xlat6.xyz + _ReflectionColor_Dark.xyz;
    u_xlat18 = vs_TEXCOORD4.y * _ColorGradientRange + _ColorGradientOffset;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat1.xyz = (-_BottomColor.xyz) + _TopColor.xyz;
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz + _BottomColor.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.200000003, 0.200000003, 0.200000003);
    u_xlat0.xyz = u_xlat0.xyz * vec3(_ReflectionBrightness) + (-u_xlat1.xyz);
    u_xlat0.xyz = vec3(vec3(_ReflectionIntensity, _ReflectionIntensity, _ReflectionIntensity)) * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat1.xy = vs_TEXCOORD4.xy * _WaterfallTex01_ST.xy + _WaterfallTex01_ST.zw;
    u_xlat1.xy = vec2(u_xlat1.x * vs_TEXCOORD4.z, u_xlat1.y * vs_TEXCOORD4.w);
    u_xlat1.zw = _Time.yy * vec2(_WaterFall01_Speed, _Waterfall02_Speed) + u_xlat1.yy;
    u_xlat10_18 = texture(_WaterfallTex01, u_xlat1.xz).x;
    u_xlat10_13 = texture(_WaterfallTex01, u_xlat1.xw).y;
    u_xlat16_2.x = (-u_xlat10_18) + u_xlat10_13;
    u_xlat16_2.x = u_xlat10_13 * u_xlat16_2.x + u_xlat10_18;
    u_xlat18 = u_xlat10_18 * _Waterfall01Brightness;
    u_xlat3.xyz = u_xlat16_2.xxx * _WaterfallPatternColor.xyz + (-u_xlat0.xyz);
    u_xlat19 = u_xlat10_13 * _Waterfall02Brightness + (-u_xlat18);
    u_xlat13.x = u_xlat10_13 * _Waterfall02Brightness;
    u_xlat18 = u_xlat13.x * u_xlat19 + u_xlat18;
    u_xlat13.x = vs_TEXCOORD4.y * _SprayRange + _SprayOffset;
    u_xlat13.x = (-u_xlat13.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat13.x = min(max(u_xlat13.x, 0.0), 1.0);
#else
    u_xlat13.x = clamp(u_xlat13.x, 0.0, 1.0);
#endif
    u_xlat18 = u_xlat18 * u_xlat13.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * _DayColor.xyz;
    u_xlat13.xy = vs_TEXCOORD4.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat3.x = _Time.y * _Detail01_U_Speed + u_xlat13.x;
    u_xlat3.y = _Time.y * _Detail01_V_Speed + u_xlat13.y;
    u_xlat10_18 = texture(_NoiseTex, u_xlat3.xy).x;
    u_xlat16_2.x = vs_TEXCOORD4.w * 0.5;
    u_xlat13.xy = vs_TEXCOORD4.xy * _WaterfallSpecTex_ST.xy + _WaterfallSpecTex_ST.zw;
    u_xlat16_2.x = vs_TEXCOORD4.w * u_xlat13.y + (-u_xlat16_2.x);
    u_xlat3.x = u_xlat10_18 * _NoiselDistortionValue + u_xlat13.x;
    u_xlat3.y = u_xlat10_18 * _NoiselDistortionValue + u_xlat16_2.x;
    u_xlat10_18 = texture(_WaterfallSpecTex, u_xlat3.xy).x;
    u_xlat16_3.xyz = vec3(u_xlat10_18) * _WaterfallSpecColor.xyz;
    u_xlat18 = (-_ShadowStrength) + 1.0;
    u_xlat13.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat10_21 = texture(_ShadowMapTexture, u_xlat13.xy).x;
    u_xlat13.x = texture(_CameraDepthTextureScaled, u_xlat13.xy).x;
    u_xlat13.x = u_xlat13.x * _ProjectionParams.z + (-vs_TEXCOORD3.w);
    u_xlat18 = u_xlat10_21 * u_xlat18 + _ShadowStrength;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat16_3.xyz;
    u_xlat3.xy = vec2(_Time.y * _FoamUVCoord01.z, _Time.y * _FoamUVCoord01.w);
    u_xlat3.xy = u_xlat1.xy * _FoamUVCoord01.xy + u_xlat3.xy;
    u_xlat10_18 = texture(_WaterfallTex01, u_xlat3.xy).x;
    u_xlat3.xy = vec2(_Time.y * _FoamUVCoord02.z, _Time.y * _FoamUVCoord02.w);
    u_xlat1.xy = u_xlat1.xy * _FoamUVCoord02.xy + u_xlat3.xy;
    u_xlat10_1 = texture(_WaterfallTex01, u_xlat1.xy).y;
    u_xlat16_18 = u_xlat10_18 + u_xlat10_1;
    u_xlat1.x = vs_TEXCOORD4.y * _FoamRange + _FoamOffset;
    u_xlat18 = u_xlat16_18 + u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat1.x = (-u_xlat1.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat18 * u_xlat1.x;
    u_xlat0.xyz = u_xlat1.xxx * _FoamColor.xyz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * _ES_MainLightColor.xyz;
    u_xlat16_1 = max(_LightColor0.w, 1.0);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16_1);
    u_xlat1.xyw = vs_TEXCOORD5.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat3.x = u_xlat1.y * _HeigtFogParams.x;
    u_xlat9 = u_xlat3.x * -1.44269502;
    u_xlat9 = exp2(u_xlat9);
    u_xlat9 = (-u_xlat9) + 1.0;
    u_xlat9 = u_xlat9 / u_xlat3.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(0.00999999978<abs(u_xlat3.x));
#else
    u_xlatb3 = 0.00999999978<abs(u_xlat3.x);
#endif
    u_xlat16_2.x = (u_xlatb3) ? u_xlat9 : 1.0;
    u_xlat3.x = dot(u_xlat1.xyw, u_xlat1.xyw);
    u_xlat3.x = sqrt(u_xlat3.x);
    u_xlat9 = u_xlat3.x * _HeigtFogParams.y;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat9;
    u_xlat16_2.x = exp2((-u_xlat16_2.x));
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat9 = u_xlat1.y * _HeigtFogParams2.x;
    u_xlat15 = u_xlat9 * -1.44269502;
    u_xlat15 = exp2(u_xlat15);
    u_xlat15 = (-u_xlat15) + 1.0;
    u_xlat15 = u_xlat15 / u_xlat9;
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(0.00999999978<abs(u_xlat9));
#else
    u_xlatb9 = 0.00999999978<abs(u_xlat9);
#endif
    u_xlat16_8 = (u_xlatb9) ? u_xlat15 : 1.0;
    u_xlat9 = u_xlat3.x * _HeigtFogParams2.y;
    u_xlat16_8 = u_xlat16_8 * u_xlat9;
    u_xlat16_8 = exp2((-u_xlat16_8));
    u_xlat16_2.y = (-u_xlat16_8) + 1.0;
    u_xlat16_2.xy = max(u_xlat16_2.xy, vec2(0.0, 0.0));
    u_xlat16_2.x = u_xlat16_2.y + u_xlat16_2.x;
    u_xlat9 = u_xlat3.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat9 = min(max(u_xlat9, 0.0), 1.0);
#else
    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
#endif
    u_xlat16_8 = (-u_xlat9) + 2.0;
    u_xlat16_8 = u_xlat16_8 * u_xlat9;
    u_xlat9 = u_xlat16_8 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat9 = u_xlat9 + 1.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat9;
    u_xlat9 = min(u_xlat16_2.x, _HeigtFogColBase.w);
    u_xlat15 = (-u_xlat9) + 1.0;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat4.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat1.x = dot(u_xlat1.xyw, u_xlat4.xyz);
    u_xlat7 = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!((-u_xlat1.x)>=u_xlat7);
#else
    u_xlatb1 = (-u_xlat1.x)>=u_xlat7;
#endif
    u_xlat7 = u_xlat3.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7 = min(max(u_xlat7, 0.0), 1.0);
#else
    u_xlat7 = clamp(u_xlat7, 0.0, 1.0);
#endif
    u_xlat19 = u_xlat3.x + (-_HeigtFogRamp.w);
    u_xlat19 = u_xlat19 * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat19 = min(max(u_xlat19, 0.0), 1.0);
#else
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
#endif
    u_xlat3.x = (-u_xlat7) + 2.0;
    u_xlat7 = u_xlat7 * u_xlat3.x;
    u_xlat3.x = u_xlat7 * _HeigtFogColDelta.w;
    u_xlat1.x = (u_xlatb1) ? u_xlat3.x : u_xlat7;
    u_xlat1.x = log2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * unity_FogColor.w;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat1.x = min(u_xlat1.x, _HeigtFogColBase.w);
    u_xlat7 = vs_TEXCOORD5.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat7 = min(max(u_xlat7, 0.0), 1.0);
#else
    u_xlat7 = clamp(u_xlat7, 0.0, 1.0);
#endif
    u_xlat16_2.x = (-u_xlat7) + 2.0;
    u_xlat16_2.x = u_xlat7 * u_xlat16_2.x;
    u_xlat4.xyz = u_xlat16_2.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat5.xyz = (-u_xlat4.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat4.xyz = vec3(u_xlat19) * u_xlat5.xyz + u_xlat4.xyz;
    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
    u_xlat1.x = (-u_xlat1.x) + 1.0;
    u_xlat1.x = u_xlat15 * u_xlat1.x;
    u_xlat3.xzw = vec3(u_xlat15) * u_xlat4.xyz;
    u_xlat7 = vs_TEXCOORD5.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat7 = min(max(u_xlat7, 0.0), 1.0);
#else
    u_xlat7 = clamp(u_xlat7, 0.0, 1.0);
#endif
    u_xlat4.xyz = vec3(u_xlat7) * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    u_xlat3.xyz = u_xlat4.xyz * vec3(u_xlat9) + u_xlat3.xzw;
    u_xlat2.xyz = u_xlat1.xxx * u_xlat0.xyz + u_xlat3.xyz;
    u_xlat0.x = u_xlat13.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat6.x = u_xlat13.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat12 = (-u_xlat6.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat12 + u_xlat6.x;
    u_xlat6.x = vs_TEXCOORD4.y * _AlphaRange + _AlphaOffset;
    u_xlat6.x = (-u_xlat6.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat6.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _Opacity;
    u_xlat6.x = vs_TEXCOORD4.y * _AlphaBottomRange + _AlphaBottomOffset;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_BottomAlphaToggle==1.0);
#else
    u_xlatb12 = _BottomAlphaToggle==1.0;
#endif
    u_xlat6.x = (u_xlatb12) ? u_xlat6.x : 1.0;
    u_xlat0.x = u_xlat6.x * u_xlat0.x;
    u_xlat2.w = u_xlat18 * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.w = min(max(u_xlat2.w, 0.0), 1.0);
#else
    u_xlat2.w = clamp(u_xlat2.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat2;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "MSAA_INTERPOLATION" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	mediump float _MHYZBias;
uniform 	vec4 hlslcc_mtx4x4_mhyJitteredVP[4];
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
mediump vec4 u_xlat16_3;
bool u_xlatb3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat6;
mediump vec3 u_xlat16_7;
float u_xlat11;
mediump float u_xlat16_12;
float u_xlat18;
bool u_xlatb18;
float u_xlat19;
float u_xlat24;
bool u_xlatb24;
float u_xlat27;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat2.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    gl_Position = u_xlat2;
    vs_TEXCOORD2.zw = u_xlat2.zw;
    vs_COLOR0 = in_COLOR0;
    u_xlat3.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat24 = u_xlat3.y * _HeigtFogParams.x;
    u_xlat18 = u_xlat24 * -1.44269502;
    u_xlat18 = exp2(u_xlat18);
    u_xlat18 = (-u_xlat18) + 1.0;
    u_xlat18 = u_xlat18 / u_xlat24;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(0.00999999978<abs(u_xlat24));
#else
    u_xlatb24 = 0.00999999978<abs(u_xlat24);
#endif
    u_xlat16_4.x = (u_xlatb24) ? u_xlat18 : 1.0;
    u_xlat24 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat24 = sqrt(u_xlat24);
    u_xlat18 = u_xlat24 * _HeigtFogParams.y;
    u_xlat16_4.x = u_xlat18 * u_xlat16_4.x;
    u_xlat16_4.x = exp2((-u_xlat16_4.x));
    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
    u_xlat18 = u_xlat3.y * _HeigtFogParams2.x;
    u_xlat27 = u_xlat18 * -1.44269502;
    u_xlat27 = exp2(u_xlat27);
    u_xlat27 = (-u_xlat27) + 1.0;
    u_xlat27 = u_xlat27 / u_xlat18;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(0.00999999978<abs(u_xlat18));
#else
    u_xlatb18 = 0.00999999978<abs(u_xlat18);
#endif
    u_xlat16_12 = (u_xlatb18) ? u_xlat27 : 1.0;
    u_xlat18 = u_xlat24 * _HeigtFogParams2.y;
    u_xlat16_12 = u_xlat18 * u_xlat16_12;
    u_xlat16_12 = exp2((-u_xlat16_12));
    u_xlat16_4.y = (-u_xlat16_12) + 1.0;
    u_xlat16_4.xy = max(u_xlat16_4.xy, vec2(0.0, 0.0));
    u_xlat16_4.x = u_xlat16_4.y + u_xlat16_4.x;
    u_xlat18 = u_xlat24 * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat16_12 = (-u_xlat18) + 2.0;
    u_xlat16_12 = u_xlat18 * u_xlat16_12;
    u_xlat18 = u_xlat16_12 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat18 = u_xlat18 + 1.0;
    u_xlat16_4.x = u_xlat18 * u_xlat16_4.x;
    u_xlat18 = min(u_xlat16_4.x, _HeigtFogColBase.w);
    u_xlat27 = (-u_xlat18) + 1.0;
    u_xlat5.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat5.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat5.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat3.x = dot(u_xlat3.xyz, u_xlat5.xyz);
    u_xlat11 = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!((-u_xlat3.x)>=u_xlat11);
#else
    u_xlatb3 = (-u_xlat3.x)>=u_xlat11;
#endif
    u_xlat11 = u_xlat24 * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat11 = min(max(u_xlat11, 0.0), 1.0);
#else
    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
#endif
    u_xlat24 = u_xlat24 + (-_HeigtFogRamp.w);
    u_xlat24 = u_xlat24 * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat19 = (-u_xlat11) + 2.0;
    u_xlat11 = u_xlat19 * u_xlat11;
    u_xlat19 = u_xlat11 * _HeigtFogColDelta.w;
    u_xlat3.x = (u_xlatb3) ? u_xlat19 : u_xlat11;
    u_xlat3.x = log2(u_xlat3.x);
    u_xlat3.x = u_xlat3.x * unity_FogColor.w;
    u_xlat3.x = exp2(u_xlat3.x);
    u_xlat3.x = min(u_xlat3.x, _HeigtFogColBase.w);
    u_xlat11 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat11 = min(max(u_xlat11, 0.0), 1.0);
#else
    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
#endif
    u_xlat16_4.x = (-u_xlat11) + 2.0;
    u_xlat16_4.x = u_xlat11 * u_xlat16_4.x;
    u_xlat5.xyz = u_xlat16_4.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat6.xyz = (-u_xlat5.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat5.xyz = vec3(u_xlat24) * u_xlat6.xyz + u_xlat5.xyz;
    u_xlat5.xyz = u_xlat3.xxx * u_xlat5.xyz;
    u_xlat24 = (-u_xlat3.x) + 1.0;
    vs_TEXCOORD0.w = u_xlat27 * u_xlat24;
    u_xlat3.xyz = vec3(u_xlat27) * u_xlat5.xyz;
    u_xlat24 = u_xlat0.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    u_xlat0.xyz = vec3(u_xlat24) * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    vs_TEXCOORD0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat3.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat0.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    u_xlat16_4.x = u_xlat0.y * u_xlat0.y;
    u_xlat16_4.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_4.x);
    u_xlat16_3 = u_xlat0.yzzx * u_xlat0.xyzz;
    u_xlat16_7.x = dot(unity_SHBr, u_xlat16_3);
    u_xlat16_7.y = dot(unity_SHBg, u_xlat16_3);
    u_xlat16_7.z = dot(unity_SHBb, u_xlat16_3);
    u_xlat16_4.xyz = unity_SHC.xyz * u_xlat16_4.xxx + u_xlat16_7.xyz;
    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat0.w = 1.0;
    u_xlat16_7.x = dot(unity_SHAr, u_xlat0);
    u_xlat16_7.y = dot(unity_SHAg, u_xlat0);
    u_xlat16_7.z = dot(unity_SHAb, u_xlat0);
    u_xlat16_4.xyz = u_xlat16_4.xyz + u_xlat16_7.xyz;
    vs_TEXCOORD1.xyz = u_xlat16_4.xyz;
    vs_TEXCOORD1.w = 1.0;
    u_xlat5.x = float(0.5);
    u_xlat5.z = float(0.5);
    u_xlat5.y = _ProjectionParams.x;
    u_xlat2.xyz = u_xlat2.xyw * u_xlat5.xyz;
    u_xlat2.w = u_xlat2.y * 0.5;
    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4_mhyJitteredVP[1];
    u_xlat2 = hlslcc_mtx4x4_mhyJitteredVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4_mhyJitteredVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat2.xyz = vec3(u_xlat5.z * u_xlat1.x, u_xlat5.y * u_xlat1.y, u_xlat5.z * u_xlat1.w);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    u_xlat2.w = u_xlat2.y * 0.5;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat24 = dot(hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, hlslcc_mtx4x4unity_ObjectToWorld[0].xyz);
    vs_TEXCOORD4.z = sqrt(u_xlat24);
    u_xlat24 = dot(hlslcc_mtx4x4unity_ObjectToWorld[1].xyz, hlslcc_mtx4x4unity_ObjectToWorld[1].xyz);
    vs_TEXCOORD4.w = sqrt(u_xlat24);
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD5.w = 0.0;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
    vs_TEXCOORD6.xyz = u_xlat1.xyz;
    vs_TEXCOORD6.w = 0.0;
    vs_TEXCOORD7.xyz = u_xlat0.xyz;
    vs_TEXCOORD7.w = 0.0;
    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
    u_xlat24 = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD8.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    vs_TEXCOORD8.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _LightColor0;
uniform 	float _AlphaRange;
uniform 	float _AlphaOffset;
uniform 	float _Opacity;
uniform 	mediump float _BottomAlphaToggle;
uniform 	float _AlphaBottomRange;
uniform 	float _AlphaBottomOffset;
uniform 	vec4 _WaterfallTex01_ST;
uniform 	mediump vec4 _FoamUVCoord01;
uniform 	mediump vec4 _FoamUVCoord02;
uniform 	float _FoamRange;
uniform 	float _FoamOffset;
uniform 	vec4 _DayColor;
uniform 	vec4 _BottomColor;
uniform 	vec4 _TopColor;
uniform 	float _ColorGradientRange;
uniform 	float _ColorGradientOffset;
uniform 	vec4 _ReflectionColor_Dark;
uniform 	vec4 _ReflectionColor_Light;
uniform 	float _Normal01_U_Speed;
uniform 	vec4 _Normal01_ST;
uniform 	float _Normal01_VSpeed;
uniform 	float _Normal02_U_Speed;
uniform 	vec4 _Normal02_ST;
uniform 	float _Normal02_V_Speed;
uniform 	vec4 _DistortionIntensity;
uniform 	float _ReflectionBrightness;
uniform 	float _ReflectionIntensity;
uniform 	float _WaterFall01_Speed;
uniform 	float _Waterfall02_Speed;
uniform 	mediump vec4 _WaterfallPatternColor;
uniform 	float _Waterfall01Brightness;
uniform 	float _Waterfall02Brightness;
uniform 	float _SprayRange;
uniform 	float _SprayOffset;
uniform 	float _ShadowStrength;
uniform 	vec4 _WaterfallSpecTex_ST;
uniform 	float _Detail01_U_Speed;
uniform 	vec4 _NoiseTex_ST;
uniform 	float _Detail01_V_Speed;
uniform 	float _NoiselDistortionValue;
uniform 	mediump vec4 _WaterfallSpecColor;
uniform 	mediump vec4 _FoamColor;
uniform 	vec3 _ES_MainLightColor;
uniform lowp sampler2D _WaterfallTex01;
uniform lowp sampler2D _Normal01;
uniform lowp sampler2D _Normal02;
uniform lowp samplerCube _Reflection;
uniform lowp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _WaterfallSpecTex;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
in highp vec4 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
bvec2 u_xlatb0;
vec4 u_xlat1;
lowp float u_xlat10_1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
vec4 u_xlat3;
vec3 u_xlat4;
lowp vec3 u_xlat10_4;
vec3 u_xlat5;
vec3 u_xlat6;
mediump vec3 u_xlat16_7;
float u_xlat8;
vec3 u_xlat9;
vec3 u_xlat10;
mediump float u_xlat16_15;
vec2 u_xlat16;
mediump float u_xlat16_16;
lowp float u_xlat10_16;
bool u_xlatb16;
float u_xlat18;
float u_xlat24;
mediump float u_xlat16_24;
lowp float u_xlat10_24;
bool u_xlatb24;
float u_xlat25;
lowp float u_xlat10_25;
bool u_xlatb25;
float u_xlat26;
bool u_xlatb26;
float u_xlat27;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.x = vs_TEXCOORD4.y * _AlphaRange + _AlphaOffset;
    u_xlat8 = vs_TEXCOORD4.y * _AlphaBottomRange + _AlphaBottomOffset;
#ifdef UNITY_ADRENO_ES3
    u_xlat8 = min(max(u_xlat8, 0.0), 1.0);
#else
    u_xlat8 = clamp(u_xlat8, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(_BottomAlphaToggle==1.0);
#else
    u_xlatb16 = _BottomAlphaToggle==1.0;
#endif
    u_xlat8 = (u_xlatb16) ? u_xlat8 : 1.0;
    u_xlat16.xy = vs_TEXCOORD4.xy * _WaterfallTex01_ST.xy + _WaterfallTex01_ST.zw;
    u_xlat1.xy = vec2(u_xlat16.x * vs_TEXCOORD4.z, u_xlat16.y * vs_TEXCOORD4.w);
    u_xlat16.xy = vec2(_Time.y * _FoamUVCoord01.z, _Time.y * _FoamUVCoord01.w);
    u_xlat16.xy = u_xlat1.xy * _FoamUVCoord01.xy + u_xlat16.xy;
    u_xlat2.xy = vec2(_Time.y * _FoamUVCoord02.z, _Time.y * _FoamUVCoord02.w);
    u_xlat2.xy = u_xlat1.xy * _FoamUVCoord02.xy + u_xlat2.xy;
    u_xlat18 = vs_TEXCOORD4.y * _FoamRange + _FoamOffset;
    u_xlat10_16 = texture(_WaterfallTex01, u_xlat16.xy).x;
    u_xlat10_24 = texture(_WaterfallTex01, u_xlat2.xy).y;
    u_xlat16_16 = u_xlat10_24 + u_xlat10_16;
    u_xlat16.x = u_xlat18 + u_xlat16_16;
#ifdef UNITY_ADRENO_ES3
    u_xlat16.x = min(max(u_xlat16.x, 0.0), 1.0);
#else
    u_xlat16.x = clamp(u_xlat16.x, 0.0, 1.0);
#endif
    u_xlat24 = vs_TEXCOORD4.y * _ColorGradientRange + _ColorGradientOffset;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat2.xyw = (-_BottomColor.xyz) + _TopColor.xyz;
    u_xlat2.xyw = vec3(u_xlat24) * u_xlat2.xyw + _BottomColor.xyz;
    u_xlat3.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat24 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat3.xyz = vec3(u_xlat24) * u_xlat3.xyz;
    u_xlat4.xy = vs_TEXCOORD4.xy * _Normal01_ST.xy + _Normal01_ST.zw;
    u_xlat24 = _Time.y * _Normal01_VSpeed;
    u_xlat27 = u_xlat4.x * vs_TEXCOORD4.z;
    u_xlat5.x = _Time.y * _Normal01_U_Speed + u_xlat27;
    u_xlat5.y = u_xlat4.y * vs_TEXCOORD4.w + u_xlat24;
    u_xlat4.xy = vs_TEXCOORD4.xy * _Normal02_ST.xy + _Normal02_ST.zw;
    u_xlat4.xy = vec2(u_xlat4.x * vs_TEXCOORD4.z, u_xlat4.y * vs_TEXCOORD4.w);
    u_xlat6.x = _Time.y * _Normal02_U_Speed + u_xlat4.x;
    u_xlat6.y = _Time.y * _Normal02_V_Speed + u_xlat4.y;
    u_xlat10_4.xyz = texture(_Normal01, u_xlat5.xy).xyz;
    u_xlat16_7.xyz = u_xlat10_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat10_4.xyz = texture(_Normal02, u_xlat6.xy).xyz;
    u_xlat16_7.xyz = u_xlat10_4.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_7.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat4.xyz = u_xlat16_7.xyz * _DistortionIntensity.xyz;
    u_xlat5.x = vs_TEXCOORD6.x;
    u_xlat5.y = vs_TEXCOORD8.x;
    u_xlat5.z = vs_TEXCOORD7.x;
    u_xlat5.x = dot(u_xlat5.xyz, u_xlat4.xyz);
    u_xlat6.x = vs_TEXCOORD6.y;
    u_xlat6.y = vs_TEXCOORD8.y;
    u_xlat6.z = vs_TEXCOORD7.y;
    u_xlat5.y = dot(u_xlat6.xyz, u_xlat4.xyz);
    u_xlat6.x = vs_TEXCOORD6.z;
    u_xlat6.y = vs_TEXCOORD8.z;
    u_xlat6.z = vs_TEXCOORD7.z;
    u_xlat5.z = dot(u_xlat6.xyz, u_xlat4.xyz);
    u_xlat24 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat4.xyz = vec3(u_xlat24) * u_xlat5.xyz;
    u_xlat24 = dot((-u_xlat3.xyz), u_xlat4.xyz);
    u_xlat24 = u_xlat24 + u_xlat24;
    u_xlat3.xyz = u_xlat4.xyz * (-vec3(u_xlat24)) + (-u_xlat3.xyz);
    u_xlat10_24 = texture(_Reflection, u_xlat3.xyz).x;
    u_xlat3.xyz = (-_ReflectionColor_Dark.xyz) + _ReflectionColor_Light.xyz;
    u_xlat3.xyz = vec3(u_xlat10_24) * u_xlat3.xyz + _ReflectionColor_Dark.xyz;
    u_xlat4.xyz = u_xlat2.xyw * vec3(0.200000003, 0.200000003, 0.200000003);
    u_xlat2.xyw = u_xlat2.xyw * u_xlat3.xyz;
    u_xlat2.xyw = u_xlat2.xyw * vec3(_ReflectionBrightness) + (-u_xlat4.xyz);
    u_xlat2.xyw = vec3(vec3(_ReflectionIntensity, _ReflectionIntensity, _ReflectionIntensity)) * u_xlat2.xyw + u_xlat4.xyz;
    u_xlat1.zw = _Time.yy * vec2(_WaterFall01_Speed, _Waterfall02_Speed) + u_xlat1.yy;
    u_xlat10_24 = texture(_WaterfallTex01, u_xlat1.xz).x;
    u_xlat10_1 = texture(_WaterfallTex01, u_xlat1.xw).y;
    u_xlat16_7.x = (-u_xlat10_24) + u_xlat10_1;
    u_xlat16_7.x = u_xlat10_1 * u_xlat16_7.x + u_xlat10_24;
    u_xlat9.x = u_xlat10_1 * _Waterfall02Brightness;
    u_xlat24 = u_xlat10_24 * _Waterfall01Brightness;
    u_xlat1.x = u_xlat10_1 * _Waterfall02Brightness + (-u_xlat24);
    u_xlat24 = u_xlat9.x * u_xlat1.x + u_xlat24;
    u_xlat1.x = vs_TEXCOORD4.y * _SprayRange + _SprayOffset;
    u_xlat1.x = (-u_xlat1.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat24 = u_xlat24 * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat16_7.xxx * _WaterfallPatternColor.xyz + (-u_xlat2.xyw);
    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz + u_xlat2.xyw;
    u_xlat2.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat10_24 = texture(_ShadowMapTexture, u_xlat2.xy).x;
    u_xlat25 = (-_ShadowStrength) + 1.0;
    u_xlat24 = u_xlat10_24 * u_xlat25 + _ShadowStrength;
    u_xlat2.xy = vs_TEXCOORD4.xy * _WaterfallSpecTex_ST.xy + _WaterfallSpecTex_ST.zw;
    u_xlat16_7.x = vs_TEXCOORD4.w * 0.5;
    u_xlat16_7.x = vs_TEXCOORD4.w * u_xlat2.y + (-u_xlat16_7.x);
    u_xlat10.xz = vs_TEXCOORD4.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat3.x = _Time.y * _Detail01_U_Speed + u_xlat10.x;
    u_xlat3.y = _Time.y * _Detail01_V_Speed + u_xlat10.z;
    u_xlat10_25 = texture(_NoiseTex, u_xlat3.xy).x;
    u_xlat2.x = u_xlat10_25 * _NoiselDistortionValue + u_xlat2.x;
    u_xlat2.y = u_xlat10_25 * _NoiselDistortionValue + u_xlat16_7.x;
    u_xlat10_25 = texture(_WaterfallSpecTex, u_xlat2.xy).x;
    u_xlat16_2.xyw = vec3(u_xlat10_25) * _WaterfallSpecColor.xyz;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x * _Opacity;
    u_xlat0.x = u_xlat8 * u_xlat0.x;
    u_xlat3.w = u_xlat16.x * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat3.w = min(max(u_xlat3.w, 0.0), 1.0);
#else
    u_xlat3.w = clamp(u_xlat3.w, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat1.xyz * _DayColor.xyz;
    u_xlat0.xyw = u_xlat1.xyz * vec3(u_xlat24) + u_xlat16_2.xyw;
    u_xlat1.x = (-u_xlat18) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat16.x = u_xlat16.x * u_xlat1.x;
    u_xlat0.xyz = u_xlat16.xxx * _FoamColor.xyz + u_xlat0.xyw;
    u_xlat0.xyz = u_xlat0.xyz * _ES_MainLightColor.xyz;
    u_xlat16_24 = max(_LightColor0.w, 1.0);
    u_xlat0.xyz = vec3(u_xlat16_24) * u_xlat0.xyz;
    u_xlat1.xyz = vs_TEXCOORD5.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat24 = dot(u_xlat1.xyz, u_xlat2.xyz);
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlat9.y = u_xlat1.x * _HeigtFogParams.y;
    u_xlat25 = u_xlat1.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat25 = min(max(u_xlat25, 0.0), 1.0);
#else
    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
#endif
    u_xlat2.x = (-u_xlat25) + 2.0;
    u_xlat25 = u_xlat25 * u_xlat2.x;
    u_xlat2.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!((-u_xlat24)>=u_xlat2.x);
#else
    u_xlatb24 = (-u_xlat24)>=u_xlat2.x;
#endif
    u_xlat2.x = u_xlat25 * _HeigtFogColDelta.w;
    u_xlat24 = (u_xlatb24) ? u_xlat2.x : u_xlat25;
    u_xlat24 = log2(u_xlat24);
    u_xlat24 = u_xlat24 * unity_FogColor.w;
    u_xlat24 = exp2(u_xlat24);
    u_xlat24 = min(u_xlat24, _HeigtFogColBase.w);
    u_xlat25 = vs_TEXCOORD5.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat25 = min(max(u_xlat25, 0.0), 1.0);
#else
    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
#endif
    u_xlat16_7.x = (-u_xlat25) + 2.0;
    u_xlat16_7.x = u_xlat25 * u_xlat16_7.x;
    u_xlat2.xyz = u_xlat16_7.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat25 = u_xlat1.x + (-_HeigtFogRamp.w);
    u_xlat25 = u_xlat25 * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat25 = min(max(u_xlat25, 0.0), 1.0);
#else
    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
#endif
    u_xlat4.xyz = (-u_xlat2.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat2.xyz = vec3(u_xlat25) * u_xlat4.xyz + u_xlat2.xyz;
    u_xlat25 = u_xlat1.y * _HeigtFogParams.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb26 = !!(0.00999999978<abs(u_xlat25));
#else
    u_xlatb26 = 0.00999999978<abs(u_xlat25);
#endif
    u_xlat4.x = u_xlat25 * -1.44269502;
    u_xlat4.x = exp2(u_xlat4.x);
    u_xlat4.x = (-u_xlat4.x) + 1.0;
    u_xlat25 = u_xlat4.x / u_xlat25;
    u_xlat16_7.x = (u_xlatb26) ? u_xlat25 : 1.0;
    u_xlat9.x = u_xlat1.y * _HeigtFogParams2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb25 = !!(0.00999999978<abs(u_xlat9.x));
#else
    u_xlatb25 = 0.00999999978<abs(u_xlat9.x);
#endif
    u_xlat26 = u_xlat9.x * -1.44269502;
    u_xlat26 = exp2(u_xlat26);
    u_xlat26 = (-u_xlat26) + 1.0;
    u_xlat9.x = u_xlat26 / u_xlat9.x;
    u_xlat16_7.y = (u_xlatb25) ? u_xlat9.x : 1.0;
    u_xlat9.x = u_xlat1.x * _HeigtFogParams2.y;
    u_xlat16_7.xy = u_xlat9.yx * u_xlat16_7.xy;
    u_xlat16_7.x = exp2((-u_xlat16_7.x));
    u_xlat16_7.x = (-u_xlat16_7.x) + 1.0;
    u_xlat16_15 = exp2((-u_xlat16_7.y));
    u_xlat16_7.y = (-u_xlat16_15) + 1.0;
    u_xlat16_7.xy = max(u_xlat16_7.xy, vec2(0.0, 0.0));
    u_xlat16_7.x = u_xlat16_7.y + u_xlat16_7.x;
    u_xlat1.x = u_xlat1.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat16_15 = (-u_xlat1.x) + 2.0;
    u_xlat16_15 = u_xlat1.x * u_xlat16_15;
    u_xlat1.x = u_xlat16_15 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat1.x = u_xlat1.x + 1.0;
    u_xlat16_7.x = u_xlat1.x * u_xlat16_7.x;
    u_xlat1.x = min(u_xlat16_7.x, _HeigtFogColBase.w);
    u_xlat9.x = vs_TEXCOORD5.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat9.x = min(max(u_xlat9.x, 0.0), 1.0);
#else
    u_xlat9.x = clamp(u_xlat9.x, 0.0, 1.0);
#endif
    u_xlat9.xyz = u_xlat9.xxx * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz;
    u_xlat26 = (-u_xlat1.x) + 1.0;
    u_xlat2.xyz = vec3(u_xlat26) * u_xlat2.xyz;
    u_xlat1.xyz = u_xlat9.xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat24 = (-u_xlat24) + 1.0;
    u_xlat24 = u_xlat26 * u_xlat24;
    u_xlat3.xyz = vec3(u_xlat24) * u_xlat0.xyz + u_xlat1.xyz;
    SV_Target0 = u_xlat3;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "MSAA_INTERPOLATION" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	mediump float _MHYZBias;
uniform 	vec4 hlslcc_mtx4x4_mhyJitteredVP[4];
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
mediump vec4 u_xlat16_3;
bool u_xlatb3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat6;
mediump vec3 u_xlat16_7;
float u_xlat11;
mediump float u_xlat16_12;
float u_xlat18;
bool u_xlatb18;
float u_xlat19;
float u_xlat24;
bool u_xlatb24;
float u_xlat27;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat2.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    gl_Position = u_xlat2;
    vs_TEXCOORD2.zw = u_xlat2.zw;
    vs_COLOR0 = in_COLOR0;
    u_xlat3.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat24 = u_xlat3.y * _HeigtFogParams.x;
    u_xlat18 = u_xlat24 * -1.44269502;
    u_xlat18 = exp2(u_xlat18);
    u_xlat18 = (-u_xlat18) + 1.0;
    u_xlat18 = u_xlat18 / u_xlat24;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(0.00999999978<abs(u_xlat24));
#else
    u_xlatb24 = 0.00999999978<abs(u_xlat24);
#endif
    u_xlat16_4.x = (u_xlatb24) ? u_xlat18 : 1.0;
    u_xlat24 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat24 = sqrt(u_xlat24);
    u_xlat18 = u_xlat24 * _HeigtFogParams.y;
    u_xlat16_4.x = u_xlat18 * u_xlat16_4.x;
    u_xlat16_4.x = exp2((-u_xlat16_4.x));
    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
    u_xlat18 = u_xlat3.y * _HeigtFogParams2.x;
    u_xlat27 = u_xlat18 * -1.44269502;
    u_xlat27 = exp2(u_xlat27);
    u_xlat27 = (-u_xlat27) + 1.0;
    u_xlat27 = u_xlat27 / u_xlat18;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(0.00999999978<abs(u_xlat18));
#else
    u_xlatb18 = 0.00999999978<abs(u_xlat18);
#endif
    u_xlat16_12 = (u_xlatb18) ? u_xlat27 : 1.0;
    u_xlat18 = u_xlat24 * _HeigtFogParams2.y;
    u_xlat16_12 = u_xlat18 * u_xlat16_12;
    u_xlat16_12 = exp2((-u_xlat16_12));
    u_xlat16_4.y = (-u_xlat16_12) + 1.0;
    u_xlat16_4.xy = max(u_xlat16_4.xy, vec2(0.0, 0.0));
    u_xlat16_4.x = u_xlat16_4.y + u_xlat16_4.x;
    u_xlat18 = u_xlat24 * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat16_12 = (-u_xlat18) + 2.0;
    u_xlat16_12 = u_xlat18 * u_xlat16_12;
    u_xlat18 = u_xlat16_12 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat18 = u_xlat18 + 1.0;
    u_xlat16_4.x = u_xlat18 * u_xlat16_4.x;
    u_xlat18 = min(u_xlat16_4.x, _HeigtFogColBase.w);
    u_xlat27 = (-u_xlat18) + 1.0;
    u_xlat5.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat5.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat5.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat3.x = dot(u_xlat3.xyz, u_xlat5.xyz);
    u_xlat11 = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!((-u_xlat3.x)>=u_xlat11);
#else
    u_xlatb3 = (-u_xlat3.x)>=u_xlat11;
#endif
    u_xlat11 = u_xlat24 * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat11 = min(max(u_xlat11, 0.0), 1.0);
#else
    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
#endif
    u_xlat24 = u_xlat24 + (-_HeigtFogRamp.w);
    u_xlat24 = u_xlat24 * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat19 = (-u_xlat11) + 2.0;
    u_xlat11 = u_xlat19 * u_xlat11;
    u_xlat19 = u_xlat11 * _HeigtFogColDelta.w;
    u_xlat3.x = (u_xlatb3) ? u_xlat19 : u_xlat11;
    u_xlat3.x = log2(u_xlat3.x);
    u_xlat3.x = u_xlat3.x * unity_FogColor.w;
    u_xlat3.x = exp2(u_xlat3.x);
    u_xlat3.x = min(u_xlat3.x, _HeigtFogColBase.w);
    u_xlat11 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat11 = min(max(u_xlat11, 0.0), 1.0);
#else
    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
#endif
    u_xlat16_4.x = (-u_xlat11) + 2.0;
    u_xlat16_4.x = u_xlat11 * u_xlat16_4.x;
    u_xlat5.xyz = u_xlat16_4.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat6.xyz = (-u_xlat5.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat5.xyz = vec3(u_xlat24) * u_xlat6.xyz + u_xlat5.xyz;
    u_xlat5.xyz = u_xlat3.xxx * u_xlat5.xyz;
    u_xlat24 = (-u_xlat3.x) + 1.0;
    vs_TEXCOORD0.w = u_xlat27 * u_xlat24;
    u_xlat3.xyz = vec3(u_xlat27) * u_xlat5.xyz;
    u_xlat24 = u_xlat0.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    u_xlat0.xyz = vec3(u_xlat24) * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    vs_TEXCOORD0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat3.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat0.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    u_xlat16_4.x = u_xlat0.y * u_xlat0.y;
    u_xlat16_4.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_4.x);
    u_xlat16_3 = u_xlat0.yzzx * u_xlat0.xyzz;
    u_xlat16_7.x = dot(unity_SHBr, u_xlat16_3);
    u_xlat16_7.y = dot(unity_SHBg, u_xlat16_3);
    u_xlat16_7.z = dot(unity_SHBb, u_xlat16_3);
    u_xlat16_4.xyz = unity_SHC.xyz * u_xlat16_4.xxx + u_xlat16_7.xyz;
    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat0.w = 1.0;
    u_xlat16_7.x = dot(unity_SHAr, u_xlat0);
    u_xlat16_7.y = dot(unity_SHAg, u_xlat0);
    u_xlat16_7.z = dot(unity_SHAb, u_xlat0);
    u_xlat16_4.xyz = u_xlat16_4.xyz + u_xlat16_7.xyz;
    vs_TEXCOORD1.xyz = u_xlat16_4.xyz;
    vs_TEXCOORD1.w = 1.0;
    u_xlat5.x = float(0.5);
    u_xlat5.z = float(0.5);
    u_xlat5.y = _ProjectionParams.x;
    u_xlat2.xyz = u_xlat2.xyw * u_xlat5.xyz;
    u_xlat2.w = u_xlat2.y * 0.5;
    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4_mhyJitteredVP[1];
    u_xlat2 = hlslcc_mtx4x4_mhyJitteredVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4_mhyJitteredVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat2.xyz = vec3(u_xlat5.z * u_xlat1.x, u_xlat5.y * u_xlat1.y, u_xlat5.z * u_xlat1.w);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    u_xlat2.w = u_xlat2.y * 0.5;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat24 = dot(hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, hlslcc_mtx4x4unity_ObjectToWorld[0].xyz);
    vs_TEXCOORD4.z = sqrt(u_xlat24);
    u_xlat24 = dot(hlslcc_mtx4x4unity_ObjectToWorld[1].xyz, hlslcc_mtx4x4unity_ObjectToWorld[1].xyz);
    vs_TEXCOORD4.w = sqrt(u_xlat24);
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD5.w = 0.0;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
    vs_TEXCOORD6.xyz = u_xlat1.xyz;
    vs_TEXCOORD6.w = 0.0;
    vs_TEXCOORD7.xyz = u_xlat0.xyz;
    vs_TEXCOORD7.w = 0.0;
    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
    u_xlat24 = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD8.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    vs_TEXCOORD8.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _LightColor0;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	float _AlphaRange;
uniform 	float _AlphaOffset;
uniform 	float _Opacity;
uniform 	mediump float _BottomAlphaToggle;
uniform 	float _AlphaBottomRange;
uniform 	float _AlphaBottomOffset;
uniform 	vec4 _WaterfallTex01_ST;
uniform 	mediump vec4 _FoamUVCoord01;
uniform 	mediump vec4 _FoamUVCoord02;
uniform 	float _FoamRange;
uniform 	float _FoamOffset;
uniform 	vec4 _DayColor;
uniform 	vec4 _BottomColor;
uniform 	vec4 _TopColor;
uniform 	float _ColorGradientRange;
uniform 	float _ColorGradientOffset;
uniform 	vec4 _ReflectionColor_Dark;
uniform 	vec4 _ReflectionColor_Light;
uniform 	float _Normal01_U_Speed;
uniform 	vec4 _Normal01_ST;
uniform 	float _Normal01_VSpeed;
uniform 	float _Normal02_U_Speed;
uniform 	vec4 _Normal02_ST;
uniform 	float _Normal02_V_Speed;
uniform 	vec4 _DistortionIntensity;
uniform 	float _ReflectionBrightness;
uniform 	float _ReflectionIntensity;
uniform 	float _WaterFall01_Speed;
uniform 	float _Waterfall02_Speed;
uniform 	mediump vec4 _WaterfallPatternColor;
uniform 	float _Waterfall01Brightness;
uniform 	float _Waterfall02Brightness;
uniform 	float _SprayRange;
uniform 	float _SprayOffset;
uniform 	float _ShadowStrength;
uniform 	vec4 _WaterfallSpecTex_ST;
uniform 	float _Detail01_U_Speed;
uniform 	vec4 _NoiseTex_ST;
uniform 	float _Detail01_V_Speed;
uniform 	float _NoiselDistortionValue;
uniform 	mediump vec4 _WaterfallSpecColor;
uniform 	mediump vec4 _FoamColor;
uniform 	vec3 _ES_MainLightColor;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _WaterfallTex01;
uniform lowp sampler2D _Normal01;
uniform lowp sampler2D _Normal02;
uniform lowp samplerCube _Reflection;
uniform lowp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _WaterfallSpecTex;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
in highp vec4 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
lowp float u_xlat10_0;
bvec2 u_xlatb0;
vec3 u_xlat1;
vec4 u_xlat2;
lowp float u_xlat10_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
vec4 u_xlat4;
vec3 u_xlat5;
lowp vec3 u_xlat10_5;
vec3 u_xlat6;
vec3 u_xlat7;
mediump vec3 u_xlat16_8;
vec3 u_xlat9;
lowp float u_xlat10_9;
vec3 u_xlat10;
mediump float u_xlat16_10;
lowp float u_xlat10_10;
bool u_xlatb10;
float u_xlat11;
vec2 u_xlat12;
mediump float u_xlat16_17;
float u_xlat18;
float u_xlat19;
lowp float u_xlat10_19;
float u_xlat27;
mediump float u_xlat16_27;
bool u_xlatb27;
float u_xlat28;
bool u_xlatb28;
float u_xlat29;
bool u_xlatb29;
float u_xlat30;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat18 = texture(_CameraDepthTexture, u_xlat0.xy).x;
    u_xlat18 = _ZBufferParams.z * u_xlat18 + _ZBufferParams.w;
    u_xlat18 = float(1.0) / u_xlat18;
    u_xlat18 = u_xlat18 + (-vs_TEXCOORD3.w);
    u_xlat27 = u_xlat18 * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
    u_xlat18 = u_xlat18 / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat1.x = (-u_xlat27) + 1.0;
    u_xlat18 = u_xlat18 * u_xlat1.x + u_xlat27;
    u_xlat27 = vs_TEXCOORD4.y * _AlphaRange + _AlphaOffset;
    u_xlat1.x = vs_TEXCOORD4.y * _AlphaBottomRange + _AlphaBottomOffset;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(_BottomAlphaToggle==1.0);
#else
    u_xlatb10 = _BottomAlphaToggle==1.0;
#endif
    u_xlat1.x = (u_xlatb10) ? u_xlat1.x : 1.0;
    u_xlat10.xy = vs_TEXCOORD4.xy * _WaterfallTex01_ST.xy + _WaterfallTex01_ST.zw;
    u_xlat2.xy = vec2(u_xlat10.x * vs_TEXCOORD4.z, u_xlat10.y * vs_TEXCOORD4.w);
    u_xlat10.xy = vec2(_Time.y * _FoamUVCoord01.z, _Time.y * _FoamUVCoord01.w);
    u_xlat10.xy = u_xlat2.xy * _FoamUVCoord01.xy + u_xlat10.xy;
    u_xlat3.xy = vec2(_Time.y * _FoamUVCoord02.z, _Time.y * _FoamUVCoord02.w);
    u_xlat3.xy = u_xlat2.xy * _FoamUVCoord02.xy + u_xlat3.xy;
    u_xlat28 = vs_TEXCOORD4.y * _FoamRange + _FoamOffset;
    u_xlat10_10 = texture(_WaterfallTex01, u_xlat10.xy).x;
    u_xlat10_19 = texture(_WaterfallTex01, u_xlat3.xy).y;
    u_xlat16_10 = u_xlat10_19 + u_xlat10_10;
    u_xlat10.x = u_xlat28 + u_xlat16_10;
#ifdef UNITY_ADRENO_ES3
    u_xlat10.x = min(max(u_xlat10.x, 0.0), 1.0);
#else
    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
#endif
    u_xlat19 = vs_TEXCOORD4.y * _ColorGradientRange + _ColorGradientOffset;
#ifdef UNITY_ADRENO_ES3
    u_xlat19 = min(max(u_xlat19, 0.0), 1.0);
#else
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
#endif
    u_xlat3.xyz = (-_BottomColor.xyz) + _TopColor.xyz;
    u_xlat3.xyz = vec3(u_xlat19) * u_xlat3.xyz + _BottomColor.xyz;
    u_xlat4.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat19 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat19 = inversesqrt(u_xlat19);
    u_xlat4.xyz = vec3(u_xlat19) * u_xlat4.xyz;
    u_xlat5.xy = vs_TEXCOORD4.xy * _Normal01_ST.xy + _Normal01_ST.zw;
    u_xlat19 = _Time.y * _Normal01_VSpeed;
    u_xlat30 = u_xlat5.x * vs_TEXCOORD4.z;
    u_xlat6.x = _Time.y * _Normal01_U_Speed + u_xlat30;
    u_xlat6.y = u_xlat5.y * vs_TEXCOORD4.w + u_xlat19;
    u_xlat5.xy = vs_TEXCOORD4.xy * _Normal02_ST.xy + _Normal02_ST.zw;
    u_xlat5.xy = vec2(u_xlat5.x * vs_TEXCOORD4.z, u_xlat5.y * vs_TEXCOORD4.w);
    u_xlat7.x = _Time.y * _Normal02_U_Speed + u_xlat5.x;
    u_xlat7.y = _Time.y * _Normal02_V_Speed + u_xlat5.y;
    u_xlat10_5.xyz = texture(_Normal01, u_xlat6.xy).xyz;
    u_xlat16_8.xyz = u_xlat10_5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat10_5.xyz = texture(_Normal02, u_xlat7.xy).xyz;
    u_xlat16_8.xyz = u_xlat10_5.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_8.xyz;
    u_xlat16_8.xyz = u_xlat16_8.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat5.xyz = u_xlat16_8.xyz * _DistortionIntensity.xyz;
    u_xlat6.x = vs_TEXCOORD6.x;
    u_xlat6.y = vs_TEXCOORD8.x;
    u_xlat6.z = vs_TEXCOORD7.x;
    u_xlat6.x = dot(u_xlat6.xyz, u_xlat5.xyz);
    u_xlat7.x = vs_TEXCOORD6.y;
    u_xlat7.y = vs_TEXCOORD8.y;
    u_xlat7.z = vs_TEXCOORD7.y;
    u_xlat6.y = dot(u_xlat7.xyz, u_xlat5.xyz);
    u_xlat7.x = vs_TEXCOORD6.z;
    u_xlat7.y = vs_TEXCOORD8.z;
    u_xlat7.z = vs_TEXCOORD7.z;
    u_xlat6.z = dot(u_xlat7.xyz, u_xlat5.xyz);
    u_xlat19 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat19 = inversesqrt(u_xlat19);
    u_xlat5.xyz = vec3(u_xlat19) * u_xlat6.xyz;
    u_xlat19 = dot((-u_xlat4.xyz), u_xlat5.xyz);
    u_xlat19 = u_xlat19 + u_xlat19;
    u_xlat4.xyz = u_xlat5.xyz * (-vec3(u_xlat19)) + (-u_xlat4.xyz);
    u_xlat10_19 = texture(_Reflection, u_xlat4.xyz).x;
    u_xlat4.xyz = (-_ReflectionColor_Dark.xyz) + _ReflectionColor_Light.xyz;
    u_xlat4.xyz = vec3(u_xlat10_19) * u_xlat4.xyz + _ReflectionColor_Dark.xyz;
    u_xlat5.xyz = u_xlat3.xyz * vec3(0.200000003, 0.200000003, 0.200000003);
    u_xlat3.xyz = u_xlat3.xyz * u_xlat4.xyz;
    u_xlat3.xyz = u_xlat3.xyz * vec3(_ReflectionBrightness) + (-u_xlat5.xyz);
    u_xlat3.xyz = vec3(vec3(_ReflectionIntensity, _ReflectionIntensity, _ReflectionIntensity)) * u_xlat3.xyz + u_xlat5.xyz;
    u_xlat2.zw = _Time.yy * vec2(_WaterFall01_Speed, _Waterfall02_Speed) + u_xlat2.yy;
    u_xlat10_19 = texture(_WaterfallTex01, u_xlat2.xz).x;
    u_xlat10_2 = texture(_WaterfallTex01, u_xlat2.xw).y;
    u_xlat16_8.x = (-u_xlat10_19) + u_xlat10_2;
    u_xlat16_8.x = u_xlat10_2 * u_xlat16_8.x + u_xlat10_19;
    u_xlat11 = u_xlat10_2 * _Waterfall02Brightness;
    u_xlat19 = u_xlat10_19 * _Waterfall01Brightness;
    u_xlat2.x = u_xlat10_2 * _Waterfall02Brightness + (-u_xlat19);
    u_xlat19 = u_xlat11 * u_xlat2.x + u_xlat19;
    u_xlat2.x = vs_TEXCOORD4.y * _SprayRange + _SprayOffset;
    u_xlat2.x = (-u_xlat2.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat19 = u_xlat19 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat19 = min(max(u_xlat19, 0.0), 1.0);
#else
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
#endif
    u_xlat2.xyz = u_xlat16_8.xxx * _WaterfallPatternColor.xyz + (-u_xlat3.xyz);
    u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz + u_xlat3.xyz;
    u_xlat10_0 = texture(_ShadowMapTexture, u_xlat0.xy).x;
    u_xlat9.x = (-_ShadowStrength) + 1.0;
    u_xlat0.x = u_xlat10_0 * u_xlat9.x + _ShadowStrength;
    u_xlat3.xy = vs_TEXCOORD4.xy * _WaterfallSpecTex_ST.xy + _WaterfallSpecTex_ST.zw;
    u_xlat16_8.x = vs_TEXCOORD4.w * 0.5;
    u_xlat16_8.x = vs_TEXCOORD4.w * u_xlat3.y + (-u_xlat16_8.x);
    u_xlat12.xy = vs_TEXCOORD4.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat4.x = _Time.y * _Detail01_U_Speed + u_xlat12.x;
    u_xlat4.y = _Time.y * _Detail01_V_Speed + u_xlat12.y;
    u_xlat10_9 = texture(_NoiseTex, u_xlat4.xy).x;
    u_xlat3.x = u_xlat10_9 * _NoiselDistortionValue + u_xlat3.x;
    u_xlat3.y = u_xlat10_9 * _NoiselDistortionValue + u_xlat16_8.x;
    u_xlat10_9 = texture(_WaterfallSpecTex, u_xlat3.xy).x;
    u_xlat16_3.xyz = vec3(u_xlat10_9) * _WaterfallSpecColor.xyz;
    u_xlat9.x = (-u_xlat27) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat9.x = min(max(u_xlat9.x, 0.0), 1.0);
#else
    u_xlat9.x = clamp(u_xlat9.x, 0.0, 1.0);
#endif
    u_xlat9.x = u_xlat9.x * u_xlat18;
    u_xlat9.x = u_xlat9.x * _Opacity;
    u_xlat9.x = u_xlat1.x * u_xlat9.x;
    u_xlat4.w = u_xlat10.x * u_xlat9.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.w = min(max(u_xlat4.w, 0.0), 1.0);
#else
    u_xlat4.w = clamp(u_xlat4.w, 0.0, 1.0);
#endif
    u_xlat9.xyz = u_xlat2.xyz * _DayColor.xyz;
    u_xlat0.xyz = u_xlat9.xyz * u_xlat0.xxx + u_xlat16_3.xyz;
    u_xlat27 = (-u_xlat28) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
    u_xlat27 = u_xlat27 * u_xlat10.x;
    u_xlat0.xyz = vec3(u_xlat27) * _FoamColor.xyz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * _ES_MainLightColor.xyz;
    u_xlat16_27 = max(_LightColor0.w, 1.0);
    u_xlat0.xyz = vec3(u_xlat16_27) * u_xlat0.xyz;
    u_xlat1.xyz = vs_TEXCOORD5.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat27 = dot(u_xlat1.xyz, u_xlat2.xyz);
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlat10.y = u_xlat1.x * _HeigtFogParams.y;
    u_xlat28 = u_xlat1.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat28 = min(max(u_xlat28, 0.0), 1.0);
#else
    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
#endif
    u_xlat2.x = (-u_xlat28) + 2.0;
    u_xlat28 = u_xlat28 * u_xlat2.x;
    u_xlat2.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!((-u_xlat27)>=u_xlat2.x);
#else
    u_xlatb27 = (-u_xlat27)>=u_xlat2.x;
#endif
    u_xlat2.x = u_xlat28 * _HeigtFogColDelta.w;
    u_xlat27 = (u_xlatb27) ? u_xlat2.x : u_xlat28;
    u_xlat27 = log2(u_xlat27);
    u_xlat27 = u_xlat27 * unity_FogColor.w;
    u_xlat27 = exp2(u_xlat27);
    u_xlat27 = min(u_xlat27, _HeigtFogColBase.w);
    u_xlat28 = vs_TEXCOORD5.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat28 = min(max(u_xlat28, 0.0), 1.0);
#else
    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
#endif
    u_xlat16_8.x = (-u_xlat28) + 2.0;
    u_xlat16_8.x = u_xlat28 * u_xlat16_8.x;
    u_xlat2.xyz = u_xlat16_8.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat28 = u_xlat1.x + (-_HeigtFogRamp.w);
    u_xlat28 = u_xlat28 * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat28 = min(max(u_xlat28, 0.0), 1.0);
#else
    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
#endif
    u_xlat3.xyz = (-u_xlat2.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat2.xyz = vec3(u_xlat28) * u_xlat3.xyz + u_xlat2.xyz;
    u_xlat28 = u_xlat1.y * _HeigtFogParams.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb29 = !!(0.00999999978<abs(u_xlat28));
#else
    u_xlatb29 = 0.00999999978<abs(u_xlat28);
#endif
    u_xlat3.x = u_xlat28 * -1.44269502;
    u_xlat3.x = exp2(u_xlat3.x);
    u_xlat3.x = (-u_xlat3.x) + 1.0;
    u_xlat28 = u_xlat3.x / u_xlat28;
    u_xlat16_8.x = (u_xlatb29) ? u_xlat28 : 1.0;
    u_xlat10.x = u_xlat1.y * _HeigtFogParams2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb28 = !!(0.00999999978<abs(u_xlat10.x));
#else
    u_xlatb28 = 0.00999999978<abs(u_xlat10.x);
#endif
    u_xlat29 = u_xlat10.x * -1.44269502;
    u_xlat29 = exp2(u_xlat29);
    u_xlat29 = (-u_xlat29) + 1.0;
    u_xlat10.x = u_xlat29 / u_xlat10.x;
    u_xlat16_8.y = (u_xlatb28) ? u_xlat10.x : 1.0;
    u_xlat10.x = u_xlat1.x * _HeigtFogParams2.y;
    u_xlat16_8.xy = u_xlat10.yx * u_xlat16_8.xy;
    u_xlat16_8.x = exp2((-u_xlat16_8.x));
    u_xlat16_8.x = (-u_xlat16_8.x) + 1.0;
    u_xlat16_17 = exp2((-u_xlat16_8.y));
    u_xlat16_8.y = (-u_xlat16_17) + 1.0;
    u_xlat16_8.xy = max(u_xlat16_8.xy, vec2(0.0, 0.0));
    u_xlat16_8.x = u_xlat16_8.y + u_xlat16_8.x;
    u_xlat1.x = u_xlat1.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat16_17 = (-u_xlat1.x) + 2.0;
    u_xlat16_17 = u_xlat1.x * u_xlat16_17;
    u_xlat1.x = u_xlat16_17 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat1.x = u_xlat1.x + 1.0;
    u_xlat16_8.x = u_xlat1.x * u_xlat16_8.x;
    u_xlat1.x = min(u_xlat16_8.x, _HeigtFogColBase.w);
    u_xlat10.x = vs_TEXCOORD5.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat10.x = min(max(u_xlat10.x, 0.0), 1.0);
#else
    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
#endif
    u_xlat10.xyz = u_xlat10.xxx * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    u_xlat2.xyz = vec3(u_xlat27) * u_xlat2.xyz;
    u_xlat29 = (-u_xlat1.x) + 1.0;
    u_xlat2.xyz = vec3(u_xlat29) * u_xlat2.xyz;
    u_xlat1.xyz = u_xlat10.xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat27 = (-u_xlat27) + 1.0;
    u_xlat27 = u_xlat29 * u_xlat27;
    u_xlat4.xyz = vec3(u_xlat27) * u_xlat0.xyz + u_xlat1.xyz;
    SV_Target0 = u_xlat4;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "MSAA_INTERPOLATION" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	mediump float _MHYZBias;
uniform 	vec4 hlslcc_mtx4x4_mhyJitteredVP[4];
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
vec3 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
bool u_xlatb3;
mediump vec3 u_xlat16_4;
float u_xlat5;
mediump vec4 u_xlat16_5;
vec3 u_xlat6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
float u_xlat11;
mediump float u_xlat16_12;
vec3 u_xlat13;
float u_xlat17;
bool u_xlatb17;
float u_xlat19;
float u_xlat24;
float u_xlat27;
bool u_xlatb27;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat8.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    u_xlat1.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position = u_xlat1;
    vs_TEXCOORD2.zw = u_xlat1.zw;
    vs_COLOR0 = in_COLOR0;
    u_xlat3.xyz = u_xlat8.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat17 = u_xlat3.y * _HeigtFogParams.x;
    u_xlat27 = u_xlat17 * -1.44269502;
    u_xlat27 = exp2(u_xlat27);
    u_xlat27 = (-u_xlat27) + 1.0;
    u_xlat27 = u_xlat27 / u_xlat17;
#ifdef UNITY_ADRENO_ES3
    u_xlatb17 = !!(0.00999999978<abs(u_xlat17));
#else
    u_xlatb17 = 0.00999999978<abs(u_xlat17);
#endif
    u_xlat16_4.x = (u_xlatb17) ? u_xlat27 : 1.0;
    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat17 = sqrt(u_xlat17);
    u_xlat27 = u_xlat17 * _HeigtFogParams.y;
    u_xlat16_4.x = u_xlat27 * u_xlat16_4.x;
    u_xlat16_4.x = exp2((-u_xlat16_4.x));
    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
    u_xlat27 = u_xlat3.y * _HeigtFogParams2.x;
    u_xlat5 = u_xlat27 * -1.44269502;
    u_xlat5 = exp2(u_xlat5);
    u_xlat5 = (-u_xlat5) + 1.0;
    u_xlat5 = u_xlat5 / u_xlat27;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(0.00999999978<abs(u_xlat27));
#else
    u_xlatb27 = 0.00999999978<abs(u_xlat27);
#endif
    u_xlat16_12 = (u_xlatb27) ? u_xlat5 : 1.0;
    u_xlat27 = u_xlat17 * _HeigtFogParams2.y;
    u_xlat16_12 = u_xlat27 * u_xlat16_12;
    u_xlat16_12 = exp2((-u_xlat16_12));
    u_xlat16_4.y = (-u_xlat16_12) + 1.0;
    u_xlat16_4.xy = max(u_xlat16_4.xy, vec2(0.0, 0.0));
    u_xlat16_4.x = u_xlat16_4.y + u_xlat16_4.x;
    u_xlat27 = u_xlat17 * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
    u_xlat16_12 = (-u_xlat27) + 2.0;
    u_xlat16_12 = u_xlat27 * u_xlat16_12;
    u_xlat27 = u_xlat16_12 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat27 = u_xlat27 + 1.0;
    u_xlat16_4.x = u_xlat27 * u_xlat16_4.x;
    u_xlat27 = min(u_xlat16_4.x, _HeigtFogColBase.w);
    u_xlat5 = (-u_xlat27) + 1.0;
    u_xlat13.x = _ProjectionParams.z * 0.999899983;
    u_xlat6.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat6.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat6.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat3.x = dot(u_xlat3.xyz, u_xlat6.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!((-u_xlat3.x)>=u_xlat13.x);
#else
    u_xlatb3 = (-u_xlat3.x)>=u_xlat13.x;
#endif
    u_xlat11 = u_xlat17 * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat11 = min(max(u_xlat11, 0.0), 1.0);
#else
    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
#endif
    u_xlat17 = u_xlat17 + (-_HeigtFogRamp.w);
    u_xlat17 = u_xlat17 * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat17 = min(max(u_xlat17, 0.0), 1.0);
#else
    u_xlat17 = clamp(u_xlat17, 0.0, 1.0);
#endif
    u_xlat19 = (-u_xlat11) + 2.0;
    u_xlat11 = u_xlat19 * u_xlat11;
    u_xlat19 = u_xlat11 * _HeigtFogColDelta.w;
    u_xlat3.x = (u_xlatb3) ? u_xlat19 : u_xlat11;
    u_xlat3.x = log2(u_xlat3.x);
    u_xlat3.x = u_xlat3.x * unity_FogColor.w;
    u_xlat3.x = exp2(u_xlat3.x);
    u_xlat3.x = min(u_xlat3.x, _HeigtFogColBase.w);
    u_xlat11 = u_xlat8.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat11 = min(max(u_xlat11, 0.0), 1.0);
#else
    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
#endif
    u_xlat16_4.x = (-u_xlat11) + 2.0;
    u_xlat16_4.x = u_xlat11 * u_xlat16_4.x;
    u_xlat13.xyz = u_xlat16_4.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat6.xyz = (-u_xlat13.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat13.xyz = vec3(u_xlat17) * u_xlat6.xyz + u_xlat13.xyz;
    u_xlat13.xyz = u_xlat3.xxx * u_xlat13.xyz;
    u_xlat17 = (-u_xlat3.x) + 1.0;
    vs_TEXCOORD0.w = u_xlat5 * u_xlat17;
    u_xlat3.xyz = vec3(u_xlat5) * u_xlat13.xyz;
    u_xlat17 = u_xlat8.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat17 = min(max(u_xlat17, 0.0), 1.0);
#else
    u_xlat17 = clamp(u_xlat17, 0.0, 1.0);
#endif
    vs_TEXCOORD5.xyz = u_xlat8.xyz;
    u_xlat8.xyz = vec3(u_xlat17) * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    vs_TEXCOORD0.xyz = u_xlat8.xyz * vec3(u_xlat27) + u_xlat3.xyz;
    u_xlat3.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat3.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat3.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat8.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat3.xyz = u_xlat8.xxx * u_xlat3.xyz;
    u_xlat16_4.x = u_xlat3.y * u_xlat3.y;
    u_xlat16_4.x = u_xlat3.x * u_xlat3.x + (-u_xlat16_4.x);
    u_xlat16_5 = u_xlat3.yzzx * u_xlat3.xyzz;
    u_xlat16_7.x = dot(unity_SHBr, u_xlat16_5);
    u_xlat16_7.y = dot(unity_SHBg, u_xlat16_5);
    u_xlat16_7.z = dot(unity_SHBb, u_xlat16_5);
    u_xlat16_4.xyz = unity_SHC.xyz * u_xlat16_4.xxx + u_xlat16_7.xyz;
    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat3.w = 1.0;
    u_xlat16_7.x = dot(unity_SHAr, u_xlat3);
    u_xlat16_7.y = dot(unity_SHAg, u_xlat3);
    u_xlat16_7.z = dot(unity_SHAb, u_xlat3);
    u_xlat16_4.xyz = u_xlat16_4.xyz + u_xlat16_7.xyz;
    vs_TEXCOORD1.xyz = u_xlat16_4.xyz;
    vs_TEXCOORD1.w = 1.0;
    u_xlat6.x = float(0.5);
    u_xlat6.z = float(0.5);
    u_xlat6.y = _ProjectionParams.x;
    u_xlat1.xyz = u_xlat1.xyw * u_xlat6.xyz;
    u_xlat1.w = u_xlat1.y * 0.5;
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4_mhyJitteredVP[1];
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[3] * u_xlat2.wwww + u_xlat1;
    u_xlat2.xyz = vec3(u_xlat6.z * u_xlat1.x, u_xlat6.y * u_xlat1.y, u_xlat6.z * u_xlat1.w);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    u_xlat2.w = u_xlat2.y * 0.5;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy;
    u_xlat8.x = dot(unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz);
    vs_TEXCOORD4.z = sqrt(u_xlat8.x);
    u_xlat8.x = dot(unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz);
    vs_TEXCOORD4.w = sqrt(u_xlat8.x);
    vs_TEXCOORD5.w = 0.0;
    u_xlat8.xyz = in_TANGENT0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat8.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_TANGENT0.xxx + u_xlat8.xyz;
    u_xlat0.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_TANGENT0.zzz + u_xlat8.xyz;
    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat0.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    vs_TEXCOORD6.xyz = u_xlat0.xyz;
    vs_TEXCOORD6.w = 0.0;
    vs_TEXCOORD7.xyz = u_xlat3.xyz;
    vs_TEXCOORD7.w = 0.0;
    u_xlat1.xyz = u_xlat0.yzx * u_xlat3.zxy;
    u_xlat0.xyz = u_xlat3.yzx * u_xlat0.zxy + (-u_xlat1.xyz);
    u_xlat24 = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD8.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    vs_TEXCOORD8.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _LightColor0;
uniform 	float _AlphaRange;
uniform 	float _AlphaOffset;
uniform 	float _Opacity;
uniform 	mediump float _BottomAlphaToggle;
uniform 	float _AlphaBottomRange;
uniform 	float _AlphaBottomOffset;
uniform 	vec4 _WaterfallTex01_ST;
uniform 	mediump vec4 _FoamUVCoord01;
uniform 	mediump vec4 _FoamUVCoord02;
uniform 	float _FoamRange;
uniform 	float _FoamOffset;
uniform 	vec4 _DayColor;
uniform 	vec4 _BottomColor;
uniform 	vec4 _TopColor;
uniform 	float _ColorGradientRange;
uniform 	float _ColorGradientOffset;
uniform 	vec4 _ReflectionColor_Dark;
uniform 	vec4 _ReflectionColor_Light;
uniform 	float _Normal01_U_Speed;
uniform 	vec4 _Normal01_ST;
uniform 	float _Normal01_VSpeed;
uniform 	float _Normal02_U_Speed;
uniform 	vec4 _Normal02_ST;
uniform 	float _Normal02_V_Speed;
uniform 	vec4 _DistortionIntensity;
uniform 	float _ReflectionBrightness;
uniform 	float _ReflectionIntensity;
uniform 	float _WaterFall01_Speed;
uniform 	float _Waterfall02_Speed;
uniform 	mediump vec4 _WaterfallPatternColor;
uniform 	float _Waterfall01Brightness;
uniform 	float _Waterfall02Brightness;
uniform 	float _SprayRange;
uniform 	float _SprayOffset;
uniform 	float _ShadowStrength;
uniform 	vec4 _WaterfallSpecTex_ST;
uniform 	float _Detail01_U_Speed;
uniform 	vec4 _NoiseTex_ST;
uniform 	float _Detail01_V_Speed;
uniform 	float _NoiselDistortionValue;
uniform 	mediump vec4 _WaterfallSpecColor;
uniform 	mediump vec4 _FoamColor;
uniform 	vec3 _ES_MainLightColor;
uniform lowp sampler2D _WaterfallTex01;
uniform lowp sampler2D _Normal01;
uniform lowp sampler2D _Normal02;
uniform lowp samplerCube _Reflection;
uniform lowp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _WaterfallSpecTex;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
in highp vec4 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
bvec2 u_xlatb0;
vec4 u_xlat1;
lowp float u_xlat10_1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
vec4 u_xlat3;
vec3 u_xlat4;
lowp vec3 u_xlat10_4;
vec3 u_xlat5;
vec3 u_xlat6;
mediump vec3 u_xlat16_7;
float u_xlat8;
vec3 u_xlat9;
vec3 u_xlat10;
mediump float u_xlat16_15;
vec2 u_xlat16;
mediump float u_xlat16_16;
lowp float u_xlat10_16;
bool u_xlatb16;
float u_xlat18;
float u_xlat24;
mediump float u_xlat16_24;
lowp float u_xlat10_24;
bool u_xlatb24;
float u_xlat25;
lowp float u_xlat10_25;
bool u_xlatb25;
float u_xlat26;
bool u_xlatb26;
float u_xlat27;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.x = vs_TEXCOORD4.y * _AlphaRange + _AlphaOffset;
    u_xlat8 = vs_TEXCOORD4.y * _AlphaBottomRange + _AlphaBottomOffset;
#ifdef UNITY_ADRENO_ES3
    u_xlat8 = min(max(u_xlat8, 0.0), 1.0);
#else
    u_xlat8 = clamp(u_xlat8, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(_BottomAlphaToggle==1.0);
#else
    u_xlatb16 = _BottomAlphaToggle==1.0;
#endif
    u_xlat8 = (u_xlatb16) ? u_xlat8 : 1.0;
    u_xlat16.xy = vs_TEXCOORD4.xy * _WaterfallTex01_ST.xy + _WaterfallTex01_ST.zw;
    u_xlat1.xy = vec2(u_xlat16.x * vs_TEXCOORD4.z, u_xlat16.y * vs_TEXCOORD4.w);
    u_xlat16.xy = vec2(_Time.y * _FoamUVCoord01.z, _Time.y * _FoamUVCoord01.w);
    u_xlat16.xy = u_xlat1.xy * _FoamUVCoord01.xy + u_xlat16.xy;
    u_xlat2.xy = vec2(_Time.y * _FoamUVCoord02.z, _Time.y * _FoamUVCoord02.w);
    u_xlat2.xy = u_xlat1.xy * _FoamUVCoord02.xy + u_xlat2.xy;
    u_xlat18 = vs_TEXCOORD4.y * _FoamRange + _FoamOffset;
    u_xlat10_16 = texture(_WaterfallTex01, u_xlat16.xy).x;
    u_xlat10_24 = texture(_WaterfallTex01, u_xlat2.xy).y;
    u_xlat16_16 = u_xlat10_24 + u_xlat10_16;
    u_xlat16.x = u_xlat18 + u_xlat16_16;
#ifdef UNITY_ADRENO_ES3
    u_xlat16.x = min(max(u_xlat16.x, 0.0), 1.0);
#else
    u_xlat16.x = clamp(u_xlat16.x, 0.0, 1.0);
#endif
    u_xlat24 = vs_TEXCOORD4.y * _ColorGradientRange + _ColorGradientOffset;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat2.xyw = (-_BottomColor.xyz) + _TopColor.xyz;
    u_xlat2.xyw = vec3(u_xlat24) * u_xlat2.xyw + _BottomColor.xyz;
    u_xlat3.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat24 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat3.xyz = vec3(u_xlat24) * u_xlat3.xyz;
    u_xlat4.xy = vs_TEXCOORD4.xy * _Normal01_ST.xy + _Normal01_ST.zw;
    u_xlat24 = _Time.y * _Normal01_VSpeed;
    u_xlat27 = u_xlat4.x * vs_TEXCOORD4.z;
    u_xlat5.x = _Time.y * _Normal01_U_Speed + u_xlat27;
    u_xlat5.y = u_xlat4.y * vs_TEXCOORD4.w + u_xlat24;
    u_xlat4.xy = vs_TEXCOORD4.xy * _Normal02_ST.xy + _Normal02_ST.zw;
    u_xlat4.xy = vec2(u_xlat4.x * vs_TEXCOORD4.z, u_xlat4.y * vs_TEXCOORD4.w);
    u_xlat6.x = _Time.y * _Normal02_U_Speed + u_xlat4.x;
    u_xlat6.y = _Time.y * _Normal02_V_Speed + u_xlat4.y;
    u_xlat10_4.xyz = texture(_Normal01, u_xlat5.xy).xyz;
    u_xlat16_7.xyz = u_xlat10_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat10_4.xyz = texture(_Normal02, u_xlat6.xy).xyz;
    u_xlat16_7.xyz = u_xlat10_4.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_7.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat4.xyz = u_xlat16_7.xyz * _DistortionIntensity.xyz;
    u_xlat5.x = vs_TEXCOORD6.x;
    u_xlat5.y = vs_TEXCOORD8.x;
    u_xlat5.z = vs_TEXCOORD7.x;
    u_xlat5.x = dot(u_xlat5.xyz, u_xlat4.xyz);
    u_xlat6.x = vs_TEXCOORD6.y;
    u_xlat6.y = vs_TEXCOORD8.y;
    u_xlat6.z = vs_TEXCOORD7.y;
    u_xlat5.y = dot(u_xlat6.xyz, u_xlat4.xyz);
    u_xlat6.x = vs_TEXCOORD6.z;
    u_xlat6.y = vs_TEXCOORD8.z;
    u_xlat6.z = vs_TEXCOORD7.z;
    u_xlat5.z = dot(u_xlat6.xyz, u_xlat4.xyz);
    u_xlat24 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat4.xyz = vec3(u_xlat24) * u_xlat5.xyz;
    u_xlat24 = dot((-u_xlat3.xyz), u_xlat4.xyz);
    u_xlat24 = u_xlat24 + u_xlat24;
    u_xlat3.xyz = u_xlat4.xyz * (-vec3(u_xlat24)) + (-u_xlat3.xyz);
    u_xlat10_24 = texture(_Reflection, u_xlat3.xyz).x;
    u_xlat3.xyz = (-_ReflectionColor_Dark.xyz) + _ReflectionColor_Light.xyz;
    u_xlat3.xyz = vec3(u_xlat10_24) * u_xlat3.xyz + _ReflectionColor_Dark.xyz;
    u_xlat4.xyz = u_xlat2.xyw * vec3(0.200000003, 0.200000003, 0.200000003);
    u_xlat2.xyw = u_xlat2.xyw * u_xlat3.xyz;
    u_xlat2.xyw = u_xlat2.xyw * vec3(_ReflectionBrightness) + (-u_xlat4.xyz);
    u_xlat2.xyw = vec3(vec3(_ReflectionIntensity, _ReflectionIntensity, _ReflectionIntensity)) * u_xlat2.xyw + u_xlat4.xyz;
    u_xlat1.zw = _Time.yy * vec2(_WaterFall01_Speed, _Waterfall02_Speed) + u_xlat1.yy;
    u_xlat10_24 = texture(_WaterfallTex01, u_xlat1.xz).x;
    u_xlat10_1 = texture(_WaterfallTex01, u_xlat1.xw).y;
    u_xlat16_7.x = (-u_xlat10_24) + u_xlat10_1;
    u_xlat16_7.x = u_xlat10_1 * u_xlat16_7.x + u_xlat10_24;
    u_xlat9.x = u_xlat10_1 * _Waterfall02Brightness;
    u_xlat24 = u_xlat10_24 * _Waterfall01Brightness;
    u_xlat1.x = u_xlat10_1 * _Waterfall02Brightness + (-u_xlat24);
    u_xlat24 = u_xlat9.x * u_xlat1.x + u_xlat24;
    u_xlat1.x = vs_TEXCOORD4.y * _SprayRange + _SprayOffset;
    u_xlat1.x = (-u_xlat1.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat24 = u_xlat24 * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat16_7.xxx * _WaterfallPatternColor.xyz + (-u_xlat2.xyw);
    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz + u_xlat2.xyw;
    u_xlat2.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat10_24 = texture(_ShadowMapTexture, u_xlat2.xy).x;
    u_xlat25 = (-_ShadowStrength) + 1.0;
    u_xlat24 = u_xlat10_24 * u_xlat25 + _ShadowStrength;
    u_xlat2.xy = vs_TEXCOORD4.xy * _WaterfallSpecTex_ST.xy + _WaterfallSpecTex_ST.zw;
    u_xlat16_7.x = vs_TEXCOORD4.w * 0.5;
    u_xlat16_7.x = vs_TEXCOORD4.w * u_xlat2.y + (-u_xlat16_7.x);
    u_xlat10.xz = vs_TEXCOORD4.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat3.x = _Time.y * _Detail01_U_Speed + u_xlat10.x;
    u_xlat3.y = _Time.y * _Detail01_V_Speed + u_xlat10.z;
    u_xlat10_25 = texture(_NoiseTex, u_xlat3.xy).x;
    u_xlat2.x = u_xlat10_25 * _NoiselDistortionValue + u_xlat2.x;
    u_xlat2.y = u_xlat10_25 * _NoiselDistortionValue + u_xlat16_7.x;
    u_xlat10_25 = texture(_WaterfallSpecTex, u_xlat2.xy).x;
    u_xlat16_2.xyw = vec3(u_xlat10_25) * _WaterfallSpecColor.xyz;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x * _Opacity;
    u_xlat0.x = u_xlat8 * u_xlat0.x;
    u_xlat3.w = u_xlat16.x * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat3.w = min(max(u_xlat3.w, 0.0), 1.0);
#else
    u_xlat3.w = clamp(u_xlat3.w, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat1.xyz * _DayColor.xyz;
    u_xlat0.xyw = u_xlat1.xyz * vec3(u_xlat24) + u_xlat16_2.xyw;
    u_xlat1.x = (-u_xlat18) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat16.x = u_xlat16.x * u_xlat1.x;
    u_xlat0.xyz = u_xlat16.xxx * _FoamColor.xyz + u_xlat0.xyw;
    u_xlat0.xyz = u_xlat0.xyz * _ES_MainLightColor.xyz;
    u_xlat16_24 = max(_LightColor0.w, 1.0);
    u_xlat0.xyz = vec3(u_xlat16_24) * u_xlat0.xyz;
    u_xlat1.xyz = vs_TEXCOORD5.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat24 = dot(u_xlat1.xyz, u_xlat2.xyz);
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlat9.y = u_xlat1.x * _HeigtFogParams.y;
    u_xlat25 = u_xlat1.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat25 = min(max(u_xlat25, 0.0), 1.0);
#else
    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
#endif
    u_xlat2.x = (-u_xlat25) + 2.0;
    u_xlat25 = u_xlat25 * u_xlat2.x;
    u_xlat2.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!((-u_xlat24)>=u_xlat2.x);
#else
    u_xlatb24 = (-u_xlat24)>=u_xlat2.x;
#endif
    u_xlat2.x = u_xlat25 * _HeigtFogColDelta.w;
    u_xlat24 = (u_xlatb24) ? u_xlat2.x : u_xlat25;
    u_xlat24 = log2(u_xlat24);
    u_xlat24 = u_xlat24 * unity_FogColor.w;
    u_xlat24 = exp2(u_xlat24);
    u_xlat24 = min(u_xlat24, _HeigtFogColBase.w);
    u_xlat25 = vs_TEXCOORD5.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat25 = min(max(u_xlat25, 0.0), 1.0);
#else
    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
#endif
    u_xlat16_7.x = (-u_xlat25) + 2.0;
    u_xlat16_7.x = u_xlat25 * u_xlat16_7.x;
    u_xlat2.xyz = u_xlat16_7.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat25 = u_xlat1.x + (-_HeigtFogRamp.w);
    u_xlat25 = u_xlat25 * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat25 = min(max(u_xlat25, 0.0), 1.0);
#else
    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
#endif
    u_xlat4.xyz = (-u_xlat2.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat2.xyz = vec3(u_xlat25) * u_xlat4.xyz + u_xlat2.xyz;
    u_xlat25 = u_xlat1.y * _HeigtFogParams.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb26 = !!(0.00999999978<abs(u_xlat25));
#else
    u_xlatb26 = 0.00999999978<abs(u_xlat25);
#endif
    u_xlat4.x = u_xlat25 * -1.44269502;
    u_xlat4.x = exp2(u_xlat4.x);
    u_xlat4.x = (-u_xlat4.x) + 1.0;
    u_xlat25 = u_xlat4.x / u_xlat25;
    u_xlat16_7.x = (u_xlatb26) ? u_xlat25 : 1.0;
    u_xlat9.x = u_xlat1.y * _HeigtFogParams2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb25 = !!(0.00999999978<abs(u_xlat9.x));
#else
    u_xlatb25 = 0.00999999978<abs(u_xlat9.x);
#endif
    u_xlat26 = u_xlat9.x * -1.44269502;
    u_xlat26 = exp2(u_xlat26);
    u_xlat26 = (-u_xlat26) + 1.0;
    u_xlat9.x = u_xlat26 / u_xlat9.x;
    u_xlat16_7.y = (u_xlatb25) ? u_xlat9.x : 1.0;
    u_xlat9.x = u_xlat1.x * _HeigtFogParams2.y;
    u_xlat16_7.xy = u_xlat9.yx * u_xlat16_7.xy;
    u_xlat16_7.x = exp2((-u_xlat16_7.x));
    u_xlat16_7.x = (-u_xlat16_7.x) + 1.0;
    u_xlat16_15 = exp2((-u_xlat16_7.y));
    u_xlat16_7.y = (-u_xlat16_15) + 1.0;
    u_xlat16_7.xy = max(u_xlat16_7.xy, vec2(0.0, 0.0));
    u_xlat16_7.x = u_xlat16_7.y + u_xlat16_7.x;
    u_xlat1.x = u_xlat1.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat16_15 = (-u_xlat1.x) + 2.0;
    u_xlat16_15 = u_xlat1.x * u_xlat16_15;
    u_xlat1.x = u_xlat16_15 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat1.x = u_xlat1.x + 1.0;
    u_xlat16_7.x = u_xlat1.x * u_xlat16_7.x;
    u_xlat1.x = min(u_xlat16_7.x, _HeigtFogColBase.w);
    u_xlat9.x = vs_TEXCOORD5.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat9.x = min(max(u_xlat9.x, 0.0), 1.0);
#else
    u_xlat9.x = clamp(u_xlat9.x, 0.0, 1.0);
#endif
    u_xlat9.xyz = u_xlat9.xxx * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz;
    u_xlat26 = (-u_xlat1.x) + 1.0;
    u_xlat2.xyz = vec3(u_xlat26) * u_xlat2.xyz;
    u_xlat1.xyz = u_xlat9.xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat24 = (-u_xlat24) + 1.0;
    u_xlat24 = u_xlat26 * u_xlat24;
    u_xlat3.xyz = vec3(u_xlat24) * u_xlat0.xyz + u_xlat1.xyz;
    SV_Target0 = u_xlat3;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "MSAA_INTERPOLATION" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	mediump float _MHYZBias;
uniform 	vec4 hlslcc_mtx4x4_mhyJitteredVP[4];
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
vec3 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
bool u_xlatb3;
mediump vec3 u_xlat16_4;
float u_xlat5;
mediump vec4 u_xlat16_5;
vec3 u_xlat6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
float u_xlat11;
mediump float u_xlat16_12;
vec3 u_xlat13;
float u_xlat17;
bool u_xlatb17;
float u_xlat19;
float u_xlat24;
float u_xlat27;
bool u_xlatb27;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat8.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    u_xlat1.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position = u_xlat1;
    vs_TEXCOORD2.zw = u_xlat1.zw;
    vs_COLOR0 = in_COLOR0;
    u_xlat3.xyz = u_xlat8.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat17 = u_xlat3.y * _HeigtFogParams.x;
    u_xlat27 = u_xlat17 * -1.44269502;
    u_xlat27 = exp2(u_xlat27);
    u_xlat27 = (-u_xlat27) + 1.0;
    u_xlat27 = u_xlat27 / u_xlat17;
#ifdef UNITY_ADRENO_ES3
    u_xlatb17 = !!(0.00999999978<abs(u_xlat17));
#else
    u_xlatb17 = 0.00999999978<abs(u_xlat17);
#endif
    u_xlat16_4.x = (u_xlatb17) ? u_xlat27 : 1.0;
    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat17 = sqrt(u_xlat17);
    u_xlat27 = u_xlat17 * _HeigtFogParams.y;
    u_xlat16_4.x = u_xlat27 * u_xlat16_4.x;
    u_xlat16_4.x = exp2((-u_xlat16_4.x));
    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
    u_xlat27 = u_xlat3.y * _HeigtFogParams2.x;
    u_xlat5 = u_xlat27 * -1.44269502;
    u_xlat5 = exp2(u_xlat5);
    u_xlat5 = (-u_xlat5) + 1.0;
    u_xlat5 = u_xlat5 / u_xlat27;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(0.00999999978<abs(u_xlat27));
#else
    u_xlatb27 = 0.00999999978<abs(u_xlat27);
#endif
    u_xlat16_12 = (u_xlatb27) ? u_xlat5 : 1.0;
    u_xlat27 = u_xlat17 * _HeigtFogParams2.y;
    u_xlat16_12 = u_xlat27 * u_xlat16_12;
    u_xlat16_12 = exp2((-u_xlat16_12));
    u_xlat16_4.y = (-u_xlat16_12) + 1.0;
    u_xlat16_4.xy = max(u_xlat16_4.xy, vec2(0.0, 0.0));
    u_xlat16_4.x = u_xlat16_4.y + u_xlat16_4.x;
    u_xlat27 = u_xlat17 * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
    u_xlat16_12 = (-u_xlat27) + 2.0;
    u_xlat16_12 = u_xlat27 * u_xlat16_12;
    u_xlat27 = u_xlat16_12 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat27 = u_xlat27 + 1.0;
    u_xlat16_4.x = u_xlat27 * u_xlat16_4.x;
    u_xlat27 = min(u_xlat16_4.x, _HeigtFogColBase.w);
    u_xlat5 = (-u_xlat27) + 1.0;
    u_xlat13.x = _ProjectionParams.z * 0.999899983;
    u_xlat6.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat6.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat6.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat3.x = dot(u_xlat3.xyz, u_xlat6.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!((-u_xlat3.x)>=u_xlat13.x);
#else
    u_xlatb3 = (-u_xlat3.x)>=u_xlat13.x;
#endif
    u_xlat11 = u_xlat17 * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat11 = min(max(u_xlat11, 0.0), 1.0);
#else
    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
#endif
    u_xlat17 = u_xlat17 + (-_HeigtFogRamp.w);
    u_xlat17 = u_xlat17 * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat17 = min(max(u_xlat17, 0.0), 1.0);
#else
    u_xlat17 = clamp(u_xlat17, 0.0, 1.0);
#endif
    u_xlat19 = (-u_xlat11) + 2.0;
    u_xlat11 = u_xlat19 * u_xlat11;
    u_xlat19 = u_xlat11 * _HeigtFogColDelta.w;
    u_xlat3.x = (u_xlatb3) ? u_xlat19 : u_xlat11;
    u_xlat3.x = log2(u_xlat3.x);
    u_xlat3.x = u_xlat3.x * unity_FogColor.w;
    u_xlat3.x = exp2(u_xlat3.x);
    u_xlat3.x = min(u_xlat3.x, _HeigtFogColBase.w);
    u_xlat11 = u_xlat8.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat11 = min(max(u_xlat11, 0.0), 1.0);
#else
    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
#endif
    u_xlat16_4.x = (-u_xlat11) + 2.0;
    u_xlat16_4.x = u_xlat11 * u_xlat16_4.x;
    u_xlat13.xyz = u_xlat16_4.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat6.xyz = (-u_xlat13.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat13.xyz = vec3(u_xlat17) * u_xlat6.xyz + u_xlat13.xyz;
    u_xlat13.xyz = u_xlat3.xxx * u_xlat13.xyz;
    u_xlat17 = (-u_xlat3.x) + 1.0;
    vs_TEXCOORD0.w = u_xlat5 * u_xlat17;
    u_xlat3.xyz = vec3(u_xlat5) * u_xlat13.xyz;
    u_xlat17 = u_xlat8.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat17 = min(max(u_xlat17, 0.0), 1.0);
#else
    u_xlat17 = clamp(u_xlat17, 0.0, 1.0);
#endif
    vs_TEXCOORD5.xyz = u_xlat8.xyz;
    u_xlat8.xyz = vec3(u_xlat17) * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    vs_TEXCOORD0.xyz = u_xlat8.xyz * vec3(u_xlat27) + u_xlat3.xyz;
    u_xlat3.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat3.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat3.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat8.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat3.xyz = u_xlat8.xxx * u_xlat3.xyz;
    u_xlat16_4.x = u_xlat3.y * u_xlat3.y;
    u_xlat16_4.x = u_xlat3.x * u_xlat3.x + (-u_xlat16_4.x);
    u_xlat16_5 = u_xlat3.yzzx * u_xlat3.xyzz;
    u_xlat16_7.x = dot(unity_SHBr, u_xlat16_5);
    u_xlat16_7.y = dot(unity_SHBg, u_xlat16_5);
    u_xlat16_7.z = dot(unity_SHBb, u_xlat16_5);
    u_xlat16_4.xyz = unity_SHC.xyz * u_xlat16_4.xxx + u_xlat16_7.xyz;
    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat3.w = 1.0;
    u_xlat16_7.x = dot(unity_SHAr, u_xlat3);
    u_xlat16_7.y = dot(unity_SHAg, u_xlat3);
    u_xlat16_7.z = dot(unity_SHAb, u_xlat3);
    u_xlat16_4.xyz = u_xlat16_4.xyz + u_xlat16_7.xyz;
    vs_TEXCOORD1.xyz = u_xlat16_4.xyz;
    vs_TEXCOORD1.w = 1.0;
    u_xlat6.x = float(0.5);
    u_xlat6.z = float(0.5);
    u_xlat6.y = _ProjectionParams.x;
    u_xlat1.xyz = u_xlat1.xyw * u_xlat6.xyz;
    u_xlat1.w = u_xlat1.y * 0.5;
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4_mhyJitteredVP[1];
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[3] * u_xlat2.wwww + u_xlat1;
    u_xlat2.xyz = vec3(u_xlat6.z * u_xlat1.x, u_xlat6.y * u_xlat1.y, u_xlat6.z * u_xlat1.w);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    u_xlat2.w = u_xlat2.y * 0.5;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy;
    u_xlat8.x = dot(unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz);
    vs_TEXCOORD4.z = sqrt(u_xlat8.x);
    u_xlat8.x = dot(unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz);
    vs_TEXCOORD4.w = sqrt(u_xlat8.x);
    vs_TEXCOORD5.w = 0.0;
    u_xlat8.xyz = in_TANGENT0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat8.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_TANGENT0.xxx + u_xlat8.xyz;
    u_xlat0.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_TANGENT0.zzz + u_xlat8.xyz;
    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat0.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    vs_TEXCOORD6.xyz = u_xlat0.xyz;
    vs_TEXCOORD6.w = 0.0;
    vs_TEXCOORD7.xyz = u_xlat3.xyz;
    vs_TEXCOORD7.w = 0.0;
    u_xlat1.xyz = u_xlat0.yzx * u_xlat3.zxy;
    u_xlat0.xyz = u_xlat3.yzx * u_xlat0.zxy + (-u_xlat1.xyz);
    u_xlat24 = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD8.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    vs_TEXCOORD8.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _LightColor0;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	float _AlphaRange;
uniform 	float _AlphaOffset;
uniform 	float _Opacity;
uniform 	mediump float _BottomAlphaToggle;
uniform 	float _AlphaBottomRange;
uniform 	float _AlphaBottomOffset;
uniform 	vec4 _WaterfallTex01_ST;
uniform 	mediump vec4 _FoamUVCoord01;
uniform 	mediump vec4 _FoamUVCoord02;
uniform 	float _FoamRange;
uniform 	float _FoamOffset;
uniform 	vec4 _DayColor;
uniform 	vec4 _BottomColor;
uniform 	vec4 _TopColor;
uniform 	float _ColorGradientRange;
uniform 	float _ColorGradientOffset;
uniform 	vec4 _ReflectionColor_Dark;
uniform 	vec4 _ReflectionColor_Light;
uniform 	float _Normal01_U_Speed;
uniform 	vec4 _Normal01_ST;
uniform 	float _Normal01_VSpeed;
uniform 	float _Normal02_U_Speed;
uniform 	vec4 _Normal02_ST;
uniform 	float _Normal02_V_Speed;
uniform 	vec4 _DistortionIntensity;
uniform 	float _ReflectionBrightness;
uniform 	float _ReflectionIntensity;
uniform 	float _WaterFall01_Speed;
uniform 	float _Waterfall02_Speed;
uniform 	mediump vec4 _WaterfallPatternColor;
uniform 	float _Waterfall01Brightness;
uniform 	float _Waterfall02Brightness;
uniform 	float _SprayRange;
uniform 	float _SprayOffset;
uniform 	float _ShadowStrength;
uniform 	vec4 _WaterfallSpecTex_ST;
uniform 	float _Detail01_U_Speed;
uniform 	vec4 _NoiseTex_ST;
uniform 	float _Detail01_V_Speed;
uniform 	float _NoiselDistortionValue;
uniform 	mediump vec4 _WaterfallSpecColor;
uniform 	mediump vec4 _FoamColor;
uniform 	vec3 _ES_MainLightColor;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _WaterfallTex01;
uniform lowp sampler2D _Normal01;
uniform lowp sampler2D _Normal02;
uniform lowp samplerCube _Reflection;
uniform lowp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _WaterfallSpecTex;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
in highp vec4 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
lowp float u_xlat10_0;
bvec2 u_xlatb0;
vec3 u_xlat1;
vec4 u_xlat2;
lowp float u_xlat10_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
vec4 u_xlat4;
vec3 u_xlat5;
lowp vec3 u_xlat10_5;
vec3 u_xlat6;
vec3 u_xlat7;
mediump vec3 u_xlat16_8;
vec3 u_xlat9;
lowp float u_xlat10_9;
vec3 u_xlat10;
mediump float u_xlat16_10;
lowp float u_xlat10_10;
bool u_xlatb10;
float u_xlat11;
vec2 u_xlat12;
mediump float u_xlat16_17;
float u_xlat18;
float u_xlat19;
lowp float u_xlat10_19;
float u_xlat27;
mediump float u_xlat16_27;
bool u_xlatb27;
float u_xlat28;
bool u_xlatb28;
float u_xlat29;
bool u_xlatb29;
float u_xlat30;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat18 = texture(_CameraDepthTexture, u_xlat0.xy).x;
    u_xlat18 = _ZBufferParams.z * u_xlat18 + _ZBufferParams.w;
    u_xlat18 = float(1.0) / u_xlat18;
    u_xlat18 = u_xlat18 + (-vs_TEXCOORD3.w);
    u_xlat27 = u_xlat18 * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
    u_xlat18 = u_xlat18 / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat1.x = (-u_xlat27) + 1.0;
    u_xlat18 = u_xlat18 * u_xlat1.x + u_xlat27;
    u_xlat27 = vs_TEXCOORD4.y * _AlphaRange + _AlphaOffset;
    u_xlat1.x = vs_TEXCOORD4.y * _AlphaBottomRange + _AlphaBottomOffset;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(_BottomAlphaToggle==1.0);
#else
    u_xlatb10 = _BottomAlphaToggle==1.0;
#endif
    u_xlat1.x = (u_xlatb10) ? u_xlat1.x : 1.0;
    u_xlat10.xy = vs_TEXCOORD4.xy * _WaterfallTex01_ST.xy + _WaterfallTex01_ST.zw;
    u_xlat2.xy = vec2(u_xlat10.x * vs_TEXCOORD4.z, u_xlat10.y * vs_TEXCOORD4.w);
    u_xlat10.xy = vec2(_Time.y * _FoamUVCoord01.z, _Time.y * _FoamUVCoord01.w);
    u_xlat10.xy = u_xlat2.xy * _FoamUVCoord01.xy + u_xlat10.xy;
    u_xlat3.xy = vec2(_Time.y * _FoamUVCoord02.z, _Time.y * _FoamUVCoord02.w);
    u_xlat3.xy = u_xlat2.xy * _FoamUVCoord02.xy + u_xlat3.xy;
    u_xlat28 = vs_TEXCOORD4.y * _FoamRange + _FoamOffset;
    u_xlat10_10 = texture(_WaterfallTex01, u_xlat10.xy).x;
    u_xlat10_19 = texture(_WaterfallTex01, u_xlat3.xy).y;
    u_xlat16_10 = u_xlat10_19 + u_xlat10_10;
    u_xlat10.x = u_xlat28 + u_xlat16_10;
#ifdef UNITY_ADRENO_ES3
    u_xlat10.x = min(max(u_xlat10.x, 0.0), 1.0);
#else
    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
#endif
    u_xlat19 = vs_TEXCOORD4.y * _ColorGradientRange + _ColorGradientOffset;
#ifdef UNITY_ADRENO_ES3
    u_xlat19 = min(max(u_xlat19, 0.0), 1.0);
#else
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
#endif
    u_xlat3.xyz = (-_BottomColor.xyz) + _TopColor.xyz;
    u_xlat3.xyz = vec3(u_xlat19) * u_xlat3.xyz + _BottomColor.xyz;
    u_xlat4.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat19 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat19 = inversesqrt(u_xlat19);
    u_xlat4.xyz = vec3(u_xlat19) * u_xlat4.xyz;
    u_xlat5.xy = vs_TEXCOORD4.xy * _Normal01_ST.xy + _Normal01_ST.zw;
    u_xlat19 = _Time.y * _Normal01_VSpeed;
    u_xlat30 = u_xlat5.x * vs_TEXCOORD4.z;
    u_xlat6.x = _Time.y * _Normal01_U_Speed + u_xlat30;
    u_xlat6.y = u_xlat5.y * vs_TEXCOORD4.w + u_xlat19;
    u_xlat5.xy = vs_TEXCOORD4.xy * _Normal02_ST.xy + _Normal02_ST.zw;
    u_xlat5.xy = vec2(u_xlat5.x * vs_TEXCOORD4.z, u_xlat5.y * vs_TEXCOORD4.w);
    u_xlat7.x = _Time.y * _Normal02_U_Speed + u_xlat5.x;
    u_xlat7.y = _Time.y * _Normal02_V_Speed + u_xlat5.y;
    u_xlat10_5.xyz = texture(_Normal01, u_xlat6.xy).xyz;
    u_xlat16_8.xyz = u_xlat10_5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat10_5.xyz = texture(_Normal02, u_xlat7.xy).xyz;
    u_xlat16_8.xyz = u_xlat10_5.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_8.xyz;
    u_xlat16_8.xyz = u_xlat16_8.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat5.xyz = u_xlat16_8.xyz * _DistortionIntensity.xyz;
    u_xlat6.x = vs_TEXCOORD6.x;
    u_xlat6.y = vs_TEXCOORD8.x;
    u_xlat6.z = vs_TEXCOORD7.x;
    u_xlat6.x = dot(u_xlat6.xyz, u_xlat5.xyz);
    u_xlat7.x = vs_TEXCOORD6.y;
    u_xlat7.y = vs_TEXCOORD8.y;
    u_xlat7.z = vs_TEXCOORD7.y;
    u_xlat6.y = dot(u_xlat7.xyz, u_xlat5.xyz);
    u_xlat7.x = vs_TEXCOORD6.z;
    u_xlat7.y = vs_TEXCOORD8.z;
    u_xlat7.z = vs_TEXCOORD7.z;
    u_xlat6.z = dot(u_xlat7.xyz, u_xlat5.xyz);
    u_xlat19 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat19 = inversesqrt(u_xlat19);
    u_xlat5.xyz = vec3(u_xlat19) * u_xlat6.xyz;
    u_xlat19 = dot((-u_xlat4.xyz), u_xlat5.xyz);
    u_xlat19 = u_xlat19 + u_xlat19;
    u_xlat4.xyz = u_xlat5.xyz * (-vec3(u_xlat19)) + (-u_xlat4.xyz);
    u_xlat10_19 = texture(_Reflection, u_xlat4.xyz).x;
    u_xlat4.xyz = (-_ReflectionColor_Dark.xyz) + _ReflectionColor_Light.xyz;
    u_xlat4.xyz = vec3(u_xlat10_19) * u_xlat4.xyz + _ReflectionColor_Dark.xyz;
    u_xlat5.xyz = u_xlat3.xyz * vec3(0.200000003, 0.200000003, 0.200000003);
    u_xlat3.xyz = u_xlat3.xyz * u_xlat4.xyz;
    u_xlat3.xyz = u_xlat3.xyz * vec3(_ReflectionBrightness) + (-u_xlat5.xyz);
    u_xlat3.xyz = vec3(vec3(_ReflectionIntensity, _ReflectionIntensity, _ReflectionIntensity)) * u_xlat3.xyz + u_xlat5.xyz;
    u_xlat2.zw = _Time.yy * vec2(_WaterFall01_Speed, _Waterfall02_Speed) + u_xlat2.yy;
    u_xlat10_19 = texture(_WaterfallTex01, u_xlat2.xz).x;
    u_xlat10_2 = texture(_WaterfallTex01, u_xlat2.xw).y;
    u_xlat16_8.x = (-u_xlat10_19) + u_xlat10_2;
    u_xlat16_8.x = u_xlat10_2 * u_xlat16_8.x + u_xlat10_19;
    u_xlat11 = u_xlat10_2 * _Waterfall02Brightness;
    u_xlat19 = u_xlat10_19 * _Waterfall01Brightness;
    u_xlat2.x = u_xlat10_2 * _Waterfall02Brightness + (-u_xlat19);
    u_xlat19 = u_xlat11 * u_xlat2.x + u_xlat19;
    u_xlat2.x = vs_TEXCOORD4.y * _SprayRange + _SprayOffset;
    u_xlat2.x = (-u_xlat2.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat19 = u_xlat19 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat19 = min(max(u_xlat19, 0.0), 1.0);
#else
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
#endif
    u_xlat2.xyz = u_xlat16_8.xxx * _WaterfallPatternColor.xyz + (-u_xlat3.xyz);
    u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz + u_xlat3.xyz;
    u_xlat10_0 = texture(_ShadowMapTexture, u_xlat0.xy).x;
    u_xlat9.x = (-_ShadowStrength) + 1.0;
    u_xlat0.x = u_xlat10_0 * u_xlat9.x + _ShadowStrength;
    u_xlat3.xy = vs_TEXCOORD4.xy * _WaterfallSpecTex_ST.xy + _WaterfallSpecTex_ST.zw;
    u_xlat16_8.x = vs_TEXCOORD4.w * 0.5;
    u_xlat16_8.x = vs_TEXCOORD4.w * u_xlat3.y + (-u_xlat16_8.x);
    u_xlat12.xy = vs_TEXCOORD4.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat4.x = _Time.y * _Detail01_U_Speed + u_xlat12.x;
    u_xlat4.y = _Time.y * _Detail01_V_Speed + u_xlat12.y;
    u_xlat10_9 = texture(_NoiseTex, u_xlat4.xy).x;
    u_xlat3.x = u_xlat10_9 * _NoiselDistortionValue + u_xlat3.x;
    u_xlat3.y = u_xlat10_9 * _NoiselDistortionValue + u_xlat16_8.x;
    u_xlat10_9 = texture(_WaterfallSpecTex, u_xlat3.xy).x;
    u_xlat16_3.xyz = vec3(u_xlat10_9) * _WaterfallSpecColor.xyz;
    u_xlat9.x = (-u_xlat27) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat9.x = min(max(u_xlat9.x, 0.0), 1.0);
#else
    u_xlat9.x = clamp(u_xlat9.x, 0.0, 1.0);
#endif
    u_xlat9.x = u_xlat9.x * u_xlat18;
    u_xlat9.x = u_xlat9.x * _Opacity;
    u_xlat9.x = u_xlat1.x * u_xlat9.x;
    u_xlat4.w = u_xlat10.x * u_xlat9.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.w = min(max(u_xlat4.w, 0.0), 1.0);
#else
    u_xlat4.w = clamp(u_xlat4.w, 0.0, 1.0);
#endif
    u_xlat9.xyz = u_xlat2.xyz * _DayColor.xyz;
    u_xlat0.xyz = u_xlat9.xyz * u_xlat0.xxx + u_xlat16_3.xyz;
    u_xlat27 = (-u_xlat28) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
    u_xlat27 = u_xlat27 * u_xlat10.x;
    u_xlat0.xyz = vec3(u_xlat27) * _FoamColor.xyz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * _ES_MainLightColor.xyz;
    u_xlat16_27 = max(_LightColor0.w, 1.0);
    u_xlat0.xyz = vec3(u_xlat16_27) * u_xlat0.xyz;
    u_xlat1.xyz = vs_TEXCOORD5.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat27 = dot(u_xlat1.xyz, u_xlat2.xyz);
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlat10.y = u_xlat1.x * _HeigtFogParams.y;
    u_xlat28 = u_xlat1.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat28 = min(max(u_xlat28, 0.0), 1.0);
#else
    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
#endif
    u_xlat2.x = (-u_xlat28) + 2.0;
    u_xlat28 = u_xlat28 * u_xlat2.x;
    u_xlat2.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!((-u_xlat27)>=u_xlat2.x);
#else
    u_xlatb27 = (-u_xlat27)>=u_xlat2.x;
#endif
    u_xlat2.x = u_xlat28 * _HeigtFogColDelta.w;
    u_xlat27 = (u_xlatb27) ? u_xlat2.x : u_xlat28;
    u_xlat27 = log2(u_xlat27);
    u_xlat27 = u_xlat27 * unity_FogColor.w;
    u_xlat27 = exp2(u_xlat27);
    u_xlat27 = min(u_xlat27, _HeigtFogColBase.w);
    u_xlat28 = vs_TEXCOORD5.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat28 = min(max(u_xlat28, 0.0), 1.0);
#else
    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
#endif
    u_xlat16_8.x = (-u_xlat28) + 2.0;
    u_xlat16_8.x = u_xlat28 * u_xlat16_8.x;
    u_xlat2.xyz = u_xlat16_8.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat28 = u_xlat1.x + (-_HeigtFogRamp.w);
    u_xlat28 = u_xlat28 * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat28 = min(max(u_xlat28, 0.0), 1.0);
#else
    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
#endif
    u_xlat3.xyz = (-u_xlat2.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat2.xyz = vec3(u_xlat28) * u_xlat3.xyz + u_xlat2.xyz;
    u_xlat28 = u_xlat1.y * _HeigtFogParams.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb29 = !!(0.00999999978<abs(u_xlat28));
#else
    u_xlatb29 = 0.00999999978<abs(u_xlat28);
#endif
    u_xlat3.x = u_xlat28 * -1.44269502;
    u_xlat3.x = exp2(u_xlat3.x);
    u_xlat3.x = (-u_xlat3.x) + 1.0;
    u_xlat28 = u_xlat3.x / u_xlat28;
    u_xlat16_8.x = (u_xlatb29) ? u_xlat28 : 1.0;
    u_xlat10.x = u_xlat1.y * _HeigtFogParams2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb28 = !!(0.00999999978<abs(u_xlat10.x));
#else
    u_xlatb28 = 0.00999999978<abs(u_xlat10.x);
#endif
    u_xlat29 = u_xlat10.x * -1.44269502;
    u_xlat29 = exp2(u_xlat29);
    u_xlat29 = (-u_xlat29) + 1.0;
    u_xlat10.x = u_xlat29 / u_xlat10.x;
    u_xlat16_8.y = (u_xlatb28) ? u_xlat10.x : 1.0;
    u_xlat10.x = u_xlat1.x * _HeigtFogParams2.y;
    u_xlat16_8.xy = u_xlat10.yx * u_xlat16_8.xy;
    u_xlat16_8.x = exp2((-u_xlat16_8.x));
    u_xlat16_8.x = (-u_xlat16_8.x) + 1.0;
    u_xlat16_17 = exp2((-u_xlat16_8.y));
    u_xlat16_8.y = (-u_xlat16_17) + 1.0;
    u_xlat16_8.xy = max(u_xlat16_8.xy, vec2(0.0, 0.0));
    u_xlat16_8.x = u_xlat16_8.y + u_xlat16_8.x;
    u_xlat1.x = u_xlat1.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat16_17 = (-u_xlat1.x) + 2.0;
    u_xlat16_17 = u_xlat1.x * u_xlat16_17;
    u_xlat1.x = u_xlat16_17 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat1.x = u_xlat1.x + 1.0;
    u_xlat16_8.x = u_xlat1.x * u_xlat16_8.x;
    u_xlat1.x = min(u_xlat16_8.x, _HeigtFogColBase.w);
    u_xlat10.x = vs_TEXCOORD5.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat10.x = min(max(u_xlat10.x, 0.0), 1.0);
#else
    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
#endif
    u_xlat10.xyz = u_xlat10.xxx * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    u_xlat2.xyz = vec3(u_xlat27) * u_xlat2.xyz;
    u_xlat29 = (-u_xlat1.x) + 1.0;
    u_xlat2.xyz = vec3(u_xlat29) * u_xlat2.xyz;
    u_xlat1.xyz = u_xlat10.xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat27 = (-u_xlat27) + 1.0;
    u_xlat27 = u_xlat29 * u_xlat27;
    u_xlat4.xyz = vec3(u_xlat27) * u_xlat0.xyz + u_xlat1.xyz;
    SV_Target0 = u_xlat4;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "HALF_RESOLUTION_PARTICLE_ON" "MSAA_INTERPOLATION" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	mediump float _MHYZBias;
uniform 	vec4 hlslcc_mtx4x4_mhyJitteredVP[4];
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
mediump vec4 u_xlat16_3;
bool u_xlatb3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat6;
mediump vec3 u_xlat16_7;
float u_xlat11;
mediump float u_xlat16_12;
float u_xlat18;
bool u_xlatb18;
float u_xlat19;
float u_xlat24;
bool u_xlatb24;
float u_xlat27;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat2.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    gl_Position = u_xlat2;
    vs_TEXCOORD2.zw = u_xlat2.zw;
    vs_COLOR0 = in_COLOR0;
    u_xlat3.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat24 = u_xlat3.y * _HeigtFogParams.x;
    u_xlat18 = u_xlat24 * -1.44269502;
    u_xlat18 = exp2(u_xlat18);
    u_xlat18 = (-u_xlat18) + 1.0;
    u_xlat18 = u_xlat18 / u_xlat24;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(0.00999999978<abs(u_xlat24));
#else
    u_xlatb24 = 0.00999999978<abs(u_xlat24);
#endif
    u_xlat16_4.x = (u_xlatb24) ? u_xlat18 : 1.0;
    u_xlat24 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat24 = sqrt(u_xlat24);
    u_xlat18 = u_xlat24 * _HeigtFogParams.y;
    u_xlat16_4.x = u_xlat18 * u_xlat16_4.x;
    u_xlat16_4.x = exp2((-u_xlat16_4.x));
    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
    u_xlat18 = u_xlat3.y * _HeigtFogParams2.x;
    u_xlat27 = u_xlat18 * -1.44269502;
    u_xlat27 = exp2(u_xlat27);
    u_xlat27 = (-u_xlat27) + 1.0;
    u_xlat27 = u_xlat27 / u_xlat18;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(0.00999999978<abs(u_xlat18));
#else
    u_xlatb18 = 0.00999999978<abs(u_xlat18);
#endif
    u_xlat16_12 = (u_xlatb18) ? u_xlat27 : 1.0;
    u_xlat18 = u_xlat24 * _HeigtFogParams2.y;
    u_xlat16_12 = u_xlat18 * u_xlat16_12;
    u_xlat16_12 = exp2((-u_xlat16_12));
    u_xlat16_4.y = (-u_xlat16_12) + 1.0;
    u_xlat16_4.xy = max(u_xlat16_4.xy, vec2(0.0, 0.0));
    u_xlat16_4.x = u_xlat16_4.y + u_xlat16_4.x;
    u_xlat18 = u_xlat24 * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat16_12 = (-u_xlat18) + 2.0;
    u_xlat16_12 = u_xlat18 * u_xlat16_12;
    u_xlat18 = u_xlat16_12 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat18 = u_xlat18 + 1.0;
    u_xlat16_4.x = u_xlat18 * u_xlat16_4.x;
    u_xlat18 = min(u_xlat16_4.x, _HeigtFogColBase.w);
    u_xlat27 = (-u_xlat18) + 1.0;
    u_xlat5.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat5.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat5.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat3.x = dot(u_xlat3.xyz, u_xlat5.xyz);
    u_xlat11 = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!((-u_xlat3.x)>=u_xlat11);
#else
    u_xlatb3 = (-u_xlat3.x)>=u_xlat11;
#endif
    u_xlat11 = u_xlat24 * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat11 = min(max(u_xlat11, 0.0), 1.0);
#else
    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
#endif
    u_xlat24 = u_xlat24 + (-_HeigtFogRamp.w);
    u_xlat24 = u_xlat24 * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat19 = (-u_xlat11) + 2.0;
    u_xlat11 = u_xlat19 * u_xlat11;
    u_xlat19 = u_xlat11 * _HeigtFogColDelta.w;
    u_xlat3.x = (u_xlatb3) ? u_xlat19 : u_xlat11;
    u_xlat3.x = log2(u_xlat3.x);
    u_xlat3.x = u_xlat3.x * unity_FogColor.w;
    u_xlat3.x = exp2(u_xlat3.x);
    u_xlat3.x = min(u_xlat3.x, _HeigtFogColBase.w);
    u_xlat11 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat11 = min(max(u_xlat11, 0.0), 1.0);
#else
    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
#endif
    u_xlat16_4.x = (-u_xlat11) + 2.0;
    u_xlat16_4.x = u_xlat11 * u_xlat16_4.x;
    u_xlat5.xyz = u_xlat16_4.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat6.xyz = (-u_xlat5.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat5.xyz = vec3(u_xlat24) * u_xlat6.xyz + u_xlat5.xyz;
    u_xlat5.xyz = u_xlat3.xxx * u_xlat5.xyz;
    u_xlat24 = (-u_xlat3.x) + 1.0;
    vs_TEXCOORD0.w = u_xlat27 * u_xlat24;
    u_xlat3.xyz = vec3(u_xlat27) * u_xlat5.xyz;
    u_xlat24 = u_xlat0.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    u_xlat0.xyz = vec3(u_xlat24) * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    vs_TEXCOORD0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat3.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat0.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    u_xlat16_4.x = u_xlat0.y * u_xlat0.y;
    u_xlat16_4.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_4.x);
    u_xlat16_3 = u_xlat0.yzzx * u_xlat0.xyzz;
    u_xlat16_7.x = dot(unity_SHBr, u_xlat16_3);
    u_xlat16_7.y = dot(unity_SHBg, u_xlat16_3);
    u_xlat16_7.z = dot(unity_SHBb, u_xlat16_3);
    u_xlat16_4.xyz = unity_SHC.xyz * u_xlat16_4.xxx + u_xlat16_7.xyz;
    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat0.w = 1.0;
    u_xlat16_7.x = dot(unity_SHAr, u_xlat0);
    u_xlat16_7.y = dot(unity_SHAg, u_xlat0);
    u_xlat16_7.z = dot(unity_SHAb, u_xlat0);
    u_xlat16_4.xyz = u_xlat16_4.xyz + u_xlat16_7.xyz;
    vs_TEXCOORD1.xyz = u_xlat16_4.xyz;
    vs_TEXCOORD1.w = 1.0;
    u_xlat5.x = float(0.5);
    u_xlat5.z = float(0.5);
    u_xlat5.y = _ProjectionParams.x;
    u_xlat2.xyz = u_xlat2.xyw * u_xlat5.xyz;
    u_xlat2.w = u_xlat2.y * 0.5;
    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4_mhyJitteredVP[1];
    u_xlat2 = hlslcc_mtx4x4_mhyJitteredVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4_mhyJitteredVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat2.xyz = vec3(u_xlat5.z * u_xlat1.x, u_xlat5.y * u_xlat1.y, u_xlat5.z * u_xlat1.w);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    u_xlat2.w = u_xlat2.y * 0.5;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat24 = dot(hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, hlslcc_mtx4x4unity_ObjectToWorld[0].xyz);
    vs_TEXCOORD4.z = sqrt(u_xlat24);
    u_xlat24 = dot(hlslcc_mtx4x4unity_ObjectToWorld[1].xyz, hlslcc_mtx4x4unity_ObjectToWorld[1].xyz);
    vs_TEXCOORD4.w = sqrt(u_xlat24);
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD5.w = 0.0;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
    vs_TEXCOORD6.xyz = u_xlat1.xyz;
    vs_TEXCOORD6.w = 0.0;
    vs_TEXCOORD7.xyz = u_xlat0.xyz;
    vs_TEXCOORD7.w = 0.0;
    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
    u_xlat24 = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD8.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    vs_TEXCOORD8.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _LightColor0;
uniform 	float _AlphaRange;
uniform 	float _AlphaOffset;
uniform 	float _Opacity;
uniform 	mediump float _BottomAlphaToggle;
uniform 	float _AlphaBottomRange;
uniform 	float _AlphaBottomOffset;
uniform 	vec4 _WaterfallTex01_ST;
uniform 	mediump vec4 _FoamUVCoord01;
uniform 	mediump vec4 _FoamUVCoord02;
uniform 	float _FoamRange;
uniform 	float _FoamOffset;
uniform 	vec4 _DayColor;
uniform 	vec4 _BottomColor;
uniform 	vec4 _TopColor;
uniform 	float _ColorGradientRange;
uniform 	float _ColorGradientOffset;
uniform 	vec4 _ReflectionColor_Dark;
uniform 	vec4 _ReflectionColor_Light;
uniform 	float _Normal01_U_Speed;
uniform 	vec4 _Normal01_ST;
uniform 	float _Normal01_VSpeed;
uniform 	float _Normal02_U_Speed;
uniform 	vec4 _Normal02_ST;
uniform 	float _Normal02_V_Speed;
uniform 	vec4 _DistortionIntensity;
uniform 	float _ReflectionBrightness;
uniform 	float _ReflectionIntensity;
uniform 	float _WaterFall01_Speed;
uniform 	float _Waterfall02_Speed;
uniform 	mediump vec4 _WaterfallPatternColor;
uniform 	float _Waterfall01Brightness;
uniform 	float _Waterfall02Brightness;
uniform 	float _SprayRange;
uniform 	float _SprayOffset;
uniform 	float _ShadowStrength;
uniform 	vec4 _WaterfallSpecTex_ST;
uniform 	float _Detail01_U_Speed;
uniform 	vec4 _NoiseTex_ST;
uniform 	float _Detail01_V_Speed;
uniform 	float _NoiselDistortionValue;
uniform 	mediump vec4 _WaterfallSpecColor;
uniform 	mediump vec4 _FoamColor;
uniform 	vec3 _ES_MainLightColor;
uniform lowp sampler2D _WaterfallTex01;
uniform lowp sampler2D _Normal01;
uniform lowp sampler2D _Normal02;
uniform lowp samplerCube _Reflection;
uniform lowp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _WaterfallSpecTex;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
in highp vec4 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
bvec2 u_xlatb0;
vec4 u_xlat1;
lowp float u_xlat10_1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
vec4 u_xlat3;
vec3 u_xlat4;
lowp vec3 u_xlat10_4;
vec3 u_xlat5;
vec3 u_xlat6;
mediump vec3 u_xlat16_7;
float u_xlat8;
vec3 u_xlat9;
vec3 u_xlat10;
mediump float u_xlat16_15;
vec2 u_xlat16;
mediump float u_xlat16_16;
lowp float u_xlat10_16;
bool u_xlatb16;
float u_xlat18;
float u_xlat24;
mediump float u_xlat16_24;
lowp float u_xlat10_24;
bool u_xlatb24;
float u_xlat25;
lowp float u_xlat10_25;
bool u_xlatb25;
float u_xlat26;
bool u_xlatb26;
float u_xlat27;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.x = vs_TEXCOORD4.y * _AlphaRange + _AlphaOffset;
    u_xlat8 = vs_TEXCOORD4.y * _AlphaBottomRange + _AlphaBottomOffset;
#ifdef UNITY_ADRENO_ES3
    u_xlat8 = min(max(u_xlat8, 0.0), 1.0);
#else
    u_xlat8 = clamp(u_xlat8, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(_BottomAlphaToggle==1.0);
#else
    u_xlatb16 = _BottomAlphaToggle==1.0;
#endif
    u_xlat8 = (u_xlatb16) ? u_xlat8 : 1.0;
    u_xlat16.xy = vs_TEXCOORD4.xy * _WaterfallTex01_ST.xy + _WaterfallTex01_ST.zw;
    u_xlat1.xy = vec2(u_xlat16.x * vs_TEXCOORD4.z, u_xlat16.y * vs_TEXCOORD4.w);
    u_xlat16.xy = vec2(_Time.y * _FoamUVCoord01.z, _Time.y * _FoamUVCoord01.w);
    u_xlat16.xy = u_xlat1.xy * _FoamUVCoord01.xy + u_xlat16.xy;
    u_xlat2.xy = vec2(_Time.y * _FoamUVCoord02.z, _Time.y * _FoamUVCoord02.w);
    u_xlat2.xy = u_xlat1.xy * _FoamUVCoord02.xy + u_xlat2.xy;
    u_xlat18 = vs_TEXCOORD4.y * _FoamRange + _FoamOffset;
    u_xlat10_16 = texture(_WaterfallTex01, u_xlat16.xy).x;
    u_xlat10_24 = texture(_WaterfallTex01, u_xlat2.xy).y;
    u_xlat16_16 = u_xlat10_24 + u_xlat10_16;
    u_xlat16.x = u_xlat18 + u_xlat16_16;
#ifdef UNITY_ADRENO_ES3
    u_xlat16.x = min(max(u_xlat16.x, 0.0), 1.0);
#else
    u_xlat16.x = clamp(u_xlat16.x, 0.0, 1.0);
#endif
    u_xlat24 = vs_TEXCOORD4.y * _ColorGradientRange + _ColorGradientOffset;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat2.xyw = (-_BottomColor.xyz) + _TopColor.xyz;
    u_xlat2.xyw = vec3(u_xlat24) * u_xlat2.xyw + _BottomColor.xyz;
    u_xlat3.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat24 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat3.xyz = vec3(u_xlat24) * u_xlat3.xyz;
    u_xlat4.xy = vs_TEXCOORD4.xy * _Normal01_ST.xy + _Normal01_ST.zw;
    u_xlat24 = _Time.y * _Normal01_VSpeed;
    u_xlat27 = u_xlat4.x * vs_TEXCOORD4.z;
    u_xlat5.x = _Time.y * _Normal01_U_Speed + u_xlat27;
    u_xlat5.y = u_xlat4.y * vs_TEXCOORD4.w + u_xlat24;
    u_xlat4.xy = vs_TEXCOORD4.xy * _Normal02_ST.xy + _Normal02_ST.zw;
    u_xlat4.xy = vec2(u_xlat4.x * vs_TEXCOORD4.z, u_xlat4.y * vs_TEXCOORD4.w);
    u_xlat6.x = _Time.y * _Normal02_U_Speed + u_xlat4.x;
    u_xlat6.y = _Time.y * _Normal02_V_Speed + u_xlat4.y;
    u_xlat10_4.xyz = texture(_Normal01, u_xlat5.xy).xyz;
    u_xlat16_7.xyz = u_xlat10_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat10_4.xyz = texture(_Normal02, u_xlat6.xy).xyz;
    u_xlat16_7.xyz = u_xlat10_4.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_7.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat4.xyz = u_xlat16_7.xyz * _DistortionIntensity.xyz;
    u_xlat5.x = vs_TEXCOORD6.x;
    u_xlat5.y = vs_TEXCOORD8.x;
    u_xlat5.z = vs_TEXCOORD7.x;
    u_xlat5.x = dot(u_xlat5.xyz, u_xlat4.xyz);
    u_xlat6.x = vs_TEXCOORD6.y;
    u_xlat6.y = vs_TEXCOORD8.y;
    u_xlat6.z = vs_TEXCOORD7.y;
    u_xlat5.y = dot(u_xlat6.xyz, u_xlat4.xyz);
    u_xlat6.x = vs_TEXCOORD6.z;
    u_xlat6.y = vs_TEXCOORD8.z;
    u_xlat6.z = vs_TEXCOORD7.z;
    u_xlat5.z = dot(u_xlat6.xyz, u_xlat4.xyz);
    u_xlat24 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat4.xyz = vec3(u_xlat24) * u_xlat5.xyz;
    u_xlat24 = dot((-u_xlat3.xyz), u_xlat4.xyz);
    u_xlat24 = u_xlat24 + u_xlat24;
    u_xlat3.xyz = u_xlat4.xyz * (-vec3(u_xlat24)) + (-u_xlat3.xyz);
    u_xlat10_24 = texture(_Reflection, u_xlat3.xyz).x;
    u_xlat3.xyz = (-_ReflectionColor_Dark.xyz) + _ReflectionColor_Light.xyz;
    u_xlat3.xyz = vec3(u_xlat10_24) * u_xlat3.xyz + _ReflectionColor_Dark.xyz;
    u_xlat4.xyz = u_xlat2.xyw * vec3(0.200000003, 0.200000003, 0.200000003);
    u_xlat2.xyw = u_xlat2.xyw * u_xlat3.xyz;
    u_xlat2.xyw = u_xlat2.xyw * vec3(_ReflectionBrightness) + (-u_xlat4.xyz);
    u_xlat2.xyw = vec3(vec3(_ReflectionIntensity, _ReflectionIntensity, _ReflectionIntensity)) * u_xlat2.xyw + u_xlat4.xyz;
    u_xlat1.zw = _Time.yy * vec2(_WaterFall01_Speed, _Waterfall02_Speed) + u_xlat1.yy;
    u_xlat10_24 = texture(_WaterfallTex01, u_xlat1.xz).x;
    u_xlat10_1 = texture(_WaterfallTex01, u_xlat1.xw).y;
    u_xlat16_7.x = (-u_xlat10_24) + u_xlat10_1;
    u_xlat16_7.x = u_xlat10_1 * u_xlat16_7.x + u_xlat10_24;
    u_xlat9.x = u_xlat10_1 * _Waterfall02Brightness;
    u_xlat24 = u_xlat10_24 * _Waterfall01Brightness;
    u_xlat1.x = u_xlat10_1 * _Waterfall02Brightness + (-u_xlat24);
    u_xlat24 = u_xlat9.x * u_xlat1.x + u_xlat24;
    u_xlat1.x = vs_TEXCOORD4.y * _SprayRange + _SprayOffset;
    u_xlat1.x = (-u_xlat1.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat24 = u_xlat24 * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat16_7.xxx * _WaterfallPatternColor.xyz + (-u_xlat2.xyw);
    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz + u_xlat2.xyw;
    u_xlat2.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat10_24 = texture(_ShadowMapTexture, u_xlat2.xy).x;
    u_xlat25 = (-_ShadowStrength) + 1.0;
    u_xlat24 = u_xlat10_24 * u_xlat25 + _ShadowStrength;
    u_xlat2.xy = vs_TEXCOORD4.xy * _WaterfallSpecTex_ST.xy + _WaterfallSpecTex_ST.zw;
    u_xlat16_7.x = vs_TEXCOORD4.w * 0.5;
    u_xlat16_7.x = vs_TEXCOORD4.w * u_xlat2.y + (-u_xlat16_7.x);
    u_xlat10.xz = vs_TEXCOORD4.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat3.x = _Time.y * _Detail01_U_Speed + u_xlat10.x;
    u_xlat3.y = _Time.y * _Detail01_V_Speed + u_xlat10.z;
    u_xlat10_25 = texture(_NoiseTex, u_xlat3.xy).x;
    u_xlat2.x = u_xlat10_25 * _NoiselDistortionValue + u_xlat2.x;
    u_xlat2.y = u_xlat10_25 * _NoiselDistortionValue + u_xlat16_7.x;
    u_xlat10_25 = texture(_WaterfallSpecTex, u_xlat2.xy).x;
    u_xlat16_2.xyw = vec3(u_xlat10_25) * _WaterfallSpecColor.xyz;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x * _Opacity;
    u_xlat0.x = u_xlat8 * u_xlat0.x;
    u_xlat3.w = u_xlat16.x * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat3.w = min(max(u_xlat3.w, 0.0), 1.0);
#else
    u_xlat3.w = clamp(u_xlat3.w, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat1.xyz * _DayColor.xyz;
    u_xlat0.xyw = u_xlat1.xyz * vec3(u_xlat24) + u_xlat16_2.xyw;
    u_xlat1.x = (-u_xlat18) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat16.x = u_xlat16.x * u_xlat1.x;
    u_xlat0.xyz = u_xlat16.xxx * _FoamColor.xyz + u_xlat0.xyw;
    u_xlat0.xyz = u_xlat0.xyz * _ES_MainLightColor.xyz;
    u_xlat16_24 = max(_LightColor0.w, 1.0);
    u_xlat0.xyz = vec3(u_xlat16_24) * u_xlat0.xyz;
    u_xlat1.xyz = vs_TEXCOORD5.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat24 = dot(u_xlat1.xyz, u_xlat2.xyz);
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlat9.y = u_xlat1.x * _HeigtFogParams.y;
    u_xlat25 = u_xlat1.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat25 = min(max(u_xlat25, 0.0), 1.0);
#else
    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
#endif
    u_xlat2.x = (-u_xlat25) + 2.0;
    u_xlat25 = u_xlat25 * u_xlat2.x;
    u_xlat2.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!((-u_xlat24)>=u_xlat2.x);
#else
    u_xlatb24 = (-u_xlat24)>=u_xlat2.x;
#endif
    u_xlat2.x = u_xlat25 * _HeigtFogColDelta.w;
    u_xlat24 = (u_xlatb24) ? u_xlat2.x : u_xlat25;
    u_xlat24 = log2(u_xlat24);
    u_xlat24 = u_xlat24 * unity_FogColor.w;
    u_xlat24 = exp2(u_xlat24);
    u_xlat24 = min(u_xlat24, _HeigtFogColBase.w);
    u_xlat25 = vs_TEXCOORD5.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat25 = min(max(u_xlat25, 0.0), 1.0);
#else
    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
#endif
    u_xlat16_7.x = (-u_xlat25) + 2.0;
    u_xlat16_7.x = u_xlat25 * u_xlat16_7.x;
    u_xlat2.xyz = u_xlat16_7.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat25 = u_xlat1.x + (-_HeigtFogRamp.w);
    u_xlat25 = u_xlat25 * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat25 = min(max(u_xlat25, 0.0), 1.0);
#else
    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
#endif
    u_xlat4.xyz = (-u_xlat2.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat2.xyz = vec3(u_xlat25) * u_xlat4.xyz + u_xlat2.xyz;
    u_xlat25 = u_xlat1.y * _HeigtFogParams.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb26 = !!(0.00999999978<abs(u_xlat25));
#else
    u_xlatb26 = 0.00999999978<abs(u_xlat25);
#endif
    u_xlat4.x = u_xlat25 * -1.44269502;
    u_xlat4.x = exp2(u_xlat4.x);
    u_xlat4.x = (-u_xlat4.x) + 1.0;
    u_xlat25 = u_xlat4.x / u_xlat25;
    u_xlat16_7.x = (u_xlatb26) ? u_xlat25 : 1.0;
    u_xlat9.x = u_xlat1.y * _HeigtFogParams2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb25 = !!(0.00999999978<abs(u_xlat9.x));
#else
    u_xlatb25 = 0.00999999978<abs(u_xlat9.x);
#endif
    u_xlat26 = u_xlat9.x * -1.44269502;
    u_xlat26 = exp2(u_xlat26);
    u_xlat26 = (-u_xlat26) + 1.0;
    u_xlat9.x = u_xlat26 / u_xlat9.x;
    u_xlat16_7.y = (u_xlatb25) ? u_xlat9.x : 1.0;
    u_xlat9.x = u_xlat1.x * _HeigtFogParams2.y;
    u_xlat16_7.xy = u_xlat9.yx * u_xlat16_7.xy;
    u_xlat16_7.x = exp2((-u_xlat16_7.x));
    u_xlat16_7.x = (-u_xlat16_7.x) + 1.0;
    u_xlat16_15 = exp2((-u_xlat16_7.y));
    u_xlat16_7.y = (-u_xlat16_15) + 1.0;
    u_xlat16_7.xy = max(u_xlat16_7.xy, vec2(0.0, 0.0));
    u_xlat16_7.x = u_xlat16_7.y + u_xlat16_7.x;
    u_xlat1.x = u_xlat1.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat16_15 = (-u_xlat1.x) + 2.0;
    u_xlat16_15 = u_xlat1.x * u_xlat16_15;
    u_xlat1.x = u_xlat16_15 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat1.x = u_xlat1.x + 1.0;
    u_xlat16_7.x = u_xlat1.x * u_xlat16_7.x;
    u_xlat1.x = min(u_xlat16_7.x, _HeigtFogColBase.w);
    u_xlat9.x = vs_TEXCOORD5.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat9.x = min(max(u_xlat9.x, 0.0), 1.0);
#else
    u_xlat9.x = clamp(u_xlat9.x, 0.0, 1.0);
#endif
    u_xlat9.xyz = u_xlat9.xxx * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz;
    u_xlat26 = (-u_xlat1.x) + 1.0;
    u_xlat2.xyz = vec3(u_xlat26) * u_xlat2.xyz;
    u_xlat1.xyz = u_xlat9.xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat24 = (-u_xlat24) + 1.0;
    u_xlat24 = u_xlat26 * u_xlat24;
    u_xlat3.xyz = vec3(u_xlat24) * u_xlat0.xyz + u_xlat1.xyz;
    SV_Target0 = u_xlat3;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "HALF_RESOLUTION_PARTICLE_ON" "MSAA_INTERPOLATION" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	mediump float _MHYZBias;
uniform 	vec4 hlslcc_mtx4x4_mhyJitteredVP[4];
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
mediump vec4 u_xlat16_3;
bool u_xlatb3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat6;
mediump vec3 u_xlat16_7;
float u_xlat11;
mediump float u_xlat16_12;
float u_xlat18;
bool u_xlatb18;
float u_xlat19;
float u_xlat24;
bool u_xlatb24;
float u_xlat27;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat2.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    gl_Position = u_xlat2;
    vs_TEXCOORD2.zw = u_xlat2.zw;
    vs_COLOR0 = in_COLOR0;
    u_xlat3.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat24 = u_xlat3.y * _HeigtFogParams.x;
    u_xlat18 = u_xlat24 * -1.44269502;
    u_xlat18 = exp2(u_xlat18);
    u_xlat18 = (-u_xlat18) + 1.0;
    u_xlat18 = u_xlat18 / u_xlat24;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(0.00999999978<abs(u_xlat24));
#else
    u_xlatb24 = 0.00999999978<abs(u_xlat24);
#endif
    u_xlat16_4.x = (u_xlatb24) ? u_xlat18 : 1.0;
    u_xlat24 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat24 = sqrt(u_xlat24);
    u_xlat18 = u_xlat24 * _HeigtFogParams.y;
    u_xlat16_4.x = u_xlat18 * u_xlat16_4.x;
    u_xlat16_4.x = exp2((-u_xlat16_4.x));
    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
    u_xlat18 = u_xlat3.y * _HeigtFogParams2.x;
    u_xlat27 = u_xlat18 * -1.44269502;
    u_xlat27 = exp2(u_xlat27);
    u_xlat27 = (-u_xlat27) + 1.0;
    u_xlat27 = u_xlat27 / u_xlat18;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(0.00999999978<abs(u_xlat18));
#else
    u_xlatb18 = 0.00999999978<abs(u_xlat18);
#endif
    u_xlat16_12 = (u_xlatb18) ? u_xlat27 : 1.0;
    u_xlat18 = u_xlat24 * _HeigtFogParams2.y;
    u_xlat16_12 = u_xlat18 * u_xlat16_12;
    u_xlat16_12 = exp2((-u_xlat16_12));
    u_xlat16_4.y = (-u_xlat16_12) + 1.0;
    u_xlat16_4.xy = max(u_xlat16_4.xy, vec2(0.0, 0.0));
    u_xlat16_4.x = u_xlat16_4.y + u_xlat16_4.x;
    u_xlat18 = u_xlat24 * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat16_12 = (-u_xlat18) + 2.0;
    u_xlat16_12 = u_xlat18 * u_xlat16_12;
    u_xlat18 = u_xlat16_12 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat18 = u_xlat18 + 1.0;
    u_xlat16_4.x = u_xlat18 * u_xlat16_4.x;
    u_xlat18 = min(u_xlat16_4.x, _HeigtFogColBase.w);
    u_xlat27 = (-u_xlat18) + 1.0;
    u_xlat5.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat5.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat5.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat3.x = dot(u_xlat3.xyz, u_xlat5.xyz);
    u_xlat11 = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!((-u_xlat3.x)>=u_xlat11);
#else
    u_xlatb3 = (-u_xlat3.x)>=u_xlat11;
#endif
    u_xlat11 = u_xlat24 * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat11 = min(max(u_xlat11, 0.0), 1.0);
#else
    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
#endif
    u_xlat24 = u_xlat24 + (-_HeigtFogRamp.w);
    u_xlat24 = u_xlat24 * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat19 = (-u_xlat11) + 2.0;
    u_xlat11 = u_xlat19 * u_xlat11;
    u_xlat19 = u_xlat11 * _HeigtFogColDelta.w;
    u_xlat3.x = (u_xlatb3) ? u_xlat19 : u_xlat11;
    u_xlat3.x = log2(u_xlat3.x);
    u_xlat3.x = u_xlat3.x * unity_FogColor.w;
    u_xlat3.x = exp2(u_xlat3.x);
    u_xlat3.x = min(u_xlat3.x, _HeigtFogColBase.w);
    u_xlat11 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat11 = min(max(u_xlat11, 0.0), 1.0);
#else
    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
#endif
    u_xlat16_4.x = (-u_xlat11) + 2.0;
    u_xlat16_4.x = u_xlat11 * u_xlat16_4.x;
    u_xlat5.xyz = u_xlat16_4.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat6.xyz = (-u_xlat5.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat5.xyz = vec3(u_xlat24) * u_xlat6.xyz + u_xlat5.xyz;
    u_xlat5.xyz = u_xlat3.xxx * u_xlat5.xyz;
    u_xlat24 = (-u_xlat3.x) + 1.0;
    vs_TEXCOORD0.w = u_xlat27 * u_xlat24;
    u_xlat3.xyz = vec3(u_xlat27) * u_xlat5.xyz;
    u_xlat24 = u_xlat0.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    u_xlat0.xyz = vec3(u_xlat24) * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    vs_TEXCOORD0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat3.xyz;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat0.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    u_xlat16_4.x = u_xlat0.y * u_xlat0.y;
    u_xlat16_4.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_4.x);
    u_xlat16_3 = u_xlat0.yzzx * u_xlat0.xyzz;
    u_xlat16_7.x = dot(unity_SHBr, u_xlat16_3);
    u_xlat16_7.y = dot(unity_SHBg, u_xlat16_3);
    u_xlat16_7.z = dot(unity_SHBb, u_xlat16_3);
    u_xlat16_4.xyz = unity_SHC.xyz * u_xlat16_4.xxx + u_xlat16_7.xyz;
    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat0.w = 1.0;
    u_xlat16_7.x = dot(unity_SHAr, u_xlat0);
    u_xlat16_7.y = dot(unity_SHAg, u_xlat0);
    u_xlat16_7.z = dot(unity_SHAb, u_xlat0);
    u_xlat16_4.xyz = u_xlat16_4.xyz + u_xlat16_7.xyz;
    vs_TEXCOORD1.xyz = u_xlat16_4.xyz;
    vs_TEXCOORD1.w = 1.0;
    u_xlat5.x = float(0.5);
    u_xlat5.z = float(0.5);
    u_xlat5.y = _ProjectionParams.x;
    u_xlat2.xyz = u_xlat2.xyw * u_xlat5.xyz;
    u_xlat2.w = u_xlat2.y * 0.5;
    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4_mhyJitteredVP[1];
    u_xlat2 = hlslcc_mtx4x4_mhyJitteredVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4_mhyJitteredVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat2.xyz = vec3(u_xlat5.z * u_xlat1.x, u_xlat5.y * u_xlat1.y, u_xlat5.z * u_xlat1.w);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    u_xlat2.w = u_xlat2.y * 0.5;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat24 = dot(hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, hlslcc_mtx4x4unity_ObjectToWorld[0].xyz);
    vs_TEXCOORD4.z = sqrt(u_xlat24);
    u_xlat24 = dot(hlslcc_mtx4x4unity_ObjectToWorld[1].xyz, hlslcc_mtx4x4unity_ObjectToWorld[1].xyz);
    vs_TEXCOORD4.w = sqrt(u_xlat24);
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD5.w = 0.0;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
    vs_TEXCOORD6.xyz = u_xlat1.xyz;
    vs_TEXCOORD6.w = 0.0;
    vs_TEXCOORD7.xyz = u_xlat0.xyz;
    vs_TEXCOORD7.w = 0.0;
    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
    u_xlat24 = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD8.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    vs_TEXCOORD8.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _LightColor0;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	float _AlphaRange;
uniform 	float _AlphaOffset;
uniform 	float _Opacity;
uniform 	mediump float _BottomAlphaToggle;
uniform 	float _AlphaBottomRange;
uniform 	float _AlphaBottomOffset;
uniform 	vec4 _WaterfallTex01_ST;
uniform 	mediump vec4 _FoamUVCoord01;
uniform 	mediump vec4 _FoamUVCoord02;
uniform 	float _FoamRange;
uniform 	float _FoamOffset;
uniform 	vec4 _DayColor;
uniform 	vec4 _BottomColor;
uniform 	vec4 _TopColor;
uniform 	float _ColorGradientRange;
uniform 	float _ColorGradientOffset;
uniform 	vec4 _ReflectionColor_Dark;
uniform 	vec4 _ReflectionColor_Light;
uniform 	float _Normal01_U_Speed;
uniform 	vec4 _Normal01_ST;
uniform 	float _Normal01_VSpeed;
uniform 	float _Normal02_U_Speed;
uniform 	vec4 _Normal02_ST;
uniform 	float _Normal02_V_Speed;
uniform 	vec4 _DistortionIntensity;
uniform 	float _ReflectionBrightness;
uniform 	float _ReflectionIntensity;
uniform 	float _WaterFall01_Speed;
uniform 	float _Waterfall02_Speed;
uniform 	mediump vec4 _WaterfallPatternColor;
uniform 	float _Waterfall01Brightness;
uniform 	float _Waterfall02Brightness;
uniform 	float _SprayRange;
uniform 	float _SprayOffset;
uniform 	float _ShadowStrength;
uniform 	vec4 _WaterfallSpecTex_ST;
uniform 	float _Detail01_U_Speed;
uniform 	vec4 _NoiseTex_ST;
uniform 	float _Detail01_V_Speed;
uniform 	float _NoiselDistortionValue;
uniform 	mediump vec4 _WaterfallSpecColor;
uniform 	mediump vec4 _FoamColor;
uniform 	vec3 _ES_MainLightColor;
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _WaterfallTex01;
uniform lowp sampler2D _Normal01;
uniform lowp sampler2D _Normal02;
uniform lowp samplerCube _Reflection;
uniform lowp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _WaterfallSpecTex;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
in highp vec4 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
lowp float u_xlat10_0;
bvec2 u_xlatb0;
vec3 u_xlat1;
vec4 u_xlat2;
lowp float u_xlat10_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
vec4 u_xlat4;
vec3 u_xlat5;
lowp vec3 u_xlat10_5;
vec3 u_xlat6;
vec3 u_xlat7;
mediump vec3 u_xlat16_8;
vec3 u_xlat9;
lowp float u_xlat10_9;
vec3 u_xlat10;
mediump float u_xlat16_10;
lowp float u_xlat10_10;
bool u_xlatb10;
float u_xlat11;
vec2 u_xlat12;
mediump float u_xlat16_17;
float u_xlat18;
float u_xlat19;
lowp float u_xlat10_19;
float u_xlat27;
mediump float u_xlat16_27;
bool u_xlatb27;
float u_xlat28;
bool u_xlatb28;
float u_xlat29;
bool u_xlatb29;
float u_xlat30;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat18 = texture(_CameraDepthTextureScaled, u_xlat0.xy).x;
    u_xlat18 = u_xlat18 * _ProjectionParams.z + (-vs_TEXCOORD3.w);
    u_xlat27 = u_xlat18 * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
    u_xlat18 = u_xlat18 / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat1.x = (-u_xlat27) + 1.0;
    u_xlat18 = u_xlat18 * u_xlat1.x + u_xlat27;
    u_xlat27 = vs_TEXCOORD4.y * _AlphaRange + _AlphaOffset;
    u_xlat1.x = vs_TEXCOORD4.y * _AlphaBottomRange + _AlphaBottomOffset;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(_BottomAlphaToggle==1.0);
#else
    u_xlatb10 = _BottomAlphaToggle==1.0;
#endif
    u_xlat1.x = (u_xlatb10) ? u_xlat1.x : 1.0;
    u_xlat10.xy = vs_TEXCOORD4.xy * _WaterfallTex01_ST.xy + _WaterfallTex01_ST.zw;
    u_xlat2.xy = vec2(u_xlat10.x * vs_TEXCOORD4.z, u_xlat10.y * vs_TEXCOORD4.w);
    u_xlat10.xy = vec2(_Time.y * _FoamUVCoord01.z, _Time.y * _FoamUVCoord01.w);
    u_xlat10.xy = u_xlat2.xy * _FoamUVCoord01.xy + u_xlat10.xy;
    u_xlat3.xy = vec2(_Time.y * _FoamUVCoord02.z, _Time.y * _FoamUVCoord02.w);
    u_xlat3.xy = u_xlat2.xy * _FoamUVCoord02.xy + u_xlat3.xy;
    u_xlat28 = vs_TEXCOORD4.y * _FoamRange + _FoamOffset;
    u_xlat10_10 = texture(_WaterfallTex01, u_xlat10.xy).x;
    u_xlat10_19 = texture(_WaterfallTex01, u_xlat3.xy).y;
    u_xlat16_10 = u_xlat10_19 + u_xlat10_10;
    u_xlat10.x = u_xlat28 + u_xlat16_10;
#ifdef UNITY_ADRENO_ES3
    u_xlat10.x = min(max(u_xlat10.x, 0.0), 1.0);
#else
    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
#endif
    u_xlat19 = vs_TEXCOORD4.y * _ColorGradientRange + _ColorGradientOffset;
#ifdef UNITY_ADRENO_ES3
    u_xlat19 = min(max(u_xlat19, 0.0), 1.0);
#else
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
#endif
    u_xlat3.xyz = (-_BottomColor.xyz) + _TopColor.xyz;
    u_xlat3.xyz = vec3(u_xlat19) * u_xlat3.xyz + _BottomColor.xyz;
    u_xlat4.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat19 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat19 = inversesqrt(u_xlat19);
    u_xlat4.xyz = vec3(u_xlat19) * u_xlat4.xyz;
    u_xlat5.xy = vs_TEXCOORD4.xy * _Normal01_ST.xy + _Normal01_ST.zw;
    u_xlat19 = _Time.y * _Normal01_VSpeed;
    u_xlat30 = u_xlat5.x * vs_TEXCOORD4.z;
    u_xlat6.x = _Time.y * _Normal01_U_Speed + u_xlat30;
    u_xlat6.y = u_xlat5.y * vs_TEXCOORD4.w + u_xlat19;
    u_xlat5.xy = vs_TEXCOORD4.xy * _Normal02_ST.xy + _Normal02_ST.zw;
    u_xlat5.xy = vec2(u_xlat5.x * vs_TEXCOORD4.z, u_xlat5.y * vs_TEXCOORD4.w);
    u_xlat7.x = _Time.y * _Normal02_U_Speed + u_xlat5.x;
    u_xlat7.y = _Time.y * _Normal02_V_Speed + u_xlat5.y;
    u_xlat10_5.xyz = texture(_Normal01, u_xlat6.xy).xyz;
    u_xlat16_8.xyz = u_xlat10_5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat10_5.xyz = texture(_Normal02, u_xlat7.xy).xyz;
    u_xlat16_8.xyz = u_xlat10_5.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_8.xyz;
    u_xlat16_8.xyz = u_xlat16_8.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat5.xyz = u_xlat16_8.xyz * _DistortionIntensity.xyz;
    u_xlat6.x = vs_TEXCOORD6.x;
    u_xlat6.y = vs_TEXCOORD8.x;
    u_xlat6.z = vs_TEXCOORD7.x;
    u_xlat6.x = dot(u_xlat6.xyz, u_xlat5.xyz);
    u_xlat7.x = vs_TEXCOORD6.y;
    u_xlat7.y = vs_TEXCOORD8.y;
    u_xlat7.z = vs_TEXCOORD7.y;
    u_xlat6.y = dot(u_xlat7.xyz, u_xlat5.xyz);
    u_xlat7.x = vs_TEXCOORD6.z;
    u_xlat7.y = vs_TEXCOORD8.z;
    u_xlat7.z = vs_TEXCOORD7.z;
    u_xlat6.z = dot(u_xlat7.xyz, u_xlat5.xyz);
    u_xlat19 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat19 = inversesqrt(u_xlat19);
    u_xlat5.xyz = vec3(u_xlat19) * u_xlat6.xyz;
    u_xlat19 = dot((-u_xlat4.xyz), u_xlat5.xyz);
    u_xlat19 = u_xlat19 + u_xlat19;
    u_xlat4.xyz = u_xlat5.xyz * (-vec3(u_xlat19)) + (-u_xlat4.xyz);
    u_xlat10_19 = texture(_Reflection, u_xlat4.xyz).x;
    u_xlat4.xyz = (-_ReflectionColor_Dark.xyz) + _ReflectionColor_Light.xyz;
    u_xlat4.xyz = vec3(u_xlat10_19) * u_xlat4.xyz + _ReflectionColor_Dark.xyz;
    u_xlat5.xyz = u_xlat3.xyz * vec3(0.200000003, 0.200000003, 0.200000003);
    u_xlat3.xyz = u_xlat3.xyz * u_xlat4.xyz;
    u_xlat3.xyz = u_xlat3.xyz * vec3(_ReflectionBrightness) + (-u_xlat5.xyz);
    u_xlat3.xyz = vec3(vec3(_ReflectionIntensity, _ReflectionIntensity, _ReflectionIntensity)) * u_xlat3.xyz + u_xlat5.xyz;
    u_xlat2.zw = _Time.yy * vec2(_WaterFall01_Speed, _Waterfall02_Speed) + u_xlat2.yy;
    u_xlat10_19 = texture(_WaterfallTex01, u_xlat2.xz).x;
    u_xlat10_2 = texture(_WaterfallTex01, u_xlat2.xw).y;
    u_xlat16_8.x = (-u_xlat10_19) + u_xlat10_2;
    u_xlat16_8.x = u_xlat10_2 * u_xlat16_8.x + u_xlat10_19;
    u_xlat11 = u_xlat10_2 * _Waterfall02Brightness;
    u_xlat19 = u_xlat10_19 * _Waterfall01Brightness;
    u_xlat2.x = u_xlat10_2 * _Waterfall02Brightness + (-u_xlat19);
    u_xlat19 = u_xlat11 * u_xlat2.x + u_xlat19;
    u_xlat2.x = vs_TEXCOORD4.y * _SprayRange + _SprayOffset;
    u_xlat2.x = (-u_xlat2.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat19 = u_xlat19 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat19 = min(max(u_xlat19, 0.0), 1.0);
#else
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
#endif
    u_xlat2.xyz = u_xlat16_8.xxx * _WaterfallPatternColor.xyz + (-u_xlat3.xyz);
    u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz + u_xlat3.xyz;
    u_xlat10_0 = texture(_ShadowMapTexture, u_xlat0.xy).x;
    u_xlat9.x = (-_ShadowStrength) + 1.0;
    u_xlat0.x = u_xlat10_0 * u_xlat9.x + _ShadowStrength;
    u_xlat3.xy = vs_TEXCOORD4.xy * _WaterfallSpecTex_ST.xy + _WaterfallSpecTex_ST.zw;
    u_xlat16_8.x = vs_TEXCOORD4.w * 0.5;
    u_xlat16_8.x = vs_TEXCOORD4.w * u_xlat3.y + (-u_xlat16_8.x);
    u_xlat12.xy = vs_TEXCOORD4.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat4.x = _Time.y * _Detail01_U_Speed + u_xlat12.x;
    u_xlat4.y = _Time.y * _Detail01_V_Speed + u_xlat12.y;
    u_xlat10_9 = texture(_NoiseTex, u_xlat4.xy).x;
    u_xlat3.x = u_xlat10_9 * _NoiselDistortionValue + u_xlat3.x;
    u_xlat3.y = u_xlat10_9 * _NoiselDistortionValue + u_xlat16_8.x;
    u_xlat10_9 = texture(_WaterfallSpecTex, u_xlat3.xy).x;
    u_xlat16_3.xyz = vec3(u_xlat10_9) * _WaterfallSpecColor.xyz;
    u_xlat9.x = (-u_xlat27) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat9.x = min(max(u_xlat9.x, 0.0), 1.0);
#else
    u_xlat9.x = clamp(u_xlat9.x, 0.0, 1.0);
#endif
    u_xlat9.x = u_xlat9.x * u_xlat18;
    u_xlat9.x = u_xlat9.x * _Opacity;
    u_xlat9.x = u_xlat1.x * u_xlat9.x;
    u_xlat4.w = u_xlat10.x * u_xlat9.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.w = min(max(u_xlat4.w, 0.0), 1.0);
#else
    u_xlat4.w = clamp(u_xlat4.w, 0.0, 1.0);
#endif
    u_xlat9.xyz = u_xlat2.xyz * _DayColor.xyz;
    u_xlat0.xyz = u_xlat9.xyz * u_xlat0.xxx + u_xlat16_3.xyz;
    u_xlat27 = (-u_xlat28) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
    u_xlat27 = u_xlat27 * u_xlat10.x;
    u_xlat0.xyz = vec3(u_xlat27) * _FoamColor.xyz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * _ES_MainLightColor.xyz;
    u_xlat16_27 = max(_LightColor0.w, 1.0);
    u_xlat0.xyz = vec3(u_xlat16_27) * u_xlat0.xyz;
    u_xlat1.xyz = vs_TEXCOORD5.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat27 = dot(u_xlat1.xyz, u_xlat2.xyz);
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlat10.y = u_xlat1.x * _HeigtFogParams.y;
    u_xlat28 = u_xlat1.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat28 = min(max(u_xlat28, 0.0), 1.0);
#else
    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
#endif
    u_xlat2.x = (-u_xlat28) + 2.0;
    u_xlat28 = u_xlat28 * u_xlat2.x;
    u_xlat2.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!((-u_xlat27)>=u_xlat2.x);
#else
    u_xlatb27 = (-u_xlat27)>=u_xlat2.x;
#endif
    u_xlat2.x = u_xlat28 * _HeigtFogColDelta.w;
    u_xlat27 = (u_xlatb27) ? u_xlat2.x : u_xlat28;
    u_xlat27 = log2(u_xlat27);
    u_xlat27 = u_xlat27 * unity_FogColor.w;
    u_xlat27 = exp2(u_xlat27);
    u_xlat27 = min(u_xlat27, _HeigtFogColBase.w);
    u_xlat28 = vs_TEXCOORD5.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat28 = min(max(u_xlat28, 0.0), 1.0);
#else
    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
#endif
    u_xlat16_8.x = (-u_xlat28) + 2.0;
    u_xlat16_8.x = u_xlat28 * u_xlat16_8.x;
    u_xlat2.xyz = u_xlat16_8.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat28 = u_xlat1.x + (-_HeigtFogRamp.w);
    u_xlat28 = u_xlat28 * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat28 = min(max(u_xlat28, 0.0), 1.0);
#else
    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
#endif
    u_xlat3.xyz = (-u_xlat2.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat2.xyz = vec3(u_xlat28) * u_xlat3.xyz + u_xlat2.xyz;
    u_xlat28 = u_xlat1.y * _HeigtFogParams.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb29 = !!(0.00999999978<abs(u_xlat28));
#else
    u_xlatb29 = 0.00999999978<abs(u_xlat28);
#endif
    u_xlat3.x = u_xlat28 * -1.44269502;
    u_xlat3.x = exp2(u_xlat3.x);
    u_xlat3.x = (-u_xlat3.x) + 1.0;
    u_xlat28 = u_xlat3.x / u_xlat28;
    u_xlat16_8.x = (u_xlatb29) ? u_xlat28 : 1.0;
    u_xlat10.x = u_xlat1.y * _HeigtFogParams2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb28 = !!(0.00999999978<abs(u_xlat10.x));
#else
    u_xlatb28 = 0.00999999978<abs(u_xlat10.x);
#endif
    u_xlat29 = u_xlat10.x * -1.44269502;
    u_xlat29 = exp2(u_xlat29);
    u_xlat29 = (-u_xlat29) + 1.0;
    u_xlat10.x = u_xlat29 / u_xlat10.x;
    u_xlat16_8.y = (u_xlatb28) ? u_xlat10.x : 1.0;
    u_xlat10.x = u_xlat1.x * _HeigtFogParams2.y;
    u_xlat16_8.xy = u_xlat10.yx * u_xlat16_8.xy;
    u_xlat16_8.x = exp2((-u_xlat16_8.x));
    u_xlat16_8.x = (-u_xlat16_8.x) + 1.0;
    u_xlat16_17 = exp2((-u_xlat16_8.y));
    u_xlat16_8.y = (-u_xlat16_17) + 1.0;
    u_xlat16_8.xy = max(u_xlat16_8.xy, vec2(0.0, 0.0));
    u_xlat16_8.x = u_xlat16_8.y + u_xlat16_8.x;
    u_xlat1.x = u_xlat1.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat16_17 = (-u_xlat1.x) + 2.0;
    u_xlat16_17 = u_xlat1.x * u_xlat16_17;
    u_xlat1.x = u_xlat16_17 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat1.x = u_xlat1.x + 1.0;
    u_xlat16_8.x = u_xlat1.x * u_xlat16_8.x;
    u_xlat1.x = min(u_xlat16_8.x, _HeigtFogColBase.w);
    u_xlat10.x = vs_TEXCOORD5.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat10.x = min(max(u_xlat10.x, 0.0), 1.0);
#else
    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
#endif
    u_xlat10.xyz = u_xlat10.xxx * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    u_xlat2.xyz = vec3(u_xlat27) * u_xlat2.xyz;
    u_xlat29 = (-u_xlat1.x) + 1.0;
    u_xlat2.xyz = vec3(u_xlat29) * u_xlat2.xyz;
    u_xlat1.xyz = u_xlat10.xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat27 = (-u_xlat27) + 1.0;
    u_xlat27 = u_xlat29 * u_xlat27;
    u_xlat4.xyz = vec3(u_xlat27) * u_xlat0.xyz + u_xlat1.xyz;
    SV_Target0 = u_xlat4;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "MSAA_INTERPOLATION" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	mediump float _MHYZBias;
uniform 	vec4 hlslcc_mtx4x4_mhyJitteredVP[4];
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
vec3 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
bool u_xlatb3;
mediump vec3 u_xlat16_4;
float u_xlat5;
mediump vec4 u_xlat16_5;
vec3 u_xlat6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
float u_xlat11;
mediump float u_xlat16_12;
vec3 u_xlat13;
float u_xlat17;
bool u_xlatb17;
float u_xlat19;
float u_xlat24;
float u_xlat27;
bool u_xlatb27;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat8.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    u_xlat1.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position = u_xlat1;
    vs_TEXCOORD2.zw = u_xlat1.zw;
    vs_COLOR0 = in_COLOR0;
    u_xlat3.xyz = u_xlat8.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat17 = u_xlat3.y * _HeigtFogParams.x;
    u_xlat27 = u_xlat17 * -1.44269502;
    u_xlat27 = exp2(u_xlat27);
    u_xlat27 = (-u_xlat27) + 1.0;
    u_xlat27 = u_xlat27 / u_xlat17;
#ifdef UNITY_ADRENO_ES3
    u_xlatb17 = !!(0.00999999978<abs(u_xlat17));
#else
    u_xlatb17 = 0.00999999978<abs(u_xlat17);
#endif
    u_xlat16_4.x = (u_xlatb17) ? u_xlat27 : 1.0;
    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat17 = sqrt(u_xlat17);
    u_xlat27 = u_xlat17 * _HeigtFogParams.y;
    u_xlat16_4.x = u_xlat27 * u_xlat16_4.x;
    u_xlat16_4.x = exp2((-u_xlat16_4.x));
    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
    u_xlat27 = u_xlat3.y * _HeigtFogParams2.x;
    u_xlat5 = u_xlat27 * -1.44269502;
    u_xlat5 = exp2(u_xlat5);
    u_xlat5 = (-u_xlat5) + 1.0;
    u_xlat5 = u_xlat5 / u_xlat27;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(0.00999999978<abs(u_xlat27));
#else
    u_xlatb27 = 0.00999999978<abs(u_xlat27);
#endif
    u_xlat16_12 = (u_xlatb27) ? u_xlat5 : 1.0;
    u_xlat27 = u_xlat17 * _HeigtFogParams2.y;
    u_xlat16_12 = u_xlat27 * u_xlat16_12;
    u_xlat16_12 = exp2((-u_xlat16_12));
    u_xlat16_4.y = (-u_xlat16_12) + 1.0;
    u_xlat16_4.xy = max(u_xlat16_4.xy, vec2(0.0, 0.0));
    u_xlat16_4.x = u_xlat16_4.y + u_xlat16_4.x;
    u_xlat27 = u_xlat17 * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
    u_xlat16_12 = (-u_xlat27) + 2.0;
    u_xlat16_12 = u_xlat27 * u_xlat16_12;
    u_xlat27 = u_xlat16_12 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat27 = u_xlat27 + 1.0;
    u_xlat16_4.x = u_xlat27 * u_xlat16_4.x;
    u_xlat27 = min(u_xlat16_4.x, _HeigtFogColBase.w);
    u_xlat5 = (-u_xlat27) + 1.0;
    u_xlat13.x = _ProjectionParams.z * 0.999899983;
    u_xlat6.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat6.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat6.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat3.x = dot(u_xlat3.xyz, u_xlat6.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!((-u_xlat3.x)>=u_xlat13.x);
#else
    u_xlatb3 = (-u_xlat3.x)>=u_xlat13.x;
#endif
    u_xlat11 = u_xlat17 * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat11 = min(max(u_xlat11, 0.0), 1.0);
#else
    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
#endif
    u_xlat17 = u_xlat17 + (-_HeigtFogRamp.w);
    u_xlat17 = u_xlat17 * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat17 = min(max(u_xlat17, 0.0), 1.0);
#else
    u_xlat17 = clamp(u_xlat17, 0.0, 1.0);
#endif
    u_xlat19 = (-u_xlat11) + 2.0;
    u_xlat11 = u_xlat19 * u_xlat11;
    u_xlat19 = u_xlat11 * _HeigtFogColDelta.w;
    u_xlat3.x = (u_xlatb3) ? u_xlat19 : u_xlat11;
    u_xlat3.x = log2(u_xlat3.x);
    u_xlat3.x = u_xlat3.x * unity_FogColor.w;
    u_xlat3.x = exp2(u_xlat3.x);
    u_xlat3.x = min(u_xlat3.x, _HeigtFogColBase.w);
    u_xlat11 = u_xlat8.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat11 = min(max(u_xlat11, 0.0), 1.0);
#else
    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
#endif
    u_xlat16_4.x = (-u_xlat11) + 2.0;
    u_xlat16_4.x = u_xlat11 * u_xlat16_4.x;
    u_xlat13.xyz = u_xlat16_4.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat6.xyz = (-u_xlat13.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat13.xyz = vec3(u_xlat17) * u_xlat6.xyz + u_xlat13.xyz;
    u_xlat13.xyz = u_xlat3.xxx * u_xlat13.xyz;
    u_xlat17 = (-u_xlat3.x) + 1.0;
    vs_TEXCOORD0.w = u_xlat5 * u_xlat17;
    u_xlat3.xyz = vec3(u_xlat5) * u_xlat13.xyz;
    u_xlat17 = u_xlat8.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat17 = min(max(u_xlat17, 0.0), 1.0);
#else
    u_xlat17 = clamp(u_xlat17, 0.0, 1.0);
#endif
    vs_TEXCOORD5.xyz = u_xlat8.xyz;
    u_xlat8.xyz = vec3(u_xlat17) * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    vs_TEXCOORD0.xyz = u_xlat8.xyz * vec3(u_xlat27) + u_xlat3.xyz;
    u_xlat3.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat3.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat3.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat8.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat3.xyz = u_xlat8.xxx * u_xlat3.xyz;
    u_xlat16_4.x = u_xlat3.y * u_xlat3.y;
    u_xlat16_4.x = u_xlat3.x * u_xlat3.x + (-u_xlat16_4.x);
    u_xlat16_5 = u_xlat3.yzzx * u_xlat3.xyzz;
    u_xlat16_7.x = dot(unity_SHBr, u_xlat16_5);
    u_xlat16_7.y = dot(unity_SHBg, u_xlat16_5);
    u_xlat16_7.z = dot(unity_SHBb, u_xlat16_5);
    u_xlat16_4.xyz = unity_SHC.xyz * u_xlat16_4.xxx + u_xlat16_7.xyz;
    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat3.w = 1.0;
    u_xlat16_7.x = dot(unity_SHAr, u_xlat3);
    u_xlat16_7.y = dot(unity_SHAg, u_xlat3);
    u_xlat16_7.z = dot(unity_SHAb, u_xlat3);
    u_xlat16_4.xyz = u_xlat16_4.xyz + u_xlat16_7.xyz;
    vs_TEXCOORD1.xyz = u_xlat16_4.xyz;
    vs_TEXCOORD1.w = 1.0;
    u_xlat6.x = float(0.5);
    u_xlat6.z = float(0.5);
    u_xlat6.y = _ProjectionParams.x;
    u_xlat1.xyz = u_xlat1.xyw * u_xlat6.xyz;
    u_xlat1.w = u_xlat1.y * 0.5;
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4_mhyJitteredVP[1];
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[3] * u_xlat2.wwww + u_xlat1;
    u_xlat2.xyz = vec3(u_xlat6.z * u_xlat1.x, u_xlat6.y * u_xlat1.y, u_xlat6.z * u_xlat1.w);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    u_xlat2.w = u_xlat2.y * 0.5;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy;
    u_xlat8.x = dot(unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz);
    vs_TEXCOORD4.z = sqrt(u_xlat8.x);
    u_xlat8.x = dot(unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz);
    vs_TEXCOORD4.w = sqrt(u_xlat8.x);
    vs_TEXCOORD5.w = 0.0;
    u_xlat8.xyz = in_TANGENT0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat8.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_TANGENT0.xxx + u_xlat8.xyz;
    u_xlat0.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_TANGENT0.zzz + u_xlat8.xyz;
    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat0.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    vs_TEXCOORD6.xyz = u_xlat0.xyz;
    vs_TEXCOORD6.w = 0.0;
    vs_TEXCOORD7.xyz = u_xlat3.xyz;
    vs_TEXCOORD7.w = 0.0;
    u_xlat1.xyz = u_xlat0.yzx * u_xlat3.zxy;
    u_xlat0.xyz = u_xlat3.yzx * u_xlat0.zxy + (-u_xlat1.xyz);
    u_xlat24 = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD8.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    vs_TEXCOORD8.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _LightColor0;
uniform 	float _AlphaRange;
uniform 	float _AlphaOffset;
uniform 	float _Opacity;
uniform 	mediump float _BottomAlphaToggle;
uniform 	float _AlphaBottomRange;
uniform 	float _AlphaBottomOffset;
uniform 	vec4 _WaterfallTex01_ST;
uniform 	mediump vec4 _FoamUVCoord01;
uniform 	mediump vec4 _FoamUVCoord02;
uniform 	float _FoamRange;
uniform 	float _FoamOffset;
uniform 	vec4 _DayColor;
uniform 	vec4 _BottomColor;
uniform 	vec4 _TopColor;
uniform 	float _ColorGradientRange;
uniform 	float _ColorGradientOffset;
uniform 	vec4 _ReflectionColor_Dark;
uniform 	vec4 _ReflectionColor_Light;
uniform 	float _Normal01_U_Speed;
uniform 	vec4 _Normal01_ST;
uniform 	float _Normal01_VSpeed;
uniform 	float _Normal02_U_Speed;
uniform 	vec4 _Normal02_ST;
uniform 	float _Normal02_V_Speed;
uniform 	vec4 _DistortionIntensity;
uniform 	float _ReflectionBrightness;
uniform 	float _ReflectionIntensity;
uniform 	float _WaterFall01_Speed;
uniform 	float _Waterfall02_Speed;
uniform 	mediump vec4 _WaterfallPatternColor;
uniform 	float _Waterfall01Brightness;
uniform 	float _Waterfall02Brightness;
uniform 	float _SprayRange;
uniform 	float _SprayOffset;
uniform 	float _ShadowStrength;
uniform 	vec4 _WaterfallSpecTex_ST;
uniform 	float _Detail01_U_Speed;
uniform 	vec4 _NoiseTex_ST;
uniform 	float _Detail01_V_Speed;
uniform 	float _NoiselDistortionValue;
uniform 	mediump vec4 _WaterfallSpecColor;
uniform 	mediump vec4 _FoamColor;
uniform 	vec3 _ES_MainLightColor;
uniform lowp sampler2D _WaterfallTex01;
uniform lowp sampler2D _Normal01;
uniform lowp sampler2D _Normal02;
uniform lowp samplerCube _Reflection;
uniform lowp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _WaterfallSpecTex;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
in highp vec4 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
bvec2 u_xlatb0;
vec4 u_xlat1;
lowp float u_xlat10_1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
vec4 u_xlat3;
vec3 u_xlat4;
lowp vec3 u_xlat10_4;
vec3 u_xlat5;
vec3 u_xlat6;
mediump vec3 u_xlat16_7;
float u_xlat8;
vec3 u_xlat9;
vec3 u_xlat10;
mediump float u_xlat16_15;
vec2 u_xlat16;
mediump float u_xlat16_16;
lowp float u_xlat10_16;
bool u_xlatb16;
float u_xlat18;
float u_xlat24;
mediump float u_xlat16_24;
lowp float u_xlat10_24;
bool u_xlatb24;
float u_xlat25;
lowp float u_xlat10_25;
bool u_xlatb25;
float u_xlat26;
bool u_xlatb26;
float u_xlat27;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.x = vs_TEXCOORD4.y * _AlphaRange + _AlphaOffset;
    u_xlat8 = vs_TEXCOORD4.y * _AlphaBottomRange + _AlphaBottomOffset;
#ifdef UNITY_ADRENO_ES3
    u_xlat8 = min(max(u_xlat8, 0.0), 1.0);
#else
    u_xlat8 = clamp(u_xlat8, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(_BottomAlphaToggle==1.0);
#else
    u_xlatb16 = _BottomAlphaToggle==1.0;
#endif
    u_xlat8 = (u_xlatb16) ? u_xlat8 : 1.0;
    u_xlat16.xy = vs_TEXCOORD4.xy * _WaterfallTex01_ST.xy + _WaterfallTex01_ST.zw;
    u_xlat1.xy = vec2(u_xlat16.x * vs_TEXCOORD4.z, u_xlat16.y * vs_TEXCOORD4.w);
    u_xlat16.xy = vec2(_Time.y * _FoamUVCoord01.z, _Time.y * _FoamUVCoord01.w);
    u_xlat16.xy = u_xlat1.xy * _FoamUVCoord01.xy + u_xlat16.xy;
    u_xlat2.xy = vec2(_Time.y * _FoamUVCoord02.z, _Time.y * _FoamUVCoord02.w);
    u_xlat2.xy = u_xlat1.xy * _FoamUVCoord02.xy + u_xlat2.xy;
    u_xlat18 = vs_TEXCOORD4.y * _FoamRange + _FoamOffset;
    u_xlat10_16 = texture(_WaterfallTex01, u_xlat16.xy).x;
    u_xlat10_24 = texture(_WaterfallTex01, u_xlat2.xy).y;
    u_xlat16_16 = u_xlat10_24 + u_xlat10_16;
    u_xlat16.x = u_xlat18 + u_xlat16_16;
#ifdef UNITY_ADRENO_ES3
    u_xlat16.x = min(max(u_xlat16.x, 0.0), 1.0);
#else
    u_xlat16.x = clamp(u_xlat16.x, 0.0, 1.0);
#endif
    u_xlat24 = vs_TEXCOORD4.y * _ColorGradientRange + _ColorGradientOffset;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat2.xyw = (-_BottomColor.xyz) + _TopColor.xyz;
    u_xlat2.xyw = vec3(u_xlat24) * u_xlat2.xyw + _BottomColor.xyz;
    u_xlat3.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat24 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat3.xyz = vec3(u_xlat24) * u_xlat3.xyz;
    u_xlat4.xy = vs_TEXCOORD4.xy * _Normal01_ST.xy + _Normal01_ST.zw;
    u_xlat24 = _Time.y * _Normal01_VSpeed;
    u_xlat27 = u_xlat4.x * vs_TEXCOORD4.z;
    u_xlat5.x = _Time.y * _Normal01_U_Speed + u_xlat27;
    u_xlat5.y = u_xlat4.y * vs_TEXCOORD4.w + u_xlat24;
    u_xlat4.xy = vs_TEXCOORD4.xy * _Normal02_ST.xy + _Normal02_ST.zw;
    u_xlat4.xy = vec2(u_xlat4.x * vs_TEXCOORD4.z, u_xlat4.y * vs_TEXCOORD4.w);
    u_xlat6.x = _Time.y * _Normal02_U_Speed + u_xlat4.x;
    u_xlat6.y = _Time.y * _Normal02_V_Speed + u_xlat4.y;
    u_xlat10_4.xyz = texture(_Normal01, u_xlat5.xy).xyz;
    u_xlat16_7.xyz = u_xlat10_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat10_4.xyz = texture(_Normal02, u_xlat6.xy).xyz;
    u_xlat16_7.xyz = u_xlat10_4.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_7.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat4.xyz = u_xlat16_7.xyz * _DistortionIntensity.xyz;
    u_xlat5.x = vs_TEXCOORD6.x;
    u_xlat5.y = vs_TEXCOORD8.x;
    u_xlat5.z = vs_TEXCOORD7.x;
    u_xlat5.x = dot(u_xlat5.xyz, u_xlat4.xyz);
    u_xlat6.x = vs_TEXCOORD6.y;
    u_xlat6.y = vs_TEXCOORD8.y;
    u_xlat6.z = vs_TEXCOORD7.y;
    u_xlat5.y = dot(u_xlat6.xyz, u_xlat4.xyz);
    u_xlat6.x = vs_TEXCOORD6.z;
    u_xlat6.y = vs_TEXCOORD8.z;
    u_xlat6.z = vs_TEXCOORD7.z;
    u_xlat5.z = dot(u_xlat6.xyz, u_xlat4.xyz);
    u_xlat24 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat4.xyz = vec3(u_xlat24) * u_xlat5.xyz;
    u_xlat24 = dot((-u_xlat3.xyz), u_xlat4.xyz);
    u_xlat24 = u_xlat24 + u_xlat24;
    u_xlat3.xyz = u_xlat4.xyz * (-vec3(u_xlat24)) + (-u_xlat3.xyz);
    u_xlat10_24 = texture(_Reflection, u_xlat3.xyz).x;
    u_xlat3.xyz = (-_ReflectionColor_Dark.xyz) + _ReflectionColor_Light.xyz;
    u_xlat3.xyz = vec3(u_xlat10_24) * u_xlat3.xyz + _ReflectionColor_Dark.xyz;
    u_xlat4.xyz = u_xlat2.xyw * vec3(0.200000003, 0.200000003, 0.200000003);
    u_xlat2.xyw = u_xlat2.xyw * u_xlat3.xyz;
    u_xlat2.xyw = u_xlat2.xyw * vec3(_ReflectionBrightness) + (-u_xlat4.xyz);
    u_xlat2.xyw = vec3(vec3(_ReflectionIntensity, _ReflectionIntensity, _ReflectionIntensity)) * u_xlat2.xyw + u_xlat4.xyz;
    u_xlat1.zw = _Time.yy * vec2(_WaterFall01_Speed, _Waterfall02_Speed) + u_xlat1.yy;
    u_xlat10_24 = texture(_WaterfallTex01, u_xlat1.xz).x;
    u_xlat10_1 = texture(_WaterfallTex01, u_xlat1.xw).y;
    u_xlat16_7.x = (-u_xlat10_24) + u_xlat10_1;
    u_xlat16_7.x = u_xlat10_1 * u_xlat16_7.x + u_xlat10_24;
    u_xlat9.x = u_xlat10_1 * _Waterfall02Brightness;
    u_xlat24 = u_xlat10_24 * _Waterfall01Brightness;
    u_xlat1.x = u_xlat10_1 * _Waterfall02Brightness + (-u_xlat24);
    u_xlat24 = u_xlat9.x * u_xlat1.x + u_xlat24;
    u_xlat1.x = vs_TEXCOORD4.y * _SprayRange + _SprayOffset;
    u_xlat1.x = (-u_xlat1.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat24 = u_xlat24 * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat16_7.xxx * _WaterfallPatternColor.xyz + (-u_xlat2.xyw);
    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz + u_xlat2.xyw;
    u_xlat2.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat10_24 = texture(_ShadowMapTexture, u_xlat2.xy).x;
    u_xlat25 = (-_ShadowStrength) + 1.0;
    u_xlat24 = u_xlat10_24 * u_xlat25 + _ShadowStrength;
    u_xlat2.xy = vs_TEXCOORD4.xy * _WaterfallSpecTex_ST.xy + _WaterfallSpecTex_ST.zw;
    u_xlat16_7.x = vs_TEXCOORD4.w * 0.5;
    u_xlat16_7.x = vs_TEXCOORD4.w * u_xlat2.y + (-u_xlat16_7.x);
    u_xlat10.xz = vs_TEXCOORD4.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat3.x = _Time.y * _Detail01_U_Speed + u_xlat10.x;
    u_xlat3.y = _Time.y * _Detail01_V_Speed + u_xlat10.z;
    u_xlat10_25 = texture(_NoiseTex, u_xlat3.xy).x;
    u_xlat2.x = u_xlat10_25 * _NoiselDistortionValue + u_xlat2.x;
    u_xlat2.y = u_xlat10_25 * _NoiselDistortionValue + u_xlat16_7.x;
    u_xlat10_25 = texture(_WaterfallSpecTex, u_xlat2.xy).x;
    u_xlat16_2.xyw = vec3(u_xlat10_25) * _WaterfallSpecColor.xyz;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x * _Opacity;
    u_xlat0.x = u_xlat8 * u_xlat0.x;
    u_xlat3.w = u_xlat16.x * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat3.w = min(max(u_xlat3.w, 0.0), 1.0);
#else
    u_xlat3.w = clamp(u_xlat3.w, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat1.xyz * _DayColor.xyz;
    u_xlat0.xyw = u_xlat1.xyz * vec3(u_xlat24) + u_xlat16_2.xyw;
    u_xlat1.x = (-u_xlat18) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat16.x = u_xlat16.x * u_xlat1.x;
    u_xlat0.xyz = u_xlat16.xxx * _FoamColor.xyz + u_xlat0.xyw;
    u_xlat0.xyz = u_xlat0.xyz * _ES_MainLightColor.xyz;
    u_xlat16_24 = max(_LightColor0.w, 1.0);
    u_xlat0.xyz = vec3(u_xlat16_24) * u_xlat0.xyz;
    u_xlat1.xyz = vs_TEXCOORD5.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat24 = dot(u_xlat1.xyz, u_xlat2.xyz);
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlat9.y = u_xlat1.x * _HeigtFogParams.y;
    u_xlat25 = u_xlat1.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat25 = min(max(u_xlat25, 0.0), 1.0);
#else
    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
#endif
    u_xlat2.x = (-u_xlat25) + 2.0;
    u_xlat25 = u_xlat25 * u_xlat2.x;
    u_xlat2.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!((-u_xlat24)>=u_xlat2.x);
#else
    u_xlatb24 = (-u_xlat24)>=u_xlat2.x;
#endif
    u_xlat2.x = u_xlat25 * _HeigtFogColDelta.w;
    u_xlat24 = (u_xlatb24) ? u_xlat2.x : u_xlat25;
    u_xlat24 = log2(u_xlat24);
    u_xlat24 = u_xlat24 * unity_FogColor.w;
    u_xlat24 = exp2(u_xlat24);
    u_xlat24 = min(u_xlat24, _HeigtFogColBase.w);
    u_xlat25 = vs_TEXCOORD5.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat25 = min(max(u_xlat25, 0.0), 1.0);
#else
    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
#endif
    u_xlat16_7.x = (-u_xlat25) + 2.0;
    u_xlat16_7.x = u_xlat25 * u_xlat16_7.x;
    u_xlat2.xyz = u_xlat16_7.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat25 = u_xlat1.x + (-_HeigtFogRamp.w);
    u_xlat25 = u_xlat25 * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat25 = min(max(u_xlat25, 0.0), 1.0);
#else
    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
#endif
    u_xlat4.xyz = (-u_xlat2.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat2.xyz = vec3(u_xlat25) * u_xlat4.xyz + u_xlat2.xyz;
    u_xlat25 = u_xlat1.y * _HeigtFogParams.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb26 = !!(0.00999999978<abs(u_xlat25));
#else
    u_xlatb26 = 0.00999999978<abs(u_xlat25);
#endif
    u_xlat4.x = u_xlat25 * -1.44269502;
    u_xlat4.x = exp2(u_xlat4.x);
    u_xlat4.x = (-u_xlat4.x) + 1.0;
    u_xlat25 = u_xlat4.x / u_xlat25;
    u_xlat16_7.x = (u_xlatb26) ? u_xlat25 : 1.0;
    u_xlat9.x = u_xlat1.y * _HeigtFogParams2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb25 = !!(0.00999999978<abs(u_xlat9.x));
#else
    u_xlatb25 = 0.00999999978<abs(u_xlat9.x);
#endif
    u_xlat26 = u_xlat9.x * -1.44269502;
    u_xlat26 = exp2(u_xlat26);
    u_xlat26 = (-u_xlat26) + 1.0;
    u_xlat9.x = u_xlat26 / u_xlat9.x;
    u_xlat16_7.y = (u_xlatb25) ? u_xlat9.x : 1.0;
    u_xlat9.x = u_xlat1.x * _HeigtFogParams2.y;
    u_xlat16_7.xy = u_xlat9.yx * u_xlat16_7.xy;
    u_xlat16_7.x = exp2((-u_xlat16_7.x));
    u_xlat16_7.x = (-u_xlat16_7.x) + 1.0;
    u_xlat16_15 = exp2((-u_xlat16_7.y));
    u_xlat16_7.y = (-u_xlat16_15) + 1.0;
    u_xlat16_7.xy = max(u_xlat16_7.xy, vec2(0.0, 0.0));
    u_xlat16_7.x = u_xlat16_7.y + u_xlat16_7.x;
    u_xlat1.x = u_xlat1.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat16_15 = (-u_xlat1.x) + 2.0;
    u_xlat16_15 = u_xlat1.x * u_xlat16_15;
    u_xlat1.x = u_xlat16_15 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat1.x = u_xlat1.x + 1.0;
    u_xlat16_7.x = u_xlat1.x * u_xlat16_7.x;
    u_xlat1.x = min(u_xlat16_7.x, _HeigtFogColBase.w);
    u_xlat9.x = vs_TEXCOORD5.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat9.x = min(max(u_xlat9.x, 0.0), 1.0);
#else
    u_xlat9.x = clamp(u_xlat9.x, 0.0, 1.0);
#endif
    u_xlat9.xyz = u_xlat9.xxx * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz;
    u_xlat26 = (-u_xlat1.x) + 1.0;
    u_xlat2.xyz = vec3(u_xlat26) * u_xlat2.xyz;
    u_xlat1.xyz = u_xlat9.xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat24 = (-u_xlat24) + 1.0;
    u_xlat24 = u_xlat26 * u_xlat24;
    u_xlat3.xyz = vec3(u_xlat24) * u_xlat0.xyz + u_xlat1.xyz;
    SV_Target0 = u_xlat3;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "MSAA_INTERPOLATION" "_SOFTPARTICLES_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	mediump float _MHYZBias;
uniform 	vec4 hlslcc_mtx4x4_mhyJitteredVP[4];
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
vec3 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
bool u_xlatb3;
mediump vec3 u_xlat16_4;
float u_xlat5;
mediump vec4 u_xlat16_5;
vec3 u_xlat6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
float u_xlat11;
mediump float u_xlat16_12;
vec3 u_xlat13;
float u_xlat17;
bool u_xlatb17;
float u_xlat19;
float u_xlat24;
float u_xlat27;
bool u_xlatb27;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat8.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    u_xlat1.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position = u_xlat1;
    vs_TEXCOORD2.zw = u_xlat1.zw;
    vs_COLOR0 = in_COLOR0;
    u_xlat3.xyz = u_xlat8.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat17 = u_xlat3.y * _HeigtFogParams.x;
    u_xlat27 = u_xlat17 * -1.44269502;
    u_xlat27 = exp2(u_xlat27);
    u_xlat27 = (-u_xlat27) + 1.0;
    u_xlat27 = u_xlat27 / u_xlat17;
#ifdef UNITY_ADRENO_ES3
    u_xlatb17 = !!(0.00999999978<abs(u_xlat17));
#else
    u_xlatb17 = 0.00999999978<abs(u_xlat17);
#endif
    u_xlat16_4.x = (u_xlatb17) ? u_xlat27 : 1.0;
    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat17 = sqrt(u_xlat17);
    u_xlat27 = u_xlat17 * _HeigtFogParams.y;
    u_xlat16_4.x = u_xlat27 * u_xlat16_4.x;
    u_xlat16_4.x = exp2((-u_xlat16_4.x));
    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
    u_xlat27 = u_xlat3.y * _HeigtFogParams2.x;
    u_xlat5 = u_xlat27 * -1.44269502;
    u_xlat5 = exp2(u_xlat5);
    u_xlat5 = (-u_xlat5) + 1.0;
    u_xlat5 = u_xlat5 / u_xlat27;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(0.00999999978<abs(u_xlat27));
#else
    u_xlatb27 = 0.00999999978<abs(u_xlat27);
#endif
    u_xlat16_12 = (u_xlatb27) ? u_xlat5 : 1.0;
    u_xlat27 = u_xlat17 * _HeigtFogParams2.y;
    u_xlat16_12 = u_xlat27 * u_xlat16_12;
    u_xlat16_12 = exp2((-u_xlat16_12));
    u_xlat16_4.y = (-u_xlat16_12) + 1.0;
    u_xlat16_4.xy = max(u_xlat16_4.xy, vec2(0.0, 0.0));
    u_xlat16_4.x = u_xlat16_4.y + u_xlat16_4.x;
    u_xlat27 = u_xlat17 * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
    u_xlat16_12 = (-u_xlat27) + 2.0;
    u_xlat16_12 = u_xlat27 * u_xlat16_12;
    u_xlat27 = u_xlat16_12 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat27 = u_xlat27 + 1.0;
    u_xlat16_4.x = u_xlat27 * u_xlat16_4.x;
    u_xlat27 = min(u_xlat16_4.x, _HeigtFogColBase.w);
    u_xlat5 = (-u_xlat27) + 1.0;
    u_xlat13.x = _ProjectionParams.z * 0.999899983;
    u_xlat6.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat6.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat6.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat3.x = dot(u_xlat3.xyz, u_xlat6.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!((-u_xlat3.x)>=u_xlat13.x);
#else
    u_xlatb3 = (-u_xlat3.x)>=u_xlat13.x;
#endif
    u_xlat11 = u_xlat17 * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat11 = min(max(u_xlat11, 0.0), 1.0);
#else
    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
#endif
    u_xlat17 = u_xlat17 + (-_HeigtFogRamp.w);
    u_xlat17 = u_xlat17 * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat17 = min(max(u_xlat17, 0.0), 1.0);
#else
    u_xlat17 = clamp(u_xlat17, 0.0, 1.0);
#endif
    u_xlat19 = (-u_xlat11) + 2.0;
    u_xlat11 = u_xlat19 * u_xlat11;
    u_xlat19 = u_xlat11 * _HeigtFogColDelta.w;
    u_xlat3.x = (u_xlatb3) ? u_xlat19 : u_xlat11;
    u_xlat3.x = log2(u_xlat3.x);
    u_xlat3.x = u_xlat3.x * unity_FogColor.w;
    u_xlat3.x = exp2(u_xlat3.x);
    u_xlat3.x = min(u_xlat3.x, _HeigtFogColBase.w);
    u_xlat11 = u_xlat8.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat11 = min(max(u_xlat11, 0.0), 1.0);
#else
    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
#endif
    u_xlat16_4.x = (-u_xlat11) + 2.0;
    u_xlat16_4.x = u_xlat11 * u_xlat16_4.x;
    u_xlat13.xyz = u_xlat16_4.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat6.xyz = (-u_xlat13.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat13.xyz = vec3(u_xlat17) * u_xlat6.xyz + u_xlat13.xyz;
    u_xlat13.xyz = u_xlat3.xxx * u_xlat13.xyz;
    u_xlat17 = (-u_xlat3.x) + 1.0;
    vs_TEXCOORD0.w = u_xlat5 * u_xlat17;
    u_xlat3.xyz = vec3(u_xlat5) * u_xlat13.xyz;
    u_xlat17 = u_xlat8.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat17 = min(max(u_xlat17, 0.0), 1.0);
#else
    u_xlat17 = clamp(u_xlat17, 0.0, 1.0);
#endif
    vs_TEXCOORD5.xyz = u_xlat8.xyz;
    u_xlat8.xyz = vec3(u_xlat17) * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    vs_TEXCOORD0.xyz = u_xlat8.xyz * vec3(u_xlat27) + u_xlat3.xyz;
    u_xlat3.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat3.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat3.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat8.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat3.xyz = u_xlat8.xxx * u_xlat3.xyz;
    u_xlat16_4.x = u_xlat3.y * u_xlat3.y;
    u_xlat16_4.x = u_xlat3.x * u_xlat3.x + (-u_xlat16_4.x);
    u_xlat16_5 = u_xlat3.yzzx * u_xlat3.xyzz;
    u_xlat16_7.x = dot(unity_SHBr, u_xlat16_5);
    u_xlat16_7.y = dot(unity_SHBg, u_xlat16_5);
    u_xlat16_7.z = dot(unity_SHBb, u_xlat16_5);
    u_xlat16_4.xyz = unity_SHC.xyz * u_xlat16_4.xxx + u_xlat16_7.xyz;
    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat3.w = 1.0;
    u_xlat16_7.x = dot(unity_SHAr, u_xlat3);
    u_xlat16_7.y = dot(unity_SHAg, u_xlat3);
    u_xlat16_7.z = dot(unity_SHAb, u_xlat3);
    u_xlat16_4.xyz = u_xlat16_4.xyz + u_xlat16_7.xyz;
    vs_TEXCOORD1.xyz = u_xlat16_4.xyz;
    vs_TEXCOORD1.w = 1.0;
    u_xlat6.x = float(0.5);
    u_xlat6.z = float(0.5);
    u_xlat6.y = _ProjectionParams.x;
    u_xlat1.xyz = u_xlat1.xyw * u_xlat6.xyz;
    u_xlat1.w = u_xlat1.y * 0.5;
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4_mhyJitteredVP[1];
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[3] * u_xlat2.wwww + u_xlat1;
    u_xlat2.xyz = vec3(u_xlat6.z * u_xlat1.x, u_xlat6.y * u_xlat1.y, u_xlat6.z * u_xlat1.w);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    u_xlat2.w = u_xlat2.y * 0.5;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy;
    u_xlat8.x = dot(unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz);
    vs_TEXCOORD4.z = sqrt(u_xlat8.x);
    u_xlat8.x = dot(unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz);
    vs_TEXCOORD4.w = sqrt(u_xlat8.x);
    vs_TEXCOORD5.w = 0.0;
    u_xlat8.xyz = in_TANGENT0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat8.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_TANGENT0.xxx + u_xlat8.xyz;
    u_xlat0.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_TANGENT0.zzz + u_xlat8.xyz;
    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat0.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    vs_TEXCOORD6.xyz = u_xlat0.xyz;
    vs_TEXCOORD6.w = 0.0;
    vs_TEXCOORD7.xyz = u_xlat3.xyz;
    vs_TEXCOORD7.w = 0.0;
    u_xlat1.xyz = u_xlat0.yzx * u_xlat3.zxy;
    u_xlat0.xyz = u_xlat3.yzx * u_xlat0.zxy + (-u_xlat1.xyz);
    u_xlat24 = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD8.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    vs_TEXCOORD8.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump vec4 _LightColor0;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	float _AlphaRange;
uniform 	float _AlphaOffset;
uniform 	float _Opacity;
uniform 	mediump float _BottomAlphaToggle;
uniform 	float _AlphaBottomRange;
uniform 	float _AlphaBottomOffset;
uniform 	vec4 _WaterfallTex01_ST;
uniform 	mediump vec4 _FoamUVCoord01;
uniform 	mediump vec4 _FoamUVCoord02;
uniform 	float _FoamRange;
uniform 	float _FoamOffset;
uniform 	vec4 _DayColor;
uniform 	vec4 _BottomColor;
uniform 	vec4 _TopColor;
uniform 	float _ColorGradientRange;
uniform 	float _ColorGradientOffset;
uniform 	vec4 _ReflectionColor_Dark;
uniform 	vec4 _ReflectionColor_Light;
uniform 	float _Normal01_U_Speed;
uniform 	vec4 _Normal01_ST;
uniform 	float _Normal01_VSpeed;
uniform 	float _Normal02_U_Speed;
uniform 	vec4 _Normal02_ST;
uniform 	float _Normal02_V_Speed;
uniform 	vec4 _DistortionIntensity;
uniform 	float _ReflectionBrightness;
uniform 	float _ReflectionIntensity;
uniform 	float _WaterFall01_Speed;
uniform 	float _Waterfall02_Speed;
uniform 	mediump vec4 _WaterfallPatternColor;
uniform 	float _Waterfall01Brightness;
uniform 	float _Waterfall02Brightness;
uniform 	float _SprayRange;
uniform 	float _SprayOffset;
uniform 	float _ShadowStrength;
uniform 	vec4 _WaterfallSpecTex_ST;
uniform 	float _Detail01_U_Speed;
uniform 	vec4 _NoiseTex_ST;
uniform 	float _Detail01_V_Speed;
uniform 	float _NoiselDistortionValue;
uniform 	mediump vec4 _WaterfallSpecColor;
uniform 	mediump vec4 _FoamColor;
uniform 	vec3 _ES_MainLightColor;
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _WaterfallTex01;
uniform lowp sampler2D _Normal01;
uniform lowp sampler2D _Normal02;
uniform lowp samplerCube _Reflection;
uniform lowp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _WaterfallSpecTex;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
in highp vec4 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
lowp float u_xlat10_0;
bvec2 u_xlatb0;
vec3 u_xlat1;
vec4 u_xlat2;
lowp float u_xlat10_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
vec4 u_xlat4;
vec3 u_xlat5;
lowp vec3 u_xlat10_5;
vec3 u_xlat6;
vec3 u_xlat7;
mediump vec3 u_xlat16_8;
vec3 u_xlat9;
lowp float u_xlat10_9;
vec3 u_xlat10;
mediump float u_xlat16_10;
lowp float u_xlat10_10;
bool u_xlatb10;
float u_xlat11;
vec2 u_xlat12;
mediump float u_xlat16_17;
float u_xlat18;
float u_xlat19;
lowp float u_xlat10_19;
float u_xlat27;
mediump float u_xlat16_27;
bool u_xlatb27;
float u_xlat28;
bool u_xlatb28;
float u_xlat29;
bool u_xlatb29;
float u_xlat30;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat18 = texture(_CameraDepthTextureScaled, u_xlat0.xy).x;
    u_xlat18 = u_xlat18 * _ProjectionParams.z + (-vs_TEXCOORD3.w);
    u_xlat27 = u_xlat18 * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
    u_xlat18 = u_xlat18 / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat1.x = (-u_xlat27) + 1.0;
    u_xlat18 = u_xlat18 * u_xlat1.x + u_xlat27;
    u_xlat27 = vs_TEXCOORD4.y * _AlphaRange + _AlphaOffset;
    u_xlat1.x = vs_TEXCOORD4.y * _AlphaBottomRange + _AlphaBottomOffset;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(_BottomAlphaToggle==1.0);
#else
    u_xlatb10 = _BottomAlphaToggle==1.0;
#endif
    u_xlat1.x = (u_xlatb10) ? u_xlat1.x : 1.0;
    u_xlat10.xy = vs_TEXCOORD4.xy * _WaterfallTex01_ST.xy + _WaterfallTex01_ST.zw;
    u_xlat2.xy = vec2(u_xlat10.x * vs_TEXCOORD4.z, u_xlat10.y * vs_TEXCOORD4.w);
    u_xlat10.xy = vec2(_Time.y * _FoamUVCoord01.z, _Time.y * _FoamUVCoord01.w);
    u_xlat10.xy = u_xlat2.xy * _FoamUVCoord01.xy + u_xlat10.xy;
    u_xlat3.xy = vec2(_Time.y * _FoamUVCoord02.z, _Time.y * _FoamUVCoord02.w);
    u_xlat3.xy = u_xlat2.xy * _FoamUVCoord02.xy + u_xlat3.xy;
    u_xlat28 = vs_TEXCOORD4.y * _FoamRange + _FoamOffset;
    u_xlat10_10 = texture(_WaterfallTex01, u_xlat10.xy).x;
    u_xlat10_19 = texture(_WaterfallTex01, u_xlat3.xy).y;
    u_xlat16_10 = u_xlat10_19 + u_xlat10_10;
    u_xlat10.x = u_xlat28 + u_xlat16_10;
#ifdef UNITY_ADRENO_ES3
    u_xlat10.x = min(max(u_xlat10.x, 0.0), 1.0);
#else
    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
#endif
    u_xlat19 = vs_TEXCOORD4.y * _ColorGradientRange + _ColorGradientOffset;
#ifdef UNITY_ADRENO_ES3
    u_xlat19 = min(max(u_xlat19, 0.0), 1.0);
#else
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
#endif
    u_xlat3.xyz = (-_BottomColor.xyz) + _TopColor.xyz;
    u_xlat3.xyz = vec3(u_xlat19) * u_xlat3.xyz + _BottomColor.xyz;
    u_xlat4.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat19 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat19 = inversesqrt(u_xlat19);
    u_xlat4.xyz = vec3(u_xlat19) * u_xlat4.xyz;
    u_xlat5.xy = vs_TEXCOORD4.xy * _Normal01_ST.xy + _Normal01_ST.zw;
    u_xlat19 = _Time.y * _Normal01_VSpeed;
    u_xlat30 = u_xlat5.x * vs_TEXCOORD4.z;
    u_xlat6.x = _Time.y * _Normal01_U_Speed + u_xlat30;
    u_xlat6.y = u_xlat5.y * vs_TEXCOORD4.w + u_xlat19;
    u_xlat5.xy = vs_TEXCOORD4.xy * _Normal02_ST.xy + _Normal02_ST.zw;
    u_xlat5.xy = vec2(u_xlat5.x * vs_TEXCOORD4.z, u_xlat5.y * vs_TEXCOORD4.w);
    u_xlat7.x = _Time.y * _Normal02_U_Speed + u_xlat5.x;
    u_xlat7.y = _Time.y * _Normal02_V_Speed + u_xlat5.y;
    u_xlat10_5.xyz = texture(_Normal01, u_xlat6.xy).xyz;
    u_xlat16_8.xyz = u_xlat10_5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat10_5.xyz = texture(_Normal02, u_xlat7.xy).xyz;
    u_xlat16_8.xyz = u_xlat10_5.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_8.xyz;
    u_xlat16_8.xyz = u_xlat16_8.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat5.xyz = u_xlat16_8.xyz * _DistortionIntensity.xyz;
    u_xlat6.x = vs_TEXCOORD6.x;
    u_xlat6.y = vs_TEXCOORD8.x;
    u_xlat6.z = vs_TEXCOORD7.x;
    u_xlat6.x = dot(u_xlat6.xyz, u_xlat5.xyz);
    u_xlat7.x = vs_TEXCOORD6.y;
    u_xlat7.y = vs_TEXCOORD8.y;
    u_xlat7.z = vs_TEXCOORD7.y;
    u_xlat6.y = dot(u_xlat7.xyz, u_xlat5.xyz);
    u_xlat7.x = vs_TEXCOORD6.z;
    u_xlat7.y = vs_TEXCOORD8.z;
    u_xlat7.z = vs_TEXCOORD7.z;
    u_xlat6.z = dot(u_xlat7.xyz, u_xlat5.xyz);
    u_xlat19 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat19 = inversesqrt(u_xlat19);
    u_xlat5.xyz = vec3(u_xlat19) * u_xlat6.xyz;
    u_xlat19 = dot((-u_xlat4.xyz), u_xlat5.xyz);
    u_xlat19 = u_xlat19 + u_xlat19;
    u_xlat4.xyz = u_xlat5.xyz * (-vec3(u_xlat19)) + (-u_xlat4.xyz);
    u_xlat10_19 = texture(_Reflection, u_xlat4.xyz).x;
    u_xlat4.xyz = (-_ReflectionColor_Dark.xyz) + _ReflectionColor_Light.xyz;
    u_xlat4.xyz = vec3(u_xlat10_19) * u_xlat4.xyz + _ReflectionColor_Dark.xyz;
    u_xlat5.xyz = u_xlat3.xyz * vec3(0.200000003, 0.200000003, 0.200000003);
    u_xlat3.xyz = u_xlat3.xyz * u_xlat4.xyz;
    u_xlat3.xyz = u_xlat3.xyz * vec3(_ReflectionBrightness) + (-u_xlat5.xyz);
    u_xlat3.xyz = vec3(vec3(_ReflectionIntensity, _ReflectionIntensity, _ReflectionIntensity)) * u_xlat3.xyz + u_xlat5.xyz;
    u_xlat2.zw = _Time.yy * vec2(_WaterFall01_Speed, _Waterfall02_Speed) + u_xlat2.yy;
    u_xlat10_19 = texture(_WaterfallTex01, u_xlat2.xz).x;
    u_xlat10_2 = texture(_WaterfallTex01, u_xlat2.xw).y;
    u_xlat16_8.x = (-u_xlat10_19) + u_xlat10_2;
    u_xlat16_8.x = u_xlat10_2 * u_xlat16_8.x + u_xlat10_19;
    u_xlat11 = u_xlat10_2 * _Waterfall02Brightness;
    u_xlat19 = u_xlat10_19 * _Waterfall01Brightness;
    u_xlat2.x = u_xlat10_2 * _Waterfall02Brightness + (-u_xlat19);
    u_xlat19 = u_xlat11 * u_xlat2.x + u_xlat19;
    u_xlat2.x = vs_TEXCOORD4.y * _SprayRange + _SprayOffset;
    u_xlat2.x = (-u_xlat2.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat19 = u_xlat19 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat19 = min(max(u_xlat19, 0.0), 1.0);
#else
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
#endif
    u_xlat2.xyz = u_xlat16_8.xxx * _WaterfallPatternColor.xyz + (-u_xlat3.xyz);
    u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz + u_xlat3.xyz;
    u_xlat10_0 = texture(_ShadowMapTexture, u_xlat0.xy).x;
    u_xlat9.x = (-_ShadowStrength) + 1.0;
    u_xlat0.x = u_xlat10_0 * u_xlat9.x + _ShadowStrength;
    u_xlat3.xy = vs_TEXCOORD4.xy * _WaterfallSpecTex_ST.xy + _WaterfallSpecTex_ST.zw;
    u_xlat16_8.x = vs_TEXCOORD4.w * 0.5;
    u_xlat16_8.x = vs_TEXCOORD4.w * u_xlat3.y + (-u_xlat16_8.x);
    u_xlat12.xy = vs_TEXCOORD4.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat4.x = _Time.y * _Detail01_U_Speed + u_xlat12.x;
    u_xlat4.y = _Time.y * _Detail01_V_Speed + u_xlat12.y;
    u_xlat10_9 = texture(_NoiseTex, u_xlat4.xy).x;
    u_xlat3.x = u_xlat10_9 * _NoiselDistortionValue + u_xlat3.x;
    u_xlat3.y = u_xlat10_9 * _NoiselDistortionValue + u_xlat16_8.x;
    u_xlat10_9 = texture(_WaterfallSpecTex, u_xlat3.xy).x;
    u_xlat16_3.xyz = vec3(u_xlat10_9) * _WaterfallSpecColor.xyz;
    u_xlat9.x = (-u_xlat27) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat9.x = min(max(u_xlat9.x, 0.0), 1.0);
#else
    u_xlat9.x = clamp(u_xlat9.x, 0.0, 1.0);
#endif
    u_xlat9.x = u_xlat9.x * u_xlat18;
    u_xlat9.x = u_xlat9.x * _Opacity;
    u_xlat9.x = u_xlat1.x * u_xlat9.x;
    u_xlat4.w = u_xlat10.x * u_xlat9.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.w = min(max(u_xlat4.w, 0.0), 1.0);
#else
    u_xlat4.w = clamp(u_xlat4.w, 0.0, 1.0);
#endif
    u_xlat9.xyz = u_xlat2.xyz * _DayColor.xyz;
    u_xlat0.xyz = u_xlat9.xyz * u_xlat0.xxx + u_xlat16_3.xyz;
    u_xlat27 = (-u_xlat28) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
    u_xlat27 = u_xlat27 * u_xlat10.x;
    u_xlat0.xyz = vec3(u_xlat27) * _FoamColor.xyz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * _ES_MainLightColor.xyz;
    u_xlat16_27 = max(_LightColor0.w, 1.0);
    u_xlat0.xyz = vec3(u_xlat16_27) * u_xlat0.xyz;
    u_xlat1.xyz = vs_TEXCOORD5.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat27 = dot(u_xlat1.xyz, u_xlat2.xyz);
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlat10.y = u_xlat1.x * _HeigtFogParams.y;
    u_xlat28 = u_xlat1.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat28 = min(max(u_xlat28, 0.0), 1.0);
#else
    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
#endif
    u_xlat2.x = (-u_xlat28) + 2.0;
    u_xlat28 = u_xlat28 * u_xlat2.x;
    u_xlat2.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!((-u_xlat27)>=u_xlat2.x);
#else
    u_xlatb27 = (-u_xlat27)>=u_xlat2.x;
#endif
    u_xlat2.x = u_xlat28 * _HeigtFogColDelta.w;
    u_xlat27 = (u_xlatb27) ? u_xlat2.x : u_xlat28;
    u_xlat27 = log2(u_xlat27);
    u_xlat27 = u_xlat27 * unity_FogColor.w;
    u_xlat27 = exp2(u_xlat27);
    u_xlat27 = min(u_xlat27, _HeigtFogColBase.w);
    u_xlat28 = vs_TEXCOORD5.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat28 = min(max(u_xlat28, 0.0), 1.0);
#else
    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
#endif
    u_xlat16_8.x = (-u_xlat28) + 2.0;
    u_xlat16_8.x = u_xlat28 * u_xlat16_8.x;
    u_xlat2.xyz = u_xlat16_8.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat28 = u_xlat1.x + (-_HeigtFogRamp.w);
    u_xlat28 = u_xlat28 * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat28 = min(max(u_xlat28, 0.0), 1.0);
#else
    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
#endif
    u_xlat3.xyz = (-u_xlat2.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat2.xyz = vec3(u_xlat28) * u_xlat3.xyz + u_xlat2.xyz;
    u_xlat28 = u_xlat1.y * _HeigtFogParams.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb29 = !!(0.00999999978<abs(u_xlat28));
#else
    u_xlatb29 = 0.00999999978<abs(u_xlat28);
#endif
    u_xlat3.x = u_xlat28 * -1.44269502;
    u_xlat3.x = exp2(u_xlat3.x);
    u_xlat3.x = (-u_xlat3.x) + 1.0;
    u_xlat28 = u_xlat3.x / u_xlat28;
    u_xlat16_8.x = (u_xlatb29) ? u_xlat28 : 1.0;
    u_xlat10.x = u_xlat1.y * _HeigtFogParams2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb28 = !!(0.00999999978<abs(u_xlat10.x));
#else
    u_xlatb28 = 0.00999999978<abs(u_xlat10.x);
#endif
    u_xlat29 = u_xlat10.x * -1.44269502;
    u_xlat29 = exp2(u_xlat29);
    u_xlat29 = (-u_xlat29) + 1.0;
    u_xlat10.x = u_xlat29 / u_xlat10.x;
    u_xlat16_8.y = (u_xlatb28) ? u_xlat10.x : 1.0;
    u_xlat10.x = u_xlat1.x * _HeigtFogParams2.y;
    u_xlat16_8.xy = u_xlat10.yx * u_xlat16_8.xy;
    u_xlat16_8.x = exp2((-u_xlat16_8.x));
    u_xlat16_8.x = (-u_xlat16_8.x) + 1.0;
    u_xlat16_17 = exp2((-u_xlat16_8.y));
    u_xlat16_8.y = (-u_xlat16_17) + 1.0;
    u_xlat16_8.xy = max(u_xlat16_8.xy, vec2(0.0, 0.0));
    u_xlat16_8.x = u_xlat16_8.y + u_xlat16_8.x;
    u_xlat1.x = u_xlat1.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat16_17 = (-u_xlat1.x) + 2.0;
    u_xlat16_17 = u_xlat1.x * u_xlat16_17;
    u_xlat1.x = u_xlat16_17 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat1.x = u_xlat1.x + 1.0;
    u_xlat16_8.x = u_xlat1.x * u_xlat16_8.x;
    u_xlat1.x = min(u_xlat16_8.x, _HeigtFogColBase.w);
    u_xlat10.x = vs_TEXCOORD5.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat10.x = min(max(u_xlat10.x, 0.0), 1.0);
#else
    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
#endif
    u_xlat10.xyz = u_xlat10.xxx * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    u_xlat2.xyz = vec3(u_xlat27) * u_xlat2.xyz;
    u_xlat29 = (-u_xlat1.x) + 1.0;
    u_xlat2.xyz = vec3(u_xlat29) * u_xlat2.xyz;
    u_xlat1.xyz = u_xlat10.xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat27 = (-u_xlat27) + 1.0;
    u_xlat27 = u_xlat29 * u_xlat27;
    u_xlat4.xyz = vec3(u_xlat27) * u_xlat0.xyz + u_xlat1.xyz;
    SV_Target0 = u_xlat4;
    return;
}

#endif
"
}
}
Program "fp" {
SubProgram "gles3 " {
""
}
SubProgram "gles3 " {
Keywords { "_SOFTPARTICLES_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "_SOFTPARTICLES_ON" }
""
}
SubProgram "gles3 " {
Keywords { "HALF_RESOLUTION_PARTICLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "_SOFTPARTICLES_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "_SOFTPARTICLES_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "HALF_RESOLUTION_PARTICLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" }
""
}
SubProgram "gles3 " {
Keywords { "MSAA_INTERPOLATION" }
""
}
SubProgram "gles3 " {
Keywords { "MSAA_INTERPOLATION" "_SOFTPARTICLES_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MSAA_INTERPOLATION" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MSAA_INTERPOLATION" "_SOFTPARTICLES_ON" }
""
}
SubProgram "gles3 " {
Keywords { "HALF_RESOLUTION_PARTICLE_ON" "MSAA_INTERPOLATION" }
""
}
SubProgram "gles3 " {
Keywords { "HALF_RESOLUTION_PARTICLE_ON" "MSAA_INTERPOLATION" "_SOFTPARTICLES_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "MSAA_INTERPOLATION" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "MSAA_INTERPOLATION" "_SOFTPARTICLES_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "MSAA_INTERPOLATION" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "MSAA_INTERPOLATION" "_SOFTPARTICLES_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "MSAA_INTERPOLATION" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "MSAA_INTERPOLATION" "_SOFTPARTICLES_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "HALF_RESOLUTION_PARTICLE_ON" "MSAA_INTERPOLATION" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "HALF_RESOLUTION_PARTICLE_ON" "MSAA_INTERPOLATION" "_SOFTPARTICLES_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "MSAA_INTERPOLATION" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "MSAA_INTERPOLATION" "_SOFTPARTICLES_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "_SOFTPARTICLES_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" "_SOFTPARTICLES_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "HALF_RESOLUTION_PARTICLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "_SOFTPARTICLES_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "_SOFTPARTICLES_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "HALF_RESOLUTION_PARTICLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "MSAA_INTERPOLATION" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "MSAA_INTERPOLATION" "_SOFTPARTICLES_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" "MSAA_INTERPOLATION" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" "MSAA_INTERPOLATION" "_SOFTPARTICLES_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "HALF_RESOLUTION_PARTICLE_ON" "MSAA_INTERPOLATION" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "HALF_RESOLUTION_PARTICLE_ON" "MSAA_INTERPOLATION" "_SOFTPARTICLES_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "MSAA_INTERPOLATION" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "MSAA_INTERPOLATION" "_SOFTPARTICLES_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "MSAA_INTERPOLATION" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "MSAA_INTERPOLATION" "_SOFTPARTICLES_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "MSAA_INTERPOLATION" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "MSAA_INTERPOLATION" "_SOFTPARTICLES_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "HALF_RESOLUTION_PARTICLE_ON" "MSAA_INTERPOLATION" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "HALF_RESOLUTION_PARTICLE_ON" "MSAA_INTERPOLATION" "_SOFTPARTICLES_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "MSAA_INTERPOLATION" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "MSAA_INTERPOLATION" "_SOFTPARTICLES_ON" }
""
}
}
}
}
CustomEditor "MiHoYoASEMaterialInspector"
}