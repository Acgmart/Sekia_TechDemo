//////////////////////////////////////////
//
// NOTE: This is *not* a valid shader file
//
///////////////////////////////////////////
Shader "miHoYo/Effects/Water_Transparent" {
Properties {
_ProjectUVScale ("Project UV Scale", Range(0, 1)) = 0.05
_ShallowColor ("ShallowColor", Color) = (0,1,0.5862069,0)
_DeepColor ("DeepColor", Color) = (0,0,0,0)
_DeepColorDepth ("DeepColorDepth", Range(0, 10)) = 0.04
_DeepColorFade ("DeepColorFade", Range(0, 5)) = 1
_ShoreTransparency ("ShoreTransparency", Range(0, 10)) = 0.04
_ShoreFade ("ShoreFade", Range(0, 5)) = 5
_Normal01 ("Normal01", 2D) = "white" { }
_Normal01_U_Speed ("Normal01_U_Speed", Float) = 0
_Normal01_VSpeed ("Normal01_V-Speed", Float) = 0
_Normal02 ("Normal02", 2D) = "bump" { }
_Normal02_U_Speed ("Normal02_U_Speed", Float) = 0
_Normal02_V_Speed ("Normal02_V_Speed", Float) = 0
_DistortionIntensity ("DistortionIntensity", Color) = (1,1,1,0)
_NormalMapBias ("NormalMapBias", Float) = -1
_NormalMapScale ("NormalMapScale", Float) = 1
_ReflectionIntensity ("ReflectionIntensity", Range(0, 1)) = 0.6
_ShoreReflectionFade ("ShoreReflectionFade", Range(0, 20)) = 2.6
_FresnelPower ("FresnelPower", Range(0, 5)) = 5
_SSRDistortion ("SSRDistortion", Float) = 2
_SSRDistortion_Shore ("SSRDistortion_Shore", Range(0, 15)) = 0.01
_SSRIntensity ("SSRIntensity", Range(0.8, 1)) = 1
_RefractionIntensity ("RefractionIntensity", Float) = 0
_Gloss ("Gloss", Range(0, 5)) = 1
_SpecularIntensity ("SpecularIntensity", Float) = 1
_SpecularPower ("SpecularPower", Range(0, 10)) = 1
[Header(Caustic)] [Toggle(ENABLE_CAUSTIC_TEX_ON)] _EnableCausticTex ("Enable Caustic Tex (R for Caustic)", Float) = 0
_CausticTex ("Caustic Tex", 2D) = "white" { }
[Space] _CausticUVScale ("Caustic UV Scale", Range(0, 2)) = 0.343
_CausticSpeed ("Caustic Speed", Range(0, 2)) = 0.131
_CausticColor ("Caustic Color", Color) = (1,1,1,1)
_CausticChromaticAberration ("Caustic Chromatic Aberration", Range(0, 0.1)) = 0.015
_CausticDepth ("Caustic Depth", Range(0, 20)) = 13.9
_CausticDistance ("Caustic Distance", Range(0, 100)) = 50
_CausticDistortionValue ("Caustic Distortion Value", Range(0, 1)) = 0.055
_CausticFade ("Caustic Fade", Range(0.01, 10)) = 5.75
_CausticFadeExponent ("Caustic Fade Exponent", Range(0, 10)) = 0.68
[Space] [Header(Depth Foam)] _DepthFoamMask ("Depth Foam Mask (R for Noise, Tex Offset is UV Speed)", 2D) = "white" { }
_DepthFoamDistance ("Depth Foam Distance", Range(0, 500)) = 200
_DepthFoamExtent ("Depth Foam Extent (Intensity Controlled by Vertex R)", Range(0, 10)) = 0.1
_DepthFoamColor ("Depth Foam Color (Transparency Controlled by Vertex G)", Color) = (1,1,1,1)
_DepthFoamSpeed ("Depth Foam Speed", Range(-10, 10)) = -1.5
_DepthFoamSubdivision ("Depth Foam Subdivision", Range(0, 100)) = 17
_DepthFoamWidth ("Depth Foam Width", Range(-10, 10)) = 1
_DepthFoamPhaseScale ("Depth Foam Phase Scale", Range(-10, 10)) = 1
_DepthFoamCloseFadeOffset ("Depth Foam Close Fade Offset", Range(-20, 20)) = 10
_DepthFoamCloseFadeDistance ("Depth Foam Close Fade Distance", Range(0, 500)) = 17
[Space] _OpacityByDepth ("OpacityByDepth", Range(0, 1)) = 0.04
_WaterMeshScale ("WaterMeshScale", Vector) = (1,1,1,0)
_RippleTillingScale ("RippleTillingScale", Float) = 0.3
_Ripple02Rotate ("Ripple02Rotate", Float) = 0.69
[Header(Cull Mode)] [Enum(UnityEngine.Rendering.CullMode)] _Cull ("Cull Mode", Float) = 2
_MHYZBias ("Z Bias", Float) = 0
_PolygonOffsetUnit ("Polygon Offset Unit", Float) = 0
_PolygonOffsetFactor ("Polygon Offset Factor", Float) = 0
[Header(Blend Mode)] [Enum(UnityEngine.Rendering.BlendMode)] _SrcBlendMode ("Src Blend Mode", Float) = 1
[Enum(UnityEngine.Rendering.BlendMode)] _DstBlendMode ("Dst Blend Mode", Float) = 0
[Enum(UnityEngine.Rendering.BlendOp)] _BlendOP ("BlendOp Mode", Float) = 0
[Header(Depth Mode)] [Enum(Off, 0, On, 1)] _Zwrite ("ZWrite Mode", Float) = 1
[Enum(UnityEngine.Rendering.CompareFunction)] _Ztest ("ZTest Mode", Float) = 4
}
SubShader {
 Tags { "IGNOREPROJECTOR" = "true" "PreviewType" = "Plane" "QUEUE" = "Water" "RenderType" = "Transparent" }
 Pass {
  Name "FORWARDSHADER"
  Tags { "DebugView" = "On" "IGNOREPROJECTOR" = "true" "LIGHTMODE" = "FORWARDBASE" "PreviewType" = "Plane" "QUEUE" = "Water" "RenderType" = "Transparent" }
  ZTest Off
  ZWrite Off
  Cull Off
  GpuProgramID 18301
Program "vp" {
SubProgram "gles3 " {
Keywords { "MHY_SHADER_HIGH" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump float _MHYZBias;
uniform 	vec4 hlslcc_mtx4x4_mhyJitteredVP[4];
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
out highp vec4 vs_TEXCOORD9;
out highp vec4 vs_TEXCOORD10;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec4 u_xlat8;
float u_xlat27;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4_mhyJitteredVP[1];
    u_xlat2 = hlslcc_mtx4x4_mhyJitteredVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4_mhyJitteredVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4_mhyJitteredVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat3.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    u_xlat3.xyw = u_xlat2.xyw;
    gl_Position = u_xlat3;
    vs_COLOR0 = in_COLOR0;
    u_xlat4.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat4.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat4.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat27 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat4.xyz = vec3(u_xlat27) * u_xlat4.xyz;
    u_xlat16_5.x = u_xlat4.y * u_xlat4.y;
    u_xlat16_5.x = u_xlat4.x * u_xlat4.x + (-u_xlat16_5.x);
    u_xlat16_6 = u_xlat4.yzzx * u_xlat4.xyzz;
    u_xlat16_7.x = dot(unity_SHBr, u_xlat16_6);
    u_xlat16_7.y = dot(unity_SHBg, u_xlat16_6);
    u_xlat16_7.z = dot(unity_SHBb, u_xlat16_6);
    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_7.xyz;
    u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat4.w = 1.0;
    u_xlat16_6.x = dot(unity_SHAr, u_xlat4);
    u_xlat16_6.y = dot(unity_SHAg, u_xlat4);
    u_xlat16_6.z = dot(unity_SHAb, u_xlat4);
    u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_6.xyz;
    vs_TEXCOORD1.xyz = u_xlat16_5.xyz;
    vs_TEXCOORD1.w = 1.0;
    u_xlat27 = u_xlat3.y * _ProjectionParams.x;
    u_xlat8.w = u_xlat27 * 0.5;
    u_xlat8.xz = u_xlat3.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.z = u_xlat2.z;
    u_xlat3.xy = u_xlat8.zz + u_xlat8.xw;
    vs_TEXCOORD2 = u_xlat3;
    vs_TEXCOORD4.xyw = u_xlat3.xyw;
    u_xlat27 = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat27 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat27;
    u_xlat27 = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat27;
    u_xlat27 = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat27;
    vs_TEXCOORD3.z = (-u_xlat27);
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD3.w = 0.0;
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD5.w = 0.0;
    vs_TEXCOORD6.xyz = u_xlat4.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[1].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].www + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * in_POSITION0.yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.zzz + u_xlat1.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.www + u_xlat1.xyz;
    vs_TEXCOORD7.xyz = u_xlat1.xyz * vec3(-1.0, -1.0, 1.0);
    vs_TEXCOORD7.w = 0.0;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat27 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat1.xyz = vec3(u_xlat27) * u_xlat1.xyz;
    vs_TEXCOORD8.xyz = u_xlat1.xyz;
    vs_TEXCOORD8.w = 0.0;
    u_xlat2.xyz = u_xlat1.yzx * u_xlat4.zxy;
    u_xlat1.xyz = u_xlat4.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
    u_xlat27 = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD9.xyz = vec3(u_xlat27) * u_xlat1.xyz;
    vs_TEXCOORD9.w = 0.0;
    u_xlat27 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat27 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat27;
    vs_TEXCOORD10.w = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat27;
    vs_TEXCOORD10.xyz = u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowPos[4];
uniform 	mediump vec4 _LightColor0;
uniform 	mediump float _CausticUVScale;
uniform 	mediump float _CausticSpeed;
uniform 	mediump vec4 _CausticColor;
uniform 	mediump float _CausticDepth;
uniform 	mediump float _CausticDistance;
uniform 	mediump float _CausticDistortionValue;
uniform 	mediump vec4 _DepthFoamMask_ST;
uniform 	mediump float _DepthFoamSpeed;
uniform 	mediump vec4 _DepthFoamColor;
uniform 	mediump float _DepthFoamExtent;
uniform 	mediump float _DepthFoamDistance;
uniform 	mediump float _DepthFoamSubdivision;
uniform 	mediump float _DepthFoamWidth;
uniform 	mediump float _DepthFoamPhaseScale;
uniform 	mediump float _DepthFoamCloseFadeOffset;
uniform 	mediump float _DepthFoamCloseFadeDistance;
uniform 	float _NormalMapScale;
uniform 	float _Normal01_U_Speed;
uniform 	float _Normal01_VSpeed;
uniform 	float _NormalMapBias;
uniform 	float _Normal02_U_Speed;
uniform 	float _Normal02_V_Speed;
uniform 	float _RefractionIntensity;
uniform 	float _OpacityByDepth;
uniform 	float _SpecularIntensity;
uniform 	vec3 _ES_MoonDirection;
uniform 	vec3 _ES_SunDirection;
uniform 	float _Gloss;
uniform 	float _ShoreTransparency;
uniform 	float _SpecularPower;
uniform 	vec4 _ShallowColor;
uniform 	float _ShoreFade;
uniform 	vec4 _DeepColor;
uniform 	float _DeepColorDepth;
uniform 	float _DeepColorFade;
uniform 	vec4 _DistortionIntensity;
uniform 	float _SSRDistortion;
uniform 	float _SSRDistortion_Shore;
uniform 	float _SSRIntensity;
uniform 	float _ReflectionIntensity;
uniform 	float _FresnelPower;
uniform 	float _ShoreReflectionFade;
uniform 	vec3 _ES_MainLightColor;
uniform 	mediump float _RippleTillingScale;
uniform 	mediump float _Ripple02Rotate;
uniform 	mediump float _ProjectUVScale;
uniform 	mediump float _CausticFade;
uniform 	mediump float _CausticFadeExponent;
uniform 	vec4 _ReflectionSkyCubeMap_HDR;
uniform lowp sampler2D _Normal01;
uniform lowp sampler2D _Normal02;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _SceneScaledBufferBeforTransParent;
uniform lowp samplerCube _ReflectionSkyCubeMap;
uniform lowp sampler2D _SSRTexture;
uniform lowp sampler2D _DepthFoamMask;
uniform lowp sampler2D _WaterRippleTex;
uniform lowp sampler2DShadow hlslcc_zcmp_CascadeShadowMapTexture;
uniform lowp sampler2D _CascadeShadowMapTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD8;
in highp vec4 vs_TEXCOORD9;
in highp vec4 vs_TEXCOORD10;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
lowp float u_xlat10_0;
int u_xlati0;
uint u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec3 u_xlat10_1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
lowp vec4 u_xlat10_2;
bvec4 u_xlatb2;
mediump vec3 u_xlat16_3;
vec4 u_xlat4;
mediump vec3 u_xlat16_4;
lowp vec4 u_xlat10_4;
vec3 u_xlat5;
lowp float u_xlat10_5;
vec4 u_xlat6;
vec4 u_xlat7;
mediump vec3 u_xlat16_7;
vec4 u_xlat8;
vec3 u_xlat9;
vec3 u_xlat10;
mediump vec3 u_xlat16_10;
vec3 u_xlat11;
vec3 u_xlat12;
lowp vec3 u_xlat10_12;
vec3 u_xlat13;
vec3 u_xlat14;
vec3 u_xlat15;
mediump float u_xlat16_16;
mediump vec2 u_xlat16_17;
float u_xlat18;
vec3 u_xlat19;
mediump vec3 u_xlat16_21;
float u_xlat23;
mediump float u_xlat16_23;
bool u_xlatb23;
vec3 u_xlat25;
bool u_xlatb25;
float u_xlat26;
vec2 u_xlat36;
mediump float u_xlat16_36;
lowp float u_xlat10_36;
float u_xlat37;
lowp float u_xlat10_37;
int u_xlati37;
uint u_xlatu37;
bool u_xlatb37;
float u_xlat41;
float u_xlat42;
lowp float u_xlat10_54;
float u_xlat55;
mediump float u_xlat16_55;
mediump float u_xlat16_57;
float u_xlat59;
mediump float u_xlat16_59;
bool u_xlatb59;
float u_xlat60;
float u_xlat61;
void main()
{
    u_xlat0 = vs_TEXCOORD5.xzxz * vec4(_ProjectUVScale, _ProjectUVScale, _RippleTillingScale, _RippleTillingScale);
    u_xlat1.x = _Time.y * _Normal01_U_Speed + u_xlat0.x;
    u_xlat1.yz = _Time.yy * vec2(_Normal01_VSpeed, _Normal02_U_Speed) + u_xlat0.yx;
    u_xlat1.w = _Time.y * _Normal02_V_Speed + u_xlat0.y;
    u_xlat10_2.xyz = texture(_Normal01, u_xlat1.xy, _NormalMapBias).xyz;
    u_xlat16_2.xyz = u_xlat10_2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_3.xy = u_xlat16_2.xy * vec2(_NormalMapScale);
    u_xlat10_1.xyz = texture(_Normal02, u_xlat1.zw, _NormalMapBias).xyz;
    u_xlat16_2.w = -1.0;
    u_xlat16_4.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_2.wwz;
    u_xlat16_4.xy = u_xlat16_4.xy * vec2(_NormalMapScale);
    u_xlat16_3.z = -1.0;
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat0.x = float(1.0) / vs_TEXCOORD4.w;
    u_xlat1.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat18 = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat18 = _ZBufferParams.z * u_xlat18 + _ZBufferParams.w;
    u_xlat18 = float(1.0) / u_xlat18;
    u_xlat1.x = vs_TEXCOORD10.w + 9.99999975e-05;
    u_xlat1.x = (-u_xlat18) / u_xlat1.x;
    u_xlat19.xyz = u_xlat1.xxx * vs_TEXCOORD10.xyz;
    u_xlat5.xyz = vs_TEXCOORD10.xyz * u_xlat1.xxx + _WorldSpaceCameraPos.xyz;
    u_xlat6.xyz = (-u_xlat5.xyz) + vs_TEXCOORD5.xyz;
    u_xlat1.x = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlat6.xz = u_xlat16_3.xy * vec2(vec2(_RefractionIntensity, _RefractionIntensity));
    u_xlat0.x = u_xlat0.x * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat6.xz = u_xlat0.xx * u_xlat6.xz;
    u_xlat6.xz = u_xlat6.xz * vs_TEXCOORD4.ww;
    u_xlat0.x = u_xlat18 + (-vs_TEXCOORD4.w);
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat7.xy = u_xlat0.xx * u_xlat6.xz;
    u_xlat7.z = 0.0;
    u_xlat6.xzw = u_xlat7.xyz + vs_TEXCOORD4.xyw;
    u_xlat0.xy = u_xlat6.xz / u_xlat6.ww;
    u_xlat0.x = texture(_CameraDepthTexture, u_xlat0.xy).x;
    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat0.x = u_xlat0.x + (-vs_TEXCOORD4.w);
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat6.xzw = u_xlat0.xxx * u_xlat7.xyz + vs_TEXCOORD4.xyw;
    u_xlat0.xy = u_xlat6.xz / u_xlat6.ww;
    u_xlat0.x = texture(_CameraDepthTexture, u_xlat0.xy).x;
    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat0.x = u_xlat0.x + (-vs_TEXCOORD4.w);
    u_xlat18 = 0.100000001 / _OpacityByDepth;
    u_xlat18 = u_xlat18 * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat16_4.xz = u_xlat16_3.xy;
    u_xlat16_4.y = 1.0;
    u_xlat16_59 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);
    u_xlat16_59 = inversesqrt(u_xlat16_59);
    u_xlat16_7.xyz = u_xlat16_4.xyz * vec3(u_xlat16_59);
#ifdef UNITY_ADRENO_ES3
    u_xlatb59 = !!(0.0>=_ES_MoonDirection.y);
#else
    u_xlatb59 = 0.0>=_ES_MoonDirection.y;
#endif
    u_xlat8.xyz = (bool(u_xlatb59)) ? _ES_SunDirection.xyz : _ES_MoonDirection.xyz;
    u_xlat9.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat59 = dot(u_xlat9.xyz, u_xlat9.xyz);
    u_xlat60 = inversesqrt(u_xlat59);
    u_xlat10.xyz = vec3(u_xlat60) * u_xlat9.xyz;
    u_xlat8.xyz = u_xlat9.xyz * vec3(u_xlat60) + u_xlat8.xyz;
    u_xlat60 = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat60 = inversesqrt(u_xlat60);
    u_xlat8.xyz = vec3(u_xlat60) * u_xlat8.xyz;
    u_xlat60 = dot(u_xlat16_7.xyz, u_xlat8.xyz);
    u_xlat25.x = _Gloss * 128.0;
    u_xlat60 = max(u_xlat60, 9.99999975e-05);
    u_xlat60 = log2(u_xlat60);
    u_xlat60 = u_xlat60 * u_xlat25.x;
    u_xlat60 = exp2(u_xlat60);
    u_xlat60 = u_xlat60 * _SpecularIntensity;
    u_xlat60 = max(u_xlat60, 0.0);
    u_xlat60 = min(u_xlat60, 16.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb25 = !!(_ES_MoonDirection.y>=9.99999975e-05);
#else
    u_xlatb25 = _ES_MoonDirection.y>=9.99999975e-05;
#endif
    u_xlat25.x = u_xlatb25 ? 1.0 : float(0.0);
    u_xlat61 = _ES_MoonDirection.y + -1.0;
    u_xlat25.x = u_xlat25.x * u_xlat61 + 1.0;
    u_xlat61 = float(1.0) / _ShoreTransparency;
    u_xlat8.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat8.xyz = u_xlat8.xxx * vs_TEXCOORD6.xyz;
    u_xlat8.x = dot(u_xlat10.xyz, u_xlat8.xyz);
    u_xlat8.x = (-u_xlat8.x) + 1.0;
    u_xlat8.x = max(u_xlat8.x, 9.99999975e-05);
    u_xlat8.x = log2(u_xlat8.x);
    u_xlat26 = u_xlat8.x * _SpecularPower;
    u_xlat26 = exp2(u_xlat26);
    u_xlat9.xyz = u_xlat25.xxx * _LightColor0.xyz;
    u_xlat9.xyz = vec3(u_xlat60) * u_xlat9.xyz;
    u_xlat60 = u_xlat0.x + -1.0;
    u_xlat60 = u_xlat61 * u_xlat60;
    u_xlat60 = u_xlat60 * 0.100000001;
#ifdef UNITY_ADRENO_ES3
    u_xlat60 = min(max(u_xlat60, 0.0), 1.0);
#else
    u_xlat60 = clamp(u_xlat60, 0.0, 1.0);
#endif
    u_xlat9.xyz = vec3(u_xlat60) * u_xlat9.xyz;
    u_xlat60 = u_xlat0.x * u_xlat61;
#ifdef UNITY_ADRENO_ES3
    u_xlat60 = min(max(u_xlat60, 0.0), 1.0);
#else
    u_xlat60 = clamp(u_xlat60, 0.0, 1.0);
#endif
    u_xlat60 = max(u_xlat60, 9.99999975e-05);
    u_xlat60 = log2(u_xlat60);
    u_xlat60 = u_xlat60 * _ShoreFade;
    u_xlat60 = exp2(u_xlat60);
    u_xlat11.xyz = _ShallowColor.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat11.xyz = vec3(u_xlat60) * u_xlat11.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat6.xz = u_xlat6.xz / vs_TEXCOORD4.ww;
    u_xlat10_12.xyz = texture(_SceneScaledBufferBeforTransParent, u_xlat6.xz).xyz;
    u_xlat6.x = u_xlat1.x * _CausticDistortionValue;
    u_xlat6.xz = u_xlat6.xx * u_xlat16_7.xz;
    u_xlat7.z = _Time.y * _CausticSpeed;
    u_xlat6.xz = u_xlat5.xz * vec2(_CausticUVScale) + u_xlat6.xz;
    u_xlat13.x = _Normal01_U_Speed * 25.0;
    u_xlat13.y = _Normal01_VSpeed * 25.0;
    u_xlat7.xy = u_xlat7.zz * u_xlat13.xy + u_xlat6.xz;
    u_xlat13.x = dot(u_xlat7.xyz, vec3(-2.0, 3.0, 1.0));
    u_xlat13.y = dot(u_xlat7.xyz, vec3(-1.0, -2.0, 2.0));
    u_xlat13.z = dot(u_xlat7.xzy, vec3(2.0, 2.0, 1.0));
    u_xlat7.xyz = u_xlat13.xyz * vec3(0.400000006, 0.400000006, 0.400000006);
    u_xlat14.x = dot(u_xlat7.xyz, vec3(-2.0, 3.0, 1.0));
    u_xlat14.y = dot(u_xlat7.xyz, vec3(-1.0, -2.0, 2.0));
    u_xlat14.z = dot(u_xlat7.xzy, vec3(2.0, 2.0, 1.0));
    u_xlat7.xyz = u_xlat14.xyz * vec3(0.300000012, 0.300000012, 0.300000012);
    u_xlat6.x = dot(u_xlat7.xyz, vec3(-2.0, 3.0, 1.0));
    u_xlat6.z = dot(u_xlat7.xyz, vec3(-1.0, -2.0, 2.0));
    u_xlat7.x = dot(u_xlat7.xzy, vec3(2.0, 2.0, 1.0));
    u_xlat25.xyz = fract(u_xlat13.xyz);
    u_xlat25.xyz = (-u_xlat25.xyz) + vec3(0.5, 0.5, 0.5);
    u_xlat25.x = dot(u_xlat25.xyz, u_xlat25.xyz);
    u_xlat13.xyz = fract(u_xlat14.xyz);
    u_xlat13.xyz = (-u_xlat13.xyz) + vec3(0.5, 0.5, 0.5);
    u_xlat25.y = dot(u_xlat13.xyz, u_xlat13.xyz);
    u_xlat25.xy = sqrt(u_xlat25.xy);
    u_xlat25.x = min(u_xlat25.y, u_xlat25.x);
    u_xlat13.xy = fract(u_xlat6.xz);
    u_xlat13.z = fract(u_xlat7.x);
    u_xlat7.xzw = (-u_xlat13.xyz) + vec3(0.5, 0.5, 0.5);
    u_xlat6.x = dot(u_xlat7.xzw, u_xlat7.xzw);
    u_xlat6.x = sqrt(u_xlat6.x);
    u_xlat6.x = min(u_xlat6.x, u_xlat25.x);
    u_xlat6.x = log2(u_xlat6.x);
    u_xlat6.x = u_xlat6.x * 7.0;
    u_xlat6.x = exp2(u_xlat6.x);
    u_xlat6.x = u_xlat6.x * 25.0;
    u_xlat16_4.xy = vec2(float(_CausticDepth) + float(9.99999975e-05), float(_CausticDistance) + float(9.99999975e-05));
    u_xlat42 = u_xlat6.y / u_xlat16_4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat42 = min(max(u_xlat42, 0.0), 1.0);
#else
    u_xlat42 = clamp(u_xlat42, 0.0, 1.0);
#endif
    u_xlat19.x = dot(u_xlat19.xyz, u_xlat19.xyz);
    u_xlat19.x = sqrt(u_xlat19.x);
    u_xlat19.x = u_xlat19.x / u_xlat16_4.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat19.x = min(max(u_xlat19.x, 0.0), 1.0);
#else
    u_xlat19.x = clamp(u_xlat19.x, 0.0, 1.0);
#endif
    u_xlat19.x = (-u_xlat19.x) + 1.0;
    u_xlat19.x = u_xlat19.x * u_xlat42;
    u_xlat7.xyz = u_xlat5.xyz + (-unity_ShadowSplitSpheres[0].xyz);
    u_xlat13.xyz = u_xlat5.xyz + (-unity_ShadowSplitSpheres[1].xyz);
    u_xlat14.xyz = u_xlat5.xyz + (-unity_ShadowSplitSpheres[2].xyz);
    u_xlat15.xyz = u_xlat5.xyz + (-unity_ShadowSplitSpheres[3].xyz);
    u_xlat2.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat2.y = dot(u_xlat13.xyz, u_xlat13.xyz);
    u_xlat2.z = dot(u_xlat14.xyz, u_xlat14.xyz);
    u_xlat2.w = dot(u_xlat15.xyz, u_xlat15.xyz);
    u_xlatb2 = lessThan(u_xlat2, unity_ShadowSplitSqRadii);
    u_xlat2 = mix(vec4(0.0, 0.0, 0.0, 0.0), vec4(1.0, 1.0, 1.0, 1.0), vec4(u_xlatb2));
    u_xlat16_57 = u_xlat2.y + u_xlat2.x;
    u_xlat16_4.x = u_xlat2.z + u_xlat16_57;
    u_xlat7.x = -0.0;
    u_xlat7.y = (-u_xlat2.x);
    u_xlat7.z = (-u_xlat16_57);
    u_xlat7.w = (-u_xlat16_4.x);
    u_xlat2 = u_xlat2 + u_xlat7;
    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat16_57 = dot(u_xlat2, vec4(1.0, 1.0, 1.0, 1.0));
#ifdef UNITY_ADRENO_ES3
    u_xlatb37 = !!(u_xlat16_57>=0.5);
#else
    u_xlatb37 = u_xlat16_57>=0.5;
#endif
    if(u_xlatb37){
        u_xlat37 = dot(u_xlat2.yzw, vec3(1.0, 2.0, 3.0));
        u_xlat37 = min(u_xlat37, 3.0);
        u_xlatu37 = uint(u_xlat37);
        u_xlat5.xyz = u_xlat5.xyz + (-unity_ShadowPos[int(u_xlatu37)].xyz);
        u_xlati37 = int(u_xlatu37) << 2;
        u_xlat7.xyz = u_xlat5.yyy * hlslcc_mtx4x4unity_WorldToShadow[(u_xlati37 + 1)].xyz;
        u_xlat7.xyz = hlslcc_mtx4x4unity_WorldToShadow[u_xlati37].xyz * u_xlat5.xxx + u_xlat7.xyz;
        u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToShadow[(u_xlati37 + 2)].xyz * u_xlat5.zzz + u_xlat7.xyz;
        u_xlat5.xyz = u_xlat5.xyz + hlslcc_mtx4x4unity_WorldToShadow[(u_xlati37 + 3)].xyz;
        vec3 txVec0 = vec3(u_xlat5.xy,u_xlat5.z);
        u_xlat10_37 = textureLod(hlslcc_zcmp_CascadeShadowMapTexture, txVec0, 0.0);
        u_xlat16_55 = (-_LightShadowData.x) + 1.0;
        u_xlat37 = u_xlat10_37 * u_xlat16_55 + _LightShadowData.x;
    } else {
        u_xlat37 = 1.0;
    //ENDIF
    }
    u_xlat19.x = u_xlat37 * u_xlat19.x;
    u_xlat16_4.xyz = _LightColor0.xyz * _CausticColor.xyz;
    u_xlat16_4.xyz = u_xlat6.xxx * u_xlat16_4.xyz;
    u_xlat16_4.xyz = u_xlat19.xxx * u_xlat16_4.xyz;
    u_xlat16_57 = _CausticFade + 9.99999975e-05;
    u_xlat1.x = u_xlat1.x / u_xlat16_57;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.x = log2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _CausticFadeExponent;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat1.x = (-u_xlat1.x) + 1.0;
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat1.xxx + vec3(1.0, 1.0, 1.0);
    u_xlat16_1.xyz = u_xlat16_4.xyz * u_xlat10_12.xyz;
    u_xlat5.xyz = u_xlat16_1.xyz * u_xlat11.xyz;
    u_xlat55 = 0.100000001 / _DeepColorDepth;
    u_xlat55 = u_xlat0.x * u_xlat55;
#ifdef UNITY_ADRENO_ES3
    u_xlat55 = min(max(u_xlat55, 0.0), 1.0);
#else
    u_xlat55 = clamp(u_xlat55, 0.0, 1.0);
#endif
    u_xlat55 = max(u_xlat55, 9.99999975e-05);
    u_xlat55 = log2(u_xlat55);
    u_xlat55 = u_xlat55 * _DeepColorFade;
    u_xlat55 = exp2(u_xlat55);
    u_xlat7.xyz = (-u_xlat11.xyz) * u_xlat16_1.xyz + _DeepColor.xyz;
    u_xlat7.xyz = vec3(u_xlat55) * u_xlat7.xyz + u_xlat5.xyz;
    u_xlat12.xyz = u_xlat16_3.xyz * _DistortionIntensity.xyz;
    u_xlat13.x = vs_TEXCOORD8.x;
    u_xlat13.y = vs_TEXCOORD9.x;
    u_xlat13.z = vs_TEXCOORD6.x;
    u_xlat13.x = dot(u_xlat13.xyz, u_xlat12.xyz);
    u_xlat14.x = vs_TEXCOORD8.y;
    u_xlat14.y = vs_TEXCOORD9.y;
    u_xlat14.z = vs_TEXCOORD6.y;
    u_xlat13.y = dot(u_xlat14.xyz, u_xlat12.xyz);
    u_xlat14.x = vs_TEXCOORD8.z;
    u_xlat14.y = vs_TEXCOORD9.z;
    u_xlat14.z = vs_TEXCOORD6.z;
    u_xlat13.z = dot(u_xlat14.xyz, u_xlat12.xyz);
    u_xlat55 = dot(u_xlat13.xyz, u_xlat13.xyz);
    u_xlat55 = inversesqrt(u_xlat55);
    u_xlat13.xyz = vec3(u_xlat55) * u_xlat13.xyz;
    u_xlat55 = dot((-u_xlat10.xyz), u_xlat13.xyz);
    u_xlat55 = u_xlat55 + u_xlat55;
    u_xlat10.xyz = u_xlat13.xyz * (-vec3(u_xlat55)) + (-u_xlat10.xyz);
    u_xlat10_2 = textureLod(_ReflectionSkyCubeMap, u_xlat10.xyz, 0.0);
    u_xlat16_3.x = u_xlat10_2.w + -1.0;
    u_xlat16_3.x = _ReflectionSkyCubeMap_HDR.w * u_xlat16_3.x + 1.0;
    u_xlat16_3.x = log2(u_xlat16_3.x);
    u_xlat16_3.x = u_xlat16_3.x * _ReflectionSkyCubeMap_HDR.y;
    u_xlat16_3.x = exp2(u_xlat16_3.x);
    u_xlat16_3.x = u_xlat16_3.x * _ReflectionSkyCubeMap_HDR.x;
    u_xlat16_21.xyz = u_xlat10_2.xyz * u_xlat16_3.xxx;
    u_xlat6.xz = u_xlat12.xy * vec2(_SSRDistortion);
    u_xlat55 = float(1.0) / _SSRDistortion_Shore;
    u_xlat55 = u_xlat0.x * u_xlat55;
#ifdef UNITY_ADRENO_ES3
    u_xlat55 = min(max(u_xlat55, 0.0), 1.0);
#else
    u_xlat55 = clamp(u_xlat55, 0.0, 1.0);
#endif
    u_xlat6.xz = vec2(u_xlat55) * u_xlat6.xz;
    u_xlat6.xz = u_xlat6.xz * vs_TEXCOORD4.ww + vs_TEXCOORD4.xy;
    u_xlat6.xz = u_xlat6.xz / vs_TEXCOORD4.ww;
    u_xlat10_4 = texture(_SSRTexture, u_xlat6.xz).wxyz;
    u_xlat16_10.xyz = (-u_xlat16_3.xxx) * u_xlat10_2.xyz + u_xlat10_4.yzw;
    u_xlat10.xyz = u_xlat16_10.xyz * vec3(vec3(_SSRIntensity, _SSRIntensity, _SSRIntensity));
    u_xlat16_4.x = u_xlat10_4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat10.xyz = u_xlat16_4.xxx * u_xlat10.xyz + u_xlat16_21.xyz;
    u_xlat55 = u_xlat8.x * _FresnelPower;
    u_xlat55 = exp2(u_xlat55);
    u_xlat55 = u_xlat55 * _ReflectionIntensity;
    u_xlat6.x = float(1.0) / _ShoreReflectionFade;
    u_xlat0.x = u_xlat0.x * u_xlat6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x * u_xlat55;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat8.xzw = (-u_xlat7.xyz) + u_xlat10.xyz;
    u_xlat7.xyz = u_xlat0.xxx * u_xlat8.xzw + u_xlat7.xyz;
    u_xlat1.xyz = (-u_xlat11.xyz) * u_xlat16_1.xyz + u_xlat7.xyz;
    u_xlat1.xyz = vec3(u_xlat60) * u_xlat1.xyz + u_xlat5.xyz;
    u_xlat0.x = (-vs_TEXCOORD5.y) * _WorldSpaceLightPos0.w + _WorldSpaceLightPos0.y;
    u_xlat16_3.x = max(u_xlat0.x, 0.0);
    u_xlat5.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowSplitSpheres[0].xyz);
    u_xlat6.xzw = vs_TEXCOORD5.xyz + (-unity_ShadowSplitSpheres[1].xyz);
    u_xlat7.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowSplitSpheres[2].xyz);
    u_xlat8.xzw = vs_TEXCOORD5.xyz + (-unity_ShadowSplitSpheres[3].xyz);
    u_xlat2.x = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat2.y = dot(u_xlat6.xzw, u_xlat6.xzw);
    u_xlat2.z = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat2.w = dot(u_xlat8.xzw, u_xlat8.xzw);
    u_xlatb2 = lessThan(u_xlat2, unity_ShadowSplitSqRadii);
    u_xlat2 = mix(vec4(0.0, 0.0, 0.0, 0.0), vec4(1.0, 1.0, 1.0, 1.0), vec4(u_xlatb2));
    u_xlat16_21.x = u_xlat2.y + u_xlat2.x;
    u_xlat16_21.y = u_xlat2.z + u_xlat16_21.x;
    u_xlat4.x = -0.0;
    u_xlat4.y = (-u_xlat2.x);
    u_xlat4.zw = (-u_xlat16_21.xy);
    u_xlat2 = u_xlat2 + u_xlat4;
    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat16_21.x = dot(u_xlat2, vec4(1.0, 1.0, 1.0, 1.0));
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat16_21.x>=0.5);
#else
    u_xlatb0 = u_xlat16_21.x>=0.5;
#endif
    if(u_xlatb0){
        u_xlat0.x = dot(u_xlat2.yzw, vec3(1.0, 2.0, 3.0));
        u_xlat0.x = min(u_xlat0.x, 3.0);
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat5.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowPos[int(u_xlatu0)].xyz);
        u_xlati0 = int(u_xlatu0) << 2;
        u_xlat6.xzw = u_xlat5.yyy * hlslcc_mtx4x4unity_WorldToShadow[(u_xlati0 + 1)].xyz;
        u_xlat6.xzw = hlslcc_mtx4x4unity_WorldToShadow[u_xlati0].xyz * u_xlat5.xxx + u_xlat6.xzw;
        u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToShadow[(u_xlati0 + 2)].xyz * u_xlat5.zzz + u_xlat6.xzw;
        u_xlat5.xyz = u_xlat5.xyz + hlslcc_mtx4x4unity_WorldToShadow[(u_xlati0 + 3)].xyz;
        vec3 txVec1 = vec3(u_xlat5.xy,u_xlat5.z);
        u_xlat10_0 = textureLod(hlslcc_zcmp_CascadeShadowMapTexture, txVec1, 0.0);
        u_xlat16_55 = (-_LightShadowData.x) + 1.0;
        u_xlat0.x = u_xlat10_0 * u_xlat16_55 + _LightShadowData.x;
    } else {
        u_xlat0.x = 1.0;
    //ENDIF
    }
    u_xlat16_3.xyz = u_xlat16_3.xxx * _LightColor0.xyz;
    u_xlat5.xyz = u_xlat16_3.xyz * u_xlat0.xxx + vs_TEXCOORD1.xyz;
    u_xlat16_3.xyz = u_xlat5.xyz * vec3(0.300000012, 0.300000012, 0.300000012) + vec3(0.699999988, 0.699999988, 0.699999988);
    u_xlat0.x = sqrt(u_xlat59);
    u_xlat16_57 = u_xlat0.x + (-_DepthFoamCloseFadeOffset);
    u_xlat16_57 = u_xlat16_57 / _DepthFoamCloseFadeDistance;
    u_xlat16_16 = vs_COLOR0.x * _DepthFoamExtent;
    u_xlat55 = max(u_xlat6.y, 0.0);
    u_xlat55 = min(u_xlat16_16, u_xlat55);
    u_xlat16_16 = _DepthFoamExtent * vs_COLOR0.x + 9.99999975e-05;
    u_xlat55 = u_xlat55 / u_xlat16_16;
    u_xlat55 = (-u_xlat55) + 1.0;
    u_xlat5.xy = vec2(_Time.y * _DepthFoamMask_ST.z, _Time.y * _DepthFoamMask_ST.w);
    u_xlat5.xy = fract(u_xlat5.xy);
    u_xlat5.xy = _DepthFoamMask_ST.xy * vs_TEXCOORD5.xz + u_xlat5.xy;
    u_xlat10_5 = texture(_DepthFoamMask, u_xlat5.xy).x;
    u_xlat23 = vs_TEXCOORD5.z + vs_TEXCOORD5.x;
    u_xlat23 = u_xlat23 * _DepthFoamPhaseScale;
    u_xlat23 = _DepthFoamSpeed * _Time.y + u_xlat23;
    u_xlat41 = (-u_xlat55) + 1.0;
    u_xlat16_16 = _DepthFoamSubdivision * u_xlat55 + u_xlat23;
    u_xlat16_16 = sin(u_xlat16_16);
    u_xlat16_16 = _DepthFoamWidth * u_xlat55 + u_xlat16_16;
    u_xlat16_23 = u_xlat10_5 * 2.0 + -1.0;
    u_xlat23 = u_xlat16_23 + u_xlat16_16;
#ifdef UNITY_ADRENO_ES3
    u_xlatb23 = !!(u_xlat23>=u_xlat41);
#else
    u_xlatb23 = u_xlat23>=u_xlat41;
#endif
    u_xlat23 = u_xlatb23 ? 1.0 : float(0.0);
    u_xlat5.x = u_xlat23 * u_xlat10_5;
    u_xlat16_16 = _DepthFoamDistance + 9.99999975e-05;
    u_xlat16_16 = u_xlat0.x / u_xlat16_16;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat16_0 = (-u_xlat16_16) + 1.0;
    u_xlat16_16 = vs_COLOR0.y * _DepthFoamColor.w;
    u_xlat16_57 = u_xlat16_57 * u_xlat16_16;
    u_xlat16_57 = u_xlat5.x * u_xlat16_57;
    u_xlat16_57 = u_xlat55 * u_xlat16_57;
    u_xlat16_57 = u_xlat16_0 * u_xlat16_57;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_57 = min(max(u_xlat16_57, 0.0), 1.0);
#else
    u_xlat16_57 = clamp(u_xlat16_57, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = _DepthFoamColor.xyz * u_xlat16_3.xyz + (-u_xlat1.xyz);
    u_xlat16_3.xyz = vec3(u_xlat16_57) * u_xlat16_3.xyz + u_xlat1.xyz;
    u_xlat16_0 = max(_LightColor0.w, 0.5);
    u_xlat1.xyz = u_xlat9.xyz * vec3(u_xlat26) + u_xlat16_3.xyz;
    u_xlat36.xy = fract(u_xlat0.zw);
    u_xlat16_3.xy = u_xlat36.xy * vec2(1.14999998, 1.14999998);
    u_xlat16_16 = sin(_Ripple02Rotate);
    u_xlat16_17.x = cos(_Ripple02Rotate);
    u_xlat5.x = (-u_xlat16_16);
    u_xlat16_17.y = u_xlat16_16;
    u_xlat6.x = dot(u_xlat16_3.xy, u_xlat16_17.xy);
    u_xlat5.y = u_xlat16_17.x;
    u_xlat6.y = dot(u_xlat16_3.xy, u_xlat5.xy);
    u_xlat10_36 = texture(_WaterRippleTex, u_xlat36.xy).x;
    u_xlat10_54 = texture(_WaterRippleTex, u_xlat6.xy).x;
    u_xlat16_36 = u_xlat10_54 + u_xlat10_36;
    u_xlat36.x = u_xlat16_36 * u_xlat18;
    u_xlat5.xyz = _ES_MainLightColor.xyz * vec3(u_xlat16_0) + (-u_xlat1.xyz);
    u_xlat1.xyz = u_xlat36.xxx * u_xlat5.xyz + u_xlat1.xyz;
    u_xlat1.w = u_xlat18 * vs_COLOR0.w;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MHY_SHADER_HIGH" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
uniform 	vec4 hlslcc_mtx4x4_mhyJitteredVP[4];
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
out highp vec4 vs_TEXCOORD9;
out highp vec4 vs_TEXCOORD10;
float u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec4 u_xlat8;
vec3 u_xlat9;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat9.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4_mhyJitteredVP[1];
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[3] * u_xlat2.wwww + u_xlat1;
    u_xlat3.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    u_xlat3.xyw = u_xlat1.xyw;
    gl_Position = u_xlat3;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD1.w = 1.0;
    u_xlat4.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat4.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat4.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat1.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
    u_xlat16_5.x = u_xlat4.y * u_xlat4.y;
    u_xlat16_5.x = u_xlat4.x * u_xlat4.x + (-u_xlat16_5.x);
    u_xlat16_6 = u_xlat4.yzzx * u_xlat4.xyzz;
    u_xlat16_7.x = dot(unity_SHBr, u_xlat16_6);
    u_xlat16_7.y = dot(unity_SHBg, u_xlat16_6);
    u_xlat16_7.z = dot(unity_SHBb, u_xlat16_6);
    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_7.xyz;
    u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat4.w = 1.0;
    u_xlat16_6.x = dot(unity_SHAr, u_xlat4);
    u_xlat16_6.y = dot(unity_SHAg, u_xlat4);
    u_xlat16_6.z = dot(unity_SHAb, u_xlat4);
    u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_6.xyz;
    vs_TEXCOORD1.xyz = u_xlat16_5.xyz;
    u_xlat1.x = u_xlat3.y * _ProjectionParams.x;
    u_xlat8.w = u_xlat1.x * 0.5;
    u_xlat8.xz = u_xlat3.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.z = u_xlat1.z;
    u_xlat3.xy = u_xlat8.zz + u_xlat8.xw;
    vs_TEXCOORD2 = u_xlat3;
    vs_TEXCOORD4.xyw = u_xlat3.xyw;
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD3.w = 0.0;
    u_xlat1.x = u_xlat2.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat2.x + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat2.z + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat2.w + u_xlat1.x;
    vs_TEXCOORD3.z = (-u_xlat1.x);
    vs_TEXCOORD5.w = 0.0;
    vs_TEXCOORD5.xyz = u_xlat9.xyz;
    u_xlat9.xyz = (-u_xlat9.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD6.w = 0.0;
    vs_TEXCOORD6.xyz = u_xlat4.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].www + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * in_POSITION0.yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.zzz + u_xlat1.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.www + u_xlat1.xyz;
    vs_TEXCOORD7.xyz = u_xlat1.xyz * vec3(-1.0, -1.0, 1.0);
    vs_TEXCOORD7.w = 0.0;
    u_xlat1.xyz = in_TANGENT0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat0 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0 = inversesqrt(u_xlat0);
    u_xlat1.xyz = vec3(u_xlat0) * u_xlat1.xyz;
    vs_TEXCOORD8.xyz = u_xlat1.xyz;
    vs_TEXCOORD8.w = 0.0;
    u_xlat2.xyz = u_xlat1.yzx * u_xlat4.zxy;
    u_xlat1.xyz = u_xlat4.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
    u_xlat0 = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD9.xyz = vec3(u_xlat0) * u_xlat1.xyz;
    vs_TEXCOORD9.w = 0.0;
    u_xlat0 = u_xlat9.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat9.x + u_xlat0;
    vs_TEXCOORD10.w = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat9.z + u_xlat0;
    vs_TEXCOORD10.xyz = u_xlat9.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowPos[4];
uniform 	mediump vec4 _LightColor0;
uniform 	mediump float _CausticUVScale;
uniform 	mediump float _CausticSpeed;
uniform 	mediump vec4 _CausticColor;
uniform 	mediump float _CausticDepth;
uniform 	mediump float _CausticDistance;
uniform 	mediump float _CausticDistortionValue;
uniform 	mediump vec4 _DepthFoamMask_ST;
uniform 	mediump float _DepthFoamSpeed;
uniform 	mediump vec4 _DepthFoamColor;
uniform 	mediump float _DepthFoamExtent;
uniform 	mediump float _DepthFoamDistance;
uniform 	mediump float _DepthFoamSubdivision;
uniform 	mediump float _DepthFoamWidth;
uniform 	mediump float _DepthFoamPhaseScale;
uniform 	mediump float _DepthFoamCloseFadeOffset;
uniform 	mediump float _DepthFoamCloseFadeDistance;
uniform 	float _NormalMapScale;
uniform 	float _Normal01_U_Speed;
uniform 	float _Normal01_VSpeed;
uniform 	float _NormalMapBias;
uniform 	float _Normal02_U_Speed;
uniform 	float _Normal02_V_Speed;
uniform 	float _RefractionIntensity;
uniform 	float _OpacityByDepth;
uniform 	float _SpecularIntensity;
uniform 	vec3 _ES_MoonDirection;
uniform 	vec3 _ES_SunDirection;
uniform 	float _Gloss;
uniform 	float _ShoreTransparency;
uniform 	float _SpecularPower;
uniform 	vec4 _ShallowColor;
uniform 	float _ShoreFade;
uniform 	vec4 _DeepColor;
uniform 	float _DeepColorDepth;
uniform 	float _DeepColorFade;
uniform 	vec4 _DistortionIntensity;
uniform 	float _SSRDistortion;
uniform 	float _SSRDistortion_Shore;
uniform 	float _SSRIntensity;
uniform 	float _ReflectionIntensity;
uniform 	float _FresnelPower;
uniform 	float _ShoreReflectionFade;
uniform 	vec3 _ES_MainLightColor;
uniform 	mediump float _RippleTillingScale;
uniform 	mediump float _Ripple02Rotate;
uniform 	mediump float _ProjectUVScale;
uniform 	mediump float _CausticFade;
uniform 	mediump float _CausticFadeExponent;
uniform 	vec4 _ReflectionSkyCubeMap_HDR;
uniform lowp sampler2D _Normal01;
uniform lowp sampler2D _Normal02;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _SceneScaledBufferBeforTransParent;
uniform lowp samplerCube _ReflectionSkyCubeMap;
uniform lowp sampler2D _SSRTexture;
uniform lowp sampler2D _DepthFoamMask;
uniform lowp sampler2D _WaterRippleTex;
uniform lowp sampler2DShadow hlslcc_zcmp_CascadeShadowMapTexture;
uniform lowp sampler2D _CascadeShadowMapTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD8;
in highp vec4 vs_TEXCOORD9;
in highp vec4 vs_TEXCOORD10;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
lowp float u_xlat10_0;
int u_xlati0;
uint u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec3 u_xlat10_1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
lowp vec4 u_xlat10_2;
bvec4 u_xlatb2;
mediump vec3 u_xlat16_3;
vec4 u_xlat4;
mediump vec3 u_xlat16_4;
lowp vec4 u_xlat10_4;
vec3 u_xlat5;
lowp float u_xlat10_5;
vec4 u_xlat6;
vec4 u_xlat7;
mediump vec3 u_xlat16_7;
vec4 u_xlat8;
vec3 u_xlat9;
vec3 u_xlat10;
mediump vec3 u_xlat16_10;
vec3 u_xlat11;
vec3 u_xlat12;
lowp vec3 u_xlat10_12;
vec3 u_xlat13;
vec3 u_xlat14;
vec3 u_xlat15;
mediump float u_xlat16_16;
mediump vec2 u_xlat16_17;
float u_xlat18;
vec3 u_xlat19;
mediump vec3 u_xlat16_21;
float u_xlat23;
mediump float u_xlat16_23;
bool u_xlatb23;
vec3 u_xlat25;
bool u_xlatb25;
float u_xlat26;
vec2 u_xlat36;
mediump float u_xlat16_36;
lowp float u_xlat10_36;
float u_xlat37;
lowp float u_xlat10_37;
int u_xlati37;
uint u_xlatu37;
bool u_xlatb37;
float u_xlat41;
float u_xlat42;
lowp float u_xlat10_54;
float u_xlat55;
mediump float u_xlat16_55;
mediump float u_xlat16_57;
float u_xlat59;
mediump float u_xlat16_59;
bool u_xlatb59;
float u_xlat60;
float u_xlat61;
void main()
{
    u_xlat0 = vs_TEXCOORD5.xzxz * vec4(_ProjectUVScale, _ProjectUVScale, _RippleTillingScale, _RippleTillingScale);
    u_xlat1.x = _Time.y * _Normal01_U_Speed + u_xlat0.x;
    u_xlat1.yz = _Time.yy * vec2(_Normal01_VSpeed, _Normal02_U_Speed) + u_xlat0.yx;
    u_xlat1.w = _Time.y * _Normal02_V_Speed + u_xlat0.y;
    u_xlat10_2.xyz = texture(_Normal01, u_xlat1.xy, _NormalMapBias).xyz;
    u_xlat16_2.xyz = u_xlat10_2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_3.xy = u_xlat16_2.xy * vec2(_NormalMapScale);
    u_xlat10_1.xyz = texture(_Normal02, u_xlat1.zw, _NormalMapBias).xyz;
    u_xlat16_2.w = -1.0;
    u_xlat16_4.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_2.wwz;
    u_xlat16_4.xy = u_xlat16_4.xy * vec2(_NormalMapScale);
    u_xlat16_3.z = -1.0;
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat0.x = float(1.0) / vs_TEXCOORD4.w;
    u_xlat1.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat18 = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat18 = _ZBufferParams.z * u_xlat18 + _ZBufferParams.w;
    u_xlat18 = float(1.0) / u_xlat18;
    u_xlat1.x = vs_TEXCOORD10.w + 9.99999975e-05;
    u_xlat1.x = (-u_xlat18) / u_xlat1.x;
    u_xlat19.xyz = u_xlat1.xxx * vs_TEXCOORD10.xyz;
    u_xlat5.xyz = vs_TEXCOORD10.xyz * u_xlat1.xxx + _WorldSpaceCameraPos.xyz;
    u_xlat6.xyz = (-u_xlat5.xyz) + vs_TEXCOORD5.xyz;
    u_xlat1.x = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlat6.xz = u_xlat16_3.xy * vec2(vec2(_RefractionIntensity, _RefractionIntensity));
    u_xlat0.x = u_xlat0.x * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat6.xz = u_xlat0.xx * u_xlat6.xz;
    u_xlat6.xz = u_xlat6.xz * vs_TEXCOORD4.ww;
    u_xlat0.x = u_xlat18 + (-vs_TEXCOORD4.w);
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat7.xy = u_xlat0.xx * u_xlat6.xz;
    u_xlat7.z = 0.0;
    u_xlat6.xzw = u_xlat7.xyz + vs_TEXCOORD4.xyw;
    u_xlat0.xy = u_xlat6.xz / u_xlat6.ww;
    u_xlat0.x = texture(_CameraDepthTexture, u_xlat0.xy).x;
    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat0.x = u_xlat0.x + (-vs_TEXCOORD4.w);
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat6.xzw = u_xlat0.xxx * u_xlat7.xyz + vs_TEXCOORD4.xyw;
    u_xlat0.xy = u_xlat6.xz / u_xlat6.ww;
    u_xlat0.x = texture(_CameraDepthTexture, u_xlat0.xy).x;
    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat0.x = u_xlat0.x + (-vs_TEXCOORD4.w);
    u_xlat18 = 0.100000001 / _OpacityByDepth;
    u_xlat18 = u_xlat18 * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat16_4.xz = u_xlat16_3.xy;
    u_xlat16_4.y = 1.0;
    u_xlat16_59 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);
    u_xlat16_59 = inversesqrt(u_xlat16_59);
    u_xlat16_7.xyz = u_xlat16_4.xyz * vec3(u_xlat16_59);
#ifdef UNITY_ADRENO_ES3
    u_xlatb59 = !!(0.0>=_ES_MoonDirection.y);
#else
    u_xlatb59 = 0.0>=_ES_MoonDirection.y;
#endif
    u_xlat8.xyz = (bool(u_xlatb59)) ? _ES_SunDirection.xyz : _ES_MoonDirection.xyz;
    u_xlat9.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat59 = dot(u_xlat9.xyz, u_xlat9.xyz);
    u_xlat60 = inversesqrt(u_xlat59);
    u_xlat10.xyz = vec3(u_xlat60) * u_xlat9.xyz;
    u_xlat8.xyz = u_xlat9.xyz * vec3(u_xlat60) + u_xlat8.xyz;
    u_xlat60 = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat60 = inversesqrt(u_xlat60);
    u_xlat8.xyz = vec3(u_xlat60) * u_xlat8.xyz;
    u_xlat60 = dot(u_xlat16_7.xyz, u_xlat8.xyz);
    u_xlat25.x = _Gloss * 128.0;
    u_xlat60 = max(u_xlat60, 9.99999975e-05);
    u_xlat60 = log2(u_xlat60);
    u_xlat60 = u_xlat60 * u_xlat25.x;
    u_xlat60 = exp2(u_xlat60);
    u_xlat60 = u_xlat60 * _SpecularIntensity;
    u_xlat60 = max(u_xlat60, 0.0);
    u_xlat60 = min(u_xlat60, 16.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb25 = !!(_ES_MoonDirection.y>=9.99999975e-05);
#else
    u_xlatb25 = _ES_MoonDirection.y>=9.99999975e-05;
#endif
    u_xlat25.x = u_xlatb25 ? 1.0 : float(0.0);
    u_xlat61 = _ES_MoonDirection.y + -1.0;
    u_xlat25.x = u_xlat25.x * u_xlat61 + 1.0;
    u_xlat61 = float(1.0) / _ShoreTransparency;
    u_xlat8.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat8.xyz = u_xlat8.xxx * vs_TEXCOORD6.xyz;
    u_xlat8.x = dot(u_xlat10.xyz, u_xlat8.xyz);
    u_xlat8.x = (-u_xlat8.x) + 1.0;
    u_xlat8.x = max(u_xlat8.x, 9.99999975e-05);
    u_xlat8.x = log2(u_xlat8.x);
    u_xlat26 = u_xlat8.x * _SpecularPower;
    u_xlat26 = exp2(u_xlat26);
    u_xlat9.xyz = u_xlat25.xxx * _LightColor0.xyz;
    u_xlat9.xyz = vec3(u_xlat60) * u_xlat9.xyz;
    u_xlat60 = u_xlat0.x + -1.0;
    u_xlat60 = u_xlat61 * u_xlat60;
    u_xlat60 = u_xlat60 * 0.100000001;
#ifdef UNITY_ADRENO_ES3
    u_xlat60 = min(max(u_xlat60, 0.0), 1.0);
#else
    u_xlat60 = clamp(u_xlat60, 0.0, 1.0);
#endif
    u_xlat9.xyz = vec3(u_xlat60) * u_xlat9.xyz;
    u_xlat60 = u_xlat0.x * u_xlat61;
#ifdef UNITY_ADRENO_ES3
    u_xlat60 = min(max(u_xlat60, 0.0), 1.0);
#else
    u_xlat60 = clamp(u_xlat60, 0.0, 1.0);
#endif
    u_xlat60 = max(u_xlat60, 9.99999975e-05);
    u_xlat60 = log2(u_xlat60);
    u_xlat60 = u_xlat60 * _ShoreFade;
    u_xlat60 = exp2(u_xlat60);
    u_xlat11.xyz = _ShallowColor.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat11.xyz = vec3(u_xlat60) * u_xlat11.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat6.xz = u_xlat6.xz / vs_TEXCOORD4.ww;
    u_xlat10_12.xyz = texture(_SceneScaledBufferBeforTransParent, u_xlat6.xz).xyz;
    u_xlat6.x = u_xlat1.x * _CausticDistortionValue;
    u_xlat6.xz = u_xlat6.xx * u_xlat16_7.xz;
    u_xlat7.z = _Time.y * _CausticSpeed;
    u_xlat6.xz = u_xlat5.xz * vec2(_CausticUVScale) + u_xlat6.xz;
    u_xlat13.x = _Normal01_U_Speed * 25.0;
    u_xlat13.y = _Normal01_VSpeed * 25.0;
    u_xlat7.xy = u_xlat7.zz * u_xlat13.xy + u_xlat6.xz;
    u_xlat13.x = dot(u_xlat7.xyz, vec3(-2.0, 3.0, 1.0));
    u_xlat13.y = dot(u_xlat7.xyz, vec3(-1.0, -2.0, 2.0));
    u_xlat13.z = dot(u_xlat7.xzy, vec3(2.0, 2.0, 1.0));
    u_xlat7.xyz = u_xlat13.xyz * vec3(0.400000006, 0.400000006, 0.400000006);
    u_xlat14.x = dot(u_xlat7.xyz, vec3(-2.0, 3.0, 1.0));
    u_xlat14.y = dot(u_xlat7.xyz, vec3(-1.0, -2.0, 2.0));
    u_xlat14.z = dot(u_xlat7.xzy, vec3(2.0, 2.0, 1.0));
    u_xlat7.xyz = u_xlat14.xyz * vec3(0.300000012, 0.300000012, 0.300000012);
    u_xlat6.x = dot(u_xlat7.xyz, vec3(-2.0, 3.0, 1.0));
    u_xlat6.z = dot(u_xlat7.xyz, vec3(-1.0, -2.0, 2.0));
    u_xlat7.x = dot(u_xlat7.xzy, vec3(2.0, 2.0, 1.0));
    u_xlat25.xyz = fract(u_xlat13.xyz);
    u_xlat25.xyz = (-u_xlat25.xyz) + vec3(0.5, 0.5, 0.5);
    u_xlat25.x = dot(u_xlat25.xyz, u_xlat25.xyz);
    u_xlat13.xyz = fract(u_xlat14.xyz);
    u_xlat13.xyz = (-u_xlat13.xyz) + vec3(0.5, 0.5, 0.5);
    u_xlat25.y = dot(u_xlat13.xyz, u_xlat13.xyz);
    u_xlat25.xy = sqrt(u_xlat25.xy);
    u_xlat25.x = min(u_xlat25.y, u_xlat25.x);
    u_xlat13.xy = fract(u_xlat6.xz);
    u_xlat13.z = fract(u_xlat7.x);
    u_xlat7.xzw = (-u_xlat13.xyz) + vec3(0.5, 0.5, 0.5);
    u_xlat6.x = dot(u_xlat7.xzw, u_xlat7.xzw);
    u_xlat6.x = sqrt(u_xlat6.x);
    u_xlat6.x = min(u_xlat6.x, u_xlat25.x);
    u_xlat6.x = log2(u_xlat6.x);
    u_xlat6.x = u_xlat6.x * 7.0;
    u_xlat6.x = exp2(u_xlat6.x);
    u_xlat6.x = u_xlat6.x * 25.0;
    u_xlat16_4.xy = vec2(float(_CausticDepth) + float(9.99999975e-05), float(_CausticDistance) + float(9.99999975e-05));
    u_xlat42 = u_xlat6.y / u_xlat16_4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat42 = min(max(u_xlat42, 0.0), 1.0);
#else
    u_xlat42 = clamp(u_xlat42, 0.0, 1.0);
#endif
    u_xlat19.x = dot(u_xlat19.xyz, u_xlat19.xyz);
    u_xlat19.x = sqrt(u_xlat19.x);
    u_xlat19.x = u_xlat19.x / u_xlat16_4.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat19.x = min(max(u_xlat19.x, 0.0), 1.0);
#else
    u_xlat19.x = clamp(u_xlat19.x, 0.0, 1.0);
#endif
    u_xlat19.x = (-u_xlat19.x) + 1.0;
    u_xlat19.x = u_xlat19.x * u_xlat42;
    u_xlat7.xyz = u_xlat5.xyz + (-unity_ShadowSplitSpheres[0].xyz);
    u_xlat13.xyz = u_xlat5.xyz + (-unity_ShadowSplitSpheres[1].xyz);
    u_xlat14.xyz = u_xlat5.xyz + (-unity_ShadowSplitSpheres[2].xyz);
    u_xlat15.xyz = u_xlat5.xyz + (-unity_ShadowSplitSpheres[3].xyz);
    u_xlat2.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat2.y = dot(u_xlat13.xyz, u_xlat13.xyz);
    u_xlat2.z = dot(u_xlat14.xyz, u_xlat14.xyz);
    u_xlat2.w = dot(u_xlat15.xyz, u_xlat15.xyz);
    u_xlatb2 = lessThan(u_xlat2, unity_ShadowSplitSqRadii);
    u_xlat2 = mix(vec4(0.0, 0.0, 0.0, 0.0), vec4(1.0, 1.0, 1.0, 1.0), vec4(u_xlatb2));
    u_xlat16_57 = u_xlat2.y + u_xlat2.x;
    u_xlat16_4.x = u_xlat2.z + u_xlat16_57;
    u_xlat7.x = -0.0;
    u_xlat7.y = (-u_xlat2.x);
    u_xlat7.z = (-u_xlat16_57);
    u_xlat7.w = (-u_xlat16_4.x);
    u_xlat2 = u_xlat2 + u_xlat7;
    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat16_57 = dot(u_xlat2, vec4(1.0, 1.0, 1.0, 1.0));
#ifdef UNITY_ADRENO_ES3
    u_xlatb37 = !!(u_xlat16_57>=0.5);
#else
    u_xlatb37 = u_xlat16_57>=0.5;
#endif
    if(u_xlatb37){
        u_xlat37 = dot(u_xlat2.yzw, vec3(1.0, 2.0, 3.0));
        u_xlat37 = min(u_xlat37, 3.0);
        u_xlatu37 = uint(u_xlat37);
        u_xlat5.xyz = u_xlat5.xyz + (-unity_ShadowPos[int(u_xlatu37)].xyz);
        u_xlati37 = int(u_xlatu37) << 2;
        u_xlat7.xyz = u_xlat5.yyy * hlslcc_mtx4x4unity_WorldToShadow[(u_xlati37 + 1)].xyz;
        u_xlat7.xyz = hlslcc_mtx4x4unity_WorldToShadow[u_xlati37].xyz * u_xlat5.xxx + u_xlat7.xyz;
        u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToShadow[(u_xlati37 + 2)].xyz * u_xlat5.zzz + u_xlat7.xyz;
        u_xlat5.xyz = u_xlat5.xyz + hlslcc_mtx4x4unity_WorldToShadow[(u_xlati37 + 3)].xyz;
        vec3 txVec0 = vec3(u_xlat5.xy,u_xlat5.z);
        u_xlat10_37 = textureLod(hlslcc_zcmp_CascadeShadowMapTexture, txVec0, 0.0);
        u_xlat16_55 = (-_LightShadowData.x) + 1.0;
        u_xlat37 = u_xlat10_37 * u_xlat16_55 + _LightShadowData.x;
    } else {
        u_xlat37 = 1.0;
    //ENDIF
    }
    u_xlat19.x = u_xlat37 * u_xlat19.x;
    u_xlat16_4.xyz = _LightColor0.xyz * _CausticColor.xyz;
    u_xlat16_4.xyz = u_xlat6.xxx * u_xlat16_4.xyz;
    u_xlat16_4.xyz = u_xlat19.xxx * u_xlat16_4.xyz;
    u_xlat16_57 = _CausticFade + 9.99999975e-05;
    u_xlat1.x = u_xlat1.x / u_xlat16_57;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.x = log2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _CausticFadeExponent;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat1.x = (-u_xlat1.x) + 1.0;
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat1.xxx + vec3(1.0, 1.0, 1.0);
    u_xlat16_1.xyz = u_xlat16_4.xyz * u_xlat10_12.xyz;
    u_xlat5.xyz = u_xlat16_1.xyz * u_xlat11.xyz;
    u_xlat55 = 0.100000001 / _DeepColorDepth;
    u_xlat55 = u_xlat0.x * u_xlat55;
#ifdef UNITY_ADRENO_ES3
    u_xlat55 = min(max(u_xlat55, 0.0), 1.0);
#else
    u_xlat55 = clamp(u_xlat55, 0.0, 1.0);
#endif
    u_xlat55 = max(u_xlat55, 9.99999975e-05);
    u_xlat55 = log2(u_xlat55);
    u_xlat55 = u_xlat55 * _DeepColorFade;
    u_xlat55 = exp2(u_xlat55);
    u_xlat7.xyz = (-u_xlat11.xyz) * u_xlat16_1.xyz + _DeepColor.xyz;
    u_xlat7.xyz = vec3(u_xlat55) * u_xlat7.xyz + u_xlat5.xyz;
    u_xlat12.xyz = u_xlat16_3.xyz * _DistortionIntensity.xyz;
    u_xlat13.x = vs_TEXCOORD8.x;
    u_xlat13.y = vs_TEXCOORD9.x;
    u_xlat13.z = vs_TEXCOORD6.x;
    u_xlat13.x = dot(u_xlat13.xyz, u_xlat12.xyz);
    u_xlat14.x = vs_TEXCOORD8.y;
    u_xlat14.y = vs_TEXCOORD9.y;
    u_xlat14.z = vs_TEXCOORD6.y;
    u_xlat13.y = dot(u_xlat14.xyz, u_xlat12.xyz);
    u_xlat14.x = vs_TEXCOORD8.z;
    u_xlat14.y = vs_TEXCOORD9.z;
    u_xlat14.z = vs_TEXCOORD6.z;
    u_xlat13.z = dot(u_xlat14.xyz, u_xlat12.xyz);
    u_xlat55 = dot(u_xlat13.xyz, u_xlat13.xyz);
    u_xlat55 = inversesqrt(u_xlat55);
    u_xlat13.xyz = vec3(u_xlat55) * u_xlat13.xyz;
    u_xlat55 = dot((-u_xlat10.xyz), u_xlat13.xyz);
    u_xlat55 = u_xlat55 + u_xlat55;
    u_xlat10.xyz = u_xlat13.xyz * (-vec3(u_xlat55)) + (-u_xlat10.xyz);
    u_xlat10_2 = textureLod(_ReflectionSkyCubeMap, u_xlat10.xyz, 0.0);
    u_xlat16_3.x = u_xlat10_2.w + -1.0;
    u_xlat16_3.x = _ReflectionSkyCubeMap_HDR.w * u_xlat16_3.x + 1.0;
    u_xlat16_3.x = log2(u_xlat16_3.x);
    u_xlat16_3.x = u_xlat16_3.x * _ReflectionSkyCubeMap_HDR.y;
    u_xlat16_3.x = exp2(u_xlat16_3.x);
    u_xlat16_3.x = u_xlat16_3.x * _ReflectionSkyCubeMap_HDR.x;
    u_xlat16_21.xyz = u_xlat10_2.xyz * u_xlat16_3.xxx;
    u_xlat6.xz = u_xlat12.xy * vec2(_SSRDistortion);
    u_xlat55 = float(1.0) / _SSRDistortion_Shore;
    u_xlat55 = u_xlat0.x * u_xlat55;
#ifdef UNITY_ADRENO_ES3
    u_xlat55 = min(max(u_xlat55, 0.0), 1.0);
#else
    u_xlat55 = clamp(u_xlat55, 0.0, 1.0);
#endif
    u_xlat6.xz = vec2(u_xlat55) * u_xlat6.xz;
    u_xlat6.xz = u_xlat6.xz * vs_TEXCOORD4.ww + vs_TEXCOORD4.xy;
    u_xlat6.xz = u_xlat6.xz / vs_TEXCOORD4.ww;
    u_xlat10_4 = texture(_SSRTexture, u_xlat6.xz).wxyz;
    u_xlat16_10.xyz = (-u_xlat16_3.xxx) * u_xlat10_2.xyz + u_xlat10_4.yzw;
    u_xlat10.xyz = u_xlat16_10.xyz * vec3(vec3(_SSRIntensity, _SSRIntensity, _SSRIntensity));
    u_xlat16_4.x = u_xlat10_4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat10.xyz = u_xlat16_4.xxx * u_xlat10.xyz + u_xlat16_21.xyz;
    u_xlat55 = u_xlat8.x * _FresnelPower;
    u_xlat55 = exp2(u_xlat55);
    u_xlat55 = u_xlat55 * _ReflectionIntensity;
    u_xlat6.x = float(1.0) / _ShoreReflectionFade;
    u_xlat0.x = u_xlat0.x * u_xlat6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x * u_xlat55;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat8.xzw = (-u_xlat7.xyz) + u_xlat10.xyz;
    u_xlat7.xyz = u_xlat0.xxx * u_xlat8.xzw + u_xlat7.xyz;
    u_xlat1.xyz = (-u_xlat11.xyz) * u_xlat16_1.xyz + u_xlat7.xyz;
    u_xlat1.xyz = vec3(u_xlat60) * u_xlat1.xyz + u_xlat5.xyz;
    u_xlat0.x = (-vs_TEXCOORD5.y) * _WorldSpaceLightPos0.w + _WorldSpaceLightPos0.y;
    u_xlat16_3.x = max(u_xlat0.x, 0.0);
    u_xlat5.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowSplitSpheres[0].xyz);
    u_xlat6.xzw = vs_TEXCOORD5.xyz + (-unity_ShadowSplitSpheres[1].xyz);
    u_xlat7.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowSplitSpheres[2].xyz);
    u_xlat8.xzw = vs_TEXCOORD5.xyz + (-unity_ShadowSplitSpheres[3].xyz);
    u_xlat2.x = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat2.y = dot(u_xlat6.xzw, u_xlat6.xzw);
    u_xlat2.z = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat2.w = dot(u_xlat8.xzw, u_xlat8.xzw);
    u_xlatb2 = lessThan(u_xlat2, unity_ShadowSplitSqRadii);
    u_xlat2 = mix(vec4(0.0, 0.0, 0.0, 0.0), vec4(1.0, 1.0, 1.0, 1.0), vec4(u_xlatb2));
    u_xlat16_21.x = u_xlat2.y + u_xlat2.x;
    u_xlat16_21.y = u_xlat2.z + u_xlat16_21.x;
    u_xlat4.x = -0.0;
    u_xlat4.y = (-u_xlat2.x);
    u_xlat4.zw = (-u_xlat16_21.xy);
    u_xlat2 = u_xlat2 + u_xlat4;
    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat16_21.x = dot(u_xlat2, vec4(1.0, 1.0, 1.0, 1.0));
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat16_21.x>=0.5);
#else
    u_xlatb0 = u_xlat16_21.x>=0.5;
#endif
    if(u_xlatb0){
        u_xlat0.x = dot(u_xlat2.yzw, vec3(1.0, 2.0, 3.0));
        u_xlat0.x = min(u_xlat0.x, 3.0);
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat5.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowPos[int(u_xlatu0)].xyz);
        u_xlati0 = int(u_xlatu0) << 2;
        u_xlat6.xzw = u_xlat5.yyy * hlslcc_mtx4x4unity_WorldToShadow[(u_xlati0 + 1)].xyz;
        u_xlat6.xzw = hlslcc_mtx4x4unity_WorldToShadow[u_xlati0].xyz * u_xlat5.xxx + u_xlat6.xzw;
        u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToShadow[(u_xlati0 + 2)].xyz * u_xlat5.zzz + u_xlat6.xzw;
        u_xlat5.xyz = u_xlat5.xyz + hlslcc_mtx4x4unity_WorldToShadow[(u_xlati0 + 3)].xyz;
        vec3 txVec1 = vec3(u_xlat5.xy,u_xlat5.z);
        u_xlat10_0 = textureLod(hlslcc_zcmp_CascadeShadowMapTexture, txVec1, 0.0);
        u_xlat16_55 = (-_LightShadowData.x) + 1.0;
        u_xlat0.x = u_xlat10_0 * u_xlat16_55 + _LightShadowData.x;
    } else {
        u_xlat0.x = 1.0;
    //ENDIF
    }
    u_xlat16_3.xyz = u_xlat16_3.xxx * _LightColor0.xyz;
    u_xlat5.xyz = u_xlat16_3.xyz * u_xlat0.xxx + vs_TEXCOORD1.xyz;
    u_xlat16_3.xyz = u_xlat5.xyz * vec3(0.300000012, 0.300000012, 0.300000012) + vec3(0.699999988, 0.699999988, 0.699999988);
    u_xlat0.x = sqrt(u_xlat59);
    u_xlat16_57 = u_xlat0.x + (-_DepthFoamCloseFadeOffset);
    u_xlat16_57 = u_xlat16_57 / _DepthFoamCloseFadeDistance;
    u_xlat16_16 = vs_COLOR0.x * _DepthFoamExtent;
    u_xlat55 = max(u_xlat6.y, 0.0);
    u_xlat55 = min(u_xlat16_16, u_xlat55);
    u_xlat16_16 = _DepthFoamExtent * vs_COLOR0.x + 9.99999975e-05;
    u_xlat55 = u_xlat55 / u_xlat16_16;
    u_xlat55 = (-u_xlat55) + 1.0;
    u_xlat5.xy = vec2(_Time.y * _DepthFoamMask_ST.z, _Time.y * _DepthFoamMask_ST.w);
    u_xlat5.xy = fract(u_xlat5.xy);
    u_xlat5.xy = _DepthFoamMask_ST.xy * vs_TEXCOORD5.xz + u_xlat5.xy;
    u_xlat10_5 = texture(_DepthFoamMask, u_xlat5.xy).x;
    u_xlat23 = vs_TEXCOORD5.z + vs_TEXCOORD5.x;
    u_xlat23 = u_xlat23 * _DepthFoamPhaseScale;
    u_xlat23 = _DepthFoamSpeed * _Time.y + u_xlat23;
    u_xlat41 = (-u_xlat55) + 1.0;
    u_xlat16_16 = _DepthFoamSubdivision * u_xlat55 + u_xlat23;
    u_xlat16_16 = sin(u_xlat16_16);
    u_xlat16_16 = _DepthFoamWidth * u_xlat55 + u_xlat16_16;
    u_xlat16_23 = u_xlat10_5 * 2.0 + -1.0;
    u_xlat23 = u_xlat16_23 + u_xlat16_16;
#ifdef UNITY_ADRENO_ES3
    u_xlatb23 = !!(u_xlat23>=u_xlat41);
#else
    u_xlatb23 = u_xlat23>=u_xlat41;
#endif
    u_xlat23 = u_xlatb23 ? 1.0 : float(0.0);
    u_xlat5.x = u_xlat23 * u_xlat10_5;
    u_xlat16_16 = _DepthFoamDistance + 9.99999975e-05;
    u_xlat16_16 = u_xlat0.x / u_xlat16_16;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat16_0 = (-u_xlat16_16) + 1.0;
    u_xlat16_16 = vs_COLOR0.y * _DepthFoamColor.w;
    u_xlat16_57 = u_xlat16_57 * u_xlat16_16;
    u_xlat16_57 = u_xlat5.x * u_xlat16_57;
    u_xlat16_57 = u_xlat55 * u_xlat16_57;
    u_xlat16_57 = u_xlat16_0 * u_xlat16_57;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_57 = min(max(u_xlat16_57, 0.0), 1.0);
#else
    u_xlat16_57 = clamp(u_xlat16_57, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = _DepthFoamColor.xyz * u_xlat16_3.xyz + (-u_xlat1.xyz);
    u_xlat16_3.xyz = vec3(u_xlat16_57) * u_xlat16_3.xyz + u_xlat1.xyz;
    u_xlat16_0 = max(_LightColor0.w, 0.5);
    u_xlat1.xyz = u_xlat9.xyz * vec3(u_xlat26) + u_xlat16_3.xyz;
    u_xlat36.xy = fract(u_xlat0.zw);
    u_xlat16_3.xy = u_xlat36.xy * vec2(1.14999998, 1.14999998);
    u_xlat16_16 = sin(_Ripple02Rotate);
    u_xlat16_17.x = cos(_Ripple02Rotate);
    u_xlat5.x = (-u_xlat16_16);
    u_xlat16_17.y = u_xlat16_16;
    u_xlat6.x = dot(u_xlat16_3.xy, u_xlat16_17.xy);
    u_xlat5.y = u_xlat16_17.x;
    u_xlat6.y = dot(u_xlat16_3.xy, u_xlat5.xy);
    u_xlat10_36 = texture(_WaterRippleTex, u_xlat36.xy).x;
    u_xlat10_54 = texture(_WaterRippleTex, u_xlat6.xy).x;
    u_xlat16_36 = u_xlat10_54 + u_xlat10_36;
    u_xlat36.x = u_xlat16_36 * u_xlat18;
    u_xlat5.xyz = _ES_MainLightColor.xyz * vec3(u_xlat16_0) + (-u_xlat1.xyz);
    u_xlat1.xyz = u_xlat36.xxx * u_xlat5.xyz + u_xlat1.xyz;
    u_xlat1.w = u_xlat18 * vs_COLOR0.w;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "MHY_SHADER_MIDDLE" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump float _MHYZBias;
uniform 	vec4 hlslcc_mtx4x4_mhyJitteredVP[4];
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
out highp vec4 vs_TEXCOORD9;
out highp vec4 vs_TEXCOORD10;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec4 u_xlat8;
float u_xlat27;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4_mhyJitteredVP[1];
    u_xlat2 = hlslcc_mtx4x4_mhyJitteredVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4_mhyJitteredVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4_mhyJitteredVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat3.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    u_xlat3.xyw = u_xlat2.xyw;
    gl_Position = u_xlat3;
    vs_COLOR0 = in_COLOR0;
    u_xlat4.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat4.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat4.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat27 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat4.xyz = vec3(u_xlat27) * u_xlat4.xyz;
    u_xlat16_5.x = u_xlat4.y * u_xlat4.y;
    u_xlat16_5.x = u_xlat4.x * u_xlat4.x + (-u_xlat16_5.x);
    u_xlat16_6 = u_xlat4.yzzx * u_xlat4.xyzz;
    u_xlat16_7.x = dot(unity_SHBr, u_xlat16_6);
    u_xlat16_7.y = dot(unity_SHBg, u_xlat16_6);
    u_xlat16_7.z = dot(unity_SHBb, u_xlat16_6);
    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_7.xyz;
    u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat4.w = 1.0;
    u_xlat16_6.x = dot(unity_SHAr, u_xlat4);
    u_xlat16_6.y = dot(unity_SHAg, u_xlat4);
    u_xlat16_6.z = dot(unity_SHAb, u_xlat4);
    u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_6.xyz;
    vs_TEXCOORD1.xyz = u_xlat16_5.xyz;
    vs_TEXCOORD1.w = 1.0;
    u_xlat27 = u_xlat3.y * _ProjectionParams.x;
    u_xlat8.w = u_xlat27 * 0.5;
    u_xlat8.xz = u_xlat3.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.z = u_xlat2.z;
    u_xlat3.xy = u_xlat8.zz + u_xlat8.xw;
    vs_TEXCOORD2 = u_xlat3;
    vs_TEXCOORD4.xyw = u_xlat3.xyw;
    u_xlat27 = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat27 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat27;
    u_xlat27 = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat27;
    u_xlat27 = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat27;
    vs_TEXCOORD3.z = (-u_xlat27);
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD3.w = 0.0;
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD5.w = 0.0;
    vs_TEXCOORD6.xyz = u_xlat4.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[1].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].www + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * in_POSITION0.yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.zzz + u_xlat1.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.www + u_xlat1.xyz;
    vs_TEXCOORD7.xyz = u_xlat1.xyz * vec3(-1.0, -1.0, 1.0);
    vs_TEXCOORD7.w = 0.0;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat27 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat1.xyz = vec3(u_xlat27) * u_xlat1.xyz;
    vs_TEXCOORD8.xyz = u_xlat1.xyz;
    vs_TEXCOORD8.w = 0.0;
    u_xlat2.xyz = u_xlat1.yzx * u_xlat4.zxy;
    u_xlat1.xyz = u_xlat4.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
    u_xlat27 = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD9.xyz = vec3(u_xlat27) * u_xlat1.xyz;
    vs_TEXCOORD9.w = 0.0;
    u_xlat27 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat27 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat27;
    vs_TEXCOORD10.w = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat27;
    vs_TEXCOORD10.xyz = u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowPos[4];
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _DepthFoamMask_ST;
uniform 	mediump float _DepthFoamSpeed;
uniform 	mediump vec4 _DepthFoamColor;
uniform 	mediump float _DepthFoamExtent;
uniform 	mediump float _DepthFoamDistance;
uniform 	mediump float _DepthFoamSubdivision;
uniform 	mediump float _DepthFoamWidth;
uniform 	mediump float _DepthFoamPhaseScale;
uniform 	mediump float _DepthFoamCloseFadeOffset;
uniform 	mediump float _DepthFoamCloseFadeDistance;
uniform 	float _NormalMapScale;
uniform 	float _Normal01_U_Speed;
uniform 	float _Normal01_VSpeed;
uniform 	float _NormalMapBias;
uniform 	float _Normal02_U_Speed;
uniform 	float _Normal02_V_Speed;
uniform 	float _RefractionIntensity;
uniform 	float _OpacityByDepth;
uniform 	float _SpecularIntensity;
uniform 	vec3 _ES_MoonDirection;
uniform 	vec3 _ES_SunDirection;
uniform 	float _Gloss;
uniform 	float _ShoreTransparency;
uniform 	float _SpecularPower;
uniform 	vec4 _ShallowColor;
uniform 	float _ShoreFade;
uniform 	vec4 _DeepColor;
uniform 	float _DeepColorDepth;
uniform 	float _DeepColorFade;
uniform 	vec4 _DistortionIntensity;
uniform 	float _SSRDistortion;
uniform 	float _SSRDistortion_Shore;
uniform 	float _SSRIntensity;
uniform 	float _ReflectionIntensity;
uniform 	float _FresnelPower;
uniform 	float _ShoreReflectionFade;
uniform 	mediump float _ProjectUVScale;
uniform 	vec4 _ReflectionSkyCubeMap_HDR;
uniform lowp sampler2D _Normal01;
uniform lowp sampler2D _Normal02;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _SceneScaledBufferBeforTransParent;
uniform lowp samplerCube _ReflectionSkyCubeMap;
uniform lowp sampler2D _SSRTexture;
uniform lowp sampler2D _DepthFoamMask;
uniform lowp sampler2DShadow hlslcc_zcmp_CascadeShadowMapTexture;
uniform lowp sampler2D _CascadeShadowMapTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD8;
in highp vec4 vs_TEXCOORD9;
in highp vec4 vs_TEXCOORD10;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec4 u_xlatb0;
vec4 u_xlat1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
lowp vec4 u_xlat10_3;
vec4 u_xlat4;
vec3 u_xlat5;
bool u_xlatb5;
vec3 u_xlat6;
vec4 u_xlat7;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
vec3 u_xlat9;
lowp vec3 u_xlat10_9;
vec3 u_xlat10;
vec3 u_xlat11;
vec3 u_xlat12;
vec3 u_xlat13;
vec3 u_xlat14;
mediump float u_xlat16_15;
vec2 u_xlat17;
mediump vec3 u_xlat16_18;
vec3 u_xlat20;
mediump vec3 u_xlat16_20;
lowp float u_xlat10_20;
int u_xlati20;
uint u_xlatu20;
bool u_xlatb20;
float u_xlat21;
float u_xlat33;
vec2 u_xlat36;
mediump float u_xlat16_36;
lowp float u_xlat10_36;
bool u_xlatb36;
float u_xlat49;
mediump float u_xlat16_50;
float u_xlat52;
mediump float u_xlat16_52;
bool u_xlatb52;
float u_xlat53;
float u_xlat54;
void main()
{
    u_xlat0.xy = vs_TEXCOORD5.zx * vec2(vec2(_ProjectUVScale, _ProjectUVScale));
    u_xlat1.x = _Time.y * _Normal01_U_Speed + u_xlat0.y;
    u_xlat1.yz = _Time.yy * vec2(_Normal01_VSpeed, _Normal02_U_Speed) + u_xlat0.xy;
    u_xlat1.w = _Time.y * _Normal02_V_Speed + u_xlat0.x;
    u_xlat10_0.xyz = texture(_Normal01, u_xlat1.xy, _NormalMapBias).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_2.xy = u_xlat16_0.xy * vec2(_NormalMapScale);
    u_xlat10_1.xyz = texture(_Normal02, u_xlat1.zw, _NormalMapBias).xyz;
    u_xlat16_0.w = -1.0;
    u_xlat16_3.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.wwz;
    u_xlat16_3.xy = u_xlat16_3.xy * vec2(_NormalMapScale);
    u_xlat16_2.z = -1.0;
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
    u_xlat1.x = float(1.0) / vs_TEXCOORD4.w;
    u_xlat17.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat17.x = texture(_CameraDepthTexture, u_xlat17.xy).x;
    u_xlat17.x = _ZBufferParams.z * u_xlat17.x + _ZBufferParams.w;
    u_xlat17.x = float(1.0) / u_xlat17.x;
    u_xlat33 = vs_TEXCOORD10.w + 9.99999975e-05;
    u_xlat33 = (-u_xlat17.x) / u_xlat33;
    u_xlat33 = vs_TEXCOORD10.y * u_xlat33 + _WorldSpaceCameraPos.y;
    u_xlat33 = (-u_xlat33) + vs_TEXCOORD5.y;
    u_xlat4.xy = u_xlat16_2.xy * vec2(vec2(_RefractionIntensity, _RefractionIntensity));
    u_xlat1.x = u_xlat1.x * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.xw = u_xlat1.xx * u_xlat4.xy;
    u_xlat1.xw = u_xlat1.xw * vs_TEXCOORD4.ww;
    u_xlat17.x = u_xlat17.x + (-vs_TEXCOORD4.w);
#ifdef UNITY_ADRENO_ES3
    u_xlat17.x = min(max(u_xlat17.x, 0.0), 1.0);
#else
    u_xlat17.x = clamp(u_xlat17.x, 0.0, 1.0);
#endif
    u_xlat4.xy = u_xlat17.xx * u_xlat1.xw;
    u_xlat4.z = 0.0;
    u_xlat1.xyw = u_xlat4.xyz + vs_TEXCOORD4.xyw;
    u_xlat1.xy = u_xlat1.xy / u_xlat1.ww;
    u_xlat1.x = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat1.x = _ZBufferParams.z * u_xlat1.x + _ZBufferParams.w;
    u_xlat1.x = float(1.0) / u_xlat1.x;
    u_xlat1.x = u_xlat1.x + (-vs_TEXCOORD4.w);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.xyw = u_xlat1.xxx * u_xlat4.xyz + vs_TEXCOORD4.xyw;
    u_xlat4.xy = u_xlat1.xy / u_xlat1.ww;
    u_xlat49 = texture(_CameraDepthTexture, u_xlat4.xy).x;
    u_xlat49 = _ZBufferParams.z * u_xlat49 + _ZBufferParams.w;
    u_xlat49 = float(1.0) / u_xlat49;
    u_xlat49 = u_xlat49 + (-vs_TEXCOORD4.w);
    u_xlat4.x = 0.100000001 / _OpacityByDepth;
    u_xlat16_3.xz = u_xlat16_2.xy;
    u_xlat16_3.y = 1.0;
    u_xlat16_20.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
    u_xlat16_20.x = inversesqrt(u_xlat16_20.x);
    u_xlat16_20.xyz = u_xlat16_3.xyz * u_xlat16_20.xxx;
#ifdef UNITY_ADRENO_ES3
    u_xlatb5 = !!(0.0>=_ES_MoonDirection.y);
#else
    u_xlatb5 = 0.0>=_ES_MoonDirection.y;
#endif
    u_xlat5.xyz = (bool(u_xlatb5)) ? _ES_SunDirection.xyz : _ES_MoonDirection.xyz;
    u_xlat6.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat53 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat54 = inversesqrt(u_xlat53);
    u_xlat7.xyz = vec3(u_xlat54) * u_xlat6.xyz;
    u_xlat5.xyz = u_xlat6.xyz * vec3(u_xlat54) + u_xlat5.xyz;
    u_xlat6.x = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat5.xyz = u_xlat5.xyz * u_xlat6.xxx;
    u_xlat20.x = dot(u_xlat16_20.xyz, u_xlat5.xyz);
    u_xlat36.x = _Gloss * 128.0;
    u_xlat20.x = max(u_xlat20.x, 9.99999975e-05);
    u_xlat20.x = log2(u_xlat20.x);
    u_xlat20.x = u_xlat20.x * u_xlat36.x;
    u_xlat20.x = exp2(u_xlat20.x);
    u_xlat20.x = u_xlat20.x * _SpecularIntensity;
    u_xlat20.x = max(u_xlat20.x, 0.0);
    u_xlat20.x = min(u_xlat20.x, 16.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb36 = !!(_ES_MoonDirection.y>=9.99999975e-05);
#else
    u_xlatb36 = _ES_MoonDirection.y>=9.99999975e-05;
#endif
    u_xlat36.x = u_xlatb36 ? 1.0 : float(0.0);
    u_xlat52 = _ES_MoonDirection.y + -1.0;
    u_xlat36.x = u_xlat36.x * u_xlat52 + 1.0;
    u_xlat4.w = float(1.0) / _ShoreTransparency;
    u_xlat5.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat5.x = inversesqrt(u_xlat5.x);
    u_xlat5.xyz = u_xlat5.xxx * vs_TEXCOORD6.xyz;
    u_xlat5.x = dot(u_xlat7.xyz, u_xlat5.xyz);
    u_xlat5.x = (-u_xlat5.x) + 1.0;
    u_xlat5.x = max(u_xlat5.x, 9.99999975e-05);
    u_xlat5.x = log2(u_xlat5.x);
    u_xlat21 = u_xlat5.x * _SpecularPower;
    u_xlat21 = exp2(u_xlat21);
    u_xlat6.xyz = u_xlat36.xxx * _LightColor0.xyz;
    u_xlat6.xyz = u_xlat20.xxx * u_xlat6.xyz;
    u_xlat20.x = u_xlat49 + -1.0;
    u_xlat20.x = u_xlat4.w * u_xlat20.x;
    u_xlat20.x = u_xlat20.x * 0.100000001;
#ifdef UNITY_ADRENO_ES3
    u_xlat20.x = min(max(u_xlat20.x, 0.0), 1.0);
#else
    u_xlat20.x = clamp(u_xlat20.x, 0.0, 1.0);
#endif
    u_xlat6.xyz = u_xlat20.xxx * u_xlat6.xyz;
    u_xlat4.xy = vec2(u_xlat49) * u_xlat4.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.xy = min(max(u_xlat4.xy, 0.0), 1.0);
#else
    u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);
#endif
    u_xlat20.x = max(u_xlat4.y, 9.99999975e-05);
    u_xlat20.x = log2(u_xlat20.x);
    u_xlat20.x = u_xlat20.x * _ShoreFade;
    u_xlat20.x = exp2(u_xlat20.x);
    u_xlat8.xyz = _ShallowColor.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat8.xyz = u_xlat20.xxx * u_xlat8.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat1.xy = u_xlat1.xy / vs_TEXCOORD4.ww;
    u_xlat10_9.xyz = texture(_SceneScaledBufferBeforTransParent, u_xlat1.xy).xyz;
    u_xlat10.xyz = u_xlat8.xyz * u_xlat10_9.xyz;
    u_xlat1.x = 0.100000001 / _DeepColorDepth;
    u_xlat1.x = u_xlat1.x * u_xlat49;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.x = max(u_xlat1.x, 9.99999975e-05);
    u_xlat1.x = log2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _DeepColorFade;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat11.xyz = (-u_xlat8.xyz) * u_xlat10_9.xyz + _DeepColor.xyz;
    u_xlat11.xyz = u_xlat1.xxx * u_xlat11.xyz + u_xlat10.xyz;
    u_xlat12.xyz = u_xlat16_2.xyz * _DistortionIntensity.xyz;
    u_xlat13.x = vs_TEXCOORD8.x;
    u_xlat13.y = vs_TEXCOORD9.x;
    u_xlat13.z = vs_TEXCOORD6.x;
    u_xlat13.x = dot(u_xlat13.xyz, u_xlat12.xyz);
    u_xlat14.x = vs_TEXCOORD8.y;
    u_xlat14.y = vs_TEXCOORD9.y;
    u_xlat14.z = vs_TEXCOORD6.y;
    u_xlat13.y = dot(u_xlat14.xyz, u_xlat12.xyz);
    u_xlat14.x = vs_TEXCOORD8.z;
    u_xlat14.y = vs_TEXCOORD9.z;
    u_xlat14.z = vs_TEXCOORD6.z;
    u_xlat13.z = dot(u_xlat14.xyz, u_xlat12.xyz);
    u_xlat1.x = dot(u_xlat13.xyz, u_xlat13.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat13.xyz = u_xlat1.xxx * u_xlat13.xyz;
    u_xlat1.x = dot((-u_xlat7.xyz), u_xlat13.xyz);
    u_xlat1.x = u_xlat1.x + u_xlat1.x;
    u_xlat7.xyz = u_xlat13.xyz * (-u_xlat1.xxx) + (-u_xlat7.xyz);
    u_xlat10_0 = textureLod(_ReflectionSkyCubeMap, u_xlat7.xyz, 0.0);
    u_xlat16_2.x = u_xlat10_0.w + -1.0;
    u_xlat16_2.x = _ReflectionSkyCubeMap_HDR.w * u_xlat16_2.x + 1.0;
    u_xlat16_2.x = log2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * _ReflectionSkyCubeMap_HDR.y;
    u_xlat16_2.x = exp2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * _ReflectionSkyCubeMap_HDR.x;
    u_xlat16_18.xyz = u_xlat10_0.xyz * u_xlat16_2.xxx;
    u_xlat1.xy = u_xlat12.xy * vec2(_SSRDistortion);
    u_xlat36.x = float(1.0) / _SSRDistortion_Shore;
    u_xlat36.x = u_xlat49 * u_xlat36.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat36.x = min(max(u_xlat36.x, 0.0), 1.0);
#else
    u_xlat36.x = clamp(u_xlat36.x, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat1.xy * u_xlat36.xx;
    u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD4.ww + vs_TEXCOORD4.xy;
    u_xlat1.xy = u_xlat1.xy / vs_TEXCOORD4.ww;
    u_xlat10_3 = texture(_SSRTexture, u_xlat1.xy).wxyz;
    u_xlat16_7.xyz = (-u_xlat16_2.xxx) * u_xlat10_0.xyz + u_xlat10_3.yzw;
    u_xlat7.xyz = u_xlat16_7.xyz * vec3(vec3(_SSRIntensity, _SSRIntensity, _SSRIntensity));
    u_xlat16_3.x = u_xlat10_3.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat7.xyz = u_xlat16_3.xxx * u_xlat7.xyz + u_xlat16_18.xyz;
    u_xlat1.x = u_xlat5.x * _FresnelPower;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _ReflectionIntensity;
    u_xlat17.x = float(1.0) / _ShoreReflectionFade;
    u_xlat17.x = u_xlat17.x * u_xlat49;
#ifdef UNITY_ADRENO_ES3
    u_xlat17.x = min(max(u_xlat17.x, 0.0), 1.0);
#else
    u_xlat17.x = clamp(u_xlat17.x, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat17.x * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat7.xyz = (-u_xlat11.xyz) + u_xlat7.xyz;
    u_xlat1.xyw = u_xlat1.xxx * u_xlat7.xyz + u_xlat11.xyz;
    u_xlat1.xyw = (-u_xlat8.xyz) * u_xlat10_9.xyz + u_xlat1.xyw;
    u_xlat1.xyw = u_xlat20.xxx * u_xlat1.xyw + u_xlat10.xyz;
    u_xlat20.x = (-vs_TEXCOORD5.y) * _WorldSpaceLightPos0.w + _WorldSpaceLightPos0.y;
    u_xlat16_2.x = max(u_xlat20.x, 0.0);
    u_xlat20.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowSplitSpheres[0].xyz);
    u_xlat7.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowSplitSpheres[1].xyz);
    u_xlat8.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowSplitSpheres[2].xyz);
    u_xlat9.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowSplitSpheres[3].xyz);
    u_xlat0.x = dot(u_xlat20.xyz, u_xlat20.xyz);
    u_xlat0.y = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat0.z = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat0.w = dot(u_xlat9.xyz, u_xlat9.xyz);
    u_xlatb0 = lessThan(u_xlat0, unity_ShadowSplitSqRadii);
    u_xlat0 = mix(vec4(0.0, 0.0, 0.0, 0.0), vec4(1.0, 1.0, 1.0, 1.0), vec4(u_xlatb0));
    u_xlat16_18.x = u_xlat0.y + u_xlat0.x;
    u_xlat16_18.y = u_xlat0.z + u_xlat16_18.x;
    u_xlat3.x = -0.0;
    u_xlat3.y = (-u_xlat0.x);
    u_xlat3.zw = (-u_xlat16_18.xy);
    u_xlat0 = u_xlat0 + u_xlat3;
    u_xlat0 = max(u_xlat0, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat16_18.x = dot(u_xlat0, vec4(1.0, 1.0, 1.0, 1.0));
#ifdef UNITY_ADRENO_ES3
    u_xlatb20 = !!(u_xlat16_18.x>=0.5);
#else
    u_xlatb20 = u_xlat16_18.x>=0.5;
#endif
    if(u_xlatb20){
        u_xlat20.x = dot(u_xlat0.yzw, vec3(1.0, 2.0, 3.0));
        u_xlat20.x = min(u_xlat20.x, 3.0);
        u_xlatu20 = uint(u_xlat20.x);
        u_xlat7.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowPos[int(u_xlatu20)].xyz);
        u_xlati20 = int(u_xlatu20) << 2;
        u_xlat8.xyz = u_xlat7.yyy * hlslcc_mtx4x4unity_WorldToShadow[(u_xlati20 + 1)].xyz;
        u_xlat7.xyw = hlslcc_mtx4x4unity_WorldToShadow[u_xlati20].xyz * u_xlat7.xxx + u_xlat8.xyz;
        u_xlat7.xyz = hlslcc_mtx4x4unity_WorldToShadow[(u_xlati20 + 2)].xyz * u_xlat7.zzz + u_xlat7.xyw;
        u_xlat20.xyz = u_xlat7.xyz + hlslcc_mtx4x4unity_WorldToShadow[(u_xlati20 + 3)].xyz;
        vec3 txVec0 = vec3(u_xlat20.xy,u_xlat20.z);
        u_xlat10_20 = textureLod(hlslcc_zcmp_CascadeShadowMapTexture, txVec0, 0.0);
        u_xlat16_36 = (-_LightShadowData.x) + 1.0;
        u_xlat20.x = u_xlat10_20 * u_xlat16_36 + _LightShadowData.x;
    } else {
        u_xlat20.x = 1.0;
    //ENDIF
    }
    u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;
    u_xlat20.xyz = u_xlat16_2.xyz * u_xlat20.xxx + vs_TEXCOORD1.xyz;
    u_xlat16_2.xyz = u_xlat20.xyz * vec3(0.300000012, 0.300000012, 0.300000012) + vec3(0.699999988, 0.699999988, 0.699999988);
    u_xlat20.x = sqrt(u_xlat53);
    u_xlat16_50 = u_xlat20.x + (-_DepthFoamCloseFadeOffset);
    u_xlat16_50 = u_xlat16_50 / _DepthFoamCloseFadeDistance;
    u_xlat16_15 = vs_COLOR0.x * _DepthFoamExtent;
    u_xlat33 = max(u_xlat33, 0.0);
    u_xlat33 = min(u_xlat16_15, u_xlat33);
    u_xlat16_15 = _DepthFoamExtent * vs_COLOR0.x + 9.99999975e-05;
    u_xlat33 = u_xlat33 / u_xlat16_15;
    u_xlat33 = (-u_xlat33) + 1.0;
    u_xlat36.xy = vec2(_Time.y * _DepthFoamMask_ST.z, _Time.y * _DepthFoamMask_ST.w);
    u_xlat36.xy = fract(u_xlat36.xy);
    u_xlat36.xy = _DepthFoamMask_ST.xy * vs_TEXCOORD5.xz + u_xlat36.xy;
    u_xlat10_36 = texture(_DepthFoamMask, u_xlat36.xy).x;
    u_xlat52 = vs_TEXCOORD5.z + vs_TEXCOORD5.x;
    u_xlat52 = u_xlat52 * _DepthFoamPhaseScale;
    u_xlat52 = _DepthFoamSpeed * _Time.y + u_xlat52;
    u_xlat5.x = (-u_xlat33) + 1.0;
    u_xlat16_15 = _DepthFoamSubdivision * u_xlat33 + u_xlat52;
    u_xlat16_15 = sin(u_xlat16_15);
    u_xlat16_15 = _DepthFoamWidth * u_xlat33 + u_xlat16_15;
    u_xlat16_52 = u_xlat10_36 * 2.0 + -1.0;
    u_xlat52 = u_xlat16_52 + u_xlat16_15;
#ifdef UNITY_ADRENO_ES3
    u_xlatb52 = !!(u_xlat52>=u_xlat5.x);
#else
    u_xlatb52 = u_xlat52>=u_xlat5.x;
#endif
    u_xlat52 = u_xlatb52 ? 1.0 : float(0.0);
    u_xlat36.x = u_xlat52 * u_xlat10_36;
    u_xlat16_15 = _DepthFoamDistance + 9.99999975e-05;
    u_xlat16_15 = u_xlat20.x / u_xlat16_15;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_15 = min(max(u_xlat16_15, 0.0), 1.0);
#else
    u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);
#endif
    u_xlat16_20.x = (-u_xlat16_15) + 1.0;
    u_xlat16_15 = vs_COLOR0.y * _DepthFoamColor.w;
    u_xlat16_50 = u_xlat16_50 * u_xlat16_15;
    u_xlat16_50 = u_xlat36.x * u_xlat16_50;
    u_xlat16_50 = u_xlat33 * u_xlat16_50;
    u_xlat16_50 = u_xlat16_20.x * u_xlat16_50;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_50 = min(max(u_xlat16_50, 0.0), 1.0);
#else
    u_xlat16_50 = clamp(u_xlat16_50, 0.0, 1.0);
#endif
    u_xlat16_2.xyz = _DepthFoamColor.xyz * u_xlat16_2.xyz + (-u_xlat1.xyw);
    u_xlat16_2.xyz = vec3(u_xlat16_50) * u_xlat16_2.xyz + u_xlat1.xyw;
    u_xlat0.xyz = u_xlat6.xyz * vec3(u_xlat21) + u_xlat16_2.xyz;
    u_xlat0.w = u_xlat4.x * vs_COLOR0.w;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MHY_SHADER_MIDDLE" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
uniform 	vec4 hlslcc_mtx4x4_mhyJitteredVP[4];
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
out highp vec4 vs_TEXCOORD9;
out highp vec4 vs_TEXCOORD10;
float u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec4 u_xlat8;
vec3 u_xlat9;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat9.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4_mhyJitteredVP[1];
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[3] * u_xlat2.wwww + u_xlat1;
    u_xlat3.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    u_xlat3.xyw = u_xlat1.xyw;
    gl_Position = u_xlat3;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD1.w = 1.0;
    u_xlat4.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat4.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat4.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat1.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
    u_xlat16_5.x = u_xlat4.y * u_xlat4.y;
    u_xlat16_5.x = u_xlat4.x * u_xlat4.x + (-u_xlat16_5.x);
    u_xlat16_6 = u_xlat4.yzzx * u_xlat4.xyzz;
    u_xlat16_7.x = dot(unity_SHBr, u_xlat16_6);
    u_xlat16_7.y = dot(unity_SHBg, u_xlat16_6);
    u_xlat16_7.z = dot(unity_SHBb, u_xlat16_6);
    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_7.xyz;
    u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat4.w = 1.0;
    u_xlat16_6.x = dot(unity_SHAr, u_xlat4);
    u_xlat16_6.y = dot(unity_SHAg, u_xlat4);
    u_xlat16_6.z = dot(unity_SHAb, u_xlat4);
    u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_6.xyz;
    vs_TEXCOORD1.xyz = u_xlat16_5.xyz;
    u_xlat1.x = u_xlat3.y * _ProjectionParams.x;
    u_xlat8.w = u_xlat1.x * 0.5;
    u_xlat8.xz = u_xlat3.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.z = u_xlat1.z;
    u_xlat3.xy = u_xlat8.zz + u_xlat8.xw;
    vs_TEXCOORD2 = u_xlat3;
    vs_TEXCOORD4.xyw = u_xlat3.xyw;
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD3.w = 0.0;
    u_xlat1.x = u_xlat2.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat2.x + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat2.z + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat2.w + u_xlat1.x;
    vs_TEXCOORD3.z = (-u_xlat1.x);
    vs_TEXCOORD5.w = 0.0;
    vs_TEXCOORD5.xyz = u_xlat9.xyz;
    u_xlat9.xyz = (-u_xlat9.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD6.w = 0.0;
    vs_TEXCOORD6.xyz = u_xlat4.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].www + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * in_POSITION0.yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.zzz + u_xlat1.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.www + u_xlat1.xyz;
    vs_TEXCOORD7.xyz = u_xlat1.xyz * vec3(-1.0, -1.0, 1.0);
    vs_TEXCOORD7.w = 0.0;
    u_xlat1.xyz = in_TANGENT0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat0 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0 = inversesqrt(u_xlat0);
    u_xlat1.xyz = vec3(u_xlat0) * u_xlat1.xyz;
    vs_TEXCOORD8.xyz = u_xlat1.xyz;
    vs_TEXCOORD8.w = 0.0;
    u_xlat2.xyz = u_xlat1.yzx * u_xlat4.zxy;
    u_xlat1.xyz = u_xlat4.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
    u_xlat0 = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD9.xyz = vec3(u_xlat0) * u_xlat1.xyz;
    vs_TEXCOORD9.w = 0.0;
    u_xlat0 = u_xlat9.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat9.x + u_xlat0;
    vs_TEXCOORD10.w = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat9.z + u_xlat0;
    vs_TEXCOORD10.xyz = u_xlat9.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowPos[4];
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _DepthFoamMask_ST;
uniform 	mediump float _DepthFoamSpeed;
uniform 	mediump vec4 _DepthFoamColor;
uniform 	mediump float _DepthFoamExtent;
uniform 	mediump float _DepthFoamDistance;
uniform 	mediump float _DepthFoamSubdivision;
uniform 	mediump float _DepthFoamWidth;
uniform 	mediump float _DepthFoamPhaseScale;
uniform 	mediump float _DepthFoamCloseFadeOffset;
uniform 	mediump float _DepthFoamCloseFadeDistance;
uniform 	float _NormalMapScale;
uniform 	float _Normal01_U_Speed;
uniform 	float _Normal01_VSpeed;
uniform 	float _NormalMapBias;
uniform 	float _Normal02_U_Speed;
uniform 	float _Normal02_V_Speed;
uniform 	float _RefractionIntensity;
uniform 	float _OpacityByDepth;
uniform 	float _SpecularIntensity;
uniform 	vec3 _ES_MoonDirection;
uniform 	vec3 _ES_SunDirection;
uniform 	float _Gloss;
uniform 	float _ShoreTransparency;
uniform 	float _SpecularPower;
uniform 	vec4 _ShallowColor;
uniform 	float _ShoreFade;
uniform 	vec4 _DeepColor;
uniform 	float _DeepColorDepth;
uniform 	float _DeepColorFade;
uniform 	vec4 _DistortionIntensity;
uniform 	float _SSRDistortion;
uniform 	float _SSRDistortion_Shore;
uniform 	float _SSRIntensity;
uniform 	float _ReflectionIntensity;
uniform 	float _FresnelPower;
uniform 	float _ShoreReflectionFade;
uniform 	mediump float _ProjectUVScale;
uniform 	vec4 _ReflectionSkyCubeMap_HDR;
uniform lowp sampler2D _Normal01;
uniform lowp sampler2D _Normal02;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _SceneScaledBufferBeforTransParent;
uniform lowp samplerCube _ReflectionSkyCubeMap;
uniform lowp sampler2D _SSRTexture;
uniform lowp sampler2D _DepthFoamMask;
uniform lowp sampler2DShadow hlslcc_zcmp_CascadeShadowMapTexture;
uniform lowp sampler2D _CascadeShadowMapTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD8;
in highp vec4 vs_TEXCOORD9;
in highp vec4 vs_TEXCOORD10;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec4 u_xlatb0;
vec4 u_xlat1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
lowp vec4 u_xlat10_3;
vec4 u_xlat4;
vec3 u_xlat5;
bool u_xlatb5;
vec3 u_xlat6;
vec4 u_xlat7;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
vec3 u_xlat9;
lowp vec3 u_xlat10_9;
vec3 u_xlat10;
vec3 u_xlat11;
vec3 u_xlat12;
vec3 u_xlat13;
vec3 u_xlat14;
mediump float u_xlat16_15;
vec2 u_xlat17;
mediump vec3 u_xlat16_18;
vec3 u_xlat20;
mediump vec3 u_xlat16_20;
lowp float u_xlat10_20;
int u_xlati20;
uint u_xlatu20;
bool u_xlatb20;
float u_xlat21;
float u_xlat33;
vec2 u_xlat36;
mediump float u_xlat16_36;
lowp float u_xlat10_36;
bool u_xlatb36;
float u_xlat49;
mediump float u_xlat16_50;
float u_xlat52;
mediump float u_xlat16_52;
bool u_xlatb52;
float u_xlat53;
float u_xlat54;
void main()
{
    u_xlat0.xy = vs_TEXCOORD5.zx * vec2(vec2(_ProjectUVScale, _ProjectUVScale));
    u_xlat1.x = _Time.y * _Normal01_U_Speed + u_xlat0.y;
    u_xlat1.yz = _Time.yy * vec2(_Normal01_VSpeed, _Normal02_U_Speed) + u_xlat0.xy;
    u_xlat1.w = _Time.y * _Normal02_V_Speed + u_xlat0.x;
    u_xlat10_0.xyz = texture(_Normal01, u_xlat1.xy, _NormalMapBias).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_2.xy = u_xlat16_0.xy * vec2(_NormalMapScale);
    u_xlat10_1.xyz = texture(_Normal02, u_xlat1.zw, _NormalMapBias).xyz;
    u_xlat16_0.w = -1.0;
    u_xlat16_3.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.wwz;
    u_xlat16_3.xy = u_xlat16_3.xy * vec2(_NormalMapScale);
    u_xlat16_2.z = -1.0;
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
    u_xlat1.x = float(1.0) / vs_TEXCOORD4.w;
    u_xlat17.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat17.x = texture(_CameraDepthTexture, u_xlat17.xy).x;
    u_xlat17.x = _ZBufferParams.z * u_xlat17.x + _ZBufferParams.w;
    u_xlat17.x = float(1.0) / u_xlat17.x;
    u_xlat33 = vs_TEXCOORD10.w + 9.99999975e-05;
    u_xlat33 = (-u_xlat17.x) / u_xlat33;
    u_xlat33 = vs_TEXCOORD10.y * u_xlat33 + _WorldSpaceCameraPos.y;
    u_xlat33 = (-u_xlat33) + vs_TEXCOORD5.y;
    u_xlat4.xy = u_xlat16_2.xy * vec2(vec2(_RefractionIntensity, _RefractionIntensity));
    u_xlat1.x = u_xlat1.x * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.xw = u_xlat1.xx * u_xlat4.xy;
    u_xlat1.xw = u_xlat1.xw * vs_TEXCOORD4.ww;
    u_xlat17.x = u_xlat17.x + (-vs_TEXCOORD4.w);
#ifdef UNITY_ADRENO_ES3
    u_xlat17.x = min(max(u_xlat17.x, 0.0), 1.0);
#else
    u_xlat17.x = clamp(u_xlat17.x, 0.0, 1.0);
#endif
    u_xlat4.xy = u_xlat17.xx * u_xlat1.xw;
    u_xlat4.z = 0.0;
    u_xlat1.xyw = u_xlat4.xyz + vs_TEXCOORD4.xyw;
    u_xlat1.xy = u_xlat1.xy / u_xlat1.ww;
    u_xlat1.x = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat1.x = _ZBufferParams.z * u_xlat1.x + _ZBufferParams.w;
    u_xlat1.x = float(1.0) / u_xlat1.x;
    u_xlat1.x = u_xlat1.x + (-vs_TEXCOORD4.w);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.xyw = u_xlat1.xxx * u_xlat4.xyz + vs_TEXCOORD4.xyw;
    u_xlat4.xy = u_xlat1.xy / u_xlat1.ww;
    u_xlat49 = texture(_CameraDepthTexture, u_xlat4.xy).x;
    u_xlat49 = _ZBufferParams.z * u_xlat49 + _ZBufferParams.w;
    u_xlat49 = float(1.0) / u_xlat49;
    u_xlat49 = u_xlat49 + (-vs_TEXCOORD4.w);
    u_xlat4.x = 0.100000001 / _OpacityByDepth;
    u_xlat16_3.xz = u_xlat16_2.xy;
    u_xlat16_3.y = 1.0;
    u_xlat16_20.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
    u_xlat16_20.x = inversesqrt(u_xlat16_20.x);
    u_xlat16_20.xyz = u_xlat16_3.xyz * u_xlat16_20.xxx;
#ifdef UNITY_ADRENO_ES3
    u_xlatb5 = !!(0.0>=_ES_MoonDirection.y);
#else
    u_xlatb5 = 0.0>=_ES_MoonDirection.y;
#endif
    u_xlat5.xyz = (bool(u_xlatb5)) ? _ES_SunDirection.xyz : _ES_MoonDirection.xyz;
    u_xlat6.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat53 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat54 = inversesqrt(u_xlat53);
    u_xlat7.xyz = vec3(u_xlat54) * u_xlat6.xyz;
    u_xlat5.xyz = u_xlat6.xyz * vec3(u_xlat54) + u_xlat5.xyz;
    u_xlat6.x = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat5.xyz = u_xlat5.xyz * u_xlat6.xxx;
    u_xlat20.x = dot(u_xlat16_20.xyz, u_xlat5.xyz);
    u_xlat36.x = _Gloss * 128.0;
    u_xlat20.x = max(u_xlat20.x, 9.99999975e-05);
    u_xlat20.x = log2(u_xlat20.x);
    u_xlat20.x = u_xlat20.x * u_xlat36.x;
    u_xlat20.x = exp2(u_xlat20.x);
    u_xlat20.x = u_xlat20.x * _SpecularIntensity;
    u_xlat20.x = max(u_xlat20.x, 0.0);
    u_xlat20.x = min(u_xlat20.x, 16.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb36 = !!(_ES_MoonDirection.y>=9.99999975e-05);
#else
    u_xlatb36 = _ES_MoonDirection.y>=9.99999975e-05;
#endif
    u_xlat36.x = u_xlatb36 ? 1.0 : float(0.0);
    u_xlat52 = _ES_MoonDirection.y + -1.0;
    u_xlat36.x = u_xlat36.x * u_xlat52 + 1.0;
    u_xlat4.w = float(1.0) / _ShoreTransparency;
    u_xlat5.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat5.x = inversesqrt(u_xlat5.x);
    u_xlat5.xyz = u_xlat5.xxx * vs_TEXCOORD6.xyz;
    u_xlat5.x = dot(u_xlat7.xyz, u_xlat5.xyz);
    u_xlat5.x = (-u_xlat5.x) + 1.0;
    u_xlat5.x = max(u_xlat5.x, 9.99999975e-05);
    u_xlat5.x = log2(u_xlat5.x);
    u_xlat21 = u_xlat5.x * _SpecularPower;
    u_xlat21 = exp2(u_xlat21);
    u_xlat6.xyz = u_xlat36.xxx * _LightColor0.xyz;
    u_xlat6.xyz = u_xlat20.xxx * u_xlat6.xyz;
    u_xlat20.x = u_xlat49 + -1.0;
    u_xlat20.x = u_xlat4.w * u_xlat20.x;
    u_xlat20.x = u_xlat20.x * 0.100000001;
#ifdef UNITY_ADRENO_ES3
    u_xlat20.x = min(max(u_xlat20.x, 0.0), 1.0);
#else
    u_xlat20.x = clamp(u_xlat20.x, 0.0, 1.0);
#endif
    u_xlat6.xyz = u_xlat20.xxx * u_xlat6.xyz;
    u_xlat4.xy = vec2(u_xlat49) * u_xlat4.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.xy = min(max(u_xlat4.xy, 0.0), 1.0);
#else
    u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);
#endif
    u_xlat20.x = max(u_xlat4.y, 9.99999975e-05);
    u_xlat20.x = log2(u_xlat20.x);
    u_xlat20.x = u_xlat20.x * _ShoreFade;
    u_xlat20.x = exp2(u_xlat20.x);
    u_xlat8.xyz = _ShallowColor.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat8.xyz = u_xlat20.xxx * u_xlat8.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat1.xy = u_xlat1.xy / vs_TEXCOORD4.ww;
    u_xlat10_9.xyz = texture(_SceneScaledBufferBeforTransParent, u_xlat1.xy).xyz;
    u_xlat10.xyz = u_xlat8.xyz * u_xlat10_9.xyz;
    u_xlat1.x = 0.100000001 / _DeepColorDepth;
    u_xlat1.x = u_xlat1.x * u_xlat49;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.x = max(u_xlat1.x, 9.99999975e-05);
    u_xlat1.x = log2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _DeepColorFade;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat11.xyz = (-u_xlat8.xyz) * u_xlat10_9.xyz + _DeepColor.xyz;
    u_xlat11.xyz = u_xlat1.xxx * u_xlat11.xyz + u_xlat10.xyz;
    u_xlat12.xyz = u_xlat16_2.xyz * _DistortionIntensity.xyz;
    u_xlat13.x = vs_TEXCOORD8.x;
    u_xlat13.y = vs_TEXCOORD9.x;
    u_xlat13.z = vs_TEXCOORD6.x;
    u_xlat13.x = dot(u_xlat13.xyz, u_xlat12.xyz);
    u_xlat14.x = vs_TEXCOORD8.y;
    u_xlat14.y = vs_TEXCOORD9.y;
    u_xlat14.z = vs_TEXCOORD6.y;
    u_xlat13.y = dot(u_xlat14.xyz, u_xlat12.xyz);
    u_xlat14.x = vs_TEXCOORD8.z;
    u_xlat14.y = vs_TEXCOORD9.z;
    u_xlat14.z = vs_TEXCOORD6.z;
    u_xlat13.z = dot(u_xlat14.xyz, u_xlat12.xyz);
    u_xlat1.x = dot(u_xlat13.xyz, u_xlat13.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat13.xyz = u_xlat1.xxx * u_xlat13.xyz;
    u_xlat1.x = dot((-u_xlat7.xyz), u_xlat13.xyz);
    u_xlat1.x = u_xlat1.x + u_xlat1.x;
    u_xlat7.xyz = u_xlat13.xyz * (-u_xlat1.xxx) + (-u_xlat7.xyz);
    u_xlat10_0 = textureLod(_ReflectionSkyCubeMap, u_xlat7.xyz, 0.0);
    u_xlat16_2.x = u_xlat10_0.w + -1.0;
    u_xlat16_2.x = _ReflectionSkyCubeMap_HDR.w * u_xlat16_2.x + 1.0;
    u_xlat16_2.x = log2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * _ReflectionSkyCubeMap_HDR.y;
    u_xlat16_2.x = exp2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * _ReflectionSkyCubeMap_HDR.x;
    u_xlat16_18.xyz = u_xlat10_0.xyz * u_xlat16_2.xxx;
    u_xlat1.xy = u_xlat12.xy * vec2(_SSRDistortion);
    u_xlat36.x = float(1.0) / _SSRDistortion_Shore;
    u_xlat36.x = u_xlat49 * u_xlat36.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat36.x = min(max(u_xlat36.x, 0.0), 1.0);
#else
    u_xlat36.x = clamp(u_xlat36.x, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat1.xy * u_xlat36.xx;
    u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD4.ww + vs_TEXCOORD4.xy;
    u_xlat1.xy = u_xlat1.xy / vs_TEXCOORD4.ww;
    u_xlat10_3 = texture(_SSRTexture, u_xlat1.xy).wxyz;
    u_xlat16_7.xyz = (-u_xlat16_2.xxx) * u_xlat10_0.xyz + u_xlat10_3.yzw;
    u_xlat7.xyz = u_xlat16_7.xyz * vec3(vec3(_SSRIntensity, _SSRIntensity, _SSRIntensity));
    u_xlat16_3.x = u_xlat10_3.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat7.xyz = u_xlat16_3.xxx * u_xlat7.xyz + u_xlat16_18.xyz;
    u_xlat1.x = u_xlat5.x * _FresnelPower;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _ReflectionIntensity;
    u_xlat17.x = float(1.0) / _ShoreReflectionFade;
    u_xlat17.x = u_xlat17.x * u_xlat49;
#ifdef UNITY_ADRENO_ES3
    u_xlat17.x = min(max(u_xlat17.x, 0.0), 1.0);
#else
    u_xlat17.x = clamp(u_xlat17.x, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat17.x * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat7.xyz = (-u_xlat11.xyz) + u_xlat7.xyz;
    u_xlat1.xyw = u_xlat1.xxx * u_xlat7.xyz + u_xlat11.xyz;
    u_xlat1.xyw = (-u_xlat8.xyz) * u_xlat10_9.xyz + u_xlat1.xyw;
    u_xlat1.xyw = u_xlat20.xxx * u_xlat1.xyw + u_xlat10.xyz;
    u_xlat20.x = (-vs_TEXCOORD5.y) * _WorldSpaceLightPos0.w + _WorldSpaceLightPos0.y;
    u_xlat16_2.x = max(u_xlat20.x, 0.0);
    u_xlat20.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowSplitSpheres[0].xyz);
    u_xlat7.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowSplitSpheres[1].xyz);
    u_xlat8.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowSplitSpheres[2].xyz);
    u_xlat9.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowSplitSpheres[3].xyz);
    u_xlat0.x = dot(u_xlat20.xyz, u_xlat20.xyz);
    u_xlat0.y = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat0.z = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat0.w = dot(u_xlat9.xyz, u_xlat9.xyz);
    u_xlatb0 = lessThan(u_xlat0, unity_ShadowSplitSqRadii);
    u_xlat0 = mix(vec4(0.0, 0.0, 0.0, 0.0), vec4(1.0, 1.0, 1.0, 1.0), vec4(u_xlatb0));
    u_xlat16_18.x = u_xlat0.y + u_xlat0.x;
    u_xlat16_18.y = u_xlat0.z + u_xlat16_18.x;
    u_xlat3.x = -0.0;
    u_xlat3.y = (-u_xlat0.x);
    u_xlat3.zw = (-u_xlat16_18.xy);
    u_xlat0 = u_xlat0 + u_xlat3;
    u_xlat0 = max(u_xlat0, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat16_18.x = dot(u_xlat0, vec4(1.0, 1.0, 1.0, 1.0));
#ifdef UNITY_ADRENO_ES3
    u_xlatb20 = !!(u_xlat16_18.x>=0.5);
#else
    u_xlatb20 = u_xlat16_18.x>=0.5;
#endif
    if(u_xlatb20){
        u_xlat20.x = dot(u_xlat0.yzw, vec3(1.0, 2.0, 3.0));
        u_xlat20.x = min(u_xlat20.x, 3.0);
        u_xlatu20 = uint(u_xlat20.x);
        u_xlat7.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowPos[int(u_xlatu20)].xyz);
        u_xlati20 = int(u_xlatu20) << 2;
        u_xlat8.xyz = u_xlat7.yyy * hlslcc_mtx4x4unity_WorldToShadow[(u_xlati20 + 1)].xyz;
        u_xlat7.xyw = hlslcc_mtx4x4unity_WorldToShadow[u_xlati20].xyz * u_xlat7.xxx + u_xlat8.xyz;
        u_xlat7.xyz = hlslcc_mtx4x4unity_WorldToShadow[(u_xlati20 + 2)].xyz * u_xlat7.zzz + u_xlat7.xyw;
        u_xlat20.xyz = u_xlat7.xyz + hlslcc_mtx4x4unity_WorldToShadow[(u_xlati20 + 3)].xyz;
        vec3 txVec0 = vec3(u_xlat20.xy,u_xlat20.z);
        u_xlat10_20 = textureLod(hlslcc_zcmp_CascadeShadowMapTexture, txVec0, 0.0);
        u_xlat16_36 = (-_LightShadowData.x) + 1.0;
        u_xlat20.x = u_xlat10_20 * u_xlat16_36 + _LightShadowData.x;
    } else {
        u_xlat20.x = 1.0;
    //ENDIF
    }
    u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;
    u_xlat20.xyz = u_xlat16_2.xyz * u_xlat20.xxx + vs_TEXCOORD1.xyz;
    u_xlat16_2.xyz = u_xlat20.xyz * vec3(0.300000012, 0.300000012, 0.300000012) + vec3(0.699999988, 0.699999988, 0.699999988);
    u_xlat20.x = sqrt(u_xlat53);
    u_xlat16_50 = u_xlat20.x + (-_DepthFoamCloseFadeOffset);
    u_xlat16_50 = u_xlat16_50 / _DepthFoamCloseFadeDistance;
    u_xlat16_15 = vs_COLOR0.x * _DepthFoamExtent;
    u_xlat33 = max(u_xlat33, 0.0);
    u_xlat33 = min(u_xlat16_15, u_xlat33);
    u_xlat16_15 = _DepthFoamExtent * vs_COLOR0.x + 9.99999975e-05;
    u_xlat33 = u_xlat33 / u_xlat16_15;
    u_xlat33 = (-u_xlat33) + 1.0;
    u_xlat36.xy = vec2(_Time.y * _DepthFoamMask_ST.z, _Time.y * _DepthFoamMask_ST.w);
    u_xlat36.xy = fract(u_xlat36.xy);
    u_xlat36.xy = _DepthFoamMask_ST.xy * vs_TEXCOORD5.xz + u_xlat36.xy;
    u_xlat10_36 = texture(_DepthFoamMask, u_xlat36.xy).x;
    u_xlat52 = vs_TEXCOORD5.z + vs_TEXCOORD5.x;
    u_xlat52 = u_xlat52 * _DepthFoamPhaseScale;
    u_xlat52 = _DepthFoamSpeed * _Time.y + u_xlat52;
    u_xlat5.x = (-u_xlat33) + 1.0;
    u_xlat16_15 = _DepthFoamSubdivision * u_xlat33 + u_xlat52;
    u_xlat16_15 = sin(u_xlat16_15);
    u_xlat16_15 = _DepthFoamWidth * u_xlat33 + u_xlat16_15;
    u_xlat16_52 = u_xlat10_36 * 2.0 + -1.0;
    u_xlat52 = u_xlat16_52 + u_xlat16_15;
#ifdef UNITY_ADRENO_ES3
    u_xlatb52 = !!(u_xlat52>=u_xlat5.x);
#else
    u_xlatb52 = u_xlat52>=u_xlat5.x;
#endif
    u_xlat52 = u_xlatb52 ? 1.0 : float(0.0);
    u_xlat36.x = u_xlat52 * u_xlat10_36;
    u_xlat16_15 = _DepthFoamDistance + 9.99999975e-05;
    u_xlat16_15 = u_xlat20.x / u_xlat16_15;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_15 = min(max(u_xlat16_15, 0.0), 1.0);
#else
    u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);
#endif
    u_xlat16_20.x = (-u_xlat16_15) + 1.0;
    u_xlat16_15 = vs_COLOR0.y * _DepthFoamColor.w;
    u_xlat16_50 = u_xlat16_50 * u_xlat16_15;
    u_xlat16_50 = u_xlat36.x * u_xlat16_50;
    u_xlat16_50 = u_xlat33 * u_xlat16_50;
    u_xlat16_50 = u_xlat16_20.x * u_xlat16_50;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_50 = min(max(u_xlat16_50, 0.0), 1.0);
#else
    u_xlat16_50 = clamp(u_xlat16_50, 0.0, 1.0);
#endif
    u_xlat16_2.xyz = _DepthFoamColor.xyz * u_xlat16_2.xyz + (-u_xlat1.xyw);
    u_xlat16_2.xyz = vec3(u_xlat16_50) * u_xlat16_2.xyz + u_xlat1.xyw;
    u_xlat0.xyz = u_xlat6.xyz * vec3(u_xlat21) + u_xlat16_2.xyz;
    u_xlat0.w = u_xlat4.x * vs_COLOR0.w;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "MHY_SHADER_LOW" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump float _MHYZBias;
uniform 	vec4 hlslcc_mtx4x4_mhyJitteredVP[4];
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
out highp vec4 vs_TEXCOORD9;
out highp vec4 vs_TEXCOORD10;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec4 u_xlat8;
float u_xlat27;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4_mhyJitteredVP[1];
    u_xlat2 = hlslcc_mtx4x4_mhyJitteredVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4_mhyJitteredVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4_mhyJitteredVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat3.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    u_xlat3.xyw = u_xlat2.xyw;
    gl_Position = u_xlat3;
    vs_COLOR0 = in_COLOR0;
    u_xlat4.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat4.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat4.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat27 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat4.xyz = vec3(u_xlat27) * u_xlat4.xyz;
    u_xlat16_5.x = u_xlat4.y * u_xlat4.y;
    u_xlat16_5.x = u_xlat4.x * u_xlat4.x + (-u_xlat16_5.x);
    u_xlat16_6 = u_xlat4.yzzx * u_xlat4.xyzz;
    u_xlat16_7.x = dot(unity_SHBr, u_xlat16_6);
    u_xlat16_7.y = dot(unity_SHBg, u_xlat16_6);
    u_xlat16_7.z = dot(unity_SHBb, u_xlat16_6);
    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_7.xyz;
    u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat4.w = 1.0;
    u_xlat16_6.x = dot(unity_SHAr, u_xlat4);
    u_xlat16_6.y = dot(unity_SHAg, u_xlat4);
    u_xlat16_6.z = dot(unity_SHAb, u_xlat4);
    u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_6.xyz;
    vs_TEXCOORD1.xyz = u_xlat16_5.xyz;
    vs_TEXCOORD1.w = 1.0;
    u_xlat27 = u_xlat3.y * _ProjectionParams.x;
    u_xlat8.w = u_xlat27 * 0.5;
    u_xlat8.xz = u_xlat3.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.z = u_xlat2.z;
    u_xlat3.xy = u_xlat8.zz + u_xlat8.xw;
    vs_TEXCOORD2 = u_xlat3;
    vs_TEXCOORD4.xyw = u_xlat3.xyw;
    u_xlat27 = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat27 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat27;
    u_xlat27 = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat27;
    u_xlat27 = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat27;
    vs_TEXCOORD3.z = (-u_xlat27);
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD3.w = 0.0;
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD5.w = 0.0;
    vs_TEXCOORD6.xyz = u_xlat4.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[1].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].www + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * in_POSITION0.yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.zzz + u_xlat1.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.www + u_xlat1.xyz;
    vs_TEXCOORD7.xyz = u_xlat1.xyz * vec3(-1.0, -1.0, 1.0);
    vs_TEXCOORD7.w = 0.0;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat27 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat1.xyz = vec3(u_xlat27) * u_xlat1.xyz;
    vs_TEXCOORD8.xyz = u_xlat1.xyz;
    vs_TEXCOORD8.w = 0.0;
    u_xlat2.xyz = u_xlat1.yzx * u_xlat4.zxy;
    u_xlat1.xyz = u_xlat4.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
    u_xlat27 = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD9.xyz = vec3(u_xlat27) * u_xlat1.xyz;
    vs_TEXCOORD9.w = 0.0;
    u_xlat27 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat27 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat27;
    vs_TEXCOORD10.w = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat27;
    vs_TEXCOORD10.xyz = u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowPos[4];
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _DepthFoamMask_ST;
uniform 	mediump float _DepthFoamSpeed;
uniform 	mediump vec4 _DepthFoamColor;
uniform 	mediump float _DepthFoamExtent;
uniform 	mediump float _DepthFoamDistance;
uniform 	mediump float _DepthFoamSubdivision;
uniform 	mediump float _DepthFoamWidth;
uniform 	mediump float _DepthFoamPhaseScale;
uniform 	mediump float _DepthFoamCloseFadeOffset;
uniform 	mediump float _DepthFoamCloseFadeDistance;
uniform 	float _NormalMapScale;
uniform 	float _Normal01_U_Speed;
uniform 	float _Normal01_VSpeed;
uniform 	float _NormalMapBias;
uniform 	float _Normal02_U_Speed;
uniform 	float _Normal02_V_Speed;
uniform 	float _RefractionIntensity;
uniform 	float _OpacityByDepth;
uniform 	float _SpecularIntensity;
uniform 	vec3 _ES_MoonDirection;
uniform 	vec3 _ES_SunDirection;
uniform 	float _Gloss;
uniform 	float _ShoreTransparency;
uniform 	float _SpecularPower;
uniform 	vec4 _ShallowColor;
uniform 	float _ShoreFade;
uniform 	vec4 _DeepColor;
uniform 	float _DeepColorDepth;
uniform 	float _DeepColorFade;
uniform 	vec4 _DistortionIntensity;
uniform 	float _ReflectionIntensity;
uniform 	float _FresnelPower;
uniform 	float _ShoreReflectionFade;
uniform 	mediump float _ProjectUVScale;
uniform 	vec4 _ReflectionSkyCubeMap_HDR;
uniform lowp sampler2D _Normal01;
uniform lowp sampler2D _Normal02;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _SceneScaledBufferBeforTransParent;
uniform lowp samplerCube _ReflectionSkyCubeMap;
uniform lowp sampler2D _DepthFoamMask;
uniform lowp sampler2DShadow hlslcc_zcmp_CascadeShadowMapTexture;
uniform lowp sampler2D _CascadeShadowMapTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD8;
in highp vec4 vs_TEXCOORD9;
in highp vec4 vs_TEXCOORD10;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec4 u_xlatb0;
vec4 u_xlat1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec4 u_xlat4;
vec3 u_xlat5;
bool u_xlatb5;
vec3 u_xlat6;
vec4 u_xlat7;
vec3 u_xlat8;
vec3 u_xlat9;
lowp vec3 u_xlat10_9;
vec3 u_xlat10;
vec3 u_xlat11;
vec3 u_xlat12;
vec3 u_xlat13;
vec3 u_xlat14;
mediump float u_xlat16_15;
vec2 u_xlat17;
mediump vec2 u_xlat16_18;
vec3 u_xlat20;
mediump vec3 u_xlat16_20;
lowp float u_xlat10_20;
int u_xlati20;
uint u_xlatu20;
bool u_xlatb20;
float u_xlat21;
float u_xlat33;
vec2 u_xlat36;
mediump float u_xlat16_36;
lowp float u_xlat10_36;
bool u_xlatb36;
float u_xlat49;
mediump float u_xlat16_50;
float u_xlat52;
mediump float u_xlat16_52;
bool u_xlatb52;
float u_xlat53;
float u_xlat54;
void main()
{
    u_xlat0.xy = vs_TEXCOORD5.zx * vec2(vec2(_ProjectUVScale, _ProjectUVScale));
    u_xlat1.x = _Time.y * _Normal01_U_Speed + u_xlat0.y;
    u_xlat1.yz = _Time.yy * vec2(_Normal01_VSpeed, _Normal02_U_Speed) + u_xlat0.xy;
    u_xlat1.w = _Time.y * _Normal02_V_Speed + u_xlat0.x;
    u_xlat10_0.xyz = texture(_Normal01, u_xlat1.xy, _NormalMapBias).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_2.xy = u_xlat16_0.xy * vec2(_NormalMapScale);
    u_xlat10_1.xyz = texture(_Normal02, u_xlat1.zw, _NormalMapBias).xyz;
    u_xlat16_0.w = -1.0;
    u_xlat16_3.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.wwz;
    u_xlat16_3.xy = u_xlat16_3.xy * vec2(_NormalMapScale);
    u_xlat16_2.z = -1.0;
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
    u_xlat1.x = float(1.0) / vs_TEXCOORD4.w;
    u_xlat17.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat17.x = texture(_CameraDepthTexture, u_xlat17.xy).x;
    u_xlat17.x = _ZBufferParams.z * u_xlat17.x + _ZBufferParams.w;
    u_xlat17.x = float(1.0) / u_xlat17.x;
    u_xlat33 = vs_TEXCOORD10.w + 9.99999975e-05;
    u_xlat33 = (-u_xlat17.x) / u_xlat33;
    u_xlat33 = vs_TEXCOORD10.y * u_xlat33 + _WorldSpaceCameraPos.y;
    u_xlat33 = (-u_xlat33) + vs_TEXCOORD5.y;
    u_xlat4.xy = u_xlat16_2.xy * vec2(vec2(_RefractionIntensity, _RefractionIntensity));
    u_xlat1.x = u_xlat1.x * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.xw = u_xlat1.xx * u_xlat4.xy;
    u_xlat1.xw = u_xlat1.xw * vs_TEXCOORD4.ww;
    u_xlat17.x = u_xlat17.x + (-vs_TEXCOORD4.w);
#ifdef UNITY_ADRENO_ES3
    u_xlat17.x = min(max(u_xlat17.x, 0.0), 1.0);
#else
    u_xlat17.x = clamp(u_xlat17.x, 0.0, 1.0);
#endif
    u_xlat4.xy = u_xlat17.xx * u_xlat1.xw;
    u_xlat4.z = 0.0;
    u_xlat1.xyw = u_xlat4.xyz + vs_TEXCOORD4.xyw;
    u_xlat1.xy = u_xlat1.xy / u_xlat1.ww;
    u_xlat1.x = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat1.x = _ZBufferParams.z * u_xlat1.x + _ZBufferParams.w;
    u_xlat1.x = float(1.0) / u_xlat1.x;
    u_xlat1.x = u_xlat1.x + (-vs_TEXCOORD4.w);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.xyw = u_xlat1.xxx * u_xlat4.xyz + vs_TEXCOORD4.xyw;
    u_xlat4.xy = u_xlat1.xy / u_xlat1.ww;
    u_xlat49 = texture(_CameraDepthTexture, u_xlat4.xy).x;
    u_xlat49 = _ZBufferParams.z * u_xlat49 + _ZBufferParams.w;
    u_xlat49 = float(1.0) / u_xlat49;
    u_xlat49 = u_xlat49 + (-vs_TEXCOORD4.w);
    u_xlat4.x = 0.100000001 / _OpacityByDepth;
    u_xlat16_3.xz = u_xlat16_2.xy;
    u_xlat16_3.y = 1.0;
    u_xlat16_20.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
    u_xlat16_20.x = inversesqrt(u_xlat16_20.x);
    u_xlat16_20.xyz = u_xlat16_3.xyz * u_xlat16_20.xxx;
#ifdef UNITY_ADRENO_ES3
    u_xlatb5 = !!(0.0>=_ES_MoonDirection.y);
#else
    u_xlatb5 = 0.0>=_ES_MoonDirection.y;
#endif
    u_xlat5.xyz = (bool(u_xlatb5)) ? _ES_SunDirection.xyz : _ES_MoonDirection.xyz;
    u_xlat6.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat53 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat54 = inversesqrt(u_xlat53);
    u_xlat7.xyz = vec3(u_xlat54) * u_xlat6.xyz;
    u_xlat5.xyz = u_xlat6.xyz * vec3(u_xlat54) + u_xlat5.xyz;
    u_xlat6.x = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat5.xyz = u_xlat5.xyz * u_xlat6.xxx;
    u_xlat20.x = dot(u_xlat16_20.xyz, u_xlat5.xyz);
    u_xlat36.x = _Gloss * 128.0;
    u_xlat20.x = max(u_xlat20.x, 9.99999975e-05);
    u_xlat20.x = log2(u_xlat20.x);
    u_xlat20.x = u_xlat20.x * u_xlat36.x;
    u_xlat20.x = exp2(u_xlat20.x);
    u_xlat20.x = u_xlat20.x * _SpecularIntensity;
    u_xlat20.x = max(u_xlat20.x, 0.0);
    u_xlat20.x = min(u_xlat20.x, 16.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb36 = !!(_ES_MoonDirection.y>=9.99999975e-05);
#else
    u_xlatb36 = _ES_MoonDirection.y>=9.99999975e-05;
#endif
    u_xlat36.x = u_xlatb36 ? 1.0 : float(0.0);
    u_xlat52 = _ES_MoonDirection.y + -1.0;
    u_xlat36.x = u_xlat36.x * u_xlat52 + 1.0;
    u_xlat4.w = float(1.0) / _ShoreTransparency;
    u_xlat5.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat5.x = inversesqrt(u_xlat5.x);
    u_xlat5.xyz = u_xlat5.xxx * vs_TEXCOORD6.xyz;
    u_xlat5.x = dot(u_xlat7.xyz, u_xlat5.xyz);
    u_xlat5.x = (-u_xlat5.x) + 1.0;
    u_xlat5.x = max(u_xlat5.x, 9.99999975e-05);
    u_xlat5.x = log2(u_xlat5.x);
    u_xlat21 = u_xlat5.x * _SpecularPower;
    u_xlat21 = exp2(u_xlat21);
    u_xlat6.xyz = u_xlat36.xxx * _LightColor0.xyz;
    u_xlat6.xyz = u_xlat20.xxx * u_xlat6.xyz;
    u_xlat20.x = u_xlat49 + -1.0;
    u_xlat20.x = u_xlat4.w * u_xlat20.x;
    u_xlat20.x = u_xlat20.x * 0.100000001;
#ifdef UNITY_ADRENO_ES3
    u_xlat20.x = min(max(u_xlat20.x, 0.0), 1.0);
#else
    u_xlat20.x = clamp(u_xlat20.x, 0.0, 1.0);
#endif
    u_xlat6.xyz = u_xlat20.xxx * u_xlat6.xyz;
    u_xlat4.xy = vec2(u_xlat49) * u_xlat4.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.xy = min(max(u_xlat4.xy, 0.0), 1.0);
#else
    u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);
#endif
    u_xlat20.x = max(u_xlat4.y, 9.99999975e-05);
    u_xlat20.x = log2(u_xlat20.x);
    u_xlat20.x = u_xlat20.x * _ShoreFade;
    u_xlat20.x = exp2(u_xlat20.x);
    u_xlat8.xyz = _ShallowColor.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat8.xyz = u_xlat20.xxx * u_xlat8.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat1.xy = u_xlat1.xy / vs_TEXCOORD4.ww;
    u_xlat10_9.xyz = texture(_SceneScaledBufferBeforTransParent, u_xlat1.xy).xyz;
    u_xlat10.xyz = u_xlat8.xyz * u_xlat10_9.xyz;
    u_xlat1.x = 0.100000001 / _DeepColorDepth;
    u_xlat1.x = u_xlat1.x * u_xlat49;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.x = max(u_xlat1.x, 9.99999975e-05);
    u_xlat1.x = log2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _DeepColorFade;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat11.xyz = (-u_xlat8.xyz) * u_xlat10_9.xyz + _DeepColor.xyz;
    u_xlat11.xyz = u_xlat1.xxx * u_xlat11.xyz + u_xlat10.xyz;
    u_xlat12.xyz = u_xlat16_2.xyz * _DistortionIntensity.xyz;
    u_xlat13.x = vs_TEXCOORD8.x;
    u_xlat13.y = vs_TEXCOORD9.x;
    u_xlat13.z = vs_TEXCOORD6.x;
    u_xlat13.x = dot(u_xlat13.xyz, u_xlat12.xyz);
    u_xlat14.x = vs_TEXCOORD8.y;
    u_xlat14.y = vs_TEXCOORD9.y;
    u_xlat14.z = vs_TEXCOORD6.y;
    u_xlat13.y = dot(u_xlat14.xyz, u_xlat12.xyz);
    u_xlat14.x = vs_TEXCOORD8.z;
    u_xlat14.y = vs_TEXCOORD9.z;
    u_xlat14.z = vs_TEXCOORD6.z;
    u_xlat13.z = dot(u_xlat14.xyz, u_xlat12.xyz);
    u_xlat1.x = dot(u_xlat13.xyz, u_xlat13.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat12.xyz = u_xlat1.xxx * u_xlat13.xyz;
    u_xlat1.x = dot((-u_xlat7.xyz), u_xlat12.xyz);
    u_xlat1.x = u_xlat1.x + u_xlat1.x;
    u_xlat7.xyz = u_xlat12.xyz * (-u_xlat1.xxx) + (-u_xlat7.xyz);
    u_xlat10_0 = textureLod(_ReflectionSkyCubeMap, u_xlat7.xyz, 0.0);
    u_xlat16_2.x = u_xlat10_0.w + -1.0;
    u_xlat16_2.x = _ReflectionSkyCubeMap_HDR.w * u_xlat16_2.x + 1.0;
    u_xlat16_2.x = log2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * _ReflectionSkyCubeMap_HDR.y;
    u_xlat16_2.x = exp2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * _ReflectionSkyCubeMap_HDR.x;
    u_xlat1.x = u_xlat5.x * _FresnelPower;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _ReflectionIntensity;
    u_xlat17.x = float(1.0) / _ShoreReflectionFade;
    u_xlat17.x = u_xlat17.x * u_xlat49;
#ifdef UNITY_ADRENO_ES3
    u_xlat17.x = min(max(u_xlat17.x, 0.0), 1.0);
#else
    u_xlat17.x = clamp(u_xlat17.x, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat17.x * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat7.xyz = u_xlat16_2.xxx * u_xlat10_0.xyz + (-u_xlat11.xyz);
    u_xlat1.xyw = u_xlat1.xxx * u_xlat7.xyz + u_xlat11.xyz;
    u_xlat1.xyw = (-u_xlat8.xyz) * u_xlat10_9.xyz + u_xlat1.xyw;
    u_xlat1.xyw = u_xlat20.xxx * u_xlat1.xyw + u_xlat10.xyz;
    u_xlat20.x = (-vs_TEXCOORD5.y) * _WorldSpaceLightPos0.w + _WorldSpaceLightPos0.y;
    u_xlat16_2.x = max(u_xlat20.x, 0.0);
    u_xlat20.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowSplitSpheres[0].xyz);
    u_xlat7.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowSplitSpheres[1].xyz);
    u_xlat8.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowSplitSpheres[2].xyz);
    u_xlat9.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowSplitSpheres[3].xyz);
    u_xlat0.x = dot(u_xlat20.xyz, u_xlat20.xyz);
    u_xlat0.y = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat0.z = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat0.w = dot(u_xlat9.xyz, u_xlat9.xyz);
    u_xlatb0 = lessThan(u_xlat0, unity_ShadowSplitSqRadii);
    u_xlat0 = mix(vec4(0.0, 0.0, 0.0, 0.0), vec4(1.0, 1.0, 1.0, 1.0), vec4(u_xlatb0));
    u_xlat16_18.x = u_xlat0.y + u_xlat0.x;
    u_xlat16_18.y = u_xlat0.z + u_xlat16_18.x;
    u_xlat3.x = -0.0;
    u_xlat3.y = (-u_xlat0.x);
    u_xlat3.zw = (-u_xlat16_18.xy);
    u_xlat0 = u_xlat0 + u_xlat3;
    u_xlat0 = max(u_xlat0, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat16_18.x = dot(u_xlat0, vec4(1.0, 1.0, 1.0, 1.0));
#ifdef UNITY_ADRENO_ES3
    u_xlatb20 = !!(u_xlat16_18.x>=0.5);
#else
    u_xlatb20 = u_xlat16_18.x>=0.5;
#endif
    if(u_xlatb20){
        u_xlat20.x = dot(u_xlat0.yzw, vec3(1.0, 2.0, 3.0));
        u_xlat20.x = min(u_xlat20.x, 3.0);
        u_xlatu20 = uint(u_xlat20.x);
        u_xlat7.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowPos[int(u_xlatu20)].xyz);
        u_xlati20 = int(u_xlatu20) << 2;
        u_xlat8.xyz = u_xlat7.yyy * hlslcc_mtx4x4unity_WorldToShadow[(u_xlati20 + 1)].xyz;
        u_xlat7.xyw = hlslcc_mtx4x4unity_WorldToShadow[u_xlati20].xyz * u_xlat7.xxx + u_xlat8.xyz;
        u_xlat7.xyz = hlslcc_mtx4x4unity_WorldToShadow[(u_xlati20 + 2)].xyz * u_xlat7.zzz + u_xlat7.xyw;
        u_xlat20.xyz = u_xlat7.xyz + hlslcc_mtx4x4unity_WorldToShadow[(u_xlati20 + 3)].xyz;
        vec3 txVec0 = vec3(u_xlat20.xy,u_xlat20.z);
        u_xlat10_20 = textureLod(hlslcc_zcmp_CascadeShadowMapTexture, txVec0, 0.0);
        u_xlat16_36 = (-_LightShadowData.x) + 1.0;
        u_xlat20.x = u_xlat10_20 * u_xlat16_36 + _LightShadowData.x;
    } else {
        u_xlat20.x = 1.0;
    //ENDIF
    }
    u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;
    u_xlat20.xyz = u_xlat16_2.xyz * u_xlat20.xxx + vs_TEXCOORD1.xyz;
    u_xlat16_2.xyz = u_xlat20.xyz * vec3(0.300000012, 0.300000012, 0.300000012) + vec3(0.699999988, 0.699999988, 0.699999988);
    u_xlat20.x = sqrt(u_xlat53);
    u_xlat16_50 = u_xlat20.x + (-_DepthFoamCloseFadeOffset);
    u_xlat16_50 = u_xlat16_50 / _DepthFoamCloseFadeDistance;
    u_xlat16_15 = vs_COLOR0.x * _DepthFoamExtent;
    u_xlat33 = max(u_xlat33, 0.0);
    u_xlat33 = min(u_xlat16_15, u_xlat33);
    u_xlat16_15 = _DepthFoamExtent * vs_COLOR0.x + 9.99999975e-05;
    u_xlat33 = u_xlat33 / u_xlat16_15;
    u_xlat33 = (-u_xlat33) + 1.0;
    u_xlat36.xy = vec2(_Time.y * _DepthFoamMask_ST.z, _Time.y * _DepthFoamMask_ST.w);
    u_xlat36.xy = fract(u_xlat36.xy);
    u_xlat36.xy = _DepthFoamMask_ST.xy * vs_TEXCOORD5.xz + u_xlat36.xy;
    u_xlat10_36 = texture(_DepthFoamMask, u_xlat36.xy).x;
    u_xlat52 = vs_TEXCOORD5.z + vs_TEXCOORD5.x;
    u_xlat52 = u_xlat52 * _DepthFoamPhaseScale;
    u_xlat52 = _DepthFoamSpeed * _Time.y + u_xlat52;
    u_xlat5.x = (-u_xlat33) + 1.0;
    u_xlat16_15 = _DepthFoamSubdivision * u_xlat33 + u_xlat52;
    u_xlat16_15 = sin(u_xlat16_15);
    u_xlat16_15 = _DepthFoamWidth * u_xlat33 + u_xlat16_15;
    u_xlat16_52 = u_xlat10_36 * 2.0 + -1.0;
    u_xlat52 = u_xlat16_52 + u_xlat16_15;
#ifdef UNITY_ADRENO_ES3
    u_xlatb52 = !!(u_xlat52>=u_xlat5.x);
#else
    u_xlatb52 = u_xlat52>=u_xlat5.x;
#endif
    u_xlat52 = u_xlatb52 ? 1.0 : float(0.0);
    u_xlat36.x = u_xlat52 * u_xlat10_36;
    u_xlat16_15 = _DepthFoamDistance + 9.99999975e-05;
    u_xlat16_15 = u_xlat20.x / u_xlat16_15;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_15 = min(max(u_xlat16_15, 0.0), 1.0);
#else
    u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);
#endif
    u_xlat16_20.x = (-u_xlat16_15) + 1.0;
    u_xlat16_15 = vs_COLOR0.y * _DepthFoamColor.w;
    u_xlat16_50 = u_xlat16_50 * u_xlat16_15;
    u_xlat16_50 = u_xlat36.x * u_xlat16_50;
    u_xlat16_50 = u_xlat33 * u_xlat16_50;
    u_xlat16_50 = u_xlat16_20.x * u_xlat16_50;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_50 = min(max(u_xlat16_50, 0.0), 1.0);
#else
    u_xlat16_50 = clamp(u_xlat16_50, 0.0, 1.0);
#endif
    u_xlat16_2.xyz = _DepthFoamColor.xyz * u_xlat16_2.xyz + (-u_xlat1.xyw);
    u_xlat16_2.xyz = vec3(u_xlat16_50) * u_xlat16_2.xyz + u_xlat1.xyw;
    u_xlat0.xyz = u_xlat6.xyz * vec3(u_xlat21) + u_xlat16_2.xyz;
    u_xlat0.w = u_xlat4.x * vs_COLOR0.w;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MHY_SHADER_LOW" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
uniform 	vec4 hlslcc_mtx4x4_mhyJitteredVP[4];
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
out highp vec4 vs_TEXCOORD9;
out highp vec4 vs_TEXCOORD10;
float u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec4 u_xlat8;
vec3 u_xlat9;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat9.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4_mhyJitteredVP[1];
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[3] * u_xlat2.wwww + u_xlat1;
    u_xlat3.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    u_xlat3.xyw = u_xlat1.xyw;
    gl_Position = u_xlat3;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD1.w = 1.0;
    u_xlat4.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat4.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat4.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat1.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
    u_xlat16_5.x = u_xlat4.y * u_xlat4.y;
    u_xlat16_5.x = u_xlat4.x * u_xlat4.x + (-u_xlat16_5.x);
    u_xlat16_6 = u_xlat4.yzzx * u_xlat4.xyzz;
    u_xlat16_7.x = dot(unity_SHBr, u_xlat16_6);
    u_xlat16_7.y = dot(unity_SHBg, u_xlat16_6);
    u_xlat16_7.z = dot(unity_SHBb, u_xlat16_6);
    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_7.xyz;
    u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat4.w = 1.0;
    u_xlat16_6.x = dot(unity_SHAr, u_xlat4);
    u_xlat16_6.y = dot(unity_SHAg, u_xlat4);
    u_xlat16_6.z = dot(unity_SHAb, u_xlat4);
    u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_6.xyz;
    vs_TEXCOORD1.xyz = u_xlat16_5.xyz;
    u_xlat1.x = u_xlat3.y * _ProjectionParams.x;
    u_xlat8.w = u_xlat1.x * 0.5;
    u_xlat8.xz = u_xlat3.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.z = u_xlat1.z;
    u_xlat3.xy = u_xlat8.zz + u_xlat8.xw;
    vs_TEXCOORD2 = u_xlat3;
    vs_TEXCOORD4.xyw = u_xlat3.xyw;
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD3.w = 0.0;
    u_xlat1.x = u_xlat2.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat2.x + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat2.z + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat2.w + u_xlat1.x;
    vs_TEXCOORD3.z = (-u_xlat1.x);
    vs_TEXCOORD5.w = 0.0;
    vs_TEXCOORD5.xyz = u_xlat9.xyz;
    u_xlat9.xyz = (-u_xlat9.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD6.w = 0.0;
    vs_TEXCOORD6.xyz = u_xlat4.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].www + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * in_POSITION0.yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.zzz + u_xlat1.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.www + u_xlat1.xyz;
    vs_TEXCOORD7.xyz = u_xlat1.xyz * vec3(-1.0, -1.0, 1.0);
    vs_TEXCOORD7.w = 0.0;
    u_xlat1.xyz = in_TANGENT0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat0 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0 = inversesqrt(u_xlat0);
    u_xlat1.xyz = vec3(u_xlat0) * u_xlat1.xyz;
    vs_TEXCOORD8.xyz = u_xlat1.xyz;
    vs_TEXCOORD8.w = 0.0;
    u_xlat2.xyz = u_xlat1.yzx * u_xlat4.zxy;
    u_xlat1.xyz = u_xlat4.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
    u_xlat0 = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD9.xyz = vec3(u_xlat0) * u_xlat1.xyz;
    vs_TEXCOORD9.w = 0.0;
    u_xlat0 = u_xlat9.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat9.x + u_xlat0;
    vs_TEXCOORD10.w = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat9.z + u_xlat0;
    vs_TEXCOORD10.xyz = u_xlat9.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowPos[4];
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _DepthFoamMask_ST;
uniform 	mediump float _DepthFoamSpeed;
uniform 	mediump vec4 _DepthFoamColor;
uniform 	mediump float _DepthFoamExtent;
uniform 	mediump float _DepthFoamDistance;
uniform 	mediump float _DepthFoamSubdivision;
uniform 	mediump float _DepthFoamWidth;
uniform 	mediump float _DepthFoamPhaseScale;
uniform 	mediump float _DepthFoamCloseFadeOffset;
uniform 	mediump float _DepthFoamCloseFadeDistance;
uniform 	float _NormalMapScale;
uniform 	float _Normal01_U_Speed;
uniform 	float _Normal01_VSpeed;
uniform 	float _NormalMapBias;
uniform 	float _Normal02_U_Speed;
uniform 	float _Normal02_V_Speed;
uniform 	float _RefractionIntensity;
uniform 	float _OpacityByDepth;
uniform 	float _SpecularIntensity;
uniform 	vec3 _ES_MoonDirection;
uniform 	vec3 _ES_SunDirection;
uniform 	float _Gloss;
uniform 	float _ShoreTransparency;
uniform 	float _SpecularPower;
uniform 	vec4 _ShallowColor;
uniform 	float _ShoreFade;
uniform 	vec4 _DeepColor;
uniform 	float _DeepColorDepth;
uniform 	float _DeepColorFade;
uniform 	vec4 _DistortionIntensity;
uniform 	float _ReflectionIntensity;
uniform 	float _FresnelPower;
uniform 	float _ShoreReflectionFade;
uniform 	mediump float _ProjectUVScale;
uniform 	vec4 _ReflectionSkyCubeMap_HDR;
uniform lowp sampler2D _Normal01;
uniform lowp sampler2D _Normal02;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _SceneScaledBufferBeforTransParent;
uniform lowp samplerCube _ReflectionSkyCubeMap;
uniform lowp sampler2D _DepthFoamMask;
uniform lowp sampler2DShadow hlslcc_zcmp_CascadeShadowMapTexture;
uniform lowp sampler2D _CascadeShadowMapTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD8;
in highp vec4 vs_TEXCOORD9;
in highp vec4 vs_TEXCOORD10;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec4 u_xlatb0;
vec4 u_xlat1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec4 u_xlat4;
vec3 u_xlat5;
bool u_xlatb5;
vec3 u_xlat6;
vec4 u_xlat7;
vec3 u_xlat8;
vec3 u_xlat9;
lowp vec3 u_xlat10_9;
vec3 u_xlat10;
vec3 u_xlat11;
vec3 u_xlat12;
vec3 u_xlat13;
vec3 u_xlat14;
mediump float u_xlat16_15;
vec2 u_xlat17;
mediump vec2 u_xlat16_18;
vec3 u_xlat20;
mediump vec3 u_xlat16_20;
lowp float u_xlat10_20;
int u_xlati20;
uint u_xlatu20;
bool u_xlatb20;
float u_xlat21;
float u_xlat33;
vec2 u_xlat36;
mediump float u_xlat16_36;
lowp float u_xlat10_36;
bool u_xlatb36;
float u_xlat49;
mediump float u_xlat16_50;
float u_xlat52;
mediump float u_xlat16_52;
bool u_xlatb52;
float u_xlat53;
float u_xlat54;
void main()
{
    u_xlat0.xy = vs_TEXCOORD5.zx * vec2(vec2(_ProjectUVScale, _ProjectUVScale));
    u_xlat1.x = _Time.y * _Normal01_U_Speed + u_xlat0.y;
    u_xlat1.yz = _Time.yy * vec2(_Normal01_VSpeed, _Normal02_U_Speed) + u_xlat0.xy;
    u_xlat1.w = _Time.y * _Normal02_V_Speed + u_xlat0.x;
    u_xlat10_0.xyz = texture(_Normal01, u_xlat1.xy, _NormalMapBias).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_2.xy = u_xlat16_0.xy * vec2(_NormalMapScale);
    u_xlat10_1.xyz = texture(_Normal02, u_xlat1.zw, _NormalMapBias).xyz;
    u_xlat16_0.w = -1.0;
    u_xlat16_3.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.wwz;
    u_xlat16_3.xy = u_xlat16_3.xy * vec2(_NormalMapScale);
    u_xlat16_2.z = -1.0;
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
    u_xlat1.x = float(1.0) / vs_TEXCOORD4.w;
    u_xlat17.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat17.x = texture(_CameraDepthTexture, u_xlat17.xy).x;
    u_xlat17.x = _ZBufferParams.z * u_xlat17.x + _ZBufferParams.w;
    u_xlat17.x = float(1.0) / u_xlat17.x;
    u_xlat33 = vs_TEXCOORD10.w + 9.99999975e-05;
    u_xlat33 = (-u_xlat17.x) / u_xlat33;
    u_xlat33 = vs_TEXCOORD10.y * u_xlat33 + _WorldSpaceCameraPos.y;
    u_xlat33 = (-u_xlat33) + vs_TEXCOORD5.y;
    u_xlat4.xy = u_xlat16_2.xy * vec2(vec2(_RefractionIntensity, _RefractionIntensity));
    u_xlat1.x = u_xlat1.x * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.xw = u_xlat1.xx * u_xlat4.xy;
    u_xlat1.xw = u_xlat1.xw * vs_TEXCOORD4.ww;
    u_xlat17.x = u_xlat17.x + (-vs_TEXCOORD4.w);
#ifdef UNITY_ADRENO_ES3
    u_xlat17.x = min(max(u_xlat17.x, 0.0), 1.0);
#else
    u_xlat17.x = clamp(u_xlat17.x, 0.0, 1.0);
#endif
    u_xlat4.xy = u_xlat17.xx * u_xlat1.xw;
    u_xlat4.z = 0.0;
    u_xlat1.xyw = u_xlat4.xyz + vs_TEXCOORD4.xyw;
    u_xlat1.xy = u_xlat1.xy / u_xlat1.ww;
    u_xlat1.x = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat1.x = _ZBufferParams.z * u_xlat1.x + _ZBufferParams.w;
    u_xlat1.x = float(1.0) / u_xlat1.x;
    u_xlat1.x = u_xlat1.x + (-vs_TEXCOORD4.w);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.xyw = u_xlat1.xxx * u_xlat4.xyz + vs_TEXCOORD4.xyw;
    u_xlat4.xy = u_xlat1.xy / u_xlat1.ww;
    u_xlat49 = texture(_CameraDepthTexture, u_xlat4.xy).x;
    u_xlat49 = _ZBufferParams.z * u_xlat49 + _ZBufferParams.w;
    u_xlat49 = float(1.0) / u_xlat49;
    u_xlat49 = u_xlat49 + (-vs_TEXCOORD4.w);
    u_xlat4.x = 0.100000001 / _OpacityByDepth;
    u_xlat16_3.xz = u_xlat16_2.xy;
    u_xlat16_3.y = 1.0;
    u_xlat16_20.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
    u_xlat16_20.x = inversesqrt(u_xlat16_20.x);
    u_xlat16_20.xyz = u_xlat16_3.xyz * u_xlat16_20.xxx;
#ifdef UNITY_ADRENO_ES3
    u_xlatb5 = !!(0.0>=_ES_MoonDirection.y);
#else
    u_xlatb5 = 0.0>=_ES_MoonDirection.y;
#endif
    u_xlat5.xyz = (bool(u_xlatb5)) ? _ES_SunDirection.xyz : _ES_MoonDirection.xyz;
    u_xlat6.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat53 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat54 = inversesqrt(u_xlat53);
    u_xlat7.xyz = vec3(u_xlat54) * u_xlat6.xyz;
    u_xlat5.xyz = u_xlat6.xyz * vec3(u_xlat54) + u_xlat5.xyz;
    u_xlat6.x = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat5.xyz = u_xlat5.xyz * u_xlat6.xxx;
    u_xlat20.x = dot(u_xlat16_20.xyz, u_xlat5.xyz);
    u_xlat36.x = _Gloss * 128.0;
    u_xlat20.x = max(u_xlat20.x, 9.99999975e-05);
    u_xlat20.x = log2(u_xlat20.x);
    u_xlat20.x = u_xlat20.x * u_xlat36.x;
    u_xlat20.x = exp2(u_xlat20.x);
    u_xlat20.x = u_xlat20.x * _SpecularIntensity;
    u_xlat20.x = max(u_xlat20.x, 0.0);
    u_xlat20.x = min(u_xlat20.x, 16.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb36 = !!(_ES_MoonDirection.y>=9.99999975e-05);
#else
    u_xlatb36 = _ES_MoonDirection.y>=9.99999975e-05;
#endif
    u_xlat36.x = u_xlatb36 ? 1.0 : float(0.0);
    u_xlat52 = _ES_MoonDirection.y + -1.0;
    u_xlat36.x = u_xlat36.x * u_xlat52 + 1.0;
    u_xlat4.w = float(1.0) / _ShoreTransparency;
    u_xlat5.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat5.x = inversesqrt(u_xlat5.x);
    u_xlat5.xyz = u_xlat5.xxx * vs_TEXCOORD6.xyz;
    u_xlat5.x = dot(u_xlat7.xyz, u_xlat5.xyz);
    u_xlat5.x = (-u_xlat5.x) + 1.0;
    u_xlat5.x = max(u_xlat5.x, 9.99999975e-05);
    u_xlat5.x = log2(u_xlat5.x);
    u_xlat21 = u_xlat5.x * _SpecularPower;
    u_xlat21 = exp2(u_xlat21);
    u_xlat6.xyz = u_xlat36.xxx * _LightColor0.xyz;
    u_xlat6.xyz = u_xlat20.xxx * u_xlat6.xyz;
    u_xlat20.x = u_xlat49 + -1.0;
    u_xlat20.x = u_xlat4.w * u_xlat20.x;
    u_xlat20.x = u_xlat20.x * 0.100000001;
#ifdef UNITY_ADRENO_ES3
    u_xlat20.x = min(max(u_xlat20.x, 0.0), 1.0);
#else
    u_xlat20.x = clamp(u_xlat20.x, 0.0, 1.0);
#endif
    u_xlat6.xyz = u_xlat20.xxx * u_xlat6.xyz;
    u_xlat4.xy = vec2(u_xlat49) * u_xlat4.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.xy = min(max(u_xlat4.xy, 0.0), 1.0);
#else
    u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);
#endif
    u_xlat20.x = max(u_xlat4.y, 9.99999975e-05);
    u_xlat20.x = log2(u_xlat20.x);
    u_xlat20.x = u_xlat20.x * _ShoreFade;
    u_xlat20.x = exp2(u_xlat20.x);
    u_xlat8.xyz = _ShallowColor.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat8.xyz = u_xlat20.xxx * u_xlat8.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat1.xy = u_xlat1.xy / vs_TEXCOORD4.ww;
    u_xlat10_9.xyz = texture(_SceneScaledBufferBeforTransParent, u_xlat1.xy).xyz;
    u_xlat10.xyz = u_xlat8.xyz * u_xlat10_9.xyz;
    u_xlat1.x = 0.100000001 / _DeepColorDepth;
    u_xlat1.x = u_xlat1.x * u_xlat49;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.x = max(u_xlat1.x, 9.99999975e-05);
    u_xlat1.x = log2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _DeepColorFade;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat11.xyz = (-u_xlat8.xyz) * u_xlat10_9.xyz + _DeepColor.xyz;
    u_xlat11.xyz = u_xlat1.xxx * u_xlat11.xyz + u_xlat10.xyz;
    u_xlat12.xyz = u_xlat16_2.xyz * _DistortionIntensity.xyz;
    u_xlat13.x = vs_TEXCOORD8.x;
    u_xlat13.y = vs_TEXCOORD9.x;
    u_xlat13.z = vs_TEXCOORD6.x;
    u_xlat13.x = dot(u_xlat13.xyz, u_xlat12.xyz);
    u_xlat14.x = vs_TEXCOORD8.y;
    u_xlat14.y = vs_TEXCOORD9.y;
    u_xlat14.z = vs_TEXCOORD6.y;
    u_xlat13.y = dot(u_xlat14.xyz, u_xlat12.xyz);
    u_xlat14.x = vs_TEXCOORD8.z;
    u_xlat14.y = vs_TEXCOORD9.z;
    u_xlat14.z = vs_TEXCOORD6.z;
    u_xlat13.z = dot(u_xlat14.xyz, u_xlat12.xyz);
    u_xlat1.x = dot(u_xlat13.xyz, u_xlat13.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat12.xyz = u_xlat1.xxx * u_xlat13.xyz;
    u_xlat1.x = dot((-u_xlat7.xyz), u_xlat12.xyz);
    u_xlat1.x = u_xlat1.x + u_xlat1.x;
    u_xlat7.xyz = u_xlat12.xyz * (-u_xlat1.xxx) + (-u_xlat7.xyz);
    u_xlat10_0 = textureLod(_ReflectionSkyCubeMap, u_xlat7.xyz, 0.0);
    u_xlat16_2.x = u_xlat10_0.w + -1.0;
    u_xlat16_2.x = _ReflectionSkyCubeMap_HDR.w * u_xlat16_2.x + 1.0;
    u_xlat16_2.x = log2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * _ReflectionSkyCubeMap_HDR.y;
    u_xlat16_2.x = exp2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * _ReflectionSkyCubeMap_HDR.x;
    u_xlat1.x = u_xlat5.x * _FresnelPower;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _ReflectionIntensity;
    u_xlat17.x = float(1.0) / _ShoreReflectionFade;
    u_xlat17.x = u_xlat17.x * u_xlat49;
#ifdef UNITY_ADRENO_ES3
    u_xlat17.x = min(max(u_xlat17.x, 0.0), 1.0);
#else
    u_xlat17.x = clamp(u_xlat17.x, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat17.x * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat7.xyz = u_xlat16_2.xxx * u_xlat10_0.xyz + (-u_xlat11.xyz);
    u_xlat1.xyw = u_xlat1.xxx * u_xlat7.xyz + u_xlat11.xyz;
    u_xlat1.xyw = (-u_xlat8.xyz) * u_xlat10_9.xyz + u_xlat1.xyw;
    u_xlat1.xyw = u_xlat20.xxx * u_xlat1.xyw + u_xlat10.xyz;
    u_xlat20.x = (-vs_TEXCOORD5.y) * _WorldSpaceLightPos0.w + _WorldSpaceLightPos0.y;
    u_xlat16_2.x = max(u_xlat20.x, 0.0);
    u_xlat20.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowSplitSpheres[0].xyz);
    u_xlat7.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowSplitSpheres[1].xyz);
    u_xlat8.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowSplitSpheres[2].xyz);
    u_xlat9.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowSplitSpheres[3].xyz);
    u_xlat0.x = dot(u_xlat20.xyz, u_xlat20.xyz);
    u_xlat0.y = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat0.z = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat0.w = dot(u_xlat9.xyz, u_xlat9.xyz);
    u_xlatb0 = lessThan(u_xlat0, unity_ShadowSplitSqRadii);
    u_xlat0 = mix(vec4(0.0, 0.0, 0.0, 0.0), vec4(1.0, 1.0, 1.0, 1.0), vec4(u_xlatb0));
    u_xlat16_18.x = u_xlat0.y + u_xlat0.x;
    u_xlat16_18.y = u_xlat0.z + u_xlat16_18.x;
    u_xlat3.x = -0.0;
    u_xlat3.y = (-u_xlat0.x);
    u_xlat3.zw = (-u_xlat16_18.xy);
    u_xlat0 = u_xlat0 + u_xlat3;
    u_xlat0 = max(u_xlat0, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat16_18.x = dot(u_xlat0, vec4(1.0, 1.0, 1.0, 1.0));
#ifdef UNITY_ADRENO_ES3
    u_xlatb20 = !!(u_xlat16_18.x>=0.5);
#else
    u_xlatb20 = u_xlat16_18.x>=0.5;
#endif
    if(u_xlatb20){
        u_xlat20.x = dot(u_xlat0.yzw, vec3(1.0, 2.0, 3.0));
        u_xlat20.x = min(u_xlat20.x, 3.0);
        u_xlatu20 = uint(u_xlat20.x);
        u_xlat7.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowPos[int(u_xlatu20)].xyz);
        u_xlati20 = int(u_xlatu20) << 2;
        u_xlat8.xyz = u_xlat7.yyy * hlslcc_mtx4x4unity_WorldToShadow[(u_xlati20 + 1)].xyz;
        u_xlat7.xyw = hlslcc_mtx4x4unity_WorldToShadow[u_xlati20].xyz * u_xlat7.xxx + u_xlat8.xyz;
        u_xlat7.xyz = hlslcc_mtx4x4unity_WorldToShadow[(u_xlati20 + 2)].xyz * u_xlat7.zzz + u_xlat7.xyw;
        u_xlat20.xyz = u_xlat7.xyz + hlslcc_mtx4x4unity_WorldToShadow[(u_xlati20 + 3)].xyz;
        vec3 txVec0 = vec3(u_xlat20.xy,u_xlat20.z);
        u_xlat10_20 = textureLod(hlslcc_zcmp_CascadeShadowMapTexture, txVec0, 0.0);
        u_xlat16_36 = (-_LightShadowData.x) + 1.0;
        u_xlat20.x = u_xlat10_20 * u_xlat16_36 + _LightShadowData.x;
    } else {
        u_xlat20.x = 1.0;
    //ENDIF
    }
    u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;
    u_xlat20.xyz = u_xlat16_2.xyz * u_xlat20.xxx + vs_TEXCOORD1.xyz;
    u_xlat16_2.xyz = u_xlat20.xyz * vec3(0.300000012, 0.300000012, 0.300000012) + vec3(0.699999988, 0.699999988, 0.699999988);
    u_xlat20.x = sqrt(u_xlat53);
    u_xlat16_50 = u_xlat20.x + (-_DepthFoamCloseFadeOffset);
    u_xlat16_50 = u_xlat16_50 / _DepthFoamCloseFadeDistance;
    u_xlat16_15 = vs_COLOR0.x * _DepthFoamExtent;
    u_xlat33 = max(u_xlat33, 0.0);
    u_xlat33 = min(u_xlat16_15, u_xlat33);
    u_xlat16_15 = _DepthFoamExtent * vs_COLOR0.x + 9.99999975e-05;
    u_xlat33 = u_xlat33 / u_xlat16_15;
    u_xlat33 = (-u_xlat33) + 1.0;
    u_xlat36.xy = vec2(_Time.y * _DepthFoamMask_ST.z, _Time.y * _DepthFoamMask_ST.w);
    u_xlat36.xy = fract(u_xlat36.xy);
    u_xlat36.xy = _DepthFoamMask_ST.xy * vs_TEXCOORD5.xz + u_xlat36.xy;
    u_xlat10_36 = texture(_DepthFoamMask, u_xlat36.xy).x;
    u_xlat52 = vs_TEXCOORD5.z + vs_TEXCOORD5.x;
    u_xlat52 = u_xlat52 * _DepthFoamPhaseScale;
    u_xlat52 = _DepthFoamSpeed * _Time.y + u_xlat52;
    u_xlat5.x = (-u_xlat33) + 1.0;
    u_xlat16_15 = _DepthFoamSubdivision * u_xlat33 + u_xlat52;
    u_xlat16_15 = sin(u_xlat16_15);
    u_xlat16_15 = _DepthFoamWidth * u_xlat33 + u_xlat16_15;
    u_xlat16_52 = u_xlat10_36 * 2.0 + -1.0;
    u_xlat52 = u_xlat16_52 + u_xlat16_15;
#ifdef UNITY_ADRENO_ES3
    u_xlatb52 = !!(u_xlat52>=u_xlat5.x);
#else
    u_xlatb52 = u_xlat52>=u_xlat5.x;
#endif
    u_xlat52 = u_xlatb52 ? 1.0 : float(0.0);
    u_xlat36.x = u_xlat52 * u_xlat10_36;
    u_xlat16_15 = _DepthFoamDistance + 9.99999975e-05;
    u_xlat16_15 = u_xlat20.x / u_xlat16_15;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_15 = min(max(u_xlat16_15, 0.0), 1.0);
#else
    u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);
#endif
    u_xlat16_20.x = (-u_xlat16_15) + 1.0;
    u_xlat16_15 = vs_COLOR0.y * _DepthFoamColor.w;
    u_xlat16_50 = u_xlat16_50 * u_xlat16_15;
    u_xlat16_50 = u_xlat36.x * u_xlat16_50;
    u_xlat16_50 = u_xlat33 * u_xlat16_50;
    u_xlat16_50 = u_xlat16_20.x * u_xlat16_50;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_50 = min(max(u_xlat16_50, 0.0), 1.0);
#else
    u_xlat16_50 = clamp(u_xlat16_50, 0.0, 1.0);
#endif
    u_xlat16_2.xyz = _DepthFoamColor.xyz * u_xlat16_2.xyz + (-u_xlat1.xyw);
    u_xlat16_2.xyz = vec3(u_xlat16_50) * u_xlat16_2.xyz + u_xlat1.xyw;
    u_xlat0.xyz = u_xlat6.xyz * vec3(u_xlat21) + u_xlat16_2.xyz;
    u_xlat0.w = u_xlat4.x * vs_COLOR0.w;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "MHY_SHADER_HIGH" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump float _MHYZBias;
uniform 	vec4 hlslcc_mtx4x4_mhyJitteredVP[4];
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
out highp vec4 vs_TEXCOORD9;
out highp vec4 vs_TEXCOORD10;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec4 u_xlat8;
float u_xlat27;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4_mhyJitteredVP[1];
    u_xlat2 = hlslcc_mtx4x4_mhyJitteredVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4_mhyJitteredVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4_mhyJitteredVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat3.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    u_xlat3.xyw = u_xlat2.xyw;
    gl_Position = u_xlat3;
    vs_COLOR0 = in_COLOR0;
    u_xlat4.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat4.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat4.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat27 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat4.xyz = vec3(u_xlat27) * u_xlat4.xyz;
    u_xlat16_5.x = u_xlat4.y * u_xlat4.y;
    u_xlat16_5.x = u_xlat4.x * u_xlat4.x + (-u_xlat16_5.x);
    u_xlat16_6 = u_xlat4.yzzx * u_xlat4.xyzz;
    u_xlat16_7.x = dot(unity_SHBr, u_xlat16_6);
    u_xlat16_7.y = dot(unity_SHBg, u_xlat16_6);
    u_xlat16_7.z = dot(unity_SHBb, u_xlat16_6);
    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_7.xyz;
    u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat4.w = 1.0;
    u_xlat16_6.x = dot(unity_SHAr, u_xlat4);
    u_xlat16_6.y = dot(unity_SHAg, u_xlat4);
    u_xlat16_6.z = dot(unity_SHAb, u_xlat4);
    u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_6.xyz;
    vs_TEXCOORD1.xyz = u_xlat16_5.xyz;
    vs_TEXCOORD1.w = 1.0;
    u_xlat27 = u_xlat3.y * _ProjectionParams.x;
    u_xlat8.w = u_xlat27 * 0.5;
    u_xlat8.xz = u_xlat3.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.z = u_xlat2.z;
    u_xlat3.xy = u_xlat8.zz + u_xlat8.xw;
    vs_TEXCOORD2 = u_xlat3;
    vs_TEXCOORD4.xyw = u_xlat3.xyw;
    u_xlat27 = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat27 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat27;
    u_xlat27 = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat27;
    u_xlat27 = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat27;
    vs_TEXCOORD3.z = (-u_xlat27);
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD3.w = 0.0;
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD5.w = 0.0;
    vs_TEXCOORD6.xyz = u_xlat4.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[1].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].www + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * in_POSITION0.yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.zzz + u_xlat1.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.www + u_xlat1.xyz;
    vs_TEXCOORD7.xyz = u_xlat1.xyz * vec3(-1.0, -1.0, 1.0);
    vs_TEXCOORD7.w = 0.0;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat27 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat1.xyz = vec3(u_xlat27) * u_xlat1.xyz;
    vs_TEXCOORD8.xyz = u_xlat1.xyz;
    vs_TEXCOORD8.w = 0.0;
    u_xlat2.xyz = u_xlat1.yzx * u_xlat4.zxy;
    u_xlat1.xyz = u_xlat4.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
    u_xlat27 = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD9.xyz = vec3(u_xlat27) * u_xlat1.xyz;
    vs_TEXCOORD9.w = 0.0;
    u_xlat27 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat27 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat27;
    vs_TEXCOORD10.w = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat27;
    vs_TEXCOORD10.xyz = u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowPos[4];
uniform 	mediump vec4 _LightColor0;
uniform 	mediump float _CausticUVScale;
uniform 	mediump float _CausticSpeed;
uniform 	mediump vec4 _CausticColor;
uniform 	mediump float _CausticDepth;
uniform 	mediump float _CausticDistance;
uniform 	mediump float _CausticDistortionValue;
uniform 	mediump vec4 _DepthFoamMask_ST;
uniform 	mediump float _DepthFoamSpeed;
uniform 	mediump vec4 _DepthFoamColor;
uniform 	mediump float _DepthFoamExtent;
uniform 	mediump float _DepthFoamDistance;
uniform 	mediump float _DepthFoamSubdivision;
uniform 	mediump float _DepthFoamWidth;
uniform 	mediump float _DepthFoamPhaseScale;
uniform 	mediump float _DepthFoamCloseFadeOffset;
uniform 	mediump float _DepthFoamCloseFadeDistance;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _NormalMapScale;
uniform 	float _Normal01_U_Speed;
uniform 	float _Normal01_VSpeed;
uniform 	float _NormalMapBias;
uniform 	float _Normal02_U_Speed;
uniform 	float _Normal02_V_Speed;
uniform 	float _RefractionIntensity;
uniform 	float _OpacityByDepth;
uniform 	float _SpecularIntensity;
uniform 	vec3 _ES_MoonDirection;
uniform 	vec3 _ES_SunDirection;
uniform 	float _Gloss;
uniform 	float _ShoreTransparency;
uniform 	float _SpecularPower;
uniform 	vec4 _ShallowColor;
uniform 	float _ShoreFade;
uniform 	vec4 _DeepColor;
uniform 	float _DeepColorDepth;
uniform 	float _DeepColorFade;
uniform 	vec4 _DistortionIntensity;
uniform 	float _SSRDistortion;
uniform 	float _SSRDistortion_Shore;
uniform 	float _SSRIntensity;
uniform 	float _ReflectionIntensity;
uniform 	float _FresnelPower;
uniform 	float _ShoreReflectionFade;
uniform 	vec3 _ES_MainLightColor;
uniform 	mediump float _RippleTillingScale;
uniform 	mediump float _Ripple02Rotate;
uniform 	mediump float _ProjectUVScale;
uniform 	mediump float _CausticFade;
uniform 	mediump float _CausticFadeExponent;
uniform 	vec4 _ReflectionSkyCubeMap_HDR;
uniform lowp sampler2D _Normal01;
uniform lowp sampler2D _Normal02;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _SceneScaledBufferBeforTransParent;
uniform lowp samplerCube _ReflectionSkyCubeMap;
uniform lowp sampler2D _SSRTexture;
uniform lowp sampler2D _DepthFoamMask;
uniform lowp sampler2D _WaterRippleTex;
uniform lowp sampler2DShadow hlslcc_zcmp_CascadeShadowMapTexture;
uniform lowp sampler2D _CascadeShadowMapTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD8;
in highp vec4 vs_TEXCOORD9;
in highp vec4 vs_TEXCOORD10;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
lowp float u_xlat10_0;
int u_xlati0;
uint u_xlatu0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec3 u_xlat10_1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
lowp vec4 u_xlat10_2;
bvec4 u_xlatb2;
mediump vec3 u_xlat16_3;
vec4 u_xlat4;
mediump vec3 u_xlat16_4;
lowp vec4 u_xlat10_4;
vec3 u_xlat5;
lowp float u_xlat10_5;
vec4 u_xlat6;
vec4 u_xlat7;
mediump vec3 u_xlat16_7;
vec4 u_xlat8;
vec3 u_xlat9;
vec3 u_xlat10;
mediump vec3 u_xlat16_10;
vec3 u_xlat11;
vec3 u_xlat12;
lowp vec3 u_xlat10_12;
vec3 u_xlat13;
vec3 u_xlat14;
vec3 u_xlat15;
mediump float u_xlat16_16;
mediump vec2 u_xlat16_17;
float u_xlat18;
vec3 u_xlat19;
mediump vec3 u_xlat16_21;
float u_xlat23;
mediump float u_xlat16_23;
bool u_xlatb23;
vec3 u_xlat25;
bool u_xlatb25;
float u_xlat26;
vec2 u_xlat36;
mediump float u_xlat16_36;
lowp float u_xlat10_36;
float u_xlat37;
lowp float u_xlat10_37;
int u_xlati37;
uint u_xlatu37;
bool u_xlatb37;
float u_xlat41;
float u_xlat42;
lowp float u_xlat10_54;
float u_xlat55;
mediump float u_xlat16_55;
mediump float u_xlat16_57;
float u_xlat59;
mediump float u_xlat16_59;
bool u_xlatb59;
float u_xlat60;
float u_xlat61;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0 = vs_TEXCOORD5.xzxz * vec4(_ProjectUVScale, _ProjectUVScale, _RippleTillingScale, _RippleTillingScale);
    u_xlat1.x = _Time.y * _Normal01_U_Speed + u_xlat0.x;
    u_xlat1.yz = _Time.yy * vec2(_Normal01_VSpeed, _Normal02_U_Speed) + u_xlat0.yx;
    u_xlat1.w = _Time.y * _Normal02_V_Speed + u_xlat0.y;
    u_xlat10_2.xyz = texture(_Normal01, u_xlat1.xy, _NormalMapBias).xyz;
    u_xlat16_2.xyz = u_xlat10_2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_3.xy = u_xlat16_2.xy * vec2(_NormalMapScale);
    u_xlat10_1.xyz = texture(_Normal02, u_xlat1.zw, _NormalMapBias).xyz;
    u_xlat16_2.w = -1.0;
    u_xlat16_4.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_2.wwz;
    u_xlat16_4.xy = u_xlat16_4.xy * vec2(_NormalMapScale);
    u_xlat16_3.z = -1.0;
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat0.x = float(1.0) / vs_TEXCOORD4.w;
    u_xlat1.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat18 = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat18 = _ZBufferParams.z * u_xlat18 + _ZBufferParams.w;
    u_xlat18 = float(1.0) / u_xlat18;
    u_xlat1.x = vs_TEXCOORD10.w + 9.99999975e-05;
    u_xlat1.x = (-u_xlat18) / u_xlat1.x;
    u_xlat19.xyz = u_xlat1.xxx * vs_TEXCOORD10.xyz;
    u_xlat5.xyz = vs_TEXCOORD10.xyz * u_xlat1.xxx + _WorldSpaceCameraPos.xyz;
    u_xlat6.xyz = (-u_xlat5.xyz) + vs_TEXCOORD5.xyz;
    u_xlat1.x = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlat6.xz = u_xlat16_3.xy * vec2(vec2(_RefractionIntensity, _RefractionIntensity));
    u_xlat0.x = u_xlat0.x * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat6.xz = u_xlat0.xx * u_xlat6.xz;
    u_xlat6.xz = u_xlat6.xz * vs_TEXCOORD4.ww;
    u_xlat0.x = u_xlat18 + (-vs_TEXCOORD4.w);
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat7.xy = u_xlat0.xx * u_xlat6.xz;
    u_xlat7.z = 0.0;
    u_xlat6.xzw = u_xlat7.xyz + vs_TEXCOORD4.xyw;
    u_xlat0.xy = u_xlat6.xz / u_xlat6.ww;
    u_xlat0.x = texture(_CameraDepthTexture, u_xlat0.xy).x;
    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat0.x = u_xlat0.x + (-vs_TEXCOORD4.w);
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat6.xzw = u_xlat0.xxx * u_xlat7.xyz + vs_TEXCOORD4.xyw;
    u_xlat0.xy = u_xlat6.xz / u_xlat6.ww;
    u_xlat0.x = texture(_CameraDepthTexture, u_xlat0.xy).x;
    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat0.x = u_xlat0.x + (-vs_TEXCOORD4.w);
    u_xlat18 = 0.100000001 / _OpacityByDepth;
    u_xlat18 = u_xlat18 * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat16_4.xz = u_xlat16_3.xy;
    u_xlat16_4.y = 1.0;
    u_xlat16_59 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);
    u_xlat16_59 = inversesqrt(u_xlat16_59);
    u_xlat16_7.xyz = u_xlat16_4.xyz * vec3(u_xlat16_59);
#ifdef UNITY_ADRENO_ES3
    u_xlatb59 = !!(0.0>=_ES_MoonDirection.y);
#else
    u_xlatb59 = 0.0>=_ES_MoonDirection.y;
#endif
    u_xlat8.xyz = (bool(u_xlatb59)) ? _ES_SunDirection.xyz : _ES_MoonDirection.xyz;
    u_xlat9.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat59 = dot(u_xlat9.xyz, u_xlat9.xyz);
    u_xlat60 = inversesqrt(u_xlat59);
    u_xlat10.xyz = vec3(u_xlat60) * u_xlat9.xyz;
    u_xlat8.xyz = u_xlat9.xyz * vec3(u_xlat60) + u_xlat8.xyz;
    u_xlat60 = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat60 = inversesqrt(u_xlat60);
    u_xlat8.xyz = vec3(u_xlat60) * u_xlat8.xyz;
    u_xlat60 = dot(u_xlat16_7.xyz, u_xlat8.xyz);
    u_xlat25.x = _Gloss * 128.0;
    u_xlat60 = max(u_xlat60, 9.99999975e-05);
    u_xlat60 = log2(u_xlat60);
    u_xlat60 = u_xlat60 * u_xlat25.x;
    u_xlat60 = exp2(u_xlat60);
    u_xlat60 = u_xlat60 * _SpecularIntensity;
    u_xlat60 = max(u_xlat60, 0.0);
    u_xlat60 = min(u_xlat60, 16.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb25 = !!(_ES_MoonDirection.y>=9.99999975e-05);
#else
    u_xlatb25 = _ES_MoonDirection.y>=9.99999975e-05;
#endif
    u_xlat25.x = u_xlatb25 ? 1.0 : float(0.0);
    u_xlat61 = _ES_MoonDirection.y + -1.0;
    u_xlat25.x = u_xlat25.x * u_xlat61 + 1.0;
    u_xlat61 = float(1.0) / _ShoreTransparency;
    u_xlat8.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat8.xyz = u_xlat8.xxx * vs_TEXCOORD6.xyz;
    u_xlat8.x = dot(u_xlat10.xyz, u_xlat8.xyz);
    u_xlat8.x = (-u_xlat8.x) + 1.0;
    u_xlat8.x = max(u_xlat8.x, 9.99999975e-05);
    u_xlat8.x = log2(u_xlat8.x);
    u_xlat26 = u_xlat8.x * _SpecularPower;
    u_xlat26 = exp2(u_xlat26);
    u_xlat9.xyz = u_xlat25.xxx * _LightColor0.xyz;
    u_xlat9.xyz = vec3(u_xlat60) * u_xlat9.xyz;
    u_xlat60 = u_xlat0.x + -1.0;
    u_xlat60 = u_xlat61 * u_xlat60;
    u_xlat60 = u_xlat60 * 0.100000001;
#ifdef UNITY_ADRENO_ES3
    u_xlat60 = min(max(u_xlat60, 0.0), 1.0);
#else
    u_xlat60 = clamp(u_xlat60, 0.0, 1.0);
#endif
    u_xlat9.xyz = vec3(u_xlat60) * u_xlat9.xyz;
    u_xlat60 = u_xlat0.x * u_xlat61;
#ifdef UNITY_ADRENO_ES3
    u_xlat60 = min(max(u_xlat60, 0.0), 1.0);
#else
    u_xlat60 = clamp(u_xlat60, 0.0, 1.0);
#endif
    u_xlat60 = max(u_xlat60, 9.99999975e-05);
    u_xlat60 = log2(u_xlat60);
    u_xlat60 = u_xlat60 * _ShoreFade;
    u_xlat60 = exp2(u_xlat60);
    u_xlat11.xyz = _ShallowColor.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat11.xyz = vec3(u_xlat60) * u_xlat11.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat6.xz = u_xlat6.xz / vs_TEXCOORD4.ww;
    u_xlat10_12.xyz = texture(_SceneScaledBufferBeforTransParent, u_xlat6.xz).xyz;
    u_xlat6.x = u_xlat1.x * _CausticDistortionValue;
    u_xlat6.xz = u_xlat6.xx * u_xlat16_7.xz;
    u_xlat7.z = _Time.y * _CausticSpeed;
    u_xlat6.xz = u_xlat5.xz * vec2(_CausticUVScale) + u_xlat6.xz;
    u_xlat13.x = _Normal01_U_Speed * 25.0;
    u_xlat13.y = _Normal01_VSpeed * 25.0;
    u_xlat7.xy = u_xlat7.zz * u_xlat13.xy + u_xlat6.xz;
    u_xlat13.x = dot(u_xlat7.xyz, vec3(-2.0, 3.0, 1.0));
    u_xlat13.y = dot(u_xlat7.xyz, vec3(-1.0, -2.0, 2.0));
    u_xlat13.z = dot(u_xlat7.xzy, vec3(2.0, 2.0, 1.0));
    u_xlat7.xyz = u_xlat13.xyz * vec3(0.400000006, 0.400000006, 0.400000006);
    u_xlat14.x = dot(u_xlat7.xyz, vec3(-2.0, 3.0, 1.0));
    u_xlat14.y = dot(u_xlat7.xyz, vec3(-1.0, -2.0, 2.0));
    u_xlat14.z = dot(u_xlat7.xzy, vec3(2.0, 2.0, 1.0));
    u_xlat7.xyz = u_xlat14.xyz * vec3(0.300000012, 0.300000012, 0.300000012);
    u_xlat6.x = dot(u_xlat7.xyz, vec3(-2.0, 3.0, 1.0));
    u_xlat6.z = dot(u_xlat7.xyz, vec3(-1.0, -2.0, 2.0));
    u_xlat7.x = dot(u_xlat7.xzy, vec3(2.0, 2.0, 1.0));
    u_xlat25.xyz = fract(u_xlat13.xyz);
    u_xlat25.xyz = (-u_xlat25.xyz) + vec3(0.5, 0.5, 0.5);
    u_xlat25.x = dot(u_xlat25.xyz, u_xlat25.xyz);
    u_xlat13.xyz = fract(u_xlat14.xyz);
    u_xlat13.xyz = (-u_xlat13.xyz) + vec3(0.5, 0.5, 0.5);
    u_xlat25.y = dot(u_xlat13.xyz, u_xlat13.xyz);
    u_xlat25.xy = sqrt(u_xlat25.xy);
    u_xlat25.x = min(u_xlat25.y, u_xlat25.x);
    u_xlat13.xy = fract(u_xlat6.xz);
    u_xlat13.z = fract(u_xlat7.x);
    u_xlat7.xzw = (-u_xlat13.xyz) + vec3(0.5, 0.5, 0.5);
    u_xlat6.x = dot(u_xlat7.xzw, u_xlat7.xzw);
    u_xlat6.x = sqrt(u_xlat6.x);
    u_xlat6.x = min(u_xlat6.x, u_xlat25.x);
    u_xlat6.x = log2(u_xlat6.x);
    u_xlat6.x = u_xlat6.x * 7.0;
    u_xlat6.x = exp2(u_xlat6.x);
    u_xlat6.x = u_xlat6.x * 25.0;
    u_xlat16_4.xy = vec2(float(_CausticDepth) + float(9.99999975e-05), float(_CausticDistance) + float(9.99999975e-05));
    u_xlat42 = u_xlat6.y / u_xlat16_4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat42 = min(max(u_xlat42, 0.0), 1.0);
#else
    u_xlat42 = clamp(u_xlat42, 0.0, 1.0);
#endif
    u_xlat19.x = dot(u_xlat19.xyz, u_xlat19.xyz);
    u_xlat19.x = sqrt(u_xlat19.x);
    u_xlat19.x = u_xlat19.x / u_xlat16_4.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat19.x = min(max(u_xlat19.x, 0.0), 1.0);
#else
    u_xlat19.x = clamp(u_xlat19.x, 0.0, 1.0);
#endif
    u_xlat19.x = (-u_xlat19.x) + 1.0;
    u_xlat19.x = u_xlat19.x * u_xlat42;
    u_xlat7.xyz = u_xlat5.xyz + (-unity_ShadowSplitSpheres[0].xyz);
    u_xlat13.xyz = u_xlat5.xyz + (-unity_ShadowSplitSpheres[1].xyz);
    u_xlat14.xyz = u_xlat5.xyz + (-unity_ShadowSplitSpheres[2].xyz);
    u_xlat15.xyz = u_xlat5.xyz + (-unity_ShadowSplitSpheres[3].xyz);
    u_xlat2.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat2.y = dot(u_xlat13.xyz, u_xlat13.xyz);
    u_xlat2.z = dot(u_xlat14.xyz, u_xlat14.xyz);
    u_xlat2.w = dot(u_xlat15.xyz, u_xlat15.xyz);
    u_xlatb2 = lessThan(u_xlat2, unity_ShadowSplitSqRadii);
    u_xlat2 = mix(vec4(0.0, 0.0, 0.0, 0.0), vec4(1.0, 1.0, 1.0, 1.0), vec4(u_xlatb2));
    u_xlat16_57 = u_xlat2.y + u_xlat2.x;
    u_xlat16_4.x = u_xlat2.z + u_xlat16_57;
    u_xlat7.x = -0.0;
    u_xlat7.y = (-u_xlat2.x);
    u_xlat7.z = (-u_xlat16_57);
    u_xlat7.w = (-u_xlat16_4.x);
    u_xlat2 = u_xlat2 + u_xlat7;
    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat16_57 = dot(u_xlat2, vec4(1.0, 1.0, 1.0, 1.0));
#ifdef UNITY_ADRENO_ES3
    u_xlatb37 = !!(u_xlat16_57>=0.5);
#else
    u_xlatb37 = u_xlat16_57>=0.5;
#endif
    if(u_xlatb37){
        u_xlat37 = dot(u_xlat2.yzw, vec3(1.0, 2.0, 3.0));
        u_xlat37 = min(u_xlat37, 3.0);
        u_xlatu37 = uint(u_xlat37);
        u_xlat5.xyz = u_xlat5.xyz + (-unity_ShadowPos[int(u_xlatu37)].xyz);
        u_xlati37 = int(u_xlatu37) << 2;
        u_xlat7.xyz = u_xlat5.yyy * hlslcc_mtx4x4unity_WorldToShadow[(u_xlati37 + 1)].xyz;
        u_xlat7.xyz = hlslcc_mtx4x4unity_WorldToShadow[u_xlati37].xyz * u_xlat5.xxx + u_xlat7.xyz;
        u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToShadow[(u_xlati37 + 2)].xyz * u_xlat5.zzz + u_xlat7.xyz;
        u_xlat5.xyz = u_xlat5.xyz + hlslcc_mtx4x4unity_WorldToShadow[(u_xlati37 + 3)].xyz;
        vec3 txVec0 = vec3(u_xlat5.xy,u_xlat5.z);
        u_xlat10_37 = textureLod(hlslcc_zcmp_CascadeShadowMapTexture, txVec0, 0.0);
        u_xlat16_55 = (-_LightShadowData.x) + 1.0;
        u_xlat37 = u_xlat10_37 * u_xlat16_55 + _LightShadowData.x;
    } else {
        u_xlat37 = 1.0;
    //ENDIF
    }
    u_xlat19.x = u_xlat37 * u_xlat19.x;
    u_xlat16_4.xyz = _LightColor0.xyz * _CausticColor.xyz;
    u_xlat16_4.xyz = u_xlat6.xxx * u_xlat16_4.xyz;
    u_xlat16_4.xyz = u_xlat19.xxx * u_xlat16_4.xyz;
    u_xlat16_57 = _CausticFade + 9.99999975e-05;
    u_xlat1.x = u_xlat1.x / u_xlat16_57;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.x = log2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _CausticFadeExponent;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat1.x = (-u_xlat1.x) + 1.0;
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat1.xxx + vec3(1.0, 1.0, 1.0);
    u_xlat16_1.xyz = u_xlat16_4.xyz * u_xlat10_12.xyz;
    u_xlat5.xyz = u_xlat16_1.xyz * u_xlat11.xyz;
    u_xlat55 = 0.100000001 / _DeepColorDepth;
    u_xlat55 = u_xlat0.x * u_xlat55;
#ifdef UNITY_ADRENO_ES3
    u_xlat55 = min(max(u_xlat55, 0.0), 1.0);
#else
    u_xlat55 = clamp(u_xlat55, 0.0, 1.0);
#endif
    u_xlat55 = max(u_xlat55, 9.99999975e-05);
    u_xlat55 = log2(u_xlat55);
    u_xlat55 = u_xlat55 * _DeepColorFade;
    u_xlat55 = exp2(u_xlat55);
    u_xlat7.xyz = (-u_xlat11.xyz) * u_xlat16_1.xyz + _DeepColor.xyz;
    u_xlat7.xyz = vec3(u_xlat55) * u_xlat7.xyz + u_xlat5.xyz;
    u_xlat12.xyz = u_xlat16_3.xyz * _DistortionIntensity.xyz;
    u_xlat13.x = vs_TEXCOORD8.x;
    u_xlat13.y = vs_TEXCOORD9.x;
    u_xlat13.z = vs_TEXCOORD6.x;
    u_xlat13.x = dot(u_xlat13.xyz, u_xlat12.xyz);
    u_xlat14.x = vs_TEXCOORD8.y;
    u_xlat14.y = vs_TEXCOORD9.y;
    u_xlat14.z = vs_TEXCOORD6.y;
    u_xlat13.y = dot(u_xlat14.xyz, u_xlat12.xyz);
    u_xlat14.x = vs_TEXCOORD8.z;
    u_xlat14.y = vs_TEXCOORD9.z;
    u_xlat14.z = vs_TEXCOORD6.z;
    u_xlat13.z = dot(u_xlat14.xyz, u_xlat12.xyz);
    u_xlat55 = dot(u_xlat13.xyz, u_xlat13.xyz);
    u_xlat55 = inversesqrt(u_xlat55);
    u_xlat13.xyz = vec3(u_xlat55) * u_xlat13.xyz;
    u_xlat55 = dot((-u_xlat10.xyz), u_xlat13.xyz);
    u_xlat55 = u_xlat55 + u_xlat55;
    u_xlat10.xyz = u_xlat13.xyz * (-vec3(u_xlat55)) + (-u_xlat10.xyz);
    u_xlat10_2 = textureLod(_ReflectionSkyCubeMap, u_xlat10.xyz, 0.0);
    u_xlat16_3.x = u_xlat10_2.w + -1.0;
    u_xlat16_3.x = _ReflectionSkyCubeMap_HDR.w * u_xlat16_3.x + 1.0;
    u_xlat16_3.x = log2(u_xlat16_3.x);
    u_xlat16_3.x = u_xlat16_3.x * _ReflectionSkyCubeMap_HDR.y;
    u_xlat16_3.x = exp2(u_xlat16_3.x);
    u_xlat16_3.x = u_xlat16_3.x * _ReflectionSkyCubeMap_HDR.x;
    u_xlat16_21.xyz = u_xlat10_2.xyz * u_xlat16_3.xxx;
    u_xlat6.xz = u_xlat12.xy * vec2(_SSRDistortion);
    u_xlat55 = float(1.0) / _SSRDistortion_Shore;
    u_xlat55 = u_xlat0.x * u_xlat55;
#ifdef UNITY_ADRENO_ES3
    u_xlat55 = min(max(u_xlat55, 0.0), 1.0);
#else
    u_xlat55 = clamp(u_xlat55, 0.0, 1.0);
#endif
    u_xlat6.xz = vec2(u_xlat55) * u_xlat6.xz;
    u_xlat6.xz = u_xlat6.xz * vs_TEXCOORD4.ww + vs_TEXCOORD4.xy;
    u_xlat6.xz = u_xlat6.xz / vs_TEXCOORD4.ww;
    u_xlat10_4 = texture(_SSRTexture, u_xlat6.xz).wxyz;
    u_xlat16_10.xyz = (-u_xlat16_3.xxx) * u_xlat10_2.xyz + u_xlat10_4.yzw;
    u_xlat10.xyz = u_xlat16_10.xyz * vec3(vec3(_SSRIntensity, _SSRIntensity, _SSRIntensity));
    u_xlat16_4.x = u_xlat10_4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat10.xyz = u_xlat16_4.xxx * u_xlat10.xyz + u_xlat16_21.xyz;
    u_xlat55 = u_xlat8.x * _FresnelPower;
    u_xlat55 = exp2(u_xlat55);
    u_xlat55 = u_xlat55 * _ReflectionIntensity;
    u_xlat6.x = float(1.0) / _ShoreReflectionFade;
    u_xlat0.x = u_xlat0.x * u_xlat6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x * u_xlat55;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat8.xzw = (-u_xlat7.xyz) + u_xlat10.xyz;
    u_xlat7.xyz = u_xlat0.xxx * u_xlat8.xzw + u_xlat7.xyz;
    u_xlat1.xyz = (-u_xlat11.xyz) * u_xlat16_1.xyz + u_xlat7.xyz;
    u_xlat1.xyz = vec3(u_xlat60) * u_xlat1.xyz + u_xlat5.xyz;
    u_xlat0.x = (-vs_TEXCOORD5.y) * _WorldSpaceLightPos0.w + _WorldSpaceLightPos0.y;
    u_xlat16_3.x = max(u_xlat0.x, 0.0);
    u_xlat5.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowSplitSpheres[0].xyz);
    u_xlat6.xzw = vs_TEXCOORD5.xyz + (-unity_ShadowSplitSpheres[1].xyz);
    u_xlat7.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowSplitSpheres[2].xyz);
    u_xlat8.xzw = vs_TEXCOORD5.xyz + (-unity_ShadowSplitSpheres[3].xyz);
    u_xlat2.x = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat2.y = dot(u_xlat6.xzw, u_xlat6.xzw);
    u_xlat2.z = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat2.w = dot(u_xlat8.xzw, u_xlat8.xzw);
    u_xlatb2 = lessThan(u_xlat2, unity_ShadowSplitSqRadii);
    u_xlat2 = mix(vec4(0.0, 0.0, 0.0, 0.0), vec4(1.0, 1.0, 1.0, 1.0), vec4(u_xlatb2));
    u_xlat16_21.x = u_xlat2.y + u_xlat2.x;
    u_xlat16_21.y = u_xlat2.z + u_xlat16_21.x;
    u_xlat4.x = -0.0;
    u_xlat4.y = (-u_xlat2.x);
    u_xlat4.zw = (-u_xlat16_21.xy);
    u_xlat2 = u_xlat2 + u_xlat4;
    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat16_21.x = dot(u_xlat2, vec4(1.0, 1.0, 1.0, 1.0));
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(u_xlat16_21.x>=0.5);
#else
    u_xlatb0.x = u_xlat16_21.x>=0.5;
#endif
    if(u_xlatb0.x){
        u_xlat0.x = dot(u_xlat2.yzw, vec3(1.0, 2.0, 3.0));
        u_xlat0.x = min(u_xlat0.x, 3.0);
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat5.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowPos[int(u_xlatu0)].xyz);
        u_xlati0 = int(u_xlatu0) << 2;
        u_xlat6.xzw = u_xlat5.yyy * hlslcc_mtx4x4unity_WorldToShadow[(u_xlati0 + 1)].xyz;
        u_xlat6.xzw = hlslcc_mtx4x4unity_WorldToShadow[u_xlati0].xyz * u_xlat5.xxx + u_xlat6.xzw;
        u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToShadow[(u_xlati0 + 2)].xyz * u_xlat5.zzz + u_xlat6.xzw;
        u_xlat5.xyz = u_xlat5.xyz + hlslcc_mtx4x4unity_WorldToShadow[(u_xlati0 + 3)].xyz;
        vec3 txVec1 = vec3(u_xlat5.xy,u_xlat5.z);
        u_xlat10_0 = textureLod(hlslcc_zcmp_CascadeShadowMapTexture, txVec1, 0.0);
        u_xlat16_55 = (-_LightShadowData.x) + 1.0;
        u_xlat0.x = u_xlat10_0 * u_xlat16_55 + _LightShadowData.x;
    } else {
        u_xlat0.x = 1.0;
    //ENDIF
    }
    u_xlat16_3.xyz = u_xlat16_3.xxx * _LightColor0.xyz;
    u_xlat5.xyz = u_xlat16_3.xyz * u_xlat0.xxx + vs_TEXCOORD1.xyz;
    u_xlat16_3.xyz = u_xlat5.xyz * vec3(0.300000012, 0.300000012, 0.300000012) + vec3(0.699999988, 0.699999988, 0.699999988);
    u_xlat0.x = sqrt(u_xlat59);
    u_xlat16_57 = u_xlat0.x + (-_DepthFoamCloseFadeOffset);
    u_xlat16_57 = u_xlat16_57 / _DepthFoamCloseFadeDistance;
    u_xlat16_16 = vs_COLOR0.x * _DepthFoamExtent;
    u_xlat55 = max(u_xlat6.y, 0.0);
    u_xlat55 = min(u_xlat16_16, u_xlat55);
    u_xlat16_16 = _DepthFoamExtent * vs_COLOR0.x + 9.99999975e-05;
    u_xlat55 = u_xlat55 / u_xlat16_16;
    u_xlat55 = (-u_xlat55) + 1.0;
    u_xlat5.xy = vec2(_Time.y * _DepthFoamMask_ST.z, _Time.y * _DepthFoamMask_ST.w);
    u_xlat5.xy = fract(u_xlat5.xy);
    u_xlat5.xy = _DepthFoamMask_ST.xy * vs_TEXCOORD5.xz + u_xlat5.xy;
    u_xlat10_5 = texture(_DepthFoamMask, u_xlat5.xy).x;
    u_xlat23 = vs_TEXCOORD5.z + vs_TEXCOORD5.x;
    u_xlat23 = u_xlat23 * _DepthFoamPhaseScale;
    u_xlat23 = _DepthFoamSpeed * _Time.y + u_xlat23;
    u_xlat41 = (-u_xlat55) + 1.0;
    u_xlat16_16 = _DepthFoamSubdivision * u_xlat55 + u_xlat23;
    u_xlat16_16 = sin(u_xlat16_16);
    u_xlat16_16 = _DepthFoamWidth * u_xlat55 + u_xlat16_16;
    u_xlat16_23 = u_xlat10_5 * 2.0 + -1.0;
    u_xlat23 = u_xlat16_23 + u_xlat16_16;
#ifdef UNITY_ADRENO_ES3
    u_xlatb23 = !!(u_xlat23>=u_xlat41);
#else
    u_xlatb23 = u_xlat23>=u_xlat41;
#endif
    u_xlat23 = u_xlatb23 ? 1.0 : float(0.0);
    u_xlat5.x = u_xlat23 * u_xlat10_5;
    u_xlat16_16 = _DepthFoamDistance + 9.99999975e-05;
    u_xlat16_16 = u_xlat0.x / u_xlat16_16;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat16_0 = (-u_xlat16_16) + 1.0;
    u_xlat16_16 = vs_COLOR0.y * _DepthFoamColor.w;
    u_xlat16_57 = u_xlat16_57 * u_xlat16_16;
    u_xlat16_57 = u_xlat5.x * u_xlat16_57;
    u_xlat16_57 = u_xlat55 * u_xlat16_57;
    u_xlat16_57 = u_xlat16_0 * u_xlat16_57;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_57 = min(max(u_xlat16_57, 0.0), 1.0);
#else
    u_xlat16_57 = clamp(u_xlat16_57, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = _DepthFoamColor.xyz * u_xlat16_3.xyz + (-u_xlat1.xyz);
    u_xlat16_3.xyz = vec3(u_xlat16_57) * u_xlat16_3.xyz + u_xlat1.xyz;
    u_xlat16_0 = max(_LightColor0.w, 0.5);
    u_xlat1.xyz = u_xlat9.xyz * vec3(u_xlat26) + u_xlat16_3.xyz;
    u_xlat36.xy = fract(u_xlat0.zw);
    u_xlat16_3.xy = u_xlat36.xy * vec2(1.14999998, 1.14999998);
    u_xlat16_16 = sin(_Ripple02Rotate);
    u_xlat16_17.x = cos(_Ripple02Rotate);
    u_xlat5.x = (-u_xlat16_16);
    u_xlat16_17.y = u_xlat16_16;
    u_xlat6.x = dot(u_xlat16_3.xy, u_xlat16_17.xy);
    u_xlat5.y = u_xlat16_17.x;
    u_xlat6.y = dot(u_xlat16_3.xy, u_xlat5.xy);
    u_xlat10_36 = texture(_WaterRippleTex, u_xlat36.xy).x;
    u_xlat10_54 = texture(_WaterRippleTex, u_xlat6.xy).x;
    u_xlat16_36 = u_xlat10_54 + u_xlat10_36;
    u_xlat36.x = u_xlat16_36 * u_xlat18;
    u_xlat5.xyz = _ES_MainLightColor.xyz * vec3(u_xlat16_0) + (-u_xlat1.xyz);
    u_xlat1.xyz = u_xlat36.xxx * u_xlat5.xyz + u_xlat1.xyz;
    u_xlat1.w = u_xlat18 * vs_COLOR0.w;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "MHY_SHADER_HIGH" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
uniform 	vec4 hlslcc_mtx4x4_mhyJitteredVP[4];
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
out highp vec4 vs_TEXCOORD9;
out highp vec4 vs_TEXCOORD10;
float u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec4 u_xlat8;
vec3 u_xlat9;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat9.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4_mhyJitteredVP[1];
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[3] * u_xlat2.wwww + u_xlat1;
    u_xlat3.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    u_xlat3.xyw = u_xlat1.xyw;
    gl_Position = u_xlat3;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD1.w = 1.0;
    u_xlat4.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat4.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat4.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat1.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
    u_xlat16_5.x = u_xlat4.y * u_xlat4.y;
    u_xlat16_5.x = u_xlat4.x * u_xlat4.x + (-u_xlat16_5.x);
    u_xlat16_6 = u_xlat4.yzzx * u_xlat4.xyzz;
    u_xlat16_7.x = dot(unity_SHBr, u_xlat16_6);
    u_xlat16_7.y = dot(unity_SHBg, u_xlat16_6);
    u_xlat16_7.z = dot(unity_SHBb, u_xlat16_6);
    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_7.xyz;
    u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat4.w = 1.0;
    u_xlat16_6.x = dot(unity_SHAr, u_xlat4);
    u_xlat16_6.y = dot(unity_SHAg, u_xlat4);
    u_xlat16_6.z = dot(unity_SHAb, u_xlat4);
    u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_6.xyz;
    vs_TEXCOORD1.xyz = u_xlat16_5.xyz;
    u_xlat1.x = u_xlat3.y * _ProjectionParams.x;
    u_xlat8.w = u_xlat1.x * 0.5;
    u_xlat8.xz = u_xlat3.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.z = u_xlat1.z;
    u_xlat3.xy = u_xlat8.zz + u_xlat8.xw;
    vs_TEXCOORD2 = u_xlat3;
    vs_TEXCOORD4.xyw = u_xlat3.xyw;
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD3.w = 0.0;
    u_xlat1.x = u_xlat2.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat2.x + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat2.z + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat2.w + u_xlat1.x;
    vs_TEXCOORD3.z = (-u_xlat1.x);
    vs_TEXCOORD5.w = 0.0;
    vs_TEXCOORD5.xyz = u_xlat9.xyz;
    u_xlat9.xyz = (-u_xlat9.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD6.w = 0.0;
    vs_TEXCOORD6.xyz = u_xlat4.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].www + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * in_POSITION0.yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.zzz + u_xlat1.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.www + u_xlat1.xyz;
    vs_TEXCOORD7.xyz = u_xlat1.xyz * vec3(-1.0, -1.0, 1.0);
    vs_TEXCOORD7.w = 0.0;
    u_xlat1.xyz = in_TANGENT0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat0 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0 = inversesqrt(u_xlat0);
    u_xlat1.xyz = vec3(u_xlat0) * u_xlat1.xyz;
    vs_TEXCOORD8.xyz = u_xlat1.xyz;
    vs_TEXCOORD8.w = 0.0;
    u_xlat2.xyz = u_xlat1.yzx * u_xlat4.zxy;
    u_xlat1.xyz = u_xlat4.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
    u_xlat0 = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD9.xyz = vec3(u_xlat0) * u_xlat1.xyz;
    vs_TEXCOORD9.w = 0.0;
    u_xlat0 = u_xlat9.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat9.x + u_xlat0;
    vs_TEXCOORD10.w = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat9.z + u_xlat0;
    vs_TEXCOORD10.xyz = u_xlat9.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowPos[4];
uniform 	mediump vec4 _LightColor0;
uniform 	mediump float _CausticUVScale;
uniform 	mediump float _CausticSpeed;
uniform 	mediump vec4 _CausticColor;
uniform 	mediump float _CausticDepth;
uniform 	mediump float _CausticDistance;
uniform 	mediump float _CausticDistortionValue;
uniform 	mediump vec4 _DepthFoamMask_ST;
uniform 	mediump float _DepthFoamSpeed;
uniform 	mediump vec4 _DepthFoamColor;
uniform 	mediump float _DepthFoamExtent;
uniform 	mediump float _DepthFoamDistance;
uniform 	mediump float _DepthFoamSubdivision;
uniform 	mediump float _DepthFoamWidth;
uniform 	mediump float _DepthFoamPhaseScale;
uniform 	mediump float _DepthFoamCloseFadeOffset;
uniform 	mediump float _DepthFoamCloseFadeDistance;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _NormalMapScale;
uniform 	float _Normal01_U_Speed;
uniform 	float _Normal01_VSpeed;
uniform 	float _NormalMapBias;
uniform 	float _Normal02_U_Speed;
uniform 	float _Normal02_V_Speed;
uniform 	float _RefractionIntensity;
uniform 	float _OpacityByDepth;
uniform 	float _SpecularIntensity;
uniform 	vec3 _ES_MoonDirection;
uniform 	vec3 _ES_SunDirection;
uniform 	float _Gloss;
uniform 	float _ShoreTransparency;
uniform 	float _SpecularPower;
uniform 	vec4 _ShallowColor;
uniform 	float _ShoreFade;
uniform 	vec4 _DeepColor;
uniform 	float _DeepColorDepth;
uniform 	float _DeepColorFade;
uniform 	vec4 _DistortionIntensity;
uniform 	float _SSRDistortion;
uniform 	float _SSRDistortion_Shore;
uniform 	float _SSRIntensity;
uniform 	float _ReflectionIntensity;
uniform 	float _FresnelPower;
uniform 	float _ShoreReflectionFade;
uniform 	vec3 _ES_MainLightColor;
uniform 	mediump float _RippleTillingScale;
uniform 	mediump float _Ripple02Rotate;
uniform 	mediump float _ProjectUVScale;
uniform 	mediump float _CausticFade;
uniform 	mediump float _CausticFadeExponent;
uniform 	vec4 _ReflectionSkyCubeMap_HDR;
uniform lowp sampler2D _Normal01;
uniform lowp sampler2D _Normal02;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _SceneScaledBufferBeforTransParent;
uniform lowp samplerCube _ReflectionSkyCubeMap;
uniform lowp sampler2D _SSRTexture;
uniform lowp sampler2D _DepthFoamMask;
uniform lowp sampler2D _WaterRippleTex;
uniform lowp sampler2DShadow hlslcc_zcmp_CascadeShadowMapTexture;
uniform lowp sampler2D _CascadeShadowMapTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD8;
in highp vec4 vs_TEXCOORD9;
in highp vec4 vs_TEXCOORD10;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
lowp float u_xlat10_0;
int u_xlati0;
uint u_xlatu0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec3 u_xlat10_1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
lowp vec4 u_xlat10_2;
bvec4 u_xlatb2;
mediump vec3 u_xlat16_3;
vec4 u_xlat4;
mediump vec3 u_xlat16_4;
lowp vec4 u_xlat10_4;
vec3 u_xlat5;
lowp float u_xlat10_5;
vec4 u_xlat6;
vec4 u_xlat7;
mediump vec3 u_xlat16_7;
vec4 u_xlat8;
vec3 u_xlat9;
vec3 u_xlat10;
mediump vec3 u_xlat16_10;
vec3 u_xlat11;
vec3 u_xlat12;
lowp vec3 u_xlat10_12;
vec3 u_xlat13;
vec3 u_xlat14;
vec3 u_xlat15;
mediump float u_xlat16_16;
mediump vec2 u_xlat16_17;
float u_xlat18;
vec3 u_xlat19;
mediump vec3 u_xlat16_21;
float u_xlat23;
mediump float u_xlat16_23;
bool u_xlatb23;
vec3 u_xlat25;
bool u_xlatb25;
float u_xlat26;
vec2 u_xlat36;
mediump float u_xlat16_36;
lowp float u_xlat10_36;
float u_xlat37;
lowp float u_xlat10_37;
int u_xlati37;
uint u_xlatu37;
bool u_xlatb37;
float u_xlat41;
float u_xlat42;
lowp float u_xlat10_54;
float u_xlat55;
mediump float u_xlat16_55;
mediump float u_xlat16_57;
float u_xlat59;
mediump float u_xlat16_59;
bool u_xlatb59;
float u_xlat60;
float u_xlat61;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0 = vs_TEXCOORD5.xzxz * vec4(_ProjectUVScale, _ProjectUVScale, _RippleTillingScale, _RippleTillingScale);
    u_xlat1.x = _Time.y * _Normal01_U_Speed + u_xlat0.x;
    u_xlat1.yz = _Time.yy * vec2(_Normal01_VSpeed, _Normal02_U_Speed) + u_xlat0.yx;
    u_xlat1.w = _Time.y * _Normal02_V_Speed + u_xlat0.y;
    u_xlat10_2.xyz = texture(_Normal01, u_xlat1.xy, _NormalMapBias).xyz;
    u_xlat16_2.xyz = u_xlat10_2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_3.xy = u_xlat16_2.xy * vec2(_NormalMapScale);
    u_xlat10_1.xyz = texture(_Normal02, u_xlat1.zw, _NormalMapBias).xyz;
    u_xlat16_2.w = -1.0;
    u_xlat16_4.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_2.wwz;
    u_xlat16_4.xy = u_xlat16_4.xy * vec2(_NormalMapScale);
    u_xlat16_3.z = -1.0;
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat0.x = float(1.0) / vs_TEXCOORD4.w;
    u_xlat1.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat18 = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat18 = _ZBufferParams.z * u_xlat18 + _ZBufferParams.w;
    u_xlat18 = float(1.0) / u_xlat18;
    u_xlat1.x = vs_TEXCOORD10.w + 9.99999975e-05;
    u_xlat1.x = (-u_xlat18) / u_xlat1.x;
    u_xlat19.xyz = u_xlat1.xxx * vs_TEXCOORD10.xyz;
    u_xlat5.xyz = vs_TEXCOORD10.xyz * u_xlat1.xxx + _WorldSpaceCameraPos.xyz;
    u_xlat6.xyz = (-u_xlat5.xyz) + vs_TEXCOORD5.xyz;
    u_xlat1.x = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlat6.xz = u_xlat16_3.xy * vec2(vec2(_RefractionIntensity, _RefractionIntensity));
    u_xlat0.x = u_xlat0.x * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat6.xz = u_xlat0.xx * u_xlat6.xz;
    u_xlat6.xz = u_xlat6.xz * vs_TEXCOORD4.ww;
    u_xlat0.x = u_xlat18 + (-vs_TEXCOORD4.w);
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat7.xy = u_xlat0.xx * u_xlat6.xz;
    u_xlat7.z = 0.0;
    u_xlat6.xzw = u_xlat7.xyz + vs_TEXCOORD4.xyw;
    u_xlat0.xy = u_xlat6.xz / u_xlat6.ww;
    u_xlat0.x = texture(_CameraDepthTexture, u_xlat0.xy).x;
    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat0.x = u_xlat0.x + (-vs_TEXCOORD4.w);
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat6.xzw = u_xlat0.xxx * u_xlat7.xyz + vs_TEXCOORD4.xyw;
    u_xlat0.xy = u_xlat6.xz / u_xlat6.ww;
    u_xlat0.x = texture(_CameraDepthTexture, u_xlat0.xy).x;
    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat0.x = u_xlat0.x + (-vs_TEXCOORD4.w);
    u_xlat18 = 0.100000001 / _OpacityByDepth;
    u_xlat18 = u_xlat18 * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat16_4.xz = u_xlat16_3.xy;
    u_xlat16_4.y = 1.0;
    u_xlat16_59 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);
    u_xlat16_59 = inversesqrt(u_xlat16_59);
    u_xlat16_7.xyz = u_xlat16_4.xyz * vec3(u_xlat16_59);
#ifdef UNITY_ADRENO_ES3
    u_xlatb59 = !!(0.0>=_ES_MoonDirection.y);
#else
    u_xlatb59 = 0.0>=_ES_MoonDirection.y;
#endif
    u_xlat8.xyz = (bool(u_xlatb59)) ? _ES_SunDirection.xyz : _ES_MoonDirection.xyz;
    u_xlat9.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat59 = dot(u_xlat9.xyz, u_xlat9.xyz);
    u_xlat60 = inversesqrt(u_xlat59);
    u_xlat10.xyz = vec3(u_xlat60) * u_xlat9.xyz;
    u_xlat8.xyz = u_xlat9.xyz * vec3(u_xlat60) + u_xlat8.xyz;
    u_xlat60 = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat60 = inversesqrt(u_xlat60);
    u_xlat8.xyz = vec3(u_xlat60) * u_xlat8.xyz;
    u_xlat60 = dot(u_xlat16_7.xyz, u_xlat8.xyz);
    u_xlat25.x = _Gloss * 128.0;
    u_xlat60 = max(u_xlat60, 9.99999975e-05);
    u_xlat60 = log2(u_xlat60);
    u_xlat60 = u_xlat60 * u_xlat25.x;
    u_xlat60 = exp2(u_xlat60);
    u_xlat60 = u_xlat60 * _SpecularIntensity;
    u_xlat60 = max(u_xlat60, 0.0);
    u_xlat60 = min(u_xlat60, 16.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb25 = !!(_ES_MoonDirection.y>=9.99999975e-05);
#else
    u_xlatb25 = _ES_MoonDirection.y>=9.99999975e-05;
#endif
    u_xlat25.x = u_xlatb25 ? 1.0 : float(0.0);
    u_xlat61 = _ES_MoonDirection.y + -1.0;
    u_xlat25.x = u_xlat25.x * u_xlat61 + 1.0;
    u_xlat61 = float(1.0) / _ShoreTransparency;
    u_xlat8.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat8.xyz = u_xlat8.xxx * vs_TEXCOORD6.xyz;
    u_xlat8.x = dot(u_xlat10.xyz, u_xlat8.xyz);
    u_xlat8.x = (-u_xlat8.x) + 1.0;
    u_xlat8.x = max(u_xlat8.x, 9.99999975e-05);
    u_xlat8.x = log2(u_xlat8.x);
    u_xlat26 = u_xlat8.x * _SpecularPower;
    u_xlat26 = exp2(u_xlat26);
    u_xlat9.xyz = u_xlat25.xxx * _LightColor0.xyz;
    u_xlat9.xyz = vec3(u_xlat60) * u_xlat9.xyz;
    u_xlat60 = u_xlat0.x + -1.0;
    u_xlat60 = u_xlat61 * u_xlat60;
    u_xlat60 = u_xlat60 * 0.100000001;
#ifdef UNITY_ADRENO_ES3
    u_xlat60 = min(max(u_xlat60, 0.0), 1.0);
#else
    u_xlat60 = clamp(u_xlat60, 0.0, 1.0);
#endif
    u_xlat9.xyz = vec3(u_xlat60) * u_xlat9.xyz;
    u_xlat60 = u_xlat0.x * u_xlat61;
#ifdef UNITY_ADRENO_ES3
    u_xlat60 = min(max(u_xlat60, 0.0), 1.0);
#else
    u_xlat60 = clamp(u_xlat60, 0.0, 1.0);
#endif
    u_xlat60 = max(u_xlat60, 9.99999975e-05);
    u_xlat60 = log2(u_xlat60);
    u_xlat60 = u_xlat60 * _ShoreFade;
    u_xlat60 = exp2(u_xlat60);
    u_xlat11.xyz = _ShallowColor.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat11.xyz = vec3(u_xlat60) * u_xlat11.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat6.xz = u_xlat6.xz / vs_TEXCOORD4.ww;
    u_xlat10_12.xyz = texture(_SceneScaledBufferBeforTransParent, u_xlat6.xz).xyz;
    u_xlat6.x = u_xlat1.x * _CausticDistortionValue;
    u_xlat6.xz = u_xlat6.xx * u_xlat16_7.xz;
    u_xlat7.z = _Time.y * _CausticSpeed;
    u_xlat6.xz = u_xlat5.xz * vec2(_CausticUVScale) + u_xlat6.xz;
    u_xlat13.x = _Normal01_U_Speed * 25.0;
    u_xlat13.y = _Normal01_VSpeed * 25.0;
    u_xlat7.xy = u_xlat7.zz * u_xlat13.xy + u_xlat6.xz;
    u_xlat13.x = dot(u_xlat7.xyz, vec3(-2.0, 3.0, 1.0));
    u_xlat13.y = dot(u_xlat7.xyz, vec3(-1.0, -2.0, 2.0));
    u_xlat13.z = dot(u_xlat7.xzy, vec3(2.0, 2.0, 1.0));
    u_xlat7.xyz = u_xlat13.xyz * vec3(0.400000006, 0.400000006, 0.400000006);
    u_xlat14.x = dot(u_xlat7.xyz, vec3(-2.0, 3.0, 1.0));
    u_xlat14.y = dot(u_xlat7.xyz, vec3(-1.0, -2.0, 2.0));
    u_xlat14.z = dot(u_xlat7.xzy, vec3(2.0, 2.0, 1.0));
    u_xlat7.xyz = u_xlat14.xyz * vec3(0.300000012, 0.300000012, 0.300000012);
    u_xlat6.x = dot(u_xlat7.xyz, vec3(-2.0, 3.0, 1.0));
    u_xlat6.z = dot(u_xlat7.xyz, vec3(-1.0, -2.0, 2.0));
    u_xlat7.x = dot(u_xlat7.xzy, vec3(2.0, 2.0, 1.0));
    u_xlat25.xyz = fract(u_xlat13.xyz);
    u_xlat25.xyz = (-u_xlat25.xyz) + vec3(0.5, 0.5, 0.5);
    u_xlat25.x = dot(u_xlat25.xyz, u_xlat25.xyz);
    u_xlat13.xyz = fract(u_xlat14.xyz);
    u_xlat13.xyz = (-u_xlat13.xyz) + vec3(0.5, 0.5, 0.5);
    u_xlat25.y = dot(u_xlat13.xyz, u_xlat13.xyz);
    u_xlat25.xy = sqrt(u_xlat25.xy);
    u_xlat25.x = min(u_xlat25.y, u_xlat25.x);
    u_xlat13.xy = fract(u_xlat6.xz);
    u_xlat13.z = fract(u_xlat7.x);
    u_xlat7.xzw = (-u_xlat13.xyz) + vec3(0.5, 0.5, 0.5);
    u_xlat6.x = dot(u_xlat7.xzw, u_xlat7.xzw);
    u_xlat6.x = sqrt(u_xlat6.x);
    u_xlat6.x = min(u_xlat6.x, u_xlat25.x);
    u_xlat6.x = log2(u_xlat6.x);
    u_xlat6.x = u_xlat6.x * 7.0;
    u_xlat6.x = exp2(u_xlat6.x);
    u_xlat6.x = u_xlat6.x * 25.0;
    u_xlat16_4.xy = vec2(float(_CausticDepth) + float(9.99999975e-05), float(_CausticDistance) + float(9.99999975e-05));
    u_xlat42 = u_xlat6.y / u_xlat16_4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat42 = min(max(u_xlat42, 0.0), 1.0);
#else
    u_xlat42 = clamp(u_xlat42, 0.0, 1.0);
#endif
    u_xlat19.x = dot(u_xlat19.xyz, u_xlat19.xyz);
    u_xlat19.x = sqrt(u_xlat19.x);
    u_xlat19.x = u_xlat19.x / u_xlat16_4.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat19.x = min(max(u_xlat19.x, 0.0), 1.0);
#else
    u_xlat19.x = clamp(u_xlat19.x, 0.0, 1.0);
#endif
    u_xlat19.x = (-u_xlat19.x) + 1.0;
    u_xlat19.x = u_xlat19.x * u_xlat42;
    u_xlat7.xyz = u_xlat5.xyz + (-unity_ShadowSplitSpheres[0].xyz);
    u_xlat13.xyz = u_xlat5.xyz + (-unity_ShadowSplitSpheres[1].xyz);
    u_xlat14.xyz = u_xlat5.xyz + (-unity_ShadowSplitSpheres[2].xyz);
    u_xlat15.xyz = u_xlat5.xyz + (-unity_ShadowSplitSpheres[3].xyz);
    u_xlat2.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat2.y = dot(u_xlat13.xyz, u_xlat13.xyz);
    u_xlat2.z = dot(u_xlat14.xyz, u_xlat14.xyz);
    u_xlat2.w = dot(u_xlat15.xyz, u_xlat15.xyz);
    u_xlatb2 = lessThan(u_xlat2, unity_ShadowSplitSqRadii);
    u_xlat2 = mix(vec4(0.0, 0.0, 0.0, 0.0), vec4(1.0, 1.0, 1.0, 1.0), vec4(u_xlatb2));
    u_xlat16_57 = u_xlat2.y + u_xlat2.x;
    u_xlat16_4.x = u_xlat2.z + u_xlat16_57;
    u_xlat7.x = -0.0;
    u_xlat7.y = (-u_xlat2.x);
    u_xlat7.z = (-u_xlat16_57);
    u_xlat7.w = (-u_xlat16_4.x);
    u_xlat2 = u_xlat2 + u_xlat7;
    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat16_57 = dot(u_xlat2, vec4(1.0, 1.0, 1.0, 1.0));
#ifdef UNITY_ADRENO_ES3
    u_xlatb37 = !!(u_xlat16_57>=0.5);
#else
    u_xlatb37 = u_xlat16_57>=0.5;
#endif
    if(u_xlatb37){
        u_xlat37 = dot(u_xlat2.yzw, vec3(1.0, 2.0, 3.0));
        u_xlat37 = min(u_xlat37, 3.0);
        u_xlatu37 = uint(u_xlat37);
        u_xlat5.xyz = u_xlat5.xyz + (-unity_ShadowPos[int(u_xlatu37)].xyz);
        u_xlati37 = int(u_xlatu37) << 2;
        u_xlat7.xyz = u_xlat5.yyy * hlslcc_mtx4x4unity_WorldToShadow[(u_xlati37 + 1)].xyz;
        u_xlat7.xyz = hlslcc_mtx4x4unity_WorldToShadow[u_xlati37].xyz * u_xlat5.xxx + u_xlat7.xyz;
        u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToShadow[(u_xlati37 + 2)].xyz * u_xlat5.zzz + u_xlat7.xyz;
        u_xlat5.xyz = u_xlat5.xyz + hlslcc_mtx4x4unity_WorldToShadow[(u_xlati37 + 3)].xyz;
        vec3 txVec0 = vec3(u_xlat5.xy,u_xlat5.z);
        u_xlat10_37 = textureLod(hlslcc_zcmp_CascadeShadowMapTexture, txVec0, 0.0);
        u_xlat16_55 = (-_LightShadowData.x) + 1.0;
        u_xlat37 = u_xlat10_37 * u_xlat16_55 + _LightShadowData.x;
    } else {
        u_xlat37 = 1.0;
    //ENDIF
    }
    u_xlat19.x = u_xlat37 * u_xlat19.x;
    u_xlat16_4.xyz = _LightColor0.xyz * _CausticColor.xyz;
    u_xlat16_4.xyz = u_xlat6.xxx * u_xlat16_4.xyz;
    u_xlat16_4.xyz = u_xlat19.xxx * u_xlat16_4.xyz;
    u_xlat16_57 = _CausticFade + 9.99999975e-05;
    u_xlat1.x = u_xlat1.x / u_xlat16_57;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.x = log2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _CausticFadeExponent;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat1.x = (-u_xlat1.x) + 1.0;
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat1.xxx + vec3(1.0, 1.0, 1.0);
    u_xlat16_1.xyz = u_xlat16_4.xyz * u_xlat10_12.xyz;
    u_xlat5.xyz = u_xlat16_1.xyz * u_xlat11.xyz;
    u_xlat55 = 0.100000001 / _DeepColorDepth;
    u_xlat55 = u_xlat0.x * u_xlat55;
#ifdef UNITY_ADRENO_ES3
    u_xlat55 = min(max(u_xlat55, 0.0), 1.0);
#else
    u_xlat55 = clamp(u_xlat55, 0.0, 1.0);
#endif
    u_xlat55 = max(u_xlat55, 9.99999975e-05);
    u_xlat55 = log2(u_xlat55);
    u_xlat55 = u_xlat55 * _DeepColorFade;
    u_xlat55 = exp2(u_xlat55);
    u_xlat7.xyz = (-u_xlat11.xyz) * u_xlat16_1.xyz + _DeepColor.xyz;
    u_xlat7.xyz = vec3(u_xlat55) * u_xlat7.xyz + u_xlat5.xyz;
    u_xlat12.xyz = u_xlat16_3.xyz * _DistortionIntensity.xyz;
    u_xlat13.x = vs_TEXCOORD8.x;
    u_xlat13.y = vs_TEXCOORD9.x;
    u_xlat13.z = vs_TEXCOORD6.x;
    u_xlat13.x = dot(u_xlat13.xyz, u_xlat12.xyz);
    u_xlat14.x = vs_TEXCOORD8.y;
    u_xlat14.y = vs_TEXCOORD9.y;
    u_xlat14.z = vs_TEXCOORD6.y;
    u_xlat13.y = dot(u_xlat14.xyz, u_xlat12.xyz);
    u_xlat14.x = vs_TEXCOORD8.z;
    u_xlat14.y = vs_TEXCOORD9.z;
    u_xlat14.z = vs_TEXCOORD6.z;
    u_xlat13.z = dot(u_xlat14.xyz, u_xlat12.xyz);
    u_xlat55 = dot(u_xlat13.xyz, u_xlat13.xyz);
    u_xlat55 = inversesqrt(u_xlat55);
    u_xlat13.xyz = vec3(u_xlat55) * u_xlat13.xyz;
    u_xlat55 = dot((-u_xlat10.xyz), u_xlat13.xyz);
    u_xlat55 = u_xlat55 + u_xlat55;
    u_xlat10.xyz = u_xlat13.xyz * (-vec3(u_xlat55)) + (-u_xlat10.xyz);
    u_xlat10_2 = textureLod(_ReflectionSkyCubeMap, u_xlat10.xyz, 0.0);
    u_xlat16_3.x = u_xlat10_2.w + -1.0;
    u_xlat16_3.x = _ReflectionSkyCubeMap_HDR.w * u_xlat16_3.x + 1.0;
    u_xlat16_3.x = log2(u_xlat16_3.x);
    u_xlat16_3.x = u_xlat16_3.x * _ReflectionSkyCubeMap_HDR.y;
    u_xlat16_3.x = exp2(u_xlat16_3.x);
    u_xlat16_3.x = u_xlat16_3.x * _ReflectionSkyCubeMap_HDR.x;
    u_xlat16_21.xyz = u_xlat10_2.xyz * u_xlat16_3.xxx;
    u_xlat6.xz = u_xlat12.xy * vec2(_SSRDistortion);
    u_xlat55 = float(1.0) / _SSRDistortion_Shore;
    u_xlat55 = u_xlat0.x * u_xlat55;
#ifdef UNITY_ADRENO_ES3
    u_xlat55 = min(max(u_xlat55, 0.0), 1.0);
#else
    u_xlat55 = clamp(u_xlat55, 0.0, 1.0);
#endif
    u_xlat6.xz = vec2(u_xlat55) * u_xlat6.xz;
    u_xlat6.xz = u_xlat6.xz * vs_TEXCOORD4.ww + vs_TEXCOORD4.xy;
    u_xlat6.xz = u_xlat6.xz / vs_TEXCOORD4.ww;
    u_xlat10_4 = texture(_SSRTexture, u_xlat6.xz).wxyz;
    u_xlat16_10.xyz = (-u_xlat16_3.xxx) * u_xlat10_2.xyz + u_xlat10_4.yzw;
    u_xlat10.xyz = u_xlat16_10.xyz * vec3(vec3(_SSRIntensity, _SSRIntensity, _SSRIntensity));
    u_xlat16_4.x = u_xlat10_4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat10.xyz = u_xlat16_4.xxx * u_xlat10.xyz + u_xlat16_21.xyz;
    u_xlat55 = u_xlat8.x * _FresnelPower;
    u_xlat55 = exp2(u_xlat55);
    u_xlat55 = u_xlat55 * _ReflectionIntensity;
    u_xlat6.x = float(1.0) / _ShoreReflectionFade;
    u_xlat0.x = u_xlat0.x * u_xlat6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x * u_xlat55;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat8.xzw = (-u_xlat7.xyz) + u_xlat10.xyz;
    u_xlat7.xyz = u_xlat0.xxx * u_xlat8.xzw + u_xlat7.xyz;
    u_xlat1.xyz = (-u_xlat11.xyz) * u_xlat16_1.xyz + u_xlat7.xyz;
    u_xlat1.xyz = vec3(u_xlat60) * u_xlat1.xyz + u_xlat5.xyz;
    u_xlat0.x = (-vs_TEXCOORD5.y) * _WorldSpaceLightPos0.w + _WorldSpaceLightPos0.y;
    u_xlat16_3.x = max(u_xlat0.x, 0.0);
    u_xlat5.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowSplitSpheres[0].xyz);
    u_xlat6.xzw = vs_TEXCOORD5.xyz + (-unity_ShadowSplitSpheres[1].xyz);
    u_xlat7.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowSplitSpheres[2].xyz);
    u_xlat8.xzw = vs_TEXCOORD5.xyz + (-unity_ShadowSplitSpheres[3].xyz);
    u_xlat2.x = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat2.y = dot(u_xlat6.xzw, u_xlat6.xzw);
    u_xlat2.z = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat2.w = dot(u_xlat8.xzw, u_xlat8.xzw);
    u_xlatb2 = lessThan(u_xlat2, unity_ShadowSplitSqRadii);
    u_xlat2 = mix(vec4(0.0, 0.0, 0.0, 0.0), vec4(1.0, 1.0, 1.0, 1.0), vec4(u_xlatb2));
    u_xlat16_21.x = u_xlat2.y + u_xlat2.x;
    u_xlat16_21.y = u_xlat2.z + u_xlat16_21.x;
    u_xlat4.x = -0.0;
    u_xlat4.y = (-u_xlat2.x);
    u_xlat4.zw = (-u_xlat16_21.xy);
    u_xlat2 = u_xlat2 + u_xlat4;
    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat16_21.x = dot(u_xlat2, vec4(1.0, 1.0, 1.0, 1.0));
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(u_xlat16_21.x>=0.5);
#else
    u_xlatb0.x = u_xlat16_21.x>=0.5;
#endif
    if(u_xlatb0.x){
        u_xlat0.x = dot(u_xlat2.yzw, vec3(1.0, 2.0, 3.0));
        u_xlat0.x = min(u_xlat0.x, 3.0);
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat5.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowPos[int(u_xlatu0)].xyz);
        u_xlati0 = int(u_xlatu0) << 2;
        u_xlat6.xzw = u_xlat5.yyy * hlslcc_mtx4x4unity_WorldToShadow[(u_xlati0 + 1)].xyz;
        u_xlat6.xzw = hlslcc_mtx4x4unity_WorldToShadow[u_xlati0].xyz * u_xlat5.xxx + u_xlat6.xzw;
        u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToShadow[(u_xlati0 + 2)].xyz * u_xlat5.zzz + u_xlat6.xzw;
        u_xlat5.xyz = u_xlat5.xyz + hlslcc_mtx4x4unity_WorldToShadow[(u_xlati0 + 3)].xyz;
        vec3 txVec1 = vec3(u_xlat5.xy,u_xlat5.z);
        u_xlat10_0 = textureLod(hlslcc_zcmp_CascadeShadowMapTexture, txVec1, 0.0);
        u_xlat16_55 = (-_LightShadowData.x) + 1.0;
        u_xlat0.x = u_xlat10_0 * u_xlat16_55 + _LightShadowData.x;
    } else {
        u_xlat0.x = 1.0;
    //ENDIF
    }
    u_xlat16_3.xyz = u_xlat16_3.xxx * _LightColor0.xyz;
    u_xlat5.xyz = u_xlat16_3.xyz * u_xlat0.xxx + vs_TEXCOORD1.xyz;
    u_xlat16_3.xyz = u_xlat5.xyz * vec3(0.300000012, 0.300000012, 0.300000012) + vec3(0.699999988, 0.699999988, 0.699999988);
    u_xlat0.x = sqrt(u_xlat59);
    u_xlat16_57 = u_xlat0.x + (-_DepthFoamCloseFadeOffset);
    u_xlat16_57 = u_xlat16_57 / _DepthFoamCloseFadeDistance;
    u_xlat16_16 = vs_COLOR0.x * _DepthFoamExtent;
    u_xlat55 = max(u_xlat6.y, 0.0);
    u_xlat55 = min(u_xlat16_16, u_xlat55);
    u_xlat16_16 = _DepthFoamExtent * vs_COLOR0.x + 9.99999975e-05;
    u_xlat55 = u_xlat55 / u_xlat16_16;
    u_xlat55 = (-u_xlat55) + 1.0;
    u_xlat5.xy = vec2(_Time.y * _DepthFoamMask_ST.z, _Time.y * _DepthFoamMask_ST.w);
    u_xlat5.xy = fract(u_xlat5.xy);
    u_xlat5.xy = _DepthFoamMask_ST.xy * vs_TEXCOORD5.xz + u_xlat5.xy;
    u_xlat10_5 = texture(_DepthFoamMask, u_xlat5.xy).x;
    u_xlat23 = vs_TEXCOORD5.z + vs_TEXCOORD5.x;
    u_xlat23 = u_xlat23 * _DepthFoamPhaseScale;
    u_xlat23 = _DepthFoamSpeed * _Time.y + u_xlat23;
    u_xlat41 = (-u_xlat55) + 1.0;
    u_xlat16_16 = _DepthFoamSubdivision * u_xlat55 + u_xlat23;
    u_xlat16_16 = sin(u_xlat16_16);
    u_xlat16_16 = _DepthFoamWidth * u_xlat55 + u_xlat16_16;
    u_xlat16_23 = u_xlat10_5 * 2.0 + -1.0;
    u_xlat23 = u_xlat16_23 + u_xlat16_16;
#ifdef UNITY_ADRENO_ES3
    u_xlatb23 = !!(u_xlat23>=u_xlat41);
#else
    u_xlatb23 = u_xlat23>=u_xlat41;
#endif
    u_xlat23 = u_xlatb23 ? 1.0 : float(0.0);
    u_xlat5.x = u_xlat23 * u_xlat10_5;
    u_xlat16_16 = _DepthFoamDistance + 9.99999975e-05;
    u_xlat16_16 = u_xlat0.x / u_xlat16_16;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat16_0 = (-u_xlat16_16) + 1.0;
    u_xlat16_16 = vs_COLOR0.y * _DepthFoamColor.w;
    u_xlat16_57 = u_xlat16_57 * u_xlat16_16;
    u_xlat16_57 = u_xlat5.x * u_xlat16_57;
    u_xlat16_57 = u_xlat55 * u_xlat16_57;
    u_xlat16_57 = u_xlat16_0 * u_xlat16_57;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_57 = min(max(u_xlat16_57, 0.0), 1.0);
#else
    u_xlat16_57 = clamp(u_xlat16_57, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = _DepthFoamColor.xyz * u_xlat16_3.xyz + (-u_xlat1.xyz);
    u_xlat16_3.xyz = vec3(u_xlat16_57) * u_xlat16_3.xyz + u_xlat1.xyz;
    u_xlat16_0 = max(_LightColor0.w, 0.5);
    u_xlat1.xyz = u_xlat9.xyz * vec3(u_xlat26) + u_xlat16_3.xyz;
    u_xlat36.xy = fract(u_xlat0.zw);
    u_xlat16_3.xy = u_xlat36.xy * vec2(1.14999998, 1.14999998);
    u_xlat16_16 = sin(_Ripple02Rotate);
    u_xlat16_17.x = cos(_Ripple02Rotate);
    u_xlat5.x = (-u_xlat16_16);
    u_xlat16_17.y = u_xlat16_16;
    u_xlat6.x = dot(u_xlat16_3.xy, u_xlat16_17.xy);
    u_xlat5.y = u_xlat16_17.x;
    u_xlat6.y = dot(u_xlat16_3.xy, u_xlat5.xy);
    u_xlat10_36 = texture(_WaterRippleTex, u_xlat36.xy).x;
    u_xlat10_54 = texture(_WaterRippleTex, u_xlat6.xy).x;
    u_xlat16_36 = u_xlat10_54 + u_xlat10_36;
    u_xlat36.x = u_xlat16_36 * u_xlat18;
    u_xlat5.xyz = _ES_MainLightColor.xyz * vec3(u_xlat16_0) + (-u_xlat1.xyz);
    u_xlat1.xyz = u_xlat36.xxx * u_xlat5.xyz + u_xlat1.xyz;
    u_xlat1.w = u_xlat18 * vs_COLOR0.w;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "MHY_SHADER_MIDDLE" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump float _MHYZBias;
uniform 	vec4 hlslcc_mtx4x4_mhyJitteredVP[4];
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
out highp vec4 vs_TEXCOORD9;
out highp vec4 vs_TEXCOORD10;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec4 u_xlat8;
float u_xlat27;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4_mhyJitteredVP[1];
    u_xlat2 = hlslcc_mtx4x4_mhyJitteredVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4_mhyJitteredVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4_mhyJitteredVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat3.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    u_xlat3.xyw = u_xlat2.xyw;
    gl_Position = u_xlat3;
    vs_COLOR0 = in_COLOR0;
    u_xlat4.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat4.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat4.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat27 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat4.xyz = vec3(u_xlat27) * u_xlat4.xyz;
    u_xlat16_5.x = u_xlat4.y * u_xlat4.y;
    u_xlat16_5.x = u_xlat4.x * u_xlat4.x + (-u_xlat16_5.x);
    u_xlat16_6 = u_xlat4.yzzx * u_xlat4.xyzz;
    u_xlat16_7.x = dot(unity_SHBr, u_xlat16_6);
    u_xlat16_7.y = dot(unity_SHBg, u_xlat16_6);
    u_xlat16_7.z = dot(unity_SHBb, u_xlat16_6);
    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_7.xyz;
    u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat4.w = 1.0;
    u_xlat16_6.x = dot(unity_SHAr, u_xlat4);
    u_xlat16_6.y = dot(unity_SHAg, u_xlat4);
    u_xlat16_6.z = dot(unity_SHAb, u_xlat4);
    u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_6.xyz;
    vs_TEXCOORD1.xyz = u_xlat16_5.xyz;
    vs_TEXCOORD1.w = 1.0;
    u_xlat27 = u_xlat3.y * _ProjectionParams.x;
    u_xlat8.w = u_xlat27 * 0.5;
    u_xlat8.xz = u_xlat3.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.z = u_xlat2.z;
    u_xlat3.xy = u_xlat8.zz + u_xlat8.xw;
    vs_TEXCOORD2 = u_xlat3;
    vs_TEXCOORD4.xyw = u_xlat3.xyw;
    u_xlat27 = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat27 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat27;
    u_xlat27 = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat27;
    u_xlat27 = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat27;
    vs_TEXCOORD3.z = (-u_xlat27);
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD3.w = 0.0;
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD5.w = 0.0;
    vs_TEXCOORD6.xyz = u_xlat4.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[1].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].www + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * in_POSITION0.yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.zzz + u_xlat1.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.www + u_xlat1.xyz;
    vs_TEXCOORD7.xyz = u_xlat1.xyz * vec3(-1.0, -1.0, 1.0);
    vs_TEXCOORD7.w = 0.0;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat27 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat1.xyz = vec3(u_xlat27) * u_xlat1.xyz;
    vs_TEXCOORD8.xyz = u_xlat1.xyz;
    vs_TEXCOORD8.w = 0.0;
    u_xlat2.xyz = u_xlat1.yzx * u_xlat4.zxy;
    u_xlat1.xyz = u_xlat4.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
    u_xlat27 = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD9.xyz = vec3(u_xlat27) * u_xlat1.xyz;
    vs_TEXCOORD9.w = 0.0;
    u_xlat27 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat27 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat27;
    vs_TEXCOORD10.w = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat27;
    vs_TEXCOORD10.xyz = u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowPos[4];
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _DepthFoamMask_ST;
uniform 	mediump float _DepthFoamSpeed;
uniform 	mediump vec4 _DepthFoamColor;
uniform 	mediump float _DepthFoamExtent;
uniform 	mediump float _DepthFoamDistance;
uniform 	mediump float _DepthFoamSubdivision;
uniform 	mediump float _DepthFoamWidth;
uniform 	mediump float _DepthFoamPhaseScale;
uniform 	mediump float _DepthFoamCloseFadeOffset;
uniform 	mediump float _DepthFoamCloseFadeDistance;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _NormalMapScale;
uniform 	float _Normal01_U_Speed;
uniform 	float _Normal01_VSpeed;
uniform 	float _NormalMapBias;
uniform 	float _Normal02_U_Speed;
uniform 	float _Normal02_V_Speed;
uniform 	float _RefractionIntensity;
uniform 	float _OpacityByDepth;
uniform 	float _SpecularIntensity;
uniform 	vec3 _ES_MoonDirection;
uniform 	vec3 _ES_SunDirection;
uniform 	float _Gloss;
uniform 	float _ShoreTransparency;
uniform 	float _SpecularPower;
uniform 	vec4 _ShallowColor;
uniform 	float _ShoreFade;
uniform 	vec4 _DeepColor;
uniform 	float _DeepColorDepth;
uniform 	float _DeepColorFade;
uniform 	vec4 _DistortionIntensity;
uniform 	float _SSRDistortion;
uniform 	float _SSRDistortion_Shore;
uniform 	float _SSRIntensity;
uniform 	float _ReflectionIntensity;
uniform 	float _FresnelPower;
uniform 	float _ShoreReflectionFade;
uniform 	mediump float _ProjectUVScale;
uniform 	vec4 _ReflectionSkyCubeMap_HDR;
uniform lowp sampler2D _Normal01;
uniform lowp sampler2D _Normal02;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _SceneScaledBufferBeforTransParent;
uniform lowp samplerCube _ReflectionSkyCubeMap;
uniform lowp sampler2D _SSRTexture;
uniform lowp sampler2D _DepthFoamMask;
uniform lowp sampler2DShadow hlslcc_zcmp_CascadeShadowMapTexture;
uniform lowp sampler2D _CascadeShadowMapTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD8;
in highp vec4 vs_TEXCOORD9;
in highp vec4 vs_TEXCOORD10;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec4 u_xlatb0;
vec4 u_xlat1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
lowp vec4 u_xlat10_3;
vec4 u_xlat4;
vec3 u_xlat5;
bool u_xlatb5;
vec3 u_xlat6;
vec4 u_xlat7;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
vec3 u_xlat9;
lowp vec3 u_xlat10_9;
vec3 u_xlat10;
vec3 u_xlat11;
vec3 u_xlat12;
vec3 u_xlat13;
vec3 u_xlat14;
mediump float u_xlat16_15;
vec2 u_xlat17;
mediump vec3 u_xlat16_18;
vec3 u_xlat20;
mediump vec3 u_xlat16_20;
lowp float u_xlat10_20;
int u_xlati20;
uint u_xlatu20;
bool u_xlatb20;
float u_xlat21;
float u_xlat33;
vec2 u_xlat36;
mediump float u_xlat16_36;
lowp float u_xlat10_36;
bool u_xlatb36;
float u_xlat49;
mediump float u_xlat16_50;
float u_xlat52;
mediump float u_xlat16_52;
bool u_xlatb52;
float u_xlat53;
float u_xlat54;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD5.zx * vec2(vec2(_ProjectUVScale, _ProjectUVScale));
    u_xlat1.x = _Time.y * _Normal01_U_Speed + u_xlat0.y;
    u_xlat1.yz = _Time.yy * vec2(_Normal01_VSpeed, _Normal02_U_Speed) + u_xlat0.xy;
    u_xlat1.w = _Time.y * _Normal02_V_Speed + u_xlat0.x;
    u_xlat10_0.xyz = texture(_Normal01, u_xlat1.xy, _NormalMapBias).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_2.xy = u_xlat16_0.xy * vec2(_NormalMapScale);
    u_xlat10_1.xyz = texture(_Normal02, u_xlat1.zw, _NormalMapBias).xyz;
    u_xlat16_0.w = -1.0;
    u_xlat16_3.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.wwz;
    u_xlat16_3.xy = u_xlat16_3.xy * vec2(_NormalMapScale);
    u_xlat16_2.z = -1.0;
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
    u_xlat1.x = float(1.0) / vs_TEXCOORD4.w;
    u_xlat17.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat17.x = texture(_CameraDepthTexture, u_xlat17.xy).x;
    u_xlat17.x = _ZBufferParams.z * u_xlat17.x + _ZBufferParams.w;
    u_xlat17.x = float(1.0) / u_xlat17.x;
    u_xlat33 = vs_TEXCOORD10.w + 9.99999975e-05;
    u_xlat33 = (-u_xlat17.x) / u_xlat33;
    u_xlat33 = vs_TEXCOORD10.y * u_xlat33 + _WorldSpaceCameraPos.y;
    u_xlat33 = (-u_xlat33) + vs_TEXCOORD5.y;
    u_xlat4.xy = u_xlat16_2.xy * vec2(vec2(_RefractionIntensity, _RefractionIntensity));
    u_xlat1.x = u_xlat1.x * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.xw = u_xlat1.xx * u_xlat4.xy;
    u_xlat1.xw = u_xlat1.xw * vs_TEXCOORD4.ww;
    u_xlat17.x = u_xlat17.x + (-vs_TEXCOORD4.w);
#ifdef UNITY_ADRENO_ES3
    u_xlat17.x = min(max(u_xlat17.x, 0.0), 1.0);
#else
    u_xlat17.x = clamp(u_xlat17.x, 0.0, 1.0);
#endif
    u_xlat4.xy = u_xlat17.xx * u_xlat1.xw;
    u_xlat4.z = 0.0;
    u_xlat1.xyw = u_xlat4.xyz + vs_TEXCOORD4.xyw;
    u_xlat1.xy = u_xlat1.xy / u_xlat1.ww;
    u_xlat1.x = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat1.x = _ZBufferParams.z * u_xlat1.x + _ZBufferParams.w;
    u_xlat1.x = float(1.0) / u_xlat1.x;
    u_xlat1.x = u_xlat1.x + (-vs_TEXCOORD4.w);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.xyw = u_xlat1.xxx * u_xlat4.xyz + vs_TEXCOORD4.xyw;
    u_xlat4.xy = u_xlat1.xy / u_xlat1.ww;
    u_xlat49 = texture(_CameraDepthTexture, u_xlat4.xy).x;
    u_xlat49 = _ZBufferParams.z * u_xlat49 + _ZBufferParams.w;
    u_xlat49 = float(1.0) / u_xlat49;
    u_xlat49 = u_xlat49 + (-vs_TEXCOORD4.w);
    u_xlat4.x = 0.100000001 / _OpacityByDepth;
    u_xlat16_3.xz = u_xlat16_2.xy;
    u_xlat16_3.y = 1.0;
    u_xlat16_20.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
    u_xlat16_20.x = inversesqrt(u_xlat16_20.x);
    u_xlat16_20.xyz = u_xlat16_3.xyz * u_xlat16_20.xxx;
#ifdef UNITY_ADRENO_ES3
    u_xlatb5 = !!(0.0>=_ES_MoonDirection.y);
#else
    u_xlatb5 = 0.0>=_ES_MoonDirection.y;
#endif
    u_xlat5.xyz = (bool(u_xlatb5)) ? _ES_SunDirection.xyz : _ES_MoonDirection.xyz;
    u_xlat6.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat53 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat54 = inversesqrt(u_xlat53);
    u_xlat7.xyz = vec3(u_xlat54) * u_xlat6.xyz;
    u_xlat5.xyz = u_xlat6.xyz * vec3(u_xlat54) + u_xlat5.xyz;
    u_xlat6.x = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat5.xyz = u_xlat5.xyz * u_xlat6.xxx;
    u_xlat20.x = dot(u_xlat16_20.xyz, u_xlat5.xyz);
    u_xlat36.x = _Gloss * 128.0;
    u_xlat20.x = max(u_xlat20.x, 9.99999975e-05);
    u_xlat20.x = log2(u_xlat20.x);
    u_xlat20.x = u_xlat20.x * u_xlat36.x;
    u_xlat20.x = exp2(u_xlat20.x);
    u_xlat20.x = u_xlat20.x * _SpecularIntensity;
    u_xlat20.x = max(u_xlat20.x, 0.0);
    u_xlat20.x = min(u_xlat20.x, 16.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb36 = !!(_ES_MoonDirection.y>=9.99999975e-05);
#else
    u_xlatb36 = _ES_MoonDirection.y>=9.99999975e-05;
#endif
    u_xlat36.x = u_xlatb36 ? 1.0 : float(0.0);
    u_xlat52 = _ES_MoonDirection.y + -1.0;
    u_xlat36.x = u_xlat36.x * u_xlat52 + 1.0;
    u_xlat4.w = float(1.0) / _ShoreTransparency;
    u_xlat5.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat5.x = inversesqrt(u_xlat5.x);
    u_xlat5.xyz = u_xlat5.xxx * vs_TEXCOORD6.xyz;
    u_xlat5.x = dot(u_xlat7.xyz, u_xlat5.xyz);
    u_xlat5.x = (-u_xlat5.x) + 1.0;
    u_xlat5.x = max(u_xlat5.x, 9.99999975e-05);
    u_xlat5.x = log2(u_xlat5.x);
    u_xlat21 = u_xlat5.x * _SpecularPower;
    u_xlat21 = exp2(u_xlat21);
    u_xlat6.xyz = u_xlat36.xxx * _LightColor0.xyz;
    u_xlat6.xyz = u_xlat20.xxx * u_xlat6.xyz;
    u_xlat20.x = u_xlat49 + -1.0;
    u_xlat20.x = u_xlat4.w * u_xlat20.x;
    u_xlat20.x = u_xlat20.x * 0.100000001;
#ifdef UNITY_ADRENO_ES3
    u_xlat20.x = min(max(u_xlat20.x, 0.0), 1.0);
#else
    u_xlat20.x = clamp(u_xlat20.x, 0.0, 1.0);
#endif
    u_xlat6.xyz = u_xlat20.xxx * u_xlat6.xyz;
    u_xlat4.xy = vec2(u_xlat49) * u_xlat4.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.xy = min(max(u_xlat4.xy, 0.0), 1.0);
#else
    u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);
#endif
    u_xlat20.x = max(u_xlat4.y, 9.99999975e-05);
    u_xlat20.x = log2(u_xlat20.x);
    u_xlat20.x = u_xlat20.x * _ShoreFade;
    u_xlat20.x = exp2(u_xlat20.x);
    u_xlat8.xyz = _ShallowColor.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat8.xyz = u_xlat20.xxx * u_xlat8.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat1.xy = u_xlat1.xy / vs_TEXCOORD4.ww;
    u_xlat10_9.xyz = texture(_SceneScaledBufferBeforTransParent, u_xlat1.xy).xyz;
    u_xlat10.xyz = u_xlat8.xyz * u_xlat10_9.xyz;
    u_xlat1.x = 0.100000001 / _DeepColorDepth;
    u_xlat1.x = u_xlat1.x * u_xlat49;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.x = max(u_xlat1.x, 9.99999975e-05);
    u_xlat1.x = log2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _DeepColorFade;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat11.xyz = (-u_xlat8.xyz) * u_xlat10_9.xyz + _DeepColor.xyz;
    u_xlat11.xyz = u_xlat1.xxx * u_xlat11.xyz + u_xlat10.xyz;
    u_xlat12.xyz = u_xlat16_2.xyz * _DistortionIntensity.xyz;
    u_xlat13.x = vs_TEXCOORD8.x;
    u_xlat13.y = vs_TEXCOORD9.x;
    u_xlat13.z = vs_TEXCOORD6.x;
    u_xlat13.x = dot(u_xlat13.xyz, u_xlat12.xyz);
    u_xlat14.x = vs_TEXCOORD8.y;
    u_xlat14.y = vs_TEXCOORD9.y;
    u_xlat14.z = vs_TEXCOORD6.y;
    u_xlat13.y = dot(u_xlat14.xyz, u_xlat12.xyz);
    u_xlat14.x = vs_TEXCOORD8.z;
    u_xlat14.y = vs_TEXCOORD9.z;
    u_xlat14.z = vs_TEXCOORD6.z;
    u_xlat13.z = dot(u_xlat14.xyz, u_xlat12.xyz);
    u_xlat1.x = dot(u_xlat13.xyz, u_xlat13.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat13.xyz = u_xlat1.xxx * u_xlat13.xyz;
    u_xlat1.x = dot((-u_xlat7.xyz), u_xlat13.xyz);
    u_xlat1.x = u_xlat1.x + u_xlat1.x;
    u_xlat7.xyz = u_xlat13.xyz * (-u_xlat1.xxx) + (-u_xlat7.xyz);
    u_xlat10_0 = textureLod(_ReflectionSkyCubeMap, u_xlat7.xyz, 0.0);
    u_xlat16_2.x = u_xlat10_0.w + -1.0;
    u_xlat16_2.x = _ReflectionSkyCubeMap_HDR.w * u_xlat16_2.x + 1.0;
    u_xlat16_2.x = log2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * _ReflectionSkyCubeMap_HDR.y;
    u_xlat16_2.x = exp2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * _ReflectionSkyCubeMap_HDR.x;
    u_xlat16_18.xyz = u_xlat10_0.xyz * u_xlat16_2.xxx;
    u_xlat1.xy = u_xlat12.xy * vec2(_SSRDistortion);
    u_xlat36.x = float(1.0) / _SSRDistortion_Shore;
    u_xlat36.x = u_xlat49 * u_xlat36.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat36.x = min(max(u_xlat36.x, 0.0), 1.0);
#else
    u_xlat36.x = clamp(u_xlat36.x, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat1.xy * u_xlat36.xx;
    u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD4.ww + vs_TEXCOORD4.xy;
    u_xlat1.xy = u_xlat1.xy / vs_TEXCOORD4.ww;
    u_xlat10_3 = texture(_SSRTexture, u_xlat1.xy).wxyz;
    u_xlat16_7.xyz = (-u_xlat16_2.xxx) * u_xlat10_0.xyz + u_xlat10_3.yzw;
    u_xlat7.xyz = u_xlat16_7.xyz * vec3(vec3(_SSRIntensity, _SSRIntensity, _SSRIntensity));
    u_xlat16_3.x = u_xlat10_3.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat7.xyz = u_xlat16_3.xxx * u_xlat7.xyz + u_xlat16_18.xyz;
    u_xlat1.x = u_xlat5.x * _FresnelPower;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _ReflectionIntensity;
    u_xlat17.x = float(1.0) / _ShoreReflectionFade;
    u_xlat17.x = u_xlat17.x * u_xlat49;
#ifdef UNITY_ADRENO_ES3
    u_xlat17.x = min(max(u_xlat17.x, 0.0), 1.0);
#else
    u_xlat17.x = clamp(u_xlat17.x, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat17.x * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat7.xyz = (-u_xlat11.xyz) + u_xlat7.xyz;
    u_xlat1.xyw = u_xlat1.xxx * u_xlat7.xyz + u_xlat11.xyz;
    u_xlat1.xyw = (-u_xlat8.xyz) * u_xlat10_9.xyz + u_xlat1.xyw;
    u_xlat1.xyw = u_xlat20.xxx * u_xlat1.xyw + u_xlat10.xyz;
    u_xlat20.x = (-vs_TEXCOORD5.y) * _WorldSpaceLightPos0.w + _WorldSpaceLightPos0.y;
    u_xlat16_2.x = max(u_xlat20.x, 0.0);
    u_xlat20.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowSplitSpheres[0].xyz);
    u_xlat7.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowSplitSpheres[1].xyz);
    u_xlat8.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowSplitSpheres[2].xyz);
    u_xlat9.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowSplitSpheres[3].xyz);
    u_xlat0.x = dot(u_xlat20.xyz, u_xlat20.xyz);
    u_xlat0.y = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat0.z = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat0.w = dot(u_xlat9.xyz, u_xlat9.xyz);
    u_xlatb0 = lessThan(u_xlat0, unity_ShadowSplitSqRadii);
    u_xlat0 = mix(vec4(0.0, 0.0, 0.0, 0.0), vec4(1.0, 1.0, 1.0, 1.0), vec4(u_xlatb0));
    u_xlat16_18.x = u_xlat0.y + u_xlat0.x;
    u_xlat16_18.y = u_xlat0.z + u_xlat16_18.x;
    u_xlat3.x = -0.0;
    u_xlat3.y = (-u_xlat0.x);
    u_xlat3.zw = (-u_xlat16_18.xy);
    u_xlat0 = u_xlat0 + u_xlat3;
    u_xlat0 = max(u_xlat0, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat16_18.x = dot(u_xlat0, vec4(1.0, 1.0, 1.0, 1.0));
#ifdef UNITY_ADRENO_ES3
    u_xlatb20 = !!(u_xlat16_18.x>=0.5);
#else
    u_xlatb20 = u_xlat16_18.x>=0.5;
#endif
    if(u_xlatb20){
        u_xlat20.x = dot(u_xlat0.yzw, vec3(1.0, 2.0, 3.0));
        u_xlat20.x = min(u_xlat20.x, 3.0);
        u_xlatu20 = uint(u_xlat20.x);
        u_xlat7.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowPos[int(u_xlatu20)].xyz);
        u_xlati20 = int(u_xlatu20) << 2;
        u_xlat8.xyz = u_xlat7.yyy * hlslcc_mtx4x4unity_WorldToShadow[(u_xlati20 + 1)].xyz;
        u_xlat7.xyw = hlslcc_mtx4x4unity_WorldToShadow[u_xlati20].xyz * u_xlat7.xxx + u_xlat8.xyz;
        u_xlat7.xyz = hlslcc_mtx4x4unity_WorldToShadow[(u_xlati20 + 2)].xyz * u_xlat7.zzz + u_xlat7.xyw;
        u_xlat20.xyz = u_xlat7.xyz + hlslcc_mtx4x4unity_WorldToShadow[(u_xlati20 + 3)].xyz;
        vec3 txVec0 = vec3(u_xlat20.xy,u_xlat20.z);
        u_xlat10_20 = textureLod(hlslcc_zcmp_CascadeShadowMapTexture, txVec0, 0.0);
        u_xlat16_36 = (-_LightShadowData.x) + 1.0;
        u_xlat20.x = u_xlat10_20 * u_xlat16_36 + _LightShadowData.x;
    } else {
        u_xlat20.x = 1.0;
    //ENDIF
    }
    u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;
    u_xlat20.xyz = u_xlat16_2.xyz * u_xlat20.xxx + vs_TEXCOORD1.xyz;
    u_xlat16_2.xyz = u_xlat20.xyz * vec3(0.300000012, 0.300000012, 0.300000012) + vec3(0.699999988, 0.699999988, 0.699999988);
    u_xlat20.x = sqrt(u_xlat53);
    u_xlat16_50 = u_xlat20.x + (-_DepthFoamCloseFadeOffset);
    u_xlat16_50 = u_xlat16_50 / _DepthFoamCloseFadeDistance;
    u_xlat16_15 = vs_COLOR0.x * _DepthFoamExtent;
    u_xlat33 = max(u_xlat33, 0.0);
    u_xlat33 = min(u_xlat16_15, u_xlat33);
    u_xlat16_15 = _DepthFoamExtent * vs_COLOR0.x + 9.99999975e-05;
    u_xlat33 = u_xlat33 / u_xlat16_15;
    u_xlat33 = (-u_xlat33) + 1.0;
    u_xlat36.xy = vec2(_Time.y * _DepthFoamMask_ST.z, _Time.y * _DepthFoamMask_ST.w);
    u_xlat36.xy = fract(u_xlat36.xy);
    u_xlat36.xy = _DepthFoamMask_ST.xy * vs_TEXCOORD5.xz + u_xlat36.xy;
    u_xlat10_36 = texture(_DepthFoamMask, u_xlat36.xy).x;
    u_xlat52 = vs_TEXCOORD5.z + vs_TEXCOORD5.x;
    u_xlat52 = u_xlat52 * _DepthFoamPhaseScale;
    u_xlat52 = _DepthFoamSpeed * _Time.y + u_xlat52;
    u_xlat5.x = (-u_xlat33) + 1.0;
    u_xlat16_15 = _DepthFoamSubdivision * u_xlat33 + u_xlat52;
    u_xlat16_15 = sin(u_xlat16_15);
    u_xlat16_15 = _DepthFoamWidth * u_xlat33 + u_xlat16_15;
    u_xlat16_52 = u_xlat10_36 * 2.0 + -1.0;
    u_xlat52 = u_xlat16_52 + u_xlat16_15;
#ifdef UNITY_ADRENO_ES3
    u_xlatb52 = !!(u_xlat52>=u_xlat5.x);
#else
    u_xlatb52 = u_xlat52>=u_xlat5.x;
#endif
    u_xlat52 = u_xlatb52 ? 1.0 : float(0.0);
    u_xlat36.x = u_xlat52 * u_xlat10_36;
    u_xlat16_15 = _DepthFoamDistance + 9.99999975e-05;
    u_xlat16_15 = u_xlat20.x / u_xlat16_15;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_15 = min(max(u_xlat16_15, 0.0), 1.0);
#else
    u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);
#endif
    u_xlat16_20.x = (-u_xlat16_15) + 1.0;
    u_xlat16_15 = vs_COLOR0.y * _DepthFoamColor.w;
    u_xlat16_50 = u_xlat16_50 * u_xlat16_15;
    u_xlat16_50 = u_xlat36.x * u_xlat16_50;
    u_xlat16_50 = u_xlat33 * u_xlat16_50;
    u_xlat16_50 = u_xlat16_20.x * u_xlat16_50;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_50 = min(max(u_xlat16_50, 0.0), 1.0);
#else
    u_xlat16_50 = clamp(u_xlat16_50, 0.0, 1.0);
#endif
    u_xlat16_2.xyz = _DepthFoamColor.xyz * u_xlat16_2.xyz + (-u_xlat1.xyw);
    u_xlat16_2.xyz = vec3(u_xlat16_50) * u_xlat16_2.xyz + u_xlat1.xyw;
    u_xlat0.xyz = u_xlat6.xyz * vec3(u_xlat21) + u_xlat16_2.xyz;
    u_xlat0.w = u_xlat4.x * vs_COLOR0.w;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "MHY_SHADER_MIDDLE" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
uniform 	vec4 hlslcc_mtx4x4_mhyJitteredVP[4];
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
out highp vec4 vs_TEXCOORD9;
out highp vec4 vs_TEXCOORD10;
float u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec4 u_xlat8;
vec3 u_xlat9;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat9.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4_mhyJitteredVP[1];
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[3] * u_xlat2.wwww + u_xlat1;
    u_xlat3.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    u_xlat3.xyw = u_xlat1.xyw;
    gl_Position = u_xlat3;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD1.w = 1.0;
    u_xlat4.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat4.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat4.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat1.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
    u_xlat16_5.x = u_xlat4.y * u_xlat4.y;
    u_xlat16_5.x = u_xlat4.x * u_xlat4.x + (-u_xlat16_5.x);
    u_xlat16_6 = u_xlat4.yzzx * u_xlat4.xyzz;
    u_xlat16_7.x = dot(unity_SHBr, u_xlat16_6);
    u_xlat16_7.y = dot(unity_SHBg, u_xlat16_6);
    u_xlat16_7.z = dot(unity_SHBb, u_xlat16_6);
    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_7.xyz;
    u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat4.w = 1.0;
    u_xlat16_6.x = dot(unity_SHAr, u_xlat4);
    u_xlat16_6.y = dot(unity_SHAg, u_xlat4);
    u_xlat16_6.z = dot(unity_SHAb, u_xlat4);
    u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_6.xyz;
    vs_TEXCOORD1.xyz = u_xlat16_5.xyz;
    u_xlat1.x = u_xlat3.y * _ProjectionParams.x;
    u_xlat8.w = u_xlat1.x * 0.5;
    u_xlat8.xz = u_xlat3.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.z = u_xlat1.z;
    u_xlat3.xy = u_xlat8.zz + u_xlat8.xw;
    vs_TEXCOORD2 = u_xlat3;
    vs_TEXCOORD4.xyw = u_xlat3.xyw;
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD3.w = 0.0;
    u_xlat1.x = u_xlat2.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat2.x + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat2.z + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat2.w + u_xlat1.x;
    vs_TEXCOORD3.z = (-u_xlat1.x);
    vs_TEXCOORD5.w = 0.0;
    vs_TEXCOORD5.xyz = u_xlat9.xyz;
    u_xlat9.xyz = (-u_xlat9.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD6.w = 0.0;
    vs_TEXCOORD6.xyz = u_xlat4.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].www + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * in_POSITION0.yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.zzz + u_xlat1.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.www + u_xlat1.xyz;
    vs_TEXCOORD7.xyz = u_xlat1.xyz * vec3(-1.0, -1.0, 1.0);
    vs_TEXCOORD7.w = 0.0;
    u_xlat1.xyz = in_TANGENT0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat0 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0 = inversesqrt(u_xlat0);
    u_xlat1.xyz = vec3(u_xlat0) * u_xlat1.xyz;
    vs_TEXCOORD8.xyz = u_xlat1.xyz;
    vs_TEXCOORD8.w = 0.0;
    u_xlat2.xyz = u_xlat1.yzx * u_xlat4.zxy;
    u_xlat1.xyz = u_xlat4.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
    u_xlat0 = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD9.xyz = vec3(u_xlat0) * u_xlat1.xyz;
    vs_TEXCOORD9.w = 0.0;
    u_xlat0 = u_xlat9.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat9.x + u_xlat0;
    vs_TEXCOORD10.w = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat9.z + u_xlat0;
    vs_TEXCOORD10.xyz = u_xlat9.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowPos[4];
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _DepthFoamMask_ST;
uniform 	mediump float _DepthFoamSpeed;
uniform 	mediump vec4 _DepthFoamColor;
uniform 	mediump float _DepthFoamExtent;
uniform 	mediump float _DepthFoamDistance;
uniform 	mediump float _DepthFoamSubdivision;
uniform 	mediump float _DepthFoamWidth;
uniform 	mediump float _DepthFoamPhaseScale;
uniform 	mediump float _DepthFoamCloseFadeOffset;
uniform 	mediump float _DepthFoamCloseFadeDistance;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _NormalMapScale;
uniform 	float _Normal01_U_Speed;
uniform 	float _Normal01_VSpeed;
uniform 	float _NormalMapBias;
uniform 	float _Normal02_U_Speed;
uniform 	float _Normal02_V_Speed;
uniform 	float _RefractionIntensity;
uniform 	float _OpacityByDepth;
uniform 	float _SpecularIntensity;
uniform 	vec3 _ES_MoonDirection;
uniform 	vec3 _ES_SunDirection;
uniform 	float _Gloss;
uniform 	float _ShoreTransparency;
uniform 	float _SpecularPower;
uniform 	vec4 _ShallowColor;
uniform 	float _ShoreFade;
uniform 	vec4 _DeepColor;
uniform 	float _DeepColorDepth;
uniform 	float _DeepColorFade;
uniform 	vec4 _DistortionIntensity;
uniform 	float _SSRDistortion;
uniform 	float _SSRDistortion_Shore;
uniform 	float _SSRIntensity;
uniform 	float _ReflectionIntensity;
uniform 	float _FresnelPower;
uniform 	float _ShoreReflectionFade;
uniform 	mediump float _ProjectUVScale;
uniform 	vec4 _ReflectionSkyCubeMap_HDR;
uniform lowp sampler2D _Normal01;
uniform lowp sampler2D _Normal02;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _SceneScaledBufferBeforTransParent;
uniform lowp samplerCube _ReflectionSkyCubeMap;
uniform lowp sampler2D _SSRTexture;
uniform lowp sampler2D _DepthFoamMask;
uniform lowp sampler2DShadow hlslcc_zcmp_CascadeShadowMapTexture;
uniform lowp sampler2D _CascadeShadowMapTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD8;
in highp vec4 vs_TEXCOORD9;
in highp vec4 vs_TEXCOORD10;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec4 u_xlatb0;
vec4 u_xlat1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
lowp vec4 u_xlat10_3;
vec4 u_xlat4;
vec3 u_xlat5;
bool u_xlatb5;
vec3 u_xlat6;
vec4 u_xlat7;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
vec3 u_xlat9;
lowp vec3 u_xlat10_9;
vec3 u_xlat10;
vec3 u_xlat11;
vec3 u_xlat12;
vec3 u_xlat13;
vec3 u_xlat14;
mediump float u_xlat16_15;
vec2 u_xlat17;
mediump vec3 u_xlat16_18;
vec3 u_xlat20;
mediump vec3 u_xlat16_20;
lowp float u_xlat10_20;
int u_xlati20;
uint u_xlatu20;
bool u_xlatb20;
float u_xlat21;
float u_xlat33;
vec2 u_xlat36;
mediump float u_xlat16_36;
lowp float u_xlat10_36;
bool u_xlatb36;
float u_xlat49;
mediump float u_xlat16_50;
float u_xlat52;
mediump float u_xlat16_52;
bool u_xlatb52;
float u_xlat53;
float u_xlat54;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD5.zx * vec2(vec2(_ProjectUVScale, _ProjectUVScale));
    u_xlat1.x = _Time.y * _Normal01_U_Speed + u_xlat0.y;
    u_xlat1.yz = _Time.yy * vec2(_Normal01_VSpeed, _Normal02_U_Speed) + u_xlat0.xy;
    u_xlat1.w = _Time.y * _Normal02_V_Speed + u_xlat0.x;
    u_xlat10_0.xyz = texture(_Normal01, u_xlat1.xy, _NormalMapBias).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_2.xy = u_xlat16_0.xy * vec2(_NormalMapScale);
    u_xlat10_1.xyz = texture(_Normal02, u_xlat1.zw, _NormalMapBias).xyz;
    u_xlat16_0.w = -1.0;
    u_xlat16_3.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.wwz;
    u_xlat16_3.xy = u_xlat16_3.xy * vec2(_NormalMapScale);
    u_xlat16_2.z = -1.0;
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
    u_xlat1.x = float(1.0) / vs_TEXCOORD4.w;
    u_xlat17.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat17.x = texture(_CameraDepthTexture, u_xlat17.xy).x;
    u_xlat17.x = _ZBufferParams.z * u_xlat17.x + _ZBufferParams.w;
    u_xlat17.x = float(1.0) / u_xlat17.x;
    u_xlat33 = vs_TEXCOORD10.w + 9.99999975e-05;
    u_xlat33 = (-u_xlat17.x) / u_xlat33;
    u_xlat33 = vs_TEXCOORD10.y * u_xlat33 + _WorldSpaceCameraPos.y;
    u_xlat33 = (-u_xlat33) + vs_TEXCOORD5.y;
    u_xlat4.xy = u_xlat16_2.xy * vec2(vec2(_RefractionIntensity, _RefractionIntensity));
    u_xlat1.x = u_xlat1.x * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.xw = u_xlat1.xx * u_xlat4.xy;
    u_xlat1.xw = u_xlat1.xw * vs_TEXCOORD4.ww;
    u_xlat17.x = u_xlat17.x + (-vs_TEXCOORD4.w);
#ifdef UNITY_ADRENO_ES3
    u_xlat17.x = min(max(u_xlat17.x, 0.0), 1.0);
#else
    u_xlat17.x = clamp(u_xlat17.x, 0.0, 1.0);
#endif
    u_xlat4.xy = u_xlat17.xx * u_xlat1.xw;
    u_xlat4.z = 0.0;
    u_xlat1.xyw = u_xlat4.xyz + vs_TEXCOORD4.xyw;
    u_xlat1.xy = u_xlat1.xy / u_xlat1.ww;
    u_xlat1.x = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat1.x = _ZBufferParams.z * u_xlat1.x + _ZBufferParams.w;
    u_xlat1.x = float(1.0) / u_xlat1.x;
    u_xlat1.x = u_xlat1.x + (-vs_TEXCOORD4.w);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.xyw = u_xlat1.xxx * u_xlat4.xyz + vs_TEXCOORD4.xyw;
    u_xlat4.xy = u_xlat1.xy / u_xlat1.ww;
    u_xlat49 = texture(_CameraDepthTexture, u_xlat4.xy).x;
    u_xlat49 = _ZBufferParams.z * u_xlat49 + _ZBufferParams.w;
    u_xlat49 = float(1.0) / u_xlat49;
    u_xlat49 = u_xlat49 + (-vs_TEXCOORD4.w);
    u_xlat4.x = 0.100000001 / _OpacityByDepth;
    u_xlat16_3.xz = u_xlat16_2.xy;
    u_xlat16_3.y = 1.0;
    u_xlat16_20.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
    u_xlat16_20.x = inversesqrt(u_xlat16_20.x);
    u_xlat16_20.xyz = u_xlat16_3.xyz * u_xlat16_20.xxx;
#ifdef UNITY_ADRENO_ES3
    u_xlatb5 = !!(0.0>=_ES_MoonDirection.y);
#else
    u_xlatb5 = 0.0>=_ES_MoonDirection.y;
#endif
    u_xlat5.xyz = (bool(u_xlatb5)) ? _ES_SunDirection.xyz : _ES_MoonDirection.xyz;
    u_xlat6.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat53 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat54 = inversesqrt(u_xlat53);
    u_xlat7.xyz = vec3(u_xlat54) * u_xlat6.xyz;
    u_xlat5.xyz = u_xlat6.xyz * vec3(u_xlat54) + u_xlat5.xyz;
    u_xlat6.x = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat5.xyz = u_xlat5.xyz * u_xlat6.xxx;
    u_xlat20.x = dot(u_xlat16_20.xyz, u_xlat5.xyz);
    u_xlat36.x = _Gloss * 128.0;
    u_xlat20.x = max(u_xlat20.x, 9.99999975e-05);
    u_xlat20.x = log2(u_xlat20.x);
    u_xlat20.x = u_xlat20.x * u_xlat36.x;
    u_xlat20.x = exp2(u_xlat20.x);
    u_xlat20.x = u_xlat20.x * _SpecularIntensity;
    u_xlat20.x = max(u_xlat20.x, 0.0);
    u_xlat20.x = min(u_xlat20.x, 16.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb36 = !!(_ES_MoonDirection.y>=9.99999975e-05);
#else
    u_xlatb36 = _ES_MoonDirection.y>=9.99999975e-05;
#endif
    u_xlat36.x = u_xlatb36 ? 1.0 : float(0.0);
    u_xlat52 = _ES_MoonDirection.y + -1.0;
    u_xlat36.x = u_xlat36.x * u_xlat52 + 1.0;
    u_xlat4.w = float(1.0) / _ShoreTransparency;
    u_xlat5.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat5.x = inversesqrt(u_xlat5.x);
    u_xlat5.xyz = u_xlat5.xxx * vs_TEXCOORD6.xyz;
    u_xlat5.x = dot(u_xlat7.xyz, u_xlat5.xyz);
    u_xlat5.x = (-u_xlat5.x) + 1.0;
    u_xlat5.x = max(u_xlat5.x, 9.99999975e-05);
    u_xlat5.x = log2(u_xlat5.x);
    u_xlat21 = u_xlat5.x * _SpecularPower;
    u_xlat21 = exp2(u_xlat21);
    u_xlat6.xyz = u_xlat36.xxx * _LightColor0.xyz;
    u_xlat6.xyz = u_xlat20.xxx * u_xlat6.xyz;
    u_xlat20.x = u_xlat49 + -1.0;
    u_xlat20.x = u_xlat4.w * u_xlat20.x;
    u_xlat20.x = u_xlat20.x * 0.100000001;
#ifdef UNITY_ADRENO_ES3
    u_xlat20.x = min(max(u_xlat20.x, 0.0), 1.0);
#else
    u_xlat20.x = clamp(u_xlat20.x, 0.0, 1.0);
#endif
    u_xlat6.xyz = u_xlat20.xxx * u_xlat6.xyz;
    u_xlat4.xy = vec2(u_xlat49) * u_xlat4.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.xy = min(max(u_xlat4.xy, 0.0), 1.0);
#else
    u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);
#endif
    u_xlat20.x = max(u_xlat4.y, 9.99999975e-05);
    u_xlat20.x = log2(u_xlat20.x);
    u_xlat20.x = u_xlat20.x * _ShoreFade;
    u_xlat20.x = exp2(u_xlat20.x);
    u_xlat8.xyz = _ShallowColor.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat8.xyz = u_xlat20.xxx * u_xlat8.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat1.xy = u_xlat1.xy / vs_TEXCOORD4.ww;
    u_xlat10_9.xyz = texture(_SceneScaledBufferBeforTransParent, u_xlat1.xy).xyz;
    u_xlat10.xyz = u_xlat8.xyz * u_xlat10_9.xyz;
    u_xlat1.x = 0.100000001 / _DeepColorDepth;
    u_xlat1.x = u_xlat1.x * u_xlat49;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.x = max(u_xlat1.x, 9.99999975e-05);
    u_xlat1.x = log2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _DeepColorFade;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat11.xyz = (-u_xlat8.xyz) * u_xlat10_9.xyz + _DeepColor.xyz;
    u_xlat11.xyz = u_xlat1.xxx * u_xlat11.xyz + u_xlat10.xyz;
    u_xlat12.xyz = u_xlat16_2.xyz * _DistortionIntensity.xyz;
    u_xlat13.x = vs_TEXCOORD8.x;
    u_xlat13.y = vs_TEXCOORD9.x;
    u_xlat13.z = vs_TEXCOORD6.x;
    u_xlat13.x = dot(u_xlat13.xyz, u_xlat12.xyz);
    u_xlat14.x = vs_TEXCOORD8.y;
    u_xlat14.y = vs_TEXCOORD9.y;
    u_xlat14.z = vs_TEXCOORD6.y;
    u_xlat13.y = dot(u_xlat14.xyz, u_xlat12.xyz);
    u_xlat14.x = vs_TEXCOORD8.z;
    u_xlat14.y = vs_TEXCOORD9.z;
    u_xlat14.z = vs_TEXCOORD6.z;
    u_xlat13.z = dot(u_xlat14.xyz, u_xlat12.xyz);
    u_xlat1.x = dot(u_xlat13.xyz, u_xlat13.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat13.xyz = u_xlat1.xxx * u_xlat13.xyz;
    u_xlat1.x = dot((-u_xlat7.xyz), u_xlat13.xyz);
    u_xlat1.x = u_xlat1.x + u_xlat1.x;
    u_xlat7.xyz = u_xlat13.xyz * (-u_xlat1.xxx) + (-u_xlat7.xyz);
    u_xlat10_0 = textureLod(_ReflectionSkyCubeMap, u_xlat7.xyz, 0.0);
    u_xlat16_2.x = u_xlat10_0.w + -1.0;
    u_xlat16_2.x = _ReflectionSkyCubeMap_HDR.w * u_xlat16_2.x + 1.0;
    u_xlat16_2.x = log2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * _ReflectionSkyCubeMap_HDR.y;
    u_xlat16_2.x = exp2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * _ReflectionSkyCubeMap_HDR.x;
    u_xlat16_18.xyz = u_xlat10_0.xyz * u_xlat16_2.xxx;
    u_xlat1.xy = u_xlat12.xy * vec2(_SSRDistortion);
    u_xlat36.x = float(1.0) / _SSRDistortion_Shore;
    u_xlat36.x = u_xlat49 * u_xlat36.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat36.x = min(max(u_xlat36.x, 0.0), 1.0);
#else
    u_xlat36.x = clamp(u_xlat36.x, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat1.xy * u_xlat36.xx;
    u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD4.ww + vs_TEXCOORD4.xy;
    u_xlat1.xy = u_xlat1.xy / vs_TEXCOORD4.ww;
    u_xlat10_3 = texture(_SSRTexture, u_xlat1.xy).wxyz;
    u_xlat16_7.xyz = (-u_xlat16_2.xxx) * u_xlat10_0.xyz + u_xlat10_3.yzw;
    u_xlat7.xyz = u_xlat16_7.xyz * vec3(vec3(_SSRIntensity, _SSRIntensity, _SSRIntensity));
    u_xlat16_3.x = u_xlat10_3.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat7.xyz = u_xlat16_3.xxx * u_xlat7.xyz + u_xlat16_18.xyz;
    u_xlat1.x = u_xlat5.x * _FresnelPower;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _ReflectionIntensity;
    u_xlat17.x = float(1.0) / _ShoreReflectionFade;
    u_xlat17.x = u_xlat17.x * u_xlat49;
#ifdef UNITY_ADRENO_ES3
    u_xlat17.x = min(max(u_xlat17.x, 0.0), 1.0);
#else
    u_xlat17.x = clamp(u_xlat17.x, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat17.x * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat7.xyz = (-u_xlat11.xyz) + u_xlat7.xyz;
    u_xlat1.xyw = u_xlat1.xxx * u_xlat7.xyz + u_xlat11.xyz;
    u_xlat1.xyw = (-u_xlat8.xyz) * u_xlat10_9.xyz + u_xlat1.xyw;
    u_xlat1.xyw = u_xlat20.xxx * u_xlat1.xyw + u_xlat10.xyz;
    u_xlat20.x = (-vs_TEXCOORD5.y) * _WorldSpaceLightPos0.w + _WorldSpaceLightPos0.y;
    u_xlat16_2.x = max(u_xlat20.x, 0.0);
    u_xlat20.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowSplitSpheres[0].xyz);
    u_xlat7.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowSplitSpheres[1].xyz);
    u_xlat8.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowSplitSpheres[2].xyz);
    u_xlat9.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowSplitSpheres[3].xyz);
    u_xlat0.x = dot(u_xlat20.xyz, u_xlat20.xyz);
    u_xlat0.y = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat0.z = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat0.w = dot(u_xlat9.xyz, u_xlat9.xyz);
    u_xlatb0 = lessThan(u_xlat0, unity_ShadowSplitSqRadii);
    u_xlat0 = mix(vec4(0.0, 0.0, 0.0, 0.0), vec4(1.0, 1.0, 1.0, 1.0), vec4(u_xlatb0));
    u_xlat16_18.x = u_xlat0.y + u_xlat0.x;
    u_xlat16_18.y = u_xlat0.z + u_xlat16_18.x;
    u_xlat3.x = -0.0;
    u_xlat3.y = (-u_xlat0.x);
    u_xlat3.zw = (-u_xlat16_18.xy);
    u_xlat0 = u_xlat0 + u_xlat3;
    u_xlat0 = max(u_xlat0, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat16_18.x = dot(u_xlat0, vec4(1.0, 1.0, 1.0, 1.0));
#ifdef UNITY_ADRENO_ES3
    u_xlatb20 = !!(u_xlat16_18.x>=0.5);
#else
    u_xlatb20 = u_xlat16_18.x>=0.5;
#endif
    if(u_xlatb20){
        u_xlat20.x = dot(u_xlat0.yzw, vec3(1.0, 2.0, 3.0));
        u_xlat20.x = min(u_xlat20.x, 3.0);
        u_xlatu20 = uint(u_xlat20.x);
        u_xlat7.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowPos[int(u_xlatu20)].xyz);
        u_xlati20 = int(u_xlatu20) << 2;
        u_xlat8.xyz = u_xlat7.yyy * hlslcc_mtx4x4unity_WorldToShadow[(u_xlati20 + 1)].xyz;
        u_xlat7.xyw = hlslcc_mtx4x4unity_WorldToShadow[u_xlati20].xyz * u_xlat7.xxx + u_xlat8.xyz;
        u_xlat7.xyz = hlslcc_mtx4x4unity_WorldToShadow[(u_xlati20 + 2)].xyz * u_xlat7.zzz + u_xlat7.xyw;
        u_xlat20.xyz = u_xlat7.xyz + hlslcc_mtx4x4unity_WorldToShadow[(u_xlati20 + 3)].xyz;
        vec3 txVec0 = vec3(u_xlat20.xy,u_xlat20.z);
        u_xlat10_20 = textureLod(hlslcc_zcmp_CascadeShadowMapTexture, txVec0, 0.0);
        u_xlat16_36 = (-_LightShadowData.x) + 1.0;
        u_xlat20.x = u_xlat10_20 * u_xlat16_36 + _LightShadowData.x;
    } else {
        u_xlat20.x = 1.0;
    //ENDIF
    }
    u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;
    u_xlat20.xyz = u_xlat16_2.xyz * u_xlat20.xxx + vs_TEXCOORD1.xyz;
    u_xlat16_2.xyz = u_xlat20.xyz * vec3(0.300000012, 0.300000012, 0.300000012) + vec3(0.699999988, 0.699999988, 0.699999988);
    u_xlat20.x = sqrt(u_xlat53);
    u_xlat16_50 = u_xlat20.x + (-_DepthFoamCloseFadeOffset);
    u_xlat16_50 = u_xlat16_50 / _DepthFoamCloseFadeDistance;
    u_xlat16_15 = vs_COLOR0.x * _DepthFoamExtent;
    u_xlat33 = max(u_xlat33, 0.0);
    u_xlat33 = min(u_xlat16_15, u_xlat33);
    u_xlat16_15 = _DepthFoamExtent * vs_COLOR0.x + 9.99999975e-05;
    u_xlat33 = u_xlat33 / u_xlat16_15;
    u_xlat33 = (-u_xlat33) + 1.0;
    u_xlat36.xy = vec2(_Time.y * _DepthFoamMask_ST.z, _Time.y * _DepthFoamMask_ST.w);
    u_xlat36.xy = fract(u_xlat36.xy);
    u_xlat36.xy = _DepthFoamMask_ST.xy * vs_TEXCOORD5.xz + u_xlat36.xy;
    u_xlat10_36 = texture(_DepthFoamMask, u_xlat36.xy).x;
    u_xlat52 = vs_TEXCOORD5.z + vs_TEXCOORD5.x;
    u_xlat52 = u_xlat52 * _DepthFoamPhaseScale;
    u_xlat52 = _DepthFoamSpeed * _Time.y + u_xlat52;
    u_xlat5.x = (-u_xlat33) + 1.0;
    u_xlat16_15 = _DepthFoamSubdivision * u_xlat33 + u_xlat52;
    u_xlat16_15 = sin(u_xlat16_15);
    u_xlat16_15 = _DepthFoamWidth * u_xlat33 + u_xlat16_15;
    u_xlat16_52 = u_xlat10_36 * 2.0 + -1.0;
    u_xlat52 = u_xlat16_52 + u_xlat16_15;
#ifdef UNITY_ADRENO_ES3
    u_xlatb52 = !!(u_xlat52>=u_xlat5.x);
#else
    u_xlatb52 = u_xlat52>=u_xlat5.x;
#endif
    u_xlat52 = u_xlatb52 ? 1.0 : float(0.0);
    u_xlat36.x = u_xlat52 * u_xlat10_36;
    u_xlat16_15 = _DepthFoamDistance + 9.99999975e-05;
    u_xlat16_15 = u_xlat20.x / u_xlat16_15;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_15 = min(max(u_xlat16_15, 0.0), 1.0);
#else
    u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);
#endif
    u_xlat16_20.x = (-u_xlat16_15) + 1.0;
    u_xlat16_15 = vs_COLOR0.y * _DepthFoamColor.w;
    u_xlat16_50 = u_xlat16_50 * u_xlat16_15;
    u_xlat16_50 = u_xlat36.x * u_xlat16_50;
    u_xlat16_50 = u_xlat33 * u_xlat16_50;
    u_xlat16_50 = u_xlat16_20.x * u_xlat16_50;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_50 = min(max(u_xlat16_50, 0.0), 1.0);
#else
    u_xlat16_50 = clamp(u_xlat16_50, 0.0, 1.0);
#endif
    u_xlat16_2.xyz = _DepthFoamColor.xyz * u_xlat16_2.xyz + (-u_xlat1.xyw);
    u_xlat16_2.xyz = vec3(u_xlat16_50) * u_xlat16_2.xyz + u_xlat1.xyw;
    u_xlat0.xyz = u_xlat6.xyz * vec3(u_xlat21) + u_xlat16_2.xyz;
    u_xlat0.w = u_xlat4.x * vs_COLOR0.w;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "MHY_SHADER_LOW" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump float _MHYZBias;
uniform 	vec4 hlslcc_mtx4x4_mhyJitteredVP[4];
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
out highp vec4 vs_TEXCOORD9;
out highp vec4 vs_TEXCOORD10;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec4 u_xlat8;
float u_xlat27;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4_mhyJitteredVP[1];
    u_xlat2 = hlslcc_mtx4x4_mhyJitteredVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4_mhyJitteredVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4_mhyJitteredVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat3.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    u_xlat3.xyw = u_xlat2.xyw;
    gl_Position = u_xlat3;
    vs_COLOR0 = in_COLOR0;
    u_xlat4.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat4.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat4.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat27 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat4.xyz = vec3(u_xlat27) * u_xlat4.xyz;
    u_xlat16_5.x = u_xlat4.y * u_xlat4.y;
    u_xlat16_5.x = u_xlat4.x * u_xlat4.x + (-u_xlat16_5.x);
    u_xlat16_6 = u_xlat4.yzzx * u_xlat4.xyzz;
    u_xlat16_7.x = dot(unity_SHBr, u_xlat16_6);
    u_xlat16_7.y = dot(unity_SHBg, u_xlat16_6);
    u_xlat16_7.z = dot(unity_SHBb, u_xlat16_6);
    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_7.xyz;
    u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat4.w = 1.0;
    u_xlat16_6.x = dot(unity_SHAr, u_xlat4);
    u_xlat16_6.y = dot(unity_SHAg, u_xlat4);
    u_xlat16_6.z = dot(unity_SHAb, u_xlat4);
    u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_6.xyz;
    vs_TEXCOORD1.xyz = u_xlat16_5.xyz;
    vs_TEXCOORD1.w = 1.0;
    u_xlat27 = u_xlat3.y * _ProjectionParams.x;
    u_xlat8.w = u_xlat27 * 0.5;
    u_xlat8.xz = u_xlat3.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.z = u_xlat2.z;
    u_xlat3.xy = u_xlat8.zz + u_xlat8.xw;
    vs_TEXCOORD2 = u_xlat3;
    vs_TEXCOORD4.xyw = u_xlat3.xyw;
    u_xlat27 = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat27 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat27;
    u_xlat27 = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat27;
    u_xlat27 = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat27;
    vs_TEXCOORD3.z = (-u_xlat27);
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD3.w = 0.0;
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD5.w = 0.0;
    vs_TEXCOORD6.xyz = u_xlat4.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[1].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].www + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * in_POSITION0.yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.zzz + u_xlat1.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.www + u_xlat1.xyz;
    vs_TEXCOORD7.xyz = u_xlat1.xyz * vec3(-1.0, -1.0, 1.0);
    vs_TEXCOORD7.w = 0.0;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat27 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat1.xyz = vec3(u_xlat27) * u_xlat1.xyz;
    vs_TEXCOORD8.xyz = u_xlat1.xyz;
    vs_TEXCOORD8.w = 0.0;
    u_xlat2.xyz = u_xlat1.yzx * u_xlat4.zxy;
    u_xlat1.xyz = u_xlat4.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
    u_xlat27 = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD9.xyz = vec3(u_xlat27) * u_xlat1.xyz;
    vs_TEXCOORD9.w = 0.0;
    u_xlat27 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat27 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat27;
    vs_TEXCOORD10.w = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat27;
    vs_TEXCOORD10.xyz = u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowPos[4];
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _DepthFoamMask_ST;
uniform 	mediump float _DepthFoamSpeed;
uniform 	mediump vec4 _DepthFoamColor;
uniform 	mediump float _DepthFoamExtent;
uniform 	mediump float _DepthFoamDistance;
uniform 	mediump float _DepthFoamSubdivision;
uniform 	mediump float _DepthFoamWidth;
uniform 	mediump float _DepthFoamPhaseScale;
uniform 	mediump float _DepthFoamCloseFadeOffset;
uniform 	mediump float _DepthFoamCloseFadeDistance;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _NormalMapScale;
uniform 	float _Normal01_U_Speed;
uniform 	float _Normal01_VSpeed;
uniform 	float _NormalMapBias;
uniform 	float _Normal02_U_Speed;
uniform 	float _Normal02_V_Speed;
uniform 	float _RefractionIntensity;
uniform 	float _OpacityByDepth;
uniform 	float _SpecularIntensity;
uniform 	vec3 _ES_MoonDirection;
uniform 	vec3 _ES_SunDirection;
uniform 	float _Gloss;
uniform 	float _ShoreTransparency;
uniform 	float _SpecularPower;
uniform 	vec4 _ShallowColor;
uniform 	float _ShoreFade;
uniform 	vec4 _DeepColor;
uniform 	float _DeepColorDepth;
uniform 	float _DeepColorFade;
uniform 	vec4 _DistortionIntensity;
uniform 	float _ReflectionIntensity;
uniform 	float _FresnelPower;
uniform 	float _ShoreReflectionFade;
uniform 	mediump float _ProjectUVScale;
uniform 	vec4 _ReflectionSkyCubeMap_HDR;
uniform lowp sampler2D _Normal01;
uniform lowp sampler2D _Normal02;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _SceneScaledBufferBeforTransParent;
uniform lowp samplerCube _ReflectionSkyCubeMap;
uniform lowp sampler2D _DepthFoamMask;
uniform lowp sampler2DShadow hlslcc_zcmp_CascadeShadowMapTexture;
uniform lowp sampler2D _CascadeShadowMapTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD8;
in highp vec4 vs_TEXCOORD9;
in highp vec4 vs_TEXCOORD10;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec4 u_xlatb0;
vec4 u_xlat1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec4 u_xlat4;
vec3 u_xlat5;
bool u_xlatb5;
vec3 u_xlat6;
vec4 u_xlat7;
vec3 u_xlat8;
vec3 u_xlat9;
lowp vec3 u_xlat10_9;
vec3 u_xlat10;
vec3 u_xlat11;
vec3 u_xlat12;
vec3 u_xlat13;
vec3 u_xlat14;
mediump float u_xlat16_15;
vec2 u_xlat17;
mediump vec2 u_xlat16_18;
vec3 u_xlat20;
mediump vec3 u_xlat16_20;
lowp float u_xlat10_20;
int u_xlati20;
uint u_xlatu20;
bool u_xlatb20;
float u_xlat21;
float u_xlat33;
vec2 u_xlat36;
mediump float u_xlat16_36;
lowp float u_xlat10_36;
bool u_xlatb36;
float u_xlat49;
mediump float u_xlat16_50;
float u_xlat52;
mediump float u_xlat16_52;
bool u_xlatb52;
float u_xlat53;
float u_xlat54;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD5.zx * vec2(vec2(_ProjectUVScale, _ProjectUVScale));
    u_xlat1.x = _Time.y * _Normal01_U_Speed + u_xlat0.y;
    u_xlat1.yz = _Time.yy * vec2(_Normal01_VSpeed, _Normal02_U_Speed) + u_xlat0.xy;
    u_xlat1.w = _Time.y * _Normal02_V_Speed + u_xlat0.x;
    u_xlat10_0.xyz = texture(_Normal01, u_xlat1.xy, _NormalMapBias).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_2.xy = u_xlat16_0.xy * vec2(_NormalMapScale);
    u_xlat10_1.xyz = texture(_Normal02, u_xlat1.zw, _NormalMapBias).xyz;
    u_xlat16_0.w = -1.0;
    u_xlat16_3.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.wwz;
    u_xlat16_3.xy = u_xlat16_3.xy * vec2(_NormalMapScale);
    u_xlat16_2.z = -1.0;
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
    u_xlat1.x = float(1.0) / vs_TEXCOORD4.w;
    u_xlat17.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat17.x = texture(_CameraDepthTexture, u_xlat17.xy).x;
    u_xlat17.x = _ZBufferParams.z * u_xlat17.x + _ZBufferParams.w;
    u_xlat17.x = float(1.0) / u_xlat17.x;
    u_xlat33 = vs_TEXCOORD10.w + 9.99999975e-05;
    u_xlat33 = (-u_xlat17.x) / u_xlat33;
    u_xlat33 = vs_TEXCOORD10.y * u_xlat33 + _WorldSpaceCameraPos.y;
    u_xlat33 = (-u_xlat33) + vs_TEXCOORD5.y;
    u_xlat4.xy = u_xlat16_2.xy * vec2(vec2(_RefractionIntensity, _RefractionIntensity));
    u_xlat1.x = u_xlat1.x * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.xw = u_xlat1.xx * u_xlat4.xy;
    u_xlat1.xw = u_xlat1.xw * vs_TEXCOORD4.ww;
    u_xlat17.x = u_xlat17.x + (-vs_TEXCOORD4.w);
#ifdef UNITY_ADRENO_ES3
    u_xlat17.x = min(max(u_xlat17.x, 0.0), 1.0);
#else
    u_xlat17.x = clamp(u_xlat17.x, 0.0, 1.0);
#endif
    u_xlat4.xy = u_xlat17.xx * u_xlat1.xw;
    u_xlat4.z = 0.0;
    u_xlat1.xyw = u_xlat4.xyz + vs_TEXCOORD4.xyw;
    u_xlat1.xy = u_xlat1.xy / u_xlat1.ww;
    u_xlat1.x = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat1.x = _ZBufferParams.z * u_xlat1.x + _ZBufferParams.w;
    u_xlat1.x = float(1.0) / u_xlat1.x;
    u_xlat1.x = u_xlat1.x + (-vs_TEXCOORD4.w);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.xyw = u_xlat1.xxx * u_xlat4.xyz + vs_TEXCOORD4.xyw;
    u_xlat4.xy = u_xlat1.xy / u_xlat1.ww;
    u_xlat49 = texture(_CameraDepthTexture, u_xlat4.xy).x;
    u_xlat49 = _ZBufferParams.z * u_xlat49 + _ZBufferParams.w;
    u_xlat49 = float(1.0) / u_xlat49;
    u_xlat49 = u_xlat49 + (-vs_TEXCOORD4.w);
    u_xlat4.x = 0.100000001 / _OpacityByDepth;
    u_xlat16_3.xz = u_xlat16_2.xy;
    u_xlat16_3.y = 1.0;
    u_xlat16_20.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
    u_xlat16_20.x = inversesqrt(u_xlat16_20.x);
    u_xlat16_20.xyz = u_xlat16_3.xyz * u_xlat16_20.xxx;
#ifdef UNITY_ADRENO_ES3
    u_xlatb5 = !!(0.0>=_ES_MoonDirection.y);
#else
    u_xlatb5 = 0.0>=_ES_MoonDirection.y;
#endif
    u_xlat5.xyz = (bool(u_xlatb5)) ? _ES_SunDirection.xyz : _ES_MoonDirection.xyz;
    u_xlat6.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat53 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat54 = inversesqrt(u_xlat53);
    u_xlat7.xyz = vec3(u_xlat54) * u_xlat6.xyz;
    u_xlat5.xyz = u_xlat6.xyz * vec3(u_xlat54) + u_xlat5.xyz;
    u_xlat6.x = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat5.xyz = u_xlat5.xyz * u_xlat6.xxx;
    u_xlat20.x = dot(u_xlat16_20.xyz, u_xlat5.xyz);
    u_xlat36.x = _Gloss * 128.0;
    u_xlat20.x = max(u_xlat20.x, 9.99999975e-05);
    u_xlat20.x = log2(u_xlat20.x);
    u_xlat20.x = u_xlat20.x * u_xlat36.x;
    u_xlat20.x = exp2(u_xlat20.x);
    u_xlat20.x = u_xlat20.x * _SpecularIntensity;
    u_xlat20.x = max(u_xlat20.x, 0.0);
    u_xlat20.x = min(u_xlat20.x, 16.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb36 = !!(_ES_MoonDirection.y>=9.99999975e-05);
#else
    u_xlatb36 = _ES_MoonDirection.y>=9.99999975e-05;
#endif
    u_xlat36.x = u_xlatb36 ? 1.0 : float(0.0);
    u_xlat52 = _ES_MoonDirection.y + -1.0;
    u_xlat36.x = u_xlat36.x * u_xlat52 + 1.0;
    u_xlat4.w = float(1.0) / _ShoreTransparency;
    u_xlat5.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat5.x = inversesqrt(u_xlat5.x);
    u_xlat5.xyz = u_xlat5.xxx * vs_TEXCOORD6.xyz;
    u_xlat5.x = dot(u_xlat7.xyz, u_xlat5.xyz);
    u_xlat5.x = (-u_xlat5.x) + 1.0;
    u_xlat5.x = max(u_xlat5.x, 9.99999975e-05);
    u_xlat5.x = log2(u_xlat5.x);
    u_xlat21 = u_xlat5.x * _SpecularPower;
    u_xlat21 = exp2(u_xlat21);
    u_xlat6.xyz = u_xlat36.xxx * _LightColor0.xyz;
    u_xlat6.xyz = u_xlat20.xxx * u_xlat6.xyz;
    u_xlat20.x = u_xlat49 + -1.0;
    u_xlat20.x = u_xlat4.w * u_xlat20.x;
    u_xlat20.x = u_xlat20.x * 0.100000001;
#ifdef UNITY_ADRENO_ES3
    u_xlat20.x = min(max(u_xlat20.x, 0.0), 1.0);
#else
    u_xlat20.x = clamp(u_xlat20.x, 0.0, 1.0);
#endif
    u_xlat6.xyz = u_xlat20.xxx * u_xlat6.xyz;
    u_xlat4.xy = vec2(u_xlat49) * u_xlat4.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.xy = min(max(u_xlat4.xy, 0.0), 1.0);
#else
    u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);
#endif
    u_xlat20.x = max(u_xlat4.y, 9.99999975e-05);
    u_xlat20.x = log2(u_xlat20.x);
    u_xlat20.x = u_xlat20.x * _ShoreFade;
    u_xlat20.x = exp2(u_xlat20.x);
    u_xlat8.xyz = _ShallowColor.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat8.xyz = u_xlat20.xxx * u_xlat8.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat1.xy = u_xlat1.xy / vs_TEXCOORD4.ww;
    u_xlat10_9.xyz = texture(_SceneScaledBufferBeforTransParent, u_xlat1.xy).xyz;
    u_xlat10.xyz = u_xlat8.xyz * u_xlat10_9.xyz;
    u_xlat1.x = 0.100000001 / _DeepColorDepth;
    u_xlat1.x = u_xlat1.x * u_xlat49;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.x = max(u_xlat1.x, 9.99999975e-05);
    u_xlat1.x = log2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _DeepColorFade;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat11.xyz = (-u_xlat8.xyz) * u_xlat10_9.xyz + _DeepColor.xyz;
    u_xlat11.xyz = u_xlat1.xxx * u_xlat11.xyz + u_xlat10.xyz;
    u_xlat12.xyz = u_xlat16_2.xyz * _DistortionIntensity.xyz;
    u_xlat13.x = vs_TEXCOORD8.x;
    u_xlat13.y = vs_TEXCOORD9.x;
    u_xlat13.z = vs_TEXCOORD6.x;
    u_xlat13.x = dot(u_xlat13.xyz, u_xlat12.xyz);
    u_xlat14.x = vs_TEXCOORD8.y;
    u_xlat14.y = vs_TEXCOORD9.y;
    u_xlat14.z = vs_TEXCOORD6.y;
    u_xlat13.y = dot(u_xlat14.xyz, u_xlat12.xyz);
    u_xlat14.x = vs_TEXCOORD8.z;
    u_xlat14.y = vs_TEXCOORD9.z;
    u_xlat14.z = vs_TEXCOORD6.z;
    u_xlat13.z = dot(u_xlat14.xyz, u_xlat12.xyz);
    u_xlat1.x = dot(u_xlat13.xyz, u_xlat13.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat12.xyz = u_xlat1.xxx * u_xlat13.xyz;
    u_xlat1.x = dot((-u_xlat7.xyz), u_xlat12.xyz);
    u_xlat1.x = u_xlat1.x + u_xlat1.x;
    u_xlat7.xyz = u_xlat12.xyz * (-u_xlat1.xxx) + (-u_xlat7.xyz);
    u_xlat10_0 = textureLod(_ReflectionSkyCubeMap, u_xlat7.xyz, 0.0);
    u_xlat16_2.x = u_xlat10_0.w + -1.0;
    u_xlat16_2.x = _ReflectionSkyCubeMap_HDR.w * u_xlat16_2.x + 1.0;
    u_xlat16_2.x = log2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * _ReflectionSkyCubeMap_HDR.y;
    u_xlat16_2.x = exp2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * _ReflectionSkyCubeMap_HDR.x;
    u_xlat1.x = u_xlat5.x * _FresnelPower;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _ReflectionIntensity;
    u_xlat17.x = float(1.0) / _ShoreReflectionFade;
    u_xlat17.x = u_xlat17.x * u_xlat49;
#ifdef UNITY_ADRENO_ES3
    u_xlat17.x = min(max(u_xlat17.x, 0.0), 1.0);
#else
    u_xlat17.x = clamp(u_xlat17.x, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat17.x * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat7.xyz = u_xlat16_2.xxx * u_xlat10_0.xyz + (-u_xlat11.xyz);
    u_xlat1.xyw = u_xlat1.xxx * u_xlat7.xyz + u_xlat11.xyz;
    u_xlat1.xyw = (-u_xlat8.xyz) * u_xlat10_9.xyz + u_xlat1.xyw;
    u_xlat1.xyw = u_xlat20.xxx * u_xlat1.xyw + u_xlat10.xyz;
    u_xlat20.x = (-vs_TEXCOORD5.y) * _WorldSpaceLightPos0.w + _WorldSpaceLightPos0.y;
    u_xlat16_2.x = max(u_xlat20.x, 0.0);
    u_xlat20.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowSplitSpheres[0].xyz);
    u_xlat7.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowSplitSpheres[1].xyz);
    u_xlat8.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowSplitSpheres[2].xyz);
    u_xlat9.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowSplitSpheres[3].xyz);
    u_xlat0.x = dot(u_xlat20.xyz, u_xlat20.xyz);
    u_xlat0.y = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat0.z = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat0.w = dot(u_xlat9.xyz, u_xlat9.xyz);
    u_xlatb0 = lessThan(u_xlat0, unity_ShadowSplitSqRadii);
    u_xlat0 = mix(vec4(0.0, 0.0, 0.0, 0.0), vec4(1.0, 1.0, 1.0, 1.0), vec4(u_xlatb0));
    u_xlat16_18.x = u_xlat0.y + u_xlat0.x;
    u_xlat16_18.y = u_xlat0.z + u_xlat16_18.x;
    u_xlat3.x = -0.0;
    u_xlat3.y = (-u_xlat0.x);
    u_xlat3.zw = (-u_xlat16_18.xy);
    u_xlat0 = u_xlat0 + u_xlat3;
    u_xlat0 = max(u_xlat0, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat16_18.x = dot(u_xlat0, vec4(1.0, 1.0, 1.0, 1.0));
#ifdef UNITY_ADRENO_ES3
    u_xlatb20 = !!(u_xlat16_18.x>=0.5);
#else
    u_xlatb20 = u_xlat16_18.x>=0.5;
#endif
    if(u_xlatb20){
        u_xlat20.x = dot(u_xlat0.yzw, vec3(1.0, 2.0, 3.0));
        u_xlat20.x = min(u_xlat20.x, 3.0);
        u_xlatu20 = uint(u_xlat20.x);
        u_xlat7.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowPos[int(u_xlatu20)].xyz);
        u_xlati20 = int(u_xlatu20) << 2;
        u_xlat8.xyz = u_xlat7.yyy * hlslcc_mtx4x4unity_WorldToShadow[(u_xlati20 + 1)].xyz;
        u_xlat7.xyw = hlslcc_mtx4x4unity_WorldToShadow[u_xlati20].xyz * u_xlat7.xxx + u_xlat8.xyz;
        u_xlat7.xyz = hlslcc_mtx4x4unity_WorldToShadow[(u_xlati20 + 2)].xyz * u_xlat7.zzz + u_xlat7.xyw;
        u_xlat20.xyz = u_xlat7.xyz + hlslcc_mtx4x4unity_WorldToShadow[(u_xlati20 + 3)].xyz;
        vec3 txVec0 = vec3(u_xlat20.xy,u_xlat20.z);
        u_xlat10_20 = textureLod(hlslcc_zcmp_CascadeShadowMapTexture, txVec0, 0.0);
        u_xlat16_36 = (-_LightShadowData.x) + 1.0;
        u_xlat20.x = u_xlat10_20 * u_xlat16_36 + _LightShadowData.x;
    } else {
        u_xlat20.x = 1.0;
    //ENDIF
    }
    u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;
    u_xlat20.xyz = u_xlat16_2.xyz * u_xlat20.xxx + vs_TEXCOORD1.xyz;
    u_xlat16_2.xyz = u_xlat20.xyz * vec3(0.300000012, 0.300000012, 0.300000012) + vec3(0.699999988, 0.699999988, 0.699999988);
    u_xlat20.x = sqrt(u_xlat53);
    u_xlat16_50 = u_xlat20.x + (-_DepthFoamCloseFadeOffset);
    u_xlat16_50 = u_xlat16_50 / _DepthFoamCloseFadeDistance;
    u_xlat16_15 = vs_COLOR0.x * _DepthFoamExtent;
    u_xlat33 = max(u_xlat33, 0.0);
    u_xlat33 = min(u_xlat16_15, u_xlat33);
    u_xlat16_15 = _DepthFoamExtent * vs_COLOR0.x + 9.99999975e-05;
    u_xlat33 = u_xlat33 / u_xlat16_15;
    u_xlat33 = (-u_xlat33) + 1.0;
    u_xlat36.xy = vec2(_Time.y * _DepthFoamMask_ST.z, _Time.y * _DepthFoamMask_ST.w);
    u_xlat36.xy = fract(u_xlat36.xy);
    u_xlat36.xy = _DepthFoamMask_ST.xy * vs_TEXCOORD5.xz + u_xlat36.xy;
    u_xlat10_36 = texture(_DepthFoamMask, u_xlat36.xy).x;
    u_xlat52 = vs_TEXCOORD5.z + vs_TEXCOORD5.x;
    u_xlat52 = u_xlat52 * _DepthFoamPhaseScale;
    u_xlat52 = _DepthFoamSpeed * _Time.y + u_xlat52;
    u_xlat5.x = (-u_xlat33) + 1.0;
    u_xlat16_15 = _DepthFoamSubdivision * u_xlat33 + u_xlat52;
    u_xlat16_15 = sin(u_xlat16_15);
    u_xlat16_15 = _DepthFoamWidth * u_xlat33 + u_xlat16_15;
    u_xlat16_52 = u_xlat10_36 * 2.0 + -1.0;
    u_xlat52 = u_xlat16_52 + u_xlat16_15;
#ifdef UNITY_ADRENO_ES3
    u_xlatb52 = !!(u_xlat52>=u_xlat5.x);
#else
    u_xlatb52 = u_xlat52>=u_xlat5.x;
#endif
    u_xlat52 = u_xlatb52 ? 1.0 : float(0.0);
    u_xlat36.x = u_xlat52 * u_xlat10_36;
    u_xlat16_15 = _DepthFoamDistance + 9.99999975e-05;
    u_xlat16_15 = u_xlat20.x / u_xlat16_15;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_15 = min(max(u_xlat16_15, 0.0), 1.0);
#else
    u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);
#endif
    u_xlat16_20.x = (-u_xlat16_15) + 1.0;
    u_xlat16_15 = vs_COLOR0.y * _DepthFoamColor.w;
    u_xlat16_50 = u_xlat16_50 * u_xlat16_15;
    u_xlat16_50 = u_xlat36.x * u_xlat16_50;
    u_xlat16_50 = u_xlat33 * u_xlat16_50;
    u_xlat16_50 = u_xlat16_20.x * u_xlat16_50;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_50 = min(max(u_xlat16_50, 0.0), 1.0);
#else
    u_xlat16_50 = clamp(u_xlat16_50, 0.0, 1.0);
#endif
    u_xlat16_2.xyz = _DepthFoamColor.xyz * u_xlat16_2.xyz + (-u_xlat1.xyw);
    u_xlat16_2.xyz = vec3(u_xlat16_50) * u_xlat16_2.xyz + u_xlat1.xyw;
    u_xlat0.xyz = u_xlat6.xyz * vec3(u_xlat21) + u_xlat16_2.xyz;
    u_xlat0.w = u_xlat4.x * vs_COLOR0.w;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "MHY_SHADER_LOW" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
uniform 	vec4 hlslcc_mtx4x4_mhyJitteredVP[4];
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
out highp vec4 vs_TEXCOORD9;
out highp vec4 vs_TEXCOORD10;
float u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec4 u_xlat8;
vec3 u_xlat9;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat9.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4_mhyJitteredVP[1];
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[3] * u_xlat2.wwww + u_xlat1;
    u_xlat3.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    u_xlat3.xyw = u_xlat1.xyw;
    gl_Position = u_xlat3;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD1.w = 1.0;
    u_xlat4.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat4.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat4.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat1.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
    u_xlat16_5.x = u_xlat4.y * u_xlat4.y;
    u_xlat16_5.x = u_xlat4.x * u_xlat4.x + (-u_xlat16_5.x);
    u_xlat16_6 = u_xlat4.yzzx * u_xlat4.xyzz;
    u_xlat16_7.x = dot(unity_SHBr, u_xlat16_6);
    u_xlat16_7.y = dot(unity_SHBg, u_xlat16_6);
    u_xlat16_7.z = dot(unity_SHBb, u_xlat16_6);
    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_7.xyz;
    u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat4.w = 1.0;
    u_xlat16_6.x = dot(unity_SHAr, u_xlat4);
    u_xlat16_6.y = dot(unity_SHAg, u_xlat4);
    u_xlat16_6.z = dot(unity_SHAb, u_xlat4);
    u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_6.xyz;
    vs_TEXCOORD1.xyz = u_xlat16_5.xyz;
    u_xlat1.x = u_xlat3.y * _ProjectionParams.x;
    u_xlat8.w = u_xlat1.x * 0.5;
    u_xlat8.xz = u_xlat3.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.z = u_xlat1.z;
    u_xlat3.xy = u_xlat8.zz + u_xlat8.xw;
    vs_TEXCOORD2 = u_xlat3;
    vs_TEXCOORD4.xyw = u_xlat3.xyw;
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD3.w = 0.0;
    u_xlat1.x = u_xlat2.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat2.x + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat2.z + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat2.w + u_xlat1.x;
    vs_TEXCOORD3.z = (-u_xlat1.x);
    vs_TEXCOORD5.w = 0.0;
    vs_TEXCOORD5.xyz = u_xlat9.xyz;
    u_xlat9.xyz = (-u_xlat9.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD6.w = 0.0;
    vs_TEXCOORD6.xyz = u_xlat4.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].www + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * in_POSITION0.yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.zzz + u_xlat1.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.www + u_xlat1.xyz;
    vs_TEXCOORD7.xyz = u_xlat1.xyz * vec3(-1.0, -1.0, 1.0);
    vs_TEXCOORD7.w = 0.0;
    u_xlat1.xyz = in_TANGENT0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat0 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0 = inversesqrt(u_xlat0);
    u_xlat1.xyz = vec3(u_xlat0) * u_xlat1.xyz;
    vs_TEXCOORD8.xyz = u_xlat1.xyz;
    vs_TEXCOORD8.w = 0.0;
    u_xlat2.xyz = u_xlat1.yzx * u_xlat4.zxy;
    u_xlat1.xyz = u_xlat4.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
    u_xlat0 = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD9.xyz = vec3(u_xlat0) * u_xlat1.xyz;
    vs_TEXCOORD9.w = 0.0;
    u_xlat0 = u_xlat9.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat9.x + u_xlat0;
    vs_TEXCOORD10.w = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat9.z + u_xlat0;
    vs_TEXCOORD10.xyz = u_xlat9.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowPos[4];
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _DepthFoamMask_ST;
uniform 	mediump float _DepthFoamSpeed;
uniform 	mediump vec4 _DepthFoamColor;
uniform 	mediump float _DepthFoamExtent;
uniform 	mediump float _DepthFoamDistance;
uniform 	mediump float _DepthFoamSubdivision;
uniform 	mediump float _DepthFoamWidth;
uniform 	mediump float _DepthFoamPhaseScale;
uniform 	mediump float _DepthFoamCloseFadeOffset;
uniform 	mediump float _DepthFoamCloseFadeDistance;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _NormalMapScale;
uniform 	float _Normal01_U_Speed;
uniform 	float _Normal01_VSpeed;
uniform 	float _NormalMapBias;
uniform 	float _Normal02_U_Speed;
uniform 	float _Normal02_V_Speed;
uniform 	float _RefractionIntensity;
uniform 	float _OpacityByDepth;
uniform 	float _SpecularIntensity;
uniform 	vec3 _ES_MoonDirection;
uniform 	vec3 _ES_SunDirection;
uniform 	float _Gloss;
uniform 	float _ShoreTransparency;
uniform 	float _SpecularPower;
uniform 	vec4 _ShallowColor;
uniform 	float _ShoreFade;
uniform 	vec4 _DeepColor;
uniform 	float _DeepColorDepth;
uniform 	float _DeepColorFade;
uniform 	vec4 _DistortionIntensity;
uniform 	float _ReflectionIntensity;
uniform 	float _FresnelPower;
uniform 	float _ShoreReflectionFade;
uniform 	mediump float _ProjectUVScale;
uniform 	vec4 _ReflectionSkyCubeMap_HDR;
uniform lowp sampler2D _Normal01;
uniform lowp sampler2D _Normal02;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _SceneScaledBufferBeforTransParent;
uniform lowp samplerCube _ReflectionSkyCubeMap;
uniform lowp sampler2D _DepthFoamMask;
uniform lowp sampler2DShadow hlslcc_zcmp_CascadeShadowMapTexture;
uniform lowp sampler2D _CascadeShadowMapTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD8;
in highp vec4 vs_TEXCOORD9;
in highp vec4 vs_TEXCOORD10;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec4 u_xlatb0;
vec4 u_xlat1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec4 u_xlat4;
vec3 u_xlat5;
bool u_xlatb5;
vec3 u_xlat6;
vec4 u_xlat7;
vec3 u_xlat8;
vec3 u_xlat9;
lowp vec3 u_xlat10_9;
vec3 u_xlat10;
vec3 u_xlat11;
vec3 u_xlat12;
vec3 u_xlat13;
vec3 u_xlat14;
mediump float u_xlat16_15;
vec2 u_xlat17;
mediump vec2 u_xlat16_18;
vec3 u_xlat20;
mediump vec3 u_xlat16_20;
lowp float u_xlat10_20;
int u_xlati20;
uint u_xlatu20;
bool u_xlatb20;
float u_xlat21;
float u_xlat33;
vec2 u_xlat36;
mediump float u_xlat16_36;
lowp float u_xlat10_36;
bool u_xlatb36;
float u_xlat49;
mediump float u_xlat16_50;
float u_xlat52;
mediump float u_xlat16_52;
bool u_xlatb52;
float u_xlat53;
float u_xlat54;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD5.zx * vec2(vec2(_ProjectUVScale, _ProjectUVScale));
    u_xlat1.x = _Time.y * _Normal01_U_Speed + u_xlat0.y;
    u_xlat1.yz = _Time.yy * vec2(_Normal01_VSpeed, _Normal02_U_Speed) + u_xlat0.xy;
    u_xlat1.w = _Time.y * _Normal02_V_Speed + u_xlat0.x;
    u_xlat10_0.xyz = texture(_Normal01, u_xlat1.xy, _NormalMapBias).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_2.xy = u_xlat16_0.xy * vec2(_NormalMapScale);
    u_xlat10_1.xyz = texture(_Normal02, u_xlat1.zw, _NormalMapBias).xyz;
    u_xlat16_0.w = -1.0;
    u_xlat16_3.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.wwz;
    u_xlat16_3.xy = u_xlat16_3.xy * vec2(_NormalMapScale);
    u_xlat16_2.z = -1.0;
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
    u_xlat1.x = float(1.0) / vs_TEXCOORD4.w;
    u_xlat17.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat17.x = texture(_CameraDepthTexture, u_xlat17.xy).x;
    u_xlat17.x = _ZBufferParams.z * u_xlat17.x + _ZBufferParams.w;
    u_xlat17.x = float(1.0) / u_xlat17.x;
    u_xlat33 = vs_TEXCOORD10.w + 9.99999975e-05;
    u_xlat33 = (-u_xlat17.x) / u_xlat33;
    u_xlat33 = vs_TEXCOORD10.y * u_xlat33 + _WorldSpaceCameraPos.y;
    u_xlat33 = (-u_xlat33) + vs_TEXCOORD5.y;
    u_xlat4.xy = u_xlat16_2.xy * vec2(vec2(_RefractionIntensity, _RefractionIntensity));
    u_xlat1.x = u_xlat1.x * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.xw = u_xlat1.xx * u_xlat4.xy;
    u_xlat1.xw = u_xlat1.xw * vs_TEXCOORD4.ww;
    u_xlat17.x = u_xlat17.x + (-vs_TEXCOORD4.w);
#ifdef UNITY_ADRENO_ES3
    u_xlat17.x = min(max(u_xlat17.x, 0.0), 1.0);
#else
    u_xlat17.x = clamp(u_xlat17.x, 0.0, 1.0);
#endif
    u_xlat4.xy = u_xlat17.xx * u_xlat1.xw;
    u_xlat4.z = 0.0;
    u_xlat1.xyw = u_xlat4.xyz + vs_TEXCOORD4.xyw;
    u_xlat1.xy = u_xlat1.xy / u_xlat1.ww;
    u_xlat1.x = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat1.x = _ZBufferParams.z * u_xlat1.x + _ZBufferParams.w;
    u_xlat1.x = float(1.0) / u_xlat1.x;
    u_xlat1.x = u_xlat1.x + (-vs_TEXCOORD4.w);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.xyw = u_xlat1.xxx * u_xlat4.xyz + vs_TEXCOORD4.xyw;
    u_xlat4.xy = u_xlat1.xy / u_xlat1.ww;
    u_xlat49 = texture(_CameraDepthTexture, u_xlat4.xy).x;
    u_xlat49 = _ZBufferParams.z * u_xlat49 + _ZBufferParams.w;
    u_xlat49 = float(1.0) / u_xlat49;
    u_xlat49 = u_xlat49 + (-vs_TEXCOORD4.w);
    u_xlat4.x = 0.100000001 / _OpacityByDepth;
    u_xlat16_3.xz = u_xlat16_2.xy;
    u_xlat16_3.y = 1.0;
    u_xlat16_20.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
    u_xlat16_20.x = inversesqrt(u_xlat16_20.x);
    u_xlat16_20.xyz = u_xlat16_3.xyz * u_xlat16_20.xxx;
#ifdef UNITY_ADRENO_ES3
    u_xlatb5 = !!(0.0>=_ES_MoonDirection.y);
#else
    u_xlatb5 = 0.0>=_ES_MoonDirection.y;
#endif
    u_xlat5.xyz = (bool(u_xlatb5)) ? _ES_SunDirection.xyz : _ES_MoonDirection.xyz;
    u_xlat6.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat53 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat54 = inversesqrt(u_xlat53);
    u_xlat7.xyz = vec3(u_xlat54) * u_xlat6.xyz;
    u_xlat5.xyz = u_xlat6.xyz * vec3(u_xlat54) + u_xlat5.xyz;
    u_xlat6.x = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat5.xyz = u_xlat5.xyz * u_xlat6.xxx;
    u_xlat20.x = dot(u_xlat16_20.xyz, u_xlat5.xyz);
    u_xlat36.x = _Gloss * 128.0;
    u_xlat20.x = max(u_xlat20.x, 9.99999975e-05);
    u_xlat20.x = log2(u_xlat20.x);
    u_xlat20.x = u_xlat20.x * u_xlat36.x;
    u_xlat20.x = exp2(u_xlat20.x);
    u_xlat20.x = u_xlat20.x * _SpecularIntensity;
    u_xlat20.x = max(u_xlat20.x, 0.0);
    u_xlat20.x = min(u_xlat20.x, 16.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb36 = !!(_ES_MoonDirection.y>=9.99999975e-05);
#else
    u_xlatb36 = _ES_MoonDirection.y>=9.99999975e-05;
#endif
    u_xlat36.x = u_xlatb36 ? 1.0 : float(0.0);
    u_xlat52 = _ES_MoonDirection.y + -1.0;
    u_xlat36.x = u_xlat36.x * u_xlat52 + 1.0;
    u_xlat4.w = float(1.0) / _ShoreTransparency;
    u_xlat5.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat5.x = inversesqrt(u_xlat5.x);
    u_xlat5.xyz = u_xlat5.xxx * vs_TEXCOORD6.xyz;
    u_xlat5.x = dot(u_xlat7.xyz, u_xlat5.xyz);
    u_xlat5.x = (-u_xlat5.x) + 1.0;
    u_xlat5.x = max(u_xlat5.x, 9.99999975e-05);
    u_xlat5.x = log2(u_xlat5.x);
    u_xlat21 = u_xlat5.x * _SpecularPower;
    u_xlat21 = exp2(u_xlat21);
    u_xlat6.xyz = u_xlat36.xxx * _LightColor0.xyz;
    u_xlat6.xyz = u_xlat20.xxx * u_xlat6.xyz;
    u_xlat20.x = u_xlat49 + -1.0;
    u_xlat20.x = u_xlat4.w * u_xlat20.x;
    u_xlat20.x = u_xlat20.x * 0.100000001;
#ifdef UNITY_ADRENO_ES3
    u_xlat20.x = min(max(u_xlat20.x, 0.0), 1.0);
#else
    u_xlat20.x = clamp(u_xlat20.x, 0.0, 1.0);
#endif
    u_xlat6.xyz = u_xlat20.xxx * u_xlat6.xyz;
    u_xlat4.xy = vec2(u_xlat49) * u_xlat4.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.xy = min(max(u_xlat4.xy, 0.0), 1.0);
#else
    u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);
#endif
    u_xlat20.x = max(u_xlat4.y, 9.99999975e-05);
    u_xlat20.x = log2(u_xlat20.x);
    u_xlat20.x = u_xlat20.x * _ShoreFade;
    u_xlat20.x = exp2(u_xlat20.x);
    u_xlat8.xyz = _ShallowColor.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat8.xyz = u_xlat20.xxx * u_xlat8.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat1.xy = u_xlat1.xy / vs_TEXCOORD4.ww;
    u_xlat10_9.xyz = texture(_SceneScaledBufferBeforTransParent, u_xlat1.xy).xyz;
    u_xlat10.xyz = u_xlat8.xyz * u_xlat10_9.xyz;
    u_xlat1.x = 0.100000001 / _DeepColorDepth;
    u_xlat1.x = u_xlat1.x * u_xlat49;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.x = max(u_xlat1.x, 9.99999975e-05);
    u_xlat1.x = log2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _DeepColorFade;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat11.xyz = (-u_xlat8.xyz) * u_xlat10_9.xyz + _DeepColor.xyz;
    u_xlat11.xyz = u_xlat1.xxx * u_xlat11.xyz + u_xlat10.xyz;
    u_xlat12.xyz = u_xlat16_2.xyz * _DistortionIntensity.xyz;
    u_xlat13.x = vs_TEXCOORD8.x;
    u_xlat13.y = vs_TEXCOORD9.x;
    u_xlat13.z = vs_TEXCOORD6.x;
    u_xlat13.x = dot(u_xlat13.xyz, u_xlat12.xyz);
    u_xlat14.x = vs_TEXCOORD8.y;
    u_xlat14.y = vs_TEXCOORD9.y;
    u_xlat14.z = vs_TEXCOORD6.y;
    u_xlat13.y = dot(u_xlat14.xyz, u_xlat12.xyz);
    u_xlat14.x = vs_TEXCOORD8.z;
    u_xlat14.y = vs_TEXCOORD9.z;
    u_xlat14.z = vs_TEXCOORD6.z;
    u_xlat13.z = dot(u_xlat14.xyz, u_xlat12.xyz);
    u_xlat1.x = dot(u_xlat13.xyz, u_xlat13.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat12.xyz = u_xlat1.xxx * u_xlat13.xyz;
    u_xlat1.x = dot((-u_xlat7.xyz), u_xlat12.xyz);
    u_xlat1.x = u_xlat1.x + u_xlat1.x;
    u_xlat7.xyz = u_xlat12.xyz * (-u_xlat1.xxx) + (-u_xlat7.xyz);
    u_xlat10_0 = textureLod(_ReflectionSkyCubeMap, u_xlat7.xyz, 0.0);
    u_xlat16_2.x = u_xlat10_0.w + -1.0;
    u_xlat16_2.x = _ReflectionSkyCubeMap_HDR.w * u_xlat16_2.x + 1.0;
    u_xlat16_2.x = log2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * _ReflectionSkyCubeMap_HDR.y;
    u_xlat16_2.x = exp2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * _ReflectionSkyCubeMap_HDR.x;
    u_xlat1.x = u_xlat5.x * _FresnelPower;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _ReflectionIntensity;
    u_xlat17.x = float(1.0) / _ShoreReflectionFade;
    u_xlat17.x = u_xlat17.x * u_xlat49;
#ifdef UNITY_ADRENO_ES3
    u_xlat17.x = min(max(u_xlat17.x, 0.0), 1.0);
#else
    u_xlat17.x = clamp(u_xlat17.x, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat17.x * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat7.xyz = u_xlat16_2.xxx * u_xlat10_0.xyz + (-u_xlat11.xyz);
    u_xlat1.xyw = u_xlat1.xxx * u_xlat7.xyz + u_xlat11.xyz;
    u_xlat1.xyw = (-u_xlat8.xyz) * u_xlat10_9.xyz + u_xlat1.xyw;
    u_xlat1.xyw = u_xlat20.xxx * u_xlat1.xyw + u_xlat10.xyz;
    u_xlat20.x = (-vs_TEXCOORD5.y) * _WorldSpaceLightPos0.w + _WorldSpaceLightPos0.y;
    u_xlat16_2.x = max(u_xlat20.x, 0.0);
    u_xlat20.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowSplitSpheres[0].xyz);
    u_xlat7.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowSplitSpheres[1].xyz);
    u_xlat8.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowSplitSpheres[2].xyz);
    u_xlat9.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowSplitSpheres[3].xyz);
    u_xlat0.x = dot(u_xlat20.xyz, u_xlat20.xyz);
    u_xlat0.y = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat0.z = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat0.w = dot(u_xlat9.xyz, u_xlat9.xyz);
    u_xlatb0 = lessThan(u_xlat0, unity_ShadowSplitSqRadii);
    u_xlat0 = mix(vec4(0.0, 0.0, 0.0, 0.0), vec4(1.0, 1.0, 1.0, 1.0), vec4(u_xlatb0));
    u_xlat16_18.x = u_xlat0.y + u_xlat0.x;
    u_xlat16_18.y = u_xlat0.z + u_xlat16_18.x;
    u_xlat3.x = -0.0;
    u_xlat3.y = (-u_xlat0.x);
    u_xlat3.zw = (-u_xlat16_18.xy);
    u_xlat0 = u_xlat0 + u_xlat3;
    u_xlat0 = max(u_xlat0, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat16_18.x = dot(u_xlat0, vec4(1.0, 1.0, 1.0, 1.0));
#ifdef UNITY_ADRENO_ES3
    u_xlatb20 = !!(u_xlat16_18.x>=0.5);
#else
    u_xlatb20 = u_xlat16_18.x>=0.5;
#endif
    if(u_xlatb20){
        u_xlat20.x = dot(u_xlat0.yzw, vec3(1.0, 2.0, 3.0));
        u_xlat20.x = min(u_xlat20.x, 3.0);
        u_xlatu20 = uint(u_xlat20.x);
        u_xlat7.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowPos[int(u_xlatu20)].xyz);
        u_xlati20 = int(u_xlatu20) << 2;
        u_xlat8.xyz = u_xlat7.yyy * hlslcc_mtx4x4unity_WorldToShadow[(u_xlati20 + 1)].xyz;
        u_xlat7.xyw = hlslcc_mtx4x4unity_WorldToShadow[u_xlati20].xyz * u_xlat7.xxx + u_xlat8.xyz;
        u_xlat7.xyz = hlslcc_mtx4x4unity_WorldToShadow[(u_xlati20 + 2)].xyz * u_xlat7.zzz + u_xlat7.xyw;
        u_xlat20.xyz = u_xlat7.xyz + hlslcc_mtx4x4unity_WorldToShadow[(u_xlati20 + 3)].xyz;
        vec3 txVec0 = vec3(u_xlat20.xy,u_xlat20.z);
        u_xlat10_20 = textureLod(hlslcc_zcmp_CascadeShadowMapTexture, txVec0, 0.0);
        u_xlat16_36 = (-_LightShadowData.x) + 1.0;
        u_xlat20.x = u_xlat10_20 * u_xlat16_36 + _LightShadowData.x;
    } else {
        u_xlat20.x = 1.0;
    //ENDIF
    }
    u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;
    u_xlat20.xyz = u_xlat16_2.xyz * u_xlat20.xxx + vs_TEXCOORD1.xyz;
    u_xlat16_2.xyz = u_xlat20.xyz * vec3(0.300000012, 0.300000012, 0.300000012) + vec3(0.699999988, 0.699999988, 0.699999988);
    u_xlat20.x = sqrt(u_xlat53);
    u_xlat16_50 = u_xlat20.x + (-_DepthFoamCloseFadeOffset);
    u_xlat16_50 = u_xlat16_50 / _DepthFoamCloseFadeDistance;
    u_xlat16_15 = vs_COLOR0.x * _DepthFoamExtent;
    u_xlat33 = max(u_xlat33, 0.0);
    u_xlat33 = min(u_xlat16_15, u_xlat33);
    u_xlat16_15 = _DepthFoamExtent * vs_COLOR0.x + 9.99999975e-05;
    u_xlat33 = u_xlat33 / u_xlat16_15;
    u_xlat33 = (-u_xlat33) + 1.0;
    u_xlat36.xy = vec2(_Time.y * _DepthFoamMask_ST.z, _Time.y * _DepthFoamMask_ST.w);
    u_xlat36.xy = fract(u_xlat36.xy);
    u_xlat36.xy = _DepthFoamMask_ST.xy * vs_TEXCOORD5.xz + u_xlat36.xy;
    u_xlat10_36 = texture(_DepthFoamMask, u_xlat36.xy).x;
    u_xlat52 = vs_TEXCOORD5.z + vs_TEXCOORD5.x;
    u_xlat52 = u_xlat52 * _DepthFoamPhaseScale;
    u_xlat52 = _DepthFoamSpeed * _Time.y + u_xlat52;
    u_xlat5.x = (-u_xlat33) + 1.0;
    u_xlat16_15 = _DepthFoamSubdivision * u_xlat33 + u_xlat52;
    u_xlat16_15 = sin(u_xlat16_15);
    u_xlat16_15 = _DepthFoamWidth * u_xlat33 + u_xlat16_15;
    u_xlat16_52 = u_xlat10_36 * 2.0 + -1.0;
    u_xlat52 = u_xlat16_52 + u_xlat16_15;
#ifdef UNITY_ADRENO_ES3
    u_xlatb52 = !!(u_xlat52>=u_xlat5.x);
#else
    u_xlatb52 = u_xlat52>=u_xlat5.x;
#endif
    u_xlat52 = u_xlatb52 ? 1.0 : float(0.0);
    u_xlat36.x = u_xlat52 * u_xlat10_36;
    u_xlat16_15 = _DepthFoamDistance + 9.99999975e-05;
    u_xlat16_15 = u_xlat20.x / u_xlat16_15;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_15 = min(max(u_xlat16_15, 0.0), 1.0);
#else
    u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);
#endif
    u_xlat16_20.x = (-u_xlat16_15) + 1.0;
    u_xlat16_15 = vs_COLOR0.y * _DepthFoamColor.w;
    u_xlat16_50 = u_xlat16_50 * u_xlat16_15;
    u_xlat16_50 = u_xlat36.x * u_xlat16_50;
    u_xlat16_50 = u_xlat33 * u_xlat16_50;
    u_xlat16_50 = u_xlat16_20.x * u_xlat16_50;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_50 = min(max(u_xlat16_50, 0.0), 1.0);
#else
    u_xlat16_50 = clamp(u_xlat16_50, 0.0, 1.0);
#endif
    u_xlat16_2.xyz = _DepthFoamColor.xyz * u_xlat16_2.xyz + (-u_xlat1.xyw);
    u_xlat16_2.xyz = vec3(u_xlat16_50) * u_xlat16_2.xyz + u_xlat1.xyw;
    u_xlat0.xyz = u_xlat6.xyz * vec3(u_xlat21) + u_xlat16_2.xyz;
    u_xlat0.w = u_xlat4.x * vs_COLOR0.w;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "MSAA_INTERPOLATION" "MHY_SHADER_HIGH" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump float _MHYZBias;
uniform 	vec4 hlslcc_mtx4x4_mhyJitteredVP[4];
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
out highp vec4 vs_TEXCOORD9;
out highp vec4 vs_TEXCOORD10;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec4 u_xlat8;
float u_xlat27;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4_mhyJitteredVP[1];
    u_xlat2 = hlslcc_mtx4x4_mhyJitteredVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4_mhyJitteredVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4_mhyJitteredVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat3.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    u_xlat3.xyw = u_xlat2.xyw;
    gl_Position = u_xlat3;
    vs_COLOR0 = in_COLOR0;
    u_xlat4.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat4.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat4.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat27 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat4.xyz = vec3(u_xlat27) * u_xlat4.xyz;
    u_xlat16_5.x = u_xlat4.y * u_xlat4.y;
    u_xlat16_5.x = u_xlat4.x * u_xlat4.x + (-u_xlat16_5.x);
    u_xlat16_6 = u_xlat4.yzzx * u_xlat4.xyzz;
    u_xlat16_7.x = dot(unity_SHBr, u_xlat16_6);
    u_xlat16_7.y = dot(unity_SHBg, u_xlat16_6);
    u_xlat16_7.z = dot(unity_SHBb, u_xlat16_6);
    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_7.xyz;
    u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat4.w = 1.0;
    u_xlat16_6.x = dot(unity_SHAr, u_xlat4);
    u_xlat16_6.y = dot(unity_SHAg, u_xlat4);
    u_xlat16_6.z = dot(unity_SHAb, u_xlat4);
    u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_6.xyz;
    vs_TEXCOORD1.xyz = u_xlat16_5.xyz;
    vs_TEXCOORD1.w = 1.0;
    u_xlat27 = u_xlat3.y * _ProjectionParams.x;
    u_xlat8.w = u_xlat27 * 0.5;
    u_xlat8.xz = u_xlat3.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.z = u_xlat2.z;
    u_xlat3.xy = u_xlat8.zz + u_xlat8.xw;
    vs_TEXCOORD2 = u_xlat3;
    vs_TEXCOORD4.xyw = u_xlat3.xyw;
    u_xlat27 = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat27 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat27;
    u_xlat27 = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat27;
    u_xlat27 = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat27;
    vs_TEXCOORD3.z = (-u_xlat27);
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD3.w = 0.0;
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD5.w = 0.0;
    vs_TEXCOORD6.xyz = u_xlat4.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[1].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].www + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * in_POSITION0.yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.zzz + u_xlat1.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.www + u_xlat1.xyz;
    vs_TEXCOORD7.xyz = u_xlat1.xyz * vec3(-1.0, -1.0, 1.0);
    vs_TEXCOORD7.w = 0.0;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat27 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat1.xyz = vec3(u_xlat27) * u_xlat1.xyz;
    vs_TEXCOORD8.xyz = u_xlat1.xyz;
    vs_TEXCOORD8.w = 0.0;
    u_xlat2.xyz = u_xlat1.yzx * u_xlat4.zxy;
    u_xlat1.xyz = u_xlat4.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
    u_xlat27 = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD9.xyz = vec3(u_xlat27) * u_xlat1.xyz;
    vs_TEXCOORD9.w = 0.0;
    u_xlat27 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat27 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat27;
    vs_TEXCOORD10.w = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat27;
    vs_TEXCOORD10.xyz = u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowPos[4];
uniform 	mediump vec4 _LightColor0;
uniform 	mediump float _CausticUVScale;
uniform 	mediump float _CausticSpeed;
uniform 	mediump vec4 _CausticColor;
uniform 	mediump float _CausticDepth;
uniform 	mediump float _CausticDistance;
uniform 	mediump float _CausticDistortionValue;
uniform 	mediump vec4 _DepthFoamMask_ST;
uniform 	mediump float _DepthFoamSpeed;
uniform 	mediump vec4 _DepthFoamColor;
uniform 	mediump float _DepthFoamExtent;
uniform 	mediump float _DepthFoamDistance;
uniform 	mediump float _DepthFoamSubdivision;
uniform 	mediump float _DepthFoamWidth;
uniform 	mediump float _DepthFoamPhaseScale;
uniform 	mediump float _DepthFoamCloseFadeOffset;
uniform 	mediump float _DepthFoamCloseFadeDistance;
uniform 	float _NormalMapScale;
uniform 	float _Normal01_U_Speed;
uniform 	float _Normal01_VSpeed;
uniform 	float _NormalMapBias;
uniform 	float _Normal02_U_Speed;
uniform 	float _Normal02_V_Speed;
uniform 	float _RefractionIntensity;
uniform 	float _OpacityByDepth;
uniform 	float _SpecularIntensity;
uniform 	vec3 _ES_MoonDirection;
uniform 	vec3 _ES_SunDirection;
uniform 	float _Gloss;
uniform 	float _ShoreTransparency;
uniform 	float _SpecularPower;
uniform 	vec4 _ShallowColor;
uniform 	float _ShoreFade;
uniform 	vec4 _DeepColor;
uniform 	float _DeepColorDepth;
uniform 	float _DeepColorFade;
uniform 	vec4 _DistortionIntensity;
uniform 	float _SSRDistortion;
uniform 	float _SSRDistortion_Shore;
uniform 	float _SSRIntensity;
uniform 	float _ReflectionIntensity;
uniform 	float _FresnelPower;
uniform 	float _ShoreReflectionFade;
uniform 	vec3 _ES_MainLightColor;
uniform 	mediump float _RippleTillingScale;
uniform 	mediump float _Ripple02Rotate;
uniform 	mediump float _ProjectUVScale;
uniform 	mediump float _CausticFade;
uniform 	mediump float _CausticFadeExponent;
uniform 	vec4 _ReflectionSkyCubeMap_HDR;
uniform lowp sampler2D _Normal01;
uniform lowp sampler2D _Normal02;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _SceneScaledBufferBeforTransParent;
uniform lowp samplerCube _ReflectionSkyCubeMap;
uniform lowp sampler2D _SSRTexture;
uniform lowp sampler2D _DepthFoamMask;
uniform lowp sampler2D _WaterRippleTex;
uniform lowp sampler2DShadow hlslcc_zcmp_CascadeShadowMapTexture;
uniform lowp sampler2D _CascadeShadowMapTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD8;
in highp vec4 vs_TEXCOORD9;
in highp vec4 vs_TEXCOORD10;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
lowp float u_xlat10_0;
int u_xlati0;
uint u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec3 u_xlat10_1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
lowp vec4 u_xlat10_2;
bvec4 u_xlatb2;
mediump vec3 u_xlat16_3;
vec4 u_xlat4;
mediump vec3 u_xlat16_4;
lowp vec4 u_xlat10_4;
vec3 u_xlat5;
lowp float u_xlat10_5;
vec4 u_xlat6;
vec4 u_xlat7;
mediump vec3 u_xlat16_7;
vec4 u_xlat8;
vec3 u_xlat9;
vec3 u_xlat10;
mediump vec3 u_xlat16_10;
vec3 u_xlat11;
vec3 u_xlat12;
lowp vec3 u_xlat10_12;
vec3 u_xlat13;
vec3 u_xlat14;
vec3 u_xlat15;
mediump float u_xlat16_16;
mediump vec2 u_xlat16_17;
float u_xlat18;
vec3 u_xlat19;
mediump vec3 u_xlat16_21;
float u_xlat23;
mediump float u_xlat16_23;
bool u_xlatb23;
vec3 u_xlat25;
bool u_xlatb25;
float u_xlat26;
vec2 u_xlat36;
mediump float u_xlat16_36;
lowp float u_xlat10_36;
float u_xlat37;
lowp float u_xlat10_37;
int u_xlati37;
uint u_xlatu37;
bool u_xlatb37;
float u_xlat41;
float u_xlat42;
lowp float u_xlat10_54;
float u_xlat55;
mediump float u_xlat16_55;
mediump float u_xlat16_57;
float u_xlat59;
mediump float u_xlat16_59;
bool u_xlatb59;
float u_xlat60;
float u_xlat61;
void main()
{
    u_xlat0 = vs_TEXCOORD5.xzxz * vec4(_ProjectUVScale, _ProjectUVScale, _RippleTillingScale, _RippleTillingScale);
    u_xlat1.x = _Time.y * _Normal01_U_Speed + u_xlat0.x;
    u_xlat1.yz = _Time.yy * vec2(_Normal01_VSpeed, _Normal02_U_Speed) + u_xlat0.yx;
    u_xlat1.w = _Time.y * _Normal02_V_Speed + u_xlat0.y;
    u_xlat10_2.xyz = texture(_Normal01, u_xlat1.xy, _NormalMapBias).xyz;
    u_xlat16_2.xyz = u_xlat10_2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_3.xy = u_xlat16_2.xy * vec2(_NormalMapScale);
    u_xlat10_1.xyz = texture(_Normal02, u_xlat1.zw, _NormalMapBias).xyz;
    u_xlat16_2.w = -1.0;
    u_xlat16_4.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_2.wwz;
    u_xlat16_4.xy = u_xlat16_4.xy * vec2(_NormalMapScale);
    u_xlat16_3.z = -1.0;
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat0.x = float(1.0) / vs_TEXCOORD4.w;
    u_xlat1.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat18 = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat18 = _ZBufferParams.z * u_xlat18 + _ZBufferParams.w;
    u_xlat18 = float(1.0) / u_xlat18;
    u_xlat1.x = vs_TEXCOORD10.w + 9.99999975e-05;
    u_xlat1.x = (-u_xlat18) / u_xlat1.x;
    u_xlat19.xyz = u_xlat1.xxx * vs_TEXCOORD10.xyz;
    u_xlat5.xyz = vs_TEXCOORD10.xyz * u_xlat1.xxx + _WorldSpaceCameraPos.xyz;
    u_xlat6.xyz = (-u_xlat5.xyz) + vs_TEXCOORD5.xyz;
    u_xlat1.x = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlat6.xz = u_xlat16_3.xy * vec2(vec2(_RefractionIntensity, _RefractionIntensity));
    u_xlat0.x = u_xlat0.x * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat6.xz = u_xlat0.xx * u_xlat6.xz;
    u_xlat6.xz = u_xlat6.xz * vs_TEXCOORD4.ww;
    u_xlat0.x = u_xlat18 + (-vs_TEXCOORD4.w);
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat7.xy = u_xlat0.xx * u_xlat6.xz;
    u_xlat7.z = 0.0;
    u_xlat6.xzw = u_xlat7.xyz + vs_TEXCOORD4.xyw;
    u_xlat0.xy = u_xlat6.xz / u_xlat6.ww;
    u_xlat0.x = texture(_CameraDepthTexture, u_xlat0.xy).x;
    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat0.x = u_xlat0.x + (-vs_TEXCOORD4.w);
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat6.xzw = u_xlat0.xxx * u_xlat7.xyz + vs_TEXCOORD4.xyw;
    u_xlat0.xy = u_xlat6.xz / u_xlat6.ww;
    u_xlat0.x = texture(_CameraDepthTexture, u_xlat0.xy).x;
    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat0.x = u_xlat0.x + (-vs_TEXCOORD4.w);
    u_xlat18 = 0.100000001 / _OpacityByDepth;
    u_xlat18 = u_xlat18 * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat16_4.xz = u_xlat16_3.xy;
    u_xlat16_4.y = 1.0;
    u_xlat16_59 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);
    u_xlat16_59 = inversesqrt(u_xlat16_59);
    u_xlat16_7.xyz = u_xlat16_4.xyz * vec3(u_xlat16_59);
#ifdef UNITY_ADRENO_ES3
    u_xlatb59 = !!(0.0>=_ES_MoonDirection.y);
#else
    u_xlatb59 = 0.0>=_ES_MoonDirection.y;
#endif
    u_xlat8.xyz = (bool(u_xlatb59)) ? _ES_SunDirection.xyz : _ES_MoonDirection.xyz;
    u_xlat9.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat59 = dot(u_xlat9.xyz, u_xlat9.xyz);
    u_xlat60 = inversesqrt(u_xlat59);
    u_xlat10.xyz = vec3(u_xlat60) * u_xlat9.xyz;
    u_xlat8.xyz = u_xlat9.xyz * vec3(u_xlat60) + u_xlat8.xyz;
    u_xlat60 = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat60 = inversesqrt(u_xlat60);
    u_xlat8.xyz = vec3(u_xlat60) * u_xlat8.xyz;
    u_xlat60 = dot(u_xlat16_7.xyz, u_xlat8.xyz);
    u_xlat25.x = _Gloss * 128.0;
    u_xlat60 = max(u_xlat60, 9.99999975e-05);
    u_xlat60 = log2(u_xlat60);
    u_xlat60 = u_xlat60 * u_xlat25.x;
    u_xlat60 = exp2(u_xlat60);
    u_xlat60 = u_xlat60 * _SpecularIntensity;
    u_xlat60 = max(u_xlat60, 0.0);
    u_xlat60 = min(u_xlat60, 16.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb25 = !!(_ES_MoonDirection.y>=9.99999975e-05);
#else
    u_xlatb25 = _ES_MoonDirection.y>=9.99999975e-05;
#endif
    u_xlat25.x = u_xlatb25 ? 1.0 : float(0.0);
    u_xlat61 = _ES_MoonDirection.y + -1.0;
    u_xlat25.x = u_xlat25.x * u_xlat61 + 1.0;
    u_xlat61 = float(1.0) / _ShoreTransparency;
    u_xlat8.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat8.xyz = u_xlat8.xxx * vs_TEXCOORD6.xyz;
    u_xlat8.x = dot(u_xlat10.xyz, u_xlat8.xyz);
    u_xlat8.x = (-u_xlat8.x) + 1.0;
    u_xlat8.x = max(u_xlat8.x, 9.99999975e-05);
    u_xlat8.x = log2(u_xlat8.x);
    u_xlat26 = u_xlat8.x * _SpecularPower;
    u_xlat26 = exp2(u_xlat26);
    u_xlat9.xyz = u_xlat25.xxx * _LightColor0.xyz;
    u_xlat9.xyz = vec3(u_xlat60) * u_xlat9.xyz;
    u_xlat60 = u_xlat0.x + -1.0;
    u_xlat60 = u_xlat61 * u_xlat60;
    u_xlat60 = u_xlat60 * 0.100000001;
#ifdef UNITY_ADRENO_ES3
    u_xlat60 = min(max(u_xlat60, 0.0), 1.0);
#else
    u_xlat60 = clamp(u_xlat60, 0.0, 1.0);
#endif
    u_xlat9.xyz = vec3(u_xlat60) * u_xlat9.xyz;
    u_xlat60 = u_xlat0.x * u_xlat61;
#ifdef UNITY_ADRENO_ES3
    u_xlat60 = min(max(u_xlat60, 0.0), 1.0);
#else
    u_xlat60 = clamp(u_xlat60, 0.0, 1.0);
#endif
    u_xlat60 = max(u_xlat60, 9.99999975e-05);
    u_xlat60 = log2(u_xlat60);
    u_xlat60 = u_xlat60 * _ShoreFade;
    u_xlat60 = exp2(u_xlat60);
    u_xlat11.xyz = _ShallowColor.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat11.xyz = vec3(u_xlat60) * u_xlat11.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat6.xz = u_xlat6.xz / vs_TEXCOORD4.ww;
    u_xlat10_12.xyz = texture(_SceneScaledBufferBeforTransParent, u_xlat6.xz).xyz;
    u_xlat6.x = u_xlat1.x * _CausticDistortionValue;
    u_xlat6.xz = u_xlat6.xx * u_xlat16_7.xz;
    u_xlat7.z = _Time.y * _CausticSpeed;
    u_xlat6.xz = u_xlat5.xz * vec2(_CausticUVScale) + u_xlat6.xz;
    u_xlat13.x = _Normal01_U_Speed * 25.0;
    u_xlat13.y = _Normal01_VSpeed * 25.0;
    u_xlat7.xy = u_xlat7.zz * u_xlat13.xy + u_xlat6.xz;
    u_xlat13.x = dot(u_xlat7.xyz, vec3(-2.0, 3.0, 1.0));
    u_xlat13.y = dot(u_xlat7.xyz, vec3(-1.0, -2.0, 2.0));
    u_xlat13.z = dot(u_xlat7.xzy, vec3(2.0, 2.0, 1.0));
    u_xlat7.xyz = u_xlat13.xyz * vec3(0.400000006, 0.400000006, 0.400000006);
    u_xlat14.x = dot(u_xlat7.xyz, vec3(-2.0, 3.0, 1.0));
    u_xlat14.y = dot(u_xlat7.xyz, vec3(-1.0, -2.0, 2.0));
    u_xlat14.z = dot(u_xlat7.xzy, vec3(2.0, 2.0, 1.0));
    u_xlat7.xyz = u_xlat14.xyz * vec3(0.300000012, 0.300000012, 0.300000012);
    u_xlat6.x = dot(u_xlat7.xyz, vec3(-2.0, 3.0, 1.0));
    u_xlat6.z = dot(u_xlat7.xyz, vec3(-1.0, -2.0, 2.0));
    u_xlat7.x = dot(u_xlat7.xzy, vec3(2.0, 2.0, 1.0));
    u_xlat25.xyz = fract(u_xlat13.xyz);
    u_xlat25.xyz = (-u_xlat25.xyz) + vec3(0.5, 0.5, 0.5);
    u_xlat25.x = dot(u_xlat25.xyz, u_xlat25.xyz);
    u_xlat13.xyz = fract(u_xlat14.xyz);
    u_xlat13.xyz = (-u_xlat13.xyz) + vec3(0.5, 0.5, 0.5);
    u_xlat25.y = dot(u_xlat13.xyz, u_xlat13.xyz);
    u_xlat25.xy = sqrt(u_xlat25.xy);
    u_xlat25.x = min(u_xlat25.y, u_xlat25.x);
    u_xlat13.xy = fract(u_xlat6.xz);
    u_xlat13.z = fract(u_xlat7.x);
    u_xlat7.xzw = (-u_xlat13.xyz) + vec3(0.5, 0.5, 0.5);
    u_xlat6.x = dot(u_xlat7.xzw, u_xlat7.xzw);
    u_xlat6.x = sqrt(u_xlat6.x);
    u_xlat6.x = min(u_xlat6.x, u_xlat25.x);
    u_xlat6.x = log2(u_xlat6.x);
    u_xlat6.x = u_xlat6.x * 7.0;
    u_xlat6.x = exp2(u_xlat6.x);
    u_xlat6.x = u_xlat6.x * 25.0;
    u_xlat16_4.xy = vec2(float(_CausticDepth) + float(9.99999975e-05), float(_CausticDistance) + float(9.99999975e-05));
    u_xlat42 = u_xlat6.y / u_xlat16_4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat42 = min(max(u_xlat42, 0.0), 1.0);
#else
    u_xlat42 = clamp(u_xlat42, 0.0, 1.0);
#endif
    u_xlat19.x = dot(u_xlat19.xyz, u_xlat19.xyz);
    u_xlat19.x = sqrt(u_xlat19.x);
    u_xlat19.x = u_xlat19.x / u_xlat16_4.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat19.x = min(max(u_xlat19.x, 0.0), 1.0);
#else
    u_xlat19.x = clamp(u_xlat19.x, 0.0, 1.0);
#endif
    u_xlat19.x = (-u_xlat19.x) + 1.0;
    u_xlat19.x = u_xlat19.x * u_xlat42;
    u_xlat7.xyz = u_xlat5.xyz + (-unity_ShadowSplitSpheres[0].xyz);
    u_xlat13.xyz = u_xlat5.xyz + (-unity_ShadowSplitSpheres[1].xyz);
    u_xlat14.xyz = u_xlat5.xyz + (-unity_ShadowSplitSpheres[2].xyz);
    u_xlat15.xyz = u_xlat5.xyz + (-unity_ShadowSplitSpheres[3].xyz);
    u_xlat2.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat2.y = dot(u_xlat13.xyz, u_xlat13.xyz);
    u_xlat2.z = dot(u_xlat14.xyz, u_xlat14.xyz);
    u_xlat2.w = dot(u_xlat15.xyz, u_xlat15.xyz);
    u_xlatb2 = lessThan(u_xlat2, unity_ShadowSplitSqRadii);
    u_xlat2 = mix(vec4(0.0, 0.0, 0.0, 0.0), vec4(1.0, 1.0, 1.0, 1.0), vec4(u_xlatb2));
    u_xlat16_57 = u_xlat2.y + u_xlat2.x;
    u_xlat16_4.x = u_xlat2.z + u_xlat16_57;
    u_xlat7.x = -0.0;
    u_xlat7.y = (-u_xlat2.x);
    u_xlat7.z = (-u_xlat16_57);
    u_xlat7.w = (-u_xlat16_4.x);
    u_xlat2 = u_xlat2 + u_xlat7;
    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat16_57 = dot(u_xlat2, vec4(1.0, 1.0, 1.0, 1.0));
#ifdef UNITY_ADRENO_ES3
    u_xlatb37 = !!(u_xlat16_57>=0.5);
#else
    u_xlatb37 = u_xlat16_57>=0.5;
#endif
    if(u_xlatb37){
        u_xlat37 = dot(u_xlat2.yzw, vec3(1.0, 2.0, 3.0));
        u_xlat37 = min(u_xlat37, 3.0);
        u_xlatu37 = uint(u_xlat37);
        u_xlat5.xyz = u_xlat5.xyz + (-unity_ShadowPos[int(u_xlatu37)].xyz);
        u_xlati37 = int(u_xlatu37) << 2;
        u_xlat7.xyz = u_xlat5.yyy * hlslcc_mtx4x4unity_WorldToShadow[(u_xlati37 + 1)].xyz;
        u_xlat7.xyz = hlslcc_mtx4x4unity_WorldToShadow[u_xlati37].xyz * u_xlat5.xxx + u_xlat7.xyz;
        u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToShadow[(u_xlati37 + 2)].xyz * u_xlat5.zzz + u_xlat7.xyz;
        u_xlat5.xyz = u_xlat5.xyz + hlslcc_mtx4x4unity_WorldToShadow[(u_xlati37 + 3)].xyz;
        vec3 txVec0 = vec3(u_xlat5.xy,u_xlat5.z);
        u_xlat10_37 = textureLod(hlslcc_zcmp_CascadeShadowMapTexture, txVec0, 0.0);
        u_xlat16_55 = (-_LightShadowData.x) + 1.0;
        u_xlat37 = u_xlat10_37 * u_xlat16_55 + _LightShadowData.x;
    } else {
        u_xlat37 = 1.0;
    //ENDIF
    }
    u_xlat19.x = u_xlat37 * u_xlat19.x;
    u_xlat16_4.xyz = _LightColor0.xyz * _CausticColor.xyz;
    u_xlat16_4.xyz = u_xlat6.xxx * u_xlat16_4.xyz;
    u_xlat16_4.xyz = u_xlat19.xxx * u_xlat16_4.xyz;
    u_xlat16_57 = _CausticFade + 9.99999975e-05;
    u_xlat1.x = u_xlat1.x / u_xlat16_57;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.x = log2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _CausticFadeExponent;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat1.x = (-u_xlat1.x) + 1.0;
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat1.xxx + vec3(1.0, 1.0, 1.0);
    u_xlat16_1.xyz = u_xlat16_4.xyz * u_xlat10_12.xyz;
    u_xlat5.xyz = u_xlat16_1.xyz * u_xlat11.xyz;
    u_xlat55 = 0.100000001 / _DeepColorDepth;
    u_xlat55 = u_xlat0.x * u_xlat55;
#ifdef UNITY_ADRENO_ES3
    u_xlat55 = min(max(u_xlat55, 0.0), 1.0);
#else
    u_xlat55 = clamp(u_xlat55, 0.0, 1.0);
#endif
    u_xlat55 = max(u_xlat55, 9.99999975e-05);
    u_xlat55 = log2(u_xlat55);
    u_xlat55 = u_xlat55 * _DeepColorFade;
    u_xlat55 = exp2(u_xlat55);
    u_xlat7.xyz = (-u_xlat11.xyz) * u_xlat16_1.xyz + _DeepColor.xyz;
    u_xlat7.xyz = vec3(u_xlat55) * u_xlat7.xyz + u_xlat5.xyz;
    u_xlat12.xyz = u_xlat16_3.xyz * _DistortionIntensity.xyz;
    u_xlat13.x = vs_TEXCOORD8.x;
    u_xlat13.y = vs_TEXCOORD9.x;
    u_xlat13.z = vs_TEXCOORD6.x;
    u_xlat13.x = dot(u_xlat13.xyz, u_xlat12.xyz);
    u_xlat14.x = vs_TEXCOORD8.y;
    u_xlat14.y = vs_TEXCOORD9.y;
    u_xlat14.z = vs_TEXCOORD6.y;
    u_xlat13.y = dot(u_xlat14.xyz, u_xlat12.xyz);
    u_xlat14.x = vs_TEXCOORD8.z;
    u_xlat14.y = vs_TEXCOORD9.z;
    u_xlat14.z = vs_TEXCOORD6.z;
    u_xlat13.z = dot(u_xlat14.xyz, u_xlat12.xyz);
    u_xlat55 = dot(u_xlat13.xyz, u_xlat13.xyz);
    u_xlat55 = inversesqrt(u_xlat55);
    u_xlat13.xyz = vec3(u_xlat55) * u_xlat13.xyz;
    u_xlat55 = dot((-u_xlat10.xyz), u_xlat13.xyz);
    u_xlat55 = u_xlat55 + u_xlat55;
    u_xlat10.xyz = u_xlat13.xyz * (-vec3(u_xlat55)) + (-u_xlat10.xyz);
    u_xlat10_2 = textureLod(_ReflectionSkyCubeMap, u_xlat10.xyz, 0.0);
    u_xlat16_3.x = u_xlat10_2.w + -1.0;
    u_xlat16_3.x = _ReflectionSkyCubeMap_HDR.w * u_xlat16_3.x + 1.0;
    u_xlat16_3.x = log2(u_xlat16_3.x);
    u_xlat16_3.x = u_xlat16_3.x * _ReflectionSkyCubeMap_HDR.y;
    u_xlat16_3.x = exp2(u_xlat16_3.x);
    u_xlat16_3.x = u_xlat16_3.x * _ReflectionSkyCubeMap_HDR.x;
    u_xlat16_21.xyz = u_xlat10_2.xyz * u_xlat16_3.xxx;
    u_xlat6.xz = u_xlat12.xy * vec2(_SSRDistortion);
    u_xlat55 = float(1.0) / _SSRDistortion_Shore;
    u_xlat55 = u_xlat0.x * u_xlat55;
#ifdef UNITY_ADRENO_ES3
    u_xlat55 = min(max(u_xlat55, 0.0), 1.0);
#else
    u_xlat55 = clamp(u_xlat55, 0.0, 1.0);
#endif
    u_xlat6.xz = vec2(u_xlat55) * u_xlat6.xz;
    u_xlat6.xz = u_xlat6.xz * vs_TEXCOORD4.ww + vs_TEXCOORD4.xy;
    u_xlat6.xz = u_xlat6.xz / vs_TEXCOORD4.ww;
    u_xlat10_4 = texture(_SSRTexture, u_xlat6.xz).wxyz;
    u_xlat16_10.xyz = (-u_xlat16_3.xxx) * u_xlat10_2.xyz + u_xlat10_4.yzw;
    u_xlat10.xyz = u_xlat16_10.xyz * vec3(vec3(_SSRIntensity, _SSRIntensity, _SSRIntensity));
    u_xlat16_4.x = u_xlat10_4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat10.xyz = u_xlat16_4.xxx * u_xlat10.xyz + u_xlat16_21.xyz;
    u_xlat55 = u_xlat8.x * _FresnelPower;
    u_xlat55 = exp2(u_xlat55);
    u_xlat55 = u_xlat55 * _ReflectionIntensity;
    u_xlat6.x = float(1.0) / _ShoreReflectionFade;
    u_xlat0.x = u_xlat0.x * u_xlat6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x * u_xlat55;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat8.xzw = (-u_xlat7.xyz) + u_xlat10.xyz;
    u_xlat7.xyz = u_xlat0.xxx * u_xlat8.xzw + u_xlat7.xyz;
    u_xlat1.xyz = (-u_xlat11.xyz) * u_xlat16_1.xyz + u_xlat7.xyz;
    u_xlat1.xyz = vec3(u_xlat60) * u_xlat1.xyz + u_xlat5.xyz;
    u_xlat0.x = (-vs_TEXCOORD5.y) * _WorldSpaceLightPos0.w + _WorldSpaceLightPos0.y;
    u_xlat16_3.x = max(u_xlat0.x, 0.0);
    u_xlat5.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowSplitSpheres[0].xyz);
    u_xlat6.xzw = vs_TEXCOORD5.xyz + (-unity_ShadowSplitSpheres[1].xyz);
    u_xlat7.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowSplitSpheres[2].xyz);
    u_xlat8.xzw = vs_TEXCOORD5.xyz + (-unity_ShadowSplitSpheres[3].xyz);
    u_xlat2.x = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat2.y = dot(u_xlat6.xzw, u_xlat6.xzw);
    u_xlat2.z = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat2.w = dot(u_xlat8.xzw, u_xlat8.xzw);
    u_xlatb2 = lessThan(u_xlat2, unity_ShadowSplitSqRadii);
    u_xlat2 = mix(vec4(0.0, 0.0, 0.0, 0.0), vec4(1.0, 1.0, 1.0, 1.0), vec4(u_xlatb2));
    u_xlat16_21.x = u_xlat2.y + u_xlat2.x;
    u_xlat16_21.y = u_xlat2.z + u_xlat16_21.x;
    u_xlat4.x = -0.0;
    u_xlat4.y = (-u_xlat2.x);
    u_xlat4.zw = (-u_xlat16_21.xy);
    u_xlat2 = u_xlat2 + u_xlat4;
    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat16_21.x = dot(u_xlat2, vec4(1.0, 1.0, 1.0, 1.0));
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat16_21.x>=0.5);
#else
    u_xlatb0 = u_xlat16_21.x>=0.5;
#endif
    if(u_xlatb0){
        u_xlat0.x = dot(u_xlat2.yzw, vec3(1.0, 2.0, 3.0));
        u_xlat0.x = min(u_xlat0.x, 3.0);
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat5.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowPos[int(u_xlatu0)].xyz);
        u_xlati0 = int(u_xlatu0) << 2;
        u_xlat6.xzw = u_xlat5.yyy * hlslcc_mtx4x4unity_WorldToShadow[(u_xlati0 + 1)].xyz;
        u_xlat6.xzw = hlslcc_mtx4x4unity_WorldToShadow[u_xlati0].xyz * u_xlat5.xxx + u_xlat6.xzw;
        u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToShadow[(u_xlati0 + 2)].xyz * u_xlat5.zzz + u_xlat6.xzw;
        u_xlat5.xyz = u_xlat5.xyz + hlslcc_mtx4x4unity_WorldToShadow[(u_xlati0 + 3)].xyz;
        vec3 txVec1 = vec3(u_xlat5.xy,u_xlat5.z);
        u_xlat10_0 = textureLod(hlslcc_zcmp_CascadeShadowMapTexture, txVec1, 0.0);
        u_xlat16_55 = (-_LightShadowData.x) + 1.0;
        u_xlat0.x = u_xlat10_0 * u_xlat16_55 + _LightShadowData.x;
    } else {
        u_xlat0.x = 1.0;
    //ENDIF
    }
    u_xlat16_3.xyz = u_xlat16_3.xxx * _LightColor0.xyz;
    u_xlat5.xyz = u_xlat16_3.xyz * u_xlat0.xxx + vs_TEXCOORD1.xyz;
    u_xlat16_3.xyz = u_xlat5.xyz * vec3(0.300000012, 0.300000012, 0.300000012) + vec3(0.699999988, 0.699999988, 0.699999988);
    u_xlat0.x = sqrt(u_xlat59);
    u_xlat16_57 = u_xlat0.x + (-_DepthFoamCloseFadeOffset);
    u_xlat16_57 = u_xlat16_57 / _DepthFoamCloseFadeDistance;
    u_xlat16_16 = vs_COLOR0.x * _DepthFoamExtent;
    u_xlat55 = max(u_xlat6.y, 0.0);
    u_xlat55 = min(u_xlat16_16, u_xlat55);
    u_xlat16_16 = _DepthFoamExtent * vs_COLOR0.x + 9.99999975e-05;
    u_xlat55 = u_xlat55 / u_xlat16_16;
    u_xlat55 = (-u_xlat55) + 1.0;
    u_xlat5.xy = vec2(_Time.y * _DepthFoamMask_ST.z, _Time.y * _DepthFoamMask_ST.w);
    u_xlat5.xy = fract(u_xlat5.xy);
    u_xlat5.xy = _DepthFoamMask_ST.xy * vs_TEXCOORD5.xz + u_xlat5.xy;
    u_xlat10_5 = texture(_DepthFoamMask, u_xlat5.xy, -1.0).x;
    u_xlat23 = vs_TEXCOORD5.z + vs_TEXCOORD5.x;
    u_xlat23 = u_xlat23 * _DepthFoamPhaseScale;
    u_xlat23 = _DepthFoamSpeed * _Time.y + u_xlat23;
    u_xlat41 = (-u_xlat55) + 1.0;
    u_xlat16_16 = _DepthFoamSubdivision * u_xlat55 + u_xlat23;
    u_xlat16_16 = sin(u_xlat16_16);
    u_xlat16_16 = _DepthFoamWidth * u_xlat55 + u_xlat16_16;
    u_xlat16_23 = u_xlat10_5 * 2.0 + -1.0;
    u_xlat23 = u_xlat16_23 + u_xlat16_16;
#ifdef UNITY_ADRENO_ES3
    u_xlatb23 = !!(u_xlat23>=u_xlat41);
#else
    u_xlatb23 = u_xlat23>=u_xlat41;
#endif
    u_xlat23 = u_xlatb23 ? 1.0 : float(0.0);
    u_xlat5.x = u_xlat23 * u_xlat10_5;
    u_xlat16_16 = _DepthFoamDistance + 9.99999975e-05;
    u_xlat16_16 = u_xlat0.x / u_xlat16_16;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat16_0 = (-u_xlat16_16) + 1.0;
    u_xlat16_16 = vs_COLOR0.y * _DepthFoamColor.w;
    u_xlat16_57 = u_xlat16_57 * u_xlat16_16;
    u_xlat16_57 = u_xlat5.x * u_xlat16_57;
    u_xlat16_57 = u_xlat55 * u_xlat16_57;
    u_xlat16_57 = u_xlat16_0 * u_xlat16_57;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_57 = min(max(u_xlat16_57, 0.0), 1.0);
#else
    u_xlat16_57 = clamp(u_xlat16_57, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = _DepthFoamColor.xyz * u_xlat16_3.xyz + (-u_xlat1.xyz);
    u_xlat16_3.xyz = vec3(u_xlat16_57) * u_xlat16_3.xyz + u_xlat1.xyz;
    u_xlat16_0 = max(_LightColor0.w, 0.5);
    u_xlat1.xyz = u_xlat9.xyz * vec3(u_xlat26) + u_xlat16_3.xyz;
    u_xlat36.xy = fract(u_xlat0.zw);
    u_xlat16_3.xy = u_xlat36.xy * vec2(1.14999998, 1.14999998);
    u_xlat16_16 = sin(_Ripple02Rotate);
    u_xlat16_17.x = cos(_Ripple02Rotate);
    u_xlat5.x = (-u_xlat16_16);
    u_xlat16_17.y = u_xlat16_16;
    u_xlat6.x = dot(u_xlat16_3.xy, u_xlat16_17.xy);
    u_xlat5.y = u_xlat16_17.x;
    u_xlat6.y = dot(u_xlat16_3.xy, u_xlat5.xy);
    u_xlat10_36 = texture(_WaterRippleTex, u_xlat36.xy).x;
    u_xlat10_54 = texture(_WaterRippleTex, u_xlat6.xy).x;
    u_xlat16_36 = u_xlat10_54 + u_xlat10_36;
    u_xlat36.x = u_xlat16_36 * u_xlat18;
    u_xlat5.xyz = _ES_MainLightColor.xyz * vec3(u_xlat16_0) + (-u_xlat1.xyz);
    u_xlat1.xyz = u_xlat36.xxx * u_xlat5.xyz + u_xlat1.xyz;
    u_xlat1.w = u_xlat18 * vs_COLOR0.w;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MSAA_INTERPOLATION" "MHY_SHADER_HIGH" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
uniform 	vec4 hlslcc_mtx4x4_mhyJitteredVP[4];
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
out highp vec4 vs_TEXCOORD9;
out highp vec4 vs_TEXCOORD10;
float u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec4 u_xlat8;
vec3 u_xlat9;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat9.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4_mhyJitteredVP[1];
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[3] * u_xlat2.wwww + u_xlat1;
    u_xlat3.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    u_xlat3.xyw = u_xlat1.xyw;
    gl_Position = u_xlat3;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD1.w = 1.0;
    u_xlat4.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat4.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat4.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat1.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
    u_xlat16_5.x = u_xlat4.y * u_xlat4.y;
    u_xlat16_5.x = u_xlat4.x * u_xlat4.x + (-u_xlat16_5.x);
    u_xlat16_6 = u_xlat4.yzzx * u_xlat4.xyzz;
    u_xlat16_7.x = dot(unity_SHBr, u_xlat16_6);
    u_xlat16_7.y = dot(unity_SHBg, u_xlat16_6);
    u_xlat16_7.z = dot(unity_SHBb, u_xlat16_6);
    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_7.xyz;
    u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat4.w = 1.0;
    u_xlat16_6.x = dot(unity_SHAr, u_xlat4);
    u_xlat16_6.y = dot(unity_SHAg, u_xlat4);
    u_xlat16_6.z = dot(unity_SHAb, u_xlat4);
    u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_6.xyz;
    vs_TEXCOORD1.xyz = u_xlat16_5.xyz;
    u_xlat1.x = u_xlat3.y * _ProjectionParams.x;
    u_xlat8.w = u_xlat1.x * 0.5;
    u_xlat8.xz = u_xlat3.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.z = u_xlat1.z;
    u_xlat3.xy = u_xlat8.zz + u_xlat8.xw;
    vs_TEXCOORD2 = u_xlat3;
    vs_TEXCOORD4.xyw = u_xlat3.xyw;
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD3.w = 0.0;
    u_xlat1.x = u_xlat2.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat2.x + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat2.z + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat2.w + u_xlat1.x;
    vs_TEXCOORD3.z = (-u_xlat1.x);
    vs_TEXCOORD5.w = 0.0;
    vs_TEXCOORD5.xyz = u_xlat9.xyz;
    u_xlat9.xyz = (-u_xlat9.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD6.w = 0.0;
    vs_TEXCOORD6.xyz = u_xlat4.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].www + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * in_POSITION0.yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.zzz + u_xlat1.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.www + u_xlat1.xyz;
    vs_TEXCOORD7.xyz = u_xlat1.xyz * vec3(-1.0, -1.0, 1.0);
    vs_TEXCOORD7.w = 0.0;
    u_xlat1.xyz = in_TANGENT0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat0 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0 = inversesqrt(u_xlat0);
    u_xlat1.xyz = vec3(u_xlat0) * u_xlat1.xyz;
    vs_TEXCOORD8.xyz = u_xlat1.xyz;
    vs_TEXCOORD8.w = 0.0;
    u_xlat2.xyz = u_xlat1.yzx * u_xlat4.zxy;
    u_xlat1.xyz = u_xlat4.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
    u_xlat0 = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD9.xyz = vec3(u_xlat0) * u_xlat1.xyz;
    vs_TEXCOORD9.w = 0.0;
    u_xlat0 = u_xlat9.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat9.x + u_xlat0;
    vs_TEXCOORD10.w = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat9.z + u_xlat0;
    vs_TEXCOORD10.xyz = u_xlat9.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowPos[4];
uniform 	mediump vec4 _LightColor0;
uniform 	mediump float _CausticUVScale;
uniform 	mediump float _CausticSpeed;
uniform 	mediump vec4 _CausticColor;
uniform 	mediump float _CausticDepth;
uniform 	mediump float _CausticDistance;
uniform 	mediump float _CausticDistortionValue;
uniform 	mediump vec4 _DepthFoamMask_ST;
uniform 	mediump float _DepthFoamSpeed;
uniform 	mediump vec4 _DepthFoamColor;
uniform 	mediump float _DepthFoamExtent;
uniform 	mediump float _DepthFoamDistance;
uniform 	mediump float _DepthFoamSubdivision;
uniform 	mediump float _DepthFoamWidth;
uniform 	mediump float _DepthFoamPhaseScale;
uniform 	mediump float _DepthFoamCloseFadeOffset;
uniform 	mediump float _DepthFoamCloseFadeDistance;
uniform 	float _NormalMapScale;
uniform 	float _Normal01_U_Speed;
uniform 	float _Normal01_VSpeed;
uniform 	float _NormalMapBias;
uniform 	float _Normal02_U_Speed;
uniform 	float _Normal02_V_Speed;
uniform 	float _RefractionIntensity;
uniform 	float _OpacityByDepth;
uniform 	float _SpecularIntensity;
uniform 	vec3 _ES_MoonDirection;
uniform 	vec3 _ES_SunDirection;
uniform 	float _Gloss;
uniform 	float _ShoreTransparency;
uniform 	float _SpecularPower;
uniform 	vec4 _ShallowColor;
uniform 	float _ShoreFade;
uniform 	vec4 _DeepColor;
uniform 	float _DeepColorDepth;
uniform 	float _DeepColorFade;
uniform 	vec4 _DistortionIntensity;
uniform 	float _SSRDistortion;
uniform 	float _SSRDistortion_Shore;
uniform 	float _SSRIntensity;
uniform 	float _ReflectionIntensity;
uniform 	float _FresnelPower;
uniform 	float _ShoreReflectionFade;
uniform 	vec3 _ES_MainLightColor;
uniform 	mediump float _RippleTillingScale;
uniform 	mediump float _Ripple02Rotate;
uniform 	mediump float _ProjectUVScale;
uniform 	mediump float _CausticFade;
uniform 	mediump float _CausticFadeExponent;
uniform 	vec4 _ReflectionSkyCubeMap_HDR;
uniform lowp sampler2D _Normal01;
uniform lowp sampler2D _Normal02;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _SceneScaledBufferBeforTransParent;
uniform lowp samplerCube _ReflectionSkyCubeMap;
uniform lowp sampler2D _SSRTexture;
uniform lowp sampler2D _DepthFoamMask;
uniform lowp sampler2D _WaterRippleTex;
uniform lowp sampler2DShadow hlslcc_zcmp_CascadeShadowMapTexture;
uniform lowp sampler2D _CascadeShadowMapTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD8;
in highp vec4 vs_TEXCOORD9;
in highp vec4 vs_TEXCOORD10;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
lowp float u_xlat10_0;
int u_xlati0;
uint u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec3 u_xlat10_1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
lowp vec4 u_xlat10_2;
bvec4 u_xlatb2;
mediump vec3 u_xlat16_3;
vec4 u_xlat4;
mediump vec3 u_xlat16_4;
lowp vec4 u_xlat10_4;
vec3 u_xlat5;
lowp float u_xlat10_5;
vec4 u_xlat6;
vec4 u_xlat7;
mediump vec3 u_xlat16_7;
vec4 u_xlat8;
vec3 u_xlat9;
vec3 u_xlat10;
mediump vec3 u_xlat16_10;
vec3 u_xlat11;
vec3 u_xlat12;
lowp vec3 u_xlat10_12;
vec3 u_xlat13;
vec3 u_xlat14;
vec3 u_xlat15;
mediump float u_xlat16_16;
mediump vec2 u_xlat16_17;
float u_xlat18;
vec3 u_xlat19;
mediump vec3 u_xlat16_21;
float u_xlat23;
mediump float u_xlat16_23;
bool u_xlatb23;
vec3 u_xlat25;
bool u_xlatb25;
float u_xlat26;
vec2 u_xlat36;
mediump float u_xlat16_36;
lowp float u_xlat10_36;
float u_xlat37;
lowp float u_xlat10_37;
int u_xlati37;
uint u_xlatu37;
bool u_xlatb37;
float u_xlat41;
float u_xlat42;
lowp float u_xlat10_54;
float u_xlat55;
mediump float u_xlat16_55;
mediump float u_xlat16_57;
float u_xlat59;
mediump float u_xlat16_59;
bool u_xlatb59;
float u_xlat60;
float u_xlat61;
void main()
{
    u_xlat0 = vs_TEXCOORD5.xzxz * vec4(_ProjectUVScale, _ProjectUVScale, _RippleTillingScale, _RippleTillingScale);
    u_xlat1.x = _Time.y * _Normal01_U_Speed + u_xlat0.x;
    u_xlat1.yz = _Time.yy * vec2(_Normal01_VSpeed, _Normal02_U_Speed) + u_xlat0.yx;
    u_xlat1.w = _Time.y * _Normal02_V_Speed + u_xlat0.y;
    u_xlat10_2.xyz = texture(_Normal01, u_xlat1.xy, _NormalMapBias).xyz;
    u_xlat16_2.xyz = u_xlat10_2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_3.xy = u_xlat16_2.xy * vec2(_NormalMapScale);
    u_xlat10_1.xyz = texture(_Normal02, u_xlat1.zw, _NormalMapBias).xyz;
    u_xlat16_2.w = -1.0;
    u_xlat16_4.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_2.wwz;
    u_xlat16_4.xy = u_xlat16_4.xy * vec2(_NormalMapScale);
    u_xlat16_3.z = -1.0;
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat0.x = float(1.0) / vs_TEXCOORD4.w;
    u_xlat1.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat18 = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat18 = _ZBufferParams.z * u_xlat18 + _ZBufferParams.w;
    u_xlat18 = float(1.0) / u_xlat18;
    u_xlat1.x = vs_TEXCOORD10.w + 9.99999975e-05;
    u_xlat1.x = (-u_xlat18) / u_xlat1.x;
    u_xlat19.xyz = u_xlat1.xxx * vs_TEXCOORD10.xyz;
    u_xlat5.xyz = vs_TEXCOORD10.xyz * u_xlat1.xxx + _WorldSpaceCameraPos.xyz;
    u_xlat6.xyz = (-u_xlat5.xyz) + vs_TEXCOORD5.xyz;
    u_xlat1.x = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlat6.xz = u_xlat16_3.xy * vec2(vec2(_RefractionIntensity, _RefractionIntensity));
    u_xlat0.x = u_xlat0.x * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat6.xz = u_xlat0.xx * u_xlat6.xz;
    u_xlat6.xz = u_xlat6.xz * vs_TEXCOORD4.ww;
    u_xlat0.x = u_xlat18 + (-vs_TEXCOORD4.w);
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat7.xy = u_xlat0.xx * u_xlat6.xz;
    u_xlat7.z = 0.0;
    u_xlat6.xzw = u_xlat7.xyz + vs_TEXCOORD4.xyw;
    u_xlat0.xy = u_xlat6.xz / u_xlat6.ww;
    u_xlat0.x = texture(_CameraDepthTexture, u_xlat0.xy).x;
    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat0.x = u_xlat0.x + (-vs_TEXCOORD4.w);
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat6.xzw = u_xlat0.xxx * u_xlat7.xyz + vs_TEXCOORD4.xyw;
    u_xlat0.xy = u_xlat6.xz / u_xlat6.ww;
    u_xlat0.x = texture(_CameraDepthTexture, u_xlat0.xy).x;
    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat0.x = u_xlat0.x + (-vs_TEXCOORD4.w);
    u_xlat18 = 0.100000001 / _OpacityByDepth;
    u_xlat18 = u_xlat18 * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat16_4.xz = u_xlat16_3.xy;
    u_xlat16_4.y = 1.0;
    u_xlat16_59 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);
    u_xlat16_59 = inversesqrt(u_xlat16_59);
    u_xlat16_7.xyz = u_xlat16_4.xyz * vec3(u_xlat16_59);
#ifdef UNITY_ADRENO_ES3
    u_xlatb59 = !!(0.0>=_ES_MoonDirection.y);
#else
    u_xlatb59 = 0.0>=_ES_MoonDirection.y;
#endif
    u_xlat8.xyz = (bool(u_xlatb59)) ? _ES_SunDirection.xyz : _ES_MoonDirection.xyz;
    u_xlat9.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat59 = dot(u_xlat9.xyz, u_xlat9.xyz);
    u_xlat60 = inversesqrt(u_xlat59);
    u_xlat10.xyz = vec3(u_xlat60) * u_xlat9.xyz;
    u_xlat8.xyz = u_xlat9.xyz * vec3(u_xlat60) + u_xlat8.xyz;
    u_xlat60 = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat60 = inversesqrt(u_xlat60);
    u_xlat8.xyz = vec3(u_xlat60) * u_xlat8.xyz;
    u_xlat60 = dot(u_xlat16_7.xyz, u_xlat8.xyz);
    u_xlat25.x = _Gloss * 128.0;
    u_xlat60 = max(u_xlat60, 9.99999975e-05);
    u_xlat60 = log2(u_xlat60);
    u_xlat60 = u_xlat60 * u_xlat25.x;
    u_xlat60 = exp2(u_xlat60);
    u_xlat60 = u_xlat60 * _SpecularIntensity;
    u_xlat60 = max(u_xlat60, 0.0);
    u_xlat60 = min(u_xlat60, 16.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb25 = !!(_ES_MoonDirection.y>=9.99999975e-05);
#else
    u_xlatb25 = _ES_MoonDirection.y>=9.99999975e-05;
#endif
    u_xlat25.x = u_xlatb25 ? 1.0 : float(0.0);
    u_xlat61 = _ES_MoonDirection.y + -1.0;
    u_xlat25.x = u_xlat25.x * u_xlat61 + 1.0;
    u_xlat61 = float(1.0) / _ShoreTransparency;
    u_xlat8.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat8.xyz = u_xlat8.xxx * vs_TEXCOORD6.xyz;
    u_xlat8.x = dot(u_xlat10.xyz, u_xlat8.xyz);
    u_xlat8.x = (-u_xlat8.x) + 1.0;
    u_xlat8.x = max(u_xlat8.x, 9.99999975e-05);
    u_xlat8.x = log2(u_xlat8.x);
    u_xlat26 = u_xlat8.x * _SpecularPower;
    u_xlat26 = exp2(u_xlat26);
    u_xlat9.xyz = u_xlat25.xxx * _LightColor0.xyz;
    u_xlat9.xyz = vec3(u_xlat60) * u_xlat9.xyz;
    u_xlat60 = u_xlat0.x + -1.0;
    u_xlat60 = u_xlat61 * u_xlat60;
    u_xlat60 = u_xlat60 * 0.100000001;
#ifdef UNITY_ADRENO_ES3
    u_xlat60 = min(max(u_xlat60, 0.0), 1.0);
#else
    u_xlat60 = clamp(u_xlat60, 0.0, 1.0);
#endif
    u_xlat9.xyz = vec3(u_xlat60) * u_xlat9.xyz;
    u_xlat60 = u_xlat0.x * u_xlat61;
#ifdef UNITY_ADRENO_ES3
    u_xlat60 = min(max(u_xlat60, 0.0), 1.0);
#else
    u_xlat60 = clamp(u_xlat60, 0.0, 1.0);
#endif
    u_xlat60 = max(u_xlat60, 9.99999975e-05);
    u_xlat60 = log2(u_xlat60);
    u_xlat60 = u_xlat60 * _ShoreFade;
    u_xlat60 = exp2(u_xlat60);
    u_xlat11.xyz = _ShallowColor.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat11.xyz = vec3(u_xlat60) * u_xlat11.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat6.xz = u_xlat6.xz / vs_TEXCOORD4.ww;
    u_xlat10_12.xyz = texture(_SceneScaledBufferBeforTransParent, u_xlat6.xz).xyz;
    u_xlat6.x = u_xlat1.x * _CausticDistortionValue;
    u_xlat6.xz = u_xlat6.xx * u_xlat16_7.xz;
    u_xlat7.z = _Time.y * _CausticSpeed;
    u_xlat6.xz = u_xlat5.xz * vec2(_CausticUVScale) + u_xlat6.xz;
    u_xlat13.x = _Normal01_U_Speed * 25.0;
    u_xlat13.y = _Normal01_VSpeed * 25.0;
    u_xlat7.xy = u_xlat7.zz * u_xlat13.xy + u_xlat6.xz;
    u_xlat13.x = dot(u_xlat7.xyz, vec3(-2.0, 3.0, 1.0));
    u_xlat13.y = dot(u_xlat7.xyz, vec3(-1.0, -2.0, 2.0));
    u_xlat13.z = dot(u_xlat7.xzy, vec3(2.0, 2.0, 1.0));
    u_xlat7.xyz = u_xlat13.xyz * vec3(0.400000006, 0.400000006, 0.400000006);
    u_xlat14.x = dot(u_xlat7.xyz, vec3(-2.0, 3.0, 1.0));
    u_xlat14.y = dot(u_xlat7.xyz, vec3(-1.0, -2.0, 2.0));
    u_xlat14.z = dot(u_xlat7.xzy, vec3(2.0, 2.0, 1.0));
    u_xlat7.xyz = u_xlat14.xyz * vec3(0.300000012, 0.300000012, 0.300000012);
    u_xlat6.x = dot(u_xlat7.xyz, vec3(-2.0, 3.0, 1.0));
    u_xlat6.z = dot(u_xlat7.xyz, vec3(-1.0, -2.0, 2.0));
    u_xlat7.x = dot(u_xlat7.xzy, vec3(2.0, 2.0, 1.0));
    u_xlat25.xyz = fract(u_xlat13.xyz);
    u_xlat25.xyz = (-u_xlat25.xyz) + vec3(0.5, 0.5, 0.5);
    u_xlat25.x = dot(u_xlat25.xyz, u_xlat25.xyz);
    u_xlat13.xyz = fract(u_xlat14.xyz);
    u_xlat13.xyz = (-u_xlat13.xyz) + vec3(0.5, 0.5, 0.5);
    u_xlat25.y = dot(u_xlat13.xyz, u_xlat13.xyz);
    u_xlat25.xy = sqrt(u_xlat25.xy);
    u_xlat25.x = min(u_xlat25.y, u_xlat25.x);
    u_xlat13.xy = fract(u_xlat6.xz);
    u_xlat13.z = fract(u_xlat7.x);
    u_xlat7.xzw = (-u_xlat13.xyz) + vec3(0.5, 0.5, 0.5);
    u_xlat6.x = dot(u_xlat7.xzw, u_xlat7.xzw);
    u_xlat6.x = sqrt(u_xlat6.x);
    u_xlat6.x = min(u_xlat6.x, u_xlat25.x);
    u_xlat6.x = log2(u_xlat6.x);
    u_xlat6.x = u_xlat6.x * 7.0;
    u_xlat6.x = exp2(u_xlat6.x);
    u_xlat6.x = u_xlat6.x * 25.0;
    u_xlat16_4.xy = vec2(float(_CausticDepth) + float(9.99999975e-05), float(_CausticDistance) + float(9.99999975e-05));
    u_xlat42 = u_xlat6.y / u_xlat16_4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat42 = min(max(u_xlat42, 0.0), 1.0);
#else
    u_xlat42 = clamp(u_xlat42, 0.0, 1.0);
#endif
    u_xlat19.x = dot(u_xlat19.xyz, u_xlat19.xyz);
    u_xlat19.x = sqrt(u_xlat19.x);
    u_xlat19.x = u_xlat19.x / u_xlat16_4.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat19.x = min(max(u_xlat19.x, 0.0), 1.0);
#else
    u_xlat19.x = clamp(u_xlat19.x, 0.0, 1.0);
#endif
    u_xlat19.x = (-u_xlat19.x) + 1.0;
    u_xlat19.x = u_xlat19.x * u_xlat42;
    u_xlat7.xyz = u_xlat5.xyz + (-unity_ShadowSplitSpheres[0].xyz);
    u_xlat13.xyz = u_xlat5.xyz + (-unity_ShadowSplitSpheres[1].xyz);
    u_xlat14.xyz = u_xlat5.xyz + (-unity_ShadowSplitSpheres[2].xyz);
    u_xlat15.xyz = u_xlat5.xyz + (-unity_ShadowSplitSpheres[3].xyz);
    u_xlat2.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat2.y = dot(u_xlat13.xyz, u_xlat13.xyz);
    u_xlat2.z = dot(u_xlat14.xyz, u_xlat14.xyz);
    u_xlat2.w = dot(u_xlat15.xyz, u_xlat15.xyz);
    u_xlatb2 = lessThan(u_xlat2, unity_ShadowSplitSqRadii);
    u_xlat2 = mix(vec4(0.0, 0.0, 0.0, 0.0), vec4(1.0, 1.0, 1.0, 1.0), vec4(u_xlatb2));
    u_xlat16_57 = u_xlat2.y + u_xlat2.x;
    u_xlat16_4.x = u_xlat2.z + u_xlat16_57;
    u_xlat7.x = -0.0;
    u_xlat7.y = (-u_xlat2.x);
    u_xlat7.z = (-u_xlat16_57);
    u_xlat7.w = (-u_xlat16_4.x);
    u_xlat2 = u_xlat2 + u_xlat7;
    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat16_57 = dot(u_xlat2, vec4(1.0, 1.0, 1.0, 1.0));
#ifdef UNITY_ADRENO_ES3
    u_xlatb37 = !!(u_xlat16_57>=0.5);
#else
    u_xlatb37 = u_xlat16_57>=0.5;
#endif
    if(u_xlatb37){
        u_xlat37 = dot(u_xlat2.yzw, vec3(1.0, 2.0, 3.0));
        u_xlat37 = min(u_xlat37, 3.0);
        u_xlatu37 = uint(u_xlat37);
        u_xlat5.xyz = u_xlat5.xyz + (-unity_ShadowPos[int(u_xlatu37)].xyz);
        u_xlati37 = int(u_xlatu37) << 2;
        u_xlat7.xyz = u_xlat5.yyy * hlslcc_mtx4x4unity_WorldToShadow[(u_xlati37 + 1)].xyz;
        u_xlat7.xyz = hlslcc_mtx4x4unity_WorldToShadow[u_xlati37].xyz * u_xlat5.xxx + u_xlat7.xyz;
        u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToShadow[(u_xlati37 + 2)].xyz * u_xlat5.zzz + u_xlat7.xyz;
        u_xlat5.xyz = u_xlat5.xyz + hlslcc_mtx4x4unity_WorldToShadow[(u_xlati37 + 3)].xyz;
        vec3 txVec0 = vec3(u_xlat5.xy,u_xlat5.z);
        u_xlat10_37 = textureLod(hlslcc_zcmp_CascadeShadowMapTexture, txVec0, 0.0);
        u_xlat16_55 = (-_LightShadowData.x) + 1.0;
        u_xlat37 = u_xlat10_37 * u_xlat16_55 + _LightShadowData.x;
    } else {
        u_xlat37 = 1.0;
    //ENDIF
    }
    u_xlat19.x = u_xlat37 * u_xlat19.x;
    u_xlat16_4.xyz = _LightColor0.xyz * _CausticColor.xyz;
    u_xlat16_4.xyz = u_xlat6.xxx * u_xlat16_4.xyz;
    u_xlat16_4.xyz = u_xlat19.xxx * u_xlat16_4.xyz;
    u_xlat16_57 = _CausticFade + 9.99999975e-05;
    u_xlat1.x = u_xlat1.x / u_xlat16_57;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.x = log2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _CausticFadeExponent;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat1.x = (-u_xlat1.x) + 1.0;
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat1.xxx + vec3(1.0, 1.0, 1.0);
    u_xlat16_1.xyz = u_xlat16_4.xyz * u_xlat10_12.xyz;
    u_xlat5.xyz = u_xlat16_1.xyz * u_xlat11.xyz;
    u_xlat55 = 0.100000001 / _DeepColorDepth;
    u_xlat55 = u_xlat0.x * u_xlat55;
#ifdef UNITY_ADRENO_ES3
    u_xlat55 = min(max(u_xlat55, 0.0), 1.0);
#else
    u_xlat55 = clamp(u_xlat55, 0.0, 1.0);
#endif
    u_xlat55 = max(u_xlat55, 9.99999975e-05);
    u_xlat55 = log2(u_xlat55);
    u_xlat55 = u_xlat55 * _DeepColorFade;
    u_xlat55 = exp2(u_xlat55);
    u_xlat7.xyz = (-u_xlat11.xyz) * u_xlat16_1.xyz + _DeepColor.xyz;
    u_xlat7.xyz = vec3(u_xlat55) * u_xlat7.xyz + u_xlat5.xyz;
    u_xlat12.xyz = u_xlat16_3.xyz * _DistortionIntensity.xyz;
    u_xlat13.x = vs_TEXCOORD8.x;
    u_xlat13.y = vs_TEXCOORD9.x;
    u_xlat13.z = vs_TEXCOORD6.x;
    u_xlat13.x = dot(u_xlat13.xyz, u_xlat12.xyz);
    u_xlat14.x = vs_TEXCOORD8.y;
    u_xlat14.y = vs_TEXCOORD9.y;
    u_xlat14.z = vs_TEXCOORD6.y;
    u_xlat13.y = dot(u_xlat14.xyz, u_xlat12.xyz);
    u_xlat14.x = vs_TEXCOORD8.z;
    u_xlat14.y = vs_TEXCOORD9.z;
    u_xlat14.z = vs_TEXCOORD6.z;
    u_xlat13.z = dot(u_xlat14.xyz, u_xlat12.xyz);
    u_xlat55 = dot(u_xlat13.xyz, u_xlat13.xyz);
    u_xlat55 = inversesqrt(u_xlat55);
    u_xlat13.xyz = vec3(u_xlat55) * u_xlat13.xyz;
    u_xlat55 = dot((-u_xlat10.xyz), u_xlat13.xyz);
    u_xlat55 = u_xlat55 + u_xlat55;
    u_xlat10.xyz = u_xlat13.xyz * (-vec3(u_xlat55)) + (-u_xlat10.xyz);
    u_xlat10_2 = textureLod(_ReflectionSkyCubeMap, u_xlat10.xyz, 0.0);
    u_xlat16_3.x = u_xlat10_2.w + -1.0;
    u_xlat16_3.x = _ReflectionSkyCubeMap_HDR.w * u_xlat16_3.x + 1.0;
    u_xlat16_3.x = log2(u_xlat16_3.x);
    u_xlat16_3.x = u_xlat16_3.x * _ReflectionSkyCubeMap_HDR.y;
    u_xlat16_3.x = exp2(u_xlat16_3.x);
    u_xlat16_3.x = u_xlat16_3.x * _ReflectionSkyCubeMap_HDR.x;
    u_xlat16_21.xyz = u_xlat10_2.xyz * u_xlat16_3.xxx;
    u_xlat6.xz = u_xlat12.xy * vec2(_SSRDistortion);
    u_xlat55 = float(1.0) / _SSRDistortion_Shore;
    u_xlat55 = u_xlat0.x * u_xlat55;
#ifdef UNITY_ADRENO_ES3
    u_xlat55 = min(max(u_xlat55, 0.0), 1.0);
#else
    u_xlat55 = clamp(u_xlat55, 0.0, 1.0);
#endif
    u_xlat6.xz = vec2(u_xlat55) * u_xlat6.xz;
    u_xlat6.xz = u_xlat6.xz * vs_TEXCOORD4.ww + vs_TEXCOORD4.xy;
    u_xlat6.xz = u_xlat6.xz / vs_TEXCOORD4.ww;
    u_xlat10_4 = texture(_SSRTexture, u_xlat6.xz).wxyz;
    u_xlat16_10.xyz = (-u_xlat16_3.xxx) * u_xlat10_2.xyz + u_xlat10_4.yzw;
    u_xlat10.xyz = u_xlat16_10.xyz * vec3(vec3(_SSRIntensity, _SSRIntensity, _SSRIntensity));
    u_xlat16_4.x = u_xlat10_4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat10.xyz = u_xlat16_4.xxx * u_xlat10.xyz + u_xlat16_21.xyz;
    u_xlat55 = u_xlat8.x * _FresnelPower;
    u_xlat55 = exp2(u_xlat55);
    u_xlat55 = u_xlat55 * _ReflectionIntensity;
    u_xlat6.x = float(1.0) / _ShoreReflectionFade;
    u_xlat0.x = u_xlat0.x * u_xlat6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x * u_xlat55;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat8.xzw = (-u_xlat7.xyz) + u_xlat10.xyz;
    u_xlat7.xyz = u_xlat0.xxx * u_xlat8.xzw + u_xlat7.xyz;
    u_xlat1.xyz = (-u_xlat11.xyz) * u_xlat16_1.xyz + u_xlat7.xyz;
    u_xlat1.xyz = vec3(u_xlat60) * u_xlat1.xyz + u_xlat5.xyz;
    u_xlat0.x = (-vs_TEXCOORD5.y) * _WorldSpaceLightPos0.w + _WorldSpaceLightPos0.y;
    u_xlat16_3.x = max(u_xlat0.x, 0.0);
    u_xlat5.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowSplitSpheres[0].xyz);
    u_xlat6.xzw = vs_TEXCOORD5.xyz + (-unity_ShadowSplitSpheres[1].xyz);
    u_xlat7.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowSplitSpheres[2].xyz);
    u_xlat8.xzw = vs_TEXCOORD5.xyz + (-unity_ShadowSplitSpheres[3].xyz);
    u_xlat2.x = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat2.y = dot(u_xlat6.xzw, u_xlat6.xzw);
    u_xlat2.z = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat2.w = dot(u_xlat8.xzw, u_xlat8.xzw);
    u_xlatb2 = lessThan(u_xlat2, unity_ShadowSplitSqRadii);
    u_xlat2 = mix(vec4(0.0, 0.0, 0.0, 0.0), vec4(1.0, 1.0, 1.0, 1.0), vec4(u_xlatb2));
    u_xlat16_21.x = u_xlat2.y + u_xlat2.x;
    u_xlat16_21.y = u_xlat2.z + u_xlat16_21.x;
    u_xlat4.x = -0.0;
    u_xlat4.y = (-u_xlat2.x);
    u_xlat4.zw = (-u_xlat16_21.xy);
    u_xlat2 = u_xlat2 + u_xlat4;
    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat16_21.x = dot(u_xlat2, vec4(1.0, 1.0, 1.0, 1.0));
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat16_21.x>=0.5);
#else
    u_xlatb0 = u_xlat16_21.x>=0.5;
#endif
    if(u_xlatb0){
        u_xlat0.x = dot(u_xlat2.yzw, vec3(1.0, 2.0, 3.0));
        u_xlat0.x = min(u_xlat0.x, 3.0);
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat5.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowPos[int(u_xlatu0)].xyz);
        u_xlati0 = int(u_xlatu0) << 2;
        u_xlat6.xzw = u_xlat5.yyy * hlslcc_mtx4x4unity_WorldToShadow[(u_xlati0 + 1)].xyz;
        u_xlat6.xzw = hlslcc_mtx4x4unity_WorldToShadow[u_xlati0].xyz * u_xlat5.xxx + u_xlat6.xzw;
        u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToShadow[(u_xlati0 + 2)].xyz * u_xlat5.zzz + u_xlat6.xzw;
        u_xlat5.xyz = u_xlat5.xyz + hlslcc_mtx4x4unity_WorldToShadow[(u_xlati0 + 3)].xyz;
        vec3 txVec1 = vec3(u_xlat5.xy,u_xlat5.z);
        u_xlat10_0 = textureLod(hlslcc_zcmp_CascadeShadowMapTexture, txVec1, 0.0);
        u_xlat16_55 = (-_LightShadowData.x) + 1.0;
        u_xlat0.x = u_xlat10_0 * u_xlat16_55 + _LightShadowData.x;
    } else {
        u_xlat0.x = 1.0;
    //ENDIF
    }
    u_xlat16_3.xyz = u_xlat16_3.xxx * _LightColor0.xyz;
    u_xlat5.xyz = u_xlat16_3.xyz * u_xlat0.xxx + vs_TEXCOORD1.xyz;
    u_xlat16_3.xyz = u_xlat5.xyz * vec3(0.300000012, 0.300000012, 0.300000012) + vec3(0.699999988, 0.699999988, 0.699999988);
    u_xlat0.x = sqrt(u_xlat59);
    u_xlat16_57 = u_xlat0.x + (-_DepthFoamCloseFadeOffset);
    u_xlat16_57 = u_xlat16_57 / _DepthFoamCloseFadeDistance;
    u_xlat16_16 = vs_COLOR0.x * _DepthFoamExtent;
    u_xlat55 = max(u_xlat6.y, 0.0);
    u_xlat55 = min(u_xlat16_16, u_xlat55);
    u_xlat16_16 = _DepthFoamExtent * vs_COLOR0.x + 9.99999975e-05;
    u_xlat55 = u_xlat55 / u_xlat16_16;
    u_xlat55 = (-u_xlat55) + 1.0;
    u_xlat5.xy = vec2(_Time.y * _DepthFoamMask_ST.z, _Time.y * _DepthFoamMask_ST.w);
    u_xlat5.xy = fract(u_xlat5.xy);
    u_xlat5.xy = _DepthFoamMask_ST.xy * vs_TEXCOORD5.xz + u_xlat5.xy;
    u_xlat10_5 = texture(_DepthFoamMask, u_xlat5.xy, -1.0).x;
    u_xlat23 = vs_TEXCOORD5.z + vs_TEXCOORD5.x;
    u_xlat23 = u_xlat23 * _DepthFoamPhaseScale;
    u_xlat23 = _DepthFoamSpeed * _Time.y + u_xlat23;
    u_xlat41 = (-u_xlat55) + 1.0;
    u_xlat16_16 = _DepthFoamSubdivision * u_xlat55 + u_xlat23;
    u_xlat16_16 = sin(u_xlat16_16);
    u_xlat16_16 = _DepthFoamWidth * u_xlat55 + u_xlat16_16;
    u_xlat16_23 = u_xlat10_5 * 2.0 + -1.0;
    u_xlat23 = u_xlat16_23 + u_xlat16_16;
#ifdef UNITY_ADRENO_ES3
    u_xlatb23 = !!(u_xlat23>=u_xlat41);
#else
    u_xlatb23 = u_xlat23>=u_xlat41;
#endif
    u_xlat23 = u_xlatb23 ? 1.0 : float(0.0);
    u_xlat5.x = u_xlat23 * u_xlat10_5;
    u_xlat16_16 = _DepthFoamDistance + 9.99999975e-05;
    u_xlat16_16 = u_xlat0.x / u_xlat16_16;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat16_0 = (-u_xlat16_16) + 1.0;
    u_xlat16_16 = vs_COLOR0.y * _DepthFoamColor.w;
    u_xlat16_57 = u_xlat16_57 * u_xlat16_16;
    u_xlat16_57 = u_xlat5.x * u_xlat16_57;
    u_xlat16_57 = u_xlat55 * u_xlat16_57;
    u_xlat16_57 = u_xlat16_0 * u_xlat16_57;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_57 = min(max(u_xlat16_57, 0.0), 1.0);
#else
    u_xlat16_57 = clamp(u_xlat16_57, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = _DepthFoamColor.xyz * u_xlat16_3.xyz + (-u_xlat1.xyz);
    u_xlat16_3.xyz = vec3(u_xlat16_57) * u_xlat16_3.xyz + u_xlat1.xyz;
    u_xlat16_0 = max(_LightColor0.w, 0.5);
    u_xlat1.xyz = u_xlat9.xyz * vec3(u_xlat26) + u_xlat16_3.xyz;
    u_xlat36.xy = fract(u_xlat0.zw);
    u_xlat16_3.xy = u_xlat36.xy * vec2(1.14999998, 1.14999998);
    u_xlat16_16 = sin(_Ripple02Rotate);
    u_xlat16_17.x = cos(_Ripple02Rotate);
    u_xlat5.x = (-u_xlat16_16);
    u_xlat16_17.y = u_xlat16_16;
    u_xlat6.x = dot(u_xlat16_3.xy, u_xlat16_17.xy);
    u_xlat5.y = u_xlat16_17.x;
    u_xlat6.y = dot(u_xlat16_3.xy, u_xlat5.xy);
    u_xlat10_36 = texture(_WaterRippleTex, u_xlat36.xy).x;
    u_xlat10_54 = texture(_WaterRippleTex, u_xlat6.xy).x;
    u_xlat16_36 = u_xlat10_54 + u_xlat10_36;
    u_xlat36.x = u_xlat16_36 * u_xlat18;
    u_xlat5.xyz = _ES_MainLightColor.xyz * vec3(u_xlat16_0) + (-u_xlat1.xyz);
    u_xlat1.xyz = u_xlat36.xxx * u_xlat5.xyz + u_xlat1.xyz;
    u_xlat1.w = u_xlat18 * vs_COLOR0.w;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "MSAA_INTERPOLATION" "MHY_SHADER_MIDDLE" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump float _MHYZBias;
uniform 	vec4 hlslcc_mtx4x4_mhyJitteredVP[4];
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
out highp vec4 vs_TEXCOORD9;
out highp vec4 vs_TEXCOORD10;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec4 u_xlat8;
float u_xlat27;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4_mhyJitteredVP[1];
    u_xlat2 = hlslcc_mtx4x4_mhyJitteredVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4_mhyJitteredVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4_mhyJitteredVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat3.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    u_xlat3.xyw = u_xlat2.xyw;
    gl_Position = u_xlat3;
    vs_COLOR0 = in_COLOR0;
    u_xlat4.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat4.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat4.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat27 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat4.xyz = vec3(u_xlat27) * u_xlat4.xyz;
    u_xlat16_5.x = u_xlat4.y * u_xlat4.y;
    u_xlat16_5.x = u_xlat4.x * u_xlat4.x + (-u_xlat16_5.x);
    u_xlat16_6 = u_xlat4.yzzx * u_xlat4.xyzz;
    u_xlat16_7.x = dot(unity_SHBr, u_xlat16_6);
    u_xlat16_7.y = dot(unity_SHBg, u_xlat16_6);
    u_xlat16_7.z = dot(unity_SHBb, u_xlat16_6);
    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_7.xyz;
    u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat4.w = 1.0;
    u_xlat16_6.x = dot(unity_SHAr, u_xlat4);
    u_xlat16_6.y = dot(unity_SHAg, u_xlat4);
    u_xlat16_6.z = dot(unity_SHAb, u_xlat4);
    u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_6.xyz;
    vs_TEXCOORD1.xyz = u_xlat16_5.xyz;
    vs_TEXCOORD1.w = 1.0;
    u_xlat27 = u_xlat3.y * _ProjectionParams.x;
    u_xlat8.w = u_xlat27 * 0.5;
    u_xlat8.xz = u_xlat3.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.z = u_xlat2.z;
    u_xlat3.xy = u_xlat8.zz + u_xlat8.xw;
    vs_TEXCOORD2 = u_xlat3;
    vs_TEXCOORD4.xyw = u_xlat3.xyw;
    u_xlat27 = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat27 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat27;
    u_xlat27 = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat27;
    u_xlat27 = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat27;
    vs_TEXCOORD3.z = (-u_xlat27);
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD3.w = 0.0;
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD5.w = 0.0;
    vs_TEXCOORD6.xyz = u_xlat4.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[1].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].www + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * in_POSITION0.yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.zzz + u_xlat1.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.www + u_xlat1.xyz;
    vs_TEXCOORD7.xyz = u_xlat1.xyz * vec3(-1.0, -1.0, 1.0);
    vs_TEXCOORD7.w = 0.0;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat27 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat1.xyz = vec3(u_xlat27) * u_xlat1.xyz;
    vs_TEXCOORD8.xyz = u_xlat1.xyz;
    vs_TEXCOORD8.w = 0.0;
    u_xlat2.xyz = u_xlat1.yzx * u_xlat4.zxy;
    u_xlat1.xyz = u_xlat4.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
    u_xlat27 = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD9.xyz = vec3(u_xlat27) * u_xlat1.xyz;
    vs_TEXCOORD9.w = 0.0;
    u_xlat27 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat27 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat27;
    vs_TEXCOORD10.w = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat27;
    vs_TEXCOORD10.xyz = u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowPos[4];
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _DepthFoamMask_ST;
uniform 	mediump float _DepthFoamSpeed;
uniform 	mediump vec4 _DepthFoamColor;
uniform 	mediump float _DepthFoamExtent;
uniform 	mediump float _DepthFoamDistance;
uniform 	mediump float _DepthFoamSubdivision;
uniform 	mediump float _DepthFoamWidth;
uniform 	mediump float _DepthFoamPhaseScale;
uniform 	mediump float _DepthFoamCloseFadeOffset;
uniform 	mediump float _DepthFoamCloseFadeDistance;
uniform 	float _NormalMapScale;
uniform 	float _Normal01_U_Speed;
uniform 	float _Normal01_VSpeed;
uniform 	float _NormalMapBias;
uniform 	float _Normal02_U_Speed;
uniform 	float _Normal02_V_Speed;
uniform 	float _RefractionIntensity;
uniform 	float _OpacityByDepth;
uniform 	float _SpecularIntensity;
uniform 	vec3 _ES_MoonDirection;
uniform 	vec3 _ES_SunDirection;
uniform 	float _Gloss;
uniform 	float _ShoreTransparency;
uniform 	float _SpecularPower;
uniform 	vec4 _ShallowColor;
uniform 	float _ShoreFade;
uniform 	vec4 _DeepColor;
uniform 	float _DeepColorDepth;
uniform 	float _DeepColorFade;
uniform 	vec4 _DistortionIntensity;
uniform 	float _SSRDistortion;
uniform 	float _SSRDistortion_Shore;
uniform 	float _SSRIntensity;
uniform 	float _ReflectionIntensity;
uniform 	float _FresnelPower;
uniform 	float _ShoreReflectionFade;
uniform 	mediump float _ProjectUVScale;
uniform 	vec4 _ReflectionSkyCubeMap_HDR;
uniform lowp sampler2D _Normal01;
uniform lowp sampler2D _Normal02;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _SceneScaledBufferBeforTransParent;
uniform lowp samplerCube _ReflectionSkyCubeMap;
uniform lowp sampler2D _SSRTexture;
uniform lowp sampler2D _DepthFoamMask;
uniform lowp sampler2DShadow hlslcc_zcmp_CascadeShadowMapTexture;
uniform lowp sampler2D _CascadeShadowMapTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD8;
in highp vec4 vs_TEXCOORD9;
in highp vec4 vs_TEXCOORD10;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec4 u_xlatb0;
vec4 u_xlat1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
lowp vec4 u_xlat10_3;
vec4 u_xlat4;
vec3 u_xlat5;
bool u_xlatb5;
vec3 u_xlat6;
vec4 u_xlat7;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
vec3 u_xlat9;
lowp vec3 u_xlat10_9;
vec3 u_xlat10;
vec3 u_xlat11;
vec3 u_xlat12;
vec3 u_xlat13;
vec3 u_xlat14;
mediump float u_xlat16_15;
vec2 u_xlat17;
mediump vec3 u_xlat16_18;
vec3 u_xlat20;
mediump vec3 u_xlat16_20;
lowp float u_xlat10_20;
int u_xlati20;
uint u_xlatu20;
bool u_xlatb20;
float u_xlat21;
float u_xlat33;
vec2 u_xlat36;
mediump float u_xlat16_36;
lowp float u_xlat10_36;
bool u_xlatb36;
float u_xlat49;
mediump float u_xlat16_50;
float u_xlat52;
mediump float u_xlat16_52;
bool u_xlatb52;
float u_xlat53;
float u_xlat54;
void main()
{
    u_xlat0.xy = vs_TEXCOORD5.zx * vec2(vec2(_ProjectUVScale, _ProjectUVScale));
    u_xlat1.x = _Time.y * _Normal01_U_Speed + u_xlat0.y;
    u_xlat1.yz = _Time.yy * vec2(_Normal01_VSpeed, _Normal02_U_Speed) + u_xlat0.xy;
    u_xlat1.w = _Time.y * _Normal02_V_Speed + u_xlat0.x;
    u_xlat10_0.xyz = texture(_Normal01, u_xlat1.xy, _NormalMapBias).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_2.xy = u_xlat16_0.xy * vec2(_NormalMapScale);
    u_xlat10_1.xyz = texture(_Normal02, u_xlat1.zw, _NormalMapBias).xyz;
    u_xlat16_0.w = -1.0;
    u_xlat16_3.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.wwz;
    u_xlat16_3.xy = u_xlat16_3.xy * vec2(_NormalMapScale);
    u_xlat16_2.z = -1.0;
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
    u_xlat1.x = float(1.0) / vs_TEXCOORD4.w;
    u_xlat17.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat17.x = texture(_CameraDepthTexture, u_xlat17.xy).x;
    u_xlat17.x = _ZBufferParams.z * u_xlat17.x + _ZBufferParams.w;
    u_xlat17.x = float(1.0) / u_xlat17.x;
    u_xlat33 = vs_TEXCOORD10.w + 9.99999975e-05;
    u_xlat33 = (-u_xlat17.x) / u_xlat33;
    u_xlat33 = vs_TEXCOORD10.y * u_xlat33 + _WorldSpaceCameraPos.y;
    u_xlat33 = (-u_xlat33) + vs_TEXCOORD5.y;
    u_xlat4.xy = u_xlat16_2.xy * vec2(vec2(_RefractionIntensity, _RefractionIntensity));
    u_xlat1.x = u_xlat1.x * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.xw = u_xlat1.xx * u_xlat4.xy;
    u_xlat1.xw = u_xlat1.xw * vs_TEXCOORD4.ww;
    u_xlat17.x = u_xlat17.x + (-vs_TEXCOORD4.w);
#ifdef UNITY_ADRENO_ES3
    u_xlat17.x = min(max(u_xlat17.x, 0.0), 1.0);
#else
    u_xlat17.x = clamp(u_xlat17.x, 0.0, 1.0);
#endif
    u_xlat4.xy = u_xlat17.xx * u_xlat1.xw;
    u_xlat4.z = 0.0;
    u_xlat1.xyw = u_xlat4.xyz + vs_TEXCOORD4.xyw;
    u_xlat1.xy = u_xlat1.xy / u_xlat1.ww;
    u_xlat1.x = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat1.x = _ZBufferParams.z * u_xlat1.x + _ZBufferParams.w;
    u_xlat1.x = float(1.0) / u_xlat1.x;
    u_xlat1.x = u_xlat1.x + (-vs_TEXCOORD4.w);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.xyw = u_xlat1.xxx * u_xlat4.xyz + vs_TEXCOORD4.xyw;
    u_xlat4.xy = u_xlat1.xy / u_xlat1.ww;
    u_xlat49 = texture(_CameraDepthTexture, u_xlat4.xy).x;
    u_xlat49 = _ZBufferParams.z * u_xlat49 + _ZBufferParams.w;
    u_xlat49 = float(1.0) / u_xlat49;
    u_xlat49 = u_xlat49 + (-vs_TEXCOORD4.w);
    u_xlat4.x = 0.100000001 / _OpacityByDepth;
    u_xlat16_3.xz = u_xlat16_2.xy;
    u_xlat16_3.y = 1.0;
    u_xlat16_20.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
    u_xlat16_20.x = inversesqrt(u_xlat16_20.x);
    u_xlat16_20.xyz = u_xlat16_3.xyz * u_xlat16_20.xxx;
#ifdef UNITY_ADRENO_ES3
    u_xlatb5 = !!(0.0>=_ES_MoonDirection.y);
#else
    u_xlatb5 = 0.0>=_ES_MoonDirection.y;
#endif
    u_xlat5.xyz = (bool(u_xlatb5)) ? _ES_SunDirection.xyz : _ES_MoonDirection.xyz;
    u_xlat6.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat53 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat54 = inversesqrt(u_xlat53);
    u_xlat7.xyz = vec3(u_xlat54) * u_xlat6.xyz;
    u_xlat5.xyz = u_xlat6.xyz * vec3(u_xlat54) + u_xlat5.xyz;
    u_xlat6.x = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat5.xyz = u_xlat5.xyz * u_xlat6.xxx;
    u_xlat20.x = dot(u_xlat16_20.xyz, u_xlat5.xyz);
    u_xlat36.x = _Gloss * 128.0;
    u_xlat20.x = max(u_xlat20.x, 9.99999975e-05);
    u_xlat20.x = log2(u_xlat20.x);
    u_xlat20.x = u_xlat20.x * u_xlat36.x;
    u_xlat20.x = exp2(u_xlat20.x);
    u_xlat20.x = u_xlat20.x * _SpecularIntensity;
    u_xlat20.x = max(u_xlat20.x, 0.0);
    u_xlat20.x = min(u_xlat20.x, 16.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb36 = !!(_ES_MoonDirection.y>=9.99999975e-05);
#else
    u_xlatb36 = _ES_MoonDirection.y>=9.99999975e-05;
#endif
    u_xlat36.x = u_xlatb36 ? 1.0 : float(0.0);
    u_xlat52 = _ES_MoonDirection.y + -1.0;
    u_xlat36.x = u_xlat36.x * u_xlat52 + 1.0;
    u_xlat4.w = float(1.0) / _ShoreTransparency;
    u_xlat5.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat5.x = inversesqrt(u_xlat5.x);
    u_xlat5.xyz = u_xlat5.xxx * vs_TEXCOORD6.xyz;
    u_xlat5.x = dot(u_xlat7.xyz, u_xlat5.xyz);
    u_xlat5.x = (-u_xlat5.x) + 1.0;
    u_xlat5.x = max(u_xlat5.x, 9.99999975e-05);
    u_xlat5.x = log2(u_xlat5.x);
    u_xlat21 = u_xlat5.x * _SpecularPower;
    u_xlat21 = exp2(u_xlat21);
    u_xlat6.xyz = u_xlat36.xxx * _LightColor0.xyz;
    u_xlat6.xyz = u_xlat20.xxx * u_xlat6.xyz;
    u_xlat20.x = u_xlat49 + -1.0;
    u_xlat20.x = u_xlat4.w * u_xlat20.x;
    u_xlat20.x = u_xlat20.x * 0.100000001;
#ifdef UNITY_ADRENO_ES3
    u_xlat20.x = min(max(u_xlat20.x, 0.0), 1.0);
#else
    u_xlat20.x = clamp(u_xlat20.x, 0.0, 1.0);
#endif
    u_xlat6.xyz = u_xlat20.xxx * u_xlat6.xyz;
    u_xlat4.xy = vec2(u_xlat49) * u_xlat4.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.xy = min(max(u_xlat4.xy, 0.0), 1.0);
#else
    u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);
#endif
    u_xlat20.x = max(u_xlat4.y, 9.99999975e-05);
    u_xlat20.x = log2(u_xlat20.x);
    u_xlat20.x = u_xlat20.x * _ShoreFade;
    u_xlat20.x = exp2(u_xlat20.x);
    u_xlat8.xyz = _ShallowColor.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat8.xyz = u_xlat20.xxx * u_xlat8.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat1.xy = u_xlat1.xy / vs_TEXCOORD4.ww;
    u_xlat10_9.xyz = texture(_SceneScaledBufferBeforTransParent, u_xlat1.xy).xyz;
    u_xlat10.xyz = u_xlat8.xyz * u_xlat10_9.xyz;
    u_xlat1.x = 0.100000001 / _DeepColorDepth;
    u_xlat1.x = u_xlat1.x * u_xlat49;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.x = max(u_xlat1.x, 9.99999975e-05);
    u_xlat1.x = log2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _DeepColorFade;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat11.xyz = (-u_xlat8.xyz) * u_xlat10_9.xyz + _DeepColor.xyz;
    u_xlat11.xyz = u_xlat1.xxx * u_xlat11.xyz + u_xlat10.xyz;
    u_xlat12.xyz = u_xlat16_2.xyz * _DistortionIntensity.xyz;
    u_xlat13.x = vs_TEXCOORD8.x;
    u_xlat13.y = vs_TEXCOORD9.x;
    u_xlat13.z = vs_TEXCOORD6.x;
    u_xlat13.x = dot(u_xlat13.xyz, u_xlat12.xyz);
    u_xlat14.x = vs_TEXCOORD8.y;
    u_xlat14.y = vs_TEXCOORD9.y;
    u_xlat14.z = vs_TEXCOORD6.y;
    u_xlat13.y = dot(u_xlat14.xyz, u_xlat12.xyz);
    u_xlat14.x = vs_TEXCOORD8.z;
    u_xlat14.y = vs_TEXCOORD9.z;
    u_xlat14.z = vs_TEXCOORD6.z;
    u_xlat13.z = dot(u_xlat14.xyz, u_xlat12.xyz);
    u_xlat1.x = dot(u_xlat13.xyz, u_xlat13.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat13.xyz = u_xlat1.xxx * u_xlat13.xyz;
    u_xlat1.x = dot((-u_xlat7.xyz), u_xlat13.xyz);
    u_xlat1.x = u_xlat1.x + u_xlat1.x;
    u_xlat7.xyz = u_xlat13.xyz * (-u_xlat1.xxx) + (-u_xlat7.xyz);
    u_xlat10_0 = textureLod(_ReflectionSkyCubeMap, u_xlat7.xyz, 0.0);
    u_xlat16_2.x = u_xlat10_0.w + -1.0;
    u_xlat16_2.x = _ReflectionSkyCubeMap_HDR.w * u_xlat16_2.x + 1.0;
    u_xlat16_2.x = log2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * _ReflectionSkyCubeMap_HDR.y;
    u_xlat16_2.x = exp2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * _ReflectionSkyCubeMap_HDR.x;
    u_xlat16_18.xyz = u_xlat10_0.xyz * u_xlat16_2.xxx;
    u_xlat1.xy = u_xlat12.xy * vec2(_SSRDistortion);
    u_xlat36.x = float(1.0) / _SSRDistortion_Shore;
    u_xlat36.x = u_xlat49 * u_xlat36.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat36.x = min(max(u_xlat36.x, 0.0), 1.0);
#else
    u_xlat36.x = clamp(u_xlat36.x, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat1.xy * u_xlat36.xx;
    u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD4.ww + vs_TEXCOORD4.xy;
    u_xlat1.xy = u_xlat1.xy / vs_TEXCOORD4.ww;
    u_xlat10_3 = texture(_SSRTexture, u_xlat1.xy).wxyz;
    u_xlat16_7.xyz = (-u_xlat16_2.xxx) * u_xlat10_0.xyz + u_xlat10_3.yzw;
    u_xlat7.xyz = u_xlat16_7.xyz * vec3(vec3(_SSRIntensity, _SSRIntensity, _SSRIntensity));
    u_xlat16_3.x = u_xlat10_3.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat7.xyz = u_xlat16_3.xxx * u_xlat7.xyz + u_xlat16_18.xyz;
    u_xlat1.x = u_xlat5.x * _FresnelPower;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _ReflectionIntensity;
    u_xlat17.x = float(1.0) / _ShoreReflectionFade;
    u_xlat17.x = u_xlat17.x * u_xlat49;
#ifdef UNITY_ADRENO_ES3
    u_xlat17.x = min(max(u_xlat17.x, 0.0), 1.0);
#else
    u_xlat17.x = clamp(u_xlat17.x, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat17.x * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat7.xyz = (-u_xlat11.xyz) + u_xlat7.xyz;
    u_xlat1.xyw = u_xlat1.xxx * u_xlat7.xyz + u_xlat11.xyz;
    u_xlat1.xyw = (-u_xlat8.xyz) * u_xlat10_9.xyz + u_xlat1.xyw;
    u_xlat1.xyw = u_xlat20.xxx * u_xlat1.xyw + u_xlat10.xyz;
    u_xlat20.x = (-vs_TEXCOORD5.y) * _WorldSpaceLightPos0.w + _WorldSpaceLightPos0.y;
    u_xlat16_2.x = max(u_xlat20.x, 0.0);
    u_xlat20.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowSplitSpheres[0].xyz);
    u_xlat7.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowSplitSpheres[1].xyz);
    u_xlat8.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowSplitSpheres[2].xyz);
    u_xlat9.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowSplitSpheres[3].xyz);
    u_xlat0.x = dot(u_xlat20.xyz, u_xlat20.xyz);
    u_xlat0.y = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat0.z = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat0.w = dot(u_xlat9.xyz, u_xlat9.xyz);
    u_xlatb0 = lessThan(u_xlat0, unity_ShadowSplitSqRadii);
    u_xlat0 = mix(vec4(0.0, 0.0, 0.0, 0.0), vec4(1.0, 1.0, 1.0, 1.0), vec4(u_xlatb0));
    u_xlat16_18.x = u_xlat0.y + u_xlat0.x;
    u_xlat16_18.y = u_xlat0.z + u_xlat16_18.x;
    u_xlat3.x = -0.0;
    u_xlat3.y = (-u_xlat0.x);
    u_xlat3.zw = (-u_xlat16_18.xy);
    u_xlat0 = u_xlat0 + u_xlat3;
    u_xlat0 = max(u_xlat0, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat16_18.x = dot(u_xlat0, vec4(1.0, 1.0, 1.0, 1.0));
#ifdef UNITY_ADRENO_ES3
    u_xlatb20 = !!(u_xlat16_18.x>=0.5);
#else
    u_xlatb20 = u_xlat16_18.x>=0.5;
#endif
    if(u_xlatb20){
        u_xlat20.x = dot(u_xlat0.yzw, vec3(1.0, 2.0, 3.0));
        u_xlat20.x = min(u_xlat20.x, 3.0);
        u_xlatu20 = uint(u_xlat20.x);
        u_xlat7.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowPos[int(u_xlatu20)].xyz);
        u_xlati20 = int(u_xlatu20) << 2;
        u_xlat8.xyz = u_xlat7.yyy * hlslcc_mtx4x4unity_WorldToShadow[(u_xlati20 + 1)].xyz;
        u_xlat7.xyw = hlslcc_mtx4x4unity_WorldToShadow[u_xlati20].xyz * u_xlat7.xxx + u_xlat8.xyz;
        u_xlat7.xyz = hlslcc_mtx4x4unity_WorldToShadow[(u_xlati20 + 2)].xyz * u_xlat7.zzz + u_xlat7.xyw;
        u_xlat20.xyz = u_xlat7.xyz + hlslcc_mtx4x4unity_WorldToShadow[(u_xlati20 + 3)].xyz;
        vec3 txVec0 = vec3(u_xlat20.xy,u_xlat20.z);
        u_xlat10_20 = textureLod(hlslcc_zcmp_CascadeShadowMapTexture, txVec0, 0.0);
        u_xlat16_36 = (-_LightShadowData.x) + 1.0;
        u_xlat20.x = u_xlat10_20 * u_xlat16_36 + _LightShadowData.x;
    } else {
        u_xlat20.x = 1.0;
    //ENDIF
    }
    u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;
    u_xlat20.xyz = u_xlat16_2.xyz * u_xlat20.xxx + vs_TEXCOORD1.xyz;
    u_xlat16_2.xyz = u_xlat20.xyz * vec3(0.300000012, 0.300000012, 0.300000012) + vec3(0.699999988, 0.699999988, 0.699999988);
    u_xlat20.x = sqrt(u_xlat53);
    u_xlat16_50 = u_xlat20.x + (-_DepthFoamCloseFadeOffset);
    u_xlat16_50 = u_xlat16_50 / _DepthFoamCloseFadeDistance;
    u_xlat16_15 = vs_COLOR0.x * _DepthFoamExtent;
    u_xlat33 = max(u_xlat33, 0.0);
    u_xlat33 = min(u_xlat16_15, u_xlat33);
    u_xlat16_15 = _DepthFoamExtent * vs_COLOR0.x + 9.99999975e-05;
    u_xlat33 = u_xlat33 / u_xlat16_15;
    u_xlat33 = (-u_xlat33) + 1.0;
    u_xlat36.xy = vec2(_Time.y * _DepthFoamMask_ST.z, _Time.y * _DepthFoamMask_ST.w);
    u_xlat36.xy = fract(u_xlat36.xy);
    u_xlat36.xy = _DepthFoamMask_ST.xy * vs_TEXCOORD5.xz + u_xlat36.xy;
    u_xlat10_36 = texture(_DepthFoamMask, u_xlat36.xy, -1.0).x;
    u_xlat52 = vs_TEXCOORD5.z + vs_TEXCOORD5.x;
    u_xlat52 = u_xlat52 * _DepthFoamPhaseScale;
    u_xlat52 = _DepthFoamSpeed * _Time.y + u_xlat52;
    u_xlat5.x = (-u_xlat33) + 1.0;
    u_xlat16_15 = _DepthFoamSubdivision * u_xlat33 + u_xlat52;
    u_xlat16_15 = sin(u_xlat16_15);
    u_xlat16_15 = _DepthFoamWidth * u_xlat33 + u_xlat16_15;
    u_xlat16_52 = u_xlat10_36 * 2.0 + -1.0;
    u_xlat52 = u_xlat16_52 + u_xlat16_15;
#ifdef UNITY_ADRENO_ES3
    u_xlatb52 = !!(u_xlat52>=u_xlat5.x);
#else
    u_xlatb52 = u_xlat52>=u_xlat5.x;
#endif
    u_xlat52 = u_xlatb52 ? 1.0 : float(0.0);
    u_xlat36.x = u_xlat52 * u_xlat10_36;
    u_xlat16_15 = _DepthFoamDistance + 9.99999975e-05;
    u_xlat16_15 = u_xlat20.x / u_xlat16_15;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_15 = min(max(u_xlat16_15, 0.0), 1.0);
#else
    u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);
#endif
    u_xlat16_20.x = (-u_xlat16_15) + 1.0;
    u_xlat16_15 = vs_COLOR0.y * _DepthFoamColor.w;
    u_xlat16_50 = u_xlat16_50 * u_xlat16_15;
    u_xlat16_50 = u_xlat36.x * u_xlat16_50;
    u_xlat16_50 = u_xlat33 * u_xlat16_50;
    u_xlat16_50 = u_xlat16_20.x * u_xlat16_50;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_50 = min(max(u_xlat16_50, 0.0), 1.0);
#else
    u_xlat16_50 = clamp(u_xlat16_50, 0.0, 1.0);
#endif
    u_xlat16_2.xyz = _DepthFoamColor.xyz * u_xlat16_2.xyz + (-u_xlat1.xyw);
    u_xlat16_2.xyz = vec3(u_xlat16_50) * u_xlat16_2.xyz + u_xlat1.xyw;
    u_xlat0.xyz = u_xlat6.xyz * vec3(u_xlat21) + u_xlat16_2.xyz;
    u_xlat0.w = u_xlat4.x * vs_COLOR0.w;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MSAA_INTERPOLATION" "MHY_SHADER_MIDDLE" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
uniform 	vec4 hlslcc_mtx4x4_mhyJitteredVP[4];
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
out highp vec4 vs_TEXCOORD9;
out highp vec4 vs_TEXCOORD10;
float u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec4 u_xlat8;
vec3 u_xlat9;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat9.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4_mhyJitteredVP[1];
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[3] * u_xlat2.wwww + u_xlat1;
    u_xlat3.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    u_xlat3.xyw = u_xlat1.xyw;
    gl_Position = u_xlat3;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD1.w = 1.0;
    u_xlat4.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat4.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat4.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat1.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
    u_xlat16_5.x = u_xlat4.y * u_xlat4.y;
    u_xlat16_5.x = u_xlat4.x * u_xlat4.x + (-u_xlat16_5.x);
    u_xlat16_6 = u_xlat4.yzzx * u_xlat4.xyzz;
    u_xlat16_7.x = dot(unity_SHBr, u_xlat16_6);
    u_xlat16_7.y = dot(unity_SHBg, u_xlat16_6);
    u_xlat16_7.z = dot(unity_SHBb, u_xlat16_6);
    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_7.xyz;
    u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat4.w = 1.0;
    u_xlat16_6.x = dot(unity_SHAr, u_xlat4);
    u_xlat16_6.y = dot(unity_SHAg, u_xlat4);
    u_xlat16_6.z = dot(unity_SHAb, u_xlat4);
    u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_6.xyz;
    vs_TEXCOORD1.xyz = u_xlat16_5.xyz;
    u_xlat1.x = u_xlat3.y * _ProjectionParams.x;
    u_xlat8.w = u_xlat1.x * 0.5;
    u_xlat8.xz = u_xlat3.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.z = u_xlat1.z;
    u_xlat3.xy = u_xlat8.zz + u_xlat8.xw;
    vs_TEXCOORD2 = u_xlat3;
    vs_TEXCOORD4.xyw = u_xlat3.xyw;
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD3.w = 0.0;
    u_xlat1.x = u_xlat2.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat2.x + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat2.z + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat2.w + u_xlat1.x;
    vs_TEXCOORD3.z = (-u_xlat1.x);
    vs_TEXCOORD5.w = 0.0;
    vs_TEXCOORD5.xyz = u_xlat9.xyz;
    u_xlat9.xyz = (-u_xlat9.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD6.w = 0.0;
    vs_TEXCOORD6.xyz = u_xlat4.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].www + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * in_POSITION0.yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.zzz + u_xlat1.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.www + u_xlat1.xyz;
    vs_TEXCOORD7.xyz = u_xlat1.xyz * vec3(-1.0, -1.0, 1.0);
    vs_TEXCOORD7.w = 0.0;
    u_xlat1.xyz = in_TANGENT0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat0 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0 = inversesqrt(u_xlat0);
    u_xlat1.xyz = vec3(u_xlat0) * u_xlat1.xyz;
    vs_TEXCOORD8.xyz = u_xlat1.xyz;
    vs_TEXCOORD8.w = 0.0;
    u_xlat2.xyz = u_xlat1.yzx * u_xlat4.zxy;
    u_xlat1.xyz = u_xlat4.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
    u_xlat0 = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD9.xyz = vec3(u_xlat0) * u_xlat1.xyz;
    vs_TEXCOORD9.w = 0.0;
    u_xlat0 = u_xlat9.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat9.x + u_xlat0;
    vs_TEXCOORD10.w = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat9.z + u_xlat0;
    vs_TEXCOORD10.xyz = u_xlat9.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowPos[4];
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _DepthFoamMask_ST;
uniform 	mediump float _DepthFoamSpeed;
uniform 	mediump vec4 _DepthFoamColor;
uniform 	mediump float _DepthFoamExtent;
uniform 	mediump float _DepthFoamDistance;
uniform 	mediump float _DepthFoamSubdivision;
uniform 	mediump float _DepthFoamWidth;
uniform 	mediump float _DepthFoamPhaseScale;
uniform 	mediump float _DepthFoamCloseFadeOffset;
uniform 	mediump float _DepthFoamCloseFadeDistance;
uniform 	float _NormalMapScale;
uniform 	float _Normal01_U_Speed;
uniform 	float _Normal01_VSpeed;
uniform 	float _NormalMapBias;
uniform 	float _Normal02_U_Speed;
uniform 	float _Normal02_V_Speed;
uniform 	float _RefractionIntensity;
uniform 	float _OpacityByDepth;
uniform 	float _SpecularIntensity;
uniform 	vec3 _ES_MoonDirection;
uniform 	vec3 _ES_SunDirection;
uniform 	float _Gloss;
uniform 	float _ShoreTransparency;
uniform 	float _SpecularPower;
uniform 	vec4 _ShallowColor;
uniform 	float _ShoreFade;
uniform 	vec4 _DeepColor;
uniform 	float _DeepColorDepth;
uniform 	float _DeepColorFade;
uniform 	vec4 _DistortionIntensity;
uniform 	float _SSRDistortion;
uniform 	float _SSRDistortion_Shore;
uniform 	float _SSRIntensity;
uniform 	float _ReflectionIntensity;
uniform 	float _FresnelPower;
uniform 	float _ShoreReflectionFade;
uniform 	mediump float _ProjectUVScale;
uniform 	vec4 _ReflectionSkyCubeMap_HDR;
uniform lowp sampler2D _Normal01;
uniform lowp sampler2D _Normal02;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _SceneScaledBufferBeforTransParent;
uniform lowp samplerCube _ReflectionSkyCubeMap;
uniform lowp sampler2D _SSRTexture;
uniform lowp sampler2D _DepthFoamMask;
uniform lowp sampler2DShadow hlslcc_zcmp_CascadeShadowMapTexture;
uniform lowp sampler2D _CascadeShadowMapTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD8;
in highp vec4 vs_TEXCOORD9;
in highp vec4 vs_TEXCOORD10;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec4 u_xlatb0;
vec4 u_xlat1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
lowp vec4 u_xlat10_3;
vec4 u_xlat4;
vec3 u_xlat5;
bool u_xlatb5;
vec3 u_xlat6;
vec4 u_xlat7;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
vec3 u_xlat9;
lowp vec3 u_xlat10_9;
vec3 u_xlat10;
vec3 u_xlat11;
vec3 u_xlat12;
vec3 u_xlat13;
vec3 u_xlat14;
mediump float u_xlat16_15;
vec2 u_xlat17;
mediump vec3 u_xlat16_18;
vec3 u_xlat20;
mediump vec3 u_xlat16_20;
lowp float u_xlat10_20;
int u_xlati20;
uint u_xlatu20;
bool u_xlatb20;
float u_xlat21;
float u_xlat33;
vec2 u_xlat36;
mediump float u_xlat16_36;
lowp float u_xlat10_36;
bool u_xlatb36;
float u_xlat49;
mediump float u_xlat16_50;
float u_xlat52;
mediump float u_xlat16_52;
bool u_xlatb52;
float u_xlat53;
float u_xlat54;
void main()
{
    u_xlat0.xy = vs_TEXCOORD5.zx * vec2(vec2(_ProjectUVScale, _ProjectUVScale));
    u_xlat1.x = _Time.y * _Normal01_U_Speed + u_xlat0.y;
    u_xlat1.yz = _Time.yy * vec2(_Normal01_VSpeed, _Normal02_U_Speed) + u_xlat0.xy;
    u_xlat1.w = _Time.y * _Normal02_V_Speed + u_xlat0.x;
    u_xlat10_0.xyz = texture(_Normal01, u_xlat1.xy, _NormalMapBias).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_2.xy = u_xlat16_0.xy * vec2(_NormalMapScale);
    u_xlat10_1.xyz = texture(_Normal02, u_xlat1.zw, _NormalMapBias).xyz;
    u_xlat16_0.w = -1.0;
    u_xlat16_3.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.wwz;
    u_xlat16_3.xy = u_xlat16_3.xy * vec2(_NormalMapScale);
    u_xlat16_2.z = -1.0;
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
    u_xlat1.x = float(1.0) / vs_TEXCOORD4.w;
    u_xlat17.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat17.x = texture(_CameraDepthTexture, u_xlat17.xy).x;
    u_xlat17.x = _ZBufferParams.z * u_xlat17.x + _ZBufferParams.w;
    u_xlat17.x = float(1.0) / u_xlat17.x;
    u_xlat33 = vs_TEXCOORD10.w + 9.99999975e-05;
    u_xlat33 = (-u_xlat17.x) / u_xlat33;
    u_xlat33 = vs_TEXCOORD10.y * u_xlat33 + _WorldSpaceCameraPos.y;
    u_xlat33 = (-u_xlat33) + vs_TEXCOORD5.y;
    u_xlat4.xy = u_xlat16_2.xy * vec2(vec2(_RefractionIntensity, _RefractionIntensity));
    u_xlat1.x = u_xlat1.x * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.xw = u_xlat1.xx * u_xlat4.xy;
    u_xlat1.xw = u_xlat1.xw * vs_TEXCOORD4.ww;
    u_xlat17.x = u_xlat17.x + (-vs_TEXCOORD4.w);
#ifdef UNITY_ADRENO_ES3
    u_xlat17.x = min(max(u_xlat17.x, 0.0), 1.0);
#else
    u_xlat17.x = clamp(u_xlat17.x, 0.0, 1.0);
#endif
    u_xlat4.xy = u_xlat17.xx * u_xlat1.xw;
    u_xlat4.z = 0.0;
    u_xlat1.xyw = u_xlat4.xyz + vs_TEXCOORD4.xyw;
    u_xlat1.xy = u_xlat1.xy / u_xlat1.ww;
    u_xlat1.x = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat1.x = _ZBufferParams.z * u_xlat1.x + _ZBufferParams.w;
    u_xlat1.x = float(1.0) / u_xlat1.x;
    u_xlat1.x = u_xlat1.x + (-vs_TEXCOORD4.w);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.xyw = u_xlat1.xxx * u_xlat4.xyz + vs_TEXCOORD4.xyw;
    u_xlat4.xy = u_xlat1.xy / u_xlat1.ww;
    u_xlat49 = texture(_CameraDepthTexture, u_xlat4.xy).x;
    u_xlat49 = _ZBufferParams.z * u_xlat49 + _ZBufferParams.w;
    u_xlat49 = float(1.0) / u_xlat49;
    u_xlat49 = u_xlat49 + (-vs_TEXCOORD4.w);
    u_xlat4.x = 0.100000001 / _OpacityByDepth;
    u_xlat16_3.xz = u_xlat16_2.xy;
    u_xlat16_3.y = 1.0;
    u_xlat16_20.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
    u_xlat16_20.x = inversesqrt(u_xlat16_20.x);
    u_xlat16_20.xyz = u_xlat16_3.xyz * u_xlat16_20.xxx;
#ifdef UNITY_ADRENO_ES3
    u_xlatb5 = !!(0.0>=_ES_MoonDirection.y);
#else
    u_xlatb5 = 0.0>=_ES_MoonDirection.y;
#endif
    u_xlat5.xyz = (bool(u_xlatb5)) ? _ES_SunDirection.xyz : _ES_MoonDirection.xyz;
    u_xlat6.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat53 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat54 = inversesqrt(u_xlat53);
    u_xlat7.xyz = vec3(u_xlat54) * u_xlat6.xyz;
    u_xlat5.xyz = u_xlat6.xyz * vec3(u_xlat54) + u_xlat5.xyz;
    u_xlat6.x = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat5.xyz = u_xlat5.xyz * u_xlat6.xxx;
    u_xlat20.x = dot(u_xlat16_20.xyz, u_xlat5.xyz);
    u_xlat36.x = _Gloss * 128.0;
    u_xlat20.x = max(u_xlat20.x, 9.99999975e-05);
    u_xlat20.x = log2(u_xlat20.x);
    u_xlat20.x = u_xlat20.x * u_xlat36.x;
    u_xlat20.x = exp2(u_xlat20.x);
    u_xlat20.x = u_xlat20.x * _SpecularIntensity;
    u_xlat20.x = max(u_xlat20.x, 0.0);
    u_xlat20.x = min(u_xlat20.x, 16.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb36 = !!(_ES_MoonDirection.y>=9.99999975e-05);
#else
    u_xlatb36 = _ES_MoonDirection.y>=9.99999975e-05;
#endif
    u_xlat36.x = u_xlatb36 ? 1.0 : float(0.0);
    u_xlat52 = _ES_MoonDirection.y + -1.0;
    u_xlat36.x = u_xlat36.x * u_xlat52 + 1.0;
    u_xlat4.w = float(1.0) / _ShoreTransparency;
    u_xlat5.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat5.x = inversesqrt(u_xlat5.x);
    u_xlat5.xyz = u_xlat5.xxx * vs_TEXCOORD6.xyz;
    u_xlat5.x = dot(u_xlat7.xyz, u_xlat5.xyz);
    u_xlat5.x = (-u_xlat5.x) + 1.0;
    u_xlat5.x = max(u_xlat5.x, 9.99999975e-05);
    u_xlat5.x = log2(u_xlat5.x);
    u_xlat21 = u_xlat5.x * _SpecularPower;
    u_xlat21 = exp2(u_xlat21);
    u_xlat6.xyz = u_xlat36.xxx * _LightColor0.xyz;
    u_xlat6.xyz = u_xlat20.xxx * u_xlat6.xyz;
    u_xlat20.x = u_xlat49 + -1.0;
    u_xlat20.x = u_xlat4.w * u_xlat20.x;
    u_xlat20.x = u_xlat20.x * 0.100000001;
#ifdef UNITY_ADRENO_ES3
    u_xlat20.x = min(max(u_xlat20.x, 0.0), 1.0);
#else
    u_xlat20.x = clamp(u_xlat20.x, 0.0, 1.0);
#endif
    u_xlat6.xyz = u_xlat20.xxx * u_xlat6.xyz;
    u_xlat4.xy = vec2(u_xlat49) * u_xlat4.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.xy = min(max(u_xlat4.xy, 0.0), 1.0);
#else
    u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);
#endif
    u_xlat20.x = max(u_xlat4.y, 9.99999975e-05);
    u_xlat20.x = log2(u_xlat20.x);
    u_xlat20.x = u_xlat20.x * _ShoreFade;
    u_xlat20.x = exp2(u_xlat20.x);
    u_xlat8.xyz = _ShallowColor.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat8.xyz = u_xlat20.xxx * u_xlat8.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat1.xy = u_xlat1.xy / vs_TEXCOORD4.ww;
    u_xlat10_9.xyz = texture(_SceneScaledBufferBeforTransParent, u_xlat1.xy).xyz;
    u_xlat10.xyz = u_xlat8.xyz * u_xlat10_9.xyz;
    u_xlat1.x = 0.100000001 / _DeepColorDepth;
    u_xlat1.x = u_xlat1.x * u_xlat49;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.x = max(u_xlat1.x, 9.99999975e-05);
    u_xlat1.x = log2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _DeepColorFade;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat11.xyz = (-u_xlat8.xyz) * u_xlat10_9.xyz + _DeepColor.xyz;
    u_xlat11.xyz = u_xlat1.xxx * u_xlat11.xyz + u_xlat10.xyz;
    u_xlat12.xyz = u_xlat16_2.xyz * _DistortionIntensity.xyz;
    u_xlat13.x = vs_TEXCOORD8.x;
    u_xlat13.y = vs_TEXCOORD9.x;
    u_xlat13.z = vs_TEXCOORD6.x;
    u_xlat13.x = dot(u_xlat13.xyz, u_xlat12.xyz);
    u_xlat14.x = vs_TEXCOORD8.y;
    u_xlat14.y = vs_TEXCOORD9.y;
    u_xlat14.z = vs_TEXCOORD6.y;
    u_xlat13.y = dot(u_xlat14.xyz, u_xlat12.xyz);
    u_xlat14.x = vs_TEXCOORD8.z;
    u_xlat14.y = vs_TEXCOORD9.z;
    u_xlat14.z = vs_TEXCOORD6.z;
    u_xlat13.z = dot(u_xlat14.xyz, u_xlat12.xyz);
    u_xlat1.x = dot(u_xlat13.xyz, u_xlat13.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat13.xyz = u_xlat1.xxx * u_xlat13.xyz;
    u_xlat1.x = dot((-u_xlat7.xyz), u_xlat13.xyz);
    u_xlat1.x = u_xlat1.x + u_xlat1.x;
    u_xlat7.xyz = u_xlat13.xyz * (-u_xlat1.xxx) + (-u_xlat7.xyz);
    u_xlat10_0 = textureLod(_ReflectionSkyCubeMap, u_xlat7.xyz, 0.0);
    u_xlat16_2.x = u_xlat10_0.w + -1.0;
    u_xlat16_2.x = _ReflectionSkyCubeMap_HDR.w * u_xlat16_2.x + 1.0;
    u_xlat16_2.x = log2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * _ReflectionSkyCubeMap_HDR.y;
    u_xlat16_2.x = exp2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * _ReflectionSkyCubeMap_HDR.x;
    u_xlat16_18.xyz = u_xlat10_0.xyz * u_xlat16_2.xxx;
    u_xlat1.xy = u_xlat12.xy * vec2(_SSRDistortion);
    u_xlat36.x = float(1.0) / _SSRDistortion_Shore;
    u_xlat36.x = u_xlat49 * u_xlat36.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat36.x = min(max(u_xlat36.x, 0.0), 1.0);
#else
    u_xlat36.x = clamp(u_xlat36.x, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat1.xy * u_xlat36.xx;
    u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD4.ww + vs_TEXCOORD4.xy;
    u_xlat1.xy = u_xlat1.xy / vs_TEXCOORD4.ww;
    u_xlat10_3 = texture(_SSRTexture, u_xlat1.xy).wxyz;
    u_xlat16_7.xyz = (-u_xlat16_2.xxx) * u_xlat10_0.xyz + u_xlat10_3.yzw;
    u_xlat7.xyz = u_xlat16_7.xyz * vec3(vec3(_SSRIntensity, _SSRIntensity, _SSRIntensity));
    u_xlat16_3.x = u_xlat10_3.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat7.xyz = u_xlat16_3.xxx * u_xlat7.xyz + u_xlat16_18.xyz;
    u_xlat1.x = u_xlat5.x * _FresnelPower;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _ReflectionIntensity;
    u_xlat17.x = float(1.0) / _ShoreReflectionFade;
    u_xlat17.x = u_xlat17.x * u_xlat49;
#ifdef UNITY_ADRENO_ES3
    u_xlat17.x = min(max(u_xlat17.x, 0.0), 1.0);
#else
    u_xlat17.x = clamp(u_xlat17.x, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat17.x * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat7.xyz = (-u_xlat11.xyz) + u_xlat7.xyz;
    u_xlat1.xyw = u_xlat1.xxx * u_xlat7.xyz + u_xlat11.xyz;
    u_xlat1.xyw = (-u_xlat8.xyz) * u_xlat10_9.xyz + u_xlat1.xyw;
    u_xlat1.xyw = u_xlat20.xxx * u_xlat1.xyw + u_xlat10.xyz;
    u_xlat20.x = (-vs_TEXCOORD5.y) * _WorldSpaceLightPos0.w + _WorldSpaceLightPos0.y;
    u_xlat16_2.x = max(u_xlat20.x, 0.0);
    u_xlat20.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowSplitSpheres[0].xyz);
    u_xlat7.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowSplitSpheres[1].xyz);
    u_xlat8.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowSplitSpheres[2].xyz);
    u_xlat9.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowSplitSpheres[3].xyz);
    u_xlat0.x = dot(u_xlat20.xyz, u_xlat20.xyz);
    u_xlat0.y = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat0.z = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat0.w = dot(u_xlat9.xyz, u_xlat9.xyz);
    u_xlatb0 = lessThan(u_xlat0, unity_ShadowSplitSqRadii);
    u_xlat0 = mix(vec4(0.0, 0.0, 0.0, 0.0), vec4(1.0, 1.0, 1.0, 1.0), vec4(u_xlatb0));
    u_xlat16_18.x = u_xlat0.y + u_xlat0.x;
    u_xlat16_18.y = u_xlat0.z + u_xlat16_18.x;
    u_xlat3.x = -0.0;
    u_xlat3.y = (-u_xlat0.x);
    u_xlat3.zw = (-u_xlat16_18.xy);
    u_xlat0 = u_xlat0 + u_xlat3;
    u_xlat0 = max(u_xlat0, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat16_18.x = dot(u_xlat0, vec4(1.0, 1.0, 1.0, 1.0));
#ifdef UNITY_ADRENO_ES3
    u_xlatb20 = !!(u_xlat16_18.x>=0.5);
#else
    u_xlatb20 = u_xlat16_18.x>=0.5;
#endif
    if(u_xlatb20){
        u_xlat20.x = dot(u_xlat0.yzw, vec3(1.0, 2.0, 3.0));
        u_xlat20.x = min(u_xlat20.x, 3.0);
        u_xlatu20 = uint(u_xlat20.x);
        u_xlat7.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowPos[int(u_xlatu20)].xyz);
        u_xlati20 = int(u_xlatu20) << 2;
        u_xlat8.xyz = u_xlat7.yyy * hlslcc_mtx4x4unity_WorldToShadow[(u_xlati20 + 1)].xyz;
        u_xlat7.xyw = hlslcc_mtx4x4unity_WorldToShadow[u_xlati20].xyz * u_xlat7.xxx + u_xlat8.xyz;
        u_xlat7.xyz = hlslcc_mtx4x4unity_WorldToShadow[(u_xlati20 + 2)].xyz * u_xlat7.zzz + u_xlat7.xyw;
        u_xlat20.xyz = u_xlat7.xyz + hlslcc_mtx4x4unity_WorldToShadow[(u_xlati20 + 3)].xyz;
        vec3 txVec0 = vec3(u_xlat20.xy,u_xlat20.z);
        u_xlat10_20 = textureLod(hlslcc_zcmp_CascadeShadowMapTexture, txVec0, 0.0);
        u_xlat16_36 = (-_LightShadowData.x) + 1.0;
        u_xlat20.x = u_xlat10_20 * u_xlat16_36 + _LightShadowData.x;
    } else {
        u_xlat20.x = 1.0;
    //ENDIF
    }
    u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;
    u_xlat20.xyz = u_xlat16_2.xyz * u_xlat20.xxx + vs_TEXCOORD1.xyz;
    u_xlat16_2.xyz = u_xlat20.xyz * vec3(0.300000012, 0.300000012, 0.300000012) + vec3(0.699999988, 0.699999988, 0.699999988);
    u_xlat20.x = sqrt(u_xlat53);
    u_xlat16_50 = u_xlat20.x + (-_DepthFoamCloseFadeOffset);
    u_xlat16_50 = u_xlat16_50 / _DepthFoamCloseFadeDistance;
    u_xlat16_15 = vs_COLOR0.x * _DepthFoamExtent;
    u_xlat33 = max(u_xlat33, 0.0);
    u_xlat33 = min(u_xlat16_15, u_xlat33);
    u_xlat16_15 = _DepthFoamExtent * vs_COLOR0.x + 9.99999975e-05;
    u_xlat33 = u_xlat33 / u_xlat16_15;
    u_xlat33 = (-u_xlat33) + 1.0;
    u_xlat36.xy = vec2(_Time.y * _DepthFoamMask_ST.z, _Time.y * _DepthFoamMask_ST.w);
    u_xlat36.xy = fract(u_xlat36.xy);
    u_xlat36.xy = _DepthFoamMask_ST.xy * vs_TEXCOORD5.xz + u_xlat36.xy;
    u_xlat10_36 = texture(_DepthFoamMask, u_xlat36.xy, -1.0).x;
    u_xlat52 = vs_TEXCOORD5.z + vs_TEXCOORD5.x;
    u_xlat52 = u_xlat52 * _DepthFoamPhaseScale;
    u_xlat52 = _DepthFoamSpeed * _Time.y + u_xlat52;
    u_xlat5.x = (-u_xlat33) + 1.0;
    u_xlat16_15 = _DepthFoamSubdivision * u_xlat33 + u_xlat52;
    u_xlat16_15 = sin(u_xlat16_15);
    u_xlat16_15 = _DepthFoamWidth * u_xlat33 + u_xlat16_15;
    u_xlat16_52 = u_xlat10_36 * 2.0 + -1.0;
    u_xlat52 = u_xlat16_52 + u_xlat16_15;
#ifdef UNITY_ADRENO_ES3
    u_xlatb52 = !!(u_xlat52>=u_xlat5.x);
#else
    u_xlatb52 = u_xlat52>=u_xlat5.x;
#endif
    u_xlat52 = u_xlatb52 ? 1.0 : float(0.0);
    u_xlat36.x = u_xlat52 * u_xlat10_36;
    u_xlat16_15 = _DepthFoamDistance + 9.99999975e-05;
    u_xlat16_15 = u_xlat20.x / u_xlat16_15;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_15 = min(max(u_xlat16_15, 0.0), 1.0);
#else
    u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);
#endif
    u_xlat16_20.x = (-u_xlat16_15) + 1.0;
    u_xlat16_15 = vs_COLOR0.y * _DepthFoamColor.w;
    u_xlat16_50 = u_xlat16_50 * u_xlat16_15;
    u_xlat16_50 = u_xlat36.x * u_xlat16_50;
    u_xlat16_50 = u_xlat33 * u_xlat16_50;
    u_xlat16_50 = u_xlat16_20.x * u_xlat16_50;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_50 = min(max(u_xlat16_50, 0.0), 1.0);
#else
    u_xlat16_50 = clamp(u_xlat16_50, 0.0, 1.0);
#endif
    u_xlat16_2.xyz = _DepthFoamColor.xyz * u_xlat16_2.xyz + (-u_xlat1.xyw);
    u_xlat16_2.xyz = vec3(u_xlat16_50) * u_xlat16_2.xyz + u_xlat1.xyw;
    u_xlat0.xyz = u_xlat6.xyz * vec3(u_xlat21) + u_xlat16_2.xyz;
    u_xlat0.w = u_xlat4.x * vs_COLOR0.w;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "MSAA_INTERPOLATION" "MHY_SHADER_LOW" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump float _MHYZBias;
uniform 	vec4 hlslcc_mtx4x4_mhyJitteredVP[4];
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
out highp vec4 vs_TEXCOORD9;
out highp vec4 vs_TEXCOORD10;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec4 u_xlat8;
float u_xlat27;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4_mhyJitteredVP[1];
    u_xlat2 = hlslcc_mtx4x4_mhyJitteredVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4_mhyJitteredVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4_mhyJitteredVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat3.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    u_xlat3.xyw = u_xlat2.xyw;
    gl_Position = u_xlat3;
    vs_COLOR0 = in_COLOR0;
    u_xlat4.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat4.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat4.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat27 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat4.xyz = vec3(u_xlat27) * u_xlat4.xyz;
    u_xlat16_5.x = u_xlat4.y * u_xlat4.y;
    u_xlat16_5.x = u_xlat4.x * u_xlat4.x + (-u_xlat16_5.x);
    u_xlat16_6 = u_xlat4.yzzx * u_xlat4.xyzz;
    u_xlat16_7.x = dot(unity_SHBr, u_xlat16_6);
    u_xlat16_7.y = dot(unity_SHBg, u_xlat16_6);
    u_xlat16_7.z = dot(unity_SHBb, u_xlat16_6);
    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_7.xyz;
    u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat4.w = 1.0;
    u_xlat16_6.x = dot(unity_SHAr, u_xlat4);
    u_xlat16_6.y = dot(unity_SHAg, u_xlat4);
    u_xlat16_6.z = dot(unity_SHAb, u_xlat4);
    u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_6.xyz;
    vs_TEXCOORD1.xyz = u_xlat16_5.xyz;
    vs_TEXCOORD1.w = 1.0;
    u_xlat27 = u_xlat3.y * _ProjectionParams.x;
    u_xlat8.w = u_xlat27 * 0.5;
    u_xlat8.xz = u_xlat3.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.z = u_xlat2.z;
    u_xlat3.xy = u_xlat8.zz + u_xlat8.xw;
    vs_TEXCOORD2 = u_xlat3;
    vs_TEXCOORD4.xyw = u_xlat3.xyw;
    u_xlat27 = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat27 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat27;
    u_xlat27 = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat27;
    u_xlat27 = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat27;
    vs_TEXCOORD3.z = (-u_xlat27);
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD3.w = 0.0;
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD5.w = 0.0;
    vs_TEXCOORD6.xyz = u_xlat4.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[1].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].www + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * in_POSITION0.yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.zzz + u_xlat1.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.www + u_xlat1.xyz;
    vs_TEXCOORD7.xyz = u_xlat1.xyz * vec3(-1.0, -1.0, 1.0);
    vs_TEXCOORD7.w = 0.0;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat27 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat1.xyz = vec3(u_xlat27) * u_xlat1.xyz;
    vs_TEXCOORD8.xyz = u_xlat1.xyz;
    vs_TEXCOORD8.w = 0.0;
    u_xlat2.xyz = u_xlat1.yzx * u_xlat4.zxy;
    u_xlat1.xyz = u_xlat4.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
    u_xlat27 = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD9.xyz = vec3(u_xlat27) * u_xlat1.xyz;
    vs_TEXCOORD9.w = 0.0;
    u_xlat27 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat27 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat27;
    vs_TEXCOORD10.w = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat27;
    vs_TEXCOORD10.xyz = u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowPos[4];
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _DepthFoamMask_ST;
uniform 	mediump float _DepthFoamSpeed;
uniform 	mediump vec4 _DepthFoamColor;
uniform 	mediump float _DepthFoamExtent;
uniform 	mediump float _DepthFoamDistance;
uniform 	mediump float _DepthFoamSubdivision;
uniform 	mediump float _DepthFoamWidth;
uniform 	mediump float _DepthFoamPhaseScale;
uniform 	mediump float _DepthFoamCloseFadeOffset;
uniform 	mediump float _DepthFoamCloseFadeDistance;
uniform 	float _NormalMapScale;
uniform 	float _Normal01_U_Speed;
uniform 	float _Normal01_VSpeed;
uniform 	float _NormalMapBias;
uniform 	float _Normal02_U_Speed;
uniform 	float _Normal02_V_Speed;
uniform 	float _RefractionIntensity;
uniform 	float _OpacityByDepth;
uniform 	float _SpecularIntensity;
uniform 	vec3 _ES_MoonDirection;
uniform 	vec3 _ES_SunDirection;
uniform 	float _Gloss;
uniform 	float _ShoreTransparency;
uniform 	float _SpecularPower;
uniform 	vec4 _ShallowColor;
uniform 	float _ShoreFade;
uniform 	vec4 _DeepColor;
uniform 	float _DeepColorDepth;
uniform 	float _DeepColorFade;
uniform 	vec4 _DistortionIntensity;
uniform 	float _ReflectionIntensity;
uniform 	float _FresnelPower;
uniform 	float _ShoreReflectionFade;
uniform 	mediump float _ProjectUVScale;
uniform 	vec4 _ReflectionSkyCubeMap_HDR;
uniform lowp sampler2D _Normal01;
uniform lowp sampler2D _Normal02;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _SceneScaledBufferBeforTransParent;
uniform lowp samplerCube _ReflectionSkyCubeMap;
uniform lowp sampler2D _DepthFoamMask;
uniform lowp sampler2DShadow hlslcc_zcmp_CascadeShadowMapTexture;
uniform lowp sampler2D _CascadeShadowMapTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD8;
in highp vec4 vs_TEXCOORD9;
in highp vec4 vs_TEXCOORD10;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec4 u_xlatb0;
vec4 u_xlat1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec4 u_xlat4;
vec3 u_xlat5;
bool u_xlatb5;
vec3 u_xlat6;
vec4 u_xlat7;
vec3 u_xlat8;
vec3 u_xlat9;
lowp vec3 u_xlat10_9;
vec3 u_xlat10;
vec3 u_xlat11;
vec3 u_xlat12;
vec3 u_xlat13;
vec3 u_xlat14;
mediump float u_xlat16_15;
vec2 u_xlat17;
mediump vec2 u_xlat16_18;
vec3 u_xlat20;
mediump vec3 u_xlat16_20;
lowp float u_xlat10_20;
int u_xlati20;
uint u_xlatu20;
bool u_xlatb20;
float u_xlat21;
float u_xlat33;
vec2 u_xlat36;
mediump float u_xlat16_36;
lowp float u_xlat10_36;
bool u_xlatb36;
float u_xlat49;
mediump float u_xlat16_50;
float u_xlat52;
mediump float u_xlat16_52;
bool u_xlatb52;
float u_xlat53;
float u_xlat54;
void main()
{
    u_xlat0.xy = vs_TEXCOORD5.zx * vec2(vec2(_ProjectUVScale, _ProjectUVScale));
    u_xlat1.x = _Time.y * _Normal01_U_Speed + u_xlat0.y;
    u_xlat1.yz = _Time.yy * vec2(_Normal01_VSpeed, _Normal02_U_Speed) + u_xlat0.xy;
    u_xlat1.w = _Time.y * _Normal02_V_Speed + u_xlat0.x;
    u_xlat10_0.xyz = texture(_Normal01, u_xlat1.xy, _NormalMapBias).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_2.xy = u_xlat16_0.xy * vec2(_NormalMapScale);
    u_xlat10_1.xyz = texture(_Normal02, u_xlat1.zw, _NormalMapBias).xyz;
    u_xlat16_0.w = -1.0;
    u_xlat16_3.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.wwz;
    u_xlat16_3.xy = u_xlat16_3.xy * vec2(_NormalMapScale);
    u_xlat16_2.z = -1.0;
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
    u_xlat1.x = float(1.0) / vs_TEXCOORD4.w;
    u_xlat17.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat17.x = texture(_CameraDepthTexture, u_xlat17.xy).x;
    u_xlat17.x = _ZBufferParams.z * u_xlat17.x + _ZBufferParams.w;
    u_xlat17.x = float(1.0) / u_xlat17.x;
    u_xlat33 = vs_TEXCOORD10.w + 9.99999975e-05;
    u_xlat33 = (-u_xlat17.x) / u_xlat33;
    u_xlat33 = vs_TEXCOORD10.y * u_xlat33 + _WorldSpaceCameraPos.y;
    u_xlat33 = (-u_xlat33) + vs_TEXCOORD5.y;
    u_xlat4.xy = u_xlat16_2.xy * vec2(vec2(_RefractionIntensity, _RefractionIntensity));
    u_xlat1.x = u_xlat1.x * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.xw = u_xlat1.xx * u_xlat4.xy;
    u_xlat1.xw = u_xlat1.xw * vs_TEXCOORD4.ww;
    u_xlat17.x = u_xlat17.x + (-vs_TEXCOORD4.w);
#ifdef UNITY_ADRENO_ES3
    u_xlat17.x = min(max(u_xlat17.x, 0.0), 1.0);
#else
    u_xlat17.x = clamp(u_xlat17.x, 0.0, 1.0);
#endif
    u_xlat4.xy = u_xlat17.xx * u_xlat1.xw;
    u_xlat4.z = 0.0;
    u_xlat1.xyw = u_xlat4.xyz + vs_TEXCOORD4.xyw;
    u_xlat1.xy = u_xlat1.xy / u_xlat1.ww;
    u_xlat1.x = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat1.x = _ZBufferParams.z * u_xlat1.x + _ZBufferParams.w;
    u_xlat1.x = float(1.0) / u_xlat1.x;
    u_xlat1.x = u_xlat1.x + (-vs_TEXCOORD4.w);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.xyw = u_xlat1.xxx * u_xlat4.xyz + vs_TEXCOORD4.xyw;
    u_xlat4.xy = u_xlat1.xy / u_xlat1.ww;
    u_xlat49 = texture(_CameraDepthTexture, u_xlat4.xy).x;
    u_xlat49 = _ZBufferParams.z * u_xlat49 + _ZBufferParams.w;
    u_xlat49 = float(1.0) / u_xlat49;
    u_xlat49 = u_xlat49 + (-vs_TEXCOORD4.w);
    u_xlat4.x = 0.100000001 / _OpacityByDepth;
    u_xlat16_3.xz = u_xlat16_2.xy;
    u_xlat16_3.y = 1.0;
    u_xlat16_20.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
    u_xlat16_20.x = inversesqrt(u_xlat16_20.x);
    u_xlat16_20.xyz = u_xlat16_3.xyz * u_xlat16_20.xxx;
#ifdef UNITY_ADRENO_ES3
    u_xlatb5 = !!(0.0>=_ES_MoonDirection.y);
#else
    u_xlatb5 = 0.0>=_ES_MoonDirection.y;
#endif
    u_xlat5.xyz = (bool(u_xlatb5)) ? _ES_SunDirection.xyz : _ES_MoonDirection.xyz;
    u_xlat6.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat53 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat54 = inversesqrt(u_xlat53);
    u_xlat7.xyz = vec3(u_xlat54) * u_xlat6.xyz;
    u_xlat5.xyz = u_xlat6.xyz * vec3(u_xlat54) + u_xlat5.xyz;
    u_xlat6.x = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat5.xyz = u_xlat5.xyz * u_xlat6.xxx;
    u_xlat20.x = dot(u_xlat16_20.xyz, u_xlat5.xyz);
    u_xlat36.x = _Gloss * 128.0;
    u_xlat20.x = max(u_xlat20.x, 9.99999975e-05);
    u_xlat20.x = log2(u_xlat20.x);
    u_xlat20.x = u_xlat20.x * u_xlat36.x;
    u_xlat20.x = exp2(u_xlat20.x);
    u_xlat20.x = u_xlat20.x * _SpecularIntensity;
    u_xlat20.x = max(u_xlat20.x, 0.0);
    u_xlat20.x = min(u_xlat20.x, 16.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb36 = !!(_ES_MoonDirection.y>=9.99999975e-05);
#else
    u_xlatb36 = _ES_MoonDirection.y>=9.99999975e-05;
#endif
    u_xlat36.x = u_xlatb36 ? 1.0 : float(0.0);
    u_xlat52 = _ES_MoonDirection.y + -1.0;
    u_xlat36.x = u_xlat36.x * u_xlat52 + 1.0;
    u_xlat4.w = float(1.0) / _ShoreTransparency;
    u_xlat5.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat5.x = inversesqrt(u_xlat5.x);
    u_xlat5.xyz = u_xlat5.xxx * vs_TEXCOORD6.xyz;
    u_xlat5.x = dot(u_xlat7.xyz, u_xlat5.xyz);
    u_xlat5.x = (-u_xlat5.x) + 1.0;
    u_xlat5.x = max(u_xlat5.x, 9.99999975e-05);
    u_xlat5.x = log2(u_xlat5.x);
    u_xlat21 = u_xlat5.x * _SpecularPower;
    u_xlat21 = exp2(u_xlat21);
    u_xlat6.xyz = u_xlat36.xxx * _LightColor0.xyz;
    u_xlat6.xyz = u_xlat20.xxx * u_xlat6.xyz;
    u_xlat20.x = u_xlat49 + -1.0;
    u_xlat20.x = u_xlat4.w * u_xlat20.x;
    u_xlat20.x = u_xlat20.x * 0.100000001;
#ifdef UNITY_ADRENO_ES3
    u_xlat20.x = min(max(u_xlat20.x, 0.0), 1.0);
#else
    u_xlat20.x = clamp(u_xlat20.x, 0.0, 1.0);
#endif
    u_xlat6.xyz = u_xlat20.xxx * u_xlat6.xyz;
    u_xlat4.xy = vec2(u_xlat49) * u_xlat4.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.xy = min(max(u_xlat4.xy, 0.0), 1.0);
#else
    u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);
#endif
    u_xlat20.x = max(u_xlat4.y, 9.99999975e-05);
    u_xlat20.x = log2(u_xlat20.x);
    u_xlat20.x = u_xlat20.x * _ShoreFade;
    u_xlat20.x = exp2(u_xlat20.x);
    u_xlat8.xyz = _ShallowColor.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat8.xyz = u_xlat20.xxx * u_xlat8.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat1.xy = u_xlat1.xy / vs_TEXCOORD4.ww;
    u_xlat10_9.xyz = texture(_SceneScaledBufferBeforTransParent, u_xlat1.xy).xyz;
    u_xlat10.xyz = u_xlat8.xyz * u_xlat10_9.xyz;
    u_xlat1.x = 0.100000001 / _DeepColorDepth;
    u_xlat1.x = u_xlat1.x * u_xlat49;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.x = max(u_xlat1.x, 9.99999975e-05);
    u_xlat1.x = log2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _DeepColorFade;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat11.xyz = (-u_xlat8.xyz) * u_xlat10_9.xyz + _DeepColor.xyz;
    u_xlat11.xyz = u_xlat1.xxx * u_xlat11.xyz + u_xlat10.xyz;
    u_xlat12.xyz = u_xlat16_2.xyz * _DistortionIntensity.xyz;
    u_xlat13.x = vs_TEXCOORD8.x;
    u_xlat13.y = vs_TEXCOORD9.x;
    u_xlat13.z = vs_TEXCOORD6.x;
    u_xlat13.x = dot(u_xlat13.xyz, u_xlat12.xyz);
    u_xlat14.x = vs_TEXCOORD8.y;
    u_xlat14.y = vs_TEXCOORD9.y;
    u_xlat14.z = vs_TEXCOORD6.y;
    u_xlat13.y = dot(u_xlat14.xyz, u_xlat12.xyz);
    u_xlat14.x = vs_TEXCOORD8.z;
    u_xlat14.y = vs_TEXCOORD9.z;
    u_xlat14.z = vs_TEXCOORD6.z;
    u_xlat13.z = dot(u_xlat14.xyz, u_xlat12.xyz);
    u_xlat1.x = dot(u_xlat13.xyz, u_xlat13.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat12.xyz = u_xlat1.xxx * u_xlat13.xyz;
    u_xlat1.x = dot((-u_xlat7.xyz), u_xlat12.xyz);
    u_xlat1.x = u_xlat1.x + u_xlat1.x;
    u_xlat7.xyz = u_xlat12.xyz * (-u_xlat1.xxx) + (-u_xlat7.xyz);
    u_xlat10_0 = textureLod(_ReflectionSkyCubeMap, u_xlat7.xyz, 0.0);
    u_xlat16_2.x = u_xlat10_0.w + -1.0;
    u_xlat16_2.x = _ReflectionSkyCubeMap_HDR.w * u_xlat16_2.x + 1.0;
    u_xlat16_2.x = log2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * _ReflectionSkyCubeMap_HDR.y;
    u_xlat16_2.x = exp2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * _ReflectionSkyCubeMap_HDR.x;
    u_xlat1.x = u_xlat5.x * _FresnelPower;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _ReflectionIntensity;
    u_xlat17.x = float(1.0) / _ShoreReflectionFade;
    u_xlat17.x = u_xlat17.x * u_xlat49;
#ifdef UNITY_ADRENO_ES3
    u_xlat17.x = min(max(u_xlat17.x, 0.0), 1.0);
#else
    u_xlat17.x = clamp(u_xlat17.x, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat17.x * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat7.xyz = u_xlat16_2.xxx * u_xlat10_0.xyz + (-u_xlat11.xyz);
    u_xlat1.xyw = u_xlat1.xxx * u_xlat7.xyz + u_xlat11.xyz;
    u_xlat1.xyw = (-u_xlat8.xyz) * u_xlat10_9.xyz + u_xlat1.xyw;
    u_xlat1.xyw = u_xlat20.xxx * u_xlat1.xyw + u_xlat10.xyz;
    u_xlat20.x = (-vs_TEXCOORD5.y) * _WorldSpaceLightPos0.w + _WorldSpaceLightPos0.y;
    u_xlat16_2.x = max(u_xlat20.x, 0.0);
    u_xlat20.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowSplitSpheres[0].xyz);
    u_xlat7.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowSplitSpheres[1].xyz);
    u_xlat8.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowSplitSpheres[2].xyz);
    u_xlat9.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowSplitSpheres[3].xyz);
    u_xlat0.x = dot(u_xlat20.xyz, u_xlat20.xyz);
    u_xlat0.y = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat0.z = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat0.w = dot(u_xlat9.xyz, u_xlat9.xyz);
    u_xlatb0 = lessThan(u_xlat0, unity_ShadowSplitSqRadii);
    u_xlat0 = mix(vec4(0.0, 0.0, 0.0, 0.0), vec4(1.0, 1.0, 1.0, 1.0), vec4(u_xlatb0));
    u_xlat16_18.x = u_xlat0.y + u_xlat0.x;
    u_xlat16_18.y = u_xlat0.z + u_xlat16_18.x;
    u_xlat3.x = -0.0;
    u_xlat3.y = (-u_xlat0.x);
    u_xlat3.zw = (-u_xlat16_18.xy);
    u_xlat0 = u_xlat0 + u_xlat3;
    u_xlat0 = max(u_xlat0, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat16_18.x = dot(u_xlat0, vec4(1.0, 1.0, 1.0, 1.0));
#ifdef UNITY_ADRENO_ES3
    u_xlatb20 = !!(u_xlat16_18.x>=0.5);
#else
    u_xlatb20 = u_xlat16_18.x>=0.5;
#endif
    if(u_xlatb20){
        u_xlat20.x = dot(u_xlat0.yzw, vec3(1.0, 2.0, 3.0));
        u_xlat20.x = min(u_xlat20.x, 3.0);
        u_xlatu20 = uint(u_xlat20.x);
        u_xlat7.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowPos[int(u_xlatu20)].xyz);
        u_xlati20 = int(u_xlatu20) << 2;
        u_xlat8.xyz = u_xlat7.yyy * hlslcc_mtx4x4unity_WorldToShadow[(u_xlati20 + 1)].xyz;
        u_xlat7.xyw = hlslcc_mtx4x4unity_WorldToShadow[u_xlati20].xyz * u_xlat7.xxx + u_xlat8.xyz;
        u_xlat7.xyz = hlslcc_mtx4x4unity_WorldToShadow[(u_xlati20 + 2)].xyz * u_xlat7.zzz + u_xlat7.xyw;
        u_xlat20.xyz = u_xlat7.xyz + hlslcc_mtx4x4unity_WorldToShadow[(u_xlati20 + 3)].xyz;
        vec3 txVec0 = vec3(u_xlat20.xy,u_xlat20.z);
        u_xlat10_20 = textureLod(hlslcc_zcmp_CascadeShadowMapTexture, txVec0, 0.0);
        u_xlat16_36 = (-_LightShadowData.x) + 1.0;
        u_xlat20.x = u_xlat10_20 * u_xlat16_36 + _LightShadowData.x;
    } else {
        u_xlat20.x = 1.0;
    //ENDIF
    }
    u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;
    u_xlat20.xyz = u_xlat16_2.xyz * u_xlat20.xxx + vs_TEXCOORD1.xyz;
    u_xlat16_2.xyz = u_xlat20.xyz * vec3(0.300000012, 0.300000012, 0.300000012) + vec3(0.699999988, 0.699999988, 0.699999988);
    u_xlat20.x = sqrt(u_xlat53);
    u_xlat16_50 = u_xlat20.x + (-_DepthFoamCloseFadeOffset);
    u_xlat16_50 = u_xlat16_50 / _DepthFoamCloseFadeDistance;
    u_xlat16_15 = vs_COLOR0.x * _DepthFoamExtent;
    u_xlat33 = max(u_xlat33, 0.0);
    u_xlat33 = min(u_xlat16_15, u_xlat33);
    u_xlat16_15 = _DepthFoamExtent * vs_COLOR0.x + 9.99999975e-05;
    u_xlat33 = u_xlat33 / u_xlat16_15;
    u_xlat33 = (-u_xlat33) + 1.0;
    u_xlat36.xy = vec2(_Time.y * _DepthFoamMask_ST.z, _Time.y * _DepthFoamMask_ST.w);
    u_xlat36.xy = fract(u_xlat36.xy);
    u_xlat36.xy = _DepthFoamMask_ST.xy * vs_TEXCOORD5.xz + u_xlat36.xy;
    u_xlat10_36 = texture(_DepthFoamMask, u_xlat36.xy, -1.0).x;
    u_xlat52 = vs_TEXCOORD5.z + vs_TEXCOORD5.x;
    u_xlat52 = u_xlat52 * _DepthFoamPhaseScale;
    u_xlat52 = _DepthFoamSpeed * _Time.y + u_xlat52;
    u_xlat5.x = (-u_xlat33) + 1.0;
    u_xlat16_15 = _DepthFoamSubdivision * u_xlat33 + u_xlat52;
    u_xlat16_15 = sin(u_xlat16_15);
    u_xlat16_15 = _DepthFoamWidth * u_xlat33 + u_xlat16_15;
    u_xlat16_52 = u_xlat10_36 * 2.0 + -1.0;
    u_xlat52 = u_xlat16_52 + u_xlat16_15;
#ifdef UNITY_ADRENO_ES3
    u_xlatb52 = !!(u_xlat52>=u_xlat5.x);
#else
    u_xlatb52 = u_xlat52>=u_xlat5.x;
#endif
    u_xlat52 = u_xlatb52 ? 1.0 : float(0.0);
    u_xlat36.x = u_xlat52 * u_xlat10_36;
    u_xlat16_15 = _DepthFoamDistance + 9.99999975e-05;
    u_xlat16_15 = u_xlat20.x / u_xlat16_15;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_15 = min(max(u_xlat16_15, 0.0), 1.0);
#else
    u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);
#endif
    u_xlat16_20.x = (-u_xlat16_15) + 1.0;
    u_xlat16_15 = vs_COLOR0.y * _DepthFoamColor.w;
    u_xlat16_50 = u_xlat16_50 * u_xlat16_15;
    u_xlat16_50 = u_xlat36.x * u_xlat16_50;
    u_xlat16_50 = u_xlat33 * u_xlat16_50;
    u_xlat16_50 = u_xlat16_20.x * u_xlat16_50;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_50 = min(max(u_xlat16_50, 0.0), 1.0);
#else
    u_xlat16_50 = clamp(u_xlat16_50, 0.0, 1.0);
#endif
    u_xlat16_2.xyz = _DepthFoamColor.xyz * u_xlat16_2.xyz + (-u_xlat1.xyw);
    u_xlat16_2.xyz = vec3(u_xlat16_50) * u_xlat16_2.xyz + u_xlat1.xyw;
    u_xlat0.xyz = u_xlat6.xyz * vec3(u_xlat21) + u_xlat16_2.xyz;
    u_xlat0.w = u_xlat4.x * vs_COLOR0.w;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MSAA_INTERPOLATION" "MHY_SHADER_LOW" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
uniform 	vec4 hlslcc_mtx4x4_mhyJitteredVP[4];
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
out highp vec4 vs_TEXCOORD9;
out highp vec4 vs_TEXCOORD10;
float u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec4 u_xlat8;
vec3 u_xlat9;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat9.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4_mhyJitteredVP[1];
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[3] * u_xlat2.wwww + u_xlat1;
    u_xlat3.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    u_xlat3.xyw = u_xlat1.xyw;
    gl_Position = u_xlat3;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD1.w = 1.0;
    u_xlat4.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat4.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat4.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat1.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
    u_xlat16_5.x = u_xlat4.y * u_xlat4.y;
    u_xlat16_5.x = u_xlat4.x * u_xlat4.x + (-u_xlat16_5.x);
    u_xlat16_6 = u_xlat4.yzzx * u_xlat4.xyzz;
    u_xlat16_7.x = dot(unity_SHBr, u_xlat16_6);
    u_xlat16_7.y = dot(unity_SHBg, u_xlat16_6);
    u_xlat16_7.z = dot(unity_SHBb, u_xlat16_6);
    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_7.xyz;
    u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat4.w = 1.0;
    u_xlat16_6.x = dot(unity_SHAr, u_xlat4);
    u_xlat16_6.y = dot(unity_SHAg, u_xlat4);
    u_xlat16_6.z = dot(unity_SHAb, u_xlat4);
    u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_6.xyz;
    vs_TEXCOORD1.xyz = u_xlat16_5.xyz;
    u_xlat1.x = u_xlat3.y * _ProjectionParams.x;
    u_xlat8.w = u_xlat1.x * 0.5;
    u_xlat8.xz = u_xlat3.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.z = u_xlat1.z;
    u_xlat3.xy = u_xlat8.zz + u_xlat8.xw;
    vs_TEXCOORD2 = u_xlat3;
    vs_TEXCOORD4.xyw = u_xlat3.xyw;
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD3.w = 0.0;
    u_xlat1.x = u_xlat2.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat2.x + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat2.z + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat2.w + u_xlat1.x;
    vs_TEXCOORD3.z = (-u_xlat1.x);
    vs_TEXCOORD5.w = 0.0;
    vs_TEXCOORD5.xyz = u_xlat9.xyz;
    u_xlat9.xyz = (-u_xlat9.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD6.w = 0.0;
    vs_TEXCOORD6.xyz = u_xlat4.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].www + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * in_POSITION0.yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.zzz + u_xlat1.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.www + u_xlat1.xyz;
    vs_TEXCOORD7.xyz = u_xlat1.xyz * vec3(-1.0, -1.0, 1.0);
    vs_TEXCOORD7.w = 0.0;
    u_xlat1.xyz = in_TANGENT0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat0 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0 = inversesqrt(u_xlat0);
    u_xlat1.xyz = vec3(u_xlat0) * u_xlat1.xyz;
    vs_TEXCOORD8.xyz = u_xlat1.xyz;
    vs_TEXCOORD8.w = 0.0;
    u_xlat2.xyz = u_xlat1.yzx * u_xlat4.zxy;
    u_xlat1.xyz = u_xlat4.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
    u_xlat0 = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD9.xyz = vec3(u_xlat0) * u_xlat1.xyz;
    vs_TEXCOORD9.w = 0.0;
    u_xlat0 = u_xlat9.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat9.x + u_xlat0;
    vs_TEXCOORD10.w = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat9.z + u_xlat0;
    vs_TEXCOORD10.xyz = u_xlat9.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowPos[4];
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _DepthFoamMask_ST;
uniform 	mediump float _DepthFoamSpeed;
uniform 	mediump vec4 _DepthFoamColor;
uniform 	mediump float _DepthFoamExtent;
uniform 	mediump float _DepthFoamDistance;
uniform 	mediump float _DepthFoamSubdivision;
uniform 	mediump float _DepthFoamWidth;
uniform 	mediump float _DepthFoamPhaseScale;
uniform 	mediump float _DepthFoamCloseFadeOffset;
uniform 	mediump float _DepthFoamCloseFadeDistance;
uniform 	float _NormalMapScale;
uniform 	float _Normal01_U_Speed;
uniform 	float _Normal01_VSpeed;
uniform 	float _NormalMapBias;
uniform 	float _Normal02_U_Speed;
uniform 	float _Normal02_V_Speed;
uniform 	float _RefractionIntensity;
uniform 	float _OpacityByDepth;
uniform 	float _SpecularIntensity;
uniform 	vec3 _ES_MoonDirection;
uniform 	vec3 _ES_SunDirection;
uniform 	float _Gloss;
uniform 	float _ShoreTransparency;
uniform 	float _SpecularPower;
uniform 	vec4 _ShallowColor;
uniform 	float _ShoreFade;
uniform 	vec4 _DeepColor;
uniform 	float _DeepColorDepth;
uniform 	float _DeepColorFade;
uniform 	vec4 _DistortionIntensity;
uniform 	float _ReflectionIntensity;
uniform 	float _FresnelPower;
uniform 	float _ShoreReflectionFade;
uniform 	mediump float _ProjectUVScale;
uniform 	vec4 _ReflectionSkyCubeMap_HDR;
uniform lowp sampler2D _Normal01;
uniform lowp sampler2D _Normal02;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _SceneScaledBufferBeforTransParent;
uniform lowp samplerCube _ReflectionSkyCubeMap;
uniform lowp sampler2D _DepthFoamMask;
uniform lowp sampler2DShadow hlslcc_zcmp_CascadeShadowMapTexture;
uniform lowp sampler2D _CascadeShadowMapTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD8;
in highp vec4 vs_TEXCOORD9;
in highp vec4 vs_TEXCOORD10;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec4 u_xlatb0;
vec4 u_xlat1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec4 u_xlat4;
vec3 u_xlat5;
bool u_xlatb5;
vec3 u_xlat6;
vec4 u_xlat7;
vec3 u_xlat8;
vec3 u_xlat9;
lowp vec3 u_xlat10_9;
vec3 u_xlat10;
vec3 u_xlat11;
vec3 u_xlat12;
vec3 u_xlat13;
vec3 u_xlat14;
mediump float u_xlat16_15;
vec2 u_xlat17;
mediump vec2 u_xlat16_18;
vec3 u_xlat20;
mediump vec3 u_xlat16_20;
lowp float u_xlat10_20;
int u_xlati20;
uint u_xlatu20;
bool u_xlatb20;
float u_xlat21;
float u_xlat33;
vec2 u_xlat36;
mediump float u_xlat16_36;
lowp float u_xlat10_36;
bool u_xlatb36;
float u_xlat49;
mediump float u_xlat16_50;
float u_xlat52;
mediump float u_xlat16_52;
bool u_xlatb52;
float u_xlat53;
float u_xlat54;
void main()
{
    u_xlat0.xy = vs_TEXCOORD5.zx * vec2(vec2(_ProjectUVScale, _ProjectUVScale));
    u_xlat1.x = _Time.y * _Normal01_U_Speed + u_xlat0.y;
    u_xlat1.yz = _Time.yy * vec2(_Normal01_VSpeed, _Normal02_U_Speed) + u_xlat0.xy;
    u_xlat1.w = _Time.y * _Normal02_V_Speed + u_xlat0.x;
    u_xlat10_0.xyz = texture(_Normal01, u_xlat1.xy, _NormalMapBias).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_2.xy = u_xlat16_0.xy * vec2(_NormalMapScale);
    u_xlat10_1.xyz = texture(_Normal02, u_xlat1.zw, _NormalMapBias).xyz;
    u_xlat16_0.w = -1.0;
    u_xlat16_3.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.wwz;
    u_xlat16_3.xy = u_xlat16_3.xy * vec2(_NormalMapScale);
    u_xlat16_2.z = -1.0;
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
    u_xlat1.x = float(1.0) / vs_TEXCOORD4.w;
    u_xlat17.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat17.x = texture(_CameraDepthTexture, u_xlat17.xy).x;
    u_xlat17.x = _ZBufferParams.z * u_xlat17.x + _ZBufferParams.w;
    u_xlat17.x = float(1.0) / u_xlat17.x;
    u_xlat33 = vs_TEXCOORD10.w + 9.99999975e-05;
    u_xlat33 = (-u_xlat17.x) / u_xlat33;
    u_xlat33 = vs_TEXCOORD10.y * u_xlat33 + _WorldSpaceCameraPos.y;
    u_xlat33 = (-u_xlat33) + vs_TEXCOORD5.y;
    u_xlat4.xy = u_xlat16_2.xy * vec2(vec2(_RefractionIntensity, _RefractionIntensity));
    u_xlat1.x = u_xlat1.x * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.xw = u_xlat1.xx * u_xlat4.xy;
    u_xlat1.xw = u_xlat1.xw * vs_TEXCOORD4.ww;
    u_xlat17.x = u_xlat17.x + (-vs_TEXCOORD4.w);
#ifdef UNITY_ADRENO_ES3
    u_xlat17.x = min(max(u_xlat17.x, 0.0), 1.0);
#else
    u_xlat17.x = clamp(u_xlat17.x, 0.0, 1.0);
#endif
    u_xlat4.xy = u_xlat17.xx * u_xlat1.xw;
    u_xlat4.z = 0.0;
    u_xlat1.xyw = u_xlat4.xyz + vs_TEXCOORD4.xyw;
    u_xlat1.xy = u_xlat1.xy / u_xlat1.ww;
    u_xlat1.x = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat1.x = _ZBufferParams.z * u_xlat1.x + _ZBufferParams.w;
    u_xlat1.x = float(1.0) / u_xlat1.x;
    u_xlat1.x = u_xlat1.x + (-vs_TEXCOORD4.w);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.xyw = u_xlat1.xxx * u_xlat4.xyz + vs_TEXCOORD4.xyw;
    u_xlat4.xy = u_xlat1.xy / u_xlat1.ww;
    u_xlat49 = texture(_CameraDepthTexture, u_xlat4.xy).x;
    u_xlat49 = _ZBufferParams.z * u_xlat49 + _ZBufferParams.w;
    u_xlat49 = float(1.0) / u_xlat49;
    u_xlat49 = u_xlat49 + (-vs_TEXCOORD4.w);
    u_xlat4.x = 0.100000001 / _OpacityByDepth;
    u_xlat16_3.xz = u_xlat16_2.xy;
    u_xlat16_3.y = 1.0;
    u_xlat16_20.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
    u_xlat16_20.x = inversesqrt(u_xlat16_20.x);
    u_xlat16_20.xyz = u_xlat16_3.xyz * u_xlat16_20.xxx;
#ifdef UNITY_ADRENO_ES3
    u_xlatb5 = !!(0.0>=_ES_MoonDirection.y);
#else
    u_xlatb5 = 0.0>=_ES_MoonDirection.y;
#endif
    u_xlat5.xyz = (bool(u_xlatb5)) ? _ES_SunDirection.xyz : _ES_MoonDirection.xyz;
    u_xlat6.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat53 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat54 = inversesqrt(u_xlat53);
    u_xlat7.xyz = vec3(u_xlat54) * u_xlat6.xyz;
    u_xlat5.xyz = u_xlat6.xyz * vec3(u_xlat54) + u_xlat5.xyz;
    u_xlat6.x = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat5.xyz = u_xlat5.xyz * u_xlat6.xxx;
    u_xlat20.x = dot(u_xlat16_20.xyz, u_xlat5.xyz);
    u_xlat36.x = _Gloss * 128.0;
    u_xlat20.x = max(u_xlat20.x, 9.99999975e-05);
    u_xlat20.x = log2(u_xlat20.x);
    u_xlat20.x = u_xlat20.x * u_xlat36.x;
    u_xlat20.x = exp2(u_xlat20.x);
    u_xlat20.x = u_xlat20.x * _SpecularIntensity;
    u_xlat20.x = max(u_xlat20.x, 0.0);
    u_xlat20.x = min(u_xlat20.x, 16.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb36 = !!(_ES_MoonDirection.y>=9.99999975e-05);
#else
    u_xlatb36 = _ES_MoonDirection.y>=9.99999975e-05;
#endif
    u_xlat36.x = u_xlatb36 ? 1.0 : float(0.0);
    u_xlat52 = _ES_MoonDirection.y + -1.0;
    u_xlat36.x = u_xlat36.x * u_xlat52 + 1.0;
    u_xlat4.w = float(1.0) / _ShoreTransparency;
    u_xlat5.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat5.x = inversesqrt(u_xlat5.x);
    u_xlat5.xyz = u_xlat5.xxx * vs_TEXCOORD6.xyz;
    u_xlat5.x = dot(u_xlat7.xyz, u_xlat5.xyz);
    u_xlat5.x = (-u_xlat5.x) + 1.0;
    u_xlat5.x = max(u_xlat5.x, 9.99999975e-05);
    u_xlat5.x = log2(u_xlat5.x);
    u_xlat21 = u_xlat5.x * _SpecularPower;
    u_xlat21 = exp2(u_xlat21);
    u_xlat6.xyz = u_xlat36.xxx * _LightColor0.xyz;
    u_xlat6.xyz = u_xlat20.xxx * u_xlat6.xyz;
    u_xlat20.x = u_xlat49 + -1.0;
    u_xlat20.x = u_xlat4.w * u_xlat20.x;
    u_xlat20.x = u_xlat20.x * 0.100000001;
#ifdef UNITY_ADRENO_ES3
    u_xlat20.x = min(max(u_xlat20.x, 0.0), 1.0);
#else
    u_xlat20.x = clamp(u_xlat20.x, 0.0, 1.0);
#endif
    u_xlat6.xyz = u_xlat20.xxx * u_xlat6.xyz;
    u_xlat4.xy = vec2(u_xlat49) * u_xlat4.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.xy = min(max(u_xlat4.xy, 0.0), 1.0);
#else
    u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);
#endif
    u_xlat20.x = max(u_xlat4.y, 9.99999975e-05);
    u_xlat20.x = log2(u_xlat20.x);
    u_xlat20.x = u_xlat20.x * _ShoreFade;
    u_xlat20.x = exp2(u_xlat20.x);
    u_xlat8.xyz = _ShallowColor.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat8.xyz = u_xlat20.xxx * u_xlat8.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat1.xy = u_xlat1.xy / vs_TEXCOORD4.ww;
    u_xlat10_9.xyz = texture(_SceneScaledBufferBeforTransParent, u_xlat1.xy).xyz;
    u_xlat10.xyz = u_xlat8.xyz * u_xlat10_9.xyz;
    u_xlat1.x = 0.100000001 / _DeepColorDepth;
    u_xlat1.x = u_xlat1.x * u_xlat49;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.x = max(u_xlat1.x, 9.99999975e-05);
    u_xlat1.x = log2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _DeepColorFade;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat11.xyz = (-u_xlat8.xyz) * u_xlat10_9.xyz + _DeepColor.xyz;
    u_xlat11.xyz = u_xlat1.xxx * u_xlat11.xyz + u_xlat10.xyz;
    u_xlat12.xyz = u_xlat16_2.xyz * _DistortionIntensity.xyz;
    u_xlat13.x = vs_TEXCOORD8.x;
    u_xlat13.y = vs_TEXCOORD9.x;
    u_xlat13.z = vs_TEXCOORD6.x;
    u_xlat13.x = dot(u_xlat13.xyz, u_xlat12.xyz);
    u_xlat14.x = vs_TEXCOORD8.y;
    u_xlat14.y = vs_TEXCOORD9.y;
    u_xlat14.z = vs_TEXCOORD6.y;
    u_xlat13.y = dot(u_xlat14.xyz, u_xlat12.xyz);
    u_xlat14.x = vs_TEXCOORD8.z;
    u_xlat14.y = vs_TEXCOORD9.z;
    u_xlat14.z = vs_TEXCOORD6.z;
    u_xlat13.z = dot(u_xlat14.xyz, u_xlat12.xyz);
    u_xlat1.x = dot(u_xlat13.xyz, u_xlat13.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat12.xyz = u_xlat1.xxx * u_xlat13.xyz;
    u_xlat1.x = dot((-u_xlat7.xyz), u_xlat12.xyz);
    u_xlat1.x = u_xlat1.x + u_xlat1.x;
    u_xlat7.xyz = u_xlat12.xyz * (-u_xlat1.xxx) + (-u_xlat7.xyz);
    u_xlat10_0 = textureLod(_ReflectionSkyCubeMap, u_xlat7.xyz, 0.0);
    u_xlat16_2.x = u_xlat10_0.w + -1.0;
    u_xlat16_2.x = _ReflectionSkyCubeMap_HDR.w * u_xlat16_2.x + 1.0;
    u_xlat16_2.x = log2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * _ReflectionSkyCubeMap_HDR.y;
    u_xlat16_2.x = exp2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * _ReflectionSkyCubeMap_HDR.x;
    u_xlat1.x = u_xlat5.x * _FresnelPower;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _ReflectionIntensity;
    u_xlat17.x = float(1.0) / _ShoreReflectionFade;
    u_xlat17.x = u_xlat17.x * u_xlat49;
#ifdef UNITY_ADRENO_ES3
    u_xlat17.x = min(max(u_xlat17.x, 0.0), 1.0);
#else
    u_xlat17.x = clamp(u_xlat17.x, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat17.x * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat7.xyz = u_xlat16_2.xxx * u_xlat10_0.xyz + (-u_xlat11.xyz);
    u_xlat1.xyw = u_xlat1.xxx * u_xlat7.xyz + u_xlat11.xyz;
    u_xlat1.xyw = (-u_xlat8.xyz) * u_xlat10_9.xyz + u_xlat1.xyw;
    u_xlat1.xyw = u_xlat20.xxx * u_xlat1.xyw + u_xlat10.xyz;
    u_xlat20.x = (-vs_TEXCOORD5.y) * _WorldSpaceLightPos0.w + _WorldSpaceLightPos0.y;
    u_xlat16_2.x = max(u_xlat20.x, 0.0);
    u_xlat20.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowSplitSpheres[0].xyz);
    u_xlat7.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowSplitSpheres[1].xyz);
    u_xlat8.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowSplitSpheres[2].xyz);
    u_xlat9.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowSplitSpheres[3].xyz);
    u_xlat0.x = dot(u_xlat20.xyz, u_xlat20.xyz);
    u_xlat0.y = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat0.z = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat0.w = dot(u_xlat9.xyz, u_xlat9.xyz);
    u_xlatb0 = lessThan(u_xlat0, unity_ShadowSplitSqRadii);
    u_xlat0 = mix(vec4(0.0, 0.0, 0.0, 0.0), vec4(1.0, 1.0, 1.0, 1.0), vec4(u_xlatb0));
    u_xlat16_18.x = u_xlat0.y + u_xlat0.x;
    u_xlat16_18.y = u_xlat0.z + u_xlat16_18.x;
    u_xlat3.x = -0.0;
    u_xlat3.y = (-u_xlat0.x);
    u_xlat3.zw = (-u_xlat16_18.xy);
    u_xlat0 = u_xlat0 + u_xlat3;
    u_xlat0 = max(u_xlat0, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat16_18.x = dot(u_xlat0, vec4(1.0, 1.0, 1.0, 1.0));
#ifdef UNITY_ADRENO_ES3
    u_xlatb20 = !!(u_xlat16_18.x>=0.5);
#else
    u_xlatb20 = u_xlat16_18.x>=0.5;
#endif
    if(u_xlatb20){
        u_xlat20.x = dot(u_xlat0.yzw, vec3(1.0, 2.0, 3.0));
        u_xlat20.x = min(u_xlat20.x, 3.0);
        u_xlatu20 = uint(u_xlat20.x);
        u_xlat7.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowPos[int(u_xlatu20)].xyz);
        u_xlati20 = int(u_xlatu20) << 2;
        u_xlat8.xyz = u_xlat7.yyy * hlslcc_mtx4x4unity_WorldToShadow[(u_xlati20 + 1)].xyz;
        u_xlat7.xyw = hlslcc_mtx4x4unity_WorldToShadow[u_xlati20].xyz * u_xlat7.xxx + u_xlat8.xyz;
        u_xlat7.xyz = hlslcc_mtx4x4unity_WorldToShadow[(u_xlati20 + 2)].xyz * u_xlat7.zzz + u_xlat7.xyw;
        u_xlat20.xyz = u_xlat7.xyz + hlslcc_mtx4x4unity_WorldToShadow[(u_xlati20 + 3)].xyz;
        vec3 txVec0 = vec3(u_xlat20.xy,u_xlat20.z);
        u_xlat10_20 = textureLod(hlslcc_zcmp_CascadeShadowMapTexture, txVec0, 0.0);
        u_xlat16_36 = (-_LightShadowData.x) + 1.0;
        u_xlat20.x = u_xlat10_20 * u_xlat16_36 + _LightShadowData.x;
    } else {
        u_xlat20.x = 1.0;
    //ENDIF
    }
    u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;
    u_xlat20.xyz = u_xlat16_2.xyz * u_xlat20.xxx + vs_TEXCOORD1.xyz;
    u_xlat16_2.xyz = u_xlat20.xyz * vec3(0.300000012, 0.300000012, 0.300000012) + vec3(0.699999988, 0.699999988, 0.699999988);
    u_xlat20.x = sqrt(u_xlat53);
    u_xlat16_50 = u_xlat20.x + (-_DepthFoamCloseFadeOffset);
    u_xlat16_50 = u_xlat16_50 / _DepthFoamCloseFadeDistance;
    u_xlat16_15 = vs_COLOR0.x * _DepthFoamExtent;
    u_xlat33 = max(u_xlat33, 0.0);
    u_xlat33 = min(u_xlat16_15, u_xlat33);
    u_xlat16_15 = _DepthFoamExtent * vs_COLOR0.x + 9.99999975e-05;
    u_xlat33 = u_xlat33 / u_xlat16_15;
    u_xlat33 = (-u_xlat33) + 1.0;
    u_xlat36.xy = vec2(_Time.y * _DepthFoamMask_ST.z, _Time.y * _DepthFoamMask_ST.w);
    u_xlat36.xy = fract(u_xlat36.xy);
    u_xlat36.xy = _DepthFoamMask_ST.xy * vs_TEXCOORD5.xz + u_xlat36.xy;
    u_xlat10_36 = texture(_DepthFoamMask, u_xlat36.xy, -1.0).x;
    u_xlat52 = vs_TEXCOORD5.z + vs_TEXCOORD5.x;
    u_xlat52 = u_xlat52 * _DepthFoamPhaseScale;
    u_xlat52 = _DepthFoamSpeed * _Time.y + u_xlat52;
    u_xlat5.x = (-u_xlat33) + 1.0;
    u_xlat16_15 = _DepthFoamSubdivision * u_xlat33 + u_xlat52;
    u_xlat16_15 = sin(u_xlat16_15);
    u_xlat16_15 = _DepthFoamWidth * u_xlat33 + u_xlat16_15;
    u_xlat16_52 = u_xlat10_36 * 2.0 + -1.0;
    u_xlat52 = u_xlat16_52 + u_xlat16_15;
#ifdef UNITY_ADRENO_ES3
    u_xlatb52 = !!(u_xlat52>=u_xlat5.x);
#else
    u_xlatb52 = u_xlat52>=u_xlat5.x;
#endif
    u_xlat52 = u_xlatb52 ? 1.0 : float(0.0);
    u_xlat36.x = u_xlat52 * u_xlat10_36;
    u_xlat16_15 = _DepthFoamDistance + 9.99999975e-05;
    u_xlat16_15 = u_xlat20.x / u_xlat16_15;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_15 = min(max(u_xlat16_15, 0.0), 1.0);
#else
    u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);
#endif
    u_xlat16_20.x = (-u_xlat16_15) + 1.0;
    u_xlat16_15 = vs_COLOR0.y * _DepthFoamColor.w;
    u_xlat16_50 = u_xlat16_50 * u_xlat16_15;
    u_xlat16_50 = u_xlat36.x * u_xlat16_50;
    u_xlat16_50 = u_xlat33 * u_xlat16_50;
    u_xlat16_50 = u_xlat16_20.x * u_xlat16_50;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_50 = min(max(u_xlat16_50, 0.0), 1.0);
#else
    u_xlat16_50 = clamp(u_xlat16_50, 0.0, 1.0);
#endif
    u_xlat16_2.xyz = _DepthFoamColor.xyz * u_xlat16_2.xyz + (-u_xlat1.xyw);
    u_xlat16_2.xyz = vec3(u_xlat16_50) * u_xlat16_2.xyz + u_xlat1.xyw;
    u_xlat0.xyz = u_xlat6.xyz * vec3(u_xlat21) + u_xlat16_2.xyz;
    u_xlat0.w = u_xlat4.x * vs_COLOR0.w;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "MSAA_INTERPOLATION" "MHY_SHADER_HIGH" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump float _MHYZBias;
uniform 	vec4 hlslcc_mtx4x4_mhyJitteredVP[4];
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
out highp vec4 vs_TEXCOORD9;
out highp vec4 vs_TEXCOORD10;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec4 u_xlat8;
float u_xlat27;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4_mhyJitteredVP[1];
    u_xlat2 = hlslcc_mtx4x4_mhyJitteredVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4_mhyJitteredVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4_mhyJitteredVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat3.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    u_xlat3.xyw = u_xlat2.xyw;
    gl_Position = u_xlat3;
    vs_COLOR0 = in_COLOR0;
    u_xlat4.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat4.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat4.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat27 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat4.xyz = vec3(u_xlat27) * u_xlat4.xyz;
    u_xlat16_5.x = u_xlat4.y * u_xlat4.y;
    u_xlat16_5.x = u_xlat4.x * u_xlat4.x + (-u_xlat16_5.x);
    u_xlat16_6 = u_xlat4.yzzx * u_xlat4.xyzz;
    u_xlat16_7.x = dot(unity_SHBr, u_xlat16_6);
    u_xlat16_7.y = dot(unity_SHBg, u_xlat16_6);
    u_xlat16_7.z = dot(unity_SHBb, u_xlat16_6);
    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_7.xyz;
    u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat4.w = 1.0;
    u_xlat16_6.x = dot(unity_SHAr, u_xlat4);
    u_xlat16_6.y = dot(unity_SHAg, u_xlat4);
    u_xlat16_6.z = dot(unity_SHAb, u_xlat4);
    u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_6.xyz;
    vs_TEXCOORD1.xyz = u_xlat16_5.xyz;
    vs_TEXCOORD1.w = 1.0;
    u_xlat27 = u_xlat3.y * _ProjectionParams.x;
    u_xlat8.w = u_xlat27 * 0.5;
    u_xlat8.xz = u_xlat3.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.z = u_xlat2.z;
    u_xlat3.xy = u_xlat8.zz + u_xlat8.xw;
    vs_TEXCOORD2 = u_xlat3;
    vs_TEXCOORD4.xyw = u_xlat3.xyw;
    u_xlat27 = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat27 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat27;
    u_xlat27 = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat27;
    u_xlat27 = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat27;
    vs_TEXCOORD3.z = (-u_xlat27);
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD3.w = 0.0;
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD5.w = 0.0;
    vs_TEXCOORD6.xyz = u_xlat4.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[1].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].www + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * in_POSITION0.yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.zzz + u_xlat1.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.www + u_xlat1.xyz;
    vs_TEXCOORD7.xyz = u_xlat1.xyz * vec3(-1.0, -1.0, 1.0);
    vs_TEXCOORD7.w = 0.0;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat27 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat1.xyz = vec3(u_xlat27) * u_xlat1.xyz;
    vs_TEXCOORD8.xyz = u_xlat1.xyz;
    vs_TEXCOORD8.w = 0.0;
    u_xlat2.xyz = u_xlat1.yzx * u_xlat4.zxy;
    u_xlat1.xyz = u_xlat4.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
    u_xlat27 = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD9.xyz = vec3(u_xlat27) * u_xlat1.xyz;
    vs_TEXCOORD9.w = 0.0;
    u_xlat27 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat27 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat27;
    vs_TEXCOORD10.w = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat27;
    vs_TEXCOORD10.xyz = u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowPos[4];
uniform 	mediump vec4 _LightColor0;
uniform 	mediump float _CausticUVScale;
uniform 	mediump float _CausticSpeed;
uniform 	mediump vec4 _CausticColor;
uniform 	mediump float _CausticDepth;
uniform 	mediump float _CausticDistance;
uniform 	mediump float _CausticDistortionValue;
uniform 	mediump vec4 _DepthFoamMask_ST;
uniform 	mediump float _DepthFoamSpeed;
uniform 	mediump vec4 _DepthFoamColor;
uniform 	mediump float _DepthFoamExtent;
uniform 	mediump float _DepthFoamDistance;
uniform 	mediump float _DepthFoamSubdivision;
uniform 	mediump float _DepthFoamWidth;
uniform 	mediump float _DepthFoamPhaseScale;
uniform 	mediump float _DepthFoamCloseFadeOffset;
uniform 	mediump float _DepthFoamCloseFadeDistance;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _NormalMapScale;
uniform 	float _Normal01_U_Speed;
uniform 	float _Normal01_VSpeed;
uniform 	float _NormalMapBias;
uniform 	float _Normal02_U_Speed;
uniform 	float _Normal02_V_Speed;
uniform 	float _RefractionIntensity;
uniform 	float _OpacityByDepth;
uniform 	float _SpecularIntensity;
uniform 	vec3 _ES_MoonDirection;
uniform 	vec3 _ES_SunDirection;
uniform 	float _Gloss;
uniform 	float _ShoreTransparency;
uniform 	float _SpecularPower;
uniform 	vec4 _ShallowColor;
uniform 	float _ShoreFade;
uniform 	vec4 _DeepColor;
uniform 	float _DeepColorDepth;
uniform 	float _DeepColorFade;
uniform 	vec4 _DistortionIntensity;
uniform 	float _SSRDistortion;
uniform 	float _SSRDistortion_Shore;
uniform 	float _SSRIntensity;
uniform 	float _ReflectionIntensity;
uniform 	float _FresnelPower;
uniform 	float _ShoreReflectionFade;
uniform 	vec3 _ES_MainLightColor;
uniform 	mediump float _RippleTillingScale;
uniform 	mediump float _Ripple02Rotate;
uniform 	mediump float _ProjectUVScale;
uniform 	mediump float _CausticFade;
uniform 	mediump float _CausticFadeExponent;
uniform 	vec4 _ReflectionSkyCubeMap_HDR;
uniform lowp sampler2D _Normal01;
uniform lowp sampler2D _Normal02;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _SceneScaledBufferBeforTransParent;
uniform lowp samplerCube _ReflectionSkyCubeMap;
uniform lowp sampler2D _SSRTexture;
uniform lowp sampler2D _DepthFoamMask;
uniform lowp sampler2D _WaterRippleTex;
uniform lowp sampler2DShadow hlslcc_zcmp_CascadeShadowMapTexture;
uniform lowp sampler2D _CascadeShadowMapTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD8;
in highp vec4 vs_TEXCOORD9;
in highp vec4 vs_TEXCOORD10;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
lowp float u_xlat10_0;
int u_xlati0;
uint u_xlatu0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec3 u_xlat10_1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
lowp vec4 u_xlat10_2;
bvec4 u_xlatb2;
mediump vec3 u_xlat16_3;
vec4 u_xlat4;
mediump vec3 u_xlat16_4;
lowp vec4 u_xlat10_4;
vec3 u_xlat5;
lowp float u_xlat10_5;
vec4 u_xlat6;
vec4 u_xlat7;
mediump vec3 u_xlat16_7;
vec4 u_xlat8;
vec3 u_xlat9;
vec3 u_xlat10;
mediump vec3 u_xlat16_10;
vec3 u_xlat11;
vec3 u_xlat12;
lowp vec3 u_xlat10_12;
vec3 u_xlat13;
vec3 u_xlat14;
vec3 u_xlat15;
mediump float u_xlat16_16;
mediump vec2 u_xlat16_17;
float u_xlat18;
vec3 u_xlat19;
mediump vec3 u_xlat16_21;
float u_xlat23;
mediump float u_xlat16_23;
bool u_xlatb23;
vec3 u_xlat25;
bool u_xlatb25;
float u_xlat26;
vec2 u_xlat36;
mediump float u_xlat16_36;
lowp float u_xlat10_36;
float u_xlat37;
lowp float u_xlat10_37;
int u_xlati37;
uint u_xlatu37;
bool u_xlatb37;
float u_xlat41;
float u_xlat42;
lowp float u_xlat10_54;
float u_xlat55;
mediump float u_xlat16_55;
mediump float u_xlat16_57;
float u_xlat59;
mediump float u_xlat16_59;
bool u_xlatb59;
float u_xlat60;
float u_xlat61;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0 = vs_TEXCOORD5.xzxz * vec4(_ProjectUVScale, _ProjectUVScale, _RippleTillingScale, _RippleTillingScale);
    u_xlat1.x = _Time.y * _Normal01_U_Speed + u_xlat0.x;
    u_xlat1.yz = _Time.yy * vec2(_Normal01_VSpeed, _Normal02_U_Speed) + u_xlat0.yx;
    u_xlat1.w = _Time.y * _Normal02_V_Speed + u_xlat0.y;
    u_xlat10_2.xyz = texture(_Normal01, u_xlat1.xy, _NormalMapBias).xyz;
    u_xlat16_2.xyz = u_xlat10_2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_3.xy = u_xlat16_2.xy * vec2(_NormalMapScale);
    u_xlat10_1.xyz = texture(_Normal02, u_xlat1.zw, _NormalMapBias).xyz;
    u_xlat16_2.w = -1.0;
    u_xlat16_4.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_2.wwz;
    u_xlat16_4.xy = u_xlat16_4.xy * vec2(_NormalMapScale);
    u_xlat16_3.z = -1.0;
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat0.x = float(1.0) / vs_TEXCOORD4.w;
    u_xlat1.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat18 = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat18 = _ZBufferParams.z * u_xlat18 + _ZBufferParams.w;
    u_xlat18 = float(1.0) / u_xlat18;
    u_xlat1.x = vs_TEXCOORD10.w + 9.99999975e-05;
    u_xlat1.x = (-u_xlat18) / u_xlat1.x;
    u_xlat19.xyz = u_xlat1.xxx * vs_TEXCOORD10.xyz;
    u_xlat5.xyz = vs_TEXCOORD10.xyz * u_xlat1.xxx + _WorldSpaceCameraPos.xyz;
    u_xlat6.xyz = (-u_xlat5.xyz) + vs_TEXCOORD5.xyz;
    u_xlat1.x = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlat6.xz = u_xlat16_3.xy * vec2(vec2(_RefractionIntensity, _RefractionIntensity));
    u_xlat0.x = u_xlat0.x * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat6.xz = u_xlat0.xx * u_xlat6.xz;
    u_xlat6.xz = u_xlat6.xz * vs_TEXCOORD4.ww;
    u_xlat0.x = u_xlat18 + (-vs_TEXCOORD4.w);
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat7.xy = u_xlat0.xx * u_xlat6.xz;
    u_xlat7.z = 0.0;
    u_xlat6.xzw = u_xlat7.xyz + vs_TEXCOORD4.xyw;
    u_xlat0.xy = u_xlat6.xz / u_xlat6.ww;
    u_xlat0.x = texture(_CameraDepthTexture, u_xlat0.xy).x;
    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat0.x = u_xlat0.x + (-vs_TEXCOORD4.w);
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat6.xzw = u_xlat0.xxx * u_xlat7.xyz + vs_TEXCOORD4.xyw;
    u_xlat0.xy = u_xlat6.xz / u_xlat6.ww;
    u_xlat0.x = texture(_CameraDepthTexture, u_xlat0.xy).x;
    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat0.x = u_xlat0.x + (-vs_TEXCOORD4.w);
    u_xlat18 = 0.100000001 / _OpacityByDepth;
    u_xlat18 = u_xlat18 * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat16_4.xz = u_xlat16_3.xy;
    u_xlat16_4.y = 1.0;
    u_xlat16_59 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);
    u_xlat16_59 = inversesqrt(u_xlat16_59);
    u_xlat16_7.xyz = u_xlat16_4.xyz * vec3(u_xlat16_59);
#ifdef UNITY_ADRENO_ES3
    u_xlatb59 = !!(0.0>=_ES_MoonDirection.y);
#else
    u_xlatb59 = 0.0>=_ES_MoonDirection.y;
#endif
    u_xlat8.xyz = (bool(u_xlatb59)) ? _ES_SunDirection.xyz : _ES_MoonDirection.xyz;
    u_xlat9.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat59 = dot(u_xlat9.xyz, u_xlat9.xyz);
    u_xlat60 = inversesqrt(u_xlat59);
    u_xlat10.xyz = vec3(u_xlat60) * u_xlat9.xyz;
    u_xlat8.xyz = u_xlat9.xyz * vec3(u_xlat60) + u_xlat8.xyz;
    u_xlat60 = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat60 = inversesqrt(u_xlat60);
    u_xlat8.xyz = vec3(u_xlat60) * u_xlat8.xyz;
    u_xlat60 = dot(u_xlat16_7.xyz, u_xlat8.xyz);
    u_xlat25.x = _Gloss * 128.0;
    u_xlat60 = max(u_xlat60, 9.99999975e-05);
    u_xlat60 = log2(u_xlat60);
    u_xlat60 = u_xlat60 * u_xlat25.x;
    u_xlat60 = exp2(u_xlat60);
    u_xlat60 = u_xlat60 * _SpecularIntensity;
    u_xlat60 = max(u_xlat60, 0.0);
    u_xlat60 = min(u_xlat60, 16.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb25 = !!(_ES_MoonDirection.y>=9.99999975e-05);
#else
    u_xlatb25 = _ES_MoonDirection.y>=9.99999975e-05;
#endif
    u_xlat25.x = u_xlatb25 ? 1.0 : float(0.0);
    u_xlat61 = _ES_MoonDirection.y + -1.0;
    u_xlat25.x = u_xlat25.x * u_xlat61 + 1.0;
    u_xlat61 = float(1.0) / _ShoreTransparency;
    u_xlat8.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat8.xyz = u_xlat8.xxx * vs_TEXCOORD6.xyz;
    u_xlat8.x = dot(u_xlat10.xyz, u_xlat8.xyz);
    u_xlat8.x = (-u_xlat8.x) + 1.0;
    u_xlat8.x = max(u_xlat8.x, 9.99999975e-05);
    u_xlat8.x = log2(u_xlat8.x);
    u_xlat26 = u_xlat8.x * _SpecularPower;
    u_xlat26 = exp2(u_xlat26);
    u_xlat9.xyz = u_xlat25.xxx * _LightColor0.xyz;
    u_xlat9.xyz = vec3(u_xlat60) * u_xlat9.xyz;
    u_xlat60 = u_xlat0.x + -1.0;
    u_xlat60 = u_xlat61 * u_xlat60;
    u_xlat60 = u_xlat60 * 0.100000001;
#ifdef UNITY_ADRENO_ES3
    u_xlat60 = min(max(u_xlat60, 0.0), 1.0);
#else
    u_xlat60 = clamp(u_xlat60, 0.0, 1.0);
#endif
    u_xlat9.xyz = vec3(u_xlat60) * u_xlat9.xyz;
    u_xlat60 = u_xlat0.x * u_xlat61;
#ifdef UNITY_ADRENO_ES3
    u_xlat60 = min(max(u_xlat60, 0.0), 1.0);
#else
    u_xlat60 = clamp(u_xlat60, 0.0, 1.0);
#endif
    u_xlat60 = max(u_xlat60, 9.99999975e-05);
    u_xlat60 = log2(u_xlat60);
    u_xlat60 = u_xlat60 * _ShoreFade;
    u_xlat60 = exp2(u_xlat60);
    u_xlat11.xyz = _ShallowColor.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat11.xyz = vec3(u_xlat60) * u_xlat11.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat6.xz = u_xlat6.xz / vs_TEXCOORD4.ww;
    u_xlat10_12.xyz = texture(_SceneScaledBufferBeforTransParent, u_xlat6.xz).xyz;
    u_xlat6.x = u_xlat1.x * _CausticDistortionValue;
    u_xlat6.xz = u_xlat6.xx * u_xlat16_7.xz;
    u_xlat7.z = _Time.y * _CausticSpeed;
    u_xlat6.xz = u_xlat5.xz * vec2(_CausticUVScale) + u_xlat6.xz;
    u_xlat13.x = _Normal01_U_Speed * 25.0;
    u_xlat13.y = _Normal01_VSpeed * 25.0;
    u_xlat7.xy = u_xlat7.zz * u_xlat13.xy + u_xlat6.xz;
    u_xlat13.x = dot(u_xlat7.xyz, vec3(-2.0, 3.0, 1.0));
    u_xlat13.y = dot(u_xlat7.xyz, vec3(-1.0, -2.0, 2.0));
    u_xlat13.z = dot(u_xlat7.xzy, vec3(2.0, 2.0, 1.0));
    u_xlat7.xyz = u_xlat13.xyz * vec3(0.400000006, 0.400000006, 0.400000006);
    u_xlat14.x = dot(u_xlat7.xyz, vec3(-2.0, 3.0, 1.0));
    u_xlat14.y = dot(u_xlat7.xyz, vec3(-1.0, -2.0, 2.0));
    u_xlat14.z = dot(u_xlat7.xzy, vec3(2.0, 2.0, 1.0));
    u_xlat7.xyz = u_xlat14.xyz * vec3(0.300000012, 0.300000012, 0.300000012);
    u_xlat6.x = dot(u_xlat7.xyz, vec3(-2.0, 3.0, 1.0));
    u_xlat6.z = dot(u_xlat7.xyz, vec3(-1.0, -2.0, 2.0));
    u_xlat7.x = dot(u_xlat7.xzy, vec3(2.0, 2.0, 1.0));
    u_xlat25.xyz = fract(u_xlat13.xyz);
    u_xlat25.xyz = (-u_xlat25.xyz) + vec3(0.5, 0.5, 0.5);
    u_xlat25.x = dot(u_xlat25.xyz, u_xlat25.xyz);
    u_xlat13.xyz = fract(u_xlat14.xyz);
    u_xlat13.xyz = (-u_xlat13.xyz) + vec3(0.5, 0.5, 0.5);
    u_xlat25.y = dot(u_xlat13.xyz, u_xlat13.xyz);
    u_xlat25.xy = sqrt(u_xlat25.xy);
    u_xlat25.x = min(u_xlat25.y, u_xlat25.x);
    u_xlat13.xy = fract(u_xlat6.xz);
    u_xlat13.z = fract(u_xlat7.x);
    u_xlat7.xzw = (-u_xlat13.xyz) + vec3(0.5, 0.5, 0.5);
    u_xlat6.x = dot(u_xlat7.xzw, u_xlat7.xzw);
    u_xlat6.x = sqrt(u_xlat6.x);
    u_xlat6.x = min(u_xlat6.x, u_xlat25.x);
    u_xlat6.x = log2(u_xlat6.x);
    u_xlat6.x = u_xlat6.x * 7.0;
    u_xlat6.x = exp2(u_xlat6.x);
    u_xlat6.x = u_xlat6.x * 25.0;
    u_xlat16_4.xy = vec2(float(_CausticDepth) + float(9.99999975e-05), float(_CausticDistance) + float(9.99999975e-05));
    u_xlat42 = u_xlat6.y / u_xlat16_4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat42 = min(max(u_xlat42, 0.0), 1.0);
#else
    u_xlat42 = clamp(u_xlat42, 0.0, 1.0);
#endif
    u_xlat19.x = dot(u_xlat19.xyz, u_xlat19.xyz);
    u_xlat19.x = sqrt(u_xlat19.x);
    u_xlat19.x = u_xlat19.x / u_xlat16_4.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat19.x = min(max(u_xlat19.x, 0.0), 1.0);
#else
    u_xlat19.x = clamp(u_xlat19.x, 0.0, 1.0);
#endif
    u_xlat19.x = (-u_xlat19.x) + 1.0;
    u_xlat19.x = u_xlat19.x * u_xlat42;
    u_xlat7.xyz = u_xlat5.xyz + (-unity_ShadowSplitSpheres[0].xyz);
    u_xlat13.xyz = u_xlat5.xyz + (-unity_ShadowSplitSpheres[1].xyz);
    u_xlat14.xyz = u_xlat5.xyz + (-unity_ShadowSplitSpheres[2].xyz);
    u_xlat15.xyz = u_xlat5.xyz + (-unity_ShadowSplitSpheres[3].xyz);
    u_xlat2.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat2.y = dot(u_xlat13.xyz, u_xlat13.xyz);
    u_xlat2.z = dot(u_xlat14.xyz, u_xlat14.xyz);
    u_xlat2.w = dot(u_xlat15.xyz, u_xlat15.xyz);
    u_xlatb2 = lessThan(u_xlat2, unity_ShadowSplitSqRadii);
    u_xlat2 = mix(vec4(0.0, 0.0, 0.0, 0.0), vec4(1.0, 1.0, 1.0, 1.0), vec4(u_xlatb2));
    u_xlat16_57 = u_xlat2.y + u_xlat2.x;
    u_xlat16_4.x = u_xlat2.z + u_xlat16_57;
    u_xlat7.x = -0.0;
    u_xlat7.y = (-u_xlat2.x);
    u_xlat7.z = (-u_xlat16_57);
    u_xlat7.w = (-u_xlat16_4.x);
    u_xlat2 = u_xlat2 + u_xlat7;
    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat16_57 = dot(u_xlat2, vec4(1.0, 1.0, 1.0, 1.0));
#ifdef UNITY_ADRENO_ES3
    u_xlatb37 = !!(u_xlat16_57>=0.5);
#else
    u_xlatb37 = u_xlat16_57>=0.5;
#endif
    if(u_xlatb37){
        u_xlat37 = dot(u_xlat2.yzw, vec3(1.0, 2.0, 3.0));
        u_xlat37 = min(u_xlat37, 3.0);
        u_xlatu37 = uint(u_xlat37);
        u_xlat5.xyz = u_xlat5.xyz + (-unity_ShadowPos[int(u_xlatu37)].xyz);
        u_xlati37 = int(u_xlatu37) << 2;
        u_xlat7.xyz = u_xlat5.yyy * hlslcc_mtx4x4unity_WorldToShadow[(u_xlati37 + 1)].xyz;
        u_xlat7.xyz = hlslcc_mtx4x4unity_WorldToShadow[u_xlati37].xyz * u_xlat5.xxx + u_xlat7.xyz;
        u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToShadow[(u_xlati37 + 2)].xyz * u_xlat5.zzz + u_xlat7.xyz;
        u_xlat5.xyz = u_xlat5.xyz + hlslcc_mtx4x4unity_WorldToShadow[(u_xlati37 + 3)].xyz;
        vec3 txVec0 = vec3(u_xlat5.xy,u_xlat5.z);
        u_xlat10_37 = textureLod(hlslcc_zcmp_CascadeShadowMapTexture, txVec0, 0.0);
        u_xlat16_55 = (-_LightShadowData.x) + 1.0;
        u_xlat37 = u_xlat10_37 * u_xlat16_55 + _LightShadowData.x;
    } else {
        u_xlat37 = 1.0;
    //ENDIF
    }
    u_xlat19.x = u_xlat37 * u_xlat19.x;
    u_xlat16_4.xyz = _LightColor0.xyz * _CausticColor.xyz;
    u_xlat16_4.xyz = u_xlat6.xxx * u_xlat16_4.xyz;
    u_xlat16_4.xyz = u_xlat19.xxx * u_xlat16_4.xyz;
    u_xlat16_57 = _CausticFade + 9.99999975e-05;
    u_xlat1.x = u_xlat1.x / u_xlat16_57;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.x = log2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _CausticFadeExponent;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat1.x = (-u_xlat1.x) + 1.0;
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat1.xxx + vec3(1.0, 1.0, 1.0);
    u_xlat16_1.xyz = u_xlat16_4.xyz * u_xlat10_12.xyz;
    u_xlat5.xyz = u_xlat16_1.xyz * u_xlat11.xyz;
    u_xlat55 = 0.100000001 / _DeepColorDepth;
    u_xlat55 = u_xlat0.x * u_xlat55;
#ifdef UNITY_ADRENO_ES3
    u_xlat55 = min(max(u_xlat55, 0.0), 1.0);
#else
    u_xlat55 = clamp(u_xlat55, 0.0, 1.0);
#endif
    u_xlat55 = max(u_xlat55, 9.99999975e-05);
    u_xlat55 = log2(u_xlat55);
    u_xlat55 = u_xlat55 * _DeepColorFade;
    u_xlat55 = exp2(u_xlat55);
    u_xlat7.xyz = (-u_xlat11.xyz) * u_xlat16_1.xyz + _DeepColor.xyz;
    u_xlat7.xyz = vec3(u_xlat55) * u_xlat7.xyz + u_xlat5.xyz;
    u_xlat12.xyz = u_xlat16_3.xyz * _DistortionIntensity.xyz;
    u_xlat13.x = vs_TEXCOORD8.x;
    u_xlat13.y = vs_TEXCOORD9.x;
    u_xlat13.z = vs_TEXCOORD6.x;
    u_xlat13.x = dot(u_xlat13.xyz, u_xlat12.xyz);
    u_xlat14.x = vs_TEXCOORD8.y;
    u_xlat14.y = vs_TEXCOORD9.y;
    u_xlat14.z = vs_TEXCOORD6.y;
    u_xlat13.y = dot(u_xlat14.xyz, u_xlat12.xyz);
    u_xlat14.x = vs_TEXCOORD8.z;
    u_xlat14.y = vs_TEXCOORD9.z;
    u_xlat14.z = vs_TEXCOORD6.z;
    u_xlat13.z = dot(u_xlat14.xyz, u_xlat12.xyz);
    u_xlat55 = dot(u_xlat13.xyz, u_xlat13.xyz);
    u_xlat55 = inversesqrt(u_xlat55);
    u_xlat13.xyz = vec3(u_xlat55) * u_xlat13.xyz;
    u_xlat55 = dot((-u_xlat10.xyz), u_xlat13.xyz);
    u_xlat55 = u_xlat55 + u_xlat55;
    u_xlat10.xyz = u_xlat13.xyz * (-vec3(u_xlat55)) + (-u_xlat10.xyz);
    u_xlat10_2 = textureLod(_ReflectionSkyCubeMap, u_xlat10.xyz, 0.0);
    u_xlat16_3.x = u_xlat10_2.w + -1.0;
    u_xlat16_3.x = _ReflectionSkyCubeMap_HDR.w * u_xlat16_3.x + 1.0;
    u_xlat16_3.x = log2(u_xlat16_3.x);
    u_xlat16_3.x = u_xlat16_3.x * _ReflectionSkyCubeMap_HDR.y;
    u_xlat16_3.x = exp2(u_xlat16_3.x);
    u_xlat16_3.x = u_xlat16_3.x * _ReflectionSkyCubeMap_HDR.x;
    u_xlat16_21.xyz = u_xlat10_2.xyz * u_xlat16_3.xxx;
    u_xlat6.xz = u_xlat12.xy * vec2(_SSRDistortion);
    u_xlat55 = float(1.0) / _SSRDistortion_Shore;
    u_xlat55 = u_xlat0.x * u_xlat55;
#ifdef UNITY_ADRENO_ES3
    u_xlat55 = min(max(u_xlat55, 0.0), 1.0);
#else
    u_xlat55 = clamp(u_xlat55, 0.0, 1.0);
#endif
    u_xlat6.xz = vec2(u_xlat55) * u_xlat6.xz;
    u_xlat6.xz = u_xlat6.xz * vs_TEXCOORD4.ww + vs_TEXCOORD4.xy;
    u_xlat6.xz = u_xlat6.xz / vs_TEXCOORD4.ww;
    u_xlat10_4 = texture(_SSRTexture, u_xlat6.xz).wxyz;
    u_xlat16_10.xyz = (-u_xlat16_3.xxx) * u_xlat10_2.xyz + u_xlat10_4.yzw;
    u_xlat10.xyz = u_xlat16_10.xyz * vec3(vec3(_SSRIntensity, _SSRIntensity, _SSRIntensity));
    u_xlat16_4.x = u_xlat10_4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat10.xyz = u_xlat16_4.xxx * u_xlat10.xyz + u_xlat16_21.xyz;
    u_xlat55 = u_xlat8.x * _FresnelPower;
    u_xlat55 = exp2(u_xlat55);
    u_xlat55 = u_xlat55 * _ReflectionIntensity;
    u_xlat6.x = float(1.0) / _ShoreReflectionFade;
    u_xlat0.x = u_xlat0.x * u_xlat6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x * u_xlat55;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat8.xzw = (-u_xlat7.xyz) + u_xlat10.xyz;
    u_xlat7.xyz = u_xlat0.xxx * u_xlat8.xzw + u_xlat7.xyz;
    u_xlat1.xyz = (-u_xlat11.xyz) * u_xlat16_1.xyz + u_xlat7.xyz;
    u_xlat1.xyz = vec3(u_xlat60) * u_xlat1.xyz + u_xlat5.xyz;
    u_xlat0.x = (-vs_TEXCOORD5.y) * _WorldSpaceLightPos0.w + _WorldSpaceLightPos0.y;
    u_xlat16_3.x = max(u_xlat0.x, 0.0);
    u_xlat5.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowSplitSpheres[0].xyz);
    u_xlat6.xzw = vs_TEXCOORD5.xyz + (-unity_ShadowSplitSpheres[1].xyz);
    u_xlat7.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowSplitSpheres[2].xyz);
    u_xlat8.xzw = vs_TEXCOORD5.xyz + (-unity_ShadowSplitSpheres[3].xyz);
    u_xlat2.x = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat2.y = dot(u_xlat6.xzw, u_xlat6.xzw);
    u_xlat2.z = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat2.w = dot(u_xlat8.xzw, u_xlat8.xzw);
    u_xlatb2 = lessThan(u_xlat2, unity_ShadowSplitSqRadii);
    u_xlat2 = mix(vec4(0.0, 0.0, 0.0, 0.0), vec4(1.0, 1.0, 1.0, 1.0), vec4(u_xlatb2));
    u_xlat16_21.x = u_xlat2.y + u_xlat2.x;
    u_xlat16_21.y = u_xlat2.z + u_xlat16_21.x;
    u_xlat4.x = -0.0;
    u_xlat4.y = (-u_xlat2.x);
    u_xlat4.zw = (-u_xlat16_21.xy);
    u_xlat2 = u_xlat2 + u_xlat4;
    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat16_21.x = dot(u_xlat2, vec4(1.0, 1.0, 1.0, 1.0));
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(u_xlat16_21.x>=0.5);
#else
    u_xlatb0.x = u_xlat16_21.x>=0.5;
#endif
    if(u_xlatb0.x){
        u_xlat0.x = dot(u_xlat2.yzw, vec3(1.0, 2.0, 3.0));
        u_xlat0.x = min(u_xlat0.x, 3.0);
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat5.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowPos[int(u_xlatu0)].xyz);
        u_xlati0 = int(u_xlatu0) << 2;
        u_xlat6.xzw = u_xlat5.yyy * hlslcc_mtx4x4unity_WorldToShadow[(u_xlati0 + 1)].xyz;
        u_xlat6.xzw = hlslcc_mtx4x4unity_WorldToShadow[u_xlati0].xyz * u_xlat5.xxx + u_xlat6.xzw;
        u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToShadow[(u_xlati0 + 2)].xyz * u_xlat5.zzz + u_xlat6.xzw;
        u_xlat5.xyz = u_xlat5.xyz + hlslcc_mtx4x4unity_WorldToShadow[(u_xlati0 + 3)].xyz;
        vec3 txVec1 = vec3(u_xlat5.xy,u_xlat5.z);
        u_xlat10_0 = textureLod(hlslcc_zcmp_CascadeShadowMapTexture, txVec1, 0.0);
        u_xlat16_55 = (-_LightShadowData.x) + 1.0;
        u_xlat0.x = u_xlat10_0 * u_xlat16_55 + _LightShadowData.x;
    } else {
        u_xlat0.x = 1.0;
    //ENDIF
    }
    u_xlat16_3.xyz = u_xlat16_3.xxx * _LightColor0.xyz;
    u_xlat5.xyz = u_xlat16_3.xyz * u_xlat0.xxx + vs_TEXCOORD1.xyz;
    u_xlat16_3.xyz = u_xlat5.xyz * vec3(0.300000012, 0.300000012, 0.300000012) + vec3(0.699999988, 0.699999988, 0.699999988);
    u_xlat0.x = sqrt(u_xlat59);
    u_xlat16_57 = u_xlat0.x + (-_DepthFoamCloseFadeOffset);
    u_xlat16_57 = u_xlat16_57 / _DepthFoamCloseFadeDistance;
    u_xlat16_16 = vs_COLOR0.x * _DepthFoamExtent;
    u_xlat55 = max(u_xlat6.y, 0.0);
    u_xlat55 = min(u_xlat16_16, u_xlat55);
    u_xlat16_16 = _DepthFoamExtent * vs_COLOR0.x + 9.99999975e-05;
    u_xlat55 = u_xlat55 / u_xlat16_16;
    u_xlat55 = (-u_xlat55) + 1.0;
    u_xlat5.xy = vec2(_Time.y * _DepthFoamMask_ST.z, _Time.y * _DepthFoamMask_ST.w);
    u_xlat5.xy = fract(u_xlat5.xy);
    u_xlat5.xy = _DepthFoamMask_ST.xy * vs_TEXCOORD5.xz + u_xlat5.xy;
    u_xlat10_5 = texture(_DepthFoamMask, u_xlat5.xy, -1.0).x;
    u_xlat23 = vs_TEXCOORD5.z + vs_TEXCOORD5.x;
    u_xlat23 = u_xlat23 * _DepthFoamPhaseScale;
    u_xlat23 = _DepthFoamSpeed * _Time.y + u_xlat23;
    u_xlat41 = (-u_xlat55) + 1.0;
    u_xlat16_16 = _DepthFoamSubdivision * u_xlat55 + u_xlat23;
    u_xlat16_16 = sin(u_xlat16_16);
    u_xlat16_16 = _DepthFoamWidth * u_xlat55 + u_xlat16_16;
    u_xlat16_23 = u_xlat10_5 * 2.0 + -1.0;
    u_xlat23 = u_xlat16_23 + u_xlat16_16;
#ifdef UNITY_ADRENO_ES3
    u_xlatb23 = !!(u_xlat23>=u_xlat41);
#else
    u_xlatb23 = u_xlat23>=u_xlat41;
#endif
    u_xlat23 = u_xlatb23 ? 1.0 : float(0.0);
    u_xlat5.x = u_xlat23 * u_xlat10_5;
    u_xlat16_16 = _DepthFoamDistance + 9.99999975e-05;
    u_xlat16_16 = u_xlat0.x / u_xlat16_16;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat16_0 = (-u_xlat16_16) + 1.0;
    u_xlat16_16 = vs_COLOR0.y * _DepthFoamColor.w;
    u_xlat16_57 = u_xlat16_57 * u_xlat16_16;
    u_xlat16_57 = u_xlat5.x * u_xlat16_57;
    u_xlat16_57 = u_xlat55 * u_xlat16_57;
    u_xlat16_57 = u_xlat16_0 * u_xlat16_57;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_57 = min(max(u_xlat16_57, 0.0), 1.0);
#else
    u_xlat16_57 = clamp(u_xlat16_57, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = _DepthFoamColor.xyz * u_xlat16_3.xyz + (-u_xlat1.xyz);
    u_xlat16_3.xyz = vec3(u_xlat16_57) * u_xlat16_3.xyz + u_xlat1.xyz;
    u_xlat16_0 = max(_LightColor0.w, 0.5);
    u_xlat1.xyz = u_xlat9.xyz * vec3(u_xlat26) + u_xlat16_3.xyz;
    u_xlat36.xy = fract(u_xlat0.zw);
    u_xlat16_3.xy = u_xlat36.xy * vec2(1.14999998, 1.14999998);
    u_xlat16_16 = sin(_Ripple02Rotate);
    u_xlat16_17.x = cos(_Ripple02Rotate);
    u_xlat5.x = (-u_xlat16_16);
    u_xlat16_17.y = u_xlat16_16;
    u_xlat6.x = dot(u_xlat16_3.xy, u_xlat16_17.xy);
    u_xlat5.y = u_xlat16_17.x;
    u_xlat6.y = dot(u_xlat16_3.xy, u_xlat5.xy);
    u_xlat10_36 = texture(_WaterRippleTex, u_xlat36.xy).x;
    u_xlat10_54 = texture(_WaterRippleTex, u_xlat6.xy).x;
    u_xlat16_36 = u_xlat10_54 + u_xlat10_36;
    u_xlat36.x = u_xlat16_36 * u_xlat18;
    u_xlat5.xyz = _ES_MainLightColor.xyz * vec3(u_xlat16_0) + (-u_xlat1.xyz);
    u_xlat1.xyz = u_xlat36.xxx * u_xlat5.xyz + u_xlat1.xyz;
    u_xlat1.w = u_xlat18 * vs_COLOR0.w;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "MSAA_INTERPOLATION" "MHY_SHADER_HIGH" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
uniform 	vec4 hlslcc_mtx4x4_mhyJitteredVP[4];
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
out highp vec4 vs_TEXCOORD9;
out highp vec4 vs_TEXCOORD10;
float u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec4 u_xlat8;
vec3 u_xlat9;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat9.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4_mhyJitteredVP[1];
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[3] * u_xlat2.wwww + u_xlat1;
    u_xlat3.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    u_xlat3.xyw = u_xlat1.xyw;
    gl_Position = u_xlat3;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD1.w = 1.0;
    u_xlat4.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat4.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat4.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat1.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
    u_xlat16_5.x = u_xlat4.y * u_xlat4.y;
    u_xlat16_5.x = u_xlat4.x * u_xlat4.x + (-u_xlat16_5.x);
    u_xlat16_6 = u_xlat4.yzzx * u_xlat4.xyzz;
    u_xlat16_7.x = dot(unity_SHBr, u_xlat16_6);
    u_xlat16_7.y = dot(unity_SHBg, u_xlat16_6);
    u_xlat16_7.z = dot(unity_SHBb, u_xlat16_6);
    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_7.xyz;
    u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat4.w = 1.0;
    u_xlat16_6.x = dot(unity_SHAr, u_xlat4);
    u_xlat16_6.y = dot(unity_SHAg, u_xlat4);
    u_xlat16_6.z = dot(unity_SHAb, u_xlat4);
    u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_6.xyz;
    vs_TEXCOORD1.xyz = u_xlat16_5.xyz;
    u_xlat1.x = u_xlat3.y * _ProjectionParams.x;
    u_xlat8.w = u_xlat1.x * 0.5;
    u_xlat8.xz = u_xlat3.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.z = u_xlat1.z;
    u_xlat3.xy = u_xlat8.zz + u_xlat8.xw;
    vs_TEXCOORD2 = u_xlat3;
    vs_TEXCOORD4.xyw = u_xlat3.xyw;
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD3.w = 0.0;
    u_xlat1.x = u_xlat2.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat2.x + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat2.z + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat2.w + u_xlat1.x;
    vs_TEXCOORD3.z = (-u_xlat1.x);
    vs_TEXCOORD5.w = 0.0;
    vs_TEXCOORD5.xyz = u_xlat9.xyz;
    u_xlat9.xyz = (-u_xlat9.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD6.w = 0.0;
    vs_TEXCOORD6.xyz = u_xlat4.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].www + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * in_POSITION0.yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.zzz + u_xlat1.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.www + u_xlat1.xyz;
    vs_TEXCOORD7.xyz = u_xlat1.xyz * vec3(-1.0, -1.0, 1.0);
    vs_TEXCOORD7.w = 0.0;
    u_xlat1.xyz = in_TANGENT0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat0 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0 = inversesqrt(u_xlat0);
    u_xlat1.xyz = vec3(u_xlat0) * u_xlat1.xyz;
    vs_TEXCOORD8.xyz = u_xlat1.xyz;
    vs_TEXCOORD8.w = 0.0;
    u_xlat2.xyz = u_xlat1.yzx * u_xlat4.zxy;
    u_xlat1.xyz = u_xlat4.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
    u_xlat0 = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD9.xyz = vec3(u_xlat0) * u_xlat1.xyz;
    vs_TEXCOORD9.w = 0.0;
    u_xlat0 = u_xlat9.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat9.x + u_xlat0;
    vs_TEXCOORD10.w = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat9.z + u_xlat0;
    vs_TEXCOORD10.xyz = u_xlat9.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowPos[4];
uniform 	mediump vec4 _LightColor0;
uniform 	mediump float _CausticUVScale;
uniform 	mediump float _CausticSpeed;
uniform 	mediump vec4 _CausticColor;
uniform 	mediump float _CausticDepth;
uniform 	mediump float _CausticDistance;
uniform 	mediump float _CausticDistortionValue;
uniform 	mediump vec4 _DepthFoamMask_ST;
uniform 	mediump float _DepthFoamSpeed;
uniform 	mediump vec4 _DepthFoamColor;
uniform 	mediump float _DepthFoamExtent;
uniform 	mediump float _DepthFoamDistance;
uniform 	mediump float _DepthFoamSubdivision;
uniform 	mediump float _DepthFoamWidth;
uniform 	mediump float _DepthFoamPhaseScale;
uniform 	mediump float _DepthFoamCloseFadeOffset;
uniform 	mediump float _DepthFoamCloseFadeDistance;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _NormalMapScale;
uniform 	float _Normal01_U_Speed;
uniform 	float _Normal01_VSpeed;
uniform 	float _NormalMapBias;
uniform 	float _Normal02_U_Speed;
uniform 	float _Normal02_V_Speed;
uniform 	float _RefractionIntensity;
uniform 	float _OpacityByDepth;
uniform 	float _SpecularIntensity;
uniform 	vec3 _ES_MoonDirection;
uniform 	vec3 _ES_SunDirection;
uniform 	float _Gloss;
uniform 	float _ShoreTransparency;
uniform 	float _SpecularPower;
uniform 	vec4 _ShallowColor;
uniform 	float _ShoreFade;
uniform 	vec4 _DeepColor;
uniform 	float _DeepColorDepth;
uniform 	float _DeepColorFade;
uniform 	vec4 _DistortionIntensity;
uniform 	float _SSRDistortion;
uniform 	float _SSRDistortion_Shore;
uniform 	float _SSRIntensity;
uniform 	float _ReflectionIntensity;
uniform 	float _FresnelPower;
uniform 	float _ShoreReflectionFade;
uniform 	vec3 _ES_MainLightColor;
uniform 	mediump float _RippleTillingScale;
uniform 	mediump float _Ripple02Rotate;
uniform 	mediump float _ProjectUVScale;
uniform 	mediump float _CausticFade;
uniform 	mediump float _CausticFadeExponent;
uniform 	vec4 _ReflectionSkyCubeMap_HDR;
uniform lowp sampler2D _Normal01;
uniform lowp sampler2D _Normal02;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _SceneScaledBufferBeforTransParent;
uniform lowp samplerCube _ReflectionSkyCubeMap;
uniform lowp sampler2D _SSRTexture;
uniform lowp sampler2D _DepthFoamMask;
uniform lowp sampler2D _WaterRippleTex;
uniform lowp sampler2DShadow hlslcc_zcmp_CascadeShadowMapTexture;
uniform lowp sampler2D _CascadeShadowMapTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD8;
in highp vec4 vs_TEXCOORD9;
in highp vec4 vs_TEXCOORD10;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
lowp float u_xlat10_0;
int u_xlati0;
uint u_xlatu0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec3 u_xlat10_1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
lowp vec4 u_xlat10_2;
bvec4 u_xlatb2;
mediump vec3 u_xlat16_3;
vec4 u_xlat4;
mediump vec3 u_xlat16_4;
lowp vec4 u_xlat10_4;
vec3 u_xlat5;
lowp float u_xlat10_5;
vec4 u_xlat6;
vec4 u_xlat7;
mediump vec3 u_xlat16_7;
vec4 u_xlat8;
vec3 u_xlat9;
vec3 u_xlat10;
mediump vec3 u_xlat16_10;
vec3 u_xlat11;
vec3 u_xlat12;
lowp vec3 u_xlat10_12;
vec3 u_xlat13;
vec3 u_xlat14;
vec3 u_xlat15;
mediump float u_xlat16_16;
mediump vec2 u_xlat16_17;
float u_xlat18;
vec3 u_xlat19;
mediump vec3 u_xlat16_21;
float u_xlat23;
mediump float u_xlat16_23;
bool u_xlatb23;
vec3 u_xlat25;
bool u_xlatb25;
float u_xlat26;
vec2 u_xlat36;
mediump float u_xlat16_36;
lowp float u_xlat10_36;
float u_xlat37;
lowp float u_xlat10_37;
int u_xlati37;
uint u_xlatu37;
bool u_xlatb37;
float u_xlat41;
float u_xlat42;
lowp float u_xlat10_54;
float u_xlat55;
mediump float u_xlat16_55;
mediump float u_xlat16_57;
float u_xlat59;
mediump float u_xlat16_59;
bool u_xlatb59;
float u_xlat60;
float u_xlat61;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0 = vs_TEXCOORD5.xzxz * vec4(_ProjectUVScale, _ProjectUVScale, _RippleTillingScale, _RippleTillingScale);
    u_xlat1.x = _Time.y * _Normal01_U_Speed + u_xlat0.x;
    u_xlat1.yz = _Time.yy * vec2(_Normal01_VSpeed, _Normal02_U_Speed) + u_xlat0.yx;
    u_xlat1.w = _Time.y * _Normal02_V_Speed + u_xlat0.y;
    u_xlat10_2.xyz = texture(_Normal01, u_xlat1.xy, _NormalMapBias).xyz;
    u_xlat16_2.xyz = u_xlat10_2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_3.xy = u_xlat16_2.xy * vec2(_NormalMapScale);
    u_xlat10_1.xyz = texture(_Normal02, u_xlat1.zw, _NormalMapBias).xyz;
    u_xlat16_2.w = -1.0;
    u_xlat16_4.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_2.wwz;
    u_xlat16_4.xy = u_xlat16_4.xy * vec2(_NormalMapScale);
    u_xlat16_3.z = -1.0;
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat0.x = float(1.0) / vs_TEXCOORD4.w;
    u_xlat1.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat18 = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat18 = _ZBufferParams.z * u_xlat18 + _ZBufferParams.w;
    u_xlat18 = float(1.0) / u_xlat18;
    u_xlat1.x = vs_TEXCOORD10.w + 9.99999975e-05;
    u_xlat1.x = (-u_xlat18) / u_xlat1.x;
    u_xlat19.xyz = u_xlat1.xxx * vs_TEXCOORD10.xyz;
    u_xlat5.xyz = vs_TEXCOORD10.xyz * u_xlat1.xxx + _WorldSpaceCameraPos.xyz;
    u_xlat6.xyz = (-u_xlat5.xyz) + vs_TEXCOORD5.xyz;
    u_xlat1.x = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlat6.xz = u_xlat16_3.xy * vec2(vec2(_RefractionIntensity, _RefractionIntensity));
    u_xlat0.x = u_xlat0.x * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat6.xz = u_xlat0.xx * u_xlat6.xz;
    u_xlat6.xz = u_xlat6.xz * vs_TEXCOORD4.ww;
    u_xlat0.x = u_xlat18 + (-vs_TEXCOORD4.w);
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat7.xy = u_xlat0.xx * u_xlat6.xz;
    u_xlat7.z = 0.0;
    u_xlat6.xzw = u_xlat7.xyz + vs_TEXCOORD4.xyw;
    u_xlat0.xy = u_xlat6.xz / u_xlat6.ww;
    u_xlat0.x = texture(_CameraDepthTexture, u_xlat0.xy).x;
    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat0.x = u_xlat0.x + (-vs_TEXCOORD4.w);
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat6.xzw = u_xlat0.xxx * u_xlat7.xyz + vs_TEXCOORD4.xyw;
    u_xlat0.xy = u_xlat6.xz / u_xlat6.ww;
    u_xlat0.x = texture(_CameraDepthTexture, u_xlat0.xy).x;
    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat0.x = u_xlat0.x + (-vs_TEXCOORD4.w);
    u_xlat18 = 0.100000001 / _OpacityByDepth;
    u_xlat18 = u_xlat18 * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat16_4.xz = u_xlat16_3.xy;
    u_xlat16_4.y = 1.0;
    u_xlat16_59 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);
    u_xlat16_59 = inversesqrt(u_xlat16_59);
    u_xlat16_7.xyz = u_xlat16_4.xyz * vec3(u_xlat16_59);
#ifdef UNITY_ADRENO_ES3
    u_xlatb59 = !!(0.0>=_ES_MoonDirection.y);
#else
    u_xlatb59 = 0.0>=_ES_MoonDirection.y;
#endif
    u_xlat8.xyz = (bool(u_xlatb59)) ? _ES_SunDirection.xyz : _ES_MoonDirection.xyz;
    u_xlat9.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat59 = dot(u_xlat9.xyz, u_xlat9.xyz);
    u_xlat60 = inversesqrt(u_xlat59);
    u_xlat10.xyz = vec3(u_xlat60) * u_xlat9.xyz;
    u_xlat8.xyz = u_xlat9.xyz * vec3(u_xlat60) + u_xlat8.xyz;
    u_xlat60 = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat60 = inversesqrt(u_xlat60);
    u_xlat8.xyz = vec3(u_xlat60) * u_xlat8.xyz;
    u_xlat60 = dot(u_xlat16_7.xyz, u_xlat8.xyz);
    u_xlat25.x = _Gloss * 128.0;
    u_xlat60 = max(u_xlat60, 9.99999975e-05);
    u_xlat60 = log2(u_xlat60);
    u_xlat60 = u_xlat60 * u_xlat25.x;
    u_xlat60 = exp2(u_xlat60);
    u_xlat60 = u_xlat60 * _SpecularIntensity;
    u_xlat60 = max(u_xlat60, 0.0);
    u_xlat60 = min(u_xlat60, 16.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb25 = !!(_ES_MoonDirection.y>=9.99999975e-05);
#else
    u_xlatb25 = _ES_MoonDirection.y>=9.99999975e-05;
#endif
    u_xlat25.x = u_xlatb25 ? 1.0 : float(0.0);
    u_xlat61 = _ES_MoonDirection.y + -1.0;
    u_xlat25.x = u_xlat25.x * u_xlat61 + 1.0;
    u_xlat61 = float(1.0) / _ShoreTransparency;
    u_xlat8.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat8.xyz = u_xlat8.xxx * vs_TEXCOORD6.xyz;
    u_xlat8.x = dot(u_xlat10.xyz, u_xlat8.xyz);
    u_xlat8.x = (-u_xlat8.x) + 1.0;
    u_xlat8.x = max(u_xlat8.x, 9.99999975e-05);
    u_xlat8.x = log2(u_xlat8.x);
    u_xlat26 = u_xlat8.x * _SpecularPower;
    u_xlat26 = exp2(u_xlat26);
    u_xlat9.xyz = u_xlat25.xxx * _LightColor0.xyz;
    u_xlat9.xyz = vec3(u_xlat60) * u_xlat9.xyz;
    u_xlat60 = u_xlat0.x + -1.0;
    u_xlat60 = u_xlat61 * u_xlat60;
    u_xlat60 = u_xlat60 * 0.100000001;
#ifdef UNITY_ADRENO_ES3
    u_xlat60 = min(max(u_xlat60, 0.0), 1.0);
#else
    u_xlat60 = clamp(u_xlat60, 0.0, 1.0);
#endif
    u_xlat9.xyz = vec3(u_xlat60) * u_xlat9.xyz;
    u_xlat60 = u_xlat0.x * u_xlat61;
#ifdef UNITY_ADRENO_ES3
    u_xlat60 = min(max(u_xlat60, 0.0), 1.0);
#else
    u_xlat60 = clamp(u_xlat60, 0.0, 1.0);
#endif
    u_xlat60 = max(u_xlat60, 9.99999975e-05);
    u_xlat60 = log2(u_xlat60);
    u_xlat60 = u_xlat60 * _ShoreFade;
    u_xlat60 = exp2(u_xlat60);
    u_xlat11.xyz = _ShallowColor.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat11.xyz = vec3(u_xlat60) * u_xlat11.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat6.xz = u_xlat6.xz / vs_TEXCOORD4.ww;
    u_xlat10_12.xyz = texture(_SceneScaledBufferBeforTransParent, u_xlat6.xz).xyz;
    u_xlat6.x = u_xlat1.x * _CausticDistortionValue;
    u_xlat6.xz = u_xlat6.xx * u_xlat16_7.xz;
    u_xlat7.z = _Time.y * _CausticSpeed;
    u_xlat6.xz = u_xlat5.xz * vec2(_CausticUVScale) + u_xlat6.xz;
    u_xlat13.x = _Normal01_U_Speed * 25.0;
    u_xlat13.y = _Normal01_VSpeed * 25.0;
    u_xlat7.xy = u_xlat7.zz * u_xlat13.xy + u_xlat6.xz;
    u_xlat13.x = dot(u_xlat7.xyz, vec3(-2.0, 3.0, 1.0));
    u_xlat13.y = dot(u_xlat7.xyz, vec3(-1.0, -2.0, 2.0));
    u_xlat13.z = dot(u_xlat7.xzy, vec3(2.0, 2.0, 1.0));
    u_xlat7.xyz = u_xlat13.xyz * vec3(0.400000006, 0.400000006, 0.400000006);
    u_xlat14.x = dot(u_xlat7.xyz, vec3(-2.0, 3.0, 1.0));
    u_xlat14.y = dot(u_xlat7.xyz, vec3(-1.0, -2.0, 2.0));
    u_xlat14.z = dot(u_xlat7.xzy, vec3(2.0, 2.0, 1.0));
    u_xlat7.xyz = u_xlat14.xyz * vec3(0.300000012, 0.300000012, 0.300000012);
    u_xlat6.x = dot(u_xlat7.xyz, vec3(-2.0, 3.0, 1.0));
    u_xlat6.z = dot(u_xlat7.xyz, vec3(-1.0, -2.0, 2.0));
    u_xlat7.x = dot(u_xlat7.xzy, vec3(2.0, 2.0, 1.0));
    u_xlat25.xyz = fract(u_xlat13.xyz);
    u_xlat25.xyz = (-u_xlat25.xyz) + vec3(0.5, 0.5, 0.5);
    u_xlat25.x = dot(u_xlat25.xyz, u_xlat25.xyz);
    u_xlat13.xyz = fract(u_xlat14.xyz);
    u_xlat13.xyz = (-u_xlat13.xyz) + vec3(0.5, 0.5, 0.5);
    u_xlat25.y = dot(u_xlat13.xyz, u_xlat13.xyz);
    u_xlat25.xy = sqrt(u_xlat25.xy);
    u_xlat25.x = min(u_xlat25.y, u_xlat25.x);
    u_xlat13.xy = fract(u_xlat6.xz);
    u_xlat13.z = fract(u_xlat7.x);
    u_xlat7.xzw = (-u_xlat13.xyz) + vec3(0.5, 0.5, 0.5);
    u_xlat6.x = dot(u_xlat7.xzw, u_xlat7.xzw);
    u_xlat6.x = sqrt(u_xlat6.x);
    u_xlat6.x = min(u_xlat6.x, u_xlat25.x);
    u_xlat6.x = log2(u_xlat6.x);
    u_xlat6.x = u_xlat6.x * 7.0;
    u_xlat6.x = exp2(u_xlat6.x);
    u_xlat6.x = u_xlat6.x * 25.0;
    u_xlat16_4.xy = vec2(float(_CausticDepth) + float(9.99999975e-05), float(_CausticDistance) + float(9.99999975e-05));
    u_xlat42 = u_xlat6.y / u_xlat16_4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat42 = min(max(u_xlat42, 0.0), 1.0);
#else
    u_xlat42 = clamp(u_xlat42, 0.0, 1.0);
#endif
    u_xlat19.x = dot(u_xlat19.xyz, u_xlat19.xyz);
    u_xlat19.x = sqrt(u_xlat19.x);
    u_xlat19.x = u_xlat19.x / u_xlat16_4.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat19.x = min(max(u_xlat19.x, 0.0), 1.0);
#else
    u_xlat19.x = clamp(u_xlat19.x, 0.0, 1.0);
#endif
    u_xlat19.x = (-u_xlat19.x) + 1.0;
    u_xlat19.x = u_xlat19.x * u_xlat42;
    u_xlat7.xyz = u_xlat5.xyz + (-unity_ShadowSplitSpheres[0].xyz);
    u_xlat13.xyz = u_xlat5.xyz + (-unity_ShadowSplitSpheres[1].xyz);
    u_xlat14.xyz = u_xlat5.xyz + (-unity_ShadowSplitSpheres[2].xyz);
    u_xlat15.xyz = u_xlat5.xyz + (-unity_ShadowSplitSpheres[3].xyz);
    u_xlat2.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat2.y = dot(u_xlat13.xyz, u_xlat13.xyz);
    u_xlat2.z = dot(u_xlat14.xyz, u_xlat14.xyz);
    u_xlat2.w = dot(u_xlat15.xyz, u_xlat15.xyz);
    u_xlatb2 = lessThan(u_xlat2, unity_ShadowSplitSqRadii);
    u_xlat2 = mix(vec4(0.0, 0.0, 0.0, 0.0), vec4(1.0, 1.0, 1.0, 1.0), vec4(u_xlatb2));
    u_xlat16_57 = u_xlat2.y + u_xlat2.x;
    u_xlat16_4.x = u_xlat2.z + u_xlat16_57;
    u_xlat7.x = -0.0;
    u_xlat7.y = (-u_xlat2.x);
    u_xlat7.z = (-u_xlat16_57);
    u_xlat7.w = (-u_xlat16_4.x);
    u_xlat2 = u_xlat2 + u_xlat7;
    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat16_57 = dot(u_xlat2, vec4(1.0, 1.0, 1.0, 1.0));
#ifdef UNITY_ADRENO_ES3
    u_xlatb37 = !!(u_xlat16_57>=0.5);
#else
    u_xlatb37 = u_xlat16_57>=0.5;
#endif
    if(u_xlatb37){
        u_xlat37 = dot(u_xlat2.yzw, vec3(1.0, 2.0, 3.0));
        u_xlat37 = min(u_xlat37, 3.0);
        u_xlatu37 = uint(u_xlat37);
        u_xlat5.xyz = u_xlat5.xyz + (-unity_ShadowPos[int(u_xlatu37)].xyz);
        u_xlati37 = int(u_xlatu37) << 2;
        u_xlat7.xyz = u_xlat5.yyy * hlslcc_mtx4x4unity_WorldToShadow[(u_xlati37 + 1)].xyz;
        u_xlat7.xyz = hlslcc_mtx4x4unity_WorldToShadow[u_xlati37].xyz * u_xlat5.xxx + u_xlat7.xyz;
        u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToShadow[(u_xlati37 + 2)].xyz * u_xlat5.zzz + u_xlat7.xyz;
        u_xlat5.xyz = u_xlat5.xyz + hlslcc_mtx4x4unity_WorldToShadow[(u_xlati37 + 3)].xyz;
        vec3 txVec0 = vec3(u_xlat5.xy,u_xlat5.z);
        u_xlat10_37 = textureLod(hlslcc_zcmp_CascadeShadowMapTexture, txVec0, 0.0);
        u_xlat16_55 = (-_LightShadowData.x) + 1.0;
        u_xlat37 = u_xlat10_37 * u_xlat16_55 + _LightShadowData.x;
    } else {
        u_xlat37 = 1.0;
    //ENDIF
    }
    u_xlat19.x = u_xlat37 * u_xlat19.x;
    u_xlat16_4.xyz = _LightColor0.xyz * _CausticColor.xyz;
    u_xlat16_4.xyz = u_xlat6.xxx * u_xlat16_4.xyz;
    u_xlat16_4.xyz = u_xlat19.xxx * u_xlat16_4.xyz;
    u_xlat16_57 = _CausticFade + 9.99999975e-05;
    u_xlat1.x = u_xlat1.x / u_xlat16_57;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.x = log2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _CausticFadeExponent;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat1.x = (-u_xlat1.x) + 1.0;
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat1.xxx + vec3(1.0, 1.0, 1.0);
    u_xlat16_1.xyz = u_xlat16_4.xyz * u_xlat10_12.xyz;
    u_xlat5.xyz = u_xlat16_1.xyz * u_xlat11.xyz;
    u_xlat55 = 0.100000001 / _DeepColorDepth;
    u_xlat55 = u_xlat0.x * u_xlat55;
#ifdef UNITY_ADRENO_ES3
    u_xlat55 = min(max(u_xlat55, 0.0), 1.0);
#else
    u_xlat55 = clamp(u_xlat55, 0.0, 1.0);
#endif
    u_xlat55 = max(u_xlat55, 9.99999975e-05);
    u_xlat55 = log2(u_xlat55);
    u_xlat55 = u_xlat55 * _DeepColorFade;
    u_xlat55 = exp2(u_xlat55);
    u_xlat7.xyz = (-u_xlat11.xyz) * u_xlat16_1.xyz + _DeepColor.xyz;
    u_xlat7.xyz = vec3(u_xlat55) * u_xlat7.xyz + u_xlat5.xyz;
    u_xlat12.xyz = u_xlat16_3.xyz * _DistortionIntensity.xyz;
    u_xlat13.x = vs_TEXCOORD8.x;
    u_xlat13.y = vs_TEXCOORD9.x;
    u_xlat13.z = vs_TEXCOORD6.x;
    u_xlat13.x = dot(u_xlat13.xyz, u_xlat12.xyz);
    u_xlat14.x = vs_TEXCOORD8.y;
    u_xlat14.y = vs_TEXCOORD9.y;
    u_xlat14.z = vs_TEXCOORD6.y;
    u_xlat13.y = dot(u_xlat14.xyz, u_xlat12.xyz);
    u_xlat14.x = vs_TEXCOORD8.z;
    u_xlat14.y = vs_TEXCOORD9.z;
    u_xlat14.z = vs_TEXCOORD6.z;
    u_xlat13.z = dot(u_xlat14.xyz, u_xlat12.xyz);
    u_xlat55 = dot(u_xlat13.xyz, u_xlat13.xyz);
    u_xlat55 = inversesqrt(u_xlat55);
    u_xlat13.xyz = vec3(u_xlat55) * u_xlat13.xyz;
    u_xlat55 = dot((-u_xlat10.xyz), u_xlat13.xyz);
    u_xlat55 = u_xlat55 + u_xlat55;
    u_xlat10.xyz = u_xlat13.xyz * (-vec3(u_xlat55)) + (-u_xlat10.xyz);
    u_xlat10_2 = textureLod(_ReflectionSkyCubeMap, u_xlat10.xyz, 0.0);
    u_xlat16_3.x = u_xlat10_2.w + -1.0;
    u_xlat16_3.x = _ReflectionSkyCubeMap_HDR.w * u_xlat16_3.x + 1.0;
    u_xlat16_3.x = log2(u_xlat16_3.x);
    u_xlat16_3.x = u_xlat16_3.x * _ReflectionSkyCubeMap_HDR.y;
    u_xlat16_3.x = exp2(u_xlat16_3.x);
    u_xlat16_3.x = u_xlat16_3.x * _ReflectionSkyCubeMap_HDR.x;
    u_xlat16_21.xyz = u_xlat10_2.xyz * u_xlat16_3.xxx;
    u_xlat6.xz = u_xlat12.xy * vec2(_SSRDistortion);
    u_xlat55 = float(1.0) / _SSRDistortion_Shore;
    u_xlat55 = u_xlat0.x * u_xlat55;
#ifdef UNITY_ADRENO_ES3
    u_xlat55 = min(max(u_xlat55, 0.0), 1.0);
#else
    u_xlat55 = clamp(u_xlat55, 0.0, 1.0);
#endif
    u_xlat6.xz = vec2(u_xlat55) * u_xlat6.xz;
    u_xlat6.xz = u_xlat6.xz * vs_TEXCOORD4.ww + vs_TEXCOORD4.xy;
    u_xlat6.xz = u_xlat6.xz / vs_TEXCOORD4.ww;
    u_xlat10_4 = texture(_SSRTexture, u_xlat6.xz).wxyz;
    u_xlat16_10.xyz = (-u_xlat16_3.xxx) * u_xlat10_2.xyz + u_xlat10_4.yzw;
    u_xlat10.xyz = u_xlat16_10.xyz * vec3(vec3(_SSRIntensity, _SSRIntensity, _SSRIntensity));
    u_xlat16_4.x = u_xlat10_4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat10.xyz = u_xlat16_4.xxx * u_xlat10.xyz + u_xlat16_21.xyz;
    u_xlat55 = u_xlat8.x * _FresnelPower;
    u_xlat55 = exp2(u_xlat55);
    u_xlat55 = u_xlat55 * _ReflectionIntensity;
    u_xlat6.x = float(1.0) / _ShoreReflectionFade;
    u_xlat0.x = u_xlat0.x * u_xlat6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x * u_xlat55;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat8.xzw = (-u_xlat7.xyz) + u_xlat10.xyz;
    u_xlat7.xyz = u_xlat0.xxx * u_xlat8.xzw + u_xlat7.xyz;
    u_xlat1.xyz = (-u_xlat11.xyz) * u_xlat16_1.xyz + u_xlat7.xyz;
    u_xlat1.xyz = vec3(u_xlat60) * u_xlat1.xyz + u_xlat5.xyz;
    u_xlat0.x = (-vs_TEXCOORD5.y) * _WorldSpaceLightPos0.w + _WorldSpaceLightPos0.y;
    u_xlat16_3.x = max(u_xlat0.x, 0.0);
    u_xlat5.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowSplitSpheres[0].xyz);
    u_xlat6.xzw = vs_TEXCOORD5.xyz + (-unity_ShadowSplitSpheres[1].xyz);
    u_xlat7.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowSplitSpheres[2].xyz);
    u_xlat8.xzw = vs_TEXCOORD5.xyz + (-unity_ShadowSplitSpheres[3].xyz);
    u_xlat2.x = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat2.y = dot(u_xlat6.xzw, u_xlat6.xzw);
    u_xlat2.z = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat2.w = dot(u_xlat8.xzw, u_xlat8.xzw);
    u_xlatb2 = lessThan(u_xlat2, unity_ShadowSplitSqRadii);
    u_xlat2 = mix(vec4(0.0, 0.0, 0.0, 0.0), vec4(1.0, 1.0, 1.0, 1.0), vec4(u_xlatb2));
    u_xlat16_21.x = u_xlat2.y + u_xlat2.x;
    u_xlat16_21.y = u_xlat2.z + u_xlat16_21.x;
    u_xlat4.x = -0.0;
    u_xlat4.y = (-u_xlat2.x);
    u_xlat4.zw = (-u_xlat16_21.xy);
    u_xlat2 = u_xlat2 + u_xlat4;
    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat16_21.x = dot(u_xlat2, vec4(1.0, 1.0, 1.0, 1.0));
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(u_xlat16_21.x>=0.5);
#else
    u_xlatb0.x = u_xlat16_21.x>=0.5;
#endif
    if(u_xlatb0.x){
        u_xlat0.x = dot(u_xlat2.yzw, vec3(1.0, 2.0, 3.0));
        u_xlat0.x = min(u_xlat0.x, 3.0);
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat5.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowPos[int(u_xlatu0)].xyz);
        u_xlati0 = int(u_xlatu0) << 2;
        u_xlat6.xzw = u_xlat5.yyy * hlslcc_mtx4x4unity_WorldToShadow[(u_xlati0 + 1)].xyz;
        u_xlat6.xzw = hlslcc_mtx4x4unity_WorldToShadow[u_xlati0].xyz * u_xlat5.xxx + u_xlat6.xzw;
        u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToShadow[(u_xlati0 + 2)].xyz * u_xlat5.zzz + u_xlat6.xzw;
        u_xlat5.xyz = u_xlat5.xyz + hlslcc_mtx4x4unity_WorldToShadow[(u_xlati0 + 3)].xyz;
        vec3 txVec1 = vec3(u_xlat5.xy,u_xlat5.z);
        u_xlat10_0 = textureLod(hlslcc_zcmp_CascadeShadowMapTexture, txVec1, 0.0);
        u_xlat16_55 = (-_LightShadowData.x) + 1.0;
        u_xlat0.x = u_xlat10_0 * u_xlat16_55 + _LightShadowData.x;
    } else {
        u_xlat0.x = 1.0;
    //ENDIF
    }
    u_xlat16_3.xyz = u_xlat16_3.xxx * _LightColor0.xyz;
    u_xlat5.xyz = u_xlat16_3.xyz * u_xlat0.xxx + vs_TEXCOORD1.xyz;
    u_xlat16_3.xyz = u_xlat5.xyz * vec3(0.300000012, 0.300000012, 0.300000012) + vec3(0.699999988, 0.699999988, 0.699999988);
    u_xlat0.x = sqrt(u_xlat59);
    u_xlat16_57 = u_xlat0.x + (-_DepthFoamCloseFadeOffset);
    u_xlat16_57 = u_xlat16_57 / _DepthFoamCloseFadeDistance;
    u_xlat16_16 = vs_COLOR0.x * _DepthFoamExtent;
    u_xlat55 = max(u_xlat6.y, 0.0);
    u_xlat55 = min(u_xlat16_16, u_xlat55);
    u_xlat16_16 = _DepthFoamExtent * vs_COLOR0.x + 9.99999975e-05;
    u_xlat55 = u_xlat55 / u_xlat16_16;
    u_xlat55 = (-u_xlat55) + 1.0;
    u_xlat5.xy = vec2(_Time.y * _DepthFoamMask_ST.z, _Time.y * _DepthFoamMask_ST.w);
    u_xlat5.xy = fract(u_xlat5.xy);
    u_xlat5.xy = _DepthFoamMask_ST.xy * vs_TEXCOORD5.xz + u_xlat5.xy;
    u_xlat10_5 = texture(_DepthFoamMask, u_xlat5.xy, -1.0).x;
    u_xlat23 = vs_TEXCOORD5.z + vs_TEXCOORD5.x;
    u_xlat23 = u_xlat23 * _DepthFoamPhaseScale;
    u_xlat23 = _DepthFoamSpeed * _Time.y + u_xlat23;
    u_xlat41 = (-u_xlat55) + 1.0;
    u_xlat16_16 = _DepthFoamSubdivision * u_xlat55 + u_xlat23;
    u_xlat16_16 = sin(u_xlat16_16);
    u_xlat16_16 = _DepthFoamWidth * u_xlat55 + u_xlat16_16;
    u_xlat16_23 = u_xlat10_5 * 2.0 + -1.0;
    u_xlat23 = u_xlat16_23 + u_xlat16_16;
#ifdef UNITY_ADRENO_ES3
    u_xlatb23 = !!(u_xlat23>=u_xlat41);
#else
    u_xlatb23 = u_xlat23>=u_xlat41;
#endif
    u_xlat23 = u_xlatb23 ? 1.0 : float(0.0);
    u_xlat5.x = u_xlat23 * u_xlat10_5;
    u_xlat16_16 = _DepthFoamDistance + 9.99999975e-05;
    u_xlat16_16 = u_xlat0.x / u_xlat16_16;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat16_0 = (-u_xlat16_16) + 1.0;
    u_xlat16_16 = vs_COLOR0.y * _DepthFoamColor.w;
    u_xlat16_57 = u_xlat16_57 * u_xlat16_16;
    u_xlat16_57 = u_xlat5.x * u_xlat16_57;
    u_xlat16_57 = u_xlat55 * u_xlat16_57;
    u_xlat16_57 = u_xlat16_0 * u_xlat16_57;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_57 = min(max(u_xlat16_57, 0.0), 1.0);
#else
    u_xlat16_57 = clamp(u_xlat16_57, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = _DepthFoamColor.xyz * u_xlat16_3.xyz + (-u_xlat1.xyz);
    u_xlat16_3.xyz = vec3(u_xlat16_57) * u_xlat16_3.xyz + u_xlat1.xyz;
    u_xlat16_0 = max(_LightColor0.w, 0.5);
    u_xlat1.xyz = u_xlat9.xyz * vec3(u_xlat26) + u_xlat16_3.xyz;
    u_xlat36.xy = fract(u_xlat0.zw);
    u_xlat16_3.xy = u_xlat36.xy * vec2(1.14999998, 1.14999998);
    u_xlat16_16 = sin(_Ripple02Rotate);
    u_xlat16_17.x = cos(_Ripple02Rotate);
    u_xlat5.x = (-u_xlat16_16);
    u_xlat16_17.y = u_xlat16_16;
    u_xlat6.x = dot(u_xlat16_3.xy, u_xlat16_17.xy);
    u_xlat5.y = u_xlat16_17.x;
    u_xlat6.y = dot(u_xlat16_3.xy, u_xlat5.xy);
    u_xlat10_36 = texture(_WaterRippleTex, u_xlat36.xy).x;
    u_xlat10_54 = texture(_WaterRippleTex, u_xlat6.xy).x;
    u_xlat16_36 = u_xlat10_54 + u_xlat10_36;
    u_xlat36.x = u_xlat16_36 * u_xlat18;
    u_xlat5.xyz = _ES_MainLightColor.xyz * vec3(u_xlat16_0) + (-u_xlat1.xyz);
    u_xlat1.xyz = u_xlat36.xxx * u_xlat5.xyz + u_xlat1.xyz;
    u_xlat1.w = u_xlat18 * vs_COLOR0.w;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "MSAA_INTERPOLATION" "MHY_SHADER_MIDDLE" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump float _MHYZBias;
uniform 	vec4 hlslcc_mtx4x4_mhyJitteredVP[4];
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
out highp vec4 vs_TEXCOORD9;
out highp vec4 vs_TEXCOORD10;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec4 u_xlat8;
float u_xlat27;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4_mhyJitteredVP[1];
    u_xlat2 = hlslcc_mtx4x4_mhyJitteredVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4_mhyJitteredVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4_mhyJitteredVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat3.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    u_xlat3.xyw = u_xlat2.xyw;
    gl_Position = u_xlat3;
    vs_COLOR0 = in_COLOR0;
    u_xlat4.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat4.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat4.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat27 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat4.xyz = vec3(u_xlat27) * u_xlat4.xyz;
    u_xlat16_5.x = u_xlat4.y * u_xlat4.y;
    u_xlat16_5.x = u_xlat4.x * u_xlat4.x + (-u_xlat16_5.x);
    u_xlat16_6 = u_xlat4.yzzx * u_xlat4.xyzz;
    u_xlat16_7.x = dot(unity_SHBr, u_xlat16_6);
    u_xlat16_7.y = dot(unity_SHBg, u_xlat16_6);
    u_xlat16_7.z = dot(unity_SHBb, u_xlat16_6);
    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_7.xyz;
    u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat4.w = 1.0;
    u_xlat16_6.x = dot(unity_SHAr, u_xlat4);
    u_xlat16_6.y = dot(unity_SHAg, u_xlat4);
    u_xlat16_6.z = dot(unity_SHAb, u_xlat4);
    u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_6.xyz;
    vs_TEXCOORD1.xyz = u_xlat16_5.xyz;
    vs_TEXCOORD1.w = 1.0;
    u_xlat27 = u_xlat3.y * _ProjectionParams.x;
    u_xlat8.w = u_xlat27 * 0.5;
    u_xlat8.xz = u_xlat3.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.z = u_xlat2.z;
    u_xlat3.xy = u_xlat8.zz + u_xlat8.xw;
    vs_TEXCOORD2 = u_xlat3;
    vs_TEXCOORD4.xyw = u_xlat3.xyw;
    u_xlat27 = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat27 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat27;
    u_xlat27 = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat27;
    u_xlat27 = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat27;
    vs_TEXCOORD3.z = (-u_xlat27);
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD3.w = 0.0;
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD5.w = 0.0;
    vs_TEXCOORD6.xyz = u_xlat4.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[1].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].www + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * in_POSITION0.yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.zzz + u_xlat1.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.www + u_xlat1.xyz;
    vs_TEXCOORD7.xyz = u_xlat1.xyz * vec3(-1.0, -1.0, 1.0);
    vs_TEXCOORD7.w = 0.0;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat27 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat1.xyz = vec3(u_xlat27) * u_xlat1.xyz;
    vs_TEXCOORD8.xyz = u_xlat1.xyz;
    vs_TEXCOORD8.w = 0.0;
    u_xlat2.xyz = u_xlat1.yzx * u_xlat4.zxy;
    u_xlat1.xyz = u_xlat4.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
    u_xlat27 = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD9.xyz = vec3(u_xlat27) * u_xlat1.xyz;
    vs_TEXCOORD9.w = 0.0;
    u_xlat27 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat27 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat27;
    vs_TEXCOORD10.w = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat27;
    vs_TEXCOORD10.xyz = u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowPos[4];
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _DepthFoamMask_ST;
uniform 	mediump float _DepthFoamSpeed;
uniform 	mediump vec4 _DepthFoamColor;
uniform 	mediump float _DepthFoamExtent;
uniform 	mediump float _DepthFoamDistance;
uniform 	mediump float _DepthFoamSubdivision;
uniform 	mediump float _DepthFoamWidth;
uniform 	mediump float _DepthFoamPhaseScale;
uniform 	mediump float _DepthFoamCloseFadeOffset;
uniform 	mediump float _DepthFoamCloseFadeDistance;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _NormalMapScale;
uniform 	float _Normal01_U_Speed;
uniform 	float _Normal01_VSpeed;
uniform 	float _NormalMapBias;
uniform 	float _Normal02_U_Speed;
uniform 	float _Normal02_V_Speed;
uniform 	float _RefractionIntensity;
uniform 	float _OpacityByDepth;
uniform 	float _SpecularIntensity;
uniform 	vec3 _ES_MoonDirection;
uniform 	vec3 _ES_SunDirection;
uniform 	float _Gloss;
uniform 	float _ShoreTransparency;
uniform 	float _SpecularPower;
uniform 	vec4 _ShallowColor;
uniform 	float _ShoreFade;
uniform 	vec4 _DeepColor;
uniform 	float _DeepColorDepth;
uniform 	float _DeepColorFade;
uniform 	vec4 _DistortionIntensity;
uniform 	float _SSRDistortion;
uniform 	float _SSRDistortion_Shore;
uniform 	float _SSRIntensity;
uniform 	float _ReflectionIntensity;
uniform 	float _FresnelPower;
uniform 	float _ShoreReflectionFade;
uniform 	mediump float _ProjectUVScale;
uniform 	vec4 _ReflectionSkyCubeMap_HDR;
uniform lowp sampler2D _Normal01;
uniform lowp sampler2D _Normal02;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _SceneScaledBufferBeforTransParent;
uniform lowp samplerCube _ReflectionSkyCubeMap;
uniform lowp sampler2D _SSRTexture;
uniform lowp sampler2D _DepthFoamMask;
uniform lowp sampler2DShadow hlslcc_zcmp_CascadeShadowMapTexture;
uniform lowp sampler2D _CascadeShadowMapTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD8;
in highp vec4 vs_TEXCOORD9;
in highp vec4 vs_TEXCOORD10;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec4 u_xlatb0;
vec4 u_xlat1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
lowp vec4 u_xlat10_3;
vec4 u_xlat4;
vec3 u_xlat5;
bool u_xlatb5;
vec3 u_xlat6;
vec4 u_xlat7;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
vec3 u_xlat9;
lowp vec3 u_xlat10_9;
vec3 u_xlat10;
vec3 u_xlat11;
vec3 u_xlat12;
vec3 u_xlat13;
vec3 u_xlat14;
mediump float u_xlat16_15;
vec2 u_xlat17;
mediump vec3 u_xlat16_18;
vec3 u_xlat20;
mediump vec3 u_xlat16_20;
lowp float u_xlat10_20;
int u_xlati20;
uint u_xlatu20;
bool u_xlatb20;
float u_xlat21;
float u_xlat33;
vec2 u_xlat36;
mediump float u_xlat16_36;
lowp float u_xlat10_36;
bool u_xlatb36;
float u_xlat49;
mediump float u_xlat16_50;
float u_xlat52;
mediump float u_xlat16_52;
bool u_xlatb52;
float u_xlat53;
float u_xlat54;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD5.zx * vec2(vec2(_ProjectUVScale, _ProjectUVScale));
    u_xlat1.x = _Time.y * _Normal01_U_Speed + u_xlat0.y;
    u_xlat1.yz = _Time.yy * vec2(_Normal01_VSpeed, _Normal02_U_Speed) + u_xlat0.xy;
    u_xlat1.w = _Time.y * _Normal02_V_Speed + u_xlat0.x;
    u_xlat10_0.xyz = texture(_Normal01, u_xlat1.xy, _NormalMapBias).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_2.xy = u_xlat16_0.xy * vec2(_NormalMapScale);
    u_xlat10_1.xyz = texture(_Normal02, u_xlat1.zw, _NormalMapBias).xyz;
    u_xlat16_0.w = -1.0;
    u_xlat16_3.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.wwz;
    u_xlat16_3.xy = u_xlat16_3.xy * vec2(_NormalMapScale);
    u_xlat16_2.z = -1.0;
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
    u_xlat1.x = float(1.0) / vs_TEXCOORD4.w;
    u_xlat17.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat17.x = texture(_CameraDepthTexture, u_xlat17.xy).x;
    u_xlat17.x = _ZBufferParams.z * u_xlat17.x + _ZBufferParams.w;
    u_xlat17.x = float(1.0) / u_xlat17.x;
    u_xlat33 = vs_TEXCOORD10.w + 9.99999975e-05;
    u_xlat33 = (-u_xlat17.x) / u_xlat33;
    u_xlat33 = vs_TEXCOORD10.y * u_xlat33 + _WorldSpaceCameraPos.y;
    u_xlat33 = (-u_xlat33) + vs_TEXCOORD5.y;
    u_xlat4.xy = u_xlat16_2.xy * vec2(vec2(_RefractionIntensity, _RefractionIntensity));
    u_xlat1.x = u_xlat1.x * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.xw = u_xlat1.xx * u_xlat4.xy;
    u_xlat1.xw = u_xlat1.xw * vs_TEXCOORD4.ww;
    u_xlat17.x = u_xlat17.x + (-vs_TEXCOORD4.w);
#ifdef UNITY_ADRENO_ES3
    u_xlat17.x = min(max(u_xlat17.x, 0.0), 1.0);
#else
    u_xlat17.x = clamp(u_xlat17.x, 0.0, 1.0);
#endif
    u_xlat4.xy = u_xlat17.xx * u_xlat1.xw;
    u_xlat4.z = 0.0;
    u_xlat1.xyw = u_xlat4.xyz + vs_TEXCOORD4.xyw;
    u_xlat1.xy = u_xlat1.xy / u_xlat1.ww;
    u_xlat1.x = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat1.x = _ZBufferParams.z * u_xlat1.x + _ZBufferParams.w;
    u_xlat1.x = float(1.0) / u_xlat1.x;
    u_xlat1.x = u_xlat1.x + (-vs_TEXCOORD4.w);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.xyw = u_xlat1.xxx * u_xlat4.xyz + vs_TEXCOORD4.xyw;
    u_xlat4.xy = u_xlat1.xy / u_xlat1.ww;
    u_xlat49 = texture(_CameraDepthTexture, u_xlat4.xy).x;
    u_xlat49 = _ZBufferParams.z * u_xlat49 + _ZBufferParams.w;
    u_xlat49 = float(1.0) / u_xlat49;
    u_xlat49 = u_xlat49 + (-vs_TEXCOORD4.w);
    u_xlat4.x = 0.100000001 / _OpacityByDepth;
    u_xlat16_3.xz = u_xlat16_2.xy;
    u_xlat16_3.y = 1.0;
    u_xlat16_20.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
    u_xlat16_20.x = inversesqrt(u_xlat16_20.x);
    u_xlat16_20.xyz = u_xlat16_3.xyz * u_xlat16_20.xxx;
#ifdef UNITY_ADRENO_ES3
    u_xlatb5 = !!(0.0>=_ES_MoonDirection.y);
#else
    u_xlatb5 = 0.0>=_ES_MoonDirection.y;
#endif
    u_xlat5.xyz = (bool(u_xlatb5)) ? _ES_SunDirection.xyz : _ES_MoonDirection.xyz;
    u_xlat6.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat53 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat54 = inversesqrt(u_xlat53);
    u_xlat7.xyz = vec3(u_xlat54) * u_xlat6.xyz;
    u_xlat5.xyz = u_xlat6.xyz * vec3(u_xlat54) + u_xlat5.xyz;
    u_xlat6.x = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat5.xyz = u_xlat5.xyz * u_xlat6.xxx;
    u_xlat20.x = dot(u_xlat16_20.xyz, u_xlat5.xyz);
    u_xlat36.x = _Gloss * 128.0;
    u_xlat20.x = max(u_xlat20.x, 9.99999975e-05);
    u_xlat20.x = log2(u_xlat20.x);
    u_xlat20.x = u_xlat20.x * u_xlat36.x;
    u_xlat20.x = exp2(u_xlat20.x);
    u_xlat20.x = u_xlat20.x * _SpecularIntensity;
    u_xlat20.x = max(u_xlat20.x, 0.0);
    u_xlat20.x = min(u_xlat20.x, 16.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb36 = !!(_ES_MoonDirection.y>=9.99999975e-05);
#else
    u_xlatb36 = _ES_MoonDirection.y>=9.99999975e-05;
#endif
    u_xlat36.x = u_xlatb36 ? 1.0 : float(0.0);
    u_xlat52 = _ES_MoonDirection.y + -1.0;
    u_xlat36.x = u_xlat36.x * u_xlat52 + 1.0;
    u_xlat4.w = float(1.0) / _ShoreTransparency;
    u_xlat5.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat5.x = inversesqrt(u_xlat5.x);
    u_xlat5.xyz = u_xlat5.xxx * vs_TEXCOORD6.xyz;
    u_xlat5.x = dot(u_xlat7.xyz, u_xlat5.xyz);
    u_xlat5.x = (-u_xlat5.x) + 1.0;
    u_xlat5.x = max(u_xlat5.x, 9.99999975e-05);
    u_xlat5.x = log2(u_xlat5.x);
    u_xlat21 = u_xlat5.x * _SpecularPower;
    u_xlat21 = exp2(u_xlat21);
    u_xlat6.xyz = u_xlat36.xxx * _LightColor0.xyz;
    u_xlat6.xyz = u_xlat20.xxx * u_xlat6.xyz;
    u_xlat20.x = u_xlat49 + -1.0;
    u_xlat20.x = u_xlat4.w * u_xlat20.x;
    u_xlat20.x = u_xlat20.x * 0.100000001;
#ifdef UNITY_ADRENO_ES3
    u_xlat20.x = min(max(u_xlat20.x, 0.0), 1.0);
#else
    u_xlat20.x = clamp(u_xlat20.x, 0.0, 1.0);
#endif
    u_xlat6.xyz = u_xlat20.xxx * u_xlat6.xyz;
    u_xlat4.xy = vec2(u_xlat49) * u_xlat4.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.xy = min(max(u_xlat4.xy, 0.0), 1.0);
#else
    u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);
#endif
    u_xlat20.x = max(u_xlat4.y, 9.99999975e-05);
    u_xlat20.x = log2(u_xlat20.x);
    u_xlat20.x = u_xlat20.x * _ShoreFade;
    u_xlat20.x = exp2(u_xlat20.x);
    u_xlat8.xyz = _ShallowColor.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat8.xyz = u_xlat20.xxx * u_xlat8.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat1.xy = u_xlat1.xy / vs_TEXCOORD4.ww;
    u_xlat10_9.xyz = texture(_SceneScaledBufferBeforTransParent, u_xlat1.xy).xyz;
    u_xlat10.xyz = u_xlat8.xyz * u_xlat10_9.xyz;
    u_xlat1.x = 0.100000001 / _DeepColorDepth;
    u_xlat1.x = u_xlat1.x * u_xlat49;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.x = max(u_xlat1.x, 9.99999975e-05);
    u_xlat1.x = log2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _DeepColorFade;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat11.xyz = (-u_xlat8.xyz) * u_xlat10_9.xyz + _DeepColor.xyz;
    u_xlat11.xyz = u_xlat1.xxx * u_xlat11.xyz + u_xlat10.xyz;
    u_xlat12.xyz = u_xlat16_2.xyz * _DistortionIntensity.xyz;
    u_xlat13.x = vs_TEXCOORD8.x;
    u_xlat13.y = vs_TEXCOORD9.x;
    u_xlat13.z = vs_TEXCOORD6.x;
    u_xlat13.x = dot(u_xlat13.xyz, u_xlat12.xyz);
    u_xlat14.x = vs_TEXCOORD8.y;
    u_xlat14.y = vs_TEXCOORD9.y;
    u_xlat14.z = vs_TEXCOORD6.y;
    u_xlat13.y = dot(u_xlat14.xyz, u_xlat12.xyz);
    u_xlat14.x = vs_TEXCOORD8.z;
    u_xlat14.y = vs_TEXCOORD9.z;
    u_xlat14.z = vs_TEXCOORD6.z;
    u_xlat13.z = dot(u_xlat14.xyz, u_xlat12.xyz);
    u_xlat1.x = dot(u_xlat13.xyz, u_xlat13.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat13.xyz = u_xlat1.xxx * u_xlat13.xyz;
    u_xlat1.x = dot((-u_xlat7.xyz), u_xlat13.xyz);
    u_xlat1.x = u_xlat1.x + u_xlat1.x;
    u_xlat7.xyz = u_xlat13.xyz * (-u_xlat1.xxx) + (-u_xlat7.xyz);
    u_xlat10_0 = textureLod(_ReflectionSkyCubeMap, u_xlat7.xyz, 0.0);
    u_xlat16_2.x = u_xlat10_0.w + -1.0;
    u_xlat16_2.x = _ReflectionSkyCubeMap_HDR.w * u_xlat16_2.x + 1.0;
    u_xlat16_2.x = log2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * _ReflectionSkyCubeMap_HDR.y;
    u_xlat16_2.x = exp2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * _ReflectionSkyCubeMap_HDR.x;
    u_xlat16_18.xyz = u_xlat10_0.xyz * u_xlat16_2.xxx;
    u_xlat1.xy = u_xlat12.xy * vec2(_SSRDistortion);
    u_xlat36.x = float(1.0) / _SSRDistortion_Shore;
    u_xlat36.x = u_xlat49 * u_xlat36.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat36.x = min(max(u_xlat36.x, 0.0), 1.0);
#else
    u_xlat36.x = clamp(u_xlat36.x, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat1.xy * u_xlat36.xx;
    u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD4.ww + vs_TEXCOORD4.xy;
    u_xlat1.xy = u_xlat1.xy / vs_TEXCOORD4.ww;
    u_xlat10_3 = texture(_SSRTexture, u_xlat1.xy).wxyz;
    u_xlat16_7.xyz = (-u_xlat16_2.xxx) * u_xlat10_0.xyz + u_xlat10_3.yzw;
    u_xlat7.xyz = u_xlat16_7.xyz * vec3(vec3(_SSRIntensity, _SSRIntensity, _SSRIntensity));
    u_xlat16_3.x = u_xlat10_3.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat7.xyz = u_xlat16_3.xxx * u_xlat7.xyz + u_xlat16_18.xyz;
    u_xlat1.x = u_xlat5.x * _FresnelPower;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _ReflectionIntensity;
    u_xlat17.x = float(1.0) / _ShoreReflectionFade;
    u_xlat17.x = u_xlat17.x * u_xlat49;
#ifdef UNITY_ADRENO_ES3
    u_xlat17.x = min(max(u_xlat17.x, 0.0), 1.0);
#else
    u_xlat17.x = clamp(u_xlat17.x, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat17.x * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat7.xyz = (-u_xlat11.xyz) + u_xlat7.xyz;
    u_xlat1.xyw = u_xlat1.xxx * u_xlat7.xyz + u_xlat11.xyz;
    u_xlat1.xyw = (-u_xlat8.xyz) * u_xlat10_9.xyz + u_xlat1.xyw;
    u_xlat1.xyw = u_xlat20.xxx * u_xlat1.xyw + u_xlat10.xyz;
    u_xlat20.x = (-vs_TEXCOORD5.y) * _WorldSpaceLightPos0.w + _WorldSpaceLightPos0.y;
    u_xlat16_2.x = max(u_xlat20.x, 0.0);
    u_xlat20.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowSplitSpheres[0].xyz);
    u_xlat7.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowSplitSpheres[1].xyz);
    u_xlat8.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowSplitSpheres[2].xyz);
    u_xlat9.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowSplitSpheres[3].xyz);
    u_xlat0.x = dot(u_xlat20.xyz, u_xlat20.xyz);
    u_xlat0.y = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat0.z = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat0.w = dot(u_xlat9.xyz, u_xlat9.xyz);
    u_xlatb0 = lessThan(u_xlat0, unity_ShadowSplitSqRadii);
    u_xlat0 = mix(vec4(0.0, 0.0, 0.0, 0.0), vec4(1.0, 1.0, 1.0, 1.0), vec4(u_xlatb0));
    u_xlat16_18.x = u_xlat0.y + u_xlat0.x;
    u_xlat16_18.y = u_xlat0.z + u_xlat16_18.x;
    u_xlat3.x = -0.0;
    u_xlat3.y = (-u_xlat0.x);
    u_xlat3.zw = (-u_xlat16_18.xy);
    u_xlat0 = u_xlat0 + u_xlat3;
    u_xlat0 = max(u_xlat0, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat16_18.x = dot(u_xlat0, vec4(1.0, 1.0, 1.0, 1.0));
#ifdef UNITY_ADRENO_ES3
    u_xlatb20 = !!(u_xlat16_18.x>=0.5);
#else
    u_xlatb20 = u_xlat16_18.x>=0.5;
#endif
    if(u_xlatb20){
        u_xlat20.x = dot(u_xlat0.yzw, vec3(1.0, 2.0, 3.0));
        u_xlat20.x = min(u_xlat20.x, 3.0);
        u_xlatu20 = uint(u_xlat20.x);
        u_xlat7.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowPos[int(u_xlatu20)].xyz);
        u_xlati20 = int(u_xlatu20) << 2;
        u_xlat8.xyz = u_xlat7.yyy * hlslcc_mtx4x4unity_WorldToShadow[(u_xlati20 + 1)].xyz;
        u_xlat7.xyw = hlslcc_mtx4x4unity_WorldToShadow[u_xlati20].xyz * u_xlat7.xxx + u_xlat8.xyz;
        u_xlat7.xyz = hlslcc_mtx4x4unity_WorldToShadow[(u_xlati20 + 2)].xyz * u_xlat7.zzz + u_xlat7.xyw;
        u_xlat20.xyz = u_xlat7.xyz + hlslcc_mtx4x4unity_WorldToShadow[(u_xlati20 + 3)].xyz;
        vec3 txVec0 = vec3(u_xlat20.xy,u_xlat20.z);
        u_xlat10_20 = textureLod(hlslcc_zcmp_CascadeShadowMapTexture, txVec0, 0.0);
        u_xlat16_36 = (-_LightShadowData.x) + 1.0;
        u_xlat20.x = u_xlat10_20 * u_xlat16_36 + _LightShadowData.x;
    } else {
        u_xlat20.x = 1.0;
    //ENDIF
    }
    u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;
    u_xlat20.xyz = u_xlat16_2.xyz * u_xlat20.xxx + vs_TEXCOORD1.xyz;
    u_xlat16_2.xyz = u_xlat20.xyz * vec3(0.300000012, 0.300000012, 0.300000012) + vec3(0.699999988, 0.699999988, 0.699999988);
    u_xlat20.x = sqrt(u_xlat53);
    u_xlat16_50 = u_xlat20.x + (-_DepthFoamCloseFadeOffset);
    u_xlat16_50 = u_xlat16_50 / _DepthFoamCloseFadeDistance;
    u_xlat16_15 = vs_COLOR0.x * _DepthFoamExtent;
    u_xlat33 = max(u_xlat33, 0.0);
    u_xlat33 = min(u_xlat16_15, u_xlat33);
    u_xlat16_15 = _DepthFoamExtent * vs_COLOR0.x + 9.99999975e-05;
    u_xlat33 = u_xlat33 / u_xlat16_15;
    u_xlat33 = (-u_xlat33) + 1.0;
    u_xlat36.xy = vec2(_Time.y * _DepthFoamMask_ST.z, _Time.y * _DepthFoamMask_ST.w);
    u_xlat36.xy = fract(u_xlat36.xy);
    u_xlat36.xy = _DepthFoamMask_ST.xy * vs_TEXCOORD5.xz + u_xlat36.xy;
    u_xlat10_36 = texture(_DepthFoamMask, u_xlat36.xy, -1.0).x;
    u_xlat52 = vs_TEXCOORD5.z + vs_TEXCOORD5.x;
    u_xlat52 = u_xlat52 * _DepthFoamPhaseScale;
    u_xlat52 = _DepthFoamSpeed * _Time.y + u_xlat52;
    u_xlat5.x = (-u_xlat33) + 1.0;
    u_xlat16_15 = _DepthFoamSubdivision * u_xlat33 + u_xlat52;
    u_xlat16_15 = sin(u_xlat16_15);
    u_xlat16_15 = _DepthFoamWidth * u_xlat33 + u_xlat16_15;
    u_xlat16_52 = u_xlat10_36 * 2.0 + -1.0;
    u_xlat52 = u_xlat16_52 + u_xlat16_15;
#ifdef UNITY_ADRENO_ES3
    u_xlatb52 = !!(u_xlat52>=u_xlat5.x);
#else
    u_xlatb52 = u_xlat52>=u_xlat5.x;
#endif
    u_xlat52 = u_xlatb52 ? 1.0 : float(0.0);
    u_xlat36.x = u_xlat52 * u_xlat10_36;
    u_xlat16_15 = _DepthFoamDistance + 9.99999975e-05;
    u_xlat16_15 = u_xlat20.x / u_xlat16_15;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_15 = min(max(u_xlat16_15, 0.0), 1.0);
#else
    u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);
#endif
    u_xlat16_20.x = (-u_xlat16_15) + 1.0;
    u_xlat16_15 = vs_COLOR0.y * _DepthFoamColor.w;
    u_xlat16_50 = u_xlat16_50 * u_xlat16_15;
    u_xlat16_50 = u_xlat36.x * u_xlat16_50;
    u_xlat16_50 = u_xlat33 * u_xlat16_50;
    u_xlat16_50 = u_xlat16_20.x * u_xlat16_50;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_50 = min(max(u_xlat16_50, 0.0), 1.0);
#else
    u_xlat16_50 = clamp(u_xlat16_50, 0.0, 1.0);
#endif
    u_xlat16_2.xyz = _DepthFoamColor.xyz * u_xlat16_2.xyz + (-u_xlat1.xyw);
    u_xlat16_2.xyz = vec3(u_xlat16_50) * u_xlat16_2.xyz + u_xlat1.xyw;
    u_xlat0.xyz = u_xlat6.xyz * vec3(u_xlat21) + u_xlat16_2.xyz;
    u_xlat0.w = u_xlat4.x * vs_COLOR0.w;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "MSAA_INTERPOLATION" "MHY_SHADER_MIDDLE" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
uniform 	vec4 hlslcc_mtx4x4_mhyJitteredVP[4];
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
out highp vec4 vs_TEXCOORD9;
out highp vec4 vs_TEXCOORD10;
float u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec4 u_xlat8;
vec3 u_xlat9;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat9.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4_mhyJitteredVP[1];
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[3] * u_xlat2.wwww + u_xlat1;
    u_xlat3.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    u_xlat3.xyw = u_xlat1.xyw;
    gl_Position = u_xlat3;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD1.w = 1.0;
    u_xlat4.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat4.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat4.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat1.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
    u_xlat16_5.x = u_xlat4.y * u_xlat4.y;
    u_xlat16_5.x = u_xlat4.x * u_xlat4.x + (-u_xlat16_5.x);
    u_xlat16_6 = u_xlat4.yzzx * u_xlat4.xyzz;
    u_xlat16_7.x = dot(unity_SHBr, u_xlat16_6);
    u_xlat16_7.y = dot(unity_SHBg, u_xlat16_6);
    u_xlat16_7.z = dot(unity_SHBb, u_xlat16_6);
    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_7.xyz;
    u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat4.w = 1.0;
    u_xlat16_6.x = dot(unity_SHAr, u_xlat4);
    u_xlat16_6.y = dot(unity_SHAg, u_xlat4);
    u_xlat16_6.z = dot(unity_SHAb, u_xlat4);
    u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_6.xyz;
    vs_TEXCOORD1.xyz = u_xlat16_5.xyz;
    u_xlat1.x = u_xlat3.y * _ProjectionParams.x;
    u_xlat8.w = u_xlat1.x * 0.5;
    u_xlat8.xz = u_xlat3.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.z = u_xlat1.z;
    u_xlat3.xy = u_xlat8.zz + u_xlat8.xw;
    vs_TEXCOORD2 = u_xlat3;
    vs_TEXCOORD4.xyw = u_xlat3.xyw;
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD3.w = 0.0;
    u_xlat1.x = u_xlat2.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat2.x + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat2.z + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat2.w + u_xlat1.x;
    vs_TEXCOORD3.z = (-u_xlat1.x);
    vs_TEXCOORD5.w = 0.0;
    vs_TEXCOORD5.xyz = u_xlat9.xyz;
    u_xlat9.xyz = (-u_xlat9.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD6.w = 0.0;
    vs_TEXCOORD6.xyz = u_xlat4.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].www + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * in_POSITION0.yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.zzz + u_xlat1.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.www + u_xlat1.xyz;
    vs_TEXCOORD7.xyz = u_xlat1.xyz * vec3(-1.0, -1.0, 1.0);
    vs_TEXCOORD7.w = 0.0;
    u_xlat1.xyz = in_TANGENT0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat0 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0 = inversesqrt(u_xlat0);
    u_xlat1.xyz = vec3(u_xlat0) * u_xlat1.xyz;
    vs_TEXCOORD8.xyz = u_xlat1.xyz;
    vs_TEXCOORD8.w = 0.0;
    u_xlat2.xyz = u_xlat1.yzx * u_xlat4.zxy;
    u_xlat1.xyz = u_xlat4.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
    u_xlat0 = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD9.xyz = vec3(u_xlat0) * u_xlat1.xyz;
    vs_TEXCOORD9.w = 0.0;
    u_xlat0 = u_xlat9.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat9.x + u_xlat0;
    vs_TEXCOORD10.w = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat9.z + u_xlat0;
    vs_TEXCOORD10.xyz = u_xlat9.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowPos[4];
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _DepthFoamMask_ST;
uniform 	mediump float _DepthFoamSpeed;
uniform 	mediump vec4 _DepthFoamColor;
uniform 	mediump float _DepthFoamExtent;
uniform 	mediump float _DepthFoamDistance;
uniform 	mediump float _DepthFoamSubdivision;
uniform 	mediump float _DepthFoamWidth;
uniform 	mediump float _DepthFoamPhaseScale;
uniform 	mediump float _DepthFoamCloseFadeOffset;
uniform 	mediump float _DepthFoamCloseFadeDistance;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _NormalMapScale;
uniform 	float _Normal01_U_Speed;
uniform 	float _Normal01_VSpeed;
uniform 	float _NormalMapBias;
uniform 	float _Normal02_U_Speed;
uniform 	float _Normal02_V_Speed;
uniform 	float _RefractionIntensity;
uniform 	float _OpacityByDepth;
uniform 	float _SpecularIntensity;
uniform 	vec3 _ES_MoonDirection;
uniform 	vec3 _ES_SunDirection;
uniform 	float _Gloss;
uniform 	float _ShoreTransparency;
uniform 	float _SpecularPower;
uniform 	vec4 _ShallowColor;
uniform 	float _ShoreFade;
uniform 	vec4 _DeepColor;
uniform 	float _DeepColorDepth;
uniform 	float _DeepColorFade;
uniform 	vec4 _DistortionIntensity;
uniform 	float _SSRDistortion;
uniform 	float _SSRDistortion_Shore;
uniform 	float _SSRIntensity;
uniform 	float _ReflectionIntensity;
uniform 	float _FresnelPower;
uniform 	float _ShoreReflectionFade;
uniform 	mediump float _ProjectUVScale;
uniform 	vec4 _ReflectionSkyCubeMap_HDR;
uniform lowp sampler2D _Normal01;
uniform lowp sampler2D _Normal02;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _SceneScaledBufferBeforTransParent;
uniform lowp samplerCube _ReflectionSkyCubeMap;
uniform lowp sampler2D _SSRTexture;
uniform lowp sampler2D _DepthFoamMask;
uniform lowp sampler2DShadow hlslcc_zcmp_CascadeShadowMapTexture;
uniform lowp sampler2D _CascadeShadowMapTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD8;
in highp vec4 vs_TEXCOORD9;
in highp vec4 vs_TEXCOORD10;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec4 u_xlatb0;
vec4 u_xlat1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
lowp vec4 u_xlat10_3;
vec4 u_xlat4;
vec3 u_xlat5;
bool u_xlatb5;
vec3 u_xlat6;
vec4 u_xlat7;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
vec3 u_xlat9;
lowp vec3 u_xlat10_9;
vec3 u_xlat10;
vec3 u_xlat11;
vec3 u_xlat12;
vec3 u_xlat13;
vec3 u_xlat14;
mediump float u_xlat16_15;
vec2 u_xlat17;
mediump vec3 u_xlat16_18;
vec3 u_xlat20;
mediump vec3 u_xlat16_20;
lowp float u_xlat10_20;
int u_xlati20;
uint u_xlatu20;
bool u_xlatb20;
float u_xlat21;
float u_xlat33;
vec2 u_xlat36;
mediump float u_xlat16_36;
lowp float u_xlat10_36;
bool u_xlatb36;
float u_xlat49;
mediump float u_xlat16_50;
float u_xlat52;
mediump float u_xlat16_52;
bool u_xlatb52;
float u_xlat53;
float u_xlat54;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD5.zx * vec2(vec2(_ProjectUVScale, _ProjectUVScale));
    u_xlat1.x = _Time.y * _Normal01_U_Speed + u_xlat0.y;
    u_xlat1.yz = _Time.yy * vec2(_Normal01_VSpeed, _Normal02_U_Speed) + u_xlat0.xy;
    u_xlat1.w = _Time.y * _Normal02_V_Speed + u_xlat0.x;
    u_xlat10_0.xyz = texture(_Normal01, u_xlat1.xy, _NormalMapBias).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_2.xy = u_xlat16_0.xy * vec2(_NormalMapScale);
    u_xlat10_1.xyz = texture(_Normal02, u_xlat1.zw, _NormalMapBias).xyz;
    u_xlat16_0.w = -1.0;
    u_xlat16_3.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.wwz;
    u_xlat16_3.xy = u_xlat16_3.xy * vec2(_NormalMapScale);
    u_xlat16_2.z = -1.0;
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
    u_xlat1.x = float(1.0) / vs_TEXCOORD4.w;
    u_xlat17.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat17.x = texture(_CameraDepthTexture, u_xlat17.xy).x;
    u_xlat17.x = _ZBufferParams.z * u_xlat17.x + _ZBufferParams.w;
    u_xlat17.x = float(1.0) / u_xlat17.x;
    u_xlat33 = vs_TEXCOORD10.w + 9.99999975e-05;
    u_xlat33 = (-u_xlat17.x) / u_xlat33;
    u_xlat33 = vs_TEXCOORD10.y * u_xlat33 + _WorldSpaceCameraPos.y;
    u_xlat33 = (-u_xlat33) + vs_TEXCOORD5.y;
    u_xlat4.xy = u_xlat16_2.xy * vec2(vec2(_RefractionIntensity, _RefractionIntensity));
    u_xlat1.x = u_xlat1.x * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.xw = u_xlat1.xx * u_xlat4.xy;
    u_xlat1.xw = u_xlat1.xw * vs_TEXCOORD4.ww;
    u_xlat17.x = u_xlat17.x + (-vs_TEXCOORD4.w);
#ifdef UNITY_ADRENO_ES3
    u_xlat17.x = min(max(u_xlat17.x, 0.0), 1.0);
#else
    u_xlat17.x = clamp(u_xlat17.x, 0.0, 1.0);
#endif
    u_xlat4.xy = u_xlat17.xx * u_xlat1.xw;
    u_xlat4.z = 0.0;
    u_xlat1.xyw = u_xlat4.xyz + vs_TEXCOORD4.xyw;
    u_xlat1.xy = u_xlat1.xy / u_xlat1.ww;
    u_xlat1.x = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat1.x = _ZBufferParams.z * u_xlat1.x + _ZBufferParams.w;
    u_xlat1.x = float(1.0) / u_xlat1.x;
    u_xlat1.x = u_xlat1.x + (-vs_TEXCOORD4.w);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.xyw = u_xlat1.xxx * u_xlat4.xyz + vs_TEXCOORD4.xyw;
    u_xlat4.xy = u_xlat1.xy / u_xlat1.ww;
    u_xlat49 = texture(_CameraDepthTexture, u_xlat4.xy).x;
    u_xlat49 = _ZBufferParams.z * u_xlat49 + _ZBufferParams.w;
    u_xlat49 = float(1.0) / u_xlat49;
    u_xlat49 = u_xlat49 + (-vs_TEXCOORD4.w);
    u_xlat4.x = 0.100000001 / _OpacityByDepth;
    u_xlat16_3.xz = u_xlat16_2.xy;
    u_xlat16_3.y = 1.0;
    u_xlat16_20.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
    u_xlat16_20.x = inversesqrt(u_xlat16_20.x);
    u_xlat16_20.xyz = u_xlat16_3.xyz * u_xlat16_20.xxx;
#ifdef UNITY_ADRENO_ES3
    u_xlatb5 = !!(0.0>=_ES_MoonDirection.y);
#else
    u_xlatb5 = 0.0>=_ES_MoonDirection.y;
#endif
    u_xlat5.xyz = (bool(u_xlatb5)) ? _ES_SunDirection.xyz : _ES_MoonDirection.xyz;
    u_xlat6.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat53 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat54 = inversesqrt(u_xlat53);
    u_xlat7.xyz = vec3(u_xlat54) * u_xlat6.xyz;
    u_xlat5.xyz = u_xlat6.xyz * vec3(u_xlat54) + u_xlat5.xyz;
    u_xlat6.x = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat5.xyz = u_xlat5.xyz * u_xlat6.xxx;
    u_xlat20.x = dot(u_xlat16_20.xyz, u_xlat5.xyz);
    u_xlat36.x = _Gloss * 128.0;
    u_xlat20.x = max(u_xlat20.x, 9.99999975e-05);
    u_xlat20.x = log2(u_xlat20.x);
    u_xlat20.x = u_xlat20.x * u_xlat36.x;
    u_xlat20.x = exp2(u_xlat20.x);
    u_xlat20.x = u_xlat20.x * _SpecularIntensity;
    u_xlat20.x = max(u_xlat20.x, 0.0);
    u_xlat20.x = min(u_xlat20.x, 16.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb36 = !!(_ES_MoonDirection.y>=9.99999975e-05);
#else
    u_xlatb36 = _ES_MoonDirection.y>=9.99999975e-05;
#endif
    u_xlat36.x = u_xlatb36 ? 1.0 : float(0.0);
    u_xlat52 = _ES_MoonDirection.y + -1.0;
    u_xlat36.x = u_xlat36.x * u_xlat52 + 1.0;
    u_xlat4.w = float(1.0) / _ShoreTransparency;
    u_xlat5.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat5.x = inversesqrt(u_xlat5.x);
    u_xlat5.xyz = u_xlat5.xxx * vs_TEXCOORD6.xyz;
    u_xlat5.x = dot(u_xlat7.xyz, u_xlat5.xyz);
    u_xlat5.x = (-u_xlat5.x) + 1.0;
    u_xlat5.x = max(u_xlat5.x, 9.99999975e-05);
    u_xlat5.x = log2(u_xlat5.x);
    u_xlat21 = u_xlat5.x * _SpecularPower;
    u_xlat21 = exp2(u_xlat21);
    u_xlat6.xyz = u_xlat36.xxx * _LightColor0.xyz;
    u_xlat6.xyz = u_xlat20.xxx * u_xlat6.xyz;
    u_xlat20.x = u_xlat49 + -1.0;
    u_xlat20.x = u_xlat4.w * u_xlat20.x;
    u_xlat20.x = u_xlat20.x * 0.100000001;
#ifdef UNITY_ADRENO_ES3
    u_xlat20.x = min(max(u_xlat20.x, 0.0), 1.0);
#else
    u_xlat20.x = clamp(u_xlat20.x, 0.0, 1.0);
#endif
    u_xlat6.xyz = u_xlat20.xxx * u_xlat6.xyz;
    u_xlat4.xy = vec2(u_xlat49) * u_xlat4.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.xy = min(max(u_xlat4.xy, 0.0), 1.0);
#else
    u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);
#endif
    u_xlat20.x = max(u_xlat4.y, 9.99999975e-05);
    u_xlat20.x = log2(u_xlat20.x);
    u_xlat20.x = u_xlat20.x * _ShoreFade;
    u_xlat20.x = exp2(u_xlat20.x);
    u_xlat8.xyz = _ShallowColor.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat8.xyz = u_xlat20.xxx * u_xlat8.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat1.xy = u_xlat1.xy / vs_TEXCOORD4.ww;
    u_xlat10_9.xyz = texture(_SceneScaledBufferBeforTransParent, u_xlat1.xy).xyz;
    u_xlat10.xyz = u_xlat8.xyz * u_xlat10_9.xyz;
    u_xlat1.x = 0.100000001 / _DeepColorDepth;
    u_xlat1.x = u_xlat1.x * u_xlat49;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.x = max(u_xlat1.x, 9.99999975e-05);
    u_xlat1.x = log2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _DeepColorFade;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat11.xyz = (-u_xlat8.xyz) * u_xlat10_9.xyz + _DeepColor.xyz;
    u_xlat11.xyz = u_xlat1.xxx * u_xlat11.xyz + u_xlat10.xyz;
    u_xlat12.xyz = u_xlat16_2.xyz * _DistortionIntensity.xyz;
    u_xlat13.x = vs_TEXCOORD8.x;
    u_xlat13.y = vs_TEXCOORD9.x;
    u_xlat13.z = vs_TEXCOORD6.x;
    u_xlat13.x = dot(u_xlat13.xyz, u_xlat12.xyz);
    u_xlat14.x = vs_TEXCOORD8.y;
    u_xlat14.y = vs_TEXCOORD9.y;
    u_xlat14.z = vs_TEXCOORD6.y;
    u_xlat13.y = dot(u_xlat14.xyz, u_xlat12.xyz);
    u_xlat14.x = vs_TEXCOORD8.z;
    u_xlat14.y = vs_TEXCOORD9.z;
    u_xlat14.z = vs_TEXCOORD6.z;
    u_xlat13.z = dot(u_xlat14.xyz, u_xlat12.xyz);
    u_xlat1.x = dot(u_xlat13.xyz, u_xlat13.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat13.xyz = u_xlat1.xxx * u_xlat13.xyz;
    u_xlat1.x = dot((-u_xlat7.xyz), u_xlat13.xyz);
    u_xlat1.x = u_xlat1.x + u_xlat1.x;
    u_xlat7.xyz = u_xlat13.xyz * (-u_xlat1.xxx) + (-u_xlat7.xyz);
    u_xlat10_0 = textureLod(_ReflectionSkyCubeMap, u_xlat7.xyz, 0.0);
    u_xlat16_2.x = u_xlat10_0.w + -1.0;
    u_xlat16_2.x = _ReflectionSkyCubeMap_HDR.w * u_xlat16_2.x + 1.0;
    u_xlat16_2.x = log2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * _ReflectionSkyCubeMap_HDR.y;
    u_xlat16_2.x = exp2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * _ReflectionSkyCubeMap_HDR.x;
    u_xlat16_18.xyz = u_xlat10_0.xyz * u_xlat16_2.xxx;
    u_xlat1.xy = u_xlat12.xy * vec2(_SSRDistortion);
    u_xlat36.x = float(1.0) / _SSRDistortion_Shore;
    u_xlat36.x = u_xlat49 * u_xlat36.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat36.x = min(max(u_xlat36.x, 0.0), 1.0);
#else
    u_xlat36.x = clamp(u_xlat36.x, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat1.xy * u_xlat36.xx;
    u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD4.ww + vs_TEXCOORD4.xy;
    u_xlat1.xy = u_xlat1.xy / vs_TEXCOORD4.ww;
    u_xlat10_3 = texture(_SSRTexture, u_xlat1.xy).wxyz;
    u_xlat16_7.xyz = (-u_xlat16_2.xxx) * u_xlat10_0.xyz + u_xlat10_3.yzw;
    u_xlat7.xyz = u_xlat16_7.xyz * vec3(vec3(_SSRIntensity, _SSRIntensity, _SSRIntensity));
    u_xlat16_3.x = u_xlat10_3.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat7.xyz = u_xlat16_3.xxx * u_xlat7.xyz + u_xlat16_18.xyz;
    u_xlat1.x = u_xlat5.x * _FresnelPower;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _ReflectionIntensity;
    u_xlat17.x = float(1.0) / _ShoreReflectionFade;
    u_xlat17.x = u_xlat17.x * u_xlat49;
#ifdef UNITY_ADRENO_ES3
    u_xlat17.x = min(max(u_xlat17.x, 0.0), 1.0);
#else
    u_xlat17.x = clamp(u_xlat17.x, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat17.x * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat7.xyz = (-u_xlat11.xyz) + u_xlat7.xyz;
    u_xlat1.xyw = u_xlat1.xxx * u_xlat7.xyz + u_xlat11.xyz;
    u_xlat1.xyw = (-u_xlat8.xyz) * u_xlat10_9.xyz + u_xlat1.xyw;
    u_xlat1.xyw = u_xlat20.xxx * u_xlat1.xyw + u_xlat10.xyz;
    u_xlat20.x = (-vs_TEXCOORD5.y) * _WorldSpaceLightPos0.w + _WorldSpaceLightPos0.y;
    u_xlat16_2.x = max(u_xlat20.x, 0.0);
    u_xlat20.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowSplitSpheres[0].xyz);
    u_xlat7.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowSplitSpheres[1].xyz);
    u_xlat8.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowSplitSpheres[2].xyz);
    u_xlat9.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowSplitSpheres[3].xyz);
    u_xlat0.x = dot(u_xlat20.xyz, u_xlat20.xyz);
    u_xlat0.y = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat0.z = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat0.w = dot(u_xlat9.xyz, u_xlat9.xyz);
    u_xlatb0 = lessThan(u_xlat0, unity_ShadowSplitSqRadii);
    u_xlat0 = mix(vec4(0.0, 0.0, 0.0, 0.0), vec4(1.0, 1.0, 1.0, 1.0), vec4(u_xlatb0));
    u_xlat16_18.x = u_xlat0.y + u_xlat0.x;
    u_xlat16_18.y = u_xlat0.z + u_xlat16_18.x;
    u_xlat3.x = -0.0;
    u_xlat3.y = (-u_xlat0.x);
    u_xlat3.zw = (-u_xlat16_18.xy);
    u_xlat0 = u_xlat0 + u_xlat3;
    u_xlat0 = max(u_xlat0, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat16_18.x = dot(u_xlat0, vec4(1.0, 1.0, 1.0, 1.0));
#ifdef UNITY_ADRENO_ES3
    u_xlatb20 = !!(u_xlat16_18.x>=0.5);
#else
    u_xlatb20 = u_xlat16_18.x>=0.5;
#endif
    if(u_xlatb20){
        u_xlat20.x = dot(u_xlat0.yzw, vec3(1.0, 2.0, 3.0));
        u_xlat20.x = min(u_xlat20.x, 3.0);
        u_xlatu20 = uint(u_xlat20.x);
        u_xlat7.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowPos[int(u_xlatu20)].xyz);
        u_xlati20 = int(u_xlatu20) << 2;
        u_xlat8.xyz = u_xlat7.yyy * hlslcc_mtx4x4unity_WorldToShadow[(u_xlati20 + 1)].xyz;
        u_xlat7.xyw = hlslcc_mtx4x4unity_WorldToShadow[u_xlati20].xyz * u_xlat7.xxx + u_xlat8.xyz;
        u_xlat7.xyz = hlslcc_mtx4x4unity_WorldToShadow[(u_xlati20 + 2)].xyz * u_xlat7.zzz + u_xlat7.xyw;
        u_xlat20.xyz = u_xlat7.xyz + hlslcc_mtx4x4unity_WorldToShadow[(u_xlati20 + 3)].xyz;
        vec3 txVec0 = vec3(u_xlat20.xy,u_xlat20.z);
        u_xlat10_20 = textureLod(hlslcc_zcmp_CascadeShadowMapTexture, txVec0, 0.0);
        u_xlat16_36 = (-_LightShadowData.x) + 1.0;
        u_xlat20.x = u_xlat10_20 * u_xlat16_36 + _LightShadowData.x;
    } else {
        u_xlat20.x = 1.0;
    //ENDIF
    }
    u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;
    u_xlat20.xyz = u_xlat16_2.xyz * u_xlat20.xxx + vs_TEXCOORD1.xyz;
    u_xlat16_2.xyz = u_xlat20.xyz * vec3(0.300000012, 0.300000012, 0.300000012) + vec3(0.699999988, 0.699999988, 0.699999988);
    u_xlat20.x = sqrt(u_xlat53);
    u_xlat16_50 = u_xlat20.x + (-_DepthFoamCloseFadeOffset);
    u_xlat16_50 = u_xlat16_50 / _DepthFoamCloseFadeDistance;
    u_xlat16_15 = vs_COLOR0.x * _DepthFoamExtent;
    u_xlat33 = max(u_xlat33, 0.0);
    u_xlat33 = min(u_xlat16_15, u_xlat33);
    u_xlat16_15 = _DepthFoamExtent * vs_COLOR0.x + 9.99999975e-05;
    u_xlat33 = u_xlat33 / u_xlat16_15;
    u_xlat33 = (-u_xlat33) + 1.0;
    u_xlat36.xy = vec2(_Time.y * _DepthFoamMask_ST.z, _Time.y * _DepthFoamMask_ST.w);
    u_xlat36.xy = fract(u_xlat36.xy);
    u_xlat36.xy = _DepthFoamMask_ST.xy * vs_TEXCOORD5.xz + u_xlat36.xy;
    u_xlat10_36 = texture(_DepthFoamMask, u_xlat36.xy, -1.0).x;
    u_xlat52 = vs_TEXCOORD5.z + vs_TEXCOORD5.x;
    u_xlat52 = u_xlat52 * _DepthFoamPhaseScale;
    u_xlat52 = _DepthFoamSpeed * _Time.y + u_xlat52;
    u_xlat5.x = (-u_xlat33) + 1.0;
    u_xlat16_15 = _DepthFoamSubdivision * u_xlat33 + u_xlat52;
    u_xlat16_15 = sin(u_xlat16_15);
    u_xlat16_15 = _DepthFoamWidth * u_xlat33 + u_xlat16_15;
    u_xlat16_52 = u_xlat10_36 * 2.0 + -1.0;
    u_xlat52 = u_xlat16_52 + u_xlat16_15;
#ifdef UNITY_ADRENO_ES3
    u_xlatb52 = !!(u_xlat52>=u_xlat5.x);
#else
    u_xlatb52 = u_xlat52>=u_xlat5.x;
#endif
    u_xlat52 = u_xlatb52 ? 1.0 : float(0.0);
    u_xlat36.x = u_xlat52 * u_xlat10_36;
    u_xlat16_15 = _DepthFoamDistance + 9.99999975e-05;
    u_xlat16_15 = u_xlat20.x / u_xlat16_15;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_15 = min(max(u_xlat16_15, 0.0), 1.0);
#else
    u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);
#endif
    u_xlat16_20.x = (-u_xlat16_15) + 1.0;
    u_xlat16_15 = vs_COLOR0.y * _DepthFoamColor.w;
    u_xlat16_50 = u_xlat16_50 * u_xlat16_15;
    u_xlat16_50 = u_xlat36.x * u_xlat16_50;
    u_xlat16_50 = u_xlat33 * u_xlat16_50;
    u_xlat16_50 = u_xlat16_20.x * u_xlat16_50;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_50 = min(max(u_xlat16_50, 0.0), 1.0);
#else
    u_xlat16_50 = clamp(u_xlat16_50, 0.0, 1.0);
#endif
    u_xlat16_2.xyz = _DepthFoamColor.xyz * u_xlat16_2.xyz + (-u_xlat1.xyw);
    u_xlat16_2.xyz = vec3(u_xlat16_50) * u_xlat16_2.xyz + u_xlat1.xyw;
    u_xlat0.xyz = u_xlat6.xyz * vec3(u_xlat21) + u_xlat16_2.xyz;
    u_xlat0.w = u_xlat4.x * vs_COLOR0.w;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "MSAA_INTERPOLATION" "MHY_SHADER_LOW" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump float _MHYZBias;
uniform 	vec4 hlslcc_mtx4x4_mhyJitteredVP[4];
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
out highp vec4 vs_TEXCOORD9;
out highp vec4 vs_TEXCOORD10;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec4 u_xlat8;
float u_xlat27;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4_mhyJitteredVP[1];
    u_xlat2 = hlslcc_mtx4x4_mhyJitteredVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4_mhyJitteredVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4_mhyJitteredVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat3.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    u_xlat3.xyw = u_xlat2.xyw;
    gl_Position = u_xlat3;
    vs_COLOR0 = in_COLOR0;
    u_xlat4.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat4.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat4.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat27 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat4.xyz = vec3(u_xlat27) * u_xlat4.xyz;
    u_xlat16_5.x = u_xlat4.y * u_xlat4.y;
    u_xlat16_5.x = u_xlat4.x * u_xlat4.x + (-u_xlat16_5.x);
    u_xlat16_6 = u_xlat4.yzzx * u_xlat4.xyzz;
    u_xlat16_7.x = dot(unity_SHBr, u_xlat16_6);
    u_xlat16_7.y = dot(unity_SHBg, u_xlat16_6);
    u_xlat16_7.z = dot(unity_SHBb, u_xlat16_6);
    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_7.xyz;
    u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat4.w = 1.0;
    u_xlat16_6.x = dot(unity_SHAr, u_xlat4);
    u_xlat16_6.y = dot(unity_SHAg, u_xlat4);
    u_xlat16_6.z = dot(unity_SHAb, u_xlat4);
    u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_6.xyz;
    vs_TEXCOORD1.xyz = u_xlat16_5.xyz;
    vs_TEXCOORD1.w = 1.0;
    u_xlat27 = u_xlat3.y * _ProjectionParams.x;
    u_xlat8.w = u_xlat27 * 0.5;
    u_xlat8.xz = u_xlat3.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.z = u_xlat2.z;
    u_xlat3.xy = u_xlat8.zz + u_xlat8.xw;
    vs_TEXCOORD2 = u_xlat3;
    vs_TEXCOORD4.xyw = u_xlat3.xyw;
    u_xlat27 = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat27 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat27;
    u_xlat27 = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat27;
    u_xlat27 = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat27;
    vs_TEXCOORD3.z = (-u_xlat27);
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD3.w = 0.0;
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD5.w = 0.0;
    vs_TEXCOORD6.xyz = u_xlat4.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[1].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].www + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * in_POSITION0.yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.zzz + u_xlat1.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.www + u_xlat1.xyz;
    vs_TEXCOORD7.xyz = u_xlat1.xyz * vec3(-1.0, -1.0, 1.0);
    vs_TEXCOORD7.w = 0.0;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat27 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat1.xyz = vec3(u_xlat27) * u_xlat1.xyz;
    vs_TEXCOORD8.xyz = u_xlat1.xyz;
    vs_TEXCOORD8.w = 0.0;
    u_xlat2.xyz = u_xlat1.yzx * u_xlat4.zxy;
    u_xlat1.xyz = u_xlat4.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
    u_xlat27 = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD9.xyz = vec3(u_xlat27) * u_xlat1.xyz;
    vs_TEXCOORD9.w = 0.0;
    u_xlat27 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat27 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat27;
    vs_TEXCOORD10.w = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat27;
    vs_TEXCOORD10.xyz = u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowPos[4];
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _DepthFoamMask_ST;
uniform 	mediump float _DepthFoamSpeed;
uniform 	mediump vec4 _DepthFoamColor;
uniform 	mediump float _DepthFoamExtent;
uniform 	mediump float _DepthFoamDistance;
uniform 	mediump float _DepthFoamSubdivision;
uniform 	mediump float _DepthFoamWidth;
uniform 	mediump float _DepthFoamPhaseScale;
uniform 	mediump float _DepthFoamCloseFadeOffset;
uniform 	mediump float _DepthFoamCloseFadeDistance;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _NormalMapScale;
uniform 	float _Normal01_U_Speed;
uniform 	float _Normal01_VSpeed;
uniform 	float _NormalMapBias;
uniform 	float _Normal02_U_Speed;
uniform 	float _Normal02_V_Speed;
uniform 	float _RefractionIntensity;
uniform 	float _OpacityByDepth;
uniform 	float _SpecularIntensity;
uniform 	vec3 _ES_MoonDirection;
uniform 	vec3 _ES_SunDirection;
uniform 	float _Gloss;
uniform 	float _ShoreTransparency;
uniform 	float _SpecularPower;
uniform 	vec4 _ShallowColor;
uniform 	float _ShoreFade;
uniform 	vec4 _DeepColor;
uniform 	float _DeepColorDepth;
uniform 	float _DeepColorFade;
uniform 	vec4 _DistortionIntensity;
uniform 	float _ReflectionIntensity;
uniform 	float _FresnelPower;
uniform 	float _ShoreReflectionFade;
uniform 	mediump float _ProjectUVScale;
uniform 	vec4 _ReflectionSkyCubeMap_HDR;
uniform lowp sampler2D _Normal01;
uniform lowp sampler2D _Normal02;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _SceneScaledBufferBeforTransParent;
uniform lowp samplerCube _ReflectionSkyCubeMap;
uniform lowp sampler2D _DepthFoamMask;
uniform lowp sampler2DShadow hlslcc_zcmp_CascadeShadowMapTexture;
uniform lowp sampler2D _CascadeShadowMapTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD8;
in highp vec4 vs_TEXCOORD9;
in highp vec4 vs_TEXCOORD10;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec4 u_xlatb0;
vec4 u_xlat1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec4 u_xlat4;
vec3 u_xlat5;
bool u_xlatb5;
vec3 u_xlat6;
vec4 u_xlat7;
vec3 u_xlat8;
vec3 u_xlat9;
lowp vec3 u_xlat10_9;
vec3 u_xlat10;
vec3 u_xlat11;
vec3 u_xlat12;
vec3 u_xlat13;
vec3 u_xlat14;
mediump float u_xlat16_15;
vec2 u_xlat17;
mediump vec2 u_xlat16_18;
vec3 u_xlat20;
mediump vec3 u_xlat16_20;
lowp float u_xlat10_20;
int u_xlati20;
uint u_xlatu20;
bool u_xlatb20;
float u_xlat21;
float u_xlat33;
vec2 u_xlat36;
mediump float u_xlat16_36;
lowp float u_xlat10_36;
bool u_xlatb36;
float u_xlat49;
mediump float u_xlat16_50;
float u_xlat52;
mediump float u_xlat16_52;
bool u_xlatb52;
float u_xlat53;
float u_xlat54;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD5.zx * vec2(vec2(_ProjectUVScale, _ProjectUVScale));
    u_xlat1.x = _Time.y * _Normal01_U_Speed + u_xlat0.y;
    u_xlat1.yz = _Time.yy * vec2(_Normal01_VSpeed, _Normal02_U_Speed) + u_xlat0.xy;
    u_xlat1.w = _Time.y * _Normal02_V_Speed + u_xlat0.x;
    u_xlat10_0.xyz = texture(_Normal01, u_xlat1.xy, _NormalMapBias).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_2.xy = u_xlat16_0.xy * vec2(_NormalMapScale);
    u_xlat10_1.xyz = texture(_Normal02, u_xlat1.zw, _NormalMapBias).xyz;
    u_xlat16_0.w = -1.0;
    u_xlat16_3.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.wwz;
    u_xlat16_3.xy = u_xlat16_3.xy * vec2(_NormalMapScale);
    u_xlat16_2.z = -1.0;
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
    u_xlat1.x = float(1.0) / vs_TEXCOORD4.w;
    u_xlat17.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat17.x = texture(_CameraDepthTexture, u_xlat17.xy).x;
    u_xlat17.x = _ZBufferParams.z * u_xlat17.x + _ZBufferParams.w;
    u_xlat17.x = float(1.0) / u_xlat17.x;
    u_xlat33 = vs_TEXCOORD10.w + 9.99999975e-05;
    u_xlat33 = (-u_xlat17.x) / u_xlat33;
    u_xlat33 = vs_TEXCOORD10.y * u_xlat33 + _WorldSpaceCameraPos.y;
    u_xlat33 = (-u_xlat33) + vs_TEXCOORD5.y;
    u_xlat4.xy = u_xlat16_2.xy * vec2(vec2(_RefractionIntensity, _RefractionIntensity));
    u_xlat1.x = u_xlat1.x * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.xw = u_xlat1.xx * u_xlat4.xy;
    u_xlat1.xw = u_xlat1.xw * vs_TEXCOORD4.ww;
    u_xlat17.x = u_xlat17.x + (-vs_TEXCOORD4.w);
#ifdef UNITY_ADRENO_ES3
    u_xlat17.x = min(max(u_xlat17.x, 0.0), 1.0);
#else
    u_xlat17.x = clamp(u_xlat17.x, 0.0, 1.0);
#endif
    u_xlat4.xy = u_xlat17.xx * u_xlat1.xw;
    u_xlat4.z = 0.0;
    u_xlat1.xyw = u_xlat4.xyz + vs_TEXCOORD4.xyw;
    u_xlat1.xy = u_xlat1.xy / u_xlat1.ww;
    u_xlat1.x = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat1.x = _ZBufferParams.z * u_xlat1.x + _ZBufferParams.w;
    u_xlat1.x = float(1.0) / u_xlat1.x;
    u_xlat1.x = u_xlat1.x + (-vs_TEXCOORD4.w);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.xyw = u_xlat1.xxx * u_xlat4.xyz + vs_TEXCOORD4.xyw;
    u_xlat4.xy = u_xlat1.xy / u_xlat1.ww;
    u_xlat49 = texture(_CameraDepthTexture, u_xlat4.xy).x;
    u_xlat49 = _ZBufferParams.z * u_xlat49 + _ZBufferParams.w;
    u_xlat49 = float(1.0) / u_xlat49;
    u_xlat49 = u_xlat49 + (-vs_TEXCOORD4.w);
    u_xlat4.x = 0.100000001 / _OpacityByDepth;
    u_xlat16_3.xz = u_xlat16_2.xy;
    u_xlat16_3.y = 1.0;
    u_xlat16_20.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
    u_xlat16_20.x = inversesqrt(u_xlat16_20.x);
    u_xlat16_20.xyz = u_xlat16_3.xyz * u_xlat16_20.xxx;
#ifdef UNITY_ADRENO_ES3
    u_xlatb5 = !!(0.0>=_ES_MoonDirection.y);
#else
    u_xlatb5 = 0.0>=_ES_MoonDirection.y;
#endif
    u_xlat5.xyz = (bool(u_xlatb5)) ? _ES_SunDirection.xyz : _ES_MoonDirection.xyz;
    u_xlat6.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat53 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat54 = inversesqrt(u_xlat53);
    u_xlat7.xyz = vec3(u_xlat54) * u_xlat6.xyz;
    u_xlat5.xyz = u_xlat6.xyz * vec3(u_xlat54) + u_xlat5.xyz;
    u_xlat6.x = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat5.xyz = u_xlat5.xyz * u_xlat6.xxx;
    u_xlat20.x = dot(u_xlat16_20.xyz, u_xlat5.xyz);
    u_xlat36.x = _Gloss * 128.0;
    u_xlat20.x = max(u_xlat20.x, 9.99999975e-05);
    u_xlat20.x = log2(u_xlat20.x);
    u_xlat20.x = u_xlat20.x * u_xlat36.x;
    u_xlat20.x = exp2(u_xlat20.x);
    u_xlat20.x = u_xlat20.x * _SpecularIntensity;
    u_xlat20.x = max(u_xlat20.x, 0.0);
    u_xlat20.x = min(u_xlat20.x, 16.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb36 = !!(_ES_MoonDirection.y>=9.99999975e-05);
#else
    u_xlatb36 = _ES_MoonDirection.y>=9.99999975e-05;
#endif
    u_xlat36.x = u_xlatb36 ? 1.0 : float(0.0);
    u_xlat52 = _ES_MoonDirection.y + -1.0;
    u_xlat36.x = u_xlat36.x * u_xlat52 + 1.0;
    u_xlat4.w = float(1.0) / _ShoreTransparency;
    u_xlat5.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat5.x = inversesqrt(u_xlat5.x);
    u_xlat5.xyz = u_xlat5.xxx * vs_TEXCOORD6.xyz;
    u_xlat5.x = dot(u_xlat7.xyz, u_xlat5.xyz);
    u_xlat5.x = (-u_xlat5.x) + 1.0;
    u_xlat5.x = max(u_xlat5.x, 9.99999975e-05);
    u_xlat5.x = log2(u_xlat5.x);
    u_xlat21 = u_xlat5.x * _SpecularPower;
    u_xlat21 = exp2(u_xlat21);
    u_xlat6.xyz = u_xlat36.xxx * _LightColor0.xyz;
    u_xlat6.xyz = u_xlat20.xxx * u_xlat6.xyz;
    u_xlat20.x = u_xlat49 + -1.0;
    u_xlat20.x = u_xlat4.w * u_xlat20.x;
    u_xlat20.x = u_xlat20.x * 0.100000001;
#ifdef UNITY_ADRENO_ES3
    u_xlat20.x = min(max(u_xlat20.x, 0.0), 1.0);
#else
    u_xlat20.x = clamp(u_xlat20.x, 0.0, 1.0);
#endif
    u_xlat6.xyz = u_xlat20.xxx * u_xlat6.xyz;
    u_xlat4.xy = vec2(u_xlat49) * u_xlat4.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.xy = min(max(u_xlat4.xy, 0.0), 1.0);
#else
    u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);
#endif
    u_xlat20.x = max(u_xlat4.y, 9.99999975e-05);
    u_xlat20.x = log2(u_xlat20.x);
    u_xlat20.x = u_xlat20.x * _ShoreFade;
    u_xlat20.x = exp2(u_xlat20.x);
    u_xlat8.xyz = _ShallowColor.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat8.xyz = u_xlat20.xxx * u_xlat8.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat1.xy = u_xlat1.xy / vs_TEXCOORD4.ww;
    u_xlat10_9.xyz = texture(_SceneScaledBufferBeforTransParent, u_xlat1.xy).xyz;
    u_xlat10.xyz = u_xlat8.xyz * u_xlat10_9.xyz;
    u_xlat1.x = 0.100000001 / _DeepColorDepth;
    u_xlat1.x = u_xlat1.x * u_xlat49;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.x = max(u_xlat1.x, 9.99999975e-05);
    u_xlat1.x = log2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _DeepColorFade;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat11.xyz = (-u_xlat8.xyz) * u_xlat10_9.xyz + _DeepColor.xyz;
    u_xlat11.xyz = u_xlat1.xxx * u_xlat11.xyz + u_xlat10.xyz;
    u_xlat12.xyz = u_xlat16_2.xyz * _DistortionIntensity.xyz;
    u_xlat13.x = vs_TEXCOORD8.x;
    u_xlat13.y = vs_TEXCOORD9.x;
    u_xlat13.z = vs_TEXCOORD6.x;
    u_xlat13.x = dot(u_xlat13.xyz, u_xlat12.xyz);
    u_xlat14.x = vs_TEXCOORD8.y;
    u_xlat14.y = vs_TEXCOORD9.y;
    u_xlat14.z = vs_TEXCOORD6.y;
    u_xlat13.y = dot(u_xlat14.xyz, u_xlat12.xyz);
    u_xlat14.x = vs_TEXCOORD8.z;
    u_xlat14.y = vs_TEXCOORD9.z;
    u_xlat14.z = vs_TEXCOORD6.z;
    u_xlat13.z = dot(u_xlat14.xyz, u_xlat12.xyz);
    u_xlat1.x = dot(u_xlat13.xyz, u_xlat13.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat12.xyz = u_xlat1.xxx * u_xlat13.xyz;
    u_xlat1.x = dot((-u_xlat7.xyz), u_xlat12.xyz);
    u_xlat1.x = u_xlat1.x + u_xlat1.x;
    u_xlat7.xyz = u_xlat12.xyz * (-u_xlat1.xxx) + (-u_xlat7.xyz);
    u_xlat10_0 = textureLod(_ReflectionSkyCubeMap, u_xlat7.xyz, 0.0);
    u_xlat16_2.x = u_xlat10_0.w + -1.0;
    u_xlat16_2.x = _ReflectionSkyCubeMap_HDR.w * u_xlat16_2.x + 1.0;
    u_xlat16_2.x = log2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * _ReflectionSkyCubeMap_HDR.y;
    u_xlat16_2.x = exp2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * _ReflectionSkyCubeMap_HDR.x;
    u_xlat1.x = u_xlat5.x * _FresnelPower;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _ReflectionIntensity;
    u_xlat17.x = float(1.0) / _ShoreReflectionFade;
    u_xlat17.x = u_xlat17.x * u_xlat49;
#ifdef UNITY_ADRENO_ES3
    u_xlat17.x = min(max(u_xlat17.x, 0.0), 1.0);
#else
    u_xlat17.x = clamp(u_xlat17.x, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat17.x * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat7.xyz = u_xlat16_2.xxx * u_xlat10_0.xyz + (-u_xlat11.xyz);
    u_xlat1.xyw = u_xlat1.xxx * u_xlat7.xyz + u_xlat11.xyz;
    u_xlat1.xyw = (-u_xlat8.xyz) * u_xlat10_9.xyz + u_xlat1.xyw;
    u_xlat1.xyw = u_xlat20.xxx * u_xlat1.xyw + u_xlat10.xyz;
    u_xlat20.x = (-vs_TEXCOORD5.y) * _WorldSpaceLightPos0.w + _WorldSpaceLightPos0.y;
    u_xlat16_2.x = max(u_xlat20.x, 0.0);
    u_xlat20.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowSplitSpheres[0].xyz);
    u_xlat7.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowSplitSpheres[1].xyz);
    u_xlat8.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowSplitSpheres[2].xyz);
    u_xlat9.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowSplitSpheres[3].xyz);
    u_xlat0.x = dot(u_xlat20.xyz, u_xlat20.xyz);
    u_xlat0.y = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat0.z = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat0.w = dot(u_xlat9.xyz, u_xlat9.xyz);
    u_xlatb0 = lessThan(u_xlat0, unity_ShadowSplitSqRadii);
    u_xlat0 = mix(vec4(0.0, 0.0, 0.0, 0.0), vec4(1.0, 1.0, 1.0, 1.0), vec4(u_xlatb0));
    u_xlat16_18.x = u_xlat0.y + u_xlat0.x;
    u_xlat16_18.y = u_xlat0.z + u_xlat16_18.x;
    u_xlat3.x = -0.0;
    u_xlat3.y = (-u_xlat0.x);
    u_xlat3.zw = (-u_xlat16_18.xy);
    u_xlat0 = u_xlat0 + u_xlat3;
    u_xlat0 = max(u_xlat0, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat16_18.x = dot(u_xlat0, vec4(1.0, 1.0, 1.0, 1.0));
#ifdef UNITY_ADRENO_ES3
    u_xlatb20 = !!(u_xlat16_18.x>=0.5);
#else
    u_xlatb20 = u_xlat16_18.x>=0.5;
#endif
    if(u_xlatb20){
        u_xlat20.x = dot(u_xlat0.yzw, vec3(1.0, 2.0, 3.0));
        u_xlat20.x = min(u_xlat20.x, 3.0);
        u_xlatu20 = uint(u_xlat20.x);
        u_xlat7.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowPos[int(u_xlatu20)].xyz);
        u_xlati20 = int(u_xlatu20) << 2;
        u_xlat8.xyz = u_xlat7.yyy * hlslcc_mtx4x4unity_WorldToShadow[(u_xlati20 + 1)].xyz;
        u_xlat7.xyw = hlslcc_mtx4x4unity_WorldToShadow[u_xlati20].xyz * u_xlat7.xxx + u_xlat8.xyz;
        u_xlat7.xyz = hlslcc_mtx4x4unity_WorldToShadow[(u_xlati20 + 2)].xyz * u_xlat7.zzz + u_xlat7.xyw;
        u_xlat20.xyz = u_xlat7.xyz + hlslcc_mtx4x4unity_WorldToShadow[(u_xlati20 + 3)].xyz;
        vec3 txVec0 = vec3(u_xlat20.xy,u_xlat20.z);
        u_xlat10_20 = textureLod(hlslcc_zcmp_CascadeShadowMapTexture, txVec0, 0.0);
        u_xlat16_36 = (-_LightShadowData.x) + 1.0;
        u_xlat20.x = u_xlat10_20 * u_xlat16_36 + _LightShadowData.x;
    } else {
        u_xlat20.x = 1.0;
    //ENDIF
    }
    u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;
    u_xlat20.xyz = u_xlat16_2.xyz * u_xlat20.xxx + vs_TEXCOORD1.xyz;
    u_xlat16_2.xyz = u_xlat20.xyz * vec3(0.300000012, 0.300000012, 0.300000012) + vec3(0.699999988, 0.699999988, 0.699999988);
    u_xlat20.x = sqrt(u_xlat53);
    u_xlat16_50 = u_xlat20.x + (-_DepthFoamCloseFadeOffset);
    u_xlat16_50 = u_xlat16_50 / _DepthFoamCloseFadeDistance;
    u_xlat16_15 = vs_COLOR0.x * _DepthFoamExtent;
    u_xlat33 = max(u_xlat33, 0.0);
    u_xlat33 = min(u_xlat16_15, u_xlat33);
    u_xlat16_15 = _DepthFoamExtent * vs_COLOR0.x + 9.99999975e-05;
    u_xlat33 = u_xlat33 / u_xlat16_15;
    u_xlat33 = (-u_xlat33) + 1.0;
    u_xlat36.xy = vec2(_Time.y * _DepthFoamMask_ST.z, _Time.y * _DepthFoamMask_ST.w);
    u_xlat36.xy = fract(u_xlat36.xy);
    u_xlat36.xy = _DepthFoamMask_ST.xy * vs_TEXCOORD5.xz + u_xlat36.xy;
    u_xlat10_36 = texture(_DepthFoamMask, u_xlat36.xy, -1.0).x;
    u_xlat52 = vs_TEXCOORD5.z + vs_TEXCOORD5.x;
    u_xlat52 = u_xlat52 * _DepthFoamPhaseScale;
    u_xlat52 = _DepthFoamSpeed * _Time.y + u_xlat52;
    u_xlat5.x = (-u_xlat33) + 1.0;
    u_xlat16_15 = _DepthFoamSubdivision * u_xlat33 + u_xlat52;
    u_xlat16_15 = sin(u_xlat16_15);
    u_xlat16_15 = _DepthFoamWidth * u_xlat33 + u_xlat16_15;
    u_xlat16_52 = u_xlat10_36 * 2.0 + -1.0;
    u_xlat52 = u_xlat16_52 + u_xlat16_15;
#ifdef UNITY_ADRENO_ES3
    u_xlatb52 = !!(u_xlat52>=u_xlat5.x);
#else
    u_xlatb52 = u_xlat52>=u_xlat5.x;
#endif
    u_xlat52 = u_xlatb52 ? 1.0 : float(0.0);
    u_xlat36.x = u_xlat52 * u_xlat10_36;
    u_xlat16_15 = _DepthFoamDistance + 9.99999975e-05;
    u_xlat16_15 = u_xlat20.x / u_xlat16_15;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_15 = min(max(u_xlat16_15, 0.0), 1.0);
#else
    u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);
#endif
    u_xlat16_20.x = (-u_xlat16_15) + 1.0;
    u_xlat16_15 = vs_COLOR0.y * _DepthFoamColor.w;
    u_xlat16_50 = u_xlat16_50 * u_xlat16_15;
    u_xlat16_50 = u_xlat36.x * u_xlat16_50;
    u_xlat16_50 = u_xlat33 * u_xlat16_50;
    u_xlat16_50 = u_xlat16_20.x * u_xlat16_50;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_50 = min(max(u_xlat16_50, 0.0), 1.0);
#else
    u_xlat16_50 = clamp(u_xlat16_50, 0.0, 1.0);
#endif
    u_xlat16_2.xyz = _DepthFoamColor.xyz * u_xlat16_2.xyz + (-u_xlat1.xyw);
    u_xlat16_2.xyz = vec3(u_xlat16_50) * u_xlat16_2.xyz + u_xlat1.xyw;
    u_xlat0.xyz = u_xlat6.xyz * vec3(u_xlat21) + u_xlat16_2.xyz;
    u_xlat0.w = u_xlat4.x * vs_COLOR0.w;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "MSAA_INTERPOLATION" "MHY_SHADER_LOW" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
uniform 	vec4 hlslcc_mtx4x4_mhyJitteredVP[4];
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
out highp vec4 vs_TEXCOORD9;
out highp vec4 vs_TEXCOORD10;
float u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec4 u_xlat8;
vec3 u_xlat9;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat9.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4_mhyJitteredVP[1];
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[3] * u_xlat2.wwww + u_xlat1;
    u_xlat3.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    u_xlat3.xyw = u_xlat1.xyw;
    gl_Position = u_xlat3;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD1.w = 1.0;
    u_xlat4.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat4.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat4.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat1.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
    u_xlat16_5.x = u_xlat4.y * u_xlat4.y;
    u_xlat16_5.x = u_xlat4.x * u_xlat4.x + (-u_xlat16_5.x);
    u_xlat16_6 = u_xlat4.yzzx * u_xlat4.xyzz;
    u_xlat16_7.x = dot(unity_SHBr, u_xlat16_6);
    u_xlat16_7.y = dot(unity_SHBg, u_xlat16_6);
    u_xlat16_7.z = dot(unity_SHBb, u_xlat16_6);
    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_7.xyz;
    u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat4.w = 1.0;
    u_xlat16_6.x = dot(unity_SHAr, u_xlat4);
    u_xlat16_6.y = dot(unity_SHAg, u_xlat4);
    u_xlat16_6.z = dot(unity_SHAb, u_xlat4);
    u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_6.xyz;
    vs_TEXCOORD1.xyz = u_xlat16_5.xyz;
    u_xlat1.x = u_xlat3.y * _ProjectionParams.x;
    u_xlat8.w = u_xlat1.x * 0.5;
    u_xlat8.xz = u_xlat3.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.z = u_xlat1.z;
    u_xlat3.xy = u_xlat8.zz + u_xlat8.xw;
    vs_TEXCOORD2 = u_xlat3;
    vs_TEXCOORD4.xyw = u_xlat3.xyw;
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD3.w = 0.0;
    u_xlat1.x = u_xlat2.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat2.x + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat2.z + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat2.w + u_xlat1.x;
    vs_TEXCOORD3.z = (-u_xlat1.x);
    vs_TEXCOORD5.w = 0.0;
    vs_TEXCOORD5.xyz = u_xlat9.xyz;
    u_xlat9.xyz = (-u_xlat9.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD6.w = 0.0;
    vs_TEXCOORD6.xyz = u_xlat4.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].www + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * in_POSITION0.yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.zzz + u_xlat1.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.www + u_xlat1.xyz;
    vs_TEXCOORD7.xyz = u_xlat1.xyz * vec3(-1.0, -1.0, 1.0);
    vs_TEXCOORD7.w = 0.0;
    u_xlat1.xyz = in_TANGENT0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat0 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0 = inversesqrt(u_xlat0);
    u_xlat1.xyz = vec3(u_xlat0) * u_xlat1.xyz;
    vs_TEXCOORD8.xyz = u_xlat1.xyz;
    vs_TEXCOORD8.w = 0.0;
    u_xlat2.xyz = u_xlat1.yzx * u_xlat4.zxy;
    u_xlat1.xyz = u_xlat4.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
    u_xlat0 = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD9.xyz = vec3(u_xlat0) * u_xlat1.xyz;
    vs_TEXCOORD9.w = 0.0;
    u_xlat0 = u_xlat9.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat9.x + u_xlat0;
    vs_TEXCOORD10.w = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat9.z + u_xlat0;
    vs_TEXCOORD10.xyz = u_xlat9.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowPos[4];
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _DepthFoamMask_ST;
uniform 	mediump float _DepthFoamSpeed;
uniform 	mediump vec4 _DepthFoamColor;
uniform 	mediump float _DepthFoamExtent;
uniform 	mediump float _DepthFoamDistance;
uniform 	mediump float _DepthFoamSubdivision;
uniform 	mediump float _DepthFoamWidth;
uniform 	mediump float _DepthFoamPhaseScale;
uniform 	mediump float _DepthFoamCloseFadeOffset;
uniform 	mediump float _DepthFoamCloseFadeDistance;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _NormalMapScale;
uniform 	float _Normal01_U_Speed;
uniform 	float _Normal01_VSpeed;
uniform 	float _NormalMapBias;
uniform 	float _Normal02_U_Speed;
uniform 	float _Normal02_V_Speed;
uniform 	float _RefractionIntensity;
uniform 	float _OpacityByDepth;
uniform 	float _SpecularIntensity;
uniform 	vec3 _ES_MoonDirection;
uniform 	vec3 _ES_SunDirection;
uniform 	float _Gloss;
uniform 	float _ShoreTransparency;
uniform 	float _SpecularPower;
uniform 	vec4 _ShallowColor;
uniform 	float _ShoreFade;
uniform 	vec4 _DeepColor;
uniform 	float _DeepColorDepth;
uniform 	float _DeepColorFade;
uniform 	vec4 _DistortionIntensity;
uniform 	float _ReflectionIntensity;
uniform 	float _FresnelPower;
uniform 	float _ShoreReflectionFade;
uniform 	mediump float _ProjectUVScale;
uniform 	vec4 _ReflectionSkyCubeMap_HDR;
uniform lowp sampler2D _Normal01;
uniform lowp sampler2D _Normal02;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _SceneScaledBufferBeforTransParent;
uniform lowp samplerCube _ReflectionSkyCubeMap;
uniform lowp sampler2D _DepthFoamMask;
uniform lowp sampler2DShadow hlslcc_zcmp_CascadeShadowMapTexture;
uniform lowp sampler2D _CascadeShadowMapTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD8;
in highp vec4 vs_TEXCOORD9;
in highp vec4 vs_TEXCOORD10;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec4 u_xlatb0;
vec4 u_xlat1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec4 u_xlat4;
vec3 u_xlat5;
bool u_xlatb5;
vec3 u_xlat6;
vec4 u_xlat7;
vec3 u_xlat8;
vec3 u_xlat9;
lowp vec3 u_xlat10_9;
vec3 u_xlat10;
vec3 u_xlat11;
vec3 u_xlat12;
vec3 u_xlat13;
vec3 u_xlat14;
mediump float u_xlat16_15;
vec2 u_xlat17;
mediump vec2 u_xlat16_18;
vec3 u_xlat20;
mediump vec3 u_xlat16_20;
lowp float u_xlat10_20;
int u_xlati20;
uint u_xlatu20;
bool u_xlatb20;
float u_xlat21;
float u_xlat33;
vec2 u_xlat36;
mediump float u_xlat16_36;
lowp float u_xlat10_36;
bool u_xlatb36;
float u_xlat49;
mediump float u_xlat16_50;
float u_xlat52;
mediump float u_xlat16_52;
bool u_xlatb52;
float u_xlat53;
float u_xlat54;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD5.zx * vec2(vec2(_ProjectUVScale, _ProjectUVScale));
    u_xlat1.x = _Time.y * _Normal01_U_Speed + u_xlat0.y;
    u_xlat1.yz = _Time.yy * vec2(_Normal01_VSpeed, _Normal02_U_Speed) + u_xlat0.xy;
    u_xlat1.w = _Time.y * _Normal02_V_Speed + u_xlat0.x;
    u_xlat10_0.xyz = texture(_Normal01, u_xlat1.xy, _NormalMapBias).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_2.xy = u_xlat16_0.xy * vec2(_NormalMapScale);
    u_xlat10_1.xyz = texture(_Normal02, u_xlat1.zw, _NormalMapBias).xyz;
    u_xlat16_0.w = -1.0;
    u_xlat16_3.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.wwz;
    u_xlat16_3.xy = u_xlat16_3.xy * vec2(_NormalMapScale);
    u_xlat16_2.z = -1.0;
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
    u_xlat1.x = float(1.0) / vs_TEXCOORD4.w;
    u_xlat17.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat17.x = texture(_CameraDepthTexture, u_xlat17.xy).x;
    u_xlat17.x = _ZBufferParams.z * u_xlat17.x + _ZBufferParams.w;
    u_xlat17.x = float(1.0) / u_xlat17.x;
    u_xlat33 = vs_TEXCOORD10.w + 9.99999975e-05;
    u_xlat33 = (-u_xlat17.x) / u_xlat33;
    u_xlat33 = vs_TEXCOORD10.y * u_xlat33 + _WorldSpaceCameraPos.y;
    u_xlat33 = (-u_xlat33) + vs_TEXCOORD5.y;
    u_xlat4.xy = u_xlat16_2.xy * vec2(vec2(_RefractionIntensity, _RefractionIntensity));
    u_xlat1.x = u_xlat1.x * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.xw = u_xlat1.xx * u_xlat4.xy;
    u_xlat1.xw = u_xlat1.xw * vs_TEXCOORD4.ww;
    u_xlat17.x = u_xlat17.x + (-vs_TEXCOORD4.w);
#ifdef UNITY_ADRENO_ES3
    u_xlat17.x = min(max(u_xlat17.x, 0.0), 1.0);
#else
    u_xlat17.x = clamp(u_xlat17.x, 0.0, 1.0);
#endif
    u_xlat4.xy = u_xlat17.xx * u_xlat1.xw;
    u_xlat4.z = 0.0;
    u_xlat1.xyw = u_xlat4.xyz + vs_TEXCOORD4.xyw;
    u_xlat1.xy = u_xlat1.xy / u_xlat1.ww;
    u_xlat1.x = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat1.x = _ZBufferParams.z * u_xlat1.x + _ZBufferParams.w;
    u_xlat1.x = float(1.0) / u_xlat1.x;
    u_xlat1.x = u_xlat1.x + (-vs_TEXCOORD4.w);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.xyw = u_xlat1.xxx * u_xlat4.xyz + vs_TEXCOORD4.xyw;
    u_xlat4.xy = u_xlat1.xy / u_xlat1.ww;
    u_xlat49 = texture(_CameraDepthTexture, u_xlat4.xy).x;
    u_xlat49 = _ZBufferParams.z * u_xlat49 + _ZBufferParams.w;
    u_xlat49 = float(1.0) / u_xlat49;
    u_xlat49 = u_xlat49 + (-vs_TEXCOORD4.w);
    u_xlat4.x = 0.100000001 / _OpacityByDepth;
    u_xlat16_3.xz = u_xlat16_2.xy;
    u_xlat16_3.y = 1.0;
    u_xlat16_20.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
    u_xlat16_20.x = inversesqrt(u_xlat16_20.x);
    u_xlat16_20.xyz = u_xlat16_3.xyz * u_xlat16_20.xxx;
#ifdef UNITY_ADRENO_ES3
    u_xlatb5 = !!(0.0>=_ES_MoonDirection.y);
#else
    u_xlatb5 = 0.0>=_ES_MoonDirection.y;
#endif
    u_xlat5.xyz = (bool(u_xlatb5)) ? _ES_SunDirection.xyz : _ES_MoonDirection.xyz;
    u_xlat6.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat53 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat54 = inversesqrt(u_xlat53);
    u_xlat7.xyz = vec3(u_xlat54) * u_xlat6.xyz;
    u_xlat5.xyz = u_xlat6.xyz * vec3(u_xlat54) + u_xlat5.xyz;
    u_xlat6.x = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat5.xyz = u_xlat5.xyz * u_xlat6.xxx;
    u_xlat20.x = dot(u_xlat16_20.xyz, u_xlat5.xyz);
    u_xlat36.x = _Gloss * 128.0;
    u_xlat20.x = max(u_xlat20.x, 9.99999975e-05);
    u_xlat20.x = log2(u_xlat20.x);
    u_xlat20.x = u_xlat20.x * u_xlat36.x;
    u_xlat20.x = exp2(u_xlat20.x);
    u_xlat20.x = u_xlat20.x * _SpecularIntensity;
    u_xlat20.x = max(u_xlat20.x, 0.0);
    u_xlat20.x = min(u_xlat20.x, 16.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb36 = !!(_ES_MoonDirection.y>=9.99999975e-05);
#else
    u_xlatb36 = _ES_MoonDirection.y>=9.99999975e-05;
#endif
    u_xlat36.x = u_xlatb36 ? 1.0 : float(0.0);
    u_xlat52 = _ES_MoonDirection.y + -1.0;
    u_xlat36.x = u_xlat36.x * u_xlat52 + 1.0;
    u_xlat4.w = float(1.0) / _ShoreTransparency;
    u_xlat5.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat5.x = inversesqrt(u_xlat5.x);
    u_xlat5.xyz = u_xlat5.xxx * vs_TEXCOORD6.xyz;
    u_xlat5.x = dot(u_xlat7.xyz, u_xlat5.xyz);
    u_xlat5.x = (-u_xlat5.x) + 1.0;
    u_xlat5.x = max(u_xlat5.x, 9.99999975e-05);
    u_xlat5.x = log2(u_xlat5.x);
    u_xlat21 = u_xlat5.x * _SpecularPower;
    u_xlat21 = exp2(u_xlat21);
    u_xlat6.xyz = u_xlat36.xxx * _LightColor0.xyz;
    u_xlat6.xyz = u_xlat20.xxx * u_xlat6.xyz;
    u_xlat20.x = u_xlat49 + -1.0;
    u_xlat20.x = u_xlat4.w * u_xlat20.x;
    u_xlat20.x = u_xlat20.x * 0.100000001;
#ifdef UNITY_ADRENO_ES3
    u_xlat20.x = min(max(u_xlat20.x, 0.0), 1.0);
#else
    u_xlat20.x = clamp(u_xlat20.x, 0.0, 1.0);
#endif
    u_xlat6.xyz = u_xlat20.xxx * u_xlat6.xyz;
    u_xlat4.xy = vec2(u_xlat49) * u_xlat4.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.xy = min(max(u_xlat4.xy, 0.0), 1.0);
#else
    u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);
#endif
    u_xlat20.x = max(u_xlat4.y, 9.99999975e-05);
    u_xlat20.x = log2(u_xlat20.x);
    u_xlat20.x = u_xlat20.x * _ShoreFade;
    u_xlat20.x = exp2(u_xlat20.x);
    u_xlat8.xyz = _ShallowColor.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat8.xyz = u_xlat20.xxx * u_xlat8.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat1.xy = u_xlat1.xy / vs_TEXCOORD4.ww;
    u_xlat10_9.xyz = texture(_SceneScaledBufferBeforTransParent, u_xlat1.xy).xyz;
    u_xlat10.xyz = u_xlat8.xyz * u_xlat10_9.xyz;
    u_xlat1.x = 0.100000001 / _DeepColorDepth;
    u_xlat1.x = u_xlat1.x * u_xlat49;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.x = max(u_xlat1.x, 9.99999975e-05);
    u_xlat1.x = log2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _DeepColorFade;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat11.xyz = (-u_xlat8.xyz) * u_xlat10_9.xyz + _DeepColor.xyz;
    u_xlat11.xyz = u_xlat1.xxx * u_xlat11.xyz + u_xlat10.xyz;
    u_xlat12.xyz = u_xlat16_2.xyz * _DistortionIntensity.xyz;
    u_xlat13.x = vs_TEXCOORD8.x;
    u_xlat13.y = vs_TEXCOORD9.x;
    u_xlat13.z = vs_TEXCOORD6.x;
    u_xlat13.x = dot(u_xlat13.xyz, u_xlat12.xyz);
    u_xlat14.x = vs_TEXCOORD8.y;
    u_xlat14.y = vs_TEXCOORD9.y;
    u_xlat14.z = vs_TEXCOORD6.y;
    u_xlat13.y = dot(u_xlat14.xyz, u_xlat12.xyz);
    u_xlat14.x = vs_TEXCOORD8.z;
    u_xlat14.y = vs_TEXCOORD9.z;
    u_xlat14.z = vs_TEXCOORD6.z;
    u_xlat13.z = dot(u_xlat14.xyz, u_xlat12.xyz);
    u_xlat1.x = dot(u_xlat13.xyz, u_xlat13.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat12.xyz = u_xlat1.xxx * u_xlat13.xyz;
    u_xlat1.x = dot((-u_xlat7.xyz), u_xlat12.xyz);
    u_xlat1.x = u_xlat1.x + u_xlat1.x;
    u_xlat7.xyz = u_xlat12.xyz * (-u_xlat1.xxx) + (-u_xlat7.xyz);
    u_xlat10_0 = textureLod(_ReflectionSkyCubeMap, u_xlat7.xyz, 0.0);
    u_xlat16_2.x = u_xlat10_0.w + -1.0;
    u_xlat16_2.x = _ReflectionSkyCubeMap_HDR.w * u_xlat16_2.x + 1.0;
    u_xlat16_2.x = log2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * _ReflectionSkyCubeMap_HDR.y;
    u_xlat16_2.x = exp2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * _ReflectionSkyCubeMap_HDR.x;
    u_xlat1.x = u_xlat5.x * _FresnelPower;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _ReflectionIntensity;
    u_xlat17.x = float(1.0) / _ShoreReflectionFade;
    u_xlat17.x = u_xlat17.x * u_xlat49;
#ifdef UNITY_ADRENO_ES3
    u_xlat17.x = min(max(u_xlat17.x, 0.0), 1.0);
#else
    u_xlat17.x = clamp(u_xlat17.x, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat17.x * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat7.xyz = u_xlat16_2.xxx * u_xlat10_0.xyz + (-u_xlat11.xyz);
    u_xlat1.xyw = u_xlat1.xxx * u_xlat7.xyz + u_xlat11.xyz;
    u_xlat1.xyw = (-u_xlat8.xyz) * u_xlat10_9.xyz + u_xlat1.xyw;
    u_xlat1.xyw = u_xlat20.xxx * u_xlat1.xyw + u_xlat10.xyz;
    u_xlat20.x = (-vs_TEXCOORD5.y) * _WorldSpaceLightPos0.w + _WorldSpaceLightPos0.y;
    u_xlat16_2.x = max(u_xlat20.x, 0.0);
    u_xlat20.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowSplitSpheres[0].xyz);
    u_xlat7.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowSplitSpheres[1].xyz);
    u_xlat8.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowSplitSpheres[2].xyz);
    u_xlat9.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowSplitSpheres[3].xyz);
    u_xlat0.x = dot(u_xlat20.xyz, u_xlat20.xyz);
    u_xlat0.y = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat0.z = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat0.w = dot(u_xlat9.xyz, u_xlat9.xyz);
    u_xlatb0 = lessThan(u_xlat0, unity_ShadowSplitSqRadii);
    u_xlat0 = mix(vec4(0.0, 0.0, 0.0, 0.0), vec4(1.0, 1.0, 1.0, 1.0), vec4(u_xlatb0));
    u_xlat16_18.x = u_xlat0.y + u_xlat0.x;
    u_xlat16_18.y = u_xlat0.z + u_xlat16_18.x;
    u_xlat3.x = -0.0;
    u_xlat3.y = (-u_xlat0.x);
    u_xlat3.zw = (-u_xlat16_18.xy);
    u_xlat0 = u_xlat0 + u_xlat3;
    u_xlat0 = max(u_xlat0, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat16_18.x = dot(u_xlat0, vec4(1.0, 1.0, 1.0, 1.0));
#ifdef UNITY_ADRENO_ES3
    u_xlatb20 = !!(u_xlat16_18.x>=0.5);
#else
    u_xlatb20 = u_xlat16_18.x>=0.5;
#endif
    if(u_xlatb20){
        u_xlat20.x = dot(u_xlat0.yzw, vec3(1.0, 2.0, 3.0));
        u_xlat20.x = min(u_xlat20.x, 3.0);
        u_xlatu20 = uint(u_xlat20.x);
        u_xlat7.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowPos[int(u_xlatu20)].xyz);
        u_xlati20 = int(u_xlatu20) << 2;
        u_xlat8.xyz = u_xlat7.yyy * hlslcc_mtx4x4unity_WorldToShadow[(u_xlati20 + 1)].xyz;
        u_xlat7.xyw = hlslcc_mtx4x4unity_WorldToShadow[u_xlati20].xyz * u_xlat7.xxx + u_xlat8.xyz;
        u_xlat7.xyz = hlslcc_mtx4x4unity_WorldToShadow[(u_xlati20 + 2)].xyz * u_xlat7.zzz + u_xlat7.xyw;
        u_xlat20.xyz = u_xlat7.xyz + hlslcc_mtx4x4unity_WorldToShadow[(u_xlati20 + 3)].xyz;
        vec3 txVec0 = vec3(u_xlat20.xy,u_xlat20.z);
        u_xlat10_20 = textureLod(hlslcc_zcmp_CascadeShadowMapTexture, txVec0, 0.0);
        u_xlat16_36 = (-_LightShadowData.x) + 1.0;
        u_xlat20.x = u_xlat10_20 * u_xlat16_36 + _LightShadowData.x;
    } else {
        u_xlat20.x = 1.0;
    //ENDIF
    }
    u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;
    u_xlat20.xyz = u_xlat16_2.xyz * u_xlat20.xxx + vs_TEXCOORD1.xyz;
    u_xlat16_2.xyz = u_xlat20.xyz * vec3(0.300000012, 0.300000012, 0.300000012) + vec3(0.699999988, 0.699999988, 0.699999988);
    u_xlat20.x = sqrt(u_xlat53);
    u_xlat16_50 = u_xlat20.x + (-_DepthFoamCloseFadeOffset);
    u_xlat16_50 = u_xlat16_50 / _DepthFoamCloseFadeDistance;
    u_xlat16_15 = vs_COLOR0.x * _DepthFoamExtent;
    u_xlat33 = max(u_xlat33, 0.0);
    u_xlat33 = min(u_xlat16_15, u_xlat33);
    u_xlat16_15 = _DepthFoamExtent * vs_COLOR0.x + 9.99999975e-05;
    u_xlat33 = u_xlat33 / u_xlat16_15;
    u_xlat33 = (-u_xlat33) + 1.0;
    u_xlat36.xy = vec2(_Time.y * _DepthFoamMask_ST.z, _Time.y * _DepthFoamMask_ST.w);
    u_xlat36.xy = fract(u_xlat36.xy);
    u_xlat36.xy = _DepthFoamMask_ST.xy * vs_TEXCOORD5.xz + u_xlat36.xy;
    u_xlat10_36 = texture(_DepthFoamMask, u_xlat36.xy, -1.0).x;
    u_xlat52 = vs_TEXCOORD5.z + vs_TEXCOORD5.x;
    u_xlat52 = u_xlat52 * _DepthFoamPhaseScale;
    u_xlat52 = _DepthFoamSpeed * _Time.y + u_xlat52;
    u_xlat5.x = (-u_xlat33) + 1.0;
    u_xlat16_15 = _DepthFoamSubdivision * u_xlat33 + u_xlat52;
    u_xlat16_15 = sin(u_xlat16_15);
    u_xlat16_15 = _DepthFoamWidth * u_xlat33 + u_xlat16_15;
    u_xlat16_52 = u_xlat10_36 * 2.0 + -1.0;
    u_xlat52 = u_xlat16_52 + u_xlat16_15;
#ifdef UNITY_ADRENO_ES3
    u_xlatb52 = !!(u_xlat52>=u_xlat5.x);
#else
    u_xlatb52 = u_xlat52>=u_xlat5.x;
#endif
    u_xlat52 = u_xlatb52 ? 1.0 : float(0.0);
    u_xlat36.x = u_xlat52 * u_xlat10_36;
    u_xlat16_15 = _DepthFoamDistance + 9.99999975e-05;
    u_xlat16_15 = u_xlat20.x / u_xlat16_15;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_15 = min(max(u_xlat16_15, 0.0), 1.0);
#else
    u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);
#endif
    u_xlat16_20.x = (-u_xlat16_15) + 1.0;
    u_xlat16_15 = vs_COLOR0.y * _DepthFoamColor.w;
    u_xlat16_50 = u_xlat16_50 * u_xlat16_15;
    u_xlat16_50 = u_xlat36.x * u_xlat16_50;
    u_xlat16_50 = u_xlat33 * u_xlat16_50;
    u_xlat16_50 = u_xlat16_20.x * u_xlat16_50;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_50 = min(max(u_xlat16_50, 0.0), 1.0);
#else
    u_xlat16_50 = clamp(u_xlat16_50, 0.0, 1.0);
#endif
    u_xlat16_2.xyz = _DepthFoamColor.xyz * u_xlat16_2.xyz + (-u_xlat1.xyw);
    u_xlat16_2.xyz = vec3(u_xlat16_50) * u_xlat16_2.xyz + u_xlat1.xyw;
    u_xlat0.xyz = u_xlat6.xyz * vec3(u_xlat21) + u_xlat16_2.xyz;
    u_xlat0.w = u_xlat4.x * vs_COLOR0.w;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "MHY_SHADER_HIGH" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	mediump float _MHYZBias;
uniform 	vec4 hlslcc_mtx4x4_mhyJitteredVP[4];
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
out highp vec4 vs_TEXCOORD9;
out highp vec4 vs_TEXCOORD10;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
vec4 u_xlat4;
bool u_xlatb4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
mediump vec4 u_xlat16_6;
vec4 u_xlat7;
mediump vec3 u_xlat16_8;
float u_xlat11;
vec3 u_xlat13;
mediump float u_xlat16_14;
float u_xlat27;
bool u_xlatb27;
float u_xlat29;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4_mhyJitteredVP[1];
    u_xlat2 = hlslcc_mtx4x4_mhyJitteredVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4_mhyJitteredVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4_mhyJitteredVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat3.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    u_xlat3.xyw = u_xlat2.xyw;
    gl_Position = u_xlat3;
    vs_COLOR0 = in_COLOR0;
    u_xlat2.xyw = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat27 = u_xlat2.y * _HeigtFogParams.x;
    u_xlat4.x = u_xlat27 * -1.44269502;
    u_xlat4.x = exp2(u_xlat4.x);
    u_xlat4.x = (-u_xlat4.x) + 1.0;
    u_xlat4.x = u_xlat4.x / u_xlat27;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(0.00999999978<abs(u_xlat27));
#else
    u_xlatb27 = 0.00999999978<abs(u_xlat27);
#endif
    u_xlat16_5.x = (u_xlatb27) ? u_xlat4.x : 1.0;
    u_xlat27 = dot(u_xlat2.xyw, u_xlat2.xyw);
    u_xlat27 = sqrt(u_xlat27);
    u_xlat4.x = u_xlat27 * _HeigtFogParams.y;
    u_xlat16_5.x = u_xlat4.x * u_xlat16_5.x;
    u_xlat16_5.x = exp2((-u_xlat16_5.x));
    u_xlat16_5.x = (-u_xlat16_5.x) + 1.0;
    u_xlat4.x = u_xlat2.y * _HeigtFogParams2.x;
    u_xlat13.x = u_xlat4.x * -1.44269502;
    u_xlat13.x = exp2(u_xlat13.x);
    u_xlat13.x = (-u_xlat13.x) + 1.0;
    u_xlat13.x = u_xlat13.x / u_xlat4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(0.00999999978<abs(u_xlat4.x));
#else
    u_xlatb4 = 0.00999999978<abs(u_xlat4.x);
#endif
    u_xlat16_14 = (u_xlatb4) ? u_xlat13.x : 1.0;
    u_xlat4.x = u_xlat27 * _HeigtFogParams2.y;
    u_xlat16_14 = u_xlat4.x * u_xlat16_14;
    u_xlat16_14 = exp2((-u_xlat16_14));
    u_xlat16_5.y = (-u_xlat16_14) + 1.0;
    u_xlat16_5.xy = max(u_xlat16_5.xy, vec2(0.0, 0.0));
    u_xlat16_5.x = u_xlat16_5.y + u_xlat16_5.x;
    u_xlat4.x = u_xlat27 * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat16_14 = (-u_xlat4.x) + 2.0;
    u_xlat16_14 = u_xlat4.x * u_xlat16_14;
    u_xlat4.x = u_xlat16_14 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat4.x = u_xlat4.x + 1.0;
    u_xlat16_5.x = u_xlat4.x * u_xlat16_5.x;
    u_xlat4.x = min(u_xlat16_5.x, _HeigtFogColBase.w);
    u_xlat13.x = (-u_xlat4.x) + 1.0;
    u_xlat6.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat6.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat6.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat2.x = dot(u_xlat2.xyw, u_xlat6.xyz);
    u_xlat11 = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!((-u_xlat2.x)>=u_xlat11);
#else
    u_xlatb2 = (-u_xlat2.x)>=u_xlat11;
#endif
    u_xlat11 = u_xlat27 * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat11 = min(max(u_xlat11, 0.0), 1.0);
#else
    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
#endif
    u_xlat27 = u_xlat27 + (-_HeigtFogRamp.w);
    u_xlat27 = u_xlat27 * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
    u_xlat29 = (-u_xlat11) + 2.0;
    u_xlat11 = u_xlat29 * u_xlat11;
    u_xlat29 = u_xlat11 * _HeigtFogColDelta.w;
    u_xlat2.x = (u_xlatb2) ? u_xlat29 : u_xlat11;
    u_xlat2.x = log2(u_xlat2.x);
    u_xlat2.x = u_xlat2.x * unity_FogColor.w;
    u_xlat2.x = exp2(u_xlat2.x);
    u_xlat2.x = min(u_xlat2.x, _HeigtFogColBase.w);
    u_xlat11 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat11 = min(max(u_xlat11, 0.0), 1.0);
#else
    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
#endif
    u_xlat16_5.x = (-u_xlat11) + 2.0;
    u_xlat16_5.x = u_xlat11 * u_xlat16_5.x;
    u_xlat6.xyz = u_xlat16_5.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat7.xyz = (-u_xlat6.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat6.xyz = vec3(u_xlat27) * u_xlat7.xyz + u_xlat6.xyz;
    u_xlat6.xyz = u_xlat2.xxx * u_xlat6.xyz;
    u_xlat27 = (-u_xlat2.x) + 1.0;
    vs_TEXCOORD0.w = u_xlat13.x * u_xlat27;
    u_xlat2.xyw = u_xlat13.xxx * u_xlat6.xyz;
    u_xlat27 = u_xlat0.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
    u_xlat13.xyz = vec3(u_xlat27) * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    vs_TEXCOORD0.xyz = u_xlat13.xyz * u_xlat4.xxx + u_xlat2.xyw;
    u_xlat4.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat4.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat4.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat27 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat4.xyz = vec3(u_xlat27) * u_xlat4.xyz;
    u_xlat16_5.x = u_xlat4.y * u_xlat4.y;
    u_xlat16_5.x = u_xlat4.x * u_xlat4.x + (-u_xlat16_5.x);
    u_xlat16_6 = u_xlat4.yzzx * u_xlat4.xyzz;
    u_xlat16_8.x = dot(unity_SHBr, u_xlat16_6);
    u_xlat16_8.y = dot(unity_SHBg, u_xlat16_6);
    u_xlat16_8.z = dot(unity_SHBb, u_xlat16_6);
    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_8.xyz;
    u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat4.w = 1.0;
    u_xlat16_8.x = dot(unity_SHAr, u_xlat4);
    u_xlat16_8.y = dot(unity_SHAg, u_xlat4);
    u_xlat16_8.z = dot(unity_SHAb, u_xlat4);
    u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_8.xyz;
    vs_TEXCOORD1.xyz = u_xlat16_5.xyz;
    vs_TEXCOORD1.w = 1.0;
    u_xlat27 = u_xlat3.y * _ProjectionParams.x;
    u_xlat7.w = u_xlat27 * 0.5;
    u_xlat7.xz = u_xlat3.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.z = u_xlat2.z;
    u_xlat3.xy = u_xlat7.zz + u_xlat7.xw;
    vs_TEXCOORD2 = u_xlat3;
    vs_TEXCOORD4.xyw = u_xlat3.xyw;
    u_xlat27 = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat27 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat27;
    u_xlat27 = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat27;
    u_xlat27 = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat27;
    vs_TEXCOORD3.z = (-u_xlat27);
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD3.w = 0.0;
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD5.w = 0.0;
    vs_TEXCOORD6.xyz = u_xlat4.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[1].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].www + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * in_POSITION0.yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.zzz + u_xlat1.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.www + u_xlat1.xyz;
    vs_TEXCOORD7.xyz = u_xlat1.xyz * vec3(-1.0, -1.0, 1.0);
    vs_TEXCOORD7.w = 0.0;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat27 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat1.xyz = vec3(u_xlat27) * u_xlat1.xyz;
    vs_TEXCOORD8.xyz = u_xlat1.xyz;
    vs_TEXCOORD8.w = 0.0;
    u_xlat2.xyz = u_xlat1.yzx * u_xlat4.zxy;
    u_xlat1.xyz = u_xlat4.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
    u_xlat27 = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD9.xyz = vec3(u_xlat27) * u_xlat1.xyz;
    vs_TEXCOORD9.w = 0.0;
    u_xlat27 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat27 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat27;
    vs_TEXCOORD10.w = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat27;
    vs_TEXCOORD10.xyz = u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowPos[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	mediump float _CausticUVScale;
uniform 	mediump float _CausticSpeed;
uniform 	mediump vec4 _CausticColor;
uniform 	mediump float _CausticDepth;
uniform 	mediump float _CausticDistance;
uniform 	mediump float _CausticDistortionValue;
uniform 	mediump vec4 _DepthFoamMask_ST;
uniform 	mediump float _DepthFoamSpeed;
uniform 	mediump vec4 _DepthFoamColor;
uniform 	mediump float _DepthFoamExtent;
uniform 	mediump float _DepthFoamDistance;
uniform 	mediump float _DepthFoamSubdivision;
uniform 	mediump float _DepthFoamWidth;
uniform 	mediump float _DepthFoamPhaseScale;
uniform 	mediump float _DepthFoamCloseFadeOffset;
uniform 	mediump float _DepthFoamCloseFadeDistance;
uniform 	float _NormalMapScale;
uniform 	float _Normal01_U_Speed;
uniform 	float _Normal01_VSpeed;
uniform 	float _NormalMapBias;
uniform 	float _Normal02_U_Speed;
uniform 	float _Normal02_V_Speed;
uniform 	float _RefractionIntensity;
uniform 	float _OpacityByDepth;
uniform 	float _SpecularIntensity;
uniform 	vec3 _ES_MoonDirection;
uniform 	vec3 _ES_SunDirection;
uniform 	float _Gloss;
uniform 	float _ShoreTransparency;
uniform 	float _SpecularPower;
uniform 	vec4 _ShallowColor;
uniform 	float _ShoreFade;
uniform 	vec4 _DeepColor;
uniform 	float _DeepColorDepth;
uniform 	float _DeepColorFade;
uniform 	vec4 _DistortionIntensity;
uniform 	float _SSRDistortion;
uniform 	float _SSRDistortion_Shore;
uniform 	float _SSRIntensity;
uniform 	float _ReflectionIntensity;
uniform 	float _FresnelPower;
uniform 	float _ShoreReflectionFade;
uniform 	vec3 _ES_MainLightColor;
uniform 	mediump float _RippleTillingScale;
uniform 	mediump float _Ripple02Rotate;
uniform 	mediump float _ProjectUVScale;
uniform 	mediump float _CausticFade;
uniform 	mediump float _CausticFadeExponent;
uniform 	vec4 _ReflectionSkyCubeMap_HDR;
uniform lowp sampler2D _Normal01;
uniform lowp sampler2D _Normal02;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _SceneScaledBufferBeforTransParent;
uniform lowp samplerCube _ReflectionSkyCubeMap;
uniform lowp sampler2D _SSRTexture;
uniform lowp sampler2D _DepthFoamMask;
uniform lowp sampler2D _WaterRippleTex;
uniform lowp sampler2DShadow hlslcc_zcmp_CascadeShadowMapTexture;
uniform lowp sampler2D _CascadeShadowMapTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD8;
in highp vec4 vs_TEXCOORD9;
in highp vec4 vs_TEXCOORD10;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
lowp float u_xlat10_0;
int u_xlati0;
uint u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec3 u_xlat10_1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
lowp vec4 u_xlat10_2;
bvec4 u_xlatb2;
mediump vec3 u_xlat16_3;
vec4 u_xlat4;
mediump vec3 u_xlat16_4;
lowp vec4 u_xlat10_4;
vec3 u_xlat5;
lowp float u_xlat10_5;
vec4 u_xlat6;
vec4 u_xlat7;
mediump vec3 u_xlat16_7;
vec4 u_xlat8;
vec3 u_xlat9;
vec3 u_xlat10;
mediump vec3 u_xlat16_10;
vec3 u_xlat11;
vec3 u_xlat12;
lowp vec3 u_xlat10_12;
vec3 u_xlat13;
vec3 u_xlat14;
vec3 u_xlat15;
mediump float u_xlat16_16;
mediump vec2 u_xlat16_17;
float u_xlat18;
bool u_xlatb18;
vec3 u_xlat19;
mediump vec3 u_xlat16_21;
vec3 u_xlat23;
mediump float u_xlat16_23;
bool u_xlatb23;
vec3 u_xlat25;
bool u_xlatb25;
float u_xlat26;
vec2 u_xlat36;
mediump float u_xlat16_36;
lowp float u_xlat10_36;
float u_xlat37;
lowp float u_xlat10_37;
int u_xlati37;
uint u_xlatu37;
bool u_xlatb37;
float u_xlat41;
float u_xlat42;
lowp float u_xlat10_54;
float u_xlat55;
mediump float u_xlat16_55;
mediump float u_xlat16_57;
float u_xlat59;
mediump float u_xlat16_59;
bool u_xlatb59;
float u_xlat60;
bool u_xlatb60;
float u_xlat61;
void main()
{
    u_xlat0 = vs_TEXCOORD5.xzxz * vec4(_ProjectUVScale, _ProjectUVScale, _RippleTillingScale, _RippleTillingScale);
    u_xlat1.x = _Time.y * _Normal01_U_Speed + u_xlat0.x;
    u_xlat1.yz = _Time.yy * vec2(_Normal01_VSpeed, _Normal02_U_Speed) + u_xlat0.yx;
    u_xlat1.w = _Time.y * _Normal02_V_Speed + u_xlat0.y;
    u_xlat10_2.xyz = texture(_Normal01, u_xlat1.xy, _NormalMapBias).xyz;
    u_xlat16_2.xyz = u_xlat10_2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_3.xy = u_xlat16_2.xy * vec2(_NormalMapScale);
    u_xlat10_1.xyz = texture(_Normal02, u_xlat1.zw, _NormalMapBias).xyz;
    u_xlat16_2.w = -1.0;
    u_xlat16_4.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_2.wwz;
    u_xlat16_4.xy = u_xlat16_4.xy * vec2(_NormalMapScale);
    u_xlat16_3.z = -1.0;
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat0.x = float(1.0) / vs_TEXCOORD4.w;
    u_xlat1.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat18 = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat18 = _ZBufferParams.z * u_xlat18 + _ZBufferParams.w;
    u_xlat18 = float(1.0) / u_xlat18;
    u_xlat1.x = vs_TEXCOORD10.w + 9.99999975e-05;
    u_xlat1.x = (-u_xlat18) / u_xlat1.x;
    u_xlat19.xyz = u_xlat1.xxx * vs_TEXCOORD10.xyz;
    u_xlat5.xyz = vs_TEXCOORD10.xyz * u_xlat1.xxx + _WorldSpaceCameraPos.xyz;
    u_xlat6.xyz = (-u_xlat5.xyz) + vs_TEXCOORD5.xyz;
    u_xlat1.x = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlat6.xz = u_xlat16_3.xy * vec2(vec2(_RefractionIntensity, _RefractionIntensity));
    u_xlat0.x = u_xlat0.x * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat6.xz = u_xlat0.xx * u_xlat6.xz;
    u_xlat6.xz = u_xlat6.xz * vs_TEXCOORD4.ww;
    u_xlat0.x = u_xlat18 + (-vs_TEXCOORD4.w);
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat7.xy = u_xlat0.xx * u_xlat6.xz;
    u_xlat7.z = 0.0;
    u_xlat6.xzw = u_xlat7.xyz + vs_TEXCOORD4.xyw;
    u_xlat0.xy = u_xlat6.xz / u_xlat6.ww;
    u_xlat0.x = texture(_CameraDepthTexture, u_xlat0.xy).x;
    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat0.x = u_xlat0.x + (-vs_TEXCOORD4.w);
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat6.xzw = u_xlat0.xxx * u_xlat7.xyz + vs_TEXCOORD4.xyw;
    u_xlat0.xy = u_xlat6.xz / u_xlat6.ww;
    u_xlat0.x = texture(_CameraDepthTexture, u_xlat0.xy).x;
    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat0.x = u_xlat0.x + (-vs_TEXCOORD4.w);
    u_xlat18 = 0.100000001 / _OpacityByDepth;
    u_xlat18 = u_xlat18 * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat16_4.xz = u_xlat16_3.xy;
    u_xlat16_4.y = 1.0;
    u_xlat16_59 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);
    u_xlat16_59 = inversesqrt(u_xlat16_59);
    u_xlat16_7.xyz = u_xlat16_4.xyz * vec3(u_xlat16_59);
#ifdef UNITY_ADRENO_ES3
    u_xlatb59 = !!(0.0>=_ES_MoonDirection.y);
#else
    u_xlatb59 = 0.0>=_ES_MoonDirection.y;
#endif
    u_xlat8.xyz = (bool(u_xlatb59)) ? _ES_SunDirection.xyz : _ES_MoonDirection.xyz;
    u_xlat9.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat59 = dot(u_xlat9.xyz, u_xlat9.xyz);
    u_xlat60 = inversesqrt(u_xlat59);
    u_xlat10.xyz = vec3(u_xlat60) * u_xlat9.xyz;
    u_xlat8.xyz = u_xlat9.xyz * vec3(u_xlat60) + u_xlat8.xyz;
    u_xlat60 = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat60 = inversesqrt(u_xlat60);
    u_xlat8.xyz = vec3(u_xlat60) * u_xlat8.xyz;
    u_xlat60 = dot(u_xlat16_7.xyz, u_xlat8.xyz);
    u_xlat25.x = _Gloss * 128.0;
    u_xlat60 = max(u_xlat60, 9.99999975e-05);
    u_xlat60 = log2(u_xlat60);
    u_xlat60 = u_xlat60 * u_xlat25.x;
    u_xlat60 = exp2(u_xlat60);
    u_xlat60 = u_xlat60 * _SpecularIntensity;
    u_xlat60 = max(u_xlat60, 0.0);
    u_xlat60 = min(u_xlat60, 16.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb25 = !!(_ES_MoonDirection.y>=9.99999975e-05);
#else
    u_xlatb25 = _ES_MoonDirection.y>=9.99999975e-05;
#endif
    u_xlat25.x = u_xlatb25 ? 1.0 : float(0.0);
    u_xlat61 = _ES_MoonDirection.y + -1.0;
    u_xlat25.x = u_xlat25.x * u_xlat61 + 1.0;
    u_xlat61 = float(1.0) / _ShoreTransparency;
    u_xlat8.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat8.xyz = u_xlat8.xxx * vs_TEXCOORD6.xyz;
    u_xlat8.x = dot(u_xlat10.xyz, u_xlat8.xyz);
    u_xlat8.x = (-u_xlat8.x) + 1.0;
    u_xlat8.x = max(u_xlat8.x, 9.99999975e-05);
    u_xlat8.x = log2(u_xlat8.x);
    u_xlat26 = u_xlat8.x * _SpecularPower;
    u_xlat26 = exp2(u_xlat26);
    u_xlat9.xyz = u_xlat25.xxx * _LightColor0.xyz;
    u_xlat9.xyz = vec3(u_xlat60) * u_xlat9.xyz;
    u_xlat60 = u_xlat0.x + -1.0;
    u_xlat60 = u_xlat61 * u_xlat60;
    u_xlat60 = u_xlat60 * 0.100000001;
#ifdef UNITY_ADRENO_ES3
    u_xlat60 = min(max(u_xlat60, 0.0), 1.0);
#else
    u_xlat60 = clamp(u_xlat60, 0.0, 1.0);
#endif
    u_xlat9.xyz = vec3(u_xlat60) * u_xlat9.xyz;
    u_xlat60 = u_xlat0.x * u_xlat61;
#ifdef UNITY_ADRENO_ES3
    u_xlat60 = min(max(u_xlat60, 0.0), 1.0);
#else
    u_xlat60 = clamp(u_xlat60, 0.0, 1.0);
#endif
    u_xlat60 = max(u_xlat60, 9.99999975e-05);
    u_xlat60 = log2(u_xlat60);
    u_xlat60 = u_xlat60 * _ShoreFade;
    u_xlat60 = exp2(u_xlat60);
    u_xlat11.xyz = _ShallowColor.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat11.xyz = vec3(u_xlat60) * u_xlat11.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat6.xz = u_xlat6.xz / vs_TEXCOORD4.ww;
    u_xlat10_12.xyz = texture(_SceneScaledBufferBeforTransParent, u_xlat6.xz).xyz;
    u_xlat6.x = u_xlat1.x * _CausticDistortionValue;
    u_xlat6.xz = u_xlat6.xx * u_xlat16_7.xz;
    u_xlat7.z = _Time.y * _CausticSpeed;
    u_xlat6.xz = u_xlat5.xz * vec2(_CausticUVScale) + u_xlat6.xz;
    u_xlat13.x = _Normal01_U_Speed * 25.0;
    u_xlat13.y = _Normal01_VSpeed * 25.0;
    u_xlat7.xy = u_xlat7.zz * u_xlat13.xy + u_xlat6.xz;
    u_xlat13.x = dot(u_xlat7.xyz, vec3(-2.0, 3.0, 1.0));
    u_xlat13.y = dot(u_xlat7.xyz, vec3(-1.0, -2.0, 2.0));
    u_xlat13.z = dot(u_xlat7.xzy, vec3(2.0, 2.0, 1.0));
    u_xlat7.xyz = u_xlat13.xyz * vec3(0.400000006, 0.400000006, 0.400000006);
    u_xlat14.x = dot(u_xlat7.xyz, vec3(-2.0, 3.0, 1.0));
    u_xlat14.y = dot(u_xlat7.xyz, vec3(-1.0, -2.0, 2.0));
    u_xlat14.z = dot(u_xlat7.xzy, vec3(2.0, 2.0, 1.0));
    u_xlat7.xyz = u_xlat14.xyz * vec3(0.300000012, 0.300000012, 0.300000012);
    u_xlat6.x = dot(u_xlat7.xyz, vec3(-2.0, 3.0, 1.0));
    u_xlat6.z = dot(u_xlat7.xyz, vec3(-1.0, -2.0, 2.0));
    u_xlat7.x = dot(u_xlat7.xzy, vec3(2.0, 2.0, 1.0));
    u_xlat25.xyz = fract(u_xlat13.xyz);
    u_xlat25.xyz = (-u_xlat25.xyz) + vec3(0.5, 0.5, 0.5);
    u_xlat25.x = dot(u_xlat25.xyz, u_xlat25.xyz);
    u_xlat13.xyz = fract(u_xlat14.xyz);
    u_xlat13.xyz = (-u_xlat13.xyz) + vec3(0.5, 0.5, 0.5);
    u_xlat25.y = dot(u_xlat13.xyz, u_xlat13.xyz);
    u_xlat25.xy = sqrt(u_xlat25.xy);
    u_xlat25.x = min(u_xlat25.y, u_xlat25.x);
    u_xlat13.xy = fract(u_xlat6.xz);
    u_xlat13.z = fract(u_xlat7.x);
    u_xlat7.xzw = (-u_xlat13.xyz) + vec3(0.5, 0.5, 0.5);
    u_xlat6.x = dot(u_xlat7.xzw, u_xlat7.xzw);
    u_xlat6.x = sqrt(u_xlat6.x);
    u_xlat6.x = min(u_xlat6.x, u_xlat25.x);
    u_xlat6.x = log2(u_xlat6.x);
    u_xlat6.x = u_xlat6.x * 7.0;
    u_xlat6.x = exp2(u_xlat6.x);
    u_xlat6.x = u_xlat6.x * 25.0;
    u_xlat16_4.xy = vec2(float(_CausticDepth) + float(9.99999975e-05), float(_CausticDistance) + float(9.99999975e-05));
    u_xlat42 = u_xlat6.y / u_xlat16_4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat42 = min(max(u_xlat42, 0.0), 1.0);
#else
    u_xlat42 = clamp(u_xlat42, 0.0, 1.0);
#endif
    u_xlat19.x = dot(u_xlat19.xyz, u_xlat19.xyz);
    u_xlat19.x = sqrt(u_xlat19.x);
    u_xlat19.x = u_xlat19.x / u_xlat16_4.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat19.x = min(max(u_xlat19.x, 0.0), 1.0);
#else
    u_xlat19.x = clamp(u_xlat19.x, 0.0, 1.0);
#endif
    u_xlat19.x = (-u_xlat19.x) + 1.0;
    u_xlat19.x = u_xlat19.x * u_xlat42;
    u_xlat7.xyz = u_xlat5.xyz + (-unity_ShadowSplitSpheres[0].xyz);
    u_xlat13.xyz = u_xlat5.xyz + (-unity_ShadowSplitSpheres[1].xyz);
    u_xlat14.xyz = u_xlat5.xyz + (-unity_ShadowSplitSpheres[2].xyz);
    u_xlat15.xyz = u_xlat5.xyz + (-unity_ShadowSplitSpheres[3].xyz);
    u_xlat2.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat2.y = dot(u_xlat13.xyz, u_xlat13.xyz);
    u_xlat2.z = dot(u_xlat14.xyz, u_xlat14.xyz);
    u_xlat2.w = dot(u_xlat15.xyz, u_xlat15.xyz);
    u_xlatb2 = lessThan(u_xlat2, unity_ShadowSplitSqRadii);
    u_xlat2 = mix(vec4(0.0, 0.0, 0.0, 0.0), vec4(1.0, 1.0, 1.0, 1.0), vec4(u_xlatb2));
    u_xlat16_57 = u_xlat2.y + u_xlat2.x;
    u_xlat16_4.x = u_xlat2.z + u_xlat16_57;
    u_xlat7.x = -0.0;
    u_xlat7.y = (-u_xlat2.x);
    u_xlat7.z = (-u_xlat16_57);
    u_xlat7.w = (-u_xlat16_4.x);
    u_xlat2 = u_xlat2 + u_xlat7;
    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat16_57 = dot(u_xlat2, vec4(1.0, 1.0, 1.0, 1.0));
#ifdef UNITY_ADRENO_ES3
    u_xlatb37 = !!(u_xlat16_57>=0.5);
#else
    u_xlatb37 = u_xlat16_57>=0.5;
#endif
    if(u_xlatb37){
        u_xlat37 = dot(u_xlat2.yzw, vec3(1.0, 2.0, 3.0));
        u_xlat37 = min(u_xlat37, 3.0);
        u_xlatu37 = uint(u_xlat37);
        u_xlat5.xyz = u_xlat5.xyz + (-unity_ShadowPos[int(u_xlatu37)].xyz);
        u_xlati37 = int(u_xlatu37) << 2;
        u_xlat7.xyz = u_xlat5.yyy * hlslcc_mtx4x4unity_WorldToShadow[(u_xlati37 + 1)].xyz;
        u_xlat7.xyz = hlslcc_mtx4x4unity_WorldToShadow[u_xlati37].xyz * u_xlat5.xxx + u_xlat7.xyz;
        u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToShadow[(u_xlati37 + 2)].xyz * u_xlat5.zzz + u_xlat7.xyz;
        u_xlat5.xyz = u_xlat5.xyz + hlslcc_mtx4x4unity_WorldToShadow[(u_xlati37 + 3)].xyz;
        vec3 txVec0 = vec3(u_xlat5.xy,u_xlat5.z);
        u_xlat10_37 = textureLod(hlslcc_zcmp_CascadeShadowMapTexture, txVec0, 0.0);
        u_xlat16_55 = (-_LightShadowData.x) + 1.0;
        u_xlat37 = u_xlat10_37 * u_xlat16_55 + _LightShadowData.x;
    } else {
        u_xlat37 = 1.0;
    //ENDIF
    }
    u_xlat19.x = u_xlat37 * u_xlat19.x;
    u_xlat16_4.xyz = _LightColor0.xyz * _CausticColor.xyz;
    u_xlat16_4.xyz = u_xlat6.xxx * u_xlat16_4.xyz;
    u_xlat16_4.xyz = u_xlat19.xxx * u_xlat16_4.xyz;
    u_xlat16_57 = _CausticFade + 9.99999975e-05;
    u_xlat1.x = u_xlat1.x / u_xlat16_57;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.x = log2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _CausticFadeExponent;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat1.x = (-u_xlat1.x) + 1.0;
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat1.xxx + vec3(1.0, 1.0, 1.0);
    u_xlat16_1.xyz = u_xlat16_4.xyz * u_xlat10_12.xyz;
    u_xlat5.xyz = u_xlat16_1.xyz * u_xlat11.xyz;
    u_xlat55 = 0.100000001 / _DeepColorDepth;
    u_xlat55 = u_xlat0.x * u_xlat55;
#ifdef UNITY_ADRENO_ES3
    u_xlat55 = min(max(u_xlat55, 0.0), 1.0);
#else
    u_xlat55 = clamp(u_xlat55, 0.0, 1.0);
#endif
    u_xlat55 = max(u_xlat55, 9.99999975e-05);
    u_xlat55 = log2(u_xlat55);
    u_xlat55 = u_xlat55 * _DeepColorFade;
    u_xlat55 = exp2(u_xlat55);
    u_xlat7.xyz = (-u_xlat11.xyz) * u_xlat16_1.xyz + _DeepColor.xyz;
    u_xlat7.xyz = vec3(u_xlat55) * u_xlat7.xyz + u_xlat5.xyz;
    u_xlat12.xyz = u_xlat16_3.xyz * _DistortionIntensity.xyz;
    u_xlat13.x = vs_TEXCOORD8.x;
    u_xlat13.y = vs_TEXCOORD9.x;
    u_xlat13.z = vs_TEXCOORD6.x;
    u_xlat13.x = dot(u_xlat13.xyz, u_xlat12.xyz);
    u_xlat14.x = vs_TEXCOORD8.y;
    u_xlat14.y = vs_TEXCOORD9.y;
    u_xlat14.z = vs_TEXCOORD6.y;
    u_xlat13.y = dot(u_xlat14.xyz, u_xlat12.xyz);
    u_xlat14.x = vs_TEXCOORD8.z;
    u_xlat14.y = vs_TEXCOORD9.z;
    u_xlat14.z = vs_TEXCOORD6.z;
    u_xlat13.z = dot(u_xlat14.xyz, u_xlat12.xyz);
    u_xlat55 = dot(u_xlat13.xyz, u_xlat13.xyz);
    u_xlat55 = inversesqrt(u_xlat55);
    u_xlat13.xyz = vec3(u_xlat55) * u_xlat13.xyz;
    u_xlat55 = dot((-u_xlat10.xyz), u_xlat13.xyz);
    u_xlat55 = u_xlat55 + u_xlat55;
    u_xlat10.xyz = u_xlat13.xyz * (-vec3(u_xlat55)) + (-u_xlat10.xyz);
    u_xlat10_2 = textureLod(_ReflectionSkyCubeMap, u_xlat10.xyz, 0.0);
    u_xlat16_3.x = u_xlat10_2.w + -1.0;
    u_xlat16_3.x = _ReflectionSkyCubeMap_HDR.w * u_xlat16_3.x + 1.0;
    u_xlat16_3.x = log2(u_xlat16_3.x);
    u_xlat16_3.x = u_xlat16_3.x * _ReflectionSkyCubeMap_HDR.y;
    u_xlat16_3.x = exp2(u_xlat16_3.x);
    u_xlat16_3.x = u_xlat16_3.x * _ReflectionSkyCubeMap_HDR.x;
    u_xlat16_21.xyz = u_xlat10_2.xyz * u_xlat16_3.xxx;
    u_xlat6.xz = u_xlat12.xy * vec2(_SSRDistortion);
    u_xlat55 = float(1.0) / _SSRDistortion_Shore;
    u_xlat55 = u_xlat0.x * u_xlat55;
#ifdef UNITY_ADRENO_ES3
    u_xlat55 = min(max(u_xlat55, 0.0), 1.0);
#else
    u_xlat55 = clamp(u_xlat55, 0.0, 1.0);
#endif
    u_xlat6.xz = vec2(u_xlat55) * u_xlat6.xz;
    u_xlat6.xz = u_xlat6.xz * vs_TEXCOORD4.ww + vs_TEXCOORD4.xy;
    u_xlat6.xz = u_xlat6.xz / vs_TEXCOORD4.ww;
    u_xlat10_4 = texture(_SSRTexture, u_xlat6.xz).wxyz;
    u_xlat16_10.xyz = (-u_xlat16_3.xxx) * u_xlat10_2.xyz + u_xlat10_4.yzw;
    u_xlat10.xyz = u_xlat16_10.xyz * vec3(vec3(_SSRIntensity, _SSRIntensity, _SSRIntensity));
    u_xlat16_4.x = u_xlat10_4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat10.xyz = u_xlat16_4.xxx * u_xlat10.xyz + u_xlat16_21.xyz;
    u_xlat55 = u_xlat8.x * _FresnelPower;
    u_xlat55 = exp2(u_xlat55);
    u_xlat55 = u_xlat55 * _ReflectionIntensity;
    u_xlat6.x = float(1.0) / _ShoreReflectionFade;
    u_xlat0.x = u_xlat0.x * u_xlat6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x * u_xlat55;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat8.xzw = (-u_xlat7.xyz) + u_xlat10.xyz;
    u_xlat7.xyz = u_xlat0.xxx * u_xlat8.xzw + u_xlat7.xyz;
    u_xlat1.xyz = (-u_xlat11.xyz) * u_xlat16_1.xyz + u_xlat7.xyz;
    u_xlat1.xyz = vec3(u_xlat60) * u_xlat1.xyz + u_xlat5.xyz;
    u_xlat0.x = (-vs_TEXCOORD5.y) * _WorldSpaceLightPos0.w + _WorldSpaceLightPos0.y;
    u_xlat16_3.x = max(u_xlat0.x, 0.0);
    u_xlat5.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowSplitSpheres[0].xyz);
    u_xlat6.xzw = vs_TEXCOORD5.xyz + (-unity_ShadowSplitSpheres[1].xyz);
    u_xlat7.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowSplitSpheres[2].xyz);
    u_xlat8.xzw = vs_TEXCOORD5.xyz + (-unity_ShadowSplitSpheres[3].xyz);
    u_xlat2.x = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat2.y = dot(u_xlat6.xzw, u_xlat6.xzw);
    u_xlat2.z = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat2.w = dot(u_xlat8.xzw, u_xlat8.xzw);
    u_xlatb2 = lessThan(u_xlat2, unity_ShadowSplitSqRadii);
    u_xlat2 = mix(vec4(0.0, 0.0, 0.0, 0.0), vec4(1.0, 1.0, 1.0, 1.0), vec4(u_xlatb2));
    u_xlat16_21.x = u_xlat2.y + u_xlat2.x;
    u_xlat16_21.y = u_xlat2.z + u_xlat16_21.x;
    u_xlat4.x = -0.0;
    u_xlat4.y = (-u_xlat2.x);
    u_xlat4.zw = (-u_xlat16_21.xy);
    u_xlat2 = u_xlat2 + u_xlat4;
    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat16_21.x = dot(u_xlat2, vec4(1.0, 1.0, 1.0, 1.0));
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat16_21.x>=0.5);
#else
    u_xlatb0 = u_xlat16_21.x>=0.5;
#endif
    if(u_xlatb0){
        u_xlat0.x = dot(u_xlat2.yzw, vec3(1.0, 2.0, 3.0));
        u_xlat0.x = min(u_xlat0.x, 3.0);
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat5.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowPos[int(u_xlatu0)].xyz);
        u_xlati0 = int(u_xlatu0) << 2;
        u_xlat6.xzw = u_xlat5.yyy * hlslcc_mtx4x4unity_WorldToShadow[(u_xlati0 + 1)].xyz;
        u_xlat6.xzw = hlslcc_mtx4x4unity_WorldToShadow[u_xlati0].xyz * u_xlat5.xxx + u_xlat6.xzw;
        u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToShadow[(u_xlati0 + 2)].xyz * u_xlat5.zzz + u_xlat6.xzw;
        u_xlat5.xyz = u_xlat5.xyz + hlslcc_mtx4x4unity_WorldToShadow[(u_xlati0 + 3)].xyz;
        vec3 txVec1 = vec3(u_xlat5.xy,u_xlat5.z);
        u_xlat10_0 = textureLod(hlslcc_zcmp_CascadeShadowMapTexture, txVec1, 0.0);
        u_xlat16_55 = (-_LightShadowData.x) + 1.0;
        u_xlat0.x = u_xlat10_0 * u_xlat16_55 + _LightShadowData.x;
    } else {
        u_xlat0.x = 1.0;
    //ENDIF
    }
    u_xlat16_3.xyz = u_xlat16_3.xxx * _LightColor0.xyz;
    u_xlat5.xyz = u_xlat16_3.xyz * u_xlat0.xxx + vs_TEXCOORD1.xyz;
    u_xlat16_3.xyz = u_xlat5.xyz * vec3(0.300000012, 0.300000012, 0.300000012) + vec3(0.699999988, 0.699999988, 0.699999988);
    u_xlat0.x = sqrt(u_xlat59);
    u_xlat16_57 = u_xlat0.x + (-_DepthFoamCloseFadeOffset);
    u_xlat16_57 = u_xlat16_57 / _DepthFoamCloseFadeDistance;
    u_xlat16_16 = vs_COLOR0.x * _DepthFoamExtent;
    u_xlat55 = max(u_xlat6.y, 0.0);
    u_xlat55 = min(u_xlat16_16, u_xlat55);
    u_xlat16_16 = _DepthFoamExtent * vs_COLOR0.x + 9.99999975e-05;
    u_xlat55 = u_xlat55 / u_xlat16_16;
    u_xlat55 = (-u_xlat55) + 1.0;
    u_xlat5.xy = vec2(_Time.y * _DepthFoamMask_ST.z, _Time.y * _DepthFoamMask_ST.w);
    u_xlat5.xy = fract(u_xlat5.xy);
    u_xlat5.xy = _DepthFoamMask_ST.xy * vs_TEXCOORD5.xz + u_xlat5.xy;
    u_xlat10_5 = texture(_DepthFoamMask, u_xlat5.xy).x;
    u_xlat23.x = vs_TEXCOORD5.z + vs_TEXCOORD5.x;
    u_xlat23.x = u_xlat23.x * _DepthFoamPhaseScale;
    u_xlat23.x = _DepthFoamSpeed * _Time.y + u_xlat23.x;
    u_xlat41 = (-u_xlat55) + 1.0;
    u_xlat16_16 = _DepthFoamSubdivision * u_xlat55 + u_xlat23.x;
    u_xlat16_16 = sin(u_xlat16_16);
    u_xlat16_16 = _DepthFoamWidth * u_xlat55 + u_xlat16_16;
    u_xlat16_23 = u_xlat10_5 * 2.0 + -1.0;
    u_xlat23.x = u_xlat16_23 + u_xlat16_16;
#ifdef UNITY_ADRENO_ES3
    u_xlatb23 = !!(u_xlat23.x>=u_xlat41);
#else
    u_xlatb23 = u_xlat23.x>=u_xlat41;
#endif
    u_xlat23.x = u_xlatb23 ? 1.0 : float(0.0);
    u_xlat5.x = u_xlat23.x * u_xlat10_5;
    u_xlat16_16 = _DepthFoamDistance + 9.99999975e-05;
    u_xlat16_16 = u_xlat0.x / u_xlat16_16;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat16_0 = (-u_xlat16_16) + 1.0;
    u_xlat16_16 = vs_COLOR0.y * _DepthFoamColor.w;
    u_xlat16_57 = u_xlat16_57 * u_xlat16_16;
    u_xlat16_57 = u_xlat5.x * u_xlat16_57;
    u_xlat16_57 = u_xlat55 * u_xlat16_57;
    u_xlat16_57 = u_xlat16_0 * u_xlat16_57;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_57 = min(max(u_xlat16_57, 0.0), 1.0);
#else
    u_xlat16_57 = clamp(u_xlat16_57, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = _DepthFoamColor.xyz * u_xlat16_3.xyz + (-u_xlat1.xyz);
    u_xlat16_3.xyz = vec3(u_xlat16_57) * u_xlat16_3.xyz + u_xlat1.xyz;
    u_xlat16_0 = max(_LightColor0.w, 0.5);
    u_xlat1.xyz = u_xlat9.xyz * vec3(u_xlat26) + u_xlat16_3.xyz;
    u_xlat36.xy = fract(u_xlat0.zw);
    u_xlat16_3.xy = u_xlat36.xy * vec2(1.14999998, 1.14999998);
    u_xlat16_16 = sin(_Ripple02Rotate);
    u_xlat16_17.x = cos(_Ripple02Rotate);
    u_xlat5.x = (-u_xlat16_16);
    u_xlat16_17.y = u_xlat16_16;
    u_xlat6.x = dot(u_xlat16_3.xy, u_xlat16_17.xy);
    u_xlat5.y = u_xlat16_17.x;
    u_xlat6.y = dot(u_xlat16_3.xy, u_xlat5.xy);
    u_xlat10_36 = texture(_WaterRippleTex, u_xlat36.xy).x;
    u_xlat10_54 = texture(_WaterRippleTex, u_xlat6.xy).x;
    u_xlat16_36 = u_xlat10_54 + u_xlat10_36;
    u_xlat36.x = u_xlat16_36 * u_xlat18;
    u_xlat5.xyz = _ES_MainLightColor.xyz * vec3(u_xlat16_0) + (-u_xlat1.xyz);
    u_xlat0.xzw = u_xlat36.xxx * u_xlat5.xyz + u_xlat1.xyz;
    u_xlat1.w = u_xlat18 * vs_COLOR0.w;
    u_xlat5.xyz = vs_TEXCOORD5.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat6.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat6.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat6.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat18 = dot(u_xlat5.xyz, u_xlat6.xyz);
    u_xlat5.x = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat5.x = sqrt(u_xlat5.x);
    u_xlat23.y = u_xlat5.x * _HeigtFogParams.y;
    u_xlat59 = u_xlat5.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat59 = min(max(u_xlat59, 0.0), 1.0);
#else
    u_xlat59 = clamp(u_xlat59, 0.0, 1.0);
#endif
    u_xlat6.x = (-u_xlat59) + 2.0;
    u_xlat59 = u_xlat59 * u_xlat6.x;
    u_xlat6.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!((-u_xlat18)>=u_xlat6.x);
#else
    u_xlatb18 = (-u_xlat18)>=u_xlat6.x;
#endif
    u_xlat6.x = u_xlat59 * _HeigtFogColDelta.w;
    u_xlat18 = (u_xlatb18) ? u_xlat6.x : u_xlat59;
    u_xlat18 = log2(u_xlat18);
    u_xlat18 = u_xlat18 * unity_FogColor.w;
    u_xlat18 = exp2(u_xlat18);
    u_xlat18 = min(u_xlat18, _HeigtFogColBase.w);
    u_xlat59 = vs_TEXCOORD5.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat59 = min(max(u_xlat59, 0.0), 1.0);
#else
    u_xlat59 = clamp(u_xlat59, 0.0, 1.0);
#endif
    u_xlat16_3.x = (-u_xlat59) + 2.0;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat59;
    u_xlat6.xyz = u_xlat16_3.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat59 = u_xlat5.x + (-_HeigtFogRamp.w);
    u_xlat59 = u_xlat59 * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat59 = min(max(u_xlat59, 0.0), 1.0);
#else
    u_xlat59 = clamp(u_xlat59, 0.0, 1.0);
#endif
    u_xlat7.xyz = (-u_xlat6.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat6.xyz = vec3(u_xlat59) * u_xlat7.xyz + u_xlat6.xyz;
    u_xlat59 = u_xlat5.y * _HeigtFogParams.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb60 = !!(0.00999999978<abs(u_xlat59));
#else
    u_xlatb60 = 0.00999999978<abs(u_xlat59);
#endif
    u_xlat7.x = u_xlat59 * -1.44269502;
    u_xlat7.x = exp2(u_xlat7.x);
    u_xlat7.x = (-u_xlat7.x) + 1.0;
    u_xlat59 = u_xlat7.x / u_xlat59;
    u_xlat16_3.x = (u_xlatb60) ? u_xlat59 : 1.0;
    u_xlat23.x = u_xlat5.y * _HeigtFogParams2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb59 = !!(0.00999999978<abs(u_xlat23.x));
#else
    u_xlatb59 = 0.00999999978<abs(u_xlat23.x);
#endif
    u_xlat60 = u_xlat23.x * -1.44269502;
    u_xlat60 = exp2(u_xlat60);
    u_xlat60 = (-u_xlat60) + 1.0;
    u_xlat23.x = u_xlat60 / u_xlat23.x;
    u_xlat16_3.y = (u_xlatb59) ? u_xlat23.x : 1.0;
    u_xlat23.x = u_xlat5.x * _HeigtFogParams2.y;
    u_xlat16_3.xy = u_xlat16_3.xy * u_xlat23.yx;
    u_xlat16_3.x = exp2((-u_xlat16_3.x));
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat16_21.x = exp2((-u_xlat16_3.y));
    u_xlat16_3.y = (-u_xlat16_21.x) + 1.0;
    u_xlat16_3.xy = max(u_xlat16_3.xy, vec2(0.0, 0.0));
    u_xlat16_3.x = u_xlat16_3.y + u_xlat16_3.x;
    u_xlat5.x = u_xlat5.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat16_21.x = (-u_xlat5.x) + 2.0;
    u_xlat16_21.x = u_xlat16_21.x * u_xlat5.x;
    u_xlat5.x = u_xlat16_21.x * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat5.x = u_xlat5.x + 1.0;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat5.x;
    u_xlat5.x = min(u_xlat16_3.x, _HeigtFogColBase.w);
    u_xlat23.x = vs_TEXCOORD5.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat23.x = min(max(u_xlat23.x, 0.0), 1.0);
#else
    u_xlat23.x = clamp(u_xlat23.x, 0.0, 1.0);
#endif
    u_xlat23.xyz = u_xlat23.xxx * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    u_xlat6.xyz = vec3(u_xlat18) * u_xlat6.xyz;
    u_xlat60 = (-u_xlat5.x) + 1.0;
    u_xlat6.xyz = vec3(u_xlat60) * u_xlat6.xyz;
    u_xlat5.xyz = u_xlat23.xyz * u_xlat5.xxx + u_xlat6.xyz;
    u_xlat18 = (-u_xlat18) + 1.0;
    u_xlat18 = u_xlat60 * u_xlat18;
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat0.xzw + u_xlat5.xyz;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" "MHY_SHADER_HIGH" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	mediump float _MHYZBias;
uniform 	vec4 hlslcc_mtx4x4_mhyJitteredVP[4];
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
out highp vec4 vs_TEXCOORD9;
out highp vec4 vs_TEXCOORD10;
float u_xlat0;
int u_xlati0;
vec4 u_xlat1;
bool u_xlatb1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
bool u_xlatb4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
mediump vec4 u_xlat16_6;
vec4 u_xlat7;
mediump vec3 u_xlat16_8;
vec3 u_xlat9;
float u_xlat10;
float u_xlat13;
bool u_xlatb13;
mediump float u_xlat16_14;
float u_xlat22;
float u_xlat28;
float u_xlat31;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat9.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4_mhyJitteredVP[1];
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[3] * u_xlat2.wwww + u_xlat1;
    u_xlat3.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    u_xlat3.xyw = u_xlat1.xyw;
    gl_Position = u_xlat3;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.xyw = u_xlat9.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat4.x = u_xlat1.y * _HeigtFogParams.x;
    u_xlat13 = u_xlat4.x * -1.44269502;
    u_xlat13 = exp2(u_xlat13);
    u_xlat13 = (-u_xlat13) + 1.0;
    u_xlat13 = u_xlat13 / u_xlat4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(0.00999999978<abs(u_xlat4.x));
#else
    u_xlatb4 = 0.00999999978<abs(u_xlat4.x);
#endif
    u_xlat16_5.x = (u_xlatb4) ? u_xlat13 : 1.0;
    u_xlat4.x = dot(u_xlat1.xyw, u_xlat1.xyw);
    u_xlat4.x = sqrt(u_xlat4.x);
    u_xlat13 = u_xlat4.x * _HeigtFogParams.y;
    u_xlat16_5.x = u_xlat13 * u_xlat16_5.x;
    u_xlat16_5.x = exp2((-u_xlat16_5.x));
    u_xlat16_5.x = (-u_xlat16_5.x) + 1.0;
    u_xlat13 = u_xlat1.y * _HeigtFogParams2.x;
    u_xlat22 = u_xlat13 * -1.44269502;
    u_xlat22 = exp2(u_xlat22);
    u_xlat22 = (-u_xlat22) + 1.0;
    u_xlat22 = u_xlat22 / u_xlat13;
#ifdef UNITY_ADRENO_ES3
    u_xlatb13 = !!(0.00999999978<abs(u_xlat13));
#else
    u_xlatb13 = 0.00999999978<abs(u_xlat13);
#endif
    u_xlat16_14 = (u_xlatb13) ? u_xlat22 : 1.0;
    u_xlat13 = u_xlat4.x * _HeigtFogParams2.y;
    u_xlat16_14 = u_xlat13 * u_xlat16_14;
    u_xlat16_14 = exp2((-u_xlat16_14));
    u_xlat16_5.y = (-u_xlat16_14) + 1.0;
    u_xlat16_5.xy = max(u_xlat16_5.xy, vec2(0.0, 0.0));
    u_xlat16_5.x = u_xlat16_5.y + u_xlat16_5.x;
    u_xlat13 = u_xlat4.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat13 = min(max(u_xlat13, 0.0), 1.0);
#else
    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
#endif
    u_xlat16_14 = (-u_xlat13) + 2.0;
    u_xlat16_14 = u_xlat13 * u_xlat16_14;
    u_xlat13 = u_xlat16_14 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat13 = u_xlat13 + 1.0;
    u_xlat16_5.x = u_xlat13 * u_xlat16_5.x;
    u_xlat13 = min(u_xlat16_5.x, _HeigtFogColBase.w);
    u_xlat22 = (-u_xlat13) + 1.0;
    u_xlat31 = _ProjectionParams.z * 0.999899983;
    u_xlat6.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat6.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat6.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat1.x = dot(u_xlat1.xyw, u_xlat6.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!((-u_xlat1.x)>=u_xlat31);
#else
    u_xlatb1 = (-u_xlat1.x)>=u_xlat31;
#endif
    u_xlat10 = u_xlat4.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat10 = min(max(u_xlat10, 0.0), 1.0);
#else
    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
#endif
    u_xlat28 = u_xlat4.x + (-_HeigtFogRamp.w);
    u_xlat28 = u_xlat28 * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat28 = min(max(u_xlat28, 0.0), 1.0);
#else
    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
#endif
    u_xlat4.x = (-u_xlat10) + 2.0;
    u_xlat10 = u_xlat10 * u_xlat4.x;
    u_xlat4.x = u_xlat10 * _HeigtFogColDelta.w;
    u_xlat1.x = (u_xlatb1) ? u_xlat4.x : u_xlat10;
    u_xlat1.x = log2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * unity_FogColor.w;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat1.x = min(u_xlat1.x, _HeigtFogColBase.w);
    u_xlat10 = u_xlat9.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat10 = min(max(u_xlat10, 0.0), 1.0);
#else
    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
#endif
    u_xlat16_5.x = (-u_xlat10) + 2.0;
    u_xlat16_5.x = u_xlat10 * u_xlat16_5.x;
    u_xlat6.xyz = u_xlat16_5.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat7.xyz = (-u_xlat6.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat6.xyz = vec3(u_xlat28) * u_xlat7.xyz + u_xlat6.xyz;
    u_xlat6.xyz = u_xlat1.xxx * u_xlat6.xyz;
    u_xlat1.x = (-u_xlat1.x) + 1.0;
    vs_TEXCOORD0.w = u_xlat22 * u_xlat1.x;
    u_xlat1.xyw = vec3(u_xlat22) * u_xlat6.xyz;
    u_xlat4.x = u_xlat9.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat4.xzw = u_xlat4.xxx * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    vs_TEXCOORD0.xyz = u_xlat4.xzw * vec3(u_xlat13) + u_xlat1.xyw;
    vs_TEXCOORD1.w = 1.0;
    u_xlat4.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat4.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat4.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat1.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
    u_xlat16_5.x = u_xlat4.y * u_xlat4.y;
    u_xlat16_5.x = u_xlat4.x * u_xlat4.x + (-u_xlat16_5.x);
    u_xlat16_6 = u_xlat4.yzzx * u_xlat4.xyzz;
    u_xlat16_8.x = dot(unity_SHBr, u_xlat16_6);
    u_xlat16_8.y = dot(unity_SHBg, u_xlat16_6);
    u_xlat16_8.z = dot(unity_SHBb, u_xlat16_6);
    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_8.xyz;
    u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat4.w = 1.0;
    u_xlat16_8.x = dot(unity_SHAr, u_xlat4);
    u_xlat16_8.y = dot(unity_SHAg, u_xlat4);
    u_xlat16_8.z = dot(unity_SHAb, u_xlat4);
    u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_8.xyz;
    vs_TEXCOORD1.xyz = u_xlat16_5.xyz;
    u_xlat1.x = u_xlat3.y * _ProjectionParams.x;
    u_xlat7.w = u_xlat1.x * 0.5;
    u_xlat7.xz = u_xlat3.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.z = u_xlat1.z;
    u_xlat3.xy = u_xlat7.zz + u_xlat7.xw;
    vs_TEXCOORD2 = u_xlat3;
    vs_TEXCOORD4.xyw = u_xlat3.xyw;
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD3.w = 0.0;
    u_xlat1.x = u_xlat2.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat2.x + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat2.z + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat2.w + u_xlat1.x;
    vs_TEXCOORD3.z = (-u_xlat1.x);
    vs_TEXCOORD5.w = 0.0;
    vs_TEXCOORD5.xyz = u_xlat9.xyz;
    u_xlat9.xyz = (-u_xlat9.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD6.w = 0.0;
    vs_TEXCOORD6.xyz = u_xlat4.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].www + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * in_POSITION0.yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.zzz + u_xlat1.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.www + u_xlat1.xyz;
    vs_TEXCOORD7.xyz = u_xlat1.xyz * vec3(-1.0, -1.0, 1.0);
    vs_TEXCOORD7.w = 0.0;
    u_xlat1.xyz = in_TANGENT0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat0 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0 = inversesqrt(u_xlat0);
    u_xlat1.xyz = vec3(u_xlat0) * u_xlat1.xyz;
    vs_TEXCOORD8.xyz = u_xlat1.xyz;
    vs_TEXCOORD8.w = 0.0;
    u_xlat2.xyz = u_xlat1.yzx * u_xlat4.zxy;
    u_xlat1.xyz = u_xlat4.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
    u_xlat0 = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD9.xyz = vec3(u_xlat0) * u_xlat1.xyz;
    vs_TEXCOORD9.w = 0.0;
    u_xlat0 = u_xlat9.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat9.x + u_xlat0;
    vs_TEXCOORD10.w = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat9.z + u_xlat0;
    vs_TEXCOORD10.xyz = u_xlat9.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowPos[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	mediump float _CausticUVScale;
uniform 	mediump float _CausticSpeed;
uniform 	mediump vec4 _CausticColor;
uniform 	mediump float _CausticDepth;
uniform 	mediump float _CausticDistance;
uniform 	mediump float _CausticDistortionValue;
uniform 	mediump vec4 _DepthFoamMask_ST;
uniform 	mediump float _DepthFoamSpeed;
uniform 	mediump vec4 _DepthFoamColor;
uniform 	mediump float _DepthFoamExtent;
uniform 	mediump float _DepthFoamDistance;
uniform 	mediump float _DepthFoamSubdivision;
uniform 	mediump float _DepthFoamWidth;
uniform 	mediump float _DepthFoamPhaseScale;
uniform 	mediump float _DepthFoamCloseFadeOffset;
uniform 	mediump float _DepthFoamCloseFadeDistance;
uniform 	float _NormalMapScale;
uniform 	float _Normal01_U_Speed;
uniform 	float _Normal01_VSpeed;
uniform 	float _NormalMapBias;
uniform 	float _Normal02_U_Speed;
uniform 	float _Normal02_V_Speed;
uniform 	float _RefractionIntensity;
uniform 	float _OpacityByDepth;
uniform 	float _SpecularIntensity;
uniform 	vec3 _ES_MoonDirection;
uniform 	vec3 _ES_SunDirection;
uniform 	float _Gloss;
uniform 	float _ShoreTransparency;
uniform 	float _SpecularPower;
uniform 	vec4 _ShallowColor;
uniform 	float _ShoreFade;
uniform 	vec4 _DeepColor;
uniform 	float _DeepColorDepth;
uniform 	float _DeepColorFade;
uniform 	vec4 _DistortionIntensity;
uniform 	float _SSRDistortion;
uniform 	float _SSRDistortion_Shore;
uniform 	float _SSRIntensity;
uniform 	float _ReflectionIntensity;
uniform 	float _FresnelPower;
uniform 	float _ShoreReflectionFade;
uniform 	vec3 _ES_MainLightColor;
uniform 	mediump float _RippleTillingScale;
uniform 	mediump float _Ripple02Rotate;
uniform 	mediump float _ProjectUVScale;
uniform 	mediump float _CausticFade;
uniform 	mediump float _CausticFadeExponent;
uniform 	vec4 _ReflectionSkyCubeMap_HDR;
uniform lowp sampler2D _Normal01;
uniform lowp sampler2D _Normal02;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _SceneScaledBufferBeforTransParent;
uniform lowp samplerCube _ReflectionSkyCubeMap;
uniform lowp sampler2D _SSRTexture;
uniform lowp sampler2D _DepthFoamMask;
uniform lowp sampler2D _WaterRippleTex;
uniform lowp sampler2DShadow hlslcc_zcmp_CascadeShadowMapTexture;
uniform lowp sampler2D _CascadeShadowMapTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD8;
in highp vec4 vs_TEXCOORD9;
in highp vec4 vs_TEXCOORD10;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
lowp float u_xlat10_0;
int u_xlati0;
uint u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec3 u_xlat10_1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
lowp vec4 u_xlat10_2;
bvec4 u_xlatb2;
mediump vec3 u_xlat16_3;
vec4 u_xlat4;
mediump vec3 u_xlat16_4;
lowp vec4 u_xlat10_4;
vec3 u_xlat5;
lowp float u_xlat10_5;
vec4 u_xlat6;
vec4 u_xlat7;
mediump vec3 u_xlat16_7;
vec4 u_xlat8;
vec3 u_xlat9;
vec3 u_xlat10;
mediump vec3 u_xlat16_10;
vec3 u_xlat11;
vec3 u_xlat12;
lowp vec3 u_xlat10_12;
vec3 u_xlat13;
vec3 u_xlat14;
vec3 u_xlat15;
mediump float u_xlat16_16;
mediump vec2 u_xlat16_17;
float u_xlat18;
bool u_xlatb18;
vec3 u_xlat19;
mediump vec3 u_xlat16_21;
vec3 u_xlat23;
mediump float u_xlat16_23;
bool u_xlatb23;
vec3 u_xlat25;
bool u_xlatb25;
float u_xlat26;
vec2 u_xlat36;
mediump float u_xlat16_36;
lowp float u_xlat10_36;
float u_xlat37;
lowp float u_xlat10_37;
int u_xlati37;
uint u_xlatu37;
bool u_xlatb37;
float u_xlat41;
float u_xlat42;
lowp float u_xlat10_54;
float u_xlat55;
mediump float u_xlat16_55;
mediump float u_xlat16_57;
float u_xlat59;
mediump float u_xlat16_59;
bool u_xlatb59;
float u_xlat60;
bool u_xlatb60;
float u_xlat61;
void main()
{
    u_xlat0 = vs_TEXCOORD5.xzxz * vec4(_ProjectUVScale, _ProjectUVScale, _RippleTillingScale, _RippleTillingScale);
    u_xlat1.x = _Time.y * _Normal01_U_Speed + u_xlat0.x;
    u_xlat1.yz = _Time.yy * vec2(_Normal01_VSpeed, _Normal02_U_Speed) + u_xlat0.yx;
    u_xlat1.w = _Time.y * _Normal02_V_Speed + u_xlat0.y;
    u_xlat10_2.xyz = texture(_Normal01, u_xlat1.xy, _NormalMapBias).xyz;
    u_xlat16_2.xyz = u_xlat10_2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_3.xy = u_xlat16_2.xy * vec2(_NormalMapScale);
    u_xlat10_1.xyz = texture(_Normal02, u_xlat1.zw, _NormalMapBias).xyz;
    u_xlat16_2.w = -1.0;
    u_xlat16_4.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_2.wwz;
    u_xlat16_4.xy = u_xlat16_4.xy * vec2(_NormalMapScale);
    u_xlat16_3.z = -1.0;
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat0.x = float(1.0) / vs_TEXCOORD4.w;
    u_xlat1.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat18 = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat18 = _ZBufferParams.z * u_xlat18 + _ZBufferParams.w;
    u_xlat18 = float(1.0) / u_xlat18;
    u_xlat1.x = vs_TEXCOORD10.w + 9.99999975e-05;
    u_xlat1.x = (-u_xlat18) / u_xlat1.x;
    u_xlat19.xyz = u_xlat1.xxx * vs_TEXCOORD10.xyz;
    u_xlat5.xyz = vs_TEXCOORD10.xyz * u_xlat1.xxx + _WorldSpaceCameraPos.xyz;
    u_xlat6.xyz = (-u_xlat5.xyz) + vs_TEXCOORD5.xyz;
    u_xlat1.x = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlat6.xz = u_xlat16_3.xy * vec2(vec2(_RefractionIntensity, _RefractionIntensity));
    u_xlat0.x = u_xlat0.x * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat6.xz = u_xlat0.xx * u_xlat6.xz;
    u_xlat6.xz = u_xlat6.xz * vs_TEXCOORD4.ww;
    u_xlat0.x = u_xlat18 + (-vs_TEXCOORD4.w);
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat7.xy = u_xlat0.xx * u_xlat6.xz;
    u_xlat7.z = 0.0;
    u_xlat6.xzw = u_xlat7.xyz + vs_TEXCOORD4.xyw;
    u_xlat0.xy = u_xlat6.xz / u_xlat6.ww;
    u_xlat0.x = texture(_CameraDepthTexture, u_xlat0.xy).x;
    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat0.x = u_xlat0.x + (-vs_TEXCOORD4.w);
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat6.xzw = u_xlat0.xxx * u_xlat7.xyz + vs_TEXCOORD4.xyw;
    u_xlat0.xy = u_xlat6.xz / u_xlat6.ww;
    u_xlat0.x = texture(_CameraDepthTexture, u_xlat0.xy).x;
    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat0.x = u_xlat0.x + (-vs_TEXCOORD4.w);
    u_xlat18 = 0.100000001 / _OpacityByDepth;
    u_xlat18 = u_xlat18 * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat16_4.xz = u_xlat16_3.xy;
    u_xlat16_4.y = 1.0;
    u_xlat16_59 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);
    u_xlat16_59 = inversesqrt(u_xlat16_59);
    u_xlat16_7.xyz = u_xlat16_4.xyz * vec3(u_xlat16_59);
#ifdef UNITY_ADRENO_ES3
    u_xlatb59 = !!(0.0>=_ES_MoonDirection.y);
#else
    u_xlatb59 = 0.0>=_ES_MoonDirection.y;
#endif
    u_xlat8.xyz = (bool(u_xlatb59)) ? _ES_SunDirection.xyz : _ES_MoonDirection.xyz;
    u_xlat9.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat59 = dot(u_xlat9.xyz, u_xlat9.xyz);
    u_xlat60 = inversesqrt(u_xlat59);
    u_xlat10.xyz = vec3(u_xlat60) * u_xlat9.xyz;
    u_xlat8.xyz = u_xlat9.xyz * vec3(u_xlat60) + u_xlat8.xyz;
    u_xlat60 = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat60 = inversesqrt(u_xlat60);
    u_xlat8.xyz = vec3(u_xlat60) * u_xlat8.xyz;
    u_xlat60 = dot(u_xlat16_7.xyz, u_xlat8.xyz);
    u_xlat25.x = _Gloss * 128.0;
    u_xlat60 = max(u_xlat60, 9.99999975e-05);
    u_xlat60 = log2(u_xlat60);
    u_xlat60 = u_xlat60 * u_xlat25.x;
    u_xlat60 = exp2(u_xlat60);
    u_xlat60 = u_xlat60 * _SpecularIntensity;
    u_xlat60 = max(u_xlat60, 0.0);
    u_xlat60 = min(u_xlat60, 16.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb25 = !!(_ES_MoonDirection.y>=9.99999975e-05);
#else
    u_xlatb25 = _ES_MoonDirection.y>=9.99999975e-05;
#endif
    u_xlat25.x = u_xlatb25 ? 1.0 : float(0.0);
    u_xlat61 = _ES_MoonDirection.y + -1.0;
    u_xlat25.x = u_xlat25.x * u_xlat61 + 1.0;
    u_xlat61 = float(1.0) / _ShoreTransparency;
    u_xlat8.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat8.xyz = u_xlat8.xxx * vs_TEXCOORD6.xyz;
    u_xlat8.x = dot(u_xlat10.xyz, u_xlat8.xyz);
    u_xlat8.x = (-u_xlat8.x) + 1.0;
    u_xlat8.x = max(u_xlat8.x, 9.99999975e-05);
    u_xlat8.x = log2(u_xlat8.x);
    u_xlat26 = u_xlat8.x * _SpecularPower;
    u_xlat26 = exp2(u_xlat26);
    u_xlat9.xyz = u_xlat25.xxx * _LightColor0.xyz;
    u_xlat9.xyz = vec3(u_xlat60) * u_xlat9.xyz;
    u_xlat60 = u_xlat0.x + -1.0;
    u_xlat60 = u_xlat61 * u_xlat60;
    u_xlat60 = u_xlat60 * 0.100000001;
#ifdef UNITY_ADRENO_ES3
    u_xlat60 = min(max(u_xlat60, 0.0), 1.0);
#else
    u_xlat60 = clamp(u_xlat60, 0.0, 1.0);
#endif
    u_xlat9.xyz = vec3(u_xlat60) * u_xlat9.xyz;
    u_xlat60 = u_xlat0.x * u_xlat61;
#ifdef UNITY_ADRENO_ES3
    u_xlat60 = min(max(u_xlat60, 0.0), 1.0);
#else
    u_xlat60 = clamp(u_xlat60, 0.0, 1.0);
#endif
    u_xlat60 = max(u_xlat60, 9.99999975e-05);
    u_xlat60 = log2(u_xlat60);
    u_xlat60 = u_xlat60 * _ShoreFade;
    u_xlat60 = exp2(u_xlat60);
    u_xlat11.xyz = _ShallowColor.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat11.xyz = vec3(u_xlat60) * u_xlat11.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat6.xz = u_xlat6.xz / vs_TEXCOORD4.ww;
    u_xlat10_12.xyz = texture(_SceneScaledBufferBeforTransParent, u_xlat6.xz).xyz;
    u_xlat6.x = u_xlat1.x * _CausticDistortionValue;
    u_xlat6.xz = u_xlat6.xx * u_xlat16_7.xz;
    u_xlat7.z = _Time.y * _CausticSpeed;
    u_xlat6.xz = u_xlat5.xz * vec2(_CausticUVScale) + u_xlat6.xz;
    u_xlat13.x = _Normal01_U_Speed * 25.0;
    u_xlat13.y = _Normal01_VSpeed * 25.0;
    u_xlat7.xy = u_xlat7.zz * u_xlat13.xy + u_xlat6.xz;
    u_xlat13.x = dot(u_xlat7.xyz, vec3(-2.0, 3.0, 1.0));
    u_xlat13.y = dot(u_xlat7.xyz, vec3(-1.0, -2.0, 2.0));
    u_xlat13.z = dot(u_xlat7.xzy, vec3(2.0, 2.0, 1.0));
    u_xlat7.xyz = u_xlat13.xyz * vec3(0.400000006, 0.400000006, 0.400000006);
    u_xlat14.x = dot(u_xlat7.xyz, vec3(-2.0, 3.0, 1.0));
    u_xlat14.y = dot(u_xlat7.xyz, vec3(-1.0, -2.0, 2.0));
    u_xlat14.z = dot(u_xlat7.xzy, vec3(2.0, 2.0, 1.0));
    u_xlat7.xyz = u_xlat14.xyz * vec3(0.300000012, 0.300000012, 0.300000012);
    u_xlat6.x = dot(u_xlat7.xyz, vec3(-2.0, 3.0, 1.0));
    u_xlat6.z = dot(u_xlat7.xyz, vec3(-1.0, -2.0, 2.0));
    u_xlat7.x = dot(u_xlat7.xzy, vec3(2.0, 2.0, 1.0));
    u_xlat25.xyz = fract(u_xlat13.xyz);
    u_xlat25.xyz = (-u_xlat25.xyz) + vec3(0.5, 0.5, 0.5);
    u_xlat25.x = dot(u_xlat25.xyz, u_xlat25.xyz);
    u_xlat13.xyz = fract(u_xlat14.xyz);
    u_xlat13.xyz = (-u_xlat13.xyz) + vec3(0.5, 0.5, 0.5);
    u_xlat25.y = dot(u_xlat13.xyz, u_xlat13.xyz);
    u_xlat25.xy = sqrt(u_xlat25.xy);
    u_xlat25.x = min(u_xlat25.y, u_xlat25.x);
    u_xlat13.xy = fract(u_xlat6.xz);
    u_xlat13.z = fract(u_xlat7.x);
    u_xlat7.xzw = (-u_xlat13.xyz) + vec3(0.5, 0.5, 0.5);
    u_xlat6.x = dot(u_xlat7.xzw, u_xlat7.xzw);
    u_xlat6.x = sqrt(u_xlat6.x);
    u_xlat6.x = min(u_xlat6.x, u_xlat25.x);
    u_xlat6.x = log2(u_xlat6.x);
    u_xlat6.x = u_xlat6.x * 7.0;
    u_xlat6.x = exp2(u_xlat6.x);
    u_xlat6.x = u_xlat6.x * 25.0;
    u_xlat16_4.xy = vec2(float(_CausticDepth) + float(9.99999975e-05), float(_CausticDistance) + float(9.99999975e-05));
    u_xlat42 = u_xlat6.y / u_xlat16_4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat42 = min(max(u_xlat42, 0.0), 1.0);
#else
    u_xlat42 = clamp(u_xlat42, 0.0, 1.0);
#endif
    u_xlat19.x = dot(u_xlat19.xyz, u_xlat19.xyz);
    u_xlat19.x = sqrt(u_xlat19.x);
    u_xlat19.x = u_xlat19.x / u_xlat16_4.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat19.x = min(max(u_xlat19.x, 0.0), 1.0);
#else
    u_xlat19.x = clamp(u_xlat19.x, 0.0, 1.0);
#endif
    u_xlat19.x = (-u_xlat19.x) + 1.0;
    u_xlat19.x = u_xlat19.x * u_xlat42;
    u_xlat7.xyz = u_xlat5.xyz + (-unity_ShadowSplitSpheres[0].xyz);
    u_xlat13.xyz = u_xlat5.xyz + (-unity_ShadowSplitSpheres[1].xyz);
    u_xlat14.xyz = u_xlat5.xyz + (-unity_ShadowSplitSpheres[2].xyz);
    u_xlat15.xyz = u_xlat5.xyz + (-unity_ShadowSplitSpheres[3].xyz);
    u_xlat2.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat2.y = dot(u_xlat13.xyz, u_xlat13.xyz);
    u_xlat2.z = dot(u_xlat14.xyz, u_xlat14.xyz);
    u_xlat2.w = dot(u_xlat15.xyz, u_xlat15.xyz);
    u_xlatb2 = lessThan(u_xlat2, unity_ShadowSplitSqRadii);
    u_xlat2 = mix(vec4(0.0, 0.0, 0.0, 0.0), vec4(1.0, 1.0, 1.0, 1.0), vec4(u_xlatb2));
    u_xlat16_57 = u_xlat2.y + u_xlat2.x;
    u_xlat16_4.x = u_xlat2.z + u_xlat16_57;
    u_xlat7.x = -0.0;
    u_xlat7.y = (-u_xlat2.x);
    u_xlat7.z = (-u_xlat16_57);
    u_xlat7.w = (-u_xlat16_4.x);
    u_xlat2 = u_xlat2 + u_xlat7;
    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat16_57 = dot(u_xlat2, vec4(1.0, 1.0, 1.0, 1.0));
#ifdef UNITY_ADRENO_ES3
    u_xlatb37 = !!(u_xlat16_57>=0.5);
#else
    u_xlatb37 = u_xlat16_57>=0.5;
#endif
    if(u_xlatb37){
        u_xlat37 = dot(u_xlat2.yzw, vec3(1.0, 2.0, 3.0));
        u_xlat37 = min(u_xlat37, 3.0);
        u_xlatu37 = uint(u_xlat37);
        u_xlat5.xyz = u_xlat5.xyz + (-unity_ShadowPos[int(u_xlatu37)].xyz);
        u_xlati37 = int(u_xlatu37) << 2;
        u_xlat7.xyz = u_xlat5.yyy * hlslcc_mtx4x4unity_WorldToShadow[(u_xlati37 + 1)].xyz;
        u_xlat7.xyz = hlslcc_mtx4x4unity_WorldToShadow[u_xlati37].xyz * u_xlat5.xxx + u_xlat7.xyz;
        u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToShadow[(u_xlati37 + 2)].xyz * u_xlat5.zzz + u_xlat7.xyz;
        u_xlat5.xyz = u_xlat5.xyz + hlslcc_mtx4x4unity_WorldToShadow[(u_xlati37 + 3)].xyz;
        vec3 txVec0 = vec3(u_xlat5.xy,u_xlat5.z);
        u_xlat10_37 = textureLod(hlslcc_zcmp_CascadeShadowMapTexture, txVec0, 0.0);
        u_xlat16_55 = (-_LightShadowData.x) + 1.0;
        u_xlat37 = u_xlat10_37 * u_xlat16_55 + _LightShadowData.x;
    } else {
        u_xlat37 = 1.0;
    //ENDIF
    }
    u_xlat19.x = u_xlat37 * u_xlat19.x;
    u_xlat16_4.xyz = _LightColor0.xyz * _CausticColor.xyz;
    u_xlat16_4.xyz = u_xlat6.xxx * u_xlat16_4.xyz;
    u_xlat16_4.xyz = u_xlat19.xxx * u_xlat16_4.xyz;
    u_xlat16_57 = _CausticFade + 9.99999975e-05;
    u_xlat1.x = u_xlat1.x / u_xlat16_57;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.x = log2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _CausticFadeExponent;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat1.x = (-u_xlat1.x) + 1.0;
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat1.xxx + vec3(1.0, 1.0, 1.0);
    u_xlat16_1.xyz = u_xlat16_4.xyz * u_xlat10_12.xyz;
    u_xlat5.xyz = u_xlat16_1.xyz * u_xlat11.xyz;
    u_xlat55 = 0.100000001 / _DeepColorDepth;
    u_xlat55 = u_xlat0.x * u_xlat55;
#ifdef UNITY_ADRENO_ES3
    u_xlat55 = min(max(u_xlat55, 0.0), 1.0);
#else
    u_xlat55 = clamp(u_xlat55, 0.0, 1.0);
#endif
    u_xlat55 = max(u_xlat55, 9.99999975e-05);
    u_xlat55 = log2(u_xlat55);
    u_xlat55 = u_xlat55 * _DeepColorFade;
    u_xlat55 = exp2(u_xlat55);
    u_xlat7.xyz = (-u_xlat11.xyz) * u_xlat16_1.xyz + _DeepColor.xyz;
    u_xlat7.xyz = vec3(u_xlat55) * u_xlat7.xyz + u_xlat5.xyz;
    u_xlat12.xyz = u_xlat16_3.xyz * _DistortionIntensity.xyz;
    u_xlat13.x = vs_TEXCOORD8.x;
    u_xlat13.y = vs_TEXCOORD9.x;
    u_xlat13.z = vs_TEXCOORD6.x;
    u_xlat13.x = dot(u_xlat13.xyz, u_xlat12.xyz);
    u_xlat14.x = vs_TEXCOORD8.y;
    u_xlat14.y = vs_TEXCOORD9.y;
    u_xlat14.z = vs_TEXCOORD6.y;
    u_xlat13.y = dot(u_xlat14.xyz, u_xlat12.xyz);
    u_xlat14.x = vs_TEXCOORD8.z;
    u_xlat14.y = vs_TEXCOORD9.z;
    u_xlat14.z = vs_TEXCOORD6.z;
    u_xlat13.z = dot(u_xlat14.xyz, u_xlat12.xyz);
    u_xlat55 = dot(u_xlat13.xyz, u_xlat13.xyz);
    u_xlat55 = inversesqrt(u_xlat55);
    u_xlat13.xyz = vec3(u_xlat55) * u_xlat13.xyz;
    u_xlat55 = dot((-u_xlat10.xyz), u_xlat13.xyz);
    u_xlat55 = u_xlat55 + u_xlat55;
    u_xlat10.xyz = u_xlat13.xyz * (-vec3(u_xlat55)) + (-u_xlat10.xyz);
    u_xlat10_2 = textureLod(_ReflectionSkyCubeMap, u_xlat10.xyz, 0.0);
    u_xlat16_3.x = u_xlat10_2.w + -1.0;
    u_xlat16_3.x = _ReflectionSkyCubeMap_HDR.w * u_xlat16_3.x + 1.0;
    u_xlat16_3.x = log2(u_xlat16_3.x);
    u_xlat16_3.x = u_xlat16_3.x * _ReflectionSkyCubeMap_HDR.y;
    u_xlat16_3.x = exp2(u_xlat16_3.x);
    u_xlat16_3.x = u_xlat16_3.x * _ReflectionSkyCubeMap_HDR.x;
    u_xlat16_21.xyz = u_xlat10_2.xyz * u_xlat16_3.xxx;
    u_xlat6.xz = u_xlat12.xy * vec2(_SSRDistortion);
    u_xlat55 = float(1.0) / _SSRDistortion_Shore;
    u_xlat55 = u_xlat0.x * u_xlat55;
#ifdef UNITY_ADRENO_ES3
    u_xlat55 = min(max(u_xlat55, 0.0), 1.0);
#else
    u_xlat55 = clamp(u_xlat55, 0.0, 1.0);
#endif
    u_xlat6.xz = vec2(u_xlat55) * u_xlat6.xz;
    u_xlat6.xz = u_xlat6.xz * vs_TEXCOORD4.ww + vs_TEXCOORD4.xy;
    u_xlat6.xz = u_xlat6.xz / vs_TEXCOORD4.ww;
    u_xlat10_4 = texture(_SSRTexture, u_xlat6.xz).wxyz;
    u_xlat16_10.xyz = (-u_xlat16_3.xxx) * u_xlat10_2.xyz + u_xlat10_4.yzw;
    u_xlat10.xyz = u_xlat16_10.xyz * vec3(vec3(_SSRIntensity, _SSRIntensity, _SSRIntensity));
    u_xlat16_4.x = u_xlat10_4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat10.xyz = u_xlat16_4.xxx * u_xlat10.xyz + u_xlat16_21.xyz;
    u_xlat55 = u_xlat8.x * _FresnelPower;
    u_xlat55 = exp2(u_xlat55);
    u_xlat55 = u_xlat55 * _ReflectionIntensity;
    u_xlat6.x = float(1.0) / _ShoreReflectionFade;
    u_xlat0.x = u_xlat0.x * u_xlat6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x * u_xlat55;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat8.xzw = (-u_xlat7.xyz) + u_xlat10.xyz;
    u_xlat7.xyz = u_xlat0.xxx * u_xlat8.xzw + u_xlat7.xyz;
    u_xlat1.xyz = (-u_xlat11.xyz) * u_xlat16_1.xyz + u_xlat7.xyz;
    u_xlat1.xyz = vec3(u_xlat60) * u_xlat1.xyz + u_xlat5.xyz;
    u_xlat0.x = (-vs_TEXCOORD5.y) * _WorldSpaceLightPos0.w + _WorldSpaceLightPos0.y;
    u_xlat16_3.x = max(u_xlat0.x, 0.0);
    u_xlat5.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowSplitSpheres[0].xyz);
    u_xlat6.xzw = vs_TEXCOORD5.xyz + (-unity_ShadowSplitSpheres[1].xyz);
    u_xlat7.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowSplitSpheres[2].xyz);
    u_xlat8.xzw = vs_TEXCOORD5.xyz + (-unity_ShadowSplitSpheres[3].xyz);
    u_xlat2.x = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat2.y = dot(u_xlat6.xzw, u_xlat6.xzw);
    u_xlat2.z = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat2.w = dot(u_xlat8.xzw, u_xlat8.xzw);
    u_xlatb2 = lessThan(u_xlat2, unity_ShadowSplitSqRadii);
    u_xlat2 = mix(vec4(0.0, 0.0, 0.0, 0.0), vec4(1.0, 1.0, 1.0, 1.0), vec4(u_xlatb2));
    u_xlat16_21.x = u_xlat2.y + u_xlat2.x;
    u_xlat16_21.y = u_xlat2.z + u_xlat16_21.x;
    u_xlat4.x = -0.0;
    u_xlat4.y = (-u_xlat2.x);
    u_xlat4.zw = (-u_xlat16_21.xy);
    u_xlat2 = u_xlat2 + u_xlat4;
    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat16_21.x = dot(u_xlat2, vec4(1.0, 1.0, 1.0, 1.0));
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat16_21.x>=0.5);
#else
    u_xlatb0 = u_xlat16_21.x>=0.5;
#endif
    if(u_xlatb0){
        u_xlat0.x = dot(u_xlat2.yzw, vec3(1.0, 2.0, 3.0));
        u_xlat0.x = min(u_xlat0.x, 3.0);
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat5.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowPos[int(u_xlatu0)].xyz);
        u_xlati0 = int(u_xlatu0) << 2;
        u_xlat6.xzw = u_xlat5.yyy * hlslcc_mtx4x4unity_WorldToShadow[(u_xlati0 + 1)].xyz;
        u_xlat6.xzw = hlslcc_mtx4x4unity_WorldToShadow[u_xlati0].xyz * u_xlat5.xxx + u_xlat6.xzw;
        u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToShadow[(u_xlati0 + 2)].xyz * u_xlat5.zzz + u_xlat6.xzw;
        u_xlat5.xyz = u_xlat5.xyz + hlslcc_mtx4x4unity_WorldToShadow[(u_xlati0 + 3)].xyz;
        vec3 txVec1 = vec3(u_xlat5.xy,u_xlat5.z);
        u_xlat10_0 = textureLod(hlslcc_zcmp_CascadeShadowMapTexture, txVec1, 0.0);
        u_xlat16_55 = (-_LightShadowData.x) + 1.0;
        u_xlat0.x = u_xlat10_0 * u_xlat16_55 + _LightShadowData.x;
    } else {
        u_xlat0.x = 1.0;
    //ENDIF
    }
    u_xlat16_3.xyz = u_xlat16_3.xxx * _LightColor0.xyz;
    u_xlat5.xyz = u_xlat16_3.xyz * u_xlat0.xxx + vs_TEXCOORD1.xyz;
    u_xlat16_3.xyz = u_xlat5.xyz * vec3(0.300000012, 0.300000012, 0.300000012) + vec3(0.699999988, 0.699999988, 0.699999988);
    u_xlat0.x = sqrt(u_xlat59);
    u_xlat16_57 = u_xlat0.x + (-_DepthFoamCloseFadeOffset);
    u_xlat16_57 = u_xlat16_57 / _DepthFoamCloseFadeDistance;
    u_xlat16_16 = vs_COLOR0.x * _DepthFoamExtent;
    u_xlat55 = max(u_xlat6.y, 0.0);
    u_xlat55 = min(u_xlat16_16, u_xlat55);
    u_xlat16_16 = _DepthFoamExtent * vs_COLOR0.x + 9.99999975e-05;
    u_xlat55 = u_xlat55 / u_xlat16_16;
    u_xlat55 = (-u_xlat55) + 1.0;
    u_xlat5.xy = vec2(_Time.y * _DepthFoamMask_ST.z, _Time.y * _DepthFoamMask_ST.w);
    u_xlat5.xy = fract(u_xlat5.xy);
    u_xlat5.xy = _DepthFoamMask_ST.xy * vs_TEXCOORD5.xz + u_xlat5.xy;
    u_xlat10_5 = texture(_DepthFoamMask, u_xlat5.xy).x;
    u_xlat23.x = vs_TEXCOORD5.z + vs_TEXCOORD5.x;
    u_xlat23.x = u_xlat23.x * _DepthFoamPhaseScale;
    u_xlat23.x = _DepthFoamSpeed * _Time.y + u_xlat23.x;
    u_xlat41 = (-u_xlat55) + 1.0;
    u_xlat16_16 = _DepthFoamSubdivision * u_xlat55 + u_xlat23.x;
    u_xlat16_16 = sin(u_xlat16_16);
    u_xlat16_16 = _DepthFoamWidth * u_xlat55 + u_xlat16_16;
    u_xlat16_23 = u_xlat10_5 * 2.0 + -1.0;
    u_xlat23.x = u_xlat16_23 + u_xlat16_16;
#ifdef UNITY_ADRENO_ES3
    u_xlatb23 = !!(u_xlat23.x>=u_xlat41);
#else
    u_xlatb23 = u_xlat23.x>=u_xlat41;
#endif
    u_xlat23.x = u_xlatb23 ? 1.0 : float(0.0);
    u_xlat5.x = u_xlat23.x * u_xlat10_5;
    u_xlat16_16 = _DepthFoamDistance + 9.99999975e-05;
    u_xlat16_16 = u_xlat0.x / u_xlat16_16;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat16_0 = (-u_xlat16_16) + 1.0;
    u_xlat16_16 = vs_COLOR0.y * _DepthFoamColor.w;
    u_xlat16_57 = u_xlat16_57 * u_xlat16_16;
    u_xlat16_57 = u_xlat5.x * u_xlat16_57;
    u_xlat16_57 = u_xlat55 * u_xlat16_57;
    u_xlat16_57 = u_xlat16_0 * u_xlat16_57;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_57 = min(max(u_xlat16_57, 0.0), 1.0);
#else
    u_xlat16_57 = clamp(u_xlat16_57, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = _DepthFoamColor.xyz * u_xlat16_3.xyz + (-u_xlat1.xyz);
    u_xlat16_3.xyz = vec3(u_xlat16_57) * u_xlat16_3.xyz + u_xlat1.xyz;
    u_xlat16_0 = max(_LightColor0.w, 0.5);
    u_xlat1.xyz = u_xlat9.xyz * vec3(u_xlat26) + u_xlat16_3.xyz;
    u_xlat36.xy = fract(u_xlat0.zw);
    u_xlat16_3.xy = u_xlat36.xy * vec2(1.14999998, 1.14999998);
    u_xlat16_16 = sin(_Ripple02Rotate);
    u_xlat16_17.x = cos(_Ripple02Rotate);
    u_xlat5.x = (-u_xlat16_16);
    u_xlat16_17.y = u_xlat16_16;
    u_xlat6.x = dot(u_xlat16_3.xy, u_xlat16_17.xy);
    u_xlat5.y = u_xlat16_17.x;
    u_xlat6.y = dot(u_xlat16_3.xy, u_xlat5.xy);
    u_xlat10_36 = texture(_WaterRippleTex, u_xlat36.xy).x;
    u_xlat10_54 = texture(_WaterRippleTex, u_xlat6.xy).x;
    u_xlat16_36 = u_xlat10_54 + u_xlat10_36;
    u_xlat36.x = u_xlat16_36 * u_xlat18;
    u_xlat5.xyz = _ES_MainLightColor.xyz * vec3(u_xlat16_0) + (-u_xlat1.xyz);
    u_xlat0.xzw = u_xlat36.xxx * u_xlat5.xyz + u_xlat1.xyz;
    u_xlat1.w = u_xlat18 * vs_COLOR0.w;
    u_xlat5.xyz = vs_TEXCOORD5.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat6.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat6.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat6.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat18 = dot(u_xlat5.xyz, u_xlat6.xyz);
    u_xlat5.x = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat5.x = sqrt(u_xlat5.x);
    u_xlat23.y = u_xlat5.x * _HeigtFogParams.y;
    u_xlat59 = u_xlat5.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat59 = min(max(u_xlat59, 0.0), 1.0);
#else
    u_xlat59 = clamp(u_xlat59, 0.0, 1.0);
#endif
    u_xlat6.x = (-u_xlat59) + 2.0;
    u_xlat59 = u_xlat59 * u_xlat6.x;
    u_xlat6.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!((-u_xlat18)>=u_xlat6.x);
#else
    u_xlatb18 = (-u_xlat18)>=u_xlat6.x;
#endif
    u_xlat6.x = u_xlat59 * _HeigtFogColDelta.w;
    u_xlat18 = (u_xlatb18) ? u_xlat6.x : u_xlat59;
    u_xlat18 = log2(u_xlat18);
    u_xlat18 = u_xlat18 * unity_FogColor.w;
    u_xlat18 = exp2(u_xlat18);
    u_xlat18 = min(u_xlat18, _HeigtFogColBase.w);
    u_xlat59 = vs_TEXCOORD5.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat59 = min(max(u_xlat59, 0.0), 1.0);
#else
    u_xlat59 = clamp(u_xlat59, 0.0, 1.0);
#endif
    u_xlat16_3.x = (-u_xlat59) + 2.0;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat59;
    u_xlat6.xyz = u_xlat16_3.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat59 = u_xlat5.x + (-_HeigtFogRamp.w);
    u_xlat59 = u_xlat59 * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat59 = min(max(u_xlat59, 0.0), 1.0);
#else
    u_xlat59 = clamp(u_xlat59, 0.0, 1.0);
#endif
    u_xlat7.xyz = (-u_xlat6.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat6.xyz = vec3(u_xlat59) * u_xlat7.xyz + u_xlat6.xyz;
    u_xlat59 = u_xlat5.y * _HeigtFogParams.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb60 = !!(0.00999999978<abs(u_xlat59));
#else
    u_xlatb60 = 0.00999999978<abs(u_xlat59);
#endif
    u_xlat7.x = u_xlat59 * -1.44269502;
    u_xlat7.x = exp2(u_xlat7.x);
    u_xlat7.x = (-u_xlat7.x) + 1.0;
    u_xlat59 = u_xlat7.x / u_xlat59;
    u_xlat16_3.x = (u_xlatb60) ? u_xlat59 : 1.0;
    u_xlat23.x = u_xlat5.y * _HeigtFogParams2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb59 = !!(0.00999999978<abs(u_xlat23.x));
#else
    u_xlatb59 = 0.00999999978<abs(u_xlat23.x);
#endif
    u_xlat60 = u_xlat23.x * -1.44269502;
    u_xlat60 = exp2(u_xlat60);
    u_xlat60 = (-u_xlat60) + 1.0;
    u_xlat23.x = u_xlat60 / u_xlat23.x;
    u_xlat16_3.y = (u_xlatb59) ? u_xlat23.x : 1.0;
    u_xlat23.x = u_xlat5.x * _HeigtFogParams2.y;
    u_xlat16_3.xy = u_xlat16_3.xy * u_xlat23.yx;
    u_xlat16_3.x = exp2((-u_xlat16_3.x));
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat16_21.x = exp2((-u_xlat16_3.y));
    u_xlat16_3.y = (-u_xlat16_21.x) + 1.0;
    u_xlat16_3.xy = max(u_xlat16_3.xy, vec2(0.0, 0.0));
    u_xlat16_3.x = u_xlat16_3.y + u_xlat16_3.x;
    u_xlat5.x = u_xlat5.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat16_21.x = (-u_xlat5.x) + 2.0;
    u_xlat16_21.x = u_xlat16_21.x * u_xlat5.x;
    u_xlat5.x = u_xlat16_21.x * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat5.x = u_xlat5.x + 1.0;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat5.x;
    u_xlat5.x = min(u_xlat16_3.x, _HeigtFogColBase.w);
    u_xlat23.x = vs_TEXCOORD5.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat23.x = min(max(u_xlat23.x, 0.0), 1.0);
#else
    u_xlat23.x = clamp(u_xlat23.x, 0.0, 1.0);
#endif
    u_xlat23.xyz = u_xlat23.xxx * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    u_xlat6.xyz = vec3(u_xlat18) * u_xlat6.xyz;
    u_xlat60 = (-u_xlat5.x) + 1.0;
    u_xlat6.xyz = vec3(u_xlat60) * u_xlat6.xyz;
    u_xlat5.xyz = u_xlat23.xyz * u_xlat5.xxx + u_xlat6.xyz;
    u_xlat18 = (-u_xlat18) + 1.0;
    u_xlat18 = u_xlat60 * u_xlat18;
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat0.xzw + u_xlat5.xyz;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "MHY_SHADER_MIDDLE" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	mediump float _MHYZBias;
uniform 	vec4 hlslcc_mtx4x4_mhyJitteredVP[4];
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
out highp vec4 vs_TEXCOORD9;
out highp vec4 vs_TEXCOORD10;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
vec4 u_xlat4;
bool u_xlatb4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
mediump vec4 u_xlat16_6;
vec4 u_xlat7;
mediump vec3 u_xlat16_8;
float u_xlat11;
vec3 u_xlat13;
mediump float u_xlat16_14;
float u_xlat27;
bool u_xlatb27;
float u_xlat29;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4_mhyJitteredVP[1];
    u_xlat2 = hlslcc_mtx4x4_mhyJitteredVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4_mhyJitteredVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4_mhyJitteredVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat3.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    u_xlat3.xyw = u_xlat2.xyw;
    gl_Position = u_xlat3;
    vs_COLOR0 = in_COLOR0;
    u_xlat2.xyw = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat27 = u_xlat2.y * _HeigtFogParams.x;
    u_xlat4.x = u_xlat27 * -1.44269502;
    u_xlat4.x = exp2(u_xlat4.x);
    u_xlat4.x = (-u_xlat4.x) + 1.0;
    u_xlat4.x = u_xlat4.x / u_xlat27;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(0.00999999978<abs(u_xlat27));
#else
    u_xlatb27 = 0.00999999978<abs(u_xlat27);
#endif
    u_xlat16_5.x = (u_xlatb27) ? u_xlat4.x : 1.0;
    u_xlat27 = dot(u_xlat2.xyw, u_xlat2.xyw);
    u_xlat27 = sqrt(u_xlat27);
    u_xlat4.x = u_xlat27 * _HeigtFogParams.y;
    u_xlat16_5.x = u_xlat4.x * u_xlat16_5.x;
    u_xlat16_5.x = exp2((-u_xlat16_5.x));
    u_xlat16_5.x = (-u_xlat16_5.x) + 1.0;
    u_xlat4.x = u_xlat2.y * _HeigtFogParams2.x;
    u_xlat13.x = u_xlat4.x * -1.44269502;
    u_xlat13.x = exp2(u_xlat13.x);
    u_xlat13.x = (-u_xlat13.x) + 1.0;
    u_xlat13.x = u_xlat13.x / u_xlat4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(0.00999999978<abs(u_xlat4.x));
#else
    u_xlatb4 = 0.00999999978<abs(u_xlat4.x);
#endif
    u_xlat16_14 = (u_xlatb4) ? u_xlat13.x : 1.0;
    u_xlat4.x = u_xlat27 * _HeigtFogParams2.y;
    u_xlat16_14 = u_xlat4.x * u_xlat16_14;
    u_xlat16_14 = exp2((-u_xlat16_14));
    u_xlat16_5.y = (-u_xlat16_14) + 1.0;
    u_xlat16_5.xy = max(u_xlat16_5.xy, vec2(0.0, 0.0));
    u_xlat16_5.x = u_xlat16_5.y + u_xlat16_5.x;
    u_xlat4.x = u_xlat27 * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat16_14 = (-u_xlat4.x) + 2.0;
    u_xlat16_14 = u_xlat4.x * u_xlat16_14;
    u_xlat4.x = u_xlat16_14 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat4.x = u_xlat4.x + 1.0;
    u_xlat16_5.x = u_xlat4.x * u_xlat16_5.x;
    u_xlat4.x = min(u_xlat16_5.x, _HeigtFogColBase.w);
    u_xlat13.x = (-u_xlat4.x) + 1.0;
    u_xlat6.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat6.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat6.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat2.x = dot(u_xlat2.xyw, u_xlat6.xyz);
    u_xlat11 = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!((-u_xlat2.x)>=u_xlat11);
#else
    u_xlatb2 = (-u_xlat2.x)>=u_xlat11;
#endif
    u_xlat11 = u_xlat27 * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat11 = min(max(u_xlat11, 0.0), 1.0);
#else
    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
#endif
    u_xlat27 = u_xlat27 + (-_HeigtFogRamp.w);
    u_xlat27 = u_xlat27 * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
    u_xlat29 = (-u_xlat11) + 2.0;
    u_xlat11 = u_xlat29 * u_xlat11;
    u_xlat29 = u_xlat11 * _HeigtFogColDelta.w;
    u_xlat2.x = (u_xlatb2) ? u_xlat29 : u_xlat11;
    u_xlat2.x = log2(u_xlat2.x);
    u_xlat2.x = u_xlat2.x * unity_FogColor.w;
    u_xlat2.x = exp2(u_xlat2.x);
    u_xlat2.x = min(u_xlat2.x, _HeigtFogColBase.w);
    u_xlat11 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat11 = min(max(u_xlat11, 0.0), 1.0);
#else
    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
#endif
    u_xlat16_5.x = (-u_xlat11) + 2.0;
    u_xlat16_5.x = u_xlat11 * u_xlat16_5.x;
    u_xlat6.xyz = u_xlat16_5.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat7.xyz = (-u_xlat6.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat6.xyz = vec3(u_xlat27) * u_xlat7.xyz + u_xlat6.xyz;
    u_xlat6.xyz = u_xlat2.xxx * u_xlat6.xyz;
    u_xlat27 = (-u_xlat2.x) + 1.0;
    vs_TEXCOORD0.w = u_xlat13.x * u_xlat27;
    u_xlat2.xyw = u_xlat13.xxx * u_xlat6.xyz;
    u_xlat27 = u_xlat0.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
    u_xlat13.xyz = vec3(u_xlat27) * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    vs_TEXCOORD0.xyz = u_xlat13.xyz * u_xlat4.xxx + u_xlat2.xyw;
    u_xlat4.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat4.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat4.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat27 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat4.xyz = vec3(u_xlat27) * u_xlat4.xyz;
    u_xlat16_5.x = u_xlat4.y * u_xlat4.y;
    u_xlat16_5.x = u_xlat4.x * u_xlat4.x + (-u_xlat16_5.x);
    u_xlat16_6 = u_xlat4.yzzx * u_xlat4.xyzz;
    u_xlat16_8.x = dot(unity_SHBr, u_xlat16_6);
    u_xlat16_8.y = dot(unity_SHBg, u_xlat16_6);
    u_xlat16_8.z = dot(unity_SHBb, u_xlat16_6);
    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_8.xyz;
    u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat4.w = 1.0;
    u_xlat16_8.x = dot(unity_SHAr, u_xlat4);
    u_xlat16_8.y = dot(unity_SHAg, u_xlat4);
    u_xlat16_8.z = dot(unity_SHAb, u_xlat4);
    u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_8.xyz;
    vs_TEXCOORD1.xyz = u_xlat16_5.xyz;
    vs_TEXCOORD1.w = 1.0;
    u_xlat27 = u_xlat3.y * _ProjectionParams.x;
    u_xlat7.w = u_xlat27 * 0.5;
    u_xlat7.xz = u_xlat3.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.z = u_xlat2.z;
    u_xlat3.xy = u_xlat7.zz + u_xlat7.xw;
    vs_TEXCOORD2 = u_xlat3;
    vs_TEXCOORD4.xyw = u_xlat3.xyw;
    u_xlat27 = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat27 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat27;
    u_xlat27 = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat27;
    u_xlat27 = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat27;
    vs_TEXCOORD3.z = (-u_xlat27);
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD3.w = 0.0;
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD5.w = 0.0;
    vs_TEXCOORD6.xyz = u_xlat4.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[1].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].www + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * in_POSITION0.yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.zzz + u_xlat1.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.www + u_xlat1.xyz;
    vs_TEXCOORD7.xyz = u_xlat1.xyz * vec3(-1.0, -1.0, 1.0);
    vs_TEXCOORD7.w = 0.0;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat27 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat1.xyz = vec3(u_xlat27) * u_xlat1.xyz;
    vs_TEXCOORD8.xyz = u_xlat1.xyz;
    vs_TEXCOORD8.w = 0.0;
    u_xlat2.xyz = u_xlat1.yzx * u_xlat4.zxy;
    u_xlat1.xyz = u_xlat4.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
    u_xlat27 = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD9.xyz = vec3(u_xlat27) * u_xlat1.xyz;
    vs_TEXCOORD9.w = 0.0;
    u_xlat27 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat27 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat27;
    vs_TEXCOORD10.w = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat27;
    vs_TEXCOORD10.xyz = u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowPos[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	mediump vec4 _DepthFoamMask_ST;
uniform 	mediump float _DepthFoamSpeed;
uniform 	mediump vec4 _DepthFoamColor;
uniform 	mediump float _DepthFoamExtent;
uniform 	mediump float _DepthFoamDistance;
uniform 	mediump float _DepthFoamSubdivision;
uniform 	mediump float _DepthFoamWidth;
uniform 	mediump float _DepthFoamPhaseScale;
uniform 	mediump float _DepthFoamCloseFadeOffset;
uniform 	mediump float _DepthFoamCloseFadeDistance;
uniform 	float _NormalMapScale;
uniform 	float _Normal01_U_Speed;
uniform 	float _Normal01_VSpeed;
uniform 	float _NormalMapBias;
uniform 	float _Normal02_U_Speed;
uniform 	float _Normal02_V_Speed;
uniform 	float _RefractionIntensity;
uniform 	float _OpacityByDepth;
uniform 	float _SpecularIntensity;
uniform 	vec3 _ES_MoonDirection;
uniform 	vec3 _ES_SunDirection;
uniform 	float _Gloss;
uniform 	float _ShoreTransparency;
uniform 	float _SpecularPower;
uniform 	vec4 _ShallowColor;
uniform 	float _ShoreFade;
uniform 	vec4 _DeepColor;
uniform 	float _DeepColorDepth;
uniform 	float _DeepColorFade;
uniform 	vec4 _DistortionIntensity;
uniform 	float _SSRDistortion;
uniform 	float _SSRDistortion_Shore;
uniform 	float _SSRIntensity;
uniform 	float _ReflectionIntensity;
uniform 	float _FresnelPower;
uniform 	float _ShoreReflectionFade;
uniform 	mediump float _ProjectUVScale;
uniform 	vec4 _ReflectionSkyCubeMap_HDR;
uniform lowp sampler2D _Normal01;
uniform lowp sampler2D _Normal02;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _SceneScaledBufferBeforTransParent;
uniform lowp samplerCube _ReflectionSkyCubeMap;
uniform lowp sampler2D _SSRTexture;
uniform lowp sampler2D _DepthFoamMask;
uniform lowp sampler2DShadow hlslcc_zcmp_CascadeShadowMapTexture;
uniform lowp sampler2D _CascadeShadowMapTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD8;
in highp vec4 vs_TEXCOORD9;
in highp vec4 vs_TEXCOORD10;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec4 u_xlatb0;
vec4 u_xlat1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
lowp vec4 u_xlat10_3;
vec4 u_xlat4;
vec3 u_xlat5;
bool u_xlatb5;
vec3 u_xlat6;
vec4 u_xlat7;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
vec3 u_xlat9;
lowp vec3 u_xlat10_9;
vec3 u_xlat10;
vec3 u_xlat11;
vec3 u_xlat12;
vec3 u_xlat13;
vec3 u_xlat14;
mediump float u_xlat16_15;
vec2 u_xlat17;
mediump vec3 u_xlat16_18;
vec3 u_xlat20;
mediump vec3 u_xlat16_20;
lowp float u_xlat10_20;
int u_xlati20;
uint u_xlatu20;
bool u_xlatb20;
float u_xlat21;
float u_xlat33;
vec2 u_xlat36;
mediump float u_xlat16_36;
lowp float u_xlat10_36;
bool u_xlatb36;
float u_xlat49;
bool u_xlatb49;
mediump float u_xlat16_50;
float u_xlat52;
mediump float u_xlat16_52;
bool u_xlatb52;
float u_xlat53;
bool u_xlatb53;
float u_xlat54;
void main()
{
    u_xlat0.xy = vs_TEXCOORD5.zx * vec2(vec2(_ProjectUVScale, _ProjectUVScale));
    u_xlat1.x = _Time.y * _Normal01_U_Speed + u_xlat0.y;
    u_xlat1.yz = _Time.yy * vec2(_Normal01_VSpeed, _Normal02_U_Speed) + u_xlat0.xy;
    u_xlat1.w = _Time.y * _Normal02_V_Speed + u_xlat0.x;
    u_xlat10_0.xyz = texture(_Normal01, u_xlat1.xy, _NormalMapBias).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_2.xy = u_xlat16_0.xy * vec2(_NormalMapScale);
    u_xlat10_1.xyz = texture(_Normal02, u_xlat1.zw, _NormalMapBias).xyz;
    u_xlat16_0.w = -1.0;
    u_xlat16_3.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.wwz;
    u_xlat16_3.xy = u_xlat16_3.xy * vec2(_NormalMapScale);
    u_xlat16_2.z = -1.0;
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
    u_xlat1.x = float(1.0) / vs_TEXCOORD4.w;
    u_xlat17.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat17.x = texture(_CameraDepthTexture, u_xlat17.xy).x;
    u_xlat17.x = _ZBufferParams.z * u_xlat17.x + _ZBufferParams.w;
    u_xlat17.x = float(1.0) / u_xlat17.x;
    u_xlat33 = vs_TEXCOORD10.w + 9.99999975e-05;
    u_xlat33 = (-u_xlat17.x) / u_xlat33;
    u_xlat33 = vs_TEXCOORD10.y * u_xlat33 + _WorldSpaceCameraPos.y;
    u_xlat33 = (-u_xlat33) + vs_TEXCOORD5.y;
    u_xlat4.xy = u_xlat16_2.xy * vec2(vec2(_RefractionIntensity, _RefractionIntensity));
    u_xlat1.x = u_xlat1.x * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.xw = u_xlat1.xx * u_xlat4.xy;
    u_xlat1.xw = u_xlat1.xw * vs_TEXCOORD4.ww;
    u_xlat17.x = u_xlat17.x + (-vs_TEXCOORD4.w);
#ifdef UNITY_ADRENO_ES3
    u_xlat17.x = min(max(u_xlat17.x, 0.0), 1.0);
#else
    u_xlat17.x = clamp(u_xlat17.x, 0.0, 1.0);
#endif
    u_xlat4.xy = u_xlat17.xx * u_xlat1.xw;
    u_xlat4.z = 0.0;
    u_xlat1.xyw = u_xlat4.xyz + vs_TEXCOORD4.xyw;
    u_xlat1.xy = u_xlat1.xy / u_xlat1.ww;
    u_xlat1.x = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat1.x = _ZBufferParams.z * u_xlat1.x + _ZBufferParams.w;
    u_xlat1.x = float(1.0) / u_xlat1.x;
    u_xlat1.x = u_xlat1.x + (-vs_TEXCOORD4.w);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.xyw = u_xlat1.xxx * u_xlat4.xyz + vs_TEXCOORD4.xyw;
    u_xlat4.xy = u_xlat1.xy / u_xlat1.ww;
    u_xlat49 = texture(_CameraDepthTexture, u_xlat4.xy).x;
    u_xlat49 = _ZBufferParams.z * u_xlat49 + _ZBufferParams.w;
    u_xlat49 = float(1.0) / u_xlat49;
    u_xlat49 = u_xlat49 + (-vs_TEXCOORD4.w);
    u_xlat4.x = 0.100000001 / _OpacityByDepth;
    u_xlat16_3.xz = u_xlat16_2.xy;
    u_xlat16_3.y = 1.0;
    u_xlat16_20.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
    u_xlat16_20.x = inversesqrt(u_xlat16_20.x);
    u_xlat16_20.xyz = u_xlat16_3.xyz * u_xlat16_20.xxx;
#ifdef UNITY_ADRENO_ES3
    u_xlatb5 = !!(0.0>=_ES_MoonDirection.y);
#else
    u_xlatb5 = 0.0>=_ES_MoonDirection.y;
#endif
    u_xlat5.xyz = (bool(u_xlatb5)) ? _ES_SunDirection.xyz : _ES_MoonDirection.xyz;
    u_xlat6.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat53 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat54 = inversesqrt(u_xlat53);
    u_xlat7.xyz = vec3(u_xlat54) * u_xlat6.xyz;
    u_xlat5.xyz = u_xlat6.xyz * vec3(u_xlat54) + u_xlat5.xyz;
    u_xlat6.x = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat5.xyz = u_xlat5.xyz * u_xlat6.xxx;
    u_xlat20.x = dot(u_xlat16_20.xyz, u_xlat5.xyz);
    u_xlat36.x = _Gloss * 128.0;
    u_xlat20.x = max(u_xlat20.x, 9.99999975e-05);
    u_xlat20.x = log2(u_xlat20.x);
    u_xlat20.x = u_xlat20.x * u_xlat36.x;
    u_xlat20.x = exp2(u_xlat20.x);
    u_xlat20.x = u_xlat20.x * _SpecularIntensity;
    u_xlat20.x = max(u_xlat20.x, 0.0);
    u_xlat20.x = min(u_xlat20.x, 16.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb36 = !!(_ES_MoonDirection.y>=9.99999975e-05);
#else
    u_xlatb36 = _ES_MoonDirection.y>=9.99999975e-05;
#endif
    u_xlat36.x = u_xlatb36 ? 1.0 : float(0.0);
    u_xlat52 = _ES_MoonDirection.y + -1.0;
    u_xlat36.x = u_xlat36.x * u_xlat52 + 1.0;
    u_xlat4.w = float(1.0) / _ShoreTransparency;
    u_xlat5.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat5.x = inversesqrt(u_xlat5.x);
    u_xlat5.xyz = u_xlat5.xxx * vs_TEXCOORD6.xyz;
    u_xlat5.x = dot(u_xlat7.xyz, u_xlat5.xyz);
    u_xlat5.x = (-u_xlat5.x) + 1.0;
    u_xlat5.x = max(u_xlat5.x, 9.99999975e-05);
    u_xlat5.x = log2(u_xlat5.x);
    u_xlat21 = u_xlat5.x * _SpecularPower;
    u_xlat21 = exp2(u_xlat21);
    u_xlat6.xyz = u_xlat36.xxx * _LightColor0.xyz;
    u_xlat6.xyz = u_xlat20.xxx * u_xlat6.xyz;
    u_xlat20.x = u_xlat49 + -1.0;
    u_xlat20.x = u_xlat4.w * u_xlat20.x;
    u_xlat20.x = u_xlat20.x * 0.100000001;
#ifdef UNITY_ADRENO_ES3
    u_xlat20.x = min(max(u_xlat20.x, 0.0), 1.0);
#else
    u_xlat20.x = clamp(u_xlat20.x, 0.0, 1.0);
#endif
    u_xlat6.xyz = u_xlat20.xxx * u_xlat6.xyz;
    u_xlat4.xy = vec2(u_xlat49) * u_xlat4.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.xy = min(max(u_xlat4.xy, 0.0), 1.0);
#else
    u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);
#endif
    u_xlat20.x = max(u_xlat4.y, 9.99999975e-05);
    u_xlat20.x = log2(u_xlat20.x);
    u_xlat20.x = u_xlat20.x * _ShoreFade;
    u_xlat20.x = exp2(u_xlat20.x);
    u_xlat8.xyz = _ShallowColor.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat8.xyz = u_xlat20.xxx * u_xlat8.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat1.xy = u_xlat1.xy / vs_TEXCOORD4.ww;
    u_xlat10_9.xyz = texture(_SceneScaledBufferBeforTransParent, u_xlat1.xy).xyz;
    u_xlat10.xyz = u_xlat8.xyz * u_xlat10_9.xyz;
    u_xlat1.x = 0.100000001 / _DeepColorDepth;
    u_xlat1.x = u_xlat1.x * u_xlat49;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.x = max(u_xlat1.x, 9.99999975e-05);
    u_xlat1.x = log2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _DeepColorFade;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat11.xyz = (-u_xlat8.xyz) * u_xlat10_9.xyz + _DeepColor.xyz;
    u_xlat11.xyz = u_xlat1.xxx * u_xlat11.xyz + u_xlat10.xyz;
    u_xlat12.xyz = u_xlat16_2.xyz * _DistortionIntensity.xyz;
    u_xlat13.x = vs_TEXCOORD8.x;
    u_xlat13.y = vs_TEXCOORD9.x;
    u_xlat13.z = vs_TEXCOORD6.x;
    u_xlat13.x = dot(u_xlat13.xyz, u_xlat12.xyz);
    u_xlat14.x = vs_TEXCOORD8.y;
    u_xlat14.y = vs_TEXCOORD9.y;
    u_xlat14.z = vs_TEXCOORD6.y;
    u_xlat13.y = dot(u_xlat14.xyz, u_xlat12.xyz);
    u_xlat14.x = vs_TEXCOORD8.z;
    u_xlat14.y = vs_TEXCOORD9.z;
    u_xlat14.z = vs_TEXCOORD6.z;
    u_xlat13.z = dot(u_xlat14.xyz, u_xlat12.xyz);
    u_xlat1.x = dot(u_xlat13.xyz, u_xlat13.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat13.xyz = u_xlat1.xxx * u_xlat13.xyz;
    u_xlat1.x = dot((-u_xlat7.xyz), u_xlat13.xyz);
    u_xlat1.x = u_xlat1.x + u_xlat1.x;
    u_xlat7.xyz = u_xlat13.xyz * (-u_xlat1.xxx) + (-u_xlat7.xyz);
    u_xlat10_0 = textureLod(_ReflectionSkyCubeMap, u_xlat7.xyz, 0.0);
    u_xlat16_2.x = u_xlat10_0.w + -1.0;
    u_xlat16_2.x = _ReflectionSkyCubeMap_HDR.w * u_xlat16_2.x + 1.0;
    u_xlat16_2.x = log2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * _ReflectionSkyCubeMap_HDR.y;
    u_xlat16_2.x = exp2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * _ReflectionSkyCubeMap_HDR.x;
    u_xlat16_18.xyz = u_xlat10_0.xyz * u_xlat16_2.xxx;
    u_xlat1.xy = u_xlat12.xy * vec2(_SSRDistortion);
    u_xlat36.x = float(1.0) / _SSRDistortion_Shore;
    u_xlat36.x = u_xlat49 * u_xlat36.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat36.x = min(max(u_xlat36.x, 0.0), 1.0);
#else
    u_xlat36.x = clamp(u_xlat36.x, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat1.xy * u_xlat36.xx;
    u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD4.ww + vs_TEXCOORD4.xy;
    u_xlat1.xy = u_xlat1.xy / vs_TEXCOORD4.ww;
    u_xlat10_3 = texture(_SSRTexture, u_xlat1.xy).wxyz;
    u_xlat16_7.xyz = (-u_xlat16_2.xxx) * u_xlat10_0.xyz + u_xlat10_3.yzw;
    u_xlat7.xyz = u_xlat16_7.xyz * vec3(vec3(_SSRIntensity, _SSRIntensity, _SSRIntensity));
    u_xlat16_3.x = u_xlat10_3.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat7.xyz = u_xlat16_3.xxx * u_xlat7.xyz + u_xlat16_18.xyz;
    u_xlat1.x = u_xlat5.x * _FresnelPower;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _ReflectionIntensity;
    u_xlat17.x = float(1.0) / _ShoreReflectionFade;
    u_xlat17.x = u_xlat17.x * u_xlat49;
#ifdef UNITY_ADRENO_ES3
    u_xlat17.x = min(max(u_xlat17.x, 0.0), 1.0);
#else
    u_xlat17.x = clamp(u_xlat17.x, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat17.x * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat7.xyz = (-u_xlat11.xyz) + u_xlat7.xyz;
    u_xlat1.xyw = u_xlat1.xxx * u_xlat7.xyz + u_xlat11.xyz;
    u_xlat1.xyw = (-u_xlat8.xyz) * u_xlat10_9.xyz + u_xlat1.xyw;
    u_xlat1.xyw = u_xlat20.xxx * u_xlat1.xyw + u_xlat10.xyz;
    u_xlat20.x = (-vs_TEXCOORD5.y) * _WorldSpaceLightPos0.w + _WorldSpaceLightPos0.y;
    u_xlat16_2.x = max(u_xlat20.x, 0.0);
    u_xlat20.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowSplitSpheres[0].xyz);
    u_xlat7.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowSplitSpheres[1].xyz);
    u_xlat8.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowSplitSpheres[2].xyz);
    u_xlat9.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowSplitSpheres[3].xyz);
    u_xlat0.x = dot(u_xlat20.xyz, u_xlat20.xyz);
    u_xlat0.y = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat0.z = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat0.w = dot(u_xlat9.xyz, u_xlat9.xyz);
    u_xlatb0 = lessThan(u_xlat0, unity_ShadowSplitSqRadii);
    u_xlat0 = mix(vec4(0.0, 0.0, 0.0, 0.0), vec4(1.0, 1.0, 1.0, 1.0), vec4(u_xlatb0));
    u_xlat16_18.x = u_xlat0.y + u_xlat0.x;
    u_xlat16_18.y = u_xlat0.z + u_xlat16_18.x;
    u_xlat3.x = -0.0;
    u_xlat3.y = (-u_xlat0.x);
    u_xlat3.zw = (-u_xlat16_18.xy);
    u_xlat0 = u_xlat0 + u_xlat3;
    u_xlat0 = max(u_xlat0, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat16_18.x = dot(u_xlat0, vec4(1.0, 1.0, 1.0, 1.0));
#ifdef UNITY_ADRENO_ES3
    u_xlatb20 = !!(u_xlat16_18.x>=0.5);
#else
    u_xlatb20 = u_xlat16_18.x>=0.5;
#endif
    if(u_xlatb20){
        u_xlat20.x = dot(u_xlat0.yzw, vec3(1.0, 2.0, 3.0));
        u_xlat20.x = min(u_xlat20.x, 3.0);
        u_xlatu20 = uint(u_xlat20.x);
        u_xlat7.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowPos[int(u_xlatu20)].xyz);
        u_xlati20 = int(u_xlatu20) << 2;
        u_xlat8.xyz = u_xlat7.yyy * hlslcc_mtx4x4unity_WorldToShadow[(u_xlati20 + 1)].xyz;
        u_xlat7.xyw = hlslcc_mtx4x4unity_WorldToShadow[u_xlati20].xyz * u_xlat7.xxx + u_xlat8.xyz;
        u_xlat7.xyz = hlslcc_mtx4x4unity_WorldToShadow[(u_xlati20 + 2)].xyz * u_xlat7.zzz + u_xlat7.xyw;
        u_xlat20.xyz = u_xlat7.xyz + hlslcc_mtx4x4unity_WorldToShadow[(u_xlati20 + 3)].xyz;
        vec3 txVec0 = vec3(u_xlat20.xy,u_xlat20.z);
        u_xlat10_20 = textureLod(hlslcc_zcmp_CascadeShadowMapTexture, txVec0, 0.0);
        u_xlat16_36 = (-_LightShadowData.x) + 1.0;
        u_xlat20.x = u_xlat10_20 * u_xlat16_36 + _LightShadowData.x;
    } else {
        u_xlat20.x = 1.0;
    //ENDIF
    }
    u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;
    u_xlat20.xyz = u_xlat16_2.xyz * u_xlat20.xxx + vs_TEXCOORD1.xyz;
    u_xlat16_2.xyz = u_xlat20.xyz * vec3(0.300000012, 0.300000012, 0.300000012) + vec3(0.699999988, 0.699999988, 0.699999988);
    u_xlat20.x = sqrt(u_xlat53);
    u_xlat16_50 = u_xlat20.x + (-_DepthFoamCloseFadeOffset);
    u_xlat16_50 = u_xlat16_50 / _DepthFoamCloseFadeDistance;
    u_xlat16_15 = vs_COLOR0.x * _DepthFoamExtent;
    u_xlat33 = max(u_xlat33, 0.0);
    u_xlat33 = min(u_xlat16_15, u_xlat33);
    u_xlat16_15 = _DepthFoamExtent * vs_COLOR0.x + 9.99999975e-05;
    u_xlat33 = u_xlat33 / u_xlat16_15;
    u_xlat33 = (-u_xlat33) + 1.0;
    u_xlat36.xy = vec2(_Time.y * _DepthFoamMask_ST.z, _Time.y * _DepthFoamMask_ST.w);
    u_xlat36.xy = fract(u_xlat36.xy);
    u_xlat36.xy = _DepthFoamMask_ST.xy * vs_TEXCOORD5.xz + u_xlat36.xy;
    u_xlat10_36 = texture(_DepthFoamMask, u_xlat36.xy).x;
    u_xlat52 = vs_TEXCOORD5.z + vs_TEXCOORD5.x;
    u_xlat52 = u_xlat52 * _DepthFoamPhaseScale;
    u_xlat52 = _DepthFoamSpeed * _Time.y + u_xlat52;
    u_xlat5.x = (-u_xlat33) + 1.0;
    u_xlat16_15 = _DepthFoamSubdivision * u_xlat33 + u_xlat52;
    u_xlat16_15 = sin(u_xlat16_15);
    u_xlat16_15 = _DepthFoamWidth * u_xlat33 + u_xlat16_15;
    u_xlat16_52 = u_xlat10_36 * 2.0 + -1.0;
    u_xlat52 = u_xlat16_52 + u_xlat16_15;
#ifdef UNITY_ADRENO_ES3
    u_xlatb52 = !!(u_xlat52>=u_xlat5.x);
#else
    u_xlatb52 = u_xlat52>=u_xlat5.x;
#endif
    u_xlat52 = u_xlatb52 ? 1.0 : float(0.0);
    u_xlat36.x = u_xlat52 * u_xlat10_36;
    u_xlat16_15 = _DepthFoamDistance + 9.99999975e-05;
    u_xlat16_15 = u_xlat20.x / u_xlat16_15;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_15 = min(max(u_xlat16_15, 0.0), 1.0);
#else
    u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);
#endif
    u_xlat16_20.x = (-u_xlat16_15) + 1.0;
    u_xlat16_15 = vs_COLOR0.y * _DepthFoamColor.w;
    u_xlat16_50 = u_xlat16_50 * u_xlat16_15;
    u_xlat16_50 = u_xlat36.x * u_xlat16_50;
    u_xlat16_50 = u_xlat33 * u_xlat16_50;
    u_xlat16_50 = u_xlat16_20.x * u_xlat16_50;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_50 = min(max(u_xlat16_50, 0.0), 1.0);
#else
    u_xlat16_50 = clamp(u_xlat16_50, 0.0, 1.0);
#endif
    u_xlat16_2.xyz = _DepthFoamColor.xyz * u_xlat16_2.xyz + (-u_xlat1.xyw);
    u_xlat16_2.xyz = vec3(u_xlat16_50) * u_xlat16_2.xyz + u_xlat1.xyw;
    u_xlat1.xyz = u_xlat6.xyz * vec3(u_xlat21) + u_xlat16_2.xyz;
    u_xlat0.w = u_xlat4.x * vs_COLOR0.w;
    u_xlat4.xyz = vs_TEXCOORD5.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat5.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat5.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat5.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat49 = dot(u_xlat4.xyz, u_xlat5.xyz);
    u_xlat4.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat4.x = sqrt(u_xlat4.x);
    u_xlat20.y = u_xlat4.x * _HeigtFogParams.y;
    u_xlat52 = u_xlat4.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat52 = min(max(u_xlat52, 0.0), 1.0);
#else
    u_xlat52 = clamp(u_xlat52, 0.0, 1.0);
#endif
    u_xlat5.x = (-u_xlat52) + 2.0;
    u_xlat52 = u_xlat52 * u_xlat5.x;
    u_xlat5.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb49 = !!((-u_xlat49)>=u_xlat5.x);
#else
    u_xlatb49 = (-u_xlat49)>=u_xlat5.x;
#endif
    u_xlat5.x = u_xlat52 * _HeigtFogColDelta.w;
    u_xlat49 = (u_xlatb49) ? u_xlat5.x : u_xlat52;
    u_xlat49 = log2(u_xlat49);
    u_xlat49 = u_xlat49 * unity_FogColor.w;
    u_xlat49 = exp2(u_xlat49);
    u_xlat49 = min(u_xlat49, _HeigtFogColBase.w);
    u_xlat52 = vs_TEXCOORD5.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat52 = min(max(u_xlat52, 0.0), 1.0);
#else
    u_xlat52 = clamp(u_xlat52, 0.0, 1.0);
#endif
    u_xlat16_2.x = (-u_xlat52) + 2.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat52;
    u_xlat5.xyz = u_xlat16_2.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat52 = u_xlat4.x + (-_HeigtFogRamp.w);
    u_xlat52 = u_xlat52 * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat52 = min(max(u_xlat52, 0.0), 1.0);
#else
    u_xlat52 = clamp(u_xlat52, 0.0, 1.0);
#endif
    u_xlat6.xyz = (-u_xlat5.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat5.xyz = vec3(u_xlat52) * u_xlat6.xyz + u_xlat5.xyz;
    u_xlat52 = u_xlat4.y * _HeigtFogParams.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb53 = !!(0.00999999978<abs(u_xlat52));
#else
    u_xlatb53 = 0.00999999978<abs(u_xlat52);
#endif
    u_xlat6.x = u_xlat52 * -1.44269502;
    u_xlat6.x = exp2(u_xlat6.x);
    u_xlat6.x = (-u_xlat6.x) + 1.0;
    u_xlat52 = u_xlat6.x / u_xlat52;
    u_xlat16_2.x = (u_xlatb53) ? u_xlat52 : 1.0;
    u_xlat20.x = u_xlat4.y * _HeigtFogParams2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb52 = !!(0.00999999978<abs(u_xlat20.x));
#else
    u_xlatb52 = 0.00999999978<abs(u_xlat20.x);
#endif
    u_xlat53 = u_xlat20.x * -1.44269502;
    u_xlat53 = exp2(u_xlat53);
    u_xlat53 = (-u_xlat53) + 1.0;
    u_xlat20.x = u_xlat53 / u_xlat20.x;
    u_xlat16_2.y = (u_xlatb52) ? u_xlat20.x : 1.0;
    u_xlat20.x = u_xlat4.x * _HeigtFogParams2.y;
    u_xlat16_2.xy = u_xlat16_2.xy * u_xlat20.yx;
    u_xlat16_2.x = exp2((-u_xlat16_2.x));
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_18.x = exp2((-u_xlat16_2.y));
    u_xlat16_2.y = (-u_xlat16_18.x) + 1.0;
    u_xlat16_2.xy = max(u_xlat16_2.xy, vec2(0.0, 0.0));
    u_xlat16_2.x = u_xlat16_2.y + u_xlat16_2.x;
    u_xlat4.x = u_xlat4.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat16_18.x = (-u_xlat4.x) + 2.0;
    u_xlat16_18.x = u_xlat16_18.x * u_xlat4.x;
    u_xlat4.x = u_xlat16_18.x * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat4.x = u_xlat4.x + 1.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat4.x;
    u_xlat4.x = min(u_xlat16_2.x, _HeigtFogColBase.w);
    u_xlat20.x = vs_TEXCOORD5.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat20.x = min(max(u_xlat20.x, 0.0), 1.0);
#else
    u_xlat20.x = clamp(u_xlat20.x, 0.0, 1.0);
#endif
    u_xlat20.xyz = u_xlat20.xxx * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    u_xlat5.xyz = vec3(u_xlat49) * u_xlat5.xyz;
    u_xlat53 = (-u_xlat4.x) + 1.0;
    u_xlat5.xyz = vec3(u_xlat53) * u_xlat5.xyz;
    u_xlat4.xyz = u_xlat20.xyz * u_xlat4.xxx + u_xlat5.xyz;
    u_xlat49 = (-u_xlat49) + 1.0;
    u_xlat49 = u_xlat53 * u_xlat49;
    u_xlat0.xyz = vec3(u_xlat49) * u_xlat1.xyz + u_xlat4.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" "MHY_SHADER_MIDDLE" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	mediump float _MHYZBias;
uniform 	vec4 hlslcc_mtx4x4_mhyJitteredVP[4];
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
out highp vec4 vs_TEXCOORD9;
out highp vec4 vs_TEXCOORD10;
float u_xlat0;
int u_xlati0;
vec4 u_xlat1;
bool u_xlatb1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
bool u_xlatb4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
mediump vec4 u_xlat16_6;
vec4 u_xlat7;
mediump vec3 u_xlat16_8;
vec3 u_xlat9;
float u_xlat10;
float u_xlat13;
bool u_xlatb13;
mediump float u_xlat16_14;
float u_xlat22;
float u_xlat28;
float u_xlat31;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat9.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4_mhyJitteredVP[1];
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[3] * u_xlat2.wwww + u_xlat1;
    u_xlat3.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    u_xlat3.xyw = u_xlat1.xyw;
    gl_Position = u_xlat3;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.xyw = u_xlat9.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat4.x = u_xlat1.y * _HeigtFogParams.x;
    u_xlat13 = u_xlat4.x * -1.44269502;
    u_xlat13 = exp2(u_xlat13);
    u_xlat13 = (-u_xlat13) + 1.0;
    u_xlat13 = u_xlat13 / u_xlat4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(0.00999999978<abs(u_xlat4.x));
#else
    u_xlatb4 = 0.00999999978<abs(u_xlat4.x);
#endif
    u_xlat16_5.x = (u_xlatb4) ? u_xlat13 : 1.0;
    u_xlat4.x = dot(u_xlat1.xyw, u_xlat1.xyw);
    u_xlat4.x = sqrt(u_xlat4.x);
    u_xlat13 = u_xlat4.x * _HeigtFogParams.y;
    u_xlat16_5.x = u_xlat13 * u_xlat16_5.x;
    u_xlat16_5.x = exp2((-u_xlat16_5.x));
    u_xlat16_5.x = (-u_xlat16_5.x) + 1.0;
    u_xlat13 = u_xlat1.y * _HeigtFogParams2.x;
    u_xlat22 = u_xlat13 * -1.44269502;
    u_xlat22 = exp2(u_xlat22);
    u_xlat22 = (-u_xlat22) + 1.0;
    u_xlat22 = u_xlat22 / u_xlat13;
#ifdef UNITY_ADRENO_ES3
    u_xlatb13 = !!(0.00999999978<abs(u_xlat13));
#else
    u_xlatb13 = 0.00999999978<abs(u_xlat13);
#endif
    u_xlat16_14 = (u_xlatb13) ? u_xlat22 : 1.0;
    u_xlat13 = u_xlat4.x * _HeigtFogParams2.y;
    u_xlat16_14 = u_xlat13 * u_xlat16_14;
    u_xlat16_14 = exp2((-u_xlat16_14));
    u_xlat16_5.y = (-u_xlat16_14) + 1.0;
    u_xlat16_5.xy = max(u_xlat16_5.xy, vec2(0.0, 0.0));
    u_xlat16_5.x = u_xlat16_5.y + u_xlat16_5.x;
    u_xlat13 = u_xlat4.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat13 = min(max(u_xlat13, 0.0), 1.0);
#else
    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
#endif
    u_xlat16_14 = (-u_xlat13) + 2.0;
    u_xlat16_14 = u_xlat13 * u_xlat16_14;
    u_xlat13 = u_xlat16_14 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat13 = u_xlat13 + 1.0;
    u_xlat16_5.x = u_xlat13 * u_xlat16_5.x;
    u_xlat13 = min(u_xlat16_5.x, _HeigtFogColBase.w);
    u_xlat22 = (-u_xlat13) + 1.0;
    u_xlat31 = _ProjectionParams.z * 0.999899983;
    u_xlat6.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat6.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat6.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat1.x = dot(u_xlat1.xyw, u_xlat6.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!((-u_xlat1.x)>=u_xlat31);
#else
    u_xlatb1 = (-u_xlat1.x)>=u_xlat31;
#endif
    u_xlat10 = u_xlat4.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat10 = min(max(u_xlat10, 0.0), 1.0);
#else
    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
#endif
    u_xlat28 = u_xlat4.x + (-_HeigtFogRamp.w);
    u_xlat28 = u_xlat28 * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat28 = min(max(u_xlat28, 0.0), 1.0);
#else
    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
#endif
    u_xlat4.x = (-u_xlat10) + 2.0;
    u_xlat10 = u_xlat10 * u_xlat4.x;
    u_xlat4.x = u_xlat10 * _HeigtFogColDelta.w;
    u_xlat1.x = (u_xlatb1) ? u_xlat4.x : u_xlat10;
    u_xlat1.x = log2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * unity_FogColor.w;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat1.x = min(u_xlat1.x, _HeigtFogColBase.w);
    u_xlat10 = u_xlat9.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat10 = min(max(u_xlat10, 0.0), 1.0);
#else
    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
#endif
    u_xlat16_5.x = (-u_xlat10) + 2.0;
    u_xlat16_5.x = u_xlat10 * u_xlat16_5.x;
    u_xlat6.xyz = u_xlat16_5.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat7.xyz = (-u_xlat6.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat6.xyz = vec3(u_xlat28) * u_xlat7.xyz + u_xlat6.xyz;
    u_xlat6.xyz = u_xlat1.xxx * u_xlat6.xyz;
    u_xlat1.x = (-u_xlat1.x) + 1.0;
    vs_TEXCOORD0.w = u_xlat22 * u_xlat1.x;
    u_xlat1.xyw = vec3(u_xlat22) * u_xlat6.xyz;
    u_xlat4.x = u_xlat9.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat4.xzw = u_xlat4.xxx * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    vs_TEXCOORD0.xyz = u_xlat4.xzw * vec3(u_xlat13) + u_xlat1.xyw;
    vs_TEXCOORD1.w = 1.0;
    u_xlat4.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat4.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat4.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat1.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
    u_xlat16_5.x = u_xlat4.y * u_xlat4.y;
    u_xlat16_5.x = u_xlat4.x * u_xlat4.x + (-u_xlat16_5.x);
    u_xlat16_6 = u_xlat4.yzzx * u_xlat4.xyzz;
    u_xlat16_8.x = dot(unity_SHBr, u_xlat16_6);
    u_xlat16_8.y = dot(unity_SHBg, u_xlat16_6);
    u_xlat16_8.z = dot(unity_SHBb, u_xlat16_6);
    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_8.xyz;
    u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat4.w = 1.0;
    u_xlat16_8.x = dot(unity_SHAr, u_xlat4);
    u_xlat16_8.y = dot(unity_SHAg, u_xlat4);
    u_xlat16_8.z = dot(unity_SHAb, u_xlat4);
    u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_8.xyz;
    vs_TEXCOORD1.xyz = u_xlat16_5.xyz;
    u_xlat1.x = u_xlat3.y * _ProjectionParams.x;
    u_xlat7.w = u_xlat1.x * 0.5;
    u_xlat7.xz = u_xlat3.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.z = u_xlat1.z;
    u_xlat3.xy = u_xlat7.zz + u_xlat7.xw;
    vs_TEXCOORD2 = u_xlat3;
    vs_TEXCOORD4.xyw = u_xlat3.xyw;
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD3.w = 0.0;
    u_xlat1.x = u_xlat2.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat2.x + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat2.z + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat2.w + u_xlat1.x;
    vs_TEXCOORD3.z = (-u_xlat1.x);
    vs_TEXCOORD5.w = 0.0;
    vs_TEXCOORD5.xyz = u_xlat9.xyz;
    u_xlat9.xyz = (-u_xlat9.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD6.w = 0.0;
    vs_TEXCOORD6.xyz = u_xlat4.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].www + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * in_POSITION0.yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.zzz + u_xlat1.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.www + u_xlat1.xyz;
    vs_TEXCOORD7.xyz = u_xlat1.xyz * vec3(-1.0, -1.0, 1.0);
    vs_TEXCOORD7.w = 0.0;
    u_xlat1.xyz = in_TANGENT0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat0 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0 = inversesqrt(u_xlat0);
    u_xlat1.xyz = vec3(u_xlat0) * u_xlat1.xyz;
    vs_TEXCOORD8.xyz = u_xlat1.xyz;
    vs_TEXCOORD8.w = 0.0;
    u_xlat2.xyz = u_xlat1.yzx * u_xlat4.zxy;
    u_xlat1.xyz = u_xlat4.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
    u_xlat0 = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD9.xyz = vec3(u_xlat0) * u_xlat1.xyz;
    vs_TEXCOORD9.w = 0.0;
    u_xlat0 = u_xlat9.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat9.x + u_xlat0;
    vs_TEXCOORD10.w = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat9.z + u_xlat0;
    vs_TEXCOORD10.xyz = u_xlat9.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowPos[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	mediump vec4 _DepthFoamMask_ST;
uniform 	mediump float _DepthFoamSpeed;
uniform 	mediump vec4 _DepthFoamColor;
uniform 	mediump float _DepthFoamExtent;
uniform 	mediump float _DepthFoamDistance;
uniform 	mediump float _DepthFoamSubdivision;
uniform 	mediump float _DepthFoamWidth;
uniform 	mediump float _DepthFoamPhaseScale;
uniform 	mediump float _DepthFoamCloseFadeOffset;
uniform 	mediump float _DepthFoamCloseFadeDistance;
uniform 	float _NormalMapScale;
uniform 	float _Normal01_U_Speed;
uniform 	float _Normal01_VSpeed;
uniform 	float _NormalMapBias;
uniform 	float _Normal02_U_Speed;
uniform 	float _Normal02_V_Speed;
uniform 	float _RefractionIntensity;
uniform 	float _OpacityByDepth;
uniform 	float _SpecularIntensity;
uniform 	vec3 _ES_MoonDirection;
uniform 	vec3 _ES_SunDirection;
uniform 	float _Gloss;
uniform 	float _ShoreTransparency;
uniform 	float _SpecularPower;
uniform 	vec4 _ShallowColor;
uniform 	float _ShoreFade;
uniform 	vec4 _DeepColor;
uniform 	float _DeepColorDepth;
uniform 	float _DeepColorFade;
uniform 	vec4 _DistortionIntensity;
uniform 	float _SSRDistortion;
uniform 	float _SSRDistortion_Shore;
uniform 	float _SSRIntensity;
uniform 	float _ReflectionIntensity;
uniform 	float _FresnelPower;
uniform 	float _ShoreReflectionFade;
uniform 	mediump float _ProjectUVScale;
uniform 	vec4 _ReflectionSkyCubeMap_HDR;
uniform lowp sampler2D _Normal01;
uniform lowp sampler2D _Normal02;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _SceneScaledBufferBeforTransParent;
uniform lowp samplerCube _ReflectionSkyCubeMap;
uniform lowp sampler2D _SSRTexture;
uniform lowp sampler2D _DepthFoamMask;
uniform lowp sampler2DShadow hlslcc_zcmp_CascadeShadowMapTexture;
uniform lowp sampler2D _CascadeShadowMapTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD8;
in highp vec4 vs_TEXCOORD9;
in highp vec4 vs_TEXCOORD10;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec4 u_xlatb0;
vec4 u_xlat1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
lowp vec4 u_xlat10_3;
vec4 u_xlat4;
vec3 u_xlat5;
bool u_xlatb5;
vec3 u_xlat6;
vec4 u_xlat7;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
vec3 u_xlat9;
lowp vec3 u_xlat10_9;
vec3 u_xlat10;
vec3 u_xlat11;
vec3 u_xlat12;
vec3 u_xlat13;
vec3 u_xlat14;
mediump float u_xlat16_15;
vec2 u_xlat17;
mediump vec3 u_xlat16_18;
vec3 u_xlat20;
mediump vec3 u_xlat16_20;
lowp float u_xlat10_20;
int u_xlati20;
uint u_xlatu20;
bool u_xlatb20;
float u_xlat21;
float u_xlat33;
vec2 u_xlat36;
mediump float u_xlat16_36;
lowp float u_xlat10_36;
bool u_xlatb36;
float u_xlat49;
bool u_xlatb49;
mediump float u_xlat16_50;
float u_xlat52;
mediump float u_xlat16_52;
bool u_xlatb52;
float u_xlat53;
bool u_xlatb53;
float u_xlat54;
void main()
{
    u_xlat0.xy = vs_TEXCOORD5.zx * vec2(vec2(_ProjectUVScale, _ProjectUVScale));
    u_xlat1.x = _Time.y * _Normal01_U_Speed + u_xlat0.y;
    u_xlat1.yz = _Time.yy * vec2(_Normal01_VSpeed, _Normal02_U_Speed) + u_xlat0.xy;
    u_xlat1.w = _Time.y * _Normal02_V_Speed + u_xlat0.x;
    u_xlat10_0.xyz = texture(_Normal01, u_xlat1.xy, _NormalMapBias).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_2.xy = u_xlat16_0.xy * vec2(_NormalMapScale);
    u_xlat10_1.xyz = texture(_Normal02, u_xlat1.zw, _NormalMapBias).xyz;
    u_xlat16_0.w = -1.0;
    u_xlat16_3.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.wwz;
    u_xlat16_3.xy = u_xlat16_3.xy * vec2(_NormalMapScale);
    u_xlat16_2.z = -1.0;
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
    u_xlat1.x = float(1.0) / vs_TEXCOORD4.w;
    u_xlat17.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat17.x = texture(_CameraDepthTexture, u_xlat17.xy).x;
    u_xlat17.x = _ZBufferParams.z * u_xlat17.x + _ZBufferParams.w;
    u_xlat17.x = float(1.0) / u_xlat17.x;
    u_xlat33 = vs_TEXCOORD10.w + 9.99999975e-05;
    u_xlat33 = (-u_xlat17.x) / u_xlat33;
    u_xlat33 = vs_TEXCOORD10.y * u_xlat33 + _WorldSpaceCameraPos.y;
    u_xlat33 = (-u_xlat33) + vs_TEXCOORD5.y;
    u_xlat4.xy = u_xlat16_2.xy * vec2(vec2(_RefractionIntensity, _RefractionIntensity));
    u_xlat1.x = u_xlat1.x * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.xw = u_xlat1.xx * u_xlat4.xy;
    u_xlat1.xw = u_xlat1.xw * vs_TEXCOORD4.ww;
    u_xlat17.x = u_xlat17.x + (-vs_TEXCOORD4.w);
#ifdef UNITY_ADRENO_ES3
    u_xlat17.x = min(max(u_xlat17.x, 0.0), 1.0);
#else
    u_xlat17.x = clamp(u_xlat17.x, 0.0, 1.0);
#endif
    u_xlat4.xy = u_xlat17.xx * u_xlat1.xw;
    u_xlat4.z = 0.0;
    u_xlat1.xyw = u_xlat4.xyz + vs_TEXCOORD4.xyw;
    u_xlat1.xy = u_xlat1.xy / u_xlat1.ww;
    u_xlat1.x = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat1.x = _ZBufferParams.z * u_xlat1.x + _ZBufferParams.w;
    u_xlat1.x = float(1.0) / u_xlat1.x;
    u_xlat1.x = u_xlat1.x + (-vs_TEXCOORD4.w);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.xyw = u_xlat1.xxx * u_xlat4.xyz + vs_TEXCOORD4.xyw;
    u_xlat4.xy = u_xlat1.xy / u_xlat1.ww;
    u_xlat49 = texture(_CameraDepthTexture, u_xlat4.xy).x;
    u_xlat49 = _ZBufferParams.z * u_xlat49 + _ZBufferParams.w;
    u_xlat49 = float(1.0) / u_xlat49;
    u_xlat49 = u_xlat49 + (-vs_TEXCOORD4.w);
    u_xlat4.x = 0.100000001 / _OpacityByDepth;
    u_xlat16_3.xz = u_xlat16_2.xy;
    u_xlat16_3.y = 1.0;
    u_xlat16_20.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
    u_xlat16_20.x = inversesqrt(u_xlat16_20.x);
    u_xlat16_20.xyz = u_xlat16_3.xyz * u_xlat16_20.xxx;
#ifdef UNITY_ADRENO_ES3
    u_xlatb5 = !!(0.0>=_ES_MoonDirection.y);
#else
    u_xlatb5 = 0.0>=_ES_MoonDirection.y;
#endif
    u_xlat5.xyz = (bool(u_xlatb5)) ? _ES_SunDirection.xyz : _ES_MoonDirection.xyz;
    u_xlat6.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat53 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat54 = inversesqrt(u_xlat53);
    u_xlat7.xyz = vec3(u_xlat54) * u_xlat6.xyz;
    u_xlat5.xyz = u_xlat6.xyz * vec3(u_xlat54) + u_xlat5.xyz;
    u_xlat6.x = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat5.xyz = u_xlat5.xyz * u_xlat6.xxx;
    u_xlat20.x = dot(u_xlat16_20.xyz, u_xlat5.xyz);
    u_xlat36.x = _Gloss * 128.0;
    u_xlat20.x = max(u_xlat20.x, 9.99999975e-05);
    u_xlat20.x = log2(u_xlat20.x);
    u_xlat20.x = u_xlat20.x * u_xlat36.x;
    u_xlat20.x = exp2(u_xlat20.x);
    u_xlat20.x = u_xlat20.x * _SpecularIntensity;
    u_xlat20.x = max(u_xlat20.x, 0.0);
    u_xlat20.x = min(u_xlat20.x, 16.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb36 = !!(_ES_MoonDirection.y>=9.99999975e-05);
#else
    u_xlatb36 = _ES_MoonDirection.y>=9.99999975e-05;
#endif
    u_xlat36.x = u_xlatb36 ? 1.0 : float(0.0);
    u_xlat52 = _ES_MoonDirection.y + -1.0;
    u_xlat36.x = u_xlat36.x * u_xlat52 + 1.0;
    u_xlat4.w = float(1.0) / _ShoreTransparency;
    u_xlat5.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat5.x = inversesqrt(u_xlat5.x);
    u_xlat5.xyz = u_xlat5.xxx * vs_TEXCOORD6.xyz;
    u_xlat5.x = dot(u_xlat7.xyz, u_xlat5.xyz);
    u_xlat5.x = (-u_xlat5.x) + 1.0;
    u_xlat5.x = max(u_xlat5.x, 9.99999975e-05);
    u_xlat5.x = log2(u_xlat5.x);
    u_xlat21 = u_xlat5.x * _SpecularPower;
    u_xlat21 = exp2(u_xlat21);
    u_xlat6.xyz = u_xlat36.xxx * _LightColor0.xyz;
    u_xlat6.xyz = u_xlat20.xxx * u_xlat6.xyz;
    u_xlat20.x = u_xlat49 + -1.0;
    u_xlat20.x = u_xlat4.w * u_xlat20.x;
    u_xlat20.x = u_xlat20.x * 0.100000001;
#ifdef UNITY_ADRENO_ES3
    u_xlat20.x = min(max(u_xlat20.x, 0.0), 1.0);
#else
    u_xlat20.x = clamp(u_xlat20.x, 0.0, 1.0);
#endif
    u_xlat6.xyz = u_xlat20.xxx * u_xlat6.xyz;
    u_xlat4.xy = vec2(u_xlat49) * u_xlat4.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.xy = min(max(u_xlat4.xy, 0.0), 1.0);
#else
    u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);
#endif
    u_xlat20.x = max(u_xlat4.y, 9.99999975e-05);
    u_xlat20.x = log2(u_xlat20.x);
    u_xlat20.x = u_xlat20.x * _ShoreFade;
    u_xlat20.x = exp2(u_xlat20.x);
    u_xlat8.xyz = _ShallowColor.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat8.xyz = u_xlat20.xxx * u_xlat8.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat1.xy = u_xlat1.xy / vs_TEXCOORD4.ww;
    u_xlat10_9.xyz = texture(_SceneScaledBufferBeforTransParent, u_xlat1.xy).xyz;
    u_xlat10.xyz = u_xlat8.xyz * u_xlat10_9.xyz;
    u_xlat1.x = 0.100000001 / _DeepColorDepth;
    u_xlat1.x = u_xlat1.x * u_xlat49;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.x = max(u_xlat1.x, 9.99999975e-05);
    u_xlat1.x = log2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _DeepColorFade;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat11.xyz = (-u_xlat8.xyz) * u_xlat10_9.xyz + _DeepColor.xyz;
    u_xlat11.xyz = u_xlat1.xxx * u_xlat11.xyz + u_xlat10.xyz;
    u_xlat12.xyz = u_xlat16_2.xyz * _DistortionIntensity.xyz;
    u_xlat13.x = vs_TEXCOORD8.x;
    u_xlat13.y = vs_TEXCOORD9.x;
    u_xlat13.z = vs_TEXCOORD6.x;
    u_xlat13.x = dot(u_xlat13.xyz, u_xlat12.xyz);
    u_xlat14.x = vs_TEXCOORD8.y;
    u_xlat14.y = vs_TEXCOORD9.y;
    u_xlat14.z = vs_TEXCOORD6.y;
    u_xlat13.y = dot(u_xlat14.xyz, u_xlat12.xyz);
    u_xlat14.x = vs_TEXCOORD8.z;
    u_xlat14.y = vs_TEXCOORD9.z;
    u_xlat14.z = vs_TEXCOORD6.z;
    u_xlat13.z = dot(u_xlat14.xyz, u_xlat12.xyz);
    u_xlat1.x = dot(u_xlat13.xyz, u_xlat13.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat13.xyz = u_xlat1.xxx * u_xlat13.xyz;
    u_xlat1.x = dot((-u_xlat7.xyz), u_xlat13.xyz);
    u_xlat1.x = u_xlat1.x + u_xlat1.x;
    u_xlat7.xyz = u_xlat13.xyz * (-u_xlat1.xxx) + (-u_xlat7.xyz);
    u_xlat10_0 = textureLod(_ReflectionSkyCubeMap, u_xlat7.xyz, 0.0);
    u_xlat16_2.x = u_xlat10_0.w + -1.0;
    u_xlat16_2.x = _ReflectionSkyCubeMap_HDR.w * u_xlat16_2.x + 1.0;
    u_xlat16_2.x = log2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * _ReflectionSkyCubeMap_HDR.y;
    u_xlat16_2.x = exp2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * _ReflectionSkyCubeMap_HDR.x;
    u_xlat16_18.xyz = u_xlat10_0.xyz * u_xlat16_2.xxx;
    u_xlat1.xy = u_xlat12.xy * vec2(_SSRDistortion);
    u_xlat36.x = float(1.0) / _SSRDistortion_Shore;
    u_xlat36.x = u_xlat49 * u_xlat36.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat36.x = min(max(u_xlat36.x, 0.0), 1.0);
#else
    u_xlat36.x = clamp(u_xlat36.x, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat1.xy * u_xlat36.xx;
    u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD4.ww + vs_TEXCOORD4.xy;
    u_xlat1.xy = u_xlat1.xy / vs_TEXCOORD4.ww;
    u_xlat10_3 = texture(_SSRTexture, u_xlat1.xy).wxyz;
    u_xlat16_7.xyz = (-u_xlat16_2.xxx) * u_xlat10_0.xyz + u_xlat10_3.yzw;
    u_xlat7.xyz = u_xlat16_7.xyz * vec3(vec3(_SSRIntensity, _SSRIntensity, _SSRIntensity));
    u_xlat16_3.x = u_xlat10_3.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat7.xyz = u_xlat16_3.xxx * u_xlat7.xyz + u_xlat16_18.xyz;
    u_xlat1.x = u_xlat5.x * _FresnelPower;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _ReflectionIntensity;
    u_xlat17.x = float(1.0) / _ShoreReflectionFade;
    u_xlat17.x = u_xlat17.x * u_xlat49;
#ifdef UNITY_ADRENO_ES3
    u_xlat17.x = min(max(u_xlat17.x, 0.0), 1.0);
#else
    u_xlat17.x = clamp(u_xlat17.x, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat17.x * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat7.xyz = (-u_xlat11.xyz) + u_xlat7.xyz;
    u_xlat1.xyw = u_xlat1.xxx * u_xlat7.xyz + u_xlat11.xyz;
    u_xlat1.xyw = (-u_xlat8.xyz) * u_xlat10_9.xyz + u_xlat1.xyw;
    u_xlat1.xyw = u_xlat20.xxx * u_xlat1.xyw + u_xlat10.xyz;
    u_xlat20.x = (-vs_TEXCOORD5.y) * _WorldSpaceLightPos0.w + _WorldSpaceLightPos0.y;
    u_xlat16_2.x = max(u_xlat20.x, 0.0);
    u_xlat20.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowSplitSpheres[0].xyz);
    u_xlat7.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowSplitSpheres[1].xyz);
    u_xlat8.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowSplitSpheres[2].xyz);
    u_xlat9.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowSplitSpheres[3].xyz);
    u_xlat0.x = dot(u_xlat20.xyz, u_xlat20.xyz);
    u_xlat0.y = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat0.z = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat0.w = dot(u_xlat9.xyz, u_xlat9.xyz);
    u_xlatb0 = lessThan(u_xlat0, unity_ShadowSplitSqRadii);
    u_xlat0 = mix(vec4(0.0, 0.0, 0.0, 0.0), vec4(1.0, 1.0, 1.0, 1.0), vec4(u_xlatb0));
    u_xlat16_18.x = u_xlat0.y + u_xlat0.x;
    u_xlat16_18.y = u_xlat0.z + u_xlat16_18.x;
    u_xlat3.x = -0.0;
    u_xlat3.y = (-u_xlat0.x);
    u_xlat3.zw = (-u_xlat16_18.xy);
    u_xlat0 = u_xlat0 + u_xlat3;
    u_xlat0 = max(u_xlat0, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat16_18.x = dot(u_xlat0, vec4(1.0, 1.0, 1.0, 1.0));
#ifdef UNITY_ADRENO_ES3
    u_xlatb20 = !!(u_xlat16_18.x>=0.5);
#else
    u_xlatb20 = u_xlat16_18.x>=0.5;
#endif
    if(u_xlatb20){
        u_xlat20.x = dot(u_xlat0.yzw, vec3(1.0, 2.0, 3.0));
        u_xlat20.x = min(u_xlat20.x, 3.0);
        u_xlatu20 = uint(u_xlat20.x);
        u_xlat7.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowPos[int(u_xlatu20)].xyz);
        u_xlati20 = int(u_xlatu20) << 2;
        u_xlat8.xyz = u_xlat7.yyy * hlslcc_mtx4x4unity_WorldToShadow[(u_xlati20 + 1)].xyz;
        u_xlat7.xyw = hlslcc_mtx4x4unity_WorldToShadow[u_xlati20].xyz * u_xlat7.xxx + u_xlat8.xyz;
        u_xlat7.xyz = hlslcc_mtx4x4unity_WorldToShadow[(u_xlati20 + 2)].xyz * u_xlat7.zzz + u_xlat7.xyw;
        u_xlat20.xyz = u_xlat7.xyz + hlslcc_mtx4x4unity_WorldToShadow[(u_xlati20 + 3)].xyz;
        vec3 txVec0 = vec3(u_xlat20.xy,u_xlat20.z);
        u_xlat10_20 = textureLod(hlslcc_zcmp_CascadeShadowMapTexture, txVec0, 0.0);
        u_xlat16_36 = (-_LightShadowData.x) + 1.0;
        u_xlat20.x = u_xlat10_20 * u_xlat16_36 + _LightShadowData.x;
    } else {
        u_xlat20.x = 1.0;
    //ENDIF
    }
    u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;
    u_xlat20.xyz = u_xlat16_2.xyz * u_xlat20.xxx + vs_TEXCOORD1.xyz;
    u_xlat16_2.xyz = u_xlat20.xyz * vec3(0.300000012, 0.300000012, 0.300000012) + vec3(0.699999988, 0.699999988, 0.699999988);
    u_xlat20.x = sqrt(u_xlat53);
    u_xlat16_50 = u_xlat20.x + (-_DepthFoamCloseFadeOffset);
    u_xlat16_50 = u_xlat16_50 / _DepthFoamCloseFadeDistance;
    u_xlat16_15 = vs_COLOR0.x * _DepthFoamExtent;
    u_xlat33 = max(u_xlat33, 0.0);
    u_xlat33 = min(u_xlat16_15, u_xlat33);
    u_xlat16_15 = _DepthFoamExtent * vs_COLOR0.x + 9.99999975e-05;
    u_xlat33 = u_xlat33 / u_xlat16_15;
    u_xlat33 = (-u_xlat33) + 1.0;
    u_xlat36.xy = vec2(_Time.y * _DepthFoamMask_ST.z, _Time.y * _DepthFoamMask_ST.w);
    u_xlat36.xy = fract(u_xlat36.xy);
    u_xlat36.xy = _DepthFoamMask_ST.xy * vs_TEXCOORD5.xz + u_xlat36.xy;
    u_xlat10_36 = texture(_DepthFoamMask, u_xlat36.xy).x;
    u_xlat52 = vs_TEXCOORD5.z + vs_TEXCOORD5.x;
    u_xlat52 = u_xlat52 * _DepthFoamPhaseScale;
    u_xlat52 = _DepthFoamSpeed * _Time.y + u_xlat52;
    u_xlat5.x = (-u_xlat33) + 1.0;
    u_xlat16_15 = _DepthFoamSubdivision * u_xlat33 + u_xlat52;
    u_xlat16_15 = sin(u_xlat16_15);
    u_xlat16_15 = _DepthFoamWidth * u_xlat33 + u_xlat16_15;
    u_xlat16_52 = u_xlat10_36 * 2.0 + -1.0;
    u_xlat52 = u_xlat16_52 + u_xlat16_15;
#ifdef UNITY_ADRENO_ES3
    u_xlatb52 = !!(u_xlat52>=u_xlat5.x);
#else
    u_xlatb52 = u_xlat52>=u_xlat5.x;
#endif
    u_xlat52 = u_xlatb52 ? 1.0 : float(0.0);
    u_xlat36.x = u_xlat52 * u_xlat10_36;
    u_xlat16_15 = _DepthFoamDistance + 9.99999975e-05;
    u_xlat16_15 = u_xlat20.x / u_xlat16_15;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_15 = min(max(u_xlat16_15, 0.0), 1.0);
#else
    u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);
#endif
    u_xlat16_20.x = (-u_xlat16_15) + 1.0;
    u_xlat16_15 = vs_COLOR0.y * _DepthFoamColor.w;
    u_xlat16_50 = u_xlat16_50 * u_xlat16_15;
    u_xlat16_50 = u_xlat36.x * u_xlat16_50;
    u_xlat16_50 = u_xlat33 * u_xlat16_50;
    u_xlat16_50 = u_xlat16_20.x * u_xlat16_50;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_50 = min(max(u_xlat16_50, 0.0), 1.0);
#else
    u_xlat16_50 = clamp(u_xlat16_50, 0.0, 1.0);
#endif
    u_xlat16_2.xyz = _DepthFoamColor.xyz * u_xlat16_2.xyz + (-u_xlat1.xyw);
    u_xlat16_2.xyz = vec3(u_xlat16_50) * u_xlat16_2.xyz + u_xlat1.xyw;
    u_xlat1.xyz = u_xlat6.xyz * vec3(u_xlat21) + u_xlat16_2.xyz;
    u_xlat0.w = u_xlat4.x * vs_COLOR0.w;
    u_xlat4.xyz = vs_TEXCOORD5.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat5.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat5.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat5.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat49 = dot(u_xlat4.xyz, u_xlat5.xyz);
    u_xlat4.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat4.x = sqrt(u_xlat4.x);
    u_xlat20.y = u_xlat4.x * _HeigtFogParams.y;
    u_xlat52 = u_xlat4.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat52 = min(max(u_xlat52, 0.0), 1.0);
#else
    u_xlat52 = clamp(u_xlat52, 0.0, 1.0);
#endif
    u_xlat5.x = (-u_xlat52) + 2.0;
    u_xlat52 = u_xlat52 * u_xlat5.x;
    u_xlat5.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb49 = !!((-u_xlat49)>=u_xlat5.x);
#else
    u_xlatb49 = (-u_xlat49)>=u_xlat5.x;
#endif
    u_xlat5.x = u_xlat52 * _HeigtFogColDelta.w;
    u_xlat49 = (u_xlatb49) ? u_xlat5.x : u_xlat52;
    u_xlat49 = log2(u_xlat49);
    u_xlat49 = u_xlat49 * unity_FogColor.w;
    u_xlat49 = exp2(u_xlat49);
    u_xlat49 = min(u_xlat49, _HeigtFogColBase.w);
    u_xlat52 = vs_TEXCOORD5.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat52 = min(max(u_xlat52, 0.0), 1.0);
#else
    u_xlat52 = clamp(u_xlat52, 0.0, 1.0);
#endif
    u_xlat16_2.x = (-u_xlat52) + 2.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat52;
    u_xlat5.xyz = u_xlat16_2.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat52 = u_xlat4.x + (-_HeigtFogRamp.w);
    u_xlat52 = u_xlat52 * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat52 = min(max(u_xlat52, 0.0), 1.0);
#else
    u_xlat52 = clamp(u_xlat52, 0.0, 1.0);
#endif
    u_xlat6.xyz = (-u_xlat5.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat5.xyz = vec3(u_xlat52) * u_xlat6.xyz + u_xlat5.xyz;
    u_xlat52 = u_xlat4.y * _HeigtFogParams.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb53 = !!(0.00999999978<abs(u_xlat52));
#else
    u_xlatb53 = 0.00999999978<abs(u_xlat52);
#endif
    u_xlat6.x = u_xlat52 * -1.44269502;
    u_xlat6.x = exp2(u_xlat6.x);
    u_xlat6.x = (-u_xlat6.x) + 1.0;
    u_xlat52 = u_xlat6.x / u_xlat52;
    u_xlat16_2.x = (u_xlatb53) ? u_xlat52 : 1.0;
    u_xlat20.x = u_xlat4.y * _HeigtFogParams2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb52 = !!(0.00999999978<abs(u_xlat20.x));
#else
    u_xlatb52 = 0.00999999978<abs(u_xlat20.x);
#endif
    u_xlat53 = u_xlat20.x * -1.44269502;
    u_xlat53 = exp2(u_xlat53);
    u_xlat53 = (-u_xlat53) + 1.0;
    u_xlat20.x = u_xlat53 / u_xlat20.x;
    u_xlat16_2.y = (u_xlatb52) ? u_xlat20.x : 1.0;
    u_xlat20.x = u_xlat4.x * _HeigtFogParams2.y;
    u_xlat16_2.xy = u_xlat16_2.xy * u_xlat20.yx;
    u_xlat16_2.x = exp2((-u_xlat16_2.x));
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_18.x = exp2((-u_xlat16_2.y));
    u_xlat16_2.y = (-u_xlat16_18.x) + 1.0;
    u_xlat16_2.xy = max(u_xlat16_2.xy, vec2(0.0, 0.0));
    u_xlat16_2.x = u_xlat16_2.y + u_xlat16_2.x;
    u_xlat4.x = u_xlat4.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat16_18.x = (-u_xlat4.x) + 2.0;
    u_xlat16_18.x = u_xlat16_18.x * u_xlat4.x;
    u_xlat4.x = u_xlat16_18.x * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat4.x = u_xlat4.x + 1.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat4.x;
    u_xlat4.x = min(u_xlat16_2.x, _HeigtFogColBase.w);
    u_xlat20.x = vs_TEXCOORD5.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat20.x = min(max(u_xlat20.x, 0.0), 1.0);
#else
    u_xlat20.x = clamp(u_xlat20.x, 0.0, 1.0);
#endif
    u_xlat20.xyz = u_xlat20.xxx * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    u_xlat5.xyz = vec3(u_xlat49) * u_xlat5.xyz;
    u_xlat53 = (-u_xlat4.x) + 1.0;
    u_xlat5.xyz = vec3(u_xlat53) * u_xlat5.xyz;
    u_xlat4.xyz = u_xlat20.xyz * u_xlat4.xxx + u_xlat5.xyz;
    u_xlat49 = (-u_xlat49) + 1.0;
    u_xlat49 = u_xlat53 * u_xlat49;
    u_xlat0.xyz = vec3(u_xlat49) * u_xlat1.xyz + u_xlat4.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "MHY_SHADER_LOW" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	mediump float _MHYZBias;
uniform 	vec4 hlslcc_mtx4x4_mhyJitteredVP[4];
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
out highp vec4 vs_TEXCOORD9;
out highp vec4 vs_TEXCOORD10;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
vec4 u_xlat4;
bool u_xlatb4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
mediump vec4 u_xlat16_6;
vec4 u_xlat7;
mediump vec3 u_xlat16_8;
float u_xlat11;
vec3 u_xlat13;
mediump float u_xlat16_14;
float u_xlat27;
bool u_xlatb27;
float u_xlat29;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4_mhyJitteredVP[1];
    u_xlat2 = hlslcc_mtx4x4_mhyJitteredVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4_mhyJitteredVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4_mhyJitteredVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat3.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    u_xlat3.xyw = u_xlat2.xyw;
    gl_Position = u_xlat3;
    vs_COLOR0 = in_COLOR0;
    u_xlat2.xyw = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat27 = u_xlat2.y * _HeigtFogParams.x;
    u_xlat4.x = u_xlat27 * -1.44269502;
    u_xlat4.x = exp2(u_xlat4.x);
    u_xlat4.x = (-u_xlat4.x) + 1.0;
    u_xlat4.x = u_xlat4.x / u_xlat27;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(0.00999999978<abs(u_xlat27));
#else
    u_xlatb27 = 0.00999999978<abs(u_xlat27);
#endif
    u_xlat16_5.x = (u_xlatb27) ? u_xlat4.x : 1.0;
    u_xlat27 = dot(u_xlat2.xyw, u_xlat2.xyw);
    u_xlat27 = sqrt(u_xlat27);
    u_xlat4.x = u_xlat27 * _HeigtFogParams.y;
    u_xlat16_5.x = u_xlat4.x * u_xlat16_5.x;
    u_xlat16_5.x = exp2((-u_xlat16_5.x));
    u_xlat16_5.x = (-u_xlat16_5.x) + 1.0;
    u_xlat4.x = u_xlat2.y * _HeigtFogParams2.x;
    u_xlat13.x = u_xlat4.x * -1.44269502;
    u_xlat13.x = exp2(u_xlat13.x);
    u_xlat13.x = (-u_xlat13.x) + 1.0;
    u_xlat13.x = u_xlat13.x / u_xlat4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(0.00999999978<abs(u_xlat4.x));
#else
    u_xlatb4 = 0.00999999978<abs(u_xlat4.x);
#endif
    u_xlat16_14 = (u_xlatb4) ? u_xlat13.x : 1.0;
    u_xlat4.x = u_xlat27 * _HeigtFogParams2.y;
    u_xlat16_14 = u_xlat4.x * u_xlat16_14;
    u_xlat16_14 = exp2((-u_xlat16_14));
    u_xlat16_5.y = (-u_xlat16_14) + 1.0;
    u_xlat16_5.xy = max(u_xlat16_5.xy, vec2(0.0, 0.0));
    u_xlat16_5.x = u_xlat16_5.y + u_xlat16_5.x;
    u_xlat4.x = u_xlat27 * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat16_14 = (-u_xlat4.x) + 2.0;
    u_xlat16_14 = u_xlat4.x * u_xlat16_14;
    u_xlat4.x = u_xlat16_14 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat4.x = u_xlat4.x + 1.0;
    u_xlat16_5.x = u_xlat4.x * u_xlat16_5.x;
    u_xlat4.x = min(u_xlat16_5.x, _HeigtFogColBase.w);
    u_xlat13.x = (-u_xlat4.x) + 1.0;
    u_xlat6.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat6.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat6.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat2.x = dot(u_xlat2.xyw, u_xlat6.xyz);
    u_xlat11 = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!((-u_xlat2.x)>=u_xlat11);
#else
    u_xlatb2 = (-u_xlat2.x)>=u_xlat11;
#endif
    u_xlat11 = u_xlat27 * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat11 = min(max(u_xlat11, 0.0), 1.0);
#else
    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
#endif
    u_xlat27 = u_xlat27 + (-_HeigtFogRamp.w);
    u_xlat27 = u_xlat27 * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
    u_xlat29 = (-u_xlat11) + 2.0;
    u_xlat11 = u_xlat29 * u_xlat11;
    u_xlat29 = u_xlat11 * _HeigtFogColDelta.w;
    u_xlat2.x = (u_xlatb2) ? u_xlat29 : u_xlat11;
    u_xlat2.x = log2(u_xlat2.x);
    u_xlat2.x = u_xlat2.x * unity_FogColor.w;
    u_xlat2.x = exp2(u_xlat2.x);
    u_xlat2.x = min(u_xlat2.x, _HeigtFogColBase.w);
    u_xlat11 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat11 = min(max(u_xlat11, 0.0), 1.0);
#else
    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
#endif
    u_xlat16_5.x = (-u_xlat11) + 2.0;
    u_xlat16_5.x = u_xlat11 * u_xlat16_5.x;
    u_xlat6.xyz = u_xlat16_5.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat7.xyz = (-u_xlat6.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat6.xyz = vec3(u_xlat27) * u_xlat7.xyz + u_xlat6.xyz;
    u_xlat6.xyz = u_xlat2.xxx * u_xlat6.xyz;
    u_xlat27 = (-u_xlat2.x) + 1.0;
    vs_TEXCOORD0.w = u_xlat13.x * u_xlat27;
    u_xlat2.xyw = u_xlat13.xxx * u_xlat6.xyz;
    u_xlat27 = u_xlat0.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
    u_xlat13.xyz = vec3(u_xlat27) * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    vs_TEXCOORD0.xyz = u_xlat13.xyz * u_xlat4.xxx + u_xlat2.xyw;
    u_xlat4.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat4.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat4.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat27 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat4.xyz = vec3(u_xlat27) * u_xlat4.xyz;
    u_xlat16_5.x = u_xlat4.y * u_xlat4.y;
    u_xlat16_5.x = u_xlat4.x * u_xlat4.x + (-u_xlat16_5.x);
    u_xlat16_6 = u_xlat4.yzzx * u_xlat4.xyzz;
    u_xlat16_8.x = dot(unity_SHBr, u_xlat16_6);
    u_xlat16_8.y = dot(unity_SHBg, u_xlat16_6);
    u_xlat16_8.z = dot(unity_SHBb, u_xlat16_6);
    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_8.xyz;
    u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat4.w = 1.0;
    u_xlat16_8.x = dot(unity_SHAr, u_xlat4);
    u_xlat16_8.y = dot(unity_SHAg, u_xlat4);
    u_xlat16_8.z = dot(unity_SHAb, u_xlat4);
    u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_8.xyz;
    vs_TEXCOORD1.xyz = u_xlat16_5.xyz;
    vs_TEXCOORD1.w = 1.0;
    u_xlat27 = u_xlat3.y * _ProjectionParams.x;
    u_xlat7.w = u_xlat27 * 0.5;
    u_xlat7.xz = u_xlat3.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.z = u_xlat2.z;
    u_xlat3.xy = u_xlat7.zz + u_xlat7.xw;
    vs_TEXCOORD2 = u_xlat3;
    vs_TEXCOORD4.xyw = u_xlat3.xyw;
    u_xlat27 = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat27 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat27;
    u_xlat27 = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat27;
    u_xlat27 = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat27;
    vs_TEXCOORD3.z = (-u_xlat27);
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD3.w = 0.0;
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD5.w = 0.0;
    vs_TEXCOORD6.xyz = u_xlat4.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[1].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].www + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * in_POSITION0.yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.zzz + u_xlat1.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.www + u_xlat1.xyz;
    vs_TEXCOORD7.xyz = u_xlat1.xyz * vec3(-1.0, -1.0, 1.0);
    vs_TEXCOORD7.w = 0.0;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat27 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat1.xyz = vec3(u_xlat27) * u_xlat1.xyz;
    vs_TEXCOORD8.xyz = u_xlat1.xyz;
    vs_TEXCOORD8.w = 0.0;
    u_xlat2.xyz = u_xlat1.yzx * u_xlat4.zxy;
    u_xlat1.xyz = u_xlat4.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
    u_xlat27 = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD9.xyz = vec3(u_xlat27) * u_xlat1.xyz;
    vs_TEXCOORD9.w = 0.0;
    u_xlat27 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat27 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat27;
    vs_TEXCOORD10.w = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat27;
    vs_TEXCOORD10.xyz = u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowPos[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	mediump vec4 _DepthFoamMask_ST;
uniform 	mediump float _DepthFoamSpeed;
uniform 	mediump vec4 _DepthFoamColor;
uniform 	mediump float _DepthFoamExtent;
uniform 	mediump float _DepthFoamDistance;
uniform 	mediump float _DepthFoamSubdivision;
uniform 	mediump float _DepthFoamWidth;
uniform 	mediump float _DepthFoamPhaseScale;
uniform 	mediump float _DepthFoamCloseFadeOffset;
uniform 	mediump float _DepthFoamCloseFadeDistance;
uniform 	float _NormalMapScale;
uniform 	float _Normal01_U_Speed;
uniform 	float _Normal01_VSpeed;
uniform 	float _NormalMapBias;
uniform 	float _Normal02_U_Speed;
uniform 	float _Normal02_V_Speed;
uniform 	float _RefractionIntensity;
uniform 	float _OpacityByDepth;
uniform 	float _SpecularIntensity;
uniform 	vec3 _ES_MoonDirection;
uniform 	vec3 _ES_SunDirection;
uniform 	float _Gloss;
uniform 	float _ShoreTransparency;
uniform 	float _SpecularPower;
uniform 	vec4 _ShallowColor;
uniform 	float _ShoreFade;
uniform 	vec4 _DeepColor;
uniform 	float _DeepColorDepth;
uniform 	float _DeepColorFade;
uniform 	vec4 _DistortionIntensity;
uniform 	float _ReflectionIntensity;
uniform 	float _FresnelPower;
uniform 	float _ShoreReflectionFade;
uniform 	mediump float _ProjectUVScale;
uniform 	vec4 _ReflectionSkyCubeMap_HDR;
uniform lowp sampler2D _Normal01;
uniform lowp sampler2D _Normal02;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _SceneScaledBufferBeforTransParent;
uniform lowp samplerCube _ReflectionSkyCubeMap;
uniform lowp sampler2D _DepthFoamMask;
uniform lowp sampler2DShadow hlslcc_zcmp_CascadeShadowMapTexture;
uniform lowp sampler2D _CascadeShadowMapTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD8;
in highp vec4 vs_TEXCOORD9;
in highp vec4 vs_TEXCOORD10;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec4 u_xlatb0;
vec4 u_xlat1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec4 u_xlat4;
vec3 u_xlat5;
bool u_xlatb5;
vec3 u_xlat6;
vec4 u_xlat7;
vec3 u_xlat8;
vec3 u_xlat9;
lowp vec3 u_xlat10_9;
vec3 u_xlat10;
vec3 u_xlat11;
vec3 u_xlat12;
vec3 u_xlat13;
vec3 u_xlat14;
mediump float u_xlat16_15;
vec2 u_xlat17;
mediump vec2 u_xlat16_18;
vec3 u_xlat20;
mediump vec3 u_xlat16_20;
lowp float u_xlat10_20;
int u_xlati20;
uint u_xlatu20;
bool u_xlatb20;
float u_xlat21;
float u_xlat33;
vec2 u_xlat36;
mediump float u_xlat16_36;
lowp float u_xlat10_36;
bool u_xlatb36;
float u_xlat49;
bool u_xlatb49;
mediump float u_xlat16_50;
float u_xlat52;
mediump float u_xlat16_52;
bool u_xlatb52;
float u_xlat53;
bool u_xlatb53;
float u_xlat54;
void main()
{
    u_xlat0.xy = vs_TEXCOORD5.zx * vec2(vec2(_ProjectUVScale, _ProjectUVScale));
    u_xlat1.x = _Time.y * _Normal01_U_Speed + u_xlat0.y;
    u_xlat1.yz = _Time.yy * vec2(_Normal01_VSpeed, _Normal02_U_Speed) + u_xlat0.xy;
    u_xlat1.w = _Time.y * _Normal02_V_Speed + u_xlat0.x;
    u_xlat10_0.xyz = texture(_Normal01, u_xlat1.xy, _NormalMapBias).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_2.xy = u_xlat16_0.xy * vec2(_NormalMapScale);
    u_xlat10_1.xyz = texture(_Normal02, u_xlat1.zw, _NormalMapBias).xyz;
    u_xlat16_0.w = -1.0;
    u_xlat16_3.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.wwz;
    u_xlat16_3.xy = u_xlat16_3.xy * vec2(_NormalMapScale);
    u_xlat16_2.z = -1.0;
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
    u_xlat1.x = float(1.0) / vs_TEXCOORD4.w;
    u_xlat17.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat17.x = texture(_CameraDepthTexture, u_xlat17.xy).x;
    u_xlat17.x = _ZBufferParams.z * u_xlat17.x + _ZBufferParams.w;
    u_xlat17.x = float(1.0) / u_xlat17.x;
    u_xlat33 = vs_TEXCOORD10.w + 9.99999975e-05;
    u_xlat33 = (-u_xlat17.x) / u_xlat33;
    u_xlat33 = vs_TEXCOORD10.y * u_xlat33 + _WorldSpaceCameraPos.y;
    u_xlat33 = (-u_xlat33) + vs_TEXCOORD5.y;
    u_xlat4.xy = u_xlat16_2.xy * vec2(vec2(_RefractionIntensity, _RefractionIntensity));
    u_xlat1.x = u_xlat1.x * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.xw = u_xlat1.xx * u_xlat4.xy;
    u_xlat1.xw = u_xlat1.xw * vs_TEXCOORD4.ww;
    u_xlat17.x = u_xlat17.x + (-vs_TEXCOORD4.w);
#ifdef UNITY_ADRENO_ES3
    u_xlat17.x = min(max(u_xlat17.x, 0.0), 1.0);
#else
    u_xlat17.x = clamp(u_xlat17.x, 0.0, 1.0);
#endif
    u_xlat4.xy = u_xlat17.xx * u_xlat1.xw;
    u_xlat4.z = 0.0;
    u_xlat1.xyw = u_xlat4.xyz + vs_TEXCOORD4.xyw;
    u_xlat1.xy = u_xlat1.xy / u_xlat1.ww;
    u_xlat1.x = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat1.x = _ZBufferParams.z * u_xlat1.x + _ZBufferParams.w;
    u_xlat1.x = float(1.0) / u_xlat1.x;
    u_xlat1.x = u_xlat1.x + (-vs_TEXCOORD4.w);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.xyw = u_xlat1.xxx * u_xlat4.xyz + vs_TEXCOORD4.xyw;
    u_xlat4.xy = u_xlat1.xy / u_xlat1.ww;
    u_xlat49 = texture(_CameraDepthTexture, u_xlat4.xy).x;
    u_xlat49 = _ZBufferParams.z * u_xlat49 + _ZBufferParams.w;
    u_xlat49 = float(1.0) / u_xlat49;
    u_xlat49 = u_xlat49 + (-vs_TEXCOORD4.w);
    u_xlat4.x = 0.100000001 / _OpacityByDepth;
    u_xlat16_3.xz = u_xlat16_2.xy;
    u_xlat16_3.y = 1.0;
    u_xlat16_20.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
    u_xlat16_20.x = inversesqrt(u_xlat16_20.x);
    u_xlat16_20.xyz = u_xlat16_3.xyz * u_xlat16_20.xxx;
#ifdef UNITY_ADRENO_ES3
    u_xlatb5 = !!(0.0>=_ES_MoonDirection.y);
#else
    u_xlatb5 = 0.0>=_ES_MoonDirection.y;
#endif
    u_xlat5.xyz = (bool(u_xlatb5)) ? _ES_SunDirection.xyz : _ES_MoonDirection.xyz;
    u_xlat6.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat53 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat54 = inversesqrt(u_xlat53);
    u_xlat7.xyz = vec3(u_xlat54) * u_xlat6.xyz;
    u_xlat5.xyz = u_xlat6.xyz * vec3(u_xlat54) + u_xlat5.xyz;
    u_xlat6.x = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat5.xyz = u_xlat5.xyz * u_xlat6.xxx;
    u_xlat20.x = dot(u_xlat16_20.xyz, u_xlat5.xyz);
    u_xlat36.x = _Gloss * 128.0;
    u_xlat20.x = max(u_xlat20.x, 9.99999975e-05);
    u_xlat20.x = log2(u_xlat20.x);
    u_xlat20.x = u_xlat20.x * u_xlat36.x;
    u_xlat20.x = exp2(u_xlat20.x);
    u_xlat20.x = u_xlat20.x * _SpecularIntensity;
    u_xlat20.x = max(u_xlat20.x, 0.0);
    u_xlat20.x = min(u_xlat20.x, 16.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb36 = !!(_ES_MoonDirection.y>=9.99999975e-05);
#else
    u_xlatb36 = _ES_MoonDirection.y>=9.99999975e-05;
#endif
    u_xlat36.x = u_xlatb36 ? 1.0 : float(0.0);
    u_xlat52 = _ES_MoonDirection.y + -1.0;
    u_xlat36.x = u_xlat36.x * u_xlat52 + 1.0;
    u_xlat4.w = float(1.0) / _ShoreTransparency;
    u_xlat5.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat5.x = inversesqrt(u_xlat5.x);
    u_xlat5.xyz = u_xlat5.xxx * vs_TEXCOORD6.xyz;
    u_xlat5.x = dot(u_xlat7.xyz, u_xlat5.xyz);
    u_xlat5.x = (-u_xlat5.x) + 1.0;
    u_xlat5.x = max(u_xlat5.x, 9.99999975e-05);
    u_xlat5.x = log2(u_xlat5.x);
    u_xlat21 = u_xlat5.x * _SpecularPower;
    u_xlat21 = exp2(u_xlat21);
    u_xlat6.xyz = u_xlat36.xxx * _LightColor0.xyz;
    u_xlat6.xyz = u_xlat20.xxx * u_xlat6.xyz;
    u_xlat20.x = u_xlat49 + -1.0;
    u_xlat20.x = u_xlat4.w * u_xlat20.x;
    u_xlat20.x = u_xlat20.x * 0.100000001;
#ifdef UNITY_ADRENO_ES3
    u_xlat20.x = min(max(u_xlat20.x, 0.0), 1.0);
#else
    u_xlat20.x = clamp(u_xlat20.x, 0.0, 1.0);
#endif
    u_xlat6.xyz = u_xlat20.xxx * u_xlat6.xyz;
    u_xlat4.xy = vec2(u_xlat49) * u_xlat4.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.xy = min(max(u_xlat4.xy, 0.0), 1.0);
#else
    u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);
#endif
    u_xlat20.x = max(u_xlat4.y, 9.99999975e-05);
    u_xlat20.x = log2(u_xlat20.x);
    u_xlat20.x = u_xlat20.x * _ShoreFade;
    u_xlat20.x = exp2(u_xlat20.x);
    u_xlat8.xyz = _ShallowColor.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat8.xyz = u_xlat20.xxx * u_xlat8.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat1.xy = u_xlat1.xy / vs_TEXCOORD4.ww;
    u_xlat10_9.xyz = texture(_SceneScaledBufferBeforTransParent, u_xlat1.xy).xyz;
    u_xlat10.xyz = u_xlat8.xyz * u_xlat10_9.xyz;
    u_xlat1.x = 0.100000001 / _DeepColorDepth;
    u_xlat1.x = u_xlat1.x * u_xlat49;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.x = max(u_xlat1.x, 9.99999975e-05);
    u_xlat1.x = log2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _DeepColorFade;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat11.xyz = (-u_xlat8.xyz) * u_xlat10_9.xyz + _DeepColor.xyz;
    u_xlat11.xyz = u_xlat1.xxx * u_xlat11.xyz + u_xlat10.xyz;
    u_xlat12.xyz = u_xlat16_2.xyz * _DistortionIntensity.xyz;
    u_xlat13.x = vs_TEXCOORD8.x;
    u_xlat13.y = vs_TEXCOORD9.x;
    u_xlat13.z = vs_TEXCOORD6.x;
    u_xlat13.x = dot(u_xlat13.xyz, u_xlat12.xyz);
    u_xlat14.x = vs_TEXCOORD8.y;
    u_xlat14.y = vs_TEXCOORD9.y;
    u_xlat14.z = vs_TEXCOORD6.y;
    u_xlat13.y = dot(u_xlat14.xyz, u_xlat12.xyz);
    u_xlat14.x = vs_TEXCOORD8.z;
    u_xlat14.y = vs_TEXCOORD9.z;
    u_xlat14.z = vs_TEXCOORD6.z;
    u_xlat13.z = dot(u_xlat14.xyz, u_xlat12.xyz);
    u_xlat1.x = dot(u_xlat13.xyz, u_xlat13.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat12.xyz = u_xlat1.xxx * u_xlat13.xyz;
    u_xlat1.x = dot((-u_xlat7.xyz), u_xlat12.xyz);
    u_xlat1.x = u_xlat1.x + u_xlat1.x;
    u_xlat7.xyz = u_xlat12.xyz * (-u_xlat1.xxx) + (-u_xlat7.xyz);
    u_xlat10_0 = textureLod(_ReflectionSkyCubeMap, u_xlat7.xyz, 0.0);
    u_xlat16_2.x = u_xlat10_0.w + -1.0;
    u_xlat16_2.x = _ReflectionSkyCubeMap_HDR.w * u_xlat16_2.x + 1.0;
    u_xlat16_2.x = log2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * _ReflectionSkyCubeMap_HDR.y;
    u_xlat16_2.x = exp2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * _ReflectionSkyCubeMap_HDR.x;
    u_xlat1.x = u_xlat5.x * _FresnelPower;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _ReflectionIntensity;
    u_xlat17.x = float(1.0) / _ShoreReflectionFade;
    u_xlat17.x = u_xlat17.x * u_xlat49;
#ifdef UNITY_ADRENO_ES3
    u_xlat17.x = min(max(u_xlat17.x, 0.0), 1.0);
#else
    u_xlat17.x = clamp(u_xlat17.x, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat17.x * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat7.xyz = u_xlat16_2.xxx * u_xlat10_0.xyz + (-u_xlat11.xyz);
    u_xlat1.xyw = u_xlat1.xxx * u_xlat7.xyz + u_xlat11.xyz;
    u_xlat1.xyw = (-u_xlat8.xyz) * u_xlat10_9.xyz + u_xlat1.xyw;
    u_xlat1.xyw = u_xlat20.xxx * u_xlat1.xyw + u_xlat10.xyz;
    u_xlat20.x = (-vs_TEXCOORD5.y) * _WorldSpaceLightPos0.w + _WorldSpaceLightPos0.y;
    u_xlat16_2.x = max(u_xlat20.x, 0.0);
    u_xlat20.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowSplitSpheres[0].xyz);
    u_xlat7.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowSplitSpheres[1].xyz);
    u_xlat8.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowSplitSpheres[2].xyz);
    u_xlat9.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowSplitSpheres[3].xyz);
    u_xlat0.x = dot(u_xlat20.xyz, u_xlat20.xyz);
    u_xlat0.y = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat0.z = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat0.w = dot(u_xlat9.xyz, u_xlat9.xyz);
    u_xlatb0 = lessThan(u_xlat0, unity_ShadowSplitSqRadii);
    u_xlat0 = mix(vec4(0.0, 0.0, 0.0, 0.0), vec4(1.0, 1.0, 1.0, 1.0), vec4(u_xlatb0));
    u_xlat16_18.x = u_xlat0.y + u_xlat0.x;
    u_xlat16_18.y = u_xlat0.z + u_xlat16_18.x;
    u_xlat3.x = -0.0;
    u_xlat3.y = (-u_xlat0.x);
    u_xlat3.zw = (-u_xlat16_18.xy);
    u_xlat0 = u_xlat0 + u_xlat3;
    u_xlat0 = max(u_xlat0, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat16_18.x = dot(u_xlat0, vec4(1.0, 1.0, 1.0, 1.0));
#ifdef UNITY_ADRENO_ES3
    u_xlatb20 = !!(u_xlat16_18.x>=0.5);
#else
    u_xlatb20 = u_xlat16_18.x>=0.5;
#endif
    if(u_xlatb20){
        u_xlat20.x = dot(u_xlat0.yzw, vec3(1.0, 2.0, 3.0));
        u_xlat20.x = min(u_xlat20.x, 3.0);
        u_xlatu20 = uint(u_xlat20.x);
        u_xlat7.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowPos[int(u_xlatu20)].xyz);
        u_xlati20 = int(u_xlatu20) << 2;
        u_xlat8.xyz = u_xlat7.yyy * hlslcc_mtx4x4unity_WorldToShadow[(u_xlati20 + 1)].xyz;
        u_xlat7.xyw = hlslcc_mtx4x4unity_WorldToShadow[u_xlati20].xyz * u_xlat7.xxx + u_xlat8.xyz;
        u_xlat7.xyz = hlslcc_mtx4x4unity_WorldToShadow[(u_xlati20 + 2)].xyz * u_xlat7.zzz + u_xlat7.xyw;
        u_xlat20.xyz = u_xlat7.xyz + hlslcc_mtx4x4unity_WorldToShadow[(u_xlati20 + 3)].xyz;
        vec3 txVec0 = vec3(u_xlat20.xy,u_xlat20.z);
        u_xlat10_20 = textureLod(hlslcc_zcmp_CascadeShadowMapTexture, txVec0, 0.0);
        u_xlat16_36 = (-_LightShadowData.x) + 1.0;
        u_xlat20.x = u_xlat10_20 * u_xlat16_36 + _LightShadowData.x;
    } else {
        u_xlat20.x = 1.0;
    //ENDIF
    }
    u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;
    u_xlat20.xyz = u_xlat16_2.xyz * u_xlat20.xxx + vs_TEXCOORD1.xyz;
    u_xlat16_2.xyz = u_xlat20.xyz * vec3(0.300000012, 0.300000012, 0.300000012) + vec3(0.699999988, 0.699999988, 0.699999988);
    u_xlat20.x = sqrt(u_xlat53);
    u_xlat16_50 = u_xlat20.x + (-_DepthFoamCloseFadeOffset);
    u_xlat16_50 = u_xlat16_50 / _DepthFoamCloseFadeDistance;
    u_xlat16_15 = vs_COLOR0.x * _DepthFoamExtent;
    u_xlat33 = max(u_xlat33, 0.0);
    u_xlat33 = min(u_xlat16_15, u_xlat33);
    u_xlat16_15 = _DepthFoamExtent * vs_COLOR0.x + 9.99999975e-05;
    u_xlat33 = u_xlat33 / u_xlat16_15;
    u_xlat33 = (-u_xlat33) + 1.0;
    u_xlat36.xy = vec2(_Time.y * _DepthFoamMask_ST.z, _Time.y * _DepthFoamMask_ST.w);
    u_xlat36.xy = fract(u_xlat36.xy);
    u_xlat36.xy = _DepthFoamMask_ST.xy * vs_TEXCOORD5.xz + u_xlat36.xy;
    u_xlat10_36 = texture(_DepthFoamMask, u_xlat36.xy).x;
    u_xlat52 = vs_TEXCOORD5.z + vs_TEXCOORD5.x;
    u_xlat52 = u_xlat52 * _DepthFoamPhaseScale;
    u_xlat52 = _DepthFoamSpeed * _Time.y + u_xlat52;
    u_xlat5.x = (-u_xlat33) + 1.0;
    u_xlat16_15 = _DepthFoamSubdivision * u_xlat33 + u_xlat52;
    u_xlat16_15 = sin(u_xlat16_15);
    u_xlat16_15 = _DepthFoamWidth * u_xlat33 + u_xlat16_15;
    u_xlat16_52 = u_xlat10_36 * 2.0 + -1.0;
    u_xlat52 = u_xlat16_52 + u_xlat16_15;
#ifdef UNITY_ADRENO_ES3
    u_xlatb52 = !!(u_xlat52>=u_xlat5.x);
#else
    u_xlatb52 = u_xlat52>=u_xlat5.x;
#endif
    u_xlat52 = u_xlatb52 ? 1.0 : float(0.0);
    u_xlat36.x = u_xlat52 * u_xlat10_36;
    u_xlat16_15 = _DepthFoamDistance + 9.99999975e-05;
    u_xlat16_15 = u_xlat20.x / u_xlat16_15;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_15 = min(max(u_xlat16_15, 0.0), 1.0);
#else
    u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);
#endif
    u_xlat16_20.x = (-u_xlat16_15) + 1.0;
    u_xlat16_15 = vs_COLOR0.y * _DepthFoamColor.w;
    u_xlat16_50 = u_xlat16_50 * u_xlat16_15;
    u_xlat16_50 = u_xlat36.x * u_xlat16_50;
    u_xlat16_50 = u_xlat33 * u_xlat16_50;
    u_xlat16_50 = u_xlat16_20.x * u_xlat16_50;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_50 = min(max(u_xlat16_50, 0.0), 1.0);
#else
    u_xlat16_50 = clamp(u_xlat16_50, 0.0, 1.0);
#endif
    u_xlat16_2.xyz = _DepthFoamColor.xyz * u_xlat16_2.xyz + (-u_xlat1.xyw);
    u_xlat16_2.xyz = vec3(u_xlat16_50) * u_xlat16_2.xyz + u_xlat1.xyw;
    u_xlat1.xyz = u_xlat6.xyz * vec3(u_xlat21) + u_xlat16_2.xyz;
    u_xlat0.w = u_xlat4.x * vs_COLOR0.w;
    u_xlat4.xyz = vs_TEXCOORD5.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat5.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat5.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat5.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat49 = dot(u_xlat4.xyz, u_xlat5.xyz);
    u_xlat4.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat4.x = sqrt(u_xlat4.x);
    u_xlat20.y = u_xlat4.x * _HeigtFogParams.y;
    u_xlat52 = u_xlat4.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat52 = min(max(u_xlat52, 0.0), 1.0);
#else
    u_xlat52 = clamp(u_xlat52, 0.0, 1.0);
#endif
    u_xlat5.x = (-u_xlat52) + 2.0;
    u_xlat52 = u_xlat52 * u_xlat5.x;
    u_xlat5.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb49 = !!((-u_xlat49)>=u_xlat5.x);
#else
    u_xlatb49 = (-u_xlat49)>=u_xlat5.x;
#endif
    u_xlat5.x = u_xlat52 * _HeigtFogColDelta.w;
    u_xlat49 = (u_xlatb49) ? u_xlat5.x : u_xlat52;
    u_xlat49 = log2(u_xlat49);
    u_xlat49 = u_xlat49 * unity_FogColor.w;
    u_xlat49 = exp2(u_xlat49);
    u_xlat49 = min(u_xlat49, _HeigtFogColBase.w);
    u_xlat52 = vs_TEXCOORD5.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat52 = min(max(u_xlat52, 0.0), 1.0);
#else
    u_xlat52 = clamp(u_xlat52, 0.0, 1.0);
#endif
    u_xlat16_2.x = (-u_xlat52) + 2.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat52;
    u_xlat5.xyz = u_xlat16_2.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat52 = u_xlat4.x + (-_HeigtFogRamp.w);
    u_xlat52 = u_xlat52 * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat52 = min(max(u_xlat52, 0.0), 1.0);
#else
    u_xlat52 = clamp(u_xlat52, 0.0, 1.0);
#endif
    u_xlat6.xyz = (-u_xlat5.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat5.xyz = vec3(u_xlat52) * u_xlat6.xyz + u_xlat5.xyz;
    u_xlat52 = u_xlat4.y * _HeigtFogParams.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb53 = !!(0.00999999978<abs(u_xlat52));
#else
    u_xlatb53 = 0.00999999978<abs(u_xlat52);
#endif
    u_xlat6.x = u_xlat52 * -1.44269502;
    u_xlat6.x = exp2(u_xlat6.x);
    u_xlat6.x = (-u_xlat6.x) + 1.0;
    u_xlat52 = u_xlat6.x / u_xlat52;
    u_xlat16_2.x = (u_xlatb53) ? u_xlat52 : 1.0;
    u_xlat20.x = u_xlat4.y * _HeigtFogParams2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb52 = !!(0.00999999978<abs(u_xlat20.x));
#else
    u_xlatb52 = 0.00999999978<abs(u_xlat20.x);
#endif
    u_xlat53 = u_xlat20.x * -1.44269502;
    u_xlat53 = exp2(u_xlat53);
    u_xlat53 = (-u_xlat53) + 1.0;
    u_xlat20.x = u_xlat53 / u_xlat20.x;
    u_xlat16_2.y = (u_xlatb52) ? u_xlat20.x : 1.0;
    u_xlat20.x = u_xlat4.x * _HeigtFogParams2.y;
    u_xlat16_2.xy = u_xlat16_2.xy * u_xlat20.yx;
    u_xlat16_2.x = exp2((-u_xlat16_2.x));
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_18.x = exp2((-u_xlat16_2.y));
    u_xlat16_2.y = (-u_xlat16_18.x) + 1.0;
    u_xlat16_2.xy = max(u_xlat16_2.xy, vec2(0.0, 0.0));
    u_xlat16_2.x = u_xlat16_2.y + u_xlat16_2.x;
    u_xlat4.x = u_xlat4.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat16_18.x = (-u_xlat4.x) + 2.0;
    u_xlat16_18.x = u_xlat16_18.x * u_xlat4.x;
    u_xlat4.x = u_xlat16_18.x * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat4.x = u_xlat4.x + 1.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat4.x;
    u_xlat4.x = min(u_xlat16_2.x, _HeigtFogColBase.w);
    u_xlat20.x = vs_TEXCOORD5.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat20.x = min(max(u_xlat20.x, 0.0), 1.0);
#else
    u_xlat20.x = clamp(u_xlat20.x, 0.0, 1.0);
#endif
    u_xlat20.xyz = u_xlat20.xxx * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    u_xlat5.xyz = vec3(u_xlat49) * u_xlat5.xyz;
    u_xlat53 = (-u_xlat4.x) + 1.0;
    u_xlat5.xyz = vec3(u_xlat53) * u_xlat5.xyz;
    u_xlat4.xyz = u_xlat20.xyz * u_xlat4.xxx + u_xlat5.xyz;
    u_xlat49 = (-u_xlat49) + 1.0;
    u_xlat49 = u_xlat53 * u_xlat49;
    u_xlat0.xyz = vec3(u_xlat49) * u_xlat1.xyz + u_xlat4.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" "MHY_SHADER_LOW" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	mediump float _MHYZBias;
uniform 	vec4 hlslcc_mtx4x4_mhyJitteredVP[4];
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
out highp vec4 vs_TEXCOORD9;
out highp vec4 vs_TEXCOORD10;
float u_xlat0;
int u_xlati0;
vec4 u_xlat1;
bool u_xlatb1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
bool u_xlatb4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
mediump vec4 u_xlat16_6;
vec4 u_xlat7;
mediump vec3 u_xlat16_8;
vec3 u_xlat9;
float u_xlat10;
float u_xlat13;
bool u_xlatb13;
mediump float u_xlat16_14;
float u_xlat22;
float u_xlat28;
float u_xlat31;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat9.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4_mhyJitteredVP[1];
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[3] * u_xlat2.wwww + u_xlat1;
    u_xlat3.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    u_xlat3.xyw = u_xlat1.xyw;
    gl_Position = u_xlat3;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.xyw = u_xlat9.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat4.x = u_xlat1.y * _HeigtFogParams.x;
    u_xlat13 = u_xlat4.x * -1.44269502;
    u_xlat13 = exp2(u_xlat13);
    u_xlat13 = (-u_xlat13) + 1.0;
    u_xlat13 = u_xlat13 / u_xlat4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(0.00999999978<abs(u_xlat4.x));
#else
    u_xlatb4 = 0.00999999978<abs(u_xlat4.x);
#endif
    u_xlat16_5.x = (u_xlatb4) ? u_xlat13 : 1.0;
    u_xlat4.x = dot(u_xlat1.xyw, u_xlat1.xyw);
    u_xlat4.x = sqrt(u_xlat4.x);
    u_xlat13 = u_xlat4.x * _HeigtFogParams.y;
    u_xlat16_5.x = u_xlat13 * u_xlat16_5.x;
    u_xlat16_5.x = exp2((-u_xlat16_5.x));
    u_xlat16_5.x = (-u_xlat16_5.x) + 1.0;
    u_xlat13 = u_xlat1.y * _HeigtFogParams2.x;
    u_xlat22 = u_xlat13 * -1.44269502;
    u_xlat22 = exp2(u_xlat22);
    u_xlat22 = (-u_xlat22) + 1.0;
    u_xlat22 = u_xlat22 / u_xlat13;
#ifdef UNITY_ADRENO_ES3
    u_xlatb13 = !!(0.00999999978<abs(u_xlat13));
#else
    u_xlatb13 = 0.00999999978<abs(u_xlat13);
#endif
    u_xlat16_14 = (u_xlatb13) ? u_xlat22 : 1.0;
    u_xlat13 = u_xlat4.x * _HeigtFogParams2.y;
    u_xlat16_14 = u_xlat13 * u_xlat16_14;
    u_xlat16_14 = exp2((-u_xlat16_14));
    u_xlat16_5.y = (-u_xlat16_14) + 1.0;
    u_xlat16_5.xy = max(u_xlat16_5.xy, vec2(0.0, 0.0));
    u_xlat16_5.x = u_xlat16_5.y + u_xlat16_5.x;
    u_xlat13 = u_xlat4.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat13 = min(max(u_xlat13, 0.0), 1.0);
#else
    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
#endif
    u_xlat16_14 = (-u_xlat13) + 2.0;
    u_xlat16_14 = u_xlat13 * u_xlat16_14;
    u_xlat13 = u_xlat16_14 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat13 = u_xlat13 + 1.0;
    u_xlat16_5.x = u_xlat13 * u_xlat16_5.x;
    u_xlat13 = min(u_xlat16_5.x, _HeigtFogColBase.w);
    u_xlat22 = (-u_xlat13) + 1.0;
    u_xlat31 = _ProjectionParams.z * 0.999899983;
    u_xlat6.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat6.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat6.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat1.x = dot(u_xlat1.xyw, u_xlat6.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!((-u_xlat1.x)>=u_xlat31);
#else
    u_xlatb1 = (-u_xlat1.x)>=u_xlat31;
#endif
    u_xlat10 = u_xlat4.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat10 = min(max(u_xlat10, 0.0), 1.0);
#else
    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
#endif
    u_xlat28 = u_xlat4.x + (-_HeigtFogRamp.w);
    u_xlat28 = u_xlat28 * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat28 = min(max(u_xlat28, 0.0), 1.0);
#else
    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
#endif
    u_xlat4.x = (-u_xlat10) + 2.0;
    u_xlat10 = u_xlat10 * u_xlat4.x;
    u_xlat4.x = u_xlat10 * _HeigtFogColDelta.w;
    u_xlat1.x = (u_xlatb1) ? u_xlat4.x : u_xlat10;
    u_xlat1.x = log2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * unity_FogColor.w;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat1.x = min(u_xlat1.x, _HeigtFogColBase.w);
    u_xlat10 = u_xlat9.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat10 = min(max(u_xlat10, 0.0), 1.0);
#else
    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
#endif
    u_xlat16_5.x = (-u_xlat10) + 2.0;
    u_xlat16_5.x = u_xlat10 * u_xlat16_5.x;
    u_xlat6.xyz = u_xlat16_5.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat7.xyz = (-u_xlat6.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat6.xyz = vec3(u_xlat28) * u_xlat7.xyz + u_xlat6.xyz;
    u_xlat6.xyz = u_xlat1.xxx * u_xlat6.xyz;
    u_xlat1.x = (-u_xlat1.x) + 1.0;
    vs_TEXCOORD0.w = u_xlat22 * u_xlat1.x;
    u_xlat1.xyw = vec3(u_xlat22) * u_xlat6.xyz;
    u_xlat4.x = u_xlat9.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat4.xzw = u_xlat4.xxx * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    vs_TEXCOORD0.xyz = u_xlat4.xzw * vec3(u_xlat13) + u_xlat1.xyw;
    vs_TEXCOORD1.w = 1.0;
    u_xlat4.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat4.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat4.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat1.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
    u_xlat16_5.x = u_xlat4.y * u_xlat4.y;
    u_xlat16_5.x = u_xlat4.x * u_xlat4.x + (-u_xlat16_5.x);
    u_xlat16_6 = u_xlat4.yzzx * u_xlat4.xyzz;
    u_xlat16_8.x = dot(unity_SHBr, u_xlat16_6);
    u_xlat16_8.y = dot(unity_SHBg, u_xlat16_6);
    u_xlat16_8.z = dot(unity_SHBb, u_xlat16_6);
    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_8.xyz;
    u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat4.w = 1.0;
    u_xlat16_8.x = dot(unity_SHAr, u_xlat4);
    u_xlat16_8.y = dot(unity_SHAg, u_xlat4);
    u_xlat16_8.z = dot(unity_SHAb, u_xlat4);
    u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_8.xyz;
    vs_TEXCOORD1.xyz = u_xlat16_5.xyz;
    u_xlat1.x = u_xlat3.y * _ProjectionParams.x;
    u_xlat7.w = u_xlat1.x * 0.5;
    u_xlat7.xz = u_xlat3.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.z = u_xlat1.z;
    u_xlat3.xy = u_xlat7.zz + u_xlat7.xw;
    vs_TEXCOORD2 = u_xlat3;
    vs_TEXCOORD4.xyw = u_xlat3.xyw;
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD3.w = 0.0;
    u_xlat1.x = u_xlat2.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat2.x + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat2.z + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat2.w + u_xlat1.x;
    vs_TEXCOORD3.z = (-u_xlat1.x);
    vs_TEXCOORD5.w = 0.0;
    vs_TEXCOORD5.xyz = u_xlat9.xyz;
    u_xlat9.xyz = (-u_xlat9.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD6.w = 0.0;
    vs_TEXCOORD6.xyz = u_xlat4.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].www + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * in_POSITION0.yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.zzz + u_xlat1.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.www + u_xlat1.xyz;
    vs_TEXCOORD7.xyz = u_xlat1.xyz * vec3(-1.0, -1.0, 1.0);
    vs_TEXCOORD7.w = 0.0;
    u_xlat1.xyz = in_TANGENT0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat0 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0 = inversesqrt(u_xlat0);
    u_xlat1.xyz = vec3(u_xlat0) * u_xlat1.xyz;
    vs_TEXCOORD8.xyz = u_xlat1.xyz;
    vs_TEXCOORD8.w = 0.0;
    u_xlat2.xyz = u_xlat1.yzx * u_xlat4.zxy;
    u_xlat1.xyz = u_xlat4.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
    u_xlat0 = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD9.xyz = vec3(u_xlat0) * u_xlat1.xyz;
    vs_TEXCOORD9.w = 0.0;
    u_xlat0 = u_xlat9.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat9.x + u_xlat0;
    vs_TEXCOORD10.w = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat9.z + u_xlat0;
    vs_TEXCOORD10.xyz = u_xlat9.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowPos[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	mediump vec4 _DepthFoamMask_ST;
uniform 	mediump float _DepthFoamSpeed;
uniform 	mediump vec4 _DepthFoamColor;
uniform 	mediump float _DepthFoamExtent;
uniform 	mediump float _DepthFoamDistance;
uniform 	mediump float _DepthFoamSubdivision;
uniform 	mediump float _DepthFoamWidth;
uniform 	mediump float _DepthFoamPhaseScale;
uniform 	mediump float _DepthFoamCloseFadeOffset;
uniform 	mediump float _DepthFoamCloseFadeDistance;
uniform 	float _NormalMapScale;
uniform 	float _Normal01_U_Speed;
uniform 	float _Normal01_VSpeed;
uniform 	float _NormalMapBias;
uniform 	float _Normal02_U_Speed;
uniform 	float _Normal02_V_Speed;
uniform 	float _RefractionIntensity;
uniform 	float _OpacityByDepth;
uniform 	float _SpecularIntensity;
uniform 	vec3 _ES_MoonDirection;
uniform 	vec3 _ES_SunDirection;
uniform 	float _Gloss;
uniform 	float _ShoreTransparency;
uniform 	float _SpecularPower;
uniform 	vec4 _ShallowColor;
uniform 	float _ShoreFade;
uniform 	vec4 _DeepColor;
uniform 	float _DeepColorDepth;
uniform 	float _DeepColorFade;
uniform 	vec4 _DistortionIntensity;
uniform 	float _ReflectionIntensity;
uniform 	float _FresnelPower;
uniform 	float _ShoreReflectionFade;
uniform 	mediump float _ProjectUVScale;
uniform 	vec4 _ReflectionSkyCubeMap_HDR;
uniform lowp sampler2D _Normal01;
uniform lowp sampler2D _Normal02;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _SceneScaledBufferBeforTransParent;
uniform lowp samplerCube _ReflectionSkyCubeMap;
uniform lowp sampler2D _DepthFoamMask;
uniform lowp sampler2DShadow hlslcc_zcmp_CascadeShadowMapTexture;
uniform lowp sampler2D _CascadeShadowMapTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD8;
in highp vec4 vs_TEXCOORD9;
in highp vec4 vs_TEXCOORD10;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec4 u_xlatb0;
vec4 u_xlat1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec4 u_xlat4;
vec3 u_xlat5;
bool u_xlatb5;
vec3 u_xlat6;
vec4 u_xlat7;
vec3 u_xlat8;
vec3 u_xlat9;
lowp vec3 u_xlat10_9;
vec3 u_xlat10;
vec3 u_xlat11;
vec3 u_xlat12;
vec3 u_xlat13;
vec3 u_xlat14;
mediump float u_xlat16_15;
vec2 u_xlat17;
mediump vec2 u_xlat16_18;
vec3 u_xlat20;
mediump vec3 u_xlat16_20;
lowp float u_xlat10_20;
int u_xlati20;
uint u_xlatu20;
bool u_xlatb20;
float u_xlat21;
float u_xlat33;
vec2 u_xlat36;
mediump float u_xlat16_36;
lowp float u_xlat10_36;
bool u_xlatb36;
float u_xlat49;
bool u_xlatb49;
mediump float u_xlat16_50;
float u_xlat52;
mediump float u_xlat16_52;
bool u_xlatb52;
float u_xlat53;
bool u_xlatb53;
float u_xlat54;
void main()
{
    u_xlat0.xy = vs_TEXCOORD5.zx * vec2(vec2(_ProjectUVScale, _ProjectUVScale));
    u_xlat1.x = _Time.y * _Normal01_U_Speed + u_xlat0.y;
    u_xlat1.yz = _Time.yy * vec2(_Normal01_VSpeed, _Normal02_U_Speed) + u_xlat0.xy;
    u_xlat1.w = _Time.y * _Normal02_V_Speed + u_xlat0.x;
    u_xlat10_0.xyz = texture(_Normal01, u_xlat1.xy, _NormalMapBias).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_2.xy = u_xlat16_0.xy * vec2(_NormalMapScale);
    u_xlat10_1.xyz = texture(_Normal02, u_xlat1.zw, _NormalMapBias).xyz;
    u_xlat16_0.w = -1.0;
    u_xlat16_3.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.wwz;
    u_xlat16_3.xy = u_xlat16_3.xy * vec2(_NormalMapScale);
    u_xlat16_2.z = -1.0;
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
    u_xlat1.x = float(1.0) / vs_TEXCOORD4.w;
    u_xlat17.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat17.x = texture(_CameraDepthTexture, u_xlat17.xy).x;
    u_xlat17.x = _ZBufferParams.z * u_xlat17.x + _ZBufferParams.w;
    u_xlat17.x = float(1.0) / u_xlat17.x;
    u_xlat33 = vs_TEXCOORD10.w + 9.99999975e-05;
    u_xlat33 = (-u_xlat17.x) / u_xlat33;
    u_xlat33 = vs_TEXCOORD10.y * u_xlat33 + _WorldSpaceCameraPos.y;
    u_xlat33 = (-u_xlat33) + vs_TEXCOORD5.y;
    u_xlat4.xy = u_xlat16_2.xy * vec2(vec2(_RefractionIntensity, _RefractionIntensity));
    u_xlat1.x = u_xlat1.x * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.xw = u_xlat1.xx * u_xlat4.xy;
    u_xlat1.xw = u_xlat1.xw * vs_TEXCOORD4.ww;
    u_xlat17.x = u_xlat17.x + (-vs_TEXCOORD4.w);
#ifdef UNITY_ADRENO_ES3
    u_xlat17.x = min(max(u_xlat17.x, 0.0), 1.0);
#else
    u_xlat17.x = clamp(u_xlat17.x, 0.0, 1.0);
#endif
    u_xlat4.xy = u_xlat17.xx * u_xlat1.xw;
    u_xlat4.z = 0.0;
    u_xlat1.xyw = u_xlat4.xyz + vs_TEXCOORD4.xyw;
    u_xlat1.xy = u_xlat1.xy / u_xlat1.ww;
    u_xlat1.x = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat1.x = _ZBufferParams.z * u_xlat1.x + _ZBufferParams.w;
    u_xlat1.x = float(1.0) / u_xlat1.x;
    u_xlat1.x = u_xlat1.x + (-vs_TEXCOORD4.w);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.xyw = u_xlat1.xxx * u_xlat4.xyz + vs_TEXCOORD4.xyw;
    u_xlat4.xy = u_xlat1.xy / u_xlat1.ww;
    u_xlat49 = texture(_CameraDepthTexture, u_xlat4.xy).x;
    u_xlat49 = _ZBufferParams.z * u_xlat49 + _ZBufferParams.w;
    u_xlat49 = float(1.0) / u_xlat49;
    u_xlat49 = u_xlat49 + (-vs_TEXCOORD4.w);
    u_xlat4.x = 0.100000001 / _OpacityByDepth;
    u_xlat16_3.xz = u_xlat16_2.xy;
    u_xlat16_3.y = 1.0;
    u_xlat16_20.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
    u_xlat16_20.x = inversesqrt(u_xlat16_20.x);
    u_xlat16_20.xyz = u_xlat16_3.xyz * u_xlat16_20.xxx;
#ifdef UNITY_ADRENO_ES3
    u_xlatb5 = !!(0.0>=_ES_MoonDirection.y);
#else
    u_xlatb5 = 0.0>=_ES_MoonDirection.y;
#endif
    u_xlat5.xyz = (bool(u_xlatb5)) ? _ES_SunDirection.xyz : _ES_MoonDirection.xyz;
    u_xlat6.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat53 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat54 = inversesqrt(u_xlat53);
    u_xlat7.xyz = vec3(u_xlat54) * u_xlat6.xyz;
    u_xlat5.xyz = u_xlat6.xyz * vec3(u_xlat54) + u_xlat5.xyz;
    u_xlat6.x = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat5.xyz = u_xlat5.xyz * u_xlat6.xxx;
    u_xlat20.x = dot(u_xlat16_20.xyz, u_xlat5.xyz);
    u_xlat36.x = _Gloss * 128.0;
    u_xlat20.x = max(u_xlat20.x, 9.99999975e-05);
    u_xlat20.x = log2(u_xlat20.x);
    u_xlat20.x = u_xlat20.x * u_xlat36.x;
    u_xlat20.x = exp2(u_xlat20.x);
    u_xlat20.x = u_xlat20.x * _SpecularIntensity;
    u_xlat20.x = max(u_xlat20.x, 0.0);
    u_xlat20.x = min(u_xlat20.x, 16.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb36 = !!(_ES_MoonDirection.y>=9.99999975e-05);
#else
    u_xlatb36 = _ES_MoonDirection.y>=9.99999975e-05;
#endif
    u_xlat36.x = u_xlatb36 ? 1.0 : float(0.0);
    u_xlat52 = _ES_MoonDirection.y + -1.0;
    u_xlat36.x = u_xlat36.x * u_xlat52 + 1.0;
    u_xlat4.w = float(1.0) / _ShoreTransparency;
    u_xlat5.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat5.x = inversesqrt(u_xlat5.x);
    u_xlat5.xyz = u_xlat5.xxx * vs_TEXCOORD6.xyz;
    u_xlat5.x = dot(u_xlat7.xyz, u_xlat5.xyz);
    u_xlat5.x = (-u_xlat5.x) + 1.0;
    u_xlat5.x = max(u_xlat5.x, 9.99999975e-05);
    u_xlat5.x = log2(u_xlat5.x);
    u_xlat21 = u_xlat5.x * _SpecularPower;
    u_xlat21 = exp2(u_xlat21);
    u_xlat6.xyz = u_xlat36.xxx * _LightColor0.xyz;
    u_xlat6.xyz = u_xlat20.xxx * u_xlat6.xyz;
    u_xlat20.x = u_xlat49 + -1.0;
    u_xlat20.x = u_xlat4.w * u_xlat20.x;
    u_xlat20.x = u_xlat20.x * 0.100000001;
#ifdef UNITY_ADRENO_ES3
    u_xlat20.x = min(max(u_xlat20.x, 0.0), 1.0);
#else
    u_xlat20.x = clamp(u_xlat20.x, 0.0, 1.0);
#endif
    u_xlat6.xyz = u_xlat20.xxx * u_xlat6.xyz;
    u_xlat4.xy = vec2(u_xlat49) * u_xlat4.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.xy = min(max(u_xlat4.xy, 0.0), 1.0);
#else
    u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);
#endif
    u_xlat20.x = max(u_xlat4.y, 9.99999975e-05);
    u_xlat20.x = log2(u_xlat20.x);
    u_xlat20.x = u_xlat20.x * _ShoreFade;
    u_xlat20.x = exp2(u_xlat20.x);
    u_xlat8.xyz = _ShallowColor.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat8.xyz = u_xlat20.xxx * u_xlat8.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat1.xy = u_xlat1.xy / vs_TEXCOORD4.ww;
    u_xlat10_9.xyz = texture(_SceneScaledBufferBeforTransParent, u_xlat1.xy).xyz;
    u_xlat10.xyz = u_xlat8.xyz * u_xlat10_9.xyz;
    u_xlat1.x = 0.100000001 / _DeepColorDepth;
    u_xlat1.x = u_xlat1.x * u_xlat49;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.x = max(u_xlat1.x, 9.99999975e-05);
    u_xlat1.x = log2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _DeepColorFade;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat11.xyz = (-u_xlat8.xyz) * u_xlat10_9.xyz + _DeepColor.xyz;
    u_xlat11.xyz = u_xlat1.xxx * u_xlat11.xyz + u_xlat10.xyz;
    u_xlat12.xyz = u_xlat16_2.xyz * _DistortionIntensity.xyz;
    u_xlat13.x = vs_TEXCOORD8.x;
    u_xlat13.y = vs_TEXCOORD9.x;
    u_xlat13.z = vs_TEXCOORD6.x;
    u_xlat13.x = dot(u_xlat13.xyz, u_xlat12.xyz);
    u_xlat14.x = vs_TEXCOORD8.y;
    u_xlat14.y = vs_TEXCOORD9.y;
    u_xlat14.z = vs_TEXCOORD6.y;
    u_xlat13.y = dot(u_xlat14.xyz, u_xlat12.xyz);
    u_xlat14.x = vs_TEXCOORD8.z;
    u_xlat14.y = vs_TEXCOORD9.z;
    u_xlat14.z = vs_TEXCOORD6.z;
    u_xlat13.z = dot(u_xlat14.xyz, u_xlat12.xyz);
    u_xlat1.x = dot(u_xlat13.xyz, u_xlat13.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat12.xyz = u_xlat1.xxx * u_xlat13.xyz;
    u_xlat1.x = dot((-u_xlat7.xyz), u_xlat12.xyz);
    u_xlat1.x = u_xlat1.x + u_xlat1.x;
    u_xlat7.xyz = u_xlat12.xyz * (-u_xlat1.xxx) + (-u_xlat7.xyz);
    u_xlat10_0 = textureLod(_ReflectionSkyCubeMap, u_xlat7.xyz, 0.0);
    u_xlat16_2.x = u_xlat10_0.w + -1.0;
    u_xlat16_2.x = _ReflectionSkyCubeMap_HDR.w * u_xlat16_2.x + 1.0;
    u_xlat16_2.x = log2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * _ReflectionSkyCubeMap_HDR.y;
    u_xlat16_2.x = exp2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * _ReflectionSkyCubeMap_HDR.x;
    u_xlat1.x = u_xlat5.x * _FresnelPower;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _ReflectionIntensity;
    u_xlat17.x = float(1.0) / _ShoreReflectionFade;
    u_xlat17.x = u_xlat17.x * u_xlat49;
#ifdef UNITY_ADRENO_ES3
    u_xlat17.x = min(max(u_xlat17.x, 0.0), 1.0);
#else
    u_xlat17.x = clamp(u_xlat17.x, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat17.x * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat7.xyz = u_xlat16_2.xxx * u_xlat10_0.xyz + (-u_xlat11.xyz);
    u_xlat1.xyw = u_xlat1.xxx * u_xlat7.xyz + u_xlat11.xyz;
    u_xlat1.xyw = (-u_xlat8.xyz) * u_xlat10_9.xyz + u_xlat1.xyw;
    u_xlat1.xyw = u_xlat20.xxx * u_xlat1.xyw + u_xlat10.xyz;
    u_xlat20.x = (-vs_TEXCOORD5.y) * _WorldSpaceLightPos0.w + _WorldSpaceLightPos0.y;
    u_xlat16_2.x = max(u_xlat20.x, 0.0);
    u_xlat20.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowSplitSpheres[0].xyz);
    u_xlat7.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowSplitSpheres[1].xyz);
    u_xlat8.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowSplitSpheres[2].xyz);
    u_xlat9.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowSplitSpheres[3].xyz);
    u_xlat0.x = dot(u_xlat20.xyz, u_xlat20.xyz);
    u_xlat0.y = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat0.z = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat0.w = dot(u_xlat9.xyz, u_xlat9.xyz);
    u_xlatb0 = lessThan(u_xlat0, unity_ShadowSplitSqRadii);
    u_xlat0 = mix(vec4(0.0, 0.0, 0.0, 0.0), vec4(1.0, 1.0, 1.0, 1.0), vec4(u_xlatb0));
    u_xlat16_18.x = u_xlat0.y + u_xlat0.x;
    u_xlat16_18.y = u_xlat0.z + u_xlat16_18.x;
    u_xlat3.x = -0.0;
    u_xlat3.y = (-u_xlat0.x);
    u_xlat3.zw = (-u_xlat16_18.xy);
    u_xlat0 = u_xlat0 + u_xlat3;
    u_xlat0 = max(u_xlat0, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat16_18.x = dot(u_xlat0, vec4(1.0, 1.0, 1.0, 1.0));
#ifdef UNITY_ADRENO_ES3
    u_xlatb20 = !!(u_xlat16_18.x>=0.5);
#else
    u_xlatb20 = u_xlat16_18.x>=0.5;
#endif
    if(u_xlatb20){
        u_xlat20.x = dot(u_xlat0.yzw, vec3(1.0, 2.0, 3.0));
        u_xlat20.x = min(u_xlat20.x, 3.0);
        u_xlatu20 = uint(u_xlat20.x);
        u_xlat7.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowPos[int(u_xlatu20)].xyz);
        u_xlati20 = int(u_xlatu20) << 2;
        u_xlat8.xyz = u_xlat7.yyy * hlslcc_mtx4x4unity_WorldToShadow[(u_xlati20 + 1)].xyz;
        u_xlat7.xyw = hlslcc_mtx4x4unity_WorldToShadow[u_xlati20].xyz * u_xlat7.xxx + u_xlat8.xyz;
        u_xlat7.xyz = hlslcc_mtx4x4unity_WorldToShadow[(u_xlati20 + 2)].xyz * u_xlat7.zzz + u_xlat7.xyw;
        u_xlat20.xyz = u_xlat7.xyz + hlslcc_mtx4x4unity_WorldToShadow[(u_xlati20 + 3)].xyz;
        vec3 txVec0 = vec3(u_xlat20.xy,u_xlat20.z);
        u_xlat10_20 = textureLod(hlslcc_zcmp_CascadeShadowMapTexture, txVec0, 0.0);
        u_xlat16_36 = (-_LightShadowData.x) + 1.0;
        u_xlat20.x = u_xlat10_20 * u_xlat16_36 + _LightShadowData.x;
    } else {
        u_xlat20.x = 1.0;
    //ENDIF
    }
    u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;
    u_xlat20.xyz = u_xlat16_2.xyz * u_xlat20.xxx + vs_TEXCOORD1.xyz;
    u_xlat16_2.xyz = u_xlat20.xyz * vec3(0.300000012, 0.300000012, 0.300000012) + vec3(0.699999988, 0.699999988, 0.699999988);
    u_xlat20.x = sqrt(u_xlat53);
    u_xlat16_50 = u_xlat20.x + (-_DepthFoamCloseFadeOffset);
    u_xlat16_50 = u_xlat16_50 / _DepthFoamCloseFadeDistance;
    u_xlat16_15 = vs_COLOR0.x * _DepthFoamExtent;
    u_xlat33 = max(u_xlat33, 0.0);
    u_xlat33 = min(u_xlat16_15, u_xlat33);
    u_xlat16_15 = _DepthFoamExtent * vs_COLOR0.x + 9.99999975e-05;
    u_xlat33 = u_xlat33 / u_xlat16_15;
    u_xlat33 = (-u_xlat33) + 1.0;
    u_xlat36.xy = vec2(_Time.y * _DepthFoamMask_ST.z, _Time.y * _DepthFoamMask_ST.w);
    u_xlat36.xy = fract(u_xlat36.xy);
    u_xlat36.xy = _DepthFoamMask_ST.xy * vs_TEXCOORD5.xz + u_xlat36.xy;
    u_xlat10_36 = texture(_DepthFoamMask, u_xlat36.xy).x;
    u_xlat52 = vs_TEXCOORD5.z + vs_TEXCOORD5.x;
    u_xlat52 = u_xlat52 * _DepthFoamPhaseScale;
    u_xlat52 = _DepthFoamSpeed * _Time.y + u_xlat52;
    u_xlat5.x = (-u_xlat33) + 1.0;
    u_xlat16_15 = _DepthFoamSubdivision * u_xlat33 + u_xlat52;
    u_xlat16_15 = sin(u_xlat16_15);
    u_xlat16_15 = _DepthFoamWidth * u_xlat33 + u_xlat16_15;
    u_xlat16_52 = u_xlat10_36 * 2.0 + -1.0;
    u_xlat52 = u_xlat16_52 + u_xlat16_15;
#ifdef UNITY_ADRENO_ES3
    u_xlatb52 = !!(u_xlat52>=u_xlat5.x);
#else
    u_xlatb52 = u_xlat52>=u_xlat5.x;
#endif
    u_xlat52 = u_xlatb52 ? 1.0 : float(0.0);
    u_xlat36.x = u_xlat52 * u_xlat10_36;
    u_xlat16_15 = _DepthFoamDistance + 9.99999975e-05;
    u_xlat16_15 = u_xlat20.x / u_xlat16_15;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_15 = min(max(u_xlat16_15, 0.0), 1.0);
#else
    u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);
#endif
    u_xlat16_20.x = (-u_xlat16_15) + 1.0;
    u_xlat16_15 = vs_COLOR0.y * _DepthFoamColor.w;
    u_xlat16_50 = u_xlat16_50 * u_xlat16_15;
    u_xlat16_50 = u_xlat36.x * u_xlat16_50;
    u_xlat16_50 = u_xlat33 * u_xlat16_50;
    u_xlat16_50 = u_xlat16_20.x * u_xlat16_50;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_50 = min(max(u_xlat16_50, 0.0), 1.0);
#else
    u_xlat16_50 = clamp(u_xlat16_50, 0.0, 1.0);
#endif
    u_xlat16_2.xyz = _DepthFoamColor.xyz * u_xlat16_2.xyz + (-u_xlat1.xyw);
    u_xlat16_2.xyz = vec3(u_xlat16_50) * u_xlat16_2.xyz + u_xlat1.xyw;
    u_xlat1.xyz = u_xlat6.xyz * vec3(u_xlat21) + u_xlat16_2.xyz;
    u_xlat0.w = u_xlat4.x * vs_COLOR0.w;
    u_xlat4.xyz = vs_TEXCOORD5.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat5.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat5.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat5.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat49 = dot(u_xlat4.xyz, u_xlat5.xyz);
    u_xlat4.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat4.x = sqrt(u_xlat4.x);
    u_xlat20.y = u_xlat4.x * _HeigtFogParams.y;
    u_xlat52 = u_xlat4.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat52 = min(max(u_xlat52, 0.0), 1.0);
#else
    u_xlat52 = clamp(u_xlat52, 0.0, 1.0);
#endif
    u_xlat5.x = (-u_xlat52) + 2.0;
    u_xlat52 = u_xlat52 * u_xlat5.x;
    u_xlat5.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb49 = !!((-u_xlat49)>=u_xlat5.x);
#else
    u_xlatb49 = (-u_xlat49)>=u_xlat5.x;
#endif
    u_xlat5.x = u_xlat52 * _HeigtFogColDelta.w;
    u_xlat49 = (u_xlatb49) ? u_xlat5.x : u_xlat52;
    u_xlat49 = log2(u_xlat49);
    u_xlat49 = u_xlat49 * unity_FogColor.w;
    u_xlat49 = exp2(u_xlat49);
    u_xlat49 = min(u_xlat49, _HeigtFogColBase.w);
    u_xlat52 = vs_TEXCOORD5.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat52 = min(max(u_xlat52, 0.0), 1.0);
#else
    u_xlat52 = clamp(u_xlat52, 0.0, 1.0);
#endif
    u_xlat16_2.x = (-u_xlat52) + 2.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat52;
    u_xlat5.xyz = u_xlat16_2.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat52 = u_xlat4.x + (-_HeigtFogRamp.w);
    u_xlat52 = u_xlat52 * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat52 = min(max(u_xlat52, 0.0), 1.0);
#else
    u_xlat52 = clamp(u_xlat52, 0.0, 1.0);
#endif
    u_xlat6.xyz = (-u_xlat5.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat5.xyz = vec3(u_xlat52) * u_xlat6.xyz + u_xlat5.xyz;
    u_xlat52 = u_xlat4.y * _HeigtFogParams.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb53 = !!(0.00999999978<abs(u_xlat52));
#else
    u_xlatb53 = 0.00999999978<abs(u_xlat52);
#endif
    u_xlat6.x = u_xlat52 * -1.44269502;
    u_xlat6.x = exp2(u_xlat6.x);
    u_xlat6.x = (-u_xlat6.x) + 1.0;
    u_xlat52 = u_xlat6.x / u_xlat52;
    u_xlat16_2.x = (u_xlatb53) ? u_xlat52 : 1.0;
    u_xlat20.x = u_xlat4.y * _HeigtFogParams2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb52 = !!(0.00999999978<abs(u_xlat20.x));
#else
    u_xlatb52 = 0.00999999978<abs(u_xlat20.x);
#endif
    u_xlat53 = u_xlat20.x * -1.44269502;
    u_xlat53 = exp2(u_xlat53);
    u_xlat53 = (-u_xlat53) + 1.0;
    u_xlat20.x = u_xlat53 / u_xlat20.x;
    u_xlat16_2.y = (u_xlatb52) ? u_xlat20.x : 1.0;
    u_xlat20.x = u_xlat4.x * _HeigtFogParams2.y;
    u_xlat16_2.xy = u_xlat16_2.xy * u_xlat20.yx;
    u_xlat16_2.x = exp2((-u_xlat16_2.x));
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_18.x = exp2((-u_xlat16_2.y));
    u_xlat16_2.y = (-u_xlat16_18.x) + 1.0;
    u_xlat16_2.xy = max(u_xlat16_2.xy, vec2(0.0, 0.0));
    u_xlat16_2.x = u_xlat16_2.y + u_xlat16_2.x;
    u_xlat4.x = u_xlat4.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat16_18.x = (-u_xlat4.x) + 2.0;
    u_xlat16_18.x = u_xlat16_18.x * u_xlat4.x;
    u_xlat4.x = u_xlat16_18.x * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat4.x = u_xlat4.x + 1.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat4.x;
    u_xlat4.x = min(u_xlat16_2.x, _HeigtFogColBase.w);
    u_xlat20.x = vs_TEXCOORD5.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat20.x = min(max(u_xlat20.x, 0.0), 1.0);
#else
    u_xlat20.x = clamp(u_xlat20.x, 0.0, 1.0);
#endif
    u_xlat20.xyz = u_xlat20.xxx * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    u_xlat5.xyz = vec3(u_xlat49) * u_xlat5.xyz;
    u_xlat53 = (-u_xlat4.x) + 1.0;
    u_xlat5.xyz = vec3(u_xlat53) * u_xlat5.xyz;
    u_xlat4.xyz = u_xlat20.xyz * u_xlat4.xxx + u_xlat5.xyz;
    u_xlat49 = (-u_xlat49) + 1.0;
    u_xlat49 = u_xlat53 * u_xlat49;
    u_xlat0.xyz = vec3(u_xlat49) * u_xlat1.xyz + u_xlat4.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "MHY_SHADER_HIGH" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	mediump float _MHYZBias;
uniform 	vec4 hlslcc_mtx4x4_mhyJitteredVP[4];
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
out highp vec4 vs_TEXCOORD9;
out highp vec4 vs_TEXCOORD10;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
vec4 u_xlat4;
bool u_xlatb4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
mediump vec4 u_xlat16_6;
vec4 u_xlat7;
mediump vec3 u_xlat16_8;
float u_xlat11;
vec3 u_xlat13;
mediump float u_xlat16_14;
float u_xlat27;
bool u_xlatb27;
float u_xlat29;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4_mhyJitteredVP[1];
    u_xlat2 = hlslcc_mtx4x4_mhyJitteredVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4_mhyJitteredVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4_mhyJitteredVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat3.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    u_xlat3.xyw = u_xlat2.xyw;
    gl_Position = u_xlat3;
    vs_COLOR0 = in_COLOR0;
    u_xlat2.xyw = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat27 = u_xlat2.y * _HeigtFogParams.x;
    u_xlat4.x = u_xlat27 * -1.44269502;
    u_xlat4.x = exp2(u_xlat4.x);
    u_xlat4.x = (-u_xlat4.x) + 1.0;
    u_xlat4.x = u_xlat4.x / u_xlat27;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(0.00999999978<abs(u_xlat27));
#else
    u_xlatb27 = 0.00999999978<abs(u_xlat27);
#endif
    u_xlat16_5.x = (u_xlatb27) ? u_xlat4.x : 1.0;
    u_xlat27 = dot(u_xlat2.xyw, u_xlat2.xyw);
    u_xlat27 = sqrt(u_xlat27);
    u_xlat4.x = u_xlat27 * _HeigtFogParams.y;
    u_xlat16_5.x = u_xlat4.x * u_xlat16_5.x;
    u_xlat16_5.x = exp2((-u_xlat16_5.x));
    u_xlat16_5.x = (-u_xlat16_5.x) + 1.0;
    u_xlat4.x = u_xlat2.y * _HeigtFogParams2.x;
    u_xlat13.x = u_xlat4.x * -1.44269502;
    u_xlat13.x = exp2(u_xlat13.x);
    u_xlat13.x = (-u_xlat13.x) + 1.0;
    u_xlat13.x = u_xlat13.x / u_xlat4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(0.00999999978<abs(u_xlat4.x));
#else
    u_xlatb4 = 0.00999999978<abs(u_xlat4.x);
#endif
    u_xlat16_14 = (u_xlatb4) ? u_xlat13.x : 1.0;
    u_xlat4.x = u_xlat27 * _HeigtFogParams2.y;
    u_xlat16_14 = u_xlat4.x * u_xlat16_14;
    u_xlat16_14 = exp2((-u_xlat16_14));
    u_xlat16_5.y = (-u_xlat16_14) + 1.0;
    u_xlat16_5.xy = max(u_xlat16_5.xy, vec2(0.0, 0.0));
    u_xlat16_5.x = u_xlat16_5.y + u_xlat16_5.x;
    u_xlat4.x = u_xlat27 * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat16_14 = (-u_xlat4.x) + 2.0;
    u_xlat16_14 = u_xlat4.x * u_xlat16_14;
    u_xlat4.x = u_xlat16_14 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat4.x = u_xlat4.x + 1.0;
    u_xlat16_5.x = u_xlat4.x * u_xlat16_5.x;
    u_xlat4.x = min(u_xlat16_5.x, _HeigtFogColBase.w);
    u_xlat13.x = (-u_xlat4.x) + 1.0;
    u_xlat6.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat6.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat6.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat2.x = dot(u_xlat2.xyw, u_xlat6.xyz);
    u_xlat11 = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!((-u_xlat2.x)>=u_xlat11);
#else
    u_xlatb2 = (-u_xlat2.x)>=u_xlat11;
#endif
    u_xlat11 = u_xlat27 * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat11 = min(max(u_xlat11, 0.0), 1.0);
#else
    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
#endif
    u_xlat27 = u_xlat27 + (-_HeigtFogRamp.w);
    u_xlat27 = u_xlat27 * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
    u_xlat29 = (-u_xlat11) + 2.0;
    u_xlat11 = u_xlat29 * u_xlat11;
    u_xlat29 = u_xlat11 * _HeigtFogColDelta.w;
    u_xlat2.x = (u_xlatb2) ? u_xlat29 : u_xlat11;
    u_xlat2.x = log2(u_xlat2.x);
    u_xlat2.x = u_xlat2.x * unity_FogColor.w;
    u_xlat2.x = exp2(u_xlat2.x);
    u_xlat2.x = min(u_xlat2.x, _HeigtFogColBase.w);
    u_xlat11 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat11 = min(max(u_xlat11, 0.0), 1.0);
#else
    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
#endif
    u_xlat16_5.x = (-u_xlat11) + 2.0;
    u_xlat16_5.x = u_xlat11 * u_xlat16_5.x;
    u_xlat6.xyz = u_xlat16_5.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat7.xyz = (-u_xlat6.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat6.xyz = vec3(u_xlat27) * u_xlat7.xyz + u_xlat6.xyz;
    u_xlat6.xyz = u_xlat2.xxx * u_xlat6.xyz;
    u_xlat27 = (-u_xlat2.x) + 1.0;
    vs_TEXCOORD0.w = u_xlat13.x * u_xlat27;
    u_xlat2.xyw = u_xlat13.xxx * u_xlat6.xyz;
    u_xlat27 = u_xlat0.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
    u_xlat13.xyz = vec3(u_xlat27) * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    vs_TEXCOORD0.xyz = u_xlat13.xyz * u_xlat4.xxx + u_xlat2.xyw;
    u_xlat4.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat4.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat4.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat27 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat4.xyz = vec3(u_xlat27) * u_xlat4.xyz;
    u_xlat16_5.x = u_xlat4.y * u_xlat4.y;
    u_xlat16_5.x = u_xlat4.x * u_xlat4.x + (-u_xlat16_5.x);
    u_xlat16_6 = u_xlat4.yzzx * u_xlat4.xyzz;
    u_xlat16_8.x = dot(unity_SHBr, u_xlat16_6);
    u_xlat16_8.y = dot(unity_SHBg, u_xlat16_6);
    u_xlat16_8.z = dot(unity_SHBb, u_xlat16_6);
    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_8.xyz;
    u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat4.w = 1.0;
    u_xlat16_8.x = dot(unity_SHAr, u_xlat4);
    u_xlat16_8.y = dot(unity_SHAg, u_xlat4);
    u_xlat16_8.z = dot(unity_SHAb, u_xlat4);
    u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_8.xyz;
    vs_TEXCOORD1.xyz = u_xlat16_5.xyz;
    vs_TEXCOORD1.w = 1.0;
    u_xlat27 = u_xlat3.y * _ProjectionParams.x;
    u_xlat7.w = u_xlat27 * 0.5;
    u_xlat7.xz = u_xlat3.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.z = u_xlat2.z;
    u_xlat3.xy = u_xlat7.zz + u_xlat7.xw;
    vs_TEXCOORD2 = u_xlat3;
    vs_TEXCOORD4.xyw = u_xlat3.xyw;
    u_xlat27 = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat27 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat27;
    u_xlat27 = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat27;
    u_xlat27 = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat27;
    vs_TEXCOORD3.z = (-u_xlat27);
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD3.w = 0.0;
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD5.w = 0.0;
    vs_TEXCOORD6.xyz = u_xlat4.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[1].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].www + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * in_POSITION0.yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.zzz + u_xlat1.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.www + u_xlat1.xyz;
    vs_TEXCOORD7.xyz = u_xlat1.xyz * vec3(-1.0, -1.0, 1.0);
    vs_TEXCOORD7.w = 0.0;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat27 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat1.xyz = vec3(u_xlat27) * u_xlat1.xyz;
    vs_TEXCOORD8.xyz = u_xlat1.xyz;
    vs_TEXCOORD8.w = 0.0;
    u_xlat2.xyz = u_xlat1.yzx * u_xlat4.zxy;
    u_xlat1.xyz = u_xlat4.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
    u_xlat27 = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD9.xyz = vec3(u_xlat27) * u_xlat1.xyz;
    vs_TEXCOORD9.w = 0.0;
    u_xlat27 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat27 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat27;
    vs_TEXCOORD10.w = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat27;
    vs_TEXCOORD10.xyz = u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowPos[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	mediump float _CausticUVScale;
uniform 	mediump float _CausticSpeed;
uniform 	mediump vec4 _CausticColor;
uniform 	mediump float _CausticDepth;
uniform 	mediump float _CausticDistance;
uniform 	mediump float _CausticDistortionValue;
uniform 	mediump vec4 _DepthFoamMask_ST;
uniform 	mediump float _DepthFoamSpeed;
uniform 	mediump vec4 _DepthFoamColor;
uniform 	mediump float _DepthFoamExtent;
uniform 	mediump float _DepthFoamDistance;
uniform 	mediump float _DepthFoamSubdivision;
uniform 	mediump float _DepthFoamWidth;
uniform 	mediump float _DepthFoamPhaseScale;
uniform 	mediump float _DepthFoamCloseFadeOffset;
uniform 	mediump float _DepthFoamCloseFadeDistance;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _NormalMapScale;
uniform 	float _Normal01_U_Speed;
uniform 	float _Normal01_VSpeed;
uniform 	float _NormalMapBias;
uniform 	float _Normal02_U_Speed;
uniform 	float _Normal02_V_Speed;
uniform 	float _RefractionIntensity;
uniform 	float _OpacityByDepth;
uniform 	float _SpecularIntensity;
uniform 	vec3 _ES_MoonDirection;
uniform 	vec3 _ES_SunDirection;
uniform 	float _Gloss;
uniform 	float _ShoreTransparency;
uniform 	float _SpecularPower;
uniform 	vec4 _ShallowColor;
uniform 	float _ShoreFade;
uniform 	vec4 _DeepColor;
uniform 	float _DeepColorDepth;
uniform 	float _DeepColorFade;
uniform 	vec4 _DistortionIntensity;
uniform 	float _SSRDistortion;
uniform 	float _SSRDistortion_Shore;
uniform 	float _SSRIntensity;
uniform 	float _ReflectionIntensity;
uniform 	float _FresnelPower;
uniform 	float _ShoreReflectionFade;
uniform 	vec3 _ES_MainLightColor;
uniform 	mediump float _RippleTillingScale;
uniform 	mediump float _Ripple02Rotate;
uniform 	mediump float _ProjectUVScale;
uniform 	mediump float _CausticFade;
uniform 	mediump float _CausticFadeExponent;
uniform 	vec4 _ReflectionSkyCubeMap_HDR;
uniform lowp sampler2D _Normal01;
uniform lowp sampler2D _Normal02;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _SceneScaledBufferBeforTransParent;
uniform lowp samplerCube _ReflectionSkyCubeMap;
uniform lowp sampler2D _SSRTexture;
uniform lowp sampler2D _DepthFoamMask;
uniform lowp sampler2D _WaterRippleTex;
uniform lowp sampler2DShadow hlslcc_zcmp_CascadeShadowMapTexture;
uniform lowp sampler2D _CascadeShadowMapTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD8;
in highp vec4 vs_TEXCOORD9;
in highp vec4 vs_TEXCOORD10;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
lowp float u_xlat10_0;
int u_xlati0;
uint u_xlatu0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec3 u_xlat10_1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
lowp vec4 u_xlat10_2;
bvec4 u_xlatb2;
mediump vec3 u_xlat16_3;
vec4 u_xlat4;
mediump vec3 u_xlat16_4;
lowp vec4 u_xlat10_4;
vec3 u_xlat5;
lowp float u_xlat10_5;
vec4 u_xlat6;
vec4 u_xlat7;
mediump vec3 u_xlat16_7;
vec4 u_xlat8;
vec3 u_xlat9;
vec3 u_xlat10;
mediump vec3 u_xlat16_10;
vec3 u_xlat11;
vec3 u_xlat12;
lowp vec3 u_xlat10_12;
vec3 u_xlat13;
vec3 u_xlat14;
vec3 u_xlat15;
mediump float u_xlat16_16;
mediump vec2 u_xlat16_17;
float u_xlat18;
bool u_xlatb18;
vec3 u_xlat19;
mediump vec3 u_xlat16_21;
vec3 u_xlat23;
mediump float u_xlat16_23;
bool u_xlatb23;
vec3 u_xlat25;
bool u_xlatb25;
float u_xlat26;
vec2 u_xlat36;
mediump float u_xlat16_36;
lowp float u_xlat10_36;
float u_xlat37;
lowp float u_xlat10_37;
int u_xlati37;
uint u_xlatu37;
bool u_xlatb37;
float u_xlat41;
float u_xlat42;
lowp float u_xlat10_54;
float u_xlat55;
mediump float u_xlat16_55;
mediump float u_xlat16_57;
float u_xlat59;
mediump float u_xlat16_59;
bool u_xlatb59;
float u_xlat60;
bool u_xlatb60;
float u_xlat61;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0 = vs_TEXCOORD5.xzxz * vec4(_ProjectUVScale, _ProjectUVScale, _RippleTillingScale, _RippleTillingScale);
    u_xlat1.x = _Time.y * _Normal01_U_Speed + u_xlat0.x;
    u_xlat1.yz = _Time.yy * vec2(_Normal01_VSpeed, _Normal02_U_Speed) + u_xlat0.yx;
    u_xlat1.w = _Time.y * _Normal02_V_Speed + u_xlat0.y;
    u_xlat10_2.xyz = texture(_Normal01, u_xlat1.xy, _NormalMapBias).xyz;
    u_xlat16_2.xyz = u_xlat10_2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_3.xy = u_xlat16_2.xy * vec2(_NormalMapScale);
    u_xlat10_1.xyz = texture(_Normal02, u_xlat1.zw, _NormalMapBias).xyz;
    u_xlat16_2.w = -1.0;
    u_xlat16_4.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_2.wwz;
    u_xlat16_4.xy = u_xlat16_4.xy * vec2(_NormalMapScale);
    u_xlat16_3.z = -1.0;
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat0.x = float(1.0) / vs_TEXCOORD4.w;
    u_xlat1.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat18 = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat18 = _ZBufferParams.z * u_xlat18 + _ZBufferParams.w;
    u_xlat18 = float(1.0) / u_xlat18;
    u_xlat1.x = vs_TEXCOORD10.w + 9.99999975e-05;
    u_xlat1.x = (-u_xlat18) / u_xlat1.x;
    u_xlat19.xyz = u_xlat1.xxx * vs_TEXCOORD10.xyz;
    u_xlat5.xyz = vs_TEXCOORD10.xyz * u_xlat1.xxx + _WorldSpaceCameraPos.xyz;
    u_xlat6.xyz = (-u_xlat5.xyz) + vs_TEXCOORD5.xyz;
    u_xlat1.x = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlat6.xz = u_xlat16_3.xy * vec2(vec2(_RefractionIntensity, _RefractionIntensity));
    u_xlat0.x = u_xlat0.x * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat6.xz = u_xlat0.xx * u_xlat6.xz;
    u_xlat6.xz = u_xlat6.xz * vs_TEXCOORD4.ww;
    u_xlat0.x = u_xlat18 + (-vs_TEXCOORD4.w);
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat7.xy = u_xlat0.xx * u_xlat6.xz;
    u_xlat7.z = 0.0;
    u_xlat6.xzw = u_xlat7.xyz + vs_TEXCOORD4.xyw;
    u_xlat0.xy = u_xlat6.xz / u_xlat6.ww;
    u_xlat0.x = texture(_CameraDepthTexture, u_xlat0.xy).x;
    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat0.x = u_xlat0.x + (-vs_TEXCOORD4.w);
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat6.xzw = u_xlat0.xxx * u_xlat7.xyz + vs_TEXCOORD4.xyw;
    u_xlat0.xy = u_xlat6.xz / u_xlat6.ww;
    u_xlat0.x = texture(_CameraDepthTexture, u_xlat0.xy).x;
    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat0.x = u_xlat0.x + (-vs_TEXCOORD4.w);
    u_xlat18 = 0.100000001 / _OpacityByDepth;
    u_xlat18 = u_xlat18 * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat16_4.xz = u_xlat16_3.xy;
    u_xlat16_4.y = 1.0;
    u_xlat16_59 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);
    u_xlat16_59 = inversesqrt(u_xlat16_59);
    u_xlat16_7.xyz = u_xlat16_4.xyz * vec3(u_xlat16_59);
#ifdef UNITY_ADRENO_ES3
    u_xlatb59 = !!(0.0>=_ES_MoonDirection.y);
#else
    u_xlatb59 = 0.0>=_ES_MoonDirection.y;
#endif
    u_xlat8.xyz = (bool(u_xlatb59)) ? _ES_SunDirection.xyz : _ES_MoonDirection.xyz;
    u_xlat9.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat59 = dot(u_xlat9.xyz, u_xlat9.xyz);
    u_xlat60 = inversesqrt(u_xlat59);
    u_xlat10.xyz = vec3(u_xlat60) * u_xlat9.xyz;
    u_xlat8.xyz = u_xlat9.xyz * vec3(u_xlat60) + u_xlat8.xyz;
    u_xlat60 = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat60 = inversesqrt(u_xlat60);
    u_xlat8.xyz = vec3(u_xlat60) * u_xlat8.xyz;
    u_xlat60 = dot(u_xlat16_7.xyz, u_xlat8.xyz);
    u_xlat25.x = _Gloss * 128.0;
    u_xlat60 = max(u_xlat60, 9.99999975e-05);
    u_xlat60 = log2(u_xlat60);
    u_xlat60 = u_xlat60 * u_xlat25.x;
    u_xlat60 = exp2(u_xlat60);
    u_xlat60 = u_xlat60 * _SpecularIntensity;
    u_xlat60 = max(u_xlat60, 0.0);
    u_xlat60 = min(u_xlat60, 16.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb25 = !!(_ES_MoonDirection.y>=9.99999975e-05);
#else
    u_xlatb25 = _ES_MoonDirection.y>=9.99999975e-05;
#endif
    u_xlat25.x = u_xlatb25 ? 1.0 : float(0.0);
    u_xlat61 = _ES_MoonDirection.y + -1.0;
    u_xlat25.x = u_xlat25.x * u_xlat61 + 1.0;
    u_xlat61 = float(1.0) / _ShoreTransparency;
    u_xlat8.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat8.xyz = u_xlat8.xxx * vs_TEXCOORD6.xyz;
    u_xlat8.x = dot(u_xlat10.xyz, u_xlat8.xyz);
    u_xlat8.x = (-u_xlat8.x) + 1.0;
    u_xlat8.x = max(u_xlat8.x, 9.99999975e-05);
    u_xlat8.x = log2(u_xlat8.x);
    u_xlat26 = u_xlat8.x * _SpecularPower;
    u_xlat26 = exp2(u_xlat26);
    u_xlat9.xyz = u_xlat25.xxx * _LightColor0.xyz;
    u_xlat9.xyz = vec3(u_xlat60) * u_xlat9.xyz;
    u_xlat60 = u_xlat0.x + -1.0;
    u_xlat60 = u_xlat61 * u_xlat60;
    u_xlat60 = u_xlat60 * 0.100000001;
#ifdef UNITY_ADRENO_ES3
    u_xlat60 = min(max(u_xlat60, 0.0), 1.0);
#else
    u_xlat60 = clamp(u_xlat60, 0.0, 1.0);
#endif
    u_xlat9.xyz = vec3(u_xlat60) * u_xlat9.xyz;
    u_xlat60 = u_xlat0.x * u_xlat61;
#ifdef UNITY_ADRENO_ES3
    u_xlat60 = min(max(u_xlat60, 0.0), 1.0);
#else
    u_xlat60 = clamp(u_xlat60, 0.0, 1.0);
#endif
    u_xlat60 = max(u_xlat60, 9.99999975e-05);
    u_xlat60 = log2(u_xlat60);
    u_xlat60 = u_xlat60 * _ShoreFade;
    u_xlat60 = exp2(u_xlat60);
    u_xlat11.xyz = _ShallowColor.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat11.xyz = vec3(u_xlat60) * u_xlat11.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat6.xz = u_xlat6.xz / vs_TEXCOORD4.ww;
    u_xlat10_12.xyz = texture(_SceneScaledBufferBeforTransParent, u_xlat6.xz).xyz;
    u_xlat6.x = u_xlat1.x * _CausticDistortionValue;
    u_xlat6.xz = u_xlat6.xx * u_xlat16_7.xz;
    u_xlat7.z = _Time.y * _CausticSpeed;
    u_xlat6.xz = u_xlat5.xz * vec2(_CausticUVScale) + u_xlat6.xz;
    u_xlat13.x = _Normal01_U_Speed * 25.0;
    u_xlat13.y = _Normal01_VSpeed * 25.0;
    u_xlat7.xy = u_xlat7.zz * u_xlat13.xy + u_xlat6.xz;
    u_xlat13.x = dot(u_xlat7.xyz, vec3(-2.0, 3.0, 1.0));
    u_xlat13.y = dot(u_xlat7.xyz, vec3(-1.0, -2.0, 2.0));
    u_xlat13.z = dot(u_xlat7.xzy, vec3(2.0, 2.0, 1.0));
    u_xlat7.xyz = u_xlat13.xyz * vec3(0.400000006, 0.400000006, 0.400000006);
    u_xlat14.x = dot(u_xlat7.xyz, vec3(-2.0, 3.0, 1.0));
    u_xlat14.y = dot(u_xlat7.xyz, vec3(-1.0, -2.0, 2.0));
    u_xlat14.z = dot(u_xlat7.xzy, vec3(2.0, 2.0, 1.0));
    u_xlat7.xyz = u_xlat14.xyz * vec3(0.300000012, 0.300000012, 0.300000012);
    u_xlat6.x = dot(u_xlat7.xyz, vec3(-2.0, 3.0, 1.0));
    u_xlat6.z = dot(u_xlat7.xyz, vec3(-1.0, -2.0, 2.0));
    u_xlat7.x = dot(u_xlat7.xzy, vec3(2.0, 2.0, 1.0));
    u_xlat25.xyz = fract(u_xlat13.xyz);
    u_xlat25.xyz = (-u_xlat25.xyz) + vec3(0.5, 0.5, 0.5);
    u_xlat25.x = dot(u_xlat25.xyz, u_xlat25.xyz);
    u_xlat13.xyz = fract(u_xlat14.xyz);
    u_xlat13.xyz = (-u_xlat13.xyz) + vec3(0.5, 0.5, 0.5);
    u_xlat25.y = dot(u_xlat13.xyz, u_xlat13.xyz);
    u_xlat25.xy = sqrt(u_xlat25.xy);
    u_xlat25.x = min(u_xlat25.y, u_xlat25.x);
    u_xlat13.xy = fract(u_xlat6.xz);
    u_xlat13.z = fract(u_xlat7.x);
    u_xlat7.xzw = (-u_xlat13.xyz) + vec3(0.5, 0.5, 0.5);
    u_xlat6.x = dot(u_xlat7.xzw, u_xlat7.xzw);
    u_xlat6.x = sqrt(u_xlat6.x);
    u_xlat6.x = min(u_xlat6.x, u_xlat25.x);
    u_xlat6.x = log2(u_xlat6.x);
    u_xlat6.x = u_xlat6.x * 7.0;
    u_xlat6.x = exp2(u_xlat6.x);
    u_xlat6.x = u_xlat6.x * 25.0;
    u_xlat16_4.xy = vec2(float(_CausticDepth) + float(9.99999975e-05), float(_CausticDistance) + float(9.99999975e-05));
    u_xlat42 = u_xlat6.y / u_xlat16_4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat42 = min(max(u_xlat42, 0.0), 1.0);
#else
    u_xlat42 = clamp(u_xlat42, 0.0, 1.0);
#endif
    u_xlat19.x = dot(u_xlat19.xyz, u_xlat19.xyz);
    u_xlat19.x = sqrt(u_xlat19.x);
    u_xlat19.x = u_xlat19.x / u_xlat16_4.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat19.x = min(max(u_xlat19.x, 0.0), 1.0);
#else
    u_xlat19.x = clamp(u_xlat19.x, 0.0, 1.0);
#endif
    u_xlat19.x = (-u_xlat19.x) + 1.0;
    u_xlat19.x = u_xlat19.x * u_xlat42;
    u_xlat7.xyz = u_xlat5.xyz + (-unity_ShadowSplitSpheres[0].xyz);
    u_xlat13.xyz = u_xlat5.xyz + (-unity_ShadowSplitSpheres[1].xyz);
    u_xlat14.xyz = u_xlat5.xyz + (-unity_ShadowSplitSpheres[2].xyz);
    u_xlat15.xyz = u_xlat5.xyz + (-unity_ShadowSplitSpheres[3].xyz);
    u_xlat2.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat2.y = dot(u_xlat13.xyz, u_xlat13.xyz);
    u_xlat2.z = dot(u_xlat14.xyz, u_xlat14.xyz);
    u_xlat2.w = dot(u_xlat15.xyz, u_xlat15.xyz);
    u_xlatb2 = lessThan(u_xlat2, unity_ShadowSplitSqRadii);
    u_xlat2 = mix(vec4(0.0, 0.0, 0.0, 0.0), vec4(1.0, 1.0, 1.0, 1.0), vec4(u_xlatb2));
    u_xlat16_57 = u_xlat2.y + u_xlat2.x;
    u_xlat16_4.x = u_xlat2.z + u_xlat16_57;
    u_xlat7.x = -0.0;
    u_xlat7.y = (-u_xlat2.x);
    u_xlat7.z = (-u_xlat16_57);
    u_xlat7.w = (-u_xlat16_4.x);
    u_xlat2 = u_xlat2 + u_xlat7;
    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat16_57 = dot(u_xlat2, vec4(1.0, 1.0, 1.0, 1.0));
#ifdef UNITY_ADRENO_ES3
    u_xlatb37 = !!(u_xlat16_57>=0.5);
#else
    u_xlatb37 = u_xlat16_57>=0.5;
#endif
    if(u_xlatb37){
        u_xlat37 = dot(u_xlat2.yzw, vec3(1.0, 2.0, 3.0));
        u_xlat37 = min(u_xlat37, 3.0);
        u_xlatu37 = uint(u_xlat37);
        u_xlat5.xyz = u_xlat5.xyz + (-unity_ShadowPos[int(u_xlatu37)].xyz);
        u_xlati37 = int(u_xlatu37) << 2;
        u_xlat7.xyz = u_xlat5.yyy * hlslcc_mtx4x4unity_WorldToShadow[(u_xlati37 + 1)].xyz;
        u_xlat7.xyz = hlslcc_mtx4x4unity_WorldToShadow[u_xlati37].xyz * u_xlat5.xxx + u_xlat7.xyz;
        u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToShadow[(u_xlati37 + 2)].xyz * u_xlat5.zzz + u_xlat7.xyz;
        u_xlat5.xyz = u_xlat5.xyz + hlslcc_mtx4x4unity_WorldToShadow[(u_xlati37 + 3)].xyz;
        vec3 txVec0 = vec3(u_xlat5.xy,u_xlat5.z);
        u_xlat10_37 = textureLod(hlslcc_zcmp_CascadeShadowMapTexture, txVec0, 0.0);
        u_xlat16_55 = (-_LightShadowData.x) + 1.0;
        u_xlat37 = u_xlat10_37 * u_xlat16_55 + _LightShadowData.x;
    } else {
        u_xlat37 = 1.0;
    //ENDIF
    }
    u_xlat19.x = u_xlat37 * u_xlat19.x;
    u_xlat16_4.xyz = _LightColor0.xyz * _CausticColor.xyz;
    u_xlat16_4.xyz = u_xlat6.xxx * u_xlat16_4.xyz;
    u_xlat16_4.xyz = u_xlat19.xxx * u_xlat16_4.xyz;
    u_xlat16_57 = _CausticFade + 9.99999975e-05;
    u_xlat1.x = u_xlat1.x / u_xlat16_57;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.x = log2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _CausticFadeExponent;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat1.x = (-u_xlat1.x) + 1.0;
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat1.xxx + vec3(1.0, 1.0, 1.0);
    u_xlat16_1.xyz = u_xlat16_4.xyz * u_xlat10_12.xyz;
    u_xlat5.xyz = u_xlat16_1.xyz * u_xlat11.xyz;
    u_xlat55 = 0.100000001 / _DeepColorDepth;
    u_xlat55 = u_xlat0.x * u_xlat55;
#ifdef UNITY_ADRENO_ES3
    u_xlat55 = min(max(u_xlat55, 0.0), 1.0);
#else
    u_xlat55 = clamp(u_xlat55, 0.0, 1.0);
#endif
    u_xlat55 = max(u_xlat55, 9.99999975e-05);
    u_xlat55 = log2(u_xlat55);
    u_xlat55 = u_xlat55 * _DeepColorFade;
    u_xlat55 = exp2(u_xlat55);
    u_xlat7.xyz = (-u_xlat11.xyz) * u_xlat16_1.xyz + _DeepColor.xyz;
    u_xlat7.xyz = vec3(u_xlat55) * u_xlat7.xyz + u_xlat5.xyz;
    u_xlat12.xyz = u_xlat16_3.xyz * _DistortionIntensity.xyz;
    u_xlat13.x = vs_TEXCOORD8.x;
    u_xlat13.y = vs_TEXCOORD9.x;
    u_xlat13.z = vs_TEXCOORD6.x;
    u_xlat13.x = dot(u_xlat13.xyz, u_xlat12.xyz);
    u_xlat14.x = vs_TEXCOORD8.y;
    u_xlat14.y = vs_TEXCOORD9.y;
    u_xlat14.z = vs_TEXCOORD6.y;
    u_xlat13.y = dot(u_xlat14.xyz, u_xlat12.xyz);
    u_xlat14.x = vs_TEXCOORD8.z;
    u_xlat14.y = vs_TEXCOORD9.z;
    u_xlat14.z = vs_TEXCOORD6.z;
    u_xlat13.z = dot(u_xlat14.xyz, u_xlat12.xyz);
    u_xlat55 = dot(u_xlat13.xyz, u_xlat13.xyz);
    u_xlat55 = inversesqrt(u_xlat55);
    u_xlat13.xyz = vec3(u_xlat55) * u_xlat13.xyz;
    u_xlat55 = dot((-u_xlat10.xyz), u_xlat13.xyz);
    u_xlat55 = u_xlat55 + u_xlat55;
    u_xlat10.xyz = u_xlat13.xyz * (-vec3(u_xlat55)) + (-u_xlat10.xyz);
    u_xlat10_2 = textureLod(_ReflectionSkyCubeMap, u_xlat10.xyz, 0.0);
    u_xlat16_3.x = u_xlat10_2.w + -1.0;
    u_xlat16_3.x = _ReflectionSkyCubeMap_HDR.w * u_xlat16_3.x + 1.0;
    u_xlat16_3.x = log2(u_xlat16_3.x);
    u_xlat16_3.x = u_xlat16_3.x * _ReflectionSkyCubeMap_HDR.y;
    u_xlat16_3.x = exp2(u_xlat16_3.x);
    u_xlat16_3.x = u_xlat16_3.x * _ReflectionSkyCubeMap_HDR.x;
    u_xlat16_21.xyz = u_xlat10_2.xyz * u_xlat16_3.xxx;
    u_xlat6.xz = u_xlat12.xy * vec2(_SSRDistortion);
    u_xlat55 = float(1.0) / _SSRDistortion_Shore;
    u_xlat55 = u_xlat0.x * u_xlat55;
#ifdef UNITY_ADRENO_ES3
    u_xlat55 = min(max(u_xlat55, 0.0), 1.0);
#else
    u_xlat55 = clamp(u_xlat55, 0.0, 1.0);
#endif
    u_xlat6.xz = vec2(u_xlat55) * u_xlat6.xz;
    u_xlat6.xz = u_xlat6.xz * vs_TEXCOORD4.ww + vs_TEXCOORD4.xy;
    u_xlat6.xz = u_xlat6.xz / vs_TEXCOORD4.ww;
    u_xlat10_4 = texture(_SSRTexture, u_xlat6.xz).wxyz;
    u_xlat16_10.xyz = (-u_xlat16_3.xxx) * u_xlat10_2.xyz + u_xlat10_4.yzw;
    u_xlat10.xyz = u_xlat16_10.xyz * vec3(vec3(_SSRIntensity, _SSRIntensity, _SSRIntensity));
    u_xlat16_4.x = u_xlat10_4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat10.xyz = u_xlat16_4.xxx * u_xlat10.xyz + u_xlat16_21.xyz;
    u_xlat55 = u_xlat8.x * _FresnelPower;
    u_xlat55 = exp2(u_xlat55);
    u_xlat55 = u_xlat55 * _ReflectionIntensity;
    u_xlat6.x = float(1.0) / _ShoreReflectionFade;
    u_xlat0.x = u_xlat0.x * u_xlat6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x * u_xlat55;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat8.xzw = (-u_xlat7.xyz) + u_xlat10.xyz;
    u_xlat7.xyz = u_xlat0.xxx * u_xlat8.xzw + u_xlat7.xyz;
    u_xlat1.xyz = (-u_xlat11.xyz) * u_xlat16_1.xyz + u_xlat7.xyz;
    u_xlat1.xyz = vec3(u_xlat60) * u_xlat1.xyz + u_xlat5.xyz;
    u_xlat0.x = (-vs_TEXCOORD5.y) * _WorldSpaceLightPos0.w + _WorldSpaceLightPos0.y;
    u_xlat16_3.x = max(u_xlat0.x, 0.0);
    u_xlat5.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowSplitSpheres[0].xyz);
    u_xlat6.xzw = vs_TEXCOORD5.xyz + (-unity_ShadowSplitSpheres[1].xyz);
    u_xlat7.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowSplitSpheres[2].xyz);
    u_xlat8.xzw = vs_TEXCOORD5.xyz + (-unity_ShadowSplitSpheres[3].xyz);
    u_xlat2.x = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat2.y = dot(u_xlat6.xzw, u_xlat6.xzw);
    u_xlat2.z = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat2.w = dot(u_xlat8.xzw, u_xlat8.xzw);
    u_xlatb2 = lessThan(u_xlat2, unity_ShadowSplitSqRadii);
    u_xlat2 = mix(vec4(0.0, 0.0, 0.0, 0.0), vec4(1.0, 1.0, 1.0, 1.0), vec4(u_xlatb2));
    u_xlat16_21.x = u_xlat2.y + u_xlat2.x;
    u_xlat16_21.y = u_xlat2.z + u_xlat16_21.x;
    u_xlat4.x = -0.0;
    u_xlat4.y = (-u_xlat2.x);
    u_xlat4.zw = (-u_xlat16_21.xy);
    u_xlat2 = u_xlat2 + u_xlat4;
    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat16_21.x = dot(u_xlat2, vec4(1.0, 1.0, 1.0, 1.0));
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(u_xlat16_21.x>=0.5);
#else
    u_xlatb0.x = u_xlat16_21.x>=0.5;
#endif
    if(u_xlatb0.x){
        u_xlat0.x = dot(u_xlat2.yzw, vec3(1.0, 2.0, 3.0));
        u_xlat0.x = min(u_xlat0.x, 3.0);
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat5.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowPos[int(u_xlatu0)].xyz);
        u_xlati0 = int(u_xlatu0) << 2;
        u_xlat6.xzw = u_xlat5.yyy * hlslcc_mtx4x4unity_WorldToShadow[(u_xlati0 + 1)].xyz;
        u_xlat6.xzw = hlslcc_mtx4x4unity_WorldToShadow[u_xlati0].xyz * u_xlat5.xxx + u_xlat6.xzw;
        u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToShadow[(u_xlati0 + 2)].xyz * u_xlat5.zzz + u_xlat6.xzw;
        u_xlat5.xyz = u_xlat5.xyz + hlslcc_mtx4x4unity_WorldToShadow[(u_xlati0 + 3)].xyz;
        vec3 txVec1 = vec3(u_xlat5.xy,u_xlat5.z);
        u_xlat10_0 = textureLod(hlslcc_zcmp_CascadeShadowMapTexture, txVec1, 0.0);
        u_xlat16_55 = (-_LightShadowData.x) + 1.0;
        u_xlat0.x = u_xlat10_0 * u_xlat16_55 + _LightShadowData.x;
    } else {
        u_xlat0.x = 1.0;
    //ENDIF
    }
    u_xlat16_3.xyz = u_xlat16_3.xxx * _LightColor0.xyz;
    u_xlat5.xyz = u_xlat16_3.xyz * u_xlat0.xxx + vs_TEXCOORD1.xyz;
    u_xlat16_3.xyz = u_xlat5.xyz * vec3(0.300000012, 0.300000012, 0.300000012) + vec3(0.699999988, 0.699999988, 0.699999988);
    u_xlat0.x = sqrt(u_xlat59);
    u_xlat16_57 = u_xlat0.x + (-_DepthFoamCloseFadeOffset);
    u_xlat16_57 = u_xlat16_57 / _DepthFoamCloseFadeDistance;
    u_xlat16_16 = vs_COLOR0.x * _DepthFoamExtent;
    u_xlat55 = max(u_xlat6.y, 0.0);
    u_xlat55 = min(u_xlat16_16, u_xlat55);
    u_xlat16_16 = _DepthFoamExtent * vs_COLOR0.x + 9.99999975e-05;
    u_xlat55 = u_xlat55 / u_xlat16_16;
    u_xlat55 = (-u_xlat55) + 1.0;
    u_xlat5.xy = vec2(_Time.y * _DepthFoamMask_ST.z, _Time.y * _DepthFoamMask_ST.w);
    u_xlat5.xy = fract(u_xlat5.xy);
    u_xlat5.xy = _DepthFoamMask_ST.xy * vs_TEXCOORD5.xz + u_xlat5.xy;
    u_xlat10_5 = texture(_DepthFoamMask, u_xlat5.xy).x;
    u_xlat23.x = vs_TEXCOORD5.z + vs_TEXCOORD5.x;
    u_xlat23.x = u_xlat23.x * _DepthFoamPhaseScale;
    u_xlat23.x = _DepthFoamSpeed * _Time.y + u_xlat23.x;
    u_xlat41 = (-u_xlat55) + 1.0;
    u_xlat16_16 = _DepthFoamSubdivision * u_xlat55 + u_xlat23.x;
    u_xlat16_16 = sin(u_xlat16_16);
    u_xlat16_16 = _DepthFoamWidth * u_xlat55 + u_xlat16_16;
    u_xlat16_23 = u_xlat10_5 * 2.0 + -1.0;
    u_xlat23.x = u_xlat16_23 + u_xlat16_16;
#ifdef UNITY_ADRENO_ES3
    u_xlatb23 = !!(u_xlat23.x>=u_xlat41);
#else
    u_xlatb23 = u_xlat23.x>=u_xlat41;
#endif
    u_xlat23.x = u_xlatb23 ? 1.0 : float(0.0);
    u_xlat5.x = u_xlat23.x * u_xlat10_5;
    u_xlat16_16 = _DepthFoamDistance + 9.99999975e-05;
    u_xlat16_16 = u_xlat0.x / u_xlat16_16;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat16_0 = (-u_xlat16_16) + 1.0;
    u_xlat16_16 = vs_COLOR0.y * _DepthFoamColor.w;
    u_xlat16_57 = u_xlat16_57 * u_xlat16_16;
    u_xlat16_57 = u_xlat5.x * u_xlat16_57;
    u_xlat16_57 = u_xlat55 * u_xlat16_57;
    u_xlat16_57 = u_xlat16_0 * u_xlat16_57;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_57 = min(max(u_xlat16_57, 0.0), 1.0);
#else
    u_xlat16_57 = clamp(u_xlat16_57, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = _DepthFoamColor.xyz * u_xlat16_3.xyz + (-u_xlat1.xyz);
    u_xlat16_3.xyz = vec3(u_xlat16_57) * u_xlat16_3.xyz + u_xlat1.xyz;
    u_xlat16_0 = max(_LightColor0.w, 0.5);
    u_xlat1.xyz = u_xlat9.xyz * vec3(u_xlat26) + u_xlat16_3.xyz;
    u_xlat36.xy = fract(u_xlat0.zw);
    u_xlat16_3.xy = u_xlat36.xy * vec2(1.14999998, 1.14999998);
    u_xlat16_16 = sin(_Ripple02Rotate);
    u_xlat16_17.x = cos(_Ripple02Rotate);
    u_xlat5.x = (-u_xlat16_16);
    u_xlat16_17.y = u_xlat16_16;
    u_xlat6.x = dot(u_xlat16_3.xy, u_xlat16_17.xy);
    u_xlat5.y = u_xlat16_17.x;
    u_xlat6.y = dot(u_xlat16_3.xy, u_xlat5.xy);
    u_xlat10_36 = texture(_WaterRippleTex, u_xlat36.xy).x;
    u_xlat10_54 = texture(_WaterRippleTex, u_xlat6.xy).x;
    u_xlat16_36 = u_xlat10_54 + u_xlat10_36;
    u_xlat36.x = u_xlat16_36 * u_xlat18;
    u_xlat5.xyz = _ES_MainLightColor.xyz * vec3(u_xlat16_0) + (-u_xlat1.xyz);
    u_xlat0.xzw = u_xlat36.xxx * u_xlat5.xyz + u_xlat1.xyz;
    u_xlat1.w = u_xlat18 * vs_COLOR0.w;
    u_xlat5.xyz = vs_TEXCOORD5.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat6.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat6.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat6.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat18 = dot(u_xlat5.xyz, u_xlat6.xyz);
    u_xlat5.x = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat5.x = sqrt(u_xlat5.x);
    u_xlat23.y = u_xlat5.x * _HeigtFogParams.y;
    u_xlat59 = u_xlat5.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat59 = min(max(u_xlat59, 0.0), 1.0);
#else
    u_xlat59 = clamp(u_xlat59, 0.0, 1.0);
#endif
    u_xlat6.x = (-u_xlat59) + 2.0;
    u_xlat59 = u_xlat59 * u_xlat6.x;
    u_xlat6.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!((-u_xlat18)>=u_xlat6.x);
#else
    u_xlatb18 = (-u_xlat18)>=u_xlat6.x;
#endif
    u_xlat6.x = u_xlat59 * _HeigtFogColDelta.w;
    u_xlat18 = (u_xlatb18) ? u_xlat6.x : u_xlat59;
    u_xlat18 = log2(u_xlat18);
    u_xlat18 = u_xlat18 * unity_FogColor.w;
    u_xlat18 = exp2(u_xlat18);
    u_xlat18 = min(u_xlat18, _HeigtFogColBase.w);
    u_xlat59 = vs_TEXCOORD5.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat59 = min(max(u_xlat59, 0.0), 1.0);
#else
    u_xlat59 = clamp(u_xlat59, 0.0, 1.0);
#endif
    u_xlat16_3.x = (-u_xlat59) + 2.0;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat59;
    u_xlat6.xyz = u_xlat16_3.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat59 = u_xlat5.x + (-_HeigtFogRamp.w);
    u_xlat59 = u_xlat59 * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat59 = min(max(u_xlat59, 0.0), 1.0);
#else
    u_xlat59 = clamp(u_xlat59, 0.0, 1.0);
#endif
    u_xlat7.xyz = (-u_xlat6.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat6.xyz = vec3(u_xlat59) * u_xlat7.xyz + u_xlat6.xyz;
    u_xlat59 = u_xlat5.y * _HeigtFogParams.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb60 = !!(0.00999999978<abs(u_xlat59));
#else
    u_xlatb60 = 0.00999999978<abs(u_xlat59);
#endif
    u_xlat7.x = u_xlat59 * -1.44269502;
    u_xlat7.x = exp2(u_xlat7.x);
    u_xlat7.x = (-u_xlat7.x) + 1.0;
    u_xlat59 = u_xlat7.x / u_xlat59;
    u_xlat16_3.x = (u_xlatb60) ? u_xlat59 : 1.0;
    u_xlat23.x = u_xlat5.y * _HeigtFogParams2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb59 = !!(0.00999999978<abs(u_xlat23.x));
#else
    u_xlatb59 = 0.00999999978<abs(u_xlat23.x);
#endif
    u_xlat60 = u_xlat23.x * -1.44269502;
    u_xlat60 = exp2(u_xlat60);
    u_xlat60 = (-u_xlat60) + 1.0;
    u_xlat23.x = u_xlat60 / u_xlat23.x;
    u_xlat16_3.y = (u_xlatb59) ? u_xlat23.x : 1.0;
    u_xlat23.x = u_xlat5.x * _HeigtFogParams2.y;
    u_xlat16_3.xy = u_xlat16_3.xy * u_xlat23.yx;
    u_xlat16_3.x = exp2((-u_xlat16_3.x));
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat16_21.x = exp2((-u_xlat16_3.y));
    u_xlat16_3.y = (-u_xlat16_21.x) + 1.0;
    u_xlat16_3.xy = max(u_xlat16_3.xy, vec2(0.0, 0.0));
    u_xlat16_3.x = u_xlat16_3.y + u_xlat16_3.x;
    u_xlat5.x = u_xlat5.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat16_21.x = (-u_xlat5.x) + 2.0;
    u_xlat16_21.x = u_xlat16_21.x * u_xlat5.x;
    u_xlat5.x = u_xlat16_21.x * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat5.x = u_xlat5.x + 1.0;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat5.x;
    u_xlat5.x = min(u_xlat16_3.x, _HeigtFogColBase.w);
    u_xlat23.x = vs_TEXCOORD5.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat23.x = min(max(u_xlat23.x, 0.0), 1.0);
#else
    u_xlat23.x = clamp(u_xlat23.x, 0.0, 1.0);
#endif
    u_xlat23.xyz = u_xlat23.xxx * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    u_xlat6.xyz = vec3(u_xlat18) * u_xlat6.xyz;
    u_xlat60 = (-u_xlat5.x) + 1.0;
    u_xlat6.xyz = vec3(u_xlat60) * u_xlat6.xyz;
    u_xlat5.xyz = u_xlat23.xyz * u_xlat5.xxx + u_xlat6.xyz;
    u_xlat18 = (-u_xlat18) + 1.0;
    u_xlat18 = u_xlat60 * u_xlat18;
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat0.xzw + u_xlat5.xyz;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "MHY_SHADER_HIGH" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	mediump float _MHYZBias;
uniform 	vec4 hlslcc_mtx4x4_mhyJitteredVP[4];
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
out highp vec4 vs_TEXCOORD9;
out highp vec4 vs_TEXCOORD10;
float u_xlat0;
int u_xlati0;
vec4 u_xlat1;
bool u_xlatb1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
bool u_xlatb4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
mediump vec4 u_xlat16_6;
vec4 u_xlat7;
mediump vec3 u_xlat16_8;
vec3 u_xlat9;
float u_xlat10;
float u_xlat13;
bool u_xlatb13;
mediump float u_xlat16_14;
float u_xlat22;
float u_xlat28;
float u_xlat31;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat9.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4_mhyJitteredVP[1];
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[3] * u_xlat2.wwww + u_xlat1;
    u_xlat3.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    u_xlat3.xyw = u_xlat1.xyw;
    gl_Position = u_xlat3;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.xyw = u_xlat9.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat4.x = u_xlat1.y * _HeigtFogParams.x;
    u_xlat13 = u_xlat4.x * -1.44269502;
    u_xlat13 = exp2(u_xlat13);
    u_xlat13 = (-u_xlat13) + 1.0;
    u_xlat13 = u_xlat13 / u_xlat4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(0.00999999978<abs(u_xlat4.x));
#else
    u_xlatb4 = 0.00999999978<abs(u_xlat4.x);
#endif
    u_xlat16_5.x = (u_xlatb4) ? u_xlat13 : 1.0;
    u_xlat4.x = dot(u_xlat1.xyw, u_xlat1.xyw);
    u_xlat4.x = sqrt(u_xlat4.x);
    u_xlat13 = u_xlat4.x * _HeigtFogParams.y;
    u_xlat16_5.x = u_xlat13 * u_xlat16_5.x;
    u_xlat16_5.x = exp2((-u_xlat16_5.x));
    u_xlat16_5.x = (-u_xlat16_5.x) + 1.0;
    u_xlat13 = u_xlat1.y * _HeigtFogParams2.x;
    u_xlat22 = u_xlat13 * -1.44269502;
    u_xlat22 = exp2(u_xlat22);
    u_xlat22 = (-u_xlat22) + 1.0;
    u_xlat22 = u_xlat22 / u_xlat13;
#ifdef UNITY_ADRENO_ES3
    u_xlatb13 = !!(0.00999999978<abs(u_xlat13));
#else
    u_xlatb13 = 0.00999999978<abs(u_xlat13);
#endif
    u_xlat16_14 = (u_xlatb13) ? u_xlat22 : 1.0;
    u_xlat13 = u_xlat4.x * _HeigtFogParams2.y;
    u_xlat16_14 = u_xlat13 * u_xlat16_14;
    u_xlat16_14 = exp2((-u_xlat16_14));
    u_xlat16_5.y = (-u_xlat16_14) + 1.0;
    u_xlat16_5.xy = max(u_xlat16_5.xy, vec2(0.0, 0.0));
    u_xlat16_5.x = u_xlat16_5.y + u_xlat16_5.x;
    u_xlat13 = u_xlat4.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat13 = min(max(u_xlat13, 0.0), 1.0);
#else
    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
#endif
    u_xlat16_14 = (-u_xlat13) + 2.0;
    u_xlat16_14 = u_xlat13 * u_xlat16_14;
    u_xlat13 = u_xlat16_14 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat13 = u_xlat13 + 1.0;
    u_xlat16_5.x = u_xlat13 * u_xlat16_5.x;
    u_xlat13 = min(u_xlat16_5.x, _HeigtFogColBase.w);
    u_xlat22 = (-u_xlat13) + 1.0;
    u_xlat31 = _ProjectionParams.z * 0.999899983;
    u_xlat6.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat6.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat6.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat1.x = dot(u_xlat1.xyw, u_xlat6.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!((-u_xlat1.x)>=u_xlat31);
#else
    u_xlatb1 = (-u_xlat1.x)>=u_xlat31;
#endif
    u_xlat10 = u_xlat4.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat10 = min(max(u_xlat10, 0.0), 1.0);
#else
    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
#endif
    u_xlat28 = u_xlat4.x + (-_HeigtFogRamp.w);
    u_xlat28 = u_xlat28 * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat28 = min(max(u_xlat28, 0.0), 1.0);
#else
    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
#endif
    u_xlat4.x = (-u_xlat10) + 2.0;
    u_xlat10 = u_xlat10 * u_xlat4.x;
    u_xlat4.x = u_xlat10 * _HeigtFogColDelta.w;
    u_xlat1.x = (u_xlatb1) ? u_xlat4.x : u_xlat10;
    u_xlat1.x = log2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * unity_FogColor.w;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat1.x = min(u_xlat1.x, _HeigtFogColBase.w);
    u_xlat10 = u_xlat9.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat10 = min(max(u_xlat10, 0.0), 1.0);
#else
    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
#endif
    u_xlat16_5.x = (-u_xlat10) + 2.0;
    u_xlat16_5.x = u_xlat10 * u_xlat16_5.x;
    u_xlat6.xyz = u_xlat16_5.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat7.xyz = (-u_xlat6.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat6.xyz = vec3(u_xlat28) * u_xlat7.xyz + u_xlat6.xyz;
    u_xlat6.xyz = u_xlat1.xxx * u_xlat6.xyz;
    u_xlat1.x = (-u_xlat1.x) + 1.0;
    vs_TEXCOORD0.w = u_xlat22 * u_xlat1.x;
    u_xlat1.xyw = vec3(u_xlat22) * u_xlat6.xyz;
    u_xlat4.x = u_xlat9.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat4.xzw = u_xlat4.xxx * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    vs_TEXCOORD0.xyz = u_xlat4.xzw * vec3(u_xlat13) + u_xlat1.xyw;
    vs_TEXCOORD1.w = 1.0;
    u_xlat4.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat4.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat4.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat1.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
    u_xlat16_5.x = u_xlat4.y * u_xlat4.y;
    u_xlat16_5.x = u_xlat4.x * u_xlat4.x + (-u_xlat16_5.x);
    u_xlat16_6 = u_xlat4.yzzx * u_xlat4.xyzz;
    u_xlat16_8.x = dot(unity_SHBr, u_xlat16_6);
    u_xlat16_8.y = dot(unity_SHBg, u_xlat16_6);
    u_xlat16_8.z = dot(unity_SHBb, u_xlat16_6);
    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_8.xyz;
    u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat4.w = 1.0;
    u_xlat16_8.x = dot(unity_SHAr, u_xlat4);
    u_xlat16_8.y = dot(unity_SHAg, u_xlat4);
    u_xlat16_8.z = dot(unity_SHAb, u_xlat4);
    u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_8.xyz;
    vs_TEXCOORD1.xyz = u_xlat16_5.xyz;
    u_xlat1.x = u_xlat3.y * _ProjectionParams.x;
    u_xlat7.w = u_xlat1.x * 0.5;
    u_xlat7.xz = u_xlat3.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.z = u_xlat1.z;
    u_xlat3.xy = u_xlat7.zz + u_xlat7.xw;
    vs_TEXCOORD2 = u_xlat3;
    vs_TEXCOORD4.xyw = u_xlat3.xyw;
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD3.w = 0.0;
    u_xlat1.x = u_xlat2.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat2.x + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat2.z + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat2.w + u_xlat1.x;
    vs_TEXCOORD3.z = (-u_xlat1.x);
    vs_TEXCOORD5.w = 0.0;
    vs_TEXCOORD5.xyz = u_xlat9.xyz;
    u_xlat9.xyz = (-u_xlat9.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD6.w = 0.0;
    vs_TEXCOORD6.xyz = u_xlat4.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].www + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * in_POSITION0.yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.zzz + u_xlat1.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.www + u_xlat1.xyz;
    vs_TEXCOORD7.xyz = u_xlat1.xyz * vec3(-1.0, -1.0, 1.0);
    vs_TEXCOORD7.w = 0.0;
    u_xlat1.xyz = in_TANGENT0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat0 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0 = inversesqrt(u_xlat0);
    u_xlat1.xyz = vec3(u_xlat0) * u_xlat1.xyz;
    vs_TEXCOORD8.xyz = u_xlat1.xyz;
    vs_TEXCOORD8.w = 0.0;
    u_xlat2.xyz = u_xlat1.yzx * u_xlat4.zxy;
    u_xlat1.xyz = u_xlat4.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
    u_xlat0 = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD9.xyz = vec3(u_xlat0) * u_xlat1.xyz;
    vs_TEXCOORD9.w = 0.0;
    u_xlat0 = u_xlat9.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat9.x + u_xlat0;
    vs_TEXCOORD10.w = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat9.z + u_xlat0;
    vs_TEXCOORD10.xyz = u_xlat9.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowPos[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	mediump float _CausticUVScale;
uniform 	mediump float _CausticSpeed;
uniform 	mediump vec4 _CausticColor;
uniform 	mediump float _CausticDepth;
uniform 	mediump float _CausticDistance;
uniform 	mediump float _CausticDistortionValue;
uniform 	mediump vec4 _DepthFoamMask_ST;
uniform 	mediump float _DepthFoamSpeed;
uniform 	mediump vec4 _DepthFoamColor;
uniform 	mediump float _DepthFoamExtent;
uniform 	mediump float _DepthFoamDistance;
uniform 	mediump float _DepthFoamSubdivision;
uniform 	mediump float _DepthFoamWidth;
uniform 	mediump float _DepthFoamPhaseScale;
uniform 	mediump float _DepthFoamCloseFadeOffset;
uniform 	mediump float _DepthFoamCloseFadeDistance;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _NormalMapScale;
uniform 	float _Normal01_U_Speed;
uniform 	float _Normal01_VSpeed;
uniform 	float _NormalMapBias;
uniform 	float _Normal02_U_Speed;
uniform 	float _Normal02_V_Speed;
uniform 	float _RefractionIntensity;
uniform 	float _OpacityByDepth;
uniform 	float _SpecularIntensity;
uniform 	vec3 _ES_MoonDirection;
uniform 	vec3 _ES_SunDirection;
uniform 	float _Gloss;
uniform 	float _ShoreTransparency;
uniform 	float _SpecularPower;
uniform 	vec4 _ShallowColor;
uniform 	float _ShoreFade;
uniform 	vec4 _DeepColor;
uniform 	float _DeepColorDepth;
uniform 	float _DeepColorFade;
uniform 	vec4 _DistortionIntensity;
uniform 	float _SSRDistortion;
uniform 	float _SSRDistortion_Shore;
uniform 	float _SSRIntensity;
uniform 	float _ReflectionIntensity;
uniform 	float _FresnelPower;
uniform 	float _ShoreReflectionFade;
uniform 	vec3 _ES_MainLightColor;
uniform 	mediump float _RippleTillingScale;
uniform 	mediump float _Ripple02Rotate;
uniform 	mediump float _ProjectUVScale;
uniform 	mediump float _CausticFade;
uniform 	mediump float _CausticFadeExponent;
uniform 	vec4 _ReflectionSkyCubeMap_HDR;
uniform lowp sampler2D _Normal01;
uniform lowp sampler2D _Normal02;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _SceneScaledBufferBeforTransParent;
uniform lowp samplerCube _ReflectionSkyCubeMap;
uniform lowp sampler2D _SSRTexture;
uniform lowp sampler2D _DepthFoamMask;
uniform lowp sampler2D _WaterRippleTex;
uniform lowp sampler2DShadow hlslcc_zcmp_CascadeShadowMapTexture;
uniform lowp sampler2D _CascadeShadowMapTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD8;
in highp vec4 vs_TEXCOORD9;
in highp vec4 vs_TEXCOORD10;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
lowp float u_xlat10_0;
int u_xlati0;
uint u_xlatu0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec3 u_xlat10_1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
lowp vec4 u_xlat10_2;
bvec4 u_xlatb2;
mediump vec3 u_xlat16_3;
vec4 u_xlat4;
mediump vec3 u_xlat16_4;
lowp vec4 u_xlat10_4;
vec3 u_xlat5;
lowp float u_xlat10_5;
vec4 u_xlat6;
vec4 u_xlat7;
mediump vec3 u_xlat16_7;
vec4 u_xlat8;
vec3 u_xlat9;
vec3 u_xlat10;
mediump vec3 u_xlat16_10;
vec3 u_xlat11;
vec3 u_xlat12;
lowp vec3 u_xlat10_12;
vec3 u_xlat13;
vec3 u_xlat14;
vec3 u_xlat15;
mediump float u_xlat16_16;
mediump vec2 u_xlat16_17;
float u_xlat18;
bool u_xlatb18;
vec3 u_xlat19;
mediump vec3 u_xlat16_21;
vec3 u_xlat23;
mediump float u_xlat16_23;
bool u_xlatb23;
vec3 u_xlat25;
bool u_xlatb25;
float u_xlat26;
vec2 u_xlat36;
mediump float u_xlat16_36;
lowp float u_xlat10_36;
float u_xlat37;
lowp float u_xlat10_37;
int u_xlati37;
uint u_xlatu37;
bool u_xlatb37;
float u_xlat41;
float u_xlat42;
lowp float u_xlat10_54;
float u_xlat55;
mediump float u_xlat16_55;
mediump float u_xlat16_57;
float u_xlat59;
mediump float u_xlat16_59;
bool u_xlatb59;
float u_xlat60;
bool u_xlatb60;
float u_xlat61;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0 = vs_TEXCOORD5.xzxz * vec4(_ProjectUVScale, _ProjectUVScale, _RippleTillingScale, _RippleTillingScale);
    u_xlat1.x = _Time.y * _Normal01_U_Speed + u_xlat0.x;
    u_xlat1.yz = _Time.yy * vec2(_Normal01_VSpeed, _Normal02_U_Speed) + u_xlat0.yx;
    u_xlat1.w = _Time.y * _Normal02_V_Speed + u_xlat0.y;
    u_xlat10_2.xyz = texture(_Normal01, u_xlat1.xy, _NormalMapBias).xyz;
    u_xlat16_2.xyz = u_xlat10_2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_3.xy = u_xlat16_2.xy * vec2(_NormalMapScale);
    u_xlat10_1.xyz = texture(_Normal02, u_xlat1.zw, _NormalMapBias).xyz;
    u_xlat16_2.w = -1.0;
    u_xlat16_4.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_2.wwz;
    u_xlat16_4.xy = u_xlat16_4.xy * vec2(_NormalMapScale);
    u_xlat16_3.z = -1.0;
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat0.x = float(1.0) / vs_TEXCOORD4.w;
    u_xlat1.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat18 = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat18 = _ZBufferParams.z * u_xlat18 + _ZBufferParams.w;
    u_xlat18 = float(1.0) / u_xlat18;
    u_xlat1.x = vs_TEXCOORD10.w + 9.99999975e-05;
    u_xlat1.x = (-u_xlat18) / u_xlat1.x;
    u_xlat19.xyz = u_xlat1.xxx * vs_TEXCOORD10.xyz;
    u_xlat5.xyz = vs_TEXCOORD10.xyz * u_xlat1.xxx + _WorldSpaceCameraPos.xyz;
    u_xlat6.xyz = (-u_xlat5.xyz) + vs_TEXCOORD5.xyz;
    u_xlat1.x = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlat6.xz = u_xlat16_3.xy * vec2(vec2(_RefractionIntensity, _RefractionIntensity));
    u_xlat0.x = u_xlat0.x * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat6.xz = u_xlat0.xx * u_xlat6.xz;
    u_xlat6.xz = u_xlat6.xz * vs_TEXCOORD4.ww;
    u_xlat0.x = u_xlat18 + (-vs_TEXCOORD4.w);
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat7.xy = u_xlat0.xx * u_xlat6.xz;
    u_xlat7.z = 0.0;
    u_xlat6.xzw = u_xlat7.xyz + vs_TEXCOORD4.xyw;
    u_xlat0.xy = u_xlat6.xz / u_xlat6.ww;
    u_xlat0.x = texture(_CameraDepthTexture, u_xlat0.xy).x;
    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat0.x = u_xlat0.x + (-vs_TEXCOORD4.w);
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat6.xzw = u_xlat0.xxx * u_xlat7.xyz + vs_TEXCOORD4.xyw;
    u_xlat0.xy = u_xlat6.xz / u_xlat6.ww;
    u_xlat0.x = texture(_CameraDepthTexture, u_xlat0.xy).x;
    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat0.x = u_xlat0.x + (-vs_TEXCOORD4.w);
    u_xlat18 = 0.100000001 / _OpacityByDepth;
    u_xlat18 = u_xlat18 * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat16_4.xz = u_xlat16_3.xy;
    u_xlat16_4.y = 1.0;
    u_xlat16_59 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);
    u_xlat16_59 = inversesqrt(u_xlat16_59);
    u_xlat16_7.xyz = u_xlat16_4.xyz * vec3(u_xlat16_59);
#ifdef UNITY_ADRENO_ES3
    u_xlatb59 = !!(0.0>=_ES_MoonDirection.y);
#else
    u_xlatb59 = 0.0>=_ES_MoonDirection.y;
#endif
    u_xlat8.xyz = (bool(u_xlatb59)) ? _ES_SunDirection.xyz : _ES_MoonDirection.xyz;
    u_xlat9.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat59 = dot(u_xlat9.xyz, u_xlat9.xyz);
    u_xlat60 = inversesqrt(u_xlat59);
    u_xlat10.xyz = vec3(u_xlat60) * u_xlat9.xyz;
    u_xlat8.xyz = u_xlat9.xyz * vec3(u_xlat60) + u_xlat8.xyz;
    u_xlat60 = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat60 = inversesqrt(u_xlat60);
    u_xlat8.xyz = vec3(u_xlat60) * u_xlat8.xyz;
    u_xlat60 = dot(u_xlat16_7.xyz, u_xlat8.xyz);
    u_xlat25.x = _Gloss * 128.0;
    u_xlat60 = max(u_xlat60, 9.99999975e-05);
    u_xlat60 = log2(u_xlat60);
    u_xlat60 = u_xlat60 * u_xlat25.x;
    u_xlat60 = exp2(u_xlat60);
    u_xlat60 = u_xlat60 * _SpecularIntensity;
    u_xlat60 = max(u_xlat60, 0.0);
    u_xlat60 = min(u_xlat60, 16.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb25 = !!(_ES_MoonDirection.y>=9.99999975e-05);
#else
    u_xlatb25 = _ES_MoonDirection.y>=9.99999975e-05;
#endif
    u_xlat25.x = u_xlatb25 ? 1.0 : float(0.0);
    u_xlat61 = _ES_MoonDirection.y + -1.0;
    u_xlat25.x = u_xlat25.x * u_xlat61 + 1.0;
    u_xlat61 = float(1.0) / _ShoreTransparency;
    u_xlat8.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat8.xyz = u_xlat8.xxx * vs_TEXCOORD6.xyz;
    u_xlat8.x = dot(u_xlat10.xyz, u_xlat8.xyz);
    u_xlat8.x = (-u_xlat8.x) + 1.0;
    u_xlat8.x = max(u_xlat8.x, 9.99999975e-05);
    u_xlat8.x = log2(u_xlat8.x);
    u_xlat26 = u_xlat8.x * _SpecularPower;
    u_xlat26 = exp2(u_xlat26);
    u_xlat9.xyz = u_xlat25.xxx * _LightColor0.xyz;
    u_xlat9.xyz = vec3(u_xlat60) * u_xlat9.xyz;
    u_xlat60 = u_xlat0.x + -1.0;
    u_xlat60 = u_xlat61 * u_xlat60;
    u_xlat60 = u_xlat60 * 0.100000001;
#ifdef UNITY_ADRENO_ES3
    u_xlat60 = min(max(u_xlat60, 0.0), 1.0);
#else
    u_xlat60 = clamp(u_xlat60, 0.0, 1.0);
#endif
    u_xlat9.xyz = vec3(u_xlat60) * u_xlat9.xyz;
    u_xlat60 = u_xlat0.x * u_xlat61;
#ifdef UNITY_ADRENO_ES3
    u_xlat60 = min(max(u_xlat60, 0.0), 1.0);
#else
    u_xlat60 = clamp(u_xlat60, 0.0, 1.0);
#endif
    u_xlat60 = max(u_xlat60, 9.99999975e-05);
    u_xlat60 = log2(u_xlat60);
    u_xlat60 = u_xlat60 * _ShoreFade;
    u_xlat60 = exp2(u_xlat60);
    u_xlat11.xyz = _ShallowColor.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat11.xyz = vec3(u_xlat60) * u_xlat11.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat6.xz = u_xlat6.xz / vs_TEXCOORD4.ww;
    u_xlat10_12.xyz = texture(_SceneScaledBufferBeforTransParent, u_xlat6.xz).xyz;
    u_xlat6.x = u_xlat1.x * _CausticDistortionValue;
    u_xlat6.xz = u_xlat6.xx * u_xlat16_7.xz;
    u_xlat7.z = _Time.y * _CausticSpeed;
    u_xlat6.xz = u_xlat5.xz * vec2(_CausticUVScale) + u_xlat6.xz;
    u_xlat13.x = _Normal01_U_Speed * 25.0;
    u_xlat13.y = _Normal01_VSpeed * 25.0;
    u_xlat7.xy = u_xlat7.zz * u_xlat13.xy + u_xlat6.xz;
    u_xlat13.x = dot(u_xlat7.xyz, vec3(-2.0, 3.0, 1.0));
    u_xlat13.y = dot(u_xlat7.xyz, vec3(-1.0, -2.0, 2.0));
    u_xlat13.z = dot(u_xlat7.xzy, vec3(2.0, 2.0, 1.0));
    u_xlat7.xyz = u_xlat13.xyz * vec3(0.400000006, 0.400000006, 0.400000006);
    u_xlat14.x = dot(u_xlat7.xyz, vec3(-2.0, 3.0, 1.0));
    u_xlat14.y = dot(u_xlat7.xyz, vec3(-1.0, -2.0, 2.0));
    u_xlat14.z = dot(u_xlat7.xzy, vec3(2.0, 2.0, 1.0));
    u_xlat7.xyz = u_xlat14.xyz * vec3(0.300000012, 0.300000012, 0.300000012);
    u_xlat6.x = dot(u_xlat7.xyz, vec3(-2.0, 3.0, 1.0));
    u_xlat6.z = dot(u_xlat7.xyz, vec3(-1.0, -2.0, 2.0));
    u_xlat7.x = dot(u_xlat7.xzy, vec3(2.0, 2.0, 1.0));
    u_xlat25.xyz = fract(u_xlat13.xyz);
    u_xlat25.xyz = (-u_xlat25.xyz) + vec3(0.5, 0.5, 0.5);
    u_xlat25.x = dot(u_xlat25.xyz, u_xlat25.xyz);
    u_xlat13.xyz = fract(u_xlat14.xyz);
    u_xlat13.xyz = (-u_xlat13.xyz) + vec3(0.5, 0.5, 0.5);
    u_xlat25.y = dot(u_xlat13.xyz, u_xlat13.xyz);
    u_xlat25.xy = sqrt(u_xlat25.xy);
    u_xlat25.x = min(u_xlat25.y, u_xlat25.x);
    u_xlat13.xy = fract(u_xlat6.xz);
    u_xlat13.z = fract(u_xlat7.x);
    u_xlat7.xzw = (-u_xlat13.xyz) + vec3(0.5, 0.5, 0.5);
    u_xlat6.x = dot(u_xlat7.xzw, u_xlat7.xzw);
    u_xlat6.x = sqrt(u_xlat6.x);
    u_xlat6.x = min(u_xlat6.x, u_xlat25.x);
    u_xlat6.x = log2(u_xlat6.x);
    u_xlat6.x = u_xlat6.x * 7.0;
    u_xlat6.x = exp2(u_xlat6.x);
    u_xlat6.x = u_xlat6.x * 25.0;
    u_xlat16_4.xy = vec2(float(_CausticDepth) + float(9.99999975e-05), float(_CausticDistance) + float(9.99999975e-05));
    u_xlat42 = u_xlat6.y / u_xlat16_4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat42 = min(max(u_xlat42, 0.0), 1.0);
#else
    u_xlat42 = clamp(u_xlat42, 0.0, 1.0);
#endif
    u_xlat19.x = dot(u_xlat19.xyz, u_xlat19.xyz);
    u_xlat19.x = sqrt(u_xlat19.x);
    u_xlat19.x = u_xlat19.x / u_xlat16_4.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat19.x = min(max(u_xlat19.x, 0.0), 1.0);
#else
    u_xlat19.x = clamp(u_xlat19.x, 0.0, 1.0);
#endif
    u_xlat19.x = (-u_xlat19.x) + 1.0;
    u_xlat19.x = u_xlat19.x * u_xlat42;
    u_xlat7.xyz = u_xlat5.xyz + (-unity_ShadowSplitSpheres[0].xyz);
    u_xlat13.xyz = u_xlat5.xyz + (-unity_ShadowSplitSpheres[1].xyz);
    u_xlat14.xyz = u_xlat5.xyz + (-unity_ShadowSplitSpheres[2].xyz);
    u_xlat15.xyz = u_xlat5.xyz + (-unity_ShadowSplitSpheres[3].xyz);
    u_xlat2.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat2.y = dot(u_xlat13.xyz, u_xlat13.xyz);
    u_xlat2.z = dot(u_xlat14.xyz, u_xlat14.xyz);
    u_xlat2.w = dot(u_xlat15.xyz, u_xlat15.xyz);
    u_xlatb2 = lessThan(u_xlat2, unity_ShadowSplitSqRadii);
    u_xlat2 = mix(vec4(0.0, 0.0, 0.0, 0.0), vec4(1.0, 1.0, 1.0, 1.0), vec4(u_xlatb2));
    u_xlat16_57 = u_xlat2.y + u_xlat2.x;
    u_xlat16_4.x = u_xlat2.z + u_xlat16_57;
    u_xlat7.x = -0.0;
    u_xlat7.y = (-u_xlat2.x);
    u_xlat7.z = (-u_xlat16_57);
    u_xlat7.w = (-u_xlat16_4.x);
    u_xlat2 = u_xlat2 + u_xlat7;
    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat16_57 = dot(u_xlat2, vec4(1.0, 1.0, 1.0, 1.0));
#ifdef UNITY_ADRENO_ES3
    u_xlatb37 = !!(u_xlat16_57>=0.5);
#else
    u_xlatb37 = u_xlat16_57>=0.5;
#endif
    if(u_xlatb37){
        u_xlat37 = dot(u_xlat2.yzw, vec3(1.0, 2.0, 3.0));
        u_xlat37 = min(u_xlat37, 3.0);
        u_xlatu37 = uint(u_xlat37);
        u_xlat5.xyz = u_xlat5.xyz + (-unity_ShadowPos[int(u_xlatu37)].xyz);
        u_xlati37 = int(u_xlatu37) << 2;
        u_xlat7.xyz = u_xlat5.yyy * hlslcc_mtx4x4unity_WorldToShadow[(u_xlati37 + 1)].xyz;
        u_xlat7.xyz = hlslcc_mtx4x4unity_WorldToShadow[u_xlati37].xyz * u_xlat5.xxx + u_xlat7.xyz;
        u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToShadow[(u_xlati37 + 2)].xyz * u_xlat5.zzz + u_xlat7.xyz;
        u_xlat5.xyz = u_xlat5.xyz + hlslcc_mtx4x4unity_WorldToShadow[(u_xlati37 + 3)].xyz;
        vec3 txVec0 = vec3(u_xlat5.xy,u_xlat5.z);
        u_xlat10_37 = textureLod(hlslcc_zcmp_CascadeShadowMapTexture, txVec0, 0.0);
        u_xlat16_55 = (-_LightShadowData.x) + 1.0;
        u_xlat37 = u_xlat10_37 * u_xlat16_55 + _LightShadowData.x;
    } else {
        u_xlat37 = 1.0;
    //ENDIF
    }
    u_xlat19.x = u_xlat37 * u_xlat19.x;
    u_xlat16_4.xyz = _LightColor0.xyz * _CausticColor.xyz;
    u_xlat16_4.xyz = u_xlat6.xxx * u_xlat16_4.xyz;
    u_xlat16_4.xyz = u_xlat19.xxx * u_xlat16_4.xyz;
    u_xlat16_57 = _CausticFade + 9.99999975e-05;
    u_xlat1.x = u_xlat1.x / u_xlat16_57;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.x = log2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _CausticFadeExponent;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat1.x = (-u_xlat1.x) + 1.0;
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat1.xxx + vec3(1.0, 1.0, 1.0);
    u_xlat16_1.xyz = u_xlat16_4.xyz * u_xlat10_12.xyz;
    u_xlat5.xyz = u_xlat16_1.xyz * u_xlat11.xyz;
    u_xlat55 = 0.100000001 / _DeepColorDepth;
    u_xlat55 = u_xlat0.x * u_xlat55;
#ifdef UNITY_ADRENO_ES3
    u_xlat55 = min(max(u_xlat55, 0.0), 1.0);
#else
    u_xlat55 = clamp(u_xlat55, 0.0, 1.0);
#endif
    u_xlat55 = max(u_xlat55, 9.99999975e-05);
    u_xlat55 = log2(u_xlat55);
    u_xlat55 = u_xlat55 * _DeepColorFade;
    u_xlat55 = exp2(u_xlat55);
    u_xlat7.xyz = (-u_xlat11.xyz) * u_xlat16_1.xyz + _DeepColor.xyz;
    u_xlat7.xyz = vec3(u_xlat55) * u_xlat7.xyz + u_xlat5.xyz;
    u_xlat12.xyz = u_xlat16_3.xyz * _DistortionIntensity.xyz;
    u_xlat13.x = vs_TEXCOORD8.x;
    u_xlat13.y = vs_TEXCOORD9.x;
    u_xlat13.z = vs_TEXCOORD6.x;
    u_xlat13.x = dot(u_xlat13.xyz, u_xlat12.xyz);
    u_xlat14.x = vs_TEXCOORD8.y;
    u_xlat14.y = vs_TEXCOORD9.y;
    u_xlat14.z = vs_TEXCOORD6.y;
    u_xlat13.y = dot(u_xlat14.xyz, u_xlat12.xyz);
    u_xlat14.x = vs_TEXCOORD8.z;
    u_xlat14.y = vs_TEXCOORD9.z;
    u_xlat14.z = vs_TEXCOORD6.z;
    u_xlat13.z = dot(u_xlat14.xyz, u_xlat12.xyz);
    u_xlat55 = dot(u_xlat13.xyz, u_xlat13.xyz);
    u_xlat55 = inversesqrt(u_xlat55);
    u_xlat13.xyz = vec3(u_xlat55) * u_xlat13.xyz;
    u_xlat55 = dot((-u_xlat10.xyz), u_xlat13.xyz);
    u_xlat55 = u_xlat55 + u_xlat55;
    u_xlat10.xyz = u_xlat13.xyz * (-vec3(u_xlat55)) + (-u_xlat10.xyz);
    u_xlat10_2 = textureLod(_ReflectionSkyCubeMap, u_xlat10.xyz, 0.0);
    u_xlat16_3.x = u_xlat10_2.w + -1.0;
    u_xlat16_3.x = _ReflectionSkyCubeMap_HDR.w * u_xlat16_3.x + 1.0;
    u_xlat16_3.x = log2(u_xlat16_3.x);
    u_xlat16_3.x = u_xlat16_3.x * _ReflectionSkyCubeMap_HDR.y;
    u_xlat16_3.x = exp2(u_xlat16_3.x);
    u_xlat16_3.x = u_xlat16_3.x * _ReflectionSkyCubeMap_HDR.x;
    u_xlat16_21.xyz = u_xlat10_2.xyz * u_xlat16_3.xxx;
    u_xlat6.xz = u_xlat12.xy * vec2(_SSRDistortion);
    u_xlat55 = float(1.0) / _SSRDistortion_Shore;
    u_xlat55 = u_xlat0.x * u_xlat55;
#ifdef UNITY_ADRENO_ES3
    u_xlat55 = min(max(u_xlat55, 0.0), 1.0);
#else
    u_xlat55 = clamp(u_xlat55, 0.0, 1.0);
#endif
    u_xlat6.xz = vec2(u_xlat55) * u_xlat6.xz;
    u_xlat6.xz = u_xlat6.xz * vs_TEXCOORD4.ww + vs_TEXCOORD4.xy;
    u_xlat6.xz = u_xlat6.xz / vs_TEXCOORD4.ww;
    u_xlat10_4 = texture(_SSRTexture, u_xlat6.xz).wxyz;
    u_xlat16_10.xyz = (-u_xlat16_3.xxx) * u_xlat10_2.xyz + u_xlat10_4.yzw;
    u_xlat10.xyz = u_xlat16_10.xyz * vec3(vec3(_SSRIntensity, _SSRIntensity, _SSRIntensity));
    u_xlat16_4.x = u_xlat10_4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat10.xyz = u_xlat16_4.xxx * u_xlat10.xyz + u_xlat16_21.xyz;
    u_xlat55 = u_xlat8.x * _FresnelPower;
    u_xlat55 = exp2(u_xlat55);
    u_xlat55 = u_xlat55 * _ReflectionIntensity;
    u_xlat6.x = float(1.0) / _ShoreReflectionFade;
    u_xlat0.x = u_xlat0.x * u_xlat6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x * u_xlat55;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat8.xzw = (-u_xlat7.xyz) + u_xlat10.xyz;
    u_xlat7.xyz = u_xlat0.xxx * u_xlat8.xzw + u_xlat7.xyz;
    u_xlat1.xyz = (-u_xlat11.xyz) * u_xlat16_1.xyz + u_xlat7.xyz;
    u_xlat1.xyz = vec3(u_xlat60) * u_xlat1.xyz + u_xlat5.xyz;
    u_xlat0.x = (-vs_TEXCOORD5.y) * _WorldSpaceLightPos0.w + _WorldSpaceLightPos0.y;
    u_xlat16_3.x = max(u_xlat0.x, 0.0);
    u_xlat5.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowSplitSpheres[0].xyz);
    u_xlat6.xzw = vs_TEXCOORD5.xyz + (-unity_ShadowSplitSpheres[1].xyz);
    u_xlat7.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowSplitSpheres[2].xyz);
    u_xlat8.xzw = vs_TEXCOORD5.xyz + (-unity_ShadowSplitSpheres[3].xyz);
    u_xlat2.x = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat2.y = dot(u_xlat6.xzw, u_xlat6.xzw);
    u_xlat2.z = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat2.w = dot(u_xlat8.xzw, u_xlat8.xzw);
    u_xlatb2 = lessThan(u_xlat2, unity_ShadowSplitSqRadii);
    u_xlat2 = mix(vec4(0.0, 0.0, 0.0, 0.0), vec4(1.0, 1.0, 1.0, 1.0), vec4(u_xlatb2));
    u_xlat16_21.x = u_xlat2.y + u_xlat2.x;
    u_xlat16_21.y = u_xlat2.z + u_xlat16_21.x;
    u_xlat4.x = -0.0;
    u_xlat4.y = (-u_xlat2.x);
    u_xlat4.zw = (-u_xlat16_21.xy);
    u_xlat2 = u_xlat2 + u_xlat4;
    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat16_21.x = dot(u_xlat2, vec4(1.0, 1.0, 1.0, 1.0));
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(u_xlat16_21.x>=0.5);
#else
    u_xlatb0.x = u_xlat16_21.x>=0.5;
#endif
    if(u_xlatb0.x){
        u_xlat0.x = dot(u_xlat2.yzw, vec3(1.0, 2.0, 3.0));
        u_xlat0.x = min(u_xlat0.x, 3.0);
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat5.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowPos[int(u_xlatu0)].xyz);
        u_xlati0 = int(u_xlatu0) << 2;
        u_xlat6.xzw = u_xlat5.yyy * hlslcc_mtx4x4unity_WorldToShadow[(u_xlati0 + 1)].xyz;
        u_xlat6.xzw = hlslcc_mtx4x4unity_WorldToShadow[u_xlati0].xyz * u_xlat5.xxx + u_xlat6.xzw;
        u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToShadow[(u_xlati0 + 2)].xyz * u_xlat5.zzz + u_xlat6.xzw;
        u_xlat5.xyz = u_xlat5.xyz + hlslcc_mtx4x4unity_WorldToShadow[(u_xlati0 + 3)].xyz;
        vec3 txVec1 = vec3(u_xlat5.xy,u_xlat5.z);
        u_xlat10_0 = textureLod(hlslcc_zcmp_CascadeShadowMapTexture, txVec1, 0.0);
        u_xlat16_55 = (-_LightShadowData.x) + 1.0;
        u_xlat0.x = u_xlat10_0 * u_xlat16_55 + _LightShadowData.x;
    } else {
        u_xlat0.x = 1.0;
    //ENDIF
    }
    u_xlat16_3.xyz = u_xlat16_3.xxx * _LightColor0.xyz;
    u_xlat5.xyz = u_xlat16_3.xyz * u_xlat0.xxx + vs_TEXCOORD1.xyz;
    u_xlat16_3.xyz = u_xlat5.xyz * vec3(0.300000012, 0.300000012, 0.300000012) + vec3(0.699999988, 0.699999988, 0.699999988);
    u_xlat0.x = sqrt(u_xlat59);
    u_xlat16_57 = u_xlat0.x + (-_DepthFoamCloseFadeOffset);
    u_xlat16_57 = u_xlat16_57 / _DepthFoamCloseFadeDistance;
    u_xlat16_16 = vs_COLOR0.x * _DepthFoamExtent;
    u_xlat55 = max(u_xlat6.y, 0.0);
    u_xlat55 = min(u_xlat16_16, u_xlat55);
    u_xlat16_16 = _DepthFoamExtent * vs_COLOR0.x + 9.99999975e-05;
    u_xlat55 = u_xlat55 / u_xlat16_16;
    u_xlat55 = (-u_xlat55) + 1.0;
    u_xlat5.xy = vec2(_Time.y * _DepthFoamMask_ST.z, _Time.y * _DepthFoamMask_ST.w);
    u_xlat5.xy = fract(u_xlat5.xy);
    u_xlat5.xy = _DepthFoamMask_ST.xy * vs_TEXCOORD5.xz + u_xlat5.xy;
    u_xlat10_5 = texture(_DepthFoamMask, u_xlat5.xy).x;
    u_xlat23.x = vs_TEXCOORD5.z + vs_TEXCOORD5.x;
    u_xlat23.x = u_xlat23.x * _DepthFoamPhaseScale;
    u_xlat23.x = _DepthFoamSpeed * _Time.y + u_xlat23.x;
    u_xlat41 = (-u_xlat55) + 1.0;
    u_xlat16_16 = _DepthFoamSubdivision * u_xlat55 + u_xlat23.x;
    u_xlat16_16 = sin(u_xlat16_16);
    u_xlat16_16 = _DepthFoamWidth * u_xlat55 + u_xlat16_16;
    u_xlat16_23 = u_xlat10_5 * 2.0 + -1.0;
    u_xlat23.x = u_xlat16_23 + u_xlat16_16;
#ifdef UNITY_ADRENO_ES3
    u_xlatb23 = !!(u_xlat23.x>=u_xlat41);
#else
    u_xlatb23 = u_xlat23.x>=u_xlat41;
#endif
    u_xlat23.x = u_xlatb23 ? 1.0 : float(0.0);
    u_xlat5.x = u_xlat23.x * u_xlat10_5;
    u_xlat16_16 = _DepthFoamDistance + 9.99999975e-05;
    u_xlat16_16 = u_xlat0.x / u_xlat16_16;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat16_0 = (-u_xlat16_16) + 1.0;
    u_xlat16_16 = vs_COLOR0.y * _DepthFoamColor.w;
    u_xlat16_57 = u_xlat16_57 * u_xlat16_16;
    u_xlat16_57 = u_xlat5.x * u_xlat16_57;
    u_xlat16_57 = u_xlat55 * u_xlat16_57;
    u_xlat16_57 = u_xlat16_0 * u_xlat16_57;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_57 = min(max(u_xlat16_57, 0.0), 1.0);
#else
    u_xlat16_57 = clamp(u_xlat16_57, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = _DepthFoamColor.xyz * u_xlat16_3.xyz + (-u_xlat1.xyz);
    u_xlat16_3.xyz = vec3(u_xlat16_57) * u_xlat16_3.xyz + u_xlat1.xyz;
    u_xlat16_0 = max(_LightColor0.w, 0.5);
    u_xlat1.xyz = u_xlat9.xyz * vec3(u_xlat26) + u_xlat16_3.xyz;
    u_xlat36.xy = fract(u_xlat0.zw);
    u_xlat16_3.xy = u_xlat36.xy * vec2(1.14999998, 1.14999998);
    u_xlat16_16 = sin(_Ripple02Rotate);
    u_xlat16_17.x = cos(_Ripple02Rotate);
    u_xlat5.x = (-u_xlat16_16);
    u_xlat16_17.y = u_xlat16_16;
    u_xlat6.x = dot(u_xlat16_3.xy, u_xlat16_17.xy);
    u_xlat5.y = u_xlat16_17.x;
    u_xlat6.y = dot(u_xlat16_3.xy, u_xlat5.xy);
    u_xlat10_36 = texture(_WaterRippleTex, u_xlat36.xy).x;
    u_xlat10_54 = texture(_WaterRippleTex, u_xlat6.xy).x;
    u_xlat16_36 = u_xlat10_54 + u_xlat10_36;
    u_xlat36.x = u_xlat16_36 * u_xlat18;
    u_xlat5.xyz = _ES_MainLightColor.xyz * vec3(u_xlat16_0) + (-u_xlat1.xyz);
    u_xlat0.xzw = u_xlat36.xxx * u_xlat5.xyz + u_xlat1.xyz;
    u_xlat1.w = u_xlat18 * vs_COLOR0.w;
    u_xlat5.xyz = vs_TEXCOORD5.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat6.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat6.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat6.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat18 = dot(u_xlat5.xyz, u_xlat6.xyz);
    u_xlat5.x = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat5.x = sqrt(u_xlat5.x);
    u_xlat23.y = u_xlat5.x * _HeigtFogParams.y;
    u_xlat59 = u_xlat5.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat59 = min(max(u_xlat59, 0.0), 1.0);
#else
    u_xlat59 = clamp(u_xlat59, 0.0, 1.0);
#endif
    u_xlat6.x = (-u_xlat59) + 2.0;
    u_xlat59 = u_xlat59 * u_xlat6.x;
    u_xlat6.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!((-u_xlat18)>=u_xlat6.x);
#else
    u_xlatb18 = (-u_xlat18)>=u_xlat6.x;
#endif
    u_xlat6.x = u_xlat59 * _HeigtFogColDelta.w;
    u_xlat18 = (u_xlatb18) ? u_xlat6.x : u_xlat59;
    u_xlat18 = log2(u_xlat18);
    u_xlat18 = u_xlat18 * unity_FogColor.w;
    u_xlat18 = exp2(u_xlat18);
    u_xlat18 = min(u_xlat18, _HeigtFogColBase.w);
    u_xlat59 = vs_TEXCOORD5.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat59 = min(max(u_xlat59, 0.0), 1.0);
#else
    u_xlat59 = clamp(u_xlat59, 0.0, 1.0);
#endif
    u_xlat16_3.x = (-u_xlat59) + 2.0;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat59;
    u_xlat6.xyz = u_xlat16_3.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat59 = u_xlat5.x + (-_HeigtFogRamp.w);
    u_xlat59 = u_xlat59 * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat59 = min(max(u_xlat59, 0.0), 1.0);
#else
    u_xlat59 = clamp(u_xlat59, 0.0, 1.0);
#endif
    u_xlat7.xyz = (-u_xlat6.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat6.xyz = vec3(u_xlat59) * u_xlat7.xyz + u_xlat6.xyz;
    u_xlat59 = u_xlat5.y * _HeigtFogParams.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb60 = !!(0.00999999978<abs(u_xlat59));
#else
    u_xlatb60 = 0.00999999978<abs(u_xlat59);
#endif
    u_xlat7.x = u_xlat59 * -1.44269502;
    u_xlat7.x = exp2(u_xlat7.x);
    u_xlat7.x = (-u_xlat7.x) + 1.0;
    u_xlat59 = u_xlat7.x / u_xlat59;
    u_xlat16_3.x = (u_xlatb60) ? u_xlat59 : 1.0;
    u_xlat23.x = u_xlat5.y * _HeigtFogParams2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb59 = !!(0.00999999978<abs(u_xlat23.x));
#else
    u_xlatb59 = 0.00999999978<abs(u_xlat23.x);
#endif
    u_xlat60 = u_xlat23.x * -1.44269502;
    u_xlat60 = exp2(u_xlat60);
    u_xlat60 = (-u_xlat60) + 1.0;
    u_xlat23.x = u_xlat60 / u_xlat23.x;
    u_xlat16_3.y = (u_xlatb59) ? u_xlat23.x : 1.0;
    u_xlat23.x = u_xlat5.x * _HeigtFogParams2.y;
    u_xlat16_3.xy = u_xlat16_3.xy * u_xlat23.yx;
    u_xlat16_3.x = exp2((-u_xlat16_3.x));
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat16_21.x = exp2((-u_xlat16_3.y));
    u_xlat16_3.y = (-u_xlat16_21.x) + 1.0;
    u_xlat16_3.xy = max(u_xlat16_3.xy, vec2(0.0, 0.0));
    u_xlat16_3.x = u_xlat16_3.y + u_xlat16_3.x;
    u_xlat5.x = u_xlat5.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat16_21.x = (-u_xlat5.x) + 2.0;
    u_xlat16_21.x = u_xlat16_21.x * u_xlat5.x;
    u_xlat5.x = u_xlat16_21.x * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat5.x = u_xlat5.x + 1.0;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat5.x;
    u_xlat5.x = min(u_xlat16_3.x, _HeigtFogColBase.w);
    u_xlat23.x = vs_TEXCOORD5.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat23.x = min(max(u_xlat23.x, 0.0), 1.0);
#else
    u_xlat23.x = clamp(u_xlat23.x, 0.0, 1.0);
#endif
    u_xlat23.xyz = u_xlat23.xxx * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    u_xlat6.xyz = vec3(u_xlat18) * u_xlat6.xyz;
    u_xlat60 = (-u_xlat5.x) + 1.0;
    u_xlat6.xyz = vec3(u_xlat60) * u_xlat6.xyz;
    u_xlat5.xyz = u_xlat23.xyz * u_xlat5.xxx + u_xlat6.xyz;
    u_xlat18 = (-u_xlat18) + 1.0;
    u_xlat18 = u_xlat60 * u_xlat18;
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat0.xzw + u_xlat5.xyz;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "MHY_SHADER_MIDDLE" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	mediump float _MHYZBias;
uniform 	vec4 hlslcc_mtx4x4_mhyJitteredVP[4];
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
out highp vec4 vs_TEXCOORD9;
out highp vec4 vs_TEXCOORD10;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
vec4 u_xlat4;
bool u_xlatb4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
mediump vec4 u_xlat16_6;
vec4 u_xlat7;
mediump vec3 u_xlat16_8;
float u_xlat11;
vec3 u_xlat13;
mediump float u_xlat16_14;
float u_xlat27;
bool u_xlatb27;
float u_xlat29;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4_mhyJitteredVP[1];
    u_xlat2 = hlslcc_mtx4x4_mhyJitteredVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4_mhyJitteredVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4_mhyJitteredVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat3.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    u_xlat3.xyw = u_xlat2.xyw;
    gl_Position = u_xlat3;
    vs_COLOR0 = in_COLOR0;
    u_xlat2.xyw = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat27 = u_xlat2.y * _HeigtFogParams.x;
    u_xlat4.x = u_xlat27 * -1.44269502;
    u_xlat4.x = exp2(u_xlat4.x);
    u_xlat4.x = (-u_xlat4.x) + 1.0;
    u_xlat4.x = u_xlat4.x / u_xlat27;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(0.00999999978<abs(u_xlat27));
#else
    u_xlatb27 = 0.00999999978<abs(u_xlat27);
#endif
    u_xlat16_5.x = (u_xlatb27) ? u_xlat4.x : 1.0;
    u_xlat27 = dot(u_xlat2.xyw, u_xlat2.xyw);
    u_xlat27 = sqrt(u_xlat27);
    u_xlat4.x = u_xlat27 * _HeigtFogParams.y;
    u_xlat16_5.x = u_xlat4.x * u_xlat16_5.x;
    u_xlat16_5.x = exp2((-u_xlat16_5.x));
    u_xlat16_5.x = (-u_xlat16_5.x) + 1.0;
    u_xlat4.x = u_xlat2.y * _HeigtFogParams2.x;
    u_xlat13.x = u_xlat4.x * -1.44269502;
    u_xlat13.x = exp2(u_xlat13.x);
    u_xlat13.x = (-u_xlat13.x) + 1.0;
    u_xlat13.x = u_xlat13.x / u_xlat4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(0.00999999978<abs(u_xlat4.x));
#else
    u_xlatb4 = 0.00999999978<abs(u_xlat4.x);
#endif
    u_xlat16_14 = (u_xlatb4) ? u_xlat13.x : 1.0;
    u_xlat4.x = u_xlat27 * _HeigtFogParams2.y;
    u_xlat16_14 = u_xlat4.x * u_xlat16_14;
    u_xlat16_14 = exp2((-u_xlat16_14));
    u_xlat16_5.y = (-u_xlat16_14) + 1.0;
    u_xlat16_5.xy = max(u_xlat16_5.xy, vec2(0.0, 0.0));
    u_xlat16_5.x = u_xlat16_5.y + u_xlat16_5.x;
    u_xlat4.x = u_xlat27 * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat16_14 = (-u_xlat4.x) + 2.0;
    u_xlat16_14 = u_xlat4.x * u_xlat16_14;
    u_xlat4.x = u_xlat16_14 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat4.x = u_xlat4.x + 1.0;
    u_xlat16_5.x = u_xlat4.x * u_xlat16_5.x;
    u_xlat4.x = min(u_xlat16_5.x, _HeigtFogColBase.w);
    u_xlat13.x = (-u_xlat4.x) + 1.0;
    u_xlat6.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat6.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat6.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat2.x = dot(u_xlat2.xyw, u_xlat6.xyz);
    u_xlat11 = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!((-u_xlat2.x)>=u_xlat11);
#else
    u_xlatb2 = (-u_xlat2.x)>=u_xlat11;
#endif
    u_xlat11 = u_xlat27 * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat11 = min(max(u_xlat11, 0.0), 1.0);
#else
    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
#endif
    u_xlat27 = u_xlat27 + (-_HeigtFogRamp.w);
    u_xlat27 = u_xlat27 * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
    u_xlat29 = (-u_xlat11) + 2.0;
    u_xlat11 = u_xlat29 * u_xlat11;
    u_xlat29 = u_xlat11 * _HeigtFogColDelta.w;
    u_xlat2.x = (u_xlatb2) ? u_xlat29 : u_xlat11;
    u_xlat2.x = log2(u_xlat2.x);
    u_xlat2.x = u_xlat2.x * unity_FogColor.w;
    u_xlat2.x = exp2(u_xlat2.x);
    u_xlat2.x = min(u_xlat2.x, _HeigtFogColBase.w);
    u_xlat11 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat11 = min(max(u_xlat11, 0.0), 1.0);
#else
    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
#endif
    u_xlat16_5.x = (-u_xlat11) + 2.0;
    u_xlat16_5.x = u_xlat11 * u_xlat16_5.x;
    u_xlat6.xyz = u_xlat16_5.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat7.xyz = (-u_xlat6.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat6.xyz = vec3(u_xlat27) * u_xlat7.xyz + u_xlat6.xyz;
    u_xlat6.xyz = u_xlat2.xxx * u_xlat6.xyz;
    u_xlat27 = (-u_xlat2.x) + 1.0;
    vs_TEXCOORD0.w = u_xlat13.x * u_xlat27;
    u_xlat2.xyw = u_xlat13.xxx * u_xlat6.xyz;
    u_xlat27 = u_xlat0.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
    u_xlat13.xyz = vec3(u_xlat27) * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    vs_TEXCOORD0.xyz = u_xlat13.xyz * u_xlat4.xxx + u_xlat2.xyw;
    u_xlat4.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat4.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat4.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat27 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat4.xyz = vec3(u_xlat27) * u_xlat4.xyz;
    u_xlat16_5.x = u_xlat4.y * u_xlat4.y;
    u_xlat16_5.x = u_xlat4.x * u_xlat4.x + (-u_xlat16_5.x);
    u_xlat16_6 = u_xlat4.yzzx * u_xlat4.xyzz;
    u_xlat16_8.x = dot(unity_SHBr, u_xlat16_6);
    u_xlat16_8.y = dot(unity_SHBg, u_xlat16_6);
    u_xlat16_8.z = dot(unity_SHBb, u_xlat16_6);
    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_8.xyz;
    u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat4.w = 1.0;
    u_xlat16_8.x = dot(unity_SHAr, u_xlat4);
    u_xlat16_8.y = dot(unity_SHAg, u_xlat4);
    u_xlat16_8.z = dot(unity_SHAb, u_xlat4);
    u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_8.xyz;
    vs_TEXCOORD1.xyz = u_xlat16_5.xyz;
    vs_TEXCOORD1.w = 1.0;
    u_xlat27 = u_xlat3.y * _ProjectionParams.x;
    u_xlat7.w = u_xlat27 * 0.5;
    u_xlat7.xz = u_xlat3.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.z = u_xlat2.z;
    u_xlat3.xy = u_xlat7.zz + u_xlat7.xw;
    vs_TEXCOORD2 = u_xlat3;
    vs_TEXCOORD4.xyw = u_xlat3.xyw;
    u_xlat27 = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat27 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat27;
    u_xlat27 = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat27;
    u_xlat27 = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat27;
    vs_TEXCOORD3.z = (-u_xlat27);
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD3.w = 0.0;
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD5.w = 0.0;
    vs_TEXCOORD6.xyz = u_xlat4.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[1].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].www + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * in_POSITION0.yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.zzz + u_xlat1.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.www + u_xlat1.xyz;
    vs_TEXCOORD7.xyz = u_xlat1.xyz * vec3(-1.0, -1.0, 1.0);
    vs_TEXCOORD7.w = 0.0;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat27 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat1.xyz = vec3(u_xlat27) * u_xlat1.xyz;
    vs_TEXCOORD8.xyz = u_xlat1.xyz;
    vs_TEXCOORD8.w = 0.0;
    u_xlat2.xyz = u_xlat1.yzx * u_xlat4.zxy;
    u_xlat1.xyz = u_xlat4.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
    u_xlat27 = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD9.xyz = vec3(u_xlat27) * u_xlat1.xyz;
    vs_TEXCOORD9.w = 0.0;
    u_xlat27 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat27 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat27;
    vs_TEXCOORD10.w = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat27;
    vs_TEXCOORD10.xyz = u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowPos[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	mediump vec4 _DepthFoamMask_ST;
uniform 	mediump float _DepthFoamSpeed;
uniform 	mediump vec4 _DepthFoamColor;
uniform 	mediump float _DepthFoamExtent;
uniform 	mediump float _DepthFoamDistance;
uniform 	mediump float _DepthFoamSubdivision;
uniform 	mediump float _DepthFoamWidth;
uniform 	mediump float _DepthFoamPhaseScale;
uniform 	mediump float _DepthFoamCloseFadeOffset;
uniform 	mediump float _DepthFoamCloseFadeDistance;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _NormalMapScale;
uniform 	float _Normal01_U_Speed;
uniform 	float _Normal01_VSpeed;
uniform 	float _NormalMapBias;
uniform 	float _Normal02_U_Speed;
uniform 	float _Normal02_V_Speed;
uniform 	float _RefractionIntensity;
uniform 	float _OpacityByDepth;
uniform 	float _SpecularIntensity;
uniform 	vec3 _ES_MoonDirection;
uniform 	vec3 _ES_SunDirection;
uniform 	float _Gloss;
uniform 	float _ShoreTransparency;
uniform 	float _SpecularPower;
uniform 	vec4 _ShallowColor;
uniform 	float _ShoreFade;
uniform 	vec4 _DeepColor;
uniform 	float _DeepColorDepth;
uniform 	float _DeepColorFade;
uniform 	vec4 _DistortionIntensity;
uniform 	float _SSRDistortion;
uniform 	float _SSRDistortion_Shore;
uniform 	float _SSRIntensity;
uniform 	float _ReflectionIntensity;
uniform 	float _FresnelPower;
uniform 	float _ShoreReflectionFade;
uniform 	mediump float _ProjectUVScale;
uniform 	vec4 _ReflectionSkyCubeMap_HDR;
uniform lowp sampler2D _Normal01;
uniform lowp sampler2D _Normal02;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _SceneScaledBufferBeforTransParent;
uniform lowp samplerCube _ReflectionSkyCubeMap;
uniform lowp sampler2D _SSRTexture;
uniform lowp sampler2D _DepthFoamMask;
uniform lowp sampler2DShadow hlslcc_zcmp_CascadeShadowMapTexture;
uniform lowp sampler2D _CascadeShadowMapTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD8;
in highp vec4 vs_TEXCOORD9;
in highp vec4 vs_TEXCOORD10;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec4 u_xlatb0;
vec4 u_xlat1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
lowp vec4 u_xlat10_3;
vec4 u_xlat4;
vec3 u_xlat5;
bool u_xlatb5;
vec3 u_xlat6;
vec4 u_xlat7;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
vec3 u_xlat9;
lowp vec3 u_xlat10_9;
vec3 u_xlat10;
vec3 u_xlat11;
vec3 u_xlat12;
vec3 u_xlat13;
vec3 u_xlat14;
mediump float u_xlat16_15;
vec2 u_xlat17;
mediump vec3 u_xlat16_18;
vec3 u_xlat20;
mediump vec3 u_xlat16_20;
lowp float u_xlat10_20;
int u_xlati20;
uint u_xlatu20;
bool u_xlatb20;
float u_xlat21;
float u_xlat33;
vec2 u_xlat36;
mediump float u_xlat16_36;
lowp float u_xlat10_36;
bool u_xlatb36;
float u_xlat49;
bool u_xlatb49;
mediump float u_xlat16_50;
float u_xlat52;
mediump float u_xlat16_52;
bool u_xlatb52;
float u_xlat53;
bool u_xlatb53;
float u_xlat54;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD5.zx * vec2(vec2(_ProjectUVScale, _ProjectUVScale));
    u_xlat1.x = _Time.y * _Normal01_U_Speed + u_xlat0.y;
    u_xlat1.yz = _Time.yy * vec2(_Normal01_VSpeed, _Normal02_U_Speed) + u_xlat0.xy;
    u_xlat1.w = _Time.y * _Normal02_V_Speed + u_xlat0.x;
    u_xlat10_0.xyz = texture(_Normal01, u_xlat1.xy, _NormalMapBias).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_2.xy = u_xlat16_0.xy * vec2(_NormalMapScale);
    u_xlat10_1.xyz = texture(_Normal02, u_xlat1.zw, _NormalMapBias).xyz;
    u_xlat16_0.w = -1.0;
    u_xlat16_3.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.wwz;
    u_xlat16_3.xy = u_xlat16_3.xy * vec2(_NormalMapScale);
    u_xlat16_2.z = -1.0;
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
    u_xlat1.x = float(1.0) / vs_TEXCOORD4.w;
    u_xlat17.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat17.x = texture(_CameraDepthTexture, u_xlat17.xy).x;
    u_xlat17.x = _ZBufferParams.z * u_xlat17.x + _ZBufferParams.w;
    u_xlat17.x = float(1.0) / u_xlat17.x;
    u_xlat33 = vs_TEXCOORD10.w + 9.99999975e-05;
    u_xlat33 = (-u_xlat17.x) / u_xlat33;
    u_xlat33 = vs_TEXCOORD10.y * u_xlat33 + _WorldSpaceCameraPos.y;
    u_xlat33 = (-u_xlat33) + vs_TEXCOORD5.y;
    u_xlat4.xy = u_xlat16_2.xy * vec2(vec2(_RefractionIntensity, _RefractionIntensity));
    u_xlat1.x = u_xlat1.x * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.xw = u_xlat1.xx * u_xlat4.xy;
    u_xlat1.xw = u_xlat1.xw * vs_TEXCOORD4.ww;
    u_xlat17.x = u_xlat17.x + (-vs_TEXCOORD4.w);
#ifdef UNITY_ADRENO_ES3
    u_xlat17.x = min(max(u_xlat17.x, 0.0), 1.0);
#else
    u_xlat17.x = clamp(u_xlat17.x, 0.0, 1.0);
#endif
    u_xlat4.xy = u_xlat17.xx * u_xlat1.xw;
    u_xlat4.z = 0.0;
    u_xlat1.xyw = u_xlat4.xyz + vs_TEXCOORD4.xyw;
    u_xlat1.xy = u_xlat1.xy / u_xlat1.ww;
    u_xlat1.x = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat1.x = _ZBufferParams.z * u_xlat1.x + _ZBufferParams.w;
    u_xlat1.x = float(1.0) / u_xlat1.x;
    u_xlat1.x = u_xlat1.x + (-vs_TEXCOORD4.w);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.xyw = u_xlat1.xxx * u_xlat4.xyz + vs_TEXCOORD4.xyw;
    u_xlat4.xy = u_xlat1.xy / u_xlat1.ww;
    u_xlat49 = texture(_CameraDepthTexture, u_xlat4.xy).x;
    u_xlat49 = _ZBufferParams.z * u_xlat49 + _ZBufferParams.w;
    u_xlat49 = float(1.0) / u_xlat49;
    u_xlat49 = u_xlat49 + (-vs_TEXCOORD4.w);
    u_xlat4.x = 0.100000001 / _OpacityByDepth;
    u_xlat16_3.xz = u_xlat16_2.xy;
    u_xlat16_3.y = 1.0;
    u_xlat16_20.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
    u_xlat16_20.x = inversesqrt(u_xlat16_20.x);
    u_xlat16_20.xyz = u_xlat16_3.xyz * u_xlat16_20.xxx;
#ifdef UNITY_ADRENO_ES3
    u_xlatb5 = !!(0.0>=_ES_MoonDirection.y);
#else
    u_xlatb5 = 0.0>=_ES_MoonDirection.y;
#endif
    u_xlat5.xyz = (bool(u_xlatb5)) ? _ES_SunDirection.xyz : _ES_MoonDirection.xyz;
    u_xlat6.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat53 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat54 = inversesqrt(u_xlat53);
    u_xlat7.xyz = vec3(u_xlat54) * u_xlat6.xyz;
    u_xlat5.xyz = u_xlat6.xyz * vec3(u_xlat54) + u_xlat5.xyz;
    u_xlat6.x = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat5.xyz = u_xlat5.xyz * u_xlat6.xxx;
    u_xlat20.x = dot(u_xlat16_20.xyz, u_xlat5.xyz);
    u_xlat36.x = _Gloss * 128.0;
    u_xlat20.x = max(u_xlat20.x, 9.99999975e-05);
    u_xlat20.x = log2(u_xlat20.x);
    u_xlat20.x = u_xlat20.x * u_xlat36.x;
    u_xlat20.x = exp2(u_xlat20.x);
    u_xlat20.x = u_xlat20.x * _SpecularIntensity;
    u_xlat20.x = max(u_xlat20.x, 0.0);
    u_xlat20.x = min(u_xlat20.x, 16.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb36 = !!(_ES_MoonDirection.y>=9.99999975e-05);
#else
    u_xlatb36 = _ES_MoonDirection.y>=9.99999975e-05;
#endif
    u_xlat36.x = u_xlatb36 ? 1.0 : float(0.0);
    u_xlat52 = _ES_MoonDirection.y + -1.0;
    u_xlat36.x = u_xlat36.x * u_xlat52 + 1.0;
    u_xlat4.w = float(1.0) / _ShoreTransparency;
    u_xlat5.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat5.x = inversesqrt(u_xlat5.x);
    u_xlat5.xyz = u_xlat5.xxx * vs_TEXCOORD6.xyz;
    u_xlat5.x = dot(u_xlat7.xyz, u_xlat5.xyz);
    u_xlat5.x = (-u_xlat5.x) + 1.0;
    u_xlat5.x = max(u_xlat5.x, 9.99999975e-05);
    u_xlat5.x = log2(u_xlat5.x);
    u_xlat21 = u_xlat5.x * _SpecularPower;
    u_xlat21 = exp2(u_xlat21);
    u_xlat6.xyz = u_xlat36.xxx * _LightColor0.xyz;
    u_xlat6.xyz = u_xlat20.xxx * u_xlat6.xyz;
    u_xlat20.x = u_xlat49 + -1.0;
    u_xlat20.x = u_xlat4.w * u_xlat20.x;
    u_xlat20.x = u_xlat20.x * 0.100000001;
#ifdef UNITY_ADRENO_ES3
    u_xlat20.x = min(max(u_xlat20.x, 0.0), 1.0);
#else
    u_xlat20.x = clamp(u_xlat20.x, 0.0, 1.0);
#endif
    u_xlat6.xyz = u_xlat20.xxx * u_xlat6.xyz;
    u_xlat4.xy = vec2(u_xlat49) * u_xlat4.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.xy = min(max(u_xlat4.xy, 0.0), 1.0);
#else
    u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);
#endif
    u_xlat20.x = max(u_xlat4.y, 9.99999975e-05);
    u_xlat20.x = log2(u_xlat20.x);
    u_xlat20.x = u_xlat20.x * _ShoreFade;
    u_xlat20.x = exp2(u_xlat20.x);
    u_xlat8.xyz = _ShallowColor.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat8.xyz = u_xlat20.xxx * u_xlat8.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat1.xy = u_xlat1.xy / vs_TEXCOORD4.ww;
    u_xlat10_9.xyz = texture(_SceneScaledBufferBeforTransParent, u_xlat1.xy).xyz;
    u_xlat10.xyz = u_xlat8.xyz * u_xlat10_9.xyz;
    u_xlat1.x = 0.100000001 / _DeepColorDepth;
    u_xlat1.x = u_xlat1.x * u_xlat49;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.x = max(u_xlat1.x, 9.99999975e-05);
    u_xlat1.x = log2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _DeepColorFade;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat11.xyz = (-u_xlat8.xyz) * u_xlat10_9.xyz + _DeepColor.xyz;
    u_xlat11.xyz = u_xlat1.xxx * u_xlat11.xyz + u_xlat10.xyz;
    u_xlat12.xyz = u_xlat16_2.xyz * _DistortionIntensity.xyz;
    u_xlat13.x = vs_TEXCOORD8.x;
    u_xlat13.y = vs_TEXCOORD9.x;
    u_xlat13.z = vs_TEXCOORD6.x;
    u_xlat13.x = dot(u_xlat13.xyz, u_xlat12.xyz);
    u_xlat14.x = vs_TEXCOORD8.y;
    u_xlat14.y = vs_TEXCOORD9.y;
    u_xlat14.z = vs_TEXCOORD6.y;
    u_xlat13.y = dot(u_xlat14.xyz, u_xlat12.xyz);
    u_xlat14.x = vs_TEXCOORD8.z;
    u_xlat14.y = vs_TEXCOORD9.z;
    u_xlat14.z = vs_TEXCOORD6.z;
    u_xlat13.z = dot(u_xlat14.xyz, u_xlat12.xyz);
    u_xlat1.x = dot(u_xlat13.xyz, u_xlat13.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat13.xyz = u_xlat1.xxx * u_xlat13.xyz;
    u_xlat1.x = dot((-u_xlat7.xyz), u_xlat13.xyz);
    u_xlat1.x = u_xlat1.x + u_xlat1.x;
    u_xlat7.xyz = u_xlat13.xyz * (-u_xlat1.xxx) + (-u_xlat7.xyz);
    u_xlat10_0 = textureLod(_ReflectionSkyCubeMap, u_xlat7.xyz, 0.0);
    u_xlat16_2.x = u_xlat10_0.w + -1.0;
    u_xlat16_2.x = _ReflectionSkyCubeMap_HDR.w * u_xlat16_2.x + 1.0;
    u_xlat16_2.x = log2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * _ReflectionSkyCubeMap_HDR.y;
    u_xlat16_2.x = exp2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * _ReflectionSkyCubeMap_HDR.x;
    u_xlat16_18.xyz = u_xlat10_0.xyz * u_xlat16_2.xxx;
    u_xlat1.xy = u_xlat12.xy * vec2(_SSRDistortion);
    u_xlat36.x = float(1.0) / _SSRDistortion_Shore;
    u_xlat36.x = u_xlat49 * u_xlat36.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat36.x = min(max(u_xlat36.x, 0.0), 1.0);
#else
    u_xlat36.x = clamp(u_xlat36.x, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat1.xy * u_xlat36.xx;
    u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD4.ww + vs_TEXCOORD4.xy;
    u_xlat1.xy = u_xlat1.xy / vs_TEXCOORD4.ww;
    u_xlat10_3 = texture(_SSRTexture, u_xlat1.xy).wxyz;
    u_xlat16_7.xyz = (-u_xlat16_2.xxx) * u_xlat10_0.xyz + u_xlat10_3.yzw;
    u_xlat7.xyz = u_xlat16_7.xyz * vec3(vec3(_SSRIntensity, _SSRIntensity, _SSRIntensity));
    u_xlat16_3.x = u_xlat10_3.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat7.xyz = u_xlat16_3.xxx * u_xlat7.xyz + u_xlat16_18.xyz;
    u_xlat1.x = u_xlat5.x * _FresnelPower;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _ReflectionIntensity;
    u_xlat17.x = float(1.0) / _ShoreReflectionFade;
    u_xlat17.x = u_xlat17.x * u_xlat49;
#ifdef UNITY_ADRENO_ES3
    u_xlat17.x = min(max(u_xlat17.x, 0.0), 1.0);
#else
    u_xlat17.x = clamp(u_xlat17.x, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat17.x * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat7.xyz = (-u_xlat11.xyz) + u_xlat7.xyz;
    u_xlat1.xyw = u_xlat1.xxx * u_xlat7.xyz + u_xlat11.xyz;
    u_xlat1.xyw = (-u_xlat8.xyz) * u_xlat10_9.xyz + u_xlat1.xyw;
    u_xlat1.xyw = u_xlat20.xxx * u_xlat1.xyw + u_xlat10.xyz;
    u_xlat20.x = (-vs_TEXCOORD5.y) * _WorldSpaceLightPos0.w + _WorldSpaceLightPos0.y;
    u_xlat16_2.x = max(u_xlat20.x, 0.0);
    u_xlat20.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowSplitSpheres[0].xyz);
    u_xlat7.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowSplitSpheres[1].xyz);
    u_xlat8.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowSplitSpheres[2].xyz);
    u_xlat9.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowSplitSpheres[3].xyz);
    u_xlat0.x = dot(u_xlat20.xyz, u_xlat20.xyz);
    u_xlat0.y = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat0.z = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat0.w = dot(u_xlat9.xyz, u_xlat9.xyz);
    u_xlatb0 = lessThan(u_xlat0, unity_ShadowSplitSqRadii);
    u_xlat0 = mix(vec4(0.0, 0.0, 0.0, 0.0), vec4(1.0, 1.0, 1.0, 1.0), vec4(u_xlatb0));
    u_xlat16_18.x = u_xlat0.y + u_xlat0.x;
    u_xlat16_18.y = u_xlat0.z + u_xlat16_18.x;
    u_xlat3.x = -0.0;
    u_xlat3.y = (-u_xlat0.x);
    u_xlat3.zw = (-u_xlat16_18.xy);
    u_xlat0 = u_xlat0 + u_xlat3;
    u_xlat0 = max(u_xlat0, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat16_18.x = dot(u_xlat0, vec4(1.0, 1.0, 1.0, 1.0));
#ifdef UNITY_ADRENO_ES3
    u_xlatb20 = !!(u_xlat16_18.x>=0.5);
#else
    u_xlatb20 = u_xlat16_18.x>=0.5;
#endif
    if(u_xlatb20){
        u_xlat20.x = dot(u_xlat0.yzw, vec3(1.0, 2.0, 3.0));
        u_xlat20.x = min(u_xlat20.x, 3.0);
        u_xlatu20 = uint(u_xlat20.x);
        u_xlat7.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowPos[int(u_xlatu20)].xyz);
        u_xlati20 = int(u_xlatu20) << 2;
        u_xlat8.xyz = u_xlat7.yyy * hlslcc_mtx4x4unity_WorldToShadow[(u_xlati20 + 1)].xyz;
        u_xlat7.xyw = hlslcc_mtx4x4unity_WorldToShadow[u_xlati20].xyz * u_xlat7.xxx + u_xlat8.xyz;
        u_xlat7.xyz = hlslcc_mtx4x4unity_WorldToShadow[(u_xlati20 + 2)].xyz * u_xlat7.zzz + u_xlat7.xyw;
        u_xlat20.xyz = u_xlat7.xyz + hlslcc_mtx4x4unity_WorldToShadow[(u_xlati20 + 3)].xyz;
        vec3 txVec0 = vec3(u_xlat20.xy,u_xlat20.z);
        u_xlat10_20 = textureLod(hlslcc_zcmp_CascadeShadowMapTexture, txVec0, 0.0);
        u_xlat16_36 = (-_LightShadowData.x) + 1.0;
        u_xlat20.x = u_xlat10_20 * u_xlat16_36 + _LightShadowData.x;
    } else {
        u_xlat20.x = 1.0;
    //ENDIF
    }
    u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;
    u_xlat20.xyz = u_xlat16_2.xyz * u_xlat20.xxx + vs_TEXCOORD1.xyz;
    u_xlat16_2.xyz = u_xlat20.xyz * vec3(0.300000012, 0.300000012, 0.300000012) + vec3(0.699999988, 0.699999988, 0.699999988);
    u_xlat20.x = sqrt(u_xlat53);
    u_xlat16_50 = u_xlat20.x + (-_DepthFoamCloseFadeOffset);
    u_xlat16_50 = u_xlat16_50 / _DepthFoamCloseFadeDistance;
    u_xlat16_15 = vs_COLOR0.x * _DepthFoamExtent;
    u_xlat33 = max(u_xlat33, 0.0);
    u_xlat33 = min(u_xlat16_15, u_xlat33);
    u_xlat16_15 = _DepthFoamExtent * vs_COLOR0.x + 9.99999975e-05;
    u_xlat33 = u_xlat33 / u_xlat16_15;
    u_xlat33 = (-u_xlat33) + 1.0;
    u_xlat36.xy = vec2(_Time.y * _DepthFoamMask_ST.z, _Time.y * _DepthFoamMask_ST.w);
    u_xlat36.xy = fract(u_xlat36.xy);
    u_xlat36.xy = _DepthFoamMask_ST.xy * vs_TEXCOORD5.xz + u_xlat36.xy;
    u_xlat10_36 = texture(_DepthFoamMask, u_xlat36.xy).x;
    u_xlat52 = vs_TEXCOORD5.z + vs_TEXCOORD5.x;
    u_xlat52 = u_xlat52 * _DepthFoamPhaseScale;
    u_xlat52 = _DepthFoamSpeed * _Time.y + u_xlat52;
    u_xlat5.x = (-u_xlat33) + 1.0;
    u_xlat16_15 = _DepthFoamSubdivision * u_xlat33 + u_xlat52;
    u_xlat16_15 = sin(u_xlat16_15);
    u_xlat16_15 = _DepthFoamWidth * u_xlat33 + u_xlat16_15;
    u_xlat16_52 = u_xlat10_36 * 2.0 + -1.0;
    u_xlat52 = u_xlat16_52 + u_xlat16_15;
#ifdef UNITY_ADRENO_ES3
    u_xlatb52 = !!(u_xlat52>=u_xlat5.x);
#else
    u_xlatb52 = u_xlat52>=u_xlat5.x;
#endif
    u_xlat52 = u_xlatb52 ? 1.0 : float(0.0);
    u_xlat36.x = u_xlat52 * u_xlat10_36;
    u_xlat16_15 = _DepthFoamDistance + 9.99999975e-05;
    u_xlat16_15 = u_xlat20.x / u_xlat16_15;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_15 = min(max(u_xlat16_15, 0.0), 1.0);
#else
    u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);
#endif
    u_xlat16_20.x = (-u_xlat16_15) + 1.0;
    u_xlat16_15 = vs_COLOR0.y * _DepthFoamColor.w;
    u_xlat16_50 = u_xlat16_50 * u_xlat16_15;
    u_xlat16_50 = u_xlat36.x * u_xlat16_50;
    u_xlat16_50 = u_xlat33 * u_xlat16_50;
    u_xlat16_50 = u_xlat16_20.x * u_xlat16_50;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_50 = min(max(u_xlat16_50, 0.0), 1.0);
#else
    u_xlat16_50 = clamp(u_xlat16_50, 0.0, 1.0);
#endif
    u_xlat16_2.xyz = _DepthFoamColor.xyz * u_xlat16_2.xyz + (-u_xlat1.xyw);
    u_xlat16_2.xyz = vec3(u_xlat16_50) * u_xlat16_2.xyz + u_xlat1.xyw;
    u_xlat1.xyz = u_xlat6.xyz * vec3(u_xlat21) + u_xlat16_2.xyz;
    u_xlat0.w = u_xlat4.x * vs_COLOR0.w;
    u_xlat4.xyz = vs_TEXCOORD5.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat5.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat5.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat5.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat49 = dot(u_xlat4.xyz, u_xlat5.xyz);
    u_xlat4.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat4.x = sqrt(u_xlat4.x);
    u_xlat20.y = u_xlat4.x * _HeigtFogParams.y;
    u_xlat52 = u_xlat4.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat52 = min(max(u_xlat52, 0.0), 1.0);
#else
    u_xlat52 = clamp(u_xlat52, 0.0, 1.0);
#endif
    u_xlat5.x = (-u_xlat52) + 2.0;
    u_xlat52 = u_xlat52 * u_xlat5.x;
    u_xlat5.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb49 = !!((-u_xlat49)>=u_xlat5.x);
#else
    u_xlatb49 = (-u_xlat49)>=u_xlat5.x;
#endif
    u_xlat5.x = u_xlat52 * _HeigtFogColDelta.w;
    u_xlat49 = (u_xlatb49) ? u_xlat5.x : u_xlat52;
    u_xlat49 = log2(u_xlat49);
    u_xlat49 = u_xlat49 * unity_FogColor.w;
    u_xlat49 = exp2(u_xlat49);
    u_xlat49 = min(u_xlat49, _HeigtFogColBase.w);
    u_xlat52 = vs_TEXCOORD5.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat52 = min(max(u_xlat52, 0.0), 1.0);
#else
    u_xlat52 = clamp(u_xlat52, 0.0, 1.0);
#endif
    u_xlat16_2.x = (-u_xlat52) + 2.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat52;
    u_xlat5.xyz = u_xlat16_2.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat52 = u_xlat4.x + (-_HeigtFogRamp.w);
    u_xlat52 = u_xlat52 * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat52 = min(max(u_xlat52, 0.0), 1.0);
#else
    u_xlat52 = clamp(u_xlat52, 0.0, 1.0);
#endif
    u_xlat6.xyz = (-u_xlat5.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat5.xyz = vec3(u_xlat52) * u_xlat6.xyz + u_xlat5.xyz;
    u_xlat52 = u_xlat4.y * _HeigtFogParams.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb53 = !!(0.00999999978<abs(u_xlat52));
#else
    u_xlatb53 = 0.00999999978<abs(u_xlat52);
#endif
    u_xlat6.x = u_xlat52 * -1.44269502;
    u_xlat6.x = exp2(u_xlat6.x);
    u_xlat6.x = (-u_xlat6.x) + 1.0;
    u_xlat52 = u_xlat6.x / u_xlat52;
    u_xlat16_2.x = (u_xlatb53) ? u_xlat52 : 1.0;
    u_xlat20.x = u_xlat4.y * _HeigtFogParams2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb52 = !!(0.00999999978<abs(u_xlat20.x));
#else
    u_xlatb52 = 0.00999999978<abs(u_xlat20.x);
#endif
    u_xlat53 = u_xlat20.x * -1.44269502;
    u_xlat53 = exp2(u_xlat53);
    u_xlat53 = (-u_xlat53) + 1.0;
    u_xlat20.x = u_xlat53 / u_xlat20.x;
    u_xlat16_2.y = (u_xlatb52) ? u_xlat20.x : 1.0;
    u_xlat20.x = u_xlat4.x * _HeigtFogParams2.y;
    u_xlat16_2.xy = u_xlat16_2.xy * u_xlat20.yx;
    u_xlat16_2.x = exp2((-u_xlat16_2.x));
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_18.x = exp2((-u_xlat16_2.y));
    u_xlat16_2.y = (-u_xlat16_18.x) + 1.0;
    u_xlat16_2.xy = max(u_xlat16_2.xy, vec2(0.0, 0.0));
    u_xlat16_2.x = u_xlat16_2.y + u_xlat16_2.x;
    u_xlat4.x = u_xlat4.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat16_18.x = (-u_xlat4.x) + 2.0;
    u_xlat16_18.x = u_xlat16_18.x * u_xlat4.x;
    u_xlat4.x = u_xlat16_18.x * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat4.x = u_xlat4.x + 1.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat4.x;
    u_xlat4.x = min(u_xlat16_2.x, _HeigtFogColBase.w);
    u_xlat20.x = vs_TEXCOORD5.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat20.x = min(max(u_xlat20.x, 0.0), 1.0);
#else
    u_xlat20.x = clamp(u_xlat20.x, 0.0, 1.0);
#endif
    u_xlat20.xyz = u_xlat20.xxx * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    u_xlat5.xyz = vec3(u_xlat49) * u_xlat5.xyz;
    u_xlat53 = (-u_xlat4.x) + 1.0;
    u_xlat5.xyz = vec3(u_xlat53) * u_xlat5.xyz;
    u_xlat4.xyz = u_xlat20.xyz * u_xlat4.xxx + u_xlat5.xyz;
    u_xlat49 = (-u_xlat49) + 1.0;
    u_xlat49 = u_xlat53 * u_xlat49;
    u_xlat0.xyz = vec3(u_xlat49) * u_xlat1.xyz + u_xlat4.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "MHY_SHADER_MIDDLE" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	mediump float _MHYZBias;
uniform 	vec4 hlslcc_mtx4x4_mhyJitteredVP[4];
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
out highp vec4 vs_TEXCOORD9;
out highp vec4 vs_TEXCOORD10;
float u_xlat0;
int u_xlati0;
vec4 u_xlat1;
bool u_xlatb1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
bool u_xlatb4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
mediump vec4 u_xlat16_6;
vec4 u_xlat7;
mediump vec3 u_xlat16_8;
vec3 u_xlat9;
float u_xlat10;
float u_xlat13;
bool u_xlatb13;
mediump float u_xlat16_14;
float u_xlat22;
float u_xlat28;
float u_xlat31;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat9.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4_mhyJitteredVP[1];
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[3] * u_xlat2.wwww + u_xlat1;
    u_xlat3.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    u_xlat3.xyw = u_xlat1.xyw;
    gl_Position = u_xlat3;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.xyw = u_xlat9.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat4.x = u_xlat1.y * _HeigtFogParams.x;
    u_xlat13 = u_xlat4.x * -1.44269502;
    u_xlat13 = exp2(u_xlat13);
    u_xlat13 = (-u_xlat13) + 1.0;
    u_xlat13 = u_xlat13 / u_xlat4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(0.00999999978<abs(u_xlat4.x));
#else
    u_xlatb4 = 0.00999999978<abs(u_xlat4.x);
#endif
    u_xlat16_5.x = (u_xlatb4) ? u_xlat13 : 1.0;
    u_xlat4.x = dot(u_xlat1.xyw, u_xlat1.xyw);
    u_xlat4.x = sqrt(u_xlat4.x);
    u_xlat13 = u_xlat4.x * _HeigtFogParams.y;
    u_xlat16_5.x = u_xlat13 * u_xlat16_5.x;
    u_xlat16_5.x = exp2((-u_xlat16_5.x));
    u_xlat16_5.x = (-u_xlat16_5.x) + 1.0;
    u_xlat13 = u_xlat1.y * _HeigtFogParams2.x;
    u_xlat22 = u_xlat13 * -1.44269502;
    u_xlat22 = exp2(u_xlat22);
    u_xlat22 = (-u_xlat22) + 1.0;
    u_xlat22 = u_xlat22 / u_xlat13;
#ifdef UNITY_ADRENO_ES3
    u_xlatb13 = !!(0.00999999978<abs(u_xlat13));
#else
    u_xlatb13 = 0.00999999978<abs(u_xlat13);
#endif
    u_xlat16_14 = (u_xlatb13) ? u_xlat22 : 1.0;
    u_xlat13 = u_xlat4.x * _HeigtFogParams2.y;
    u_xlat16_14 = u_xlat13 * u_xlat16_14;
    u_xlat16_14 = exp2((-u_xlat16_14));
    u_xlat16_5.y = (-u_xlat16_14) + 1.0;
    u_xlat16_5.xy = max(u_xlat16_5.xy, vec2(0.0, 0.0));
    u_xlat16_5.x = u_xlat16_5.y + u_xlat16_5.x;
    u_xlat13 = u_xlat4.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat13 = min(max(u_xlat13, 0.0), 1.0);
#else
    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
#endif
    u_xlat16_14 = (-u_xlat13) + 2.0;
    u_xlat16_14 = u_xlat13 * u_xlat16_14;
    u_xlat13 = u_xlat16_14 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat13 = u_xlat13 + 1.0;
    u_xlat16_5.x = u_xlat13 * u_xlat16_5.x;
    u_xlat13 = min(u_xlat16_5.x, _HeigtFogColBase.w);
    u_xlat22 = (-u_xlat13) + 1.0;
    u_xlat31 = _ProjectionParams.z * 0.999899983;
    u_xlat6.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat6.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat6.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat1.x = dot(u_xlat1.xyw, u_xlat6.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!((-u_xlat1.x)>=u_xlat31);
#else
    u_xlatb1 = (-u_xlat1.x)>=u_xlat31;
#endif
    u_xlat10 = u_xlat4.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat10 = min(max(u_xlat10, 0.0), 1.0);
#else
    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
#endif
    u_xlat28 = u_xlat4.x + (-_HeigtFogRamp.w);
    u_xlat28 = u_xlat28 * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat28 = min(max(u_xlat28, 0.0), 1.0);
#else
    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
#endif
    u_xlat4.x = (-u_xlat10) + 2.0;
    u_xlat10 = u_xlat10 * u_xlat4.x;
    u_xlat4.x = u_xlat10 * _HeigtFogColDelta.w;
    u_xlat1.x = (u_xlatb1) ? u_xlat4.x : u_xlat10;
    u_xlat1.x = log2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * unity_FogColor.w;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat1.x = min(u_xlat1.x, _HeigtFogColBase.w);
    u_xlat10 = u_xlat9.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat10 = min(max(u_xlat10, 0.0), 1.0);
#else
    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
#endif
    u_xlat16_5.x = (-u_xlat10) + 2.0;
    u_xlat16_5.x = u_xlat10 * u_xlat16_5.x;
    u_xlat6.xyz = u_xlat16_5.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat7.xyz = (-u_xlat6.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat6.xyz = vec3(u_xlat28) * u_xlat7.xyz + u_xlat6.xyz;
    u_xlat6.xyz = u_xlat1.xxx * u_xlat6.xyz;
    u_xlat1.x = (-u_xlat1.x) + 1.0;
    vs_TEXCOORD0.w = u_xlat22 * u_xlat1.x;
    u_xlat1.xyw = vec3(u_xlat22) * u_xlat6.xyz;
    u_xlat4.x = u_xlat9.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat4.xzw = u_xlat4.xxx * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    vs_TEXCOORD0.xyz = u_xlat4.xzw * vec3(u_xlat13) + u_xlat1.xyw;
    vs_TEXCOORD1.w = 1.0;
    u_xlat4.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat4.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat4.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat1.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
    u_xlat16_5.x = u_xlat4.y * u_xlat4.y;
    u_xlat16_5.x = u_xlat4.x * u_xlat4.x + (-u_xlat16_5.x);
    u_xlat16_6 = u_xlat4.yzzx * u_xlat4.xyzz;
    u_xlat16_8.x = dot(unity_SHBr, u_xlat16_6);
    u_xlat16_8.y = dot(unity_SHBg, u_xlat16_6);
    u_xlat16_8.z = dot(unity_SHBb, u_xlat16_6);
    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_8.xyz;
    u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat4.w = 1.0;
    u_xlat16_8.x = dot(unity_SHAr, u_xlat4);
    u_xlat16_8.y = dot(unity_SHAg, u_xlat4);
    u_xlat16_8.z = dot(unity_SHAb, u_xlat4);
    u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_8.xyz;
    vs_TEXCOORD1.xyz = u_xlat16_5.xyz;
    u_xlat1.x = u_xlat3.y * _ProjectionParams.x;
    u_xlat7.w = u_xlat1.x * 0.5;
    u_xlat7.xz = u_xlat3.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.z = u_xlat1.z;
    u_xlat3.xy = u_xlat7.zz + u_xlat7.xw;
    vs_TEXCOORD2 = u_xlat3;
    vs_TEXCOORD4.xyw = u_xlat3.xyw;
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD3.w = 0.0;
    u_xlat1.x = u_xlat2.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat2.x + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat2.z + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat2.w + u_xlat1.x;
    vs_TEXCOORD3.z = (-u_xlat1.x);
    vs_TEXCOORD5.w = 0.0;
    vs_TEXCOORD5.xyz = u_xlat9.xyz;
    u_xlat9.xyz = (-u_xlat9.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD6.w = 0.0;
    vs_TEXCOORD6.xyz = u_xlat4.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].www + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * in_POSITION0.yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.zzz + u_xlat1.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.www + u_xlat1.xyz;
    vs_TEXCOORD7.xyz = u_xlat1.xyz * vec3(-1.0, -1.0, 1.0);
    vs_TEXCOORD7.w = 0.0;
    u_xlat1.xyz = in_TANGENT0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat0 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0 = inversesqrt(u_xlat0);
    u_xlat1.xyz = vec3(u_xlat0) * u_xlat1.xyz;
    vs_TEXCOORD8.xyz = u_xlat1.xyz;
    vs_TEXCOORD8.w = 0.0;
    u_xlat2.xyz = u_xlat1.yzx * u_xlat4.zxy;
    u_xlat1.xyz = u_xlat4.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
    u_xlat0 = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD9.xyz = vec3(u_xlat0) * u_xlat1.xyz;
    vs_TEXCOORD9.w = 0.0;
    u_xlat0 = u_xlat9.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat9.x + u_xlat0;
    vs_TEXCOORD10.w = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat9.z + u_xlat0;
    vs_TEXCOORD10.xyz = u_xlat9.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowPos[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	mediump vec4 _DepthFoamMask_ST;
uniform 	mediump float _DepthFoamSpeed;
uniform 	mediump vec4 _DepthFoamColor;
uniform 	mediump float _DepthFoamExtent;
uniform 	mediump float _DepthFoamDistance;
uniform 	mediump float _DepthFoamSubdivision;
uniform 	mediump float _DepthFoamWidth;
uniform 	mediump float _DepthFoamPhaseScale;
uniform 	mediump float _DepthFoamCloseFadeOffset;
uniform 	mediump float _DepthFoamCloseFadeDistance;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _NormalMapScale;
uniform 	float _Normal01_U_Speed;
uniform 	float _Normal01_VSpeed;
uniform 	float _NormalMapBias;
uniform 	float _Normal02_U_Speed;
uniform 	float _Normal02_V_Speed;
uniform 	float _RefractionIntensity;
uniform 	float _OpacityByDepth;
uniform 	float _SpecularIntensity;
uniform 	vec3 _ES_MoonDirection;
uniform 	vec3 _ES_SunDirection;
uniform 	float _Gloss;
uniform 	float _ShoreTransparency;
uniform 	float _SpecularPower;
uniform 	vec4 _ShallowColor;
uniform 	float _ShoreFade;
uniform 	vec4 _DeepColor;
uniform 	float _DeepColorDepth;
uniform 	float _DeepColorFade;
uniform 	vec4 _DistortionIntensity;
uniform 	float _SSRDistortion;
uniform 	float _SSRDistortion_Shore;
uniform 	float _SSRIntensity;
uniform 	float _ReflectionIntensity;
uniform 	float _FresnelPower;
uniform 	float _ShoreReflectionFade;
uniform 	mediump float _ProjectUVScale;
uniform 	vec4 _ReflectionSkyCubeMap_HDR;
uniform lowp sampler2D _Normal01;
uniform lowp sampler2D _Normal02;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _SceneScaledBufferBeforTransParent;
uniform lowp samplerCube _ReflectionSkyCubeMap;
uniform lowp sampler2D _SSRTexture;
uniform lowp sampler2D _DepthFoamMask;
uniform lowp sampler2DShadow hlslcc_zcmp_CascadeShadowMapTexture;
uniform lowp sampler2D _CascadeShadowMapTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD8;
in highp vec4 vs_TEXCOORD9;
in highp vec4 vs_TEXCOORD10;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec4 u_xlatb0;
vec4 u_xlat1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
lowp vec4 u_xlat10_3;
vec4 u_xlat4;
vec3 u_xlat5;
bool u_xlatb5;
vec3 u_xlat6;
vec4 u_xlat7;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
vec3 u_xlat9;
lowp vec3 u_xlat10_9;
vec3 u_xlat10;
vec3 u_xlat11;
vec3 u_xlat12;
vec3 u_xlat13;
vec3 u_xlat14;
mediump float u_xlat16_15;
vec2 u_xlat17;
mediump vec3 u_xlat16_18;
vec3 u_xlat20;
mediump vec3 u_xlat16_20;
lowp float u_xlat10_20;
int u_xlati20;
uint u_xlatu20;
bool u_xlatb20;
float u_xlat21;
float u_xlat33;
vec2 u_xlat36;
mediump float u_xlat16_36;
lowp float u_xlat10_36;
bool u_xlatb36;
float u_xlat49;
bool u_xlatb49;
mediump float u_xlat16_50;
float u_xlat52;
mediump float u_xlat16_52;
bool u_xlatb52;
float u_xlat53;
bool u_xlatb53;
float u_xlat54;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD5.zx * vec2(vec2(_ProjectUVScale, _ProjectUVScale));
    u_xlat1.x = _Time.y * _Normal01_U_Speed + u_xlat0.y;
    u_xlat1.yz = _Time.yy * vec2(_Normal01_VSpeed, _Normal02_U_Speed) + u_xlat0.xy;
    u_xlat1.w = _Time.y * _Normal02_V_Speed + u_xlat0.x;
    u_xlat10_0.xyz = texture(_Normal01, u_xlat1.xy, _NormalMapBias).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_2.xy = u_xlat16_0.xy * vec2(_NormalMapScale);
    u_xlat10_1.xyz = texture(_Normal02, u_xlat1.zw, _NormalMapBias).xyz;
    u_xlat16_0.w = -1.0;
    u_xlat16_3.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.wwz;
    u_xlat16_3.xy = u_xlat16_3.xy * vec2(_NormalMapScale);
    u_xlat16_2.z = -1.0;
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
    u_xlat1.x = float(1.0) / vs_TEXCOORD4.w;
    u_xlat17.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat17.x = texture(_CameraDepthTexture, u_xlat17.xy).x;
    u_xlat17.x = _ZBufferParams.z * u_xlat17.x + _ZBufferParams.w;
    u_xlat17.x = float(1.0) / u_xlat17.x;
    u_xlat33 = vs_TEXCOORD10.w + 9.99999975e-05;
    u_xlat33 = (-u_xlat17.x) / u_xlat33;
    u_xlat33 = vs_TEXCOORD10.y * u_xlat33 + _WorldSpaceCameraPos.y;
    u_xlat33 = (-u_xlat33) + vs_TEXCOORD5.y;
    u_xlat4.xy = u_xlat16_2.xy * vec2(vec2(_RefractionIntensity, _RefractionIntensity));
    u_xlat1.x = u_xlat1.x * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.xw = u_xlat1.xx * u_xlat4.xy;
    u_xlat1.xw = u_xlat1.xw * vs_TEXCOORD4.ww;
    u_xlat17.x = u_xlat17.x + (-vs_TEXCOORD4.w);
#ifdef UNITY_ADRENO_ES3
    u_xlat17.x = min(max(u_xlat17.x, 0.0), 1.0);
#else
    u_xlat17.x = clamp(u_xlat17.x, 0.0, 1.0);
#endif
    u_xlat4.xy = u_xlat17.xx * u_xlat1.xw;
    u_xlat4.z = 0.0;
    u_xlat1.xyw = u_xlat4.xyz + vs_TEXCOORD4.xyw;
    u_xlat1.xy = u_xlat1.xy / u_xlat1.ww;
    u_xlat1.x = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat1.x = _ZBufferParams.z * u_xlat1.x + _ZBufferParams.w;
    u_xlat1.x = float(1.0) / u_xlat1.x;
    u_xlat1.x = u_xlat1.x + (-vs_TEXCOORD4.w);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.xyw = u_xlat1.xxx * u_xlat4.xyz + vs_TEXCOORD4.xyw;
    u_xlat4.xy = u_xlat1.xy / u_xlat1.ww;
    u_xlat49 = texture(_CameraDepthTexture, u_xlat4.xy).x;
    u_xlat49 = _ZBufferParams.z * u_xlat49 + _ZBufferParams.w;
    u_xlat49 = float(1.0) / u_xlat49;
    u_xlat49 = u_xlat49 + (-vs_TEXCOORD4.w);
    u_xlat4.x = 0.100000001 / _OpacityByDepth;
    u_xlat16_3.xz = u_xlat16_2.xy;
    u_xlat16_3.y = 1.0;
    u_xlat16_20.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
    u_xlat16_20.x = inversesqrt(u_xlat16_20.x);
    u_xlat16_20.xyz = u_xlat16_3.xyz * u_xlat16_20.xxx;
#ifdef UNITY_ADRENO_ES3
    u_xlatb5 = !!(0.0>=_ES_MoonDirection.y);
#else
    u_xlatb5 = 0.0>=_ES_MoonDirection.y;
#endif
    u_xlat5.xyz = (bool(u_xlatb5)) ? _ES_SunDirection.xyz : _ES_MoonDirection.xyz;
    u_xlat6.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat53 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat54 = inversesqrt(u_xlat53);
    u_xlat7.xyz = vec3(u_xlat54) * u_xlat6.xyz;
    u_xlat5.xyz = u_xlat6.xyz * vec3(u_xlat54) + u_xlat5.xyz;
    u_xlat6.x = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat5.xyz = u_xlat5.xyz * u_xlat6.xxx;
    u_xlat20.x = dot(u_xlat16_20.xyz, u_xlat5.xyz);
    u_xlat36.x = _Gloss * 128.0;
    u_xlat20.x = max(u_xlat20.x, 9.99999975e-05);
    u_xlat20.x = log2(u_xlat20.x);
    u_xlat20.x = u_xlat20.x * u_xlat36.x;
    u_xlat20.x = exp2(u_xlat20.x);
    u_xlat20.x = u_xlat20.x * _SpecularIntensity;
    u_xlat20.x = max(u_xlat20.x, 0.0);
    u_xlat20.x = min(u_xlat20.x, 16.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb36 = !!(_ES_MoonDirection.y>=9.99999975e-05);
#else
    u_xlatb36 = _ES_MoonDirection.y>=9.99999975e-05;
#endif
    u_xlat36.x = u_xlatb36 ? 1.0 : float(0.0);
    u_xlat52 = _ES_MoonDirection.y + -1.0;
    u_xlat36.x = u_xlat36.x * u_xlat52 + 1.0;
    u_xlat4.w = float(1.0) / _ShoreTransparency;
    u_xlat5.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat5.x = inversesqrt(u_xlat5.x);
    u_xlat5.xyz = u_xlat5.xxx * vs_TEXCOORD6.xyz;
    u_xlat5.x = dot(u_xlat7.xyz, u_xlat5.xyz);
    u_xlat5.x = (-u_xlat5.x) + 1.0;
    u_xlat5.x = max(u_xlat5.x, 9.99999975e-05);
    u_xlat5.x = log2(u_xlat5.x);
    u_xlat21 = u_xlat5.x * _SpecularPower;
    u_xlat21 = exp2(u_xlat21);
    u_xlat6.xyz = u_xlat36.xxx * _LightColor0.xyz;
    u_xlat6.xyz = u_xlat20.xxx * u_xlat6.xyz;
    u_xlat20.x = u_xlat49 + -1.0;
    u_xlat20.x = u_xlat4.w * u_xlat20.x;
    u_xlat20.x = u_xlat20.x * 0.100000001;
#ifdef UNITY_ADRENO_ES3
    u_xlat20.x = min(max(u_xlat20.x, 0.0), 1.0);
#else
    u_xlat20.x = clamp(u_xlat20.x, 0.0, 1.0);
#endif
    u_xlat6.xyz = u_xlat20.xxx * u_xlat6.xyz;
    u_xlat4.xy = vec2(u_xlat49) * u_xlat4.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.xy = min(max(u_xlat4.xy, 0.0), 1.0);
#else
    u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);
#endif
    u_xlat20.x = max(u_xlat4.y, 9.99999975e-05);
    u_xlat20.x = log2(u_xlat20.x);
    u_xlat20.x = u_xlat20.x * _ShoreFade;
    u_xlat20.x = exp2(u_xlat20.x);
    u_xlat8.xyz = _ShallowColor.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat8.xyz = u_xlat20.xxx * u_xlat8.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat1.xy = u_xlat1.xy / vs_TEXCOORD4.ww;
    u_xlat10_9.xyz = texture(_SceneScaledBufferBeforTransParent, u_xlat1.xy).xyz;
    u_xlat10.xyz = u_xlat8.xyz * u_xlat10_9.xyz;
    u_xlat1.x = 0.100000001 / _DeepColorDepth;
    u_xlat1.x = u_xlat1.x * u_xlat49;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.x = max(u_xlat1.x, 9.99999975e-05);
    u_xlat1.x = log2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _DeepColorFade;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat11.xyz = (-u_xlat8.xyz) * u_xlat10_9.xyz + _DeepColor.xyz;
    u_xlat11.xyz = u_xlat1.xxx * u_xlat11.xyz + u_xlat10.xyz;
    u_xlat12.xyz = u_xlat16_2.xyz * _DistortionIntensity.xyz;
    u_xlat13.x = vs_TEXCOORD8.x;
    u_xlat13.y = vs_TEXCOORD9.x;
    u_xlat13.z = vs_TEXCOORD6.x;
    u_xlat13.x = dot(u_xlat13.xyz, u_xlat12.xyz);
    u_xlat14.x = vs_TEXCOORD8.y;
    u_xlat14.y = vs_TEXCOORD9.y;
    u_xlat14.z = vs_TEXCOORD6.y;
    u_xlat13.y = dot(u_xlat14.xyz, u_xlat12.xyz);
    u_xlat14.x = vs_TEXCOORD8.z;
    u_xlat14.y = vs_TEXCOORD9.z;
    u_xlat14.z = vs_TEXCOORD6.z;
    u_xlat13.z = dot(u_xlat14.xyz, u_xlat12.xyz);
    u_xlat1.x = dot(u_xlat13.xyz, u_xlat13.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat13.xyz = u_xlat1.xxx * u_xlat13.xyz;
    u_xlat1.x = dot((-u_xlat7.xyz), u_xlat13.xyz);
    u_xlat1.x = u_xlat1.x + u_xlat1.x;
    u_xlat7.xyz = u_xlat13.xyz * (-u_xlat1.xxx) + (-u_xlat7.xyz);
    u_xlat10_0 = textureLod(_ReflectionSkyCubeMap, u_xlat7.xyz, 0.0);
    u_xlat16_2.x = u_xlat10_0.w + -1.0;
    u_xlat16_2.x = _ReflectionSkyCubeMap_HDR.w * u_xlat16_2.x + 1.0;
    u_xlat16_2.x = log2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * _ReflectionSkyCubeMap_HDR.y;
    u_xlat16_2.x = exp2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * _ReflectionSkyCubeMap_HDR.x;
    u_xlat16_18.xyz = u_xlat10_0.xyz * u_xlat16_2.xxx;
    u_xlat1.xy = u_xlat12.xy * vec2(_SSRDistortion);
    u_xlat36.x = float(1.0) / _SSRDistortion_Shore;
    u_xlat36.x = u_xlat49 * u_xlat36.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat36.x = min(max(u_xlat36.x, 0.0), 1.0);
#else
    u_xlat36.x = clamp(u_xlat36.x, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat1.xy * u_xlat36.xx;
    u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD4.ww + vs_TEXCOORD4.xy;
    u_xlat1.xy = u_xlat1.xy / vs_TEXCOORD4.ww;
    u_xlat10_3 = texture(_SSRTexture, u_xlat1.xy).wxyz;
    u_xlat16_7.xyz = (-u_xlat16_2.xxx) * u_xlat10_0.xyz + u_xlat10_3.yzw;
    u_xlat7.xyz = u_xlat16_7.xyz * vec3(vec3(_SSRIntensity, _SSRIntensity, _SSRIntensity));
    u_xlat16_3.x = u_xlat10_3.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat7.xyz = u_xlat16_3.xxx * u_xlat7.xyz + u_xlat16_18.xyz;
    u_xlat1.x = u_xlat5.x * _FresnelPower;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _ReflectionIntensity;
    u_xlat17.x = float(1.0) / _ShoreReflectionFade;
    u_xlat17.x = u_xlat17.x * u_xlat49;
#ifdef UNITY_ADRENO_ES3
    u_xlat17.x = min(max(u_xlat17.x, 0.0), 1.0);
#else
    u_xlat17.x = clamp(u_xlat17.x, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat17.x * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat7.xyz = (-u_xlat11.xyz) + u_xlat7.xyz;
    u_xlat1.xyw = u_xlat1.xxx * u_xlat7.xyz + u_xlat11.xyz;
    u_xlat1.xyw = (-u_xlat8.xyz) * u_xlat10_9.xyz + u_xlat1.xyw;
    u_xlat1.xyw = u_xlat20.xxx * u_xlat1.xyw + u_xlat10.xyz;
    u_xlat20.x = (-vs_TEXCOORD5.y) * _WorldSpaceLightPos0.w + _WorldSpaceLightPos0.y;
    u_xlat16_2.x = max(u_xlat20.x, 0.0);
    u_xlat20.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowSplitSpheres[0].xyz);
    u_xlat7.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowSplitSpheres[1].xyz);
    u_xlat8.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowSplitSpheres[2].xyz);
    u_xlat9.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowSplitSpheres[3].xyz);
    u_xlat0.x = dot(u_xlat20.xyz, u_xlat20.xyz);
    u_xlat0.y = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat0.z = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat0.w = dot(u_xlat9.xyz, u_xlat9.xyz);
    u_xlatb0 = lessThan(u_xlat0, unity_ShadowSplitSqRadii);
    u_xlat0 = mix(vec4(0.0, 0.0, 0.0, 0.0), vec4(1.0, 1.0, 1.0, 1.0), vec4(u_xlatb0));
    u_xlat16_18.x = u_xlat0.y + u_xlat0.x;
    u_xlat16_18.y = u_xlat0.z + u_xlat16_18.x;
    u_xlat3.x = -0.0;
    u_xlat3.y = (-u_xlat0.x);
    u_xlat3.zw = (-u_xlat16_18.xy);
    u_xlat0 = u_xlat0 + u_xlat3;
    u_xlat0 = max(u_xlat0, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat16_18.x = dot(u_xlat0, vec4(1.0, 1.0, 1.0, 1.0));
#ifdef UNITY_ADRENO_ES3
    u_xlatb20 = !!(u_xlat16_18.x>=0.5);
#else
    u_xlatb20 = u_xlat16_18.x>=0.5;
#endif
    if(u_xlatb20){
        u_xlat20.x = dot(u_xlat0.yzw, vec3(1.0, 2.0, 3.0));
        u_xlat20.x = min(u_xlat20.x, 3.0);
        u_xlatu20 = uint(u_xlat20.x);
        u_xlat7.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowPos[int(u_xlatu20)].xyz);
        u_xlati20 = int(u_xlatu20) << 2;
        u_xlat8.xyz = u_xlat7.yyy * hlslcc_mtx4x4unity_WorldToShadow[(u_xlati20 + 1)].xyz;
        u_xlat7.xyw = hlslcc_mtx4x4unity_WorldToShadow[u_xlati20].xyz * u_xlat7.xxx + u_xlat8.xyz;
        u_xlat7.xyz = hlslcc_mtx4x4unity_WorldToShadow[(u_xlati20 + 2)].xyz * u_xlat7.zzz + u_xlat7.xyw;
        u_xlat20.xyz = u_xlat7.xyz + hlslcc_mtx4x4unity_WorldToShadow[(u_xlati20 + 3)].xyz;
        vec3 txVec0 = vec3(u_xlat20.xy,u_xlat20.z);
        u_xlat10_20 = textureLod(hlslcc_zcmp_CascadeShadowMapTexture, txVec0, 0.0);
        u_xlat16_36 = (-_LightShadowData.x) + 1.0;
        u_xlat20.x = u_xlat10_20 * u_xlat16_36 + _LightShadowData.x;
    } else {
        u_xlat20.x = 1.0;
    //ENDIF
    }
    u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;
    u_xlat20.xyz = u_xlat16_2.xyz * u_xlat20.xxx + vs_TEXCOORD1.xyz;
    u_xlat16_2.xyz = u_xlat20.xyz * vec3(0.300000012, 0.300000012, 0.300000012) + vec3(0.699999988, 0.699999988, 0.699999988);
    u_xlat20.x = sqrt(u_xlat53);
    u_xlat16_50 = u_xlat20.x + (-_DepthFoamCloseFadeOffset);
    u_xlat16_50 = u_xlat16_50 / _DepthFoamCloseFadeDistance;
    u_xlat16_15 = vs_COLOR0.x * _DepthFoamExtent;
    u_xlat33 = max(u_xlat33, 0.0);
    u_xlat33 = min(u_xlat16_15, u_xlat33);
    u_xlat16_15 = _DepthFoamExtent * vs_COLOR0.x + 9.99999975e-05;
    u_xlat33 = u_xlat33 / u_xlat16_15;
    u_xlat33 = (-u_xlat33) + 1.0;
    u_xlat36.xy = vec2(_Time.y * _DepthFoamMask_ST.z, _Time.y * _DepthFoamMask_ST.w);
    u_xlat36.xy = fract(u_xlat36.xy);
    u_xlat36.xy = _DepthFoamMask_ST.xy * vs_TEXCOORD5.xz + u_xlat36.xy;
    u_xlat10_36 = texture(_DepthFoamMask, u_xlat36.xy).x;
    u_xlat52 = vs_TEXCOORD5.z + vs_TEXCOORD5.x;
    u_xlat52 = u_xlat52 * _DepthFoamPhaseScale;
    u_xlat52 = _DepthFoamSpeed * _Time.y + u_xlat52;
    u_xlat5.x = (-u_xlat33) + 1.0;
    u_xlat16_15 = _DepthFoamSubdivision * u_xlat33 + u_xlat52;
    u_xlat16_15 = sin(u_xlat16_15);
    u_xlat16_15 = _DepthFoamWidth * u_xlat33 + u_xlat16_15;
    u_xlat16_52 = u_xlat10_36 * 2.0 + -1.0;
    u_xlat52 = u_xlat16_52 + u_xlat16_15;
#ifdef UNITY_ADRENO_ES3
    u_xlatb52 = !!(u_xlat52>=u_xlat5.x);
#else
    u_xlatb52 = u_xlat52>=u_xlat5.x;
#endif
    u_xlat52 = u_xlatb52 ? 1.0 : float(0.0);
    u_xlat36.x = u_xlat52 * u_xlat10_36;
    u_xlat16_15 = _DepthFoamDistance + 9.99999975e-05;
    u_xlat16_15 = u_xlat20.x / u_xlat16_15;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_15 = min(max(u_xlat16_15, 0.0), 1.0);
#else
    u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);
#endif
    u_xlat16_20.x = (-u_xlat16_15) + 1.0;
    u_xlat16_15 = vs_COLOR0.y * _DepthFoamColor.w;
    u_xlat16_50 = u_xlat16_50 * u_xlat16_15;
    u_xlat16_50 = u_xlat36.x * u_xlat16_50;
    u_xlat16_50 = u_xlat33 * u_xlat16_50;
    u_xlat16_50 = u_xlat16_20.x * u_xlat16_50;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_50 = min(max(u_xlat16_50, 0.0), 1.0);
#else
    u_xlat16_50 = clamp(u_xlat16_50, 0.0, 1.0);
#endif
    u_xlat16_2.xyz = _DepthFoamColor.xyz * u_xlat16_2.xyz + (-u_xlat1.xyw);
    u_xlat16_2.xyz = vec3(u_xlat16_50) * u_xlat16_2.xyz + u_xlat1.xyw;
    u_xlat1.xyz = u_xlat6.xyz * vec3(u_xlat21) + u_xlat16_2.xyz;
    u_xlat0.w = u_xlat4.x * vs_COLOR0.w;
    u_xlat4.xyz = vs_TEXCOORD5.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat5.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat5.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat5.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat49 = dot(u_xlat4.xyz, u_xlat5.xyz);
    u_xlat4.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat4.x = sqrt(u_xlat4.x);
    u_xlat20.y = u_xlat4.x * _HeigtFogParams.y;
    u_xlat52 = u_xlat4.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat52 = min(max(u_xlat52, 0.0), 1.0);
#else
    u_xlat52 = clamp(u_xlat52, 0.0, 1.0);
#endif
    u_xlat5.x = (-u_xlat52) + 2.0;
    u_xlat52 = u_xlat52 * u_xlat5.x;
    u_xlat5.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb49 = !!((-u_xlat49)>=u_xlat5.x);
#else
    u_xlatb49 = (-u_xlat49)>=u_xlat5.x;
#endif
    u_xlat5.x = u_xlat52 * _HeigtFogColDelta.w;
    u_xlat49 = (u_xlatb49) ? u_xlat5.x : u_xlat52;
    u_xlat49 = log2(u_xlat49);
    u_xlat49 = u_xlat49 * unity_FogColor.w;
    u_xlat49 = exp2(u_xlat49);
    u_xlat49 = min(u_xlat49, _HeigtFogColBase.w);
    u_xlat52 = vs_TEXCOORD5.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat52 = min(max(u_xlat52, 0.0), 1.0);
#else
    u_xlat52 = clamp(u_xlat52, 0.0, 1.0);
#endif
    u_xlat16_2.x = (-u_xlat52) + 2.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat52;
    u_xlat5.xyz = u_xlat16_2.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat52 = u_xlat4.x + (-_HeigtFogRamp.w);
    u_xlat52 = u_xlat52 * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat52 = min(max(u_xlat52, 0.0), 1.0);
#else
    u_xlat52 = clamp(u_xlat52, 0.0, 1.0);
#endif
    u_xlat6.xyz = (-u_xlat5.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat5.xyz = vec3(u_xlat52) * u_xlat6.xyz + u_xlat5.xyz;
    u_xlat52 = u_xlat4.y * _HeigtFogParams.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb53 = !!(0.00999999978<abs(u_xlat52));
#else
    u_xlatb53 = 0.00999999978<abs(u_xlat52);
#endif
    u_xlat6.x = u_xlat52 * -1.44269502;
    u_xlat6.x = exp2(u_xlat6.x);
    u_xlat6.x = (-u_xlat6.x) + 1.0;
    u_xlat52 = u_xlat6.x / u_xlat52;
    u_xlat16_2.x = (u_xlatb53) ? u_xlat52 : 1.0;
    u_xlat20.x = u_xlat4.y * _HeigtFogParams2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb52 = !!(0.00999999978<abs(u_xlat20.x));
#else
    u_xlatb52 = 0.00999999978<abs(u_xlat20.x);
#endif
    u_xlat53 = u_xlat20.x * -1.44269502;
    u_xlat53 = exp2(u_xlat53);
    u_xlat53 = (-u_xlat53) + 1.0;
    u_xlat20.x = u_xlat53 / u_xlat20.x;
    u_xlat16_2.y = (u_xlatb52) ? u_xlat20.x : 1.0;
    u_xlat20.x = u_xlat4.x * _HeigtFogParams2.y;
    u_xlat16_2.xy = u_xlat16_2.xy * u_xlat20.yx;
    u_xlat16_2.x = exp2((-u_xlat16_2.x));
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_18.x = exp2((-u_xlat16_2.y));
    u_xlat16_2.y = (-u_xlat16_18.x) + 1.0;
    u_xlat16_2.xy = max(u_xlat16_2.xy, vec2(0.0, 0.0));
    u_xlat16_2.x = u_xlat16_2.y + u_xlat16_2.x;
    u_xlat4.x = u_xlat4.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat16_18.x = (-u_xlat4.x) + 2.0;
    u_xlat16_18.x = u_xlat16_18.x * u_xlat4.x;
    u_xlat4.x = u_xlat16_18.x * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat4.x = u_xlat4.x + 1.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat4.x;
    u_xlat4.x = min(u_xlat16_2.x, _HeigtFogColBase.w);
    u_xlat20.x = vs_TEXCOORD5.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat20.x = min(max(u_xlat20.x, 0.0), 1.0);
#else
    u_xlat20.x = clamp(u_xlat20.x, 0.0, 1.0);
#endif
    u_xlat20.xyz = u_xlat20.xxx * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    u_xlat5.xyz = vec3(u_xlat49) * u_xlat5.xyz;
    u_xlat53 = (-u_xlat4.x) + 1.0;
    u_xlat5.xyz = vec3(u_xlat53) * u_xlat5.xyz;
    u_xlat4.xyz = u_xlat20.xyz * u_xlat4.xxx + u_xlat5.xyz;
    u_xlat49 = (-u_xlat49) + 1.0;
    u_xlat49 = u_xlat53 * u_xlat49;
    u_xlat0.xyz = vec3(u_xlat49) * u_xlat1.xyz + u_xlat4.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "MHY_SHADER_LOW" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	mediump float _MHYZBias;
uniform 	vec4 hlslcc_mtx4x4_mhyJitteredVP[4];
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
out highp vec4 vs_TEXCOORD9;
out highp vec4 vs_TEXCOORD10;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
vec4 u_xlat4;
bool u_xlatb4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
mediump vec4 u_xlat16_6;
vec4 u_xlat7;
mediump vec3 u_xlat16_8;
float u_xlat11;
vec3 u_xlat13;
mediump float u_xlat16_14;
float u_xlat27;
bool u_xlatb27;
float u_xlat29;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4_mhyJitteredVP[1];
    u_xlat2 = hlslcc_mtx4x4_mhyJitteredVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4_mhyJitteredVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4_mhyJitteredVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat3.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    u_xlat3.xyw = u_xlat2.xyw;
    gl_Position = u_xlat3;
    vs_COLOR0 = in_COLOR0;
    u_xlat2.xyw = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat27 = u_xlat2.y * _HeigtFogParams.x;
    u_xlat4.x = u_xlat27 * -1.44269502;
    u_xlat4.x = exp2(u_xlat4.x);
    u_xlat4.x = (-u_xlat4.x) + 1.0;
    u_xlat4.x = u_xlat4.x / u_xlat27;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(0.00999999978<abs(u_xlat27));
#else
    u_xlatb27 = 0.00999999978<abs(u_xlat27);
#endif
    u_xlat16_5.x = (u_xlatb27) ? u_xlat4.x : 1.0;
    u_xlat27 = dot(u_xlat2.xyw, u_xlat2.xyw);
    u_xlat27 = sqrt(u_xlat27);
    u_xlat4.x = u_xlat27 * _HeigtFogParams.y;
    u_xlat16_5.x = u_xlat4.x * u_xlat16_5.x;
    u_xlat16_5.x = exp2((-u_xlat16_5.x));
    u_xlat16_5.x = (-u_xlat16_5.x) + 1.0;
    u_xlat4.x = u_xlat2.y * _HeigtFogParams2.x;
    u_xlat13.x = u_xlat4.x * -1.44269502;
    u_xlat13.x = exp2(u_xlat13.x);
    u_xlat13.x = (-u_xlat13.x) + 1.0;
    u_xlat13.x = u_xlat13.x / u_xlat4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(0.00999999978<abs(u_xlat4.x));
#else
    u_xlatb4 = 0.00999999978<abs(u_xlat4.x);
#endif
    u_xlat16_14 = (u_xlatb4) ? u_xlat13.x : 1.0;
    u_xlat4.x = u_xlat27 * _HeigtFogParams2.y;
    u_xlat16_14 = u_xlat4.x * u_xlat16_14;
    u_xlat16_14 = exp2((-u_xlat16_14));
    u_xlat16_5.y = (-u_xlat16_14) + 1.0;
    u_xlat16_5.xy = max(u_xlat16_5.xy, vec2(0.0, 0.0));
    u_xlat16_5.x = u_xlat16_5.y + u_xlat16_5.x;
    u_xlat4.x = u_xlat27 * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat16_14 = (-u_xlat4.x) + 2.0;
    u_xlat16_14 = u_xlat4.x * u_xlat16_14;
    u_xlat4.x = u_xlat16_14 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat4.x = u_xlat4.x + 1.0;
    u_xlat16_5.x = u_xlat4.x * u_xlat16_5.x;
    u_xlat4.x = min(u_xlat16_5.x, _HeigtFogColBase.w);
    u_xlat13.x = (-u_xlat4.x) + 1.0;
    u_xlat6.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat6.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat6.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat2.x = dot(u_xlat2.xyw, u_xlat6.xyz);
    u_xlat11 = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!((-u_xlat2.x)>=u_xlat11);
#else
    u_xlatb2 = (-u_xlat2.x)>=u_xlat11;
#endif
    u_xlat11 = u_xlat27 * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat11 = min(max(u_xlat11, 0.0), 1.0);
#else
    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
#endif
    u_xlat27 = u_xlat27 + (-_HeigtFogRamp.w);
    u_xlat27 = u_xlat27 * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
    u_xlat29 = (-u_xlat11) + 2.0;
    u_xlat11 = u_xlat29 * u_xlat11;
    u_xlat29 = u_xlat11 * _HeigtFogColDelta.w;
    u_xlat2.x = (u_xlatb2) ? u_xlat29 : u_xlat11;
    u_xlat2.x = log2(u_xlat2.x);
    u_xlat2.x = u_xlat2.x * unity_FogColor.w;
    u_xlat2.x = exp2(u_xlat2.x);
    u_xlat2.x = min(u_xlat2.x, _HeigtFogColBase.w);
    u_xlat11 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat11 = min(max(u_xlat11, 0.0), 1.0);
#else
    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
#endif
    u_xlat16_5.x = (-u_xlat11) + 2.0;
    u_xlat16_5.x = u_xlat11 * u_xlat16_5.x;
    u_xlat6.xyz = u_xlat16_5.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat7.xyz = (-u_xlat6.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat6.xyz = vec3(u_xlat27) * u_xlat7.xyz + u_xlat6.xyz;
    u_xlat6.xyz = u_xlat2.xxx * u_xlat6.xyz;
    u_xlat27 = (-u_xlat2.x) + 1.0;
    vs_TEXCOORD0.w = u_xlat13.x * u_xlat27;
    u_xlat2.xyw = u_xlat13.xxx * u_xlat6.xyz;
    u_xlat27 = u_xlat0.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
    u_xlat13.xyz = vec3(u_xlat27) * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    vs_TEXCOORD0.xyz = u_xlat13.xyz * u_xlat4.xxx + u_xlat2.xyw;
    u_xlat4.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat4.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat4.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat27 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat4.xyz = vec3(u_xlat27) * u_xlat4.xyz;
    u_xlat16_5.x = u_xlat4.y * u_xlat4.y;
    u_xlat16_5.x = u_xlat4.x * u_xlat4.x + (-u_xlat16_5.x);
    u_xlat16_6 = u_xlat4.yzzx * u_xlat4.xyzz;
    u_xlat16_8.x = dot(unity_SHBr, u_xlat16_6);
    u_xlat16_8.y = dot(unity_SHBg, u_xlat16_6);
    u_xlat16_8.z = dot(unity_SHBb, u_xlat16_6);
    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_8.xyz;
    u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat4.w = 1.0;
    u_xlat16_8.x = dot(unity_SHAr, u_xlat4);
    u_xlat16_8.y = dot(unity_SHAg, u_xlat4);
    u_xlat16_8.z = dot(unity_SHAb, u_xlat4);
    u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_8.xyz;
    vs_TEXCOORD1.xyz = u_xlat16_5.xyz;
    vs_TEXCOORD1.w = 1.0;
    u_xlat27 = u_xlat3.y * _ProjectionParams.x;
    u_xlat7.w = u_xlat27 * 0.5;
    u_xlat7.xz = u_xlat3.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.z = u_xlat2.z;
    u_xlat3.xy = u_xlat7.zz + u_xlat7.xw;
    vs_TEXCOORD2 = u_xlat3;
    vs_TEXCOORD4.xyw = u_xlat3.xyw;
    u_xlat27 = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat27 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat27;
    u_xlat27 = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat27;
    u_xlat27 = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat27;
    vs_TEXCOORD3.z = (-u_xlat27);
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD3.w = 0.0;
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD5.w = 0.0;
    vs_TEXCOORD6.xyz = u_xlat4.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[1].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].www + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * in_POSITION0.yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.zzz + u_xlat1.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.www + u_xlat1.xyz;
    vs_TEXCOORD7.xyz = u_xlat1.xyz * vec3(-1.0, -1.0, 1.0);
    vs_TEXCOORD7.w = 0.0;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat27 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat1.xyz = vec3(u_xlat27) * u_xlat1.xyz;
    vs_TEXCOORD8.xyz = u_xlat1.xyz;
    vs_TEXCOORD8.w = 0.0;
    u_xlat2.xyz = u_xlat1.yzx * u_xlat4.zxy;
    u_xlat1.xyz = u_xlat4.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
    u_xlat27 = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD9.xyz = vec3(u_xlat27) * u_xlat1.xyz;
    vs_TEXCOORD9.w = 0.0;
    u_xlat27 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat27 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat27;
    vs_TEXCOORD10.w = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat27;
    vs_TEXCOORD10.xyz = u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowPos[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	mediump vec4 _DepthFoamMask_ST;
uniform 	mediump float _DepthFoamSpeed;
uniform 	mediump vec4 _DepthFoamColor;
uniform 	mediump float _DepthFoamExtent;
uniform 	mediump float _DepthFoamDistance;
uniform 	mediump float _DepthFoamSubdivision;
uniform 	mediump float _DepthFoamWidth;
uniform 	mediump float _DepthFoamPhaseScale;
uniform 	mediump float _DepthFoamCloseFadeOffset;
uniform 	mediump float _DepthFoamCloseFadeDistance;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _NormalMapScale;
uniform 	float _Normal01_U_Speed;
uniform 	float _Normal01_VSpeed;
uniform 	float _NormalMapBias;
uniform 	float _Normal02_U_Speed;
uniform 	float _Normal02_V_Speed;
uniform 	float _RefractionIntensity;
uniform 	float _OpacityByDepth;
uniform 	float _SpecularIntensity;
uniform 	vec3 _ES_MoonDirection;
uniform 	vec3 _ES_SunDirection;
uniform 	float _Gloss;
uniform 	float _ShoreTransparency;
uniform 	float _SpecularPower;
uniform 	vec4 _ShallowColor;
uniform 	float _ShoreFade;
uniform 	vec4 _DeepColor;
uniform 	float _DeepColorDepth;
uniform 	float _DeepColorFade;
uniform 	vec4 _DistortionIntensity;
uniform 	float _ReflectionIntensity;
uniform 	float _FresnelPower;
uniform 	float _ShoreReflectionFade;
uniform 	mediump float _ProjectUVScale;
uniform 	vec4 _ReflectionSkyCubeMap_HDR;
uniform lowp sampler2D _Normal01;
uniform lowp sampler2D _Normal02;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _SceneScaledBufferBeforTransParent;
uniform lowp samplerCube _ReflectionSkyCubeMap;
uniform lowp sampler2D _DepthFoamMask;
uniform lowp sampler2DShadow hlslcc_zcmp_CascadeShadowMapTexture;
uniform lowp sampler2D _CascadeShadowMapTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD8;
in highp vec4 vs_TEXCOORD9;
in highp vec4 vs_TEXCOORD10;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec4 u_xlatb0;
vec4 u_xlat1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec4 u_xlat4;
vec3 u_xlat5;
bool u_xlatb5;
vec3 u_xlat6;
vec4 u_xlat7;
vec3 u_xlat8;
vec3 u_xlat9;
lowp vec3 u_xlat10_9;
vec3 u_xlat10;
vec3 u_xlat11;
vec3 u_xlat12;
vec3 u_xlat13;
vec3 u_xlat14;
mediump float u_xlat16_15;
vec2 u_xlat17;
mediump vec2 u_xlat16_18;
vec3 u_xlat20;
mediump vec3 u_xlat16_20;
lowp float u_xlat10_20;
int u_xlati20;
uint u_xlatu20;
bool u_xlatb20;
float u_xlat21;
float u_xlat33;
vec2 u_xlat36;
mediump float u_xlat16_36;
lowp float u_xlat10_36;
bool u_xlatb36;
float u_xlat49;
bool u_xlatb49;
mediump float u_xlat16_50;
float u_xlat52;
mediump float u_xlat16_52;
bool u_xlatb52;
float u_xlat53;
bool u_xlatb53;
float u_xlat54;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD5.zx * vec2(vec2(_ProjectUVScale, _ProjectUVScale));
    u_xlat1.x = _Time.y * _Normal01_U_Speed + u_xlat0.y;
    u_xlat1.yz = _Time.yy * vec2(_Normal01_VSpeed, _Normal02_U_Speed) + u_xlat0.xy;
    u_xlat1.w = _Time.y * _Normal02_V_Speed + u_xlat0.x;
    u_xlat10_0.xyz = texture(_Normal01, u_xlat1.xy, _NormalMapBias).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_2.xy = u_xlat16_0.xy * vec2(_NormalMapScale);
    u_xlat10_1.xyz = texture(_Normal02, u_xlat1.zw, _NormalMapBias).xyz;
    u_xlat16_0.w = -1.0;
    u_xlat16_3.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.wwz;
    u_xlat16_3.xy = u_xlat16_3.xy * vec2(_NormalMapScale);
    u_xlat16_2.z = -1.0;
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
    u_xlat1.x = float(1.0) / vs_TEXCOORD4.w;
    u_xlat17.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat17.x = texture(_CameraDepthTexture, u_xlat17.xy).x;
    u_xlat17.x = _ZBufferParams.z * u_xlat17.x + _ZBufferParams.w;
    u_xlat17.x = float(1.0) / u_xlat17.x;
    u_xlat33 = vs_TEXCOORD10.w + 9.99999975e-05;
    u_xlat33 = (-u_xlat17.x) / u_xlat33;
    u_xlat33 = vs_TEXCOORD10.y * u_xlat33 + _WorldSpaceCameraPos.y;
    u_xlat33 = (-u_xlat33) + vs_TEXCOORD5.y;
    u_xlat4.xy = u_xlat16_2.xy * vec2(vec2(_RefractionIntensity, _RefractionIntensity));
    u_xlat1.x = u_xlat1.x * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.xw = u_xlat1.xx * u_xlat4.xy;
    u_xlat1.xw = u_xlat1.xw * vs_TEXCOORD4.ww;
    u_xlat17.x = u_xlat17.x + (-vs_TEXCOORD4.w);
#ifdef UNITY_ADRENO_ES3
    u_xlat17.x = min(max(u_xlat17.x, 0.0), 1.0);
#else
    u_xlat17.x = clamp(u_xlat17.x, 0.0, 1.0);
#endif
    u_xlat4.xy = u_xlat17.xx * u_xlat1.xw;
    u_xlat4.z = 0.0;
    u_xlat1.xyw = u_xlat4.xyz + vs_TEXCOORD4.xyw;
    u_xlat1.xy = u_xlat1.xy / u_xlat1.ww;
    u_xlat1.x = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat1.x = _ZBufferParams.z * u_xlat1.x + _ZBufferParams.w;
    u_xlat1.x = float(1.0) / u_xlat1.x;
    u_xlat1.x = u_xlat1.x + (-vs_TEXCOORD4.w);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.xyw = u_xlat1.xxx * u_xlat4.xyz + vs_TEXCOORD4.xyw;
    u_xlat4.xy = u_xlat1.xy / u_xlat1.ww;
    u_xlat49 = texture(_CameraDepthTexture, u_xlat4.xy).x;
    u_xlat49 = _ZBufferParams.z * u_xlat49 + _ZBufferParams.w;
    u_xlat49 = float(1.0) / u_xlat49;
    u_xlat49 = u_xlat49 + (-vs_TEXCOORD4.w);
    u_xlat4.x = 0.100000001 / _OpacityByDepth;
    u_xlat16_3.xz = u_xlat16_2.xy;
    u_xlat16_3.y = 1.0;
    u_xlat16_20.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
    u_xlat16_20.x = inversesqrt(u_xlat16_20.x);
    u_xlat16_20.xyz = u_xlat16_3.xyz * u_xlat16_20.xxx;
#ifdef UNITY_ADRENO_ES3
    u_xlatb5 = !!(0.0>=_ES_MoonDirection.y);
#else
    u_xlatb5 = 0.0>=_ES_MoonDirection.y;
#endif
    u_xlat5.xyz = (bool(u_xlatb5)) ? _ES_SunDirection.xyz : _ES_MoonDirection.xyz;
    u_xlat6.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat53 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat54 = inversesqrt(u_xlat53);
    u_xlat7.xyz = vec3(u_xlat54) * u_xlat6.xyz;
    u_xlat5.xyz = u_xlat6.xyz * vec3(u_xlat54) + u_xlat5.xyz;
    u_xlat6.x = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat5.xyz = u_xlat5.xyz * u_xlat6.xxx;
    u_xlat20.x = dot(u_xlat16_20.xyz, u_xlat5.xyz);
    u_xlat36.x = _Gloss * 128.0;
    u_xlat20.x = max(u_xlat20.x, 9.99999975e-05);
    u_xlat20.x = log2(u_xlat20.x);
    u_xlat20.x = u_xlat20.x * u_xlat36.x;
    u_xlat20.x = exp2(u_xlat20.x);
    u_xlat20.x = u_xlat20.x * _SpecularIntensity;
    u_xlat20.x = max(u_xlat20.x, 0.0);
    u_xlat20.x = min(u_xlat20.x, 16.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb36 = !!(_ES_MoonDirection.y>=9.99999975e-05);
#else
    u_xlatb36 = _ES_MoonDirection.y>=9.99999975e-05;
#endif
    u_xlat36.x = u_xlatb36 ? 1.0 : float(0.0);
    u_xlat52 = _ES_MoonDirection.y + -1.0;
    u_xlat36.x = u_xlat36.x * u_xlat52 + 1.0;
    u_xlat4.w = float(1.0) / _ShoreTransparency;
    u_xlat5.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat5.x = inversesqrt(u_xlat5.x);
    u_xlat5.xyz = u_xlat5.xxx * vs_TEXCOORD6.xyz;
    u_xlat5.x = dot(u_xlat7.xyz, u_xlat5.xyz);
    u_xlat5.x = (-u_xlat5.x) + 1.0;
    u_xlat5.x = max(u_xlat5.x, 9.99999975e-05);
    u_xlat5.x = log2(u_xlat5.x);
    u_xlat21 = u_xlat5.x * _SpecularPower;
    u_xlat21 = exp2(u_xlat21);
    u_xlat6.xyz = u_xlat36.xxx * _LightColor0.xyz;
    u_xlat6.xyz = u_xlat20.xxx * u_xlat6.xyz;
    u_xlat20.x = u_xlat49 + -1.0;
    u_xlat20.x = u_xlat4.w * u_xlat20.x;
    u_xlat20.x = u_xlat20.x * 0.100000001;
#ifdef UNITY_ADRENO_ES3
    u_xlat20.x = min(max(u_xlat20.x, 0.0), 1.0);
#else
    u_xlat20.x = clamp(u_xlat20.x, 0.0, 1.0);
#endif
    u_xlat6.xyz = u_xlat20.xxx * u_xlat6.xyz;
    u_xlat4.xy = vec2(u_xlat49) * u_xlat4.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.xy = min(max(u_xlat4.xy, 0.0), 1.0);
#else
    u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);
#endif
    u_xlat20.x = max(u_xlat4.y, 9.99999975e-05);
    u_xlat20.x = log2(u_xlat20.x);
    u_xlat20.x = u_xlat20.x * _ShoreFade;
    u_xlat20.x = exp2(u_xlat20.x);
    u_xlat8.xyz = _ShallowColor.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat8.xyz = u_xlat20.xxx * u_xlat8.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat1.xy = u_xlat1.xy / vs_TEXCOORD4.ww;
    u_xlat10_9.xyz = texture(_SceneScaledBufferBeforTransParent, u_xlat1.xy).xyz;
    u_xlat10.xyz = u_xlat8.xyz * u_xlat10_9.xyz;
    u_xlat1.x = 0.100000001 / _DeepColorDepth;
    u_xlat1.x = u_xlat1.x * u_xlat49;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.x = max(u_xlat1.x, 9.99999975e-05);
    u_xlat1.x = log2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _DeepColorFade;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat11.xyz = (-u_xlat8.xyz) * u_xlat10_9.xyz + _DeepColor.xyz;
    u_xlat11.xyz = u_xlat1.xxx * u_xlat11.xyz + u_xlat10.xyz;
    u_xlat12.xyz = u_xlat16_2.xyz * _DistortionIntensity.xyz;
    u_xlat13.x = vs_TEXCOORD8.x;
    u_xlat13.y = vs_TEXCOORD9.x;
    u_xlat13.z = vs_TEXCOORD6.x;
    u_xlat13.x = dot(u_xlat13.xyz, u_xlat12.xyz);
    u_xlat14.x = vs_TEXCOORD8.y;
    u_xlat14.y = vs_TEXCOORD9.y;
    u_xlat14.z = vs_TEXCOORD6.y;
    u_xlat13.y = dot(u_xlat14.xyz, u_xlat12.xyz);
    u_xlat14.x = vs_TEXCOORD8.z;
    u_xlat14.y = vs_TEXCOORD9.z;
    u_xlat14.z = vs_TEXCOORD6.z;
    u_xlat13.z = dot(u_xlat14.xyz, u_xlat12.xyz);
    u_xlat1.x = dot(u_xlat13.xyz, u_xlat13.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat12.xyz = u_xlat1.xxx * u_xlat13.xyz;
    u_xlat1.x = dot((-u_xlat7.xyz), u_xlat12.xyz);
    u_xlat1.x = u_xlat1.x + u_xlat1.x;
    u_xlat7.xyz = u_xlat12.xyz * (-u_xlat1.xxx) + (-u_xlat7.xyz);
    u_xlat10_0 = textureLod(_ReflectionSkyCubeMap, u_xlat7.xyz, 0.0);
    u_xlat16_2.x = u_xlat10_0.w + -1.0;
    u_xlat16_2.x = _ReflectionSkyCubeMap_HDR.w * u_xlat16_2.x + 1.0;
    u_xlat16_2.x = log2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * _ReflectionSkyCubeMap_HDR.y;
    u_xlat16_2.x = exp2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * _ReflectionSkyCubeMap_HDR.x;
    u_xlat1.x = u_xlat5.x * _FresnelPower;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _ReflectionIntensity;
    u_xlat17.x = float(1.0) / _ShoreReflectionFade;
    u_xlat17.x = u_xlat17.x * u_xlat49;
#ifdef UNITY_ADRENO_ES3
    u_xlat17.x = min(max(u_xlat17.x, 0.0), 1.0);
#else
    u_xlat17.x = clamp(u_xlat17.x, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat17.x * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat7.xyz = u_xlat16_2.xxx * u_xlat10_0.xyz + (-u_xlat11.xyz);
    u_xlat1.xyw = u_xlat1.xxx * u_xlat7.xyz + u_xlat11.xyz;
    u_xlat1.xyw = (-u_xlat8.xyz) * u_xlat10_9.xyz + u_xlat1.xyw;
    u_xlat1.xyw = u_xlat20.xxx * u_xlat1.xyw + u_xlat10.xyz;
    u_xlat20.x = (-vs_TEXCOORD5.y) * _WorldSpaceLightPos0.w + _WorldSpaceLightPos0.y;
    u_xlat16_2.x = max(u_xlat20.x, 0.0);
    u_xlat20.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowSplitSpheres[0].xyz);
    u_xlat7.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowSplitSpheres[1].xyz);
    u_xlat8.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowSplitSpheres[2].xyz);
    u_xlat9.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowSplitSpheres[3].xyz);
    u_xlat0.x = dot(u_xlat20.xyz, u_xlat20.xyz);
    u_xlat0.y = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat0.z = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat0.w = dot(u_xlat9.xyz, u_xlat9.xyz);
    u_xlatb0 = lessThan(u_xlat0, unity_ShadowSplitSqRadii);
    u_xlat0 = mix(vec4(0.0, 0.0, 0.0, 0.0), vec4(1.0, 1.0, 1.0, 1.0), vec4(u_xlatb0));
    u_xlat16_18.x = u_xlat0.y + u_xlat0.x;
    u_xlat16_18.y = u_xlat0.z + u_xlat16_18.x;
    u_xlat3.x = -0.0;
    u_xlat3.y = (-u_xlat0.x);
    u_xlat3.zw = (-u_xlat16_18.xy);
    u_xlat0 = u_xlat0 + u_xlat3;
    u_xlat0 = max(u_xlat0, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat16_18.x = dot(u_xlat0, vec4(1.0, 1.0, 1.0, 1.0));
#ifdef UNITY_ADRENO_ES3
    u_xlatb20 = !!(u_xlat16_18.x>=0.5);
#else
    u_xlatb20 = u_xlat16_18.x>=0.5;
#endif
    if(u_xlatb20){
        u_xlat20.x = dot(u_xlat0.yzw, vec3(1.0, 2.0, 3.0));
        u_xlat20.x = min(u_xlat20.x, 3.0);
        u_xlatu20 = uint(u_xlat20.x);
        u_xlat7.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowPos[int(u_xlatu20)].xyz);
        u_xlati20 = int(u_xlatu20) << 2;
        u_xlat8.xyz = u_xlat7.yyy * hlslcc_mtx4x4unity_WorldToShadow[(u_xlati20 + 1)].xyz;
        u_xlat7.xyw = hlslcc_mtx4x4unity_WorldToShadow[u_xlati20].xyz * u_xlat7.xxx + u_xlat8.xyz;
        u_xlat7.xyz = hlslcc_mtx4x4unity_WorldToShadow[(u_xlati20 + 2)].xyz * u_xlat7.zzz + u_xlat7.xyw;
        u_xlat20.xyz = u_xlat7.xyz + hlslcc_mtx4x4unity_WorldToShadow[(u_xlati20 + 3)].xyz;
        vec3 txVec0 = vec3(u_xlat20.xy,u_xlat20.z);
        u_xlat10_20 = textureLod(hlslcc_zcmp_CascadeShadowMapTexture, txVec0, 0.0);
        u_xlat16_36 = (-_LightShadowData.x) + 1.0;
        u_xlat20.x = u_xlat10_20 * u_xlat16_36 + _LightShadowData.x;
    } else {
        u_xlat20.x = 1.0;
    //ENDIF
    }
    u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;
    u_xlat20.xyz = u_xlat16_2.xyz * u_xlat20.xxx + vs_TEXCOORD1.xyz;
    u_xlat16_2.xyz = u_xlat20.xyz * vec3(0.300000012, 0.300000012, 0.300000012) + vec3(0.699999988, 0.699999988, 0.699999988);
    u_xlat20.x = sqrt(u_xlat53);
    u_xlat16_50 = u_xlat20.x + (-_DepthFoamCloseFadeOffset);
    u_xlat16_50 = u_xlat16_50 / _DepthFoamCloseFadeDistance;
    u_xlat16_15 = vs_COLOR0.x * _DepthFoamExtent;
    u_xlat33 = max(u_xlat33, 0.0);
    u_xlat33 = min(u_xlat16_15, u_xlat33);
    u_xlat16_15 = _DepthFoamExtent * vs_COLOR0.x + 9.99999975e-05;
    u_xlat33 = u_xlat33 / u_xlat16_15;
    u_xlat33 = (-u_xlat33) + 1.0;
    u_xlat36.xy = vec2(_Time.y * _DepthFoamMask_ST.z, _Time.y * _DepthFoamMask_ST.w);
    u_xlat36.xy = fract(u_xlat36.xy);
    u_xlat36.xy = _DepthFoamMask_ST.xy * vs_TEXCOORD5.xz + u_xlat36.xy;
    u_xlat10_36 = texture(_DepthFoamMask, u_xlat36.xy).x;
    u_xlat52 = vs_TEXCOORD5.z + vs_TEXCOORD5.x;
    u_xlat52 = u_xlat52 * _DepthFoamPhaseScale;
    u_xlat52 = _DepthFoamSpeed * _Time.y + u_xlat52;
    u_xlat5.x = (-u_xlat33) + 1.0;
    u_xlat16_15 = _DepthFoamSubdivision * u_xlat33 + u_xlat52;
    u_xlat16_15 = sin(u_xlat16_15);
    u_xlat16_15 = _DepthFoamWidth * u_xlat33 + u_xlat16_15;
    u_xlat16_52 = u_xlat10_36 * 2.0 + -1.0;
    u_xlat52 = u_xlat16_52 + u_xlat16_15;
#ifdef UNITY_ADRENO_ES3
    u_xlatb52 = !!(u_xlat52>=u_xlat5.x);
#else
    u_xlatb52 = u_xlat52>=u_xlat5.x;
#endif
    u_xlat52 = u_xlatb52 ? 1.0 : float(0.0);
    u_xlat36.x = u_xlat52 * u_xlat10_36;
    u_xlat16_15 = _DepthFoamDistance + 9.99999975e-05;
    u_xlat16_15 = u_xlat20.x / u_xlat16_15;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_15 = min(max(u_xlat16_15, 0.0), 1.0);
#else
    u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);
#endif
    u_xlat16_20.x = (-u_xlat16_15) + 1.0;
    u_xlat16_15 = vs_COLOR0.y * _DepthFoamColor.w;
    u_xlat16_50 = u_xlat16_50 * u_xlat16_15;
    u_xlat16_50 = u_xlat36.x * u_xlat16_50;
    u_xlat16_50 = u_xlat33 * u_xlat16_50;
    u_xlat16_50 = u_xlat16_20.x * u_xlat16_50;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_50 = min(max(u_xlat16_50, 0.0), 1.0);
#else
    u_xlat16_50 = clamp(u_xlat16_50, 0.0, 1.0);
#endif
    u_xlat16_2.xyz = _DepthFoamColor.xyz * u_xlat16_2.xyz + (-u_xlat1.xyw);
    u_xlat16_2.xyz = vec3(u_xlat16_50) * u_xlat16_2.xyz + u_xlat1.xyw;
    u_xlat1.xyz = u_xlat6.xyz * vec3(u_xlat21) + u_xlat16_2.xyz;
    u_xlat0.w = u_xlat4.x * vs_COLOR0.w;
    u_xlat4.xyz = vs_TEXCOORD5.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat5.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat5.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat5.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat49 = dot(u_xlat4.xyz, u_xlat5.xyz);
    u_xlat4.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat4.x = sqrt(u_xlat4.x);
    u_xlat20.y = u_xlat4.x * _HeigtFogParams.y;
    u_xlat52 = u_xlat4.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat52 = min(max(u_xlat52, 0.0), 1.0);
#else
    u_xlat52 = clamp(u_xlat52, 0.0, 1.0);
#endif
    u_xlat5.x = (-u_xlat52) + 2.0;
    u_xlat52 = u_xlat52 * u_xlat5.x;
    u_xlat5.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb49 = !!((-u_xlat49)>=u_xlat5.x);
#else
    u_xlatb49 = (-u_xlat49)>=u_xlat5.x;
#endif
    u_xlat5.x = u_xlat52 * _HeigtFogColDelta.w;
    u_xlat49 = (u_xlatb49) ? u_xlat5.x : u_xlat52;
    u_xlat49 = log2(u_xlat49);
    u_xlat49 = u_xlat49 * unity_FogColor.w;
    u_xlat49 = exp2(u_xlat49);
    u_xlat49 = min(u_xlat49, _HeigtFogColBase.w);
    u_xlat52 = vs_TEXCOORD5.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat52 = min(max(u_xlat52, 0.0), 1.0);
#else
    u_xlat52 = clamp(u_xlat52, 0.0, 1.0);
#endif
    u_xlat16_2.x = (-u_xlat52) + 2.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat52;
    u_xlat5.xyz = u_xlat16_2.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat52 = u_xlat4.x + (-_HeigtFogRamp.w);
    u_xlat52 = u_xlat52 * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat52 = min(max(u_xlat52, 0.0), 1.0);
#else
    u_xlat52 = clamp(u_xlat52, 0.0, 1.0);
#endif
    u_xlat6.xyz = (-u_xlat5.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat5.xyz = vec3(u_xlat52) * u_xlat6.xyz + u_xlat5.xyz;
    u_xlat52 = u_xlat4.y * _HeigtFogParams.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb53 = !!(0.00999999978<abs(u_xlat52));
#else
    u_xlatb53 = 0.00999999978<abs(u_xlat52);
#endif
    u_xlat6.x = u_xlat52 * -1.44269502;
    u_xlat6.x = exp2(u_xlat6.x);
    u_xlat6.x = (-u_xlat6.x) + 1.0;
    u_xlat52 = u_xlat6.x / u_xlat52;
    u_xlat16_2.x = (u_xlatb53) ? u_xlat52 : 1.0;
    u_xlat20.x = u_xlat4.y * _HeigtFogParams2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb52 = !!(0.00999999978<abs(u_xlat20.x));
#else
    u_xlatb52 = 0.00999999978<abs(u_xlat20.x);
#endif
    u_xlat53 = u_xlat20.x * -1.44269502;
    u_xlat53 = exp2(u_xlat53);
    u_xlat53 = (-u_xlat53) + 1.0;
    u_xlat20.x = u_xlat53 / u_xlat20.x;
    u_xlat16_2.y = (u_xlatb52) ? u_xlat20.x : 1.0;
    u_xlat20.x = u_xlat4.x * _HeigtFogParams2.y;
    u_xlat16_2.xy = u_xlat16_2.xy * u_xlat20.yx;
    u_xlat16_2.x = exp2((-u_xlat16_2.x));
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_18.x = exp2((-u_xlat16_2.y));
    u_xlat16_2.y = (-u_xlat16_18.x) + 1.0;
    u_xlat16_2.xy = max(u_xlat16_2.xy, vec2(0.0, 0.0));
    u_xlat16_2.x = u_xlat16_2.y + u_xlat16_2.x;
    u_xlat4.x = u_xlat4.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat16_18.x = (-u_xlat4.x) + 2.0;
    u_xlat16_18.x = u_xlat16_18.x * u_xlat4.x;
    u_xlat4.x = u_xlat16_18.x * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat4.x = u_xlat4.x + 1.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat4.x;
    u_xlat4.x = min(u_xlat16_2.x, _HeigtFogColBase.w);
    u_xlat20.x = vs_TEXCOORD5.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat20.x = min(max(u_xlat20.x, 0.0), 1.0);
#else
    u_xlat20.x = clamp(u_xlat20.x, 0.0, 1.0);
#endif
    u_xlat20.xyz = u_xlat20.xxx * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    u_xlat5.xyz = vec3(u_xlat49) * u_xlat5.xyz;
    u_xlat53 = (-u_xlat4.x) + 1.0;
    u_xlat5.xyz = vec3(u_xlat53) * u_xlat5.xyz;
    u_xlat4.xyz = u_xlat20.xyz * u_xlat4.xxx + u_xlat5.xyz;
    u_xlat49 = (-u_xlat49) + 1.0;
    u_xlat49 = u_xlat53 * u_xlat49;
    u_xlat0.xyz = vec3(u_xlat49) * u_xlat1.xyz + u_xlat4.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "MHY_SHADER_LOW" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	mediump float _MHYZBias;
uniform 	vec4 hlslcc_mtx4x4_mhyJitteredVP[4];
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
out highp vec4 vs_TEXCOORD9;
out highp vec4 vs_TEXCOORD10;
float u_xlat0;
int u_xlati0;
vec4 u_xlat1;
bool u_xlatb1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
bool u_xlatb4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
mediump vec4 u_xlat16_6;
vec4 u_xlat7;
mediump vec3 u_xlat16_8;
vec3 u_xlat9;
float u_xlat10;
float u_xlat13;
bool u_xlatb13;
mediump float u_xlat16_14;
float u_xlat22;
float u_xlat28;
float u_xlat31;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat9.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4_mhyJitteredVP[1];
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[3] * u_xlat2.wwww + u_xlat1;
    u_xlat3.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    u_xlat3.xyw = u_xlat1.xyw;
    gl_Position = u_xlat3;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.xyw = u_xlat9.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat4.x = u_xlat1.y * _HeigtFogParams.x;
    u_xlat13 = u_xlat4.x * -1.44269502;
    u_xlat13 = exp2(u_xlat13);
    u_xlat13 = (-u_xlat13) + 1.0;
    u_xlat13 = u_xlat13 / u_xlat4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(0.00999999978<abs(u_xlat4.x));
#else
    u_xlatb4 = 0.00999999978<abs(u_xlat4.x);
#endif
    u_xlat16_5.x = (u_xlatb4) ? u_xlat13 : 1.0;
    u_xlat4.x = dot(u_xlat1.xyw, u_xlat1.xyw);
    u_xlat4.x = sqrt(u_xlat4.x);
    u_xlat13 = u_xlat4.x * _HeigtFogParams.y;
    u_xlat16_5.x = u_xlat13 * u_xlat16_5.x;
    u_xlat16_5.x = exp2((-u_xlat16_5.x));
    u_xlat16_5.x = (-u_xlat16_5.x) + 1.0;
    u_xlat13 = u_xlat1.y * _HeigtFogParams2.x;
    u_xlat22 = u_xlat13 * -1.44269502;
    u_xlat22 = exp2(u_xlat22);
    u_xlat22 = (-u_xlat22) + 1.0;
    u_xlat22 = u_xlat22 / u_xlat13;
#ifdef UNITY_ADRENO_ES3
    u_xlatb13 = !!(0.00999999978<abs(u_xlat13));
#else
    u_xlatb13 = 0.00999999978<abs(u_xlat13);
#endif
    u_xlat16_14 = (u_xlatb13) ? u_xlat22 : 1.0;
    u_xlat13 = u_xlat4.x * _HeigtFogParams2.y;
    u_xlat16_14 = u_xlat13 * u_xlat16_14;
    u_xlat16_14 = exp2((-u_xlat16_14));
    u_xlat16_5.y = (-u_xlat16_14) + 1.0;
    u_xlat16_5.xy = max(u_xlat16_5.xy, vec2(0.0, 0.0));
    u_xlat16_5.x = u_xlat16_5.y + u_xlat16_5.x;
    u_xlat13 = u_xlat4.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat13 = min(max(u_xlat13, 0.0), 1.0);
#else
    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
#endif
    u_xlat16_14 = (-u_xlat13) + 2.0;
    u_xlat16_14 = u_xlat13 * u_xlat16_14;
    u_xlat13 = u_xlat16_14 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat13 = u_xlat13 + 1.0;
    u_xlat16_5.x = u_xlat13 * u_xlat16_5.x;
    u_xlat13 = min(u_xlat16_5.x, _HeigtFogColBase.w);
    u_xlat22 = (-u_xlat13) + 1.0;
    u_xlat31 = _ProjectionParams.z * 0.999899983;
    u_xlat6.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat6.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat6.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat1.x = dot(u_xlat1.xyw, u_xlat6.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!((-u_xlat1.x)>=u_xlat31);
#else
    u_xlatb1 = (-u_xlat1.x)>=u_xlat31;
#endif
    u_xlat10 = u_xlat4.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat10 = min(max(u_xlat10, 0.0), 1.0);
#else
    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
#endif
    u_xlat28 = u_xlat4.x + (-_HeigtFogRamp.w);
    u_xlat28 = u_xlat28 * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat28 = min(max(u_xlat28, 0.0), 1.0);
#else
    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
#endif
    u_xlat4.x = (-u_xlat10) + 2.0;
    u_xlat10 = u_xlat10 * u_xlat4.x;
    u_xlat4.x = u_xlat10 * _HeigtFogColDelta.w;
    u_xlat1.x = (u_xlatb1) ? u_xlat4.x : u_xlat10;
    u_xlat1.x = log2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * unity_FogColor.w;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat1.x = min(u_xlat1.x, _HeigtFogColBase.w);
    u_xlat10 = u_xlat9.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat10 = min(max(u_xlat10, 0.0), 1.0);
#else
    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
#endif
    u_xlat16_5.x = (-u_xlat10) + 2.0;
    u_xlat16_5.x = u_xlat10 * u_xlat16_5.x;
    u_xlat6.xyz = u_xlat16_5.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat7.xyz = (-u_xlat6.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat6.xyz = vec3(u_xlat28) * u_xlat7.xyz + u_xlat6.xyz;
    u_xlat6.xyz = u_xlat1.xxx * u_xlat6.xyz;
    u_xlat1.x = (-u_xlat1.x) + 1.0;
    vs_TEXCOORD0.w = u_xlat22 * u_xlat1.x;
    u_xlat1.xyw = vec3(u_xlat22) * u_xlat6.xyz;
    u_xlat4.x = u_xlat9.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat4.xzw = u_xlat4.xxx * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    vs_TEXCOORD0.xyz = u_xlat4.xzw * vec3(u_xlat13) + u_xlat1.xyw;
    vs_TEXCOORD1.w = 1.0;
    u_xlat4.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat4.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat4.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat1.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
    u_xlat16_5.x = u_xlat4.y * u_xlat4.y;
    u_xlat16_5.x = u_xlat4.x * u_xlat4.x + (-u_xlat16_5.x);
    u_xlat16_6 = u_xlat4.yzzx * u_xlat4.xyzz;
    u_xlat16_8.x = dot(unity_SHBr, u_xlat16_6);
    u_xlat16_8.y = dot(unity_SHBg, u_xlat16_6);
    u_xlat16_8.z = dot(unity_SHBb, u_xlat16_6);
    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_8.xyz;
    u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat4.w = 1.0;
    u_xlat16_8.x = dot(unity_SHAr, u_xlat4);
    u_xlat16_8.y = dot(unity_SHAg, u_xlat4);
    u_xlat16_8.z = dot(unity_SHAb, u_xlat4);
    u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_8.xyz;
    vs_TEXCOORD1.xyz = u_xlat16_5.xyz;
    u_xlat1.x = u_xlat3.y * _ProjectionParams.x;
    u_xlat7.w = u_xlat1.x * 0.5;
    u_xlat7.xz = u_xlat3.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.z = u_xlat1.z;
    u_xlat3.xy = u_xlat7.zz + u_xlat7.xw;
    vs_TEXCOORD2 = u_xlat3;
    vs_TEXCOORD4.xyw = u_xlat3.xyw;
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD3.w = 0.0;
    u_xlat1.x = u_xlat2.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat2.x + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat2.z + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat2.w + u_xlat1.x;
    vs_TEXCOORD3.z = (-u_xlat1.x);
    vs_TEXCOORD5.w = 0.0;
    vs_TEXCOORD5.xyz = u_xlat9.xyz;
    u_xlat9.xyz = (-u_xlat9.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD6.w = 0.0;
    vs_TEXCOORD6.xyz = u_xlat4.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].www + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * in_POSITION0.yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.zzz + u_xlat1.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.www + u_xlat1.xyz;
    vs_TEXCOORD7.xyz = u_xlat1.xyz * vec3(-1.0, -1.0, 1.0);
    vs_TEXCOORD7.w = 0.0;
    u_xlat1.xyz = in_TANGENT0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat0 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0 = inversesqrt(u_xlat0);
    u_xlat1.xyz = vec3(u_xlat0) * u_xlat1.xyz;
    vs_TEXCOORD8.xyz = u_xlat1.xyz;
    vs_TEXCOORD8.w = 0.0;
    u_xlat2.xyz = u_xlat1.yzx * u_xlat4.zxy;
    u_xlat1.xyz = u_xlat4.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
    u_xlat0 = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD9.xyz = vec3(u_xlat0) * u_xlat1.xyz;
    vs_TEXCOORD9.w = 0.0;
    u_xlat0 = u_xlat9.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat9.x + u_xlat0;
    vs_TEXCOORD10.w = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat9.z + u_xlat0;
    vs_TEXCOORD10.xyz = u_xlat9.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowPos[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	mediump vec4 _DepthFoamMask_ST;
uniform 	mediump float _DepthFoamSpeed;
uniform 	mediump vec4 _DepthFoamColor;
uniform 	mediump float _DepthFoamExtent;
uniform 	mediump float _DepthFoamDistance;
uniform 	mediump float _DepthFoamSubdivision;
uniform 	mediump float _DepthFoamWidth;
uniform 	mediump float _DepthFoamPhaseScale;
uniform 	mediump float _DepthFoamCloseFadeOffset;
uniform 	mediump float _DepthFoamCloseFadeDistance;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _NormalMapScale;
uniform 	float _Normal01_U_Speed;
uniform 	float _Normal01_VSpeed;
uniform 	float _NormalMapBias;
uniform 	float _Normal02_U_Speed;
uniform 	float _Normal02_V_Speed;
uniform 	float _RefractionIntensity;
uniform 	float _OpacityByDepth;
uniform 	float _SpecularIntensity;
uniform 	vec3 _ES_MoonDirection;
uniform 	vec3 _ES_SunDirection;
uniform 	float _Gloss;
uniform 	float _ShoreTransparency;
uniform 	float _SpecularPower;
uniform 	vec4 _ShallowColor;
uniform 	float _ShoreFade;
uniform 	vec4 _DeepColor;
uniform 	float _DeepColorDepth;
uniform 	float _DeepColorFade;
uniform 	vec4 _DistortionIntensity;
uniform 	float _ReflectionIntensity;
uniform 	float _FresnelPower;
uniform 	float _ShoreReflectionFade;
uniform 	mediump float _ProjectUVScale;
uniform 	vec4 _ReflectionSkyCubeMap_HDR;
uniform lowp sampler2D _Normal01;
uniform lowp sampler2D _Normal02;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _SceneScaledBufferBeforTransParent;
uniform lowp samplerCube _ReflectionSkyCubeMap;
uniform lowp sampler2D _DepthFoamMask;
uniform lowp sampler2DShadow hlslcc_zcmp_CascadeShadowMapTexture;
uniform lowp sampler2D _CascadeShadowMapTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD8;
in highp vec4 vs_TEXCOORD9;
in highp vec4 vs_TEXCOORD10;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec4 u_xlatb0;
vec4 u_xlat1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec4 u_xlat4;
vec3 u_xlat5;
bool u_xlatb5;
vec3 u_xlat6;
vec4 u_xlat7;
vec3 u_xlat8;
vec3 u_xlat9;
lowp vec3 u_xlat10_9;
vec3 u_xlat10;
vec3 u_xlat11;
vec3 u_xlat12;
vec3 u_xlat13;
vec3 u_xlat14;
mediump float u_xlat16_15;
vec2 u_xlat17;
mediump vec2 u_xlat16_18;
vec3 u_xlat20;
mediump vec3 u_xlat16_20;
lowp float u_xlat10_20;
int u_xlati20;
uint u_xlatu20;
bool u_xlatb20;
float u_xlat21;
float u_xlat33;
vec2 u_xlat36;
mediump float u_xlat16_36;
lowp float u_xlat10_36;
bool u_xlatb36;
float u_xlat49;
bool u_xlatb49;
mediump float u_xlat16_50;
float u_xlat52;
mediump float u_xlat16_52;
bool u_xlatb52;
float u_xlat53;
bool u_xlatb53;
float u_xlat54;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD5.zx * vec2(vec2(_ProjectUVScale, _ProjectUVScale));
    u_xlat1.x = _Time.y * _Normal01_U_Speed + u_xlat0.y;
    u_xlat1.yz = _Time.yy * vec2(_Normal01_VSpeed, _Normal02_U_Speed) + u_xlat0.xy;
    u_xlat1.w = _Time.y * _Normal02_V_Speed + u_xlat0.x;
    u_xlat10_0.xyz = texture(_Normal01, u_xlat1.xy, _NormalMapBias).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_2.xy = u_xlat16_0.xy * vec2(_NormalMapScale);
    u_xlat10_1.xyz = texture(_Normal02, u_xlat1.zw, _NormalMapBias).xyz;
    u_xlat16_0.w = -1.0;
    u_xlat16_3.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.wwz;
    u_xlat16_3.xy = u_xlat16_3.xy * vec2(_NormalMapScale);
    u_xlat16_2.z = -1.0;
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
    u_xlat1.x = float(1.0) / vs_TEXCOORD4.w;
    u_xlat17.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat17.x = texture(_CameraDepthTexture, u_xlat17.xy).x;
    u_xlat17.x = _ZBufferParams.z * u_xlat17.x + _ZBufferParams.w;
    u_xlat17.x = float(1.0) / u_xlat17.x;
    u_xlat33 = vs_TEXCOORD10.w + 9.99999975e-05;
    u_xlat33 = (-u_xlat17.x) / u_xlat33;
    u_xlat33 = vs_TEXCOORD10.y * u_xlat33 + _WorldSpaceCameraPos.y;
    u_xlat33 = (-u_xlat33) + vs_TEXCOORD5.y;
    u_xlat4.xy = u_xlat16_2.xy * vec2(vec2(_RefractionIntensity, _RefractionIntensity));
    u_xlat1.x = u_xlat1.x * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.xw = u_xlat1.xx * u_xlat4.xy;
    u_xlat1.xw = u_xlat1.xw * vs_TEXCOORD4.ww;
    u_xlat17.x = u_xlat17.x + (-vs_TEXCOORD4.w);
#ifdef UNITY_ADRENO_ES3
    u_xlat17.x = min(max(u_xlat17.x, 0.0), 1.0);
#else
    u_xlat17.x = clamp(u_xlat17.x, 0.0, 1.0);
#endif
    u_xlat4.xy = u_xlat17.xx * u_xlat1.xw;
    u_xlat4.z = 0.0;
    u_xlat1.xyw = u_xlat4.xyz + vs_TEXCOORD4.xyw;
    u_xlat1.xy = u_xlat1.xy / u_xlat1.ww;
    u_xlat1.x = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat1.x = _ZBufferParams.z * u_xlat1.x + _ZBufferParams.w;
    u_xlat1.x = float(1.0) / u_xlat1.x;
    u_xlat1.x = u_xlat1.x + (-vs_TEXCOORD4.w);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.xyw = u_xlat1.xxx * u_xlat4.xyz + vs_TEXCOORD4.xyw;
    u_xlat4.xy = u_xlat1.xy / u_xlat1.ww;
    u_xlat49 = texture(_CameraDepthTexture, u_xlat4.xy).x;
    u_xlat49 = _ZBufferParams.z * u_xlat49 + _ZBufferParams.w;
    u_xlat49 = float(1.0) / u_xlat49;
    u_xlat49 = u_xlat49 + (-vs_TEXCOORD4.w);
    u_xlat4.x = 0.100000001 / _OpacityByDepth;
    u_xlat16_3.xz = u_xlat16_2.xy;
    u_xlat16_3.y = 1.0;
    u_xlat16_20.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
    u_xlat16_20.x = inversesqrt(u_xlat16_20.x);
    u_xlat16_20.xyz = u_xlat16_3.xyz * u_xlat16_20.xxx;
#ifdef UNITY_ADRENO_ES3
    u_xlatb5 = !!(0.0>=_ES_MoonDirection.y);
#else
    u_xlatb5 = 0.0>=_ES_MoonDirection.y;
#endif
    u_xlat5.xyz = (bool(u_xlatb5)) ? _ES_SunDirection.xyz : _ES_MoonDirection.xyz;
    u_xlat6.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat53 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat54 = inversesqrt(u_xlat53);
    u_xlat7.xyz = vec3(u_xlat54) * u_xlat6.xyz;
    u_xlat5.xyz = u_xlat6.xyz * vec3(u_xlat54) + u_xlat5.xyz;
    u_xlat6.x = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat5.xyz = u_xlat5.xyz * u_xlat6.xxx;
    u_xlat20.x = dot(u_xlat16_20.xyz, u_xlat5.xyz);
    u_xlat36.x = _Gloss * 128.0;
    u_xlat20.x = max(u_xlat20.x, 9.99999975e-05);
    u_xlat20.x = log2(u_xlat20.x);
    u_xlat20.x = u_xlat20.x * u_xlat36.x;
    u_xlat20.x = exp2(u_xlat20.x);
    u_xlat20.x = u_xlat20.x * _SpecularIntensity;
    u_xlat20.x = max(u_xlat20.x, 0.0);
    u_xlat20.x = min(u_xlat20.x, 16.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb36 = !!(_ES_MoonDirection.y>=9.99999975e-05);
#else
    u_xlatb36 = _ES_MoonDirection.y>=9.99999975e-05;
#endif
    u_xlat36.x = u_xlatb36 ? 1.0 : float(0.0);
    u_xlat52 = _ES_MoonDirection.y + -1.0;
    u_xlat36.x = u_xlat36.x * u_xlat52 + 1.0;
    u_xlat4.w = float(1.0) / _ShoreTransparency;
    u_xlat5.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat5.x = inversesqrt(u_xlat5.x);
    u_xlat5.xyz = u_xlat5.xxx * vs_TEXCOORD6.xyz;
    u_xlat5.x = dot(u_xlat7.xyz, u_xlat5.xyz);
    u_xlat5.x = (-u_xlat5.x) + 1.0;
    u_xlat5.x = max(u_xlat5.x, 9.99999975e-05);
    u_xlat5.x = log2(u_xlat5.x);
    u_xlat21 = u_xlat5.x * _SpecularPower;
    u_xlat21 = exp2(u_xlat21);
    u_xlat6.xyz = u_xlat36.xxx * _LightColor0.xyz;
    u_xlat6.xyz = u_xlat20.xxx * u_xlat6.xyz;
    u_xlat20.x = u_xlat49 + -1.0;
    u_xlat20.x = u_xlat4.w * u_xlat20.x;
    u_xlat20.x = u_xlat20.x * 0.100000001;
#ifdef UNITY_ADRENO_ES3
    u_xlat20.x = min(max(u_xlat20.x, 0.0), 1.0);
#else
    u_xlat20.x = clamp(u_xlat20.x, 0.0, 1.0);
#endif
    u_xlat6.xyz = u_xlat20.xxx * u_xlat6.xyz;
    u_xlat4.xy = vec2(u_xlat49) * u_xlat4.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.xy = min(max(u_xlat4.xy, 0.0), 1.0);
#else
    u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);
#endif
    u_xlat20.x = max(u_xlat4.y, 9.99999975e-05);
    u_xlat20.x = log2(u_xlat20.x);
    u_xlat20.x = u_xlat20.x * _ShoreFade;
    u_xlat20.x = exp2(u_xlat20.x);
    u_xlat8.xyz = _ShallowColor.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat8.xyz = u_xlat20.xxx * u_xlat8.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat1.xy = u_xlat1.xy / vs_TEXCOORD4.ww;
    u_xlat10_9.xyz = texture(_SceneScaledBufferBeforTransParent, u_xlat1.xy).xyz;
    u_xlat10.xyz = u_xlat8.xyz * u_xlat10_9.xyz;
    u_xlat1.x = 0.100000001 / _DeepColorDepth;
    u_xlat1.x = u_xlat1.x * u_xlat49;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.x = max(u_xlat1.x, 9.99999975e-05);
    u_xlat1.x = log2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _DeepColorFade;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat11.xyz = (-u_xlat8.xyz) * u_xlat10_9.xyz + _DeepColor.xyz;
    u_xlat11.xyz = u_xlat1.xxx * u_xlat11.xyz + u_xlat10.xyz;
    u_xlat12.xyz = u_xlat16_2.xyz * _DistortionIntensity.xyz;
    u_xlat13.x = vs_TEXCOORD8.x;
    u_xlat13.y = vs_TEXCOORD9.x;
    u_xlat13.z = vs_TEXCOORD6.x;
    u_xlat13.x = dot(u_xlat13.xyz, u_xlat12.xyz);
    u_xlat14.x = vs_TEXCOORD8.y;
    u_xlat14.y = vs_TEXCOORD9.y;
    u_xlat14.z = vs_TEXCOORD6.y;
    u_xlat13.y = dot(u_xlat14.xyz, u_xlat12.xyz);
    u_xlat14.x = vs_TEXCOORD8.z;
    u_xlat14.y = vs_TEXCOORD9.z;
    u_xlat14.z = vs_TEXCOORD6.z;
    u_xlat13.z = dot(u_xlat14.xyz, u_xlat12.xyz);
    u_xlat1.x = dot(u_xlat13.xyz, u_xlat13.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat12.xyz = u_xlat1.xxx * u_xlat13.xyz;
    u_xlat1.x = dot((-u_xlat7.xyz), u_xlat12.xyz);
    u_xlat1.x = u_xlat1.x + u_xlat1.x;
    u_xlat7.xyz = u_xlat12.xyz * (-u_xlat1.xxx) + (-u_xlat7.xyz);
    u_xlat10_0 = textureLod(_ReflectionSkyCubeMap, u_xlat7.xyz, 0.0);
    u_xlat16_2.x = u_xlat10_0.w + -1.0;
    u_xlat16_2.x = _ReflectionSkyCubeMap_HDR.w * u_xlat16_2.x + 1.0;
    u_xlat16_2.x = log2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * _ReflectionSkyCubeMap_HDR.y;
    u_xlat16_2.x = exp2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * _ReflectionSkyCubeMap_HDR.x;
    u_xlat1.x = u_xlat5.x * _FresnelPower;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _ReflectionIntensity;
    u_xlat17.x = float(1.0) / _ShoreReflectionFade;
    u_xlat17.x = u_xlat17.x * u_xlat49;
#ifdef UNITY_ADRENO_ES3
    u_xlat17.x = min(max(u_xlat17.x, 0.0), 1.0);
#else
    u_xlat17.x = clamp(u_xlat17.x, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat17.x * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat7.xyz = u_xlat16_2.xxx * u_xlat10_0.xyz + (-u_xlat11.xyz);
    u_xlat1.xyw = u_xlat1.xxx * u_xlat7.xyz + u_xlat11.xyz;
    u_xlat1.xyw = (-u_xlat8.xyz) * u_xlat10_9.xyz + u_xlat1.xyw;
    u_xlat1.xyw = u_xlat20.xxx * u_xlat1.xyw + u_xlat10.xyz;
    u_xlat20.x = (-vs_TEXCOORD5.y) * _WorldSpaceLightPos0.w + _WorldSpaceLightPos0.y;
    u_xlat16_2.x = max(u_xlat20.x, 0.0);
    u_xlat20.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowSplitSpheres[0].xyz);
    u_xlat7.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowSplitSpheres[1].xyz);
    u_xlat8.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowSplitSpheres[2].xyz);
    u_xlat9.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowSplitSpheres[3].xyz);
    u_xlat0.x = dot(u_xlat20.xyz, u_xlat20.xyz);
    u_xlat0.y = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat0.z = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat0.w = dot(u_xlat9.xyz, u_xlat9.xyz);
    u_xlatb0 = lessThan(u_xlat0, unity_ShadowSplitSqRadii);
    u_xlat0 = mix(vec4(0.0, 0.0, 0.0, 0.0), vec4(1.0, 1.0, 1.0, 1.0), vec4(u_xlatb0));
    u_xlat16_18.x = u_xlat0.y + u_xlat0.x;
    u_xlat16_18.y = u_xlat0.z + u_xlat16_18.x;
    u_xlat3.x = -0.0;
    u_xlat3.y = (-u_xlat0.x);
    u_xlat3.zw = (-u_xlat16_18.xy);
    u_xlat0 = u_xlat0 + u_xlat3;
    u_xlat0 = max(u_xlat0, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat16_18.x = dot(u_xlat0, vec4(1.0, 1.0, 1.0, 1.0));
#ifdef UNITY_ADRENO_ES3
    u_xlatb20 = !!(u_xlat16_18.x>=0.5);
#else
    u_xlatb20 = u_xlat16_18.x>=0.5;
#endif
    if(u_xlatb20){
        u_xlat20.x = dot(u_xlat0.yzw, vec3(1.0, 2.0, 3.0));
        u_xlat20.x = min(u_xlat20.x, 3.0);
        u_xlatu20 = uint(u_xlat20.x);
        u_xlat7.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowPos[int(u_xlatu20)].xyz);
        u_xlati20 = int(u_xlatu20) << 2;
        u_xlat8.xyz = u_xlat7.yyy * hlslcc_mtx4x4unity_WorldToShadow[(u_xlati20 + 1)].xyz;
        u_xlat7.xyw = hlslcc_mtx4x4unity_WorldToShadow[u_xlati20].xyz * u_xlat7.xxx + u_xlat8.xyz;
        u_xlat7.xyz = hlslcc_mtx4x4unity_WorldToShadow[(u_xlati20 + 2)].xyz * u_xlat7.zzz + u_xlat7.xyw;
        u_xlat20.xyz = u_xlat7.xyz + hlslcc_mtx4x4unity_WorldToShadow[(u_xlati20 + 3)].xyz;
        vec3 txVec0 = vec3(u_xlat20.xy,u_xlat20.z);
        u_xlat10_20 = textureLod(hlslcc_zcmp_CascadeShadowMapTexture, txVec0, 0.0);
        u_xlat16_36 = (-_LightShadowData.x) + 1.0;
        u_xlat20.x = u_xlat10_20 * u_xlat16_36 + _LightShadowData.x;
    } else {
        u_xlat20.x = 1.0;
    //ENDIF
    }
    u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;
    u_xlat20.xyz = u_xlat16_2.xyz * u_xlat20.xxx + vs_TEXCOORD1.xyz;
    u_xlat16_2.xyz = u_xlat20.xyz * vec3(0.300000012, 0.300000012, 0.300000012) + vec3(0.699999988, 0.699999988, 0.699999988);
    u_xlat20.x = sqrt(u_xlat53);
    u_xlat16_50 = u_xlat20.x + (-_DepthFoamCloseFadeOffset);
    u_xlat16_50 = u_xlat16_50 / _DepthFoamCloseFadeDistance;
    u_xlat16_15 = vs_COLOR0.x * _DepthFoamExtent;
    u_xlat33 = max(u_xlat33, 0.0);
    u_xlat33 = min(u_xlat16_15, u_xlat33);
    u_xlat16_15 = _DepthFoamExtent * vs_COLOR0.x + 9.99999975e-05;
    u_xlat33 = u_xlat33 / u_xlat16_15;
    u_xlat33 = (-u_xlat33) + 1.0;
    u_xlat36.xy = vec2(_Time.y * _DepthFoamMask_ST.z, _Time.y * _DepthFoamMask_ST.w);
    u_xlat36.xy = fract(u_xlat36.xy);
    u_xlat36.xy = _DepthFoamMask_ST.xy * vs_TEXCOORD5.xz + u_xlat36.xy;
    u_xlat10_36 = texture(_DepthFoamMask, u_xlat36.xy).x;
    u_xlat52 = vs_TEXCOORD5.z + vs_TEXCOORD5.x;
    u_xlat52 = u_xlat52 * _DepthFoamPhaseScale;
    u_xlat52 = _DepthFoamSpeed * _Time.y + u_xlat52;
    u_xlat5.x = (-u_xlat33) + 1.0;
    u_xlat16_15 = _DepthFoamSubdivision * u_xlat33 + u_xlat52;
    u_xlat16_15 = sin(u_xlat16_15);
    u_xlat16_15 = _DepthFoamWidth * u_xlat33 + u_xlat16_15;
    u_xlat16_52 = u_xlat10_36 * 2.0 + -1.0;
    u_xlat52 = u_xlat16_52 + u_xlat16_15;
#ifdef UNITY_ADRENO_ES3
    u_xlatb52 = !!(u_xlat52>=u_xlat5.x);
#else
    u_xlatb52 = u_xlat52>=u_xlat5.x;
#endif
    u_xlat52 = u_xlatb52 ? 1.0 : float(0.0);
    u_xlat36.x = u_xlat52 * u_xlat10_36;
    u_xlat16_15 = _DepthFoamDistance + 9.99999975e-05;
    u_xlat16_15 = u_xlat20.x / u_xlat16_15;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_15 = min(max(u_xlat16_15, 0.0), 1.0);
#else
    u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);
#endif
    u_xlat16_20.x = (-u_xlat16_15) + 1.0;
    u_xlat16_15 = vs_COLOR0.y * _DepthFoamColor.w;
    u_xlat16_50 = u_xlat16_50 * u_xlat16_15;
    u_xlat16_50 = u_xlat36.x * u_xlat16_50;
    u_xlat16_50 = u_xlat33 * u_xlat16_50;
    u_xlat16_50 = u_xlat16_20.x * u_xlat16_50;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_50 = min(max(u_xlat16_50, 0.0), 1.0);
#else
    u_xlat16_50 = clamp(u_xlat16_50, 0.0, 1.0);
#endif
    u_xlat16_2.xyz = _DepthFoamColor.xyz * u_xlat16_2.xyz + (-u_xlat1.xyw);
    u_xlat16_2.xyz = vec3(u_xlat16_50) * u_xlat16_2.xyz + u_xlat1.xyw;
    u_xlat1.xyz = u_xlat6.xyz * vec3(u_xlat21) + u_xlat16_2.xyz;
    u_xlat0.w = u_xlat4.x * vs_COLOR0.w;
    u_xlat4.xyz = vs_TEXCOORD5.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat5.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat5.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat5.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat49 = dot(u_xlat4.xyz, u_xlat5.xyz);
    u_xlat4.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat4.x = sqrt(u_xlat4.x);
    u_xlat20.y = u_xlat4.x * _HeigtFogParams.y;
    u_xlat52 = u_xlat4.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat52 = min(max(u_xlat52, 0.0), 1.0);
#else
    u_xlat52 = clamp(u_xlat52, 0.0, 1.0);
#endif
    u_xlat5.x = (-u_xlat52) + 2.0;
    u_xlat52 = u_xlat52 * u_xlat5.x;
    u_xlat5.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb49 = !!((-u_xlat49)>=u_xlat5.x);
#else
    u_xlatb49 = (-u_xlat49)>=u_xlat5.x;
#endif
    u_xlat5.x = u_xlat52 * _HeigtFogColDelta.w;
    u_xlat49 = (u_xlatb49) ? u_xlat5.x : u_xlat52;
    u_xlat49 = log2(u_xlat49);
    u_xlat49 = u_xlat49 * unity_FogColor.w;
    u_xlat49 = exp2(u_xlat49);
    u_xlat49 = min(u_xlat49, _HeigtFogColBase.w);
    u_xlat52 = vs_TEXCOORD5.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat52 = min(max(u_xlat52, 0.0), 1.0);
#else
    u_xlat52 = clamp(u_xlat52, 0.0, 1.0);
#endif
    u_xlat16_2.x = (-u_xlat52) + 2.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat52;
    u_xlat5.xyz = u_xlat16_2.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat52 = u_xlat4.x + (-_HeigtFogRamp.w);
    u_xlat52 = u_xlat52 * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat52 = min(max(u_xlat52, 0.0), 1.0);
#else
    u_xlat52 = clamp(u_xlat52, 0.0, 1.0);
#endif
    u_xlat6.xyz = (-u_xlat5.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat5.xyz = vec3(u_xlat52) * u_xlat6.xyz + u_xlat5.xyz;
    u_xlat52 = u_xlat4.y * _HeigtFogParams.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb53 = !!(0.00999999978<abs(u_xlat52));
#else
    u_xlatb53 = 0.00999999978<abs(u_xlat52);
#endif
    u_xlat6.x = u_xlat52 * -1.44269502;
    u_xlat6.x = exp2(u_xlat6.x);
    u_xlat6.x = (-u_xlat6.x) + 1.0;
    u_xlat52 = u_xlat6.x / u_xlat52;
    u_xlat16_2.x = (u_xlatb53) ? u_xlat52 : 1.0;
    u_xlat20.x = u_xlat4.y * _HeigtFogParams2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb52 = !!(0.00999999978<abs(u_xlat20.x));
#else
    u_xlatb52 = 0.00999999978<abs(u_xlat20.x);
#endif
    u_xlat53 = u_xlat20.x * -1.44269502;
    u_xlat53 = exp2(u_xlat53);
    u_xlat53 = (-u_xlat53) + 1.0;
    u_xlat20.x = u_xlat53 / u_xlat20.x;
    u_xlat16_2.y = (u_xlatb52) ? u_xlat20.x : 1.0;
    u_xlat20.x = u_xlat4.x * _HeigtFogParams2.y;
    u_xlat16_2.xy = u_xlat16_2.xy * u_xlat20.yx;
    u_xlat16_2.x = exp2((-u_xlat16_2.x));
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_18.x = exp2((-u_xlat16_2.y));
    u_xlat16_2.y = (-u_xlat16_18.x) + 1.0;
    u_xlat16_2.xy = max(u_xlat16_2.xy, vec2(0.0, 0.0));
    u_xlat16_2.x = u_xlat16_2.y + u_xlat16_2.x;
    u_xlat4.x = u_xlat4.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat16_18.x = (-u_xlat4.x) + 2.0;
    u_xlat16_18.x = u_xlat16_18.x * u_xlat4.x;
    u_xlat4.x = u_xlat16_18.x * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat4.x = u_xlat4.x + 1.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat4.x;
    u_xlat4.x = min(u_xlat16_2.x, _HeigtFogColBase.w);
    u_xlat20.x = vs_TEXCOORD5.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat20.x = min(max(u_xlat20.x, 0.0), 1.0);
#else
    u_xlat20.x = clamp(u_xlat20.x, 0.0, 1.0);
#endif
    u_xlat20.xyz = u_xlat20.xxx * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    u_xlat5.xyz = vec3(u_xlat49) * u_xlat5.xyz;
    u_xlat53 = (-u_xlat4.x) + 1.0;
    u_xlat5.xyz = vec3(u_xlat53) * u_xlat5.xyz;
    u_xlat4.xyz = u_xlat20.xyz * u_xlat4.xxx + u_xlat5.xyz;
    u_xlat49 = (-u_xlat49) + 1.0;
    u_xlat49 = u_xlat53 * u_xlat49;
    u_xlat0.xyz = vec3(u_xlat49) * u_xlat1.xyz + u_xlat4.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "MSAA_INTERPOLATION" "MHY_SHADER_HIGH" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	mediump float _MHYZBias;
uniform 	vec4 hlslcc_mtx4x4_mhyJitteredVP[4];
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
out highp vec4 vs_TEXCOORD9;
out highp vec4 vs_TEXCOORD10;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
vec4 u_xlat4;
bool u_xlatb4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
mediump vec4 u_xlat16_6;
vec4 u_xlat7;
mediump vec3 u_xlat16_8;
float u_xlat11;
vec3 u_xlat13;
mediump float u_xlat16_14;
float u_xlat27;
bool u_xlatb27;
float u_xlat29;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4_mhyJitteredVP[1];
    u_xlat2 = hlslcc_mtx4x4_mhyJitteredVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4_mhyJitteredVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4_mhyJitteredVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat3.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    u_xlat3.xyw = u_xlat2.xyw;
    gl_Position = u_xlat3;
    vs_COLOR0 = in_COLOR0;
    u_xlat2.xyw = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat27 = u_xlat2.y * _HeigtFogParams.x;
    u_xlat4.x = u_xlat27 * -1.44269502;
    u_xlat4.x = exp2(u_xlat4.x);
    u_xlat4.x = (-u_xlat4.x) + 1.0;
    u_xlat4.x = u_xlat4.x / u_xlat27;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(0.00999999978<abs(u_xlat27));
#else
    u_xlatb27 = 0.00999999978<abs(u_xlat27);
#endif
    u_xlat16_5.x = (u_xlatb27) ? u_xlat4.x : 1.0;
    u_xlat27 = dot(u_xlat2.xyw, u_xlat2.xyw);
    u_xlat27 = sqrt(u_xlat27);
    u_xlat4.x = u_xlat27 * _HeigtFogParams.y;
    u_xlat16_5.x = u_xlat4.x * u_xlat16_5.x;
    u_xlat16_5.x = exp2((-u_xlat16_5.x));
    u_xlat16_5.x = (-u_xlat16_5.x) + 1.0;
    u_xlat4.x = u_xlat2.y * _HeigtFogParams2.x;
    u_xlat13.x = u_xlat4.x * -1.44269502;
    u_xlat13.x = exp2(u_xlat13.x);
    u_xlat13.x = (-u_xlat13.x) + 1.0;
    u_xlat13.x = u_xlat13.x / u_xlat4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(0.00999999978<abs(u_xlat4.x));
#else
    u_xlatb4 = 0.00999999978<abs(u_xlat4.x);
#endif
    u_xlat16_14 = (u_xlatb4) ? u_xlat13.x : 1.0;
    u_xlat4.x = u_xlat27 * _HeigtFogParams2.y;
    u_xlat16_14 = u_xlat4.x * u_xlat16_14;
    u_xlat16_14 = exp2((-u_xlat16_14));
    u_xlat16_5.y = (-u_xlat16_14) + 1.0;
    u_xlat16_5.xy = max(u_xlat16_5.xy, vec2(0.0, 0.0));
    u_xlat16_5.x = u_xlat16_5.y + u_xlat16_5.x;
    u_xlat4.x = u_xlat27 * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat16_14 = (-u_xlat4.x) + 2.0;
    u_xlat16_14 = u_xlat4.x * u_xlat16_14;
    u_xlat4.x = u_xlat16_14 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat4.x = u_xlat4.x + 1.0;
    u_xlat16_5.x = u_xlat4.x * u_xlat16_5.x;
    u_xlat4.x = min(u_xlat16_5.x, _HeigtFogColBase.w);
    u_xlat13.x = (-u_xlat4.x) + 1.0;
    u_xlat6.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat6.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat6.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat2.x = dot(u_xlat2.xyw, u_xlat6.xyz);
    u_xlat11 = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!((-u_xlat2.x)>=u_xlat11);
#else
    u_xlatb2 = (-u_xlat2.x)>=u_xlat11;
#endif
    u_xlat11 = u_xlat27 * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat11 = min(max(u_xlat11, 0.0), 1.0);
#else
    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
#endif
    u_xlat27 = u_xlat27 + (-_HeigtFogRamp.w);
    u_xlat27 = u_xlat27 * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
    u_xlat29 = (-u_xlat11) + 2.0;
    u_xlat11 = u_xlat29 * u_xlat11;
    u_xlat29 = u_xlat11 * _HeigtFogColDelta.w;
    u_xlat2.x = (u_xlatb2) ? u_xlat29 : u_xlat11;
    u_xlat2.x = log2(u_xlat2.x);
    u_xlat2.x = u_xlat2.x * unity_FogColor.w;
    u_xlat2.x = exp2(u_xlat2.x);
    u_xlat2.x = min(u_xlat2.x, _HeigtFogColBase.w);
    u_xlat11 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat11 = min(max(u_xlat11, 0.0), 1.0);
#else
    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
#endif
    u_xlat16_5.x = (-u_xlat11) + 2.0;
    u_xlat16_5.x = u_xlat11 * u_xlat16_5.x;
    u_xlat6.xyz = u_xlat16_5.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat7.xyz = (-u_xlat6.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat6.xyz = vec3(u_xlat27) * u_xlat7.xyz + u_xlat6.xyz;
    u_xlat6.xyz = u_xlat2.xxx * u_xlat6.xyz;
    u_xlat27 = (-u_xlat2.x) + 1.0;
    vs_TEXCOORD0.w = u_xlat13.x * u_xlat27;
    u_xlat2.xyw = u_xlat13.xxx * u_xlat6.xyz;
    u_xlat27 = u_xlat0.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
    u_xlat13.xyz = vec3(u_xlat27) * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    vs_TEXCOORD0.xyz = u_xlat13.xyz * u_xlat4.xxx + u_xlat2.xyw;
    u_xlat4.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat4.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat4.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat27 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat4.xyz = vec3(u_xlat27) * u_xlat4.xyz;
    u_xlat16_5.x = u_xlat4.y * u_xlat4.y;
    u_xlat16_5.x = u_xlat4.x * u_xlat4.x + (-u_xlat16_5.x);
    u_xlat16_6 = u_xlat4.yzzx * u_xlat4.xyzz;
    u_xlat16_8.x = dot(unity_SHBr, u_xlat16_6);
    u_xlat16_8.y = dot(unity_SHBg, u_xlat16_6);
    u_xlat16_8.z = dot(unity_SHBb, u_xlat16_6);
    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_8.xyz;
    u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat4.w = 1.0;
    u_xlat16_8.x = dot(unity_SHAr, u_xlat4);
    u_xlat16_8.y = dot(unity_SHAg, u_xlat4);
    u_xlat16_8.z = dot(unity_SHAb, u_xlat4);
    u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_8.xyz;
    vs_TEXCOORD1.xyz = u_xlat16_5.xyz;
    vs_TEXCOORD1.w = 1.0;
    u_xlat27 = u_xlat3.y * _ProjectionParams.x;
    u_xlat7.w = u_xlat27 * 0.5;
    u_xlat7.xz = u_xlat3.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.z = u_xlat2.z;
    u_xlat3.xy = u_xlat7.zz + u_xlat7.xw;
    vs_TEXCOORD2 = u_xlat3;
    vs_TEXCOORD4.xyw = u_xlat3.xyw;
    u_xlat27 = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat27 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat27;
    u_xlat27 = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat27;
    u_xlat27 = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat27;
    vs_TEXCOORD3.z = (-u_xlat27);
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD3.w = 0.0;
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD5.w = 0.0;
    vs_TEXCOORD6.xyz = u_xlat4.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[1].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].www + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * in_POSITION0.yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.zzz + u_xlat1.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.www + u_xlat1.xyz;
    vs_TEXCOORD7.xyz = u_xlat1.xyz * vec3(-1.0, -1.0, 1.0);
    vs_TEXCOORD7.w = 0.0;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat27 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat1.xyz = vec3(u_xlat27) * u_xlat1.xyz;
    vs_TEXCOORD8.xyz = u_xlat1.xyz;
    vs_TEXCOORD8.w = 0.0;
    u_xlat2.xyz = u_xlat1.yzx * u_xlat4.zxy;
    u_xlat1.xyz = u_xlat4.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
    u_xlat27 = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD9.xyz = vec3(u_xlat27) * u_xlat1.xyz;
    vs_TEXCOORD9.w = 0.0;
    u_xlat27 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat27 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat27;
    vs_TEXCOORD10.w = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat27;
    vs_TEXCOORD10.xyz = u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowPos[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	mediump float _CausticUVScale;
uniform 	mediump float _CausticSpeed;
uniform 	mediump vec4 _CausticColor;
uniform 	mediump float _CausticDepth;
uniform 	mediump float _CausticDistance;
uniform 	mediump float _CausticDistortionValue;
uniform 	mediump vec4 _DepthFoamMask_ST;
uniform 	mediump float _DepthFoamSpeed;
uniform 	mediump vec4 _DepthFoamColor;
uniform 	mediump float _DepthFoamExtent;
uniform 	mediump float _DepthFoamDistance;
uniform 	mediump float _DepthFoamSubdivision;
uniform 	mediump float _DepthFoamWidth;
uniform 	mediump float _DepthFoamPhaseScale;
uniform 	mediump float _DepthFoamCloseFadeOffset;
uniform 	mediump float _DepthFoamCloseFadeDistance;
uniform 	float _NormalMapScale;
uniform 	float _Normal01_U_Speed;
uniform 	float _Normal01_VSpeed;
uniform 	float _NormalMapBias;
uniform 	float _Normal02_U_Speed;
uniform 	float _Normal02_V_Speed;
uniform 	float _RefractionIntensity;
uniform 	float _OpacityByDepth;
uniform 	float _SpecularIntensity;
uniform 	vec3 _ES_MoonDirection;
uniform 	vec3 _ES_SunDirection;
uniform 	float _Gloss;
uniform 	float _ShoreTransparency;
uniform 	float _SpecularPower;
uniform 	vec4 _ShallowColor;
uniform 	float _ShoreFade;
uniform 	vec4 _DeepColor;
uniform 	float _DeepColorDepth;
uniform 	float _DeepColorFade;
uniform 	vec4 _DistortionIntensity;
uniform 	float _SSRDistortion;
uniform 	float _SSRDistortion_Shore;
uniform 	float _SSRIntensity;
uniform 	float _ReflectionIntensity;
uniform 	float _FresnelPower;
uniform 	float _ShoreReflectionFade;
uniform 	vec3 _ES_MainLightColor;
uniform 	mediump float _RippleTillingScale;
uniform 	mediump float _Ripple02Rotate;
uniform 	mediump float _ProjectUVScale;
uniform 	mediump float _CausticFade;
uniform 	mediump float _CausticFadeExponent;
uniform 	vec4 _ReflectionSkyCubeMap_HDR;
uniform lowp sampler2D _Normal01;
uniform lowp sampler2D _Normal02;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _SceneScaledBufferBeforTransParent;
uniform lowp samplerCube _ReflectionSkyCubeMap;
uniform lowp sampler2D _SSRTexture;
uniform lowp sampler2D _DepthFoamMask;
uniform lowp sampler2D _WaterRippleTex;
uniform lowp sampler2DShadow hlslcc_zcmp_CascadeShadowMapTexture;
uniform lowp sampler2D _CascadeShadowMapTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD8;
in highp vec4 vs_TEXCOORD9;
in highp vec4 vs_TEXCOORD10;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
lowp float u_xlat10_0;
int u_xlati0;
uint u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec3 u_xlat10_1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
lowp vec4 u_xlat10_2;
bvec4 u_xlatb2;
mediump vec3 u_xlat16_3;
vec4 u_xlat4;
mediump vec3 u_xlat16_4;
lowp vec4 u_xlat10_4;
vec3 u_xlat5;
lowp float u_xlat10_5;
vec4 u_xlat6;
vec4 u_xlat7;
mediump vec3 u_xlat16_7;
vec4 u_xlat8;
vec3 u_xlat9;
vec3 u_xlat10;
mediump vec3 u_xlat16_10;
vec3 u_xlat11;
vec3 u_xlat12;
lowp vec3 u_xlat10_12;
vec3 u_xlat13;
vec3 u_xlat14;
vec3 u_xlat15;
mediump float u_xlat16_16;
mediump vec2 u_xlat16_17;
float u_xlat18;
bool u_xlatb18;
vec3 u_xlat19;
mediump vec3 u_xlat16_21;
vec3 u_xlat23;
mediump float u_xlat16_23;
bool u_xlatb23;
vec3 u_xlat25;
bool u_xlatb25;
float u_xlat26;
vec2 u_xlat36;
mediump float u_xlat16_36;
lowp float u_xlat10_36;
float u_xlat37;
lowp float u_xlat10_37;
int u_xlati37;
uint u_xlatu37;
bool u_xlatb37;
float u_xlat41;
float u_xlat42;
lowp float u_xlat10_54;
float u_xlat55;
mediump float u_xlat16_55;
mediump float u_xlat16_57;
float u_xlat59;
mediump float u_xlat16_59;
bool u_xlatb59;
float u_xlat60;
bool u_xlatb60;
float u_xlat61;
void main()
{
    u_xlat0 = vs_TEXCOORD5.xzxz * vec4(_ProjectUVScale, _ProjectUVScale, _RippleTillingScale, _RippleTillingScale);
    u_xlat1.x = _Time.y * _Normal01_U_Speed + u_xlat0.x;
    u_xlat1.yz = _Time.yy * vec2(_Normal01_VSpeed, _Normal02_U_Speed) + u_xlat0.yx;
    u_xlat1.w = _Time.y * _Normal02_V_Speed + u_xlat0.y;
    u_xlat10_2.xyz = texture(_Normal01, u_xlat1.xy, _NormalMapBias).xyz;
    u_xlat16_2.xyz = u_xlat10_2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_3.xy = u_xlat16_2.xy * vec2(_NormalMapScale);
    u_xlat10_1.xyz = texture(_Normal02, u_xlat1.zw, _NormalMapBias).xyz;
    u_xlat16_2.w = -1.0;
    u_xlat16_4.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_2.wwz;
    u_xlat16_4.xy = u_xlat16_4.xy * vec2(_NormalMapScale);
    u_xlat16_3.z = -1.0;
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat0.x = float(1.0) / vs_TEXCOORD4.w;
    u_xlat1.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat18 = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat18 = _ZBufferParams.z * u_xlat18 + _ZBufferParams.w;
    u_xlat18 = float(1.0) / u_xlat18;
    u_xlat1.x = vs_TEXCOORD10.w + 9.99999975e-05;
    u_xlat1.x = (-u_xlat18) / u_xlat1.x;
    u_xlat19.xyz = u_xlat1.xxx * vs_TEXCOORD10.xyz;
    u_xlat5.xyz = vs_TEXCOORD10.xyz * u_xlat1.xxx + _WorldSpaceCameraPos.xyz;
    u_xlat6.xyz = (-u_xlat5.xyz) + vs_TEXCOORD5.xyz;
    u_xlat1.x = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlat6.xz = u_xlat16_3.xy * vec2(vec2(_RefractionIntensity, _RefractionIntensity));
    u_xlat0.x = u_xlat0.x * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat6.xz = u_xlat0.xx * u_xlat6.xz;
    u_xlat6.xz = u_xlat6.xz * vs_TEXCOORD4.ww;
    u_xlat0.x = u_xlat18 + (-vs_TEXCOORD4.w);
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat7.xy = u_xlat0.xx * u_xlat6.xz;
    u_xlat7.z = 0.0;
    u_xlat6.xzw = u_xlat7.xyz + vs_TEXCOORD4.xyw;
    u_xlat0.xy = u_xlat6.xz / u_xlat6.ww;
    u_xlat0.x = texture(_CameraDepthTexture, u_xlat0.xy).x;
    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat0.x = u_xlat0.x + (-vs_TEXCOORD4.w);
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat6.xzw = u_xlat0.xxx * u_xlat7.xyz + vs_TEXCOORD4.xyw;
    u_xlat0.xy = u_xlat6.xz / u_xlat6.ww;
    u_xlat0.x = texture(_CameraDepthTexture, u_xlat0.xy).x;
    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat0.x = u_xlat0.x + (-vs_TEXCOORD4.w);
    u_xlat18 = 0.100000001 / _OpacityByDepth;
    u_xlat18 = u_xlat18 * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat16_4.xz = u_xlat16_3.xy;
    u_xlat16_4.y = 1.0;
    u_xlat16_59 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);
    u_xlat16_59 = inversesqrt(u_xlat16_59);
    u_xlat16_7.xyz = u_xlat16_4.xyz * vec3(u_xlat16_59);
#ifdef UNITY_ADRENO_ES3
    u_xlatb59 = !!(0.0>=_ES_MoonDirection.y);
#else
    u_xlatb59 = 0.0>=_ES_MoonDirection.y;
#endif
    u_xlat8.xyz = (bool(u_xlatb59)) ? _ES_SunDirection.xyz : _ES_MoonDirection.xyz;
    u_xlat9.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat59 = dot(u_xlat9.xyz, u_xlat9.xyz);
    u_xlat60 = inversesqrt(u_xlat59);
    u_xlat10.xyz = vec3(u_xlat60) * u_xlat9.xyz;
    u_xlat8.xyz = u_xlat9.xyz * vec3(u_xlat60) + u_xlat8.xyz;
    u_xlat60 = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat60 = inversesqrt(u_xlat60);
    u_xlat8.xyz = vec3(u_xlat60) * u_xlat8.xyz;
    u_xlat60 = dot(u_xlat16_7.xyz, u_xlat8.xyz);
    u_xlat25.x = _Gloss * 128.0;
    u_xlat60 = max(u_xlat60, 9.99999975e-05);
    u_xlat60 = log2(u_xlat60);
    u_xlat60 = u_xlat60 * u_xlat25.x;
    u_xlat60 = exp2(u_xlat60);
    u_xlat60 = u_xlat60 * _SpecularIntensity;
    u_xlat60 = max(u_xlat60, 0.0);
    u_xlat60 = min(u_xlat60, 16.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb25 = !!(_ES_MoonDirection.y>=9.99999975e-05);
#else
    u_xlatb25 = _ES_MoonDirection.y>=9.99999975e-05;
#endif
    u_xlat25.x = u_xlatb25 ? 1.0 : float(0.0);
    u_xlat61 = _ES_MoonDirection.y + -1.0;
    u_xlat25.x = u_xlat25.x * u_xlat61 + 1.0;
    u_xlat61 = float(1.0) / _ShoreTransparency;
    u_xlat8.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat8.xyz = u_xlat8.xxx * vs_TEXCOORD6.xyz;
    u_xlat8.x = dot(u_xlat10.xyz, u_xlat8.xyz);
    u_xlat8.x = (-u_xlat8.x) + 1.0;
    u_xlat8.x = max(u_xlat8.x, 9.99999975e-05);
    u_xlat8.x = log2(u_xlat8.x);
    u_xlat26 = u_xlat8.x * _SpecularPower;
    u_xlat26 = exp2(u_xlat26);
    u_xlat9.xyz = u_xlat25.xxx * _LightColor0.xyz;
    u_xlat9.xyz = vec3(u_xlat60) * u_xlat9.xyz;
    u_xlat60 = u_xlat0.x + -1.0;
    u_xlat60 = u_xlat61 * u_xlat60;
    u_xlat60 = u_xlat60 * 0.100000001;
#ifdef UNITY_ADRENO_ES3
    u_xlat60 = min(max(u_xlat60, 0.0), 1.0);
#else
    u_xlat60 = clamp(u_xlat60, 0.0, 1.0);
#endif
    u_xlat9.xyz = vec3(u_xlat60) * u_xlat9.xyz;
    u_xlat60 = u_xlat0.x * u_xlat61;
#ifdef UNITY_ADRENO_ES3
    u_xlat60 = min(max(u_xlat60, 0.0), 1.0);
#else
    u_xlat60 = clamp(u_xlat60, 0.0, 1.0);
#endif
    u_xlat60 = max(u_xlat60, 9.99999975e-05);
    u_xlat60 = log2(u_xlat60);
    u_xlat60 = u_xlat60 * _ShoreFade;
    u_xlat60 = exp2(u_xlat60);
    u_xlat11.xyz = _ShallowColor.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat11.xyz = vec3(u_xlat60) * u_xlat11.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat6.xz = u_xlat6.xz / vs_TEXCOORD4.ww;
    u_xlat10_12.xyz = texture(_SceneScaledBufferBeforTransParent, u_xlat6.xz).xyz;
    u_xlat6.x = u_xlat1.x * _CausticDistortionValue;
    u_xlat6.xz = u_xlat6.xx * u_xlat16_7.xz;
    u_xlat7.z = _Time.y * _CausticSpeed;
    u_xlat6.xz = u_xlat5.xz * vec2(_CausticUVScale) + u_xlat6.xz;
    u_xlat13.x = _Normal01_U_Speed * 25.0;
    u_xlat13.y = _Normal01_VSpeed * 25.0;
    u_xlat7.xy = u_xlat7.zz * u_xlat13.xy + u_xlat6.xz;
    u_xlat13.x = dot(u_xlat7.xyz, vec3(-2.0, 3.0, 1.0));
    u_xlat13.y = dot(u_xlat7.xyz, vec3(-1.0, -2.0, 2.0));
    u_xlat13.z = dot(u_xlat7.xzy, vec3(2.0, 2.0, 1.0));
    u_xlat7.xyz = u_xlat13.xyz * vec3(0.400000006, 0.400000006, 0.400000006);
    u_xlat14.x = dot(u_xlat7.xyz, vec3(-2.0, 3.0, 1.0));
    u_xlat14.y = dot(u_xlat7.xyz, vec3(-1.0, -2.0, 2.0));
    u_xlat14.z = dot(u_xlat7.xzy, vec3(2.0, 2.0, 1.0));
    u_xlat7.xyz = u_xlat14.xyz * vec3(0.300000012, 0.300000012, 0.300000012);
    u_xlat6.x = dot(u_xlat7.xyz, vec3(-2.0, 3.0, 1.0));
    u_xlat6.z = dot(u_xlat7.xyz, vec3(-1.0, -2.0, 2.0));
    u_xlat7.x = dot(u_xlat7.xzy, vec3(2.0, 2.0, 1.0));
    u_xlat25.xyz = fract(u_xlat13.xyz);
    u_xlat25.xyz = (-u_xlat25.xyz) + vec3(0.5, 0.5, 0.5);
    u_xlat25.x = dot(u_xlat25.xyz, u_xlat25.xyz);
    u_xlat13.xyz = fract(u_xlat14.xyz);
    u_xlat13.xyz = (-u_xlat13.xyz) + vec3(0.5, 0.5, 0.5);
    u_xlat25.y = dot(u_xlat13.xyz, u_xlat13.xyz);
    u_xlat25.xy = sqrt(u_xlat25.xy);
    u_xlat25.x = min(u_xlat25.y, u_xlat25.x);
    u_xlat13.xy = fract(u_xlat6.xz);
    u_xlat13.z = fract(u_xlat7.x);
    u_xlat7.xzw = (-u_xlat13.xyz) + vec3(0.5, 0.5, 0.5);
    u_xlat6.x = dot(u_xlat7.xzw, u_xlat7.xzw);
    u_xlat6.x = sqrt(u_xlat6.x);
    u_xlat6.x = min(u_xlat6.x, u_xlat25.x);
    u_xlat6.x = log2(u_xlat6.x);
    u_xlat6.x = u_xlat6.x * 7.0;
    u_xlat6.x = exp2(u_xlat6.x);
    u_xlat6.x = u_xlat6.x * 25.0;
    u_xlat16_4.xy = vec2(float(_CausticDepth) + float(9.99999975e-05), float(_CausticDistance) + float(9.99999975e-05));
    u_xlat42 = u_xlat6.y / u_xlat16_4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat42 = min(max(u_xlat42, 0.0), 1.0);
#else
    u_xlat42 = clamp(u_xlat42, 0.0, 1.0);
#endif
    u_xlat19.x = dot(u_xlat19.xyz, u_xlat19.xyz);
    u_xlat19.x = sqrt(u_xlat19.x);
    u_xlat19.x = u_xlat19.x / u_xlat16_4.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat19.x = min(max(u_xlat19.x, 0.0), 1.0);
#else
    u_xlat19.x = clamp(u_xlat19.x, 0.0, 1.0);
#endif
    u_xlat19.x = (-u_xlat19.x) + 1.0;
    u_xlat19.x = u_xlat19.x * u_xlat42;
    u_xlat7.xyz = u_xlat5.xyz + (-unity_ShadowSplitSpheres[0].xyz);
    u_xlat13.xyz = u_xlat5.xyz + (-unity_ShadowSplitSpheres[1].xyz);
    u_xlat14.xyz = u_xlat5.xyz + (-unity_ShadowSplitSpheres[2].xyz);
    u_xlat15.xyz = u_xlat5.xyz + (-unity_ShadowSplitSpheres[3].xyz);
    u_xlat2.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat2.y = dot(u_xlat13.xyz, u_xlat13.xyz);
    u_xlat2.z = dot(u_xlat14.xyz, u_xlat14.xyz);
    u_xlat2.w = dot(u_xlat15.xyz, u_xlat15.xyz);
    u_xlatb2 = lessThan(u_xlat2, unity_ShadowSplitSqRadii);
    u_xlat2 = mix(vec4(0.0, 0.0, 0.0, 0.0), vec4(1.0, 1.0, 1.0, 1.0), vec4(u_xlatb2));
    u_xlat16_57 = u_xlat2.y + u_xlat2.x;
    u_xlat16_4.x = u_xlat2.z + u_xlat16_57;
    u_xlat7.x = -0.0;
    u_xlat7.y = (-u_xlat2.x);
    u_xlat7.z = (-u_xlat16_57);
    u_xlat7.w = (-u_xlat16_4.x);
    u_xlat2 = u_xlat2 + u_xlat7;
    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat16_57 = dot(u_xlat2, vec4(1.0, 1.0, 1.0, 1.0));
#ifdef UNITY_ADRENO_ES3
    u_xlatb37 = !!(u_xlat16_57>=0.5);
#else
    u_xlatb37 = u_xlat16_57>=0.5;
#endif
    if(u_xlatb37){
        u_xlat37 = dot(u_xlat2.yzw, vec3(1.0, 2.0, 3.0));
        u_xlat37 = min(u_xlat37, 3.0);
        u_xlatu37 = uint(u_xlat37);
        u_xlat5.xyz = u_xlat5.xyz + (-unity_ShadowPos[int(u_xlatu37)].xyz);
        u_xlati37 = int(u_xlatu37) << 2;
        u_xlat7.xyz = u_xlat5.yyy * hlslcc_mtx4x4unity_WorldToShadow[(u_xlati37 + 1)].xyz;
        u_xlat7.xyz = hlslcc_mtx4x4unity_WorldToShadow[u_xlati37].xyz * u_xlat5.xxx + u_xlat7.xyz;
        u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToShadow[(u_xlati37 + 2)].xyz * u_xlat5.zzz + u_xlat7.xyz;
        u_xlat5.xyz = u_xlat5.xyz + hlslcc_mtx4x4unity_WorldToShadow[(u_xlati37 + 3)].xyz;
        vec3 txVec0 = vec3(u_xlat5.xy,u_xlat5.z);
        u_xlat10_37 = textureLod(hlslcc_zcmp_CascadeShadowMapTexture, txVec0, 0.0);
        u_xlat16_55 = (-_LightShadowData.x) + 1.0;
        u_xlat37 = u_xlat10_37 * u_xlat16_55 + _LightShadowData.x;
    } else {
        u_xlat37 = 1.0;
    //ENDIF
    }
    u_xlat19.x = u_xlat37 * u_xlat19.x;
    u_xlat16_4.xyz = _LightColor0.xyz * _CausticColor.xyz;
    u_xlat16_4.xyz = u_xlat6.xxx * u_xlat16_4.xyz;
    u_xlat16_4.xyz = u_xlat19.xxx * u_xlat16_4.xyz;
    u_xlat16_57 = _CausticFade + 9.99999975e-05;
    u_xlat1.x = u_xlat1.x / u_xlat16_57;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.x = log2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _CausticFadeExponent;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat1.x = (-u_xlat1.x) + 1.0;
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat1.xxx + vec3(1.0, 1.0, 1.0);
    u_xlat16_1.xyz = u_xlat16_4.xyz * u_xlat10_12.xyz;
    u_xlat5.xyz = u_xlat16_1.xyz * u_xlat11.xyz;
    u_xlat55 = 0.100000001 / _DeepColorDepth;
    u_xlat55 = u_xlat0.x * u_xlat55;
#ifdef UNITY_ADRENO_ES3
    u_xlat55 = min(max(u_xlat55, 0.0), 1.0);
#else
    u_xlat55 = clamp(u_xlat55, 0.0, 1.0);
#endif
    u_xlat55 = max(u_xlat55, 9.99999975e-05);
    u_xlat55 = log2(u_xlat55);
    u_xlat55 = u_xlat55 * _DeepColorFade;
    u_xlat55 = exp2(u_xlat55);
    u_xlat7.xyz = (-u_xlat11.xyz) * u_xlat16_1.xyz + _DeepColor.xyz;
    u_xlat7.xyz = vec3(u_xlat55) * u_xlat7.xyz + u_xlat5.xyz;
    u_xlat12.xyz = u_xlat16_3.xyz * _DistortionIntensity.xyz;
    u_xlat13.x = vs_TEXCOORD8.x;
    u_xlat13.y = vs_TEXCOORD9.x;
    u_xlat13.z = vs_TEXCOORD6.x;
    u_xlat13.x = dot(u_xlat13.xyz, u_xlat12.xyz);
    u_xlat14.x = vs_TEXCOORD8.y;
    u_xlat14.y = vs_TEXCOORD9.y;
    u_xlat14.z = vs_TEXCOORD6.y;
    u_xlat13.y = dot(u_xlat14.xyz, u_xlat12.xyz);
    u_xlat14.x = vs_TEXCOORD8.z;
    u_xlat14.y = vs_TEXCOORD9.z;
    u_xlat14.z = vs_TEXCOORD6.z;
    u_xlat13.z = dot(u_xlat14.xyz, u_xlat12.xyz);
    u_xlat55 = dot(u_xlat13.xyz, u_xlat13.xyz);
    u_xlat55 = inversesqrt(u_xlat55);
    u_xlat13.xyz = vec3(u_xlat55) * u_xlat13.xyz;
    u_xlat55 = dot((-u_xlat10.xyz), u_xlat13.xyz);
    u_xlat55 = u_xlat55 + u_xlat55;
    u_xlat10.xyz = u_xlat13.xyz * (-vec3(u_xlat55)) + (-u_xlat10.xyz);
    u_xlat10_2 = textureLod(_ReflectionSkyCubeMap, u_xlat10.xyz, 0.0);
    u_xlat16_3.x = u_xlat10_2.w + -1.0;
    u_xlat16_3.x = _ReflectionSkyCubeMap_HDR.w * u_xlat16_3.x + 1.0;
    u_xlat16_3.x = log2(u_xlat16_3.x);
    u_xlat16_3.x = u_xlat16_3.x * _ReflectionSkyCubeMap_HDR.y;
    u_xlat16_3.x = exp2(u_xlat16_3.x);
    u_xlat16_3.x = u_xlat16_3.x * _ReflectionSkyCubeMap_HDR.x;
    u_xlat16_21.xyz = u_xlat10_2.xyz * u_xlat16_3.xxx;
    u_xlat6.xz = u_xlat12.xy * vec2(_SSRDistortion);
    u_xlat55 = float(1.0) / _SSRDistortion_Shore;
    u_xlat55 = u_xlat0.x * u_xlat55;
#ifdef UNITY_ADRENO_ES3
    u_xlat55 = min(max(u_xlat55, 0.0), 1.0);
#else
    u_xlat55 = clamp(u_xlat55, 0.0, 1.0);
#endif
    u_xlat6.xz = vec2(u_xlat55) * u_xlat6.xz;
    u_xlat6.xz = u_xlat6.xz * vs_TEXCOORD4.ww + vs_TEXCOORD4.xy;
    u_xlat6.xz = u_xlat6.xz / vs_TEXCOORD4.ww;
    u_xlat10_4 = texture(_SSRTexture, u_xlat6.xz).wxyz;
    u_xlat16_10.xyz = (-u_xlat16_3.xxx) * u_xlat10_2.xyz + u_xlat10_4.yzw;
    u_xlat10.xyz = u_xlat16_10.xyz * vec3(vec3(_SSRIntensity, _SSRIntensity, _SSRIntensity));
    u_xlat16_4.x = u_xlat10_4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat10.xyz = u_xlat16_4.xxx * u_xlat10.xyz + u_xlat16_21.xyz;
    u_xlat55 = u_xlat8.x * _FresnelPower;
    u_xlat55 = exp2(u_xlat55);
    u_xlat55 = u_xlat55 * _ReflectionIntensity;
    u_xlat6.x = float(1.0) / _ShoreReflectionFade;
    u_xlat0.x = u_xlat0.x * u_xlat6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x * u_xlat55;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat8.xzw = (-u_xlat7.xyz) + u_xlat10.xyz;
    u_xlat7.xyz = u_xlat0.xxx * u_xlat8.xzw + u_xlat7.xyz;
    u_xlat1.xyz = (-u_xlat11.xyz) * u_xlat16_1.xyz + u_xlat7.xyz;
    u_xlat1.xyz = vec3(u_xlat60) * u_xlat1.xyz + u_xlat5.xyz;
    u_xlat0.x = (-vs_TEXCOORD5.y) * _WorldSpaceLightPos0.w + _WorldSpaceLightPos0.y;
    u_xlat16_3.x = max(u_xlat0.x, 0.0);
    u_xlat5.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowSplitSpheres[0].xyz);
    u_xlat6.xzw = vs_TEXCOORD5.xyz + (-unity_ShadowSplitSpheres[1].xyz);
    u_xlat7.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowSplitSpheres[2].xyz);
    u_xlat8.xzw = vs_TEXCOORD5.xyz + (-unity_ShadowSplitSpheres[3].xyz);
    u_xlat2.x = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat2.y = dot(u_xlat6.xzw, u_xlat6.xzw);
    u_xlat2.z = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat2.w = dot(u_xlat8.xzw, u_xlat8.xzw);
    u_xlatb2 = lessThan(u_xlat2, unity_ShadowSplitSqRadii);
    u_xlat2 = mix(vec4(0.0, 0.0, 0.0, 0.0), vec4(1.0, 1.0, 1.0, 1.0), vec4(u_xlatb2));
    u_xlat16_21.x = u_xlat2.y + u_xlat2.x;
    u_xlat16_21.y = u_xlat2.z + u_xlat16_21.x;
    u_xlat4.x = -0.0;
    u_xlat4.y = (-u_xlat2.x);
    u_xlat4.zw = (-u_xlat16_21.xy);
    u_xlat2 = u_xlat2 + u_xlat4;
    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat16_21.x = dot(u_xlat2, vec4(1.0, 1.0, 1.0, 1.0));
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat16_21.x>=0.5);
#else
    u_xlatb0 = u_xlat16_21.x>=0.5;
#endif
    if(u_xlatb0){
        u_xlat0.x = dot(u_xlat2.yzw, vec3(1.0, 2.0, 3.0));
        u_xlat0.x = min(u_xlat0.x, 3.0);
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat5.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowPos[int(u_xlatu0)].xyz);
        u_xlati0 = int(u_xlatu0) << 2;
        u_xlat6.xzw = u_xlat5.yyy * hlslcc_mtx4x4unity_WorldToShadow[(u_xlati0 + 1)].xyz;
        u_xlat6.xzw = hlslcc_mtx4x4unity_WorldToShadow[u_xlati0].xyz * u_xlat5.xxx + u_xlat6.xzw;
        u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToShadow[(u_xlati0 + 2)].xyz * u_xlat5.zzz + u_xlat6.xzw;
        u_xlat5.xyz = u_xlat5.xyz + hlslcc_mtx4x4unity_WorldToShadow[(u_xlati0 + 3)].xyz;
        vec3 txVec1 = vec3(u_xlat5.xy,u_xlat5.z);
        u_xlat10_0 = textureLod(hlslcc_zcmp_CascadeShadowMapTexture, txVec1, 0.0);
        u_xlat16_55 = (-_LightShadowData.x) + 1.0;
        u_xlat0.x = u_xlat10_0 * u_xlat16_55 + _LightShadowData.x;
    } else {
        u_xlat0.x = 1.0;
    //ENDIF
    }
    u_xlat16_3.xyz = u_xlat16_3.xxx * _LightColor0.xyz;
    u_xlat5.xyz = u_xlat16_3.xyz * u_xlat0.xxx + vs_TEXCOORD1.xyz;
    u_xlat16_3.xyz = u_xlat5.xyz * vec3(0.300000012, 0.300000012, 0.300000012) + vec3(0.699999988, 0.699999988, 0.699999988);
    u_xlat0.x = sqrt(u_xlat59);
    u_xlat16_57 = u_xlat0.x + (-_DepthFoamCloseFadeOffset);
    u_xlat16_57 = u_xlat16_57 / _DepthFoamCloseFadeDistance;
    u_xlat16_16 = vs_COLOR0.x * _DepthFoamExtent;
    u_xlat55 = max(u_xlat6.y, 0.0);
    u_xlat55 = min(u_xlat16_16, u_xlat55);
    u_xlat16_16 = _DepthFoamExtent * vs_COLOR0.x + 9.99999975e-05;
    u_xlat55 = u_xlat55 / u_xlat16_16;
    u_xlat55 = (-u_xlat55) + 1.0;
    u_xlat5.xy = vec2(_Time.y * _DepthFoamMask_ST.z, _Time.y * _DepthFoamMask_ST.w);
    u_xlat5.xy = fract(u_xlat5.xy);
    u_xlat5.xy = _DepthFoamMask_ST.xy * vs_TEXCOORD5.xz + u_xlat5.xy;
    u_xlat10_5 = texture(_DepthFoamMask, u_xlat5.xy, -1.0).x;
    u_xlat23.x = vs_TEXCOORD5.z + vs_TEXCOORD5.x;
    u_xlat23.x = u_xlat23.x * _DepthFoamPhaseScale;
    u_xlat23.x = _DepthFoamSpeed * _Time.y + u_xlat23.x;
    u_xlat41 = (-u_xlat55) + 1.0;
    u_xlat16_16 = _DepthFoamSubdivision * u_xlat55 + u_xlat23.x;
    u_xlat16_16 = sin(u_xlat16_16);
    u_xlat16_16 = _DepthFoamWidth * u_xlat55 + u_xlat16_16;
    u_xlat16_23 = u_xlat10_5 * 2.0 + -1.0;
    u_xlat23.x = u_xlat16_23 + u_xlat16_16;
#ifdef UNITY_ADRENO_ES3
    u_xlatb23 = !!(u_xlat23.x>=u_xlat41);
#else
    u_xlatb23 = u_xlat23.x>=u_xlat41;
#endif
    u_xlat23.x = u_xlatb23 ? 1.0 : float(0.0);
    u_xlat5.x = u_xlat23.x * u_xlat10_5;
    u_xlat16_16 = _DepthFoamDistance + 9.99999975e-05;
    u_xlat16_16 = u_xlat0.x / u_xlat16_16;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat16_0 = (-u_xlat16_16) + 1.0;
    u_xlat16_16 = vs_COLOR0.y * _DepthFoamColor.w;
    u_xlat16_57 = u_xlat16_57 * u_xlat16_16;
    u_xlat16_57 = u_xlat5.x * u_xlat16_57;
    u_xlat16_57 = u_xlat55 * u_xlat16_57;
    u_xlat16_57 = u_xlat16_0 * u_xlat16_57;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_57 = min(max(u_xlat16_57, 0.0), 1.0);
#else
    u_xlat16_57 = clamp(u_xlat16_57, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = _DepthFoamColor.xyz * u_xlat16_3.xyz + (-u_xlat1.xyz);
    u_xlat16_3.xyz = vec3(u_xlat16_57) * u_xlat16_3.xyz + u_xlat1.xyz;
    u_xlat16_0 = max(_LightColor0.w, 0.5);
    u_xlat1.xyz = u_xlat9.xyz * vec3(u_xlat26) + u_xlat16_3.xyz;
    u_xlat36.xy = fract(u_xlat0.zw);
    u_xlat16_3.xy = u_xlat36.xy * vec2(1.14999998, 1.14999998);
    u_xlat16_16 = sin(_Ripple02Rotate);
    u_xlat16_17.x = cos(_Ripple02Rotate);
    u_xlat5.x = (-u_xlat16_16);
    u_xlat16_17.y = u_xlat16_16;
    u_xlat6.x = dot(u_xlat16_3.xy, u_xlat16_17.xy);
    u_xlat5.y = u_xlat16_17.x;
    u_xlat6.y = dot(u_xlat16_3.xy, u_xlat5.xy);
    u_xlat10_36 = texture(_WaterRippleTex, u_xlat36.xy).x;
    u_xlat10_54 = texture(_WaterRippleTex, u_xlat6.xy).x;
    u_xlat16_36 = u_xlat10_54 + u_xlat10_36;
    u_xlat36.x = u_xlat16_36 * u_xlat18;
    u_xlat5.xyz = _ES_MainLightColor.xyz * vec3(u_xlat16_0) + (-u_xlat1.xyz);
    u_xlat0.xzw = u_xlat36.xxx * u_xlat5.xyz + u_xlat1.xyz;
    u_xlat1.w = u_xlat18 * vs_COLOR0.w;
    u_xlat5.xyz = vs_TEXCOORD5.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat6.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat6.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat6.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat18 = dot(u_xlat5.xyz, u_xlat6.xyz);
    u_xlat5.x = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat5.x = sqrt(u_xlat5.x);
    u_xlat23.y = u_xlat5.x * _HeigtFogParams.y;
    u_xlat59 = u_xlat5.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat59 = min(max(u_xlat59, 0.0), 1.0);
#else
    u_xlat59 = clamp(u_xlat59, 0.0, 1.0);
#endif
    u_xlat6.x = (-u_xlat59) + 2.0;
    u_xlat59 = u_xlat59 * u_xlat6.x;
    u_xlat6.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!((-u_xlat18)>=u_xlat6.x);
#else
    u_xlatb18 = (-u_xlat18)>=u_xlat6.x;
#endif
    u_xlat6.x = u_xlat59 * _HeigtFogColDelta.w;
    u_xlat18 = (u_xlatb18) ? u_xlat6.x : u_xlat59;
    u_xlat18 = log2(u_xlat18);
    u_xlat18 = u_xlat18 * unity_FogColor.w;
    u_xlat18 = exp2(u_xlat18);
    u_xlat18 = min(u_xlat18, _HeigtFogColBase.w);
    u_xlat59 = vs_TEXCOORD5.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat59 = min(max(u_xlat59, 0.0), 1.0);
#else
    u_xlat59 = clamp(u_xlat59, 0.0, 1.0);
#endif
    u_xlat16_3.x = (-u_xlat59) + 2.0;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat59;
    u_xlat6.xyz = u_xlat16_3.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat59 = u_xlat5.x + (-_HeigtFogRamp.w);
    u_xlat59 = u_xlat59 * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat59 = min(max(u_xlat59, 0.0), 1.0);
#else
    u_xlat59 = clamp(u_xlat59, 0.0, 1.0);
#endif
    u_xlat7.xyz = (-u_xlat6.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat6.xyz = vec3(u_xlat59) * u_xlat7.xyz + u_xlat6.xyz;
    u_xlat59 = u_xlat5.y * _HeigtFogParams.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb60 = !!(0.00999999978<abs(u_xlat59));
#else
    u_xlatb60 = 0.00999999978<abs(u_xlat59);
#endif
    u_xlat7.x = u_xlat59 * -1.44269502;
    u_xlat7.x = exp2(u_xlat7.x);
    u_xlat7.x = (-u_xlat7.x) + 1.0;
    u_xlat59 = u_xlat7.x / u_xlat59;
    u_xlat16_3.x = (u_xlatb60) ? u_xlat59 : 1.0;
    u_xlat23.x = u_xlat5.y * _HeigtFogParams2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb59 = !!(0.00999999978<abs(u_xlat23.x));
#else
    u_xlatb59 = 0.00999999978<abs(u_xlat23.x);
#endif
    u_xlat60 = u_xlat23.x * -1.44269502;
    u_xlat60 = exp2(u_xlat60);
    u_xlat60 = (-u_xlat60) + 1.0;
    u_xlat23.x = u_xlat60 / u_xlat23.x;
    u_xlat16_3.y = (u_xlatb59) ? u_xlat23.x : 1.0;
    u_xlat23.x = u_xlat5.x * _HeigtFogParams2.y;
    u_xlat16_3.xy = u_xlat16_3.xy * u_xlat23.yx;
    u_xlat16_3.x = exp2((-u_xlat16_3.x));
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat16_21.x = exp2((-u_xlat16_3.y));
    u_xlat16_3.y = (-u_xlat16_21.x) + 1.0;
    u_xlat16_3.xy = max(u_xlat16_3.xy, vec2(0.0, 0.0));
    u_xlat16_3.x = u_xlat16_3.y + u_xlat16_3.x;
    u_xlat5.x = u_xlat5.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat16_21.x = (-u_xlat5.x) + 2.0;
    u_xlat16_21.x = u_xlat16_21.x * u_xlat5.x;
    u_xlat5.x = u_xlat16_21.x * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat5.x = u_xlat5.x + 1.0;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat5.x;
    u_xlat5.x = min(u_xlat16_3.x, _HeigtFogColBase.w);
    u_xlat23.x = vs_TEXCOORD5.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat23.x = min(max(u_xlat23.x, 0.0), 1.0);
#else
    u_xlat23.x = clamp(u_xlat23.x, 0.0, 1.0);
#endif
    u_xlat23.xyz = u_xlat23.xxx * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    u_xlat6.xyz = vec3(u_xlat18) * u_xlat6.xyz;
    u_xlat60 = (-u_xlat5.x) + 1.0;
    u_xlat6.xyz = vec3(u_xlat60) * u_xlat6.xyz;
    u_xlat5.xyz = u_xlat23.xyz * u_xlat5.xxx + u_xlat6.xyz;
    u_xlat18 = (-u_xlat18) + 1.0;
    u_xlat18 = u_xlat60 * u_xlat18;
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat0.xzw + u_xlat5.xyz;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" "MSAA_INTERPOLATION" "MHY_SHADER_HIGH" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	mediump float _MHYZBias;
uniform 	vec4 hlslcc_mtx4x4_mhyJitteredVP[4];
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
out highp vec4 vs_TEXCOORD9;
out highp vec4 vs_TEXCOORD10;
float u_xlat0;
int u_xlati0;
vec4 u_xlat1;
bool u_xlatb1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
bool u_xlatb4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
mediump vec4 u_xlat16_6;
vec4 u_xlat7;
mediump vec3 u_xlat16_8;
vec3 u_xlat9;
float u_xlat10;
float u_xlat13;
bool u_xlatb13;
mediump float u_xlat16_14;
float u_xlat22;
float u_xlat28;
float u_xlat31;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat9.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4_mhyJitteredVP[1];
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[3] * u_xlat2.wwww + u_xlat1;
    u_xlat3.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    u_xlat3.xyw = u_xlat1.xyw;
    gl_Position = u_xlat3;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.xyw = u_xlat9.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat4.x = u_xlat1.y * _HeigtFogParams.x;
    u_xlat13 = u_xlat4.x * -1.44269502;
    u_xlat13 = exp2(u_xlat13);
    u_xlat13 = (-u_xlat13) + 1.0;
    u_xlat13 = u_xlat13 / u_xlat4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(0.00999999978<abs(u_xlat4.x));
#else
    u_xlatb4 = 0.00999999978<abs(u_xlat4.x);
#endif
    u_xlat16_5.x = (u_xlatb4) ? u_xlat13 : 1.0;
    u_xlat4.x = dot(u_xlat1.xyw, u_xlat1.xyw);
    u_xlat4.x = sqrt(u_xlat4.x);
    u_xlat13 = u_xlat4.x * _HeigtFogParams.y;
    u_xlat16_5.x = u_xlat13 * u_xlat16_5.x;
    u_xlat16_5.x = exp2((-u_xlat16_5.x));
    u_xlat16_5.x = (-u_xlat16_5.x) + 1.0;
    u_xlat13 = u_xlat1.y * _HeigtFogParams2.x;
    u_xlat22 = u_xlat13 * -1.44269502;
    u_xlat22 = exp2(u_xlat22);
    u_xlat22 = (-u_xlat22) + 1.0;
    u_xlat22 = u_xlat22 / u_xlat13;
#ifdef UNITY_ADRENO_ES3
    u_xlatb13 = !!(0.00999999978<abs(u_xlat13));
#else
    u_xlatb13 = 0.00999999978<abs(u_xlat13);
#endif
    u_xlat16_14 = (u_xlatb13) ? u_xlat22 : 1.0;
    u_xlat13 = u_xlat4.x * _HeigtFogParams2.y;
    u_xlat16_14 = u_xlat13 * u_xlat16_14;
    u_xlat16_14 = exp2((-u_xlat16_14));
    u_xlat16_5.y = (-u_xlat16_14) + 1.0;
    u_xlat16_5.xy = max(u_xlat16_5.xy, vec2(0.0, 0.0));
    u_xlat16_5.x = u_xlat16_5.y + u_xlat16_5.x;
    u_xlat13 = u_xlat4.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat13 = min(max(u_xlat13, 0.0), 1.0);
#else
    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
#endif
    u_xlat16_14 = (-u_xlat13) + 2.0;
    u_xlat16_14 = u_xlat13 * u_xlat16_14;
    u_xlat13 = u_xlat16_14 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat13 = u_xlat13 + 1.0;
    u_xlat16_5.x = u_xlat13 * u_xlat16_5.x;
    u_xlat13 = min(u_xlat16_5.x, _HeigtFogColBase.w);
    u_xlat22 = (-u_xlat13) + 1.0;
    u_xlat31 = _ProjectionParams.z * 0.999899983;
    u_xlat6.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat6.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat6.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat1.x = dot(u_xlat1.xyw, u_xlat6.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!((-u_xlat1.x)>=u_xlat31);
#else
    u_xlatb1 = (-u_xlat1.x)>=u_xlat31;
#endif
    u_xlat10 = u_xlat4.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat10 = min(max(u_xlat10, 0.0), 1.0);
#else
    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
#endif
    u_xlat28 = u_xlat4.x + (-_HeigtFogRamp.w);
    u_xlat28 = u_xlat28 * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat28 = min(max(u_xlat28, 0.0), 1.0);
#else
    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
#endif
    u_xlat4.x = (-u_xlat10) + 2.0;
    u_xlat10 = u_xlat10 * u_xlat4.x;
    u_xlat4.x = u_xlat10 * _HeigtFogColDelta.w;
    u_xlat1.x = (u_xlatb1) ? u_xlat4.x : u_xlat10;
    u_xlat1.x = log2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * unity_FogColor.w;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat1.x = min(u_xlat1.x, _HeigtFogColBase.w);
    u_xlat10 = u_xlat9.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat10 = min(max(u_xlat10, 0.0), 1.0);
#else
    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
#endif
    u_xlat16_5.x = (-u_xlat10) + 2.0;
    u_xlat16_5.x = u_xlat10 * u_xlat16_5.x;
    u_xlat6.xyz = u_xlat16_5.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat7.xyz = (-u_xlat6.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat6.xyz = vec3(u_xlat28) * u_xlat7.xyz + u_xlat6.xyz;
    u_xlat6.xyz = u_xlat1.xxx * u_xlat6.xyz;
    u_xlat1.x = (-u_xlat1.x) + 1.0;
    vs_TEXCOORD0.w = u_xlat22 * u_xlat1.x;
    u_xlat1.xyw = vec3(u_xlat22) * u_xlat6.xyz;
    u_xlat4.x = u_xlat9.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat4.xzw = u_xlat4.xxx * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    vs_TEXCOORD0.xyz = u_xlat4.xzw * vec3(u_xlat13) + u_xlat1.xyw;
    vs_TEXCOORD1.w = 1.0;
    u_xlat4.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat4.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat4.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat1.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
    u_xlat16_5.x = u_xlat4.y * u_xlat4.y;
    u_xlat16_5.x = u_xlat4.x * u_xlat4.x + (-u_xlat16_5.x);
    u_xlat16_6 = u_xlat4.yzzx * u_xlat4.xyzz;
    u_xlat16_8.x = dot(unity_SHBr, u_xlat16_6);
    u_xlat16_8.y = dot(unity_SHBg, u_xlat16_6);
    u_xlat16_8.z = dot(unity_SHBb, u_xlat16_6);
    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_8.xyz;
    u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat4.w = 1.0;
    u_xlat16_8.x = dot(unity_SHAr, u_xlat4);
    u_xlat16_8.y = dot(unity_SHAg, u_xlat4);
    u_xlat16_8.z = dot(unity_SHAb, u_xlat4);
    u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_8.xyz;
    vs_TEXCOORD1.xyz = u_xlat16_5.xyz;
    u_xlat1.x = u_xlat3.y * _ProjectionParams.x;
    u_xlat7.w = u_xlat1.x * 0.5;
    u_xlat7.xz = u_xlat3.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.z = u_xlat1.z;
    u_xlat3.xy = u_xlat7.zz + u_xlat7.xw;
    vs_TEXCOORD2 = u_xlat3;
    vs_TEXCOORD4.xyw = u_xlat3.xyw;
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD3.w = 0.0;
    u_xlat1.x = u_xlat2.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat2.x + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat2.z + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat2.w + u_xlat1.x;
    vs_TEXCOORD3.z = (-u_xlat1.x);
    vs_TEXCOORD5.w = 0.0;
    vs_TEXCOORD5.xyz = u_xlat9.xyz;
    u_xlat9.xyz = (-u_xlat9.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD6.w = 0.0;
    vs_TEXCOORD6.xyz = u_xlat4.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].www + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * in_POSITION0.yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.zzz + u_xlat1.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.www + u_xlat1.xyz;
    vs_TEXCOORD7.xyz = u_xlat1.xyz * vec3(-1.0, -1.0, 1.0);
    vs_TEXCOORD7.w = 0.0;
    u_xlat1.xyz = in_TANGENT0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat0 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0 = inversesqrt(u_xlat0);
    u_xlat1.xyz = vec3(u_xlat0) * u_xlat1.xyz;
    vs_TEXCOORD8.xyz = u_xlat1.xyz;
    vs_TEXCOORD8.w = 0.0;
    u_xlat2.xyz = u_xlat1.yzx * u_xlat4.zxy;
    u_xlat1.xyz = u_xlat4.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
    u_xlat0 = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD9.xyz = vec3(u_xlat0) * u_xlat1.xyz;
    vs_TEXCOORD9.w = 0.0;
    u_xlat0 = u_xlat9.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat9.x + u_xlat0;
    vs_TEXCOORD10.w = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat9.z + u_xlat0;
    vs_TEXCOORD10.xyz = u_xlat9.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowPos[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	mediump float _CausticUVScale;
uniform 	mediump float _CausticSpeed;
uniform 	mediump vec4 _CausticColor;
uniform 	mediump float _CausticDepth;
uniform 	mediump float _CausticDistance;
uniform 	mediump float _CausticDistortionValue;
uniform 	mediump vec4 _DepthFoamMask_ST;
uniform 	mediump float _DepthFoamSpeed;
uniform 	mediump vec4 _DepthFoamColor;
uniform 	mediump float _DepthFoamExtent;
uniform 	mediump float _DepthFoamDistance;
uniform 	mediump float _DepthFoamSubdivision;
uniform 	mediump float _DepthFoamWidth;
uniform 	mediump float _DepthFoamPhaseScale;
uniform 	mediump float _DepthFoamCloseFadeOffset;
uniform 	mediump float _DepthFoamCloseFadeDistance;
uniform 	float _NormalMapScale;
uniform 	float _Normal01_U_Speed;
uniform 	float _Normal01_VSpeed;
uniform 	float _NormalMapBias;
uniform 	float _Normal02_U_Speed;
uniform 	float _Normal02_V_Speed;
uniform 	float _RefractionIntensity;
uniform 	float _OpacityByDepth;
uniform 	float _SpecularIntensity;
uniform 	vec3 _ES_MoonDirection;
uniform 	vec3 _ES_SunDirection;
uniform 	float _Gloss;
uniform 	float _ShoreTransparency;
uniform 	float _SpecularPower;
uniform 	vec4 _ShallowColor;
uniform 	float _ShoreFade;
uniform 	vec4 _DeepColor;
uniform 	float _DeepColorDepth;
uniform 	float _DeepColorFade;
uniform 	vec4 _DistortionIntensity;
uniform 	float _SSRDistortion;
uniform 	float _SSRDistortion_Shore;
uniform 	float _SSRIntensity;
uniform 	float _ReflectionIntensity;
uniform 	float _FresnelPower;
uniform 	float _ShoreReflectionFade;
uniform 	vec3 _ES_MainLightColor;
uniform 	mediump float _RippleTillingScale;
uniform 	mediump float _Ripple02Rotate;
uniform 	mediump float _ProjectUVScale;
uniform 	mediump float _CausticFade;
uniform 	mediump float _CausticFadeExponent;
uniform 	vec4 _ReflectionSkyCubeMap_HDR;
uniform lowp sampler2D _Normal01;
uniform lowp sampler2D _Normal02;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _SceneScaledBufferBeforTransParent;
uniform lowp samplerCube _ReflectionSkyCubeMap;
uniform lowp sampler2D _SSRTexture;
uniform lowp sampler2D _DepthFoamMask;
uniform lowp sampler2D _WaterRippleTex;
uniform lowp sampler2DShadow hlslcc_zcmp_CascadeShadowMapTexture;
uniform lowp sampler2D _CascadeShadowMapTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD8;
in highp vec4 vs_TEXCOORD9;
in highp vec4 vs_TEXCOORD10;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
lowp float u_xlat10_0;
int u_xlati0;
uint u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec3 u_xlat10_1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
lowp vec4 u_xlat10_2;
bvec4 u_xlatb2;
mediump vec3 u_xlat16_3;
vec4 u_xlat4;
mediump vec3 u_xlat16_4;
lowp vec4 u_xlat10_4;
vec3 u_xlat5;
lowp float u_xlat10_5;
vec4 u_xlat6;
vec4 u_xlat7;
mediump vec3 u_xlat16_7;
vec4 u_xlat8;
vec3 u_xlat9;
vec3 u_xlat10;
mediump vec3 u_xlat16_10;
vec3 u_xlat11;
vec3 u_xlat12;
lowp vec3 u_xlat10_12;
vec3 u_xlat13;
vec3 u_xlat14;
vec3 u_xlat15;
mediump float u_xlat16_16;
mediump vec2 u_xlat16_17;
float u_xlat18;
bool u_xlatb18;
vec3 u_xlat19;
mediump vec3 u_xlat16_21;
vec3 u_xlat23;
mediump float u_xlat16_23;
bool u_xlatb23;
vec3 u_xlat25;
bool u_xlatb25;
float u_xlat26;
vec2 u_xlat36;
mediump float u_xlat16_36;
lowp float u_xlat10_36;
float u_xlat37;
lowp float u_xlat10_37;
int u_xlati37;
uint u_xlatu37;
bool u_xlatb37;
float u_xlat41;
float u_xlat42;
lowp float u_xlat10_54;
float u_xlat55;
mediump float u_xlat16_55;
mediump float u_xlat16_57;
float u_xlat59;
mediump float u_xlat16_59;
bool u_xlatb59;
float u_xlat60;
bool u_xlatb60;
float u_xlat61;
void main()
{
    u_xlat0 = vs_TEXCOORD5.xzxz * vec4(_ProjectUVScale, _ProjectUVScale, _RippleTillingScale, _RippleTillingScale);
    u_xlat1.x = _Time.y * _Normal01_U_Speed + u_xlat0.x;
    u_xlat1.yz = _Time.yy * vec2(_Normal01_VSpeed, _Normal02_U_Speed) + u_xlat0.yx;
    u_xlat1.w = _Time.y * _Normal02_V_Speed + u_xlat0.y;
    u_xlat10_2.xyz = texture(_Normal01, u_xlat1.xy, _NormalMapBias).xyz;
    u_xlat16_2.xyz = u_xlat10_2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_3.xy = u_xlat16_2.xy * vec2(_NormalMapScale);
    u_xlat10_1.xyz = texture(_Normal02, u_xlat1.zw, _NormalMapBias).xyz;
    u_xlat16_2.w = -1.0;
    u_xlat16_4.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_2.wwz;
    u_xlat16_4.xy = u_xlat16_4.xy * vec2(_NormalMapScale);
    u_xlat16_3.z = -1.0;
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat0.x = float(1.0) / vs_TEXCOORD4.w;
    u_xlat1.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat18 = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat18 = _ZBufferParams.z * u_xlat18 + _ZBufferParams.w;
    u_xlat18 = float(1.0) / u_xlat18;
    u_xlat1.x = vs_TEXCOORD10.w + 9.99999975e-05;
    u_xlat1.x = (-u_xlat18) / u_xlat1.x;
    u_xlat19.xyz = u_xlat1.xxx * vs_TEXCOORD10.xyz;
    u_xlat5.xyz = vs_TEXCOORD10.xyz * u_xlat1.xxx + _WorldSpaceCameraPos.xyz;
    u_xlat6.xyz = (-u_xlat5.xyz) + vs_TEXCOORD5.xyz;
    u_xlat1.x = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlat6.xz = u_xlat16_3.xy * vec2(vec2(_RefractionIntensity, _RefractionIntensity));
    u_xlat0.x = u_xlat0.x * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat6.xz = u_xlat0.xx * u_xlat6.xz;
    u_xlat6.xz = u_xlat6.xz * vs_TEXCOORD4.ww;
    u_xlat0.x = u_xlat18 + (-vs_TEXCOORD4.w);
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat7.xy = u_xlat0.xx * u_xlat6.xz;
    u_xlat7.z = 0.0;
    u_xlat6.xzw = u_xlat7.xyz + vs_TEXCOORD4.xyw;
    u_xlat0.xy = u_xlat6.xz / u_xlat6.ww;
    u_xlat0.x = texture(_CameraDepthTexture, u_xlat0.xy).x;
    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat0.x = u_xlat0.x + (-vs_TEXCOORD4.w);
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat6.xzw = u_xlat0.xxx * u_xlat7.xyz + vs_TEXCOORD4.xyw;
    u_xlat0.xy = u_xlat6.xz / u_xlat6.ww;
    u_xlat0.x = texture(_CameraDepthTexture, u_xlat0.xy).x;
    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat0.x = u_xlat0.x + (-vs_TEXCOORD4.w);
    u_xlat18 = 0.100000001 / _OpacityByDepth;
    u_xlat18 = u_xlat18 * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat16_4.xz = u_xlat16_3.xy;
    u_xlat16_4.y = 1.0;
    u_xlat16_59 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);
    u_xlat16_59 = inversesqrt(u_xlat16_59);
    u_xlat16_7.xyz = u_xlat16_4.xyz * vec3(u_xlat16_59);
#ifdef UNITY_ADRENO_ES3
    u_xlatb59 = !!(0.0>=_ES_MoonDirection.y);
#else
    u_xlatb59 = 0.0>=_ES_MoonDirection.y;
#endif
    u_xlat8.xyz = (bool(u_xlatb59)) ? _ES_SunDirection.xyz : _ES_MoonDirection.xyz;
    u_xlat9.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat59 = dot(u_xlat9.xyz, u_xlat9.xyz);
    u_xlat60 = inversesqrt(u_xlat59);
    u_xlat10.xyz = vec3(u_xlat60) * u_xlat9.xyz;
    u_xlat8.xyz = u_xlat9.xyz * vec3(u_xlat60) + u_xlat8.xyz;
    u_xlat60 = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat60 = inversesqrt(u_xlat60);
    u_xlat8.xyz = vec3(u_xlat60) * u_xlat8.xyz;
    u_xlat60 = dot(u_xlat16_7.xyz, u_xlat8.xyz);
    u_xlat25.x = _Gloss * 128.0;
    u_xlat60 = max(u_xlat60, 9.99999975e-05);
    u_xlat60 = log2(u_xlat60);
    u_xlat60 = u_xlat60 * u_xlat25.x;
    u_xlat60 = exp2(u_xlat60);
    u_xlat60 = u_xlat60 * _SpecularIntensity;
    u_xlat60 = max(u_xlat60, 0.0);
    u_xlat60 = min(u_xlat60, 16.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb25 = !!(_ES_MoonDirection.y>=9.99999975e-05);
#else
    u_xlatb25 = _ES_MoonDirection.y>=9.99999975e-05;
#endif
    u_xlat25.x = u_xlatb25 ? 1.0 : float(0.0);
    u_xlat61 = _ES_MoonDirection.y + -1.0;
    u_xlat25.x = u_xlat25.x * u_xlat61 + 1.0;
    u_xlat61 = float(1.0) / _ShoreTransparency;
    u_xlat8.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat8.xyz = u_xlat8.xxx * vs_TEXCOORD6.xyz;
    u_xlat8.x = dot(u_xlat10.xyz, u_xlat8.xyz);
    u_xlat8.x = (-u_xlat8.x) + 1.0;
    u_xlat8.x = max(u_xlat8.x, 9.99999975e-05);
    u_xlat8.x = log2(u_xlat8.x);
    u_xlat26 = u_xlat8.x * _SpecularPower;
    u_xlat26 = exp2(u_xlat26);
    u_xlat9.xyz = u_xlat25.xxx * _LightColor0.xyz;
    u_xlat9.xyz = vec3(u_xlat60) * u_xlat9.xyz;
    u_xlat60 = u_xlat0.x + -1.0;
    u_xlat60 = u_xlat61 * u_xlat60;
    u_xlat60 = u_xlat60 * 0.100000001;
#ifdef UNITY_ADRENO_ES3
    u_xlat60 = min(max(u_xlat60, 0.0), 1.0);
#else
    u_xlat60 = clamp(u_xlat60, 0.0, 1.0);
#endif
    u_xlat9.xyz = vec3(u_xlat60) * u_xlat9.xyz;
    u_xlat60 = u_xlat0.x * u_xlat61;
#ifdef UNITY_ADRENO_ES3
    u_xlat60 = min(max(u_xlat60, 0.0), 1.0);
#else
    u_xlat60 = clamp(u_xlat60, 0.0, 1.0);
#endif
    u_xlat60 = max(u_xlat60, 9.99999975e-05);
    u_xlat60 = log2(u_xlat60);
    u_xlat60 = u_xlat60 * _ShoreFade;
    u_xlat60 = exp2(u_xlat60);
    u_xlat11.xyz = _ShallowColor.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat11.xyz = vec3(u_xlat60) * u_xlat11.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat6.xz = u_xlat6.xz / vs_TEXCOORD4.ww;
    u_xlat10_12.xyz = texture(_SceneScaledBufferBeforTransParent, u_xlat6.xz).xyz;
    u_xlat6.x = u_xlat1.x * _CausticDistortionValue;
    u_xlat6.xz = u_xlat6.xx * u_xlat16_7.xz;
    u_xlat7.z = _Time.y * _CausticSpeed;
    u_xlat6.xz = u_xlat5.xz * vec2(_CausticUVScale) + u_xlat6.xz;
    u_xlat13.x = _Normal01_U_Speed * 25.0;
    u_xlat13.y = _Normal01_VSpeed * 25.0;
    u_xlat7.xy = u_xlat7.zz * u_xlat13.xy + u_xlat6.xz;
    u_xlat13.x = dot(u_xlat7.xyz, vec3(-2.0, 3.0, 1.0));
    u_xlat13.y = dot(u_xlat7.xyz, vec3(-1.0, -2.0, 2.0));
    u_xlat13.z = dot(u_xlat7.xzy, vec3(2.0, 2.0, 1.0));
    u_xlat7.xyz = u_xlat13.xyz * vec3(0.400000006, 0.400000006, 0.400000006);
    u_xlat14.x = dot(u_xlat7.xyz, vec3(-2.0, 3.0, 1.0));
    u_xlat14.y = dot(u_xlat7.xyz, vec3(-1.0, -2.0, 2.0));
    u_xlat14.z = dot(u_xlat7.xzy, vec3(2.0, 2.0, 1.0));
    u_xlat7.xyz = u_xlat14.xyz * vec3(0.300000012, 0.300000012, 0.300000012);
    u_xlat6.x = dot(u_xlat7.xyz, vec3(-2.0, 3.0, 1.0));
    u_xlat6.z = dot(u_xlat7.xyz, vec3(-1.0, -2.0, 2.0));
    u_xlat7.x = dot(u_xlat7.xzy, vec3(2.0, 2.0, 1.0));
    u_xlat25.xyz = fract(u_xlat13.xyz);
    u_xlat25.xyz = (-u_xlat25.xyz) + vec3(0.5, 0.5, 0.5);
    u_xlat25.x = dot(u_xlat25.xyz, u_xlat25.xyz);
    u_xlat13.xyz = fract(u_xlat14.xyz);
    u_xlat13.xyz = (-u_xlat13.xyz) + vec3(0.5, 0.5, 0.5);
    u_xlat25.y = dot(u_xlat13.xyz, u_xlat13.xyz);
    u_xlat25.xy = sqrt(u_xlat25.xy);
    u_xlat25.x = min(u_xlat25.y, u_xlat25.x);
    u_xlat13.xy = fract(u_xlat6.xz);
    u_xlat13.z = fract(u_xlat7.x);
    u_xlat7.xzw = (-u_xlat13.xyz) + vec3(0.5, 0.5, 0.5);
    u_xlat6.x = dot(u_xlat7.xzw, u_xlat7.xzw);
    u_xlat6.x = sqrt(u_xlat6.x);
    u_xlat6.x = min(u_xlat6.x, u_xlat25.x);
    u_xlat6.x = log2(u_xlat6.x);
    u_xlat6.x = u_xlat6.x * 7.0;
    u_xlat6.x = exp2(u_xlat6.x);
    u_xlat6.x = u_xlat6.x * 25.0;
    u_xlat16_4.xy = vec2(float(_CausticDepth) + float(9.99999975e-05), float(_CausticDistance) + float(9.99999975e-05));
    u_xlat42 = u_xlat6.y / u_xlat16_4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat42 = min(max(u_xlat42, 0.0), 1.0);
#else
    u_xlat42 = clamp(u_xlat42, 0.0, 1.0);
#endif
    u_xlat19.x = dot(u_xlat19.xyz, u_xlat19.xyz);
    u_xlat19.x = sqrt(u_xlat19.x);
    u_xlat19.x = u_xlat19.x / u_xlat16_4.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat19.x = min(max(u_xlat19.x, 0.0), 1.0);
#else
    u_xlat19.x = clamp(u_xlat19.x, 0.0, 1.0);
#endif
    u_xlat19.x = (-u_xlat19.x) + 1.0;
    u_xlat19.x = u_xlat19.x * u_xlat42;
    u_xlat7.xyz = u_xlat5.xyz + (-unity_ShadowSplitSpheres[0].xyz);
    u_xlat13.xyz = u_xlat5.xyz + (-unity_ShadowSplitSpheres[1].xyz);
    u_xlat14.xyz = u_xlat5.xyz + (-unity_ShadowSplitSpheres[2].xyz);
    u_xlat15.xyz = u_xlat5.xyz + (-unity_ShadowSplitSpheres[3].xyz);
    u_xlat2.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat2.y = dot(u_xlat13.xyz, u_xlat13.xyz);
    u_xlat2.z = dot(u_xlat14.xyz, u_xlat14.xyz);
    u_xlat2.w = dot(u_xlat15.xyz, u_xlat15.xyz);
    u_xlatb2 = lessThan(u_xlat2, unity_ShadowSplitSqRadii);
    u_xlat2 = mix(vec4(0.0, 0.0, 0.0, 0.0), vec4(1.0, 1.0, 1.0, 1.0), vec4(u_xlatb2));
    u_xlat16_57 = u_xlat2.y + u_xlat2.x;
    u_xlat16_4.x = u_xlat2.z + u_xlat16_57;
    u_xlat7.x = -0.0;
    u_xlat7.y = (-u_xlat2.x);
    u_xlat7.z = (-u_xlat16_57);
    u_xlat7.w = (-u_xlat16_4.x);
    u_xlat2 = u_xlat2 + u_xlat7;
    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat16_57 = dot(u_xlat2, vec4(1.0, 1.0, 1.0, 1.0));
#ifdef UNITY_ADRENO_ES3
    u_xlatb37 = !!(u_xlat16_57>=0.5);
#else
    u_xlatb37 = u_xlat16_57>=0.5;
#endif
    if(u_xlatb37){
        u_xlat37 = dot(u_xlat2.yzw, vec3(1.0, 2.0, 3.0));
        u_xlat37 = min(u_xlat37, 3.0);
        u_xlatu37 = uint(u_xlat37);
        u_xlat5.xyz = u_xlat5.xyz + (-unity_ShadowPos[int(u_xlatu37)].xyz);
        u_xlati37 = int(u_xlatu37) << 2;
        u_xlat7.xyz = u_xlat5.yyy * hlslcc_mtx4x4unity_WorldToShadow[(u_xlati37 + 1)].xyz;
        u_xlat7.xyz = hlslcc_mtx4x4unity_WorldToShadow[u_xlati37].xyz * u_xlat5.xxx + u_xlat7.xyz;
        u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToShadow[(u_xlati37 + 2)].xyz * u_xlat5.zzz + u_xlat7.xyz;
        u_xlat5.xyz = u_xlat5.xyz + hlslcc_mtx4x4unity_WorldToShadow[(u_xlati37 + 3)].xyz;
        vec3 txVec0 = vec3(u_xlat5.xy,u_xlat5.z);
        u_xlat10_37 = textureLod(hlslcc_zcmp_CascadeShadowMapTexture, txVec0, 0.0);
        u_xlat16_55 = (-_LightShadowData.x) + 1.0;
        u_xlat37 = u_xlat10_37 * u_xlat16_55 + _LightShadowData.x;
    } else {
        u_xlat37 = 1.0;
    //ENDIF
    }
    u_xlat19.x = u_xlat37 * u_xlat19.x;
    u_xlat16_4.xyz = _LightColor0.xyz * _CausticColor.xyz;
    u_xlat16_4.xyz = u_xlat6.xxx * u_xlat16_4.xyz;
    u_xlat16_4.xyz = u_xlat19.xxx * u_xlat16_4.xyz;
    u_xlat16_57 = _CausticFade + 9.99999975e-05;
    u_xlat1.x = u_xlat1.x / u_xlat16_57;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.x = log2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _CausticFadeExponent;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat1.x = (-u_xlat1.x) + 1.0;
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat1.xxx + vec3(1.0, 1.0, 1.0);
    u_xlat16_1.xyz = u_xlat16_4.xyz * u_xlat10_12.xyz;
    u_xlat5.xyz = u_xlat16_1.xyz * u_xlat11.xyz;
    u_xlat55 = 0.100000001 / _DeepColorDepth;
    u_xlat55 = u_xlat0.x * u_xlat55;
#ifdef UNITY_ADRENO_ES3
    u_xlat55 = min(max(u_xlat55, 0.0), 1.0);
#else
    u_xlat55 = clamp(u_xlat55, 0.0, 1.0);
#endif
    u_xlat55 = max(u_xlat55, 9.99999975e-05);
    u_xlat55 = log2(u_xlat55);
    u_xlat55 = u_xlat55 * _DeepColorFade;
    u_xlat55 = exp2(u_xlat55);
    u_xlat7.xyz = (-u_xlat11.xyz) * u_xlat16_1.xyz + _DeepColor.xyz;
    u_xlat7.xyz = vec3(u_xlat55) * u_xlat7.xyz + u_xlat5.xyz;
    u_xlat12.xyz = u_xlat16_3.xyz * _DistortionIntensity.xyz;
    u_xlat13.x = vs_TEXCOORD8.x;
    u_xlat13.y = vs_TEXCOORD9.x;
    u_xlat13.z = vs_TEXCOORD6.x;
    u_xlat13.x = dot(u_xlat13.xyz, u_xlat12.xyz);
    u_xlat14.x = vs_TEXCOORD8.y;
    u_xlat14.y = vs_TEXCOORD9.y;
    u_xlat14.z = vs_TEXCOORD6.y;
    u_xlat13.y = dot(u_xlat14.xyz, u_xlat12.xyz);
    u_xlat14.x = vs_TEXCOORD8.z;
    u_xlat14.y = vs_TEXCOORD9.z;
    u_xlat14.z = vs_TEXCOORD6.z;
    u_xlat13.z = dot(u_xlat14.xyz, u_xlat12.xyz);
    u_xlat55 = dot(u_xlat13.xyz, u_xlat13.xyz);
    u_xlat55 = inversesqrt(u_xlat55);
    u_xlat13.xyz = vec3(u_xlat55) * u_xlat13.xyz;
    u_xlat55 = dot((-u_xlat10.xyz), u_xlat13.xyz);
    u_xlat55 = u_xlat55 + u_xlat55;
    u_xlat10.xyz = u_xlat13.xyz * (-vec3(u_xlat55)) + (-u_xlat10.xyz);
    u_xlat10_2 = textureLod(_ReflectionSkyCubeMap, u_xlat10.xyz, 0.0);
    u_xlat16_3.x = u_xlat10_2.w + -1.0;
    u_xlat16_3.x = _ReflectionSkyCubeMap_HDR.w * u_xlat16_3.x + 1.0;
    u_xlat16_3.x = log2(u_xlat16_3.x);
    u_xlat16_3.x = u_xlat16_3.x * _ReflectionSkyCubeMap_HDR.y;
    u_xlat16_3.x = exp2(u_xlat16_3.x);
    u_xlat16_3.x = u_xlat16_3.x * _ReflectionSkyCubeMap_HDR.x;
    u_xlat16_21.xyz = u_xlat10_2.xyz * u_xlat16_3.xxx;
    u_xlat6.xz = u_xlat12.xy * vec2(_SSRDistortion);
    u_xlat55 = float(1.0) / _SSRDistortion_Shore;
    u_xlat55 = u_xlat0.x * u_xlat55;
#ifdef UNITY_ADRENO_ES3
    u_xlat55 = min(max(u_xlat55, 0.0), 1.0);
#else
    u_xlat55 = clamp(u_xlat55, 0.0, 1.0);
#endif
    u_xlat6.xz = vec2(u_xlat55) * u_xlat6.xz;
    u_xlat6.xz = u_xlat6.xz * vs_TEXCOORD4.ww + vs_TEXCOORD4.xy;
    u_xlat6.xz = u_xlat6.xz / vs_TEXCOORD4.ww;
    u_xlat10_4 = texture(_SSRTexture, u_xlat6.xz).wxyz;
    u_xlat16_10.xyz = (-u_xlat16_3.xxx) * u_xlat10_2.xyz + u_xlat10_4.yzw;
    u_xlat10.xyz = u_xlat16_10.xyz * vec3(vec3(_SSRIntensity, _SSRIntensity, _SSRIntensity));
    u_xlat16_4.x = u_xlat10_4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat10.xyz = u_xlat16_4.xxx * u_xlat10.xyz + u_xlat16_21.xyz;
    u_xlat55 = u_xlat8.x * _FresnelPower;
    u_xlat55 = exp2(u_xlat55);
    u_xlat55 = u_xlat55 * _ReflectionIntensity;
    u_xlat6.x = float(1.0) / _ShoreReflectionFade;
    u_xlat0.x = u_xlat0.x * u_xlat6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x * u_xlat55;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat8.xzw = (-u_xlat7.xyz) + u_xlat10.xyz;
    u_xlat7.xyz = u_xlat0.xxx * u_xlat8.xzw + u_xlat7.xyz;
    u_xlat1.xyz = (-u_xlat11.xyz) * u_xlat16_1.xyz + u_xlat7.xyz;
    u_xlat1.xyz = vec3(u_xlat60) * u_xlat1.xyz + u_xlat5.xyz;
    u_xlat0.x = (-vs_TEXCOORD5.y) * _WorldSpaceLightPos0.w + _WorldSpaceLightPos0.y;
    u_xlat16_3.x = max(u_xlat0.x, 0.0);
    u_xlat5.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowSplitSpheres[0].xyz);
    u_xlat6.xzw = vs_TEXCOORD5.xyz + (-unity_ShadowSplitSpheres[1].xyz);
    u_xlat7.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowSplitSpheres[2].xyz);
    u_xlat8.xzw = vs_TEXCOORD5.xyz + (-unity_ShadowSplitSpheres[3].xyz);
    u_xlat2.x = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat2.y = dot(u_xlat6.xzw, u_xlat6.xzw);
    u_xlat2.z = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat2.w = dot(u_xlat8.xzw, u_xlat8.xzw);
    u_xlatb2 = lessThan(u_xlat2, unity_ShadowSplitSqRadii);
    u_xlat2 = mix(vec4(0.0, 0.0, 0.0, 0.0), vec4(1.0, 1.0, 1.0, 1.0), vec4(u_xlatb2));
    u_xlat16_21.x = u_xlat2.y + u_xlat2.x;
    u_xlat16_21.y = u_xlat2.z + u_xlat16_21.x;
    u_xlat4.x = -0.0;
    u_xlat4.y = (-u_xlat2.x);
    u_xlat4.zw = (-u_xlat16_21.xy);
    u_xlat2 = u_xlat2 + u_xlat4;
    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat16_21.x = dot(u_xlat2, vec4(1.0, 1.0, 1.0, 1.0));
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat16_21.x>=0.5);
#else
    u_xlatb0 = u_xlat16_21.x>=0.5;
#endif
    if(u_xlatb0){
        u_xlat0.x = dot(u_xlat2.yzw, vec3(1.0, 2.0, 3.0));
        u_xlat0.x = min(u_xlat0.x, 3.0);
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat5.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowPos[int(u_xlatu0)].xyz);
        u_xlati0 = int(u_xlatu0) << 2;
        u_xlat6.xzw = u_xlat5.yyy * hlslcc_mtx4x4unity_WorldToShadow[(u_xlati0 + 1)].xyz;
        u_xlat6.xzw = hlslcc_mtx4x4unity_WorldToShadow[u_xlati0].xyz * u_xlat5.xxx + u_xlat6.xzw;
        u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToShadow[(u_xlati0 + 2)].xyz * u_xlat5.zzz + u_xlat6.xzw;
        u_xlat5.xyz = u_xlat5.xyz + hlslcc_mtx4x4unity_WorldToShadow[(u_xlati0 + 3)].xyz;
        vec3 txVec1 = vec3(u_xlat5.xy,u_xlat5.z);
        u_xlat10_0 = textureLod(hlslcc_zcmp_CascadeShadowMapTexture, txVec1, 0.0);
        u_xlat16_55 = (-_LightShadowData.x) + 1.0;
        u_xlat0.x = u_xlat10_0 * u_xlat16_55 + _LightShadowData.x;
    } else {
        u_xlat0.x = 1.0;
    //ENDIF
    }
    u_xlat16_3.xyz = u_xlat16_3.xxx * _LightColor0.xyz;
    u_xlat5.xyz = u_xlat16_3.xyz * u_xlat0.xxx + vs_TEXCOORD1.xyz;
    u_xlat16_3.xyz = u_xlat5.xyz * vec3(0.300000012, 0.300000012, 0.300000012) + vec3(0.699999988, 0.699999988, 0.699999988);
    u_xlat0.x = sqrt(u_xlat59);
    u_xlat16_57 = u_xlat0.x + (-_DepthFoamCloseFadeOffset);
    u_xlat16_57 = u_xlat16_57 / _DepthFoamCloseFadeDistance;
    u_xlat16_16 = vs_COLOR0.x * _DepthFoamExtent;
    u_xlat55 = max(u_xlat6.y, 0.0);
    u_xlat55 = min(u_xlat16_16, u_xlat55);
    u_xlat16_16 = _DepthFoamExtent * vs_COLOR0.x + 9.99999975e-05;
    u_xlat55 = u_xlat55 / u_xlat16_16;
    u_xlat55 = (-u_xlat55) + 1.0;
    u_xlat5.xy = vec2(_Time.y * _DepthFoamMask_ST.z, _Time.y * _DepthFoamMask_ST.w);
    u_xlat5.xy = fract(u_xlat5.xy);
    u_xlat5.xy = _DepthFoamMask_ST.xy * vs_TEXCOORD5.xz + u_xlat5.xy;
    u_xlat10_5 = texture(_DepthFoamMask, u_xlat5.xy, -1.0).x;
    u_xlat23.x = vs_TEXCOORD5.z + vs_TEXCOORD5.x;
    u_xlat23.x = u_xlat23.x * _DepthFoamPhaseScale;
    u_xlat23.x = _DepthFoamSpeed * _Time.y + u_xlat23.x;
    u_xlat41 = (-u_xlat55) + 1.0;
    u_xlat16_16 = _DepthFoamSubdivision * u_xlat55 + u_xlat23.x;
    u_xlat16_16 = sin(u_xlat16_16);
    u_xlat16_16 = _DepthFoamWidth * u_xlat55 + u_xlat16_16;
    u_xlat16_23 = u_xlat10_5 * 2.0 + -1.0;
    u_xlat23.x = u_xlat16_23 + u_xlat16_16;
#ifdef UNITY_ADRENO_ES3
    u_xlatb23 = !!(u_xlat23.x>=u_xlat41);
#else
    u_xlatb23 = u_xlat23.x>=u_xlat41;
#endif
    u_xlat23.x = u_xlatb23 ? 1.0 : float(0.0);
    u_xlat5.x = u_xlat23.x * u_xlat10_5;
    u_xlat16_16 = _DepthFoamDistance + 9.99999975e-05;
    u_xlat16_16 = u_xlat0.x / u_xlat16_16;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat16_0 = (-u_xlat16_16) + 1.0;
    u_xlat16_16 = vs_COLOR0.y * _DepthFoamColor.w;
    u_xlat16_57 = u_xlat16_57 * u_xlat16_16;
    u_xlat16_57 = u_xlat5.x * u_xlat16_57;
    u_xlat16_57 = u_xlat55 * u_xlat16_57;
    u_xlat16_57 = u_xlat16_0 * u_xlat16_57;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_57 = min(max(u_xlat16_57, 0.0), 1.0);
#else
    u_xlat16_57 = clamp(u_xlat16_57, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = _DepthFoamColor.xyz * u_xlat16_3.xyz + (-u_xlat1.xyz);
    u_xlat16_3.xyz = vec3(u_xlat16_57) * u_xlat16_3.xyz + u_xlat1.xyz;
    u_xlat16_0 = max(_LightColor0.w, 0.5);
    u_xlat1.xyz = u_xlat9.xyz * vec3(u_xlat26) + u_xlat16_3.xyz;
    u_xlat36.xy = fract(u_xlat0.zw);
    u_xlat16_3.xy = u_xlat36.xy * vec2(1.14999998, 1.14999998);
    u_xlat16_16 = sin(_Ripple02Rotate);
    u_xlat16_17.x = cos(_Ripple02Rotate);
    u_xlat5.x = (-u_xlat16_16);
    u_xlat16_17.y = u_xlat16_16;
    u_xlat6.x = dot(u_xlat16_3.xy, u_xlat16_17.xy);
    u_xlat5.y = u_xlat16_17.x;
    u_xlat6.y = dot(u_xlat16_3.xy, u_xlat5.xy);
    u_xlat10_36 = texture(_WaterRippleTex, u_xlat36.xy).x;
    u_xlat10_54 = texture(_WaterRippleTex, u_xlat6.xy).x;
    u_xlat16_36 = u_xlat10_54 + u_xlat10_36;
    u_xlat36.x = u_xlat16_36 * u_xlat18;
    u_xlat5.xyz = _ES_MainLightColor.xyz * vec3(u_xlat16_0) + (-u_xlat1.xyz);
    u_xlat0.xzw = u_xlat36.xxx * u_xlat5.xyz + u_xlat1.xyz;
    u_xlat1.w = u_xlat18 * vs_COLOR0.w;
    u_xlat5.xyz = vs_TEXCOORD5.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat6.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat6.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat6.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat18 = dot(u_xlat5.xyz, u_xlat6.xyz);
    u_xlat5.x = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat5.x = sqrt(u_xlat5.x);
    u_xlat23.y = u_xlat5.x * _HeigtFogParams.y;
    u_xlat59 = u_xlat5.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat59 = min(max(u_xlat59, 0.0), 1.0);
#else
    u_xlat59 = clamp(u_xlat59, 0.0, 1.0);
#endif
    u_xlat6.x = (-u_xlat59) + 2.0;
    u_xlat59 = u_xlat59 * u_xlat6.x;
    u_xlat6.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!((-u_xlat18)>=u_xlat6.x);
#else
    u_xlatb18 = (-u_xlat18)>=u_xlat6.x;
#endif
    u_xlat6.x = u_xlat59 * _HeigtFogColDelta.w;
    u_xlat18 = (u_xlatb18) ? u_xlat6.x : u_xlat59;
    u_xlat18 = log2(u_xlat18);
    u_xlat18 = u_xlat18 * unity_FogColor.w;
    u_xlat18 = exp2(u_xlat18);
    u_xlat18 = min(u_xlat18, _HeigtFogColBase.w);
    u_xlat59 = vs_TEXCOORD5.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat59 = min(max(u_xlat59, 0.0), 1.0);
#else
    u_xlat59 = clamp(u_xlat59, 0.0, 1.0);
#endif
    u_xlat16_3.x = (-u_xlat59) + 2.0;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat59;
    u_xlat6.xyz = u_xlat16_3.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat59 = u_xlat5.x + (-_HeigtFogRamp.w);
    u_xlat59 = u_xlat59 * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat59 = min(max(u_xlat59, 0.0), 1.0);
#else
    u_xlat59 = clamp(u_xlat59, 0.0, 1.0);
#endif
    u_xlat7.xyz = (-u_xlat6.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat6.xyz = vec3(u_xlat59) * u_xlat7.xyz + u_xlat6.xyz;
    u_xlat59 = u_xlat5.y * _HeigtFogParams.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb60 = !!(0.00999999978<abs(u_xlat59));
#else
    u_xlatb60 = 0.00999999978<abs(u_xlat59);
#endif
    u_xlat7.x = u_xlat59 * -1.44269502;
    u_xlat7.x = exp2(u_xlat7.x);
    u_xlat7.x = (-u_xlat7.x) + 1.0;
    u_xlat59 = u_xlat7.x / u_xlat59;
    u_xlat16_3.x = (u_xlatb60) ? u_xlat59 : 1.0;
    u_xlat23.x = u_xlat5.y * _HeigtFogParams2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb59 = !!(0.00999999978<abs(u_xlat23.x));
#else
    u_xlatb59 = 0.00999999978<abs(u_xlat23.x);
#endif
    u_xlat60 = u_xlat23.x * -1.44269502;
    u_xlat60 = exp2(u_xlat60);
    u_xlat60 = (-u_xlat60) + 1.0;
    u_xlat23.x = u_xlat60 / u_xlat23.x;
    u_xlat16_3.y = (u_xlatb59) ? u_xlat23.x : 1.0;
    u_xlat23.x = u_xlat5.x * _HeigtFogParams2.y;
    u_xlat16_3.xy = u_xlat16_3.xy * u_xlat23.yx;
    u_xlat16_3.x = exp2((-u_xlat16_3.x));
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat16_21.x = exp2((-u_xlat16_3.y));
    u_xlat16_3.y = (-u_xlat16_21.x) + 1.0;
    u_xlat16_3.xy = max(u_xlat16_3.xy, vec2(0.0, 0.0));
    u_xlat16_3.x = u_xlat16_3.y + u_xlat16_3.x;
    u_xlat5.x = u_xlat5.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat16_21.x = (-u_xlat5.x) + 2.0;
    u_xlat16_21.x = u_xlat16_21.x * u_xlat5.x;
    u_xlat5.x = u_xlat16_21.x * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat5.x = u_xlat5.x + 1.0;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat5.x;
    u_xlat5.x = min(u_xlat16_3.x, _HeigtFogColBase.w);
    u_xlat23.x = vs_TEXCOORD5.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat23.x = min(max(u_xlat23.x, 0.0), 1.0);
#else
    u_xlat23.x = clamp(u_xlat23.x, 0.0, 1.0);
#endif
    u_xlat23.xyz = u_xlat23.xxx * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    u_xlat6.xyz = vec3(u_xlat18) * u_xlat6.xyz;
    u_xlat60 = (-u_xlat5.x) + 1.0;
    u_xlat6.xyz = vec3(u_xlat60) * u_xlat6.xyz;
    u_xlat5.xyz = u_xlat23.xyz * u_xlat5.xxx + u_xlat6.xyz;
    u_xlat18 = (-u_xlat18) + 1.0;
    u_xlat18 = u_xlat60 * u_xlat18;
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat0.xzw + u_xlat5.xyz;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "MSAA_INTERPOLATION" "MHY_SHADER_MIDDLE" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	mediump float _MHYZBias;
uniform 	vec4 hlslcc_mtx4x4_mhyJitteredVP[4];
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
out highp vec4 vs_TEXCOORD9;
out highp vec4 vs_TEXCOORD10;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
vec4 u_xlat4;
bool u_xlatb4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
mediump vec4 u_xlat16_6;
vec4 u_xlat7;
mediump vec3 u_xlat16_8;
float u_xlat11;
vec3 u_xlat13;
mediump float u_xlat16_14;
float u_xlat27;
bool u_xlatb27;
float u_xlat29;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4_mhyJitteredVP[1];
    u_xlat2 = hlslcc_mtx4x4_mhyJitteredVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4_mhyJitteredVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4_mhyJitteredVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat3.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    u_xlat3.xyw = u_xlat2.xyw;
    gl_Position = u_xlat3;
    vs_COLOR0 = in_COLOR0;
    u_xlat2.xyw = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat27 = u_xlat2.y * _HeigtFogParams.x;
    u_xlat4.x = u_xlat27 * -1.44269502;
    u_xlat4.x = exp2(u_xlat4.x);
    u_xlat4.x = (-u_xlat4.x) + 1.0;
    u_xlat4.x = u_xlat4.x / u_xlat27;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(0.00999999978<abs(u_xlat27));
#else
    u_xlatb27 = 0.00999999978<abs(u_xlat27);
#endif
    u_xlat16_5.x = (u_xlatb27) ? u_xlat4.x : 1.0;
    u_xlat27 = dot(u_xlat2.xyw, u_xlat2.xyw);
    u_xlat27 = sqrt(u_xlat27);
    u_xlat4.x = u_xlat27 * _HeigtFogParams.y;
    u_xlat16_5.x = u_xlat4.x * u_xlat16_5.x;
    u_xlat16_5.x = exp2((-u_xlat16_5.x));
    u_xlat16_5.x = (-u_xlat16_5.x) + 1.0;
    u_xlat4.x = u_xlat2.y * _HeigtFogParams2.x;
    u_xlat13.x = u_xlat4.x * -1.44269502;
    u_xlat13.x = exp2(u_xlat13.x);
    u_xlat13.x = (-u_xlat13.x) + 1.0;
    u_xlat13.x = u_xlat13.x / u_xlat4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(0.00999999978<abs(u_xlat4.x));
#else
    u_xlatb4 = 0.00999999978<abs(u_xlat4.x);
#endif
    u_xlat16_14 = (u_xlatb4) ? u_xlat13.x : 1.0;
    u_xlat4.x = u_xlat27 * _HeigtFogParams2.y;
    u_xlat16_14 = u_xlat4.x * u_xlat16_14;
    u_xlat16_14 = exp2((-u_xlat16_14));
    u_xlat16_5.y = (-u_xlat16_14) + 1.0;
    u_xlat16_5.xy = max(u_xlat16_5.xy, vec2(0.0, 0.0));
    u_xlat16_5.x = u_xlat16_5.y + u_xlat16_5.x;
    u_xlat4.x = u_xlat27 * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat16_14 = (-u_xlat4.x) + 2.0;
    u_xlat16_14 = u_xlat4.x * u_xlat16_14;
    u_xlat4.x = u_xlat16_14 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat4.x = u_xlat4.x + 1.0;
    u_xlat16_5.x = u_xlat4.x * u_xlat16_5.x;
    u_xlat4.x = min(u_xlat16_5.x, _HeigtFogColBase.w);
    u_xlat13.x = (-u_xlat4.x) + 1.0;
    u_xlat6.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat6.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat6.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat2.x = dot(u_xlat2.xyw, u_xlat6.xyz);
    u_xlat11 = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!((-u_xlat2.x)>=u_xlat11);
#else
    u_xlatb2 = (-u_xlat2.x)>=u_xlat11;
#endif
    u_xlat11 = u_xlat27 * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat11 = min(max(u_xlat11, 0.0), 1.0);
#else
    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
#endif
    u_xlat27 = u_xlat27 + (-_HeigtFogRamp.w);
    u_xlat27 = u_xlat27 * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
    u_xlat29 = (-u_xlat11) + 2.0;
    u_xlat11 = u_xlat29 * u_xlat11;
    u_xlat29 = u_xlat11 * _HeigtFogColDelta.w;
    u_xlat2.x = (u_xlatb2) ? u_xlat29 : u_xlat11;
    u_xlat2.x = log2(u_xlat2.x);
    u_xlat2.x = u_xlat2.x * unity_FogColor.w;
    u_xlat2.x = exp2(u_xlat2.x);
    u_xlat2.x = min(u_xlat2.x, _HeigtFogColBase.w);
    u_xlat11 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat11 = min(max(u_xlat11, 0.0), 1.0);
#else
    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
#endif
    u_xlat16_5.x = (-u_xlat11) + 2.0;
    u_xlat16_5.x = u_xlat11 * u_xlat16_5.x;
    u_xlat6.xyz = u_xlat16_5.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat7.xyz = (-u_xlat6.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat6.xyz = vec3(u_xlat27) * u_xlat7.xyz + u_xlat6.xyz;
    u_xlat6.xyz = u_xlat2.xxx * u_xlat6.xyz;
    u_xlat27 = (-u_xlat2.x) + 1.0;
    vs_TEXCOORD0.w = u_xlat13.x * u_xlat27;
    u_xlat2.xyw = u_xlat13.xxx * u_xlat6.xyz;
    u_xlat27 = u_xlat0.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
    u_xlat13.xyz = vec3(u_xlat27) * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    vs_TEXCOORD0.xyz = u_xlat13.xyz * u_xlat4.xxx + u_xlat2.xyw;
    u_xlat4.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat4.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat4.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat27 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat4.xyz = vec3(u_xlat27) * u_xlat4.xyz;
    u_xlat16_5.x = u_xlat4.y * u_xlat4.y;
    u_xlat16_5.x = u_xlat4.x * u_xlat4.x + (-u_xlat16_5.x);
    u_xlat16_6 = u_xlat4.yzzx * u_xlat4.xyzz;
    u_xlat16_8.x = dot(unity_SHBr, u_xlat16_6);
    u_xlat16_8.y = dot(unity_SHBg, u_xlat16_6);
    u_xlat16_8.z = dot(unity_SHBb, u_xlat16_6);
    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_8.xyz;
    u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat4.w = 1.0;
    u_xlat16_8.x = dot(unity_SHAr, u_xlat4);
    u_xlat16_8.y = dot(unity_SHAg, u_xlat4);
    u_xlat16_8.z = dot(unity_SHAb, u_xlat4);
    u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_8.xyz;
    vs_TEXCOORD1.xyz = u_xlat16_5.xyz;
    vs_TEXCOORD1.w = 1.0;
    u_xlat27 = u_xlat3.y * _ProjectionParams.x;
    u_xlat7.w = u_xlat27 * 0.5;
    u_xlat7.xz = u_xlat3.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.z = u_xlat2.z;
    u_xlat3.xy = u_xlat7.zz + u_xlat7.xw;
    vs_TEXCOORD2 = u_xlat3;
    vs_TEXCOORD4.xyw = u_xlat3.xyw;
    u_xlat27 = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat27 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat27;
    u_xlat27 = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat27;
    u_xlat27 = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat27;
    vs_TEXCOORD3.z = (-u_xlat27);
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD3.w = 0.0;
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD5.w = 0.0;
    vs_TEXCOORD6.xyz = u_xlat4.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[1].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].www + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * in_POSITION0.yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.zzz + u_xlat1.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.www + u_xlat1.xyz;
    vs_TEXCOORD7.xyz = u_xlat1.xyz * vec3(-1.0, -1.0, 1.0);
    vs_TEXCOORD7.w = 0.0;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat27 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat1.xyz = vec3(u_xlat27) * u_xlat1.xyz;
    vs_TEXCOORD8.xyz = u_xlat1.xyz;
    vs_TEXCOORD8.w = 0.0;
    u_xlat2.xyz = u_xlat1.yzx * u_xlat4.zxy;
    u_xlat1.xyz = u_xlat4.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
    u_xlat27 = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD9.xyz = vec3(u_xlat27) * u_xlat1.xyz;
    vs_TEXCOORD9.w = 0.0;
    u_xlat27 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat27 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat27;
    vs_TEXCOORD10.w = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat27;
    vs_TEXCOORD10.xyz = u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowPos[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	mediump vec4 _DepthFoamMask_ST;
uniform 	mediump float _DepthFoamSpeed;
uniform 	mediump vec4 _DepthFoamColor;
uniform 	mediump float _DepthFoamExtent;
uniform 	mediump float _DepthFoamDistance;
uniform 	mediump float _DepthFoamSubdivision;
uniform 	mediump float _DepthFoamWidth;
uniform 	mediump float _DepthFoamPhaseScale;
uniform 	mediump float _DepthFoamCloseFadeOffset;
uniform 	mediump float _DepthFoamCloseFadeDistance;
uniform 	float _NormalMapScale;
uniform 	float _Normal01_U_Speed;
uniform 	float _Normal01_VSpeed;
uniform 	float _NormalMapBias;
uniform 	float _Normal02_U_Speed;
uniform 	float _Normal02_V_Speed;
uniform 	float _RefractionIntensity;
uniform 	float _OpacityByDepth;
uniform 	float _SpecularIntensity;
uniform 	vec3 _ES_MoonDirection;
uniform 	vec3 _ES_SunDirection;
uniform 	float _Gloss;
uniform 	float _ShoreTransparency;
uniform 	float _SpecularPower;
uniform 	vec4 _ShallowColor;
uniform 	float _ShoreFade;
uniform 	vec4 _DeepColor;
uniform 	float _DeepColorDepth;
uniform 	float _DeepColorFade;
uniform 	vec4 _DistortionIntensity;
uniform 	float _SSRDistortion;
uniform 	float _SSRDistortion_Shore;
uniform 	float _SSRIntensity;
uniform 	float _ReflectionIntensity;
uniform 	float _FresnelPower;
uniform 	float _ShoreReflectionFade;
uniform 	mediump float _ProjectUVScale;
uniform 	vec4 _ReflectionSkyCubeMap_HDR;
uniform lowp sampler2D _Normal01;
uniform lowp sampler2D _Normal02;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _SceneScaledBufferBeforTransParent;
uniform lowp samplerCube _ReflectionSkyCubeMap;
uniform lowp sampler2D _SSRTexture;
uniform lowp sampler2D _DepthFoamMask;
uniform lowp sampler2DShadow hlslcc_zcmp_CascadeShadowMapTexture;
uniform lowp sampler2D _CascadeShadowMapTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD8;
in highp vec4 vs_TEXCOORD9;
in highp vec4 vs_TEXCOORD10;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec4 u_xlatb0;
vec4 u_xlat1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
lowp vec4 u_xlat10_3;
vec4 u_xlat4;
vec3 u_xlat5;
bool u_xlatb5;
vec3 u_xlat6;
vec4 u_xlat7;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
vec3 u_xlat9;
lowp vec3 u_xlat10_9;
vec3 u_xlat10;
vec3 u_xlat11;
vec3 u_xlat12;
vec3 u_xlat13;
vec3 u_xlat14;
mediump float u_xlat16_15;
vec2 u_xlat17;
mediump vec3 u_xlat16_18;
vec3 u_xlat20;
mediump vec3 u_xlat16_20;
lowp float u_xlat10_20;
int u_xlati20;
uint u_xlatu20;
bool u_xlatb20;
float u_xlat21;
float u_xlat33;
vec2 u_xlat36;
mediump float u_xlat16_36;
lowp float u_xlat10_36;
bool u_xlatb36;
float u_xlat49;
bool u_xlatb49;
mediump float u_xlat16_50;
float u_xlat52;
mediump float u_xlat16_52;
bool u_xlatb52;
float u_xlat53;
bool u_xlatb53;
float u_xlat54;
void main()
{
    u_xlat0.xy = vs_TEXCOORD5.zx * vec2(vec2(_ProjectUVScale, _ProjectUVScale));
    u_xlat1.x = _Time.y * _Normal01_U_Speed + u_xlat0.y;
    u_xlat1.yz = _Time.yy * vec2(_Normal01_VSpeed, _Normal02_U_Speed) + u_xlat0.xy;
    u_xlat1.w = _Time.y * _Normal02_V_Speed + u_xlat0.x;
    u_xlat10_0.xyz = texture(_Normal01, u_xlat1.xy, _NormalMapBias).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_2.xy = u_xlat16_0.xy * vec2(_NormalMapScale);
    u_xlat10_1.xyz = texture(_Normal02, u_xlat1.zw, _NormalMapBias).xyz;
    u_xlat16_0.w = -1.0;
    u_xlat16_3.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.wwz;
    u_xlat16_3.xy = u_xlat16_3.xy * vec2(_NormalMapScale);
    u_xlat16_2.z = -1.0;
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
    u_xlat1.x = float(1.0) / vs_TEXCOORD4.w;
    u_xlat17.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat17.x = texture(_CameraDepthTexture, u_xlat17.xy).x;
    u_xlat17.x = _ZBufferParams.z * u_xlat17.x + _ZBufferParams.w;
    u_xlat17.x = float(1.0) / u_xlat17.x;
    u_xlat33 = vs_TEXCOORD10.w + 9.99999975e-05;
    u_xlat33 = (-u_xlat17.x) / u_xlat33;
    u_xlat33 = vs_TEXCOORD10.y * u_xlat33 + _WorldSpaceCameraPos.y;
    u_xlat33 = (-u_xlat33) + vs_TEXCOORD5.y;
    u_xlat4.xy = u_xlat16_2.xy * vec2(vec2(_RefractionIntensity, _RefractionIntensity));
    u_xlat1.x = u_xlat1.x * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.xw = u_xlat1.xx * u_xlat4.xy;
    u_xlat1.xw = u_xlat1.xw * vs_TEXCOORD4.ww;
    u_xlat17.x = u_xlat17.x + (-vs_TEXCOORD4.w);
#ifdef UNITY_ADRENO_ES3
    u_xlat17.x = min(max(u_xlat17.x, 0.0), 1.0);
#else
    u_xlat17.x = clamp(u_xlat17.x, 0.0, 1.0);
#endif
    u_xlat4.xy = u_xlat17.xx * u_xlat1.xw;
    u_xlat4.z = 0.0;
    u_xlat1.xyw = u_xlat4.xyz + vs_TEXCOORD4.xyw;
    u_xlat1.xy = u_xlat1.xy / u_xlat1.ww;
    u_xlat1.x = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat1.x = _ZBufferParams.z * u_xlat1.x + _ZBufferParams.w;
    u_xlat1.x = float(1.0) / u_xlat1.x;
    u_xlat1.x = u_xlat1.x + (-vs_TEXCOORD4.w);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.xyw = u_xlat1.xxx * u_xlat4.xyz + vs_TEXCOORD4.xyw;
    u_xlat4.xy = u_xlat1.xy / u_xlat1.ww;
    u_xlat49 = texture(_CameraDepthTexture, u_xlat4.xy).x;
    u_xlat49 = _ZBufferParams.z * u_xlat49 + _ZBufferParams.w;
    u_xlat49 = float(1.0) / u_xlat49;
    u_xlat49 = u_xlat49 + (-vs_TEXCOORD4.w);
    u_xlat4.x = 0.100000001 / _OpacityByDepth;
    u_xlat16_3.xz = u_xlat16_2.xy;
    u_xlat16_3.y = 1.0;
    u_xlat16_20.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
    u_xlat16_20.x = inversesqrt(u_xlat16_20.x);
    u_xlat16_20.xyz = u_xlat16_3.xyz * u_xlat16_20.xxx;
#ifdef UNITY_ADRENO_ES3
    u_xlatb5 = !!(0.0>=_ES_MoonDirection.y);
#else
    u_xlatb5 = 0.0>=_ES_MoonDirection.y;
#endif
    u_xlat5.xyz = (bool(u_xlatb5)) ? _ES_SunDirection.xyz : _ES_MoonDirection.xyz;
    u_xlat6.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat53 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat54 = inversesqrt(u_xlat53);
    u_xlat7.xyz = vec3(u_xlat54) * u_xlat6.xyz;
    u_xlat5.xyz = u_xlat6.xyz * vec3(u_xlat54) + u_xlat5.xyz;
    u_xlat6.x = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat5.xyz = u_xlat5.xyz * u_xlat6.xxx;
    u_xlat20.x = dot(u_xlat16_20.xyz, u_xlat5.xyz);
    u_xlat36.x = _Gloss * 128.0;
    u_xlat20.x = max(u_xlat20.x, 9.99999975e-05);
    u_xlat20.x = log2(u_xlat20.x);
    u_xlat20.x = u_xlat20.x * u_xlat36.x;
    u_xlat20.x = exp2(u_xlat20.x);
    u_xlat20.x = u_xlat20.x * _SpecularIntensity;
    u_xlat20.x = max(u_xlat20.x, 0.0);
    u_xlat20.x = min(u_xlat20.x, 16.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb36 = !!(_ES_MoonDirection.y>=9.99999975e-05);
#else
    u_xlatb36 = _ES_MoonDirection.y>=9.99999975e-05;
#endif
    u_xlat36.x = u_xlatb36 ? 1.0 : float(0.0);
    u_xlat52 = _ES_MoonDirection.y + -1.0;
    u_xlat36.x = u_xlat36.x * u_xlat52 + 1.0;
    u_xlat4.w = float(1.0) / _ShoreTransparency;
    u_xlat5.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat5.x = inversesqrt(u_xlat5.x);
    u_xlat5.xyz = u_xlat5.xxx * vs_TEXCOORD6.xyz;
    u_xlat5.x = dot(u_xlat7.xyz, u_xlat5.xyz);
    u_xlat5.x = (-u_xlat5.x) + 1.0;
    u_xlat5.x = max(u_xlat5.x, 9.99999975e-05);
    u_xlat5.x = log2(u_xlat5.x);
    u_xlat21 = u_xlat5.x * _SpecularPower;
    u_xlat21 = exp2(u_xlat21);
    u_xlat6.xyz = u_xlat36.xxx * _LightColor0.xyz;
    u_xlat6.xyz = u_xlat20.xxx * u_xlat6.xyz;
    u_xlat20.x = u_xlat49 + -1.0;
    u_xlat20.x = u_xlat4.w * u_xlat20.x;
    u_xlat20.x = u_xlat20.x * 0.100000001;
#ifdef UNITY_ADRENO_ES3
    u_xlat20.x = min(max(u_xlat20.x, 0.0), 1.0);
#else
    u_xlat20.x = clamp(u_xlat20.x, 0.0, 1.0);
#endif
    u_xlat6.xyz = u_xlat20.xxx * u_xlat6.xyz;
    u_xlat4.xy = vec2(u_xlat49) * u_xlat4.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.xy = min(max(u_xlat4.xy, 0.0), 1.0);
#else
    u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);
#endif
    u_xlat20.x = max(u_xlat4.y, 9.99999975e-05);
    u_xlat20.x = log2(u_xlat20.x);
    u_xlat20.x = u_xlat20.x * _ShoreFade;
    u_xlat20.x = exp2(u_xlat20.x);
    u_xlat8.xyz = _ShallowColor.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat8.xyz = u_xlat20.xxx * u_xlat8.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat1.xy = u_xlat1.xy / vs_TEXCOORD4.ww;
    u_xlat10_9.xyz = texture(_SceneScaledBufferBeforTransParent, u_xlat1.xy).xyz;
    u_xlat10.xyz = u_xlat8.xyz * u_xlat10_9.xyz;
    u_xlat1.x = 0.100000001 / _DeepColorDepth;
    u_xlat1.x = u_xlat1.x * u_xlat49;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.x = max(u_xlat1.x, 9.99999975e-05);
    u_xlat1.x = log2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _DeepColorFade;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat11.xyz = (-u_xlat8.xyz) * u_xlat10_9.xyz + _DeepColor.xyz;
    u_xlat11.xyz = u_xlat1.xxx * u_xlat11.xyz + u_xlat10.xyz;
    u_xlat12.xyz = u_xlat16_2.xyz * _DistortionIntensity.xyz;
    u_xlat13.x = vs_TEXCOORD8.x;
    u_xlat13.y = vs_TEXCOORD9.x;
    u_xlat13.z = vs_TEXCOORD6.x;
    u_xlat13.x = dot(u_xlat13.xyz, u_xlat12.xyz);
    u_xlat14.x = vs_TEXCOORD8.y;
    u_xlat14.y = vs_TEXCOORD9.y;
    u_xlat14.z = vs_TEXCOORD6.y;
    u_xlat13.y = dot(u_xlat14.xyz, u_xlat12.xyz);
    u_xlat14.x = vs_TEXCOORD8.z;
    u_xlat14.y = vs_TEXCOORD9.z;
    u_xlat14.z = vs_TEXCOORD6.z;
    u_xlat13.z = dot(u_xlat14.xyz, u_xlat12.xyz);
    u_xlat1.x = dot(u_xlat13.xyz, u_xlat13.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat13.xyz = u_xlat1.xxx * u_xlat13.xyz;
    u_xlat1.x = dot((-u_xlat7.xyz), u_xlat13.xyz);
    u_xlat1.x = u_xlat1.x + u_xlat1.x;
    u_xlat7.xyz = u_xlat13.xyz * (-u_xlat1.xxx) + (-u_xlat7.xyz);
    u_xlat10_0 = textureLod(_ReflectionSkyCubeMap, u_xlat7.xyz, 0.0);
    u_xlat16_2.x = u_xlat10_0.w + -1.0;
    u_xlat16_2.x = _ReflectionSkyCubeMap_HDR.w * u_xlat16_2.x + 1.0;
    u_xlat16_2.x = log2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * _ReflectionSkyCubeMap_HDR.y;
    u_xlat16_2.x = exp2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * _ReflectionSkyCubeMap_HDR.x;
    u_xlat16_18.xyz = u_xlat10_0.xyz * u_xlat16_2.xxx;
    u_xlat1.xy = u_xlat12.xy * vec2(_SSRDistortion);
    u_xlat36.x = float(1.0) / _SSRDistortion_Shore;
    u_xlat36.x = u_xlat49 * u_xlat36.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat36.x = min(max(u_xlat36.x, 0.0), 1.0);
#else
    u_xlat36.x = clamp(u_xlat36.x, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat1.xy * u_xlat36.xx;
    u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD4.ww + vs_TEXCOORD4.xy;
    u_xlat1.xy = u_xlat1.xy / vs_TEXCOORD4.ww;
    u_xlat10_3 = texture(_SSRTexture, u_xlat1.xy).wxyz;
    u_xlat16_7.xyz = (-u_xlat16_2.xxx) * u_xlat10_0.xyz + u_xlat10_3.yzw;
    u_xlat7.xyz = u_xlat16_7.xyz * vec3(vec3(_SSRIntensity, _SSRIntensity, _SSRIntensity));
    u_xlat16_3.x = u_xlat10_3.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat7.xyz = u_xlat16_3.xxx * u_xlat7.xyz + u_xlat16_18.xyz;
    u_xlat1.x = u_xlat5.x * _FresnelPower;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _ReflectionIntensity;
    u_xlat17.x = float(1.0) / _ShoreReflectionFade;
    u_xlat17.x = u_xlat17.x * u_xlat49;
#ifdef UNITY_ADRENO_ES3
    u_xlat17.x = min(max(u_xlat17.x, 0.0), 1.0);
#else
    u_xlat17.x = clamp(u_xlat17.x, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat17.x * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat7.xyz = (-u_xlat11.xyz) + u_xlat7.xyz;
    u_xlat1.xyw = u_xlat1.xxx * u_xlat7.xyz + u_xlat11.xyz;
    u_xlat1.xyw = (-u_xlat8.xyz) * u_xlat10_9.xyz + u_xlat1.xyw;
    u_xlat1.xyw = u_xlat20.xxx * u_xlat1.xyw + u_xlat10.xyz;
    u_xlat20.x = (-vs_TEXCOORD5.y) * _WorldSpaceLightPos0.w + _WorldSpaceLightPos0.y;
    u_xlat16_2.x = max(u_xlat20.x, 0.0);
    u_xlat20.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowSplitSpheres[0].xyz);
    u_xlat7.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowSplitSpheres[1].xyz);
    u_xlat8.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowSplitSpheres[2].xyz);
    u_xlat9.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowSplitSpheres[3].xyz);
    u_xlat0.x = dot(u_xlat20.xyz, u_xlat20.xyz);
    u_xlat0.y = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat0.z = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat0.w = dot(u_xlat9.xyz, u_xlat9.xyz);
    u_xlatb0 = lessThan(u_xlat0, unity_ShadowSplitSqRadii);
    u_xlat0 = mix(vec4(0.0, 0.0, 0.0, 0.0), vec4(1.0, 1.0, 1.0, 1.0), vec4(u_xlatb0));
    u_xlat16_18.x = u_xlat0.y + u_xlat0.x;
    u_xlat16_18.y = u_xlat0.z + u_xlat16_18.x;
    u_xlat3.x = -0.0;
    u_xlat3.y = (-u_xlat0.x);
    u_xlat3.zw = (-u_xlat16_18.xy);
    u_xlat0 = u_xlat0 + u_xlat3;
    u_xlat0 = max(u_xlat0, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat16_18.x = dot(u_xlat0, vec4(1.0, 1.0, 1.0, 1.0));
#ifdef UNITY_ADRENO_ES3
    u_xlatb20 = !!(u_xlat16_18.x>=0.5);
#else
    u_xlatb20 = u_xlat16_18.x>=0.5;
#endif
    if(u_xlatb20){
        u_xlat20.x = dot(u_xlat0.yzw, vec3(1.0, 2.0, 3.0));
        u_xlat20.x = min(u_xlat20.x, 3.0);
        u_xlatu20 = uint(u_xlat20.x);
        u_xlat7.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowPos[int(u_xlatu20)].xyz);
        u_xlati20 = int(u_xlatu20) << 2;
        u_xlat8.xyz = u_xlat7.yyy * hlslcc_mtx4x4unity_WorldToShadow[(u_xlati20 + 1)].xyz;
        u_xlat7.xyw = hlslcc_mtx4x4unity_WorldToShadow[u_xlati20].xyz * u_xlat7.xxx + u_xlat8.xyz;
        u_xlat7.xyz = hlslcc_mtx4x4unity_WorldToShadow[(u_xlati20 + 2)].xyz * u_xlat7.zzz + u_xlat7.xyw;
        u_xlat20.xyz = u_xlat7.xyz + hlslcc_mtx4x4unity_WorldToShadow[(u_xlati20 + 3)].xyz;
        vec3 txVec0 = vec3(u_xlat20.xy,u_xlat20.z);
        u_xlat10_20 = textureLod(hlslcc_zcmp_CascadeShadowMapTexture, txVec0, 0.0);
        u_xlat16_36 = (-_LightShadowData.x) + 1.0;
        u_xlat20.x = u_xlat10_20 * u_xlat16_36 + _LightShadowData.x;
    } else {
        u_xlat20.x = 1.0;
    //ENDIF
    }
    u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;
    u_xlat20.xyz = u_xlat16_2.xyz * u_xlat20.xxx + vs_TEXCOORD1.xyz;
    u_xlat16_2.xyz = u_xlat20.xyz * vec3(0.300000012, 0.300000012, 0.300000012) + vec3(0.699999988, 0.699999988, 0.699999988);
    u_xlat20.x = sqrt(u_xlat53);
    u_xlat16_50 = u_xlat20.x + (-_DepthFoamCloseFadeOffset);
    u_xlat16_50 = u_xlat16_50 / _DepthFoamCloseFadeDistance;
    u_xlat16_15 = vs_COLOR0.x * _DepthFoamExtent;
    u_xlat33 = max(u_xlat33, 0.0);
    u_xlat33 = min(u_xlat16_15, u_xlat33);
    u_xlat16_15 = _DepthFoamExtent * vs_COLOR0.x + 9.99999975e-05;
    u_xlat33 = u_xlat33 / u_xlat16_15;
    u_xlat33 = (-u_xlat33) + 1.0;
    u_xlat36.xy = vec2(_Time.y * _DepthFoamMask_ST.z, _Time.y * _DepthFoamMask_ST.w);
    u_xlat36.xy = fract(u_xlat36.xy);
    u_xlat36.xy = _DepthFoamMask_ST.xy * vs_TEXCOORD5.xz + u_xlat36.xy;
    u_xlat10_36 = texture(_DepthFoamMask, u_xlat36.xy, -1.0).x;
    u_xlat52 = vs_TEXCOORD5.z + vs_TEXCOORD5.x;
    u_xlat52 = u_xlat52 * _DepthFoamPhaseScale;
    u_xlat52 = _DepthFoamSpeed * _Time.y + u_xlat52;
    u_xlat5.x = (-u_xlat33) + 1.0;
    u_xlat16_15 = _DepthFoamSubdivision * u_xlat33 + u_xlat52;
    u_xlat16_15 = sin(u_xlat16_15);
    u_xlat16_15 = _DepthFoamWidth * u_xlat33 + u_xlat16_15;
    u_xlat16_52 = u_xlat10_36 * 2.0 + -1.0;
    u_xlat52 = u_xlat16_52 + u_xlat16_15;
#ifdef UNITY_ADRENO_ES3
    u_xlatb52 = !!(u_xlat52>=u_xlat5.x);
#else
    u_xlatb52 = u_xlat52>=u_xlat5.x;
#endif
    u_xlat52 = u_xlatb52 ? 1.0 : float(0.0);
    u_xlat36.x = u_xlat52 * u_xlat10_36;
    u_xlat16_15 = _DepthFoamDistance + 9.99999975e-05;
    u_xlat16_15 = u_xlat20.x / u_xlat16_15;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_15 = min(max(u_xlat16_15, 0.0), 1.0);
#else
    u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);
#endif
    u_xlat16_20.x = (-u_xlat16_15) + 1.0;
    u_xlat16_15 = vs_COLOR0.y * _DepthFoamColor.w;
    u_xlat16_50 = u_xlat16_50 * u_xlat16_15;
    u_xlat16_50 = u_xlat36.x * u_xlat16_50;
    u_xlat16_50 = u_xlat33 * u_xlat16_50;
    u_xlat16_50 = u_xlat16_20.x * u_xlat16_50;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_50 = min(max(u_xlat16_50, 0.0), 1.0);
#else
    u_xlat16_50 = clamp(u_xlat16_50, 0.0, 1.0);
#endif
    u_xlat16_2.xyz = _DepthFoamColor.xyz * u_xlat16_2.xyz + (-u_xlat1.xyw);
    u_xlat16_2.xyz = vec3(u_xlat16_50) * u_xlat16_2.xyz + u_xlat1.xyw;
    u_xlat1.xyz = u_xlat6.xyz * vec3(u_xlat21) + u_xlat16_2.xyz;
    u_xlat0.w = u_xlat4.x * vs_COLOR0.w;
    u_xlat4.xyz = vs_TEXCOORD5.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat5.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat5.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat5.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat49 = dot(u_xlat4.xyz, u_xlat5.xyz);
    u_xlat4.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat4.x = sqrt(u_xlat4.x);
    u_xlat20.y = u_xlat4.x * _HeigtFogParams.y;
    u_xlat52 = u_xlat4.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat52 = min(max(u_xlat52, 0.0), 1.0);
#else
    u_xlat52 = clamp(u_xlat52, 0.0, 1.0);
#endif
    u_xlat5.x = (-u_xlat52) + 2.0;
    u_xlat52 = u_xlat52 * u_xlat5.x;
    u_xlat5.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb49 = !!((-u_xlat49)>=u_xlat5.x);
#else
    u_xlatb49 = (-u_xlat49)>=u_xlat5.x;
#endif
    u_xlat5.x = u_xlat52 * _HeigtFogColDelta.w;
    u_xlat49 = (u_xlatb49) ? u_xlat5.x : u_xlat52;
    u_xlat49 = log2(u_xlat49);
    u_xlat49 = u_xlat49 * unity_FogColor.w;
    u_xlat49 = exp2(u_xlat49);
    u_xlat49 = min(u_xlat49, _HeigtFogColBase.w);
    u_xlat52 = vs_TEXCOORD5.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat52 = min(max(u_xlat52, 0.0), 1.0);
#else
    u_xlat52 = clamp(u_xlat52, 0.0, 1.0);
#endif
    u_xlat16_2.x = (-u_xlat52) + 2.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat52;
    u_xlat5.xyz = u_xlat16_2.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat52 = u_xlat4.x + (-_HeigtFogRamp.w);
    u_xlat52 = u_xlat52 * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat52 = min(max(u_xlat52, 0.0), 1.0);
#else
    u_xlat52 = clamp(u_xlat52, 0.0, 1.0);
#endif
    u_xlat6.xyz = (-u_xlat5.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat5.xyz = vec3(u_xlat52) * u_xlat6.xyz + u_xlat5.xyz;
    u_xlat52 = u_xlat4.y * _HeigtFogParams.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb53 = !!(0.00999999978<abs(u_xlat52));
#else
    u_xlatb53 = 0.00999999978<abs(u_xlat52);
#endif
    u_xlat6.x = u_xlat52 * -1.44269502;
    u_xlat6.x = exp2(u_xlat6.x);
    u_xlat6.x = (-u_xlat6.x) + 1.0;
    u_xlat52 = u_xlat6.x / u_xlat52;
    u_xlat16_2.x = (u_xlatb53) ? u_xlat52 : 1.0;
    u_xlat20.x = u_xlat4.y * _HeigtFogParams2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb52 = !!(0.00999999978<abs(u_xlat20.x));
#else
    u_xlatb52 = 0.00999999978<abs(u_xlat20.x);
#endif
    u_xlat53 = u_xlat20.x * -1.44269502;
    u_xlat53 = exp2(u_xlat53);
    u_xlat53 = (-u_xlat53) + 1.0;
    u_xlat20.x = u_xlat53 / u_xlat20.x;
    u_xlat16_2.y = (u_xlatb52) ? u_xlat20.x : 1.0;
    u_xlat20.x = u_xlat4.x * _HeigtFogParams2.y;
    u_xlat16_2.xy = u_xlat16_2.xy * u_xlat20.yx;
    u_xlat16_2.x = exp2((-u_xlat16_2.x));
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_18.x = exp2((-u_xlat16_2.y));
    u_xlat16_2.y = (-u_xlat16_18.x) + 1.0;
    u_xlat16_2.xy = max(u_xlat16_2.xy, vec2(0.0, 0.0));
    u_xlat16_2.x = u_xlat16_2.y + u_xlat16_2.x;
    u_xlat4.x = u_xlat4.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat16_18.x = (-u_xlat4.x) + 2.0;
    u_xlat16_18.x = u_xlat16_18.x * u_xlat4.x;
    u_xlat4.x = u_xlat16_18.x * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat4.x = u_xlat4.x + 1.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat4.x;
    u_xlat4.x = min(u_xlat16_2.x, _HeigtFogColBase.w);
    u_xlat20.x = vs_TEXCOORD5.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat20.x = min(max(u_xlat20.x, 0.0), 1.0);
#else
    u_xlat20.x = clamp(u_xlat20.x, 0.0, 1.0);
#endif
    u_xlat20.xyz = u_xlat20.xxx * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    u_xlat5.xyz = vec3(u_xlat49) * u_xlat5.xyz;
    u_xlat53 = (-u_xlat4.x) + 1.0;
    u_xlat5.xyz = vec3(u_xlat53) * u_xlat5.xyz;
    u_xlat4.xyz = u_xlat20.xyz * u_xlat4.xxx + u_xlat5.xyz;
    u_xlat49 = (-u_xlat49) + 1.0;
    u_xlat49 = u_xlat53 * u_xlat49;
    u_xlat0.xyz = vec3(u_xlat49) * u_xlat1.xyz + u_xlat4.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" "MSAA_INTERPOLATION" "MHY_SHADER_MIDDLE" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	mediump float _MHYZBias;
uniform 	vec4 hlslcc_mtx4x4_mhyJitteredVP[4];
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
out highp vec4 vs_TEXCOORD9;
out highp vec4 vs_TEXCOORD10;
float u_xlat0;
int u_xlati0;
vec4 u_xlat1;
bool u_xlatb1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
bool u_xlatb4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
mediump vec4 u_xlat16_6;
vec4 u_xlat7;
mediump vec3 u_xlat16_8;
vec3 u_xlat9;
float u_xlat10;
float u_xlat13;
bool u_xlatb13;
mediump float u_xlat16_14;
float u_xlat22;
float u_xlat28;
float u_xlat31;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat9.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4_mhyJitteredVP[1];
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[3] * u_xlat2.wwww + u_xlat1;
    u_xlat3.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    u_xlat3.xyw = u_xlat1.xyw;
    gl_Position = u_xlat3;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.xyw = u_xlat9.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat4.x = u_xlat1.y * _HeigtFogParams.x;
    u_xlat13 = u_xlat4.x * -1.44269502;
    u_xlat13 = exp2(u_xlat13);
    u_xlat13 = (-u_xlat13) + 1.0;
    u_xlat13 = u_xlat13 / u_xlat4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(0.00999999978<abs(u_xlat4.x));
#else
    u_xlatb4 = 0.00999999978<abs(u_xlat4.x);
#endif
    u_xlat16_5.x = (u_xlatb4) ? u_xlat13 : 1.0;
    u_xlat4.x = dot(u_xlat1.xyw, u_xlat1.xyw);
    u_xlat4.x = sqrt(u_xlat4.x);
    u_xlat13 = u_xlat4.x * _HeigtFogParams.y;
    u_xlat16_5.x = u_xlat13 * u_xlat16_5.x;
    u_xlat16_5.x = exp2((-u_xlat16_5.x));
    u_xlat16_5.x = (-u_xlat16_5.x) + 1.0;
    u_xlat13 = u_xlat1.y * _HeigtFogParams2.x;
    u_xlat22 = u_xlat13 * -1.44269502;
    u_xlat22 = exp2(u_xlat22);
    u_xlat22 = (-u_xlat22) + 1.0;
    u_xlat22 = u_xlat22 / u_xlat13;
#ifdef UNITY_ADRENO_ES3
    u_xlatb13 = !!(0.00999999978<abs(u_xlat13));
#else
    u_xlatb13 = 0.00999999978<abs(u_xlat13);
#endif
    u_xlat16_14 = (u_xlatb13) ? u_xlat22 : 1.0;
    u_xlat13 = u_xlat4.x * _HeigtFogParams2.y;
    u_xlat16_14 = u_xlat13 * u_xlat16_14;
    u_xlat16_14 = exp2((-u_xlat16_14));
    u_xlat16_5.y = (-u_xlat16_14) + 1.0;
    u_xlat16_5.xy = max(u_xlat16_5.xy, vec2(0.0, 0.0));
    u_xlat16_5.x = u_xlat16_5.y + u_xlat16_5.x;
    u_xlat13 = u_xlat4.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat13 = min(max(u_xlat13, 0.0), 1.0);
#else
    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
#endif
    u_xlat16_14 = (-u_xlat13) + 2.0;
    u_xlat16_14 = u_xlat13 * u_xlat16_14;
    u_xlat13 = u_xlat16_14 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat13 = u_xlat13 + 1.0;
    u_xlat16_5.x = u_xlat13 * u_xlat16_5.x;
    u_xlat13 = min(u_xlat16_5.x, _HeigtFogColBase.w);
    u_xlat22 = (-u_xlat13) + 1.0;
    u_xlat31 = _ProjectionParams.z * 0.999899983;
    u_xlat6.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat6.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat6.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat1.x = dot(u_xlat1.xyw, u_xlat6.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!((-u_xlat1.x)>=u_xlat31);
#else
    u_xlatb1 = (-u_xlat1.x)>=u_xlat31;
#endif
    u_xlat10 = u_xlat4.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat10 = min(max(u_xlat10, 0.0), 1.0);
#else
    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
#endif
    u_xlat28 = u_xlat4.x + (-_HeigtFogRamp.w);
    u_xlat28 = u_xlat28 * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat28 = min(max(u_xlat28, 0.0), 1.0);
#else
    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
#endif
    u_xlat4.x = (-u_xlat10) + 2.0;
    u_xlat10 = u_xlat10 * u_xlat4.x;
    u_xlat4.x = u_xlat10 * _HeigtFogColDelta.w;
    u_xlat1.x = (u_xlatb1) ? u_xlat4.x : u_xlat10;
    u_xlat1.x = log2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * unity_FogColor.w;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat1.x = min(u_xlat1.x, _HeigtFogColBase.w);
    u_xlat10 = u_xlat9.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat10 = min(max(u_xlat10, 0.0), 1.0);
#else
    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
#endif
    u_xlat16_5.x = (-u_xlat10) + 2.0;
    u_xlat16_5.x = u_xlat10 * u_xlat16_5.x;
    u_xlat6.xyz = u_xlat16_5.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat7.xyz = (-u_xlat6.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat6.xyz = vec3(u_xlat28) * u_xlat7.xyz + u_xlat6.xyz;
    u_xlat6.xyz = u_xlat1.xxx * u_xlat6.xyz;
    u_xlat1.x = (-u_xlat1.x) + 1.0;
    vs_TEXCOORD0.w = u_xlat22 * u_xlat1.x;
    u_xlat1.xyw = vec3(u_xlat22) * u_xlat6.xyz;
    u_xlat4.x = u_xlat9.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat4.xzw = u_xlat4.xxx * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    vs_TEXCOORD0.xyz = u_xlat4.xzw * vec3(u_xlat13) + u_xlat1.xyw;
    vs_TEXCOORD1.w = 1.0;
    u_xlat4.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat4.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat4.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat1.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
    u_xlat16_5.x = u_xlat4.y * u_xlat4.y;
    u_xlat16_5.x = u_xlat4.x * u_xlat4.x + (-u_xlat16_5.x);
    u_xlat16_6 = u_xlat4.yzzx * u_xlat4.xyzz;
    u_xlat16_8.x = dot(unity_SHBr, u_xlat16_6);
    u_xlat16_8.y = dot(unity_SHBg, u_xlat16_6);
    u_xlat16_8.z = dot(unity_SHBb, u_xlat16_6);
    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_8.xyz;
    u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat4.w = 1.0;
    u_xlat16_8.x = dot(unity_SHAr, u_xlat4);
    u_xlat16_8.y = dot(unity_SHAg, u_xlat4);
    u_xlat16_8.z = dot(unity_SHAb, u_xlat4);
    u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_8.xyz;
    vs_TEXCOORD1.xyz = u_xlat16_5.xyz;
    u_xlat1.x = u_xlat3.y * _ProjectionParams.x;
    u_xlat7.w = u_xlat1.x * 0.5;
    u_xlat7.xz = u_xlat3.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.z = u_xlat1.z;
    u_xlat3.xy = u_xlat7.zz + u_xlat7.xw;
    vs_TEXCOORD2 = u_xlat3;
    vs_TEXCOORD4.xyw = u_xlat3.xyw;
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD3.w = 0.0;
    u_xlat1.x = u_xlat2.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat2.x + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat2.z + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat2.w + u_xlat1.x;
    vs_TEXCOORD3.z = (-u_xlat1.x);
    vs_TEXCOORD5.w = 0.0;
    vs_TEXCOORD5.xyz = u_xlat9.xyz;
    u_xlat9.xyz = (-u_xlat9.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD6.w = 0.0;
    vs_TEXCOORD6.xyz = u_xlat4.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].www + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * in_POSITION0.yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.zzz + u_xlat1.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.www + u_xlat1.xyz;
    vs_TEXCOORD7.xyz = u_xlat1.xyz * vec3(-1.0, -1.0, 1.0);
    vs_TEXCOORD7.w = 0.0;
    u_xlat1.xyz = in_TANGENT0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat0 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0 = inversesqrt(u_xlat0);
    u_xlat1.xyz = vec3(u_xlat0) * u_xlat1.xyz;
    vs_TEXCOORD8.xyz = u_xlat1.xyz;
    vs_TEXCOORD8.w = 0.0;
    u_xlat2.xyz = u_xlat1.yzx * u_xlat4.zxy;
    u_xlat1.xyz = u_xlat4.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
    u_xlat0 = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD9.xyz = vec3(u_xlat0) * u_xlat1.xyz;
    vs_TEXCOORD9.w = 0.0;
    u_xlat0 = u_xlat9.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat9.x + u_xlat0;
    vs_TEXCOORD10.w = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat9.z + u_xlat0;
    vs_TEXCOORD10.xyz = u_xlat9.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowPos[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	mediump vec4 _DepthFoamMask_ST;
uniform 	mediump float _DepthFoamSpeed;
uniform 	mediump vec4 _DepthFoamColor;
uniform 	mediump float _DepthFoamExtent;
uniform 	mediump float _DepthFoamDistance;
uniform 	mediump float _DepthFoamSubdivision;
uniform 	mediump float _DepthFoamWidth;
uniform 	mediump float _DepthFoamPhaseScale;
uniform 	mediump float _DepthFoamCloseFadeOffset;
uniform 	mediump float _DepthFoamCloseFadeDistance;
uniform 	float _NormalMapScale;
uniform 	float _Normal01_U_Speed;
uniform 	float _Normal01_VSpeed;
uniform 	float _NormalMapBias;
uniform 	float _Normal02_U_Speed;
uniform 	float _Normal02_V_Speed;
uniform 	float _RefractionIntensity;
uniform 	float _OpacityByDepth;
uniform 	float _SpecularIntensity;
uniform 	vec3 _ES_MoonDirection;
uniform 	vec3 _ES_SunDirection;
uniform 	float _Gloss;
uniform 	float _ShoreTransparency;
uniform 	float _SpecularPower;
uniform 	vec4 _ShallowColor;
uniform 	float _ShoreFade;
uniform 	vec4 _DeepColor;
uniform 	float _DeepColorDepth;
uniform 	float _DeepColorFade;
uniform 	vec4 _DistortionIntensity;
uniform 	float _SSRDistortion;
uniform 	float _SSRDistortion_Shore;
uniform 	float _SSRIntensity;
uniform 	float _ReflectionIntensity;
uniform 	float _FresnelPower;
uniform 	float _ShoreReflectionFade;
uniform 	mediump float _ProjectUVScale;
uniform 	vec4 _ReflectionSkyCubeMap_HDR;
uniform lowp sampler2D _Normal01;
uniform lowp sampler2D _Normal02;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _SceneScaledBufferBeforTransParent;
uniform lowp samplerCube _ReflectionSkyCubeMap;
uniform lowp sampler2D _SSRTexture;
uniform lowp sampler2D _DepthFoamMask;
uniform lowp sampler2DShadow hlslcc_zcmp_CascadeShadowMapTexture;
uniform lowp sampler2D _CascadeShadowMapTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD8;
in highp vec4 vs_TEXCOORD9;
in highp vec4 vs_TEXCOORD10;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec4 u_xlatb0;
vec4 u_xlat1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
lowp vec4 u_xlat10_3;
vec4 u_xlat4;
vec3 u_xlat5;
bool u_xlatb5;
vec3 u_xlat6;
vec4 u_xlat7;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
vec3 u_xlat9;
lowp vec3 u_xlat10_9;
vec3 u_xlat10;
vec3 u_xlat11;
vec3 u_xlat12;
vec3 u_xlat13;
vec3 u_xlat14;
mediump float u_xlat16_15;
vec2 u_xlat17;
mediump vec3 u_xlat16_18;
vec3 u_xlat20;
mediump vec3 u_xlat16_20;
lowp float u_xlat10_20;
int u_xlati20;
uint u_xlatu20;
bool u_xlatb20;
float u_xlat21;
float u_xlat33;
vec2 u_xlat36;
mediump float u_xlat16_36;
lowp float u_xlat10_36;
bool u_xlatb36;
float u_xlat49;
bool u_xlatb49;
mediump float u_xlat16_50;
float u_xlat52;
mediump float u_xlat16_52;
bool u_xlatb52;
float u_xlat53;
bool u_xlatb53;
float u_xlat54;
void main()
{
    u_xlat0.xy = vs_TEXCOORD5.zx * vec2(vec2(_ProjectUVScale, _ProjectUVScale));
    u_xlat1.x = _Time.y * _Normal01_U_Speed + u_xlat0.y;
    u_xlat1.yz = _Time.yy * vec2(_Normal01_VSpeed, _Normal02_U_Speed) + u_xlat0.xy;
    u_xlat1.w = _Time.y * _Normal02_V_Speed + u_xlat0.x;
    u_xlat10_0.xyz = texture(_Normal01, u_xlat1.xy, _NormalMapBias).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_2.xy = u_xlat16_0.xy * vec2(_NormalMapScale);
    u_xlat10_1.xyz = texture(_Normal02, u_xlat1.zw, _NormalMapBias).xyz;
    u_xlat16_0.w = -1.0;
    u_xlat16_3.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.wwz;
    u_xlat16_3.xy = u_xlat16_3.xy * vec2(_NormalMapScale);
    u_xlat16_2.z = -1.0;
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
    u_xlat1.x = float(1.0) / vs_TEXCOORD4.w;
    u_xlat17.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat17.x = texture(_CameraDepthTexture, u_xlat17.xy).x;
    u_xlat17.x = _ZBufferParams.z * u_xlat17.x + _ZBufferParams.w;
    u_xlat17.x = float(1.0) / u_xlat17.x;
    u_xlat33 = vs_TEXCOORD10.w + 9.99999975e-05;
    u_xlat33 = (-u_xlat17.x) / u_xlat33;
    u_xlat33 = vs_TEXCOORD10.y * u_xlat33 + _WorldSpaceCameraPos.y;
    u_xlat33 = (-u_xlat33) + vs_TEXCOORD5.y;
    u_xlat4.xy = u_xlat16_2.xy * vec2(vec2(_RefractionIntensity, _RefractionIntensity));
    u_xlat1.x = u_xlat1.x * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.xw = u_xlat1.xx * u_xlat4.xy;
    u_xlat1.xw = u_xlat1.xw * vs_TEXCOORD4.ww;
    u_xlat17.x = u_xlat17.x + (-vs_TEXCOORD4.w);
#ifdef UNITY_ADRENO_ES3
    u_xlat17.x = min(max(u_xlat17.x, 0.0), 1.0);
#else
    u_xlat17.x = clamp(u_xlat17.x, 0.0, 1.0);
#endif
    u_xlat4.xy = u_xlat17.xx * u_xlat1.xw;
    u_xlat4.z = 0.0;
    u_xlat1.xyw = u_xlat4.xyz + vs_TEXCOORD4.xyw;
    u_xlat1.xy = u_xlat1.xy / u_xlat1.ww;
    u_xlat1.x = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat1.x = _ZBufferParams.z * u_xlat1.x + _ZBufferParams.w;
    u_xlat1.x = float(1.0) / u_xlat1.x;
    u_xlat1.x = u_xlat1.x + (-vs_TEXCOORD4.w);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.xyw = u_xlat1.xxx * u_xlat4.xyz + vs_TEXCOORD4.xyw;
    u_xlat4.xy = u_xlat1.xy / u_xlat1.ww;
    u_xlat49 = texture(_CameraDepthTexture, u_xlat4.xy).x;
    u_xlat49 = _ZBufferParams.z * u_xlat49 + _ZBufferParams.w;
    u_xlat49 = float(1.0) / u_xlat49;
    u_xlat49 = u_xlat49 + (-vs_TEXCOORD4.w);
    u_xlat4.x = 0.100000001 / _OpacityByDepth;
    u_xlat16_3.xz = u_xlat16_2.xy;
    u_xlat16_3.y = 1.0;
    u_xlat16_20.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
    u_xlat16_20.x = inversesqrt(u_xlat16_20.x);
    u_xlat16_20.xyz = u_xlat16_3.xyz * u_xlat16_20.xxx;
#ifdef UNITY_ADRENO_ES3
    u_xlatb5 = !!(0.0>=_ES_MoonDirection.y);
#else
    u_xlatb5 = 0.0>=_ES_MoonDirection.y;
#endif
    u_xlat5.xyz = (bool(u_xlatb5)) ? _ES_SunDirection.xyz : _ES_MoonDirection.xyz;
    u_xlat6.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat53 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat54 = inversesqrt(u_xlat53);
    u_xlat7.xyz = vec3(u_xlat54) * u_xlat6.xyz;
    u_xlat5.xyz = u_xlat6.xyz * vec3(u_xlat54) + u_xlat5.xyz;
    u_xlat6.x = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat5.xyz = u_xlat5.xyz * u_xlat6.xxx;
    u_xlat20.x = dot(u_xlat16_20.xyz, u_xlat5.xyz);
    u_xlat36.x = _Gloss * 128.0;
    u_xlat20.x = max(u_xlat20.x, 9.99999975e-05);
    u_xlat20.x = log2(u_xlat20.x);
    u_xlat20.x = u_xlat20.x * u_xlat36.x;
    u_xlat20.x = exp2(u_xlat20.x);
    u_xlat20.x = u_xlat20.x * _SpecularIntensity;
    u_xlat20.x = max(u_xlat20.x, 0.0);
    u_xlat20.x = min(u_xlat20.x, 16.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb36 = !!(_ES_MoonDirection.y>=9.99999975e-05);
#else
    u_xlatb36 = _ES_MoonDirection.y>=9.99999975e-05;
#endif
    u_xlat36.x = u_xlatb36 ? 1.0 : float(0.0);
    u_xlat52 = _ES_MoonDirection.y + -1.0;
    u_xlat36.x = u_xlat36.x * u_xlat52 + 1.0;
    u_xlat4.w = float(1.0) / _ShoreTransparency;
    u_xlat5.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat5.x = inversesqrt(u_xlat5.x);
    u_xlat5.xyz = u_xlat5.xxx * vs_TEXCOORD6.xyz;
    u_xlat5.x = dot(u_xlat7.xyz, u_xlat5.xyz);
    u_xlat5.x = (-u_xlat5.x) + 1.0;
    u_xlat5.x = max(u_xlat5.x, 9.99999975e-05);
    u_xlat5.x = log2(u_xlat5.x);
    u_xlat21 = u_xlat5.x * _SpecularPower;
    u_xlat21 = exp2(u_xlat21);
    u_xlat6.xyz = u_xlat36.xxx * _LightColor0.xyz;
    u_xlat6.xyz = u_xlat20.xxx * u_xlat6.xyz;
    u_xlat20.x = u_xlat49 + -1.0;
    u_xlat20.x = u_xlat4.w * u_xlat20.x;
    u_xlat20.x = u_xlat20.x * 0.100000001;
#ifdef UNITY_ADRENO_ES3
    u_xlat20.x = min(max(u_xlat20.x, 0.0), 1.0);
#else
    u_xlat20.x = clamp(u_xlat20.x, 0.0, 1.0);
#endif
    u_xlat6.xyz = u_xlat20.xxx * u_xlat6.xyz;
    u_xlat4.xy = vec2(u_xlat49) * u_xlat4.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.xy = min(max(u_xlat4.xy, 0.0), 1.0);
#else
    u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);
#endif
    u_xlat20.x = max(u_xlat4.y, 9.99999975e-05);
    u_xlat20.x = log2(u_xlat20.x);
    u_xlat20.x = u_xlat20.x * _ShoreFade;
    u_xlat20.x = exp2(u_xlat20.x);
    u_xlat8.xyz = _ShallowColor.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat8.xyz = u_xlat20.xxx * u_xlat8.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat1.xy = u_xlat1.xy / vs_TEXCOORD4.ww;
    u_xlat10_9.xyz = texture(_SceneScaledBufferBeforTransParent, u_xlat1.xy).xyz;
    u_xlat10.xyz = u_xlat8.xyz * u_xlat10_9.xyz;
    u_xlat1.x = 0.100000001 / _DeepColorDepth;
    u_xlat1.x = u_xlat1.x * u_xlat49;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.x = max(u_xlat1.x, 9.99999975e-05);
    u_xlat1.x = log2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _DeepColorFade;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat11.xyz = (-u_xlat8.xyz) * u_xlat10_9.xyz + _DeepColor.xyz;
    u_xlat11.xyz = u_xlat1.xxx * u_xlat11.xyz + u_xlat10.xyz;
    u_xlat12.xyz = u_xlat16_2.xyz * _DistortionIntensity.xyz;
    u_xlat13.x = vs_TEXCOORD8.x;
    u_xlat13.y = vs_TEXCOORD9.x;
    u_xlat13.z = vs_TEXCOORD6.x;
    u_xlat13.x = dot(u_xlat13.xyz, u_xlat12.xyz);
    u_xlat14.x = vs_TEXCOORD8.y;
    u_xlat14.y = vs_TEXCOORD9.y;
    u_xlat14.z = vs_TEXCOORD6.y;
    u_xlat13.y = dot(u_xlat14.xyz, u_xlat12.xyz);
    u_xlat14.x = vs_TEXCOORD8.z;
    u_xlat14.y = vs_TEXCOORD9.z;
    u_xlat14.z = vs_TEXCOORD6.z;
    u_xlat13.z = dot(u_xlat14.xyz, u_xlat12.xyz);
    u_xlat1.x = dot(u_xlat13.xyz, u_xlat13.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat13.xyz = u_xlat1.xxx * u_xlat13.xyz;
    u_xlat1.x = dot((-u_xlat7.xyz), u_xlat13.xyz);
    u_xlat1.x = u_xlat1.x + u_xlat1.x;
    u_xlat7.xyz = u_xlat13.xyz * (-u_xlat1.xxx) + (-u_xlat7.xyz);
    u_xlat10_0 = textureLod(_ReflectionSkyCubeMap, u_xlat7.xyz, 0.0);
    u_xlat16_2.x = u_xlat10_0.w + -1.0;
    u_xlat16_2.x = _ReflectionSkyCubeMap_HDR.w * u_xlat16_2.x + 1.0;
    u_xlat16_2.x = log2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * _ReflectionSkyCubeMap_HDR.y;
    u_xlat16_2.x = exp2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * _ReflectionSkyCubeMap_HDR.x;
    u_xlat16_18.xyz = u_xlat10_0.xyz * u_xlat16_2.xxx;
    u_xlat1.xy = u_xlat12.xy * vec2(_SSRDistortion);
    u_xlat36.x = float(1.0) / _SSRDistortion_Shore;
    u_xlat36.x = u_xlat49 * u_xlat36.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat36.x = min(max(u_xlat36.x, 0.0), 1.0);
#else
    u_xlat36.x = clamp(u_xlat36.x, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat1.xy * u_xlat36.xx;
    u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD4.ww + vs_TEXCOORD4.xy;
    u_xlat1.xy = u_xlat1.xy / vs_TEXCOORD4.ww;
    u_xlat10_3 = texture(_SSRTexture, u_xlat1.xy).wxyz;
    u_xlat16_7.xyz = (-u_xlat16_2.xxx) * u_xlat10_0.xyz + u_xlat10_3.yzw;
    u_xlat7.xyz = u_xlat16_7.xyz * vec3(vec3(_SSRIntensity, _SSRIntensity, _SSRIntensity));
    u_xlat16_3.x = u_xlat10_3.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat7.xyz = u_xlat16_3.xxx * u_xlat7.xyz + u_xlat16_18.xyz;
    u_xlat1.x = u_xlat5.x * _FresnelPower;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _ReflectionIntensity;
    u_xlat17.x = float(1.0) / _ShoreReflectionFade;
    u_xlat17.x = u_xlat17.x * u_xlat49;
#ifdef UNITY_ADRENO_ES3
    u_xlat17.x = min(max(u_xlat17.x, 0.0), 1.0);
#else
    u_xlat17.x = clamp(u_xlat17.x, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat17.x * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat7.xyz = (-u_xlat11.xyz) + u_xlat7.xyz;
    u_xlat1.xyw = u_xlat1.xxx * u_xlat7.xyz + u_xlat11.xyz;
    u_xlat1.xyw = (-u_xlat8.xyz) * u_xlat10_9.xyz + u_xlat1.xyw;
    u_xlat1.xyw = u_xlat20.xxx * u_xlat1.xyw + u_xlat10.xyz;
    u_xlat20.x = (-vs_TEXCOORD5.y) * _WorldSpaceLightPos0.w + _WorldSpaceLightPos0.y;
    u_xlat16_2.x = max(u_xlat20.x, 0.0);
    u_xlat20.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowSplitSpheres[0].xyz);
    u_xlat7.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowSplitSpheres[1].xyz);
    u_xlat8.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowSplitSpheres[2].xyz);
    u_xlat9.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowSplitSpheres[3].xyz);
    u_xlat0.x = dot(u_xlat20.xyz, u_xlat20.xyz);
    u_xlat0.y = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat0.z = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat0.w = dot(u_xlat9.xyz, u_xlat9.xyz);
    u_xlatb0 = lessThan(u_xlat0, unity_ShadowSplitSqRadii);
    u_xlat0 = mix(vec4(0.0, 0.0, 0.0, 0.0), vec4(1.0, 1.0, 1.0, 1.0), vec4(u_xlatb0));
    u_xlat16_18.x = u_xlat0.y + u_xlat0.x;
    u_xlat16_18.y = u_xlat0.z + u_xlat16_18.x;
    u_xlat3.x = -0.0;
    u_xlat3.y = (-u_xlat0.x);
    u_xlat3.zw = (-u_xlat16_18.xy);
    u_xlat0 = u_xlat0 + u_xlat3;
    u_xlat0 = max(u_xlat0, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat16_18.x = dot(u_xlat0, vec4(1.0, 1.0, 1.0, 1.0));
#ifdef UNITY_ADRENO_ES3
    u_xlatb20 = !!(u_xlat16_18.x>=0.5);
#else
    u_xlatb20 = u_xlat16_18.x>=0.5;
#endif
    if(u_xlatb20){
        u_xlat20.x = dot(u_xlat0.yzw, vec3(1.0, 2.0, 3.0));
        u_xlat20.x = min(u_xlat20.x, 3.0);
        u_xlatu20 = uint(u_xlat20.x);
        u_xlat7.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowPos[int(u_xlatu20)].xyz);
        u_xlati20 = int(u_xlatu20) << 2;
        u_xlat8.xyz = u_xlat7.yyy * hlslcc_mtx4x4unity_WorldToShadow[(u_xlati20 + 1)].xyz;
        u_xlat7.xyw = hlslcc_mtx4x4unity_WorldToShadow[u_xlati20].xyz * u_xlat7.xxx + u_xlat8.xyz;
        u_xlat7.xyz = hlslcc_mtx4x4unity_WorldToShadow[(u_xlati20 + 2)].xyz * u_xlat7.zzz + u_xlat7.xyw;
        u_xlat20.xyz = u_xlat7.xyz + hlslcc_mtx4x4unity_WorldToShadow[(u_xlati20 + 3)].xyz;
        vec3 txVec0 = vec3(u_xlat20.xy,u_xlat20.z);
        u_xlat10_20 = textureLod(hlslcc_zcmp_CascadeShadowMapTexture, txVec0, 0.0);
        u_xlat16_36 = (-_LightShadowData.x) + 1.0;
        u_xlat20.x = u_xlat10_20 * u_xlat16_36 + _LightShadowData.x;
    } else {
        u_xlat20.x = 1.0;
    //ENDIF
    }
    u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;
    u_xlat20.xyz = u_xlat16_2.xyz * u_xlat20.xxx + vs_TEXCOORD1.xyz;
    u_xlat16_2.xyz = u_xlat20.xyz * vec3(0.300000012, 0.300000012, 0.300000012) + vec3(0.699999988, 0.699999988, 0.699999988);
    u_xlat20.x = sqrt(u_xlat53);
    u_xlat16_50 = u_xlat20.x + (-_DepthFoamCloseFadeOffset);
    u_xlat16_50 = u_xlat16_50 / _DepthFoamCloseFadeDistance;
    u_xlat16_15 = vs_COLOR0.x * _DepthFoamExtent;
    u_xlat33 = max(u_xlat33, 0.0);
    u_xlat33 = min(u_xlat16_15, u_xlat33);
    u_xlat16_15 = _DepthFoamExtent * vs_COLOR0.x + 9.99999975e-05;
    u_xlat33 = u_xlat33 / u_xlat16_15;
    u_xlat33 = (-u_xlat33) + 1.0;
    u_xlat36.xy = vec2(_Time.y * _DepthFoamMask_ST.z, _Time.y * _DepthFoamMask_ST.w);
    u_xlat36.xy = fract(u_xlat36.xy);
    u_xlat36.xy = _DepthFoamMask_ST.xy * vs_TEXCOORD5.xz + u_xlat36.xy;
    u_xlat10_36 = texture(_DepthFoamMask, u_xlat36.xy, -1.0).x;
    u_xlat52 = vs_TEXCOORD5.z + vs_TEXCOORD5.x;
    u_xlat52 = u_xlat52 * _DepthFoamPhaseScale;
    u_xlat52 = _DepthFoamSpeed * _Time.y + u_xlat52;
    u_xlat5.x = (-u_xlat33) + 1.0;
    u_xlat16_15 = _DepthFoamSubdivision * u_xlat33 + u_xlat52;
    u_xlat16_15 = sin(u_xlat16_15);
    u_xlat16_15 = _DepthFoamWidth * u_xlat33 + u_xlat16_15;
    u_xlat16_52 = u_xlat10_36 * 2.0 + -1.0;
    u_xlat52 = u_xlat16_52 + u_xlat16_15;
#ifdef UNITY_ADRENO_ES3
    u_xlatb52 = !!(u_xlat52>=u_xlat5.x);
#else
    u_xlatb52 = u_xlat52>=u_xlat5.x;
#endif
    u_xlat52 = u_xlatb52 ? 1.0 : float(0.0);
    u_xlat36.x = u_xlat52 * u_xlat10_36;
    u_xlat16_15 = _DepthFoamDistance + 9.99999975e-05;
    u_xlat16_15 = u_xlat20.x / u_xlat16_15;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_15 = min(max(u_xlat16_15, 0.0), 1.0);
#else
    u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);
#endif
    u_xlat16_20.x = (-u_xlat16_15) + 1.0;
    u_xlat16_15 = vs_COLOR0.y * _DepthFoamColor.w;
    u_xlat16_50 = u_xlat16_50 * u_xlat16_15;
    u_xlat16_50 = u_xlat36.x * u_xlat16_50;
    u_xlat16_50 = u_xlat33 * u_xlat16_50;
    u_xlat16_50 = u_xlat16_20.x * u_xlat16_50;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_50 = min(max(u_xlat16_50, 0.0), 1.0);
#else
    u_xlat16_50 = clamp(u_xlat16_50, 0.0, 1.0);
#endif
    u_xlat16_2.xyz = _DepthFoamColor.xyz * u_xlat16_2.xyz + (-u_xlat1.xyw);
    u_xlat16_2.xyz = vec3(u_xlat16_50) * u_xlat16_2.xyz + u_xlat1.xyw;
    u_xlat1.xyz = u_xlat6.xyz * vec3(u_xlat21) + u_xlat16_2.xyz;
    u_xlat0.w = u_xlat4.x * vs_COLOR0.w;
    u_xlat4.xyz = vs_TEXCOORD5.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat5.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat5.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat5.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat49 = dot(u_xlat4.xyz, u_xlat5.xyz);
    u_xlat4.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat4.x = sqrt(u_xlat4.x);
    u_xlat20.y = u_xlat4.x * _HeigtFogParams.y;
    u_xlat52 = u_xlat4.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat52 = min(max(u_xlat52, 0.0), 1.0);
#else
    u_xlat52 = clamp(u_xlat52, 0.0, 1.0);
#endif
    u_xlat5.x = (-u_xlat52) + 2.0;
    u_xlat52 = u_xlat52 * u_xlat5.x;
    u_xlat5.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb49 = !!((-u_xlat49)>=u_xlat5.x);
#else
    u_xlatb49 = (-u_xlat49)>=u_xlat5.x;
#endif
    u_xlat5.x = u_xlat52 * _HeigtFogColDelta.w;
    u_xlat49 = (u_xlatb49) ? u_xlat5.x : u_xlat52;
    u_xlat49 = log2(u_xlat49);
    u_xlat49 = u_xlat49 * unity_FogColor.w;
    u_xlat49 = exp2(u_xlat49);
    u_xlat49 = min(u_xlat49, _HeigtFogColBase.w);
    u_xlat52 = vs_TEXCOORD5.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat52 = min(max(u_xlat52, 0.0), 1.0);
#else
    u_xlat52 = clamp(u_xlat52, 0.0, 1.0);
#endif
    u_xlat16_2.x = (-u_xlat52) + 2.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat52;
    u_xlat5.xyz = u_xlat16_2.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat52 = u_xlat4.x + (-_HeigtFogRamp.w);
    u_xlat52 = u_xlat52 * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat52 = min(max(u_xlat52, 0.0), 1.0);
#else
    u_xlat52 = clamp(u_xlat52, 0.0, 1.0);
#endif
    u_xlat6.xyz = (-u_xlat5.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat5.xyz = vec3(u_xlat52) * u_xlat6.xyz + u_xlat5.xyz;
    u_xlat52 = u_xlat4.y * _HeigtFogParams.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb53 = !!(0.00999999978<abs(u_xlat52));
#else
    u_xlatb53 = 0.00999999978<abs(u_xlat52);
#endif
    u_xlat6.x = u_xlat52 * -1.44269502;
    u_xlat6.x = exp2(u_xlat6.x);
    u_xlat6.x = (-u_xlat6.x) + 1.0;
    u_xlat52 = u_xlat6.x / u_xlat52;
    u_xlat16_2.x = (u_xlatb53) ? u_xlat52 : 1.0;
    u_xlat20.x = u_xlat4.y * _HeigtFogParams2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb52 = !!(0.00999999978<abs(u_xlat20.x));
#else
    u_xlatb52 = 0.00999999978<abs(u_xlat20.x);
#endif
    u_xlat53 = u_xlat20.x * -1.44269502;
    u_xlat53 = exp2(u_xlat53);
    u_xlat53 = (-u_xlat53) + 1.0;
    u_xlat20.x = u_xlat53 / u_xlat20.x;
    u_xlat16_2.y = (u_xlatb52) ? u_xlat20.x : 1.0;
    u_xlat20.x = u_xlat4.x * _HeigtFogParams2.y;
    u_xlat16_2.xy = u_xlat16_2.xy * u_xlat20.yx;
    u_xlat16_2.x = exp2((-u_xlat16_2.x));
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_18.x = exp2((-u_xlat16_2.y));
    u_xlat16_2.y = (-u_xlat16_18.x) + 1.0;
    u_xlat16_2.xy = max(u_xlat16_2.xy, vec2(0.0, 0.0));
    u_xlat16_2.x = u_xlat16_2.y + u_xlat16_2.x;
    u_xlat4.x = u_xlat4.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat16_18.x = (-u_xlat4.x) + 2.0;
    u_xlat16_18.x = u_xlat16_18.x * u_xlat4.x;
    u_xlat4.x = u_xlat16_18.x * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat4.x = u_xlat4.x + 1.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat4.x;
    u_xlat4.x = min(u_xlat16_2.x, _HeigtFogColBase.w);
    u_xlat20.x = vs_TEXCOORD5.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat20.x = min(max(u_xlat20.x, 0.0), 1.0);
#else
    u_xlat20.x = clamp(u_xlat20.x, 0.0, 1.0);
#endif
    u_xlat20.xyz = u_xlat20.xxx * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    u_xlat5.xyz = vec3(u_xlat49) * u_xlat5.xyz;
    u_xlat53 = (-u_xlat4.x) + 1.0;
    u_xlat5.xyz = vec3(u_xlat53) * u_xlat5.xyz;
    u_xlat4.xyz = u_xlat20.xyz * u_xlat4.xxx + u_xlat5.xyz;
    u_xlat49 = (-u_xlat49) + 1.0;
    u_xlat49 = u_xlat53 * u_xlat49;
    u_xlat0.xyz = vec3(u_xlat49) * u_xlat1.xyz + u_xlat4.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "MSAA_INTERPOLATION" "MHY_SHADER_LOW" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	mediump float _MHYZBias;
uniform 	vec4 hlslcc_mtx4x4_mhyJitteredVP[4];
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
out highp vec4 vs_TEXCOORD9;
out highp vec4 vs_TEXCOORD10;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
vec4 u_xlat4;
bool u_xlatb4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
mediump vec4 u_xlat16_6;
vec4 u_xlat7;
mediump vec3 u_xlat16_8;
float u_xlat11;
vec3 u_xlat13;
mediump float u_xlat16_14;
float u_xlat27;
bool u_xlatb27;
float u_xlat29;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4_mhyJitteredVP[1];
    u_xlat2 = hlslcc_mtx4x4_mhyJitteredVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4_mhyJitteredVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4_mhyJitteredVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat3.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    u_xlat3.xyw = u_xlat2.xyw;
    gl_Position = u_xlat3;
    vs_COLOR0 = in_COLOR0;
    u_xlat2.xyw = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat27 = u_xlat2.y * _HeigtFogParams.x;
    u_xlat4.x = u_xlat27 * -1.44269502;
    u_xlat4.x = exp2(u_xlat4.x);
    u_xlat4.x = (-u_xlat4.x) + 1.0;
    u_xlat4.x = u_xlat4.x / u_xlat27;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(0.00999999978<abs(u_xlat27));
#else
    u_xlatb27 = 0.00999999978<abs(u_xlat27);
#endif
    u_xlat16_5.x = (u_xlatb27) ? u_xlat4.x : 1.0;
    u_xlat27 = dot(u_xlat2.xyw, u_xlat2.xyw);
    u_xlat27 = sqrt(u_xlat27);
    u_xlat4.x = u_xlat27 * _HeigtFogParams.y;
    u_xlat16_5.x = u_xlat4.x * u_xlat16_5.x;
    u_xlat16_5.x = exp2((-u_xlat16_5.x));
    u_xlat16_5.x = (-u_xlat16_5.x) + 1.0;
    u_xlat4.x = u_xlat2.y * _HeigtFogParams2.x;
    u_xlat13.x = u_xlat4.x * -1.44269502;
    u_xlat13.x = exp2(u_xlat13.x);
    u_xlat13.x = (-u_xlat13.x) + 1.0;
    u_xlat13.x = u_xlat13.x / u_xlat4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(0.00999999978<abs(u_xlat4.x));
#else
    u_xlatb4 = 0.00999999978<abs(u_xlat4.x);
#endif
    u_xlat16_14 = (u_xlatb4) ? u_xlat13.x : 1.0;
    u_xlat4.x = u_xlat27 * _HeigtFogParams2.y;
    u_xlat16_14 = u_xlat4.x * u_xlat16_14;
    u_xlat16_14 = exp2((-u_xlat16_14));
    u_xlat16_5.y = (-u_xlat16_14) + 1.0;
    u_xlat16_5.xy = max(u_xlat16_5.xy, vec2(0.0, 0.0));
    u_xlat16_5.x = u_xlat16_5.y + u_xlat16_5.x;
    u_xlat4.x = u_xlat27 * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat16_14 = (-u_xlat4.x) + 2.0;
    u_xlat16_14 = u_xlat4.x * u_xlat16_14;
    u_xlat4.x = u_xlat16_14 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat4.x = u_xlat4.x + 1.0;
    u_xlat16_5.x = u_xlat4.x * u_xlat16_5.x;
    u_xlat4.x = min(u_xlat16_5.x, _HeigtFogColBase.w);
    u_xlat13.x = (-u_xlat4.x) + 1.0;
    u_xlat6.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat6.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat6.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat2.x = dot(u_xlat2.xyw, u_xlat6.xyz);
    u_xlat11 = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!((-u_xlat2.x)>=u_xlat11);
#else
    u_xlatb2 = (-u_xlat2.x)>=u_xlat11;
#endif
    u_xlat11 = u_xlat27 * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat11 = min(max(u_xlat11, 0.0), 1.0);
#else
    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
#endif
    u_xlat27 = u_xlat27 + (-_HeigtFogRamp.w);
    u_xlat27 = u_xlat27 * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
    u_xlat29 = (-u_xlat11) + 2.0;
    u_xlat11 = u_xlat29 * u_xlat11;
    u_xlat29 = u_xlat11 * _HeigtFogColDelta.w;
    u_xlat2.x = (u_xlatb2) ? u_xlat29 : u_xlat11;
    u_xlat2.x = log2(u_xlat2.x);
    u_xlat2.x = u_xlat2.x * unity_FogColor.w;
    u_xlat2.x = exp2(u_xlat2.x);
    u_xlat2.x = min(u_xlat2.x, _HeigtFogColBase.w);
    u_xlat11 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat11 = min(max(u_xlat11, 0.0), 1.0);
#else
    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
#endif
    u_xlat16_5.x = (-u_xlat11) + 2.0;
    u_xlat16_5.x = u_xlat11 * u_xlat16_5.x;
    u_xlat6.xyz = u_xlat16_5.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat7.xyz = (-u_xlat6.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat6.xyz = vec3(u_xlat27) * u_xlat7.xyz + u_xlat6.xyz;
    u_xlat6.xyz = u_xlat2.xxx * u_xlat6.xyz;
    u_xlat27 = (-u_xlat2.x) + 1.0;
    vs_TEXCOORD0.w = u_xlat13.x * u_xlat27;
    u_xlat2.xyw = u_xlat13.xxx * u_xlat6.xyz;
    u_xlat27 = u_xlat0.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
    u_xlat13.xyz = vec3(u_xlat27) * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    vs_TEXCOORD0.xyz = u_xlat13.xyz * u_xlat4.xxx + u_xlat2.xyw;
    u_xlat4.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat4.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat4.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat27 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat4.xyz = vec3(u_xlat27) * u_xlat4.xyz;
    u_xlat16_5.x = u_xlat4.y * u_xlat4.y;
    u_xlat16_5.x = u_xlat4.x * u_xlat4.x + (-u_xlat16_5.x);
    u_xlat16_6 = u_xlat4.yzzx * u_xlat4.xyzz;
    u_xlat16_8.x = dot(unity_SHBr, u_xlat16_6);
    u_xlat16_8.y = dot(unity_SHBg, u_xlat16_6);
    u_xlat16_8.z = dot(unity_SHBb, u_xlat16_6);
    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_8.xyz;
    u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat4.w = 1.0;
    u_xlat16_8.x = dot(unity_SHAr, u_xlat4);
    u_xlat16_8.y = dot(unity_SHAg, u_xlat4);
    u_xlat16_8.z = dot(unity_SHAb, u_xlat4);
    u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_8.xyz;
    vs_TEXCOORD1.xyz = u_xlat16_5.xyz;
    vs_TEXCOORD1.w = 1.0;
    u_xlat27 = u_xlat3.y * _ProjectionParams.x;
    u_xlat7.w = u_xlat27 * 0.5;
    u_xlat7.xz = u_xlat3.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.z = u_xlat2.z;
    u_xlat3.xy = u_xlat7.zz + u_xlat7.xw;
    vs_TEXCOORD2 = u_xlat3;
    vs_TEXCOORD4.xyw = u_xlat3.xyw;
    u_xlat27 = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat27 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat27;
    u_xlat27 = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat27;
    u_xlat27 = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat27;
    vs_TEXCOORD3.z = (-u_xlat27);
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD3.w = 0.0;
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD5.w = 0.0;
    vs_TEXCOORD6.xyz = u_xlat4.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[1].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].www + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * in_POSITION0.yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.zzz + u_xlat1.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.www + u_xlat1.xyz;
    vs_TEXCOORD7.xyz = u_xlat1.xyz * vec3(-1.0, -1.0, 1.0);
    vs_TEXCOORD7.w = 0.0;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat27 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat1.xyz = vec3(u_xlat27) * u_xlat1.xyz;
    vs_TEXCOORD8.xyz = u_xlat1.xyz;
    vs_TEXCOORD8.w = 0.0;
    u_xlat2.xyz = u_xlat1.yzx * u_xlat4.zxy;
    u_xlat1.xyz = u_xlat4.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
    u_xlat27 = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD9.xyz = vec3(u_xlat27) * u_xlat1.xyz;
    vs_TEXCOORD9.w = 0.0;
    u_xlat27 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat27 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat27;
    vs_TEXCOORD10.w = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat27;
    vs_TEXCOORD10.xyz = u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowPos[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	mediump vec4 _DepthFoamMask_ST;
uniform 	mediump float _DepthFoamSpeed;
uniform 	mediump vec4 _DepthFoamColor;
uniform 	mediump float _DepthFoamExtent;
uniform 	mediump float _DepthFoamDistance;
uniform 	mediump float _DepthFoamSubdivision;
uniform 	mediump float _DepthFoamWidth;
uniform 	mediump float _DepthFoamPhaseScale;
uniform 	mediump float _DepthFoamCloseFadeOffset;
uniform 	mediump float _DepthFoamCloseFadeDistance;
uniform 	float _NormalMapScale;
uniform 	float _Normal01_U_Speed;
uniform 	float _Normal01_VSpeed;
uniform 	float _NormalMapBias;
uniform 	float _Normal02_U_Speed;
uniform 	float _Normal02_V_Speed;
uniform 	float _RefractionIntensity;
uniform 	float _OpacityByDepth;
uniform 	float _SpecularIntensity;
uniform 	vec3 _ES_MoonDirection;
uniform 	vec3 _ES_SunDirection;
uniform 	float _Gloss;
uniform 	float _ShoreTransparency;
uniform 	float _SpecularPower;
uniform 	vec4 _ShallowColor;
uniform 	float _ShoreFade;
uniform 	vec4 _DeepColor;
uniform 	float _DeepColorDepth;
uniform 	float _DeepColorFade;
uniform 	vec4 _DistortionIntensity;
uniform 	float _ReflectionIntensity;
uniform 	float _FresnelPower;
uniform 	float _ShoreReflectionFade;
uniform 	mediump float _ProjectUVScale;
uniform 	vec4 _ReflectionSkyCubeMap_HDR;
uniform lowp sampler2D _Normal01;
uniform lowp sampler2D _Normal02;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _SceneScaledBufferBeforTransParent;
uniform lowp samplerCube _ReflectionSkyCubeMap;
uniform lowp sampler2D _DepthFoamMask;
uniform lowp sampler2DShadow hlslcc_zcmp_CascadeShadowMapTexture;
uniform lowp sampler2D _CascadeShadowMapTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD8;
in highp vec4 vs_TEXCOORD9;
in highp vec4 vs_TEXCOORD10;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec4 u_xlatb0;
vec4 u_xlat1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec4 u_xlat4;
vec3 u_xlat5;
bool u_xlatb5;
vec3 u_xlat6;
vec4 u_xlat7;
vec3 u_xlat8;
vec3 u_xlat9;
lowp vec3 u_xlat10_9;
vec3 u_xlat10;
vec3 u_xlat11;
vec3 u_xlat12;
vec3 u_xlat13;
vec3 u_xlat14;
mediump float u_xlat16_15;
vec2 u_xlat17;
mediump vec2 u_xlat16_18;
vec3 u_xlat20;
mediump vec3 u_xlat16_20;
lowp float u_xlat10_20;
int u_xlati20;
uint u_xlatu20;
bool u_xlatb20;
float u_xlat21;
float u_xlat33;
vec2 u_xlat36;
mediump float u_xlat16_36;
lowp float u_xlat10_36;
bool u_xlatb36;
float u_xlat49;
bool u_xlatb49;
mediump float u_xlat16_50;
float u_xlat52;
mediump float u_xlat16_52;
bool u_xlatb52;
float u_xlat53;
bool u_xlatb53;
float u_xlat54;
void main()
{
    u_xlat0.xy = vs_TEXCOORD5.zx * vec2(vec2(_ProjectUVScale, _ProjectUVScale));
    u_xlat1.x = _Time.y * _Normal01_U_Speed + u_xlat0.y;
    u_xlat1.yz = _Time.yy * vec2(_Normal01_VSpeed, _Normal02_U_Speed) + u_xlat0.xy;
    u_xlat1.w = _Time.y * _Normal02_V_Speed + u_xlat0.x;
    u_xlat10_0.xyz = texture(_Normal01, u_xlat1.xy, _NormalMapBias).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_2.xy = u_xlat16_0.xy * vec2(_NormalMapScale);
    u_xlat10_1.xyz = texture(_Normal02, u_xlat1.zw, _NormalMapBias).xyz;
    u_xlat16_0.w = -1.0;
    u_xlat16_3.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.wwz;
    u_xlat16_3.xy = u_xlat16_3.xy * vec2(_NormalMapScale);
    u_xlat16_2.z = -1.0;
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
    u_xlat1.x = float(1.0) / vs_TEXCOORD4.w;
    u_xlat17.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat17.x = texture(_CameraDepthTexture, u_xlat17.xy).x;
    u_xlat17.x = _ZBufferParams.z * u_xlat17.x + _ZBufferParams.w;
    u_xlat17.x = float(1.0) / u_xlat17.x;
    u_xlat33 = vs_TEXCOORD10.w + 9.99999975e-05;
    u_xlat33 = (-u_xlat17.x) / u_xlat33;
    u_xlat33 = vs_TEXCOORD10.y * u_xlat33 + _WorldSpaceCameraPos.y;
    u_xlat33 = (-u_xlat33) + vs_TEXCOORD5.y;
    u_xlat4.xy = u_xlat16_2.xy * vec2(vec2(_RefractionIntensity, _RefractionIntensity));
    u_xlat1.x = u_xlat1.x * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.xw = u_xlat1.xx * u_xlat4.xy;
    u_xlat1.xw = u_xlat1.xw * vs_TEXCOORD4.ww;
    u_xlat17.x = u_xlat17.x + (-vs_TEXCOORD4.w);
#ifdef UNITY_ADRENO_ES3
    u_xlat17.x = min(max(u_xlat17.x, 0.0), 1.0);
#else
    u_xlat17.x = clamp(u_xlat17.x, 0.0, 1.0);
#endif
    u_xlat4.xy = u_xlat17.xx * u_xlat1.xw;
    u_xlat4.z = 0.0;
    u_xlat1.xyw = u_xlat4.xyz + vs_TEXCOORD4.xyw;
    u_xlat1.xy = u_xlat1.xy / u_xlat1.ww;
    u_xlat1.x = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat1.x = _ZBufferParams.z * u_xlat1.x + _ZBufferParams.w;
    u_xlat1.x = float(1.0) / u_xlat1.x;
    u_xlat1.x = u_xlat1.x + (-vs_TEXCOORD4.w);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.xyw = u_xlat1.xxx * u_xlat4.xyz + vs_TEXCOORD4.xyw;
    u_xlat4.xy = u_xlat1.xy / u_xlat1.ww;
    u_xlat49 = texture(_CameraDepthTexture, u_xlat4.xy).x;
    u_xlat49 = _ZBufferParams.z * u_xlat49 + _ZBufferParams.w;
    u_xlat49 = float(1.0) / u_xlat49;
    u_xlat49 = u_xlat49 + (-vs_TEXCOORD4.w);
    u_xlat4.x = 0.100000001 / _OpacityByDepth;
    u_xlat16_3.xz = u_xlat16_2.xy;
    u_xlat16_3.y = 1.0;
    u_xlat16_20.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
    u_xlat16_20.x = inversesqrt(u_xlat16_20.x);
    u_xlat16_20.xyz = u_xlat16_3.xyz * u_xlat16_20.xxx;
#ifdef UNITY_ADRENO_ES3
    u_xlatb5 = !!(0.0>=_ES_MoonDirection.y);
#else
    u_xlatb5 = 0.0>=_ES_MoonDirection.y;
#endif
    u_xlat5.xyz = (bool(u_xlatb5)) ? _ES_SunDirection.xyz : _ES_MoonDirection.xyz;
    u_xlat6.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat53 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat54 = inversesqrt(u_xlat53);
    u_xlat7.xyz = vec3(u_xlat54) * u_xlat6.xyz;
    u_xlat5.xyz = u_xlat6.xyz * vec3(u_xlat54) + u_xlat5.xyz;
    u_xlat6.x = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat5.xyz = u_xlat5.xyz * u_xlat6.xxx;
    u_xlat20.x = dot(u_xlat16_20.xyz, u_xlat5.xyz);
    u_xlat36.x = _Gloss * 128.0;
    u_xlat20.x = max(u_xlat20.x, 9.99999975e-05);
    u_xlat20.x = log2(u_xlat20.x);
    u_xlat20.x = u_xlat20.x * u_xlat36.x;
    u_xlat20.x = exp2(u_xlat20.x);
    u_xlat20.x = u_xlat20.x * _SpecularIntensity;
    u_xlat20.x = max(u_xlat20.x, 0.0);
    u_xlat20.x = min(u_xlat20.x, 16.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb36 = !!(_ES_MoonDirection.y>=9.99999975e-05);
#else
    u_xlatb36 = _ES_MoonDirection.y>=9.99999975e-05;
#endif
    u_xlat36.x = u_xlatb36 ? 1.0 : float(0.0);
    u_xlat52 = _ES_MoonDirection.y + -1.0;
    u_xlat36.x = u_xlat36.x * u_xlat52 + 1.0;
    u_xlat4.w = float(1.0) / _ShoreTransparency;
    u_xlat5.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat5.x = inversesqrt(u_xlat5.x);
    u_xlat5.xyz = u_xlat5.xxx * vs_TEXCOORD6.xyz;
    u_xlat5.x = dot(u_xlat7.xyz, u_xlat5.xyz);
    u_xlat5.x = (-u_xlat5.x) + 1.0;
    u_xlat5.x = max(u_xlat5.x, 9.99999975e-05);
    u_xlat5.x = log2(u_xlat5.x);
    u_xlat21 = u_xlat5.x * _SpecularPower;
    u_xlat21 = exp2(u_xlat21);
    u_xlat6.xyz = u_xlat36.xxx * _LightColor0.xyz;
    u_xlat6.xyz = u_xlat20.xxx * u_xlat6.xyz;
    u_xlat20.x = u_xlat49 + -1.0;
    u_xlat20.x = u_xlat4.w * u_xlat20.x;
    u_xlat20.x = u_xlat20.x * 0.100000001;
#ifdef UNITY_ADRENO_ES3
    u_xlat20.x = min(max(u_xlat20.x, 0.0), 1.0);
#else
    u_xlat20.x = clamp(u_xlat20.x, 0.0, 1.0);
#endif
    u_xlat6.xyz = u_xlat20.xxx * u_xlat6.xyz;
    u_xlat4.xy = vec2(u_xlat49) * u_xlat4.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.xy = min(max(u_xlat4.xy, 0.0), 1.0);
#else
    u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);
#endif
    u_xlat20.x = max(u_xlat4.y, 9.99999975e-05);
    u_xlat20.x = log2(u_xlat20.x);
    u_xlat20.x = u_xlat20.x * _ShoreFade;
    u_xlat20.x = exp2(u_xlat20.x);
    u_xlat8.xyz = _ShallowColor.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat8.xyz = u_xlat20.xxx * u_xlat8.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat1.xy = u_xlat1.xy / vs_TEXCOORD4.ww;
    u_xlat10_9.xyz = texture(_SceneScaledBufferBeforTransParent, u_xlat1.xy).xyz;
    u_xlat10.xyz = u_xlat8.xyz * u_xlat10_9.xyz;
    u_xlat1.x = 0.100000001 / _DeepColorDepth;
    u_xlat1.x = u_xlat1.x * u_xlat49;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.x = max(u_xlat1.x, 9.99999975e-05);
    u_xlat1.x = log2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _DeepColorFade;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat11.xyz = (-u_xlat8.xyz) * u_xlat10_9.xyz + _DeepColor.xyz;
    u_xlat11.xyz = u_xlat1.xxx * u_xlat11.xyz + u_xlat10.xyz;
    u_xlat12.xyz = u_xlat16_2.xyz * _DistortionIntensity.xyz;
    u_xlat13.x = vs_TEXCOORD8.x;
    u_xlat13.y = vs_TEXCOORD9.x;
    u_xlat13.z = vs_TEXCOORD6.x;
    u_xlat13.x = dot(u_xlat13.xyz, u_xlat12.xyz);
    u_xlat14.x = vs_TEXCOORD8.y;
    u_xlat14.y = vs_TEXCOORD9.y;
    u_xlat14.z = vs_TEXCOORD6.y;
    u_xlat13.y = dot(u_xlat14.xyz, u_xlat12.xyz);
    u_xlat14.x = vs_TEXCOORD8.z;
    u_xlat14.y = vs_TEXCOORD9.z;
    u_xlat14.z = vs_TEXCOORD6.z;
    u_xlat13.z = dot(u_xlat14.xyz, u_xlat12.xyz);
    u_xlat1.x = dot(u_xlat13.xyz, u_xlat13.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat12.xyz = u_xlat1.xxx * u_xlat13.xyz;
    u_xlat1.x = dot((-u_xlat7.xyz), u_xlat12.xyz);
    u_xlat1.x = u_xlat1.x + u_xlat1.x;
    u_xlat7.xyz = u_xlat12.xyz * (-u_xlat1.xxx) + (-u_xlat7.xyz);
    u_xlat10_0 = textureLod(_ReflectionSkyCubeMap, u_xlat7.xyz, 0.0);
    u_xlat16_2.x = u_xlat10_0.w + -1.0;
    u_xlat16_2.x = _ReflectionSkyCubeMap_HDR.w * u_xlat16_2.x + 1.0;
    u_xlat16_2.x = log2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * _ReflectionSkyCubeMap_HDR.y;
    u_xlat16_2.x = exp2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * _ReflectionSkyCubeMap_HDR.x;
    u_xlat1.x = u_xlat5.x * _FresnelPower;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _ReflectionIntensity;
    u_xlat17.x = float(1.0) / _ShoreReflectionFade;
    u_xlat17.x = u_xlat17.x * u_xlat49;
#ifdef UNITY_ADRENO_ES3
    u_xlat17.x = min(max(u_xlat17.x, 0.0), 1.0);
#else
    u_xlat17.x = clamp(u_xlat17.x, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat17.x * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat7.xyz = u_xlat16_2.xxx * u_xlat10_0.xyz + (-u_xlat11.xyz);
    u_xlat1.xyw = u_xlat1.xxx * u_xlat7.xyz + u_xlat11.xyz;
    u_xlat1.xyw = (-u_xlat8.xyz) * u_xlat10_9.xyz + u_xlat1.xyw;
    u_xlat1.xyw = u_xlat20.xxx * u_xlat1.xyw + u_xlat10.xyz;
    u_xlat20.x = (-vs_TEXCOORD5.y) * _WorldSpaceLightPos0.w + _WorldSpaceLightPos0.y;
    u_xlat16_2.x = max(u_xlat20.x, 0.0);
    u_xlat20.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowSplitSpheres[0].xyz);
    u_xlat7.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowSplitSpheres[1].xyz);
    u_xlat8.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowSplitSpheres[2].xyz);
    u_xlat9.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowSplitSpheres[3].xyz);
    u_xlat0.x = dot(u_xlat20.xyz, u_xlat20.xyz);
    u_xlat0.y = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat0.z = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat0.w = dot(u_xlat9.xyz, u_xlat9.xyz);
    u_xlatb0 = lessThan(u_xlat0, unity_ShadowSplitSqRadii);
    u_xlat0 = mix(vec4(0.0, 0.0, 0.0, 0.0), vec4(1.0, 1.0, 1.0, 1.0), vec4(u_xlatb0));
    u_xlat16_18.x = u_xlat0.y + u_xlat0.x;
    u_xlat16_18.y = u_xlat0.z + u_xlat16_18.x;
    u_xlat3.x = -0.0;
    u_xlat3.y = (-u_xlat0.x);
    u_xlat3.zw = (-u_xlat16_18.xy);
    u_xlat0 = u_xlat0 + u_xlat3;
    u_xlat0 = max(u_xlat0, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat16_18.x = dot(u_xlat0, vec4(1.0, 1.0, 1.0, 1.0));
#ifdef UNITY_ADRENO_ES3
    u_xlatb20 = !!(u_xlat16_18.x>=0.5);
#else
    u_xlatb20 = u_xlat16_18.x>=0.5;
#endif
    if(u_xlatb20){
        u_xlat20.x = dot(u_xlat0.yzw, vec3(1.0, 2.0, 3.0));
        u_xlat20.x = min(u_xlat20.x, 3.0);
        u_xlatu20 = uint(u_xlat20.x);
        u_xlat7.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowPos[int(u_xlatu20)].xyz);
        u_xlati20 = int(u_xlatu20) << 2;
        u_xlat8.xyz = u_xlat7.yyy * hlslcc_mtx4x4unity_WorldToShadow[(u_xlati20 + 1)].xyz;
        u_xlat7.xyw = hlslcc_mtx4x4unity_WorldToShadow[u_xlati20].xyz * u_xlat7.xxx + u_xlat8.xyz;
        u_xlat7.xyz = hlslcc_mtx4x4unity_WorldToShadow[(u_xlati20 + 2)].xyz * u_xlat7.zzz + u_xlat7.xyw;
        u_xlat20.xyz = u_xlat7.xyz + hlslcc_mtx4x4unity_WorldToShadow[(u_xlati20 + 3)].xyz;
        vec3 txVec0 = vec3(u_xlat20.xy,u_xlat20.z);
        u_xlat10_20 = textureLod(hlslcc_zcmp_CascadeShadowMapTexture, txVec0, 0.0);
        u_xlat16_36 = (-_LightShadowData.x) + 1.0;
        u_xlat20.x = u_xlat10_20 * u_xlat16_36 + _LightShadowData.x;
    } else {
        u_xlat20.x = 1.0;
    //ENDIF
    }
    u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;
    u_xlat20.xyz = u_xlat16_2.xyz * u_xlat20.xxx + vs_TEXCOORD1.xyz;
    u_xlat16_2.xyz = u_xlat20.xyz * vec3(0.300000012, 0.300000012, 0.300000012) + vec3(0.699999988, 0.699999988, 0.699999988);
    u_xlat20.x = sqrt(u_xlat53);
    u_xlat16_50 = u_xlat20.x + (-_DepthFoamCloseFadeOffset);
    u_xlat16_50 = u_xlat16_50 / _DepthFoamCloseFadeDistance;
    u_xlat16_15 = vs_COLOR0.x * _DepthFoamExtent;
    u_xlat33 = max(u_xlat33, 0.0);
    u_xlat33 = min(u_xlat16_15, u_xlat33);
    u_xlat16_15 = _DepthFoamExtent * vs_COLOR0.x + 9.99999975e-05;
    u_xlat33 = u_xlat33 / u_xlat16_15;
    u_xlat33 = (-u_xlat33) + 1.0;
    u_xlat36.xy = vec2(_Time.y * _DepthFoamMask_ST.z, _Time.y * _DepthFoamMask_ST.w);
    u_xlat36.xy = fract(u_xlat36.xy);
    u_xlat36.xy = _DepthFoamMask_ST.xy * vs_TEXCOORD5.xz + u_xlat36.xy;
    u_xlat10_36 = texture(_DepthFoamMask, u_xlat36.xy, -1.0).x;
    u_xlat52 = vs_TEXCOORD5.z + vs_TEXCOORD5.x;
    u_xlat52 = u_xlat52 * _DepthFoamPhaseScale;
    u_xlat52 = _DepthFoamSpeed * _Time.y + u_xlat52;
    u_xlat5.x = (-u_xlat33) + 1.0;
    u_xlat16_15 = _DepthFoamSubdivision * u_xlat33 + u_xlat52;
    u_xlat16_15 = sin(u_xlat16_15);
    u_xlat16_15 = _DepthFoamWidth * u_xlat33 + u_xlat16_15;
    u_xlat16_52 = u_xlat10_36 * 2.0 + -1.0;
    u_xlat52 = u_xlat16_52 + u_xlat16_15;
#ifdef UNITY_ADRENO_ES3
    u_xlatb52 = !!(u_xlat52>=u_xlat5.x);
#else
    u_xlatb52 = u_xlat52>=u_xlat5.x;
#endif
    u_xlat52 = u_xlatb52 ? 1.0 : float(0.0);
    u_xlat36.x = u_xlat52 * u_xlat10_36;
    u_xlat16_15 = _DepthFoamDistance + 9.99999975e-05;
    u_xlat16_15 = u_xlat20.x / u_xlat16_15;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_15 = min(max(u_xlat16_15, 0.0), 1.0);
#else
    u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);
#endif
    u_xlat16_20.x = (-u_xlat16_15) + 1.0;
    u_xlat16_15 = vs_COLOR0.y * _DepthFoamColor.w;
    u_xlat16_50 = u_xlat16_50 * u_xlat16_15;
    u_xlat16_50 = u_xlat36.x * u_xlat16_50;
    u_xlat16_50 = u_xlat33 * u_xlat16_50;
    u_xlat16_50 = u_xlat16_20.x * u_xlat16_50;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_50 = min(max(u_xlat16_50, 0.0), 1.0);
#else
    u_xlat16_50 = clamp(u_xlat16_50, 0.0, 1.0);
#endif
    u_xlat16_2.xyz = _DepthFoamColor.xyz * u_xlat16_2.xyz + (-u_xlat1.xyw);
    u_xlat16_2.xyz = vec3(u_xlat16_50) * u_xlat16_2.xyz + u_xlat1.xyw;
    u_xlat1.xyz = u_xlat6.xyz * vec3(u_xlat21) + u_xlat16_2.xyz;
    u_xlat0.w = u_xlat4.x * vs_COLOR0.w;
    u_xlat4.xyz = vs_TEXCOORD5.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat5.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat5.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat5.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat49 = dot(u_xlat4.xyz, u_xlat5.xyz);
    u_xlat4.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat4.x = sqrt(u_xlat4.x);
    u_xlat20.y = u_xlat4.x * _HeigtFogParams.y;
    u_xlat52 = u_xlat4.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat52 = min(max(u_xlat52, 0.0), 1.0);
#else
    u_xlat52 = clamp(u_xlat52, 0.0, 1.0);
#endif
    u_xlat5.x = (-u_xlat52) + 2.0;
    u_xlat52 = u_xlat52 * u_xlat5.x;
    u_xlat5.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb49 = !!((-u_xlat49)>=u_xlat5.x);
#else
    u_xlatb49 = (-u_xlat49)>=u_xlat5.x;
#endif
    u_xlat5.x = u_xlat52 * _HeigtFogColDelta.w;
    u_xlat49 = (u_xlatb49) ? u_xlat5.x : u_xlat52;
    u_xlat49 = log2(u_xlat49);
    u_xlat49 = u_xlat49 * unity_FogColor.w;
    u_xlat49 = exp2(u_xlat49);
    u_xlat49 = min(u_xlat49, _HeigtFogColBase.w);
    u_xlat52 = vs_TEXCOORD5.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat52 = min(max(u_xlat52, 0.0), 1.0);
#else
    u_xlat52 = clamp(u_xlat52, 0.0, 1.0);
#endif
    u_xlat16_2.x = (-u_xlat52) + 2.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat52;
    u_xlat5.xyz = u_xlat16_2.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat52 = u_xlat4.x + (-_HeigtFogRamp.w);
    u_xlat52 = u_xlat52 * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat52 = min(max(u_xlat52, 0.0), 1.0);
#else
    u_xlat52 = clamp(u_xlat52, 0.0, 1.0);
#endif
    u_xlat6.xyz = (-u_xlat5.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat5.xyz = vec3(u_xlat52) * u_xlat6.xyz + u_xlat5.xyz;
    u_xlat52 = u_xlat4.y * _HeigtFogParams.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb53 = !!(0.00999999978<abs(u_xlat52));
#else
    u_xlatb53 = 0.00999999978<abs(u_xlat52);
#endif
    u_xlat6.x = u_xlat52 * -1.44269502;
    u_xlat6.x = exp2(u_xlat6.x);
    u_xlat6.x = (-u_xlat6.x) + 1.0;
    u_xlat52 = u_xlat6.x / u_xlat52;
    u_xlat16_2.x = (u_xlatb53) ? u_xlat52 : 1.0;
    u_xlat20.x = u_xlat4.y * _HeigtFogParams2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb52 = !!(0.00999999978<abs(u_xlat20.x));
#else
    u_xlatb52 = 0.00999999978<abs(u_xlat20.x);
#endif
    u_xlat53 = u_xlat20.x * -1.44269502;
    u_xlat53 = exp2(u_xlat53);
    u_xlat53 = (-u_xlat53) + 1.0;
    u_xlat20.x = u_xlat53 / u_xlat20.x;
    u_xlat16_2.y = (u_xlatb52) ? u_xlat20.x : 1.0;
    u_xlat20.x = u_xlat4.x * _HeigtFogParams2.y;
    u_xlat16_2.xy = u_xlat16_2.xy * u_xlat20.yx;
    u_xlat16_2.x = exp2((-u_xlat16_2.x));
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_18.x = exp2((-u_xlat16_2.y));
    u_xlat16_2.y = (-u_xlat16_18.x) + 1.0;
    u_xlat16_2.xy = max(u_xlat16_2.xy, vec2(0.0, 0.0));
    u_xlat16_2.x = u_xlat16_2.y + u_xlat16_2.x;
    u_xlat4.x = u_xlat4.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat16_18.x = (-u_xlat4.x) + 2.0;
    u_xlat16_18.x = u_xlat16_18.x * u_xlat4.x;
    u_xlat4.x = u_xlat16_18.x * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat4.x = u_xlat4.x + 1.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat4.x;
    u_xlat4.x = min(u_xlat16_2.x, _HeigtFogColBase.w);
    u_xlat20.x = vs_TEXCOORD5.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat20.x = min(max(u_xlat20.x, 0.0), 1.0);
#else
    u_xlat20.x = clamp(u_xlat20.x, 0.0, 1.0);
#endif
    u_xlat20.xyz = u_xlat20.xxx * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    u_xlat5.xyz = vec3(u_xlat49) * u_xlat5.xyz;
    u_xlat53 = (-u_xlat4.x) + 1.0;
    u_xlat5.xyz = vec3(u_xlat53) * u_xlat5.xyz;
    u_xlat4.xyz = u_xlat20.xyz * u_xlat4.xxx + u_xlat5.xyz;
    u_xlat49 = (-u_xlat49) + 1.0;
    u_xlat49 = u_xlat53 * u_xlat49;
    u_xlat0.xyz = vec3(u_xlat49) * u_xlat1.xyz + u_xlat4.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" "MSAA_INTERPOLATION" "MHY_SHADER_LOW" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	mediump float _MHYZBias;
uniform 	vec4 hlslcc_mtx4x4_mhyJitteredVP[4];
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
out highp vec4 vs_TEXCOORD9;
out highp vec4 vs_TEXCOORD10;
float u_xlat0;
int u_xlati0;
vec4 u_xlat1;
bool u_xlatb1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
bool u_xlatb4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
mediump vec4 u_xlat16_6;
vec4 u_xlat7;
mediump vec3 u_xlat16_8;
vec3 u_xlat9;
float u_xlat10;
float u_xlat13;
bool u_xlatb13;
mediump float u_xlat16_14;
float u_xlat22;
float u_xlat28;
float u_xlat31;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat9.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4_mhyJitteredVP[1];
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[3] * u_xlat2.wwww + u_xlat1;
    u_xlat3.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    u_xlat3.xyw = u_xlat1.xyw;
    gl_Position = u_xlat3;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.xyw = u_xlat9.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat4.x = u_xlat1.y * _HeigtFogParams.x;
    u_xlat13 = u_xlat4.x * -1.44269502;
    u_xlat13 = exp2(u_xlat13);
    u_xlat13 = (-u_xlat13) + 1.0;
    u_xlat13 = u_xlat13 / u_xlat4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(0.00999999978<abs(u_xlat4.x));
#else
    u_xlatb4 = 0.00999999978<abs(u_xlat4.x);
#endif
    u_xlat16_5.x = (u_xlatb4) ? u_xlat13 : 1.0;
    u_xlat4.x = dot(u_xlat1.xyw, u_xlat1.xyw);
    u_xlat4.x = sqrt(u_xlat4.x);
    u_xlat13 = u_xlat4.x * _HeigtFogParams.y;
    u_xlat16_5.x = u_xlat13 * u_xlat16_5.x;
    u_xlat16_5.x = exp2((-u_xlat16_5.x));
    u_xlat16_5.x = (-u_xlat16_5.x) + 1.0;
    u_xlat13 = u_xlat1.y * _HeigtFogParams2.x;
    u_xlat22 = u_xlat13 * -1.44269502;
    u_xlat22 = exp2(u_xlat22);
    u_xlat22 = (-u_xlat22) + 1.0;
    u_xlat22 = u_xlat22 / u_xlat13;
#ifdef UNITY_ADRENO_ES3
    u_xlatb13 = !!(0.00999999978<abs(u_xlat13));
#else
    u_xlatb13 = 0.00999999978<abs(u_xlat13);
#endif
    u_xlat16_14 = (u_xlatb13) ? u_xlat22 : 1.0;
    u_xlat13 = u_xlat4.x * _HeigtFogParams2.y;
    u_xlat16_14 = u_xlat13 * u_xlat16_14;
    u_xlat16_14 = exp2((-u_xlat16_14));
    u_xlat16_5.y = (-u_xlat16_14) + 1.0;
    u_xlat16_5.xy = max(u_xlat16_5.xy, vec2(0.0, 0.0));
    u_xlat16_5.x = u_xlat16_5.y + u_xlat16_5.x;
    u_xlat13 = u_xlat4.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat13 = min(max(u_xlat13, 0.0), 1.0);
#else
    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
#endif
    u_xlat16_14 = (-u_xlat13) + 2.0;
    u_xlat16_14 = u_xlat13 * u_xlat16_14;
    u_xlat13 = u_xlat16_14 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat13 = u_xlat13 + 1.0;
    u_xlat16_5.x = u_xlat13 * u_xlat16_5.x;
    u_xlat13 = min(u_xlat16_5.x, _HeigtFogColBase.w);
    u_xlat22 = (-u_xlat13) + 1.0;
    u_xlat31 = _ProjectionParams.z * 0.999899983;
    u_xlat6.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat6.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat6.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat1.x = dot(u_xlat1.xyw, u_xlat6.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!((-u_xlat1.x)>=u_xlat31);
#else
    u_xlatb1 = (-u_xlat1.x)>=u_xlat31;
#endif
    u_xlat10 = u_xlat4.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat10 = min(max(u_xlat10, 0.0), 1.0);
#else
    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
#endif
    u_xlat28 = u_xlat4.x + (-_HeigtFogRamp.w);
    u_xlat28 = u_xlat28 * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat28 = min(max(u_xlat28, 0.0), 1.0);
#else
    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
#endif
    u_xlat4.x = (-u_xlat10) + 2.0;
    u_xlat10 = u_xlat10 * u_xlat4.x;
    u_xlat4.x = u_xlat10 * _HeigtFogColDelta.w;
    u_xlat1.x = (u_xlatb1) ? u_xlat4.x : u_xlat10;
    u_xlat1.x = log2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * unity_FogColor.w;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat1.x = min(u_xlat1.x, _HeigtFogColBase.w);
    u_xlat10 = u_xlat9.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat10 = min(max(u_xlat10, 0.0), 1.0);
#else
    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
#endif
    u_xlat16_5.x = (-u_xlat10) + 2.0;
    u_xlat16_5.x = u_xlat10 * u_xlat16_5.x;
    u_xlat6.xyz = u_xlat16_5.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat7.xyz = (-u_xlat6.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat6.xyz = vec3(u_xlat28) * u_xlat7.xyz + u_xlat6.xyz;
    u_xlat6.xyz = u_xlat1.xxx * u_xlat6.xyz;
    u_xlat1.x = (-u_xlat1.x) + 1.0;
    vs_TEXCOORD0.w = u_xlat22 * u_xlat1.x;
    u_xlat1.xyw = vec3(u_xlat22) * u_xlat6.xyz;
    u_xlat4.x = u_xlat9.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat4.xzw = u_xlat4.xxx * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    vs_TEXCOORD0.xyz = u_xlat4.xzw * vec3(u_xlat13) + u_xlat1.xyw;
    vs_TEXCOORD1.w = 1.0;
    u_xlat4.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat4.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat4.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat1.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
    u_xlat16_5.x = u_xlat4.y * u_xlat4.y;
    u_xlat16_5.x = u_xlat4.x * u_xlat4.x + (-u_xlat16_5.x);
    u_xlat16_6 = u_xlat4.yzzx * u_xlat4.xyzz;
    u_xlat16_8.x = dot(unity_SHBr, u_xlat16_6);
    u_xlat16_8.y = dot(unity_SHBg, u_xlat16_6);
    u_xlat16_8.z = dot(unity_SHBb, u_xlat16_6);
    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_8.xyz;
    u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat4.w = 1.0;
    u_xlat16_8.x = dot(unity_SHAr, u_xlat4);
    u_xlat16_8.y = dot(unity_SHAg, u_xlat4);
    u_xlat16_8.z = dot(unity_SHAb, u_xlat4);
    u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_8.xyz;
    vs_TEXCOORD1.xyz = u_xlat16_5.xyz;
    u_xlat1.x = u_xlat3.y * _ProjectionParams.x;
    u_xlat7.w = u_xlat1.x * 0.5;
    u_xlat7.xz = u_xlat3.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.z = u_xlat1.z;
    u_xlat3.xy = u_xlat7.zz + u_xlat7.xw;
    vs_TEXCOORD2 = u_xlat3;
    vs_TEXCOORD4.xyw = u_xlat3.xyw;
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD3.w = 0.0;
    u_xlat1.x = u_xlat2.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat2.x + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat2.z + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat2.w + u_xlat1.x;
    vs_TEXCOORD3.z = (-u_xlat1.x);
    vs_TEXCOORD5.w = 0.0;
    vs_TEXCOORD5.xyz = u_xlat9.xyz;
    u_xlat9.xyz = (-u_xlat9.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD6.w = 0.0;
    vs_TEXCOORD6.xyz = u_xlat4.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].www + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * in_POSITION0.yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.zzz + u_xlat1.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.www + u_xlat1.xyz;
    vs_TEXCOORD7.xyz = u_xlat1.xyz * vec3(-1.0, -1.0, 1.0);
    vs_TEXCOORD7.w = 0.0;
    u_xlat1.xyz = in_TANGENT0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat0 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0 = inversesqrt(u_xlat0);
    u_xlat1.xyz = vec3(u_xlat0) * u_xlat1.xyz;
    vs_TEXCOORD8.xyz = u_xlat1.xyz;
    vs_TEXCOORD8.w = 0.0;
    u_xlat2.xyz = u_xlat1.yzx * u_xlat4.zxy;
    u_xlat1.xyz = u_xlat4.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
    u_xlat0 = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD9.xyz = vec3(u_xlat0) * u_xlat1.xyz;
    vs_TEXCOORD9.w = 0.0;
    u_xlat0 = u_xlat9.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat9.x + u_xlat0;
    vs_TEXCOORD10.w = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat9.z + u_xlat0;
    vs_TEXCOORD10.xyz = u_xlat9.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowPos[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	mediump vec4 _DepthFoamMask_ST;
uniform 	mediump float _DepthFoamSpeed;
uniform 	mediump vec4 _DepthFoamColor;
uniform 	mediump float _DepthFoamExtent;
uniform 	mediump float _DepthFoamDistance;
uniform 	mediump float _DepthFoamSubdivision;
uniform 	mediump float _DepthFoamWidth;
uniform 	mediump float _DepthFoamPhaseScale;
uniform 	mediump float _DepthFoamCloseFadeOffset;
uniform 	mediump float _DepthFoamCloseFadeDistance;
uniform 	float _NormalMapScale;
uniform 	float _Normal01_U_Speed;
uniform 	float _Normal01_VSpeed;
uniform 	float _NormalMapBias;
uniform 	float _Normal02_U_Speed;
uniform 	float _Normal02_V_Speed;
uniform 	float _RefractionIntensity;
uniform 	float _OpacityByDepth;
uniform 	float _SpecularIntensity;
uniform 	vec3 _ES_MoonDirection;
uniform 	vec3 _ES_SunDirection;
uniform 	float _Gloss;
uniform 	float _ShoreTransparency;
uniform 	float _SpecularPower;
uniform 	vec4 _ShallowColor;
uniform 	float _ShoreFade;
uniform 	vec4 _DeepColor;
uniform 	float _DeepColorDepth;
uniform 	float _DeepColorFade;
uniform 	vec4 _DistortionIntensity;
uniform 	float _ReflectionIntensity;
uniform 	float _FresnelPower;
uniform 	float _ShoreReflectionFade;
uniform 	mediump float _ProjectUVScale;
uniform 	vec4 _ReflectionSkyCubeMap_HDR;
uniform lowp sampler2D _Normal01;
uniform lowp sampler2D _Normal02;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _SceneScaledBufferBeforTransParent;
uniform lowp samplerCube _ReflectionSkyCubeMap;
uniform lowp sampler2D _DepthFoamMask;
uniform lowp sampler2DShadow hlslcc_zcmp_CascadeShadowMapTexture;
uniform lowp sampler2D _CascadeShadowMapTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD8;
in highp vec4 vs_TEXCOORD9;
in highp vec4 vs_TEXCOORD10;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec4 u_xlatb0;
vec4 u_xlat1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec4 u_xlat4;
vec3 u_xlat5;
bool u_xlatb5;
vec3 u_xlat6;
vec4 u_xlat7;
vec3 u_xlat8;
vec3 u_xlat9;
lowp vec3 u_xlat10_9;
vec3 u_xlat10;
vec3 u_xlat11;
vec3 u_xlat12;
vec3 u_xlat13;
vec3 u_xlat14;
mediump float u_xlat16_15;
vec2 u_xlat17;
mediump vec2 u_xlat16_18;
vec3 u_xlat20;
mediump vec3 u_xlat16_20;
lowp float u_xlat10_20;
int u_xlati20;
uint u_xlatu20;
bool u_xlatb20;
float u_xlat21;
float u_xlat33;
vec2 u_xlat36;
mediump float u_xlat16_36;
lowp float u_xlat10_36;
bool u_xlatb36;
float u_xlat49;
bool u_xlatb49;
mediump float u_xlat16_50;
float u_xlat52;
mediump float u_xlat16_52;
bool u_xlatb52;
float u_xlat53;
bool u_xlatb53;
float u_xlat54;
void main()
{
    u_xlat0.xy = vs_TEXCOORD5.zx * vec2(vec2(_ProjectUVScale, _ProjectUVScale));
    u_xlat1.x = _Time.y * _Normal01_U_Speed + u_xlat0.y;
    u_xlat1.yz = _Time.yy * vec2(_Normal01_VSpeed, _Normal02_U_Speed) + u_xlat0.xy;
    u_xlat1.w = _Time.y * _Normal02_V_Speed + u_xlat0.x;
    u_xlat10_0.xyz = texture(_Normal01, u_xlat1.xy, _NormalMapBias).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_2.xy = u_xlat16_0.xy * vec2(_NormalMapScale);
    u_xlat10_1.xyz = texture(_Normal02, u_xlat1.zw, _NormalMapBias).xyz;
    u_xlat16_0.w = -1.0;
    u_xlat16_3.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.wwz;
    u_xlat16_3.xy = u_xlat16_3.xy * vec2(_NormalMapScale);
    u_xlat16_2.z = -1.0;
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
    u_xlat1.x = float(1.0) / vs_TEXCOORD4.w;
    u_xlat17.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat17.x = texture(_CameraDepthTexture, u_xlat17.xy).x;
    u_xlat17.x = _ZBufferParams.z * u_xlat17.x + _ZBufferParams.w;
    u_xlat17.x = float(1.0) / u_xlat17.x;
    u_xlat33 = vs_TEXCOORD10.w + 9.99999975e-05;
    u_xlat33 = (-u_xlat17.x) / u_xlat33;
    u_xlat33 = vs_TEXCOORD10.y * u_xlat33 + _WorldSpaceCameraPos.y;
    u_xlat33 = (-u_xlat33) + vs_TEXCOORD5.y;
    u_xlat4.xy = u_xlat16_2.xy * vec2(vec2(_RefractionIntensity, _RefractionIntensity));
    u_xlat1.x = u_xlat1.x * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.xw = u_xlat1.xx * u_xlat4.xy;
    u_xlat1.xw = u_xlat1.xw * vs_TEXCOORD4.ww;
    u_xlat17.x = u_xlat17.x + (-vs_TEXCOORD4.w);
#ifdef UNITY_ADRENO_ES3
    u_xlat17.x = min(max(u_xlat17.x, 0.0), 1.0);
#else
    u_xlat17.x = clamp(u_xlat17.x, 0.0, 1.0);
#endif
    u_xlat4.xy = u_xlat17.xx * u_xlat1.xw;
    u_xlat4.z = 0.0;
    u_xlat1.xyw = u_xlat4.xyz + vs_TEXCOORD4.xyw;
    u_xlat1.xy = u_xlat1.xy / u_xlat1.ww;
    u_xlat1.x = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat1.x = _ZBufferParams.z * u_xlat1.x + _ZBufferParams.w;
    u_xlat1.x = float(1.0) / u_xlat1.x;
    u_xlat1.x = u_xlat1.x + (-vs_TEXCOORD4.w);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.xyw = u_xlat1.xxx * u_xlat4.xyz + vs_TEXCOORD4.xyw;
    u_xlat4.xy = u_xlat1.xy / u_xlat1.ww;
    u_xlat49 = texture(_CameraDepthTexture, u_xlat4.xy).x;
    u_xlat49 = _ZBufferParams.z * u_xlat49 + _ZBufferParams.w;
    u_xlat49 = float(1.0) / u_xlat49;
    u_xlat49 = u_xlat49 + (-vs_TEXCOORD4.w);
    u_xlat4.x = 0.100000001 / _OpacityByDepth;
    u_xlat16_3.xz = u_xlat16_2.xy;
    u_xlat16_3.y = 1.0;
    u_xlat16_20.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
    u_xlat16_20.x = inversesqrt(u_xlat16_20.x);
    u_xlat16_20.xyz = u_xlat16_3.xyz * u_xlat16_20.xxx;
#ifdef UNITY_ADRENO_ES3
    u_xlatb5 = !!(0.0>=_ES_MoonDirection.y);
#else
    u_xlatb5 = 0.0>=_ES_MoonDirection.y;
#endif
    u_xlat5.xyz = (bool(u_xlatb5)) ? _ES_SunDirection.xyz : _ES_MoonDirection.xyz;
    u_xlat6.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat53 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat54 = inversesqrt(u_xlat53);
    u_xlat7.xyz = vec3(u_xlat54) * u_xlat6.xyz;
    u_xlat5.xyz = u_xlat6.xyz * vec3(u_xlat54) + u_xlat5.xyz;
    u_xlat6.x = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat5.xyz = u_xlat5.xyz * u_xlat6.xxx;
    u_xlat20.x = dot(u_xlat16_20.xyz, u_xlat5.xyz);
    u_xlat36.x = _Gloss * 128.0;
    u_xlat20.x = max(u_xlat20.x, 9.99999975e-05);
    u_xlat20.x = log2(u_xlat20.x);
    u_xlat20.x = u_xlat20.x * u_xlat36.x;
    u_xlat20.x = exp2(u_xlat20.x);
    u_xlat20.x = u_xlat20.x * _SpecularIntensity;
    u_xlat20.x = max(u_xlat20.x, 0.0);
    u_xlat20.x = min(u_xlat20.x, 16.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb36 = !!(_ES_MoonDirection.y>=9.99999975e-05);
#else
    u_xlatb36 = _ES_MoonDirection.y>=9.99999975e-05;
#endif
    u_xlat36.x = u_xlatb36 ? 1.0 : float(0.0);
    u_xlat52 = _ES_MoonDirection.y + -1.0;
    u_xlat36.x = u_xlat36.x * u_xlat52 + 1.0;
    u_xlat4.w = float(1.0) / _ShoreTransparency;
    u_xlat5.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat5.x = inversesqrt(u_xlat5.x);
    u_xlat5.xyz = u_xlat5.xxx * vs_TEXCOORD6.xyz;
    u_xlat5.x = dot(u_xlat7.xyz, u_xlat5.xyz);
    u_xlat5.x = (-u_xlat5.x) + 1.0;
    u_xlat5.x = max(u_xlat5.x, 9.99999975e-05);
    u_xlat5.x = log2(u_xlat5.x);
    u_xlat21 = u_xlat5.x * _SpecularPower;
    u_xlat21 = exp2(u_xlat21);
    u_xlat6.xyz = u_xlat36.xxx * _LightColor0.xyz;
    u_xlat6.xyz = u_xlat20.xxx * u_xlat6.xyz;
    u_xlat20.x = u_xlat49 + -1.0;
    u_xlat20.x = u_xlat4.w * u_xlat20.x;
    u_xlat20.x = u_xlat20.x * 0.100000001;
#ifdef UNITY_ADRENO_ES3
    u_xlat20.x = min(max(u_xlat20.x, 0.0), 1.0);
#else
    u_xlat20.x = clamp(u_xlat20.x, 0.0, 1.0);
#endif
    u_xlat6.xyz = u_xlat20.xxx * u_xlat6.xyz;
    u_xlat4.xy = vec2(u_xlat49) * u_xlat4.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.xy = min(max(u_xlat4.xy, 0.0), 1.0);
#else
    u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);
#endif
    u_xlat20.x = max(u_xlat4.y, 9.99999975e-05);
    u_xlat20.x = log2(u_xlat20.x);
    u_xlat20.x = u_xlat20.x * _ShoreFade;
    u_xlat20.x = exp2(u_xlat20.x);
    u_xlat8.xyz = _ShallowColor.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat8.xyz = u_xlat20.xxx * u_xlat8.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat1.xy = u_xlat1.xy / vs_TEXCOORD4.ww;
    u_xlat10_9.xyz = texture(_SceneScaledBufferBeforTransParent, u_xlat1.xy).xyz;
    u_xlat10.xyz = u_xlat8.xyz * u_xlat10_9.xyz;
    u_xlat1.x = 0.100000001 / _DeepColorDepth;
    u_xlat1.x = u_xlat1.x * u_xlat49;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.x = max(u_xlat1.x, 9.99999975e-05);
    u_xlat1.x = log2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _DeepColorFade;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat11.xyz = (-u_xlat8.xyz) * u_xlat10_9.xyz + _DeepColor.xyz;
    u_xlat11.xyz = u_xlat1.xxx * u_xlat11.xyz + u_xlat10.xyz;
    u_xlat12.xyz = u_xlat16_2.xyz * _DistortionIntensity.xyz;
    u_xlat13.x = vs_TEXCOORD8.x;
    u_xlat13.y = vs_TEXCOORD9.x;
    u_xlat13.z = vs_TEXCOORD6.x;
    u_xlat13.x = dot(u_xlat13.xyz, u_xlat12.xyz);
    u_xlat14.x = vs_TEXCOORD8.y;
    u_xlat14.y = vs_TEXCOORD9.y;
    u_xlat14.z = vs_TEXCOORD6.y;
    u_xlat13.y = dot(u_xlat14.xyz, u_xlat12.xyz);
    u_xlat14.x = vs_TEXCOORD8.z;
    u_xlat14.y = vs_TEXCOORD9.z;
    u_xlat14.z = vs_TEXCOORD6.z;
    u_xlat13.z = dot(u_xlat14.xyz, u_xlat12.xyz);
    u_xlat1.x = dot(u_xlat13.xyz, u_xlat13.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat12.xyz = u_xlat1.xxx * u_xlat13.xyz;
    u_xlat1.x = dot((-u_xlat7.xyz), u_xlat12.xyz);
    u_xlat1.x = u_xlat1.x + u_xlat1.x;
    u_xlat7.xyz = u_xlat12.xyz * (-u_xlat1.xxx) + (-u_xlat7.xyz);
    u_xlat10_0 = textureLod(_ReflectionSkyCubeMap, u_xlat7.xyz, 0.0);
    u_xlat16_2.x = u_xlat10_0.w + -1.0;
    u_xlat16_2.x = _ReflectionSkyCubeMap_HDR.w * u_xlat16_2.x + 1.0;
    u_xlat16_2.x = log2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * _ReflectionSkyCubeMap_HDR.y;
    u_xlat16_2.x = exp2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * _ReflectionSkyCubeMap_HDR.x;
    u_xlat1.x = u_xlat5.x * _FresnelPower;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _ReflectionIntensity;
    u_xlat17.x = float(1.0) / _ShoreReflectionFade;
    u_xlat17.x = u_xlat17.x * u_xlat49;
#ifdef UNITY_ADRENO_ES3
    u_xlat17.x = min(max(u_xlat17.x, 0.0), 1.0);
#else
    u_xlat17.x = clamp(u_xlat17.x, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat17.x * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat7.xyz = u_xlat16_2.xxx * u_xlat10_0.xyz + (-u_xlat11.xyz);
    u_xlat1.xyw = u_xlat1.xxx * u_xlat7.xyz + u_xlat11.xyz;
    u_xlat1.xyw = (-u_xlat8.xyz) * u_xlat10_9.xyz + u_xlat1.xyw;
    u_xlat1.xyw = u_xlat20.xxx * u_xlat1.xyw + u_xlat10.xyz;
    u_xlat20.x = (-vs_TEXCOORD5.y) * _WorldSpaceLightPos0.w + _WorldSpaceLightPos0.y;
    u_xlat16_2.x = max(u_xlat20.x, 0.0);
    u_xlat20.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowSplitSpheres[0].xyz);
    u_xlat7.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowSplitSpheres[1].xyz);
    u_xlat8.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowSplitSpheres[2].xyz);
    u_xlat9.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowSplitSpheres[3].xyz);
    u_xlat0.x = dot(u_xlat20.xyz, u_xlat20.xyz);
    u_xlat0.y = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat0.z = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat0.w = dot(u_xlat9.xyz, u_xlat9.xyz);
    u_xlatb0 = lessThan(u_xlat0, unity_ShadowSplitSqRadii);
    u_xlat0 = mix(vec4(0.0, 0.0, 0.0, 0.0), vec4(1.0, 1.0, 1.0, 1.0), vec4(u_xlatb0));
    u_xlat16_18.x = u_xlat0.y + u_xlat0.x;
    u_xlat16_18.y = u_xlat0.z + u_xlat16_18.x;
    u_xlat3.x = -0.0;
    u_xlat3.y = (-u_xlat0.x);
    u_xlat3.zw = (-u_xlat16_18.xy);
    u_xlat0 = u_xlat0 + u_xlat3;
    u_xlat0 = max(u_xlat0, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat16_18.x = dot(u_xlat0, vec4(1.0, 1.0, 1.0, 1.0));
#ifdef UNITY_ADRENO_ES3
    u_xlatb20 = !!(u_xlat16_18.x>=0.5);
#else
    u_xlatb20 = u_xlat16_18.x>=0.5;
#endif
    if(u_xlatb20){
        u_xlat20.x = dot(u_xlat0.yzw, vec3(1.0, 2.0, 3.0));
        u_xlat20.x = min(u_xlat20.x, 3.0);
        u_xlatu20 = uint(u_xlat20.x);
        u_xlat7.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowPos[int(u_xlatu20)].xyz);
        u_xlati20 = int(u_xlatu20) << 2;
        u_xlat8.xyz = u_xlat7.yyy * hlslcc_mtx4x4unity_WorldToShadow[(u_xlati20 + 1)].xyz;
        u_xlat7.xyw = hlslcc_mtx4x4unity_WorldToShadow[u_xlati20].xyz * u_xlat7.xxx + u_xlat8.xyz;
        u_xlat7.xyz = hlslcc_mtx4x4unity_WorldToShadow[(u_xlati20 + 2)].xyz * u_xlat7.zzz + u_xlat7.xyw;
        u_xlat20.xyz = u_xlat7.xyz + hlslcc_mtx4x4unity_WorldToShadow[(u_xlati20 + 3)].xyz;
        vec3 txVec0 = vec3(u_xlat20.xy,u_xlat20.z);
        u_xlat10_20 = textureLod(hlslcc_zcmp_CascadeShadowMapTexture, txVec0, 0.0);
        u_xlat16_36 = (-_LightShadowData.x) + 1.0;
        u_xlat20.x = u_xlat10_20 * u_xlat16_36 + _LightShadowData.x;
    } else {
        u_xlat20.x = 1.0;
    //ENDIF
    }
    u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;
    u_xlat20.xyz = u_xlat16_2.xyz * u_xlat20.xxx + vs_TEXCOORD1.xyz;
    u_xlat16_2.xyz = u_xlat20.xyz * vec3(0.300000012, 0.300000012, 0.300000012) + vec3(0.699999988, 0.699999988, 0.699999988);
    u_xlat20.x = sqrt(u_xlat53);
    u_xlat16_50 = u_xlat20.x + (-_DepthFoamCloseFadeOffset);
    u_xlat16_50 = u_xlat16_50 / _DepthFoamCloseFadeDistance;
    u_xlat16_15 = vs_COLOR0.x * _DepthFoamExtent;
    u_xlat33 = max(u_xlat33, 0.0);
    u_xlat33 = min(u_xlat16_15, u_xlat33);
    u_xlat16_15 = _DepthFoamExtent * vs_COLOR0.x + 9.99999975e-05;
    u_xlat33 = u_xlat33 / u_xlat16_15;
    u_xlat33 = (-u_xlat33) + 1.0;
    u_xlat36.xy = vec2(_Time.y * _DepthFoamMask_ST.z, _Time.y * _DepthFoamMask_ST.w);
    u_xlat36.xy = fract(u_xlat36.xy);
    u_xlat36.xy = _DepthFoamMask_ST.xy * vs_TEXCOORD5.xz + u_xlat36.xy;
    u_xlat10_36 = texture(_DepthFoamMask, u_xlat36.xy, -1.0).x;
    u_xlat52 = vs_TEXCOORD5.z + vs_TEXCOORD5.x;
    u_xlat52 = u_xlat52 * _DepthFoamPhaseScale;
    u_xlat52 = _DepthFoamSpeed * _Time.y + u_xlat52;
    u_xlat5.x = (-u_xlat33) + 1.0;
    u_xlat16_15 = _DepthFoamSubdivision * u_xlat33 + u_xlat52;
    u_xlat16_15 = sin(u_xlat16_15);
    u_xlat16_15 = _DepthFoamWidth * u_xlat33 + u_xlat16_15;
    u_xlat16_52 = u_xlat10_36 * 2.0 + -1.0;
    u_xlat52 = u_xlat16_52 + u_xlat16_15;
#ifdef UNITY_ADRENO_ES3
    u_xlatb52 = !!(u_xlat52>=u_xlat5.x);
#else
    u_xlatb52 = u_xlat52>=u_xlat5.x;
#endif
    u_xlat52 = u_xlatb52 ? 1.0 : float(0.0);
    u_xlat36.x = u_xlat52 * u_xlat10_36;
    u_xlat16_15 = _DepthFoamDistance + 9.99999975e-05;
    u_xlat16_15 = u_xlat20.x / u_xlat16_15;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_15 = min(max(u_xlat16_15, 0.0), 1.0);
#else
    u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);
#endif
    u_xlat16_20.x = (-u_xlat16_15) + 1.0;
    u_xlat16_15 = vs_COLOR0.y * _DepthFoamColor.w;
    u_xlat16_50 = u_xlat16_50 * u_xlat16_15;
    u_xlat16_50 = u_xlat36.x * u_xlat16_50;
    u_xlat16_50 = u_xlat33 * u_xlat16_50;
    u_xlat16_50 = u_xlat16_20.x * u_xlat16_50;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_50 = min(max(u_xlat16_50, 0.0), 1.0);
#else
    u_xlat16_50 = clamp(u_xlat16_50, 0.0, 1.0);
#endif
    u_xlat16_2.xyz = _DepthFoamColor.xyz * u_xlat16_2.xyz + (-u_xlat1.xyw);
    u_xlat16_2.xyz = vec3(u_xlat16_50) * u_xlat16_2.xyz + u_xlat1.xyw;
    u_xlat1.xyz = u_xlat6.xyz * vec3(u_xlat21) + u_xlat16_2.xyz;
    u_xlat0.w = u_xlat4.x * vs_COLOR0.w;
    u_xlat4.xyz = vs_TEXCOORD5.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat5.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat5.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat5.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat49 = dot(u_xlat4.xyz, u_xlat5.xyz);
    u_xlat4.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat4.x = sqrt(u_xlat4.x);
    u_xlat20.y = u_xlat4.x * _HeigtFogParams.y;
    u_xlat52 = u_xlat4.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat52 = min(max(u_xlat52, 0.0), 1.0);
#else
    u_xlat52 = clamp(u_xlat52, 0.0, 1.0);
#endif
    u_xlat5.x = (-u_xlat52) + 2.0;
    u_xlat52 = u_xlat52 * u_xlat5.x;
    u_xlat5.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb49 = !!((-u_xlat49)>=u_xlat5.x);
#else
    u_xlatb49 = (-u_xlat49)>=u_xlat5.x;
#endif
    u_xlat5.x = u_xlat52 * _HeigtFogColDelta.w;
    u_xlat49 = (u_xlatb49) ? u_xlat5.x : u_xlat52;
    u_xlat49 = log2(u_xlat49);
    u_xlat49 = u_xlat49 * unity_FogColor.w;
    u_xlat49 = exp2(u_xlat49);
    u_xlat49 = min(u_xlat49, _HeigtFogColBase.w);
    u_xlat52 = vs_TEXCOORD5.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat52 = min(max(u_xlat52, 0.0), 1.0);
#else
    u_xlat52 = clamp(u_xlat52, 0.0, 1.0);
#endif
    u_xlat16_2.x = (-u_xlat52) + 2.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat52;
    u_xlat5.xyz = u_xlat16_2.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat52 = u_xlat4.x + (-_HeigtFogRamp.w);
    u_xlat52 = u_xlat52 * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat52 = min(max(u_xlat52, 0.0), 1.0);
#else
    u_xlat52 = clamp(u_xlat52, 0.0, 1.0);
#endif
    u_xlat6.xyz = (-u_xlat5.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat5.xyz = vec3(u_xlat52) * u_xlat6.xyz + u_xlat5.xyz;
    u_xlat52 = u_xlat4.y * _HeigtFogParams.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb53 = !!(0.00999999978<abs(u_xlat52));
#else
    u_xlatb53 = 0.00999999978<abs(u_xlat52);
#endif
    u_xlat6.x = u_xlat52 * -1.44269502;
    u_xlat6.x = exp2(u_xlat6.x);
    u_xlat6.x = (-u_xlat6.x) + 1.0;
    u_xlat52 = u_xlat6.x / u_xlat52;
    u_xlat16_2.x = (u_xlatb53) ? u_xlat52 : 1.0;
    u_xlat20.x = u_xlat4.y * _HeigtFogParams2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb52 = !!(0.00999999978<abs(u_xlat20.x));
#else
    u_xlatb52 = 0.00999999978<abs(u_xlat20.x);
#endif
    u_xlat53 = u_xlat20.x * -1.44269502;
    u_xlat53 = exp2(u_xlat53);
    u_xlat53 = (-u_xlat53) + 1.0;
    u_xlat20.x = u_xlat53 / u_xlat20.x;
    u_xlat16_2.y = (u_xlatb52) ? u_xlat20.x : 1.0;
    u_xlat20.x = u_xlat4.x * _HeigtFogParams2.y;
    u_xlat16_2.xy = u_xlat16_2.xy * u_xlat20.yx;
    u_xlat16_2.x = exp2((-u_xlat16_2.x));
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_18.x = exp2((-u_xlat16_2.y));
    u_xlat16_2.y = (-u_xlat16_18.x) + 1.0;
    u_xlat16_2.xy = max(u_xlat16_2.xy, vec2(0.0, 0.0));
    u_xlat16_2.x = u_xlat16_2.y + u_xlat16_2.x;
    u_xlat4.x = u_xlat4.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat16_18.x = (-u_xlat4.x) + 2.0;
    u_xlat16_18.x = u_xlat16_18.x * u_xlat4.x;
    u_xlat4.x = u_xlat16_18.x * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat4.x = u_xlat4.x + 1.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat4.x;
    u_xlat4.x = min(u_xlat16_2.x, _HeigtFogColBase.w);
    u_xlat20.x = vs_TEXCOORD5.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat20.x = min(max(u_xlat20.x, 0.0), 1.0);
#else
    u_xlat20.x = clamp(u_xlat20.x, 0.0, 1.0);
#endif
    u_xlat20.xyz = u_xlat20.xxx * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    u_xlat5.xyz = vec3(u_xlat49) * u_xlat5.xyz;
    u_xlat53 = (-u_xlat4.x) + 1.0;
    u_xlat5.xyz = vec3(u_xlat53) * u_xlat5.xyz;
    u_xlat4.xyz = u_xlat20.xyz * u_xlat4.xxx + u_xlat5.xyz;
    u_xlat49 = (-u_xlat49) + 1.0;
    u_xlat49 = u_xlat53 * u_xlat49;
    u_xlat0.xyz = vec3(u_xlat49) * u_xlat1.xyz + u_xlat4.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "MSAA_INTERPOLATION" "MHY_SHADER_HIGH" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	mediump float _MHYZBias;
uniform 	vec4 hlslcc_mtx4x4_mhyJitteredVP[4];
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
out highp vec4 vs_TEXCOORD9;
out highp vec4 vs_TEXCOORD10;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
vec4 u_xlat4;
bool u_xlatb4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
mediump vec4 u_xlat16_6;
vec4 u_xlat7;
mediump vec3 u_xlat16_8;
float u_xlat11;
vec3 u_xlat13;
mediump float u_xlat16_14;
float u_xlat27;
bool u_xlatb27;
float u_xlat29;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4_mhyJitteredVP[1];
    u_xlat2 = hlslcc_mtx4x4_mhyJitteredVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4_mhyJitteredVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4_mhyJitteredVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat3.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    u_xlat3.xyw = u_xlat2.xyw;
    gl_Position = u_xlat3;
    vs_COLOR0 = in_COLOR0;
    u_xlat2.xyw = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat27 = u_xlat2.y * _HeigtFogParams.x;
    u_xlat4.x = u_xlat27 * -1.44269502;
    u_xlat4.x = exp2(u_xlat4.x);
    u_xlat4.x = (-u_xlat4.x) + 1.0;
    u_xlat4.x = u_xlat4.x / u_xlat27;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(0.00999999978<abs(u_xlat27));
#else
    u_xlatb27 = 0.00999999978<abs(u_xlat27);
#endif
    u_xlat16_5.x = (u_xlatb27) ? u_xlat4.x : 1.0;
    u_xlat27 = dot(u_xlat2.xyw, u_xlat2.xyw);
    u_xlat27 = sqrt(u_xlat27);
    u_xlat4.x = u_xlat27 * _HeigtFogParams.y;
    u_xlat16_5.x = u_xlat4.x * u_xlat16_5.x;
    u_xlat16_5.x = exp2((-u_xlat16_5.x));
    u_xlat16_5.x = (-u_xlat16_5.x) + 1.0;
    u_xlat4.x = u_xlat2.y * _HeigtFogParams2.x;
    u_xlat13.x = u_xlat4.x * -1.44269502;
    u_xlat13.x = exp2(u_xlat13.x);
    u_xlat13.x = (-u_xlat13.x) + 1.0;
    u_xlat13.x = u_xlat13.x / u_xlat4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(0.00999999978<abs(u_xlat4.x));
#else
    u_xlatb4 = 0.00999999978<abs(u_xlat4.x);
#endif
    u_xlat16_14 = (u_xlatb4) ? u_xlat13.x : 1.0;
    u_xlat4.x = u_xlat27 * _HeigtFogParams2.y;
    u_xlat16_14 = u_xlat4.x * u_xlat16_14;
    u_xlat16_14 = exp2((-u_xlat16_14));
    u_xlat16_5.y = (-u_xlat16_14) + 1.0;
    u_xlat16_5.xy = max(u_xlat16_5.xy, vec2(0.0, 0.0));
    u_xlat16_5.x = u_xlat16_5.y + u_xlat16_5.x;
    u_xlat4.x = u_xlat27 * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat16_14 = (-u_xlat4.x) + 2.0;
    u_xlat16_14 = u_xlat4.x * u_xlat16_14;
    u_xlat4.x = u_xlat16_14 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat4.x = u_xlat4.x + 1.0;
    u_xlat16_5.x = u_xlat4.x * u_xlat16_5.x;
    u_xlat4.x = min(u_xlat16_5.x, _HeigtFogColBase.w);
    u_xlat13.x = (-u_xlat4.x) + 1.0;
    u_xlat6.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat6.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat6.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat2.x = dot(u_xlat2.xyw, u_xlat6.xyz);
    u_xlat11 = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!((-u_xlat2.x)>=u_xlat11);
#else
    u_xlatb2 = (-u_xlat2.x)>=u_xlat11;
#endif
    u_xlat11 = u_xlat27 * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat11 = min(max(u_xlat11, 0.0), 1.0);
#else
    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
#endif
    u_xlat27 = u_xlat27 + (-_HeigtFogRamp.w);
    u_xlat27 = u_xlat27 * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
    u_xlat29 = (-u_xlat11) + 2.0;
    u_xlat11 = u_xlat29 * u_xlat11;
    u_xlat29 = u_xlat11 * _HeigtFogColDelta.w;
    u_xlat2.x = (u_xlatb2) ? u_xlat29 : u_xlat11;
    u_xlat2.x = log2(u_xlat2.x);
    u_xlat2.x = u_xlat2.x * unity_FogColor.w;
    u_xlat2.x = exp2(u_xlat2.x);
    u_xlat2.x = min(u_xlat2.x, _HeigtFogColBase.w);
    u_xlat11 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat11 = min(max(u_xlat11, 0.0), 1.0);
#else
    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
#endif
    u_xlat16_5.x = (-u_xlat11) + 2.0;
    u_xlat16_5.x = u_xlat11 * u_xlat16_5.x;
    u_xlat6.xyz = u_xlat16_5.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat7.xyz = (-u_xlat6.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat6.xyz = vec3(u_xlat27) * u_xlat7.xyz + u_xlat6.xyz;
    u_xlat6.xyz = u_xlat2.xxx * u_xlat6.xyz;
    u_xlat27 = (-u_xlat2.x) + 1.0;
    vs_TEXCOORD0.w = u_xlat13.x * u_xlat27;
    u_xlat2.xyw = u_xlat13.xxx * u_xlat6.xyz;
    u_xlat27 = u_xlat0.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
    u_xlat13.xyz = vec3(u_xlat27) * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    vs_TEXCOORD0.xyz = u_xlat13.xyz * u_xlat4.xxx + u_xlat2.xyw;
    u_xlat4.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat4.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat4.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat27 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat4.xyz = vec3(u_xlat27) * u_xlat4.xyz;
    u_xlat16_5.x = u_xlat4.y * u_xlat4.y;
    u_xlat16_5.x = u_xlat4.x * u_xlat4.x + (-u_xlat16_5.x);
    u_xlat16_6 = u_xlat4.yzzx * u_xlat4.xyzz;
    u_xlat16_8.x = dot(unity_SHBr, u_xlat16_6);
    u_xlat16_8.y = dot(unity_SHBg, u_xlat16_6);
    u_xlat16_8.z = dot(unity_SHBb, u_xlat16_6);
    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_8.xyz;
    u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat4.w = 1.0;
    u_xlat16_8.x = dot(unity_SHAr, u_xlat4);
    u_xlat16_8.y = dot(unity_SHAg, u_xlat4);
    u_xlat16_8.z = dot(unity_SHAb, u_xlat4);
    u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_8.xyz;
    vs_TEXCOORD1.xyz = u_xlat16_5.xyz;
    vs_TEXCOORD1.w = 1.0;
    u_xlat27 = u_xlat3.y * _ProjectionParams.x;
    u_xlat7.w = u_xlat27 * 0.5;
    u_xlat7.xz = u_xlat3.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.z = u_xlat2.z;
    u_xlat3.xy = u_xlat7.zz + u_xlat7.xw;
    vs_TEXCOORD2 = u_xlat3;
    vs_TEXCOORD4.xyw = u_xlat3.xyw;
    u_xlat27 = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat27 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat27;
    u_xlat27 = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat27;
    u_xlat27 = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat27;
    vs_TEXCOORD3.z = (-u_xlat27);
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD3.w = 0.0;
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD5.w = 0.0;
    vs_TEXCOORD6.xyz = u_xlat4.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[1].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].www + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * in_POSITION0.yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.zzz + u_xlat1.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.www + u_xlat1.xyz;
    vs_TEXCOORD7.xyz = u_xlat1.xyz * vec3(-1.0, -1.0, 1.0);
    vs_TEXCOORD7.w = 0.0;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat27 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat1.xyz = vec3(u_xlat27) * u_xlat1.xyz;
    vs_TEXCOORD8.xyz = u_xlat1.xyz;
    vs_TEXCOORD8.w = 0.0;
    u_xlat2.xyz = u_xlat1.yzx * u_xlat4.zxy;
    u_xlat1.xyz = u_xlat4.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
    u_xlat27 = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD9.xyz = vec3(u_xlat27) * u_xlat1.xyz;
    vs_TEXCOORD9.w = 0.0;
    u_xlat27 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat27 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat27;
    vs_TEXCOORD10.w = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat27;
    vs_TEXCOORD10.xyz = u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowPos[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	mediump float _CausticUVScale;
uniform 	mediump float _CausticSpeed;
uniform 	mediump vec4 _CausticColor;
uniform 	mediump float _CausticDepth;
uniform 	mediump float _CausticDistance;
uniform 	mediump float _CausticDistortionValue;
uniform 	mediump vec4 _DepthFoamMask_ST;
uniform 	mediump float _DepthFoamSpeed;
uniform 	mediump vec4 _DepthFoamColor;
uniform 	mediump float _DepthFoamExtent;
uniform 	mediump float _DepthFoamDistance;
uniform 	mediump float _DepthFoamSubdivision;
uniform 	mediump float _DepthFoamWidth;
uniform 	mediump float _DepthFoamPhaseScale;
uniform 	mediump float _DepthFoamCloseFadeOffset;
uniform 	mediump float _DepthFoamCloseFadeDistance;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _NormalMapScale;
uniform 	float _Normal01_U_Speed;
uniform 	float _Normal01_VSpeed;
uniform 	float _NormalMapBias;
uniform 	float _Normal02_U_Speed;
uniform 	float _Normal02_V_Speed;
uniform 	float _RefractionIntensity;
uniform 	float _OpacityByDepth;
uniform 	float _SpecularIntensity;
uniform 	vec3 _ES_MoonDirection;
uniform 	vec3 _ES_SunDirection;
uniform 	float _Gloss;
uniform 	float _ShoreTransparency;
uniform 	float _SpecularPower;
uniform 	vec4 _ShallowColor;
uniform 	float _ShoreFade;
uniform 	vec4 _DeepColor;
uniform 	float _DeepColorDepth;
uniform 	float _DeepColorFade;
uniform 	vec4 _DistortionIntensity;
uniform 	float _SSRDistortion;
uniform 	float _SSRDistortion_Shore;
uniform 	float _SSRIntensity;
uniform 	float _ReflectionIntensity;
uniform 	float _FresnelPower;
uniform 	float _ShoreReflectionFade;
uniform 	vec3 _ES_MainLightColor;
uniform 	mediump float _RippleTillingScale;
uniform 	mediump float _Ripple02Rotate;
uniform 	mediump float _ProjectUVScale;
uniform 	mediump float _CausticFade;
uniform 	mediump float _CausticFadeExponent;
uniform 	vec4 _ReflectionSkyCubeMap_HDR;
uniform lowp sampler2D _Normal01;
uniform lowp sampler2D _Normal02;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _SceneScaledBufferBeforTransParent;
uniform lowp samplerCube _ReflectionSkyCubeMap;
uniform lowp sampler2D _SSRTexture;
uniform lowp sampler2D _DepthFoamMask;
uniform lowp sampler2D _WaterRippleTex;
uniform lowp sampler2DShadow hlslcc_zcmp_CascadeShadowMapTexture;
uniform lowp sampler2D _CascadeShadowMapTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD8;
in highp vec4 vs_TEXCOORD9;
in highp vec4 vs_TEXCOORD10;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
lowp float u_xlat10_0;
int u_xlati0;
uint u_xlatu0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec3 u_xlat10_1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
lowp vec4 u_xlat10_2;
bvec4 u_xlatb2;
mediump vec3 u_xlat16_3;
vec4 u_xlat4;
mediump vec3 u_xlat16_4;
lowp vec4 u_xlat10_4;
vec3 u_xlat5;
lowp float u_xlat10_5;
vec4 u_xlat6;
vec4 u_xlat7;
mediump vec3 u_xlat16_7;
vec4 u_xlat8;
vec3 u_xlat9;
vec3 u_xlat10;
mediump vec3 u_xlat16_10;
vec3 u_xlat11;
vec3 u_xlat12;
lowp vec3 u_xlat10_12;
vec3 u_xlat13;
vec3 u_xlat14;
vec3 u_xlat15;
mediump float u_xlat16_16;
mediump vec2 u_xlat16_17;
float u_xlat18;
bool u_xlatb18;
vec3 u_xlat19;
mediump vec3 u_xlat16_21;
vec3 u_xlat23;
mediump float u_xlat16_23;
bool u_xlatb23;
vec3 u_xlat25;
bool u_xlatb25;
float u_xlat26;
vec2 u_xlat36;
mediump float u_xlat16_36;
lowp float u_xlat10_36;
float u_xlat37;
lowp float u_xlat10_37;
int u_xlati37;
uint u_xlatu37;
bool u_xlatb37;
float u_xlat41;
float u_xlat42;
lowp float u_xlat10_54;
float u_xlat55;
mediump float u_xlat16_55;
mediump float u_xlat16_57;
float u_xlat59;
mediump float u_xlat16_59;
bool u_xlatb59;
float u_xlat60;
bool u_xlatb60;
float u_xlat61;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0 = vs_TEXCOORD5.xzxz * vec4(_ProjectUVScale, _ProjectUVScale, _RippleTillingScale, _RippleTillingScale);
    u_xlat1.x = _Time.y * _Normal01_U_Speed + u_xlat0.x;
    u_xlat1.yz = _Time.yy * vec2(_Normal01_VSpeed, _Normal02_U_Speed) + u_xlat0.yx;
    u_xlat1.w = _Time.y * _Normal02_V_Speed + u_xlat0.y;
    u_xlat10_2.xyz = texture(_Normal01, u_xlat1.xy, _NormalMapBias).xyz;
    u_xlat16_2.xyz = u_xlat10_2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_3.xy = u_xlat16_2.xy * vec2(_NormalMapScale);
    u_xlat10_1.xyz = texture(_Normal02, u_xlat1.zw, _NormalMapBias).xyz;
    u_xlat16_2.w = -1.0;
    u_xlat16_4.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_2.wwz;
    u_xlat16_4.xy = u_xlat16_4.xy * vec2(_NormalMapScale);
    u_xlat16_3.z = -1.0;
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat0.x = float(1.0) / vs_TEXCOORD4.w;
    u_xlat1.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat18 = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat18 = _ZBufferParams.z * u_xlat18 + _ZBufferParams.w;
    u_xlat18 = float(1.0) / u_xlat18;
    u_xlat1.x = vs_TEXCOORD10.w + 9.99999975e-05;
    u_xlat1.x = (-u_xlat18) / u_xlat1.x;
    u_xlat19.xyz = u_xlat1.xxx * vs_TEXCOORD10.xyz;
    u_xlat5.xyz = vs_TEXCOORD10.xyz * u_xlat1.xxx + _WorldSpaceCameraPos.xyz;
    u_xlat6.xyz = (-u_xlat5.xyz) + vs_TEXCOORD5.xyz;
    u_xlat1.x = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlat6.xz = u_xlat16_3.xy * vec2(vec2(_RefractionIntensity, _RefractionIntensity));
    u_xlat0.x = u_xlat0.x * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat6.xz = u_xlat0.xx * u_xlat6.xz;
    u_xlat6.xz = u_xlat6.xz * vs_TEXCOORD4.ww;
    u_xlat0.x = u_xlat18 + (-vs_TEXCOORD4.w);
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat7.xy = u_xlat0.xx * u_xlat6.xz;
    u_xlat7.z = 0.0;
    u_xlat6.xzw = u_xlat7.xyz + vs_TEXCOORD4.xyw;
    u_xlat0.xy = u_xlat6.xz / u_xlat6.ww;
    u_xlat0.x = texture(_CameraDepthTexture, u_xlat0.xy).x;
    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat0.x = u_xlat0.x + (-vs_TEXCOORD4.w);
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat6.xzw = u_xlat0.xxx * u_xlat7.xyz + vs_TEXCOORD4.xyw;
    u_xlat0.xy = u_xlat6.xz / u_xlat6.ww;
    u_xlat0.x = texture(_CameraDepthTexture, u_xlat0.xy).x;
    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat0.x = u_xlat0.x + (-vs_TEXCOORD4.w);
    u_xlat18 = 0.100000001 / _OpacityByDepth;
    u_xlat18 = u_xlat18 * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat16_4.xz = u_xlat16_3.xy;
    u_xlat16_4.y = 1.0;
    u_xlat16_59 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);
    u_xlat16_59 = inversesqrt(u_xlat16_59);
    u_xlat16_7.xyz = u_xlat16_4.xyz * vec3(u_xlat16_59);
#ifdef UNITY_ADRENO_ES3
    u_xlatb59 = !!(0.0>=_ES_MoonDirection.y);
#else
    u_xlatb59 = 0.0>=_ES_MoonDirection.y;
#endif
    u_xlat8.xyz = (bool(u_xlatb59)) ? _ES_SunDirection.xyz : _ES_MoonDirection.xyz;
    u_xlat9.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat59 = dot(u_xlat9.xyz, u_xlat9.xyz);
    u_xlat60 = inversesqrt(u_xlat59);
    u_xlat10.xyz = vec3(u_xlat60) * u_xlat9.xyz;
    u_xlat8.xyz = u_xlat9.xyz * vec3(u_xlat60) + u_xlat8.xyz;
    u_xlat60 = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat60 = inversesqrt(u_xlat60);
    u_xlat8.xyz = vec3(u_xlat60) * u_xlat8.xyz;
    u_xlat60 = dot(u_xlat16_7.xyz, u_xlat8.xyz);
    u_xlat25.x = _Gloss * 128.0;
    u_xlat60 = max(u_xlat60, 9.99999975e-05);
    u_xlat60 = log2(u_xlat60);
    u_xlat60 = u_xlat60 * u_xlat25.x;
    u_xlat60 = exp2(u_xlat60);
    u_xlat60 = u_xlat60 * _SpecularIntensity;
    u_xlat60 = max(u_xlat60, 0.0);
    u_xlat60 = min(u_xlat60, 16.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb25 = !!(_ES_MoonDirection.y>=9.99999975e-05);
#else
    u_xlatb25 = _ES_MoonDirection.y>=9.99999975e-05;
#endif
    u_xlat25.x = u_xlatb25 ? 1.0 : float(0.0);
    u_xlat61 = _ES_MoonDirection.y + -1.0;
    u_xlat25.x = u_xlat25.x * u_xlat61 + 1.0;
    u_xlat61 = float(1.0) / _ShoreTransparency;
    u_xlat8.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat8.xyz = u_xlat8.xxx * vs_TEXCOORD6.xyz;
    u_xlat8.x = dot(u_xlat10.xyz, u_xlat8.xyz);
    u_xlat8.x = (-u_xlat8.x) + 1.0;
    u_xlat8.x = max(u_xlat8.x, 9.99999975e-05);
    u_xlat8.x = log2(u_xlat8.x);
    u_xlat26 = u_xlat8.x * _SpecularPower;
    u_xlat26 = exp2(u_xlat26);
    u_xlat9.xyz = u_xlat25.xxx * _LightColor0.xyz;
    u_xlat9.xyz = vec3(u_xlat60) * u_xlat9.xyz;
    u_xlat60 = u_xlat0.x + -1.0;
    u_xlat60 = u_xlat61 * u_xlat60;
    u_xlat60 = u_xlat60 * 0.100000001;
#ifdef UNITY_ADRENO_ES3
    u_xlat60 = min(max(u_xlat60, 0.0), 1.0);
#else
    u_xlat60 = clamp(u_xlat60, 0.0, 1.0);
#endif
    u_xlat9.xyz = vec3(u_xlat60) * u_xlat9.xyz;
    u_xlat60 = u_xlat0.x * u_xlat61;
#ifdef UNITY_ADRENO_ES3
    u_xlat60 = min(max(u_xlat60, 0.0), 1.0);
#else
    u_xlat60 = clamp(u_xlat60, 0.0, 1.0);
#endif
    u_xlat60 = max(u_xlat60, 9.99999975e-05);
    u_xlat60 = log2(u_xlat60);
    u_xlat60 = u_xlat60 * _ShoreFade;
    u_xlat60 = exp2(u_xlat60);
    u_xlat11.xyz = _ShallowColor.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat11.xyz = vec3(u_xlat60) * u_xlat11.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat6.xz = u_xlat6.xz / vs_TEXCOORD4.ww;
    u_xlat10_12.xyz = texture(_SceneScaledBufferBeforTransParent, u_xlat6.xz).xyz;
    u_xlat6.x = u_xlat1.x * _CausticDistortionValue;
    u_xlat6.xz = u_xlat6.xx * u_xlat16_7.xz;
    u_xlat7.z = _Time.y * _CausticSpeed;
    u_xlat6.xz = u_xlat5.xz * vec2(_CausticUVScale) + u_xlat6.xz;
    u_xlat13.x = _Normal01_U_Speed * 25.0;
    u_xlat13.y = _Normal01_VSpeed * 25.0;
    u_xlat7.xy = u_xlat7.zz * u_xlat13.xy + u_xlat6.xz;
    u_xlat13.x = dot(u_xlat7.xyz, vec3(-2.0, 3.0, 1.0));
    u_xlat13.y = dot(u_xlat7.xyz, vec3(-1.0, -2.0, 2.0));
    u_xlat13.z = dot(u_xlat7.xzy, vec3(2.0, 2.0, 1.0));
    u_xlat7.xyz = u_xlat13.xyz * vec3(0.400000006, 0.400000006, 0.400000006);
    u_xlat14.x = dot(u_xlat7.xyz, vec3(-2.0, 3.0, 1.0));
    u_xlat14.y = dot(u_xlat7.xyz, vec3(-1.0, -2.0, 2.0));
    u_xlat14.z = dot(u_xlat7.xzy, vec3(2.0, 2.0, 1.0));
    u_xlat7.xyz = u_xlat14.xyz * vec3(0.300000012, 0.300000012, 0.300000012);
    u_xlat6.x = dot(u_xlat7.xyz, vec3(-2.0, 3.0, 1.0));
    u_xlat6.z = dot(u_xlat7.xyz, vec3(-1.0, -2.0, 2.0));
    u_xlat7.x = dot(u_xlat7.xzy, vec3(2.0, 2.0, 1.0));
    u_xlat25.xyz = fract(u_xlat13.xyz);
    u_xlat25.xyz = (-u_xlat25.xyz) + vec3(0.5, 0.5, 0.5);
    u_xlat25.x = dot(u_xlat25.xyz, u_xlat25.xyz);
    u_xlat13.xyz = fract(u_xlat14.xyz);
    u_xlat13.xyz = (-u_xlat13.xyz) + vec3(0.5, 0.5, 0.5);
    u_xlat25.y = dot(u_xlat13.xyz, u_xlat13.xyz);
    u_xlat25.xy = sqrt(u_xlat25.xy);
    u_xlat25.x = min(u_xlat25.y, u_xlat25.x);
    u_xlat13.xy = fract(u_xlat6.xz);
    u_xlat13.z = fract(u_xlat7.x);
    u_xlat7.xzw = (-u_xlat13.xyz) + vec3(0.5, 0.5, 0.5);
    u_xlat6.x = dot(u_xlat7.xzw, u_xlat7.xzw);
    u_xlat6.x = sqrt(u_xlat6.x);
    u_xlat6.x = min(u_xlat6.x, u_xlat25.x);
    u_xlat6.x = log2(u_xlat6.x);
    u_xlat6.x = u_xlat6.x * 7.0;
    u_xlat6.x = exp2(u_xlat6.x);
    u_xlat6.x = u_xlat6.x * 25.0;
    u_xlat16_4.xy = vec2(float(_CausticDepth) + float(9.99999975e-05), float(_CausticDistance) + float(9.99999975e-05));
    u_xlat42 = u_xlat6.y / u_xlat16_4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat42 = min(max(u_xlat42, 0.0), 1.0);
#else
    u_xlat42 = clamp(u_xlat42, 0.0, 1.0);
#endif
    u_xlat19.x = dot(u_xlat19.xyz, u_xlat19.xyz);
    u_xlat19.x = sqrt(u_xlat19.x);
    u_xlat19.x = u_xlat19.x / u_xlat16_4.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat19.x = min(max(u_xlat19.x, 0.0), 1.0);
#else
    u_xlat19.x = clamp(u_xlat19.x, 0.0, 1.0);
#endif
    u_xlat19.x = (-u_xlat19.x) + 1.0;
    u_xlat19.x = u_xlat19.x * u_xlat42;
    u_xlat7.xyz = u_xlat5.xyz + (-unity_ShadowSplitSpheres[0].xyz);
    u_xlat13.xyz = u_xlat5.xyz + (-unity_ShadowSplitSpheres[1].xyz);
    u_xlat14.xyz = u_xlat5.xyz + (-unity_ShadowSplitSpheres[2].xyz);
    u_xlat15.xyz = u_xlat5.xyz + (-unity_ShadowSplitSpheres[3].xyz);
    u_xlat2.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat2.y = dot(u_xlat13.xyz, u_xlat13.xyz);
    u_xlat2.z = dot(u_xlat14.xyz, u_xlat14.xyz);
    u_xlat2.w = dot(u_xlat15.xyz, u_xlat15.xyz);
    u_xlatb2 = lessThan(u_xlat2, unity_ShadowSplitSqRadii);
    u_xlat2 = mix(vec4(0.0, 0.0, 0.0, 0.0), vec4(1.0, 1.0, 1.0, 1.0), vec4(u_xlatb2));
    u_xlat16_57 = u_xlat2.y + u_xlat2.x;
    u_xlat16_4.x = u_xlat2.z + u_xlat16_57;
    u_xlat7.x = -0.0;
    u_xlat7.y = (-u_xlat2.x);
    u_xlat7.z = (-u_xlat16_57);
    u_xlat7.w = (-u_xlat16_4.x);
    u_xlat2 = u_xlat2 + u_xlat7;
    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat16_57 = dot(u_xlat2, vec4(1.0, 1.0, 1.0, 1.0));
#ifdef UNITY_ADRENO_ES3
    u_xlatb37 = !!(u_xlat16_57>=0.5);
#else
    u_xlatb37 = u_xlat16_57>=0.5;
#endif
    if(u_xlatb37){
        u_xlat37 = dot(u_xlat2.yzw, vec3(1.0, 2.0, 3.0));
        u_xlat37 = min(u_xlat37, 3.0);
        u_xlatu37 = uint(u_xlat37);
        u_xlat5.xyz = u_xlat5.xyz + (-unity_ShadowPos[int(u_xlatu37)].xyz);
        u_xlati37 = int(u_xlatu37) << 2;
        u_xlat7.xyz = u_xlat5.yyy * hlslcc_mtx4x4unity_WorldToShadow[(u_xlati37 + 1)].xyz;
        u_xlat7.xyz = hlslcc_mtx4x4unity_WorldToShadow[u_xlati37].xyz * u_xlat5.xxx + u_xlat7.xyz;
        u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToShadow[(u_xlati37 + 2)].xyz * u_xlat5.zzz + u_xlat7.xyz;
        u_xlat5.xyz = u_xlat5.xyz + hlslcc_mtx4x4unity_WorldToShadow[(u_xlati37 + 3)].xyz;
        vec3 txVec0 = vec3(u_xlat5.xy,u_xlat5.z);
        u_xlat10_37 = textureLod(hlslcc_zcmp_CascadeShadowMapTexture, txVec0, 0.0);
        u_xlat16_55 = (-_LightShadowData.x) + 1.0;
        u_xlat37 = u_xlat10_37 * u_xlat16_55 + _LightShadowData.x;
    } else {
        u_xlat37 = 1.0;
    //ENDIF
    }
    u_xlat19.x = u_xlat37 * u_xlat19.x;
    u_xlat16_4.xyz = _LightColor0.xyz * _CausticColor.xyz;
    u_xlat16_4.xyz = u_xlat6.xxx * u_xlat16_4.xyz;
    u_xlat16_4.xyz = u_xlat19.xxx * u_xlat16_4.xyz;
    u_xlat16_57 = _CausticFade + 9.99999975e-05;
    u_xlat1.x = u_xlat1.x / u_xlat16_57;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.x = log2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _CausticFadeExponent;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat1.x = (-u_xlat1.x) + 1.0;
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat1.xxx + vec3(1.0, 1.0, 1.0);
    u_xlat16_1.xyz = u_xlat16_4.xyz * u_xlat10_12.xyz;
    u_xlat5.xyz = u_xlat16_1.xyz * u_xlat11.xyz;
    u_xlat55 = 0.100000001 / _DeepColorDepth;
    u_xlat55 = u_xlat0.x * u_xlat55;
#ifdef UNITY_ADRENO_ES3
    u_xlat55 = min(max(u_xlat55, 0.0), 1.0);
#else
    u_xlat55 = clamp(u_xlat55, 0.0, 1.0);
#endif
    u_xlat55 = max(u_xlat55, 9.99999975e-05);
    u_xlat55 = log2(u_xlat55);
    u_xlat55 = u_xlat55 * _DeepColorFade;
    u_xlat55 = exp2(u_xlat55);
    u_xlat7.xyz = (-u_xlat11.xyz) * u_xlat16_1.xyz + _DeepColor.xyz;
    u_xlat7.xyz = vec3(u_xlat55) * u_xlat7.xyz + u_xlat5.xyz;
    u_xlat12.xyz = u_xlat16_3.xyz * _DistortionIntensity.xyz;
    u_xlat13.x = vs_TEXCOORD8.x;
    u_xlat13.y = vs_TEXCOORD9.x;
    u_xlat13.z = vs_TEXCOORD6.x;
    u_xlat13.x = dot(u_xlat13.xyz, u_xlat12.xyz);
    u_xlat14.x = vs_TEXCOORD8.y;
    u_xlat14.y = vs_TEXCOORD9.y;
    u_xlat14.z = vs_TEXCOORD6.y;
    u_xlat13.y = dot(u_xlat14.xyz, u_xlat12.xyz);
    u_xlat14.x = vs_TEXCOORD8.z;
    u_xlat14.y = vs_TEXCOORD9.z;
    u_xlat14.z = vs_TEXCOORD6.z;
    u_xlat13.z = dot(u_xlat14.xyz, u_xlat12.xyz);
    u_xlat55 = dot(u_xlat13.xyz, u_xlat13.xyz);
    u_xlat55 = inversesqrt(u_xlat55);
    u_xlat13.xyz = vec3(u_xlat55) * u_xlat13.xyz;
    u_xlat55 = dot((-u_xlat10.xyz), u_xlat13.xyz);
    u_xlat55 = u_xlat55 + u_xlat55;
    u_xlat10.xyz = u_xlat13.xyz * (-vec3(u_xlat55)) + (-u_xlat10.xyz);
    u_xlat10_2 = textureLod(_ReflectionSkyCubeMap, u_xlat10.xyz, 0.0);
    u_xlat16_3.x = u_xlat10_2.w + -1.0;
    u_xlat16_3.x = _ReflectionSkyCubeMap_HDR.w * u_xlat16_3.x + 1.0;
    u_xlat16_3.x = log2(u_xlat16_3.x);
    u_xlat16_3.x = u_xlat16_3.x * _ReflectionSkyCubeMap_HDR.y;
    u_xlat16_3.x = exp2(u_xlat16_3.x);
    u_xlat16_3.x = u_xlat16_3.x * _ReflectionSkyCubeMap_HDR.x;
    u_xlat16_21.xyz = u_xlat10_2.xyz * u_xlat16_3.xxx;
    u_xlat6.xz = u_xlat12.xy * vec2(_SSRDistortion);
    u_xlat55 = float(1.0) / _SSRDistortion_Shore;
    u_xlat55 = u_xlat0.x * u_xlat55;
#ifdef UNITY_ADRENO_ES3
    u_xlat55 = min(max(u_xlat55, 0.0), 1.0);
#else
    u_xlat55 = clamp(u_xlat55, 0.0, 1.0);
#endif
    u_xlat6.xz = vec2(u_xlat55) * u_xlat6.xz;
    u_xlat6.xz = u_xlat6.xz * vs_TEXCOORD4.ww + vs_TEXCOORD4.xy;
    u_xlat6.xz = u_xlat6.xz / vs_TEXCOORD4.ww;
    u_xlat10_4 = texture(_SSRTexture, u_xlat6.xz).wxyz;
    u_xlat16_10.xyz = (-u_xlat16_3.xxx) * u_xlat10_2.xyz + u_xlat10_4.yzw;
    u_xlat10.xyz = u_xlat16_10.xyz * vec3(vec3(_SSRIntensity, _SSRIntensity, _SSRIntensity));
    u_xlat16_4.x = u_xlat10_4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat10.xyz = u_xlat16_4.xxx * u_xlat10.xyz + u_xlat16_21.xyz;
    u_xlat55 = u_xlat8.x * _FresnelPower;
    u_xlat55 = exp2(u_xlat55);
    u_xlat55 = u_xlat55 * _ReflectionIntensity;
    u_xlat6.x = float(1.0) / _ShoreReflectionFade;
    u_xlat0.x = u_xlat0.x * u_xlat6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x * u_xlat55;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat8.xzw = (-u_xlat7.xyz) + u_xlat10.xyz;
    u_xlat7.xyz = u_xlat0.xxx * u_xlat8.xzw + u_xlat7.xyz;
    u_xlat1.xyz = (-u_xlat11.xyz) * u_xlat16_1.xyz + u_xlat7.xyz;
    u_xlat1.xyz = vec3(u_xlat60) * u_xlat1.xyz + u_xlat5.xyz;
    u_xlat0.x = (-vs_TEXCOORD5.y) * _WorldSpaceLightPos0.w + _WorldSpaceLightPos0.y;
    u_xlat16_3.x = max(u_xlat0.x, 0.0);
    u_xlat5.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowSplitSpheres[0].xyz);
    u_xlat6.xzw = vs_TEXCOORD5.xyz + (-unity_ShadowSplitSpheres[1].xyz);
    u_xlat7.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowSplitSpheres[2].xyz);
    u_xlat8.xzw = vs_TEXCOORD5.xyz + (-unity_ShadowSplitSpheres[3].xyz);
    u_xlat2.x = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat2.y = dot(u_xlat6.xzw, u_xlat6.xzw);
    u_xlat2.z = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat2.w = dot(u_xlat8.xzw, u_xlat8.xzw);
    u_xlatb2 = lessThan(u_xlat2, unity_ShadowSplitSqRadii);
    u_xlat2 = mix(vec4(0.0, 0.0, 0.0, 0.0), vec4(1.0, 1.0, 1.0, 1.0), vec4(u_xlatb2));
    u_xlat16_21.x = u_xlat2.y + u_xlat2.x;
    u_xlat16_21.y = u_xlat2.z + u_xlat16_21.x;
    u_xlat4.x = -0.0;
    u_xlat4.y = (-u_xlat2.x);
    u_xlat4.zw = (-u_xlat16_21.xy);
    u_xlat2 = u_xlat2 + u_xlat4;
    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat16_21.x = dot(u_xlat2, vec4(1.0, 1.0, 1.0, 1.0));
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(u_xlat16_21.x>=0.5);
#else
    u_xlatb0.x = u_xlat16_21.x>=0.5;
#endif
    if(u_xlatb0.x){
        u_xlat0.x = dot(u_xlat2.yzw, vec3(1.0, 2.0, 3.0));
        u_xlat0.x = min(u_xlat0.x, 3.0);
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat5.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowPos[int(u_xlatu0)].xyz);
        u_xlati0 = int(u_xlatu0) << 2;
        u_xlat6.xzw = u_xlat5.yyy * hlslcc_mtx4x4unity_WorldToShadow[(u_xlati0 + 1)].xyz;
        u_xlat6.xzw = hlslcc_mtx4x4unity_WorldToShadow[u_xlati0].xyz * u_xlat5.xxx + u_xlat6.xzw;
        u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToShadow[(u_xlati0 + 2)].xyz * u_xlat5.zzz + u_xlat6.xzw;
        u_xlat5.xyz = u_xlat5.xyz + hlslcc_mtx4x4unity_WorldToShadow[(u_xlati0 + 3)].xyz;
        vec3 txVec1 = vec3(u_xlat5.xy,u_xlat5.z);
        u_xlat10_0 = textureLod(hlslcc_zcmp_CascadeShadowMapTexture, txVec1, 0.0);
        u_xlat16_55 = (-_LightShadowData.x) + 1.0;
        u_xlat0.x = u_xlat10_0 * u_xlat16_55 + _LightShadowData.x;
    } else {
        u_xlat0.x = 1.0;
    //ENDIF
    }
    u_xlat16_3.xyz = u_xlat16_3.xxx * _LightColor0.xyz;
    u_xlat5.xyz = u_xlat16_3.xyz * u_xlat0.xxx + vs_TEXCOORD1.xyz;
    u_xlat16_3.xyz = u_xlat5.xyz * vec3(0.300000012, 0.300000012, 0.300000012) + vec3(0.699999988, 0.699999988, 0.699999988);
    u_xlat0.x = sqrt(u_xlat59);
    u_xlat16_57 = u_xlat0.x + (-_DepthFoamCloseFadeOffset);
    u_xlat16_57 = u_xlat16_57 / _DepthFoamCloseFadeDistance;
    u_xlat16_16 = vs_COLOR0.x * _DepthFoamExtent;
    u_xlat55 = max(u_xlat6.y, 0.0);
    u_xlat55 = min(u_xlat16_16, u_xlat55);
    u_xlat16_16 = _DepthFoamExtent * vs_COLOR0.x + 9.99999975e-05;
    u_xlat55 = u_xlat55 / u_xlat16_16;
    u_xlat55 = (-u_xlat55) + 1.0;
    u_xlat5.xy = vec2(_Time.y * _DepthFoamMask_ST.z, _Time.y * _DepthFoamMask_ST.w);
    u_xlat5.xy = fract(u_xlat5.xy);
    u_xlat5.xy = _DepthFoamMask_ST.xy * vs_TEXCOORD5.xz + u_xlat5.xy;
    u_xlat10_5 = texture(_DepthFoamMask, u_xlat5.xy, -1.0).x;
    u_xlat23.x = vs_TEXCOORD5.z + vs_TEXCOORD5.x;
    u_xlat23.x = u_xlat23.x * _DepthFoamPhaseScale;
    u_xlat23.x = _DepthFoamSpeed * _Time.y + u_xlat23.x;
    u_xlat41 = (-u_xlat55) + 1.0;
    u_xlat16_16 = _DepthFoamSubdivision * u_xlat55 + u_xlat23.x;
    u_xlat16_16 = sin(u_xlat16_16);
    u_xlat16_16 = _DepthFoamWidth * u_xlat55 + u_xlat16_16;
    u_xlat16_23 = u_xlat10_5 * 2.0 + -1.0;
    u_xlat23.x = u_xlat16_23 + u_xlat16_16;
#ifdef UNITY_ADRENO_ES3
    u_xlatb23 = !!(u_xlat23.x>=u_xlat41);
#else
    u_xlatb23 = u_xlat23.x>=u_xlat41;
#endif
    u_xlat23.x = u_xlatb23 ? 1.0 : float(0.0);
    u_xlat5.x = u_xlat23.x * u_xlat10_5;
    u_xlat16_16 = _DepthFoamDistance + 9.99999975e-05;
    u_xlat16_16 = u_xlat0.x / u_xlat16_16;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat16_0 = (-u_xlat16_16) + 1.0;
    u_xlat16_16 = vs_COLOR0.y * _DepthFoamColor.w;
    u_xlat16_57 = u_xlat16_57 * u_xlat16_16;
    u_xlat16_57 = u_xlat5.x * u_xlat16_57;
    u_xlat16_57 = u_xlat55 * u_xlat16_57;
    u_xlat16_57 = u_xlat16_0 * u_xlat16_57;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_57 = min(max(u_xlat16_57, 0.0), 1.0);
#else
    u_xlat16_57 = clamp(u_xlat16_57, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = _DepthFoamColor.xyz * u_xlat16_3.xyz + (-u_xlat1.xyz);
    u_xlat16_3.xyz = vec3(u_xlat16_57) * u_xlat16_3.xyz + u_xlat1.xyz;
    u_xlat16_0 = max(_LightColor0.w, 0.5);
    u_xlat1.xyz = u_xlat9.xyz * vec3(u_xlat26) + u_xlat16_3.xyz;
    u_xlat36.xy = fract(u_xlat0.zw);
    u_xlat16_3.xy = u_xlat36.xy * vec2(1.14999998, 1.14999998);
    u_xlat16_16 = sin(_Ripple02Rotate);
    u_xlat16_17.x = cos(_Ripple02Rotate);
    u_xlat5.x = (-u_xlat16_16);
    u_xlat16_17.y = u_xlat16_16;
    u_xlat6.x = dot(u_xlat16_3.xy, u_xlat16_17.xy);
    u_xlat5.y = u_xlat16_17.x;
    u_xlat6.y = dot(u_xlat16_3.xy, u_xlat5.xy);
    u_xlat10_36 = texture(_WaterRippleTex, u_xlat36.xy).x;
    u_xlat10_54 = texture(_WaterRippleTex, u_xlat6.xy).x;
    u_xlat16_36 = u_xlat10_54 + u_xlat10_36;
    u_xlat36.x = u_xlat16_36 * u_xlat18;
    u_xlat5.xyz = _ES_MainLightColor.xyz * vec3(u_xlat16_0) + (-u_xlat1.xyz);
    u_xlat0.xzw = u_xlat36.xxx * u_xlat5.xyz + u_xlat1.xyz;
    u_xlat1.w = u_xlat18 * vs_COLOR0.w;
    u_xlat5.xyz = vs_TEXCOORD5.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat6.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat6.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat6.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat18 = dot(u_xlat5.xyz, u_xlat6.xyz);
    u_xlat5.x = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat5.x = sqrt(u_xlat5.x);
    u_xlat23.y = u_xlat5.x * _HeigtFogParams.y;
    u_xlat59 = u_xlat5.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat59 = min(max(u_xlat59, 0.0), 1.0);
#else
    u_xlat59 = clamp(u_xlat59, 0.0, 1.0);
#endif
    u_xlat6.x = (-u_xlat59) + 2.0;
    u_xlat59 = u_xlat59 * u_xlat6.x;
    u_xlat6.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!((-u_xlat18)>=u_xlat6.x);
#else
    u_xlatb18 = (-u_xlat18)>=u_xlat6.x;
#endif
    u_xlat6.x = u_xlat59 * _HeigtFogColDelta.w;
    u_xlat18 = (u_xlatb18) ? u_xlat6.x : u_xlat59;
    u_xlat18 = log2(u_xlat18);
    u_xlat18 = u_xlat18 * unity_FogColor.w;
    u_xlat18 = exp2(u_xlat18);
    u_xlat18 = min(u_xlat18, _HeigtFogColBase.w);
    u_xlat59 = vs_TEXCOORD5.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat59 = min(max(u_xlat59, 0.0), 1.0);
#else
    u_xlat59 = clamp(u_xlat59, 0.0, 1.0);
#endif
    u_xlat16_3.x = (-u_xlat59) + 2.0;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat59;
    u_xlat6.xyz = u_xlat16_3.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat59 = u_xlat5.x + (-_HeigtFogRamp.w);
    u_xlat59 = u_xlat59 * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat59 = min(max(u_xlat59, 0.0), 1.0);
#else
    u_xlat59 = clamp(u_xlat59, 0.0, 1.0);
#endif
    u_xlat7.xyz = (-u_xlat6.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat6.xyz = vec3(u_xlat59) * u_xlat7.xyz + u_xlat6.xyz;
    u_xlat59 = u_xlat5.y * _HeigtFogParams.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb60 = !!(0.00999999978<abs(u_xlat59));
#else
    u_xlatb60 = 0.00999999978<abs(u_xlat59);
#endif
    u_xlat7.x = u_xlat59 * -1.44269502;
    u_xlat7.x = exp2(u_xlat7.x);
    u_xlat7.x = (-u_xlat7.x) + 1.0;
    u_xlat59 = u_xlat7.x / u_xlat59;
    u_xlat16_3.x = (u_xlatb60) ? u_xlat59 : 1.0;
    u_xlat23.x = u_xlat5.y * _HeigtFogParams2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb59 = !!(0.00999999978<abs(u_xlat23.x));
#else
    u_xlatb59 = 0.00999999978<abs(u_xlat23.x);
#endif
    u_xlat60 = u_xlat23.x * -1.44269502;
    u_xlat60 = exp2(u_xlat60);
    u_xlat60 = (-u_xlat60) + 1.0;
    u_xlat23.x = u_xlat60 / u_xlat23.x;
    u_xlat16_3.y = (u_xlatb59) ? u_xlat23.x : 1.0;
    u_xlat23.x = u_xlat5.x * _HeigtFogParams2.y;
    u_xlat16_3.xy = u_xlat16_3.xy * u_xlat23.yx;
    u_xlat16_3.x = exp2((-u_xlat16_3.x));
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat16_21.x = exp2((-u_xlat16_3.y));
    u_xlat16_3.y = (-u_xlat16_21.x) + 1.0;
    u_xlat16_3.xy = max(u_xlat16_3.xy, vec2(0.0, 0.0));
    u_xlat16_3.x = u_xlat16_3.y + u_xlat16_3.x;
    u_xlat5.x = u_xlat5.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat16_21.x = (-u_xlat5.x) + 2.0;
    u_xlat16_21.x = u_xlat16_21.x * u_xlat5.x;
    u_xlat5.x = u_xlat16_21.x * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat5.x = u_xlat5.x + 1.0;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat5.x;
    u_xlat5.x = min(u_xlat16_3.x, _HeigtFogColBase.w);
    u_xlat23.x = vs_TEXCOORD5.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat23.x = min(max(u_xlat23.x, 0.0), 1.0);
#else
    u_xlat23.x = clamp(u_xlat23.x, 0.0, 1.0);
#endif
    u_xlat23.xyz = u_xlat23.xxx * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    u_xlat6.xyz = vec3(u_xlat18) * u_xlat6.xyz;
    u_xlat60 = (-u_xlat5.x) + 1.0;
    u_xlat6.xyz = vec3(u_xlat60) * u_xlat6.xyz;
    u_xlat5.xyz = u_xlat23.xyz * u_xlat5.xxx + u_xlat6.xyz;
    u_xlat18 = (-u_xlat18) + 1.0;
    u_xlat18 = u_xlat60 * u_xlat18;
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat0.xzw + u_xlat5.xyz;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "MSAA_INTERPOLATION" "MHY_SHADER_HIGH" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	mediump float _MHYZBias;
uniform 	vec4 hlslcc_mtx4x4_mhyJitteredVP[4];
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
out highp vec4 vs_TEXCOORD9;
out highp vec4 vs_TEXCOORD10;
float u_xlat0;
int u_xlati0;
vec4 u_xlat1;
bool u_xlatb1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
bool u_xlatb4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
mediump vec4 u_xlat16_6;
vec4 u_xlat7;
mediump vec3 u_xlat16_8;
vec3 u_xlat9;
float u_xlat10;
float u_xlat13;
bool u_xlatb13;
mediump float u_xlat16_14;
float u_xlat22;
float u_xlat28;
float u_xlat31;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat9.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4_mhyJitteredVP[1];
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[3] * u_xlat2.wwww + u_xlat1;
    u_xlat3.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    u_xlat3.xyw = u_xlat1.xyw;
    gl_Position = u_xlat3;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.xyw = u_xlat9.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat4.x = u_xlat1.y * _HeigtFogParams.x;
    u_xlat13 = u_xlat4.x * -1.44269502;
    u_xlat13 = exp2(u_xlat13);
    u_xlat13 = (-u_xlat13) + 1.0;
    u_xlat13 = u_xlat13 / u_xlat4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(0.00999999978<abs(u_xlat4.x));
#else
    u_xlatb4 = 0.00999999978<abs(u_xlat4.x);
#endif
    u_xlat16_5.x = (u_xlatb4) ? u_xlat13 : 1.0;
    u_xlat4.x = dot(u_xlat1.xyw, u_xlat1.xyw);
    u_xlat4.x = sqrt(u_xlat4.x);
    u_xlat13 = u_xlat4.x * _HeigtFogParams.y;
    u_xlat16_5.x = u_xlat13 * u_xlat16_5.x;
    u_xlat16_5.x = exp2((-u_xlat16_5.x));
    u_xlat16_5.x = (-u_xlat16_5.x) + 1.0;
    u_xlat13 = u_xlat1.y * _HeigtFogParams2.x;
    u_xlat22 = u_xlat13 * -1.44269502;
    u_xlat22 = exp2(u_xlat22);
    u_xlat22 = (-u_xlat22) + 1.0;
    u_xlat22 = u_xlat22 / u_xlat13;
#ifdef UNITY_ADRENO_ES3
    u_xlatb13 = !!(0.00999999978<abs(u_xlat13));
#else
    u_xlatb13 = 0.00999999978<abs(u_xlat13);
#endif
    u_xlat16_14 = (u_xlatb13) ? u_xlat22 : 1.0;
    u_xlat13 = u_xlat4.x * _HeigtFogParams2.y;
    u_xlat16_14 = u_xlat13 * u_xlat16_14;
    u_xlat16_14 = exp2((-u_xlat16_14));
    u_xlat16_5.y = (-u_xlat16_14) + 1.0;
    u_xlat16_5.xy = max(u_xlat16_5.xy, vec2(0.0, 0.0));
    u_xlat16_5.x = u_xlat16_5.y + u_xlat16_5.x;
    u_xlat13 = u_xlat4.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat13 = min(max(u_xlat13, 0.0), 1.0);
#else
    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
#endif
    u_xlat16_14 = (-u_xlat13) + 2.0;
    u_xlat16_14 = u_xlat13 * u_xlat16_14;
    u_xlat13 = u_xlat16_14 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat13 = u_xlat13 + 1.0;
    u_xlat16_5.x = u_xlat13 * u_xlat16_5.x;
    u_xlat13 = min(u_xlat16_5.x, _HeigtFogColBase.w);
    u_xlat22 = (-u_xlat13) + 1.0;
    u_xlat31 = _ProjectionParams.z * 0.999899983;
    u_xlat6.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat6.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat6.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat1.x = dot(u_xlat1.xyw, u_xlat6.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!((-u_xlat1.x)>=u_xlat31);
#else
    u_xlatb1 = (-u_xlat1.x)>=u_xlat31;
#endif
    u_xlat10 = u_xlat4.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat10 = min(max(u_xlat10, 0.0), 1.0);
#else
    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
#endif
    u_xlat28 = u_xlat4.x + (-_HeigtFogRamp.w);
    u_xlat28 = u_xlat28 * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat28 = min(max(u_xlat28, 0.0), 1.0);
#else
    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
#endif
    u_xlat4.x = (-u_xlat10) + 2.0;
    u_xlat10 = u_xlat10 * u_xlat4.x;
    u_xlat4.x = u_xlat10 * _HeigtFogColDelta.w;
    u_xlat1.x = (u_xlatb1) ? u_xlat4.x : u_xlat10;
    u_xlat1.x = log2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * unity_FogColor.w;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat1.x = min(u_xlat1.x, _HeigtFogColBase.w);
    u_xlat10 = u_xlat9.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat10 = min(max(u_xlat10, 0.0), 1.0);
#else
    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
#endif
    u_xlat16_5.x = (-u_xlat10) + 2.0;
    u_xlat16_5.x = u_xlat10 * u_xlat16_5.x;
    u_xlat6.xyz = u_xlat16_5.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat7.xyz = (-u_xlat6.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat6.xyz = vec3(u_xlat28) * u_xlat7.xyz + u_xlat6.xyz;
    u_xlat6.xyz = u_xlat1.xxx * u_xlat6.xyz;
    u_xlat1.x = (-u_xlat1.x) + 1.0;
    vs_TEXCOORD0.w = u_xlat22 * u_xlat1.x;
    u_xlat1.xyw = vec3(u_xlat22) * u_xlat6.xyz;
    u_xlat4.x = u_xlat9.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat4.xzw = u_xlat4.xxx * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    vs_TEXCOORD0.xyz = u_xlat4.xzw * vec3(u_xlat13) + u_xlat1.xyw;
    vs_TEXCOORD1.w = 1.0;
    u_xlat4.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat4.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat4.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat1.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
    u_xlat16_5.x = u_xlat4.y * u_xlat4.y;
    u_xlat16_5.x = u_xlat4.x * u_xlat4.x + (-u_xlat16_5.x);
    u_xlat16_6 = u_xlat4.yzzx * u_xlat4.xyzz;
    u_xlat16_8.x = dot(unity_SHBr, u_xlat16_6);
    u_xlat16_8.y = dot(unity_SHBg, u_xlat16_6);
    u_xlat16_8.z = dot(unity_SHBb, u_xlat16_6);
    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_8.xyz;
    u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat4.w = 1.0;
    u_xlat16_8.x = dot(unity_SHAr, u_xlat4);
    u_xlat16_8.y = dot(unity_SHAg, u_xlat4);
    u_xlat16_8.z = dot(unity_SHAb, u_xlat4);
    u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_8.xyz;
    vs_TEXCOORD1.xyz = u_xlat16_5.xyz;
    u_xlat1.x = u_xlat3.y * _ProjectionParams.x;
    u_xlat7.w = u_xlat1.x * 0.5;
    u_xlat7.xz = u_xlat3.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.z = u_xlat1.z;
    u_xlat3.xy = u_xlat7.zz + u_xlat7.xw;
    vs_TEXCOORD2 = u_xlat3;
    vs_TEXCOORD4.xyw = u_xlat3.xyw;
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD3.w = 0.0;
    u_xlat1.x = u_xlat2.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat2.x + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat2.z + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat2.w + u_xlat1.x;
    vs_TEXCOORD3.z = (-u_xlat1.x);
    vs_TEXCOORD5.w = 0.0;
    vs_TEXCOORD5.xyz = u_xlat9.xyz;
    u_xlat9.xyz = (-u_xlat9.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD6.w = 0.0;
    vs_TEXCOORD6.xyz = u_xlat4.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].www + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * in_POSITION0.yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.zzz + u_xlat1.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.www + u_xlat1.xyz;
    vs_TEXCOORD7.xyz = u_xlat1.xyz * vec3(-1.0, -1.0, 1.0);
    vs_TEXCOORD7.w = 0.0;
    u_xlat1.xyz = in_TANGENT0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat0 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0 = inversesqrt(u_xlat0);
    u_xlat1.xyz = vec3(u_xlat0) * u_xlat1.xyz;
    vs_TEXCOORD8.xyz = u_xlat1.xyz;
    vs_TEXCOORD8.w = 0.0;
    u_xlat2.xyz = u_xlat1.yzx * u_xlat4.zxy;
    u_xlat1.xyz = u_xlat4.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
    u_xlat0 = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD9.xyz = vec3(u_xlat0) * u_xlat1.xyz;
    vs_TEXCOORD9.w = 0.0;
    u_xlat0 = u_xlat9.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat9.x + u_xlat0;
    vs_TEXCOORD10.w = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat9.z + u_xlat0;
    vs_TEXCOORD10.xyz = u_xlat9.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowPos[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	mediump float _CausticUVScale;
uniform 	mediump float _CausticSpeed;
uniform 	mediump vec4 _CausticColor;
uniform 	mediump float _CausticDepth;
uniform 	mediump float _CausticDistance;
uniform 	mediump float _CausticDistortionValue;
uniform 	mediump vec4 _DepthFoamMask_ST;
uniform 	mediump float _DepthFoamSpeed;
uniform 	mediump vec4 _DepthFoamColor;
uniform 	mediump float _DepthFoamExtent;
uniform 	mediump float _DepthFoamDistance;
uniform 	mediump float _DepthFoamSubdivision;
uniform 	mediump float _DepthFoamWidth;
uniform 	mediump float _DepthFoamPhaseScale;
uniform 	mediump float _DepthFoamCloseFadeOffset;
uniform 	mediump float _DepthFoamCloseFadeDistance;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _NormalMapScale;
uniform 	float _Normal01_U_Speed;
uniform 	float _Normal01_VSpeed;
uniform 	float _NormalMapBias;
uniform 	float _Normal02_U_Speed;
uniform 	float _Normal02_V_Speed;
uniform 	float _RefractionIntensity;
uniform 	float _OpacityByDepth;
uniform 	float _SpecularIntensity;
uniform 	vec3 _ES_MoonDirection;
uniform 	vec3 _ES_SunDirection;
uniform 	float _Gloss;
uniform 	float _ShoreTransparency;
uniform 	float _SpecularPower;
uniform 	vec4 _ShallowColor;
uniform 	float _ShoreFade;
uniform 	vec4 _DeepColor;
uniform 	float _DeepColorDepth;
uniform 	float _DeepColorFade;
uniform 	vec4 _DistortionIntensity;
uniform 	float _SSRDistortion;
uniform 	float _SSRDistortion_Shore;
uniform 	float _SSRIntensity;
uniform 	float _ReflectionIntensity;
uniform 	float _FresnelPower;
uniform 	float _ShoreReflectionFade;
uniform 	vec3 _ES_MainLightColor;
uniform 	mediump float _RippleTillingScale;
uniform 	mediump float _Ripple02Rotate;
uniform 	mediump float _ProjectUVScale;
uniform 	mediump float _CausticFade;
uniform 	mediump float _CausticFadeExponent;
uniform 	vec4 _ReflectionSkyCubeMap_HDR;
uniform lowp sampler2D _Normal01;
uniform lowp sampler2D _Normal02;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _SceneScaledBufferBeforTransParent;
uniform lowp samplerCube _ReflectionSkyCubeMap;
uniform lowp sampler2D _SSRTexture;
uniform lowp sampler2D _DepthFoamMask;
uniform lowp sampler2D _WaterRippleTex;
uniform lowp sampler2DShadow hlslcc_zcmp_CascadeShadowMapTexture;
uniform lowp sampler2D _CascadeShadowMapTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD8;
in highp vec4 vs_TEXCOORD9;
in highp vec4 vs_TEXCOORD10;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
lowp float u_xlat10_0;
int u_xlati0;
uint u_xlatu0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec3 u_xlat10_1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
lowp vec4 u_xlat10_2;
bvec4 u_xlatb2;
mediump vec3 u_xlat16_3;
vec4 u_xlat4;
mediump vec3 u_xlat16_4;
lowp vec4 u_xlat10_4;
vec3 u_xlat5;
lowp float u_xlat10_5;
vec4 u_xlat6;
vec4 u_xlat7;
mediump vec3 u_xlat16_7;
vec4 u_xlat8;
vec3 u_xlat9;
vec3 u_xlat10;
mediump vec3 u_xlat16_10;
vec3 u_xlat11;
vec3 u_xlat12;
lowp vec3 u_xlat10_12;
vec3 u_xlat13;
vec3 u_xlat14;
vec3 u_xlat15;
mediump float u_xlat16_16;
mediump vec2 u_xlat16_17;
float u_xlat18;
bool u_xlatb18;
vec3 u_xlat19;
mediump vec3 u_xlat16_21;
vec3 u_xlat23;
mediump float u_xlat16_23;
bool u_xlatb23;
vec3 u_xlat25;
bool u_xlatb25;
float u_xlat26;
vec2 u_xlat36;
mediump float u_xlat16_36;
lowp float u_xlat10_36;
float u_xlat37;
lowp float u_xlat10_37;
int u_xlati37;
uint u_xlatu37;
bool u_xlatb37;
float u_xlat41;
float u_xlat42;
lowp float u_xlat10_54;
float u_xlat55;
mediump float u_xlat16_55;
mediump float u_xlat16_57;
float u_xlat59;
mediump float u_xlat16_59;
bool u_xlatb59;
float u_xlat60;
bool u_xlatb60;
float u_xlat61;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0 = vs_TEXCOORD5.xzxz * vec4(_ProjectUVScale, _ProjectUVScale, _RippleTillingScale, _RippleTillingScale);
    u_xlat1.x = _Time.y * _Normal01_U_Speed + u_xlat0.x;
    u_xlat1.yz = _Time.yy * vec2(_Normal01_VSpeed, _Normal02_U_Speed) + u_xlat0.yx;
    u_xlat1.w = _Time.y * _Normal02_V_Speed + u_xlat0.y;
    u_xlat10_2.xyz = texture(_Normal01, u_xlat1.xy, _NormalMapBias).xyz;
    u_xlat16_2.xyz = u_xlat10_2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_3.xy = u_xlat16_2.xy * vec2(_NormalMapScale);
    u_xlat10_1.xyz = texture(_Normal02, u_xlat1.zw, _NormalMapBias).xyz;
    u_xlat16_2.w = -1.0;
    u_xlat16_4.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_2.wwz;
    u_xlat16_4.xy = u_xlat16_4.xy * vec2(_NormalMapScale);
    u_xlat16_3.z = -1.0;
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat0.x = float(1.0) / vs_TEXCOORD4.w;
    u_xlat1.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat18 = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat18 = _ZBufferParams.z * u_xlat18 + _ZBufferParams.w;
    u_xlat18 = float(1.0) / u_xlat18;
    u_xlat1.x = vs_TEXCOORD10.w + 9.99999975e-05;
    u_xlat1.x = (-u_xlat18) / u_xlat1.x;
    u_xlat19.xyz = u_xlat1.xxx * vs_TEXCOORD10.xyz;
    u_xlat5.xyz = vs_TEXCOORD10.xyz * u_xlat1.xxx + _WorldSpaceCameraPos.xyz;
    u_xlat6.xyz = (-u_xlat5.xyz) + vs_TEXCOORD5.xyz;
    u_xlat1.x = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlat6.xz = u_xlat16_3.xy * vec2(vec2(_RefractionIntensity, _RefractionIntensity));
    u_xlat0.x = u_xlat0.x * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat6.xz = u_xlat0.xx * u_xlat6.xz;
    u_xlat6.xz = u_xlat6.xz * vs_TEXCOORD4.ww;
    u_xlat0.x = u_xlat18 + (-vs_TEXCOORD4.w);
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat7.xy = u_xlat0.xx * u_xlat6.xz;
    u_xlat7.z = 0.0;
    u_xlat6.xzw = u_xlat7.xyz + vs_TEXCOORD4.xyw;
    u_xlat0.xy = u_xlat6.xz / u_xlat6.ww;
    u_xlat0.x = texture(_CameraDepthTexture, u_xlat0.xy).x;
    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat0.x = u_xlat0.x + (-vs_TEXCOORD4.w);
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat6.xzw = u_xlat0.xxx * u_xlat7.xyz + vs_TEXCOORD4.xyw;
    u_xlat0.xy = u_xlat6.xz / u_xlat6.ww;
    u_xlat0.x = texture(_CameraDepthTexture, u_xlat0.xy).x;
    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat0.x = u_xlat0.x + (-vs_TEXCOORD4.w);
    u_xlat18 = 0.100000001 / _OpacityByDepth;
    u_xlat18 = u_xlat18 * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat16_4.xz = u_xlat16_3.xy;
    u_xlat16_4.y = 1.0;
    u_xlat16_59 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);
    u_xlat16_59 = inversesqrt(u_xlat16_59);
    u_xlat16_7.xyz = u_xlat16_4.xyz * vec3(u_xlat16_59);
#ifdef UNITY_ADRENO_ES3
    u_xlatb59 = !!(0.0>=_ES_MoonDirection.y);
#else
    u_xlatb59 = 0.0>=_ES_MoonDirection.y;
#endif
    u_xlat8.xyz = (bool(u_xlatb59)) ? _ES_SunDirection.xyz : _ES_MoonDirection.xyz;
    u_xlat9.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat59 = dot(u_xlat9.xyz, u_xlat9.xyz);
    u_xlat60 = inversesqrt(u_xlat59);
    u_xlat10.xyz = vec3(u_xlat60) * u_xlat9.xyz;
    u_xlat8.xyz = u_xlat9.xyz * vec3(u_xlat60) + u_xlat8.xyz;
    u_xlat60 = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat60 = inversesqrt(u_xlat60);
    u_xlat8.xyz = vec3(u_xlat60) * u_xlat8.xyz;
    u_xlat60 = dot(u_xlat16_7.xyz, u_xlat8.xyz);
    u_xlat25.x = _Gloss * 128.0;
    u_xlat60 = max(u_xlat60, 9.99999975e-05);
    u_xlat60 = log2(u_xlat60);
    u_xlat60 = u_xlat60 * u_xlat25.x;
    u_xlat60 = exp2(u_xlat60);
    u_xlat60 = u_xlat60 * _SpecularIntensity;
    u_xlat60 = max(u_xlat60, 0.0);
    u_xlat60 = min(u_xlat60, 16.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb25 = !!(_ES_MoonDirection.y>=9.99999975e-05);
#else
    u_xlatb25 = _ES_MoonDirection.y>=9.99999975e-05;
#endif
    u_xlat25.x = u_xlatb25 ? 1.0 : float(0.0);
    u_xlat61 = _ES_MoonDirection.y + -1.0;
    u_xlat25.x = u_xlat25.x * u_xlat61 + 1.0;
    u_xlat61 = float(1.0) / _ShoreTransparency;
    u_xlat8.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat8.xyz = u_xlat8.xxx * vs_TEXCOORD6.xyz;
    u_xlat8.x = dot(u_xlat10.xyz, u_xlat8.xyz);
    u_xlat8.x = (-u_xlat8.x) + 1.0;
    u_xlat8.x = max(u_xlat8.x, 9.99999975e-05);
    u_xlat8.x = log2(u_xlat8.x);
    u_xlat26 = u_xlat8.x * _SpecularPower;
    u_xlat26 = exp2(u_xlat26);
    u_xlat9.xyz = u_xlat25.xxx * _LightColor0.xyz;
    u_xlat9.xyz = vec3(u_xlat60) * u_xlat9.xyz;
    u_xlat60 = u_xlat0.x + -1.0;
    u_xlat60 = u_xlat61 * u_xlat60;
    u_xlat60 = u_xlat60 * 0.100000001;
#ifdef UNITY_ADRENO_ES3
    u_xlat60 = min(max(u_xlat60, 0.0), 1.0);
#else
    u_xlat60 = clamp(u_xlat60, 0.0, 1.0);
#endif
    u_xlat9.xyz = vec3(u_xlat60) * u_xlat9.xyz;
    u_xlat60 = u_xlat0.x * u_xlat61;
#ifdef UNITY_ADRENO_ES3
    u_xlat60 = min(max(u_xlat60, 0.0), 1.0);
#else
    u_xlat60 = clamp(u_xlat60, 0.0, 1.0);
#endif
    u_xlat60 = max(u_xlat60, 9.99999975e-05);
    u_xlat60 = log2(u_xlat60);
    u_xlat60 = u_xlat60 * _ShoreFade;
    u_xlat60 = exp2(u_xlat60);
    u_xlat11.xyz = _ShallowColor.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat11.xyz = vec3(u_xlat60) * u_xlat11.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat6.xz = u_xlat6.xz / vs_TEXCOORD4.ww;
    u_xlat10_12.xyz = texture(_SceneScaledBufferBeforTransParent, u_xlat6.xz).xyz;
    u_xlat6.x = u_xlat1.x * _CausticDistortionValue;
    u_xlat6.xz = u_xlat6.xx * u_xlat16_7.xz;
    u_xlat7.z = _Time.y * _CausticSpeed;
    u_xlat6.xz = u_xlat5.xz * vec2(_CausticUVScale) + u_xlat6.xz;
    u_xlat13.x = _Normal01_U_Speed * 25.0;
    u_xlat13.y = _Normal01_VSpeed * 25.0;
    u_xlat7.xy = u_xlat7.zz * u_xlat13.xy + u_xlat6.xz;
    u_xlat13.x = dot(u_xlat7.xyz, vec3(-2.0, 3.0, 1.0));
    u_xlat13.y = dot(u_xlat7.xyz, vec3(-1.0, -2.0, 2.0));
    u_xlat13.z = dot(u_xlat7.xzy, vec3(2.0, 2.0, 1.0));
    u_xlat7.xyz = u_xlat13.xyz * vec3(0.400000006, 0.400000006, 0.400000006);
    u_xlat14.x = dot(u_xlat7.xyz, vec3(-2.0, 3.0, 1.0));
    u_xlat14.y = dot(u_xlat7.xyz, vec3(-1.0, -2.0, 2.0));
    u_xlat14.z = dot(u_xlat7.xzy, vec3(2.0, 2.0, 1.0));
    u_xlat7.xyz = u_xlat14.xyz * vec3(0.300000012, 0.300000012, 0.300000012);
    u_xlat6.x = dot(u_xlat7.xyz, vec3(-2.0, 3.0, 1.0));
    u_xlat6.z = dot(u_xlat7.xyz, vec3(-1.0, -2.0, 2.0));
    u_xlat7.x = dot(u_xlat7.xzy, vec3(2.0, 2.0, 1.0));
    u_xlat25.xyz = fract(u_xlat13.xyz);
    u_xlat25.xyz = (-u_xlat25.xyz) + vec3(0.5, 0.5, 0.5);
    u_xlat25.x = dot(u_xlat25.xyz, u_xlat25.xyz);
    u_xlat13.xyz = fract(u_xlat14.xyz);
    u_xlat13.xyz = (-u_xlat13.xyz) + vec3(0.5, 0.5, 0.5);
    u_xlat25.y = dot(u_xlat13.xyz, u_xlat13.xyz);
    u_xlat25.xy = sqrt(u_xlat25.xy);
    u_xlat25.x = min(u_xlat25.y, u_xlat25.x);
    u_xlat13.xy = fract(u_xlat6.xz);
    u_xlat13.z = fract(u_xlat7.x);
    u_xlat7.xzw = (-u_xlat13.xyz) + vec3(0.5, 0.5, 0.5);
    u_xlat6.x = dot(u_xlat7.xzw, u_xlat7.xzw);
    u_xlat6.x = sqrt(u_xlat6.x);
    u_xlat6.x = min(u_xlat6.x, u_xlat25.x);
    u_xlat6.x = log2(u_xlat6.x);
    u_xlat6.x = u_xlat6.x * 7.0;
    u_xlat6.x = exp2(u_xlat6.x);
    u_xlat6.x = u_xlat6.x * 25.0;
    u_xlat16_4.xy = vec2(float(_CausticDepth) + float(9.99999975e-05), float(_CausticDistance) + float(9.99999975e-05));
    u_xlat42 = u_xlat6.y / u_xlat16_4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat42 = min(max(u_xlat42, 0.0), 1.0);
#else
    u_xlat42 = clamp(u_xlat42, 0.0, 1.0);
#endif
    u_xlat19.x = dot(u_xlat19.xyz, u_xlat19.xyz);
    u_xlat19.x = sqrt(u_xlat19.x);
    u_xlat19.x = u_xlat19.x / u_xlat16_4.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat19.x = min(max(u_xlat19.x, 0.0), 1.0);
#else
    u_xlat19.x = clamp(u_xlat19.x, 0.0, 1.0);
#endif
    u_xlat19.x = (-u_xlat19.x) + 1.0;
    u_xlat19.x = u_xlat19.x * u_xlat42;
    u_xlat7.xyz = u_xlat5.xyz + (-unity_ShadowSplitSpheres[0].xyz);
    u_xlat13.xyz = u_xlat5.xyz + (-unity_ShadowSplitSpheres[1].xyz);
    u_xlat14.xyz = u_xlat5.xyz + (-unity_ShadowSplitSpheres[2].xyz);
    u_xlat15.xyz = u_xlat5.xyz + (-unity_ShadowSplitSpheres[3].xyz);
    u_xlat2.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat2.y = dot(u_xlat13.xyz, u_xlat13.xyz);
    u_xlat2.z = dot(u_xlat14.xyz, u_xlat14.xyz);
    u_xlat2.w = dot(u_xlat15.xyz, u_xlat15.xyz);
    u_xlatb2 = lessThan(u_xlat2, unity_ShadowSplitSqRadii);
    u_xlat2 = mix(vec4(0.0, 0.0, 0.0, 0.0), vec4(1.0, 1.0, 1.0, 1.0), vec4(u_xlatb2));
    u_xlat16_57 = u_xlat2.y + u_xlat2.x;
    u_xlat16_4.x = u_xlat2.z + u_xlat16_57;
    u_xlat7.x = -0.0;
    u_xlat7.y = (-u_xlat2.x);
    u_xlat7.z = (-u_xlat16_57);
    u_xlat7.w = (-u_xlat16_4.x);
    u_xlat2 = u_xlat2 + u_xlat7;
    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat16_57 = dot(u_xlat2, vec4(1.0, 1.0, 1.0, 1.0));
#ifdef UNITY_ADRENO_ES3
    u_xlatb37 = !!(u_xlat16_57>=0.5);
#else
    u_xlatb37 = u_xlat16_57>=0.5;
#endif
    if(u_xlatb37){
        u_xlat37 = dot(u_xlat2.yzw, vec3(1.0, 2.0, 3.0));
        u_xlat37 = min(u_xlat37, 3.0);
        u_xlatu37 = uint(u_xlat37);
        u_xlat5.xyz = u_xlat5.xyz + (-unity_ShadowPos[int(u_xlatu37)].xyz);
        u_xlati37 = int(u_xlatu37) << 2;
        u_xlat7.xyz = u_xlat5.yyy * hlslcc_mtx4x4unity_WorldToShadow[(u_xlati37 + 1)].xyz;
        u_xlat7.xyz = hlslcc_mtx4x4unity_WorldToShadow[u_xlati37].xyz * u_xlat5.xxx + u_xlat7.xyz;
        u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToShadow[(u_xlati37 + 2)].xyz * u_xlat5.zzz + u_xlat7.xyz;
        u_xlat5.xyz = u_xlat5.xyz + hlslcc_mtx4x4unity_WorldToShadow[(u_xlati37 + 3)].xyz;
        vec3 txVec0 = vec3(u_xlat5.xy,u_xlat5.z);
        u_xlat10_37 = textureLod(hlslcc_zcmp_CascadeShadowMapTexture, txVec0, 0.0);
        u_xlat16_55 = (-_LightShadowData.x) + 1.0;
        u_xlat37 = u_xlat10_37 * u_xlat16_55 + _LightShadowData.x;
    } else {
        u_xlat37 = 1.0;
    //ENDIF
    }
    u_xlat19.x = u_xlat37 * u_xlat19.x;
    u_xlat16_4.xyz = _LightColor0.xyz * _CausticColor.xyz;
    u_xlat16_4.xyz = u_xlat6.xxx * u_xlat16_4.xyz;
    u_xlat16_4.xyz = u_xlat19.xxx * u_xlat16_4.xyz;
    u_xlat16_57 = _CausticFade + 9.99999975e-05;
    u_xlat1.x = u_xlat1.x / u_xlat16_57;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.x = log2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _CausticFadeExponent;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat1.x = (-u_xlat1.x) + 1.0;
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat1.xxx + vec3(1.0, 1.0, 1.0);
    u_xlat16_1.xyz = u_xlat16_4.xyz * u_xlat10_12.xyz;
    u_xlat5.xyz = u_xlat16_1.xyz * u_xlat11.xyz;
    u_xlat55 = 0.100000001 / _DeepColorDepth;
    u_xlat55 = u_xlat0.x * u_xlat55;
#ifdef UNITY_ADRENO_ES3
    u_xlat55 = min(max(u_xlat55, 0.0), 1.0);
#else
    u_xlat55 = clamp(u_xlat55, 0.0, 1.0);
#endif
    u_xlat55 = max(u_xlat55, 9.99999975e-05);
    u_xlat55 = log2(u_xlat55);
    u_xlat55 = u_xlat55 * _DeepColorFade;
    u_xlat55 = exp2(u_xlat55);
    u_xlat7.xyz = (-u_xlat11.xyz) * u_xlat16_1.xyz + _DeepColor.xyz;
    u_xlat7.xyz = vec3(u_xlat55) * u_xlat7.xyz + u_xlat5.xyz;
    u_xlat12.xyz = u_xlat16_3.xyz * _DistortionIntensity.xyz;
    u_xlat13.x = vs_TEXCOORD8.x;
    u_xlat13.y = vs_TEXCOORD9.x;
    u_xlat13.z = vs_TEXCOORD6.x;
    u_xlat13.x = dot(u_xlat13.xyz, u_xlat12.xyz);
    u_xlat14.x = vs_TEXCOORD8.y;
    u_xlat14.y = vs_TEXCOORD9.y;
    u_xlat14.z = vs_TEXCOORD6.y;
    u_xlat13.y = dot(u_xlat14.xyz, u_xlat12.xyz);
    u_xlat14.x = vs_TEXCOORD8.z;
    u_xlat14.y = vs_TEXCOORD9.z;
    u_xlat14.z = vs_TEXCOORD6.z;
    u_xlat13.z = dot(u_xlat14.xyz, u_xlat12.xyz);
    u_xlat55 = dot(u_xlat13.xyz, u_xlat13.xyz);
    u_xlat55 = inversesqrt(u_xlat55);
    u_xlat13.xyz = vec3(u_xlat55) * u_xlat13.xyz;
    u_xlat55 = dot((-u_xlat10.xyz), u_xlat13.xyz);
    u_xlat55 = u_xlat55 + u_xlat55;
    u_xlat10.xyz = u_xlat13.xyz * (-vec3(u_xlat55)) + (-u_xlat10.xyz);
    u_xlat10_2 = textureLod(_ReflectionSkyCubeMap, u_xlat10.xyz, 0.0);
    u_xlat16_3.x = u_xlat10_2.w + -1.0;
    u_xlat16_3.x = _ReflectionSkyCubeMap_HDR.w * u_xlat16_3.x + 1.0;
    u_xlat16_3.x = log2(u_xlat16_3.x);
    u_xlat16_3.x = u_xlat16_3.x * _ReflectionSkyCubeMap_HDR.y;
    u_xlat16_3.x = exp2(u_xlat16_3.x);
    u_xlat16_3.x = u_xlat16_3.x * _ReflectionSkyCubeMap_HDR.x;
    u_xlat16_21.xyz = u_xlat10_2.xyz * u_xlat16_3.xxx;
    u_xlat6.xz = u_xlat12.xy * vec2(_SSRDistortion);
    u_xlat55 = float(1.0) / _SSRDistortion_Shore;
    u_xlat55 = u_xlat0.x * u_xlat55;
#ifdef UNITY_ADRENO_ES3
    u_xlat55 = min(max(u_xlat55, 0.0), 1.0);
#else
    u_xlat55 = clamp(u_xlat55, 0.0, 1.0);
#endif
    u_xlat6.xz = vec2(u_xlat55) * u_xlat6.xz;
    u_xlat6.xz = u_xlat6.xz * vs_TEXCOORD4.ww + vs_TEXCOORD4.xy;
    u_xlat6.xz = u_xlat6.xz / vs_TEXCOORD4.ww;
    u_xlat10_4 = texture(_SSRTexture, u_xlat6.xz).wxyz;
    u_xlat16_10.xyz = (-u_xlat16_3.xxx) * u_xlat10_2.xyz + u_xlat10_4.yzw;
    u_xlat10.xyz = u_xlat16_10.xyz * vec3(vec3(_SSRIntensity, _SSRIntensity, _SSRIntensity));
    u_xlat16_4.x = u_xlat10_4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat10.xyz = u_xlat16_4.xxx * u_xlat10.xyz + u_xlat16_21.xyz;
    u_xlat55 = u_xlat8.x * _FresnelPower;
    u_xlat55 = exp2(u_xlat55);
    u_xlat55 = u_xlat55 * _ReflectionIntensity;
    u_xlat6.x = float(1.0) / _ShoreReflectionFade;
    u_xlat0.x = u_xlat0.x * u_xlat6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x * u_xlat55;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat8.xzw = (-u_xlat7.xyz) + u_xlat10.xyz;
    u_xlat7.xyz = u_xlat0.xxx * u_xlat8.xzw + u_xlat7.xyz;
    u_xlat1.xyz = (-u_xlat11.xyz) * u_xlat16_1.xyz + u_xlat7.xyz;
    u_xlat1.xyz = vec3(u_xlat60) * u_xlat1.xyz + u_xlat5.xyz;
    u_xlat0.x = (-vs_TEXCOORD5.y) * _WorldSpaceLightPos0.w + _WorldSpaceLightPos0.y;
    u_xlat16_3.x = max(u_xlat0.x, 0.0);
    u_xlat5.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowSplitSpheres[0].xyz);
    u_xlat6.xzw = vs_TEXCOORD5.xyz + (-unity_ShadowSplitSpheres[1].xyz);
    u_xlat7.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowSplitSpheres[2].xyz);
    u_xlat8.xzw = vs_TEXCOORD5.xyz + (-unity_ShadowSplitSpheres[3].xyz);
    u_xlat2.x = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat2.y = dot(u_xlat6.xzw, u_xlat6.xzw);
    u_xlat2.z = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat2.w = dot(u_xlat8.xzw, u_xlat8.xzw);
    u_xlatb2 = lessThan(u_xlat2, unity_ShadowSplitSqRadii);
    u_xlat2 = mix(vec4(0.0, 0.0, 0.0, 0.0), vec4(1.0, 1.0, 1.0, 1.0), vec4(u_xlatb2));
    u_xlat16_21.x = u_xlat2.y + u_xlat2.x;
    u_xlat16_21.y = u_xlat2.z + u_xlat16_21.x;
    u_xlat4.x = -0.0;
    u_xlat4.y = (-u_xlat2.x);
    u_xlat4.zw = (-u_xlat16_21.xy);
    u_xlat2 = u_xlat2 + u_xlat4;
    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat16_21.x = dot(u_xlat2, vec4(1.0, 1.0, 1.0, 1.0));
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(u_xlat16_21.x>=0.5);
#else
    u_xlatb0.x = u_xlat16_21.x>=0.5;
#endif
    if(u_xlatb0.x){
        u_xlat0.x = dot(u_xlat2.yzw, vec3(1.0, 2.0, 3.0));
        u_xlat0.x = min(u_xlat0.x, 3.0);
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat5.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowPos[int(u_xlatu0)].xyz);
        u_xlati0 = int(u_xlatu0) << 2;
        u_xlat6.xzw = u_xlat5.yyy * hlslcc_mtx4x4unity_WorldToShadow[(u_xlati0 + 1)].xyz;
        u_xlat6.xzw = hlslcc_mtx4x4unity_WorldToShadow[u_xlati0].xyz * u_xlat5.xxx + u_xlat6.xzw;
        u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToShadow[(u_xlati0 + 2)].xyz * u_xlat5.zzz + u_xlat6.xzw;
        u_xlat5.xyz = u_xlat5.xyz + hlslcc_mtx4x4unity_WorldToShadow[(u_xlati0 + 3)].xyz;
        vec3 txVec1 = vec3(u_xlat5.xy,u_xlat5.z);
        u_xlat10_0 = textureLod(hlslcc_zcmp_CascadeShadowMapTexture, txVec1, 0.0);
        u_xlat16_55 = (-_LightShadowData.x) + 1.0;
        u_xlat0.x = u_xlat10_0 * u_xlat16_55 + _LightShadowData.x;
    } else {
        u_xlat0.x = 1.0;
    //ENDIF
    }
    u_xlat16_3.xyz = u_xlat16_3.xxx * _LightColor0.xyz;
    u_xlat5.xyz = u_xlat16_3.xyz * u_xlat0.xxx + vs_TEXCOORD1.xyz;
    u_xlat16_3.xyz = u_xlat5.xyz * vec3(0.300000012, 0.300000012, 0.300000012) + vec3(0.699999988, 0.699999988, 0.699999988);
    u_xlat0.x = sqrt(u_xlat59);
    u_xlat16_57 = u_xlat0.x + (-_DepthFoamCloseFadeOffset);
    u_xlat16_57 = u_xlat16_57 / _DepthFoamCloseFadeDistance;
    u_xlat16_16 = vs_COLOR0.x * _DepthFoamExtent;
    u_xlat55 = max(u_xlat6.y, 0.0);
    u_xlat55 = min(u_xlat16_16, u_xlat55);
    u_xlat16_16 = _DepthFoamExtent * vs_COLOR0.x + 9.99999975e-05;
    u_xlat55 = u_xlat55 / u_xlat16_16;
    u_xlat55 = (-u_xlat55) + 1.0;
    u_xlat5.xy = vec2(_Time.y * _DepthFoamMask_ST.z, _Time.y * _DepthFoamMask_ST.w);
    u_xlat5.xy = fract(u_xlat5.xy);
    u_xlat5.xy = _DepthFoamMask_ST.xy * vs_TEXCOORD5.xz + u_xlat5.xy;
    u_xlat10_5 = texture(_DepthFoamMask, u_xlat5.xy, -1.0).x;
    u_xlat23.x = vs_TEXCOORD5.z + vs_TEXCOORD5.x;
    u_xlat23.x = u_xlat23.x * _DepthFoamPhaseScale;
    u_xlat23.x = _DepthFoamSpeed * _Time.y + u_xlat23.x;
    u_xlat41 = (-u_xlat55) + 1.0;
    u_xlat16_16 = _DepthFoamSubdivision * u_xlat55 + u_xlat23.x;
    u_xlat16_16 = sin(u_xlat16_16);
    u_xlat16_16 = _DepthFoamWidth * u_xlat55 + u_xlat16_16;
    u_xlat16_23 = u_xlat10_5 * 2.0 + -1.0;
    u_xlat23.x = u_xlat16_23 + u_xlat16_16;
#ifdef UNITY_ADRENO_ES3
    u_xlatb23 = !!(u_xlat23.x>=u_xlat41);
#else
    u_xlatb23 = u_xlat23.x>=u_xlat41;
#endif
    u_xlat23.x = u_xlatb23 ? 1.0 : float(0.0);
    u_xlat5.x = u_xlat23.x * u_xlat10_5;
    u_xlat16_16 = _DepthFoamDistance + 9.99999975e-05;
    u_xlat16_16 = u_xlat0.x / u_xlat16_16;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat16_0 = (-u_xlat16_16) + 1.0;
    u_xlat16_16 = vs_COLOR0.y * _DepthFoamColor.w;
    u_xlat16_57 = u_xlat16_57 * u_xlat16_16;
    u_xlat16_57 = u_xlat5.x * u_xlat16_57;
    u_xlat16_57 = u_xlat55 * u_xlat16_57;
    u_xlat16_57 = u_xlat16_0 * u_xlat16_57;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_57 = min(max(u_xlat16_57, 0.0), 1.0);
#else
    u_xlat16_57 = clamp(u_xlat16_57, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = _DepthFoamColor.xyz * u_xlat16_3.xyz + (-u_xlat1.xyz);
    u_xlat16_3.xyz = vec3(u_xlat16_57) * u_xlat16_3.xyz + u_xlat1.xyz;
    u_xlat16_0 = max(_LightColor0.w, 0.5);
    u_xlat1.xyz = u_xlat9.xyz * vec3(u_xlat26) + u_xlat16_3.xyz;
    u_xlat36.xy = fract(u_xlat0.zw);
    u_xlat16_3.xy = u_xlat36.xy * vec2(1.14999998, 1.14999998);
    u_xlat16_16 = sin(_Ripple02Rotate);
    u_xlat16_17.x = cos(_Ripple02Rotate);
    u_xlat5.x = (-u_xlat16_16);
    u_xlat16_17.y = u_xlat16_16;
    u_xlat6.x = dot(u_xlat16_3.xy, u_xlat16_17.xy);
    u_xlat5.y = u_xlat16_17.x;
    u_xlat6.y = dot(u_xlat16_3.xy, u_xlat5.xy);
    u_xlat10_36 = texture(_WaterRippleTex, u_xlat36.xy).x;
    u_xlat10_54 = texture(_WaterRippleTex, u_xlat6.xy).x;
    u_xlat16_36 = u_xlat10_54 + u_xlat10_36;
    u_xlat36.x = u_xlat16_36 * u_xlat18;
    u_xlat5.xyz = _ES_MainLightColor.xyz * vec3(u_xlat16_0) + (-u_xlat1.xyz);
    u_xlat0.xzw = u_xlat36.xxx * u_xlat5.xyz + u_xlat1.xyz;
    u_xlat1.w = u_xlat18 * vs_COLOR0.w;
    u_xlat5.xyz = vs_TEXCOORD5.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat6.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat6.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat6.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat18 = dot(u_xlat5.xyz, u_xlat6.xyz);
    u_xlat5.x = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat5.x = sqrt(u_xlat5.x);
    u_xlat23.y = u_xlat5.x * _HeigtFogParams.y;
    u_xlat59 = u_xlat5.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat59 = min(max(u_xlat59, 0.0), 1.0);
#else
    u_xlat59 = clamp(u_xlat59, 0.0, 1.0);
#endif
    u_xlat6.x = (-u_xlat59) + 2.0;
    u_xlat59 = u_xlat59 * u_xlat6.x;
    u_xlat6.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!((-u_xlat18)>=u_xlat6.x);
#else
    u_xlatb18 = (-u_xlat18)>=u_xlat6.x;
#endif
    u_xlat6.x = u_xlat59 * _HeigtFogColDelta.w;
    u_xlat18 = (u_xlatb18) ? u_xlat6.x : u_xlat59;
    u_xlat18 = log2(u_xlat18);
    u_xlat18 = u_xlat18 * unity_FogColor.w;
    u_xlat18 = exp2(u_xlat18);
    u_xlat18 = min(u_xlat18, _HeigtFogColBase.w);
    u_xlat59 = vs_TEXCOORD5.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat59 = min(max(u_xlat59, 0.0), 1.0);
#else
    u_xlat59 = clamp(u_xlat59, 0.0, 1.0);
#endif
    u_xlat16_3.x = (-u_xlat59) + 2.0;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat59;
    u_xlat6.xyz = u_xlat16_3.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat59 = u_xlat5.x + (-_HeigtFogRamp.w);
    u_xlat59 = u_xlat59 * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat59 = min(max(u_xlat59, 0.0), 1.0);
#else
    u_xlat59 = clamp(u_xlat59, 0.0, 1.0);
#endif
    u_xlat7.xyz = (-u_xlat6.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat6.xyz = vec3(u_xlat59) * u_xlat7.xyz + u_xlat6.xyz;
    u_xlat59 = u_xlat5.y * _HeigtFogParams.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb60 = !!(0.00999999978<abs(u_xlat59));
#else
    u_xlatb60 = 0.00999999978<abs(u_xlat59);
#endif
    u_xlat7.x = u_xlat59 * -1.44269502;
    u_xlat7.x = exp2(u_xlat7.x);
    u_xlat7.x = (-u_xlat7.x) + 1.0;
    u_xlat59 = u_xlat7.x / u_xlat59;
    u_xlat16_3.x = (u_xlatb60) ? u_xlat59 : 1.0;
    u_xlat23.x = u_xlat5.y * _HeigtFogParams2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb59 = !!(0.00999999978<abs(u_xlat23.x));
#else
    u_xlatb59 = 0.00999999978<abs(u_xlat23.x);
#endif
    u_xlat60 = u_xlat23.x * -1.44269502;
    u_xlat60 = exp2(u_xlat60);
    u_xlat60 = (-u_xlat60) + 1.0;
    u_xlat23.x = u_xlat60 / u_xlat23.x;
    u_xlat16_3.y = (u_xlatb59) ? u_xlat23.x : 1.0;
    u_xlat23.x = u_xlat5.x * _HeigtFogParams2.y;
    u_xlat16_3.xy = u_xlat16_3.xy * u_xlat23.yx;
    u_xlat16_3.x = exp2((-u_xlat16_3.x));
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat16_21.x = exp2((-u_xlat16_3.y));
    u_xlat16_3.y = (-u_xlat16_21.x) + 1.0;
    u_xlat16_3.xy = max(u_xlat16_3.xy, vec2(0.0, 0.0));
    u_xlat16_3.x = u_xlat16_3.y + u_xlat16_3.x;
    u_xlat5.x = u_xlat5.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat16_21.x = (-u_xlat5.x) + 2.0;
    u_xlat16_21.x = u_xlat16_21.x * u_xlat5.x;
    u_xlat5.x = u_xlat16_21.x * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat5.x = u_xlat5.x + 1.0;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat5.x;
    u_xlat5.x = min(u_xlat16_3.x, _HeigtFogColBase.w);
    u_xlat23.x = vs_TEXCOORD5.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat23.x = min(max(u_xlat23.x, 0.0), 1.0);
#else
    u_xlat23.x = clamp(u_xlat23.x, 0.0, 1.0);
#endif
    u_xlat23.xyz = u_xlat23.xxx * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    u_xlat6.xyz = vec3(u_xlat18) * u_xlat6.xyz;
    u_xlat60 = (-u_xlat5.x) + 1.0;
    u_xlat6.xyz = vec3(u_xlat60) * u_xlat6.xyz;
    u_xlat5.xyz = u_xlat23.xyz * u_xlat5.xxx + u_xlat6.xyz;
    u_xlat18 = (-u_xlat18) + 1.0;
    u_xlat18 = u_xlat60 * u_xlat18;
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat0.xzw + u_xlat5.xyz;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "MSAA_INTERPOLATION" "MHY_SHADER_MIDDLE" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	mediump float _MHYZBias;
uniform 	vec4 hlslcc_mtx4x4_mhyJitteredVP[4];
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
out highp vec4 vs_TEXCOORD9;
out highp vec4 vs_TEXCOORD10;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
vec4 u_xlat4;
bool u_xlatb4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
mediump vec4 u_xlat16_6;
vec4 u_xlat7;
mediump vec3 u_xlat16_8;
float u_xlat11;
vec3 u_xlat13;
mediump float u_xlat16_14;
float u_xlat27;
bool u_xlatb27;
float u_xlat29;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4_mhyJitteredVP[1];
    u_xlat2 = hlslcc_mtx4x4_mhyJitteredVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4_mhyJitteredVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4_mhyJitteredVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat3.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    u_xlat3.xyw = u_xlat2.xyw;
    gl_Position = u_xlat3;
    vs_COLOR0 = in_COLOR0;
    u_xlat2.xyw = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat27 = u_xlat2.y * _HeigtFogParams.x;
    u_xlat4.x = u_xlat27 * -1.44269502;
    u_xlat4.x = exp2(u_xlat4.x);
    u_xlat4.x = (-u_xlat4.x) + 1.0;
    u_xlat4.x = u_xlat4.x / u_xlat27;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(0.00999999978<abs(u_xlat27));
#else
    u_xlatb27 = 0.00999999978<abs(u_xlat27);
#endif
    u_xlat16_5.x = (u_xlatb27) ? u_xlat4.x : 1.0;
    u_xlat27 = dot(u_xlat2.xyw, u_xlat2.xyw);
    u_xlat27 = sqrt(u_xlat27);
    u_xlat4.x = u_xlat27 * _HeigtFogParams.y;
    u_xlat16_5.x = u_xlat4.x * u_xlat16_5.x;
    u_xlat16_5.x = exp2((-u_xlat16_5.x));
    u_xlat16_5.x = (-u_xlat16_5.x) + 1.0;
    u_xlat4.x = u_xlat2.y * _HeigtFogParams2.x;
    u_xlat13.x = u_xlat4.x * -1.44269502;
    u_xlat13.x = exp2(u_xlat13.x);
    u_xlat13.x = (-u_xlat13.x) + 1.0;
    u_xlat13.x = u_xlat13.x / u_xlat4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(0.00999999978<abs(u_xlat4.x));
#else
    u_xlatb4 = 0.00999999978<abs(u_xlat4.x);
#endif
    u_xlat16_14 = (u_xlatb4) ? u_xlat13.x : 1.0;
    u_xlat4.x = u_xlat27 * _HeigtFogParams2.y;
    u_xlat16_14 = u_xlat4.x * u_xlat16_14;
    u_xlat16_14 = exp2((-u_xlat16_14));
    u_xlat16_5.y = (-u_xlat16_14) + 1.0;
    u_xlat16_5.xy = max(u_xlat16_5.xy, vec2(0.0, 0.0));
    u_xlat16_5.x = u_xlat16_5.y + u_xlat16_5.x;
    u_xlat4.x = u_xlat27 * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat16_14 = (-u_xlat4.x) + 2.0;
    u_xlat16_14 = u_xlat4.x * u_xlat16_14;
    u_xlat4.x = u_xlat16_14 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat4.x = u_xlat4.x + 1.0;
    u_xlat16_5.x = u_xlat4.x * u_xlat16_5.x;
    u_xlat4.x = min(u_xlat16_5.x, _HeigtFogColBase.w);
    u_xlat13.x = (-u_xlat4.x) + 1.0;
    u_xlat6.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat6.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat6.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat2.x = dot(u_xlat2.xyw, u_xlat6.xyz);
    u_xlat11 = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!((-u_xlat2.x)>=u_xlat11);
#else
    u_xlatb2 = (-u_xlat2.x)>=u_xlat11;
#endif
    u_xlat11 = u_xlat27 * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat11 = min(max(u_xlat11, 0.0), 1.0);
#else
    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
#endif
    u_xlat27 = u_xlat27 + (-_HeigtFogRamp.w);
    u_xlat27 = u_xlat27 * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
    u_xlat29 = (-u_xlat11) + 2.0;
    u_xlat11 = u_xlat29 * u_xlat11;
    u_xlat29 = u_xlat11 * _HeigtFogColDelta.w;
    u_xlat2.x = (u_xlatb2) ? u_xlat29 : u_xlat11;
    u_xlat2.x = log2(u_xlat2.x);
    u_xlat2.x = u_xlat2.x * unity_FogColor.w;
    u_xlat2.x = exp2(u_xlat2.x);
    u_xlat2.x = min(u_xlat2.x, _HeigtFogColBase.w);
    u_xlat11 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat11 = min(max(u_xlat11, 0.0), 1.0);
#else
    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
#endif
    u_xlat16_5.x = (-u_xlat11) + 2.0;
    u_xlat16_5.x = u_xlat11 * u_xlat16_5.x;
    u_xlat6.xyz = u_xlat16_5.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat7.xyz = (-u_xlat6.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat6.xyz = vec3(u_xlat27) * u_xlat7.xyz + u_xlat6.xyz;
    u_xlat6.xyz = u_xlat2.xxx * u_xlat6.xyz;
    u_xlat27 = (-u_xlat2.x) + 1.0;
    vs_TEXCOORD0.w = u_xlat13.x * u_xlat27;
    u_xlat2.xyw = u_xlat13.xxx * u_xlat6.xyz;
    u_xlat27 = u_xlat0.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
    u_xlat13.xyz = vec3(u_xlat27) * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    vs_TEXCOORD0.xyz = u_xlat13.xyz * u_xlat4.xxx + u_xlat2.xyw;
    u_xlat4.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat4.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat4.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat27 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat4.xyz = vec3(u_xlat27) * u_xlat4.xyz;
    u_xlat16_5.x = u_xlat4.y * u_xlat4.y;
    u_xlat16_5.x = u_xlat4.x * u_xlat4.x + (-u_xlat16_5.x);
    u_xlat16_6 = u_xlat4.yzzx * u_xlat4.xyzz;
    u_xlat16_8.x = dot(unity_SHBr, u_xlat16_6);
    u_xlat16_8.y = dot(unity_SHBg, u_xlat16_6);
    u_xlat16_8.z = dot(unity_SHBb, u_xlat16_6);
    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_8.xyz;
    u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat4.w = 1.0;
    u_xlat16_8.x = dot(unity_SHAr, u_xlat4);
    u_xlat16_8.y = dot(unity_SHAg, u_xlat4);
    u_xlat16_8.z = dot(unity_SHAb, u_xlat4);
    u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_8.xyz;
    vs_TEXCOORD1.xyz = u_xlat16_5.xyz;
    vs_TEXCOORD1.w = 1.0;
    u_xlat27 = u_xlat3.y * _ProjectionParams.x;
    u_xlat7.w = u_xlat27 * 0.5;
    u_xlat7.xz = u_xlat3.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.z = u_xlat2.z;
    u_xlat3.xy = u_xlat7.zz + u_xlat7.xw;
    vs_TEXCOORD2 = u_xlat3;
    vs_TEXCOORD4.xyw = u_xlat3.xyw;
    u_xlat27 = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat27 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat27;
    u_xlat27 = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat27;
    u_xlat27 = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat27;
    vs_TEXCOORD3.z = (-u_xlat27);
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD3.w = 0.0;
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD5.w = 0.0;
    vs_TEXCOORD6.xyz = u_xlat4.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[1].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].www + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * in_POSITION0.yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.zzz + u_xlat1.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.www + u_xlat1.xyz;
    vs_TEXCOORD7.xyz = u_xlat1.xyz * vec3(-1.0, -1.0, 1.0);
    vs_TEXCOORD7.w = 0.0;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat27 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat1.xyz = vec3(u_xlat27) * u_xlat1.xyz;
    vs_TEXCOORD8.xyz = u_xlat1.xyz;
    vs_TEXCOORD8.w = 0.0;
    u_xlat2.xyz = u_xlat1.yzx * u_xlat4.zxy;
    u_xlat1.xyz = u_xlat4.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
    u_xlat27 = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD9.xyz = vec3(u_xlat27) * u_xlat1.xyz;
    vs_TEXCOORD9.w = 0.0;
    u_xlat27 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat27 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat27;
    vs_TEXCOORD10.w = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat27;
    vs_TEXCOORD10.xyz = u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowPos[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	mediump vec4 _DepthFoamMask_ST;
uniform 	mediump float _DepthFoamSpeed;
uniform 	mediump vec4 _DepthFoamColor;
uniform 	mediump float _DepthFoamExtent;
uniform 	mediump float _DepthFoamDistance;
uniform 	mediump float _DepthFoamSubdivision;
uniform 	mediump float _DepthFoamWidth;
uniform 	mediump float _DepthFoamPhaseScale;
uniform 	mediump float _DepthFoamCloseFadeOffset;
uniform 	mediump float _DepthFoamCloseFadeDistance;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _NormalMapScale;
uniform 	float _Normal01_U_Speed;
uniform 	float _Normal01_VSpeed;
uniform 	float _NormalMapBias;
uniform 	float _Normal02_U_Speed;
uniform 	float _Normal02_V_Speed;
uniform 	float _RefractionIntensity;
uniform 	float _OpacityByDepth;
uniform 	float _SpecularIntensity;
uniform 	vec3 _ES_MoonDirection;
uniform 	vec3 _ES_SunDirection;
uniform 	float _Gloss;
uniform 	float _ShoreTransparency;
uniform 	float _SpecularPower;
uniform 	vec4 _ShallowColor;
uniform 	float _ShoreFade;
uniform 	vec4 _DeepColor;
uniform 	float _DeepColorDepth;
uniform 	float _DeepColorFade;
uniform 	vec4 _DistortionIntensity;
uniform 	float _SSRDistortion;
uniform 	float _SSRDistortion_Shore;
uniform 	float _SSRIntensity;
uniform 	float _ReflectionIntensity;
uniform 	float _FresnelPower;
uniform 	float _ShoreReflectionFade;
uniform 	mediump float _ProjectUVScale;
uniform 	vec4 _ReflectionSkyCubeMap_HDR;
uniform lowp sampler2D _Normal01;
uniform lowp sampler2D _Normal02;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _SceneScaledBufferBeforTransParent;
uniform lowp samplerCube _ReflectionSkyCubeMap;
uniform lowp sampler2D _SSRTexture;
uniform lowp sampler2D _DepthFoamMask;
uniform lowp sampler2DShadow hlslcc_zcmp_CascadeShadowMapTexture;
uniform lowp sampler2D _CascadeShadowMapTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD8;
in highp vec4 vs_TEXCOORD9;
in highp vec4 vs_TEXCOORD10;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec4 u_xlatb0;
vec4 u_xlat1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
lowp vec4 u_xlat10_3;
vec4 u_xlat4;
vec3 u_xlat5;
bool u_xlatb5;
vec3 u_xlat6;
vec4 u_xlat7;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
vec3 u_xlat9;
lowp vec3 u_xlat10_9;
vec3 u_xlat10;
vec3 u_xlat11;
vec3 u_xlat12;
vec3 u_xlat13;
vec3 u_xlat14;
mediump float u_xlat16_15;
vec2 u_xlat17;
mediump vec3 u_xlat16_18;
vec3 u_xlat20;
mediump vec3 u_xlat16_20;
lowp float u_xlat10_20;
int u_xlati20;
uint u_xlatu20;
bool u_xlatb20;
float u_xlat21;
float u_xlat33;
vec2 u_xlat36;
mediump float u_xlat16_36;
lowp float u_xlat10_36;
bool u_xlatb36;
float u_xlat49;
bool u_xlatb49;
mediump float u_xlat16_50;
float u_xlat52;
mediump float u_xlat16_52;
bool u_xlatb52;
float u_xlat53;
bool u_xlatb53;
float u_xlat54;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD5.zx * vec2(vec2(_ProjectUVScale, _ProjectUVScale));
    u_xlat1.x = _Time.y * _Normal01_U_Speed + u_xlat0.y;
    u_xlat1.yz = _Time.yy * vec2(_Normal01_VSpeed, _Normal02_U_Speed) + u_xlat0.xy;
    u_xlat1.w = _Time.y * _Normal02_V_Speed + u_xlat0.x;
    u_xlat10_0.xyz = texture(_Normal01, u_xlat1.xy, _NormalMapBias).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_2.xy = u_xlat16_0.xy * vec2(_NormalMapScale);
    u_xlat10_1.xyz = texture(_Normal02, u_xlat1.zw, _NormalMapBias).xyz;
    u_xlat16_0.w = -1.0;
    u_xlat16_3.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.wwz;
    u_xlat16_3.xy = u_xlat16_3.xy * vec2(_NormalMapScale);
    u_xlat16_2.z = -1.0;
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
    u_xlat1.x = float(1.0) / vs_TEXCOORD4.w;
    u_xlat17.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat17.x = texture(_CameraDepthTexture, u_xlat17.xy).x;
    u_xlat17.x = _ZBufferParams.z * u_xlat17.x + _ZBufferParams.w;
    u_xlat17.x = float(1.0) / u_xlat17.x;
    u_xlat33 = vs_TEXCOORD10.w + 9.99999975e-05;
    u_xlat33 = (-u_xlat17.x) / u_xlat33;
    u_xlat33 = vs_TEXCOORD10.y * u_xlat33 + _WorldSpaceCameraPos.y;
    u_xlat33 = (-u_xlat33) + vs_TEXCOORD5.y;
    u_xlat4.xy = u_xlat16_2.xy * vec2(vec2(_RefractionIntensity, _RefractionIntensity));
    u_xlat1.x = u_xlat1.x * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.xw = u_xlat1.xx * u_xlat4.xy;
    u_xlat1.xw = u_xlat1.xw * vs_TEXCOORD4.ww;
    u_xlat17.x = u_xlat17.x + (-vs_TEXCOORD4.w);
#ifdef UNITY_ADRENO_ES3
    u_xlat17.x = min(max(u_xlat17.x, 0.0), 1.0);
#else
    u_xlat17.x = clamp(u_xlat17.x, 0.0, 1.0);
#endif
    u_xlat4.xy = u_xlat17.xx * u_xlat1.xw;
    u_xlat4.z = 0.0;
    u_xlat1.xyw = u_xlat4.xyz + vs_TEXCOORD4.xyw;
    u_xlat1.xy = u_xlat1.xy / u_xlat1.ww;
    u_xlat1.x = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat1.x = _ZBufferParams.z * u_xlat1.x + _ZBufferParams.w;
    u_xlat1.x = float(1.0) / u_xlat1.x;
    u_xlat1.x = u_xlat1.x + (-vs_TEXCOORD4.w);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.xyw = u_xlat1.xxx * u_xlat4.xyz + vs_TEXCOORD4.xyw;
    u_xlat4.xy = u_xlat1.xy / u_xlat1.ww;
    u_xlat49 = texture(_CameraDepthTexture, u_xlat4.xy).x;
    u_xlat49 = _ZBufferParams.z * u_xlat49 + _ZBufferParams.w;
    u_xlat49 = float(1.0) / u_xlat49;
    u_xlat49 = u_xlat49 + (-vs_TEXCOORD4.w);
    u_xlat4.x = 0.100000001 / _OpacityByDepth;
    u_xlat16_3.xz = u_xlat16_2.xy;
    u_xlat16_3.y = 1.0;
    u_xlat16_20.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
    u_xlat16_20.x = inversesqrt(u_xlat16_20.x);
    u_xlat16_20.xyz = u_xlat16_3.xyz * u_xlat16_20.xxx;
#ifdef UNITY_ADRENO_ES3
    u_xlatb5 = !!(0.0>=_ES_MoonDirection.y);
#else
    u_xlatb5 = 0.0>=_ES_MoonDirection.y;
#endif
    u_xlat5.xyz = (bool(u_xlatb5)) ? _ES_SunDirection.xyz : _ES_MoonDirection.xyz;
    u_xlat6.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat53 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat54 = inversesqrt(u_xlat53);
    u_xlat7.xyz = vec3(u_xlat54) * u_xlat6.xyz;
    u_xlat5.xyz = u_xlat6.xyz * vec3(u_xlat54) + u_xlat5.xyz;
    u_xlat6.x = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat5.xyz = u_xlat5.xyz * u_xlat6.xxx;
    u_xlat20.x = dot(u_xlat16_20.xyz, u_xlat5.xyz);
    u_xlat36.x = _Gloss * 128.0;
    u_xlat20.x = max(u_xlat20.x, 9.99999975e-05);
    u_xlat20.x = log2(u_xlat20.x);
    u_xlat20.x = u_xlat20.x * u_xlat36.x;
    u_xlat20.x = exp2(u_xlat20.x);
    u_xlat20.x = u_xlat20.x * _SpecularIntensity;
    u_xlat20.x = max(u_xlat20.x, 0.0);
    u_xlat20.x = min(u_xlat20.x, 16.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb36 = !!(_ES_MoonDirection.y>=9.99999975e-05);
#else
    u_xlatb36 = _ES_MoonDirection.y>=9.99999975e-05;
#endif
    u_xlat36.x = u_xlatb36 ? 1.0 : float(0.0);
    u_xlat52 = _ES_MoonDirection.y + -1.0;
    u_xlat36.x = u_xlat36.x * u_xlat52 + 1.0;
    u_xlat4.w = float(1.0) / _ShoreTransparency;
    u_xlat5.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat5.x = inversesqrt(u_xlat5.x);
    u_xlat5.xyz = u_xlat5.xxx * vs_TEXCOORD6.xyz;
    u_xlat5.x = dot(u_xlat7.xyz, u_xlat5.xyz);
    u_xlat5.x = (-u_xlat5.x) + 1.0;
    u_xlat5.x = max(u_xlat5.x, 9.99999975e-05);
    u_xlat5.x = log2(u_xlat5.x);
    u_xlat21 = u_xlat5.x * _SpecularPower;
    u_xlat21 = exp2(u_xlat21);
    u_xlat6.xyz = u_xlat36.xxx * _LightColor0.xyz;
    u_xlat6.xyz = u_xlat20.xxx * u_xlat6.xyz;
    u_xlat20.x = u_xlat49 + -1.0;
    u_xlat20.x = u_xlat4.w * u_xlat20.x;
    u_xlat20.x = u_xlat20.x * 0.100000001;
#ifdef UNITY_ADRENO_ES3
    u_xlat20.x = min(max(u_xlat20.x, 0.0), 1.0);
#else
    u_xlat20.x = clamp(u_xlat20.x, 0.0, 1.0);
#endif
    u_xlat6.xyz = u_xlat20.xxx * u_xlat6.xyz;
    u_xlat4.xy = vec2(u_xlat49) * u_xlat4.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.xy = min(max(u_xlat4.xy, 0.0), 1.0);
#else
    u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);
#endif
    u_xlat20.x = max(u_xlat4.y, 9.99999975e-05);
    u_xlat20.x = log2(u_xlat20.x);
    u_xlat20.x = u_xlat20.x * _ShoreFade;
    u_xlat20.x = exp2(u_xlat20.x);
    u_xlat8.xyz = _ShallowColor.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat8.xyz = u_xlat20.xxx * u_xlat8.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat1.xy = u_xlat1.xy / vs_TEXCOORD4.ww;
    u_xlat10_9.xyz = texture(_SceneScaledBufferBeforTransParent, u_xlat1.xy).xyz;
    u_xlat10.xyz = u_xlat8.xyz * u_xlat10_9.xyz;
    u_xlat1.x = 0.100000001 / _DeepColorDepth;
    u_xlat1.x = u_xlat1.x * u_xlat49;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.x = max(u_xlat1.x, 9.99999975e-05);
    u_xlat1.x = log2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _DeepColorFade;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat11.xyz = (-u_xlat8.xyz) * u_xlat10_9.xyz + _DeepColor.xyz;
    u_xlat11.xyz = u_xlat1.xxx * u_xlat11.xyz + u_xlat10.xyz;
    u_xlat12.xyz = u_xlat16_2.xyz * _DistortionIntensity.xyz;
    u_xlat13.x = vs_TEXCOORD8.x;
    u_xlat13.y = vs_TEXCOORD9.x;
    u_xlat13.z = vs_TEXCOORD6.x;
    u_xlat13.x = dot(u_xlat13.xyz, u_xlat12.xyz);
    u_xlat14.x = vs_TEXCOORD8.y;
    u_xlat14.y = vs_TEXCOORD9.y;
    u_xlat14.z = vs_TEXCOORD6.y;
    u_xlat13.y = dot(u_xlat14.xyz, u_xlat12.xyz);
    u_xlat14.x = vs_TEXCOORD8.z;
    u_xlat14.y = vs_TEXCOORD9.z;
    u_xlat14.z = vs_TEXCOORD6.z;
    u_xlat13.z = dot(u_xlat14.xyz, u_xlat12.xyz);
    u_xlat1.x = dot(u_xlat13.xyz, u_xlat13.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat13.xyz = u_xlat1.xxx * u_xlat13.xyz;
    u_xlat1.x = dot((-u_xlat7.xyz), u_xlat13.xyz);
    u_xlat1.x = u_xlat1.x + u_xlat1.x;
    u_xlat7.xyz = u_xlat13.xyz * (-u_xlat1.xxx) + (-u_xlat7.xyz);
    u_xlat10_0 = textureLod(_ReflectionSkyCubeMap, u_xlat7.xyz, 0.0);
    u_xlat16_2.x = u_xlat10_0.w + -1.0;
    u_xlat16_2.x = _ReflectionSkyCubeMap_HDR.w * u_xlat16_2.x + 1.0;
    u_xlat16_2.x = log2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * _ReflectionSkyCubeMap_HDR.y;
    u_xlat16_2.x = exp2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * _ReflectionSkyCubeMap_HDR.x;
    u_xlat16_18.xyz = u_xlat10_0.xyz * u_xlat16_2.xxx;
    u_xlat1.xy = u_xlat12.xy * vec2(_SSRDistortion);
    u_xlat36.x = float(1.0) / _SSRDistortion_Shore;
    u_xlat36.x = u_xlat49 * u_xlat36.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat36.x = min(max(u_xlat36.x, 0.0), 1.0);
#else
    u_xlat36.x = clamp(u_xlat36.x, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat1.xy * u_xlat36.xx;
    u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD4.ww + vs_TEXCOORD4.xy;
    u_xlat1.xy = u_xlat1.xy / vs_TEXCOORD4.ww;
    u_xlat10_3 = texture(_SSRTexture, u_xlat1.xy).wxyz;
    u_xlat16_7.xyz = (-u_xlat16_2.xxx) * u_xlat10_0.xyz + u_xlat10_3.yzw;
    u_xlat7.xyz = u_xlat16_7.xyz * vec3(vec3(_SSRIntensity, _SSRIntensity, _SSRIntensity));
    u_xlat16_3.x = u_xlat10_3.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat7.xyz = u_xlat16_3.xxx * u_xlat7.xyz + u_xlat16_18.xyz;
    u_xlat1.x = u_xlat5.x * _FresnelPower;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _ReflectionIntensity;
    u_xlat17.x = float(1.0) / _ShoreReflectionFade;
    u_xlat17.x = u_xlat17.x * u_xlat49;
#ifdef UNITY_ADRENO_ES3
    u_xlat17.x = min(max(u_xlat17.x, 0.0), 1.0);
#else
    u_xlat17.x = clamp(u_xlat17.x, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat17.x * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat7.xyz = (-u_xlat11.xyz) + u_xlat7.xyz;
    u_xlat1.xyw = u_xlat1.xxx * u_xlat7.xyz + u_xlat11.xyz;
    u_xlat1.xyw = (-u_xlat8.xyz) * u_xlat10_9.xyz + u_xlat1.xyw;
    u_xlat1.xyw = u_xlat20.xxx * u_xlat1.xyw + u_xlat10.xyz;
    u_xlat20.x = (-vs_TEXCOORD5.y) * _WorldSpaceLightPos0.w + _WorldSpaceLightPos0.y;
    u_xlat16_2.x = max(u_xlat20.x, 0.0);
    u_xlat20.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowSplitSpheres[0].xyz);
    u_xlat7.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowSplitSpheres[1].xyz);
    u_xlat8.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowSplitSpheres[2].xyz);
    u_xlat9.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowSplitSpheres[3].xyz);
    u_xlat0.x = dot(u_xlat20.xyz, u_xlat20.xyz);
    u_xlat0.y = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat0.z = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat0.w = dot(u_xlat9.xyz, u_xlat9.xyz);
    u_xlatb0 = lessThan(u_xlat0, unity_ShadowSplitSqRadii);
    u_xlat0 = mix(vec4(0.0, 0.0, 0.0, 0.0), vec4(1.0, 1.0, 1.0, 1.0), vec4(u_xlatb0));
    u_xlat16_18.x = u_xlat0.y + u_xlat0.x;
    u_xlat16_18.y = u_xlat0.z + u_xlat16_18.x;
    u_xlat3.x = -0.0;
    u_xlat3.y = (-u_xlat0.x);
    u_xlat3.zw = (-u_xlat16_18.xy);
    u_xlat0 = u_xlat0 + u_xlat3;
    u_xlat0 = max(u_xlat0, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat16_18.x = dot(u_xlat0, vec4(1.0, 1.0, 1.0, 1.0));
#ifdef UNITY_ADRENO_ES3
    u_xlatb20 = !!(u_xlat16_18.x>=0.5);
#else
    u_xlatb20 = u_xlat16_18.x>=0.5;
#endif
    if(u_xlatb20){
        u_xlat20.x = dot(u_xlat0.yzw, vec3(1.0, 2.0, 3.0));
        u_xlat20.x = min(u_xlat20.x, 3.0);
        u_xlatu20 = uint(u_xlat20.x);
        u_xlat7.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowPos[int(u_xlatu20)].xyz);
        u_xlati20 = int(u_xlatu20) << 2;
        u_xlat8.xyz = u_xlat7.yyy * hlslcc_mtx4x4unity_WorldToShadow[(u_xlati20 + 1)].xyz;
        u_xlat7.xyw = hlslcc_mtx4x4unity_WorldToShadow[u_xlati20].xyz * u_xlat7.xxx + u_xlat8.xyz;
        u_xlat7.xyz = hlslcc_mtx4x4unity_WorldToShadow[(u_xlati20 + 2)].xyz * u_xlat7.zzz + u_xlat7.xyw;
        u_xlat20.xyz = u_xlat7.xyz + hlslcc_mtx4x4unity_WorldToShadow[(u_xlati20 + 3)].xyz;
        vec3 txVec0 = vec3(u_xlat20.xy,u_xlat20.z);
        u_xlat10_20 = textureLod(hlslcc_zcmp_CascadeShadowMapTexture, txVec0, 0.0);
        u_xlat16_36 = (-_LightShadowData.x) + 1.0;
        u_xlat20.x = u_xlat10_20 * u_xlat16_36 + _LightShadowData.x;
    } else {
        u_xlat20.x = 1.0;
    //ENDIF
    }
    u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;
    u_xlat20.xyz = u_xlat16_2.xyz * u_xlat20.xxx + vs_TEXCOORD1.xyz;
    u_xlat16_2.xyz = u_xlat20.xyz * vec3(0.300000012, 0.300000012, 0.300000012) + vec3(0.699999988, 0.699999988, 0.699999988);
    u_xlat20.x = sqrt(u_xlat53);
    u_xlat16_50 = u_xlat20.x + (-_DepthFoamCloseFadeOffset);
    u_xlat16_50 = u_xlat16_50 / _DepthFoamCloseFadeDistance;
    u_xlat16_15 = vs_COLOR0.x * _DepthFoamExtent;
    u_xlat33 = max(u_xlat33, 0.0);
    u_xlat33 = min(u_xlat16_15, u_xlat33);
    u_xlat16_15 = _DepthFoamExtent * vs_COLOR0.x + 9.99999975e-05;
    u_xlat33 = u_xlat33 / u_xlat16_15;
    u_xlat33 = (-u_xlat33) + 1.0;
    u_xlat36.xy = vec2(_Time.y * _DepthFoamMask_ST.z, _Time.y * _DepthFoamMask_ST.w);
    u_xlat36.xy = fract(u_xlat36.xy);
    u_xlat36.xy = _DepthFoamMask_ST.xy * vs_TEXCOORD5.xz + u_xlat36.xy;
    u_xlat10_36 = texture(_DepthFoamMask, u_xlat36.xy, -1.0).x;
    u_xlat52 = vs_TEXCOORD5.z + vs_TEXCOORD5.x;
    u_xlat52 = u_xlat52 * _DepthFoamPhaseScale;
    u_xlat52 = _DepthFoamSpeed * _Time.y + u_xlat52;
    u_xlat5.x = (-u_xlat33) + 1.0;
    u_xlat16_15 = _DepthFoamSubdivision * u_xlat33 + u_xlat52;
    u_xlat16_15 = sin(u_xlat16_15);
    u_xlat16_15 = _DepthFoamWidth * u_xlat33 + u_xlat16_15;
    u_xlat16_52 = u_xlat10_36 * 2.0 + -1.0;
    u_xlat52 = u_xlat16_52 + u_xlat16_15;
#ifdef UNITY_ADRENO_ES3
    u_xlatb52 = !!(u_xlat52>=u_xlat5.x);
#else
    u_xlatb52 = u_xlat52>=u_xlat5.x;
#endif
    u_xlat52 = u_xlatb52 ? 1.0 : float(0.0);
    u_xlat36.x = u_xlat52 * u_xlat10_36;
    u_xlat16_15 = _DepthFoamDistance + 9.99999975e-05;
    u_xlat16_15 = u_xlat20.x / u_xlat16_15;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_15 = min(max(u_xlat16_15, 0.0), 1.0);
#else
    u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);
#endif
    u_xlat16_20.x = (-u_xlat16_15) + 1.0;
    u_xlat16_15 = vs_COLOR0.y * _DepthFoamColor.w;
    u_xlat16_50 = u_xlat16_50 * u_xlat16_15;
    u_xlat16_50 = u_xlat36.x * u_xlat16_50;
    u_xlat16_50 = u_xlat33 * u_xlat16_50;
    u_xlat16_50 = u_xlat16_20.x * u_xlat16_50;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_50 = min(max(u_xlat16_50, 0.0), 1.0);
#else
    u_xlat16_50 = clamp(u_xlat16_50, 0.0, 1.0);
#endif
    u_xlat16_2.xyz = _DepthFoamColor.xyz * u_xlat16_2.xyz + (-u_xlat1.xyw);
    u_xlat16_2.xyz = vec3(u_xlat16_50) * u_xlat16_2.xyz + u_xlat1.xyw;
    u_xlat1.xyz = u_xlat6.xyz * vec3(u_xlat21) + u_xlat16_2.xyz;
    u_xlat0.w = u_xlat4.x * vs_COLOR0.w;
    u_xlat4.xyz = vs_TEXCOORD5.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat5.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat5.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat5.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat49 = dot(u_xlat4.xyz, u_xlat5.xyz);
    u_xlat4.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat4.x = sqrt(u_xlat4.x);
    u_xlat20.y = u_xlat4.x * _HeigtFogParams.y;
    u_xlat52 = u_xlat4.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat52 = min(max(u_xlat52, 0.0), 1.0);
#else
    u_xlat52 = clamp(u_xlat52, 0.0, 1.0);
#endif
    u_xlat5.x = (-u_xlat52) + 2.0;
    u_xlat52 = u_xlat52 * u_xlat5.x;
    u_xlat5.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb49 = !!((-u_xlat49)>=u_xlat5.x);
#else
    u_xlatb49 = (-u_xlat49)>=u_xlat5.x;
#endif
    u_xlat5.x = u_xlat52 * _HeigtFogColDelta.w;
    u_xlat49 = (u_xlatb49) ? u_xlat5.x : u_xlat52;
    u_xlat49 = log2(u_xlat49);
    u_xlat49 = u_xlat49 * unity_FogColor.w;
    u_xlat49 = exp2(u_xlat49);
    u_xlat49 = min(u_xlat49, _HeigtFogColBase.w);
    u_xlat52 = vs_TEXCOORD5.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat52 = min(max(u_xlat52, 0.0), 1.0);
#else
    u_xlat52 = clamp(u_xlat52, 0.0, 1.0);
#endif
    u_xlat16_2.x = (-u_xlat52) + 2.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat52;
    u_xlat5.xyz = u_xlat16_2.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat52 = u_xlat4.x + (-_HeigtFogRamp.w);
    u_xlat52 = u_xlat52 * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat52 = min(max(u_xlat52, 0.0), 1.0);
#else
    u_xlat52 = clamp(u_xlat52, 0.0, 1.0);
#endif
    u_xlat6.xyz = (-u_xlat5.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat5.xyz = vec3(u_xlat52) * u_xlat6.xyz + u_xlat5.xyz;
    u_xlat52 = u_xlat4.y * _HeigtFogParams.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb53 = !!(0.00999999978<abs(u_xlat52));
#else
    u_xlatb53 = 0.00999999978<abs(u_xlat52);
#endif
    u_xlat6.x = u_xlat52 * -1.44269502;
    u_xlat6.x = exp2(u_xlat6.x);
    u_xlat6.x = (-u_xlat6.x) + 1.0;
    u_xlat52 = u_xlat6.x / u_xlat52;
    u_xlat16_2.x = (u_xlatb53) ? u_xlat52 : 1.0;
    u_xlat20.x = u_xlat4.y * _HeigtFogParams2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb52 = !!(0.00999999978<abs(u_xlat20.x));
#else
    u_xlatb52 = 0.00999999978<abs(u_xlat20.x);
#endif
    u_xlat53 = u_xlat20.x * -1.44269502;
    u_xlat53 = exp2(u_xlat53);
    u_xlat53 = (-u_xlat53) + 1.0;
    u_xlat20.x = u_xlat53 / u_xlat20.x;
    u_xlat16_2.y = (u_xlatb52) ? u_xlat20.x : 1.0;
    u_xlat20.x = u_xlat4.x * _HeigtFogParams2.y;
    u_xlat16_2.xy = u_xlat16_2.xy * u_xlat20.yx;
    u_xlat16_2.x = exp2((-u_xlat16_2.x));
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_18.x = exp2((-u_xlat16_2.y));
    u_xlat16_2.y = (-u_xlat16_18.x) + 1.0;
    u_xlat16_2.xy = max(u_xlat16_2.xy, vec2(0.0, 0.0));
    u_xlat16_2.x = u_xlat16_2.y + u_xlat16_2.x;
    u_xlat4.x = u_xlat4.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat16_18.x = (-u_xlat4.x) + 2.0;
    u_xlat16_18.x = u_xlat16_18.x * u_xlat4.x;
    u_xlat4.x = u_xlat16_18.x * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat4.x = u_xlat4.x + 1.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat4.x;
    u_xlat4.x = min(u_xlat16_2.x, _HeigtFogColBase.w);
    u_xlat20.x = vs_TEXCOORD5.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat20.x = min(max(u_xlat20.x, 0.0), 1.0);
#else
    u_xlat20.x = clamp(u_xlat20.x, 0.0, 1.0);
#endif
    u_xlat20.xyz = u_xlat20.xxx * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    u_xlat5.xyz = vec3(u_xlat49) * u_xlat5.xyz;
    u_xlat53 = (-u_xlat4.x) + 1.0;
    u_xlat5.xyz = vec3(u_xlat53) * u_xlat5.xyz;
    u_xlat4.xyz = u_xlat20.xyz * u_xlat4.xxx + u_xlat5.xyz;
    u_xlat49 = (-u_xlat49) + 1.0;
    u_xlat49 = u_xlat53 * u_xlat49;
    u_xlat0.xyz = vec3(u_xlat49) * u_xlat1.xyz + u_xlat4.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "MSAA_INTERPOLATION" "MHY_SHADER_MIDDLE" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	mediump float _MHYZBias;
uniform 	vec4 hlslcc_mtx4x4_mhyJitteredVP[4];
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
out highp vec4 vs_TEXCOORD9;
out highp vec4 vs_TEXCOORD10;
float u_xlat0;
int u_xlati0;
vec4 u_xlat1;
bool u_xlatb1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
bool u_xlatb4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
mediump vec4 u_xlat16_6;
vec4 u_xlat7;
mediump vec3 u_xlat16_8;
vec3 u_xlat9;
float u_xlat10;
float u_xlat13;
bool u_xlatb13;
mediump float u_xlat16_14;
float u_xlat22;
float u_xlat28;
float u_xlat31;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat9.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4_mhyJitteredVP[1];
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[3] * u_xlat2.wwww + u_xlat1;
    u_xlat3.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    u_xlat3.xyw = u_xlat1.xyw;
    gl_Position = u_xlat3;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.xyw = u_xlat9.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat4.x = u_xlat1.y * _HeigtFogParams.x;
    u_xlat13 = u_xlat4.x * -1.44269502;
    u_xlat13 = exp2(u_xlat13);
    u_xlat13 = (-u_xlat13) + 1.0;
    u_xlat13 = u_xlat13 / u_xlat4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(0.00999999978<abs(u_xlat4.x));
#else
    u_xlatb4 = 0.00999999978<abs(u_xlat4.x);
#endif
    u_xlat16_5.x = (u_xlatb4) ? u_xlat13 : 1.0;
    u_xlat4.x = dot(u_xlat1.xyw, u_xlat1.xyw);
    u_xlat4.x = sqrt(u_xlat4.x);
    u_xlat13 = u_xlat4.x * _HeigtFogParams.y;
    u_xlat16_5.x = u_xlat13 * u_xlat16_5.x;
    u_xlat16_5.x = exp2((-u_xlat16_5.x));
    u_xlat16_5.x = (-u_xlat16_5.x) + 1.0;
    u_xlat13 = u_xlat1.y * _HeigtFogParams2.x;
    u_xlat22 = u_xlat13 * -1.44269502;
    u_xlat22 = exp2(u_xlat22);
    u_xlat22 = (-u_xlat22) + 1.0;
    u_xlat22 = u_xlat22 / u_xlat13;
#ifdef UNITY_ADRENO_ES3
    u_xlatb13 = !!(0.00999999978<abs(u_xlat13));
#else
    u_xlatb13 = 0.00999999978<abs(u_xlat13);
#endif
    u_xlat16_14 = (u_xlatb13) ? u_xlat22 : 1.0;
    u_xlat13 = u_xlat4.x * _HeigtFogParams2.y;
    u_xlat16_14 = u_xlat13 * u_xlat16_14;
    u_xlat16_14 = exp2((-u_xlat16_14));
    u_xlat16_5.y = (-u_xlat16_14) + 1.0;
    u_xlat16_5.xy = max(u_xlat16_5.xy, vec2(0.0, 0.0));
    u_xlat16_5.x = u_xlat16_5.y + u_xlat16_5.x;
    u_xlat13 = u_xlat4.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat13 = min(max(u_xlat13, 0.0), 1.0);
#else
    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
#endif
    u_xlat16_14 = (-u_xlat13) + 2.0;
    u_xlat16_14 = u_xlat13 * u_xlat16_14;
    u_xlat13 = u_xlat16_14 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat13 = u_xlat13 + 1.0;
    u_xlat16_5.x = u_xlat13 * u_xlat16_5.x;
    u_xlat13 = min(u_xlat16_5.x, _HeigtFogColBase.w);
    u_xlat22 = (-u_xlat13) + 1.0;
    u_xlat31 = _ProjectionParams.z * 0.999899983;
    u_xlat6.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat6.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat6.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat1.x = dot(u_xlat1.xyw, u_xlat6.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!((-u_xlat1.x)>=u_xlat31);
#else
    u_xlatb1 = (-u_xlat1.x)>=u_xlat31;
#endif
    u_xlat10 = u_xlat4.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat10 = min(max(u_xlat10, 0.0), 1.0);
#else
    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
#endif
    u_xlat28 = u_xlat4.x + (-_HeigtFogRamp.w);
    u_xlat28 = u_xlat28 * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat28 = min(max(u_xlat28, 0.0), 1.0);
#else
    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
#endif
    u_xlat4.x = (-u_xlat10) + 2.0;
    u_xlat10 = u_xlat10 * u_xlat4.x;
    u_xlat4.x = u_xlat10 * _HeigtFogColDelta.w;
    u_xlat1.x = (u_xlatb1) ? u_xlat4.x : u_xlat10;
    u_xlat1.x = log2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * unity_FogColor.w;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat1.x = min(u_xlat1.x, _HeigtFogColBase.w);
    u_xlat10 = u_xlat9.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat10 = min(max(u_xlat10, 0.0), 1.0);
#else
    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
#endif
    u_xlat16_5.x = (-u_xlat10) + 2.0;
    u_xlat16_5.x = u_xlat10 * u_xlat16_5.x;
    u_xlat6.xyz = u_xlat16_5.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat7.xyz = (-u_xlat6.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat6.xyz = vec3(u_xlat28) * u_xlat7.xyz + u_xlat6.xyz;
    u_xlat6.xyz = u_xlat1.xxx * u_xlat6.xyz;
    u_xlat1.x = (-u_xlat1.x) + 1.0;
    vs_TEXCOORD0.w = u_xlat22 * u_xlat1.x;
    u_xlat1.xyw = vec3(u_xlat22) * u_xlat6.xyz;
    u_xlat4.x = u_xlat9.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat4.xzw = u_xlat4.xxx * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    vs_TEXCOORD0.xyz = u_xlat4.xzw * vec3(u_xlat13) + u_xlat1.xyw;
    vs_TEXCOORD1.w = 1.0;
    u_xlat4.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat4.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat4.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat1.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
    u_xlat16_5.x = u_xlat4.y * u_xlat4.y;
    u_xlat16_5.x = u_xlat4.x * u_xlat4.x + (-u_xlat16_5.x);
    u_xlat16_6 = u_xlat4.yzzx * u_xlat4.xyzz;
    u_xlat16_8.x = dot(unity_SHBr, u_xlat16_6);
    u_xlat16_8.y = dot(unity_SHBg, u_xlat16_6);
    u_xlat16_8.z = dot(unity_SHBb, u_xlat16_6);
    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_8.xyz;
    u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat4.w = 1.0;
    u_xlat16_8.x = dot(unity_SHAr, u_xlat4);
    u_xlat16_8.y = dot(unity_SHAg, u_xlat4);
    u_xlat16_8.z = dot(unity_SHAb, u_xlat4);
    u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_8.xyz;
    vs_TEXCOORD1.xyz = u_xlat16_5.xyz;
    u_xlat1.x = u_xlat3.y * _ProjectionParams.x;
    u_xlat7.w = u_xlat1.x * 0.5;
    u_xlat7.xz = u_xlat3.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.z = u_xlat1.z;
    u_xlat3.xy = u_xlat7.zz + u_xlat7.xw;
    vs_TEXCOORD2 = u_xlat3;
    vs_TEXCOORD4.xyw = u_xlat3.xyw;
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD3.w = 0.0;
    u_xlat1.x = u_xlat2.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat2.x + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat2.z + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat2.w + u_xlat1.x;
    vs_TEXCOORD3.z = (-u_xlat1.x);
    vs_TEXCOORD5.w = 0.0;
    vs_TEXCOORD5.xyz = u_xlat9.xyz;
    u_xlat9.xyz = (-u_xlat9.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD6.w = 0.0;
    vs_TEXCOORD6.xyz = u_xlat4.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].www + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * in_POSITION0.yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.zzz + u_xlat1.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.www + u_xlat1.xyz;
    vs_TEXCOORD7.xyz = u_xlat1.xyz * vec3(-1.0, -1.0, 1.0);
    vs_TEXCOORD7.w = 0.0;
    u_xlat1.xyz = in_TANGENT0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat0 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0 = inversesqrt(u_xlat0);
    u_xlat1.xyz = vec3(u_xlat0) * u_xlat1.xyz;
    vs_TEXCOORD8.xyz = u_xlat1.xyz;
    vs_TEXCOORD8.w = 0.0;
    u_xlat2.xyz = u_xlat1.yzx * u_xlat4.zxy;
    u_xlat1.xyz = u_xlat4.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
    u_xlat0 = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD9.xyz = vec3(u_xlat0) * u_xlat1.xyz;
    vs_TEXCOORD9.w = 0.0;
    u_xlat0 = u_xlat9.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat9.x + u_xlat0;
    vs_TEXCOORD10.w = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat9.z + u_xlat0;
    vs_TEXCOORD10.xyz = u_xlat9.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowPos[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	mediump vec4 _DepthFoamMask_ST;
uniform 	mediump float _DepthFoamSpeed;
uniform 	mediump vec4 _DepthFoamColor;
uniform 	mediump float _DepthFoamExtent;
uniform 	mediump float _DepthFoamDistance;
uniform 	mediump float _DepthFoamSubdivision;
uniform 	mediump float _DepthFoamWidth;
uniform 	mediump float _DepthFoamPhaseScale;
uniform 	mediump float _DepthFoamCloseFadeOffset;
uniform 	mediump float _DepthFoamCloseFadeDistance;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _NormalMapScale;
uniform 	float _Normal01_U_Speed;
uniform 	float _Normal01_VSpeed;
uniform 	float _NormalMapBias;
uniform 	float _Normal02_U_Speed;
uniform 	float _Normal02_V_Speed;
uniform 	float _RefractionIntensity;
uniform 	float _OpacityByDepth;
uniform 	float _SpecularIntensity;
uniform 	vec3 _ES_MoonDirection;
uniform 	vec3 _ES_SunDirection;
uniform 	float _Gloss;
uniform 	float _ShoreTransparency;
uniform 	float _SpecularPower;
uniform 	vec4 _ShallowColor;
uniform 	float _ShoreFade;
uniform 	vec4 _DeepColor;
uniform 	float _DeepColorDepth;
uniform 	float _DeepColorFade;
uniform 	vec4 _DistortionIntensity;
uniform 	float _SSRDistortion;
uniform 	float _SSRDistortion_Shore;
uniform 	float _SSRIntensity;
uniform 	float _ReflectionIntensity;
uniform 	float _FresnelPower;
uniform 	float _ShoreReflectionFade;
uniform 	mediump float _ProjectUVScale;
uniform 	vec4 _ReflectionSkyCubeMap_HDR;
uniform lowp sampler2D _Normal01;
uniform lowp sampler2D _Normal02;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _SceneScaledBufferBeforTransParent;
uniform lowp samplerCube _ReflectionSkyCubeMap;
uniform lowp sampler2D _SSRTexture;
uniform lowp sampler2D _DepthFoamMask;
uniform lowp sampler2DShadow hlslcc_zcmp_CascadeShadowMapTexture;
uniform lowp sampler2D _CascadeShadowMapTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD8;
in highp vec4 vs_TEXCOORD9;
in highp vec4 vs_TEXCOORD10;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec4 u_xlatb0;
vec4 u_xlat1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
lowp vec4 u_xlat10_3;
vec4 u_xlat4;
vec3 u_xlat5;
bool u_xlatb5;
vec3 u_xlat6;
vec4 u_xlat7;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
vec3 u_xlat9;
lowp vec3 u_xlat10_9;
vec3 u_xlat10;
vec3 u_xlat11;
vec3 u_xlat12;
vec3 u_xlat13;
vec3 u_xlat14;
mediump float u_xlat16_15;
vec2 u_xlat17;
mediump vec3 u_xlat16_18;
vec3 u_xlat20;
mediump vec3 u_xlat16_20;
lowp float u_xlat10_20;
int u_xlati20;
uint u_xlatu20;
bool u_xlatb20;
float u_xlat21;
float u_xlat33;
vec2 u_xlat36;
mediump float u_xlat16_36;
lowp float u_xlat10_36;
bool u_xlatb36;
float u_xlat49;
bool u_xlatb49;
mediump float u_xlat16_50;
float u_xlat52;
mediump float u_xlat16_52;
bool u_xlatb52;
float u_xlat53;
bool u_xlatb53;
float u_xlat54;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD5.zx * vec2(vec2(_ProjectUVScale, _ProjectUVScale));
    u_xlat1.x = _Time.y * _Normal01_U_Speed + u_xlat0.y;
    u_xlat1.yz = _Time.yy * vec2(_Normal01_VSpeed, _Normal02_U_Speed) + u_xlat0.xy;
    u_xlat1.w = _Time.y * _Normal02_V_Speed + u_xlat0.x;
    u_xlat10_0.xyz = texture(_Normal01, u_xlat1.xy, _NormalMapBias).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_2.xy = u_xlat16_0.xy * vec2(_NormalMapScale);
    u_xlat10_1.xyz = texture(_Normal02, u_xlat1.zw, _NormalMapBias).xyz;
    u_xlat16_0.w = -1.0;
    u_xlat16_3.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.wwz;
    u_xlat16_3.xy = u_xlat16_3.xy * vec2(_NormalMapScale);
    u_xlat16_2.z = -1.0;
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
    u_xlat1.x = float(1.0) / vs_TEXCOORD4.w;
    u_xlat17.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat17.x = texture(_CameraDepthTexture, u_xlat17.xy).x;
    u_xlat17.x = _ZBufferParams.z * u_xlat17.x + _ZBufferParams.w;
    u_xlat17.x = float(1.0) / u_xlat17.x;
    u_xlat33 = vs_TEXCOORD10.w + 9.99999975e-05;
    u_xlat33 = (-u_xlat17.x) / u_xlat33;
    u_xlat33 = vs_TEXCOORD10.y * u_xlat33 + _WorldSpaceCameraPos.y;
    u_xlat33 = (-u_xlat33) + vs_TEXCOORD5.y;
    u_xlat4.xy = u_xlat16_2.xy * vec2(vec2(_RefractionIntensity, _RefractionIntensity));
    u_xlat1.x = u_xlat1.x * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.xw = u_xlat1.xx * u_xlat4.xy;
    u_xlat1.xw = u_xlat1.xw * vs_TEXCOORD4.ww;
    u_xlat17.x = u_xlat17.x + (-vs_TEXCOORD4.w);
#ifdef UNITY_ADRENO_ES3
    u_xlat17.x = min(max(u_xlat17.x, 0.0), 1.0);
#else
    u_xlat17.x = clamp(u_xlat17.x, 0.0, 1.0);
#endif
    u_xlat4.xy = u_xlat17.xx * u_xlat1.xw;
    u_xlat4.z = 0.0;
    u_xlat1.xyw = u_xlat4.xyz + vs_TEXCOORD4.xyw;
    u_xlat1.xy = u_xlat1.xy / u_xlat1.ww;
    u_xlat1.x = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat1.x = _ZBufferParams.z * u_xlat1.x + _ZBufferParams.w;
    u_xlat1.x = float(1.0) / u_xlat1.x;
    u_xlat1.x = u_xlat1.x + (-vs_TEXCOORD4.w);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.xyw = u_xlat1.xxx * u_xlat4.xyz + vs_TEXCOORD4.xyw;
    u_xlat4.xy = u_xlat1.xy / u_xlat1.ww;
    u_xlat49 = texture(_CameraDepthTexture, u_xlat4.xy).x;
    u_xlat49 = _ZBufferParams.z * u_xlat49 + _ZBufferParams.w;
    u_xlat49 = float(1.0) / u_xlat49;
    u_xlat49 = u_xlat49 + (-vs_TEXCOORD4.w);
    u_xlat4.x = 0.100000001 / _OpacityByDepth;
    u_xlat16_3.xz = u_xlat16_2.xy;
    u_xlat16_3.y = 1.0;
    u_xlat16_20.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
    u_xlat16_20.x = inversesqrt(u_xlat16_20.x);
    u_xlat16_20.xyz = u_xlat16_3.xyz * u_xlat16_20.xxx;
#ifdef UNITY_ADRENO_ES3
    u_xlatb5 = !!(0.0>=_ES_MoonDirection.y);
#else
    u_xlatb5 = 0.0>=_ES_MoonDirection.y;
#endif
    u_xlat5.xyz = (bool(u_xlatb5)) ? _ES_SunDirection.xyz : _ES_MoonDirection.xyz;
    u_xlat6.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat53 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat54 = inversesqrt(u_xlat53);
    u_xlat7.xyz = vec3(u_xlat54) * u_xlat6.xyz;
    u_xlat5.xyz = u_xlat6.xyz * vec3(u_xlat54) + u_xlat5.xyz;
    u_xlat6.x = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat5.xyz = u_xlat5.xyz * u_xlat6.xxx;
    u_xlat20.x = dot(u_xlat16_20.xyz, u_xlat5.xyz);
    u_xlat36.x = _Gloss * 128.0;
    u_xlat20.x = max(u_xlat20.x, 9.99999975e-05);
    u_xlat20.x = log2(u_xlat20.x);
    u_xlat20.x = u_xlat20.x * u_xlat36.x;
    u_xlat20.x = exp2(u_xlat20.x);
    u_xlat20.x = u_xlat20.x * _SpecularIntensity;
    u_xlat20.x = max(u_xlat20.x, 0.0);
    u_xlat20.x = min(u_xlat20.x, 16.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb36 = !!(_ES_MoonDirection.y>=9.99999975e-05);
#else
    u_xlatb36 = _ES_MoonDirection.y>=9.99999975e-05;
#endif
    u_xlat36.x = u_xlatb36 ? 1.0 : float(0.0);
    u_xlat52 = _ES_MoonDirection.y + -1.0;
    u_xlat36.x = u_xlat36.x * u_xlat52 + 1.0;
    u_xlat4.w = float(1.0) / _ShoreTransparency;
    u_xlat5.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat5.x = inversesqrt(u_xlat5.x);
    u_xlat5.xyz = u_xlat5.xxx * vs_TEXCOORD6.xyz;
    u_xlat5.x = dot(u_xlat7.xyz, u_xlat5.xyz);
    u_xlat5.x = (-u_xlat5.x) + 1.0;
    u_xlat5.x = max(u_xlat5.x, 9.99999975e-05);
    u_xlat5.x = log2(u_xlat5.x);
    u_xlat21 = u_xlat5.x * _SpecularPower;
    u_xlat21 = exp2(u_xlat21);
    u_xlat6.xyz = u_xlat36.xxx * _LightColor0.xyz;
    u_xlat6.xyz = u_xlat20.xxx * u_xlat6.xyz;
    u_xlat20.x = u_xlat49 + -1.0;
    u_xlat20.x = u_xlat4.w * u_xlat20.x;
    u_xlat20.x = u_xlat20.x * 0.100000001;
#ifdef UNITY_ADRENO_ES3
    u_xlat20.x = min(max(u_xlat20.x, 0.0), 1.0);
#else
    u_xlat20.x = clamp(u_xlat20.x, 0.0, 1.0);
#endif
    u_xlat6.xyz = u_xlat20.xxx * u_xlat6.xyz;
    u_xlat4.xy = vec2(u_xlat49) * u_xlat4.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.xy = min(max(u_xlat4.xy, 0.0), 1.0);
#else
    u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);
#endif
    u_xlat20.x = max(u_xlat4.y, 9.99999975e-05);
    u_xlat20.x = log2(u_xlat20.x);
    u_xlat20.x = u_xlat20.x * _ShoreFade;
    u_xlat20.x = exp2(u_xlat20.x);
    u_xlat8.xyz = _ShallowColor.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat8.xyz = u_xlat20.xxx * u_xlat8.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat1.xy = u_xlat1.xy / vs_TEXCOORD4.ww;
    u_xlat10_9.xyz = texture(_SceneScaledBufferBeforTransParent, u_xlat1.xy).xyz;
    u_xlat10.xyz = u_xlat8.xyz * u_xlat10_9.xyz;
    u_xlat1.x = 0.100000001 / _DeepColorDepth;
    u_xlat1.x = u_xlat1.x * u_xlat49;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.x = max(u_xlat1.x, 9.99999975e-05);
    u_xlat1.x = log2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _DeepColorFade;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat11.xyz = (-u_xlat8.xyz) * u_xlat10_9.xyz + _DeepColor.xyz;
    u_xlat11.xyz = u_xlat1.xxx * u_xlat11.xyz + u_xlat10.xyz;
    u_xlat12.xyz = u_xlat16_2.xyz * _DistortionIntensity.xyz;
    u_xlat13.x = vs_TEXCOORD8.x;
    u_xlat13.y = vs_TEXCOORD9.x;
    u_xlat13.z = vs_TEXCOORD6.x;
    u_xlat13.x = dot(u_xlat13.xyz, u_xlat12.xyz);
    u_xlat14.x = vs_TEXCOORD8.y;
    u_xlat14.y = vs_TEXCOORD9.y;
    u_xlat14.z = vs_TEXCOORD6.y;
    u_xlat13.y = dot(u_xlat14.xyz, u_xlat12.xyz);
    u_xlat14.x = vs_TEXCOORD8.z;
    u_xlat14.y = vs_TEXCOORD9.z;
    u_xlat14.z = vs_TEXCOORD6.z;
    u_xlat13.z = dot(u_xlat14.xyz, u_xlat12.xyz);
    u_xlat1.x = dot(u_xlat13.xyz, u_xlat13.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat13.xyz = u_xlat1.xxx * u_xlat13.xyz;
    u_xlat1.x = dot((-u_xlat7.xyz), u_xlat13.xyz);
    u_xlat1.x = u_xlat1.x + u_xlat1.x;
    u_xlat7.xyz = u_xlat13.xyz * (-u_xlat1.xxx) + (-u_xlat7.xyz);
    u_xlat10_0 = textureLod(_ReflectionSkyCubeMap, u_xlat7.xyz, 0.0);
    u_xlat16_2.x = u_xlat10_0.w + -1.0;
    u_xlat16_2.x = _ReflectionSkyCubeMap_HDR.w * u_xlat16_2.x + 1.0;
    u_xlat16_2.x = log2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * _ReflectionSkyCubeMap_HDR.y;
    u_xlat16_2.x = exp2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * _ReflectionSkyCubeMap_HDR.x;
    u_xlat16_18.xyz = u_xlat10_0.xyz * u_xlat16_2.xxx;
    u_xlat1.xy = u_xlat12.xy * vec2(_SSRDistortion);
    u_xlat36.x = float(1.0) / _SSRDistortion_Shore;
    u_xlat36.x = u_xlat49 * u_xlat36.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat36.x = min(max(u_xlat36.x, 0.0), 1.0);
#else
    u_xlat36.x = clamp(u_xlat36.x, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat1.xy * u_xlat36.xx;
    u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD4.ww + vs_TEXCOORD4.xy;
    u_xlat1.xy = u_xlat1.xy / vs_TEXCOORD4.ww;
    u_xlat10_3 = texture(_SSRTexture, u_xlat1.xy).wxyz;
    u_xlat16_7.xyz = (-u_xlat16_2.xxx) * u_xlat10_0.xyz + u_xlat10_3.yzw;
    u_xlat7.xyz = u_xlat16_7.xyz * vec3(vec3(_SSRIntensity, _SSRIntensity, _SSRIntensity));
    u_xlat16_3.x = u_xlat10_3.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat7.xyz = u_xlat16_3.xxx * u_xlat7.xyz + u_xlat16_18.xyz;
    u_xlat1.x = u_xlat5.x * _FresnelPower;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _ReflectionIntensity;
    u_xlat17.x = float(1.0) / _ShoreReflectionFade;
    u_xlat17.x = u_xlat17.x * u_xlat49;
#ifdef UNITY_ADRENO_ES3
    u_xlat17.x = min(max(u_xlat17.x, 0.0), 1.0);
#else
    u_xlat17.x = clamp(u_xlat17.x, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat17.x * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat7.xyz = (-u_xlat11.xyz) + u_xlat7.xyz;
    u_xlat1.xyw = u_xlat1.xxx * u_xlat7.xyz + u_xlat11.xyz;
    u_xlat1.xyw = (-u_xlat8.xyz) * u_xlat10_9.xyz + u_xlat1.xyw;
    u_xlat1.xyw = u_xlat20.xxx * u_xlat1.xyw + u_xlat10.xyz;
    u_xlat20.x = (-vs_TEXCOORD5.y) * _WorldSpaceLightPos0.w + _WorldSpaceLightPos0.y;
    u_xlat16_2.x = max(u_xlat20.x, 0.0);
    u_xlat20.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowSplitSpheres[0].xyz);
    u_xlat7.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowSplitSpheres[1].xyz);
    u_xlat8.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowSplitSpheres[2].xyz);
    u_xlat9.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowSplitSpheres[3].xyz);
    u_xlat0.x = dot(u_xlat20.xyz, u_xlat20.xyz);
    u_xlat0.y = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat0.z = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat0.w = dot(u_xlat9.xyz, u_xlat9.xyz);
    u_xlatb0 = lessThan(u_xlat0, unity_ShadowSplitSqRadii);
    u_xlat0 = mix(vec4(0.0, 0.0, 0.0, 0.0), vec4(1.0, 1.0, 1.0, 1.0), vec4(u_xlatb0));
    u_xlat16_18.x = u_xlat0.y + u_xlat0.x;
    u_xlat16_18.y = u_xlat0.z + u_xlat16_18.x;
    u_xlat3.x = -0.0;
    u_xlat3.y = (-u_xlat0.x);
    u_xlat3.zw = (-u_xlat16_18.xy);
    u_xlat0 = u_xlat0 + u_xlat3;
    u_xlat0 = max(u_xlat0, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat16_18.x = dot(u_xlat0, vec4(1.0, 1.0, 1.0, 1.0));
#ifdef UNITY_ADRENO_ES3
    u_xlatb20 = !!(u_xlat16_18.x>=0.5);
#else
    u_xlatb20 = u_xlat16_18.x>=0.5;
#endif
    if(u_xlatb20){
        u_xlat20.x = dot(u_xlat0.yzw, vec3(1.0, 2.0, 3.0));
        u_xlat20.x = min(u_xlat20.x, 3.0);
        u_xlatu20 = uint(u_xlat20.x);
        u_xlat7.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowPos[int(u_xlatu20)].xyz);
        u_xlati20 = int(u_xlatu20) << 2;
        u_xlat8.xyz = u_xlat7.yyy * hlslcc_mtx4x4unity_WorldToShadow[(u_xlati20 + 1)].xyz;
        u_xlat7.xyw = hlslcc_mtx4x4unity_WorldToShadow[u_xlati20].xyz * u_xlat7.xxx + u_xlat8.xyz;
        u_xlat7.xyz = hlslcc_mtx4x4unity_WorldToShadow[(u_xlati20 + 2)].xyz * u_xlat7.zzz + u_xlat7.xyw;
        u_xlat20.xyz = u_xlat7.xyz + hlslcc_mtx4x4unity_WorldToShadow[(u_xlati20 + 3)].xyz;
        vec3 txVec0 = vec3(u_xlat20.xy,u_xlat20.z);
        u_xlat10_20 = textureLod(hlslcc_zcmp_CascadeShadowMapTexture, txVec0, 0.0);
        u_xlat16_36 = (-_LightShadowData.x) + 1.0;
        u_xlat20.x = u_xlat10_20 * u_xlat16_36 + _LightShadowData.x;
    } else {
        u_xlat20.x = 1.0;
    //ENDIF
    }
    u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;
    u_xlat20.xyz = u_xlat16_2.xyz * u_xlat20.xxx + vs_TEXCOORD1.xyz;
    u_xlat16_2.xyz = u_xlat20.xyz * vec3(0.300000012, 0.300000012, 0.300000012) + vec3(0.699999988, 0.699999988, 0.699999988);
    u_xlat20.x = sqrt(u_xlat53);
    u_xlat16_50 = u_xlat20.x + (-_DepthFoamCloseFadeOffset);
    u_xlat16_50 = u_xlat16_50 / _DepthFoamCloseFadeDistance;
    u_xlat16_15 = vs_COLOR0.x * _DepthFoamExtent;
    u_xlat33 = max(u_xlat33, 0.0);
    u_xlat33 = min(u_xlat16_15, u_xlat33);
    u_xlat16_15 = _DepthFoamExtent * vs_COLOR0.x + 9.99999975e-05;
    u_xlat33 = u_xlat33 / u_xlat16_15;
    u_xlat33 = (-u_xlat33) + 1.0;
    u_xlat36.xy = vec2(_Time.y * _DepthFoamMask_ST.z, _Time.y * _DepthFoamMask_ST.w);
    u_xlat36.xy = fract(u_xlat36.xy);
    u_xlat36.xy = _DepthFoamMask_ST.xy * vs_TEXCOORD5.xz + u_xlat36.xy;
    u_xlat10_36 = texture(_DepthFoamMask, u_xlat36.xy, -1.0).x;
    u_xlat52 = vs_TEXCOORD5.z + vs_TEXCOORD5.x;
    u_xlat52 = u_xlat52 * _DepthFoamPhaseScale;
    u_xlat52 = _DepthFoamSpeed * _Time.y + u_xlat52;
    u_xlat5.x = (-u_xlat33) + 1.0;
    u_xlat16_15 = _DepthFoamSubdivision * u_xlat33 + u_xlat52;
    u_xlat16_15 = sin(u_xlat16_15);
    u_xlat16_15 = _DepthFoamWidth * u_xlat33 + u_xlat16_15;
    u_xlat16_52 = u_xlat10_36 * 2.0 + -1.0;
    u_xlat52 = u_xlat16_52 + u_xlat16_15;
#ifdef UNITY_ADRENO_ES3
    u_xlatb52 = !!(u_xlat52>=u_xlat5.x);
#else
    u_xlatb52 = u_xlat52>=u_xlat5.x;
#endif
    u_xlat52 = u_xlatb52 ? 1.0 : float(0.0);
    u_xlat36.x = u_xlat52 * u_xlat10_36;
    u_xlat16_15 = _DepthFoamDistance + 9.99999975e-05;
    u_xlat16_15 = u_xlat20.x / u_xlat16_15;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_15 = min(max(u_xlat16_15, 0.0), 1.0);
#else
    u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);
#endif
    u_xlat16_20.x = (-u_xlat16_15) + 1.0;
    u_xlat16_15 = vs_COLOR0.y * _DepthFoamColor.w;
    u_xlat16_50 = u_xlat16_50 * u_xlat16_15;
    u_xlat16_50 = u_xlat36.x * u_xlat16_50;
    u_xlat16_50 = u_xlat33 * u_xlat16_50;
    u_xlat16_50 = u_xlat16_20.x * u_xlat16_50;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_50 = min(max(u_xlat16_50, 0.0), 1.0);
#else
    u_xlat16_50 = clamp(u_xlat16_50, 0.0, 1.0);
#endif
    u_xlat16_2.xyz = _DepthFoamColor.xyz * u_xlat16_2.xyz + (-u_xlat1.xyw);
    u_xlat16_2.xyz = vec3(u_xlat16_50) * u_xlat16_2.xyz + u_xlat1.xyw;
    u_xlat1.xyz = u_xlat6.xyz * vec3(u_xlat21) + u_xlat16_2.xyz;
    u_xlat0.w = u_xlat4.x * vs_COLOR0.w;
    u_xlat4.xyz = vs_TEXCOORD5.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat5.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat5.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat5.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat49 = dot(u_xlat4.xyz, u_xlat5.xyz);
    u_xlat4.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat4.x = sqrt(u_xlat4.x);
    u_xlat20.y = u_xlat4.x * _HeigtFogParams.y;
    u_xlat52 = u_xlat4.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat52 = min(max(u_xlat52, 0.0), 1.0);
#else
    u_xlat52 = clamp(u_xlat52, 0.0, 1.0);
#endif
    u_xlat5.x = (-u_xlat52) + 2.0;
    u_xlat52 = u_xlat52 * u_xlat5.x;
    u_xlat5.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb49 = !!((-u_xlat49)>=u_xlat5.x);
#else
    u_xlatb49 = (-u_xlat49)>=u_xlat5.x;
#endif
    u_xlat5.x = u_xlat52 * _HeigtFogColDelta.w;
    u_xlat49 = (u_xlatb49) ? u_xlat5.x : u_xlat52;
    u_xlat49 = log2(u_xlat49);
    u_xlat49 = u_xlat49 * unity_FogColor.w;
    u_xlat49 = exp2(u_xlat49);
    u_xlat49 = min(u_xlat49, _HeigtFogColBase.w);
    u_xlat52 = vs_TEXCOORD5.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat52 = min(max(u_xlat52, 0.0), 1.0);
#else
    u_xlat52 = clamp(u_xlat52, 0.0, 1.0);
#endif
    u_xlat16_2.x = (-u_xlat52) + 2.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat52;
    u_xlat5.xyz = u_xlat16_2.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat52 = u_xlat4.x + (-_HeigtFogRamp.w);
    u_xlat52 = u_xlat52 * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat52 = min(max(u_xlat52, 0.0), 1.0);
#else
    u_xlat52 = clamp(u_xlat52, 0.0, 1.0);
#endif
    u_xlat6.xyz = (-u_xlat5.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat5.xyz = vec3(u_xlat52) * u_xlat6.xyz + u_xlat5.xyz;
    u_xlat52 = u_xlat4.y * _HeigtFogParams.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb53 = !!(0.00999999978<abs(u_xlat52));
#else
    u_xlatb53 = 0.00999999978<abs(u_xlat52);
#endif
    u_xlat6.x = u_xlat52 * -1.44269502;
    u_xlat6.x = exp2(u_xlat6.x);
    u_xlat6.x = (-u_xlat6.x) + 1.0;
    u_xlat52 = u_xlat6.x / u_xlat52;
    u_xlat16_2.x = (u_xlatb53) ? u_xlat52 : 1.0;
    u_xlat20.x = u_xlat4.y * _HeigtFogParams2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb52 = !!(0.00999999978<abs(u_xlat20.x));
#else
    u_xlatb52 = 0.00999999978<abs(u_xlat20.x);
#endif
    u_xlat53 = u_xlat20.x * -1.44269502;
    u_xlat53 = exp2(u_xlat53);
    u_xlat53 = (-u_xlat53) + 1.0;
    u_xlat20.x = u_xlat53 / u_xlat20.x;
    u_xlat16_2.y = (u_xlatb52) ? u_xlat20.x : 1.0;
    u_xlat20.x = u_xlat4.x * _HeigtFogParams2.y;
    u_xlat16_2.xy = u_xlat16_2.xy * u_xlat20.yx;
    u_xlat16_2.x = exp2((-u_xlat16_2.x));
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_18.x = exp2((-u_xlat16_2.y));
    u_xlat16_2.y = (-u_xlat16_18.x) + 1.0;
    u_xlat16_2.xy = max(u_xlat16_2.xy, vec2(0.0, 0.0));
    u_xlat16_2.x = u_xlat16_2.y + u_xlat16_2.x;
    u_xlat4.x = u_xlat4.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat16_18.x = (-u_xlat4.x) + 2.0;
    u_xlat16_18.x = u_xlat16_18.x * u_xlat4.x;
    u_xlat4.x = u_xlat16_18.x * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat4.x = u_xlat4.x + 1.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat4.x;
    u_xlat4.x = min(u_xlat16_2.x, _HeigtFogColBase.w);
    u_xlat20.x = vs_TEXCOORD5.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat20.x = min(max(u_xlat20.x, 0.0), 1.0);
#else
    u_xlat20.x = clamp(u_xlat20.x, 0.0, 1.0);
#endif
    u_xlat20.xyz = u_xlat20.xxx * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    u_xlat5.xyz = vec3(u_xlat49) * u_xlat5.xyz;
    u_xlat53 = (-u_xlat4.x) + 1.0;
    u_xlat5.xyz = vec3(u_xlat53) * u_xlat5.xyz;
    u_xlat4.xyz = u_xlat20.xyz * u_xlat4.xxx + u_xlat5.xyz;
    u_xlat49 = (-u_xlat49) + 1.0;
    u_xlat49 = u_xlat53 * u_xlat49;
    u_xlat0.xyz = vec3(u_xlat49) * u_xlat1.xyz + u_xlat4.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "MSAA_INTERPOLATION" "MHY_SHADER_LOW" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	mediump float _MHYZBias;
uniform 	vec4 hlslcc_mtx4x4_mhyJitteredVP[4];
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
out highp vec4 vs_TEXCOORD9;
out highp vec4 vs_TEXCOORD10;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
vec4 u_xlat4;
bool u_xlatb4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
mediump vec4 u_xlat16_6;
vec4 u_xlat7;
mediump vec3 u_xlat16_8;
float u_xlat11;
vec3 u_xlat13;
mediump float u_xlat16_14;
float u_xlat27;
bool u_xlatb27;
float u_xlat29;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4_mhyJitteredVP[1];
    u_xlat2 = hlslcc_mtx4x4_mhyJitteredVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4_mhyJitteredVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4_mhyJitteredVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat3.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    u_xlat3.xyw = u_xlat2.xyw;
    gl_Position = u_xlat3;
    vs_COLOR0 = in_COLOR0;
    u_xlat2.xyw = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat27 = u_xlat2.y * _HeigtFogParams.x;
    u_xlat4.x = u_xlat27 * -1.44269502;
    u_xlat4.x = exp2(u_xlat4.x);
    u_xlat4.x = (-u_xlat4.x) + 1.0;
    u_xlat4.x = u_xlat4.x / u_xlat27;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(0.00999999978<abs(u_xlat27));
#else
    u_xlatb27 = 0.00999999978<abs(u_xlat27);
#endif
    u_xlat16_5.x = (u_xlatb27) ? u_xlat4.x : 1.0;
    u_xlat27 = dot(u_xlat2.xyw, u_xlat2.xyw);
    u_xlat27 = sqrt(u_xlat27);
    u_xlat4.x = u_xlat27 * _HeigtFogParams.y;
    u_xlat16_5.x = u_xlat4.x * u_xlat16_5.x;
    u_xlat16_5.x = exp2((-u_xlat16_5.x));
    u_xlat16_5.x = (-u_xlat16_5.x) + 1.0;
    u_xlat4.x = u_xlat2.y * _HeigtFogParams2.x;
    u_xlat13.x = u_xlat4.x * -1.44269502;
    u_xlat13.x = exp2(u_xlat13.x);
    u_xlat13.x = (-u_xlat13.x) + 1.0;
    u_xlat13.x = u_xlat13.x / u_xlat4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(0.00999999978<abs(u_xlat4.x));
#else
    u_xlatb4 = 0.00999999978<abs(u_xlat4.x);
#endif
    u_xlat16_14 = (u_xlatb4) ? u_xlat13.x : 1.0;
    u_xlat4.x = u_xlat27 * _HeigtFogParams2.y;
    u_xlat16_14 = u_xlat4.x * u_xlat16_14;
    u_xlat16_14 = exp2((-u_xlat16_14));
    u_xlat16_5.y = (-u_xlat16_14) + 1.0;
    u_xlat16_5.xy = max(u_xlat16_5.xy, vec2(0.0, 0.0));
    u_xlat16_5.x = u_xlat16_5.y + u_xlat16_5.x;
    u_xlat4.x = u_xlat27 * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat16_14 = (-u_xlat4.x) + 2.0;
    u_xlat16_14 = u_xlat4.x * u_xlat16_14;
    u_xlat4.x = u_xlat16_14 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat4.x = u_xlat4.x + 1.0;
    u_xlat16_5.x = u_xlat4.x * u_xlat16_5.x;
    u_xlat4.x = min(u_xlat16_5.x, _HeigtFogColBase.w);
    u_xlat13.x = (-u_xlat4.x) + 1.0;
    u_xlat6.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat6.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat6.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat2.x = dot(u_xlat2.xyw, u_xlat6.xyz);
    u_xlat11 = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!((-u_xlat2.x)>=u_xlat11);
#else
    u_xlatb2 = (-u_xlat2.x)>=u_xlat11;
#endif
    u_xlat11 = u_xlat27 * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat11 = min(max(u_xlat11, 0.0), 1.0);
#else
    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
#endif
    u_xlat27 = u_xlat27 + (-_HeigtFogRamp.w);
    u_xlat27 = u_xlat27 * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
    u_xlat29 = (-u_xlat11) + 2.0;
    u_xlat11 = u_xlat29 * u_xlat11;
    u_xlat29 = u_xlat11 * _HeigtFogColDelta.w;
    u_xlat2.x = (u_xlatb2) ? u_xlat29 : u_xlat11;
    u_xlat2.x = log2(u_xlat2.x);
    u_xlat2.x = u_xlat2.x * unity_FogColor.w;
    u_xlat2.x = exp2(u_xlat2.x);
    u_xlat2.x = min(u_xlat2.x, _HeigtFogColBase.w);
    u_xlat11 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat11 = min(max(u_xlat11, 0.0), 1.0);
#else
    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
#endif
    u_xlat16_5.x = (-u_xlat11) + 2.0;
    u_xlat16_5.x = u_xlat11 * u_xlat16_5.x;
    u_xlat6.xyz = u_xlat16_5.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat7.xyz = (-u_xlat6.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat6.xyz = vec3(u_xlat27) * u_xlat7.xyz + u_xlat6.xyz;
    u_xlat6.xyz = u_xlat2.xxx * u_xlat6.xyz;
    u_xlat27 = (-u_xlat2.x) + 1.0;
    vs_TEXCOORD0.w = u_xlat13.x * u_xlat27;
    u_xlat2.xyw = u_xlat13.xxx * u_xlat6.xyz;
    u_xlat27 = u_xlat0.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
    u_xlat13.xyz = vec3(u_xlat27) * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    vs_TEXCOORD0.xyz = u_xlat13.xyz * u_xlat4.xxx + u_xlat2.xyw;
    u_xlat4.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat4.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat4.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat27 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat4.xyz = vec3(u_xlat27) * u_xlat4.xyz;
    u_xlat16_5.x = u_xlat4.y * u_xlat4.y;
    u_xlat16_5.x = u_xlat4.x * u_xlat4.x + (-u_xlat16_5.x);
    u_xlat16_6 = u_xlat4.yzzx * u_xlat4.xyzz;
    u_xlat16_8.x = dot(unity_SHBr, u_xlat16_6);
    u_xlat16_8.y = dot(unity_SHBg, u_xlat16_6);
    u_xlat16_8.z = dot(unity_SHBb, u_xlat16_6);
    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_8.xyz;
    u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat4.w = 1.0;
    u_xlat16_8.x = dot(unity_SHAr, u_xlat4);
    u_xlat16_8.y = dot(unity_SHAg, u_xlat4);
    u_xlat16_8.z = dot(unity_SHAb, u_xlat4);
    u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_8.xyz;
    vs_TEXCOORD1.xyz = u_xlat16_5.xyz;
    vs_TEXCOORD1.w = 1.0;
    u_xlat27 = u_xlat3.y * _ProjectionParams.x;
    u_xlat7.w = u_xlat27 * 0.5;
    u_xlat7.xz = u_xlat3.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.z = u_xlat2.z;
    u_xlat3.xy = u_xlat7.zz + u_xlat7.xw;
    vs_TEXCOORD2 = u_xlat3;
    vs_TEXCOORD4.xyw = u_xlat3.xyw;
    u_xlat27 = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat27 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat27;
    u_xlat27 = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat27;
    u_xlat27 = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat27;
    vs_TEXCOORD3.z = (-u_xlat27);
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD3.w = 0.0;
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD5.w = 0.0;
    vs_TEXCOORD6.xyz = u_xlat4.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[1].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].www + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * in_POSITION0.yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.zzz + u_xlat1.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.www + u_xlat1.xyz;
    vs_TEXCOORD7.xyz = u_xlat1.xyz * vec3(-1.0, -1.0, 1.0);
    vs_TEXCOORD7.w = 0.0;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat27 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat1.xyz = vec3(u_xlat27) * u_xlat1.xyz;
    vs_TEXCOORD8.xyz = u_xlat1.xyz;
    vs_TEXCOORD8.w = 0.0;
    u_xlat2.xyz = u_xlat1.yzx * u_xlat4.zxy;
    u_xlat1.xyz = u_xlat4.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
    u_xlat27 = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD9.xyz = vec3(u_xlat27) * u_xlat1.xyz;
    vs_TEXCOORD9.w = 0.0;
    u_xlat27 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat27 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat27;
    vs_TEXCOORD10.w = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat27;
    vs_TEXCOORD10.xyz = u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowPos[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	mediump vec4 _DepthFoamMask_ST;
uniform 	mediump float _DepthFoamSpeed;
uniform 	mediump vec4 _DepthFoamColor;
uniform 	mediump float _DepthFoamExtent;
uniform 	mediump float _DepthFoamDistance;
uniform 	mediump float _DepthFoamSubdivision;
uniform 	mediump float _DepthFoamWidth;
uniform 	mediump float _DepthFoamPhaseScale;
uniform 	mediump float _DepthFoamCloseFadeOffset;
uniform 	mediump float _DepthFoamCloseFadeDistance;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _NormalMapScale;
uniform 	float _Normal01_U_Speed;
uniform 	float _Normal01_VSpeed;
uniform 	float _NormalMapBias;
uniform 	float _Normal02_U_Speed;
uniform 	float _Normal02_V_Speed;
uniform 	float _RefractionIntensity;
uniform 	float _OpacityByDepth;
uniform 	float _SpecularIntensity;
uniform 	vec3 _ES_MoonDirection;
uniform 	vec3 _ES_SunDirection;
uniform 	float _Gloss;
uniform 	float _ShoreTransparency;
uniform 	float _SpecularPower;
uniform 	vec4 _ShallowColor;
uniform 	float _ShoreFade;
uniform 	vec4 _DeepColor;
uniform 	float _DeepColorDepth;
uniform 	float _DeepColorFade;
uniform 	vec4 _DistortionIntensity;
uniform 	float _ReflectionIntensity;
uniform 	float _FresnelPower;
uniform 	float _ShoreReflectionFade;
uniform 	mediump float _ProjectUVScale;
uniform 	vec4 _ReflectionSkyCubeMap_HDR;
uniform lowp sampler2D _Normal01;
uniform lowp sampler2D _Normal02;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _SceneScaledBufferBeforTransParent;
uniform lowp samplerCube _ReflectionSkyCubeMap;
uniform lowp sampler2D _DepthFoamMask;
uniform lowp sampler2DShadow hlslcc_zcmp_CascadeShadowMapTexture;
uniform lowp sampler2D _CascadeShadowMapTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD8;
in highp vec4 vs_TEXCOORD9;
in highp vec4 vs_TEXCOORD10;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec4 u_xlatb0;
vec4 u_xlat1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec4 u_xlat4;
vec3 u_xlat5;
bool u_xlatb5;
vec3 u_xlat6;
vec4 u_xlat7;
vec3 u_xlat8;
vec3 u_xlat9;
lowp vec3 u_xlat10_9;
vec3 u_xlat10;
vec3 u_xlat11;
vec3 u_xlat12;
vec3 u_xlat13;
vec3 u_xlat14;
mediump float u_xlat16_15;
vec2 u_xlat17;
mediump vec2 u_xlat16_18;
vec3 u_xlat20;
mediump vec3 u_xlat16_20;
lowp float u_xlat10_20;
int u_xlati20;
uint u_xlatu20;
bool u_xlatb20;
float u_xlat21;
float u_xlat33;
vec2 u_xlat36;
mediump float u_xlat16_36;
lowp float u_xlat10_36;
bool u_xlatb36;
float u_xlat49;
bool u_xlatb49;
mediump float u_xlat16_50;
float u_xlat52;
mediump float u_xlat16_52;
bool u_xlatb52;
float u_xlat53;
bool u_xlatb53;
float u_xlat54;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD5.zx * vec2(vec2(_ProjectUVScale, _ProjectUVScale));
    u_xlat1.x = _Time.y * _Normal01_U_Speed + u_xlat0.y;
    u_xlat1.yz = _Time.yy * vec2(_Normal01_VSpeed, _Normal02_U_Speed) + u_xlat0.xy;
    u_xlat1.w = _Time.y * _Normal02_V_Speed + u_xlat0.x;
    u_xlat10_0.xyz = texture(_Normal01, u_xlat1.xy, _NormalMapBias).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_2.xy = u_xlat16_0.xy * vec2(_NormalMapScale);
    u_xlat10_1.xyz = texture(_Normal02, u_xlat1.zw, _NormalMapBias).xyz;
    u_xlat16_0.w = -1.0;
    u_xlat16_3.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.wwz;
    u_xlat16_3.xy = u_xlat16_3.xy * vec2(_NormalMapScale);
    u_xlat16_2.z = -1.0;
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
    u_xlat1.x = float(1.0) / vs_TEXCOORD4.w;
    u_xlat17.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat17.x = texture(_CameraDepthTexture, u_xlat17.xy).x;
    u_xlat17.x = _ZBufferParams.z * u_xlat17.x + _ZBufferParams.w;
    u_xlat17.x = float(1.0) / u_xlat17.x;
    u_xlat33 = vs_TEXCOORD10.w + 9.99999975e-05;
    u_xlat33 = (-u_xlat17.x) / u_xlat33;
    u_xlat33 = vs_TEXCOORD10.y * u_xlat33 + _WorldSpaceCameraPos.y;
    u_xlat33 = (-u_xlat33) + vs_TEXCOORD5.y;
    u_xlat4.xy = u_xlat16_2.xy * vec2(vec2(_RefractionIntensity, _RefractionIntensity));
    u_xlat1.x = u_xlat1.x * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.xw = u_xlat1.xx * u_xlat4.xy;
    u_xlat1.xw = u_xlat1.xw * vs_TEXCOORD4.ww;
    u_xlat17.x = u_xlat17.x + (-vs_TEXCOORD4.w);
#ifdef UNITY_ADRENO_ES3
    u_xlat17.x = min(max(u_xlat17.x, 0.0), 1.0);
#else
    u_xlat17.x = clamp(u_xlat17.x, 0.0, 1.0);
#endif
    u_xlat4.xy = u_xlat17.xx * u_xlat1.xw;
    u_xlat4.z = 0.0;
    u_xlat1.xyw = u_xlat4.xyz + vs_TEXCOORD4.xyw;
    u_xlat1.xy = u_xlat1.xy / u_xlat1.ww;
    u_xlat1.x = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat1.x = _ZBufferParams.z * u_xlat1.x + _ZBufferParams.w;
    u_xlat1.x = float(1.0) / u_xlat1.x;
    u_xlat1.x = u_xlat1.x + (-vs_TEXCOORD4.w);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.xyw = u_xlat1.xxx * u_xlat4.xyz + vs_TEXCOORD4.xyw;
    u_xlat4.xy = u_xlat1.xy / u_xlat1.ww;
    u_xlat49 = texture(_CameraDepthTexture, u_xlat4.xy).x;
    u_xlat49 = _ZBufferParams.z * u_xlat49 + _ZBufferParams.w;
    u_xlat49 = float(1.0) / u_xlat49;
    u_xlat49 = u_xlat49 + (-vs_TEXCOORD4.w);
    u_xlat4.x = 0.100000001 / _OpacityByDepth;
    u_xlat16_3.xz = u_xlat16_2.xy;
    u_xlat16_3.y = 1.0;
    u_xlat16_20.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
    u_xlat16_20.x = inversesqrt(u_xlat16_20.x);
    u_xlat16_20.xyz = u_xlat16_3.xyz * u_xlat16_20.xxx;
#ifdef UNITY_ADRENO_ES3
    u_xlatb5 = !!(0.0>=_ES_MoonDirection.y);
#else
    u_xlatb5 = 0.0>=_ES_MoonDirection.y;
#endif
    u_xlat5.xyz = (bool(u_xlatb5)) ? _ES_SunDirection.xyz : _ES_MoonDirection.xyz;
    u_xlat6.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat53 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat54 = inversesqrt(u_xlat53);
    u_xlat7.xyz = vec3(u_xlat54) * u_xlat6.xyz;
    u_xlat5.xyz = u_xlat6.xyz * vec3(u_xlat54) + u_xlat5.xyz;
    u_xlat6.x = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat5.xyz = u_xlat5.xyz * u_xlat6.xxx;
    u_xlat20.x = dot(u_xlat16_20.xyz, u_xlat5.xyz);
    u_xlat36.x = _Gloss * 128.0;
    u_xlat20.x = max(u_xlat20.x, 9.99999975e-05);
    u_xlat20.x = log2(u_xlat20.x);
    u_xlat20.x = u_xlat20.x * u_xlat36.x;
    u_xlat20.x = exp2(u_xlat20.x);
    u_xlat20.x = u_xlat20.x * _SpecularIntensity;
    u_xlat20.x = max(u_xlat20.x, 0.0);
    u_xlat20.x = min(u_xlat20.x, 16.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb36 = !!(_ES_MoonDirection.y>=9.99999975e-05);
#else
    u_xlatb36 = _ES_MoonDirection.y>=9.99999975e-05;
#endif
    u_xlat36.x = u_xlatb36 ? 1.0 : float(0.0);
    u_xlat52 = _ES_MoonDirection.y + -1.0;
    u_xlat36.x = u_xlat36.x * u_xlat52 + 1.0;
    u_xlat4.w = float(1.0) / _ShoreTransparency;
    u_xlat5.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat5.x = inversesqrt(u_xlat5.x);
    u_xlat5.xyz = u_xlat5.xxx * vs_TEXCOORD6.xyz;
    u_xlat5.x = dot(u_xlat7.xyz, u_xlat5.xyz);
    u_xlat5.x = (-u_xlat5.x) + 1.0;
    u_xlat5.x = max(u_xlat5.x, 9.99999975e-05);
    u_xlat5.x = log2(u_xlat5.x);
    u_xlat21 = u_xlat5.x * _SpecularPower;
    u_xlat21 = exp2(u_xlat21);
    u_xlat6.xyz = u_xlat36.xxx * _LightColor0.xyz;
    u_xlat6.xyz = u_xlat20.xxx * u_xlat6.xyz;
    u_xlat20.x = u_xlat49 + -1.0;
    u_xlat20.x = u_xlat4.w * u_xlat20.x;
    u_xlat20.x = u_xlat20.x * 0.100000001;
#ifdef UNITY_ADRENO_ES3
    u_xlat20.x = min(max(u_xlat20.x, 0.0), 1.0);
#else
    u_xlat20.x = clamp(u_xlat20.x, 0.0, 1.0);
#endif
    u_xlat6.xyz = u_xlat20.xxx * u_xlat6.xyz;
    u_xlat4.xy = vec2(u_xlat49) * u_xlat4.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.xy = min(max(u_xlat4.xy, 0.0), 1.0);
#else
    u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);
#endif
    u_xlat20.x = max(u_xlat4.y, 9.99999975e-05);
    u_xlat20.x = log2(u_xlat20.x);
    u_xlat20.x = u_xlat20.x * _ShoreFade;
    u_xlat20.x = exp2(u_xlat20.x);
    u_xlat8.xyz = _ShallowColor.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat8.xyz = u_xlat20.xxx * u_xlat8.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat1.xy = u_xlat1.xy / vs_TEXCOORD4.ww;
    u_xlat10_9.xyz = texture(_SceneScaledBufferBeforTransParent, u_xlat1.xy).xyz;
    u_xlat10.xyz = u_xlat8.xyz * u_xlat10_9.xyz;
    u_xlat1.x = 0.100000001 / _DeepColorDepth;
    u_xlat1.x = u_xlat1.x * u_xlat49;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.x = max(u_xlat1.x, 9.99999975e-05);
    u_xlat1.x = log2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _DeepColorFade;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat11.xyz = (-u_xlat8.xyz) * u_xlat10_9.xyz + _DeepColor.xyz;
    u_xlat11.xyz = u_xlat1.xxx * u_xlat11.xyz + u_xlat10.xyz;
    u_xlat12.xyz = u_xlat16_2.xyz * _DistortionIntensity.xyz;
    u_xlat13.x = vs_TEXCOORD8.x;
    u_xlat13.y = vs_TEXCOORD9.x;
    u_xlat13.z = vs_TEXCOORD6.x;
    u_xlat13.x = dot(u_xlat13.xyz, u_xlat12.xyz);
    u_xlat14.x = vs_TEXCOORD8.y;
    u_xlat14.y = vs_TEXCOORD9.y;
    u_xlat14.z = vs_TEXCOORD6.y;
    u_xlat13.y = dot(u_xlat14.xyz, u_xlat12.xyz);
    u_xlat14.x = vs_TEXCOORD8.z;
    u_xlat14.y = vs_TEXCOORD9.z;
    u_xlat14.z = vs_TEXCOORD6.z;
    u_xlat13.z = dot(u_xlat14.xyz, u_xlat12.xyz);
    u_xlat1.x = dot(u_xlat13.xyz, u_xlat13.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat12.xyz = u_xlat1.xxx * u_xlat13.xyz;
    u_xlat1.x = dot((-u_xlat7.xyz), u_xlat12.xyz);
    u_xlat1.x = u_xlat1.x + u_xlat1.x;
    u_xlat7.xyz = u_xlat12.xyz * (-u_xlat1.xxx) + (-u_xlat7.xyz);
    u_xlat10_0 = textureLod(_ReflectionSkyCubeMap, u_xlat7.xyz, 0.0);
    u_xlat16_2.x = u_xlat10_0.w + -1.0;
    u_xlat16_2.x = _ReflectionSkyCubeMap_HDR.w * u_xlat16_2.x + 1.0;
    u_xlat16_2.x = log2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * _ReflectionSkyCubeMap_HDR.y;
    u_xlat16_2.x = exp2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * _ReflectionSkyCubeMap_HDR.x;
    u_xlat1.x = u_xlat5.x * _FresnelPower;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _ReflectionIntensity;
    u_xlat17.x = float(1.0) / _ShoreReflectionFade;
    u_xlat17.x = u_xlat17.x * u_xlat49;
#ifdef UNITY_ADRENO_ES3
    u_xlat17.x = min(max(u_xlat17.x, 0.0), 1.0);
#else
    u_xlat17.x = clamp(u_xlat17.x, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat17.x * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat7.xyz = u_xlat16_2.xxx * u_xlat10_0.xyz + (-u_xlat11.xyz);
    u_xlat1.xyw = u_xlat1.xxx * u_xlat7.xyz + u_xlat11.xyz;
    u_xlat1.xyw = (-u_xlat8.xyz) * u_xlat10_9.xyz + u_xlat1.xyw;
    u_xlat1.xyw = u_xlat20.xxx * u_xlat1.xyw + u_xlat10.xyz;
    u_xlat20.x = (-vs_TEXCOORD5.y) * _WorldSpaceLightPos0.w + _WorldSpaceLightPos0.y;
    u_xlat16_2.x = max(u_xlat20.x, 0.0);
    u_xlat20.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowSplitSpheres[0].xyz);
    u_xlat7.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowSplitSpheres[1].xyz);
    u_xlat8.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowSplitSpheres[2].xyz);
    u_xlat9.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowSplitSpheres[3].xyz);
    u_xlat0.x = dot(u_xlat20.xyz, u_xlat20.xyz);
    u_xlat0.y = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat0.z = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat0.w = dot(u_xlat9.xyz, u_xlat9.xyz);
    u_xlatb0 = lessThan(u_xlat0, unity_ShadowSplitSqRadii);
    u_xlat0 = mix(vec4(0.0, 0.0, 0.0, 0.0), vec4(1.0, 1.0, 1.0, 1.0), vec4(u_xlatb0));
    u_xlat16_18.x = u_xlat0.y + u_xlat0.x;
    u_xlat16_18.y = u_xlat0.z + u_xlat16_18.x;
    u_xlat3.x = -0.0;
    u_xlat3.y = (-u_xlat0.x);
    u_xlat3.zw = (-u_xlat16_18.xy);
    u_xlat0 = u_xlat0 + u_xlat3;
    u_xlat0 = max(u_xlat0, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat16_18.x = dot(u_xlat0, vec4(1.0, 1.0, 1.0, 1.0));
#ifdef UNITY_ADRENO_ES3
    u_xlatb20 = !!(u_xlat16_18.x>=0.5);
#else
    u_xlatb20 = u_xlat16_18.x>=0.5;
#endif
    if(u_xlatb20){
        u_xlat20.x = dot(u_xlat0.yzw, vec3(1.0, 2.0, 3.0));
        u_xlat20.x = min(u_xlat20.x, 3.0);
        u_xlatu20 = uint(u_xlat20.x);
        u_xlat7.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowPos[int(u_xlatu20)].xyz);
        u_xlati20 = int(u_xlatu20) << 2;
        u_xlat8.xyz = u_xlat7.yyy * hlslcc_mtx4x4unity_WorldToShadow[(u_xlati20 + 1)].xyz;
        u_xlat7.xyw = hlslcc_mtx4x4unity_WorldToShadow[u_xlati20].xyz * u_xlat7.xxx + u_xlat8.xyz;
        u_xlat7.xyz = hlslcc_mtx4x4unity_WorldToShadow[(u_xlati20 + 2)].xyz * u_xlat7.zzz + u_xlat7.xyw;
        u_xlat20.xyz = u_xlat7.xyz + hlslcc_mtx4x4unity_WorldToShadow[(u_xlati20 + 3)].xyz;
        vec3 txVec0 = vec3(u_xlat20.xy,u_xlat20.z);
        u_xlat10_20 = textureLod(hlslcc_zcmp_CascadeShadowMapTexture, txVec0, 0.0);
        u_xlat16_36 = (-_LightShadowData.x) + 1.0;
        u_xlat20.x = u_xlat10_20 * u_xlat16_36 + _LightShadowData.x;
    } else {
        u_xlat20.x = 1.0;
    //ENDIF
    }
    u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;
    u_xlat20.xyz = u_xlat16_2.xyz * u_xlat20.xxx + vs_TEXCOORD1.xyz;
    u_xlat16_2.xyz = u_xlat20.xyz * vec3(0.300000012, 0.300000012, 0.300000012) + vec3(0.699999988, 0.699999988, 0.699999988);
    u_xlat20.x = sqrt(u_xlat53);
    u_xlat16_50 = u_xlat20.x + (-_DepthFoamCloseFadeOffset);
    u_xlat16_50 = u_xlat16_50 / _DepthFoamCloseFadeDistance;
    u_xlat16_15 = vs_COLOR0.x * _DepthFoamExtent;
    u_xlat33 = max(u_xlat33, 0.0);
    u_xlat33 = min(u_xlat16_15, u_xlat33);
    u_xlat16_15 = _DepthFoamExtent * vs_COLOR0.x + 9.99999975e-05;
    u_xlat33 = u_xlat33 / u_xlat16_15;
    u_xlat33 = (-u_xlat33) + 1.0;
    u_xlat36.xy = vec2(_Time.y * _DepthFoamMask_ST.z, _Time.y * _DepthFoamMask_ST.w);
    u_xlat36.xy = fract(u_xlat36.xy);
    u_xlat36.xy = _DepthFoamMask_ST.xy * vs_TEXCOORD5.xz + u_xlat36.xy;
    u_xlat10_36 = texture(_DepthFoamMask, u_xlat36.xy, -1.0).x;
    u_xlat52 = vs_TEXCOORD5.z + vs_TEXCOORD5.x;
    u_xlat52 = u_xlat52 * _DepthFoamPhaseScale;
    u_xlat52 = _DepthFoamSpeed * _Time.y + u_xlat52;
    u_xlat5.x = (-u_xlat33) + 1.0;
    u_xlat16_15 = _DepthFoamSubdivision * u_xlat33 + u_xlat52;
    u_xlat16_15 = sin(u_xlat16_15);
    u_xlat16_15 = _DepthFoamWidth * u_xlat33 + u_xlat16_15;
    u_xlat16_52 = u_xlat10_36 * 2.0 + -1.0;
    u_xlat52 = u_xlat16_52 + u_xlat16_15;
#ifdef UNITY_ADRENO_ES3
    u_xlatb52 = !!(u_xlat52>=u_xlat5.x);
#else
    u_xlatb52 = u_xlat52>=u_xlat5.x;
#endif
    u_xlat52 = u_xlatb52 ? 1.0 : float(0.0);
    u_xlat36.x = u_xlat52 * u_xlat10_36;
    u_xlat16_15 = _DepthFoamDistance + 9.99999975e-05;
    u_xlat16_15 = u_xlat20.x / u_xlat16_15;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_15 = min(max(u_xlat16_15, 0.0), 1.0);
#else
    u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);
#endif
    u_xlat16_20.x = (-u_xlat16_15) + 1.0;
    u_xlat16_15 = vs_COLOR0.y * _DepthFoamColor.w;
    u_xlat16_50 = u_xlat16_50 * u_xlat16_15;
    u_xlat16_50 = u_xlat36.x * u_xlat16_50;
    u_xlat16_50 = u_xlat33 * u_xlat16_50;
    u_xlat16_50 = u_xlat16_20.x * u_xlat16_50;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_50 = min(max(u_xlat16_50, 0.0), 1.0);
#else
    u_xlat16_50 = clamp(u_xlat16_50, 0.0, 1.0);
#endif
    u_xlat16_2.xyz = _DepthFoamColor.xyz * u_xlat16_2.xyz + (-u_xlat1.xyw);
    u_xlat16_2.xyz = vec3(u_xlat16_50) * u_xlat16_2.xyz + u_xlat1.xyw;
    u_xlat1.xyz = u_xlat6.xyz * vec3(u_xlat21) + u_xlat16_2.xyz;
    u_xlat0.w = u_xlat4.x * vs_COLOR0.w;
    u_xlat4.xyz = vs_TEXCOORD5.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat5.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat5.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat5.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat49 = dot(u_xlat4.xyz, u_xlat5.xyz);
    u_xlat4.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat4.x = sqrt(u_xlat4.x);
    u_xlat20.y = u_xlat4.x * _HeigtFogParams.y;
    u_xlat52 = u_xlat4.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat52 = min(max(u_xlat52, 0.0), 1.0);
#else
    u_xlat52 = clamp(u_xlat52, 0.0, 1.0);
#endif
    u_xlat5.x = (-u_xlat52) + 2.0;
    u_xlat52 = u_xlat52 * u_xlat5.x;
    u_xlat5.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb49 = !!((-u_xlat49)>=u_xlat5.x);
#else
    u_xlatb49 = (-u_xlat49)>=u_xlat5.x;
#endif
    u_xlat5.x = u_xlat52 * _HeigtFogColDelta.w;
    u_xlat49 = (u_xlatb49) ? u_xlat5.x : u_xlat52;
    u_xlat49 = log2(u_xlat49);
    u_xlat49 = u_xlat49 * unity_FogColor.w;
    u_xlat49 = exp2(u_xlat49);
    u_xlat49 = min(u_xlat49, _HeigtFogColBase.w);
    u_xlat52 = vs_TEXCOORD5.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat52 = min(max(u_xlat52, 0.0), 1.0);
#else
    u_xlat52 = clamp(u_xlat52, 0.0, 1.0);
#endif
    u_xlat16_2.x = (-u_xlat52) + 2.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat52;
    u_xlat5.xyz = u_xlat16_2.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat52 = u_xlat4.x + (-_HeigtFogRamp.w);
    u_xlat52 = u_xlat52 * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat52 = min(max(u_xlat52, 0.0), 1.0);
#else
    u_xlat52 = clamp(u_xlat52, 0.0, 1.0);
#endif
    u_xlat6.xyz = (-u_xlat5.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat5.xyz = vec3(u_xlat52) * u_xlat6.xyz + u_xlat5.xyz;
    u_xlat52 = u_xlat4.y * _HeigtFogParams.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb53 = !!(0.00999999978<abs(u_xlat52));
#else
    u_xlatb53 = 0.00999999978<abs(u_xlat52);
#endif
    u_xlat6.x = u_xlat52 * -1.44269502;
    u_xlat6.x = exp2(u_xlat6.x);
    u_xlat6.x = (-u_xlat6.x) + 1.0;
    u_xlat52 = u_xlat6.x / u_xlat52;
    u_xlat16_2.x = (u_xlatb53) ? u_xlat52 : 1.0;
    u_xlat20.x = u_xlat4.y * _HeigtFogParams2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb52 = !!(0.00999999978<abs(u_xlat20.x));
#else
    u_xlatb52 = 0.00999999978<abs(u_xlat20.x);
#endif
    u_xlat53 = u_xlat20.x * -1.44269502;
    u_xlat53 = exp2(u_xlat53);
    u_xlat53 = (-u_xlat53) + 1.0;
    u_xlat20.x = u_xlat53 / u_xlat20.x;
    u_xlat16_2.y = (u_xlatb52) ? u_xlat20.x : 1.0;
    u_xlat20.x = u_xlat4.x * _HeigtFogParams2.y;
    u_xlat16_2.xy = u_xlat16_2.xy * u_xlat20.yx;
    u_xlat16_2.x = exp2((-u_xlat16_2.x));
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_18.x = exp2((-u_xlat16_2.y));
    u_xlat16_2.y = (-u_xlat16_18.x) + 1.0;
    u_xlat16_2.xy = max(u_xlat16_2.xy, vec2(0.0, 0.0));
    u_xlat16_2.x = u_xlat16_2.y + u_xlat16_2.x;
    u_xlat4.x = u_xlat4.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat16_18.x = (-u_xlat4.x) + 2.0;
    u_xlat16_18.x = u_xlat16_18.x * u_xlat4.x;
    u_xlat4.x = u_xlat16_18.x * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat4.x = u_xlat4.x + 1.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat4.x;
    u_xlat4.x = min(u_xlat16_2.x, _HeigtFogColBase.w);
    u_xlat20.x = vs_TEXCOORD5.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat20.x = min(max(u_xlat20.x, 0.0), 1.0);
#else
    u_xlat20.x = clamp(u_xlat20.x, 0.0, 1.0);
#endif
    u_xlat20.xyz = u_xlat20.xxx * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    u_xlat5.xyz = vec3(u_xlat49) * u_xlat5.xyz;
    u_xlat53 = (-u_xlat4.x) + 1.0;
    u_xlat5.xyz = vec3(u_xlat53) * u_xlat5.xyz;
    u_xlat4.xyz = u_xlat20.xyz * u_xlat4.xxx + u_xlat5.xyz;
    u_xlat49 = (-u_xlat49) + 1.0;
    u_xlat49 = u_xlat53 * u_xlat49;
    u_xlat0.xyz = vec3(u_xlat49) * u_xlat1.xyz + u_xlat4.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "MSAA_INTERPOLATION" "MHY_SHADER_LOW" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	mediump float _MHYZBias;
uniform 	vec4 hlslcc_mtx4x4_mhyJitteredVP[4];
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
out highp vec4 vs_TEXCOORD9;
out highp vec4 vs_TEXCOORD10;
float u_xlat0;
int u_xlati0;
vec4 u_xlat1;
bool u_xlatb1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
bool u_xlatb4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
mediump vec4 u_xlat16_6;
vec4 u_xlat7;
mediump vec3 u_xlat16_8;
vec3 u_xlat9;
float u_xlat10;
float u_xlat13;
bool u_xlatb13;
mediump float u_xlat16_14;
float u_xlat22;
float u_xlat28;
float u_xlat31;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat9.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4_mhyJitteredVP[1];
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[3] * u_xlat2.wwww + u_xlat1;
    u_xlat3.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    u_xlat3.xyw = u_xlat1.xyw;
    gl_Position = u_xlat3;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.xyw = u_xlat9.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat4.x = u_xlat1.y * _HeigtFogParams.x;
    u_xlat13 = u_xlat4.x * -1.44269502;
    u_xlat13 = exp2(u_xlat13);
    u_xlat13 = (-u_xlat13) + 1.0;
    u_xlat13 = u_xlat13 / u_xlat4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(0.00999999978<abs(u_xlat4.x));
#else
    u_xlatb4 = 0.00999999978<abs(u_xlat4.x);
#endif
    u_xlat16_5.x = (u_xlatb4) ? u_xlat13 : 1.0;
    u_xlat4.x = dot(u_xlat1.xyw, u_xlat1.xyw);
    u_xlat4.x = sqrt(u_xlat4.x);
    u_xlat13 = u_xlat4.x * _HeigtFogParams.y;
    u_xlat16_5.x = u_xlat13 * u_xlat16_5.x;
    u_xlat16_5.x = exp2((-u_xlat16_5.x));
    u_xlat16_5.x = (-u_xlat16_5.x) + 1.0;
    u_xlat13 = u_xlat1.y * _HeigtFogParams2.x;
    u_xlat22 = u_xlat13 * -1.44269502;
    u_xlat22 = exp2(u_xlat22);
    u_xlat22 = (-u_xlat22) + 1.0;
    u_xlat22 = u_xlat22 / u_xlat13;
#ifdef UNITY_ADRENO_ES3
    u_xlatb13 = !!(0.00999999978<abs(u_xlat13));
#else
    u_xlatb13 = 0.00999999978<abs(u_xlat13);
#endif
    u_xlat16_14 = (u_xlatb13) ? u_xlat22 : 1.0;
    u_xlat13 = u_xlat4.x * _HeigtFogParams2.y;
    u_xlat16_14 = u_xlat13 * u_xlat16_14;
    u_xlat16_14 = exp2((-u_xlat16_14));
    u_xlat16_5.y = (-u_xlat16_14) + 1.0;
    u_xlat16_5.xy = max(u_xlat16_5.xy, vec2(0.0, 0.0));
    u_xlat16_5.x = u_xlat16_5.y + u_xlat16_5.x;
    u_xlat13 = u_xlat4.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat13 = min(max(u_xlat13, 0.0), 1.0);
#else
    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
#endif
    u_xlat16_14 = (-u_xlat13) + 2.0;
    u_xlat16_14 = u_xlat13 * u_xlat16_14;
    u_xlat13 = u_xlat16_14 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat13 = u_xlat13 + 1.0;
    u_xlat16_5.x = u_xlat13 * u_xlat16_5.x;
    u_xlat13 = min(u_xlat16_5.x, _HeigtFogColBase.w);
    u_xlat22 = (-u_xlat13) + 1.0;
    u_xlat31 = _ProjectionParams.z * 0.999899983;
    u_xlat6.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat6.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat6.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat1.x = dot(u_xlat1.xyw, u_xlat6.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!((-u_xlat1.x)>=u_xlat31);
#else
    u_xlatb1 = (-u_xlat1.x)>=u_xlat31;
#endif
    u_xlat10 = u_xlat4.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat10 = min(max(u_xlat10, 0.0), 1.0);
#else
    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
#endif
    u_xlat28 = u_xlat4.x + (-_HeigtFogRamp.w);
    u_xlat28 = u_xlat28 * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat28 = min(max(u_xlat28, 0.0), 1.0);
#else
    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
#endif
    u_xlat4.x = (-u_xlat10) + 2.0;
    u_xlat10 = u_xlat10 * u_xlat4.x;
    u_xlat4.x = u_xlat10 * _HeigtFogColDelta.w;
    u_xlat1.x = (u_xlatb1) ? u_xlat4.x : u_xlat10;
    u_xlat1.x = log2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * unity_FogColor.w;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat1.x = min(u_xlat1.x, _HeigtFogColBase.w);
    u_xlat10 = u_xlat9.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat10 = min(max(u_xlat10, 0.0), 1.0);
#else
    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
#endif
    u_xlat16_5.x = (-u_xlat10) + 2.0;
    u_xlat16_5.x = u_xlat10 * u_xlat16_5.x;
    u_xlat6.xyz = u_xlat16_5.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat7.xyz = (-u_xlat6.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat6.xyz = vec3(u_xlat28) * u_xlat7.xyz + u_xlat6.xyz;
    u_xlat6.xyz = u_xlat1.xxx * u_xlat6.xyz;
    u_xlat1.x = (-u_xlat1.x) + 1.0;
    vs_TEXCOORD0.w = u_xlat22 * u_xlat1.x;
    u_xlat1.xyw = vec3(u_xlat22) * u_xlat6.xyz;
    u_xlat4.x = u_xlat9.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat4.xzw = u_xlat4.xxx * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    vs_TEXCOORD0.xyz = u_xlat4.xzw * vec3(u_xlat13) + u_xlat1.xyw;
    vs_TEXCOORD1.w = 1.0;
    u_xlat4.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat4.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat4.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat1.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
    u_xlat16_5.x = u_xlat4.y * u_xlat4.y;
    u_xlat16_5.x = u_xlat4.x * u_xlat4.x + (-u_xlat16_5.x);
    u_xlat16_6 = u_xlat4.yzzx * u_xlat4.xyzz;
    u_xlat16_8.x = dot(unity_SHBr, u_xlat16_6);
    u_xlat16_8.y = dot(unity_SHBg, u_xlat16_6);
    u_xlat16_8.z = dot(unity_SHBb, u_xlat16_6);
    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_8.xyz;
    u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat4.w = 1.0;
    u_xlat16_8.x = dot(unity_SHAr, u_xlat4);
    u_xlat16_8.y = dot(unity_SHAg, u_xlat4);
    u_xlat16_8.z = dot(unity_SHAb, u_xlat4);
    u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_8.xyz;
    vs_TEXCOORD1.xyz = u_xlat16_5.xyz;
    u_xlat1.x = u_xlat3.y * _ProjectionParams.x;
    u_xlat7.w = u_xlat1.x * 0.5;
    u_xlat7.xz = u_xlat3.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.z = u_xlat1.z;
    u_xlat3.xy = u_xlat7.zz + u_xlat7.xw;
    vs_TEXCOORD2 = u_xlat3;
    vs_TEXCOORD4.xyw = u_xlat3.xyw;
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD3.w = 0.0;
    u_xlat1.x = u_xlat2.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat2.x + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat2.z + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat2.w + u_xlat1.x;
    vs_TEXCOORD3.z = (-u_xlat1.x);
    vs_TEXCOORD5.w = 0.0;
    vs_TEXCOORD5.xyz = u_xlat9.xyz;
    u_xlat9.xyz = (-u_xlat9.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD6.w = 0.0;
    vs_TEXCOORD6.xyz = u_xlat4.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].www + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * in_POSITION0.yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.zzz + u_xlat1.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.www + u_xlat1.xyz;
    vs_TEXCOORD7.xyz = u_xlat1.xyz * vec3(-1.0, -1.0, 1.0);
    vs_TEXCOORD7.w = 0.0;
    u_xlat1.xyz = in_TANGENT0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat0 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0 = inversesqrt(u_xlat0);
    u_xlat1.xyz = vec3(u_xlat0) * u_xlat1.xyz;
    vs_TEXCOORD8.xyz = u_xlat1.xyz;
    vs_TEXCOORD8.w = 0.0;
    u_xlat2.xyz = u_xlat1.yzx * u_xlat4.zxy;
    u_xlat1.xyz = u_xlat4.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
    u_xlat0 = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD9.xyz = vec3(u_xlat0) * u_xlat1.xyz;
    vs_TEXCOORD9.w = 0.0;
    u_xlat0 = u_xlat9.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat9.x + u_xlat0;
    vs_TEXCOORD10.w = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat9.z + u_xlat0;
    vs_TEXCOORD10.xyz = u_xlat9.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowPos[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	mediump vec4 _DepthFoamMask_ST;
uniform 	mediump float _DepthFoamSpeed;
uniform 	mediump vec4 _DepthFoamColor;
uniform 	mediump float _DepthFoamExtent;
uniform 	mediump float _DepthFoamDistance;
uniform 	mediump float _DepthFoamSubdivision;
uniform 	mediump float _DepthFoamWidth;
uniform 	mediump float _DepthFoamPhaseScale;
uniform 	mediump float _DepthFoamCloseFadeOffset;
uniform 	mediump float _DepthFoamCloseFadeDistance;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _NormalMapScale;
uniform 	float _Normal01_U_Speed;
uniform 	float _Normal01_VSpeed;
uniform 	float _NormalMapBias;
uniform 	float _Normal02_U_Speed;
uniform 	float _Normal02_V_Speed;
uniform 	float _RefractionIntensity;
uniform 	float _OpacityByDepth;
uniform 	float _SpecularIntensity;
uniform 	vec3 _ES_MoonDirection;
uniform 	vec3 _ES_SunDirection;
uniform 	float _Gloss;
uniform 	float _ShoreTransparency;
uniform 	float _SpecularPower;
uniform 	vec4 _ShallowColor;
uniform 	float _ShoreFade;
uniform 	vec4 _DeepColor;
uniform 	float _DeepColorDepth;
uniform 	float _DeepColorFade;
uniform 	vec4 _DistortionIntensity;
uniform 	float _ReflectionIntensity;
uniform 	float _FresnelPower;
uniform 	float _ShoreReflectionFade;
uniform 	mediump float _ProjectUVScale;
uniform 	vec4 _ReflectionSkyCubeMap_HDR;
uniform lowp sampler2D _Normal01;
uniform lowp sampler2D _Normal02;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _SceneScaledBufferBeforTransParent;
uniform lowp samplerCube _ReflectionSkyCubeMap;
uniform lowp sampler2D _DepthFoamMask;
uniform lowp sampler2DShadow hlslcc_zcmp_CascadeShadowMapTexture;
uniform lowp sampler2D _CascadeShadowMapTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD8;
in highp vec4 vs_TEXCOORD9;
in highp vec4 vs_TEXCOORD10;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec4 u_xlatb0;
vec4 u_xlat1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec4 u_xlat4;
vec3 u_xlat5;
bool u_xlatb5;
vec3 u_xlat6;
vec4 u_xlat7;
vec3 u_xlat8;
vec3 u_xlat9;
lowp vec3 u_xlat10_9;
vec3 u_xlat10;
vec3 u_xlat11;
vec3 u_xlat12;
vec3 u_xlat13;
vec3 u_xlat14;
mediump float u_xlat16_15;
vec2 u_xlat17;
mediump vec2 u_xlat16_18;
vec3 u_xlat20;
mediump vec3 u_xlat16_20;
lowp float u_xlat10_20;
int u_xlati20;
uint u_xlatu20;
bool u_xlatb20;
float u_xlat21;
float u_xlat33;
vec2 u_xlat36;
mediump float u_xlat16_36;
lowp float u_xlat10_36;
bool u_xlatb36;
float u_xlat49;
bool u_xlatb49;
mediump float u_xlat16_50;
float u_xlat52;
mediump float u_xlat16_52;
bool u_xlatb52;
float u_xlat53;
bool u_xlatb53;
float u_xlat54;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD5.zx * vec2(vec2(_ProjectUVScale, _ProjectUVScale));
    u_xlat1.x = _Time.y * _Normal01_U_Speed + u_xlat0.y;
    u_xlat1.yz = _Time.yy * vec2(_Normal01_VSpeed, _Normal02_U_Speed) + u_xlat0.xy;
    u_xlat1.w = _Time.y * _Normal02_V_Speed + u_xlat0.x;
    u_xlat10_0.xyz = texture(_Normal01, u_xlat1.xy, _NormalMapBias).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_2.xy = u_xlat16_0.xy * vec2(_NormalMapScale);
    u_xlat10_1.xyz = texture(_Normal02, u_xlat1.zw, _NormalMapBias).xyz;
    u_xlat16_0.w = -1.0;
    u_xlat16_3.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.wwz;
    u_xlat16_3.xy = u_xlat16_3.xy * vec2(_NormalMapScale);
    u_xlat16_2.z = -1.0;
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
    u_xlat1.x = float(1.0) / vs_TEXCOORD4.w;
    u_xlat17.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat17.x = texture(_CameraDepthTexture, u_xlat17.xy).x;
    u_xlat17.x = _ZBufferParams.z * u_xlat17.x + _ZBufferParams.w;
    u_xlat17.x = float(1.0) / u_xlat17.x;
    u_xlat33 = vs_TEXCOORD10.w + 9.99999975e-05;
    u_xlat33 = (-u_xlat17.x) / u_xlat33;
    u_xlat33 = vs_TEXCOORD10.y * u_xlat33 + _WorldSpaceCameraPos.y;
    u_xlat33 = (-u_xlat33) + vs_TEXCOORD5.y;
    u_xlat4.xy = u_xlat16_2.xy * vec2(vec2(_RefractionIntensity, _RefractionIntensity));
    u_xlat1.x = u_xlat1.x * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.xw = u_xlat1.xx * u_xlat4.xy;
    u_xlat1.xw = u_xlat1.xw * vs_TEXCOORD4.ww;
    u_xlat17.x = u_xlat17.x + (-vs_TEXCOORD4.w);
#ifdef UNITY_ADRENO_ES3
    u_xlat17.x = min(max(u_xlat17.x, 0.0), 1.0);
#else
    u_xlat17.x = clamp(u_xlat17.x, 0.0, 1.0);
#endif
    u_xlat4.xy = u_xlat17.xx * u_xlat1.xw;
    u_xlat4.z = 0.0;
    u_xlat1.xyw = u_xlat4.xyz + vs_TEXCOORD4.xyw;
    u_xlat1.xy = u_xlat1.xy / u_xlat1.ww;
    u_xlat1.x = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat1.x = _ZBufferParams.z * u_xlat1.x + _ZBufferParams.w;
    u_xlat1.x = float(1.0) / u_xlat1.x;
    u_xlat1.x = u_xlat1.x + (-vs_TEXCOORD4.w);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.xyw = u_xlat1.xxx * u_xlat4.xyz + vs_TEXCOORD4.xyw;
    u_xlat4.xy = u_xlat1.xy / u_xlat1.ww;
    u_xlat49 = texture(_CameraDepthTexture, u_xlat4.xy).x;
    u_xlat49 = _ZBufferParams.z * u_xlat49 + _ZBufferParams.w;
    u_xlat49 = float(1.0) / u_xlat49;
    u_xlat49 = u_xlat49 + (-vs_TEXCOORD4.w);
    u_xlat4.x = 0.100000001 / _OpacityByDepth;
    u_xlat16_3.xz = u_xlat16_2.xy;
    u_xlat16_3.y = 1.0;
    u_xlat16_20.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
    u_xlat16_20.x = inversesqrt(u_xlat16_20.x);
    u_xlat16_20.xyz = u_xlat16_3.xyz * u_xlat16_20.xxx;
#ifdef UNITY_ADRENO_ES3
    u_xlatb5 = !!(0.0>=_ES_MoonDirection.y);
#else
    u_xlatb5 = 0.0>=_ES_MoonDirection.y;
#endif
    u_xlat5.xyz = (bool(u_xlatb5)) ? _ES_SunDirection.xyz : _ES_MoonDirection.xyz;
    u_xlat6.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat53 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat54 = inversesqrt(u_xlat53);
    u_xlat7.xyz = vec3(u_xlat54) * u_xlat6.xyz;
    u_xlat5.xyz = u_xlat6.xyz * vec3(u_xlat54) + u_xlat5.xyz;
    u_xlat6.x = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat5.xyz = u_xlat5.xyz * u_xlat6.xxx;
    u_xlat20.x = dot(u_xlat16_20.xyz, u_xlat5.xyz);
    u_xlat36.x = _Gloss * 128.0;
    u_xlat20.x = max(u_xlat20.x, 9.99999975e-05);
    u_xlat20.x = log2(u_xlat20.x);
    u_xlat20.x = u_xlat20.x * u_xlat36.x;
    u_xlat20.x = exp2(u_xlat20.x);
    u_xlat20.x = u_xlat20.x * _SpecularIntensity;
    u_xlat20.x = max(u_xlat20.x, 0.0);
    u_xlat20.x = min(u_xlat20.x, 16.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb36 = !!(_ES_MoonDirection.y>=9.99999975e-05);
#else
    u_xlatb36 = _ES_MoonDirection.y>=9.99999975e-05;
#endif
    u_xlat36.x = u_xlatb36 ? 1.0 : float(0.0);
    u_xlat52 = _ES_MoonDirection.y + -1.0;
    u_xlat36.x = u_xlat36.x * u_xlat52 + 1.0;
    u_xlat4.w = float(1.0) / _ShoreTransparency;
    u_xlat5.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat5.x = inversesqrt(u_xlat5.x);
    u_xlat5.xyz = u_xlat5.xxx * vs_TEXCOORD6.xyz;
    u_xlat5.x = dot(u_xlat7.xyz, u_xlat5.xyz);
    u_xlat5.x = (-u_xlat5.x) + 1.0;
    u_xlat5.x = max(u_xlat5.x, 9.99999975e-05);
    u_xlat5.x = log2(u_xlat5.x);
    u_xlat21 = u_xlat5.x * _SpecularPower;
    u_xlat21 = exp2(u_xlat21);
    u_xlat6.xyz = u_xlat36.xxx * _LightColor0.xyz;
    u_xlat6.xyz = u_xlat20.xxx * u_xlat6.xyz;
    u_xlat20.x = u_xlat49 + -1.0;
    u_xlat20.x = u_xlat4.w * u_xlat20.x;
    u_xlat20.x = u_xlat20.x * 0.100000001;
#ifdef UNITY_ADRENO_ES3
    u_xlat20.x = min(max(u_xlat20.x, 0.0), 1.0);
#else
    u_xlat20.x = clamp(u_xlat20.x, 0.0, 1.0);
#endif
    u_xlat6.xyz = u_xlat20.xxx * u_xlat6.xyz;
    u_xlat4.xy = vec2(u_xlat49) * u_xlat4.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.xy = min(max(u_xlat4.xy, 0.0), 1.0);
#else
    u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);
#endif
    u_xlat20.x = max(u_xlat4.y, 9.99999975e-05);
    u_xlat20.x = log2(u_xlat20.x);
    u_xlat20.x = u_xlat20.x * _ShoreFade;
    u_xlat20.x = exp2(u_xlat20.x);
    u_xlat8.xyz = _ShallowColor.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat8.xyz = u_xlat20.xxx * u_xlat8.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat1.xy = u_xlat1.xy / vs_TEXCOORD4.ww;
    u_xlat10_9.xyz = texture(_SceneScaledBufferBeforTransParent, u_xlat1.xy).xyz;
    u_xlat10.xyz = u_xlat8.xyz * u_xlat10_9.xyz;
    u_xlat1.x = 0.100000001 / _DeepColorDepth;
    u_xlat1.x = u_xlat1.x * u_xlat49;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.x = max(u_xlat1.x, 9.99999975e-05);
    u_xlat1.x = log2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _DeepColorFade;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat11.xyz = (-u_xlat8.xyz) * u_xlat10_9.xyz + _DeepColor.xyz;
    u_xlat11.xyz = u_xlat1.xxx * u_xlat11.xyz + u_xlat10.xyz;
    u_xlat12.xyz = u_xlat16_2.xyz * _DistortionIntensity.xyz;
    u_xlat13.x = vs_TEXCOORD8.x;
    u_xlat13.y = vs_TEXCOORD9.x;
    u_xlat13.z = vs_TEXCOORD6.x;
    u_xlat13.x = dot(u_xlat13.xyz, u_xlat12.xyz);
    u_xlat14.x = vs_TEXCOORD8.y;
    u_xlat14.y = vs_TEXCOORD9.y;
    u_xlat14.z = vs_TEXCOORD6.y;
    u_xlat13.y = dot(u_xlat14.xyz, u_xlat12.xyz);
    u_xlat14.x = vs_TEXCOORD8.z;
    u_xlat14.y = vs_TEXCOORD9.z;
    u_xlat14.z = vs_TEXCOORD6.z;
    u_xlat13.z = dot(u_xlat14.xyz, u_xlat12.xyz);
    u_xlat1.x = dot(u_xlat13.xyz, u_xlat13.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat12.xyz = u_xlat1.xxx * u_xlat13.xyz;
    u_xlat1.x = dot((-u_xlat7.xyz), u_xlat12.xyz);
    u_xlat1.x = u_xlat1.x + u_xlat1.x;
    u_xlat7.xyz = u_xlat12.xyz * (-u_xlat1.xxx) + (-u_xlat7.xyz);
    u_xlat10_0 = textureLod(_ReflectionSkyCubeMap, u_xlat7.xyz, 0.0);
    u_xlat16_2.x = u_xlat10_0.w + -1.0;
    u_xlat16_2.x = _ReflectionSkyCubeMap_HDR.w * u_xlat16_2.x + 1.0;
    u_xlat16_2.x = log2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * _ReflectionSkyCubeMap_HDR.y;
    u_xlat16_2.x = exp2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * _ReflectionSkyCubeMap_HDR.x;
    u_xlat1.x = u_xlat5.x * _FresnelPower;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _ReflectionIntensity;
    u_xlat17.x = float(1.0) / _ShoreReflectionFade;
    u_xlat17.x = u_xlat17.x * u_xlat49;
#ifdef UNITY_ADRENO_ES3
    u_xlat17.x = min(max(u_xlat17.x, 0.0), 1.0);
#else
    u_xlat17.x = clamp(u_xlat17.x, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat17.x * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat7.xyz = u_xlat16_2.xxx * u_xlat10_0.xyz + (-u_xlat11.xyz);
    u_xlat1.xyw = u_xlat1.xxx * u_xlat7.xyz + u_xlat11.xyz;
    u_xlat1.xyw = (-u_xlat8.xyz) * u_xlat10_9.xyz + u_xlat1.xyw;
    u_xlat1.xyw = u_xlat20.xxx * u_xlat1.xyw + u_xlat10.xyz;
    u_xlat20.x = (-vs_TEXCOORD5.y) * _WorldSpaceLightPos0.w + _WorldSpaceLightPos0.y;
    u_xlat16_2.x = max(u_xlat20.x, 0.0);
    u_xlat20.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowSplitSpheres[0].xyz);
    u_xlat7.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowSplitSpheres[1].xyz);
    u_xlat8.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowSplitSpheres[2].xyz);
    u_xlat9.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowSplitSpheres[3].xyz);
    u_xlat0.x = dot(u_xlat20.xyz, u_xlat20.xyz);
    u_xlat0.y = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat0.z = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat0.w = dot(u_xlat9.xyz, u_xlat9.xyz);
    u_xlatb0 = lessThan(u_xlat0, unity_ShadowSplitSqRadii);
    u_xlat0 = mix(vec4(0.0, 0.0, 0.0, 0.0), vec4(1.0, 1.0, 1.0, 1.0), vec4(u_xlatb0));
    u_xlat16_18.x = u_xlat0.y + u_xlat0.x;
    u_xlat16_18.y = u_xlat0.z + u_xlat16_18.x;
    u_xlat3.x = -0.0;
    u_xlat3.y = (-u_xlat0.x);
    u_xlat3.zw = (-u_xlat16_18.xy);
    u_xlat0 = u_xlat0 + u_xlat3;
    u_xlat0 = max(u_xlat0, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat16_18.x = dot(u_xlat0, vec4(1.0, 1.0, 1.0, 1.0));
#ifdef UNITY_ADRENO_ES3
    u_xlatb20 = !!(u_xlat16_18.x>=0.5);
#else
    u_xlatb20 = u_xlat16_18.x>=0.5;
#endif
    if(u_xlatb20){
        u_xlat20.x = dot(u_xlat0.yzw, vec3(1.0, 2.0, 3.0));
        u_xlat20.x = min(u_xlat20.x, 3.0);
        u_xlatu20 = uint(u_xlat20.x);
        u_xlat7.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowPos[int(u_xlatu20)].xyz);
        u_xlati20 = int(u_xlatu20) << 2;
        u_xlat8.xyz = u_xlat7.yyy * hlslcc_mtx4x4unity_WorldToShadow[(u_xlati20 + 1)].xyz;
        u_xlat7.xyw = hlslcc_mtx4x4unity_WorldToShadow[u_xlati20].xyz * u_xlat7.xxx + u_xlat8.xyz;
        u_xlat7.xyz = hlslcc_mtx4x4unity_WorldToShadow[(u_xlati20 + 2)].xyz * u_xlat7.zzz + u_xlat7.xyw;
        u_xlat20.xyz = u_xlat7.xyz + hlslcc_mtx4x4unity_WorldToShadow[(u_xlati20 + 3)].xyz;
        vec3 txVec0 = vec3(u_xlat20.xy,u_xlat20.z);
        u_xlat10_20 = textureLod(hlslcc_zcmp_CascadeShadowMapTexture, txVec0, 0.0);
        u_xlat16_36 = (-_LightShadowData.x) + 1.0;
        u_xlat20.x = u_xlat10_20 * u_xlat16_36 + _LightShadowData.x;
    } else {
        u_xlat20.x = 1.0;
    //ENDIF
    }
    u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;
    u_xlat20.xyz = u_xlat16_2.xyz * u_xlat20.xxx + vs_TEXCOORD1.xyz;
    u_xlat16_2.xyz = u_xlat20.xyz * vec3(0.300000012, 0.300000012, 0.300000012) + vec3(0.699999988, 0.699999988, 0.699999988);
    u_xlat20.x = sqrt(u_xlat53);
    u_xlat16_50 = u_xlat20.x + (-_DepthFoamCloseFadeOffset);
    u_xlat16_50 = u_xlat16_50 / _DepthFoamCloseFadeDistance;
    u_xlat16_15 = vs_COLOR0.x * _DepthFoamExtent;
    u_xlat33 = max(u_xlat33, 0.0);
    u_xlat33 = min(u_xlat16_15, u_xlat33);
    u_xlat16_15 = _DepthFoamExtent * vs_COLOR0.x + 9.99999975e-05;
    u_xlat33 = u_xlat33 / u_xlat16_15;
    u_xlat33 = (-u_xlat33) + 1.0;
    u_xlat36.xy = vec2(_Time.y * _DepthFoamMask_ST.z, _Time.y * _DepthFoamMask_ST.w);
    u_xlat36.xy = fract(u_xlat36.xy);
    u_xlat36.xy = _DepthFoamMask_ST.xy * vs_TEXCOORD5.xz + u_xlat36.xy;
    u_xlat10_36 = texture(_DepthFoamMask, u_xlat36.xy, -1.0).x;
    u_xlat52 = vs_TEXCOORD5.z + vs_TEXCOORD5.x;
    u_xlat52 = u_xlat52 * _DepthFoamPhaseScale;
    u_xlat52 = _DepthFoamSpeed * _Time.y + u_xlat52;
    u_xlat5.x = (-u_xlat33) + 1.0;
    u_xlat16_15 = _DepthFoamSubdivision * u_xlat33 + u_xlat52;
    u_xlat16_15 = sin(u_xlat16_15);
    u_xlat16_15 = _DepthFoamWidth * u_xlat33 + u_xlat16_15;
    u_xlat16_52 = u_xlat10_36 * 2.0 + -1.0;
    u_xlat52 = u_xlat16_52 + u_xlat16_15;
#ifdef UNITY_ADRENO_ES3
    u_xlatb52 = !!(u_xlat52>=u_xlat5.x);
#else
    u_xlatb52 = u_xlat52>=u_xlat5.x;
#endif
    u_xlat52 = u_xlatb52 ? 1.0 : float(0.0);
    u_xlat36.x = u_xlat52 * u_xlat10_36;
    u_xlat16_15 = _DepthFoamDistance + 9.99999975e-05;
    u_xlat16_15 = u_xlat20.x / u_xlat16_15;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_15 = min(max(u_xlat16_15, 0.0), 1.0);
#else
    u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);
#endif
    u_xlat16_20.x = (-u_xlat16_15) + 1.0;
    u_xlat16_15 = vs_COLOR0.y * _DepthFoamColor.w;
    u_xlat16_50 = u_xlat16_50 * u_xlat16_15;
    u_xlat16_50 = u_xlat36.x * u_xlat16_50;
    u_xlat16_50 = u_xlat33 * u_xlat16_50;
    u_xlat16_50 = u_xlat16_20.x * u_xlat16_50;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_50 = min(max(u_xlat16_50, 0.0), 1.0);
#else
    u_xlat16_50 = clamp(u_xlat16_50, 0.0, 1.0);
#endif
    u_xlat16_2.xyz = _DepthFoamColor.xyz * u_xlat16_2.xyz + (-u_xlat1.xyw);
    u_xlat16_2.xyz = vec3(u_xlat16_50) * u_xlat16_2.xyz + u_xlat1.xyw;
    u_xlat1.xyz = u_xlat6.xyz * vec3(u_xlat21) + u_xlat16_2.xyz;
    u_xlat0.w = u_xlat4.x * vs_COLOR0.w;
    u_xlat4.xyz = vs_TEXCOORD5.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat5.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat5.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat5.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat49 = dot(u_xlat4.xyz, u_xlat5.xyz);
    u_xlat4.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat4.x = sqrt(u_xlat4.x);
    u_xlat20.y = u_xlat4.x * _HeigtFogParams.y;
    u_xlat52 = u_xlat4.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat52 = min(max(u_xlat52, 0.0), 1.0);
#else
    u_xlat52 = clamp(u_xlat52, 0.0, 1.0);
#endif
    u_xlat5.x = (-u_xlat52) + 2.0;
    u_xlat52 = u_xlat52 * u_xlat5.x;
    u_xlat5.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb49 = !!((-u_xlat49)>=u_xlat5.x);
#else
    u_xlatb49 = (-u_xlat49)>=u_xlat5.x;
#endif
    u_xlat5.x = u_xlat52 * _HeigtFogColDelta.w;
    u_xlat49 = (u_xlatb49) ? u_xlat5.x : u_xlat52;
    u_xlat49 = log2(u_xlat49);
    u_xlat49 = u_xlat49 * unity_FogColor.w;
    u_xlat49 = exp2(u_xlat49);
    u_xlat49 = min(u_xlat49, _HeigtFogColBase.w);
    u_xlat52 = vs_TEXCOORD5.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat52 = min(max(u_xlat52, 0.0), 1.0);
#else
    u_xlat52 = clamp(u_xlat52, 0.0, 1.0);
#endif
    u_xlat16_2.x = (-u_xlat52) + 2.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat52;
    u_xlat5.xyz = u_xlat16_2.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat52 = u_xlat4.x + (-_HeigtFogRamp.w);
    u_xlat52 = u_xlat52 * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat52 = min(max(u_xlat52, 0.0), 1.0);
#else
    u_xlat52 = clamp(u_xlat52, 0.0, 1.0);
#endif
    u_xlat6.xyz = (-u_xlat5.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat5.xyz = vec3(u_xlat52) * u_xlat6.xyz + u_xlat5.xyz;
    u_xlat52 = u_xlat4.y * _HeigtFogParams.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb53 = !!(0.00999999978<abs(u_xlat52));
#else
    u_xlatb53 = 0.00999999978<abs(u_xlat52);
#endif
    u_xlat6.x = u_xlat52 * -1.44269502;
    u_xlat6.x = exp2(u_xlat6.x);
    u_xlat6.x = (-u_xlat6.x) + 1.0;
    u_xlat52 = u_xlat6.x / u_xlat52;
    u_xlat16_2.x = (u_xlatb53) ? u_xlat52 : 1.0;
    u_xlat20.x = u_xlat4.y * _HeigtFogParams2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb52 = !!(0.00999999978<abs(u_xlat20.x));
#else
    u_xlatb52 = 0.00999999978<abs(u_xlat20.x);
#endif
    u_xlat53 = u_xlat20.x * -1.44269502;
    u_xlat53 = exp2(u_xlat53);
    u_xlat53 = (-u_xlat53) + 1.0;
    u_xlat20.x = u_xlat53 / u_xlat20.x;
    u_xlat16_2.y = (u_xlatb52) ? u_xlat20.x : 1.0;
    u_xlat20.x = u_xlat4.x * _HeigtFogParams2.y;
    u_xlat16_2.xy = u_xlat16_2.xy * u_xlat20.yx;
    u_xlat16_2.x = exp2((-u_xlat16_2.x));
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_18.x = exp2((-u_xlat16_2.y));
    u_xlat16_2.y = (-u_xlat16_18.x) + 1.0;
    u_xlat16_2.xy = max(u_xlat16_2.xy, vec2(0.0, 0.0));
    u_xlat16_2.x = u_xlat16_2.y + u_xlat16_2.x;
    u_xlat4.x = u_xlat4.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat16_18.x = (-u_xlat4.x) + 2.0;
    u_xlat16_18.x = u_xlat16_18.x * u_xlat4.x;
    u_xlat4.x = u_xlat16_18.x * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat4.x = u_xlat4.x + 1.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat4.x;
    u_xlat4.x = min(u_xlat16_2.x, _HeigtFogColBase.w);
    u_xlat20.x = vs_TEXCOORD5.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat20.x = min(max(u_xlat20.x, 0.0), 1.0);
#else
    u_xlat20.x = clamp(u_xlat20.x, 0.0, 1.0);
#endif
    u_xlat20.xyz = u_xlat20.xxx * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    u_xlat5.xyz = vec3(u_xlat49) * u_xlat5.xyz;
    u_xlat53 = (-u_xlat4.x) + 1.0;
    u_xlat5.xyz = vec3(u_xlat53) * u_xlat5.xyz;
    u_xlat4.xyz = u_xlat20.xyz * u_xlat4.xxx + u_xlat5.xyz;
    u_xlat49 = (-u_xlat49) + 1.0;
    u_xlat49 = u_xlat53 * u_xlat49;
    u_xlat0.xyz = vec3(u_xlat49) * u_xlat1.xyz + u_xlat4.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
}
Program "fp" {
SubProgram "gles3 " {
Keywords { "MHY_SHADER_HIGH" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MHY_SHADER_HIGH" }
""
}
SubProgram "gles3 " {
Keywords { "MHY_SHADER_MIDDLE" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MHY_SHADER_MIDDLE" }
""
}
SubProgram "gles3 " {
Keywords { "MHY_SHADER_LOW" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MHY_SHADER_LOW" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "MHY_SHADER_HIGH" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "MHY_SHADER_HIGH" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "MHY_SHADER_MIDDLE" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "MHY_SHADER_MIDDLE" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "MHY_SHADER_LOW" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "MHY_SHADER_LOW" }
""
}
SubProgram "gles3 " {
Keywords { "MSAA_INTERPOLATION" "MHY_SHADER_HIGH" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MSAA_INTERPOLATION" "MHY_SHADER_HIGH" }
""
}
SubProgram "gles3 " {
Keywords { "MSAA_INTERPOLATION" "MHY_SHADER_MIDDLE" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MSAA_INTERPOLATION" "MHY_SHADER_MIDDLE" }
""
}
SubProgram "gles3 " {
Keywords { "MSAA_INTERPOLATION" "MHY_SHADER_LOW" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MSAA_INTERPOLATION" "MHY_SHADER_LOW" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "MSAA_INTERPOLATION" "MHY_SHADER_HIGH" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "MSAA_INTERPOLATION" "MHY_SHADER_HIGH" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "MSAA_INTERPOLATION" "MHY_SHADER_MIDDLE" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "MSAA_INTERPOLATION" "MHY_SHADER_MIDDLE" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "MSAA_INTERPOLATION" "MHY_SHADER_LOW" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "MSAA_INTERPOLATION" "MHY_SHADER_LOW" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "MHY_SHADER_HIGH" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" "MHY_SHADER_HIGH" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "MHY_SHADER_MIDDLE" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" "MHY_SHADER_MIDDLE" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "MHY_SHADER_LOW" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" "MHY_SHADER_LOW" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "MHY_SHADER_HIGH" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "MHY_SHADER_HIGH" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "MHY_SHADER_MIDDLE" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "MHY_SHADER_MIDDLE" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "MHY_SHADER_LOW" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "MHY_SHADER_LOW" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "MSAA_INTERPOLATION" "MHY_SHADER_HIGH" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" "MSAA_INTERPOLATION" "MHY_SHADER_HIGH" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "MSAA_INTERPOLATION" "MHY_SHADER_MIDDLE" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" "MSAA_INTERPOLATION" "MHY_SHADER_MIDDLE" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "MSAA_INTERPOLATION" "MHY_SHADER_LOW" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" "MSAA_INTERPOLATION" "MHY_SHADER_LOW" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "MSAA_INTERPOLATION" "MHY_SHADER_HIGH" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "MSAA_INTERPOLATION" "MHY_SHADER_HIGH" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "MSAA_INTERPOLATION" "MHY_SHADER_MIDDLE" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "MSAA_INTERPOLATION" "MHY_SHADER_MIDDLE" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "MSAA_INTERPOLATION" "MHY_SHADER_LOW" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "MSAA_INTERPOLATION" "MHY_SHADER_LOW" }
""
}
}
}
 Pass {
  Name "FORWARDSHADERLOD"
  Tags { "DebugView" = "On" "IGNOREPROJECTOR" = "true" "LIGHTMODE" = "FORWARDBASE" "PreviewType" = "Plane" "QUEUE" = "Water" "RenderType" = "Transparent" "ShaderLod" = "true" }
  ZTest Off
  ZWrite Off
  Cull Off
  GpuProgramID 81992
Program "vp" {
SubProgram "gles3 " {
Keywords { "MHY_SHADER_HIGH" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump float _MHYZBias;
uniform 	vec4 hlslcc_mtx4x4_mhyJitteredVP[4];
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
out highp vec4 vs_TEXCOORD9;
out highp vec4 vs_TEXCOORD10;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec4 u_xlat8;
float u_xlat27;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4_mhyJitteredVP[1];
    u_xlat2 = hlslcc_mtx4x4_mhyJitteredVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4_mhyJitteredVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4_mhyJitteredVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat3.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    u_xlat3.xyw = u_xlat2.xyw;
    gl_Position = u_xlat3;
    vs_COLOR0 = in_COLOR0;
    u_xlat4.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat4.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat4.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat27 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat4.xyz = vec3(u_xlat27) * u_xlat4.xyz;
    u_xlat16_5.x = u_xlat4.y * u_xlat4.y;
    u_xlat16_5.x = u_xlat4.x * u_xlat4.x + (-u_xlat16_5.x);
    u_xlat16_6 = u_xlat4.yzzx * u_xlat4.xyzz;
    u_xlat16_7.x = dot(unity_SHBr, u_xlat16_6);
    u_xlat16_7.y = dot(unity_SHBg, u_xlat16_6);
    u_xlat16_7.z = dot(unity_SHBb, u_xlat16_6);
    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_7.xyz;
    u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat4.w = 1.0;
    u_xlat16_6.x = dot(unity_SHAr, u_xlat4);
    u_xlat16_6.y = dot(unity_SHAg, u_xlat4);
    u_xlat16_6.z = dot(unity_SHAb, u_xlat4);
    u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_6.xyz;
    vs_TEXCOORD1.xyz = u_xlat16_5.xyz;
    vs_TEXCOORD1.w = 1.0;
    u_xlat27 = u_xlat3.y * _ProjectionParams.x;
    u_xlat8.w = u_xlat27 * 0.5;
    u_xlat8.xz = u_xlat3.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.z = u_xlat2.z;
    u_xlat3.xy = u_xlat8.zz + u_xlat8.xw;
    vs_TEXCOORD2 = u_xlat3;
    vs_TEXCOORD4.xyw = u_xlat3.xyw;
    u_xlat27 = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat27 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat27;
    u_xlat27 = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat27;
    u_xlat27 = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat27;
    vs_TEXCOORD3.z = (-u_xlat27);
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD3.w = 0.0;
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD5.w = 0.0;
    vs_TEXCOORD6.xyz = u_xlat4.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[1].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].www + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * in_POSITION0.yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.zzz + u_xlat1.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.www + u_xlat1.xyz;
    vs_TEXCOORD7.xyz = u_xlat1.xyz * vec3(-1.0, -1.0, 1.0);
    vs_TEXCOORD7.w = 0.0;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat27 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat1.xyz = vec3(u_xlat27) * u_xlat1.xyz;
    vs_TEXCOORD8.xyz = u_xlat1.xyz;
    vs_TEXCOORD8.w = 0.0;
    u_xlat2.xyz = u_xlat1.yzx * u_xlat4.zxy;
    u_xlat1.xyz = u_xlat4.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
    u_xlat27 = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD9.xyz = vec3(u_xlat27) * u_xlat1.xyz;
    vs_TEXCOORD9.w = 0.0;
    u_xlat27 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat27 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat27;
    vs_TEXCOORD10.w = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat27;
    vs_TEXCOORD10.xyz = u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ZBufferParams;
uniform 	mediump vec4 _LightColor0;
uniform 	float _NormalMapScale;
uniform 	float _Normal01_U_Speed;
uniform 	float _Normal01_VSpeed;
uniform 	float _NormalMapBias;
uniform 	float _Normal02_U_Speed;
uniform 	float _Normal02_V_Speed;
uniform 	float _RefractionIntensity;
uniform 	float _OpacityByDepth;
uniform 	float _SpecularIntensity;
uniform 	vec3 _ES_MoonDirection;
uniform 	vec3 _ES_SunDirection;
uniform 	float _Gloss;
uniform 	float _ShoreTransparency;
uniform 	float _SpecularPower;
uniform 	vec4 _ShallowColor;
uniform 	float _ShoreFade;
uniform 	vec4 _DeepColor;
uniform 	float _DeepColorDepth;
uniform 	float _DeepColorFade;
uniform 	vec4 _DistortionIntensity;
uniform 	float _SSRDistortion;
uniform 	float _SSRDistortion_Shore;
uniform 	float _SSRIntensity;
uniform 	float _ReflectionIntensity;
uniform 	float _FresnelPower;
uniform 	float _ShoreReflectionFade;
uniform 	mediump float _ProjectUVScale;
uniform 	vec4 _ReflectionSkyCubeMap_HDR;
uniform lowp sampler2D _Normal01;
uniform lowp sampler2D _Normal02;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _SceneScaledBufferBeforTransParent;
uniform lowp samplerCube _ReflectionSkyCubeMap;
uniform lowp sampler2D _SSRTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD8;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec3 u_xlat1;
mediump float u_xlat16_1;
lowp vec3 u_xlat10_1;
bool u_xlatb1;
vec4 u_xlat2;
lowp vec4 u_xlat10_2;
mediump vec3 u_xlat16_3;
lowp vec4 u_xlat10_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
lowp vec3 u_xlat10_7;
mediump vec3 u_xlat16_8;
vec3 u_xlat9;
vec3 u_xlat10;
vec3 u_xlat11;
float u_xlat13;
float u_xlat25;
bool u_xlatb25;
vec2 u_xlat30;
mediump float u_xlat16_36;
float u_xlat37;
float u_xlat38;
float u_xlat40;
void main()
{
    u_xlat16_0.w = -1.0;
    u_xlat1.xy = vs_TEXCOORD5.zx * vec2(vec2(_ProjectUVScale, _ProjectUVScale));
    u_xlat2.w = _Time.y * _Normal02_V_Speed + u_xlat1.x;
    u_xlat2.yz = _Time.yy * vec2(_Normal01_VSpeed, _Normal02_U_Speed) + u_xlat1.xy;
    u_xlat2.x = _Time.y * _Normal01_U_Speed + u_xlat1.y;
    u_xlat10_1.xyz = texture(_Normal01, u_xlat2.xy, _NormalMapBias).xyz;
    u_xlat10_2.xyz = texture(_Normal02, u_xlat2.zw, _NormalMapBias).xyz;
    u_xlat16_0.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_3.xyz = u_xlat10_2.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.wwz;
    u_xlat16_0.xy = u_xlat16_0.xy * vec2(_NormalMapScale);
    u_xlat16_3.xy = u_xlat16_3.xy * vec2(_NormalMapScale);
    u_xlat16_0.z = -1.0;
    u_xlat16_0.xyz = u_xlat16_0.xzy + u_xlat16_3.xzy;
    u_xlat1.xyz = u_xlat16_0.xzy * _DistortionIntensity.xyz;
    u_xlat2.x = vs_TEXCOORD8.x;
    u_xlat2.y = vs_TEXCOORD9.x;
    u_xlat2.z = vs_TEXCOORD6.x;
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat4.x = vs_TEXCOORD8.y;
    u_xlat4.y = vs_TEXCOORD9.y;
    u_xlat4.z = vs_TEXCOORD6.y;
    u_xlat2.y = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat4.x = vs_TEXCOORD8.z;
    u_xlat4.y = vs_TEXCOORD9.z;
    u_xlat4.z = vs_TEXCOORD6.z;
    u_xlat2.z = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat1.xy = u_xlat1.xy * vec2(_SSRDistortion);
    u_xlat25 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat25 = inversesqrt(u_xlat25);
    u_xlat2.xyz = vec3(u_xlat25) * u_xlat2.xyz;
    u_xlat4.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat25 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat25 = inversesqrt(u_xlat25);
    u_xlat5.xyz = vec3(u_xlat25) * u_xlat4.xyz;
    u_xlat37 = dot((-u_xlat5.xyz), u_xlat2.xyz);
    u_xlat37 = u_xlat37 + u_xlat37;
    u_xlat2.xyz = u_xlat2.xyz * (-vec3(u_xlat37)) + (-u_xlat5.xyz);
    u_xlat10_2 = textureLod(_ReflectionSkyCubeMap, u_xlat2.xyz, 0.0);
    u_xlat16_36 = u_xlat10_2.w + -1.0;
    u_xlat16_36 = _ReflectionSkyCubeMap_HDR.w * u_xlat16_36 + 1.0;
    u_xlat16_36 = log2(u_xlat16_36);
    u_xlat16_36 = u_xlat16_36 * _ReflectionSkyCubeMap_HDR.y;
    u_xlat16_36 = exp2(u_xlat16_36);
    u_xlat16_36 = u_xlat16_36 * _ReflectionSkyCubeMap_HDR.x;
    u_xlat6.xy = u_xlat16_0.xz * vec2(vec2(_RefractionIntensity, _RefractionIntensity));
    u_xlat37 = float(1.0) / vs_TEXCOORD4.w;
    u_xlat37 = u_xlat37 * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat37 = min(max(u_xlat37, 0.0), 1.0);
#else
    u_xlat37 = clamp(u_xlat37, 0.0, 1.0);
#endif
    u_xlat6.xy = vec2(u_xlat37) * u_xlat6.xy;
    u_xlat6.xy = u_xlat6.xy * vs_TEXCOORD4.ww;
    u_xlat30.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat37 = texture(_CameraDepthTexture, u_xlat30.xy).x;
    u_xlat37 = _ZBufferParams.z * u_xlat37 + _ZBufferParams.w;
    u_xlat37 = float(1.0) / u_xlat37;
    u_xlat37 = u_xlat37 + (-vs_TEXCOORD4.w);
#ifdef UNITY_ADRENO_ES3
    u_xlat37 = min(max(u_xlat37, 0.0), 1.0);
#else
    u_xlat37 = clamp(u_xlat37, 0.0, 1.0);
#endif
    u_xlat6.xy = vec2(u_xlat37) * u_xlat6.xy;
    u_xlat6.z = 0.0;
    u_xlat7.xyz = u_xlat6.xyz + vs_TEXCOORD4.xyw;
    u_xlat7.xy = u_xlat7.xy / u_xlat7.zz;
    u_xlat37 = texture(_CameraDepthTexture, u_xlat7.xy).x;
    u_xlat37 = _ZBufferParams.z * u_xlat37 + _ZBufferParams.w;
    u_xlat37 = float(1.0) / u_xlat37;
    u_xlat37 = u_xlat37 + (-vs_TEXCOORD4.w);
#ifdef UNITY_ADRENO_ES3
    u_xlat37 = min(max(u_xlat37, 0.0), 1.0);
#else
    u_xlat37 = clamp(u_xlat37, 0.0, 1.0);
#endif
    u_xlat6.xyz = vec3(u_xlat37) * u_xlat6.xyz + vs_TEXCOORD4.xyw;
    u_xlat30.xy = u_xlat6.xy / u_xlat6.zz;
    u_xlat6.xy = u_xlat6.xy / vs_TEXCOORD4.ww;
    u_xlat10_7.xyz = texture(_SceneScaledBufferBeforTransParent, u_xlat6.xy).xyz;
    u_xlat37 = texture(_CameraDepthTexture, u_xlat30.xy).x;
    u_xlat37 = _ZBufferParams.z * u_xlat37 + _ZBufferParams.w;
    u_xlat37 = float(1.0) / u_xlat37;
    u_xlat37 = u_xlat37 + (-vs_TEXCOORD4.w);
    u_xlat38 = float(1.0) / _SSRDistortion_Shore;
    u_xlat38 = u_xlat37 * u_xlat38;
#ifdef UNITY_ADRENO_ES3
    u_xlat38 = min(max(u_xlat38, 0.0), 1.0);
#else
    u_xlat38 = clamp(u_xlat38, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat1.xy * vec2(u_xlat38);
    u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD4.ww + vs_TEXCOORD4.xy;
    u_xlat1.xy = u_xlat1.xy / vs_TEXCOORD4.ww;
    u_xlat10_3 = texture(_SSRTexture, u_xlat1.xy).wxyz;
    u_xlat16_6.xyz = (-vec3(u_xlat16_36)) * u_xlat10_2.xyz + u_xlat10_3.yzw;
    u_xlat16_8.xyz = u_xlat10_2.xyz * vec3(u_xlat16_36);
    u_xlat16_3.x = u_xlat10_3.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat2.xyz = u_xlat16_6.xyz * vec3(vec3(_SSRIntensity, _SSRIntensity, _SSRIntensity));
    u_xlat2.xyz = u_xlat16_3.xxx * u_xlat2.xyz + u_xlat16_8.xyz;
    u_xlat1.x = 0.100000001 / _DeepColorDepth;
    u_xlat1.x = u_xlat1.x * u_xlat37;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.x = max(u_xlat1.x, 9.99999975e-05);
    u_xlat1.x = log2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _DeepColorFade;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat13 = float(1.0) / _ShoreTransparency;
    u_xlat38 = u_xlat13 * u_xlat37;
#ifdef UNITY_ADRENO_ES3
    u_xlat38 = min(max(u_xlat38, 0.0), 1.0);
#else
    u_xlat38 = clamp(u_xlat38, 0.0, 1.0);
#endif
    u_xlat38 = max(u_xlat38, 9.99999975e-05);
    u_xlat38 = log2(u_xlat38);
    u_xlat38 = u_xlat38 * _ShoreFade;
    u_xlat38 = exp2(u_xlat38);
    u_xlat6.xyz = _ShallowColor.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat6.xyz = vec3(u_xlat38) * u_xlat6.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat9.xyz = (-u_xlat6.xyz) * u_xlat10_7.xyz + _DeepColor.xyz;
    u_xlat10.xyz = u_xlat10_7.xyz * u_xlat6.xyz;
    u_xlat9.xyz = u_xlat1.xxx * u_xlat9.xyz + u_xlat10.xyz;
    u_xlat2.xyz = u_xlat2.xyz + (-u_xlat9.xyz);
    u_xlat1.x = float(1.0) / _ShoreReflectionFade;
    u_xlat1.x = u_xlat1.x * u_xlat37;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat40 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat40 = inversesqrt(u_xlat40);
    u_xlat11.xyz = vec3(u_xlat40) * vs_TEXCOORD6.xyz;
    u_xlat40 = dot(u_xlat5.xyz, u_xlat11.xyz);
    u_xlat40 = (-u_xlat40) + 1.0;
    u_xlat40 = max(u_xlat40, 9.99999975e-05);
    u_xlat40 = log2(u_xlat40);
    u_xlat5.x = u_xlat40 * _FresnelPower;
    u_xlat40 = u_xlat40 * _SpecularPower;
    u_xlat40 = exp2(u_xlat40);
    u_xlat5.x = exp2(u_xlat5.x);
    u_xlat5.x = u_xlat5.x * _ReflectionIntensity;
    u_xlat1.x = u_xlat1.x * u_xlat5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat2.xyz = u_xlat1.xxx * u_xlat2.xyz + u_xlat9.xyz;
    u_xlat2.xyz = (-u_xlat6.xyz) * u_xlat10_7.xyz + u_xlat2.xyz;
    u_xlat2.xyz = vec3(u_xlat38) * u_xlat2.xyz + u_xlat10.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(0.0>=_ES_MoonDirection.y);
#else
    u_xlatb1 = 0.0>=_ES_MoonDirection.y;
#endif
    u_xlat5.xyz = (bool(u_xlatb1)) ? _ES_SunDirection.xyz : _ES_MoonDirection.xyz;
    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat25) + u_xlat5.xyz;
    u_xlat1.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
    u_xlat16_0.y = 1.0;
    u_xlat16_1 = dot(u_xlat16_0.xyz, u_xlat16_0.xyz);
    u_xlat16_1 = inversesqrt(u_xlat16_1);
    u_xlat16_5.xyz = u_xlat16_0.xyz * vec3(u_xlat16_1);
    u_xlat1.x = dot(u_xlat16_5.xyz, u_xlat4.xyz);
    u_xlat1.x = max(u_xlat1.x, 9.99999975e-05);
    u_xlat1.x = log2(u_xlat1.x);
    u_xlat25 = _Gloss * 128.0;
    u_xlat1.x = u_xlat1.x * u_xlat25;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _SpecularIntensity;
    u_xlat1.x = max(u_xlat1.x, 0.0);
    u_xlat1.x = min(u_xlat1.x, 16.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb25 = !!(_ES_MoonDirection.y>=9.99999975e-05);
#else
    u_xlatb25 = _ES_MoonDirection.y>=9.99999975e-05;
#endif
    u_xlat25 = u_xlatb25 ? 1.0 : float(0.0);
    u_xlat38 = _ES_MoonDirection.y + -1.0;
    u_xlat25 = u_xlat25 * u_xlat38 + 1.0;
    u_xlat4.xyz = vec3(u_xlat25) * _LightColor0.xyz;
    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
    u_xlat1.x = u_xlat37 + -1.0;
    u_xlat1.x = u_xlat13 * u_xlat1.x;
    u_xlat1.x = u_xlat1.x * 0.100000001;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat1.xxx * u_xlat4.xyz;
    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat40) + u_xlat2.xyz;
    u_xlat1.x = 0.100000001 / _OpacityByDepth;
    u_xlat1.x = u_xlat1.x * u_xlat37;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat0.w = u_xlat1.x * vs_COLOR0.w;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MHY_SHADER_HIGH" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
uniform 	vec4 hlslcc_mtx4x4_mhyJitteredVP[4];
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
out highp vec4 vs_TEXCOORD9;
out highp vec4 vs_TEXCOORD10;
float u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec4 u_xlat8;
vec3 u_xlat9;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat9.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4_mhyJitteredVP[1];
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[3] * u_xlat2.wwww + u_xlat1;
    u_xlat3.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    u_xlat3.xyw = u_xlat1.xyw;
    gl_Position = u_xlat3;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD1.w = 1.0;
    u_xlat4.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat4.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat4.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat1.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
    u_xlat16_5.x = u_xlat4.y * u_xlat4.y;
    u_xlat16_5.x = u_xlat4.x * u_xlat4.x + (-u_xlat16_5.x);
    u_xlat16_6 = u_xlat4.yzzx * u_xlat4.xyzz;
    u_xlat16_7.x = dot(unity_SHBr, u_xlat16_6);
    u_xlat16_7.y = dot(unity_SHBg, u_xlat16_6);
    u_xlat16_7.z = dot(unity_SHBb, u_xlat16_6);
    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_7.xyz;
    u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat4.w = 1.0;
    u_xlat16_6.x = dot(unity_SHAr, u_xlat4);
    u_xlat16_6.y = dot(unity_SHAg, u_xlat4);
    u_xlat16_6.z = dot(unity_SHAb, u_xlat4);
    u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_6.xyz;
    vs_TEXCOORD1.xyz = u_xlat16_5.xyz;
    u_xlat1.x = u_xlat3.y * _ProjectionParams.x;
    u_xlat8.w = u_xlat1.x * 0.5;
    u_xlat8.xz = u_xlat3.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.z = u_xlat1.z;
    u_xlat3.xy = u_xlat8.zz + u_xlat8.xw;
    vs_TEXCOORD2 = u_xlat3;
    vs_TEXCOORD4.xyw = u_xlat3.xyw;
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD3.w = 0.0;
    u_xlat1.x = u_xlat2.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat2.x + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat2.z + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat2.w + u_xlat1.x;
    vs_TEXCOORD3.z = (-u_xlat1.x);
    vs_TEXCOORD5.w = 0.0;
    vs_TEXCOORD5.xyz = u_xlat9.xyz;
    u_xlat9.xyz = (-u_xlat9.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD6.w = 0.0;
    vs_TEXCOORD6.xyz = u_xlat4.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].www + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * in_POSITION0.yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.zzz + u_xlat1.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.www + u_xlat1.xyz;
    vs_TEXCOORD7.xyz = u_xlat1.xyz * vec3(-1.0, -1.0, 1.0);
    vs_TEXCOORD7.w = 0.0;
    u_xlat1.xyz = in_TANGENT0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat0 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0 = inversesqrt(u_xlat0);
    u_xlat1.xyz = vec3(u_xlat0) * u_xlat1.xyz;
    vs_TEXCOORD8.xyz = u_xlat1.xyz;
    vs_TEXCOORD8.w = 0.0;
    u_xlat2.xyz = u_xlat1.yzx * u_xlat4.zxy;
    u_xlat1.xyz = u_xlat4.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
    u_xlat0 = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD9.xyz = vec3(u_xlat0) * u_xlat1.xyz;
    vs_TEXCOORD9.w = 0.0;
    u_xlat0 = u_xlat9.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat9.x + u_xlat0;
    vs_TEXCOORD10.w = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat9.z + u_xlat0;
    vs_TEXCOORD10.xyz = u_xlat9.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ZBufferParams;
uniform 	mediump vec4 _LightColor0;
uniform 	float _NormalMapScale;
uniform 	float _Normal01_U_Speed;
uniform 	float _Normal01_VSpeed;
uniform 	float _NormalMapBias;
uniform 	float _Normal02_U_Speed;
uniform 	float _Normal02_V_Speed;
uniform 	float _RefractionIntensity;
uniform 	float _OpacityByDepth;
uniform 	float _SpecularIntensity;
uniform 	vec3 _ES_MoonDirection;
uniform 	vec3 _ES_SunDirection;
uniform 	float _Gloss;
uniform 	float _ShoreTransparency;
uniform 	float _SpecularPower;
uniform 	vec4 _ShallowColor;
uniform 	float _ShoreFade;
uniform 	vec4 _DeepColor;
uniform 	float _DeepColorDepth;
uniform 	float _DeepColorFade;
uniform 	vec4 _DistortionIntensity;
uniform 	float _SSRDistortion;
uniform 	float _SSRDistortion_Shore;
uniform 	float _SSRIntensity;
uniform 	float _ReflectionIntensity;
uniform 	float _FresnelPower;
uniform 	float _ShoreReflectionFade;
uniform 	mediump float _ProjectUVScale;
uniform 	vec4 _ReflectionSkyCubeMap_HDR;
uniform lowp sampler2D _Normal01;
uniform lowp sampler2D _Normal02;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _SceneScaledBufferBeforTransParent;
uniform lowp samplerCube _ReflectionSkyCubeMap;
uniform lowp sampler2D _SSRTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD8;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec3 u_xlat1;
mediump float u_xlat16_1;
lowp vec3 u_xlat10_1;
bool u_xlatb1;
vec4 u_xlat2;
lowp vec4 u_xlat10_2;
mediump vec3 u_xlat16_3;
lowp vec4 u_xlat10_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
lowp vec3 u_xlat10_7;
mediump vec3 u_xlat16_8;
vec3 u_xlat9;
vec3 u_xlat10;
vec3 u_xlat11;
float u_xlat13;
float u_xlat25;
bool u_xlatb25;
vec2 u_xlat30;
mediump float u_xlat16_36;
float u_xlat37;
float u_xlat38;
float u_xlat40;
void main()
{
    u_xlat16_0.w = -1.0;
    u_xlat1.xy = vs_TEXCOORD5.zx * vec2(vec2(_ProjectUVScale, _ProjectUVScale));
    u_xlat2.w = _Time.y * _Normal02_V_Speed + u_xlat1.x;
    u_xlat2.yz = _Time.yy * vec2(_Normal01_VSpeed, _Normal02_U_Speed) + u_xlat1.xy;
    u_xlat2.x = _Time.y * _Normal01_U_Speed + u_xlat1.y;
    u_xlat10_1.xyz = texture(_Normal01, u_xlat2.xy, _NormalMapBias).xyz;
    u_xlat10_2.xyz = texture(_Normal02, u_xlat2.zw, _NormalMapBias).xyz;
    u_xlat16_0.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_3.xyz = u_xlat10_2.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.wwz;
    u_xlat16_0.xy = u_xlat16_0.xy * vec2(_NormalMapScale);
    u_xlat16_3.xy = u_xlat16_3.xy * vec2(_NormalMapScale);
    u_xlat16_0.z = -1.0;
    u_xlat16_0.xyz = u_xlat16_0.xzy + u_xlat16_3.xzy;
    u_xlat1.xyz = u_xlat16_0.xzy * _DistortionIntensity.xyz;
    u_xlat2.x = vs_TEXCOORD8.x;
    u_xlat2.y = vs_TEXCOORD9.x;
    u_xlat2.z = vs_TEXCOORD6.x;
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat4.x = vs_TEXCOORD8.y;
    u_xlat4.y = vs_TEXCOORD9.y;
    u_xlat4.z = vs_TEXCOORD6.y;
    u_xlat2.y = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat4.x = vs_TEXCOORD8.z;
    u_xlat4.y = vs_TEXCOORD9.z;
    u_xlat4.z = vs_TEXCOORD6.z;
    u_xlat2.z = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat1.xy = u_xlat1.xy * vec2(_SSRDistortion);
    u_xlat25 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat25 = inversesqrt(u_xlat25);
    u_xlat2.xyz = vec3(u_xlat25) * u_xlat2.xyz;
    u_xlat4.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat25 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat25 = inversesqrt(u_xlat25);
    u_xlat5.xyz = vec3(u_xlat25) * u_xlat4.xyz;
    u_xlat37 = dot((-u_xlat5.xyz), u_xlat2.xyz);
    u_xlat37 = u_xlat37 + u_xlat37;
    u_xlat2.xyz = u_xlat2.xyz * (-vec3(u_xlat37)) + (-u_xlat5.xyz);
    u_xlat10_2 = textureLod(_ReflectionSkyCubeMap, u_xlat2.xyz, 0.0);
    u_xlat16_36 = u_xlat10_2.w + -1.0;
    u_xlat16_36 = _ReflectionSkyCubeMap_HDR.w * u_xlat16_36 + 1.0;
    u_xlat16_36 = log2(u_xlat16_36);
    u_xlat16_36 = u_xlat16_36 * _ReflectionSkyCubeMap_HDR.y;
    u_xlat16_36 = exp2(u_xlat16_36);
    u_xlat16_36 = u_xlat16_36 * _ReflectionSkyCubeMap_HDR.x;
    u_xlat6.xy = u_xlat16_0.xz * vec2(vec2(_RefractionIntensity, _RefractionIntensity));
    u_xlat37 = float(1.0) / vs_TEXCOORD4.w;
    u_xlat37 = u_xlat37 * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat37 = min(max(u_xlat37, 0.0), 1.0);
#else
    u_xlat37 = clamp(u_xlat37, 0.0, 1.0);
#endif
    u_xlat6.xy = vec2(u_xlat37) * u_xlat6.xy;
    u_xlat6.xy = u_xlat6.xy * vs_TEXCOORD4.ww;
    u_xlat30.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat37 = texture(_CameraDepthTexture, u_xlat30.xy).x;
    u_xlat37 = _ZBufferParams.z * u_xlat37 + _ZBufferParams.w;
    u_xlat37 = float(1.0) / u_xlat37;
    u_xlat37 = u_xlat37 + (-vs_TEXCOORD4.w);
#ifdef UNITY_ADRENO_ES3
    u_xlat37 = min(max(u_xlat37, 0.0), 1.0);
#else
    u_xlat37 = clamp(u_xlat37, 0.0, 1.0);
#endif
    u_xlat6.xy = vec2(u_xlat37) * u_xlat6.xy;
    u_xlat6.z = 0.0;
    u_xlat7.xyz = u_xlat6.xyz + vs_TEXCOORD4.xyw;
    u_xlat7.xy = u_xlat7.xy / u_xlat7.zz;
    u_xlat37 = texture(_CameraDepthTexture, u_xlat7.xy).x;
    u_xlat37 = _ZBufferParams.z * u_xlat37 + _ZBufferParams.w;
    u_xlat37 = float(1.0) / u_xlat37;
    u_xlat37 = u_xlat37 + (-vs_TEXCOORD4.w);
#ifdef UNITY_ADRENO_ES3
    u_xlat37 = min(max(u_xlat37, 0.0), 1.0);
#else
    u_xlat37 = clamp(u_xlat37, 0.0, 1.0);
#endif
    u_xlat6.xyz = vec3(u_xlat37) * u_xlat6.xyz + vs_TEXCOORD4.xyw;
    u_xlat30.xy = u_xlat6.xy / u_xlat6.zz;
    u_xlat6.xy = u_xlat6.xy / vs_TEXCOORD4.ww;
    u_xlat10_7.xyz = texture(_SceneScaledBufferBeforTransParent, u_xlat6.xy).xyz;
    u_xlat37 = texture(_CameraDepthTexture, u_xlat30.xy).x;
    u_xlat37 = _ZBufferParams.z * u_xlat37 + _ZBufferParams.w;
    u_xlat37 = float(1.0) / u_xlat37;
    u_xlat37 = u_xlat37 + (-vs_TEXCOORD4.w);
    u_xlat38 = float(1.0) / _SSRDistortion_Shore;
    u_xlat38 = u_xlat37 * u_xlat38;
#ifdef UNITY_ADRENO_ES3
    u_xlat38 = min(max(u_xlat38, 0.0), 1.0);
#else
    u_xlat38 = clamp(u_xlat38, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat1.xy * vec2(u_xlat38);
    u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD4.ww + vs_TEXCOORD4.xy;
    u_xlat1.xy = u_xlat1.xy / vs_TEXCOORD4.ww;
    u_xlat10_3 = texture(_SSRTexture, u_xlat1.xy).wxyz;
    u_xlat16_6.xyz = (-vec3(u_xlat16_36)) * u_xlat10_2.xyz + u_xlat10_3.yzw;
    u_xlat16_8.xyz = u_xlat10_2.xyz * vec3(u_xlat16_36);
    u_xlat16_3.x = u_xlat10_3.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat2.xyz = u_xlat16_6.xyz * vec3(vec3(_SSRIntensity, _SSRIntensity, _SSRIntensity));
    u_xlat2.xyz = u_xlat16_3.xxx * u_xlat2.xyz + u_xlat16_8.xyz;
    u_xlat1.x = 0.100000001 / _DeepColorDepth;
    u_xlat1.x = u_xlat1.x * u_xlat37;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.x = max(u_xlat1.x, 9.99999975e-05);
    u_xlat1.x = log2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _DeepColorFade;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat13 = float(1.0) / _ShoreTransparency;
    u_xlat38 = u_xlat13 * u_xlat37;
#ifdef UNITY_ADRENO_ES3
    u_xlat38 = min(max(u_xlat38, 0.0), 1.0);
#else
    u_xlat38 = clamp(u_xlat38, 0.0, 1.0);
#endif
    u_xlat38 = max(u_xlat38, 9.99999975e-05);
    u_xlat38 = log2(u_xlat38);
    u_xlat38 = u_xlat38 * _ShoreFade;
    u_xlat38 = exp2(u_xlat38);
    u_xlat6.xyz = _ShallowColor.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat6.xyz = vec3(u_xlat38) * u_xlat6.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat9.xyz = (-u_xlat6.xyz) * u_xlat10_7.xyz + _DeepColor.xyz;
    u_xlat10.xyz = u_xlat10_7.xyz * u_xlat6.xyz;
    u_xlat9.xyz = u_xlat1.xxx * u_xlat9.xyz + u_xlat10.xyz;
    u_xlat2.xyz = u_xlat2.xyz + (-u_xlat9.xyz);
    u_xlat1.x = float(1.0) / _ShoreReflectionFade;
    u_xlat1.x = u_xlat1.x * u_xlat37;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat40 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat40 = inversesqrt(u_xlat40);
    u_xlat11.xyz = vec3(u_xlat40) * vs_TEXCOORD6.xyz;
    u_xlat40 = dot(u_xlat5.xyz, u_xlat11.xyz);
    u_xlat40 = (-u_xlat40) + 1.0;
    u_xlat40 = max(u_xlat40, 9.99999975e-05);
    u_xlat40 = log2(u_xlat40);
    u_xlat5.x = u_xlat40 * _FresnelPower;
    u_xlat40 = u_xlat40 * _SpecularPower;
    u_xlat40 = exp2(u_xlat40);
    u_xlat5.x = exp2(u_xlat5.x);
    u_xlat5.x = u_xlat5.x * _ReflectionIntensity;
    u_xlat1.x = u_xlat1.x * u_xlat5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat2.xyz = u_xlat1.xxx * u_xlat2.xyz + u_xlat9.xyz;
    u_xlat2.xyz = (-u_xlat6.xyz) * u_xlat10_7.xyz + u_xlat2.xyz;
    u_xlat2.xyz = vec3(u_xlat38) * u_xlat2.xyz + u_xlat10.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(0.0>=_ES_MoonDirection.y);
#else
    u_xlatb1 = 0.0>=_ES_MoonDirection.y;
#endif
    u_xlat5.xyz = (bool(u_xlatb1)) ? _ES_SunDirection.xyz : _ES_MoonDirection.xyz;
    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat25) + u_xlat5.xyz;
    u_xlat1.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
    u_xlat16_0.y = 1.0;
    u_xlat16_1 = dot(u_xlat16_0.xyz, u_xlat16_0.xyz);
    u_xlat16_1 = inversesqrt(u_xlat16_1);
    u_xlat16_5.xyz = u_xlat16_0.xyz * vec3(u_xlat16_1);
    u_xlat1.x = dot(u_xlat16_5.xyz, u_xlat4.xyz);
    u_xlat1.x = max(u_xlat1.x, 9.99999975e-05);
    u_xlat1.x = log2(u_xlat1.x);
    u_xlat25 = _Gloss * 128.0;
    u_xlat1.x = u_xlat1.x * u_xlat25;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _SpecularIntensity;
    u_xlat1.x = max(u_xlat1.x, 0.0);
    u_xlat1.x = min(u_xlat1.x, 16.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb25 = !!(_ES_MoonDirection.y>=9.99999975e-05);
#else
    u_xlatb25 = _ES_MoonDirection.y>=9.99999975e-05;
#endif
    u_xlat25 = u_xlatb25 ? 1.0 : float(0.0);
    u_xlat38 = _ES_MoonDirection.y + -1.0;
    u_xlat25 = u_xlat25 * u_xlat38 + 1.0;
    u_xlat4.xyz = vec3(u_xlat25) * _LightColor0.xyz;
    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
    u_xlat1.x = u_xlat37 + -1.0;
    u_xlat1.x = u_xlat13 * u_xlat1.x;
    u_xlat1.x = u_xlat1.x * 0.100000001;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat1.xxx * u_xlat4.xyz;
    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat40) + u_xlat2.xyz;
    u_xlat1.x = 0.100000001 / _OpacityByDepth;
    u_xlat1.x = u_xlat1.x * u_xlat37;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat0.w = u_xlat1.x * vs_COLOR0.w;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "MHY_SHADER_MIDDLE" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump float _MHYZBias;
uniform 	vec4 hlslcc_mtx4x4_mhyJitteredVP[4];
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
out highp vec4 vs_TEXCOORD9;
out highp vec4 vs_TEXCOORD10;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec4 u_xlat8;
float u_xlat27;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4_mhyJitteredVP[1];
    u_xlat2 = hlslcc_mtx4x4_mhyJitteredVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4_mhyJitteredVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4_mhyJitteredVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat3.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    u_xlat3.xyw = u_xlat2.xyw;
    gl_Position = u_xlat3;
    vs_COLOR0 = in_COLOR0;
    u_xlat4.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat4.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat4.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat27 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat4.xyz = vec3(u_xlat27) * u_xlat4.xyz;
    u_xlat16_5.x = u_xlat4.y * u_xlat4.y;
    u_xlat16_5.x = u_xlat4.x * u_xlat4.x + (-u_xlat16_5.x);
    u_xlat16_6 = u_xlat4.yzzx * u_xlat4.xyzz;
    u_xlat16_7.x = dot(unity_SHBr, u_xlat16_6);
    u_xlat16_7.y = dot(unity_SHBg, u_xlat16_6);
    u_xlat16_7.z = dot(unity_SHBb, u_xlat16_6);
    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_7.xyz;
    u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat4.w = 1.0;
    u_xlat16_6.x = dot(unity_SHAr, u_xlat4);
    u_xlat16_6.y = dot(unity_SHAg, u_xlat4);
    u_xlat16_6.z = dot(unity_SHAb, u_xlat4);
    u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_6.xyz;
    vs_TEXCOORD1.xyz = u_xlat16_5.xyz;
    vs_TEXCOORD1.w = 1.0;
    u_xlat27 = u_xlat3.y * _ProjectionParams.x;
    u_xlat8.w = u_xlat27 * 0.5;
    u_xlat8.xz = u_xlat3.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.z = u_xlat2.z;
    u_xlat3.xy = u_xlat8.zz + u_xlat8.xw;
    vs_TEXCOORD2 = u_xlat3;
    vs_TEXCOORD4.xyw = u_xlat3.xyw;
    u_xlat27 = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat27 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat27;
    u_xlat27 = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat27;
    u_xlat27 = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat27;
    vs_TEXCOORD3.z = (-u_xlat27);
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD3.w = 0.0;
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD5.w = 0.0;
    vs_TEXCOORD6.xyz = u_xlat4.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[1].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].www + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * in_POSITION0.yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.zzz + u_xlat1.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.www + u_xlat1.xyz;
    vs_TEXCOORD7.xyz = u_xlat1.xyz * vec3(-1.0, -1.0, 1.0);
    vs_TEXCOORD7.w = 0.0;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat27 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat1.xyz = vec3(u_xlat27) * u_xlat1.xyz;
    vs_TEXCOORD8.xyz = u_xlat1.xyz;
    vs_TEXCOORD8.w = 0.0;
    u_xlat2.xyz = u_xlat1.yzx * u_xlat4.zxy;
    u_xlat1.xyz = u_xlat4.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
    u_xlat27 = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD9.xyz = vec3(u_xlat27) * u_xlat1.xyz;
    vs_TEXCOORD9.w = 0.0;
    u_xlat27 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat27 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat27;
    vs_TEXCOORD10.w = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat27;
    vs_TEXCOORD10.xyz = u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ZBufferParams;
uniform 	mediump vec4 _LightColor0;
uniform 	float _NormalMapScale;
uniform 	float _Normal01_U_Speed;
uniform 	float _Normal01_VSpeed;
uniform 	float _NormalMapBias;
uniform 	float _Normal02_U_Speed;
uniform 	float _Normal02_V_Speed;
uniform 	float _RefractionIntensity;
uniform 	float _OpacityByDepth;
uniform 	float _SpecularIntensity;
uniform 	vec3 _ES_MoonDirection;
uniform 	vec3 _ES_SunDirection;
uniform 	float _Gloss;
uniform 	float _ShoreTransparency;
uniform 	float _SpecularPower;
uniform 	vec4 _ShallowColor;
uniform 	float _ShoreFade;
uniform 	vec4 _DeepColor;
uniform 	float _DeepColorDepth;
uniform 	float _DeepColorFade;
uniform 	vec4 _DistortionIntensity;
uniform 	float _SSRDistortion;
uniform 	float _SSRDistortion_Shore;
uniform 	float _SSRIntensity;
uniform 	float _ReflectionIntensity;
uniform 	float _FresnelPower;
uniform 	float _ShoreReflectionFade;
uniform 	mediump float _ProjectUVScale;
uniform 	vec4 _ReflectionSkyCubeMap_HDR;
uniform lowp sampler2D _Normal01;
uniform lowp sampler2D _Normal02;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _SceneScaledBufferBeforTransParent;
uniform lowp samplerCube _ReflectionSkyCubeMap;
uniform lowp sampler2D _SSRTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD8;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec3 u_xlat1;
mediump float u_xlat16_1;
lowp vec3 u_xlat10_1;
bool u_xlatb1;
vec4 u_xlat2;
lowp vec4 u_xlat10_2;
mediump vec3 u_xlat16_3;
lowp vec4 u_xlat10_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
lowp vec3 u_xlat10_7;
mediump vec3 u_xlat16_8;
vec3 u_xlat9;
vec3 u_xlat10;
vec3 u_xlat11;
float u_xlat13;
float u_xlat25;
bool u_xlatb25;
vec2 u_xlat30;
mediump float u_xlat16_36;
float u_xlat37;
float u_xlat38;
float u_xlat40;
void main()
{
    u_xlat16_0.w = -1.0;
    u_xlat1.xy = vs_TEXCOORD5.zx * vec2(vec2(_ProjectUVScale, _ProjectUVScale));
    u_xlat2.w = _Time.y * _Normal02_V_Speed + u_xlat1.x;
    u_xlat2.yz = _Time.yy * vec2(_Normal01_VSpeed, _Normal02_U_Speed) + u_xlat1.xy;
    u_xlat2.x = _Time.y * _Normal01_U_Speed + u_xlat1.y;
    u_xlat10_1.xyz = texture(_Normal01, u_xlat2.xy, _NormalMapBias).xyz;
    u_xlat10_2.xyz = texture(_Normal02, u_xlat2.zw, _NormalMapBias).xyz;
    u_xlat16_0.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_3.xyz = u_xlat10_2.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.wwz;
    u_xlat16_0.xy = u_xlat16_0.xy * vec2(_NormalMapScale);
    u_xlat16_3.xy = u_xlat16_3.xy * vec2(_NormalMapScale);
    u_xlat16_0.z = -1.0;
    u_xlat16_0.xyz = u_xlat16_0.xzy + u_xlat16_3.xzy;
    u_xlat1.xyz = u_xlat16_0.xzy * _DistortionIntensity.xyz;
    u_xlat2.x = vs_TEXCOORD8.x;
    u_xlat2.y = vs_TEXCOORD9.x;
    u_xlat2.z = vs_TEXCOORD6.x;
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat4.x = vs_TEXCOORD8.y;
    u_xlat4.y = vs_TEXCOORD9.y;
    u_xlat4.z = vs_TEXCOORD6.y;
    u_xlat2.y = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat4.x = vs_TEXCOORD8.z;
    u_xlat4.y = vs_TEXCOORD9.z;
    u_xlat4.z = vs_TEXCOORD6.z;
    u_xlat2.z = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat1.xy = u_xlat1.xy * vec2(_SSRDistortion);
    u_xlat25 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat25 = inversesqrt(u_xlat25);
    u_xlat2.xyz = vec3(u_xlat25) * u_xlat2.xyz;
    u_xlat4.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat25 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat25 = inversesqrt(u_xlat25);
    u_xlat5.xyz = vec3(u_xlat25) * u_xlat4.xyz;
    u_xlat37 = dot((-u_xlat5.xyz), u_xlat2.xyz);
    u_xlat37 = u_xlat37 + u_xlat37;
    u_xlat2.xyz = u_xlat2.xyz * (-vec3(u_xlat37)) + (-u_xlat5.xyz);
    u_xlat10_2 = textureLod(_ReflectionSkyCubeMap, u_xlat2.xyz, 0.0);
    u_xlat16_36 = u_xlat10_2.w + -1.0;
    u_xlat16_36 = _ReflectionSkyCubeMap_HDR.w * u_xlat16_36 + 1.0;
    u_xlat16_36 = log2(u_xlat16_36);
    u_xlat16_36 = u_xlat16_36 * _ReflectionSkyCubeMap_HDR.y;
    u_xlat16_36 = exp2(u_xlat16_36);
    u_xlat16_36 = u_xlat16_36 * _ReflectionSkyCubeMap_HDR.x;
    u_xlat6.xy = u_xlat16_0.xz * vec2(vec2(_RefractionIntensity, _RefractionIntensity));
    u_xlat37 = float(1.0) / vs_TEXCOORD4.w;
    u_xlat37 = u_xlat37 * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat37 = min(max(u_xlat37, 0.0), 1.0);
#else
    u_xlat37 = clamp(u_xlat37, 0.0, 1.0);
#endif
    u_xlat6.xy = vec2(u_xlat37) * u_xlat6.xy;
    u_xlat6.xy = u_xlat6.xy * vs_TEXCOORD4.ww;
    u_xlat30.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat37 = texture(_CameraDepthTexture, u_xlat30.xy).x;
    u_xlat37 = _ZBufferParams.z * u_xlat37 + _ZBufferParams.w;
    u_xlat37 = float(1.0) / u_xlat37;
    u_xlat37 = u_xlat37 + (-vs_TEXCOORD4.w);
#ifdef UNITY_ADRENO_ES3
    u_xlat37 = min(max(u_xlat37, 0.0), 1.0);
#else
    u_xlat37 = clamp(u_xlat37, 0.0, 1.0);
#endif
    u_xlat6.xy = vec2(u_xlat37) * u_xlat6.xy;
    u_xlat6.z = 0.0;
    u_xlat7.xyz = u_xlat6.xyz + vs_TEXCOORD4.xyw;
    u_xlat7.xy = u_xlat7.xy / u_xlat7.zz;
    u_xlat37 = texture(_CameraDepthTexture, u_xlat7.xy).x;
    u_xlat37 = _ZBufferParams.z * u_xlat37 + _ZBufferParams.w;
    u_xlat37 = float(1.0) / u_xlat37;
    u_xlat37 = u_xlat37 + (-vs_TEXCOORD4.w);
#ifdef UNITY_ADRENO_ES3
    u_xlat37 = min(max(u_xlat37, 0.0), 1.0);
#else
    u_xlat37 = clamp(u_xlat37, 0.0, 1.0);
#endif
    u_xlat6.xyz = vec3(u_xlat37) * u_xlat6.xyz + vs_TEXCOORD4.xyw;
    u_xlat30.xy = u_xlat6.xy / u_xlat6.zz;
    u_xlat6.xy = u_xlat6.xy / vs_TEXCOORD4.ww;
    u_xlat10_7.xyz = texture(_SceneScaledBufferBeforTransParent, u_xlat6.xy).xyz;
    u_xlat37 = texture(_CameraDepthTexture, u_xlat30.xy).x;
    u_xlat37 = _ZBufferParams.z * u_xlat37 + _ZBufferParams.w;
    u_xlat37 = float(1.0) / u_xlat37;
    u_xlat37 = u_xlat37 + (-vs_TEXCOORD4.w);
    u_xlat38 = float(1.0) / _SSRDistortion_Shore;
    u_xlat38 = u_xlat37 * u_xlat38;
#ifdef UNITY_ADRENO_ES3
    u_xlat38 = min(max(u_xlat38, 0.0), 1.0);
#else
    u_xlat38 = clamp(u_xlat38, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat1.xy * vec2(u_xlat38);
    u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD4.ww + vs_TEXCOORD4.xy;
    u_xlat1.xy = u_xlat1.xy / vs_TEXCOORD4.ww;
    u_xlat10_3 = texture(_SSRTexture, u_xlat1.xy).wxyz;
    u_xlat16_6.xyz = (-vec3(u_xlat16_36)) * u_xlat10_2.xyz + u_xlat10_3.yzw;
    u_xlat16_8.xyz = u_xlat10_2.xyz * vec3(u_xlat16_36);
    u_xlat16_3.x = u_xlat10_3.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat2.xyz = u_xlat16_6.xyz * vec3(vec3(_SSRIntensity, _SSRIntensity, _SSRIntensity));
    u_xlat2.xyz = u_xlat16_3.xxx * u_xlat2.xyz + u_xlat16_8.xyz;
    u_xlat1.x = 0.100000001 / _DeepColorDepth;
    u_xlat1.x = u_xlat1.x * u_xlat37;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.x = max(u_xlat1.x, 9.99999975e-05);
    u_xlat1.x = log2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _DeepColorFade;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat13 = float(1.0) / _ShoreTransparency;
    u_xlat38 = u_xlat13 * u_xlat37;
#ifdef UNITY_ADRENO_ES3
    u_xlat38 = min(max(u_xlat38, 0.0), 1.0);
#else
    u_xlat38 = clamp(u_xlat38, 0.0, 1.0);
#endif
    u_xlat38 = max(u_xlat38, 9.99999975e-05);
    u_xlat38 = log2(u_xlat38);
    u_xlat38 = u_xlat38 * _ShoreFade;
    u_xlat38 = exp2(u_xlat38);
    u_xlat6.xyz = _ShallowColor.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat6.xyz = vec3(u_xlat38) * u_xlat6.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat9.xyz = (-u_xlat6.xyz) * u_xlat10_7.xyz + _DeepColor.xyz;
    u_xlat10.xyz = u_xlat10_7.xyz * u_xlat6.xyz;
    u_xlat9.xyz = u_xlat1.xxx * u_xlat9.xyz + u_xlat10.xyz;
    u_xlat2.xyz = u_xlat2.xyz + (-u_xlat9.xyz);
    u_xlat1.x = float(1.0) / _ShoreReflectionFade;
    u_xlat1.x = u_xlat1.x * u_xlat37;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat40 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat40 = inversesqrt(u_xlat40);
    u_xlat11.xyz = vec3(u_xlat40) * vs_TEXCOORD6.xyz;
    u_xlat40 = dot(u_xlat5.xyz, u_xlat11.xyz);
    u_xlat40 = (-u_xlat40) + 1.0;
    u_xlat40 = max(u_xlat40, 9.99999975e-05);
    u_xlat40 = log2(u_xlat40);
    u_xlat5.x = u_xlat40 * _FresnelPower;
    u_xlat40 = u_xlat40 * _SpecularPower;
    u_xlat40 = exp2(u_xlat40);
    u_xlat5.x = exp2(u_xlat5.x);
    u_xlat5.x = u_xlat5.x * _ReflectionIntensity;
    u_xlat1.x = u_xlat1.x * u_xlat5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat2.xyz = u_xlat1.xxx * u_xlat2.xyz + u_xlat9.xyz;
    u_xlat2.xyz = (-u_xlat6.xyz) * u_xlat10_7.xyz + u_xlat2.xyz;
    u_xlat2.xyz = vec3(u_xlat38) * u_xlat2.xyz + u_xlat10.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(0.0>=_ES_MoonDirection.y);
#else
    u_xlatb1 = 0.0>=_ES_MoonDirection.y;
#endif
    u_xlat5.xyz = (bool(u_xlatb1)) ? _ES_SunDirection.xyz : _ES_MoonDirection.xyz;
    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat25) + u_xlat5.xyz;
    u_xlat1.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
    u_xlat16_0.y = 1.0;
    u_xlat16_1 = dot(u_xlat16_0.xyz, u_xlat16_0.xyz);
    u_xlat16_1 = inversesqrt(u_xlat16_1);
    u_xlat16_5.xyz = u_xlat16_0.xyz * vec3(u_xlat16_1);
    u_xlat1.x = dot(u_xlat16_5.xyz, u_xlat4.xyz);
    u_xlat1.x = max(u_xlat1.x, 9.99999975e-05);
    u_xlat1.x = log2(u_xlat1.x);
    u_xlat25 = _Gloss * 128.0;
    u_xlat1.x = u_xlat1.x * u_xlat25;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _SpecularIntensity;
    u_xlat1.x = max(u_xlat1.x, 0.0);
    u_xlat1.x = min(u_xlat1.x, 16.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb25 = !!(_ES_MoonDirection.y>=9.99999975e-05);
#else
    u_xlatb25 = _ES_MoonDirection.y>=9.99999975e-05;
#endif
    u_xlat25 = u_xlatb25 ? 1.0 : float(0.0);
    u_xlat38 = _ES_MoonDirection.y + -1.0;
    u_xlat25 = u_xlat25 * u_xlat38 + 1.0;
    u_xlat4.xyz = vec3(u_xlat25) * _LightColor0.xyz;
    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
    u_xlat1.x = u_xlat37 + -1.0;
    u_xlat1.x = u_xlat13 * u_xlat1.x;
    u_xlat1.x = u_xlat1.x * 0.100000001;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat1.xxx * u_xlat4.xyz;
    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat40) + u_xlat2.xyz;
    u_xlat1.x = 0.100000001 / _OpacityByDepth;
    u_xlat1.x = u_xlat1.x * u_xlat37;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat0.w = u_xlat1.x * vs_COLOR0.w;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MHY_SHADER_MIDDLE" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
uniform 	vec4 hlslcc_mtx4x4_mhyJitteredVP[4];
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
out highp vec4 vs_TEXCOORD9;
out highp vec4 vs_TEXCOORD10;
float u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec4 u_xlat8;
vec3 u_xlat9;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat9.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4_mhyJitteredVP[1];
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[3] * u_xlat2.wwww + u_xlat1;
    u_xlat3.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    u_xlat3.xyw = u_xlat1.xyw;
    gl_Position = u_xlat3;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD1.w = 1.0;
    u_xlat4.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat4.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat4.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat1.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
    u_xlat16_5.x = u_xlat4.y * u_xlat4.y;
    u_xlat16_5.x = u_xlat4.x * u_xlat4.x + (-u_xlat16_5.x);
    u_xlat16_6 = u_xlat4.yzzx * u_xlat4.xyzz;
    u_xlat16_7.x = dot(unity_SHBr, u_xlat16_6);
    u_xlat16_7.y = dot(unity_SHBg, u_xlat16_6);
    u_xlat16_7.z = dot(unity_SHBb, u_xlat16_6);
    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_7.xyz;
    u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat4.w = 1.0;
    u_xlat16_6.x = dot(unity_SHAr, u_xlat4);
    u_xlat16_6.y = dot(unity_SHAg, u_xlat4);
    u_xlat16_6.z = dot(unity_SHAb, u_xlat4);
    u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_6.xyz;
    vs_TEXCOORD1.xyz = u_xlat16_5.xyz;
    u_xlat1.x = u_xlat3.y * _ProjectionParams.x;
    u_xlat8.w = u_xlat1.x * 0.5;
    u_xlat8.xz = u_xlat3.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.z = u_xlat1.z;
    u_xlat3.xy = u_xlat8.zz + u_xlat8.xw;
    vs_TEXCOORD2 = u_xlat3;
    vs_TEXCOORD4.xyw = u_xlat3.xyw;
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD3.w = 0.0;
    u_xlat1.x = u_xlat2.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat2.x + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat2.z + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat2.w + u_xlat1.x;
    vs_TEXCOORD3.z = (-u_xlat1.x);
    vs_TEXCOORD5.w = 0.0;
    vs_TEXCOORD5.xyz = u_xlat9.xyz;
    u_xlat9.xyz = (-u_xlat9.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD6.w = 0.0;
    vs_TEXCOORD6.xyz = u_xlat4.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].www + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * in_POSITION0.yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.zzz + u_xlat1.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.www + u_xlat1.xyz;
    vs_TEXCOORD7.xyz = u_xlat1.xyz * vec3(-1.0, -1.0, 1.0);
    vs_TEXCOORD7.w = 0.0;
    u_xlat1.xyz = in_TANGENT0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat0 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0 = inversesqrt(u_xlat0);
    u_xlat1.xyz = vec3(u_xlat0) * u_xlat1.xyz;
    vs_TEXCOORD8.xyz = u_xlat1.xyz;
    vs_TEXCOORD8.w = 0.0;
    u_xlat2.xyz = u_xlat1.yzx * u_xlat4.zxy;
    u_xlat1.xyz = u_xlat4.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
    u_xlat0 = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD9.xyz = vec3(u_xlat0) * u_xlat1.xyz;
    vs_TEXCOORD9.w = 0.0;
    u_xlat0 = u_xlat9.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat9.x + u_xlat0;
    vs_TEXCOORD10.w = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat9.z + u_xlat0;
    vs_TEXCOORD10.xyz = u_xlat9.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ZBufferParams;
uniform 	mediump vec4 _LightColor0;
uniform 	float _NormalMapScale;
uniform 	float _Normal01_U_Speed;
uniform 	float _Normal01_VSpeed;
uniform 	float _NormalMapBias;
uniform 	float _Normal02_U_Speed;
uniform 	float _Normal02_V_Speed;
uniform 	float _RefractionIntensity;
uniform 	float _OpacityByDepth;
uniform 	float _SpecularIntensity;
uniform 	vec3 _ES_MoonDirection;
uniform 	vec3 _ES_SunDirection;
uniform 	float _Gloss;
uniform 	float _ShoreTransparency;
uniform 	float _SpecularPower;
uniform 	vec4 _ShallowColor;
uniform 	float _ShoreFade;
uniform 	vec4 _DeepColor;
uniform 	float _DeepColorDepth;
uniform 	float _DeepColorFade;
uniform 	vec4 _DistortionIntensity;
uniform 	float _SSRDistortion;
uniform 	float _SSRDistortion_Shore;
uniform 	float _SSRIntensity;
uniform 	float _ReflectionIntensity;
uniform 	float _FresnelPower;
uniform 	float _ShoreReflectionFade;
uniform 	mediump float _ProjectUVScale;
uniform 	vec4 _ReflectionSkyCubeMap_HDR;
uniform lowp sampler2D _Normal01;
uniform lowp sampler2D _Normal02;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _SceneScaledBufferBeforTransParent;
uniform lowp samplerCube _ReflectionSkyCubeMap;
uniform lowp sampler2D _SSRTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD8;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec3 u_xlat1;
mediump float u_xlat16_1;
lowp vec3 u_xlat10_1;
bool u_xlatb1;
vec4 u_xlat2;
lowp vec4 u_xlat10_2;
mediump vec3 u_xlat16_3;
lowp vec4 u_xlat10_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
lowp vec3 u_xlat10_7;
mediump vec3 u_xlat16_8;
vec3 u_xlat9;
vec3 u_xlat10;
vec3 u_xlat11;
float u_xlat13;
float u_xlat25;
bool u_xlatb25;
vec2 u_xlat30;
mediump float u_xlat16_36;
float u_xlat37;
float u_xlat38;
float u_xlat40;
void main()
{
    u_xlat16_0.w = -1.0;
    u_xlat1.xy = vs_TEXCOORD5.zx * vec2(vec2(_ProjectUVScale, _ProjectUVScale));
    u_xlat2.w = _Time.y * _Normal02_V_Speed + u_xlat1.x;
    u_xlat2.yz = _Time.yy * vec2(_Normal01_VSpeed, _Normal02_U_Speed) + u_xlat1.xy;
    u_xlat2.x = _Time.y * _Normal01_U_Speed + u_xlat1.y;
    u_xlat10_1.xyz = texture(_Normal01, u_xlat2.xy, _NormalMapBias).xyz;
    u_xlat10_2.xyz = texture(_Normal02, u_xlat2.zw, _NormalMapBias).xyz;
    u_xlat16_0.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_3.xyz = u_xlat10_2.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.wwz;
    u_xlat16_0.xy = u_xlat16_0.xy * vec2(_NormalMapScale);
    u_xlat16_3.xy = u_xlat16_3.xy * vec2(_NormalMapScale);
    u_xlat16_0.z = -1.0;
    u_xlat16_0.xyz = u_xlat16_0.xzy + u_xlat16_3.xzy;
    u_xlat1.xyz = u_xlat16_0.xzy * _DistortionIntensity.xyz;
    u_xlat2.x = vs_TEXCOORD8.x;
    u_xlat2.y = vs_TEXCOORD9.x;
    u_xlat2.z = vs_TEXCOORD6.x;
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat4.x = vs_TEXCOORD8.y;
    u_xlat4.y = vs_TEXCOORD9.y;
    u_xlat4.z = vs_TEXCOORD6.y;
    u_xlat2.y = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat4.x = vs_TEXCOORD8.z;
    u_xlat4.y = vs_TEXCOORD9.z;
    u_xlat4.z = vs_TEXCOORD6.z;
    u_xlat2.z = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat1.xy = u_xlat1.xy * vec2(_SSRDistortion);
    u_xlat25 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat25 = inversesqrt(u_xlat25);
    u_xlat2.xyz = vec3(u_xlat25) * u_xlat2.xyz;
    u_xlat4.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat25 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat25 = inversesqrt(u_xlat25);
    u_xlat5.xyz = vec3(u_xlat25) * u_xlat4.xyz;
    u_xlat37 = dot((-u_xlat5.xyz), u_xlat2.xyz);
    u_xlat37 = u_xlat37 + u_xlat37;
    u_xlat2.xyz = u_xlat2.xyz * (-vec3(u_xlat37)) + (-u_xlat5.xyz);
    u_xlat10_2 = textureLod(_ReflectionSkyCubeMap, u_xlat2.xyz, 0.0);
    u_xlat16_36 = u_xlat10_2.w + -1.0;
    u_xlat16_36 = _ReflectionSkyCubeMap_HDR.w * u_xlat16_36 + 1.0;
    u_xlat16_36 = log2(u_xlat16_36);
    u_xlat16_36 = u_xlat16_36 * _ReflectionSkyCubeMap_HDR.y;
    u_xlat16_36 = exp2(u_xlat16_36);
    u_xlat16_36 = u_xlat16_36 * _ReflectionSkyCubeMap_HDR.x;
    u_xlat6.xy = u_xlat16_0.xz * vec2(vec2(_RefractionIntensity, _RefractionIntensity));
    u_xlat37 = float(1.0) / vs_TEXCOORD4.w;
    u_xlat37 = u_xlat37 * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat37 = min(max(u_xlat37, 0.0), 1.0);
#else
    u_xlat37 = clamp(u_xlat37, 0.0, 1.0);
#endif
    u_xlat6.xy = vec2(u_xlat37) * u_xlat6.xy;
    u_xlat6.xy = u_xlat6.xy * vs_TEXCOORD4.ww;
    u_xlat30.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat37 = texture(_CameraDepthTexture, u_xlat30.xy).x;
    u_xlat37 = _ZBufferParams.z * u_xlat37 + _ZBufferParams.w;
    u_xlat37 = float(1.0) / u_xlat37;
    u_xlat37 = u_xlat37 + (-vs_TEXCOORD4.w);
#ifdef UNITY_ADRENO_ES3
    u_xlat37 = min(max(u_xlat37, 0.0), 1.0);
#else
    u_xlat37 = clamp(u_xlat37, 0.0, 1.0);
#endif
    u_xlat6.xy = vec2(u_xlat37) * u_xlat6.xy;
    u_xlat6.z = 0.0;
    u_xlat7.xyz = u_xlat6.xyz + vs_TEXCOORD4.xyw;
    u_xlat7.xy = u_xlat7.xy / u_xlat7.zz;
    u_xlat37 = texture(_CameraDepthTexture, u_xlat7.xy).x;
    u_xlat37 = _ZBufferParams.z * u_xlat37 + _ZBufferParams.w;
    u_xlat37 = float(1.0) / u_xlat37;
    u_xlat37 = u_xlat37 + (-vs_TEXCOORD4.w);
#ifdef UNITY_ADRENO_ES3
    u_xlat37 = min(max(u_xlat37, 0.0), 1.0);
#else
    u_xlat37 = clamp(u_xlat37, 0.0, 1.0);
#endif
    u_xlat6.xyz = vec3(u_xlat37) * u_xlat6.xyz + vs_TEXCOORD4.xyw;
    u_xlat30.xy = u_xlat6.xy / u_xlat6.zz;
    u_xlat6.xy = u_xlat6.xy / vs_TEXCOORD4.ww;
    u_xlat10_7.xyz = texture(_SceneScaledBufferBeforTransParent, u_xlat6.xy).xyz;
    u_xlat37 = texture(_CameraDepthTexture, u_xlat30.xy).x;
    u_xlat37 = _ZBufferParams.z * u_xlat37 + _ZBufferParams.w;
    u_xlat37 = float(1.0) / u_xlat37;
    u_xlat37 = u_xlat37 + (-vs_TEXCOORD4.w);
    u_xlat38 = float(1.0) / _SSRDistortion_Shore;
    u_xlat38 = u_xlat37 * u_xlat38;
#ifdef UNITY_ADRENO_ES3
    u_xlat38 = min(max(u_xlat38, 0.0), 1.0);
#else
    u_xlat38 = clamp(u_xlat38, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat1.xy * vec2(u_xlat38);
    u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD4.ww + vs_TEXCOORD4.xy;
    u_xlat1.xy = u_xlat1.xy / vs_TEXCOORD4.ww;
    u_xlat10_3 = texture(_SSRTexture, u_xlat1.xy).wxyz;
    u_xlat16_6.xyz = (-vec3(u_xlat16_36)) * u_xlat10_2.xyz + u_xlat10_3.yzw;
    u_xlat16_8.xyz = u_xlat10_2.xyz * vec3(u_xlat16_36);
    u_xlat16_3.x = u_xlat10_3.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat2.xyz = u_xlat16_6.xyz * vec3(vec3(_SSRIntensity, _SSRIntensity, _SSRIntensity));
    u_xlat2.xyz = u_xlat16_3.xxx * u_xlat2.xyz + u_xlat16_8.xyz;
    u_xlat1.x = 0.100000001 / _DeepColorDepth;
    u_xlat1.x = u_xlat1.x * u_xlat37;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.x = max(u_xlat1.x, 9.99999975e-05);
    u_xlat1.x = log2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _DeepColorFade;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat13 = float(1.0) / _ShoreTransparency;
    u_xlat38 = u_xlat13 * u_xlat37;
#ifdef UNITY_ADRENO_ES3
    u_xlat38 = min(max(u_xlat38, 0.0), 1.0);
#else
    u_xlat38 = clamp(u_xlat38, 0.0, 1.0);
#endif
    u_xlat38 = max(u_xlat38, 9.99999975e-05);
    u_xlat38 = log2(u_xlat38);
    u_xlat38 = u_xlat38 * _ShoreFade;
    u_xlat38 = exp2(u_xlat38);
    u_xlat6.xyz = _ShallowColor.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat6.xyz = vec3(u_xlat38) * u_xlat6.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat9.xyz = (-u_xlat6.xyz) * u_xlat10_7.xyz + _DeepColor.xyz;
    u_xlat10.xyz = u_xlat10_7.xyz * u_xlat6.xyz;
    u_xlat9.xyz = u_xlat1.xxx * u_xlat9.xyz + u_xlat10.xyz;
    u_xlat2.xyz = u_xlat2.xyz + (-u_xlat9.xyz);
    u_xlat1.x = float(1.0) / _ShoreReflectionFade;
    u_xlat1.x = u_xlat1.x * u_xlat37;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat40 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat40 = inversesqrt(u_xlat40);
    u_xlat11.xyz = vec3(u_xlat40) * vs_TEXCOORD6.xyz;
    u_xlat40 = dot(u_xlat5.xyz, u_xlat11.xyz);
    u_xlat40 = (-u_xlat40) + 1.0;
    u_xlat40 = max(u_xlat40, 9.99999975e-05);
    u_xlat40 = log2(u_xlat40);
    u_xlat5.x = u_xlat40 * _FresnelPower;
    u_xlat40 = u_xlat40 * _SpecularPower;
    u_xlat40 = exp2(u_xlat40);
    u_xlat5.x = exp2(u_xlat5.x);
    u_xlat5.x = u_xlat5.x * _ReflectionIntensity;
    u_xlat1.x = u_xlat1.x * u_xlat5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat2.xyz = u_xlat1.xxx * u_xlat2.xyz + u_xlat9.xyz;
    u_xlat2.xyz = (-u_xlat6.xyz) * u_xlat10_7.xyz + u_xlat2.xyz;
    u_xlat2.xyz = vec3(u_xlat38) * u_xlat2.xyz + u_xlat10.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(0.0>=_ES_MoonDirection.y);
#else
    u_xlatb1 = 0.0>=_ES_MoonDirection.y;
#endif
    u_xlat5.xyz = (bool(u_xlatb1)) ? _ES_SunDirection.xyz : _ES_MoonDirection.xyz;
    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat25) + u_xlat5.xyz;
    u_xlat1.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
    u_xlat16_0.y = 1.0;
    u_xlat16_1 = dot(u_xlat16_0.xyz, u_xlat16_0.xyz);
    u_xlat16_1 = inversesqrt(u_xlat16_1);
    u_xlat16_5.xyz = u_xlat16_0.xyz * vec3(u_xlat16_1);
    u_xlat1.x = dot(u_xlat16_5.xyz, u_xlat4.xyz);
    u_xlat1.x = max(u_xlat1.x, 9.99999975e-05);
    u_xlat1.x = log2(u_xlat1.x);
    u_xlat25 = _Gloss * 128.0;
    u_xlat1.x = u_xlat1.x * u_xlat25;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _SpecularIntensity;
    u_xlat1.x = max(u_xlat1.x, 0.0);
    u_xlat1.x = min(u_xlat1.x, 16.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb25 = !!(_ES_MoonDirection.y>=9.99999975e-05);
#else
    u_xlatb25 = _ES_MoonDirection.y>=9.99999975e-05;
#endif
    u_xlat25 = u_xlatb25 ? 1.0 : float(0.0);
    u_xlat38 = _ES_MoonDirection.y + -1.0;
    u_xlat25 = u_xlat25 * u_xlat38 + 1.0;
    u_xlat4.xyz = vec3(u_xlat25) * _LightColor0.xyz;
    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
    u_xlat1.x = u_xlat37 + -1.0;
    u_xlat1.x = u_xlat13 * u_xlat1.x;
    u_xlat1.x = u_xlat1.x * 0.100000001;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat1.xxx * u_xlat4.xyz;
    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat40) + u_xlat2.xyz;
    u_xlat1.x = 0.100000001 / _OpacityByDepth;
    u_xlat1.x = u_xlat1.x * u_xlat37;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat0.w = u_xlat1.x * vs_COLOR0.w;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "MHY_SHADER_LOW" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump float _MHYZBias;
uniform 	vec4 hlslcc_mtx4x4_mhyJitteredVP[4];
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
out highp vec4 vs_TEXCOORD9;
out highp vec4 vs_TEXCOORD10;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec4 u_xlat8;
float u_xlat27;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4_mhyJitteredVP[1];
    u_xlat2 = hlslcc_mtx4x4_mhyJitteredVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4_mhyJitteredVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4_mhyJitteredVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat3.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    u_xlat3.xyw = u_xlat2.xyw;
    gl_Position = u_xlat3;
    vs_COLOR0 = in_COLOR0;
    u_xlat4.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat4.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat4.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat27 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat4.xyz = vec3(u_xlat27) * u_xlat4.xyz;
    u_xlat16_5.x = u_xlat4.y * u_xlat4.y;
    u_xlat16_5.x = u_xlat4.x * u_xlat4.x + (-u_xlat16_5.x);
    u_xlat16_6 = u_xlat4.yzzx * u_xlat4.xyzz;
    u_xlat16_7.x = dot(unity_SHBr, u_xlat16_6);
    u_xlat16_7.y = dot(unity_SHBg, u_xlat16_6);
    u_xlat16_7.z = dot(unity_SHBb, u_xlat16_6);
    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_7.xyz;
    u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat4.w = 1.0;
    u_xlat16_6.x = dot(unity_SHAr, u_xlat4);
    u_xlat16_6.y = dot(unity_SHAg, u_xlat4);
    u_xlat16_6.z = dot(unity_SHAb, u_xlat4);
    u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_6.xyz;
    vs_TEXCOORD1.xyz = u_xlat16_5.xyz;
    vs_TEXCOORD1.w = 1.0;
    u_xlat27 = u_xlat3.y * _ProjectionParams.x;
    u_xlat8.w = u_xlat27 * 0.5;
    u_xlat8.xz = u_xlat3.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.z = u_xlat2.z;
    u_xlat3.xy = u_xlat8.zz + u_xlat8.xw;
    vs_TEXCOORD2 = u_xlat3;
    vs_TEXCOORD4.xyw = u_xlat3.xyw;
    u_xlat27 = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat27 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat27;
    u_xlat27 = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat27;
    u_xlat27 = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat27;
    vs_TEXCOORD3.z = (-u_xlat27);
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD3.w = 0.0;
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD5.w = 0.0;
    vs_TEXCOORD6.xyz = u_xlat4.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[1].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].www + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * in_POSITION0.yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.zzz + u_xlat1.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.www + u_xlat1.xyz;
    vs_TEXCOORD7.xyz = u_xlat1.xyz * vec3(-1.0, -1.0, 1.0);
    vs_TEXCOORD7.w = 0.0;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat27 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat1.xyz = vec3(u_xlat27) * u_xlat1.xyz;
    vs_TEXCOORD8.xyz = u_xlat1.xyz;
    vs_TEXCOORD8.w = 0.0;
    u_xlat2.xyz = u_xlat1.yzx * u_xlat4.zxy;
    u_xlat1.xyz = u_xlat4.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
    u_xlat27 = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD9.xyz = vec3(u_xlat27) * u_xlat1.xyz;
    vs_TEXCOORD9.w = 0.0;
    u_xlat27 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat27 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat27;
    vs_TEXCOORD10.w = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat27;
    vs_TEXCOORD10.xyz = u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ZBufferParams;
uniform 	mediump vec4 _LightColor0;
uniform 	float _NormalMapScale;
uniform 	float _Normal01_U_Speed;
uniform 	float _Normal01_VSpeed;
uniform 	float _NormalMapBias;
uniform 	float _Normal02_U_Speed;
uniform 	float _Normal02_V_Speed;
uniform 	float _RefractionIntensity;
uniform 	float _OpacityByDepth;
uniform 	float _SpecularIntensity;
uniform 	vec3 _ES_MoonDirection;
uniform 	vec3 _ES_SunDirection;
uniform 	float _Gloss;
uniform 	float _ShoreTransparency;
uniform 	float _SpecularPower;
uniform 	vec4 _ShallowColor;
uniform 	float _ShoreFade;
uniform 	vec4 _DeepColor;
uniform 	float _DeepColorDepth;
uniform 	float _DeepColorFade;
uniform 	vec4 _DistortionIntensity;
uniform 	float _ReflectionIntensity;
uniform 	float _FresnelPower;
uniform 	float _ShoreReflectionFade;
uniform 	mediump float _ProjectUVScale;
uniform 	vec4 _ReflectionSkyCubeMap_HDR;
uniform lowp sampler2D _Normal01;
uniform lowp sampler2D _Normal02;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _SceneScaledBufferBeforTransParent;
uniform lowp samplerCube _ReflectionSkyCubeMap;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD8;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec3 u_xlat1;
lowp vec3 u_xlat10_1;
vec4 u_xlat2;
lowp vec3 u_xlat10_2;
bool u_xlatb2;
mediump vec3 u_xlat16_3;
lowp vec4 u_xlat10_3;
vec3 u_xlat4;
vec3 u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
vec3 u_xlat8;
vec3 u_xlat9;
vec3 u_xlat10;
float u_xlat13;
vec3 u_xlat15;
mediump vec3 u_xlat16_15;
bool u_xlatb15;
float u_xlat16;
float u_xlat23;
float u_xlat27;
mediump float u_xlat16_33;
float u_xlat34;
mediump float u_xlat16_34;
float u_xlat35;
float u_xlat37;
void main()
{
    u_xlat16_0.w = -1.0;
    u_xlat1.xy = vs_TEXCOORD5.zx * vec2(vec2(_ProjectUVScale, _ProjectUVScale));
    u_xlat2.w = _Time.y * _Normal02_V_Speed + u_xlat1.x;
    u_xlat2.yz = _Time.yy * vec2(_Normal01_VSpeed, _Normal02_U_Speed) + u_xlat1.xy;
    u_xlat2.x = _Time.y * _Normal01_U_Speed + u_xlat1.y;
    u_xlat10_1.xyz = texture(_Normal01, u_xlat2.xy, _NormalMapBias).xyz;
    u_xlat10_2.xyz = texture(_Normal02, u_xlat2.zw, _NormalMapBias).xyz;
    u_xlat16_0.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_3.xyz = u_xlat10_2.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.wwz;
    u_xlat16_0.xy = u_xlat16_0.xy * vec2(_NormalMapScale);
    u_xlat16_3.xy = u_xlat16_3.xy * vec2(_NormalMapScale);
    u_xlat16_0.z = -1.0;
    u_xlat16_0.xyz = u_xlat16_0.xzy + u_xlat16_3.xzy;
    u_xlat1.xyz = u_xlat16_0.xzy * _DistortionIntensity.xyz;
    u_xlat2.x = vs_TEXCOORD8.x;
    u_xlat2.y = vs_TEXCOORD9.x;
    u_xlat2.z = vs_TEXCOORD6.x;
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat4.x = vs_TEXCOORD8.y;
    u_xlat4.y = vs_TEXCOORD9.y;
    u_xlat4.z = vs_TEXCOORD6.y;
    u_xlat2.y = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat4.x = vs_TEXCOORD8.z;
    u_xlat4.y = vs_TEXCOORD9.z;
    u_xlat4.z = vs_TEXCOORD6.z;
    u_xlat2.z = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat1.xyz = u_xlat1.xxx * u_xlat2.xyz;
    u_xlat2.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat34 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat34 = inversesqrt(u_xlat34);
    u_xlat4.xyz = vec3(u_xlat34) * u_xlat2.xyz;
    u_xlat35 = dot((-u_xlat4.xyz), u_xlat1.xyz);
    u_xlat35 = u_xlat35 + u_xlat35;
    u_xlat1.xyz = u_xlat1.xyz * (-vec3(u_xlat35)) + (-u_xlat4.xyz);
    u_xlat10_3 = textureLod(_ReflectionSkyCubeMap, u_xlat1.xyz, 0.0);
    u_xlat16_33 = u_xlat10_3.w + -1.0;
    u_xlat16_33 = _ReflectionSkyCubeMap_HDR.w * u_xlat16_33 + 1.0;
    u_xlat16_33 = log2(u_xlat16_33);
    u_xlat16_33 = u_xlat16_33 * _ReflectionSkyCubeMap_HDR.y;
    u_xlat16_33 = exp2(u_xlat16_33);
    u_xlat16_33 = u_xlat16_33 * _ReflectionSkyCubeMap_HDR.x;
    u_xlat1.xy = u_xlat16_0.xz * vec2(vec2(_RefractionIntensity, _RefractionIntensity));
    u_xlat23 = float(1.0) / vs_TEXCOORD4.w;
    u_xlat23 = u_xlat23 * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat23 = min(max(u_xlat23, 0.0), 1.0);
#else
    u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
#endif
    u_xlat1.xy = vec2(u_xlat23) * u_xlat1.xy;
    u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD4.ww;
    u_xlat5.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat23 = texture(_CameraDepthTexture, u_xlat5.xy).x;
    u_xlat23 = _ZBufferParams.z * u_xlat23 + _ZBufferParams.w;
    u_xlat23 = float(1.0) / u_xlat23;
    u_xlat23 = u_xlat23 + (-vs_TEXCOORD4.w);
#ifdef UNITY_ADRENO_ES3
    u_xlat23 = min(max(u_xlat23, 0.0), 1.0);
#else
    u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
#endif
    u_xlat1.xy = vec2(u_xlat23) * u_xlat1.xy;
    u_xlat1.z = 0.0;
    u_xlat5.xyz = u_xlat1.xyz + vs_TEXCOORD4.xyw;
    u_xlat5.xy = u_xlat5.xy / u_xlat5.zz;
    u_xlat35 = texture(_CameraDepthTexture, u_xlat5.xy).x;
    u_xlat35 = _ZBufferParams.z * u_xlat35 + _ZBufferParams.w;
    u_xlat35 = float(1.0) / u_xlat35;
    u_xlat35 = u_xlat35 + (-vs_TEXCOORD4.w);
#ifdef UNITY_ADRENO_ES3
    u_xlat35 = min(max(u_xlat35, 0.0), 1.0);
#else
    u_xlat35 = clamp(u_xlat35, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat35) * u_xlat1.xyz + vs_TEXCOORD4.xyw;
    u_xlat5.xy = u_xlat1.xy / u_xlat1.zz;
    u_xlat1.xy = u_xlat1.xy / vs_TEXCOORD4.ww;
    u_xlat10_1.xyz = texture(_SceneScaledBufferBeforTransParent, u_xlat1.xy).xyz;
    u_xlat35 = texture(_CameraDepthTexture, u_xlat5.xy).x;
    u_xlat35 = _ZBufferParams.z * u_xlat35 + _ZBufferParams.w;
    u_xlat35 = float(1.0) / u_xlat35;
    u_xlat35 = u_xlat35 + (-vs_TEXCOORD4.w);
    u_xlat37 = 0.100000001 / _DeepColorDepth;
    u_xlat37 = u_xlat35 * u_xlat37;
#ifdef UNITY_ADRENO_ES3
    u_xlat37 = min(max(u_xlat37, 0.0), 1.0);
#else
    u_xlat37 = clamp(u_xlat37, 0.0, 1.0);
#endif
    u_xlat37 = max(u_xlat37, 9.99999975e-05);
    u_xlat37 = log2(u_xlat37);
    u_xlat37 = u_xlat37 * _DeepColorFade;
    u_xlat37 = exp2(u_xlat37);
    u_xlat5.x = float(1.0) / _ShoreTransparency;
    u_xlat16 = u_xlat35 * u_xlat5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16 = min(max(u_xlat16, 0.0), 1.0);
#else
    u_xlat16 = clamp(u_xlat16, 0.0, 1.0);
#endif
    u_xlat16 = max(u_xlat16, 9.99999975e-05);
    u_xlat16 = log2(u_xlat16);
    u_xlat16 = u_xlat16 * _ShoreFade;
    u_xlat16 = exp2(u_xlat16);
    u_xlat6.xyz = _ShallowColor.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat6.xyz = vec3(u_xlat16) * u_xlat6.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat7.xyz = (-u_xlat6.xyz) * u_xlat10_1.xyz + _DeepColor.xyz;
    u_xlat8.xyz = u_xlat10_1.xyz * u_xlat6.xyz;
    u_xlat7.xyz = vec3(u_xlat37) * u_xlat7.xyz + u_xlat8.xyz;
    u_xlat9.xyz = vec3(u_xlat16_33) * u_xlat10_3.xyz + (-u_xlat7.xyz);
    u_xlat37 = float(1.0) / _ShoreReflectionFade;
    u_xlat37 = u_xlat35 * u_xlat37;
#ifdef UNITY_ADRENO_ES3
    u_xlat37 = min(max(u_xlat37, 0.0), 1.0);
#else
    u_xlat37 = clamp(u_xlat37, 0.0, 1.0);
#endif
    u_xlat27 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat10.xyz = vec3(u_xlat27) * vs_TEXCOORD6.xyz;
    u_xlat4.x = dot(u_xlat4.xyz, u_xlat10.xyz);
    u_xlat4.x = (-u_xlat4.x) + 1.0;
    u_xlat4.x = max(u_xlat4.x, 9.99999975e-05);
    u_xlat4.x = log2(u_xlat4.x);
    u_xlat15.x = u_xlat4.x * _FresnelPower;
    u_xlat4.x = u_xlat4.x * _SpecularPower;
    u_xlat4.x = exp2(u_xlat4.x);
    u_xlat15.x = exp2(u_xlat15.x);
    u_xlat15.x = u_xlat15.x * _ReflectionIntensity;
    u_xlat15.x = u_xlat37 * u_xlat15.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat15.x = min(max(u_xlat15.x, 0.0), 1.0);
#else
    u_xlat15.x = clamp(u_xlat15.x, 0.0, 1.0);
#endif
    u_xlat15.xyz = u_xlat15.xxx * u_xlat9.xyz + u_xlat7.xyz;
    u_xlat1.xyz = (-u_xlat6.xyz) * u_xlat10_1.xyz + u_xlat15.xyz;
    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz + u_xlat8.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(0.0>=_ES_MoonDirection.y);
#else
    u_xlatb15 = 0.0>=_ES_MoonDirection.y;
#endif
    u_xlat15.xyz = (bool(u_xlatb15)) ? _ES_SunDirection.xyz : _ES_MoonDirection.xyz;
    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat34) + u_xlat15.xyz;
    u_xlat34 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat34 = inversesqrt(u_xlat34);
    u_xlat2.xyz = vec3(u_xlat34) * u_xlat2.xyz;
    u_xlat16_0.y = 1.0;
    u_xlat16_34 = dot(u_xlat16_0.xyz, u_xlat16_0.xyz);
    u_xlat16_34 = inversesqrt(u_xlat16_34);
    u_xlat16_15.xyz = u_xlat16_0.xyz * vec3(u_xlat16_34);
    u_xlat34 = dot(u_xlat16_15.xyz, u_xlat2.xyz);
    u_xlat34 = max(u_xlat34, 9.99999975e-05);
    u_xlat34 = log2(u_xlat34);
    u_xlat2.x = _Gloss * 128.0;
    u_xlat34 = u_xlat34 * u_xlat2.x;
    u_xlat34 = exp2(u_xlat34);
    u_xlat34 = u_xlat34 * _SpecularIntensity;
    u_xlat34 = max(u_xlat34, 0.0);
    u_xlat34 = min(u_xlat34, 16.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(_ES_MoonDirection.y>=9.99999975e-05);
#else
    u_xlatb2 = _ES_MoonDirection.y>=9.99999975e-05;
#endif
    u_xlat2.x = u_xlatb2 ? 1.0 : float(0.0);
    u_xlat13 = _ES_MoonDirection.y + -1.0;
    u_xlat2.x = u_xlat2.x * u_xlat13 + 1.0;
    u_xlat2.xyz = u_xlat2.xxx * _LightColor0.xyz;
    u_xlat2.xyz = vec3(u_xlat34) * u_xlat2.xyz;
    u_xlat34 = u_xlat35 + -1.0;
    u_xlat34 = u_xlat5.x * u_xlat34;
    u_xlat34 = u_xlat34 * 0.100000001;
#ifdef UNITY_ADRENO_ES3
    u_xlat34 = min(max(u_xlat34, 0.0), 1.0);
#else
    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
#endif
    u_xlat2.xyz = vec3(u_xlat34) * u_xlat2.xyz;
    u_xlat0.xyz = u_xlat2.xyz * u_xlat4.xxx + u_xlat1.xyz;
    u_xlat1.x = 0.100000001 / _OpacityByDepth;
    u_xlat1.x = u_xlat1.x * u_xlat35;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat0.w = u_xlat1.x * vs_COLOR0.w;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MHY_SHADER_LOW" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
uniform 	vec4 hlslcc_mtx4x4_mhyJitteredVP[4];
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
out highp vec4 vs_TEXCOORD9;
out highp vec4 vs_TEXCOORD10;
float u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec4 u_xlat8;
vec3 u_xlat9;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat9.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4_mhyJitteredVP[1];
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[3] * u_xlat2.wwww + u_xlat1;
    u_xlat3.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    u_xlat3.xyw = u_xlat1.xyw;
    gl_Position = u_xlat3;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD1.w = 1.0;
    u_xlat4.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat4.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat4.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat1.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
    u_xlat16_5.x = u_xlat4.y * u_xlat4.y;
    u_xlat16_5.x = u_xlat4.x * u_xlat4.x + (-u_xlat16_5.x);
    u_xlat16_6 = u_xlat4.yzzx * u_xlat4.xyzz;
    u_xlat16_7.x = dot(unity_SHBr, u_xlat16_6);
    u_xlat16_7.y = dot(unity_SHBg, u_xlat16_6);
    u_xlat16_7.z = dot(unity_SHBb, u_xlat16_6);
    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_7.xyz;
    u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat4.w = 1.0;
    u_xlat16_6.x = dot(unity_SHAr, u_xlat4);
    u_xlat16_6.y = dot(unity_SHAg, u_xlat4);
    u_xlat16_6.z = dot(unity_SHAb, u_xlat4);
    u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_6.xyz;
    vs_TEXCOORD1.xyz = u_xlat16_5.xyz;
    u_xlat1.x = u_xlat3.y * _ProjectionParams.x;
    u_xlat8.w = u_xlat1.x * 0.5;
    u_xlat8.xz = u_xlat3.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.z = u_xlat1.z;
    u_xlat3.xy = u_xlat8.zz + u_xlat8.xw;
    vs_TEXCOORD2 = u_xlat3;
    vs_TEXCOORD4.xyw = u_xlat3.xyw;
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD3.w = 0.0;
    u_xlat1.x = u_xlat2.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat2.x + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat2.z + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat2.w + u_xlat1.x;
    vs_TEXCOORD3.z = (-u_xlat1.x);
    vs_TEXCOORD5.w = 0.0;
    vs_TEXCOORD5.xyz = u_xlat9.xyz;
    u_xlat9.xyz = (-u_xlat9.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD6.w = 0.0;
    vs_TEXCOORD6.xyz = u_xlat4.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].www + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * in_POSITION0.yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.zzz + u_xlat1.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.www + u_xlat1.xyz;
    vs_TEXCOORD7.xyz = u_xlat1.xyz * vec3(-1.0, -1.0, 1.0);
    vs_TEXCOORD7.w = 0.0;
    u_xlat1.xyz = in_TANGENT0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat0 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0 = inversesqrt(u_xlat0);
    u_xlat1.xyz = vec3(u_xlat0) * u_xlat1.xyz;
    vs_TEXCOORD8.xyz = u_xlat1.xyz;
    vs_TEXCOORD8.w = 0.0;
    u_xlat2.xyz = u_xlat1.yzx * u_xlat4.zxy;
    u_xlat1.xyz = u_xlat4.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
    u_xlat0 = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD9.xyz = vec3(u_xlat0) * u_xlat1.xyz;
    vs_TEXCOORD9.w = 0.0;
    u_xlat0 = u_xlat9.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat9.x + u_xlat0;
    vs_TEXCOORD10.w = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat9.z + u_xlat0;
    vs_TEXCOORD10.xyz = u_xlat9.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ZBufferParams;
uniform 	mediump vec4 _LightColor0;
uniform 	float _NormalMapScale;
uniform 	float _Normal01_U_Speed;
uniform 	float _Normal01_VSpeed;
uniform 	float _NormalMapBias;
uniform 	float _Normal02_U_Speed;
uniform 	float _Normal02_V_Speed;
uniform 	float _RefractionIntensity;
uniform 	float _OpacityByDepth;
uniform 	float _SpecularIntensity;
uniform 	vec3 _ES_MoonDirection;
uniform 	vec3 _ES_SunDirection;
uniform 	float _Gloss;
uniform 	float _ShoreTransparency;
uniform 	float _SpecularPower;
uniform 	vec4 _ShallowColor;
uniform 	float _ShoreFade;
uniform 	vec4 _DeepColor;
uniform 	float _DeepColorDepth;
uniform 	float _DeepColorFade;
uniform 	vec4 _DistortionIntensity;
uniform 	float _ReflectionIntensity;
uniform 	float _FresnelPower;
uniform 	float _ShoreReflectionFade;
uniform 	mediump float _ProjectUVScale;
uniform 	vec4 _ReflectionSkyCubeMap_HDR;
uniform lowp sampler2D _Normal01;
uniform lowp sampler2D _Normal02;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _SceneScaledBufferBeforTransParent;
uniform lowp samplerCube _ReflectionSkyCubeMap;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD8;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec3 u_xlat1;
lowp vec3 u_xlat10_1;
vec4 u_xlat2;
lowp vec3 u_xlat10_2;
bool u_xlatb2;
mediump vec3 u_xlat16_3;
lowp vec4 u_xlat10_3;
vec3 u_xlat4;
vec3 u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
vec3 u_xlat8;
vec3 u_xlat9;
vec3 u_xlat10;
float u_xlat13;
vec3 u_xlat15;
mediump vec3 u_xlat16_15;
bool u_xlatb15;
float u_xlat16;
float u_xlat23;
float u_xlat27;
mediump float u_xlat16_33;
float u_xlat34;
mediump float u_xlat16_34;
float u_xlat35;
float u_xlat37;
void main()
{
    u_xlat16_0.w = -1.0;
    u_xlat1.xy = vs_TEXCOORD5.zx * vec2(vec2(_ProjectUVScale, _ProjectUVScale));
    u_xlat2.w = _Time.y * _Normal02_V_Speed + u_xlat1.x;
    u_xlat2.yz = _Time.yy * vec2(_Normal01_VSpeed, _Normal02_U_Speed) + u_xlat1.xy;
    u_xlat2.x = _Time.y * _Normal01_U_Speed + u_xlat1.y;
    u_xlat10_1.xyz = texture(_Normal01, u_xlat2.xy, _NormalMapBias).xyz;
    u_xlat10_2.xyz = texture(_Normal02, u_xlat2.zw, _NormalMapBias).xyz;
    u_xlat16_0.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_3.xyz = u_xlat10_2.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.wwz;
    u_xlat16_0.xy = u_xlat16_0.xy * vec2(_NormalMapScale);
    u_xlat16_3.xy = u_xlat16_3.xy * vec2(_NormalMapScale);
    u_xlat16_0.z = -1.0;
    u_xlat16_0.xyz = u_xlat16_0.xzy + u_xlat16_3.xzy;
    u_xlat1.xyz = u_xlat16_0.xzy * _DistortionIntensity.xyz;
    u_xlat2.x = vs_TEXCOORD8.x;
    u_xlat2.y = vs_TEXCOORD9.x;
    u_xlat2.z = vs_TEXCOORD6.x;
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat4.x = vs_TEXCOORD8.y;
    u_xlat4.y = vs_TEXCOORD9.y;
    u_xlat4.z = vs_TEXCOORD6.y;
    u_xlat2.y = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat4.x = vs_TEXCOORD8.z;
    u_xlat4.y = vs_TEXCOORD9.z;
    u_xlat4.z = vs_TEXCOORD6.z;
    u_xlat2.z = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat1.xyz = u_xlat1.xxx * u_xlat2.xyz;
    u_xlat2.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat34 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat34 = inversesqrt(u_xlat34);
    u_xlat4.xyz = vec3(u_xlat34) * u_xlat2.xyz;
    u_xlat35 = dot((-u_xlat4.xyz), u_xlat1.xyz);
    u_xlat35 = u_xlat35 + u_xlat35;
    u_xlat1.xyz = u_xlat1.xyz * (-vec3(u_xlat35)) + (-u_xlat4.xyz);
    u_xlat10_3 = textureLod(_ReflectionSkyCubeMap, u_xlat1.xyz, 0.0);
    u_xlat16_33 = u_xlat10_3.w + -1.0;
    u_xlat16_33 = _ReflectionSkyCubeMap_HDR.w * u_xlat16_33 + 1.0;
    u_xlat16_33 = log2(u_xlat16_33);
    u_xlat16_33 = u_xlat16_33 * _ReflectionSkyCubeMap_HDR.y;
    u_xlat16_33 = exp2(u_xlat16_33);
    u_xlat16_33 = u_xlat16_33 * _ReflectionSkyCubeMap_HDR.x;
    u_xlat1.xy = u_xlat16_0.xz * vec2(vec2(_RefractionIntensity, _RefractionIntensity));
    u_xlat23 = float(1.0) / vs_TEXCOORD4.w;
    u_xlat23 = u_xlat23 * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat23 = min(max(u_xlat23, 0.0), 1.0);
#else
    u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
#endif
    u_xlat1.xy = vec2(u_xlat23) * u_xlat1.xy;
    u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD4.ww;
    u_xlat5.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat23 = texture(_CameraDepthTexture, u_xlat5.xy).x;
    u_xlat23 = _ZBufferParams.z * u_xlat23 + _ZBufferParams.w;
    u_xlat23 = float(1.0) / u_xlat23;
    u_xlat23 = u_xlat23 + (-vs_TEXCOORD4.w);
#ifdef UNITY_ADRENO_ES3
    u_xlat23 = min(max(u_xlat23, 0.0), 1.0);
#else
    u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
#endif
    u_xlat1.xy = vec2(u_xlat23) * u_xlat1.xy;
    u_xlat1.z = 0.0;
    u_xlat5.xyz = u_xlat1.xyz + vs_TEXCOORD4.xyw;
    u_xlat5.xy = u_xlat5.xy / u_xlat5.zz;
    u_xlat35 = texture(_CameraDepthTexture, u_xlat5.xy).x;
    u_xlat35 = _ZBufferParams.z * u_xlat35 + _ZBufferParams.w;
    u_xlat35 = float(1.0) / u_xlat35;
    u_xlat35 = u_xlat35 + (-vs_TEXCOORD4.w);
#ifdef UNITY_ADRENO_ES3
    u_xlat35 = min(max(u_xlat35, 0.0), 1.0);
#else
    u_xlat35 = clamp(u_xlat35, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat35) * u_xlat1.xyz + vs_TEXCOORD4.xyw;
    u_xlat5.xy = u_xlat1.xy / u_xlat1.zz;
    u_xlat1.xy = u_xlat1.xy / vs_TEXCOORD4.ww;
    u_xlat10_1.xyz = texture(_SceneScaledBufferBeforTransParent, u_xlat1.xy).xyz;
    u_xlat35 = texture(_CameraDepthTexture, u_xlat5.xy).x;
    u_xlat35 = _ZBufferParams.z * u_xlat35 + _ZBufferParams.w;
    u_xlat35 = float(1.0) / u_xlat35;
    u_xlat35 = u_xlat35 + (-vs_TEXCOORD4.w);
    u_xlat37 = 0.100000001 / _DeepColorDepth;
    u_xlat37 = u_xlat35 * u_xlat37;
#ifdef UNITY_ADRENO_ES3
    u_xlat37 = min(max(u_xlat37, 0.0), 1.0);
#else
    u_xlat37 = clamp(u_xlat37, 0.0, 1.0);
#endif
    u_xlat37 = max(u_xlat37, 9.99999975e-05);
    u_xlat37 = log2(u_xlat37);
    u_xlat37 = u_xlat37 * _DeepColorFade;
    u_xlat37 = exp2(u_xlat37);
    u_xlat5.x = float(1.0) / _ShoreTransparency;
    u_xlat16 = u_xlat35 * u_xlat5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16 = min(max(u_xlat16, 0.0), 1.0);
#else
    u_xlat16 = clamp(u_xlat16, 0.0, 1.0);
#endif
    u_xlat16 = max(u_xlat16, 9.99999975e-05);
    u_xlat16 = log2(u_xlat16);
    u_xlat16 = u_xlat16 * _ShoreFade;
    u_xlat16 = exp2(u_xlat16);
    u_xlat6.xyz = _ShallowColor.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat6.xyz = vec3(u_xlat16) * u_xlat6.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat7.xyz = (-u_xlat6.xyz) * u_xlat10_1.xyz + _DeepColor.xyz;
    u_xlat8.xyz = u_xlat10_1.xyz * u_xlat6.xyz;
    u_xlat7.xyz = vec3(u_xlat37) * u_xlat7.xyz + u_xlat8.xyz;
    u_xlat9.xyz = vec3(u_xlat16_33) * u_xlat10_3.xyz + (-u_xlat7.xyz);
    u_xlat37 = float(1.0) / _ShoreReflectionFade;
    u_xlat37 = u_xlat35 * u_xlat37;
#ifdef UNITY_ADRENO_ES3
    u_xlat37 = min(max(u_xlat37, 0.0), 1.0);
#else
    u_xlat37 = clamp(u_xlat37, 0.0, 1.0);
#endif
    u_xlat27 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat10.xyz = vec3(u_xlat27) * vs_TEXCOORD6.xyz;
    u_xlat4.x = dot(u_xlat4.xyz, u_xlat10.xyz);
    u_xlat4.x = (-u_xlat4.x) + 1.0;
    u_xlat4.x = max(u_xlat4.x, 9.99999975e-05);
    u_xlat4.x = log2(u_xlat4.x);
    u_xlat15.x = u_xlat4.x * _FresnelPower;
    u_xlat4.x = u_xlat4.x * _SpecularPower;
    u_xlat4.x = exp2(u_xlat4.x);
    u_xlat15.x = exp2(u_xlat15.x);
    u_xlat15.x = u_xlat15.x * _ReflectionIntensity;
    u_xlat15.x = u_xlat37 * u_xlat15.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat15.x = min(max(u_xlat15.x, 0.0), 1.0);
#else
    u_xlat15.x = clamp(u_xlat15.x, 0.0, 1.0);
#endif
    u_xlat15.xyz = u_xlat15.xxx * u_xlat9.xyz + u_xlat7.xyz;
    u_xlat1.xyz = (-u_xlat6.xyz) * u_xlat10_1.xyz + u_xlat15.xyz;
    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz + u_xlat8.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(0.0>=_ES_MoonDirection.y);
#else
    u_xlatb15 = 0.0>=_ES_MoonDirection.y;
#endif
    u_xlat15.xyz = (bool(u_xlatb15)) ? _ES_SunDirection.xyz : _ES_MoonDirection.xyz;
    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat34) + u_xlat15.xyz;
    u_xlat34 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat34 = inversesqrt(u_xlat34);
    u_xlat2.xyz = vec3(u_xlat34) * u_xlat2.xyz;
    u_xlat16_0.y = 1.0;
    u_xlat16_34 = dot(u_xlat16_0.xyz, u_xlat16_0.xyz);
    u_xlat16_34 = inversesqrt(u_xlat16_34);
    u_xlat16_15.xyz = u_xlat16_0.xyz * vec3(u_xlat16_34);
    u_xlat34 = dot(u_xlat16_15.xyz, u_xlat2.xyz);
    u_xlat34 = max(u_xlat34, 9.99999975e-05);
    u_xlat34 = log2(u_xlat34);
    u_xlat2.x = _Gloss * 128.0;
    u_xlat34 = u_xlat34 * u_xlat2.x;
    u_xlat34 = exp2(u_xlat34);
    u_xlat34 = u_xlat34 * _SpecularIntensity;
    u_xlat34 = max(u_xlat34, 0.0);
    u_xlat34 = min(u_xlat34, 16.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(_ES_MoonDirection.y>=9.99999975e-05);
#else
    u_xlatb2 = _ES_MoonDirection.y>=9.99999975e-05;
#endif
    u_xlat2.x = u_xlatb2 ? 1.0 : float(0.0);
    u_xlat13 = _ES_MoonDirection.y + -1.0;
    u_xlat2.x = u_xlat2.x * u_xlat13 + 1.0;
    u_xlat2.xyz = u_xlat2.xxx * _LightColor0.xyz;
    u_xlat2.xyz = vec3(u_xlat34) * u_xlat2.xyz;
    u_xlat34 = u_xlat35 + -1.0;
    u_xlat34 = u_xlat5.x * u_xlat34;
    u_xlat34 = u_xlat34 * 0.100000001;
#ifdef UNITY_ADRENO_ES3
    u_xlat34 = min(max(u_xlat34, 0.0), 1.0);
#else
    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
#endif
    u_xlat2.xyz = vec3(u_xlat34) * u_xlat2.xyz;
    u_xlat0.xyz = u_xlat2.xyz * u_xlat4.xxx + u_xlat1.xyz;
    u_xlat1.x = 0.100000001 / _OpacityByDepth;
    u_xlat1.x = u_xlat1.x * u_xlat35;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat0.w = u_xlat1.x * vs_COLOR0.w;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "MHY_SHADER_HIGH" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump float _MHYZBias;
uniform 	vec4 hlslcc_mtx4x4_mhyJitteredVP[4];
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
out highp vec4 vs_TEXCOORD9;
out highp vec4 vs_TEXCOORD10;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec4 u_xlat8;
float u_xlat27;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4_mhyJitteredVP[1];
    u_xlat2 = hlslcc_mtx4x4_mhyJitteredVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4_mhyJitteredVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4_mhyJitteredVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat3.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    u_xlat3.xyw = u_xlat2.xyw;
    gl_Position = u_xlat3;
    vs_COLOR0 = in_COLOR0;
    u_xlat4.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat4.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat4.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat27 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat4.xyz = vec3(u_xlat27) * u_xlat4.xyz;
    u_xlat16_5.x = u_xlat4.y * u_xlat4.y;
    u_xlat16_5.x = u_xlat4.x * u_xlat4.x + (-u_xlat16_5.x);
    u_xlat16_6 = u_xlat4.yzzx * u_xlat4.xyzz;
    u_xlat16_7.x = dot(unity_SHBr, u_xlat16_6);
    u_xlat16_7.y = dot(unity_SHBg, u_xlat16_6);
    u_xlat16_7.z = dot(unity_SHBb, u_xlat16_6);
    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_7.xyz;
    u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat4.w = 1.0;
    u_xlat16_6.x = dot(unity_SHAr, u_xlat4);
    u_xlat16_6.y = dot(unity_SHAg, u_xlat4);
    u_xlat16_6.z = dot(unity_SHAb, u_xlat4);
    u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_6.xyz;
    vs_TEXCOORD1.xyz = u_xlat16_5.xyz;
    vs_TEXCOORD1.w = 1.0;
    u_xlat27 = u_xlat3.y * _ProjectionParams.x;
    u_xlat8.w = u_xlat27 * 0.5;
    u_xlat8.xz = u_xlat3.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.z = u_xlat2.z;
    u_xlat3.xy = u_xlat8.zz + u_xlat8.xw;
    vs_TEXCOORD2 = u_xlat3;
    vs_TEXCOORD4.xyw = u_xlat3.xyw;
    u_xlat27 = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat27 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat27;
    u_xlat27 = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat27;
    u_xlat27 = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat27;
    vs_TEXCOORD3.z = (-u_xlat27);
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD3.w = 0.0;
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD5.w = 0.0;
    vs_TEXCOORD6.xyz = u_xlat4.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[1].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].www + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * in_POSITION0.yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.zzz + u_xlat1.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.www + u_xlat1.xyz;
    vs_TEXCOORD7.xyz = u_xlat1.xyz * vec3(-1.0, -1.0, 1.0);
    vs_TEXCOORD7.w = 0.0;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat27 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat1.xyz = vec3(u_xlat27) * u_xlat1.xyz;
    vs_TEXCOORD8.xyz = u_xlat1.xyz;
    vs_TEXCOORD8.w = 0.0;
    u_xlat2.xyz = u_xlat1.yzx * u_xlat4.zxy;
    u_xlat1.xyz = u_xlat4.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
    u_xlat27 = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD9.xyz = vec3(u_xlat27) * u_xlat1.xyz;
    vs_TEXCOORD9.w = 0.0;
    u_xlat27 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat27 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat27;
    vs_TEXCOORD10.w = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat27;
    vs_TEXCOORD10.xyz = u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ZBufferParams;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _NormalMapScale;
uniform 	float _Normal01_U_Speed;
uniform 	float _Normal01_VSpeed;
uniform 	float _NormalMapBias;
uniform 	float _Normal02_U_Speed;
uniform 	float _Normal02_V_Speed;
uniform 	float _RefractionIntensity;
uniform 	float _OpacityByDepth;
uniform 	float _SpecularIntensity;
uniform 	vec3 _ES_MoonDirection;
uniform 	vec3 _ES_SunDirection;
uniform 	float _Gloss;
uniform 	float _ShoreTransparency;
uniform 	float _SpecularPower;
uniform 	vec4 _ShallowColor;
uniform 	float _ShoreFade;
uniform 	vec4 _DeepColor;
uniform 	float _DeepColorDepth;
uniform 	float _DeepColorFade;
uniform 	vec4 _DistortionIntensity;
uniform 	float _SSRDistortion;
uniform 	float _SSRDistortion_Shore;
uniform 	float _SSRIntensity;
uniform 	float _ReflectionIntensity;
uniform 	float _FresnelPower;
uniform 	float _ShoreReflectionFade;
uniform 	mediump float _ProjectUVScale;
uniform 	vec4 _ReflectionSkyCubeMap_HDR;
uniform lowp sampler2D _Normal01;
uniform lowp sampler2D _Normal02;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _SceneScaledBufferBeforTransParent;
uniform lowp samplerCube _ReflectionSkyCubeMap;
uniform lowp sampler2D _SSRTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD8;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
lowp vec4 u_xlat10_3;
vec3 u_xlat4;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
mediump vec3 u_xlat16_7;
lowp vec3 u_xlat10_8;
vec3 u_xlat9;
vec3 u_xlat10;
vec3 u_xlat11;
vec3 u_xlat12;
vec3 u_xlat13;
vec2 u_xlat15;
mediump vec3 u_xlat16_16;
vec3 u_xlat18;
bool u_xlatb18;
vec3 u_xlat19;
vec2 u_xlat29;
float u_xlat32;
float u_xlat43;
float u_xlat46;
bool u_xlatb46;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD5.zx * vec2(vec2(_ProjectUVScale, _ProjectUVScale));
    u_xlat1.x = _Time.y * _Normal01_U_Speed + u_xlat0.y;
    u_xlat1.yz = _Time.yy * vec2(_Normal01_VSpeed, _Normal02_U_Speed) + u_xlat0.xy;
    u_xlat1.w = _Time.y * _Normal02_V_Speed + u_xlat0.x;
    u_xlat10_0.xyz = texture(_Normal01, u_xlat1.xy, _NormalMapBias).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_2.xy = u_xlat16_0.xy * vec2(_NormalMapScale);
    u_xlat10_1.xyz = texture(_Normal02, u_xlat1.zw, _NormalMapBias).xyz;
    u_xlat16_0.w = -1.0;
    u_xlat16_3.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.wwz;
    u_xlat16_3.xy = u_xlat16_3.xy * vec2(_NormalMapScale);
    u_xlat16_2.z = -1.0;
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
    u_xlat1.x = float(1.0) / vs_TEXCOORD4.w;
    u_xlat15.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat15.x = texture(_CameraDepthTexture, u_xlat15.xy).x;
    u_xlat15.x = _ZBufferParams.z * u_xlat15.x + _ZBufferParams.w;
    u_xlat15.x = float(1.0) / u_xlat15.x;
    u_xlat29.xy = u_xlat16_2.xy * vec2(vec2(_RefractionIntensity, _RefractionIntensity));
    u_xlat1.x = u_xlat1.x * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.xz = u_xlat1.xx * u_xlat29.xy;
    u_xlat1.xz = u_xlat1.xz * vs_TEXCOORD4.ww;
    u_xlat15.x = u_xlat15.x + (-vs_TEXCOORD4.w);
#ifdef UNITY_ADRENO_ES3
    u_xlat15.x = min(max(u_xlat15.x, 0.0), 1.0);
#else
    u_xlat15.x = clamp(u_xlat15.x, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat15.xx * u_xlat1.xz;
    u_xlat1.z = 0.0;
    u_xlat4.xyz = u_xlat1.xyz + vs_TEXCOORD4.xyw;
    u_xlat4.xy = u_xlat4.xy / u_xlat4.zz;
    u_xlat43 = texture(_CameraDepthTexture, u_xlat4.xy).x;
    u_xlat43 = _ZBufferParams.z * u_xlat43 + _ZBufferParams.w;
    u_xlat43 = float(1.0) / u_xlat43;
    u_xlat43 = u_xlat43 + (-vs_TEXCOORD4.w);
#ifdef UNITY_ADRENO_ES3
    u_xlat43 = min(max(u_xlat43, 0.0), 1.0);
#else
    u_xlat43 = clamp(u_xlat43, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat43) * u_xlat1.xyz + vs_TEXCOORD4.xyw;
    u_xlat29.xy = u_xlat1.xy / u_xlat1.zz;
    u_xlat29.x = texture(_CameraDepthTexture, u_xlat29.xy).x;
    u_xlat29.x = _ZBufferParams.z * u_xlat29.x + _ZBufferParams.w;
    u_xlat29.x = float(1.0) / u_xlat29.x;
    u_xlat29.x = u_xlat29.x + (-vs_TEXCOORD4.w);
    u_xlat1.w = 0.100000001 / _OpacityByDepth;
    u_xlat16_3.xz = u_xlat16_2.xy;
    u_xlat16_3.y = 1.0;
    u_xlat16_4.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
    u_xlat16_4.x = inversesqrt(u_xlat16_4.x);
    u_xlat16_4.xyz = u_xlat16_3.xyz * u_xlat16_4.xxx;
#ifdef UNITY_ADRENO_ES3
    u_xlatb46 = !!(0.0>=_ES_MoonDirection.y);
#else
    u_xlatb46 = 0.0>=_ES_MoonDirection.y;
#endif
    u_xlat5.xyz = (bool(u_xlatb46)) ? _ES_SunDirection.xyz : _ES_MoonDirection.xyz;
    u_xlat6.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat46 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat46 = inversesqrt(u_xlat46);
    u_xlat7.xyz = vec3(u_xlat46) * u_xlat6.xyz;
    u_xlat5.xyz = u_xlat6.xyz * vec3(u_xlat46) + u_xlat5.xyz;
    u_xlat46 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat46 = inversesqrt(u_xlat46);
    u_xlat5.xyz = vec3(u_xlat46) * u_xlat5.xyz;
    u_xlat4.x = dot(u_xlat16_4.xyz, u_xlat5.xyz);
    u_xlat18.x = _Gloss * 128.0;
    u_xlat4.x = max(u_xlat4.x, 9.99999975e-05);
    u_xlat4.x = log2(u_xlat4.x);
    u_xlat4.x = u_xlat4.x * u_xlat18.x;
    u_xlat4.x = exp2(u_xlat4.x);
    u_xlat4.x = u_xlat4.x * _SpecularIntensity;
    u_xlat4.x = max(u_xlat4.x, 0.0);
    u_xlat4.x = min(u_xlat4.x, 16.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_ES_MoonDirection.y>=9.99999975e-05);
#else
    u_xlatb18 = _ES_MoonDirection.y>=9.99999975e-05;
#endif
    u_xlat18.x = u_xlatb18 ? 1.0 : float(0.0);
    u_xlat32 = _ES_MoonDirection.y + -1.0;
    u_xlat18.x = u_xlat18.x * u_xlat32 + 1.0;
    u_xlat32 = float(1.0) / _ShoreTransparency;
    u_xlat46 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat46 = inversesqrt(u_xlat46);
    u_xlat5.xyz = vec3(u_xlat46) * vs_TEXCOORD6.xyz;
    u_xlat46 = dot(u_xlat7.xyz, u_xlat5.xyz);
    u_xlat46 = (-u_xlat46) + 1.0;
    u_xlat46 = max(u_xlat46, 9.99999975e-05);
    u_xlat46 = log2(u_xlat46);
    u_xlat5.x = u_xlat46 * _SpecularPower;
    u_xlat5.x = exp2(u_xlat5.x);
    u_xlat19.xyz = u_xlat18.xxx * _LightColor0.xyz;
    u_xlat19.xyz = u_xlat4.xxx * u_xlat19.xyz;
    u_xlat4.x = u_xlat29.x + -1.0;
    u_xlat4.x = u_xlat32 * u_xlat4.x;
    u_xlat4.x = u_xlat4.x * 0.100000001;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat19.xyz = u_xlat4.xxx * u_xlat19.xyz;
    u_xlat4.x = u_xlat29.x * u_xlat32;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat4.x = max(u_xlat4.x, 9.99999975e-05);
    u_xlat4.x = log2(u_xlat4.x);
    u_xlat4.x = u_xlat4.x * _ShoreFade;
    u_xlat4.x = exp2(u_xlat4.x);
    u_xlat6.xyz = _ShallowColor.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat6.xyz = u_xlat4.xxx * u_xlat6.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat1.xy = u_xlat1.xy / vs_TEXCOORD4.ww;
    u_xlat10_8.xyz = texture(_SceneScaledBufferBeforTransParent, u_xlat1.xy).xyz;
    u_xlat9.xyz = u_xlat6.xyz * u_xlat10_8.xyz;
    u_xlat1.x = 0.100000001 / _DeepColorDepth;
    u_xlat1.xw = u_xlat1.xw * u_xlat29.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xw = min(max(u_xlat1.xw, 0.0), 1.0);
#else
    u_xlat1.xw = clamp(u_xlat1.xw, 0.0, 1.0);
#endif
    u_xlat1.x = max(u_xlat1.x, 9.99999975e-05);
    u_xlat1.x = log2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _DeepColorFade;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat10.xyz = (-u_xlat6.xyz) * u_xlat10_8.xyz + _DeepColor.xyz;
    u_xlat10.xyz = u_xlat1.xxx * u_xlat10.xyz + u_xlat9.xyz;
    u_xlat11.xyz = u_xlat16_2.xyz * _DistortionIntensity.xyz;
    u_xlat12.x = vs_TEXCOORD8.x;
    u_xlat12.y = vs_TEXCOORD9.x;
    u_xlat12.z = vs_TEXCOORD6.x;
    u_xlat12.x = dot(u_xlat12.xyz, u_xlat11.xyz);
    u_xlat13.x = vs_TEXCOORD8.y;
    u_xlat13.y = vs_TEXCOORD9.y;
    u_xlat13.z = vs_TEXCOORD6.y;
    u_xlat12.y = dot(u_xlat13.xyz, u_xlat11.xyz);
    u_xlat13.x = vs_TEXCOORD8.z;
    u_xlat13.y = vs_TEXCOORD9.z;
    u_xlat13.z = vs_TEXCOORD6.z;
    u_xlat12.z = dot(u_xlat13.xyz, u_xlat11.xyz);
    u_xlat1.x = dot(u_xlat12.xyz, u_xlat12.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat12.xyz = u_xlat1.xxx * u_xlat12.xyz;
    u_xlat1.x = dot((-u_xlat7.xyz), u_xlat12.xyz);
    u_xlat1.x = u_xlat1.x + u_xlat1.x;
    u_xlat7.xyz = u_xlat12.xyz * (-u_xlat1.xxx) + (-u_xlat7.xyz);
    u_xlat10_0 = textureLod(_ReflectionSkyCubeMap, u_xlat7.xyz, 0.0);
    u_xlat16_2.x = u_xlat10_0.w + -1.0;
    u_xlat16_2.x = _ReflectionSkyCubeMap_HDR.w * u_xlat16_2.x + 1.0;
    u_xlat16_2.x = log2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * _ReflectionSkyCubeMap_HDR.y;
    u_xlat16_2.x = exp2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * _ReflectionSkyCubeMap_HDR.x;
    u_xlat16_16.xyz = u_xlat10_0.xyz * u_xlat16_2.xxx;
    u_xlat1.xy = u_xlat11.xy * vec2(_SSRDistortion);
    u_xlat18.x = float(1.0) / _SSRDistortion_Shore;
    u_xlat18.x = u_xlat29.x * u_xlat18.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat18.x = min(max(u_xlat18.x, 0.0), 1.0);
#else
    u_xlat18.x = clamp(u_xlat18.x, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat1.xy * u_xlat18.xx;
    u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD4.ww + vs_TEXCOORD4.xy;
    u_xlat1.xy = u_xlat1.xy / vs_TEXCOORD4.ww;
    u_xlat10_3 = texture(_SSRTexture, u_xlat1.xy).wxyz;
    u_xlat16_7.xyz = (-u_xlat16_2.xxx) * u_xlat10_0.xyz + u_xlat10_3.yzw;
    u_xlat7.xyz = u_xlat16_7.xyz * vec3(vec3(_SSRIntensity, _SSRIntensity, _SSRIntensity));
    u_xlat16_3.x = u_xlat10_3.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat7.xyz = u_xlat16_3.xxx * u_xlat7.xyz + u_xlat16_16.xyz;
    u_xlat1.x = u_xlat46 * _FresnelPower;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _ReflectionIntensity;
    u_xlat15.x = float(1.0) / _ShoreReflectionFade;
    u_xlat15.x = u_xlat15.x * u_xlat29.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat15.x = min(max(u_xlat15.x, 0.0), 1.0);
#else
    u_xlat15.x = clamp(u_xlat15.x, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat15.x * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat18.xyz = (-u_xlat10.xyz) + u_xlat7.xyz;
    u_xlat1.xyz = u_xlat1.xxx * u_xlat18.xyz + u_xlat10.xyz;
    u_xlat1.xyz = (-u_xlat6.xyz) * u_xlat10_8.xyz + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat4.xxx * u_xlat1.xyz + u_xlat9.xyz;
    u_xlat0.xyz = u_xlat19.xyz * u_xlat5.xxx + u_xlat1.xyz;
    u_xlat0.w = u_xlat1.w * vs_COLOR0.w;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "MHY_SHADER_HIGH" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
uniform 	vec4 hlslcc_mtx4x4_mhyJitteredVP[4];
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
out highp vec4 vs_TEXCOORD9;
out highp vec4 vs_TEXCOORD10;
float u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec4 u_xlat8;
vec3 u_xlat9;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat9.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4_mhyJitteredVP[1];
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[3] * u_xlat2.wwww + u_xlat1;
    u_xlat3.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    u_xlat3.xyw = u_xlat1.xyw;
    gl_Position = u_xlat3;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD1.w = 1.0;
    u_xlat4.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat4.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat4.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat1.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
    u_xlat16_5.x = u_xlat4.y * u_xlat4.y;
    u_xlat16_5.x = u_xlat4.x * u_xlat4.x + (-u_xlat16_5.x);
    u_xlat16_6 = u_xlat4.yzzx * u_xlat4.xyzz;
    u_xlat16_7.x = dot(unity_SHBr, u_xlat16_6);
    u_xlat16_7.y = dot(unity_SHBg, u_xlat16_6);
    u_xlat16_7.z = dot(unity_SHBb, u_xlat16_6);
    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_7.xyz;
    u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat4.w = 1.0;
    u_xlat16_6.x = dot(unity_SHAr, u_xlat4);
    u_xlat16_6.y = dot(unity_SHAg, u_xlat4);
    u_xlat16_6.z = dot(unity_SHAb, u_xlat4);
    u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_6.xyz;
    vs_TEXCOORD1.xyz = u_xlat16_5.xyz;
    u_xlat1.x = u_xlat3.y * _ProjectionParams.x;
    u_xlat8.w = u_xlat1.x * 0.5;
    u_xlat8.xz = u_xlat3.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.z = u_xlat1.z;
    u_xlat3.xy = u_xlat8.zz + u_xlat8.xw;
    vs_TEXCOORD2 = u_xlat3;
    vs_TEXCOORD4.xyw = u_xlat3.xyw;
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD3.w = 0.0;
    u_xlat1.x = u_xlat2.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat2.x + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat2.z + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat2.w + u_xlat1.x;
    vs_TEXCOORD3.z = (-u_xlat1.x);
    vs_TEXCOORD5.w = 0.0;
    vs_TEXCOORD5.xyz = u_xlat9.xyz;
    u_xlat9.xyz = (-u_xlat9.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD6.w = 0.0;
    vs_TEXCOORD6.xyz = u_xlat4.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].www + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * in_POSITION0.yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.zzz + u_xlat1.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.www + u_xlat1.xyz;
    vs_TEXCOORD7.xyz = u_xlat1.xyz * vec3(-1.0, -1.0, 1.0);
    vs_TEXCOORD7.w = 0.0;
    u_xlat1.xyz = in_TANGENT0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat0 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0 = inversesqrt(u_xlat0);
    u_xlat1.xyz = vec3(u_xlat0) * u_xlat1.xyz;
    vs_TEXCOORD8.xyz = u_xlat1.xyz;
    vs_TEXCOORD8.w = 0.0;
    u_xlat2.xyz = u_xlat1.yzx * u_xlat4.zxy;
    u_xlat1.xyz = u_xlat4.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
    u_xlat0 = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD9.xyz = vec3(u_xlat0) * u_xlat1.xyz;
    vs_TEXCOORD9.w = 0.0;
    u_xlat0 = u_xlat9.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat9.x + u_xlat0;
    vs_TEXCOORD10.w = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat9.z + u_xlat0;
    vs_TEXCOORD10.xyz = u_xlat9.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ZBufferParams;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _NormalMapScale;
uniform 	float _Normal01_U_Speed;
uniform 	float _Normal01_VSpeed;
uniform 	float _NormalMapBias;
uniform 	float _Normal02_U_Speed;
uniform 	float _Normal02_V_Speed;
uniform 	float _RefractionIntensity;
uniform 	float _OpacityByDepth;
uniform 	float _SpecularIntensity;
uniform 	vec3 _ES_MoonDirection;
uniform 	vec3 _ES_SunDirection;
uniform 	float _Gloss;
uniform 	float _ShoreTransparency;
uniform 	float _SpecularPower;
uniform 	vec4 _ShallowColor;
uniform 	float _ShoreFade;
uniform 	vec4 _DeepColor;
uniform 	float _DeepColorDepth;
uniform 	float _DeepColorFade;
uniform 	vec4 _DistortionIntensity;
uniform 	float _SSRDistortion;
uniform 	float _SSRDistortion_Shore;
uniform 	float _SSRIntensity;
uniform 	float _ReflectionIntensity;
uniform 	float _FresnelPower;
uniform 	float _ShoreReflectionFade;
uniform 	mediump float _ProjectUVScale;
uniform 	vec4 _ReflectionSkyCubeMap_HDR;
uniform lowp sampler2D _Normal01;
uniform lowp sampler2D _Normal02;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _SceneScaledBufferBeforTransParent;
uniform lowp samplerCube _ReflectionSkyCubeMap;
uniform lowp sampler2D _SSRTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD8;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
lowp vec4 u_xlat10_3;
vec3 u_xlat4;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
mediump vec3 u_xlat16_7;
lowp vec3 u_xlat10_8;
vec3 u_xlat9;
vec3 u_xlat10;
vec3 u_xlat11;
vec3 u_xlat12;
vec3 u_xlat13;
vec2 u_xlat15;
mediump vec3 u_xlat16_16;
vec3 u_xlat18;
bool u_xlatb18;
vec3 u_xlat19;
vec2 u_xlat29;
float u_xlat32;
float u_xlat43;
float u_xlat46;
bool u_xlatb46;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD5.zx * vec2(vec2(_ProjectUVScale, _ProjectUVScale));
    u_xlat1.x = _Time.y * _Normal01_U_Speed + u_xlat0.y;
    u_xlat1.yz = _Time.yy * vec2(_Normal01_VSpeed, _Normal02_U_Speed) + u_xlat0.xy;
    u_xlat1.w = _Time.y * _Normal02_V_Speed + u_xlat0.x;
    u_xlat10_0.xyz = texture(_Normal01, u_xlat1.xy, _NormalMapBias).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_2.xy = u_xlat16_0.xy * vec2(_NormalMapScale);
    u_xlat10_1.xyz = texture(_Normal02, u_xlat1.zw, _NormalMapBias).xyz;
    u_xlat16_0.w = -1.0;
    u_xlat16_3.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.wwz;
    u_xlat16_3.xy = u_xlat16_3.xy * vec2(_NormalMapScale);
    u_xlat16_2.z = -1.0;
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
    u_xlat1.x = float(1.0) / vs_TEXCOORD4.w;
    u_xlat15.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat15.x = texture(_CameraDepthTexture, u_xlat15.xy).x;
    u_xlat15.x = _ZBufferParams.z * u_xlat15.x + _ZBufferParams.w;
    u_xlat15.x = float(1.0) / u_xlat15.x;
    u_xlat29.xy = u_xlat16_2.xy * vec2(vec2(_RefractionIntensity, _RefractionIntensity));
    u_xlat1.x = u_xlat1.x * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.xz = u_xlat1.xx * u_xlat29.xy;
    u_xlat1.xz = u_xlat1.xz * vs_TEXCOORD4.ww;
    u_xlat15.x = u_xlat15.x + (-vs_TEXCOORD4.w);
#ifdef UNITY_ADRENO_ES3
    u_xlat15.x = min(max(u_xlat15.x, 0.0), 1.0);
#else
    u_xlat15.x = clamp(u_xlat15.x, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat15.xx * u_xlat1.xz;
    u_xlat1.z = 0.0;
    u_xlat4.xyz = u_xlat1.xyz + vs_TEXCOORD4.xyw;
    u_xlat4.xy = u_xlat4.xy / u_xlat4.zz;
    u_xlat43 = texture(_CameraDepthTexture, u_xlat4.xy).x;
    u_xlat43 = _ZBufferParams.z * u_xlat43 + _ZBufferParams.w;
    u_xlat43 = float(1.0) / u_xlat43;
    u_xlat43 = u_xlat43 + (-vs_TEXCOORD4.w);
#ifdef UNITY_ADRENO_ES3
    u_xlat43 = min(max(u_xlat43, 0.0), 1.0);
#else
    u_xlat43 = clamp(u_xlat43, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat43) * u_xlat1.xyz + vs_TEXCOORD4.xyw;
    u_xlat29.xy = u_xlat1.xy / u_xlat1.zz;
    u_xlat29.x = texture(_CameraDepthTexture, u_xlat29.xy).x;
    u_xlat29.x = _ZBufferParams.z * u_xlat29.x + _ZBufferParams.w;
    u_xlat29.x = float(1.0) / u_xlat29.x;
    u_xlat29.x = u_xlat29.x + (-vs_TEXCOORD4.w);
    u_xlat1.w = 0.100000001 / _OpacityByDepth;
    u_xlat16_3.xz = u_xlat16_2.xy;
    u_xlat16_3.y = 1.0;
    u_xlat16_4.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
    u_xlat16_4.x = inversesqrt(u_xlat16_4.x);
    u_xlat16_4.xyz = u_xlat16_3.xyz * u_xlat16_4.xxx;
#ifdef UNITY_ADRENO_ES3
    u_xlatb46 = !!(0.0>=_ES_MoonDirection.y);
#else
    u_xlatb46 = 0.0>=_ES_MoonDirection.y;
#endif
    u_xlat5.xyz = (bool(u_xlatb46)) ? _ES_SunDirection.xyz : _ES_MoonDirection.xyz;
    u_xlat6.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat46 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat46 = inversesqrt(u_xlat46);
    u_xlat7.xyz = vec3(u_xlat46) * u_xlat6.xyz;
    u_xlat5.xyz = u_xlat6.xyz * vec3(u_xlat46) + u_xlat5.xyz;
    u_xlat46 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat46 = inversesqrt(u_xlat46);
    u_xlat5.xyz = vec3(u_xlat46) * u_xlat5.xyz;
    u_xlat4.x = dot(u_xlat16_4.xyz, u_xlat5.xyz);
    u_xlat18.x = _Gloss * 128.0;
    u_xlat4.x = max(u_xlat4.x, 9.99999975e-05);
    u_xlat4.x = log2(u_xlat4.x);
    u_xlat4.x = u_xlat4.x * u_xlat18.x;
    u_xlat4.x = exp2(u_xlat4.x);
    u_xlat4.x = u_xlat4.x * _SpecularIntensity;
    u_xlat4.x = max(u_xlat4.x, 0.0);
    u_xlat4.x = min(u_xlat4.x, 16.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_ES_MoonDirection.y>=9.99999975e-05);
#else
    u_xlatb18 = _ES_MoonDirection.y>=9.99999975e-05;
#endif
    u_xlat18.x = u_xlatb18 ? 1.0 : float(0.0);
    u_xlat32 = _ES_MoonDirection.y + -1.0;
    u_xlat18.x = u_xlat18.x * u_xlat32 + 1.0;
    u_xlat32 = float(1.0) / _ShoreTransparency;
    u_xlat46 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat46 = inversesqrt(u_xlat46);
    u_xlat5.xyz = vec3(u_xlat46) * vs_TEXCOORD6.xyz;
    u_xlat46 = dot(u_xlat7.xyz, u_xlat5.xyz);
    u_xlat46 = (-u_xlat46) + 1.0;
    u_xlat46 = max(u_xlat46, 9.99999975e-05);
    u_xlat46 = log2(u_xlat46);
    u_xlat5.x = u_xlat46 * _SpecularPower;
    u_xlat5.x = exp2(u_xlat5.x);
    u_xlat19.xyz = u_xlat18.xxx * _LightColor0.xyz;
    u_xlat19.xyz = u_xlat4.xxx * u_xlat19.xyz;
    u_xlat4.x = u_xlat29.x + -1.0;
    u_xlat4.x = u_xlat32 * u_xlat4.x;
    u_xlat4.x = u_xlat4.x * 0.100000001;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat19.xyz = u_xlat4.xxx * u_xlat19.xyz;
    u_xlat4.x = u_xlat29.x * u_xlat32;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat4.x = max(u_xlat4.x, 9.99999975e-05);
    u_xlat4.x = log2(u_xlat4.x);
    u_xlat4.x = u_xlat4.x * _ShoreFade;
    u_xlat4.x = exp2(u_xlat4.x);
    u_xlat6.xyz = _ShallowColor.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat6.xyz = u_xlat4.xxx * u_xlat6.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat1.xy = u_xlat1.xy / vs_TEXCOORD4.ww;
    u_xlat10_8.xyz = texture(_SceneScaledBufferBeforTransParent, u_xlat1.xy).xyz;
    u_xlat9.xyz = u_xlat6.xyz * u_xlat10_8.xyz;
    u_xlat1.x = 0.100000001 / _DeepColorDepth;
    u_xlat1.xw = u_xlat1.xw * u_xlat29.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xw = min(max(u_xlat1.xw, 0.0), 1.0);
#else
    u_xlat1.xw = clamp(u_xlat1.xw, 0.0, 1.0);
#endif
    u_xlat1.x = max(u_xlat1.x, 9.99999975e-05);
    u_xlat1.x = log2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _DeepColorFade;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat10.xyz = (-u_xlat6.xyz) * u_xlat10_8.xyz + _DeepColor.xyz;
    u_xlat10.xyz = u_xlat1.xxx * u_xlat10.xyz + u_xlat9.xyz;
    u_xlat11.xyz = u_xlat16_2.xyz * _DistortionIntensity.xyz;
    u_xlat12.x = vs_TEXCOORD8.x;
    u_xlat12.y = vs_TEXCOORD9.x;
    u_xlat12.z = vs_TEXCOORD6.x;
    u_xlat12.x = dot(u_xlat12.xyz, u_xlat11.xyz);
    u_xlat13.x = vs_TEXCOORD8.y;
    u_xlat13.y = vs_TEXCOORD9.y;
    u_xlat13.z = vs_TEXCOORD6.y;
    u_xlat12.y = dot(u_xlat13.xyz, u_xlat11.xyz);
    u_xlat13.x = vs_TEXCOORD8.z;
    u_xlat13.y = vs_TEXCOORD9.z;
    u_xlat13.z = vs_TEXCOORD6.z;
    u_xlat12.z = dot(u_xlat13.xyz, u_xlat11.xyz);
    u_xlat1.x = dot(u_xlat12.xyz, u_xlat12.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat12.xyz = u_xlat1.xxx * u_xlat12.xyz;
    u_xlat1.x = dot((-u_xlat7.xyz), u_xlat12.xyz);
    u_xlat1.x = u_xlat1.x + u_xlat1.x;
    u_xlat7.xyz = u_xlat12.xyz * (-u_xlat1.xxx) + (-u_xlat7.xyz);
    u_xlat10_0 = textureLod(_ReflectionSkyCubeMap, u_xlat7.xyz, 0.0);
    u_xlat16_2.x = u_xlat10_0.w + -1.0;
    u_xlat16_2.x = _ReflectionSkyCubeMap_HDR.w * u_xlat16_2.x + 1.0;
    u_xlat16_2.x = log2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * _ReflectionSkyCubeMap_HDR.y;
    u_xlat16_2.x = exp2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * _ReflectionSkyCubeMap_HDR.x;
    u_xlat16_16.xyz = u_xlat10_0.xyz * u_xlat16_2.xxx;
    u_xlat1.xy = u_xlat11.xy * vec2(_SSRDistortion);
    u_xlat18.x = float(1.0) / _SSRDistortion_Shore;
    u_xlat18.x = u_xlat29.x * u_xlat18.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat18.x = min(max(u_xlat18.x, 0.0), 1.0);
#else
    u_xlat18.x = clamp(u_xlat18.x, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat1.xy * u_xlat18.xx;
    u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD4.ww + vs_TEXCOORD4.xy;
    u_xlat1.xy = u_xlat1.xy / vs_TEXCOORD4.ww;
    u_xlat10_3 = texture(_SSRTexture, u_xlat1.xy).wxyz;
    u_xlat16_7.xyz = (-u_xlat16_2.xxx) * u_xlat10_0.xyz + u_xlat10_3.yzw;
    u_xlat7.xyz = u_xlat16_7.xyz * vec3(vec3(_SSRIntensity, _SSRIntensity, _SSRIntensity));
    u_xlat16_3.x = u_xlat10_3.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat7.xyz = u_xlat16_3.xxx * u_xlat7.xyz + u_xlat16_16.xyz;
    u_xlat1.x = u_xlat46 * _FresnelPower;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _ReflectionIntensity;
    u_xlat15.x = float(1.0) / _ShoreReflectionFade;
    u_xlat15.x = u_xlat15.x * u_xlat29.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat15.x = min(max(u_xlat15.x, 0.0), 1.0);
#else
    u_xlat15.x = clamp(u_xlat15.x, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat15.x * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat18.xyz = (-u_xlat10.xyz) + u_xlat7.xyz;
    u_xlat1.xyz = u_xlat1.xxx * u_xlat18.xyz + u_xlat10.xyz;
    u_xlat1.xyz = (-u_xlat6.xyz) * u_xlat10_8.xyz + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat4.xxx * u_xlat1.xyz + u_xlat9.xyz;
    u_xlat0.xyz = u_xlat19.xyz * u_xlat5.xxx + u_xlat1.xyz;
    u_xlat0.w = u_xlat1.w * vs_COLOR0.w;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "MHY_SHADER_MIDDLE" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump float _MHYZBias;
uniform 	vec4 hlslcc_mtx4x4_mhyJitteredVP[4];
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
out highp vec4 vs_TEXCOORD9;
out highp vec4 vs_TEXCOORD10;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec4 u_xlat8;
float u_xlat27;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4_mhyJitteredVP[1];
    u_xlat2 = hlslcc_mtx4x4_mhyJitteredVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4_mhyJitteredVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4_mhyJitteredVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat3.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    u_xlat3.xyw = u_xlat2.xyw;
    gl_Position = u_xlat3;
    vs_COLOR0 = in_COLOR0;
    u_xlat4.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat4.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat4.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat27 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat4.xyz = vec3(u_xlat27) * u_xlat4.xyz;
    u_xlat16_5.x = u_xlat4.y * u_xlat4.y;
    u_xlat16_5.x = u_xlat4.x * u_xlat4.x + (-u_xlat16_5.x);
    u_xlat16_6 = u_xlat4.yzzx * u_xlat4.xyzz;
    u_xlat16_7.x = dot(unity_SHBr, u_xlat16_6);
    u_xlat16_7.y = dot(unity_SHBg, u_xlat16_6);
    u_xlat16_7.z = dot(unity_SHBb, u_xlat16_6);
    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_7.xyz;
    u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat4.w = 1.0;
    u_xlat16_6.x = dot(unity_SHAr, u_xlat4);
    u_xlat16_6.y = dot(unity_SHAg, u_xlat4);
    u_xlat16_6.z = dot(unity_SHAb, u_xlat4);
    u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_6.xyz;
    vs_TEXCOORD1.xyz = u_xlat16_5.xyz;
    vs_TEXCOORD1.w = 1.0;
    u_xlat27 = u_xlat3.y * _ProjectionParams.x;
    u_xlat8.w = u_xlat27 * 0.5;
    u_xlat8.xz = u_xlat3.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.z = u_xlat2.z;
    u_xlat3.xy = u_xlat8.zz + u_xlat8.xw;
    vs_TEXCOORD2 = u_xlat3;
    vs_TEXCOORD4.xyw = u_xlat3.xyw;
    u_xlat27 = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat27 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat27;
    u_xlat27 = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat27;
    u_xlat27 = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat27;
    vs_TEXCOORD3.z = (-u_xlat27);
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD3.w = 0.0;
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD5.w = 0.0;
    vs_TEXCOORD6.xyz = u_xlat4.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[1].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].www + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * in_POSITION0.yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.zzz + u_xlat1.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.www + u_xlat1.xyz;
    vs_TEXCOORD7.xyz = u_xlat1.xyz * vec3(-1.0, -1.0, 1.0);
    vs_TEXCOORD7.w = 0.0;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat27 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat1.xyz = vec3(u_xlat27) * u_xlat1.xyz;
    vs_TEXCOORD8.xyz = u_xlat1.xyz;
    vs_TEXCOORD8.w = 0.0;
    u_xlat2.xyz = u_xlat1.yzx * u_xlat4.zxy;
    u_xlat1.xyz = u_xlat4.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
    u_xlat27 = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD9.xyz = vec3(u_xlat27) * u_xlat1.xyz;
    vs_TEXCOORD9.w = 0.0;
    u_xlat27 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat27 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat27;
    vs_TEXCOORD10.w = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat27;
    vs_TEXCOORD10.xyz = u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ZBufferParams;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _NormalMapScale;
uniform 	float _Normal01_U_Speed;
uniform 	float _Normal01_VSpeed;
uniform 	float _NormalMapBias;
uniform 	float _Normal02_U_Speed;
uniform 	float _Normal02_V_Speed;
uniform 	float _RefractionIntensity;
uniform 	float _OpacityByDepth;
uniform 	float _SpecularIntensity;
uniform 	vec3 _ES_MoonDirection;
uniform 	vec3 _ES_SunDirection;
uniform 	float _Gloss;
uniform 	float _ShoreTransparency;
uniform 	float _SpecularPower;
uniform 	vec4 _ShallowColor;
uniform 	float _ShoreFade;
uniform 	vec4 _DeepColor;
uniform 	float _DeepColorDepth;
uniform 	float _DeepColorFade;
uniform 	vec4 _DistortionIntensity;
uniform 	float _SSRDistortion;
uniform 	float _SSRDistortion_Shore;
uniform 	float _SSRIntensity;
uniform 	float _ReflectionIntensity;
uniform 	float _FresnelPower;
uniform 	float _ShoreReflectionFade;
uniform 	mediump float _ProjectUVScale;
uniform 	vec4 _ReflectionSkyCubeMap_HDR;
uniform lowp sampler2D _Normal01;
uniform lowp sampler2D _Normal02;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _SceneScaledBufferBeforTransParent;
uniform lowp samplerCube _ReflectionSkyCubeMap;
uniform lowp sampler2D _SSRTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD8;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
lowp vec4 u_xlat10_3;
vec3 u_xlat4;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
mediump vec3 u_xlat16_7;
lowp vec3 u_xlat10_8;
vec3 u_xlat9;
vec3 u_xlat10;
vec3 u_xlat11;
vec3 u_xlat12;
vec3 u_xlat13;
vec2 u_xlat15;
mediump vec3 u_xlat16_16;
vec3 u_xlat18;
bool u_xlatb18;
vec3 u_xlat19;
vec2 u_xlat29;
float u_xlat32;
float u_xlat43;
float u_xlat46;
bool u_xlatb46;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD5.zx * vec2(vec2(_ProjectUVScale, _ProjectUVScale));
    u_xlat1.x = _Time.y * _Normal01_U_Speed + u_xlat0.y;
    u_xlat1.yz = _Time.yy * vec2(_Normal01_VSpeed, _Normal02_U_Speed) + u_xlat0.xy;
    u_xlat1.w = _Time.y * _Normal02_V_Speed + u_xlat0.x;
    u_xlat10_0.xyz = texture(_Normal01, u_xlat1.xy, _NormalMapBias).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_2.xy = u_xlat16_0.xy * vec2(_NormalMapScale);
    u_xlat10_1.xyz = texture(_Normal02, u_xlat1.zw, _NormalMapBias).xyz;
    u_xlat16_0.w = -1.0;
    u_xlat16_3.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.wwz;
    u_xlat16_3.xy = u_xlat16_3.xy * vec2(_NormalMapScale);
    u_xlat16_2.z = -1.0;
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
    u_xlat1.x = float(1.0) / vs_TEXCOORD4.w;
    u_xlat15.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat15.x = texture(_CameraDepthTexture, u_xlat15.xy).x;
    u_xlat15.x = _ZBufferParams.z * u_xlat15.x + _ZBufferParams.w;
    u_xlat15.x = float(1.0) / u_xlat15.x;
    u_xlat29.xy = u_xlat16_2.xy * vec2(vec2(_RefractionIntensity, _RefractionIntensity));
    u_xlat1.x = u_xlat1.x * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.xz = u_xlat1.xx * u_xlat29.xy;
    u_xlat1.xz = u_xlat1.xz * vs_TEXCOORD4.ww;
    u_xlat15.x = u_xlat15.x + (-vs_TEXCOORD4.w);
#ifdef UNITY_ADRENO_ES3
    u_xlat15.x = min(max(u_xlat15.x, 0.0), 1.0);
#else
    u_xlat15.x = clamp(u_xlat15.x, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat15.xx * u_xlat1.xz;
    u_xlat1.z = 0.0;
    u_xlat4.xyz = u_xlat1.xyz + vs_TEXCOORD4.xyw;
    u_xlat4.xy = u_xlat4.xy / u_xlat4.zz;
    u_xlat43 = texture(_CameraDepthTexture, u_xlat4.xy).x;
    u_xlat43 = _ZBufferParams.z * u_xlat43 + _ZBufferParams.w;
    u_xlat43 = float(1.0) / u_xlat43;
    u_xlat43 = u_xlat43 + (-vs_TEXCOORD4.w);
#ifdef UNITY_ADRENO_ES3
    u_xlat43 = min(max(u_xlat43, 0.0), 1.0);
#else
    u_xlat43 = clamp(u_xlat43, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat43) * u_xlat1.xyz + vs_TEXCOORD4.xyw;
    u_xlat29.xy = u_xlat1.xy / u_xlat1.zz;
    u_xlat29.x = texture(_CameraDepthTexture, u_xlat29.xy).x;
    u_xlat29.x = _ZBufferParams.z * u_xlat29.x + _ZBufferParams.w;
    u_xlat29.x = float(1.0) / u_xlat29.x;
    u_xlat29.x = u_xlat29.x + (-vs_TEXCOORD4.w);
    u_xlat1.w = 0.100000001 / _OpacityByDepth;
    u_xlat16_3.xz = u_xlat16_2.xy;
    u_xlat16_3.y = 1.0;
    u_xlat16_4.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
    u_xlat16_4.x = inversesqrt(u_xlat16_4.x);
    u_xlat16_4.xyz = u_xlat16_3.xyz * u_xlat16_4.xxx;
#ifdef UNITY_ADRENO_ES3
    u_xlatb46 = !!(0.0>=_ES_MoonDirection.y);
#else
    u_xlatb46 = 0.0>=_ES_MoonDirection.y;
#endif
    u_xlat5.xyz = (bool(u_xlatb46)) ? _ES_SunDirection.xyz : _ES_MoonDirection.xyz;
    u_xlat6.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat46 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat46 = inversesqrt(u_xlat46);
    u_xlat7.xyz = vec3(u_xlat46) * u_xlat6.xyz;
    u_xlat5.xyz = u_xlat6.xyz * vec3(u_xlat46) + u_xlat5.xyz;
    u_xlat46 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat46 = inversesqrt(u_xlat46);
    u_xlat5.xyz = vec3(u_xlat46) * u_xlat5.xyz;
    u_xlat4.x = dot(u_xlat16_4.xyz, u_xlat5.xyz);
    u_xlat18.x = _Gloss * 128.0;
    u_xlat4.x = max(u_xlat4.x, 9.99999975e-05);
    u_xlat4.x = log2(u_xlat4.x);
    u_xlat4.x = u_xlat4.x * u_xlat18.x;
    u_xlat4.x = exp2(u_xlat4.x);
    u_xlat4.x = u_xlat4.x * _SpecularIntensity;
    u_xlat4.x = max(u_xlat4.x, 0.0);
    u_xlat4.x = min(u_xlat4.x, 16.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_ES_MoonDirection.y>=9.99999975e-05);
#else
    u_xlatb18 = _ES_MoonDirection.y>=9.99999975e-05;
#endif
    u_xlat18.x = u_xlatb18 ? 1.0 : float(0.0);
    u_xlat32 = _ES_MoonDirection.y + -1.0;
    u_xlat18.x = u_xlat18.x * u_xlat32 + 1.0;
    u_xlat32 = float(1.0) / _ShoreTransparency;
    u_xlat46 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat46 = inversesqrt(u_xlat46);
    u_xlat5.xyz = vec3(u_xlat46) * vs_TEXCOORD6.xyz;
    u_xlat46 = dot(u_xlat7.xyz, u_xlat5.xyz);
    u_xlat46 = (-u_xlat46) + 1.0;
    u_xlat46 = max(u_xlat46, 9.99999975e-05);
    u_xlat46 = log2(u_xlat46);
    u_xlat5.x = u_xlat46 * _SpecularPower;
    u_xlat5.x = exp2(u_xlat5.x);
    u_xlat19.xyz = u_xlat18.xxx * _LightColor0.xyz;
    u_xlat19.xyz = u_xlat4.xxx * u_xlat19.xyz;
    u_xlat4.x = u_xlat29.x + -1.0;
    u_xlat4.x = u_xlat32 * u_xlat4.x;
    u_xlat4.x = u_xlat4.x * 0.100000001;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat19.xyz = u_xlat4.xxx * u_xlat19.xyz;
    u_xlat4.x = u_xlat29.x * u_xlat32;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat4.x = max(u_xlat4.x, 9.99999975e-05);
    u_xlat4.x = log2(u_xlat4.x);
    u_xlat4.x = u_xlat4.x * _ShoreFade;
    u_xlat4.x = exp2(u_xlat4.x);
    u_xlat6.xyz = _ShallowColor.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat6.xyz = u_xlat4.xxx * u_xlat6.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat1.xy = u_xlat1.xy / vs_TEXCOORD4.ww;
    u_xlat10_8.xyz = texture(_SceneScaledBufferBeforTransParent, u_xlat1.xy).xyz;
    u_xlat9.xyz = u_xlat6.xyz * u_xlat10_8.xyz;
    u_xlat1.x = 0.100000001 / _DeepColorDepth;
    u_xlat1.xw = u_xlat1.xw * u_xlat29.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xw = min(max(u_xlat1.xw, 0.0), 1.0);
#else
    u_xlat1.xw = clamp(u_xlat1.xw, 0.0, 1.0);
#endif
    u_xlat1.x = max(u_xlat1.x, 9.99999975e-05);
    u_xlat1.x = log2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _DeepColorFade;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat10.xyz = (-u_xlat6.xyz) * u_xlat10_8.xyz + _DeepColor.xyz;
    u_xlat10.xyz = u_xlat1.xxx * u_xlat10.xyz + u_xlat9.xyz;
    u_xlat11.xyz = u_xlat16_2.xyz * _DistortionIntensity.xyz;
    u_xlat12.x = vs_TEXCOORD8.x;
    u_xlat12.y = vs_TEXCOORD9.x;
    u_xlat12.z = vs_TEXCOORD6.x;
    u_xlat12.x = dot(u_xlat12.xyz, u_xlat11.xyz);
    u_xlat13.x = vs_TEXCOORD8.y;
    u_xlat13.y = vs_TEXCOORD9.y;
    u_xlat13.z = vs_TEXCOORD6.y;
    u_xlat12.y = dot(u_xlat13.xyz, u_xlat11.xyz);
    u_xlat13.x = vs_TEXCOORD8.z;
    u_xlat13.y = vs_TEXCOORD9.z;
    u_xlat13.z = vs_TEXCOORD6.z;
    u_xlat12.z = dot(u_xlat13.xyz, u_xlat11.xyz);
    u_xlat1.x = dot(u_xlat12.xyz, u_xlat12.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat12.xyz = u_xlat1.xxx * u_xlat12.xyz;
    u_xlat1.x = dot((-u_xlat7.xyz), u_xlat12.xyz);
    u_xlat1.x = u_xlat1.x + u_xlat1.x;
    u_xlat7.xyz = u_xlat12.xyz * (-u_xlat1.xxx) + (-u_xlat7.xyz);
    u_xlat10_0 = textureLod(_ReflectionSkyCubeMap, u_xlat7.xyz, 0.0);
    u_xlat16_2.x = u_xlat10_0.w + -1.0;
    u_xlat16_2.x = _ReflectionSkyCubeMap_HDR.w * u_xlat16_2.x + 1.0;
    u_xlat16_2.x = log2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * _ReflectionSkyCubeMap_HDR.y;
    u_xlat16_2.x = exp2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * _ReflectionSkyCubeMap_HDR.x;
    u_xlat16_16.xyz = u_xlat10_0.xyz * u_xlat16_2.xxx;
    u_xlat1.xy = u_xlat11.xy * vec2(_SSRDistortion);
    u_xlat18.x = float(1.0) / _SSRDistortion_Shore;
    u_xlat18.x = u_xlat29.x * u_xlat18.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat18.x = min(max(u_xlat18.x, 0.0), 1.0);
#else
    u_xlat18.x = clamp(u_xlat18.x, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat1.xy * u_xlat18.xx;
    u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD4.ww + vs_TEXCOORD4.xy;
    u_xlat1.xy = u_xlat1.xy / vs_TEXCOORD4.ww;
    u_xlat10_3 = texture(_SSRTexture, u_xlat1.xy).wxyz;
    u_xlat16_7.xyz = (-u_xlat16_2.xxx) * u_xlat10_0.xyz + u_xlat10_3.yzw;
    u_xlat7.xyz = u_xlat16_7.xyz * vec3(vec3(_SSRIntensity, _SSRIntensity, _SSRIntensity));
    u_xlat16_3.x = u_xlat10_3.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat7.xyz = u_xlat16_3.xxx * u_xlat7.xyz + u_xlat16_16.xyz;
    u_xlat1.x = u_xlat46 * _FresnelPower;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _ReflectionIntensity;
    u_xlat15.x = float(1.0) / _ShoreReflectionFade;
    u_xlat15.x = u_xlat15.x * u_xlat29.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat15.x = min(max(u_xlat15.x, 0.0), 1.0);
#else
    u_xlat15.x = clamp(u_xlat15.x, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat15.x * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat18.xyz = (-u_xlat10.xyz) + u_xlat7.xyz;
    u_xlat1.xyz = u_xlat1.xxx * u_xlat18.xyz + u_xlat10.xyz;
    u_xlat1.xyz = (-u_xlat6.xyz) * u_xlat10_8.xyz + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat4.xxx * u_xlat1.xyz + u_xlat9.xyz;
    u_xlat0.xyz = u_xlat19.xyz * u_xlat5.xxx + u_xlat1.xyz;
    u_xlat0.w = u_xlat1.w * vs_COLOR0.w;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "MHY_SHADER_MIDDLE" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
uniform 	vec4 hlslcc_mtx4x4_mhyJitteredVP[4];
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
out highp vec4 vs_TEXCOORD9;
out highp vec4 vs_TEXCOORD10;
float u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec4 u_xlat8;
vec3 u_xlat9;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat9.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4_mhyJitteredVP[1];
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[3] * u_xlat2.wwww + u_xlat1;
    u_xlat3.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    u_xlat3.xyw = u_xlat1.xyw;
    gl_Position = u_xlat3;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD1.w = 1.0;
    u_xlat4.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat4.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat4.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat1.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
    u_xlat16_5.x = u_xlat4.y * u_xlat4.y;
    u_xlat16_5.x = u_xlat4.x * u_xlat4.x + (-u_xlat16_5.x);
    u_xlat16_6 = u_xlat4.yzzx * u_xlat4.xyzz;
    u_xlat16_7.x = dot(unity_SHBr, u_xlat16_6);
    u_xlat16_7.y = dot(unity_SHBg, u_xlat16_6);
    u_xlat16_7.z = dot(unity_SHBb, u_xlat16_6);
    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_7.xyz;
    u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat4.w = 1.0;
    u_xlat16_6.x = dot(unity_SHAr, u_xlat4);
    u_xlat16_6.y = dot(unity_SHAg, u_xlat4);
    u_xlat16_6.z = dot(unity_SHAb, u_xlat4);
    u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_6.xyz;
    vs_TEXCOORD1.xyz = u_xlat16_5.xyz;
    u_xlat1.x = u_xlat3.y * _ProjectionParams.x;
    u_xlat8.w = u_xlat1.x * 0.5;
    u_xlat8.xz = u_xlat3.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.z = u_xlat1.z;
    u_xlat3.xy = u_xlat8.zz + u_xlat8.xw;
    vs_TEXCOORD2 = u_xlat3;
    vs_TEXCOORD4.xyw = u_xlat3.xyw;
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD3.w = 0.0;
    u_xlat1.x = u_xlat2.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat2.x + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat2.z + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat2.w + u_xlat1.x;
    vs_TEXCOORD3.z = (-u_xlat1.x);
    vs_TEXCOORD5.w = 0.0;
    vs_TEXCOORD5.xyz = u_xlat9.xyz;
    u_xlat9.xyz = (-u_xlat9.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD6.w = 0.0;
    vs_TEXCOORD6.xyz = u_xlat4.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].www + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * in_POSITION0.yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.zzz + u_xlat1.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.www + u_xlat1.xyz;
    vs_TEXCOORD7.xyz = u_xlat1.xyz * vec3(-1.0, -1.0, 1.0);
    vs_TEXCOORD7.w = 0.0;
    u_xlat1.xyz = in_TANGENT0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat0 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0 = inversesqrt(u_xlat0);
    u_xlat1.xyz = vec3(u_xlat0) * u_xlat1.xyz;
    vs_TEXCOORD8.xyz = u_xlat1.xyz;
    vs_TEXCOORD8.w = 0.0;
    u_xlat2.xyz = u_xlat1.yzx * u_xlat4.zxy;
    u_xlat1.xyz = u_xlat4.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
    u_xlat0 = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD9.xyz = vec3(u_xlat0) * u_xlat1.xyz;
    vs_TEXCOORD9.w = 0.0;
    u_xlat0 = u_xlat9.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat9.x + u_xlat0;
    vs_TEXCOORD10.w = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat9.z + u_xlat0;
    vs_TEXCOORD10.xyz = u_xlat9.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ZBufferParams;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _NormalMapScale;
uniform 	float _Normal01_U_Speed;
uniform 	float _Normal01_VSpeed;
uniform 	float _NormalMapBias;
uniform 	float _Normal02_U_Speed;
uniform 	float _Normal02_V_Speed;
uniform 	float _RefractionIntensity;
uniform 	float _OpacityByDepth;
uniform 	float _SpecularIntensity;
uniform 	vec3 _ES_MoonDirection;
uniform 	vec3 _ES_SunDirection;
uniform 	float _Gloss;
uniform 	float _ShoreTransparency;
uniform 	float _SpecularPower;
uniform 	vec4 _ShallowColor;
uniform 	float _ShoreFade;
uniform 	vec4 _DeepColor;
uniform 	float _DeepColorDepth;
uniform 	float _DeepColorFade;
uniform 	vec4 _DistortionIntensity;
uniform 	float _SSRDistortion;
uniform 	float _SSRDistortion_Shore;
uniform 	float _SSRIntensity;
uniform 	float _ReflectionIntensity;
uniform 	float _FresnelPower;
uniform 	float _ShoreReflectionFade;
uniform 	mediump float _ProjectUVScale;
uniform 	vec4 _ReflectionSkyCubeMap_HDR;
uniform lowp sampler2D _Normal01;
uniform lowp sampler2D _Normal02;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _SceneScaledBufferBeforTransParent;
uniform lowp samplerCube _ReflectionSkyCubeMap;
uniform lowp sampler2D _SSRTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD8;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
lowp vec4 u_xlat10_3;
vec3 u_xlat4;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
mediump vec3 u_xlat16_7;
lowp vec3 u_xlat10_8;
vec3 u_xlat9;
vec3 u_xlat10;
vec3 u_xlat11;
vec3 u_xlat12;
vec3 u_xlat13;
vec2 u_xlat15;
mediump vec3 u_xlat16_16;
vec3 u_xlat18;
bool u_xlatb18;
vec3 u_xlat19;
vec2 u_xlat29;
float u_xlat32;
float u_xlat43;
float u_xlat46;
bool u_xlatb46;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD5.zx * vec2(vec2(_ProjectUVScale, _ProjectUVScale));
    u_xlat1.x = _Time.y * _Normal01_U_Speed + u_xlat0.y;
    u_xlat1.yz = _Time.yy * vec2(_Normal01_VSpeed, _Normal02_U_Speed) + u_xlat0.xy;
    u_xlat1.w = _Time.y * _Normal02_V_Speed + u_xlat0.x;
    u_xlat10_0.xyz = texture(_Normal01, u_xlat1.xy, _NormalMapBias).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_2.xy = u_xlat16_0.xy * vec2(_NormalMapScale);
    u_xlat10_1.xyz = texture(_Normal02, u_xlat1.zw, _NormalMapBias).xyz;
    u_xlat16_0.w = -1.0;
    u_xlat16_3.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.wwz;
    u_xlat16_3.xy = u_xlat16_3.xy * vec2(_NormalMapScale);
    u_xlat16_2.z = -1.0;
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
    u_xlat1.x = float(1.0) / vs_TEXCOORD4.w;
    u_xlat15.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat15.x = texture(_CameraDepthTexture, u_xlat15.xy).x;
    u_xlat15.x = _ZBufferParams.z * u_xlat15.x + _ZBufferParams.w;
    u_xlat15.x = float(1.0) / u_xlat15.x;
    u_xlat29.xy = u_xlat16_2.xy * vec2(vec2(_RefractionIntensity, _RefractionIntensity));
    u_xlat1.x = u_xlat1.x * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.xz = u_xlat1.xx * u_xlat29.xy;
    u_xlat1.xz = u_xlat1.xz * vs_TEXCOORD4.ww;
    u_xlat15.x = u_xlat15.x + (-vs_TEXCOORD4.w);
#ifdef UNITY_ADRENO_ES3
    u_xlat15.x = min(max(u_xlat15.x, 0.0), 1.0);
#else
    u_xlat15.x = clamp(u_xlat15.x, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat15.xx * u_xlat1.xz;
    u_xlat1.z = 0.0;
    u_xlat4.xyz = u_xlat1.xyz + vs_TEXCOORD4.xyw;
    u_xlat4.xy = u_xlat4.xy / u_xlat4.zz;
    u_xlat43 = texture(_CameraDepthTexture, u_xlat4.xy).x;
    u_xlat43 = _ZBufferParams.z * u_xlat43 + _ZBufferParams.w;
    u_xlat43 = float(1.0) / u_xlat43;
    u_xlat43 = u_xlat43 + (-vs_TEXCOORD4.w);
#ifdef UNITY_ADRENO_ES3
    u_xlat43 = min(max(u_xlat43, 0.0), 1.0);
#else
    u_xlat43 = clamp(u_xlat43, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat43) * u_xlat1.xyz + vs_TEXCOORD4.xyw;
    u_xlat29.xy = u_xlat1.xy / u_xlat1.zz;
    u_xlat29.x = texture(_CameraDepthTexture, u_xlat29.xy).x;
    u_xlat29.x = _ZBufferParams.z * u_xlat29.x + _ZBufferParams.w;
    u_xlat29.x = float(1.0) / u_xlat29.x;
    u_xlat29.x = u_xlat29.x + (-vs_TEXCOORD4.w);
    u_xlat1.w = 0.100000001 / _OpacityByDepth;
    u_xlat16_3.xz = u_xlat16_2.xy;
    u_xlat16_3.y = 1.0;
    u_xlat16_4.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
    u_xlat16_4.x = inversesqrt(u_xlat16_4.x);
    u_xlat16_4.xyz = u_xlat16_3.xyz * u_xlat16_4.xxx;
#ifdef UNITY_ADRENO_ES3
    u_xlatb46 = !!(0.0>=_ES_MoonDirection.y);
#else
    u_xlatb46 = 0.0>=_ES_MoonDirection.y;
#endif
    u_xlat5.xyz = (bool(u_xlatb46)) ? _ES_SunDirection.xyz : _ES_MoonDirection.xyz;
    u_xlat6.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat46 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat46 = inversesqrt(u_xlat46);
    u_xlat7.xyz = vec3(u_xlat46) * u_xlat6.xyz;
    u_xlat5.xyz = u_xlat6.xyz * vec3(u_xlat46) + u_xlat5.xyz;
    u_xlat46 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat46 = inversesqrt(u_xlat46);
    u_xlat5.xyz = vec3(u_xlat46) * u_xlat5.xyz;
    u_xlat4.x = dot(u_xlat16_4.xyz, u_xlat5.xyz);
    u_xlat18.x = _Gloss * 128.0;
    u_xlat4.x = max(u_xlat4.x, 9.99999975e-05);
    u_xlat4.x = log2(u_xlat4.x);
    u_xlat4.x = u_xlat4.x * u_xlat18.x;
    u_xlat4.x = exp2(u_xlat4.x);
    u_xlat4.x = u_xlat4.x * _SpecularIntensity;
    u_xlat4.x = max(u_xlat4.x, 0.0);
    u_xlat4.x = min(u_xlat4.x, 16.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_ES_MoonDirection.y>=9.99999975e-05);
#else
    u_xlatb18 = _ES_MoonDirection.y>=9.99999975e-05;
#endif
    u_xlat18.x = u_xlatb18 ? 1.0 : float(0.0);
    u_xlat32 = _ES_MoonDirection.y + -1.0;
    u_xlat18.x = u_xlat18.x * u_xlat32 + 1.0;
    u_xlat32 = float(1.0) / _ShoreTransparency;
    u_xlat46 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat46 = inversesqrt(u_xlat46);
    u_xlat5.xyz = vec3(u_xlat46) * vs_TEXCOORD6.xyz;
    u_xlat46 = dot(u_xlat7.xyz, u_xlat5.xyz);
    u_xlat46 = (-u_xlat46) + 1.0;
    u_xlat46 = max(u_xlat46, 9.99999975e-05);
    u_xlat46 = log2(u_xlat46);
    u_xlat5.x = u_xlat46 * _SpecularPower;
    u_xlat5.x = exp2(u_xlat5.x);
    u_xlat19.xyz = u_xlat18.xxx * _LightColor0.xyz;
    u_xlat19.xyz = u_xlat4.xxx * u_xlat19.xyz;
    u_xlat4.x = u_xlat29.x + -1.0;
    u_xlat4.x = u_xlat32 * u_xlat4.x;
    u_xlat4.x = u_xlat4.x * 0.100000001;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat19.xyz = u_xlat4.xxx * u_xlat19.xyz;
    u_xlat4.x = u_xlat29.x * u_xlat32;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat4.x = max(u_xlat4.x, 9.99999975e-05);
    u_xlat4.x = log2(u_xlat4.x);
    u_xlat4.x = u_xlat4.x * _ShoreFade;
    u_xlat4.x = exp2(u_xlat4.x);
    u_xlat6.xyz = _ShallowColor.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat6.xyz = u_xlat4.xxx * u_xlat6.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat1.xy = u_xlat1.xy / vs_TEXCOORD4.ww;
    u_xlat10_8.xyz = texture(_SceneScaledBufferBeforTransParent, u_xlat1.xy).xyz;
    u_xlat9.xyz = u_xlat6.xyz * u_xlat10_8.xyz;
    u_xlat1.x = 0.100000001 / _DeepColorDepth;
    u_xlat1.xw = u_xlat1.xw * u_xlat29.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xw = min(max(u_xlat1.xw, 0.0), 1.0);
#else
    u_xlat1.xw = clamp(u_xlat1.xw, 0.0, 1.0);
#endif
    u_xlat1.x = max(u_xlat1.x, 9.99999975e-05);
    u_xlat1.x = log2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _DeepColorFade;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat10.xyz = (-u_xlat6.xyz) * u_xlat10_8.xyz + _DeepColor.xyz;
    u_xlat10.xyz = u_xlat1.xxx * u_xlat10.xyz + u_xlat9.xyz;
    u_xlat11.xyz = u_xlat16_2.xyz * _DistortionIntensity.xyz;
    u_xlat12.x = vs_TEXCOORD8.x;
    u_xlat12.y = vs_TEXCOORD9.x;
    u_xlat12.z = vs_TEXCOORD6.x;
    u_xlat12.x = dot(u_xlat12.xyz, u_xlat11.xyz);
    u_xlat13.x = vs_TEXCOORD8.y;
    u_xlat13.y = vs_TEXCOORD9.y;
    u_xlat13.z = vs_TEXCOORD6.y;
    u_xlat12.y = dot(u_xlat13.xyz, u_xlat11.xyz);
    u_xlat13.x = vs_TEXCOORD8.z;
    u_xlat13.y = vs_TEXCOORD9.z;
    u_xlat13.z = vs_TEXCOORD6.z;
    u_xlat12.z = dot(u_xlat13.xyz, u_xlat11.xyz);
    u_xlat1.x = dot(u_xlat12.xyz, u_xlat12.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat12.xyz = u_xlat1.xxx * u_xlat12.xyz;
    u_xlat1.x = dot((-u_xlat7.xyz), u_xlat12.xyz);
    u_xlat1.x = u_xlat1.x + u_xlat1.x;
    u_xlat7.xyz = u_xlat12.xyz * (-u_xlat1.xxx) + (-u_xlat7.xyz);
    u_xlat10_0 = textureLod(_ReflectionSkyCubeMap, u_xlat7.xyz, 0.0);
    u_xlat16_2.x = u_xlat10_0.w + -1.0;
    u_xlat16_2.x = _ReflectionSkyCubeMap_HDR.w * u_xlat16_2.x + 1.0;
    u_xlat16_2.x = log2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * _ReflectionSkyCubeMap_HDR.y;
    u_xlat16_2.x = exp2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * _ReflectionSkyCubeMap_HDR.x;
    u_xlat16_16.xyz = u_xlat10_0.xyz * u_xlat16_2.xxx;
    u_xlat1.xy = u_xlat11.xy * vec2(_SSRDistortion);
    u_xlat18.x = float(1.0) / _SSRDistortion_Shore;
    u_xlat18.x = u_xlat29.x * u_xlat18.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat18.x = min(max(u_xlat18.x, 0.0), 1.0);
#else
    u_xlat18.x = clamp(u_xlat18.x, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat1.xy * u_xlat18.xx;
    u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD4.ww + vs_TEXCOORD4.xy;
    u_xlat1.xy = u_xlat1.xy / vs_TEXCOORD4.ww;
    u_xlat10_3 = texture(_SSRTexture, u_xlat1.xy).wxyz;
    u_xlat16_7.xyz = (-u_xlat16_2.xxx) * u_xlat10_0.xyz + u_xlat10_3.yzw;
    u_xlat7.xyz = u_xlat16_7.xyz * vec3(vec3(_SSRIntensity, _SSRIntensity, _SSRIntensity));
    u_xlat16_3.x = u_xlat10_3.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat7.xyz = u_xlat16_3.xxx * u_xlat7.xyz + u_xlat16_16.xyz;
    u_xlat1.x = u_xlat46 * _FresnelPower;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _ReflectionIntensity;
    u_xlat15.x = float(1.0) / _ShoreReflectionFade;
    u_xlat15.x = u_xlat15.x * u_xlat29.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat15.x = min(max(u_xlat15.x, 0.0), 1.0);
#else
    u_xlat15.x = clamp(u_xlat15.x, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat15.x * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat18.xyz = (-u_xlat10.xyz) + u_xlat7.xyz;
    u_xlat1.xyz = u_xlat1.xxx * u_xlat18.xyz + u_xlat10.xyz;
    u_xlat1.xyz = (-u_xlat6.xyz) * u_xlat10_8.xyz + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat4.xxx * u_xlat1.xyz + u_xlat9.xyz;
    u_xlat0.xyz = u_xlat19.xyz * u_xlat5.xxx + u_xlat1.xyz;
    u_xlat0.w = u_xlat1.w * vs_COLOR0.w;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "MHY_SHADER_LOW" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump float _MHYZBias;
uniform 	vec4 hlslcc_mtx4x4_mhyJitteredVP[4];
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
out highp vec4 vs_TEXCOORD9;
out highp vec4 vs_TEXCOORD10;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec4 u_xlat8;
float u_xlat27;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4_mhyJitteredVP[1];
    u_xlat2 = hlslcc_mtx4x4_mhyJitteredVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4_mhyJitteredVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4_mhyJitteredVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat3.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    u_xlat3.xyw = u_xlat2.xyw;
    gl_Position = u_xlat3;
    vs_COLOR0 = in_COLOR0;
    u_xlat4.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat4.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat4.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat27 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat4.xyz = vec3(u_xlat27) * u_xlat4.xyz;
    u_xlat16_5.x = u_xlat4.y * u_xlat4.y;
    u_xlat16_5.x = u_xlat4.x * u_xlat4.x + (-u_xlat16_5.x);
    u_xlat16_6 = u_xlat4.yzzx * u_xlat4.xyzz;
    u_xlat16_7.x = dot(unity_SHBr, u_xlat16_6);
    u_xlat16_7.y = dot(unity_SHBg, u_xlat16_6);
    u_xlat16_7.z = dot(unity_SHBb, u_xlat16_6);
    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_7.xyz;
    u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat4.w = 1.0;
    u_xlat16_6.x = dot(unity_SHAr, u_xlat4);
    u_xlat16_6.y = dot(unity_SHAg, u_xlat4);
    u_xlat16_6.z = dot(unity_SHAb, u_xlat4);
    u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_6.xyz;
    vs_TEXCOORD1.xyz = u_xlat16_5.xyz;
    vs_TEXCOORD1.w = 1.0;
    u_xlat27 = u_xlat3.y * _ProjectionParams.x;
    u_xlat8.w = u_xlat27 * 0.5;
    u_xlat8.xz = u_xlat3.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.z = u_xlat2.z;
    u_xlat3.xy = u_xlat8.zz + u_xlat8.xw;
    vs_TEXCOORD2 = u_xlat3;
    vs_TEXCOORD4.xyw = u_xlat3.xyw;
    u_xlat27 = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat27 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat27;
    u_xlat27 = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat27;
    u_xlat27 = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat27;
    vs_TEXCOORD3.z = (-u_xlat27);
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD3.w = 0.0;
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD5.w = 0.0;
    vs_TEXCOORD6.xyz = u_xlat4.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[1].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].www + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * in_POSITION0.yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.zzz + u_xlat1.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.www + u_xlat1.xyz;
    vs_TEXCOORD7.xyz = u_xlat1.xyz * vec3(-1.0, -1.0, 1.0);
    vs_TEXCOORD7.w = 0.0;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat27 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat1.xyz = vec3(u_xlat27) * u_xlat1.xyz;
    vs_TEXCOORD8.xyz = u_xlat1.xyz;
    vs_TEXCOORD8.w = 0.0;
    u_xlat2.xyz = u_xlat1.yzx * u_xlat4.zxy;
    u_xlat1.xyz = u_xlat4.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
    u_xlat27 = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD9.xyz = vec3(u_xlat27) * u_xlat1.xyz;
    vs_TEXCOORD9.w = 0.0;
    u_xlat27 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat27 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat27;
    vs_TEXCOORD10.w = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat27;
    vs_TEXCOORD10.xyz = u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ZBufferParams;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _NormalMapScale;
uniform 	float _Normal01_U_Speed;
uniform 	float _Normal01_VSpeed;
uniform 	float _NormalMapBias;
uniform 	float _Normal02_U_Speed;
uniform 	float _Normal02_V_Speed;
uniform 	float _RefractionIntensity;
uniform 	float _OpacityByDepth;
uniform 	float _SpecularIntensity;
uniform 	vec3 _ES_MoonDirection;
uniform 	vec3 _ES_SunDirection;
uniform 	float _Gloss;
uniform 	float _ShoreTransparency;
uniform 	float _SpecularPower;
uniform 	vec4 _ShallowColor;
uniform 	float _ShoreFade;
uniform 	vec4 _DeepColor;
uniform 	float _DeepColorDepth;
uniform 	float _DeepColorFade;
uniform 	vec4 _DistortionIntensity;
uniform 	float _ReflectionIntensity;
uniform 	float _FresnelPower;
uniform 	float _ShoreReflectionFade;
uniform 	mediump float _ProjectUVScale;
uniform 	vec4 _ReflectionSkyCubeMap_HDR;
uniform lowp sampler2D _Normal01;
uniform lowp sampler2D _Normal02;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _SceneScaledBufferBeforTransParent;
uniform lowp samplerCube _ReflectionSkyCubeMap;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD8;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
lowp vec3 u_xlat10_8;
vec3 u_xlat9;
vec3 u_xlat10;
vec3 u_xlat11;
vec3 u_xlat12;
vec3 u_xlat13;
vec2 u_xlat15;
vec3 u_xlat18;
bool u_xlatb18;
vec3 u_xlat19;
vec2 u_xlat29;
float u_xlat32;
float u_xlat43;
float u_xlat46;
bool u_xlatb46;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD5.zx * vec2(vec2(_ProjectUVScale, _ProjectUVScale));
    u_xlat1.x = _Time.y * _Normal01_U_Speed + u_xlat0.y;
    u_xlat1.yz = _Time.yy * vec2(_Normal01_VSpeed, _Normal02_U_Speed) + u_xlat0.xy;
    u_xlat1.w = _Time.y * _Normal02_V_Speed + u_xlat0.x;
    u_xlat10_0.xyz = texture(_Normal01, u_xlat1.xy, _NormalMapBias).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_2.xy = u_xlat16_0.xy * vec2(_NormalMapScale);
    u_xlat10_1.xyz = texture(_Normal02, u_xlat1.zw, _NormalMapBias).xyz;
    u_xlat16_0.w = -1.0;
    u_xlat16_3.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.wwz;
    u_xlat16_3.xy = u_xlat16_3.xy * vec2(_NormalMapScale);
    u_xlat16_2.z = -1.0;
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
    u_xlat1.x = float(1.0) / vs_TEXCOORD4.w;
    u_xlat15.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat15.x = texture(_CameraDepthTexture, u_xlat15.xy).x;
    u_xlat15.x = _ZBufferParams.z * u_xlat15.x + _ZBufferParams.w;
    u_xlat15.x = float(1.0) / u_xlat15.x;
    u_xlat29.xy = u_xlat16_2.xy * vec2(vec2(_RefractionIntensity, _RefractionIntensity));
    u_xlat1.x = u_xlat1.x * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.xz = u_xlat1.xx * u_xlat29.xy;
    u_xlat1.xz = u_xlat1.xz * vs_TEXCOORD4.ww;
    u_xlat15.x = u_xlat15.x + (-vs_TEXCOORD4.w);
#ifdef UNITY_ADRENO_ES3
    u_xlat15.x = min(max(u_xlat15.x, 0.0), 1.0);
#else
    u_xlat15.x = clamp(u_xlat15.x, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat15.xx * u_xlat1.xz;
    u_xlat1.z = 0.0;
    u_xlat4.xyz = u_xlat1.xyz + vs_TEXCOORD4.xyw;
    u_xlat4.xy = u_xlat4.xy / u_xlat4.zz;
    u_xlat43 = texture(_CameraDepthTexture, u_xlat4.xy).x;
    u_xlat43 = _ZBufferParams.z * u_xlat43 + _ZBufferParams.w;
    u_xlat43 = float(1.0) / u_xlat43;
    u_xlat43 = u_xlat43 + (-vs_TEXCOORD4.w);
#ifdef UNITY_ADRENO_ES3
    u_xlat43 = min(max(u_xlat43, 0.0), 1.0);
#else
    u_xlat43 = clamp(u_xlat43, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat43) * u_xlat1.xyz + vs_TEXCOORD4.xyw;
    u_xlat29.xy = u_xlat1.xy / u_xlat1.zz;
    u_xlat29.x = texture(_CameraDepthTexture, u_xlat29.xy).x;
    u_xlat29.x = _ZBufferParams.z * u_xlat29.x + _ZBufferParams.w;
    u_xlat29.x = float(1.0) / u_xlat29.x;
    u_xlat29.x = u_xlat29.x + (-vs_TEXCOORD4.w);
    u_xlat1.w = 0.100000001 / _OpacityByDepth;
    u_xlat16_3.xz = u_xlat16_2.xy;
    u_xlat16_3.y = 1.0;
    u_xlat16_4.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
    u_xlat16_4.x = inversesqrt(u_xlat16_4.x);
    u_xlat16_4.xyz = u_xlat16_3.xyz * u_xlat16_4.xxx;
#ifdef UNITY_ADRENO_ES3
    u_xlatb46 = !!(0.0>=_ES_MoonDirection.y);
#else
    u_xlatb46 = 0.0>=_ES_MoonDirection.y;
#endif
    u_xlat5.xyz = (bool(u_xlatb46)) ? _ES_SunDirection.xyz : _ES_MoonDirection.xyz;
    u_xlat6.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat46 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat46 = inversesqrt(u_xlat46);
    u_xlat7.xyz = vec3(u_xlat46) * u_xlat6.xyz;
    u_xlat5.xyz = u_xlat6.xyz * vec3(u_xlat46) + u_xlat5.xyz;
    u_xlat46 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat46 = inversesqrt(u_xlat46);
    u_xlat5.xyz = vec3(u_xlat46) * u_xlat5.xyz;
    u_xlat4.x = dot(u_xlat16_4.xyz, u_xlat5.xyz);
    u_xlat18.x = _Gloss * 128.0;
    u_xlat4.x = max(u_xlat4.x, 9.99999975e-05);
    u_xlat4.x = log2(u_xlat4.x);
    u_xlat4.x = u_xlat4.x * u_xlat18.x;
    u_xlat4.x = exp2(u_xlat4.x);
    u_xlat4.x = u_xlat4.x * _SpecularIntensity;
    u_xlat4.x = max(u_xlat4.x, 0.0);
    u_xlat4.x = min(u_xlat4.x, 16.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_ES_MoonDirection.y>=9.99999975e-05);
#else
    u_xlatb18 = _ES_MoonDirection.y>=9.99999975e-05;
#endif
    u_xlat18.x = u_xlatb18 ? 1.0 : float(0.0);
    u_xlat32 = _ES_MoonDirection.y + -1.0;
    u_xlat18.x = u_xlat18.x * u_xlat32 + 1.0;
    u_xlat32 = float(1.0) / _ShoreTransparency;
    u_xlat46 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat46 = inversesqrt(u_xlat46);
    u_xlat5.xyz = vec3(u_xlat46) * vs_TEXCOORD6.xyz;
    u_xlat46 = dot(u_xlat7.xyz, u_xlat5.xyz);
    u_xlat46 = (-u_xlat46) + 1.0;
    u_xlat46 = max(u_xlat46, 9.99999975e-05);
    u_xlat46 = log2(u_xlat46);
    u_xlat5.x = u_xlat46 * _SpecularPower;
    u_xlat5.x = exp2(u_xlat5.x);
    u_xlat19.xyz = u_xlat18.xxx * _LightColor0.xyz;
    u_xlat19.xyz = u_xlat4.xxx * u_xlat19.xyz;
    u_xlat4.x = u_xlat29.x + -1.0;
    u_xlat4.x = u_xlat32 * u_xlat4.x;
    u_xlat4.x = u_xlat4.x * 0.100000001;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat19.xyz = u_xlat4.xxx * u_xlat19.xyz;
    u_xlat4.x = u_xlat29.x * u_xlat32;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat4.x = max(u_xlat4.x, 9.99999975e-05);
    u_xlat4.x = log2(u_xlat4.x);
    u_xlat4.x = u_xlat4.x * _ShoreFade;
    u_xlat4.x = exp2(u_xlat4.x);
    u_xlat6.xyz = _ShallowColor.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat6.xyz = u_xlat4.xxx * u_xlat6.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat1.xy = u_xlat1.xy / vs_TEXCOORD4.ww;
    u_xlat10_8.xyz = texture(_SceneScaledBufferBeforTransParent, u_xlat1.xy).xyz;
    u_xlat9.xyz = u_xlat6.xyz * u_xlat10_8.xyz;
    u_xlat1.x = 0.100000001 / _DeepColorDepth;
    u_xlat1.xw = u_xlat1.xw * u_xlat29.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xw = min(max(u_xlat1.xw, 0.0), 1.0);
#else
    u_xlat1.xw = clamp(u_xlat1.xw, 0.0, 1.0);
#endif
    u_xlat1.x = max(u_xlat1.x, 9.99999975e-05);
    u_xlat1.x = log2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _DeepColorFade;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat10.xyz = (-u_xlat6.xyz) * u_xlat10_8.xyz + _DeepColor.xyz;
    u_xlat10.xyz = u_xlat1.xxx * u_xlat10.xyz + u_xlat9.xyz;
    u_xlat11.xyz = u_xlat16_2.xyz * _DistortionIntensity.xyz;
    u_xlat12.x = vs_TEXCOORD8.x;
    u_xlat12.y = vs_TEXCOORD9.x;
    u_xlat12.z = vs_TEXCOORD6.x;
    u_xlat12.x = dot(u_xlat12.xyz, u_xlat11.xyz);
    u_xlat13.x = vs_TEXCOORD8.y;
    u_xlat13.y = vs_TEXCOORD9.y;
    u_xlat13.z = vs_TEXCOORD6.y;
    u_xlat12.y = dot(u_xlat13.xyz, u_xlat11.xyz);
    u_xlat13.x = vs_TEXCOORD8.z;
    u_xlat13.y = vs_TEXCOORD9.z;
    u_xlat13.z = vs_TEXCOORD6.z;
    u_xlat12.z = dot(u_xlat13.xyz, u_xlat11.xyz);
    u_xlat1.x = dot(u_xlat12.xyz, u_xlat12.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat11.xyz = u_xlat1.xxx * u_xlat12.xyz;
    u_xlat1.x = dot((-u_xlat7.xyz), u_xlat11.xyz);
    u_xlat1.x = u_xlat1.x + u_xlat1.x;
    u_xlat7.xyz = u_xlat11.xyz * (-u_xlat1.xxx) + (-u_xlat7.xyz);
    u_xlat10_0 = textureLod(_ReflectionSkyCubeMap, u_xlat7.xyz, 0.0);
    u_xlat16_2.x = u_xlat10_0.w + -1.0;
    u_xlat16_2.x = _ReflectionSkyCubeMap_HDR.w * u_xlat16_2.x + 1.0;
    u_xlat16_2.x = log2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * _ReflectionSkyCubeMap_HDR.y;
    u_xlat16_2.x = exp2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * _ReflectionSkyCubeMap_HDR.x;
    u_xlat1.x = u_xlat46 * _FresnelPower;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _ReflectionIntensity;
    u_xlat15.x = float(1.0) / _ShoreReflectionFade;
    u_xlat15.x = u_xlat15.x * u_xlat29.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat15.x = min(max(u_xlat15.x, 0.0), 1.0);
#else
    u_xlat15.x = clamp(u_xlat15.x, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat15.x * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat18.xyz = u_xlat16_2.xxx * u_xlat10_0.xyz + (-u_xlat10.xyz);
    u_xlat1.xyz = u_xlat1.xxx * u_xlat18.xyz + u_xlat10.xyz;
    u_xlat1.xyz = (-u_xlat6.xyz) * u_xlat10_8.xyz + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat4.xxx * u_xlat1.xyz + u_xlat9.xyz;
    u_xlat0.xyz = u_xlat19.xyz * u_xlat5.xxx + u_xlat1.xyz;
    u_xlat0.w = u_xlat1.w * vs_COLOR0.w;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "MHY_SHADER_LOW" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
uniform 	vec4 hlslcc_mtx4x4_mhyJitteredVP[4];
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
out highp vec4 vs_TEXCOORD9;
out highp vec4 vs_TEXCOORD10;
float u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec4 u_xlat8;
vec3 u_xlat9;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat9.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4_mhyJitteredVP[1];
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[3] * u_xlat2.wwww + u_xlat1;
    u_xlat3.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    u_xlat3.xyw = u_xlat1.xyw;
    gl_Position = u_xlat3;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD1.w = 1.0;
    u_xlat4.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat4.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat4.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat1.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
    u_xlat16_5.x = u_xlat4.y * u_xlat4.y;
    u_xlat16_5.x = u_xlat4.x * u_xlat4.x + (-u_xlat16_5.x);
    u_xlat16_6 = u_xlat4.yzzx * u_xlat4.xyzz;
    u_xlat16_7.x = dot(unity_SHBr, u_xlat16_6);
    u_xlat16_7.y = dot(unity_SHBg, u_xlat16_6);
    u_xlat16_7.z = dot(unity_SHBb, u_xlat16_6);
    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_7.xyz;
    u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat4.w = 1.0;
    u_xlat16_6.x = dot(unity_SHAr, u_xlat4);
    u_xlat16_6.y = dot(unity_SHAg, u_xlat4);
    u_xlat16_6.z = dot(unity_SHAb, u_xlat4);
    u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_6.xyz;
    vs_TEXCOORD1.xyz = u_xlat16_5.xyz;
    u_xlat1.x = u_xlat3.y * _ProjectionParams.x;
    u_xlat8.w = u_xlat1.x * 0.5;
    u_xlat8.xz = u_xlat3.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.z = u_xlat1.z;
    u_xlat3.xy = u_xlat8.zz + u_xlat8.xw;
    vs_TEXCOORD2 = u_xlat3;
    vs_TEXCOORD4.xyw = u_xlat3.xyw;
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD3.w = 0.0;
    u_xlat1.x = u_xlat2.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat2.x + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat2.z + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat2.w + u_xlat1.x;
    vs_TEXCOORD3.z = (-u_xlat1.x);
    vs_TEXCOORD5.w = 0.0;
    vs_TEXCOORD5.xyz = u_xlat9.xyz;
    u_xlat9.xyz = (-u_xlat9.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD6.w = 0.0;
    vs_TEXCOORD6.xyz = u_xlat4.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].www + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * in_POSITION0.yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.zzz + u_xlat1.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.www + u_xlat1.xyz;
    vs_TEXCOORD7.xyz = u_xlat1.xyz * vec3(-1.0, -1.0, 1.0);
    vs_TEXCOORD7.w = 0.0;
    u_xlat1.xyz = in_TANGENT0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat0 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0 = inversesqrt(u_xlat0);
    u_xlat1.xyz = vec3(u_xlat0) * u_xlat1.xyz;
    vs_TEXCOORD8.xyz = u_xlat1.xyz;
    vs_TEXCOORD8.w = 0.0;
    u_xlat2.xyz = u_xlat1.yzx * u_xlat4.zxy;
    u_xlat1.xyz = u_xlat4.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
    u_xlat0 = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD9.xyz = vec3(u_xlat0) * u_xlat1.xyz;
    vs_TEXCOORD9.w = 0.0;
    u_xlat0 = u_xlat9.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat9.x + u_xlat0;
    vs_TEXCOORD10.w = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat9.z + u_xlat0;
    vs_TEXCOORD10.xyz = u_xlat9.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ZBufferParams;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _NormalMapScale;
uniform 	float _Normal01_U_Speed;
uniform 	float _Normal01_VSpeed;
uniform 	float _NormalMapBias;
uniform 	float _Normal02_U_Speed;
uniform 	float _Normal02_V_Speed;
uniform 	float _RefractionIntensity;
uniform 	float _OpacityByDepth;
uniform 	float _SpecularIntensity;
uniform 	vec3 _ES_MoonDirection;
uniform 	vec3 _ES_SunDirection;
uniform 	float _Gloss;
uniform 	float _ShoreTransparency;
uniform 	float _SpecularPower;
uniform 	vec4 _ShallowColor;
uniform 	float _ShoreFade;
uniform 	vec4 _DeepColor;
uniform 	float _DeepColorDepth;
uniform 	float _DeepColorFade;
uniform 	vec4 _DistortionIntensity;
uniform 	float _ReflectionIntensity;
uniform 	float _FresnelPower;
uniform 	float _ShoreReflectionFade;
uniform 	mediump float _ProjectUVScale;
uniform 	vec4 _ReflectionSkyCubeMap_HDR;
uniform lowp sampler2D _Normal01;
uniform lowp sampler2D _Normal02;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _SceneScaledBufferBeforTransParent;
uniform lowp samplerCube _ReflectionSkyCubeMap;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD8;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
lowp vec3 u_xlat10_8;
vec3 u_xlat9;
vec3 u_xlat10;
vec3 u_xlat11;
vec3 u_xlat12;
vec3 u_xlat13;
vec2 u_xlat15;
vec3 u_xlat18;
bool u_xlatb18;
vec3 u_xlat19;
vec2 u_xlat29;
float u_xlat32;
float u_xlat43;
float u_xlat46;
bool u_xlatb46;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD5.zx * vec2(vec2(_ProjectUVScale, _ProjectUVScale));
    u_xlat1.x = _Time.y * _Normal01_U_Speed + u_xlat0.y;
    u_xlat1.yz = _Time.yy * vec2(_Normal01_VSpeed, _Normal02_U_Speed) + u_xlat0.xy;
    u_xlat1.w = _Time.y * _Normal02_V_Speed + u_xlat0.x;
    u_xlat10_0.xyz = texture(_Normal01, u_xlat1.xy, _NormalMapBias).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_2.xy = u_xlat16_0.xy * vec2(_NormalMapScale);
    u_xlat10_1.xyz = texture(_Normal02, u_xlat1.zw, _NormalMapBias).xyz;
    u_xlat16_0.w = -1.0;
    u_xlat16_3.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.wwz;
    u_xlat16_3.xy = u_xlat16_3.xy * vec2(_NormalMapScale);
    u_xlat16_2.z = -1.0;
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
    u_xlat1.x = float(1.0) / vs_TEXCOORD4.w;
    u_xlat15.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat15.x = texture(_CameraDepthTexture, u_xlat15.xy).x;
    u_xlat15.x = _ZBufferParams.z * u_xlat15.x + _ZBufferParams.w;
    u_xlat15.x = float(1.0) / u_xlat15.x;
    u_xlat29.xy = u_xlat16_2.xy * vec2(vec2(_RefractionIntensity, _RefractionIntensity));
    u_xlat1.x = u_xlat1.x * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.xz = u_xlat1.xx * u_xlat29.xy;
    u_xlat1.xz = u_xlat1.xz * vs_TEXCOORD4.ww;
    u_xlat15.x = u_xlat15.x + (-vs_TEXCOORD4.w);
#ifdef UNITY_ADRENO_ES3
    u_xlat15.x = min(max(u_xlat15.x, 0.0), 1.0);
#else
    u_xlat15.x = clamp(u_xlat15.x, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat15.xx * u_xlat1.xz;
    u_xlat1.z = 0.0;
    u_xlat4.xyz = u_xlat1.xyz + vs_TEXCOORD4.xyw;
    u_xlat4.xy = u_xlat4.xy / u_xlat4.zz;
    u_xlat43 = texture(_CameraDepthTexture, u_xlat4.xy).x;
    u_xlat43 = _ZBufferParams.z * u_xlat43 + _ZBufferParams.w;
    u_xlat43 = float(1.0) / u_xlat43;
    u_xlat43 = u_xlat43 + (-vs_TEXCOORD4.w);
#ifdef UNITY_ADRENO_ES3
    u_xlat43 = min(max(u_xlat43, 0.0), 1.0);
#else
    u_xlat43 = clamp(u_xlat43, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat43) * u_xlat1.xyz + vs_TEXCOORD4.xyw;
    u_xlat29.xy = u_xlat1.xy / u_xlat1.zz;
    u_xlat29.x = texture(_CameraDepthTexture, u_xlat29.xy).x;
    u_xlat29.x = _ZBufferParams.z * u_xlat29.x + _ZBufferParams.w;
    u_xlat29.x = float(1.0) / u_xlat29.x;
    u_xlat29.x = u_xlat29.x + (-vs_TEXCOORD4.w);
    u_xlat1.w = 0.100000001 / _OpacityByDepth;
    u_xlat16_3.xz = u_xlat16_2.xy;
    u_xlat16_3.y = 1.0;
    u_xlat16_4.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
    u_xlat16_4.x = inversesqrt(u_xlat16_4.x);
    u_xlat16_4.xyz = u_xlat16_3.xyz * u_xlat16_4.xxx;
#ifdef UNITY_ADRENO_ES3
    u_xlatb46 = !!(0.0>=_ES_MoonDirection.y);
#else
    u_xlatb46 = 0.0>=_ES_MoonDirection.y;
#endif
    u_xlat5.xyz = (bool(u_xlatb46)) ? _ES_SunDirection.xyz : _ES_MoonDirection.xyz;
    u_xlat6.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat46 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat46 = inversesqrt(u_xlat46);
    u_xlat7.xyz = vec3(u_xlat46) * u_xlat6.xyz;
    u_xlat5.xyz = u_xlat6.xyz * vec3(u_xlat46) + u_xlat5.xyz;
    u_xlat46 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat46 = inversesqrt(u_xlat46);
    u_xlat5.xyz = vec3(u_xlat46) * u_xlat5.xyz;
    u_xlat4.x = dot(u_xlat16_4.xyz, u_xlat5.xyz);
    u_xlat18.x = _Gloss * 128.0;
    u_xlat4.x = max(u_xlat4.x, 9.99999975e-05);
    u_xlat4.x = log2(u_xlat4.x);
    u_xlat4.x = u_xlat4.x * u_xlat18.x;
    u_xlat4.x = exp2(u_xlat4.x);
    u_xlat4.x = u_xlat4.x * _SpecularIntensity;
    u_xlat4.x = max(u_xlat4.x, 0.0);
    u_xlat4.x = min(u_xlat4.x, 16.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_ES_MoonDirection.y>=9.99999975e-05);
#else
    u_xlatb18 = _ES_MoonDirection.y>=9.99999975e-05;
#endif
    u_xlat18.x = u_xlatb18 ? 1.0 : float(0.0);
    u_xlat32 = _ES_MoonDirection.y + -1.0;
    u_xlat18.x = u_xlat18.x * u_xlat32 + 1.0;
    u_xlat32 = float(1.0) / _ShoreTransparency;
    u_xlat46 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat46 = inversesqrt(u_xlat46);
    u_xlat5.xyz = vec3(u_xlat46) * vs_TEXCOORD6.xyz;
    u_xlat46 = dot(u_xlat7.xyz, u_xlat5.xyz);
    u_xlat46 = (-u_xlat46) + 1.0;
    u_xlat46 = max(u_xlat46, 9.99999975e-05);
    u_xlat46 = log2(u_xlat46);
    u_xlat5.x = u_xlat46 * _SpecularPower;
    u_xlat5.x = exp2(u_xlat5.x);
    u_xlat19.xyz = u_xlat18.xxx * _LightColor0.xyz;
    u_xlat19.xyz = u_xlat4.xxx * u_xlat19.xyz;
    u_xlat4.x = u_xlat29.x + -1.0;
    u_xlat4.x = u_xlat32 * u_xlat4.x;
    u_xlat4.x = u_xlat4.x * 0.100000001;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat19.xyz = u_xlat4.xxx * u_xlat19.xyz;
    u_xlat4.x = u_xlat29.x * u_xlat32;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat4.x = max(u_xlat4.x, 9.99999975e-05);
    u_xlat4.x = log2(u_xlat4.x);
    u_xlat4.x = u_xlat4.x * _ShoreFade;
    u_xlat4.x = exp2(u_xlat4.x);
    u_xlat6.xyz = _ShallowColor.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat6.xyz = u_xlat4.xxx * u_xlat6.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat1.xy = u_xlat1.xy / vs_TEXCOORD4.ww;
    u_xlat10_8.xyz = texture(_SceneScaledBufferBeforTransParent, u_xlat1.xy).xyz;
    u_xlat9.xyz = u_xlat6.xyz * u_xlat10_8.xyz;
    u_xlat1.x = 0.100000001 / _DeepColorDepth;
    u_xlat1.xw = u_xlat1.xw * u_xlat29.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xw = min(max(u_xlat1.xw, 0.0), 1.0);
#else
    u_xlat1.xw = clamp(u_xlat1.xw, 0.0, 1.0);
#endif
    u_xlat1.x = max(u_xlat1.x, 9.99999975e-05);
    u_xlat1.x = log2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _DeepColorFade;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat10.xyz = (-u_xlat6.xyz) * u_xlat10_8.xyz + _DeepColor.xyz;
    u_xlat10.xyz = u_xlat1.xxx * u_xlat10.xyz + u_xlat9.xyz;
    u_xlat11.xyz = u_xlat16_2.xyz * _DistortionIntensity.xyz;
    u_xlat12.x = vs_TEXCOORD8.x;
    u_xlat12.y = vs_TEXCOORD9.x;
    u_xlat12.z = vs_TEXCOORD6.x;
    u_xlat12.x = dot(u_xlat12.xyz, u_xlat11.xyz);
    u_xlat13.x = vs_TEXCOORD8.y;
    u_xlat13.y = vs_TEXCOORD9.y;
    u_xlat13.z = vs_TEXCOORD6.y;
    u_xlat12.y = dot(u_xlat13.xyz, u_xlat11.xyz);
    u_xlat13.x = vs_TEXCOORD8.z;
    u_xlat13.y = vs_TEXCOORD9.z;
    u_xlat13.z = vs_TEXCOORD6.z;
    u_xlat12.z = dot(u_xlat13.xyz, u_xlat11.xyz);
    u_xlat1.x = dot(u_xlat12.xyz, u_xlat12.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat11.xyz = u_xlat1.xxx * u_xlat12.xyz;
    u_xlat1.x = dot((-u_xlat7.xyz), u_xlat11.xyz);
    u_xlat1.x = u_xlat1.x + u_xlat1.x;
    u_xlat7.xyz = u_xlat11.xyz * (-u_xlat1.xxx) + (-u_xlat7.xyz);
    u_xlat10_0 = textureLod(_ReflectionSkyCubeMap, u_xlat7.xyz, 0.0);
    u_xlat16_2.x = u_xlat10_0.w + -1.0;
    u_xlat16_2.x = _ReflectionSkyCubeMap_HDR.w * u_xlat16_2.x + 1.0;
    u_xlat16_2.x = log2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * _ReflectionSkyCubeMap_HDR.y;
    u_xlat16_2.x = exp2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * _ReflectionSkyCubeMap_HDR.x;
    u_xlat1.x = u_xlat46 * _FresnelPower;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _ReflectionIntensity;
    u_xlat15.x = float(1.0) / _ShoreReflectionFade;
    u_xlat15.x = u_xlat15.x * u_xlat29.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat15.x = min(max(u_xlat15.x, 0.0), 1.0);
#else
    u_xlat15.x = clamp(u_xlat15.x, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat15.x * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat18.xyz = u_xlat16_2.xxx * u_xlat10_0.xyz + (-u_xlat10.xyz);
    u_xlat1.xyz = u_xlat1.xxx * u_xlat18.xyz + u_xlat10.xyz;
    u_xlat1.xyz = (-u_xlat6.xyz) * u_xlat10_8.xyz + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat4.xxx * u_xlat1.xyz + u_xlat9.xyz;
    u_xlat0.xyz = u_xlat19.xyz * u_xlat5.xxx + u_xlat1.xyz;
    u_xlat0.w = u_xlat1.w * vs_COLOR0.w;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "MSAA_INTERPOLATION" "MHY_SHADER_HIGH" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump float _MHYZBias;
uniform 	vec4 hlslcc_mtx4x4_mhyJitteredVP[4];
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
out highp vec4 vs_TEXCOORD9;
out highp vec4 vs_TEXCOORD10;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec4 u_xlat8;
float u_xlat27;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4_mhyJitteredVP[1];
    u_xlat2 = hlslcc_mtx4x4_mhyJitteredVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4_mhyJitteredVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4_mhyJitteredVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat3.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    u_xlat3.xyw = u_xlat2.xyw;
    gl_Position = u_xlat3;
    vs_COLOR0 = in_COLOR0;
    u_xlat4.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat4.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat4.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat27 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat4.xyz = vec3(u_xlat27) * u_xlat4.xyz;
    u_xlat16_5.x = u_xlat4.y * u_xlat4.y;
    u_xlat16_5.x = u_xlat4.x * u_xlat4.x + (-u_xlat16_5.x);
    u_xlat16_6 = u_xlat4.yzzx * u_xlat4.xyzz;
    u_xlat16_7.x = dot(unity_SHBr, u_xlat16_6);
    u_xlat16_7.y = dot(unity_SHBg, u_xlat16_6);
    u_xlat16_7.z = dot(unity_SHBb, u_xlat16_6);
    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_7.xyz;
    u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat4.w = 1.0;
    u_xlat16_6.x = dot(unity_SHAr, u_xlat4);
    u_xlat16_6.y = dot(unity_SHAg, u_xlat4);
    u_xlat16_6.z = dot(unity_SHAb, u_xlat4);
    u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_6.xyz;
    vs_TEXCOORD1.xyz = u_xlat16_5.xyz;
    vs_TEXCOORD1.w = 1.0;
    u_xlat27 = u_xlat3.y * _ProjectionParams.x;
    u_xlat8.w = u_xlat27 * 0.5;
    u_xlat8.xz = u_xlat3.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.z = u_xlat2.z;
    u_xlat3.xy = u_xlat8.zz + u_xlat8.xw;
    vs_TEXCOORD2 = u_xlat3;
    vs_TEXCOORD4.xyw = u_xlat3.xyw;
    u_xlat27 = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat27 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat27;
    u_xlat27 = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat27;
    u_xlat27 = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat27;
    vs_TEXCOORD3.z = (-u_xlat27);
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD3.w = 0.0;
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD5.w = 0.0;
    vs_TEXCOORD6.xyz = u_xlat4.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[1].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].www + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * in_POSITION0.yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.zzz + u_xlat1.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.www + u_xlat1.xyz;
    vs_TEXCOORD7.xyz = u_xlat1.xyz * vec3(-1.0, -1.0, 1.0);
    vs_TEXCOORD7.w = 0.0;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat27 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat1.xyz = vec3(u_xlat27) * u_xlat1.xyz;
    vs_TEXCOORD8.xyz = u_xlat1.xyz;
    vs_TEXCOORD8.w = 0.0;
    u_xlat2.xyz = u_xlat1.yzx * u_xlat4.zxy;
    u_xlat1.xyz = u_xlat4.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
    u_xlat27 = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD9.xyz = vec3(u_xlat27) * u_xlat1.xyz;
    vs_TEXCOORD9.w = 0.0;
    u_xlat27 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat27 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat27;
    vs_TEXCOORD10.w = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat27;
    vs_TEXCOORD10.xyz = u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ZBufferParams;
uniform 	mediump vec4 _LightColor0;
uniform 	float _NormalMapScale;
uniform 	float _Normal01_U_Speed;
uniform 	float _Normal01_VSpeed;
uniform 	float _NormalMapBias;
uniform 	float _Normal02_U_Speed;
uniform 	float _Normal02_V_Speed;
uniform 	float _RefractionIntensity;
uniform 	float _OpacityByDepth;
uniform 	float _SpecularIntensity;
uniform 	vec3 _ES_MoonDirection;
uniform 	vec3 _ES_SunDirection;
uniform 	float _Gloss;
uniform 	float _ShoreTransparency;
uniform 	float _SpecularPower;
uniform 	vec4 _ShallowColor;
uniform 	float _ShoreFade;
uniform 	vec4 _DeepColor;
uniform 	float _DeepColorDepth;
uniform 	float _DeepColorFade;
uniform 	vec4 _DistortionIntensity;
uniform 	float _SSRDistortion;
uniform 	float _SSRDistortion_Shore;
uniform 	float _SSRIntensity;
uniform 	float _ReflectionIntensity;
uniform 	float _FresnelPower;
uniform 	float _ShoreReflectionFade;
uniform 	mediump float _ProjectUVScale;
uniform 	vec4 _ReflectionSkyCubeMap_HDR;
uniform lowp sampler2D _Normal01;
uniform lowp sampler2D _Normal02;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _SceneScaledBufferBeforTransParent;
uniform lowp samplerCube _ReflectionSkyCubeMap;
uniform lowp sampler2D _SSRTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD8;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec3 u_xlat1;
mediump float u_xlat16_1;
lowp vec3 u_xlat10_1;
bool u_xlatb1;
vec4 u_xlat2;
lowp vec4 u_xlat10_2;
mediump vec3 u_xlat16_3;
lowp vec4 u_xlat10_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
lowp vec3 u_xlat10_7;
mediump vec3 u_xlat16_8;
vec3 u_xlat9;
vec3 u_xlat10;
vec3 u_xlat11;
float u_xlat13;
float u_xlat25;
bool u_xlatb25;
vec2 u_xlat30;
mediump float u_xlat16_36;
float u_xlat37;
float u_xlat38;
float u_xlat40;
void main()
{
    u_xlat16_0.w = -1.0;
    u_xlat1.xy = vs_TEXCOORD5.zx * vec2(vec2(_ProjectUVScale, _ProjectUVScale));
    u_xlat2.w = _Time.y * _Normal02_V_Speed + u_xlat1.x;
    u_xlat2.yz = _Time.yy * vec2(_Normal01_VSpeed, _Normal02_U_Speed) + u_xlat1.xy;
    u_xlat2.x = _Time.y * _Normal01_U_Speed + u_xlat1.y;
    u_xlat10_1.xyz = texture(_Normal01, u_xlat2.xy, _NormalMapBias).xyz;
    u_xlat10_2.xyz = texture(_Normal02, u_xlat2.zw, _NormalMapBias).xyz;
    u_xlat16_0.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_3.xyz = u_xlat10_2.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.wwz;
    u_xlat16_0.xy = u_xlat16_0.xy * vec2(_NormalMapScale);
    u_xlat16_3.xy = u_xlat16_3.xy * vec2(_NormalMapScale);
    u_xlat16_0.z = -1.0;
    u_xlat16_0.xyz = u_xlat16_0.xzy + u_xlat16_3.xzy;
    u_xlat1.xyz = u_xlat16_0.xzy * _DistortionIntensity.xyz;
    u_xlat2.x = vs_TEXCOORD8.x;
    u_xlat2.y = vs_TEXCOORD9.x;
    u_xlat2.z = vs_TEXCOORD6.x;
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat4.x = vs_TEXCOORD8.y;
    u_xlat4.y = vs_TEXCOORD9.y;
    u_xlat4.z = vs_TEXCOORD6.y;
    u_xlat2.y = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat4.x = vs_TEXCOORD8.z;
    u_xlat4.y = vs_TEXCOORD9.z;
    u_xlat4.z = vs_TEXCOORD6.z;
    u_xlat2.z = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat1.xy = u_xlat1.xy * vec2(_SSRDistortion);
    u_xlat25 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat25 = inversesqrt(u_xlat25);
    u_xlat2.xyz = vec3(u_xlat25) * u_xlat2.xyz;
    u_xlat4.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat25 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat25 = inversesqrt(u_xlat25);
    u_xlat5.xyz = vec3(u_xlat25) * u_xlat4.xyz;
    u_xlat37 = dot((-u_xlat5.xyz), u_xlat2.xyz);
    u_xlat37 = u_xlat37 + u_xlat37;
    u_xlat2.xyz = u_xlat2.xyz * (-vec3(u_xlat37)) + (-u_xlat5.xyz);
    u_xlat10_2 = textureLod(_ReflectionSkyCubeMap, u_xlat2.xyz, 0.0);
    u_xlat16_36 = u_xlat10_2.w + -1.0;
    u_xlat16_36 = _ReflectionSkyCubeMap_HDR.w * u_xlat16_36 + 1.0;
    u_xlat16_36 = log2(u_xlat16_36);
    u_xlat16_36 = u_xlat16_36 * _ReflectionSkyCubeMap_HDR.y;
    u_xlat16_36 = exp2(u_xlat16_36);
    u_xlat16_36 = u_xlat16_36 * _ReflectionSkyCubeMap_HDR.x;
    u_xlat6.xy = u_xlat16_0.xz * vec2(vec2(_RefractionIntensity, _RefractionIntensity));
    u_xlat37 = float(1.0) / vs_TEXCOORD4.w;
    u_xlat37 = u_xlat37 * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat37 = min(max(u_xlat37, 0.0), 1.0);
#else
    u_xlat37 = clamp(u_xlat37, 0.0, 1.0);
#endif
    u_xlat6.xy = vec2(u_xlat37) * u_xlat6.xy;
    u_xlat6.xy = u_xlat6.xy * vs_TEXCOORD4.ww;
    u_xlat30.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat37 = texture(_CameraDepthTexture, u_xlat30.xy).x;
    u_xlat37 = _ZBufferParams.z * u_xlat37 + _ZBufferParams.w;
    u_xlat37 = float(1.0) / u_xlat37;
    u_xlat37 = u_xlat37 + (-vs_TEXCOORD4.w);
#ifdef UNITY_ADRENO_ES3
    u_xlat37 = min(max(u_xlat37, 0.0), 1.0);
#else
    u_xlat37 = clamp(u_xlat37, 0.0, 1.0);
#endif
    u_xlat6.xy = vec2(u_xlat37) * u_xlat6.xy;
    u_xlat6.z = 0.0;
    u_xlat7.xyz = u_xlat6.xyz + vs_TEXCOORD4.xyw;
    u_xlat7.xy = u_xlat7.xy / u_xlat7.zz;
    u_xlat37 = texture(_CameraDepthTexture, u_xlat7.xy).x;
    u_xlat37 = _ZBufferParams.z * u_xlat37 + _ZBufferParams.w;
    u_xlat37 = float(1.0) / u_xlat37;
    u_xlat37 = u_xlat37 + (-vs_TEXCOORD4.w);
#ifdef UNITY_ADRENO_ES3
    u_xlat37 = min(max(u_xlat37, 0.0), 1.0);
#else
    u_xlat37 = clamp(u_xlat37, 0.0, 1.0);
#endif
    u_xlat6.xyz = vec3(u_xlat37) * u_xlat6.xyz + vs_TEXCOORD4.xyw;
    u_xlat30.xy = u_xlat6.xy / u_xlat6.zz;
    u_xlat6.xy = u_xlat6.xy / vs_TEXCOORD4.ww;
    u_xlat10_7.xyz = texture(_SceneScaledBufferBeforTransParent, u_xlat6.xy).xyz;
    u_xlat37 = texture(_CameraDepthTexture, u_xlat30.xy).x;
    u_xlat37 = _ZBufferParams.z * u_xlat37 + _ZBufferParams.w;
    u_xlat37 = float(1.0) / u_xlat37;
    u_xlat37 = u_xlat37 + (-vs_TEXCOORD4.w);
    u_xlat38 = float(1.0) / _SSRDistortion_Shore;
    u_xlat38 = u_xlat37 * u_xlat38;
#ifdef UNITY_ADRENO_ES3
    u_xlat38 = min(max(u_xlat38, 0.0), 1.0);
#else
    u_xlat38 = clamp(u_xlat38, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat1.xy * vec2(u_xlat38);
    u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD4.ww + vs_TEXCOORD4.xy;
    u_xlat1.xy = u_xlat1.xy / vs_TEXCOORD4.ww;
    u_xlat10_3 = texture(_SSRTexture, u_xlat1.xy).wxyz;
    u_xlat16_6.xyz = (-vec3(u_xlat16_36)) * u_xlat10_2.xyz + u_xlat10_3.yzw;
    u_xlat16_8.xyz = u_xlat10_2.xyz * vec3(u_xlat16_36);
    u_xlat16_3.x = u_xlat10_3.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat2.xyz = u_xlat16_6.xyz * vec3(vec3(_SSRIntensity, _SSRIntensity, _SSRIntensity));
    u_xlat2.xyz = u_xlat16_3.xxx * u_xlat2.xyz + u_xlat16_8.xyz;
    u_xlat1.x = 0.100000001 / _DeepColorDepth;
    u_xlat1.x = u_xlat1.x * u_xlat37;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.x = max(u_xlat1.x, 9.99999975e-05);
    u_xlat1.x = log2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _DeepColorFade;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat13 = float(1.0) / _ShoreTransparency;
    u_xlat38 = u_xlat13 * u_xlat37;
#ifdef UNITY_ADRENO_ES3
    u_xlat38 = min(max(u_xlat38, 0.0), 1.0);
#else
    u_xlat38 = clamp(u_xlat38, 0.0, 1.0);
#endif
    u_xlat38 = max(u_xlat38, 9.99999975e-05);
    u_xlat38 = log2(u_xlat38);
    u_xlat38 = u_xlat38 * _ShoreFade;
    u_xlat38 = exp2(u_xlat38);
    u_xlat6.xyz = _ShallowColor.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat6.xyz = vec3(u_xlat38) * u_xlat6.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat9.xyz = (-u_xlat6.xyz) * u_xlat10_7.xyz + _DeepColor.xyz;
    u_xlat10.xyz = u_xlat10_7.xyz * u_xlat6.xyz;
    u_xlat9.xyz = u_xlat1.xxx * u_xlat9.xyz + u_xlat10.xyz;
    u_xlat2.xyz = u_xlat2.xyz + (-u_xlat9.xyz);
    u_xlat1.x = float(1.0) / _ShoreReflectionFade;
    u_xlat1.x = u_xlat1.x * u_xlat37;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat40 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat40 = inversesqrt(u_xlat40);
    u_xlat11.xyz = vec3(u_xlat40) * vs_TEXCOORD6.xyz;
    u_xlat40 = dot(u_xlat5.xyz, u_xlat11.xyz);
    u_xlat40 = (-u_xlat40) + 1.0;
    u_xlat40 = max(u_xlat40, 9.99999975e-05);
    u_xlat40 = log2(u_xlat40);
    u_xlat5.x = u_xlat40 * _FresnelPower;
    u_xlat40 = u_xlat40 * _SpecularPower;
    u_xlat40 = exp2(u_xlat40);
    u_xlat5.x = exp2(u_xlat5.x);
    u_xlat5.x = u_xlat5.x * _ReflectionIntensity;
    u_xlat1.x = u_xlat1.x * u_xlat5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat2.xyz = u_xlat1.xxx * u_xlat2.xyz + u_xlat9.xyz;
    u_xlat2.xyz = (-u_xlat6.xyz) * u_xlat10_7.xyz + u_xlat2.xyz;
    u_xlat2.xyz = vec3(u_xlat38) * u_xlat2.xyz + u_xlat10.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(0.0>=_ES_MoonDirection.y);
#else
    u_xlatb1 = 0.0>=_ES_MoonDirection.y;
#endif
    u_xlat5.xyz = (bool(u_xlatb1)) ? _ES_SunDirection.xyz : _ES_MoonDirection.xyz;
    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat25) + u_xlat5.xyz;
    u_xlat1.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
    u_xlat16_0.y = 1.0;
    u_xlat16_1 = dot(u_xlat16_0.xyz, u_xlat16_0.xyz);
    u_xlat16_1 = inversesqrt(u_xlat16_1);
    u_xlat16_5.xyz = u_xlat16_0.xyz * vec3(u_xlat16_1);
    u_xlat1.x = dot(u_xlat16_5.xyz, u_xlat4.xyz);
    u_xlat1.x = max(u_xlat1.x, 9.99999975e-05);
    u_xlat1.x = log2(u_xlat1.x);
    u_xlat25 = _Gloss * 128.0;
    u_xlat1.x = u_xlat1.x * u_xlat25;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _SpecularIntensity;
    u_xlat1.x = max(u_xlat1.x, 0.0);
    u_xlat1.x = min(u_xlat1.x, 16.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb25 = !!(_ES_MoonDirection.y>=9.99999975e-05);
#else
    u_xlatb25 = _ES_MoonDirection.y>=9.99999975e-05;
#endif
    u_xlat25 = u_xlatb25 ? 1.0 : float(0.0);
    u_xlat38 = _ES_MoonDirection.y + -1.0;
    u_xlat25 = u_xlat25 * u_xlat38 + 1.0;
    u_xlat4.xyz = vec3(u_xlat25) * _LightColor0.xyz;
    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
    u_xlat1.x = u_xlat37 + -1.0;
    u_xlat1.x = u_xlat13 * u_xlat1.x;
    u_xlat1.x = u_xlat1.x * 0.100000001;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat1.xxx * u_xlat4.xyz;
    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat40) + u_xlat2.xyz;
    u_xlat1.x = 0.100000001 / _OpacityByDepth;
    u_xlat1.x = u_xlat1.x * u_xlat37;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat0.w = u_xlat1.x * vs_COLOR0.w;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MSAA_INTERPOLATION" "MHY_SHADER_HIGH" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
uniform 	vec4 hlslcc_mtx4x4_mhyJitteredVP[4];
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
out highp vec4 vs_TEXCOORD9;
out highp vec4 vs_TEXCOORD10;
float u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec4 u_xlat8;
vec3 u_xlat9;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat9.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4_mhyJitteredVP[1];
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[3] * u_xlat2.wwww + u_xlat1;
    u_xlat3.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    u_xlat3.xyw = u_xlat1.xyw;
    gl_Position = u_xlat3;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD1.w = 1.0;
    u_xlat4.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat4.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat4.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat1.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
    u_xlat16_5.x = u_xlat4.y * u_xlat4.y;
    u_xlat16_5.x = u_xlat4.x * u_xlat4.x + (-u_xlat16_5.x);
    u_xlat16_6 = u_xlat4.yzzx * u_xlat4.xyzz;
    u_xlat16_7.x = dot(unity_SHBr, u_xlat16_6);
    u_xlat16_7.y = dot(unity_SHBg, u_xlat16_6);
    u_xlat16_7.z = dot(unity_SHBb, u_xlat16_6);
    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_7.xyz;
    u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat4.w = 1.0;
    u_xlat16_6.x = dot(unity_SHAr, u_xlat4);
    u_xlat16_6.y = dot(unity_SHAg, u_xlat4);
    u_xlat16_6.z = dot(unity_SHAb, u_xlat4);
    u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_6.xyz;
    vs_TEXCOORD1.xyz = u_xlat16_5.xyz;
    u_xlat1.x = u_xlat3.y * _ProjectionParams.x;
    u_xlat8.w = u_xlat1.x * 0.5;
    u_xlat8.xz = u_xlat3.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.z = u_xlat1.z;
    u_xlat3.xy = u_xlat8.zz + u_xlat8.xw;
    vs_TEXCOORD2 = u_xlat3;
    vs_TEXCOORD4.xyw = u_xlat3.xyw;
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD3.w = 0.0;
    u_xlat1.x = u_xlat2.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat2.x + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat2.z + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat2.w + u_xlat1.x;
    vs_TEXCOORD3.z = (-u_xlat1.x);
    vs_TEXCOORD5.w = 0.0;
    vs_TEXCOORD5.xyz = u_xlat9.xyz;
    u_xlat9.xyz = (-u_xlat9.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD6.w = 0.0;
    vs_TEXCOORD6.xyz = u_xlat4.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].www + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * in_POSITION0.yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.zzz + u_xlat1.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.www + u_xlat1.xyz;
    vs_TEXCOORD7.xyz = u_xlat1.xyz * vec3(-1.0, -1.0, 1.0);
    vs_TEXCOORD7.w = 0.0;
    u_xlat1.xyz = in_TANGENT0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat0 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0 = inversesqrt(u_xlat0);
    u_xlat1.xyz = vec3(u_xlat0) * u_xlat1.xyz;
    vs_TEXCOORD8.xyz = u_xlat1.xyz;
    vs_TEXCOORD8.w = 0.0;
    u_xlat2.xyz = u_xlat1.yzx * u_xlat4.zxy;
    u_xlat1.xyz = u_xlat4.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
    u_xlat0 = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD9.xyz = vec3(u_xlat0) * u_xlat1.xyz;
    vs_TEXCOORD9.w = 0.0;
    u_xlat0 = u_xlat9.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat9.x + u_xlat0;
    vs_TEXCOORD10.w = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat9.z + u_xlat0;
    vs_TEXCOORD10.xyz = u_xlat9.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ZBufferParams;
uniform 	mediump vec4 _LightColor0;
uniform 	float _NormalMapScale;
uniform 	float _Normal01_U_Speed;
uniform 	float _Normal01_VSpeed;
uniform 	float _NormalMapBias;
uniform 	float _Normal02_U_Speed;
uniform 	float _Normal02_V_Speed;
uniform 	float _RefractionIntensity;
uniform 	float _OpacityByDepth;
uniform 	float _SpecularIntensity;
uniform 	vec3 _ES_MoonDirection;
uniform 	vec3 _ES_SunDirection;
uniform 	float _Gloss;
uniform 	float _ShoreTransparency;
uniform 	float _SpecularPower;
uniform 	vec4 _ShallowColor;
uniform 	float _ShoreFade;
uniform 	vec4 _DeepColor;
uniform 	float _DeepColorDepth;
uniform 	float _DeepColorFade;
uniform 	vec4 _DistortionIntensity;
uniform 	float _SSRDistortion;
uniform 	float _SSRDistortion_Shore;
uniform 	float _SSRIntensity;
uniform 	float _ReflectionIntensity;
uniform 	float _FresnelPower;
uniform 	float _ShoreReflectionFade;
uniform 	mediump float _ProjectUVScale;
uniform 	vec4 _ReflectionSkyCubeMap_HDR;
uniform lowp sampler2D _Normal01;
uniform lowp sampler2D _Normal02;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _SceneScaledBufferBeforTransParent;
uniform lowp samplerCube _ReflectionSkyCubeMap;
uniform lowp sampler2D _SSRTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD8;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec3 u_xlat1;
mediump float u_xlat16_1;
lowp vec3 u_xlat10_1;
bool u_xlatb1;
vec4 u_xlat2;
lowp vec4 u_xlat10_2;
mediump vec3 u_xlat16_3;
lowp vec4 u_xlat10_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
lowp vec3 u_xlat10_7;
mediump vec3 u_xlat16_8;
vec3 u_xlat9;
vec3 u_xlat10;
vec3 u_xlat11;
float u_xlat13;
float u_xlat25;
bool u_xlatb25;
vec2 u_xlat30;
mediump float u_xlat16_36;
float u_xlat37;
float u_xlat38;
float u_xlat40;
void main()
{
    u_xlat16_0.w = -1.0;
    u_xlat1.xy = vs_TEXCOORD5.zx * vec2(vec2(_ProjectUVScale, _ProjectUVScale));
    u_xlat2.w = _Time.y * _Normal02_V_Speed + u_xlat1.x;
    u_xlat2.yz = _Time.yy * vec2(_Normal01_VSpeed, _Normal02_U_Speed) + u_xlat1.xy;
    u_xlat2.x = _Time.y * _Normal01_U_Speed + u_xlat1.y;
    u_xlat10_1.xyz = texture(_Normal01, u_xlat2.xy, _NormalMapBias).xyz;
    u_xlat10_2.xyz = texture(_Normal02, u_xlat2.zw, _NormalMapBias).xyz;
    u_xlat16_0.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_3.xyz = u_xlat10_2.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.wwz;
    u_xlat16_0.xy = u_xlat16_0.xy * vec2(_NormalMapScale);
    u_xlat16_3.xy = u_xlat16_3.xy * vec2(_NormalMapScale);
    u_xlat16_0.z = -1.0;
    u_xlat16_0.xyz = u_xlat16_0.xzy + u_xlat16_3.xzy;
    u_xlat1.xyz = u_xlat16_0.xzy * _DistortionIntensity.xyz;
    u_xlat2.x = vs_TEXCOORD8.x;
    u_xlat2.y = vs_TEXCOORD9.x;
    u_xlat2.z = vs_TEXCOORD6.x;
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat4.x = vs_TEXCOORD8.y;
    u_xlat4.y = vs_TEXCOORD9.y;
    u_xlat4.z = vs_TEXCOORD6.y;
    u_xlat2.y = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat4.x = vs_TEXCOORD8.z;
    u_xlat4.y = vs_TEXCOORD9.z;
    u_xlat4.z = vs_TEXCOORD6.z;
    u_xlat2.z = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat1.xy = u_xlat1.xy * vec2(_SSRDistortion);
    u_xlat25 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat25 = inversesqrt(u_xlat25);
    u_xlat2.xyz = vec3(u_xlat25) * u_xlat2.xyz;
    u_xlat4.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat25 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat25 = inversesqrt(u_xlat25);
    u_xlat5.xyz = vec3(u_xlat25) * u_xlat4.xyz;
    u_xlat37 = dot((-u_xlat5.xyz), u_xlat2.xyz);
    u_xlat37 = u_xlat37 + u_xlat37;
    u_xlat2.xyz = u_xlat2.xyz * (-vec3(u_xlat37)) + (-u_xlat5.xyz);
    u_xlat10_2 = textureLod(_ReflectionSkyCubeMap, u_xlat2.xyz, 0.0);
    u_xlat16_36 = u_xlat10_2.w + -1.0;
    u_xlat16_36 = _ReflectionSkyCubeMap_HDR.w * u_xlat16_36 + 1.0;
    u_xlat16_36 = log2(u_xlat16_36);
    u_xlat16_36 = u_xlat16_36 * _ReflectionSkyCubeMap_HDR.y;
    u_xlat16_36 = exp2(u_xlat16_36);
    u_xlat16_36 = u_xlat16_36 * _ReflectionSkyCubeMap_HDR.x;
    u_xlat6.xy = u_xlat16_0.xz * vec2(vec2(_RefractionIntensity, _RefractionIntensity));
    u_xlat37 = float(1.0) / vs_TEXCOORD4.w;
    u_xlat37 = u_xlat37 * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat37 = min(max(u_xlat37, 0.0), 1.0);
#else
    u_xlat37 = clamp(u_xlat37, 0.0, 1.0);
#endif
    u_xlat6.xy = vec2(u_xlat37) * u_xlat6.xy;
    u_xlat6.xy = u_xlat6.xy * vs_TEXCOORD4.ww;
    u_xlat30.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat37 = texture(_CameraDepthTexture, u_xlat30.xy).x;
    u_xlat37 = _ZBufferParams.z * u_xlat37 + _ZBufferParams.w;
    u_xlat37 = float(1.0) / u_xlat37;
    u_xlat37 = u_xlat37 + (-vs_TEXCOORD4.w);
#ifdef UNITY_ADRENO_ES3
    u_xlat37 = min(max(u_xlat37, 0.0), 1.0);
#else
    u_xlat37 = clamp(u_xlat37, 0.0, 1.0);
#endif
    u_xlat6.xy = vec2(u_xlat37) * u_xlat6.xy;
    u_xlat6.z = 0.0;
    u_xlat7.xyz = u_xlat6.xyz + vs_TEXCOORD4.xyw;
    u_xlat7.xy = u_xlat7.xy / u_xlat7.zz;
    u_xlat37 = texture(_CameraDepthTexture, u_xlat7.xy).x;
    u_xlat37 = _ZBufferParams.z * u_xlat37 + _ZBufferParams.w;
    u_xlat37 = float(1.0) / u_xlat37;
    u_xlat37 = u_xlat37 + (-vs_TEXCOORD4.w);
#ifdef UNITY_ADRENO_ES3
    u_xlat37 = min(max(u_xlat37, 0.0), 1.0);
#else
    u_xlat37 = clamp(u_xlat37, 0.0, 1.0);
#endif
    u_xlat6.xyz = vec3(u_xlat37) * u_xlat6.xyz + vs_TEXCOORD4.xyw;
    u_xlat30.xy = u_xlat6.xy / u_xlat6.zz;
    u_xlat6.xy = u_xlat6.xy / vs_TEXCOORD4.ww;
    u_xlat10_7.xyz = texture(_SceneScaledBufferBeforTransParent, u_xlat6.xy).xyz;
    u_xlat37 = texture(_CameraDepthTexture, u_xlat30.xy).x;
    u_xlat37 = _ZBufferParams.z * u_xlat37 + _ZBufferParams.w;
    u_xlat37 = float(1.0) / u_xlat37;
    u_xlat37 = u_xlat37 + (-vs_TEXCOORD4.w);
    u_xlat38 = float(1.0) / _SSRDistortion_Shore;
    u_xlat38 = u_xlat37 * u_xlat38;
#ifdef UNITY_ADRENO_ES3
    u_xlat38 = min(max(u_xlat38, 0.0), 1.0);
#else
    u_xlat38 = clamp(u_xlat38, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat1.xy * vec2(u_xlat38);
    u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD4.ww + vs_TEXCOORD4.xy;
    u_xlat1.xy = u_xlat1.xy / vs_TEXCOORD4.ww;
    u_xlat10_3 = texture(_SSRTexture, u_xlat1.xy).wxyz;
    u_xlat16_6.xyz = (-vec3(u_xlat16_36)) * u_xlat10_2.xyz + u_xlat10_3.yzw;
    u_xlat16_8.xyz = u_xlat10_2.xyz * vec3(u_xlat16_36);
    u_xlat16_3.x = u_xlat10_3.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat2.xyz = u_xlat16_6.xyz * vec3(vec3(_SSRIntensity, _SSRIntensity, _SSRIntensity));
    u_xlat2.xyz = u_xlat16_3.xxx * u_xlat2.xyz + u_xlat16_8.xyz;
    u_xlat1.x = 0.100000001 / _DeepColorDepth;
    u_xlat1.x = u_xlat1.x * u_xlat37;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.x = max(u_xlat1.x, 9.99999975e-05);
    u_xlat1.x = log2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _DeepColorFade;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat13 = float(1.0) / _ShoreTransparency;
    u_xlat38 = u_xlat13 * u_xlat37;
#ifdef UNITY_ADRENO_ES3
    u_xlat38 = min(max(u_xlat38, 0.0), 1.0);
#else
    u_xlat38 = clamp(u_xlat38, 0.0, 1.0);
#endif
    u_xlat38 = max(u_xlat38, 9.99999975e-05);
    u_xlat38 = log2(u_xlat38);
    u_xlat38 = u_xlat38 * _ShoreFade;
    u_xlat38 = exp2(u_xlat38);
    u_xlat6.xyz = _ShallowColor.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat6.xyz = vec3(u_xlat38) * u_xlat6.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat9.xyz = (-u_xlat6.xyz) * u_xlat10_7.xyz + _DeepColor.xyz;
    u_xlat10.xyz = u_xlat10_7.xyz * u_xlat6.xyz;
    u_xlat9.xyz = u_xlat1.xxx * u_xlat9.xyz + u_xlat10.xyz;
    u_xlat2.xyz = u_xlat2.xyz + (-u_xlat9.xyz);
    u_xlat1.x = float(1.0) / _ShoreReflectionFade;
    u_xlat1.x = u_xlat1.x * u_xlat37;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat40 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat40 = inversesqrt(u_xlat40);
    u_xlat11.xyz = vec3(u_xlat40) * vs_TEXCOORD6.xyz;
    u_xlat40 = dot(u_xlat5.xyz, u_xlat11.xyz);
    u_xlat40 = (-u_xlat40) + 1.0;
    u_xlat40 = max(u_xlat40, 9.99999975e-05);
    u_xlat40 = log2(u_xlat40);
    u_xlat5.x = u_xlat40 * _FresnelPower;
    u_xlat40 = u_xlat40 * _SpecularPower;
    u_xlat40 = exp2(u_xlat40);
    u_xlat5.x = exp2(u_xlat5.x);
    u_xlat5.x = u_xlat5.x * _ReflectionIntensity;
    u_xlat1.x = u_xlat1.x * u_xlat5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat2.xyz = u_xlat1.xxx * u_xlat2.xyz + u_xlat9.xyz;
    u_xlat2.xyz = (-u_xlat6.xyz) * u_xlat10_7.xyz + u_xlat2.xyz;
    u_xlat2.xyz = vec3(u_xlat38) * u_xlat2.xyz + u_xlat10.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(0.0>=_ES_MoonDirection.y);
#else
    u_xlatb1 = 0.0>=_ES_MoonDirection.y;
#endif
    u_xlat5.xyz = (bool(u_xlatb1)) ? _ES_SunDirection.xyz : _ES_MoonDirection.xyz;
    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat25) + u_xlat5.xyz;
    u_xlat1.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
    u_xlat16_0.y = 1.0;
    u_xlat16_1 = dot(u_xlat16_0.xyz, u_xlat16_0.xyz);
    u_xlat16_1 = inversesqrt(u_xlat16_1);
    u_xlat16_5.xyz = u_xlat16_0.xyz * vec3(u_xlat16_1);
    u_xlat1.x = dot(u_xlat16_5.xyz, u_xlat4.xyz);
    u_xlat1.x = max(u_xlat1.x, 9.99999975e-05);
    u_xlat1.x = log2(u_xlat1.x);
    u_xlat25 = _Gloss * 128.0;
    u_xlat1.x = u_xlat1.x * u_xlat25;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _SpecularIntensity;
    u_xlat1.x = max(u_xlat1.x, 0.0);
    u_xlat1.x = min(u_xlat1.x, 16.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb25 = !!(_ES_MoonDirection.y>=9.99999975e-05);
#else
    u_xlatb25 = _ES_MoonDirection.y>=9.99999975e-05;
#endif
    u_xlat25 = u_xlatb25 ? 1.0 : float(0.0);
    u_xlat38 = _ES_MoonDirection.y + -1.0;
    u_xlat25 = u_xlat25 * u_xlat38 + 1.0;
    u_xlat4.xyz = vec3(u_xlat25) * _LightColor0.xyz;
    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
    u_xlat1.x = u_xlat37 + -1.0;
    u_xlat1.x = u_xlat13 * u_xlat1.x;
    u_xlat1.x = u_xlat1.x * 0.100000001;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat1.xxx * u_xlat4.xyz;
    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat40) + u_xlat2.xyz;
    u_xlat1.x = 0.100000001 / _OpacityByDepth;
    u_xlat1.x = u_xlat1.x * u_xlat37;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat0.w = u_xlat1.x * vs_COLOR0.w;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "MSAA_INTERPOLATION" "MHY_SHADER_MIDDLE" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump float _MHYZBias;
uniform 	vec4 hlslcc_mtx4x4_mhyJitteredVP[4];
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
out highp vec4 vs_TEXCOORD9;
out highp vec4 vs_TEXCOORD10;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec4 u_xlat8;
float u_xlat27;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4_mhyJitteredVP[1];
    u_xlat2 = hlslcc_mtx4x4_mhyJitteredVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4_mhyJitteredVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4_mhyJitteredVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat3.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    u_xlat3.xyw = u_xlat2.xyw;
    gl_Position = u_xlat3;
    vs_COLOR0 = in_COLOR0;
    u_xlat4.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat4.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat4.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat27 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat4.xyz = vec3(u_xlat27) * u_xlat4.xyz;
    u_xlat16_5.x = u_xlat4.y * u_xlat4.y;
    u_xlat16_5.x = u_xlat4.x * u_xlat4.x + (-u_xlat16_5.x);
    u_xlat16_6 = u_xlat4.yzzx * u_xlat4.xyzz;
    u_xlat16_7.x = dot(unity_SHBr, u_xlat16_6);
    u_xlat16_7.y = dot(unity_SHBg, u_xlat16_6);
    u_xlat16_7.z = dot(unity_SHBb, u_xlat16_6);
    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_7.xyz;
    u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat4.w = 1.0;
    u_xlat16_6.x = dot(unity_SHAr, u_xlat4);
    u_xlat16_6.y = dot(unity_SHAg, u_xlat4);
    u_xlat16_6.z = dot(unity_SHAb, u_xlat4);
    u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_6.xyz;
    vs_TEXCOORD1.xyz = u_xlat16_5.xyz;
    vs_TEXCOORD1.w = 1.0;
    u_xlat27 = u_xlat3.y * _ProjectionParams.x;
    u_xlat8.w = u_xlat27 * 0.5;
    u_xlat8.xz = u_xlat3.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.z = u_xlat2.z;
    u_xlat3.xy = u_xlat8.zz + u_xlat8.xw;
    vs_TEXCOORD2 = u_xlat3;
    vs_TEXCOORD4.xyw = u_xlat3.xyw;
    u_xlat27 = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat27 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat27;
    u_xlat27 = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat27;
    u_xlat27 = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat27;
    vs_TEXCOORD3.z = (-u_xlat27);
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD3.w = 0.0;
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD5.w = 0.0;
    vs_TEXCOORD6.xyz = u_xlat4.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[1].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].www + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * in_POSITION0.yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.zzz + u_xlat1.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.www + u_xlat1.xyz;
    vs_TEXCOORD7.xyz = u_xlat1.xyz * vec3(-1.0, -1.0, 1.0);
    vs_TEXCOORD7.w = 0.0;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat27 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat1.xyz = vec3(u_xlat27) * u_xlat1.xyz;
    vs_TEXCOORD8.xyz = u_xlat1.xyz;
    vs_TEXCOORD8.w = 0.0;
    u_xlat2.xyz = u_xlat1.yzx * u_xlat4.zxy;
    u_xlat1.xyz = u_xlat4.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
    u_xlat27 = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD9.xyz = vec3(u_xlat27) * u_xlat1.xyz;
    vs_TEXCOORD9.w = 0.0;
    u_xlat27 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat27 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat27;
    vs_TEXCOORD10.w = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat27;
    vs_TEXCOORD10.xyz = u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ZBufferParams;
uniform 	mediump vec4 _LightColor0;
uniform 	float _NormalMapScale;
uniform 	float _Normal01_U_Speed;
uniform 	float _Normal01_VSpeed;
uniform 	float _NormalMapBias;
uniform 	float _Normal02_U_Speed;
uniform 	float _Normal02_V_Speed;
uniform 	float _RefractionIntensity;
uniform 	float _OpacityByDepth;
uniform 	float _SpecularIntensity;
uniform 	vec3 _ES_MoonDirection;
uniform 	vec3 _ES_SunDirection;
uniform 	float _Gloss;
uniform 	float _ShoreTransparency;
uniform 	float _SpecularPower;
uniform 	vec4 _ShallowColor;
uniform 	float _ShoreFade;
uniform 	vec4 _DeepColor;
uniform 	float _DeepColorDepth;
uniform 	float _DeepColorFade;
uniform 	vec4 _DistortionIntensity;
uniform 	float _SSRDistortion;
uniform 	float _SSRDistortion_Shore;
uniform 	float _SSRIntensity;
uniform 	float _ReflectionIntensity;
uniform 	float _FresnelPower;
uniform 	float _ShoreReflectionFade;
uniform 	mediump float _ProjectUVScale;
uniform 	vec4 _ReflectionSkyCubeMap_HDR;
uniform lowp sampler2D _Normal01;
uniform lowp sampler2D _Normal02;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _SceneScaledBufferBeforTransParent;
uniform lowp samplerCube _ReflectionSkyCubeMap;
uniform lowp sampler2D _SSRTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD8;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec3 u_xlat1;
mediump float u_xlat16_1;
lowp vec3 u_xlat10_1;
bool u_xlatb1;
vec4 u_xlat2;
lowp vec4 u_xlat10_2;
mediump vec3 u_xlat16_3;
lowp vec4 u_xlat10_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
lowp vec3 u_xlat10_7;
mediump vec3 u_xlat16_8;
vec3 u_xlat9;
vec3 u_xlat10;
vec3 u_xlat11;
float u_xlat13;
float u_xlat25;
bool u_xlatb25;
vec2 u_xlat30;
mediump float u_xlat16_36;
float u_xlat37;
float u_xlat38;
float u_xlat40;
void main()
{
    u_xlat16_0.w = -1.0;
    u_xlat1.xy = vs_TEXCOORD5.zx * vec2(vec2(_ProjectUVScale, _ProjectUVScale));
    u_xlat2.w = _Time.y * _Normal02_V_Speed + u_xlat1.x;
    u_xlat2.yz = _Time.yy * vec2(_Normal01_VSpeed, _Normal02_U_Speed) + u_xlat1.xy;
    u_xlat2.x = _Time.y * _Normal01_U_Speed + u_xlat1.y;
    u_xlat10_1.xyz = texture(_Normal01, u_xlat2.xy, _NormalMapBias).xyz;
    u_xlat10_2.xyz = texture(_Normal02, u_xlat2.zw, _NormalMapBias).xyz;
    u_xlat16_0.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_3.xyz = u_xlat10_2.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.wwz;
    u_xlat16_0.xy = u_xlat16_0.xy * vec2(_NormalMapScale);
    u_xlat16_3.xy = u_xlat16_3.xy * vec2(_NormalMapScale);
    u_xlat16_0.z = -1.0;
    u_xlat16_0.xyz = u_xlat16_0.xzy + u_xlat16_3.xzy;
    u_xlat1.xyz = u_xlat16_0.xzy * _DistortionIntensity.xyz;
    u_xlat2.x = vs_TEXCOORD8.x;
    u_xlat2.y = vs_TEXCOORD9.x;
    u_xlat2.z = vs_TEXCOORD6.x;
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat4.x = vs_TEXCOORD8.y;
    u_xlat4.y = vs_TEXCOORD9.y;
    u_xlat4.z = vs_TEXCOORD6.y;
    u_xlat2.y = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat4.x = vs_TEXCOORD8.z;
    u_xlat4.y = vs_TEXCOORD9.z;
    u_xlat4.z = vs_TEXCOORD6.z;
    u_xlat2.z = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat1.xy = u_xlat1.xy * vec2(_SSRDistortion);
    u_xlat25 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat25 = inversesqrt(u_xlat25);
    u_xlat2.xyz = vec3(u_xlat25) * u_xlat2.xyz;
    u_xlat4.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat25 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat25 = inversesqrt(u_xlat25);
    u_xlat5.xyz = vec3(u_xlat25) * u_xlat4.xyz;
    u_xlat37 = dot((-u_xlat5.xyz), u_xlat2.xyz);
    u_xlat37 = u_xlat37 + u_xlat37;
    u_xlat2.xyz = u_xlat2.xyz * (-vec3(u_xlat37)) + (-u_xlat5.xyz);
    u_xlat10_2 = textureLod(_ReflectionSkyCubeMap, u_xlat2.xyz, 0.0);
    u_xlat16_36 = u_xlat10_2.w + -1.0;
    u_xlat16_36 = _ReflectionSkyCubeMap_HDR.w * u_xlat16_36 + 1.0;
    u_xlat16_36 = log2(u_xlat16_36);
    u_xlat16_36 = u_xlat16_36 * _ReflectionSkyCubeMap_HDR.y;
    u_xlat16_36 = exp2(u_xlat16_36);
    u_xlat16_36 = u_xlat16_36 * _ReflectionSkyCubeMap_HDR.x;
    u_xlat6.xy = u_xlat16_0.xz * vec2(vec2(_RefractionIntensity, _RefractionIntensity));
    u_xlat37 = float(1.0) / vs_TEXCOORD4.w;
    u_xlat37 = u_xlat37 * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat37 = min(max(u_xlat37, 0.0), 1.0);
#else
    u_xlat37 = clamp(u_xlat37, 0.0, 1.0);
#endif
    u_xlat6.xy = vec2(u_xlat37) * u_xlat6.xy;
    u_xlat6.xy = u_xlat6.xy * vs_TEXCOORD4.ww;
    u_xlat30.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat37 = texture(_CameraDepthTexture, u_xlat30.xy).x;
    u_xlat37 = _ZBufferParams.z * u_xlat37 + _ZBufferParams.w;
    u_xlat37 = float(1.0) / u_xlat37;
    u_xlat37 = u_xlat37 + (-vs_TEXCOORD4.w);
#ifdef UNITY_ADRENO_ES3
    u_xlat37 = min(max(u_xlat37, 0.0), 1.0);
#else
    u_xlat37 = clamp(u_xlat37, 0.0, 1.0);
#endif
    u_xlat6.xy = vec2(u_xlat37) * u_xlat6.xy;
    u_xlat6.z = 0.0;
    u_xlat7.xyz = u_xlat6.xyz + vs_TEXCOORD4.xyw;
    u_xlat7.xy = u_xlat7.xy / u_xlat7.zz;
    u_xlat37 = texture(_CameraDepthTexture, u_xlat7.xy).x;
    u_xlat37 = _ZBufferParams.z * u_xlat37 + _ZBufferParams.w;
    u_xlat37 = float(1.0) / u_xlat37;
    u_xlat37 = u_xlat37 + (-vs_TEXCOORD4.w);
#ifdef UNITY_ADRENO_ES3
    u_xlat37 = min(max(u_xlat37, 0.0), 1.0);
#else
    u_xlat37 = clamp(u_xlat37, 0.0, 1.0);
#endif
    u_xlat6.xyz = vec3(u_xlat37) * u_xlat6.xyz + vs_TEXCOORD4.xyw;
    u_xlat30.xy = u_xlat6.xy / u_xlat6.zz;
    u_xlat6.xy = u_xlat6.xy / vs_TEXCOORD4.ww;
    u_xlat10_7.xyz = texture(_SceneScaledBufferBeforTransParent, u_xlat6.xy).xyz;
    u_xlat37 = texture(_CameraDepthTexture, u_xlat30.xy).x;
    u_xlat37 = _ZBufferParams.z * u_xlat37 + _ZBufferParams.w;
    u_xlat37 = float(1.0) / u_xlat37;
    u_xlat37 = u_xlat37 + (-vs_TEXCOORD4.w);
    u_xlat38 = float(1.0) / _SSRDistortion_Shore;
    u_xlat38 = u_xlat37 * u_xlat38;
#ifdef UNITY_ADRENO_ES3
    u_xlat38 = min(max(u_xlat38, 0.0), 1.0);
#else
    u_xlat38 = clamp(u_xlat38, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat1.xy * vec2(u_xlat38);
    u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD4.ww + vs_TEXCOORD4.xy;
    u_xlat1.xy = u_xlat1.xy / vs_TEXCOORD4.ww;
    u_xlat10_3 = texture(_SSRTexture, u_xlat1.xy).wxyz;
    u_xlat16_6.xyz = (-vec3(u_xlat16_36)) * u_xlat10_2.xyz + u_xlat10_3.yzw;
    u_xlat16_8.xyz = u_xlat10_2.xyz * vec3(u_xlat16_36);
    u_xlat16_3.x = u_xlat10_3.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat2.xyz = u_xlat16_6.xyz * vec3(vec3(_SSRIntensity, _SSRIntensity, _SSRIntensity));
    u_xlat2.xyz = u_xlat16_3.xxx * u_xlat2.xyz + u_xlat16_8.xyz;
    u_xlat1.x = 0.100000001 / _DeepColorDepth;
    u_xlat1.x = u_xlat1.x * u_xlat37;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.x = max(u_xlat1.x, 9.99999975e-05);
    u_xlat1.x = log2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _DeepColorFade;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat13 = float(1.0) / _ShoreTransparency;
    u_xlat38 = u_xlat13 * u_xlat37;
#ifdef UNITY_ADRENO_ES3
    u_xlat38 = min(max(u_xlat38, 0.0), 1.0);
#else
    u_xlat38 = clamp(u_xlat38, 0.0, 1.0);
#endif
    u_xlat38 = max(u_xlat38, 9.99999975e-05);
    u_xlat38 = log2(u_xlat38);
    u_xlat38 = u_xlat38 * _ShoreFade;
    u_xlat38 = exp2(u_xlat38);
    u_xlat6.xyz = _ShallowColor.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat6.xyz = vec3(u_xlat38) * u_xlat6.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat9.xyz = (-u_xlat6.xyz) * u_xlat10_7.xyz + _DeepColor.xyz;
    u_xlat10.xyz = u_xlat10_7.xyz * u_xlat6.xyz;
    u_xlat9.xyz = u_xlat1.xxx * u_xlat9.xyz + u_xlat10.xyz;
    u_xlat2.xyz = u_xlat2.xyz + (-u_xlat9.xyz);
    u_xlat1.x = float(1.0) / _ShoreReflectionFade;
    u_xlat1.x = u_xlat1.x * u_xlat37;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat40 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat40 = inversesqrt(u_xlat40);
    u_xlat11.xyz = vec3(u_xlat40) * vs_TEXCOORD6.xyz;
    u_xlat40 = dot(u_xlat5.xyz, u_xlat11.xyz);
    u_xlat40 = (-u_xlat40) + 1.0;
    u_xlat40 = max(u_xlat40, 9.99999975e-05);
    u_xlat40 = log2(u_xlat40);
    u_xlat5.x = u_xlat40 * _FresnelPower;
    u_xlat40 = u_xlat40 * _SpecularPower;
    u_xlat40 = exp2(u_xlat40);
    u_xlat5.x = exp2(u_xlat5.x);
    u_xlat5.x = u_xlat5.x * _ReflectionIntensity;
    u_xlat1.x = u_xlat1.x * u_xlat5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat2.xyz = u_xlat1.xxx * u_xlat2.xyz + u_xlat9.xyz;
    u_xlat2.xyz = (-u_xlat6.xyz) * u_xlat10_7.xyz + u_xlat2.xyz;
    u_xlat2.xyz = vec3(u_xlat38) * u_xlat2.xyz + u_xlat10.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(0.0>=_ES_MoonDirection.y);
#else
    u_xlatb1 = 0.0>=_ES_MoonDirection.y;
#endif
    u_xlat5.xyz = (bool(u_xlatb1)) ? _ES_SunDirection.xyz : _ES_MoonDirection.xyz;
    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat25) + u_xlat5.xyz;
    u_xlat1.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
    u_xlat16_0.y = 1.0;
    u_xlat16_1 = dot(u_xlat16_0.xyz, u_xlat16_0.xyz);
    u_xlat16_1 = inversesqrt(u_xlat16_1);
    u_xlat16_5.xyz = u_xlat16_0.xyz * vec3(u_xlat16_1);
    u_xlat1.x = dot(u_xlat16_5.xyz, u_xlat4.xyz);
    u_xlat1.x = max(u_xlat1.x, 9.99999975e-05);
    u_xlat1.x = log2(u_xlat1.x);
    u_xlat25 = _Gloss * 128.0;
    u_xlat1.x = u_xlat1.x * u_xlat25;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _SpecularIntensity;
    u_xlat1.x = max(u_xlat1.x, 0.0);
    u_xlat1.x = min(u_xlat1.x, 16.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb25 = !!(_ES_MoonDirection.y>=9.99999975e-05);
#else
    u_xlatb25 = _ES_MoonDirection.y>=9.99999975e-05;
#endif
    u_xlat25 = u_xlatb25 ? 1.0 : float(0.0);
    u_xlat38 = _ES_MoonDirection.y + -1.0;
    u_xlat25 = u_xlat25 * u_xlat38 + 1.0;
    u_xlat4.xyz = vec3(u_xlat25) * _LightColor0.xyz;
    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
    u_xlat1.x = u_xlat37 + -1.0;
    u_xlat1.x = u_xlat13 * u_xlat1.x;
    u_xlat1.x = u_xlat1.x * 0.100000001;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat1.xxx * u_xlat4.xyz;
    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat40) + u_xlat2.xyz;
    u_xlat1.x = 0.100000001 / _OpacityByDepth;
    u_xlat1.x = u_xlat1.x * u_xlat37;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat0.w = u_xlat1.x * vs_COLOR0.w;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MSAA_INTERPOLATION" "MHY_SHADER_MIDDLE" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
uniform 	vec4 hlslcc_mtx4x4_mhyJitteredVP[4];
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
out highp vec4 vs_TEXCOORD9;
out highp vec4 vs_TEXCOORD10;
float u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec4 u_xlat8;
vec3 u_xlat9;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat9.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4_mhyJitteredVP[1];
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[3] * u_xlat2.wwww + u_xlat1;
    u_xlat3.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    u_xlat3.xyw = u_xlat1.xyw;
    gl_Position = u_xlat3;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD1.w = 1.0;
    u_xlat4.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat4.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat4.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat1.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
    u_xlat16_5.x = u_xlat4.y * u_xlat4.y;
    u_xlat16_5.x = u_xlat4.x * u_xlat4.x + (-u_xlat16_5.x);
    u_xlat16_6 = u_xlat4.yzzx * u_xlat4.xyzz;
    u_xlat16_7.x = dot(unity_SHBr, u_xlat16_6);
    u_xlat16_7.y = dot(unity_SHBg, u_xlat16_6);
    u_xlat16_7.z = dot(unity_SHBb, u_xlat16_6);
    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_7.xyz;
    u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat4.w = 1.0;
    u_xlat16_6.x = dot(unity_SHAr, u_xlat4);
    u_xlat16_6.y = dot(unity_SHAg, u_xlat4);
    u_xlat16_6.z = dot(unity_SHAb, u_xlat4);
    u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_6.xyz;
    vs_TEXCOORD1.xyz = u_xlat16_5.xyz;
    u_xlat1.x = u_xlat3.y * _ProjectionParams.x;
    u_xlat8.w = u_xlat1.x * 0.5;
    u_xlat8.xz = u_xlat3.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.z = u_xlat1.z;
    u_xlat3.xy = u_xlat8.zz + u_xlat8.xw;
    vs_TEXCOORD2 = u_xlat3;
    vs_TEXCOORD4.xyw = u_xlat3.xyw;
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD3.w = 0.0;
    u_xlat1.x = u_xlat2.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat2.x + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat2.z + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat2.w + u_xlat1.x;
    vs_TEXCOORD3.z = (-u_xlat1.x);
    vs_TEXCOORD5.w = 0.0;
    vs_TEXCOORD5.xyz = u_xlat9.xyz;
    u_xlat9.xyz = (-u_xlat9.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD6.w = 0.0;
    vs_TEXCOORD6.xyz = u_xlat4.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].www + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * in_POSITION0.yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.zzz + u_xlat1.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.www + u_xlat1.xyz;
    vs_TEXCOORD7.xyz = u_xlat1.xyz * vec3(-1.0, -1.0, 1.0);
    vs_TEXCOORD7.w = 0.0;
    u_xlat1.xyz = in_TANGENT0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat0 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0 = inversesqrt(u_xlat0);
    u_xlat1.xyz = vec3(u_xlat0) * u_xlat1.xyz;
    vs_TEXCOORD8.xyz = u_xlat1.xyz;
    vs_TEXCOORD8.w = 0.0;
    u_xlat2.xyz = u_xlat1.yzx * u_xlat4.zxy;
    u_xlat1.xyz = u_xlat4.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
    u_xlat0 = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD9.xyz = vec3(u_xlat0) * u_xlat1.xyz;
    vs_TEXCOORD9.w = 0.0;
    u_xlat0 = u_xlat9.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat9.x + u_xlat0;
    vs_TEXCOORD10.w = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat9.z + u_xlat0;
    vs_TEXCOORD10.xyz = u_xlat9.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ZBufferParams;
uniform 	mediump vec4 _LightColor0;
uniform 	float _NormalMapScale;
uniform 	float _Normal01_U_Speed;
uniform 	float _Normal01_VSpeed;
uniform 	float _NormalMapBias;
uniform 	float _Normal02_U_Speed;
uniform 	float _Normal02_V_Speed;
uniform 	float _RefractionIntensity;
uniform 	float _OpacityByDepth;
uniform 	float _SpecularIntensity;
uniform 	vec3 _ES_MoonDirection;
uniform 	vec3 _ES_SunDirection;
uniform 	float _Gloss;
uniform 	float _ShoreTransparency;
uniform 	float _SpecularPower;
uniform 	vec4 _ShallowColor;
uniform 	float _ShoreFade;
uniform 	vec4 _DeepColor;
uniform 	float _DeepColorDepth;
uniform 	float _DeepColorFade;
uniform 	vec4 _DistortionIntensity;
uniform 	float _SSRDistortion;
uniform 	float _SSRDistortion_Shore;
uniform 	float _SSRIntensity;
uniform 	float _ReflectionIntensity;
uniform 	float _FresnelPower;
uniform 	float _ShoreReflectionFade;
uniform 	mediump float _ProjectUVScale;
uniform 	vec4 _ReflectionSkyCubeMap_HDR;
uniform lowp sampler2D _Normal01;
uniform lowp sampler2D _Normal02;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _SceneScaledBufferBeforTransParent;
uniform lowp samplerCube _ReflectionSkyCubeMap;
uniform lowp sampler2D _SSRTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD8;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec3 u_xlat1;
mediump float u_xlat16_1;
lowp vec3 u_xlat10_1;
bool u_xlatb1;
vec4 u_xlat2;
lowp vec4 u_xlat10_2;
mediump vec3 u_xlat16_3;
lowp vec4 u_xlat10_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
lowp vec3 u_xlat10_7;
mediump vec3 u_xlat16_8;
vec3 u_xlat9;
vec3 u_xlat10;
vec3 u_xlat11;
float u_xlat13;
float u_xlat25;
bool u_xlatb25;
vec2 u_xlat30;
mediump float u_xlat16_36;
float u_xlat37;
float u_xlat38;
float u_xlat40;
void main()
{
    u_xlat16_0.w = -1.0;
    u_xlat1.xy = vs_TEXCOORD5.zx * vec2(vec2(_ProjectUVScale, _ProjectUVScale));
    u_xlat2.w = _Time.y * _Normal02_V_Speed + u_xlat1.x;
    u_xlat2.yz = _Time.yy * vec2(_Normal01_VSpeed, _Normal02_U_Speed) + u_xlat1.xy;
    u_xlat2.x = _Time.y * _Normal01_U_Speed + u_xlat1.y;
    u_xlat10_1.xyz = texture(_Normal01, u_xlat2.xy, _NormalMapBias).xyz;
    u_xlat10_2.xyz = texture(_Normal02, u_xlat2.zw, _NormalMapBias).xyz;
    u_xlat16_0.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_3.xyz = u_xlat10_2.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.wwz;
    u_xlat16_0.xy = u_xlat16_0.xy * vec2(_NormalMapScale);
    u_xlat16_3.xy = u_xlat16_3.xy * vec2(_NormalMapScale);
    u_xlat16_0.z = -1.0;
    u_xlat16_0.xyz = u_xlat16_0.xzy + u_xlat16_3.xzy;
    u_xlat1.xyz = u_xlat16_0.xzy * _DistortionIntensity.xyz;
    u_xlat2.x = vs_TEXCOORD8.x;
    u_xlat2.y = vs_TEXCOORD9.x;
    u_xlat2.z = vs_TEXCOORD6.x;
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat4.x = vs_TEXCOORD8.y;
    u_xlat4.y = vs_TEXCOORD9.y;
    u_xlat4.z = vs_TEXCOORD6.y;
    u_xlat2.y = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat4.x = vs_TEXCOORD8.z;
    u_xlat4.y = vs_TEXCOORD9.z;
    u_xlat4.z = vs_TEXCOORD6.z;
    u_xlat2.z = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat1.xy = u_xlat1.xy * vec2(_SSRDistortion);
    u_xlat25 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat25 = inversesqrt(u_xlat25);
    u_xlat2.xyz = vec3(u_xlat25) * u_xlat2.xyz;
    u_xlat4.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat25 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat25 = inversesqrt(u_xlat25);
    u_xlat5.xyz = vec3(u_xlat25) * u_xlat4.xyz;
    u_xlat37 = dot((-u_xlat5.xyz), u_xlat2.xyz);
    u_xlat37 = u_xlat37 + u_xlat37;
    u_xlat2.xyz = u_xlat2.xyz * (-vec3(u_xlat37)) + (-u_xlat5.xyz);
    u_xlat10_2 = textureLod(_ReflectionSkyCubeMap, u_xlat2.xyz, 0.0);
    u_xlat16_36 = u_xlat10_2.w + -1.0;
    u_xlat16_36 = _ReflectionSkyCubeMap_HDR.w * u_xlat16_36 + 1.0;
    u_xlat16_36 = log2(u_xlat16_36);
    u_xlat16_36 = u_xlat16_36 * _ReflectionSkyCubeMap_HDR.y;
    u_xlat16_36 = exp2(u_xlat16_36);
    u_xlat16_36 = u_xlat16_36 * _ReflectionSkyCubeMap_HDR.x;
    u_xlat6.xy = u_xlat16_0.xz * vec2(vec2(_RefractionIntensity, _RefractionIntensity));
    u_xlat37 = float(1.0) / vs_TEXCOORD4.w;
    u_xlat37 = u_xlat37 * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat37 = min(max(u_xlat37, 0.0), 1.0);
#else
    u_xlat37 = clamp(u_xlat37, 0.0, 1.0);
#endif
    u_xlat6.xy = vec2(u_xlat37) * u_xlat6.xy;
    u_xlat6.xy = u_xlat6.xy * vs_TEXCOORD4.ww;
    u_xlat30.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat37 = texture(_CameraDepthTexture, u_xlat30.xy).x;
    u_xlat37 = _ZBufferParams.z * u_xlat37 + _ZBufferParams.w;
    u_xlat37 = float(1.0) / u_xlat37;
    u_xlat37 = u_xlat37 + (-vs_TEXCOORD4.w);
#ifdef UNITY_ADRENO_ES3
    u_xlat37 = min(max(u_xlat37, 0.0), 1.0);
#else
    u_xlat37 = clamp(u_xlat37, 0.0, 1.0);
#endif
    u_xlat6.xy = vec2(u_xlat37) * u_xlat6.xy;
    u_xlat6.z = 0.0;
    u_xlat7.xyz = u_xlat6.xyz + vs_TEXCOORD4.xyw;
    u_xlat7.xy = u_xlat7.xy / u_xlat7.zz;
    u_xlat37 = texture(_CameraDepthTexture, u_xlat7.xy).x;
    u_xlat37 = _ZBufferParams.z * u_xlat37 + _ZBufferParams.w;
    u_xlat37 = float(1.0) / u_xlat37;
    u_xlat37 = u_xlat37 + (-vs_TEXCOORD4.w);
#ifdef UNITY_ADRENO_ES3
    u_xlat37 = min(max(u_xlat37, 0.0), 1.0);
#else
    u_xlat37 = clamp(u_xlat37, 0.0, 1.0);
#endif
    u_xlat6.xyz = vec3(u_xlat37) * u_xlat6.xyz + vs_TEXCOORD4.xyw;
    u_xlat30.xy = u_xlat6.xy / u_xlat6.zz;
    u_xlat6.xy = u_xlat6.xy / vs_TEXCOORD4.ww;
    u_xlat10_7.xyz = texture(_SceneScaledBufferBeforTransParent, u_xlat6.xy).xyz;
    u_xlat37 = texture(_CameraDepthTexture, u_xlat30.xy).x;
    u_xlat37 = _ZBufferParams.z * u_xlat37 + _ZBufferParams.w;
    u_xlat37 = float(1.0) / u_xlat37;
    u_xlat37 = u_xlat37 + (-vs_TEXCOORD4.w);
    u_xlat38 = float(1.0) / _SSRDistortion_Shore;
    u_xlat38 = u_xlat37 * u_xlat38;
#ifdef UNITY_ADRENO_ES3
    u_xlat38 = min(max(u_xlat38, 0.0), 1.0);
#else
    u_xlat38 = clamp(u_xlat38, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat1.xy * vec2(u_xlat38);
    u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD4.ww + vs_TEXCOORD4.xy;
    u_xlat1.xy = u_xlat1.xy / vs_TEXCOORD4.ww;
    u_xlat10_3 = texture(_SSRTexture, u_xlat1.xy).wxyz;
    u_xlat16_6.xyz = (-vec3(u_xlat16_36)) * u_xlat10_2.xyz + u_xlat10_3.yzw;
    u_xlat16_8.xyz = u_xlat10_2.xyz * vec3(u_xlat16_36);
    u_xlat16_3.x = u_xlat10_3.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat2.xyz = u_xlat16_6.xyz * vec3(vec3(_SSRIntensity, _SSRIntensity, _SSRIntensity));
    u_xlat2.xyz = u_xlat16_3.xxx * u_xlat2.xyz + u_xlat16_8.xyz;
    u_xlat1.x = 0.100000001 / _DeepColorDepth;
    u_xlat1.x = u_xlat1.x * u_xlat37;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.x = max(u_xlat1.x, 9.99999975e-05);
    u_xlat1.x = log2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _DeepColorFade;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat13 = float(1.0) / _ShoreTransparency;
    u_xlat38 = u_xlat13 * u_xlat37;
#ifdef UNITY_ADRENO_ES3
    u_xlat38 = min(max(u_xlat38, 0.0), 1.0);
#else
    u_xlat38 = clamp(u_xlat38, 0.0, 1.0);
#endif
    u_xlat38 = max(u_xlat38, 9.99999975e-05);
    u_xlat38 = log2(u_xlat38);
    u_xlat38 = u_xlat38 * _ShoreFade;
    u_xlat38 = exp2(u_xlat38);
    u_xlat6.xyz = _ShallowColor.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat6.xyz = vec3(u_xlat38) * u_xlat6.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat9.xyz = (-u_xlat6.xyz) * u_xlat10_7.xyz + _DeepColor.xyz;
    u_xlat10.xyz = u_xlat10_7.xyz * u_xlat6.xyz;
    u_xlat9.xyz = u_xlat1.xxx * u_xlat9.xyz + u_xlat10.xyz;
    u_xlat2.xyz = u_xlat2.xyz + (-u_xlat9.xyz);
    u_xlat1.x = float(1.0) / _ShoreReflectionFade;
    u_xlat1.x = u_xlat1.x * u_xlat37;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat40 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat40 = inversesqrt(u_xlat40);
    u_xlat11.xyz = vec3(u_xlat40) * vs_TEXCOORD6.xyz;
    u_xlat40 = dot(u_xlat5.xyz, u_xlat11.xyz);
    u_xlat40 = (-u_xlat40) + 1.0;
    u_xlat40 = max(u_xlat40, 9.99999975e-05);
    u_xlat40 = log2(u_xlat40);
    u_xlat5.x = u_xlat40 * _FresnelPower;
    u_xlat40 = u_xlat40 * _SpecularPower;
    u_xlat40 = exp2(u_xlat40);
    u_xlat5.x = exp2(u_xlat5.x);
    u_xlat5.x = u_xlat5.x * _ReflectionIntensity;
    u_xlat1.x = u_xlat1.x * u_xlat5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat2.xyz = u_xlat1.xxx * u_xlat2.xyz + u_xlat9.xyz;
    u_xlat2.xyz = (-u_xlat6.xyz) * u_xlat10_7.xyz + u_xlat2.xyz;
    u_xlat2.xyz = vec3(u_xlat38) * u_xlat2.xyz + u_xlat10.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(0.0>=_ES_MoonDirection.y);
#else
    u_xlatb1 = 0.0>=_ES_MoonDirection.y;
#endif
    u_xlat5.xyz = (bool(u_xlatb1)) ? _ES_SunDirection.xyz : _ES_MoonDirection.xyz;
    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat25) + u_xlat5.xyz;
    u_xlat1.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
    u_xlat16_0.y = 1.0;
    u_xlat16_1 = dot(u_xlat16_0.xyz, u_xlat16_0.xyz);
    u_xlat16_1 = inversesqrt(u_xlat16_1);
    u_xlat16_5.xyz = u_xlat16_0.xyz * vec3(u_xlat16_1);
    u_xlat1.x = dot(u_xlat16_5.xyz, u_xlat4.xyz);
    u_xlat1.x = max(u_xlat1.x, 9.99999975e-05);
    u_xlat1.x = log2(u_xlat1.x);
    u_xlat25 = _Gloss * 128.0;
    u_xlat1.x = u_xlat1.x * u_xlat25;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _SpecularIntensity;
    u_xlat1.x = max(u_xlat1.x, 0.0);
    u_xlat1.x = min(u_xlat1.x, 16.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb25 = !!(_ES_MoonDirection.y>=9.99999975e-05);
#else
    u_xlatb25 = _ES_MoonDirection.y>=9.99999975e-05;
#endif
    u_xlat25 = u_xlatb25 ? 1.0 : float(0.0);
    u_xlat38 = _ES_MoonDirection.y + -1.0;
    u_xlat25 = u_xlat25 * u_xlat38 + 1.0;
    u_xlat4.xyz = vec3(u_xlat25) * _LightColor0.xyz;
    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
    u_xlat1.x = u_xlat37 + -1.0;
    u_xlat1.x = u_xlat13 * u_xlat1.x;
    u_xlat1.x = u_xlat1.x * 0.100000001;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat1.xxx * u_xlat4.xyz;
    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat40) + u_xlat2.xyz;
    u_xlat1.x = 0.100000001 / _OpacityByDepth;
    u_xlat1.x = u_xlat1.x * u_xlat37;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat0.w = u_xlat1.x * vs_COLOR0.w;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "MSAA_INTERPOLATION" "MHY_SHADER_LOW" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump float _MHYZBias;
uniform 	vec4 hlslcc_mtx4x4_mhyJitteredVP[4];
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
out highp vec4 vs_TEXCOORD9;
out highp vec4 vs_TEXCOORD10;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec4 u_xlat8;
float u_xlat27;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4_mhyJitteredVP[1];
    u_xlat2 = hlslcc_mtx4x4_mhyJitteredVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4_mhyJitteredVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4_mhyJitteredVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat3.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    u_xlat3.xyw = u_xlat2.xyw;
    gl_Position = u_xlat3;
    vs_COLOR0 = in_COLOR0;
    u_xlat4.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat4.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat4.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat27 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat4.xyz = vec3(u_xlat27) * u_xlat4.xyz;
    u_xlat16_5.x = u_xlat4.y * u_xlat4.y;
    u_xlat16_5.x = u_xlat4.x * u_xlat4.x + (-u_xlat16_5.x);
    u_xlat16_6 = u_xlat4.yzzx * u_xlat4.xyzz;
    u_xlat16_7.x = dot(unity_SHBr, u_xlat16_6);
    u_xlat16_7.y = dot(unity_SHBg, u_xlat16_6);
    u_xlat16_7.z = dot(unity_SHBb, u_xlat16_6);
    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_7.xyz;
    u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat4.w = 1.0;
    u_xlat16_6.x = dot(unity_SHAr, u_xlat4);
    u_xlat16_6.y = dot(unity_SHAg, u_xlat4);
    u_xlat16_6.z = dot(unity_SHAb, u_xlat4);
    u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_6.xyz;
    vs_TEXCOORD1.xyz = u_xlat16_5.xyz;
    vs_TEXCOORD1.w = 1.0;
    u_xlat27 = u_xlat3.y * _ProjectionParams.x;
    u_xlat8.w = u_xlat27 * 0.5;
    u_xlat8.xz = u_xlat3.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.z = u_xlat2.z;
    u_xlat3.xy = u_xlat8.zz + u_xlat8.xw;
    vs_TEXCOORD2 = u_xlat3;
    vs_TEXCOORD4.xyw = u_xlat3.xyw;
    u_xlat27 = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat27 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat27;
    u_xlat27 = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat27;
    u_xlat27 = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat27;
    vs_TEXCOORD3.z = (-u_xlat27);
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD3.w = 0.0;
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD5.w = 0.0;
    vs_TEXCOORD6.xyz = u_xlat4.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[1].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].www + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * in_POSITION0.yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.zzz + u_xlat1.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.www + u_xlat1.xyz;
    vs_TEXCOORD7.xyz = u_xlat1.xyz * vec3(-1.0, -1.0, 1.0);
    vs_TEXCOORD7.w = 0.0;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat27 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat1.xyz = vec3(u_xlat27) * u_xlat1.xyz;
    vs_TEXCOORD8.xyz = u_xlat1.xyz;
    vs_TEXCOORD8.w = 0.0;
    u_xlat2.xyz = u_xlat1.yzx * u_xlat4.zxy;
    u_xlat1.xyz = u_xlat4.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
    u_xlat27 = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD9.xyz = vec3(u_xlat27) * u_xlat1.xyz;
    vs_TEXCOORD9.w = 0.0;
    u_xlat27 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat27 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat27;
    vs_TEXCOORD10.w = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat27;
    vs_TEXCOORD10.xyz = u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ZBufferParams;
uniform 	mediump vec4 _LightColor0;
uniform 	float _NormalMapScale;
uniform 	float _Normal01_U_Speed;
uniform 	float _Normal01_VSpeed;
uniform 	float _NormalMapBias;
uniform 	float _Normal02_U_Speed;
uniform 	float _Normal02_V_Speed;
uniform 	float _RefractionIntensity;
uniform 	float _OpacityByDepth;
uniform 	float _SpecularIntensity;
uniform 	vec3 _ES_MoonDirection;
uniform 	vec3 _ES_SunDirection;
uniform 	float _Gloss;
uniform 	float _ShoreTransparency;
uniform 	float _SpecularPower;
uniform 	vec4 _ShallowColor;
uniform 	float _ShoreFade;
uniform 	vec4 _DeepColor;
uniform 	float _DeepColorDepth;
uniform 	float _DeepColorFade;
uniform 	vec4 _DistortionIntensity;
uniform 	float _ReflectionIntensity;
uniform 	float _FresnelPower;
uniform 	float _ShoreReflectionFade;
uniform 	mediump float _ProjectUVScale;
uniform 	vec4 _ReflectionSkyCubeMap_HDR;
uniform lowp sampler2D _Normal01;
uniform lowp sampler2D _Normal02;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _SceneScaledBufferBeforTransParent;
uniform lowp samplerCube _ReflectionSkyCubeMap;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD8;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec3 u_xlat1;
lowp vec3 u_xlat10_1;
vec4 u_xlat2;
lowp vec3 u_xlat10_2;
bool u_xlatb2;
mediump vec3 u_xlat16_3;
lowp vec4 u_xlat10_3;
vec3 u_xlat4;
vec3 u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
vec3 u_xlat8;
vec3 u_xlat9;
vec3 u_xlat10;
float u_xlat13;
vec3 u_xlat15;
mediump vec3 u_xlat16_15;
bool u_xlatb15;
float u_xlat16;
float u_xlat23;
float u_xlat27;
mediump float u_xlat16_33;
float u_xlat34;
mediump float u_xlat16_34;
float u_xlat35;
float u_xlat37;
void main()
{
    u_xlat16_0.w = -1.0;
    u_xlat1.xy = vs_TEXCOORD5.zx * vec2(vec2(_ProjectUVScale, _ProjectUVScale));
    u_xlat2.w = _Time.y * _Normal02_V_Speed + u_xlat1.x;
    u_xlat2.yz = _Time.yy * vec2(_Normal01_VSpeed, _Normal02_U_Speed) + u_xlat1.xy;
    u_xlat2.x = _Time.y * _Normal01_U_Speed + u_xlat1.y;
    u_xlat10_1.xyz = texture(_Normal01, u_xlat2.xy, _NormalMapBias).xyz;
    u_xlat10_2.xyz = texture(_Normal02, u_xlat2.zw, _NormalMapBias).xyz;
    u_xlat16_0.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_3.xyz = u_xlat10_2.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.wwz;
    u_xlat16_0.xy = u_xlat16_0.xy * vec2(_NormalMapScale);
    u_xlat16_3.xy = u_xlat16_3.xy * vec2(_NormalMapScale);
    u_xlat16_0.z = -1.0;
    u_xlat16_0.xyz = u_xlat16_0.xzy + u_xlat16_3.xzy;
    u_xlat1.xyz = u_xlat16_0.xzy * _DistortionIntensity.xyz;
    u_xlat2.x = vs_TEXCOORD8.x;
    u_xlat2.y = vs_TEXCOORD9.x;
    u_xlat2.z = vs_TEXCOORD6.x;
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat4.x = vs_TEXCOORD8.y;
    u_xlat4.y = vs_TEXCOORD9.y;
    u_xlat4.z = vs_TEXCOORD6.y;
    u_xlat2.y = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat4.x = vs_TEXCOORD8.z;
    u_xlat4.y = vs_TEXCOORD9.z;
    u_xlat4.z = vs_TEXCOORD6.z;
    u_xlat2.z = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat1.xyz = u_xlat1.xxx * u_xlat2.xyz;
    u_xlat2.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat34 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat34 = inversesqrt(u_xlat34);
    u_xlat4.xyz = vec3(u_xlat34) * u_xlat2.xyz;
    u_xlat35 = dot((-u_xlat4.xyz), u_xlat1.xyz);
    u_xlat35 = u_xlat35 + u_xlat35;
    u_xlat1.xyz = u_xlat1.xyz * (-vec3(u_xlat35)) + (-u_xlat4.xyz);
    u_xlat10_3 = textureLod(_ReflectionSkyCubeMap, u_xlat1.xyz, 0.0);
    u_xlat16_33 = u_xlat10_3.w + -1.0;
    u_xlat16_33 = _ReflectionSkyCubeMap_HDR.w * u_xlat16_33 + 1.0;
    u_xlat16_33 = log2(u_xlat16_33);
    u_xlat16_33 = u_xlat16_33 * _ReflectionSkyCubeMap_HDR.y;
    u_xlat16_33 = exp2(u_xlat16_33);
    u_xlat16_33 = u_xlat16_33 * _ReflectionSkyCubeMap_HDR.x;
    u_xlat1.xy = u_xlat16_0.xz * vec2(vec2(_RefractionIntensity, _RefractionIntensity));
    u_xlat23 = float(1.0) / vs_TEXCOORD4.w;
    u_xlat23 = u_xlat23 * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat23 = min(max(u_xlat23, 0.0), 1.0);
#else
    u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
#endif
    u_xlat1.xy = vec2(u_xlat23) * u_xlat1.xy;
    u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD4.ww;
    u_xlat5.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat23 = texture(_CameraDepthTexture, u_xlat5.xy).x;
    u_xlat23 = _ZBufferParams.z * u_xlat23 + _ZBufferParams.w;
    u_xlat23 = float(1.0) / u_xlat23;
    u_xlat23 = u_xlat23 + (-vs_TEXCOORD4.w);
#ifdef UNITY_ADRENO_ES3
    u_xlat23 = min(max(u_xlat23, 0.0), 1.0);
#else
    u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
#endif
    u_xlat1.xy = vec2(u_xlat23) * u_xlat1.xy;
    u_xlat1.z = 0.0;
    u_xlat5.xyz = u_xlat1.xyz + vs_TEXCOORD4.xyw;
    u_xlat5.xy = u_xlat5.xy / u_xlat5.zz;
    u_xlat35 = texture(_CameraDepthTexture, u_xlat5.xy).x;
    u_xlat35 = _ZBufferParams.z * u_xlat35 + _ZBufferParams.w;
    u_xlat35 = float(1.0) / u_xlat35;
    u_xlat35 = u_xlat35 + (-vs_TEXCOORD4.w);
#ifdef UNITY_ADRENO_ES3
    u_xlat35 = min(max(u_xlat35, 0.0), 1.0);
#else
    u_xlat35 = clamp(u_xlat35, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat35) * u_xlat1.xyz + vs_TEXCOORD4.xyw;
    u_xlat5.xy = u_xlat1.xy / u_xlat1.zz;
    u_xlat1.xy = u_xlat1.xy / vs_TEXCOORD4.ww;
    u_xlat10_1.xyz = texture(_SceneScaledBufferBeforTransParent, u_xlat1.xy).xyz;
    u_xlat35 = texture(_CameraDepthTexture, u_xlat5.xy).x;
    u_xlat35 = _ZBufferParams.z * u_xlat35 + _ZBufferParams.w;
    u_xlat35 = float(1.0) / u_xlat35;
    u_xlat35 = u_xlat35 + (-vs_TEXCOORD4.w);
    u_xlat37 = 0.100000001 / _DeepColorDepth;
    u_xlat37 = u_xlat35 * u_xlat37;
#ifdef UNITY_ADRENO_ES3
    u_xlat37 = min(max(u_xlat37, 0.0), 1.0);
#else
    u_xlat37 = clamp(u_xlat37, 0.0, 1.0);
#endif
    u_xlat37 = max(u_xlat37, 9.99999975e-05);
    u_xlat37 = log2(u_xlat37);
    u_xlat37 = u_xlat37 * _DeepColorFade;
    u_xlat37 = exp2(u_xlat37);
    u_xlat5.x = float(1.0) / _ShoreTransparency;
    u_xlat16 = u_xlat35 * u_xlat5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16 = min(max(u_xlat16, 0.0), 1.0);
#else
    u_xlat16 = clamp(u_xlat16, 0.0, 1.0);
#endif
    u_xlat16 = max(u_xlat16, 9.99999975e-05);
    u_xlat16 = log2(u_xlat16);
    u_xlat16 = u_xlat16 * _ShoreFade;
    u_xlat16 = exp2(u_xlat16);
    u_xlat6.xyz = _ShallowColor.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat6.xyz = vec3(u_xlat16) * u_xlat6.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat7.xyz = (-u_xlat6.xyz) * u_xlat10_1.xyz + _DeepColor.xyz;
    u_xlat8.xyz = u_xlat10_1.xyz * u_xlat6.xyz;
    u_xlat7.xyz = vec3(u_xlat37) * u_xlat7.xyz + u_xlat8.xyz;
    u_xlat9.xyz = vec3(u_xlat16_33) * u_xlat10_3.xyz + (-u_xlat7.xyz);
    u_xlat37 = float(1.0) / _ShoreReflectionFade;
    u_xlat37 = u_xlat35 * u_xlat37;
#ifdef UNITY_ADRENO_ES3
    u_xlat37 = min(max(u_xlat37, 0.0), 1.0);
#else
    u_xlat37 = clamp(u_xlat37, 0.0, 1.0);
#endif
    u_xlat27 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat10.xyz = vec3(u_xlat27) * vs_TEXCOORD6.xyz;
    u_xlat4.x = dot(u_xlat4.xyz, u_xlat10.xyz);
    u_xlat4.x = (-u_xlat4.x) + 1.0;
    u_xlat4.x = max(u_xlat4.x, 9.99999975e-05);
    u_xlat4.x = log2(u_xlat4.x);
    u_xlat15.x = u_xlat4.x * _FresnelPower;
    u_xlat4.x = u_xlat4.x * _SpecularPower;
    u_xlat4.x = exp2(u_xlat4.x);
    u_xlat15.x = exp2(u_xlat15.x);
    u_xlat15.x = u_xlat15.x * _ReflectionIntensity;
    u_xlat15.x = u_xlat37 * u_xlat15.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat15.x = min(max(u_xlat15.x, 0.0), 1.0);
#else
    u_xlat15.x = clamp(u_xlat15.x, 0.0, 1.0);
#endif
    u_xlat15.xyz = u_xlat15.xxx * u_xlat9.xyz + u_xlat7.xyz;
    u_xlat1.xyz = (-u_xlat6.xyz) * u_xlat10_1.xyz + u_xlat15.xyz;
    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz + u_xlat8.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(0.0>=_ES_MoonDirection.y);
#else
    u_xlatb15 = 0.0>=_ES_MoonDirection.y;
#endif
    u_xlat15.xyz = (bool(u_xlatb15)) ? _ES_SunDirection.xyz : _ES_MoonDirection.xyz;
    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat34) + u_xlat15.xyz;
    u_xlat34 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat34 = inversesqrt(u_xlat34);
    u_xlat2.xyz = vec3(u_xlat34) * u_xlat2.xyz;
    u_xlat16_0.y = 1.0;
    u_xlat16_34 = dot(u_xlat16_0.xyz, u_xlat16_0.xyz);
    u_xlat16_34 = inversesqrt(u_xlat16_34);
    u_xlat16_15.xyz = u_xlat16_0.xyz * vec3(u_xlat16_34);
    u_xlat34 = dot(u_xlat16_15.xyz, u_xlat2.xyz);
    u_xlat34 = max(u_xlat34, 9.99999975e-05);
    u_xlat34 = log2(u_xlat34);
    u_xlat2.x = _Gloss * 128.0;
    u_xlat34 = u_xlat34 * u_xlat2.x;
    u_xlat34 = exp2(u_xlat34);
    u_xlat34 = u_xlat34 * _SpecularIntensity;
    u_xlat34 = max(u_xlat34, 0.0);
    u_xlat34 = min(u_xlat34, 16.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(_ES_MoonDirection.y>=9.99999975e-05);
#else
    u_xlatb2 = _ES_MoonDirection.y>=9.99999975e-05;
#endif
    u_xlat2.x = u_xlatb2 ? 1.0 : float(0.0);
    u_xlat13 = _ES_MoonDirection.y + -1.0;
    u_xlat2.x = u_xlat2.x * u_xlat13 + 1.0;
    u_xlat2.xyz = u_xlat2.xxx * _LightColor0.xyz;
    u_xlat2.xyz = vec3(u_xlat34) * u_xlat2.xyz;
    u_xlat34 = u_xlat35 + -1.0;
    u_xlat34 = u_xlat5.x * u_xlat34;
    u_xlat34 = u_xlat34 * 0.100000001;
#ifdef UNITY_ADRENO_ES3
    u_xlat34 = min(max(u_xlat34, 0.0), 1.0);
#else
    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
#endif
    u_xlat2.xyz = vec3(u_xlat34) * u_xlat2.xyz;
    u_xlat0.xyz = u_xlat2.xyz * u_xlat4.xxx + u_xlat1.xyz;
    u_xlat1.x = 0.100000001 / _OpacityByDepth;
    u_xlat1.x = u_xlat1.x * u_xlat35;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat0.w = u_xlat1.x * vs_COLOR0.w;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MSAA_INTERPOLATION" "MHY_SHADER_LOW" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
uniform 	vec4 hlslcc_mtx4x4_mhyJitteredVP[4];
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
out highp vec4 vs_TEXCOORD9;
out highp vec4 vs_TEXCOORD10;
float u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec4 u_xlat8;
vec3 u_xlat9;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat9.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4_mhyJitteredVP[1];
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[3] * u_xlat2.wwww + u_xlat1;
    u_xlat3.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    u_xlat3.xyw = u_xlat1.xyw;
    gl_Position = u_xlat3;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD1.w = 1.0;
    u_xlat4.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat4.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat4.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat1.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
    u_xlat16_5.x = u_xlat4.y * u_xlat4.y;
    u_xlat16_5.x = u_xlat4.x * u_xlat4.x + (-u_xlat16_5.x);
    u_xlat16_6 = u_xlat4.yzzx * u_xlat4.xyzz;
    u_xlat16_7.x = dot(unity_SHBr, u_xlat16_6);
    u_xlat16_7.y = dot(unity_SHBg, u_xlat16_6);
    u_xlat16_7.z = dot(unity_SHBb, u_xlat16_6);
    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_7.xyz;
    u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat4.w = 1.0;
    u_xlat16_6.x = dot(unity_SHAr, u_xlat4);
    u_xlat16_6.y = dot(unity_SHAg, u_xlat4);
    u_xlat16_6.z = dot(unity_SHAb, u_xlat4);
    u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_6.xyz;
    vs_TEXCOORD1.xyz = u_xlat16_5.xyz;
    u_xlat1.x = u_xlat3.y * _ProjectionParams.x;
    u_xlat8.w = u_xlat1.x * 0.5;
    u_xlat8.xz = u_xlat3.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.z = u_xlat1.z;
    u_xlat3.xy = u_xlat8.zz + u_xlat8.xw;
    vs_TEXCOORD2 = u_xlat3;
    vs_TEXCOORD4.xyw = u_xlat3.xyw;
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD3.w = 0.0;
    u_xlat1.x = u_xlat2.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat2.x + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat2.z + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat2.w + u_xlat1.x;
    vs_TEXCOORD3.z = (-u_xlat1.x);
    vs_TEXCOORD5.w = 0.0;
    vs_TEXCOORD5.xyz = u_xlat9.xyz;
    u_xlat9.xyz = (-u_xlat9.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD6.w = 0.0;
    vs_TEXCOORD6.xyz = u_xlat4.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].www + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * in_POSITION0.yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.zzz + u_xlat1.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.www + u_xlat1.xyz;
    vs_TEXCOORD7.xyz = u_xlat1.xyz * vec3(-1.0, -1.0, 1.0);
    vs_TEXCOORD7.w = 0.0;
    u_xlat1.xyz = in_TANGENT0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat0 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0 = inversesqrt(u_xlat0);
    u_xlat1.xyz = vec3(u_xlat0) * u_xlat1.xyz;
    vs_TEXCOORD8.xyz = u_xlat1.xyz;
    vs_TEXCOORD8.w = 0.0;
    u_xlat2.xyz = u_xlat1.yzx * u_xlat4.zxy;
    u_xlat1.xyz = u_xlat4.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
    u_xlat0 = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD9.xyz = vec3(u_xlat0) * u_xlat1.xyz;
    vs_TEXCOORD9.w = 0.0;
    u_xlat0 = u_xlat9.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat9.x + u_xlat0;
    vs_TEXCOORD10.w = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat9.z + u_xlat0;
    vs_TEXCOORD10.xyz = u_xlat9.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ZBufferParams;
uniform 	mediump vec4 _LightColor0;
uniform 	float _NormalMapScale;
uniform 	float _Normal01_U_Speed;
uniform 	float _Normal01_VSpeed;
uniform 	float _NormalMapBias;
uniform 	float _Normal02_U_Speed;
uniform 	float _Normal02_V_Speed;
uniform 	float _RefractionIntensity;
uniform 	float _OpacityByDepth;
uniform 	float _SpecularIntensity;
uniform 	vec3 _ES_MoonDirection;
uniform 	vec3 _ES_SunDirection;
uniform 	float _Gloss;
uniform 	float _ShoreTransparency;
uniform 	float _SpecularPower;
uniform 	vec4 _ShallowColor;
uniform 	float _ShoreFade;
uniform 	vec4 _DeepColor;
uniform 	float _DeepColorDepth;
uniform 	float _DeepColorFade;
uniform 	vec4 _DistortionIntensity;
uniform 	float _ReflectionIntensity;
uniform 	float _FresnelPower;
uniform 	float _ShoreReflectionFade;
uniform 	mediump float _ProjectUVScale;
uniform 	vec4 _ReflectionSkyCubeMap_HDR;
uniform lowp sampler2D _Normal01;
uniform lowp sampler2D _Normal02;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _SceneScaledBufferBeforTransParent;
uniform lowp samplerCube _ReflectionSkyCubeMap;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD8;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec3 u_xlat1;
lowp vec3 u_xlat10_1;
vec4 u_xlat2;
lowp vec3 u_xlat10_2;
bool u_xlatb2;
mediump vec3 u_xlat16_3;
lowp vec4 u_xlat10_3;
vec3 u_xlat4;
vec3 u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
vec3 u_xlat8;
vec3 u_xlat9;
vec3 u_xlat10;
float u_xlat13;
vec3 u_xlat15;
mediump vec3 u_xlat16_15;
bool u_xlatb15;
float u_xlat16;
float u_xlat23;
float u_xlat27;
mediump float u_xlat16_33;
float u_xlat34;
mediump float u_xlat16_34;
float u_xlat35;
float u_xlat37;
void main()
{
    u_xlat16_0.w = -1.0;
    u_xlat1.xy = vs_TEXCOORD5.zx * vec2(vec2(_ProjectUVScale, _ProjectUVScale));
    u_xlat2.w = _Time.y * _Normal02_V_Speed + u_xlat1.x;
    u_xlat2.yz = _Time.yy * vec2(_Normal01_VSpeed, _Normal02_U_Speed) + u_xlat1.xy;
    u_xlat2.x = _Time.y * _Normal01_U_Speed + u_xlat1.y;
    u_xlat10_1.xyz = texture(_Normal01, u_xlat2.xy, _NormalMapBias).xyz;
    u_xlat10_2.xyz = texture(_Normal02, u_xlat2.zw, _NormalMapBias).xyz;
    u_xlat16_0.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_3.xyz = u_xlat10_2.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.wwz;
    u_xlat16_0.xy = u_xlat16_0.xy * vec2(_NormalMapScale);
    u_xlat16_3.xy = u_xlat16_3.xy * vec2(_NormalMapScale);
    u_xlat16_0.z = -1.0;
    u_xlat16_0.xyz = u_xlat16_0.xzy + u_xlat16_3.xzy;
    u_xlat1.xyz = u_xlat16_0.xzy * _DistortionIntensity.xyz;
    u_xlat2.x = vs_TEXCOORD8.x;
    u_xlat2.y = vs_TEXCOORD9.x;
    u_xlat2.z = vs_TEXCOORD6.x;
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat4.x = vs_TEXCOORD8.y;
    u_xlat4.y = vs_TEXCOORD9.y;
    u_xlat4.z = vs_TEXCOORD6.y;
    u_xlat2.y = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat4.x = vs_TEXCOORD8.z;
    u_xlat4.y = vs_TEXCOORD9.z;
    u_xlat4.z = vs_TEXCOORD6.z;
    u_xlat2.z = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat1.xyz = u_xlat1.xxx * u_xlat2.xyz;
    u_xlat2.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat34 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat34 = inversesqrt(u_xlat34);
    u_xlat4.xyz = vec3(u_xlat34) * u_xlat2.xyz;
    u_xlat35 = dot((-u_xlat4.xyz), u_xlat1.xyz);
    u_xlat35 = u_xlat35 + u_xlat35;
    u_xlat1.xyz = u_xlat1.xyz * (-vec3(u_xlat35)) + (-u_xlat4.xyz);
    u_xlat10_3 = textureLod(_ReflectionSkyCubeMap, u_xlat1.xyz, 0.0);
    u_xlat16_33 = u_xlat10_3.w + -1.0;
    u_xlat16_33 = _ReflectionSkyCubeMap_HDR.w * u_xlat16_33 + 1.0;
    u_xlat16_33 = log2(u_xlat16_33);
    u_xlat16_33 = u_xlat16_33 * _ReflectionSkyCubeMap_HDR.y;
    u_xlat16_33 = exp2(u_xlat16_33);
    u_xlat16_33 = u_xlat16_33 * _ReflectionSkyCubeMap_HDR.x;
    u_xlat1.xy = u_xlat16_0.xz * vec2(vec2(_RefractionIntensity, _RefractionIntensity));
    u_xlat23 = float(1.0) / vs_TEXCOORD4.w;
    u_xlat23 = u_xlat23 * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat23 = min(max(u_xlat23, 0.0), 1.0);
#else
    u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
#endif
    u_xlat1.xy = vec2(u_xlat23) * u_xlat1.xy;
    u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD4.ww;
    u_xlat5.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat23 = texture(_CameraDepthTexture, u_xlat5.xy).x;
    u_xlat23 = _ZBufferParams.z * u_xlat23 + _ZBufferParams.w;
    u_xlat23 = float(1.0) / u_xlat23;
    u_xlat23 = u_xlat23 + (-vs_TEXCOORD4.w);
#ifdef UNITY_ADRENO_ES3
    u_xlat23 = min(max(u_xlat23, 0.0), 1.0);
#else
    u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
#endif
    u_xlat1.xy = vec2(u_xlat23) * u_xlat1.xy;
    u_xlat1.z = 0.0;
    u_xlat5.xyz = u_xlat1.xyz + vs_TEXCOORD4.xyw;
    u_xlat5.xy = u_xlat5.xy / u_xlat5.zz;
    u_xlat35 = texture(_CameraDepthTexture, u_xlat5.xy).x;
    u_xlat35 = _ZBufferParams.z * u_xlat35 + _ZBufferParams.w;
    u_xlat35 = float(1.0) / u_xlat35;
    u_xlat35 = u_xlat35 + (-vs_TEXCOORD4.w);
#ifdef UNITY_ADRENO_ES3
    u_xlat35 = min(max(u_xlat35, 0.0), 1.0);
#else
    u_xlat35 = clamp(u_xlat35, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat35) * u_xlat1.xyz + vs_TEXCOORD4.xyw;
    u_xlat5.xy = u_xlat1.xy / u_xlat1.zz;
    u_xlat1.xy = u_xlat1.xy / vs_TEXCOORD4.ww;
    u_xlat10_1.xyz = texture(_SceneScaledBufferBeforTransParent, u_xlat1.xy).xyz;
    u_xlat35 = texture(_CameraDepthTexture, u_xlat5.xy).x;
    u_xlat35 = _ZBufferParams.z * u_xlat35 + _ZBufferParams.w;
    u_xlat35 = float(1.0) / u_xlat35;
    u_xlat35 = u_xlat35 + (-vs_TEXCOORD4.w);
    u_xlat37 = 0.100000001 / _DeepColorDepth;
    u_xlat37 = u_xlat35 * u_xlat37;
#ifdef UNITY_ADRENO_ES3
    u_xlat37 = min(max(u_xlat37, 0.0), 1.0);
#else
    u_xlat37 = clamp(u_xlat37, 0.0, 1.0);
#endif
    u_xlat37 = max(u_xlat37, 9.99999975e-05);
    u_xlat37 = log2(u_xlat37);
    u_xlat37 = u_xlat37 * _DeepColorFade;
    u_xlat37 = exp2(u_xlat37);
    u_xlat5.x = float(1.0) / _ShoreTransparency;
    u_xlat16 = u_xlat35 * u_xlat5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16 = min(max(u_xlat16, 0.0), 1.0);
#else
    u_xlat16 = clamp(u_xlat16, 0.0, 1.0);
#endif
    u_xlat16 = max(u_xlat16, 9.99999975e-05);
    u_xlat16 = log2(u_xlat16);
    u_xlat16 = u_xlat16 * _ShoreFade;
    u_xlat16 = exp2(u_xlat16);
    u_xlat6.xyz = _ShallowColor.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat6.xyz = vec3(u_xlat16) * u_xlat6.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat7.xyz = (-u_xlat6.xyz) * u_xlat10_1.xyz + _DeepColor.xyz;
    u_xlat8.xyz = u_xlat10_1.xyz * u_xlat6.xyz;
    u_xlat7.xyz = vec3(u_xlat37) * u_xlat7.xyz + u_xlat8.xyz;
    u_xlat9.xyz = vec3(u_xlat16_33) * u_xlat10_3.xyz + (-u_xlat7.xyz);
    u_xlat37 = float(1.0) / _ShoreReflectionFade;
    u_xlat37 = u_xlat35 * u_xlat37;
#ifdef UNITY_ADRENO_ES3
    u_xlat37 = min(max(u_xlat37, 0.0), 1.0);
#else
    u_xlat37 = clamp(u_xlat37, 0.0, 1.0);
#endif
    u_xlat27 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat10.xyz = vec3(u_xlat27) * vs_TEXCOORD6.xyz;
    u_xlat4.x = dot(u_xlat4.xyz, u_xlat10.xyz);
    u_xlat4.x = (-u_xlat4.x) + 1.0;
    u_xlat4.x = max(u_xlat4.x, 9.99999975e-05);
    u_xlat4.x = log2(u_xlat4.x);
    u_xlat15.x = u_xlat4.x * _FresnelPower;
    u_xlat4.x = u_xlat4.x * _SpecularPower;
    u_xlat4.x = exp2(u_xlat4.x);
    u_xlat15.x = exp2(u_xlat15.x);
    u_xlat15.x = u_xlat15.x * _ReflectionIntensity;
    u_xlat15.x = u_xlat37 * u_xlat15.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat15.x = min(max(u_xlat15.x, 0.0), 1.0);
#else
    u_xlat15.x = clamp(u_xlat15.x, 0.0, 1.0);
#endif
    u_xlat15.xyz = u_xlat15.xxx * u_xlat9.xyz + u_xlat7.xyz;
    u_xlat1.xyz = (-u_xlat6.xyz) * u_xlat10_1.xyz + u_xlat15.xyz;
    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz + u_xlat8.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(0.0>=_ES_MoonDirection.y);
#else
    u_xlatb15 = 0.0>=_ES_MoonDirection.y;
#endif
    u_xlat15.xyz = (bool(u_xlatb15)) ? _ES_SunDirection.xyz : _ES_MoonDirection.xyz;
    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat34) + u_xlat15.xyz;
    u_xlat34 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat34 = inversesqrt(u_xlat34);
    u_xlat2.xyz = vec3(u_xlat34) * u_xlat2.xyz;
    u_xlat16_0.y = 1.0;
    u_xlat16_34 = dot(u_xlat16_0.xyz, u_xlat16_0.xyz);
    u_xlat16_34 = inversesqrt(u_xlat16_34);
    u_xlat16_15.xyz = u_xlat16_0.xyz * vec3(u_xlat16_34);
    u_xlat34 = dot(u_xlat16_15.xyz, u_xlat2.xyz);
    u_xlat34 = max(u_xlat34, 9.99999975e-05);
    u_xlat34 = log2(u_xlat34);
    u_xlat2.x = _Gloss * 128.0;
    u_xlat34 = u_xlat34 * u_xlat2.x;
    u_xlat34 = exp2(u_xlat34);
    u_xlat34 = u_xlat34 * _SpecularIntensity;
    u_xlat34 = max(u_xlat34, 0.0);
    u_xlat34 = min(u_xlat34, 16.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(_ES_MoonDirection.y>=9.99999975e-05);
#else
    u_xlatb2 = _ES_MoonDirection.y>=9.99999975e-05;
#endif
    u_xlat2.x = u_xlatb2 ? 1.0 : float(0.0);
    u_xlat13 = _ES_MoonDirection.y + -1.0;
    u_xlat2.x = u_xlat2.x * u_xlat13 + 1.0;
    u_xlat2.xyz = u_xlat2.xxx * _LightColor0.xyz;
    u_xlat2.xyz = vec3(u_xlat34) * u_xlat2.xyz;
    u_xlat34 = u_xlat35 + -1.0;
    u_xlat34 = u_xlat5.x * u_xlat34;
    u_xlat34 = u_xlat34 * 0.100000001;
#ifdef UNITY_ADRENO_ES3
    u_xlat34 = min(max(u_xlat34, 0.0), 1.0);
#else
    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
#endif
    u_xlat2.xyz = vec3(u_xlat34) * u_xlat2.xyz;
    u_xlat0.xyz = u_xlat2.xyz * u_xlat4.xxx + u_xlat1.xyz;
    u_xlat1.x = 0.100000001 / _OpacityByDepth;
    u_xlat1.x = u_xlat1.x * u_xlat35;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat0.w = u_xlat1.x * vs_COLOR0.w;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "MSAA_INTERPOLATION" "MHY_SHADER_HIGH" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump float _MHYZBias;
uniform 	vec4 hlslcc_mtx4x4_mhyJitteredVP[4];
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
out highp vec4 vs_TEXCOORD9;
out highp vec4 vs_TEXCOORD10;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec4 u_xlat8;
float u_xlat27;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4_mhyJitteredVP[1];
    u_xlat2 = hlslcc_mtx4x4_mhyJitteredVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4_mhyJitteredVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4_mhyJitteredVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat3.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    u_xlat3.xyw = u_xlat2.xyw;
    gl_Position = u_xlat3;
    vs_COLOR0 = in_COLOR0;
    u_xlat4.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat4.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat4.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat27 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat4.xyz = vec3(u_xlat27) * u_xlat4.xyz;
    u_xlat16_5.x = u_xlat4.y * u_xlat4.y;
    u_xlat16_5.x = u_xlat4.x * u_xlat4.x + (-u_xlat16_5.x);
    u_xlat16_6 = u_xlat4.yzzx * u_xlat4.xyzz;
    u_xlat16_7.x = dot(unity_SHBr, u_xlat16_6);
    u_xlat16_7.y = dot(unity_SHBg, u_xlat16_6);
    u_xlat16_7.z = dot(unity_SHBb, u_xlat16_6);
    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_7.xyz;
    u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat4.w = 1.0;
    u_xlat16_6.x = dot(unity_SHAr, u_xlat4);
    u_xlat16_6.y = dot(unity_SHAg, u_xlat4);
    u_xlat16_6.z = dot(unity_SHAb, u_xlat4);
    u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_6.xyz;
    vs_TEXCOORD1.xyz = u_xlat16_5.xyz;
    vs_TEXCOORD1.w = 1.0;
    u_xlat27 = u_xlat3.y * _ProjectionParams.x;
    u_xlat8.w = u_xlat27 * 0.5;
    u_xlat8.xz = u_xlat3.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.z = u_xlat2.z;
    u_xlat3.xy = u_xlat8.zz + u_xlat8.xw;
    vs_TEXCOORD2 = u_xlat3;
    vs_TEXCOORD4.xyw = u_xlat3.xyw;
    u_xlat27 = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat27 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat27;
    u_xlat27 = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat27;
    u_xlat27 = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat27;
    vs_TEXCOORD3.z = (-u_xlat27);
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD3.w = 0.0;
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD5.w = 0.0;
    vs_TEXCOORD6.xyz = u_xlat4.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[1].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].www + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * in_POSITION0.yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.zzz + u_xlat1.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.www + u_xlat1.xyz;
    vs_TEXCOORD7.xyz = u_xlat1.xyz * vec3(-1.0, -1.0, 1.0);
    vs_TEXCOORD7.w = 0.0;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat27 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat1.xyz = vec3(u_xlat27) * u_xlat1.xyz;
    vs_TEXCOORD8.xyz = u_xlat1.xyz;
    vs_TEXCOORD8.w = 0.0;
    u_xlat2.xyz = u_xlat1.yzx * u_xlat4.zxy;
    u_xlat1.xyz = u_xlat4.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
    u_xlat27 = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD9.xyz = vec3(u_xlat27) * u_xlat1.xyz;
    vs_TEXCOORD9.w = 0.0;
    u_xlat27 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat27 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat27;
    vs_TEXCOORD10.w = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat27;
    vs_TEXCOORD10.xyz = u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ZBufferParams;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _NormalMapScale;
uniform 	float _Normal01_U_Speed;
uniform 	float _Normal01_VSpeed;
uniform 	float _NormalMapBias;
uniform 	float _Normal02_U_Speed;
uniform 	float _Normal02_V_Speed;
uniform 	float _RefractionIntensity;
uniform 	float _OpacityByDepth;
uniform 	float _SpecularIntensity;
uniform 	vec3 _ES_MoonDirection;
uniform 	vec3 _ES_SunDirection;
uniform 	float _Gloss;
uniform 	float _ShoreTransparency;
uniform 	float _SpecularPower;
uniform 	vec4 _ShallowColor;
uniform 	float _ShoreFade;
uniform 	vec4 _DeepColor;
uniform 	float _DeepColorDepth;
uniform 	float _DeepColorFade;
uniform 	vec4 _DistortionIntensity;
uniform 	float _SSRDistortion;
uniform 	float _SSRDistortion_Shore;
uniform 	float _SSRIntensity;
uniform 	float _ReflectionIntensity;
uniform 	float _FresnelPower;
uniform 	float _ShoreReflectionFade;
uniform 	mediump float _ProjectUVScale;
uniform 	vec4 _ReflectionSkyCubeMap_HDR;
uniform lowp sampler2D _Normal01;
uniform lowp sampler2D _Normal02;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _SceneScaledBufferBeforTransParent;
uniform lowp samplerCube _ReflectionSkyCubeMap;
uniform lowp sampler2D _SSRTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD8;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
lowp vec4 u_xlat10_3;
vec3 u_xlat4;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
mediump vec3 u_xlat16_7;
lowp vec3 u_xlat10_8;
vec3 u_xlat9;
vec3 u_xlat10;
vec3 u_xlat11;
vec3 u_xlat12;
vec3 u_xlat13;
vec2 u_xlat15;
mediump vec3 u_xlat16_16;
vec3 u_xlat18;
bool u_xlatb18;
vec3 u_xlat19;
vec2 u_xlat29;
float u_xlat32;
float u_xlat43;
float u_xlat46;
bool u_xlatb46;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD5.zx * vec2(vec2(_ProjectUVScale, _ProjectUVScale));
    u_xlat1.x = _Time.y * _Normal01_U_Speed + u_xlat0.y;
    u_xlat1.yz = _Time.yy * vec2(_Normal01_VSpeed, _Normal02_U_Speed) + u_xlat0.xy;
    u_xlat1.w = _Time.y * _Normal02_V_Speed + u_xlat0.x;
    u_xlat10_0.xyz = texture(_Normal01, u_xlat1.xy, _NormalMapBias).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_2.xy = u_xlat16_0.xy * vec2(_NormalMapScale);
    u_xlat10_1.xyz = texture(_Normal02, u_xlat1.zw, _NormalMapBias).xyz;
    u_xlat16_0.w = -1.0;
    u_xlat16_3.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.wwz;
    u_xlat16_3.xy = u_xlat16_3.xy * vec2(_NormalMapScale);
    u_xlat16_2.z = -1.0;
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
    u_xlat1.x = float(1.0) / vs_TEXCOORD4.w;
    u_xlat15.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat15.x = texture(_CameraDepthTexture, u_xlat15.xy).x;
    u_xlat15.x = _ZBufferParams.z * u_xlat15.x + _ZBufferParams.w;
    u_xlat15.x = float(1.0) / u_xlat15.x;
    u_xlat29.xy = u_xlat16_2.xy * vec2(vec2(_RefractionIntensity, _RefractionIntensity));
    u_xlat1.x = u_xlat1.x * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.xz = u_xlat1.xx * u_xlat29.xy;
    u_xlat1.xz = u_xlat1.xz * vs_TEXCOORD4.ww;
    u_xlat15.x = u_xlat15.x + (-vs_TEXCOORD4.w);
#ifdef UNITY_ADRENO_ES3
    u_xlat15.x = min(max(u_xlat15.x, 0.0), 1.0);
#else
    u_xlat15.x = clamp(u_xlat15.x, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat15.xx * u_xlat1.xz;
    u_xlat1.z = 0.0;
    u_xlat4.xyz = u_xlat1.xyz + vs_TEXCOORD4.xyw;
    u_xlat4.xy = u_xlat4.xy / u_xlat4.zz;
    u_xlat43 = texture(_CameraDepthTexture, u_xlat4.xy).x;
    u_xlat43 = _ZBufferParams.z * u_xlat43 + _ZBufferParams.w;
    u_xlat43 = float(1.0) / u_xlat43;
    u_xlat43 = u_xlat43 + (-vs_TEXCOORD4.w);
#ifdef UNITY_ADRENO_ES3
    u_xlat43 = min(max(u_xlat43, 0.0), 1.0);
#else
    u_xlat43 = clamp(u_xlat43, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat43) * u_xlat1.xyz + vs_TEXCOORD4.xyw;
    u_xlat29.xy = u_xlat1.xy / u_xlat1.zz;
    u_xlat29.x = texture(_CameraDepthTexture, u_xlat29.xy).x;
    u_xlat29.x = _ZBufferParams.z * u_xlat29.x + _ZBufferParams.w;
    u_xlat29.x = float(1.0) / u_xlat29.x;
    u_xlat29.x = u_xlat29.x + (-vs_TEXCOORD4.w);
    u_xlat1.w = 0.100000001 / _OpacityByDepth;
    u_xlat16_3.xz = u_xlat16_2.xy;
    u_xlat16_3.y = 1.0;
    u_xlat16_4.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
    u_xlat16_4.x = inversesqrt(u_xlat16_4.x);
    u_xlat16_4.xyz = u_xlat16_3.xyz * u_xlat16_4.xxx;
#ifdef UNITY_ADRENO_ES3
    u_xlatb46 = !!(0.0>=_ES_MoonDirection.y);
#else
    u_xlatb46 = 0.0>=_ES_MoonDirection.y;
#endif
    u_xlat5.xyz = (bool(u_xlatb46)) ? _ES_SunDirection.xyz : _ES_MoonDirection.xyz;
    u_xlat6.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat46 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat46 = inversesqrt(u_xlat46);
    u_xlat7.xyz = vec3(u_xlat46) * u_xlat6.xyz;
    u_xlat5.xyz = u_xlat6.xyz * vec3(u_xlat46) + u_xlat5.xyz;
    u_xlat46 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat46 = inversesqrt(u_xlat46);
    u_xlat5.xyz = vec3(u_xlat46) * u_xlat5.xyz;
    u_xlat4.x = dot(u_xlat16_4.xyz, u_xlat5.xyz);
    u_xlat18.x = _Gloss * 128.0;
    u_xlat4.x = max(u_xlat4.x, 9.99999975e-05);
    u_xlat4.x = log2(u_xlat4.x);
    u_xlat4.x = u_xlat4.x * u_xlat18.x;
    u_xlat4.x = exp2(u_xlat4.x);
    u_xlat4.x = u_xlat4.x * _SpecularIntensity;
    u_xlat4.x = max(u_xlat4.x, 0.0);
    u_xlat4.x = min(u_xlat4.x, 16.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_ES_MoonDirection.y>=9.99999975e-05);
#else
    u_xlatb18 = _ES_MoonDirection.y>=9.99999975e-05;
#endif
    u_xlat18.x = u_xlatb18 ? 1.0 : float(0.0);
    u_xlat32 = _ES_MoonDirection.y + -1.0;
    u_xlat18.x = u_xlat18.x * u_xlat32 + 1.0;
    u_xlat32 = float(1.0) / _ShoreTransparency;
    u_xlat46 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat46 = inversesqrt(u_xlat46);
    u_xlat5.xyz = vec3(u_xlat46) * vs_TEXCOORD6.xyz;
    u_xlat46 = dot(u_xlat7.xyz, u_xlat5.xyz);
    u_xlat46 = (-u_xlat46) + 1.0;
    u_xlat46 = max(u_xlat46, 9.99999975e-05);
    u_xlat46 = log2(u_xlat46);
    u_xlat5.x = u_xlat46 * _SpecularPower;
    u_xlat5.x = exp2(u_xlat5.x);
    u_xlat19.xyz = u_xlat18.xxx * _LightColor0.xyz;
    u_xlat19.xyz = u_xlat4.xxx * u_xlat19.xyz;
    u_xlat4.x = u_xlat29.x + -1.0;
    u_xlat4.x = u_xlat32 * u_xlat4.x;
    u_xlat4.x = u_xlat4.x * 0.100000001;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat19.xyz = u_xlat4.xxx * u_xlat19.xyz;
    u_xlat4.x = u_xlat29.x * u_xlat32;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat4.x = max(u_xlat4.x, 9.99999975e-05);
    u_xlat4.x = log2(u_xlat4.x);
    u_xlat4.x = u_xlat4.x * _ShoreFade;
    u_xlat4.x = exp2(u_xlat4.x);
    u_xlat6.xyz = _ShallowColor.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat6.xyz = u_xlat4.xxx * u_xlat6.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat1.xy = u_xlat1.xy / vs_TEXCOORD4.ww;
    u_xlat10_8.xyz = texture(_SceneScaledBufferBeforTransParent, u_xlat1.xy).xyz;
    u_xlat9.xyz = u_xlat6.xyz * u_xlat10_8.xyz;
    u_xlat1.x = 0.100000001 / _DeepColorDepth;
    u_xlat1.xw = u_xlat1.xw * u_xlat29.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xw = min(max(u_xlat1.xw, 0.0), 1.0);
#else
    u_xlat1.xw = clamp(u_xlat1.xw, 0.0, 1.0);
#endif
    u_xlat1.x = max(u_xlat1.x, 9.99999975e-05);
    u_xlat1.x = log2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _DeepColorFade;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat10.xyz = (-u_xlat6.xyz) * u_xlat10_8.xyz + _DeepColor.xyz;
    u_xlat10.xyz = u_xlat1.xxx * u_xlat10.xyz + u_xlat9.xyz;
    u_xlat11.xyz = u_xlat16_2.xyz * _DistortionIntensity.xyz;
    u_xlat12.x = vs_TEXCOORD8.x;
    u_xlat12.y = vs_TEXCOORD9.x;
    u_xlat12.z = vs_TEXCOORD6.x;
    u_xlat12.x = dot(u_xlat12.xyz, u_xlat11.xyz);
    u_xlat13.x = vs_TEXCOORD8.y;
    u_xlat13.y = vs_TEXCOORD9.y;
    u_xlat13.z = vs_TEXCOORD6.y;
    u_xlat12.y = dot(u_xlat13.xyz, u_xlat11.xyz);
    u_xlat13.x = vs_TEXCOORD8.z;
    u_xlat13.y = vs_TEXCOORD9.z;
    u_xlat13.z = vs_TEXCOORD6.z;
    u_xlat12.z = dot(u_xlat13.xyz, u_xlat11.xyz);
    u_xlat1.x = dot(u_xlat12.xyz, u_xlat12.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat12.xyz = u_xlat1.xxx * u_xlat12.xyz;
    u_xlat1.x = dot((-u_xlat7.xyz), u_xlat12.xyz);
    u_xlat1.x = u_xlat1.x + u_xlat1.x;
    u_xlat7.xyz = u_xlat12.xyz * (-u_xlat1.xxx) + (-u_xlat7.xyz);
    u_xlat10_0 = textureLod(_ReflectionSkyCubeMap, u_xlat7.xyz, 0.0);
    u_xlat16_2.x = u_xlat10_0.w + -1.0;
    u_xlat16_2.x = _ReflectionSkyCubeMap_HDR.w * u_xlat16_2.x + 1.0;
    u_xlat16_2.x = log2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * _ReflectionSkyCubeMap_HDR.y;
    u_xlat16_2.x = exp2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * _ReflectionSkyCubeMap_HDR.x;
    u_xlat16_16.xyz = u_xlat10_0.xyz * u_xlat16_2.xxx;
    u_xlat1.xy = u_xlat11.xy * vec2(_SSRDistortion);
    u_xlat18.x = float(1.0) / _SSRDistortion_Shore;
    u_xlat18.x = u_xlat29.x * u_xlat18.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat18.x = min(max(u_xlat18.x, 0.0), 1.0);
#else
    u_xlat18.x = clamp(u_xlat18.x, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat1.xy * u_xlat18.xx;
    u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD4.ww + vs_TEXCOORD4.xy;
    u_xlat1.xy = u_xlat1.xy / vs_TEXCOORD4.ww;
    u_xlat10_3 = texture(_SSRTexture, u_xlat1.xy).wxyz;
    u_xlat16_7.xyz = (-u_xlat16_2.xxx) * u_xlat10_0.xyz + u_xlat10_3.yzw;
    u_xlat7.xyz = u_xlat16_7.xyz * vec3(vec3(_SSRIntensity, _SSRIntensity, _SSRIntensity));
    u_xlat16_3.x = u_xlat10_3.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat7.xyz = u_xlat16_3.xxx * u_xlat7.xyz + u_xlat16_16.xyz;
    u_xlat1.x = u_xlat46 * _FresnelPower;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _ReflectionIntensity;
    u_xlat15.x = float(1.0) / _ShoreReflectionFade;
    u_xlat15.x = u_xlat15.x * u_xlat29.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat15.x = min(max(u_xlat15.x, 0.0), 1.0);
#else
    u_xlat15.x = clamp(u_xlat15.x, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat15.x * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat18.xyz = (-u_xlat10.xyz) + u_xlat7.xyz;
    u_xlat1.xyz = u_xlat1.xxx * u_xlat18.xyz + u_xlat10.xyz;
    u_xlat1.xyz = (-u_xlat6.xyz) * u_xlat10_8.xyz + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat4.xxx * u_xlat1.xyz + u_xlat9.xyz;
    u_xlat0.xyz = u_xlat19.xyz * u_xlat5.xxx + u_xlat1.xyz;
    u_xlat0.w = u_xlat1.w * vs_COLOR0.w;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "MSAA_INTERPOLATION" "MHY_SHADER_HIGH" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
uniform 	vec4 hlslcc_mtx4x4_mhyJitteredVP[4];
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
out highp vec4 vs_TEXCOORD9;
out highp vec4 vs_TEXCOORD10;
float u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec4 u_xlat8;
vec3 u_xlat9;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat9.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4_mhyJitteredVP[1];
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[3] * u_xlat2.wwww + u_xlat1;
    u_xlat3.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    u_xlat3.xyw = u_xlat1.xyw;
    gl_Position = u_xlat3;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD1.w = 1.0;
    u_xlat4.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat4.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat4.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat1.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
    u_xlat16_5.x = u_xlat4.y * u_xlat4.y;
    u_xlat16_5.x = u_xlat4.x * u_xlat4.x + (-u_xlat16_5.x);
    u_xlat16_6 = u_xlat4.yzzx * u_xlat4.xyzz;
    u_xlat16_7.x = dot(unity_SHBr, u_xlat16_6);
    u_xlat16_7.y = dot(unity_SHBg, u_xlat16_6);
    u_xlat16_7.z = dot(unity_SHBb, u_xlat16_6);
    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_7.xyz;
    u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat4.w = 1.0;
    u_xlat16_6.x = dot(unity_SHAr, u_xlat4);
    u_xlat16_6.y = dot(unity_SHAg, u_xlat4);
    u_xlat16_6.z = dot(unity_SHAb, u_xlat4);
    u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_6.xyz;
    vs_TEXCOORD1.xyz = u_xlat16_5.xyz;
    u_xlat1.x = u_xlat3.y * _ProjectionParams.x;
    u_xlat8.w = u_xlat1.x * 0.5;
    u_xlat8.xz = u_xlat3.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.z = u_xlat1.z;
    u_xlat3.xy = u_xlat8.zz + u_xlat8.xw;
    vs_TEXCOORD2 = u_xlat3;
    vs_TEXCOORD4.xyw = u_xlat3.xyw;
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD3.w = 0.0;
    u_xlat1.x = u_xlat2.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat2.x + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat2.z + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat2.w + u_xlat1.x;
    vs_TEXCOORD3.z = (-u_xlat1.x);
    vs_TEXCOORD5.w = 0.0;
    vs_TEXCOORD5.xyz = u_xlat9.xyz;
    u_xlat9.xyz = (-u_xlat9.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD6.w = 0.0;
    vs_TEXCOORD6.xyz = u_xlat4.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].www + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * in_POSITION0.yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.zzz + u_xlat1.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.www + u_xlat1.xyz;
    vs_TEXCOORD7.xyz = u_xlat1.xyz * vec3(-1.0, -1.0, 1.0);
    vs_TEXCOORD7.w = 0.0;
    u_xlat1.xyz = in_TANGENT0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat0 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0 = inversesqrt(u_xlat0);
    u_xlat1.xyz = vec3(u_xlat0) * u_xlat1.xyz;
    vs_TEXCOORD8.xyz = u_xlat1.xyz;
    vs_TEXCOORD8.w = 0.0;
    u_xlat2.xyz = u_xlat1.yzx * u_xlat4.zxy;
    u_xlat1.xyz = u_xlat4.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
    u_xlat0 = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD9.xyz = vec3(u_xlat0) * u_xlat1.xyz;
    vs_TEXCOORD9.w = 0.0;
    u_xlat0 = u_xlat9.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat9.x + u_xlat0;
    vs_TEXCOORD10.w = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat9.z + u_xlat0;
    vs_TEXCOORD10.xyz = u_xlat9.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ZBufferParams;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _NormalMapScale;
uniform 	float _Normal01_U_Speed;
uniform 	float _Normal01_VSpeed;
uniform 	float _NormalMapBias;
uniform 	float _Normal02_U_Speed;
uniform 	float _Normal02_V_Speed;
uniform 	float _RefractionIntensity;
uniform 	float _OpacityByDepth;
uniform 	float _SpecularIntensity;
uniform 	vec3 _ES_MoonDirection;
uniform 	vec3 _ES_SunDirection;
uniform 	float _Gloss;
uniform 	float _ShoreTransparency;
uniform 	float _SpecularPower;
uniform 	vec4 _ShallowColor;
uniform 	float _ShoreFade;
uniform 	vec4 _DeepColor;
uniform 	float _DeepColorDepth;
uniform 	float _DeepColorFade;
uniform 	vec4 _DistortionIntensity;
uniform 	float _SSRDistortion;
uniform 	float _SSRDistortion_Shore;
uniform 	float _SSRIntensity;
uniform 	float _ReflectionIntensity;
uniform 	float _FresnelPower;
uniform 	float _ShoreReflectionFade;
uniform 	mediump float _ProjectUVScale;
uniform 	vec4 _ReflectionSkyCubeMap_HDR;
uniform lowp sampler2D _Normal01;
uniform lowp sampler2D _Normal02;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _SceneScaledBufferBeforTransParent;
uniform lowp samplerCube _ReflectionSkyCubeMap;
uniform lowp sampler2D _SSRTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD8;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
lowp vec4 u_xlat10_3;
vec3 u_xlat4;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
mediump vec3 u_xlat16_7;
lowp vec3 u_xlat10_8;
vec3 u_xlat9;
vec3 u_xlat10;
vec3 u_xlat11;
vec3 u_xlat12;
vec3 u_xlat13;
vec2 u_xlat15;
mediump vec3 u_xlat16_16;
vec3 u_xlat18;
bool u_xlatb18;
vec3 u_xlat19;
vec2 u_xlat29;
float u_xlat32;
float u_xlat43;
float u_xlat46;
bool u_xlatb46;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD5.zx * vec2(vec2(_ProjectUVScale, _ProjectUVScale));
    u_xlat1.x = _Time.y * _Normal01_U_Speed + u_xlat0.y;
    u_xlat1.yz = _Time.yy * vec2(_Normal01_VSpeed, _Normal02_U_Speed) + u_xlat0.xy;
    u_xlat1.w = _Time.y * _Normal02_V_Speed + u_xlat0.x;
    u_xlat10_0.xyz = texture(_Normal01, u_xlat1.xy, _NormalMapBias).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_2.xy = u_xlat16_0.xy * vec2(_NormalMapScale);
    u_xlat10_1.xyz = texture(_Normal02, u_xlat1.zw, _NormalMapBias).xyz;
    u_xlat16_0.w = -1.0;
    u_xlat16_3.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.wwz;
    u_xlat16_3.xy = u_xlat16_3.xy * vec2(_NormalMapScale);
    u_xlat16_2.z = -1.0;
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
    u_xlat1.x = float(1.0) / vs_TEXCOORD4.w;
    u_xlat15.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat15.x = texture(_CameraDepthTexture, u_xlat15.xy).x;
    u_xlat15.x = _ZBufferParams.z * u_xlat15.x + _ZBufferParams.w;
    u_xlat15.x = float(1.0) / u_xlat15.x;
    u_xlat29.xy = u_xlat16_2.xy * vec2(vec2(_RefractionIntensity, _RefractionIntensity));
    u_xlat1.x = u_xlat1.x * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.xz = u_xlat1.xx * u_xlat29.xy;
    u_xlat1.xz = u_xlat1.xz * vs_TEXCOORD4.ww;
    u_xlat15.x = u_xlat15.x + (-vs_TEXCOORD4.w);
#ifdef UNITY_ADRENO_ES3
    u_xlat15.x = min(max(u_xlat15.x, 0.0), 1.0);
#else
    u_xlat15.x = clamp(u_xlat15.x, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat15.xx * u_xlat1.xz;
    u_xlat1.z = 0.0;
    u_xlat4.xyz = u_xlat1.xyz + vs_TEXCOORD4.xyw;
    u_xlat4.xy = u_xlat4.xy / u_xlat4.zz;
    u_xlat43 = texture(_CameraDepthTexture, u_xlat4.xy).x;
    u_xlat43 = _ZBufferParams.z * u_xlat43 + _ZBufferParams.w;
    u_xlat43 = float(1.0) / u_xlat43;
    u_xlat43 = u_xlat43 + (-vs_TEXCOORD4.w);
#ifdef UNITY_ADRENO_ES3
    u_xlat43 = min(max(u_xlat43, 0.0), 1.0);
#else
    u_xlat43 = clamp(u_xlat43, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat43) * u_xlat1.xyz + vs_TEXCOORD4.xyw;
    u_xlat29.xy = u_xlat1.xy / u_xlat1.zz;
    u_xlat29.x = texture(_CameraDepthTexture, u_xlat29.xy).x;
    u_xlat29.x = _ZBufferParams.z * u_xlat29.x + _ZBufferParams.w;
    u_xlat29.x = float(1.0) / u_xlat29.x;
    u_xlat29.x = u_xlat29.x + (-vs_TEXCOORD4.w);
    u_xlat1.w = 0.100000001 / _OpacityByDepth;
    u_xlat16_3.xz = u_xlat16_2.xy;
    u_xlat16_3.y = 1.0;
    u_xlat16_4.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
    u_xlat16_4.x = inversesqrt(u_xlat16_4.x);
    u_xlat16_4.xyz = u_xlat16_3.xyz * u_xlat16_4.xxx;
#ifdef UNITY_ADRENO_ES3
    u_xlatb46 = !!(0.0>=_ES_MoonDirection.y);
#else
    u_xlatb46 = 0.0>=_ES_MoonDirection.y;
#endif
    u_xlat5.xyz = (bool(u_xlatb46)) ? _ES_SunDirection.xyz : _ES_MoonDirection.xyz;
    u_xlat6.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat46 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat46 = inversesqrt(u_xlat46);
    u_xlat7.xyz = vec3(u_xlat46) * u_xlat6.xyz;
    u_xlat5.xyz = u_xlat6.xyz * vec3(u_xlat46) + u_xlat5.xyz;
    u_xlat46 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat46 = inversesqrt(u_xlat46);
    u_xlat5.xyz = vec3(u_xlat46) * u_xlat5.xyz;
    u_xlat4.x = dot(u_xlat16_4.xyz, u_xlat5.xyz);
    u_xlat18.x = _Gloss * 128.0;
    u_xlat4.x = max(u_xlat4.x, 9.99999975e-05);
    u_xlat4.x = log2(u_xlat4.x);
    u_xlat4.x = u_xlat4.x * u_xlat18.x;
    u_xlat4.x = exp2(u_xlat4.x);
    u_xlat4.x = u_xlat4.x * _SpecularIntensity;
    u_xlat4.x = max(u_xlat4.x, 0.0);
    u_xlat4.x = min(u_xlat4.x, 16.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_ES_MoonDirection.y>=9.99999975e-05);
#else
    u_xlatb18 = _ES_MoonDirection.y>=9.99999975e-05;
#endif
    u_xlat18.x = u_xlatb18 ? 1.0 : float(0.0);
    u_xlat32 = _ES_MoonDirection.y + -1.0;
    u_xlat18.x = u_xlat18.x * u_xlat32 + 1.0;
    u_xlat32 = float(1.0) / _ShoreTransparency;
    u_xlat46 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat46 = inversesqrt(u_xlat46);
    u_xlat5.xyz = vec3(u_xlat46) * vs_TEXCOORD6.xyz;
    u_xlat46 = dot(u_xlat7.xyz, u_xlat5.xyz);
    u_xlat46 = (-u_xlat46) + 1.0;
    u_xlat46 = max(u_xlat46, 9.99999975e-05);
    u_xlat46 = log2(u_xlat46);
    u_xlat5.x = u_xlat46 * _SpecularPower;
    u_xlat5.x = exp2(u_xlat5.x);
    u_xlat19.xyz = u_xlat18.xxx * _LightColor0.xyz;
    u_xlat19.xyz = u_xlat4.xxx * u_xlat19.xyz;
    u_xlat4.x = u_xlat29.x + -1.0;
    u_xlat4.x = u_xlat32 * u_xlat4.x;
    u_xlat4.x = u_xlat4.x * 0.100000001;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat19.xyz = u_xlat4.xxx * u_xlat19.xyz;
    u_xlat4.x = u_xlat29.x * u_xlat32;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat4.x = max(u_xlat4.x, 9.99999975e-05);
    u_xlat4.x = log2(u_xlat4.x);
    u_xlat4.x = u_xlat4.x * _ShoreFade;
    u_xlat4.x = exp2(u_xlat4.x);
    u_xlat6.xyz = _ShallowColor.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat6.xyz = u_xlat4.xxx * u_xlat6.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat1.xy = u_xlat1.xy / vs_TEXCOORD4.ww;
    u_xlat10_8.xyz = texture(_SceneScaledBufferBeforTransParent, u_xlat1.xy).xyz;
    u_xlat9.xyz = u_xlat6.xyz * u_xlat10_8.xyz;
    u_xlat1.x = 0.100000001 / _DeepColorDepth;
    u_xlat1.xw = u_xlat1.xw * u_xlat29.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xw = min(max(u_xlat1.xw, 0.0), 1.0);
#else
    u_xlat1.xw = clamp(u_xlat1.xw, 0.0, 1.0);
#endif
    u_xlat1.x = max(u_xlat1.x, 9.99999975e-05);
    u_xlat1.x = log2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _DeepColorFade;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat10.xyz = (-u_xlat6.xyz) * u_xlat10_8.xyz + _DeepColor.xyz;
    u_xlat10.xyz = u_xlat1.xxx * u_xlat10.xyz + u_xlat9.xyz;
    u_xlat11.xyz = u_xlat16_2.xyz * _DistortionIntensity.xyz;
    u_xlat12.x = vs_TEXCOORD8.x;
    u_xlat12.y = vs_TEXCOORD9.x;
    u_xlat12.z = vs_TEXCOORD6.x;
    u_xlat12.x = dot(u_xlat12.xyz, u_xlat11.xyz);
    u_xlat13.x = vs_TEXCOORD8.y;
    u_xlat13.y = vs_TEXCOORD9.y;
    u_xlat13.z = vs_TEXCOORD6.y;
    u_xlat12.y = dot(u_xlat13.xyz, u_xlat11.xyz);
    u_xlat13.x = vs_TEXCOORD8.z;
    u_xlat13.y = vs_TEXCOORD9.z;
    u_xlat13.z = vs_TEXCOORD6.z;
    u_xlat12.z = dot(u_xlat13.xyz, u_xlat11.xyz);
    u_xlat1.x = dot(u_xlat12.xyz, u_xlat12.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat12.xyz = u_xlat1.xxx * u_xlat12.xyz;
    u_xlat1.x = dot((-u_xlat7.xyz), u_xlat12.xyz);
    u_xlat1.x = u_xlat1.x + u_xlat1.x;
    u_xlat7.xyz = u_xlat12.xyz * (-u_xlat1.xxx) + (-u_xlat7.xyz);
    u_xlat10_0 = textureLod(_ReflectionSkyCubeMap, u_xlat7.xyz, 0.0);
    u_xlat16_2.x = u_xlat10_0.w + -1.0;
    u_xlat16_2.x = _ReflectionSkyCubeMap_HDR.w * u_xlat16_2.x + 1.0;
    u_xlat16_2.x = log2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * _ReflectionSkyCubeMap_HDR.y;
    u_xlat16_2.x = exp2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * _ReflectionSkyCubeMap_HDR.x;
    u_xlat16_16.xyz = u_xlat10_0.xyz * u_xlat16_2.xxx;
    u_xlat1.xy = u_xlat11.xy * vec2(_SSRDistortion);
    u_xlat18.x = float(1.0) / _SSRDistortion_Shore;
    u_xlat18.x = u_xlat29.x * u_xlat18.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat18.x = min(max(u_xlat18.x, 0.0), 1.0);
#else
    u_xlat18.x = clamp(u_xlat18.x, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat1.xy * u_xlat18.xx;
    u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD4.ww + vs_TEXCOORD4.xy;
    u_xlat1.xy = u_xlat1.xy / vs_TEXCOORD4.ww;
    u_xlat10_3 = texture(_SSRTexture, u_xlat1.xy).wxyz;
    u_xlat16_7.xyz = (-u_xlat16_2.xxx) * u_xlat10_0.xyz + u_xlat10_3.yzw;
    u_xlat7.xyz = u_xlat16_7.xyz * vec3(vec3(_SSRIntensity, _SSRIntensity, _SSRIntensity));
    u_xlat16_3.x = u_xlat10_3.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat7.xyz = u_xlat16_3.xxx * u_xlat7.xyz + u_xlat16_16.xyz;
    u_xlat1.x = u_xlat46 * _FresnelPower;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _ReflectionIntensity;
    u_xlat15.x = float(1.0) / _ShoreReflectionFade;
    u_xlat15.x = u_xlat15.x * u_xlat29.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat15.x = min(max(u_xlat15.x, 0.0), 1.0);
#else
    u_xlat15.x = clamp(u_xlat15.x, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat15.x * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat18.xyz = (-u_xlat10.xyz) + u_xlat7.xyz;
    u_xlat1.xyz = u_xlat1.xxx * u_xlat18.xyz + u_xlat10.xyz;
    u_xlat1.xyz = (-u_xlat6.xyz) * u_xlat10_8.xyz + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat4.xxx * u_xlat1.xyz + u_xlat9.xyz;
    u_xlat0.xyz = u_xlat19.xyz * u_xlat5.xxx + u_xlat1.xyz;
    u_xlat0.w = u_xlat1.w * vs_COLOR0.w;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "MSAA_INTERPOLATION" "MHY_SHADER_MIDDLE" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump float _MHYZBias;
uniform 	vec4 hlslcc_mtx4x4_mhyJitteredVP[4];
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
out highp vec4 vs_TEXCOORD9;
out highp vec4 vs_TEXCOORD10;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec4 u_xlat8;
float u_xlat27;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4_mhyJitteredVP[1];
    u_xlat2 = hlslcc_mtx4x4_mhyJitteredVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4_mhyJitteredVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4_mhyJitteredVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat3.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    u_xlat3.xyw = u_xlat2.xyw;
    gl_Position = u_xlat3;
    vs_COLOR0 = in_COLOR0;
    u_xlat4.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat4.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat4.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat27 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat4.xyz = vec3(u_xlat27) * u_xlat4.xyz;
    u_xlat16_5.x = u_xlat4.y * u_xlat4.y;
    u_xlat16_5.x = u_xlat4.x * u_xlat4.x + (-u_xlat16_5.x);
    u_xlat16_6 = u_xlat4.yzzx * u_xlat4.xyzz;
    u_xlat16_7.x = dot(unity_SHBr, u_xlat16_6);
    u_xlat16_7.y = dot(unity_SHBg, u_xlat16_6);
    u_xlat16_7.z = dot(unity_SHBb, u_xlat16_6);
    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_7.xyz;
    u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat4.w = 1.0;
    u_xlat16_6.x = dot(unity_SHAr, u_xlat4);
    u_xlat16_6.y = dot(unity_SHAg, u_xlat4);
    u_xlat16_6.z = dot(unity_SHAb, u_xlat4);
    u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_6.xyz;
    vs_TEXCOORD1.xyz = u_xlat16_5.xyz;
    vs_TEXCOORD1.w = 1.0;
    u_xlat27 = u_xlat3.y * _ProjectionParams.x;
    u_xlat8.w = u_xlat27 * 0.5;
    u_xlat8.xz = u_xlat3.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.z = u_xlat2.z;
    u_xlat3.xy = u_xlat8.zz + u_xlat8.xw;
    vs_TEXCOORD2 = u_xlat3;
    vs_TEXCOORD4.xyw = u_xlat3.xyw;
    u_xlat27 = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat27 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat27;
    u_xlat27 = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat27;
    u_xlat27 = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat27;
    vs_TEXCOORD3.z = (-u_xlat27);
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD3.w = 0.0;
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD5.w = 0.0;
    vs_TEXCOORD6.xyz = u_xlat4.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[1].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].www + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * in_POSITION0.yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.zzz + u_xlat1.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.www + u_xlat1.xyz;
    vs_TEXCOORD7.xyz = u_xlat1.xyz * vec3(-1.0, -1.0, 1.0);
    vs_TEXCOORD7.w = 0.0;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat27 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat1.xyz = vec3(u_xlat27) * u_xlat1.xyz;
    vs_TEXCOORD8.xyz = u_xlat1.xyz;
    vs_TEXCOORD8.w = 0.0;
    u_xlat2.xyz = u_xlat1.yzx * u_xlat4.zxy;
    u_xlat1.xyz = u_xlat4.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
    u_xlat27 = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD9.xyz = vec3(u_xlat27) * u_xlat1.xyz;
    vs_TEXCOORD9.w = 0.0;
    u_xlat27 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat27 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat27;
    vs_TEXCOORD10.w = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat27;
    vs_TEXCOORD10.xyz = u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ZBufferParams;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _NormalMapScale;
uniform 	float _Normal01_U_Speed;
uniform 	float _Normal01_VSpeed;
uniform 	float _NormalMapBias;
uniform 	float _Normal02_U_Speed;
uniform 	float _Normal02_V_Speed;
uniform 	float _RefractionIntensity;
uniform 	float _OpacityByDepth;
uniform 	float _SpecularIntensity;
uniform 	vec3 _ES_MoonDirection;
uniform 	vec3 _ES_SunDirection;
uniform 	float _Gloss;
uniform 	float _ShoreTransparency;
uniform 	float _SpecularPower;
uniform 	vec4 _ShallowColor;
uniform 	float _ShoreFade;
uniform 	vec4 _DeepColor;
uniform 	float _DeepColorDepth;
uniform 	float _DeepColorFade;
uniform 	vec4 _DistortionIntensity;
uniform 	float _SSRDistortion;
uniform 	float _SSRDistortion_Shore;
uniform 	float _SSRIntensity;
uniform 	float _ReflectionIntensity;
uniform 	float _FresnelPower;
uniform 	float _ShoreReflectionFade;
uniform 	mediump float _ProjectUVScale;
uniform 	vec4 _ReflectionSkyCubeMap_HDR;
uniform lowp sampler2D _Normal01;
uniform lowp sampler2D _Normal02;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _SceneScaledBufferBeforTransParent;
uniform lowp samplerCube _ReflectionSkyCubeMap;
uniform lowp sampler2D _SSRTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD8;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
lowp vec4 u_xlat10_3;
vec3 u_xlat4;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
mediump vec3 u_xlat16_7;
lowp vec3 u_xlat10_8;
vec3 u_xlat9;
vec3 u_xlat10;
vec3 u_xlat11;
vec3 u_xlat12;
vec3 u_xlat13;
vec2 u_xlat15;
mediump vec3 u_xlat16_16;
vec3 u_xlat18;
bool u_xlatb18;
vec3 u_xlat19;
vec2 u_xlat29;
float u_xlat32;
float u_xlat43;
float u_xlat46;
bool u_xlatb46;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD5.zx * vec2(vec2(_ProjectUVScale, _ProjectUVScale));
    u_xlat1.x = _Time.y * _Normal01_U_Speed + u_xlat0.y;
    u_xlat1.yz = _Time.yy * vec2(_Normal01_VSpeed, _Normal02_U_Speed) + u_xlat0.xy;
    u_xlat1.w = _Time.y * _Normal02_V_Speed + u_xlat0.x;
    u_xlat10_0.xyz = texture(_Normal01, u_xlat1.xy, _NormalMapBias).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_2.xy = u_xlat16_0.xy * vec2(_NormalMapScale);
    u_xlat10_1.xyz = texture(_Normal02, u_xlat1.zw, _NormalMapBias).xyz;
    u_xlat16_0.w = -1.0;
    u_xlat16_3.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.wwz;
    u_xlat16_3.xy = u_xlat16_3.xy * vec2(_NormalMapScale);
    u_xlat16_2.z = -1.0;
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
    u_xlat1.x = float(1.0) / vs_TEXCOORD4.w;
    u_xlat15.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat15.x = texture(_CameraDepthTexture, u_xlat15.xy).x;
    u_xlat15.x = _ZBufferParams.z * u_xlat15.x + _ZBufferParams.w;
    u_xlat15.x = float(1.0) / u_xlat15.x;
    u_xlat29.xy = u_xlat16_2.xy * vec2(vec2(_RefractionIntensity, _RefractionIntensity));
    u_xlat1.x = u_xlat1.x * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.xz = u_xlat1.xx * u_xlat29.xy;
    u_xlat1.xz = u_xlat1.xz * vs_TEXCOORD4.ww;
    u_xlat15.x = u_xlat15.x + (-vs_TEXCOORD4.w);
#ifdef UNITY_ADRENO_ES3
    u_xlat15.x = min(max(u_xlat15.x, 0.0), 1.0);
#else
    u_xlat15.x = clamp(u_xlat15.x, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat15.xx * u_xlat1.xz;
    u_xlat1.z = 0.0;
    u_xlat4.xyz = u_xlat1.xyz + vs_TEXCOORD4.xyw;
    u_xlat4.xy = u_xlat4.xy / u_xlat4.zz;
    u_xlat43 = texture(_CameraDepthTexture, u_xlat4.xy).x;
    u_xlat43 = _ZBufferParams.z * u_xlat43 + _ZBufferParams.w;
    u_xlat43 = float(1.0) / u_xlat43;
    u_xlat43 = u_xlat43 + (-vs_TEXCOORD4.w);
#ifdef UNITY_ADRENO_ES3
    u_xlat43 = min(max(u_xlat43, 0.0), 1.0);
#else
    u_xlat43 = clamp(u_xlat43, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat43) * u_xlat1.xyz + vs_TEXCOORD4.xyw;
    u_xlat29.xy = u_xlat1.xy / u_xlat1.zz;
    u_xlat29.x = texture(_CameraDepthTexture, u_xlat29.xy).x;
    u_xlat29.x = _ZBufferParams.z * u_xlat29.x + _ZBufferParams.w;
    u_xlat29.x = float(1.0) / u_xlat29.x;
    u_xlat29.x = u_xlat29.x + (-vs_TEXCOORD4.w);
    u_xlat1.w = 0.100000001 / _OpacityByDepth;
    u_xlat16_3.xz = u_xlat16_2.xy;
    u_xlat16_3.y = 1.0;
    u_xlat16_4.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
    u_xlat16_4.x = inversesqrt(u_xlat16_4.x);
    u_xlat16_4.xyz = u_xlat16_3.xyz * u_xlat16_4.xxx;
#ifdef UNITY_ADRENO_ES3
    u_xlatb46 = !!(0.0>=_ES_MoonDirection.y);
#else
    u_xlatb46 = 0.0>=_ES_MoonDirection.y;
#endif
    u_xlat5.xyz = (bool(u_xlatb46)) ? _ES_SunDirection.xyz : _ES_MoonDirection.xyz;
    u_xlat6.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat46 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat46 = inversesqrt(u_xlat46);
    u_xlat7.xyz = vec3(u_xlat46) * u_xlat6.xyz;
    u_xlat5.xyz = u_xlat6.xyz * vec3(u_xlat46) + u_xlat5.xyz;
    u_xlat46 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat46 = inversesqrt(u_xlat46);
    u_xlat5.xyz = vec3(u_xlat46) * u_xlat5.xyz;
    u_xlat4.x = dot(u_xlat16_4.xyz, u_xlat5.xyz);
    u_xlat18.x = _Gloss * 128.0;
    u_xlat4.x = max(u_xlat4.x, 9.99999975e-05);
    u_xlat4.x = log2(u_xlat4.x);
    u_xlat4.x = u_xlat4.x * u_xlat18.x;
    u_xlat4.x = exp2(u_xlat4.x);
    u_xlat4.x = u_xlat4.x * _SpecularIntensity;
    u_xlat4.x = max(u_xlat4.x, 0.0);
    u_xlat4.x = min(u_xlat4.x, 16.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_ES_MoonDirection.y>=9.99999975e-05);
#else
    u_xlatb18 = _ES_MoonDirection.y>=9.99999975e-05;
#endif
    u_xlat18.x = u_xlatb18 ? 1.0 : float(0.0);
    u_xlat32 = _ES_MoonDirection.y + -1.0;
    u_xlat18.x = u_xlat18.x * u_xlat32 + 1.0;
    u_xlat32 = float(1.0) / _ShoreTransparency;
    u_xlat46 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat46 = inversesqrt(u_xlat46);
    u_xlat5.xyz = vec3(u_xlat46) * vs_TEXCOORD6.xyz;
    u_xlat46 = dot(u_xlat7.xyz, u_xlat5.xyz);
    u_xlat46 = (-u_xlat46) + 1.0;
    u_xlat46 = max(u_xlat46, 9.99999975e-05);
    u_xlat46 = log2(u_xlat46);
    u_xlat5.x = u_xlat46 * _SpecularPower;
    u_xlat5.x = exp2(u_xlat5.x);
    u_xlat19.xyz = u_xlat18.xxx * _LightColor0.xyz;
    u_xlat19.xyz = u_xlat4.xxx * u_xlat19.xyz;
    u_xlat4.x = u_xlat29.x + -1.0;
    u_xlat4.x = u_xlat32 * u_xlat4.x;
    u_xlat4.x = u_xlat4.x * 0.100000001;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat19.xyz = u_xlat4.xxx * u_xlat19.xyz;
    u_xlat4.x = u_xlat29.x * u_xlat32;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat4.x = max(u_xlat4.x, 9.99999975e-05);
    u_xlat4.x = log2(u_xlat4.x);
    u_xlat4.x = u_xlat4.x * _ShoreFade;
    u_xlat4.x = exp2(u_xlat4.x);
    u_xlat6.xyz = _ShallowColor.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat6.xyz = u_xlat4.xxx * u_xlat6.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat1.xy = u_xlat1.xy / vs_TEXCOORD4.ww;
    u_xlat10_8.xyz = texture(_SceneScaledBufferBeforTransParent, u_xlat1.xy).xyz;
    u_xlat9.xyz = u_xlat6.xyz * u_xlat10_8.xyz;
    u_xlat1.x = 0.100000001 / _DeepColorDepth;
    u_xlat1.xw = u_xlat1.xw * u_xlat29.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xw = min(max(u_xlat1.xw, 0.0), 1.0);
#else
    u_xlat1.xw = clamp(u_xlat1.xw, 0.0, 1.0);
#endif
    u_xlat1.x = max(u_xlat1.x, 9.99999975e-05);
    u_xlat1.x = log2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _DeepColorFade;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat10.xyz = (-u_xlat6.xyz) * u_xlat10_8.xyz + _DeepColor.xyz;
    u_xlat10.xyz = u_xlat1.xxx * u_xlat10.xyz + u_xlat9.xyz;
    u_xlat11.xyz = u_xlat16_2.xyz * _DistortionIntensity.xyz;
    u_xlat12.x = vs_TEXCOORD8.x;
    u_xlat12.y = vs_TEXCOORD9.x;
    u_xlat12.z = vs_TEXCOORD6.x;
    u_xlat12.x = dot(u_xlat12.xyz, u_xlat11.xyz);
    u_xlat13.x = vs_TEXCOORD8.y;
    u_xlat13.y = vs_TEXCOORD9.y;
    u_xlat13.z = vs_TEXCOORD6.y;
    u_xlat12.y = dot(u_xlat13.xyz, u_xlat11.xyz);
    u_xlat13.x = vs_TEXCOORD8.z;
    u_xlat13.y = vs_TEXCOORD9.z;
    u_xlat13.z = vs_TEXCOORD6.z;
    u_xlat12.z = dot(u_xlat13.xyz, u_xlat11.xyz);
    u_xlat1.x = dot(u_xlat12.xyz, u_xlat12.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat12.xyz = u_xlat1.xxx * u_xlat12.xyz;
    u_xlat1.x = dot((-u_xlat7.xyz), u_xlat12.xyz);
    u_xlat1.x = u_xlat1.x + u_xlat1.x;
    u_xlat7.xyz = u_xlat12.xyz * (-u_xlat1.xxx) + (-u_xlat7.xyz);
    u_xlat10_0 = textureLod(_ReflectionSkyCubeMap, u_xlat7.xyz, 0.0);
    u_xlat16_2.x = u_xlat10_0.w + -1.0;
    u_xlat16_2.x = _ReflectionSkyCubeMap_HDR.w * u_xlat16_2.x + 1.0;
    u_xlat16_2.x = log2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * _ReflectionSkyCubeMap_HDR.y;
    u_xlat16_2.x = exp2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * _ReflectionSkyCubeMap_HDR.x;
    u_xlat16_16.xyz = u_xlat10_0.xyz * u_xlat16_2.xxx;
    u_xlat1.xy = u_xlat11.xy * vec2(_SSRDistortion);
    u_xlat18.x = float(1.0) / _SSRDistortion_Shore;
    u_xlat18.x = u_xlat29.x * u_xlat18.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat18.x = min(max(u_xlat18.x, 0.0), 1.0);
#else
    u_xlat18.x = clamp(u_xlat18.x, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat1.xy * u_xlat18.xx;
    u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD4.ww + vs_TEXCOORD4.xy;
    u_xlat1.xy = u_xlat1.xy / vs_TEXCOORD4.ww;
    u_xlat10_3 = texture(_SSRTexture, u_xlat1.xy).wxyz;
    u_xlat16_7.xyz = (-u_xlat16_2.xxx) * u_xlat10_0.xyz + u_xlat10_3.yzw;
    u_xlat7.xyz = u_xlat16_7.xyz * vec3(vec3(_SSRIntensity, _SSRIntensity, _SSRIntensity));
    u_xlat16_3.x = u_xlat10_3.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat7.xyz = u_xlat16_3.xxx * u_xlat7.xyz + u_xlat16_16.xyz;
    u_xlat1.x = u_xlat46 * _FresnelPower;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _ReflectionIntensity;
    u_xlat15.x = float(1.0) / _ShoreReflectionFade;
    u_xlat15.x = u_xlat15.x * u_xlat29.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat15.x = min(max(u_xlat15.x, 0.0), 1.0);
#else
    u_xlat15.x = clamp(u_xlat15.x, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat15.x * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat18.xyz = (-u_xlat10.xyz) + u_xlat7.xyz;
    u_xlat1.xyz = u_xlat1.xxx * u_xlat18.xyz + u_xlat10.xyz;
    u_xlat1.xyz = (-u_xlat6.xyz) * u_xlat10_8.xyz + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat4.xxx * u_xlat1.xyz + u_xlat9.xyz;
    u_xlat0.xyz = u_xlat19.xyz * u_xlat5.xxx + u_xlat1.xyz;
    u_xlat0.w = u_xlat1.w * vs_COLOR0.w;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "MSAA_INTERPOLATION" "MHY_SHADER_MIDDLE" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
uniform 	vec4 hlslcc_mtx4x4_mhyJitteredVP[4];
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
out highp vec4 vs_TEXCOORD9;
out highp vec4 vs_TEXCOORD10;
float u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec4 u_xlat8;
vec3 u_xlat9;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat9.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4_mhyJitteredVP[1];
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[3] * u_xlat2.wwww + u_xlat1;
    u_xlat3.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    u_xlat3.xyw = u_xlat1.xyw;
    gl_Position = u_xlat3;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD1.w = 1.0;
    u_xlat4.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat4.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat4.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat1.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
    u_xlat16_5.x = u_xlat4.y * u_xlat4.y;
    u_xlat16_5.x = u_xlat4.x * u_xlat4.x + (-u_xlat16_5.x);
    u_xlat16_6 = u_xlat4.yzzx * u_xlat4.xyzz;
    u_xlat16_7.x = dot(unity_SHBr, u_xlat16_6);
    u_xlat16_7.y = dot(unity_SHBg, u_xlat16_6);
    u_xlat16_7.z = dot(unity_SHBb, u_xlat16_6);
    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_7.xyz;
    u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat4.w = 1.0;
    u_xlat16_6.x = dot(unity_SHAr, u_xlat4);
    u_xlat16_6.y = dot(unity_SHAg, u_xlat4);
    u_xlat16_6.z = dot(unity_SHAb, u_xlat4);
    u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_6.xyz;
    vs_TEXCOORD1.xyz = u_xlat16_5.xyz;
    u_xlat1.x = u_xlat3.y * _ProjectionParams.x;
    u_xlat8.w = u_xlat1.x * 0.5;
    u_xlat8.xz = u_xlat3.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.z = u_xlat1.z;
    u_xlat3.xy = u_xlat8.zz + u_xlat8.xw;
    vs_TEXCOORD2 = u_xlat3;
    vs_TEXCOORD4.xyw = u_xlat3.xyw;
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD3.w = 0.0;
    u_xlat1.x = u_xlat2.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat2.x + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat2.z + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat2.w + u_xlat1.x;
    vs_TEXCOORD3.z = (-u_xlat1.x);
    vs_TEXCOORD5.w = 0.0;
    vs_TEXCOORD5.xyz = u_xlat9.xyz;
    u_xlat9.xyz = (-u_xlat9.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD6.w = 0.0;
    vs_TEXCOORD6.xyz = u_xlat4.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].www + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * in_POSITION0.yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.zzz + u_xlat1.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.www + u_xlat1.xyz;
    vs_TEXCOORD7.xyz = u_xlat1.xyz * vec3(-1.0, -1.0, 1.0);
    vs_TEXCOORD7.w = 0.0;
    u_xlat1.xyz = in_TANGENT0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat0 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0 = inversesqrt(u_xlat0);
    u_xlat1.xyz = vec3(u_xlat0) * u_xlat1.xyz;
    vs_TEXCOORD8.xyz = u_xlat1.xyz;
    vs_TEXCOORD8.w = 0.0;
    u_xlat2.xyz = u_xlat1.yzx * u_xlat4.zxy;
    u_xlat1.xyz = u_xlat4.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
    u_xlat0 = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD9.xyz = vec3(u_xlat0) * u_xlat1.xyz;
    vs_TEXCOORD9.w = 0.0;
    u_xlat0 = u_xlat9.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat9.x + u_xlat0;
    vs_TEXCOORD10.w = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat9.z + u_xlat0;
    vs_TEXCOORD10.xyz = u_xlat9.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ZBufferParams;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _NormalMapScale;
uniform 	float _Normal01_U_Speed;
uniform 	float _Normal01_VSpeed;
uniform 	float _NormalMapBias;
uniform 	float _Normal02_U_Speed;
uniform 	float _Normal02_V_Speed;
uniform 	float _RefractionIntensity;
uniform 	float _OpacityByDepth;
uniform 	float _SpecularIntensity;
uniform 	vec3 _ES_MoonDirection;
uniform 	vec3 _ES_SunDirection;
uniform 	float _Gloss;
uniform 	float _ShoreTransparency;
uniform 	float _SpecularPower;
uniform 	vec4 _ShallowColor;
uniform 	float _ShoreFade;
uniform 	vec4 _DeepColor;
uniform 	float _DeepColorDepth;
uniform 	float _DeepColorFade;
uniform 	vec4 _DistortionIntensity;
uniform 	float _SSRDistortion;
uniform 	float _SSRDistortion_Shore;
uniform 	float _SSRIntensity;
uniform 	float _ReflectionIntensity;
uniform 	float _FresnelPower;
uniform 	float _ShoreReflectionFade;
uniform 	mediump float _ProjectUVScale;
uniform 	vec4 _ReflectionSkyCubeMap_HDR;
uniform lowp sampler2D _Normal01;
uniform lowp sampler2D _Normal02;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _SceneScaledBufferBeforTransParent;
uniform lowp samplerCube _ReflectionSkyCubeMap;
uniform lowp sampler2D _SSRTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD8;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
lowp vec4 u_xlat10_3;
vec3 u_xlat4;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
mediump vec3 u_xlat16_7;
lowp vec3 u_xlat10_8;
vec3 u_xlat9;
vec3 u_xlat10;
vec3 u_xlat11;
vec3 u_xlat12;
vec3 u_xlat13;
vec2 u_xlat15;
mediump vec3 u_xlat16_16;
vec3 u_xlat18;
bool u_xlatb18;
vec3 u_xlat19;
vec2 u_xlat29;
float u_xlat32;
float u_xlat43;
float u_xlat46;
bool u_xlatb46;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD5.zx * vec2(vec2(_ProjectUVScale, _ProjectUVScale));
    u_xlat1.x = _Time.y * _Normal01_U_Speed + u_xlat0.y;
    u_xlat1.yz = _Time.yy * vec2(_Normal01_VSpeed, _Normal02_U_Speed) + u_xlat0.xy;
    u_xlat1.w = _Time.y * _Normal02_V_Speed + u_xlat0.x;
    u_xlat10_0.xyz = texture(_Normal01, u_xlat1.xy, _NormalMapBias).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_2.xy = u_xlat16_0.xy * vec2(_NormalMapScale);
    u_xlat10_1.xyz = texture(_Normal02, u_xlat1.zw, _NormalMapBias).xyz;
    u_xlat16_0.w = -1.0;
    u_xlat16_3.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.wwz;
    u_xlat16_3.xy = u_xlat16_3.xy * vec2(_NormalMapScale);
    u_xlat16_2.z = -1.0;
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
    u_xlat1.x = float(1.0) / vs_TEXCOORD4.w;
    u_xlat15.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat15.x = texture(_CameraDepthTexture, u_xlat15.xy).x;
    u_xlat15.x = _ZBufferParams.z * u_xlat15.x + _ZBufferParams.w;
    u_xlat15.x = float(1.0) / u_xlat15.x;
    u_xlat29.xy = u_xlat16_2.xy * vec2(vec2(_RefractionIntensity, _RefractionIntensity));
    u_xlat1.x = u_xlat1.x * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.xz = u_xlat1.xx * u_xlat29.xy;
    u_xlat1.xz = u_xlat1.xz * vs_TEXCOORD4.ww;
    u_xlat15.x = u_xlat15.x + (-vs_TEXCOORD4.w);
#ifdef UNITY_ADRENO_ES3
    u_xlat15.x = min(max(u_xlat15.x, 0.0), 1.0);
#else
    u_xlat15.x = clamp(u_xlat15.x, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat15.xx * u_xlat1.xz;
    u_xlat1.z = 0.0;
    u_xlat4.xyz = u_xlat1.xyz + vs_TEXCOORD4.xyw;
    u_xlat4.xy = u_xlat4.xy / u_xlat4.zz;
    u_xlat43 = texture(_CameraDepthTexture, u_xlat4.xy).x;
    u_xlat43 = _ZBufferParams.z * u_xlat43 + _ZBufferParams.w;
    u_xlat43 = float(1.0) / u_xlat43;
    u_xlat43 = u_xlat43 + (-vs_TEXCOORD4.w);
#ifdef UNITY_ADRENO_ES3
    u_xlat43 = min(max(u_xlat43, 0.0), 1.0);
#else
    u_xlat43 = clamp(u_xlat43, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat43) * u_xlat1.xyz + vs_TEXCOORD4.xyw;
    u_xlat29.xy = u_xlat1.xy / u_xlat1.zz;
    u_xlat29.x = texture(_CameraDepthTexture, u_xlat29.xy).x;
    u_xlat29.x = _ZBufferParams.z * u_xlat29.x + _ZBufferParams.w;
    u_xlat29.x = float(1.0) / u_xlat29.x;
    u_xlat29.x = u_xlat29.x + (-vs_TEXCOORD4.w);
    u_xlat1.w = 0.100000001 / _OpacityByDepth;
    u_xlat16_3.xz = u_xlat16_2.xy;
    u_xlat16_3.y = 1.0;
    u_xlat16_4.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
    u_xlat16_4.x = inversesqrt(u_xlat16_4.x);
    u_xlat16_4.xyz = u_xlat16_3.xyz * u_xlat16_4.xxx;
#ifdef UNITY_ADRENO_ES3
    u_xlatb46 = !!(0.0>=_ES_MoonDirection.y);
#else
    u_xlatb46 = 0.0>=_ES_MoonDirection.y;
#endif
    u_xlat5.xyz = (bool(u_xlatb46)) ? _ES_SunDirection.xyz : _ES_MoonDirection.xyz;
    u_xlat6.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat46 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat46 = inversesqrt(u_xlat46);
    u_xlat7.xyz = vec3(u_xlat46) * u_xlat6.xyz;
    u_xlat5.xyz = u_xlat6.xyz * vec3(u_xlat46) + u_xlat5.xyz;
    u_xlat46 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat46 = inversesqrt(u_xlat46);
    u_xlat5.xyz = vec3(u_xlat46) * u_xlat5.xyz;
    u_xlat4.x = dot(u_xlat16_4.xyz, u_xlat5.xyz);
    u_xlat18.x = _Gloss * 128.0;
    u_xlat4.x = max(u_xlat4.x, 9.99999975e-05);
    u_xlat4.x = log2(u_xlat4.x);
    u_xlat4.x = u_xlat4.x * u_xlat18.x;
    u_xlat4.x = exp2(u_xlat4.x);
    u_xlat4.x = u_xlat4.x * _SpecularIntensity;
    u_xlat4.x = max(u_xlat4.x, 0.0);
    u_xlat4.x = min(u_xlat4.x, 16.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_ES_MoonDirection.y>=9.99999975e-05);
#else
    u_xlatb18 = _ES_MoonDirection.y>=9.99999975e-05;
#endif
    u_xlat18.x = u_xlatb18 ? 1.0 : float(0.0);
    u_xlat32 = _ES_MoonDirection.y + -1.0;
    u_xlat18.x = u_xlat18.x * u_xlat32 + 1.0;
    u_xlat32 = float(1.0) / _ShoreTransparency;
    u_xlat46 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat46 = inversesqrt(u_xlat46);
    u_xlat5.xyz = vec3(u_xlat46) * vs_TEXCOORD6.xyz;
    u_xlat46 = dot(u_xlat7.xyz, u_xlat5.xyz);
    u_xlat46 = (-u_xlat46) + 1.0;
    u_xlat46 = max(u_xlat46, 9.99999975e-05);
    u_xlat46 = log2(u_xlat46);
    u_xlat5.x = u_xlat46 * _SpecularPower;
    u_xlat5.x = exp2(u_xlat5.x);
    u_xlat19.xyz = u_xlat18.xxx * _LightColor0.xyz;
    u_xlat19.xyz = u_xlat4.xxx * u_xlat19.xyz;
    u_xlat4.x = u_xlat29.x + -1.0;
    u_xlat4.x = u_xlat32 * u_xlat4.x;
    u_xlat4.x = u_xlat4.x * 0.100000001;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat19.xyz = u_xlat4.xxx * u_xlat19.xyz;
    u_xlat4.x = u_xlat29.x * u_xlat32;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat4.x = max(u_xlat4.x, 9.99999975e-05);
    u_xlat4.x = log2(u_xlat4.x);
    u_xlat4.x = u_xlat4.x * _ShoreFade;
    u_xlat4.x = exp2(u_xlat4.x);
    u_xlat6.xyz = _ShallowColor.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat6.xyz = u_xlat4.xxx * u_xlat6.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat1.xy = u_xlat1.xy / vs_TEXCOORD4.ww;
    u_xlat10_8.xyz = texture(_SceneScaledBufferBeforTransParent, u_xlat1.xy).xyz;
    u_xlat9.xyz = u_xlat6.xyz * u_xlat10_8.xyz;
    u_xlat1.x = 0.100000001 / _DeepColorDepth;
    u_xlat1.xw = u_xlat1.xw * u_xlat29.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xw = min(max(u_xlat1.xw, 0.0), 1.0);
#else
    u_xlat1.xw = clamp(u_xlat1.xw, 0.0, 1.0);
#endif
    u_xlat1.x = max(u_xlat1.x, 9.99999975e-05);
    u_xlat1.x = log2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _DeepColorFade;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat10.xyz = (-u_xlat6.xyz) * u_xlat10_8.xyz + _DeepColor.xyz;
    u_xlat10.xyz = u_xlat1.xxx * u_xlat10.xyz + u_xlat9.xyz;
    u_xlat11.xyz = u_xlat16_2.xyz * _DistortionIntensity.xyz;
    u_xlat12.x = vs_TEXCOORD8.x;
    u_xlat12.y = vs_TEXCOORD9.x;
    u_xlat12.z = vs_TEXCOORD6.x;
    u_xlat12.x = dot(u_xlat12.xyz, u_xlat11.xyz);
    u_xlat13.x = vs_TEXCOORD8.y;
    u_xlat13.y = vs_TEXCOORD9.y;
    u_xlat13.z = vs_TEXCOORD6.y;
    u_xlat12.y = dot(u_xlat13.xyz, u_xlat11.xyz);
    u_xlat13.x = vs_TEXCOORD8.z;
    u_xlat13.y = vs_TEXCOORD9.z;
    u_xlat13.z = vs_TEXCOORD6.z;
    u_xlat12.z = dot(u_xlat13.xyz, u_xlat11.xyz);
    u_xlat1.x = dot(u_xlat12.xyz, u_xlat12.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat12.xyz = u_xlat1.xxx * u_xlat12.xyz;
    u_xlat1.x = dot((-u_xlat7.xyz), u_xlat12.xyz);
    u_xlat1.x = u_xlat1.x + u_xlat1.x;
    u_xlat7.xyz = u_xlat12.xyz * (-u_xlat1.xxx) + (-u_xlat7.xyz);
    u_xlat10_0 = textureLod(_ReflectionSkyCubeMap, u_xlat7.xyz, 0.0);
    u_xlat16_2.x = u_xlat10_0.w + -1.0;
    u_xlat16_2.x = _ReflectionSkyCubeMap_HDR.w * u_xlat16_2.x + 1.0;
    u_xlat16_2.x = log2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * _ReflectionSkyCubeMap_HDR.y;
    u_xlat16_2.x = exp2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * _ReflectionSkyCubeMap_HDR.x;
    u_xlat16_16.xyz = u_xlat10_0.xyz * u_xlat16_2.xxx;
    u_xlat1.xy = u_xlat11.xy * vec2(_SSRDistortion);
    u_xlat18.x = float(1.0) / _SSRDistortion_Shore;
    u_xlat18.x = u_xlat29.x * u_xlat18.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat18.x = min(max(u_xlat18.x, 0.0), 1.0);
#else
    u_xlat18.x = clamp(u_xlat18.x, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat1.xy * u_xlat18.xx;
    u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD4.ww + vs_TEXCOORD4.xy;
    u_xlat1.xy = u_xlat1.xy / vs_TEXCOORD4.ww;
    u_xlat10_3 = texture(_SSRTexture, u_xlat1.xy).wxyz;
    u_xlat16_7.xyz = (-u_xlat16_2.xxx) * u_xlat10_0.xyz + u_xlat10_3.yzw;
    u_xlat7.xyz = u_xlat16_7.xyz * vec3(vec3(_SSRIntensity, _SSRIntensity, _SSRIntensity));
    u_xlat16_3.x = u_xlat10_3.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat7.xyz = u_xlat16_3.xxx * u_xlat7.xyz + u_xlat16_16.xyz;
    u_xlat1.x = u_xlat46 * _FresnelPower;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _ReflectionIntensity;
    u_xlat15.x = float(1.0) / _ShoreReflectionFade;
    u_xlat15.x = u_xlat15.x * u_xlat29.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat15.x = min(max(u_xlat15.x, 0.0), 1.0);
#else
    u_xlat15.x = clamp(u_xlat15.x, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat15.x * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat18.xyz = (-u_xlat10.xyz) + u_xlat7.xyz;
    u_xlat1.xyz = u_xlat1.xxx * u_xlat18.xyz + u_xlat10.xyz;
    u_xlat1.xyz = (-u_xlat6.xyz) * u_xlat10_8.xyz + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat4.xxx * u_xlat1.xyz + u_xlat9.xyz;
    u_xlat0.xyz = u_xlat19.xyz * u_xlat5.xxx + u_xlat1.xyz;
    u_xlat0.w = u_xlat1.w * vs_COLOR0.w;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "MSAA_INTERPOLATION" "MHY_SHADER_LOW" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump float _MHYZBias;
uniform 	vec4 hlslcc_mtx4x4_mhyJitteredVP[4];
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
out highp vec4 vs_TEXCOORD9;
out highp vec4 vs_TEXCOORD10;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec4 u_xlat8;
float u_xlat27;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4_mhyJitteredVP[1];
    u_xlat2 = hlslcc_mtx4x4_mhyJitteredVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4_mhyJitteredVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4_mhyJitteredVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat3.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    u_xlat3.xyw = u_xlat2.xyw;
    gl_Position = u_xlat3;
    vs_COLOR0 = in_COLOR0;
    u_xlat4.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat4.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat4.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat27 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat4.xyz = vec3(u_xlat27) * u_xlat4.xyz;
    u_xlat16_5.x = u_xlat4.y * u_xlat4.y;
    u_xlat16_5.x = u_xlat4.x * u_xlat4.x + (-u_xlat16_5.x);
    u_xlat16_6 = u_xlat4.yzzx * u_xlat4.xyzz;
    u_xlat16_7.x = dot(unity_SHBr, u_xlat16_6);
    u_xlat16_7.y = dot(unity_SHBg, u_xlat16_6);
    u_xlat16_7.z = dot(unity_SHBb, u_xlat16_6);
    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_7.xyz;
    u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat4.w = 1.0;
    u_xlat16_6.x = dot(unity_SHAr, u_xlat4);
    u_xlat16_6.y = dot(unity_SHAg, u_xlat4);
    u_xlat16_6.z = dot(unity_SHAb, u_xlat4);
    u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_6.xyz;
    vs_TEXCOORD1.xyz = u_xlat16_5.xyz;
    vs_TEXCOORD1.w = 1.0;
    u_xlat27 = u_xlat3.y * _ProjectionParams.x;
    u_xlat8.w = u_xlat27 * 0.5;
    u_xlat8.xz = u_xlat3.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.z = u_xlat2.z;
    u_xlat3.xy = u_xlat8.zz + u_xlat8.xw;
    vs_TEXCOORD2 = u_xlat3;
    vs_TEXCOORD4.xyw = u_xlat3.xyw;
    u_xlat27 = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat27 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat27;
    u_xlat27 = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat27;
    u_xlat27 = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat27;
    vs_TEXCOORD3.z = (-u_xlat27);
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD3.w = 0.0;
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD5.w = 0.0;
    vs_TEXCOORD6.xyz = u_xlat4.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[1].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].www + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * in_POSITION0.yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.zzz + u_xlat1.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.www + u_xlat1.xyz;
    vs_TEXCOORD7.xyz = u_xlat1.xyz * vec3(-1.0, -1.0, 1.0);
    vs_TEXCOORD7.w = 0.0;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat27 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat1.xyz = vec3(u_xlat27) * u_xlat1.xyz;
    vs_TEXCOORD8.xyz = u_xlat1.xyz;
    vs_TEXCOORD8.w = 0.0;
    u_xlat2.xyz = u_xlat1.yzx * u_xlat4.zxy;
    u_xlat1.xyz = u_xlat4.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
    u_xlat27 = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD9.xyz = vec3(u_xlat27) * u_xlat1.xyz;
    vs_TEXCOORD9.w = 0.0;
    u_xlat27 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat27 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat27;
    vs_TEXCOORD10.w = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat27;
    vs_TEXCOORD10.xyz = u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ZBufferParams;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _NormalMapScale;
uniform 	float _Normal01_U_Speed;
uniform 	float _Normal01_VSpeed;
uniform 	float _NormalMapBias;
uniform 	float _Normal02_U_Speed;
uniform 	float _Normal02_V_Speed;
uniform 	float _RefractionIntensity;
uniform 	float _OpacityByDepth;
uniform 	float _SpecularIntensity;
uniform 	vec3 _ES_MoonDirection;
uniform 	vec3 _ES_SunDirection;
uniform 	float _Gloss;
uniform 	float _ShoreTransparency;
uniform 	float _SpecularPower;
uniform 	vec4 _ShallowColor;
uniform 	float _ShoreFade;
uniform 	vec4 _DeepColor;
uniform 	float _DeepColorDepth;
uniform 	float _DeepColorFade;
uniform 	vec4 _DistortionIntensity;
uniform 	float _ReflectionIntensity;
uniform 	float _FresnelPower;
uniform 	float _ShoreReflectionFade;
uniform 	mediump float _ProjectUVScale;
uniform 	vec4 _ReflectionSkyCubeMap_HDR;
uniform lowp sampler2D _Normal01;
uniform lowp sampler2D _Normal02;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _SceneScaledBufferBeforTransParent;
uniform lowp samplerCube _ReflectionSkyCubeMap;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD8;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
lowp vec3 u_xlat10_8;
vec3 u_xlat9;
vec3 u_xlat10;
vec3 u_xlat11;
vec3 u_xlat12;
vec3 u_xlat13;
vec2 u_xlat15;
vec3 u_xlat18;
bool u_xlatb18;
vec3 u_xlat19;
vec2 u_xlat29;
float u_xlat32;
float u_xlat43;
float u_xlat46;
bool u_xlatb46;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD5.zx * vec2(vec2(_ProjectUVScale, _ProjectUVScale));
    u_xlat1.x = _Time.y * _Normal01_U_Speed + u_xlat0.y;
    u_xlat1.yz = _Time.yy * vec2(_Normal01_VSpeed, _Normal02_U_Speed) + u_xlat0.xy;
    u_xlat1.w = _Time.y * _Normal02_V_Speed + u_xlat0.x;
    u_xlat10_0.xyz = texture(_Normal01, u_xlat1.xy, _NormalMapBias).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_2.xy = u_xlat16_0.xy * vec2(_NormalMapScale);
    u_xlat10_1.xyz = texture(_Normal02, u_xlat1.zw, _NormalMapBias).xyz;
    u_xlat16_0.w = -1.0;
    u_xlat16_3.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.wwz;
    u_xlat16_3.xy = u_xlat16_3.xy * vec2(_NormalMapScale);
    u_xlat16_2.z = -1.0;
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
    u_xlat1.x = float(1.0) / vs_TEXCOORD4.w;
    u_xlat15.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat15.x = texture(_CameraDepthTexture, u_xlat15.xy).x;
    u_xlat15.x = _ZBufferParams.z * u_xlat15.x + _ZBufferParams.w;
    u_xlat15.x = float(1.0) / u_xlat15.x;
    u_xlat29.xy = u_xlat16_2.xy * vec2(vec2(_RefractionIntensity, _RefractionIntensity));
    u_xlat1.x = u_xlat1.x * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.xz = u_xlat1.xx * u_xlat29.xy;
    u_xlat1.xz = u_xlat1.xz * vs_TEXCOORD4.ww;
    u_xlat15.x = u_xlat15.x + (-vs_TEXCOORD4.w);
#ifdef UNITY_ADRENO_ES3
    u_xlat15.x = min(max(u_xlat15.x, 0.0), 1.0);
#else
    u_xlat15.x = clamp(u_xlat15.x, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat15.xx * u_xlat1.xz;
    u_xlat1.z = 0.0;
    u_xlat4.xyz = u_xlat1.xyz + vs_TEXCOORD4.xyw;
    u_xlat4.xy = u_xlat4.xy / u_xlat4.zz;
    u_xlat43 = texture(_CameraDepthTexture, u_xlat4.xy).x;
    u_xlat43 = _ZBufferParams.z * u_xlat43 + _ZBufferParams.w;
    u_xlat43 = float(1.0) / u_xlat43;
    u_xlat43 = u_xlat43 + (-vs_TEXCOORD4.w);
#ifdef UNITY_ADRENO_ES3
    u_xlat43 = min(max(u_xlat43, 0.0), 1.0);
#else
    u_xlat43 = clamp(u_xlat43, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat43) * u_xlat1.xyz + vs_TEXCOORD4.xyw;
    u_xlat29.xy = u_xlat1.xy / u_xlat1.zz;
    u_xlat29.x = texture(_CameraDepthTexture, u_xlat29.xy).x;
    u_xlat29.x = _ZBufferParams.z * u_xlat29.x + _ZBufferParams.w;
    u_xlat29.x = float(1.0) / u_xlat29.x;
    u_xlat29.x = u_xlat29.x + (-vs_TEXCOORD4.w);
    u_xlat1.w = 0.100000001 / _OpacityByDepth;
    u_xlat16_3.xz = u_xlat16_2.xy;
    u_xlat16_3.y = 1.0;
    u_xlat16_4.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
    u_xlat16_4.x = inversesqrt(u_xlat16_4.x);
    u_xlat16_4.xyz = u_xlat16_3.xyz * u_xlat16_4.xxx;
#ifdef UNITY_ADRENO_ES3
    u_xlatb46 = !!(0.0>=_ES_MoonDirection.y);
#else
    u_xlatb46 = 0.0>=_ES_MoonDirection.y;
#endif
    u_xlat5.xyz = (bool(u_xlatb46)) ? _ES_SunDirection.xyz : _ES_MoonDirection.xyz;
    u_xlat6.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat46 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat46 = inversesqrt(u_xlat46);
    u_xlat7.xyz = vec3(u_xlat46) * u_xlat6.xyz;
    u_xlat5.xyz = u_xlat6.xyz * vec3(u_xlat46) + u_xlat5.xyz;
    u_xlat46 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat46 = inversesqrt(u_xlat46);
    u_xlat5.xyz = vec3(u_xlat46) * u_xlat5.xyz;
    u_xlat4.x = dot(u_xlat16_4.xyz, u_xlat5.xyz);
    u_xlat18.x = _Gloss * 128.0;
    u_xlat4.x = max(u_xlat4.x, 9.99999975e-05);
    u_xlat4.x = log2(u_xlat4.x);
    u_xlat4.x = u_xlat4.x * u_xlat18.x;
    u_xlat4.x = exp2(u_xlat4.x);
    u_xlat4.x = u_xlat4.x * _SpecularIntensity;
    u_xlat4.x = max(u_xlat4.x, 0.0);
    u_xlat4.x = min(u_xlat4.x, 16.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_ES_MoonDirection.y>=9.99999975e-05);
#else
    u_xlatb18 = _ES_MoonDirection.y>=9.99999975e-05;
#endif
    u_xlat18.x = u_xlatb18 ? 1.0 : float(0.0);
    u_xlat32 = _ES_MoonDirection.y + -1.0;
    u_xlat18.x = u_xlat18.x * u_xlat32 + 1.0;
    u_xlat32 = float(1.0) / _ShoreTransparency;
    u_xlat46 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat46 = inversesqrt(u_xlat46);
    u_xlat5.xyz = vec3(u_xlat46) * vs_TEXCOORD6.xyz;
    u_xlat46 = dot(u_xlat7.xyz, u_xlat5.xyz);
    u_xlat46 = (-u_xlat46) + 1.0;
    u_xlat46 = max(u_xlat46, 9.99999975e-05);
    u_xlat46 = log2(u_xlat46);
    u_xlat5.x = u_xlat46 * _SpecularPower;
    u_xlat5.x = exp2(u_xlat5.x);
    u_xlat19.xyz = u_xlat18.xxx * _LightColor0.xyz;
    u_xlat19.xyz = u_xlat4.xxx * u_xlat19.xyz;
    u_xlat4.x = u_xlat29.x + -1.0;
    u_xlat4.x = u_xlat32 * u_xlat4.x;
    u_xlat4.x = u_xlat4.x * 0.100000001;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat19.xyz = u_xlat4.xxx * u_xlat19.xyz;
    u_xlat4.x = u_xlat29.x * u_xlat32;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat4.x = max(u_xlat4.x, 9.99999975e-05);
    u_xlat4.x = log2(u_xlat4.x);
    u_xlat4.x = u_xlat4.x * _ShoreFade;
    u_xlat4.x = exp2(u_xlat4.x);
    u_xlat6.xyz = _ShallowColor.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat6.xyz = u_xlat4.xxx * u_xlat6.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat1.xy = u_xlat1.xy / vs_TEXCOORD4.ww;
    u_xlat10_8.xyz = texture(_SceneScaledBufferBeforTransParent, u_xlat1.xy).xyz;
    u_xlat9.xyz = u_xlat6.xyz * u_xlat10_8.xyz;
    u_xlat1.x = 0.100000001 / _DeepColorDepth;
    u_xlat1.xw = u_xlat1.xw * u_xlat29.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xw = min(max(u_xlat1.xw, 0.0), 1.0);
#else
    u_xlat1.xw = clamp(u_xlat1.xw, 0.0, 1.0);
#endif
    u_xlat1.x = max(u_xlat1.x, 9.99999975e-05);
    u_xlat1.x = log2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _DeepColorFade;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat10.xyz = (-u_xlat6.xyz) * u_xlat10_8.xyz + _DeepColor.xyz;
    u_xlat10.xyz = u_xlat1.xxx * u_xlat10.xyz + u_xlat9.xyz;
    u_xlat11.xyz = u_xlat16_2.xyz * _DistortionIntensity.xyz;
    u_xlat12.x = vs_TEXCOORD8.x;
    u_xlat12.y = vs_TEXCOORD9.x;
    u_xlat12.z = vs_TEXCOORD6.x;
    u_xlat12.x = dot(u_xlat12.xyz, u_xlat11.xyz);
    u_xlat13.x = vs_TEXCOORD8.y;
    u_xlat13.y = vs_TEXCOORD9.y;
    u_xlat13.z = vs_TEXCOORD6.y;
    u_xlat12.y = dot(u_xlat13.xyz, u_xlat11.xyz);
    u_xlat13.x = vs_TEXCOORD8.z;
    u_xlat13.y = vs_TEXCOORD9.z;
    u_xlat13.z = vs_TEXCOORD6.z;
    u_xlat12.z = dot(u_xlat13.xyz, u_xlat11.xyz);
    u_xlat1.x = dot(u_xlat12.xyz, u_xlat12.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat11.xyz = u_xlat1.xxx * u_xlat12.xyz;
    u_xlat1.x = dot((-u_xlat7.xyz), u_xlat11.xyz);
    u_xlat1.x = u_xlat1.x + u_xlat1.x;
    u_xlat7.xyz = u_xlat11.xyz * (-u_xlat1.xxx) + (-u_xlat7.xyz);
    u_xlat10_0 = textureLod(_ReflectionSkyCubeMap, u_xlat7.xyz, 0.0);
    u_xlat16_2.x = u_xlat10_0.w + -1.0;
    u_xlat16_2.x = _ReflectionSkyCubeMap_HDR.w * u_xlat16_2.x + 1.0;
    u_xlat16_2.x = log2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * _ReflectionSkyCubeMap_HDR.y;
    u_xlat16_2.x = exp2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * _ReflectionSkyCubeMap_HDR.x;
    u_xlat1.x = u_xlat46 * _FresnelPower;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _ReflectionIntensity;
    u_xlat15.x = float(1.0) / _ShoreReflectionFade;
    u_xlat15.x = u_xlat15.x * u_xlat29.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat15.x = min(max(u_xlat15.x, 0.0), 1.0);
#else
    u_xlat15.x = clamp(u_xlat15.x, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat15.x * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat18.xyz = u_xlat16_2.xxx * u_xlat10_0.xyz + (-u_xlat10.xyz);
    u_xlat1.xyz = u_xlat1.xxx * u_xlat18.xyz + u_xlat10.xyz;
    u_xlat1.xyz = (-u_xlat6.xyz) * u_xlat10_8.xyz + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat4.xxx * u_xlat1.xyz + u_xlat9.xyz;
    u_xlat0.xyz = u_xlat19.xyz * u_xlat5.xxx + u_xlat1.xyz;
    u_xlat0.w = u_xlat1.w * vs_COLOR0.w;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "MSAA_INTERPOLATION" "MHY_SHADER_LOW" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
uniform 	vec4 hlslcc_mtx4x4_mhyJitteredVP[4];
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
out highp vec4 vs_TEXCOORD9;
out highp vec4 vs_TEXCOORD10;
float u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec4 u_xlat8;
vec3 u_xlat9;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat9.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4_mhyJitteredVP[1];
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[3] * u_xlat2.wwww + u_xlat1;
    u_xlat3.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    u_xlat3.xyw = u_xlat1.xyw;
    gl_Position = u_xlat3;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD1.w = 1.0;
    u_xlat4.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat4.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat4.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat1.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
    u_xlat16_5.x = u_xlat4.y * u_xlat4.y;
    u_xlat16_5.x = u_xlat4.x * u_xlat4.x + (-u_xlat16_5.x);
    u_xlat16_6 = u_xlat4.yzzx * u_xlat4.xyzz;
    u_xlat16_7.x = dot(unity_SHBr, u_xlat16_6);
    u_xlat16_7.y = dot(unity_SHBg, u_xlat16_6);
    u_xlat16_7.z = dot(unity_SHBb, u_xlat16_6);
    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_7.xyz;
    u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat4.w = 1.0;
    u_xlat16_6.x = dot(unity_SHAr, u_xlat4);
    u_xlat16_6.y = dot(unity_SHAg, u_xlat4);
    u_xlat16_6.z = dot(unity_SHAb, u_xlat4);
    u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_6.xyz;
    vs_TEXCOORD1.xyz = u_xlat16_5.xyz;
    u_xlat1.x = u_xlat3.y * _ProjectionParams.x;
    u_xlat8.w = u_xlat1.x * 0.5;
    u_xlat8.xz = u_xlat3.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.z = u_xlat1.z;
    u_xlat3.xy = u_xlat8.zz + u_xlat8.xw;
    vs_TEXCOORD2 = u_xlat3;
    vs_TEXCOORD4.xyw = u_xlat3.xyw;
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD3.w = 0.0;
    u_xlat1.x = u_xlat2.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat2.x + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat2.z + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat2.w + u_xlat1.x;
    vs_TEXCOORD3.z = (-u_xlat1.x);
    vs_TEXCOORD5.w = 0.0;
    vs_TEXCOORD5.xyz = u_xlat9.xyz;
    u_xlat9.xyz = (-u_xlat9.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD6.w = 0.0;
    vs_TEXCOORD6.xyz = u_xlat4.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].www + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * in_POSITION0.yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.zzz + u_xlat1.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.www + u_xlat1.xyz;
    vs_TEXCOORD7.xyz = u_xlat1.xyz * vec3(-1.0, -1.0, 1.0);
    vs_TEXCOORD7.w = 0.0;
    u_xlat1.xyz = in_TANGENT0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat0 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0 = inversesqrt(u_xlat0);
    u_xlat1.xyz = vec3(u_xlat0) * u_xlat1.xyz;
    vs_TEXCOORD8.xyz = u_xlat1.xyz;
    vs_TEXCOORD8.w = 0.0;
    u_xlat2.xyz = u_xlat1.yzx * u_xlat4.zxy;
    u_xlat1.xyz = u_xlat4.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
    u_xlat0 = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD9.xyz = vec3(u_xlat0) * u_xlat1.xyz;
    vs_TEXCOORD9.w = 0.0;
    u_xlat0 = u_xlat9.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat9.x + u_xlat0;
    vs_TEXCOORD10.w = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat9.z + u_xlat0;
    vs_TEXCOORD10.xyz = u_xlat9.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ZBufferParams;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _NormalMapScale;
uniform 	float _Normal01_U_Speed;
uniform 	float _Normal01_VSpeed;
uniform 	float _NormalMapBias;
uniform 	float _Normal02_U_Speed;
uniform 	float _Normal02_V_Speed;
uniform 	float _RefractionIntensity;
uniform 	float _OpacityByDepth;
uniform 	float _SpecularIntensity;
uniform 	vec3 _ES_MoonDirection;
uniform 	vec3 _ES_SunDirection;
uniform 	float _Gloss;
uniform 	float _ShoreTransparency;
uniform 	float _SpecularPower;
uniform 	vec4 _ShallowColor;
uniform 	float _ShoreFade;
uniform 	vec4 _DeepColor;
uniform 	float _DeepColorDepth;
uniform 	float _DeepColorFade;
uniform 	vec4 _DistortionIntensity;
uniform 	float _ReflectionIntensity;
uniform 	float _FresnelPower;
uniform 	float _ShoreReflectionFade;
uniform 	mediump float _ProjectUVScale;
uniform 	vec4 _ReflectionSkyCubeMap_HDR;
uniform lowp sampler2D _Normal01;
uniform lowp sampler2D _Normal02;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _SceneScaledBufferBeforTransParent;
uniform lowp samplerCube _ReflectionSkyCubeMap;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD8;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
lowp vec3 u_xlat10_8;
vec3 u_xlat9;
vec3 u_xlat10;
vec3 u_xlat11;
vec3 u_xlat12;
vec3 u_xlat13;
vec2 u_xlat15;
vec3 u_xlat18;
bool u_xlatb18;
vec3 u_xlat19;
vec2 u_xlat29;
float u_xlat32;
float u_xlat43;
float u_xlat46;
bool u_xlatb46;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD5.zx * vec2(vec2(_ProjectUVScale, _ProjectUVScale));
    u_xlat1.x = _Time.y * _Normal01_U_Speed + u_xlat0.y;
    u_xlat1.yz = _Time.yy * vec2(_Normal01_VSpeed, _Normal02_U_Speed) + u_xlat0.xy;
    u_xlat1.w = _Time.y * _Normal02_V_Speed + u_xlat0.x;
    u_xlat10_0.xyz = texture(_Normal01, u_xlat1.xy, _NormalMapBias).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_2.xy = u_xlat16_0.xy * vec2(_NormalMapScale);
    u_xlat10_1.xyz = texture(_Normal02, u_xlat1.zw, _NormalMapBias).xyz;
    u_xlat16_0.w = -1.0;
    u_xlat16_3.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.wwz;
    u_xlat16_3.xy = u_xlat16_3.xy * vec2(_NormalMapScale);
    u_xlat16_2.z = -1.0;
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
    u_xlat1.x = float(1.0) / vs_TEXCOORD4.w;
    u_xlat15.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat15.x = texture(_CameraDepthTexture, u_xlat15.xy).x;
    u_xlat15.x = _ZBufferParams.z * u_xlat15.x + _ZBufferParams.w;
    u_xlat15.x = float(1.0) / u_xlat15.x;
    u_xlat29.xy = u_xlat16_2.xy * vec2(vec2(_RefractionIntensity, _RefractionIntensity));
    u_xlat1.x = u_xlat1.x * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.xz = u_xlat1.xx * u_xlat29.xy;
    u_xlat1.xz = u_xlat1.xz * vs_TEXCOORD4.ww;
    u_xlat15.x = u_xlat15.x + (-vs_TEXCOORD4.w);
#ifdef UNITY_ADRENO_ES3
    u_xlat15.x = min(max(u_xlat15.x, 0.0), 1.0);
#else
    u_xlat15.x = clamp(u_xlat15.x, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat15.xx * u_xlat1.xz;
    u_xlat1.z = 0.0;
    u_xlat4.xyz = u_xlat1.xyz + vs_TEXCOORD4.xyw;
    u_xlat4.xy = u_xlat4.xy / u_xlat4.zz;
    u_xlat43 = texture(_CameraDepthTexture, u_xlat4.xy).x;
    u_xlat43 = _ZBufferParams.z * u_xlat43 + _ZBufferParams.w;
    u_xlat43 = float(1.0) / u_xlat43;
    u_xlat43 = u_xlat43 + (-vs_TEXCOORD4.w);
#ifdef UNITY_ADRENO_ES3
    u_xlat43 = min(max(u_xlat43, 0.0), 1.0);
#else
    u_xlat43 = clamp(u_xlat43, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat43) * u_xlat1.xyz + vs_TEXCOORD4.xyw;
    u_xlat29.xy = u_xlat1.xy / u_xlat1.zz;
    u_xlat29.x = texture(_CameraDepthTexture, u_xlat29.xy).x;
    u_xlat29.x = _ZBufferParams.z * u_xlat29.x + _ZBufferParams.w;
    u_xlat29.x = float(1.0) / u_xlat29.x;
    u_xlat29.x = u_xlat29.x + (-vs_TEXCOORD4.w);
    u_xlat1.w = 0.100000001 / _OpacityByDepth;
    u_xlat16_3.xz = u_xlat16_2.xy;
    u_xlat16_3.y = 1.0;
    u_xlat16_4.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
    u_xlat16_4.x = inversesqrt(u_xlat16_4.x);
    u_xlat16_4.xyz = u_xlat16_3.xyz * u_xlat16_4.xxx;
#ifdef UNITY_ADRENO_ES3
    u_xlatb46 = !!(0.0>=_ES_MoonDirection.y);
#else
    u_xlatb46 = 0.0>=_ES_MoonDirection.y;
#endif
    u_xlat5.xyz = (bool(u_xlatb46)) ? _ES_SunDirection.xyz : _ES_MoonDirection.xyz;
    u_xlat6.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat46 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat46 = inversesqrt(u_xlat46);
    u_xlat7.xyz = vec3(u_xlat46) * u_xlat6.xyz;
    u_xlat5.xyz = u_xlat6.xyz * vec3(u_xlat46) + u_xlat5.xyz;
    u_xlat46 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat46 = inversesqrt(u_xlat46);
    u_xlat5.xyz = vec3(u_xlat46) * u_xlat5.xyz;
    u_xlat4.x = dot(u_xlat16_4.xyz, u_xlat5.xyz);
    u_xlat18.x = _Gloss * 128.0;
    u_xlat4.x = max(u_xlat4.x, 9.99999975e-05);
    u_xlat4.x = log2(u_xlat4.x);
    u_xlat4.x = u_xlat4.x * u_xlat18.x;
    u_xlat4.x = exp2(u_xlat4.x);
    u_xlat4.x = u_xlat4.x * _SpecularIntensity;
    u_xlat4.x = max(u_xlat4.x, 0.0);
    u_xlat4.x = min(u_xlat4.x, 16.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_ES_MoonDirection.y>=9.99999975e-05);
#else
    u_xlatb18 = _ES_MoonDirection.y>=9.99999975e-05;
#endif
    u_xlat18.x = u_xlatb18 ? 1.0 : float(0.0);
    u_xlat32 = _ES_MoonDirection.y + -1.0;
    u_xlat18.x = u_xlat18.x * u_xlat32 + 1.0;
    u_xlat32 = float(1.0) / _ShoreTransparency;
    u_xlat46 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat46 = inversesqrt(u_xlat46);
    u_xlat5.xyz = vec3(u_xlat46) * vs_TEXCOORD6.xyz;
    u_xlat46 = dot(u_xlat7.xyz, u_xlat5.xyz);
    u_xlat46 = (-u_xlat46) + 1.0;
    u_xlat46 = max(u_xlat46, 9.99999975e-05);
    u_xlat46 = log2(u_xlat46);
    u_xlat5.x = u_xlat46 * _SpecularPower;
    u_xlat5.x = exp2(u_xlat5.x);
    u_xlat19.xyz = u_xlat18.xxx * _LightColor0.xyz;
    u_xlat19.xyz = u_xlat4.xxx * u_xlat19.xyz;
    u_xlat4.x = u_xlat29.x + -1.0;
    u_xlat4.x = u_xlat32 * u_xlat4.x;
    u_xlat4.x = u_xlat4.x * 0.100000001;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat19.xyz = u_xlat4.xxx * u_xlat19.xyz;
    u_xlat4.x = u_xlat29.x * u_xlat32;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat4.x = max(u_xlat4.x, 9.99999975e-05);
    u_xlat4.x = log2(u_xlat4.x);
    u_xlat4.x = u_xlat4.x * _ShoreFade;
    u_xlat4.x = exp2(u_xlat4.x);
    u_xlat6.xyz = _ShallowColor.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat6.xyz = u_xlat4.xxx * u_xlat6.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat1.xy = u_xlat1.xy / vs_TEXCOORD4.ww;
    u_xlat10_8.xyz = texture(_SceneScaledBufferBeforTransParent, u_xlat1.xy).xyz;
    u_xlat9.xyz = u_xlat6.xyz * u_xlat10_8.xyz;
    u_xlat1.x = 0.100000001 / _DeepColorDepth;
    u_xlat1.xw = u_xlat1.xw * u_xlat29.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xw = min(max(u_xlat1.xw, 0.0), 1.0);
#else
    u_xlat1.xw = clamp(u_xlat1.xw, 0.0, 1.0);
#endif
    u_xlat1.x = max(u_xlat1.x, 9.99999975e-05);
    u_xlat1.x = log2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _DeepColorFade;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat10.xyz = (-u_xlat6.xyz) * u_xlat10_8.xyz + _DeepColor.xyz;
    u_xlat10.xyz = u_xlat1.xxx * u_xlat10.xyz + u_xlat9.xyz;
    u_xlat11.xyz = u_xlat16_2.xyz * _DistortionIntensity.xyz;
    u_xlat12.x = vs_TEXCOORD8.x;
    u_xlat12.y = vs_TEXCOORD9.x;
    u_xlat12.z = vs_TEXCOORD6.x;
    u_xlat12.x = dot(u_xlat12.xyz, u_xlat11.xyz);
    u_xlat13.x = vs_TEXCOORD8.y;
    u_xlat13.y = vs_TEXCOORD9.y;
    u_xlat13.z = vs_TEXCOORD6.y;
    u_xlat12.y = dot(u_xlat13.xyz, u_xlat11.xyz);
    u_xlat13.x = vs_TEXCOORD8.z;
    u_xlat13.y = vs_TEXCOORD9.z;
    u_xlat13.z = vs_TEXCOORD6.z;
    u_xlat12.z = dot(u_xlat13.xyz, u_xlat11.xyz);
    u_xlat1.x = dot(u_xlat12.xyz, u_xlat12.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat11.xyz = u_xlat1.xxx * u_xlat12.xyz;
    u_xlat1.x = dot((-u_xlat7.xyz), u_xlat11.xyz);
    u_xlat1.x = u_xlat1.x + u_xlat1.x;
    u_xlat7.xyz = u_xlat11.xyz * (-u_xlat1.xxx) + (-u_xlat7.xyz);
    u_xlat10_0 = textureLod(_ReflectionSkyCubeMap, u_xlat7.xyz, 0.0);
    u_xlat16_2.x = u_xlat10_0.w + -1.0;
    u_xlat16_2.x = _ReflectionSkyCubeMap_HDR.w * u_xlat16_2.x + 1.0;
    u_xlat16_2.x = log2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * _ReflectionSkyCubeMap_HDR.y;
    u_xlat16_2.x = exp2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * _ReflectionSkyCubeMap_HDR.x;
    u_xlat1.x = u_xlat46 * _FresnelPower;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _ReflectionIntensity;
    u_xlat15.x = float(1.0) / _ShoreReflectionFade;
    u_xlat15.x = u_xlat15.x * u_xlat29.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat15.x = min(max(u_xlat15.x, 0.0), 1.0);
#else
    u_xlat15.x = clamp(u_xlat15.x, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat15.x * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat18.xyz = u_xlat16_2.xxx * u_xlat10_0.xyz + (-u_xlat10.xyz);
    u_xlat1.xyz = u_xlat1.xxx * u_xlat18.xyz + u_xlat10.xyz;
    u_xlat1.xyz = (-u_xlat6.xyz) * u_xlat10_8.xyz + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat4.xxx * u_xlat1.xyz + u_xlat9.xyz;
    u_xlat0.xyz = u_xlat19.xyz * u_xlat5.xxx + u_xlat1.xyz;
    u_xlat0.w = u_xlat1.w * vs_COLOR0.w;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "MHY_SHADER_HIGH" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	mediump float _MHYZBias;
uniform 	vec4 hlslcc_mtx4x4_mhyJitteredVP[4];
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
out highp vec4 vs_TEXCOORD9;
out highp vec4 vs_TEXCOORD10;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
vec4 u_xlat4;
bool u_xlatb4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
mediump vec4 u_xlat16_6;
vec4 u_xlat7;
mediump vec3 u_xlat16_8;
float u_xlat11;
vec3 u_xlat13;
mediump float u_xlat16_14;
float u_xlat27;
bool u_xlatb27;
float u_xlat29;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4_mhyJitteredVP[1];
    u_xlat2 = hlslcc_mtx4x4_mhyJitteredVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4_mhyJitteredVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4_mhyJitteredVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat3.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    u_xlat3.xyw = u_xlat2.xyw;
    gl_Position = u_xlat3;
    vs_COLOR0 = in_COLOR0;
    u_xlat2.xyw = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat27 = u_xlat2.y * _HeigtFogParams.x;
    u_xlat4.x = u_xlat27 * -1.44269502;
    u_xlat4.x = exp2(u_xlat4.x);
    u_xlat4.x = (-u_xlat4.x) + 1.0;
    u_xlat4.x = u_xlat4.x / u_xlat27;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(0.00999999978<abs(u_xlat27));
#else
    u_xlatb27 = 0.00999999978<abs(u_xlat27);
#endif
    u_xlat16_5.x = (u_xlatb27) ? u_xlat4.x : 1.0;
    u_xlat27 = dot(u_xlat2.xyw, u_xlat2.xyw);
    u_xlat27 = sqrt(u_xlat27);
    u_xlat4.x = u_xlat27 * _HeigtFogParams.y;
    u_xlat16_5.x = u_xlat4.x * u_xlat16_5.x;
    u_xlat16_5.x = exp2((-u_xlat16_5.x));
    u_xlat16_5.x = (-u_xlat16_5.x) + 1.0;
    u_xlat4.x = u_xlat2.y * _HeigtFogParams2.x;
    u_xlat13.x = u_xlat4.x * -1.44269502;
    u_xlat13.x = exp2(u_xlat13.x);
    u_xlat13.x = (-u_xlat13.x) + 1.0;
    u_xlat13.x = u_xlat13.x / u_xlat4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(0.00999999978<abs(u_xlat4.x));
#else
    u_xlatb4 = 0.00999999978<abs(u_xlat4.x);
#endif
    u_xlat16_14 = (u_xlatb4) ? u_xlat13.x : 1.0;
    u_xlat4.x = u_xlat27 * _HeigtFogParams2.y;
    u_xlat16_14 = u_xlat4.x * u_xlat16_14;
    u_xlat16_14 = exp2((-u_xlat16_14));
    u_xlat16_5.y = (-u_xlat16_14) + 1.0;
    u_xlat16_5.xy = max(u_xlat16_5.xy, vec2(0.0, 0.0));
    u_xlat16_5.x = u_xlat16_5.y + u_xlat16_5.x;
    u_xlat4.x = u_xlat27 * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat16_14 = (-u_xlat4.x) + 2.0;
    u_xlat16_14 = u_xlat4.x * u_xlat16_14;
    u_xlat4.x = u_xlat16_14 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat4.x = u_xlat4.x + 1.0;
    u_xlat16_5.x = u_xlat4.x * u_xlat16_5.x;
    u_xlat4.x = min(u_xlat16_5.x, _HeigtFogColBase.w);
    u_xlat13.x = (-u_xlat4.x) + 1.0;
    u_xlat6.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat6.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat6.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat2.x = dot(u_xlat2.xyw, u_xlat6.xyz);
    u_xlat11 = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!((-u_xlat2.x)>=u_xlat11);
#else
    u_xlatb2 = (-u_xlat2.x)>=u_xlat11;
#endif
    u_xlat11 = u_xlat27 * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat11 = min(max(u_xlat11, 0.0), 1.0);
#else
    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
#endif
    u_xlat27 = u_xlat27 + (-_HeigtFogRamp.w);
    u_xlat27 = u_xlat27 * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
    u_xlat29 = (-u_xlat11) + 2.0;
    u_xlat11 = u_xlat29 * u_xlat11;
    u_xlat29 = u_xlat11 * _HeigtFogColDelta.w;
    u_xlat2.x = (u_xlatb2) ? u_xlat29 : u_xlat11;
    u_xlat2.x = log2(u_xlat2.x);
    u_xlat2.x = u_xlat2.x * unity_FogColor.w;
    u_xlat2.x = exp2(u_xlat2.x);
    u_xlat2.x = min(u_xlat2.x, _HeigtFogColBase.w);
    u_xlat11 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat11 = min(max(u_xlat11, 0.0), 1.0);
#else
    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
#endif
    u_xlat16_5.x = (-u_xlat11) + 2.0;
    u_xlat16_5.x = u_xlat11 * u_xlat16_5.x;
    u_xlat6.xyz = u_xlat16_5.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat7.xyz = (-u_xlat6.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat6.xyz = vec3(u_xlat27) * u_xlat7.xyz + u_xlat6.xyz;
    u_xlat6.xyz = u_xlat2.xxx * u_xlat6.xyz;
    u_xlat27 = (-u_xlat2.x) + 1.0;
    vs_TEXCOORD0.w = u_xlat13.x * u_xlat27;
    u_xlat2.xyw = u_xlat13.xxx * u_xlat6.xyz;
    u_xlat27 = u_xlat0.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
    u_xlat13.xyz = vec3(u_xlat27) * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    vs_TEXCOORD0.xyz = u_xlat13.xyz * u_xlat4.xxx + u_xlat2.xyw;
    u_xlat4.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat4.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat4.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat27 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat4.xyz = vec3(u_xlat27) * u_xlat4.xyz;
    u_xlat16_5.x = u_xlat4.y * u_xlat4.y;
    u_xlat16_5.x = u_xlat4.x * u_xlat4.x + (-u_xlat16_5.x);
    u_xlat16_6 = u_xlat4.yzzx * u_xlat4.xyzz;
    u_xlat16_8.x = dot(unity_SHBr, u_xlat16_6);
    u_xlat16_8.y = dot(unity_SHBg, u_xlat16_6);
    u_xlat16_8.z = dot(unity_SHBb, u_xlat16_6);
    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_8.xyz;
    u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat4.w = 1.0;
    u_xlat16_8.x = dot(unity_SHAr, u_xlat4);
    u_xlat16_8.y = dot(unity_SHAg, u_xlat4);
    u_xlat16_8.z = dot(unity_SHAb, u_xlat4);
    u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_8.xyz;
    vs_TEXCOORD1.xyz = u_xlat16_5.xyz;
    vs_TEXCOORD1.w = 1.0;
    u_xlat27 = u_xlat3.y * _ProjectionParams.x;
    u_xlat7.w = u_xlat27 * 0.5;
    u_xlat7.xz = u_xlat3.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.z = u_xlat2.z;
    u_xlat3.xy = u_xlat7.zz + u_xlat7.xw;
    vs_TEXCOORD2 = u_xlat3;
    vs_TEXCOORD4.xyw = u_xlat3.xyw;
    u_xlat27 = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat27 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat27;
    u_xlat27 = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat27;
    u_xlat27 = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat27;
    vs_TEXCOORD3.z = (-u_xlat27);
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD3.w = 0.0;
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD5.w = 0.0;
    vs_TEXCOORD6.xyz = u_xlat4.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[1].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].www + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * in_POSITION0.yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.zzz + u_xlat1.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.www + u_xlat1.xyz;
    vs_TEXCOORD7.xyz = u_xlat1.xyz * vec3(-1.0, -1.0, 1.0);
    vs_TEXCOORD7.w = 0.0;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat27 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat1.xyz = vec3(u_xlat27) * u_xlat1.xyz;
    vs_TEXCOORD8.xyz = u_xlat1.xyz;
    vs_TEXCOORD8.w = 0.0;
    u_xlat2.xyz = u_xlat1.yzx * u_xlat4.zxy;
    u_xlat1.xyz = u_xlat4.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
    u_xlat27 = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD9.xyz = vec3(u_xlat27) * u_xlat1.xyz;
    vs_TEXCOORD9.w = 0.0;
    u_xlat27 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat27 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat27;
    vs_TEXCOORD10.w = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat27;
    vs_TEXCOORD10.xyz = u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	float _NormalMapScale;
uniform 	float _Normal01_U_Speed;
uniform 	float _Normal01_VSpeed;
uniform 	float _NormalMapBias;
uniform 	float _Normal02_U_Speed;
uniform 	float _Normal02_V_Speed;
uniform 	float _RefractionIntensity;
uniform 	float _OpacityByDepth;
uniform 	float _SpecularIntensity;
uniform 	vec3 _ES_MoonDirection;
uniform 	vec3 _ES_SunDirection;
uniform 	float _Gloss;
uniform 	float _ShoreTransparency;
uniform 	float _SpecularPower;
uniform 	vec4 _ShallowColor;
uniform 	float _ShoreFade;
uniform 	vec4 _DeepColor;
uniform 	float _DeepColorDepth;
uniform 	float _DeepColorFade;
uniform 	vec4 _DistortionIntensity;
uniform 	float _SSRDistortion;
uniform 	float _SSRDistortion_Shore;
uniform 	float _SSRIntensity;
uniform 	float _ReflectionIntensity;
uniform 	float _FresnelPower;
uniform 	float _ShoreReflectionFade;
uniform 	mediump float _ProjectUVScale;
uniform 	vec4 _ReflectionSkyCubeMap_HDR;
uniform lowp sampler2D _Normal01;
uniform lowp sampler2D _Normal02;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _SceneScaledBufferBeforTransParent;
uniform lowp samplerCube _ReflectionSkyCubeMap;
uniform lowp sampler2D _SSRTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD8;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec3 u_xlat1;
mediump float u_xlat16_1;
lowp vec3 u_xlat10_1;
bool u_xlatb1;
vec4 u_xlat2;
lowp vec4 u_xlat10_2;
bool u_xlatb2;
mediump vec3 u_xlat16_3;
lowp vec4 u_xlat10_3;
vec3 u_xlat4;
bool u_xlatb4;
vec3 u_xlat5;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
lowp vec3 u_xlat10_7;
mediump vec3 u_xlat16_8;
vec3 u_xlat9;
vec3 u_xlat10;
vec3 u_xlat11;
mediump float u_xlat16_12;
float u_xlat13;
vec3 u_xlat14;
vec3 u_xlat16;
float u_xlat25;
bool u_xlatb25;
float u_xlat26;
vec2 u_xlat30;
mediump float u_xlat16_36;
float u_xlat37;
float u_xlat38;
bool u_xlatb38;
float u_xlat40;
void main()
{
    u_xlat16_0.w = -1.0;
    u_xlat1.xy = vs_TEXCOORD5.zx * vec2(vec2(_ProjectUVScale, _ProjectUVScale));
    u_xlat2.w = _Time.y * _Normal02_V_Speed + u_xlat1.x;
    u_xlat2.yz = _Time.yy * vec2(_Normal01_VSpeed, _Normal02_U_Speed) + u_xlat1.xy;
    u_xlat2.x = _Time.y * _Normal01_U_Speed + u_xlat1.y;
    u_xlat10_1.xyz = texture(_Normal01, u_xlat2.xy, _NormalMapBias).xyz;
    u_xlat10_2.xyz = texture(_Normal02, u_xlat2.zw, _NormalMapBias).xyz;
    u_xlat16_0.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_3.xyz = u_xlat10_2.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.wwz;
    u_xlat16_0.xy = u_xlat16_0.xy * vec2(_NormalMapScale);
    u_xlat16_3.xy = u_xlat16_3.xy * vec2(_NormalMapScale);
    u_xlat16_0.z = -1.0;
    u_xlat16_0.xyz = u_xlat16_0.xzy + u_xlat16_3.xzy;
    u_xlat1.xyz = u_xlat16_0.xzy * _DistortionIntensity.xyz;
    u_xlat2.x = vs_TEXCOORD8.x;
    u_xlat2.y = vs_TEXCOORD9.x;
    u_xlat2.z = vs_TEXCOORD6.x;
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat4.x = vs_TEXCOORD8.y;
    u_xlat4.y = vs_TEXCOORD9.y;
    u_xlat4.z = vs_TEXCOORD6.y;
    u_xlat2.y = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat4.x = vs_TEXCOORD8.z;
    u_xlat4.y = vs_TEXCOORD9.z;
    u_xlat4.z = vs_TEXCOORD6.z;
    u_xlat2.z = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat1.xy = u_xlat1.xy * vec2(_SSRDistortion);
    u_xlat25 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat25 = inversesqrt(u_xlat25);
    u_xlat2.xyz = vec3(u_xlat25) * u_xlat2.xyz;
    u_xlat4.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat25 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat25 = inversesqrt(u_xlat25);
    u_xlat5.xyz = vec3(u_xlat25) * u_xlat4.xyz;
    u_xlat37 = dot((-u_xlat5.xyz), u_xlat2.xyz);
    u_xlat37 = u_xlat37 + u_xlat37;
    u_xlat2.xyz = u_xlat2.xyz * (-vec3(u_xlat37)) + (-u_xlat5.xyz);
    u_xlat10_2 = textureLod(_ReflectionSkyCubeMap, u_xlat2.xyz, 0.0);
    u_xlat16_36 = u_xlat10_2.w + -1.0;
    u_xlat16_36 = _ReflectionSkyCubeMap_HDR.w * u_xlat16_36 + 1.0;
    u_xlat16_36 = log2(u_xlat16_36);
    u_xlat16_36 = u_xlat16_36 * _ReflectionSkyCubeMap_HDR.y;
    u_xlat16_36 = exp2(u_xlat16_36);
    u_xlat16_36 = u_xlat16_36 * _ReflectionSkyCubeMap_HDR.x;
    u_xlat6.xy = u_xlat16_0.xz * vec2(vec2(_RefractionIntensity, _RefractionIntensity));
    u_xlat37 = float(1.0) / vs_TEXCOORD4.w;
    u_xlat37 = u_xlat37 * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat37 = min(max(u_xlat37, 0.0), 1.0);
#else
    u_xlat37 = clamp(u_xlat37, 0.0, 1.0);
#endif
    u_xlat6.xy = vec2(u_xlat37) * u_xlat6.xy;
    u_xlat6.xy = u_xlat6.xy * vs_TEXCOORD4.ww;
    u_xlat30.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat37 = texture(_CameraDepthTexture, u_xlat30.xy).x;
    u_xlat37 = _ZBufferParams.z * u_xlat37 + _ZBufferParams.w;
    u_xlat37 = float(1.0) / u_xlat37;
    u_xlat37 = u_xlat37 + (-vs_TEXCOORD4.w);
#ifdef UNITY_ADRENO_ES3
    u_xlat37 = min(max(u_xlat37, 0.0), 1.0);
#else
    u_xlat37 = clamp(u_xlat37, 0.0, 1.0);
#endif
    u_xlat6.xy = vec2(u_xlat37) * u_xlat6.xy;
    u_xlat6.z = 0.0;
    u_xlat7.xyz = u_xlat6.xyz + vs_TEXCOORD4.xyw;
    u_xlat7.xy = u_xlat7.xy / u_xlat7.zz;
    u_xlat37 = texture(_CameraDepthTexture, u_xlat7.xy).x;
    u_xlat37 = _ZBufferParams.z * u_xlat37 + _ZBufferParams.w;
    u_xlat37 = float(1.0) / u_xlat37;
    u_xlat37 = u_xlat37 + (-vs_TEXCOORD4.w);
#ifdef UNITY_ADRENO_ES3
    u_xlat37 = min(max(u_xlat37, 0.0), 1.0);
#else
    u_xlat37 = clamp(u_xlat37, 0.0, 1.0);
#endif
    u_xlat6.xyz = vec3(u_xlat37) * u_xlat6.xyz + vs_TEXCOORD4.xyw;
    u_xlat30.xy = u_xlat6.xy / u_xlat6.zz;
    u_xlat6.xy = u_xlat6.xy / vs_TEXCOORD4.ww;
    u_xlat10_7.xyz = texture(_SceneScaledBufferBeforTransParent, u_xlat6.xy).xyz;
    u_xlat37 = texture(_CameraDepthTexture, u_xlat30.xy).x;
    u_xlat37 = _ZBufferParams.z * u_xlat37 + _ZBufferParams.w;
    u_xlat37 = float(1.0) / u_xlat37;
    u_xlat37 = u_xlat37 + (-vs_TEXCOORD4.w);
    u_xlat38 = float(1.0) / _SSRDistortion_Shore;
    u_xlat38 = u_xlat37 * u_xlat38;
#ifdef UNITY_ADRENO_ES3
    u_xlat38 = min(max(u_xlat38, 0.0), 1.0);
#else
    u_xlat38 = clamp(u_xlat38, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat1.xy * vec2(u_xlat38);
    u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD4.ww + vs_TEXCOORD4.xy;
    u_xlat1.xy = u_xlat1.xy / vs_TEXCOORD4.ww;
    u_xlat10_3 = texture(_SSRTexture, u_xlat1.xy).wxyz;
    u_xlat16_6.xyz = (-vec3(u_xlat16_36)) * u_xlat10_2.xyz + u_xlat10_3.yzw;
    u_xlat16_8.xyz = u_xlat10_2.xyz * vec3(u_xlat16_36);
    u_xlat16_3.x = u_xlat10_3.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat2.xyz = u_xlat16_6.xyz * vec3(vec3(_SSRIntensity, _SSRIntensity, _SSRIntensity));
    u_xlat2.xyz = u_xlat16_3.xxx * u_xlat2.xyz + u_xlat16_8.xyz;
    u_xlat1.x = 0.100000001 / _DeepColorDepth;
    u_xlat1.x = u_xlat1.x * u_xlat37;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.x = max(u_xlat1.x, 9.99999975e-05);
    u_xlat1.x = log2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _DeepColorFade;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat13 = float(1.0) / _ShoreTransparency;
    u_xlat38 = u_xlat13 * u_xlat37;
#ifdef UNITY_ADRENO_ES3
    u_xlat38 = min(max(u_xlat38, 0.0), 1.0);
#else
    u_xlat38 = clamp(u_xlat38, 0.0, 1.0);
#endif
    u_xlat38 = max(u_xlat38, 9.99999975e-05);
    u_xlat38 = log2(u_xlat38);
    u_xlat38 = u_xlat38 * _ShoreFade;
    u_xlat38 = exp2(u_xlat38);
    u_xlat6.xyz = _ShallowColor.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat6.xyz = vec3(u_xlat38) * u_xlat6.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat9.xyz = (-u_xlat6.xyz) * u_xlat10_7.xyz + _DeepColor.xyz;
    u_xlat10.xyz = u_xlat10_7.xyz * u_xlat6.xyz;
    u_xlat9.xyz = u_xlat1.xxx * u_xlat9.xyz + u_xlat10.xyz;
    u_xlat2.xyz = u_xlat2.xyz + (-u_xlat9.xyz);
    u_xlat1.x = float(1.0) / _ShoreReflectionFade;
    u_xlat1.x = u_xlat1.x * u_xlat37;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat40 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat40 = inversesqrt(u_xlat40);
    u_xlat11.xyz = vec3(u_xlat40) * vs_TEXCOORD6.xyz;
    u_xlat40 = dot(u_xlat5.xyz, u_xlat11.xyz);
    u_xlat40 = (-u_xlat40) + 1.0;
    u_xlat40 = max(u_xlat40, 9.99999975e-05);
    u_xlat40 = log2(u_xlat40);
    u_xlat5.x = u_xlat40 * _FresnelPower;
    u_xlat40 = u_xlat40 * _SpecularPower;
    u_xlat40 = exp2(u_xlat40);
    u_xlat5.x = exp2(u_xlat5.x);
    u_xlat5.x = u_xlat5.x * _ReflectionIntensity;
    u_xlat1.x = u_xlat1.x * u_xlat5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat2.xyz = u_xlat1.xxx * u_xlat2.xyz + u_xlat9.xyz;
    u_xlat2.xyz = (-u_xlat6.xyz) * u_xlat10_7.xyz + u_xlat2.xyz;
    u_xlat2.xyz = vec3(u_xlat38) * u_xlat2.xyz + u_xlat10.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(0.0>=_ES_MoonDirection.y);
#else
    u_xlatb1 = 0.0>=_ES_MoonDirection.y;
#endif
    u_xlat5.xyz = (bool(u_xlatb1)) ? _ES_SunDirection.xyz : _ES_MoonDirection.xyz;
    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat25) + u_xlat5.xyz;
    u_xlat1.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
    u_xlat16_0.y = 1.0;
    u_xlat16_1 = dot(u_xlat16_0.xyz, u_xlat16_0.xyz);
    u_xlat16_1 = inversesqrt(u_xlat16_1);
    u_xlat16_5.xyz = u_xlat16_0.xyz * vec3(u_xlat16_1);
    u_xlat1.x = dot(u_xlat16_5.xyz, u_xlat4.xyz);
    u_xlat1.x = max(u_xlat1.x, 9.99999975e-05);
    u_xlat1.x = log2(u_xlat1.x);
    u_xlat25 = _Gloss * 128.0;
    u_xlat1.x = u_xlat1.x * u_xlat25;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _SpecularIntensity;
    u_xlat1.x = max(u_xlat1.x, 0.0);
    u_xlat1.x = min(u_xlat1.x, 16.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb25 = !!(_ES_MoonDirection.y>=9.99999975e-05);
#else
    u_xlatb25 = _ES_MoonDirection.y>=9.99999975e-05;
#endif
    u_xlat25 = u_xlatb25 ? 1.0 : float(0.0);
    u_xlat38 = _ES_MoonDirection.y + -1.0;
    u_xlat25 = u_xlat25 * u_xlat38 + 1.0;
    u_xlat4.xyz = vec3(u_xlat25) * _LightColor0.xyz;
    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
    u_xlat1.x = u_xlat37 + -1.0;
    u_xlat1.x = u_xlat13 * u_xlat1.x;
    u_xlat1.x = u_xlat1.x * 0.100000001;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat1.xxx * u_xlat4.xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat40) + u_xlat2.xyz;
    u_xlat2.xyz = vs_TEXCOORD5.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat38 = u_xlat2.y * _HeigtFogParams.x;
    u_xlat4.x = u_xlat38 * -1.44269502;
    u_xlat4.x = exp2(u_xlat4.x);
    u_xlat4.x = (-u_xlat4.x) + 1.0;
    u_xlat4.x = u_xlat4.x / u_xlat38;
#ifdef UNITY_ADRENO_ES3
    u_xlatb38 = !!(0.00999999978<abs(u_xlat38));
#else
    u_xlatb38 = 0.00999999978<abs(u_xlat38);
#endif
    u_xlat16_0.x = (u_xlatb38) ? u_xlat4.x : 1.0;
    u_xlat38 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat38 = sqrt(u_xlat38);
    u_xlat4.x = u_xlat38 * _HeigtFogParams.y;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat4.x;
    u_xlat16_0.x = exp2((-u_xlat16_0.x));
    u_xlat16_0.x = (-u_xlat16_0.x) + 1.0;
    u_xlat4.x = u_xlat2.y * _HeigtFogParams2.x;
    u_xlat16.x = u_xlat4.x * -1.44269502;
    u_xlat16.x = exp2(u_xlat16.x);
    u_xlat16.x = (-u_xlat16.x) + 1.0;
    u_xlat16.x = u_xlat16.x / u_xlat4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(0.00999999978<abs(u_xlat4.x));
#else
    u_xlatb4 = 0.00999999978<abs(u_xlat4.x);
#endif
    u_xlat16_12 = (u_xlatb4) ? u_xlat16.x : 1.0;
    u_xlat4.x = u_xlat38 * _HeigtFogParams2.y;
    u_xlat16_12 = u_xlat16_12 * u_xlat4.x;
    u_xlat16_12 = exp2((-u_xlat16_12));
    u_xlat16_0.y = (-u_xlat16_12) + 1.0;
    u_xlat16_0.xy = max(u_xlat16_0.xy, vec2(0.0, 0.0));
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat4.x = u_xlat38 * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat16_12 = (-u_xlat4.x) + 2.0;
    u_xlat16_12 = u_xlat16_12 * u_xlat4.x;
    u_xlat4.x = u_xlat16_12 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat4.x = u_xlat4.x + 1.0;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat4.x;
    u_xlat4.x = min(u_xlat16_0.x, _HeigtFogColBase.w);
    u_xlat16.x = (-u_xlat4.x) + 1.0;
    u_xlat5.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat5.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat5.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat5.xyz);
    u_xlat14.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!((-u_xlat2.x)>=u_xlat14.x);
#else
    u_xlatb2 = (-u_xlat2.x)>=u_xlat14.x;
#endif
    u_xlat14.x = u_xlat38 * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat14.x = min(max(u_xlat14.x, 0.0), 1.0);
#else
    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
#endif
    u_xlat26 = u_xlat38 + (-_HeigtFogRamp.w);
    u_xlat26 = u_xlat26 * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat26 = min(max(u_xlat26, 0.0), 1.0);
#else
    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);
#endif
    u_xlat38 = (-u_xlat14.x) + 2.0;
    u_xlat14.x = u_xlat38 * u_xlat14.x;
    u_xlat38 = u_xlat14.x * _HeigtFogColDelta.w;
    u_xlat2.x = (u_xlatb2) ? u_xlat38 : u_xlat14.x;
    u_xlat2.x = log2(u_xlat2.x);
    u_xlat2.x = u_xlat2.x * unity_FogColor.w;
    u_xlat2.x = exp2(u_xlat2.x);
    u_xlat2.x = min(u_xlat2.x, _HeigtFogColBase.w);
    u_xlat14.x = vs_TEXCOORD5.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat14.x = min(max(u_xlat14.x, 0.0), 1.0);
#else
    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
#endif
    u_xlat16_0.x = (-u_xlat14.x) + 2.0;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat14.x;
    u_xlat5.xyz = u_xlat16_0.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat6.xyz = (-u_xlat5.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat14.xyz = vec3(u_xlat26) * u_xlat6.xyz + u_xlat5.xyz;
    u_xlat2.yzw = u_xlat2.xxx * u_xlat14.xyz;
    u_xlat2.x = (-u_xlat2.x) + 1.0;
    u_xlat2 = u_xlat16.xxxx * u_xlat2;
    u_xlat16.x = vs_TEXCOORD5.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat16.x = min(max(u_xlat16.x, 0.0), 1.0);
#else
    u_xlat16.x = clamp(u_xlat16.x, 0.0, 1.0);
#endif
    u_xlat16.xyz = u_xlat16.xxx * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    u_xlat14.xyz = u_xlat16.xyz * u_xlat4.xxx + u_xlat2.yzw;
    u_xlat0.xyz = u_xlat2.xxx * u_xlat1.xyz + u_xlat14.xyz;
    u_xlat1.x = 0.100000001 / _OpacityByDepth;
    u_xlat1.x = u_xlat1.x * u_xlat37;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat0.w = u_xlat1.x * vs_COLOR0.w;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" "MHY_SHADER_HIGH" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	mediump float _MHYZBias;
uniform 	vec4 hlslcc_mtx4x4_mhyJitteredVP[4];
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
out highp vec4 vs_TEXCOORD9;
out highp vec4 vs_TEXCOORD10;
float u_xlat0;
int u_xlati0;
vec4 u_xlat1;
bool u_xlatb1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
bool u_xlatb4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
mediump vec4 u_xlat16_6;
vec4 u_xlat7;
mediump vec3 u_xlat16_8;
vec3 u_xlat9;
float u_xlat10;
float u_xlat13;
bool u_xlatb13;
mediump float u_xlat16_14;
float u_xlat22;
float u_xlat28;
float u_xlat31;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat9.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4_mhyJitteredVP[1];
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[3] * u_xlat2.wwww + u_xlat1;
    u_xlat3.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    u_xlat3.xyw = u_xlat1.xyw;
    gl_Position = u_xlat3;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.xyw = u_xlat9.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat4.x = u_xlat1.y * _HeigtFogParams.x;
    u_xlat13 = u_xlat4.x * -1.44269502;
    u_xlat13 = exp2(u_xlat13);
    u_xlat13 = (-u_xlat13) + 1.0;
    u_xlat13 = u_xlat13 / u_xlat4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(0.00999999978<abs(u_xlat4.x));
#else
    u_xlatb4 = 0.00999999978<abs(u_xlat4.x);
#endif
    u_xlat16_5.x = (u_xlatb4) ? u_xlat13 : 1.0;
    u_xlat4.x = dot(u_xlat1.xyw, u_xlat1.xyw);
    u_xlat4.x = sqrt(u_xlat4.x);
    u_xlat13 = u_xlat4.x * _HeigtFogParams.y;
    u_xlat16_5.x = u_xlat13 * u_xlat16_5.x;
    u_xlat16_5.x = exp2((-u_xlat16_5.x));
    u_xlat16_5.x = (-u_xlat16_5.x) + 1.0;
    u_xlat13 = u_xlat1.y * _HeigtFogParams2.x;
    u_xlat22 = u_xlat13 * -1.44269502;
    u_xlat22 = exp2(u_xlat22);
    u_xlat22 = (-u_xlat22) + 1.0;
    u_xlat22 = u_xlat22 / u_xlat13;
#ifdef UNITY_ADRENO_ES3
    u_xlatb13 = !!(0.00999999978<abs(u_xlat13));
#else
    u_xlatb13 = 0.00999999978<abs(u_xlat13);
#endif
    u_xlat16_14 = (u_xlatb13) ? u_xlat22 : 1.0;
    u_xlat13 = u_xlat4.x * _HeigtFogParams2.y;
    u_xlat16_14 = u_xlat13 * u_xlat16_14;
    u_xlat16_14 = exp2((-u_xlat16_14));
    u_xlat16_5.y = (-u_xlat16_14) + 1.0;
    u_xlat16_5.xy = max(u_xlat16_5.xy, vec2(0.0, 0.0));
    u_xlat16_5.x = u_xlat16_5.y + u_xlat16_5.x;
    u_xlat13 = u_xlat4.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat13 = min(max(u_xlat13, 0.0), 1.0);
#else
    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
#endif
    u_xlat16_14 = (-u_xlat13) + 2.0;
    u_xlat16_14 = u_xlat13 * u_xlat16_14;
    u_xlat13 = u_xlat16_14 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat13 = u_xlat13 + 1.0;
    u_xlat16_5.x = u_xlat13 * u_xlat16_5.x;
    u_xlat13 = min(u_xlat16_5.x, _HeigtFogColBase.w);
    u_xlat22 = (-u_xlat13) + 1.0;
    u_xlat31 = _ProjectionParams.z * 0.999899983;
    u_xlat6.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat6.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat6.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat1.x = dot(u_xlat1.xyw, u_xlat6.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!((-u_xlat1.x)>=u_xlat31);
#else
    u_xlatb1 = (-u_xlat1.x)>=u_xlat31;
#endif
    u_xlat10 = u_xlat4.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat10 = min(max(u_xlat10, 0.0), 1.0);
#else
    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
#endif
    u_xlat28 = u_xlat4.x + (-_HeigtFogRamp.w);
    u_xlat28 = u_xlat28 * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat28 = min(max(u_xlat28, 0.0), 1.0);
#else
    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
#endif
    u_xlat4.x = (-u_xlat10) + 2.0;
    u_xlat10 = u_xlat10 * u_xlat4.x;
    u_xlat4.x = u_xlat10 * _HeigtFogColDelta.w;
    u_xlat1.x = (u_xlatb1) ? u_xlat4.x : u_xlat10;
    u_xlat1.x = log2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * unity_FogColor.w;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat1.x = min(u_xlat1.x, _HeigtFogColBase.w);
    u_xlat10 = u_xlat9.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat10 = min(max(u_xlat10, 0.0), 1.0);
#else
    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
#endif
    u_xlat16_5.x = (-u_xlat10) + 2.0;
    u_xlat16_5.x = u_xlat10 * u_xlat16_5.x;
    u_xlat6.xyz = u_xlat16_5.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat7.xyz = (-u_xlat6.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat6.xyz = vec3(u_xlat28) * u_xlat7.xyz + u_xlat6.xyz;
    u_xlat6.xyz = u_xlat1.xxx * u_xlat6.xyz;
    u_xlat1.x = (-u_xlat1.x) + 1.0;
    vs_TEXCOORD0.w = u_xlat22 * u_xlat1.x;
    u_xlat1.xyw = vec3(u_xlat22) * u_xlat6.xyz;
    u_xlat4.x = u_xlat9.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat4.xzw = u_xlat4.xxx * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    vs_TEXCOORD0.xyz = u_xlat4.xzw * vec3(u_xlat13) + u_xlat1.xyw;
    vs_TEXCOORD1.w = 1.0;
    u_xlat4.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat4.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat4.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat1.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
    u_xlat16_5.x = u_xlat4.y * u_xlat4.y;
    u_xlat16_5.x = u_xlat4.x * u_xlat4.x + (-u_xlat16_5.x);
    u_xlat16_6 = u_xlat4.yzzx * u_xlat4.xyzz;
    u_xlat16_8.x = dot(unity_SHBr, u_xlat16_6);
    u_xlat16_8.y = dot(unity_SHBg, u_xlat16_6);
    u_xlat16_8.z = dot(unity_SHBb, u_xlat16_6);
    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_8.xyz;
    u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat4.w = 1.0;
    u_xlat16_8.x = dot(unity_SHAr, u_xlat4);
    u_xlat16_8.y = dot(unity_SHAg, u_xlat4);
    u_xlat16_8.z = dot(unity_SHAb, u_xlat4);
    u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_8.xyz;
    vs_TEXCOORD1.xyz = u_xlat16_5.xyz;
    u_xlat1.x = u_xlat3.y * _ProjectionParams.x;
    u_xlat7.w = u_xlat1.x * 0.5;
    u_xlat7.xz = u_xlat3.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.z = u_xlat1.z;
    u_xlat3.xy = u_xlat7.zz + u_xlat7.xw;
    vs_TEXCOORD2 = u_xlat3;
    vs_TEXCOORD4.xyw = u_xlat3.xyw;
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD3.w = 0.0;
    u_xlat1.x = u_xlat2.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat2.x + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat2.z + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat2.w + u_xlat1.x;
    vs_TEXCOORD3.z = (-u_xlat1.x);
    vs_TEXCOORD5.w = 0.0;
    vs_TEXCOORD5.xyz = u_xlat9.xyz;
    u_xlat9.xyz = (-u_xlat9.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD6.w = 0.0;
    vs_TEXCOORD6.xyz = u_xlat4.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].www + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * in_POSITION0.yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.zzz + u_xlat1.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.www + u_xlat1.xyz;
    vs_TEXCOORD7.xyz = u_xlat1.xyz * vec3(-1.0, -1.0, 1.0);
    vs_TEXCOORD7.w = 0.0;
    u_xlat1.xyz = in_TANGENT0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat0 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0 = inversesqrt(u_xlat0);
    u_xlat1.xyz = vec3(u_xlat0) * u_xlat1.xyz;
    vs_TEXCOORD8.xyz = u_xlat1.xyz;
    vs_TEXCOORD8.w = 0.0;
    u_xlat2.xyz = u_xlat1.yzx * u_xlat4.zxy;
    u_xlat1.xyz = u_xlat4.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
    u_xlat0 = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD9.xyz = vec3(u_xlat0) * u_xlat1.xyz;
    vs_TEXCOORD9.w = 0.0;
    u_xlat0 = u_xlat9.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat9.x + u_xlat0;
    vs_TEXCOORD10.w = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat9.z + u_xlat0;
    vs_TEXCOORD10.xyz = u_xlat9.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	float _NormalMapScale;
uniform 	float _Normal01_U_Speed;
uniform 	float _Normal01_VSpeed;
uniform 	float _NormalMapBias;
uniform 	float _Normal02_U_Speed;
uniform 	float _Normal02_V_Speed;
uniform 	float _RefractionIntensity;
uniform 	float _OpacityByDepth;
uniform 	float _SpecularIntensity;
uniform 	vec3 _ES_MoonDirection;
uniform 	vec3 _ES_SunDirection;
uniform 	float _Gloss;
uniform 	float _ShoreTransparency;
uniform 	float _SpecularPower;
uniform 	vec4 _ShallowColor;
uniform 	float _ShoreFade;
uniform 	vec4 _DeepColor;
uniform 	float _DeepColorDepth;
uniform 	float _DeepColorFade;
uniform 	vec4 _DistortionIntensity;
uniform 	float _SSRDistortion;
uniform 	float _SSRDistortion_Shore;
uniform 	float _SSRIntensity;
uniform 	float _ReflectionIntensity;
uniform 	float _FresnelPower;
uniform 	float _ShoreReflectionFade;
uniform 	mediump float _ProjectUVScale;
uniform 	vec4 _ReflectionSkyCubeMap_HDR;
uniform lowp sampler2D _Normal01;
uniform lowp sampler2D _Normal02;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _SceneScaledBufferBeforTransParent;
uniform lowp samplerCube _ReflectionSkyCubeMap;
uniform lowp sampler2D _SSRTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD8;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec3 u_xlat1;
mediump float u_xlat16_1;
lowp vec3 u_xlat10_1;
bool u_xlatb1;
vec4 u_xlat2;
lowp vec4 u_xlat10_2;
bool u_xlatb2;
mediump vec3 u_xlat16_3;
lowp vec4 u_xlat10_3;
vec3 u_xlat4;
bool u_xlatb4;
vec3 u_xlat5;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
lowp vec3 u_xlat10_7;
mediump vec3 u_xlat16_8;
vec3 u_xlat9;
vec3 u_xlat10;
vec3 u_xlat11;
mediump float u_xlat16_12;
float u_xlat13;
vec3 u_xlat14;
vec3 u_xlat16;
float u_xlat25;
bool u_xlatb25;
float u_xlat26;
vec2 u_xlat30;
mediump float u_xlat16_36;
float u_xlat37;
float u_xlat38;
bool u_xlatb38;
float u_xlat40;
void main()
{
    u_xlat16_0.w = -1.0;
    u_xlat1.xy = vs_TEXCOORD5.zx * vec2(vec2(_ProjectUVScale, _ProjectUVScale));
    u_xlat2.w = _Time.y * _Normal02_V_Speed + u_xlat1.x;
    u_xlat2.yz = _Time.yy * vec2(_Normal01_VSpeed, _Normal02_U_Speed) + u_xlat1.xy;
    u_xlat2.x = _Time.y * _Normal01_U_Speed + u_xlat1.y;
    u_xlat10_1.xyz = texture(_Normal01, u_xlat2.xy, _NormalMapBias).xyz;
    u_xlat10_2.xyz = texture(_Normal02, u_xlat2.zw, _NormalMapBias).xyz;
    u_xlat16_0.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_3.xyz = u_xlat10_2.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.wwz;
    u_xlat16_0.xy = u_xlat16_0.xy * vec2(_NormalMapScale);
    u_xlat16_3.xy = u_xlat16_3.xy * vec2(_NormalMapScale);
    u_xlat16_0.z = -1.0;
    u_xlat16_0.xyz = u_xlat16_0.xzy + u_xlat16_3.xzy;
    u_xlat1.xyz = u_xlat16_0.xzy * _DistortionIntensity.xyz;
    u_xlat2.x = vs_TEXCOORD8.x;
    u_xlat2.y = vs_TEXCOORD9.x;
    u_xlat2.z = vs_TEXCOORD6.x;
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat4.x = vs_TEXCOORD8.y;
    u_xlat4.y = vs_TEXCOORD9.y;
    u_xlat4.z = vs_TEXCOORD6.y;
    u_xlat2.y = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat4.x = vs_TEXCOORD8.z;
    u_xlat4.y = vs_TEXCOORD9.z;
    u_xlat4.z = vs_TEXCOORD6.z;
    u_xlat2.z = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat1.xy = u_xlat1.xy * vec2(_SSRDistortion);
    u_xlat25 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat25 = inversesqrt(u_xlat25);
    u_xlat2.xyz = vec3(u_xlat25) * u_xlat2.xyz;
    u_xlat4.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat25 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat25 = inversesqrt(u_xlat25);
    u_xlat5.xyz = vec3(u_xlat25) * u_xlat4.xyz;
    u_xlat37 = dot((-u_xlat5.xyz), u_xlat2.xyz);
    u_xlat37 = u_xlat37 + u_xlat37;
    u_xlat2.xyz = u_xlat2.xyz * (-vec3(u_xlat37)) + (-u_xlat5.xyz);
    u_xlat10_2 = textureLod(_ReflectionSkyCubeMap, u_xlat2.xyz, 0.0);
    u_xlat16_36 = u_xlat10_2.w + -1.0;
    u_xlat16_36 = _ReflectionSkyCubeMap_HDR.w * u_xlat16_36 + 1.0;
    u_xlat16_36 = log2(u_xlat16_36);
    u_xlat16_36 = u_xlat16_36 * _ReflectionSkyCubeMap_HDR.y;
    u_xlat16_36 = exp2(u_xlat16_36);
    u_xlat16_36 = u_xlat16_36 * _ReflectionSkyCubeMap_HDR.x;
    u_xlat6.xy = u_xlat16_0.xz * vec2(vec2(_RefractionIntensity, _RefractionIntensity));
    u_xlat37 = float(1.0) / vs_TEXCOORD4.w;
    u_xlat37 = u_xlat37 * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat37 = min(max(u_xlat37, 0.0), 1.0);
#else
    u_xlat37 = clamp(u_xlat37, 0.0, 1.0);
#endif
    u_xlat6.xy = vec2(u_xlat37) * u_xlat6.xy;
    u_xlat6.xy = u_xlat6.xy * vs_TEXCOORD4.ww;
    u_xlat30.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat37 = texture(_CameraDepthTexture, u_xlat30.xy).x;
    u_xlat37 = _ZBufferParams.z * u_xlat37 + _ZBufferParams.w;
    u_xlat37 = float(1.0) / u_xlat37;
    u_xlat37 = u_xlat37 + (-vs_TEXCOORD4.w);
#ifdef UNITY_ADRENO_ES3
    u_xlat37 = min(max(u_xlat37, 0.0), 1.0);
#else
    u_xlat37 = clamp(u_xlat37, 0.0, 1.0);
#endif
    u_xlat6.xy = vec2(u_xlat37) * u_xlat6.xy;
    u_xlat6.z = 0.0;
    u_xlat7.xyz = u_xlat6.xyz + vs_TEXCOORD4.xyw;
    u_xlat7.xy = u_xlat7.xy / u_xlat7.zz;
    u_xlat37 = texture(_CameraDepthTexture, u_xlat7.xy).x;
    u_xlat37 = _ZBufferParams.z * u_xlat37 + _ZBufferParams.w;
    u_xlat37 = float(1.0) / u_xlat37;
    u_xlat37 = u_xlat37 + (-vs_TEXCOORD4.w);
#ifdef UNITY_ADRENO_ES3
    u_xlat37 = min(max(u_xlat37, 0.0), 1.0);
#else
    u_xlat37 = clamp(u_xlat37, 0.0, 1.0);
#endif
    u_xlat6.xyz = vec3(u_xlat37) * u_xlat6.xyz + vs_TEXCOORD4.xyw;
    u_xlat30.xy = u_xlat6.xy / u_xlat6.zz;
    u_xlat6.xy = u_xlat6.xy / vs_TEXCOORD4.ww;
    u_xlat10_7.xyz = texture(_SceneScaledBufferBeforTransParent, u_xlat6.xy).xyz;
    u_xlat37 = texture(_CameraDepthTexture, u_xlat30.xy).x;
    u_xlat37 = _ZBufferParams.z * u_xlat37 + _ZBufferParams.w;
    u_xlat37 = float(1.0) / u_xlat37;
    u_xlat37 = u_xlat37 + (-vs_TEXCOORD4.w);
    u_xlat38 = float(1.0) / _SSRDistortion_Shore;
    u_xlat38 = u_xlat37 * u_xlat38;
#ifdef UNITY_ADRENO_ES3
    u_xlat38 = min(max(u_xlat38, 0.0), 1.0);
#else
    u_xlat38 = clamp(u_xlat38, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat1.xy * vec2(u_xlat38);
    u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD4.ww + vs_TEXCOORD4.xy;
    u_xlat1.xy = u_xlat1.xy / vs_TEXCOORD4.ww;
    u_xlat10_3 = texture(_SSRTexture, u_xlat1.xy).wxyz;
    u_xlat16_6.xyz = (-vec3(u_xlat16_36)) * u_xlat10_2.xyz + u_xlat10_3.yzw;
    u_xlat16_8.xyz = u_xlat10_2.xyz * vec3(u_xlat16_36);
    u_xlat16_3.x = u_xlat10_3.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat2.xyz = u_xlat16_6.xyz * vec3(vec3(_SSRIntensity, _SSRIntensity, _SSRIntensity));
    u_xlat2.xyz = u_xlat16_3.xxx * u_xlat2.xyz + u_xlat16_8.xyz;
    u_xlat1.x = 0.100000001 / _DeepColorDepth;
    u_xlat1.x = u_xlat1.x * u_xlat37;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.x = max(u_xlat1.x, 9.99999975e-05);
    u_xlat1.x = log2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _DeepColorFade;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat13 = float(1.0) / _ShoreTransparency;
    u_xlat38 = u_xlat13 * u_xlat37;
#ifdef UNITY_ADRENO_ES3
    u_xlat38 = min(max(u_xlat38, 0.0), 1.0);
#else
    u_xlat38 = clamp(u_xlat38, 0.0, 1.0);
#endif
    u_xlat38 = max(u_xlat38, 9.99999975e-05);
    u_xlat38 = log2(u_xlat38);
    u_xlat38 = u_xlat38 * _ShoreFade;
    u_xlat38 = exp2(u_xlat38);
    u_xlat6.xyz = _ShallowColor.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat6.xyz = vec3(u_xlat38) * u_xlat6.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat9.xyz = (-u_xlat6.xyz) * u_xlat10_7.xyz + _DeepColor.xyz;
    u_xlat10.xyz = u_xlat10_7.xyz * u_xlat6.xyz;
    u_xlat9.xyz = u_xlat1.xxx * u_xlat9.xyz + u_xlat10.xyz;
    u_xlat2.xyz = u_xlat2.xyz + (-u_xlat9.xyz);
    u_xlat1.x = float(1.0) / _ShoreReflectionFade;
    u_xlat1.x = u_xlat1.x * u_xlat37;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat40 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat40 = inversesqrt(u_xlat40);
    u_xlat11.xyz = vec3(u_xlat40) * vs_TEXCOORD6.xyz;
    u_xlat40 = dot(u_xlat5.xyz, u_xlat11.xyz);
    u_xlat40 = (-u_xlat40) + 1.0;
    u_xlat40 = max(u_xlat40, 9.99999975e-05);
    u_xlat40 = log2(u_xlat40);
    u_xlat5.x = u_xlat40 * _FresnelPower;
    u_xlat40 = u_xlat40 * _SpecularPower;
    u_xlat40 = exp2(u_xlat40);
    u_xlat5.x = exp2(u_xlat5.x);
    u_xlat5.x = u_xlat5.x * _ReflectionIntensity;
    u_xlat1.x = u_xlat1.x * u_xlat5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat2.xyz = u_xlat1.xxx * u_xlat2.xyz + u_xlat9.xyz;
    u_xlat2.xyz = (-u_xlat6.xyz) * u_xlat10_7.xyz + u_xlat2.xyz;
    u_xlat2.xyz = vec3(u_xlat38) * u_xlat2.xyz + u_xlat10.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(0.0>=_ES_MoonDirection.y);
#else
    u_xlatb1 = 0.0>=_ES_MoonDirection.y;
#endif
    u_xlat5.xyz = (bool(u_xlatb1)) ? _ES_SunDirection.xyz : _ES_MoonDirection.xyz;
    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat25) + u_xlat5.xyz;
    u_xlat1.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
    u_xlat16_0.y = 1.0;
    u_xlat16_1 = dot(u_xlat16_0.xyz, u_xlat16_0.xyz);
    u_xlat16_1 = inversesqrt(u_xlat16_1);
    u_xlat16_5.xyz = u_xlat16_0.xyz * vec3(u_xlat16_1);
    u_xlat1.x = dot(u_xlat16_5.xyz, u_xlat4.xyz);
    u_xlat1.x = max(u_xlat1.x, 9.99999975e-05);
    u_xlat1.x = log2(u_xlat1.x);
    u_xlat25 = _Gloss * 128.0;
    u_xlat1.x = u_xlat1.x * u_xlat25;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _SpecularIntensity;
    u_xlat1.x = max(u_xlat1.x, 0.0);
    u_xlat1.x = min(u_xlat1.x, 16.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb25 = !!(_ES_MoonDirection.y>=9.99999975e-05);
#else
    u_xlatb25 = _ES_MoonDirection.y>=9.99999975e-05;
#endif
    u_xlat25 = u_xlatb25 ? 1.0 : float(0.0);
    u_xlat38 = _ES_MoonDirection.y + -1.0;
    u_xlat25 = u_xlat25 * u_xlat38 + 1.0;
    u_xlat4.xyz = vec3(u_xlat25) * _LightColor0.xyz;
    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
    u_xlat1.x = u_xlat37 + -1.0;
    u_xlat1.x = u_xlat13 * u_xlat1.x;
    u_xlat1.x = u_xlat1.x * 0.100000001;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat1.xxx * u_xlat4.xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat40) + u_xlat2.xyz;
    u_xlat2.xyz = vs_TEXCOORD5.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat38 = u_xlat2.y * _HeigtFogParams.x;
    u_xlat4.x = u_xlat38 * -1.44269502;
    u_xlat4.x = exp2(u_xlat4.x);
    u_xlat4.x = (-u_xlat4.x) + 1.0;
    u_xlat4.x = u_xlat4.x / u_xlat38;
#ifdef UNITY_ADRENO_ES3
    u_xlatb38 = !!(0.00999999978<abs(u_xlat38));
#else
    u_xlatb38 = 0.00999999978<abs(u_xlat38);
#endif
    u_xlat16_0.x = (u_xlatb38) ? u_xlat4.x : 1.0;
    u_xlat38 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat38 = sqrt(u_xlat38);
    u_xlat4.x = u_xlat38 * _HeigtFogParams.y;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat4.x;
    u_xlat16_0.x = exp2((-u_xlat16_0.x));
    u_xlat16_0.x = (-u_xlat16_0.x) + 1.0;
    u_xlat4.x = u_xlat2.y * _HeigtFogParams2.x;
    u_xlat16.x = u_xlat4.x * -1.44269502;
    u_xlat16.x = exp2(u_xlat16.x);
    u_xlat16.x = (-u_xlat16.x) + 1.0;
    u_xlat16.x = u_xlat16.x / u_xlat4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(0.00999999978<abs(u_xlat4.x));
#else
    u_xlatb4 = 0.00999999978<abs(u_xlat4.x);
#endif
    u_xlat16_12 = (u_xlatb4) ? u_xlat16.x : 1.0;
    u_xlat4.x = u_xlat38 * _HeigtFogParams2.y;
    u_xlat16_12 = u_xlat16_12 * u_xlat4.x;
    u_xlat16_12 = exp2((-u_xlat16_12));
    u_xlat16_0.y = (-u_xlat16_12) + 1.0;
    u_xlat16_0.xy = max(u_xlat16_0.xy, vec2(0.0, 0.0));
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat4.x = u_xlat38 * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat16_12 = (-u_xlat4.x) + 2.0;
    u_xlat16_12 = u_xlat16_12 * u_xlat4.x;
    u_xlat4.x = u_xlat16_12 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat4.x = u_xlat4.x + 1.0;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat4.x;
    u_xlat4.x = min(u_xlat16_0.x, _HeigtFogColBase.w);
    u_xlat16.x = (-u_xlat4.x) + 1.0;
    u_xlat5.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat5.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat5.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat5.xyz);
    u_xlat14.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!((-u_xlat2.x)>=u_xlat14.x);
#else
    u_xlatb2 = (-u_xlat2.x)>=u_xlat14.x;
#endif
    u_xlat14.x = u_xlat38 * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat14.x = min(max(u_xlat14.x, 0.0), 1.0);
#else
    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
#endif
    u_xlat26 = u_xlat38 + (-_HeigtFogRamp.w);
    u_xlat26 = u_xlat26 * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat26 = min(max(u_xlat26, 0.0), 1.0);
#else
    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);
#endif
    u_xlat38 = (-u_xlat14.x) + 2.0;
    u_xlat14.x = u_xlat38 * u_xlat14.x;
    u_xlat38 = u_xlat14.x * _HeigtFogColDelta.w;
    u_xlat2.x = (u_xlatb2) ? u_xlat38 : u_xlat14.x;
    u_xlat2.x = log2(u_xlat2.x);
    u_xlat2.x = u_xlat2.x * unity_FogColor.w;
    u_xlat2.x = exp2(u_xlat2.x);
    u_xlat2.x = min(u_xlat2.x, _HeigtFogColBase.w);
    u_xlat14.x = vs_TEXCOORD5.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat14.x = min(max(u_xlat14.x, 0.0), 1.0);
#else
    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
#endif
    u_xlat16_0.x = (-u_xlat14.x) + 2.0;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat14.x;
    u_xlat5.xyz = u_xlat16_0.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat6.xyz = (-u_xlat5.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat14.xyz = vec3(u_xlat26) * u_xlat6.xyz + u_xlat5.xyz;
    u_xlat2.yzw = u_xlat2.xxx * u_xlat14.xyz;
    u_xlat2.x = (-u_xlat2.x) + 1.0;
    u_xlat2 = u_xlat16.xxxx * u_xlat2;
    u_xlat16.x = vs_TEXCOORD5.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat16.x = min(max(u_xlat16.x, 0.0), 1.0);
#else
    u_xlat16.x = clamp(u_xlat16.x, 0.0, 1.0);
#endif
    u_xlat16.xyz = u_xlat16.xxx * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    u_xlat14.xyz = u_xlat16.xyz * u_xlat4.xxx + u_xlat2.yzw;
    u_xlat0.xyz = u_xlat2.xxx * u_xlat1.xyz + u_xlat14.xyz;
    u_xlat1.x = 0.100000001 / _OpacityByDepth;
    u_xlat1.x = u_xlat1.x * u_xlat37;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat0.w = u_xlat1.x * vs_COLOR0.w;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "MHY_SHADER_MIDDLE" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	mediump float _MHYZBias;
uniform 	vec4 hlslcc_mtx4x4_mhyJitteredVP[4];
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
out highp vec4 vs_TEXCOORD9;
out highp vec4 vs_TEXCOORD10;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
vec4 u_xlat4;
bool u_xlatb4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
mediump vec4 u_xlat16_6;
vec4 u_xlat7;
mediump vec3 u_xlat16_8;
float u_xlat11;
vec3 u_xlat13;
mediump float u_xlat16_14;
float u_xlat27;
bool u_xlatb27;
float u_xlat29;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4_mhyJitteredVP[1];
    u_xlat2 = hlslcc_mtx4x4_mhyJitteredVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4_mhyJitteredVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4_mhyJitteredVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat3.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    u_xlat3.xyw = u_xlat2.xyw;
    gl_Position = u_xlat3;
    vs_COLOR0 = in_COLOR0;
    u_xlat2.xyw = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat27 = u_xlat2.y * _HeigtFogParams.x;
    u_xlat4.x = u_xlat27 * -1.44269502;
    u_xlat4.x = exp2(u_xlat4.x);
    u_xlat4.x = (-u_xlat4.x) + 1.0;
    u_xlat4.x = u_xlat4.x / u_xlat27;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(0.00999999978<abs(u_xlat27));
#else
    u_xlatb27 = 0.00999999978<abs(u_xlat27);
#endif
    u_xlat16_5.x = (u_xlatb27) ? u_xlat4.x : 1.0;
    u_xlat27 = dot(u_xlat2.xyw, u_xlat2.xyw);
    u_xlat27 = sqrt(u_xlat27);
    u_xlat4.x = u_xlat27 * _HeigtFogParams.y;
    u_xlat16_5.x = u_xlat4.x * u_xlat16_5.x;
    u_xlat16_5.x = exp2((-u_xlat16_5.x));
    u_xlat16_5.x = (-u_xlat16_5.x) + 1.0;
    u_xlat4.x = u_xlat2.y * _HeigtFogParams2.x;
    u_xlat13.x = u_xlat4.x * -1.44269502;
    u_xlat13.x = exp2(u_xlat13.x);
    u_xlat13.x = (-u_xlat13.x) + 1.0;
    u_xlat13.x = u_xlat13.x / u_xlat4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(0.00999999978<abs(u_xlat4.x));
#else
    u_xlatb4 = 0.00999999978<abs(u_xlat4.x);
#endif
    u_xlat16_14 = (u_xlatb4) ? u_xlat13.x : 1.0;
    u_xlat4.x = u_xlat27 * _HeigtFogParams2.y;
    u_xlat16_14 = u_xlat4.x * u_xlat16_14;
    u_xlat16_14 = exp2((-u_xlat16_14));
    u_xlat16_5.y = (-u_xlat16_14) + 1.0;
    u_xlat16_5.xy = max(u_xlat16_5.xy, vec2(0.0, 0.0));
    u_xlat16_5.x = u_xlat16_5.y + u_xlat16_5.x;
    u_xlat4.x = u_xlat27 * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat16_14 = (-u_xlat4.x) + 2.0;
    u_xlat16_14 = u_xlat4.x * u_xlat16_14;
    u_xlat4.x = u_xlat16_14 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat4.x = u_xlat4.x + 1.0;
    u_xlat16_5.x = u_xlat4.x * u_xlat16_5.x;
    u_xlat4.x = min(u_xlat16_5.x, _HeigtFogColBase.w);
    u_xlat13.x = (-u_xlat4.x) + 1.0;
    u_xlat6.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat6.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat6.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat2.x = dot(u_xlat2.xyw, u_xlat6.xyz);
    u_xlat11 = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!((-u_xlat2.x)>=u_xlat11);
#else
    u_xlatb2 = (-u_xlat2.x)>=u_xlat11;
#endif
    u_xlat11 = u_xlat27 * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat11 = min(max(u_xlat11, 0.0), 1.0);
#else
    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
#endif
    u_xlat27 = u_xlat27 + (-_HeigtFogRamp.w);
    u_xlat27 = u_xlat27 * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
    u_xlat29 = (-u_xlat11) + 2.0;
    u_xlat11 = u_xlat29 * u_xlat11;
    u_xlat29 = u_xlat11 * _HeigtFogColDelta.w;
    u_xlat2.x = (u_xlatb2) ? u_xlat29 : u_xlat11;
    u_xlat2.x = log2(u_xlat2.x);
    u_xlat2.x = u_xlat2.x * unity_FogColor.w;
    u_xlat2.x = exp2(u_xlat2.x);
    u_xlat2.x = min(u_xlat2.x, _HeigtFogColBase.w);
    u_xlat11 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat11 = min(max(u_xlat11, 0.0), 1.0);
#else
    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
#endif
    u_xlat16_5.x = (-u_xlat11) + 2.0;
    u_xlat16_5.x = u_xlat11 * u_xlat16_5.x;
    u_xlat6.xyz = u_xlat16_5.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat7.xyz = (-u_xlat6.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat6.xyz = vec3(u_xlat27) * u_xlat7.xyz + u_xlat6.xyz;
    u_xlat6.xyz = u_xlat2.xxx * u_xlat6.xyz;
    u_xlat27 = (-u_xlat2.x) + 1.0;
    vs_TEXCOORD0.w = u_xlat13.x * u_xlat27;
    u_xlat2.xyw = u_xlat13.xxx * u_xlat6.xyz;
    u_xlat27 = u_xlat0.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
    u_xlat13.xyz = vec3(u_xlat27) * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    vs_TEXCOORD0.xyz = u_xlat13.xyz * u_xlat4.xxx + u_xlat2.xyw;
    u_xlat4.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat4.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat4.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat27 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat4.xyz = vec3(u_xlat27) * u_xlat4.xyz;
    u_xlat16_5.x = u_xlat4.y * u_xlat4.y;
    u_xlat16_5.x = u_xlat4.x * u_xlat4.x + (-u_xlat16_5.x);
    u_xlat16_6 = u_xlat4.yzzx * u_xlat4.xyzz;
    u_xlat16_8.x = dot(unity_SHBr, u_xlat16_6);
    u_xlat16_8.y = dot(unity_SHBg, u_xlat16_6);
    u_xlat16_8.z = dot(unity_SHBb, u_xlat16_6);
    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_8.xyz;
    u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat4.w = 1.0;
    u_xlat16_8.x = dot(unity_SHAr, u_xlat4);
    u_xlat16_8.y = dot(unity_SHAg, u_xlat4);
    u_xlat16_8.z = dot(unity_SHAb, u_xlat4);
    u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_8.xyz;
    vs_TEXCOORD1.xyz = u_xlat16_5.xyz;
    vs_TEXCOORD1.w = 1.0;
    u_xlat27 = u_xlat3.y * _ProjectionParams.x;
    u_xlat7.w = u_xlat27 * 0.5;
    u_xlat7.xz = u_xlat3.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.z = u_xlat2.z;
    u_xlat3.xy = u_xlat7.zz + u_xlat7.xw;
    vs_TEXCOORD2 = u_xlat3;
    vs_TEXCOORD4.xyw = u_xlat3.xyw;
    u_xlat27 = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat27 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat27;
    u_xlat27 = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat27;
    u_xlat27 = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat27;
    vs_TEXCOORD3.z = (-u_xlat27);
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD3.w = 0.0;
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD5.w = 0.0;
    vs_TEXCOORD6.xyz = u_xlat4.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[1].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].www + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * in_POSITION0.yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.zzz + u_xlat1.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.www + u_xlat1.xyz;
    vs_TEXCOORD7.xyz = u_xlat1.xyz * vec3(-1.0, -1.0, 1.0);
    vs_TEXCOORD7.w = 0.0;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat27 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat1.xyz = vec3(u_xlat27) * u_xlat1.xyz;
    vs_TEXCOORD8.xyz = u_xlat1.xyz;
    vs_TEXCOORD8.w = 0.0;
    u_xlat2.xyz = u_xlat1.yzx * u_xlat4.zxy;
    u_xlat1.xyz = u_xlat4.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
    u_xlat27 = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD9.xyz = vec3(u_xlat27) * u_xlat1.xyz;
    vs_TEXCOORD9.w = 0.0;
    u_xlat27 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat27 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat27;
    vs_TEXCOORD10.w = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat27;
    vs_TEXCOORD10.xyz = u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	float _NormalMapScale;
uniform 	float _Normal01_U_Speed;
uniform 	float _Normal01_VSpeed;
uniform 	float _NormalMapBias;
uniform 	float _Normal02_U_Speed;
uniform 	float _Normal02_V_Speed;
uniform 	float _RefractionIntensity;
uniform 	float _OpacityByDepth;
uniform 	float _SpecularIntensity;
uniform 	vec3 _ES_MoonDirection;
uniform 	vec3 _ES_SunDirection;
uniform 	float _Gloss;
uniform 	float _ShoreTransparency;
uniform 	float _SpecularPower;
uniform 	vec4 _ShallowColor;
uniform 	float _ShoreFade;
uniform 	vec4 _DeepColor;
uniform 	float _DeepColorDepth;
uniform 	float _DeepColorFade;
uniform 	vec4 _DistortionIntensity;
uniform 	float _SSRDistortion;
uniform 	float _SSRDistortion_Shore;
uniform 	float _SSRIntensity;
uniform 	float _ReflectionIntensity;
uniform 	float _FresnelPower;
uniform 	float _ShoreReflectionFade;
uniform 	mediump float _ProjectUVScale;
uniform 	vec4 _ReflectionSkyCubeMap_HDR;
uniform lowp sampler2D _Normal01;
uniform lowp sampler2D _Normal02;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _SceneScaledBufferBeforTransParent;
uniform lowp samplerCube _ReflectionSkyCubeMap;
uniform lowp sampler2D _SSRTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD8;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec3 u_xlat1;
mediump float u_xlat16_1;
lowp vec3 u_xlat10_1;
bool u_xlatb1;
vec4 u_xlat2;
lowp vec4 u_xlat10_2;
bool u_xlatb2;
mediump vec3 u_xlat16_3;
lowp vec4 u_xlat10_3;
vec3 u_xlat4;
bool u_xlatb4;
vec3 u_xlat5;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
lowp vec3 u_xlat10_7;
mediump vec3 u_xlat16_8;
vec3 u_xlat9;
vec3 u_xlat10;
vec3 u_xlat11;
mediump float u_xlat16_12;
float u_xlat13;
vec3 u_xlat14;
vec3 u_xlat16;
float u_xlat25;
bool u_xlatb25;
float u_xlat26;
vec2 u_xlat30;
mediump float u_xlat16_36;
float u_xlat37;
float u_xlat38;
bool u_xlatb38;
float u_xlat40;
void main()
{
    u_xlat16_0.w = -1.0;
    u_xlat1.xy = vs_TEXCOORD5.zx * vec2(vec2(_ProjectUVScale, _ProjectUVScale));
    u_xlat2.w = _Time.y * _Normal02_V_Speed + u_xlat1.x;
    u_xlat2.yz = _Time.yy * vec2(_Normal01_VSpeed, _Normal02_U_Speed) + u_xlat1.xy;
    u_xlat2.x = _Time.y * _Normal01_U_Speed + u_xlat1.y;
    u_xlat10_1.xyz = texture(_Normal01, u_xlat2.xy, _NormalMapBias).xyz;
    u_xlat10_2.xyz = texture(_Normal02, u_xlat2.zw, _NormalMapBias).xyz;
    u_xlat16_0.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_3.xyz = u_xlat10_2.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.wwz;
    u_xlat16_0.xy = u_xlat16_0.xy * vec2(_NormalMapScale);
    u_xlat16_3.xy = u_xlat16_3.xy * vec2(_NormalMapScale);
    u_xlat16_0.z = -1.0;
    u_xlat16_0.xyz = u_xlat16_0.xzy + u_xlat16_3.xzy;
    u_xlat1.xyz = u_xlat16_0.xzy * _DistortionIntensity.xyz;
    u_xlat2.x = vs_TEXCOORD8.x;
    u_xlat2.y = vs_TEXCOORD9.x;
    u_xlat2.z = vs_TEXCOORD6.x;
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat4.x = vs_TEXCOORD8.y;
    u_xlat4.y = vs_TEXCOORD9.y;
    u_xlat4.z = vs_TEXCOORD6.y;
    u_xlat2.y = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat4.x = vs_TEXCOORD8.z;
    u_xlat4.y = vs_TEXCOORD9.z;
    u_xlat4.z = vs_TEXCOORD6.z;
    u_xlat2.z = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat1.xy = u_xlat1.xy * vec2(_SSRDistortion);
    u_xlat25 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat25 = inversesqrt(u_xlat25);
    u_xlat2.xyz = vec3(u_xlat25) * u_xlat2.xyz;
    u_xlat4.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat25 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat25 = inversesqrt(u_xlat25);
    u_xlat5.xyz = vec3(u_xlat25) * u_xlat4.xyz;
    u_xlat37 = dot((-u_xlat5.xyz), u_xlat2.xyz);
    u_xlat37 = u_xlat37 + u_xlat37;
    u_xlat2.xyz = u_xlat2.xyz * (-vec3(u_xlat37)) + (-u_xlat5.xyz);
    u_xlat10_2 = textureLod(_ReflectionSkyCubeMap, u_xlat2.xyz, 0.0);
    u_xlat16_36 = u_xlat10_2.w + -1.0;
    u_xlat16_36 = _ReflectionSkyCubeMap_HDR.w * u_xlat16_36 + 1.0;
    u_xlat16_36 = log2(u_xlat16_36);
    u_xlat16_36 = u_xlat16_36 * _ReflectionSkyCubeMap_HDR.y;
    u_xlat16_36 = exp2(u_xlat16_36);
    u_xlat16_36 = u_xlat16_36 * _ReflectionSkyCubeMap_HDR.x;
    u_xlat6.xy = u_xlat16_0.xz * vec2(vec2(_RefractionIntensity, _RefractionIntensity));
    u_xlat37 = float(1.0) / vs_TEXCOORD4.w;
    u_xlat37 = u_xlat37 * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat37 = min(max(u_xlat37, 0.0), 1.0);
#else
    u_xlat37 = clamp(u_xlat37, 0.0, 1.0);
#endif
    u_xlat6.xy = vec2(u_xlat37) * u_xlat6.xy;
    u_xlat6.xy = u_xlat6.xy * vs_TEXCOORD4.ww;
    u_xlat30.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat37 = texture(_CameraDepthTexture, u_xlat30.xy).x;
    u_xlat37 = _ZBufferParams.z * u_xlat37 + _ZBufferParams.w;
    u_xlat37 = float(1.0) / u_xlat37;
    u_xlat37 = u_xlat37 + (-vs_TEXCOORD4.w);
#ifdef UNITY_ADRENO_ES3
    u_xlat37 = min(max(u_xlat37, 0.0), 1.0);
#else
    u_xlat37 = clamp(u_xlat37, 0.0, 1.0);
#endif
    u_xlat6.xy = vec2(u_xlat37) * u_xlat6.xy;
    u_xlat6.z = 0.0;
    u_xlat7.xyz = u_xlat6.xyz + vs_TEXCOORD4.xyw;
    u_xlat7.xy = u_xlat7.xy / u_xlat7.zz;
    u_xlat37 = texture(_CameraDepthTexture, u_xlat7.xy).x;
    u_xlat37 = _ZBufferParams.z * u_xlat37 + _ZBufferParams.w;
    u_xlat37 = float(1.0) / u_xlat37;
    u_xlat37 = u_xlat37 + (-vs_TEXCOORD4.w);
#ifdef UNITY_ADRENO_ES3
    u_xlat37 = min(max(u_xlat37, 0.0), 1.0);
#else
    u_xlat37 = clamp(u_xlat37, 0.0, 1.0);
#endif
    u_xlat6.xyz = vec3(u_xlat37) * u_xlat6.xyz + vs_TEXCOORD4.xyw;
    u_xlat30.xy = u_xlat6.xy / u_xlat6.zz;
    u_xlat6.xy = u_xlat6.xy / vs_TEXCOORD4.ww;
    u_xlat10_7.xyz = texture(_SceneScaledBufferBeforTransParent, u_xlat6.xy).xyz;
    u_xlat37 = texture(_CameraDepthTexture, u_xlat30.xy).x;
    u_xlat37 = _ZBufferParams.z * u_xlat37 + _ZBufferParams.w;
    u_xlat37 = float(1.0) / u_xlat37;
    u_xlat37 = u_xlat37 + (-vs_TEXCOORD4.w);
    u_xlat38 = float(1.0) / _SSRDistortion_Shore;
    u_xlat38 = u_xlat37 * u_xlat38;
#ifdef UNITY_ADRENO_ES3
    u_xlat38 = min(max(u_xlat38, 0.0), 1.0);
#else
    u_xlat38 = clamp(u_xlat38, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat1.xy * vec2(u_xlat38);
    u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD4.ww + vs_TEXCOORD4.xy;
    u_xlat1.xy = u_xlat1.xy / vs_TEXCOORD4.ww;
    u_xlat10_3 = texture(_SSRTexture, u_xlat1.xy).wxyz;
    u_xlat16_6.xyz = (-vec3(u_xlat16_36)) * u_xlat10_2.xyz + u_xlat10_3.yzw;
    u_xlat16_8.xyz = u_xlat10_2.xyz * vec3(u_xlat16_36);
    u_xlat16_3.x = u_xlat10_3.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat2.xyz = u_xlat16_6.xyz * vec3(vec3(_SSRIntensity, _SSRIntensity, _SSRIntensity));
    u_xlat2.xyz = u_xlat16_3.xxx * u_xlat2.xyz + u_xlat16_8.xyz;
    u_xlat1.x = 0.100000001 / _DeepColorDepth;
    u_xlat1.x = u_xlat1.x * u_xlat37;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.x = max(u_xlat1.x, 9.99999975e-05);
    u_xlat1.x = log2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _DeepColorFade;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat13 = float(1.0) / _ShoreTransparency;
    u_xlat38 = u_xlat13 * u_xlat37;
#ifdef UNITY_ADRENO_ES3
    u_xlat38 = min(max(u_xlat38, 0.0), 1.0);
#else
    u_xlat38 = clamp(u_xlat38, 0.0, 1.0);
#endif
    u_xlat38 = max(u_xlat38, 9.99999975e-05);
    u_xlat38 = log2(u_xlat38);
    u_xlat38 = u_xlat38 * _ShoreFade;
    u_xlat38 = exp2(u_xlat38);
    u_xlat6.xyz = _ShallowColor.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat6.xyz = vec3(u_xlat38) * u_xlat6.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat9.xyz = (-u_xlat6.xyz) * u_xlat10_7.xyz + _DeepColor.xyz;
    u_xlat10.xyz = u_xlat10_7.xyz * u_xlat6.xyz;
    u_xlat9.xyz = u_xlat1.xxx * u_xlat9.xyz + u_xlat10.xyz;
    u_xlat2.xyz = u_xlat2.xyz + (-u_xlat9.xyz);
    u_xlat1.x = float(1.0) / _ShoreReflectionFade;
    u_xlat1.x = u_xlat1.x * u_xlat37;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat40 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat40 = inversesqrt(u_xlat40);
    u_xlat11.xyz = vec3(u_xlat40) * vs_TEXCOORD6.xyz;
    u_xlat40 = dot(u_xlat5.xyz, u_xlat11.xyz);
    u_xlat40 = (-u_xlat40) + 1.0;
    u_xlat40 = max(u_xlat40, 9.99999975e-05);
    u_xlat40 = log2(u_xlat40);
    u_xlat5.x = u_xlat40 * _FresnelPower;
    u_xlat40 = u_xlat40 * _SpecularPower;
    u_xlat40 = exp2(u_xlat40);
    u_xlat5.x = exp2(u_xlat5.x);
    u_xlat5.x = u_xlat5.x * _ReflectionIntensity;
    u_xlat1.x = u_xlat1.x * u_xlat5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat2.xyz = u_xlat1.xxx * u_xlat2.xyz + u_xlat9.xyz;
    u_xlat2.xyz = (-u_xlat6.xyz) * u_xlat10_7.xyz + u_xlat2.xyz;
    u_xlat2.xyz = vec3(u_xlat38) * u_xlat2.xyz + u_xlat10.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(0.0>=_ES_MoonDirection.y);
#else
    u_xlatb1 = 0.0>=_ES_MoonDirection.y;
#endif
    u_xlat5.xyz = (bool(u_xlatb1)) ? _ES_SunDirection.xyz : _ES_MoonDirection.xyz;
    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat25) + u_xlat5.xyz;
    u_xlat1.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
    u_xlat16_0.y = 1.0;
    u_xlat16_1 = dot(u_xlat16_0.xyz, u_xlat16_0.xyz);
    u_xlat16_1 = inversesqrt(u_xlat16_1);
    u_xlat16_5.xyz = u_xlat16_0.xyz * vec3(u_xlat16_1);
    u_xlat1.x = dot(u_xlat16_5.xyz, u_xlat4.xyz);
    u_xlat1.x = max(u_xlat1.x, 9.99999975e-05);
    u_xlat1.x = log2(u_xlat1.x);
    u_xlat25 = _Gloss * 128.0;
    u_xlat1.x = u_xlat1.x * u_xlat25;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _SpecularIntensity;
    u_xlat1.x = max(u_xlat1.x, 0.0);
    u_xlat1.x = min(u_xlat1.x, 16.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb25 = !!(_ES_MoonDirection.y>=9.99999975e-05);
#else
    u_xlatb25 = _ES_MoonDirection.y>=9.99999975e-05;
#endif
    u_xlat25 = u_xlatb25 ? 1.0 : float(0.0);
    u_xlat38 = _ES_MoonDirection.y + -1.0;
    u_xlat25 = u_xlat25 * u_xlat38 + 1.0;
    u_xlat4.xyz = vec3(u_xlat25) * _LightColor0.xyz;
    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
    u_xlat1.x = u_xlat37 + -1.0;
    u_xlat1.x = u_xlat13 * u_xlat1.x;
    u_xlat1.x = u_xlat1.x * 0.100000001;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat1.xxx * u_xlat4.xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat40) + u_xlat2.xyz;
    u_xlat2.xyz = vs_TEXCOORD5.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat38 = u_xlat2.y * _HeigtFogParams.x;
    u_xlat4.x = u_xlat38 * -1.44269502;
    u_xlat4.x = exp2(u_xlat4.x);
    u_xlat4.x = (-u_xlat4.x) + 1.0;
    u_xlat4.x = u_xlat4.x / u_xlat38;
#ifdef UNITY_ADRENO_ES3
    u_xlatb38 = !!(0.00999999978<abs(u_xlat38));
#else
    u_xlatb38 = 0.00999999978<abs(u_xlat38);
#endif
    u_xlat16_0.x = (u_xlatb38) ? u_xlat4.x : 1.0;
    u_xlat38 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat38 = sqrt(u_xlat38);
    u_xlat4.x = u_xlat38 * _HeigtFogParams.y;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat4.x;
    u_xlat16_0.x = exp2((-u_xlat16_0.x));
    u_xlat16_0.x = (-u_xlat16_0.x) + 1.0;
    u_xlat4.x = u_xlat2.y * _HeigtFogParams2.x;
    u_xlat16.x = u_xlat4.x * -1.44269502;
    u_xlat16.x = exp2(u_xlat16.x);
    u_xlat16.x = (-u_xlat16.x) + 1.0;
    u_xlat16.x = u_xlat16.x / u_xlat4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(0.00999999978<abs(u_xlat4.x));
#else
    u_xlatb4 = 0.00999999978<abs(u_xlat4.x);
#endif
    u_xlat16_12 = (u_xlatb4) ? u_xlat16.x : 1.0;
    u_xlat4.x = u_xlat38 * _HeigtFogParams2.y;
    u_xlat16_12 = u_xlat16_12 * u_xlat4.x;
    u_xlat16_12 = exp2((-u_xlat16_12));
    u_xlat16_0.y = (-u_xlat16_12) + 1.0;
    u_xlat16_0.xy = max(u_xlat16_0.xy, vec2(0.0, 0.0));
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat4.x = u_xlat38 * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat16_12 = (-u_xlat4.x) + 2.0;
    u_xlat16_12 = u_xlat16_12 * u_xlat4.x;
    u_xlat4.x = u_xlat16_12 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat4.x = u_xlat4.x + 1.0;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat4.x;
    u_xlat4.x = min(u_xlat16_0.x, _HeigtFogColBase.w);
    u_xlat16.x = (-u_xlat4.x) + 1.0;
    u_xlat5.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat5.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat5.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat5.xyz);
    u_xlat14.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!((-u_xlat2.x)>=u_xlat14.x);
#else
    u_xlatb2 = (-u_xlat2.x)>=u_xlat14.x;
#endif
    u_xlat14.x = u_xlat38 * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat14.x = min(max(u_xlat14.x, 0.0), 1.0);
#else
    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
#endif
    u_xlat26 = u_xlat38 + (-_HeigtFogRamp.w);
    u_xlat26 = u_xlat26 * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat26 = min(max(u_xlat26, 0.0), 1.0);
#else
    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);
#endif
    u_xlat38 = (-u_xlat14.x) + 2.0;
    u_xlat14.x = u_xlat38 * u_xlat14.x;
    u_xlat38 = u_xlat14.x * _HeigtFogColDelta.w;
    u_xlat2.x = (u_xlatb2) ? u_xlat38 : u_xlat14.x;
    u_xlat2.x = log2(u_xlat2.x);
    u_xlat2.x = u_xlat2.x * unity_FogColor.w;
    u_xlat2.x = exp2(u_xlat2.x);
    u_xlat2.x = min(u_xlat2.x, _HeigtFogColBase.w);
    u_xlat14.x = vs_TEXCOORD5.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat14.x = min(max(u_xlat14.x, 0.0), 1.0);
#else
    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
#endif
    u_xlat16_0.x = (-u_xlat14.x) + 2.0;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat14.x;
    u_xlat5.xyz = u_xlat16_0.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat6.xyz = (-u_xlat5.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat14.xyz = vec3(u_xlat26) * u_xlat6.xyz + u_xlat5.xyz;
    u_xlat2.yzw = u_xlat2.xxx * u_xlat14.xyz;
    u_xlat2.x = (-u_xlat2.x) + 1.0;
    u_xlat2 = u_xlat16.xxxx * u_xlat2;
    u_xlat16.x = vs_TEXCOORD5.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat16.x = min(max(u_xlat16.x, 0.0), 1.0);
#else
    u_xlat16.x = clamp(u_xlat16.x, 0.0, 1.0);
#endif
    u_xlat16.xyz = u_xlat16.xxx * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    u_xlat14.xyz = u_xlat16.xyz * u_xlat4.xxx + u_xlat2.yzw;
    u_xlat0.xyz = u_xlat2.xxx * u_xlat1.xyz + u_xlat14.xyz;
    u_xlat1.x = 0.100000001 / _OpacityByDepth;
    u_xlat1.x = u_xlat1.x * u_xlat37;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat0.w = u_xlat1.x * vs_COLOR0.w;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" "MHY_SHADER_MIDDLE" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	mediump float _MHYZBias;
uniform 	vec4 hlslcc_mtx4x4_mhyJitteredVP[4];
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
out highp vec4 vs_TEXCOORD9;
out highp vec4 vs_TEXCOORD10;
float u_xlat0;
int u_xlati0;
vec4 u_xlat1;
bool u_xlatb1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
bool u_xlatb4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
mediump vec4 u_xlat16_6;
vec4 u_xlat7;
mediump vec3 u_xlat16_8;
vec3 u_xlat9;
float u_xlat10;
float u_xlat13;
bool u_xlatb13;
mediump float u_xlat16_14;
float u_xlat22;
float u_xlat28;
float u_xlat31;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat9.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4_mhyJitteredVP[1];
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[3] * u_xlat2.wwww + u_xlat1;
    u_xlat3.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    u_xlat3.xyw = u_xlat1.xyw;
    gl_Position = u_xlat3;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.xyw = u_xlat9.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat4.x = u_xlat1.y * _HeigtFogParams.x;
    u_xlat13 = u_xlat4.x * -1.44269502;
    u_xlat13 = exp2(u_xlat13);
    u_xlat13 = (-u_xlat13) + 1.0;
    u_xlat13 = u_xlat13 / u_xlat4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(0.00999999978<abs(u_xlat4.x));
#else
    u_xlatb4 = 0.00999999978<abs(u_xlat4.x);
#endif
    u_xlat16_5.x = (u_xlatb4) ? u_xlat13 : 1.0;
    u_xlat4.x = dot(u_xlat1.xyw, u_xlat1.xyw);
    u_xlat4.x = sqrt(u_xlat4.x);
    u_xlat13 = u_xlat4.x * _HeigtFogParams.y;
    u_xlat16_5.x = u_xlat13 * u_xlat16_5.x;
    u_xlat16_5.x = exp2((-u_xlat16_5.x));
    u_xlat16_5.x = (-u_xlat16_5.x) + 1.0;
    u_xlat13 = u_xlat1.y * _HeigtFogParams2.x;
    u_xlat22 = u_xlat13 * -1.44269502;
    u_xlat22 = exp2(u_xlat22);
    u_xlat22 = (-u_xlat22) + 1.0;
    u_xlat22 = u_xlat22 / u_xlat13;
#ifdef UNITY_ADRENO_ES3
    u_xlatb13 = !!(0.00999999978<abs(u_xlat13));
#else
    u_xlatb13 = 0.00999999978<abs(u_xlat13);
#endif
    u_xlat16_14 = (u_xlatb13) ? u_xlat22 : 1.0;
    u_xlat13 = u_xlat4.x * _HeigtFogParams2.y;
    u_xlat16_14 = u_xlat13 * u_xlat16_14;
    u_xlat16_14 = exp2((-u_xlat16_14));
    u_xlat16_5.y = (-u_xlat16_14) + 1.0;
    u_xlat16_5.xy = max(u_xlat16_5.xy, vec2(0.0, 0.0));
    u_xlat16_5.x = u_xlat16_5.y + u_xlat16_5.x;
    u_xlat13 = u_xlat4.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat13 = min(max(u_xlat13, 0.0), 1.0);
#else
    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
#endif
    u_xlat16_14 = (-u_xlat13) + 2.0;
    u_xlat16_14 = u_xlat13 * u_xlat16_14;
    u_xlat13 = u_xlat16_14 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat13 = u_xlat13 + 1.0;
    u_xlat16_5.x = u_xlat13 * u_xlat16_5.x;
    u_xlat13 = min(u_xlat16_5.x, _HeigtFogColBase.w);
    u_xlat22 = (-u_xlat13) + 1.0;
    u_xlat31 = _ProjectionParams.z * 0.999899983;
    u_xlat6.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat6.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat6.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat1.x = dot(u_xlat1.xyw, u_xlat6.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!((-u_xlat1.x)>=u_xlat31);
#else
    u_xlatb1 = (-u_xlat1.x)>=u_xlat31;
#endif
    u_xlat10 = u_xlat4.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat10 = min(max(u_xlat10, 0.0), 1.0);
#else
    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
#endif
    u_xlat28 = u_xlat4.x + (-_HeigtFogRamp.w);
    u_xlat28 = u_xlat28 * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat28 = min(max(u_xlat28, 0.0), 1.0);
#else
    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
#endif
    u_xlat4.x = (-u_xlat10) + 2.0;
    u_xlat10 = u_xlat10 * u_xlat4.x;
    u_xlat4.x = u_xlat10 * _HeigtFogColDelta.w;
    u_xlat1.x = (u_xlatb1) ? u_xlat4.x : u_xlat10;
    u_xlat1.x = log2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * unity_FogColor.w;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat1.x = min(u_xlat1.x, _HeigtFogColBase.w);
    u_xlat10 = u_xlat9.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat10 = min(max(u_xlat10, 0.0), 1.0);
#else
    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
#endif
    u_xlat16_5.x = (-u_xlat10) + 2.0;
    u_xlat16_5.x = u_xlat10 * u_xlat16_5.x;
    u_xlat6.xyz = u_xlat16_5.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat7.xyz = (-u_xlat6.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat6.xyz = vec3(u_xlat28) * u_xlat7.xyz + u_xlat6.xyz;
    u_xlat6.xyz = u_xlat1.xxx * u_xlat6.xyz;
    u_xlat1.x = (-u_xlat1.x) + 1.0;
    vs_TEXCOORD0.w = u_xlat22 * u_xlat1.x;
    u_xlat1.xyw = vec3(u_xlat22) * u_xlat6.xyz;
    u_xlat4.x = u_xlat9.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat4.xzw = u_xlat4.xxx * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    vs_TEXCOORD0.xyz = u_xlat4.xzw * vec3(u_xlat13) + u_xlat1.xyw;
    vs_TEXCOORD1.w = 1.0;
    u_xlat4.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat4.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat4.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat1.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
    u_xlat16_5.x = u_xlat4.y * u_xlat4.y;
    u_xlat16_5.x = u_xlat4.x * u_xlat4.x + (-u_xlat16_5.x);
    u_xlat16_6 = u_xlat4.yzzx * u_xlat4.xyzz;
    u_xlat16_8.x = dot(unity_SHBr, u_xlat16_6);
    u_xlat16_8.y = dot(unity_SHBg, u_xlat16_6);
    u_xlat16_8.z = dot(unity_SHBb, u_xlat16_6);
    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_8.xyz;
    u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat4.w = 1.0;
    u_xlat16_8.x = dot(unity_SHAr, u_xlat4);
    u_xlat16_8.y = dot(unity_SHAg, u_xlat4);
    u_xlat16_8.z = dot(unity_SHAb, u_xlat4);
    u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_8.xyz;
    vs_TEXCOORD1.xyz = u_xlat16_5.xyz;
    u_xlat1.x = u_xlat3.y * _ProjectionParams.x;
    u_xlat7.w = u_xlat1.x * 0.5;
    u_xlat7.xz = u_xlat3.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.z = u_xlat1.z;
    u_xlat3.xy = u_xlat7.zz + u_xlat7.xw;
    vs_TEXCOORD2 = u_xlat3;
    vs_TEXCOORD4.xyw = u_xlat3.xyw;
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD3.w = 0.0;
    u_xlat1.x = u_xlat2.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat2.x + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat2.z + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat2.w + u_xlat1.x;
    vs_TEXCOORD3.z = (-u_xlat1.x);
    vs_TEXCOORD5.w = 0.0;
    vs_TEXCOORD5.xyz = u_xlat9.xyz;
    u_xlat9.xyz = (-u_xlat9.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD6.w = 0.0;
    vs_TEXCOORD6.xyz = u_xlat4.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].www + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * in_POSITION0.yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.zzz + u_xlat1.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.www + u_xlat1.xyz;
    vs_TEXCOORD7.xyz = u_xlat1.xyz * vec3(-1.0, -1.0, 1.0);
    vs_TEXCOORD7.w = 0.0;
    u_xlat1.xyz = in_TANGENT0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat0 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0 = inversesqrt(u_xlat0);
    u_xlat1.xyz = vec3(u_xlat0) * u_xlat1.xyz;
    vs_TEXCOORD8.xyz = u_xlat1.xyz;
    vs_TEXCOORD8.w = 0.0;
    u_xlat2.xyz = u_xlat1.yzx * u_xlat4.zxy;
    u_xlat1.xyz = u_xlat4.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
    u_xlat0 = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD9.xyz = vec3(u_xlat0) * u_xlat1.xyz;
    vs_TEXCOORD9.w = 0.0;
    u_xlat0 = u_xlat9.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat9.x + u_xlat0;
    vs_TEXCOORD10.w = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat9.z + u_xlat0;
    vs_TEXCOORD10.xyz = u_xlat9.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	float _NormalMapScale;
uniform 	float _Normal01_U_Speed;
uniform 	float _Normal01_VSpeed;
uniform 	float _NormalMapBias;
uniform 	float _Normal02_U_Speed;
uniform 	float _Normal02_V_Speed;
uniform 	float _RefractionIntensity;
uniform 	float _OpacityByDepth;
uniform 	float _SpecularIntensity;
uniform 	vec3 _ES_MoonDirection;
uniform 	vec3 _ES_SunDirection;
uniform 	float _Gloss;
uniform 	float _ShoreTransparency;
uniform 	float _SpecularPower;
uniform 	vec4 _ShallowColor;
uniform 	float _ShoreFade;
uniform 	vec4 _DeepColor;
uniform 	float _DeepColorDepth;
uniform 	float _DeepColorFade;
uniform 	vec4 _DistortionIntensity;
uniform 	float _SSRDistortion;
uniform 	float _SSRDistortion_Shore;
uniform 	float _SSRIntensity;
uniform 	float _ReflectionIntensity;
uniform 	float _FresnelPower;
uniform 	float _ShoreReflectionFade;
uniform 	mediump float _ProjectUVScale;
uniform 	vec4 _ReflectionSkyCubeMap_HDR;
uniform lowp sampler2D _Normal01;
uniform lowp sampler2D _Normal02;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _SceneScaledBufferBeforTransParent;
uniform lowp samplerCube _ReflectionSkyCubeMap;
uniform lowp sampler2D _SSRTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD8;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec3 u_xlat1;
mediump float u_xlat16_1;
lowp vec3 u_xlat10_1;
bool u_xlatb1;
vec4 u_xlat2;
lowp vec4 u_xlat10_2;
bool u_xlatb2;
mediump vec3 u_xlat16_3;
lowp vec4 u_xlat10_3;
vec3 u_xlat4;
bool u_xlatb4;
vec3 u_xlat5;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
lowp vec3 u_xlat10_7;
mediump vec3 u_xlat16_8;
vec3 u_xlat9;
vec3 u_xlat10;
vec3 u_xlat11;
mediump float u_xlat16_12;
float u_xlat13;
vec3 u_xlat14;
vec3 u_xlat16;
float u_xlat25;
bool u_xlatb25;
float u_xlat26;
vec2 u_xlat30;
mediump float u_xlat16_36;
float u_xlat37;
float u_xlat38;
bool u_xlatb38;
float u_xlat40;
void main()
{
    u_xlat16_0.w = -1.0;
    u_xlat1.xy = vs_TEXCOORD5.zx * vec2(vec2(_ProjectUVScale, _ProjectUVScale));
    u_xlat2.w = _Time.y * _Normal02_V_Speed + u_xlat1.x;
    u_xlat2.yz = _Time.yy * vec2(_Normal01_VSpeed, _Normal02_U_Speed) + u_xlat1.xy;
    u_xlat2.x = _Time.y * _Normal01_U_Speed + u_xlat1.y;
    u_xlat10_1.xyz = texture(_Normal01, u_xlat2.xy, _NormalMapBias).xyz;
    u_xlat10_2.xyz = texture(_Normal02, u_xlat2.zw, _NormalMapBias).xyz;
    u_xlat16_0.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_3.xyz = u_xlat10_2.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.wwz;
    u_xlat16_0.xy = u_xlat16_0.xy * vec2(_NormalMapScale);
    u_xlat16_3.xy = u_xlat16_3.xy * vec2(_NormalMapScale);
    u_xlat16_0.z = -1.0;
    u_xlat16_0.xyz = u_xlat16_0.xzy + u_xlat16_3.xzy;
    u_xlat1.xyz = u_xlat16_0.xzy * _DistortionIntensity.xyz;
    u_xlat2.x = vs_TEXCOORD8.x;
    u_xlat2.y = vs_TEXCOORD9.x;
    u_xlat2.z = vs_TEXCOORD6.x;
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat4.x = vs_TEXCOORD8.y;
    u_xlat4.y = vs_TEXCOORD9.y;
    u_xlat4.z = vs_TEXCOORD6.y;
    u_xlat2.y = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat4.x = vs_TEXCOORD8.z;
    u_xlat4.y = vs_TEXCOORD9.z;
    u_xlat4.z = vs_TEXCOORD6.z;
    u_xlat2.z = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat1.xy = u_xlat1.xy * vec2(_SSRDistortion);
    u_xlat25 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat25 = inversesqrt(u_xlat25);
    u_xlat2.xyz = vec3(u_xlat25) * u_xlat2.xyz;
    u_xlat4.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat25 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat25 = inversesqrt(u_xlat25);
    u_xlat5.xyz = vec3(u_xlat25) * u_xlat4.xyz;
    u_xlat37 = dot((-u_xlat5.xyz), u_xlat2.xyz);
    u_xlat37 = u_xlat37 + u_xlat37;
    u_xlat2.xyz = u_xlat2.xyz * (-vec3(u_xlat37)) + (-u_xlat5.xyz);
    u_xlat10_2 = textureLod(_ReflectionSkyCubeMap, u_xlat2.xyz, 0.0);
    u_xlat16_36 = u_xlat10_2.w + -1.0;
    u_xlat16_36 = _ReflectionSkyCubeMap_HDR.w * u_xlat16_36 + 1.0;
    u_xlat16_36 = log2(u_xlat16_36);
    u_xlat16_36 = u_xlat16_36 * _ReflectionSkyCubeMap_HDR.y;
    u_xlat16_36 = exp2(u_xlat16_36);
    u_xlat16_36 = u_xlat16_36 * _ReflectionSkyCubeMap_HDR.x;
    u_xlat6.xy = u_xlat16_0.xz * vec2(vec2(_RefractionIntensity, _RefractionIntensity));
    u_xlat37 = float(1.0) / vs_TEXCOORD4.w;
    u_xlat37 = u_xlat37 * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat37 = min(max(u_xlat37, 0.0), 1.0);
#else
    u_xlat37 = clamp(u_xlat37, 0.0, 1.0);
#endif
    u_xlat6.xy = vec2(u_xlat37) * u_xlat6.xy;
    u_xlat6.xy = u_xlat6.xy * vs_TEXCOORD4.ww;
    u_xlat30.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat37 = texture(_CameraDepthTexture, u_xlat30.xy).x;
    u_xlat37 = _ZBufferParams.z * u_xlat37 + _ZBufferParams.w;
    u_xlat37 = float(1.0) / u_xlat37;
    u_xlat37 = u_xlat37 + (-vs_TEXCOORD4.w);
#ifdef UNITY_ADRENO_ES3
    u_xlat37 = min(max(u_xlat37, 0.0), 1.0);
#else
    u_xlat37 = clamp(u_xlat37, 0.0, 1.0);
#endif
    u_xlat6.xy = vec2(u_xlat37) * u_xlat6.xy;
    u_xlat6.z = 0.0;
    u_xlat7.xyz = u_xlat6.xyz + vs_TEXCOORD4.xyw;
    u_xlat7.xy = u_xlat7.xy / u_xlat7.zz;
    u_xlat37 = texture(_CameraDepthTexture, u_xlat7.xy).x;
    u_xlat37 = _ZBufferParams.z * u_xlat37 + _ZBufferParams.w;
    u_xlat37 = float(1.0) / u_xlat37;
    u_xlat37 = u_xlat37 + (-vs_TEXCOORD4.w);
#ifdef UNITY_ADRENO_ES3
    u_xlat37 = min(max(u_xlat37, 0.0), 1.0);
#else
    u_xlat37 = clamp(u_xlat37, 0.0, 1.0);
#endif
    u_xlat6.xyz = vec3(u_xlat37) * u_xlat6.xyz + vs_TEXCOORD4.xyw;
    u_xlat30.xy = u_xlat6.xy / u_xlat6.zz;
    u_xlat6.xy = u_xlat6.xy / vs_TEXCOORD4.ww;
    u_xlat10_7.xyz = texture(_SceneScaledBufferBeforTransParent, u_xlat6.xy).xyz;
    u_xlat37 = texture(_CameraDepthTexture, u_xlat30.xy).x;
    u_xlat37 = _ZBufferParams.z * u_xlat37 + _ZBufferParams.w;
    u_xlat37 = float(1.0) / u_xlat37;
    u_xlat37 = u_xlat37 + (-vs_TEXCOORD4.w);
    u_xlat38 = float(1.0) / _SSRDistortion_Shore;
    u_xlat38 = u_xlat37 * u_xlat38;
#ifdef UNITY_ADRENO_ES3
    u_xlat38 = min(max(u_xlat38, 0.0), 1.0);
#else
    u_xlat38 = clamp(u_xlat38, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat1.xy * vec2(u_xlat38);
    u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD4.ww + vs_TEXCOORD4.xy;
    u_xlat1.xy = u_xlat1.xy / vs_TEXCOORD4.ww;
    u_xlat10_3 = texture(_SSRTexture, u_xlat1.xy).wxyz;
    u_xlat16_6.xyz = (-vec3(u_xlat16_36)) * u_xlat10_2.xyz + u_xlat10_3.yzw;
    u_xlat16_8.xyz = u_xlat10_2.xyz * vec3(u_xlat16_36);
    u_xlat16_3.x = u_xlat10_3.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat2.xyz = u_xlat16_6.xyz * vec3(vec3(_SSRIntensity, _SSRIntensity, _SSRIntensity));
    u_xlat2.xyz = u_xlat16_3.xxx * u_xlat2.xyz + u_xlat16_8.xyz;
    u_xlat1.x = 0.100000001 / _DeepColorDepth;
    u_xlat1.x = u_xlat1.x * u_xlat37;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.x = max(u_xlat1.x, 9.99999975e-05);
    u_xlat1.x = log2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _DeepColorFade;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat13 = float(1.0) / _ShoreTransparency;
    u_xlat38 = u_xlat13 * u_xlat37;
#ifdef UNITY_ADRENO_ES3
    u_xlat38 = min(max(u_xlat38, 0.0), 1.0);
#else
    u_xlat38 = clamp(u_xlat38, 0.0, 1.0);
#endif
    u_xlat38 = max(u_xlat38, 9.99999975e-05);
    u_xlat38 = log2(u_xlat38);
    u_xlat38 = u_xlat38 * _ShoreFade;
    u_xlat38 = exp2(u_xlat38);
    u_xlat6.xyz = _ShallowColor.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat6.xyz = vec3(u_xlat38) * u_xlat6.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat9.xyz = (-u_xlat6.xyz) * u_xlat10_7.xyz + _DeepColor.xyz;
    u_xlat10.xyz = u_xlat10_7.xyz * u_xlat6.xyz;
    u_xlat9.xyz = u_xlat1.xxx * u_xlat9.xyz + u_xlat10.xyz;
    u_xlat2.xyz = u_xlat2.xyz + (-u_xlat9.xyz);
    u_xlat1.x = float(1.0) / _ShoreReflectionFade;
    u_xlat1.x = u_xlat1.x * u_xlat37;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat40 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat40 = inversesqrt(u_xlat40);
    u_xlat11.xyz = vec3(u_xlat40) * vs_TEXCOORD6.xyz;
    u_xlat40 = dot(u_xlat5.xyz, u_xlat11.xyz);
    u_xlat40 = (-u_xlat40) + 1.0;
    u_xlat40 = max(u_xlat40, 9.99999975e-05);
    u_xlat40 = log2(u_xlat40);
    u_xlat5.x = u_xlat40 * _FresnelPower;
    u_xlat40 = u_xlat40 * _SpecularPower;
    u_xlat40 = exp2(u_xlat40);
    u_xlat5.x = exp2(u_xlat5.x);
    u_xlat5.x = u_xlat5.x * _ReflectionIntensity;
    u_xlat1.x = u_xlat1.x * u_xlat5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat2.xyz = u_xlat1.xxx * u_xlat2.xyz + u_xlat9.xyz;
    u_xlat2.xyz = (-u_xlat6.xyz) * u_xlat10_7.xyz + u_xlat2.xyz;
    u_xlat2.xyz = vec3(u_xlat38) * u_xlat2.xyz + u_xlat10.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(0.0>=_ES_MoonDirection.y);
#else
    u_xlatb1 = 0.0>=_ES_MoonDirection.y;
#endif
    u_xlat5.xyz = (bool(u_xlatb1)) ? _ES_SunDirection.xyz : _ES_MoonDirection.xyz;
    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat25) + u_xlat5.xyz;
    u_xlat1.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
    u_xlat16_0.y = 1.0;
    u_xlat16_1 = dot(u_xlat16_0.xyz, u_xlat16_0.xyz);
    u_xlat16_1 = inversesqrt(u_xlat16_1);
    u_xlat16_5.xyz = u_xlat16_0.xyz * vec3(u_xlat16_1);
    u_xlat1.x = dot(u_xlat16_5.xyz, u_xlat4.xyz);
    u_xlat1.x = max(u_xlat1.x, 9.99999975e-05);
    u_xlat1.x = log2(u_xlat1.x);
    u_xlat25 = _Gloss * 128.0;
    u_xlat1.x = u_xlat1.x * u_xlat25;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _SpecularIntensity;
    u_xlat1.x = max(u_xlat1.x, 0.0);
    u_xlat1.x = min(u_xlat1.x, 16.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb25 = !!(_ES_MoonDirection.y>=9.99999975e-05);
#else
    u_xlatb25 = _ES_MoonDirection.y>=9.99999975e-05;
#endif
    u_xlat25 = u_xlatb25 ? 1.0 : float(0.0);
    u_xlat38 = _ES_MoonDirection.y + -1.0;
    u_xlat25 = u_xlat25 * u_xlat38 + 1.0;
    u_xlat4.xyz = vec3(u_xlat25) * _LightColor0.xyz;
    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
    u_xlat1.x = u_xlat37 + -1.0;
    u_xlat1.x = u_xlat13 * u_xlat1.x;
    u_xlat1.x = u_xlat1.x * 0.100000001;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat1.xxx * u_xlat4.xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat40) + u_xlat2.xyz;
    u_xlat2.xyz = vs_TEXCOORD5.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat38 = u_xlat2.y * _HeigtFogParams.x;
    u_xlat4.x = u_xlat38 * -1.44269502;
    u_xlat4.x = exp2(u_xlat4.x);
    u_xlat4.x = (-u_xlat4.x) + 1.0;
    u_xlat4.x = u_xlat4.x / u_xlat38;
#ifdef UNITY_ADRENO_ES3
    u_xlatb38 = !!(0.00999999978<abs(u_xlat38));
#else
    u_xlatb38 = 0.00999999978<abs(u_xlat38);
#endif
    u_xlat16_0.x = (u_xlatb38) ? u_xlat4.x : 1.0;
    u_xlat38 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat38 = sqrt(u_xlat38);
    u_xlat4.x = u_xlat38 * _HeigtFogParams.y;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat4.x;
    u_xlat16_0.x = exp2((-u_xlat16_0.x));
    u_xlat16_0.x = (-u_xlat16_0.x) + 1.0;
    u_xlat4.x = u_xlat2.y * _HeigtFogParams2.x;
    u_xlat16.x = u_xlat4.x * -1.44269502;
    u_xlat16.x = exp2(u_xlat16.x);
    u_xlat16.x = (-u_xlat16.x) + 1.0;
    u_xlat16.x = u_xlat16.x / u_xlat4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(0.00999999978<abs(u_xlat4.x));
#else
    u_xlatb4 = 0.00999999978<abs(u_xlat4.x);
#endif
    u_xlat16_12 = (u_xlatb4) ? u_xlat16.x : 1.0;
    u_xlat4.x = u_xlat38 * _HeigtFogParams2.y;
    u_xlat16_12 = u_xlat16_12 * u_xlat4.x;
    u_xlat16_12 = exp2((-u_xlat16_12));
    u_xlat16_0.y = (-u_xlat16_12) + 1.0;
    u_xlat16_0.xy = max(u_xlat16_0.xy, vec2(0.0, 0.0));
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat4.x = u_xlat38 * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat16_12 = (-u_xlat4.x) + 2.0;
    u_xlat16_12 = u_xlat16_12 * u_xlat4.x;
    u_xlat4.x = u_xlat16_12 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat4.x = u_xlat4.x + 1.0;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat4.x;
    u_xlat4.x = min(u_xlat16_0.x, _HeigtFogColBase.w);
    u_xlat16.x = (-u_xlat4.x) + 1.0;
    u_xlat5.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat5.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat5.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat5.xyz);
    u_xlat14.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!((-u_xlat2.x)>=u_xlat14.x);
#else
    u_xlatb2 = (-u_xlat2.x)>=u_xlat14.x;
#endif
    u_xlat14.x = u_xlat38 * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat14.x = min(max(u_xlat14.x, 0.0), 1.0);
#else
    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
#endif
    u_xlat26 = u_xlat38 + (-_HeigtFogRamp.w);
    u_xlat26 = u_xlat26 * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat26 = min(max(u_xlat26, 0.0), 1.0);
#else
    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);
#endif
    u_xlat38 = (-u_xlat14.x) + 2.0;
    u_xlat14.x = u_xlat38 * u_xlat14.x;
    u_xlat38 = u_xlat14.x * _HeigtFogColDelta.w;
    u_xlat2.x = (u_xlatb2) ? u_xlat38 : u_xlat14.x;
    u_xlat2.x = log2(u_xlat2.x);
    u_xlat2.x = u_xlat2.x * unity_FogColor.w;
    u_xlat2.x = exp2(u_xlat2.x);
    u_xlat2.x = min(u_xlat2.x, _HeigtFogColBase.w);
    u_xlat14.x = vs_TEXCOORD5.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat14.x = min(max(u_xlat14.x, 0.0), 1.0);
#else
    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
#endif
    u_xlat16_0.x = (-u_xlat14.x) + 2.0;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat14.x;
    u_xlat5.xyz = u_xlat16_0.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat6.xyz = (-u_xlat5.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat14.xyz = vec3(u_xlat26) * u_xlat6.xyz + u_xlat5.xyz;
    u_xlat2.yzw = u_xlat2.xxx * u_xlat14.xyz;
    u_xlat2.x = (-u_xlat2.x) + 1.0;
    u_xlat2 = u_xlat16.xxxx * u_xlat2;
    u_xlat16.x = vs_TEXCOORD5.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat16.x = min(max(u_xlat16.x, 0.0), 1.0);
#else
    u_xlat16.x = clamp(u_xlat16.x, 0.0, 1.0);
#endif
    u_xlat16.xyz = u_xlat16.xxx * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    u_xlat14.xyz = u_xlat16.xyz * u_xlat4.xxx + u_xlat2.yzw;
    u_xlat0.xyz = u_xlat2.xxx * u_xlat1.xyz + u_xlat14.xyz;
    u_xlat1.x = 0.100000001 / _OpacityByDepth;
    u_xlat1.x = u_xlat1.x * u_xlat37;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat0.w = u_xlat1.x * vs_COLOR0.w;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "MHY_SHADER_LOW" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	mediump float _MHYZBias;
uniform 	vec4 hlslcc_mtx4x4_mhyJitteredVP[4];
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
out highp vec4 vs_TEXCOORD9;
out highp vec4 vs_TEXCOORD10;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
vec4 u_xlat4;
bool u_xlatb4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
mediump vec4 u_xlat16_6;
vec4 u_xlat7;
mediump vec3 u_xlat16_8;
float u_xlat11;
vec3 u_xlat13;
mediump float u_xlat16_14;
float u_xlat27;
bool u_xlatb27;
float u_xlat29;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4_mhyJitteredVP[1];
    u_xlat2 = hlslcc_mtx4x4_mhyJitteredVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4_mhyJitteredVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4_mhyJitteredVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat3.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    u_xlat3.xyw = u_xlat2.xyw;
    gl_Position = u_xlat3;
    vs_COLOR0 = in_COLOR0;
    u_xlat2.xyw = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat27 = u_xlat2.y * _HeigtFogParams.x;
    u_xlat4.x = u_xlat27 * -1.44269502;
    u_xlat4.x = exp2(u_xlat4.x);
    u_xlat4.x = (-u_xlat4.x) + 1.0;
    u_xlat4.x = u_xlat4.x / u_xlat27;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(0.00999999978<abs(u_xlat27));
#else
    u_xlatb27 = 0.00999999978<abs(u_xlat27);
#endif
    u_xlat16_5.x = (u_xlatb27) ? u_xlat4.x : 1.0;
    u_xlat27 = dot(u_xlat2.xyw, u_xlat2.xyw);
    u_xlat27 = sqrt(u_xlat27);
    u_xlat4.x = u_xlat27 * _HeigtFogParams.y;
    u_xlat16_5.x = u_xlat4.x * u_xlat16_5.x;
    u_xlat16_5.x = exp2((-u_xlat16_5.x));
    u_xlat16_5.x = (-u_xlat16_5.x) + 1.0;
    u_xlat4.x = u_xlat2.y * _HeigtFogParams2.x;
    u_xlat13.x = u_xlat4.x * -1.44269502;
    u_xlat13.x = exp2(u_xlat13.x);
    u_xlat13.x = (-u_xlat13.x) + 1.0;
    u_xlat13.x = u_xlat13.x / u_xlat4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(0.00999999978<abs(u_xlat4.x));
#else
    u_xlatb4 = 0.00999999978<abs(u_xlat4.x);
#endif
    u_xlat16_14 = (u_xlatb4) ? u_xlat13.x : 1.0;
    u_xlat4.x = u_xlat27 * _HeigtFogParams2.y;
    u_xlat16_14 = u_xlat4.x * u_xlat16_14;
    u_xlat16_14 = exp2((-u_xlat16_14));
    u_xlat16_5.y = (-u_xlat16_14) + 1.0;
    u_xlat16_5.xy = max(u_xlat16_5.xy, vec2(0.0, 0.0));
    u_xlat16_5.x = u_xlat16_5.y + u_xlat16_5.x;
    u_xlat4.x = u_xlat27 * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat16_14 = (-u_xlat4.x) + 2.0;
    u_xlat16_14 = u_xlat4.x * u_xlat16_14;
    u_xlat4.x = u_xlat16_14 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat4.x = u_xlat4.x + 1.0;
    u_xlat16_5.x = u_xlat4.x * u_xlat16_5.x;
    u_xlat4.x = min(u_xlat16_5.x, _HeigtFogColBase.w);
    u_xlat13.x = (-u_xlat4.x) + 1.0;
    u_xlat6.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat6.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat6.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat2.x = dot(u_xlat2.xyw, u_xlat6.xyz);
    u_xlat11 = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!((-u_xlat2.x)>=u_xlat11);
#else
    u_xlatb2 = (-u_xlat2.x)>=u_xlat11;
#endif
    u_xlat11 = u_xlat27 * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat11 = min(max(u_xlat11, 0.0), 1.0);
#else
    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
#endif
    u_xlat27 = u_xlat27 + (-_HeigtFogRamp.w);
    u_xlat27 = u_xlat27 * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
    u_xlat29 = (-u_xlat11) + 2.0;
    u_xlat11 = u_xlat29 * u_xlat11;
    u_xlat29 = u_xlat11 * _HeigtFogColDelta.w;
    u_xlat2.x = (u_xlatb2) ? u_xlat29 : u_xlat11;
    u_xlat2.x = log2(u_xlat2.x);
    u_xlat2.x = u_xlat2.x * unity_FogColor.w;
    u_xlat2.x = exp2(u_xlat2.x);
    u_xlat2.x = min(u_xlat2.x, _HeigtFogColBase.w);
    u_xlat11 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat11 = min(max(u_xlat11, 0.0), 1.0);
#else
    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
#endif
    u_xlat16_5.x = (-u_xlat11) + 2.0;
    u_xlat16_5.x = u_xlat11 * u_xlat16_5.x;
    u_xlat6.xyz = u_xlat16_5.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat7.xyz = (-u_xlat6.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat6.xyz = vec3(u_xlat27) * u_xlat7.xyz + u_xlat6.xyz;
    u_xlat6.xyz = u_xlat2.xxx * u_xlat6.xyz;
    u_xlat27 = (-u_xlat2.x) + 1.0;
    vs_TEXCOORD0.w = u_xlat13.x * u_xlat27;
    u_xlat2.xyw = u_xlat13.xxx * u_xlat6.xyz;
    u_xlat27 = u_xlat0.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
    u_xlat13.xyz = vec3(u_xlat27) * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    vs_TEXCOORD0.xyz = u_xlat13.xyz * u_xlat4.xxx + u_xlat2.xyw;
    u_xlat4.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat4.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat4.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat27 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat4.xyz = vec3(u_xlat27) * u_xlat4.xyz;
    u_xlat16_5.x = u_xlat4.y * u_xlat4.y;
    u_xlat16_5.x = u_xlat4.x * u_xlat4.x + (-u_xlat16_5.x);
    u_xlat16_6 = u_xlat4.yzzx * u_xlat4.xyzz;
    u_xlat16_8.x = dot(unity_SHBr, u_xlat16_6);
    u_xlat16_8.y = dot(unity_SHBg, u_xlat16_6);
    u_xlat16_8.z = dot(unity_SHBb, u_xlat16_6);
    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_8.xyz;
    u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat4.w = 1.0;
    u_xlat16_8.x = dot(unity_SHAr, u_xlat4);
    u_xlat16_8.y = dot(unity_SHAg, u_xlat4);
    u_xlat16_8.z = dot(unity_SHAb, u_xlat4);
    u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_8.xyz;
    vs_TEXCOORD1.xyz = u_xlat16_5.xyz;
    vs_TEXCOORD1.w = 1.0;
    u_xlat27 = u_xlat3.y * _ProjectionParams.x;
    u_xlat7.w = u_xlat27 * 0.5;
    u_xlat7.xz = u_xlat3.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.z = u_xlat2.z;
    u_xlat3.xy = u_xlat7.zz + u_xlat7.xw;
    vs_TEXCOORD2 = u_xlat3;
    vs_TEXCOORD4.xyw = u_xlat3.xyw;
    u_xlat27 = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat27 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat27;
    u_xlat27 = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat27;
    u_xlat27 = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat27;
    vs_TEXCOORD3.z = (-u_xlat27);
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD3.w = 0.0;
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD5.w = 0.0;
    vs_TEXCOORD6.xyz = u_xlat4.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[1].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].www + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * in_POSITION0.yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.zzz + u_xlat1.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.www + u_xlat1.xyz;
    vs_TEXCOORD7.xyz = u_xlat1.xyz * vec3(-1.0, -1.0, 1.0);
    vs_TEXCOORD7.w = 0.0;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat27 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat1.xyz = vec3(u_xlat27) * u_xlat1.xyz;
    vs_TEXCOORD8.xyz = u_xlat1.xyz;
    vs_TEXCOORD8.w = 0.0;
    u_xlat2.xyz = u_xlat1.yzx * u_xlat4.zxy;
    u_xlat1.xyz = u_xlat4.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
    u_xlat27 = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD9.xyz = vec3(u_xlat27) * u_xlat1.xyz;
    vs_TEXCOORD9.w = 0.0;
    u_xlat27 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat27 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat27;
    vs_TEXCOORD10.w = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat27;
    vs_TEXCOORD10.xyz = u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	float _NormalMapScale;
uniform 	float _Normal01_U_Speed;
uniform 	float _Normal01_VSpeed;
uniform 	float _NormalMapBias;
uniform 	float _Normal02_U_Speed;
uniform 	float _Normal02_V_Speed;
uniform 	float _RefractionIntensity;
uniform 	float _OpacityByDepth;
uniform 	float _SpecularIntensity;
uniform 	vec3 _ES_MoonDirection;
uniform 	vec3 _ES_SunDirection;
uniform 	float _Gloss;
uniform 	float _ShoreTransparency;
uniform 	float _SpecularPower;
uniform 	vec4 _ShallowColor;
uniform 	float _ShoreFade;
uniform 	vec4 _DeepColor;
uniform 	float _DeepColorDepth;
uniform 	float _DeepColorFade;
uniform 	vec4 _DistortionIntensity;
uniform 	float _ReflectionIntensity;
uniform 	float _FresnelPower;
uniform 	float _ShoreReflectionFade;
uniform 	mediump float _ProjectUVScale;
uniform 	vec4 _ReflectionSkyCubeMap_HDR;
uniform lowp sampler2D _Normal01;
uniform lowp sampler2D _Normal02;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _SceneScaledBufferBeforTransParent;
uniform lowp samplerCube _ReflectionSkyCubeMap;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD8;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec3 u_xlat1;
lowp vec3 u_xlat10_1;
vec4 u_xlat2;
lowp vec3 u_xlat10_2;
bool u_xlatb2;
mediump vec3 u_xlat16_3;
lowp vec4 u_xlat10_3;
vec3 u_xlat4;
bool u_xlatb4;
vec3 u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
vec3 u_xlat8;
vec3 u_xlat9;
vec3 u_xlat10;
mediump float u_xlat16_11;
float u_xlat13;
vec3 u_xlat15;
mediump vec3 u_xlat16_15;
bool u_xlatb15;
float u_xlat16;
float u_xlat23;
float u_xlat24;
float u_xlat27;
mediump float u_xlat16_33;
float u_xlat34;
mediump float u_xlat16_34;
bool u_xlatb34;
float u_xlat35;
float u_xlat37;
void main()
{
    u_xlat16_0.w = -1.0;
    u_xlat1.xy = vs_TEXCOORD5.zx * vec2(vec2(_ProjectUVScale, _ProjectUVScale));
    u_xlat2.w = _Time.y * _Normal02_V_Speed + u_xlat1.x;
    u_xlat2.yz = _Time.yy * vec2(_Normal01_VSpeed, _Normal02_U_Speed) + u_xlat1.xy;
    u_xlat2.x = _Time.y * _Normal01_U_Speed + u_xlat1.y;
    u_xlat10_1.xyz = texture(_Normal01, u_xlat2.xy, _NormalMapBias).xyz;
    u_xlat10_2.xyz = texture(_Normal02, u_xlat2.zw, _NormalMapBias).xyz;
    u_xlat16_0.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_3.xyz = u_xlat10_2.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.wwz;
    u_xlat16_0.xy = u_xlat16_0.xy * vec2(_NormalMapScale);
    u_xlat16_3.xy = u_xlat16_3.xy * vec2(_NormalMapScale);
    u_xlat16_0.z = -1.0;
    u_xlat16_0.xyz = u_xlat16_0.xzy + u_xlat16_3.xzy;
    u_xlat1.xyz = u_xlat16_0.xzy * _DistortionIntensity.xyz;
    u_xlat2.x = vs_TEXCOORD8.x;
    u_xlat2.y = vs_TEXCOORD9.x;
    u_xlat2.z = vs_TEXCOORD6.x;
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat4.x = vs_TEXCOORD8.y;
    u_xlat4.y = vs_TEXCOORD9.y;
    u_xlat4.z = vs_TEXCOORD6.y;
    u_xlat2.y = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat4.x = vs_TEXCOORD8.z;
    u_xlat4.y = vs_TEXCOORD9.z;
    u_xlat4.z = vs_TEXCOORD6.z;
    u_xlat2.z = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat1.xyz = u_xlat1.xxx * u_xlat2.xyz;
    u_xlat2.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat34 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat34 = inversesqrt(u_xlat34);
    u_xlat4.xyz = vec3(u_xlat34) * u_xlat2.xyz;
    u_xlat35 = dot((-u_xlat4.xyz), u_xlat1.xyz);
    u_xlat35 = u_xlat35 + u_xlat35;
    u_xlat1.xyz = u_xlat1.xyz * (-vec3(u_xlat35)) + (-u_xlat4.xyz);
    u_xlat10_3 = textureLod(_ReflectionSkyCubeMap, u_xlat1.xyz, 0.0);
    u_xlat16_33 = u_xlat10_3.w + -1.0;
    u_xlat16_33 = _ReflectionSkyCubeMap_HDR.w * u_xlat16_33 + 1.0;
    u_xlat16_33 = log2(u_xlat16_33);
    u_xlat16_33 = u_xlat16_33 * _ReflectionSkyCubeMap_HDR.y;
    u_xlat16_33 = exp2(u_xlat16_33);
    u_xlat16_33 = u_xlat16_33 * _ReflectionSkyCubeMap_HDR.x;
    u_xlat1.xy = u_xlat16_0.xz * vec2(vec2(_RefractionIntensity, _RefractionIntensity));
    u_xlat23 = float(1.0) / vs_TEXCOORD4.w;
    u_xlat23 = u_xlat23 * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat23 = min(max(u_xlat23, 0.0), 1.0);
#else
    u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
#endif
    u_xlat1.xy = vec2(u_xlat23) * u_xlat1.xy;
    u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD4.ww;
    u_xlat5.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat23 = texture(_CameraDepthTexture, u_xlat5.xy).x;
    u_xlat23 = _ZBufferParams.z * u_xlat23 + _ZBufferParams.w;
    u_xlat23 = float(1.0) / u_xlat23;
    u_xlat23 = u_xlat23 + (-vs_TEXCOORD4.w);
#ifdef UNITY_ADRENO_ES3
    u_xlat23 = min(max(u_xlat23, 0.0), 1.0);
#else
    u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
#endif
    u_xlat1.xy = vec2(u_xlat23) * u_xlat1.xy;
    u_xlat1.z = 0.0;
    u_xlat5.xyz = u_xlat1.xyz + vs_TEXCOORD4.xyw;
    u_xlat5.xy = u_xlat5.xy / u_xlat5.zz;
    u_xlat35 = texture(_CameraDepthTexture, u_xlat5.xy).x;
    u_xlat35 = _ZBufferParams.z * u_xlat35 + _ZBufferParams.w;
    u_xlat35 = float(1.0) / u_xlat35;
    u_xlat35 = u_xlat35 + (-vs_TEXCOORD4.w);
#ifdef UNITY_ADRENO_ES3
    u_xlat35 = min(max(u_xlat35, 0.0), 1.0);
#else
    u_xlat35 = clamp(u_xlat35, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat35) * u_xlat1.xyz + vs_TEXCOORD4.xyw;
    u_xlat5.xy = u_xlat1.xy / u_xlat1.zz;
    u_xlat1.xy = u_xlat1.xy / vs_TEXCOORD4.ww;
    u_xlat10_1.xyz = texture(_SceneScaledBufferBeforTransParent, u_xlat1.xy).xyz;
    u_xlat35 = texture(_CameraDepthTexture, u_xlat5.xy).x;
    u_xlat35 = _ZBufferParams.z * u_xlat35 + _ZBufferParams.w;
    u_xlat35 = float(1.0) / u_xlat35;
    u_xlat35 = u_xlat35 + (-vs_TEXCOORD4.w);
    u_xlat37 = 0.100000001 / _DeepColorDepth;
    u_xlat37 = u_xlat35 * u_xlat37;
#ifdef UNITY_ADRENO_ES3
    u_xlat37 = min(max(u_xlat37, 0.0), 1.0);
#else
    u_xlat37 = clamp(u_xlat37, 0.0, 1.0);
#endif
    u_xlat37 = max(u_xlat37, 9.99999975e-05);
    u_xlat37 = log2(u_xlat37);
    u_xlat37 = u_xlat37 * _DeepColorFade;
    u_xlat37 = exp2(u_xlat37);
    u_xlat5.x = float(1.0) / _ShoreTransparency;
    u_xlat16 = u_xlat35 * u_xlat5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16 = min(max(u_xlat16, 0.0), 1.0);
#else
    u_xlat16 = clamp(u_xlat16, 0.0, 1.0);
#endif
    u_xlat16 = max(u_xlat16, 9.99999975e-05);
    u_xlat16 = log2(u_xlat16);
    u_xlat16 = u_xlat16 * _ShoreFade;
    u_xlat16 = exp2(u_xlat16);
    u_xlat6.xyz = _ShallowColor.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat6.xyz = vec3(u_xlat16) * u_xlat6.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat7.xyz = (-u_xlat6.xyz) * u_xlat10_1.xyz + _DeepColor.xyz;
    u_xlat8.xyz = u_xlat10_1.xyz * u_xlat6.xyz;
    u_xlat7.xyz = vec3(u_xlat37) * u_xlat7.xyz + u_xlat8.xyz;
    u_xlat9.xyz = vec3(u_xlat16_33) * u_xlat10_3.xyz + (-u_xlat7.xyz);
    u_xlat37 = float(1.0) / _ShoreReflectionFade;
    u_xlat37 = u_xlat35 * u_xlat37;
#ifdef UNITY_ADRENO_ES3
    u_xlat37 = min(max(u_xlat37, 0.0), 1.0);
#else
    u_xlat37 = clamp(u_xlat37, 0.0, 1.0);
#endif
    u_xlat27 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat10.xyz = vec3(u_xlat27) * vs_TEXCOORD6.xyz;
    u_xlat4.x = dot(u_xlat4.xyz, u_xlat10.xyz);
    u_xlat4.x = (-u_xlat4.x) + 1.0;
    u_xlat4.x = max(u_xlat4.x, 9.99999975e-05);
    u_xlat4.x = log2(u_xlat4.x);
    u_xlat15.x = u_xlat4.x * _FresnelPower;
    u_xlat4.x = u_xlat4.x * _SpecularPower;
    u_xlat4.x = exp2(u_xlat4.x);
    u_xlat15.x = exp2(u_xlat15.x);
    u_xlat15.x = u_xlat15.x * _ReflectionIntensity;
    u_xlat15.x = u_xlat37 * u_xlat15.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat15.x = min(max(u_xlat15.x, 0.0), 1.0);
#else
    u_xlat15.x = clamp(u_xlat15.x, 0.0, 1.0);
#endif
    u_xlat15.xyz = u_xlat15.xxx * u_xlat9.xyz + u_xlat7.xyz;
    u_xlat1.xyz = (-u_xlat6.xyz) * u_xlat10_1.xyz + u_xlat15.xyz;
    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz + u_xlat8.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(0.0>=_ES_MoonDirection.y);
#else
    u_xlatb15 = 0.0>=_ES_MoonDirection.y;
#endif
    u_xlat15.xyz = (bool(u_xlatb15)) ? _ES_SunDirection.xyz : _ES_MoonDirection.xyz;
    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat34) + u_xlat15.xyz;
    u_xlat34 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat34 = inversesqrt(u_xlat34);
    u_xlat2.xyz = vec3(u_xlat34) * u_xlat2.xyz;
    u_xlat16_0.y = 1.0;
    u_xlat16_34 = dot(u_xlat16_0.xyz, u_xlat16_0.xyz);
    u_xlat16_34 = inversesqrt(u_xlat16_34);
    u_xlat16_15.xyz = u_xlat16_0.xyz * vec3(u_xlat16_34);
    u_xlat34 = dot(u_xlat16_15.xyz, u_xlat2.xyz);
    u_xlat34 = max(u_xlat34, 9.99999975e-05);
    u_xlat34 = log2(u_xlat34);
    u_xlat2.x = _Gloss * 128.0;
    u_xlat34 = u_xlat34 * u_xlat2.x;
    u_xlat34 = exp2(u_xlat34);
    u_xlat34 = u_xlat34 * _SpecularIntensity;
    u_xlat34 = max(u_xlat34, 0.0);
    u_xlat34 = min(u_xlat34, 16.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(_ES_MoonDirection.y>=9.99999975e-05);
#else
    u_xlatb2 = _ES_MoonDirection.y>=9.99999975e-05;
#endif
    u_xlat2.x = u_xlatb2 ? 1.0 : float(0.0);
    u_xlat13 = _ES_MoonDirection.y + -1.0;
    u_xlat2.x = u_xlat2.x * u_xlat13 + 1.0;
    u_xlat2.xyz = u_xlat2.xxx * _LightColor0.xyz;
    u_xlat2.xyz = vec3(u_xlat34) * u_xlat2.xyz;
    u_xlat34 = u_xlat35 + -1.0;
    u_xlat34 = u_xlat5.x * u_xlat34;
    u_xlat34 = u_xlat34 * 0.100000001;
#ifdef UNITY_ADRENO_ES3
    u_xlat34 = min(max(u_xlat34, 0.0), 1.0);
#else
    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
#endif
    u_xlat2.xyz = vec3(u_xlat34) * u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * u_xlat4.xxx + u_xlat1.xyz;
    u_xlat2.xyz = vs_TEXCOORD5.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat34 = u_xlat2.y * _HeigtFogParams.x;
    u_xlat4.x = u_xlat34 * -1.44269502;
    u_xlat4.x = exp2(u_xlat4.x);
    u_xlat4.x = (-u_xlat4.x) + 1.0;
    u_xlat4.x = u_xlat4.x / u_xlat34;
#ifdef UNITY_ADRENO_ES3
    u_xlatb34 = !!(0.00999999978<abs(u_xlat34));
#else
    u_xlatb34 = 0.00999999978<abs(u_xlat34);
#endif
    u_xlat16_0.x = (u_xlatb34) ? u_xlat4.x : 1.0;
    u_xlat34 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat34 = sqrt(u_xlat34);
    u_xlat4.x = u_xlat34 * _HeigtFogParams.y;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat4.x;
    u_xlat16_0.x = exp2((-u_xlat16_0.x));
    u_xlat16_0.x = (-u_xlat16_0.x) + 1.0;
    u_xlat4.x = u_xlat2.y * _HeigtFogParams2.x;
    u_xlat15.x = u_xlat4.x * -1.44269502;
    u_xlat15.x = exp2(u_xlat15.x);
    u_xlat15.x = (-u_xlat15.x) + 1.0;
    u_xlat15.x = u_xlat15.x / u_xlat4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(0.00999999978<abs(u_xlat4.x));
#else
    u_xlatb4 = 0.00999999978<abs(u_xlat4.x);
#endif
    u_xlat16_11 = (u_xlatb4) ? u_xlat15.x : 1.0;
    u_xlat4.x = u_xlat34 * _HeigtFogParams2.y;
    u_xlat16_11 = u_xlat16_11 * u_xlat4.x;
    u_xlat16_11 = exp2((-u_xlat16_11));
    u_xlat16_0.y = (-u_xlat16_11) + 1.0;
    u_xlat16_0.xy = max(u_xlat16_0.xy, vec2(0.0, 0.0));
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat4.x = u_xlat34 * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat16_11 = (-u_xlat4.x) + 2.0;
    u_xlat16_11 = u_xlat16_11 * u_xlat4.x;
    u_xlat4.x = u_xlat16_11 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat4.x = u_xlat4.x + 1.0;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat4.x;
    u_xlat4.x = min(u_xlat16_0.x, _HeigtFogColBase.w);
    u_xlat15.x = (-u_xlat4.x) + 1.0;
    u_xlat5.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat5.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat5.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat5.xyz);
    u_xlat13 = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!((-u_xlat2.x)>=u_xlat13);
#else
    u_xlatb2 = (-u_xlat2.x)>=u_xlat13;
#endif
    u_xlat13 = u_xlat34 * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat13 = min(max(u_xlat13, 0.0), 1.0);
#else
    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
#endif
    u_xlat34 = u_xlat34 + (-_HeigtFogRamp.w);
    u_xlat34 = u_xlat34 * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat34 = min(max(u_xlat34, 0.0), 1.0);
#else
    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
#endif
    u_xlat24 = (-u_xlat13) + 2.0;
    u_xlat13 = u_xlat24 * u_xlat13;
    u_xlat24 = u_xlat13 * _HeigtFogColDelta.w;
    u_xlat2.x = (u_xlatb2) ? u_xlat24 : u_xlat13;
    u_xlat2.x = log2(u_xlat2.x);
    u_xlat2.x = u_xlat2.x * unity_FogColor.w;
    u_xlat2.x = exp2(u_xlat2.x);
    u_xlat2.x = min(u_xlat2.x, _HeigtFogColBase.w);
    u_xlat13 = vs_TEXCOORD5.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat13 = min(max(u_xlat13, 0.0), 1.0);
#else
    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
#endif
    u_xlat16_0.x = (-u_xlat13) + 2.0;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat13;
    u_xlat5.xyz = u_xlat16_0.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat6.xyz = (-u_xlat5.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat5.xyz = vec3(u_xlat34) * u_xlat6.xyz + u_xlat5.xyz;
    u_xlat5.xyz = u_xlat2.xxx * u_xlat5.xyz;
    u_xlat34 = (-u_xlat2.x) + 1.0;
    u_xlat34 = u_xlat15.x * u_xlat34;
    u_xlat2.xyz = u_xlat15.xxx * u_xlat5.xyz;
    u_xlat15.x = vs_TEXCOORD5.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat15.x = min(max(u_xlat15.x, 0.0), 1.0);
#else
    u_xlat15.x = clamp(u_xlat15.x, 0.0, 1.0);
#endif
    u_xlat15.xyz = u_xlat15.xxx * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    u_xlat2.xyz = u_xlat15.xyz * u_xlat4.xxx + u_xlat2.xyz;
    u_xlat0.xyz = vec3(u_xlat34) * u_xlat1.xyz + u_xlat2.xyz;
    u_xlat1.x = 0.100000001 / _OpacityByDepth;
    u_xlat1.x = u_xlat1.x * u_xlat35;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat0.w = u_xlat1.x * vs_COLOR0.w;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" "MHY_SHADER_LOW" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	mediump float _MHYZBias;
uniform 	vec4 hlslcc_mtx4x4_mhyJitteredVP[4];
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
out highp vec4 vs_TEXCOORD9;
out highp vec4 vs_TEXCOORD10;
float u_xlat0;
int u_xlati0;
vec4 u_xlat1;
bool u_xlatb1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
bool u_xlatb4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
mediump vec4 u_xlat16_6;
vec4 u_xlat7;
mediump vec3 u_xlat16_8;
vec3 u_xlat9;
float u_xlat10;
float u_xlat13;
bool u_xlatb13;
mediump float u_xlat16_14;
float u_xlat22;
float u_xlat28;
float u_xlat31;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat9.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4_mhyJitteredVP[1];
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[3] * u_xlat2.wwww + u_xlat1;
    u_xlat3.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    u_xlat3.xyw = u_xlat1.xyw;
    gl_Position = u_xlat3;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.xyw = u_xlat9.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat4.x = u_xlat1.y * _HeigtFogParams.x;
    u_xlat13 = u_xlat4.x * -1.44269502;
    u_xlat13 = exp2(u_xlat13);
    u_xlat13 = (-u_xlat13) + 1.0;
    u_xlat13 = u_xlat13 / u_xlat4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(0.00999999978<abs(u_xlat4.x));
#else
    u_xlatb4 = 0.00999999978<abs(u_xlat4.x);
#endif
    u_xlat16_5.x = (u_xlatb4) ? u_xlat13 : 1.0;
    u_xlat4.x = dot(u_xlat1.xyw, u_xlat1.xyw);
    u_xlat4.x = sqrt(u_xlat4.x);
    u_xlat13 = u_xlat4.x * _HeigtFogParams.y;
    u_xlat16_5.x = u_xlat13 * u_xlat16_5.x;
    u_xlat16_5.x = exp2((-u_xlat16_5.x));
    u_xlat16_5.x = (-u_xlat16_5.x) + 1.0;
    u_xlat13 = u_xlat1.y * _HeigtFogParams2.x;
    u_xlat22 = u_xlat13 * -1.44269502;
    u_xlat22 = exp2(u_xlat22);
    u_xlat22 = (-u_xlat22) + 1.0;
    u_xlat22 = u_xlat22 / u_xlat13;
#ifdef UNITY_ADRENO_ES3
    u_xlatb13 = !!(0.00999999978<abs(u_xlat13));
#else
    u_xlatb13 = 0.00999999978<abs(u_xlat13);
#endif
    u_xlat16_14 = (u_xlatb13) ? u_xlat22 : 1.0;
    u_xlat13 = u_xlat4.x * _HeigtFogParams2.y;
    u_xlat16_14 = u_xlat13 * u_xlat16_14;
    u_xlat16_14 = exp2((-u_xlat16_14));
    u_xlat16_5.y = (-u_xlat16_14) + 1.0;
    u_xlat16_5.xy = max(u_xlat16_5.xy, vec2(0.0, 0.0));
    u_xlat16_5.x = u_xlat16_5.y + u_xlat16_5.x;
    u_xlat13 = u_xlat4.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat13 = min(max(u_xlat13, 0.0), 1.0);
#else
    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
#endif
    u_xlat16_14 = (-u_xlat13) + 2.0;
    u_xlat16_14 = u_xlat13 * u_xlat16_14;
    u_xlat13 = u_xlat16_14 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat13 = u_xlat13 + 1.0;
    u_xlat16_5.x = u_xlat13 * u_xlat16_5.x;
    u_xlat13 = min(u_xlat16_5.x, _HeigtFogColBase.w);
    u_xlat22 = (-u_xlat13) + 1.0;
    u_xlat31 = _ProjectionParams.z * 0.999899983;
    u_xlat6.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat6.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat6.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat1.x = dot(u_xlat1.xyw, u_xlat6.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!((-u_xlat1.x)>=u_xlat31);
#else
    u_xlatb1 = (-u_xlat1.x)>=u_xlat31;
#endif
    u_xlat10 = u_xlat4.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat10 = min(max(u_xlat10, 0.0), 1.0);
#else
    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
#endif
    u_xlat28 = u_xlat4.x + (-_HeigtFogRamp.w);
    u_xlat28 = u_xlat28 * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat28 = min(max(u_xlat28, 0.0), 1.0);
#else
    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
#endif
    u_xlat4.x = (-u_xlat10) + 2.0;
    u_xlat10 = u_xlat10 * u_xlat4.x;
    u_xlat4.x = u_xlat10 * _HeigtFogColDelta.w;
    u_xlat1.x = (u_xlatb1) ? u_xlat4.x : u_xlat10;
    u_xlat1.x = log2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * unity_FogColor.w;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat1.x = min(u_xlat1.x, _HeigtFogColBase.w);
    u_xlat10 = u_xlat9.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat10 = min(max(u_xlat10, 0.0), 1.0);
#else
    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
#endif
    u_xlat16_5.x = (-u_xlat10) + 2.0;
    u_xlat16_5.x = u_xlat10 * u_xlat16_5.x;
    u_xlat6.xyz = u_xlat16_5.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat7.xyz = (-u_xlat6.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat6.xyz = vec3(u_xlat28) * u_xlat7.xyz + u_xlat6.xyz;
    u_xlat6.xyz = u_xlat1.xxx * u_xlat6.xyz;
    u_xlat1.x = (-u_xlat1.x) + 1.0;
    vs_TEXCOORD0.w = u_xlat22 * u_xlat1.x;
    u_xlat1.xyw = vec3(u_xlat22) * u_xlat6.xyz;
    u_xlat4.x = u_xlat9.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat4.xzw = u_xlat4.xxx * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    vs_TEXCOORD0.xyz = u_xlat4.xzw * vec3(u_xlat13) + u_xlat1.xyw;
    vs_TEXCOORD1.w = 1.0;
    u_xlat4.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat4.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat4.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat1.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
    u_xlat16_5.x = u_xlat4.y * u_xlat4.y;
    u_xlat16_5.x = u_xlat4.x * u_xlat4.x + (-u_xlat16_5.x);
    u_xlat16_6 = u_xlat4.yzzx * u_xlat4.xyzz;
    u_xlat16_8.x = dot(unity_SHBr, u_xlat16_6);
    u_xlat16_8.y = dot(unity_SHBg, u_xlat16_6);
    u_xlat16_8.z = dot(unity_SHBb, u_xlat16_6);
    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_8.xyz;
    u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat4.w = 1.0;
    u_xlat16_8.x = dot(unity_SHAr, u_xlat4);
    u_xlat16_8.y = dot(unity_SHAg, u_xlat4);
    u_xlat16_8.z = dot(unity_SHAb, u_xlat4);
    u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_8.xyz;
    vs_TEXCOORD1.xyz = u_xlat16_5.xyz;
    u_xlat1.x = u_xlat3.y * _ProjectionParams.x;
    u_xlat7.w = u_xlat1.x * 0.5;
    u_xlat7.xz = u_xlat3.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.z = u_xlat1.z;
    u_xlat3.xy = u_xlat7.zz + u_xlat7.xw;
    vs_TEXCOORD2 = u_xlat3;
    vs_TEXCOORD4.xyw = u_xlat3.xyw;
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD3.w = 0.0;
    u_xlat1.x = u_xlat2.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat2.x + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat2.z + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat2.w + u_xlat1.x;
    vs_TEXCOORD3.z = (-u_xlat1.x);
    vs_TEXCOORD5.w = 0.0;
    vs_TEXCOORD5.xyz = u_xlat9.xyz;
    u_xlat9.xyz = (-u_xlat9.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD6.w = 0.0;
    vs_TEXCOORD6.xyz = u_xlat4.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].www + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * in_POSITION0.yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.zzz + u_xlat1.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.www + u_xlat1.xyz;
    vs_TEXCOORD7.xyz = u_xlat1.xyz * vec3(-1.0, -1.0, 1.0);
    vs_TEXCOORD7.w = 0.0;
    u_xlat1.xyz = in_TANGENT0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat0 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0 = inversesqrt(u_xlat0);
    u_xlat1.xyz = vec3(u_xlat0) * u_xlat1.xyz;
    vs_TEXCOORD8.xyz = u_xlat1.xyz;
    vs_TEXCOORD8.w = 0.0;
    u_xlat2.xyz = u_xlat1.yzx * u_xlat4.zxy;
    u_xlat1.xyz = u_xlat4.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
    u_xlat0 = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD9.xyz = vec3(u_xlat0) * u_xlat1.xyz;
    vs_TEXCOORD9.w = 0.0;
    u_xlat0 = u_xlat9.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat9.x + u_xlat0;
    vs_TEXCOORD10.w = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat9.z + u_xlat0;
    vs_TEXCOORD10.xyz = u_xlat9.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	float _NormalMapScale;
uniform 	float _Normal01_U_Speed;
uniform 	float _Normal01_VSpeed;
uniform 	float _NormalMapBias;
uniform 	float _Normal02_U_Speed;
uniform 	float _Normal02_V_Speed;
uniform 	float _RefractionIntensity;
uniform 	float _OpacityByDepth;
uniform 	float _SpecularIntensity;
uniform 	vec3 _ES_MoonDirection;
uniform 	vec3 _ES_SunDirection;
uniform 	float _Gloss;
uniform 	float _ShoreTransparency;
uniform 	float _SpecularPower;
uniform 	vec4 _ShallowColor;
uniform 	float _ShoreFade;
uniform 	vec4 _DeepColor;
uniform 	float _DeepColorDepth;
uniform 	float _DeepColorFade;
uniform 	vec4 _DistortionIntensity;
uniform 	float _ReflectionIntensity;
uniform 	float _FresnelPower;
uniform 	float _ShoreReflectionFade;
uniform 	mediump float _ProjectUVScale;
uniform 	vec4 _ReflectionSkyCubeMap_HDR;
uniform lowp sampler2D _Normal01;
uniform lowp sampler2D _Normal02;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _SceneScaledBufferBeforTransParent;
uniform lowp samplerCube _ReflectionSkyCubeMap;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD8;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec3 u_xlat1;
lowp vec3 u_xlat10_1;
vec4 u_xlat2;
lowp vec3 u_xlat10_2;
bool u_xlatb2;
mediump vec3 u_xlat16_3;
lowp vec4 u_xlat10_3;
vec3 u_xlat4;
bool u_xlatb4;
vec3 u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
vec3 u_xlat8;
vec3 u_xlat9;
vec3 u_xlat10;
mediump float u_xlat16_11;
float u_xlat13;
vec3 u_xlat15;
mediump vec3 u_xlat16_15;
bool u_xlatb15;
float u_xlat16;
float u_xlat23;
float u_xlat24;
float u_xlat27;
mediump float u_xlat16_33;
float u_xlat34;
mediump float u_xlat16_34;
bool u_xlatb34;
float u_xlat35;
float u_xlat37;
void main()
{
    u_xlat16_0.w = -1.0;
    u_xlat1.xy = vs_TEXCOORD5.zx * vec2(vec2(_ProjectUVScale, _ProjectUVScale));
    u_xlat2.w = _Time.y * _Normal02_V_Speed + u_xlat1.x;
    u_xlat2.yz = _Time.yy * vec2(_Normal01_VSpeed, _Normal02_U_Speed) + u_xlat1.xy;
    u_xlat2.x = _Time.y * _Normal01_U_Speed + u_xlat1.y;
    u_xlat10_1.xyz = texture(_Normal01, u_xlat2.xy, _NormalMapBias).xyz;
    u_xlat10_2.xyz = texture(_Normal02, u_xlat2.zw, _NormalMapBias).xyz;
    u_xlat16_0.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_3.xyz = u_xlat10_2.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.wwz;
    u_xlat16_0.xy = u_xlat16_0.xy * vec2(_NormalMapScale);
    u_xlat16_3.xy = u_xlat16_3.xy * vec2(_NormalMapScale);
    u_xlat16_0.z = -1.0;
    u_xlat16_0.xyz = u_xlat16_0.xzy + u_xlat16_3.xzy;
    u_xlat1.xyz = u_xlat16_0.xzy * _DistortionIntensity.xyz;
    u_xlat2.x = vs_TEXCOORD8.x;
    u_xlat2.y = vs_TEXCOORD9.x;
    u_xlat2.z = vs_TEXCOORD6.x;
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat4.x = vs_TEXCOORD8.y;
    u_xlat4.y = vs_TEXCOORD9.y;
    u_xlat4.z = vs_TEXCOORD6.y;
    u_xlat2.y = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat4.x = vs_TEXCOORD8.z;
    u_xlat4.y = vs_TEXCOORD9.z;
    u_xlat4.z = vs_TEXCOORD6.z;
    u_xlat2.z = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat1.xyz = u_xlat1.xxx * u_xlat2.xyz;
    u_xlat2.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat34 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat34 = inversesqrt(u_xlat34);
    u_xlat4.xyz = vec3(u_xlat34) * u_xlat2.xyz;
    u_xlat35 = dot((-u_xlat4.xyz), u_xlat1.xyz);
    u_xlat35 = u_xlat35 + u_xlat35;
    u_xlat1.xyz = u_xlat1.xyz * (-vec3(u_xlat35)) + (-u_xlat4.xyz);
    u_xlat10_3 = textureLod(_ReflectionSkyCubeMap, u_xlat1.xyz, 0.0);
    u_xlat16_33 = u_xlat10_3.w + -1.0;
    u_xlat16_33 = _ReflectionSkyCubeMap_HDR.w * u_xlat16_33 + 1.0;
    u_xlat16_33 = log2(u_xlat16_33);
    u_xlat16_33 = u_xlat16_33 * _ReflectionSkyCubeMap_HDR.y;
    u_xlat16_33 = exp2(u_xlat16_33);
    u_xlat16_33 = u_xlat16_33 * _ReflectionSkyCubeMap_HDR.x;
    u_xlat1.xy = u_xlat16_0.xz * vec2(vec2(_RefractionIntensity, _RefractionIntensity));
    u_xlat23 = float(1.0) / vs_TEXCOORD4.w;
    u_xlat23 = u_xlat23 * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat23 = min(max(u_xlat23, 0.0), 1.0);
#else
    u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
#endif
    u_xlat1.xy = vec2(u_xlat23) * u_xlat1.xy;
    u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD4.ww;
    u_xlat5.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat23 = texture(_CameraDepthTexture, u_xlat5.xy).x;
    u_xlat23 = _ZBufferParams.z * u_xlat23 + _ZBufferParams.w;
    u_xlat23 = float(1.0) / u_xlat23;
    u_xlat23 = u_xlat23 + (-vs_TEXCOORD4.w);
#ifdef UNITY_ADRENO_ES3
    u_xlat23 = min(max(u_xlat23, 0.0), 1.0);
#else
    u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
#endif
    u_xlat1.xy = vec2(u_xlat23) * u_xlat1.xy;
    u_xlat1.z = 0.0;
    u_xlat5.xyz = u_xlat1.xyz + vs_TEXCOORD4.xyw;
    u_xlat5.xy = u_xlat5.xy / u_xlat5.zz;
    u_xlat35 = texture(_CameraDepthTexture, u_xlat5.xy).x;
    u_xlat35 = _ZBufferParams.z * u_xlat35 + _ZBufferParams.w;
    u_xlat35 = float(1.0) / u_xlat35;
    u_xlat35 = u_xlat35 + (-vs_TEXCOORD4.w);
#ifdef UNITY_ADRENO_ES3
    u_xlat35 = min(max(u_xlat35, 0.0), 1.0);
#else
    u_xlat35 = clamp(u_xlat35, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat35) * u_xlat1.xyz + vs_TEXCOORD4.xyw;
    u_xlat5.xy = u_xlat1.xy / u_xlat1.zz;
    u_xlat1.xy = u_xlat1.xy / vs_TEXCOORD4.ww;
    u_xlat10_1.xyz = texture(_SceneScaledBufferBeforTransParent, u_xlat1.xy).xyz;
    u_xlat35 = texture(_CameraDepthTexture, u_xlat5.xy).x;
    u_xlat35 = _ZBufferParams.z * u_xlat35 + _ZBufferParams.w;
    u_xlat35 = float(1.0) / u_xlat35;
    u_xlat35 = u_xlat35 + (-vs_TEXCOORD4.w);
    u_xlat37 = 0.100000001 / _DeepColorDepth;
    u_xlat37 = u_xlat35 * u_xlat37;
#ifdef UNITY_ADRENO_ES3
    u_xlat37 = min(max(u_xlat37, 0.0), 1.0);
#else
    u_xlat37 = clamp(u_xlat37, 0.0, 1.0);
#endif
    u_xlat37 = max(u_xlat37, 9.99999975e-05);
    u_xlat37 = log2(u_xlat37);
    u_xlat37 = u_xlat37 * _DeepColorFade;
    u_xlat37 = exp2(u_xlat37);
    u_xlat5.x = float(1.0) / _ShoreTransparency;
    u_xlat16 = u_xlat35 * u_xlat5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16 = min(max(u_xlat16, 0.0), 1.0);
#else
    u_xlat16 = clamp(u_xlat16, 0.0, 1.0);
#endif
    u_xlat16 = max(u_xlat16, 9.99999975e-05);
    u_xlat16 = log2(u_xlat16);
    u_xlat16 = u_xlat16 * _ShoreFade;
    u_xlat16 = exp2(u_xlat16);
    u_xlat6.xyz = _ShallowColor.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat6.xyz = vec3(u_xlat16) * u_xlat6.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat7.xyz = (-u_xlat6.xyz) * u_xlat10_1.xyz + _DeepColor.xyz;
    u_xlat8.xyz = u_xlat10_1.xyz * u_xlat6.xyz;
    u_xlat7.xyz = vec3(u_xlat37) * u_xlat7.xyz + u_xlat8.xyz;
    u_xlat9.xyz = vec3(u_xlat16_33) * u_xlat10_3.xyz + (-u_xlat7.xyz);
    u_xlat37 = float(1.0) / _ShoreReflectionFade;
    u_xlat37 = u_xlat35 * u_xlat37;
#ifdef UNITY_ADRENO_ES3
    u_xlat37 = min(max(u_xlat37, 0.0), 1.0);
#else
    u_xlat37 = clamp(u_xlat37, 0.0, 1.0);
#endif
    u_xlat27 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat10.xyz = vec3(u_xlat27) * vs_TEXCOORD6.xyz;
    u_xlat4.x = dot(u_xlat4.xyz, u_xlat10.xyz);
    u_xlat4.x = (-u_xlat4.x) + 1.0;
    u_xlat4.x = max(u_xlat4.x, 9.99999975e-05);
    u_xlat4.x = log2(u_xlat4.x);
    u_xlat15.x = u_xlat4.x * _FresnelPower;
    u_xlat4.x = u_xlat4.x * _SpecularPower;
    u_xlat4.x = exp2(u_xlat4.x);
    u_xlat15.x = exp2(u_xlat15.x);
    u_xlat15.x = u_xlat15.x * _ReflectionIntensity;
    u_xlat15.x = u_xlat37 * u_xlat15.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat15.x = min(max(u_xlat15.x, 0.0), 1.0);
#else
    u_xlat15.x = clamp(u_xlat15.x, 0.0, 1.0);
#endif
    u_xlat15.xyz = u_xlat15.xxx * u_xlat9.xyz + u_xlat7.xyz;
    u_xlat1.xyz = (-u_xlat6.xyz) * u_xlat10_1.xyz + u_xlat15.xyz;
    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz + u_xlat8.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(0.0>=_ES_MoonDirection.y);
#else
    u_xlatb15 = 0.0>=_ES_MoonDirection.y;
#endif
    u_xlat15.xyz = (bool(u_xlatb15)) ? _ES_SunDirection.xyz : _ES_MoonDirection.xyz;
    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat34) + u_xlat15.xyz;
    u_xlat34 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat34 = inversesqrt(u_xlat34);
    u_xlat2.xyz = vec3(u_xlat34) * u_xlat2.xyz;
    u_xlat16_0.y = 1.0;
    u_xlat16_34 = dot(u_xlat16_0.xyz, u_xlat16_0.xyz);
    u_xlat16_34 = inversesqrt(u_xlat16_34);
    u_xlat16_15.xyz = u_xlat16_0.xyz * vec3(u_xlat16_34);
    u_xlat34 = dot(u_xlat16_15.xyz, u_xlat2.xyz);
    u_xlat34 = max(u_xlat34, 9.99999975e-05);
    u_xlat34 = log2(u_xlat34);
    u_xlat2.x = _Gloss * 128.0;
    u_xlat34 = u_xlat34 * u_xlat2.x;
    u_xlat34 = exp2(u_xlat34);
    u_xlat34 = u_xlat34 * _SpecularIntensity;
    u_xlat34 = max(u_xlat34, 0.0);
    u_xlat34 = min(u_xlat34, 16.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(_ES_MoonDirection.y>=9.99999975e-05);
#else
    u_xlatb2 = _ES_MoonDirection.y>=9.99999975e-05;
#endif
    u_xlat2.x = u_xlatb2 ? 1.0 : float(0.0);
    u_xlat13 = _ES_MoonDirection.y + -1.0;
    u_xlat2.x = u_xlat2.x * u_xlat13 + 1.0;
    u_xlat2.xyz = u_xlat2.xxx * _LightColor0.xyz;
    u_xlat2.xyz = vec3(u_xlat34) * u_xlat2.xyz;
    u_xlat34 = u_xlat35 + -1.0;
    u_xlat34 = u_xlat5.x * u_xlat34;
    u_xlat34 = u_xlat34 * 0.100000001;
#ifdef UNITY_ADRENO_ES3
    u_xlat34 = min(max(u_xlat34, 0.0), 1.0);
#else
    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
#endif
    u_xlat2.xyz = vec3(u_xlat34) * u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * u_xlat4.xxx + u_xlat1.xyz;
    u_xlat2.xyz = vs_TEXCOORD5.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat34 = u_xlat2.y * _HeigtFogParams.x;
    u_xlat4.x = u_xlat34 * -1.44269502;
    u_xlat4.x = exp2(u_xlat4.x);
    u_xlat4.x = (-u_xlat4.x) + 1.0;
    u_xlat4.x = u_xlat4.x / u_xlat34;
#ifdef UNITY_ADRENO_ES3
    u_xlatb34 = !!(0.00999999978<abs(u_xlat34));
#else
    u_xlatb34 = 0.00999999978<abs(u_xlat34);
#endif
    u_xlat16_0.x = (u_xlatb34) ? u_xlat4.x : 1.0;
    u_xlat34 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat34 = sqrt(u_xlat34);
    u_xlat4.x = u_xlat34 * _HeigtFogParams.y;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat4.x;
    u_xlat16_0.x = exp2((-u_xlat16_0.x));
    u_xlat16_0.x = (-u_xlat16_0.x) + 1.0;
    u_xlat4.x = u_xlat2.y * _HeigtFogParams2.x;
    u_xlat15.x = u_xlat4.x * -1.44269502;
    u_xlat15.x = exp2(u_xlat15.x);
    u_xlat15.x = (-u_xlat15.x) + 1.0;
    u_xlat15.x = u_xlat15.x / u_xlat4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(0.00999999978<abs(u_xlat4.x));
#else
    u_xlatb4 = 0.00999999978<abs(u_xlat4.x);
#endif
    u_xlat16_11 = (u_xlatb4) ? u_xlat15.x : 1.0;
    u_xlat4.x = u_xlat34 * _HeigtFogParams2.y;
    u_xlat16_11 = u_xlat16_11 * u_xlat4.x;
    u_xlat16_11 = exp2((-u_xlat16_11));
    u_xlat16_0.y = (-u_xlat16_11) + 1.0;
    u_xlat16_0.xy = max(u_xlat16_0.xy, vec2(0.0, 0.0));
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat4.x = u_xlat34 * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat16_11 = (-u_xlat4.x) + 2.0;
    u_xlat16_11 = u_xlat16_11 * u_xlat4.x;
    u_xlat4.x = u_xlat16_11 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat4.x = u_xlat4.x + 1.0;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat4.x;
    u_xlat4.x = min(u_xlat16_0.x, _HeigtFogColBase.w);
    u_xlat15.x = (-u_xlat4.x) + 1.0;
    u_xlat5.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat5.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat5.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat5.xyz);
    u_xlat13 = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!((-u_xlat2.x)>=u_xlat13);
#else
    u_xlatb2 = (-u_xlat2.x)>=u_xlat13;
#endif
    u_xlat13 = u_xlat34 * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat13 = min(max(u_xlat13, 0.0), 1.0);
#else
    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
#endif
    u_xlat34 = u_xlat34 + (-_HeigtFogRamp.w);
    u_xlat34 = u_xlat34 * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat34 = min(max(u_xlat34, 0.0), 1.0);
#else
    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
#endif
    u_xlat24 = (-u_xlat13) + 2.0;
    u_xlat13 = u_xlat24 * u_xlat13;
    u_xlat24 = u_xlat13 * _HeigtFogColDelta.w;
    u_xlat2.x = (u_xlatb2) ? u_xlat24 : u_xlat13;
    u_xlat2.x = log2(u_xlat2.x);
    u_xlat2.x = u_xlat2.x * unity_FogColor.w;
    u_xlat2.x = exp2(u_xlat2.x);
    u_xlat2.x = min(u_xlat2.x, _HeigtFogColBase.w);
    u_xlat13 = vs_TEXCOORD5.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat13 = min(max(u_xlat13, 0.0), 1.0);
#else
    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
#endif
    u_xlat16_0.x = (-u_xlat13) + 2.0;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat13;
    u_xlat5.xyz = u_xlat16_0.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat6.xyz = (-u_xlat5.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat5.xyz = vec3(u_xlat34) * u_xlat6.xyz + u_xlat5.xyz;
    u_xlat5.xyz = u_xlat2.xxx * u_xlat5.xyz;
    u_xlat34 = (-u_xlat2.x) + 1.0;
    u_xlat34 = u_xlat15.x * u_xlat34;
    u_xlat2.xyz = u_xlat15.xxx * u_xlat5.xyz;
    u_xlat15.x = vs_TEXCOORD5.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat15.x = min(max(u_xlat15.x, 0.0), 1.0);
#else
    u_xlat15.x = clamp(u_xlat15.x, 0.0, 1.0);
#endif
    u_xlat15.xyz = u_xlat15.xxx * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    u_xlat2.xyz = u_xlat15.xyz * u_xlat4.xxx + u_xlat2.xyz;
    u_xlat0.xyz = vec3(u_xlat34) * u_xlat1.xyz + u_xlat2.xyz;
    u_xlat1.x = 0.100000001 / _OpacityByDepth;
    u_xlat1.x = u_xlat1.x * u_xlat35;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat0.w = u_xlat1.x * vs_COLOR0.w;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "MHY_SHADER_HIGH" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	mediump float _MHYZBias;
uniform 	vec4 hlslcc_mtx4x4_mhyJitteredVP[4];
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
out highp vec4 vs_TEXCOORD9;
out highp vec4 vs_TEXCOORD10;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
vec4 u_xlat4;
bool u_xlatb4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
mediump vec4 u_xlat16_6;
vec4 u_xlat7;
mediump vec3 u_xlat16_8;
float u_xlat11;
vec3 u_xlat13;
mediump float u_xlat16_14;
float u_xlat27;
bool u_xlatb27;
float u_xlat29;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4_mhyJitteredVP[1];
    u_xlat2 = hlslcc_mtx4x4_mhyJitteredVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4_mhyJitteredVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4_mhyJitteredVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat3.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    u_xlat3.xyw = u_xlat2.xyw;
    gl_Position = u_xlat3;
    vs_COLOR0 = in_COLOR0;
    u_xlat2.xyw = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat27 = u_xlat2.y * _HeigtFogParams.x;
    u_xlat4.x = u_xlat27 * -1.44269502;
    u_xlat4.x = exp2(u_xlat4.x);
    u_xlat4.x = (-u_xlat4.x) + 1.0;
    u_xlat4.x = u_xlat4.x / u_xlat27;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(0.00999999978<abs(u_xlat27));
#else
    u_xlatb27 = 0.00999999978<abs(u_xlat27);
#endif
    u_xlat16_5.x = (u_xlatb27) ? u_xlat4.x : 1.0;
    u_xlat27 = dot(u_xlat2.xyw, u_xlat2.xyw);
    u_xlat27 = sqrt(u_xlat27);
    u_xlat4.x = u_xlat27 * _HeigtFogParams.y;
    u_xlat16_5.x = u_xlat4.x * u_xlat16_5.x;
    u_xlat16_5.x = exp2((-u_xlat16_5.x));
    u_xlat16_5.x = (-u_xlat16_5.x) + 1.0;
    u_xlat4.x = u_xlat2.y * _HeigtFogParams2.x;
    u_xlat13.x = u_xlat4.x * -1.44269502;
    u_xlat13.x = exp2(u_xlat13.x);
    u_xlat13.x = (-u_xlat13.x) + 1.0;
    u_xlat13.x = u_xlat13.x / u_xlat4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(0.00999999978<abs(u_xlat4.x));
#else
    u_xlatb4 = 0.00999999978<abs(u_xlat4.x);
#endif
    u_xlat16_14 = (u_xlatb4) ? u_xlat13.x : 1.0;
    u_xlat4.x = u_xlat27 * _HeigtFogParams2.y;
    u_xlat16_14 = u_xlat4.x * u_xlat16_14;
    u_xlat16_14 = exp2((-u_xlat16_14));
    u_xlat16_5.y = (-u_xlat16_14) + 1.0;
    u_xlat16_5.xy = max(u_xlat16_5.xy, vec2(0.0, 0.0));
    u_xlat16_5.x = u_xlat16_5.y + u_xlat16_5.x;
    u_xlat4.x = u_xlat27 * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat16_14 = (-u_xlat4.x) + 2.0;
    u_xlat16_14 = u_xlat4.x * u_xlat16_14;
    u_xlat4.x = u_xlat16_14 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat4.x = u_xlat4.x + 1.0;
    u_xlat16_5.x = u_xlat4.x * u_xlat16_5.x;
    u_xlat4.x = min(u_xlat16_5.x, _HeigtFogColBase.w);
    u_xlat13.x = (-u_xlat4.x) + 1.0;
    u_xlat6.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat6.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat6.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat2.x = dot(u_xlat2.xyw, u_xlat6.xyz);
    u_xlat11 = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!((-u_xlat2.x)>=u_xlat11);
#else
    u_xlatb2 = (-u_xlat2.x)>=u_xlat11;
#endif
    u_xlat11 = u_xlat27 * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat11 = min(max(u_xlat11, 0.0), 1.0);
#else
    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
#endif
    u_xlat27 = u_xlat27 + (-_HeigtFogRamp.w);
    u_xlat27 = u_xlat27 * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
    u_xlat29 = (-u_xlat11) + 2.0;
    u_xlat11 = u_xlat29 * u_xlat11;
    u_xlat29 = u_xlat11 * _HeigtFogColDelta.w;
    u_xlat2.x = (u_xlatb2) ? u_xlat29 : u_xlat11;
    u_xlat2.x = log2(u_xlat2.x);
    u_xlat2.x = u_xlat2.x * unity_FogColor.w;
    u_xlat2.x = exp2(u_xlat2.x);
    u_xlat2.x = min(u_xlat2.x, _HeigtFogColBase.w);
    u_xlat11 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat11 = min(max(u_xlat11, 0.0), 1.0);
#else
    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
#endif
    u_xlat16_5.x = (-u_xlat11) + 2.0;
    u_xlat16_5.x = u_xlat11 * u_xlat16_5.x;
    u_xlat6.xyz = u_xlat16_5.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat7.xyz = (-u_xlat6.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat6.xyz = vec3(u_xlat27) * u_xlat7.xyz + u_xlat6.xyz;
    u_xlat6.xyz = u_xlat2.xxx * u_xlat6.xyz;
    u_xlat27 = (-u_xlat2.x) + 1.0;
    vs_TEXCOORD0.w = u_xlat13.x * u_xlat27;
    u_xlat2.xyw = u_xlat13.xxx * u_xlat6.xyz;
    u_xlat27 = u_xlat0.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
    u_xlat13.xyz = vec3(u_xlat27) * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    vs_TEXCOORD0.xyz = u_xlat13.xyz * u_xlat4.xxx + u_xlat2.xyw;
    u_xlat4.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat4.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat4.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat27 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat4.xyz = vec3(u_xlat27) * u_xlat4.xyz;
    u_xlat16_5.x = u_xlat4.y * u_xlat4.y;
    u_xlat16_5.x = u_xlat4.x * u_xlat4.x + (-u_xlat16_5.x);
    u_xlat16_6 = u_xlat4.yzzx * u_xlat4.xyzz;
    u_xlat16_8.x = dot(unity_SHBr, u_xlat16_6);
    u_xlat16_8.y = dot(unity_SHBg, u_xlat16_6);
    u_xlat16_8.z = dot(unity_SHBb, u_xlat16_6);
    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_8.xyz;
    u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat4.w = 1.0;
    u_xlat16_8.x = dot(unity_SHAr, u_xlat4);
    u_xlat16_8.y = dot(unity_SHAg, u_xlat4);
    u_xlat16_8.z = dot(unity_SHAb, u_xlat4);
    u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_8.xyz;
    vs_TEXCOORD1.xyz = u_xlat16_5.xyz;
    vs_TEXCOORD1.w = 1.0;
    u_xlat27 = u_xlat3.y * _ProjectionParams.x;
    u_xlat7.w = u_xlat27 * 0.5;
    u_xlat7.xz = u_xlat3.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.z = u_xlat2.z;
    u_xlat3.xy = u_xlat7.zz + u_xlat7.xw;
    vs_TEXCOORD2 = u_xlat3;
    vs_TEXCOORD4.xyw = u_xlat3.xyw;
    u_xlat27 = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat27 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat27;
    u_xlat27 = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat27;
    u_xlat27 = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat27;
    vs_TEXCOORD3.z = (-u_xlat27);
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD3.w = 0.0;
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD5.w = 0.0;
    vs_TEXCOORD6.xyz = u_xlat4.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[1].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].www + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * in_POSITION0.yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.zzz + u_xlat1.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.www + u_xlat1.xyz;
    vs_TEXCOORD7.xyz = u_xlat1.xyz * vec3(-1.0, -1.0, 1.0);
    vs_TEXCOORD7.w = 0.0;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat27 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat1.xyz = vec3(u_xlat27) * u_xlat1.xyz;
    vs_TEXCOORD8.xyz = u_xlat1.xyz;
    vs_TEXCOORD8.w = 0.0;
    u_xlat2.xyz = u_xlat1.yzx * u_xlat4.zxy;
    u_xlat1.xyz = u_xlat4.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
    u_xlat27 = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD9.xyz = vec3(u_xlat27) * u_xlat1.xyz;
    vs_TEXCOORD9.w = 0.0;
    u_xlat27 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat27 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat27;
    vs_TEXCOORD10.w = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat27;
    vs_TEXCOORD10.xyz = u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _NormalMapScale;
uniform 	float _Normal01_U_Speed;
uniform 	float _Normal01_VSpeed;
uniform 	float _NormalMapBias;
uniform 	float _Normal02_U_Speed;
uniform 	float _Normal02_V_Speed;
uniform 	float _RefractionIntensity;
uniform 	float _OpacityByDepth;
uniform 	float _SpecularIntensity;
uniform 	vec3 _ES_MoonDirection;
uniform 	vec3 _ES_SunDirection;
uniform 	float _Gloss;
uniform 	float _ShoreTransparency;
uniform 	float _SpecularPower;
uniform 	vec4 _ShallowColor;
uniform 	float _ShoreFade;
uniform 	vec4 _DeepColor;
uniform 	float _DeepColorDepth;
uniform 	float _DeepColorFade;
uniform 	vec4 _DistortionIntensity;
uniform 	float _SSRDistortion;
uniform 	float _SSRDistortion_Shore;
uniform 	float _SSRIntensity;
uniform 	float _ReflectionIntensity;
uniform 	float _FresnelPower;
uniform 	float _ShoreReflectionFade;
uniform 	mediump float _ProjectUVScale;
uniform 	vec4 _ReflectionSkyCubeMap_HDR;
uniform lowp sampler2D _Normal01;
uniform lowp sampler2D _Normal02;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _SceneScaledBufferBeforTransParent;
uniform lowp samplerCube _ReflectionSkyCubeMap;
uniform lowp sampler2D _SSRTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD8;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
lowp vec4 u_xlat10_3;
vec3 u_xlat4;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
mediump vec3 u_xlat16_7;
lowp vec3 u_xlat10_8;
vec3 u_xlat9;
vec3 u_xlat10;
vec3 u_xlat11;
vec3 u_xlat12;
vec3 u_xlat13;
vec2 u_xlat15;
mediump vec3 u_xlat16_16;
vec3 u_xlat18;
bool u_xlatb18;
vec3 u_xlat19;
vec2 u_xlat29;
float u_xlat32;
float u_xlat43;
bool u_xlatb43;
float u_xlat46;
bool u_xlatb46;
float u_xlat47;
bool u_xlatb47;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD5.zx * vec2(vec2(_ProjectUVScale, _ProjectUVScale));
    u_xlat1.x = _Time.y * _Normal01_U_Speed + u_xlat0.y;
    u_xlat1.yz = _Time.yy * vec2(_Normal01_VSpeed, _Normal02_U_Speed) + u_xlat0.xy;
    u_xlat1.w = _Time.y * _Normal02_V_Speed + u_xlat0.x;
    u_xlat10_0.xyz = texture(_Normal01, u_xlat1.xy, _NormalMapBias).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_2.xy = u_xlat16_0.xy * vec2(_NormalMapScale);
    u_xlat10_1.xyz = texture(_Normal02, u_xlat1.zw, _NormalMapBias).xyz;
    u_xlat16_0.w = -1.0;
    u_xlat16_3.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.wwz;
    u_xlat16_3.xy = u_xlat16_3.xy * vec2(_NormalMapScale);
    u_xlat16_2.z = -1.0;
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
    u_xlat1.x = float(1.0) / vs_TEXCOORD4.w;
    u_xlat15.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat15.x = texture(_CameraDepthTexture, u_xlat15.xy).x;
    u_xlat15.x = _ZBufferParams.z * u_xlat15.x + _ZBufferParams.w;
    u_xlat15.x = float(1.0) / u_xlat15.x;
    u_xlat29.xy = u_xlat16_2.xy * vec2(vec2(_RefractionIntensity, _RefractionIntensity));
    u_xlat1.x = u_xlat1.x * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.xz = u_xlat1.xx * u_xlat29.xy;
    u_xlat1.xz = u_xlat1.xz * vs_TEXCOORD4.ww;
    u_xlat15.x = u_xlat15.x + (-vs_TEXCOORD4.w);
#ifdef UNITY_ADRENO_ES3
    u_xlat15.x = min(max(u_xlat15.x, 0.0), 1.0);
#else
    u_xlat15.x = clamp(u_xlat15.x, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat15.xx * u_xlat1.xz;
    u_xlat1.z = 0.0;
    u_xlat4.xyz = u_xlat1.xyz + vs_TEXCOORD4.xyw;
    u_xlat4.xy = u_xlat4.xy / u_xlat4.zz;
    u_xlat43 = texture(_CameraDepthTexture, u_xlat4.xy).x;
    u_xlat43 = _ZBufferParams.z * u_xlat43 + _ZBufferParams.w;
    u_xlat43 = float(1.0) / u_xlat43;
    u_xlat43 = u_xlat43 + (-vs_TEXCOORD4.w);
#ifdef UNITY_ADRENO_ES3
    u_xlat43 = min(max(u_xlat43, 0.0), 1.0);
#else
    u_xlat43 = clamp(u_xlat43, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat43) * u_xlat1.xyz + vs_TEXCOORD4.xyw;
    u_xlat29.xy = u_xlat1.xy / u_xlat1.zz;
    u_xlat29.x = texture(_CameraDepthTexture, u_xlat29.xy).x;
    u_xlat29.x = _ZBufferParams.z * u_xlat29.x + _ZBufferParams.w;
    u_xlat29.x = float(1.0) / u_xlat29.x;
    u_xlat29.x = u_xlat29.x + (-vs_TEXCOORD4.w);
    u_xlat1.w = 0.100000001 / _OpacityByDepth;
    u_xlat16_3.xz = u_xlat16_2.xy;
    u_xlat16_3.y = 1.0;
    u_xlat16_4.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
    u_xlat16_4.x = inversesqrt(u_xlat16_4.x);
    u_xlat16_4.xyz = u_xlat16_3.xyz * u_xlat16_4.xxx;
#ifdef UNITY_ADRENO_ES3
    u_xlatb46 = !!(0.0>=_ES_MoonDirection.y);
#else
    u_xlatb46 = 0.0>=_ES_MoonDirection.y;
#endif
    u_xlat5.xyz = (bool(u_xlatb46)) ? _ES_SunDirection.xyz : _ES_MoonDirection.xyz;
    u_xlat6.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat46 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat46 = inversesqrt(u_xlat46);
    u_xlat7.xyz = vec3(u_xlat46) * u_xlat6.xyz;
    u_xlat5.xyz = u_xlat6.xyz * vec3(u_xlat46) + u_xlat5.xyz;
    u_xlat46 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat46 = inversesqrt(u_xlat46);
    u_xlat5.xyz = vec3(u_xlat46) * u_xlat5.xyz;
    u_xlat4.x = dot(u_xlat16_4.xyz, u_xlat5.xyz);
    u_xlat18.x = _Gloss * 128.0;
    u_xlat4.x = max(u_xlat4.x, 9.99999975e-05);
    u_xlat4.x = log2(u_xlat4.x);
    u_xlat4.x = u_xlat4.x * u_xlat18.x;
    u_xlat4.x = exp2(u_xlat4.x);
    u_xlat4.x = u_xlat4.x * _SpecularIntensity;
    u_xlat4.x = max(u_xlat4.x, 0.0);
    u_xlat4.x = min(u_xlat4.x, 16.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_ES_MoonDirection.y>=9.99999975e-05);
#else
    u_xlatb18 = _ES_MoonDirection.y>=9.99999975e-05;
#endif
    u_xlat18.x = u_xlatb18 ? 1.0 : float(0.0);
    u_xlat32 = _ES_MoonDirection.y + -1.0;
    u_xlat18.x = u_xlat18.x * u_xlat32 + 1.0;
    u_xlat32 = float(1.0) / _ShoreTransparency;
    u_xlat46 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat46 = inversesqrt(u_xlat46);
    u_xlat5.xyz = vec3(u_xlat46) * vs_TEXCOORD6.xyz;
    u_xlat46 = dot(u_xlat7.xyz, u_xlat5.xyz);
    u_xlat46 = (-u_xlat46) + 1.0;
    u_xlat46 = max(u_xlat46, 9.99999975e-05);
    u_xlat46 = log2(u_xlat46);
    u_xlat5.x = u_xlat46 * _SpecularPower;
    u_xlat5.x = exp2(u_xlat5.x);
    u_xlat19.xyz = u_xlat18.xxx * _LightColor0.xyz;
    u_xlat19.xyz = u_xlat4.xxx * u_xlat19.xyz;
    u_xlat4.x = u_xlat29.x + -1.0;
    u_xlat4.x = u_xlat32 * u_xlat4.x;
    u_xlat4.x = u_xlat4.x * 0.100000001;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat19.xyz = u_xlat4.xxx * u_xlat19.xyz;
    u_xlat4.x = u_xlat29.x * u_xlat32;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat4.x = max(u_xlat4.x, 9.99999975e-05);
    u_xlat4.x = log2(u_xlat4.x);
    u_xlat4.x = u_xlat4.x * _ShoreFade;
    u_xlat4.x = exp2(u_xlat4.x);
    u_xlat6.xyz = _ShallowColor.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat6.xyz = u_xlat4.xxx * u_xlat6.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat1.xy = u_xlat1.xy / vs_TEXCOORD4.ww;
    u_xlat10_8.xyz = texture(_SceneScaledBufferBeforTransParent, u_xlat1.xy).xyz;
    u_xlat9.xyz = u_xlat6.xyz * u_xlat10_8.xyz;
    u_xlat1.x = 0.100000001 / _DeepColorDepth;
    u_xlat1.xw = u_xlat1.xw * u_xlat29.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xw = min(max(u_xlat1.xw, 0.0), 1.0);
#else
    u_xlat1.xw = clamp(u_xlat1.xw, 0.0, 1.0);
#endif
    u_xlat1.x = max(u_xlat1.x, 9.99999975e-05);
    u_xlat1.x = log2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _DeepColorFade;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat10.xyz = (-u_xlat6.xyz) * u_xlat10_8.xyz + _DeepColor.xyz;
    u_xlat10.xyz = u_xlat1.xxx * u_xlat10.xyz + u_xlat9.xyz;
    u_xlat11.xyz = u_xlat16_2.xyz * _DistortionIntensity.xyz;
    u_xlat12.x = vs_TEXCOORD8.x;
    u_xlat12.y = vs_TEXCOORD9.x;
    u_xlat12.z = vs_TEXCOORD6.x;
    u_xlat12.x = dot(u_xlat12.xyz, u_xlat11.xyz);
    u_xlat13.x = vs_TEXCOORD8.y;
    u_xlat13.y = vs_TEXCOORD9.y;
    u_xlat13.z = vs_TEXCOORD6.y;
    u_xlat12.y = dot(u_xlat13.xyz, u_xlat11.xyz);
    u_xlat13.x = vs_TEXCOORD8.z;
    u_xlat13.y = vs_TEXCOORD9.z;
    u_xlat13.z = vs_TEXCOORD6.z;
    u_xlat12.z = dot(u_xlat13.xyz, u_xlat11.xyz);
    u_xlat1.x = dot(u_xlat12.xyz, u_xlat12.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat12.xyz = u_xlat1.xxx * u_xlat12.xyz;
    u_xlat1.x = dot((-u_xlat7.xyz), u_xlat12.xyz);
    u_xlat1.x = u_xlat1.x + u_xlat1.x;
    u_xlat7.xyz = u_xlat12.xyz * (-u_xlat1.xxx) + (-u_xlat7.xyz);
    u_xlat10_0 = textureLod(_ReflectionSkyCubeMap, u_xlat7.xyz, 0.0);
    u_xlat16_2.x = u_xlat10_0.w + -1.0;
    u_xlat16_2.x = _ReflectionSkyCubeMap_HDR.w * u_xlat16_2.x + 1.0;
    u_xlat16_2.x = log2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * _ReflectionSkyCubeMap_HDR.y;
    u_xlat16_2.x = exp2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * _ReflectionSkyCubeMap_HDR.x;
    u_xlat16_16.xyz = u_xlat10_0.xyz * u_xlat16_2.xxx;
    u_xlat1.xy = u_xlat11.xy * vec2(_SSRDistortion);
    u_xlat18.x = float(1.0) / _SSRDistortion_Shore;
    u_xlat18.x = u_xlat29.x * u_xlat18.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat18.x = min(max(u_xlat18.x, 0.0), 1.0);
#else
    u_xlat18.x = clamp(u_xlat18.x, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat1.xy * u_xlat18.xx;
    u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD4.ww + vs_TEXCOORD4.xy;
    u_xlat1.xy = u_xlat1.xy / vs_TEXCOORD4.ww;
    u_xlat10_3 = texture(_SSRTexture, u_xlat1.xy).wxyz;
    u_xlat16_7.xyz = (-u_xlat16_2.xxx) * u_xlat10_0.xyz + u_xlat10_3.yzw;
    u_xlat7.xyz = u_xlat16_7.xyz * vec3(vec3(_SSRIntensity, _SSRIntensity, _SSRIntensity));
    u_xlat16_3.x = u_xlat10_3.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat7.xyz = u_xlat16_3.xxx * u_xlat7.xyz + u_xlat16_16.xyz;
    u_xlat1.x = u_xlat46 * _FresnelPower;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _ReflectionIntensity;
    u_xlat15.x = float(1.0) / _ShoreReflectionFade;
    u_xlat15.x = u_xlat15.x * u_xlat29.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat15.x = min(max(u_xlat15.x, 0.0), 1.0);
#else
    u_xlat15.x = clamp(u_xlat15.x, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat15.x * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat18.xyz = (-u_xlat10.xyz) + u_xlat7.xyz;
    u_xlat1.xyz = u_xlat1.xxx * u_xlat18.xyz + u_xlat10.xyz;
    u_xlat1.xyz = (-u_xlat6.xyz) * u_xlat10_8.xyz + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat4.xxx * u_xlat1.xyz + u_xlat9.xyz;
    u_xlat1.xyz = u_xlat19.xyz * u_xlat5.xxx + u_xlat1.xyz;
    u_xlat0.w = u_xlat1.w * vs_COLOR0.w;
    u_xlat4.xyz = vs_TEXCOORD5.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat5.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat5.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat5.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat43 = dot(u_xlat4.xyz, u_xlat5.xyz);
    u_xlat4.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat4.x = sqrt(u_xlat4.x);
    u_xlat18.y = u_xlat4.x * _HeigtFogParams.y;
    u_xlat46 = u_xlat4.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat46 = min(max(u_xlat46, 0.0), 1.0);
#else
    u_xlat46 = clamp(u_xlat46, 0.0, 1.0);
#endif
    u_xlat5.x = (-u_xlat46) + 2.0;
    u_xlat46 = u_xlat46 * u_xlat5.x;
    u_xlat5.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb43 = !!((-u_xlat43)>=u_xlat5.x);
#else
    u_xlatb43 = (-u_xlat43)>=u_xlat5.x;
#endif
    u_xlat5.x = u_xlat46 * _HeigtFogColDelta.w;
    u_xlat43 = (u_xlatb43) ? u_xlat5.x : u_xlat46;
    u_xlat43 = log2(u_xlat43);
    u_xlat43 = u_xlat43 * unity_FogColor.w;
    u_xlat43 = exp2(u_xlat43);
    u_xlat43 = min(u_xlat43, _HeigtFogColBase.w);
    u_xlat46 = vs_TEXCOORD5.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat46 = min(max(u_xlat46, 0.0), 1.0);
#else
    u_xlat46 = clamp(u_xlat46, 0.0, 1.0);
#endif
    u_xlat16_2.x = (-u_xlat46) + 2.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat46;
    u_xlat5.xyz = u_xlat16_2.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat46 = u_xlat4.x + (-_HeigtFogRamp.w);
    u_xlat46 = u_xlat46 * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat46 = min(max(u_xlat46, 0.0), 1.0);
#else
    u_xlat46 = clamp(u_xlat46, 0.0, 1.0);
#endif
    u_xlat6.xyz = (-u_xlat5.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat5.xyz = vec3(u_xlat46) * u_xlat6.xyz + u_xlat5.xyz;
    u_xlat46 = u_xlat4.y * _HeigtFogParams.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb47 = !!(0.00999999978<abs(u_xlat46));
#else
    u_xlatb47 = 0.00999999978<abs(u_xlat46);
#endif
    u_xlat6.x = u_xlat46 * -1.44269502;
    u_xlat6.x = exp2(u_xlat6.x);
    u_xlat6.x = (-u_xlat6.x) + 1.0;
    u_xlat46 = u_xlat6.x / u_xlat46;
    u_xlat16_2.x = (u_xlatb47) ? u_xlat46 : 1.0;
    u_xlat18.x = u_xlat4.y * _HeigtFogParams2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb46 = !!(0.00999999978<abs(u_xlat18.x));
#else
    u_xlatb46 = 0.00999999978<abs(u_xlat18.x);
#endif
    u_xlat47 = u_xlat18.x * -1.44269502;
    u_xlat47 = exp2(u_xlat47);
    u_xlat47 = (-u_xlat47) + 1.0;
    u_xlat18.x = u_xlat47 / u_xlat18.x;
    u_xlat16_2.y = (u_xlatb46) ? u_xlat18.x : 1.0;
    u_xlat18.x = u_xlat4.x * _HeigtFogParams2.y;
    u_xlat16_2.xy = u_xlat16_2.xy * u_xlat18.yx;
    u_xlat16_2.x = exp2((-u_xlat16_2.x));
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_16.x = exp2((-u_xlat16_2.y));
    u_xlat16_2.y = (-u_xlat16_16.x) + 1.0;
    u_xlat16_2.xy = max(u_xlat16_2.xy, vec2(0.0, 0.0));
    u_xlat16_2.x = u_xlat16_2.y + u_xlat16_2.x;
    u_xlat4.x = u_xlat4.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat16_16.x = (-u_xlat4.x) + 2.0;
    u_xlat16_16.x = u_xlat16_16.x * u_xlat4.x;
    u_xlat4.x = u_xlat16_16.x * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat4.x = u_xlat4.x + 1.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat4.x;
    u_xlat4.x = min(u_xlat16_2.x, _HeigtFogColBase.w);
    u_xlat18.x = vs_TEXCOORD5.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat18.x = min(max(u_xlat18.x, 0.0), 1.0);
#else
    u_xlat18.x = clamp(u_xlat18.x, 0.0, 1.0);
#endif
    u_xlat18.xyz = u_xlat18.xxx * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    u_xlat5.xyz = vec3(u_xlat43) * u_xlat5.xyz;
    u_xlat47 = (-u_xlat4.x) + 1.0;
    u_xlat5.xyz = vec3(u_xlat47) * u_xlat5.xyz;
    u_xlat4.xyz = u_xlat18.xyz * u_xlat4.xxx + u_xlat5.xyz;
    u_xlat43 = (-u_xlat43) + 1.0;
    u_xlat43 = u_xlat47 * u_xlat43;
    u_xlat0.xyz = vec3(u_xlat43) * u_xlat1.xyz + u_xlat4.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "MHY_SHADER_HIGH" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	mediump float _MHYZBias;
uniform 	vec4 hlslcc_mtx4x4_mhyJitteredVP[4];
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
out highp vec4 vs_TEXCOORD9;
out highp vec4 vs_TEXCOORD10;
float u_xlat0;
int u_xlati0;
vec4 u_xlat1;
bool u_xlatb1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
bool u_xlatb4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
mediump vec4 u_xlat16_6;
vec4 u_xlat7;
mediump vec3 u_xlat16_8;
vec3 u_xlat9;
float u_xlat10;
float u_xlat13;
bool u_xlatb13;
mediump float u_xlat16_14;
float u_xlat22;
float u_xlat28;
float u_xlat31;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat9.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4_mhyJitteredVP[1];
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[3] * u_xlat2.wwww + u_xlat1;
    u_xlat3.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    u_xlat3.xyw = u_xlat1.xyw;
    gl_Position = u_xlat3;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.xyw = u_xlat9.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat4.x = u_xlat1.y * _HeigtFogParams.x;
    u_xlat13 = u_xlat4.x * -1.44269502;
    u_xlat13 = exp2(u_xlat13);
    u_xlat13 = (-u_xlat13) + 1.0;
    u_xlat13 = u_xlat13 / u_xlat4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(0.00999999978<abs(u_xlat4.x));
#else
    u_xlatb4 = 0.00999999978<abs(u_xlat4.x);
#endif
    u_xlat16_5.x = (u_xlatb4) ? u_xlat13 : 1.0;
    u_xlat4.x = dot(u_xlat1.xyw, u_xlat1.xyw);
    u_xlat4.x = sqrt(u_xlat4.x);
    u_xlat13 = u_xlat4.x * _HeigtFogParams.y;
    u_xlat16_5.x = u_xlat13 * u_xlat16_5.x;
    u_xlat16_5.x = exp2((-u_xlat16_5.x));
    u_xlat16_5.x = (-u_xlat16_5.x) + 1.0;
    u_xlat13 = u_xlat1.y * _HeigtFogParams2.x;
    u_xlat22 = u_xlat13 * -1.44269502;
    u_xlat22 = exp2(u_xlat22);
    u_xlat22 = (-u_xlat22) + 1.0;
    u_xlat22 = u_xlat22 / u_xlat13;
#ifdef UNITY_ADRENO_ES3
    u_xlatb13 = !!(0.00999999978<abs(u_xlat13));
#else
    u_xlatb13 = 0.00999999978<abs(u_xlat13);
#endif
    u_xlat16_14 = (u_xlatb13) ? u_xlat22 : 1.0;
    u_xlat13 = u_xlat4.x * _HeigtFogParams2.y;
    u_xlat16_14 = u_xlat13 * u_xlat16_14;
    u_xlat16_14 = exp2((-u_xlat16_14));
    u_xlat16_5.y = (-u_xlat16_14) + 1.0;
    u_xlat16_5.xy = max(u_xlat16_5.xy, vec2(0.0, 0.0));
    u_xlat16_5.x = u_xlat16_5.y + u_xlat16_5.x;
    u_xlat13 = u_xlat4.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat13 = min(max(u_xlat13, 0.0), 1.0);
#else
    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
#endif
    u_xlat16_14 = (-u_xlat13) + 2.0;
    u_xlat16_14 = u_xlat13 * u_xlat16_14;
    u_xlat13 = u_xlat16_14 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat13 = u_xlat13 + 1.0;
    u_xlat16_5.x = u_xlat13 * u_xlat16_5.x;
    u_xlat13 = min(u_xlat16_5.x, _HeigtFogColBase.w);
    u_xlat22 = (-u_xlat13) + 1.0;
    u_xlat31 = _ProjectionParams.z * 0.999899983;
    u_xlat6.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat6.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat6.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat1.x = dot(u_xlat1.xyw, u_xlat6.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!((-u_xlat1.x)>=u_xlat31);
#else
    u_xlatb1 = (-u_xlat1.x)>=u_xlat31;
#endif
    u_xlat10 = u_xlat4.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat10 = min(max(u_xlat10, 0.0), 1.0);
#else
    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
#endif
    u_xlat28 = u_xlat4.x + (-_HeigtFogRamp.w);
    u_xlat28 = u_xlat28 * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat28 = min(max(u_xlat28, 0.0), 1.0);
#else
    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
#endif
    u_xlat4.x = (-u_xlat10) + 2.0;
    u_xlat10 = u_xlat10 * u_xlat4.x;
    u_xlat4.x = u_xlat10 * _HeigtFogColDelta.w;
    u_xlat1.x = (u_xlatb1) ? u_xlat4.x : u_xlat10;
    u_xlat1.x = log2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * unity_FogColor.w;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat1.x = min(u_xlat1.x, _HeigtFogColBase.w);
    u_xlat10 = u_xlat9.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat10 = min(max(u_xlat10, 0.0), 1.0);
#else
    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
#endif
    u_xlat16_5.x = (-u_xlat10) + 2.0;
    u_xlat16_5.x = u_xlat10 * u_xlat16_5.x;
    u_xlat6.xyz = u_xlat16_5.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat7.xyz = (-u_xlat6.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat6.xyz = vec3(u_xlat28) * u_xlat7.xyz + u_xlat6.xyz;
    u_xlat6.xyz = u_xlat1.xxx * u_xlat6.xyz;
    u_xlat1.x = (-u_xlat1.x) + 1.0;
    vs_TEXCOORD0.w = u_xlat22 * u_xlat1.x;
    u_xlat1.xyw = vec3(u_xlat22) * u_xlat6.xyz;
    u_xlat4.x = u_xlat9.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat4.xzw = u_xlat4.xxx * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    vs_TEXCOORD0.xyz = u_xlat4.xzw * vec3(u_xlat13) + u_xlat1.xyw;
    vs_TEXCOORD1.w = 1.0;
    u_xlat4.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat4.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat4.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat1.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
    u_xlat16_5.x = u_xlat4.y * u_xlat4.y;
    u_xlat16_5.x = u_xlat4.x * u_xlat4.x + (-u_xlat16_5.x);
    u_xlat16_6 = u_xlat4.yzzx * u_xlat4.xyzz;
    u_xlat16_8.x = dot(unity_SHBr, u_xlat16_6);
    u_xlat16_8.y = dot(unity_SHBg, u_xlat16_6);
    u_xlat16_8.z = dot(unity_SHBb, u_xlat16_6);
    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_8.xyz;
    u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat4.w = 1.0;
    u_xlat16_8.x = dot(unity_SHAr, u_xlat4);
    u_xlat16_8.y = dot(unity_SHAg, u_xlat4);
    u_xlat16_8.z = dot(unity_SHAb, u_xlat4);
    u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_8.xyz;
    vs_TEXCOORD1.xyz = u_xlat16_5.xyz;
    u_xlat1.x = u_xlat3.y * _ProjectionParams.x;
    u_xlat7.w = u_xlat1.x * 0.5;
    u_xlat7.xz = u_xlat3.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.z = u_xlat1.z;
    u_xlat3.xy = u_xlat7.zz + u_xlat7.xw;
    vs_TEXCOORD2 = u_xlat3;
    vs_TEXCOORD4.xyw = u_xlat3.xyw;
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD3.w = 0.0;
    u_xlat1.x = u_xlat2.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat2.x + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat2.z + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat2.w + u_xlat1.x;
    vs_TEXCOORD3.z = (-u_xlat1.x);
    vs_TEXCOORD5.w = 0.0;
    vs_TEXCOORD5.xyz = u_xlat9.xyz;
    u_xlat9.xyz = (-u_xlat9.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD6.w = 0.0;
    vs_TEXCOORD6.xyz = u_xlat4.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].www + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * in_POSITION0.yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.zzz + u_xlat1.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.www + u_xlat1.xyz;
    vs_TEXCOORD7.xyz = u_xlat1.xyz * vec3(-1.0, -1.0, 1.0);
    vs_TEXCOORD7.w = 0.0;
    u_xlat1.xyz = in_TANGENT0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat0 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0 = inversesqrt(u_xlat0);
    u_xlat1.xyz = vec3(u_xlat0) * u_xlat1.xyz;
    vs_TEXCOORD8.xyz = u_xlat1.xyz;
    vs_TEXCOORD8.w = 0.0;
    u_xlat2.xyz = u_xlat1.yzx * u_xlat4.zxy;
    u_xlat1.xyz = u_xlat4.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
    u_xlat0 = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD9.xyz = vec3(u_xlat0) * u_xlat1.xyz;
    vs_TEXCOORD9.w = 0.0;
    u_xlat0 = u_xlat9.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat9.x + u_xlat0;
    vs_TEXCOORD10.w = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat9.z + u_xlat0;
    vs_TEXCOORD10.xyz = u_xlat9.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _NormalMapScale;
uniform 	float _Normal01_U_Speed;
uniform 	float _Normal01_VSpeed;
uniform 	float _NormalMapBias;
uniform 	float _Normal02_U_Speed;
uniform 	float _Normal02_V_Speed;
uniform 	float _RefractionIntensity;
uniform 	float _OpacityByDepth;
uniform 	float _SpecularIntensity;
uniform 	vec3 _ES_MoonDirection;
uniform 	vec3 _ES_SunDirection;
uniform 	float _Gloss;
uniform 	float _ShoreTransparency;
uniform 	float _SpecularPower;
uniform 	vec4 _ShallowColor;
uniform 	float _ShoreFade;
uniform 	vec4 _DeepColor;
uniform 	float _DeepColorDepth;
uniform 	float _DeepColorFade;
uniform 	vec4 _DistortionIntensity;
uniform 	float _SSRDistortion;
uniform 	float _SSRDistortion_Shore;
uniform 	float _SSRIntensity;
uniform 	float _ReflectionIntensity;
uniform 	float _FresnelPower;
uniform 	float _ShoreReflectionFade;
uniform 	mediump float _ProjectUVScale;
uniform 	vec4 _ReflectionSkyCubeMap_HDR;
uniform lowp sampler2D _Normal01;
uniform lowp sampler2D _Normal02;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _SceneScaledBufferBeforTransParent;
uniform lowp samplerCube _ReflectionSkyCubeMap;
uniform lowp sampler2D _SSRTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD8;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
lowp vec4 u_xlat10_3;
vec3 u_xlat4;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
mediump vec3 u_xlat16_7;
lowp vec3 u_xlat10_8;
vec3 u_xlat9;
vec3 u_xlat10;
vec3 u_xlat11;
vec3 u_xlat12;
vec3 u_xlat13;
vec2 u_xlat15;
mediump vec3 u_xlat16_16;
vec3 u_xlat18;
bool u_xlatb18;
vec3 u_xlat19;
vec2 u_xlat29;
float u_xlat32;
float u_xlat43;
bool u_xlatb43;
float u_xlat46;
bool u_xlatb46;
float u_xlat47;
bool u_xlatb47;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD5.zx * vec2(vec2(_ProjectUVScale, _ProjectUVScale));
    u_xlat1.x = _Time.y * _Normal01_U_Speed + u_xlat0.y;
    u_xlat1.yz = _Time.yy * vec2(_Normal01_VSpeed, _Normal02_U_Speed) + u_xlat0.xy;
    u_xlat1.w = _Time.y * _Normal02_V_Speed + u_xlat0.x;
    u_xlat10_0.xyz = texture(_Normal01, u_xlat1.xy, _NormalMapBias).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_2.xy = u_xlat16_0.xy * vec2(_NormalMapScale);
    u_xlat10_1.xyz = texture(_Normal02, u_xlat1.zw, _NormalMapBias).xyz;
    u_xlat16_0.w = -1.0;
    u_xlat16_3.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.wwz;
    u_xlat16_3.xy = u_xlat16_3.xy * vec2(_NormalMapScale);
    u_xlat16_2.z = -1.0;
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
    u_xlat1.x = float(1.0) / vs_TEXCOORD4.w;
    u_xlat15.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat15.x = texture(_CameraDepthTexture, u_xlat15.xy).x;
    u_xlat15.x = _ZBufferParams.z * u_xlat15.x + _ZBufferParams.w;
    u_xlat15.x = float(1.0) / u_xlat15.x;
    u_xlat29.xy = u_xlat16_2.xy * vec2(vec2(_RefractionIntensity, _RefractionIntensity));
    u_xlat1.x = u_xlat1.x * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.xz = u_xlat1.xx * u_xlat29.xy;
    u_xlat1.xz = u_xlat1.xz * vs_TEXCOORD4.ww;
    u_xlat15.x = u_xlat15.x + (-vs_TEXCOORD4.w);
#ifdef UNITY_ADRENO_ES3
    u_xlat15.x = min(max(u_xlat15.x, 0.0), 1.0);
#else
    u_xlat15.x = clamp(u_xlat15.x, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat15.xx * u_xlat1.xz;
    u_xlat1.z = 0.0;
    u_xlat4.xyz = u_xlat1.xyz + vs_TEXCOORD4.xyw;
    u_xlat4.xy = u_xlat4.xy / u_xlat4.zz;
    u_xlat43 = texture(_CameraDepthTexture, u_xlat4.xy).x;
    u_xlat43 = _ZBufferParams.z * u_xlat43 + _ZBufferParams.w;
    u_xlat43 = float(1.0) / u_xlat43;
    u_xlat43 = u_xlat43 + (-vs_TEXCOORD4.w);
#ifdef UNITY_ADRENO_ES3
    u_xlat43 = min(max(u_xlat43, 0.0), 1.0);
#else
    u_xlat43 = clamp(u_xlat43, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat43) * u_xlat1.xyz + vs_TEXCOORD4.xyw;
    u_xlat29.xy = u_xlat1.xy / u_xlat1.zz;
    u_xlat29.x = texture(_CameraDepthTexture, u_xlat29.xy).x;
    u_xlat29.x = _ZBufferParams.z * u_xlat29.x + _ZBufferParams.w;
    u_xlat29.x = float(1.0) / u_xlat29.x;
    u_xlat29.x = u_xlat29.x + (-vs_TEXCOORD4.w);
    u_xlat1.w = 0.100000001 / _OpacityByDepth;
    u_xlat16_3.xz = u_xlat16_2.xy;
    u_xlat16_3.y = 1.0;
    u_xlat16_4.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
    u_xlat16_4.x = inversesqrt(u_xlat16_4.x);
    u_xlat16_4.xyz = u_xlat16_3.xyz * u_xlat16_4.xxx;
#ifdef UNITY_ADRENO_ES3
    u_xlatb46 = !!(0.0>=_ES_MoonDirection.y);
#else
    u_xlatb46 = 0.0>=_ES_MoonDirection.y;
#endif
    u_xlat5.xyz = (bool(u_xlatb46)) ? _ES_SunDirection.xyz : _ES_MoonDirection.xyz;
    u_xlat6.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat46 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat46 = inversesqrt(u_xlat46);
    u_xlat7.xyz = vec3(u_xlat46) * u_xlat6.xyz;
    u_xlat5.xyz = u_xlat6.xyz * vec3(u_xlat46) + u_xlat5.xyz;
    u_xlat46 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat46 = inversesqrt(u_xlat46);
    u_xlat5.xyz = vec3(u_xlat46) * u_xlat5.xyz;
    u_xlat4.x = dot(u_xlat16_4.xyz, u_xlat5.xyz);
    u_xlat18.x = _Gloss * 128.0;
    u_xlat4.x = max(u_xlat4.x, 9.99999975e-05);
    u_xlat4.x = log2(u_xlat4.x);
    u_xlat4.x = u_xlat4.x * u_xlat18.x;
    u_xlat4.x = exp2(u_xlat4.x);
    u_xlat4.x = u_xlat4.x * _SpecularIntensity;
    u_xlat4.x = max(u_xlat4.x, 0.0);
    u_xlat4.x = min(u_xlat4.x, 16.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_ES_MoonDirection.y>=9.99999975e-05);
#else
    u_xlatb18 = _ES_MoonDirection.y>=9.99999975e-05;
#endif
    u_xlat18.x = u_xlatb18 ? 1.0 : float(0.0);
    u_xlat32 = _ES_MoonDirection.y + -1.0;
    u_xlat18.x = u_xlat18.x * u_xlat32 + 1.0;
    u_xlat32 = float(1.0) / _ShoreTransparency;
    u_xlat46 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat46 = inversesqrt(u_xlat46);
    u_xlat5.xyz = vec3(u_xlat46) * vs_TEXCOORD6.xyz;
    u_xlat46 = dot(u_xlat7.xyz, u_xlat5.xyz);
    u_xlat46 = (-u_xlat46) + 1.0;
    u_xlat46 = max(u_xlat46, 9.99999975e-05);
    u_xlat46 = log2(u_xlat46);
    u_xlat5.x = u_xlat46 * _SpecularPower;
    u_xlat5.x = exp2(u_xlat5.x);
    u_xlat19.xyz = u_xlat18.xxx * _LightColor0.xyz;
    u_xlat19.xyz = u_xlat4.xxx * u_xlat19.xyz;
    u_xlat4.x = u_xlat29.x + -1.0;
    u_xlat4.x = u_xlat32 * u_xlat4.x;
    u_xlat4.x = u_xlat4.x * 0.100000001;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat19.xyz = u_xlat4.xxx * u_xlat19.xyz;
    u_xlat4.x = u_xlat29.x * u_xlat32;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat4.x = max(u_xlat4.x, 9.99999975e-05);
    u_xlat4.x = log2(u_xlat4.x);
    u_xlat4.x = u_xlat4.x * _ShoreFade;
    u_xlat4.x = exp2(u_xlat4.x);
    u_xlat6.xyz = _ShallowColor.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat6.xyz = u_xlat4.xxx * u_xlat6.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat1.xy = u_xlat1.xy / vs_TEXCOORD4.ww;
    u_xlat10_8.xyz = texture(_SceneScaledBufferBeforTransParent, u_xlat1.xy).xyz;
    u_xlat9.xyz = u_xlat6.xyz * u_xlat10_8.xyz;
    u_xlat1.x = 0.100000001 / _DeepColorDepth;
    u_xlat1.xw = u_xlat1.xw * u_xlat29.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xw = min(max(u_xlat1.xw, 0.0), 1.0);
#else
    u_xlat1.xw = clamp(u_xlat1.xw, 0.0, 1.0);
#endif
    u_xlat1.x = max(u_xlat1.x, 9.99999975e-05);
    u_xlat1.x = log2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _DeepColorFade;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat10.xyz = (-u_xlat6.xyz) * u_xlat10_8.xyz + _DeepColor.xyz;
    u_xlat10.xyz = u_xlat1.xxx * u_xlat10.xyz + u_xlat9.xyz;
    u_xlat11.xyz = u_xlat16_2.xyz * _DistortionIntensity.xyz;
    u_xlat12.x = vs_TEXCOORD8.x;
    u_xlat12.y = vs_TEXCOORD9.x;
    u_xlat12.z = vs_TEXCOORD6.x;
    u_xlat12.x = dot(u_xlat12.xyz, u_xlat11.xyz);
    u_xlat13.x = vs_TEXCOORD8.y;
    u_xlat13.y = vs_TEXCOORD9.y;
    u_xlat13.z = vs_TEXCOORD6.y;
    u_xlat12.y = dot(u_xlat13.xyz, u_xlat11.xyz);
    u_xlat13.x = vs_TEXCOORD8.z;
    u_xlat13.y = vs_TEXCOORD9.z;
    u_xlat13.z = vs_TEXCOORD6.z;
    u_xlat12.z = dot(u_xlat13.xyz, u_xlat11.xyz);
    u_xlat1.x = dot(u_xlat12.xyz, u_xlat12.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat12.xyz = u_xlat1.xxx * u_xlat12.xyz;
    u_xlat1.x = dot((-u_xlat7.xyz), u_xlat12.xyz);
    u_xlat1.x = u_xlat1.x + u_xlat1.x;
    u_xlat7.xyz = u_xlat12.xyz * (-u_xlat1.xxx) + (-u_xlat7.xyz);
    u_xlat10_0 = textureLod(_ReflectionSkyCubeMap, u_xlat7.xyz, 0.0);
    u_xlat16_2.x = u_xlat10_0.w + -1.0;
    u_xlat16_2.x = _ReflectionSkyCubeMap_HDR.w * u_xlat16_2.x + 1.0;
    u_xlat16_2.x = log2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * _ReflectionSkyCubeMap_HDR.y;
    u_xlat16_2.x = exp2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * _ReflectionSkyCubeMap_HDR.x;
    u_xlat16_16.xyz = u_xlat10_0.xyz * u_xlat16_2.xxx;
    u_xlat1.xy = u_xlat11.xy * vec2(_SSRDistortion);
    u_xlat18.x = float(1.0) / _SSRDistortion_Shore;
    u_xlat18.x = u_xlat29.x * u_xlat18.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat18.x = min(max(u_xlat18.x, 0.0), 1.0);
#else
    u_xlat18.x = clamp(u_xlat18.x, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat1.xy * u_xlat18.xx;
    u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD4.ww + vs_TEXCOORD4.xy;
    u_xlat1.xy = u_xlat1.xy / vs_TEXCOORD4.ww;
    u_xlat10_3 = texture(_SSRTexture, u_xlat1.xy).wxyz;
    u_xlat16_7.xyz = (-u_xlat16_2.xxx) * u_xlat10_0.xyz + u_xlat10_3.yzw;
    u_xlat7.xyz = u_xlat16_7.xyz * vec3(vec3(_SSRIntensity, _SSRIntensity, _SSRIntensity));
    u_xlat16_3.x = u_xlat10_3.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat7.xyz = u_xlat16_3.xxx * u_xlat7.xyz + u_xlat16_16.xyz;
    u_xlat1.x = u_xlat46 * _FresnelPower;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _ReflectionIntensity;
    u_xlat15.x = float(1.0) / _ShoreReflectionFade;
    u_xlat15.x = u_xlat15.x * u_xlat29.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat15.x = min(max(u_xlat15.x, 0.0), 1.0);
#else
    u_xlat15.x = clamp(u_xlat15.x, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat15.x * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat18.xyz = (-u_xlat10.xyz) + u_xlat7.xyz;
    u_xlat1.xyz = u_xlat1.xxx * u_xlat18.xyz + u_xlat10.xyz;
    u_xlat1.xyz = (-u_xlat6.xyz) * u_xlat10_8.xyz + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat4.xxx * u_xlat1.xyz + u_xlat9.xyz;
    u_xlat1.xyz = u_xlat19.xyz * u_xlat5.xxx + u_xlat1.xyz;
    u_xlat0.w = u_xlat1.w * vs_COLOR0.w;
    u_xlat4.xyz = vs_TEXCOORD5.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat5.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat5.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat5.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat43 = dot(u_xlat4.xyz, u_xlat5.xyz);
    u_xlat4.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat4.x = sqrt(u_xlat4.x);
    u_xlat18.y = u_xlat4.x * _HeigtFogParams.y;
    u_xlat46 = u_xlat4.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat46 = min(max(u_xlat46, 0.0), 1.0);
#else
    u_xlat46 = clamp(u_xlat46, 0.0, 1.0);
#endif
    u_xlat5.x = (-u_xlat46) + 2.0;
    u_xlat46 = u_xlat46 * u_xlat5.x;
    u_xlat5.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb43 = !!((-u_xlat43)>=u_xlat5.x);
#else
    u_xlatb43 = (-u_xlat43)>=u_xlat5.x;
#endif
    u_xlat5.x = u_xlat46 * _HeigtFogColDelta.w;
    u_xlat43 = (u_xlatb43) ? u_xlat5.x : u_xlat46;
    u_xlat43 = log2(u_xlat43);
    u_xlat43 = u_xlat43 * unity_FogColor.w;
    u_xlat43 = exp2(u_xlat43);
    u_xlat43 = min(u_xlat43, _HeigtFogColBase.w);
    u_xlat46 = vs_TEXCOORD5.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat46 = min(max(u_xlat46, 0.0), 1.0);
#else
    u_xlat46 = clamp(u_xlat46, 0.0, 1.0);
#endif
    u_xlat16_2.x = (-u_xlat46) + 2.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat46;
    u_xlat5.xyz = u_xlat16_2.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat46 = u_xlat4.x + (-_HeigtFogRamp.w);
    u_xlat46 = u_xlat46 * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat46 = min(max(u_xlat46, 0.0), 1.0);
#else
    u_xlat46 = clamp(u_xlat46, 0.0, 1.0);
#endif
    u_xlat6.xyz = (-u_xlat5.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat5.xyz = vec3(u_xlat46) * u_xlat6.xyz + u_xlat5.xyz;
    u_xlat46 = u_xlat4.y * _HeigtFogParams.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb47 = !!(0.00999999978<abs(u_xlat46));
#else
    u_xlatb47 = 0.00999999978<abs(u_xlat46);
#endif
    u_xlat6.x = u_xlat46 * -1.44269502;
    u_xlat6.x = exp2(u_xlat6.x);
    u_xlat6.x = (-u_xlat6.x) + 1.0;
    u_xlat46 = u_xlat6.x / u_xlat46;
    u_xlat16_2.x = (u_xlatb47) ? u_xlat46 : 1.0;
    u_xlat18.x = u_xlat4.y * _HeigtFogParams2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb46 = !!(0.00999999978<abs(u_xlat18.x));
#else
    u_xlatb46 = 0.00999999978<abs(u_xlat18.x);
#endif
    u_xlat47 = u_xlat18.x * -1.44269502;
    u_xlat47 = exp2(u_xlat47);
    u_xlat47 = (-u_xlat47) + 1.0;
    u_xlat18.x = u_xlat47 / u_xlat18.x;
    u_xlat16_2.y = (u_xlatb46) ? u_xlat18.x : 1.0;
    u_xlat18.x = u_xlat4.x * _HeigtFogParams2.y;
    u_xlat16_2.xy = u_xlat16_2.xy * u_xlat18.yx;
    u_xlat16_2.x = exp2((-u_xlat16_2.x));
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_16.x = exp2((-u_xlat16_2.y));
    u_xlat16_2.y = (-u_xlat16_16.x) + 1.0;
    u_xlat16_2.xy = max(u_xlat16_2.xy, vec2(0.0, 0.0));
    u_xlat16_2.x = u_xlat16_2.y + u_xlat16_2.x;
    u_xlat4.x = u_xlat4.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat16_16.x = (-u_xlat4.x) + 2.0;
    u_xlat16_16.x = u_xlat16_16.x * u_xlat4.x;
    u_xlat4.x = u_xlat16_16.x * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat4.x = u_xlat4.x + 1.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat4.x;
    u_xlat4.x = min(u_xlat16_2.x, _HeigtFogColBase.w);
    u_xlat18.x = vs_TEXCOORD5.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat18.x = min(max(u_xlat18.x, 0.0), 1.0);
#else
    u_xlat18.x = clamp(u_xlat18.x, 0.0, 1.0);
#endif
    u_xlat18.xyz = u_xlat18.xxx * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    u_xlat5.xyz = vec3(u_xlat43) * u_xlat5.xyz;
    u_xlat47 = (-u_xlat4.x) + 1.0;
    u_xlat5.xyz = vec3(u_xlat47) * u_xlat5.xyz;
    u_xlat4.xyz = u_xlat18.xyz * u_xlat4.xxx + u_xlat5.xyz;
    u_xlat43 = (-u_xlat43) + 1.0;
    u_xlat43 = u_xlat47 * u_xlat43;
    u_xlat0.xyz = vec3(u_xlat43) * u_xlat1.xyz + u_xlat4.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "MHY_SHADER_MIDDLE" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	mediump float _MHYZBias;
uniform 	vec4 hlslcc_mtx4x4_mhyJitteredVP[4];
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
out highp vec4 vs_TEXCOORD9;
out highp vec4 vs_TEXCOORD10;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
vec4 u_xlat4;
bool u_xlatb4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
mediump vec4 u_xlat16_6;
vec4 u_xlat7;
mediump vec3 u_xlat16_8;
float u_xlat11;
vec3 u_xlat13;
mediump float u_xlat16_14;
float u_xlat27;
bool u_xlatb27;
float u_xlat29;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4_mhyJitteredVP[1];
    u_xlat2 = hlslcc_mtx4x4_mhyJitteredVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4_mhyJitteredVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4_mhyJitteredVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat3.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    u_xlat3.xyw = u_xlat2.xyw;
    gl_Position = u_xlat3;
    vs_COLOR0 = in_COLOR0;
    u_xlat2.xyw = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat27 = u_xlat2.y * _HeigtFogParams.x;
    u_xlat4.x = u_xlat27 * -1.44269502;
    u_xlat4.x = exp2(u_xlat4.x);
    u_xlat4.x = (-u_xlat4.x) + 1.0;
    u_xlat4.x = u_xlat4.x / u_xlat27;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(0.00999999978<abs(u_xlat27));
#else
    u_xlatb27 = 0.00999999978<abs(u_xlat27);
#endif
    u_xlat16_5.x = (u_xlatb27) ? u_xlat4.x : 1.0;
    u_xlat27 = dot(u_xlat2.xyw, u_xlat2.xyw);
    u_xlat27 = sqrt(u_xlat27);
    u_xlat4.x = u_xlat27 * _HeigtFogParams.y;
    u_xlat16_5.x = u_xlat4.x * u_xlat16_5.x;
    u_xlat16_5.x = exp2((-u_xlat16_5.x));
    u_xlat16_5.x = (-u_xlat16_5.x) + 1.0;
    u_xlat4.x = u_xlat2.y * _HeigtFogParams2.x;
    u_xlat13.x = u_xlat4.x * -1.44269502;
    u_xlat13.x = exp2(u_xlat13.x);
    u_xlat13.x = (-u_xlat13.x) + 1.0;
    u_xlat13.x = u_xlat13.x / u_xlat4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(0.00999999978<abs(u_xlat4.x));
#else
    u_xlatb4 = 0.00999999978<abs(u_xlat4.x);
#endif
    u_xlat16_14 = (u_xlatb4) ? u_xlat13.x : 1.0;
    u_xlat4.x = u_xlat27 * _HeigtFogParams2.y;
    u_xlat16_14 = u_xlat4.x * u_xlat16_14;
    u_xlat16_14 = exp2((-u_xlat16_14));
    u_xlat16_5.y = (-u_xlat16_14) + 1.0;
    u_xlat16_5.xy = max(u_xlat16_5.xy, vec2(0.0, 0.0));
    u_xlat16_5.x = u_xlat16_5.y + u_xlat16_5.x;
    u_xlat4.x = u_xlat27 * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat16_14 = (-u_xlat4.x) + 2.0;
    u_xlat16_14 = u_xlat4.x * u_xlat16_14;
    u_xlat4.x = u_xlat16_14 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat4.x = u_xlat4.x + 1.0;
    u_xlat16_5.x = u_xlat4.x * u_xlat16_5.x;
    u_xlat4.x = min(u_xlat16_5.x, _HeigtFogColBase.w);
    u_xlat13.x = (-u_xlat4.x) + 1.0;
    u_xlat6.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat6.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat6.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat2.x = dot(u_xlat2.xyw, u_xlat6.xyz);
    u_xlat11 = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!((-u_xlat2.x)>=u_xlat11);
#else
    u_xlatb2 = (-u_xlat2.x)>=u_xlat11;
#endif
    u_xlat11 = u_xlat27 * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat11 = min(max(u_xlat11, 0.0), 1.0);
#else
    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
#endif
    u_xlat27 = u_xlat27 + (-_HeigtFogRamp.w);
    u_xlat27 = u_xlat27 * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
    u_xlat29 = (-u_xlat11) + 2.0;
    u_xlat11 = u_xlat29 * u_xlat11;
    u_xlat29 = u_xlat11 * _HeigtFogColDelta.w;
    u_xlat2.x = (u_xlatb2) ? u_xlat29 : u_xlat11;
    u_xlat2.x = log2(u_xlat2.x);
    u_xlat2.x = u_xlat2.x * unity_FogColor.w;
    u_xlat2.x = exp2(u_xlat2.x);
    u_xlat2.x = min(u_xlat2.x, _HeigtFogColBase.w);
    u_xlat11 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat11 = min(max(u_xlat11, 0.0), 1.0);
#else
    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
#endif
    u_xlat16_5.x = (-u_xlat11) + 2.0;
    u_xlat16_5.x = u_xlat11 * u_xlat16_5.x;
    u_xlat6.xyz = u_xlat16_5.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat7.xyz = (-u_xlat6.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat6.xyz = vec3(u_xlat27) * u_xlat7.xyz + u_xlat6.xyz;
    u_xlat6.xyz = u_xlat2.xxx * u_xlat6.xyz;
    u_xlat27 = (-u_xlat2.x) + 1.0;
    vs_TEXCOORD0.w = u_xlat13.x * u_xlat27;
    u_xlat2.xyw = u_xlat13.xxx * u_xlat6.xyz;
    u_xlat27 = u_xlat0.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
    u_xlat13.xyz = vec3(u_xlat27) * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    vs_TEXCOORD0.xyz = u_xlat13.xyz * u_xlat4.xxx + u_xlat2.xyw;
    u_xlat4.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat4.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat4.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat27 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat4.xyz = vec3(u_xlat27) * u_xlat4.xyz;
    u_xlat16_5.x = u_xlat4.y * u_xlat4.y;
    u_xlat16_5.x = u_xlat4.x * u_xlat4.x + (-u_xlat16_5.x);
    u_xlat16_6 = u_xlat4.yzzx * u_xlat4.xyzz;
    u_xlat16_8.x = dot(unity_SHBr, u_xlat16_6);
    u_xlat16_8.y = dot(unity_SHBg, u_xlat16_6);
    u_xlat16_8.z = dot(unity_SHBb, u_xlat16_6);
    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_8.xyz;
    u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat4.w = 1.0;
    u_xlat16_8.x = dot(unity_SHAr, u_xlat4);
    u_xlat16_8.y = dot(unity_SHAg, u_xlat4);
    u_xlat16_8.z = dot(unity_SHAb, u_xlat4);
    u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_8.xyz;
    vs_TEXCOORD1.xyz = u_xlat16_5.xyz;
    vs_TEXCOORD1.w = 1.0;
    u_xlat27 = u_xlat3.y * _ProjectionParams.x;
    u_xlat7.w = u_xlat27 * 0.5;
    u_xlat7.xz = u_xlat3.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.z = u_xlat2.z;
    u_xlat3.xy = u_xlat7.zz + u_xlat7.xw;
    vs_TEXCOORD2 = u_xlat3;
    vs_TEXCOORD4.xyw = u_xlat3.xyw;
    u_xlat27 = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat27 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat27;
    u_xlat27 = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat27;
    u_xlat27 = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat27;
    vs_TEXCOORD3.z = (-u_xlat27);
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD3.w = 0.0;
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD5.w = 0.0;
    vs_TEXCOORD6.xyz = u_xlat4.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[1].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].www + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * in_POSITION0.yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.zzz + u_xlat1.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.www + u_xlat1.xyz;
    vs_TEXCOORD7.xyz = u_xlat1.xyz * vec3(-1.0, -1.0, 1.0);
    vs_TEXCOORD7.w = 0.0;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat27 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat1.xyz = vec3(u_xlat27) * u_xlat1.xyz;
    vs_TEXCOORD8.xyz = u_xlat1.xyz;
    vs_TEXCOORD8.w = 0.0;
    u_xlat2.xyz = u_xlat1.yzx * u_xlat4.zxy;
    u_xlat1.xyz = u_xlat4.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
    u_xlat27 = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD9.xyz = vec3(u_xlat27) * u_xlat1.xyz;
    vs_TEXCOORD9.w = 0.0;
    u_xlat27 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat27 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat27;
    vs_TEXCOORD10.w = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat27;
    vs_TEXCOORD10.xyz = u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _NormalMapScale;
uniform 	float _Normal01_U_Speed;
uniform 	float _Normal01_VSpeed;
uniform 	float _NormalMapBias;
uniform 	float _Normal02_U_Speed;
uniform 	float _Normal02_V_Speed;
uniform 	float _RefractionIntensity;
uniform 	float _OpacityByDepth;
uniform 	float _SpecularIntensity;
uniform 	vec3 _ES_MoonDirection;
uniform 	vec3 _ES_SunDirection;
uniform 	float _Gloss;
uniform 	float _ShoreTransparency;
uniform 	float _SpecularPower;
uniform 	vec4 _ShallowColor;
uniform 	float _ShoreFade;
uniform 	vec4 _DeepColor;
uniform 	float _DeepColorDepth;
uniform 	float _DeepColorFade;
uniform 	vec4 _DistortionIntensity;
uniform 	float _SSRDistortion;
uniform 	float _SSRDistortion_Shore;
uniform 	float _SSRIntensity;
uniform 	float _ReflectionIntensity;
uniform 	float _FresnelPower;
uniform 	float _ShoreReflectionFade;
uniform 	mediump float _ProjectUVScale;
uniform 	vec4 _ReflectionSkyCubeMap_HDR;
uniform lowp sampler2D _Normal01;
uniform lowp sampler2D _Normal02;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _SceneScaledBufferBeforTransParent;
uniform lowp samplerCube _ReflectionSkyCubeMap;
uniform lowp sampler2D _SSRTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD8;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
lowp vec4 u_xlat10_3;
vec3 u_xlat4;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
mediump vec3 u_xlat16_7;
lowp vec3 u_xlat10_8;
vec3 u_xlat9;
vec3 u_xlat10;
vec3 u_xlat11;
vec3 u_xlat12;
vec3 u_xlat13;
vec2 u_xlat15;
mediump vec3 u_xlat16_16;
vec3 u_xlat18;
bool u_xlatb18;
vec3 u_xlat19;
vec2 u_xlat29;
float u_xlat32;
float u_xlat43;
bool u_xlatb43;
float u_xlat46;
bool u_xlatb46;
float u_xlat47;
bool u_xlatb47;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD5.zx * vec2(vec2(_ProjectUVScale, _ProjectUVScale));
    u_xlat1.x = _Time.y * _Normal01_U_Speed + u_xlat0.y;
    u_xlat1.yz = _Time.yy * vec2(_Normal01_VSpeed, _Normal02_U_Speed) + u_xlat0.xy;
    u_xlat1.w = _Time.y * _Normal02_V_Speed + u_xlat0.x;
    u_xlat10_0.xyz = texture(_Normal01, u_xlat1.xy, _NormalMapBias).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_2.xy = u_xlat16_0.xy * vec2(_NormalMapScale);
    u_xlat10_1.xyz = texture(_Normal02, u_xlat1.zw, _NormalMapBias).xyz;
    u_xlat16_0.w = -1.0;
    u_xlat16_3.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.wwz;
    u_xlat16_3.xy = u_xlat16_3.xy * vec2(_NormalMapScale);
    u_xlat16_2.z = -1.0;
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
    u_xlat1.x = float(1.0) / vs_TEXCOORD4.w;
    u_xlat15.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat15.x = texture(_CameraDepthTexture, u_xlat15.xy).x;
    u_xlat15.x = _ZBufferParams.z * u_xlat15.x + _ZBufferParams.w;
    u_xlat15.x = float(1.0) / u_xlat15.x;
    u_xlat29.xy = u_xlat16_2.xy * vec2(vec2(_RefractionIntensity, _RefractionIntensity));
    u_xlat1.x = u_xlat1.x * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.xz = u_xlat1.xx * u_xlat29.xy;
    u_xlat1.xz = u_xlat1.xz * vs_TEXCOORD4.ww;
    u_xlat15.x = u_xlat15.x + (-vs_TEXCOORD4.w);
#ifdef UNITY_ADRENO_ES3
    u_xlat15.x = min(max(u_xlat15.x, 0.0), 1.0);
#else
    u_xlat15.x = clamp(u_xlat15.x, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat15.xx * u_xlat1.xz;
    u_xlat1.z = 0.0;
    u_xlat4.xyz = u_xlat1.xyz + vs_TEXCOORD4.xyw;
    u_xlat4.xy = u_xlat4.xy / u_xlat4.zz;
    u_xlat43 = texture(_CameraDepthTexture, u_xlat4.xy).x;
    u_xlat43 = _ZBufferParams.z * u_xlat43 + _ZBufferParams.w;
    u_xlat43 = float(1.0) / u_xlat43;
    u_xlat43 = u_xlat43 + (-vs_TEXCOORD4.w);
#ifdef UNITY_ADRENO_ES3
    u_xlat43 = min(max(u_xlat43, 0.0), 1.0);
#else
    u_xlat43 = clamp(u_xlat43, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat43) * u_xlat1.xyz + vs_TEXCOORD4.xyw;
    u_xlat29.xy = u_xlat1.xy / u_xlat1.zz;
    u_xlat29.x = texture(_CameraDepthTexture, u_xlat29.xy).x;
    u_xlat29.x = _ZBufferParams.z * u_xlat29.x + _ZBufferParams.w;
    u_xlat29.x = float(1.0) / u_xlat29.x;
    u_xlat29.x = u_xlat29.x + (-vs_TEXCOORD4.w);
    u_xlat1.w = 0.100000001 / _OpacityByDepth;
    u_xlat16_3.xz = u_xlat16_2.xy;
    u_xlat16_3.y = 1.0;
    u_xlat16_4.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
    u_xlat16_4.x = inversesqrt(u_xlat16_4.x);
    u_xlat16_4.xyz = u_xlat16_3.xyz * u_xlat16_4.xxx;
#ifdef UNITY_ADRENO_ES3
    u_xlatb46 = !!(0.0>=_ES_MoonDirection.y);
#else
    u_xlatb46 = 0.0>=_ES_MoonDirection.y;
#endif
    u_xlat5.xyz = (bool(u_xlatb46)) ? _ES_SunDirection.xyz : _ES_MoonDirection.xyz;
    u_xlat6.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat46 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat46 = inversesqrt(u_xlat46);
    u_xlat7.xyz = vec3(u_xlat46) * u_xlat6.xyz;
    u_xlat5.xyz = u_xlat6.xyz * vec3(u_xlat46) + u_xlat5.xyz;
    u_xlat46 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat46 = inversesqrt(u_xlat46);
    u_xlat5.xyz = vec3(u_xlat46) * u_xlat5.xyz;
    u_xlat4.x = dot(u_xlat16_4.xyz, u_xlat5.xyz);
    u_xlat18.x = _Gloss * 128.0;
    u_xlat4.x = max(u_xlat4.x, 9.99999975e-05);
    u_xlat4.x = log2(u_xlat4.x);
    u_xlat4.x = u_xlat4.x * u_xlat18.x;
    u_xlat4.x = exp2(u_xlat4.x);
    u_xlat4.x = u_xlat4.x * _SpecularIntensity;
    u_xlat4.x = max(u_xlat4.x, 0.0);
    u_xlat4.x = min(u_xlat4.x, 16.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_ES_MoonDirection.y>=9.99999975e-05);
#else
    u_xlatb18 = _ES_MoonDirection.y>=9.99999975e-05;
#endif
    u_xlat18.x = u_xlatb18 ? 1.0 : float(0.0);
    u_xlat32 = _ES_MoonDirection.y + -1.0;
    u_xlat18.x = u_xlat18.x * u_xlat32 + 1.0;
    u_xlat32 = float(1.0) / _ShoreTransparency;
    u_xlat46 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat46 = inversesqrt(u_xlat46);
    u_xlat5.xyz = vec3(u_xlat46) * vs_TEXCOORD6.xyz;
    u_xlat46 = dot(u_xlat7.xyz, u_xlat5.xyz);
    u_xlat46 = (-u_xlat46) + 1.0;
    u_xlat46 = max(u_xlat46, 9.99999975e-05);
    u_xlat46 = log2(u_xlat46);
    u_xlat5.x = u_xlat46 * _SpecularPower;
    u_xlat5.x = exp2(u_xlat5.x);
    u_xlat19.xyz = u_xlat18.xxx * _LightColor0.xyz;
    u_xlat19.xyz = u_xlat4.xxx * u_xlat19.xyz;
    u_xlat4.x = u_xlat29.x + -1.0;
    u_xlat4.x = u_xlat32 * u_xlat4.x;
    u_xlat4.x = u_xlat4.x * 0.100000001;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat19.xyz = u_xlat4.xxx * u_xlat19.xyz;
    u_xlat4.x = u_xlat29.x * u_xlat32;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat4.x = max(u_xlat4.x, 9.99999975e-05);
    u_xlat4.x = log2(u_xlat4.x);
    u_xlat4.x = u_xlat4.x * _ShoreFade;
    u_xlat4.x = exp2(u_xlat4.x);
    u_xlat6.xyz = _ShallowColor.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat6.xyz = u_xlat4.xxx * u_xlat6.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat1.xy = u_xlat1.xy / vs_TEXCOORD4.ww;
    u_xlat10_8.xyz = texture(_SceneScaledBufferBeforTransParent, u_xlat1.xy).xyz;
    u_xlat9.xyz = u_xlat6.xyz * u_xlat10_8.xyz;
    u_xlat1.x = 0.100000001 / _DeepColorDepth;
    u_xlat1.xw = u_xlat1.xw * u_xlat29.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xw = min(max(u_xlat1.xw, 0.0), 1.0);
#else
    u_xlat1.xw = clamp(u_xlat1.xw, 0.0, 1.0);
#endif
    u_xlat1.x = max(u_xlat1.x, 9.99999975e-05);
    u_xlat1.x = log2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _DeepColorFade;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat10.xyz = (-u_xlat6.xyz) * u_xlat10_8.xyz + _DeepColor.xyz;
    u_xlat10.xyz = u_xlat1.xxx * u_xlat10.xyz + u_xlat9.xyz;
    u_xlat11.xyz = u_xlat16_2.xyz * _DistortionIntensity.xyz;
    u_xlat12.x = vs_TEXCOORD8.x;
    u_xlat12.y = vs_TEXCOORD9.x;
    u_xlat12.z = vs_TEXCOORD6.x;
    u_xlat12.x = dot(u_xlat12.xyz, u_xlat11.xyz);
    u_xlat13.x = vs_TEXCOORD8.y;
    u_xlat13.y = vs_TEXCOORD9.y;
    u_xlat13.z = vs_TEXCOORD6.y;
    u_xlat12.y = dot(u_xlat13.xyz, u_xlat11.xyz);
    u_xlat13.x = vs_TEXCOORD8.z;
    u_xlat13.y = vs_TEXCOORD9.z;
    u_xlat13.z = vs_TEXCOORD6.z;
    u_xlat12.z = dot(u_xlat13.xyz, u_xlat11.xyz);
    u_xlat1.x = dot(u_xlat12.xyz, u_xlat12.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat12.xyz = u_xlat1.xxx * u_xlat12.xyz;
    u_xlat1.x = dot((-u_xlat7.xyz), u_xlat12.xyz);
    u_xlat1.x = u_xlat1.x + u_xlat1.x;
    u_xlat7.xyz = u_xlat12.xyz * (-u_xlat1.xxx) + (-u_xlat7.xyz);
    u_xlat10_0 = textureLod(_ReflectionSkyCubeMap, u_xlat7.xyz, 0.0);
    u_xlat16_2.x = u_xlat10_0.w + -1.0;
    u_xlat16_2.x = _ReflectionSkyCubeMap_HDR.w * u_xlat16_2.x + 1.0;
    u_xlat16_2.x = log2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * _ReflectionSkyCubeMap_HDR.y;
    u_xlat16_2.x = exp2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * _ReflectionSkyCubeMap_HDR.x;
    u_xlat16_16.xyz = u_xlat10_0.xyz * u_xlat16_2.xxx;
    u_xlat1.xy = u_xlat11.xy * vec2(_SSRDistortion);
    u_xlat18.x = float(1.0) / _SSRDistortion_Shore;
    u_xlat18.x = u_xlat29.x * u_xlat18.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat18.x = min(max(u_xlat18.x, 0.0), 1.0);
#else
    u_xlat18.x = clamp(u_xlat18.x, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat1.xy * u_xlat18.xx;
    u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD4.ww + vs_TEXCOORD4.xy;
    u_xlat1.xy = u_xlat1.xy / vs_TEXCOORD4.ww;
    u_xlat10_3 = texture(_SSRTexture, u_xlat1.xy).wxyz;
    u_xlat16_7.xyz = (-u_xlat16_2.xxx) * u_xlat10_0.xyz + u_xlat10_3.yzw;
    u_xlat7.xyz = u_xlat16_7.xyz * vec3(vec3(_SSRIntensity, _SSRIntensity, _SSRIntensity));
    u_xlat16_3.x = u_xlat10_3.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat7.xyz = u_xlat16_3.xxx * u_xlat7.xyz + u_xlat16_16.xyz;
    u_xlat1.x = u_xlat46 * _FresnelPower;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _ReflectionIntensity;
    u_xlat15.x = float(1.0) / _ShoreReflectionFade;
    u_xlat15.x = u_xlat15.x * u_xlat29.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat15.x = min(max(u_xlat15.x, 0.0), 1.0);
#else
    u_xlat15.x = clamp(u_xlat15.x, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat15.x * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat18.xyz = (-u_xlat10.xyz) + u_xlat7.xyz;
    u_xlat1.xyz = u_xlat1.xxx * u_xlat18.xyz + u_xlat10.xyz;
    u_xlat1.xyz = (-u_xlat6.xyz) * u_xlat10_8.xyz + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat4.xxx * u_xlat1.xyz + u_xlat9.xyz;
    u_xlat1.xyz = u_xlat19.xyz * u_xlat5.xxx + u_xlat1.xyz;
    u_xlat0.w = u_xlat1.w * vs_COLOR0.w;
    u_xlat4.xyz = vs_TEXCOORD5.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat5.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat5.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat5.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat43 = dot(u_xlat4.xyz, u_xlat5.xyz);
    u_xlat4.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat4.x = sqrt(u_xlat4.x);
    u_xlat18.y = u_xlat4.x * _HeigtFogParams.y;
    u_xlat46 = u_xlat4.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat46 = min(max(u_xlat46, 0.0), 1.0);
#else
    u_xlat46 = clamp(u_xlat46, 0.0, 1.0);
#endif
    u_xlat5.x = (-u_xlat46) + 2.0;
    u_xlat46 = u_xlat46 * u_xlat5.x;
    u_xlat5.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb43 = !!((-u_xlat43)>=u_xlat5.x);
#else
    u_xlatb43 = (-u_xlat43)>=u_xlat5.x;
#endif
    u_xlat5.x = u_xlat46 * _HeigtFogColDelta.w;
    u_xlat43 = (u_xlatb43) ? u_xlat5.x : u_xlat46;
    u_xlat43 = log2(u_xlat43);
    u_xlat43 = u_xlat43 * unity_FogColor.w;
    u_xlat43 = exp2(u_xlat43);
    u_xlat43 = min(u_xlat43, _HeigtFogColBase.w);
    u_xlat46 = vs_TEXCOORD5.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat46 = min(max(u_xlat46, 0.0), 1.0);
#else
    u_xlat46 = clamp(u_xlat46, 0.0, 1.0);
#endif
    u_xlat16_2.x = (-u_xlat46) + 2.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat46;
    u_xlat5.xyz = u_xlat16_2.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat46 = u_xlat4.x + (-_HeigtFogRamp.w);
    u_xlat46 = u_xlat46 * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat46 = min(max(u_xlat46, 0.0), 1.0);
#else
    u_xlat46 = clamp(u_xlat46, 0.0, 1.0);
#endif
    u_xlat6.xyz = (-u_xlat5.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat5.xyz = vec3(u_xlat46) * u_xlat6.xyz + u_xlat5.xyz;
    u_xlat46 = u_xlat4.y * _HeigtFogParams.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb47 = !!(0.00999999978<abs(u_xlat46));
#else
    u_xlatb47 = 0.00999999978<abs(u_xlat46);
#endif
    u_xlat6.x = u_xlat46 * -1.44269502;
    u_xlat6.x = exp2(u_xlat6.x);
    u_xlat6.x = (-u_xlat6.x) + 1.0;
    u_xlat46 = u_xlat6.x / u_xlat46;
    u_xlat16_2.x = (u_xlatb47) ? u_xlat46 : 1.0;
    u_xlat18.x = u_xlat4.y * _HeigtFogParams2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb46 = !!(0.00999999978<abs(u_xlat18.x));
#else
    u_xlatb46 = 0.00999999978<abs(u_xlat18.x);
#endif
    u_xlat47 = u_xlat18.x * -1.44269502;
    u_xlat47 = exp2(u_xlat47);
    u_xlat47 = (-u_xlat47) + 1.0;
    u_xlat18.x = u_xlat47 / u_xlat18.x;
    u_xlat16_2.y = (u_xlatb46) ? u_xlat18.x : 1.0;
    u_xlat18.x = u_xlat4.x * _HeigtFogParams2.y;
    u_xlat16_2.xy = u_xlat16_2.xy * u_xlat18.yx;
    u_xlat16_2.x = exp2((-u_xlat16_2.x));
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_16.x = exp2((-u_xlat16_2.y));
    u_xlat16_2.y = (-u_xlat16_16.x) + 1.0;
    u_xlat16_2.xy = max(u_xlat16_2.xy, vec2(0.0, 0.0));
    u_xlat16_2.x = u_xlat16_2.y + u_xlat16_2.x;
    u_xlat4.x = u_xlat4.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat16_16.x = (-u_xlat4.x) + 2.0;
    u_xlat16_16.x = u_xlat16_16.x * u_xlat4.x;
    u_xlat4.x = u_xlat16_16.x * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat4.x = u_xlat4.x + 1.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat4.x;
    u_xlat4.x = min(u_xlat16_2.x, _HeigtFogColBase.w);
    u_xlat18.x = vs_TEXCOORD5.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat18.x = min(max(u_xlat18.x, 0.0), 1.0);
#else
    u_xlat18.x = clamp(u_xlat18.x, 0.0, 1.0);
#endif
    u_xlat18.xyz = u_xlat18.xxx * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    u_xlat5.xyz = vec3(u_xlat43) * u_xlat5.xyz;
    u_xlat47 = (-u_xlat4.x) + 1.0;
    u_xlat5.xyz = vec3(u_xlat47) * u_xlat5.xyz;
    u_xlat4.xyz = u_xlat18.xyz * u_xlat4.xxx + u_xlat5.xyz;
    u_xlat43 = (-u_xlat43) + 1.0;
    u_xlat43 = u_xlat47 * u_xlat43;
    u_xlat0.xyz = vec3(u_xlat43) * u_xlat1.xyz + u_xlat4.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "MHY_SHADER_MIDDLE" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	mediump float _MHYZBias;
uniform 	vec4 hlslcc_mtx4x4_mhyJitteredVP[4];
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
out highp vec4 vs_TEXCOORD9;
out highp vec4 vs_TEXCOORD10;
float u_xlat0;
int u_xlati0;
vec4 u_xlat1;
bool u_xlatb1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
bool u_xlatb4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
mediump vec4 u_xlat16_6;
vec4 u_xlat7;
mediump vec3 u_xlat16_8;
vec3 u_xlat9;
float u_xlat10;
float u_xlat13;
bool u_xlatb13;
mediump float u_xlat16_14;
float u_xlat22;
float u_xlat28;
float u_xlat31;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat9.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4_mhyJitteredVP[1];
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[3] * u_xlat2.wwww + u_xlat1;
    u_xlat3.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    u_xlat3.xyw = u_xlat1.xyw;
    gl_Position = u_xlat3;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.xyw = u_xlat9.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat4.x = u_xlat1.y * _HeigtFogParams.x;
    u_xlat13 = u_xlat4.x * -1.44269502;
    u_xlat13 = exp2(u_xlat13);
    u_xlat13 = (-u_xlat13) + 1.0;
    u_xlat13 = u_xlat13 / u_xlat4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(0.00999999978<abs(u_xlat4.x));
#else
    u_xlatb4 = 0.00999999978<abs(u_xlat4.x);
#endif
    u_xlat16_5.x = (u_xlatb4) ? u_xlat13 : 1.0;
    u_xlat4.x = dot(u_xlat1.xyw, u_xlat1.xyw);
    u_xlat4.x = sqrt(u_xlat4.x);
    u_xlat13 = u_xlat4.x * _HeigtFogParams.y;
    u_xlat16_5.x = u_xlat13 * u_xlat16_5.x;
    u_xlat16_5.x = exp2((-u_xlat16_5.x));
    u_xlat16_5.x = (-u_xlat16_5.x) + 1.0;
    u_xlat13 = u_xlat1.y * _HeigtFogParams2.x;
    u_xlat22 = u_xlat13 * -1.44269502;
    u_xlat22 = exp2(u_xlat22);
    u_xlat22 = (-u_xlat22) + 1.0;
    u_xlat22 = u_xlat22 / u_xlat13;
#ifdef UNITY_ADRENO_ES3
    u_xlatb13 = !!(0.00999999978<abs(u_xlat13));
#else
    u_xlatb13 = 0.00999999978<abs(u_xlat13);
#endif
    u_xlat16_14 = (u_xlatb13) ? u_xlat22 : 1.0;
    u_xlat13 = u_xlat4.x * _HeigtFogParams2.y;
    u_xlat16_14 = u_xlat13 * u_xlat16_14;
    u_xlat16_14 = exp2((-u_xlat16_14));
    u_xlat16_5.y = (-u_xlat16_14) + 1.0;
    u_xlat16_5.xy = max(u_xlat16_5.xy, vec2(0.0, 0.0));
    u_xlat16_5.x = u_xlat16_5.y + u_xlat16_5.x;
    u_xlat13 = u_xlat4.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat13 = min(max(u_xlat13, 0.0), 1.0);
#else
    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
#endif
    u_xlat16_14 = (-u_xlat13) + 2.0;
    u_xlat16_14 = u_xlat13 * u_xlat16_14;
    u_xlat13 = u_xlat16_14 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat13 = u_xlat13 + 1.0;
    u_xlat16_5.x = u_xlat13 * u_xlat16_5.x;
    u_xlat13 = min(u_xlat16_5.x, _HeigtFogColBase.w);
    u_xlat22 = (-u_xlat13) + 1.0;
    u_xlat31 = _ProjectionParams.z * 0.999899983;
    u_xlat6.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat6.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat6.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat1.x = dot(u_xlat1.xyw, u_xlat6.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!((-u_xlat1.x)>=u_xlat31);
#else
    u_xlatb1 = (-u_xlat1.x)>=u_xlat31;
#endif
    u_xlat10 = u_xlat4.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat10 = min(max(u_xlat10, 0.0), 1.0);
#else
    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
#endif
    u_xlat28 = u_xlat4.x + (-_HeigtFogRamp.w);
    u_xlat28 = u_xlat28 * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat28 = min(max(u_xlat28, 0.0), 1.0);
#else
    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
#endif
    u_xlat4.x = (-u_xlat10) + 2.0;
    u_xlat10 = u_xlat10 * u_xlat4.x;
    u_xlat4.x = u_xlat10 * _HeigtFogColDelta.w;
    u_xlat1.x = (u_xlatb1) ? u_xlat4.x : u_xlat10;
    u_xlat1.x = log2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * unity_FogColor.w;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat1.x = min(u_xlat1.x, _HeigtFogColBase.w);
    u_xlat10 = u_xlat9.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat10 = min(max(u_xlat10, 0.0), 1.0);
#else
    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
#endif
    u_xlat16_5.x = (-u_xlat10) + 2.0;
    u_xlat16_5.x = u_xlat10 * u_xlat16_5.x;
    u_xlat6.xyz = u_xlat16_5.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat7.xyz = (-u_xlat6.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat6.xyz = vec3(u_xlat28) * u_xlat7.xyz + u_xlat6.xyz;
    u_xlat6.xyz = u_xlat1.xxx * u_xlat6.xyz;
    u_xlat1.x = (-u_xlat1.x) + 1.0;
    vs_TEXCOORD0.w = u_xlat22 * u_xlat1.x;
    u_xlat1.xyw = vec3(u_xlat22) * u_xlat6.xyz;
    u_xlat4.x = u_xlat9.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat4.xzw = u_xlat4.xxx * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    vs_TEXCOORD0.xyz = u_xlat4.xzw * vec3(u_xlat13) + u_xlat1.xyw;
    vs_TEXCOORD1.w = 1.0;
    u_xlat4.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat4.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat4.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat1.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
    u_xlat16_5.x = u_xlat4.y * u_xlat4.y;
    u_xlat16_5.x = u_xlat4.x * u_xlat4.x + (-u_xlat16_5.x);
    u_xlat16_6 = u_xlat4.yzzx * u_xlat4.xyzz;
    u_xlat16_8.x = dot(unity_SHBr, u_xlat16_6);
    u_xlat16_8.y = dot(unity_SHBg, u_xlat16_6);
    u_xlat16_8.z = dot(unity_SHBb, u_xlat16_6);
    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_8.xyz;
    u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat4.w = 1.0;
    u_xlat16_8.x = dot(unity_SHAr, u_xlat4);
    u_xlat16_8.y = dot(unity_SHAg, u_xlat4);
    u_xlat16_8.z = dot(unity_SHAb, u_xlat4);
    u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_8.xyz;
    vs_TEXCOORD1.xyz = u_xlat16_5.xyz;
    u_xlat1.x = u_xlat3.y * _ProjectionParams.x;
    u_xlat7.w = u_xlat1.x * 0.5;
    u_xlat7.xz = u_xlat3.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.z = u_xlat1.z;
    u_xlat3.xy = u_xlat7.zz + u_xlat7.xw;
    vs_TEXCOORD2 = u_xlat3;
    vs_TEXCOORD4.xyw = u_xlat3.xyw;
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD3.w = 0.0;
    u_xlat1.x = u_xlat2.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat2.x + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat2.z + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat2.w + u_xlat1.x;
    vs_TEXCOORD3.z = (-u_xlat1.x);
    vs_TEXCOORD5.w = 0.0;
    vs_TEXCOORD5.xyz = u_xlat9.xyz;
    u_xlat9.xyz = (-u_xlat9.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD6.w = 0.0;
    vs_TEXCOORD6.xyz = u_xlat4.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].www + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * in_POSITION0.yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.zzz + u_xlat1.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.www + u_xlat1.xyz;
    vs_TEXCOORD7.xyz = u_xlat1.xyz * vec3(-1.0, -1.0, 1.0);
    vs_TEXCOORD7.w = 0.0;
    u_xlat1.xyz = in_TANGENT0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat0 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0 = inversesqrt(u_xlat0);
    u_xlat1.xyz = vec3(u_xlat0) * u_xlat1.xyz;
    vs_TEXCOORD8.xyz = u_xlat1.xyz;
    vs_TEXCOORD8.w = 0.0;
    u_xlat2.xyz = u_xlat1.yzx * u_xlat4.zxy;
    u_xlat1.xyz = u_xlat4.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
    u_xlat0 = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD9.xyz = vec3(u_xlat0) * u_xlat1.xyz;
    vs_TEXCOORD9.w = 0.0;
    u_xlat0 = u_xlat9.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat9.x + u_xlat0;
    vs_TEXCOORD10.w = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat9.z + u_xlat0;
    vs_TEXCOORD10.xyz = u_xlat9.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _NormalMapScale;
uniform 	float _Normal01_U_Speed;
uniform 	float _Normal01_VSpeed;
uniform 	float _NormalMapBias;
uniform 	float _Normal02_U_Speed;
uniform 	float _Normal02_V_Speed;
uniform 	float _RefractionIntensity;
uniform 	float _OpacityByDepth;
uniform 	float _SpecularIntensity;
uniform 	vec3 _ES_MoonDirection;
uniform 	vec3 _ES_SunDirection;
uniform 	float _Gloss;
uniform 	float _ShoreTransparency;
uniform 	float _SpecularPower;
uniform 	vec4 _ShallowColor;
uniform 	float _ShoreFade;
uniform 	vec4 _DeepColor;
uniform 	float _DeepColorDepth;
uniform 	float _DeepColorFade;
uniform 	vec4 _DistortionIntensity;
uniform 	float _SSRDistortion;
uniform 	float _SSRDistortion_Shore;
uniform 	float _SSRIntensity;
uniform 	float _ReflectionIntensity;
uniform 	float _FresnelPower;
uniform 	float _ShoreReflectionFade;
uniform 	mediump float _ProjectUVScale;
uniform 	vec4 _ReflectionSkyCubeMap_HDR;
uniform lowp sampler2D _Normal01;
uniform lowp sampler2D _Normal02;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _SceneScaledBufferBeforTransParent;
uniform lowp samplerCube _ReflectionSkyCubeMap;
uniform lowp sampler2D _SSRTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD8;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
lowp vec4 u_xlat10_3;
vec3 u_xlat4;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
mediump vec3 u_xlat16_7;
lowp vec3 u_xlat10_8;
vec3 u_xlat9;
vec3 u_xlat10;
vec3 u_xlat11;
vec3 u_xlat12;
vec3 u_xlat13;
vec2 u_xlat15;
mediump vec3 u_xlat16_16;
vec3 u_xlat18;
bool u_xlatb18;
vec3 u_xlat19;
vec2 u_xlat29;
float u_xlat32;
float u_xlat43;
bool u_xlatb43;
float u_xlat46;
bool u_xlatb46;
float u_xlat47;
bool u_xlatb47;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD5.zx * vec2(vec2(_ProjectUVScale, _ProjectUVScale));
    u_xlat1.x = _Time.y * _Normal01_U_Speed + u_xlat0.y;
    u_xlat1.yz = _Time.yy * vec2(_Normal01_VSpeed, _Normal02_U_Speed) + u_xlat0.xy;
    u_xlat1.w = _Time.y * _Normal02_V_Speed + u_xlat0.x;
    u_xlat10_0.xyz = texture(_Normal01, u_xlat1.xy, _NormalMapBias).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_2.xy = u_xlat16_0.xy * vec2(_NormalMapScale);
    u_xlat10_1.xyz = texture(_Normal02, u_xlat1.zw, _NormalMapBias).xyz;
    u_xlat16_0.w = -1.0;
    u_xlat16_3.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.wwz;
    u_xlat16_3.xy = u_xlat16_3.xy * vec2(_NormalMapScale);
    u_xlat16_2.z = -1.0;
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
    u_xlat1.x = float(1.0) / vs_TEXCOORD4.w;
    u_xlat15.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat15.x = texture(_CameraDepthTexture, u_xlat15.xy).x;
    u_xlat15.x = _ZBufferParams.z * u_xlat15.x + _ZBufferParams.w;
    u_xlat15.x = float(1.0) / u_xlat15.x;
    u_xlat29.xy = u_xlat16_2.xy * vec2(vec2(_RefractionIntensity, _RefractionIntensity));
    u_xlat1.x = u_xlat1.x * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.xz = u_xlat1.xx * u_xlat29.xy;
    u_xlat1.xz = u_xlat1.xz * vs_TEXCOORD4.ww;
    u_xlat15.x = u_xlat15.x + (-vs_TEXCOORD4.w);
#ifdef UNITY_ADRENO_ES3
    u_xlat15.x = min(max(u_xlat15.x, 0.0), 1.0);
#else
    u_xlat15.x = clamp(u_xlat15.x, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat15.xx * u_xlat1.xz;
    u_xlat1.z = 0.0;
    u_xlat4.xyz = u_xlat1.xyz + vs_TEXCOORD4.xyw;
    u_xlat4.xy = u_xlat4.xy / u_xlat4.zz;
    u_xlat43 = texture(_CameraDepthTexture, u_xlat4.xy).x;
    u_xlat43 = _ZBufferParams.z * u_xlat43 + _ZBufferParams.w;
    u_xlat43 = float(1.0) / u_xlat43;
    u_xlat43 = u_xlat43 + (-vs_TEXCOORD4.w);
#ifdef UNITY_ADRENO_ES3
    u_xlat43 = min(max(u_xlat43, 0.0), 1.0);
#else
    u_xlat43 = clamp(u_xlat43, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat43) * u_xlat1.xyz + vs_TEXCOORD4.xyw;
    u_xlat29.xy = u_xlat1.xy / u_xlat1.zz;
    u_xlat29.x = texture(_CameraDepthTexture, u_xlat29.xy).x;
    u_xlat29.x = _ZBufferParams.z * u_xlat29.x + _ZBufferParams.w;
    u_xlat29.x = float(1.0) / u_xlat29.x;
    u_xlat29.x = u_xlat29.x + (-vs_TEXCOORD4.w);
    u_xlat1.w = 0.100000001 / _OpacityByDepth;
    u_xlat16_3.xz = u_xlat16_2.xy;
    u_xlat16_3.y = 1.0;
    u_xlat16_4.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
    u_xlat16_4.x = inversesqrt(u_xlat16_4.x);
    u_xlat16_4.xyz = u_xlat16_3.xyz * u_xlat16_4.xxx;
#ifdef UNITY_ADRENO_ES3
    u_xlatb46 = !!(0.0>=_ES_MoonDirection.y);
#else
    u_xlatb46 = 0.0>=_ES_MoonDirection.y;
#endif
    u_xlat5.xyz = (bool(u_xlatb46)) ? _ES_SunDirection.xyz : _ES_MoonDirection.xyz;
    u_xlat6.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat46 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat46 = inversesqrt(u_xlat46);
    u_xlat7.xyz = vec3(u_xlat46) * u_xlat6.xyz;
    u_xlat5.xyz = u_xlat6.xyz * vec3(u_xlat46) + u_xlat5.xyz;
    u_xlat46 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat46 = inversesqrt(u_xlat46);
    u_xlat5.xyz = vec3(u_xlat46) * u_xlat5.xyz;
    u_xlat4.x = dot(u_xlat16_4.xyz, u_xlat5.xyz);
    u_xlat18.x = _Gloss * 128.0;
    u_xlat4.x = max(u_xlat4.x, 9.99999975e-05);
    u_xlat4.x = log2(u_xlat4.x);
    u_xlat4.x = u_xlat4.x * u_xlat18.x;
    u_xlat4.x = exp2(u_xlat4.x);
    u_xlat4.x = u_xlat4.x * _SpecularIntensity;
    u_xlat4.x = max(u_xlat4.x, 0.0);
    u_xlat4.x = min(u_xlat4.x, 16.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_ES_MoonDirection.y>=9.99999975e-05);
#else
    u_xlatb18 = _ES_MoonDirection.y>=9.99999975e-05;
#endif
    u_xlat18.x = u_xlatb18 ? 1.0 : float(0.0);
    u_xlat32 = _ES_MoonDirection.y + -1.0;
    u_xlat18.x = u_xlat18.x * u_xlat32 + 1.0;
    u_xlat32 = float(1.0) / _ShoreTransparency;
    u_xlat46 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat46 = inversesqrt(u_xlat46);
    u_xlat5.xyz = vec3(u_xlat46) * vs_TEXCOORD6.xyz;
    u_xlat46 = dot(u_xlat7.xyz, u_xlat5.xyz);
    u_xlat46 = (-u_xlat46) + 1.0;
    u_xlat46 = max(u_xlat46, 9.99999975e-05);
    u_xlat46 = log2(u_xlat46);
    u_xlat5.x = u_xlat46 * _SpecularPower;
    u_xlat5.x = exp2(u_xlat5.x);
    u_xlat19.xyz = u_xlat18.xxx * _LightColor0.xyz;
    u_xlat19.xyz = u_xlat4.xxx * u_xlat19.xyz;
    u_xlat4.x = u_xlat29.x + -1.0;
    u_xlat4.x = u_xlat32 * u_xlat4.x;
    u_xlat4.x = u_xlat4.x * 0.100000001;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat19.xyz = u_xlat4.xxx * u_xlat19.xyz;
    u_xlat4.x = u_xlat29.x * u_xlat32;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat4.x = max(u_xlat4.x, 9.99999975e-05);
    u_xlat4.x = log2(u_xlat4.x);
    u_xlat4.x = u_xlat4.x * _ShoreFade;
    u_xlat4.x = exp2(u_xlat4.x);
    u_xlat6.xyz = _ShallowColor.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat6.xyz = u_xlat4.xxx * u_xlat6.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat1.xy = u_xlat1.xy / vs_TEXCOORD4.ww;
    u_xlat10_8.xyz = texture(_SceneScaledBufferBeforTransParent, u_xlat1.xy).xyz;
    u_xlat9.xyz = u_xlat6.xyz * u_xlat10_8.xyz;
    u_xlat1.x = 0.100000001 / _DeepColorDepth;
    u_xlat1.xw = u_xlat1.xw * u_xlat29.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xw = min(max(u_xlat1.xw, 0.0), 1.0);
#else
    u_xlat1.xw = clamp(u_xlat1.xw, 0.0, 1.0);
#endif
    u_xlat1.x = max(u_xlat1.x, 9.99999975e-05);
    u_xlat1.x = log2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _DeepColorFade;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat10.xyz = (-u_xlat6.xyz) * u_xlat10_8.xyz + _DeepColor.xyz;
    u_xlat10.xyz = u_xlat1.xxx * u_xlat10.xyz + u_xlat9.xyz;
    u_xlat11.xyz = u_xlat16_2.xyz * _DistortionIntensity.xyz;
    u_xlat12.x = vs_TEXCOORD8.x;
    u_xlat12.y = vs_TEXCOORD9.x;
    u_xlat12.z = vs_TEXCOORD6.x;
    u_xlat12.x = dot(u_xlat12.xyz, u_xlat11.xyz);
    u_xlat13.x = vs_TEXCOORD8.y;
    u_xlat13.y = vs_TEXCOORD9.y;
    u_xlat13.z = vs_TEXCOORD6.y;
    u_xlat12.y = dot(u_xlat13.xyz, u_xlat11.xyz);
    u_xlat13.x = vs_TEXCOORD8.z;
    u_xlat13.y = vs_TEXCOORD9.z;
    u_xlat13.z = vs_TEXCOORD6.z;
    u_xlat12.z = dot(u_xlat13.xyz, u_xlat11.xyz);
    u_xlat1.x = dot(u_xlat12.xyz, u_xlat12.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat12.xyz = u_xlat1.xxx * u_xlat12.xyz;
    u_xlat1.x = dot((-u_xlat7.xyz), u_xlat12.xyz);
    u_xlat1.x = u_xlat1.x + u_xlat1.x;
    u_xlat7.xyz = u_xlat12.xyz * (-u_xlat1.xxx) + (-u_xlat7.xyz);
    u_xlat10_0 = textureLod(_ReflectionSkyCubeMap, u_xlat7.xyz, 0.0);
    u_xlat16_2.x = u_xlat10_0.w + -1.0;
    u_xlat16_2.x = _ReflectionSkyCubeMap_HDR.w * u_xlat16_2.x + 1.0;
    u_xlat16_2.x = log2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * _ReflectionSkyCubeMap_HDR.y;
    u_xlat16_2.x = exp2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * _ReflectionSkyCubeMap_HDR.x;
    u_xlat16_16.xyz = u_xlat10_0.xyz * u_xlat16_2.xxx;
    u_xlat1.xy = u_xlat11.xy * vec2(_SSRDistortion);
    u_xlat18.x = float(1.0) / _SSRDistortion_Shore;
    u_xlat18.x = u_xlat29.x * u_xlat18.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat18.x = min(max(u_xlat18.x, 0.0), 1.0);
#else
    u_xlat18.x = clamp(u_xlat18.x, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat1.xy * u_xlat18.xx;
    u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD4.ww + vs_TEXCOORD4.xy;
    u_xlat1.xy = u_xlat1.xy / vs_TEXCOORD4.ww;
    u_xlat10_3 = texture(_SSRTexture, u_xlat1.xy).wxyz;
    u_xlat16_7.xyz = (-u_xlat16_2.xxx) * u_xlat10_0.xyz + u_xlat10_3.yzw;
    u_xlat7.xyz = u_xlat16_7.xyz * vec3(vec3(_SSRIntensity, _SSRIntensity, _SSRIntensity));
    u_xlat16_3.x = u_xlat10_3.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat7.xyz = u_xlat16_3.xxx * u_xlat7.xyz + u_xlat16_16.xyz;
    u_xlat1.x = u_xlat46 * _FresnelPower;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _ReflectionIntensity;
    u_xlat15.x = float(1.0) / _ShoreReflectionFade;
    u_xlat15.x = u_xlat15.x * u_xlat29.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat15.x = min(max(u_xlat15.x, 0.0), 1.0);
#else
    u_xlat15.x = clamp(u_xlat15.x, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat15.x * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat18.xyz = (-u_xlat10.xyz) + u_xlat7.xyz;
    u_xlat1.xyz = u_xlat1.xxx * u_xlat18.xyz + u_xlat10.xyz;
    u_xlat1.xyz = (-u_xlat6.xyz) * u_xlat10_8.xyz + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat4.xxx * u_xlat1.xyz + u_xlat9.xyz;
    u_xlat1.xyz = u_xlat19.xyz * u_xlat5.xxx + u_xlat1.xyz;
    u_xlat0.w = u_xlat1.w * vs_COLOR0.w;
    u_xlat4.xyz = vs_TEXCOORD5.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat5.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat5.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat5.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat43 = dot(u_xlat4.xyz, u_xlat5.xyz);
    u_xlat4.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat4.x = sqrt(u_xlat4.x);
    u_xlat18.y = u_xlat4.x * _HeigtFogParams.y;
    u_xlat46 = u_xlat4.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat46 = min(max(u_xlat46, 0.0), 1.0);
#else
    u_xlat46 = clamp(u_xlat46, 0.0, 1.0);
#endif
    u_xlat5.x = (-u_xlat46) + 2.0;
    u_xlat46 = u_xlat46 * u_xlat5.x;
    u_xlat5.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb43 = !!((-u_xlat43)>=u_xlat5.x);
#else
    u_xlatb43 = (-u_xlat43)>=u_xlat5.x;
#endif
    u_xlat5.x = u_xlat46 * _HeigtFogColDelta.w;
    u_xlat43 = (u_xlatb43) ? u_xlat5.x : u_xlat46;
    u_xlat43 = log2(u_xlat43);
    u_xlat43 = u_xlat43 * unity_FogColor.w;
    u_xlat43 = exp2(u_xlat43);
    u_xlat43 = min(u_xlat43, _HeigtFogColBase.w);
    u_xlat46 = vs_TEXCOORD5.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat46 = min(max(u_xlat46, 0.0), 1.0);
#else
    u_xlat46 = clamp(u_xlat46, 0.0, 1.0);
#endif
    u_xlat16_2.x = (-u_xlat46) + 2.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat46;
    u_xlat5.xyz = u_xlat16_2.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat46 = u_xlat4.x + (-_HeigtFogRamp.w);
    u_xlat46 = u_xlat46 * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat46 = min(max(u_xlat46, 0.0), 1.0);
#else
    u_xlat46 = clamp(u_xlat46, 0.0, 1.0);
#endif
    u_xlat6.xyz = (-u_xlat5.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat5.xyz = vec3(u_xlat46) * u_xlat6.xyz + u_xlat5.xyz;
    u_xlat46 = u_xlat4.y * _HeigtFogParams.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb47 = !!(0.00999999978<abs(u_xlat46));
#else
    u_xlatb47 = 0.00999999978<abs(u_xlat46);
#endif
    u_xlat6.x = u_xlat46 * -1.44269502;
    u_xlat6.x = exp2(u_xlat6.x);
    u_xlat6.x = (-u_xlat6.x) + 1.0;
    u_xlat46 = u_xlat6.x / u_xlat46;
    u_xlat16_2.x = (u_xlatb47) ? u_xlat46 : 1.0;
    u_xlat18.x = u_xlat4.y * _HeigtFogParams2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb46 = !!(0.00999999978<abs(u_xlat18.x));
#else
    u_xlatb46 = 0.00999999978<abs(u_xlat18.x);
#endif
    u_xlat47 = u_xlat18.x * -1.44269502;
    u_xlat47 = exp2(u_xlat47);
    u_xlat47 = (-u_xlat47) + 1.0;
    u_xlat18.x = u_xlat47 / u_xlat18.x;
    u_xlat16_2.y = (u_xlatb46) ? u_xlat18.x : 1.0;
    u_xlat18.x = u_xlat4.x * _HeigtFogParams2.y;
    u_xlat16_2.xy = u_xlat16_2.xy * u_xlat18.yx;
    u_xlat16_2.x = exp2((-u_xlat16_2.x));
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_16.x = exp2((-u_xlat16_2.y));
    u_xlat16_2.y = (-u_xlat16_16.x) + 1.0;
    u_xlat16_2.xy = max(u_xlat16_2.xy, vec2(0.0, 0.0));
    u_xlat16_2.x = u_xlat16_2.y + u_xlat16_2.x;
    u_xlat4.x = u_xlat4.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat16_16.x = (-u_xlat4.x) + 2.0;
    u_xlat16_16.x = u_xlat16_16.x * u_xlat4.x;
    u_xlat4.x = u_xlat16_16.x * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat4.x = u_xlat4.x + 1.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat4.x;
    u_xlat4.x = min(u_xlat16_2.x, _HeigtFogColBase.w);
    u_xlat18.x = vs_TEXCOORD5.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat18.x = min(max(u_xlat18.x, 0.0), 1.0);
#else
    u_xlat18.x = clamp(u_xlat18.x, 0.0, 1.0);
#endif
    u_xlat18.xyz = u_xlat18.xxx * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    u_xlat5.xyz = vec3(u_xlat43) * u_xlat5.xyz;
    u_xlat47 = (-u_xlat4.x) + 1.0;
    u_xlat5.xyz = vec3(u_xlat47) * u_xlat5.xyz;
    u_xlat4.xyz = u_xlat18.xyz * u_xlat4.xxx + u_xlat5.xyz;
    u_xlat43 = (-u_xlat43) + 1.0;
    u_xlat43 = u_xlat47 * u_xlat43;
    u_xlat0.xyz = vec3(u_xlat43) * u_xlat1.xyz + u_xlat4.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "MHY_SHADER_LOW" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	mediump float _MHYZBias;
uniform 	vec4 hlslcc_mtx4x4_mhyJitteredVP[4];
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
out highp vec4 vs_TEXCOORD9;
out highp vec4 vs_TEXCOORD10;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
vec4 u_xlat4;
bool u_xlatb4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
mediump vec4 u_xlat16_6;
vec4 u_xlat7;
mediump vec3 u_xlat16_8;
float u_xlat11;
vec3 u_xlat13;
mediump float u_xlat16_14;
float u_xlat27;
bool u_xlatb27;
float u_xlat29;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4_mhyJitteredVP[1];
    u_xlat2 = hlslcc_mtx4x4_mhyJitteredVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4_mhyJitteredVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4_mhyJitteredVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat3.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    u_xlat3.xyw = u_xlat2.xyw;
    gl_Position = u_xlat3;
    vs_COLOR0 = in_COLOR0;
    u_xlat2.xyw = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat27 = u_xlat2.y * _HeigtFogParams.x;
    u_xlat4.x = u_xlat27 * -1.44269502;
    u_xlat4.x = exp2(u_xlat4.x);
    u_xlat4.x = (-u_xlat4.x) + 1.0;
    u_xlat4.x = u_xlat4.x / u_xlat27;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(0.00999999978<abs(u_xlat27));
#else
    u_xlatb27 = 0.00999999978<abs(u_xlat27);
#endif
    u_xlat16_5.x = (u_xlatb27) ? u_xlat4.x : 1.0;
    u_xlat27 = dot(u_xlat2.xyw, u_xlat2.xyw);
    u_xlat27 = sqrt(u_xlat27);
    u_xlat4.x = u_xlat27 * _HeigtFogParams.y;
    u_xlat16_5.x = u_xlat4.x * u_xlat16_5.x;
    u_xlat16_5.x = exp2((-u_xlat16_5.x));
    u_xlat16_5.x = (-u_xlat16_5.x) + 1.0;
    u_xlat4.x = u_xlat2.y * _HeigtFogParams2.x;
    u_xlat13.x = u_xlat4.x * -1.44269502;
    u_xlat13.x = exp2(u_xlat13.x);
    u_xlat13.x = (-u_xlat13.x) + 1.0;
    u_xlat13.x = u_xlat13.x / u_xlat4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(0.00999999978<abs(u_xlat4.x));
#else
    u_xlatb4 = 0.00999999978<abs(u_xlat4.x);
#endif
    u_xlat16_14 = (u_xlatb4) ? u_xlat13.x : 1.0;
    u_xlat4.x = u_xlat27 * _HeigtFogParams2.y;
    u_xlat16_14 = u_xlat4.x * u_xlat16_14;
    u_xlat16_14 = exp2((-u_xlat16_14));
    u_xlat16_5.y = (-u_xlat16_14) + 1.0;
    u_xlat16_5.xy = max(u_xlat16_5.xy, vec2(0.0, 0.0));
    u_xlat16_5.x = u_xlat16_5.y + u_xlat16_5.x;
    u_xlat4.x = u_xlat27 * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat16_14 = (-u_xlat4.x) + 2.0;
    u_xlat16_14 = u_xlat4.x * u_xlat16_14;
    u_xlat4.x = u_xlat16_14 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat4.x = u_xlat4.x + 1.0;
    u_xlat16_5.x = u_xlat4.x * u_xlat16_5.x;
    u_xlat4.x = min(u_xlat16_5.x, _HeigtFogColBase.w);
    u_xlat13.x = (-u_xlat4.x) + 1.0;
    u_xlat6.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat6.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat6.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat2.x = dot(u_xlat2.xyw, u_xlat6.xyz);
    u_xlat11 = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!((-u_xlat2.x)>=u_xlat11);
#else
    u_xlatb2 = (-u_xlat2.x)>=u_xlat11;
#endif
    u_xlat11 = u_xlat27 * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat11 = min(max(u_xlat11, 0.0), 1.0);
#else
    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
#endif
    u_xlat27 = u_xlat27 + (-_HeigtFogRamp.w);
    u_xlat27 = u_xlat27 * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
    u_xlat29 = (-u_xlat11) + 2.0;
    u_xlat11 = u_xlat29 * u_xlat11;
    u_xlat29 = u_xlat11 * _HeigtFogColDelta.w;
    u_xlat2.x = (u_xlatb2) ? u_xlat29 : u_xlat11;
    u_xlat2.x = log2(u_xlat2.x);
    u_xlat2.x = u_xlat2.x * unity_FogColor.w;
    u_xlat2.x = exp2(u_xlat2.x);
    u_xlat2.x = min(u_xlat2.x, _HeigtFogColBase.w);
    u_xlat11 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat11 = min(max(u_xlat11, 0.0), 1.0);
#else
    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
#endif
    u_xlat16_5.x = (-u_xlat11) + 2.0;
    u_xlat16_5.x = u_xlat11 * u_xlat16_5.x;
    u_xlat6.xyz = u_xlat16_5.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat7.xyz = (-u_xlat6.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat6.xyz = vec3(u_xlat27) * u_xlat7.xyz + u_xlat6.xyz;
    u_xlat6.xyz = u_xlat2.xxx * u_xlat6.xyz;
    u_xlat27 = (-u_xlat2.x) + 1.0;
    vs_TEXCOORD0.w = u_xlat13.x * u_xlat27;
    u_xlat2.xyw = u_xlat13.xxx * u_xlat6.xyz;
    u_xlat27 = u_xlat0.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
    u_xlat13.xyz = vec3(u_xlat27) * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    vs_TEXCOORD0.xyz = u_xlat13.xyz * u_xlat4.xxx + u_xlat2.xyw;
    u_xlat4.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat4.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat4.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat27 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat4.xyz = vec3(u_xlat27) * u_xlat4.xyz;
    u_xlat16_5.x = u_xlat4.y * u_xlat4.y;
    u_xlat16_5.x = u_xlat4.x * u_xlat4.x + (-u_xlat16_5.x);
    u_xlat16_6 = u_xlat4.yzzx * u_xlat4.xyzz;
    u_xlat16_8.x = dot(unity_SHBr, u_xlat16_6);
    u_xlat16_8.y = dot(unity_SHBg, u_xlat16_6);
    u_xlat16_8.z = dot(unity_SHBb, u_xlat16_6);
    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_8.xyz;
    u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat4.w = 1.0;
    u_xlat16_8.x = dot(unity_SHAr, u_xlat4);
    u_xlat16_8.y = dot(unity_SHAg, u_xlat4);
    u_xlat16_8.z = dot(unity_SHAb, u_xlat4);
    u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_8.xyz;
    vs_TEXCOORD1.xyz = u_xlat16_5.xyz;
    vs_TEXCOORD1.w = 1.0;
    u_xlat27 = u_xlat3.y * _ProjectionParams.x;
    u_xlat7.w = u_xlat27 * 0.5;
    u_xlat7.xz = u_xlat3.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.z = u_xlat2.z;
    u_xlat3.xy = u_xlat7.zz + u_xlat7.xw;
    vs_TEXCOORD2 = u_xlat3;
    vs_TEXCOORD4.xyw = u_xlat3.xyw;
    u_xlat27 = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat27 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat27;
    u_xlat27 = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat27;
    u_xlat27 = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat27;
    vs_TEXCOORD3.z = (-u_xlat27);
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD3.w = 0.0;
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD5.w = 0.0;
    vs_TEXCOORD6.xyz = u_xlat4.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[1].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].www + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * in_POSITION0.yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.zzz + u_xlat1.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.www + u_xlat1.xyz;
    vs_TEXCOORD7.xyz = u_xlat1.xyz * vec3(-1.0, -1.0, 1.0);
    vs_TEXCOORD7.w = 0.0;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat27 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat1.xyz = vec3(u_xlat27) * u_xlat1.xyz;
    vs_TEXCOORD8.xyz = u_xlat1.xyz;
    vs_TEXCOORD8.w = 0.0;
    u_xlat2.xyz = u_xlat1.yzx * u_xlat4.zxy;
    u_xlat1.xyz = u_xlat4.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
    u_xlat27 = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD9.xyz = vec3(u_xlat27) * u_xlat1.xyz;
    vs_TEXCOORD9.w = 0.0;
    u_xlat27 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat27 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat27;
    vs_TEXCOORD10.w = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat27;
    vs_TEXCOORD10.xyz = u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _NormalMapScale;
uniform 	float _Normal01_U_Speed;
uniform 	float _Normal01_VSpeed;
uniform 	float _NormalMapBias;
uniform 	float _Normal02_U_Speed;
uniform 	float _Normal02_V_Speed;
uniform 	float _RefractionIntensity;
uniform 	float _OpacityByDepth;
uniform 	float _SpecularIntensity;
uniform 	vec3 _ES_MoonDirection;
uniform 	vec3 _ES_SunDirection;
uniform 	float _Gloss;
uniform 	float _ShoreTransparency;
uniform 	float _SpecularPower;
uniform 	vec4 _ShallowColor;
uniform 	float _ShoreFade;
uniform 	vec4 _DeepColor;
uniform 	float _DeepColorDepth;
uniform 	float _DeepColorFade;
uniform 	vec4 _DistortionIntensity;
uniform 	float _ReflectionIntensity;
uniform 	float _FresnelPower;
uniform 	float _ShoreReflectionFade;
uniform 	mediump float _ProjectUVScale;
uniform 	vec4 _ReflectionSkyCubeMap_HDR;
uniform lowp sampler2D _Normal01;
uniform lowp sampler2D _Normal02;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _SceneScaledBufferBeforTransParent;
uniform lowp samplerCube _ReflectionSkyCubeMap;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD8;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
lowp vec3 u_xlat10_8;
vec3 u_xlat9;
vec3 u_xlat10;
vec3 u_xlat11;
vec3 u_xlat12;
vec3 u_xlat13;
vec2 u_xlat15;
mediump float u_xlat16_16;
vec3 u_xlat18;
bool u_xlatb18;
vec3 u_xlat19;
vec2 u_xlat29;
float u_xlat32;
float u_xlat43;
bool u_xlatb43;
float u_xlat46;
bool u_xlatb46;
float u_xlat47;
bool u_xlatb47;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD5.zx * vec2(vec2(_ProjectUVScale, _ProjectUVScale));
    u_xlat1.x = _Time.y * _Normal01_U_Speed + u_xlat0.y;
    u_xlat1.yz = _Time.yy * vec2(_Normal01_VSpeed, _Normal02_U_Speed) + u_xlat0.xy;
    u_xlat1.w = _Time.y * _Normal02_V_Speed + u_xlat0.x;
    u_xlat10_0.xyz = texture(_Normal01, u_xlat1.xy, _NormalMapBias).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_2.xy = u_xlat16_0.xy * vec2(_NormalMapScale);
    u_xlat10_1.xyz = texture(_Normal02, u_xlat1.zw, _NormalMapBias).xyz;
    u_xlat16_0.w = -1.0;
    u_xlat16_3.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.wwz;
    u_xlat16_3.xy = u_xlat16_3.xy * vec2(_NormalMapScale);
    u_xlat16_2.z = -1.0;
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
    u_xlat1.x = float(1.0) / vs_TEXCOORD4.w;
    u_xlat15.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat15.x = texture(_CameraDepthTexture, u_xlat15.xy).x;
    u_xlat15.x = _ZBufferParams.z * u_xlat15.x + _ZBufferParams.w;
    u_xlat15.x = float(1.0) / u_xlat15.x;
    u_xlat29.xy = u_xlat16_2.xy * vec2(vec2(_RefractionIntensity, _RefractionIntensity));
    u_xlat1.x = u_xlat1.x * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.xz = u_xlat1.xx * u_xlat29.xy;
    u_xlat1.xz = u_xlat1.xz * vs_TEXCOORD4.ww;
    u_xlat15.x = u_xlat15.x + (-vs_TEXCOORD4.w);
#ifdef UNITY_ADRENO_ES3
    u_xlat15.x = min(max(u_xlat15.x, 0.0), 1.0);
#else
    u_xlat15.x = clamp(u_xlat15.x, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat15.xx * u_xlat1.xz;
    u_xlat1.z = 0.0;
    u_xlat4.xyz = u_xlat1.xyz + vs_TEXCOORD4.xyw;
    u_xlat4.xy = u_xlat4.xy / u_xlat4.zz;
    u_xlat43 = texture(_CameraDepthTexture, u_xlat4.xy).x;
    u_xlat43 = _ZBufferParams.z * u_xlat43 + _ZBufferParams.w;
    u_xlat43 = float(1.0) / u_xlat43;
    u_xlat43 = u_xlat43 + (-vs_TEXCOORD4.w);
#ifdef UNITY_ADRENO_ES3
    u_xlat43 = min(max(u_xlat43, 0.0), 1.0);
#else
    u_xlat43 = clamp(u_xlat43, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat43) * u_xlat1.xyz + vs_TEXCOORD4.xyw;
    u_xlat29.xy = u_xlat1.xy / u_xlat1.zz;
    u_xlat29.x = texture(_CameraDepthTexture, u_xlat29.xy).x;
    u_xlat29.x = _ZBufferParams.z * u_xlat29.x + _ZBufferParams.w;
    u_xlat29.x = float(1.0) / u_xlat29.x;
    u_xlat29.x = u_xlat29.x + (-vs_TEXCOORD4.w);
    u_xlat1.w = 0.100000001 / _OpacityByDepth;
    u_xlat16_3.xz = u_xlat16_2.xy;
    u_xlat16_3.y = 1.0;
    u_xlat16_4.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
    u_xlat16_4.x = inversesqrt(u_xlat16_4.x);
    u_xlat16_4.xyz = u_xlat16_3.xyz * u_xlat16_4.xxx;
#ifdef UNITY_ADRENO_ES3
    u_xlatb46 = !!(0.0>=_ES_MoonDirection.y);
#else
    u_xlatb46 = 0.0>=_ES_MoonDirection.y;
#endif
    u_xlat5.xyz = (bool(u_xlatb46)) ? _ES_SunDirection.xyz : _ES_MoonDirection.xyz;
    u_xlat6.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat46 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat46 = inversesqrt(u_xlat46);
    u_xlat7.xyz = vec3(u_xlat46) * u_xlat6.xyz;
    u_xlat5.xyz = u_xlat6.xyz * vec3(u_xlat46) + u_xlat5.xyz;
    u_xlat46 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat46 = inversesqrt(u_xlat46);
    u_xlat5.xyz = vec3(u_xlat46) * u_xlat5.xyz;
    u_xlat4.x = dot(u_xlat16_4.xyz, u_xlat5.xyz);
    u_xlat18.x = _Gloss * 128.0;
    u_xlat4.x = max(u_xlat4.x, 9.99999975e-05);
    u_xlat4.x = log2(u_xlat4.x);
    u_xlat4.x = u_xlat4.x * u_xlat18.x;
    u_xlat4.x = exp2(u_xlat4.x);
    u_xlat4.x = u_xlat4.x * _SpecularIntensity;
    u_xlat4.x = max(u_xlat4.x, 0.0);
    u_xlat4.x = min(u_xlat4.x, 16.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_ES_MoonDirection.y>=9.99999975e-05);
#else
    u_xlatb18 = _ES_MoonDirection.y>=9.99999975e-05;
#endif
    u_xlat18.x = u_xlatb18 ? 1.0 : float(0.0);
    u_xlat32 = _ES_MoonDirection.y + -1.0;
    u_xlat18.x = u_xlat18.x * u_xlat32 + 1.0;
    u_xlat32 = float(1.0) / _ShoreTransparency;
    u_xlat46 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat46 = inversesqrt(u_xlat46);
    u_xlat5.xyz = vec3(u_xlat46) * vs_TEXCOORD6.xyz;
    u_xlat46 = dot(u_xlat7.xyz, u_xlat5.xyz);
    u_xlat46 = (-u_xlat46) + 1.0;
    u_xlat46 = max(u_xlat46, 9.99999975e-05);
    u_xlat46 = log2(u_xlat46);
    u_xlat5.x = u_xlat46 * _SpecularPower;
    u_xlat5.x = exp2(u_xlat5.x);
    u_xlat19.xyz = u_xlat18.xxx * _LightColor0.xyz;
    u_xlat19.xyz = u_xlat4.xxx * u_xlat19.xyz;
    u_xlat4.x = u_xlat29.x + -1.0;
    u_xlat4.x = u_xlat32 * u_xlat4.x;
    u_xlat4.x = u_xlat4.x * 0.100000001;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat19.xyz = u_xlat4.xxx * u_xlat19.xyz;
    u_xlat4.x = u_xlat29.x * u_xlat32;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat4.x = max(u_xlat4.x, 9.99999975e-05);
    u_xlat4.x = log2(u_xlat4.x);
    u_xlat4.x = u_xlat4.x * _ShoreFade;
    u_xlat4.x = exp2(u_xlat4.x);
    u_xlat6.xyz = _ShallowColor.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat6.xyz = u_xlat4.xxx * u_xlat6.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat1.xy = u_xlat1.xy / vs_TEXCOORD4.ww;
    u_xlat10_8.xyz = texture(_SceneScaledBufferBeforTransParent, u_xlat1.xy).xyz;
    u_xlat9.xyz = u_xlat6.xyz * u_xlat10_8.xyz;
    u_xlat1.x = 0.100000001 / _DeepColorDepth;
    u_xlat1.xw = u_xlat1.xw * u_xlat29.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xw = min(max(u_xlat1.xw, 0.0), 1.0);
#else
    u_xlat1.xw = clamp(u_xlat1.xw, 0.0, 1.0);
#endif
    u_xlat1.x = max(u_xlat1.x, 9.99999975e-05);
    u_xlat1.x = log2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _DeepColorFade;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat10.xyz = (-u_xlat6.xyz) * u_xlat10_8.xyz + _DeepColor.xyz;
    u_xlat10.xyz = u_xlat1.xxx * u_xlat10.xyz + u_xlat9.xyz;
    u_xlat11.xyz = u_xlat16_2.xyz * _DistortionIntensity.xyz;
    u_xlat12.x = vs_TEXCOORD8.x;
    u_xlat12.y = vs_TEXCOORD9.x;
    u_xlat12.z = vs_TEXCOORD6.x;
    u_xlat12.x = dot(u_xlat12.xyz, u_xlat11.xyz);
    u_xlat13.x = vs_TEXCOORD8.y;
    u_xlat13.y = vs_TEXCOORD9.y;
    u_xlat13.z = vs_TEXCOORD6.y;
    u_xlat12.y = dot(u_xlat13.xyz, u_xlat11.xyz);
    u_xlat13.x = vs_TEXCOORD8.z;
    u_xlat13.y = vs_TEXCOORD9.z;
    u_xlat13.z = vs_TEXCOORD6.z;
    u_xlat12.z = dot(u_xlat13.xyz, u_xlat11.xyz);
    u_xlat1.x = dot(u_xlat12.xyz, u_xlat12.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat11.xyz = u_xlat1.xxx * u_xlat12.xyz;
    u_xlat1.x = dot((-u_xlat7.xyz), u_xlat11.xyz);
    u_xlat1.x = u_xlat1.x + u_xlat1.x;
    u_xlat7.xyz = u_xlat11.xyz * (-u_xlat1.xxx) + (-u_xlat7.xyz);
    u_xlat10_0 = textureLod(_ReflectionSkyCubeMap, u_xlat7.xyz, 0.0);
    u_xlat16_2.x = u_xlat10_0.w + -1.0;
    u_xlat16_2.x = _ReflectionSkyCubeMap_HDR.w * u_xlat16_2.x + 1.0;
    u_xlat16_2.x = log2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * _ReflectionSkyCubeMap_HDR.y;
    u_xlat16_2.x = exp2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * _ReflectionSkyCubeMap_HDR.x;
    u_xlat1.x = u_xlat46 * _FresnelPower;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _ReflectionIntensity;
    u_xlat15.x = float(1.0) / _ShoreReflectionFade;
    u_xlat15.x = u_xlat15.x * u_xlat29.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat15.x = min(max(u_xlat15.x, 0.0), 1.0);
#else
    u_xlat15.x = clamp(u_xlat15.x, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat15.x * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat18.xyz = u_xlat16_2.xxx * u_xlat10_0.xyz + (-u_xlat10.xyz);
    u_xlat1.xyz = u_xlat1.xxx * u_xlat18.xyz + u_xlat10.xyz;
    u_xlat1.xyz = (-u_xlat6.xyz) * u_xlat10_8.xyz + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat4.xxx * u_xlat1.xyz + u_xlat9.xyz;
    u_xlat1.xyz = u_xlat19.xyz * u_xlat5.xxx + u_xlat1.xyz;
    u_xlat0.w = u_xlat1.w * vs_COLOR0.w;
    u_xlat4.xyz = vs_TEXCOORD5.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat5.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat5.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat5.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat43 = dot(u_xlat4.xyz, u_xlat5.xyz);
    u_xlat4.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat4.x = sqrt(u_xlat4.x);
    u_xlat18.y = u_xlat4.x * _HeigtFogParams.y;
    u_xlat46 = u_xlat4.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat46 = min(max(u_xlat46, 0.0), 1.0);
#else
    u_xlat46 = clamp(u_xlat46, 0.0, 1.0);
#endif
    u_xlat5.x = (-u_xlat46) + 2.0;
    u_xlat46 = u_xlat46 * u_xlat5.x;
    u_xlat5.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb43 = !!((-u_xlat43)>=u_xlat5.x);
#else
    u_xlatb43 = (-u_xlat43)>=u_xlat5.x;
#endif
    u_xlat5.x = u_xlat46 * _HeigtFogColDelta.w;
    u_xlat43 = (u_xlatb43) ? u_xlat5.x : u_xlat46;
    u_xlat43 = log2(u_xlat43);
    u_xlat43 = u_xlat43 * unity_FogColor.w;
    u_xlat43 = exp2(u_xlat43);
    u_xlat43 = min(u_xlat43, _HeigtFogColBase.w);
    u_xlat46 = vs_TEXCOORD5.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat46 = min(max(u_xlat46, 0.0), 1.0);
#else
    u_xlat46 = clamp(u_xlat46, 0.0, 1.0);
#endif
    u_xlat16_2.x = (-u_xlat46) + 2.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat46;
    u_xlat5.xyz = u_xlat16_2.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat46 = u_xlat4.x + (-_HeigtFogRamp.w);
    u_xlat46 = u_xlat46 * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat46 = min(max(u_xlat46, 0.0), 1.0);
#else
    u_xlat46 = clamp(u_xlat46, 0.0, 1.0);
#endif
    u_xlat6.xyz = (-u_xlat5.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat5.xyz = vec3(u_xlat46) * u_xlat6.xyz + u_xlat5.xyz;
    u_xlat46 = u_xlat4.y * _HeigtFogParams.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb47 = !!(0.00999999978<abs(u_xlat46));
#else
    u_xlatb47 = 0.00999999978<abs(u_xlat46);
#endif
    u_xlat6.x = u_xlat46 * -1.44269502;
    u_xlat6.x = exp2(u_xlat6.x);
    u_xlat6.x = (-u_xlat6.x) + 1.0;
    u_xlat46 = u_xlat6.x / u_xlat46;
    u_xlat16_2.x = (u_xlatb47) ? u_xlat46 : 1.0;
    u_xlat18.x = u_xlat4.y * _HeigtFogParams2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb46 = !!(0.00999999978<abs(u_xlat18.x));
#else
    u_xlatb46 = 0.00999999978<abs(u_xlat18.x);
#endif
    u_xlat47 = u_xlat18.x * -1.44269502;
    u_xlat47 = exp2(u_xlat47);
    u_xlat47 = (-u_xlat47) + 1.0;
    u_xlat18.x = u_xlat47 / u_xlat18.x;
    u_xlat16_2.y = (u_xlatb46) ? u_xlat18.x : 1.0;
    u_xlat18.x = u_xlat4.x * _HeigtFogParams2.y;
    u_xlat16_2.xy = u_xlat16_2.xy * u_xlat18.yx;
    u_xlat16_2.x = exp2((-u_xlat16_2.x));
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_16 = exp2((-u_xlat16_2.y));
    u_xlat16_2.y = (-u_xlat16_16) + 1.0;
    u_xlat16_2.xy = max(u_xlat16_2.xy, vec2(0.0, 0.0));
    u_xlat16_2.x = u_xlat16_2.y + u_xlat16_2.x;
    u_xlat4.x = u_xlat4.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat16_16 = (-u_xlat4.x) + 2.0;
    u_xlat16_16 = u_xlat16_16 * u_xlat4.x;
    u_xlat4.x = u_xlat16_16 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat4.x = u_xlat4.x + 1.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat4.x;
    u_xlat4.x = min(u_xlat16_2.x, _HeigtFogColBase.w);
    u_xlat18.x = vs_TEXCOORD5.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat18.x = min(max(u_xlat18.x, 0.0), 1.0);
#else
    u_xlat18.x = clamp(u_xlat18.x, 0.0, 1.0);
#endif
    u_xlat18.xyz = u_xlat18.xxx * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    u_xlat5.xyz = vec3(u_xlat43) * u_xlat5.xyz;
    u_xlat47 = (-u_xlat4.x) + 1.0;
    u_xlat5.xyz = vec3(u_xlat47) * u_xlat5.xyz;
    u_xlat4.xyz = u_xlat18.xyz * u_xlat4.xxx + u_xlat5.xyz;
    u_xlat43 = (-u_xlat43) + 1.0;
    u_xlat43 = u_xlat47 * u_xlat43;
    u_xlat0.xyz = vec3(u_xlat43) * u_xlat1.xyz + u_xlat4.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "MHY_SHADER_LOW" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	mediump float _MHYZBias;
uniform 	vec4 hlslcc_mtx4x4_mhyJitteredVP[4];
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
out highp vec4 vs_TEXCOORD9;
out highp vec4 vs_TEXCOORD10;
float u_xlat0;
int u_xlati0;
vec4 u_xlat1;
bool u_xlatb1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
bool u_xlatb4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
mediump vec4 u_xlat16_6;
vec4 u_xlat7;
mediump vec3 u_xlat16_8;
vec3 u_xlat9;
float u_xlat10;
float u_xlat13;
bool u_xlatb13;
mediump float u_xlat16_14;
float u_xlat22;
float u_xlat28;
float u_xlat31;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat9.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4_mhyJitteredVP[1];
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[3] * u_xlat2.wwww + u_xlat1;
    u_xlat3.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    u_xlat3.xyw = u_xlat1.xyw;
    gl_Position = u_xlat3;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.xyw = u_xlat9.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat4.x = u_xlat1.y * _HeigtFogParams.x;
    u_xlat13 = u_xlat4.x * -1.44269502;
    u_xlat13 = exp2(u_xlat13);
    u_xlat13 = (-u_xlat13) + 1.0;
    u_xlat13 = u_xlat13 / u_xlat4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(0.00999999978<abs(u_xlat4.x));
#else
    u_xlatb4 = 0.00999999978<abs(u_xlat4.x);
#endif
    u_xlat16_5.x = (u_xlatb4) ? u_xlat13 : 1.0;
    u_xlat4.x = dot(u_xlat1.xyw, u_xlat1.xyw);
    u_xlat4.x = sqrt(u_xlat4.x);
    u_xlat13 = u_xlat4.x * _HeigtFogParams.y;
    u_xlat16_5.x = u_xlat13 * u_xlat16_5.x;
    u_xlat16_5.x = exp2((-u_xlat16_5.x));
    u_xlat16_5.x = (-u_xlat16_5.x) + 1.0;
    u_xlat13 = u_xlat1.y * _HeigtFogParams2.x;
    u_xlat22 = u_xlat13 * -1.44269502;
    u_xlat22 = exp2(u_xlat22);
    u_xlat22 = (-u_xlat22) + 1.0;
    u_xlat22 = u_xlat22 / u_xlat13;
#ifdef UNITY_ADRENO_ES3
    u_xlatb13 = !!(0.00999999978<abs(u_xlat13));
#else
    u_xlatb13 = 0.00999999978<abs(u_xlat13);
#endif
    u_xlat16_14 = (u_xlatb13) ? u_xlat22 : 1.0;
    u_xlat13 = u_xlat4.x * _HeigtFogParams2.y;
    u_xlat16_14 = u_xlat13 * u_xlat16_14;
    u_xlat16_14 = exp2((-u_xlat16_14));
    u_xlat16_5.y = (-u_xlat16_14) + 1.0;
    u_xlat16_5.xy = max(u_xlat16_5.xy, vec2(0.0, 0.0));
    u_xlat16_5.x = u_xlat16_5.y + u_xlat16_5.x;
    u_xlat13 = u_xlat4.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat13 = min(max(u_xlat13, 0.0), 1.0);
#else
    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
#endif
    u_xlat16_14 = (-u_xlat13) + 2.0;
    u_xlat16_14 = u_xlat13 * u_xlat16_14;
    u_xlat13 = u_xlat16_14 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat13 = u_xlat13 + 1.0;
    u_xlat16_5.x = u_xlat13 * u_xlat16_5.x;
    u_xlat13 = min(u_xlat16_5.x, _HeigtFogColBase.w);
    u_xlat22 = (-u_xlat13) + 1.0;
    u_xlat31 = _ProjectionParams.z * 0.999899983;
    u_xlat6.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat6.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat6.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat1.x = dot(u_xlat1.xyw, u_xlat6.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!((-u_xlat1.x)>=u_xlat31);
#else
    u_xlatb1 = (-u_xlat1.x)>=u_xlat31;
#endif
    u_xlat10 = u_xlat4.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat10 = min(max(u_xlat10, 0.0), 1.0);
#else
    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
#endif
    u_xlat28 = u_xlat4.x + (-_HeigtFogRamp.w);
    u_xlat28 = u_xlat28 * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat28 = min(max(u_xlat28, 0.0), 1.0);
#else
    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
#endif
    u_xlat4.x = (-u_xlat10) + 2.0;
    u_xlat10 = u_xlat10 * u_xlat4.x;
    u_xlat4.x = u_xlat10 * _HeigtFogColDelta.w;
    u_xlat1.x = (u_xlatb1) ? u_xlat4.x : u_xlat10;
    u_xlat1.x = log2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * unity_FogColor.w;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat1.x = min(u_xlat1.x, _HeigtFogColBase.w);
    u_xlat10 = u_xlat9.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat10 = min(max(u_xlat10, 0.0), 1.0);
#else
    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
#endif
    u_xlat16_5.x = (-u_xlat10) + 2.0;
    u_xlat16_5.x = u_xlat10 * u_xlat16_5.x;
    u_xlat6.xyz = u_xlat16_5.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat7.xyz = (-u_xlat6.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat6.xyz = vec3(u_xlat28) * u_xlat7.xyz + u_xlat6.xyz;
    u_xlat6.xyz = u_xlat1.xxx * u_xlat6.xyz;
    u_xlat1.x = (-u_xlat1.x) + 1.0;
    vs_TEXCOORD0.w = u_xlat22 * u_xlat1.x;
    u_xlat1.xyw = vec3(u_xlat22) * u_xlat6.xyz;
    u_xlat4.x = u_xlat9.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat4.xzw = u_xlat4.xxx * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    vs_TEXCOORD0.xyz = u_xlat4.xzw * vec3(u_xlat13) + u_xlat1.xyw;
    vs_TEXCOORD1.w = 1.0;
    u_xlat4.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat4.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat4.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat1.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
    u_xlat16_5.x = u_xlat4.y * u_xlat4.y;
    u_xlat16_5.x = u_xlat4.x * u_xlat4.x + (-u_xlat16_5.x);
    u_xlat16_6 = u_xlat4.yzzx * u_xlat4.xyzz;
    u_xlat16_8.x = dot(unity_SHBr, u_xlat16_6);
    u_xlat16_8.y = dot(unity_SHBg, u_xlat16_6);
    u_xlat16_8.z = dot(unity_SHBb, u_xlat16_6);
    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_8.xyz;
    u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat4.w = 1.0;
    u_xlat16_8.x = dot(unity_SHAr, u_xlat4);
    u_xlat16_8.y = dot(unity_SHAg, u_xlat4);
    u_xlat16_8.z = dot(unity_SHAb, u_xlat4);
    u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_8.xyz;
    vs_TEXCOORD1.xyz = u_xlat16_5.xyz;
    u_xlat1.x = u_xlat3.y * _ProjectionParams.x;
    u_xlat7.w = u_xlat1.x * 0.5;
    u_xlat7.xz = u_xlat3.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.z = u_xlat1.z;
    u_xlat3.xy = u_xlat7.zz + u_xlat7.xw;
    vs_TEXCOORD2 = u_xlat3;
    vs_TEXCOORD4.xyw = u_xlat3.xyw;
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD3.w = 0.0;
    u_xlat1.x = u_xlat2.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat2.x + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat2.z + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat2.w + u_xlat1.x;
    vs_TEXCOORD3.z = (-u_xlat1.x);
    vs_TEXCOORD5.w = 0.0;
    vs_TEXCOORD5.xyz = u_xlat9.xyz;
    u_xlat9.xyz = (-u_xlat9.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD6.w = 0.0;
    vs_TEXCOORD6.xyz = u_xlat4.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].www + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * in_POSITION0.yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.zzz + u_xlat1.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.www + u_xlat1.xyz;
    vs_TEXCOORD7.xyz = u_xlat1.xyz * vec3(-1.0, -1.0, 1.0);
    vs_TEXCOORD7.w = 0.0;
    u_xlat1.xyz = in_TANGENT0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat0 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0 = inversesqrt(u_xlat0);
    u_xlat1.xyz = vec3(u_xlat0) * u_xlat1.xyz;
    vs_TEXCOORD8.xyz = u_xlat1.xyz;
    vs_TEXCOORD8.w = 0.0;
    u_xlat2.xyz = u_xlat1.yzx * u_xlat4.zxy;
    u_xlat1.xyz = u_xlat4.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
    u_xlat0 = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD9.xyz = vec3(u_xlat0) * u_xlat1.xyz;
    vs_TEXCOORD9.w = 0.0;
    u_xlat0 = u_xlat9.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat9.x + u_xlat0;
    vs_TEXCOORD10.w = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat9.z + u_xlat0;
    vs_TEXCOORD10.xyz = u_xlat9.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _NormalMapScale;
uniform 	float _Normal01_U_Speed;
uniform 	float _Normal01_VSpeed;
uniform 	float _NormalMapBias;
uniform 	float _Normal02_U_Speed;
uniform 	float _Normal02_V_Speed;
uniform 	float _RefractionIntensity;
uniform 	float _OpacityByDepth;
uniform 	float _SpecularIntensity;
uniform 	vec3 _ES_MoonDirection;
uniform 	vec3 _ES_SunDirection;
uniform 	float _Gloss;
uniform 	float _ShoreTransparency;
uniform 	float _SpecularPower;
uniform 	vec4 _ShallowColor;
uniform 	float _ShoreFade;
uniform 	vec4 _DeepColor;
uniform 	float _DeepColorDepth;
uniform 	float _DeepColorFade;
uniform 	vec4 _DistortionIntensity;
uniform 	float _ReflectionIntensity;
uniform 	float _FresnelPower;
uniform 	float _ShoreReflectionFade;
uniform 	mediump float _ProjectUVScale;
uniform 	vec4 _ReflectionSkyCubeMap_HDR;
uniform lowp sampler2D _Normal01;
uniform lowp sampler2D _Normal02;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _SceneScaledBufferBeforTransParent;
uniform lowp samplerCube _ReflectionSkyCubeMap;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD8;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
lowp vec3 u_xlat10_8;
vec3 u_xlat9;
vec3 u_xlat10;
vec3 u_xlat11;
vec3 u_xlat12;
vec3 u_xlat13;
vec2 u_xlat15;
mediump float u_xlat16_16;
vec3 u_xlat18;
bool u_xlatb18;
vec3 u_xlat19;
vec2 u_xlat29;
float u_xlat32;
float u_xlat43;
bool u_xlatb43;
float u_xlat46;
bool u_xlatb46;
float u_xlat47;
bool u_xlatb47;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD5.zx * vec2(vec2(_ProjectUVScale, _ProjectUVScale));
    u_xlat1.x = _Time.y * _Normal01_U_Speed + u_xlat0.y;
    u_xlat1.yz = _Time.yy * vec2(_Normal01_VSpeed, _Normal02_U_Speed) + u_xlat0.xy;
    u_xlat1.w = _Time.y * _Normal02_V_Speed + u_xlat0.x;
    u_xlat10_0.xyz = texture(_Normal01, u_xlat1.xy, _NormalMapBias).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_2.xy = u_xlat16_0.xy * vec2(_NormalMapScale);
    u_xlat10_1.xyz = texture(_Normal02, u_xlat1.zw, _NormalMapBias).xyz;
    u_xlat16_0.w = -1.0;
    u_xlat16_3.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.wwz;
    u_xlat16_3.xy = u_xlat16_3.xy * vec2(_NormalMapScale);
    u_xlat16_2.z = -1.0;
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
    u_xlat1.x = float(1.0) / vs_TEXCOORD4.w;
    u_xlat15.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat15.x = texture(_CameraDepthTexture, u_xlat15.xy).x;
    u_xlat15.x = _ZBufferParams.z * u_xlat15.x + _ZBufferParams.w;
    u_xlat15.x = float(1.0) / u_xlat15.x;
    u_xlat29.xy = u_xlat16_2.xy * vec2(vec2(_RefractionIntensity, _RefractionIntensity));
    u_xlat1.x = u_xlat1.x * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.xz = u_xlat1.xx * u_xlat29.xy;
    u_xlat1.xz = u_xlat1.xz * vs_TEXCOORD4.ww;
    u_xlat15.x = u_xlat15.x + (-vs_TEXCOORD4.w);
#ifdef UNITY_ADRENO_ES3
    u_xlat15.x = min(max(u_xlat15.x, 0.0), 1.0);
#else
    u_xlat15.x = clamp(u_xlat15.x, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat15.xx * u_xlat1.xz;
    u_xlat1.z = 0.0;
    u_xlat4.xyz = u_xlat1.xyz + vs_TEXCOORD4.xyw;
    u_xlat4.xy = u_xlat4.xy / u_xlat4.zz;
    u_xlat43 = texture(_CameraDepthTexture, u_xlat4.xy).x;
    u_xlat43 = _ZBufferParams.z * u_xlat43 + _ZBufferParams.w;
    u_xlat43 = float(1.0) / u_xlat43;
    u_xlat43 = u_xlat43 + (-vs_TEXCOORD4.w);
#ifdef UNITY_ADRENO_ES3
    u_xlat43 = min(max(u_xlat43, 0.0), 1.0);
#else
    u_xlat43 = clamp(u_xlat43, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat43) * u_xlat1.xyz + vs_TEXCOORD4.xyw;
    u_xlat29.xy = u_xlat1.xy / u_xlat1.zz;
    u_xlat29.x = texture(_CameraDepthTexture, u_xlat29.xy).x;
    u_xlat29.x = _ZBufferParams.z * u_xlat29.x + _ZBufferParams.w;
    u_xlat29.x = float(1.0) / u_xlat29.x;
    u_xlat29.x = u_xlat29.x + (-vs_TEXCOORD4.w);
    u_xlat1.w = 0.100000001 / _OpacityByDepth;
    u_xlat16_3.xz = u_xlat16_2.xy;
    u_xlat16_3.y = 1.0;
    u_xlat16_4.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
    u_xlat16_4.x = inversesqrt(u_xlat16_4.x);
    u_xlat16_4.xyz = u_xlat16_3.xyz * u_xlat16_4.xxx;
#ifdef UNITY_ADRENO_ES3
    u_xlatb46 = !!(0.0>=_ES_MoonDirection.y);
#else
    u_xlatb46 = 0.0>=_ES_MoonDirection.y;
#endif
    u_xlat5.xyz = (bool(u_xlatb46)) ? _ES_SunDirection.xyz : _ES_MoonDirection.xyz;
    u_xlat6.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat46 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat46 = inversesqrt(u_xlat46);
    u_xlat7.xyz = vec3(u_xlat46) * u_xlat6.xyz;
    u_xlat5.xyz = u_xlat6.xyz * vec3(u_xlat46) + u_xlat5.xyz;
    u_xlat46 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat46 = inversesqrt(u_xlat46);
    u_xlat5.xyz = vec3(u_xlat46) * u_xlat5.xyz;
    u_xlat4.x = dot(u_xlat16_4.xyz, u_xlat5.xyz);
    u_xlat18.x = _Gloss * 128.0;
    u_xlat4.x = max(u_xlat4.x, 9.99999975e-05);
    u_xlat4.x = log2(u_xlat4.x);
    u_xlat4.x = u_xlat4.x * u_xlat18.x;
    u_xlat4.x = exp2(u_xlat4.x);
    u_xlat4.x = u_xlat4.x * _SpecularIntensity;
    u_xlat4.x = max(u_xlat4.x, 0.0);
    u_xlat4.x = min(u_xlat4.x, 16.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_ES_MoonDirection.y>=9.99999975e-05);
#else
    u_xlatb18 = _ES_MoonDirection.y>=9.99999975e-05;
#endif
    u_xlat18.x = u_xlatb18 ? 1.0 : float(0.0);
    u_xlat32 = _ES_MoonDirection.y + -1.0;
    u_xlat18.x = u_xlat18.x * u_xlat32 + 1.0;
    u_xlat32 = float(1.0) / _ShoreTransparency;
    u_xlat46 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat46 = inversesqrt(u_xlat46);
    u_xlat5.xyz = vec3(u_xlat46) * vs_TEXCOORD6.xyz;
    u_xlat46 = dot(u_xlat7.xyz, u_xlat5.xyz);
    u_xlat46 = (-u_xlat46) + 1.0;
    u_xlat46 = max(u_xlat46, 9.99999975e-05);
    u_xlat46 = log2(u_xlat46);
    u_xlat5.x = u_xlat46 * _SpecularPower;
    u_xlat5.x = exp2(u_xlat5.x);
    u_xlat19.xyz = u_xlat18.xxx * _LightColor0.xyz;
    u_xlat19.xyz = u_xlat4.xxx * u_xlat19.xyz;
    u_xlat4.x = u_xlat29.x + -1.0;
    u_xlat4.x = u_xlat32 * u_xlat4.x;
    u_xlat4.x = u_xlat4.x * 0.100000001;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat19.xyz = u_xlat4.xxx * u_xlat19.xyz;
    u_xlat4.x = u_xlat29.x * u_xlat32;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat4.x = max(u_xlat4.x, 9.99999975e-05);
    u_xlat4.x = log2(u_xlat4.x);
    u_xlat4.x = u_xlat4.x * _ShoreFade;
    u_xlat4.x = exp2(u_xlat4.x);
    u_xlat6.xyz = _ShallowColor.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat6.xyz = u_xlat4.xxx * u_xlat6.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat1.xy = u_xlat1.xy / vs_TEXCOORD4.ww;
    u_xlat10_8.xyz = texture(_SceneScaledBufferBeforTransParent, u_xlat1.xy).xyz;
    u_xlat9.xyz = u_xlat6.xyz * u_xlat10_8.xyz;
    u_xlat1.x = 0.100000001 / _DeepColorDepth;
    u_xlat1.xw = u_xlat1.xw * u_xlat29.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xw = min(max(u_xlat1.xw, 0.0), 1.0);
#else
    u_xlat1.xw = clamp(u_xlat1.xw, 0.0, 1.0);
#endif
    u_xlat1.x = max(u_xlat1.x, 9.99999975e-05);
    u_xlat1.x = log2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _DeepColorFade;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat10.xyz = (-u_xlat6.xyz) * u_xlat10_8.xyz + _DeepColor.xyz;
    u_xlat10.xyz = u_xlat1.xxx * u_xlat10.xyz + u_xlat9.xyz;
    u_xlat11.xyz = u_xlat16_2.xyz * _DistortionIntensity.xyz;
    u_xlat12.x = vs_TEXCOORD8.x;
    u_xlat12.y = vs_TEXCOORD9.x;
    u_xlat12.z = vs_TEXCOORD6.x;
    u_xlat12.x = dot(u_xlat12.xyz, u_xlat11.xyz);
    u_xlat13.x = vs_TEXCOORD8.y;
    u_xlat13.y = vs_TEXCOORD9.y;
    u_xlat13.z = vs_TEXCOORD6.y;
    u_xlat12.y = dot(u_xlat13.xyz, u_xlat11.xyz);
    u_xlat13.x = vs_TEXCOORD8.z;
    u_xlat13.y = vs_TEXCOORD9.z;
    u_xlat13.z = vs_TEXCOORD6.z;
    u_xlat12.z = dot(u_xlat13.xyz, u_xlat11.xyz);
    u_xlat1.x = dot(u_xlat12.xyz, u_xlat12.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat11.xyz = u_xlat1.xxx * u_xlat12.xyz;
    u_xlat1.x = dot((-u_xlat7.xyz), u_xlat11.xyz);
    u_xlat1.x = u_xlat1.x + u_xlat1.x;
    u_xlat7.xyz = u_xlat11.xyz * (-u_xlat1.xxx) + (-u_xlat7.xyz);
    u_xlat10_0 = textureLod(_ReflectionSkyCubeMap, u_xlat7.xyz, 0.0);
    u_xlat16_2.x = u_xlat10_0.w + -1.0;
    u_xlat16_2.x = _ReflectionSkyCubeMap_HDR.w * u_xlat16_2.x + 1.0;
    u_xlat16_2.x = log2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * _ReflectionSkyCubeMap_HDR.y;
    u_xlat16_2.x = exp2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * _ReflectionSkyCubeMap_HDR.x;
    u_xlat1.x = u_xlat46 * _FresnelPower;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _ReflectionIntensity;
    u_xlat15.x = float(1.0) / _ShoreReflectionFade;
    u_xlat15.x = u_xlat15.x * u_xlat29.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat15.x = min(max(u_xlat15.x, 0.0), 1.0);
#else
    u_xlat15.x = clamp(u_xlat15.x, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat15.x * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat18.xyz = u_xlat16_2.xxx * u_xlat10_0.xyz + (-u_xlat10.xyz);
    u_xlat1.xyz = u_xlat1.xxx * u_xlat18.xyz + u_xlat10.xyz;
    u_xlat1.xyz = (-u_xlat6.xyz) * u_xlat10_8.xyz + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat4.xxx * u_xlat1.xyz + u_xlat9.xyz;
    u_xlat1.xyz = u_xlat19.xyz * u_xlat5.xxx + u_xlat1.xyz;
    u_xlat0.w = u_xlat1.w * vs_COLOR0.w;
    u_xlat4.xyz = vs_TEXCOORD5.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat5.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat5.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat5.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat43 = dot(u_xlat4.xyz, u_xlat5.xyz);
    u_xlat4.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat4.x = sqrt(u_xlat4.x);
    u_xlat18.y = u_xlat4.x * _HeigtFogParams.y;
    u_xlat46 = u_xlat4.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat46 = min(max(u_xlat46, 0.0), 1.0);
#else
    u_xlat46 = clamp(u_xlat46, 0.0, 1.0);
#endif
    u_xlat5.x = (-u_xlat46) + 2.0;
    u_xlat46 = u_xlat46 * u_xlat5.x;
    u_xlat5.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb43 = !!((-u_xlat43)>=u_xlat5.x);
#else
    u_xlatb43 = (-u_xlat43)>=u_xlat5.x;
#endif
    u_xlat5.x = u_xlat46 * _HeigtFogColDelta.w;
    u_xlat43 = (u_xlatb43) ? u_xlat5.x : u_xlat46;
    u_xlat43 = log2(u_xlat43);
    u_xlat43 = u_xlat43 * unity_FogColor.w;
    u_xlat43 = exp2(u_xlat43);
    u_xlat43 = min(u_xlat43, _HeigtFogColBase.w);
    u_xlat46 = vs_TEXCOORD5.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat46 = min(max(u_xlat46, 0.0), 1.0);
#else
    u_xlat46 = clamp(u_xlat46, 0.0, 1.0);
#endif
    u_xlat16_2.x = (-u_xlat46) + 2.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat46;
    u_xlat5.xyz = u_xlat16_2.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat46 = u_xlat4.x + (-_HeigtFogRamp.w);
    u_xlat46 = u_xlat46 * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat46 = min(max(u_xlat46, 0.0), 1.0);
#else
    u_xlat46 = clamp(u_xlat46, 0.0, 1.0);
#endif
    u_xlat6.xyz = (-u_xlat5.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat5.xyz = vec3(u_xlat46) * u_xlat6.xyz + u_xlat5.xyz;
    u_xlat46 = u_xlat4.y * _HeigtFogParams.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb47 = !!(0.00999999978<abs(u_xlat46));
#else
    u_xlatb47 = 0.00999999978<abs(u_xlat46);
#endif
    u_xlat6.x = u_xlat46 * -1.44269502;
    u_xlat6.x = exp2(u_xlat6.x);
    u_xlat6.x = (-u_xlat6.x) + 1.0;
    u_xlat46 = u_xlat6.x / u_xlat46;
    u_xlat16_2.x = (u_xlatb47) ? u_xlat46 : 1.0;
    u_xlat18.x = u_xlat4.y * _HeigtFogParams2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb46 = !!(0.00999999978<abs(u_xlat18.x));
#else
    u_xlatb46 = 0.00999999978<abs(u_xlat18.x);
#endif
    u_xlat47 = u_xlat18.x * -1.44269502;
    u_xlat47 = exp2(u_xlat47);
    u_xlat47 = (-u_xlat47) + 1.0;
    u_xlat18.x = u_xlat47 / u_xlat18.x;
    u_xlat16_2.y = (u_xlatb46) ? u_xlat18.x : 1.0;
    u_xlat18.x = u_xlat4.x * _HeigtFogParams2.y;
    u_xlat16_2.xy = u_xlat16_2.xy * u_xlat18.yx;
    u_xlat16_2.x = exp2((-u_xlat16_2.x));
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_16 = exp2((-u_xlat16_2.y));
    u_xlat16_2.y = (-u_xlat16_16) + 1.0;
    u_xlat16_2.xy = max(u_xlat16_2.xy, vec2(0.0, 0.0));
    u_xlat16_2.x = u_xlat16_2.y + u_xlat16_2.x;
    u_xlat4.x = u_xlat4.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat16_16 = (-u_xlat4.x) + 2.0;
    u_xlat16_16 = u_xlat16_16 * u_xlat4.x;
    u_xlat4.x = u_xlat16_16 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat4.x = u_xlat4.x + 1.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat4.x;
    u_xlat4.x = min(u_xlat16_2.x, _HeigtFogColBase.w);
    u_xlat18.x = vs_TEXCOORD5.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat18.x = min(max(u_xlat18.x, 0.0), 1.0);
#else
    u_xlat18.x = clamp(u_xlat18.x, 0.0, 1.0);
#endif
    u_xlat18.xyz = u_xlat18.xxx * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    u_xlat5.xyz = vec3(u_xlat43) * u_xlat5.xyz;
    u_xlat47 = (-u_xlat4.x) + 1.0;
    u_xlat5.xyz = vec3(u_xlat47) * u_xlat5.xyz;
    u_xlat4.xyz = u_xlat18.xyz * u_xlat4.xxx + u_xlat5.xyz;
    u_xlat43 = (-u_xlat43) + 1.0;
    u_xlat43 = u_xlat47 * u_xlat43;
    u_xlat0.xyz = vec3(u_xlat43) * u_xlat1.xyz + u_xlat4.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "MSAA_INTERPOLATION" "MHY_SHADER_HIGH" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	mediump float _MHYZBias;
uniform 	vec4 hlslcc_mtx4x4_mhyJitteredVP[4];
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
out highp vec4 vs_TEXCOORD9;
out highp vec4 vs_TEXCOORD10;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
vec4 u_xlat4;
bool u_xlatb4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
mediump vec4 u_xlat16_6;
vec4 u_xlat7;
mediump vec3 u_xlat16_8;
float u_xlat11;
vec3 u_xlat13;
mediump float u_xlat16_14;
float u_xlat27;
bool u_xlatb27;
float u_xlat29;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4_mhyJitteredVP[1];
    u_xlat2 = hlslcc_mtx4x4_mhyJitteredVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4_mhyJitteredVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4_mhyJitteredVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat3.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    u_xlat3.xyw = u_xlat2.xyw;
    gl_Position = u_xlat3;
    vs_COLOR0 = in_COLOR0;
    u_xlat2.xyw = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat27 = u_xlat2.y * _HeigtFogParams.x;
    u_xlat4.x = u_xlat27 * -1.44269502;
    u_xlat4.x = exp2(u_xlat4.x);
    u_xlat4.x = (-u_xlat4.x) + 1.0;
    u_xlat4.x = u_xlat4.x / u_xlat27;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(0.00999999978<abs(u_xlat27));
#else
    u_xlatb27 = 0.00999999978<abs(u_xlat27);
#endif
    u_xlat16_5.x = (u_xlatb27) ? u_xlat4.x : 1.0;
    u_xlat27 = dot(u_xlat2.xyw, u_xlat2.xyw);
    u_xlat27 = sqrt(u_xlat27);
    u_xlat4.x = u_xlat27 * _HeigtFogParams.y;
    u_xlat16_5.x = u_xlat4.x * u_xlat16_5.x;
    u_xlat16_5.x = exp2((-u_xlat16_5.x));
    u_xlat16_5.x = (-u_xlat16_5.x) + 1.0;
    u_xlat4.x = u_xlat2.y * _HeigtFogParams2.x;
    u_xlat13.x = u_xlat4.x * -1.44269502;
    u_xlat13.x = exp2(u_xlat13.x);
    u_xlat13.x = (-u_xlat13.x) + 1.0;
    u_xlat13.x = u_xlat13.x / u_xlat4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(0.00999999978<abs(u_xlat4.x));
#else
    u_xlatb4 = 0.00999999978<abs(u_xlat4.x);
#endif
    u_xlat16_14 = (u_xlatb4) ? u_xlat13.x : 1.0;
    u_xlat4.x = u_xlat27 * _HeigtFogParams2.y;
    u_xlat16_14 = u_xlat4.x * u_xlat16_14;
    u_xlat16_14 = exp2((-u_xlat16_14));
    u_xlat16_5.y = (-u_xlat16_14) + 1.0;
    u_xlat16_5.xy = max(u_xlat16_5.xy, vec2(0.0, 0.0));
    u_xlat16_5.x = u_xlat16_5.y + u_xlat16_5.x;
    u_xlat4.x = u_xlat27 * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat16_14 = (-u_xlat4.x) + 2.0;
    u_xlat16_14 = u_xlat4.x * u_xlat16_14;
    u_xlat4.x = u_xlat16_14 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat4.x = u_xlat4.x + 1.0;
    u_xlat16_5.x = u_xlat4.x * u_xlat16_5.x;
    u_xlat4.x = min(u_xlat16_5.x, _HeigtFogColBase.w);
    u_xlat13.x = (-u_xlat4.x) + 1.0;
    u_xlat6.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat6.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat6.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat2.x = dot(u_xlat2.xyw, u_xlat6.xyz);
    u_xlat11 = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!((-u_xlat2.x)>=u_xlat11);
#else
    u_xlatb2 = (-u_xlat2.x)>=u_xlat11;
#endif
    u_xlat11 = u_xlat27 * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat11 = min(max(u_xlat11, 0.0), 1.0);
#else
    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
#endif
    u_xlat27 = u_xlat27 + (-_HeigtFogRamp.w);
    u_xlat27 = u_xlat27 * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
    u_xlat29 = (-u_xlat11) + 2.0;
    u_xlat11 = u_xlat29 * u_xlat11;
    u_xlat29 = u_xlat11 * _HeigtFogColDelta.w;
    u_xlat2.x = (u_xlatb2) ? u_xlat29 : u_xlat11;
    u_xlat2.x = log2(u_xlat2.x);
    u_xlat2.x = u_xlat2.x * unity_FogColor.w;
    u_xlat2.x = exp2(u_xlat2.x);
    u_xlat2.x = min(u_xlat2.x, _HeigtFogColBase.w);
    u_xlat11 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat11 = min(max(u_xlat11, 0.0), 1.0);
#else
    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
#endif
    u_xlat16_5.x = (-u_xlat11) + 2.0;
    u_xlat16_5.x = u_xlat11 * u_xlat16_5.x;
    u_xlat6.xyz = u_xlat16_5.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat7.xyz = (-u_xlat6.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat6.xyz = vec3(u_xlat27) * u_xlat7.xyz + u_xlat6.xyz;
    u_xlat6.xyz = u_xlat2.xxx * u_xlat6.xyz;
    u_xlat27 = (-u_xlat2.x) + 1.0;
    vs_TEXCOORD0.w = u_xlat13.x * u_xlat27;
    u_xlat2.xyw = u_xlat13.xxx * u_xlat6.xyz;
    u_xlat27 = u_xlat0.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
    u_xlat13.xyz = vec3(u_xlat27) * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    vs_TEXCOORD0.xyz = u_xlat13.xyz * u_xlat4.xxx + u_xlat2.xyw;
    u_xlat4.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat4.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat4.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat27 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat4.xyz = vec3(u_xlat27) * u_xlat4.xyz;
    u_xlat16_5.x = u_xlat4.y * u_xlat4.y;
    u_xlat16_5.x = u_xlat4.x * u_xlat4.x + (-u_xlat16_5.x);
    u_xlat16_6 = u_xlat4.yzzx * u_xlat4.xyzz;
    u_xlat16_8.x = dot(unity_SHBr, u_xlat16_6);
    u_xlat16_8.y = dot(unity_SHBg, u_xlat16_6);
    u_xlat16_8.z = dot(unity_SHBb, u_xlat16_6);
    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_8.xyz;
    u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat4.w = 1.0;
    u_xlat16_8.x = dot(unity_SHAr, u_xlat4);
    u_xlat16_8.y = dot(unity_SHAg, u_xlat4);
    u_xlat16_8.z = dot(unity_SHAb, u_xlat4);
    u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_8.xyz;
    vs_TEXCOORD1.xyz = u_xlat16_5.xyz;
    vs_TEXCOORD1.w = 1.0;
    u_xlat27 = u_xlat3.y * _ProjectionParams.x;
    u_xlat7.w = u_xlat27 * 0.5;
    u_xlat7.xz = u_xlat3.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.z = u_xlat2.z;
    u_xlat3.xy = u_xlat7.zz + u_xlat7.xw;
    vs_TEXCOORD2 = u_xlat3;
    vs_TEXCOORD4.xyw = u_xlat3.xyw;
    u_xlat27 = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat27 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat27;
    u_xlat27 = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat27;
    u_xlat27 = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat27;
    vs_TEXCOORD3.z = (-u_xlat27);
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD3.w = 0.0;
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD5.w = 0.0;
    vs_TEXCOORD6.xyz = u_xlat4.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[1].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].www + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * in_POSITION0.yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.zzz + u_xlat1.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.www + u_xlat1.xyz;
    vs_TEXCOORD7.xyz = u_xlat1.xyz * vec3(-1.0, -1.0, 1.0);
    vs_TEXCOORD7.w = 0.0;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat27 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat1.xyz = vec3(u_xlat27) * u_xlat1.xyz;
    vs_TEXCOORD8.xyz = u_xlat1.xyz;
    vs_TEXCOORD8.w = 0.0;
    u_xlat2.xyz = u_xlat1.yzx * u_xlat4.zxy;
    u_xlat1.xyz = u_xlat4.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
    u_xlat27 = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD9.xyz = vec3(u_xlat27) * u_xlat1.xyz;
    vs_TEXCOORD9.w = 0.0;
    u_xlat27 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat27 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat27;
    vs_TEXCOORD10.w = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat27;
    vs_TEXCOORD10.xyz = u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	float _NormalMapScale;
uniform 	float _Normal01_U_Speed;
uniform 	float _Normal01_VSpeed;
uniform 	float _NormalMapBias;
uniform 	float _Normal02_U_Speed;
uniform 	float _Normal02_V_Speed;
uniform 	float _RefractionIntensity;
uniform 	float _OpacityByDepth;
uniform 	float _SpecularIntensity;
uniform 	vec3 _ES_MoonDirection;
uniform 	vec3 _ES_SunDirection;
uniform 	float _Gloss;
uniform 	float _ShoreTransparency;
uniform 	float _SpecularPower;
uniform 	vec4 _ShallowColor;
uniform 	float _ShoreFade;
uniform 	vec4 _DeepColor;
uniform 	float _DeepColorDepth;
uniform 	float _DeepColorFade;
uniform 	vec4 _DistortionIntensity;
uniform 	float _SSRDistortion;
uniform 	float _SSRDistortion_Shore;
uniform 	float _SSRIntensity;
uniform 	float _ReflectionIntensity;
uniform 	float _FresnelPower;
uniform 	float _ShoreReflectionFade;
uniform 	mediump float _ProjectUVScale;
uniform 	vec4 _ReflectionSkyCubeMap_HDR;
uniform lowp sampler2D _Normal01;
uniform lowp sampler2D _Normal02;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _SceneScaledBufferBeforTransParent;
uniform lowp samplerCube _ReflectionSkyCubeMap;
uniform lowp sampler2D _SSRTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD8;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec3 u_xlat1;
mediump float u_xlat16_1;
lowp vec3 u_xlat10_1;
bool u_xlatb1;
vec4 u_xlat2;
lowp vec4 u_xlat10_2;
bool u_xlatb2;
mediump vec3 u_xlat16_3;
lowp vec4 u_xlat10_3;
vec3 u_xlat4;
bool u_xlatb4;
vec3 u_xlat5;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
lowp vec3 u_xlat10_7;
mediump vec3 u_xlat16_8;
vec3 u_xlat9;
vec3 u_xlat10;
vec3 u_xlat11;
mediump float u_xlat16_12;
float u_xlat13;
vec3 u_xlat14;
vec3 u_xlat16;
float u_xlat25;
bool u_xlatb25;
float u_xlat26;
vec2 u_xlat30;
mediump float u_xlat16_36;
float u_xlat37;
float u_xlat38;
bool u_xlatb38;
float u_xlat40;
void main()
{
    u_xlat16_0.w = -1.0;
    u_xlat1.xy = vs_TEXCOORD5.zx * vec2(vec2(_ProjectUVScale, _ProjectUVScale));
    u_xlat2.w = _Time.y * _Normal02_V_Speed + u_xlat1.x;
    u_xlat2.yz = _Time.yy * vec2(_Normal01_VSpeed, _Normal02_U_Speed) + u_xlat1.xy;
    u_xlat2.x = _Time.y * _Normal01_U_Speed + u_xlat1.y;
    u_xlat10_1.xyz = texture(_Normal01, u_xlat2.xy, _NormalMapBias).xyz;
    u_xlat10_2.xyz = texture(_Normal02, u_xlat2.zw, _NormalMapBias).xyz;
    u_xlat16_0.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_3.xyz = u_xlat10_2.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.wwz;
    u_xlat16_0.xy = u_xlat16_0.xy * vec2(_NormalMapScale);
    u_xlat16_3.xy = u_xlat16_3.xy * vec2(_NormalMapScale);
    u_xlat16_0.z = -1.0;
    u_xlat16_0.xyz = u_xlat16_0.xzy + u_xlat16_3.xzy;
    u_xlat1.xyz = u_xlat16_0.xzy * _DistortionIntensity.xyz;
    u_xlat2.x = vs_TEXCOORD8.x;
    u_xlat2.y = vs_TEXCOORD9.x;
    u_xlat2.z = vs_TEXCOORD6.x;
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat4.x = vs_TEXCOORD8.y;
    u_xlat4.y = vs_TEXCOORD9.y;
    u_xlat4.z = vs_TEXCOORD6.y;
    u_xlat2.y = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat4.x = vs_TEXCOORD8.z;
    u_xlat4.y = vs_TEXCOORD9.z;
    u_xlat4.z = vs_TEXCOORD6.z;
    u_xlat2.z = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat1.xy = u_xlat1.xy * vec2(_SSRDistortion);
    u_xlat25 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat25 = inversesqrt(u_xlat25);
    u_xlat2.xyz = vec3(u_xlat25) * u_xlat2.xyz;
    u_xlat4.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat25 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat25 = inversesqrt(u_xlat25);
    u_xlat5.xyz = vec3(u_xlat25) * u_xlat4.xyz;
    u_xlat37 = dot((-u_xlat5.xyz), u_xlat2.xyz);
    u_xlat37 = u_xlat37 + u_xlat37;
    u_xlat2.xyz = u_xlat2.xyz * (-vec3(u_xlat37)) + (-u_xlat5.xyz);
    u_xlat10_2 = textureLod(_ReflectionSkyCubeMap, u_xlat2.xyz, 0.0);
    u_xlat16_36 = u_xlat10_2.w + -1.0;
    u_xlat16_36 = _ReflectionSkyCubeMap_HDR.w * u_xlat16_36 + 1.0;
    u_xlat16_36 = log2(u_xlat16_36);
    u_xlat16_36 = u_xlat16_36 * _ReflectionSkyCubeMap_HDR.y;
    u_xlat16_36 = exp2(u_xlat16_36);
    u_xlat16_36 = u_xlat16_36 * _ReflectionSkyCubeMap_HDR.x;
    u_xlat6.xy = u_xlat16_0.xz * vec2(vec2(_RefractionIntensity, _RefractionIntensity));
    u_xlat37 = float(1.0) / vs_TEXCOORD4.w;
    u_xlat37 = u_xlat37 * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat37 = min(max(u_xlat37, 0.0), 1.0);
#else
    u_xlat37 = clamp(u_xlat37, 0.0, 1.0);
#endif
    u_xlat6.xy = vec2(u_xlat37) * u_xlat6.xy;
    u_xlat6.xy = u_xlat6.xy * vs_TEXCOORD4.ww;
    u_xlat30.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat37 = texture(_CameraDepthTexture, u_xlat30.xy).x;
    u_xlat37 = _ZBufferParams.z * u_xlat37 + _ZBufferParams.w;
    u_xlat37 = float(1.0) / u_xlat37;
    u_xlat37 = u_xlat37 + (-vs_TEXCOORD4.w);
#ifdef UNITY_ADRENO_ES3
    u_xlat37 = min(max(u_xlat37, 0.0), 1.0);
#else
    u_xlat37 = clamp(u_xlat37, 0.0, 1.0);
#endif
    u_xlat6.xy = vec2(u_xlat37) * u_xlat6.xy;
    u_xlat6.z = 0.0;
    u_xlat7.xyz = u_xlat6.xyz + vs_TEXCOORD4.xyw;
    u_xlat7.xy = u_xlat7.xy / u_xlat7.zz;
    u_xlat37 = texture(_CameraDepthTexture, u_xlat7.xy).x;
    u_xlat37 = _ZBufferParams.z * u_xlat37 + _ZBufferParams.w;
    u_xlat37 = float(1.0) / u_xlat37;
    u_xlat37 = u_xlat37 + (-vs_TEXCOORD4.w);
#ifdef UNITY_ADRENO_ES3
    u_xlat37 = min(max(u_xlat37, 0.0), 1.0);
#else
    u_xlat37 = clamp(u_xlat37, 0.0, 1.0);
#endif
    u_xlat6.xyz = vec3(u_xlat37) * u_xlat6.xyz + vs_TEXCOORD4.xyw;
    u_xlat30.xy = u_xlat6.xy / u_xlat6.zz;
    u_xlat6.xy = u_xlat6.xy / vs_TEXCOORD4.ww;
    u_xlat10_7.xyz = texture(_SceneScaledBufferBeforTransParent, u_xlat6.xy).xyz;
    u_xlat37 = texture(_CameraDepthTexture, u_xlat30.xy).x;
    u_xlat37 = _ZBufferParams.z * u_xlat37 + _ZBufferParams.w;
    u_xlat37 = float(1.0) / u_xlat37;
    u_xlat37 = u_xlat37 + (-vs_TEXCOORD4.w);
    u_xlat38 = float(1.0) / _SSRDistortion_Shore;
    u_xlat38 = u_xlat37 * u_xlat38;
#ifdef UNITY_ADRENO_ES3
    u_xlat38 = min(max(u_xlat38, 0.0), 1.0);
#else
    u_xlat38 = clamp(u_xlat38, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat1.xy * vec2(u_xlat38);
    u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD4.ww + vs_TEXCOORD4.xy;
    u_xlat1.xy = u_xlat1.xy / vs_TEXCOORD4.ww;
    u_xlat10_3 = texture(_SSRTexture, u_xlat1.xy).wxyz;
    u_xlat16_6.xyz = (-vec3(u_xlat16_36)) * u_xlat10_2.xyz + u_xlat10_3.yzw;
    u_xlat16_8.xyz = u_xlat10_2.xyz * vec3(u_xlat16_36);
    u_xlat16_3.x = u_xlat10_3.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat2.xyz = u_xlat16_6.xyz * vec3(vec3(_SSRIntensity, _SSRIntensity, _SSRIntensity));
    u_xlat2.xyz = u_xlat16_3.xxx * u_xlat2.xyz + u_xlat16_8.xyz;
    u_xlat1.x = 0.100000001 / _DeepColorDepth;
    u_xlat1.x = u_xlat1.x * u_xlat37;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.x = max(u_xlat1.x, 9.99999975e-05);
    u_xlat1.x = log2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _DeepColorFade;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat13 = float(1.0) / _ShoreTransparency;
    u_xlat38 = u_xlat13 * u_xlat37;
#ifdef UNITY_ADRENO_ES3
    u_xlat38 = min(max(u_xlat38, 0.0), 1.0);
#else
    u_xlat38 = clamp(u_xlat38, 0.0, 1.0);
#endif
    u_xlat38 = max(u_xlat38, 9.99999975e-05);
    u_xlat38 = log2(u_xlat38);
    u_xlat38 = u_xlat38 * _ShoreFade;
    u_xlat38 = exp2(u_xlat38);
    u_xlat6.xyz = _ShallowColor.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat6.xyz = vec3(u_xlat38) * u_xlat6.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat9.xyz = (-u_xlat6.xyz) * u_xlat10_7.xyz + _DeepColor.xyz;
    u_xlat10.xyz = u_xlat10_7.xyz * u_xlat6.xyz;
    u_xlat9.xyz = u_xlat1.xxx * u_xlat9.xyz + u_xlat10.xyz;
    u_xlat2.xyz = u_xlat2.xyz + (-u_xlat9.xyz);
    u_xlat1.x = float(1.0) / _ShoreReflectionFade;
    u_xlat1.x = u_xlat1.x * u_xlat37;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat40 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat40 = inversesqrt(u_xlat40);
    u_xlat11.xyz = vec3(u_xlat40) * vs_TEXCOORD6.xyz;
    u_xlat40 = dot(u_xlat5.xyz, u_xlat11.xyz);
    u_xlat40 = (-u_xlat40) + 1.0;
    u_xlat40 = max(u_xlat40, 9.99999975e-05);
    u_xlat40 = log2(u_xlat40);
    u_xlat5.x = u_xlat40 * _FresnelPower;
    u_xlat40 = u_xlat40 * _SpecularPower;
    u_xlat40 = exp2(u_xlat40);
    u_xlat5.x = exp2(u_xlat5.x);
    u_xlat5.x = u_xlat5.x * _ReflectionIntensity;
    u_xlat1.x = u_xlat1.x * u_xlat5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat2.xyz = u_xlat1.xxx * u_xlat2.xyz + u_xlat9.xyz;
    u_xlat2.xyz = (-u_xlat6.xyz) * u_xlat10_7.xyz + u_xlat2.xyz;
    u_xlat2.xyz = vec3(u_xlat38) * u_xlat2.xyz + u_xlat10.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(0.0>=_ES_MoonDirection.y);
#else
    u_xlatb1 = 0.0>=_ES_MoonDirection.y;
#endif
    u_xlat5.xyz = (bool(u_xlatb1)) ? _ES_SunDirection.xyz : _ES_MoonDirection.xyz;
    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat25) + u_xlat5.xyz;
    u_xlat1.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
    u_xlat16_0.y = 1.0;
    u_xlat16_1 = dot(u_xlat16_0.xyz, u_xlat16_0.xyz);
    u_xlat16_1 = inversesqrt(u_xlat16_1);
    u_xlat16_5.xyz = u_xlat16_0.xyz * vec3(u_xlat16_1);
    u_xlat1.x = dot(u_xlat16_5.xyz, u_xlat4.xyz);
    u_xlat1.x = max(u_xlat1.x, 9.99999975e-05);
    u_xlat1.x = log2(u_xlat1.x);
    u_xlat25 = _Gloss * 128.0;
    u_xlat1.x = u_xlat1.x * u_xlat25;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _SpecularIntensity;
    u_xlat1.x = max(u_xlat1.x, 0.0);
    u_xlat1.x = min(u_xlat1.x, 16.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb25 = !!(_ES_MoonDirection.y>=9.99999975e-05);
#else
    u_xlatb25 = _ES_MoonDirection.y>=9.99999975e-05;
#endif
    u_xlat25 = u_xlatb25 ? 1.0 : float(0.0);
    u_xlat38 = _ES_MoonDirection.y + -1.0;
    u_xlat25 = u_xlat25 * u_xlat38 + 1.0;
    u_xlat4.xyz = vec3(u_xlat25) * _LightColor0.xyz;
    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
    u_xlat1.x = u_xlat37 + -1.0;
    u_xlat1.x = u_xlat13 * u_xlat1.x;
    u_xlat1.x = u_xlat1.x * 0.100000001;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat1.xxx * u_xlat4.xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat40) + u_xlat2.xyz;
    u_xlat2.xyz = vs_TEXCOORD5.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat38 = u_xlat2.y * _HeigtFogParams.x;
    u_xlat4.x = u_xlat38 * -1.44269502;
    u_xlat4.x = exp2(u_xlat4.x);
    u_xlat4.x = (-u_xlat4.x) + 1.0;
    u_xlat4.x = u_xlat4.x / u_xlat38;
#ifdef UNITY_ADRENO_ES3
    u_xlatb38 = !!(0.00999999978<abs(u_xlat38));
#else
    u_xlatb38 = 0.00999999978<abs(u_xlat38);
#endif
    u_xlat16_0.x = (u_xlatb38) ? u_xlat4.x : 1.0;
    u_xlat38 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat38 = sqrt(u_xlat38);
    u_xlat4.x = u_xlat38 * _HeigtFogParams.y;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat4.x;
    u_xlat16_0.x = exp2((-u_xlat16_0.x));
    u_xlat16_0.x = (-u_xlat16_0.x) + 1.0;
    u_xlat4.x = u_xlat2.y * _HeigtFogParams2.x;
    u_xlat16.x = u_xlat4.x * -1.44269502;
    u_xlat16.x = exp2(u_xlat16.x);
    u_xlat16.x = (-u_xlat16.x) + 1.0;
    u_xlat16.x = u_xlat16.x / u_xlat4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(0.00999999978<abs(u_xlat4.x));
#else
    u_xlatb4 = 0.00999999978<abs(u_xlat4.x);
#endif
    u_xlat16_12 = (u_xlatb4) ? u_xlat16.x : 1.0;
    u_xlat4.x = u_xlat38 * _HeigtFogParams2.y;
    u_xlat16_12 = u_xlat16_12 * u_xlat4.x;
    u_xlat16_12 = exp2((-u_xlat16_12));
    u_xlat16_0.y = (-u_xlat16_12) + 1.0;
    u_xlat16_0.xy = max(u_xlat16_0.xy, vec2(0.0, 0.0));
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat4.x = u_xlat38 * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat16_12 = (-u_xlat4.x) + 2.0;
    u_xlat16_12 = u_xlat16_12 * u_xlat4.x;
    u_xlat4.x = u_xlat16_12 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat4.x = u_xlat4.x + 1.0;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat4.x;
    u_xlat4.x = min(u_xlat16_0.x, _HeigtFogColBase.w);
    u_xlat16.x = (-u_xlat4.x) + 1.0;
    u_xlat5.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat5.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat5.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat5.xyz);
    u_xlat14.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!((-u_xlat2.x)>=u_xlat14.x);
#else
    u_xlatb2 = (-u_xlat2.x)>=u_xlat14.x;
#endif
    u_xlat14.x = u_xlat38 * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat14.x = min(max(u_xlat14.x, 0.0), 1.0);
#else
    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
#endif
    u_xlat26 = u_xlat38 + (-_HeigtFogRamp.w);
    u_xlat26 = u_xlat26 * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat26 = min(max(u_xlat26, 0.0), 1.0);
#else
    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);
#endif
    u_xlat38 = (-u_xlat14.x) + 2.0;
    u_xlat14.x = u_xlat38 * u_xlat14.x;
    u_xlat38 = u_xlat14.x * _HeigtFogColDelta.w;
    u_xlat2.x = (u_xlatb2) ? u_xlat38 : u_xlat14.x;
    u_xlat2.x = log2(u_xlat2.x);
    u_xlat2.x = u_xlat2.x * unity_FogColor.w;
    u_xlat2.x = exp2(u_xlat2.x);
    u_xlat2.x = min(u_xlat2.x, _HeigtFogColBase.w);
    u_xlat14.x = vs_TEXCOORD5.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat14.x = min(max(u_xlat14.x, 0.0), 1.0);
#else
    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
#endif
    u_xlat16_0.x = (-u_xlat14.x) + 2.0;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat14.x;
    u_xlat5.xyz = u_xlat16_0.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat6.xyz = (-u_xlat5.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat14.xyz = vec3(u_xlat26) * u_xlat6.xyz + u_xlat5.xyz;
    u_xlat2.yzw = u_xlat2.xxx * u_xlat14.xyz;
    u_xlat2.x = (-u_xlat2.x) + 1.0;
    u_xlat2 = u_xlat16.xxxx * u_xlat2;
    u_xlat16.x = vs_TEXCOORD5.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat16.x = min(max(u_xlat16.x, 0.0), 1.0);
#else
    u_xlat16.x = clamp(u_xlat16.x, 0.0, 1.0);
#endif
    u_xlat16.xyz = u_xlat16.xxx * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    u_xlat14.xyz = u_xlat16.xyz * u_xlat4.xxx + u_xlat2.yzw;
    u_xlat0.xyz = u_xlat2.xxx * u_xlat1.xyz + u_xlat14.xyz;
    u_xlat1.x = 0.100000001 / _OpacityByDepth;
    u_xlat1.x = u_xlat1.x * u_xlat37;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat0.w = u_xlat1.x * vs_COLOR0.w;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" "MSAA_INTERPOLATION" "MHY_SHADER_HIGH" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	mediump float _MHYZBias;
uniform 	vec4 hlslcc_mtx4x4_mhyJitteredVP[4];
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
out highp vec4 vs_TEXCOORD9;
out highp vec4 vs_TEXCOORD10;
float u_xlat0;
int u_xlati0;
vec4 u_xlat1;
bool u_xlatb1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
bool u_xlatb4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
mediump vec4 u_xlat16_6;
vec4 u_xlat7;
mediump vec3 u_xlat16_8;
vec3 u_xlat9;
float u_xlat10;
float u_xlat13;
bool u_xlatb13;
mediump float u_xlat16_14;
float u_xlat22;
float u_xlat28;
float u_xlat31;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat9.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4_mhyJitteredVP[1];
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[3] * u_xlat2.wwww + u_xlat1;
    u_xlat3.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    u_xlat3.xyw = u_xlat1.xyw;
    gl_Position = u_xlat3;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.xyw = u_xlat9.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat4.x = u_xlat1.y * _HeigtFogParams.x;
    u_xlat13 = u_xlat4.x * -1.44269502;
    u_xlat13 = exp2(u_xlat13);
    u_xlat13 = (-u_xlat13) + 1.0;
    u_xlat13 = u_xlat13 / u_xlat4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(0.00999999978<abs(u_xlat4.x));
#else
    u_xlatb4 = 0.00999999978<abs(u_xlat4.x);
#endif
    u_xlat16_5.x = (u_xlatb4) ? u_xlat13 : 1.0;
    u_xlat4.x = dot(u_xlat1.xyw, u_xlat1.xyw);
    u_xlat4.x = sqrt(u_xlat4.x);
    u_xlat13 = u_xlat4.x * _HeigtFogParams.y;
    u_xlat16_5.x = u_xlat13 * u_xlat16_5.x;
    u_xlat16_5.x = exp2((-u_xlat16_5.x));
    u_xlat16_5.x = (-u_xlat16_5.x) + 1.0;
    u_xlat13 = u_xlat1.y * _HeigtFogParams2.x;
    u_xlat22 = u_xlat13 * -1.44269502;
    u_xlat22 = exp2(u_xlat22);
    u_xlat22 = (-u_xlat22) + 1.0;
    u_xlat22 = u_xlat22 / u_xlat13;
#ifdef UNITY_ADRENO_ES3
    u_xlatb13 = !!(0.00999999978<abs(u_xlat13));
#else
    u_xlatb13 = 0.00999999978<abs(u_xlat13);
#endif
    u_xlat16_14 = (u_xlatb13) ? u_xlat22 : 1.0;
    u_xlat13 = u_xlat4.x * _HeigtFogParams2.y;
    u_xlat16_14 = u_xlat13 * u_xlat16_14;
    u_xlat16_14 = exp2((-u_xlat16_14));
    u_xlat16_5.y = (-u_xlat16_14) + 1.0;
    u_xlat16_5.xy = max(u_xlat16_5.xy, vec2(0.0, 0.0));
    u_xlat16_5.x = u_xlat16_5.y + u_xlat16_5.x;
    u_xlat13 = u_xlat4.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat13 = min(max(u_xlat13, 0.0), 1.0);
#else
    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
#endif
    u_xlat16_14 = (-u_xlat13) + 2.0;
    u_xlat16_14 = u_xlat13 * u_xlat16_14;
    u_xlat13 = u_xlat16_14 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat13 = u_xlat13 + 1.0;
    u_xlat16_5.x = u_xlat13 * u_xlat16_5.x;
    u_xlat13 = min(u_xlat16_5.x, _HeigtFogColBase.w);
    u_xlat22 = (-u_xlat13) + 1.0;
    u_xlat31 = _ProjectionParams.z * 0.999899983;
    u_xlat6.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat6.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat6.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat1.x = dot(u_xlat1.xyw, u_xlat6.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!((-u_xlat1.x)>=u_xlat31);
#else
    u_xlatb1 = (-u_xlat1.x)>=u_xlat31;
#endif
    u_xlat10 = u_xlat4.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat10 = min(max(u_xlat10, 0.0), 1.0);
#else
    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
#endif
    u_xlat28 = u_xlat4.x + (-_HeigtFogRamp.w);
    u_xlat28 = u_xlat28 * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat28 = min(max(u_xlat28, 0.0), 1.0);
#else
    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
#endif
    u_xlat4.x = (-u_xlat10) + 2.0;
    u_xlat10 = u_xlat10 * u_xlat4.x;
    u_xlat4.x = u_xlat10 * _HeigtFogColDelta.w;
    u_xlat1.x = (u_xlatb1) ? u_xlat4.x : u_xlat10;
    u_xlat1.x = log2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * unity_FogColor.w;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat1.x = min(u_xlat1.x, _HeigtFogColBase.w);
    u_xlat10 = u_xlat9.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat10 = min(max(u_xlat10, 0.0), 1.0);
#else
    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
#endif
    u_xlat16_5.x = (-u_xlat10) + 2.0;
    u_xlat16_5.x = u_xlat10 * u_xlat16_5.x;
    u_xlat6.xyz = u_xlat16_5.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat7.xyz = (-u_xlat6.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat6.xyz = vec3(u_xlat28) * u_xlat7.xyz + u_xlat6.xyz;
    u_xlat6.xyz = u_xlat1.xxx * u_xlat6.xyz;
    u_xlat1.x = (-u_xlat1.x) + 1.0;
    vs_TEXCOORD0.w = u_xlat22 * u_xlat1.x;
    u_xlat1.xyw = vec3(u_xlat22) * u_xlat6.xyz;
    u_xlat4.x = u_xlat9.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat4.xzw = u_xlat4.xxx * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    vs_TEXCOORD0.xyz = u_xlat4.xzw * vec3(u_xlat13) + u_xlat1.xyw;
    vs_TEXCOORD1.w = 1.0;
    u_xlat4.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat4.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat4.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat1.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
    u_xlat16_5.x = u_xlat4.y * u_xlat4.y;
    u_xlat16_5.x = u_xlat4.x * u_xlat4.x + (-u_xlat16_5.x);
    u_xlat16_6 = u_xlat4.yzzx * u_xlat4.xyzz;
    u_xlat16_8.x = dot(unity_SHBr, u_xlat16_6);
    u_xlat16_8.y = dot(unity_SHBg, u_xlat16_6);
    u_xlat16_8.z = dot(unity_SHBb, u_xlat16_6);
    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_8.xyz;
    u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat4.w = 1.0;
    u_xlat16_8.x = dot(unity_SHAr, u_xlat4);
    u_xlat16_8.y = dot(unity_SHAg, u_xlat4);
    u_xlat16_8.z = dot(unity_SHAb, u_xlat4);
    u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_8.xyz;
    vs_TEXCOORD1.xyz = u_xlat16_5.xyz;
    u_xlat1.x = u_xlat3.y * _ProjectionParams.x;
    u_xlat7.w = u_xlat1.x * 0.5;
    u_xlat7.xz = u_xlat3.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.z = u_xlat1.z;
    u_xlat3.xy = u_xlat7.zz + u_xlat7.xw;
    vs_TEXCOORD2 = u_xlat3;
    vs_TEXCOORD4.xyw = u_xlat3.xyw;
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD3.w = 0.0;
    u_xlat1.x = u_xlat2.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat2.x + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat2.z + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat2.w + u_xlat1.x;
    vs_TEXCOORD3.z = (-u_xlat1.x);
    vs_TEXCOORD5.w = 0.0;
    vs_TEXCOORD5.xyz = u_xlat9.xyz;
    u_xlat9.xyz = (-u_xlat9.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD6.w = 0.0;
    vs_TEXCOORD6.xyz = u_xlat4.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].www + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * in_POSITION0.yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.zzz + u_xlat1.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.www + u_xlat1.xyz;
    vs_TEXCOORD7.xyz = u_xlat1.xyz * vec3(-1.0, -1.0, 1.0);
    vs_TEXCOORD7.w = 0.0;
    u_xlat1.xyz = in_TANGENT0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat0 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0 = inversesqrt(u_xlat0);
    u_xlat1.xyz = vec3(u_xlat0) * u_xlat1.xyz;
    vs_TEXCOORD8.xyz = u_xlat1.xyz;
    vs_TEXCOORD8.w = 0.0;
    u_xlat2.xyz = u_xlat1.yzx * u_xlat4.zxy;
    u_xlat1.xyz = u_xlat4.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
    u_xlat0 = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD9.xyz = vec3(u_xlat0) * u_xlat1.xyz;
    vs_TEXCOORD9.w = 0.0;
    u_xlat0 = u_xlat9.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat9.x + u_xlat0;
    vs_TEXCOORD10.w = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat9.z + u_xlat0;
    vs_TEXCOORD10.xyz = u_xlat9.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	float _NormalMapScale;
uniform 	float _Normal01_U_Speed;
uniform 	float _Normal01_VSpeed;
uniform 	float _NormalMapBias;
uniform 	float _Normal02_U_Speed;
uniform 	float _Normal02_V_Speed;
uniform 	float _RefractionIntensity;
uniform 	float _OpacityByDepth;
uniform 	float _SpecularIntensity;
uniform 	vec3 _ES_MoonDirection;
uniform 	vec3 _ES_SunDirection;
uniform 	float _Gloss;
uniform 	float _ShoreTransparency;
uniform 	float _SpecularPower;
uniform 	vec4 _ShallowColor;
uniform 	float _ShoreFade;
uniform 	vec4 _DeepColor;
uniform 	float _DeepColorDepth;
uniform 	float _DeepColorFade;
uniform 	vec4 _DistortionIntensity;
uniform 	float _SSRDistortion;
uniform 	float _SSRDistortion_Shore;
uniform 	float _SSRIntensity;
uniform 	float _ReflectionIntensity;
uniform 	float _FresnelPower;
uniform 	float _ShoreReflectionFade;
uniform 	mediump float _ProjectUVScale;
uniform 	vec4 _ReflectionSkyCubeMap_HDR;
uniform lowp sampler2D _Normal01;
uniform lowp sampler2D _Normal02;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _SceneScaledBufferBeforTransParent;
uniform lowp samplerCube _ReflectionSkyCubeMap;
uniform lowp sampler2D _SSRTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD8;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec3 u_xlat1;
mediump float u_xlat16_1;
lowp vec3 u_xlat10_1;
bool u_xlatb1;
vec4 u_xlat2;
lowp vec4 u_xlat10_2;
bool u_xlatb2;
mediump vec3 u_xlat16_3;
lowp vec4 u_xlat10_3;
vec3 u_xlat4;
bool u_xlatb4;
vec3 u_xlat5;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
lowp vec3 u_xlat10_7;
mediump vec3 u_xlat16_8;
vec3 u_xlat9;
vec3 u_xlat10;
vec3 u_xlat11;
mediump float u_xlat16_12;
float u_xlat13;
vec3 u_xlat14;
vec3 u_xlat16;
float u_xlat25;
bool u_xlatb25;
float u_xlat26;
vec2 u_xlat30;
mediump float u_xlat16_36;
float u_xlat37;
float u_xlat38;
bool u_xlatb38;
float u_xlat40;
void main()
{
    u_xlat16_0.w = -1.0;
    u_xlat1.xy = vs_TEXCOORD5.zx * vec2(vec2(_ProjectUVScale, _ProjectUVScale));
    u_xlat2.w = _Time.y * _Normal02_V_Speed + u_xlat1.x;
    u_xlat2.yz = _Time.yy * vec2(_Normal01_VSpeed, _Normal02_U_Speed) + u_xlat1.xy;
    u_xlat2.x = _Time.y * _Normal01_U_Speed + u_xlat1.y;
    u_xlat10_1.xyz = texture(_Normal01, u_xlat2.xy, _NormalMapBias).xyz;
    u_xlat10_2.xyz = texture(_Normal02, u_xlat2.zw, _NormalMapBias).xyz;
    u_xlat16_0.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_3.xyz = u_xlat10_2.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.wwz;
    u_xlat16_0.xy = u_xlat16_0.xy * vec2(_NormalMapScale);
    u_xlat16_3.xy = u_xlat16_3.xy * vec2(_NormalMapScale);
    u_xlat16_0.z = -1.0;
    u_xlat16_0.xyz = u_xlat16_0.xzy + u_xlat16_3.xzy;
    u_xlat1.xyz = u_xlat16_0.xzy * _DistortionIntensity.xyz;
    u_xlat2.x = vs_TEXCOORD8.x;
    u_xlat2.y = vs_TEXCOORD9.x;
    u_xlat2.z = vs_TEXCOORD6.x;
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat4.x = vs_TEXCOORD8.y;
    u_xlat4.y = vs_TEXCOORD9.y;
    u_xlat4.z = vs_TEXCOORD6.y;
    u_xlat2.y = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat4.x = vs_TEXCOORD8.z;
    u_xlat4.y = vs_TEXCOORD9.z;
    u_xlat4.z = vs_TEXCOORD6.z;
    u_xlat2.z = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat1.xy = u_xlat1.xy * vec2(_SSRDistortion);
    u_xlat25 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat25 = inversesqrt(u_xlat25);
    u_xlat2.xyz = vec3(u_xlat25) * u_xlat2.xyz;
    u_xlat4.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat25 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat25 = inversesqrt(u_xlat25);
    u_xlat5.xyz = vec3(u_xlat25) * u_xlat4.xyz;
    u_xlat37 = dot((-u_xlat5.xyz), u_xlat2.xyz);
    u_xlat37 = u_xlat37 + u_xlat37;
    u_xlat2.xyz = u_xlat2.xyz * (-vec3(u_xlat37)) + (-u_xlat5.xyz);
    u_xlat10_2 = textureLod(_ReflectionSkyCubeMap, u_xlat2.xyz, 0.0);
    u_xlat16_36 = u_xlat10_2.w + -1.0;
    u_xlat16_36 = _ReflectionSkyCubeMap_HDR.w * u_xlat16_36 + 1.0;
    u_xlat16_36 = log2(u_xlat16_36);
    u_xlat16_36 = u_xlat16_36 * _ReflectionSkyCubeMap_HDR.y;
    u_xlat16_36 = exp2(u_xlat16_36);
    u_xlat16_36 = u_xlat16_36 * _ReflectionSkyCubeMap_HDR.x;
    u_xlat6.xy = u_xlat16_0.xz * vec2(vec2(_RefractionIntensity, _RefractionIntensity));
    u_xlat37 = float(1.0) / vs_TEXCOORD4.w;
    u_xlat37 = u_xlat37 * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat37 = min(max(u_xlat37, 0.0), 1.0);
#else
    u_xlat37 = clamp(u_xlat37, 0.0, 1.0);
#endif
    u_xlat6.xy = vec2(u_xlat37) * u_xlat6.xy;
    u_xlat6.xy = u_xlat6.xy * vs_TEXCOORD4.ww;
    u_xlat30.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat37 = texture(_CameraDepthTexture, u_xlat30.xy).x;
    u_xlat37 = _ZBufferParams.z * u_xlat37 + _ZBufferParams.w;
    u_xlat37 = float(1.0) / u_xlat37;
    u_xlat37 = u_xlat37 + (-vs_TEXCOORD4.w);
#ifdef UNITY_ADRENO_ES3
    u_xlat37 = min(max(u_xlat37, 0.0), 1.0);
#else
    u_xlat37 = clamp(u_xlat37, 0.0, 1.0);
#endif
    u_xlat6.xy = vec2(u_xlat37) * u_xlat6.xy;
    u_xlat6.z = 0.0;
    u_xlat7.xyz = u_xlat6.xyz + vs_TEXCOORD4.xyw;
    u_xlat7.xy = u_xlat7.xy / u_xlat7.zz;
    u_xlat37 = texture(_CameraDepthTexture, u_xlat7.xy).x;
    u_xlat37 = _ZBufferParams.z * u_xlat37 + _ZBufferParams.w;
    u_xlat37 = float(1.0) / u_xlat37;
    u_xlat37 = u_xlat37 + (-vs_TEXCOORD4.w);
#ifdef UNITY_ADRENO_ES3
    u_xlat37 = min(max(u_xlat37, 0.0), 1.0);
#else
    u_xlat37 = clamp(u_xlat37, 0.0, 1.0);
#endif
    u_xlat6.xyz = vec3(u_xlat37) * u_xlat6.xyz + vs_TEXCOORD4.xyw;
    u_xlat30.xy = u_xlat6.xy / u_xlat6.zz;
    u_xlat6.xy = u_xlat6.xy / vs_TEXCOORD4.ww;
    u_xlat10_7.xyz = texture(_SceneScaledBufferBeforTransParent, u_xlat6.xy).xyz;
    u_xlat37 = texture(_CameraDepthTexture, u_xlat30.xy).x;
    u_xlat37 = _ZBufferParams.z * u_xlat37 + _ZBufferParams.w;
    u_xlat37 = float(1.0) / u_xlat37;
    u_xlat37 = u_xlat37 + (-vs_TEXCOORD4.w);
    u_xlat38 = float(1.0) / _SSRDistortion_Shore;
    u_xlat38 = u_xlat37 * u_xlat38;
#ifdef UNITY_ADRENO_ES3
    u_xlat38 = min(max(u_xlat38, 0.0), 1.0);
#else
    u_xlat38 = clamp(u_xlat38, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat1.xy * vec2(u_xlat38);
    u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD4.ww + vs_TEXCOORD4.xy;
    u_xlat1.xy = u_xlat1.xy / vs_TEXCOORD4.ww;
    u_xlat10_3 = texture(_SSRTexture, u_xlat1.xy).wxyz;
    u_xlat16_6.xyz = (-vec3(u_xlat16_36)) * u_xlat10_2.xyz + u_xlat10_3.yzw;
    u_xlat16_8.xyz = u_xlat10_2.xyz * vec3(u_xlat16_36);
    u_xlat16_3.x = u_xlat10_3.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat2.xyz = u_xlat16_6.xyz * vec3(vec3(_SSRIntensity, _SSRIntensity, _SSRIntensity));
    u_xlat2.xyz = u_xlat16_3.xxx * u_xlat2.xyz + u_xlat16_8.xyz;
    u_xlat1.x = 0.100000001 / _DeepColorDepth;
    u_xlat1.x = u_xlat1.x * u_xlat37;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.x = max(u_xlat1.x, 9.99999975e-05);
    u_xlat1.x = log2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _DeepColorFade;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat13 = float(1.0) / _ShoreTransparency;
    u_xlat38 = u_xlat13 * u_xlat37;
#ifdef UNITY_ADRENO_ES3
    u_xlat38 = min(max(u_xlat38, 0.0), 1.0);
#else
    u_xlat38 = clamp(u_xlat38, 0.0, 1.0);
#endif
    u_xlat38 = max(u_xlat38, 9.99999975e-05);
    u_xlat38 = log2(u_xlat38);
    u_xlat38 = u_xlat38 * _ShoreFade;
    u_xlat38 = exp2(u_xlat38);
    u_xlat6.xyz = _ShallowColor.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat6.xyz = vec3(u_xlat38) * u_xlat6.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat9.xyz = (-u_xlat6.xyz) * u_xlat10_7.xyz + _DeepColor.xyz;
    u_xlat10.xyz = u_xlat10_7.xyz * u_xlat6.xyz;
    u_xlat9.xyz = u_xlat1.xxx * u_xlat9.xyz + u_xlat10.xyz;
    u_xlat2.xyz = u_xlat2.xyz + (-u_xlat9.xyz);
    u_xlat1.x = float(1.0) / _ShoreReflectionFade;
    u_xlat1.x = u_xlat1.x * u_xlat37;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat40 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat40 = inversesqrt(u_xlat40);
    u_xlat11.xyz = vec3(u_xlat40) * vs_TEXCOORD6.xyz;
    u_xlat40 = dot(u_xlat5.xyz, u_xlat11.xyz);
    u_xlat40 = (-u_xlat40) + 1.0;
    u_xlat40 = max(u_xlat40, 9.99999975e-05);
    u_xlat40 = log2(u_xlat40);
    u_xlat5.x = u_xlat40 * _FresnelPower;
    u_xlat40 = u_xlat40 * _SpecularPower;
    u_xlat40 = exp2(u_xlat40);
    u_xlat5.x = exp2(u_xlat5.x);
    u_xlat5.x = u_xlat5.x * _ReflectionIntensity;
    u_xlat1.x = u_xlat1.x * u_xlat5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat2.xyz = u_xlat1.xxx * u_xlat2.xyz + u_xlat9.xyz;
    u_xlat2.xyz = (-u_xlat6.xyz) * u_xlat10_7.xyz + u_xlat2.xyz;
    u_xlat2.xyz = vec3(u_xlat38) * u_xlat2.xyz + u_xlat10.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(0.0>=_ES_MoonDirection.y);
#else
    u_xlatb1 = 0.0>=_ES_MoonDirection.y;
#endif
    u_xlat5.xyz = (bool(u_xlatb1)) ? _ES_SunDirection.xyz : _ES_MoonDirection.xyz;
    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat25) + u_xlat5.xyz;
    u_xlat1.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
    u_xlat16_0.y = 1.0;
    u_xlat16_1 = dot(u_xlat16_0.xyz, u_xlat16_0.xyz);
    u_xlat16_1 = inversesqrt(u_xlat16_1);
    u_xlat16_5.xyz = u_xlat16_0.xyz * vec3(u_xlat16_1);
    u_xlat1.x = dot(u_xlat16_5.xyz, u_xlat4.xyz);
    u_xlat1.x = max(u_xlat1.x, 9.99999975e-05);
    u_xlat1.x = log2(u_xlat1.x);
    u_xlat25 = _Gloss * 128.0;
    u_xlat1.x = u_xlat1.x * u_xlat25;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _SpecularIntensity;
    u_xlat1.x = max(u_xlat1.x, 0.0);
    u_xlat1.x = min(u_xlat1.x, 16.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb25 = !!(_ES_MoonDirection.y>=9.99999975e-05);
#else
    u_xlatb25 = _ES_MoonDirection.y>=9.99999975e-05;
#endif
    u_xlat25 = u_xlatb25 ? 1.0 : float(0.0);
    u_xlat38 = _ES_MoonDirection.y + -1.0;
    u_xlat25 = u_xlat25 * u_xlat38 + 1.0;
    u_xlat4.xyz = vec3(u_xlat25) * _LightColor0.xyz;
    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
    u_xlat1.x = u_xlat37 + -1.0;
    u_xlat1.x = u_xlat13 * u_xlat1.x;
    u_xlat1.x = u_xlat1.x * 0.100000001;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat1.xxx * u_xlat4.xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat40) + u_xlat2.xyz;
    u_xlat2.xyz = vs_TEXCOORD5.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat38 = u_xlat2.y * _HeigtFogParams.x;
    u_xlat4.x = u_xlat38 * -1.44269502;
    u_xlat4.x = exp2(u_xlat4.x);
    u_xlat4.x = (-u_xlat4.x) + 1.0;
    u_xlat4.x = u_xlat4.x / u_xlat38;
#ifdef UNITY_ADRENO_ES3
    u_xlatb38 = !!(0.00999999978<abs(u_xlat38));
#else
    u_xlatb38 = 0.00999999978<abs(u_xlat38);
#endif
    u_xlat16_0.x = (u_xlatb38) ? u_xlat4.x : 1.0;
    u_xlat38 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat38 = sqrt(u_xlat38);
    u_xlat4.x = u_xlat38 * _HeigtFogParams.y;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat4.x;
    u_xlat16_0.x = exp2((-u_xlat16_0.x));
    u_xlat16_0.x = (-u_xlat16_0.x) + 1.0;
    u_xlat4.x = u_xlat2.y * _HeigtFogParams2.x;
    u_xlat16.x = u_xlat4.x * -1.44269502;
    u_xlat16.x = exp2(u_xlat16.x);
    u_xlat16.x = (-u_xlat16.x) + 1.0;
    u_xlat16.x = u_xlat16.x / u_xlat4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(0.00999999978<abs(u_xlat4.x));
#else
    u_xlatb4 = 0.00999999978<abs(u_xlat4.x);
#endif
    u_xlat16_12 = (u_xlatb4) ? u_xlat16.x : 1.0;
    u_xlat4.x = u_xlat38 * _HeigtFogParams2.y;
    u_xlat16_12 = u_xlat16_12 * u_xlat4.x;
    u_xlat16_12 = exp2((-u_xlat16_12));
    u_xlat16_0.y = (-u_xlat16_12) + 1.0;
    u_xlat16_0.xy = max(u_xlat16_0.xy, vec2(0.0, 0.0));
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat4.x = u_xlat38 * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat16_12 = (-u_xlat4.x) + 2.0;
    u_xlat16_12 = u_xlat16_12 * u_xlat4.x;
    u_xlat4.x = u_xlat16_12 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat4.x = u_xlat4.x + 1.0;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat4.x;
    u_xlat4.x = min(u_xlat16_0.x, _HeigtFogColBase.w);
    u_xlat16.x = (-u_xlat4.x) + 1.0;
    u_xlat5.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat5.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat5.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat5.xyz);
    u_xlat14.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!((-u_xlat2.x)>=u_xlat14.x);
#else
    u_xlatb2 = (-u_xlat2.x)>=u_xlat14.x;
#endif
    u_xlat14.x = u_xlat38 * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat14.x = min(max(u_xlat14.x, 0.0), 1.0);
#else
    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
#endif
    u_xlat26 = u_xlat38 + (-_HeigtFogRamp.w);
    u_xlat26 = u_xlat26 * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat26 = min(max(u_xlat26, 0.0), 1.0);
#else
    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);
#endif
    u_xlat38 = (-u_xlat14.x) + 2.0;
    u_xlat14.x = u_xlat38 * u_xlat14.x;
    u_xlat38 = u_xlat14.x * _HeigtFogColDelta.w;
    u_xlat2.x = (u_xlatb2) ? u_xlat38 : u_xlat14.x;
    u_xlat2.x = log2(u_xlat2.x);
    u_xlat2.x = u_xlat2.x * unity_FogColor.w;
    u_xlat2.x = exp2(u_xlat2.x);
    u_xlat2.x = min(u_xlat2.x, _HeigtFogColBase.w);
    u_xlat14.x = vs_TEXCOORD5.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat14.x = min(max(u_xlat14.x, 0.0), 1.0);
#else
    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
#endif
    u_xlat16_0.x = (-u_xlat14.x) + 2.0;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat14.x;
    u_xlat5.xyz = u_xlat16_0.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat6.xyz = (-u_xlat5.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat14.xyz = vec3(u_xlat26) * u_xlat6.xyz + u_xlat5.xyz;
    u_xlat2.yzw = u_xlat2.xxx * u_xlat14.xyz;
    u_xlat2.x = (-u_xlat2.x) + 1.0;
    u_xlat2 = u_xlat16.xxxx * u_xlat2;
    u_xlat16.x = vs_TEXCOORD5.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat16.x = min(max(u_xlat16.x, 0.0), 1.0);
#else
    u_xlat16.x = clamp(u_xlat16.x, 0.0, 1.0);
#endif
    u_xlat16.xyz = u_xlat16.xxx * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    u_xlat14.xyz = u_xlat16.xyz * u_xlat4.xxx + u_xlat2.yzw;
    u_xlat0.xyz = u_xlat2.xxx * u_xlat1.xyz + u_xlat14.xyz;
    u_xlat1.x = 0.100000001 / _OpacityByDepth;
    u_xlat1.x = u_xlat1.x * u_xlat37;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat0.w = u_xlat1.x * vs_COLOR0.w;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "MSAA_INTERPOLATION" "MHY_SHADER_MIDDLE" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	mediump float _MHYZBias;
uniform 	vec4 hlslcc_mtx4x4_mhyJitteredVP[4];
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
out highp vec4 vs_TEXCOORD9;
out highp vec4 vs_TEXCOORD10;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
vec4 u_xlat4;
bool u_xlatb4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
mediump vec4 u_xlat16_6;
vec4 u_xlat7;
mediump vec3 u_xlat16_8;
float u_xlat11;
vec3 u_xlat13;
mediump float u_xlat16_14;
float u_xlat27;
bool u_xlatb27;
float u_xlat29;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4_mhyJitteredVP[1];
    u_xlat2 = hlslcc_mtx4x4_mhyJitteredVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4_mhyJitteredVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4_mhyJitteredVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat3.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    u_xlat3.xyw = u_xlat2.xyw;
    gl_Position = u_xlat3;
    vs_COLOR0 = in_COLOR0;
    u_xlat2.xyw = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat27 = u_xlat2.y * _HeigtFogParams.x;
    u_xlat4.x = u_xlat27 * -1.44269502;
    u_xlat4.x = exp2(u_xlat4.x);
    u_xlat4.x = (-u_xlat4.x) + 1.0;
    u_xlat4.x = u_xlat4.x / u_xlat27;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(0.00999999978<abs(u_xlat27));
#else
    u_xlatb27 = 0.00999999978<abs(u_xlat27);
#endif
    u_xlat16_5.x = (u_xlatb27) ? u_xlat4.x : 1.0;
    u_xlat27 = dot(u_xlat2.xyw, u_xlat2.xyw);
    u_xlat27 = sqrt(u_xlat27);
    u_xlat4.x = u_xlat27 * _HeigtFogParams.y;
    u_xlat16_5.x = u_xlat4.x * u_xlat16_5.x;
    u_xlat16_5.x = exp2((-u_xlat16_5.x));
    u_xlat16_5.x = (-u_xlat16_5.x) + 1.0;
    u_xlat4.x = u_xlat2.y * _HeigtFogParams2.x;
    u_xlat13.x = u_xlat4.x * -1.44269502;
    u_xlat13.x = exp2(u_xlat13.x);
    u_xlat13.x = (-u_xlat13.x) + 1.0;
    u_xlat13.x = u_xlat13.x / u_xlat4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(0.00999999978<abs(u_xlat4.x));
#else
    u_xlatb4 = 0.00999999978<abs(u_xlat4.x);
#endif
    u_xlat16_14 = (u_xlatb4) ? u_xlat13.x : 1.0;
    u_xlat4.x = u_xlat27 * _HeigtFogParams2.y;
    u_xlat16_14 = u_xlat4.x * u_xlat16_14;
    u_xlat16_14 = exp2((-u_xlat16_14));
    u_xlat16_5.y = (-u_xlat16_14) + 1.0;
    u_xlat16_5.xy = max(u_xlat16_5.xy, vec2(0.0, 0.0));
    u_xlat16_5.x = u_xlat16_5.y + u_xlat16_5.x;
    u_xlat4.x = u_xlat27 * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat16_14 = (-u_xlat4.x) + 2.0;
    u_xlat16_14 = u_xlat4.x * u_xlat16_14;
    u_xlat4.x = u_xlat16_14 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat4.x = u_xlat4.x + 1.0;
    u_xlat16_5.x = u_xlat4.x * u_xlat16_5.x;
    u_xlat4.x = min(u_xlat16_5.x, _HeigtFogColBase.w);
    u_xlat13.x = (-u_xlat4.x) + 1.0;
    u_xlat6.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat6.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat6.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat2.x = dot(u_xlat2.xyw, u_xlat6.xyz);
    u_xlat11 = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!((-u_xlat2.x)>=u_xlat11);
#else
    u_xlatb2 = (-u_xlat2.x)>=u_xlat11;
#endif
    u_xlat11 = u_xlat27 * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat11 = min(max(u_xlat11, 0.0), 1.0);
#else
    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
#endif
    u_xlat27 = u_xlat27 + (-_HeigtFogRamp.w);
    u_xlat27 = u_xlat27 * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
    u_xlat29 = (-u_xlat11) + 2.0;
    u_xlat11 = u_xlat29 * u_xlat11;
    u_xlat29 = u_xlat11 * _HeigtFogColDelta.w;
    u_xlat2.x = (u_xlatb2) ? u_xlat29 : u_xlat11;
    u_xlat2.x = log2(u_xlat2.x);
    u_xlat2.x = u_xlat2.x * unity_FogColor.w;
    u_xlat2.x = exp2(u_xlat2.x);
    u_xlat2.x = min(u_xlat2.x, _HeigtFogColBase.w);
    u_xlat11 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat11 = min(max(u_xlat11, 0.0), 1.0);
#else
    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
#endif
    u_xlat16_5.x = (-u_xlat11) + 2.0;
    u_xlat16_5.x = u_xlat11 * u_xlat16_5.x;
    u_xlat6.xyz = u_xlat16_5.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat7.xyz = (-u_xlat6.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat6.xyz = vec3(u_xlat27) * u_xlat7.xyz + u_xlat6.xyz;
    u_xlat6.xyz = u_xlat2.xxx * u_xlat6.xyz;
    u_xlat27 = (-u_xlat2.x) + 1.0;
    vs_TEXCOORD0.w = u_xlat13.x * u_xlat27;
    u_xlat2.xyw = u_xlat13.xxx * u_xlat6.xyz;
    u_xlat27 = u_xlat0.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
    u_xlat13.xyz = vec3(u_xlat27) * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    vs_TEXCOORD0.xyz = u_xlat13.xyz * u_xlat4.xxx + u_xlat2.xyw;
    u_xlat4.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat4.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat4.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat27 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat4.xyz = vec3(u_xlat27) * u_xlat4.xyz;
    u_xlat16_5.x = u_xlat4.y * u_xlat4.y;
    u_xlat16_5.x = u_xlat4.x * u_xlat4.x + (-u_xlat16_5.x);
    u_xlat16_6 = u_xlat4.yzzx * u_xlat4.xyzz;
    u_xlat16_8.x = dot(unity_SHBr, u_xlat16_6);
    u_xlat16_8.y = dot(unity_SHBg, u_xlat16_6);
    u_xlat16_8.z = dot(unity_SHBb, u_xlat16_6);
    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_8.xyz;
    u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat4.w = 1.0;
    u_xlat16_8.x = dot(unity_SHAr, u_xlat4);
    u_xlat16_8.y = dot(unity_SHAg, u_xlat4);
    u_xlat16_8.z = dot(unity_SHAb, u_xlat4);
    u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_8.xyz;
    vs_TEXCOORD1.xyz = u_xlat16_5.xyz;
    vs_TEXCOORD1.w = 1.0;
    u_xlat27 = u_xlat3.y * _ProjectionParams.x;
    u_xlat7.w = u_xlat27 * 0.5;
    u_xlat7.xz = u_xlat3.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.z = u_xlat2.z;
    u_xlat3.xy = u_xlat7.zz + u_xlat7.xw;
    vs_TEXCOORD2 = u_xlat3;
    vs_TEXCOORD4.xyw = u_xlat3.xyw;
    u_xlat27 = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat27 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat27;
    u_xlat27 = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat27;
    u_xlat27 = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat27;
    vs_TEXCOORD3.z = (-u_xlat27);
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD3.w = 0.0;
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD5.w = 0.0;
    vs_TEXCOORD6.xyz = u_xlat4.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[1].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].www + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * in_POSITION0.yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.zzz + u_xlat1.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.www + u_xlat1.xyz;
    vs_TEXCOORD7.xyz = u_xlat1.xyz * vec3(-1.0, -1.0, 1.0);
    vs_TEXCOORD7.w = 0.0;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat27 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat1.xyz = vec3(u_xlat27) * u_xlat1.xyz;
    vs_TEXCOORD8.xyz = u_xlat1.xyz;
    vs_TEXCOORD8.w = 0.0;
    u_xlat2.xyz = u_xlat1.yzx * u_xlat4.zxy;
    u_xlat1.xyz = u_xlat4.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
    u_xlat27 = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD9.xyz = vec3(u_xlat27) * u_xlat1.xyz;
    vs_TEXCOORD9.w = 0.0;
    u_xlat27 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat27 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat27;
    vs_TEXCOORD10.w = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat27;
    vs_TEXCOORD10.xyz = u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	float _NormalMapScale;
uniform 	float _Normal01_U_Speed;
uniform 	float _Normal01_VSpeed;
uniform 	float _NormalMapBias;
uniform 	float _Normal02_U_Speed;
uniform 	float _Normal02_V_Speed;
uniform 	float _RefractionIntensity;
uniform 	float _OpacityByDepth;
uniform 	float _SpecularIntensity;
uniform 	vec3 _ES_MoonDirection;
uniform 	vec3 _ES_SunDirection;
uniform 	float _Gloss;
uniform 	float _ShoreTransparency;
uniform 	float _SpecularPower;
uniform 	vec4 _ShallowColor;
uniform 	float _ShoreFade;
uniform 	vec4 _DeepColor;
uniform 	float _DeepColorDepth;
uniform 	float _DeepColorFade;
uniform 	vec4 _DistortionIntensity;
uniform 	float _SSRDistortion;
uniform 	float _SSRDistortion_Shore;
uniform 	float _SSRIntensity;
uniform 	float _ReflectionIntensity;
uniform 	float _FresnelPower;
uniform 	float _ShoreReflectionFade;
uniform 	mediump float _ProjectUVScale;
uniform 	vec4 _ReflectionSkyCubeMap_HDR;
uniform lowp sampler2D _Normal01;
uniform lowp sampler2D _Normal02;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _SceneScaledBufferBeforTransParent;
uniform lowp samplerCube _ReflectionSkyCubeMap;
uniform lowp sampler2D _SSRTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD8;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec3 u_xlat1;
mediump float u_xlat16_1;
lowp vec3 u_xlat10_1;
bool u_xlatb1;
vec4 u_xlat2;
lowp vec4 u_xlat10_2;
bool u_xlatb2;
mediump vec3 u_xlat16_3;
lowp vec4 u_xlat10_3;
vec3 u_xlat4;
bool u_xlatb4;
vec3 u_xlat5;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
lowp vec3 u_xlat10_7;
mediump vec3 u_xlat16_8;
vec3 u_xlat9;
vec3 u_xlat10;
vec3 u_xlat11;
mediump float u_xlat16_12;
float u_xlat13;
vec3 u_xlat14;
vec3 u_xlat16;
float u_xlat25;
bool u_xlatb25;
float u_xlat26;
vec2 u_xlat30;
mediump float u_xlat16_36;
float u_xlat37;
float u_xlat38;
bool u_xlatb38;
float u_xlat40;
void main()
{
    u_xlat16_0.w = -1.0;
    u_xlat1.xy = vs_TEXCOORD5.zx * vec2(vec2(_ProjectUVScale, _ProjectUVScale));
    u_xlat2.w = _Time.y * _Normal02_V_Speed + u_xlat1.x;
    u_xlat2.yz = _Time.yy * vec2(_Normal01_VSpeed, _Normal02_U_Speed) + u_xlat1.xy;
    u_xlat2.x = _Time.y * _Normal01_U_Speed + u_xlat1.y;
    u_xlat10_1.xyz = texture(_Normal01, u_xlat2.xy, _NormalMapBias).xyz;
    u_xlat10_2.xyz = texture(_Normal02, u_xlat2.zw, _NormalMapBias).xyz;
    u_xlat16_0.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_3.xyz = u_xlat10_2.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.wwz;
    u_xlat16_0.xy = u_xlat16_0.xy * vec2(_NormalMapScale);
    u_xlat16_3.xy = u_xlat16_3.xy * vec2(_NormalMapScale);
    u_xlat16_0.z = -1.0;
    u_xlat16_0.xyz = u_xlat16_0.xzy + u_xlat16_3.xzy;
    u_xlat1.xyz = u_xlat16_0.xzy * _DistortionIntensity.xyz;
    u_xlat2.x = vs_TEXCOORD8.x;
    u_xlat2.y = vs_TEXCOORD9.x;
    u_xlat2.z = vs_TEXCOORD6.x;
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat4.x = vs_TEXCOORD8.y;
    u_xlat4.y = vs_TEXCOORD9.y;
    u_xlat4.z = vs_TEXCOORD6.y;
    u_xlat2.y = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat4.x = vs_TEXCOORD8.z;
    u_xlat4.y = vs_TEXCOORD9.z;
    u_xlat4.z = vs_TEXCOORD6.z;
    u_xlat2.z = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat1.xy = u_xlat1.xy * vec2(_SSRDistortion);
    u_xlat25 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat25 = inversesqrt(u_xlat25);
    u_xlat2.xyz = vec3(u_xlat25) * u_xlat2.xyz;
    u_xlat4.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat25 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat25 = inversesqrt(u_xlat25);
    u_xlat5.xyz = vec3(u_xlat25) * u_xlat4.xyz;
    u_xlat37 = dot((-u_xlat5.xyz), u_xlat2.xyz);
    u_xlat37 = u_xlat37 + u_xlat37;
    u_xlat2.xyz = u_xlat2.xyz * (-vec3(u_xlat37)) + (-u_xlat5.xyz);
    u_xlat10_2 = textureLod(_ReflectionSkyCubeMap, u_xlat2.xyz, 0.0);
    u_xlat16_36 = u_xlat10_2.w + -1.0;
    u_xlat16_36 = _ReflectionSkyCubeMap_HDR.w * u_xlat16_36 + 1.0;
    u_xlat16_36 = log2(u_xlat16_36);
    u_xlat16_36 = u_xlat16_36 * _ReflectionSkyCubeMap_HDR.y;
    u_xlat16_36 = exp2(u_xlat16_36);
    u_xlat16_36 = u_xlat16_36 * _ReflectionSkyCubeMap_HDR.x;
    u_xlat6.xy = u_xlat16_0.xz * vec2(vec2(_RefractionIntensity, _RefractionIntensity));
    u_xlat37 = float(1.0) / vs_TEXCOORD4.w;
    u_xlat37 = u_xlat37 * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat37 = min(max(u_xlat37, 0.0), 1.0);
#else
    u_xlat37 = clamp(u_xlat37, 0.0, 1.0);
#endif
    u_xlat6.xy = vec2(u_xlat37) * u_xlat6.xy;
    u_xlat6.xy = u_xlat6.xy * vs_TEXCOORD4.ww;
    u_xlat30.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat37 = texture(_CameraDepthTexture, u_xlat30.xy).x;
    u_xlat37 = _ZBufferParams.z * u_xlat37 + _ZBufferParams.w;
    u_xlat37 = float(1.0) / u_xlat37;
    u_xlat37 = u_xlat37 + (-vs_TEXCOORD4.w);
#ifdef UNITY_ADRENO_ES3
    u_xlat37 = min(max(u_xlat37, 0.0), 1.0);
#else
    u_xlat37 = clamp(u_xlat37, 0.0, 1.0);
#endif
    u_xlat6.xy = vec2(u_xlat37) * u_xlat6.xy;
    u_xlat6.z = 0.0;
    u_xlat7.xyz = u_xlat6.xyz + vs_TEXCOORD4.xyw;
    u_xlat7.xy = u_xlat7.xy / u_xlat7.zz;
    u_xlat37 = texture(_CameraDepthTexture, u_xlat7.xy).x;
    u_xlat37 = _ZBufferParams.z * u_xlat37 + _ZBufferParams.w;
    u_xlat37 = float(1.0) / u_xlat37;
    u_xlat37 = u_xlat37 + (-vs_TEXCOORD4.w);
#ifdef UNITY_ADRENO_ES3
    u_xlat37 = min(max(u_xlat37, 0.0), 1.0);
#else
    u_xlat37 = clamp(u_xlat37, 0.0, 1.0);
#endif
    u_xlat6.xyz = vec3(u_xlat37) * u_xlat6.xyz + vs_TEXCOORD4.xyw;
    u_xlat30.xy = u_xlat6.xy / u_xlat6.zz;
    u_xlat6.xy = u_xlat6.xy / vs_TEXCOORD4.ww;
    u_xlat10_7.xyz = texture(_SceneScaledBufferBeforTransParent, u_xlat6.xy).xyz;
    u_xlat37 = texture(_CameraDepthTexture, u_xlat30.xy).x;
    u_xlat37 = _ZBufferParams.z * u_xlat37 + _ZBufferParams.w;
    u_xlat37 = float(1.0) / u_xlat37;
    u_xlat37 = u_xlat37 + (-vs_TEXCOORD4.w);
    u_xlat38 = float(1.0) / _SSRDistortion_Shore;
    u_xlat38 = u_xlat37 * u_xlat38;
#ifdef UNITY_ADRENO_ES3
    u_xlat38 = min(max(u_xlat38, 0.0), 1.0);
#else
    u_xlat38 = clamp(u_xlat38, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat1.xy * vec2(u_xlat38);
    u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD4.ww + vs_TEXCOORD4.xy;
    u_xlat1.xy = u_xlat1.xy / vs_TEXCOORD4.ww;
    u_xlat10_3 = texture(_SSRTexture, u_xlat1.xy).wxyz;
    u_xlat16_6.xyz = (-vec3(u_xlat16_36)) * u_xlat10_2.xyz + u_xlat10_3.yzw;
    u_xlat16_8.xyz = u_xlat10_2.xyz * vec3(u_xlat16_36);
    u_xlat16_3.x = u_xlat10_3.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat2.xyz = u_xlat16_6.xyz * vec3(vec3(_SSRIntensity, _SSRIntensity, _SSRIntensity));
    u_xlat2.xyz = u_xlat16_3.xxx * u_xlat2.xyz + u_xlat16_8.xyz;
    u_xlat1.x = 0.100000001 / _DeepColorDepth;
    u_xlat1.x = u_xlat1.x * u_xlat37;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.x = max(u_xlat1.x, 9.99999975e-05);
    u_xlat1.x = log2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _DeepColorFade;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat13 = float(1.0) / _ShoreTransparency;
    u_xlat38 = u_xlat13 * u_xlat37;
#ifdef UNITY_ADRENO_ES3
    u_xlat38 = min(max(u_xlat38, 0.0), 1.0);
#else
    u_xlat38 = clamp(u_xlat38, 0.0, 1.0);
#endif
    u_xlat38 = max(u_xlat38, 9.99999975e-05);
    u_xlat38 = log2(u_xlat38);
    u_xlat38 = u_xlat38 * _ShoreFade;
    u_xlat38 = exp2(u_xlat38);
    u_xlat6.xyz = _ShallowColor.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat6.xyz = vec3(u_xlat38) * u_xlat6.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat9.xyz = (-u_xlat6.xyz) * u_xlat10_7.xyz + _DeepColor.xyz;
    u_xlat10.xyz = u_xlat10_7.xyz * u_xlat6.xyz;
    u_xlat9.xyz = u_xlat1.xxx * u_xlat9.xyz + u_xlat10.xyz;
    u_xlat2.xyz = u_xlat2.xyz + (-u_xlat9.xyz);
    u_xlat1.x = float(1.0) / _ShoreReflectionFade;
    u_xlat1.x = u_xlat1.x * u_xlat37;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat40 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat40 = inversesqrt(u_xlat40);
    u_xlat11.xyz = vec3(u_xlat40) * vs_TEXCOORD6.xyz;
    u_xlat40 = dot(u_xlat5.xyz, u_xlat11.xyz);
    u_xlat40 = (-u_xlat40) + 1.0;
    u_xlat40 = max(u_xlat40, 9.99999975e-05);
    u_xlat40 = log2(u_xlat40);
    u_xlat5.x = u_xlat40 * _FresnelPower;
    u_xlat40 = u_xlat40 * _SpecularPower;
    u_xlat40 = exp2(u_xlat40);
    u_xlat5.x = exp2(u_xlat5.x);
    u_xlat5.x = u_xlat5.x * _ReflectionIntensity;
    u_xlat1.x = u_xlat1.x * u_xlat5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat2.xyz = u_xlat1.xxx * u_xlat2.xyz + u_xlat9.xyz;
    u_xlat2.xyz = (-u_xlat6.xyz) * u_xlat10_7.xyz + u_xlat2.xyz;
    u_xlat2.xyz = vec3(u_xlat38) * u_xlat2.xyz + u_xlat10.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(0.0>=_ES_MoonDirection.y);
#else
    u_xlatb1 = 0.0>=_ES_MoonDirection.y;
#endif
    u_xlat5.xyz = (bool(u_xlatb1)) ? _ES_SunDirection.xyz : _ES_MoonDirection.xyz;
    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat25) + u_xlat5.xyz;
    u_xlat1.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
    u_xlat16_0.y = 1.0;
    u_xlat16_1 = dot(u_xlat16_0.xyz, u_xlat16_0.xyz);
    u_xlat16_1 = inversesqrt(u_xlat16_1);
    u_xlat16_5.xyz = u_xlat16_0.xyz * vec3(u_xlat16_1);
    u_xlat1.x = dot(u_xlat16_5.xyz, u_xlat4.xyz);
    u_xlat1.x = max(u_xlat1.x, 9.99999975e-05);
    u_xlat1.x = log2(u_xlat1.x);
    u_xlat25 = _Gloss * 128.0;
    u_xlat1.x = u_xlat1.x * u_xlat25;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _SpecularIntensity;
    u_xlat1.x = max(u_xlat1.x, 0.0);
    u_xlat1.x = min(u_xlat1.x, 16.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb25 = !!(_ES_MoonDirection.y>=9.99999975e-05);
#else
    u_xlatb25 = _ES_MoonDirection.y>=9.99999975e-05;
#endif
    u_xlat25 = u_xlatb25 ? 1.0 : float(0.0);
    u_xlat38 = _ES_MoonDirection.y + -1.0;
    u_xlat25 = u_xlat25 * u_xlat38 + 1.0;
    u_xlat4.xyz = vec3(u_xlat25) * _LightColor0.xyz;
    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
    u_xlat1.x = u_xlat37 + -1.0;
    u_xlat1.x = u_xlat13 * u_xlat1.x;
    u_xlat1.x = u_xlat1.x * 0.100000001;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat1.xxx * u_xlat4.xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat40) + u_xlat2.xyz;
    u_xlat2.xyz = vs_TEXCOORD5.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat38 = u_xlat2.y * _HeigtFogParams.x;
    u_xlat4.x = u_xlat38 * -1.44269502;
    u_xlat4.x = exp2(u_xlat4.x);
    u_xlat4.x = (-u_xlat4.x) + 1.0;
    u_xlat4.x = u_xlat4.x / u_xlat38;
#ifdef UNITY_ADRENO_ES3
    u_xlatb38 = !!(0.00999999978<abs(u_xlat38));
#else
    u_xlatb38 = 0.00999999978<abs(u_xlat38);
#endif
    u_xlat16_0.x = (u_xlatb38) ? u_xlat4.x : 1.0;
    u_xlat38 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat38 = sqrt(u_xlat38);
    u_xlat4.x = u_xlat38 * _HeigtFogParams.y;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat4.x;
    u_xlat16_0.x = exp2((-u_xlat16_0.x));
    u_xlat16_0.x = (-u_xlat16_0.x) + 1.0;
    u_xlat4.x = u_xlat2.y * _HeigtFogParams2.x;
    u_xlat16.x = u_xlat4.x * -1.44269502;
    u_xlat16.x = exp2(u_xlat16.x);
    u_xlat16.x = (-u_xlat16.x) + 1.0;
    u_xlat16.x = u_xlat16.x / u_xlat4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(0.00999999978<abs(u_xlat4.x));
#else
    u_xlatb4 = 0.00999999978<abs(u_xlat4.x);
#endif
    u_xlat16_12 = (u_xlatb4) ? u_xlat16.x : 1.0;
    u_xlat4.x = u_xlat38 * _HeigtFogParams2.y;
    u_xlat16_12 = u_xlat16_12 * u_xlat4.x;
    u_xlat16_12 = exp2((-u_xlat16_12));
    u_xlat16_0.y = (-u_xlat16_12) + 1.0;
    u_xlat16_0.xy = max(u_xlat16_0.xy, vec2(0.0, 0.0));
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat4.x = u_xlat38 * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat16_12 = (-u_xlat4.x) + 2.0;
    u_xlat16_12 = u_xlat16_12 * u_xlat4.x;
    u_xlat4.x = u_xlat16_12 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat4.x = u_xlat4.x + 1.0;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat4.x;
    u_xlat4.x = min(u_xlat16_0.x, _HeigtFogColBase.w);
    u_xlat16.x = (-u_xlat4.x) + 1.0;
    u_xlat5.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat5.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat5.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat5.xyz);
    u_xlat14.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!((-u_xlat2.x)>=u_xlat14.x);
#else
    u_xlatb2 = (-u_xlat2.x)>=u_xlat14.x;
#endif
    u_xlat14.x = u_xlat38 * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat14.x = min(max(u_xlat14.x, 0.0), 1.0);
#else
    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
#endif
    u_xlat26 = u_xlat38 + (-_HeigtFogRamp.w);
    u_xlat26 = u_xlat26 * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat26 = min(max(u_xlat26, 0.0), 1.0);
#else
    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);
#endif
    u_xlat38 = (-u_xlat14.x) + 2.0;
    u_xlat14.x = u_xlat38 * u_xlat14.x;
    u_xlat38 = u_xlat14.x * _HeigtFogColDelta.w;
    u_xlat2.x = (u_xlatb2) ? u_xlat38 : u_xlat14.x;
    u_xlat2.x = log2(u_xlat2.x);
    u_xlat2.x = u_xlat2.x * unity_FogColor.w;
    u_xlat2.x = exp2(u_xlat2.x);
    u_xlat2.x = min(u_xlat2.x, _HeigtFogColBase.w);
    u_xlat14.x = vs_TEXCOORD5.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat14.x = min(max(u_xlat14.x, 0.0), 1.0);
#else
    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
#endif
    u_xlat16_0.x = (-u_xlat14.x) + 2.0;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat14.x;
    u_xlat5.xyz = u_xlat16_0.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat6.xyz = (-u_xlat5.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat14.xyz = vec3(u_xlat26) * u_xlat6.xyz + u_xlat5.xyz;
    u_xlat2.yzw = u_xlat2.xxx * u_xlat14.xyz;
    u_xlat2.x = (-u_xlat2.x) + 1.0;
    u_xlat2 = u_xlat16.xxxx * u_xlat2;
    u_xlat16.x = vs_TEXCOORD5.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat16.x = min(max(u_xlat16.x, 0.0), 1.0);
#else
    u_xlat16.x = clamp(u_xlat16.x, 0.0, 1.0);
#endif
    u_xlat16.xyz = u_xlat16.xxx * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    u_xlat14.xyz = u_xlat16.xyz * u_xlat4.xxx + u_xlat2.yzw;
    u_xlat0.xyz = u_xlat2.xxx * u_xlat1.xyz + u_xlat14.xyz;
    u_xlat1.x = 0.100000001 / _OpacityByDepth;
    u_xlat1.x = u_xlat1.x * u_xlat37;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat0.w = u_xlat1.x * vs_COLOR0.w;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" "MSAA_INTERPOLATION" "MHY_SHADER_MIDDLE" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	mediump float _MHYZBias;
uniform 	vec4 hlslcc_mtx4x4_mhyJitteredVP[4];
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
out highp vec4 vs_TEXCOORD9;
out highp vec4 vs_TEXCOORD10;
float u_xlat0;
int u_xlati0;
vec4 u_xlat1;
bool u_xlatb1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
bool u_xlatb4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
mediump vec4 u_xlat16_6;
vec4 u_xlat7;
mediump vec3 u_xlat16_8;
vec3 u_xlat9;
float u_xlat10;
float u_xlat13;
bool u_xlatb13;
mediump float u_xlat16_14;
float u_xlat22;
float u_xlat28;
float u_xlat31;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat9.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4_mhyJitteredVP[1];
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[3] * u_xlat2.wwww + u_xlat1;
    u_xlat3.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    u_xlat3.xyw = u_xlat1.xyw;
    gl_Position = u_xlat3;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.xyw = u_xlat9.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat4.x = u_xlat1.y * _HeigtFogParams.x;
    u_xlat13 = u_xlat4.x * -1.44269502;
    u_xlat13 = exp2(u_xlat13);
    u_xlat13 = (-u_xlat13) + 1.0;
    u_xlat13 = u_xlat13 / u_xlat4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(0.00999999978<abs(u_xlat4.x));
#else
    u_xlatb4 = 0.00999999978<abs(u_xlat4.x);
#endif
    u_xlat16_5.x = (u_xlatb4) ? u_xlat13 : 1.0;
    u_xlat4.x = dot(u_xlat1.xyw, u_xlat1.xyw);
    u_xlat4.x = sqrt(u_xlat4.x);
    u_xlat13 = u_xlat4.x * _HeigtFogParams.y;
    u_xlat16_5.x = u_xlat13 * u_xlat16_5.x;
    u_xlat16_5.x = exp2((-u_xlat16_5.x));
    u_xlat16_5.x = (-u_xlat16_5.x) + 1.0;
    u_xlat13 = u_xlat1.y * _HeigtFogParams2.x;
    u_xlat22 = u_xlat13 * -1.44269502;
    u_xlat22 = exp2(u_xlat22);
    u_xlat22 = (-u_xlat22) + 1.0;
    u_xlat22 = u_xlat22 / u_xlat13;
#ifdef UNITY_ADRENO_ES3
    u_xlatb13 = !!(0.00999999978<abs(u_xlat13));
#else
    u_xlatb13 = 0.00999999978<abs(u_xlat13);
#endif
    u_xlat16_14 = (u_xlatb13) ? u_xlat22 : 1.0;
    u_xlat13 = u_xlat4.x * _HeigtFogParams2.y;
    u_xlat16_14 = u_xlat13 * u_xlat16_14;
    u_xlat16_14 = exp2((-u_xlat16_14));
    u_xlat16_5.y = (-u_xlat16_14) + 1.0;
    u_xlat16_5.xy = max(u_xlat16_5.xy, vec2(0.0, 0.0));
    u_xlat16_5.x = u_xlat16_5.y + u_xlat16_5.x;
    u_xlat13 = u_xlat4.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat13 = min(max(u_xlat13, 0.0), 1.0);
#else
    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
#endif
    u_xlat16_14 = (-u_xlat13) + 2.0;
    u_xlat16_14 = u_xlat13 * u_xlat16_14;
    u_xlat13 = u_xlat16_14 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat13 = u_xlat13 + 1.0;
    u_xlat16_5.x = u_xlat13 * u_xlat16_5.x;
    u_xlat13 = min(u_xlat16_5.x, _HeigtFogColBase.w);
    u_xlat22 = (-u_xlat13) + 1.0;
    u_xlat31 = _ProjectionParams.z * 0.999899983;
    u_xlat6.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat6.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat6.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat1.x = dot(u_xlat1.xyw, u_xlat6.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!((-u_xlat1.x)>=u_xlat31);
#else
    u_xlatb1 = (-u_xlat1.x)>=u_xlat31;
#endif
    u_xlat10 = u_xlat4.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat10 = min(max(u_xlat10, 0.0), 1.0);
#else
    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
#endif
    u_xlat28 = u_xlat4.x + (-_HeigtFogRamp.w);
    u_xlat28 = u_xlat28 * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat28 = min(max(u_xlat28, 0.0), 1.0);
#else
    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
#endif
    u_xlat4.x = (-u_xlat10) + 2.0;
    u_xlat10 = u_xlat10 * u_xlat4.x;
    u_xlat4.x = u_xlat10 * _HeigtFogColDelta.w;
    u_xlat1.x = (u_xlatb1) ? u_xlat4.x : u_xlat10;
    u_xlat1.x = log2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * unity_FogColor.w;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat1.x = min(u_xlat1.x, _HeigtFogColBase.w);
    u_xlat10 = u_xlat9.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat10 = min(max(u_xlat10, 0.0), 1.0);
#else
    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
#endif
    u_xlat16_5.x = (-u_xlat10) + 2.0;
    u_xlat16_5.x = u_xlat10 * u_xlat16_5.x;
    u_xlat6.xyz = u_xlat16_5.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat7.xyz = (-u_xlat6.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat6.xyz = vec3(u_xlat28) * u_xlat7.xyz + u_xlat6.xyz;
    u_xlat6.xyz = u_xlat1.xxx * u_xlat6.xyz;
    u_xlat1.x = (-u_xlat1.x) + 1.0;
    vs_TEXCOORD0.w = u_xlat22 * u_xlat1.x;
    u_xlat1.xyw = vec3(u_xlat22) * u_xlat6.xyz;
    u_xlat4.x = u_xlat9.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat4.xzw = u_xlat4.xxx * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    vs_TEXCOORD0.xyz = u_xlat4.xzw * vec3(u_xlat13) + u_xlat1.xyw;
    vs_TEXCOORD1.w = 1.0;
    u_xlat4.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat4.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat4.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat1.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
    u_xlat16_5.x = u_xlat4.y * u_xlat4.y;
    u_xlat16_5.x = u_xlat4.x * u_xlat4.x + (-u_xlat16_5.x);
    u_xlat16_6 = u_xlat4.yzzx * u_xlat4.xyzz;
    u_xlat16_8.x = dot(unity_SHBr, u_xlat16_6);
    u_xlat16_8.y = dot(unity_SHBg, u_xlat16_6);
    u_xlat16_8.z = dot(unity_SHBb, u_xlat16_6);
    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_8.xyz;
    u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat4.w = 1.0;
    u_xlat16_8.x = dot(unity_SHAr, u_xlat4);
    u_xlat16_8.y = dot(unity_SHAg, u_xlat4);
    u_xlat16_8.z = dot(unity_SHAb, u_xlat4);
    u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_8.xyz;
    vs_TEXCOORD1.xyz = u_xlat16_5.xyz;
    u_xlat1.x = u_xlat3.y * _ProjectionParams.x;
    u_xlat7.w = u_xlat1.x * 0.5;
    u_xlat7.xz = u_xlat3.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.z = u_xlat1.z;
    u_xlat3.xy = u_xlat7.zz + u_xlat7.xw;
    vs_TEXCOORD2 = u_xlat3;
    vs_TEXCOORD4.xyw = u_xlat3.xyw;
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD3.w = 0.0;
    u_xlat1.x = u_xlat2.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat2.x + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat2.z + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat2.w + u_xlat1.x;
    vs_TEXCOORD3.z = (-u_xlat1.x);
    vs_TEXCOORD5.w = 0.0;
    vs_TEXCOORD5.xyz = u_xlat9.xyz;
    u_xlat9.xyz = (-u_xlat9.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD6.w = 0.0;
    vs_TEXCOORD6.xyz = u_xlat4.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].www + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * in_POSITION0.yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.zzz + u_xlat1.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.www + u_xlat1.xyz;
    vs_TEXCOORD7.xyz = u_xlat1.xyz * vec3(-1.0, -1.0, 1.0);
    vs_TEXCOORD7.w = 0.0;
    u_xlat1.xyz = in_TANGENT0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat0 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0 = inversesqrt(u_xlat0);
    u_xlat1.xyz = vec3(u_xlat0) * u_xlat1.xyz;
    vs_TEXCOORD8.xyz = u_xlat1.xyz;
    vs_TEXCOORD8.w = 0.0;
    u_xlat2.xyz = u_xlat1.yzx * u_xlat4.zxy;
    u_xlat1.xyz = u_xlat4.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
    u_xlat0 = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD9.xyz = vec3(u_xlat0) * u_xlat1.xyz;
    vs_TEXCOORD9.w = 0.0;
    u_xlat0 = u_xlat9.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat9.x + u_xlat0;
    vs_TEXCOORD10.w = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat9.z + u_xlat0;
    vs_TEXCOORD10.xyz = u_xlat9.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	float _NormalMapScale;
uniform 	float _Normal01_U_Speed;
uniform 	float _Normal01_VSpeed;
uniform 	float _NormalMapBias;
uniform 	float _Normal02_U_Speed;
uniform 	float _Normal02_V_Speed;
uniform 	float _RefractionIntensity;
uniform 	float _OpacityByDepth;
uniform 	float _SpecularIntensity;
uniform 	vec3 _ES_MoonDirection;
uniform 	vec3 _ES_SunDirection;
uniform 	float _Gloss;
uniform 	float _ShoreTransparency;
uniform 	float _SpecularPower;
uniform 	vec4 _ShallowColor;
uniform 	float _ShoreFade;
uniform 	vec4 _DeepColor;
uniform 	float _DeepColorDepth;
uniform 	float _DeepColorFade;
uniform 	vec4 _DistortionIntensity;
uniform 	float _SSRDistortion;
uniform 	float _SSRDistortion_Shore;
uniform 	float _SSRIntensity;
uniform 	float _ReflectionIntensity;
uniform 	float _FresnelPower;
uniform 	float _ShoreReflectionFade;
uniform 	mediump float _ProjectUVScale;
uniform 	vec4 _ReflectionSkyCubeMap_HDR;
uniform lowp sampler2D _Normal01;
uniform lowp sampler2D _Normal02;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _SceneScaledBufferBeforTransParent;
uniform lowp samplerCube _ReflectionSkyCubeMap;
uniform lowp sampler2D _SSRTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD8;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec3 u_xlat1;
mediump float u_xlat16_1;
lowp vec3 u_xlat10_1;
bool u_xlatb1;
vec4 u_xlat2;
lowp vec4 u_xlat10_2;
bool u_xlatb2;
mediump vec3 u_xlat16_3;
lowp vec4 u_xlat10_3;
vec3 u_xlat4;
bool u_xlatb4;
vec3 u_xlat5;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
lowp vec3 u_xlat10_7;
mediump vec3 u_xlat16_8;
vec3 u_xlat9;
vec3 u_xlat10;
vec3 u_xlat11;
mediump float u_xlat16_12;
float u_xlat13;
vec3 u_xlat14;
vec3 u_xlat16;
float u_xlat25;
bool u_xlatb25;
float u_xlat26;
vec2 u_xlat30;
mediump float u_xlat16_36;
float u_xlat37;
float u_xlat38;
bool u_xlatb38;
float u_xlat40;
void main()
{
    u_xlat16_0.w = -1.0;
    u_xlat1.xy = vs_TEXCOORD5.zx * vec2(vec2(_ProjectUVScale, _ProjectUVScale));
    u_xlat2.w = _Time.y * _Normal02_V_Speed + u_xlat1.x;
    u_xlat2.yz = _Time.yy * vec2(_Normal01_VSpeed, _Normal02_U_Speed) + u_xlat1.xy;
    u_xlat2.x = _Time.y * _Normal01_U_Speed + u_xlat1.y;
    u_xlat10_1.xyz = texture(_Normal01, u_xlat2.xy, _NormalMapBias).xyz;
    u_xlat10_2.xyz = texture(_Normal02, u_xlat2.zw, _NormalMapBias).xyz;
    u_xlat16_0.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_3.xyz = u_xlat10_2.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.wwz;
    u_xlat16_0.xy = u_xlat16_0.xy * vec2(_NormalMapScale);
    u_xlat16_3.xy = u_xlat16_3.xy * vec2(_NormalMapScale);
    u_xlat16_0.z = -1.0;
    u_xlat16_0.xyz = u_xlat16_0.xzy + u_xlat16_3.xzy;
    u_xlat1.xyz = u_xlat16_0.xzy * _DistortionIntensity.xyz;
    u_xlat2.x = vs_TEXCOORD8.x;
    u_xlat2.y = vs_TEXCOORD9.x;
    u_xlat2.z = vs_TEXCOORD6.x;
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat4.x = vs_TEXCOORD8.y;
    u_xlat4.y = vs_TEXCOORD9.y;
    u_xlat4.z = vs_TEXCOORD6.y;
    u_xlat2.y = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat4.x = vs_TEXCOORD8.z;
    u_xlat4.y = vs_TEXCOORD9.z;
    u_xlat4.z = vs_TEXCOORD6.z;
    u_xlat2.z = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat1.xy = u_xlat1.xy * vec2(_SSRDistortion);
    u_xlat25 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat25 = inversesqrt(u_xlat25);
    u_xlat2.xyz = vec3(u_xlat25) * u_xlat2.xyz;
    u_xlat4.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat25 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat25 = inversesqrt(u_xlat25);
    u_xlat5.xyz = vec3(u_xlat25) * u_xlat4.xyz;
    u_xlat37 = dot((-u_xlat5.xyz), u_xlat2.xyz);
    u_xlat37 = u_xlat37 + u_xlat37;
    u_xlat2.xyz = u_xlat2.xyz * (-vec3(u_xlat37)) + (-u_xlat5.xyz);
    u_xlat10_2 = textureLod(_ReflectionSkyCubeMap, u_xlat2.xyz, 0.0);
    u_xlat16_36 = u_xlat10_2.w + -1.0;
    u_xlat16_36 = _ReflectionSkyCubeMap_HDR.w * u_xlat16_36 + 1.0;
    u_xlat16_36 = log2(u_xlat16_36);
    u_xlat16_36 = u_xlat16_36 * _ReflectionSkyCubeMap_HDR.y;
    u_xlat16_36 = exp2(u_xlat16_36);
    u_xlat16_36 = u_xlat16_36 * _ReflectionSkyCubeMap_HDR.x;
    u_xlat6.xy = u_xlat16_0.xz * vec2(vec2(_RefractionIntensity, _RefractionIntensity));
    u_xlat37 = float(1.0) / vs_TEXCOORD4.w;
    u_xlat37 = u_xlat37 * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat37 = min(max(u_xlat37, 0.0), 1.0);
#else
    u_xlat37 = clamp(u_xlat37, 0.0, 1.0);
#endif
    u_xlat6.xy = vec2(u_xlat37) * u_xlat6.xy;
    u_xlat6.xy = u_xlat6.xy * vs_TEXCOORD4.ww;
    u_xlat30.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat37 = texture(_CameraDepthTexture, u_xlat30.xy).x;
    u_xlat37 = _ZBufferParams.z * u_xlat37 + _ZBufferParams.w;
    u_xlat37 = float(1.0) / u_xlat37;
    u_xlat37 = u_xlat37 + (-vs_TEXCOORD4.w);
#ifdef UNITY_ADRENO_ES3
    u_xlat37 = min(max(u_xlat37, 0.0), 1.0);
#else
    u_xlat37 = clamp(u_xlat37, 0.0, 1.0);
#endif
    u_xlat6.xy = vec2(u_xlat37) * u_xlat6.xy;
    u_xlat6.z = 0.0;
    u_xlat7.xyz = u_xlat6.xyz + vs_TEXCOORD4.xyw;
    u_xlat7.xy = u_xlat7.xy / u_xlat7.zz;
    u_xlat37 = texture(_CameraDepthTexture, u_xlat7.xy).x;
    u_xlat37 = _ZBufferParams.z * u_xlat37 + _ZBufferParams.w;
    u_xlat37 = float(1.0) / u_xlat37;
    u_xlat37 = u_xlat37 + (-vs_TEXCOORD4.w);
#ifdef UNITY_ADRENO_ES3
    u_xlat37 = min(max(u_xlat37, 0.0), 1.0);
#else
    u_xlat37 = clamp(u_xlat37, 0.0, 1.0);
#endif
    u_xlat6.xyz = vec3(u_xlat37) * u_xlat6.xyz + vs_TEXCOORD4.xyw;
    u_xlat30.xy = u_xlat6.xy / u_xlat6.zz;
    u_xlat6.xy = u_xlat6.xy / vs_TEXCOORD4.ww;
    u_xlat10_7.xyz = texture(_SceneScaledBufferBeforTransParent, u_xlat6.xy).xyz;
    u_xlat37 = texture(_CameraDepthTexture, u_xlat30.xy).x;
    u_xlat37 = _ZBufferParams.z * u_xlat37 + _ZBufferParams.w;
    u_xlat37 = float(1.0) / u_xlat37;
    u_xlat37 = u_xlat37 + (-vs_TEXCOORD4.w);
    u_xlat38 = float(1.0) / _SSRDistortion_Shore;
    u_xlat38 = u_xlat37 * u_xlat38;
#ifdef UNITY_ADRENO_ES3
    u_xlat38 = min(max(u_xlat38, 0.0), 1.0);
#else
    u_xlat38 = clamp(u_xlat38, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat1.xy * vec2(u_xlat38);
    u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD4.ww + vs_TEXCOORD4.xy;
    u_xlat1.xy = u_xlat1.xy / vs_TEXCOORD4.ww;
    u_xlat10_3 = texture(_SSRTexture, u_xlat1.xy).wxyz;
    u_xlat16_6.xyz = (-vec3(u_xlat16_36)) * u_xlat10_2.xyz + u_xlat10_3.yzw;
    u_xlat16_8.xyz = u_xlat10_2.xyz * vec3(u_xlat16_36);
    u_xlat16_3.x = u_xlat10_3.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat2.xyz = u_xlat16_6.xyz * vec3(vec3(_SSRIntensity, _SSRIntensity, _SSRIntensity));
    u_xlat2.xyz = u_xlat16_3.xxx * u_xlat2.xyz + u_xlat16_8.xyz;
    u_xlat1.x = 0.100000001 / _DeepColorDepth;
    u_xlat1.x = u_xlat1.x * u_xlat37;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.x = max(u_xlat1.x, 9.99999975e-05);
    u_xlat1.x = log2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _DeepColorFade;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat13 = float(1.0) / _ShoreTransparency;
    u_xlat38 = u_xlat13 * u_xlat37;
#ifdef UNITY_ADRENO_ES3
    u_xlat38 = min(max(u_xlat38, 0.0), 1.0);
#else
    u_xlat38 = clamp(u_xlat38, 0.0, 1.0);
#endif
    u_xlat38 = max(u_xlat38, 9.99999975e-05);
    u_xlat38 = log2(u_xlat38);
    u_xlat38 = u_xlat38 * _ShoreFade;
    u_xlat38 = exp2(u_xlat38);
    u_xlat6.xyz = _ShallowColor.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat6.xyz = vec3(u_xlat38) * u_xlat6.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat9.xyz = (-u_xlat6.xyz) * u_xlat10_7.xyz + _DeepColor.xyz;
    u_xlat10.xyz = u_xlat10_7.xyz * u_xlat6.xyz;
    u_xlat9.xyz = u_xlat1.xxx * u_xlat9.xyz + u_xlat10.xyz;
    u_xlat2.xyz = u_xlat2.xyz + (-u_xlat9.xyz);
    u_xlat1.x = float(1.0) / _ShoreReflectionFade;
    u_xlat1.x = u_xlat1.x * u_xlat37;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat40 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat40 = inversesqrt(u_xlat40);
    u_xlat11.xyz = vec3(u_xlat40) * vs_TEXCOORD6.xyz;
    u_xlat40 = dot(u_xlat5.xyz, u_xlat11.xyz);
    u_xlat40 = (-u_xlat40) + 1.0;
    u_xlat40 = max(u_xlat40, 9.99999975e-05);
    u_xlat40 = log2(u_xlat40);
    u_xlat5.x = u_xlat40 * _FresnelPower;
    u_xlat40 = u_xlat40 * _SpecularPower;
    u_xlat40 = exp2(u_xlat40);
    u_xlat5.x = exp2(u_xlat5.x);
    u_xlat5.x = u_xlat5.x * _ReflectionIntensity;
    u_xlat1.x = u_xlat1.x * u_xlat5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat2.xyz = u_xlat1.xxx * u_xlat2.xyz + u_xlat9.xyz;
    u_xlat2.xyz = (-u_xlat6.xyz) * u_xlat10_7.xyz + u_xlat2.xyz;
    u_xlat2.xyz = vec3(u_xlat38) * u_xlat2.xyz + u_xlat10.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(0.0>=_ES_MoonDirection.y);
#else
    u_xlatb1 = 0.0>=_ES_MoonDirection.y;
#endif
    u_xlat5.xyz = (bool(u_xlatb1)) ? _ES_SunDirection.xyz : _ES_MoonDirection.xyz;
    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat25) + u_xlat5.xyz;
    u_xlat1.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
    u_xlat16_0.y = 1.0;
    u_xlat16_1 = dot(u_xlat16_0.xyz, u_xlat16_0.xyz);
    u_xlat16_1 = inversesqrt(u_xlat16_1);
    u_xlat16_5.xyz = u_xlat16_0.xyz * vec3(u_xlat16_1);
    u_xlat1.x = dot(u_xlat16_5.xyz, u_xlat4.xyz);
    u_xlat1.x = max(u_xlat1.x, 9.99999975e-05);
    u_xlat1.x = log2(u_xlat1.x);
    u_xlat25 = _Gloss * 128.0;
    u_xlat1.x = u_xlat1.x * u_xlat25;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _SpecularIntensity;
    u_xlat1.x = max(u_xlat1.x, 0.0);
    u_xlat1.x = min(u_xlat1.x, 16.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb25 = !!(_ES_MoonDirection.y>=9.99999975e-05);
#else
    u_xlatb25 = _ES_MoonDirection.y>=9.99999975e-05;
#endif
    u_xlat25 = u_xlatb25 ? 1.0 : float(0.0);
    u_xlat38 = _ES_MoonDirection.y + -1.0;
    u_xlat25 = u_xlat25 * u_xlat38 + 1.0;
    u_xlat4.xyz = vec3(u_xlat25) * _LightColor0.xyz;
    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
    u_xlat1.x = u_xlat37 + -1.0;
    u_xlat1.x = u_xlat13 * u_xlat1.x;
    u_xlat1.x = u_xlat1.x * 0.100000001;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat1.xxx * u_xlat4.xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat40) + u_xlat2.xyz;
    u_xlat2.xyz = vs_TEXCOORD5.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat38 = u_xlat2.y * _HeigtFogParams.x;
    u_xlat4.x = u_xlat38 * -1.44269502;
    u_xlat4.x = exp2(u_xlat4.x);
    u_xlat4.x = (-u_xlat4.x) + 1.0;
    u_xlat4.x = u_xlat4.x / u_xlat38;
#ifdef UNITY_ADRENO_ES3
    u_xlatb38 = !!(0.00999999978<abs(u_xlat38));
#else
    u_xlatb38 = 0.00999999978<abs(u_xlat38);
#endif
    u_xlat16_0.x = (u_xlatb38) ? u_xlat4.x : 1.0;
    u_xlat38 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat38 = sqrt(u_xlat38);
    u_xlat4.x = u_xlat38 * _HeigtFogParams.y;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat4.x;
    u_xlat16_0.x = exp2((-u_xlat16_0.x));
    u_xlat16_0.x = (-u_xlat16_0.x) + 1.0;
    u_xlat4.x = u_xlat2.y * _HeigtFogParams2.x;
    u_xlat16.x = u_xlat4.x * -1.44269502;
    u_xlat16.x = exp2(u_xlat16.x);
    u_xlat16.x = (-u_xlat16.x) + 1.0;
    u_xlat16.x = u_xlat16.x / u_xlat4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(0.00999999978<abs(u_xlat4.x));
#else
    u_xlatb4 = 0.00999999978<abs(u_xlat4.x);
#endif
    u_xlat16_12 = (u_xlatb4) ? u_xlat16.x : 1.0;
    u_xlat4.x = u_xlat38 * _HeigtFogParams2.y;
    u_xlat16_12 = u_xlat16_12 * u_xlat4.x;
    u_xlat16_12 = exp2((-u_xlat16_12));
    u_xlat16_0.y = (-u_xlat16_12) + 1.0;
    u_xlat16_0.xy = max(u_xlat16_0.xy, vec2(0.0, 0.0));
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat4.x = u_xlat38 * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat16_12 = (-u_xlat4.x) + 2.0;
    u_xlat16_12 = u_xlat16_12 * u_xlat4.x;
    u_xlat4.x = u_xlat16_12 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat4.x = u_xlat4.x + 1.0;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat4.x;
    u_xlat4.x = min(u_xlat16_0.x, _HeigtFogColBase.w);
    u_xlat16.x = (-u_xlat4.x) + 1.0;
    u_xlat5.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat5.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat5.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat5.xyz);
    u_xlat14.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!((-u_xlat2.x)>=u_xlat14.x);
#else
    u_xlatb2 = (-u_xlat2.x)>=u_xlat14.x;
#endif
    u_xlat14.x = u_xlat38 * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat14.x = min(max(u_xlat14.x, 0.0), 1.0);
#else
    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
#endif
    u_xlat26 = u_xlat38 + (-_HeigtFogRamp.w);
    u_xlat26 = u_xlat26 * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat26 = min(max(u_xlat26, 0.0), 1.0);
#else
    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);
#endif
    u_xlat38 = (-u_xlat14.x) + 2.0;
    u_xlat14.x = u_xlat38 * u_xlat14.x;
    u_xlat38 = u_xlat14.x * _HeigtFogColDelta.w;
    u_xlat2.x = (u_xlatb2) ? u_xlat38 : u_xlat14.x;
    u_xlat2.x = log2(u_xlat2.x);
    u_xlat2.x = u_xlat2.x * unity_FogColor.w;
    u_xlat2.x = exp2(u_xlat2.x);
    u_xlat2.x = min(u_xlat2.x, _HeigtFogColBase.w);
    u_xlat14.x = vs_TEXCOORD5.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat14.x = min(max(u_xlat14.x, 0.0), 1.0);
#else
    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
#endif
    u_xlat16_0.x = (-u_xlat14.x) + 2.0;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat14.x;
    u_xlat5.xyz = u_xlat16_0.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat6.xyz = (-u_xlat5.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat14.xyz = vec3(u_xlat26) * u_xlat6.xyz + u_xlat5.xyz;
    u_xlat2.yzw = u_xlat2.xxx * u_xlat14.xyz;
    u_xlat2.x = (-u_xlat2.x) + 1.0;
    u_xlat2 = u_xlat16.xxxx * u_xlat2;
    u_xlat16.x = vs_TEXCOORD5.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat16.x = min(max(u_xlat16.x, 0.0), 1.0);
#else
    u_xlat16.x = clamp(u_xlat16.x, 0.0, 1.0);
#endif
    u_xlat16.xyz = u_xlat16.xxx * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    u_xlat14.xyz = u_xlat16.xyz * u_xlat4.xxx + u_xlat2.yzw;
    u_xlat0.xyz = u_xlat2.xxx * u_xlat1.xyz + u_xlat14.xyz;
    u_xlat1.x = 0.100000001 / _OpacityByDepth;
    u_xlat1.x = u_xlat1.x * u_xlat37;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat0.w = u_xlat1.x * vs_COLOR0.w;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "MSAA_INTERPOLATION" "MHY_SHADER_LOW" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	mediump float _MHYZBias;
uniform 	vec4 hlslcc_mtx4x4_mhyJitteredVP[4];
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
out highp vec4 vs_TEXCOORD9;
out highp vec4 vs_TEXCOORD10;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
vec4 u_xlat4;
bool u_xlatb4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
mediump vec4 u_xlat16_6;
vec4 u_xlat7;
mediump vec3 u_xlat16_8;
float u_xlat11;
vec3 u_xlat13;
mediump float u_xlat16_14;
float u_xlat27;
bool u_xlatb27;
float u_xlat29;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4_mhyJitteredVP[1];
    u_xlat2 = hlslcc_mtx4x4_mhyJitteredVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4_mhyJitteredVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4_mhyJitteredVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat3.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    u_xlat3.xyw = u_xlat2.xyw;
    gl_Position = u_xlat3;
    vs_COLOR0 = in_COLOR0;
    u_xlat2.xyw = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat27 = u_xlat2.y * _HeigtFogParams.x;
    u_xlat4.x = u_xlat27 * -1.44269502;
    u_xlat4.x = exp2(u_xlat4.x);
    u_xlat4.x = (-u_xlat4.x) + 1.0;
    u_xlat4.x = u_xlat4.x / u_xlat27;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(0.00999999978<abs(u_xlat27));
#else
    u_xlatb27 = 0.00999999978<abs(u_xlat27);
#endif
    u_xlat16_5.x = (u_xlatb27) ? u_xlat4.x : 1.0;
    u_xlat27 = dot(u_xlat2.xyw, u_xlat2.xyw);
    u_xlat27 = sqrt(u_xlat27);
    u_xlat4.x = u_xlat27 * _HeigtFogParams.y;
    u_xlat16_5.x = u_xlat4.x * u_xlat16_5.x;
    u_xlat16_5.x = exp2((-u_xlat16_5.x));
    u_xlat16_5.x = (-u_xlat16_5.x) + 1.0;
    u_xlat4.x = u_xlat2.y * _HeigtFogParams2.x;
    u_xlat13.x = u_xlat4.x * -1.44269502;
    u_xlat13.x = exp2(u_xlat13.x);
    u_xlat13.x = (-u_xlat13.x) + 1.0;
    u_xlat13.x = u_xlat13.x / u_xlat4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(0.00999999978<abs(u_xlat4.x));
#else
    u_xlatb4 = 0.00999999978<abs(u_xlat4.x);
#endif
    u_xlat16_14 = (u_xlatb4) ? u_xlat13.x : 1.0;
    u_xlat4.x = u_xlat27 * _HeigtFogParams2.y;
    u_xlat16_14 = u_xlat4.x * u_xlat16_14;
    u_xlat16_14 = exp2((-u_xlat16_14));
    u_xlat16_5.y = (-u_xlat16_14) + 1.0;
    u_xlat16_5.xy = max(u_xlat16_5.xy, vec2(0.0, 0.0));
    u_xlat16_5.x = u_xlat16_5.y + u_xlat16_5.x;
    u_xlat4.x = u_xlat27 * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat16_14 = (-u_xlat4.x) + 2.0;
    u_xlat16_14 = u_xlat4.x * u_xlat16_14;
    u_xlat4.x = u_xlat16_14 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat4.x = u_xlat4.x + 1.0;
    u_xlat16_5.x = u_xlat4.x * u_xlat16_5.x;
    u_xlat4.x = min(u_xlat16_5.x, _HeigtFogColBase.w);
    u_xlat13.x = (-u_xlat4.x) + 1.0;
    u_xlat6.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat6.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat6.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat2.x = dot(u_xlat2.xyw, u_xlat6.xyz);
    u_xlat11 = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!((-u_xlat2.x)>=u_xlat11);
#else
    u_xlatb2 = (-u_xlat2.x)>=u_xlat11;
#endif
    u_xlat11 = u_xlat27 * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat11 = min(max(u_xlat11, 0.0), 1.0);
#else
    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
#endif
    u_xlat27 = u_xlat27 + (-_HeigtFogRamp.w);
    u_xlat27 = u_xlat27 * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
    u_xlat29 = (-u_xlat11) + 2.0;
    u_xlat11 = u_xlat29 * u_xlat11;
    u_xlat29 = u_xlat11 * _HeigtFogColDelta.w;
    u_xlat2.x = (u_xlatb2) ? u_xlat29 : u_xlat11;
    u_xlat2.x = log2(u_xlat2.x);
    u_xlat2.x = u_xlat2.x * unity_FogColor.w;
    u_xlat2.x = exp2(u_xlat2.x);
    u_xlat2.x = min(u_xlat2.x, _HeigtFogColBase.w);
    u_xlat11 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat11 = min(max(u_xlat11, 0.0), 1.0);
#else
    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
#endif
    u_xlat16_5.x = (-u_xlat11) + 2.0;
    u_xlat16_5.x = u_xlat11 * u_xlat16_5.x;
    u_xlat6.xyz = u_xlat16_5.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat7.xyz = (-u_xlat6.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat6.xyz = vec3(u_xlat27) * u_xlat7.xyz + u_xlat6.xyz;
    u_xlat6.xyz = u_xlat2.xxx * u_xlat6.xyz;
    u_xlat27 = (-u_xlat2.x) + 1.0;
    vs_TEXCOORD0.w = u_xlat13.x * u_xlat27;
    u_xlat2.xyw = u_xlat13.xxx * u_xlat6.xyz;
    u_xlat27 = u_xlat0.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
    u_xlat13.xyz = vec3(u_xlat27) * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    vs_TEXCOORD0.xyz = u_xlat13.xyz * u_xlat4.xxx + u_xlat2.xyw;
    u_xlat4.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat4.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat4.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat27 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat4.xyz = vec3(u_xlat27) * u_xlat4.xyz;
    u_xlat16_5.x = u_xlat4.y * u_xlat4.y;
    u_xlat16_5.x = u_xlat4.x * u_xlat4.x + (-u_xlat16_5.x);
    u_xlat16_6 = u_xlat4.yzzx * u_xlat4.xyzz;
    u_xlat16_8.x = dot(unity_SHBr, u_xlat16_6);
    u_xlat16_8.y = dot(unity_SHBg, u_xlat16_6);
    u_xlat16_8.z = dot(unity_SHBb, u_xlat16_6);
    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_8.xyz;
    u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat4.w = 1.0;
    u_xlat16_8.x = dot(unity_SHAr, u_xlat4);
    u_xlat16_8.y = dot(unity_SHAg, u_xlat4);
    u_xlat16_8.z = dot(unity_SHAb, u_xlat4);
    u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_8.xyz;
    vs_TEXCOORD1.xyz = u_xlat16_5.xyz;
    vs_TEXCOORD1.w = 1.0;
    u_xlat27 = u_xlat3.y * _ProjectionParams.x;
    u_xlat7.w = u_xlat27 * 0.5;
    u_xlat7.xz = u_xlat3.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.z = u_xlat2.z;
    u_xlat3.xy = u_xlat7.zz + u_xlat7.xw;
    vs_TEXCOORD2 = u_xlat3;
    vs_TEXCOORD4.xyw = u_xlat3.xyw;
    u_xlat27 = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat27 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat27;
    u_xlat27 = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat27;
    u_xlat27 = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat27;
    vs_TEXCOORD3.z = (-u_xlat27);
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD3.w = 0.0;
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD5.w = 0.0;
    vs_TEXCOORD6.xyz = u_xlat4.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[1].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].www + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * in_POSITION0.yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.zzz + u_xlat1.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.www + u_xlat1.xyz;
    vs_TEXCOORD7.xyz = u_xlat1.xyz * vec3(-1.0, -1.0, 1.0);
    vs_TEXCOORD7.w = 0.0;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat27 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat1.xyz = vec3(u_xlat27) * u_xlat1.xyz;
    vs_TEXCOORD8.xyz = u_xlat1.xyz;
    vs_TEXCOORD8.w = 0.0;
    u_xlat2.xyz = u_xlat1.yzx * u_xlat4.zxy;
    u_xlat1.xyz = u_xlat4.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
    u_xlat27 = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD9.xyz = vec3(u_xlat27) * u_xlat1.xyz;
    vs_TEXCOORD9.w = 0.0;
    u_xlat27 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat27 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat27;
    vs_TEXCOORD10.w = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat27;
    vs_TEXCOORD10.xyz = u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	float _NormalMapScale;
uniform 	float _Normal01_U_Speed;
uniform 	float _Normal01_VSpeed;
uniform 	float _NormalMapBias;
uniform 	float _Normal02_U_Speed;
uniform 	float _Normal02_V_Speed;
uniform 	float _RefractionIntensity;
uniform 	float _OpacityByDepth;
uniform 	float _SpecularIntensity;
uniform 	vec3 _ES_MoonDirection;
uniform 	vec3 _ES_SunDirection;
uniform 	float _Gloss;
uniform 	float _ShoreTransparency;
uniform 	float _SpecularPower;
uniform 	vec4 _ShallowColor;
uniform 	float _ShoreFade;
uniform 	vec4 _DeepColor;
uniform 	float _DeepColorDepth;
uniform 	float _DeepColorFade;
uniform 	vec4 _DistortionIntensity;
uniform 	float _ReflectionIntensity;
uniform 	float _FresnelPower;
uniform 	float _ShoreReflectionFade;
uniform 	mediump float _ProjectUVScale;
uniform 	vec4 _ReflectionSkyCubeMap_HDR;
uniform lowp sampler2D _Normal01;
uniform lowp sampler2D _Normal02;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _SceneScaledBufferBeforTransParent;
uniform lowp samplerCube _ReflectionSkyCubeMap;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD8;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec3 u_xlat1;
lowp vec3 u_xlat10_1;
vec4 u_xlat2;
lowp vec3 u_xlat10_2;
bool u_xlatb2;
mediump vec3 u_xlat16_3;
lowp vec4 u_xlat10_3;
vec3 u_xlat4;
bool u_xlatb4;
vec3 u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
vec3 u_xlat8;
vec3 u_xlat9;
vec3 u_xlat10;
mediump float u_xlat16_11;
float u_xlat13;
vec3 u_xlat15;
mediump vec3 u_xlat16_15;
bool u_xlatb15;
float u_xlat16;
float u_xlat23;
float u_xlat24;
float u_xlat27;
mediump float u_xlat16_33;
float u_xlat34;
mediump float u_xlat16_34;
bool u_xlatb34;
float u_xlat35;
float u_xlat37;
void main()
{
    u_xlat16_0.w = -1.0;
    u_xlat1.xy = vs_TEXCOORD5.zx * vec2(vec2(_ProjectUVScale, _ProjectUVScale));
    u_xlat2.w = _Time.y * _Normal02_V_Speed + u_xlat1.x;
    u_xlat2.yz = _Time.yy * vec2(_Normal01_VSpeed, _Normal02_U_Speed) + u_xlat1.xy;
    u_xlat2.x = _Time.y * _Normal01_U_Speed + u_xlat1.y;
    u_xlat10_1.xyz = texture(_Normal01, u_xlat2.xy, _NormalMapBias).xyz;
    u_xlat10_2.xyz = texture(_Normal02, u_xlat2.zw, _NormalMapBias).xyz;
    u_xlat16_0.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_3.xyz = u_xlat10_2.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.wwz;
    u_xlat16_0.xy = u_xlat16_0.xy * vec2(_NormalMapScale);
    u_xlat16_3.xy = u_xlat16_3.xy * vec2(_NormalMapScale);
    u_xlat16_0.z = -1.0;
    u_xlat16_0.xyz = u_xlat16_0.xzy + u_xlat16_3.xzy;
    u_xlat1.xyz = u_xlat16_0.xzy * _DistortionIntensity.xyz;
    u_xlat2.x = vs_TEXCOORD8.x;
    u_xlat2.y = vs_TEXCOORD9.x;
    u_xlat2.z = vs_TEXCOORD6.x;
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat4.x = vs_TEXCOORD8.y;
    u_xlat4.y = vs_TEXCOORD9.y;
    u_xlat4.z = vs_TEXCOORD6.y;
    u_xlat2.y = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat4.x = vs_TEXCOORD8.z;
    u_xlat4.y = vs_TEXCOORD9.z;
    u_xlat4.z = vs_TEXCOORD6.z;
    u_xlat2.z = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat1.xyz = u_xlat1.xxx * u_xlat2.xyz;
    u_xlat2.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat34 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat34 = inversesqrt(u_xlat34);
    u_xlat4.xyz = vec3(u_xlat34) * u_xlat2.xyz;
    u_xlat35 = dot((-u_xlat4.xyz), u_xlat1.xyz);
    u_xlat35 = u_xlat35 + u_xlat35;
    u_xlat1.xyz = u_xlat1.xyz * (-vec3(u_xlat35)) + (-u_xlat4.xyz);
    u_xlat10_3 = textureLod(_ReflectionSkyCubeMap, u_xlat1.xyz, 0.0);
    u_xlat16_33 = u_xlat10_3.w + -1.0;
    u_xlat16_33 = _ReflectionSkyCubeMap_HDR.w * u_xlat16_33 + 1.0;
    u_xlat16_33 = log2(u_xlat16_33);
    u_xlat16_33 = u_xlat16_33 * _ReflectionSkyCubeMap_HDR.y;
    u_xlat16_33 = exp2(u_xlat16_33);
    u_xlat16_33 = u_xlat16_33 * _ReflectionSkyCubeMap_HDR.x;
    u_xlat1.xy = u_xlat16_0.xz * vec2(vec2(_RefractionIntensity, _RefractionIntensity));
    u_xlat23 = float(1.0) / vs_TEXCOORD4.w;
    u_xlat23 = u_xlat23 * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat23 = min(max(u_xlat23, 0.0), 1.0);
#else
    u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
#endif
    u_xlat1.xy = vec2(u_xlat23) * u_xlat1.xy;
    u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD4.ww;
    u_xlat5.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat23 = texture(_CameraDepthTexture, u_xlat5.xy).x;
    u_xlat23 = _ZBufferParams.z * u_xlat23 + _ZBufferParams.w;
    u_xlat23 = float(1.0) / u_xlat23;
    u_xlat23 = u_xlat23 + (-vs_TEXCOORD4.w);
#ifdef UNITY_ADRENO_ES3
    u_xlat23 = min(max(u_xlat23, 0.0), 1.0);
#else
    u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
#endif
    u_xlat1.xy = vec2(u_xlat23) * u_xlat1.xy;
    u_xlat1.z = 0.0;
    u_xlat5.xyz = u_xlat1.xyz + vs_TEXCOORD4.xyw;
    u_xlat5.xy = u_xlat5.xy / u_xlat5.zz;
    u_xlat35 = texture(_CameraDepthTexture, u_xlat5.xy).x;
    u_xlat35 = _ZBufferParams.z * u_xlat35 + _ZBufferParams.w;
    u_xlat35 = float(1.0) / u_xlat35;
    u_xlat35 = u_xlat35 + (-vs_TEXCOORD4.w);
#ifdef UNITY_ADRENO_ES3
    u_xlat35 = min(max(u_xlat35, 0.0), 1.0);
#else
    u_xlat35 = clamp(u_xlat35, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat35) * u_xlat1.xyz + vs_TEXCOORD4.xyw;
    u_xlat5.xy = u_xlat1.xy / u_xlat1.zz;
    u_xlat1.xy = u_xlat1.xy / vs_TEXCOORD4.ww;
    u_xlat10_1.xyz = texture(_SceneScaledBufferBeforTransParent, u_xlat1.xy).xyz;
    u_xlat35 = texture(_CameraDepthTexture, u_xlat5.xy).x;
    u_xlat35 = _ZBufferParams.z * u_xlat35 + _ZBufferParams.w;
    u_xlat35 = float(1.0) / u_xlat35;
    u_xlat35 = u_xlat35 + (-vs_TEXCOORD4.w);
    u_xlat37 = 0.100000001 / _DeepColorDepth;
    u_xlat37 = u_xlat35 * u_xlat37;
#ifdef UNITY_ADRENO_ES3
    u_xlat37 = min(max(u_xlat37, 0.0), 1.0);
#else
    u_xlat37 = clamp(u_xlat37, 0.0, 1.0);
#endif
    u_xlat37 = max(u_xlat37, 9.99999975e-05);
    u_xlat37 = log2(u_xlat37);
    u_xlat37 = u_xlat37 * _DeepColorFade;
    u_xlat37 = exp2(u_xlat37);
    u_xlat5.x = float(1.0) / _ShoreTransparency;
    u_xlat16 = u_xlat35 * u_xlat5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16 = min(max(u_xlat16, 0.0), 1.0);
#else
    u_xlat16 = clamp(u_xlat16, 0.0, 1.0);
#endif
    u_xlat16 = max(u_xlat16, 9.99999975e-05);
    u_xlat16 = log2(u_xlat16);
    u_xlat16 = u_xlat16 * _ShoreFade;
    u_xlat16 = exp2(u_xlat16);
    u_xlat6.xyz = _ShallowColor.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat6.xyz = vec3(u_xlat16) * u_xlat6.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat7.xyz = (-u_xlat6.xyz) * u_xlat10_1.xyz + _DeepColor.xyz;
    u_xlat8.xyz = u_xlat10_1.xyz * u_xlat6.xyz;
    u_xlat7.xyz = vec3(u_xlat37) * u_xlat7.xyz + u_xlat8.xyz;
    u_xlat9.xyz = vec3(u_xlat16_33) * u_xlat10_3.xyz + (-u_xlat7.xyz);
    u_xlat37 = float(1.0) / _ShoreReflectionFade;
    u_xlat37 = u_xlat35 * u_xlat37;
#ifdef UNITY_ADRENO_ES3
    u_xlat37 = min(max(u_xlat37, 0.0), 1.0);
#else
    u_xlat37 = clamp(u_xlat37, 0.0, 1.0);
#endif
    u_xlat27 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat10.xyz = vec3(u_xlat27) * vs_TEXCOORD6.xyz;
    u_xlat4.x = dot(u_xlat4.xyz, u_xlat10.xyz);
    u_xlat4.x = (-u_xlat4.x) + 1.0;
    u_xlat4.x = max(u_xlat4.x, 9.99999975e-05);
    u_xlat4.x = log2(u_xlat4.x);
    u_xlat15.x = u_xlat4.x * _FresnelPower;
    u_xlat4.x = u_xlat4.x * _SpecularPower;
    u_xlat4.x = exp2(u_xlat4.x);
    u_xlat15.x = exp2(u_xlat15.x);
    u_xlat15.x = u_xlat15.x * _ReflectionIntensity;
    u_xlat15.x = u_xlat37 * u_xlat15.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat15.x = min(max(u_xlat15.x, 0.0), 1.0);
#else
    u_xlat15.x = clamp(u_xlat15.x, 0.0, 1.0);
#endif
    u_xlat15.xyz = u_xlat15.xxx * u_xlat9.xyz + u_xlat7.xyz;
    u_xlat1.xyz = (-u_xlat6.xyz) * u_xlat10_1.xyz + u_xlat15.xyz;
    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz + u_xlat8.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(0.0>=_ES_MoonDirection.y);
#else
    u_xlatb15 = 0.0>=_ES_MoonDirection.y;
#endif
    u_xlat15.xyz = (bool(u_xlatb15)) ? _ES_SunDirection.xyz : _ES_MoonDirection.xyz;
    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat34) + u_xlat15.xyz;
    u_xlat34 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat34 = inversesqrt(u_xlat34);
    u_xlat2.xyz = vec3(u_xlat34) * u_xlat2.xyz;
    u_xlat16_0.y = 1.0;
    u_xlat16_34 = dot(u_xlat16_0.xyz, u_xlat16_0.xyz);
    u_xlat16_34 = inversesqrt(u_xlat16_34);
    u_xlat16_15.xyz = u_xlat16_0.xyz * vec3(u_xlat16_34);
    u_xlat34 = dot(u_xlat16_15.xyz, u_xlat2.xyz);
    u_xlat34 = max(u_xlat34, 9.99999975e-05);
    u_xlat34 = log2(u_xlat34);
    u_xlat2.x = _Gloss * 128.0;
    u_xlat34 = u_xlat34 * u_xlat2.x;
    u_xlat34 = exp2(u_xlat34);
    u_xlat34 = u_xlat34 * _SpecularIntensity;
    u_xlat34 = max(u_xlat34, 0.0);
    u_xlat34 = min(u_xlat34, 16.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(_ES_MoonDirection.y>=9.99999975e-05);
#else
    u_xlatb2 = _ES_MoonDirection.y>=9.99999975e-05;
#endif
    u_xlat2.x = u_xlatb2 ? 1.0 : float(0.0);
    u_xlat13 = _ES_MoonDirection.y + -1.0;
    u_xlat2.x = u_xlat2.x * u_xlat13 + 1.0;
    u_xlat2.xyz = u_xlat2.xxx * _LightColor0.xyz;
    u_xlat2.xyz = vec3(u_xlat34) * u_xlat2.xyz;
    u_xlat34 = u_xlat35 + -1.0;
    u_xlat34 = u_xlat5.x * u_xlat34;
    u_xlat34 = u_xlat34 * 0.100000001;
#ifdef UNITY_ADRENO_ES3
    u_xlat34 = min(max(u_xlat34, 0.0), 1.0);
#else
    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
#endif
    u_xlat2.xyz = vec3(u_xlat34) * u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * u_xlat4.xxx + u_xlat1.xyz;
    u_xlat2.xyz = vs_TEXCOORD5.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat34 = u_xlat2.y * _HeigtFogParams.x;
    u_xlat4.x = u_xlat34 * -1.44269502;
    u_xlat4.x = exp2(u_xlat4.x);
    u_xlat4.x = (-u_xlat4.x) + 1.0;
    u_xlat4.x = u_xlat4.x / u_xlat34;
#ifdef UNITY_ADRENO_ES3
    u_xlatb34 = !!(0.00999999978<abs(u_xlat34));
#else
    u_xlatb34 = 0.00999999978<abs(u_xlat34);
#endif
    u_xlat16_0.x = (u_xlatb34) ? u_xlat4.x : 1.0;
    u_xlat34 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat34 = sqrt(u_xlat34);
    u_xlat4.x = u_xlat34 * _HeigtFogParams.y;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat4.x;
    u_xlat16_0.x = exp2((-u_xlat16_0.x));
    u_xlat16_0.x = (-u_xlat16_0.x) + 1.0;
    u_xlat4.x = u_xlat2.y * _HeigtFogParams2.x;
    u_xlat15.x = u_xlat4.x * -1.44269502;
    u_xlat15.x = exp2(u_xlat15.x);
    u_xlat15.x = (-u_xlat15.x) + 1.0;
    u_xlat15.x = u_xlat15.x / u_xlat4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(0.00999999978<abs(u_xlat4.x));
#else
    u_xlatb4 = 0.00999999978<abs(u_xlat4.x);
#endif
    u_xlat16_11 = (u_xlatb4) ? u_xlat15.x : 1.0;
    u_xlat4.x = u_xlat34 * _HeigtFogParams2.y;
    u_xlat16_11 = u_xlat16_11 * u_xlat4.x;
    u_xlat16_11 = exp2((-u_xlat16_11));
    u_xlat16_0.y = (-u_xlat16_11) + 1.0;
    u_xlat16_0.xy = max(u_xlat16_0.xy, vec2(0.0, 0.0));
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat4.x = u_xlat34 * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat16_11 = (-u_xlat4.x) + 2.0;
    u_xlat16_11 = u_xlat16_11 * u_xlat4.x;
    u_xlat4.x = u_xlat16_11 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat4.x = u_xlat4.x + 1.0;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat4.x;
    u_xlat4.x = min(u_xlat16_0.x, _HeigtFogColBase.w);
    u_xlat15.x = (-u_xlat4.x) + 1.0;
    u_xlat5.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat5.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat5.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat5.xyz);
    u_xlat13 = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!((-u_xlat2.x)>=u_xlat13);
#else
    u_xlatb2 = (-u_xlat2.x)>=u_xlat13;
#endif
    u_xlat13 = u_xlat34 * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat13 = min(max(u_xlat13, 0.0), 1.0);
#else
    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
#endif
    u_xlat34 = u_xlat34 + (-_HeigtFogRamp.w);
    u_xlat34 = u_xlat34 * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat34 = min(max(u_xlat34, 0.0), 1.0);
#else
    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
#endif
    u_xlat24 = (-u_xlat13) + 2.0;
    u_xlat13 = u_xlat24 * u_xlat13;
    u_xlat24 = u_xlat13 * _HeigtFogColDelta.w;
    u_xlat2.x = (u_xlatb2) ? u_xlat24 : u_xlat13;
    u_xlat2.x = log2(u_xlat2.x);
    u_xlat2.x = u_xlat2.x * unity_FogColor.w;
    u_xlat2.x = exp2(u_xlat2.x);
    u_xlat2.x = min(u_xlat2.x, _HeigtFogColBase.w);
    u_xlat13 = vs_TEXCOORD5.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat13 = min(max(u_xlat13, 0.0), 1.0);
#else
    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
#endif
    u_xlat16_0.x = (-u_xlat13) + 2.0;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat13;
    u_xlat5.xyz = u_xlat16_0.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat6.xyz = (-u_xlat5.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat5.xyz = vec3(u_xlat34) * u_xlat6.xyz + u_xlat5.xyz;
    u_xlat5.xyz = u_xlat2.xxx * u_xlat5.xyz;
    u_xlat34 = (-u_xlat2.x) + 1.0;
    u_xlat34 = u_xlat15.x * u_xlat34;
    u_xlat2.xyz = u_xlat15.xxx * u_xlat5.xyz;
    u_xlat15.x = vs_TEXCOORD5.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat15.x = min(max(u_xlat15.x, 0.0), 1.0);
#else
    u_xlat15.x = clamp(u_xlat15.x, 0.0, 1.0);
#endif
    u_xlat15.xyz = u_xlat15.xxx * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    u_xlat2.xyz = u_xlat15.xyz * u_xlat4.xxx + u_xlat2.xyz;
    u_xlat0.xyz = vec3(u_xlat34) * u_xlat1.xyz + u_xlat2.xyz;
    u_xlat1.x = 0.100000001 / _OpacityByDepth;
    u_xlat1.x = u_xlat1.x * u_xlat35;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat0.w = u_xlat1.x * vs_COLOR0.w;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" "MSAA_INTERPOLATION" "MHY_SHADER_LOW" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	mediump float _MHYZBias;
uniform 	vec4 hlslcc_mtx4x4_mhyJitteredVP[4];
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
out highp vec4 vs_TEXCOORD9;
out highp vec4 vs_TEXCOORD10;
float u_xlat0;
int u_xlati0;
vec4 u_xlat1;
bool u_xlatb1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
bool u_xlatb4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
mediump vec4 u_xlat16_6;
vec4 u_xlat7;
mediump vec3 u_xlat16_8;
vec3 u_xlat9;
float u_xlat10;
float u_xlat13;
bool u_xlatb13;
mediump float u_xlat16_14;
float u_xlat22;
float u_xlat28;
float u_xlat31;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat9.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4_mhyJitteredVP[1];
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[3] * u_xlat2.wwww + u_xlat1;
    u_xlat3.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    u_xlat3.xyw = u_xlat1.xyw;
    gl_Position = u_xlat3;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.xyw = u_xlat9.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat4.x = u_xlat1.y * _HeigtFogParams.x;
    u_xlat13 = u_xlat4.x * -1.44269502;
    u_xlat13 = exp2(u_xlat13);
    u_xlat13 = (-u_xlat13) + 1.0;
    u_xlat13 = u_xlat13 / u_xlat4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(0.00999999978<abs(u_xlat4.x));
#else
    u_xlatb4 = 0.00999999978<abs(u_xlat4.x);
#endif
    u_xlat16_5.x = (u_xlatb4) ? u_xlat13 : 1.0;
    u_xlat4.x = dot(u_xlat1.xyw, u_xlat1.xyw);
    u_xlat4.x = sqrt(u_xlat4.x);
    u_xlat13 = u_xlat4.x * _HeigtFogParams.y;
    u_xlat16_5.x = u_xlat13 * u_xlat16_5.x;
    u_xlat16_5.x = exp2((-u_xlat16_5.x));
    u_xlat16_5.x = (-u_xlat16_5.x) + 1.0;
    u_xlat13 = u_xlat1.y * _HeigtFogParams2.x;
    u_xlat22 = u_xlat13 * -1.44269502;
    u_xlat22 = exp2(u_xlat22);
    u_xlat22 = (-u_xlat22) + 1.0;
    u_xlat22 = u_xlat22 / u_xlat13;
#ifdef UNITY_ADRENO_ES3
    u_xlatb13 = !!(0.00999999978<abs(u_xlat13));
#else
    u_xlatb13 = 0.00999999978<abs(u_xlat13);
#endif
    u_xlat16_14 = (u_xlatb13) ? u_xlat22 : 1.0;
    u_xlat13 = u_xlat4.x * _HeigtFogParams2.y;
    u_xlat16_14 = u_xlat13 * u_xlat16_14;
    u_xlat16_14 = exp2((-u_xlat16_14));
    u_xlat16_5.y = (-u_xlat16_14) + 1.0;
    u_xlat16_5.xy = max(u_xlat16_5.xy, vec2(0.0, 0.0));
    u_xlat16_5.x = u_xlat16_5.y + u_xlat16_5.x;
    u_xlat13 = u_xlat4.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat13 = min(max(u_xlat13, 0.0), 1.0);
#else
    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
#endif
    u_xlat16_14 = (-u_xlat13) + 2.0;
    u_xlat16_14 = u_xlat13 * u_xlat16_14;
    u_xlat13 = u_xlat16_14 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat13 = u_xlat13 + 1.0;
    u_xlat16_5.x = u_xlat13 * u_xlat16_5.x;
    u_xlat13 = min(u_xlat16_5.x, _HeigtFogColBase.w);
    u_xlat22 = (-u_xlat13) + 1.0;
    u_xlat31 = _ProjectionParams.z * 0.999899983;
    u_xlat6.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat6.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat6.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat1.x = dot(u_xlat1.xyw, u_xlat6.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!((-u_xlat1.x)>=u_xlat31);
#else
    u_xlatb1 = (-u_xlat1.x)>=u_xlat31;
#endif
    u_xlat10 = u_xlat4.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat10 = min(max(u_xlat10, 0.0), 1.0);
#else
    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
#endif
    u_xlat28 = u_xlat4.x + (-_HeigtFogRamp.w);
    u_xlat28 = u_xlat28 * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat28 = min(max(u_xlat28, 0.0), 1.0);
#else
    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
#endif
    u_xlat4.x = (-u_xlat10) + 2.0;
    u_xlat10 = u_xlat10 * u_xlat4.x;
    u_xlat4.x = u_xlat10 * _HeigtFogColDelta.w;
    u_xlat1.x = (u_xlatb1) ? u_xlat4.x : u_xlat10;
    u_xlat1.x = log2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * unity_FogColor.w;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat1.x = min(u_xlat1.x, _HeigtFogColBase.w);
    u_xlat10 = u_xlat9.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat10 = min(max(u_xlat10, 0.0), 1.0);
#else
    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
#endif
    u_xlat16_5.x = (-u_xlat10) + 2.0;
    u_xlat16_5.x = u_xlat10 * u_xlat16_5.x;
    u_xlat6.xyz = u_xlat16_5.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat7.xyz = (-u_xlat6.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat6.xyz = vec3(u_xlat28) * u_xlat7.xyz + u_xlat6.xyz;
    u_xlat6.xyz = u_xlat1.xxx * u_xlat6.xyz;
    u_xlat1.x = (-u_xlat1.x) + 1.0;
    vs_TEXCOORD0.w = u_xlat22 * u_xlat1.x;
    u_xlat1.xyw = vec3(u_xlat22) * u_xlat6.xyz;
    u_xlat4.x = u_xlat9.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat4.xzw = u_xlat4.xxx * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    vs_TEXCOORD0.xyz = u_xlat4.xzw * vec3(u_xlat13) + u_xlat1.xyw;
    vs_TEXCOORD1.w = 1.0;
    u_xlat4.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat4.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat4.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat1.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
    u_xlat16_5.x = u_xlat4.y * u_xlat4.y;
    u_xlat16_5.x = u_xlat4.x * u_xlat4.x + (-u_xlat16_5.x);
    u_xlat16_6 = u_xlat4.yzzx * u_xlat4.xyzz;
    u_xlat16_8.x = dot(unity_SHBr, u_xlat16_6);
    u_xlat16_8.y = dot(unity_SHBg, u_xlat16_6);
    u_xlat16_8.z = dot(unity_SHBb, u_xlat16_6);
    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_8.xyz;
    u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat4.w = 1.0;
    u_xlat16_8.x = dot(unity_SHAr, u_xlat4);
    u_xlat16_8.y = dot(unity_SHAg, u_xlat4);
    u_xlat16_8.z = dot(unity_SHAb, u_xlat4);
    u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_8.xyz;
    vs_TEXCOORD1.xyz = u_xlat16_5.xyz;
    u_xlat1.x = u_xlat3.y * _ProjectionParams.x;
    u_xlat7.w = u_xlat1.x * 0.5;
    u_xlat7.xz = u_xlat3.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.z = u_xlat1.z;
    u_xlat3.xy = u_xlat7.zz + u_xlat7.xw;
    vs_TEXCOORD2 = u_xlat3;
    vs_TEXCOORD4.xyw = u_xlat3.xyw;
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD3.w = 0.0;
    u_xlat1.x = u_xlat2.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat2.x + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat2.z + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat2.w + u_xlat1.x;
    vs_TEXCOORD3.z = (-u_xlat1.x);
    vs_TEXCOORD5.w = 0.0;
    vs_TEXCOORD5.xyz = u_xlat9.xyz;
    u_xlat9.xyz = (-u_xlat9.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD6.w = 0.0;
    vs_TEXCOORD6.xyz = u_xlat4.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].www + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * in_POSITION0.yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.zzz + u_xlat1.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.www + u_xlat1.xyz;
    vs_TEXCOORD7.xyz = u_xlat1.xyz * vec3(-1.0, -1.0, 1.0);
    vs_TEXCOORD7.w = 0.0;
    u_xlat1.xyz = in_TANGENT0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat0 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0 = inversesqrt(u_xlat0);
    u_xlat1.xyz = vec3(u_xlat0) * u_xlat1.xyz;
    vs_TEXCOORD8.xyz = u_xlat1.xyz;
    vs_TEXCOORD8.w = 0.0;
    u_xlat2.xyz = u_xlat1.yzx * u_xlat4.zxy;
    u_xlat1.xyz = u_xlat4.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
    u_xlat0 = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD9.xyz = vec3(u_xlat0) * u_xlat1.xyz;
    vs_TEXCOORD9.w = 0.0;
    u_xlat0 = u_xlat9.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat9.x + u_xlat0;
    vs_TEXCOORD10.w = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat9.z + u_xlat0;
    vs_TEXCOORD10.xyz = u_xlat9.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	float _NormalMapScale;
uniform 	float _Normal01_U_Speed;
uniform 	float _Normal01_VSpeed;
uniform 	float _NormalMapBias;
uniform 	float _Normal02_U_Speed;
uniform 	float _Normal02_V_Speed;
uniform 	float _RefractionIntensity;
uniform 	float _OpacityByDepth;
uniform 	float _SpecularIntensity;
uniform 	vec3 _ES_MoonDirection;
uniform 	vec3 _ES_SunDirection;
uniform 	float _Gloss;
uniform 	float _ShoreTransparency;
uniform 	float _SpecularPower;
uniform 	vec4 _ShallowColor;
uniform 	float _ShoreFade;
uniform 	vec4 _DeepColor;
uniform 	float _DeepColorDepth;
uniform 	float _DeepColorFade;
uniform 	vec4 _DistortionIntensity;
uniform 	float _ReflectionIntensity;
uniform 	float _FresnelPower;
uniform 	float _ShoreReflectionFade;
uniform 	mediump float _ProjectUVScale;
uniform 	vec4 _ReflectionSkyCubeMap_HDR;
uniform lowp sampler2D _Normal01;
uniform lowp sampler2D _Normal02;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _SceneScaledBufferBeforTransParent;
uniform lowp samplerCube _ReflectionSkyCubeMap;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD8;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec3 u_xlat1;
lowp vec3 u_xlat10_1;
vec4 u_xlat2;
lowp vec3 u_xlat10_2;
bool u_xlatb2;
mediump vec3 u_xlat16_3;
lowp vec4 u_xlat10_3;
vec3 u_xlat4;
bool u_xlatb4;
vec3 u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
vec3 u_xlat8;
vec3 u_xlat9;
vec3 u_xlat10;
mediump float u_xlat16_11;
float u_xlat13;
vec3 u_xlat15;
mediump vec3 u_xlat16_15;
bool u_xlatb15;
float u_xlat16;
float u_xlat23;
float u_xlat24;
float u_xlat27;
mediump float u_xlat16_33;
float u_xlat34;
mediump float u_xlat16_34;
bool u_xlatb34;
float u_xlat35;
float u_xlat37;
void main()
{
    u_xlat16_0.w = -1.0;
    u_xlat1.xy = vs_TEXCOORD5.zx * vec2(vec2(_ProjectUVScale, _ProjectUVScale));
    u_xlat2.w = _Time.y * _Normal02_V_Speed + u_xlat1.x;
    u_xlat2.yz = _Time.yy * vec2(_Normal01_VSpeed, _Normal02_U_Speed) + u_xlat1.xy;
    u_xlat2.x = _Time.y * _Normal01_U_Speed + u_xlat1.y;
    u_xlat10_1.xyz = texture(_Normal01, u_xlat2.xy, _NormalMapBias).xyz;
    u_xlat10_2.xyz = texture(_Normal02, u_xlat2.zw, _NormalMapBias).xyz;
    u_xlat16_0.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_3.xyz = u_xlat10_2.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.wwz;
    u_xlat16_0.xy = u_xlat16_0.xy * vec2(_NormalMapScale);
    u_xlat16_3.xy = u_xlat16_3.xy * vec2(_NormalMapScale);
    u_xlat16_0.z = -1.0;
    u_xlat16_0.xyz = u_xlat16_0.xzy + u_xlat16_3.xzy;
    u_xlat1.xyz = u_xlat16_0.xzy * _DistortionIntensity.xyz;
    u_xlat2.x = vs_TEXCOORD8.x;
    u_xlat2.y = vs_TEXCOORD9.x;
    u_xlat2.z = vs_TEXCOORD6.x;
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat4.x = vs_TEXCOORD8.y;
    u_xlat4.y = vs_TEXCOORD9.y;
    u_xlat4.z = vs_TEXCOORD6.y;
    u_xlat2.y = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat4.x = vs_TEXCOORD8.z;
    u_xlat4.y = vs_TEXCOORD9.z;
    u_xlat4.z = vs_TEXCOORD6.z;
    u_xlat2.z = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat1.xyz = u_xlat1.xxx * u_xlat2.xyz;
    u_xlat2.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat34 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat34 = inversesqrt(u_xlat34);
    u_xlat4.xyz = vec3(u_xlat34) * u_xlat2.xyz;
    u_xlat35 = dot((-u_xlat4.xyz), u_xlat1.xyz);
    u_xlat35 = u_xlat35 + u_xlat35;
    u_xlat1.xyz = u_xlat1.xyz * (-vec3(u_xlat35)) + (-u_xlat4.xyz);
    u_xlat10_3 = textureLod(_ReflectionSkyCubeMap, u_xlat1.xyz, 0.0);
    u_xlat16_33 = u_xlat10_3.w + -1.0;
    u_xlat16_33 = _ReflectionSkyCubeMap_HDR.w * u_xlat16_33 + 1.0;
    u_xlat16_33 = log2(u_xlat16_33);
    u_xlat16_33 = u_xlat16_33 * _ReflectionSkyCubeMap_HDR.y;
    u_xlat16_33 = exp2(u_xlat16_33);
    u_xlat16_33 = u_xlat16_33 * _ReflectionSkyCubeMap_HDR.x;
    u_xlat1.xy = u_xlat16_0.xz * vec2(vec2(_RefractionIntensity, _RefractionIntensity));
    u_xlat23 = float(1.0) / vs_TEXCOORD4.w;
    u_xlat23 = u_xlat23 * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat23 = min(max(u_xlat23, 0.0), 1.0);
#else
    u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
#endif
    u_xlat1.xy = vec2(u_xlat23) * u_xlat1.xy;
    u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD4.ww;
    u_xlat5.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat23 = texture(_CameraDepthTexture, u_xlat5.xy).x;
    u_xlat23 = _ZBufferParams.z * u_xlat23 + _ZBufferParams.w;
    u_xlat23 = float(1.0) / u_xlat23;
    u_xlat23 = u_xlat23 + (-vs_TEXCOORD4.w);
#ifdef UNITY_ADRENO_ES3
    u_xlat23 = min(max(u_xlat23, 0.0), 1.0);
#else
    u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
#endif
    u_xlat1.xy = vec2(u_xlat23) * u_xlat1.xy;
    u_xlat1.z = 0.0;
    u_xlat5.xyz = u_xlat1.xyz + vs_TEXCOORD4.xyw;
    u_xlat5.xy = u_xlat5.xy / u_xlat5.zz;
    u_xlat35 = texture(_CameraDepthTexture, u_xlat5.xy).x;
    u_xlat35 = _ZBufferParams.z * u_xlat35 + _ZBufferParams.w;
    u_xlat35 = float(1.0) / u_xlat35;
    u_xlat35 = u_xlat35 + (-vs_TEXCOORD4.w);
#ifdef UNITY_ADRENO_ES3
    u_xlat35 = min(max(u_xlat35, 0.0), 1.0);
#else
    u_xlat35 = clamp(u_xlat35, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat35) * u_xlat1.xyz + vs_TEXCOORD4.xyw;
    u_xlat5.xy = u_xlat1.xy / u_xlat1.zz;
    u_xlat1.xy = u_xlat1.xy / vs_TEXCOORD4.ww;
    u_xlat10_1.xyz = texture(_SceneScaledBufferBeforTransParent, u_xlat1.xy).xyz;
    u_xlat35 = texture(_CameraDepthTexture, u_xlat5.xy).x;
    u_xlat35 = _ZBufferParams.z * u_xlat35 + _ZBufferParams.w;
    u_xlat35 = float(1.0) / u_xlat35;
    u_xlat35 = u_xlat35 + (-vs_TEXCOORD4.w);
    u_xlat37 = 0.100000001 / _DeepColorDepth;
    u_xlat37 = u_xlat35 * u_xlat37;
#ifdef UNITY_ADRENO_ES3
    u_xlat37 = min(max(u_xlat37, 0.0), 1.0);
#else
    u_xlat37 = clamp(u_xlat37, 0.0, 1.0);
#endif
    u_xlat37 = max(u_xlat37, 9.99999975e-05);
    u_xlat37 = log2(u_xlat37);
    u_xlat37 = u_xlat37 * _DeepColorFade;
    u_xlat37 = exp2(u_xlat37);
    u_xlat5.x = float(1.0) / _ShoreTransparency;
    u_xlat16 = u_xlat35 * u_xlat5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16 = min(max(u_xlat16, 0.0), 1.0);
#else
    u_xlat16 = clamp(u_xlat16, 0.0, 1.0);
#endif
    u_xlat16 = max(u_xlat16, 9.99999975e-05);
    u_xlat16 = log2(u_xlat16);
    u_xlat16 = u_xlat16 * _ShoreFade;
    u_xlat16 = exp2(u_xlat16);
    u_xlat6.xyz = _ShallowColor.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat6.xyz = vec3(u_xlat16) * u_xlat6.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat7.xyz = (-u_xlat6.xyz) * u_xlat10_1.xyz + _DeepColor.xyz;
    u_xlat8.xyz = u_xlat10_1.xyz * u_xlat6.xyz;
    u_xlat7.xyz = vec3(u_xlat37) * u_xlat7.xyz + u_xlat8.xyz;
    u_xlat9.xyz = vec3(u_xlat16_33) * u_xlat10_3.xyz + (-u_xlat7.xyz);
    u_xlat37 = float(1.0) / _ShoreReflectionFade;
    u_xlat37 = u_xlat35 * u_xlat37;
#ifdef UNITY_ADRENO_ES3
    u_xlat37 = min(max(u_xlat37, 0.0), 1.0);
#else
    u_xlat37 = clamp(u_xlat37, 0.0, 1.0);
#endif
    u_xlat27 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat10.xyz = vec3(u_xlat27) * vs_TEXCOORD6.xyz;
    u_xlat4.x = dot(u_xlat4.xyz, u_xlat10.xyz);
    u_xlat4.x = (-u_xlat4.x) + 1.0;
    u_xlat4.x = max(u_xlat4.x, 9.99999975e-05);
    u_xlat4.x = log2(u_xlat4.x);
    u_xlat15.x = u_xlat4.x * _FresnelPower;
    u_xlat4.x = u_xlat4.x * _SpecularPower;
    u_xlat4.x = exp2(u_xlat4.x);
    u_xlat15.x = exp2(u_xlat15.x);
    u_xlat15.x = u_xlat15.x * _ReflectionIntensity;
    u_xlat15.x = u_xlat37 * u_xlat15.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat15.x = min(max(u_xlat15.x, 0.0), 1.0);
#else
    u_xlat15.x = clamp(u_xlat15.x, 0.0, 1.0);
#endif
    u_xlat15.xyz = u_xlat15.xxx * u_xlat9.xyz + u_xlat7.xyz;
    u_xlat1.xyz = (-u_xlat6.xyz) * u_xlat10_1.xyz + u_xlat15.xyz;
    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz + u_xlat8.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(0.0>=_ES_MoonDirection.y);
#else
    u_xlatb15 = 0.0>=_ES_MoonDirection.y;
#endif
    u_xlat15.xyz = (bool(u_xlatb15)) ? _ES_SunDirection.xyz : _ES_MoonDirection.xyz;
    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat34) + u_xlat15.xyz;
    u_xlat34 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat34 = inversesqrt(u_xlat34);
    u_xlat2.xyz = vec3(u_xlat34) * u_xlat2.xyz;
    u_xlat16_0.y = 1.0;
    u_xlat16_34 = dot(u_xlat16_0.xyz, u_xlat16_0.xyz);
    u_xlat16_34 = inversesqrt(u_xlat16_34);
    u_xlat16_15.xyz = u_xlat16_0.xyz * vec3(u_xlat16_34);
    u_xlat34 = dot(u_xlat16_15.xyz, u_xlat2.xyz);
    u_xlat34 = max(u_xlat34, 9.99999975e-05);
    u_xlat34 = log2(u_xlat34);
    u_xlat2.x = _Gloss * 128.0;
    u_xlat34 = u_xlat34 * u_xlat2.x;
    u_xlat34 = exp2(u_xlat34);
    u_xlat34 = u_xlat34 * _SpecularIntensity;
    u_xlat34 = max(u_xlat34, 0.0);
    u_xlat34 = min(u_xlat34, 16.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(_ES_MoonDirection.y>=9.99999975e-05);
#else
    u_xlatb2 = _ES_MoonDirection.y>=9.99999975e-05;
#endif
    u_xlat2.x = u_xlatb2 ? 1.0 : float(0.0);
    u_xlat13 = _ES_MoonDirection.y + -1.0;
    u_xlat2.x = u_xlat2.x * u_xlat13 + 1.0;
    u_xlat2.xyz = u_xlat2.xxx * _LightColor0.xyz;
    u_xlat2.xyz = vec3(u_xlat34) * u_xlat2.xyz;
    u_xlat34 = u_xlat35 + -1.0;
    u_xlat34 = u_xlat5.x * u_xlat34;
    u_xlat34 = u_xlat34 * 0.100000001;
#ifdef UNITY_ADRENO_ES3
    u_xlat34 = min(max(u_xlat34, 0.0), 1.0);
#else
    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
#endif
    u_xlat2.xyz = vec3(u_xlat34) * u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * u_xlat4.xxx + u_xlat1.xyz;
    u_xlat2.xyz = vs_TEXCOORD5.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat34 = u_xlat2.y * _HeigtFogParams.x;
    u_xlat4.x = u_xlat34 * -1.44269502;
    u_xlat4.x = exp2(u_xlat4.x);
    u_xlat4.x = (-u_xlat4.x) + 1.0;
    u_xlat4.x = u_xlat4.x / u_xlat34;
#ifdef UNITY_ADRENO_ES3
    u_xlatb34 = !!(0.00999999978<abs(u_xlat34));
#else
    u_xlatb34 = 0.00999999978<abs(u_xlat34);
#endif
    u_xlat16_0.x = (u_xlatb34) ? u_xlat4.x : 1.0;
    u_xlat34 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat34 = sqrt(u_xlat34);
    u_xlat4.x = u_xlat34 * _HeigtFogParams.y;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat4.x;
    u_xlat16_0.x = exp2((-u_xlat16_0.x));
    u_xlat16_0.x = (-u_xlat16_0.x) + 1.0;
    u_xlat4.x = u_xlat2.y * _HeigtFogParams2.x;
    u_xlat15.x = u_xlat4.x * -1.44269502;
    u_xlat15.x = exp2(u_xlat15.x);
    u_xlat15.x = (-u_xlat15.x) + 1.0;
    u_xlat15.x = u_xlat15.x / u_xlat4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(0.00999999978<abs(u_xlat4.x));
#else
    u_xlatb4 = 0.00999999978<abs(u_xlat4.x);
#endif
    u_xlat16_11 = (u_xlatb4) ? u_xlat15.x : 1.0;
    u_xlat4.x = u_xlat34 * _HeigtFogParams2.y;
    u_xlat16_11 = u_xlat16_11 * u_xlat4.x;
    u_xlat16_11 = exp2((-u_xlat16_11));
    u_xlat16_0.y = (-u_xlat16_11) + 1.0;
    u_xlat16_0.xy = max(u_xlat16_0.xy, vec2(0.0, 0.0));
    u_xlat16_0.x = u_xlat16_0.y + u_xlat16_0.x;
    u_xlat4.x = u_xlat34 * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat16_11 = (-u_xlat4.x) + 2.0;
    u_xlat16_11 = u_xlat16_11 * u_xlat4.x;
    u_xlat4.x = u_xlat16_11 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat4.x = u_xlat4.x + 1.0;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat4.x;
    u_xlat4.x = min(u_xlat16_0.x, _HeigtFogColBase.w);
    u_xlat15.x = (-u_xlat4.x) + 1.0;
    u_xlat5.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat5.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat5.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat5.xyz);
    u_xlat13 = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!((-u_xlat2.x)>=u_xlat13);
#else
    u_xlatb2 = (-u_xlat2.x)>=u_xlat13;
#endif
    u_xlat13 = u_xlat34 * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat13 = min(max(u_xlat13, 0.0), 1.0);
#else
    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
#endif
    u_xlat34 = u_xlat34 + (-_HeigtFogRamp.w);
    u_xlat34 = u_xlat34 * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat34 = min(max(u_xlat34, 0.0), 1.0);
#else
    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
#endif
    u_xlat24 = (-u_xlat13) + 2.0;
    u_xlat13 = u_xlat24 * u_xlat13;
    u_xlat24 = u_xlat13 * _HeigtFogColDelta.w;
    u_xlat2.x = (u_xlatb2) ? u_xlat24 : u_xlat13;
    u_xlat2.x = log2(u_xlat2.x);
    u_xlat2.x = u_xlat2.x * unity_FogColor.w;
    u_xlat2.x = exp2(u_xlat2.x);
    u_xlat2.x = min(u_xlat2.x, _HeigtFogColBase.w);
    u_xlat13 = vs_TEXCOORD5.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat13 = min(max(u_xlat13, 0.0), 1.0);
#else
    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
#endif
    u_xlat16_0.x = (-u_xlat13) + 2.0;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat13;
    u_xlat5.xyz = u_xlat16_0.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat6.xyz = (-u_xlat5.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat5.xyz = vec3(u_xlat34) * u_xlat6.xyz + u_xlat5.xyz;
    u_xlat5.xyz = u_xlat2.xxx * u_xlat5.xyz;
    u_xlat34 = (-u_xlat2.x) + 1.0;
    u_xlat34 = u_xlat15.x * u_xlat34;
    u_xlat2.xyz = u_xlat15.xxx * u_xlat5.xyz;
    u_xlat15.x = vs_TEXCOORD5.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat15.x = min(max(u_xlat15.x, 0.0), 1.0);
#else
    u_xlat15.x = clamp(u_xlat15.x, 0.0, 1.0);
#endif
    u_xlat15.xyz = u_xlat15.xxx * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    u_xlat2.xyz = u_xlat15.xyz * u_xlat4.xxx + u_xlat2.xyz;
    u_xlat0.xyz = vec3(u_xlat34) * u_xlat1.xyz + u_xlat2.xyz;
    u_xlat1.x = 0.100000001 / _OpacityByDepth;
    u_xlat1.x = u_xlat1.x * u_xlat35;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat0.w = u_xlat1.x * vs_COLOR0.w;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "MSAA_INTERPOLATION" "MHY_SHADER_HIGH" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	mediump float _MHYZBias;
uniform 	vec4 hlslcc_mtx4x4_mhyJitteredVP[4];
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
out highp vec4 vs_TEXCOORD9;
out highp vec4 vs_TEXCOORD10;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
vec4 u_xlat4;
bool u_xlatb4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
mediump vec4 u_xlat16_6;
vec4 u_xlat7;
mediump vec3 u_xlat16_8;
float u_xlat11;
vec3 u_xlat13;
mediump float u_xlat16_14;
float u_xlat27;
bool u_xlatb27;
float u_xlat29;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4_mhyJitteredVP[1];
    u_xlat2 = hlslcc_mtx4x4_mhyJitteredVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4_mhyJitteredVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4_mhyJitteredVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat3.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    u_xlat3.xyw = u_xlat2.xyw;
    gl_Position = u_xlat3;
    vs_COLOR0 = in_COLOR0;
    u_xlat2.xyw = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat27 = u_xlat2.y * _HeigtFogParams.x;
    u_xlat4.x = u_xlat27 * -1.44269502;
    u_xlat4.x = exp2(u_xlat4.x);
    u_xlat4.x = (-u_xlat4.x) + 1.0;
    u_xlat4.x = u_xlat4.x / u_xlat27;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(0.00999999978<abs(u_xlat27));
#else
    u_xlatb27 = 0.00999999978<abs(u_xlat27);
#endif
    u_xlat16_5.x = (u_xlatb27) ? u_xlat4.x : 1.0;
    u_xlat27 = dot(u_xlat2.xyw, u_xlat2.xyw);
    u_xlat27 = sqrt(u_xlat27);
    u_xlat4.x = u_xlat27 * _HeigtFogParams.y;
    u_xlat16_5.x = u_xlat4.x * u_xlat16_5.x;
    u_xlat16_5.x = exp2((-u_xlat16_5.x));
    u_xlat16_5.x = (-u_xlat16_5.x) + 1.0;
    u_xlat4.x = u_xlat2.y * _HeigtFogParams2.x;
    u_xlat13.x = u_xlat4.x * -1.44269502;
    u_xlat13.x = exp2(u_xlat13.x);
    u_xlat13.x = (-u_xlat13.x) + 1.0;
    u_xlat13.x = u_xlat13.x / u_xlat4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(0.00999999978<abs(u_xlat4.x));
#else
    u_xlatb4 = 0.00999999978<abs(u_xlat4.x);
#endif
    u_xlat16_14 = (u_xlatb4) ? u_xlat13.x : 1.0;
    u_xlat4.x = u_xlat27 * _HeigtFogParams2.y;
    u_xlat16_14 = u_xlat4.x * u_xlat16_14;
    u_xlat16_14 = exp2((-u_xlat16_14));
    u_xlat16_5.y = (-u_xlat16_14) + 1.0;
    u_xlat16_5.xy = max(u_xlat16_5.xy, vec2(0.0, 0.0));
    u_xlat16_5.x = u_xlat16_5.y + u_xlat16_5.x;
    u_xlat4.x = u_xlat27 * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat16_14 = (-u_xlat4.x) + 2.0;
    u_xlat16_14 = u_xlat4.x * u_xlat16_14;
    u_xlat4.x = u_xlat16_14 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat4.x = u_xlat4.x + 1.0;
    u_xlat16_5.x = u_xlat4.x * u_xlat16_5.x;
    u_xlat4.x = min(u_xlat16_5.x, _HeigtFogColBase.w);
    u_xlat13.x = (-u_xlat4.x) + 1.0;
    u_xlat6.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat6.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat6.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat2.x = dot(u_xlat2.xyw, u_xlat6.xyz);
    u_xlat11 = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!((-u_xlat2.x)>=u_xlat11);
#else
    u_xlatb2 = (-u_xlat2.x)>=u_xlat11;
#endif
    u_xlat11 = u_xlat27 * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat11 = min(max(u_xlat11, 0.0), 1.0);
#else
    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
#endif
    u_xlat27 = u_xlat27 + (-_HeigtFogRamp.w);
    u_xlat27 = u_xlat27 * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
    u_xlat29 = (-u_xlat11) + 2.0;
    u_xlat11 = u_xlat29 * u_xlat11;
    u_xlat29 = u_xlat11 * _HeigtFogColDelta.w;
    u_xlat2.x = (u_xlatb2) ? u_xlat29 : u_xlat11;
    u_xlat2.x = log2(u_xlat2.x);
    u_xlat2.x = u_xlat2.x * unity_FogColor.w;
    u_xlat2.x = exp2(u_xlat2.x);
    u_xlat2.x = min(u_xlat2.x, _HeigtFogColBase.w);
    u_xlat11 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat11 = min(max(u_xlat11, 0.0), 1.0);
#else
    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
#endif
    u_xlat16_5.x = (-u_xlat11) + 2.0;
    u_xlat16_5.x = u_xlat11 * u_xlat16_5.x;
    u_xlat6.xyz = u_xlat16_5.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat7.xyz = (-u_xlat6.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat6.xyz = vec3(u_xlat27) * u_xlat7.xyz + u_xlat6.xyz;
    u_xlat6.xyz = u_xlat2.xxx * u_xlat6.xyz;
    u_xlat27 = (-u_xlat2.x) + 1.0;
    vs_TEXCOORD0.w = u_xlat13.x * u_xlat27;
    u_xlat2.xyw = u_xlat13.xxx * u_xlat6.xyz;
    u_xlat27 = u_xlat0.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
    u_xlat13.xyz = vec3(u_xlat27) * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    vs_TEXCOORD0.xyz = u_xlat13.xyz * u_xlat4.xxx + u_xlat2.xyw;
    u_xlat4.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat4.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat4.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat27 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat4.xyz = vec3(u_xlat27) * u_xlat4.xyz;
    u_xlat16_5.x = u_xlat4.y * u_xlat4.y;
    u_xlat16_5.x = u_xlat4.x * u_xlat4.x + (-u_xlat16_5.x);
    u_xlat16_6 = u_xlat4.yzzx * u_xlat4.xyzz;
    u_xlat16_8.x = dot(unity_SHBr, u_xlat16_6);
    u_xlat16_8.y = dot(unity_SHBg, u_xlat16_6);
    u_xlat16_8.z = dot(unity_SHBb, u_xlat16_6);
    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_8.xyz;
    u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat4.w = 1.0;
    u_xlat16_8.x = dot(unity_SHAr, u_xlat4);
    u_xlat16_8.y = dot(unity_SHAg, u_xlat4);
    u_xlat16_8.z = dot(unity_SHAb, u_xlat4);
    u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_8.xyz;
    vs_TEXCOORD1.xyz = u_xlat16_5.xyz;
    vs_TEXCOORD1.w = 1.0;
    u_xlat27 = u_xlat3.y * _ProjectionParams.x;
    u_xlat7.w = u_xlat27 * 0.5;
    u_xlat7.xz = u_xlat3.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.z = u_xlat2.z;
    u_xlat3.xy = u_xlat7.zz + u_xlat7.xw;
    vs_TEXCOORD2 = u_xlat3;
    vs_TEXCOORD4.xyw = u_xlat3.xyw;
    u_xlat27 = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat27 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat27;
    u_xlat27 = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat27;
    u_xlat27 = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat27;
    vs_TEXCOORD3.z = (-u_xlat27);
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD3.w = 0.0;
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD5.w = 0.0;
    vs_TEXCOORD6.xyz = u_xlat4.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[1].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].www + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * in_POSITION0.yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.zzz + u_xlat1.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.www + u_xlat1.xyz;
    vs_TEXCOORD7.xyz = u_xlat1.xyz * vec3(-1.0, -1.0, 1.0);
    vs_TEXCOORD7.w = 0.0;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat27 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat1.xyz = vec3(u_xlat27) * u_xlat1.xyz;
    vs_TEXCOORD8.xyz = u_xlat1.xyz;
    vs_TEXCOORD8.w = 0.0;
    u_xlat2.xyz = u_xlat1.yzx * u_xlat4.zxy;
    u_xlat1.xyz = u_xlat4.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
    u_xlat27 = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD9.xyz = vec3(u_xlat27) * u_xlat1.xyz;
    vs_TEXCOORD9.w = 0.0;
    u_xlat27 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat27 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat27;
    vs_TEXCOORD10.w = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat27;
    vs_TEXCOORD10.xyz = u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _NormalMapScale;
uniform 	float _Normal01_U_Speed;
uniform 	float _Normal01_VSpeed;
uniform 	float _NormalMapBias;
uniform 	float _Normal02_U_Speed;
uniform 	float _Normal02_V_Speed;
uniform 	float _RefractionIntensity;
uniform 	float _OpacityByDepth;
uniform 	float _SpecularIntensity;
uniform 	vec3 _ES_MoonDirection;
uniform 	vec3 _ES_SunDirection;
uniform 	float _Gloss;
uniform 	float _ShoreTransparency;
uniform 	float _SpecularPower;
uniform 	vec4 _ShallowColor;
uniform 	float _ShoreFade;
uniform 	vec4 _DeepColor;
uniform 	float _DeepColorDepth;
uniform 	float _DeepColorFade;
uniform 	vec4 _DistortionIntensity;
uniform 	float _SSRDistortion;
uniform 	float _SSRDistortion_Shore;
uniform 	float _SSRIntensity;
uniform 	float _ReflectionIntensity;
uniform 	float _FresnelPower;
uniform 	float _ShoreReflectionFade;
uniform 	mediump float _ProjectUVScale;
uniform 	vec4 _ReflectionSkyCubeMap_HDR;
uniform lowp sampler2D _Normal01;
uniform lowp sampler2D _Normal02;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _SceneScaledBufferBeforTransParent;
uniform lowp samplerCube _ReflectionSkyCubeMap;
uniform lowp sampler2D _SSRTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD8;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
lowp vec4 u_xlat10_3;
vec3 u_xlat4;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
mediump vec3 u_xlat16_7;
lowp vec3 u_xlat10_8;
vec3 u_xlat9;
vec3 u_xlat10;
vec3 u_xlat11;
vec3 u_xlat12;
vec3 u_xlat13;
vec2 u_xlat15;
mediump vec3 u_xlat16_16;
vec3 u_xlat18;
bool u_xlatb18;
vec3 u_xlat19;
vec2 u_xlat29;
float u_xlat32;
float u_xlat43;
bool u_xlatb43;
float u_xlat46;
bool u_xlatb46;
float u_xlat47;
bool u_xlatb47;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD5.zx * vec2(vec2(_ProjectUVScale, _ProjectUVScale));
    u_xlat1.x = _Time.y * _Normal01_U_Speed + u_xlat0.y;
    u_xlat1.yz = _Time.yy * vec2(_Normal01_VSpeed, _Normal02_U_Speed) + u_xlat0.xy;
    u_xlat1.w = _Time.y * _Normal02_V_Speed + u_xlat0.x;
    u_xlat10_0.xyz = texture(_Normal01, u_xlat1.xy, _NormalMapBias).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_2.xy = u_xlat16_0.xy * vec2(_NormalMapScale);
    u_xlat10_1.xyz = texture(_Normal02, u_xlat1.zw, _NormalMapBias).xyz;
    u_xlat16_0.w = -1.0;
    u_xlat16_3.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.wwz;
    u_xlat16_3.xy = u_xlat16_3.xy * vec2(_NormalMapScale);
    u_xlat16_2.z = -1.0;
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
    u_xlat1.x = float(1.0) / vs_TEXCOORD4.w;
    u_xlat15.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat15.x = texture(_CameraDepthTexture, u_xlat15.xy).x;
    u_xlat15.x = _ZBufferParams.z * u_xlat15.x + _ZBufferParams.w;
    u_xlat15.x = float(1.0) / u_xlat15.x;
    u_xlat29.xy = u_xlat16_2.xy * vec2(vec2(_RefractionIntensity, _RefractionIntensity));
    u_xlat1.x = u_xlat1.x * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.xz = u_xlat1.xx * u_xlat29.xy;
    u_xlat1.xz = u_xlat1.xz * vs_TEXCOORD4.ww;
    u_xlat15.x = u_xlat15.x + (-vs_TEXCOORD4.w);
#ifdef UNITY_ADRENO_ES3
    u_xlat15.x = min(max(u_xlat15.x, 0.0), 1.0);
#else
    u_xlat15.x = clamp(u_xlat15.x, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat15.xx * u_xlat1.xz;
    u_xlat1.z = 0.0;
    u_xlat4.xyz = u_xlat1.xyz + vs_TEXCOORD4.xyw;
    u_xlat4.xy = u_xlat4.xy / u_xlat4.zz;
    u_xlat43 = texture(_CameraDepthTexture, u_xlat4.xy).x;
    u_xlat43 = _ZBufferParams.z * u_xlat43 + _ZBufferParams.w;
    u_xlat43 = float(1.0) / u_xlat43;
    u_xlat43 = u_xlat43 + (-vs_TEXCOORD4.w);
#ifdef UNITY_ADRENO_ES3
    u_xlat43 = min(max(u_xlat43, 0.0), 1.0);
#else
    u_xlat43 = clamp(u_xlat43, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat43) * u_xlat1.xyz + vs_TEXCOORD4.xyw;
    u_xlat29.xy = u_xlat1.xy / u_xlat1.zz;
    u_xlat29.x = texture(_CameraDepthTexture, u_xlat29.xy).x;
    u_xlat29.x = _ZBufferParams.z * u_xlat29.x + _ZBufferParams.w;
    u_xlat29.x = float(1.0) / u_xlat29.x;
    u_xlat29.x = u_xlat29.x + (-vs_TEXCOORD4.w);
    u_xlat1.w = 0.100000001 / _OpacityByDepth;
    u_xlat16_3.xz = u_xlat16_2.xy;
    u_xlat16_3.y = 1.0;
    u_xlat16_4.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
    u_xlat16_4.x = inversesqrt(u_xlat16_4.x);
    u_xlat16_4.xyz = u_xlat16_3.xyz * u_xlat16_4.xxx;
#ifdef UNITY_ADRENO_ES3
    u_xlatb46 = !!(0.0>=_ES_MoonDirection.y);
#else
    u_xlatb46 = 0.0>=_ES_MoonDirection.y;
#endif
    u_xlat5.xyz = (bool(u_xlatb46)) ? _ES_SunDirection.xyz : _ES_MoonDirection.xyz;
    u_xlat6.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat46 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat46 = inversesqrt(u_xlat46);
    u_xlat7.xyz = vec3(u_xlat46) * u_xlat6.xyz;
    u_xlat5.xyz = u_xlat6.xyz * vec3(u_xlat46) + u_xlat5.xyz;
    u_xlat46 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat46 = inversesqrt(u_xlat46);
    u_xlat5.xyz = vec3(u_xlat46) * u_xlat5.xyz;
    u_xlat4.x = dot(u_xlat16_4.xyz, u_xlat5.xyz);
    u_xlat18.x = _Gloss * 128.0;
    u_xlat4.x = max(u_xlat4.x, 9.99999975e-05);
    u_xlat4.x = log2(u_xlat4.x);
    u_xlat4.x = u_xlat4.x * u_xlat18.x;
    u_xlat4.x = exp2(u_xlat4.x);
    u_xlat4.x = u_xlat4.x * _SpecularIntensity;
    u_xlat4.x = max(u_xlat4.x, 0.0);
    u_xlat4.x = min(u_xlat4.x, 16.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_ES_MoonDirection.y>=9.99999975e-05);
#else
    u_xlatb18 = _ES_MoonDirection.y>=9.99999975e-05;
#endif
    u_xlat18.x = u_xlatb18 ? 1.0 : float(0.0);
    u_xlat32 = _ES_MoonDirection.y + -1.0;
    u_xlat18.x = u_xlat18.x * u_xlat32 + 1.0;
    u_xlat32 = float(1.0) / _ShoreTransparency;
    u_xlat46 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat46 = inversesqrt(u_xlat46);
    u_xlat5.xyz = vec3(u_xlat46) * vs_TEXCOORD6.xyz;
    u_xlat46 = dot(u_xlat7.xyz, u_xlat5.xyz);
    u_xlat46 = (-u_xlat46) + 1.0;
    u_xlat46 = max(u_xlat46, 9.99999975e-05);
    u_xlat46 = log2(u_xlat46);
    u_xlat5.x = u_xlat46 * _SpecularPower;
    u_xlat5.x = exp2(u_xlat5.x);
    u_xlat19.xyz = u_xlat18.xxx * _LightColor0.xyz;
    u_xlat19.xyz = u_xlat4.xxx * u_xlat19.xyz;
    u_xlat4.x = u_xlat29.x + -1.0;
    u_xlat4.x = u_xlat32 * u_xlat4.x;
    u_xlat4.x = u_xlat4.x * 0.100000001;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat19.xyz = u_xlat4.xxx * u_xlat19.xyz;
    u_xlat4.x = u_xlat29.x * u_xlat32;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat4.x = max(u_xlat4.x, 9.99999975e-05);
    u_xlat4.x = log2(u_xlat4.x);
    u_xlat4.x = u_xlat4.x * _ShoreFade;
    u_xlat4.x = exp2(u_xlat4.x);
    u_xlat6.xyz = _ShallowColor.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat6.xyz = u_xlat4.xxx * u_xlat6.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat1.xy = u_xlat1.xy / vs_TEXCOORD4.ww;
    u_xlat10_8.xyz = texture(_SceneScaledBufferBeforTransParent, u_xlat1.xy).xyz;
    u_xlat9.xyz = u_xlat6.xyz * u_xlat10_8.xyz;
    u_xlat1.x = 0.100000001 / _DeepColorDepth;
    u_xlat1.xw = u_xlat1.xw * u_xlat29.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xw = min(max(u_xlat1.xw, 0.0), 1.0);
#else
    u_xlat1.xw = clamp(u_xlat1.xw, 0.0, 1.0);
#endif
    u_xlat1.x = max(u_xlat1.x, 9.99999975e-05);
    u_xlat1.x = log2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _DeepColorFade;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat10.xyz = (-u_xlat6.xyz) * u_xlat10_8.xyz + _DeepColor.xyz;
    u_xlat10.xyz = u_xlat1.xxx * u_xlat10.xyz + u_xlat9.xyz;
    u_xlat11.xyz = u_xlat16_2.xyz * _DistortionIntensity.xyz;
    u_xlat12.x = vs_TEXCOORD8.x;
    u_xlat12.y = vs_TEXCOORD9.x;
    u_xlat12.z = vs_TEXCOORD6.x;
    u_xlat12.x = dot(u_xlat12.xyz, u_xlat11.xyz);
    u_xlat13.x = vs_TEXCOORD8.y;
    u_xlat13.y = vs_TEXCOORD9.y;
    u_xlat13.z = vs_TEXCOORD6.y;
    u_xlat12.y = dot(u_xlat13.xyz, u_xlat11.xyz);
    u_xlat13.x = vs_TEXCOORD8.z;
    u_xlat13.y = vs_TEXCOORD9.z;
    u_xlat13.z = vs_TEXCOORD6.z;
    u_xlat12.z = dot(u_xlat13.xyz, u_xlat11.xyz);
    u_xlat1.x = dot(u_xlat12.xyz, u_xlat12.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat12.xyz = u_xlat1.xxx * u_xlat12.xyz;
    u_xlat1.x = dot((-u_xlat7.xyz), u_xlat12.xyz);
    u_xlat1.x = u_xlat1.x + u_xlat1.x;
    u_xlat7.xyz = u_xlat12.xyz * (-u_xlat1.xxx) + (-u_xlat7.xyz);
    u_xlat10_0 = textureLod(_ReflectionSkyCubeMap, u_xlat7.xyz, 0.0);
    u_xlat16_2.x = u_xlat10_0.w + -1.0;
    u_xlat16_2.x = _ReflectionSkyCubeMap_HDR.w * u_xlat16_2.x + 1.0;
    u_xlat16_2.x = log2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * _ReflectionSkyCubeMap_HDR.y;
    u_xlat16_2.x = exp2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * _ReflectionSkyCubeMap_HDR.x;
    u_xlat16_16.xyz = u_xlat10_0.xyz * u_xlat16_2.xxx;
    u_xlat1.xy = u_xlat11.xy * vec2(_SSRDistortion);
    u_xlat18.x = float(1.0) / _SSRDistortion_Shore;
    u_xlat18.x = u_xlat29.x * u_xlat18.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat18.x = min(max(u_xlat18.x, 0.0), 1.0);
#else
    u_xlat18.x = clamp(u_xlat18.x, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat1.xy * u_xlat18.xx;
    u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD4.ww + vs_TEXCOORD4.xy;
    u_xlat1.xy = u_xlat1.xy / vs_TEXCOORD4.ww;
    u_xlat10_3 = texture(_SSRTexture, u_xlat1.xy).wxyz;
    u_xlat16_7.xyz = (-u_xlat16_2.xxx) * u_xlat10_0.xyz + u_xlat10_3.yzw;
    u_xlat7.xyz = u_xlat16_7.xyz * vec3(vec3(_SSRIntensity, _SSRIntensity, _SSRIntensity));
    u_xlat16_3.x = u_xlat10_3.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat7.xyz = u_xlat16_3.xxx * u_xlat7.xyz + u_xlat16_16.xyz;
    u_xlat1.x = u_xlat46 * _FresnelPower;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _ReflectionIntensity;
    u_xlat15.x = float(1.0) / _ShoreReflectionFade;
    u_xlat15.x = u_xlat15.x * u_xlat29.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat15.x = min(max(u_xlat15.x, 0.0), 1.0);
#else
    u_xlat15.x = clamp(u_xlat15.x, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat15.x * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat18.xyz = (-u_xlat10.xyz) + u_xlat7.xyz;
    u_xlat1.xyz = u_xlat1.xxx * u_xlat18.xyz + u_xlat10.xyz;
    u_xlat1.xyz = (-u_xlat6.xyz) * u_xlat10_8.xyz + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat4.xxx * u_xlat1.xyz + u_xlat9.xyz;
    u_xlat1.xyz = u_xlat19.xyz * u_xlat5.xxx + u_xlat1.xyz;
    u_xlat0.w = u_xlat1.w * vs_COLOR0.w;
    u_xlat4.xyz = vs_TEXCOORD5.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat5.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat5.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat5.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat43 = dot(u_xlat4.xyz, u_xlat5.xyz);
    u_xlat4.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat4.x = sqrt(u_xlat4.x);
    u_xlat18.y = u_xlat4.x * _HeigtFogParams.y;
    u_xlat46 = u_xlat4.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat46 = min(max(u_xlat46, 0.0), 1.0);
#else
    u_xlat46 = clamp(u_xlat46, 0.0, 1.0);
#endif
    u_xlat5.x = (-u_xlat46) + 2.0;
    u_xlat46 = u_xlat46 * u_xlat5.x;
    u_xlat5.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb43 = !!((-u_xlat43)>=u_xlat5.x);
#else
    u_xlatb43 = (-u_xlat43)>=u_xlat5.x;
#endif
    u_xlat5.x = u_xlat46 * _HeigtFogColDelta.w;
    u_xlat43 = (u_xlatb43) ? u_xlat5.x : u_xlat46;
    u_xlat43 = log2(u_xlat43);
    u_xlat43 = u_xlat43 * unity_FogColor.w;
    u_xlat43 = exp2(u_xlat43);
    u_xlat43 = min(u_xlat43, _HeigtFogColBase.w);
    u_xlat46 = vs_TEXCOORD5.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat46 = min(max(u_xlat46, 0.0), 1.0);
#else
    u_xlat46 = clamp(u_xlat46, 0.0, 1.0);
#endif
    u_xlat16_2.x = (-u_xlat46) + 2.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat46;
    u_xlat5.xyz = u_xlat16_2.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat46 = u_xlat4.x + (-_HeigtFogRamp.w);
    u_xlat46 = u_xlat46 * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat46 = min(max(u_xlat46, 0.0), 1.0);
#else
    u_xlat46 = clamp(u_xlat46, 0.0, 1.0);
#endif
    u_xlat6.xyz = (-u_xlat5.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat5.xyz = vec3(u_xlat46) * u_xlat6.xyz + u_xlat5.xyz;
    u_xlat46 = u_xlat4.y * _HeigtFogParams.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb47 = !!(0.00999999978<abs(u_xlat46));
#else
    u_xlatb47 = 0.00999999978<abs(u_xlat46);
#endif
    u_xlat6.x = u_xlat46 * -1.44269502;
    u_xlat6.x = exp2(u_xlat6.x);
    u_xlat6.x = (-u_xlat6.x) + 1.0;
    u_xlat46 = u_xlat6.x / u_xlat46;
    u_xlat16_2.x = (u_xlatb47) ? u_xlat46 : 1.0;
    u_xlat18.x = u_xlat4.y * _HeigtFogParams2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb46 = !!(0.00999999978<abs(u_xlat18.x));
#else
    u_xlatb46 = 0.00999999978<abs(u_xlat18.x);
#endif
    u_xlat47 = u_xlat18.x * -1.44269502;
    u_xlat47 = exp2(u_xlat47);
    u_xlat47 = (-u_xlat47) + 1.0;
    u_xlat18.x = u_xlat47 / u_xlat18.x;
    u_xlat16_2.y = (u_xlatb46) ? u_xlat18.x : 1.0;
    u_xlat18.x = u_xlat4.x * _HeigtFogParams2.y;
    u_xlat16_2.xy = u_xlat16_2.xy * u_xlat18.yx;
    u_xlat16_2.x = exp2((-u_xlat16_2.x));
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_16.x = exp2((-u_xlat16_2.y));
    u_xlat16_2.y = (-u_xlat16_16.x) + 1.0;
    u_xlat16_2.xy = max(u_xlat16_2.xy, vec2(0.0, 0.0));
    u_xlat16_2.x = u_xlat16_2.y + u_xlat16_2.x;
    u_xlat4.x = u_xlat4.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat16_16.x = (-u_xlat4.x) + 2.0;
    u_xlat16_16.x = u_xlat16_16.x * u_xlat4.x;
    u_xlat4.x = u_xlat16_16.x * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat4.x = u_xlat4.x + 1.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat4.x;
    u_xlat4.x = min(u_xlat16_2.x, _HeigtFogColBase.w);
    u_xlat18.x = vs_TEXCOORD5.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat18.x = min(max(u_xlat18.x, 0.0), 1.0);
#else
    u_xlat18.x = clamp(u_xlat18.x, 0.0, 1.0);
#endif
    u_xlat18.xyz = u_xlat18.xxx * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    u_xlat5.xyz = vec3(u_xlat43) * u_xlat5.xyz;
    u_xlat47 = (-u_xlat4.x) + 1.0;
    u_xlat5.xyz = vec3(u_xlat47) * u_xlat5.xyz;
    u_xlat4.xyz = u_xlat18.xyz * u_xlat4.xxx + u_xlat5.xyz;
    u_xlat43 = (-u_xlat43) + 1.0;
    u_xlat43 = u_xlat47 * u_xlat43;
    u_xlat0.xyz = vec3(u_xlat43) * u_xlat1.xyz + u_xlat4.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "MSAA_INTERPOLATION" "MHY_SHADER_HIGH" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	mediump float _MHYZBias;
uniform 	vec4 hlslcc_mtx4x4_mhyJitteredVP[4];
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
out highp vec4 vs_TEXCOORD9;
out highp vec4 vs_TEXCOORD10;
float u_xlat0;
int u_xlati0;
vec4 u_xlat1;
bool u_xlatb1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
bool u_xlatb4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
mediump vec4 u_xlat16_6;
vec4 u_xlat7;
mediump vec3 u_xlat16_8;
vec3 u_xlat9;
float u_xlat10;
float u_xlat13;
bool u_xlatb13;
mediump float u_xlat16_14;
float u_xlat22;
float u_xlat28;
float u_xlat31;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat9.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4_mhyJitteredVP[1];
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[3] * u_xlat2.wwww + u_xlat1;
    u_xlat3.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    u_xlat3.xyw = u_xlat1.xyw;
    gl_Position = u_xlat3;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.xyw = u_xlat9.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat4.x = u_xlat1.y * _HeigtFogParams.x;
    u_xlat13 = u_xlat4.x * -1.44269502;
    u_xlat13 = exp2(u_xlat13);
    u_xlat13 = (-u_xlat13) + 1.0;
    u_xlat13 = u_xlat13 / u_xlat4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(0.00999999978<abs(u_xlat4.x));
#else
    u_xlatb4 = 0.00999999978<abs(u_xlat4.x);
#endif
    u_xlat16_5.x = (u_xlatb4) ? u_xlat13 : 1.0;
    u_xlat4.x = dot(u_xlat1.xyw, u_xlat1.xyw);
    u_xlat4.x = sqrt(u_xlat4.x);
    u_xlat13 = u_xlat4.x * _HeigtFogParams.y;
    u_xlat16_5.x = u_xlat13 * u_xlat16_5.x;
    u_xlat16_5.x = exp2((-u_xlat16_5.x));
    u_xlat16_5.x = (-u_xlat16_5.x) + 1.0;
    u_xlat13 = u_xlat1.y * _HeigtFogParams2.x;
    u_xlat22 = u_xlat13 * -1.44269502;
    u_xlat22 = exp2(u_xlat22);
    u_xlat22 = (-u_xlat22) + 1.0;
    u_xlat22 = u_xlat22 / u_xlat13;
#ifdef UNITY_ADRENO_ES3
    u_xlatb13 = !!(0.00999999978<abs(u_xlat13));
#else
    u_xlatb13 = 0.00999999978<abs(u_xlat13);
#endif
    u_xlat16_14 = (u_xlatb13) ? u_xlat22 : 1.0;
    u_xlat13 = u_xlat4.x * _HeigtFogParams2.y;
    u_xlat16_14 = u_xlat13 * u_xlat16_14;
    u_xlat16_14 = exp2((-u_xlat16_14));
    u_xlat16_5.y = (-u_xlat16_14) + 1.0;
    u_xlat16_5.xy = max(u_xlat16_5.xy, vec2(0.0, 0.0));
    u_xlat16_5.x = u_xlat16_5.y + u_xlat16_5.x;
    u_xlat13 = u_xlat4.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat13 = min(max(u_xlat13, 0.0), 1.0);
#else
    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
#endif
    u_xlat16_14 = (-u_xlat13) + 2.0;
    u_xlat16_14 = u_xlat13 * u_xlat16_14;
    u_xlat13 = u_xlat16_14 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat13 = u_xlat13 + 1.0;
    u_xlat16_5.x = u_xlat13 * u_xlat16_5.x;
    u_xlat13 = min(u_xlat16_5.x, _HeigtFogColBase.w);
    u_xlat22 = (-u_xlat13) + 1.0;
    u_xlat31 = _ProjectionParams.z * 0.999899983;
    u_xlat6.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat6.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat6.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat1.x = dot(u_xlat1.xyw, u_xlat6.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!((-u_xlat1.x)>=u_xlat31);
#else
    u_xlatb1 = (-u_xlat1.x)>=u_xlat31;
#endif
    u_xlat10 = u_xlat4.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat10 = min(max(u_xlat10, 0.0), 1.0);
#else
    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
#endif
    u_xlat28 = u_xlat4.x + (-_HeigtFogRamp.w);
    u_xlat28 = u_xlat28 * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat28 = min(max(u_xlat28, 0.0), 1.0);
#else
    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
#endif
    u_xlat4.x = (-u_xlat10) + 2.0;
    u_xlat10 = u_xlat10 * u_xlat4.x;
    u_xlat4.x = u_xlat10 * _HeigtFogColDelta.w;
    u_xlat1.x = (u_xlatb1) ? u_xlat4.x : u_xlat10;
    u_xlat1.x = log2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * unity_FogColor.w;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat1.x = min(u_xlat1.x, _HeigtFogColBase.w);
    u_xlat10 = u_xlat9.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat10 = min(max(u_xlat10, 0.0), 1.0);
#else
    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
#endif
    u_xlat16_5.x = (-u_xlat10) + 2.0;
    u_xlat16_5.x = u_xlat10 * u_xlat16_5.x;
    u_xlat6.xyz = u_xlat16_5.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat7.xyz = (-u_xlat6.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat6.xyz = vec3(u_xlat28) * u_xlat7.xyz + u_xlat6.xyz;
    u_xlat6.xyz = u_xlat1.xxx * u_xlat6.xyz;
    u_xlat1.x = (-u_xlat1.x) + 1.0;
    vs_TEXCOORD0.w = u_xlat22 * u_xlat1.x;
    u_xlat1.xyw = vec3(u_xlat22) * u_xlat6.xyz;
    u_xlat4.x = u_xlat9.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat4.xzw = u_xlat4.xxx * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    vs_TEXCOORD0.xyz = u_xlat4.xzw * vec3(u_xlat13) + u_xlat1.xyw;
    vs_TEXCOORD1.w = 1.0;
    u_xlat4.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat4.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat4.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat1.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
    u_xlat16_5.x = u_xlat4.y * u_xlat4.y;
    u_xlat16_5.x = u_xlat4.x * u_xlat4.x + (-u_xlat16_5.x);
    u_xlat16_6 = u_xlat4.yzzx * u_xlat4.xyzz;
    u_xlat16_8.x = dot(unity_SHBr, u_xlat16_6);
    u_xlat16_8.y = dot(unity_SHBg, u_xlat16_6);
    u_xlat16_8.z = dot(unity_SHBb, u_xlat16_6);
    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_8.xyz;
    u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat4.w = 1.0;
    u_xlat16_8.x = dot(unity_SHAr, u_xlat4);
    u_xlat16_8.y = dot(unity_SHAg, u_xlat4);
    u_xlat16_8.z = dot(unity_SHAb, u_xlat4);
    u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_8.xyz;
    vs_TEXCOORD1.xyz = u_xlat16_5.xyz;
    u_xlat1.x = u_xlat3.y * _ProjectionParams.x;
    u_xlat7.w = u_xlat1.x * 0.5;
    u_xlat7.xz = u_xlat3.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.z = u_xlat1.z;
    u_xlat3.xy = u_xlat7.zz + u_xlat7.xw;
    vs_TEXCOORD2 = u_xlat3;
    vs_TEXCOORD4.xyw = u_xlat3.xyw;
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD3.w = 0.0;
    u_xlat1.x = u_xlat2.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat2.x + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat2.z + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat2.w + u_xlat1.x;
    vs_TEXCOORD3.z = (-u_xlat1.x);
    vs_TEXCOORD5.w = 0.0;
    vs_TEXCOORD5.xyz = u_xlat9.xyz;
    u_xlat9.xyz = (-u_xlat9.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD6.w = 0.0;
    vs_TEXCOORD6.xyz = u_xlat4.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].www + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * in_POSITION0.yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.zzz + u_xlat1.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.www + u_xlat1.xyz;
    vs_TEXCOORD7.xyz = u_xlat1.xyz * vec3(-1.0, -1.0, 1.0);
    vs_TEXCOORD7.w = 0.0;
    u_xlat1.xyz = in_TANGENT0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat0 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0 = inversesqrt(u_xlat0);
    u_xlat1.xyz = vec3(u_xlat0) * u_xlat1.xyz;
    vs_TEXCOORD8.xyz = u_xlat1.xyz;
    vs_TEXCOORD8.w = 0.0;
    u_xlat2.xyz = u_xlat1.yzx * u_xlat4.zxy;
    u_xlat1.xyz = u_xlat4.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
    u_xlat0 = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD9.xyz = vec3(u_xlat0) * u_xlat1.xyz;
    vs_TEXCOORD9.w = 0.0;
    u_xlat0 = u_xlat9.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat9.x + u_xlat0;
    vs_TEXCOORD10.w = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat9.z + u_xlat0;
    vs_TEXCOORD10.xyz = u_xlat9.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _NormalMapScale;
uniform 	float _Normal01_U_Speed;
uniform 	float _Normal01_VSpeed;
uniform 	float _NormalMapBias;
uniform 	float _Normal02_U_Speed;
uniform 	float _Normal02_V_Speed;
uniform 	float _RefractionIntensity;
uniform 	float _OpacityByDepth;
uniform 	float _SpecularIntensity;
uniform 	vec3 _ES_MoonDirection;
uniform 	vec3 _ES_SunDirection;
uniform 	float _Gloss;
uniform 	float _ShoreTransparency;
uniform 	float _SpecularPower;
uniform 	vec4 _ShallowColor;
uniform 	float _ShoreFade;
uniform 	vec4 _DeepColor;
uniform 	float _DeepColorDepth;
uniform 	float _DeepColorFade;
uniform 	vec4 _DistortionIntensity;
uniform 	float _SSRDistortion;
uniform 	float _SSRDistortion_Shore;
uniform 	float _SSRIntensity;
uniform 	float _ReflectionIntensity;
uniform 	float _FresnelPower;
uniform 	float _ShoreReflectionFade;
uniform 	mediump float _ProjectUVScale;
uniform 	vec4 _ReflectionSkyCubeMap_HDR;
uniform lowp sampler2D _Normal01;
uniform lowp sampler2D _Normal02;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _SceneScaledBufferBeforTransParent;
uniform lowp samplerCube _ReflectionSkyCubeMap;
uniform lowp sampler2D _SSRTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD8;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
lowp vec4 u_xlat10_3;
vec3 u_xlat4;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
mediump vec3 u_xlat16_7;
lowp vec3 u_xlat10_8;
vec3 u_xlat9;
vec3 u_xlat10;
vec3 u_xlat11;
vec3 u_xlat12;
vec3 u_xlat13;
vec2 u_xlat15;
mediump vec3 u_xlat16_16;
vec3 u_xlat18;
bool u_xlatb18;
vec3 u_xlat19;
vec2 u_xlat29;
float u_xlat32;
float u_xlat43;
bool u_xlatb43;
float u_xlat46;
bool u_xlatb46;
float u_xlat47;
bool u_xlatb47;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD5.zx * vec2(vec2(_ProjectUVScale, _ProjectUVScale));
    u_xlat1.x = _Time.y * _Normal01_U_Speed + u_xlat0.y;
    u_xlat1.yz = _Time.yy * vec2(_Normal01_VSpeed, _Normal02_U_Speed) + u_xlat0.xy;
    u_xlat1.w = _Time.y * _Normal02_V_Speed + u_xlat0.x;
    u_xlat10_0.xyz = texture(_Normal01, u_xlat1.xy, _NormalMapBias).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_2.xy = u_xlat16_0.xy * vec2(_NormalMapScale);
    u_xlat10_1.xyz = texture(_Normal02, u_xlat1.zw, _NormalMapBias).xyz;
    u_xlat16_0.w = -1.0;
    u_xlat16_3.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.wwz;
    u_xlat16_3.xy = u_xlat16_3.xy * vec2(_NormalMapScale);
    u_xlat16_2.z = -1.0;
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
    u_xlat1.x = float(1.0) / vs_TEXCOORD4.w;
    u_xlat15.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat15.x = texture(_CameraDepthTexture, u_xlat15.xy).x;
    u_xlat15.x = _ZBufferParams.z * u_xlat15.x + _ZBufferParams.w;
    u_xlat15.x = float(1.0) / u_xlat15.x;
    u_xlat29.xy = u_xlat16_2.xy * vec2(vec2(_RefractionIntensity, _RefractionIntensity));
    u_xlat1.x = u_xlat1.x * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.xz = u_xlat1.xx * u_xlat29.xy;
    u_xlat1.xz = u_xlat1.xz * vs_TEXCOORD4.ww;
    u_xlat15.x = u_xlat15.x + (-vs_TEXCOORD4.w);
#ifdef UNITY_ADRENO_ES3
    u_xlat15.x = min(max(u_xlat15.x, 0.0), 1.0);
#else
    u_xlat15.x = clamp(u_xlat15.x, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat15.xx * u_xlat1.xz;
    u_xlat1.z = 0.0;
    u_xlat4.xyz = u_xlat1.xyz + vs_TEXCOORD4.xyw;
    u_xlat4.xy = u_xlat4.xy / u_xlat4.zz;
    u_xlat43 = texture(_CameraDepthTexture, u_xlat4.xy).x;
    u_xlat43 = _ZBufferParams.z * u_xlat43 + _ZBufferParams.w;
    u_xlat43 = float(1.0) / u_xlat43;
    u_xlat43 = u_xlat43 + (-vs_TEXCOORD4.w);
#ifdef UNITY_ADRENO_ES3
    u_xlat43 = min(max(u_xlat43, 0.0), 1.0);
#else
    u_xlat43 = clamp(u_xlat43, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat43) * u_xlat1.xyz + vs_TEXCOORD4.xyw;
    u_xlat29.xy = u_xlat1.xy / u_xlat1.zz;
    u_xlat29.x = texture(_CameraDepthTexture, u_xlat29.xy).x;
    u_xlat29.x = _ZBufferParams.z * u_xlat29.x + _ZBufferParams.w;
    u_xlat29.x = float(1.0) / u_xlat29.x;
    u_xlat29.x = u_xlat29.x + (-vs_TEXCOORD4.w);
    u_xlat1.w = 0.100000001 / _OpacityByDepth;
    u_xlat16_3.xz = u_xlat16_2.xy;
    u_xlat16_3.y = 1.0;
    u_xlat16_4.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
    u_xlat16_4.x = inversesqrt(u_xlat16_4.x);
    u_xlat16_4.xyz = u_xlat16_3.xyz * u_xlat16_4.xxx;
#ifdef UNITY_ADRENO_ES3
    u_xlatb46 = !!(0.0>=_ES_MoonDirection.y);
#else
    u_xlatb46 = 0.0>=_ES_MoonDirection.y;
#endif
    u_xlat5.xyz = (bool(u_xlatb46)) ? _ES_SunDirection.xyz : _ES_MoonDirection.xyz;
    u_xlat6.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat46 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat46 = inversesqrt(u_xlat46);
    u_xlat7.xyz = vec3(u_xlat46) * u_xlat6.xyz;
    u_xlat5.xyz = u_xlat6.xyz * vec3(u_xlat46) + u_xlat5.xyz;
    u_xlat46 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat46 = inversesqrt(u_xlat46);
    u_xlat5.xyz = vec3(u_xlat46) * u_xlat5.xyz;
    u_xlat4.x = dot(u_xlat16_4.xyz, u_xlat5.xyz);
    u_xlat18.x = _Gloss * 128.0;
    u_xlat4.x = max(u_xlat4.x, 9.99999975e-05);
    u_xlat4.x = log2(u_xlat4.x);
    u_xlat4.x = u_xlat4.x * u_xlat18.x;
    u_xlat4.x = exp2(u_xlat4.x);
    u_xlat4.x = u_xlat4.x * _SpecularIntensity;
    u_xlat4.x = max(u_xlat4.x, 0.0);
    u_xlat4.x = min(u_xlat4.x, 16.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_ES_MoonDirection.y>=9.99999975e-05);
#else
    u_xlatb18 = _ES_MoonDirection.y>=9.99999975e-05;
#endif
    u_xlat18.x = u_xlatb18 ? 1.0 : float(0.0);
    u_xlat32 = _ES_MoonDirection.y + -1.0;
    u_xlat18.x = u_xlat18.x * u_xlat32 + 1.0;
    u_xlat32 = float(1.0) / _ShoreTransparency;
    u_xlat46 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat46 = inversesqrt(u_xlat46);
    u_xlat5.xyz = vec3(u_xlat46) * vs_TEXCOORD6.xyz;
    u_xlat46 = dot(u_xlat7.xyz, u_xlat5.xyz);
    u_xlat46 = (-u_xlat46) + 1.0;
    u_xlat46 = max(u_xlat46, 9.99999975e-05);
    u_xlat46 = log2(u_xlat46);
    u_xlat5.x = u_xlat46 * _SpecularPower;
    u_xlat5.x = exp2(u_xlat5.x);
    u_xlat19.xyz = u_xlat18.xxx * _LightColor0.xyz;
    u_xlat19.xyz = u_xlat4.xxx * u_xlat19.xyz;
    u_xlat4.x = u_xlat29.x + -1.0;
    u_xlat4.x = u_xlat32 * u_xlat4.x;
    u_xlat4.x = u_xlat4.x * 0.100000001;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat19.xyz = u_xlat4.xxx * u_xlat19.xyz;
    u_xlat4.x = u_xlat29.x * u_xlat32;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat4.x = max(u_xlat4.x, 9.99999975e-05);
    u_xlat4.x = log2(u_xlat4.x);
    u_xlat4.x = u_xlat4.x * _ShoreFade;
    u_xlat4.x = exp2(u_xlat4.x);
    u_xlat6.xyz = _ShallowColor.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat6.xyz = u_xlat4.xxx * u_xlat6.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat1.xy = u_xlat1.xy / vs_TEXCOORD4.ww;
    u_xlat10_8.xyz = texture(_SceneScaledBufferBeforTransParent, u_xlat1.xy).xyz;
    u_xlat9.xyz = u_xlat6.xyz * u_xlat10_8.xyz;
    u_xlat1.x = 0.100000001 / _DeepColorDepth;
    u_xlat1.xw = u_xlat1.xw * u_xlat29.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xw = min(max(u_xlat1.xw, 0.0), 1.0);
#else
    u_xlat1.xw = clamp(u_xlat1.xw, 0.0, 1.0);
#endif
    u_xlat1.x = max(u_xlat1.x, 9.99999975e-05);
    u_xlat1.x = log2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _DeepColorFade;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat10.xyz = (-u_xlat6.xyz) * u_xlat10_8.xyz + _DeepColor.xyz;
    u_xlat10.xyz = u_xlat1.xxx * u_xlat10.xyz + u_xlat9.xyz;
    u_xlat11.xyz = u_xlat16_2.xyz * _DistortionIntensity.xyz;
    u_xlat12.x = vs_TEXCOORD8.x;
    u_xlat12.y = vs_TEXCOORD9.x;
    u_xlat12.z = vs_TEXCOORD6.x;
    u_xlat12.x = dot(u_xlat12.xyz, u_xlat11.xyz);
    u_xlat13.x = vs_TEXCOORD8.y;
    u_xlat13.y = vs_TEXCOORD9.y;
    u_xlat13.z = vs_TEXCOORD6.y;
    u_xlat12.y = dot(u_xlat13.xyz, u_xlat11.xyz);
    u_xlat13.x = vs_TEXCOORD8.z;
    u_xlat13.y = vs_TEXCOORD9.z;
    u_xlat13.z = vs_TEXCOORD6.z;
    u_xlat12.z = dot(u_xlat13.xyz, u_xlat11.xyz);
    u_xlat1.x = dot(u_xlat12.xyz, u_xlat12.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat12.xyz = u_xlat1.xxx * u_xlat12.xyz;
    u_xlat1.x = dot((-u_xlat7.xyz), u_xlat12.xyz);
    u_xlat1.x = u_xlat1.x + u_xlat1.x;
    u_xlat7.xyz = u_xlat12.xyz * (-u_xlat1.xxx) + (-u_xlat7.xyz);
    u_xlat10_0 = textureLod(_ReflectionSkyCubeMap, u_xlat7.xyz, 0.0);
    u_xlat16_2.x = u_xlat10_0.w + -1.0;
    u_xlat16_2.x = _ReflectionSkyCubeMap_HDR.w * u_xlat16_2.x + 1.0;
    u_xlat16_2.x = log2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * _ReflectionSkyCubeMap_HDR.y;
    u_xlat16_2.x = exp2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * _ReflectionSkyCubeMap_HDR.x;
    u_xlat16_16.xyz = u_xlat10_0.xyz * u_xlat16_2.xxx;
    u_xlat1.xy = u_xlat11.xy * vec2(_SSRDistortion);
    u_xlat18.x = float(1.0) / _SSRDistortion_Shore;
    u_xlat18.x = u_xlat29.x * u_xlat18.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat18.x = min(max(u_xlat18.x, 0.0), 1.0);
#else
    u_xlat18.x = clamp(u_xlat18.x, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat1.xy * u_xlat18.xx;
    u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD4.ww + vs_TEXCOORD4.xy;
    u_xlat1.xy = u_xlat1.xy / vs_TEXCOORD4.ww;
    u_xlat10_3 = texture(_SSRTexture, u_xlat1.xy).wxyz;
    u_xlat16_7.xyz = (-u_xlat16_2.xxx) * u_xlat10_0.xyz + u_xlat10_3.yzw;
    u_xlat7.xyz = u_xlat16_7.xyz * vec3(vec3(_SSRIntensity, _SSRIntensity, _SSRIntensity));
    u_xlat16_3.x = u_xlat10_3.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat7.xyz = u_xlat16_3.xxx * u_xlat7.xyz + u_xlat16_16.xyz;
    u_xlat1.x = u_xlat46 * _FresnelPower;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _ReflectionIntensity;
    u_xlat15.x = float(1.0) / _ShoreReflectionFade;
    u_xlat15.x = u_xlat15.x * u_xlat29.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat15.x = min(max(u_xlat15.x, 0.0), 1.0);
#else
    u_xlat15.x = clamp(u_xlat15.x, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat15.x * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat18.xyz = (-u_xlat10.xyz) + u_xlat7.xyz;
    u_xlat1.xyz = u_xlat1.xxx * u_xlat18.xyz + u_xlat10.xyz;
    u_xlat1.xyz = (-u_xlat6.xyz) * u_xlat10_8.xyz + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat4.xxx * u_xlat1.xyz + u_xlat9.xyz;
    u_xlat1.xyz = u_xlat19.xyz * u_xlat5.xxx + u_xlat1.xyz;
    u_xlat0.w = u_xlat1.w * vs_COLOR0.w;
    u_xlat4.xyz = vs_TEXCOORD5.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat5.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat5.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat5.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat43 = dot(u_xlat4.xyz, u_xlat5.xyz);
    u_xlat4.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat4.x = sqrt(u_xlat4.x);
    u_xlat18.y = u_xlat4.x * _HeigtFogParams.y;
    u_xlat46 = u_xlat4.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat46 = min(max(u_xlat46, 0.0), 1.0);
#else
    u_xlat46 = clamp(u_xlat46, 0.0, 1.0);
#endif
    u_xlat5.x = (-u_xlat46) + 2.0;
    u_xlat46 = u_xlat46 * u_xlat5.x;
    u_xlat5.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb43 = !!((-u_xlat43)>=u_xlat5.x);
#else
    u_xlatb43 = (-u_xlat43)>=u_xlat5.x;
#endif
    u_xlat5.x = u_xlat46 * _HeigtFogColDelta.w;
    u_xlat43 = (u_xlatb43) ? u_xlat5.x : u_xlat46;
    u_xlat43 = log2(u_xlat43);
    u_xlat43 = u_xlat43 * unity_FogColor.w;
    u_xlat43 = exp2(u_xlat43);
    u_xlat43 = min(u_xlat43, _HeigtFogColBase.w);
    u_xlat46 = vs_TEXCOORD5.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat46 = min(max(u_xlat46, 0.0), 1.0);
#else
    u_xlat46 = clamp(u_xlat46, 0.0, 1.0);
#endif
    u_xlat16_2.x = (-u_xlat46) + 2.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat46;
    u_xlat5.xyz = u_xlat16_2.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat46 = u_xlat4.x + (-_HeigtFogRamp.w);
    u_xlat46 = u_xlat46 * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat46 = min(max(u_xlat46, 0.0), 1.0);
#else
    u_xlat46 = clamp(u_xlat46, 0.0, 1.0);
#endif
    u_xlat6.xyz = (-u_xlat5.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat5.xyz = vec3(u_xlat46) * u_xlat6.xyz + u_xlat5.xyz;
    u_xlat46 = u_xlat4.y * _HeigtFogParams.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb47 = !!(0.00999999978<abs(u_xlat46));
#else
    u_xlatb47 = 0.00999999978<abs(u_xlat46);
#endif
    u_xlat6.x = u_xlat46 * -1.44269502;
    u_xlat6.x = exp2(u_xlat6.x);
    u_xlat6.x = (-u_xlat6.x) + 1.0;
    u_xlat46 = u_xlat6.x / u_xlat46;
    u_xlat16_2.x = (u_xlatb47) ? u_xlat46 : 1.0;
    u_xlat18.x = u_xlat4.y * _HeigtFogParams2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb46 = !!(0.00999999978<abs(u_xlat18.x));
#else
    u_xlatb46 = 0.00999999978<abs(u_xlat18.x);
#endif
    u_xlat47 = u_xlat18.x * -1.44269502;
    u_xlat47 = exp2(u_xlat47);
    u_xlat47 = (-u_xlat47) + 1.0;
    u_xlat18.x = u_xlat47 / u_xlat18.x;
    u_xlat16_2.y = (u_xlatb46) ? u_xlat18.x : 1.0;
    u_xlat18.x = u_xlat4.x * _HeigtFogParams2.y;
    u_xlat16_2.xy = u_xlat16_2.xy * u_xlat18.yx;
    u_xlat16_2.x = exp2((-u_xlat16_2.x));
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_16.x = exp2((-u_xlat16_2.y));
    u_xlat16_2.y = (-u_xlat16_16.x) + 1.0;
    u_xlat16_2.xy = max(u_xlat16_2.xy, vec2(0.0, 0.0));
    u_xlat16_2.x = u_xlat16_2.y + u_xlat16_2.x;
    u_xlat4.x = u_xlat4.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat16_16.x = (-u_xlat4.x) + 2.0;
    u_xlat16_16.x = u_xlat16_16.x * u_xlat4.x;
    u_xlat4.x = u_xlat16_16.x * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat4.x = u_xlat4.x + 1.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat4.x;
    u_xlat4.x = min(u_xlat16_2.x, _HeigtFogColBase.w);
    u_xlat18.x = vs_TEXCOORD5.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat18.x = min(max(u_xlat18.x, 0.0), 1.0);
#else
    u_xlat18.x = clamp(u_xlat18.x, 0.0, 1.0);
#endif
    u_xlat18.xyz = u_xlat18.xxx * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    u_xlat5.xyz = vec3(u_xlat43) * u_xlat5.xyz;
    u_xlat47 = (-u_xlat4.x) + 1.0;
    u_xlat5.xyz = vec3(u_xlat47) * u_xlat5.xyz;
    u_xlat4.xyz = u_xlat18.xyz * u_xlat4.xxx + u_xlat5.xyz;
    u_xlat43 = (-u_xlat43) + 1.0;
    u_xlat43 = u_xlat47 * u_xlat43;
    u_xlat0.xyz = vec3(u_xlat43) * u_xlat1.xyz + u_xlat4.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "MSAA_INTERPOLATION" "MHY_SHADER_MIDDLE" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	mediump float _MHYZBias;
uniform 	vec4 hlslcc_mtx4x4_mhyJitteredVP[4];
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
out highp vec4 vs_TEXCOORD9;
out highp vec4 vs_TEXCOORD10;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
vec4 u_xlat4;
bool u_xlatb4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
mediump vec4 u_xlat16_6;
vec4 u_xlat7;
mediump vec3 u_xlat16_8;
float u_xlat11;
vec3 u_xlat13;
mediump float u_xlat16_14;
float u_xlat27;
bool u_xlatb27;
float u_xlat29;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4_mhyJitteredVP[1];
    u_xlat2 = hlslcc_mtx4x4_mhyJitteredVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4_mhyJitteredVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4_mhyJitteredVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat3.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    u_xlat3.xyw = u_xlat2.xyw;
    gl_Position = u_xlat3;
    vs_COLOR0 = in_COLOR0;
    u_xlat2.xyw = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat27 = u_xlat2.y * _HeigtFogParams.x;
    u_xlat4.x = u_xlat27 * -1.44269502;
    u_xlat4.x = exp2(u_xlat4.x);
    u_xlat4.x = (-u_xlat4.x) + 1.0;
    u_xlat4.x = u_xlat4.x / u_xlat27;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(0.00999999978<abs(u_xlat27));
#else
    u_xlatb27 = 0.00999999978<abs(u_xlat27);
#endif
    u_xlat16_5.x = (u_xlatb27) ? u_xlat4.x : 1.0;
    u_xlat27 = dot(u_xlat2.xyw, u_xlat2.xyw);
    u_xlat27 = sqrt(u_xlat27);
    u_xlat4.x = u_xlat27 * _HeigtFogParams.y;
    u_xlat16_5.x = u_xlat4.x * u_xlat16_5.x;
    u_xlat16_5.x = exp2((-u_xlat16_5.x));
    u_xlat16_5.x = (-u_xlat16_5.x) + 1.0;
    u_xlat4.x = u_xlat2.y * _HeigtFogParams2.x;
    u_xlat13.x = u_xlat4.x * -1.44269502;
    u_xlat13.x = exp2(u_xlat13.x);
    u_xlat13.x = (-u_xlat13.x) + 1.0;
    u_xlat13.x = u_xlat13.x / u_xlat4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(0.00999999978<abs(u_xlat4.x));
#else
    u_xlatb4 = 0.00999999978<abs(u_xlat4.x);
#endif
    u_xlat16_14 = (u_xlatb4) ? u_xlat13.x : 1.0;
    u_xlat4.x = u_xlat27 * _HeigtFogParams2.y;
    u_xlat16_14 = u_xlat4.x * u_xlat16_14;
    u_xlat16_14 = exp2((-u_xlat16_14));
    u_xlat16_5.y = (-u_xlat16_14) + 1.0;
    u_xlat16_5.xy = max(u_xlat16_5.xy, vec2(0.0, 0.0));
    u_xlat16_5.x = u_xlat16_5.y + u_xlat16_5.x;
    u_xlat4.x = u_xlat27 * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat16_14 = (-u_xlat4.x) + 2.0;
    u_xlat16_14 = u_xlat4.x * u_xlat16_14;
    u_xlat4.x = u_xlat16_14 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat4.x = u_xlat4.x + 1.0;
    u_xlat16_5.x = u_xlat4.x * u_xlat16_5.x;
    u_xlat4.x = min(u_xlat16_5.x, _HeigtFogColBase.w);
    u_xlat13.x = (-u_xlat4.x) + 1.0;
    u_xlat6.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat6.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat6.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat2.x = dot(u_xlat2.xyw, u_xlat6.xyz);
    u_xlat11 = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!((-u_xlat2.x)>=u_xlat11);
#else
    u_xlatb2 = (-u_xlat2.x)>=u_xlat11;
#endif
    u_xlat11 = u_xlat27 * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat11 = min(max(u_xlat11, 0.0), 1.0);
#else
    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
#endif
    u_xlat27 = u_xlat27 + (-_HeigtFogRamp.w);
    u_xlat27 = u_xlat27 * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
    u_xlat29 = (-u_xlat11) + 2.0;
    u_xlat11 = u_xlat29 * u_xlat11;
    u_xlat29 = u_xlat11 * _HeigtFogColDelta.w;
    u_xlat2.x = (u_xlatb2) ? u_xlat29 : u_xlat11;
    u_xlat2.x = log2(u_xlat2.x);
    u_xlat2.x = u_xlat2.x * unity_FogColor.w;
    u_xlat2.x = exp2(u_xlat2.x);
    u_xlat2.x = min(u_xlat2.x, _HeigtFogColBase.w);
    u_xlat11 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat11 = min(max(u_xlat11, 0.0), 1.0);
#else
    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
#endif
    u_xlat16_5.x = (-u_xlat11) + 2.0;
    u_xlat16_5.x = u_xlat11 * u_xlat16_5.x;
    u_xlat6.xyz = u_xlat16_5.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat7.xyz = (-u_xlat6.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat6.xyz = vec3(u_xlat27) * u_xlat7.xyz + u_xlat6.xyz;
    u_xlat6.xyz = u_xlat2.xxx * u_xlat6.xyz;
    u_xlat27 = (-u_xlat2.x) + 1.0;
    vs_TEXCOORD0.w = u_xlat13.x * u_xlat27;
    u_xlat2.xyw = u_xlat13.xxx * u_xlat6.xyz;
    u_xlat27 = u_xlat0.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
    u_xlat13.xyz = vec3(u_xlat27) * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    vs_TEXCOORD0.xyz = u_xlat13.xyz * u_xlat4.xxx + u_xlat2.xyw;
    u_xlat4.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat4.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat4.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat27 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat4.xyz = vec3(u_xlat27) * u_xlat4.xyz;
    u_xlat16_5.x = u_xlat4.y * u_xlat4.y;
    u_xlat16_5.x = u_xlat4.x * u_xlat4.x + (-u_xlat16_5.x);
    u_xlat16_6 = u_xlat4.yzzx * u_xlat4.xyzz;
    u_xlat16_8.x = dot(unity_SHBr, u_xlat16_6);
    u_xlat16_8.y = dot(unity_SHBg, u_xlat16_6);
    u_xlat16_8.z = dot(unity_SHBb, u_xlat16_6);
    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_8.xyz;
    u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat4.w = 1.0;
    u_xlat16_8.x = dot(unity_SHAr, u_xlat4);
    u_xlat16_8.y = dot(unity_SHAg, u_xlat4);
    u_xlat16_8.z = dot(unity_SHAb, u_xlat4);
    u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_8.xyz;
    vs_TEXCOORD1.xyz = u_xlat16_5.xyz;
    vs_TEXCOORD1.w = 1.0;
    u_xlat27 = u_xlat3.y * _ProjectionParams.x;
    u_xlat7.w = u_xlat27 * 0.5;
    u_xlat7.xz = u_xlat3.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.z = u_xlat2.z;
    u_xlat3.xy = u_xlat7.zz + u_xlat7.xw;
    vs_TEXCOORD2 = u_xlat3;
    vs_TEXCOORD4.xyw = u_xlat3.xyw;
    u_xlat27 = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat27 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat27;
    u_xlat27 = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat27;
    u_xlat27 = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat27;
    vs_TEXCOORD3.z = (-u_xlat27);
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD3.w = 0.0;
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD5.w = 0.0;
    vs_TEXCOORD6.xyz = u_xlat4.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[1].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].www + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * in_POSITION0.yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.zzz + u_xlat1.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.www + u_xlat1.xyz;
    vs_TEXCOORD7.xyz = u_xlat1.xyz * vec3(-1.0, -1.0, 1.0);
    vs_TEXCOORD7.w = 0.0;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat27 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat1.xyz = vec3(u_xlat27) * u_xlat1.xyz;
    vs_TEXCOORD8.xyz = u_xlat1.xyz;
    vs_TEXCOORD8.w = 0.0;
    u_xlat2.xyz = u_xlat1.yzx * u_xlat4.zxy;
    u_xlat1.xyz = u_xlat4.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
    u_xlat27 = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD9.xyz = vec3(u_xlat27) * u_xlat1.xyz;
    vs_TEXCOORD9.w = 0.0;
    u_xlat27 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat27 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat27;
    vs_TEXCOORD10.w = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat27;
    vs_TEXCOORD10.xyz = u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _NormalMapScale;
uniform 	float _Normal01_U_Speed;
uniform 	float _Normal01_VSpeed;
uniform 	float _NormalMapBias;
uniform 	float _Normal02_U_Speed;
uniform 	float _Normal02_V_Speed;
uniform 	float _RefractionIntensity;
uniform 	float _OpacityByDepth;
uniform 	float _SpecularIntensity;
uniform 	vec3 _ES_MoonDirection;
uniform 	vec3 _ES_SunDirection;
uniform 	float _Gloss;
uniform 	float _ShoreTransparency;
uniform 	float _SpecularPower;
uniform 	vec4 _ShallowColor;
uniform 	float _ShoreFade;
uniform 	vec4 _DeepColor;
uniform 	float _DeepColorDepth;
uniform 	float _DeepColorFade;
uniform 	vec4 _DistortionIntensity;
uniform 	float _SSRDistortion;
uniform 	float _SSRDistortion_Shore;
uniform 	float _SSRIntensity;
uniform 	float _ReflectionIntensity;
uniform 	float _FresnelPower;
uniform 	float _ShoreReflectionFade;
uniform 	mediump float _ProjectUVScale;
uniform 	vec4 _ReflectionSkyCubeMap_HDR;
uniform lowp sampler2D _Normal01;
uniform lowp sampler2D _Normal02;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _SceneScaledBufferBeforTransParent;
uniform lowp samplerCube _ReflectionSkyCubeMap;
uniform lowp sampler2D _SSRTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD8;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
lowp vec4 u_xlat10_3;
vec3 u_xlat4;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
mediump vec3 u_xlat16_7;
lowp vec3 u_xlat10_8;
vec3 u_xlat9;
vec3 u_xlat10;
vec3 u_xlat11;
vec3 u_xlat12;
vec3 u_xlat13;
vec2 u_xlat15;
mediump vec3 u_xlat16_16;
vec3 u_xlat18;
bool u_xlatb18;
vec3 u_xlat19;
vec2 u_xlat29;
float u_xlat32;
float u_xlat43;
bool u_xlatb43;
float u_xlat46;
bool u_xlatb46;
float u_xlat47;
bool u_xlatb47;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD5.zx * vec2(vec2(_ProjectUVScale, _ProjectUVScale));
    u_xlat1.x = _Time.y * _Normal01_U_Speed + u_xlat0.y;
    u_xlat1.yz = _Time.yy * vec2(_Normal01_VSpeed, _Normal02_U_Speed) + u_xlat0.xy;
    u_xlat1.w = _Time.y * _Normal02_V_Speed + u_xlat0.x;
    u_xlat10_0.xyz = texture(_Normal01, u_xlat1.xy, _NormalMapBias).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_2.xy = u_xlat16_0.xy * vec2(_NormalMapScale);
    u_xlat10_1.xyz = texture(_Normal02, u_xlat1.zw, _NormalMapBias).xyz;
    u_xlat16_0.w = -1.0;
    u_xlat16_3.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.wwz;
    u_xlat16_3.xy = u_xlat16_3.xy * vec2(_NormalMapScale);
    u_xlat16_2.z = -1.0;
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
    u_xlat1.x = float(1.0) / vs_TEXCOORD4.w;
    u_xlat15.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat15.x = texture(_CameraDepthTexture, u_xlat15.xy).x;
    u_xlat15.x = _ZBufferParams.z * u_xlat15.x + _ZBufferParams.w;
    u_xlat15.x = float(1.0) / u_xlat15.x;
    u_xlat29.xy = u_xlat16_2.xy * vec2(vec2(_RefractionIntensity, _RefractionIntensity));
    u_xlat1.x = u_xlat1.x * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.xz = u_xlat1.xx * u_xlat29.xy;
    u_xlat1.xz = u_xlat1.xz * vs_TEXCOORD4.ww;
    u_xlat15.x = u_xlat15.x + (-vs_TEXCOORD4.w);
#ifdef UNITY_ADRENO_ES3
    u_xlat15.x = min(max(u_xlat15.x, 0.0), 1.0);
#else
    u_xlat15.x = clamp(u_xlat15.x, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat15.xx * u_xlat1.xz;
    u_xlat1.z = 0.0;
    u_xlat4.xyz = u_xlat1.xyz + vs_TEXCOORD4.xyw;
    u_xlat4.xy = u_xlat4.xy / u_xlat4.zz;
    u_xlat43 = texture(_CameraDepthTexture, u_xlat4.xy).x;
    u_xlat43 = _ZBufferParams.z * u_xlat43 + _ZBufferParams.w;
    u_xlat43 = float(1.0) / u_xlat43;
    u_xlat43 = u_xlat43 + (-vs_TEXCOORD4.w);
#ifdef UNITY_ADRENO_ES3
    u_xlat43 = min(max(u_xlat43, 0.0), 1.0);
#else
    u_xlat43 = clamp(u_xlat43, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat43) * u_xlat1.xyz + vs_TEXCOORD4.xyw;
    u_xlat29.xy = u_xlat1.xy / u_xlat1.zz;
    u_xlat29.x = texture(_CameraDepthTexture, u_xlat29.xy).x;
    u_xlat29.x = _ZBufferParams.z * u_xlat29.x + _ZBufferParams.w;
    u_xlat29.x = float(1.0) / u_xlat29.x;
    u_xlat29.x = u_xlat29.x + (-vs_TEXCOORD4.w);
    u_xlat1.w = 0.100000001 / _OpacityByDepth;
    u_xlat16_3.xz = u_xlat16_2.xy;
    u_xlat16_3.y = 1.0;
    u_xlat16_4.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
    u_xlat16_4.x = inversesqrt(u_xlat16_4.x);
    u_xlat16_4.xyz = u_xlat16_3.xyz * u_xlat16_4.xxx;
#ifdef UNITY_ADRENO_ES3
    u_xlatb46 = !!(0.0>=_ES_MoonDirection.y);
#else
    u_xlatb46 = 0.0>=_ES_MoonDirection.y;
#endif
    u_xlat5.xyz = (bool(u_xlatb46)) ? _ES_SunDirection.xyz : _ES_MoonDirection.xyz;
    u_xlat6.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat46 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat46 = inversesqrt(u_xlat46);
    u_xlat7.xyz = vec3(u_xlat46) * u_xlat6.xyz;
    u_xlat5.xyz = u_xlat6.xyz * vec3(u_xlat46) + u_xlat5.xyz;
    u_xlat46 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat46 = inversesqrt(u_xlat46);
    u_xlat5.xyz = vec3(u_xlat46) * u_xlat5.xyz;
    u_xlat4.x = dot(u_xlat16_4.xyz, u_xlat5.xyz);
    u_xlat18.x = _Gloss * 128.0;
    u_xlat4.x = max(u_xlat4.x, 9.99999975e-05);
    u_xlat4.x = log2(u_xlat4.x);
    u_xlat4.x = u_xlat4.x * u_xlat18.x;
    u_xlat4.x = exp2(u_xlat4.x);
    u_xlat4.x = u_xlat4.x * _SpecularIntensity;
    u_xlat4.x = max(u_xlat4.x, 0.0);
    u_xlat4.x = min(u_xlat4.x, 16.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_ES_MoonDirection.y>=9.99999975e-05);
#else
    u_xlatb18 = _ES_MoonDirection.y>=9.99999975e-05;
#endif
    u_xlat18.x = u_xlatb18 ? 1.0 : float(0.0);
    u_xlat32 = _ES_MoonDirection.y + -1.0;
    u_xlat18.x = u_xlat18.x * u_xlat32 + 1.0;
    u_xlat32 = float(1.0) / _ShoreTransparency;
    u_xlat46 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat46 = inversesqrt(u_xlat46);
    u_xlat5.xyz = vec3(u_xlat46) * vs_TEXCOORD6.xyz;
    u_xlat46 = dot(u_xlat7.xyz, u_xlat5.xyz);
    u_xlat46 = (-u_xlat46) + 1.0;
    u_xlat46 = max(u_xlat46, 9.99999975e-05);
    u_xlat46 = log2(u_xlat46);
    u_xlat5.x = u_xlat46 * _SpecularPower;
    u_xlat5.x = exp2(u_xlat5.x);
    u_xlat19.xyz = u_xlat18.xxx * _LightColor0.xyz;
    u_xlat19.xyz = u_xlat4.xxx * u_xlat19.xyz;
    u_xlat4.x = u_xlat29.x + -1.0;
    u_xlat4.x = u_xlat32 * u_xlat4.x;
    u_xlat4.x = u_xlat4.x * 0.100000001;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat19.xyz = u_xlat4.xxx * u_xlat19.xyz;
    u_xlat4.x = u_xlat29.x * u_xlat32;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat4.x = max(u_xlat4.x, 9.99999975e-05);
    u_xlat4.x = log2(u_xlat4.x);
    u_xlat4.x = u_xlat4.x * _ShoreFade;
    u_xlat4.x = exp2(u_xlat4.x);
    u_xlat6.xyz = _ShallowColor.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat6.xyz = u_xlat4.xxx * u_xlat6.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat1.xy = u_xlat1.xy / vs_TEXCOORD4.ww;
    u_xlat10_8.xyz = texture(_SceneScaledBufferBeforTransParent, u_xlat1.xy).xyz;
    u_xlat9.xyz = u_xlat6.xyz * u_xlat10_8.xyz;
    u_xlat1.x = 0.100000001 / _DeepColorDepth;
    u_xlat1.xw = u_xlat1.xw * u_xlat29.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xw = min(max(u_xlat1.xw, 0.0), 1.0);
#else
    u_xlat1.xw = clamp(u_xlat1.xw, 0.0, 1.0);
#endif
    u_xlat1.x = max(u_xlat1.x, 9.99999975e-05);
    u_xlat1.x = log2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _DeepColorFade;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat10.xyz = (-u_xlat6.xyz) * u_xlat10_8.xyz + _DeepColor.xyz;
    u_xlat10.xyz = u_xlat1.xxx * u_xlat10.xyz + u_xlat9.xyz;
    u_xlat11.xyz = u_xlat16_2.xyz * _DistortionIntensity.xyz;
    u_xlat12.x = vs_TEXCOORD8.x;
    u_xlat12.y = vs_TEXCOORD9.x;
    u_xlat12.z = vs_TEXCOORD6.x;
    u_xlat12.x = dot(u_xlat12.xyz, u_xlat11.xyz);
    u_xlat13.x = vs_TEXCOORD8.y;
    u_xlat13.y = vs_TEXCOORD9.y;
    u_xlat13.z = vs_TEXCOORD6.y;
    u_xlat12.y = dot(u_xlat13.xyz, u_xlat11.xyz);
    u_xlat13.x = vs_TEXCOORD8.z;
    u_xlat13.y = vs_TEXCOORD9.z;
    u_xlat13.z = vs_TEXCOORD6.z;
    u_xlat12.z = dot(u_xlat13.xyz, u_xlat11.xyz);
    u_xlat1.x = dot(u_xlat12.xyz, u_xlat12.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat12.xyz = u_xlat1.xxx * u_xlat12.xyz;
    u_xlat1.x = dot((-u_xlat7.xyz), u_xlat12.xyz);
    u_xlat1.x = u_xlat1.x + u_xlat1.x;
    u_xlat7.xyz = u_xlat12.xyz * (-u_xlat1.xxx) + (-u_xlat7.xyz);
    u_xlat10_0 = textureLod(_ReflectionSkyCubeMap, u_xlat7.xyz, 0.0);
    u_xlat16_2.x = u_xlat10_0.w + -1.0;
    u_xlat16_2.x = _ReflectionSkyCubeMap_HDR.w * u_xlat16_2.x + 1.0;
    u_xlat16_2.x = log2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * _ReflectionSkyCubeMap_HDR.y;
    u_xlat16_2.x = exp2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * _ReflectionSkyCubeMap_HDR.x;
    u_xlat16_16.xyz = u_xlat10_0.xyz * u_xlat16_2.xxx;
    u_xlat1.xy = u_xlat11.xy * vec2(_SSRDistortion);
    u_xlat18.x = float(1.0) / _SSRDistortion_Shore;
    u_xlat18.x = u_xlat29.x * u_xlat18.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat18.x = min(max(u_xlat18.x, 0.0), 1.0);
#else
    u_xlat18.x = clamp(u_xlat18.x, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat1.xy * u_xlat18.xx;
    u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD4.ww + vs_TEXCOORD4.xy;
    u_xlat1.xy = u_xlat1.xy / vs_TEXCOORD4.ww;
    u_xlat10_3 = texture(_SSRTexture, u_xlat1.xy).wxyz;
    u_xlat16_7.xyz = (-u_xlat16_2.xxx) * u_xlat10_0.xyz + u_xlat10_3.yzw;
    u_xlat7.xyz = u_xlat16_7.xyz * vec3(vec3(_SSRIntensity, _SSRIntensity, _SSRIntensity));
    u_xlat16_3.x = u_xlat10_3.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat7.xyz = u_xlat16_3.xxx * u_xlat7.xyz + u_xlat16_16.xyz;
    u_xlat1.x = u_xlat46 * _FresnelPower;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _ReflectionIntensity;
    u_xlat15.x = float(1.0) / _ShoreReflectionFade;
    u_xlat15.x = u_xlat15.x * u_xlat29.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat15.x = min(max(u_xlat15.x, 0.0), 1.0);
#else
    u_xlat15.x = clamp(u_xlat15.x, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat15.x * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat18.xyz = (-u_xlat10.xyz) + u_xlat7.xyz;
    u_xlat1.xyz = u_xlat1.xxx * u_xlat18.xyz + u_xlat10.xyz;
    u_xlat1.xyz = (-u_xlat6.xyz) * u_xlat10_8.xyz + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat4.xxx * u_xlat1.xyz + u_xlat9.xyz;
    u_xlat1.xyz = u_xlat19.xyz * u_xlat5.xxx + u_xlat1.xyz;
    u_xlat0.w = u_xlat1.w * vs_COLOR0.w;
    u_xlat4.xyz = vs_TEXCOORD5.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat5.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat5.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat5.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat43 = dot(u_xlat4.xyz, u_xlat5.xyz);
    u_xlat4.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat4.x = sqrt(u_xlat4.x);
    u_xlat18.y = u_xlat4.x * _HeigtFogParams.y;
    u_xlat46 = u_xlat4.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat46 = min(max(u_xlat46, 0.0), 1.0);
#else
    u_xlat46 = clamp(u_xlat46, 0.0, 1.0);
#endif
    u_xlat5.x = (-u_xlat46) + 2.0;
    u_xlat46 = u_xlat46 * u_xlat5.x;
    u_xlat5.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb43 = !!((-u_xlat43)>=u_xlat5.x);
#else
    u_xlatb43 = (-u_xlat43)>=u_xlat5.x;
#endif
    u_xlat5.x = u_xlat46 * _HeigtFogColDelta.w;
    u_xlat43 = (u_xlatb43) ? u_xlat5.x : u_xlat46;
    u_xlat43 = log2(u_xlat43);
    u_xlat43 = u_xlat43 * unity_FogColor.w;
    u_xlat43 = exp2(u_xlat43);
    u_xlat43 = min(u_xlat43, _HeigtFogColBase.w);
    u_xlat46 = vs_TEXCOORD5.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat46 = min(max(u_xlat46, 0.0), 1.0);
#else
    u_xlat46 = clamp(u_xlat46, 0.0, 1.0);
#endif
    u_xlat16_2.x = (-u_xlat46) + 2.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat46;
    u_xlat5.xyz = u_xlat16_2.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat46 = u_xlat4.x + (-_HeigtFogRamp.w);
    u_xlat46 = u_xlat46 * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat46 = min(max(u_xlat46, 0.0), 1.0);
#else
    u_xlat46 = clamp(u_xlat46, 0.0, 1.0);
#endif
    u_xlat6.xyz = (-u_xlat5.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat5.xyz = vec3(u_xlat46) * u_xlat6.xyz + u_xlat5.xyz;
    u_xlat46 = u_xlat4.y * _HeigtFogParams.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb47 = !!(0.00999999978<abs(u_xlat46));
#else
    u_xlatb47 = 0.00999999978<abs(u_xlat46);
#endif
    u_xlat6.x = u_xlat46 * -1.44269502;
    u_xlat6.x = exp2(u_xlat6.x);
    u_xlat6.x = (-u_xlat6.x) + 1.0;
    u_xlat46 = u_xlat6.x / u_xlat46;
    u_xlat16_2.x = (u_xlatb47) ? u_xlat46 : 1.0;
    u_xlat18.x = u_xlat4.y * _HeigtFogParams2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb46 = !!(0.00999999978<abs(u_xlat18.x));
#else
    u_xlatb46 = 0.00999999978<abs(u_xlat18.x);
#endif
    u_xlat47 = u_xlat18.x * -1.44269502;
    u_xlat47 = exp2(u_xlat47);
    u_xlat47 = (-u_xlat47) + 1.0;
    u_xlat18.x = u_xlat47 / u_xlat18.x;
    u_xlat16_2.y = (u_xlatb46) ? u_xlat18.x : 1.0;
    u_xlat18.x = u_xlat4.x * _HeigtFogParams2.y;
    u_xlat16_2.xy = u_xlat16_2.xy * u_xlat18.yx;
    u_xlat16_2.x = exp2((-u_xlat16_2.x));
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_16.x = exp2((-u_xlat16_2.y));
    u_xlat16_2.y = (-u_xlat16_16.x) + 1.0;
    u_xlat16_2.xy = max(u_xlat16_2.xy, vec2(0.0, 0.0));
    u_xlat16_2.x = u_xlat16_2.y + u_xlat16_2.x;
    u_xlat4.x = u_xlat4.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat16_16.x = (-u_xlat4.x) + 2.0;
    u_xlat16_16.x = u_xlat16_16.x * u_xlat4.x;
    u_xlat4.x = u_xlat16_16.x * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat4.x = u_xlat4.x + 1.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat4.x;
    u_xlat4.x = min(u_xlat16_2.x, _HeigtFogColBase.w);
    u_xlat18.x = vs_TEXCOORD5.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat18.x = min(max(u_xlat18.x, 0.0), 1.0);
#else
    u_xlat18.x = clamp(u_xlat18.x, 0.0, 1.0);
#endif
    u_xlat18.xyz = u_xlat18.xxx * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    u_xlat5.xyz = vec3(u_xlat43) * u_xlat5.xyz;
    u_xlat47 = (-u_xlat4.x) + 1.0;
    u_xlat5.xyz = vec3(u_xlat47) * u_xlat5.xyz;
    u_xlat4.xyz = u_xlat18.xyz * u_xlat4.xxx + u_xlat5.xyz;
    u_xlat43 = (-u_xlat43) + 1.0;
    u_xlat43 = u_xlat47 * u_xlat43;
    u_xlat0.xyz = vec3(u_xlat43) * u_xlat1.xyz + u_xlat4.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "MSAA_INTERPOLATION" "MHY_SHADER_MIDDLE" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	mediump float _MHYZBias;
uniform 	vec4 hlslcc_mtx4x4_mhyJitteredVP[4];
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
out highp vec4 vs_TEXCOORD9;
out highp vec4 vs_TEXCOORD10;
float u_xlat0;
int u_xlati0;
vec4 u_xlat1;
bool u_xlatb1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
bool u_xlatb4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
mediump vec4 u_xlat16_6;
vec4 u_xlat7;
mediump vec3 u_xlat16_8;
vec3 u_xlat9;
float u_xlat10;
float u_xlat13;
bool u_xlatb13;
mediump float u_xlat16_14;
float u_xlat22;
float u_xlat28;
float u_xlat31;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat9.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4_mhyJitteredVP[1];
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[3] * u_xlat2.wwww + u_xlat1;
    u_xlat3.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    u_xlat3.xyw = u_xlat1.xyw;
    gl_Position = u_xlat3;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.xyw = u_xlat9.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat4.x = u_xlat1.y * _HeigtFogParams.x;
    u_xlat13 = u_xlat4.x * -1.44269502;
    u_xlat13 = exp2(u_xlat13);
    u_xlat13 = (-u_xlat13) + 1.0;
    u_xlat13 = u_xlat13 / u_xlat4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(0.00999999978<abs(u_xlat4.x));
#else
    u_xlatb4 = 0.00999999978<abs(u_xlat4.x);
#endif
    u_xlat16_5.x = (u_xlatb4) ? u_xlat13 : 1.0;
    u_xlat4.x = dot(u_xlat1.xyw, u_xlat1.xyw);
    u_xlat4.x = sqrt(u_xlat4.x);
    u_xlat13 = u_xlat4.x * _HeigtFogParams.y;
    u_xlat16_5.x = u_xlat13 * u_xlat16_5.x;
    u_xlat16_5.x = exp2((-u_xlat16_5.x));
    u_xlat16_5.x = (-u_xlat16_5.x) + 1.0;
    u_xlat13 = u_xlat1.y * _HeigtFogParams2.x;
    u_xlat22 = u_xlat13 * -1.44269502;
    u_xlat22 = exp2(u_xlat22);
    u_xlat22 = (-u_xlat22) + 1.0;
    u_xlat22 = u_xlat22 / u_xlat13;
#ifdef UNITY_ADRENO_ES3
    u_xlatb13 = !!(0.00999999978<abs(u_xlat13));
#else
    u_xlatb13 = 0.00999999978<abs(u_xlat13);
#endif
    u_xlat16_14 = (u_xlatb13) ? u_xlat22 : 1.0;
    u_xlat13 = u_xlat4.x * _HeigtFogParams2.y;
    u_xlat16_14 = u_xlat13 * u_xlat16_14;
    u_xlat16_14 = exp2((-u_xlat16_14));
    u_xlat16_5.y = (-u_xlat16_14) + 1.0;
    u_xlat16_5.xy = max(u_xlat16_5.xy, vec2(0.0, 0.0));
    u_xlat16_5.x = u_xlat16_5.y + u_xlat16_5.x;
    u_xlat13 = u_xlat4.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat13 = min(max(u_xlat13, 0.0), 1.0);
#else
    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
#endif
    u_xlat16_14 = (-u_xlat13) + 2.0;
    u_xlat16_14 = u_xlat13 * u_xlat16_14;
    u_xlat13 = u_xlat16_14 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat13 = u_xlat13 + 1.0;
    u_xlat16_5.x = u_xlat13 * u_xlat16_5.x;
    u_xlat13 = min(u_xlat16_5.x, _HeigtFogColBase.w);
    u_xlat22 = (-u_xlat13) + 1.0;
    u_xlat31 = _ProjectionParams.z * 0.999899983;
    u_xlat6.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat6.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat6.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat1.x = dot(u_xlat1.xyw, u_xlat6.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!((-u_xlat1.x)>=u_xlat31);
#else
    u_xlatb1 = (-u_xlat1.x)>=u_xlat31;
#endif
    u_xlat10 = u_xlat4.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat10 = min(max(u_xlat10, 0.0), 1.0);
#else
    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
#endif
    u_xlat28 = u_xlat4.x + (-_HeigtFogRamp.w);
    u_xlat28 = u_xlat28 * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat28 = min(max(u_xlat28, 0.0), 1.0);
#else
    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
#endif
    u_xlat4.x = (-u_xlat10) + 2.0;
    u_xlat10 = u_xlat10 * u_xlat4.x;
    u_xlat4.x = u_xlat10 * _HeigtFogColDelta.w;
    u_xlat1.x = (u_xlatb1) ? u_xlat4.x : u_xlat10;
    u_xlat1.x = log2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * unity_FogColor.w;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat1.x = min(u_xlat1.x, _HeigtFogColBase.w);
    u_xlat10 = u_xlat9.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat10 = min(max(u_xlat10, 0.0), 1.0);
#else
    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
#endif
    u_xlat16_5.x = (-u_xlat10) + 2.0;
    u_xlat16_5.x = u_xlat10 * u_xlat16_5.x;
    u_xlat6.xyz = u_xlat16_5.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat7.xyz = (-u_xlat6.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat6.xyz = vec3(u_xlat28) * u_xlat7.xyz + u_xlat6.xyz;
    u_xlat6.xyz = u_xlat1.xxx * u_xlat6.xyz;
    u_xlat1.x = (-u_xlat1.x) + 1.0;
    vs_TEXCOORD0.w = u_xlat22 * u_xlat1.x;
    u_xlat1.xyw = vec3(u_xlat22) * u_xlat6.xyz;
    u_xlat4.x = u_xlat9.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat4.xzw = u_xlat4.xxx * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    vs_TEXCOORD0.xyz = u_xlat4.xzw * vec3(u_xlat13) + u_xlat1.xyw;
    vs_TEXCOORD1.w = 1.0;
    u_xlat4.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat4.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat4.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat1.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
    u_xlat16_5.x = u_xlat4.y * u_xlat4.y;
    u_xlat16_5.x = u_xlat4.x * u_xlat4.x + (-u_xlat16_5.x);
    u_xlat16_6 = u_xlat4.yzzx * u_xlat4.xyzz;
    u_xlat16_8.x = dot(unity_SHBr, u_xlat16_6);
    u_xlat16_8.y = dot(unity_SHBg, u_xlat16_6);
    u_xlat16_8.z = dot(unity_SHBb, u_xlat16_6);
    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_8.xyz;
    u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat4.w = 1.0;
    u_xlat16_8.x = dot(unity_SHAr, u_xlat4);
    u_xlat16_8.y = dot(unity_SHAg, u_xlat4);
    u_xlat16_8.z = dot(unity_SHAb, u_xlat4);
    u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_8.xyz;
    vs_TEXCOORD1.xyz = u_xlat16_5.xyz;
    u_xlat1.x = u_xlat3.y * _ProjectionParams.x;
    u_xlat7.w = u_xlat1.x * 0.5;
    u_xlat7.xz = u_xlat3.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.z = u_xlat1.z;
    u_xlat3.xy = u_xlat7.zz + u_xlat7.xw;
    vs_TEXCOORD2 = u_xlat3;
    vs_TEXCOORD4.xyw = u_xlat3.xyw;
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD3.w = 0.0;
    u_xlat1.x = u_xlat2.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat2.x + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat2.z + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat2.w + u_xlat1.x;
    vs_TEXCOORD3.z = (-u_xlat1.x);
    vs_TEXCOORD5.w = 0.0;
    vs_TEXCOORD5.xyz = u_xlat9.xyz;
    u_xlat9.xyz = (-u_xlat9.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD6.w = 0.0;
    vs_TEXCOORD6.xyz = u_xlat4.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].www + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * in_POSITION0.yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.zzz + u_xlat1.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.www + u_xlat1.xyz;
    vs_TEXCOORD7.xyz = u_xlat1.xyz * vec3(-1.0, -1.0, 1.0);
    vs_TEXCOORD7.w = 0.0;
    u_xlat1.xyz = in_TANGENT0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat0 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0 = inversesqrt(u_xlat0);
    u_xlat1.xyz = vec3(u_xlat0) * u_xlat1.xyz;
    vs_TEXCOORD8.xyz = u_xlat1.xyz;
    vs_TEXCOORD8.w = 0.0;
    u_xlat2.xyz = u_xlat1.yzx * u_xlat4.zxy;
    u_xlat1.xyz = u_xlat4.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
    u_xlat0 = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD9.xyz = vec3(u_xlat0) * u_xlat1.xyz;
    vs_TEXCOORD9.w = 0.0;
    u_xlat0 = u_xlat9.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat9.x + u_xlat0;
    vs_TEXCOORD10.w = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat9.z + u_xlat0;
    vs_TEXCOORD10.xyz = u_xlat9.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _NormalMapScale;
uniform 	float _Normal01_U_Speed;
uniform 	float _Normal01_VSpeed;
uniform 	float _NormalMapBias;
uniform 	float _Normal02_U_Speed;
uniform 	float _Normal02_V_Speed;
uniform 	float _RefractionIntensity;
uniform 	float _OpacityByDepth;
uniform 	float _SpecularIntensity;
uniform 	vec3 _ES_MoonDirection;
uniform 	vec3 _ES_SunDirection;
uniform 	float _Gloss;
uniform 	float _ShoreTransparency;
uniform 	float _SpecularPower;
uniform 	vec4 _ShallowColor;
uniform 	float _ShoreFade;
uniform 	vec4 _DeepColor;
uniform 	float _DeepColorDepth;
uniform 	float _DeepColorFade;
uniform 	vec4 _DistortionIntensity;
uniform 	float _SSRDistortion;
uniform 	float _SSRDistortion_Shore;
uniform 	float _SSRIntensity;
uniform 	float _ReflectionIntensity;
uniform 	float _FresnelPower;
uniform 	float _ShoreReflectionFade;
uniform 	mediump float _ProjectUVScale;
uniform 	vec4 _ReflectionSkyCubeMap_HDR;
uniform lowp sampler2D _Normal01;
uniform lowp sampler2D _Normal02;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _SceneScaledBufferBeforTransParent;
uniform lowp samplerCube _ReflectionSkyCubeMap;
uniform lowp sampler2D _SSRTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD8;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
lowp vec4 u_xlat10_3;
vec3 u_xlat4;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
mediump vec3 u_xlat16_7;
lowp vec3 u_xlat10_8;
vec3 u_xlat9;
vec3 u_xlat10;
vec3 u_xlat11;
vec3 u_xlat12;
vec3 u_xlat13;
vec2 u_xlat15;
mediump vec3 u_xlat16_16;
vec3 u_xlat18;
bool u_xlatb18;
vec3 u_xlat19;
vec2 u_xlat29;
float u_xlat32;
float u_xlat43;
bool u_xlatb43;
float u_xlat46;
bool u_xlatb46;
float u_xlat47;
bool u_xlatb47;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD5.zx * vec2(vec2(_ProjectUVScale, _ProjectUVScale));
    u_xlat1.x = _Time.y * _Normal01_U_Speed + u_xlat0.y;
    u_xlat1.yz = _Time.yy * vec2(_Normal01_VSpeed, _Normal02_U_Speed) + u_xlat0.xy;
    u_xlat1.w = _Time.y * _Normal02_V_Speed + u_xlat0.x;
    u_xlat10_0.xyz = texture(_Normal01, u_xlat1.xy, _NormalMapBias).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_2.xy = u_xlat16_0.xy * vec2(_NormalMapScale);
    u_xlat10_1.xyz = texture(_Normal02, u_xlat1.zw, _NormalMapBias).xyz;
    u_xlat16_0.w = -1.0;
    u_xlat16_3.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.wwz;
    u_xlat16_3.xy = u_xlat16_3.xy * vec2(_NormalMapScale);
    u_xlat16_2.z = -1.0;
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
    u_xlat1.x = float(1.0) / vs_TEXCOORD4.w;
    u_xlat15.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat15.x = texture(_CameraDepthTexture, u_xlat15.xy).x;
    u_xlat15.x = _ZBufferParams.z * u_xlat15.x + _ZBufferParams.w;
    u_xlat15.x = float(1.0) / u_xlat15.x;
    u_xlat29.xy = u_xlat16_2.xy * vec2(vec2(_RefractionIntensity, _RefractionIntensity));
    u_xlat1.x = u_xlat1.x * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.xz = u_xlat1.xx * u_xlat29.xy;
    u_xlat1.xz = u_xlat1.xz * vs_TEXCOORD4.ww;
    u_xlat15.x = u_xlat15.x + (-vs_TEXCOORD4.w);
#ifdef UNITY_ADRENO_ES3
    u_xlat15.x = min(max(u_xlat15.x, 0.0), 1.0);
#else
    u_xlat15.x = clamp(u_xlat15.x, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat15.xx * u_xlat1.xz;
    u_xlat1.z = 0.0;
    u_xlat4.xyz = u_xlat1.xyz + vs_TEXCOORD4.xyw;
    u_xlat4.xy = u_xlat4.xy / u_xlat4.zz;
    u_xlat43 = texture(_CameraDepthTexture, u_xlat4.xy).x;
    u_xlat43 = _ZBufferParams.z * u_xlat43 + _ZBufferParams.w;
    u_xlat43 = float(1.0) / u_xlat43;
    u_xlat43 = u_xlat43 + (-vs_TEXCOORD4.w);
#ifdef UNITY_ADRENO_ES3
    u_xlat43 = min(max(u_xlat43, 0.0), 1.0);
#else
    u_xlat43 = clamp(u_xlat43, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat43) * u_xlat1.xyz + vs_TEXCOORD4.xyw;
    u_xlat29.xy = u_xlat1.xy / u_xlat1.zz;
    u_xlat29.x = texture(_CameraDepthTexture, u_xlat29.xy).x;
    u_xlat29.x = _ZBufferParams.z * u_xlat29.x + _ZBufferParams.w;
    u_xlat29.x = float(1.0) / u_xlat29.x;
    u_xlat29.x = u_xlat29.x + (-vs_TEXCOORD4.w);
    u_xlat1.w = 0.100000001 / _OpacityByDepth;
    u_xlat16_3.xz = u_xlat16_2.xy;
    u_xlat16_3.y = 1.0;
    u_xlat16_4.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
    u_xlat16_4.x = inversesqrt(u_xlat16_4.x);
    u_xlat16_4.xyz = u_xlat16_3.xyz * u_xlat16_4.xxx;
#ifdef UNITY_ADRENO_ES3
    u_xlatb46 = !!(0.0>=_ES_MoonDirection.y);
#else
    u_xlatb46 = 0.0>=_ES_MoonDirection.y;
#endif
    u_xlat5.xyz = (bool(u_xlatb46)) ? _ES_SunDirection.xyz : _ES_MoonDirection.xyz;
    u_xlat6.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat46 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat46 = inversesqrt(u_xlat46);
    u_xlat7.xyz = vec3(u_xlat46) * u_xlat6.xyz;
    u_xlat5.xyz = u_xlat6.xyz * vec3(u_xlat46) + u_xlat5.xyz;
    u_xlat46 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat46 = inversesqrt(u_xlat46);
    u_xlat5.xyz = vec3(u_xlat46) * u_xlat5.xyz;
    u_xlat4.x = dot(u_xlat16_4.xyz, u_xlat5.xyz);
    u_xlat18.x = _Gloss * 128.0;
    u_xlat4.x = max(u_xlat4.x, 9.99999975e-05);
    u_xlat4.x = log2(u_xlat4.x);
    u_xlat4.x = u_xlat4.x * u_xlat18.x;
    u_xlat4.x = exp2(u_xlat4.x);
    u_xlat4.x = u_xlat4.x * _SpecularIntensity;
    u_xlat4.x = max(u_xlat4.x, 0.0);
    u_xlat4.x = min(u_xlat4.x, 16.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_ES_MoonDirection.y>=9.99999975e-05);
#else
    u_xlatb18 = _ES_MoonDirection.y>=9.99999975e-05;
#endif
    u_xlat18.x = u_xlatb18 ? 1.0 : float(0.0);
    u_xlat32 = _ES_MoonDirection.y + -1.0;
    u_xlat18.x = u_xlat18.x * u_xlat32 + 1.0;
    u_xlat32 = float(1.0) / _ShoreTransparency;
    u_xlat46 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat46 = inversesqrt(u_xlat46);
    u_xlat5.xyz = vec3(u_xlat46) * vs_TEXCOORD6.xyz;
    u_xlat46 = dot(u_xlat7.xyz, u_xlat5.xyz);
    u_xlat46 = (-u_xlat46) + 1.0;
    u_xlat46 = max(u_xlat46, 9.99999975e-05);
    u_xlat46 = log2(u_xlat46);
    u_xlat5.x = u_xlat46 * _SpecularPower;
    u_xlat5.x = exp2(u_xlat5.x);
    u_xlat19.xyz = u_xlat18.xxx * _LightColor0.xyz;
    u_xlat19.xyz = u_xlat4.xxx * u_xlat19.xyz;
    u_xlat4.x = u_xlat29.x + -1.0;
    u_xlat4.x = u_xlat32 * u_xlat4.x;
    u_xlat4.x = u_xlat4.x * 0.100000001;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat19.xyz = u_xlat4.xxx * u_xlat19.xyz;
    u_xlat4.x = u_xlat29.x * u_xlat32;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat4.x = max(u_xlat4.x, 9.99999975e-05);
    u_xlat4.x = log2(u_xlat4.x);
    u_xlat4.x = u_xlat4.x * _ShoreFade;
    u_xlat4.x = exp2(u_xlat4.x);
    u_xlat6.xyz = _ShallowColor.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat6.xyz = u_xlat4.xxx * u_xlat6.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat1.xy = u_xlat1.xy / vs_TEXCOORD4.ww;
    u_xlat10_8.xyz = texture(_SceneScaledBufferBeforTransParent, u_xlat1.xy).xyz;
    u_xlat9.xyz = u_xlat6.xyz * u_xlat10_8.xyz;
    u_xlat1.x = 0.100000001 / _DeepColorDepth;
    u_xlat1.xw = u_xlat1.xw * u_xlat29.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xw = min(max(u_xlat1.xw, 0.0), 1.0);
#else
    u_xlat1.xw = clamp(u_xlat1.xw, 0.0, 1.0);
#endif
    u_xlat1.x = max(u_xlat1.x, 9.99999975e-05);
    u_xlat1.x = log2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _DeepColorFade;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat10.xyz = (-u_xlat6.xyz) * u_xlat10_8.xyz + _DeepColor.xyz;
    u_xlat10.xyz = u_xlat1.xxx * u_xlat10.xyz + u_xlat9.xyz;
    u_xlat11.xyz = u_xlat16_2.xyz * _DistortionIntensity.xyz;
    u_xlat12.x = vs_TEXCOORD8.x;
    u_xlat12.y = vs_TEXCOORD9.x;
    u_xlat12.z = vs_TEXCOORD6.x;
    u_xlat12.x = dot(u_xlat12.xyz, u_xlat11.xyz);
    u_xlat13.x = vs_TEXCOORD8.y;
    u_xlat13.y = vs_TEXCOORD9.y;
    u_xlat13.z = vs_TEXCOORD6.y;
    u_xlat12.y = dot(u_xlat13.xyz, u_xlat11.xyz);
    u_xlat13.x = vs_TEXCOORD8.z;
    u_xlat13.y = vs_TEXCOORD9.z;
    u_xlat13.z = vs_TEXCOORD6.z;
    u_xlat12.z = dot(u_xlat13.xyz, u_xlat11.xyz);
    u_xlat1.x = dot(u_xlat12.xyz, u_xlat12.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat12.xyz = u_xlat1.xxx * u_xlat12.xyz;
    u_xlat1.x = dot((-u_xlat7.xyz), u_xlat12.xyz);
    u_xlat1.x = u_xlat1.x + u_xlat1.x;
    u_xlat7.xyz = u_xlat12.xyz * (-u_xlat1.xxx) + (-u_xlat7.xyz);
    u_xlat10_0 = textureLod(_ReflectionSkyCubeMap, u_xlat7.xyz, 0.0);
    u_xlat16_2.x = u_xlat10_0.w + -1.0;
    u_xlat16_2.x = _ReflectionSkyCubeMap_HDR.w * u_xlat16_2.x + 1.0;
    u_xlat16_2.x = log2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * _ReflectionSkyCubeMap_HDR.y;
    u_xlat16_2.x = exp2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * _ReflectionSkyCubeMap_HDR.x;
    u_xlat16_16.xyz = u_xlat10_0.xyz * u_xlat16_2.xxx;
    u_xlat1.xy = u_xlat11.xy * vec2(_SSRDistortion);
    u_xlat18.x = float(1.0) / _SSRDistortion_Shore;
    u_xlat18.x = u_xlat29.x * u_xlat18.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat18.x = min(max(u_xlat18.x, 0.0), 1.0);
#else
    u_xlat18.x = clamp(u_xlat18.x, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat1.xy * u_xlat18.xx;
    u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD4.ww + vs_TEXCOORD4.xy;
    u_xlat1.xy = u_xlat1.xy / vs_TEXCOORD4.ww;
    u_xlat10_3 = texture(_SSRTexture, u_xlat1.xy).wxyz;
    u_xlat16_7.xyz = (-u_xlat16_2.xxx) * u_xlat10_0.xyz + u_xlat10_3.yzw;
    u_xlat7.xyz = u_xlat16_7.xyz * vec3(vec3(_SSRIntensity, _SSRIntensity, _SSRIntensity));
    u_xlat16_3.x = u_xlat10_3.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat7.xyz = u_xlat16_3.xxx * u_xlat7.xyz + u_xlat16_16.xyz;
    u_xlat1.x = u_xlat46 * _FresnelPower;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _ReflectionIntensity;
    u_xlat15.x = float(1.0) / _ShoreReflectionFade;
    u_xlat15.x = u_xlat15.x * u_xlat29.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat15.x = min(max(u_xlat15.x, 0.0), 1.0);
#else
    u_xlat15.x = clamp(u_xlat15.x, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat15.x * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat18.xyz = (-u_xlat10.xyz) + u_xlat7.xyz;
    u_xlat1.xyz = u_xlat1.xxx * u_xlat18.xyz + u_xlat10.xyz;
    u_xlat1.xyz = (-u_xlat6.xyz) * u_xlat10_8.xyz + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat4.xxx * u_xlat1.xyz + u_xlat9.xyz;
    u_xlat1.xyz = u_xlat19.xyz * u_xlat5.xxx + u_xlat1.xyz;
    u_xlat0.w = u_xlat1.w * vs_COLOR0.w;
    u_xlat4.xyz = vs_TEXCOORD5.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat5.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat5.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat5.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat43 = dot(u_xlat4.xyz, u_xlat5.xyz);
    u_xlat4.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat4.x = sqrt(u_xlat4.x);
    u_xlat18.y = u_xlat4.x * _HeigtFogParams.y;
    u_xlat46 = u_xlat4.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat46 = min(max(u_xlat46, 0.0), 1.0);
#else
    u_xlat46 = clamp(u_xlat46, 0.0, 1.0);
#endif
    u_xlat5.x = (-u_xlat46) + 2.0;
    u_xlat46 = u_xlat46 * u_xlat5.x;
    u_xlat5.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb43 = !!((-u_xlat43)>=u_xlat5.x);
#else
    u_xlatb43 = (-u_xlat43)>=u_xlat5.x;
#endif
    u_xlat5.x = u_xlat46 * _HeigtFogColDelta.w;
    u_xlat43 = (u_xlatb43) ? u_xlat5.x : u_xlat46;
    u_xlat43 = log2(u_xlat43);
    u_xlat43 = u_xlat43 * unity_FogColor.w;
    u_xlat43 = exp2(u_xlat43);
    u_xlat43 = min(u_xlat43, _HeigtFogColBase.w);
    u_xlat46 = vs_TEXCOORD5.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat46 = min(max(u_xlat46, 0.0), 1.0);
#else
    u_xlat46 = clamp(u_xlat46, 0.0, 1.0);
#endif
    u_xlat16_2.x = (-u_xlat46) + 2.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat46;
    u_xlat5.xyz = u_xlat16_2.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat46 = u_xlat4.x + (-_HeigtFogRamp.w);
    u_xlat46 = u_xlat46 * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat46 = min(max(u_xlat46, 0.0), 1.0);
#else
    u_xlat46 = clamp(u_xlat46, 0.0, 1.0);
#endif
    u_xlat6.xyz = (-u_xlat5.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat5.xyz = vec3(u_xlat46) * u_xlat6.xyz + u_xlat5.xyz;
    u_xlat46 = u_xlat4.y * _HeigtFogParams.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb47 = !!(0.00999999978<abs(u_xlat46));
#else
    u_xlatb47 = 0.00999999978<abs(u_xlat46);
#endif
    u_xlat6.x = u_xlat46 * -1.44269502;
    u_xlat6.x = exp2(u_xlat6.x);
    u_xlat6.x = (-u_xlat6.x) + 1.0;
    u_xlat46 = u_xlat6.x / u_xlat46;
    u_xlat16_2.x = (u_xlatb47) ? u_xlat46 : 1.0;
    u_xlat18.x = u_xlat4.y * _HeigtFogParams2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb46 = !!(0.00999999978<abs(u_xlat18.x));
#else
    u_xlatb46 = 0.00999999978<abs(u_xlat18.x);
#endif
    u_xlat47 = u_xlat18.x * -1.44269502;
    u_xlat47 = exp2(u_xlat47);
    u_xlat47 = (-u_xlat47) + 1.0;
    u_xlat18.x = u_xlat47 / u_xlat18.x;
    u_xlat16_2.y = (u_xlatb46) ? u_xlat18.x : 1.0;
    u_xlat18.x = u_xlat4.x * _HeigtFogParams2.y;
    u_xlat16_2.xy = u_xlat16_2.xy * u_xlat18.yx;
    u_xlat16_2.x = exp2((-u_xlat16_2.x));
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_16.x = exp2((-u_xlat16_2.y));
    u_xlat16_2.y = (-u_xlat16_16.x) + 1.0;
    u_xlat16_2.xy = max(u_xlat16_2.xy, vec2(0.0, 0.0));
    u_xlat16_2.x = u_xlat16_2.y + u_xlat16_2.x;
    u_xlat4.x = u_xlat4.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat16_16.x = (-u_xlat4.x) + 2.0;
    u_xlat16_16.x = u_xlat16_16.x * u_xlat4.x;
    u_xlat4.x = u_xlat16_16.x * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat4.x = u_xlat4.x + 1.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat4.x;
    u_xlat4.x = min(u_xlat16_2.x, _HeigtFogColBase.w);
    u_xlat18.x = vs_TEXCOORD5.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat18.x = min(max(u_xlat18.x, 0.0), 1.0);
#else
    u_xlat18.x = clamp(u_xlat18.x, 0.0, 1.0);
#endif
    u_xlat18.xyz = u_xlat18.xxx * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    u_xlat5.xyz = vec3(u_xlat43) * u_xlat5.xyz;
    u_xlat47 = (-u_xlat4.x) + 1.0;
    u_xlat5.xyz = vec3(u_xlat47) * u_xlat5.xyz;
    u_xlat4.xyz = u_xlat18.xyz * u_xlat4.xxx + u_xlat5.xyz;
    u_xlat43 = (-u_xlat43) + 1.0;
    u_xlat43 = u_xlat47 * u_xlat43;
    u_xlat0.xyz = vec3(u_xlat43) * u_xlat1.xyz + u_xlat4.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "MSAA_INTERPOLATION" "MHY_SHADER_LOW" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	mediump float _MHYZBias;
uniform 	vec4 hlslcc_mtx4x4_mhyJitteredVP[4];
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
out highp vec4 vs_TEXCOORD9;
out highp vec4 vs_TEXCOORD10;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
vec4 u_xlat4;
bool u_xlatb4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
mediump vec4 u_xlat16_6;
vec4 u_xlat7;
mediump vec3 u_xlat16_8;
float u_xlat11;
vec3 u_xlat13;
mediump float u_xlat16_14;
float u_xlat27;
bool u_xlatb27;
float u_xlat29;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4_mhyJitteredVP[1];
    u_xlat2 = hlslcc_mtx4x4_mhyJitteredVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4_mhyJitteredVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4_mhyJitteredVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat3.z = _MHYZBias * u_xlat2.w + u_xlat2.z;
    u_xlat3.xyw = u_xlat2.xyw;
    gl_Position = u_xlat3;
    vs_COLOR0 = in_COLOR0;
    u_xlat2.xyw = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat27 = u_xlat2.y * _HeigtFogParams.x;
    u_xlat4.x = u_xlat27 * -1.44269502;
    u_xlat4.x = exp2(u_xlat4.x);
    u_xlat4.x = (-u_xlat4.x) + 1.0;
    u_xlat4.x = u_xlat4.x / u_xlat27;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(0.00999999978<abs(u_xlat27));
#else
    u_xlatb27 = 0.00999999978<abs(u_xlat27);
#endif
    u_xlat16_5.x = (u_xlatb27) ? u_xlat4.x : 1.0;
    u_xlat27 = dot(u_xlat2.xyw, u_xlat2.xyw);
    u_xlat27 = sqrt(u_xlat27);
    u_xlat4.x = u_xlat27 * _HeigtFogParams.y;
    u_xlat16_5.x = u_xlat4.x * u_xlat16_5.x;
    u_xlat16_5.x = exp2((-u_xlat16_5.x));
    u_xlat16_5.x = (-u_xlat16_5.x) + 1.0;
    u_xlat4.x = u_xlat2.y * _HeigtFogParams2.x;
    u_xlat13.x = u_xlat4.x * -1.44269502;
    u_xlat13.x = exp2(u_xlat13.x);
    u_xlat13.x = (-u_xlat13.x) + 1.0;
    u_xlat13.x = u_xlat13.x / u_xlat4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(0.00999999978<abs(u_xlat4.x));
#else
    u_xlatb4 = 0.00999999978<abs(u_xlat4.x);
#endif
    u_xlat16_14 = (u_xlatb4) ? u_xlat13.x : 1.0;
    u_xlat4.x = u_xlat27 * _HeigtFogParams2.y;
    u_xlat16_14 = u_xlat4.x * u_xlat16_14;
    u_xlat16_14 = exp2((-u_xlat16_14));
    u_xlat16_5.y = (-u_xlat16_14) + 1.0;
    u_xlat16_5.xy = max(u_xlat16_5.xy, vec2(0.0, 0.0));
    u_xlat16_5.x = u_xlat16_5.y + u_xlat16_5.x;
    u_xlat4.x = u_xlat27 * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat16_14 = (-u_xlat4.x) + 2.0;
    u_xlat16_14 = u_xlat4.x * u_xlat16_14;
    u_xlat4.x = u_xlat16_14 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat4.x = u_xlat4.x + 1.0;
    u_xlat16_5.x = u_xlat4.x * u_xlat16_5.x;
    u_xlat4.x = min(u_xlat16_5.x, _HeigtFogColBase.w);
    u_xlat13.x = (-u_xlat4.x) + 1.0;
    u_xlat6.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat6.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat6.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat2.x = dot(u_xlat2.xyw, u_xlat6.xyz);
    u_xlat11 = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!((-u_xlat2.x)>=u_xlat11);
#else
    u_xlatb2 = (-u_xlat2.x)>=u_xlat11;
#endif
    u_xlat11 = u_xlat27 * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat11 = min(max(u_xlat11, 0.0), 1.0);
#else
    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
#endif
    u_xlat27 = u_xlat27 + (-_HeigtFogRamp.w);
    u_xlat27 = u_xlat27 * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
    u_xlat29 = (-u_xlat11) + 2.0;
    u_xlat11 = u_xlat29 * u_xlat11;
    u_xlat29 = u_xlat11 * _HeigtFogColDelta.w;
    u_xlat2.x = (u_xlatb2) ? u_xlat29 : u_xlat11;
    u_xlat2.x = log2(u_xlat2.x);
    u_xlat2.x = u_xlat2.x * unity_FogColor.w;
    u_xlat2.x = exp2(u_xlat2.x);
    u_xlat2.x = min(u_xlat2.x, _HeigtFogColBase.w);
    u_xlat11 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat11 = min(max(u_xlat11, 0.0), 1.0);
#else
    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
#endif
    u_xlat16_5.x = (-u_xlat11) + 2.0;
    u_xlat16_5.x = u_xlat11 * u_xlat16_5.x;
    u_xlat6.xyz = u_xlat16_5.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat7.xyz = (-u_xlat6.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat6.xyz = vec3(u_xlat27) * u_xlat7.xyz + u_xlat6.xyz;
    u_xlat6.xyz = u_xlat2.xxx * u_xlat6.xyz;
    u_xlat27 = (-u_xlat2.x) + 1.0;
    vs_TEXCOORD0.w = u_xlat13.x * u_xlat27;
    u_xlat2.xyw = u_xlat13.xxx * u_xlat6.xyz;
    u_xlat27 = u_xlat0.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
    u_xlat13.xyz = vec3(u_xlat27) * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    vs_TEXCOORD0.xyz = u_xlat13.xyz * u_xlat4.xxx + u_xlat2.xyw;
    u_xlat4.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat4.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat4.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat27 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat4.xyz = vec3(u_xlat27) * u_xlat4.xyz;
    u_xlat16_5.x = u_xlat4.y * u_xlat4.y;
    u_xlat16_5.x = u_xlat4.x * u_xlat4.x + (-u_xlat16_5.x);
    u_xlat16_6 = u_xlat4.yzzx * u_xlat4.xyzz;
    u_xlat16_8.x = dot(unity_SHBr, u_xlat16_6);
    u_xlat16_8.y = dot(unity_SHBg, u_xlat16_6);
    u_xlat16_8.z = dot(unity_SHBb, u_xlat16_6);
    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_8.xyz;
    u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat4.w = 1.0;
    u_xlat16_8.x = dot(unity_SHAr, u_xlat4);
    u_xlat16_8.y = dot(unity_SHAg, u_xlat4);
    u_xlat16_8.z = dot(unity_SHAb, u_xlat4);
    u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_8.xyz;
    vs_TEXCOORD1.xyz = u_xlat16_5.xyz;
    vs_TEXCOORD1.w = 1.0;
    u_xlat27 = u_xlat3.y * _ProjectionParams.x;
    u_xlat7.w = u_xlat27 * 0.5;
    u_xlat7.xz = u_xlat3.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.z = u_xlat2.z;
    u_xlat3.xy = u_xlat7.zz + u_xlat7.xw;
    vs_TEXCOORD2 = u_xlat3;
    vs_TEXCOORD4.xyw = u_xlat3.xyw;
    u_xlat27 = u_xlat1.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat27 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat1.x + u_xlat27;
    u_xlat27 = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat1.z + u_xlat27;
    u_xlat27 = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat1.w + u_xlat27;
    vs_TEXCOORD3.z = (-u_xlat27);
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD3.w = 0.0;
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD5.w = 0.0;
    vs_TEXCOORD6.xyz = u_xlat4.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[1].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].www + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * in_POSITION0.yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.zzz + u_xlat1.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.www + u_xlat1.xyz;
    vs_TEXCOORD7.xyz = u_xlat1.xyz * vec3(-1.0, -1.0, 1.0);
    vs_TEXCOORD7.w = 0.0;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat27 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat1.xyz = vec3(u_xlat27) * u_xlat1.xyz;
    vs_TEXCOORD8.xyz = u_xlat1.xyz;
    vs_TEXCOORD8.w = 0.0;
    u_xlat2.xyz = u_xlat1.yzx * u_xlat4.zxy;
    u_xlat1.xyz = u_xlat4.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
    u_xlat27 = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD9.xyz = vec3(u_xlat27) * u_xlat1.xyz;
    vs_TEXCOORD9.w = 0.0;
    u_xlat27 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat27 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat27;
    vs_TEXCOORD10.w = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat27;
    vs_TEXCOORD10.xyz = u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _NormalMapScale;
uniform 	float _Normal01_U_Speed;
uniform 	float _Normal01_VSpeed;
uniform 	float _NormalMapBias;
uniform 	float _Normal02_U_Speed;
uniform 	float _Normal02_V_Speed;
uniform 	float _RefractionIntensity;
uniform 	float _OpacityByDepth;
uniform 	float _SpecularIntensity;
uniform 	vec3 _ES_MoonDirection;
uniform 	vec3 _ES_SunDirection;
uniform 	float _Gloss;
uniform 	float _ShoreTransparency;
uniform 	float _SpecularPower;
uniform 	vec4 _ShallowColor;
uniform 	float _ShoreFade;
uniform 	vec4 _DeepColor;
uniform 	float _DeepColorDepth;
uniform 	float _DeepColorFade;
uniform 	vec4 _DistortionIntensity;
uniform 	float _ReflectionIntensity;
uniform 	float _FresnelPower;
uniform 	float _ShoreReflectionFade;
uniform 	mediump float _ProjectUVScale;
uniform 	vec4 _ReflectionSkyCubeMap_HDR;
uniform lowp sampler2D _Normal01;
uniform lowp sampler2D _Normal02;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _SceneScaledBufferBeforTransParent;
uniform lowp samplerCube _ReflectionSkyCubeMap;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD8;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
lowp vec3 u_xlat10_8;
vec3 u_xlat9;
vec3 u_xlat10;
vec3 u_xlat11;
vec3 u_xlat12;
vec3 u_xlat13;
vec2 u_xlat15;
mediump float u_xlat16_16;
vec3 u_xlat18;
bool u_xlatb18;
vec3 u_xlat19;
vec2 u_xlat29;
float u_xlat32;
float u_xlat43;
bool u_xlatb43;
float u_xlat46;
bool u_xlatb46;
float u_xlat47;
bool u_xlatb47;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD5.zx * vec2(vec2(_ProjectUVScale, _ProjectUVScale));
    u_xlat1.x = _Time.y * _Normal01_U_Speed + u_xlat0.y;
    u_xlat1.yz = _Time.yy * vec2(_Normal01_VSpeed, _Normal02_U_Speed) + u_xlat0.xy;
    u_xlat1.w = _Time.y * _Normal02_V_Speed + u_xlat0.x;
    u_xlat10_0.xyz = texture(_Normal01, u_xlat1.xy, _NormalMapBias).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_2.xy = u_xlat16_0.xy * vec2(_NormalMapScale);
    u_xlat10_1.xyz = texture(_Normal02, u_xlat1.zw, _NormalMapBias).xyz;
    u_xlat16_0.w = -1.0;
    u_xlat16_3.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.wwz;
    u_xlat16_3.xy = u_xlat16_3.xy * vec2(_NormalMapScale);
    u_xlat16_2.z = -1.0;
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
    u_xlat1.x = float(1.0) / vs_TEXCOORD4.w;
    u_xlat15.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat15.x = texture(_CameraDepthTexture, u_xlat15.xy).x;
    u_xlat15.x = _ZBufferParams.z * u_xlat15.x + _ZBufferParams.w;
    u_xlat15.x = float(1.0) / u_xlat15.x;
    u_xlat29.xy = u_xlat16_2.xy * vec2(vec2(_RefractionIntensity, _RefractionIntensity));
    u_xlat1.x = u_xlat1.x * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.xz = u_xlat1.xx * u_xlat29.xy;
    u_xlat1.xz = u_xlat1.xz * vs_TEXCOORD4.ww;
    u_xlat15.x = u_xlat15.x + (-vs_TEXCOORD4.w);
#ifdef UNITY_ADRENO_ES3
    u_xlat15.x = min(max(u_xlat15.x, 0.0), 1.0);
#else
    u_xlat15.x = clamp(u_xlat15.x, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat15.xx * u_xlat1.xz;
    u_xlat1.z = 0.0;
    u_xlat4.xyz = u_xlat1.xyz + vs_TEXCOORD4.xyw;
    u_xlat4.xy = u_xlat4.xy / u_xlat4.zz;
    u_xlat43 = texture(_CameraDepthTexture, u_xlat4.xy).x;
    u_xlat43 = _ZBufferParams.z * u_xlat43 + _ZBufferParams.w;
    u_xlat43 = float(1.0) / u_xlat43;
    u_xlat43 = u_xlat43 + (-vs_TEXCOORD4.w);
#ifdef UNITY_ADRENO_ES3
    u_xlat43 = min(max(u_xlat43, 0.0), 1.0);
#else
    u_xlat43 = clamp(u_xlat43, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat43) * u_xlat1.xyz + vs_TEXCOORD4.xyw;
    u_xlat29.xy = u_xlat1.xy / u_xlat1.zz;
    u_xlat29.x = texture(_CameraDepthTexture, u_xlat29.xy).x;
    u_xlat29.x = _ZBufferParams.z * u_xlat29.x + _ZBufferParams.w;
    u_xlat29.x = float(1.0) / u_xlat29.x;
    u_xlat29.x = u_xlat29.x + (-vs_TEXCOORD4.w);
    u_xlat1.w = 0.100000001 / _OpacityByDepth;
    u_xlat16_3.xz = u_xlat16_2.xy;
    u_xlat16_3.y = 1.0;
    u_xlat16_4.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
    u_xlat16_4.x = inversesqrt(u_xlat16_4.x);
    u_xlat16_4.xyz = u_xlat16_3.xyz * u_xlat16_4.xxx;
#ifdef UNITY_ADRENO_ES3
    u_xlatb46 = !!(0.0>=_ES_MoonDirection.y);
#else
    u_xlatb46 = 0.0>=_ES_MoonDirection.y;
#endif
    u_xlat5.xyz = (bool(u_xlatb46)) ? _ES_SunDirection.xyz : _ES_MoonDirection.xyz;
    u_xlat6.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat46 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat46 = inversesqrt(u_xlat46);
    u_xlat7.xyz = vec3(u_xlat46) * u_xlat6.xyz;
    u_xlat5.xyz = u_xlat6.xyz * vec3(u_xlat46) + u_xlat5.xyz;
    u_xlat46 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat46 = inversesqrt(u_xlat46);
    u_xlat5.xyz = vec3(u_xlat46) * u_xlat5.xyz;
    u_xlat4.x = dot(u_xlat16_4.xyz, u_xlat5.xyz);
    u_xlat18.x = _Gloss * 128.0;
    u_xlat4.x = max(u_xlat4.x, 9.99999975e-05);
    u_xlat4.x = log2(u_xlat4.x);
    u_xlat4.x = u_xlat4.x * u_xlat18.x;
    u_xlat4.x = exp2(u_xlat4.x);
    u_xlat4.x = u_xlat4.x * _SpecularIntensity;
    u_xlat4.x = max(u_xlat4.x, 0.0);
    u_xlat4.x = min(u_xlat4.x, 16.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_ES_MoonDirection.y>=9.99999975e-05);
#else
    u_xlatb18 = _ES_MoonDirection.y>=9.99999975e-05;
#endif
    u_xlat18.x = u_xlatb18 ? 1.0 : float(0.0);
    u_xlat32 = _ES_MoonDirection.y + -1.0;
    u_xlat18.x = u_xlat18.x * u_xlat32 + 1.0;
    u_xlat32 = float(1.0) / _ShoreTransparency;
    u_xlat46 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat46 = inversesqrt(u_xlat46);
    u_xlat5.xyz = vec3(u_xlat46) * vs_TEXCOORD6.xyz;
    u_xlat46 = dot(u_xlat7.xyz, u_xlat5.xyz);
    u_xlat46 = (-u_xlat46) + 1.0;
    u_xlat46 = max(u_xlat46, 9.99999975e-05);
    u_xlat46 = log2(u_xlat46);
    u_xlat5.x = u_xlat46 * _SpecularPower;
    u_xlat5.x = exp2(u_xlat5.x);
    u_xlat19.xyz = u_xlat18.xxx * _LightColor0.xyz;
    u_xlat19.xyz = u_xlat4.xxx * u_xlat19.xyz;
    u_xlat4.x = u_xlat29.x + -1.0;
    u_xlat4.x = u_xlat32 * u_xlat4.x;
    u_xlat4.x = u_xlat4.x * 0.100000001;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat19.xyz = u_xlat4.xxx * u_xlat19.xyz;
    u_xlat4.x = u_xlat29.x * u_xlat32;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat4.x = max(u_xlat4.x, 9.99999975e-05);
    u_xlat4.x = log2(u_xlat4.x);
    u_xlat4.x = u_xlat4.x * _ShoreFade;
    u_xlat4.x = exp2(u_xlat4.x);
    u_xlat6.xyz = _ShallowColor.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat6.xyz = u_xlat4.xxx * u_xlat6.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat1.xy = u_xlat1.xy / vs_TEXCOORD4.ww;
    u_xlat10_8.xyz = texture(_SceneScaledBufferBeforTransParent, u_xlat1.xy).xyz;
    u_xlat9.xyz = u_xlat6.xyz * u_xlat10_8.xyz;
    u_xlat1.x = 0.100000001 / _DeepColorDepth;
    u_xlat1.xw = u_xlat1.xw * u_xlat29.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xw = min(max(u_xlat1.xw, 0.0), 1.0);
#else
    u_xlat1.xw = clamp(u_xlat1.xw, 0.0, 1.0);
#endif
    u_xlat1.x = max(u_xlat1.x, 9.99999975e-05);
    u_xlat1.x = log2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _DeepColorFade;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat10.xyz = (-u_xlat6.xyz) * u_xlat10_8.xyz + _DeepColor.xyz;
    u_xlat10.xyz = u_xlat1.xxx * u_xlat10.xyz + u_xlat9.xyz;
    u_xlat11.xyz = u_xlat16_2.xyz * _DistortionIntensity.xyz;
    u_xlat12.x = vs_TEXCOORD8.x;
    u_xlat12.y = vs_TEXCOORD9.x;
    u_xlat12.z = vs_TEXCOORD6.x;
    u_xlat12.x = dot(u_xlat12.xyz, u_xlat11.xyz);
    u_xlat13.x = vs_TEXCOORD8.y;
    u_xlat13.y = vs_TEXCOORD9.y;
    u_xlat13.z = vs_TEXCOORD6.y;
    u_xlat12.y = dot(u_xlat13.xyz, u_xlat11.xyz);
    u_xlat13.x = vs_TEXCOORD8.z;
    u_xlat13.y = vs_TEXCOORD9.z;
    u_xlat13.z = vs_TEXCOORD6.z;
    u_xlat12.z = dot(u_xlat13.xyz, u_xlat11.xyz);
    u_xlat1.x = dot(u_xlat12.xyz, u_xlat12.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat11.xyz = u_xlat1.xxx * u_xlat12.xyz;
    u_xlat1.x = dot((-u_xlat7.xyz), u_xlat11.xyz);
    u_xlat1.x = u_xlat1.x + u_xlat1.x;
    u_xlat7.xyz = u_xlat11.xyz * (-u_xlat1.xxx) + (-u_xlat7.xyz);
    u_xlat10_0 = textureLod(_ReflectionSkyCubeMap, u_xlat7.xyz, 0.0);
    u_xlat16_2.x = u_xlat10_0.w + -1.0;
    u_xlat16_2.x = _ReflectionSkyCubeMap_HDR.w * u_xlat16_2.x + 1.0;
    u_xlat16_2.x = log2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * _ReflectionSkyCubeMap_HDR.y;
    u_xlat16_2.x = exp2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * _ReflectionSkyCubeMap_HDR.x;
    u_xlat1.x = u_xlat46 * _FresnelPower;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _ReflectionIntensity;
    u_xlat15.x = float(1.0) / _ShoreReflectionFade;
    u_xlat15.x = u_xlat15.x * u_xlat29.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat15.x = min(max(u_xlat15.x, 0.0), 1.0);
#else
    u_xlat15.x = clamp(u_xlat15.x, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat15.x * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat18.xyz = u_xlat16_2.xxx * u_xlat10_0.xyz + (-u_xlat10.xyz);
    u_xlat1.xyz = u_xlat1.xxx * u_xlat18.xyz + u_xlat10.xyz;
    u_xlat1.xyz = (-u_xlat6.xyz) * u_xlat10_8.xyz + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat4.xxx * u_xlat1.xyz + u_xlat9.xyz;
    u_xlat1.xyz = u_xlat19.xyz * u_xlat5.xxx + u_xlat1.xyz;
    u_xlat0.w = u_xlat1.w * vs_COLOR0.w;
    u_xlat4.xyz = vs_TEXCOORD5.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat5.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat5.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat5.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat43 = dot(u_xlat4.xyz, u_xlat5.xyz);
    u_xlat4.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat4.x = sqrt(u_xlat4.x);
    u_xlat18.y = u_xlat4.x * _HeigtFogParams.y;
    u_xlat46 = u_xlat4.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat46 = min(max(u_xlat46, 0.0), 1.0);
#else
    u_xlat46 = clamp(u_xlat46, 0.0, 1.0);
#endif
    u_xlat5.x = (-u_xlat46) + 2.0;
    u_xlat46 = u_xlat46 * u_xlat5.x;
    u_xlat5.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb43 = !!((-u_xlat43)>=u_xlat5.x);
#else
    u_xlatb43 = (-u_xlat43)>=u_xlat5.x;
#endif
    u_xlat5.x = u_xlat46 * _HeigtFogColDelta.w;
    u_xlat43 = (u_xlatb43) ? u_xlat5.x : u_xlat46;
    u_xlat43 = log2(u_xlat43);
    u_xlat43 = u_xlat43 * unity_FogColor.w;
    u_xlat43 = exp2(u_xlat43);
    u_xlat43 = min(u_xlat43, _HeigtFogColBase.w);
    u_xlat46 = vs_TEXCOORD5.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat46 = min(max(u_xlat46, 0.0), 1.0);
#else
    u_xlat46 = clamp(u_xlat46, 0.0, 1.0);
#endif
    u_xlat16_2.x = (-u_xlat46) + 2.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat46;
    u_xlat5.xyz = u_xlat16_2.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat46 = u_xlat4.x + (-_HeigtFogRamp.w);
    u_xlat46 = u_xlat46 * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat46 = min(max(u_xlat46, 0.0), 1.0);
#else
    u_xlat46 = clamp(u_xlat46, 0.0, 1.0);
#endif
    u_xlat6.xyz = (-u_xlat5.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat5.xyz = vec3(u_xlat46) * u_xlat6.xyz + u_xlat5.xyz;
    u_xlat46 = u_xlat4.y * _HeigtFogParams.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb47 = !!(0.00999999978<abs(u_xlat46));
#else
    u_xlatb47 = 0.00999999978<abs(u_xlat46);
#endif
    u_xlat6.x = u_xlat46 * -1.44269502;
    u_xlat6.x = exp2(u_xlat6.x);
    u_xlat6.x = (-u_xlat6.x) + 1.0;
    u_xlat46 = u_xlat6.x / u_xlat46;
    u_xlat16_2.x = (u_xlatb47) ? u_xlat46 : 1.0;
    u_xlat18.x = u_xlat4.y * _HeigtFogParams2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb46 = !!(0.00999999978<abs(u_xlat18.x));
#else
    u_xlatb46 = 0.00999999978<abs(u_xlat18.x);
#endif
    u_xlat47 = u_xlat18.x * -1.44269502;
    u_xlat47 = exp2(u_xlat47);
    u_xlat47 = (-u_xlat47) + 1.0;
    u_xlat18.x = u_xlat47 / u_xlat18.x;
    u_xlat16_2.y = (u_xlatb46) ? u_xlat18.x : 1.0;
    u_xlat18.x = u_xlat4.x * _HeigtFogParams2.y;
    u_xlat16_2.xy = u_xlat16_2.xy * u_xlat18.yx;
    u_xlat16_2.x = exp2((-u_xlat16_2.x));
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_16 = exp2((-u_xlat16_2.y));
    u_xlat16_2.y = (-u_xlat16_16) + 1.0;
    u_xlat16_2.xy = max(u_xlat16_2.xy, vec2(0.0, 0.0));
    u_xlat16_2.x = u_xlat16_2.y + u_xlat16_2.x;
    u_xlat4.x = u_xlat4.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat16_16 = (-u_xlat4.x) + 2.0;
    u_xlat16_16 = u_xlat16_16 * u_xlat4.x;
    u_xlat4.x = u_xlat16_16 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat4.x = u_xlat4.x + 1.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat4.x;
    u_xlat4.x = min(u_xlat16_2.x, _HeigtFogColBase.w);
    u_xlat18.x = vs_TEXCOORD5.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat18.x = min(max(u_xlat18.x, 0.0), 1.0);
#else
    u_xlat18.x = clamp(u_xlat18.x, 0.0, 1.0);
#endif
    u_xlat18.xyz = u_xlat18.xxx * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    u_xlat5.xyz = vec3(u_xlat43) * u_xlat5.xyz;
    u_xlat47 = (-u_xlat4.x) + 1.0;
    u_xlat5.xyz = vec3(u_xlat47) * u_xlat5.xyz;
    u_xlat4.xyz = u_xlat18.xyz * u_xlat4.xxx + u_xlat5.xyz;
    u_xlat43 = (-u_xlat43) + 1.0;
    u_xlat43 = u_xlat47 * u_xlat43;
    u_xlat0.xyz = vec3(u_xlat43) * u_xlat1.xyz + u_xlat4.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "MSAA_INTERPOLATION" "MHY_SHADER_LOW" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	mediump float _MHYZBias;
uniform 	vec4 hlslcc_mtx4x4_mhyJitteredVP[4];
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_TEXCOORD8;
out highp vec4 vs_TEXCOORD9;
out highp vec4 vs_TEXCOORD10;
float u_xlat0;
int u_xlati0;
vec4 u_xlat1;
bool u_xlatb1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
bool u_xlatb4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
mediump vec4 u_xlat16_6;
vec4 u_xlat7;
mediump vec3 u_xlat16_8;
vec3 u_xlat9;
float u_xlat10;
float u_xlat13;
bool u_xlatb13;
mediump float u_xlat16_14;
float u_xlat22;
float u_xlat28;
float u_xlat31;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat9.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4_mhyJitteredVP[1];
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4_mhyJitteredVP[3] * u_xlat2.wwww + u_xlat1;
    u_xlat3.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    u_xlat3.xyw = u_xlat1.xyw;
    gl_Position = u_xlat3;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.xyw = u_xlat9.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat4.x = u_xlat1.y * _HeigtFogParams.x;
    u_xlat13 = u_xlat4.x * -1.44269502;
    u_xlat13 = exp2(u_xlat13);
    u_xlat13 = (-u_xlat13) + 1.0;
    u_xlat13 = u_xlat13 / u_xlat4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(0.00999999978<abs(u_xlat4.x));
#else
    u_xlatb4 = 0.00999999978<abs(u_xlat4.x);
#endif
    u_xlat16_5.x = (u_xlatb4) ? u_xlat13 : 1.0;
    u_xlat4.x = dot(u_xlat1.xyw, u_xlat1.xyw);
    u_xlat4.x = sqrt(u_xlat4.x);
    u_xlat13 = u_xlat4.x * _HeigtFogParams.y;
    u_xlat16_5.x = u_xlat13 * u_xlat16_5.x;
    u_xlat16_5.x = exp2((-u_xlat16_5.x));
    u_xlat16_5.x = (-u_xlat16_5.x) + 1.0;
    u_xlat13 = u_xlat1.y * _HeigtFogParams2.x;
    u_xlat22 = u_xlat13 * -1.44269502;
    u_xlat22 = exp2(u_xlat22);
    u_xlat22 = (-u_xlat22) + 1.0;
    u_xlat22 = u_xlat22 / u_xlat13;
#ifdef UNITY_ADRENO_ES3
    u_xlatb13 = !!(0.00999999978<abs(u_xlat13));
#else
    u_xlatb13 = 0.00999999978<abs(u_xlat13);
#endif
    u_xlat16_14 = (u_xlatb13) ? u_xlat22 : 1.0;
    u_xlat13 = u_xlat4.x * _HeigtFogParams2.y;
    u_xlat16_14 = u_xlat13 * u_xlat16_14;
    u_xlat16_14 = exp2((-u_xlat16_14));
    u_xlat16_5.y = (-u_xlat16_14) + 1.0;
    u_xlat16_5.xy = max(u_xlat16_5.xy, vec2(0.0, 0.0));
    u_xlat16_5.x = u_xlat16_5.y + u_xlat16_5.x;
    u_xlat13 = u_xlat4.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat13 = min(max(u_xlat13, 0.0), 1.0);
#else
    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
#endif
    u_xlat16_14 = (-u_xlat13) + 2.0;
    u_xlat16_14 = u_xlat13 * u_xlat16_14;
    u_xlat13 = u_xlat16_14 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat13 = u_xlat13 + 1.0;
    u_xlat16_5.x = u_xlat13 * u_xlat16_5.x;
    u_xlat13 = min(u_xlat16_5.x, _HeigtFogColBase.w);
    u_xlat22 = (-u_xlat13) + 1.0;
    u_xlat31 = _ProjectionParams.z * 0.999899983;
    u_xlat6.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat6.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat6.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat1.x = dot(u_xlat1.xyw, u_xlat6.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!((-u_xlat1.x)>=u_xlat31);
#else
    u_xlatb1 = (-u_xlat1.x)>=u_xlat31;
#endif
    u_xlat10 = u_xlat4.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat10 = min(max(u_xlat10, 0.0), 1.0);
#else
    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
#endif
    u_xlat28 = u_xlat4.x + (-_HeigtFogRamp.w);
    u_xlat28 = u_xlat28 * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat28 = min(max(u_xlat28, 0.0), 1.0);
#else
    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
#endif
    u_xlat4.x = (-u_xlat10) + 2.0;
    u_xlat10 = u_xlat10 * u_xlat4.x;
    u_xlat4.x = u_xlat10 * _HeigtFogColDelta.w;
    u_xlat1.x = (u_xlatb1) ? u_xlat4.x : u_xlat10;
    u_xlat1.x = log2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * unity_FogColor.w;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat1.x = min(u_xlat1.x, _HeigtFogColBase.w);
    u_xlat10 = u_xlat9.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat10 = min(max(u_xlat10, 0.0), 1.0);
#else
    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
#endif
    u_xlat16_5.x = (-u_xlat10) + 2.0;
    u_xlat16_5.x = u_xlat10 * u_xlat16_5.x;
    u_xlat6.xyz = u_xlat16_5.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat7.xyz = (-u_xlat6.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat6.xyz = vec3(u_xlat28) * u_xlat7.xyz + u_xlat6.xyz;
    u_xlat6.xyz = u_xlat1.xxx * u_xlat6.xyz;
    u_xlat1.x = (-u_xlat1.x) + 1.0;
    vs_TEXCOORD0.w = u_xlat22 * u_xlat1.x;
    u_xlat1.xyw = vec3(u_xlat22) * u_xlat6.xyz;
    u_xlat4.x = u_xlat9.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat4.xzw = u_xlat4.xxx * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    vs_TEXCOORD0.xyz = u_xlat4.xzw * vec3(u_xlat13) + u_xlat1.xyw;
    vs_TEXCOORD1.w = 1.0;
    u_xlat4.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat4.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat4.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat1.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
    u_xlat16_5.x = u_xlat4.y * u_xlat4.y;
    u_xlat16_5.x = u_xlat4.x * u_xlat4.x + (-u_xlat16_5.x);
    u_xlat16_6 = u_xlat4.yzzx * u_xlat4.xyzz;
    u_xlat16_8.x = dot(unity_SHBr, u_xlat16_6);
    u_xlat16_8.y = dot(unity_SHBg, u_xlat16_6);
    u_xlat16_8.z = dot(unity_SHBb, u_xlat16_6);
    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_8.xyz;
    u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat4.w = 1.0;
    u_xlat16_8.x = dot(unity_SHAr, u_xlat4);
    u_xlat16_8.y = dot(unity_SHAg, u_xlat4);
    u_xlat16_8.z = dot(unity_SHAb, u_xlat4);
    u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_8.xyz;
    vs_TEXCOORD1.xyz = u_xlat16_5.xyz;
    u_xlat1.x = u_xlat3.y * _ProjectionParams.x;
    u_xlat7.w = u_xlat1.x * 0.5;
    u_xlat7.xz = u_xlat3.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.z = u_xlat1.z;
    u_xlat3.xy = u_xlat7.zz + u_xlat7.xw;
    vs_TEXCOORD2 = u_xlat3;
    vs_TEXCOORD4.xyw = u_xlat3.xyw;
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD3.w = 0.0;
    u_xlat1.x = u_xlat2.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat2.x + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat2.z + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat2.w + u_xlat1.x;
    vs_TEXCOORD3.z = (-u_xlat1.x);
    vs_TEXCOORD5.w = 0.0;
    vs_TEXCOORD5.xyz = u_xlat9.xyz;
    u_xlat9.xyz = (-u_xlat9.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD6.w = 0.0;
    vs_TEXCOORD6.xyz = u_xlat4.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].www + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * in_POSITION0.yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.zzz + u_xlat1.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * in_POSITION0.www + u_xlat1.xyz;
    vs_TEXCOORD7.xyz = u_xlat1.xyz * vec3(-1.0, -1.0, 1.0);
    vs_TEXCOORD7.w = 0.0;
    u_xlat1.xyz = in_TANGENT0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat0 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0 = inversesqrt(u_xlat0);
    u_xlat1.xyz = vec3(u_xlat0) * u_xlat1.xyz;
    vs_TEXCOORD8.xyz = u_xlat1.xyz;
    vs_TEXCOORD8.w = 0.0;
    u_xlat2.xyz = u_xlat1.yzx * u_xlat4.zxy;
    u_xlat1.xyz = u_xlat4.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
    u_xlat0 = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD9.xyz = vec3(u_xlat0) * u_xlat1.xyz;
    vs_TEXCOORD9.w = 0.0;
    u_xlat0 = u_xlat9.y * hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat9.x + u_xlat0;
    vs_TEXCOORD10.w = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat9.z + u_xlat0;
    vs_TEXCOORD10.xyz = u_xlat9.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogTopColor;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _NormalMapScale;
uniform 	float _Normal01_U_Speed;
uniform 	float _Normal01_VSpeed;
uniform 	float _NormalMapBias;
uniform 	float _Normal02_U_Speed;
uniform 	float _Normal02_V_Speed;
uniform 	float _RefractionIntensity;
uniform 	float _OpacityByDepth;
uniform 	float _SpecularIntensity;
uniform 	vec3 _ES_MoonDirection;
uniform 	vec3 _ES_SunDirection;
uniform 	float _Gloss;
uniform 	float _ShoreTransparency;
uniform 	float _SpecularPower;
uniform 	vec4 _ShallowColor;
uniform 	float _ShoreFade;
uniform 	vec4 _DeepColor;
uniform 	float _DeepColorDepth;
uniform 	float _DeepColorFade;
uniform 	vec4 _DistortionIntensity;
uniform 	float _ReflectionIntensity;
uniform 	float _FresnelPower;
uniform 	float _ShoreReflectionFade;
uniform 	mediump float _ProjectUVScale;
uniform 	vec4 _ReflectionSkyCubeMap_HDR;
uniform lowp sampler2D _Normal01;
uniform lowp sampler2D _Normal02;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _SceneScaledBufferBeforTransParent;
uniform lowp samplerCube _ReflectionSkyCubeMap;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD8;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
lowp vec3 u_xlat10_8;
vec3 u_xlat9;
vec3 u_xlat10;
vec3 u_xlat11;
vec3 u_xlat12;
vec3 u_xlat13;
vec2 u_xlat15;
mediump float u_xlat16_16;
vec3 u_xlat18;
bool u_xlatb18;
vec3 u_xlat19;
vec2 u_xlat29;
float u_xlat32;
float u_xlat43;
bool u_xlatb43;
float u_xlat46;
bool u_xlatb46;
float u_xlat47;
bool u_xlatb47;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD5.zx * vec2(vec2(_ProjectUVScale, _ProjectUVScale));
    u_xlat1.x = _Time.y * _Normal01_U_Speed + u_xlat0.y;
    u_xlat1.yz = _Time.yy * vec2(_Normal01_VSpeed, _Normal02_U_Speed) + u_xlat0.xy;
    u_xlat1.w = _Time.y * _Normal02_V_Speed + u_xlat0.x;
    u_xlat10_0.xyz = texture(_Normal01, u_xlat1.xy, _NormalMapBias).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_2.xy = u_xlat16_0.xy * vec2(_NormalMapScale);
    u_xlat10_1.xyz = texture(_Normal02, u_xlat1.zw, _NormalMapBias).xyz;
    u_xlat16_0.w = -1.0;
    u_xlat16_3.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.wwz;
    u_xlat16_3.xy = u_xlat16_3.xy * vec2(_NormalMapScale);
    u_xlat16_2.z = -1.0;
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
    u_xlat1.x = float(1.0) / vs_TEXCOORD4.w;
    u_xlat15.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat15.x = texture(_CameraDepthTexture, u_xlat15.xy).x;
    u_xlat15.x = _ZBufferParams.z * u_xlat15.x + _ZBufferParams.w;
    u_xlat15.x = float(1.0) / u_xlat15.x;
    u_xlat29.xy = u_xlat16_2.xy * vec2(vec2(_RefractionIntensity, _RefractionIntensity));
    u_xlat1.x = u_xlat1.x * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.xz = u_xlat1.xx * u_xlat29.xy;
    u_xlat1.xz = u_xlat1.xz * vs_TEXCOORD4.ww;
    u_xlat15.x = u_xlat15.x + (-vs_TEXCOORD4.w);
#ifdef UNITY_ADRENO_ES3
    u_xlat15.x = min(max(u_xlat15.x, 0.0), 1.0);
#else
    u_xlat15.x = clamp(u_xlat15.x, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat15.xx * u_xlat1.xz;
    u_xlat1.z = 0.0;
    u_xlat4.xyz = u_xlat1.xyz + vs_TEXCOORD4.xyw;
    u_xlat4.xy = u_xlat4.xy / u_xlat4.zz;
    u_xlat43 = texture(_CameraDepthTexture, u_xlat4.xy).x;
    u_xlat43 = _ZBufferParams.z * u_xlat43 + _ZBufferParams.w;
    u_xlat43 = float(1.0) / u_xlat43;
    u_xlat43 = u_xlat43 + (-vs_TEXCOORD4.w);
#ifdef UNITY_ADRENO_ES3
    u_xlat43 = min(max(u_xlat43, 0.0), 1.0);
#else
    u_xlat43 = clamp(u_xlat43, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat43) * u_xlat1.xyz + vs_TEXCOORD4.xyw;
    u_xlat29.xy = u_xlat1.xy / u_xlat1.zz;
    u_xlat29.x = texture(_CameraDepthTexture, u_xlat29.xy).x;
    u_xlat29.x = _ZBufferParams.z * u_xlat29.x + _ZBufferParams.w;
    u_xlat29.x = float(1.0) / u_xlat29.x;
    u_xlat29.x = u_xlat29.x + (-vs_TEXCOORD4.w);
    u_xlat1.w = 0.100000001 / _OpacityByDepth;
    u_xlat16_3.xz = u_xlat16_2.xy;
    u_xlat16_3.y = 1.0;
    u_xlat16_4.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
    u_xlat16_4.x = inversesqrt(u_xlat16_4.x);
    u_xlat16_4.xyz = u_xlat16_3.xyz * u_xlat16_4.xxx;
#ifdef UNITY_ADRENO_ES3
    u_xlatb46 = !!(0.0>=_ES_MoonDirection.y);
#else
    u_xlatb46 = 0.0>=_ES_MoonDirection.y;
#endif
    u_xlat5.xyz = (bool(u_xlatb46)) ? _ES_SunDirection.xyz : _ES_MoonDirection.xyz;
    u_xlat6.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat46 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat46 = inversesqrt(u_xlat46);
    u_xlat7.xyz = vec3(u_xlat46) * u_xlat6.xyz;
    u_xlat5.xyz = u_xlat6.xyz * vec3(u_xlat46) + u_xlat5.xyz;
    u_xlat46 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat46 = inversesqrt(u_xlat46);
    u_xlat5.xyz = vec3(u_xlat46) * u_xlat5.xyz;
    u_xlat4.x = dot(u_xlat16_4.xyz, u_xlat5.xyz);
    u_xlat18.x = _Gloss * 128.0;
    u_xlat4.x = max(u_xlat4.x, 9.99999975e-05);
    u_xlat4.x = log2(u_xlat4.x);
    u_xlat4.x = u_xlat4.x * u_xlat18.x;
    u_xlat4.x = exp2(u_xlat4.x);
    u_xlat4.x = u_xlat4.x * _SpecularIntensity;
    u_xlat4.x = max(u_xlat4.x, 0.0);
    u_xlat4.x = min(u_xlat4.x, 16.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_ES_MoonDirection.y>=9.99999975e-05);
#else
    u_xlatb18 = _ES_MoonDirection.y>=9.99999975e-05;
#endif
    u_xlat18.x = u_xlatb18 ? 1.0 : float(0.0);
    u_xlat32 = _ES_MoonDirection.y + -1.0;
    u_xlat18.x = u_xlat18.x * u_xlat32 + 1.0;
    u_xlat32 = float(1.0) / _ShoreTransparency;
    u_xlat46 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat46 = inversesqrt(u_xlat46);
    u_xlat5.xyz = vec3(u_xlat46) * vs_TEXCOORD6.xyz;
    u_xlat46 = dot(u_xlat7.xyz, u_xlat5.xyz);
    u_xlat46 = (-u_xlat46) + 1.0;
    u_xlat46 = max(u_xlat46, 9.99999975e-05);
    u_xlat46 = log2(u_xlat46);
    u_xlat5.x = u_xlat46 * _SpecularPower;
    u_xlat5.x = exp2(u_xlat5.x);
    u_xlat19.xyz = u_xlat18.xxx * _LightColor0.xyz;
    u_xlat19.xyz = u_xlat4.xxx * u_xlat19.xyz;
    u_xlat4.x = u_xlat29.x + -1.0;
    u_xlat4.x = u_xlat32 * u_xlat4.x;
    u_xlat4.x = u_xlat4.x * 0.100000001;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat19.xyz = u_xlat4.xxx * u_xlat19.xyz;
    u_xlat4.x = u_xlat29.x * u_xlat32;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat4.x = max(u_xlat4.x, 9.99999975e-05);
    u_xlat4.x = log2(u_xlat4.x);
    u_xlat4.x = u_xlat4.x * _ShoreFade;
    u_xlat4.x = exp2(u_xlat4.x);
    u_xlat6.xyz = _ShallowColor.xyz + vec3(-1.0, -1.0, -1.0);
    u_xlat6.xyz = u_xlat4.xxx * u_xlat6.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat1.xy = u_xlat1.xy / vs_TEXCOORD4.ww;
    u_xlat10_8.xyz = texture(_SceneScaledBufferBeforTransParent, u_xlat1.xy).xyz;
    u_xlat9.xyz = u_xlat6.xyz * u_xlat10_8.xyz;
    u_xlat1.x = 0.100000001 / _DeepColorDepth;
    u_xlat1.xw = u_xlat1.xw * u_xlat29.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xw = min(max(u_xlat1.xw, 0.0), 1.0);
#else
    u_xlat1.xw = clamp(u_xlat1.xw, 0.0, 1.0);
#endif
    u_xlat1.x = max(u_xlat1.x, 9.99999975e-05);
    u_xlat1.x = log2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _DeepColorFade;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat10.xyz = (-u_xlat6.xyz) * u_xlat10_8.xyz + _DeepColor.xyz;
    u_xlat10.xyz = u_xlat1.xxx * u_xlat10.xyz + u_xlat9.xyz;
    u_xlat11.xyz = u_xlat16_2.xyz * _DistortionIntensity.xyz;
    u_xlat12.x = vs_TEXCOORD8.x;
    u_xlat12.y = vs_TEXCOORD9.x;
    u_xlat12.z = vs_TEXCOORD6.x;
    u_xlat12.x = dot(u_xlat12.xyz, u_xlat11.xyz);
    u_xlat13.x = vs_TEXCOORD8.y;
    u_xlat13.y = vs_TEXCOORD9.y;
    u_xlat13.z = vs_TEXCOORD6.y;
    u_xlat12.y = dot(u_xlat13.xyz, u_xlat11.xyz);
    u_xlat13.x = vs_TEXCOORD8.z;
    u_xlat13.y = vs_TEXCOORD9.z;
    u_xlat13.z = vs_TEXCOORD6.z;
    u_xlat12.z = dot(u_xlat13.xyz, u_xlat11.xyz);
    u_xlat1.x = dot(u_xlat12.xyz, u_xlat12.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat11.xyz = u_xlat1.xxx * u_xlat12.xyz;
    u_xlat1.x = dot((-u_xlat7.xyz), u_xlat11.xyz);
    u_xlat1.x = u_xlat1.x + u_xlat1.x;
    u_xlat7.xyz = u_xlat11.xyz * (-u_xlat1.xxx) + (-u_xlat7.xyz);
    u_xlat10_0 = textureLod(_ReflectionSkyCubeMap, u_xlat7.xyz, 0.0);
    u_xlat16_2.x = u_xlat10_0.w + -1.0;
    u_xlat16_2.x = _ReflectionSkyCubeMap_HDR.w * u_xlat16_2.x + 1.0;
    u_xlat16_2.x = log2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * _ReflectionSkyCubeMap_HDR.y;
    u_xlat16_2.x = exp2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * _ReflectionSkyCubeMap_HDR.x;
    u_xlat1.x = u_xlat46 * _FresnelPower;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _ReflectionIntensity;
    u_xlat15.x = float(1.0) / _ShoreReflectionFade;
    u_xlat15.x = u_xlat15.x * u_xlat29.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat15.x = min(max(u_xlat15.x, 0.0), 1.0);
#else
    u_xlat15.x = clamp(u_xlat15.x, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat15.x * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat18.xyz = u_xlat16_2.xxx * u_xlat10_0.xyz + (-u_xlat10.xyz);
    u_xlat1.xyz = u_xlat1.xxx * u_xlat18.xyz + u_xlat10.xyz;
    u_xlat1.xyz = (-u_xlat6.xyz) * u_xlat10_8.xyz + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat4.xxx * u_xlat1.xyz + u_xlat9.xyz;
    u_xlat1.xyz = u_xlat19.xyz * u_xlat5.xxx + u_xlat1.xyz;
    u_xlat0.w = u_xlat1.w * vs_COLOR0.w;
    u_xlat4.xyz = vs_TEXCOORD5.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat5.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat5.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat5.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat43 = dot(u_xlat4.xyz, u_xlat5.xyz);
    u_xlat4.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat4.x = sqrt(u_xlat4.x);
    u_xlat18.y = u_xlat4.x * _HeigtFogParams.y;
    u_xlat46 = u_xlat4.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat46 = min(max(u_xlat46, 0.0), 1.0);
#else
    u_xlat46 = clamp(u_xlat46, 0.0, 1.0);
#endif
    u_xlat5.x = (-u_xlat46) + 2.0;
    u_xlat46 = u_xlat46 * u_xlat5.x;
    u_xlat5.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb43 = !!((-u_xlat43)>=u_xlat5.x);
#else
    u_xlatb43 = (-u_xlat43)>=u_xlat5.x;
#endif
    u_xlat5.x = u_xlat46 * _HeigtFogColDelta.w;
    u_xlat43 = (u_xlatb43) ? u_xlat5.x : u_xlat46;
    u_xlat43 = log2(u_xlat43);
    u_xlat43 = u_xlat43 * unity_FogColor.w;
    u_xlat43 = exp2(u_xlat43);
    u_xlat43 = min(u_xlat43, _HeigtFogColBase.w);
    u_xlat46 = vs_TEXCOORD5.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat46 = min(max(u_xlat46, 0.0), 1.0);
#else
    u_xlat46 = clamp(u_xlat46, 0.0, 1.0);
#endif
    u_xlat16_2.x = (-u_xlat46) + 2.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat46;
    u_xlat5.xyz = u_xlat16_2.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat46 = u_xlat4.x + (-_HeigtFogRamp.w);
    u_xlat46 = u_xlat46 * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat46 = min(max(u_xlat46, 0.0), 1.0);
#else
    u_xlat46 = clamp(u_xlat46, 0.0, 1.0);
#endif
    u_xlat6.xyz = (-u_xlat5.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat5.xyz = vec3(u_xlat46) * u_xlat6.xyz + u_xlat5.xyz;
    u_xlat46 = u_xlat4.y * _HeigtFogParams.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb47 = !!(0.00999999978<abs(u_xlat46));
#else
    u_xlatb47 = 0.00999999978<abs(u_xlat46);
#endif
    u_xlat6.x = u_xlat46 * -1.44269502;
    u_xlat6.x = exp2(u_xlat6.x);
    u_xlat6.x = (-u_xlat6.x) + 1.0;
    u_xlat46 = u_xlat6.x / u_xlat46;
    u_xlat16_2.x = (u_xlatb47) ? u_xlat46 : 1.0;
    u_xlat18.x = u_xlat4.y * _HeigtFogParams2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb46 = !!(0.00999999978<abs(u_xlat18.x));
#else
    u_xlatb46 = 0.00999999978<abs(u_xlat18.x);
#endif
    u_xlat47 = u_xlat18.x * -1.44269502;
    u_xlat47 = exp2(u_xlat47);
    u_xlat47 = (-u_xlat47) + 1.0;
    u_xlat18.x = u_xlat47 / u_xlat18.x;
    u_xlat16_2.y = (u_xlatb46) ? u_xlat18.x : 1.0;
    u_xlat18.x = u_xlat4.x * _HeigtFogParams2.y;
    u_xlat16_2.xy = u_xlat16_2.xy * u_xlat18.yx;
    u_xlat16_2.x = exp2((-u_xlat16_2.x));
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_16 = exp2((-u_xlat16_2.y));
    u_xlat16_2.y = (-u_xlat16_16) + 1.0;
    u_xlat16_2.xy = max(u_xlat16_2.xy, vec2(0.0, 0.0));
    u_xlat16_2.x = u_xlat16_2.y + u_xlat16_2.x;
    u_xlat4.x = u_xlat4.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat16_16 = (-u_xlat4.x) + 2.0;
    u_xlat16_16 = u_xlat16_16 * u_xlat4.x;
    u_xlat4.x = u_xlat16_16 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat4.x = u_xlat4.x + 1.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat4.x;
    u_xlat4.x = min(u_xlat16_2.x, _HeigtFogColBase.w);
    u_xlat18.x = vs_TEXCOORD5.y * _HeigtFogParams2.w + _HeigtFogParams2.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat18.x = min(max(u_xlat18.x, 0.0), 1.0);
#else
    u_xlat18.x = clamp(u_xlat18.x, 0.0, 1.0);
#endif
    u_xlat18.xyz = u_xlat18.xxx * _HeigtFogTopColor.xyz + unity_FogColor.xyz;
    u_xlat5.xyz = vec3(u_xlat43) * u_xlat5.xyz;
    u_xlat47 = (-u_xlat4.x) + 1.0;
    u_xlat5.xyz = vec3(u_xlat47) * u_xlat5.xyz;
    u_xlat4.xyz = u_xlat18.xyz * u_xlat4.xxx + u_xlat5.xyz;
    u_xlat43 = (-u_xlat43) + 1.0;
    u_xlat43 = u_xlat47 * u_xlat43;
    u_xlat0.xyz = vec3(u_xlat43) * u_xlat1.xyz + u_xlat4.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
}
Program "fp" {
SubProgram "gles3 " {
Keywords { "MHY_SHADER_HIGH" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MHY_SHADER_HIGH" }
""
}
SubProgram "gles3 " {
Keywords { "MHY_SHADER_MIDDLE" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MHY_SHADER_MIDDLE" }
""
}
SubProgram "gles3 " {
Keywords { "MHY_SHADER_LOW" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MHY_SHADER_LOW" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "MHY_SHADER_HIGH" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "MHY_SHADER_HIGH" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "MHY_SHADER_MIDDLE" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "MHY_SHADER_MIDDLE" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "MHY_SHADER_LOW" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "MHY_SHADER_LOW" }
""
}
SubProgram "gles3 " {
Keywords { "MSAA_INTERPOLATION" "MHY_SHADER_HIGH" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MSAA_INTERPOLATION" "MHY_SHADER_HIGH" }
""
}
SubProgram "gles3 " {
Keywords { "MSAA_INTERPOLATION" "MHY_SHADER_MIDDLE" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MSAA_INTERPOLATION" "MHY_SHADER_MIDDLE" }
""
}
SubProgram "gles3 " {
Keywords { "MSAA_INTERPOLATION" "MHY_SHADER_LOW" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MSAA_INTERPOLATION" "MHY_SHADER_LOW" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "MSAA_INTERPOLATION" "MHY_SHADER_HIGH" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "MSAA_INTERPOLATION" "MHY_SHADER_HIGH" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "MSAA_INTERPOLATION" "MHY_SHADER_MIDDLE" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "MSAA_INTERPOLATION" "MHY_SHADER_MIDDLE" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "MSAA_INTERPOLATION" "MHY_SHADER_LOW" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "MSAA_INTERPOLATION" "MHY_SHADER_LOW" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "MHY_SHADER_HIGH" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" "MHY_SHADER_HIGH" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "MHY_SHADER_MIDDLE" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" "MHY_SHADER_MIDDLE" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "MHY_SHADER_LOW" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" "MHY_SHADER_LOW" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "MHY_SHADER_HIGH" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "MHY_SHADER_HIGH" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "MHY_SHADER_MIDDLE" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "MHY_SHADER_MIDDLE" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "MHY_SHADER_LOW" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "MHY_SHADER_LOW" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "MSAA_INTERPOLATION" "MHY_SHADER_HIGH" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" "MSAA_INTERPOLATION" "MHY_SHADER_HIGH" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "MSAA_INTERPOLATION" "MHY_SHADER_MIDDLE" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" "MSAA_INTERPOLATION" "MHY_SHADER_MIDDLE" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "MSAA_INTERPOLATION" "MHY_SHADER_LOW" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" "MSAA_INTERPOLATION" "MHY_SHADER_LOW" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "MSAA_INTERPOLATION" "MHY_SHADER_HIGH" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "MSAA_INTERPOLATION" "MHY_SHADER_HIGH" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "MSAA_INTERPOLATION" "MHY_SHADER_MIDDLE" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "MSAA_INTERPOLATION" "MHY_SHADER_MIDDLE" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "MSAA_INTERPOLATION" "MHY_SHADER_LOW" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "MSAA_INTERPOLATION" "MHY_SHADER_LOW" }
""
}
}
}
}
CustomEditor "MiHoYoASEMaterialInspector"
}